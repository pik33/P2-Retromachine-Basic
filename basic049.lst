00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic049.p2asm"
00000                 | con
00000                 | 	_clkfreq = 338695652
00000                 | 	_clkmode = 28773115
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 49
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_blit = 185
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_padx = 200
00000                 | 	token_pady = 201
00000                 | 	token_padz = 202
00000                 | 	token_padh = 203
00000                 | 	token_padrx = 204
00000                 | 	token_padry = 205
00000                 | 	token_padrz = 206
00000                 | 	token_cogstop = 207
00000                 | 	token_memlo = 208
00000                 | 	token_memtop = 209
00000                 | 	token_setcolor = 210
00000                 | 	token_getcolor = 211
00000                 | 	token_restorepalette = 212
00000                 | 	token_pads = 213
00000                 | 	token_padw = 214
00000                 | 	token_findfirst = 215
00000                 | 	token_findnext = 216
00000                 | 	token_defchar = 217
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 338695652
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1b70afb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 85 DB 80 FF 
00420 007 00 F0 65 FD | 	hubset	##28773112
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 85 DB 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##28773115
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 0A 18 8A FF 
00440 00f 14 C8 6F FC | 	wrlong	##338695652, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 E0 4A A2 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 49 93 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 48 91 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 49 91 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 92 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 90 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 48 91 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 49 93 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec F8 4E 04 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed C0 4B 04 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 00 C6 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 A0 3E 04 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 F8 39 04 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 C0 8E 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 E0 45 04 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 30 C0 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 E0 FF 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 98 FD 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 70 0F 04 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 78 6B 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     F4 5B B2 FD | 	call	#_hg010b_spin2_waitvbl
00824     74 70 B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     E0 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10208
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     E0 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10208
00840     52 00 00 FF 
00844     38 E5 05 F1 | 	add	objptr, ##42296
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     52 00 00 FF 
00850     38 E5 85 F1 | 	sub	objptr, ##42296
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then audio.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): audio.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     5C E5 05 F1 | 	add	objptr, ##41308
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     5C E5 85 F1 | 	sub	objptr, ##41308
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 32 06 F6 | 	mov	local07, ##44100
00890     0C 34 C6 F9 | 	decod	local08, #12
00894     00 36 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 38 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     60 73 B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     24 7B B2 FD | 	call	#__system___waitms
008e4     07 30 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     AC 74 B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 2E 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     17 31 02 C6 |  if_b	mov	local06, local05
00914     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
0091c     17 2B 02 C6 |  if_b	mov	local03, local05
00920     01 26 06 C6 |  if_b	mov	local01, #1
00924     15 2D 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 28 06 36 |  if_ae	mov	local02, #0
00934     00 26 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 2E 0E F2 | 	cmp	local05, #0 wz
0093c     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 28 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00950     15 2D 02 86 |  if_c_and_z	mov	local04, local03
00954     15 28 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 2C 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then audio.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     5C E5 05 F1 | 	add	objptr, ##41308
00968     F2 30 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     5C E5 85 F1 | 	sub	objptr, ##41308
00974     01 30 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     52 00 00 FF 
00980     FC E4 05 F1 | 	add	objptr, ##42236
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 32 06 F6 | 	mov	local07, ##44100
00990     0C 34 C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 36 02 FB | 	rdlong	local09, objptr
0099c     01 38 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     1B 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     47 00 00 FF 
009bc     2C E4 85 F1 | 	sub	objptr, ##36396
009c0     70 72 B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     16 13 02 F6 | 	mov	arg01, local04
009d0     68 40 B2 FD | 	call	#_scantochar
009d4     FD 3A 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     52 00 00 FF 
009dc     38 E5 05 F1 | 	add	objptr, ##42296
009e0     F2 3C 02 FB | 	rdlong	local12, objptr
009e4     52 00 00 FF 
009e8     38 E5 85 F1 | 	sub	objptr, ##42296
009ec     1E 31 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 3A 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 3A 16 F2 | 	cmp	local11, #123 wc
00a00     20 3A 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 3A 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a14     20 3A 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 3A 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 3A 16 F2 | 	cmp	local11, #32 wc
00a28     09 3A 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 3A 16 F2 | 	cmp	local11, #23 wc
00a3c     27 3A 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 3A 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     52 00 00 FF 
00a64     20 E5 05 F1 | 	add	objptr, ##42272
00a68     F2 30 0A FB | 	rdlong	local06, objptr wz
00a6c     52 00 00 FF 
00a70     20 E5 85 F1 | 	sub	objptr, ##42272
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 32 C2 FA | 	rdbyte	local07, objptr
00a80     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a84     80 34 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 3E 02 FB | 	rdlong	local13, objptr
00a90     1F 41 02 F6 | 	mov	local14, local13
00a94     1A 41 02 F1 | 	add	local14, local08
00a98     7F 40 06 F1 | 	add	local14, #127
00a9c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 32 06 FA | 	mul	local07, #128
00aa4     19 3F 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 36 E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     1B 43 52 F6 | 	abs	local15, local09 wc
00ab8     01 42 46 F0 | 	shr	local15, #1
00abc     21 3F 82 F3 | 	sumc	local13, local15
00ac0     01 3E 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     20 45 02 F6 | 	mov	local16, local14
00ac8     01 44 86 F1 | 	sub	local16, #1
00acc     22 13 02 F6 | 	mov	arg01, local16
00ad0     60 3E B2 FD | 	call	#_pspeek
00ad4     FD 46 02 F6 | 	mov	local17, result1
00ad8     23 49 E2 F8 | 	getbyte	local18, local17, #0
00adc     24 4B 02 F6 | 	mov	local19, local18
00ae0     20 13 02 F6 | 	mov	arg01, local14
00ae4     25 15 02 F6 | 	mov	arg02, local19
00ae8     00 3E B2 FD | 	call	#_pspoke
00aec     01 40 86 F1 | 	sub	local14, #1
00af0     1F 41 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     52 00 00 FF 
00afc     40 E5 05 F1 | 	add	objptr, ##42304
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     52 00 00 FF 
00b08     02 E5 85 F1 | 	sub	objptr, ##42242
00b0c     F2 32 C2 FA | 	rdbyte	local07, objptr
00b10     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b14     80 34 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 36 02 FB | 	rdlong	local09, objptr
00b20     1B 41 02 F6 | 	mov	local14, local09
00b24     1A 41 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 42 E2 FA | 	rdword	local15, objptr
00b30     21 39 32 F9 | 	getword	local10, local15, #0
00b34     1C 4D 52 F6 | 	abs	local20, local10 wc
00b38     01 4C 46 F0 | 	shr	local20, #1
00b3c     26 4D 82 F6 | 	negc	local20, local20
00b40     26 41 02 F1 | 	add	local14, local20
00b44     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b48     80 32 06 FA | 	mul	local07, #128
00b4c     1B 35 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     1A 4F 02 F6 | 	mov	local21, local08
00b58     19 4F 02 F1 | 	add	local21, local07
00b5c     80 4E 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     27 41 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 30 E2 FA | 	rdword	local06, objptr
00b70     52 00 00 FF 
00b74     04 E5 05 F1 | 	add	objptr, ##42244
00b78     F2 34 02 FB | 	rdlong	local08, objptr
00b7c     01 34 66 F0 | 	shl	local08, #1
00b80     1A 31 02 F1 | 	add	local06, local08
00b84     52 00 00 FF 
00b88     02 E5 85 F1 | 	sub	objptr, ##42242
00b8c     F2 3C C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 3C 06 FA | 	mul	local12, #16
00b98     04 3C 06 F1 | 	add	local12, #4
00b9c     20 13 02 F6 | 	mov	arg01, local14
00ba0     90 3D B2 FD | 	call	#_pspeek
00ba4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 34 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 38 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     1C 37 02 F6 | 	mov	local09, local10
00bc0     18 13 02 F6 | 	mov	arg01, local06
00bc4     1E 15 02 F6 | 	mov	arg02, local12
00bc8     19 17 02 F6 | 	mov	arg03, local07
00bcc     1A 19 02 F6 | 	mov	arg04, local08
00bd0     1B 1B 02 F6 | 	mov	arg05, local09
00bd4     F8 55 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     52 00 00 FF 
00bdc     40 E5 05 F1 | 	add	objptr, ##42304
00be0     F2 30 02 FB | 	rdlong	local06, objptr
00be4     01 30 06 F1 | 	add	local06, #1
00be8     F2 30 62 FC | 	wrlong	local06, objptr
00bec     52 00 00 FF 
00bf0     40 E5 85 F1 | 	sub	objptr, ##42304
00bf4     01 40 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     1D 13 02 F6 | 	mov	arg01, local11
00c00     88 59 B2 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then audio.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): audio.stop(7) 'end of line reached
00c04     01 3A 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 30 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 30 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     5C E5 05 A1 |  if_e	add	objptr, ##41308
00c2c     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     5C E5 85 A1 |  if_e	sub	objptr, ##41308
00c38     1A 33 02 A6 |  if_e	mov	local07, local08
00c3c     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 32 06 F6 | 	mov	local07, ##44100
00c60     0C 34 C6 F9 | 	decod	local08, #12
00c64     00 36 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 38 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     9C 6F B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     60 77 B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     EC 70 B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     BE 01 00 FF 
00ccc     C2 50 06 F6 | 	mov	local22, ##@LR__5537
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     54 E4 05 F1 | 	add	objptr, ##28244
00cd8     F2 40 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     54 E4 85 F1 | 	sub	objptr, ##28244
00ce4                 | LR__0019
00ce4     80 40 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 42 C2 FA | 	rdbyte	local15, objptr
00cf4     80 42 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     21 13 02 F1 | 	add	arg01, local15
00d08     20 13 02 F1 | 	add	arg01, local14
00d0c     24 3C B2 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     40 96 B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     28 13 02 F6 | 	mov	arg01, local22
00d20     4C 74 B2 FD | 	call	#__system___string_concat
00d24     FD 50 02 F6 | 	mov	local22, result1
00d28     01 40 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     52 00 00 FF 
00d34     20 E5 05 F1 | 	add	objptr, ##42272
00d38     F2 30 0A FB | 	rdlong	local06, objptr wz
00d3c     52 00 00 FF 
00d40     20 E5 85 F1 | 	sub	objptr, ##42272
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 32 C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 32 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     A8 5D B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     A8 5F B2 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     28 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then audio.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): audio.stop(0)  	' tab
00d7c     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 30 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 30 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     5C E5 05 F1 | 	add	objptr, ##41308
00da0     F2 34 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     5C E5 85 F1 | 	sub	objptr, ##41308
00dac     1A 33 02 F6 | 	mov	local07, local08
00db0     01 32 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 32 06 F6 | 	mov	local07, ##44100
00dd4     0E 34 C6 F9 | 	decod	local08, #14
00dd8     00 36 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 38 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     28 6E B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     EC 75 B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     78 6F B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 40 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 36 C2 FA | 	rdbyte	local09, objptr
00e48     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e4c     1A 39 02 F6 | 	mov	local10, local08
00e50     80 38 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 42 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     21 33 02 F6 | 	mov	local07, local15
00e64     1C 33 02 F1 | 	add	local07, local10
00e68     20 33 02 F1 | 	add	local07, local14
00e6c     19 13 02 F6 | 	mov	arg01, local07
00e70     C0 3A B2 FD | 	call	#_pspeek
00e74     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 30 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 40 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     20 33 02 F6 | 	mov	local07, local14
00e8c     01 32 66 F0 | 	shl	local07, #1
00e90     19 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     18 55 B2 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     0C 55 B2 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 40 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     54 E4 05 F1 | 	add	objptr, ##28244
00eb8     F2 30 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     54 E4 85 F1 | 	sub	objptr, ##28244
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     54 E4 05 F1 | 	add	objptr, ##28244
00ed4     F2 3C 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     54 E4 85 F1 | 	sub	objptr, ##28244
00ee0     1E 31 02 F6 | 	mov	local06, local12
00ee4     18 41 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     54 E4 05 F1 | 	add	objptr, ##28244
00ef4     F2 34 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     54 E4 85 F1 | 	sub	objptr, ##28244
00f00     1A 33 02 F6 | 	mov	local07, local08
00f04     19 3D 02 F6 | 	mov	local12, local07
00f08     01 3C 66 F0 | 	shl	local12, #1
00f0c     1E 31 02 F6 | 	mov	local06, local12
00f10     18 13 02 F6 | 	mov	arg01, local06
00f14     9C 54 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 3A 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     54 E4 05 F1 | 	add	objptr, ##28244
00f28     F2 34 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     54 E4 85 F1 | 	sub	objptr, ##28244
00f34     1A 33 02 F6 | 	mov	local07, local08
00f38     19 3D 02 F6 | 	mov	local12, local07
00f3c     01 3C 66 F0 | 	shl	local12, #1
00f40     1E 31 02 F6 | 	mov	local06, local12
00f44     18 13 02 F6 | 	mov	arg01, local06
00f48     68 54 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f50     00 30 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     88 54 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f60     24 30 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     78 54 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 32 C2 FA | 	rdbyte	local07, objptr
00f7c     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f80     80 34 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 52 02 FB | 	rdlong	local23, objptr
00f8c     29 41 02 F6 | 	mov	local14, local23
00f90     1A 41 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 38 E2 FA | 	rdword	local10, objptr
00f9c     1C 4D 52 F6 | 	abs	local20, local10 wc
00fa0     01 4C 46 F0 | 	shr	local20, #1
00fa4     26 41 82 F3 | 	sumc	local14, local20
00fa8     19 33 E2 F8 | 	getbyte	local07, local07, #0
00fac     80 32 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     19 53 02 F1 | 	add	local23, local07
00fb8     80 52 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     29 41 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     20 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     64 39 B2 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     20 13 02 F6 | 	mov	arg01, local14
00fd8     10 39 B2 FD | 	call	#_pspoke
00fdc     01 40 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 36 C2 FA | 	rdbyte	local09, objptr
00fec     80 36 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     1B 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     E0 38 B2 FD | 	call	#_pspoke
0100c     52 00 00 FF 
01010     40 E5 05 F1 | 	add	objptr, ##42304
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     52 00 00 FF 
0101c     02 E5 85 F1 | 	sub	objptr, ##42242
01020     F2 3C C2 FA | 	rdbyte	local12, objptr
01024     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01028     80 34 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 36 02 FB | 	rdlong	local09, objptr
01034     1B 41 02 F6 | 	mov	local14, local09
01038     1A 41 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 42 E2 FA | 	rdword	local15, objptr
01044     21 39 32 F9 | 	getword	local10, local15, #0
01048     1C 4D 52 F6 | 	abs	local20, local10 wc
0104c     01 4C 46 F0 | 	shr	local20, #1
01050     26 4D 82 F6 | 	negc	local20, local20
01054     26 41 02 F1 | 	add	local14, local20
01058     1E 31 E2 F8 | 	getbyte	local06, local12, #0
0105c     18 33 02 F6 | 	mov	local07, local06
01060     80 32 06 FA | 	mul	local07, #128
01064     1B 35 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     1A 55 02 F6 | 	mov	local24, local08
01070     19 55 02 F1 | 	add	local24, local07
01074     80 54 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     2A 41 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 30 E2 FA | 	rdword	local06, objptr
01088     52 00 00 FF 
0108c     04 E5 05 F1 | 	add	objptr, ##42244
01090     F2 34 02 FB | 	rdlong	local08, objptr
01094     01 34 66 F0 | 	shl	local08, #1
01098     1A 31 02 F1 | 	add	local06, local08
0109c     52 00 00 FF 
010a0     02 E5 85 F1 | 	sub	objptr, ##42242
010a4     F2 3C C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 3C 06 FA | 	mul	local12, #16
010b0     04 3C 06 F1 | 	add	local12, #4
010b4     20 13 02 F6 | 	mov	arg01, local14
010b8     78 38 B2 FD | 	call	#_pspeek
010bc     FD 32 E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 34 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 38 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     1C 37 02 F6 | 	mov	local09, local10
010d8     18 13 02 F6 | 	mov	arg01, local06
010dc     1E 15 02 F6 | 	mov	arg02, local12
010e0     19 17 02 F6 | 	mov	arg03, local07
010e4     1A 19 02 F6 | 	mov	arg04, local08
010e8     1B 1B 02 F6 | 	mov	arg05, local09
010ec     E0 50 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     52 00 00 FF 
010f4     40 E5 05 F1 | 	add	objptr, ##42304
010f8     F2 30 02 FB | 	rdlong	local06, objptr
010fc     01 30 06 F1 | 	add	local06, #1
01100     F2 30 62 FC | 	wrlong	local06, objptr
01104     52 00 00 FF 
01108     40 E5 85 F1 | 	sub	objptr, ##42304
0110c     20 31 02 F6 | 	mov	local06, local14
01110     20 3D 02 F6 | 	mov	local12, local14
01114     01 3C 06 F1 | 	add	local12, #1
01118     1E 41 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 3A 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 3C E2 FA | 	rdword	local12, objptr
01130     1E 31 32 F9 | 	getword	local06, local12, #0
01134     37 00 00 FF 
01138     18 E4 05 F1 | 	add	objptr, ##28184
0113c     F2 36 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     54 E4 85 F1 | 	sub	objptr, ##28244
01148     1B 35 02 F6 | 	mov	local08, local09
0114c     1A 33 02 F6 | 	mov	local07, local08
01150     01 32 66 F0 | 	shl	local07, #1
01154     19 31 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     00 52 B2 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 32 C2 FA | 	rdbyte	local07, objptr
01180     19 35 E2 F8 | 	getbyte	local08, local07, #0
01184     80 34 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 56 02 FB | 	rdlong	local25, objptr
01190     2B 41 02 F6 | 	mov	local14, local25
01194     1A 41 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 38 E2 FA | 	rdword	local10, objptr
011a0     1C 4D 52 F6 | 	abs	local20, local10 wc
011a4     01 4C 46 F0 | 	shr	local20, #1
011a8     26 41 82 F3 | 	sumc	local14, local20
011ac     19 33 E2 F8 | 	getbyte	local07, local07, #0
011b0     80 32 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     19 57 02 F1 | 	add	local25, local07
011bc     80 56 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     2B 41 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     20 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     60 37 B2 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     20 13 02 F6 | 	mov	arg01, local14
011dc     0C 37 B2 FD | 	call	#_pspoke
011e0     01 40 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 36 C2 FA | 	rdbyte	local09, objptr
011f0     80 36 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     1B 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     DC 36 B2 FD | 	call	#_pspoke
01210     52 00 00 FF 
01214     40 E5 05 F1 | 	add	objptr, ##42304
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     52 00 00 FF 
01220     02 E5 85 F1 | 	sub	objptr, ##42242
01224     F2 3C C2 FA | 	rdbyte	local12, objptr
01228     1E 35 E2 F8 | 	getbyte	local08, local12, #0
0122c     80 34 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 36 02 FB | 	rdlong	local09, objptr
01238     1B 41 02 F6 | 	mov	local14, local09
0123c     1A 41 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 42 E2 FA | 	rdword	local15, objptr
01248     21 39 32 F9 | 	getword	local10, local15, #0
0124c     1C 4D 52 F6 | 	abs	local20, local10 wc
01250     01 4C 46 F0 | 	shr	local20, #1
01254     26 4D 82 F6 | 	negc	local20, local20
01258     26 41 02 F1 | 	add	local14, local20
0125c     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01260     18 33 02 F6 | 	mov	local07, local06
01264     80 32 06 FA | 	mul	local07, #128
01268     1B 35 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     1A 59 02 F6 | 	mov	local26, local08
01274     19 59 02 F1 | 	add	local26, local07
01278     80 58 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     2C 41 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 30 E2 FA | 	rdword	local06, objptr
0128c     52 00 00 FF 
01290     04 E5 05 F1 | 	add	objptr, ##42244
01294     F2 34 02 FB | 	rdlong	local08, objptr
01298     01 34 66 F0 | 	shl	local08, #1
0129c     1A 31 02 F1 | 	add	local06, local08
012a0     52 00 00 FF 
012a4     02 E5 85 F1 | 	sub	objptr, ##42242
012a8     F2 3C C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 3C 06 FA | 	mul	local12, #16
012b4     04 3C 06 F1 | 	add	local12, #4
012b8     20 13 02 F6 | 	mov	arg01, local14
012bc     74 36 B2 FD | 	call	#_pspeek
012c0     FD 32 E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 34 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 38 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     1C 37 02 F6 | 	mov	local09, local10
012dc     18 13 02 F6 | 	mov	arg01, local06
012e0     1E 15 02 F6 | 	mov	arg02, local12
012e4     19 17 02 F6 | 	mov	arg03, local07
012e8     1A 19 02 F6 | 	mov	arg04, local08
012ec     1B 1B 02 F6 | 	mov	arg05, local09
012f0     DC 4E B2 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     52 00 00 FF 
012f8     40 E5 05 F1 | 	add	objptr, ##42304
012fc     F2 30 02 FB | 	rdlong	local06, objptr
01300     01 30 06 F1 | 	add	local06, #1
01304     F2 30 62 FC | 	wrlong	local06, objptr
01308     52 00 00 FF 
0130c     40 E5 85 F1 | 	sub	objptr, ##42304
01310     20 31 02 F6 | 	mov	local06, local14
01314     20 3D 02 F6 | 	mov	local12, local14
01318     01 3C 06 F1 | 	add	local12, #1
0131c     1E 41 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     BE 01 00 FF 
01328     C3 50 06 F6 | 	mov	local22, ##@LR__5538
0132c     04 30 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 3A 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     52 00 00 FF 
01354     E6 E4 05 F1 | 	add	objptr, ##42214
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     52 00 00 FF 
01360     24 E5 85 F1 | 	sub	objptr, ##42276
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     52 00 00 CF 
0136c     24 E5 05 C1 |  if_b	add	objptr, ##42276
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     52 00 00 CF 
01378     24 E5 85 C1 |  if_b	sub	objptr, ##42276
0137c     52 00 00 FF 
01380     24 E5 05 F1 | 	add	objptr, ##42276
01384     F2 3C 02 FB | 	rdlong	local12, objptr
01388     52 00 00 FF 
0138c     24 E5 85 F1 | 	sub	objptr, ##42276
01390     1E 31 02 F6 | 	mov	local06, local12
01394     18 13 02 F6 | 	mov	arg01, local06
01398     48 50 B2 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 3A 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     52 00 00 FF 
013b4     E6 E4 05 F1 | 	add	objptr, ##42214
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     52 00 00 FF 
013c0     24 E5 85 F1 | 	sub	objptr, ##42276
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     52 00 00 3F 
013cc     24 E5 05 31 |  if_ae	add	objptr, ##42276
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     52 00 00 3F 
013d8     24 E5 85 31 |  if_ae	sub	objptr, ##42276
013dc     52 00 00 FF 
013e0     24 E5 05 F1 | 	add	objptr, ##42276
013e4     F2 3C 02 FB | 	rdlong	local12, objptr
013e8     52 00 00 FF 
013ec     24 E5 85 F1 | 	sub	objptr, ##42276
013f0     1E 31 02 F6 | 	mov	local06, local12
013f4     18 13 02 F6 | 	mov	arg01, local06
013f8     E8 4F B2 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 3A 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 30 E2 FA | 	rdword	local06, objptr
0140c     02 30 86 F1 | 	sub	local06, #2
01410     52 00 00 FF 
01414     EC E4 05 F1 | 	add	objptr, ##42220
01418     F2 30 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1B 00 00 FF 
01420     D4 E4 85 F1 | 	sub	objptr, ##14036
01424     F2 34 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     54 E4 85 F1 | 	sub	objptr, ##28244
01430     1A 33 02 F6 | 	mov	local07, local08
01434     19 31 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     54 E4 05 C1 |  if_b	add	objptr, ##28244
01440     F2 30 02 CB |  if_b	rdlong	local06, objptr
01444     1B 00 00 CF 
01448     D4 E4 05 C1 |  if_b	add	objptr, ##14036
0144c     F2 30 62 CC |  if_b	wrlong	local06, objptr
01450     52 00 00 CF 
01454     28 E5 85 C1 |  if_b	sub	objptr, ##42280
01458     52 00 00 FF 
0145c     28 E5 05 F1 | 	add	objptr, ##42280
01460     F2 3C 02 FB | 	rdlong	local12, objptr
01464     52 00 00 FF 
01468     28 E5 85 F1 | 	sub	objptr, ##42280
0146c     1E 31 02 F6 | 	mov	local06, local12
01470     18 13 02 F6 | 	mov	arg01, local06
01474     3C 4F B2 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 3A 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     52 00 00 FF 
01490     EC E4 05 F1 | 	add	objptr, ##42220
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     52 00 00 FF 
0149c     28 E5 85 F1 | 	sub	objptr, ##42280
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     52 00 00 3F 
014a8     28 E5 05 31 |  if_ae	add	objptr, ##42280
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     52 00 00 3F 
014b4     28 E5 85 31 |  if_ae	sub	objptr, ##42280
014b8     52 00 00 FF 
014bc     28 E5 05 F1 | 	add	objptr, ##42280
014c0     F2 30 02 FB | 	rdlong	local06, objptr
014c4     52 00 00 FF 
014c8     28 E5 85 F1 | 	sub	objptr, ##42280
014cc     18 13 02 F6 | 	mov	arg01, local06
014d0     E0 4E B2 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 3A 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     52 00 00 FF 
014e0     20 E5 05 F1 | 	add	objptr, ##42272
014e4     F2 30 02 FB | 	rdlong	local06, objptr
014e8     18 3D 22 F6 | 	not	local12, local06
014ec     F2 3C 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     52 00 00 FF 
014f4     20 E5 85 F1 | 	sub	objptr, ##42272
014f8     00 3C 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 30 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     00 3D B2 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 30 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     F0 3C B2 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 2C 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     52 00 00 FF 
01544     A3 E4 05 F1 | 	add	objptr, ##42147
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     52 00 00 FF 
01558     EC E4 85 F1 | 	sub	objptr, ##42220
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     A0 6E B2 FD | 	call	#__system___waitms
01568     52 00 00 FF 
0156c     EC E4 05 F1 | 	add	objptr, ##42220
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     52 00 00 FF 
01580     EC E4 85 F1 | 	sub	objptr, ##42220
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     78 6E B2 FD | 	call	#__system___waitms
01590     52 00 00 FF 
01594     EC E4 05 F1 | 	add	objptr, ##42220
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     52 00 00 FF 
015a8     EC E4 85 F1 | 	sub	objptr, ##42220
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     50 6E B2 FD | 	call	#__system___waitms
015b8     52 00 00 FF 
015bc     EC E4 05 F1 | 	add	objptr, ##42220
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     52 00 00 FF 
015d0     EC E4 85 F1 | 	sub	objptr, ##42220
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     0A 4A 05 F6 | 	mov	COUNT_, #10
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     E1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     68 E5 05 F1 | 	add	objptr, ##41832
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     ED F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10477
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     70 E5 85 F1 | 	sub	objptr, ##41840
01644     00 26 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0
01648                 | ' for j=0 to 6
01648     00 28 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     14 13 02 F6 | 	mov	arg01, local02
01650                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
01650     13 00 00 FF 
01654     F8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10232
01658     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
0165c     05 12 66 F0 | 	shl	arg01, #5
01660     09 FB 01 F1 | 	add	result1, arg01
01664     FD FA 01 FB | 	rdlong	result1, result1
01668     13 00 00 FF 
0166c     F8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10232
01670     01 FA 55 F2 | 	cmps	result1, #1 wc
01674     B4 01 90 CD |  if_b	jmp	#LR__0061
01678     14 13 02 F6 | 	mov	arg01, local02
0167c     00 14 06 F6 | 	mov	arg02, #0
01680     3C 63 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01684     FD 2A 02 F6 | 	mov	local03, result1
01688     14 13 02 F6 | 	mov	arg01, local02
0168c     01 14 06 F6 | 	mov	arg02, #1
01690     2C 63 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01694     FD 2C 02 F6 | 	mov	local04, result1
01698     14 13 02 F6 | 	mov	arg01, local02
0169c     02 14 06 F6 | 	mov	arg02, #2
016a0     1C 63 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016a4     FD 2E 02 F6 | 	mov	local05, result1
016a8     14 13 02 F6 | 	mov	arg01, local02
016ac     00 14 06 F6 | 	mov	arg02, #0
016b0     50 63 B2 FD | 	call	#_usbnew_spin2_hidpad_hat
016b4     FD 30 02 F6 | 	mov	local06, result1
016b8     14 13 02 F6 | 	mov	arg01, local02
016bc     03 14 06 F6 | 	mov	arg02, #3
016c0     FC 62 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016c4     FD 32 02 F6 | 	mov	local07, result1
016c8     14 13 02 F6 | 	mov	arg01, local02
016cc     04 14 06 F6 | 	mov	arg02, #4
016d0     EC 62 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016d4     FD 34 02 F6 | 	mov	local08, result1
016d8     14 13 02 F6 | 	mov	arg01, local02
016dc     05 14 06 F6 | 	mov	arg02, #5
016e0     DC 62 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016e4     FD 36 02 F6 | 	mov	local09, result1
016e8     14 13 02 F6 | 	mov	arg01, local02
016ec     06 14 06 F6 | 	mov	arg02, #6
016f0     CC 62 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016f4     FD 38 02 F6 | 	mov	local10, result1
016f8     14 13 02 F6 | 	mov	arg01, local02
016fc     07 14 06 F6 | 	mov	arg02, #7
01700     BC 62 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01704     FD 14 02 F6 | 	mov	arg02, result1
01708     13 FB 01 F6 | 	mov	result1, local01
0170c     02 FA 65 F0 | 	shl	result1, #2
01710     51 00 00 FF 
01714     78 E5 05 F1 | 	add	objptr, ##41848
01718     F2 FA 01 F1 | 	add	result1, objptr
0171c     FD 2A 62 FC | 	wrlong	local03, result1
01720     13 FB 01 F6 | 	mov	result1, local01
01724     02 FA 65 F0 | 	shl	result1, #2
01728     1C E4 05 F1 | 	add	objptr, #28
0172c     F2 FA 01 F1 | 	add	result1, objptr
01730     FD 2C 62 FC | 	wrlong	local04, result1
01734     13 FB 01 F6 | 	mov	result1, local01
01738     02 FA 65 F0 | 	shl	result1, #2
0173c     1C E4 05 F1 | 	add	objptr, #28
01740     F2 FA 01 F1 | 	add	result1, objptr
01744     FD 2E 62 FC | 	wrlong	local05, result1
01748     13 2F 02 F6 | 	mov	local05, local01
0174c     02 2E 66 F0 | 	shl	local05, #2
01750     1C E4 05 F1 | 	add	objptr, #28
01754     F2 2E 02 F1 | 	add	local05, objptr
01758     17 31 62 FC | 	wrlong	local06, local05
0175c     13 31 02 F6 | 	mov	local06, local01
01760     02 30 66 F0 | 	shl	local06, #2
01764     1C E4 05 F1 | 	add	objptr, #28
01768     F2 30 02 F1 | 	add	local06, objptr
0176c     18 33 62 FC | 	wrlong	local07, local06
01770     13 33 02 F6 | 	mov	local07, local01
01774     02 32 66 F0 | 	shl	local07, #2
01778     1C E4 05 F1 | 	add	objptr, #28
0177c     F2 32 02 F1 | 	add	local07, objptr
01780     19 35 62 FC | 	wrlong	local08, local07
01784     13 35 02 F6 | 	mov	local08, local01
01788     02 34 66 F0 | 	shl	local08, #2
0178c     1C E4 05 F1 | 	add	objptr, #28
01790     F2 34 02 F1 | 	add	local08, objptr
01794     1A 37 62 FC | 	wrlong	local09, local08
01798     13 37 02 F6 | 	mov	local09, local01
0179c     02 36 66 F0 | 	shl	local09, #2
017a0     1C E4 05 F1 | 	add	objptr, #28
017a4     F2 36 02 F1 | 	add	local09, objptr
017a8     1B 39 62 FC | 	wrlong	local10, local09
017ac     13 39 02 F6 | 	mov	local10, local01
017b0     02 38 66 F0 | 	shl	local10, #2
017b4     1C E4 05 F1 | 	add	objptr, #28
017b8     F2 38 02 F1 | 	add	local10, objptr
017bc     1C 15 62 FC | 	wrlong	arg02, local10
017c0     60 00 00 FF 
017c4     00 2A 06 F1 | 	add	local03, ##49152
017c8     0F 2A 46 F0 | 	shr	local03, #15
017cc     01 38 06 F6 | 	mov	local10, #1
017d0     15 39 02 F1 | 	add	local10, local03
017d4     60 00 00 FF 
017d8     00 2C 06 F1 | 	add	local04, ##49152
017dc     0F 2C 46 F0 | 	shr	local04, #15
017e0     01 36 06 F6 | 	mov	local09, #1
017e4     16 37 02 F1 | 	add	local09, local04
017e8     13 35 02 F6 | 	mov	local08, local01
017ec     02 34 66 F0 | 	shl	local08, #2
017f0     1C E4 05 F1 | 	add	objptr, #28
017f4     F2 34 02 F1 | 	add	local08, objptr
017f8     02 36 66 F0 | 	shl	local09, #2
017fc     1B 39 02 F1 | 	add	local10, local09
01800     1A 39 62 FC | 	wrlong	local10, local08
01804     13 39 02 F6 | 	mov	local10, local01
01808     02 38 66 F0 | 	shl	local10, #2
0180c     1C E4 05 F1 | 	add	objptr, #28
01810     F2 38 02 F1 | 	add	local10, objptr
01814     14 13 02 F6 | 	mov	arg01, local02
01818     52 00 00 FF 
0181c     90 E4 85 F1 | 	sub	objptr, ##42128
01820     74 61 B2 FD | 	call	#_usbnew_spin2_hidpad_buttons
01824     1C FB 61 FC | 	wrlong	result1, local10
01828     01 26 06 F1 | 	add	local01, #1
0182c                 | LR__0061
0182c     01 28 06 F1 | 	add	local02, #1
01830     07 28 16 F2 | 	cmp	local02, #7 wc
01834     14 FE 9F CD |  if_b	jmp	#LR__0060
01838     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
0183c                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
0183c                 | LR__0062
0183c     07 26 16 F2 | 	cmp	local01, #7 wc
01840     3C 00 90 3D |  if_ae	jmp	#LR__0064
01844     13 39 02 F6 | 	mov	local10, local01
01848     02 38 66 F0 | 	shl	local10, #2
0184c     52 00 00 FF 
01850     74 E4 05 F1 | 	add	objptr, ##42100
01854     F2 38 02 F1 | 	add	local10, objptr
01858     1C 01 68 FC | 	wrlong	#0, local10
0185c     13 39 02 F6 | 	mov	local10, local01
01860     02 38 66 F0 | 	shl	local10, #2
01864     1C E4 05 F1 | 	add	objptr, #28
01868     F2 38 02 F1 | 	add	local10, objptr
0186c     1C 01 68 FC | 	wrlong	#0, local10
01870     01 26 06 F1 | 	add	local01, #1
01874     52 00 00 FF 
01878     90 E4 85 F1 | 	sub	objptr, ##42128
0187c     BC FF 9F FD | 	jmp	#LR__0062
01880                 | LR__0063
01880                 | LR__0064
01880     A7 F0 03 F6 | 	mov	ptra, fp
01884     B2 00 A0 FD | 	call	#popregs_
01888                 | _gethdi_ret
01888     2D 00 64 FD | 	ret
0188c                 | 
0188c                 | ' 
0188c                 | ' '-------------------------------------------------------------------------------------------------------------
0188c                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
0188c                 | ' '-------------------------------------------------------------------------------------------------------------
0188c                 | ' 
0188c                 | ' '-------------------------------------------------------------------------------------------------------------
0188c                 | ' '
0188c                 | ' '                                     LINE INTERPRETER/TOKENIZER
0188c                 | ' '
0188c                 | ' '-------------------------------------------------------------------------------------------------------------
0188c                 | ' 
0188c                 | ' 
0188c                 | ' sub interpret
0188c                 | _interpret
0188c     35 4A 05 F6 | 	mov	COUNT_, #53
01890     A8 00 A0 FD | 	call	#pushregs_
01894     01 00 00 FF 
01898     84 F0 07 F1 | 	add	ptra, ##644
0189c     37 00 00 FF 
018a0     3C E4 05 F1 | 	add	objptr, ##28220
018a4     F2 12 02 FB | 	rdlong	arg01, objptr
018a8     37 00 00 FF 
018ac     3C E4 85 F1 | 	sub	objptr, ##28220
018b0     70 8D B2 FD | 	call	#__system__RTrim_S
018b4     FD 12 02 F6 | 	mov	arg01, result1
018b8     A8 8C B2 FD | 	call	#__system__LTrim_S
018bc     37 00 00 FF 
018c0     40 E4 05 F1 | 	add	objptr, ##28224
018c4     F2 FA 61 FC | 	wrlong	result1, objptr
018c8     04 E4 05 F1 | 	add	objptr, #4
018cc     FF FF FF FF 
018d0     F2 FE 6B FC | 	wrlong	##-1, objptr
018d4     1B 00 00 FF 
018d8     C4 E4 05 F1 | 	add	objptr, ##14020
018dc     F2 00 68 FC | 	wrlong	#0, objptr
018e0     08 00 00 FF 
018e4     6C E4 85 F1 | 	sub	objptr, ##4204
018e8     F2 00 68 FC | 	wrlong	#0, objptr
018ec     4A 00 00 FF 
018f0     9C E4 85 F1 | 	sub	objptr, ##38044
018f4     00 26 06 F6 | 	mov	local01, #0
018f8                 | LR__0070
018f8                 | ' 
018f8                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
018f8                 | ' 
018f8                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
018f8                 | ' 
018f8                 | ' 108 
018f8                 | ' for i=0 to 125: separators(i)=0 :next i
018f8     00 28 06 F6 | 	mov	local02, #0
018fc     38 4E 05 F1 | 	add	fp, #56
01900     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
01904                 | LR__0071
01904     14 2B 02 F6 | 	mov	local03, local02
01908     02 2A 66 F0 | 	shl	local03, #2
0190c     A7 2A 02 F1 | 	add	local03, fp
01910     15 01 68 FC | 	wrlong	#0, local03
01914     01 28 06 F1 | 	add	local02, #1
01918     7E 28 56 F2 | 	cmps	local02, #126 wc
0191c     E4 FF 9F CD |  if_b	jmp	#LR__0071
01920                 | LR__0072
01920     38 4E 85 F1 | 	sub	fp, #56
01924                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
01924     00 28 06 F6 | 	mov	local02, #0
01928     35 00 00 FF 
0192c     2C E4 05 F1 | 	add	objptr, ##27180
01930     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
01934                 | LR__0073
01934     14 2D 02 F6 | 	mov	local04, local02
01938     03 2C 66 F0 | 	shl	local04, #3
0193c     F2 2C 02 F1 | 	add	local04, objptr
01940     BE 01 00 FF 
01944     C4 16 06 F6 | 	mov	arg03, ##@LR__5539
01948     16 17 62 FC | 	wrlong	arg03, local04
0194c     14 2D 02 F6 | 	mov	local04, local02
01950     03 2C 66 F0 | 	shl	local04, #3
01954     F2 2E 02 F6 | 	mov	local05, objptr
01958     F2 2C 02 F1 | 	add	local04, objptr
0195c     00 30 06 F6 | 	mov	local06, #0
01960     04 2C 06 F1 | 	add	local04, #4
01964     16 01 68 FC | 	wrlong	#0, local04
01968     01 28 06 F1 | 	add	local02, #1
0196c     7E 28 56 F2 | 	cmps	local02, #126 wc
01970     C0 FF 9F CD |  if_b	jmp	#LR__0073
01974                 | LR__0074
01974     02 00 00 FF 
01978     10 E4 05 F1 | 	add	objptr, ##1040
0197c     F2 12 02 FB | 	rdlong	arg01, objptr
01980     37 00 00 FF 
01984     3C E4 85 F1 | 	sub	objptr, ##28220
01988     98 8C B2 FD | 	call	#__system__RTrim_S
0198c     FD 12 02 F6 | 	mov	arg01, result1
01990     D0 8B B2 FD | 	call	#__system__LTrim_S
01994     37 00 00 FF 
01998     3C E4 05 F1 | 	add	objptr, ##28220
0199c     F2 FA 61 FC | 	wrlong	result1, objptr
019a0     BE 01 00 FF 
019a4     C5 2C 06 F6 | 	mov	local04, ##@LR__5540
019a8     1B 00 00 FF 
019ac     08 E5 05 F1 | 	add	objptr, ##14088
019b0     F2 2C 62 FC | 	wrlong	local04, objptr
019b4     1B 00 00 FF 
019b8     08 E5 85 F1 | 	sub	objptr, ##14088
019bc     F2 12 02 FB | 	rdlong	arg01, objptr
019c0     37 00 00 FF 
019c4     3C E4 85 F1 | 	sub	objptr, ##28220
019c8     09 33 02 F6 | 	mov	local07, arg01
019cc     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
019d0                 | LR__0075
019d0     19 FB C9 FA | 	rdbyte	result1, local07 wz
019d4     01 32 06 51 |  if_ne	add	local07, #1
019d8     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
019dc                 | LR__0076
019dc     09 33 8A F1 | 	sub	local07, arg01 wz
019e0     52 00 00 FF 
019e4     48 E5 05 F1 | 	add	objptr, ##42312
019e8     F2 32 62 FC | 	wrlong	local07, objptr
019ec                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
019ec     52 00 00 FF 
019f0     48 E5 85 F1 | 	sub	objptr, ##42312
019f4     40 2A 90 AD |  if_e	jmp	#LR__0210
019f8     00 34 06 F6 | 	mov	local08, #0
019fc                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
019fc                 | ' for i=1 to len(line$)
019fc     01 28 06 F6 | 	mov	local02, #1
01a00     37 00 00 FF 
01a04     3C E4 05 F1 | 	add	objptr, ##28220
01a08     F2 12 02 FB | 	rdlong	arg01, objptr
01a0c     37 00 00 FF 
01a10     3C E4 85 F1 | 	sub	objptr, ##28220
01a14     09 33 02 F6 | 	mov	local07, arg01
01a18     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
01a1c                 | LR__0077
01a1c     19 FB C9 FA | 	rdbyte	result1, local07 wz
01a20     01 32 06 51 |  if_ne	add	local07, #1
01a24     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
01a28                 | LR__0078
01a28     09 33 82 F1 | 	sub	local07, arg01
01a2c     19 37 02 F6 | 	mov	local09, local07
01a30     01 36 06 F1 | 	add	local09, #1
01a34                 | LR__0079
01a34     1B 29 52 F2 | 	cmps	local02, local09 wc
01a38     AC 00 90 3D |  if_ae	jmp	#LR__0081
01a3c                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
01a3c     37 00 00 FF 
01a40     3C E4 05 F1 | 	add	objptr, ##28220
01a44     F2 12 02 FB | 	rdlong	arg01, objptr
01a48     37 00 00 FF 
01a4c     3C E4 85 F1 | 	sub	objptr, ##28220
01a50     14 15 02 F6 | 	mov	arg02, local02
01a54     01 16 06 F6 | 	mov	arg03, #1
01a58     50 88 B2 FD | 	call	#__system__Mid_S
01a5c     FD 12 02 F6 | 	mov	arg01, result1
01a60     BE 01 00 FF 
01a64     C6 14 06 F6 | 	mov	arg02, ##@LR__5541
01a68     D0 66 B2 FD | 	call	#__system___string_cmp
01a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
01a70     00 34 0E A2 |  if_e	cmp	local08, #0 wz
01a74     01 34 06 A6 |  if_e	mov	local08, #1
01a78     3C 00 90 AD |  if_e	jmp	#LR__0080
01a7c     37 00 00 FF 
01a80     3C E4 05 F1 | 	add	objptr, ##28220
01a84     F2 12 02 FB | 	rdlong	arg01, objptr
01a88     37 00 00 FF 
01a8c     3C E4 85 F1 | 	sub	objptr, ##28220
01a90     14 15 02 F6 | 	mov	arg02, local02
01a94     01 16 06 F6 | 	mov	arg03, #1
01a98     10 88 B2 FD | 	call	#__system__Mid_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     BE 01 00 FF 
01aa4     C8 14 06 F6 | 	mov	arg02, ##@LR__5542
01aa8     90 66 B2 FD | 	call	#__system___string_cmp
01aac     00 FA 0D F2 | 	cmp	result1, #0 wz
01ab0     01 34 0E A2 |  if_e	cmp	local08, #1 wz
01ab4     00 34 06 A6 |  if_e	mov	local08, #0
01ab8                 | LR__0080
01ab8     14 2D 02 F6 | 	mov	local04, local02
01abc     03 2C 66 F0 | 	shl	local04, #3
01ac0     35 00 00 FF 
01ac4     2C E4 05 F1 | 	add	objptr, ##27180
01ac8     F2 2E 02 F6 | 	mov	local05, objptr
01acc     F2 2C 02 F1 | 	add	local04, objptr
01ad0     04 2C 06 F1 | 	add	local04, #4
01ad4     16 35 62 FC | 	wrlong	local08, local04
01ad8     01 28 06 F1 | 	add	local02, #1
01adc     35 00 00 FF 
01ae0     2C E4 85 F1 | 	sub	objptr, ##27180
01ae4     4C FF 9F FD | 	jmp	#LR__0079
01ae8                 | LR__0081
01ae8     01 28 06 F6 | 	mov	local02, #1
01aec                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
01aec                 | LR__0082
01aec     37 00 00 FF 
01af0     3C E4 05 F1 | 	add	objptr, ##28220
01af4     F2 12 02 FB | 	rdlong	arg01, objptr
01af8     37 00 00 FF 
01afc     3C E4 85 F1 | 	sub	objptr, ##28220
01b00     14 15 02 F6 | 	mov	arg02, local02
01b04     01 16 06 F6 | 	mov	arg03, #1
01b08     A0 87 B2 FD | 	call	#__system__Mid_S
01b0c     FD 12 02 F6 | 	mov	arg01, result1
01b10     BE 01 00 FF 
01b14     CA 38 06 F6 | 	mov	local10, ##@LR__5543
01b18     1C 15 02 F6 | 	mov	arg02, local10
01b1c     1C 66 B2 FD | 	call	#__system___string_cmp
01b20     00 FA 0D F2 | 	cmp	result1, #0 wz
01b24     34 00 90 5D |  if_ne	jmp	#LR__0083
01b28     14 2F 02 F6 | 	mov	local05, local02
01b2c     03 2E 66 F0 | 	shl	local05, #3
01b30     35 00 00 FF 
01b34     2C E4 05 F1 | 	add	objptr, ##27180
01b38     F2 30 02 F6 | 	mov	local06, objptr
01b3c     F2 2E 02 F1 | 	add	local05, objptr
01b40     04 2E 06 F1 | 	add	local05, #4
01b44     17 3B 02 FB | 	rdlong	local11, local05
01b48     04 2E 86 F1 | 	sub	local05, #4
01b4c     1D 3D 0A F6 | 	mov	local12, local11 wz
01b50     35 00 00 FF 
01b54     2C E4 85 F1 | 	sub	objptr, ##27180
01b58     24 00 90 AD |  if_e	jmp	#LR__0084
01b5c                 | LR__0083
01b5c     52 00 00 FF 
01b60     48 E5 05 F1 | 	add	objptr, ##42312
01b64     F2 3E 02 FB | 	rdlong	local13, objptr
01b68     52 00 00 FF 
01b6c     48 E5 85 F1 | 	sub	objptr, ##42312
01b70     1F 41 02 F6 | 	mov	local14, local13
01b74     20 29 52 F2 | 	cmps	local02, local14 wc
01b78     01 28 06 C1 |  if_b	add	local02, #1
01b7c     6C FF 9F CD |  if_b	jmp	#LR__0082
01b80                 | LR__0084
01b80                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01b80     52 00 00 FF 
01b84     48 E5 05 F1 | 	add	objptr, ##42312
01b88     F2 2C 02 FB | 	rdlong	local04, objptr
01b8c     52 00 00 FF 
01b90     48 E5 85 F1 | 	sub	objptr, ##42312
01b94     16 29 52 F2 | 	cmps	local02, local04 wc
01b98     A8 00 90 3D |  if_ae	jmp	#LR__0087
01b9c     37 00 00 FF 
01ba0     3C E4 05 F1 | 	add	objptr, ##28220
01ba4     F2 30 02 FB | 	rdlong	local06, objptr
01ba8     37 00 00 FF 
01bac     3C E4 85 F1 | 	sub	objptr, ##28220
01bb0     18 13 02 F6 | 	mov	arg01, local06
01bb4     09 33 02 F6 | 	mov	local07, arg01
01bb8     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01bbc                 | LR__0085
01bbc     19 FB C9 FA | 	rdbyte	result1, local07 wz
01bc0     01 32 06 51 |  if_ne	add	local07, #1
01bc4     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01bc8                 | LR__0086
01bc8     09 33 82 F1 | 	sub	local07, arg01
01bcc     19 2F 02 F6 | 	mov	local05, local07
01bd0     17 15 02 F6 | 	mov	arg02, local05
01bd4     14 15 82 F1 | 	sub	arg02, local02
01bd8     18 13 02 F6 | 	mov	arg01, local06
01bdc     3C 86 B2 FD | 	call	#__system__Right_S
01be0     FD 12 02 F6 | 	mov	arg01, result1
01be4     3C 8A B2 FD | 	call	#__system__RTrim_S
01be8     FD 12 02 F6 | 	mov	arg01, result1
01bec     74 89 B2 FD | 	call	#__system__LTrim_S
01bf0     52 00 00 FF 
01bf4     4C E5 05 F1 | 	add	objptr, ##42316
01bf8     F2 FA 61 FC | 	wrlong	result1, objptr
01bfc     1B 00 00 FF 
01c00     10 E5 85 F1 | 	sub	objptr, ##14096
01c04     F2 12 02 FB | 	rdlong	arg01, objptr
01c08     37 00 00 FF 
01c0c     3C E4 85 F1 | 	sub	objptr, ##28220
01c10     01 28 86 F1 | 	sub	local02, #1
01c14     14 15 02 F6 | 	mov	arg02, local02
01c18     78 85 B2 FD | 	call	#__system__Left_S
01c1c     FD 12 02 F6 | 	mov	arg01, result1
01c20     00 8A B2 FD | 	call	#__system__RTrim_S
01c24     FD 12 02 F6 | 	mov	arg01, result1
01c28     38 89 B2 FD | 	call	#__system__LTrim_S
01c2c     37 00 00 FF 
01c30     3C E4 05 F1 | 	add	objptr, ##28220
01c34     F2 FA 61 FC | 	wrlong	result1, objptr
01c38     37 00 00 FF 
01c3c     3C E4 85 F1 | 	sub	objptr, ##28220
01c40     1C 00 90 FD | 	jmp	#LR__0088
01c44                 | LR__0087
01c44     BE 01 00 FF 
01c48     CC 2C 06 F6 | 	mov	local04, ##@LR__5544
01c4c     52 00 00 FF 
01c50     4C E5 05 F1 | 	add	objptr, ##42316
01c54     F2 2C 62 FC | 	wrlong	local04, objptr
01c58     52 00 00 FF 
01c5c     4C E5 85 F1 | 	sub	objptr, ##42316
01c60                 | LR__0088
01c60                 | ' 
01c60                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01c60     37 00 00 FF 
01c64     44 E4 05 F1 | 	add	objptr, ##28228
01c68     F2 2C 02 FB | 	rdlong	local04, objptr
01c6c     37 00 00 FF 
01c70     44 E4 85 F1 | 	sub	objptr, ##28228
01c74     FF FF 7F FF 
01c78     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c7c     40 00 90 5D |  if_ne	jmp	#LR__0089
01c80     52 00 00 FF 
01c84     4C E5 05 F1 | 	add	objptr, ##42316
01c88     F2 12 02 FB | 	rdlong	arg01, objptr
01c8c     52 00 00 FF 
01c90     4C E5 85 F1 | 	sub	objptr, ##42316
01c94     BE 01 00 FF 
01c98     CD 30 06 F6 | 	mov	local06, ##@LR__5545
01c9c     18 15 02 F6 | 	mov	arg02, local06
01ca0     98 64 B2 FD | 	call	#__system___string_cmp
01ca4     00 FA 0D F2 | 	cmp	result1, #0 wz
01ca8     37 00 00 5F 
01cac     44 E4 05 51 |  if_ne	add	objptr, ##28228
01cb0     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01cb4     37 00 00 5F 
01cb8     44 E4 85 51 |  if_ne	sub	objptr, ##28228
01cbc     08 01 90 5D |  if_ne	jmp	#LR__0093
01cc0                 | LR__0089
01cc0                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01cc0     37 00 00 FF 
01cc4     44 E4 05 F1 | 	add	objptr, ##28228
01cc8     F2 2C 02 FB | 	rdlong	local04, objptr
01ccc     37 00 00 FF 
01cd0     44 E4 85 F1 | 	sub	objptr, ##28228
01cd4     FF FF 7F FF 
01cd8     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01cdc     3C 00 90 5D |  if_ne	jmp	#LR__0090
01ce0     52 00 00 FF 
01ce4     4C E5 05 F1 | 	add	objptr, ##42316
01ce8     F2 12 02 FB | 	rdlong	arg01, objptr
01cec     52 00 00 FF 
01cf0     4C E5 85 F1 | 	sub	objptr, ##42316
01cf4     BE 01 00 FF 
01cf8     CE 14 06 F6 | 	mov	arg02, ##@LR__5546
01cfc     3C 64 B2 FD | 	call	#__system___string_cmp
01d00     00 FA 0D F2 | 	cmp	result1, #0 wz
01d04     37 00 00 AF 
01d08     44 E4 05 A1 |  if_e	add	objptr, ##28228
01d0c     F2 06 68 AC |  if_e	wrlong	#3, objptr
01d10     37 00 00 AF 
01d14     44 E4 85 A1 |  if_e	sub	objptr, ##28228
01d18     AC 00 90 AD |  if_e	jmp	#LR__0093
01d1c                 | LR__0090
01d1c                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01d1c     37 00 00 FF 
01d20     44 E4 05 F1 | 	add	objptr, ##28228
01d24     F2 2C 02 FB | 	rdlong	local04, objptr
01d28     37 00 00 FF 
01d2c     44 E4 85 F1 | 	sub	objptr, ##28228
01d30     04 2C 0E F2 | 	cmp	local04, #4 wz
01d34     3C 00 90 5D |  if_ne	jmp	#LR__0091
01d38     52 00 00 FF 
01d3c     4C E5 05 F1 | 	add	objptr, ##42316
01d40     F2 12 02 FB | 	rdlong	arg01, objptr
01d44     52 00 00 FF 
01d48     4C E5 85 F1 | 	sub	objptr, ##42316
01d4c     BE 01 00 FF 
01d50     CF 14 06 F6 | 	mov	arg02, ##@LR__5547
01d54     E4 63 B2 FD | 	call	#__system___string_cmp
01d58     00 FA 0D F2 | 	cmp	result1, #0 wz
01d5c     37 00 00 5F 
01d60     44 E4 05 51 |  if_ne	add	objptr, ##28228
01d64     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01d68     37 00 00 5F 
01d6c     44 E4 85 51 |  if_ne	sub	objptr, ##28228
01d70     54 00 90 5D |  if_ne	jmp	#LR__0093
01d74                 | LR__0091
01d74                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01d74     37 00 00 FF 
01d78     44 E4 05 F1 | 	add	objptr, ##28228
01d7c     F2 2C 02 FB | 	rdlong	local04, objptr
01d80     37 00 00 FF 
01d84     44 E4 85 F1 | 	sub	objptr, ##28228
01d88     04 2C 0E F2 | 	cmp	local04, #4 wz
01d8c     38 00 90 5D |  if_ne	jmp	#LR__0092
01d90     52 00 00 FF 
01d94     4C E5 05 F1 | 	add	objptr, ##42316
01d98     F2 12 02 FB | 	rdlong	arg01, objptr
01d9c     52 00 00 FF 
01da0     4C E5 85 F1 | 	sub	objptr, ##42316
01da4     BE 01 00 FF 
01da8     D0 14 06 F6 | 	mov	arg02, ##@LR__5548
01dac     8C 63 B2 FD | 	call	#__system___string_cmp
01db0     00 FA 0D F2 | 	cmp	result1, #0 wz
01db4     37 00 00 AF 
01db8     44 E4 05 A1 |  if_e	add	objptr, ##28228
01dbc     F2 04 68 AC |  if_e	wrlong	#2, objptr
01dc0     37 00 00 AF 
01dc4     44 E4 85 A1 |  if_e	sub	objptr, ##28228
01dc8                 | LR__0092
01dc8                 | LR__0093
01dc8     38 4E 05 F1 | 	add	fp, #56
01dcc     A7 00 68 FC | 	wrlong	#0, fp
01dd0     38 4E 85 F1 | 	sub	fp, #56
01dd4     00 28 06 F6 | 	mov	local02, #0
01dd8     01 42 06 F6 | 	mov	local15, #1
01ddc                 | ' 
01ddc                 | ' ' 1b: find separators
01ddc                 | ' 
01ddc                 | ' 107
01ddc                 | ' separators(0)=0
01ddc                 | ' i=0: j=1
01ddc                 | ' do: 
01ddc                 | LR__0094
01ddc     01 28 06 F1 | 	add	local02, #1
01de0     37 00 00 FF 
01de4     3C E4 05 F1 | 	add	objptr, ##28220
01de8     F2 12 02 FB | 	rdlong	arg01, objptr
01dec     37 00 00 FF 
01df0     3C E4 85 F1 | 	sub	objptr, ##28220
01df4     14 15 02 F6 | 	mov	arg02, local02
01df8     01 16 06 F6 | 	mov	arg03, #1
01dfc     AC 84 B2 FD | 	call	#__system__Mid_S
01e00     FD 44 02 F6 | 	mov	local16, result1
01e04                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01e04     22 13 02 F6 | 	mov	arg01, local16
01e08     94 2E B0 FD | 	call	#_isseparator
01e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
01e10     1C 00 90 AD |  if_e	jmp	#LR__0095
01e14     21 2B 02 F6 | 	mov	local03, local15
01e18     02 2A 66 F0 | 	shl	local03, #2
01e1c     38 4E 05 F1 | 	add	fp, #56
01e20     A7 2A 02 F1 | 	add	local03, fp
01e24     15 29 62 FC | 	wrlong	local02, local03
01e28     01 42 06 F1 | 	add	local15, #1
01e2c     38 4E 85 F1 | 	sub	fp, #56
01e30                 | LR__0095
01e30     52 00 00 FF 
01e34     48 E5 05 F1 | 	add	objptr, ##42312
01e38     F2 2C 02 FB | 	rdlong	local04, objptr
01e3c     52 00 00 FF 
01e40     48 E5 85 F1 | 	sub	objptr, ##42312
01e44     16 29 5A F2 | 	cmps	local02, local04 wcz
01e48     90 FF 9F ED |  if_be	jmp	#LR__0094
01e4c     21 2B 02 F6 | 	mov	local03, local15
01e50     02 2A 66 F0 | 	shl	local03, #2
01e54     38 4E 05 F1 | 	add	fp, #56
01e58     A7 38 02 F6 | 	mov	local10, fp
01e5c     A7 2A 02 F1 | 	add	local03, fp
01e60     15 29 62 FC | 	wrlong	local02, local03
01e64     00 46 06 F6 | 	mov	local17, #0
01e68                 | ' for i=0 to j-1 
01e68     00 28 06 F6 | 	mov	local02, #0
01e6c     21 49 02 F6 | 	mov	local18, local15
01e70     38 4E 85 F1 | 	sub	fp, #56
01e74                 | LR__0096
01e74     24 29 52 F2 | 	cmps	local02, local18 wc
01e78     50 01 90 3D |  if_ae	jmp	#LR__0100
01e7c     14 2B 02 F6 | 	mov	local03, local02
01e80     02 2A 66 F0 | 	shl	local03, #2
01e84     38 4E 05 F1 | 	add	fp, #56
01e88     A7 2A 02 F1 | 	add	local03, fp
01e8c     15 2F 02 FB | 	rdlong	local05, local03
01e90     52 00 00 FF 
01e94     54 E5 05 F1 | 	add	objptr, ##42324
01e98     F2 2E 62 FC | 	wrlong	local05, objptr
01e9c     14 2B 02 F6 | 	mov	local03, local02
01ea0     01 2A 06 F1 | 	add	local03, #1
01ea4     02 2A 66 F0 | 	shl	local03, #2
01ea8     A7 38 02 F6 | 	mov	local10, fp
01eac     A7 2A 02 F1 | 	add	local03, fp
01eb0     15 2F 02 FB | 	rdlong	local05, local03
01eb4     04 E4 05 F1 | 	add	objptr, #4
01eb8     F2 2E 62 FC | 	wrlong	local05, objptr
01ebc                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01ebc     04 E4 85 F1 | 	sub	objptr, #4
01ec0     F2 2C 02 FB | 	rdlong	local04, objptr
01ec4     52 00 00 FF 
01ec8     54 E5 85 F1 | 	sub	objptr, ##42324
01ecc     01 2C 56 F2 | 	cmps	local04, #1 wc
01ed0     38 4E 85 F1 | 	sub	fp, #56
01ed4     68 00 90 CD |  if_b	jmp	#LR__0098
01ed8     37 00 00 FF 
01edc     3C E4 05 F1 | 	add	objptr, ##28220
01ee0     F2 12 02 FB | 	rdlong	arg01, objptr
01ee4     1B 00 00 FF 
01ee8     18 E5 05 F1 | 	add	objptr, ##14104
01eec     F2 14 02 FB | 	rdlong	arg02, objptr
01ef0     52 00 00 FF 
01ef4     54 E5 85 F1 | 	sub	objptr, ##42324
01ef8     01 16 06 F6 | 	mov	arg03, #1
01efc     AC 83 B2 FD | 	call	#__system__Mid_S
01f00     FD 4A 02 F6 | 	mov	local19, result1
01f04     BE 01 00 FF 
01f08     D1 14 06 F6 | 	mov	arg02, ##@LR__5549
01f0c     25 13 02 F6 | 	mov	arg01, local19
01f10     28 62 B2 FD | 	call	#__system___string_cmp
01f14     00 FA 0D F2 | 	cmp	result1, #0 wz
01f18     24 00 90 AD |  if_e	jmp	#LR__0097
01f1c     23 39 02 F6 | 	mov	local10, local17
01f20     03 38 66 F0 | 	shl	local10, #3
01f24     35 00 00 FF 
01f28     2C E4 05 F1 | 	add	objptr, ##27180
01f2c     F2 38 02 F1 | 	add	local10, objptr
01f30     1C 4B 62 FC | 	wrlong	local19, local10
01f34     01 46 06 F1 | 	add	local17, #1
01f38     35 00 00 FF 
01f3c     2C E4 85 F1 | 	sub	objptr, ##27180
01f40                 | LR__0097
01f40                 | LR__0098
01f40     37 00 00 FF 
01f44     3C E4 05 F1 | 	add	objptr, ##28220
01f48     F2 12 02 FB | 	rdlong	arg01, objptr
01f4c     1B 00 00 FF 
01f50     18 E5 05 F1 | 	add	objptr, ##14104
01f54     F2 14 02 FB | 	rdlong	arg02, objptr
01f58     01 14 06 F1 | 	add	arg02, #1
01f5c     04 E4 05 F1 | 	add	objptr, #4
01f60     F2 16 02 FB | 	rdlong	arg03, objptr
01f64     04 E4 85 F1 | 	sub	objptr, #4
01f68     F2 3A 02 FB | 	rdlong	local11, objptr
01f6c     52 00 00 FF 
01f70     54 E5 85 F1 | 	sub	objptr, ##42324
01f74     1D 3D 02 F6 | 	mov	local12, local11
01f78     1E 17 82 F1 | 	sub	arg03, local12
01f7c     01 16 86 F1 | 	sub	arg03, #1
01f80     28 83 B2 FD | 	call	#__system__Mid_S
01f84     FD 4A 02 F6 | 	mov	local19, result1
01f88                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01f88     BE 01 00 FF 
01f8c     D2 14 06 F6 | 	mov	arg02, ##@LR__5550
01f90     25 13 02 F6 | 	mov	arg01, local19
01f94     A4 61 B2 FD | 	call	#__system___string_cmp
01f98     00 FA 0D F2 | 	cmp	result1, #0 wz
01f9c     24 00 90 AD |  if_e	jmp	#LR__0099
01fa0     23 39 02 F6 | 	mov	local10, local17
01fa4     03 38 66 F0 | 	shl	local10, #3
01fa8     35 00 00 FF 
01fac     2C E4 05 F1 | 	add	objptr, ##27180
01fb0     F2 38 02 F1 | 	add	local10, objptr
01fb4     1C 4B 62 FC | 	wrlong	local19, local10
01fb8     01 46 06 F1 | 	add	local17, #1
01fbc     35 00 00 FF 
01fc0     2C E4 85 F1 | 	sub	objptr, ##27180
01fc4                 | LR__0099
01fc4     01 28 06 F1 | 	add	local02, #1
01fc8     A8 FE 9F FD | 	jmp	#LR__0096
01fcc                 | LR__0100
01fcc                 | ' 
01fcc                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01fcc                 | ' 
01fcc                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01fcc     37 00 00 FF 
01fd0     44 E4 05 F1 | 	add	objptr, ##28228
01fd4     F2 2C 0A FB | 	rdlong	local04, objptr wz
01fd8     37 00 00 FF 
01fdc     44 E4 85 F1 | 	sub	objptr, ##28228
01fe0     37 00 00 5F 
01fe4     44 E4 05 51 |  if_ne	add	objptr, ##28228
01fe8     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01fec     37 00 00 5F 
01ff0     44 E4 85 51 |  if_ne	sub	objptr, ##28228
01ff4     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01ff8     B8 00 90 5D |  if_ne	jmp	#LR__0103
01ffc     35 00 00 FF 
02000     2C E4 05 F1 | 	add	objptr, ##27180
02004     F2 3A 02 FB | 	rdlong	local11, objptr
02008     35 00 00 FF 
0200c     2C E4 85 F1 | 	sub	objptr, ##27180
02010     1D 13 02 F6 | 	mov	arg01, local11
02014     EC 50 B0 FD | 	call	#_isdec
02018     FD 3C 02 F6 | 	mov	local12, result1
0201c     1E 31 22 F6 | 	not	local06, local12
02020     00 30 0E F2 | 	cmp	local06, #0 wz
02024     8C 00 90 AD |  if_e	jmp	#LR__0103
02028     23 29 02 F6 | 	mov	local02, local17
0202c     35 00 00 FF 
02030     2C E4 05 F1 | 	add	objptr, ##27180
02034     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
02038                 | LR__0101
02038     14 2F 02 F6 | 	mov	local05, local02
0203c     01 2E 86 F1 | 	sub	local05, #1
02040     03 2E 66 F0 | 	shl	local05, #3
02044     F2 2E 02 F1 | 	add	local05, objptr
02048     17 2D 02 FB | 	rdlong	local04, local05
0204c     14 31 02 F6 | 	mov	local06, local02
02050     01 30 86 F1 | 	sub	local06, #1
02054     03 30 66 F0 | 	shl	local06, #3
02058     F2 30 02 F1 | 	add	local06, objptr
0205c     04 30 06 F1 | 	add	local06, #4
02060     18 2B 02 FB | 	rdlong	local03, local06
02064     14 31 02 F6 | 	mov	local06, local02
02068     03 30 66 F0 | 	shl	local06, #3
0206c     F2 3C 02 F6 | 	mov	local12, objptr
02070     F2 30 02 F1 | 	add	local06, objptr
02074     18 2D 62 FC | 	wrlong	local04, local06
02078     14 3B 02 F6 | 	mov	local11, local02
0207c     1D 3F 02 F6 | 	mov	local13, local11
02080     03 3E 66 F0 | 	shl	local13, #3
02084     F2 3E 02 F1 | 	add	local13, objptr
02088     04 3E 06 F1 | 	add	local13, #4
0208c     1F 2B 62 FC | 	wrlong	local03, local13
02090     01 28 86 F1 | 	sub	local02, #1
02094     01 28 56 F2 | 	cmps	local02, #1 wc
02098     9C FF 9F 3D |  if_ae	jmp	#LR__0101
0209c                 | LR__0102
0209c     BE 01 00 FF 
020a0     D3 2C 06 F6 | 	mov	local04, ##@LR__5551
020a4     F2 2C 62 FC | 	wrlong	local04, objptr
020a8     35 00 00 FF 
020ac     2C E4 85 F1 | 	sub	objptr, ##27180
020b0     01 46 06 F1 | 	add	local17, #1
020b4                 | LR__0103
020b4     00 28 06 F6 | 	mov	local02, #0
020b8                 | ' 
020b8                 | ' ' 1e : find strings
020b8                 | ' 
020b8                 | ' i=0
020b8                 | ' do
020b8                 | LR__0104
020b8                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
020b8     14 2F 02 F6 | 	mov	local05, local02
020bc     03 2E 66 F0 | 	shl	local05, #3
020c0     35 00 00 FF 
020c4     2C E4 05 F1 | 	add	objptr, ##27180
020c8     F2 2E 02 F1 | 	add	local05, objptr
020cc     17 13 02 FB | 	rdlong	arg01, local05
020d0     BE 01 00 FF 
020d4     D5 14 06 F6 | 	mov	arg02, ##@LR__5552
020d8     35 00 00 FF 
020dc     2C E4 85 F1 | 	sub	objptr, ##27180
020e0     58 60 B2 FD | 	call	#__system___string_cmp
020e4     00 FA 0D F2 | 	cmp	result1, #0 wz
020e8     01 28 06 51 |  if_ne	add	local02, #1
020ec     20 01 90 5D |  if_ne	jmp	#LR__0109
020f0     14 4D 02 F6 | 	mov	local20, local02
020f4                 | LR__0105
020f4     14 39 02 F6 | 	mov	local10, local02
020f8     01 38 06 F1 | 	add	local10, #1
020fc     03 38 66 F0 | 	shl	local10, #3
02100     35 00 00 FF 
02104     2C E4 05 F1 | 	add	objptr, ##27180
02108     F2 38 02 F1 | 	add	local10, objptr
0210c     1C 4B 02 FB | 	rdlong	local19, local10
02110     26 39 02 F6 | 	mov	local10, local20
02114     03 38 66 F0 | 	shl	local10, #3
02118     F2 38 02 F1 | 	add	local10, objptr
0211c     26 3B 02 F6 | 	mov	local11, local20
02120     1D 41 02 F6 | 	mov	local14, local11
02124     03 40 66 F0 | 	shl	local14, #3
02128     F2 40 02 F1 | 	add	local14, objptr
0212c     20 13 02 FB | 	rdlong	arg01, local14
02130     25 3D 02 F6 | 	mov	local12, local19
02134     1E 15 02 F6 | 	mov	arg02, local12
02138     35 00 00 FF 
0213c     2C E4 85 F1 | 	sub	objptr, ##27180
02140     2C 60 B2 FD | 	call	#__system___string_concat
02144     1C FB 61 FC | 	wrlong	result1, local10
02148     14 43 02 F6 | 	mov	local15, local02
0214c     01 42 06 F1 | 	add	local15, #1
02150     23 4F 02 F6 | 	mov	local21, local17
02154     01 4E 06 F1 | 	add	local21, #1
02158     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
0215c                 | LR__0106
0215c     27 43 52 F2 | 	cmps	local15, local21 wc
02160     70 00 90 3D |  if_ae	jmp	#LR__0108
02164     21 2F 02 F6 | 	mov	local05, local15
02168     01 2E 06 F1 | 	add	local05, #1
0216c     03 2E 66 F0 | 	shl	local05, #3
02170     35 00 00 FF 
02174     2C E4 05 F1 | 	add	objptr, ##27180
02178     F2 2E 02 F1 | 	add	local05, objptr
0217c     17 2D 02 FB | 	rdlong	local04, local05
02180     21 31 02 F6 | 	mov	local06, local15
02184     01 30 06 F1 | 	add	local06, #1
02188     03 30 66 F0 | 	shl	local06, #3
0218c     F2 30 02 F1 | 	add	local06, objptr
02190     04 30 06 F1 | 	add	local06, #4
02194     18 2B 02 FB | 	rdlong	local03, local06
02198     21 31 02 F6 | 	mov	local06, local15
0219c     03 30 66 F0 | 	shl	local06, #3
021a0     F2 3C 02 F6 | 	mov	local12, objptr
021a4     F2 30 02 F1 | 	add	local06, objptr
021a8     18 2D 62 FC | 	wrlong	local04, local06
021ac     21 3B 02 F6 | 	mov	local11, local15
021b0     1D 3F 02 F6 | 	mov	local13, local11
021b4     03 3E 66 F0 | 	shl	local13, #3
021b8     F2 3E 02 F1 | 	add	local13, objptr
021bc     04 3E 06 F1 | 	add	local13, #4
021c0     1F 2B 62 FC | 	wrlong	local03, local13
021c4     01 42 06 F1 | 	add	local15, #1
021c8     35 00 00 FF 
021cc     2C E4 85 F1 | 	sub	objptr, ##27180
021d0     88 FF 9F FD | 	jmp	#LR__0106
021d4                 | LR__0107
021d4                 | LR__0108
021d4     01 46 86 F1 | 	sub	local17, #1
021d8     BE 01 00 FF 
021dc     D7 14 06 F6 | 	mov	arg02, ##@LR__5553
021e0     25 13 02 F6 | 	mov	arg01, local19
021e4     54 5F B2 FD | 	call	#__system___string_cmp
021e8     00 FA 0D F2 | 	cmp	result1, #0 wz
021ec     23 29 52 52 |  if_ne	cmps	local02, local17 wc
021f0     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
021f4                 | '   if p$<>"""" then k+=1:i+=1
021f4     BE 01 00 FF 
021f8     D9 14 06 F6 | 	mov	arg02, ##@LR__5554
021fc     25 13 02 F6 | 	mov	arg01, local19
02200     38 5F B2 FD | 	call	#__system___string_cmp
02204     00 FA 0D F2 | 	cmp	result1, #0 wz
02208     01 46 06 51 |  if_ne	add	local17, #1
0220c     01 28 06 51 |  if_ne	add	local02, #1
02210                 | LR__0109
02210     23 29 52 F2 | 	cmps	local02, local17 wc
02214     A0 FE 9F CD |  if_b	jmp	#LR__0104
02218     00 28 06 F6 | 	mov	local02, #0
0221c                 | ' 
0221c                 | ' ' 1f : concatenate strings if "" detected between
0221c                 | '  
0221c                 | ' i=0
0221c                 | ' do
0221c                 | LR__0110
0221c                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
0221c     14 2F 02 F6 | 	mov	local05, local02
02220     03 2E 66 F0 | 	shl	local05, #3
02224     35 00 00 FF 
02228     2C E4 05 F1 | 	add	objptr, ##27180
0222c     F2 30 02 F6 | 	mov	local06, objptr
02230     F2 2E 02 F1 | 	add	local05, objptr
02234     17 13 02 FB | 	rdlong	arg01, local05
02238     01 14 06 F6 | 	mov	arg02, #1
0223c     35 00 00 FF 
02240     2C E4 85 F1 | 	sub	objptr, ##27180
02244     D4 7F B2 FD | 	call	#__system__Right_S
02248     FD 12 02 F6 | 	mov	arg01, result1
0224c     BE 01 00 FF 
02250     DB 14 06 F6 | 	mov	arg02, ##@LR__5555
02254     E4 5E B2 FD | 	call	#__system___string_cmp
02258     00 FA 0D F2 | 	cmp	result1, #0 wz
0225c     7C 01 90 5D |  if_ne	jmp	#LR__0116
02260     14 31 02 F6 | 	mov	local06, local02
02264     01 30 06 F1 | 	add	local06, #1
02268     03 30 66 F0 | 	shl	local06, #3
0226c     35 00 00 FF 
02270     2C E4 05 F1 | 	add	objptr, ##27180
02274     F2 3C 02 F6 | 	mov	local12, objptr
02278     F2 30 02 F1 | 	add	local06, objptr
0227c     18 13 02 FB | 	rdlong	arg01, local06
02280     01 14 06 F6 | 	mov	arg02, #1
02284     35 00 00 FF 
02288     2C E4 85 F1 | 	sub	objptr, ##27180
0228c     04 7F B2 FD | 	call	#__system__Left_S
02290     FD 12 02 F6 | 	mov	arg01, result1
02294     BE 01 00 FF 
02298     DD 14 06 F6 | 	mov	arg02, ##@LR__5556
0229c     9C 5E B2 FD | 	call	#__system___string_cmp
022a0     00 FA 0D F2 | 	cmp	result1, #0 wz
022a4     34 01 90 5D |  if_ne	jmp	#LR__0116
022a8     14 39 02 F6 | 	mov	local10, local02
022ac     03 38 66 F0 | 	shl	local10, #3
022b0     35 00 00 FF 
022b4     2C E4 05 F1 | 	add	objptr, ##27180
022b8     F2 38 02 F1 | 	add	local10, objptr
022bc     14 41 02 F6 | 	mov	local14, local02
022c0     03 40 66 F0 | 	shl	local14, #3
022c4     F2 40 02 F1 | 	add	local14, objptr
022c8     20 31 02 FB | 	rdlong	local06, local14
022cc     14 3F 02 F6 | 	mov	local13, local02
022d0     01 3E 06 F1 | 	add	local13, #1
022d4     03 3E 66 F0 | 	shl	local13, #3
022d8     F2 3E 02 F1 | 	add	local13, objptr
022dc     1F 3D 02 FB | 	rdlong	local12, local13
022e0     14 51 02 F6 | 	mov	local22, local02
022e4     01 50 06 F1 | 	add	local22, #1
022e8     28 53 02 F6 | 	mov	local23, local22
022ec     03 52 66 F0 | 	shl	local23, #3
022f0     F2 54 02 F6 | 	mov	local24, objptr
022f4     F2 52 02 F1 | 	add	local23, objptr
022f8     29 13 02 FB | 	rdlong	arg01, local23
022fc     35 00 00 FF 
02300     2C E4 85 F1 | 	sub	objptr, ##27180
02304     09 33 02 F6 | 	mov	local07, arg01
02308     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
0230c                 | LR__0111
0230c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02310     01 32 06 51 |  if_ne	add	local07, #1
02314     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
02318                 | LR__0112
02318     09 33 82 F1 | 	sub	local07, arg01
0231c     19 3B 02 F6 | 	mov	local11, local07
02320     01 3A 86 F1 | 	sub	local11, #1
02324     1E 13 02 F6 | 	mov	arg01, local12
02328     1D 15 02 F6 | 	mov	arg02, local11
0232c     EC 7E B2 FD | 	call	#__system__Right_S
02330     FD 3C 02 F6 | 	mov	local12, result1
02334     18 13 02 F6 | 	mov	arg01, local06
02338     1E 15 02 F6 | 	mov	arg02, local12
0233c     30 5E B2 FD | 	call	#__system___string_concat
02340     FD 30 02 F6 | 	mov	local06, result1
02344     1C 31 62 FC | 	wrlong	local06, local10
02348                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02348     14 43 02 F6 | 	mov	local15, local02
0234c     01 42 06 F1 | 	add	local15, #1
02350     23 57 02 F6 | 	mov	local25, local17
02354     01 56 06 F1 | 	add	local25, #1
02358     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
0235c                 | LR__0113
0235c     2B 43 52 F2 | 	cmps	local15, local25 wc
02360     70 00 90 3D |  if_ae	jmp	#LR__0115
02364     21 2F 02 F6 | 	mov	local05, local15
02368     01 2E 06 F1 | 	add	local05, #1
0236c     03 2E 66 F0 | 	shl	local05, #3
02370     35 00 00 FF 
02374     2C E4 05 F1 | 	add	objptr, ##27180
02378     F2 2E 02 F1 | 	add	local05, objptr
0237c     17 2D 02 FB | 	rdlong	local04, local05
02380     21 31 02 F6 | 	mov	local06, local15
02384     01 30 06 F1 | 	add	local06, #1
02388     03 30 66 F0 | 	shl	local06, #3
0238c     F2 30 02 F1 | 	add	local06, objptr
02390     04 30 06 F1 | 	add	local06, #4
02394     18 2B 02 FB | 	rdlong	local03, local06
02398     21 31 02 F6 | 	mov	local06, local15
0239c     03 30 66 F0 | 	shl	local06, #3
023a0     F2 3C 02 F6 | 	mov	local12, objptr
023a4     F2 30 02 F1 | 	add	local06, objptr
023a8     18 2D 62 FC | 	wrlong	local04, local06
023ac     21 3B 02 F6 | 	mov	local11, local15
023b0     1D 3F 02 F6 | 	mov	local13, local11
023b4     03 3E 66 F0 | 	shl	local13, #3
023b8     F2 3E 02 F1 | 	add	local13, objptr
023bc     04 3E 06 F1 | 	add	local13, #4
023c0     1F 2B 62 FC | 	wrlong	local03, local13
023c4     01 42 06 F1 | 	add	local15, #1
023c8     35 00 00 FF 
023cc     2C E4 85 F1 | 	sub	objptr, ##27180
023d0     88 FF 9F FD | 	jmp	#LR__0113
023d4                 | LR__0114
023d4                 | LR__0115
023d4     01 28 86 F1 | 	sub	local02, #1
023d8     01 46 86 F1 | 	sub	local17, #1
023dc                 | LR__0116
023dc     01 28 06 F1 | 	add	local02, #1
023e0     23 29 52 F2 | 	cmps	local02, local17 wc
023e4     34 FE 9F CD |  if_b	jmp	#LR__0110
023e8     00 28 06 F6 | 	mov	local02, #0
023ec                 | '  
023ec                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
023ec                 | '  
023ec                 | ' i=0 
023ec                 | ' do
023ec                 | LR__0117
023ec     14 39 02 F6 | 	mov	local10, local02
023f0     03 38 66 F0 | 	shl	local10, #3
023f4     35 00 00 FF 
023f8     2C E4 05 F1 | 	add	objptr, ##27180
023fc     F2 38 02 F1 | 	add	local10, objptr
02400     1C 59 02 FB | 	rdlong	local26, local10
02404     14 39 02 F6 | 	mov	local10, local02
02408     01 38 06 F1 | 	add	local10, #1
0240c     03 38 66 F0 | 	shl	local10, #3
02410     F2 38 02 F1 | 	add	local10, objptr
02414     1C 5B 02 FB | 	rdlong	local27, local10
02418                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
02418                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
02418     BE 01 00 FF 
0241c     DF 14 06 F6 | 	mov	arg02, ##@LR__5557
02420     2C 13 02 F6 | 	mov	arg01, local26
02424     35 00 00 FF 
02428     2C E4 85 F1 | 	sub	objptr, ##27180
0242c     0C 5D B2 FD | 	call	#__system___string_cmp
02430     00 FA 0D F2 | 	cmp	result1, #0 wz
02434     A8 00 90 AD |  if_e	jmp	#LR__0118
02438     BE 01 00 FF 
0243c     E1 14 06 F6 | 	mov	arg02, ##@LR__5558
02440     2C 13 02 F6 | 	mov	arg01, local26
02444     F4 5C B2 FD | 	call	#__system___string_cmp
02448     FD 2A 0A F6 | 	mov	local03, result1 wz
0244c     90 00 90 AD |  if_e	jmp	#LR__0118
02450     BE 01 00 FF 
02454     E3 30 06 F6 | 	mov	local06, ##@LR__5559
02458     2C 13 02 F6 | 	mov	arg01, local26
0245c     18 15 02 F6 | 	mov	arg02, local06
02460     D8 5C B2 FD | 	call	#__system___string_cmp
02464     00 FA 0D F2 | 	cmp	result1, #0 wz
02468     74 00 90 AD |  if_e	jmp	#LR__0118
0246c     BE 01 00 FF 
02470     E5 3C 06 F6 | 	mov	local12, ##@LR__5560
02474     2C 13 02 F6 | 	mov	arg01, local26
02478     1E 15 02 F6 | 	mov	arg02, local12
0247c     BC 5C B2 FD | 	call	#__system___string_cmp
02480     00 FA 0D F2 | 	cmp	result1, #0 wz
02484     58 00 90 AD |  if_e	jmp	#LR__0118
02488     BE 01 00 FF 
0248c     E7 3A 06 F6 | 	mov	local11, ##@LR__5561
02490     1D 3D 02 F6 | 	mov	local12, local11
02494     2C 13 02 F6 | 	mov	arg01, local26
02498     1E 15 02 F6 | 	mov	arg02, local12
0249c     9C 5C B2 FD | 	call	#__system___string_cmp
024a0     FD 30 0A F6 | 	mov	local06, result1 wz
024a4     38 00 90 AD |  if_e	jmp	#LR__0118
024a8     BE 01 00 FF 
024ac     E9 3A 06 F6 | 	mov	local11, ##@LR__5562
024b0     2C 13 02 F6 | 	mov	arg01, local26
024b4     1D 15 02 F6 | 	mov	arg02, local11
024b8     80 5C B2 FD | 	call	#__system___string_cmp
024bc     FD 3C 0A F6 | 	mov	local12, result1 wz
024c0     1C 00 90 AD |  if_e	jmp	#LR__0118
024c4     BE 01 00 FF 
024c8     EB 40 06 F6 | 	mov	local14, ##@LR__5563
024cc     2C 13 02 F6 | 	mov	arg01, local26
024d0     20 15 02 F6 | 	mov	arg02, local14
024d4     64 5C B2 FD | 	call	#__system___string_cmp
024d8     FD 3A 0A F6 | 	mov	local11, result1 wz
024dc     20 00 90 5D |  if_ne	jmp	#LR__0119
024e0                 | LR__0118
024e0     BE 01 00 FF 
024e4     ED 5C 06 F6 | 	mov	local28, ##@LR__5564
024e8     2E 3F 02 F6 | 	mov	local13, local28
024ec     2D 13 02 F6 | 	mov	arg01, local27
024f0     1F 15 02 F6 | 	mov	arg02, local13
024f4     44 5C B2 FD | 	call	#__system___string_cmp
024f8     FD 40 0A F6 | 	mov	local14, result1 wz
024fc     B8 00 90 AD |  if_e	jmp	#LR__0122
02500                 | LR__0119
02500     BE 01 00 FF 
02504     EF 5C 06 F6 | 	mov	local28, ##@LR__5565
02508     2C 13 02 F6 | 	mov	arg01, local26
0250c     2E 15 02 F6 | 	mov	arg02, local28
02510     28 5C B2 FD | 	call	#__system___string_cmp
02514     FD 3E 0A F6 | 	mov	local13, result1 wz
02518     20 00 90 5D |  if_ne	jmp	#LR__0120
0251c     BE 01 00 FF 
02520     F1 52 06 F6 | 	mov	local23, ##@LR__5566
02524     29 51 02 F6 | 	mov	local22, local23
02528     2D 13 02 F6 | 	mov	arg01, local27
0252c     28 15 02 F6 | 	mov	arg02, local22
02530     08 5C B2 FD | 	call	#__system___string_cmp
02534     FD 5C 0A F6 | 	mov	local28, result1 wz
02538     7C 00 90 AD |  if_e	jmp	#LR__0122
0253c                 | LR__0120
0253c     BE 01 00 FF 
02540     F3 52 06 F6 | 	mov	local23, ##@LR__5567
02544     2C 13 02 F6 | 	mov	arg01, local26
02548     29 15 02 F6 | 	mov	arg02, local23
0254c     EC 5B B2 FD | 	call	#__system___string_cmp
02550     FD 50 0A F6 | 	mov	local22, result1 wz
02554     20 00 90 5D |  if_ne	jmp	#LR__0121
02558     BE 01 00 FF 
0255c     F5 5E 06 F6 | 	mov	local29, ##@LR__5568
02560     2F 55 02 F6 | 	mov	local24, local29
02564     2D 13 02 F6 | 	mov	arg01, local27
02568     2A 15 02 F6 | 	mov	arg02, local24
0256c     CC 5B B2 FD | 	call	#__system___string_cmp
02570     FD 52 0A F6 | 	mov	local23, result1 wz
02574     40 00 90 AD |  if_e	jmp	#LR__0122
02578                 | LR__0121
02578     BE 01 00 FF 
0257c     F7 60 06 F6 | 	mov	local30, ##@LR__5569
02580     30 5F 02 F6 | 	mov	local29, local30
02584     2C 13 02 F6 | 	mov	arg01, local26
02588     2F 15 02 F6 | 	mov	arg02, local29
0258c     AC 5B B2 FD | 	call	#__system___string_cmp
02590     FD 54 0A F6 | 	mov	local24, result1 wz
02594     F0 00 90 5D |  if_ne	jmp	#LR__0126
02598     BE 01 00 FF 
0259c     F9 62 06 F6 | 	mov	local31, ##@LR__5570
025a0     31 61 02 F6 | 	mov	local30, local31
025a4     2D 13 02 F6 | 	mov	arg01, local27
025a8     30 15 02 F6 | 	mov	arg02, local30
025ac     8C 5B B2 FD | 	call	#__system___string_cmp
025b0     FD 5E 0A F6 | 	mov	local29, result1 wz
025b4     D0 00 90 5D |  if_ne	jmp	#LR__0126
025b8                 | LR__0122
025b8     14 39 02 F6 | 	mov	local10, local02
025bc     03 38 66 F0 | 	shl	local10, #3
025c0     35 00 00 FF 
025c4     2C E4 05 F1 | 	add	objptr, ##27180
025c8     F2 38 02 F1 | 	add	local10, objptr
025cc     2D 3D 02 F6 | 	mov	local12, local27
025d0     2C 13 02 F6 | 	mov	arg01, local26
025d4     1E 15 02 F6 | 	mov	arg02, local12
025d8     35 00 00 FF 
025dc     2C E4 85 F1 | 	sub	objptr, ##27180
025e0     8C 5B B2 FD | 	call	#__system___string_concat
025e4     1C FB 61 FC | 	wrlong	result1, local10
025e8                 | '     lparts(i).part$=s1$+s2$
025e8                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
025e8     14 43 02 F6 | 	mov	local15, local02
025ec     01 42 06 F1 | 	add	local15, #1
025f0     23 65 02 F6 | 	mov	local32, local17
025f4     01 64 06 F1 | 	add	local32, #1
025f8     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
025fc                 | LR__0123
025fc     32 43 52 F2 | 	cmps	local15, local32 wc
02600     7C 00 90 3D |  if_ae	jmp	#LR__0125
02604     21 2F 02 F6 | 	mov	local05, local15
02608     01 2E 06 F1 | 	add	local05, #1
0260c     03 2E 66 F0 | 	shl	local05, #3
02610     35 00 00 FF 
02614     2C E4 05 F1 | 	add	objptr, ##27180
02618     F2 2E 02 F1 | 	add	local05, objptr
0261c     17 2D 02 FB | 	rdlong	local04, local05
02620     21 31 02 F6 | 	mov	local06, local15
02624     01 30 06 F1 | 	add	local06, #1
02628     03 30 66 F0 | 	shl	local06, #3
0262c     F2 30 02 F1 | 	add	local06, objptr
02630     04 30 06 F1 | 	add	local06, #4
02634     18 2B 02 FB | 	rdlong	local03, local06
02638     21 31 02 F6 | 	mov	local06, local15
0263c     03 30 66 F0 | 	shl	local06, #3
02640     F2 3C 02 F6 | 	mov	local12, objptr
02644     F2 30 02 F1 | 	add	local06, objptr
02648     18 2D 62 FC | 	wrlong	local04, local06
0264c     21 3B 02 F6 | 	mov	local11, local15
02650     1D 41 02 F6 | 	mov	local14, local11
02654     20 3F 02 F6 | 	mov	local13, local14
02658     03 3E 66 F0 | 	shl	local13, #3
0265c     F2 5C 02 F6 | 	mov	local28, objptr
02660     F2 3E 02 F1 | 	add	local13, objptr
02664     04 3E 06 F1 | 	add	local13, #4
02668     1F 2B 62 FC | 	wrlong	local03, local13
0266c     04 3E 86 F1 | 	sub	local13, #4
02670     01 42 06 F1 | 	add	local15, #1
02674     35 00 00 FF 
02678     2C E4 85 F1 | 	sub	objptr, ##27180
0267c     7C FF 9F FD | 	jmp	#LR__0123
02680                 | LR__0124
02680                 | LR__0125
02680     01 28 86 F1 | 	sub	local02, #1
02684     01 46 86 F1 | 	sub	local17, #1
02688                 | LR__0126
02688     01 28 06 F1 | 	add	local02, #1
0268c     23 29 52 F2 | 	cmps	local02, local17 wc
02690     58 FD 9F CD |  if_b	jmp	#LR__0117
02694                 | '  
02694                 | ' ' 1h : now remove parts that are spaces
02694                 | ' 
02694                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02694     00 28 06 F6 | 	mov	local02, #0
02698     23 67 02 F6 | 	mov	local33, local17
0269c     01 66 06 F1 | 	add	local33, #1
026a0                 | LR__0127
026a0     33 29 52 F2 | 	cmps	local02, local33 wc
026a4     50 00 90 3D |  if_ae	jmp	#LR__0128
026a8     14 39 02 F6 | 	mov	local10, local02
026ac     03 38 66 F0 | 	shl	local10, #3
026b0     35 00 00 FF 
026b4     2C E4 05 F1 | 	add	objptr, ##27180
026b8     F2 38 02 F1 | 	add	local10, objptr
026bc     14 3D 02 F6 | 	mov	local12, local02
026c0     1E 3B 02 F6 | 	mov	local11, local12
026c4     1D 41 02 F6 | 	mov	local14, local11
026c8     03 40 66 F0 | 	shl	local14, #3
026cc     F2 3E 02 F6 | 	mov	local13, objptr
026d0     F2 40 02 F1 | 	add	local14, objptr
026d4     20 13 02 FB | 	rdlong	arg01, local14
026d8     35 00 00 FF 
026dc     2C E4 85 F1 | 	sub	objptr, ##27180
026e0     40 7F B2 FD | 	call	#__system__RTrim_S
026e4     FD 12 02 F6 | 	mov	arg01, result1
026e8     78 7E B2 FD | 	call	#__system__LTrim_S
026ec     1C FB 61 FC | 	wrlong	result1, local10
026f0     01 28 06 F1 | 	add	local02, #1
026f4     A8 FF 9F FD | 	jmp	#LR__0127
026f8                 | LR__0128
026f8     00 28 06 F6 | 	mov	local02, #0
026fc     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
02700                 | ' i=0
02700                 | ' do 
02700                 | LR__0129
02700                 | '   if len(lparts(i).part$)=0 then 
02700     14 2F 02 F6 | 	mov	local05, local02
02704     03 2E 66 F0 | 	shl	local05, #3
02708     35 00 00 FF 
0270c     2C E4 05 F1 | 	add	objptr, ##27180
02710     F2 2E 02 F1 | 	add	local05, objptr
02714     17 13 02 FB | 	rdlong	arg01, local05
02718     35 00 00 FF 
0271c     2C E4 85 F1 | 	sub	objptr, ##27180
02720     09 33 02 F6 | 	mov	local07, arg01
02724                 | LR__0130
02724     19 FB C9 FA | 	rdbyte	result1, local07 wz
02728     01 32 06 51 |  if_ne	add	local07, #1
0272c     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
02730     09 33 8A F1 | 	sub	local07, arg01 wz
02734     C4 00 90 5D |  if_ne	jmp	#LR__0134
02738                 | '     if i=k-1 then k-=1  :  exit
02738     23 2D 02 F6 | 	mov	local04, local17
0273c     01 2C 86 F1 | 	sub	local04, #1
02740     16 29 0A F2 | 	cmp	local02, local04 wz
02744     01 46 86 A1 |  if_e	sub	local17, #1
02748     C4 00 90 AD |  if_e	jmp	#LR__0136
0274c                 | '     if i<k-1 then 
0274c     23 2D 02 F6 | 	mov	local04, local17
02750     01 2C 86 F1 | 	sub	local04, #1
02754     16 29 52 F2 | 	cmps	local02, local04 wc
02758     A0 00 90 3D |  if_ae	jmp	#LR__0133
0275c                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
0275c     14 43 02 F6 | 	mov	local15, local02
02760     23 69 02 F6 | 	mov	local34, local17
02764     01 68 86 F1 | 	sub	local34, #1
02768                 | LR__0131
02768     34 43 52 F2 | 	cmps	local15, local34 wc
0276c     80 00 90 3D |  if_ae	jmp	#LR__0132
02770     21 2F 02 F6 | 	mov	local05, local15
02774     01 2E 06 F1 | 	add	local05, #1
02778     03 2E 66 F0 | 	shl	local05, #3
0277c     35 00 00 FF 
02780     2C E4 05 F1 | 	add	objptr, ##27180
02784     F2 2E 02 F1 | 	add	local05, objptr
02788     17 2D 02 FB | 	rdlong	local04, local05
0278c     21 31 02 F6 | 	mov	local06, local15
02790     01 30 06 F1 | 	add	local06, #1
02794     03 30 66 F0 | 	shl	local06, #3
02798     F2 30 02 F1 | 	add	local06, objptr
0279c     04 30 06 F1 | 	add	local06, #4
027a0     18 2B 02 FB | 	rdlong	local03, local06
027a4     21 39 02 F6 | 	mov	local10, local15
027a8     1C 31 02 F6 | 	mov	local06, local10
027ac     03 30 66 F0 | 	shl	local06, #3
027b0     F2 3C 02 F6 | 	mov	local12, objptr
027b4     F2 30 02 F1 | 	add	local06, objptr
027b8     18 2D 62 FC | 	wrlong	local04, local06
027bc     21 3B 02 F6 | 	mov	local11, local15
027c0     1D 41 02 F6 | 	mov	local14, local11
027c4     20 3F 02 F6 | 	mov	local13, local14
027c8     03 3E 66 F0 | 	shl	local13, #3
027cc     F2 5C 02 F6 | 	mov	local28, objptr
027d0     F2 3E 02 F1 | 	add	local13, objptr
027d4     04 3E 06 F1 | 	add	local13, #4
027d8     1F 2B 62 FC | 	wrlong	local03, local13
027dc     04 3E 86 F1 | 	sub	local13, #4
027e0     01 42 06 F1 | 	add	local15, #1
027e4     35 00 00 FF 
027e8     2C E4 85 F1 | 	sub	objptr, ##27180
027ec     78 FF 9F FD | 	jmp	#LR__0131
027f0                 | LR__0132
027f0     01 46 86 F1 | 	sub	local17, #1
027f4                 | '       if i>0 then i-=1 
027f4     01 28 56 F2 | 	cmps	local02, #1 wc
027f8     01 28 86 31 |  if_ae	sub	local02, #1
027fc                 | LR__0133
027fc                 | LR__0134
027fc     01 28 06 F1 | 	add	local02, #1
02800     23 2D 02 F6 | 	mov	local04, local17
02804     01 2C 86 F1 | 	sub	local04, #1
02808     16 29 5A F2 | 	cmps	local02, local04 wcz
0280c     F0 FE 9F ED |  if_be	jmp	#LR__0129
02810                 | LR__0135
02810                 | LR__0136
02810                 | ' 
02810                 | ' ' 1i: lowercase all that is not a string
02810                 | ' 
02810                 | ' for j=0 to k-1
02810     00 42 06 F6 | 	mov	local15, #0
02814     23 6B 02 F6 | 	mov	local35, local17
02818                 | LR__0137
02818     35 43 52 F2 | 	cmps	local15, local35 wc
0281c     CC 00 90 3D |  if_ae	jmp	#LR__0140
02820                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
02820     21 2F 02 F6 | 	mov	local05, local15
02824     03 2E 66 F0 | 	shl	local05, #3
02828     35 00 00 FF 
0282c     2C E4 05 F1 | 	add	objptr, ##27180
02830     F2 2E 02 F1 | 	add	local05, objptr
02834     17 13 02 FB | 	rdlong	arg01, local05
02838     01 14 06 F6 | 	mov	arg02, #1
0283c     35 00 00 FF 
02840     2C E4 85 F1 | 	sub	objptr, ##27180
02844     4C 79 B2 FD | 	call	#__system__Left_S
02848     FD 12 02 F6 | 	mov	arg01, result1
0284c     BE 01 00 FF 
02850     FB 14 06 F6 | 	mov	arg02, ##@LR__5571
02854     E4 58 B2 FD | 	call	#__system___string_cmp
02858     00 FA 0D F2 | 	cmp	result1, #0 wz
0285c     44 00 90 5D |  if_ne	jmp	#LR__0138
02860     21 31 02 F6 | 	mov	local06, local15
02864     03 30 66 F0 | 	shl	local06, #3
02868     35 00 00 FF 
0286c     2C E4 05 F1 | 	add	objptr, ##27180
02870     F2 3C 02 F6 | 	mov	local12, objptr
02874     F2 30 02 F1 | 	add	local06, objptr
02878     18 13 02 FB | 	rdlong	arg01, local06
0287c     01 14 06 F6 | 	mov	arg02, #1
02880     35 00 00 FF 
02884     2C E4 85 F1 | 	sub	objptr, ##27180
02888     90 79 B2 FD | 	call	#__system__Right_S
0288c     FD 12 02 F6 | 	mov	arg01, result1
02890     BE 01 00 FF 
02894     FD 14 06 F6 | 	mov	arg02, ##@LR__5572
02898     A0 58 B2 FD | 	call	#__system___string_cmp
0289c     00 FA 0D F2 | 	cmp	result1, #0 wz
028a0     40 00 90 AD |  if_e	jmp	#LR__0139
028a4                 | LR__0138
028a4     21 39 02 F6 | 	mov	local10, local15
028a8     03 38 66 F0 | 	shl	local10, #3
028ac     35 00 00 FF 
028b0     2C E4 05 F1 | 	add	objptr, ##27180
028b4     F2 38 02 F1 | 	add	local10, objptr
028b8     21 3D 02 F6 | 	mov	local12, local15
028bc     1E 3B 02 F6 | 	mov	local11, local12
028c0     1D 41 02 F6 | 	mov	local14, local11
028c4     03 40 66 F0 | 	shl	local14, #3
028c8     F2 3E 02 F6 | 	mov	local13, objptr
028cc     F2 40 02 F1 | 	add	local14, objptr
028d0     20 13 02 FB | 	rdlong	arg01, local14
028d4     35 00 00 FF 
028d8     2C E4 85 F1 | 	sub	objptr, ##27180
028dc     C4 7B B2 FD | 	call	#__system__LCase_S
028e0     1C FB 61 FC | 	wrlong	result1, local10
028e4                 | LR__0139
028e4     01 42 06 F1 | 	add	local15, #1
028e8     2C FF 9F FD | 	jmp	#LR__0137
028ec                 | LR__0140
028ec                 | ' 
028ec                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
028ec                 | ' 
028ec                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
028ec     00 28 06 F6 | 	mov	local02, #0
028f0     23 6D 02 F6 | 	mov	local36, local17
028f4     01 6C 06 F1 | 	add	local36, #1
028f8     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
028fc                 | LR__0141
028fc     36 29 52 F2 | 	cmps	local02, local36 wc
02900     30 00 90 3D |  if_ae	jmp	#LR__0143
02904     14 39 02 F6 | 	mov	local10, local02
02908     03 38 66 F0 | 	shl	local10, #3
0290c     35 00 00 FF 
02910     2C E4 05 F1 | 	add	objptr, ##27180
02914     F2 38 02 F1 | 	add	local10, objptr
02918     04 38 06 F1 | 	add	local10, #4
0291c     FF FF FF FF 
02920     1C FF 6B FC | 	wrlong	##-1, local10
02924     01 28 06 F1 | 	add	local02, #1
02928     35 00 00 FF 
0292c     2C E4 85 F1 | 	sub	objptr, ##27180
02930     C8 FF 9F FD | 	jmp	#LR__0141
02934                 | LR__0142
02934                 | LR__0143
02934                 | ' 
02934                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
02934     35 00 00 FF 
02938     2C E4 05 F1 | 	add	objptr, ##27180
0293c     F2 12 02 FB | 	rdlong	arg01, objptr
02940     35 00 00 FF 
02944     2C E4 85 F1 | 	sub	objptr, ##27180
02948     B8 47 B0 FD | 	call	#_isdec
0294c     00 FA 0D F2 | 	cmp	result1, #0 wz
02950     01 6E 06 56 |  if_ne	mov	local37, #1
02954     00 6E 06 A6 |  if_e	mov	local37, #0
02958                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02958     35 00 00 FF 
0295c     2C E4 05 F1 | 	add	objptr, ##27180
02960     F2 12 02 FB | 	rdlong	arg01, objptr
02964     35 00 00 FF 
02968     2C E4 85 F1 | 	sub	objptr, ##27180
0296c     BE 01 00 FF 
02970     FF 14 06 F6 | 	mov	arg02, ##@LR__5573
02974     C4 57 B2 FD | 	call	#__system___string_cmp
02978     00 FA 0D F2 | 	cmp	result1, #0 wz
0297c     01 6E 06 A6 |  if_e	mov	local37, #1
02980     00 28 06 F6 | 	mov	local02, #0
02984                 | ' i=0 : do 
02984                 | LR__0144
02984                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
02984     14 2F 02 F6 | 	mov	local05, local02
02988     03 2E 66 F0 | 	shl	local05, #3
0298c     35 00 00 FF 
02990     2C E4 05 F1 | 	add	objptr, ##27180
02994     F2 2E 02 F1 | 	add	local05, objptr
02998     17 13 02 FB | 	rdlong	arg01, local05
0299c     BE 01 00 FF 
029a0     04 15 06 F6 | 	mov	arg02, ##@LR__5574
029a4     35 00 00 FF 
029a8     2C E4 85 F1 | 	sub	objptr, ##27180
029ac     8C 57 B2 FD | 	call	#__system___string_cmp
029b0     00 FA 0D F2 | 	cmp	result1, #0 wz
029b4     0C 00 90 AD |  if_e	jmp	#LR__0145
029b8     01 28 06 F1 | 	add	local02, #1
029bc     23 29 5A F2 | 	cmps	local02, local17 wcz
029c0     C0 FF 9F ED |  if_be	jmp	#LR__0144
029c4                 | LR__0145
029c4                 | ' if i<k then addptr=i+1	 							' then found
029c4     23 29 52 F2 | 	cmps	local02, local17 wc
029c8     14 6F 02 C6 |  if_b	mov	local37, local02
029cc     01 6E 06 C1 |  if_b	add	local37, #1
029d0     35 00 00 FF 
029d4     2C E4 05 F1 | 	add	objptr, ##27180
029d8                 | ' lp$=lparts(addptr).part$ 
029d8                 | ' 
029d8                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
029d8     37 2F 02 F6 | 	mov	local05, local37
029dc     03 2E 66 F0 | 	shl	local05, #3
029e0     F2 2E 02 F1 | 	add	local05, objptr
029e4     17 13 02 FB | 	rdlong	arg01, local05
029e8     01 14 06 F6 | 	mov	arg02, #1
029ec     35 00 00 FF 
029f0     2C E4 85 F1 | 	sub	objptr, ##27180
029f4     9C 77 B2 FD | 	call	#__system__Left_S
029f8     FD 12 02 F6 | 	mov	arg01, result1
029fc     BE 01 00 FF 
02a00     09 15 06 F6 | 	mov	arg02, ##@LR__5575
02a04     34 57 B2 FD | 	call	#__system___string_cmp
02a08     00 FA 0D F2 | 	cmp	result1, #0 wz
02a0c     60 01 90 5D |  if_ne	jmp	#LR__0152
02a10     37 31 02 F6 | 	mov	local06, local37
02a14     03 30 66 F0 | 	shl	local06, #3
02a18     35 00 00 FF 
02a1c     2C E4 05 F1 | 	add	objptr, ##27180
02a20     F2 30 02 F1 | 	add	local06, objptr
02a24     18 13 02 FB | 	rdlong	arg01, local06
02a28     35 00 00 FF 
02a2c     2C E4 85 F1 | 	sub	objptr, ##27180
02a30     09 33 02 F6 | 	mov	local07, arg01
02a34     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
02a38                 | LR__0146
02a38     19 FB C9 FA | 	rdbyte	result1, local07 wz
02a3c     01 32 06 51 |  if_ne	add	local07, #1
02a40     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
02a44                 | LR__0147
02a44     09 33 82 F1 | 	sub	local07, arg01
02a48     02 32 56 F2 | 	cmps	local07, #2 wc
02a4c     20 01 90 CD |  if_b	jmp	#LR__0152
02a50     01 46 06 F1 | 	add	local17, #1
02a54                 | '   k+=1
02a54                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02a54     23 29 02 F6 | 	mov	local02, local17
02a58     37 71 02 F6 | 	mov	local38, local37
02a5c     01 70 06 F1 | 	add	local38, #1
02a60     35 00 00 FF 
02a64     2C E4 05 F1 | 	add	objptr, ##27180
02a68     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02a6c                 | LR__0148
02a6c     14 2F 02 F6 | 	mov	local05, local02
02a70     01 2E 86 F1 | 	sub	local05, #1
02a74     03 2E 66 F0 | 	shl	local05, #3
02a78     F2 2E 02 F1 | 	add	local05, objptr
02a7c     17 2D 02 FB | 	rdlong	local04, local05
02a80     14 31 02 F6 | 	mov	local06, local02
02a84     01 30 86 F1 | 	sub	local06, #1
02a88     03 30 66 F0 | 	shl	local06, #3
02a8c     F2 30 02 F1 | 	add	local06, objptr
02a90     04 30 06 F1 | 	add	local06, #4
02a94     18 2B 02 FB | 	rdlong	local03, local06
02a98     14 31 02 F6 | 	mov	local06, local02
02a9c     03 30 66 F0 | 	shl	local06, #3
02aa0     F2 30 02 F1 | 	add	local06, objptr
02aa4     18 2D 62 FC | 	wrlong	local04, local06
02aa8     14 3F 02 F6 | 	mov	local13, local02
02aac     03 3E 66 F0 | 	shl	local13, #3
02ab0     F2 3E 02 F1 | 	add	local13, objptr
02ab4     04 3E 06 F1 | 	add	local13, #4
02ab8     1F 2B 62 FC | 	wrlong	local03, local13
02abc     01 28 86 F1 | 	sub	local02, #1
02ac0     38 29 52 F2 | 	cmps	local02, local38 wc
02ac4     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02ac8                 | LR__0149
02ac8     37 39 02 F6 | 	mov	local10, local37
02acc     01 38 06 F1 | 	add	local10, #1
02ad0     03 38 66 F0 | 	shl	local10, #3
02ad4     F2 38 02 F1 | 	add	local10, objptr
02ad8     37 41 02 F6 | 	mov	local14, local37
02adc     03 40 66 F0 | 	shl	local14, #3
02ae0     F2 40 02 F1 | 	add	local14, objptr
02ae4     20 31 02 FB | 	rdlong	local06, local14
02ae8     37 3F 02 F6 | 	mov	local13, local37
02aec     1F 5D 02 F6 | 	mov	local28, local13
02af0     2E 51 02 F6 | 	mov	local22, local28
02af4     03 50 66 F0 | 	shl	local22, #3
02af8     F2 52 02 F6 | 	mov	local23, objptr
02afc     F2 50 02 F1 | 	add	local22, objptr
02b00     28 13 02 FB | 	rdlong	arg01, local22
02b04     35 00 00 FF 
02b08     2C E4 85 F1 | 	sub	objptr, ##27180
02b0c     09 33 02 F6 | 	mov	local07, arg01
02b10     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
02b14                 | LR__0150
02b14     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b18     01 32 06 51 |  if_ne	add	local07, #1
02b1c     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02b20                 | LR__0151
02b20     09 33 82 F1 | 	sub	local07, arg01
02b24     19 41 02 F6 | 	mov	local14, local07
02b28     20 3B 02 F6 | 	mov	local11, local14
02b2c     01 3A 86 F1 | 	sub	local11, #1
02b30     1D 3D 02 F6 | 	mov	local12, local11
02b34     18 13 02 F6 | 	mov	arg01, local06
02b38     1E 15 02 F6 | 	mov	arg02, local12
02b3c     DC 76 B2 FD | 	call	#__system__Right_S
02b40     1C FB 61 FC | 	wrlong	result1, local10
02b44     37 39 02 F6 | 	mov	local10, local37
02b48     03 38 66 F0 | 	shl	local10, #3
02b4c     35 00 00 FF 
02b50     2C E4 05 F1 | 	add	objptr, ##27180
02b54     F2 38 02 F1 | 	add	local10, objptr
02b58     BE 01 00 FF 
02b5c     0B 31 06 F6 | 	mov	local06, ##@LR__5576
02b60     1C 31 62 FC | 	wrlong	local06, local10
02b64     35 00 00 FF 
02b68     2C E4 85 F1 | 	sub	objptr, ##27180
02b6c     A8 01 90 FD | 	jmp	#LR__0160
02b70                 | LR__0152
02b70     37 31 02 F6 | 	mov	local06, local37
02b74     03 30 66 F0 | 	shl	local06, #3
02b78     35 00 00 FF 
02b7c     2C E4 05 F1 | 	add	objptr, ##27180
02b80     F2 3C 02 F6 | 	mov	local12, objptr
02b84     F2 30 02 F1 | 	add	local06, objptr
02b88     18 15 02 FB | 	rdlong	arg02, local06
02b8c     BE 01 00 FF 
02b90     0D 17 06 F6 | 	mov	arg03, ##@LR__5577
02b94     01 12 06 F6 | 	mov	arg01, #1
02b98     35 00 00 FF 
02b9c     2C E4 85 F1 | 	sub	objptr, ##27180
02ba0     38 7B B2 FD | 	call	#__system__Instr
02ba4     FD 72 02 F6 | 	mov	local39, result1
02ba8                 | ' 
02ba8                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
02ba8                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
02ba8     01 72 56 F2 | 	cmps	local39, #1 wc
02bac     68 01 90 CD |  if_b	jmp	#LR__0159
02bb0     37 2F 02 F6 | 	mov	local05, local37
02bb4     03 2E 66 F0 | 	shl	local05, #3
02bb8     35 00 00 FF 
02bbc     2C E4 05 F1 | 	add	objptr, ##27180
02bc0     F2 2E 02 F1 | 	add	local05, objptr
02bc4     17 13 02 FB | 	rdlong	arg01, local05
02bc8     35 00 00 FF 
02bcc     2C E4 85 F1 | 	sub	objptr, ##27180
02bd0     09 33 02 F6 | 	mov	local07, arg01
02bd4     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02bd8                 | LR__0153
02bd8     19 FB C9 FA | 	rdbyte	result1, local07 wz
02bdc     01 32 06 51 |  if_ne	add	local07, #1
02be0     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02be4                 | LR__0154
02be4     09 33 82 F1 | 	sub	local07, arg01
02be8     19 73 52 F2 | 	cmps	local39, local07 wc
02bec     28 01 90 3D |  if_ae	jmp	#LR__0159
02bf0     01 46 06 F1 | 	add	local17, #1
02bf4                 | '   k+=1
02bf4                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02bf4     23 29 02 F6 | 	mov	local02, local17
02bf8     37 75 02 F6 | 	mov	local40, local37
02bfc     01 74 06 F1 | 	add	local40, #1
02c00     35 00 00 FF 
02c04     2C E4 05 F1 | 	add	objptr, ##27180
02c08     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02c0c                 | LR__0155
02c0c     14 2F 02 F6 | 	mov	local05, local02
02c10     01 2E 86 F1 | 	sub	local05, #1
02c14     03 2E 66 F0 | 	shl	local05, #3
02c18     F2 2E 02 F1 | 	add	local05, objptr
02c1c     17 2D 02 FB | 	rdlong	local04, local05
02c20     14 31 02 F6 | 	mov	local06, local02
02c24     01 30 86 F1 | 	sub	local06, #1
02c28     03 30 66 F0 | 	shl	local06, #3
02c2c     F2 30 02 F1 | 	add	local06, objptr
02c30     04 30 06 F1 | 	add	local06, #4
02c34     18 2B 02 FB | 	rdlong	local03, local06
02c38     14 31 02 F6 | 	mov	local06, local02
02c3c     03 30 66 F0 | 	shl	local06, #3
02c40     F2 30 02 F1 | 	add	local06, objptr
02c44     18 2D 62 FC | 	wrlong	local04, local06
02c48     14 3F 02 F6 | 	mov	local13, local02
02c4c     03 3E 66 F0 | 	shl	local13, #3
02c50     F2 3E 02 F1 | 	add	local13, objptr
02c54     04 3E 06 F1 | 	add	local13, #4
02c58     1F 2B 62 FC | 	wrlong	local03, local13
02c5c     01 28 86 F1 | 	sub	local02, #1
02c60     3A 29 52 F2 | 	cmps	local02, local40 wc
02c64     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02c68                 | LR__0156
02c68     37 39 02 F6 | 	mov	local10, local37
02c6c     01 38 06 F1 | 	add	local10, #1
02c70     03 38 66 F0 | 	shl	local10, #3
02c74     F2 38 02 F1 | 	add	local10, objptr
02c78     37 41 02 F6 | 	mov	local14, local37
02c7c     03 40 66 F0 | 	shl	local14, #3
02c80     F2 40 02 F1 | 	add	local14, objptr
02c84     20 31 02 FB | 	rdlong	local06, local14
02c88     37 5D 02 F6 | 	mov	local28, local37
02c8c     2E 51 02 F6 | 	mov	local22, local28
02c90     03 50 66 F0 | 	shl	local22, #3
02c94     F2 52 02 F6 | 	mov	local23, objptr
02c98     F2 50 02 F1 | 	add	local22, objptr
02c9c     28 13 02 FB | 	rdlong	arg01, local22
02ca0     35 00 00 FF 
02ca4     2C E4 85 F1 | 	sub	objptr, ##27180
02ca8     09 33 02 F6 | 	mov	local07, arg01
02cac     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02cb0                 | LR__0157
02cb0     19 FB C9 FA | 	rdbyte	result1, local07 wz
02cb4     01 32 06 51 |  if_ne	add	local07, #1
02cb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02cbc                 | LR__0158
02cbc     09 33 82 F1 | 	sub	local07, arg01
02cc0     19 15 02 F6 | 	mov	arg02, local07
02cc4     39 15 82 F1 | 	sub	arg02, local39
02cc8     18 13 02 F6 | 	mov	arg01, local06
02ccc     4C 75 B2 FD | 	call	#__system__Right_S
02cd0     1C FB 61 FC | 	wrlong	result1, local10
02cd4     37 39 02 F6 | 	mov	local10, local37
02cd8     03 38 66 F0 | 	shl	local10, #3
02cdc     35 00 00 FF 
02ce0     2C E4 05 F1 | 	add	objptr, ##27180
02ce4     F2 38 02 F1 | 	add	local10, objptr
02ce8     37 3B 02 F6 | 	mov	local11, local37
02cec     1D 41 02 F6 | 	mov	local14, local11
02cf0     03 40 66 F0 | 	shl	local14, #3
02cf4     F2 3E 02 F6 | 	mov	local13, objptr
02cf8     F2 40 02 F1 | 	add	local14, objptr
02cfc     20 13 02 FB | 	rdlong	arg01, local14
02d00     39 3D 02 F6 | 	mov	local12, local39
02d04     1E 15 02 F6 | 	mov	arg02, local12
02d08     35 00 00 FF 
02d0c     2C E4 85 F1 | 	sub	objptr, ##27180
02d10     80 74 B2 FD | 	call	#__system__Left_S
02d14     1C FB 61 FC | 	wrlong	result1, local10
02d18                 | LR__0159
02d18                 | LR__0160
02d18     37 39 02 F6 | 	mov	local10, local37
02d1c     03 38 66 F0 | 	shl	local10, #3
02d20     35 00 00 FF 
02d24     2C E4 05 F1 | 	add	objptr, ##27180
02d28     F2 38 02 F1 | 	add	local10, objptr
02d2c     1C 77 02 FB | 	rdlong	local41, local10
02d30                 | ' 
02d30                 | ' 825
02d30                 | ' lp$=lparts(addptr).part$ 
02d30                 | ' 
02d30                 | ' ' process mouse/cursor/click on/off
02d30                 | ' 
02d30                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02d30     BE 01 00 FF 
02d34     0F 15 06 F6 | 	mov	arg02, ##@LR__5578
02d38     3B 13 02 F6 | 	mov	arg01, local41
02d3c     35 00 00 FF 
02d40     2C E4 85 F1 | 	sub	objptr, ##27180
02d44     F4 53 B2 FD | 	call	#__system___string_cmp
02d48     00 FA 0D F2 | 	cmp	result1, #0 wz
02d4c     30 00 90 AD |  if_e	jmp	#LR__0161
02d50     BE 01 00 FF 
02d54     15 15 06 F6 | 	mov	arg02, ##@LR__5579
02d58     3B 13 02 F6 | 	mov	arg01, local41
02d5c     DC 53 B2 FD | 	call	#__system___string_cmp
02d60     00 FA 0D F2 | 	cmp	result1, #0 wz
02d64     18 00 90 AD |  if_e	jmp	#LR__0161
02d68     BE 01 00 FF 
02d6c     1C 15 06 F6 | 	mov	arg02, ##@LR__5580
02d70     3B 13 02 F6 | 	mov	arg01, local41
02d74     C4 53 B2 FD | 	call	#__system___string_cmp
02d78     00 FA 0D F2 | 	cmp	result1, #0 wz
02d7c     E0 00 90 5D |  if_ne	jmp	#LR__0164
02d80                 | LR__0161
02d80                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02d80     37 2F 02 F6 | 	mov	local05, local37
02d84     01 2E 06 F1 | 	add	local05, #1
02d88     03 2E 66 F0 | 	shl	local05, #3
02d8c     35 00 00 FF 
02d90     2C E4 05 F1 | 	add	objptr, ##27180
02d94     F2 2E 02 F1 | 	add	local05, objptr
02d98     17 13 02 FB | 	rdlong	arg01, local05
02d9c     BE 01 00 FF 
02da0     22 15 06 F6 | 	mov	arg02, ##@LR__5581
02da4     35 00 00 FF 
02da8     2C E4 85 F1 | 	sub	objptr, ##27180
02dac     8C 53 B2 FD | 	call	#__system___string_cmp
02db0     00 FA 0D F2 | 	cmp	result1, #0 wz
02db4     38 00 90 5D |  if_ne	jmp	#LR__0162
02db8     37 39 02 F6 | 	mov	local10, local37
02dbc     01 38 06 F1 | 	add	local10, #1
02dc0     03 38 66 F0 | 	shl	local10, #3
02dc4     35 00 00 FF 
02dc8     2C E4 05 F1 | 	add	objptr, ##27180
02dcc     F2 38 02 F1 | 	add	local10, objptr
02dd0     BE 01 00 FF 
02dd4     25 31 06 F6 | 	mov	local06, ##@LR__5582
02dd8     1C 31 62 FC | 	wrlong	local06, local10
02ddc     14 E4 05 F1 | 	add	objptr, #20
02de0     01 00 80 FF 
02de4     F2 00 68 FC | 	wrlong	##512, objptr
02de8     35 00 00 FF 
02dec     40 E4 85 F1 | 	sub	objptr, ##27200
02df0                 | LR__0162
02df0                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02df0     37 2F 02 F6 | 	mov	local05, local37
02df4     01 2E 06 F1 | 	add	local05, #1
02df8     03 2E 66 F0 | 	shl	local05, #3
02dfc     35 00 00 FF 
02e00     2C E4 05 F1 | 	add	objptr, ##27180
02e04     F2 2E 02 F1 | 	add	local05, objptr
02e08     17 13 02 FB | 	rdlong	arg01, local05
02e0c     BE 01 00 FF 
02e10     27 15 06 F6 | 	mov	arg02, ##@LR__5583
02e14     35 00 00 FF 
02e18     2C E4 85 F1 | 	sub	objptr, ##27180
02e1c     1C 53 B2 FD | 	call	#__system___string_cmp
02e20     00 FA 0D F2 | 	cmp	result1, #0 wz
02e24     38 00 90 5D |  if_ne	jmp	#LR__0163
02e28     37 39 02 F6 | 	mov	local10, local37
02e2c     01 38 06 F1 | 	add	local10, #1
02e30     03 38 66 F0 | 	shl	local10, #3
02e34     35 00 00 FF 
02e38     2C E4 05 F1 | 	add	objptr, ##27180
02e3c     F2 38 02 F1 | 	add	local10, objptr
02e40     BE 01 00 FF 
02e44     2B 31 06 F6 | 	mov	local06, ##@LR__5584
02e48     1C 31 62 FC | 	wrlong	local06, local10
02e4c     14 E4 05 F1 | 	add	objptr, #20
02e50     01 00 80 FF 
02e54     F2 00 68 FC | 	wrlong	##512, objptr
02e58     35 00 00 FF 
02e5c     40 E4 85 F1 | 	sub	objptr, ##27200
02e60                 | LR__0163
02e60                 | LR__0164
02e60                 | ' 		
02e60                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02e60                 | ' 
02e60                 | ' if (lp$="mode" orelse lp$="m.") then 
02e60     BE 01 00 FF 
02e64     2D 15 06 F6 | 	mov	arg02, ##@LR__5585
02e68     3B 13 02 F6 | 	mov	arg01, local41
02e6c     CC 52 B2 FD | 	call	#__system___string_cmp
02e70     00 FA 0D F2 | 	cmp	result1, #0 wz
02e74     18 00 90 AD |  if_e	jmp	#LR__0165
02e78     BE 01 00 FF 
02e7c     32 15 06 F6 | 	mov	arg02, ##@LR__5586
02e80     3B 13 02 F6 | 	mov	arg01, local41
02e84     B4 52 B2 FD | 	call	#__system___string_cmp
02e88     00 FA 0D F2 | 	cmp	result1, #0 wz
02e8c     58 02 90 5D |  if_ne	jmp	#LR__0172
02e90                 | LR__0165
02e90                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02e90     37 2F 02 F6 | 	mov	local05, local37
02e94     01 2E 06 F1 | 	add	local05, #1
02e98     03 2E 66 F0 | 	shl	local05, #3
02e9c     35 00 00 FF 
02ea0     2C E4 05 F1 | 	add	objptr, ##27180
02ea4     F2 2E 02 F1 | 	add	local05, objptr
02ea8     17 13 02 FB | 	rdlong	arg01, local05
02eac     BE 01 00 FF 
02eb0     35 15 06 F6 | 	mov	arg02, ##@LR__5587
02eb4     35 00 00 FF 
02eb8     2C E4 85 F1 | 	sub	objptr, ##27180
02ebc     7C 52 B2 FD | 	call	#__system___string_cmp
02ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec4     2C 00 90 5D |  if_ne	jmp	#LR__0166
02ec8     37 39 02 F6 | 	mov	local10, local37
02ecc     01 38 06 F1 | 	add	local10, #1
02ed0     03 38 66 F0 | 	shl	local10, #3
02ed4     35 00 00 FF 
02ed8     2C E4 05 F1 | 	add	objptr, ##27180
02edc     F2 38 02 F1 | 	add	local10, objptr
02ee0     BE 01 00 FF 
02ee4     3B 31 06 F6 | 	mov	local06, ##@LR__5588
02ee8     1C 31 62 FC | 	wrlong	local06, local10
02eec     35 00 00 FF 
02ef0     2C E4 85 F1 | 	sub	objptr, ##27180
02ef4                 | LR__0166
02ef4                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02ef4     37 2F 02 F6 | 	mov	local05, local37
02ef8     01 2E 06 F1 | 	add	local05, #1
02efc     03 2E 66 F0 | 	shl	local05, #3
02f00     35 00 00 FF 
02f04     2C E4 05 F1 | 	add	objptr, ##27180
02f08     F2 2E 02 F1 | 	add	local05, objptr
02f0c     17 13 02 FB | 	rdlong	arg01, local05
02f10     BE 01 00 FF 
02f14     3D 15 06 F6 | 	mov	arg02, ##@LR__5589
02f18     35 00 00 FF 
02f1c     2C E4 85 F1 | 	sub	objptr, ##27180
02f20     18 52 B2 FD | 	call	#__system___string_cmp
02f24     00 FA 0D F2 | 	cmp	result1, #0 wz
02f28     2C 00 90 5D |  if_ne	jmp	#LR__0167
02f2c     37 39 02 F6 | 	mov	local10, local37
02f30     01 38 06 F1 | 	add	local10, #1
02f34     03 38 66 F0 | 	shl	local10, #3
02f38     35 00 00 FF 
02f3c     2C E4 05 F1 | 	add	objptr, ##27180
02f40     F2 38 02 F1 | 	add	local10, objptr
02f44     BE 01 00 FF 
02f48     46 31 06 F6 | 	mov	local06, ##@LR__5590
02f4c     1C 31 62 FC | 	wrlong	local06, local10
02f50     35 00 00 FF 
02f54     2C E4 85 F1 | 	sub	objptr, ##27180
02f58                 | LR__0167
02f58                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02f58     37 2F 02 F6 | 	mov	local05, local37
02f5c     01 2E 06 F1 | 	add	local05, #1
02f60     03 2E 66 F0 | 	shl	local05, #3
02f64     35 00 00 FF 
02f68     2C E4 05 F1 | 	add	objptr, ##27180
02f6c     F2 2E 02 F1 | 	add	local05, objptr
02f70     17 13 02 FB | 	rdlong	arg01, local05
02f74     BE 01 00 FF 
02f78     48 15 06 F6 | 	mov	arg02, ##@LR__5591
02f7c     35 00 00 FF 
02f80     2C E4 85 F1 | 	sub	objptr, ##27180
02f84     B4 51 B2 FD | 	call	#__system___string_cmp
02f88     00 FA 0D F2 | 	cmp	result1, #0 wz
02f8c     2C 00 90 5D |  if_ne	jmp	#LR__0168
02f90     37 39 02 F6 | 	mov	local10, local37
02f94     01 38 06 F1 | 	add	local10, #1
02f98     03 38 66 F0 | 	shl	local10, #3
02f9c     35 00 00 FF 
02fa0     2C E4 05 F1 | 	add	objptr, ##27180
02fa4     F2 38 02 F1 | 	add	local10, objptr
02fa8     BE 01 00 FF 
02fac     51 31 06 F6 | 	mov	local06, ##@LR__5592
02fb0     1C 31 62 FC | 	wrlong	local06, local10
02fb4     35 00 00 FF 
02fb8     2C E4 85 F1 | 	sub	objptr, ##27180
02fbc                 | LR__0168
02fbc                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02fbc     37 2F 02 F6 | 	mov	local05, local37
02fc0     01 2E 06 F1 | 	add	local05, #1
02fc4     03 2E 66 F0 | 	shl	local05, #3
02fc8     35 00 00 FF 
02fcc     2C E4 05 F1 | 	add	objptr, ##27180
02fd0     F2 2E 02 F1 | 	add	local05, objptr
02fd4     17 13 02 FB | 	rdlong	arg01, local05
02fd8     BE 01 00 FF 
02fdc     53 15 06 F6 | 	mov	arg02, ##@LR__5593
02fe0     35 00 00 FF 
02fe4     2C E4 85 F1 | 	sub	objptr, ##27180
02fe8     50 51 B2 FD | 	call	#__system___string_cmp
02fec     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff0     2C 00 90 5D |  if_ne	jmp	#LR__0169
02ff4     37 39 02 F6 | 	mov	local10, local37
02ff8     01 38 06 F1 | 	add	local10, #1
02ffc     03 38 66 F0 | 	shl	local10, #3
03000     35 00 00 FF 
03004     2C E4 05 F1 | 	add	objptr, ##27180
03008     F2 38 02 F1 | 	add	local10, objptr
0300c     BE 01 00 FF 
03010     5C 31 06 F6 | 	mov	local06, ##@LR__5594
03014     1C 31 62 FC | 	wrlong	local06, local10
03018     35 00 00 FF 
0301c     2C E4 85 F1 | 	sub	objptr, ##27180
03020                 | LR__0169
03020                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
03020     37 2F 02 F6 | 	mov	local05, local37
03024     01 2E 06 F1 | 	add	local05, #1
03028     03 2E 66 F0 | 	shl	local05, #3
0302c     35 00 00 FF 
03030     2C E4 05 F1 | 	add	objptr, ##27180
03034     F2 2E 02 F1 | 	add	local05, objptr
03038     17 13 02 FB | 	rdlong	arg01, local05
0303c     BE 01 00 FF 
03040     5E 15 06 F6 | 	mov	arg02, ##@LR__5595
03044     35 00 00 FF 
03048     2C E4 85 F1 | 	sub	objptr, ##27180
0304c     EC 50 B2 FD | 	call	#__system___string_cmp
03050     00 FA 0D F2 | 	cmp	result1, #0 wz
03054     2C 00 90 5D |  if_ne	jmp	#LR__0170
03058     37 39 02 F6 | 	mov	local10, local37
0305c     01 38 06 F1 | 	add	local10, #1
03060     03 38 66 F0 | 	shl	local10, #3
03064     35 00 00 FF 
03068     2C E4 05 F1 | 	add	objptr, ##27180
0306c     F2 38 02 F1 | 	add	local10, objptr
03070     BE 01 00 FF 
03074     61 31 06 F6 | 	mov	local06, ##@LR__5596
03078     1C 31 62 FC | 	wrlong	local06, local10
0307c     35 00 00 FF 
03080     2C E4 85 F1 | 	sub	objptr, ##27180
03084                 | LR__0170
03084                 | '   if lparts(addptr+1).part$="amiga" then lparts(addptr+1).part$="5"  
03084     37 2F 02 F6 | 	mov	local05, local37
03088     01 2E 06 F1 | 	add	local05, #1
0308c     03 2E 66 F0 | 	shl	local05, #3
03090     35 00 00 FF 
03094     2C E4 05 F1 | 	add	objptr, ##27180
03098     F2 2E 02 F1 | 	add	local05, objptr
0309c     17 13 02 FB | 	rdlong	arg01, local05
030a0     BE 01 00 FF 
030a4     63 15 06 F6 | 	mov	arg02, ##@LR__5597
030a8     35 00 00 FF 
030ac     2C E4 85 F1 | 	sub	objptr, ##27180
030b0     88 50 B2 FD | 	call	#__system___string_cmp
030b4     00 FA 0D F2 | 	cmp	result1, #0 wz
030b8     2C 00 90 5D |  if_ne	jmp	#LR__0171
030bc     37 39 02 F6 | 	mov	local10, local37
030c0     01 38 06 F1 | 	add	local10, #1
030c4     03 38 66 F0 | 	shl	local10, #3
030c8     35 00 00 FF 
030cc     2C E4 05 F1 | 	add	objptr, ##27180
030d0     F2 38 02 F1 | 	add	local10, objptr
030d4     BE 01 00 FF 
030d8     69 31 06 F6 | 	mov	local06, ##@LR__5598
030dc     1C 31 62 FC | 	wrlong	local06, local10
030e0     35 00 00 FF 
030e4     2C E4 85 F1 | 	sub	objptr, ##27180
030e8                 | LR__0171
030e8                 | LR__0172
030e8                 | ' 
030e8                 | ' ' find part types 
030e8                 | ' 
030e8                 | ' for i=0 to k-1
030e8     00 28 06 F6 | 	mov	local02, #0
030ec     23 79 02 F6 | 	mov	local42, local17
030f0                 | LR__0173
030f0     3C 29 52 F2 | 	cmps	local02, local42 wc
030f4     A4 07 90 3D |  if_ae	jmp	#LR__0185
030f8     14 39 02 F6 | 	mov	local10, local02
030fc     03 38 66 F0 | 	shl	local10, #3
03100     35 00 00 FF 
03104     2C E4 05 F1 | 	add	objptr, ##27180
03108     F2 38 02 F1 | 	add	local10, objptr
0310c     14 3B 02 F6 | 	mov	local11, local02
03110     1D 41 02 F6 | 	mov	local14, local11
03114     20 3F 02 F6 | 	mov	local13, local14
03118     03 3E 66 F0 | 	shl	local13, #3
0311c     F2 3E 02 F1 | 	add	local13, objptr
03120     1F 13 02 FB | 	rdlong	arg01, local13
03124     35 00 00 FF 
03128     2C E4 85 F1 | 	sub	objptr, ##27180
0312c     70 1B B0 FD | 	call	#_isseparator
03130     FD FA E1 F8 | 	getbyte	result1, result1, #0
03134     04 38 06 F1 | 	add	local10, #4
03138     1C FB 61 FC | 	wrlong	result1, local10
0313c                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
0313c     14 39 02 F6 | 	mov	local10, local02
03140     03 38 66 F0 | 	shl	local10, #3
03144     35 00 00 FF 
03148     2C E4 05 F1 | 	add	objptr, ##27180
0314c     F2 38 02 F1 | 	add	local10, objptr
03150     04 38 06 F1 | 	add	local10, #4
03154     1C 3D 02 FB | 	rdlong	local12, local10
03158     01 3C 56 F2 | 	cmps	local12, #1 wc
0315c     35 00 00 FF 
03160     2C E4 85 F1 | 	sub	objptr, ##27180
03164     2C 07 90 3D |  if_ae	jmp	#LR__0184
03168     14 39 02 F6 | 	mov	local10, local02
0316c     03 38 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     2C E4 05 F1 | 	add	objptr, ##27180
03178     F2 38 02 F1 | 	add	local10, objptr
0317c     14 3B 02 F6 | 	mov	local11, local02
03180     1D 41 02 F6 | 	mov	local14, local11
03184     20 3F 02 F6 | 	mov	local13, local14
03188     03 3E 66 F0 | 	shl	local13, #3
0318c     F2 3E 02 F1 | 	add	local13, objptr
03190     1F 13 02 FB | 	rdlong	arg01, local13
03194     35 00 00 FF 
03198     2C E4 85 F1 | 	sub	objptr, ##27180
0319c     4C 13 B0 FD | 	call	#_isoperator
031a0     FD FA E1 F8 | 	getbyte	result1, result1, #0
031a4     04 38 06 F1 | 	add	local10, #4
031a8     1C FB 61 FC | 	wrlong	result1, local10
031ac                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
031ac     14 39 02 F6 | 	mov	local10, local02
031b0     03 38 66 F0 | 	shl	local10, #3
031b4     35 00 00 FF 
031b8     2C E4 05 F1 | 	add	objptr, ##27180
031bc     F2 38 02 F1 | 	add	local10, objptr
031c0     04 38 06 F1 | 	add	local10, #4
031c4     1C 3D 02 FB | 	rdlong	local12, local10
031c8     01 3C 56 F2 | 	cmps	local12, #1 wc
031cc     35 00 00 FF 
031d0     2C E4 85 F1 | 	sub	objptr, ##27180
031d4     BC 06 90 3D |  if_ae	jmp	#LR__0184
031d8     14 39 02 F6 | 	mov	local10, local02
031dc     03 38 66 F0 | 	shl	local10, #3
031e0     35 00 00 FF 
031e4     2C E4 05 F1 | 	add	objptr, ##27180
031e8     F2 38 02 F1 | 	add	local10, objptr
031ec     14 3B 02 F6 | 	mov	local11, local02
031f0     1D 41 02 F6 | 	mov	local14, local11
031f4     20 3F 02 F6 | 	mov	local13, local14
031f8     03 3E 66 F0 | 	shl	local13, #3
031fc     F2 3E 02 F1 | 	add	local13, objptr
03200     1F 13 02 FB | 	rdlong	arg01, local13
03204     35 00 00 FF 
03208     2C E4 85 F1 | 	sub	objptr, ##27180
0320c                 | ' 
0320c                 | ' select case s
0320c     BF 01 00 FF 
03210     6E 14 06 F6 | 	mov	arg02, ##@LR__5689
03214     24 4F B2 FD | 	call	#__system___string_cmp
03218     00 FA 0D F2 | 	cmp	result1, #0 wz
0321c     1B FA 05 A6 |  if_e	mov	result1, #27
03220     00 FA 05 56 |  if_ne	mov	result1, #0
03224     FD FA E1 F8 | 	getbyte	result1, result1, #0
03228     04 38 06 F1 | 	add	local10, #4
0322c     1C FB 61 FC | 	wrlong	result1, local10
03230                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03230     14 39 02 F6 | 	mov	local10, local02
03234     03 38 66 F0 | 	shl	local10, #3
03238     35 00 00 FF 
0323c     2C E4 05 F1 | 	add	objptr, ##27180
03240     F2 38 02 F1 | 	add	local10, objptr
03244     04 38 06 F1 | 	add	local10, #4
03248     1C 3D 02 FB | 	rdlong	local12, local10
0324c     01 3C 56 F2 | 	cmps	local12, #1 wc
03250     35 00 00 FF 
03254     2C E4 85 F1 | 	sub	objptr, ##27180
03258     38 06 90 3D |  if_ae	jmp	#LR__0184
0325c     14 39 02 F6 | 	mov	local10, local02
03260     03 38 66 F0 | 	shl	local10, #3
03264     35 00 00 FF 
03268     2C E4 05 F1 | 	add	objptr, ##27180
0326c     F2 38 02 F1 | 	add	local10, objptr
03270     14 3B 02 F6 | 	mov	local11, local02
03274     1D 41 02 F6 | 	mov	local14, local11
03278     20 3F 02 F6 | 	mov	local13, local14
0327c     03 3E 66 F0 | 	shl	local13, #3
03280     F2 3E 02 F1 | 	add	local13, objptr
03284     1F 13 02 FB | 	rdlong	arg01, local13
03288     35 00 00 FF 
0328c     2C E4 85 F1 | 	sub	objptr, ##27180
03290     0C 1C B0 FD | 	call	#_iscommand
03294     FD FA E1 F8 | 	getbyte	result1, result1, #0
03298     04 38 06 F1 | 	add	local10, #4
0329c     1C FB 61 FC | 	wrlong	result1, local10
032a0                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
032a0     14 39 02 F6 | 	mov	local10, local02
032a4     03 38 66 F0 | 	shl	local10, #3
032a8     35 00 00 FF 
032ac     2C E4 05 F1 | 	add	objptr, ##27180
032b0     F2 38 02 F1 | 	add	local10, objptr
032b4     04 38 06 F1 | 	add	local10, #4
032b8     1C 3D 02 FB | 	rdlong	local12, local10
032bc     01 3C 56 F2 | 	cmps	local12, #1 wc
032c0     35 00 00 FF 
032c4     2C E4 85 F1 | 	sub	objptr, ##27180
032c8     C8 05 90 3D |  if_ae	jmp	#LR__0184
032cc     14 39 02 F6 | 	mov	local10, local02
032d0     03 38 66 F0 | 	shl	local10, #3
032d4     35 00 00 FF 
032d8     2C E4 05 F1 | 	add	objptr, ##27180
032dc     F2 38 02 F1 | 	add	local10, objptr
032e0     14 3B 02 F6 | 	mov	local11, local02
032e4     1D 41 02 F6 | 	mov	local14, local11
032e8     20 3F 02 F6 | 	mov	local13, local14
032ec     03 3E 66 F0 | 	shl	local13, #3
032f0     F2 5C 02 F6 | 	mov	local28, objptr
032f4     F2 3E 02 F1 | 	add	local13, objptr
032f8     1F 13 02 FB | 	rdlong	arg01, local13
032fc     35 00 00 FF 
03300     2C E4 85 F1 | 	sub	objptr, ##27180
03304     F8 2C B0 FD | 	call	#_isfunction
03308     FD FA E1 F8 | 	getbyte	result1, result1, #0
0330c     04 38 06 F1 | 	add	local10, #4
03310     1C FB 61 FC | 	wrlong	result1, local10
03314                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03314     14 39 02 F6 | 	mov	local10, local02
03318     03 38 66 F0 | 	shl	local10, #3
0331c     35 00 00 FF 
03320     2C E4 05 F1 | 	add	objptr, ##27180
03324     F2 38 02 F1 | 	add	local10, objptr
03328     04 38 06 F1 | 	add	local10, #4
0332c     1C 3D 02 FB | 	rdlong	local12, local10
03330     01 3C 56 F2 | 	cmps	local12, #1 wc
03334     35 00 00 FF 
03338     2C E4 85 F1 | 	sub	objptr, ##27180
0333c     54 05 90 3D |  if_ae	jmp	#LR__0184
03340     14 39 02 F6 | 	mov	local10, local02
03344     03 38 66 F0 | 	shl	local10, #3
03348     35 00 00 FF 
0334c     2C E4 05 F1 | 	add	objptr, ##27180
03350     F2 38 02 F1 | 	add	local10, objptr
03354     14 3B 02 F6 | 	mov	local11, local02
03358     1D 41 02 F6 | 	mov	local14, local11
0335c     03 40 66 F0 | 	shl	local14, #3
03360     F2 3E 02 F6 | 	mov	local13, objptr
03364     F2 40 02 F1 | 	add	local14, objptr
03368     20 13 02 FB | 	rdlong	arg01, local14
0336c     35 00 00 FF 
03370     2C E4 85 F1 | 	sub	objptr, ##27180
03374     BC 15 B0 FD | 	call	#_isnotename
03378     04 38 06 F1 | 	add	local10, #4
0337c     1C FB 61 FC | 	wrlong	result1, local10
03380                 | ' lparts(i).token=isnotename(lparts(i).part$) 
03380                 | ' if lparts(i).token>0 then 
03380     14 39 02 F6 | 	mov	local10, local02
03384     03 38 66 F0 | 	shl	local10, #3
03388     35 00 00 FF 
0338c     2C E4 05 F1 | 	add	objptr, ##27180
03390     F2 38 02 F1 | 	add	local10, objptr
03394     04 38 06 F1 | 	add	local10, #4
03398     1C 31 02 FB | 	rdlong	local06, local10
0339c     01 30 56 F2 | 	cmps	local06, #1 wc
033a0     35 00 00 FF 
033a4     2C E4 85 F1 | 	sub	objptr, ##27180
033a8     8C 00 90 CD |  if_b	jmp	#LR__0174
033ac     14 2F 02 F6 | 	mov	local05, local02
033b0     03 2E 66 F0 | 	shl	local05, #3
033b4     35 00 00 FF 
033b8     2C E4 05 F1 | 	add	objptr, ##27180
033bc     F2 2E 02 F1 | 	add	local05, objptr
033c0     04 2E 06 F1 | 	add	local05, #4
033c4     17 3D 02 FB | 	rdlong	local12, local05
033c8     1E 13 02 F6 | 	mov	arg01, local12
033cc     35 00 00 FF 
033d0     2C E4 85 F1 | 	sub	objptr, ##27180
033d4     50 3E B0 FD | 	call	#_getnoteval
033d8     FD 7A 02 F6 | 	mov	local43, result1
033dc     14 39 02 F6 | 	mov	local10, local02
033e0     03 38 66 F0 | 	shl	local10, #3
033e4     35 00 00 FF 
033e8     2C E4 05 F1 | 	add	objptr, ##27180
033ec     F2 38 02 F1 | 	add	local10, objptr
033f0     3D 13 02 F6 | 	mov	arg01, local43
033f4     35 00 00 FF 
033f8     2C E4 85 F1 | 	sub	objptr, ##27180
033fc     8C 6F B2 FD | 	call	#__system__str_S
03400     1C FB 61 FC | 	wrlong	result1, local10
03404     14 2D 02 F6 | 	mov	local04, local02
03408     16 2B 02 F6 | 	mov	local03, local04
0340c     15 39 02 F6 | 	mov	local10, local03
03410     03 38 66 F0 | 	shl	local10, #3
03414     35 00 00 FF 
03418     2C E4 05 F1 | 	add	objptr, ##27180
0341c     F2 38 02 F1 | 	add	local10, objptr
03420     04 38 06 F1 | 	add	local10, #4
03424     01 00 80 FF 
03428     1C 05 68 FC | 	wrlong	##514, local10
0342c     35 00 00 FF 
03430     2C E4 85 F1 | 	sub	objptr, ##27180
03434     5C 04 90 FD | 	jmp	#LR__0184
03438                 | LR__0174
03438     14 39 02 F6 | 	mov	local10, local02
0343c     03 38 66 F0 | 	shl	local10, #3
03440     35 00 00 FF 
03444     2C E4 05 F1 | 	add	objptr, ##27180
03448     F2 38 02 F1 | 	add	local10, objptr
0344c     14 41 02 F6 | 	mov	local14, local02
03450     03 40 66 F0 | 	shl	local14, #3
03454     F2 40 02 F1 | 	add	local14, objptr
03458     20 13 02 FB | 	rdlong	arg01, local14
0345c     35 00 00 FF 
03460     2C E4 85 F1 | 	sub	objptr, ##27180
03464     64 13 B0 FD | 	call	#_ischannel
03468     04 38 06 F1 | 	add	local10, #4
0346c     1C FB 61 FC | 	wrlong	result1, local10
03470                 | ' 
03470                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
03470                 | ' 
03470                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
03470     14 39 02 F6 | 	mov	local10, local02
03474     03 38 66 F0 | 	shl	local10, #3
03478     35 00 00 FF 
0347c     2C E4 05 F1 | 	add	objptr, ##27180
03480     F2 38 02 F1 | 	add	local10, objptr
03484     04 38 06 F1 | 	add	local10, #4
03488     1C 31 02 FB | 	rdlong	local06, local10
0348c     01 30 56 F2 | 	cmps	local06, #1 wc
03490     35 00 00 FF 
03494     2C E4 85 F1 | 	sub	objptr, ##27180
03498     74 00 90 CD |  if_b	jmp	#LR__0175
0349c     14 39 02 F6 | 	mov	local10, local02
034a0     03 38 66 F0 | 	shl	local10, #3
034a4     35 00 00 FF 
034a8     2C E4 05 F1 | 	add	objptr, ##27180
034ac     F2 38 02 F1 | 	add	local10, objptr
034b0     14 3B 02 F6 | 	mov	local11, local02
034b4     1D 41 02 F6 | 	mov	local14, local11
034b8     03 40 66 F0 | 	shl	local14, #3
034bc     F2 3E 02 F6 | 	mov	local13, objptr
034c0     F2 40 02 F1 | 	add	local14, objptr
034c4     20 13 02 FB | 	rdlong	arg01, local14
034c8     01 3C 06 F6 | 	mov	local12, #1
034cc     01 14 06 F6 | 	mov	arg02, #1
034d0     35 00 00 FF 
034d4     2C E4 85 F1 | 	sub	objptr, ##27180
034d8     40 6D B2 FD | 	call	#__system__Right_S
034dc     1C FB 61 FC | 	wrlong	result1, local10
034e0     14 2D 02 F6 | 	mov	local04, local02
034e4     16 2B 02 F6 | 	mov	local03, local04
034e8     15 39 02 F6 | 	mov	local10, local03
034ec     03 38 66 F0 | 	shl	local10, #3
034f0     35 00 00 FF 
034f4     2C E4 05 F1 | 	add	objptr, ##27180
034f8     F2 38 02 F1 | 	add	local10, objptr
034fc     04 38 06 F1 | 	add	local10, #4
03500     1C 59 68 FC | 	wrlong	#44, local10
03504     35 00 00 FF 
03508     2C E4 85 F1 | 	sub	objptr, ##27180
0350c     84 03 90 FD | 	jmp	#LR__0184
03510                 | LR__0175
03510     14 39 02 F6 | 	mov	local10, local02
03514     03 38 66 F0 | 	shl	local10, #3
03518     35 00 00 FF 
0351c     2C E4 05 F1 | 	add	objptr, ##27180
03520     F2 38 02 F1 | 	add	local10, objptr
03524     14 3B 02 F6 | 	mov	local11, local02
03528     1D 41 02 F6 | 	mov	local14, local11
0352c     03 40 66 F0 | 	shl	local14, #3
03530     F2 3E 02 F6 | 	mov	local13, objptr
03534     F2 40 02 F1 | 	add	local14, objptr
03538     20 13 02 FB | 	rdlong	arg01, local14
0353c     35 00 00 FF 
03540     2C E4 85 F1 | 	sub	objptr, ##27180
03544     6C 13 B0 FD | 	call	#_isconstant
03548     04 38 06 F1 | 	add	local10, #4
0354c     1C FB 61 FC | 	wrlong	result1, local10
03550                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
03550     14 39 02 F6 | 	mov	local10, local02
03554     03 38 66 F0 | 	shl	local10, #3
03558     35 00 00 FF 
0355c     2C E4 05 F1 | 	add	objptr, ##27180
03560     F2 38 02 F1 | 	add	local10, objptr
03564     04 38 06 F1 | 	add	local10, #4
03568     1C 3D 02 FB | 	rdlong	local12, local10
0356c     01 3C 56 F2 | 	cmps	local12, #1 wc
03570     35 00 00 FF 
03574     2C E4 85 F1 | 	sub	objptr, ##27180
03578     94 00 90 CD |  if_b	jmp	#LR__0176
0357c     14 39 02 F6 | 	mov	local10, local02
03580     03 38 66 F0 | 	shl	local10, #3
03584     35 00 00 FF 
03588     2C E4 05 F1 | 	add	objptr, ##27180
0358c     F2 38 02 F1 | 	add	local10, objptr
03590     14 3D 02 F6 | 	mov	local12, local02
03594     1E 3B 02 F6 | 	mov	local11, local12
03598     1D 41 02 F6 | 	mov	local14, local11
0359c     03 40 66 F0 | 	shl	local14, #3
035a0     F2 3E 02 F6 | 	mov	local13, objptr
035a4     F2 40 02 F1 | 	add	local14, objptr
035a8     04 40 06 F1 | 	add	local14, #4
035ac     20 13 02 FB | 	rdlong	arg01, local14
035b0     04 40 86 F1 | 	sub	local14, #4
035b4     35 00 00 FF 
035b8     2C E4 85 F1 | 	sub	objptr, ##27180
035bc     09 13 52 F6 | 	abs	arg01, arg01 wc
035c0     1F 7C C6 C9 |  if_b	decod	local44, #31
035c4     00 7C 06 36 |  if_ae	mov	local44, #0
035c8     C0 75 B2 FD | 	call	#__system___float_fromuns
035cc     3E FB 61 F5 | 	xor	result1, local44
035d0     FD 12 02 F6 | 	mov	arg01, result1
035d4     B4 6D B2 FD | 	call	#__system__str_S
035d8     1C FB 61 FC | 	wrlong	result1, local10
035dc     14 2D 02 F6 | 	mov	local04, local02
035e0     16 2B 02 F6 | 	mov	local03, local04
035e4     15 39 02 F6 | 	mov	local10, local03
035e8     03 38 66 F0 | 	shl	local10, #3
035ec     35 00 00 FF 
035f0     2C E4 05 F1 | 	add	objptr, ##27180
035f4     F2 38 02 F1 | 	add	local10, objptr
035f8     04 38 06 F1 | 	add	local10, #4
035fc     01 00 80 FF 
03600     1C 03 68 FC | 	wrlong	##513, local10
03604     35 00 00 FF 
03608     2C E4 85 F1 | 	sub	objptr, ##27180
0360c     84 02 90 FD | 	jmp	#LR__0184
03610                 | LR__0176
03610     14 2F 02 F6 | 	mov	local05, local02
03614     03 2E 66 F0 | 	shl	local05, #3
03618     35 00 00 FF 
0361c     2C E4 05 F1 | 	add	objptr, ##27180
03620     F2 2E 02 F1 | 	add	local05, objptr
03624     17 13 02 FB | 	rdlong	arg01, local05
03628     35 00 00 FF 
0362c     2C E4 85 F1 | 	sub	objptr, ##27180
03630     40 34 B0 FD | 	call	#_isnum
03634     FD 7E 02 F6 | 	mov	local45, result1
03638     14 2F 02 F6 | 	mov	local05, local02
0363c     03 2E 66 F0 | 	shl	local05, #3
03640     35 00 00 FF 
03644     2C E4 05 F1 | 	add	objptr, ##27180
03648     F2 2E 02 F1 | 	add	local05, objptr
0364c     17 13 02 FB | 	rdlong	arg01, local05
03650     35 00 00 FF 
03654     2C E4 85 F1 | 	sub	objptr, ##27180
03658     04 38 B0 FD | 	call	#_isint
0365c     FD 80 02 F6 | 	mov	local46, result1
03660     14 2F 02 F6 | 	mov	local05, local02
03664     03 2E 66 F0 | 	shl	local05, #3
03668     35 00 00 FF 
0366c     2C E4 05 F1 | 	add	objptr, ##27180
03670     F2 2E 02 F1 | 	add	local05, objptr
03674     17 13 02 FB | 	rdlong	arg01, local05
03678     35 00 00 FF 
0367c     2C E4 85 F1 | 	sub	objptr, ##27180
03680     80 3A B0 FD | 	call	#_isdec
03684     FD 82 02 F6 | 	mov	local47, result1
03688                 | ' 
03688                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
03688                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
03688     00 7E 0E F2 | 	cmp	local45, #0 wz
0368c     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
03690     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
03694     34 00 90 AD |  if_e	jmp	#LR__0177
03698     14 2D 02 F6 | 	mov	local04, local02
0369c     16 2B 02 F6 | 	mov	local03, local04
036a0     15 39 02 F6 | 	mov	local10, local03
036a4     03 38 66 F0 | 	shl	local10, #3
036a8     35 00 00 FF 
036ac     2C E4 05 F1 | 	add	objptr, ##27180
036b0     F2 38 02 F1 | 	add	local10, objptr
036b4     04 38 06 F1 | 	add	local10, #4
036b8     01 00 80 FF 
036bc     1C 01 68 FC | 	wrlong	##512, local10
036c0     35 00 00 FF 
036c4     2C E4 85 F1 | 	sub	objptr, ##27180
036c8     C8 01 90 FD | 	jmp	#LR__0184
036cc                 | LR__0177
036cc                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
036cc     00 7E 0E F2 | 	cmp	local45, #0 wz
036d0     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
036d4     41 2D 22 56 |  if_ne	not	local04, local47
036d8     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
036dc     34 00 90 AD |  if_e	jmp	#LR__0178
036e0     14 2D 02 F6 | 	mov	local04, local02
036e4     16 2B 02 F6 | 	mov	local03, local04
036e8     15 39 02 F6 | 	mov	local10, local03
036ec     03 38 66 F0 | 	shl	local10, #3
036f0     35 00 00 FF 
036f4     2C E4 05 F1 | 	add	objptr, ##27180
036f8     F2 38 02 F1 | 	add	local10, objptr
036fc     04 38 06 F1 | 	add	local10, #4
03700     01 00 80 FF 
03704     1C 03 68 FC | 	wrlong	##513, local10
03708     35 00 00 FF 
0370c     2C E4 85 F1 | 	sub	objptr, ##27180
03710     80 01 90 FD | 	jmp	#LR__0184
03714                 | LR__0178
03714                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03714     00 7E 0E F2 | 	cmp	local45, #0 wz
03718     40 2D 22 56 |  if_ne	not	local04, local46
0371c     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03720     41 2B 22 56 |  if_ne	not	local03, local47
03724     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
03728     34 00 90 AD |  if_e	jmp	#LR__0179
0372c     14 2D 02 F6 | 	mov	local04, local02
03730     16 2B 02 F6 | 	mov	local03, local04
03734     15 39 02 F6 | 	mov	local10, local03
03738     03 38 66 F0 | 	shl	local10, #3
0373c     35 00 00 FF 
03740     2C E4 05 F1 | 	add	objptr, ##27180
03744     F2 38 02 F1 | 	add	local10, objptr
03748     04 38 06 F1 | 	add	local10, #4
0374c     01 00 80 FF 
03750     1C 05 68 FC | 	wrlong	##514, local10
03754     35 00 00 FF 
03758     2C E4 85 F1 | 	sub	objptr, ##27180
0375c     34 01 90 FD | 	jmp	#LR__0184
03760                 | LR__0179
03760                 | ' 
03760                 | ' if isstring(lparts(i).part$) then 
03760     14 2F 02 F6 | 	mov	local05, local02
03764     03 2E 66 F0 | 	shl	local05, #3
03768     35 00 00 FF 
0376c     2C E4 05 F1 | 	add	objptr, ##27180
03770     F2 2E 02 F1 | 	add	local05, objptr
03774     17 13 02 FB | 	rdlong	arg01, local05
03778     35 00 00 FF 
0377c     2C E4 85 F1 | 	sub	objptr, ##27180
03780     40 3A B0 FD | 	call	#_isstring
03784     00 FA 0D F2 | 	cmp	result1, #0 wz
03788     A8 00 90 AD |  if_e	jmp	#LR__0182
0378c     14 39 02 F6 | 	mov	local10, local02
03790     03 38 66 F0 | 	shl	local10, #3
03794     35 00 00 FF 
03798     2C E4 05 F1 | 	add	objptr, ##27180
0379c     F2 38 02 F1 | 	add	local10, objptr
037a0     04 38 06 F1 | 	add	local10, #4
037a4     01 00 80 FF 
037a8     1C 07 68 FC | 	wrlong	##515, local10
037ac     14 2D 02 F6 | 	mov	local04, local02
037b0     16 2B 02 F6 | 	mov	local03, local04
037b4     15 39 02 F6 | 	mov	local10, local03
037b8     03 38 66 F0 | 	shl	local10, #3
037bc     F2 38 02 F1 | 	add	local10, objptr
037c0     14 41 02 F6 | 	mov	local14, local02
037c4     03 40 66 F0 | 	shl	local14, #3
037c8     F2 40 02 F1 | 	add	local14, objptr
037cc     20 31 02 FB | 	rdlong	local06, local14
037d0     02 3C 06 F6 | 	mov	local12, #2
037d4     14 51 02 F6 | 	mov	local22, local02
037d8     28 53 02 F6 | 	mov	local23, local22
037dc     03 52 66 F0 | 	shl	local23, #3
037e0     F2 54 02 F6 | 	mov	local24, objptr
037e4     F2 52 02 F1 | 	add	local23, objptr
037e8     29 13 02 FB | 	rdlong	arg01, local23
037ec     35 00 00 FF 
037f0     2C E4 85 F1 | 	sub	objptr, ##27180
037f4     09 33 02 F6 | 	mov	local07, arg01
037f8     97 06 48 FB | 	callpa	#(@LR__0181-@LR__0180)>>2,fcache_load_ptr_
037fc                 | LR__0180
037fc     19 FB C9 FA | 	rdbyte	result1, local07 wz
03800     01 32 06 51 |  if_ne	add	local07, #1
03804     F4 FF 9F 5D |  if_ne	jmp	#LR__0180
03808                 | LR__0181
03808     09 33 82 F1 | 	sub	local07, arg01
0380c     19 3F 02 F6 | 	mov	local13, local07
03810     1F 41 02 F6 | 	mov	local14, local13
03814     02 40 86 F1 | 	sub	local14, #2
03818     20 3B 02 F6 | 	mov	local11, local14
0381c     18 13 02 F6 | 	mov	arg01, local06
03820     1E 15 02 F6 | 	mov	arg02, local12
03824     1D 17 02 F6 | 	mov	arg03, local11
03828     80 6A B2 FD | 	call	#__system__Mid_S
0382c     1C FB 61 FC | 	wrlong	result1, local10
03830     60 00 90 FD | 	jmp	#LR__0184
03834                 | LR__0182
03834                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03834     14 2B 02 F6 | 	mov	local03, local02
03838     15 2F 02 F6 | 	mov	local05, local03
0383c     03 2E 66 F0 | 	shl	local05, #3
03840     35 00 00 FF 
03844     2C E4 05 F1 | 	add	objptr, ##27180
03848     F2 2E 02 F1 | 	add	local05, objptr
0384c     17 13 02 FB | 	rdlong	arg01, local05
03850     35 00 00 FF 
03854     2C E4 85 F1 | 	sub	objptr, ##27180
03858     A4 2F B0 FD | 	call	#_isname
0385c     FD 2C 0A F6 | 	mov	local04, result1 wz
03860     30 00 90 AD |  if_e	jmp	#LR__0183
03864     14 2D 02 F6 | 	mov	local04, local02
03868     16 2B 02 F6 | 	mov	local03, local04
0386c     15 39 02 F6 | 	mov	local10, local03
03870     03 38 66 F0 | 	shl	local10, #3
03874     35 00 00 FF 
03878     2C E4 05 F1 | 	add	objptr, ##27180
0387c     F2 38 02 F1 | 	add	local10, objptr
03880     04 38 06 F1 | 	add	local10, #4
03884     01 00 80 FF 
03888     1C 09 68 FC | 	wrlong	##516, local10
0388c     35 00 00 FF 
03890     2C E4 85 F1 | 	sub	objptr, ##27180
03894                 | LR__0183
03894                 | LR__0184
03894     01 28 06 F1 | 	add	local02, #1
03898     54 F8 9F FD | 	jmp	#LR__0173
0389c                 | LR__0185
0389c     23 39 02 F6 | 	mov	local10, local17
038a0     03 38 66 F0 | 	shl	local10, #3
038a4     35 00 00 FF 
038a8     2C E4 05 F1 | 	add	objptr, ##27180
038ac     F2 38 02 F1 | 	add	local10, objptr
038b0     04 38 06 F1 | 	add	local10, #4
038b4     1C FD 6B FC | 	wrlong	#510, local10
038b8     23 39 02 F6 | 	mov	local10, local17
038bc     03 38 66 F0 | 	shl	local10, #3
038c0     F2 38 02 F1 | 	add	local10, objptr
038c4     BE 01 00 FF 
038c8     6B 31 06 F6 | 	mov	local06, ##@LR__5599
038cc     1C 31 62 FC | 	wrlong	local06, local10
038d0     10 00 00 FF 
038d4     54 E4 05 F1 | 	add	objptr, ##8276
038d8     F2 46 62 FC | 	wrlong	local17, objptr
038dc     45 00 00 FF 
038e0     80 E4 85 F1 | 	sub	objptr, ##35456
038e4                 | ' 
038e4                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
038e4                 | ' 
038e4                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
038e4                 | '  
038e4                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
038e4     BE 01 00 FF 
038e8     6C 15 06 F6 | 	mov	arg02, ##@LR__5600
038ec     3B 13 02 F6 | 	mov	arg01, local41
038f0     48 48 B2 FD | 	call	#__system___string_cmp
038f4     00 FA 0D F2 | 	cmp	result1, #0 wz
038f8     F0 00 90 AD |  if_e	jmp	#LR__0186
038fc     BE 01 00 FF 
03900     71 15 06 F6 | 	mov	arg02, ##@LR__5601
03904     3B 13 02 F6 | 	mov	arg01, local41
03908     30 48 B2 FD | 	call	#__system___string_cmp
0390c     00 FA 0D F2 | 	cmp	result1, #0 wz
03910     D8 00 90 AD |  if_e	jmp	#LR__0186
03914     BE 01 00 FF 
03918     76 31 06 F6 | 	mov	local06, ##@LR__5602
0391c     3B 13 02 F6 | 	mov	arg01, local41
03920     18 15 02 F6 | 	mov	arg02, local06
03924     14 48 B2 FD | 	call	#__system___string_cmp
03928     00 FA 0D F2 | 	cmp	result1, #0 wz
0392c     BC 00 90 AD |  if_e	jmp	#LR__0186
03930     BE 01 00 FF 
03934     7B 3D 06 F6 | 	mov	local12, ##@LR__5603
03938     1E 31 02 F6 | 	mov	local06, local12
0393c     3B 13 02 F6 | 	mov	arg01, local41
03940     18 15 02 F6 | 	mov	arg02, local06
03944     F4 47 B2 FD | 	call	#__system___string_cmp
03948     00 FA 0D F2 | 	cmp	result1, #0 wz
0394c     9C 00 90 AD |  if_e	jmp	#LR__0186
03950     BE 01 00 FF 
03954     7F 3B 06 F6 | 	mov	local11, ##@LR__5604
03958     1D 3D 02 F6 | 	mov	local12, local11
0395c     3B 13 02 F6 | 	mov	arg01, local41
03960     1E 15 02 F6 | 	mov	arg02, local12
03964     D4 47 B2 FD | 	call	#__system___string_cmp
03968     FD 30 0A F6 | 	mov	local06, result1 wz
0396c     7C 00 90 AD |  if_e	jmp	#LR__0186
03970     BE 01 00 FF 
03974     83 41 06 F6 | 	mov	local14, ##@LR__5605
03978     20 3B 02 F6 | 	mov	local11, local14
0397c     3B 13 02 F6 | 	mov	arg01, local41
03980     1D 15 02 F6 | 	mov	arg02, local11
03984     B4 47 B2 FD | 	call	#__system___string_cmp
03988     FD 3C 0A F6 | 	mov	local12, result1 wz
0398c     5C 00 90 AD |  if_e	jmp	#LR__0186
03990     BE 01 00 FF 
03994     86 3F 06 F6 | 	mov	local13, ##@LR__5606
03998     1F 41 02 F6 | 	mov	local14, local13
0399c     3B 13 02 F6 | 	mov	arg01, local41
039a0     20 15 02 F6 | 	mov	arg02, local14
039a4     94 47 B2 FD | 	call	#__system___string_cmp
039a8     FD 3A 0A F6 | 	mov	local11, result1 wz
039ac     3C 00 90 AD |  if_e	jmp	#LR__0186
039b0     BE 01 00 FF 
039b4     8A 3F 06 F6 | 	mov	local13, ##@LR__5607
039b8     3B 13 02 F6 | 	mov	arg01, local41
039bc     1F 15 02 F6 | 	mov	arg02, local13
039c0     78 47 B2 FD | 	call	#__system___string_cmp
039c4     FD 40 0A F6 | 	mov	local14, result1 wz
039c8     20 00 90 AD |  if_e	jmp	#LR__0186
039cc     BE 01 00 FF 
039d0     90 51 06 F6 | 	mov	local22, ##@LR__5608
039d4     28 5D 02 F6 | 	mov	local28, local22
039d8     3B 13 02 F6 | 	mov	arg01, local41
039dc     2E 15 02 F6 | 	mov	arg02, local28
039e0     58 47 B2 FD | 	call	#__system___string_cmp
039e4     FD 3E 0A F6 | 	mov	local13, result1 wz
039e8     CC 00 90 5D |  if_ne	jmp	#LR__0187
039ec                 | LR__0186
039ec     37 5D 02 F6 | 	mov	local28, local37
039f0     01 5C 06 F1 | 	add	local28, #1
039f4     2E 51 02 F6 | 	mov	local22, local28
039f8     28 53 02 F6 | 	mov	local23, local22
039fc     03 52 66 F0 | 	shl	local23, #3
03a00     35 00 00 FF 
03a04     2C E4 05 F1 | 	add	objptr, ##27180
03a08     F2 54 02 F6 | 	mov	local24, objptr
03a0c     F2 52 02 F1 | 	add	local23, objptr
03a10     04 52 06 F1 | 	add	local23, #4
03a14     29 61 02 FB | 	rdlong	local30, local23
03a18     04 52 86 F1 | 	sub	local23, #4
03a1c     30 5F 02 F6 | 	mov	local29, local30
03a20     01 00 00 FF 
03a24     04 5E 0E F2 | 	cmp	local29, ##516 wz
03a28     35 00 00 FF 
03a2c     2C E4 85 F1 | 	sub	objptr, ##27180
03a30     84 00 90 5D |  if_ne	jmp	#LR__0187
03a34     37 85 02 F6 | 	mov	local48, local37
03a38     01 84 06 F1 | 	add	local48, #1
03a3c     03 84 66 F0 | 	shl	local48, #3
03a40     35 00 00 FF 
03a44     2C E4 05 F1 | 	add	objptr, ##27180
03a48     F2 86 02 F6 | 	mov	local49, objptr
03a4c     F2 84 02 F1 | 	add	local48, objptr
03a50     42 13 02 FB | 	rdlong	arg01, local48
03a54     01 14 06 F6 | 	mov	arg02, #1
03a58     35 00 00 FF 
03a5c     2C E4 85 F1 | 	sub	objptr, ##27180
03a60     B8 67 B2 FD | 	call	#__system__Right_S
03a64     FD 12 02 F6 | 	mov	arg01, result1
03a68     BE 01 00 FF 
03a6c     93 89 06 F6 | 	mov	local50, ##@LR__5609
03a70     44 8B 02 F6 | 	mov	local51, local50
03a74     45 15 02 F6 | 	mov	arg02, local51
03a78     C0 46 B2 FD | 	call	#__system___string_cmp
03a7c     FD 62 0A F6 | 	mov	local31, result1 wz
03a80     34 00 90 AD |  if_e	jmp	#LR__0187
03a84     37 39 02 F6 | 	mov	local10, local37
03a88     01 38 06 F1 | 	add	local10, #1
03a8c     03 38 66 F0 | 	shl	local10, #3
03a90     35 00 00 FF 
03a94     2C E4 05 F1 | 	add	objptr, ##27180
03a98     F2 38 02 F1 | 	add	local10, objptr
03a9c     01 00 00 FF 
03aa0     03 30 06 F6 | 	mov	local06, ##515
03aa4     04 38 06 F1 | 	add	local10, #4
03aa8     01 00 80 FF 
03aac     1C 07 68 FC | 	wrlong	##515, local10
03ab0     35 00 00 FF 
03ab4     2C E4 85 F1 | 	sub	objptr, ##27180
03ab8                 | LR__0187
03ab8                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03ab8     BE 01 00 FF 
03abc     95 15 06 F6 | 	mov	arg02, ##@LR__5610
03ac0     3B 13 02 F6 | 	mov	arg01, local41
03ac4     74 46 B2 FD | 	call	#__system___string_cmp
03ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
03acc     1C 00 90 AD |  if_e	jmp	#LR__0188
03ad0     BE 01 00 FF 
03ad4     9C 2F 06 F6 | 	mov	local05, ##@LR__5611
03ad8     3B 13 02 F6 | 	mov	arg01, local41
03adc     17 15 02 F6 | 	mov	arg02, local05
03ae0     58 46 B2 FD | 	call	#__system___string_cmp
03ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae8     CC 00 90 5D |  if_ne	jmp	#LR__0189
03aec                 | LR__0188
03aec     37 2F 02 F6 | 	mov	local05, local37
03af0     01 2E 06 F1 | 	add	local05, #1
03af4     17 31 02 F6 | 	mov	local06, local05
03af8     03 30 66 F0 | 	shl	local06, #3
03afc     35 00 00 FF 
03b00     2C E4 05 F1 | 	add	objptr, ##27180
03b04     F2 3C 02 F6 | 	mov	local12, objptr
03b08     F2 30 02 F1 | 	add	local06, objptr
03b0c     04 30 06 F1 | 	add	local06, #4
03b10     18 41 02 FB | 	rdlong	local14, local06
03b14     04 30 86 F1 | 	sub	local06, #4
03b18     20 3B 02 F6 | 	mov	local11, local14
03b1c     01 00 00 FF 
03b20     04 3A 0E F2 | 	cmp	local11, ##516 wz
03b24     35 00 00 FF 
03b28     2C E4 85 F1 | 	sub	objptr, ##27180
03b2c     88 00 90 5D |  if_ne	jmp	#LR__0189
03b30     37 53 02 F6 | 	mov	local23, local37
03b34     01 52 06 F1 | 	add	local23, #1
03b38     03 52 66 F0 | 	shl	local23, #3
03b3c     35 00 00 FF 
03b40     2C E4 05 F1 | 	add	objptr, ##27180
03b44     F2 54 02 F6 | 	mov	local24, objptr
03b48     F2 52 02 F1 | 	add	local23, objptr
03b4c     29 13 02 FB | 	rdlong	arg01, local23
03b50     01 14 06 F6 | 	mov	arg02, #1
03b54     35 00 00 FF 
03b58     2C E4 85 F1 | 	sub	objptr, ##27180
03b5c     BC 66 B2 FD | 	call	#__system__Right_S
03b60     FD 12 02 F6 | 	mov	arg01, result1
03b64     BE 01 00 FF 
03b68     A2 51 06 F6 | 	mov	local22, ##@LR__5612
03b6c     28 5D 02 F6 | 	mov	local28, local22
03b70     2E 15 02 F6 | 	mov	arg02, local28
03b74     C4 45 B2 FD | 	call	#__system___string_cmp
03b78     FD 3E 0A F6 | 	mov	local13, result1 wz
03b7c     38 00 90 AD |  if_e	jmp	#LR__0189
03b80     37 39 02 F6 | 	mov	local10, local37
03b84     01 38 06 F1 | 	add	local10, #1
03b88     03 38 66 F0 | 	shl	local10, #3
03b8c     35 00 00 FF 
03b90     2C E4 05 F1 | 	add	objptr, ##27180
03b94     F2 2E 02 F6 | 	mov	local05, objptr
03b98     F2 38 02 F1 | 	add	local10, objptr
03b9c     01 00 00 FF 
03ba0     03 30 06 F6 | 	mov	local06, ##515
03ba4     04 38 06 F1 | 	add	local10, #4
03ba8     01 00 80 FF 
03bac     1C 07 68 FC | 	wrlong	##515, local10
03bb0     35 00 00 FF 
03bb4     2C E4 85 F1 | 	sub	objptr, ##27180
03bb8                 | LR__0189
03bb8                 | ' if (lp$="copy") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03bb8     BE 01 00 FF 
03bbc     A4 15 06 F6 | 	mov	arg02, ##@LR__5613
03bc0     3B 13 02 F6 | 	mov	arg01, local41
03bc4     74 45 B2 FD | 	call	#__system___string_cmp
03bc8     00 FA 0D F2 | 	cmp	result1, #0 wz
03bcc     C8 00 90 5D |  if_ne	jmp	#LR__0190
03bd0     37 2F 02 F6 | 	mov	local05, local37
03bd4     01 2E 06 F1 | 	add	local05, #1
03bd8     03 2E 66 F0 | 	shl	local05, #3
03bdc     35 00 00 FF 
03be0     2C E4 05 F1 | 	add	objptr, ##27180
03be4     F2 30 02 F6 | 	mov	local06, objptr
03be8     F2 2E 02 F1 | 	add	local05, objptr
03bec     04 2E 06 F1 | 	add	local05, #4
03bf0     17 3B 02 FB | 	rdlong	local11, local05
03bf4     04 2E 86 F1 | 	sub	local05, #4
03bf8     1D 3D 02 F6 | 	mov	local12, local11
03bfc     01 00 00 FF 
03c00     04 3C 0E F2 | 	cmp	local12, ##516 wz
03c04     35 00 00 FF 
03c08     2C E4 85 F1 | 	sub	objptr, ##27180
03c0c     88 00 90 5D |  if_ne	jmp	#LR__0190
03c10     37 51 02 F6 | 	mov	local22, local37
03c14     01 50 06 F1 | 	add	local22, #1
03c18     03 50 66 F0 | 	shl	local22, #3
03c1c     35 00 00 FF 
03c20     2C E4 05 F1 | 	add	objptr, ##27180
03c24     F2 52 02 F6 | 	mov	local23, objptr
03c28     F2 50 02 F1 | 	add	local22, objptr
03c2c     28 13 02 FB | 	rdlong	arg01, local22
03c30     01 14 06 F6 | 	mov	arg02, #1
03c34     35 00 00 FF 
03c38     2C E4 85 F1 | 	sub	objptr, ##27180
03c3c     DC 65 B2 FD | 	call	#__system__Right_S
03c40     FD 12 02 F6 | 	mov	arg01, result1
03c44     BE 01 00 FF 
03c48     A9 5D 06 F6 | 	mov	local28, ##@LR__5614
03c4c     2E 3F 02 F6 | 	mov	local13, local28
03c50     1F 15 02 F6 | 	mov	arg02, local13
03c54     E4 44 B2 FD | 	call	#__system___string_cmp
03c58     FD 40 0A F6 | 	mov	local14, result1 wz
03c5c     38 00 90 AD |  if_e	jmp	#LR__0190
03c60     37 39 02 F6 | 	mov	local10, local37
03c64     01 38 06 F1 | 	add	local10, #1
03c68     03 38 66 F0 | 	shl	local10, #3
03c6c     35 00 00 FF 
03c70     2C E4 05 F1 | 	add	objptr, ##27180
03c74     F2 2E 02 F6 | 	mov	local05, objptr
03c78     F2 38 02 F1 | 	add	local10, objptr
03c7c     01 00 00 FF 
03c80     03 30 06 F6 | 	mov	local06, ##515
03c84     04 38 06 F1 | 	add	local10, #4
03c88     01 00 80 FF 
03c8c     1C 07 68 FC | 	wrlong	##515, local10
03c90     35 00 00 FF 
03c94     2C E4 85 F1 | 	sub	objptr, ##27180
03c98                 | LR__0190
03c98                 | ' if (lp$="copy") andalso lparts(addptr+3).token=token_name andalso right$(lparts(addptr+3).part$,1)<>"$" then lparts(addptr+3).token=token_string
03c98     BE 01 00 FF 
03c9c     AB 15 06 F6 | 	mov	arg02, ##@LR__5615
03ca0     3B 13 02 F6 | 	mov	arg01, local41
03ca4     94 44 B2 FD | 	call	#__system___string_cmp
03ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
03cac     C8 00 90 5D |  if_ne	jmp	#LR__0191
03cb0     37 2F 02 F6 | 	mov	local05, local37
03cb4     03 2E 06 F1 | 	add	local05, #3
03cb8     03 2E 66 F0 | 	shl	local05, #3
03cbc     35 00 00 FF 
03cc0     2C E4 05 F1 | 	add	objptr, ##27180
03cc4     F2 30 02 F6 | 	mov	local06, objptr
03cc8     F2 2E 02 F1 | 	add	local05, objptr
03ccc     04 2E 06 F1 | 	add	local05, #4
03cd0     17 3B 02 FB | 	rdlong	local11, local05
03cd4     04 2E 86 F1 | 	sub	local05, #4
03cd8     1D 3D 02 F6 | 	mov	local12, local11
03cdc     01 00 00 FF 
03ce0     04 3C 0E F2 | 	cmp	local12, ##516 wz
03ce4     35 00 00 FF 
03ce8     2C E4 85 F1 | 	sub	objptr, ##27180
03cec     88 00 90 5D |  if_ne	jmp	#LR__0191
03cf0     37 51 02 F6 | 	mov	local22, local37
03cf4     03 50 06 F1 | 	add	local22, #3
03cf8     03 50 66 F0 | 	shl	local22, #3
03cfc     35 00 00 FF 
03d00     2C E4 05 F1 | 	add	objptr, ##27180
03d04     F2 52 02 F6 | 	mov	local23, objptr
03d08     F2 50 02 F1 | 	add	local22, objptr
03d0c     28 13 02 FB | 	rdlong	arg01, local22
03d10     01 14 06 F6 | 	mov	arg02, #1
03d14     35 00 00 FF 
03d18     2C E4 85 F1 | 	sub	objptr, ##27180
03d1c     FC 64 B2 FD | 	call	#__system__Right_S
03d20     FD 12 02 F6 | 	mov	arg01, result1
03d24     BE 01 00 FF 
03d28     B0 5D 06 F6 | 	mov	local28, ##@LR__5616
03d2c     2E 3F 02 F6 | 	mov	local13, local28
03d30     1F 15 02 F6 | 	mov	arg02, local13
03d34     04 44 B2 FD | 	call	#__system___string_cmp
03d38     FD 40 0A F6 | 	mov	local14, result1 wz
03d3c     38 00 90 AD |  if_e	jmp	#LR__0191
03d40     37 39 02 F6 | 	mov	local10, local37
03d44     03 38 06 F1 | 	add	local10, #3
03d48     03 38 66 F0 | 	shl	local10, #3
03d4c     35 00 00 FF 
03d50     2C E4 05 F1 | 	add	objptr, ##27180
03d54     F2 2E 02 F6 | 	mov	local05, objptr
03d58     F2 38 02 F1 | 	add	local10, objptr
03d5c     01 00 00 FF 
03d60     03 30 06 F6 | 	mov	local06, ##515
03d64     04 38 06 F1 | 	add	local10, #4
03d68     01 00 80 FF 
03d6c     1C 07 68 FC | 	wrlong	##515, local10
03d70     35 00 00 FF 
03d74     2C E4 85 F1 | 	sub	objptr, ##27180
03d78                 | LR__0191
03d78                 | ' 
03d78                 | ' ' cd needs special treatment..
03d78                 | ' 
03d78                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
03d78     BE 01 00 FF 
03d7c     B2 15 06 F6 | 	mov	arg02, ##@LR__5617
03d80     3B 13 02 F6 | 	mov	arg01, local41
03d84     B4 43 B2 FD | 	call	#__system___string_cmp
03d88     00 FA 0D F2 | 	cmp	result1, #0 wz
03d8c     38 00 90 5D |  if_ne	jmp	#LR__0192
03d90     37 39 02 F6 | 	mov	local10, local37
03d94     01 38 06 F1 | 	add	local10, #1
03d98     03 38 66 F0 | 	shl	local10, #3
03d9c     35 00 00 FF 
03da0     2C E4 05 F1 | 	add	objptr, ##27180
03da4     F2 2E 02 F6 | 	mov	local05, objptr
03da8     F2 38 02 F1 | 	add	local10, objptr
03dac     01 00 00 FF 
03db0     03 30 06 F6 | 	mov	local06, ##515
03db4     04 38 06 F1 | 	add	local10, #4
03db8     01 00 80 FF 
03dbc     1C 07 68 FC | 	wrlong	##515, local10
03dc0     35 00 00 FF 
03dc4     2C E4 85 F1 | 	sub	objptr, ##27180
03dc8                 | LR__0192
03dc8                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
03dc8     BE 01 00 FF 
03dcc     B5 15 06 F6 | 	mov	arg02, ##@LR__5618
03dd0     3B 13 02 F6 | 	mov	arg01, local41
03dd4     64 43 B2 FD | 	call	#__system___string_cmp
03dd8     00 FA 0D F2 | 	cmp	result1, #0 wz
03ddc     A4 00 90 5D |  if_ne	jmp	#LR__0193
03de0     37 31 02 F6 | 	mov	local06, local37
03de4     01 30 06 F1 | 	add	local06, #1
03de8     03 30 66 F0 | 	shl	local06, #3
03dec     35 00 00 FF 
03df0     2C E4 05 F1 | 	add	objptr, ##27180
03df4     F2 3C 02 F6 | 	mov	local12, objptr
03df8     F2 30 02 F1 | 	add	local06, objptr
03dfc     18 13 02 FB | 	rdlong	arg01, local06
03e00     BE 01 00 FF 
03e04     B9 2F 06 F6 | 	mov	local05, ##@LR__5619
03e08     17 15 02 F6 | 	mov	arg02, local05
03e0c     35 00 00 FF 
03e10     2C E4 85 F1 | 	sub	objptr, ##27180
03e14     24 43 B2 FD | 	call	#__system___string_cmp
03e18     00 FA 0D F2 | 	cmp	result1, #0 wz
03e1c     64 00 90 5D |  if_ne	jmp	#LR__0193
03e20     37 39 02 F6 | 	mov	local10, local37
03e24     01 38 06 F1 | 	add	local10, #1
03e28     03 38 66 F0 | 	shl	local10, #3
03e2c     35 00 00 FF 
03e30     2C E4 05 F1 | 	add	objptr, ##27180
03e34     F2 38 02 F1 | 	add	local10, objptr
03e38     04 38 06 F1 | 	add	local10, #4
03e3c     01 00 80 FF 
03e40     1C 07 68 FC | 	wrlong	##515, local10
03e44     37 39 02 F6 | 	mov	local10, local37
03e48     01 38 06 F1 | 	add	local10, #1
03e4c     03 38 66 F0 | 	shl	local10, #3
03e50     F2 38 02 F1 | 	add	local10, objptr
03e54     BE 01 00 FF 
03e58     BB 31 06 F6 | 	mov	local06, ##@LR__5620
03e5c     1C 31 62 FC | 	wrlong	local06, local10
03e60     37 39 02 F6 | 	mov	local10, local37
03e64     03 38 66 F0 | 	shl	local10, #3
03e68     F2 2E 02 F6 | 	mov	local05, objptr
03e6c     F2 38 02 F1 | 	add	local10, objptr
03e70     C3 30 06 F6 | 	mov	local06, #195
03e74     04 38 06 F1 | 	add	local10, #4
03e78     1C 87 69 FC | 	wrlong	#195, local10
03e7c     35 00 00 FF 
03e80     2C E4 85 F1 | 	sub	objptr, ##27180
03e84                 | LR__0193
03e84                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03e84     BE 01 00 FF 
03e88     BE 39 06 F6 | 	mov	local10, ##@LR__5621
03e8c     3B 13 02 F6 | 	mov	arg01, local41
03e90     1C 15 02 F6 | 	mov	arg02, local10
03e94     A4 42 B2 FD | 	call	#__system___string_cmp
03e98     00 FA 0D F2 | 	cmp	result1, #0 wz
03e9c     04 01 90 5D |  if_ne	jmp	#LR__0196
03ea0     37 31 02 F6 | 	mov	local06, local37
03ea4     01 30 06 F1 | 	add	local06, #1
03ea8     03 30 66 F0 | 	shl	local06, #3
03eac     35 00 00 FF 
03eb0     2C E4 05 F1 | 	add	objptr, ##27180
03eb4     F2 3C 02 F6 | 	mov	local12, objptr
03eb8     F2 30 02 F1 | 	add	local06, objptr
03ebc     18 13 02 FB | 	rdlong	arg01, local06
03ec0     BE 01 00 FF 
03ec4     C1 2F 06 F6 | 	mov	local05, ##@LR__5622
03ec8     17 39 02 F6 | 	mov	local10, local05
03ecc     1C 15 02 F6 | 	mov	arg02, local10
03ed0     35 00 00 FF 
03ed4     2C E4 85 F1 | 	sub	objptr, ##27180
03ed8     60 42 B2 FD | 	call	#__system___string_cmp
03edc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ee0     C0 00 90 5D |  if_ne	jmp	#LR__0196
03ee4     37 39 02 F6 | 	mov	local10, local37
03ee8     01 38 06 F1 | 	add	local10, #1
03eec     03 38 66 F0 | 	shl	local10, #3
03ef0     35 00 00 FF 
03ef4     2C E4 05 F1 | 	add	objptr, ##27180
03ef8     F2 2E 02 F6 | 	mov	local05, objptr
03efc     F2 38 02 F1 | 	add	local10, objptr
03f00     01 00 00 FF 
03f04     03 30 06 F6 | 	mov	local06, ##515
03f08     04 38 06 F1 | 	add	local10, #4
03f0c     01 00 80 FF 
03f10     1C 07 68 FC | 	wrlong	##515, local10
03f14     04 38 86 F1 | 	sub	local10, #4
03f18     37 29 02 F6 | 	mov	local02, local37
03f1c     02 28 06 F1 | 	add	local02, #2
03f20     23 8D 02 F6 | 	mov	local52, local17
03f24     01 8C 06 F1 | 	add	local52, #1
03f28     35 00 00 FF 
03f2c     2C E4 85 F1 | 	sub	objptr, ##27180
03f30                 | LR__0194
03f30     46 29 52 F2 | 	cmps	local02, local52 wc
03f34     6C 00 90 3D |  if_ae	jmp	#LR__0195
03f38     14 39 02 F6 | 	mov	local10, local02
03f3c     03 38 66 F0 | 	shl	local10, #3
03f40     35 00 00 FF 
03f44     2C E4 05 F1 | 	add	objptr, ##27180
03f48     F2 38 02 F1 | 	add	local10, objptr
03f4c     1C 8F 02 FB | 	rdlong	local53, local10
03f50     37 39 02 F6 | 	mov	local10, local37
03f54     01 38 06 F1 | 	add	local10, #1
03f58     03 38 66 F0 | 	shl	local10, #3
03f5c     F2 2E 02 F6 | 	mov	local05, objptr
03f60     F2 38 02 F1 | 	add	local10, objptr
03f64     37 3B 02 F6 | 	mov	local11, local37
03f68     01 3A 06 F1 | 	add	local11, #1
03f6c     1D 41 02 F6 | 	mov	local14, local11
03f70     03 40 66 F0 | 	shl	local14, #3
03f74     F2 3E 02 F6 | 	mov	local13, objptr
03f78     F2 40 02 F1 | 	add	local14, objptr
03f7c     20 13 02 FB | 	rdlong	arg01, local14
03f80     47 3D 02 F6 | 	mov	local12, local53
03f84     1E 15 02 F6 | 	mov	arg02, local12
03f88     35 00 00 FF 
03f8c     2C E4 85 F1 | 	sub	objptr, ##27180
03f90     DC 41 B2 FD | 	call	#__system___string_concat
03f94     FD 30 02 F6 | 	mov	local06, result1
03f98     1C 31 62 FC | 	wrlong	local06, local10
03f9c     01 28 06 F1 | 	add	local02, #1
03fa0     8C FF 9F FD | 	jmp	#LR__0194
03fa4                 | LR__0195
03fa4                 | LR__0196
03fa4                 | ' 
03fa4                 | ' ' determine a type of the line and compile it
03fa4                 | ' 
03fa4                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03fa4     35 00 00 FF 
03fa8     2C E4 05 F1 | 	add	objptr, ##27180
03fac     F2 12 02 FB | 	rdlong	arg01, objptr
03fb0     35 00 00 FF 
03fb4     2C E4 85 F1 | 	sub	objptr, ##27180
03fb8     48 31 B0 FD | 	call	#_isdec
03fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03fc0     30 00 90 AD |  if_e	jmp	#LR__0197
03fc4     35 00 00 FF 
03fc8     2C E4 05 F1 | 	add	objptr, ##27180
03fcc     F2 12 02 FB | 	rdlong	arg01, objptr
03fd0     35 00 00 FF 
03fd4     2C E4 85 F1 | 	sub	objptr, ##27180
03fd8     00 14 06 F6 | 	mov	arg02, #0
03fdc     28 76 B2 FD | 	call	#__system____builtin_atoi
03fe0     52 00 00 FF 
03fe4     08 E5 05 F1 | 	add	objptr, ##42248
03fe8     F2 FA 61 FC | 	wrlong	result1, objptr
03fec     52 00 00 FF 
03ff0     08 E5 85 F1 | 	sub	objptr, ##42248
03ff4                 | LR__0197
03ff4                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03ff4     52 00 00 FF 
03ff8     08 E5 05 F1 | 	add	objptr, ##42248
03ffc     F2 2C 02 FB | 	rdlong	local04, objptr
04000     52 00 00 FF 
04004     08 E5 85 F1 | 	sub	objptr, ##42248
04008     01 2C 16 F2 | 	cmp	local04, #1 wc
0400c     40 00 90 CD |  if_b	jmp	#LR__0198
04010     01 46 0E F2 | 	cmp	local17, #1 wz
04014     37 00 00 AF 
04018     44 E4 05 A1 |  if_e	add	objptr, ##28228
0401c     F2 2E 02 AB |  if_e	rdlong	local05, objptr
04020     37 00 00 AF 
04024     44 E4 85 A1 |  if_e	sub	objptr, ##28228
04028     17 39 02 A6 |  if_e	mov	local10, local05
0402c     03 38 0E A2 |  if_e	cmp	local10, #3 wz
04030     1C 00 90 5D |  if_ne	jmp	#LR__0198
04034     52 00 00 FF 
04038     08 E5 05 F1 | 	add	objptr, ##42248
0403c     F2 12 02 FB | 	rdlong	arg01, objptr
04040     52 00 00 FF 
04044     08 E5 85 F1 | 	sub	objptr, ##42248
04048     64 32 B0 FD | 	call	#_deleteline
0404c     C8 03 90 FD | 	jmp	#LR__0209
04050                 | LR__0198
04050                 | ' 
04050                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
04050     37 00 00 FF 
04054     44 E4 05 F1 | 	add	objptr, ##28228
04058     F2 2C 0A FB | 	rdlong	local04, objptr wz
0405c     37 00 00 FF 
04060     44 E4 85 F1 | 	sub	objptr, ##28228
04064     20 00 90 AD |  if_e	jmp	#LR__0199
04068     37 00 00 FF 
0406c     44 E4 05 F1 | 	add	objptr, ##28228
04070     F2 2E 02 FB | 	rdlong	local05, objptr
04074     37 00 00 FF 
04078     44 E4 85 F1 | 	sub	objptr, ##28228
0407c     17 39 02 F6 | 	mov	local10, local05
04080     03 38 0E F2 | 	cmp	local10, #3 wz
04084     C0 00 90 5D |  if_ne	jmp	#LR__0201
04088                 | LR__0199
04088     35 00 00 FF 
0408c     40 E4 05 F1 | 	add	objptr, ##27200
04090     F2 3C 02 FB | 	rdlong	local12, objptr
04094     35 00 00 FF 
04098     40 E4 85 F1 | 	sub	objptr, ##27200
0409c     1B 3C 0E F2 | 	cmp	local12, #27 wz
040a0     A4 00 90 AD |  if_e	jmp	#LR__0201
040a4     52 00 00 FF 
040a8     08 E5 05 F1 | 	add	objptr, ##42248
040ac     F2 12 02 FB | 	rdlong	arg01, objptr
040b0     1B 00 00 FF 
040b4     C4 E4 85 F1 | 	sub	objptr, ##14020
040b8     F2 16 02 FB | 	rdlong	arg03, objptr
040bc     37 00 00 FF 
040c0     44 E4 85 F1 | 	sub	objptr, ##28228
040c4     00 14 06 F6 | 	mov	arg02, #0
040c8     74 46 B0 FD | 	call	#_compile
040cc     FD 26 0A F6 | 	mov	local01, result1 wz
040d0                 | '   err=compile(linenum,0,cont) 
040d0                 | '   if err<>0 then printerror(err,linenum): goto 101
040d0     20 00 90 AD |  if_e	jmp	#LR__0200
040d4     52 00 00 FF 
040d8     08 E5 05 F1 | 	add	objptr, ##42248
040dc     F2 14 02 FB | 	rdlong	arg02, objptr
040e0     52 00 00 FF 
040e4     08 E5 85 F1 | 	sub	objptr, ##42248
040e8     13 13 02 F6 | 	mov	arg01, local01
040ec     CC 05 B2 FD | 	call	#_printerror
040f0     44 03 90 FD | 	jmp	#LR__0210
040f4                 | LR__0200
040f4                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
040f4     52 00 00 FF 
040f8     4C E5 05 F1 | 	add	objptr, ##42316
040fc     F2 12 02 FB | 	rdlong	arg01, objptr
04100     52 00 00 FF 
04104     4C E5 85 F1 | 	sub	objptr, ##42316
04108     BE 01 00 FF 
0410c     C3 15 06 F6 | 	mov	arg02, ##@LR__5623
04110     28 40 B2 FD | 	call	#__system___string_cmp
04114     00 FA 0D F2 | 	cmp	result1, #0 wz
04118     FC 02 90 AD |  if_e	jmp	#LR__0209
0411c     52 00 00 FF 
04120     4C E5 05 F1 | 	add	objptr, ##42316
04124     F2 2C 02 FB | 	rdlong	local04, objptr
04128     1B 00 00 FF 
0412c     10 E5 85 F1 | 	sub	objptr, ##14096
04130     F2 2C 62 FC | 	wrlong	local04, objptr
04134     08 E4 05 F1 | 	add	objptr, #8
04138     F2 08 68 FC | 	wrlong	#4, objptr
0413c     37 00 00 FF 
04140     44 E4 85 F1 | 	sub	objptr, ##28228
04144     B0 D7 9F FD | 	jmp	#LR__0070
04148                 | LR__0201
04148                 | '       							
04148                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
04148     37 00 00 FF 
0414c     44 E4 05 F1 | 	add	objptr, ##28228
04150     F2 2C 02 FB | 	rdlong	local04, objptr
04154     37 00 00 FF 
04158     44 E4 85 F1 | 	sub	objptr, ##28228
0415c     01 2C 0E F2 | 	cmp	local04, #1 wz
04160     37 00 00 5F 
04164     44 E4 05 51 |  if_ne	add	objptr, ##28228
04168     F2 38 02 5B |  if_ne	rdlong	local10, objptr
0416c     37 00 00 5F 
04170     44 E4 85 51 |  if_ne	sub	objptr, ##28228
04174     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
04178     C0 00 90 5D |  if_ne	jmp	#LR__0203
0417c     35 00 00 FF 
04180     38 E4 05 F1 | 	add	objptr, ##27192
04184     F2 3C 02 FB | 	rdlong	local12, objptr
04188     35 00 00 FF 
0418c     38 E4 85 F1 | 	sub	objptr, ##27192
04190     1B 3C 0E F2 | 	cmp	local12, #27 wz
04194     A4 00 90 AD |  if_e	jmp	#LR__0203
04198     52 00 00 FF 
0419c     08 E5 05 F1 | 	add	objptr, ##42248
041a0     F2 12 02 FB | 	rdlong	arg01, objptr
041a4     1B 00 00 FF 
041a8     C4 E4 85 F1 | 	sub	objptr, ##14020
041ac     F2 16 02 FB | 	rdlong	arg03, objptr
041b0     37 00 00 FF 
041b4     44 E4 85 F1 | 	sub	objptr, ##28228
041b8     00 14 06 F6 | 	mov	arg02, #0
041bc     80 45 B0 FD | 	call	#_compile
041c0     FD 26 0A F6 | 	mov	local01, result1 wz
041c4                 | '   err=compile(linenum,0,cont) 
041c4                 | '   if err<>0 then printerror(err,linenum): goto 101
041c4     20 00 90 AD |  if_e	jmp	#LR__0202
041c8     52 00 00 FF 
041cc     08 E5 05 F1 | 	add	objptr, ##42248
041d0     F2 14 02 FB | 	rdlong	arg02, objptr
041d4     52 00 00 FF 
041d8     08 E5 85 F1 | 	sub	objptr, ##42248
041dc     13 13 02 F6 | 	mov	arg01, local01
041e0     D8 04 B2 FD | 	call	#_printerror
041e4     50 02 90 FD | 	jmp	#LR__0210
041e8                 | LR__0202
041e8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
041e8     52 00 00 FF 
041ec     4C E5 05 F1 | 	add	objptr, ##42316
041f0     F2 12 02 FB | 	rdlong	arg01, objptr
041f4     52 00 00 FF 
041f8     4C E5 85 F1 | 	sub	objptr, ##42316
041fc     BE 01 00 FF 
04200     C4 15 06 F6 | 	mov	arg02, ##@LR__5624
04204     34 3F B2 FD | 	call	#__system___string_cmp
04208     00 FA 0D F2 | 	cmp	result1, #0 wz
0420c     08 02 90 AD |  if_e	jmp	#LR__0209
04210     52 00 00 FF 
04214     4C E5 05 F1 | 	add	objptr, ##42316
04218     F2 2C 02 FB | 	rdlong	local04, objptr
0421c     1B 00 00 FF 
04220     10 E5 85 F1 | 	sub	objptr, ##14096
04224     F2 2C 62 FC | 	wrlong	local04, objptr
04228     08 E4 05 F1 | 	add	objptr, #8
0422c     F2 08 68 FC | 	wrlong	#4, objptr
04230     37 00 00 FF 
04234     44 E4 85 F1 | 	sub	objptr, ##28228
04238     BC D6 9F FD | 	jmp	#LR__0070
0423c                 | LR__0203
0423c                 | ' 							 
0423c                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
0423c     37 00 00 FF 
04240     44 E4 05 F1 | 	add	objptr, ##28228
04244     F2 2C 0A FB | 	rdlong	local04, objptr wz
04248     37 00 00 FF 
0424c     44 E4 85 F1 | 	sub	objptr, ##28228
04250     37 00 00 5F 
04254     44 E4 05 51 |  if_ne	add	objptr, ##28228
04258     F2 38 02 5B |  if_ne	rdlong	local10, objptr
0425c     37 00 00 5F 
04260     44 E4 85 51 |  if_ne	sub	objptr, ##28228
04264     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
04268     35 00 00 AF 
0426c     40 E4 05 A1 |  if_e	add	objptr, ##27200
04270     F2 3C 02 AB |  if_e	rdlong	local12, objptr
04274     35 00 00 AF 
04278     40 E4 85 A1 |  if_e	sub	objptr, ##27200
0427c     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
04280     A4 00 90 5D |  if_ne	jmp	#LR__0205
04284     52 00 00 FF 
04288     08 E5 05 F1 | 	add	objptr, ##42248
0428c     F2 12 02 FB | 	rdlong	arg01, objptr
04290     1B 00 00 FF 
04294     C4 E4 85 F1 | 	sub	objptr, ##14020
04298     F2 16 02 FB | 	rdlong	arg03, objptr
0429c     37 00 00 FF 
042a0     44 E4 85 F1 | 	sub	objptr, ##28228
042a4     00 14 06 F6 | 	mov	arg02, #0
042a8     5C 45 B0 FD | 	call	#_compile_assign
042ac     FD 26 0A F6 | 	mov	local01, result1 wz
042b0                 | '   err=compile_assign(linenum,0,cont)
042b0                 | '   if err<>0 then printerror(err,linenum): goto 101
042b0     20 00 90 AD |  if_e	jmp	#LR__0204
042b4     52 00 00 FF 
042b8     08 E5 05 F1 | 	add	objptr, ##42248
042bc     F2 14 02 FB | 	rdlong	arg02, objptr
042c0     52 00 00 FF 
042c4     08 E5 85 F1 | 	sub	objptr, ##42248
042c8     13 13 02 F6 | 	mov	arg01, local01
042cc     EC 03 B2 FD | 	call	#_printerror
042d0     64 01 90 FD | 	jmp	#LR__0210
042d4                 | LR__0204
042d4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
042d4     52 00 00 FF 
042d8     4C E5 05 F1 | 	add	objptr, ##42316
042dc     F2 12 02 FB | 	rdlong	arg01, objptr
042e0     52 00 00 FF 
042e4     4C E5 85 F1 | 	sub	objptr, ##42316
042e8     BE 01 00 FF 
042ec     C5 15 06 F6 | 	mov	arg02, ##@LR__5625
042f0     48 3E B2 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     1C 01 90 AD |  if_e	jmp	#LR__0209
042fc     52 00 00 FF 
04300     4C E5 05 F1 | 	add	objptr, ##42316
04304     F2 2C 02 FB | 	rdlong	local04, objptr
04308     1B 00 00 FF 
0430c     10 E5 85 F1 | 	sub	objptr, ##14096
04310     F2 2C 62 FC | 	wrlong	local04, objptr
04314     08 E4 05 F1 | 	add	objptr, #8
04318     F2 08 68 FC | 	wrlong	#4, objptr
0431c     37 00 00 FF 
04320     44 E4 85 F1 | 	sub	objptr, ##28228
04324     D0 D5 9F FD | 	jmp	#LR__0070
04328                 | LR__0205
04328                 | '     							 
04328                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
04328     37 00 00 FF 
0432c     44 E4 05 F1 | 	add	objptr, ##28228
04330     F2 2C 02 FB | 	rdlong	local04, objptr
04334     37 00 00 FF 
04338     44 E4 85 F1 | 	sub	objptr, ##28228
0433c     01 2C 0E F2 | 	cmp	local04, #1 wz
04340     37 00 00 5F 
04344     44 E4 05 51 |  if_ne	add	objptr, ##28228
04348     F2 38 02 5B |  if_ne	rdlong	local10, objptr
0434c     37 00 00 5F 
04350     44 E4 85 51 |  if_ne	sub	objptr, ##28228
04354     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
04358     35 00 00 AF 
0435c     38 E4 05 A1 |  if_e	add	objptr, ##27192
04360     F2 3C 02 AB |  if_e	rdlong	local12, objptr
04364     35 00 00 AF 
04368     38 E4 85 A1 |  if_e	sub	objptr, ##27192
0436c     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
04370     A4 00 90 5D |  if_ne	jmp	#LR__0208
04374     52 00 00 FF 
04378     08 E5 05 F1 | 	add	objptr, ##42248
0437c     F2 12 02 FB | 	rdlong	arg01, objptr
04380     1B 00 00 FF 
04384     C4 E4 85 F1 | 	sub	objptr, ##14020
04388     F2 16 02 FB | 	rdlong	arg03, objptr
0438c     37 00 00 FF 
04390     44 E4 85 F1 | 	sub	objptr, ##28228
04394     00 14 06 F6 | 	mov	arg02, #0
04398     6C 44 B0 FD | 	call	#_compile_assign
0439c     FD 26 0A F6 | 	mov	local01, result1 wz
043a0                 | '   err=compile_assign(linenum,0,cont) 
043a0                 | '   if err<>0 then printerror(err,linenum): goto 101
043a0     20 00 90 AD |  if_e	jmp	#LR__0206
043a4     52 00 00 FF 
043a8     08 E5 05 F1 | 	add	objptr, ##42248
043ac     F2 14 02 FB | 	rdlong	arg02, objptr
043b0     52 00 00 FF 
043b4     08 E5 85 F1 | 	sub	objptr, ##42248
043b8     13 13 02 F6 | 	mov	arg01, local01
043bc     FC 02 B2 FD | 	call	#_printerror
043c0     74 00 90 FD | 	jmp	#LR__0210
043c4                 | LR__0206
043c4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
043c4     52 00 00 FF 
043c8     4C E5 05 F1 | 	add	objptr, ##42316
043cc     F2 12 02 FB | 	rdlong	arg01, objptr
043d0     52 00 00 FF 
043d4     4C E5 85 F1 | 	sub	objptr, ##42316
043d8     BE 01 00 FF 
043dc     C6 15 06 F6 | 	mov	arg02, ##@LR__5626
043e0     58 3D B2 FD | 	call	#__system___string_cmp
043e4     00 FA 4D F2 | 	cmps	result1, #0 wz
043e8     2C 00 90 AD |  if_e	jmp	#LR__0207
043ec     52 00 00 FF 
043f0     4C E5 05 F1 | 	add	objptr, ##42316
043f4     F2 2C 02 FB | 	rdlong	local04, objptr
043f8     1B 00 00 FF 
043fc     10 E5 85 F1 | 	sub	objptr, ##14096
04400     F2 2C 62 FC | 	wrlong	local04, objptr
04404     08 E4 05 F1 | 	add	objptr, #8
04408     F2 08 68 FC | 	wrlong	#4, objptr
0440c     37 00 00 FF 
04410     44 E4 85 F1 | 	sub	objptr, ##28228
04414     E0 D4 9F FD | 	jmp	#LR__0070
04418                 | LR__0207
04418                 | LR__0208
04418                 | LR__0209
04418                 | ' 
04418                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
04418     52 00 00 FF 
0441c     08 E5 05 F1 | 	add	objptr, ##42248
04420     F2 2C 0A FB | 	rdlong	local04, objptr wz
04424     52 00 00 FF 
04428     08 E5 85 F1 | 	sub	objptr, ##42248
0442c     B0 00 90 5D |  if_ne	jmp	#LR__0213
04430     02 12 06 F6 | 	mov	arg01, #2
04434     E4 92 B0 FD | 	call	#_execute_line
04438                 | LR__0210
04438                 | '   execute_line(2)
04438                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
04438     52 00 00 FF 
0443c     2C E5 05 F1 | 	add	objptr, ##42284
04440     F2 2C 0A FB | 	rdlong	local04, objptr wz
04444     52 00 00 FF 
04448     2C E5 85 F1 | 	sub	objptr, ##42284
0444c     20 00 90 5D |  if_ne	jmp	#LR__0211
04450     BE 01 00 FF 
04454     C7 13 06 F6 | 	mov	arg01, ##@LR__5627
04458                 | ' 
04458                 | ' write(text)
04458     1C 24 B2 FD | 	call	#_hg010b_spin2_write
0445c                 | ' crlf
0445c     B8 28 B2 FD | 	call	#_hg010b_spin2_crlf
04460     BE 01 00 FF 
04464     C8 13 06 F6 | 	mov	arg01, ##@LR__5628
04468                 | ' 
04468                 | ' write(text)
04468     0C 24 B2 FD | 	call	#_hg010b_spin2_write
0446c                 | ' crlf
0446c     A8 28 B2 FD | 	call	#_hg010b_spin2_crlf
04470                 | LR__0211
04470                 | '     if inload=1 andalso err>0 then print fullline$
04470     52 00 00 FF 
04474     2C E5 05 F1 | 	add	objptr, ##42284
04478     F2 2C 02 FB | 	rdlong	local04, objptr
0447c     52 00 00 FF 
04480     2C E5 85 F1 | 	sub	objptr, ##42284
04484     01 2C 0E F2 | 	cmp	local04, #1 wz
04488     54 00 90 5D |  if_ne	jmp	#LR__0212
0448c     01 26 56 F2 | 	cmps	local01, #1 wc
04490     4C 00 90 CD |  if_b	jmp	#LR__0212
04494     00 12 06 F6 | 	mov	arg01, #0
04498     28 99 B2 FD | 	call	#__system___getiolock_0620
0449c     FD 12 02 F6 | 	mov	arg01, result1
044a0     70 3C B2 FD | 	call	#__system___lockmem
044a4     37 00 00 FF 
044a8     40 E4 05 F1 | 	add	objptr, ##28224
044ac     F2 14 02 FB | 	rdlong	arg02, objptr
044b0     37 00 00 FF 
044b4     40 E4 85 F1 | 	sub	objptr, ##28224
044b8     00 12 06 F6 | 	mov	arg01, #0
044bc     00 16 06 F6 | 	mov	arg03, #0
044c0     48 49 B2 FD | 	call	#__system___basic_print_string
044c4     00 12 06 F6 | 	mov	arg01, #0
044c8     0A 14 06 F6 | 	mov	arg02, #10
044cc     00 16 06 F6 | 	mov	arg03, #0
044d0     E0 48 B2 FD | 	call	#__system___basic_print_char
044d4     00 12 06 F6 | 	mov	arg01, #0
044d8     E8 98 B2 FD | 	call	#__system___getiolock_0620
044dc     FD 00 68 FC | 	wrlong	#0, result1
044e0                 | LR__0212
044e0                 | LR__0213
044e0     A7 F0 03 F6 | 	mov	ptra, fp
044e4     B2 00 A0 FD | 	call	#popregs_
044e8                 | _interpret_ret
044e8     2D 00 64 FD | 	ret
044ec                 | 
044ec                 | ' 
044ec                 | ' '---------------------------------------------------------------------------------------------------------------------
044ec                 | ' '
044ec                 | ' '                          END OF TOKENIZER MAIN CODE
044ec                 | ' '
044ec                 | ' '---------------------------------------------------------------------------------------------------------------------
044ec                 | ' 
044ec                 | ' '---------------------------------------------------------------------------------------------------------------------
044ec                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
044ec                 | ' '---------------------------------------------------------------------------------------------------------------------
044ec                 | ' 
044ec                 | ' ' Check if the part is an operator, return a token or 0 if not found
044ec                 | ' 
044ec                 | ' function isoperator(s as string) as ubyte
044ec                 | _isoperator
044ec     01 4A 05 F6 | 	mov	COUNT_, #1
044f0     A8 00 A0 FD | 	call	#pushregs_
044f4                 | ' 
044f4                 | ' select case s
044f4     09 27 02 F6 | 	mov	local01, arg01
044f8     BE 01 00 FF 
044fc     CE 15 06 F6 | 	mov	arg02, ##@LR__5629
04500     13 13 02 F6 | 	mov	arg01, local01
04504     34 3C B2 FD | 	call	#__system___string_cmp
04508     00 FA 0D F2 | 	cmp	result1, #0 wz
0450c     FC 01 90 AD |  if_e	jmp	#LR__0220
04510     BE 01 00 FF 
04514     D0 15 06 F6 | 	mov	arg02, ##@LR__5630
04518     13 13 02 F6 | 	mov	arg01, local01
0451c     1C 3C B2 FD | 	call	#__system___string_cmp
04520     00 FA 0D F2 | 	cmp	result1, #0 wz
04524     EC 01 90 AD |  if_e	jmp	#LR__0221
04528     BE 01 00 FF 
0452c     D2 15 06 F6 | 	mov	arg02, ##@LR__5631
04530     13 13 02 F6 | 	mov	arg01, local01
04534     04 3C B2 FD | 	call	#__system___string_cmp
04538     00 FA 0D F2 | 	cmp	result1, #0 wz
0453c     DC 01 90 AD |  if_e	jmp	#LR__0222
04540     BE 01 00 FF 
04544     D5 15 06 F6 | 	mov	arg02, ##@LR__5632
04548     13 13 02 F6 | 	mov	arg01, local01
0454c     EC 3B B2 FD | 	call	#__system___string_cmp
04550     00 FA 0D F2 | 	cmp	result1, #0 wz
04554     CC 01 90 AD |  if_e	jmp	#LR__0223
04558     BE 01 00 FF 
0455c     D9 15 06 F6 | 	mov	arg02, ##@LR__5633
04560     13 13 02 F6 | 	mov	arg01, local01
04564     D4 3B B2 FD | 	call	#__system___string_cmp
04568     00 FA 0D F2 | 	cmp	result1, #0 wz
0456c     BC 01 90 AD |  if_e	jmp	#LR__0224
04570     BE 01 00 FF 
04574     DB 15 06 F6 | 	mov	arg02, ##@LR__5634
04578     13 13 02 F6 | 	mov	arg01, local01
0457c     BC 3B B2 FD | 	call	#__system___string_cmp
04580     00 FA 0D F2 | 	cmp	result1, #0 wz
04584     AC 01 90 AD |  if_e	jmp	#LR__0225
04588     BE 01 00 FF 
0458c     DD 15 06 F6 | 	mov	arg02, ##@LR__5635
04590     13 13 02 F6 | 	mov	arg01, local01
04594     A4 3B B2 FD | 	call	#__system___string_cmp
04598     00 FA 0D F2 | 	cmp	result1, #0 wz
0459c     9C 01 90 AD |  if_e	jmp	#LR__0226
045a0     BE 01 00 FF 
045a4     E1 15 06 F6 | 	mov	arg02, ##@LR__5636
045a8     13 13 02 F6 | 	mov	arg01, local01
045ac     8C 3B B2 FD | 	call	#__system___string_cmp
045b0     00 FA 0D F2 | 	cmp	result1, #0 wz
045b4     8C 01 90 AD |  if_e	jmp	#LR__0227
045b8     BE 01 00 FF 
045bc     E5 15 06 F6 | 	mov	arg02, ##@LR__5637
045c0     13 13 02 F6 | 	mov	arg01, local01
045c4     74 3B B2 FD | 	call	#__system___string_cmp
045c8     00 FA 0D F2 | 	cmp	result1, #0 wz
045cc     7C 01 90 AD |  if_e	jmp	#LR__0228
045d0     BE 01 00 FF 
045d4     E9 15 06 F6 | 	mov	arg02, ##@LR__5638
045d8     13 13 02 F6 | 	mov	arg01, local01
045dc     5C 3B B2 FD | 	call	#__system___string_cmp
045e0     00 FA 0D F2 | 	cmp	result1, #0 wz
045e4     6C 01 90 AD |  if_e	jmp	#LR__0229
045e8     BE 01 00 FF 
045ec     ED 15 06 F6 | 	mov	arg02, ##@LR__5639
045f0     13 13 02 F6 | 	mov	arg01, local01
045f4     44 3B B2 FD | 	call	#__system___string_cmp
045f8     00 FA 0D F2 | 	cmp	result1, #0 wz
045fc     5C 01 90 AD |  if_e	jmp	#LR__0230
04600     BE 01 00 FF 
04604     F1 15 06 F6 | 	mov	arg02, ##@LR__5640
04608     13 13 02 F6 | 	mov	arg01, local01
0460c     2C 3B B2 FD | 	call	#__system___string_cmp
04610     00 FA 0D F2 | 	cmp	result1, #0 wz
04614     4C 01 90 AD |  if_e	jmp	#LR__0231
04618     BE 01 00 FF 
0461c     F3 15 06 F6 | 	mov	arg02, ##@LR__5641
04620     13 13 02 F6 | 	mov	arg01, local01
04624     14 3B B2 FD | 	call	#__system___string_cmp
04628     00 FA 0D F2 | 	cmp	result1, #0 wz
0462c     3C 01 90 AD |  if_e	jmp	#LR__0232
04630     BE 01 00 FF 
04634     F7 15 06 F6 | 	mov	arg02, ##@LR__5642
04638     13 13 02 F6 | 	mov	arg01, local01
0463c     FC 3A B2 FD | 	call	#__system___string_cmp
04640     00 FA 0D F2 | 	cmp	result1, #0 wz
04644     2C 01 90 AD |  if_e	jmp	#LR__0233
04648     BE 01 00 FF 
0464c     F9 15 06 F6 | 	mov	arg02, ##@LR__5643
04650     13 13 02 F6 | 	mov	arg01, local01
04654     E4 3A B2 FD | 	call	#__system___string_cmp
04658     00 FA 0D F2 | 	cmp	result1, #0 wz
0465c     1C 01 90 AD |  if_e	jmp	#LR__0234
04660     BE 01 00 FF 
04664     FB 15 06 F6 | 	mov	arg02, ##@LR__5644
04668     13 13 02 F6 | 	mov	arg01, local01
0466c     CC 3A B2 FD | 	call	#__system___string_cmp
04670     00 FA 0D F2 | 	cmp	result1, #0 wz
04674     0C 01 90 AD |  if_e	jmp	#LR__0235
04678     BE 01 00 FF 
0467c     FE 15 06 F6 | 	mov	arg02, ##@LR__5645
04680     13 13 02 F6 | 	mov	arg01, local01
04684     B4 3A B2 FD | 	call	#__system___string_cmp
04688     00 FA 0D F2 | 	cmp	result1, #0 wz
0468c     FC 00 90 AD |  if_e	jmp	#LR__0236
04690     BF 01 00 FF 
04694     01 14 06 F6 | 	mov	arg02, ##@LR__5646
04698     13 13 02 F6 | 	mov	arg01, local01
0469c     9C 3A B2 FD | 	call	#__system___string_cmp
046a0     00 FA 0D F2 | 	cmp	result1, #0 wz
046a4     EC 00 90 AD |  if_e	jmp	#LR__0237
046a8     BF 01 00 FF 
046ac     03 14 06 F6 | 	mov	arg02, ##@LR__5647
046b0     13 13 02 F6 | 	mov	arg01, local01
046b4     84 3A B2 FD | 	call	#__system___string_cmp
046b8     00 FA 0D F2 | 	cmp	result1, #0 wz
046bc     DC 00 90 AD |  if_e	jmp	#LR__0238
046c0     BF 01 00 FF 
046c4     05 14 06 F6 | 	mov	arg02, ##@LR__5648
046c8     13 13 02 F6 | 	mov	arg01, local01
046cc     6C 3A B2 FD | 	call	#__system___string_cmp
046d0     00 FA 0D F2 | 	cmp	result1, #0 wz
046d4     CC 00 90 AD |  if_e	jmp	#LR__0239
046d8     BF 01 00 FF 
046dc     08 14 06 F6 | 	mov	arg02, ##@LR__5649
046e0     13 13 02 F6 | 	mov	arg01, local01
046e4     54 3A B2 FD | 	call	#__system___string_cmp
046e8     00 FA 0D F2 | 	cmp	result1, #0 wz
046ec     BC 00 90 AD |  if_e	jmp	#LR__0240
046f0     BF 01 00 FF 
046f4     0B 14 06 F6 | 	mov	arg02, ##@LR__5650
046f8     13 13 02 F6 | 	mov	arg01, local01
046fc     3C 3A B2 FD | 	call	#__system___string_cmp
04700     00 FA 0D F2 | 	cmp	result1, #0 wz
04704     AC 00 90 AD |  if_e	jmp	#LR__0241
04708     B0 00 90 FD | 	jmp	#LR__0242
0470c                 | LR__0220
0470c     01 FA 05 F6 | 	mov	result1, #1
04710     AC 00 90 FD | 	jmp	#LR__0243
04714                 | LR__0221
04714     02 FA 05 F6 | 	mov	result1, #2
04718     A4 00 90 FD | 	jmp	#LR__0243
0471c                 | LR__0222
0471c     03 FA 05 F6 | 	mov	result1, #3
04720     9C 00 90 FD | 	jmp	#LR__0243
04724                 | LR__0223
04724     04 FA 05 F6 | 	mov	result1, #4
04728     94 00 90 FD | 	jmp	#LR__0243
0472c                 | LR__0224
0472c     05 FA 05 F6 | 	mov	result1, #5
04730     8C 00 90 FD | 	jmp	#LR__0243
04734                 | LR__0225
04734     06 FA 05 F6 | 	mov	result1, #6
04738     84 00 90 FD | 	jmp	#LR__0243
0473c                 | LR__0226
0473c     07 FA 05 F6 | 	mov	result1, #7
04740     7C 00 90 FD | 	jmp	#LR__0243
04744                 | LR__0227
04744     08 FA 05 F6 | 	mov	result1, #8
04748     74 00 90 FD | 	jmp	#LR__0243
0474c                 | LR__0228
0474c     09 FA 05 F6 | 	mov	result1, #9
04750     6C 00 90 FD | 	jmp	#LR__0243
04754                 | LR__0229
04754     0A FA 05 F6 | 	mov	result1, #10
04758     64 00 90 FD | 	jmp	#LR__0243
0475c                 | LR__0230
0475c     0B FA 05 F6 | 	mov	result1, #11
04760     5C 00 90 FD | 	jmp	#LR__0243
04764                 | LR__0231
04764     0C FA 05 F6 | 	mov	result1, #12
04768     54 00 90 FD | 	jmp	#LR__0243
0476c                 | LR__0232
0476c     0D FA 05 F6 | 	mov	result1, #13
04770     4C 00 90 FD | 	jmp	#LR__0243
04774                 | LR__0233
04774     0E FA 05 F6 | 	mov	result1, #14
04778     44 00 90 FD | 	jmp	#LR__0243
0477c                 | LR__0234
0477c     1B FA 05 F6 | 	mov	result1, #27
04780     3C 00 90 FD | 	jmp	#LR__0243
04784                 | LR__0235
04784     27 FA 05 F6 | 	mov	result1, #39
04788     34 00 90 FD | 	jmp	#LR__0243
0478c                 | LR__0236
0478c     26 FA 05 F6 | 	mov	result1, #38
04790     2C 00 90 FD | 	jmp	#LR__0243
04794                 | LR__0237
04794     10 FA 05 F6 | 	mov	result1, #16
04798     24 00 90 FD | 	jmp	#LR__0243
0479c                 | LR__0238
0479c     0F FA 05 F6 | 	mov	result1, #15
047a0     1C 00 90 FD | 	jmp	#LR__0243
047a4                 | LR__0239
047a4     2A FA 05 F6 | 	mov	result1, #42
047a8     14 00 90 FD | 	jmp	#LR__0243
047ac                 | LR__0240
047ac     28 FA 05 F6 | 	mov	result1, #40
047b0     0C 00 90 FD | 	jmp	#LR__0243
047b4                 | LR__0241
047b4     29 FA 05 F6 | 	mov	result1, #41
047b8     04 00 90 FD | 	jmp	#LR__0243
047bc                 | LR__0242
047bc     00 FA 05 F6 | 	mov	result1, #0
047c0                 | LR__0243
047c0     A7 F0 03 F6 | 	mov	ptra, fp
047c4     B2 00 A0 FD | 	call	#popregs_
047c8                 | _isoperator_ret
047c8     2D 00 64 FD | 	ret
047cc                 | 
047cc                 | ' 
047cc                 | ' ' Check if the part is a channel#, return a token or 0 if not found
047cc                 | ' 
047cc                 | ' function ischannel(s as string) as ulong
047cc                 | _ischannel
047cc     02 4A 05 F6 | 	mov	COUNT_, #2
047d0     A8 00 A0 FD | 	call	#pushregs_
047d4                 | ' if left$(s,1)<>"#" then return 0
047d4     09 27 02 F6 | 	mov	local01, arg01
047d8     01 14 06 F6 | 	mov	arg02, #1
047dc     B4 59 B2 FD | 	call	#__system__Left_S
047e0     FD 12 02 F6 | 	mov	arg01, result1
047e4     BF 01 00 FF 
047e8     0E 14 06 F6 | 	mov	arg02, ##@LR__5651
047ec     4C 39 B2 FD | 	call	#__system___string_cmp
047f0     00 FA 0D F2 | 	cmp	result1, #0 wz
047f4     00 FA 05 56 |  if_ne	mov	result1, #0
047f8     AC 00 90 5D |  if_ne	jmp	#LR__0254
047fc                 | ' if len(s)<>2 then return 0
047fc     13 13 02 F6 | 	mov	arg01, local01
04800     09 29 02 F6 | 	mov	local02, arg01
04804     97 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
04808                 | LR__0250
04808     14 FB C9 FA | 	rdbyte	result1, local02 wz
0480c     01 28 06 51 |  if_ne	add	local02, #1
04810     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
04814                 | LR__0251
04814     09 29 82 F1 | 	sub	local02, arg01
04818     14 FB 01 F6 | 	mov	result1, local02
0481c     02 FA 0D F2 | 	cmp	result1, #2 wz
04820     00 FA 05 56 |  if_ne	mov	result1, #0
04824     80 00 90 5D |  if_ne	jmp	#LR__0254
04828                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
04828     13 13 02 F6 | 	mov	arg01, local01
0482c     01 14 06 F6 | 	mov	arg02, #1
04830     E8 59 B2 FD | 	call	#__system__Right_S
04834     FD 12 02 F6 | 	mov	arg01, result1
04838     BF 01 00 FF 
0483c     10 14 06 F6 | 	mov	arg02, ##@LR__5652
04840     F8 38 B2 FD | 	call	#__system___string_cmp
04844     00 FA 55 F2 | 	cmps	result1, #0 wc
04848     24 00 90 CD |  if_b	jmp	#LR__0252
0484c     13 13 02 F6 | 	mov	arg01, local01
04850     01 14 06 F6 | 	mov	arg02, #1
04854     C4 59 B2 FD | 	call	#__system__Right_S
04858     FD 12 02 F6 | 	mov	arg01, result1
0485c     BF 01 00 FF 
04860     12 14 06 F6 | 	mov	arg02, ##@LR__5653
04864     D4 38 B2 FD | 	call	#__system___string_cmp
04868     01 FA 55 F2 | 	cmps	result1, #1 wc
0486c     08 00 90 CD |  if_b	jmp	#LR__0253
04870                 | LR__0252
04870     00 FA 05 F6 | 	mov	result1, #0
04874     30 00 90 FD | 	jmp	#LR__0254
04878                 | LR__0253
04878                 | ' return token_channel+val(right$(s,1))
04878     13 13 02 F6 | 	mov	arg01, local01
0487c     01 14 06 F6 | 	mov	arg02, #1
04880     98 59 B2 FD | 	call	#__system__Right_S
04884     FD 12 02 F6 | 	mov	arg01, result1
04888     14 6F B2 FD | 	call	#__system____builtin_atof
0488c     FD 14 02 F6 | 	mov	arg02, result1
04890     00 18 21 FF 
04894     00 12 06 F6 | 	mov	arg01, ##1110441984
04898     24 63 B2 FD | 	call	#__system___float_add
0489c     FD 12 02 F6 | 	mov	arg01, result1
048a0     00 14 06 F6 | 	mov	arg02, #0
048a4     B0 6B B2 FD | 	call	#__system___float_tointeger
048a8                 | LR__0254
048a8     A7 F0 03 F6 | 	mov	ptra, fp
048ac     B2 00 A0 FD | 	call	#popregs_
048b0                 | _ischannel_ret
048b0     2D 00 64 FD | 	ret
048b4                 | 
048b4                 | ' 
048b4                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
048b4                 | ' ' todo: add spin2/pasm constants for pin control
048b4                 | ' 
048b4                 | ' function isconstant(s as string) as integer
048b4                 | _isconstant
048b4     01 4A 05 F6 | 	mov	COUNT_, #1
048b8     A8 00 A0 FD | 	call	#pushregs_
048bc                 | ' 
048bc                 | ' select case s
048bc     09 27 02 F6 | 	mov	local01, arg01
048c0     BF 01 00 FF 
048c4     14 14 06 F6 | 	mov	arg02, ##@LR__5654
048c8     13 13 02 F6 | 	mov	arg01, local01
048cc     6C 38 B2 FD | 	call	#__system___string_cmp
048d0     00 FA 0D F2 | 	cmp	result1, #0 wz
048d4     34 00 90 AD |  if_e	jmp	#LR__0260
048d8     BF 01 00 FF 
048dc     1A 14 06 F6 | 	mov	arg02, ##@LR__5655
048e0     13 13 02 F6 | 	mov	arg01, local01
048e4     54 38 B2 FD | 	call	#__system___string_cmp
048e8     00 FA 0D F2 | 	cmp	result1, #0 wz
048ec     24 00 90 AD |  if_e	jmp	#LR__0261
048f0     BF 01 00 FF 
048f4     21 14 06 F6 | 	mov	arg02, ##@LR__5656
048f8     13 13 02 F6 | 	mov	arg01, local01
048fc     3C 38 B2 FD | 	call	#__system___string_cmp
04900     00 FA 0D F2 | 	cmp	result1, #0 wz
04904     14 00 90 AD |  if_e	jmp	#LR__0262
04908     18 00 90 FD | 	jmp	#LR__0263
0490c                 | LR__0260
0490c     01 FA 05 F6 | 	mov	result1, #1
04910     14 00 90 FD | 	jmp	#LR__0264
04914                 | LR__0261
04914     02 FA 05 F6 | 	mov	result1, #2
04918     0C 00 90 FD | 	jmp	#LR__0264
0491c                 | LR__0262
0491c     04 FA 05 F6 | 	mov	result1, #4
04920     04 00 90 FD | 	jmp	#LR__0264
04924                 | LR__0263
04924     00 FA 05 F6 | 	mov	result1, #0
04928                 | LR__0264
04928     A7 F0 03 F6 | 	mov	ptra, fp
0492c     B2 00 A0 FD | 	call	#popregs_
04930                 | _isconstant_ret
04930     2D 00 64 FD | 	ret
04934                 | 
04934                 | ' 
04934                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04934                 | ' 
04934                 | ' function isnotename(s as string) as ulong
04934                 | _isnotename
04934     07 4A 05 F6 | 	mov	COUNT_, #7
04938     A8 00 A0 FD | 	call	#pushregs_
0493c                 | ' if left$(s,1)<>"#" then return 0
0493c     09 27 02 F6 | 	mov	local01, arg01
04940     01 14 06 F6 | 	mov	arg02, #1
04944     4C 58 B2 FD | 	call	#__system__Left_S
04948     FD 12 02 F6 | 	mov	arg01, result1
0494c     BF 01 00 FF 
04950     29 14 06 F6 | 	mov	arg02, ##@LR__5657
04954     E4 37 B2 FD | 	call	#__system___string_cmp
04958     00 FA 0D F2 | 	cmp	result1, #0 wz
0495c     00 FA 05 56 |  if_ne	mov	result1, #0
04960     30 03 90 5D |  if_ne	jmp	#LR__0293
04964                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
04964     13 13 02 F6 | 	mov	arg01, local01
04968     03 14 06 F6 | 	mov	arg02, #3
0496c     01 16 06 F6 | 	mov	arg03, #1
04970     38 59 B2 FD | 	call	#__system__Mid_S
04974     FD 12 02 F6 | 	mov	arg01, result1
04978     BF 01 00 FF 
0497c     2B 14 06 F6 | 	mov	arg02, ##@LR__5658
04980     B8 37 B2 FD | 	call	#__system___string_cmp
04984     00 FA 0D F2 | 	cmp	result1, #0 wz
04988     18 00 90 5D |  if_ne	jmp	#LR__0270
0498c     13 13 02 F6 | 	mov	arg01, local01
04990     02 14 06 F6 | 	mov	arg02, #2
04994     02 16 06 F6 | 	mov	arg03, #2
04998     10 59 B2 FD | 	call	#__system__Mid_S
0499c     FD 28 02 F6 | 	mov	local02, result1
049a0     14 00 90 FD | 	jmp	#LR__0271
049a4                 | LR__0270
049a4     13 13 02 F6 | 	mov	arg01, local01
049a8     02 14 06 F6 | 	mov	arg02, #2
049ac     01 16 06 F6 | 	mov	arg03, #1
049b0     F8 58 B2 FD | 	call	#__system__Mid_S
049b4     FD 28 02 F6 | 	mov	local02, result1
049b8                 | LR__0271
049b8                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
049b8     13 13 02 F6 | 	mov	arg01, local01
049bc     09 2B 02 F6 | 	mov	local03, arg01
049c0     97 06 48 FB | 	callpa	#(@LR__0273-@LR__0272)>>2,fcache_load_ptr_
049c4                 | LR__0272
049c4     15 FB C9 FA | 	rdbyte	result1, local03 wz
049c8     01 2A 06 51 |  if_ne	add	local03, #1
049cc     F4 FF 9F 5D |  if_ne	jmp	#LR__0272
049d0                 | LR__0273
049d0     09 2B 82 F1 | 	sub	local03, arg01
049d4     15 15 02 F6 | 	mov	arg02, local03
049d8     01 14 86 F1 | 	sub	arg02, #1
049dc     13 13 02 F6 | 	mov	arg01, local01
049e0     01 16 06 F6 | 	mov	arg03, #1
049e4     C4 58 B2 FD | 	call	#__system__Mid_S
049e8     FD 12 02 F6 | 	mov	arg01, result1
049ec     BF 01 00 FF 
049f0     2D 14 06 F6 | 	mov	arg02, ##@LR__5659
049f4     44 37 B2 FD | 	call	#__system___string_cmp
049f8     00 FA 0D F2 | 	cmp	result1, #0 wz
049fc     28 00 90 AD |  if_e	jmp	#LR__0274
04a00     13 13 02 F6 | 	mov	arg01, local01
04a04     01 14 06 F6 | 	mov	arg02, #1
04a08     10 58 B2 FD | 	call	#__system__Right_S
04a0c     FD 12 02 F6 | 	mov	arg01, result1
04a10     8C 6D B2 FD | 	call	#__system____builtin_atof
04a14     FD 12 02 F6 | 	mov	arg01, result1
04a18     00 14 06 F6 | 	mov	arg02, #0
04a1c     38 6A B2 FD | 	call	#__system___float_tointeger
04a20     FD 2C 02 F6 | 	mov	local04, result1
04a24     34 00 90 FD | 	jmp	#LR__0275
04a28                 | LR__0274
04a28     13 13 02 F6 | 	mov	arg01, local01
04a2c     01 14 06 F6 | 	mov	arg02, #1
04a30     E8 57 B2 FD | 	call	#__system__Right_S
04a34     FD 12 02 F6 | 	mov	arg01, result1
04a38     64 6D B2 FD | 	call	#__system____builtin_atof
04a3c     FD 14 02 F6 | 	mov	arg02, result1
04a40     00 C0 5F FF 
04a44     00 12 06 F6 | 	mov	arg01, ##-1082130432
04a48     44 65 B2 FD | 	call	#__system___float_mul
04a4c     FD 12 02 F6 | 	mov	arg01, result1
04a50     00 14 06 F6 | 	mov	arg02, #0
04a54     00 6A B2 FD | 	call	#__system___float_tointeger
04a58     FD 2C 02 F6 | 	mov	local04, result1
04a5c                 | LR__0275
04a5c                 | ' 
04a5c                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
04a5c     00 2C 0E F2 | 	cmp	local04, #0 wz
04a60     24 00 90 5D |  if_ne	jmp	#LR__0276
04a64     13 13 02 F6 | 	mov	arg01, local01
04a68     01 14 06 F6 | 	mov	arg02, #1
04a6c     AC 57 B2 FD | 	call	#__system__Right_S
04a70     FD 12 02 F6 | 	mov	arg01, result1
04a74     BF 01 00 FF 
04a78     2F 14 06 F6 | 	mov	arg02, ##@LR__5660
04a7c     BC 36 B2 FD | 	call	#__system___string_cmp
04a80     00 FA 0D F2 | 	cmp	result1, #0 wz
04a84     04 2C 06 56 |  if_ne	mov	local04, #4
04a88                 | LR__0276
04a88                 | ' 
04a88                 | ' select case s1
04a88     14 2F 02 F6 | 	mov	local05, local02
04a8c     BF 01 00 FF 
04a90     31 14 06 F6 | 	mov	arg02, ##@LR__5661
04a94     17 13 02 F6 | 	mov	arg01, local05
04a98     A0 36 B2 FD | 	call	#__system___string_cmp
04a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04aa0     24 01 90 AD |  if_e	jmp	#LR__0277
04aa4     BF 01 00 FF 
04aa8     33 14 06 F6 | 	mov	arg02, ##@LR__5662
04aac     17 13 02 F6 | 	mov	arg01, local05
04ab0     88 36 B2 FD | 	call	#__system___string_cmp
04ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab8     18 01 90 AD |  if_e	jmp	#LR__0278
04abc     BF 01 00 FF 
04ac0     36 14 06 F6 | 	mov	arg02, ##@LR__5663
04ac4     17 13 02 F6 | 	mov	arg01, local05
04ac8     70 36 B2 FD | 	call	#__system___string_cmp
04acc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ad0     0C 01 90 AD |  if_e	jmp	#LR__0279
04ad4     BF 01 00 FF 
04ad8     38 14 06 F6 | 	mov	arg02, ##@LR__5664
04adc     17 13 02 F6 | 	mov	arg01, local05
04ae0     58 36 B2 FD | 	call	#__system___string_cmp
04ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae8     00 01 90 AD |  if_e	jmp	#LR__0280
04aec     BF 01 00 FF 
04af0     3B 14 06 F6 | 	mov	arg02, ##@LR__5665
04af4     17 13 02 F6 | 	mov	arg01, local05
04af8     40 36 B2 FD | 	call	#__system___string_cmp
04afc     00 FA 0D F2 | 	cmp	result1, #0 wz
04b00     F4 00 90 AD |  if_e	jmp	#LR__0281
04b04     BF 01 00 FF 
04b08     3D 14 06 F6 | 	mov	arg02, ##@LR__5666
04b0c     17 13 02 F6 | 	mov	arg01, local05
04b10     28 36 B2 FD | 	call	#__system___string_cmp
04b14     00 FA 0D F2 | 	cmp	result1, #0 wz
04b18     E8 00 90 AD |  if_e	jmp	#LR__0282
04b1c     BF 01 00 FF 
04b20     3F 14 06 F6 | 	mov	arg02, ##@LR__5667
04b24     17 13 02 F6 | 	mov	arg01, local05
04b28     10 36 B2 FD | 	call	#__system___string_cmp
04b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b30     DC 00 90 AD |  if_e	jmp	#LR__0283
04b34     BF 01 00 FF 
04b38     42 14 06 F6 | 	mov	arg02, ##@LR__5668
04b3c     17 13 02 F6 | 	mov	arg01, local05
04b40     F8 35 B2 FD | 	call	#__system___string_cmp
04b44     00 FA 0D F2 | 	cmp	result1, #0 wz
04b48     D0 00 90 AD |  if_e	jmp	#LR__0284
04b4c     BF 01 00 FF 
04b50     44 14 06 F6 | 	mov	arg02, ##@LR__5669
04b54     17 13 02 F6 | 	mov	arg01, local05
04b58     E0 35 B2 FD | 	call	#__system___string_cmp
04b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b60     C4 00 90 AD |  if_e	jmp	#LR__0285
04b64     BF 01 00 FF 
04b68     47 14 06 F6 | 	mov	arg02, ##@LR__5670
04b6c     17 13 02 F6 | 	mov	arg01, local05
04b70     C8 35 B2 FD | 	call	#__system___string_cmp
04b74     00 FA 0D F2 | 	cmp	result1, #0 wz
04b78     B8 00 90 AD |  if_e	jmp	#LR__0286
04b7c     BF 01 00 FF 
04b80     49 14 06 F6 | 	mov	arg02, ##@LR__5671
04b84     17 13 02 F6 | 	mov	arg01, local05
04b88     B0 35 B2 FD | 	call	#__system___string_cmp
04b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b90     AC 00 90 AD |  if_e	jmp	#LR__0287
04b94     BF 01 00 FF 
04b98     4C 14 06 F6 | 	mov	arg02, ##@LR__5672
04b9c     17 13 02 F6 | 	mov	arg01, local05
04ba0     98 35 B2 FD | 	call	#__system___string_cmp
04ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba8     A0 00 90 AD |  if_e	jmp	#LR__0288
04bac     BF 01 00 FF 
04bb0     4E 14 06 F6 | 	mov	arg02, ##@LR__5673
04bb4     17 13 02 F6 | 	mov	arg01, local05
04bb8     80 35 B2 FD | 	call	#__system___string_cmp
04bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
04bc0     94 00 90 AD |  if_e	jmp	#LR__0289
04bc4     9C 00 90 FD | 	jmp	#LR__0290
04bc8                 | LR__0277
04bc8     01 00 00 FF 
04bcc     00 31 06 F6 | 	mov	local06, ##768
04bd0     98 00 90 FD | 	jmp	#LR__0291
04bd4                 | LR__0278
04bd4     01 00 00 FF 
04bd8     01 31 06 F6 | 	mov	local06, ##769
04bdc     8C 00 90 FD | 	jmp	#LR__0291
04be0                 | LR__0279
04be0     01 00 00 FF 
04be4     02 31 06 F6 | 	mov	local06, ##770
04be8     80 00 90 FD | 	jmp	#LR__0291
04bec                 | LR__0280
04bec     01 00 00 FF 
04bf0     03 31 06 F6 | 	mov	local06, ##771
04bf4     74 00 90 FD | 	jmp	#LR__0291
04bf8                 | LR__0281
04bf8     01 00 00 FF 
04bfc     04 31 06 F6 | 	mov	local06, ##772
04c00     68 00 90 FD | 	jmp	#LR__0291
04c04                 | LR__0282
04c04     01 00 00 FF 
04c08     05 31 06 F6 | 	mov	local06, ##773
04c0c     5C 00 90 FD | 	jmp	#LR__0291
04c10                 | LR__0283
04c10     01 00 00 FF 
04c14     06 31 06 F6 | 	mov	local06, ##774
04c18     50 00 90 FD | 	jmp	#LR__0291
04c1c                 | LR__0284
04c1c     01 00 00 FF 
04c20     07 31 06 F6 | 	mov	local06, ##775
04c24     44 00 90 FD | 	jmp	#LR__0291
04c28                 | LR__0285
04c28     01 00 00 FF 
04c2c     08 31 06 F6 | 	mov	local06, ##776
04c30     38 00 90 FD | 	jmp	#LR__0291
04c34                 | LR__0286
04c34     01 00 00 FF 
04c38     09 31 06 F6 | 	mov	local06, ##777
04c3c     2C 00 90 FD | 	jmp	#LR__0291
04c40                 | LR__0287
04c40     01 00 00 FF 
04c44     0A 31 06 F6 | 	mov	local06, ##778
04c48     20 00 90 FD | 	jmp	#LR__0291
04c4c                 | LR__0288
04c4c     01 00 00 FF 
04c50     0B 31 06 F6 | 	mov	local06, ##779
04c54     14 00 90 FD | 	jmp	#LR__0291
04c58                 | LR__0289
04c58     01 00 00 FF 
04c5c     0B 31 06 F6 | 	mov	local06, ##779
04c60     08 00 90 FD | 	jmp	#LR__0291
04c64                 | LR__0290
04c64     00 FA 05 F6 | 	mov	result1, #0
04c68     28 00 90 FD | 	jmp	#LR__0293
04c6c                 | LR__0291
04c6c                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04c6c     FF FF 7F FF 
04c70     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
04c74     18 00 90 CD |  if_b	jmp	#LR__0292
04c78     0A 2C 56 F2 | 	cmps	local04, #10 wc
04c7c     16 33 02 C6 |  if_b	mov	local07, local04
04c80     01 32 66 C0 |  if_b	shl	local07, #1
04c84     16 33 02 C1 |  if_b	add	local07, local04
04c88     02 32 66 C0 |  if_b	shl	local07, #2
04c8c     19 31 02 C1 |  if_b	add	local06, local07
04c90                 | LR__0292
04c90                 | ' return token
04c90     18 FB 01 F6 | 	mov	result1, local06
04c94                 | LR__0293
04c94     A7 F0 03 F6 | 	mov	ptra, fp
04c98     B2 00 A0 FD | 	call	#popregs_
04c9c                 | _isnotename_ret
04c9c     2D 00 64 FD | 	ret
04ca0                 | 
04ca0                 | ' 
04ca0                 | ' ' Check if the part is a separator, return a token or 0 if not found
04ca0                 | ' 
04ca0                 | ' function isseparator(s as string) as ubyte
04ca0                 | _isseparator
04ca0     01 4A 05 F6 | 	mov	COUNT_, #1
04ca4     A8 00 A0 FD | 	call	#pushregs_
04ca8                 | ' 
04ca8                 | ' select case s
04ca8     09 27 02 F6 | 	mov	local01, arg01
04cac     BF 01 00 FF 
04cb0     50 14 06 F6 | 	mov	arg02, ##@LR__5674
04cb4     13 13 02 F6 | 	mov	arg01, local01
04cb8     80 34 B2 FD | 	call	#__system___string_cmp
04cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
04cc0     54 01 90 AD |  if_e	jmp	#LR__0300
04cc4     BF 01 00 FF 
04cc8     52 14 06 F6 | 	mov	arg02, ##@LR__5675
04ccc     13 13 02 F6 | 	mov	arg01, local01
04cd0     68 34 B2 FD | 	call	#__system___string_cmp
04cd4     00 FA 0D F2 | 	cmp	result1, #0 wz
04cd8     44 01 90 AD |  if_e	jmp	#LR__0301
04cdc     BF 01 00 FF 
04ce0     54 14 06 F6 | 	mov	arg02, ##@LR__5676
04ce4     13 13 02 F6 | 	mov	arg01, local01
04ce8     50 34 B2 FD | 	call	#__system___string_cmp
04cec     00 FA 0D F2 | 	cmp	result1, #0 wz
04cf0     34 01 90 AD |  if_e	jmp	#LR__0302
04cf4     BF 01 00 FF 
04cf8     56 14 06 F6 | 	mov	arg02, ##@LR__5677
04cfc     13 13 02 F6 | 	mov	arg01, local01
04d00     38 34 B2 FD | 	call	#__system___string_cmp
04d04     00 FA 0D F2 | 	cmp	result1, #0 wz
04d08     24 01 90 AD |  if_e	jmp	#LR__0303
04d0c     BF 01 00 FF 
04d10     58 14 06 F6 | 	mov	arg02, ##@LR__5678
04d14     13 13 02 F6 | 	mov	arg01, local01
04d18     20 34 B2 FD | 	call	#__system___string_cmp
04d1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d20     14 01 90 AD |  if_e	jmp	#LR__0304
04d24     BF 01 00 FF 
04d28     5A 14 06 F6 | 	mov	arg02, ##@LR__5679
04d2c     13 13 02 F6 | 	mov	arg01, local01
04d30     08 34 B2 FD | 	call	#__system___string_cmp
04d34     00 FA 0D F2 | 	cmp	result1, #0 wz
04d38     04 01 90 AD |  if_e	jmp	#LR__0305
04d3c     BF 01 00 FF 
04d40     5C 14 06 F6 | 	mov	arg02, ##@LR__5680
04d44     13 13 02 F6 | 	mov	arg01, local01
04d48     F0 33 B2 FD | 	call	#__system___string_cmp
04d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d50     F4 00 90 AD |  if_e	jmp	#LR__0306
04d54     BF 01 00 FF 
04d58     5E 14 06 F6 | 	mov	arg02, ##@LR__5681
04d5c     13 13 02 F6 | 	mov	arg01, local01
04d60     D8 33 B2 FD | 	call	#__system___string_cmp
04d64     00 FA 0D F2 | 	cmp	result1, #0 wz
04d68     E4 00 90 AD |  if_e	jmp	#LR__0307
04d6c     BF 01 00 FF 
04d70     60 14 06 F6 | 	mov	arg02, ##@LR__5682
04d74     13 13 02 F6 | 	mov	arg01, local01
04d78     C0 33 B2 FD | 	call	#__system___string_cmp
04d7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d80     D4 00 90 AD |  if_e	jmp	#LR__0308
04d84     BF 01 00 FF 
04d88     62 14 06 F6 | 	mov	arg02, ##@LR__5683
04d8c     13 13 02 F6 | 	mov	arg01, local01
04d90     A8 33 B2 FD | 	call	#__system___string_cmp
04d94     00 FA 0D F2 | 	cmp	result1, #0 wz
04d98     C4 00 90 AD |  if_e	jmp	#LR__0309
04d9c     BF 01 00 FF 
04da0     64 14 06 F6 | 	mov	arg02, ##@LR__5684
04da4     13 13 02 F6 | 	mov	arg01, local01
04da8     90 33 B2 FD | 	call	#__system___string_cmp
04dac     00 FA 0D F2 | 	cmp	result1, #0 wz
04db0     B4 00 90 AD |  if_e	jmp	#LR__0310
04db4     BF 01 00 FF 
04db8     66 14 06 F6 | 	mov	arg02, ##@LR__5685
04dbc     13 13 02 F6 | 	mov	arg01, local01
04dc0     78 33 B2 FD | 	call	#__system___string_cmp
04dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
04dc8     A4 00 90 AD |  if_e	jmp	#LR__0311
04dcc     BF 01 00 FF 
04dd0     68 14 06 F6 | 	mov	arg02, ##@LR__5686
04dd4     13 13 02 F6 | 	mov	arg01, local01
04dd8     60 33 B2 FD | 	call	#__system___string_cmp
04ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
04de0     94 00 90 AD |  if_e	jmp	#LR__0312
04de4     BF 01 00 FF 
04de8     6A 14 06 F6 | 	mov	arg02, ##@LR__5687
04dec     13 13 02 F6 | 	mov	arg01, local01
04df0     48 33 B2 FD | 	call	#__system___string_cmp
04df4     00 FA 0D F2 | 	cmp	result1, #0 wz
04df8     84 00 90 AD |  if_e	jmp	#LR__0313
04dfc     BF 01 00 FF 
04e00     6C 14 06 F6 | 	mov	arg02, ##@LR__5688
04e04     13 13 02 F6 | 	mov	arg01, local01
04e08     30 33 B2 FD | 	call	#__system___string_cmp
04e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e10     74 00 90 AD |  if_e	jmp	#LR__0314
04e14     78 00 90 FD | 	jmp	#LR__0315
04e18                 | LR__0300
04e18     01 FA 05 F6 | 	mov	result1, #1
04e1c     74 00 90 FD | 	jmp	#LR__0316
04e20                 | LR__0301
04e20     02 FA 05 F6 | 	mov	result1, #2
04e24     6C 00 90 FD | 	jmp	#LR__0316
04e28                 | LR__0302
04e28     1B FA 05 F6 | 	mov	result1, #27
04e2c     64 00 90 FD | 	jmp	#LR__0316
04e30                 | LR__0303
04e30     11 FA 05 F6 | 	mov	result1, #17
04e34     5C 00 90 FD | 	jmp	#LR__0316
04e38                 | LR__0304
04e38     05 FA 05 F6 | 	mov	result1, #5
04e3c     54 00 90 FD | 	jmp	#LR__0316
04e40                 | LR__0305
04e40     06 FA 05 F6 | 	mov	result1, #6
04e44     4C 00 90 FD | 	jmp	#LR__0316
04e48                 | LR__0306
04e48     12 FA 05 F6 | 	mov	result1, #18
04e4c     44 00 90 FD | 	jmp	#LR__0316
04e50                 | LR__0307
04e50     13 FA 05 F6 | 	mov	result1, #19
04e54     3C 00 90 FD | 	jmp	#LR__0316
04e58                 | LR__0308
04e58     0C FA 05 F6 | 	mov	result1, #12
04e5c     34 00 90 FD | 	jmp	#LR__0316
04e60                 | LR__0309
04e60     14 FA 05 F6 | 	mov	result1, #20
04e64     2C 00 90 FD | 	jmp	#LR__0316
04e68                 | LR__0310
04e68     15 FA 05 F6 | 	mov	result1, #21
04e6c     24 00 90 FD | 	jmp	#LR__0316
04e70                 | LR__0311
04e70     16 FA 05 F6 | 	mov	result1, #22
04e74     1C 00 90 FD | 	jmp	#LR__0316
04e78                 | LR__0312
04e78     FF FB 05 F6 | 	mov	result1, #511
04e7c     14 00 90 FD | 	jmp	#LR__0316
04e80                 | LR__0313
04e80     0F FA 05 F6 | 	mov	result1, #15
04e84     0C 00 90 FD | 	jmp	#LR__0316
04e88                 | LR__0314
04e88     10 FA 05 F6 | 	mov	result1, #16
04e8c     04 00 90 FD | 	jmp	#LR__0316
04e90                 | LR__0315
04e90     00 FA 05 F6 | 	mov	result1, #0
04e94                 | LR__0316
04e94     A7 F0 03 F6 | 	mov	ptra, fp
04e98     B2 00 A0 FD | 	call	#popregs_
04e9c                 | _isseparator_ret
04e9c     2D 00 64 FD | 	ret
04ea0                 | 
04ea0                 | ' 
04ea0                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04ea0                 | ' 
04ea0                 | ' function iscommand(s as string) as ubyte
04ea0                 | _iscommand
04ea0     01 4A 05 F6 | 	mov	COUNT_, #1
04ea4     A8 00 A0 FD | 	call	#pushregs_
04ea8                 | ' 
04ea8                 | ' select case s
04ea8     09 27 02 F6 | 	mov	local01, arg01
04eac     BF 01 00 FF 
04eb0     70 14 06 F6 | 	mov	arg02, ##@LR__5690
04eb4     13 13 02 F6 | 	mov	arg01, local01
04eb8     80 32 B2 FD | 	call	#__system___string_cmp
04ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ec0     DC 0C 90 AD |  if_e	jmp	#LR__0320
04ec4     BF 01 00 FF 
04ec8     75 14 06 F6 | 	mov	arg02, ##@LR__5691
04ecc     13 13 02 F6 | 	mov	arg01, local01
04ed0     68 32 B2 FD | 	call	#__system___string_cmp
04ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed8     CC 0C 90 AD |  if_e	jmp	#LR__0321
04edc     BF 01 00 FF 
04ee0     78 14 06 F6 | 	mov	arg02, ##@LR__5692
04ee4     13 13 02 F6 | 	mov	arg01, local01
04ee8     50 32 B2 FD | 	call	#__system___string_cmp
04eec     00 FA 0D F2 | 	cmp	result1, #0 wz
04ef0     BC 0C 90 AD |  if_e	jmp	#LR__0322
04ef4     BF 01 00 FF 
04ef8     7D 14 06 F6 | 	mov	arg02, ##@LR__5693
04efc     13 13 02 F6 | 	mov	arg01, local01
04f00     38 32 B2 FD | 	call	#__system___string_cmp
04f04     00 FA 0D F2 | 	cmp	result1, #0 wz
04f08     AC 0C 90 AD |  if_e	jmp	#LR__0323
04f0c     BF 01 00 FF 
04f10     81 14 06 F6 | 	mov	arg02, ##@LR__5694
04f14     13 13 02 F6 | 	mov	arg01, local01
04f18     20 32 B2 FD | 	call	#__system___string_cmp
04f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f20     9C 0C 90 AD |  if_e	jmp	#LR__0324
04f24     BF 01 00 FF 
04f28     86 14 06 F6 | 	mov	arg02, ##@LR__5695
04f2c     13 13 02 F6 | 	mov	arg01, local01
04f30     08 32 B2 FD | 	call	#__system___string_cmp
04f34     00 FA 0D F2 | 	cmp	result1, #0 wz
04f38     8C 0C 90 AD |  if_e	jmp	#LR__0325
04f3c     BF 01 00 FF 
04f40     8A 14 06 F6 | 	mov	arg02, ##@LR__5696
04f44     13 13 02 F6 | 	mov	arg01, local01
04f48     F0 31 B2 FD | 	call	#__system___string_cmp
04f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f50     7C 0C 90 AD |  if_e	jmp	#LR__0326
04f54     BF 01 00 FF 
04f58     8D 14 06 F6 | 	mov	arg02, ##@LR__5697
04f5c     13 13 02 F6 | 	mov	arg01, local01
04f60     D8 31 B2 FD | 	call	#__system___string_cmp
04f64     00 FA 0D F2 | 	cmp	result1, #0 wz
04f68     6C 0C 90 AD |  if_e	jmp	#LR__0327
04f6c     BF 01 00 FF 
04f70     98 14 06 F6 | 	mov	arg02, ##@LR__5698
04f74     13 13 02 F6 | 	mov	arg01, local01
04f78     C0 31 B2 FD | 	call	#__system___string_cmp
04f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f80     5C 0C 90 AD |  if_e	jmp	#LR__0328
04f84     BF 01 00 FF 
04f88     9C 14 06 F6 | 	mov	arg02, ##@LR__5699
04f8c     13 13 02 F6 | 	mov	arg01, local01
04f90     A8 31 B2 FD | 	call	#__system___string_cmp
04f94     00 FA 0D F2 | 	cmp	result1, #0 wz
04f98     4C 0C 90 AD |  if_e	jmp	#LR__0329
04f9c     BF 01 00 FF 
04fa0     A6 14 06 F6 | 	mov	arg02, ##@LR__5700
04fa4     13 13 02 F6 | 	mov	arg01, local01
04fa8     90 31 B2 FD | 	call	#__system___string_cmp
04fac     00 FA 0D F2 | 	cmp	result1, #0 wz
04fb0     3C 0C 90 AD |  if_e	jmp	#LR__0330
04fb4     BF 01 00 FF 
04fb8     AA 14 06 F6 | 	mov	arg02, ##@LR__5701
04fbc     13 13 02 F6 | 	mov	arg01, local01
04fc0     78 31 B2 FD | 	call	#__system___string_cmp
04fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc8     2C 0C 90 AD |  if_e	jmp	#LR__0331
04fcc     BF 01 00 FF 
04fd0     B4 14 06 F6 | 	mov	arg02, ##@LR__5702
04fd4     13 13 02 F6 | 	mov	arg01, local01
04fd8     60 31 B2 FD | 	call	#__system___string_cmp
04fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
04fe0     1C 0C 90 AD |  if_e	jmp	#LR__0332
04fe4     BF 01 00 FF 
04fe8     B8 14 06 F6 | 	mov	arg02, ##@LR__5703
04fec     13 13 02 F6 | 	mov	arg01, local01
04ff0     48 31 B2 FD | 	call	#__system___string_cmp
04ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff8     0C 0C 90 AD |  if_e	jmp	#LR__0333
04ffc     BF 01 00 FF 
05000     C3 14 06 F6 | 	mov	arg02, ##@LR__5704
05004     13 13 02 F6 | 	mov	arg01, local01
05008     30 31 B2 FD | 	call	#__system___string_cmp
0500c     00 FA 0D F2 | 	cmp	result1, #0 wz
05010     FC 0B 90 AD |  if_e	jmp	#LR__0334
05014     BF 01 00 FF 
05018     C7 14 06 F6 | 	mov	arg02, ##@LR__5705
0501c     13 13 02 F6 | 	mov	arg01, local01
05020     18 31 B2 FD | 	call	#__system___string_cmp
05024     00 FA 0D F2 | 	cmp	result1, #0 wz
05028     EC 0B 90 AD |  if_e	jmp	#LR__0335
0502c     BF 01 00 FF 
05030     CE 14 06 F6 | 	mov	arg02, ##@LR__5706
05034     13 13 02 F6 | 	mov	arg01, local01
05038     00 31 B2 FD | 	call	#__system___string_cmp
0503c     00 FA 0D F2 | 	cmp	result1, #0 wz
05040     DC 0B 90 AD |  if_e	jmp	#LR__0336
05044     BF 01 00 FF 
05048     D2 14 06 F6 | 	mov	arg02, ##@LR__5707
0504c     13 13 02 F6 | 	mov	arg01, local01
05050     E8 30 B2 FD | 	call	#__system___string_cmp
05054     00 FA 0D F2 | 	cmp	result1, #0 wz
05058     CC 0B 90 AD |  if_e	jmp	#LR__0337
0505c     BF 01 00 FF 
05060     D8 14 06 F6 | 	mov	arg02, ##@LR__5708
05064     13 13 02 F6 | 	mov	arg01, local01
05068     D0 30 B2 FD | 	call	#__system___string_cmp
0506c     00 FA 0D F2 | 	cmp	result1, #0 wz
05070     BC 0B 90 AD |  if_e	jmp	#LR__0338
05074     BF 01 00 FF 
05078     DE 14 06 F6 | 	mov	arg02, ##@LR__5709
0507c     13 13 02 F6 | 	mov	arg01, local01
05080     B8 30 B2 FD | 	call	#__system___string_cmp
05084     00 FA 0D F2 | 	cmp	result1, #0 wz
05088     AC 0B 90 AD |  if_e	jmp	#LR__0339
0508c     BF 01 00 FF 
05090     E2 14 06 F6 | 	mov	arg02, ##@LR__5710
05094     13 13 02 F6 | 	mov	arg01, local01
05098     A0 30 B2 FD | 	call	#__system___string_cmp
0509c     00 FA 0D F2 | 	cmp	result1, #0 wz
050a0     9C 0B 90 AD |  if_e	jmp	#LR__0340
050a4     BF 01 00 FF 
050a8     EA 14 06 F6 | 	mov	arg02, ##@LR__5711
050ac     13 13 02 F6 | 	mov	arg01, local01
050b0     88 30 B2 FD | 	call	#__system___string_cmp
050b4     00 FA 0D F2 | 	cmp	result1, #0 wz
050b8     8C 0B 90 AD |  if_e	jmp	#LR__0341
050bc     BF 01 00 FF 
050c0     F0 14 06 F6 | 	mov	arg02, ##@LR__5712
050c4     13 13 02 F6 | 	mov	arg01, local01
050c8     70 30 B2 FD | 	call	#__system___string_cmp
050cc     00 FA 0D F2 | 	cmp	result1, #0 wz
050d0     7C 0B 90 AD |  if_e	jmp	#LR__0342
050d4     BF 01 00 FF 
050d8     F3 14 06 F6 | 	mov	arg02, ##@LR__5713
050dc     13 13 02 F6 | 	mov	arg01, local01
050e0     58 30 B2 FD | 	call	#__system___string_cmp
050e4     00 FA 0D F2 | 	cmp	result1, #0 wz
050e8     6C 0B 90 AD |  if_e	jmp	#LR__0343
050ec     BF 01 00 FF 
050f0     F8 14 06 F6 | 	mov	arg02, ##@LR__5714
050f4     13 13 02 F6 | 	mov	arg01, local01
050f8     40 30 B2 FD | 	call	#__system___string_cmp
050fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05100     5C 0B 90 AD |  if_e	jmp	#LR__0344
05104     BF 01 00 FF 
05108     FF 14 06 F6 | 	mov	arg02, ##@LR__5715
0510c     13 13 02 F6 | 	mov	arg01, local01
05110     28 30 B2 FD | 	call	#__system___string_cmp
05114     00 FA 0D F2 | 	cmp	result1, #0 wz
05118     4C 0B 90 AD |  if_e	jmp	#LR__0345
0511c     BF 01 00 FF 
05120     04 15 06 F6 | 	mov	arg02, ##@LR__5716
05124     13 13 02 F6 | 	mov	arg01, local01
05128     10 30 B2 FD | 	call	#__system___string_cmp
0512c     00 FA 0D F2 | 	cmp	result1, #0 wz
05130     3C 0B 90 AD |  if_e	jmp	#LR__0346
05134     BF 01 00 FF 
05138     0C 15 06 F6 | 	mov	arg02, ##@LR__5717
0513c     13 13 02 F6 | 	mov	arg01, local01
05140     F8 2F B2 FD | 	call	#__system___string_cmp
05144     00 FA 0D F2 | 	cmp	result1, #0 wz
05148     2C 0B 90 AD |  if_e	jmp	#LR__0347
0514c     BF 01 00 FF 
05150     13 15 06 F6 | 	mov	arg02, ##@LR__5718
05154     13 13 02 F6 | 	mov	arg01, local01
05158     E0 2F B2 FD | 	call	#__system___string_cmp
0515c     00 FA 0D F2 | 	cmp	result1, #0 wz
05160     1C 0B 90 AD |  if_e	jmp	#LR__0348
05164     BF 01 00 FF 
05168     1A 15 06 F6 | 	mov	arg02, ##@LR__5719
0516c     13 13 02 F6 | 	mov	arg01, local01
05170     C8 2F B2 FD | 	call	#__system___string_cmp
05174     00 FA 0D F2 | 	cmp	result1, #0 wz
05178     0C 0B 90 AD |  if_e	jmp	#LR__0349
0517c     BF 01 00 FF 
05180     24 15 06 F6 | 	mov	arg02, ##@LR__5720
05184     13 13 02 F6 | 	mov	arg01, local01
05188     B0 2F B2 FD | 	call	#__system___string_cmp
0518c     00 FA 0D F2 | 	cmp	result1, #0 wz
05190     FC 0A 90 AD |  if_e	jmp	#LR__0350
05194     BF 01 00 FF 
05198     28 15 06 F6 | 	mov	arg02, ##@LR__5721
0519c     13 13 02 F6 | 	mov	arg01, local01
051a0     98 2F B2 FD | 	call	#__system___string_cmp
051a4     00 FA 0D F2 | 	cmp	result1, #0 wz
051a8     EC 0A 90 AD |  if_e	jmp	#LR__0351
051ac     BF 01 00 FF 
051b0     2C 15 06 F6 | 	mov	arg02, ##@LR__5722
051b4     13 13 02 F6 | 	mov	arg01, local01
051b8     80 2F B2 FD | 	call	#__system___string_cmp
051bc     00 FA 0D F2 | 	cmp	result1, #0 wz
051c0     DC 0A 90 AD |  if_e	jmp	#LR__0352
051c4     BF 01 00 FF 
051c8     33 15 06 F6 | 	mov	arg02, ##@LR__5723
051cc     13 13 02 F6 | 	mov	arg01, local01
051d0     68 2F B2 FD | 	call	#__system___string_cmp
051d4     00 FA 0D F2 | 	cmp	result1, #0 wz
051d8     CC 0A 90 AD |  if_e	jmp	#LR__0353
051dc     BF 01 00 FF 
051e0     37 15 06 F6 | 	mov	arg02, ##@LR__5724
051e4     13 13 02 F6 | 	mov	arg01, local01
051e8     50 2F B2 FD | 	call	#__system___string_cmp
051ec     00 FA 0D F2 | 	cmp	result1, #0 wz
051f0     BC 0A 90 AD |  if_e	jmp	#LR__0354
051f4     BF 01 00 FF 
051f8     3B 15 06 F6 | 	mov	arg02, ##@LR__5725
051fc     13 13 02 F6 | 	mov	arg01, local01
05200     38 2F B2 FD | 	call	#__system___string_cmp
05204     00 FA 0D F2 | 	cmp	result1, #0 wz
05208     AC 0A 90 AD |  if_e	jmp	#LR__0355
0520c     BF 01 00 FF 
05210     41 15 06 F6 | 	mov	arg02, ##@LR__5726
05214     13 13 02 F6 | 	mov	arg01, local01
05218     20 2F B2 FD | 	call	#__system___string_cmp
0521c     00 FA 0D F2 | 	cmp	result1, #0 wz
05220     9C 0A 90 AD |  if_e	jmp	#LR__0356
05224     BF 01 00 FF 
05228     46 15 06 F6 | 	mov	arg02, ##@LR__5727
0522c     13 13 02 F6 | 	mov	arg01, local01
05230     08 2F B2 FD | 	call	#__system___string_cmp
05234     00 FA 0D F2 | 	cmp	result1, #0 wz
05238     8C 0A 90 AD |  if_e	jmp	#LR__0357
0523c     BF 01 00 FF 
05240     4D 15 06 F6 | 	mov	arg02, ##@LR__5728
05244     13 13 02 F6 | 	mov	arg01, local01
05248     F0 2E B2 FD | 	call	#__system___string_cmp
0524c     00 FA 0D F2 | 	cmp	result1, #0 wz
05250     7C 0A 90 AD |  if_e	jmp	#LR__0358
05254     BF 01 00 FF 
05258     51 15 06 F6 | 	mov	arg02, ##@LR__5729
0525c     13 13 02 F6 | 	mov	arg01, local01
05260     D8 2E B2 FD | 	call	#__system___string_cmp
05264     00 FA 0D F2 | 	cmp	result1, #0 wz
05268     6C 0A 90 AD |  if_e	jmp	#LR__0359
0526c     BF 01 00 FF 
05270     56 15 06 F6 | 	mov	arg02, ##@LR__5730
05274     13 13 02 F6 | 	mov	arg01, local01
05278     C0 2E B2 FD | 	call	#__system___string_cmp
0527c     00 FA 0D F2 | 	cmp	result1, #0 wz
05280     5C 0A 90 AD |  if_e	jmp	#LR__0360
05284     BF 01 00 FF 
05288     5A 15 06 F6 | 	mov	arg02, ##@LR__5731
0528c     13 13 02 F6 | 	mov	arg01, local01
05290     A8 2E B2 FD | 	call	#__system___string_cmp
05294     00 FA 0D F2 | 	cmp	result1, #0 wz
05298     4C 0A 90 AD |  if_e	jmp	#LR__0361
0529c     BF 01 00 FF 
052a0     60 15 06 F6 | 	mov	arg02, ##@LR__5732
052a4     13 13 02 F6 | 	mov	arg01, local01
052a8     90 2E B2 FD | 	call	#__system___string_cmp
052ac     00 FA 0D F2 | 	cmp	result1, #0 wz
052b0     3C 0A 90 AD |  if_e	jmp	#LR__0362
052b4     BF 01 00 FF 
052b8     63 15 06 F6 | 	mov	arg02, ##@LR__5733
052bc     13 13 02 F6 | 	mov	arg01, local01
052c0     78 2E B2 FD | 	call	#__system___string_cmp
052c4     00 FA 0D F2 | 	cmp	result1, #0 wz
052c8     2C 0A 90 AD |  if_e	jmp	#LR__0363
052cc     BF 01 00 FF 
052d0     6B 15 06 F6 | 	mov	arg02, ##@LR__5734
052d4     13 13 02 F6 | 	mov	arg01, local01
052d8     60 2E B2 FD | 	call	#__system___string_cmp
052dc     00 FA 0D F2 | 	cmp	result1, #0 wz
052e0     1C 0A 90 AD |  if_e	jmp	#LR__0364
052e4     BF 01 00 FF 
052e8     6F 15 06 F6 | 	mov	arg02, ##@LR__5735
052ec     13 13 02 F6 | 	mov	arg01, local01
052f0     48 2E B2 FD | 	call	#__system___string_cmp
052f4     00 FA 0D F2 | 	cmp	result1, #0 wz
052f8     0C 0A 90 AD |  if_e	jmp	#LR__0365
052fc     BF 01 00 FF 
05300     74 15 06 F6 | 	mov	arg02, ##@LR__5736
05304     13 13 02 F6 | 	mov	arg01, local01
05308     30 2E B2 FD | 	call	#__system___string_cmp
0530c     00 FA 0D F2 | 	cmp	result1, #0 wz
05310     FC 09 90 AD |  if_e	jmp	#LR__0366
05314     BF 01 00 FF 
05318     78 15 06 F6 | 	mov	arg02, ##@LR__5737
0531c     13 13 02 F6 | 	mov	arg01, local01
05320     18 2E B2 FD | 	call	#__system___string_cmp
05324     00 FA 0D F2 | 	cmp	result1, #0 wz
05328     EC 09 90 AD |  if_e	jmp	#LR__0367
0532c     BF 01 00 FF 
05330     7D 15 06 F6 | 	mov	arg02, ##@LR__5738
05334     13 13 02 F6 | 	mov	arg01, local01
05338     00 2E B2 FD | 	call	#__system___string_cmp
0533c     00 FA 0D F2 | 	cmp	result1, #0 wz
05340     DC 09 90 AD |  if_e	jmp	#LR__0368
05344     BF 01 00 FF 
05348     81 15 06 F6 | 	mov	arg02, ##@LR__5739
0534c     13 13 02 F6 | 	mov	arg01, local01
05350     E8 2D B2 FD | 	call	#__system___string_cmp
05354     00 FA 0D F2 | 	cmp	result1, #0 wz
05358     CC 09 90 AD |  if_e	jmp	#LR__0369
0535c     BF 01 00 FF 
05360     84 15 06 F6 | 	mov	arg02, ##@LR__5740
05364     13 13 02 F6 | 	mov	arg01, local01
05368     D0 2D B2 FD | 	call	#__system___string_cmp
0536c     00 FA 0D F2 | 	cmp	result1, #0 wz
05370     BC 09 90 AD |  if_e	jmp	#LR__0370
05374     BF 01 00 FF 
05378     8A 15 06 F6 | 	mov	arg02, ##@LR__5741
0537c     13 13 02 F6 | 	mov	arg01, local01
05380     B8 2D B2 FD | 	call	#__system___string_cmp
05384     00 FA 0D F2 | 	cmp	result1, #0 wz
05388     AC 09 90 AD |  if_e	jmp	#LR__0371
0538c     BF 01 00 FF 
05390     8E 15 06 F6 | 	mov	arg02, ##@LR__5742
05394     13 13 02 F6 | 	mov	arg01, local01
05398     A0 2D B2 FD | 	call	#__system___string_cmp
0539c     00 FA 0D F2 | 	cmp	result1, #0 wz
053a0     9C 09 90 AD |  if_e	jmp	#LR__0372
053a4     BF 01 00 FF 
053a8     92 15 06 F6 | 	mov	arg02, ##@LR__5743
053ac     13 13 02 F6 | 	mov	arg01, local01
053b0     88 2D B2 FD | 	call	#__system___string_cmp
053b4     00 FA 0D F2 | 	cmp	result1, #0 wz
053b8     8C 09 90 AD |  if_e	jmp	#LR__0373
053bc     BF 01 00 FF 
053c0     98 15 06 F6 | 	mov	arg02, ##@LR__5744
053c4     13 13 02 F6 | 	mov	arg01, local01
053c8     70 2D B2 FD | 	call	#__system___string_cmp
053cc     00 FA 0D F2 | 	cmp	result1, #0 wz
053d0     7C 09 90 AD |  if_e	jmp	#LR__0374
053d4     BF 01 00 FF 
053d8     9D 15 06 F6 | 	mov	arg02, ##@LR__5745
053dc     13 13 02 F6 | 	mov	arg01, local01
053e0     58 2D B2 FD | 	call	#__system___string_cmp
053e4     00 FA 0D F2 | 	cmp	result1, #0 wz
053e8     6C 09 90 AD |  if_e	jmp	#LR__0375
053ec     BF 01 00 FF 
053f0     A0 15 06 F6 | 	mov	arg02, ##@LR__5746
053f4     13 13 02 F6 | 	mov	arg01, local01
053f8     40 2D B2 FD | 	call	#__system___string_cmp
053fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05400     5C 09 90 AD |  if_e	jmp	#LR__0376
05404     BF 01 00 FF 
05408     A3 15 06 F6 | 	mov	arg02, ##@LR__5747
0540c     13 13 02 F6 | 	mov	arg01, local01
05410     28 2D B2 FD | 	call	#__system___string_cmp
05414     00 FA 0D F2 | 	cmp	result1, #0 wz
05418     4C 09 90 AD |  if_e	jmp	#LR__0377
0541c     BF 01 00 FF 
05420     A7 15 06 F6 | 	mov	arg02, ##@LR__5748
05424     13 13 02 F6 | 	mov	arg01, local01
05428     10 2D B2 FD | 	call	#__system___string_cmp
0542c     00 FA 0D F2 | 	cmp	result1, #0 wz
05430     3C 09 90 AD |  if_e	jmp	#LR__0378
05434     BF 01 00 FF 
05438     AA 15 06 F6 | 	mov	arg02, ##@LR__5749
0543c     13 13 02 F6 | 	mov	arg01, local01
05440     F8 2C B2 FD | 	call	#__system___string_cmp
05444     00 FA 0D F2 | 	cmp	result1, #0 wz
05448     2C 09 90 AD |  if_e	jmp	#LR__0379
0544c     BF 01 00 FF 
05450     B0 15 06 F6 | 	mov	arg02, ##@LR__5750
05454     13 13 02 F6 | 	mov	arg01, local01
05458     E0 2C B2 FD | 	call	#__system___string_cmp
0545c     00 FA 0D F2 | 	cmp	result1, #0 wz
05460     1C 09 90 AD |  if_e	jmp	#LR__0380
05464     BF 01 00 FF 
05468     B5 15 06 F6 | 	mov	arg02, ##@LR__5751
0546c     13 13 02 F6 | 	mov	arg01, local01
05470     C8 2C B2 FD | 	call	#__system___string_cmp
05474     00 FA 0D F2 | 	cmp	result1, #0 wz
05478     0C 09 90 AD |  if_e	jmp	#LR__0381
0547c     BF 01 00 FF 
05480     B8 15 06 F6 | 	mov	arg02, ##@LR__5752
05484     13 13 02 F6 | 	mov	arg01, local01
05488     B0 2C B2 FD | 	call	#__system___string_cmp
0548c     00 FA 0D F2 | 	cmp	result1, #0 wz
05490     FC 08 90 AD |  if_e	jmp	#LR__0382
05494     BF 01 00 FF 
05498     BD 15 06 F6 | 	mov	arg02, ##@LR__5753
0549c     13 13 02 F6 | 	mov	arg01, local01
054a0     98 2C B2 FD | 	call	#__system___string_cmp
054a4     00 FA 0D F2 | 	cmp	result1, #0 wz
054a8     EC 08 90 AD |  if_e	jmp	#LR__0383
054ac     BF 01 00 FF 
054b0     C1 15 06 F6 | 	mov	arg02, ##@LR__5754
054b4     13 13 02 F6 | 	mov	arg01, local01
054b8     80 2C B2 FD | 	call	#__system___string_cmp
054bc     00 FA 0D F2 | 	cmp	result1, #0 wz
054c0     DC 08 90 AD |  if_e	jmp	#LR__0384
054c4     BF 01 00 FF 
054c8     C7 15 06 F6 | 	mov	arg02, ##@LR__5755
054cc     13 13 02 F6 | 	mov	arg01, local01
054d0     68 2C B2 FD | 	call	#__system___string_cmp
054d4     00 FA 0D F2 | 	cmp	result1, #0 wz
054d8     CC 08 90 AD |  if_e	jmp	#LR__0385
054dc     BF 01 00 FF 
054e0     CD 15 06 F6 | 	mov	arg02, ##@LR__5756
054e4     13 13 02 F6 | 	mov	arg01, local01
054e8     50 2C B2 FD | 	call	#__system___string_cmp
054ec     00 FA 0D F2 | 	cmp	result1, #0 wz
054f0     BC 08 90 AD |  if_e	jmp	#LR__0386
054f4     BF 01 00 FF 
054f8     D2 15 06 F6 | 	mov	arg02, ##@LR__5757
054fc     13 13 02 F6 | 	mov	arg01, local01
05500     38 2C B2 FD | 	call	#__system___string_cmp
05504     00 FA 0D F2 | 	cmp	result1, #0 wz
05508     AC 08 90 AD |  if_e	jmp	#LR__0387
0550c     BF 01 00 FF 
05510     D5 15 06 F6 | 	mov	arg02, ##@LR__5758
05514     13 13 02 F6 | 	mov	arg01, local01
05518     20 2C B2 FD | 	call	#__system___string_cmp
0551c     00 FA 0D F2 | 	cmp	result1, #0 wz
05520     9C 08 90 AD |  if_e	jmp	#LR__0388
05524     BF 01 00 FF 
05528     DB 15 06 F6 | 	mov	arg02, ##@LR__5759
0552c     13 13 02 F6 | 	mov	arg01, local01
05530     08 2C B2 FD | 	call	#__system___string_cmp
05534     00 FA 0D F2 | 	cmp	result1, #0 wz
05538     8C 08 90 AD |  if_e	jmp	#LR__0389
0553c     BF 01 00 FF 
05540     DF 15 06 F6 | 	mov	arg02, ##@LR__5760
05544     13 13 02 F6 | 	mov	arg01, local01
05548     F0 2B B2 FD | 	call	#__system___string_cmp
0554c     00 FA 0D F2 | 	cmp	result1, #0 wz
05550     7C 08 90 AD |  if_e	jmp	#LR__0390
05554     BF 01 00 FF 
05558     E4 15 06 F6 | 	mov	arg02, ##@LR__5761
0555c     13 13 02 F6 | 	mov	arg01, local01
05560     D8 2B B2 FD | 	call	#__system___string_cmp
05564     00 FA 0D F2 | 	cmp	result1, #0 wz
05568     6C 08 90 AD |  if_e	jmp	#LR__0391
0556c     BF 01 00 FF 
05570     E7 15 06 F6 | 	mov	arg02, ##@LR__5762
05574     13 13 02 F6 | 	mov	arg01, local01
05578     C0 2B B2 FD | 	call	#__system___string_cmp
0557c     00 FA 0D F2 | 	cmp	result1, #0 wz
05580     5C 08 90 AD |  if_e	jmp	#LR__0392
05584     BF 01 00 FF 
05588     EA 15 06 F6 | 	mov	arg02, ##@LR__5763
0558c     13 13 02 F6 | 	mov	arg01, local01
05590     A8 2B B2 FD | 	call	#__system___string_cmp
05594     00 FA 0D F2 | 	cmp	result1, #0 wz
05598     4C 08 90 AD |  if_e	jmp	#LR__0393
0559c     BF 01 00 FF 
055a0     EF 15 06 F6 | 	mov	arg02, ##@LR__5764
055a4     13 13 02 F6 | 	mov	arg01, local01
055a8     90 2B B2 FD | 	call	#__system___string_cmp
055ac     00 FA 0D F2 | 	cmp	result1, #0 wz
055b0     3C 08 90 AD |  if_e	jmp	#LR__0394
055b4     BF 01 00 FF 
055b8     F5 15 06 F6 | 	mov	arg02, ##@LR__5765
055bc     13 13 02 F6 | 	mov	arg01, local01
055c0     78 2B B2 FD | 	call	#__system___string_cmp
055c4     00 FA 0D F2 | 	cmp	result1, #0 wz
055c8     2C 08 90 AD |  if_e	jmp	#LR__0395
055cc     BF 01 00 FF 
055d0     F9 15 06 F6 | 	mov	arg02, ##@LR__5766
055d4     13 13 02 F6 | 	mov	arg01, local01
055d8     60 2B B2 FD | 	call	#__system___string_cmp
055dc     00 FA 0D F2 | 	cmp	result1, #0 wz
055e0     1C 08 90 AD |  if_e	jmp	#LR__0396
055e4     C0 01 00 FF 
055e8     02 14 06 F6 | 	mov	arg02, ##@LR__5767
055ec     13 13 02 F6 | 	mov	arg01, local01
055f0     48 2B B2 FD | 	call	#__system___string_cmp
055f4     00 FA 0D F2 | 	cmp	result1, #0 wz
055f8     0C 08 90 AD |  if_e	jmp	#LR__0397
055fc     C0 01 00 FF 
05600     08 14 06 F6 | 	mov	arg02, ##@LR__5768
05604     13 13 02 F6 | 	mov	arg01, local01
05608     30 2B B2 FD | 	call	#__system___string_cmp
0560c     00 FA 0D F2 | 	cmp	result1, #0 wz
05610     FC 07 90 AD |  if_e	jmp	#LR__0398
05614     C0 01 00 FF 
05618     0E 14 06 F6 | 	mov	arg02, ##@LR__5769
0561c     13 13 02 F6 | 	mov	arg01, local01
05620     18 2B B2 FD | 	call	#__system___string_cmp
05624     00 FA 0D F2 | 	cmp	result1, #0 wz
05628     EC 07 90 AD |  if_e	jmp	#LR__0399
0562c     C0 01 00 FF 
05630     17 14 06 F6 | 	mov	arg02, ##@LR__5770
05634     13 13 02 F6 | 	mov	arg01, local01
05638     00 2B B2 FD | 	call	#__system___string_cmp
0563c     00 FA 0D F2 | 	cmp	result1, #0 wz
05640     DC 07 90 AD |  if_e	jmp	#LR__0400
05644     C0 01 00 FF 
05648     21 14 06 F6 | 	mov	arg02, ##@LR__5771
0564c     13 13 02 F6 | 	mov	arg01, local01
05650     E8 2A B2 FD | 	call	#__system___string_cmp
05654     00 FA 0D F2 | 	cmp	result1, #0 wz
05658     CC 07 90 AD |  if_e	jmp	#LR__0401
0565c     C0 01 00 FF 
05660     2A 14 06 F6 | 	mov	arg02, ##@LR__5772
05664     13 13 02 F6 | 	mov	arg01, local01
05668     D0 2A B2 FD | 	call	#__system___string_cmp
0566c     00 FA 0D F2 | 	cmp	result1, #0 wz
05670     BC 07 90 AD |  if_e	jmp	#LR__0402
05674     C0 01 00 FF 
05678     2F 14 06 F6 | 	mov	arg02, ##@LR__5773
0567c     13 13 02 F6 | 	mov	arg01, local01
05680     B8 2A B2 FD | 	call	#__system___string_cmp
05684     00 FA 0D F2 | 	cmp	result1, #0 wz
05688     AC 07 90 AD |  if_e	jmp	#LR__0403
0568c     C0 01 00 FF 
05690     32 14 06 F6 | 	mov	arg02, ##@LR__5774
05694     13 13 02 F6 | 	mov	arg01, local01
05698     A0 2A B2 FD | 	call	#__system___string_cmp
0569c     00 FA 0D F2 | 	cmp	result1, #0 wz
056a0     9C 07 90 AD |  if_e	jmp	#LR__0404
056a4     C0 01 00 FF 
056a8     37 14 06 F6 | 	mov	arg02, ##@LR__5775
056ac     13 13 02 F6 | 	mov	arg01, local01
056b0     88 2A B2 FD | 	call	#__system___string_cmp
056b4     00 FA 0D F2 | 	cmp	result1, #0 wz
056b8     8C 07 90 AD |  if_e	jmp	#LR__0405
056bc     C0 01 00 FF 
056c0     3B 14 06 F6 | 	mov	arg02, ##@LR__5776
056c4     13 13 02 F6 | 	mov	arg01, local01
056c8     70 2A B2 FD | 	call	#__system___string_cmp
056cc     00 FA 0D F2 | 	cmp	result1, #0 wz
056d0     7C 07 90 AD |  if_e	jmp	#LR__0406
056d4     C0 01 00 FF 
056d8     40 14 06 F6 | 	mov	arg02, ##@LR__5777
056dc     13 13 02 F6 | 	mov	arg01, local01
056e0     58 2A B2 FD | 	call	#__system___string_cmp
056e4     00 FA 0D F2 | 	cmp	result1, #0 wz
056e8     6C 07 90 AD |  if_e	jmp	#LR__0407
056ec     C0 01 00 FF 
056f0     44 14 06 F6 | 	mov	arg02, ##@LR__5778
056f4     13 13 02 F6 | 	mov	arg01, local01
056f8     40 2A B2 FD | 	call	#__system___string_cmp
056fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05700     5C 07 90 AD |  if_e	jmp	#LR__0408
05704     C0 01 00 FF 
05708     4D 14 06 F6 | 	mov	arg02, ##@LR__5779
0570c     13 13 02 F6 | 	mov	arg01, local01
05710     28 2A B2 FD | 	call	#__system___string_cmp
05714     00 FA 0D F2 | 	cmp	result1, #0 wz
05718     4C 07 90 AD |  if_e	jmp	#LR__0409
0571c     C0 01 00 FF 
05720     52 14 06 F6 | 	mov	arg02, ##@LR__5780
05724     13 13 02 F6 | 	mov	arg01, local01
05728     10 2A B2 FD | 	call	#__system___string_cmp
0572c     00 FA 0D F2 | 	cmp	result1, #0 wz
05730     3C 07 90 AD |  if_e	jmp	#LR__0410
05734     C0 01 00 FF 
05738     58 14 06 F6 | 	mov	arg02, ##@LR__5781
0573c     13 13 02 F6 | 	mov	arg01, local01
05740     F8 29 B2 FD | 	call	#__system___string_cmp
05744     00 FA 0D F2 | 	cmp	result1, #0 wz
05748     2C 07 90 AD |  if_e	jmp	#LR__0411
0574c     C0 01 00 FF 
05750     5A 14 06 F6 | 	mov	arg02, ##@LR__5782
05754     13 13 02 F6 | 	mov	arg01, local01
05758     E0 29 B2 FD | 	call	#__system___string_cmp
0575c     00 FA 0D F2 | 	cmp	result1, #0 wz
05760     1C 07 90 AD |  if_e	jmp	#LR__0412
05764     C0 01 00 FF 
05768     5E 14 06 F6 | 	mov	arg02, ##@LR__5783
0576c     13 13 02 F6 | 	mov	arg01, local01
05770     C8 29 B2 FD | 	call	#__system___string_cmp
05774     00 FA 0D F2 | 	cmp	result1, #0 wz
05778     0C 07 90 AD |  if_e	jmp	#LR__0413
0577c     C0 01 00 FF 
05780     62 14 06 F6 | 	mov	arg02, ##@LR__5784
05784     13 13 02 F6 | 	mov	arg01, local01
05788     B0 29 B2 FD | 	call	#__system___string_cmp
0578c     00 FA 0D F2 | 	cmp	result1, #0 wz
05790     FC 06 90 AD |  if_e	jmp	#LR__0414
05794     C0 01 00 FF 
05798     67 14 06 F6 | 	mov	arg02, ##@LR__5785
0579c     13 13 02 F6 | 	mov	arg01, local01
057a0     98 29 B2 FD | 	call	#__system___string_cmp
057a4     00 FA 0D F2 | 	cmp	result1, #0 wz
057a8     EC 06 90 AD |  if_e	jmp	#LR__0415
057ac     C0 01 00 FF 
057b0     6F 14 06 F6 | 	mov	arg02, ##@LR__5786
057b4     13 13 02 F6 | 	mov	arg01, local01
057b8     80 29 B2 FD | 	call	#__system___string_cmp
057bc     00 FA 0D F2 | 	cmp	result1, #0 wz
057c0     DC 06 90 AD |  if_e	jmp	#LR__0416
057c4     C0 01 00 FF 
057c8     73 14 06 F6 | 	mov	arg02, ##@LR__5787
057cc     13 13 02 F6 | 	mov	arg01, local01
057d0     68 29 B2 FD | 	call	#__system___string_cmp
057d4     00 FA 0D F2 | 	cmp	result1, #0 wz
057d8     CC 06 90 AD |  if_e	jmp	#LR__0417
057dc     C0 01 00 FF 
057e0     75 14 06 F6 | 	mov	arg02, ##@LR__5788
057e4     13 13 02 F6 | 	mov	arg01, local01
057e8     50 29 B2 FD | 	call	#__system___string_cmp
057ec     00 FA 0D F2 | 	cmp	result1, #0 wz
057f0     BC 06 90 AD |  if_e	jmp	#LR__0418
057f4     C0 01 00 FF 
057f8     7D 14 06 F6 | 	mov	arg02, ##@LR__5789
057fc     13 13 02 F6 | 	mov	arg01, local01
05800     38 29 B2 FD | 	call	#__system___string_cmp
05804     00 FA 0D F2 | 	cmp	result1, #0 wz
05808     AC 06 90 AD |  if_e	jmp	#LR__0419
0580c     C0 01 00 FF 
05810     8C 14 06 F6 | 	mov	arg02, ##@LR__5790
05814     13 13 02 F6 | 	mov	arg01, local01
05818     20 29 B2 FD | 	call	#__system___string_cmp
0581c     00 FA 0D F2 | 	cmp	result1, #0 wz
05820     9C 06 90 AD |  if_e	jmp	#LR__0420
05824     C0 01 00 FF 
05828     90 14 06 F6 | 	mov	arg02, ##@LR__5791
0582c     13 13 02 F6 | 	mov	arg01, local01
05830     08 29 B2 FD | 	call	#__system___string_cmp
05834     00 FA 0D F2 | 	cmp	result1, #0 wz
05838     8C 06 90 AD |  if_e	jmp	#LR__0421
0583c     C0 01 00 FF 
05840     97 14 06 F6 | 	mov	arg02, ##@LR__5792
05844     13 13 02 F6 | 	mov	arg01, local01
05848     F0 28 B2 FD | 	call	#__system___string_cmp
0584c     00 FA 0D F2 | 	cmp	result1, #0 wz
05850     7C 06 90 AD |  if_e	jmp	#LR__0422
05854     C0 01 00 FF 
05858     9B 14 06 F6 | 	mov	arg02, ##@LR__5793
0585c     13 13 02 F6 | 	mov	arg01, local01
05860     D8 28 B2 FD | 	call	#__system___string_cmp
05864     00 FA 0D F2 | 	cmp	result1, #0 wz
05868     6C 06 90 AD |  if_e	jmp	#LR__0423
0586c     C0 01 00 FF 
05870     A0 14 06 F6 | 	mov	arg02, ##@LR__5794
05874     13 13 02 F6 | 	mov	arg01, local01
05878     C0 28 B2 FD | 	call	#__system___string_cmp
0587c     00 FA 0D F2 | 	cmp	result1, #0 wz
05880     5C 06 90 AD |  if_e	jmp	#LR__0424
05884     C0 01 00 FF 
05888     A3 14 06 F6 | 	mov	arg02, ##@LR__5795
0588c     13 13 02 F6 | 	mov	arg01, local01
05890     A8 28 B2 FD | 	call	#__system___string_cmp
05894     00 FA 0D F2 | 	cmp	result1, #0 wz
05898     4C 06 90 AD |  if_e	jmp	#LR__0425
0589c     C0 01 00 FF 
058a0     AC 14 06 F6 | 	mov	arg02, ##@LR__5796
058a4     13 13 02 F6 | 	mov	arg01, local01
058a8     90 28 B2 FD | 	call	#__system___string_cmp
058ac     00 FA 0D F2 | 	cmp	result1, #0 wz
058b0     3C 06 90 AD |  if_e	jmp	#LR__0426
058b4     C0 01 00 FF 
058b8     B0 14 06 F6 | 	mov	arg02, ##@LR__5797
058bc     13 13 02 F6 | 	mov	arg01, local01
058c0     78 28 B2 FD | 	call	#__system___string_cmp
058c4     00 FA 0D F2 | 	cmp	result1, #0 wz
058c8     2C 06 90 AD |  if_e	jmp	#LR__0427
058cc     C0 01 00 FF 
058d0     B9 14 06 F6 | 	mov	arg02, ##@LR__5798
058d4     13 13 02 F6 | 	mov	arg01, local01
058d8     60 28 B2 FD | 	call	#__system___string_cmp
058dc     00 FA 0D F2 | 	cmp	result1, #0 wz
058e0     1C 06 90 AD |  if_e	jmp	#LR__0428
058e4     C0 01 00 FF 
058e8     BD 14 06 F6 | 	mov	arg02, ##@LR__5799
058ec     13 13 02 F6 | 	mov	arg01, local01
058f0     48 28 B2 FD | 	call	#__system___string_cmp
058f4     00 FA 0D F2 | 	cmp	result1, #0 wz
058f8     0C 06 90 AD |  if_e	jmp	#LR__0429
058fc     C0 01 00 FF 
05900     C4 14 06 F6 | 	mov	arg02, ##@LR__5800
05904     13 13 02 F6 | 	mov	arg01, local01
05908     30 28 B2 FD | 	call	#__system___string_cmp
0590c     00 FA 0D F2 | 	cmp	result1, #0 wz
05910     FC 05 90 AD |  if_e	jmp	#LR__0430
05914     C0 01 00 FF 
05918     C8 14 06 F6 | 	mov	arg02, ##@LR__5801
0591c     13 13 02 F6 | 	mov	arg01, local01
05920     18 28 B2 FD | 	call	#__system___string_cmp
05924     00 FA 0D F2 | 	cmp	result1, #0 wz
05928     EC 05 90 AD |  if_e	jmp	#LR__0431
0592c     C0 01 00 FF 
05930     CF 14 06 F6 | 	mov	arg02, ##@LR__5802
05934     13 13 02 F6 | 	mov	arg01, local01
05938     00 28 B2 FD | 	call	#__system___string_cmp
0593c     00 FA 0D F2 | 	cmp	result1, #0 wz
05940     DC 05 90 AD |  if_e	jmp	#LR__0432
05944     C0 01 00 FF 
05948     D3 14 06 F6 | 	mov	arg02, ##@LR__5803
0594c     13 13 02 F6 | 	mov	arg01, local01
05950     E8 27 B2 FD | 	call	#__system___string_cmp
05954     00 FA 0D F2 | 	cmp	result1, #0 wz
05958     CC 05 90 AD |  if_e	jmp	#LR__0433
0595c     C0 01 00 FF 
05960     DA 14 06 F6 | 	mov	arg02, ##@LR__5804
05964     13 13 02 F6 | 	mov	arg01, local01
05968     D0 27 B2 FD | 	call	#__system___string_cmp
0596c     00 FA 0D F2 | 	cmp	result1, #0 wz
05970     BC 05 90 AD |  if_e	jmp	#LR__0434
05974     C0 01 00 FF 
05978     DE 14 06 F6 | 	mov	arg02, ##@LR__5805
0597c     13 13 02 F6 | 	mov	arg01, local01
05980     B8 27 B2 FD | 	call	#__system___string_cmp
05984     00 FA 0D F2 | 	cmp	result1, #0 wz
05988     AC 05 90 AD |  if_e	jmp	#LR__0435
0598c     C0 01 00 FF 
05990     E9 14 06 F6 | 	mov	arg02, ##@LR__5806
05994     13 13 02 F6 | 	mov	arg01, local01
05998     A0 27 B2 FD | 	call	#__system___string_cmp
0599c     00 FA 0D F2 | 	cmp	result1, #0 wz
059a0     9C 05 90 AD |  if_e	jmp	#LR__0436
059a4     C0 01 00 FF 
059a8     ED 14 06 F6 | 	mov	arg02, ##@LR__5807
059ac     13 13 02 F6 | 	mov	arg01, local01
059b0     88 27 B2 FD | 	call	#__system___string_cmp
059b4     00 FA 0D F2 | 	cmp	result1, #0 wz
059b8     8C 05 90 AD |  if_e	jmp	#LR__0437
059bc     C0 01 00 FF 
059c0     F4 14 06 F6 | 	mov	arg02, ##@LR__5808
059c4     13 13 02 F6 | 	mov	arg01, local01
059c8     70 27 B2 FD | 	call	#__system___string_cmp
059cc     00 FA 0D F2 | 	cmp	result1, #0 wz
059d0     7C 05 90 AD |  if_e	jmp	#LR__0438
059d4     C0 01 00 FF 
059d8     F8 14 06 F6 | 	mov	arg02, ##@LR__5809
059dc     13 13 02 F6 | 	mov	arg01, local01
059e0     58 27 B2 FD | 	call	#__system___string_cmp
059e4     00 FA 0D F2 | 	cmp	result1, #0 wz
059e8     6C 05 90 AD |  if_e	jmp	#LR__0439
059ec     C0 01 00 FF 
059f0     00 15 06 F6 | 	mov	arg02, ##@LR__5810
059f4     13 13 02 F6 | 	mov	arg01, local01
059f8     40 27 B2 FD | 	call	#__system___string_cmp
059fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05a00     5C 05 90 AD |  if_e	jmp	#LR__0440
05a04     C0 01 00 FF 
05a08     04 15 06 F6 | 	mov	arg02, ##@LR__5811
05a0c     13 13 02 F6 | 	mov	arg01, local01
05a10     28 27 B2 FD | 	call	#__system___string_cmp
05a14     00 FA 0D F2 | 	cmp	result1, #0 wz
05a18     4C 05 90 AD |  if_e	jmp	#LR__0441
05a1c     C0 01 00 FF 
05a20     0B 15 06 F6 | 	mov	arg02, ##@LR__5812
05a24     13 13 02 F6 | 	mov	arg01, local01
05a28     10 27 B2 FD | 	call	#__system___string_cmp
05a2c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a30     3C 05 90 AD |  if_e	jmp	#LR__0442
05a34     C0 01 00 FF 
05a38     12 15 06 F6 | 	mov	arg02, ##@LR__5813
05a3c     13 13 02 F6 | 	mov	arg01, local01
05a40     F8 26 B2 FD | 	call	#__system___string_cmp
05a44     00 FA 0D F2 | 	cmp	result1, #0 wz
05a48     2C 05 90 AD |  if_e	jmp	#LR__0443
05a4c     C0 01 00 FF 
05a50     16 15 06 F6 | 	mov	arg02, ##@LR__5814
05a54     13 13 02 F6 | 	mov	arg01, local01
05a58     E0 26 B2 FD | 	call	#__system___string_cmp
05a5c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a60     1C 05 90 AD |  if_e	jmp	#LR__0444
05a64     C0 01 00 FF 
05a68     1C 15 06 F6 | 	mov	arg02, ##@LR__5815
05a6c     13 13 02 F6 | 	mov	arg01, local01
05a70     C8 26 B2 FD | 	call	#__system___string_cmp
05a74     00 FA 0D F2 | 	cmp	result1, #0 wz
05a78     0C 05 90 AD |  if_e	jmp	#LR__0445
05a7c     C0 01 00 FF 
05a80     20 15 06 F6 | 	mov	arg02, ##@LR__5816
05a84     13 13 02 F6 | 	mov	arg01, local01
05a88     B0 26 B2 FD | 	call	#__system___string_cmp
05a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a90     FC 04 90 AD |  if_e	jmp	#LR__0446
05a94     C0 01 00 FF 
05a98     27 15 06 F6 | 	mov	arg02, ##@LR__5817
05a9c     13 13 02 F6 | 	mov	arg01, local01
05aa0     98 26 B2 FD | 	call	#__system___string_cmp
05aa4     00 FA 0D F2 | 	cmp	result1, #0 wz
05aa8     EC 04 90 AD |  if_e	jmp	#LR__0447
05aac     C0 01 00 FF 
05ab0     2C 15 06 F6 | 	mov	arg02, ##@LR__5818
05ab4     13 13 02 F6 | 	mov	arg01, local01
05ab8     80 26 B2 FD | 	call	#__system___string_cmp
05abc     00 FA 0D F2 | 	cmp	result1, #0 wz
05ac0     DC 04 90 AD |  if_e	jmp	#LR__0448
05ac4     C0 01 00 FF 
05ac8     31 15 06 F6 | 	mov	arg02, ##@LR__5819
05acc     13 13 02 F6 | 	mov	arg01, local01
05ad0     68 26 B2 FD | 	call	#__system___string_cmp
05ad4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ad8     CC 04 90 AD |  if_e	jmp	#LR__0449
05adc     C0 01 00 FF 
05ae0     38 15 06 F6 | 	mov	arg02, ##@LR__5820
05ae4     13 13 02 F6 | 	mov	arg01, local01
05ae8     50 26 B2 FD | 	call	#__system___string_cmp
05aec     00 FA 0D F2 | 	cmp	result1, #0 wz
05af0     BC 04 90 AD |  if_e	jmp	#LR__0450
05af4     C0 01 00 FF 
05af8     3B 15 06 F6 | 	mov	arg02, ##@LR__5821
05afc     13 13 02 F6 | 	mov	arg01, local01
05b00     38 26 B2 FD | 	call	#__system___string_cmp
05b04     00 FA 0D F2 | 	cmp	result1, #0 wz
05b08     AC 04 90 AD |  if_e	jmp	#LR__0451
05b0c     C0 01 00 FF 
05b10     45 15 06 F6 | 	mov	arg02, ##@LR__5822
05b14     13 13 02 F6 | 	mov	arg01, local01
05b18     20 26 B2 FD | 	call	#__system___string_cmp
05b1c     00 FA 0D F2 | 	cmp	result1, #0 wz
05b20     9C 04 90 AD |  if_e	jmp	#LR__0452
05b24     C0 01 00 FF 
05b28     49 15 06 F6 | 	mov	arg02, ##@LR__5823
05b2c     13 13 02 F6 | 	mov	arg01, local01
05b30     08 26 B2 FD | 	call	#__system___string_cmp
05b34     00 FA 0D F2 | 	cmp	result1, #0 wz
05b38     8C 04 90 AD |  if_e	jmp	#LR__0453
05b3c     C0 01 00 FF 
05b40     51 15 06 F6 | 	mov	arg02, ##@LR__5824
05b44     13 13 02 F6 | 	mov	arg01, local01
05b48     F0 25 B2 FD | 	call	#__system___string_cmp
05b4c     00 FA 0D F2 | 	cmp	result1, #0 wz
05b50     7C 04 90 AD |  if_e	jmp	#LR__0454
05b54     C0 01 00 FF 
05b58     55 15 06 F6 | 	mov	arg02, ##@LR__5825
05b5c     13 13 02 F6 | 	mov	arg01, local01
05b60     D8 25 B2 FD | 	call	#__system___string_cmp
05b64     00 FA 0D F2 | 	cmp	result1, #0 wz
05b68     6C 04 90 AD |  if_e	jmp	#LR__0455
05b6c     C0 01 00 FF 
05b70     5B 15 06 F6 | 	mov	arg02, ##@LR__5826
05b74     13 13 02 F6 | 	mov	arg01, local01
05b78     C0 25 B2 FD | 	call	#__system___string_cmp
05b7c     00 FA 0D F2 | 	cmp	result1, #0 wz
05b80     5C 04 90 AD |  if_e	jmp	#LR__0456
05b84     C0 01 00 FF 
05b88     61 15 06 F6 | 	mov	arg02, ##@LR__5827
05b8c     13 13 02 F6 | 	mov	arg01, local01
05b90     A8 25 B2 FD | 	call	#__system___string_cmp
05b94     00 FA 0D F2 | 	cmp	result1, #0 wz
05b98     4C 04 90 AD |  if_e	jmp	#LR__0457
05b9c     50 04 90 FD | 	jmp	#LR__0458
05ba0                 | LR__0320
05ba0     5C FA 05 F6 | 	mov	result1, #92
05ba4     4C 04 90 FD | 	jmp	#LR__0459
05ba8                 | LR__0321
05ba8     5C FA 05 F6 | 	mov	result1, #92
05bac     44 04 90 FD | 	jmp	#LR__0459
05bb0                 | LR__0322
05bb0     B9 FA 05 F6 | 	mov	result1, #185
05bb4     3C 04 90 FD | 	jmp	#LR__0459
05bb8                 | LR__0323
05bb8     47 FA 05 F6 | 	mov	result1, #71
05bbc     34 04 90 FD | 	jmp	#LR__0459
05bc0                 | LR__0324
05bc0     59 FA 05 F6 | 	mov	result1, #89
05bc4     2C 04 90 FD | 	jmp	#LR__0459
05bc8                 | LR__0325
05bc8     59 FA 05 F6 | 	mov	result1, #89
05bcc     24 04 90 FD | 	jmp	#LR__0459
05bd0                 | LR__0326
05bd0     C3 FA 05 F6 | 	mov	result1, #195
05bd4     1C 04 90 FD | 	jmp	#LR__0459
05bd8                 | LR__0327
05bd8     AE FA 05 F6 | 	mov	result1, #174
05bdc     14 04 90 FD | 	jmp	#LR__0459
05be0                 | LR__0328
05be0     AE FA 05 F6 | 	mov	result1, #174
05be4     0C 04 90 FD | 	jmp	#LR__0459
05be8                 | LR__0329
05be8     B1 FA 05 F6 | 	mov	result1, #177
05bec     04 04 90 FD | 	jmp	#LR__0459
05bf0                 | LR__0330
05bf0     B1 FA 05 F6 | 	mov	result1, #177
05bf4     FC 03 90 FD | 	jmp	#LR__0459
05bf8                 | LR__0331
05bf8     AF FA 05 F6 | 	mov	result1, #175
05bfc     F4 03 90 FD | 	jmp	#LR__0459
05c00                 | LR__0332
05c00     AF FA 05 F6 | 	mov	result1, #175
05c04     EC 03 90 FD | 	jmp	#LR__0459
05c08                 | LR__0333
05c08     B0 FA 05 F6 | 	mov	result1, #176
05c0c     E4 03 90 FD | 	jmp	#LR__0459
05c10                 | LR__0334
05c10     B0 FA 05 F6 | 	mov	result1, #176
05c14     DC 03 90 FD | 	jmp	#LR__0459
05c18                 | LR__0335
05c18     45 FA 05 F6 | 	mov	result1, #69
05c1c     D4 03 90 FD | 	jmp	#LR__0459
05c20                 | LR__0336
05c20     45 FA 05 F6 | 	mov	result1, #69
05c24     CC 03 90 FD | 	jmp	#LR__0459
05c28                 | LR__0337
05c28     69 FA 05 F6 | 	mov	result1, #105
05c2c     C4 03 90 FD | 	jmp	#LR__0459
05c30                 | LR__0338
05c30     B4 FA 05 F6 | 	mov	result1, #180
05c34     BC 03 90 FD | 	jmp	#LR__0459
05c38                 | LR__0339
05c38     40 FA 05 F6 | 	mov	result1, #64
05c3c     B4 03 90 FD | 	jmp	#LR__0459
05c40                 | LR__0340
05c40     CF FA 05 F6 | 	mov	result1, #207
05c44     AC 03 90 FD | 	jmp	#LR__0459
05c48                 | LR__0341
05c48     49 FA 05 F6 | 	mov	result1, #73
05c4c     A4 03 90 FD | 	jmp	#LR__0459
05c50                 | LR__0342
05c50     49 FA 05 F6 | 	mov	result1, #73
05c54     9C 03 90 FD | 	jmp	#LR__0459
05c58                 | LR__0343
05c58     C4 FA 05 F6 | 	mov	result1, #196
05c5c     94 03 90 FD | 	jmp	#LR__0459
05c60                 | LR__0344
05c60     68 FA 05 F6 | 	mov	result1, #104
05c64     8C 03 90 FD | 	jmp	#LR__0459
05c68                 | LR__0345
05c68     B7 FA 05 F6 | 	mov	result1, #183
05c6c     84 03 90 FD | 	jmp	#LR__0459
05c70                 | LR__0346
05c70     D9 FA 05 F6 | 	mov	result1, #217
05c74     7C 03 90 FD | 	jmp	#LR__0459
05c78                 | LR__0347
05c78     73 FA 05 F6 | 	mov	result1, #115
05c7c     74 03 90 FD | 	jmp	#LR__0459
05c80                 | LR__0348
05c80     74 FA 05 F6 | 	mov	result1, #116
05c84     6C 03 90 FD | 	jmp	#LR__0459
05c88                 | LR__0349
05c88     6C FA 05 F6 | 	mov	result1, #108
05c8c     64 03 90 FD | 	jmp	#LR__0459
05c90                 | LR__0350
05c90     6C FA 05 F6 | 	mov	result1, #108
05c94     5C 03 90 FD | 	jmp	#LR__0459
05c98                 | LR__0351
05c98     89 FA 05 F6 | 	mov	result1, #137
05c9c     54 03 90 FD | 	jmp	#LR__0459
05ca0                 | LR__0352
05ca0     C2 FA 05 F6 | 	mov	result1, #194
05ca4     4C 03 90 FD | 	jmp	#LR__0459
05ca8                 | LR__0353
05ca8     72 FA 05 F6 | 	mov	result1, #114
05cac     44 03 90 FD | 	jmp	#LR__0459
05cb0                 | LR__0354
05cb0     5D FA 05 F6 | 	mov	result1, #93
05cb4     3C 03 90 FD | 	jmp	#LR__0459
05cb8                 | LR__0355
05cb8     96 FA 05 F6 | 	mov	result1, #150
05cbc     34 03 90 FD | 	jmp	#LR__0459
05cc0                 | LR__0356
05cc0     43 FA 05 F6 | 	mov	result1, #67
05cc4     2C 03 90 FD | 	jmp	#LR__0459
05cc8                 | LR__0357
05cc8     43 FA 05 F6 | 	mov	result1, #67
05ccc     24 03 90 FD | 	jmp	#LR__0459
05cd0                 | LR__0358
05cd0     43 FA 05 F6 | 	mov	result1, #67
05cd4     1C 03 90 FD | 	jmp	#LR__0459
05cd8                 | LR__0359
05cd8     5A FA 05 F6 | 	mov	result1, #90
05cdc     14 03 90 FD | 	jmp	#LR__0459
05ce0                 | LR__0360
05ce0     AB FA 05 F6 | 	mov	result1, #171
05ce4     0C 03 90 FD | 	jmp	#LR__0459
05ce8                 | LR__0361
05ce8     BD FA 05 F6 | 	mov	result1, #189
05cec     04 03 90 FD | 	jmp	#LR__0459
05cf0                 | LR__0362
05cf0     BD FA 05 F6 | 	mov	result1, #189
05cf4     FC 02 90 FD | 	jmp	#LR__0459
05cf8                 | LR__0363
05cf8     46 FA 05 F6 | 	mov	result1, #70
05cfc     F4 02 90 FD | 	jmp	#LR__0459
05d00                 | LR__0364
05d00     46 FA 05 F6 | 	mov	result1, #70
05d04     EC 02 90 FD | 	jmp	#LR__0459
05d08                 | LR__0365
05d08     71 FA 05 F6 | 	mov	result1, #113
05d0c     E4 02 90 FD | 	jmp	#LR__0459
05d10                 | LR__0366
05d10     71 FA 05 F6 | 	mov	result1, #113
05d14     DC 02 90 FD | 	jmp	#LR__0459
05d18                 | LR__0367
05d18     60 FA 05 F6 | 	mov	result1, #96
05d1c     D4 02 90 FD | 	jmp	#LR__0459
05d20                 | LR__0368
05d20     4A FA 05 F6 | 	mov	result1, #74
05d24     CC 02 90 FD | 	jmp	#LR__0459
05d28                 | LR__0369
05d28     4A FA 05 F6 | 	mov	result1, #74
05d2c     C4 02 90 FD | 	jmp	#LR__0459
05d30                 | LR__0370
05d30     48 FA 05 F6 | 	mov	result1, #72
05d34     BC 02 90 FD | 	jmp	#LR__0459
05d38                 | LR__0371
05d38     48 FA 05 F6 | 	mov	result1, #72
05d3c     B4 02 90 FD | 	jmp	#LR__0459
05d40                 | LR__0372
05d40     BB FA 05 F6 | 	mov	result1, #187
05d44     AC 02 90 FD | 	jmp	#LR__0459
05d48                 | LR__0373
05d48     A9 FA 05 F6 | 	mov	result1, #169
05d4c     A4 02 90 FD | 	jmp	#LR__0459
05d50                 | LR__0374
05d50     4E FA 05 F6 | 	mov	result1, #78
05d54     9C 02 90 FD | 	jmp	#LR__0459
05d58                 | LR__0375
05d58     4E FA 05 F6 | 	mov	result1, #78
05d5c     94 02 90 FD | 	jmp	#LR__0459
05d60                 | LR__0376
05d60     58 FA 05 F6 | 	mov	result1, #88
05d64     8C 02 90 FD | 	jmp	#LR__0459
05d68                 | LR__0377
05d68     5F FA 05 F6 | 	mov	result1, #95
05d6c     84 02 90 FD | 	jmp	#LR__0459
05d70                 | LR__0378
05d70     5F FA 05 F6 | 	mov	result1, #95
05d74     7C 02 90 FD | 	jmp	#LR__0459
05d78                 | LR__0379
05d78     B5 FA 05 F6 | 	mov	result1, #181
05d7c     74 02 90 FD | 	jmp	#LR__0459
05d80                 | LR__0380
05d80     4C FA 05 F6 | 	mov	result1, #76
05d84     6C 02 90 FD | 	jmp	#LR__0459
05d88                 | LR__0381
05d88     4C FA 05 F6 | 	mov	result1, #76
05d8c     64 02 90 FD | 	jmp	#LR__0459
05d90                 | LR__0382
05d90     52 FA 05 F6 | 	mov	result1, #82
05d94     5C 02 90 FD | 	jmp	#LR__0459
05d98                 | LR__0383
05d98     52 FA 05 F6 | 	mov	result1, #82
05d9c     54 02 90 FD | 	jmp	#LR__0459
05da0                 | LR__0384
05da0     97 FA 05 F6 | 	mov	result1, #151
05da4     4C 02 90 FD | 	jmp	#LR__0459
05da8                 | LR__0385
05da8     C6 FA 05 F6 | 	mov	result1, #198
05dac     44 02 90 FD | 	jmp	#LR__0459
05db0                 | LR__0386
05db0     61 FA 05 F6 | 	mov	result1, #97
05db4     3C 02 90 FD | 	jmp	#LR__0459
05db8                 | LR__0387
05db8     61 FA 05 F6 | 	mov	result1, #97
05dbc     34 02 90 FD | 	jmp	#LR__0459
05dc0                 | LR__0388
05dc0     63 FA 05 F6 | 	mov	result1, #99
05dc4     2C 02 90 FD | 	jmp	#LR__0459
05dc8                 | LR__0389
05dc8     41 FA 05 F6 | 	mov	result1, #65
05dcc     24 02 90 FD | 	jmp	#LR__0459
05dd0                 | LR__0390
05dd0     4B FA 05 F6 | 	mov	result1, #75
05dd4     1C 02 90 FD | 	jmp	#LR__0459
05dd8                 | LR__0391
05dd8     4B FA 05 F6 | 	mov	result1, #75
05ddc     14 02 90 FD | 	jmp	#LR__0459
05de0                 | LR__0392
05de0     C1 FA 05 F6 | 	mov	result1, #193
05de4     0C 02 90 FD | 	jmp	#LR__0459
05de8                 | LR__0393
05de8     B3 FA 05 F6 | 	mov	result1, #179
05dec     04 02 90 FD | 	jmp	#LR__0459
05df0                 | LR__0394
05df0     5E FA 05 F6 | 	mov	result1, #94
05df4     FC 01 90 FD | 	jmp	#LR__0459
05df8                 | LR__0395
05df8     5E FA 05 F6 | 	mov	result1, #94
05dfc     F4 01 90 FD | 	jmp	#LR__0459
05e00                 | LR__0396
05e00     7C FA 05 F6 | 	mov	result1, #124
05e04     EC 01 90 FD | 	jmp	#LR__0459
05e08                 | LR__0397
05e08     7E FA 05 F6 | 	mov	result1, #126
05e0c     E4 01 90 FD | 	jmp	#LR__0459
05e10                 | LR__0398
05e10     7D FA 05 F6 | 	mov	result1, #125
05e14     DC 01 90 FD | 	jmp	#LR__0459
05e18                 | LR__0399
05e18     7F FA 05 F6 | 	mov	result1, #127
05e1c     D4 01 90 FD | 	jmp	#LR__0459
05e20                 | LR__0400
05e20     80 FA 05 F6 | 	mov	result1, #128
05e24     CC 01 90 FD | 	jmp	#LR__0459
05e28                 | LR__0401
05e28     55 FA 05 F6 | 	mov	result1, #85
05e2c     C4 01 90 FD | 	jmp	#LR__0459
05e30                 | LR__0402
05e30     75 FA 05 F6 | 	mov	result1, #117
05e34     BC 01 90 FD | 	jmp	#LR__0459
05e38                 | LR__0403
05e38     75 FA 05 F6 | 	mov	result1, #117
05e3c     B4 01 90 FD | 	jmp	#LR__0459
05e40                 | LR__0404
05e40     42 FA 05 F6 | 	mov	result1, #66
05e44     AC 01 90 FD | 	jmp	#LR__0459
05e48                 | LR__0405
05e48     42 FA 05 F6 | 	mov	result1, #66
05e4c     A4 01 90 FD | 	jmp	#LR__0459
05e50                 | LR__0406
05e50     95 FA 05 F6 | 	mov	result1, #149
05e54     9C 01 90 FD | 	jmp	#LR__0459
05e58                 | LR__0407
05e58     AC FA 05 F6 | 	mov	result1, #172
05e5c     94 01 90 FD | 	jmp	#LR__0459
05e60                 | LR__0408
05e60     81 FA 05 F6 | 	mov	result1, #129
05e64     8C 01 90 FD | 	jmp	#LR__0459
05e68                 | LR__0409
05e68     81 FA 05 F6 | 	mov	result1, #129
05e6c     84 01 90 FD | 	jmp	#LR__0459
05e70                 | LR__0410
05e70     44 FA 05 F6 | 	mov	result1, #68
05e74     7C 01 90 FD | 	jmp	#LR__0459
05e78                 | LR__0411
05e78     44 FA 05 F6 | 	mov	result1, #68
05e7c     74 01 90 FD | 	jmp	#LR__0459
05e80                 | LR__0412
05e80     BC FA 05 F6 | 	mov	result1, #188
05e84     6C 01 90 FD | 	jmp	#LR__0459
05e88                 | LR__0413
05e88     88 FA 05 F6 | 	mov	result1, #136
05e8c     64 01 90 FD | 	jmp	#LR__0459
05e90                 | LR__0414
05e90     B6 FA 05 F6 | 	mov	result1, #182
05e94     5C 01 90 FD | 	jmp	#LR__0459
05e98                 | LR__0415
05e98     92 FA 05 F6 | 	mov	result1, #146
05e9c     54 01 90 FD | 	jmp	#LR__0459
05ea0                 | LR__0416
05ea0     BE FA 05 F6 | 	mov	result1, #190
05ea4     4C 01 90 FD | 	jmp	#LR__0459
05ea8                 | LR__0417
05ea8     BE FA 05 F6 | 	mov	result1, #190
05eac     44 01 90 FD | 	jmp	#LR__0459
05eb0                 | LR__0418
05eb0     C7 FA 05 F6 | 	mov	result1, #199
05eb4     3C 01 90 FD | 	jmp	#LR__0459
05eb8                 | LR__0419
05eb8     D4 FA 05 F6 | 	mov	result1, #212
05ebc     34 01 90 FD | 	jmp	#LR__0459
05ec0                 | LR__0420
05ec0     D4 FA 05 F6 | 	mov	result1, #212
05ec4     2C 01 90 FD | 	jmp	#LR__0459
05ec8                 | LR__0421
05ec8     AA FA 05 F6 | 	mov	result1, #170
05ecc     24 01 90 FD | 	jmp	#LR__0459
05ed0                 | LR__0422
05ed0     4D FA 05 F6 | 	mov	result1, #77
05ed4     1C 01 90 FD | 	jmp	#LR__0459
05ed8                 | LR__0423
05ed8     51 FA 05 F6 | 	mov	result1, #81
05edc     14 01 90 FD | 	jmp	#LR__0459
05ee0                 | LR__0424
05ee0     51 FA 05 F6 | 	mov	result1, #81
05ee4     0C 01 90 FD | 	jmp	#LR__0459
05ee8                 | LR__0425
05ee8     D2 FA 05 F6 | 	mov	result1, #210
05eec     04 01 90 FD | 	jmp	#LR__0459
05ef0                 | LR__0426
05ef0     D2 FA 05 F6 | 	mov	result1, #210
05ef4     FC 00 90 FD | 	jmp	#LR__0459
05ef8                 | LR__0427
05ef8     8E FA 05 F6 | 	mov	result1, #142
05efc     F4 00 90 FD | 	jmp	#LR__0459
05f00                 | LR__0428
05f00     8E FA 05 F6 | 	mov	result1, #142
05f04     EC 00 90 FD | 	jmp	#LR__0459
05f08                 | LR__0429
05f08     90 FA 05 F6 | 	mov	result1, #144
05f0c     E4 00 90 FD | 	jmp	#LR__0459
05f10                 | LR__0430
05f10     90 FA 05 F6 | 	mov	result1, #144
05f14     DC 00 90 FD | 	jmp	#LR__0459
05f18                 | LR__0431
05f18     8D FA 05 F6 | 	mov	result1, #141
05f1c     D4 00 90 FD | 	jmp	#LR__0459
05f20                 | LR__0432
05f20     8D FA 05 F6 | 	mov	result1, #141
05f24     CC 00 90 FD | 	jmp	#LR__0459
05f28                 | LR__0433
05f28     8C FA 05 F6 | 	mov	result1, #140
05f2c     C4 00 90 FD | 	jmp	#LR__0459
05f30                 | LR__0434
05f30     8C FA 05 F6 | 	mov	result1, #140
05f34     BC 00 90 FD | 	jmp	#LR__0459
05f38                 | LR__0435
05f38     91 FA 05 F6 | 	mov	result1, #145
05f3c     B4 00 90 FD | 	jmp	#LR__0459
05f40                 | LR__0436
05f40     91 FA 05 F6 | 	mov	result1, #145
05f44     AC 00 90 FD | 	jmp	#LR__0459
05f48                 | LR__0437
05f48     8B FA 05 F6 | 	mov	result1, #139
05f4c     A4 00 90 FD | 	jmp	#LR__0459
05f50                 | LR__0438
05f50     8B FA 05 F6 | 	mov	result1, #139
05f54     9C 00 90 FD | 	jmp	#LR__0459
05f58                 | LR__0439
05f58     8F FA 05 F6 | 	mov	result1, #143
05f5c     94 00 90 FD | 	jmp	#LR__0459
05f60                 | LR__0440
05f60     8F FA 05 F6 | 	mov	result1, #143
05f64     8C 00 90 FD | 	jmp	#LR__0459
05f68                 | LR__0441
05f68     8F FA 05 F6 | 	mov	result1, #143
05f6c     84 00 90 FD | 	jmp	#LR__0459
05f70                 | LR__0442
05f70     B2 FA 05 F6 | 	mov	result1, #178
05f74     7C 00 90 FD | 	jmp	#LR__0459
05f78                 | LR__0443
05f78     B2 FA 05 F6 | 	mov	result1, #178
05f7c     74 00 90 FD | 	jmp	#LR__0459
05f80                 | LR__0444
05f80     75 FA 05 F6 | 	mov	result1, #117
05f84     6C 00 90 FD | 	jmp	#LR__0459
05f88                 | LR__0445
05f88     75 FA 05 F6 | 	mov	result1, #117
05f8c     64 00 90 FD | 	jmp	#LR__0459
05f90                 | LR__0446
05f90     6D FA 05 F6 | 	mov	result1, #109
05f94     5C 00 90 FD | 	jmp	#LR__0459
05f98                 | LR__0447
05f98     6D FA 05 F6 | 	mov	result1, #109
05f9c     54 00 90 FD | 	jmp	#LR__0459
05fa0                 | LR__0448
05fa0     5B FA 05 F6 | 	mov	result1, #91
05fa4     4C 00 90 FD | 	jmp	#LR__0459
05fa8                 | LR__0449
05fa8     56 FA 05 F6 | 	mov	result1, #86
05fac     44 00 90 FD | 	jmp	#LR__0459
05fb0                 | LR__0450
05fb0     56 FA 05 F6 | 	mov	result1, #86
05fb4     3C 00 90 FD | 	jmp	#LR__0459
05fb8                 | LR__0451
05fb8     70 FA 05 F6 | 	mov	result1, #112
05fbc     34 00 90 FD | 	jmp	#LR__0459
05fc0                 | LR__0452
05fc0     70 FA 05 F6 | 	mov	result1, #112
05fc4     2C 00 90 FD | 	jmp	#LR__0459
05fc8                 | LR__0453
05fc8     57 FA 05 F6 | 	mov	result1, #87
05fcc     24 00 90 FD | 	jmp	#LR__0459
05fd0                 | LR__0454
05fd0     57 FA 05 F6 | 	mov	result1, #87
05fd4     1C 00 90 FD | 	jmp	#LR__0459
05fd8                 | LR__0455
05fd8     79 FA 05 F6 | 	mov	result1, #121
05fdc     14 00 90 FD | 	jmp	#LR__0459
05fe0                 | LR__0456
05fe0     77 FA 05 F6 | 	mov	result1, #119
05fe4     0C 00 90 FD | 	jmp	#LR__0459
05fe8                 | LR__0457
05fe8     78 FA 05 F6 | 	mov	result1, #120
05fec     04 00 90 FD | 	jmp	#LR__0459
05ff0                 | LR__0458
05ff0     00 FA 05 F6 | 	mov	result1, #0
05ff4                 | LR__0459
05ff4     A7 F0 03 F6 | 	mov	ptra, fp
05ff8     B2 00 A0 FD | 	call	#popregs_
05ffc                 | _iscommand_ret
05ffc     2D 00 64 FD | 	ret
06000                 | 
06000                 | ' 
06000                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
06000                 | ' 
06000                 | ' function isfunction(s as string) as ubyte
06000                 | _isfunction
06000     01 4A 05 F6 | 	mov	COUNT_, #1
06004     A8 00 A0 FD | 	call	#pushregs_
06008                 | ' 
06008                 | ' select case s
06008     09 27 02 F6 | 	mov	local01, arg01
0600c     C0 01 00 FF 
06010     67 15 06 F6 | 	mov	arg02, ##@LR__5828
06014     13 13 02 F6 | 	mov	arg01, local01
06018     20 21 B2 FD | 	call	#__system___string_cmp
0601c     00 FA 0D F2 | 	cmp	result1, #0 wz
06020     D4 05 90 AD |  if_e	jmp	#LR__0460
06024     C0 01 00 FF 
06028     6B 15 06 F6 | 	mov	arg02, ##@LR__5829
0602c     13 13 02 F6 | 	mov	arg01, local01
06030     08 21 B2 FD | 	call	#__system___string_cmp
06034     00 FA 0D F2 | 	cmp	result1, #0 wz
06038     C4 05 90 AD |  if_e	jmp	#LR__0461
0603c     C0 01 00 FF 
06040     70 15 06 F6 | 	mov	arg02, ##@LR__5830
06044     13 13 02 F6 | 	mov	arg01, local01
06048     F0 20 B2 FD | 	call	#__system___string_cmp
0604c     00 FA 0D F2 | 	cmp	result1, #0 wz
06050     B4 05 90 AD |  if_e	jmp	#LR__0462
06054     C0 01 00 FF 
06058     74 15 06 F6 | 	mov	arg02, ##@LR__5831
0605c     13 13 02 F6 | 	mov	arg01, local01
06060     D8 20 B2 FD | 	call	#__system___string_cmp
06064     00 FA 0D F2 | 	cmp	result1, #0 wz
06068     A4 05 90 AD |  if_e	jmp	#LR__0463
0606c     C0 01 00 FF 
06070     79 15 06 F6 | 	mov	arg02, ##@LR__5832
06074     13 13 02 F6 | 	mov	arg01, local01
06078     C0 20 B2 FD | 	call	#__system___string_cmp
0607c     00 FA 0D F2 | 	cmp	result1, #0 wz
06080     94 05 90 AD |  if_e	jmp	#LR__0464
06084     C0 01 00 FF 
06088     7D 15 06 F6 | 	mov	arg02, ##@LR__5833
0608c     13 13 02 F6 | 	mov	arg01, local01
06090     A8 20 B2 FD | 	call	#__system___string_cmp
06094     00 FA 0D F2 | 	cmp	result1, #0 wz
06098     84 05 90 AD |  if_e	jmp	#LR__0465
0609c     C0 01 00 FF 
060a0     82 15 06 F6 | 	mov	arg02, ##@LR__5834
060a4     13 13 02 F6 | 	mov	arg01, local01
060a8     90 20 B2 FD | 	call	#__system___string_cmp
060ac     00 FA 0D F2 | 	cmp	result1, #0 wz
060b0     74 05 90 AD |  if_e	jmp	#LR__0466
060b4     C0 01 00 FF 
060b8     86 15 06 F6 | 	mov	arg02, ##@LR__5835
060bc     13 13 02 F6 | 	mov	arg01, local01
060c0     78 20 B2 FD | 	call	#__system___string_cmp
060c4     00 FA 0D F2 | 	cmp	result1, #0 wz
060c8     64 05 90 AD |  if_e	jmp	#LR__0467
060cc     C0 01 00 FF 
060d0     8B 15 06 F6 | 	mov	arg02, ##@LR__5836
060d4     13 13 02 F6 | 	mov	arg01, local01
060d8     60 20 B2 FD | 	call	#__system___string_cmp
060dc     00 FA 0D F2 | 	cmp	result1, #0 wz
060e0     54 05 90 AD |  if_e	jmp	#LR__0468
060e4     C0 01 00 FF 
060e8     90 15 06 F6 | 	mov	arg02, ##@LR__5837
060ec     13 13 02 F6 | 	mov	arg01, local01
060f0     48 20 B2 FD | 	call	#__system___string_cmp
060f4     00 FA 0D F2 | 	cmp	result1, #0 wz
060f8     44 05 90 AD |  if_e	jmp	#LR__0469
060fc     C0 01 00 FF 
06100     98 15 06 F6 | 	mov	arg02, ##@LR__5838
06104     13 13 02 F6 | 	mov	arg01, local01
06108     30 20 B2 FD | 	call	#__system___string_cmp
0610c     00 FA 0D F2 | 	cmp	result1, #0 wz
06110     34 05 90 AD |  if_e	jmp	#LR__0470
06114     C0 01 00 FF 
06118     9C 15 06 F6 | 	mov	arg02, ##@LR__5839
0611c     13 13 02 F6 | 	mov	arg01, local01
06120     18 20 B2 FD | 	call	#__system___string_cmp
06124     00 FA 0D F2 | 	cmp	result1, #0 wz
06128     24 05 90 AD |  if_e	jmp	#LR__0471
0612c     C0 01 00 FF 
06130     A2 15 06 F6 | 	mov	arg02, ##@LR__5840
06134     13 13 02 F6 | 	mov	arg01, local01
06138     00 20 B2 FD | 	call	#__system___string_cmp
0613c     00 FA 0D F2 | 	cmp	result1, #0 wz
06140     14 05 90 AD |  if_e	jmp	#LR__0472
06144     C0 01 00 FF 
06148     AC 15 06 F6 | 	mov	arg02, ##@LR__5841
0614c     13 13 02 F6 | 	mov	arg01, local01
06150     E8 1F B2 FD | 	call	#__system___string_cmp
06154     00 FA 0D F2 | 	cmp	result1, #0 wz
06158     04 05 90 AD |  if_e	jmp	#LR__0473
0615c     C0 01 00 FF 
06160     B5 15 06 F6 | 	mov	arg02, ##@LR__5842
06164     13 13 02 F6 | 	mov	arg01, local01
06168     D0 1F B2 FD | 	call	#__system___string_cmp
0616c     00 FA 0D F2 | 	cmp	result1, #0 wz
06170     F4 04 90 AD |  if_e	jmp	#LR__0474
06174     C0 01 00 FF 
06178     BE 15 06 F6 | 	mov	arg02, ##@LR__5843
0617c     13 13 02 F6 | 	mov	arg01, local01
06180     B8 1F B2 FD | 	call	#__system___string_cmp
06184     00 FA 0D F2 | 	cmp	result1, #0 wz
06188     E4 04 90 AD |  if_e	jmp	#LR__0475
0618c     C0 01 00 FF 
06190     C2 15 06 F6 | 	mov	arg02, ##@LR__5844
06194     13 13 02 F6 | 	mov	arg01, local01
06198     A0 1F B2 FD | 	call	#__system___string_cmp
0619c     00 FA 0D F2 | 	cmp	result1, #0 wz
061a0     D4 04 90 AD |  if_e	jmp	#LR__0476
061a4     C0 01 00 FF 
061a8     C6 15 06 F6 | 	mov	arg02, ##@LR__5845
061ac     13 13 02 F6 | 	mov	arg01, local01
061b0     88 1F B2 FD | 	call	#__system___string_cmp
061b4     00 FA 0D F2 | 	cmp	result1, #0 wz
061b8     C4 04 90 AD |  if_e	jmp	#LR__0477
061bc     C0 01 00 FF 
061c0     CA 15 06 F6 | 	mov	arg02, ##@LR__5846
061c4     13 13 02 F6 | 	mov	arg01, local01
061c8     70 1F B2 FD | 	call	#__system___string_cmp
061cc     00 FA 0D F2 | 	cmp	result1, #0 wz
061d0     B4 04 90 AD |  if_e	jmp	#LR__0478
061d4     C0 01 00 FF 
061d8     D3 15 06 F6 | 	mov	arg02, ##@LR__5847
061dc     13 13 02 F6 | 	mov	arg01, local01
061e0     58 1F B2 FD | 	call	#__system___string_cmp
061e4     00 FA 0D F2 | 	cmp	result1, #0 wz
061e8     A4 04 90 AD |  if_e	jmp	#LR__0479
061ec     C0 01 00 FF 
061f0     DC 15 06 F6 | 	mov	arg02, ##@LR__5848
061f4     13 13 02 F6 | 	mov	arg01, local01
061f8     40 1F B2 FD | 	call	#__system___string_cmp
061fc     00 FA 0D F2 | 	cmp	result1, #0 wz
06200     94 04 90 AD |  if_e	jmp	#LR__0480
06204     C0 01 00 FF 
06208     E0 15 06 F6 | 	mov	arg02, ##@LR__5849
0620c     13 13 02 F6 | 	mov	arg01, local01
06210     28 1F B2 FD | 	call	#__system___string_cmp
06214     00 FA 0D F2 | 	cmp	result1, #0 wz
06218     84 04 90 AD |  if_e	jmp	#LR__0481
0621c     C0 01 00 FF 
06220     EE 15 06 F6 | 	mov	arg02, ##@LR__5850
06224     13 13 02 F6 | 	mov	arg01, local01
06228     10 1F B2 FD | 	call	#__system___string_cmp
0622c     00 FA 0D F2 | 	cmp	result1, #0 wz
06230     74 04 90 AD |  if_e	jmp	#LR__0482
06234     C0 01 00 FF 
06238     FB 15 06 F6 | 	mov	arg02, ##@LR__5851
0623c     13 13 02 F6 | 	mov	arg01, local01
06240     F8 1E B2 FD | 	call	#__system___string_cmp
06244     00 FA 0D F2 | 	cmp	result1, #0 wz
06248     64 04 90 AD |  if_e	jmp	#LR__0483
0624c     C1 01 00 FF 
06250     03 14 06 F6 | 	mov	arg02, ##@LR__5852
06254     13 13 02 F6 | 	mov	arg01, local01
06258     E0 1E B2 FD | 	call	#__system___string_cmp
0625c     00 FA 0D F2 | 	cmp	result1, #0 wz
06260     54 04 90 AD |  if_e	jmp	#LR__0484
06264     C1 01 00 FF 
06268     07 14 06 F6 | 	mov	arg02, ##@LR__5853
0626c     13 13 02 F6 | 	mov	arg01, local01
06270     C8 1E B2 FD | 	call	#__system___string_cmp
06274     00 FA 0D F2 | 	cmp	result1, #0 wz
06278     44 04 90 AD |  if_e	jmp	#LR__0485
0627c     C1 01 00 FF 
06280     0C 14 06 F6 | 	mov	arg02, ##@LR__5854
06284     13 13 02 F6 | 	mov	arg01, local01
06288     B0 1E B2 FD | 	call	#__system___string_cmp
0628c     00 FA 0D F2 | 	cmp	result1, #0 wz
06290     34 04 90 AD |  if_e	jmp	#LR__0486
06294     C1 01 00 FF 
06298     13 14 06 F6 | 	mov	arg02, ##@LR__5855
0629c     13 13 02 F6 | 	mov	arg01, local01
062a0     98 1E B2 FD | 	call	#__system___string_cmp
062a4     00 FA 0D F2 | 	cmp	result1, #0 wz
062a8     24 04 90 AD |  if_e	jmp	#LR__0487
062ac     C1 01 00 FF 
062b0     17 14 06 F6 | 	mov	arg02, ##@LR__5856
062b4     13 13 02 F6 | 	mov	arg01, local01
062b8     80 1E B2 FD | 	call	#__system___string_cmp
062bc     00 FA 0D F2 | 	cmp	result1, #0 wz
062c0     14 04 90 AD |  if_e	jmp	#LR__0488
062c4     C1 01 00 FF 
062c8     1D 14 06 F6 | 	mov	arg02, ##@LR__5857
062cc     13 13 02 F6 | 	mov	arg01, local01
062d0     68 1E B2 FD | 	call	#__system___string_cmp
062d4     00 FA 0D F2 | 	cmp	result1, #0 wz
062d8     04 04 90 AD |  if_e	jmp	#LR__0489
062dc     C1 01 00 FF 
062e0     21 14 06 F6 | 	mov	arg02, ##@LR__5858
062e4     13 13 02 F6 | 	mov	arg01, local01
062e8     50 1E B2 FD | 	call	#__system___string_cmp
062ec     00 FA 0D F2 | 	cmp	result1, #0 wz
062f0     F4 03 90 AD |  if_e	jmp	#LR__0490
062f4     C1 01 00 FF 
062f8     25 14 06 F6 | 	mov	arg02, ##@LR__5859
062fc     13 13 02 F6 | 	mov	arg01, local01
06300     38 1E B2 FD | 	call	#__system___string_cmp
06304     00 FA 0D F2 | 	cmp	result1, #0 wz
06308     E4 03 90 AD |  if_e	jmp	#LR__0491
0630c     C1 01 00 FF 
06310     2B 14 06 F6 | 	mov	arg02, ##@LR__5860
06314     13 13 02 F6 | 	mov	arg01, local01
06318     20 1E B2 FD | 	call	#__system___string_cmp
0631c     00 FA 0D F2 | 	cmp	result1, #0 wz
06320     D4 03 90 AD |  if_e	jmp	#LR__0492
06324     C1 01 00 FF 
06328     32 14 06 F6 | 	mov	arg02, ##@LR__5861
0632c     13 13 02 F6 | 	mov	arg01, local01
06330     08 1E B2 FD | 	call	#__system___string_cmp
06334     00 FA 0D F2 | 	cmp	result1, #0 wz
06338     C4 03 90 AD |  if_e	jmp	#LR__0493
0633c     C1 01 00 FF 
06340     38 14 06 F6 | 	mov	arg02, ##@LR__5862
06344     13 13 02 F6 | 	mov	arg01, local01
06348     F0 1D B2 FD | 	call	#__system___string_cmp
0634c     00 FA 0D F2 | 	cmp	result1, #0 wz
06350     B4 03 90 AD |  if_e	jmp	#LR__0494
06354     C1 01 00 FF 
06358     3D 14 06 F6 | 	mov	arg02, ##@LR__5863
0635c     13 13 02 F6 | 	mov	arg01, local01
06360     D8 1D B2 FD | 	call	#__system___string_cmp
06364     00 FA 0D F2 | 	cmp	result1, #0 wz
06368     A4 03 90 AD |  if_e	jmp	#LR__0495
0636c     C1 01 00 FF 
06370     44 14 06 F6 | 	mov	arg02, ##@LR__5864
06374     13 13 02 F6 | 	mov	arg01, local01
06378     C0 1D B2 FD | 	call	#__system___string_cmp
0637c     00 FA 0D F2 | 	cmp	result1, #0 wz
06380     94 03 90 AD |  if_e	jmp	#LR__0496
06384     C1 01 00 FF 
06388     4B 14 06 F6 | 	mov	arg02, ##@LR__5865
0638c     13 13 02 F6 | 	mov	arg01, local01
06390     A8 1D B2 FD | 	call	#__system___string_cmp
06394     00 FA 0D F2 | 	cmp	result1, #0 wz
06398     84 03 90 AD |  if_e	jmp	#LR__0497
0639c     C1 01 00 FF 
063a0     52 14 06 F6 | 	mov	arg02, ##@LR__5866
063a4     13 13 02 F6 | 	mov	arg01, local01
063a8     90 1D B2 FD | 	call	#__system___string_cmp
063ac     00 FA 0D F2 | 	cmp	result1, #0 wz
063b0     74 03 90 AD |  if_e	jmp	#LR__0498
063b4     C1 01 00 FF 
063b8     59 14 06 F6 | 	mov	arg02, ##@LR__5867
063bc     13 13 02 F6 | 	mov	arg01, local01
063c0     78 1D B2 FD | 	call	#__system___string_cmp
063c4     00 FA 0D F2 | 	cmp	result1, #0 wz
063c8     64 03 90 AD |  if_e	jmp	#LR__0499
063cc     C1 01 00 FF 
063d0     5E 14 06 F6 | 	mov	arg02, ##@LR__5868
063d4     13 13 02 F6 | 	mov	arg01, local01
063d8     60 1D B2 FD | 	call	#__system___string_cmp
063dc     00 FA 0D F2 | 	cmp	result1, #0 wz
063e0     54 03 90 AD |  if_e	jmp	#LR__0500
063e4     C1 01 00 FF 
063e8     63 14 06 F6 | 	mov	arg02, ##@LR__5869
063ec     13 13 02 F6 | 	mov	arg01, local01
063f0     48 1D B2 FD | 	call	#__system___string_cmp
063f4     00 FA 0D F2 | 	cmp	result1, #0 wz
063f8     44 03 90 AD |  if_e	jmp	#LR__0501
063fc     C1 01 00 FF 
06400     68 14 06 F6 | 	mov	arg02, ##@LR__5870
06404     13 13 02 F6 | 	mov	arg01, local01
06408     30 1D B2 FD | 	call	#__system___string_cmp
0640c     00 FA 0D F2 | 	cmp	result1, #0 wz
06410     34 03 90 AD |  if_e	jmp	#LR__0502
06414     C1 01 00 FF 
06418     6D 14 06 F6 | 	mov	arg02, ##@LR__5871
0641c     13 13 02 F6 | 	mov	arg01, local01
06420     18 1D B2 FD | 	call	#__system___string_cmp
06424     00 FA 0D F2 | 	cmp	result1, #0 wz
06428     24 03 90 AD |  if_e	jmp	#LR__0503
0642c     C1 01 00 FF 
06430     72 14 06 F6 | 	mov	arg02, ##@LR__5872
06434     13 13 02 F6 | 	mov	arg01, local01
06438     00 1D B2 FD | 	call	#__system___string_cmp
0643c     00 FA 0D F2 | 	cmp	result1, #0 wz
06440     14 03 90 AD |  if_e	jmp	#LR__0504
06444     C1 01 00 FF 
06448     78 14 06 F6 | 	mov	arg02, ##@LR__5873
0644c     13 13 02 F6 | 	mov	arg01, local01
06450     E8 1C B2 FD | 	call	#__system___string_cmp
06454     00 FA 0D F2 | 	cmp	result1, #0 wz
06458     04 03 90 AD |  if_e	jmp	#LR__0505
0645c     C1 01 00 FF 
06460     7E 14 06 F6 | 	mov	arg02, ##@LR__5874
06464     13 13 02 F6 | 	mov	arg01, local01
06468     D0 1C B2 FD | 	call	#__system___string_cmp
0646c     00 FA 0D F2 | 	cmp	result1, #0 wz
06470     F4 02 90 AD |  if_e	jmp	#LR__0506
06474     C1 01 00 FF 
06478     84 14 06 F6 | 	mov	arg02, ##@LR__5875
0647c     13 13 02 F6 | 	mov	arg01, local01
06480     B8 1C B2 FD | 	call	#__system___string_cmp
06484     00 FA 0D F2 | 	cmp	result1, #0 wz
06488     E4 02 90 AD |  if_e	jmp	#LR__0507
0648c     C1 01 00 FF 
06490     89 14 06 F6 | 	mov	arg02, ##@LR__5876
06494     13 13 02 F6 | 	mov	arg01, local01
06498     A0 1C B2 FD | 	call	#__system___string_cmp
0649c     00 FA 0D F2 | 	cmp	result1, #0 wz
064a0     D4 02 90 AD |  if_e	jmp	#LR__0508
064a4     C1 01 00 FF 
064a8     8E 14 06 F6 | 	mov	arg02, ##@LR__5877
064ac     13 13 02 F6 | 	mov	arg01, local01
064b0     88 1C B2 FD | 	call	#__system___string_cmp
064b4     00 FA 0D F2 | 	cmp	result1, #0 wz
064b8     C4 02 90 AD |  if_e	jmp	#LR__0509
064bc     C1 01 00 FF 
064c0     96 14 06 F6 | 	mov	arg02, ##@LR__5878
064c4     13 13 02 F6 | 	mov	arg01, local01
064c8     70 1C B2 FD | 	call	#__system___string_cmp
064cc     00 FA 0D F2 | 	cmp	result1, #0 wz
064d0     B4 02 90 AD |  if_e	jmp	#LR__0510
064d4     C1 01 00 FF 
064d8     9C 14 06 F6 | 	mov	arg02, ##@LR__5879
064dc     13 13 02 F6 | 	mov	arg01, local01
064e0     58 1C B2 FD | 	call	#__system___string_cmp
064e4     00 FA 0D F2 | 	cmp	result1, #0 wz
064e8     A4 02 90 AD |  if_e	jmp	#LR__0511
064ec     C1 01 00 FF 
064f0     A3 14 06 F6 | 	mov	arg02, ##@LR__5880
064f4     13 13 02 F6 | 	mov	arg01, local01
064f8     40 1C B2 FD | 	call	#__system___string_cmp
064fc     00 FA 0D F2 | 	cmp	result1, #0 wz
06500     94 02 90 AD |  if_e	jmp	#LR__0512
06504     C1 01 00 FF 
06508     A9 14 06 F6 | 	mov	arg02, ##@LR__5881
0650c     13 13 02 F6 | 	mov	arg01, local01
06510     28 1C B2 FD | 	call	#__system___string_cmp
06514     00 FA 0D F2 | 	cmp	result1, #0 wz
06518     84 02 90 AD |  if_e	jmp	#LR__0513
0651c     C1 01 00 FF 
06520     AF 14 06 F6 | 	mov	arg02, ##@LR__5882
06524     13 13 02 F6 | 	mov	arg01, local01
06528     10 1C B2 FD | 	call	#__system___string_cmp
0652c     00 FA 0D F2 | 	cmp	result1, #0 wz
06530     74 02 90 AD |  if_e	jmp	#LR__0514
06534     C1 01 00 FF 
06538     B3 14 06 F6 | 	mov	arg02, ##@LR__5883
0653c     13 13 02 F6 | 	mov	arg01, local01
06540     F8 1B B2 FD | 	call	#__system___string_cmp
06544     00 FA 0D F2 | 	cmp	result1, #0 wz
06548     64 02 90 AD |  if_e	jmp	#LR__0515
0654c     C1 01 00 FF 
06550     B7 14 06 F6 | 	mov	arg02, ##@LR__5884
06554     13 13 02 F6 | 	mov	arg01, local01
06558     E0 1B B2 FD | 	call	#__system___string_cmp
0655c     00 FA 0D F2 | 	cmp	result1, #0 wz
06560     54 02 90 AD |  if_e	jmp	#LR__0516
06564     C1 01 00 FF 
06568     BB 14 06 F6 | 	mov	arg02, ##@LR__5885
0656c     13 13 02 F6 | 	mov	arg01, local01
06570     C8 1B B2 FD | 	call	#__system___string_cmp
06574     00 FA 0D F2 | 	cmp	result1, #0 wz
06578     44 02 90 AD |  if_e	jmp	#LR__0517
0657c     C1 01 00 FF 
06580     C1 14 06 F6 | 	mov	arg02, ##@LR__5886
06584     13 13 02 F6 | 	mov	arg01, local01
06588     B0 1B B2 FD | 	call	#__system___string_cmp
0658c     00 FA 0D F2 | 	cmp	result1, #0 wz
06590     34 02 90 AD |  if_e	jmp	#LR__0518
06594     C1 01 00 FF 
06598     C7 14 06 F6 | 	mov	arg02, ##@LR__5887
0659c     13 13 02 F6 | 	mov	arg01, local01
065a0     98 1B B2 FD | 	call	#__system___string_cmp
065a4     00 FA 0D F2 | 	cmp	result1, #0 wz
065a8     24 02 90 AD |  if_e	jmp	#LR__0519
065ac     C1 01 00 FF 
065b0     CC 14 06 F6 | 	mov	arg02, ##@LR__5888
065b4     13 13 02 F6 | 	mov	arg01, local01
065b8     80 1B B2 FD | 	call	#__system___string_cmp
065bc     00 FA 0D F2 | 	cmp	result1, #0 wz
065c0     14 02 90 AD |  if_e	jmp	#LR__0520
065c4     C1 01 00 FF 
065c8     D0 14 06 F6 | 	mov	arg02, ##@LR__5889
065cc     13 13 02 F6 | 	mov	arg01, local01
065d0     68 1B B2 FD | 	call	#__system___string_cmp
065d4     00 FA 0D F2 | 	cmp	result1, #0 wz
065d8     04 02 90 AD |  if_e	jmp	#LR__0521
065dc     C1 01 00 FF 
065e0     D4 14 06 F6 | 	mov	arg02, ##@LR__5890
065e4     13 13 02 F6 | 	mov	arg01, local01
065e8     50 1B B2 FD | 	call	#__system___string_cmp
065ec     00 FA 0D F2 | 	cmp	result1, #0 wz
065f0     F4 01 90 AD |  if_e	jmp	#LR__0522
065f4     F8 01 90 FD | 	jmp	#LR__0523
065f8                 | LR__0460
065f8     9E FA 05 F6 | 	mov	result1, #158
065fc     F4 01 90 FD | 	jmp	#LR__0524
06600                 | LR__0461
06600     85 FA 05 F6 | 	mov	result1, #133
06604     EC 01 90 FD | 	jmp	#LR__0524
06608                 | LR__0462
06608     9B FA 05 F6 | 	mov	result1, #155
0660c     E4 01 90 FD | 	jmp	#LR__0524
06610                 | LR__0463
06610     9B FA 05 F6 | 	mov	result1, #155
06614     DC 01 90 FD | 	jmp	#LR__0524
06618                 | LR__0464
06618     A7 FA 05 F6 | 	mov	result1, #167
0661c     D4 01 90 FD | 	jmp	#LR__0524
06620                 | LR__0465
06620     84 FA 05 F6 | 	mov	result1, #132
06624     CC 01 90 FD | 	jmp	#LR__0524
06628                 | LR__0466
06628     86 FA 05 F6 | 	mov	result1, #134
0662c     C4 01 90 FD | 	jmp	#LR__0524
06630                 | LR__0467
06630     A2 FA 05 F6 | 	mov	result1, #162
06634     BC 01 90 FD | 	jmp	#LR__0524
06638                 | LR__0468
06638     9F FA 05 F6 | 	mov	result1, #159
0663c     B4 01 90 FD | 	jmp	#LR__0524
06640                 | LR__0469
06640     C0 FA 05 F6 | 	mov	result1, #192
06644     AC 01 90 FD | 	jmp	#LR__0524
06648                 | LR__0470
06648     82 FA 05 F6 | 	mov	result1, #130
0664c     A4 01 90 FD | 	jmp	#LR__0524
06650                 | LR__0471
06650     99 FA 05 F6 | 	mov	result1, #153
06654     9C 01 90 FD | 	jmp	#LR__0524
06658                 | LR__0472
06658     D7 FA 05 F6 | 	mov	result1, #215
0665c     94 01 90 FD | 	jmp	#LR__0524
06660                 | LR__0473
06660     D8 FA 05 F6 | 	mov	result1, #216
06664     8C 01 90 FD | 	jmp	#LR__0524
06668                 | LR__0474
06668     C5 FA 05 F6 | 	mov	result1, #197
0666c     84 01 90 FD | 	jmp	#LR__0524
06670                 | LR__0475
06670     C5 FA 05 F6 | 	mov	result1, #197
06674     7C 01 90 FD | 	jmp	#LR__0524
06678                 | LR__0476
06678     9C FA 05 F6 | 	mov	result1, #156
0667c     74 01 90 FD | 	jmp	#LR__0524
06680                 | LR__0477
06680     D3 FA 05 F6 | 	mov	result1, #211
06684     6C 01 90 FD | 	jmp	#LR__0524
06688                 | LR__0478
06688     D3 FA 05 F6 | 	mov	result1, #211
0668c     64 01 90 FD | 	jmp	#LR__0524
06690                 | LR__0479
06690     6F FA 05 F6 | 	mov	result1, #111
06694     5C 01 90 FD | 	jmp	#LR__0524
06698                 | LR__0480
06698     6F FA 05 F6 | 	mov	result1, #111
0669c     54 01 90 FD | 	jmp	#LR__0524
066a0                 | LR__0481
066a0     93 FA 05 F6 | 	mov	result1, #147
066a4     4C 01 90 FD | 	jmp	#LR__0524
066a8                 | LR__0482
066a8     94 FA 05 F6 | 	mov	result1, #148
066ac     44 01 90 FD | 	jmp	#LR__0524
066b0                 | LR__0483
066b0     62 FA 05 F6 | 	mov	result1, #98
066b4     3C 01 90 FD | 	jmp	#LR__0524
066b8                 | LR__0484
066b8     62 FA 05 F6 | 	mov	result1, #98
066bc     34 01 90 FD | 	jmp	#LR__0524
066c0                 | LR__0485
066c0     A3 FA 05 F6 | 	mov	result1, #163
066c4     2C 01 90 FD | 	jmp	#LR__0524
066c8                 | LR__0486
066c8     9D FA 05 F6 | 	mov	result1, #157
066cc     24 01 90 FD | 	jmp	#LR__0524
066d0                 | LR__0487
066d0     8A FA 05 F6 | 	mov	result1, #138
066d4     1C 01 90 FD | 	jmp	#LR__0524
066d8                 | LR__0488
066d8     A4 FA 05 F6 | 	mov	result1, #164
066dc     14 01 90 FD | 	jmp	#LR__0524
066e0                 | LR__0489
066e0     A8 FA 05 F6 | 	mov	result1, #168
066e4     0C 01 90 FD | 	jmp	#LR__0524
066e8                 | LR__0490
066e8     AD FA 05 F6 | 	mov	result1, #173
066ec     04 01 90 FD | 	jmp	#LR__0524
066f0                 | LR__0491
066f0     9A FA 05 F6 | 	mov	result1, #154
066f4     FC 00 90 FD | 	jmp	#LR__0524
066f8                 | LR__0492
066f8     D1 FA 05 F6 | 	mov	result1, #209
066fc     F4 00 90 FD | 	jmp	#LR__0524
06700                 | LR__0493
06700     D0 FA 05 F6 | 	mov	result1, #208
06704     EC 00 90 FD | 	jmp	#LR__0524
06708                 | LR__0494
06708     A6 FA 05 F6 | 	mov	result1, #166
0670c     E4 00 90 FD | 	jmp	#LR__0524
06710                 | LR__0495
06710     66 FA 05 F6 | 	mov	result1, #102
06714     DC 00 90 FD | 	jmp	#LR__0524
06718                 | LR__0496
06718     67 FA 05 F6 | 	mov	result1, #103
0671c     D4 00 90 FD | 	jmp	#LR__0524
06720                 | LR__0497
06720     64 FA 05 F6 | 	mov	result1, #100
06724     CC 00 90 FD | 	jmp	#LR__0524
06728                 | LR__0498
06728     65 FA 05 F6 | 	mov	result1, #101
0672c     C4 00 90 FD | 	jmp	#LR__0524
06730                 | LR__0499
06730     D5 FA 05 F6 | 	mov	result1, #213
06734     BC 00 90 FD | 	jmp	#LR__0524
06738                 | LR__0500
06738     D6 FA 05 F6 | 	mov	result1, #214
0673c     B4 00 90 FD | 	jmp	#LR__0524
06740                 | LR__0501
06740     C8 FA 05 F6 | 	mov	result1, #200
06744     AC 00 90 FD | 	jmp	#LR__0524
06748                 | LR__0502
06748     C9 FA 05 F6 | 	mov	result1, #201
0674c     A4 00 90 FD | 	jmp	#LR__0524
06750                 | LR__0503
06750     CA FA 05 F6 | 	mov	result1, #202
06754     9C 00 90 FD | 	jmp	#LR__0524
06758                 | LR__0504
06758     CC FA 05 F6 | 	mov	result1, #204
0675c     94 00 90 FD | 	jmp	#LR__0524
06760                 | LR__0505
06760     CD FA 05 F6 | 	mov	result1, #205
06764     8C 00 90 FD | 	jmp	#LR__0524
06768                 | LR__0506
06768     CE FA 05 F6 | 	mov	result1, #206
0676c     84 00 90 FD | 	jmp	#LR__0524
06770                 | LR__0507
06770     CB FA 05 F6 | 	mov	result1, #203
06774     7C 00 90 FD | 	jmp	#LR__0524
06778                 | LR__0508
06778     98 FA 05 F6 | 	mov	result1, #152
0677c     74 00 90 FD | 	jmp	#LR__0524
06780                 | LR__0509
06780     7B FA 05 F6 | 	mov	result1, #123
06784     6C 00 90 FD | 	jmp	#LR__0524
06788                 | LR__0510
06788     76 FA 05 F6 | 	mov	result1, #118
0678c     64 00 90 FD | 	jmp	#LR__0524
06790                 | LR__0511
06790     A5 FA 05 F6 | 	mov	result1, #165
06794     5C 00 90 FD | 	jmp	#LR__0524
06798                 | LR__0512
06798     7A FA 05 F6 | 	mov	result1, #122
0679c     54 00 90 FD | 	jmp	#LR__0524
067a0                 | LR__0513
067a0     BF FA 05 F6 | 	mov	result1, #191
067a4     4C 00 90 FD | 	jmp	#LR__0524
067a8                 | LR__0514
067a8     54 FA 05 F6 | 	mov	result1, #84
067ac     44 00 90 FD | 	jmp	#LR__0524
067b0                 | LR__0515
067b0     6B FA 05 F6 | 	mov	result1, #107
067b4     3C 00 90 FD | 	jmp	#LR__0524
067b8                 | LR__0516
067b8     87 FA 05 F6 | 	mov	result1, #135
067bc     34 00 90 FD | 	jmp	#LR__0524
067c0                 | LR__0517
067c0     6A FA 05 F6 | 	mov	result1, #106
067c4     2C 00 90 FD | 	jmp	#LR__0524
067c8                 | LR__0518
067c8     6E FA 05 F6 | 	mov	result1, #110
067cc     24 00 90 FD | 	jmp	#LR__0524
067d0                 | LR__0519
067d0     A1 FA 05 F6 | 	mov	result1, #161
067d4     1C 00 90 FD | 	jmp	#LR__0524
067d8                 | LR__0520
067d8     83 FA 05 F6 | 	mov	result1, #131
067dc     14 00 90 FD | 	jmp	#LR__0524
067e0                 | LR__0521
067e0     A0 FA 05 F6 | 	mov	result1, #160
067e4     0C 00 90 FD | 	jmp	#LR__0524
067e8                 | LR__0522
067e8     9B FA 05 F6 | 	mov	result1, #155
067ec     04 00 90 FD | 	jmp	#LR__0524
067f0                 | LR__0523
067f0     00 FA 05 F6 | 	mov	result1, #0
067f4                 | LR__0524
067f4     A7 F0 03 F6 | 	mov	ptra, fp
067f8     B2 00 A0 FD | 	call	#popregs_
067fc                 | _isfunction_ret
067fc     2D 00 64 FD | 	ret
06800                 | 
06800                 | ' 
06800                 | ' ' Check if the part is a name
06800                 | ' 
06800                 | ' function isname(s as string) as boolean
06800                 | _isname
06800     0D 4A 05 F6 | 	mov	COUNT_, #13
06804     A8 00 A0 FD | 	call	#pushregs_
06808     09 27 02 F6 | 	mov	local01, arg01
0680c     09 29 02 F6 | 	mov	local02, arg01
06810     97 06 48 FB | 	callpa	#(@LR__0531-@LR__0530)>>2,fcache_load_ptr_
06814                 | LR__0530
06814     14 FB C9 FA | 	rdbyte	result1, local02 wz
06818     01 28 06 51 |  if_ne	add	local02, #1
0681c     F4 FF 9F 5D |  if_ne	jmp	#LR__0530
06820                 | LR__0531
06820     09 29 82 F1 | 	sub	local02, arg01
06824     14 FB 01 F6 | 	mov	result1, local02
06828     FD 2A 0A F6 | 	mov	local03, result1 wz
0682c     00 FA 05 A6 |  if_e	mov	result1, #0
06830     34 02 90 AD |  if_e	jmp	#LR__0543
06834     13 13 02 F6 | 	mov	arg01, local01
06838     01 14 06 F6 | 	mov	arg02, #1
0683c     01 16 06 F6 | 	mov	arg03, #1
06840     68 3A B2 FD | 	call	#__system__Mid_S
06844     FD 2C 02 F6 | 	mov	local04, result1
06848                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
06848     C1 01 00 FF 
0684c     DB 14 06 F6 | 	mov	arg02, ##@LR__5891
06850     16 13 02 F6 | 	mov	arg01, local04
06854     E4 18 B2 FD | 	call	#__system___string_cmp
06858     00 FA 55 F2 | 	cmps	result1, #0 wc
0685c     18 00 90 CD |  if_b	jmp	#LR__0532
06860     C1 01 00 FF 
06864     DD 14 06 F6 | 	mov	arg02, ##@LR__5892
06868     16 13 02 F6 | 	mov	arg01, local04
0686c     CC 18 B2 FD | 	call	#__system___string_cmp
06870     01 FA 55 F2 | 	cmps	result1, #1 wc
06874     1C 00 90 CD |  if_b	jmp	#LR__0533
06878                 | LR__0532
06878     C1 01 00 FF 
0687c     DF 14 06 F6 | 	mov	arg02, ##@LR__5893
06880     16 13 02 F6 | 	mov	arg01, local04
06884     B4 18 B2 FD | 	call	#__system___string_cmp
06888     00 FA 0D F2 | 	cmp	result1, #0 wz
0688c     00 FA 05 56 |  if_ne	mov	result1, #0
06890     D4 01 90 5D |  if_ne	jmp	#LR__0543
06894                 | LR__0533
06894                 | ' if l>2 then 
06894     03 2A 56 F2 | 	cmps	local03, #3 wc
06898     C8 01 90 CD |  if_b	jmp	#LR__0542
0689c                 | '   for i=2 to l
0689c     02 2E 06 F6 | 	mov	local05, #2
068a0     15 31 02 F6 | 	mov	local06, local03
068a4     01 30 06 F1 | 	add	local06, #1
068a8                 | LR__0534
068a8     18 2F 52 F2 | 	cmps	local05, local06 wc
068ac     B4 01 90 3D |  if_ae	jmp	#LR__0541
068b0     13 13 02 F6 | 	mov	arg01, local01
068b4     17 15 02 F6 | 	mov	arg02, local05
068b8     01 16 06 F6 | 	mov	arg03, #1
068bc     EC 39 B2 FD | 	call	#__system__Mid_S
068c0     FD 2C 02 F6 | 	mov	local04, result1
068c4                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
068c4     15 2F 52 F2 | 	cmps	local05, local03 wc
068c8     9C 00 90 3D |  if_ae	jmp	#LR__0537
068cc     C1 01 00 FF 
068d0     E1 14 06 F6 | 	mov	arg02, ##@LR__5894
068d4     16 13 02 F6 | 	mov	arg01, local04
068d8     60 18 B2 FD | 	call	#__system___string_cmp
068dc     00 FA 55 F2 | 	cmps	result1, #0 wc
068e0     18 00 90 CD |  if_b	jmp	#LR__0535
068e4     C1 01 00 FF 
068e8     E3 14 06 F6 | 	mov	arg02, ##@LR__5895
068ec     16 13 02 F6 | 	mov	arg01, local04
068f0     48 18 B2 FD | 	call	#__system___string_cmp
068f4     01 FA 55 F2 | 	cmps	result1, #1 wc
068f8     6C 00 90 CD |  if_b	jmp	#LR__0537
068fc                 | LR__0535
068fc     C1 01 00 FF 
06900     E5 14 06 F6 | 	mov	arg02, ##@LR__5896
06904     16 13 02 F6 | 	mov	arg01, local04
06908     30 18 B2 FD | 	call	#__system___string_cmp
0690c     00 FA 55 F2 | 	cmps	result1, #0 wc
06910     18 00 90 CD |  if_b	jmp	#LR__0536
06914     C1 01 00 FF 
06918     E7 14 06 F6 | 	mov	arg02, ##@LR__5897
0691c     16 13 02 F6 | 	mov	arg01, local04
06920     18 18 B2 FD | 	call	#__system___string_cmp
06924     01 FA 55 F2 | 	cmps	result1, #1 wc
06928     3C 00 90 CD |  if_b	jmp	#LR__0537
0692c                 | LR__0536
0692c     C1 01 00 FF 
06930     E9 32 06 F6 | 	mov	local07, ##@LR__5898
06934     16 13 02 F6 | 	mov	arg01, local04
06938     19 15 02 F6 | 	mov	arg02, local07
0693c     FC 17 B2 FD | 	call	#__system___string_cmp
06940     00 FA 0D F2 | 	cmp	result1, #0 wz
06944     20 00 90 AD |  if_e	jmp	#LR__0537
06948     C1 01 00 FF 
0694c     EB 34 06 F6 | 	mov	local08, ##@LR__5899
06950     16 13 02 F6 | 	mov	arg01, local04
06954     1A 15 02 F6 | 	mov	arg02, local08
06958     E0 17 B2 FD | 	call	#__system___string_cmp
0695c     FD 36 0A F6 | 	mov	local09, result1 wz
06960     00 FA 05 56 |  if_ne	mov	result1, #0
06964     00 01 90 5D |  if_ne	jmp	#LR__0543
06968                 | LR__0537
06968                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
06968     15 2F 0A F2 | 	cmp	local05, local03 wz
0696c     EC 00 90 5D |  if_ne	jmp	#LR__0540
06970     C1 01 00 FF 
06974     ED 38 06 F6 | 	mov	local10, ##@LR__5900
06978     16 13 02 F6 | 	mov	arg01, local04
0697c     1C 15 02 F6 | 	mov	arg02, local10
06980     B8 17 B2 FD | 	call	#__system___string_cmp
06984     FD 3A 02 F6 | 	mov	local11, result1
06988     00 3A 56 F2 | 	cmps	local11, #0 wc
0698c     1C 00 90 CD |  if_b	jmp	#LR__0538
06990     C1 01 00 FF 
06994     EF 14 06 F6 | 	mov	arg02, ##@LR__5901
06998     16 13 02 F6 | 	mov	arg01, local04
0699c     9C 17 B2 FD | 	call	#__system___string_cmp
069a0     FD 38 02 F6 | 	mov	local10, result1
069a4     01 38 56 F2 | 	cmps	local10, #1 wc
069a8     B0 00 90 CD |  if_b	jmp	#LR__0540
069ac                 | LR__0538
069ac     C1 01 00 FF 
069b0     F1 14 06 F6 | 	mov	arg02, ##@LR__5902
069b4     16 13 02 F6 | 	mov	arg01, local04
069b8     80 17 B2 FD | 	call	#__system___string_cmp
069bc     00 FA 55 F2 | 	cmps	result1, #0 wc
069c0     1C 00 90 CD |  if_b	jmp	#LR__0539
069c4     C1 01 00 FF 
069c8     F3 36 06 F6 | 	mov	local09, ##@LR__5903
069cc     16 13 02 F6 | 	mov	arg01, local04
069d0     1B 15 02 F6 | 	mov	arg02, local09
069d4     64 17 B2 FD | 	call	#__system___string_cmp
069d8     01 FA 55 F2 | 	cmps	result1, #1 wc
069dc     7C 00 90 CD |  if_b	jmp	#LR__0540
069e0                 | LR__0539
069e0     C1 01 00 FF 
069e4     F5 36 06 F6 | 	mov	local09, ##@LR__5904
069e8     16 13 02 F6 | 	mov	arg01, local04
069ec     1B 15 02 F6 | 	mov	arg02, local09
069f0     48 17 B2 FD | 	call	#__system___string_cmp
069f4     00 FA 4D F2 | 	cmps	result1, #0 wz
069f8     60 00 90 AD |  if_e	jmp	#LR__0540
069fc     C1 01 00 FF 
06a00     F7 34 06 F6 | 	mov	local08, ##@LR__5905
06a04     16 13 02 F6 | 	mov	arg01, local04
06a08     1A 15 02 F6 | 	mov	arg02, local08
06a0c     2C 17 B2 FD | 	call	#__system___string_cmp
06a10     FD 36 0A F6 | 	mov	local09, result1 wz
06a14     44 00 90 AD |  if_e	jmp	#LR__0540
06a18     C1 01 00 FF 
06a1c     F9 3C 06 F6 | 	mov	local12, ##@LR__5906
06a20     1E 35 02 F6 | 	mov	local08, local12
06a24     16 13 02 F6 | 	mov	arg01, local04
06a28     1A 15 02 F6 | 	mov	arg02, local08
06a2c     0C 17 B2 FD | 	call	#__system___string_cmp
06a30     FD 32 0A F6 | 	mov	local07, result1 wz
06a34     24 00 90 AD |  if_e	jmp	#LR__0540
06a38     C1 01 00 FF 
06a3c     FB 3E 06 F6 | 	mov	local13, ##@LR__5907
06a40     1F 3D 02 F6 | 	mov	local12, local13
06a44     16 13 02 F6 | 	mov	arg01, local04
06a48     1E 15 02 F6 | 	mov	arg02, local12
06a4c     EC 16 B2 FD | 	call	#__system___string_cmp
06a50     FD 34 0A F6 | 	mov	local08, result1 wz
06a54     00 FA 05 56 |  if_ne	mov	result1, #0
06a58     0C 00 90 5D |  if_ne	jmp	#LR__0543
06a5c                 | LR__0540
06a5c     01 2E 06 F1 | 	add	local05, #1
06a60     44 FE 9F FD | 	jmp	#LR__0534
06a64                 | LR__0541
06a64                 | LR__0542
06a64                 | ' return true
06a64     01 FA 65 F6 | 	neg	result1, #1
06a68                 | LR__0543
06a68     A7 F0 03 F6 | 	mov	ptra, fp
06a6c     B2 00 A0 FD | 	call	#popregs_
06a70                 | _isname_ret
06a70     2D 00 64 FD | 	ret
06a74                 | 
06a74                 | ' 
06a74                 | ' ' Check if the part is a number.  
06a74                 | ' 
06a74                 | ' function isnum(s as string) as boolean 
06a74                 | _isnum
06a74     13 4A 05 F6 | 	mov	COUNT_, #19
06a78     A8 00 A0 FD | 	call	#pushregs_
06a7c     09 27 02 F6 | 	mov	local01, arg01
06a80     00 28 06 F6 | 	mov	local02, #0
06a84     00 2A 06 F6 | 	mov	local03, #0
06a88     13 13 02 F6 | 	mov	arg01, local01
06a8c     09 2D 02 F6 | 	mov	local04, arg01
06a90     97 06 48 FB | 	callpa	#(@LR__0551-@LR__0550)>>2,fcache_load_ptr_
06a94                 | LR__0550
06a94     16 FB C9 FA | 	rdbyte	result1, local04 wz
06a98     01 2C 06 51 |  if_ne	add	local04, #1
06a9c     F4 FF 9F 5D |  if_ne	jmp	#LR__0550
06aa0                 | LR__0551
06aa0     09 2D 82 F1 | 	sub	local04, arg01
06aa4     16 FB 01 F6 | 	mov	result1, local04
06aa8     FD 2E 0A F6 | 	mov	local05, result1 wz
06aac     00 FA 05 A6 |  if_e	mov	result1, #0
06ab0     A0 03 90 AD |  if_e	jmp	#LR__0566
06ab4     13 13 02 F6 | 	mov	arg01, local01
06ab8     01 14 06 F6 | 	mov	arg02, #1
06abc     01 16 06 F6 | 	mov	arg03, #1
06ac0     E8 37 B2 FD | 	call	#__system__Mid_S
06ac4     FD 30 02 F6 | 	mov	local06, result1
06ac8                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06ac8     C1 01 00 FF 
06acc     FD 14 06 F6 | 	mov	arg02, ##@LR__5908
06ad0     18 13 02 F6 | 	mov	arg01, local06
06ad4     64 16 B2 FD | 	call	#__system___string_cmp
06ad8     00 FA 55 F2 | 	cmps	result1, #0 wc
06adc     1C 00 90 CD |  if_b	jmp	#LR__0552
06ae0     C1 01 00 FF 
06ae4     FF 32 06 F6 | 	mov	local07, ##@LR__5909
06ae8     18 13 02 F6 | 	mov	arg01, local06
06aec     19 15 02 F6 | 	mov	arg02, local07
06af0     48 16 B2 FD | 	call	#__system___string_cmp
06af4     01 FA 55 F2 | 	cmps	result1, #1 wc
06af8     84 00 90 CD |  if_b	jmp	#LR__0553
06afc                 | LR__0552
06afc     C1 01 00 FF 
06b00     01 35 06 F6 | 	mov	local08, ##@LR__5910
06b04     1A 33 02 F6 | 	mov	local07, local08
06b08     18 13 02 F6 | 	mov	arg01, local06
06b0c     19 15 02 F6 | 	mov	arg02, local07
06b10     28 16 B2 FD | 	call	#__system___string_cmp
06b14     00 FA 0D F2 | 	cmp	result1, #0 wz
06b18     64 00 90 AD |  if_e	jmp	#LR__0553
06b1c     C1 01 00 FF 
06b20     03 37 06 F6 | 	mov	local09, ##@LR__5911
06b24     1B 35 02 F6 | 	mov	local08, local09
06b28     18 13 02 F6 | 	mov	arg01, local06
06b2c     1A 15 02 F6 | 	mov	arg02, local08
06b30     08 16 B2 FD | 	call	#__system___string_cmp
06b34     FD 32 0A F6 | 	mov	local07, result1 wz
06b38     44 00 90 AD |  if_e	jmp	#LR__0553
06b3c     C1 01 00 FF 
06b40     05 39 06 F6 | 	mov	local10, ##@LR__5912
06b44     1C 37 02 F6 | 	mov	local09, local10
06b48     18 13 02 F6 | 	mov	arg01, local06
06b4c     1B 15 02 F6 | 	mov	arg02, local09
06b50     E8 15 B2 FD | 	call	#__system___string_cmp
06b54     FD 34 0A F6 | 	mov	local08, result1 wz
06b58     24 00 90 AD |  if_e	jmp	#LR__0553
06b5c     C1 01 00 FF 
06b60     07 3B 06 F6 | 	mov	local11, ##@LR__5913
06b64     1D 39 02 F6 | 	mov	local10, local11
06b68     18 13 02 F6 | 	mov	arg01, local06
06b6c     1C 15 02 F6 | 	mov	arg02, local10
06b70     C8 15 B2 FD | 	call	#__system___string_cmp
06b74     FD 36 0A F6 | 	mov	local09, result1 wz
06b78     00 FA 05 56 |  if_ne	mov	result1, #0
06b7c     D4 02 90 5D |  if_ne	jmp	#LR__0566
06b80                 | LR__0553
06b80                 | ' if m$="." then ds=1
06b80     C1 01 00 FF 
06b84     09 15 06 F6 | 	mov	arg02, ##@LR__5914
06b88     18 13 02 F6 | 	mov	arg01, local06
06b8c     AC 15 B2 FD | 	call	#__system___string_cmp
06b90     00 FA 0D F2 | 	cmp	result1, #0 wz
06b94     01 28 06 A6 |  if_e	mov	local02, #1
06b98                 | ' if m$="$" then hex=1 else hex=0
06b98     C1 01 00 FF 
06b9c     0B 15 06 F6 | 	mov	arg02, ##@LR__5915
06ba0     18 13 02 F6 | 	mov	arg01, local06
06ba4     94 15 B2 FD | 	call	#__system___string_cmp
06ba8     00 FA 0D F2 | 	cmp	result1, #0 wz
06bac     01 3C 06 A6 |  if_e	mov	local12, #1
06bb0     00 3C 06 56 |  if_ne	mov	local12, #0
06bb4                 | ' if m$="%" then bin=1 else bin=0
06bb4     C1 01 00 FF 
06bb8     0D 15 06 F6 | 	mov	arg02, ##@LR__5916
06bbc     18 13 02 F6 | 	mov	arg01, local06
06bc0     78 15 B2 FD | 	call	#__system___string_cmp
06bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
06bc8     01 3E 06 A6 |  if_e	mov	local13, #1
06bcc     00 3E 06 56 |  if_ne	mov	local13, #0
06bd0                 | ' if l>1 then 
06bd0     02 2E 56 F2 | 	cmps	local05, #2 wc
06bd4     78 02 90 CD |  if_b	jmp	#LR__0565
06bd8                 | '   for i=2 to l
06bd8     02 40 06 F6 | 	mov	local14, #2
06bdc     17 43 02 F6 | 	mov	local15, local05
06be0     01 42 06 F1 | 	add	local15, #1
06be4                 | LR__0554
06be4     21 41 52 F2 | 	cmps	local14, local15 wc
06be8     64 02 90 3D |  if_ae	jmp	#LR__0564
06bec     13 13 02 F6 | 	mov	arg01, local01
06bf0     20 15 02 F6 | 	mov	arg02, local14
06bf4     01 16 06 F6 | 	mov	arg03, #1
06bf8     B0 36 B2 FD | 	call	#__system__Mid_S
06bfc     FD 30 02 F6 | 	mov	local06, result1
06c00     00 44 06 F6 | 	mov	local16, #0
06c04                 | '     m$=mid$(s,i,1) : b=false
06c04                 | '     if m$>="0" andalso m$<="9" then b=true  
06c04     C1 01 00 FF 
06c08     0F 15 06 F6 | 	mov	arg02, ##@LR__5917
06c0c     18 13 02 F6 | 	mov	arg01, local06
06c10     28 15 B2 FD | 	call	#__system___string_cmp
06c14     00 FA 55 F2 | 	cmps	result1, #0 wc
06c18     1C 00 90 CD |  if_b	jmp	#LR__0555
06c1c     C1 01 00 FF 
06c20     11 33 06 F6 | 	mov	local07, ##@LR__5918
06c24     18 13 02 F6 | 	mov	arg01, local06
06c28     19 15 02 F6 | 	mov	arg02, local07
06c2c     0C 15 B2 FD | 	call	#__system___string_cmp
06c30     01 FA 55 F2 | 	cmps	result1, #1 wc
06c34     01 44 66 C6 |  if_b	neg	local16, #1
06c38                 | LR__0555
06c38                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
06c38     C1 01 00 FF 
06c3c     13 15 06 F6 | 	mov	arg02, ##@LR__5919
06c40     18 13 02 F6 | 	mov	arg01, local06
06c44     F4 14 B2 FD | 	call	#__system___string_cmp
06c48     00 FA 0D F2 | 	cmp	result1, #0 wz
06c4c     7C 00 90 AD |  if_e	jmp	#LR__0556
06c50     C1 01 00 FF 
06c54     15 33 06 F6 | 	mov	local07, ##@LR__5920
06c58     18 13 02 F6 | 	mov	arg01, local06
06c5c     19 15 02 F6 | 	mov	arg02, local07
06c60     D8 14 B2 FD | 	call	#__system___string_cmp
06c64     00 FA 0D F2 | 	cmp	result1, #0 wz
06c68     60 00 90 AD |  if_e	jmp	#LR__0556
06c6c     C1 01 00 FF 
06c70     17 35 06 F6 | 	mov	local08, ##@LR__5921
06c74     1A 33 02 F6 | 	mov	local07, local08
06c78     18 13 02 F6 | 	mov	arg01, local06
06c7c     19 15 02 F6 | 	mov	arg02, local07
06c80     B8 14 B2 FD | 	call	#__system___string_cmp
06c84     00 FA 0D F2 | 	cmp	result1, #0 wz
06c88     40 00 90 AD |  if_e	jmp	#LR__0556
06c8c     C1 01 00 FF 
06c90     19 37 06 F6 | 	mov	local09, ##@LR__5922
06c94     1B 35 02 F6 | 	mov	local08, local09
06c98     18 13 02 F6 | 	mov	arg01, local06
06c9c     1A 15 02 F6 | 	mov	arg02, local08
06ca0     98 14 B2 FD | 	call	#__system___string_cmp
06ca4     FD 32 0A F6 | 	mov	local07, result1 wz
06ca8     20 00 90 AD |  if_e	jmp	#LR__0556
06cac     C1 01 00 FF 
06cb0     1B 39 06 F6 | 	mov	local10, ##@LR__5923
06cb4     1C 37 02 F6 | 	mov	local09, local10
06cb8     18 13 02 F6 | 	mov	arg01, local06
06cbc     1B 15 02 F6 | 	mov	arg02, local09
06cc0     78 14 B2 FD | 	call	#__system___string_cmp
06cc4     FD 34 0A F6 | 	mov	local08, result1 wz
06cc8     04 00 90 5D |  if_ne	jmp	#LR__0557
06ccc                 | LR__0556
06ccc     01 44 66 F6 | 	neg	local16, #1
06cd0                 | LR__0557
06cd0                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06cd0     01 3C 0E F2 | 	cmp	local12, #1 wz
06cd4     34 00 90 5D |  if_ne	jmp	#LR__0558
06cd8     C1 01 00 FF 
06cdc     1D 15 06 F6 | 	mov	arg02, ##@LR__5924
06ce0     18 13 02 F6 | 	mov	arg01, local06
06ce4     54 14 B2 FD | 	call	#__system___string_cmp
06ce8     00 FA 55 F2 | 	cmps	result1, #0 wc
06cec     1C 00 90 CD |  if_b	jmp	#LR__0558
06cf0     C1 01 00 FF 
06cf4     1F 33 06 F6 | 	mov	local07, ##@LR__5925
06cf8     18 13 02 F6 | 	mov	arg01, local06
06cfc     19 15 02 F6 | 	mov	arg02, local07
06d00     38 14 B2 FD | 	call	#__system___string_cmp
06d04     01 FA 55 F2 | 	cmps	result1, #1 wc
06d08     01 44 66 C6 |  if_b	neg	local16, #1
06d0c                 | LR__0558
06d0c                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06d0c     01 3E 0E F2 | 	cmp	local13, #1 wz
06d10     58 00 90 5D |  if_ne	jmp	#LR__0560
06d14     C1 01 00 FF 
06d18     21 15 06 F6 | 	mov	arg02, ##@LR__5926
06d1c     18 13 02 F6 | 	mov	arg01, local06
06d20     18 14 B2 FD | 	call	#__system___string_cmp
06d24     00 FA 55 F2 | 	cmps	result1, #0 wc
06d28     1C 00 90 CD |  if_b	jmp	#LR__0559
06d2c     C1 01 00 FF 
06d30     23 33 06 F6 | 	mov	local07, ##@LR__5927
06d34     18 13 02 F6 | 	mov	arg01, local06
06d38     19 15 02 F6 | 	mov	arg02, local07
06d3c     FC 13 B2 FD | 	call	#__system___string_cmp
06d40     01 FA 55 F2 | 	cmps	result1, #1 wc
06d44     24 00 90 CD |  if_b	jmp	#LR__0560
06d48                 | LR__0559
06d48     C1 01 00 FF 
06d4c     25 35 06 F6 | 	mov	local08, ##@LR__5928
06d50     1A 33 02 F6 | 	mov	local07, local08
06d54     18 13 02 F6 | 	mov	arg01, local06
06d58     19 15 02 F6 | 	mov	arg02, local07
06d5c     DC 13 B2 FD | 	call	#__system___string_cmp
06d60     00 FA 0D F2 | 	cmp	result1, #0 wz
06d64     00 FA 05 56 |  if_ne	mov	result1, #0
06d68     E8 00 90 5D |  if_ne	jmp	#LR__0566
06d6c                 | LR__0560
06d6c                 | '     if not b then return false
06d6c     22 45 22 F6 | 	not	local16, local16
06d70     00 44 0E F2 | 	cmp	local16, #0 wz
06d74     00 FA 05 56 |  if_ne	mov	result1, #0
06d78     D8 00 90 5D |  if_ne	jmp	#LR__0566
06d7c                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06d7c     C1 01 00 FF 
06d80     27 15 06 F6 | 	mov	arg02, ##@LR__5929
06d84     18 13 02 F6 | 	mov	arg01, local06
06d88     B0 13 B2 FD | 	call	#__system___string_cmp
06d8c     00 FA 0D F2 | 	cmp	result1, #0 wz
06d90     3C 00 90 5D |  if_ne	jmp	#LR__0561
06d94     20 15 02 F6 | 	mov	arg02, local14
06d98     01 14 86 F1 | 	sub	arg02, #1
06d9c     13 13 02 F6 | 	mov	arg01, local01
06da0     01 16 06 F6 | 	mov	arg03, #1
06da4     04 35 B2 FD | 	call	#__system__Mid_S
06da8     FD 12 02 F6 | 	mov	arg01, result1
06dac     F4 36 B2 FD | 	call	#__system__LCase_S
06db0     FD 12 02 F6 | 	mov	arg01, result1
06db4     C1 01 00 FF 
06db8     29 33 06 F6 | 	mov	local07, ##@LR__5930
06dbc     19 15 02 F6 | 	mov	arg02, local07
06dc0     78 13 B2 FD | 	call	#__system___string_cmp
06dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
06dc8     00 FA 05 56 |  if_ne	mov	result1, #0
06dcc     84 00 90 5D |  if_ne	jmp	#LR__0566
06dd0                 | LR__0561
06dd0                 | '     if m$="." then ds+=1: if ds>1 then return false
06dd0     C1 01 00 FF 
06dd4     2B 15 06 F6 | 	mov	arg02, ##@LR__5931
06dd8     18 13 02 F6 | 	mov	arg01, local06
06ddc     5C 13 B2 FD | 	call	#__system___string_cmp
06de0     00 FA 0D F2 | 	cmp	result1, #0 wz
06de4     01 28 06 A1 |  if_e	add	local02, #1
06de8     02 28 56 A2 |  if_e	cmps	local02, #2 wc
06dec     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06df0     60 00 90 2D |  if_nc_and_z	jmp	#LR__0566
06df4                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06df4     C1 01 00 FF 
06df8     2D 47 06 F6 | 	mov	local17, ##@LR__5932
06dfc     23 49 02 F6 | 	mov	local18, local17
06e00     18 13 02 F6 | 	mov	arg01, local06
06e04     24 15 02 F6 | 	mov	arg02, local18
06e08     30 13 B2 FD | 	call	#__system___string_cmp
06e0c     FD 4A 0A F6 | 	mov	local19, result1 wz
06e10     20 00 90 AD |  if_e	jmp	#LR__0562
06e14     C1 01 00 FF 
06e18     2F 33 06 F6 | 	mov	local07, ##@LR__5933
06e1c     19 47 02 F6 | 	mov	local17, local07
06e20     18 13 02 F6 | 	mov	arg01, local06
06e24     23 15 02 F6 | 	mov	arg02, local17
06e28     10 13 B2 FD | 	call	#__system___string_cmp
06e2c     FD 48 0A F6 | 	mov	local18, result1 wz
06e30     14 00 90 5D |  if_ne	jmp	#LR__0563
06e34                 | LR__0562
06e34     01 2A 06 F1 | 	add	local03, #1
06e38     00 3C 0E F2 | 	cmp	local12, #0 wz
06e3c     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
06e40     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06e44     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0566
06e48                 | LR__0563
06e48     01 40 06 F1 | 	add	local14, #1
06e4c     94 FD 9F FD | 	jmp	#LR__0554
06e50                 | LR__0564
06e50                 | LR__0565
06e50                 | ' return true
06e50     01 FA 65 F6 | 	neg	result1, #1
06e54                 | LR__0566
06e54     A7 F0 03 F6 | 	mov	ptra, fp
06e58     B2 00 A0 FD | 	call	#popregs_
06e5c                 | _isnum_ret
06e5c     2D 00 64 FD | 	ret
06e60                 | 
06e60                 | '   
06e60                 | ' ' Check if the part is an integer number.    
06e60                 | '   
06e60                 | ' function isint(s as string) as boolean
06e60                 | _isint
06e60     0E 4A 05 F6 | 	mov	COUNT_, #14
06e64     A8 00 A0 FD | 	call	#pushregs_
06e68     09 27 02 F6 | 	mov	local01, arg01
06e6c     09 29 02 F6 | 	mov	local02, arg01
06e70     97 06 48 FB | 	callpa	#(@LR__0571-@LR__0570)>>2,fcache_load_ptr_
06e74                 | LR__0570
06e74     14 FB C9 FA | 	rdbyte	result1, local02 wz
06e78     01 28 06 51 |  if_ne	add	local02, #1
06e7c     F4 FF 9F 5D |  if_ne	jmp	#LR__0570
06e80                 | LR__0571
06e80     09 29 82 F1 | 	sub	local02, arg01
06e84     14 FB 01 F6 | 	mov	result1, local02
06e88     FD 2A 0A F6 | 	mov	local03, result1 wz
06e8c     00 FA 05 A6 |  if_e	mov	result1, #0
06e90     64 02 90 AD |  if_e	jmp	#LR__0584
06e94     13 13 02 F6 | 	mov	arg01, local01
06e98     01 14 06 F6 | 	mov	arg02, #1
06e9c     01 16 06 F6 | 	mov	arg03, #1
06ea0     08 34 B2 FD | 	call	#__system__Mid_S
06ea4     FD 2C 02 F6 | 	mov	local04, result1
06ea8                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06ea8     C1 01 00 FF 
06eac     31 15 06 F6 | 	mov	arg02, ##@LR__5934
06eb0     16 13 02 F6 | 	mov	arg01, local04
06eb4     84 12 B2 FD | 	call	#__system___string_cmp
06eb8     00 FA 55 F2 | 	cmps	result1, #0 wc
06ebc     1C 00 90 CD |  if_b	jmp	#LR__0572
06ec0     C1 01 00 FF 
06ec4     33 2F 06 F6 | 	mov	local05, ##@LR__5935
06ec8     16 13 02 F6 | 	mov	arg01, local04
06ecc     17 15 02 F6 | 	mov	arg02, local05
06ed0     68 12 B2 FD | 	call	#__system___string_cmp
06ed4     01 FA 55 F2 | 	cmps	result1, #1 wc
06ed8     64 00 90 CD |  if_b	jmp	#LR__0573
06edc                 | LR__0572
06edc     C1 01 00 FF 
06ee0     35 31 06 F6 | 	mov	local06, ##@LR__5936
06ee4     18 2F 02 F6 | 	mov	local05, local06
06ee8     16 13 02 F6 | 	mov	arg01, local04
06eec     17 15 02 F6 | 	mov	arg02, local05
06ef0     48 12 B2 FD | 	call	#__system___string_cmp
06ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
06ef8     44 00 90 AD |  if_e	jmp	#LR__0573
06efc     C1 01 00 FF 
06f00     37 33 06 F6 | 	mov	local07, ##@LR__5937
06f04     19 31 02 F6 | 	mov	local06, local07
06f08     16 13 02 F6 | 	mov	arg01, local04
06f0c     18 15 02 F6 | 	mov	arg02, local06
06f10     28 12 B2 FD | 	call	#__system___string_cmp
06f14     FD 2E 0A F6 | 	mov	local05, result1 wz
06f18     24 00 90 AD |  if_e	jmp	#LR__0573
06f1c     C1 01 00 FF 
06f20     39 35 06 F6 | 	mov	local08, ##@LR__5938
06f24     1A 33 02 F6 | 	mov	local07, local08
06f28     16 13 02 F6 | 	mov	arg01, local04
06f2c     19 15 02 F6 | 	mov	arg02, local07
06f30     08 12 B2 FD | 	call	#__system___string_cmp
06f34     FD 30 0A F6 | 	mov	local06, result1 wz
06f38     00 FA 05 56 |  if_ne	mov	result1, #0
06f3c     B8 01 90 5D |  if_ne	jmp	#LR__0584
06f40                 | LR__0573
06f40                 | ' if m$="$" then hex=1 else hex=0
06f40     C1 01 00 FF 
06f44     3B 15 06 F6 | 	mov	arg02, ##@LR__5939
06f48     16 13 02 F6 | 	mov	arg01, local04
06f4c     EC 11 B2 FD | 	call	#__system___string_cmp
06f50     00 FA 0D F2 | 	cmp	result1, #0 wz
06f54     01 36 06 A6 |  if_e	mov	local09, #1
06f58     00 36 06 56 |  if_ne	mov	local09, #0
06f5c                 | ' if m$="%" then bin=1 else bin=0
06f5c     C1 01 00 FF 
06f60     3D 15 06 F6 | 	mov	arg02, ##@LR__5940
06f64     16 13 02 F6 | 	mov	arg01, local04
06f68     D0 11 B2 FD | 	call	#__system___string_cmp
06f6c     00 FA 0D F2 | 	cmp	result1, #0 wz
06f70     01 38 06 A6 |  if_e	mov	local10, #1
06f74     00 38 06 56 |  if_ne	mov	local10, #0
06f78                 | ' if l>1 then 
06f78     02 2A 56 F2 | 	cmps	local03, #2 wc
06f7c     74 01 90 CD |  if_b	jmp	#LR__0583
06f80                 | '   for i=2 to l
06f80     02 3A 06 F6 | 	mov	local11, #2
06f84     15 3D 02 F6 | 	mov	local12, local03
06f88     01 3C 06 F1 | 	add	local12, #1
06f8c                 | LR__0574
06f8c     1E 3B 52 F2 | 	cmps	local11, local12 wc
06f90     60 01 90 3D |  if_ae	jmp	#LR__0582
06f94     13 13 02 F6 | 	mov	arg01, local01
06f98     1D 15 02 F6 | 	mov	arg02, local11
06f9c     01 16 06 F6 | 	mov	arg03, #1
06fa0     08 33 B2 FD | 	call	#__system__Mid_S
06fa4     FD 2C 02 F6 | 	mov	local04, result1
06fa8                 | '     m$=mid$(s,i,1) 
06fa8                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06fa8     00 36 0E F2 | 	cmp	local09, #0 wz
06fac     50 00 90 5D |  if_ne	jmp	#LR__0576
06fb0     C1 01 00 FF 
06fb4     3F 15 06 F6 | 	mov	arg02, ##@LR__5941
06fb8     16 13 02 F6 | 	mov	arg01, local04
06fbc     7C 11 B2 FD | 	call	#__system___string_cmp
06fc0     00 FA 55 F2 | 	cmps	result1, #0 wc
06fc4     18 00 90 CD |  if_b	jmp	#LR__0575
06fc8     C1 01 00 FF 
06fcc     41 15 06 F6 | 	mov	arg02, ##@LR__5942
06fd0     16 13 02 F6 | 	mov	arg01, local04
06fd4     64 11 B2 FD | 	call	#__system___string_cmp
06fd8     01 FA 55 F2 | 	cmps	result1, #1 wc
06fdc     20 00 90 CD |  if_b	jmp	#LR__0576
06fe0                 | LR__0575
06fe0     C1 01 00 FF 
06fe4     43 31 06 F6 | 	mov	local06, ##@LR__5943
06fe8     16 13 02 F6 | 	mov	arg01, local04
06fec     18 15 02 F6 | 	mov	arg02, local06
06ff0     48 11 B2 FD | 	call	#__system___string_cmp
06ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
06ff8     00 FA 05 56 |  if_ne	mov	result1, #0
06ffc     F8 00 90 5D |  if_ne	jmp	#LR__0584
07000                 | LR__0576
07000                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
07000     01 36 0E F2 | 	cmp	local09, #1 wz
07004     90 00 90 5D |  if_ne	jmp	#LR__0579
07008     C1 01 00 FF 
0700c     45 15 06 F6 | 	mov	arg02, ##@LR__5944
07010     16 13 02 F6 | 	mov	arg01, local04
07014     24 11 B2 FD | 	call	#__system___string_cmp
07018     00 FA 55 F2 | 	cmps	result1, #0 wc
0701c     1C 00 90 CD |  if_b	jmp	#LR__0577
07020     C1 01 00 FF 
07024     47 15 06 F6 | 	mov	arg02, ##@LR__5945
07028     16 13 02 F6 | 	mov	arg01, local04
0702c     0C 11 B2 FD | 	call	#__system___string_cmp
07030     FD 3E 02 F6 | 	mov	local13, result1
07034     01 3E 56 F2 | 	cmps	local13, #1 wc
07038     5C 00 90 CD |  if_b	jmp	#LR__0579
0703c                 | LR__0577
0703c     C1 01 00 FF 
07040     49 2F 06 F6 | 	mov	local05, ##@LR__5946
07044     16 13 02 F6 | 	mov	arg01, local04
07048     17 15 02 F6 | 	mov	arg02, local05
0704c     EC 10 B2 FD | 	call	#__system___string_cmp
07050     FD 40 02 F6 | 	mov	local14, result1
07054     00 40 56 F2 | 	cmps	local14, #0 wc
07058     1C 00 90 CD |  if_b	jmp	#LR__0578
0705c     C1 01 00 FF 
07060     4B 33 06 F6 | 	mov	local07, ##@LR__5947
07064     16 13 02 F6 | 	mov	arg01, local04
07068     19 15 02 F6 | 	mov	arg02, local07
0706c     CC 10 B2 FD | 	call	#__system___string_cmp
07070     01 FA 55 F2 | 	cmps	result1, #1 wc
07074     20 00 90 CD |  if_b	jmp	#LR__0579
07078                 | LR__0578
07078     C1 01 00 FF 
0707c     4D 35 06 F6 | 	mov	local08, ##@LR__5948
07080     16 13 02 F6 | 	mov	arg01, local04
07084     1A 15 02 F6 | 	mov	arg02, local08
07088     B0 10 B2 FD | 	call	#__system___string_cmp
0708c     00 FA 0D F2 | 	cmp	result1, #0 wz
07090     00 FA 05 56 |  if_ne	mov	result1, #0
07094     60 00 90 5D |  if_ne	jmp	#LR__0584
07098                 | LR__0579
07098                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
07098     01 38 0E F2 | 	cmp	local10, #1 wz
0709c     4C 00 90 5D |  if_ne	jmp	#LR__0581
070a0     C1 01 00 FF 
070a4     4F 15 06 F6 | 	mov	arg02, ##@LR__5949
070a8     16 13 02 F6 | 	mov	arg01, local04
070ac     8C 10 B2 FD | 	call	#__system___string_cmp
070b0     00 FA 55 F2 | 	cmps	result1, #0 wc
070b4     18 00 90 CD |  if_b	jmp	#LR__0580
070b8     C1 01 00 FF 
070bc     51 15 06 F6 | 	mov	arg02, ##@LR__5950
070c0     16 13 02 F6 | 	mov	arg01, local04
070c4     74 10 B2 FD | 	call	#__system___string_cmp
070c8     01 FA 55 F2 | 	cmps	result1, #1 wc
070cc     1C 00 90 CD |  if_b	jmp	#LR__0581
070d0                 | LR__0580
070d0     C1 01 00 FF 
070d4     53 15 06 F6 | 	mov	arg02, ##@LR__5951
070d8     16 13 02 F6 | 	mov	arg01, local04
070dc     5C 10 B2 FD | 	call	#__system___string_cmp
070e0     00 FA 0D F2 | 	cmp	result1, #0 wz
070e4     00 FA 05 56 |  if_ne	mov	result1, #0
070e8     0C 00 90 5D |  if_ne	jmp	#LR__0584
070ec                 | LR__0581
070ec     01 3A 06 F1 | 	add	local11, #1
070f0     98 FE 9F FD | 	jmp	#LR__0574
070f4                 | LR__0582
070f4                 | LR__0583
070f4                 | ' return true
070f4     01 FA 65 F6 | 	neg	result1, #1
070f8                 | LR__0584
070f8     A7 F0 03 F6 | 	mov	ptra, fp
070fc     B2 00 A0 FD | 	call	#popregs_
07100                 | _isint_ret
07100     2D 00 64 FD | 	ret
07104                 | 
07104                 | ' 
07104                 | ' ' Check if the part is a positive decimal number.  
07104                 | ' 
07104                 | ' function isdec(s as string) as boolean
07104                 | _isdec
07104     05 4A 05 F6 | 	mov	COUNT_, #5
07108     A8 00 A0 FD | 	call	#pushregs_
0710c     09 27 02 F6 | 	mov	local01, arg01
07110     09 29 02 F6 | 	mov	local02, arg01
07114     97 06 48 FB | 	callpa	#(@LR__0591-@LR__0590)>>2,fcache_load_ptr_
07118                 | LR__0590
07118     14 FB C9 FA | 	rdbyte	result1, local02 wz
0711c     01 28 06 51 |  if_ne	add	local02, #1
07120     F4 FF 9F 5D |  if_ne	jmp	#LR__0590
07124                 | LR__0591
07124     09 29 82 F1 | 	sub	local02, arg01
07128     14 FB 01 F6 | 	mov	result1, local02
0712c     FD 28 0A F6 | 	mov	local02, result1 wz
07130     00 FA 05 A6 |  if_e	mov	result1, #0
07134     80 00 90 AD |  if_e	jmp	#LR__0596
07138                 | ' for i=1 to l
07138     01 2A 06 F6 | 	mov	local03, #1
0713c     14 2D 02 F6 | 	mov	local04, local02
07140     01 2C 06 F1 | 	add	local04, #1
07144                 | LR__0592
07144     16 2B 52 F2 | 	cmps	local03, local04 wc
07148     68 00 90 3D |  if_ae	jmp	#LR__0595
0714c     13 13 02 F6 | 	mov	arg01, local01
07150     15 15 02 F6 | 	mov	arg02, local03
07154     01 16 06 F6 | 	mov	arg03, #1
07158     50 31 B2 FD | 	call	#__system__Mid_S
0715c     FD 2E 02 F6 | 	mov	local05, result1
07160                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
07160     C1 01 00 FF 
07164     55 15 06 F6 | 	mov	arg02, ##@LR__5952
07168     17 13 02 F6 | 	mov	arg01, local05
0716c     CC 0F B2 FD | 	call	#__system___string_cmp
07170     00 FA 55 F2 | 	cmps	result1, #0 wc
07174     18 00 90 CD |  if_b	jmp	#LR__0593
07178     C1 01 00 FF 
0717c     57 15 06 F6 | 	mov	arg02, ##@LR__5953
07180     17 13 02 F6 | 	mov	arg01, local05
07184     B4 0F B2 FD | 	call	#__system___string_cmp
07188     01 FA 55 F2 | 	cmps	result1, #1 wc
0718c     1C 00 90 CD |  if_b	jmp	#LR__0594
07190                 | LR__0593
07190     C1 01 00 FF 
07194     59 15 06 F6 | 	mov	arg02, ##@LR__5954
07198     17 13 02 F6 | 	mov	arg01, local05
0719c     9C 0F B2 FD | 	call	#__system___string_cmp
071a0     00 FA 0D F2 | 	cmp	result1, #0 wz
071a4     00 FA 05 56 |  if_ne	mov	result1, #0
071a8     0C 00 90 5D |  if_ne	jmp	#LR__0596
071ac                 | LR__0594
071ac     01 2A 06 F1 | 	add	local03, #1
071b0     90 FF 9F FD | 	jmp	#LR__0592
071b4                 | LR__0595
071b4                 | ' return true
071b4     01 FA 65 F6 | 	neg	result1, #1
071b8                 | LR__0596
071b8     A7 F0 03 F6 | 	mov	ptra, fp
071bc     B2 00 A0 FD | 	call	#popregs_
071c0                 | _isdec_ret
071c0     2D 00 64 FD | 	ret
071c4                 | 
071c4                 | ' 
071c4                 | ' ' Check if the part is a string.  
071c4                 | ' 
071c4                 | ' function isstring(s as string) as boolean
071c4                 | _isstring
071c4     01 4A 05 F6 | 	mov	COUNT_, #1
071c8     A8 00 A0 FD | 	call	#pushregs_
071cc                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
071cc     09 27 02 F6 | 	mov	local01, arg01
071d0     01 14 06 F6 | 	mov	arg02, #1
071d4     BC 2F B2 FD | 	call	#__system__Left_S
071d8     FD 12 02 F6 | 	mov	arg01, result1
071dc     C1 01 00 FF 
071e0     5B 15 06 F6 | 	mov	arg02, ##@LR__5955
071e4     54 0F B2 FD | 	call	#__system___string_cmp
071e8     00 FA 4D F2 | 	cmps	result1, #0 wz
071ec     28 00 90 5D |  if_ne	jmp	#LR__0600
071f0     13 13 02 F6 | 	mov	arg01, local01
071f4     01 14 06 F6 | 	mov	arg02, #1
071f8     20 30 B2 FD | 	call	#__system__Right_S
071fc     FD 12 02 F6 | 	mov	arg01, result1
07200     C1 01 00 FF 
07204     5D 15 06 F6 | 	mov	arg02, ##@LR__5956
07208     30 0F B2 FD | 	call	#__system___string_cmp
0720c     00 FA 4D F2 | 	cmps	result1, #0 wz
07210     01 FA 65 A6 |  if_e	neg	result1, #1
07214     04 00 90 AD |  if_e	jmp	#LR__0601
07218                 | LR__0600
07218     00 FA 05 F6 | 	mov	result1, #0
0721c                 | LR__0601
0721c     A7 F0 03 F6 | 	mov	ptra, fp
07220     B2 00 A0 FD | 	call	#popregs_
07224                 | _isstring_ret
07224     2D 00 64 FD | 	ret
07228                 | 
07228                 | ' 
07228                 | ' ' getnoteval. Returns the frequency of note token
07228                 | ' 
07228                 | ' function getnoteval(token) as single
07228                 | _getnoteval
07228     02 4A 05 F6 | 	mov	COUNT_, #2
0722c     A8 00 A0 FD | 	call	#pushregs_
07230     01 00 00 FF 
07234     00 13 86 F1 | 	sub	arg01, ##768
07238     09 15 52 F6 | 	abs	arg02, arg01 wc
0723c     0C 14 16 FD | 	qdiv	arg02, #12
07240     14 00 00 FF 
07244     D8 E4 05 F1 | 	add	objptr, ##10456
07248     19 14 62 FD | 	getqy	arg02
0724c     0A 15 82 F6 | 	negc	arg02, arg02
07250     02 14 66 F0 | 	shl	arg02, #2
07254     F2 14 02 F1 | 	add	arg02, objptr
07258     0A 27 02 FB | 	rdlong	local01, arg02
0725c     09 15 52 F6 | 	abs	arg02, arg01 wc
07260     0C 14 16 FD | 	qdiv	arg02, #12
07264     14 00 00 FF 
07268     D8 E4 85 F1 | 	sub	objptr, ##10456
0726c     01 12 06 F6 | 	mov	arg01, #1
07270                 | ' noteexp=1+(note/12) 
07270                 | ' return (2.0^noteexp)*notebase
07270     18 14 62 FD | 	getqx	arg02
07274     0A 13 82 F3 | 	sumc	arg01, arg02
07278     09 13 52 F6 | 	abs	arg01, arg01 wc
0727c     1F 28 C6 C9 |  if_b	decod	local02, #31
07280     00 28 06 36 |  if_ae	mov	local02, #0
07284     04 39 B2 FD | 	call	#__system___float_fromuns
07288     14 FB 61 F5 | 	xor	result1, local02
0728c     FD 14 02 F6 | 	mov	arg02, result1
07290     1E 12 C6 F9 | 	decod	arg01, #30
07294     04 4C B2 FD | 	call	#__system____builtin_powf
07298     FD 12 02 F6 | 	mov	arg01, result1
0729c     13 15 02 F6 | 	mov	arg02, local01
072a0     EC 3C B2 FD | 	call	#__system___float_mul
072a4     A7 F0 03 F6 | 	mov	ptra, fp
072a8     B2 00 A0 FD | 	call	#popregs_
072ac                 | _getnoteval_ret
072ac     2D 00 64 FD | 	ret
072b0                 | 
072b0                 | ' 
072b0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072b0                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
072b0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072b0                 | ' 
072b0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072b0                 | ' '
072b0                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
072b0                 | ' '
072b0                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
072b0                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
072b0                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
072b0                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
072b0                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
072b0                 | ' ' 
072b0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072b0                 | ' 
072b0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072b0                 | ' ' Helper functions to manage program lines
072b0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072b0                 | ' 
072b0                 | ' '----- delete a line from a program
072b0                 | ' 
072b0                 | ' function deleteline(aline as ulong) as integer
072b0                 | _deleteline
072b0     02 4A 05 F6 | 	mov	COUNT_, #2
072b4     A8 00 A0 FD | 	call	#pushregs_
072b8     2C F0 07 F1 | 	add	ptra, #44
072bc     04 4E 05 F1 | 	add	fp, #4
072c0     A7 12 62 FC | 	wrlong	arg01, fp
072c4     4A 00 00 FF 
072c8     A8 E4 05 F1 | 	add	objptr, ##38056
072cc     F2 26 02 FB | 	rdlong	local01, objptr
072d0     0C 4E 05 F1 | 	add	fp, #12
072d4     A7 26 62 FC | 	wrlong	local01, fp
072d8     10 4E 85 F1 | 	sub	fp, #16
072dc                 | ' 
072dc                 | ' searchptr=programstart
072dc                 | ' do
072dc     3E 00 00 FF 
072e0     DC E5 85 F1 | 	sub	objptr, ##32220
072e4                 | LR__0610
072e4     14 4E 05 F1 | 	add	fp, #20
072e8     A7 12 02 F6 | 	mov	arg01, fp
072ec     04 4E 85 F1 | 	sub	fp, #4
072f0     A7 14 02 FB | 	rdlong	arg02, fp
072f4     10 4E 85 F1 | 	sub	fp, #16
072f8     18 16 06 F6 | 	mov	arg03, #24
072fc     70 01 B2 FD | 	call	#_psram_spin2_read1
07300     10 4E 05 F1 | 	add	fp, #16
07304     A7 26 02 FB | 	rdlong	local01, fp
07308     08 4E 85 F1 | 	sub	fp, #8
0730c     A7 26 62 FC | 	wrlong	local01, fp
07310     20 4E 05 F1 | 	add	fp, #32
07314     A7 26 02 FB | 	rdlong	local01, fp
07318     18 4E 85 F1 | 	sub	fp, #24
0731c     A7 26 62 FC | 	wrlong	local01, fp
07320     04 4E 05 F1 | 	add	fp, #4
07324     A7 26 02 FB | 	rdlong	local01, fp
07328     10 4E 85 F1 | 	sub	fp, #16
0732c     A7 16 02 FB | 	rdlong	arg03, fp
07330     04 4E 85 F1 | 	sub	fp, #4
07334     0B 27 12 F2 | 	cmp	local01, arg03 wc
07338     28 4E 05 C1 |  if_b	add	fp, #40
0733c     A7 28 02 CB |  if_b	rdlong	local02, fp
07340     28 4E 85 C1 |  if_b	sub	fp, #40
07344     FF FF 3F CF 
07348     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
0734c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0610
07350     0B 00 00 FF 
07354     CC E4 85 F1 | 	sub	objptr, ##5836
07358                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
07358     14 4E 05 F1 | 	add	fp, #20
0735c     A7 26 02 FB | 	rdlong	local01, fp
07360     10 4E 85 F1 | 	sub	fp, #16
07364     A7 28 02 FB | 	rdlong	local02, fp
07368     04 4E 85 F1 | 	sub	fp, #4
0736c     14 27 0A F2 | 	cmp	local01, local02 wz
07370     01 FA 65 56 |  if_ne	neg	result1, #1
07374     34 02 90 5D |  if_ne	jmp	#LR__0615
07378     08 4E 05 F1 | 	add	fp, #8
0737c     A7 12 02 FB | 	rdlong	arg01, fp
07380     08 4E 85 F1 | 	sub	fp, #8
07384     01 14 66 F6 | 	neg	arg02, #1
07388     D0 D4 B1 FD | 	call	#_pslpoke
0738c                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
0738c                 | ' 
0738c                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
0738c     28 4E 05 F1 | 	add	fp, #40
07390     A7 26 02 FB | 	rdlong	local01, fp
07394     28 4E 85 F1 | 	sub	fp, #40
07398     FF FF 3F FF 
0739c     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
073a0     24 4E 05 A1 |  if_e	add	fp, #36
073a4     A7 28 02 AB |  if_e	rdlong	local02, fp
073a8     24 4E 85 A1 |  if_e	sub	fp, #36
073ac     FF FF 7F AF 
073b0     FF 29 0E A2 |  if_e	cmp	local02, ##-1 wz
073b4     88 00 90 5D |  if_ne	jmp	#LR__0611
073b8     4A 00 00 FF 
073bc     A8 E4 05 F1 | 	add	objptr, ##38056
073c0     00 04 80 FF 
073c4     F2 00 68 FC | 	wrlong	##524288, objptr
073c8     07 00 00 FF 
073cc     2C E4 85 F1 | 	sub	objptr, ##3628
073d0     00 04 80 FF 
073d4     F2 00 68 FC | 	wrlong	##524288, objptr
073d8     07 00 00 FF 
073dc     30 E4 05 F1 | 	add	objptr, ##3632
073e0     F2 00 68 FC | 	wrlong	#0, objptr
073e4     04 E4 05 F1 | 	add	objptr, #4
073e8     FF FF FF FF 
073ec     F2 FE 6B FC | 	wrlong	##-1, objptr
073f0     4A 00 00 FF 
073f4     B0 E4 85 F1 | 	sub	objptr, ##38064
073f8     00 12 06 F6 | 	mov	arg01, #0
073fc     01 14 66 F6 | 	neg	arg02, #1
07400     58 D4 B1 FD | 	call	#_pslpoke
07404     10 12 06 F6 | 	mov	arg01, #16
07408     01 14 66 F6 | 	neg	arg02, #1
0740c     4C D4 B1 FD | 	call	#_pslpoke
07410     14 12 06 F6 | 	mov	arg01, #20
07414     1E 14 CE F9 | 	bmask	arg02, #30
07418     40 D4 B1 FD | 	call	#_pslpoke
0741c     50 00 00 FF 
07420     D8 E4 05 F1 | 	add	objptr, ##41176
07424     00 04 80 FF 
07428     F2 00 68 FC | 	wrlong	##524288, objptr
0742c     04 E4 05 F1 | 	add	objptr, #4
07430     00 04 80 FF 
07434     F2 00 68 FC | 	wrlong	##524288, objptr
07438     50 00 00 FF 
0743c     DC E4 85 F1 | 	sub	objptr, ##41180
07440                 | LR__0611
07440                 | ' 
07440                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
07440     28 4E 05 F1 | 	add	fp, #40
07444     A7 26 02 FB | 	rdlong	local01, fp
07448     28 4E 85 F1 | 	sub	fp, #40
0744c     FF FF 3F FF 
07450     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
07454     74 00 90 5D |  if_ne	jmp	#LR__0612
07458     24 4E 05 F1 | 	add	fp, #36
0745c     A7 28 02 FB | 	rdlong	local02, fp
07460     24 4E 85 F1 | 	sub	fp, #36
07464     FF FF 7F FF 
07468     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0746c     5C 00 90 AD |  if_e	jmp	#LR__0612
07470     24 4E 05 F1 | 	add	fp, #36
07474     A7 12 02 FB | 	rdlong	arg01, fp
07478     24 4E 85 F1 | 	sub	fp, #36
0747c     14 12 06 F1 | 	add	arg01, #20
07480     1E 14 CE F9 | 	bmask	arg02, #30
07484     D4 D3 B1 FD | 	call	#_pslpoke
07488     24 4E 05 F1 | 	add	fp, #36
0748c     A7 26 02 FB | 	rdlong	local01, fp
07490     4A 00 00 FF 
07494     B0 E4 05 F1 | 	add	objptr, ##38064
07498     F2 26 62 FC | 	wrlong	local01, objptr
0749c     4A 00 00 FF 
074a0     B0 E4 85 F1 | 	sub	objptr, ##38064
074a4     A7 12 02 FB | 	rdlong	arg01, fp
074a8     24 4E 85 F1 | 	sub	fp, #36
074ac     DC D4 B1 FD | 	call	#_pslpeek
074b0     4A 00 00 FF 
074b4     AC E4 05 F1 | 	add	objptr, ##38060
074b8     F2 FA 61 FC | 	wrlong	result1, objptr
074bc     4A 00 00 FF 
074c0     AC E4 85 F1 | 	sub	objptr, ##38060
074c4                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
074c4                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
074c4                 | '   lastline=pslpeek(header(4))
074c4                 | '   return 0
074c4     00 FA 05 F6 | 	mov	result1, #0
074c8     E0 00 90 FD | 	jmp	#LR__0615
074cc                 | LR__0612
074cc                 | ' 
074cc                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
074cc     28 4E 05 F1 | 	add	fp, #40
074d0     A7 26 02 FB | 	rdlong	local01, fp
074d4     28 4E 85 F1 | 	sub	fp, #40
074d8     FF FF 3F FF 
074dc     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
074e0     58 00 90 AD |  if_e	jmp	#LR__0613
074e4     24 4E 05 F1 | 	add	fp, #36
074e8     A7 28 02 FB | 	rdlong	local02, fp
074ec     24 4E 85 F1 | 	sub	fp, #36
074f0     FF FF 7F FF 
074f4     FF 29 0E F2 | 	cmp	local02, ##-1 wz
074f8     40 00 90 5D |  if_ne	jmp	#LR__0613
074fc     28 4E 05 F1 | 	add	fp, #40
07500     A7 12 02 FB | 	rdlong	arg01, fp
07504     28 4E 85 F1 | 	sub	fp, #40
07508     10 12 06 F1 | 	add	arg01, #16
0750c     01 14 66 F6 | 	neg	arg02, #1
07510     48 D3 B1 FD | 	call	#_pslpoke
07514     28 4E 05 F1 | 	add	fp, #40
07518     A7 26 02 FB | 	rdlong	local01, fp
0751c     28 4E 85 F1 | 	sub	fp, #40
07520     4A 00 00 FF 
07524     A8 E4 05 F1 | 	add	objptr, ##38056
07528     F2 26 62 FC | 	wrlong	local01, objptr
0752c     4A 00 00 FF 
07530     A8 E4 85 F1 | 	sub	objptr, ##38056
07534                 | ' '   print "deleted first line"
07534                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
07534                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
07534                 | '   return 0
07534     00 FA 05 F6 | 	mov	result1, #0
07538     70 00 90 FD | 	jmp	#LR__0615
0753c                 | LR__0613
0753c                 | ' 
0753c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
0753c     28 4E 05 F1 | 	add	fp, #40
07540     A7 26 02 FB | 	rdlong	local01, fp
07544     28 4E 85 F1 | 	sub	fp, #40
07548     FF FF 3F FF 
0754c     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
07550     24 4E 05 51 |  if_ne	add	fp, #36
07554     A7 28 02 5B |  if_ne	rdlong	local02, fp
07558     24 4E 85 51 |  if_ne	sub	fp, #36
0755c     FF FF 7F 5F 
07560     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
07564     40 00 90 AD |  if_e	jmp	#LR__0614
07568     28 4E 05 F1 | 	add	fp, #40
0756c     A7 12 02 FB | 	rdlong	arg01, fp
07570     10 12 06 F1 | 	add	arg01, #16
07574     04 4E 85 F1 | 	sub	fp, #4
07578     A7 14 02 FB | 	rdlong	arg02, fp
0757c     24 4E 85 F1 | 	sub	fp, #36
07580     D8 D2 B1 FD | 	call	#_pslpoke
07584     24 4E 05 F1 | 	add	fp, #36
07588     A7 12 02 FB | 	rdlong	arg01, fp
0758c     14 12 06 F1 | 	add	arg01, #20
07590     04 4E 05 F1 | 	add	fp, #4
07594     A7 14 02 FB | 	rdlong	arg02, fp
07598     28 4E 85 F1 | 	sub	fp, #40
0759c     BC D2 B1 FD | 	call	#_pslpoke
075a0                 | '    pslpoke(header(5)+16,header(4))  
075a0                 | '    pslpoke(header(4)+20, header(5))
075a0                 | '    return 0
075a0     00 FA 05 F6 | 	mov	result1, #0
075a4     04 00 90 FD | 	jmp	#LR__0615
075a8                 | LR__0614
075a8     00 FA 05 F6 | 	mov	result1, #0
075ac                 | LR__0615
075ac     A7 F0 03 F6 | 	mov	ptra, fp
075b0     B2 00 A0 FD | 	call	#popregs_
075b4                 | _deleteline_ret
075b4     2D 00 64 FD | 	ret
075b8                 | 
075b8                 | ' 
075b8                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
075b8                 | ' 
075b8                 | ' sub save_line
075b8                 | _save_line
075b8     03 4A 05 F6 | 	mov	COUNT_, #3
075bc     A8 00 A0 FD | 	call	#pushregs_
075c0     4A 00 00 FF 
075c4     9C E4 05 F1 | 	add	objptr, ##38044
075c8     F2 16 02 FB | 	rdlong	arg03, objptr
075cc     01 16 06 F1 | 	add	arg03, #1
075d0     05 00 00 FF 
075d4     18 E4 85 F1 | 	sub	objptr, ##2584
075d8     F2 14 02 FB | 	rdlong	arg02, objptr
075dc     0B 15 02 FD | 	qmul	arg02, arg03
075e0     0E 00 00 FF 
075e4     44 E4 85 F1 | 	sub	objptr, ##7236
075e8     F2 12 02 FB | 	rdlong	arg01, objptr
075ec     37 00 00 FF 
075f0     40 E4 85 F1 | 	sub	objptr, ##28224
075f4     09 27 02 F6 | 	mov	local01, arg01
075f8     18 28 62 FD | 	getqx	local02
075fc     97 06 48 FB | 	callpa	#(@LR__0621-@LR__0620)>>2,fcache_load_ptr_
07600                 | LR__0620
07600     13 FB C9 FA | 	rdbyte	result1, local01 wz
07604     01 26 06 51 |  if_ne	add	local01, #1
07608     F4 FF 9F 5D |  if_ne	jmp	#LR__0620
0760c                 | LR__0621
0760c     09 27 82 F1 | 	sub	local01, arg01
07610     03 26 CE F7 | 	test	local01, #3 wz
07614     02 26 46 50 |  if_ne	shr	local01, #2
07618     01 26 06 51 |  if_ne	add	local01, #1
0761c     02 26 66 50 |  if_ne	shl	local01, #2
07620     14 2B 02 F6 | 	mov	local03, local02
07624     13 2B 02 F1 | 	add	local03, local01
07628     43 00 00 FF 
0762c     7C E4 05 F1 | 	add	objptr, ##34428
07630     F2 16 02 FB | 	rdlong	arg03, objptr
07634     14 17 02 F1 | 	add	arg03, local02
07638     04 00 00 FF 
0763c     28 E4 05 F1 | 	add	objptr, ##2088
07640     F2 16 62 FC | 	wrlong	arg03, objptr
07644     04 E4 05 F1 | 	add	objptr, #4
07648     F2 26 62 FC | 	wrlong	local01, objptr
0764c     0C E4 85 F1 | 	sub	objptr, #12
07650     F2 12 02 F6 | 	mov	arg01, objptr
07654     04 00 00 FF 
07658     20 E4 85 F1 | 	sub	objptr, ##2080
0765c     F2 14 02 FB | 	rdlong	arg02, objptr
07660     14 17 02 F6 | 	mov	arg03, local02
07664     37 00 00 FF 
07668     B0 E5 85 F1 | 	sub	objptr, ##28592
0766c     9C FE B1 FD | 	call	#_psram_spin2_write
07670     2B 00 00 FF 
07674     74 E5 05 F1 | 	add	objptr, ##22388
07678     F2 12 02 FB | 	rdlong	arg01, objptr
0767c     0C 00 00 FF 
07680     3C E4 05 F1 | 	add	objptr, ##6204
07684     F2 14 02 FB | 	rdlong	arg02, objptr
07688     14 15 02 F1 | 	add	arg02, local02
0768c     13 17 02 F6 | 	mov	arg03, local01
07690     37 00 00 FF 
07694     B0 E5 85 F1 | 	sub	objptr, ##28592
07698     70 FE B1 FD | 	call	#_psram_spin2_write
0769c     37 00 00 FF 
076a0     B0 E5 05 F1 | 	add	objptr, ##28592
076a4     F2 26 02 FB | 	rdlong	local01, objptr
076a8     15 27 02 F1 | 	add	local01, local03
076ac     F2 26 62 FC | 	wrlong	local01, objptr
076b0     43 00 00 FF 
076b4     7C E4 85 F1 | 	sub	objptr, ##34428
076b8     A7 F0 03 F6 | 	mov	ptra, fp
076bc     B2 00 A0 FD | 	call	#popregs_
076c0                 | _save_line_ret
076c0     2D 00 64 FD | 	ret
076c4                 | 
076c4                 | ' 
076c4                 | ' '----- Insert a new line into the middle of the program
076c4                 | ' 
076c4                 | ' function insertline(aline as ulong) as integer
076c4                 | _insertline
076c4     02 4A 05 F6 | 	mov	COUNT_, #2
076c8     A8 00 A0 FD | 	call	#pushregs_
076cc     28 F0 07 F1 | 	add	ptra, #40
076d0     04 4E 05 F1 | 	add	fp, #4
076d4     A7 12 62 FC | 	wrlong	arg01, fp
076d8     4A 00 00 FF 
076dc     A8 E4 05 F1 | 	add	objptr, ##38056
076e0     F2 26 02 FB | 	rdlong	local01, objptr
076e4     04 4E 05 F1 | 	add	fp, #4
076e8     A7 26 62 FC | 	wrlong	local01, fp
076ec     08 4E 85 F1 | 	sub	fp, #8
076f0                 | ' 
076f0                 | ' do
076f0     3E 00 00 FF 
076f4     DC E5 85 F1 | 	sub	objptr, ##32220
076f8                 | LR__0630
076f8     10 4E 05 F1 | 	add	fp, #16
076fc     A7 12 02 F6 | 	mov	arg01, fp
07700     08 4E 85 F1 | 	sub	fp, #8
07704     A7 14 02 FB | 	rdlong	arg02, fp
07708     08 4E 85 F1 | 	sub	fp, #8
0770c     18 16 06 F6 | 	mov	arg03, #24
07710     5C FD B1 FD | 	call	#_psram_spin2_read1
07714     08 4E 05 F1 | 	add	fp, #8
07718     A7 26 02 FB | 	rdlong	local01, fp
0771c     04 4E 05 F1 | 	add	fp, #4
07720     A7 26 62 FC | 	wrlong	local01, fp
07724     18 4E 05 F1 | 	add	fp, #24
07728     A7 26 02 FB | 	rdlong	local01, fp
0772c     1C 4E 85 F1 | 	sub	fp, #28
07730     A7 26 62 FC | 	wrlong	local01, fp
07734     08 4E 05 F1 | 	add	fp, #8
07738     A7 26 02 FB | 	rdlong	local01, fp
0773c     0C 4E 85 F1 | 	sub	fp, #12
07740     A7 16 02 FB | 	rdlong	arg03, fp
07744     04 4E 85 F1 | 	sub	fp, #4
07748     0B 27 12 F2 | 	cmp	local01, arg03 wc
0774c     24 4E 05 C1 |  if_b	add	fp, #36
07750     A7 28 02 CB |  if_b	rdlong	local02, fp
07754     24 4E 85 C1 |  if_b	sub	fp, #36
07758     FF FF 3F CF 
0775c     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
07760     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0630
07764     0B 00 00 FF 
07768     CC E4 85 F1 | 	sub	objptr, ##5836
0776c                 | ' 
0776c                 | ' if header(0)=aline then return -1 				' delete it first
0776c     10 4E 05 F1 | 	add	fp, #16
07770     A7 26 02 FB | 	rdlong	local01, fp
07774     0C 4E 85 F1 | 	sub	fp, #12
07778     A7 28 02 FB | 	rdlong	local02, fp
0777c     04 4E 85 F1 | 	sub	fp, #4
07780     14 27 0A F2 | 	cmp	local01, local02 wz
07784     01 FA 65 A6 |  if_e	neg	result1, #1
07788     48 01 90 AD |  if_e	jmp	#LR__0633
0778c                 | ' if header(0)<aline then return -2 				' end of program reached
0778c     10 4E 05 F1 | 	add	fp, #16
07790     A7 26 02 FB | 	rdlong	local01, fp
07794     0C 4E 85 F1 | 	sub	fp, #12
07798     A7 16 02 FB | 	rdlong	arg03, fp
0779c     04 4E 85 F1 | 	sub	fp, #4
077a0     0B 27 12 F2 | 	cmp	local01, arg03 wc
077a4     02 FA 65 C6 |  if_b	neg	result1, #2
077a8     28 01 90 CD |  if_b	jmp	#LR__0633
077ac                 | ' 
077ac                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
077ac     20 4E 05 F1 | 	add	fp, #32
077b0     A7 26 02 FB | 	rdlong	local01, fp
077b4     20 4E 85 F1 | 	sub	fp, #32
077b8     FF FF 7F FF 
077bc     FF 27 0E F2 | 	cmp	local01, ##-1 wz
077c0     78 00 90 5D |  if_ne	jmp	#LR__0631
077c4     43 00 00 FF 
077c8     7C E4 05 F1 | 	add	objptr, ##34428
077cc     F2 26 02 FB | 	rdlong	local01, objptr
077d0     07 00 00 FF 
077d4     2C E4 05 F1 | 	add	objptr, ##3628
077d8     F2 26 62 FC | 	wrlong	local01, objptr
077dc     0C 4E 05 F1 | 	add	fp, #12
077e0     A7 12 02 FB | 	rdlong	arg01, fp
077e4     0C 4E 85 F1 | 	sub	fp, #12
077e8     10 12 06 F1 | 	add	arg01, #16
077ec     07 00 00 FF 
077f0     2C E4 85 F1 | 	sub	objptr, ##3628
077f4     F2 14 02 FB | 	rdlong	arg02, objptr
077f8     43 00 00 FF 
077fc     7C E4 85 F1 | 	sub	objptr, ##34428
07800     58 D0 B1 FD | 	call	#_pslpoke
07804     47 00 00 FF 
07808     AC E4 05 F1 | 	add	objptr, ##36524
0780c     FF FF FF FF 
07810     F2 FE 6B FC | 	wrlong	##-1, objptr
07814     0C 4E 05 F1 | 	add	fp, #12
07818     A7 26 02 FB | 	rdlong	local01, fp
0781c     0C 4E 85 F1 | 	sub	fp, #12
07820     04 E4 05 F1 | 	add	objptr, #4
07824     F2 26 62 FC | 	wrlong	local01, objptr
07828     47 00 00 FF 
0782c     B0 E4 85 F1 | 	sub	objptr, ##36528
07830     84 FD BF FD | 	call	#_save_line
07834                 | '   programstart=programptr
07834                 | '   pslpoke(lineptr2+16,programptr)
07834                 | '   ucompiledline(4)=$FFFF_FFFF
07834                 | '   ucompiledline(5)=lineptr2
07834                 | '   save_line
07834                 | '   return 0
07834     00 FA 05 F6 | 	mov	result1, #0
07838     98 00 90 FD | 	jmp	#LR__0633
0783c                 | LR__0631
0783c                 | ' 
0783c                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
0783c     20 4E 05 F1 | 	add	fp, #32
07840     A7 26 02 FB | 	rdlong	local01, fp
07844     20 4E 85 F1 | 	sub	fp, #32
07848     FF FF 7F FF 
0784c     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07850     7C 00 90 AD |  if_e	jmp	#LR__0632
07854     20 4E 05 F1 | 	add	fp, #32
07858     A7 26 02 FB | 	rdlong	local01, fp
0785c     47 00 00 FF 
07860     AC E4 05 F1 | 	add	objptr, ##36524
07864     F2 26 62 FC | 	wrlong	local01, objptr
07868     14 4E 85 F1 | 	sub	fp, #20
0786c     A7 26 02 FB | 	rdlong	local01, fp
07870     04 E4 05 F1 | 	add	objptr, #4
07874     F2 26 62 FC | 	wrlong	local01, objptr
07878     A7 12 02 FB | 	rdlong	arg01, fp
0787c     0C 4E 85 F1 | 	sub	fp, #12
07880     10 12 06 F1 | 	add	arg01, #16
07884     04 00 00 FF 
07888     34 E4 85 F1 | 	sub	objptr, ##2100
0788c     F2 14 02 FB | 	rdlong	arg02, objptr
07890     43 00 00 FF 
07894     7C E4 85 F1 | 	sub	objptr, ##34428
07898     C0 CF B1 FD | 	call	#_pslpoke
0789c     20 4E 05 F1 | 	add	fp, #32
078a0     A7 12 02 FB | 	rdlong	arg01, fp
078a4     20 4E 85 F1 | 	sub	fp, #32
078a8     14 12 06 F1 | 	add	arg01, #20
078ac     43 00 00 FF 
078b0     7C E4 05 F1 | 	add	objptr, ##34428
078b4     F2 14 02 FB | 	rdlong	arg02, objptr
078b8     43 00 00 FF 
078bc     7C E4 85 F1 | 	sub	objptr, ##34428
078c0     98 CF B1 FD | 	call	#_pslpoke
078c4     F0 FC BF FD | 	call	#_save_line
078c8                 | '   ucompiledline(4)=header(4)
078c8                 | '   ucompiledline(5)=lineptr2
078c8                 | '   pslpoke(lineptr2+16,programptr)
078c8                 | '   pslpoke(header(4)+20,programptr)
078c8                 | '   save_line
078c8                 | '   return 0
078c8     00 FA 05 F6 | 	mov	result1, #0
078cc     04 00 90 FD | 	jmp	#LR__0633
078d0                 | LR__0632
078d0     00 FA 05 F6 | 	mov	result1, #0
078d4                 | LR__0633
078d4     A7 F0 03 F6 | 	mov	ptra, fp
078d8     B2 00 A0 FD | 	call	#popregs_
078dc                 | _insertline_ret
078dc     2D 00 64 FD | 	ret
078e0                 | 
078e0                 | ' 
078e0                 | ' '----- Adds a new line at the end of the program
078e0                 | ' 
078e0                 | ' sub add_line_at_end(aline) 
078e0                 | _add_line_at_end
078e0     4A 00 00 FF 
078e4     AC E4 05 F1 | 	add	objptr, ##38060
078e8     F2 12 62 FC | 	wrlong	arg01, objptr
078ec     04 E4 05 F1 | 	add	objptr, #4
078f0     F2 14 02 FB | 	rdlong	arg02, objptr
078f4     03 00 00 FF 
078f8     04 E4 85 F1 | 	sub	objptr, ##1540
078fc     F2 14 62 FC | 	wrlong	arg02, objptr
07900     03 00 00 FF 
07904     04 E4 05 F1 | 	add	objptr, ##1540
07908     F2 12 02 FB | 	rdlong	arg01, objptr
0790c     14 12 06 F1 | 	add	arg01, #20
07910     07 00 00 FF 
07914     34 E4 85 F1 | 	sub	objptr, ##3636
07918     F2 14 02 FB | 	rdlong	arg02, objptr
0791c     43 00 00 FF 
07920     7C E4 85 F1 | 	sub	objptr, ##34428
07924     34 CF B1 FD | 	call	#_pslpoke
07928     43 00 00 FF 
0792c     7C E4 05 F1 | 	add	objptr, ##34428
07930     F2 14 02 FB | 	rdlong	arg02, objptr
07934     07 00 00 FF 
07938     34 E4 05 F1 | 	add	objptr, ##3636
0793c     F2 14 62 FC | 	wrlong	arg02, objptr
07940     03 00 00 FF 
07944     00 E4 85 F1 | 	sub	objptr, ##1536
07948     FF FF BF FF 
0794c     F2 FE 6B FC | 	wrlong	##2147483647, objptr
07950                 | ' 
07950                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
07950                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
07950     04 00 00 FF 
07954     34 E4 85 F1 | 	sub	objptr, ##2100
07958     F2 14 02 FB | 	rdlong	arg02, objptr
0795c     43 00 00 FF 
07960     7C E4 85 F1 | 	sub	objptr, ##34428
07964     00 04 00 FF 
07968     00 14 0E F2 | 	cmp	arg02, ##524288 wz
0796c     47 00 00 AF 
07970     AC E4 05 A1 |  if_e	add	objptr, ##36524
07974     FF FF FF AF 
07978     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
0797c     47 00 00 AF 
07980     AC E4 85 A1 |  if_e	sub	objptr, ##36524
07984     30 FC BF FD | 	call	#_save_line
07988     43 00 00 FF 
0798c     7C E4 05 F1 | 	add	objptr, ##34428
07990     F2 12 02 FB | 	rdlong	arg01, objptr
07994     43 00 00 FF 
07998     7C E4 85 F1 | 	sub	objptr, ##34428
0799c     01 14 66 F6 | 	neg	arg02, #1
079a0     B8 CE B1 FD | 	call	#_pslpoke
079a4                 | _add_line_at_end_ret
079a4     2D 00 64 FD | 	ret
079a8                 | 
079a8                 | ' 
079a8                 | ' '--------------------------------------------------------------------------------------------------------------------------
079a8                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
079a8                 | ' '--------------------------------------------------------------------------------------------------------------------------
079a8                 | ' 
079a8                 | ' '--------------------------------------------------------------------------------------------------------------------------
079a8                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
079a8                 | ' '--------------------------------------------------------------------------------------------------------------------------
079a8                 | ' 
079a8                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
079a8                 | ' 
079a8                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
079a8                 | _compile_immediate
079a8     0A 4A 05 F6 | 	mov	COUNT_, #10
079ac     A8 00 A0 FD | 	call	#pushregs_
079b0                 | _compile_immediate_enter
079b0     09 2D 02 F6 | 	mov	local04, arg01
079b4     0A 2F 02 F6 | 	mov	local05, arg02
079b8     00 30 06 F6 | 	mov	local06, #0
079bc     00 32 06 F6 | 	mov	local07, #0
079c0     00 34 06 F6 | 	mov	local08, #0
079c4                 | ' 
079c4                 | ' ' linetype=cont+1
079c4                 | ' ' 1 : this is the first part of the line that will continue
079c4                 | ' ' 2 - this is the continuation of the line
079c4                 | ' ' 3 - this is the last continued line
079c4                 | ' ' 4 - this is the one and only part
079c4                 | ' ' 5 - continued after if/else
079c4                 | ' 
079c4                 | ' err=0
079c4                 | ' cmd=0
079c4                 | ' vars=0
079c4                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
079c4     02 2C 0E F2 | 	cmp	local04, #2 wz
079c8     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
079cc     24 00 90 5D |  if_ne	jmp	#LR__0640
079d0     35 00 00 FF 
079d4     30 E4 05 F1 | 	add	objptr, ##27184
079d8     F2 32 02 FB | 	rdlong	local07, objptr
079dc     01 36 06 F6 | 	mov	local09, #1
079e0     02 00 00 FF 
079e4     34 E4 05 F1 | 	add	objptr, ##1076
079e8     F2 02 68 FC | 	wrlong	#1, objptr
079ec     37 00 00 FF 
079f0     64 E4 85 F1 | 	sub	objptr, ##28260
079f4                 | LR__0640
079f4                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
079f4     04 2C 0E F2 | 	cmp	local04, #4 wz
079f8     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
079fc     30 00 90 5D |  if_ne	jmp	#LR__0641
07a00     35 00 00 FF 
07a04     38 E4 05 F1 | 	add	objptr, ##27192
07a08     F2 32 02 FB | 	rdlong	local07, objptr
07a0c     02 36 06 F6 | 	mov	local09, #2
07a10     02 00 00 FF 
07a14     2C E4 05 F1 | 	add	objptr, ##1068
07a18     F2 04 68 FC | 	wrlong	#2, objptr
07a1c     13 00 00 FF 
07a20     38 E4 05 F1 | 	add	objptr, ##9784
07a24     F2 04 68 FC | 	wrlong	#2, objptr
07a28     4A 00 00 FF 
07a2c     9C E4 85 F1 | 	sub	objptr, ##38044
07a30                 | LR__0641
07a30                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
07a30     05 2C 0E F2 | 	cmp	local04, #5 wz
07a34     40 00 90 5D |  if_ne	jmp	#LR__0642
07a38     37 00 00 FF 
07a3c     64 E4 05 F1 | 	add	objptr, ##28260
07a40     F2 FC 01 FB | 	rdlong	result2, objptr
07a44     FE 36 02 F6 | 	mov	local09, result2
07a48     03 36 66 F0 | 	shl	local09, #3
07a4c     02 00 00 FF 
07a50     38 E4 85 F1 | 	sub	objptr, ##1080
07a54     F2 36 02 F1 | 	add	local09, objptr
07a58     04 36 06 F1 | 	add	local09, #4
07a5c     1B 33 02 FB | 	rdlong	local07, local09
07a60     01 FC 05 F1 | 	add	result2, #1
07a64     02 00 00 FF 
07a68     38 E4 05 F1 | 	add	objptr, ##1080
07a6c     F2 FC 61 FC | 	wrlong	result2, objptr
07a70     37 00 00 FF 
07a74     64 E4 85 F1 | 	sub	objptr, ##28260
07a78                 | LR__0642
07a78                 | ' 
07a78                 | ' 'print  "In compile_immediate cmd=:", cmd
07a78                 | ' 451 select case cmd
07a78     5C 32 0E F2 | 	cmp	local07, #92 wz
07a7c     E0 02 90 AD |  if_e	jmp	#LR__0643
07a80     B9 32 0E F2 | 	cmp	local07, #185 wz
07a84     E4 02 90 AD |  if_e	jmp	#LR__0644
07a88     47 32 0E F2 | 	cmp	local07, #71 wz
07a8c     EC 02 90 AD |  if_e	jmp	#LR__0645
07a90     59 32 0E F2 | 	cmp	local07, #89 wz
07a94     F4 02 90 AD |  if_e	jmp	#LR__0646
07a98     C3 32 0E F2 | 	cmp	local07, #195 wz
07a9c     FC 02 90 AD |  if_e	jmp	#LR__0647
07aa0     45 32 0E F2 | 	cmp	local07, #69 wz
07aa4     00 03 90 AD |  if_e	jmp	#LR__0648
07aa8     69 32 0E F2 | 	cmp	local07, #105 wz
07aac     08 03 90 AD |  if_e	jmp	#LR__0649
07ab0     40 32 0E F2 | 	cmp	local07, #64 wz
07ab4     04 07 90 AD |  if_e	jmp	#LR__0725
07ab8     B4 32 0E F2 | 	cmp	local07, #180 wz
07abc     04 03 90 AD |  if_e	jmp	#LR__0650
07ac0     49 32 0E F2 | 	cmp	local07, #73 wz
07ac4     08 03 90 AD |  if_e	jmp	#LR__0651
07ac8     C4 32 0E F2 | 	cmp	local07, #196 wz
07acc     0C 03 90 AD |  if_e	jmp	#LR__0652
07ad0     AE 32 0E F2 | 	cmp	local07, #174 wz
07ad4     10 03 90 AD |  if_e	jmp	#LR__0653
07ad8     B0 32 0E F2 | 	cmp	local07, #176 wz
07adc     14 03 90 AD |  if_e	jmp	#LR__0654
07ae0     AF 32 0E F2 | 	cmp	local07, #175 wz
07ae4     18 03 90 AD |  if_e	jmp	#LR__0655
07ae8     B1 32 0E F2 | 	cmp	local07, #177 wz
07aec     1C 03 90 AD |  if_e	jmp	#LR__0656
07af0     CF 32 0E F2 | 	cmp	local07, #207 wz
07af4     20 03 90 AD |  if_e	jmp	#LR__0657
07af8     68 32 0E F2 | 	cmp	local07, #104 wz
07afc     24 03 90 AD |  if_e	jmp	#LR__0658
07b00     B7 32 0E F2 | 	cmp	local07, #183 wz
07b04     B4 06 90 AD |  if_e	jmp	#LR__0725
07b08     D9 32 0E F2 | 	cmp	local07, #217 wz
07b0c     20 03 90 AD |  if_e	jmp	#LR__0659
07b10     74 32 0E F2 | 	cmp	local07, #116 wz
07b14     24 03 90 AD |  if_e	jmp	#LR__0660
07b18     73 32 0E F2 | 	cmp	local07, #115 wz
07b1c     2C 03 90 AD |  if_e	jmp	#LR__0661
07b20     6C 32 0E F2 | 	cmp	local07, #108 wz
07b24     34 03 90 AD |  if_e	jmp	#LR__0662
07b28     89 32 0E F2 | 	cmp	local07, #137 wz
07b2c     8C 06 90 AD |  if_e	jmp	#LR__0725
07b30     C2 32 0E F2 | 	cmp	local07, #194 wz
07b34     34 03 90 AD |  if_e	jmp	#LR__0663
07b38     72 32 0E F2 | 	cmp	local07, #114 wz
07b3c     38 03 90 AD |  if_e	jmp	#LR__0664
07b40     5D 32 0E F2 | 	cmp	local07, #93 wz
07b44     3C 03 90 AD |  if_e	jmp	#LR__0665
07b48     96 32 0E F2 | 	cmp	local07, #150 wz
07b4c     44 03 90 AD |  if_e	jmp	#LR__0666
07b50     43 32 0E F2 | 	cmp	local07, #67 wz
07b54     48 03 90 AD |  if_e	jmp	#LR__0667
07b58     5A 32 0E F2 | 	cmp	local07, #90 wz
07b5c     50 03 90 AD |  if_e	jmp	#LR__0668
07b60     AB 32 0E F2 | 	cmp	local07, #171 wz
07b64     54 06 90 AD |  if_e	jmp	#LR__0725
07b68     BD 32 0E F2 | 	cmp	local07, #189 wz
07b6c     50 03 90 AD |  if_e	jmp	#LR__0669
07b70     BB 32 0E F2 | 	cmp	local07, #187 wz
07b74     58 03 90 AD |  if_e	jmp	#LR__0670
07b78     4E 32 0E F2 | 	cmp	local07, #78 wz
07b7c     60 03 90 AD |  if_e	jmp	#LR__0671
07b80     A9 32 0E F2 | 	cmp	local07, #169 wz
07b84     78 03 90 AD |  if_e	jmp	#LR__0673
07b88     46 32 0E F2 | 	cmp	local07, #70 wz
07b8c     90 03 90 AD |  if_e	jmp	#LR__0675
07b90     71 32 0E F2 | 	cmp	local07, #113 wz
07b94     98 03 90 AD |  if_e	jmp	#LR__0676
07b98     60 32 0E F2 | 	cmp	local07, #96 wz
07b9c     9C 03 90 AD |  if_e	jmp	#LR__0677
07ba0     4A 32 0E F2 | 	cmp	local07, #74 wz
07ba4     A0 03 90 AD |  if_e	jmp	#LR__0678
07ba8     48 32 0E F2 | 	cmp	local07, #72 wz
07bac     A4 03 90 AD |  if_e	jmp	#LR__0679
07bb0     58 32 0E F2 | 	cmp	local07, #88 wz
07bb4     AC 03 90 AD |  if_e	jmp	#LR__0680
07bb8     5F 32 0E F2 | 	cmp	local07, #95 wz
07bbc     B4 03 90 AD |  if_e	jmp	#LR__0681
07bc0     B5 32 0E F2 | 	cmp	local07, #181 wz
07bc4     B8 03 90 AD |  if_e	jmp	#LR__0682
07bc8     8A 32 0E F2 | 	cmp	local07, #138 wz
07bcc     C0 03 90 AD |  if_e	jmp	#LR__0683
07bd0     4C 32 0E F2 | 	cmp	local07, #76 wz
07bd4     C4 03 90 AD |  if_e	jmp	#LR__0684
07bd8     52 32 0E F2 | 	cmp	local07, #82 wz
07bdc     CC 03 90 AD |  if_e	jmp	#LR__0685
07be0     97 32 0E F2 | 	cmp	local07, #151 wz
07be4     D4 03 90 AD |  if_e	jmp	#LR__0686
07be8     C6 32 0E F2 | 	cmp	local07, #198 wz
07bec     D8 03 90 AD |  if_e	jmp	#LR__0687
07bf0     61 32 0E F2 | 	cmp	local07, #97 wz
07bf4     DC 03 90 AD |  if_e	jmp	#LR__0688
07bf8     63 32 0E F2 | 	cmp	local07, #99 wz
07bfc     E0 03 90 AD |  if_e	jmp	#LR__0689
07c00     41 32 0E F2 | 	cmp	local07, #65 wz
07c04     B4 05 90 AD |  if_e	jmp	#LR__0725
07c08     4B 32 0E F2 | 	cmp	local07, #75 wz
07c0c     DC 03 90 AD |  if_e	jmp	#LR__0690
07c10     C1 32 0E F2 | 	cmp	local07, #193 wz
07c14     E0 03 90 AD |  if_e	jmp	#LR__0691
07c18     B3 32 0E F2 | 	cmp	local07, #179 wz
07c1c     E4 03 90 AD |  if_e	jmp	#LR__0692
07c20     5E 32 0E F2 | 	cmp	local07, #94 wz
07c24     E8 03 90 AD |  if_e	jmp	#LR__0693
07c28     7C 32 0E F2 | 	cmp	local07, #124 wz
07c2c     EC 03 90 AD |  if_e	jmp	#LR__0694
07c30     7D 32 0E F2 | 	cmp	local07, #125 wz
07c34     F0 03 90 AD |  if_e	jmp	#LR__0695
07c38     7E 32 0E F2 | 	cmp	local07, #126 wz
07c3c     F4 03 90 AD |  if_e	jmp	#LR__0696
07c40     7F 32 0E F2 | 	cmp	local07, #127 wz
07c44     F8 03 90 AD |  if_e	jmp	#LR__0697
07c48     80 32 0E F2 | 	cmp	local07, #128 wz
07c4c     FC 03 90 AD |  if_e	jmp	#LR__0698
07c50     55 32 0E F2 | 	cmp	local07, #85 wz
07c54     00 04 90 AD |  if_e	jmp	#LR__0699
07c58     75 32 0E F2 | 	cmp	local07, #117 wz
07c5c     04 04 90 AD |  if_e	jmp	#LR__0700
07c60     42 32 0E F2 | 	cmp	local07, #66 wz
07c64     0C 04 90 AD |  if_e	jmp	#LR__0701
07c68     95 32 0E F2 | 	cmp	local07, #149 wz
07c6c     14 04 90 AD |  if_e	jmp	#LR__0702
07c70     AC 32 0E F2 | 	cmp	local07, #172 wz
07c74     44 05 90 AD |  if_e	jmp	#LR__0725
07c78     81 32 0E F2 | 	cmp	local07, #129 wz
07c7c     10 04 90 AD |  if_e	jmp	#LR__0703
07c80     44 32 0E F2 | 	cmp	local07, #68 wz
07c84     14 04 90 AD |  if_e	jmp	#LR__0704
07c88     BC 32 0E F2 | 	cmp	local07, #188 wz
07c8c     18 04 90 AD |  if_e	jmp	#LR__0705
07c90     88 32 0E F2 | 	cmp	local07, #136 wz
07c94     24 05 90 AD |  if_e	jmp	#LR__0725
07c98     B6 32 0E F2 | 	cmp	local07, #182 wz
07c9c     18 04 90 AD |  if_e	jmp	#LR__0706
07ca0     92 32 0E F2 | 	cmp	local07, #146 wz
07ca4     20 04 90 AD |  if_e	jmp	#LR__0707
07ca8     BE 32 0E F2 | 	cmp	local07, #190 wz
07cac     C8 05 90 AD |  if_e	jmp	#LR__0726
07cb0     C7 32 0E F2 | 	cmp	local07, #199 wz
07cb4     D4 32 0E 52 |  if_ne	cmp	local07, #212 wz
07cb8     AA 32 0E 52 |  if_ne	cmp	local07, #170 wz
07cbc     FC 04 90 AD |  if_e	jmp	#LR__0725
07cc0     4D 32 0E F2 | 	cmp	local07, #77 wz
07cc4     0C 04 90 AD |  if_e	jmp	#LR__0708
07cc8     51 32 0E F2 | 	cmp	local07, #81 wz
07ccc     14 04 90 AD |  if_e	jmp	#LR__0709
07cd0     D2 32 0E F2 | 	cmp	local07, #210 wz
07cd4     1C 04 90 AD |  if_e	jmp	#LR__0710
07cd8     8E 32 0E F2 | 	cmp	local07, #142 wz
07cdc     24 04 90 AD |  if_e	jmp	#LR__0711
07ce0     90 32 0E F2 | 	cmp	local07, #144 wz
07ce4     28 04 90 AD |  if_e	jmp	#LR__0712
07ce8     8D 32 0E F2 | 	cmp	local07, #141 wz
07cec     2C 04 90 AD |  if_e	jmp	#LR__0713
07cf0     8C 32 0E F2 | 	cmp	local07, #140 wz
07cf4     30 04 90 AD |  if_e	jmp	#LR__0714
07cf8     91 32 0E F2 | 	cmp	local07, #145 wz
07cfc     34 04 90 AD |  if_e	jmp	#LR__0715
07d00     8B 32 0E F2 | 	cmp	local07, #139 wz
07d04     38 04 90 AD |  if_e	jmp	#LR__0716
07d08     8F 32 0E F2 | 	cmp	local07, #143 wz
07d0c     3C 04 90 AD |  if_e	jmp	#LR__0717
07d10     B2 32 0E F2 | 	cmp	local07, #178 wz
07d14     40 04 90 AD |  if_e	jmp	#LR__0718
07d18     6D 32 0E F2 | 	cmp	local07, #109 wz
07d1c     48 04 90 AD |  if_e	jmp	#LR__0719
07d20     70 32 0E F2 | 	cmp	local07, #112 wz
07d24     94 04 90 AD |  if_e	jmp	#LR__0725
07d28     56 32 0E F2 | 	cmp	local07, #86 wz
07d2c     44 04 90 AD |  if_e	jmp	#LR__0720
07d30     57 32 0E F2 | 	cmp	local07, #87 wz
07d34     84 04 90 AD |  if_e	jmp	#LR__0725
07d38     79 32 0E F2 | 	cmp	local07, #121 wz
07d3c     40 04 90 AD |  if_e	jmp	#LR__0721
07d40     77 32 0E F2 | 	cmp	local07, #119 wz
07d44     44 04 90 AD |  if_e	jmp	#LR__0722
07d48     78 32 0E F2 | 	cmp	local07, #120 wz
07d4c     48 04 90 AD |  if_e	jmp	#LR__0723
07d50     01 00 00 FF 
07d54     04 32 0E F2 | 	cmp	local07, ##516 wz
07d58     48 04 90 AD |  if_e	jmp	#LR__0724
07d5c     18 05 90 FD | 	jmp	#LR__0726
07d60                 | LR__0643
07d60     64 0B B0 FD | 	call	#_compile_fun_2p
07d64     FD 30 02 F6 | 	mov	local06, result1
07d68     50 04 90 FD | 	jmp	#LR__0725
07d6c                 | LR__0644
07d6c     28 0E B0 FD | 	call	#_compile_fun_varp
07d70     FD 34 02 F6 | 	mov	local08, result1
07d74     FE 30 02 F6 | 	mov	local06, result2
07d78     40 04 90 FD | 	jmp	#LR__0725
07d7c                 | LR__0645
07d7c     18 0E B0 FD | 	call	#_compile_fun_varp
07d80     FD 34 02 F6 | 	mov	local08, result1
07d84     FE 30 02 F6 | 	mov	local06, result2
07d88     30 04 90 FD | 	jmp	#LR__0725
07d8c                 | LR__0646
07d8c     08 0E B0 FD | 	call	#_compile_fun_varp
07d90     FD 34 02 F6 | 	mov	local08, result1
07d94     FE 30 02 F6 | 	mov	local06, result2
07d98     20 04 90 FD | 	jmp	#LR__0725
07d9c                 | LR__0647
07d9c                 | ' return expr()
07d9c     64 42 B0 FD | 	call	#_expr
07da0     FD 30 02 F6 | 	mov	local06, result1
07da4     14 04 90 FD | 	jmp	#LR__0725
07da8                 | LR__0648
07da8     EC 0D B0 FD | 	call	#_compile_fun_varp
07dac     FD 34 02 F6 | 	mov	local08, result1
07db0     FE 30 02 F6 | 	mov	local06, result2
07db4     04 04 90 FD | 	jmp	#LR__0725
07db8                 | LR__0649
07db8                 | ' return expr()
07db8     48 42 B0 FD | 	call	#_expr
07dbc     FD 30 02 F6 | 	mov	local06, result1
07dc0     F8 03 90 FD | 	jmp	#LR__0725
07dc4                 | LR__0650
07dc4                 | ' return expr()
07dc4     3C 42 B0 FD | 	call	#_expr
07dc8     FD 30 02 F6 | 	mov	local06, result1
07dcc     EC 03 90 FD | 	jmp	#LR__0725
07dd0                 | LR__0651
07dd0                 | ' return expr()
07dd0     30 42 B0 FD | 	call	#_expr
07dd4     FD 30 02 F6 | 	mov	local06, result1
07dd8     E0 03 90 FD | 	jmp	#LR__0725
07ddc                 | LR__0652
07ddc     E8 0A B0 FD | 	call	#_compile_fun_2p
07de0     FD 30 02 F6 | 	mov	local06, result1
07de4     D4 03 90 FD | 	jmp	#LR__0725
07de8                 | LR__0653
07de8     DC 0A B0 FD | 	call	#_compile_fun_2p
07dec     FD 30 02 F6 | 	mov	local06, result1
07df0     C8 03 90 FD | 	jmp	#LR__0725
07df4                 | LR__0654
07df4     D0 0A B0 FD | 	call	#_compile_fun_2p
07df8     FD 30 02 F6 | 	mov	local06, result1
07dfc     BC 03 90 FD | 	jmp	#LR__0725
07e00                 | LR__0655
07e00     C4 0A B0 FD | 	call	#_compile_fun_2p
07e04     FD 30 02 F6 | 	mov	local06, result1
07e08     B0 03 90 FD | 	jmp	#LR__0725
07e0c                 | LR__0656
07e0c     B8 0A B0 FD | 	call	#_compile_fun_2p
07e10     FD 30 02 F6 | 	mov	local06, result1
07e14     A4 03 90 FD | 	jmp	#LR__0725
07e18                 | LR__0657
07e18                 | ' return expr()
07e18     E8 41 B0 FD | 	call	#_expr
07e1c     FD 30 02 F6 | 	mov	local06, result1
07e20     98 03 90 FD | 	jmp	#LR__0725
07e24                 | LR__0658
07e24                 | ' return expr()
07e24     DC 41 B0 FD | 	call	#_expr
07e28     FD 30 02 F6 | 	mov	local06, result1
07e2c     8C 03 90 FD | 	jmp	#LR__0725
07e30                 | LR__0659
07e30     94 0A B0 FD | 	call	#_compile_fun_2p
07e34     FD 30 02 F6 | 	mov	local06, result1
07e38     80 03 90 FD | 	jmp	#LR__0725
07e3c                 | LR__0660
07e3c     58 0D B0 FD | 	call	#_compile_fun_varp
07e40     FD 34 02 F6 | 	mov	local08, result1
07e44     FE 30 02 F6 | 	mov	local06, result2
07e48     70 03 90 FD | 	jmp	#LR__0725
07e4c                 | LR__0661
07e4c     48 0D B0 FD | 	call	#_compile_fun_varp
07e50     FD 34 02 F6 | 	mov	local08, result1
07e54     FE 30 02 F6 | 	mov	local06, result2
07e58     60 03 90 FD | 	jmp	#LR__0725
07e5c                 | LR__0662
07e5c     38 0D B0 FD | 	call	#_compile_fun_varp
07e60     FD 34 02 F6 | 	mov	local08, result1
07e64     FE 30 02 F6 | 	mov	local06, result2
07e68     50 03 90 FD | 	jmp	#LR__0725
07e6c                 | LR__0663
07e6c                 | ' return expr()
07e6c     94 41 B0 FD | 	call	#_expr
07e70     FD 30 02 F6 | 	mov	local06, result1
07e74     44 03 90 FD | 	jmp	#LR__0725
07e78                 | LR__0664
07e78     40 22 B0 FD | 	call	#_compile_dim
07e7c     FD 30 02 F6 | 	mov	local06, result1
07e80     F4 03 90 FD | 	jmp	#LR__0726
07e84                 | LR__0665
07e84     10 0D B0 FD | 	call	#_compile_fun_varp
07e88     FD 34 02 F6 | 	mov	local08, result1
07e8c     FE 30 02 F6 | 	mov	local06, result2
07e90     28 03 90 FD | 	jmp	#LR__0725
07e94                 | LR__0666
07e94     30 0A B0 FD | 	call	#_compile_fun_2p
07e98     FD 30 02 F6 | 	mov	local06, result1
07e9c     1C 03 90 FD | 	jmp	#LR__0725
07ea0                 | LR__0667
07ea0     F4 0C B0 FD | 	call	#_compile_fun_varp
07ea4     FD 34 02 F6 | 	mov	local08, result1
07ea8     FE 30 02 F6 | 	mov	local06, result2
07eac     0C 03 90 FD | 	jmp	#LR__0725
07eb0                 | LR__0668
07eb0     17 13 02 F6 | 	mov	arg01, local05
07eb4     CC 20 B0 FD | 	call	#_compile_else
07eb8     FD 30 02 F6 | 	mov	local06, result1
07ebc     B8 03 90 FD | 	jmp	#LR__0726
07ec0                 | LR__0669
07ec0     D4 0C B0 FD | 	call	#_compile_fun_varp
07ec4     FD 34 02 F6 | 	mov	local08, result1
07ec8     FE 30 02 F6 | 	mov	local06, result2
07ecc     EC 02 90 FD | 	jmp	#LR__0725
07ed0                 | LR__0670
07ed0     C4 0C B0 FD | 	call	#_compile_fun_varp
07ed4     FD 34 02 F6 | 	mov	local08, result1
07ed8     FE 30 02 F6 | 	mov	local06, result2
07edc     DC 02 90 FD | 	jmp	#LR__0725
07ee0                 | LR__0671
07ee0     01 2E 16 F2 | 	cmp	local05, #1 wc
07ee4     08 00 90 CD |  if_b	jmp	#LR__0672
07ee8     6C 33 B0 FD | 	call	#_compile_goto
07eec     88 03 90 FD | 	jmp	#LR__0726
07ef0                 | LR__0672
07ef0     19 12 06 F6 | 	mov	arg01, #25
07ef4     00 14 06 F6 | 	mov	arg02, #0
07ef8     C0 C7 B1 FD | 	call	#_printerror
07efc     78 03 90 FD | 	jmp	#LR__0726
07f00                 | LR__0673
07f00     01 2E 16 F2 | 	cmp	local05, #1 wc
07f04     08 00 90 CD |  if_b	jmp	#LR__0674
07f08     E8 32 B0 FD | 	call	#_compile_gosub
07f0c     68 03 90 FD | 	jmp	#LR__0726
07f10                 | LR__0674
07f10     19 12 06 F6 | 	mov	arg01, #25
07f14     00 14 06 F6 | 	mov	arg02, #0
07f18     A0 C7 B1 FD | 	call	#_printerror
07f1c     58 03 90 FD | 	jmp	#LR__0726
07f20                 | LR__0675
07f20     74 0C B0 FD | 	call	#_compile_fun_varp
07f24     FD 34 02 F6 | 	mov	local08, result1
07f28     FE 30 02 F6 | 	mov	local06, result2
07f2c     8C 02 90 FD | 	jmp	#LR__0725
07f30                 | LR__0676
07f30     0C 0B B0 FD | 	call	#_compile_fun_4p
07f34     FD 30 02 F6 | 	mov	local06, result1
07f38     80 02 90 FD | 	jmp	#LR__0725
07f3c                 | LR__0677
07f3c                 | ' return expr()
07f3c     C4 40 B0 FD | 	call	#_expr
07f40     FD 30 02 F6 | 	mov	local06, result1
07f44     74 02 90 FD | 	jmp	#LR__0725
07f48                 | LR__0678
07f48     44 28 B0 FD | 	call	#_compile_for
07f4c     FD 30 02 F6 | 	mov	local06, result1
07f50     24 03 90 FD | 	jmp	#LR__0726
07f54                 | LR__0679
07f54     40 0C B0 FD | 	call	#_compile_fun_varp
07f58     FD 34 02 F6 | 	mov	local08, result1
07f5c     FE 30 02 F6 | 	mov	local06, result2
07f60     58 02 90 FD | 	jmp	#LR__0725
07f64                 | LR__0680
07f64     17 13 02 F6 | 	mov	arg01, local05
07f68     90 1E B0 FD | 	call	#_compile_if
07f6c     FD 30 02 F6 | 	mov	local06, result1
07f70     04 03 90 FD | 	jmp	#LR__0726
07f74                 | LR__0681
07f74                 | ' return expr()
07f74     8C 40 B0 FD | 	call	#_expr
07f78     FD 30 02 F6 | 	mov	local06, result1
07f7c     3C 02 90 FD | 	jmp	#LR__0725
07f80                 | LR__0682
07f80     E0 0D B0 FD | 	call	#_compile_input
07f84     FD 34 02 F6 | 	mov	local08, result1
07f88     FE 30 02 F6 | 	mov	local06, result2
07f8c     2C 02 90 FD | 	jmp	#LR__0725
07f90                 | LR__0683
07f90                 | ' return expr()
07f90     70 40 B0 FD | 	call	#_expr
07f94     FD 30 02 F6 | 	mov	local06, result1
07f98     20 02 90 FD | 	jmp	#LR__0725
07f9c                 | LR__0684
07f9c     F8 0B B0 FD | 	call	#_compile_fun_varp
07fa0     FD 34 02 F6 | 	mov	local08, result1
07fa4     FE 30 02 F6 | 	mov	local06, result2
07fa8     10 02 90 FD | 	jmp	#LR__0725
07fac                 | LR__0685
07fac     E8 0B B0 FD | 	call	#_compile_fun_varp
07fb0     FD 34 02 F6 | 	mov	local08, result1
07fb4     FE 30 02 F6 | 	mov	local06, result2
07fb8     00 02 90 FD | 	jmp	#LR__0725
07fbc                 | LR__0686
07fbc     08 09 B0 FD | 	call	#_compile_fun_2p
07fc0     FD 30 02 F6 | 	mov	local06, result1
07fc4     F4 01 90 FD | 	jmp	#LR__0725
07fc8                 | LR__0687
07fc8                 | ' return expr()
07fc8     38 40 B0 FD | 	call	#_expr
07fcc     FD 30 02 F6 | 	mov	local06, result1
07fd0     E8 01 90 FD | 	jmp	#LR__0725
07fd4                 | LR__0688
07fd4                 | ' return expr()
07fd4     2C 40 B0 FD | 	call	#_expr
07fd8     FD 30 02 F6 | 	mov	local06, result1
07fdc     DC 01 90 FD | 	jmp	#LR__0725
07fe0                 | LR__0689
07fe0                 | ' return expr()
07fe0     20 40 B0 FD | 	call	#_expr
07fe4     FD 30 02 F6 | 	mov	local06, result1
07fe8     D0 01 90 FD | 	jmp	#LR__0725
07fec                 | LR__0690
07fec     6C 30 B0 FD | 	call	#_compile_next
07ff0     FD 30 02 F6 | 	mov	local06, result1
07ff4     80 02 90 FD | 	jmp	#LR__0726
07ff8                 | LR__0691
07ff8     4C 36 B0 FD | 	call	#_compile_on
07ffc     FD 30 02 F6 | 	mov	local06, result1
08000     74 02 90 FD | 	jmp	#LR__0726
08004                 | LR__0692
08004     48 09 B0 FD | 	call	#_compile_fun_3p
08008     FD 30 02 F6 | 	mov	local06, result1
0800c     AC 01 90 FD | 	jmp	#LR__0725
08010                 | LR__0693
08010                 | ' return expr()
08010     F0 3F B0 FD | 	call	#_expr
08014     FD 30 02 F6 | 	mov	local06, result1
08018     A0 01 90 FD | 	jmp	#LR__0725
0801c                 | LR__0694
0801c                 | ' return expr()
0801c     E4 3F B0 FD | 	call	#_expr
08020     FD 30 02 F6 | 	mov	local06, result1
08024     94 01 90 FD | 	jmp	#LR__0725
08028                 | LR__0695
08028                 | ' return expr()
08028     D8 3F B0 FD | 	call	#_expr
0802c     FD 30 02 F6 | 	mov	local06, result1
08030     88 01 90 FD | 	jmp	#LR__0725
08034                 | LR__0696
08034                 | ' return expr()
08034     CC 3F B0 FD | 	call	#_expr
08038     FD 30 02 F6 | 	mov	local06, result1
0803c     7C 01 90 FD | 	jmp	#LR__0725
08040                 | LR__0697
08040     FC 09 B0 FD | 	call	#_compile_fun_4p
08044     FD 30 02 F6 | 	mov	local06, result1
08048     70 01 90 FD | 	jmp	#LR__0725
0804c                 | LR__0698
0804c                 | ' return expr()
0804c     B4 3F B0 FD | 	call	#_expr
08050     FD 30 02 F6 | 	mov	local06, result1
08054     64 01 90 FD | 	jmp	#LR__0725
08058                 | LR__0699
08058     6C 08 B0 FD | 	call	#_compile_fun_2p
0805c     FD 30 02 F6 | 	mov	local06, result1
08060     58 01 90 FD | 	jmp	#LR__0725
08064                 | LR__0700
08064     30 0B B0 FD | 	call	#_compile_fun_varp
08068     FD 34 02 F6 | 	mov	local08, result1
0806c     FE 30 02 F6 | 	mov	local06, result2
08070     48 01 90 FD | 	jmp	#LR__0725
08074                 | LR__0701
08074     20 0B B0 FD | 	call	#_compile_fun_varp
08078     FD 34 02 F6 | 	mov	local08, result1
0807c     FE 30 02 F6 | 	mov	local06, result2
08080     38 01 90 FD | 	jmp	#LR__0725
08084                 | LR__0702
08084     40 08 B0 FD | 	call	#_compile_fun_2p
08088     FD 30 02 F6 | 	mov	local06, result1
0808c     2C 01 90 FD | 	jmp	#LR__0725
08090                 | LR__0703
08090     34 08 B0 FD | 	call	#_compile_fun_2p
08094     FD 30 02 F6 | 	mov	local06, result1
08098     20 01 90 FD | 	jmp	#LR__0725
0809c                 | LR__0704
0809c     84 16 B0 FD | 	call	#_compile_print
080a0     FD 30 02 F6 | 	mov	local06, result1
080a4     D0 01 90 FD | 	jmp	#LR__0726
080a8                 | LR__0705
080a8     EC 0A B0 FD | 	call	#_compile_fun_varp
080ac     FD 34 02 F6 | 	mov	local08, result1
080b0     FE 30 02 F6 | 	mov	local06, result2
080b4     04 01 90 FD | 	jmp	#LR__0725
080b8                 | LR__0706
080b8     B8 0B B0 FD | 	call	#_compile_read
080bc     FD 34 02 F6 | 	mov	local08, result1
080c0     FE 30 02 F6 | 	mov	local06, result2
080c4     F4 00 90 FD | 	jmp	#LR__0725
080c8                 | LR__0707
080c8                 | ' return expr()
080c8     38 3F B0 FD | 	call	#_expr
080cc     FD 30 02 F6 | 	mov	local06, result1
080d0     E8 00 90 FD | 	jmp	#LR__0725
080d4                 | LR__0708
080d4     C0 0A B0 FD | 	call	#_compile_fun_varp
080d8     FD 34 02 F6 | 	mov	local08, result1
080dc     FE 30 02 F6 | 	mov	local06, result2
080e0     D8 00 90 FD | 	jmp	#LR__0725
080e4                 | LR__0709
080e4     B0 0A B0 FD | 	call	#_compile_fun_varp
080e8     FD 34 02 F6 | 	mov	local08, result1
080ec     FE 30 02 F6 | 	mov	local06, result2
080f0     C8 00 90 FD | 	jmp	#LR__0725
080f4                 | LR__0710
080f4     A0 0A B0 FD | 	call	#_compile_fun_varp
080f8     FD 34 02 F6 | 	mov	local08, result1
080fc     FE 30 02 F6 | 	mov	local06, result2
08100     B8 00 90 FD | 	jmp	#LR__0725
08104                 | LR__0711
08104     C0 07 B0 FD | 	call	#_compile_fun_2p
08108     FD 30 02 F6 | 	mov	local06, result1
0810c     AC 00 90 FD | 	jmp	#LR__0725
08110                 | LR__0712
08110     B4 07 B0 FD | 	call	#_compile_fun_2p
08114     FD 30 02 F6 | 	mov	local06, result1
08118     A0 00 90 FD | 	jmp	#LR__0725
0811c                 | LR__0713
0811c     A8 07 B0 FD | 	call	#_compile_fun_2p
08120     FD 30 02 F6 | 	mov	local06, result1
08124     94 00 90 FD | 	jmp	#LR__0725
08128                 | LR__0714
08128     9C 07 B0 FD | 	call	#_compile_fun_2p
0812c     FD 30 02 F6 | 	mov	local06, result1
08130     88 00 90 FD | 	jmp	#LR__0725
08134                 | LR__0715
08134     90 07 B0 FD | 	call	#_compile_fun_2p
08138     FD 30 02 F6 | 	mov	local06, result1
0813c     7C 00 90 FD | 	jmp	#LR__0725
08140                 | LR__0716
08140     84 07 B0 FD | 	call	#_compile_fun_2p
08144     FD 30 02 F6 | 	mov	local06, result1
08148     70 00 90 FD | 	jmp	#LR__0725
0814c                 | LR__0717
0814c     78 07 B0 FD | 	call	#_compile_fun_2p
08150     FD 30 02 F6 | 	mov	local06, result1
08154     64 00 90 FD | 	jmp	#LR__0725
08158                 | LR__0718
08158     3C 0A B0 FD | 	call	#_compile_fun_varp
0815c     FD 34 02 F6 | 	mov	local08, result1
08160     FE 30 02 F6 | 	mov	local06, result2
08164     54 00 90 FD | 	jmp	#LR__0725
08168                 | LR__0719
08168     E4 07 B0 FD | 	call	#_compile_fun_3p
0816c     FD 30 02 F6 | 	mov	local06, result1
08170     48 00 90 FD | 	jmp	#LR__0725
08174                 | LR__0720
08174                 | ' return expr()
08174     8C 3E B0 FD | 	call	#_expr
08178     FD 30 02 F6 | 	mov	local06, result1
0817c     3C 00 90 FD | 	jmp	#LR__0725
08180                 | LR__0721
08180     44 07 B0 FD | 	call	#_compile_fun_2p
08184     FD 30 02 F6 | 	mov	local06, result1
08188     30 00 90 FD | 	jmp	#LR__0725
0818c                 | LR__0722
0818c     38 07 B0 FD | 	call	#_compile_fun_2p
08190     FD 30 02 F6 | 	mov	local06, result1
08194     24 00 90 FD | 	jmp	#LR__0725
08198                 | LR__0723
08198     2C 07 B0 FD | 	call	#_compile_fun_2p
0819c     FD 30 02 F6 | 	mov	local06, result1
081a0     18 00 90 FD | 	jmp	#LR__0725
081a4                 | LR__0724
081a4     1C 13 B0 FD | 	call	#_compile_array_assign
081a8     FD 30 02 F6 | 	mov	local06, result1
081ac     0E 30 0E F2 | 	cmp	local06, #14 wz
081b0     C4 00 90 5D |  if_ne	jmp	#LR__0726
081b4                 | ' return 23
081b4     17 30 06 F6 | 	mov	local06, #23
081b8     BC 00 90 FD | 	jmp	#LR__0726
081bc                 | ' return 23
081bc                 | LR__0725
081bc     19 2B 02 F6 | 	mov	local03, local07
081c0     1A 27 02 F6 | 	mov	local01, local08
081c4     13 37 02 F6 | 	mov	local09, local01
081c8     14 39 02 F6 | 	mov	local10, local02
081cc     15 33 02 F6 | 	mov	local07, local03
081d0     4A 00 00 FF 
081d4     9C E4 05 F1 | 	add	objptr, ##38044
081d8     F2 26 02 FB | 	rdlong	local01, objptr
081dc     13 35 02 F6 | 	mov	local08, local01
081e0     01 34 66 F0 | 	shl	local08, #1
081e4     13 35 02 F1 | 	add	local08, local01
081e8     02 34 66 F0 | 	shl	local08, #2
081ec     03 00 00 FF 
081f0     00 E4 85 F1 | 	sub	objptr, ##1536
081f4     F2 34 02 F1 | 	add	local08, objptr
081f8     1A 37 62 FC | 	wrlong	local09, local08
081fc     03 00 00 FF 
08200     00 E4 05 F1 | 	add	objptr, ##1536
08204     F2 26 02 FB | 	rdlong	local01, objptr
08208     13 37 02 F6 | 	mov	local09, local01
0820c     01 36 66 F0 | 	shl	local09, #1
08210     13 37 02 F1 | 	add	local09, local01
08214     02 36 66 F0 | 	shl	local09, #2
08218     03 00 00 FF 
0821c     00 E4 85 F1 | 	sub	objptr, ##1536
08220     F2 36 02 F1 | 	add	local09, objptr
08224     04 36 06 F1 | 	add	local09, #4
08228     1B 39 62 FC | 	wrlong	local10, local09
0822c     03 00 00 FF 
08230     00 E4 05 F1 | 	add	objptr, ##1536
08234     F2 26 02 FB | 	rdlong	local01, objptr
08238     13 39 02 F6 | 	mov	local10, local01
0823c     01 38 66 F0 | 	shl	local10, #1
08240     13 39 02 F1 | 	add	local10, local01
08244     02 38 66 F0 | 	shl	local10, #2
08248     03 00 00 FF 
0824c     00 E4 85 F1 | 	sub	objptr, ##1536
08250     F2 38 02 F1 | 	add	local10, objptr
08254     08 38 06 F1 | 	add	local10, #8
08258     1C 33 62 FC | 	wrlong	local07, local10
0825c     03 00 00 FF 
08260     00 E4 05 F1 | 	add	objptr, ##1536
08264     F2 36 02 FB | 	rdlong	local09, objptr
08268     01 36 06 F1 | 	add	local09, #1
0826c     F2 36 62 FC | 	wrlong	local09, objptr
08270     4A 00 00 FF 
08274     9C E4 85 F1 | 	sub	objptr, ##38044
08278                 | LR__0726
08278                 | ' 
08278                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
08278                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
08278     03 2C 0E F2 | 	cmp	local04, #3 wz
0827c     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
08280     38 00 90 5D |  if_ne	jmp	#LR__0727
08284     4A 00 00 FF 
08288     9C E4 05 F1 | 	add	objptr, ##38044
0828c     F2 38 02 FB | 	rdlong	local10, objptr
08290     1C 27 02 F6 | 	mov	local01, local10
08294     01 26 66 F0 | 	shl	local01, #1
08298     1C 27 02 F1 | 	add	local01, local10
0829c     02 26 66 F0 | 	shl	local01, #2
082a0     03 00 00 FF 
082a4     00 E4 85 F1 | 	sub	objptr, ##1536
082a8     F2 26 02 F1 | 	add	local01, objptr
082ac     08 26 06 F1 | 	add	local01, #8
082b0     13 FD 6B FC | 	wrlong	#510, local01
082b4     47 00 00 FF 
082b8     9C E4 85 F1 | 	sub	objptr, ##36508
082bc                 | LR__0727
082bc                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
082bc                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
082bc     4A 00 00 FF 
082c0     9C E4 05 F1 | 	add	objptr, ##38044
082c4     F2 26 02 FB | 	rdlong	local01, objptr
082c8     4A 00 00 FF 
082cc     9C E4 85 F1 | 	sub	objptr, ##38044
082d0     97 58 48 FB | 	callpa	#(@LR__0730-@LR__0728)>>2,fcache_load_ptr_
082d4                 | LR__0728
082d4     13 39 02 F6 | 	mov	local10, local01
082d8     01 38 66 F0 | 	shl	local10, #1
082dc     13 39 02 F1 | 	add	local10, local01
082e0     02 38 66 F0 | 	shl	local10, #2
082e4     47 00 00 FF 
082e8     9C E4 05 F1 | 	add	objptr, ##36508
082ec     F2 38 02 F1 | 	add	local10, objptr
082f0     08 38 06 F1 | 	add	local10, #8
082f4     1C 39 02 FB | 	rdlong	local10, local10
082f8     9B 38 0E F2 | 	cmp	local10, #155 wz
082fc     47 00 00 FF 
08300     9C E4 85 F1 | 	sub	objptr, ##36508
08304     70 00 90 5D |  if_ne	jmp	#LR__0729
08308     13 37 02 F6 | 	mov	local09, local01
0830c     01 36 86 F1 | 	sub	local09, #1
08310     1B 39 02 F6 | 	mov	local10, local09
08314     01 38 66 F0 | 	shl	local10, #1
08318     1B 39 02 F1 | 	add	local10, local09
0831c     02 38 66 F0 | 	shl	local10, #2
08320     47 00 00 FF 
08324     9C E4 05 F1 | 	add	objptr, ##36508
08328     F2 38 02 F1 | 	add	local10, objptr
0832c     08 38 06 F1 | 	add	local10, #8
08330     1C 39 02 FB | 	rdlong	local10, local10
08334     11 38 0E F2 | 	cmp	local10, #17 wz
08338     47 00 00 FF 
0833c     9C E4 85 F1 | 	sub	objptr, ##36508
08340     34 00 90 5D |  if_ne	jmp	#LR__0729
08344     13 37 02 F6 | 	mov	local09, local01
08348     01 36 86 F1 | 	sub	local09, #1
0834c     1B 39 02 F6 | 	mov	local10, local09
08350     01 38 66 F0 | 	shl	local10, #1
08354     1B 39 02 F1 | 	add	local10, local09
08358     02 38 66 F0 | 	shl	local10, #2
0835c     47 00 00 FF 
08360     9C E4 05 F1 | 	add	objptr, ##36508
08364     F2 38 02 F1 | 	add	local10, objptr
08368     08 38 06 F1 | 	add	local10, #8
0836c     1C 25 68 FC | 	wrlong	#18, local10
08370     47 00 00 FF 
08374     9C E4 85 F1 | 	sub	objptr, ##36508
08378                 | LR__0729
08378     01 26 86 F1 | 	sub	local01, #1
0837c     01 26 56 F2 | 	cmps	local01, #1 wc
08380     50 FF 9F 3D |  if_ae	jmp	#LR__0728
08384                 | LR__0730
08384                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
08384                 | ' return err
08384     18 FB 01 F6 | 	mov	result1, local06
08388     A7 F0 03 F6 | 	mov	ptra, fp
0838c     B2 00 A0 FD | 	call	#popregs_
08390                 | _compile_immediate_ret
08390     2D 00 64 FD | 	ret
08394                 | 
08394                 | ' 
08394                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
08394                 | ' 
08394                 | ' function compile_immediate_assign(linetype as ulong) as ulong
08394                 | _compile_immediate_assign
08394     0C 4A 05 F6 | 	mov	COUNT_, #12
08398     A8 00 A0 FD | 	call	#pushregs_
0839c     09 2D 02 F6 | 	mov	local04, arg01
083a0     FF 2A 06 F6 | 	mov	local03, #255
083a4     01 2E 66 F6 | 	neg	local05, #1
083a8     00 30 06 F6 | 	mov	local06, #0
083ac                 | ' 
083ac                 | ' t1.result_type=result_error : t1.result.uresult=0
083ac                 | ' i=-1: j=-1 : err=0
083ac                 | ' 
083ac                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
083ac     02 2C 0E F2 | 	cmp	local04, #2 wz
083b0     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
083b4     35 00 00 AF 
083b8     2C E4 05 A1 |  if_e	add	objptr, ##27180
083bc     F2 32 02 AB |  if_e	rdlong	local07, objptr
083c0     02 00 00 AF 
083c4     38 E4 05 A1 |  if_e	add	objptr, ##1080
083c8     F2 04 68 AC |  if_e	wrlong	#2, objptr
083cc     37 00 00 AF 
083d0     64 E4 85 A1 |  if_e	sub	objptr, ##28260
083d4                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
083d4     04 2C 0E F2 | 	cmp	local04, #4 wz
083d8     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
083dc     2C 00 90 5D |  if_ne	jmp	#LR__0740
083e0     35 00 00 FF 
083e4     34 E4 05 F1 | 	add	objptr, ##27188
083e8     F2 32 02 FB | 	rdlong	local07, objptr
083ec     02 00 00 FF 
083f0     30 E4 05 F1 | 	add	objptr, ##1072
083f4     F2 06 68 FC | 	wrlong	#3, objptr
083f8     13 00 00 FF 
083fc     38 E4 05 F1 | 	add	objptr, ##9784
08400     F2 04 68 FC | 	wrlong	#2, objptr
08404     4A 00 00 FF 
08408     9C E4 85 F1 | 	sub	objptr, ##38044
0840c                 | LR__0740
0840c                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
0840c     05 2C 0E F2 | 	cmp	local04, #5 wz
08410     3C 00 90 5D |  if_ne	jmp	#LR__0741
08414     37 00 00 FF 
08418     64 E4 05 F1 | 	add	objptr, ##28260
0841c     F2 FA 01 FB | 	rdlong	result1, objptr
08420     FD 32 02 F6 | 	mov	local07, result1
08424     03 32 66 F0 | 	shl	local07, #3
08428     02 00 00 FF 
0842c     38 E4 85 F1 | 	sub	objptr, ##1080
08430     F2 32 02 F1 | 	add	local07, objptr
08434     19 33 02 FB | 	rdlong	local07, local07
08438     02 FA 05 F1 | 	add	result1, #2
0843c     02 00 00 FF 
08440     38 E4 05 F1 | 	add	objptr, ##1080
08444     F2 FA 61 FC | 	wrlong	result1, objptr
08448     37 00 00 FF 
0844c     64 E4 85 F1 | 	sub	objptr, ##28260
08450                 | LR__0741
08450     19 13 02 F6 | 	mov	arg01, local07
08454     01 14 06 F6 | 	mov	arg02, #1
08458     C0 1D B2 FD | 	call	#__system__Right_S
0845c     FD 34 02 F6 | 	mov	local08, result1
08460     A0 3B B0 FD | 	call	#_expr
08464                 | ' 
08464                 | ' suffix2$=right$(varname2$,1)
08464                 | ' expr()
08464                 | ' if varnum>0 then					' try to find a variable
08464     35 00 00 FF 
08468     28 E4 05 F1 | 	add	objptr, ##27176
0846c     F2 36 02 FB | 	rdlong	local09, objptr
08470     35 00 00 FF 
08474     28 E4 85 F1 | 	sub	objptr, ##27176
08478     01 36 56 F2 | 	cmps	local09, #1 wc
0847c     58 00 90 CD |  if_b	jmp	#LR__0744
08480                 | '   for i=0 to varnum-1
08480     00 38 06 F6 | 	mov	local10, #0
08484     35 00 00 FF 
08488     28 E4 05 F1 | 	add	objptr, ##27176
0848c     F2 3A 02 FB | 	rdlong	local11, objptr
08490     35 00 00 FF 
08494     28 E4 85 F1 | 	sub	objptr, ##27176
08498                 | LR__0742
08498     1D 39 52 F2 | 	cmps	local10, local11 wc
0849c     38 00 90 3D |  if_ae	jmp	#LR__0743
084a0                 | '     if variables(i).name=varname2$ then j=i : exit
084a0     1C 37 02 F6 | 	mov	local09, local10
084a4     04 36 66 F0 | 	shl	local09, #4
084a8     15 00 00 FF 
084ac     18 E4 05 F1 | 	add	objptr, ##10776
084b0     F2 36 02 F1 | 	add	local09, objptr
084b4     1B 13 02 FB | 	rdlong	arg01, local09
084b8     19 15 02 F6 | 	mov	arg02, local07
084bc     15 00 00 FF 
084c0     18 E4 85 F1 | 	sub	objptr, ##10776
084c4     74 FC B1 FD | 	call	#__system___string_cmp
084c8     00 FA 0D F2 | 	cmp	result1, #0 wz
084cc     1C 2F 02 A6 |  if_e	mov	local05, local10
084d0     01 38 06 51 |  if_ne	add	local10, #1
084d4     C0 FF 9F 5D |  if_ne	jmp	#LR__0742
084d8                 | LR__0743
084d8                 | LR__0744
084d8                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
084d8     FF FF 7F FF 
084dc     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
084e0     60 00 90 5D |  if_ne	jmp	#LR__0745
084e4     35 00 00 FF 
084e8     28 E4 05 F1 | 	add	objptr, ##27176
084ec     F2 36 02 FB | 	rdlong	local09, objptr
084f0     35 00 00 FF 
084f4     28 E4 85 F1 | 	sub	objptr, ##27176
084f8     02 00 00 FF 
084fc     00 36 56 F2 | 	cmps	local09, ##1024 wc
08500     40 00 90 3D |  if_ae	jmp	#LR__0745
08504     35 00 00 FF 
08508     28 E4 05 F1 | 	add	objptr, ##27176
0850c     F2 3A 02 FB | 	rdlong	local11, objptr
08510     04 3A 66 F0 | 	shl	local11, #4
08514     20 00 00 FF 
08518     10 E4 85 F1 | 	sub	objptr, ##16400
0851c     F2 3A 02 F1 | 	add	local11, objptr
08520     1D 33 62 FC | 	wrlong	local07, local11
08524     20 00 00 FF 
08528     10 E4 05 F1 | 	add	objptr, ##16400
0852c     F2 36 02 FB | 	rdlong	local09, objptr
08530     1B 2F 02 F6 | 	mov	local05, local09
08534     01 36 06 F1 | 	add	local09, #1
08538     F2 36 62 FC | 	wrlong	local09, objptr
0853c     35 00 00 FF 
08540     28 E4 85 F1 | 	sub	objptr, ##27176
08544                 | LR__0745
08544                 | ' if varnum>=maxvars then
08544     35 00 00 FF 
08548     28 E4 05 F1 | 	add	objptr, ##27176
0854c     F2 36 02 FB | 	rdlong	local09, objptr
08550     35 00 00 FF 
08554     28 E4 85 F1 | 	sub	objptr, ##27176
08558     02 00 00 FF 
0855c     00 36 56 F2 | 	cmps	local09, ##1024 wc
08560     2D 30 06 36 |  if_ae	mov	local06, #45
08564     C8 01 90 3D |  if_ae	jmp	#LR__0750
08568     17 27 02 F6 | 	mov	local01, local05
0856c     17 2A 06 F6 | 	mov	local03, #23
08570     13 37 02 F6 | 	mov	local09, local01
08574     14 3D 02 F6 | 	mov	local12, local02
08578     15 27 02 F6 | 	mov	local01, local03
0857c     4A 00 00 FF 
08580     9C E4 05 F1 | 	add	objptr, ##38044
08584     F2 3A 02 FB | 	rdlong	local11, objptr
08588     1D 39 02 F6 | 	mov	local10, local11
0858c     01 38 66 F0 | 	shl	local10, #1
08590     1D 39 02 F1 | 	add	local10, local11
08594     02 38 66 F0 | 	shl	local10, #2
08598     03 00 00 FF 
0859c     00 E4 85 F1 | 	sub	objptr, ##1536
085a0     F2 38 02 F1 | 	add	local10, objptr
085a4     1C 37 62 FC | 	wrlong	local09, local10
085a8     03 00 00 FF 
085ac     00 E4 05 F1 | 	add	objptr, ##1536
085b0     F2 36 02 FB | 	rdlong	local09, objptr
085b4     1B 3B 02 F6 | 	mov	local11, local09
085b8     01 3A 66 F0 | 	shl	local11, #1
085bc     1B 3B 02 F1 | 	add	local11, local09
085c0     02 3A 66 F0 | 	shl	local11, #2
085c4     03 00 00 FF 
085c8     00 E4 85 F1 | 	sub	objptr, ##1536
085cc     F2 3A 02 F1 | 	add	local11, objptr
085d0     04 3A 06 F1 | 	add	local11, #4
085d4     1D 3D 62 FC | 	wrlong	local12, local11
085d8     03 00 00 FF 
085dc     00 E4 05 F1 | 	add	objptr, ##1536
085e0     F2 36 02 FB | 	rdlong	local09, objptr
085e4     1B 3D 02 F6 | 	mov	local12, local09
085e8     01 3C 66 F0 | 	shl	local12, #1
085ec     1B 3D 02 F1 | 	add	local12, local09
085f0     02 3C 66 F0 | 	shl	local12, #2
085f4     03 00 00 FF 
085f8     00 E4 85 F1 | 	sub	objptr, ##1536
085fc     F2 3C 02 F1 | 	add	local12, objptr
08600     08 3C 06 F1 | 	add	local12, #8
08604     1E 27 62 FC | 	wrlong	local01, local12
08608     03 00 00 FF 
0860c     00 E4 05 F1 | 	add	objptr, ##1536
08610     F2 36 02 FB | 	rdlong	local09, objptr
08614     01 36 06 F1 | 	add	local09, #1
08618     F2 36 62 FC | 	wrlong	local09, objptr
0861c     4A 00 00 FF 
08620     9C E4 85 F1 | 	sub	objptr, ##38044
08624                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
08624                 | '   compiledline(lineptr)=t1:  lineptr+=1 
08624                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
08624     03 2C 0E F2 | 	cmp	local04, #3 wz
08628     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
0862c     38 00 90 5D |  if_ne	jmp	#LR__0746
08630     4A 00 00 FF 
08634     9C E4 05 F1 | 	add	objptr, ##38044
08638     F2 3C 02 FB | 	rdlong	local12, objptr
0863c     1E 27 02 F6 | 	mov	local01, local12
08640     01 26 66 F0 | 	shl	local01, #1
08644     1E 27 02 F1 | 	add	local01, local12
08648     02 26 66 F0 | 	shl	local01, #2
0864c     03 00 00 FF 
08650     00 E4 85 F1 | 	sub	objptr, ##1536
08654     F2 26 02 F1 | 	add	local01, objptr
08658     08 26 06 F1 | 	add	local01, #8
0865c     13 FD 6B FC | 	wrlong	#510, local01
08660     47 00 00 FF 
08664     9C E4 85 F1 | 	sub	objptr, ##36508
08668                 | LR__0746
08668                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
08668     4A 00 00 FF 
0866c     9C E4 05 F1 | 	add	objptr, ##38044
08670     F2 38 02 FB | 	rdlong	local10, objptr
08674     4A 00 00 FF 
08678     9C E4 85 F1 | 	sub	objptr, ##38044
0867c     97 58 48 FB | 	callpa	#(@LR__0749-@LR__0747)>>2,fcache_load_ptr_
08680                 | LR__0747
08680     1C 3D 02 F6 | 	mov	local12, local10
08684     01 3C 66 F0 | 	shl	local12, #1
08688     1C 3D 02 F1 | 	add	local12, local10
0868c     02 3C 66 F0 | 	shl	local12, #2
08690     47 00 00 FF 
08694     9C E4 05 F1 | 	add	objptr, ##36508
08698     F2 3C 02 F1 | 	add	local12, objptr
0869c     08 3C 06 F1 | 	add	local12, #8
086a0     1E 3D 02 FB | 	rdlong	local12, local12
086a4     9B 3C 0E F2 | 	cmp	local12, #155 wz
086a8     47 00 00 FF 
086ac     9C E4 85 F1 | 	sub	objptr, ##36508
086b0     70 00 90 5D |  if_ne	jmp	#LR__0748
086b4     1C 3D 02 F6 | 	mov	local12, local10
086b8     01 3C 86 F1 | 	sub	local12, #1
086bc     1E 27 02 F6 | 	mov	local01, local12
086c0     01 26 66 F0 | 	shl	local01, #1
086c4     1E 27 02 F1 | 	add	local01, local12
086c8     02 26 66 F0 | 	shl	local01, #2
086cc     47 00 00 FF 
086d0     9C E4 05 F1 | 	add	objptr, ##36508
086d4     F2 26 02 F1 | 	add	local01, objptr
086d8     08 26 06 F1 | 	add	local01, #8
086dc     13 27 02 FB | 	rdlong	local01, local01
086e0     11 26 0E F2 | 	cmp	local01, #17 wz
086e4     47 00 00 FF 
086e8     9C E4 85 F1 | 	sub	objptr, ##36508
086ec     34 00 90 5D |  if_ne	jmp	#LR__0748
086f0     1C 3D 02 F6 | 	mov	local12, local10
086f4     01 3C 86 F1 | 	sub	local12, #1
086f8     1E 27 02 F6 | 	mov	local01, local12
086fc     01 26 66 F0 | 	shl	local01, #1
08700     1E 27 02 F1 | 	add	local01, local12
08704     02 26 66 F0 | 	shl	local01, #2
08708     47 00 00 FF 
0870c     9C E4 05 F1 | 	add	objptr, ##36508
08710     F2 26 02 F1 | 	add	local01, objptr
08714     08 26 06 F1 | 	add	local01, #8
08718     13 25 68 FC | 	wrlong	#18, local01
0871c     47 00 00 FF 
08720     9C E4 85 F1 | 	sub	objptr, ##36508
08724                 | LR__0748
08724     01 38 86 F1 | 	sub	local10, #1
08728     01 38 56 F2 | 	cmps	local10, #1 wc
0872c     50 FF 9F 3D |  if_ae	jmp	#LR__0747
08730                 | LR__0749
08730                 | LR__0750
08730                 | ' return err
08730     18 FB 01 F6 | 	mov	result1, local06
08734     A7 F0 03 F6 | 	mov	ptra, fp
08738     B2 00 A0 FD | 	call	#popregs_
0873c                 | _compile_immediate_assign_ret
0873c     2D 00 64 FD | 	ret
08740                 | 
08740                 | ' 
08740                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
08740                 | ' 
08740                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
08740                 | _compile
08740     03 4A 05 F6 | 	mov	COUNT_, #3
08744     A8 00 A0 FD | 	call	#pushregs_
08748     09 27 02 F6 | 	mov	local01, arg01
0874c     0B 29 02 F6 | 	mov	local02, arg03
08750     47 00 00 FF 
08754     9C E4 05 F1 | 	add	objptr, ##36508
08758     F2 26 62 FC | 	wrlong	local01, objptr
0875c     04 E4 05 F1 | 	add	objptr, #4
08760     F2 14 62 FC | 	wrlong	arg02, objptr
08764     47 00 00 FF 
08768     A0 E4 85 F1 | 	sub	objptr, ##36512
0876c     14 13 02 F6 | 	mov	arg01, local02
08770     01 12 06 F1 | 	add	arg01, #1
08774     13 15 02 F6 | 	mov	arg02, local01
08778     2C F2 BF FD | 	call	#_compile_immediate
0877c     FD 2A 0A F6 | 	mov	local03, result1 wz
08780                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
08780                 | ' ucompiledline(0)=alinemajor
08780                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
08780                 | ' 
08780                 | ' ' cont: 
08780                 | ' ' 0 - this is the first part of the line that will continue
08780                 | ' ' 1 - this is the continuation of the line
08780                 | ' ' 2 - this is the last continued line
08780                 | ' ' 3 - this is the one and only part
08780                 | ' 
08780                 | ' err=compile_immediate(cont+1,alinemajor) 
08780                 | ' if err=0 andalso alinemajor>0 then
08780     74 00 90 5D |  if_ne	jmp	#LR__0765
08784     01 26 16 F2 | 	cmp	local01, #1 wc
08788     6C 00 90 CD |  if_b	jmp	#LR__0765
0878c                 | '   if cont=3 orelse cont=2 then 
0878c     03 28 0E F2 | 	cmp	local02, #3 wz
08790     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08794     60 00 90 5D |  if_ne	jmp	#LR__0764
08798                 | '     if alinemajor >lastline then 
08798     4A 00 00 FF 
0879c     AC E4 05 F1 | 	add	objptr, ##38060
087a0     F2 14 02 FB | 	rdlong	arg02, objptr
087a4     4A 00 00 FF 
087a8     AC E4 85 F1 | 	sub	objptr, ##38060
087ac     0A 27 1A F2 | 	cmp	local01, arg02 wcz
087b0     0C 00 90 ED |  if_be	jmp	#LR__0760
087b4     13 13 02 F6 | 	mov	arg01, local01
087b8     24 F1 BF FD | 	call	#_add_line_at_end
087bc     38 00 90 FD | 	jmp	#LR__0763
087c0                 | LR__0760
087c0     13 13 02 F6 | 	mov	arg01, local01
087c4     E8 EA BF FD | 	call	#_deleteline
087c8                 | '       deleteline(alinemajor)  
087c8                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
087c8     4A 00 00 FF 
087cc     AC E4 05 F1 | 	add	objptr, ##38060
087d0     F2 14 02 FB | 	rdlong	arg02, objptr
087d4     4A 00 00 FF 
087d8     AC E4 85 F1 | 	sub	objptr, ##38060
087dc     0A 27 1A F2 | 	cmp	local01, arg02 wcz
087e0     0C 00 90 ED |  if_be	jmp	#LR__0761
087e4     13 13 02 F6 | 	mov	arg01, local01
087e8     F4 F0 BF FD | 	call	#_add_line_at_end
087ec     08 00 90 FD | 	jmp	#LR__0762
087f0                 | LR__0761
087f0     13 13 02 F6 | 	mov	arg01, local01
087f4     CC EE BF FD | 	call	#_insertline
087f8                 | LR__0762
087f8                 | LR__0763
087f8                 | LR__0764
087f8                 | LR__0765
087f8                 | ' return err
087f8     15 FB 01 F6 | 	mov	result1, local03
087fc     A7 F0 03 F6 | 	mov	ptra, fp
08800     B2 00 A0 FD | 	call	#popregs_
08804                 | _compile_ret
08804     2D 00 64 FD | 	ret
08808                 | 
08808                 | ' 
08808                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
08808                 | ' 
08808                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
08808                 | _compile_assign
08808     03 4A 05 F6 | 	mov	COUNT_, #3
0880c     A8 00 A0 FD | 	call	#pushregs_
08810     09 27 02 F6 | 	mov	local01, arg01
08814     0B 29 02 F6 | 	mov	local02, arg03
08818     47 00 00 FF 
0881c     9C E4 05 F1 | 	add	objptr, ##36508
08820     F2 26 62 FC | 	wrlong	local01, objptr
08824     04 E4 05 F1 | 	add	objptr, #4
08828     F2 14 62 FC | 	wrlong	arg02, objptr
0882c     47 00 00 FF 
08830     A0 E4 85 F1 | 	sub	objptr, ##36512
08834     14 13 02 F6 | 	mov	arg01, local02
08838     01 12 06 F1 | 	add	arg01, #1
0883c     54 FB BF FD | 	call	#_compile_immediate_assign
08840     FD 2A 02 F6 | 	mov	local03, result1
08844                 | ' 
08844                 | ' ucompiledline(0)=alinemajor
08844                 | ' ucompiledline(1)=alineminor
08844                 | ' 
08844                 | ' err=compile_immediate_assign(cont+1) 
08844                 | ' if alinemajor>0 then
08844     01 26 16 F2 | 	cmp	local01, #1 wc
08848     6C 00 90 CD |  if_b	jmp	#LR__0775
0884c                 | '   if cont=3 orelse cont=2 then 
0884c     03 28 0E F2 | 	cmp	local02, #3 wz
08850     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08854     60 00 90 5D |  if_ne	jmp	#LR__0774
08858                 | '     if alinemajor >lastline then 
08858     4A 00 00 FF 
0885c     AC E4 05 F1 | 	add	objptr, ##38060
08860     F2 14 02 FB | 	rdlong	arg02, objptr
08864     4A 00 00 FF 
08868     AC E4 85 F1 | 	sub	objptr, ##38060
0886c     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08870     0C 00 90 ED |  if_be	jmp	#LR__0770
08874     13 13 02 F6 | 	mov	arg01, local01
08878     64 F0 BF FD | 	call	#_add_line_at_end
0887c     38 00 90 FD | 	jmp	#LR__0773
08880                 | LR__0770
08880     13 13 02 F6 | 	mov	arg01, local01
08884     28 EA BF FD | 	call	#_deleteline
08888                 | '       deleteline(alinemajor)  
08888                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
08888     4A 00 00 FF 
0888c     AC E4 05 F1 | 	add	objptr, ##38060
08890     F2 14 02 FB | 	rdlong	arg02, objptr
08894     4A 00 00 FF 
08898     AC E4 85 F1 | 	sub	objptr, ##38060
0889c     0A 27 1A F2 | 	cmp	local01, arg02 wcz
088a0     0C 00 90 ED |  if_be	jmp	#LR__0771
088a4     13 13 02 F6 | 	mov	arg01, local01
088a8     34 F0 BF FD | 	call	#_add_line_at_end
088ac     08 00 90 FD | 	jmp	#LR__0772
088b0                 | LR__0771
088b0     13 13 02 F6 | 	mov	arg01, local01
088b4     0C EE BF FD | 	call	#_insertline
088b8                 | LR__0772
088b8                 | LR__0773
088b8                 | LR__0774
088b8                 | LR__0775
088b8                 | ' return err
088b8     15 FB 01 F6 | 	mov	result1, local03
088bc     A7 F0 03 F6 | 	mov	ptra, fp
088c0     B2 00 A0 FD | 	call	#popregs_
088c4                 | _compile_assign_ret
088c4     2D 00 64 FD | 	ret
088c8                 | 
088c8                 | ' 
088c8                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
088c8                 | ' 
088c8                 | ' function compile_fun_2p() as ulong
088c8                 | _compile_fun_2p
088c8     01 4A 05 F6 | 	mov	COUNT_, #1
088cc     A8 00 A0 FD | 	call	#pushregs_
088d0     30 37 B0 FD | 	call	#_expr
088d4     FD 26 02 F6 | 	mov	local01, result1
088d8                 | ' err=expr() : if err>0 then return err
088d8     01 26 16 F2 | 	cmp	local01, #1 wc
088dc     13 FB 01 36 |  if_ae	mov	result1, local01
088e0     60 00 90 3D |  if_ae	jmp	#LR__0780
088e4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
088e4     37 00 00 FF 
088e8     64 E4 05 F1 | 	add	objptr, ##28260
088ec     F2 26 02 FB | 	rdlong	local01, objptr
088f0     03 26 66 F0 | 	shl	local01, #3
088f4     02 00 00 FF 
088f8     38 E4 85 F1 | 	sub	objptr, ##1080
088fc     F2 26 02 F1 | 	add	local01, objptr
08900     04 26 06 F1 | 	add	local01, #4
08904     13 27 02 FB | 	rdlong	local01, local01
08908     11 26 0E F2 | 	cmp	local01, #17 wz
0890c     35 00 00 FF 
08910     2C E4 85 F1 | 	sub	objptr, ##27180
08914     15 FA 05 56 |  if_ne	mov	result1, #21
08918     28 00 90 5D |  if_ne	jmp	#LR__0780
0891c     37 00 00 FF 
08920     64 E4 05 F1 | 	add	objptr, ##28260
08924     F2 26 02 FB | 	rdlong	local01, objptr
08928     01 26 06 F1 | 	add	local01, #1
0892c     F2 26 62 FC | 	wrlong	local01, objptr
08930     37 00 00 FF 
08934     64 E4 85 F1 | 	sub	objptr, ##28260
08938     C8 36 B0 FD | 	call	#_expr
0893c                 | ' err=expr() : if err>0 then return err
0893c     01 FA 15 F2 | 	cmp	result1, #1 wc
08940                 | ' return 0
08940     00 FA 05 C6 |  if_b	mov	result1, #0
08944                 | LR__0780
08944     A7 F0 03 F6 | 	mov	ptra, fp
08948     B2 00 A0 FD | 	call	#popregs_
0894c                 | _compile_fun_2p_ret
0894c     2D 00 64 FD | 	ret
08950                 | 
08950                 | ' 
08950                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
08950                 | ' 
08950                 | ' function compile_fun_3p() as ulong
08950                 | _compile_fun_3p
08950     01 4A 05 F6 | 	mov	COUNT_, #1
08954     A8 00 A0 FD | 	call	#pushregs_
08958     A8 36 B0 FD | 	call	#_expr
0895c     FD 26 02 F6 | 	mov	local01, result1
08960                 | ' err=expr() : if err>0 then return err
08960     01 26 16 F2 | 	cmp	local01, #1 wc
08964     13 FB 01 36 |  if_ae	mov	result1, local01
08968     C8 00 90 3D |  if_ae	jmp	#LR__0790
0896c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0896c     37 00 00 FF 
08970     64 E4 05 F1 | 	add	objptr, ##28260
08974     F2 26 02 FB | 	rdlong	local01, objptr
08978     03 26 66 F0 | 	shl	local01, #3
0897c     02 00 00 FF 
08980     38 E4 85 F1 | 	sub	objptr, ##1080
08984     F2 26 02 F1 | 	add	local01, objptr
08988     04 26 06 F1 | 	add	local01, #4
0898c     13 27 02 FB | 	rdlong	local01, local01
08990     11 26 0E F2 | 	cmp	local01, #17 wz
08994     35 00 00 FF 
08998     2C E4 85 F1 | 	sub	objptr, ##27180
0899c     15 FA 05 56 |  if_ne	mov	result1, #21
089a0     90 00 90 5D |  if_ne	jmp	#LR__0790
089a4     37 00 00 FF 
089a8     64 E4 05 F1 | 	add	objptr, ##28260
089ac     F2 26 02 FB | 	rdlong	local01, objptr
089b0     01 26 06 F1 | 	add	local01, #1
089b4     F2 26 62 FC | 	wrlong	local01, objptr
089b8     37 00 00 FF 
089bc     64 E4 85 F1 | 	sub	objptr, ##28260
089c0     40 36 B0 FD | 	call	#_expr
089c4     FD 26 02 F6 | 	mov	local01, result1
089c8                 | ' err=expr() : if err>0 then return err
089c8     01 26 16 F2 | 	cmp	local01, #1 wc
089cc     13 FB 01 36 |  if_ae	mov	result1, local01
089d0     60 00 90 3D |  if_ae	jmp	#LR__0790
089d4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
089d4     37 00 00 FF 
089d8     64 E4 05 F1 | 	add	objptr, ##28260
089dc     F2 26 02 FB | 	rdlong	local01, objptr
089e0     03 26 66 F0 | 	shl	local01, #3
089e4     02 00 00 FF 
089e8     38 E4 85 F1 | 	sub	objptr, ##1080
089ec     F2 26 02 F1 | 	add	local01, objptr
089f0     04 26 06 F1 | 	add	local01, #4
089f4     13 27 02 FB | 	rdlong	local01, local01
089f8     11 26 0E F2 | 	cmp	local01, #17 wz
089fc     35 00 00 FF 
08a00     2C E4 85 F1 | 	sub	objptr, ##27180
08a04     15 FA 05 56 |  if_ne	mov	result1, #21
08a08     28 00 90 5D |  if_ne	jmp	#LR__0790
08a0c     37 00 00 FF 
08a10     64 E4 05 F1 | 	add	objptr, ##28260
08a14     F2 26 02 FB | 	rdlong	local01, objptr
08a18     01 26 06 F1 | 	add	local01, #1
08a1c     F2 26 62 FC | 	wrlong	local01, objptr
08a20     37 00 00 FF 
08a24     64 E4 85 F1 | 	sub	objptr, ##28260
08a28     D8 35 B0 FD | 	call	#_expr
08a2c                 | ' err=expr() : if err>0 then return err
08a2c     01 FA 15 F2 | 	cmp	result1, #1 wc
08a30                 | ' return 0
08a30     00 FA 05 C6 |  if_b	mov	result1, #0
08a34                 | LR__0790
08a34     A7 F0 03 F6 | 	mov	ptra, fp
08a38     B2 00 A0 FD | 	call	#popregs_
08a3c                 | _compile_fun_3p_ret
08a3c     2D 00 64 FD | 	ret
08a40                 | 
08a40                 | ' 
08a40                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
08a40                 | ' 
08a40                 | ' function compile_fun_4p() as ulong
08a40                 | _compile_fun_4p
08a40     01 4A 05 F6 | 	mov	COUNT_, #1
08a44     A8 00 A0 FD | 	call	#pushregs_
08a48     B8 35 B0 FD | 	call	#_expr
08a4c     FD 26 02 F6 | 	mov	local01, result1
08a50                 | ' err=expr() : if err>0 then return err
08a50     01 26 16 F2 | 	cmp	local01, #1 wc
08a54     13 FB 01 36 |  if_ae	mov	result1, local01
08a58     30 01 90 3D |  if_ae	jmp	#LR__0800
08a5c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08a5c     37 00 00 FF 
08a60     64 E4 05 F1 | 	add	objptr, ##28260
08a64     F2 26 02 FB | 	rdlong	local01, objptr
08a68     03 26 66 F0 | 	shl	local01, #3
08a6c     02 00 00 FF 
08a70     38 E4 85 F1 | 	sub	objptr, ##1080
08a74     F2 26 02 F1 | 	add	local01, objptr
08a78     04 26 06 F1 | 	add	local01, #4
08a7c     13 27 02 FB | 	rdlong	local01, local01
08a80     11 26 0E F2 | 	cmp	local01, #17 wz
08a84     35 00 00 FF 
08a88     2C E4 85 F1 | 	sub	objptr, ##27180
08a8c     15 FA 05 56 |  if_ne	mov	result1, #21
08a90     F8 00 90 5D |  if_ne	jmp	#LR__0800
08a94     37 00 00 FF 
08a98     64 E4 05 F1 | 	add	objptr, ##28260
08a9c     F2 26 02 FB | 	rdlong	local01, objptr
08aa0     01 26 06 F1 | 	add	local01, #1
08aa4     F2 26 62 FC | 	wrlong	local01, objptr
08aa8     37 00 00 FF 
08aac     64 E4 85 F1 | 	sub	objptr, ##28260
08ab0     50 35 B0 FD | 	call	#_expr
08ab4     FD 26 02 F6 | 	mov	local01, result1
08ab8                 | ' err=expr() : if err>0 then return err
08ab8     01 26 16 F2 | 	cmp	local01, #1 wc
08abc     13 FB 01 36 |  if_ae	mov	result1, local01
08ac0     C8 00 90 3D |  if_ae	jmp	#LR__0800
08ac4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08ac4     37 00 00 FF 
08ac8     64 E4 05 F1 | 	add	objptr, ##28260
08acc     F2 26 02 FB | 	rdlong	local01, objptr
08ad0     03 26 66 F0 | 	shl	local01, #3
08ad4     02 00 00 FF 
08ad8     38 E4 85 F1 | 	sub	objptr, ##1080
08adc     F2 26 02 F1 | 	add	local01, objptr
08ae0     04 26 06 F1 | 	add	local01, #4
08ae4     13 27 02 FB | 	rdlong	local01, local01
08ae8     11 26 0E F2 | 	cmp	local01, #17 wz
08aec     35 00 00 FF 
08af0     2C E4 85 F1 | 	sub	objptr, ##27180
08af4     15 FA 05 56 |  if_ne	mov	result1, #21
08af8     90 00 90 5D |  if_ne	jmp	#LR__0800
08afc     37 00 00 FF 
08b00     64 E4 05 F1 | 	add	objptr, ##28260
08b04     F2 26 02 FB | 	rdlong	local01, objptr
08b08     01 26 06 F1 | 	add	local01, #1
08b0c     F2 26 62 FC | 	wrlong	local01, objptr
08b10     37 00 00 FF 
08b14     64 E4 85 F1 | 	sub	objptr, ##28260
08b18     E8 34 B0 FD | 	call	#_expr
08b1c     FD 26 02 F6 | 	mov	local01, result1
08b20                 | ' err=expr() : if err>0 then return err
08b20     01 26 16 F2 | 	cmp	local01, #1 wc
08b24     13 FB 01 36 |  if_ae	mov	result1, local01
08b28     60 00 90 3D |  if_ae	jmp	#LR__0800
08b2c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08b2c     37 00 00 FF 
08b30     64 E4 05 F1 | 	add	objptr, ##28260
08b34     F2 26 02 FB | 	rdlong	local01, objptr
08b38     03 26 66 F0 | 	shl	local01, #3
08b3c     02 00 00 FF 
08b40     38 E4 85 F1 | 	sub	objptr, ##1080
08b44     F2 26 02 F1 | 	add	local01, objptr
08b48     04 26 06 F1 | 	add	local01, #4
08b4c     13 27 02 FB | 	rdlong	local01, local01
08b50     11 26 0E F2 | 	cmp	local01, #17 wz
08b54     35 00 00 FF 
08b58     2C E4 85 F1 | 	sub	objptr, ##27180
08b5c     15 FA 05 56 |  if_ne	mov	result1, #21
08b60     28 00 90 5D |  if_ne	jmp	#LR__0800
08b64     37 00 00 FF 
08b68     64 E4 05 F1 | 	add	objptr, ##28260
08b6c     F2 26 02 FB | 	rdlong	local01, objptr
08b70     01 26 06 F1 | 	add	local01, #1
08b74     F2 26 62 FC | 	wrlong	local01, objptr
08b78     37 00 00 FF 
08b7c     64 E4 85 F1 | 	sub	objptr, ##28260
08b80     80 34 B0 FD | 	call	#_expr
08b84                 | ' err=expr() : if err>0 then return err
08b84     01 FA 15 F2 | 	cmp	result1, #1 wc
08b88                 | ' return 0
08b88     00 FA 05 C6 |  if_b	mov	result1, #0
08b8c                 | LR__0800
08b8c     A7 F0 03 F6 | 	mov	ptra, fp
08b90     B2 00 A0 FD | 	call	#popregs_
08b94                 | _compile_fun_4p_ret
08b94     2D 00 64 FD | 	ret
08b98                 | 
08b98                 | ' 
08b98                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
08b98                 | ' 
08b98                 | ' function compile_fun_varp() as ulong,ulong 
08b98                 | _compile_fun_varp
08b98     03 4A 05 F6 | 	mov	COUNT_, #3
08b9c     A8 00 A0 FD | 	call	#pushregs_
08ba0     00 26 06 F6 | 	mov	local01, #0
08ba4                 | ' 
08ba4                 | ' i=0 : err=0
08ba4                 | ' if lparts(ct).token<>token_end then
08ba4     37 00 00 FF 
08ba8     64 E4 05 F1 | 	add	objptr, ##28260
08bac     F2 28 02 FB | 	rdlong	local02, objptr
08bb0     03 28 66 F0 | 	shl	local02, #3
08bb4     02 00 00 FF 
08bb8     38 E4 85 F1 | 	sub	objptr, ##1080
08bbc     F2 28 02 F1 | 	add	local02, objptr
08bc0     04 28 06 F1 | 	add	local02, #4
08bc4     14 29 02 FB | 	rdlong	local02, local02
08bc8     FE 29 0E F2 | 	cmp	local02, #510 wz
08bcc     35 00 00 FF 
08bd0     2C E4 85 F1 | 	sub	objptr, ##27180
08bd4     88 00 90 AD |  if_e	jmp	#LR__0811
08bd8                 | '   do
08bd8                 | LR__0810
08bd8     28 34 B0 FD | 	call	#_expr
08bdc     01 26 06 F1 | 	add	local01, #1
08be0                 | '     expr()
08be0                 | '     i+=1
08be0                 | '     if lparts(ct).token=token_comma then ct+=1
08be0     37 00 00 FF 
08be4     64 E4 05 F1 | 	add	objptr, ##28260
08be8     F2 28 02 FB | 	rdlong	local02, objptr
08bec     03 28 66 F0 | 	shl	local02, #3
08bf0     02 00 00 FF 
08bf4     38 E4 85 F1 | 	sub	objptr, ##1080
08bf8     F2 28 02 F1 | 	add	local02, objptr
08bfc     04 28 06 F1 | 	add	local02, #4
08c00     14 29 02 FB | 	rdlong	local02, local02
08c04     11 28 0E F2 | 	cmp	local02, #17 wz
08c08     35 00 00 FF 
08c0c     2C E4 85 F1 | 	sub	objptr, ##27180
08c10     37 00 00 AF 
08c14     64 E4 05 A1 |  if_e	add	objptr, ##28260
08c18     F2 2A 02 AB |  if_e	rdlong	local03, objptr
08c1c     01 2A 06 A1 |  if_e	add	local03, #1
08c20     F2 2A 62 AC |  if_e	wrlong	local03, objptr
08c24     37 00 00 AF 
08c28     64 E4 85 A1 |  if_e	sub	objptr, ##28260
08c2c                 | '     if lparts(ct).token=token_end then exit loop
08c2c     37 00 00 FF 
08c30     64 E4 05 F1 | 	add	objptr, ##28260
08c34     F2 28 02 FB | 	rdlong	local02, objptr
08c38     03 28 66 F0 | 	shl	local02, #3
08c3c     02 00 00 FF 
08c40     38 E4 85 F1 | 	sub	objptr, ##1080
08c44     F2 28 02 F1 | 	add	local02, objptr
08c48     04 28 06 F1 | 	add	local02, #4
08c4c     14 29 02 FB | 	rdlong	local02, local02
08c50     FE 29 0E F2 | 	cmp	local02, #510 wz
08c54     35 00 00 FF 
08c58     2C E4 85 F1 | 	sub	objptr, ##27180
08c5c     78 FF 9F 5D |  if_ne	jmp	#LR__0810
08c60                 | LR__0811
08c60                 | ' return i,err
08c60     13 FB 01 F6 | 	mov	result1, local01
08c64     00 FC 05 F6 | 	mov	result2, #0
08c68     A7 F0 03 F6 | 	mov	ptra, fp
08c6c     B2 00 A0 FD | 	call	#popregs_
08c70                 | _compile_fun_varp_ret
08c70     2D 00 64 FD | 	ret
08c74                 | 
08c74                 | ' 
08c74                 | ' '----  Compile read. The same as compile_input() except printing a prompt
08c74                 | ' 
08c74                 | ' function compile_read() as ulong,ulong 
08c74                 | _compile_read
08c74     04 4A 05 F6 | 	mov	COUNT_, #4
08c78     A8 00 A0 FD | 	call	#pushregs_
08c7c     00 26 06 F6 | 	mov	local01, #0
08c80                 | ' 
08c80                 | ' i=0 : err=0
08c80                 | ' if lparts(ct).token<>token_end then
08c80     37 00 00 FF 
08c84     64 E4 05 F1 | 	add	objptr, ##28260
08c88     F2 28 02 FB | 	rdlong	local02, objptr
08c8c     03 28 66 F0 | 	shl	local02, #3
08c90     02 00 00 FF 
08c94     38 E4 85 F1 | 	sub	objptr, ##1080
08c98     F2 28 02 F1 | 	add	local02, objptr
08c9c     04 28 06 F1 | 	add	local02, #4
08ca0     14 29 02 FB | 	rdlong	local02, local02
08ca4     FE 29 0E F2 | 	cmp	local02, #510 wz
08ca8     35 00 00 FF 
08cac     2C E4 85 F1 | 	sub	objptr, ##27180
08cb0     98 00 90 AD |  if_e	jmp	#LR__0821
08cb4                 | '   do
08cb4                 | LR__0820
08cb4     B8 2F B0 FD | 	call	#_getaddr
08cb8     FD 2A 02 F6 | 	mov	local03, result1
08cbc     37 00 00 FF 
08cc0     64 E4 05 F1 | 	add	objptr, ##28260
08cc4     F2 28 02 FB | 	rdlong	local02, objptr
08cc8     01 28 06 F1 | 	add	local02, #1
08ccc     F2 28 62 FC | 	wrlong	local02, objptr
08cd0     01 26 06 F1 | 	add	local01, #1
08cd4                 | '     err=getaddr() :ct+=1
08cd4                 | '     i+=1 
08cd4                 | '     if lparts(ct).token=token_comma then ct+=1 
08cd4     03 28 66 F0 | 	shl	local02, #3
08cd8     02 00 00 FF 
08cdc     38 E4 85 F1 | 	sub	objptr, ##1080
08ce0     F2 28 02 F1 | 	add	local02, objptr
08ce4     04 28 06 F1 | 	add	local02, #4
08ce8     14 29 02 FB | 	rdlong	local02, local02
08cec     11 28 0E F2 | 	cmp	local02, #17 wz
08cf0     35 00 00 FF 
08cf4     2C E4 85 F1 | 	sub	objptr, ##27180
08cf8     37 00 00 AF 
08cfc     64 E4 05 A1 |  if_e	add	objptr, ##28260
08d00     F2 2C 02 AB |  if_e	rdlong	local04, objptr
08d04     01 2C 06 A1 |  if_e	add	local04, #1
08d08     F2 2C 62 AC |  if_e	wrlong	local04, objptr
08d0c     37 00 00 AF 
08d10     64 E4 85 A1 |  if_e	sub	objptr, ##28260
08d14                 | '     if lparts(ct).token=token_end then exit loop
08d14     37 00 00 FF 
08d18     64 E4 05 F1 | 	add	objptr, ##28260
08d1c     F2 28 02 FB | 	rdlong	local02, objptr
08d20     03 28 66 F0 | 	shl	local02, #3
08d24     02 00 00 FF 
08d28     38 E4 85 F1 | 	sub	objptr, ##1080
08d2c     F2 28 02 F1 | 	add	local02, objptr
08d30     04 28 06 F1 | 	add	local02, #4
08d34     14 29 02 FB | 	rdlong	local02, local02
08d38     FE 29 0E F2 | 	cmp	local02, #510 wz
08d3c     35 00 00 FF 
08d40     2C E4 85 F1 | 	sub	objptr, ##27180
08d44     08 00 90 AD |  if_e	jmp	#LR__0822
08d48     68 FF 9F FD | 	jmp	#LR__0820
08d4c                 | LR__0821
08d4c     36 2A 06 F6 | 	mov	local03, #54
08d50                 | LR__0822
08d50                 | ' return i,err
08d50     13 FB 01 F6 | 	mov	result1, local01
08d54     15 FD 01 F6 | 	mov	result2, local03
08d58     A7 F0 03 F6 | 	mov	ptra, fp
08d5c     B2 00 A0 FD | 	call	#popregs_
08d60                 | _compile_read_ret
08d60     2D 00 64 FD | 	ret
08d64                 | 
08d64                 | ' 
08d64                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08d64                 | ' 
08d64                 | ' function compile_input() as ulong,ulong 
08d64                 | _compile_input
08d64     0F 4A 05 F6 | 	mov	COUNT_, #15
08d68     A8 00 A0 FD | 	call	#pushregs_
08d6c                 | ' 
08d6c                 | ' if lparts(ct).token=token_string then
08d6c     37 00 00 FF 
08d70     64 E4 05 F1 | 	add	objptr, ##28260
08d74     F2 16 02 FB | 	rdlong	arg03, objptr
08d78     03 16 66 F0 | 	shl	arg03, #3
08d7c     02 00 00 FF 
08d80     38 E4 85 F1 | 	sub	objptr, ##1080
08d84     F2 16 02 F1 | 	add	arg03, objptr
08d88     04 16 06 F1 | 	add	arg03, #4
08d8c     0B FD 01 FB | 	rdlong	result2, arg03
08d90     01 00 00 FF 
08d94     03 FC 0D F2 | 	cmp	result2, ##515 wz
08d98     35 00 00 FF 
08d9c     2C E4 85 F1 | 	sub	objptr, ##27180
08da0     38 06 90 5D |  if_ne	jmp	#LR__0837
08da4     37 00 00 FF 
08da8     64 E4 05 F1 | 	add	objptr, ##28260
08dac     F2 14 02 FB | 	rdlong	arg02, objptr
08db0     03 14 66 F0 | 	shl	arg02, #3
08db4     02 00 00 FF 
08db8     38 E4 85 F1 | 	sub	objptr, ##1080
08dbc     F2 14 02 F1 | 	add	arg02, objptr
08dc0     0A 13 02 FB | 	rdlong	arg01, arg02
08dc4     35 00 00 FF 
08dc8     2C E4 85 F1 | 	sub	objptr, ##27180
08dcc     09 2D 02 F6 | 	mov	local04, arg01
08dd0     97 06 48 FB | 	callpa	#(@LR__0831-@LR__0830)>>2,fcache_load_ptr_
08dd4                 | LR__0830
08dd4     16 FB C9 FA | 	rdbyte	result1, local04 wz
08dd8     01 2C 06 51 |  if_ne	add	local04, #1
08ddc     F4 FF 9F 5D |  if_ne	jmp	#LR__0830
08de0                 | LR__0831
08de0     09 2D 82 F1 | 	sub	local04, arg01
08de4     16 FB 01 F6 | 	mov	result1, local04
08de8     52 00 00 FF 
08dec     48 E5 05 F1 | 	add	objptr, ##42312
08df0     F2 FA 61 FC | 	wrlong	result1, objptr
08df4     58 E4 85 F1 | 	sub	objptr, #88
08df8     F2 12 02 FB | 	rdlong	arg01, objptr
08dfc     FD 12 82 F1 | 	sub	arg01, result1
08e00     04 12 86 F1 | 	sub	arg01, #4
08e04     03 12 26 F5 | 	andn	arg01, #3
08e08     F2 12 62 FC | 	wrlong	arg01, objptr
08e0c     58 E4 05 F1 | 	add	objptr, #88
08e10     F2 14 02 FB | 	rdlong	arg02, objptr
08e14     52 00 00 FF 
08e18     48 E5 85 F1 | 	sub	objptr, ##42312
08e1c     3C BA B1 FD | 	call	#_pslpoke
08e20                 | '   pslpoke memtop,l
08e20                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08e20     01 2E 06 F6 | 	mov	local05, #1
08e24     52 00 00 FF 
08e28     48 E5 05 F1 | 	add	objptr, ##42312
08e2c     F2 30 02 FB | 	rdlong	local06, objptr
08e30     52 00 00 FF 
08e34     48 E5 85 F1 | 	sub	objptr, ##42312
08e38     01 30 06 F1 | 	add	local06, #1
08e3c                 | LR__0832
08e3c     18 2F 52 F2 | 	cmps	local05, local06 wc
08e40     5C 00 90 3D |  if_ae	jmp	#LR__0833
08e44     52 00 00 FF 
08e48     F0 E4 05 F1 | 	add	objptr, ##42224
08e4c     F2 32 02 FB | 	rdlong	local07, objptr
08e50     03 32 06 F1 | 	add	local07, #3
08e54     17 33 02 F1 | 	add	local07, local05
08e58     1B 00 00 FF 
08e5c     8C E4 85 F1 | 	sub	objptr, ##13964
08e60     F2 14 02 FB | 	rdlong	arg02, objptr
08e64     03 14 66 F0 | 	shl	arg02, #3
08e68     02 00 00 FF 
08e6c     38 E4 85 F1 | 	sub	objptr, ##1080
08e70     F2 14 02 F1 | 	add	arg02, objptr
08e74     0A 13 02 FB | 	rdlong	arg01, arg02
08e78     17 15 02 F6 | 	mov	arg02, local05
08e7c     01 16 06 F6 | 	mov	arg03, #1
08e80     35 00 00 FF 
08e84     2C E4 85 F1 | 	sub	objptr, ##27180
08e88     20 14 B2 FD | 	call	#__system__Mid_S
08e8c     FD 14 C2 FA | 	rdbyte	arg02, result1
08e90     19 13 02 F6 | 	mov	arg01, local07
08e94     54 BA B1 FD | 	call	#_pspoke
08e98     01 2E 06 F1 | 	add	local05, #1
08e9c     9C FF 9F FD | 	jmp	#LR__0832
08ea0                 | LR__0833
08ea0     52 00 00 FF 
08ea4     F0 E4 05 F1 | 	add	objptr, ##42224
08ea8     F2 26 02 FB | 	rdlong	local01, objptr
08eac     2B 2A 06 F6 | 	mov	local03, #43
08eb0     13 35 02 F6 | 	mov	local08, local01
08eb4     14 33 02 F6 | 	mov	local07, local02
08eb8     15 37 02 F6 | 	mov	local09, local03
08ebc     08 00 00 FF 
08ec0     54 E4 85 F1 | 	sub	objptr, ##4180
08ec4     F2 30 02 FB | 	rdlong	local06, objptr
08ec8     18 2F 02 F6 | 	mov	local05, local06
08ecc     01 2E 66 F0 | 	shl	local05, #1
08ed0     18 2F 02 F1 | 	add	local05, local06
08ed4     02 2E 66 F0 | 	shl	local05, #2
08ed8     03 00 00 FF 
08edc     00 E4 85 F1 | 	sub	objptr, ##1536
08ee0     F2 2E 02 F1 | 	add	local05, objptr
08ee4     17 35 62 FC | 	wrlong	local08, local05
08ee8     03 00 00 FF 
08eec     00 E4 05 F1 | 	add	objptr, ##1536
08ef0     F2 34 02 FB | 	rdlong	local08, objptr
08ef4     1A 31 02 F6 | 	mov	local06, local08
08ef8     01 30 66 F0 | 	shl	local06, #1
08efc     1A 31 02 F1 | 	add	local06, local08
08f00     02 30 66 F0 | 	shl	local06, #2
08f04     03 00 00 FF 
08f08     00 E4 85 F1 | 	sub	objptr, ##1536
08f0c     F2 30 02 F1 | 	add	local06, objptr
08f10     04 30 06 F1 | 	add	local06, #4
08f14     18 33 62 FC | 	wrlong	local07, local06
08f18     03 00 00 FF 
08f1c     00 E4 05 F1 | 	add	objptr, ##1536
08f20     F2 34 02 FB | 	rdlong	local08, objptr
08f24     1A 33 02 F6 | 	mov	local07, local08
08f28     01 32 66 F0 | 	shl	local07, #1
08f2c     1A 33 02 F1 | 	add	local07, local08
08f30     02 32 66 F0 | 	shl	local07, #2
08f34     03 00 00 FF 
08f38     00 E4 85 F1 | 	sub	objptr, ##1536
08f3c     F2 32 02 F1 | 	add	local07, objptr
08f40     08 32 06 F1 | 	add	local07, #8
08f44     19 37 62 FC | 	wrlong	local09, local07
08f48     03 00 00 FF 
08f4c     00 E4 05 F1 | 	add	objptr, ##1536
08f50     F2 34 02 FB | 	rdlong	local08, objptr
08f54     01 34 06 F1 | 	add	local08, #1
08f58     F2 34 62 FC | 	wrlong	local08, objptr
08f5c     13 00 00 FF 
08f60     38 E4 85 F1 | 	sub	objptr, ##9784
08f64     F2 34 02 FB | 	rdlong	local08, objptr
08f68     01 34 06 F1 | 	add	local08, #1
08f6c     F2 34 62 FC | 	wrlong	local08, objptr
08f70                 | '   t1.result.uresult=memtop
08f70                 | '   t1.result_type=result_string2  
08f70                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08f70                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08f70     03 34 66 F0 | 	shl	local08, #3
08f74     02 00 00 FF 
08f78     38 E4 85 F1 | 	sub	objptr, ##1080
08f7c     F2 34 02 F1 | 	add	local08, objptr
08f80     04 34 06 F1 | 	add	local08, #4
08f84     1A 35 02 FB | 	rdlong	local08, local08
08f88     11 34 0E F2 | 	cmp	local08, #17 wz
08f8c     35 00 00 FF 
08f90     2C E4 85 F1 | 	sub	objptr, ##27180
08f94     60 01 90 5D |  if_ne	jmp	#LR__0834
08f98     21 2A 06 F6 | 	mov	local03, #33
08f9c     13 35 02 F6 | 	mov	local08, local01
08fa0     14 33 02 F6 | 	mov	local07, local02
08fa4     15 39 02 F6 | 	mov	local10, local03
08fa8     4A 00 00 FF 
08fac     9C E4 05 F1 | 	add	objptr, ##38044
08fb0     F2 3A 02 FB | 	rdlong	local11, objptr
08fb4     1D 3D 02 F6 | 	mov	local12, local11
08fb8     01 3C 66 F0 | 	shl	local12, #1
08fbc     1D 3D 02 F1 | 	add	local12, local11
08fc0     02 3C 66 F0 | 	shl	local12, #2
08fc4     03 00 00 FF 
08fc8     00 E4 85 F1 | 	sub	objptr, ##1536
08fcc     F2 3C 02 F1 | 	add	local12, objptr
08fd0     1E 35 62 FC | 	wrlong	local08, local12
08fd4     03 00 00 FF 
08fd8     00 E4 05 F1 | 	add	objptr, ##1536
08fdc     F2 3E 02 FB | 	rdlong	local13, objptr
08fe0     1F 35 02 F6 | 	mov	local08, local13
08fe4     01 34 66 F0 | 	shl	local08, #1
08fe8     1F 35 02 F1 | 	add	local08, local13
08fec     02 34 66 F0 | 	shl	local08, #2
08ff0     03 00 00 FF 
08ff4     00 E4 85 F1 | 	sub	objptr, ##1536
08ff8     F2 34 02 F1 | 	add	local08, objptr
08ffc     04 34 06 F1 | 	add	local08, #4
09000     1A 33 62 FC | 	wrlong	local07, local08
09004     03 00 00 FF 
09008     00 E4 05 F1 | 	add	objptr, ##1536
0900c     F2 34 02 FB | 	rdlong	local08, objptr
09010     1A 41 02 F6 | 	mov	local14, local08
09014     01 40 66 F0 | 	shl	local14, #1
09018     1A 41 02 F1 | 	add	local14, local08
0901c     02 40 66 F0 | 	shl	local14, #2
09020     03 00 00 FF 
09024     00 E4 85 F1 | 	sub	objptr, ##1536
09028     F2 40 02 F1 | 	add	local14, objptr
0902c     08 40 06 F1 | 	add	local14, #8
09030     20 39 62 FC | 	wrlong	local10, local14
09034     03 00 00 FF 
09038     00 E4 05 F1 | 	add	objptr, ##1536
0903c     F2 34 02 FB | 	rdlong	local08, objptr
09040     01 34 06 F1 | 	add	local08, #1
09044     F2 34 62 FC | 	wrlong	local08, objptr
09048     44 2A 06 F6 | 	mov	local03, #68
0904c     13 35 02 F6 | 	mov	local08, local01
09050     14 33 02 F6 | 	mov	local07, local02
09054     15 39 02 F6 | 	mov	local10, local03
09058     F2 40 02 FB | 	rdlong	local14, objptr
0905c     20 3F 02 F6 | 	mov	local13, local14
09060     01 3E 66 F0 | 	shl	local13, #1
09064     20 3F 02 F1 | 	add	local13, local14
09068     02 3E 66 F0 | 	shl	local13, #2
0906c     03 00 00 FF 
09070     00 E4 85 F1 | 	sub	objptr, ##1536
09074     F2 3E 02 F1 | 	add	local13, objptr
09078     1F 35 62 FC | 	wrlong	local08, local13
0907c     03 00 00 FF 
09080     00 E4 05 F1 | 	add	objptr, ##1536
09084     F2 40 02 FB | 	rdlong	local14, objptr
09088     20 3F 02 F6 | 	mov	local13, local14
0908c     01 3E 66 F0 | 	shl	local13, #1
09090     20 3F 02 F1 | 	add	local13, local14
09094     02 3E 66 F0 | 	shl	local13, #2
09098     03 00 00 FF 
0909c     00 E4 85 F1 | 	sub	objptr, ##1536
090a0     F2 3E 02 F1 | 	add	local13, objptr
090a4     04 3E 06 F1 | 	add	local13, #4
090a8     1F 33 62 FC | 	wrlong	local07, local13
090ac     03 00 00 FF 
090b0     00 E4 05 F1 | 	add	objptr, ##1536
090b4     F2 3E 02 FB | 	rdlong	local13, objptr
090b8     1F 41 02 F6 | 	mov	local14, local13
090bc     01 40 66 F0 | 	shl	local14, #1
090c0     1F 41 02 F1 | 	add	local14, local13
090c4     02 40 66 F0 | 	shl	local14, #2
090c8     03 00 00 FF 
090cc     00 E4 85 F1 | 	sub	objptr, ##1536
090d0     F2 40 02 F1 | 	add	local14, objptr
090d4     08 40 06 F1 | 	add	local14, #8
090d8     20 39 62 FC | 	wrlong	local10, local14
090dc     03 00 00 FF 
090e0     00 E4 05 F1 | 	add	objptr, ##1536
090e4     F2 34 02 FB | 	rdlong	local08, objptr
090e8     01 34 06 F1 | 	add	local08, #1
090ec     F2 34 62 FC | 	wrlong	local08, objptr
090f0     4A 00 00 FF 
090f4     9C E4 85 F1 | 	sub	objptr, ##38044
090f8                 | LR__0834
090f8                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
090f8     37 00 00 FF 
090fc     64 E4 05 F1 | 	add	objptr, ##28260
09100     F2 34 02 FB | 	rdlong	local08, objptr
09104     03 34 66 F0 | 	shl	local08, #3
09108     02 00 00 FF 
0910c     38 E4 85 F1 | 	sub	objptr, ##1080
09110     F2 34 02 F1 | 	add	local08, objptr
09114     04 34 06 F1 | 	add	local08, #4
09118     1A 41 02 FB | 	rdlong	local14, local08
0911c     12 40 0E F2 | 	cmp	local14, #18 wz
09120     35 00 00 FF 
09124     2C E4 85 F1 | 	sub	objptr, ##27180
09128     60 01 90 5D |  if_ne	jmp	#LR__0835
0912c     22 2A 06 F6 | 	mov	local03, #34
09130     13 35 02 F6 | 	mov	local08, local01
09134     14 33 02 F6 | 	mov	local07, local02
09138     15 39 02 F6 | 	mov	local10, local03
0913c     4A 00 00 FF 
09140     9C E4 05 F1 | 	add	objptr, ##38044
09144     F2 40 02 FB | 	rdlong	local14, objptr
09148     20 3F 02 F6 | 	mov	local13, local14
0914c     01 3E 66 F0 | 	shl	local13, #1
09150     20 3F 02 F1 | 	add	local13, local14
09154     02 3E 66 F0 | 	shl	local13, #2
09158     03 00 00 FF 
0915c     00 E4 85 F1 | 	sub	objptr, ##1536
09160     F2 3E 02 F1 | 	add	local13, objptr
09164     1F 35 62 FC | 	wrlong	local08, local13
09168     03 00 00 FF 
0916c     00 E4 05 F1 | 	add	objptr, ##1536
09170     F2 40 02 FB | 	rdlong	local14, objptr
09174     20 35 02 F6 | 	mov	local08, local14
09178     01 34 66 F0 | 	shl	local08, #1
0917c     20 35 02 F1 | 	add	local08, local14
09180     02 34 66 F0 | 	shl	local08, #2
09184     03 00 00 FF 
09188     00 E4 85 F1 | 	sub	objptr, ##1536
0918c     F2 34 02 F1 | 	add	local08, objptr
09190     04 34 06 F1 | 	add	local08, #4
09194     1A 33 62 FC | 	wrlong	local07, local08
09198     03 00 00 FF 
0919c     00 E4 05 F1 | 	add	objptr, ##1536
091a0     F2 34 02 FB | 	rdlong	local08, objptr
091a4     1A 41 02 F6 | 	mov	local14, local08
091a8     01 40 66 F0 | 	shl	local14, #1
091ac     1A 41 02 F1 | 	add	local14, local08
091b0     02 40 66 F0 | 	shl	local14, #2
091b4     03 00 00 FF 
091b8     00 E4 85 F1 | 	sub	objptr, ##1536
091bc     F2 40 02 F1 | 	add	local14, objptr
091c0     08 40 06 F1 | 	add	local14, #8
091c4     20 39 62 FC | 	wrlong	local10, local14
091c8     03 00 00 FF 
091cc     00 E4 05 F1 | 	add	objptr, ##1536
091d0     F2 34 02 FB | 	rdlong	local08, objptr
091d4     01 34 06 F1 | 	add	local08, #1
091d8     F2 34 62 FC | 	wrlong	local08, objptr
091dc     44 2A 06 F6 | 	mov	local03, #68
091e0     13 35 02 F6 | 	mov	local08, local01
091e4     14 33 02 F6 | 	mov	local07, local02
091e8     15 39 02 F6 | 	mov	local10, local03
091ec     F2 40 02 FB | 	rdlong	local14, objptr
091f0     20 3F 02 F6 | 	mov	local13, local14
091f4     01 3E 66 F0 | 	shl	local13, #1
091f8     20 3F 02 F1 | 	add	local13, local14
091fc     02 3E 66 F0 | 	shl	local13, #2
09200     03 00 00 FF 
09204     00 E4 85 F1 | 	sub	objptr, ##1536
09208     F2 3E 02 F1 | 	add	local13, objptr
0920c     1F 35 62 FC | 	wrlong	local08, local13
09210     03 00 00 FF 
09214     00 E4 05 F1 | 	add	objptr, ##1536
09218     F2 40 02 FB | 	rdlong	local14, objptr
0921c     20 3F 02 F6 | 	mov	local13, local14
09220     01 3E 66 F0 | 	shl	local13, #1
09224     20 3F 02 F1 | 	add	local13, local14
09228     02 3E 66 F0 | 	shl	local13, #2
0922c     03 00 00 FF 
09230     00 E4 85 F1 | 	sub	objptr, ##1536
09234     F2 3E 02 F1 | 	add	local13, objptr
09238     04 3E 06 F1 | 	add	local13, #4
0923c     1F 33 62 FC | 	wrlong	local07, local13
09240     03 00 00 FF 
09244     00 E4 05 F1 | 	add	objptr, ##1536
09248     F2 3E 02 FB | 	rdlong	local13, objptr
0924c     1F 41 02 F6 | 	mov	local14, local13
09250     01 40 66 F0 | 	shl	local14, #1
09254     1F 41 02 F1 | 	add	local14, local13
09258     02 40 66 F0 | 	shl	local14, #2
0925c     03 00 00 FF 
09260     00 E4 85 F1 | 	sub	objptr, ##1536
09264     F2 40 02 F1 | 	add	local14, objptr
09268     08 40 06 F1 | 	add	local14, #8
0926c     20 39 62 FC | 	wrlong	local10, local14
09270     03 00 00 FF 
09274     00 E4 05 F1 | 	add	objptr, ##1536
09278     F2 34 02 FB | 	rdlong	local08, objptr
0927c     01 34 06 F1 | 	add	local08, #1
09280     F2 34 62 FC | 	wrlong	local08, objptr
09284     4A 00 00 FF 
09288     9C E4 85 F1 | 	sub	objptr, ##38044
0928c                 | LR__0835
0928c                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
0928c     37 00 00 FF 
09290     64 E4 05 F1 | 	add	objptr, ##28260
09294     F2 34 02 FB | 	rdlong	local08, objptr
09298     03 34 66 F0 | 	shl	local08, #3
0929c     02 00 00 FF 
092a0     38 E4 85 F1 | 	sub	objptr, ##1080
092a4     F2 34 02 F1 | 	add	local08, objptr
092a8     04 34 06 F1 | 	add	local08, #4
092ac     1A 41 02 FB | 	rdlong	local14, local08
092b0     12 40 0E F2 | 	cmp	local14, #18 wz
092b4     35 00 00 FF 
092b8     2C E4 85 F1 | 	sub	objptr, ##27180
092bc     00 01 90 AD |  if_e	jmp	#LR__0836
092c0     37 00 00 FF 
092c4     64 E4 05 F1 | 	add	objptr, ##28260
092c8     F2 34 02 FB | 	rdlong	local08, objptr
092cc     03 34 66 F0 | 	shl	local08, #3
092d0     02 00 00 FF 
092d4     38 E4 85 F1 | 	sub	objptr, ##1080
092d8     F2 34 02 F1 | 	add	local08, objptr
092dc     04 34 06 F1 | 	add	local08, #4
092e0     1A 41 02 FB | 	rdlong	local14, local08
092e4     11 40 0E F2 | 	cmp	local14, #17 wz
092e8     35 00 00 FF 
092ec     2C E4 85 F1 | 	sub	objptr, ##27180
092f0     CC 00 90 AD |  if_e	jmp	#LR__0836
092f4     44 2A 06 F6 | 	mov	local03, #68
092f8     13 35 02 F6 | 	mov	local08, local01
092fc     14 33 02 F6 | 	mov	local07, local02
09300     15 39 02 F6 | 	mov	local10, local03
09304     4A 00 00 FF 
09308     9C E4 05 F1 | 	add	objptr, ##38044
0930c     F2 40 02 FB | 	rdlong	local14, objptr
09310     20 3F 02 F6 | 	mov	local13, local14
09314     01 3E 66 F0 | 	shl	local13, #1
09318     20 3F 02 F1 | 	add	local13, local14
0931c     02 3E 66 F0 | 	shl	local13, #2
09320     03 00 00 FF 
09324     00 E4 85 F1 | 	sub	objptr, ##1536
09328     F2 3E 02 F1 | 	add	local13, objptr
0932c     1F 35 62 FC | 	wrlong	local08, local13
09330     03 00 00 FF 
09334     00 E4 05 F1 | 	add	objptr, ##1536
09338     F2 40 02 FB | 	rdlong	local14, objptr
0933c     20 3F 02 F6 | 	mov	local13, local14
09340     01 3E 66 F0 | 	shl	local13, #1
09344     20 3F 02 F1 | 	add	local13, local14
09348     02 3E 66 F0 | 	shl	local13, #2
0934c     03 00 00 FF 
09350     00 E4 85 F1 | 	sub	objptr, ##1536
09354     F2 3E 02 F1 | 	add	local13, objptr
09358     04 3E 06 F1 | 	add	local13, #4
0935c     1F 33 62 FC | 	wrlong	local07, local13
09360     03 00 00 FF 
09364     00 E4 05 F1 | 	add	objptr, ##1536
09368     F2 3E 02 FB | 	rdlong	local13, objptr
0936c     1F 41 02 F6 | 	mov	local14, local13
09370     01 40 66 F0 | 	shl	local14, #1
09374     1F 41 02 F1 | 	add	local14, local13
09378     02 40 66 F0 | 	shl	local14, #2
0937c     03 00 00 FF 
09380     00 E4 85 F1 | 	sub	objptr, ##1536
09384     F2 40 02 F1 | 	add	local14, objptr
09388     08 40 06 F1 | 	add	local14, #8
0938c     20 39 62 FC | 	wrlong	local10, local14
09390     03 00 00 FF 
09394     00 E4 05 F1 | 	add	objptr, ##1536
09398     F2 34 02 FB | 	rdlong	local08, objptr
0939c     01 34 06 F1 | 	add	local08, #1
093a0     F2 34 62 FC | 	wrlong	local08, objptr
093a4     13 00 00 FF 
093a8     38 E4 85 F1 | 	sub	objptr, ##9784
093ac     F2 34 02 FB | 	rdlong	local08, objptr
093b0     01 34 86 F1 | 	sub	local08, #1
093b4     F2 34 62 FC | 	wrlong	local08, objptr
093b8     37 00 00 FF 
093bc     64 E4 85 F1 | 	sub	objptr, ##28260
093c0                 | LR__0836
093c0     37 00 00 FF 
093c4     64 E4 05 F1 | 	add	objptr, ##28260
093c8     F2 34 02 FB | 	rdlong	local08, objptr
093cc     01 34 06 F1 | 	add	local08, #1
093d0     F2 34 62 FC | 	wrlong	local08, objptr
093d4     37 00 00 FF 
093d8     64 E4 85 F1 | 	sub	objptr, ##28260
093dc                 | LR__0837
093dc     00 2E 06 F6 | 	mov	local05, #0
093e0                 | ' i=0 : err=0
093e0                 | ' if lparts(ct).token<>token_end then
093e0     37 00 00 FF 
093e4     64 E4 05 F1 | 	add	objptr, ##28260
093e8     F2 40 02 FB | 	rdlong	local14, objptr
093ec     03 40 66 F0 | 	shl	local14, #3
093f0     02 00 00 FF 
093f4     38 E4 85 F1 | 	sub	objptr, ##1080
093f8     F2 40 02 F1 | 	add	local14, objptr
093fc     04 40 06 F1 | 	add	local14, #4
09400     20 41 02 FB | 	rdlong	local14, local14
09404     FE 41 0E F2 | 	cmp	local14, #510 wz
09408     35 00 00 FF 
0940c     2C E4 85 F1 | 	sub	objptr, ##27180
09410     98 00 90 AD |  if_e	jmp	#LR__0839
09414                 | '   do
09414                 | LR__0838
09414     58 28 B0 FD | 	call	#_getaddr
09418     FD 42 02 F6 | 	mov	local15, result1
0941c     37 00 00 FF 
09420     64 E4 05 F1 | 	add	objptr, ##28260
09424     F2 40 02 FB | 	rdlong	local14, objptr
09428     01 40 06 F1 | 	add	local14, #1
0942c     F2 40 62 FC | 	wrlong	local14, objptr
09430     01 2E 06 F1 | 	add	local05, #1
09434                 | '     err=getaddr() :ct+=1
09434                 | '     i+=1 
09434                 | '     if lparts(ct).token=token_comma then ct+=1 
09434     03 40 66 F0 | 	shl	local14, #3
09438     02 00 00 FF 
0943c     38 E4 85 F1 | 	sub	objptr, ##1080
09440     F2 40 02 F1 | 	add	local14, objptr
09444     04 40 06 F1 | 	add	local14, #4
09448     20 41 02 FB | 	rdlong	local14, local14
0944c     11 40 0E F2 | 	cmp	local14, #17 wz
09450     35 00 00 FF 
09454     2C E4 85 F1 | 	sub	objptr, ##27180
09458     37 00 00 AF 
0945c     64 E4 05 A1 |  if_e	add	objptr, ##28260
09460     F2 34 02 AB |  if_e	rdlong	local08, objptr
09464     01 34 06 A1 |  if_e	add	local08, #1
09468     F2 34 62 AC |  if_e	wrlong	local08, objptr
0946c     37 00 00 AF 
09470     64 E4 85 A1 |  if_e	sub	objptr, ##28260
09474                 | '     if lparts(ct).token=token_end then exit loop
09474     37 00 00 FF 
09478     64 E4 05 F1 | 	add	objptr, ##28260
0947c     F2 40 02 FB | 	rdlong	local14, objptr
09480     03 40 66 F0 | 	shl	local14, #3
09484     02 00 00 FF 
09488     38 E4 85 F1 | 	sub	objptr, ##1080
0948c     F2 40 02 F1 | 	add	local14, objptr
09490     04 40 06 F1 | 	add	local14, #4
09494     20 41 02 FB | 	rdlong	local14, local14
09498     FE 41 0E F2 | 	cmp	local14, #510 wz
0949c     35 00 00 FF 
094a0     2C E4 85 F1 | 	sub	objptr, ##27180
094a4     08 00 90 AD |  if_e	jmp	#LR__0840
094a8     68 FF 9F FD | 	jmp	#LR__0838
094ac                 | LR__0839
094ac     36 42 06 F6 | 	mov	local15, #54
094b0                 | LR__0840
094b0                 | ' return i,err
094b0     17 FB 01 F6 | 	mov	result1, local05
094b4     21 FD 01 F6 | 	mov	result2, local15
094b8     A7 F0 03 F6 | 	mov	ptra, fp
094bc     B2 00 A0 FD | 	call	#popregs_
094c0                 | _compile_input_ret
094c0     2D 00 64 FD | 	ret
094c4                 | 
094c4                 | ' 
094c4                 | ' '----- compile assign to an array element
094c4                 | ' 
094c4                 | ' function compile_array_assign() as ulong 
094c4                 | _compile_array_assign
094c4     0B 4A 05 F6 | 	mov	COUNT_, #11
094c8     A8 00 A0 FD | 	call	#pushregs_
094cc     00 2C 06 F6 | 	mov	local04, #0
094d0     00 2E 06 F6 | 	mov	local05, #0
094d4     37 00 00 FF 
094d8     64 E4 05 F1 | 	add	objptr, ##28260
094dc     F2 30 02 FB | 	rdlong	local06, objptr
094e0     18 FB 01 F6 | 	mov	result1, local06
094e4     01 FA 85 F1 | 	sub	result1, #1
094e8     03 FA 65 F0 | 	shl	result1, #3
094ec     02 00 00 FF 
094f0     38 E4 85 F1 | 	sub	objptr, ##1080
094f4     F2 FA 01 F1 | 	add	result1, objptr
094f8     FD 32 02 FB | 	rdlong	local07, result1
094fc                 | ' numpar=0 : err=0
094fc                 | ' varname$=lparts(ct-1).part$
094fc                 | ' if lparts(ct).token=token_lpar then
094fc     03 30 66 F0 | 	shl	local06, #3
09500     F2 30 02 F1 | 	add	local06, objptr
09504     04 30 06 F1 | 	add	local06, #4
09508     18 31 02 FB | 	rdlong	local06, local06
0950c     15 30 0E F2 | 	cmp	local06, #21 wz
09510     35 00 00 FF 
09514     2C E4 85 F1 | 	sub	objptr, ##27180
09518     F4 01 90 5D |  if_ne	jmp	#LR__0854
0951c     37 00 00 FF 
09520     64 E4 05 F1 | 	add	objptr, ##28260
09524     F2 34 02 FB | 	rdlong	local08, objptr
09528     01 34 06 F1 | 	add	local08, #1
0952c     F2 34 62 FC | 	wrlong	local08, objptr
09530     37 00 00 FF 
09534     64 E4 85 F1 | 	sub	objptr, ##28260
09538                 | '   ct+=1 											' omit this lpar, this is for expr list
09538                 | '   do
09538                 | LR__0850
09538     C8 2A B0 FD | 	call	#_expr
0953c     37 00 00 FF 
09540     64 E4 05 F1 | 	add	objptr, ##28260
09544     F2 30 02 FB | 	rdlong	local06, objptr
09548     01 30 06 F1 | 	add	local06, #1
0954c     F2 30 62 FC | 	wrlong	local06, objptr
09550     01 2C 06 F1 | 	add	local04, #1
09554     01 30 86 F1 | 	sub	local06, #1
09558     03 30 66 F0 | 	shl	local06, #3
0955c     02 00 00 FF 
09560     38 E4 85 F1 | 	sub	objptr, ##1080
09564     F2 30 02 F1 | 	add	local06, objptr
09568     04 30 06 F1 | 	add	local06, #4
0956c     18 35 02 FB | 	rdlong	local08, local06
09570     14 34 0E F2 | 	cmp	local08, #20 wz
09574     35 00 00 FF 
09578     2C E4 85 F1 | 	sub	objptr, ##27180
0957c     34 00 90 AD |  if_e	jmp	#LR__0851
09580     37 00 00 FF 
09584     64 E4 05 F1 | 	add	objptr, ##28260
09588     F2 34 02 FB | 	rdlong	local08, objptr
0958c     03 34 66 F0 | 	shl	local08, #3
09590     02 00 00 FF 
09594     38 E4 85 F1 | 	sub	objptr, ##1080
09598     F2 34 02 F1 | 	add	local08, objptr
0959c     04 34 06 F1 | 	add	local08, #4
095a0     1A 35 02 FB | 	rdlong	local08, local08
095a4     FE 35 0E F2 | 	cmp	local08, #510 wz
095a8     35 00 00 FF 
095ac     2C E4 85 F1 | 	sub	objptr, ##27180
095b0     84 FF 9F 5D |  if_ne	jmp	#LR__0850
095b4                 | LR__0851
095b4     37 00 00 FF 
095b8     64 E4 05 F1 | 	add	objptr, ##28260
095bc     F2 34 02 FB | 	rdlong	local08, objptr
095c0     01 34 06 F1 | 	add	local08, #1
095c4     F2 34 62 FC | 	wrlong	local08, objptr
095c8     37 00 00 FF 
095cc     64 E4 85 F1 | 	sub	objptr, ##28260
095d0     30 2A B0 FD | 	call	#_expr
095d4     01 36 66 F6 | 	neg	local09, #1
095d8     00 38 06 F6 | 	mov	local10, #0
095dc                 | '   ct+=1 : expr()
095dc                 | '   j=-1 : i=0 
095dc                 | '   do 
095dc                 | LR__0852
095dc                 | '     if variables(i).name=varname$ then j=i: exit loop
095dc     1C 31 02 F6 | 	mov	local06, local10
095e0     04 30 66 F0 | 	shl	local06, #4
095e4     15 00 00 FF 
095e8     18 E4 05 F1 | 	add	objptr, ##10776
095ec     F2 30 02 F1 | 	add	local06, objptr
095f0     18 13 02 FB | 	rdlong	arg01, local06
095f4     19 15 02 F6 | 	mov	arg02, local07
095f8     15 00 00 FF 
095fc     18 E4 85 F1 | 	sub	objptr, ##10776
09600     38 EB B1 FD | 	call	#__system___string_cmp
09604     00 FA 0D F2 | 	cmp	result1, #0 wz
09608     1C 37 02 A6 |  if_e	mov	local09, local10
0960c     20 00 90 AD |  if_e	jmp	#LR__0853
09610     01 38 06 F1 | 	add	local10, #1
09614     35 00 00 FF 
09618     28 E4 05 F1 | 	add	objptr, ##27176
0961c     F2 34 02 FB | 	rdlong	local08, objptr
09620     35 00 00 FF 
09624     28 E4 85 F1 | 	sub	objptr, ##27176
09628     1A 39 5A F2 | 	cmps	local10, local08 wcz
0962c     AC FF 9F ED |  if_be	jmp	#LR__0852
09630                 | LR__0853
09630     1B 27 02 F6 | 	mov	local01, local09
09634     16 29 02 F6 | 	mov	local02, local04
09638     17 2A 06 F6 | 	mov	local03, #23
0963c     13 35 02 F6 | 	mov	local08, local01
09640     14 3B 02 F6 | 	mov	local11, local02
09644     15 33 02 F6 | 	mov	local07, local03
09648     4A 00 00 FF 
0964c     9C E4 05 F1 | 	add	objptr, ##38044
09650     F2 26 02 FB | 	rdlong	local01, objptr
09654     13 37 02 F6 | 	mov	local09, local01
09658     01 36 66 F0 | 	shl	local09, #1
0965c     13 37 02 F1 | 	add	local09, local01
09660     02 36 66 F0 | 	shl	local09, #2
09664     03 00 00 FF 
09668     00 E4 85 F1 | 	sub	objptr, ##1536
0966c     F2 36 02 F1 | 	add	local09, objptr
09670     1B 35 62 FC | 	wrlong	local08, local09
09674     03 00 00 FF 
09678     00 E4 05 F1 | 	add	objptr, ##1536
0967c     F2 26 02 FB | 	rdlong	local01, objptr
09680     13 37 02 F6 | 	mov	local09, local01
09684     01 36 66 F0 | 	shl	local09, #1
09688     13 37 02 F1 | 	add	local09, local01
0968c     02 36 66 F0 | 	shl	local09, #2
09690     03 00 00 FF 
09694     00 E4 85 F1 | 	sub	objptr, ##1536
09698     F2 36 02 F1 | 	add	local09, objptr
0969c     04 36 06 F1 | 	add	local09, #4
096a0     1B 3B 62 FC | 	wrlong	local11, local09
096a4     03 00 00 FF 
096a8     00 E4 05 F1 | 	add	objptr, ##1536
096ac     F2 3A 02 FB | 	rdlong	local11, objptr
096b0     1D 27 02 F6 | 	mov	local01, local11
096b4     01 26 66 F0 | 	shl	local01, #1
096b8     1D 27 02 F1 | 	add	local01, local11
096bc     02 26 66 F0 | 	shl	local01, #2
096c0     03 00 00 FF 
096c4     00 E4 85 F1 | 	sub	objptr, ##1536
096c8     F2 26 02 F1 | 	add	local01, objptr
096cc     08 26 06 F1 | 	add	local01, #8
096d0     13 33 62 FC | 	wrlong	local07, local01
096d4     03 00 00 FF 
096d8     00 E4 05 F1 | 	add	objptr, ##1536
096dc     F2 34 02 FB | 	rdlong	local08, objptr
096e0     01 34 06 F1 | 	add	local08, #1
096e4     F2 34 62 FC | 	wrlong	local08, objptr
096e8                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
096e8                 | '   if numpar>3 then err=45
096e8     04 2C 16 F2 | 	cmp	local04, #4 wc
096ec     2D 2E 06 36 |  if_ae	mov	local05, #45
096f0                 | '   if i>varnum then err=20
096f0     15 00 00 FF 
096f4     74 E4 85 F1 | 	sub	objptr, ##10868
096f8     F2 34 02 FB | 	rdlong	local08, objptr
096fc     35 00 00 FF 
09700     28 E4 85 F1 | 	sub	objptr, ##27176
09704     1A 39 5A F2 | 	cmps	local10, local08 wcz
09708     14 2E 06 16 |  if_a	mov	local05, #20
0970c     04 00 90 FD | 	jmp	#LR__0855
09710                 | LR__0854
09710     0E 2E 06 F6 | 	mov	local05, #14
09714                 | LR__0855
09714                 | ' return err
09714     17 FB 01 F6 | 	mov	result1, local05
09718     A7 F0 03 F6 | 	mov	ptra, fp
0971c     B2 00 A0 FD | 	call	#popregs_
09720                 | _compile_array_assign_ret
09720     2D 00 64 FD | 	ret
09724                 | 
09724                 | ' 
09724                 | ' '----- compile print command with its ";" and "," modifiers
09724                 | ' 
09724                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
09724                 | _compile_print
09724     0B 4A 05 F6 | 	mov	COUNT_, #11
09728     A8 00 A0 FD | 	call	#pushregs_
0972c     00 26 06 F6 | 	mov	local01, #0
09730     1D 2A 06 F6 | 	mov	local03, #29
09734                 | ' t1.result.uresult=0 : t1.result_type=result_uint
09734                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
09734     37 00 00 FF 
09738     64 E4 05 F1 | 	add	objptr, ##28260
0973c     F2 2C 02 FB | 	rdlong	local04, objptr
09740     03 2C 66 F0 | 	shl	local04, #3
09744     02 00 00 FF 
09748     38 E4 85 F1 | 	sub	objptr, ##1080
0974c     F2 2C 02 F1 | 	add	local04, objptr
09750     04 2C 06 F1 | 	add	local04, #4
09754     16 2D 02 FB | 	rdlong	local04, local04
09758     FE 2D 0E F2 | 	cmp	local04, #510 wz
0975c     35 00 00 FF 
09760     2C E4 85 F1 | 	sub	objptr, ##27180
09764     68 01 90 5D |  if_ne	jmp	#LR__0860
09768     20 2A 06 F6 | 	mov	local03, #32
0976c     13 2F 02 F6 | 	mov	local05, local01
09770     14 31 02 F6 | 	mov	local06, local02
09774     15 33 02 F6 | 	mov	local07, local03
09778     4A 00 00 FF 
0977c     9C E4 05 F1 | 	add	objptr, ##38044
09780     F2 34 02 FB | 	rdlong	local08, objptr
09784     1A 37 02 F6 | 	mov	local09, local08
09788     01 36 66 F0 | 	shl	local09, #1
0978c     1A 37 02 F1 | 	add	local09, local08
09790     02 36 66 F0 | 	shl	local09, #2
09794     03 00 00 FF 
09798     00 E4 85 F1 | 	sub	objptr, ##1536
0979c     F2 36 02 F1 | 	add	local09, objptr
097a0     1B 2F 62 FC | 	wrlong	local05, local09
097a4     03 00 00 FF 
097a8     00 E4 05 F1 | 	add	objptr, ##1536
097ac     F2 2E 02 FB | 	rdlong	local05, objptr
097b0     17 39 02 F6 | 	mov	local10, local05
097b4     01 38 66 F0 | 	shl	local10, #1
097b8     17 39 02 F1 | 	add	local10, local05
097bc     02 38 66 F0 | 	shl	local10, #2
097c0     03 00 00 FF 
097c4     00 E4 85 F1 | 	sub	objptr, ##1536
097c8     F2 38 02 F1 | 	add	local10, objptr
097cc     04 38 06 F1 | 	add	local10, #4
097d0     1C 31 62 FC | 	wrlong	local06, local10
097d4     03 00 00 FF 
097d8     00 E4 05 F1 | 	add	objptr, ##1536
097dc     F2 2E 02 FB | 	rdlong	local05, objptr
097e0     17 3B 02 F6 | 	mov	local11, local05
097e4     01 3A 66 F0 | 	shl	local11, #1
097e8     17 3B 02 F1 | 	add	local11, local05
097ec     02 3A 66 F0 | 	shl	local11, #2
097f0     03 00 00 FF 
097f4     00 E4 85 F1 | 	sub	objptr, ##1536
097f8     F2 3A 02 F1 | 	add	local11, objptr
097fc     08 3A 06 F1 | 	add	local11, #8
09800     1D 33 62 FC | 	wrlong	local07, local11
09804     03 00 00 FF 
09808     00 E4 05 F1 | 	add	objptr, ##1536
0980c     F2 2E 02 FB | 	rdlong	local05, objptr
09810     01 2E 06 F1 | 	add	local05, #1
09814     F2 2E 62 FC | 	wrlong	local05, objptr
09818     44 2A 06 F6 | 	mov	local03, #68
0981c     13 2F 02 F6 | 	mov	local05, local01
09820     14 31 02 F6 | 	mov	local06, local02
09824     15 33 02 F6 | 	mov	local07, local03
09828     F2 34 02 FB | 	rdlong	local08, objptr
0982c     1A 37 02 F6 | 	mov	local09, local08
09830     01 36 66 F0 | 	shl	local09, #1
09834     1A 37 02 F1 | 	add	local09, local08
09838     02 36 66 F0 | 	shl	local09, #2
0983c     03 00 00 FF 
09840     00 E4 85 F1 | 	sub	objptr, ##1536
09844     F2 36 02 F1 | 	add	local09, objptr
09848     1B 2F 62 FC | 	wrlong	local05, local09
0984c     03 00 00 FF 
09850     00 E4 05 F1 | 	add	objptr, ##1536
09854     F2 3A 02 FB | 	rdlong	local11, objptr
09858     1D 39 02 F6 | 	mov	local10, local11
0985c     01 38 66 F0 | 	shl	local10, #1
09860     1D 39 02 F1 | 	add	local10, local11
09864     02 38 66 F0 | 	shl	local10, #2
09868     03 00 00 FF 
0986c     00 E4 85 F1 | 	sub	objptr, ##1536
09870     F2 38 02 F1 | 	add	local10, objptr
09874     04 38 06 F1 | 	add	local10, #4
09878     1C 31 62 FC | 	wrlong	local06, local10
0987c     03 00 00 FF 
09880     00 E4 05 F1 | 	add	objptr, ##1536
09884     F2 38 02 FB | 	rdlong	local10, objptr
09888     1C 3B 02 F6 | 	mov	local11, local10
0988c     01 3A 66 F0 | 	shl	local11, #1
09890     1C 3B 02 F1 | 	add	local11, local10
09894     02 3A 66 F0 | 	shl	local11, #2
09898     03 00 00 FF 
0989c     00 E4 85 F1 | 	sub	objptr, ##1536
098a0     F2 3A 02 F1 | 	add	local11, objptr
098a4     08 3A 06 F1 | 	add	local11, #8
098a8     1D 33 62 FC | 	wrlong	local07, local11
098ac     03 00 00 FF 
098b0     00 E4 05 F1 | 	add	objptr, ##1536
098b4     F2 2E 02 FB | 	rdlong	local05, objptr
098b8     01 2E 06 F1 | 	add	local05, #1
098bc     F2 2E 62 FC | 	wrlong	local05, objptr
098c0     4A 00 00 FF 
098c4     9C E4 85 F1 | 	sub	objptr, ##38044
098c8     00 FA 05 F6 | 	mov	result1, #0
098cc     20 05 90 FD | 	jmp	#LR__0867
098d0                 | LR__0860
098d0                 | ' do
098d0                 | LR__0861
098d0     30 27 B0 FD | 	call	#_expr
098d4                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
098d4                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
098d4     37 00 00 FF 
098d8     64 E4 05 F1 | 	add	objptr, ##28260
098dc     F2 2C 02 FB | 	rdlong	local04, objptr
098e0     03 2C 66 F0 | 	shl	local04, #3
098e4     02 00 00 FF 
098e8     38 E4 85 F1 | 	sub	objptr, ##1080
098ec     F2 2C 02 F1 | 	add	local04, objptr
098f0     04 2C 06 F1 | 	add	local04, #4
098f4     16 35 02 FB | 	rdlong	local08, local04
098f8     11 34 0E F2 | 	cmp	local08, #17 wz
098fc     35 00 00 FF 
09900     2C E4 85 F1 | 	sub	objptr, ##27180
09904     60 01 90 5D |  if_ne	jmp	#LR__0862
09908     21 2A 06 F6 | 	mov	local03, #33
0990c     13 2F 02 F6 | 	mov	local05, local01
09910     14 31 02 F6 | 	mov	local06, local02
09914     15 33 02 F6 | 	mov	local07, local03
09918     4A 00 00 FF 
0991c     9C E4 05 F1 | 	add	objptr, ##38044
09920     F2 34 02 FB | 	rdlong	local08, objptr
09924     1A 37 02 F6 | 	mov	local09, local08
09928     01 36 66 F0 | 	shl	local09, #1
0992c     1A 37 02 F1 | 	add	local09, local08
09930     02 36 66 F0 | 	shl	local09, #2
09934     03 00 00 FF 
09938     00 E4 85 F1 | 	sub	objptr, ##1536
0993c     F2 36 02 F1 | 	add	local09, objptr
09940     1B 2F 62 FC | 	wrlong	local05, local09
09944     03 00 00 FF 
09948     00 E4 05 F1 | 	add	objptr, ##1536
0994c     F2 3A 02 FB | 	rdlong	local11, objptr
09950     1D 39 02 F6 | 	mov	local10, local11
09954     01 38 66 F0 | 	shl	local10, #1
09958     1D 39 02 F1 | 	add	local10, local11
0995c     02 38 66 F0 | 	shl	local10, #2
09960     03 00 00 FF 
09964     00 E4 85 F1 | 	sub	objptr, ##1536
09968     F2 38 02 F1 | 	add	local10, objptr
0996c     04 38 06 F1 | 	add	local10, #4
09970     1C 31 62 FC | 	wrlong	local06, local10
09974     03 00 00 FF 
09978     00 E4 05 F1 | 	add	objptr, ##1536
0997c     F2 2E 02 FB | 	rdlong	local05, objptr
09980     17 3B 02 F6 | 	mov	local11, local05
09984     01 3A 66 F0 | 	shl	local11, #1
09988     17 3B 02 F1 | 	add	local11, local05
0998c     02 3A 66 F0 | 	shl	local11, #2
09990     03 00 00 FF 
09994     00 E4 85 F1 | 	sub	objptr, ##1536
09998     F2 3A 02 F1 | 	add	local11, objptr
0999c     08 3A 06 F1 | 	add	local11, #8
099a0     1D 33 62 FC | 	wrlong	local07, local11
099a4     03 00 00 FF 
099a8     00 E4 05 F1 | 	add	objptr, ##1536
099ac     F2 2E 02 FB | 	rdlong	local05, objptr
099b0     01 2E 06 F1 | 	add	local05, #1
099b4     F2 2E 62 FC | 	wrlong	local05, objptr
099b8     44 2A 06 F6 | 	mov	local03, #68
099bc     13 2F 02 F6 | 	mov	local05, local01
099c0     14 31 02 F6 | 	mov	local06, local02
099c4     15 33 02 F6 | 	mov	local07, local03
099c8     F2 34 02 FB | 	rdlong	local08, objptr
099cc     1A 37 02 F6 | 	mov	local09, local08
099d0     01 36 66 F0 | 	shl	local09, #1
099d4     1A 37 02 F1 | 	add	local09, local08
099d8     02 36 66 F0 | 	shl	local09, #2
099dc     03 00 00 FF 
099e0     00 E4 85 F1 | 	sub	objptr, ##1536
099e4     F2 36 02 F1 | 	add	local09, objptr
099e8     1B 2F 62 FC | 	wrlong	local05, local09
099ec     03 00 00 FF 
099f0     00 E4 05 F1 | 	add	objptr, ##1536
099f4     F2 3A 02 FB | 	rdlong	local11, objptr
099f8     1D 39 02 F6 | 	mov	local10, local11
099fc     01 38 66 F0 | 	shl	local10, #1
09a00     1D 39 02 F1 | 	add	local10, local11
09a04     02 38 66 F0 | 	shl	local10, #2
09a08     03 00 00 FF 
09a0c     00 E4 85 F1 | 	sub	objptr, ##1536
09a10     F2 38 02 F1 | 	add	local10, objptr
09a14     04 38 06 F1 | 	add	local10, #4
09a18     1C 31 62 FC | 	wrlong	local06, local10
09a1c     03 00 00 FF 
09a20     00 E4 05 F1 | 	add	objptr, ##1536
09a24     F2 38 02 FB | 	rdlong	local10, objptr
09a28     1C 3B 02 F6 | 	mov	local11, local10
09a2c     01 3A 66 F0 | 	shl	local11, #1
09a30     1C 3B 02 F1 | 	add	local11, local10
09a34     02 3A 66 F0 | 	shl	local11, #2
09a38     03 00 00 FF 
09a3c     00 E4 85 F1 | 	sub	objptr, ##1536
09a40     F2 3A 02 F1 | 	add	local11, objptr
09a44     08 3A 06 F1 | 	add	local11, #8
09a48     1D 33 62 FC | 	wrlong	local07, local11
09a4c     03 00 00 FF 
09a50     00 E4 05 F1 | 	add	objptr, ##1536
09a54     F2 2E 02 FB | 	rdlong	local05, objptr
09a58     01 2E 06 F1 | 	add	local05, #1
09a5c     F2 2E 62 FC | 	wrlong	local05, objptr
09a60     4A 00 00 FF 
09a64     9C E4 85 F1 | 	sub	objptr, ##38044
09a68                 | LR__0862
09a68                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09a68     37 00 00 FF 
09a6c     64 E4 05 F1 | 	add	objptr, ##28260
09a70     F2 2C 02 FB | 	rdlong	local04, objptr
09a74     03 2C 66 F0 | 	shl	local04, #3
09a78     02 00 00 FF 
09a7c     38 E4 85 F1 | 	sub	objptr, ##1080
09a80     F2 2C 02 F1 | 	add	local04, objptr
09a84     04 2C 06 F1 | 	add	local04, #4
09a88     16 35 02 FB | 	rdlong	local08, local04
09a8c     12 34 0E F2 | 	cmp	local08, #18 wz
09a90     35 00 00 FF 
09a94     2C E4 85 F1 | 	sub	objptr, ##27180
09a98     60 01 90 5D |  if_ne	jmp	#LR__0863
09a9c     22 2A 06 F6 | 	mov	local03, #34
09aa0     13 2F 02 F6 | 	mov	local05, local01
09aa4     14 31 02 F6 | 	mov	local06, local02
09aa8     15 33 02 F6 | 	mov	local07, local03
09aac     4A 00 00 FF 
09ab0     9C E4 05 F1 | 	add	objptr, ##38044
09ab4     F2 34 02 FB | 	rdlong	local08, objptr
09ab8     1A 37 02 F6 | 	mov	local09, local08
09abc     01 36 66 F0 | 	shl	local09, #1
09ac0     1A 37 02 F1 | 	add	local09, local08
09ac4     02 36 66 F0 | 	shl	local09, #2
09ac8     03 00 00 FF 
09acc     00 E4 85 F1 | 	sub	objptr, ##1536
09ad0     F2 36 02 F1 | 	add	local09, objptr
09ad4     1B 2F 62 FC | 	wrlong	local05, local09
09ad8     03 00 00 FF 
09adc     00 E4 05 F1 | 	add	objptr, ##1536
09ae0     F2 3A 02 FB | 	rdlong	local11, objptr
09ae4     1D 39 02 F6 | 	mov	local10, local11
09ae8     01 38 66 F0 | 	shl	local10, #1
09aec     1D 39 02 F1 | 	add	local10, local11
09af0     02 38 66 F0 | 	shl	local10, #2
09af4     03 00 00 FF 
09af8     00 E4 85 F1 | 	sub	objptr, ##1536
09afc     F2 38 02 F1 | 	add	local10, objptr
09b00     04 38 06 F1 | 	add	local10, #4
09b04     1C 31 62 FC | 	wrlong	local06, local10
09b08     03 00 00 FF 
09b0c     00 E4 05 F1 | 	add	objptr, ##1536
09b10     F2 2E 02 FB | 	rdlong	local05, objptr
09b14     17 3B 02 F6 | 	mov	local11, local05
09b18     01 3A 66 F0 | 	shl	local11, #1
09b1c     17 3B 02 F1 | 	add	local11, local05
09b20     02 3A 66 F0 | 	shl	local11, #2
09b24     03 00 00 FF 
09b28     00 E4 85 F1 | 	sub	objptr, ##1536
09b2c     F2 3A 02 F1 | 	add	local11, objptr
09b30     08 3A 06 F1 | 	add	local11, #8
09b34     1D 33 62 FC | 	wrlong	local07, local11
09b38     03 00 00 FF 
09b3c     00 E4 05 F1 | 	add	objptr, ##1536
09b40     F2 2E 02 FB | 	rdlong	local05, objptr
09b44     01 2E 06 F1 | 	add	local05, #1
09b48     F2 2E 62 FC | 	wrlong	local05, objptr
09b4c     44 2A 06 F6 | 	mov	local03, #68
09b50     13 2F 02 F6 | 	mov	local05, local01
09b54     14 31 02 F6 | 	mov	local06, local02
09b58     15 33 02 F6 | 	mov	local07, local03
09b5c     F2 34 02 FB | 	rdlong	local08, objptr
09b60     1A 37 02 F6 | 	mov	local09, local08
09b64     01 36 66 F0 | 	shl	local09, #1
09b68     1A 37 02 F1 | 	add	local09, local08
09b6c     02 36 66 F0 | 	shl	local09, #2
09b70     03 00 00 FF 
09b74     00 E4 85 F1 | 	sub	objptr, ##1536
09b78     F2 36 02 F1 | 	add	local09, objptr
09b7c     1B 2F 62 FC | 	wrlong	local05, local09
09b80     03 00 00 FF 
09b84     00 E4 05 F1 | 	add	objptr, ##1536
09b88     F2 3A 02 FB | 	rdlong	local11, objptr
09b8c     1D 39 02 F6 | 	mov	local10, local11
09b90     01 38 66 F0 | 	shl	local10, #1
09b94     1D 39 02 F1 | 	add	local10, local11
09b98     02 38 66 F0 | 	shl	local10, #2
09b9c     03 00 00 FF 
09ba0     00 E4 85 F1 | 	sub	objptr, ##1536
09ba4     F2 38 02 F1 | 	add	local10, objptr
09ba8     04 38 06 F1 | 	add	local10, #4
09bac     1C 31 62 FC | 	wrlong	local06, local10
09bb0     03 00 00 FF 
09bb4     00 E4 05 F1 | 	add	objptr, ##1536
09bb8     F2 38 02 FB | 	rdlong	local10, objptr
09bbc     1C 3B 02 F6 | 	mov	local11, local10
09bc0     01 3A 66 F0 | 	shl	local11, #1
09bc4     1C 3B 02 F1 | 	add	local11, local10
09bc8     02 3A 66 F0 | 	shl	local11, #2
09bcc     03 00 00 FF 
09bd0     00 E4 85 F1 | 	sub	objptr, ##1536
09bd4     F2 3A 02 F1 | 	add	local11, objptr
09bd8     08 3A 06 F1 | 	add	local11, #8
09bdc     1D 33 62 FC | 	wrlong	local07, local11
09be0     03 00 00 FF 
09be4     00 E4 05 F1 | 	add	objptr, ##1536
09be8     F2 2E 02 FB | 	rdlong	local05, objptr
09bec     01 2E 06 F1 | 	add	local05, #1
09bf0     F2 2E 62 FC | 	wrlong	local05, objptr
09bf4     4A 00 00 FF 
09bf8     9C E4 85 F1 | 	sub	objptr, ##38044
09bfc                 | LR__0863
09bfc                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09bfc     37 00 00 FF 
09c00     64 E4 05 F1 | 	add	objptr, ##28260
09c04     F2 2C 02 FB | 	rdlong	local04, objptr
09c08     03 2C 66 F0 | 	shl	local04, #3
09c0c     02 00 00 FF 
09c10     38 E4 85 F1 | 	sub	objptr, ##1080
09c14     F2 2C 02 F1 | 	add	local04, objptr
09c18     04 2C 06 F1 | 	add	local04, #4
09c1c     16 35 02 FB | 	rdlong	local08, local04
09c20     FE 35 0E F2 | 	cmp	local08, #510 wz
09c24     35 00 00 FF 
09c28     2C E4 85 F1 | 	sub	objptr, ##27180
09c2c     B8 00 90 5D |  if_ne	jmp	#LR__0864
09c30     44 2A 06 F6 | 	mov	local03, #68
09c34     13 2F 02 F6 | 	mov	local05, local01
09c38     14 31 02 F6 | 	mov	local06, local02
09c3c     15 33 02 F6 | 	mov	local07, local03
09c40     4A 00 00 FF 
09c44     9C E4 05 F1 | 	add	objptr, ##38044
09c48     F2 34 02 FB | 	rdlong	local08, objptr
09c4c     1A 37 02 F6 | 	mov	local09, local08
09c50     01 36 66 F0 | 	shl	local09, #1
09c54     1A 37 02 F1 | 	add	local09, local08
09c58     02 36 66 F0 | 	shl	local09, #2
09c5c     03 00 00 FF 
09c60     00 E4 85 F1 | 	sub	objptr, ##1536
09c64     F2 36 02 F1 | 	add	local09, objptr
09c68     1B 2F 62 FC | 	wrlong	local05, local09
09c6c     03 00 00 FF 
09c70     00 E4 05 F1 | 	add	objptr, ##1536
09c74     F2 3A 02 FB | 	rdlong	local11, objptr
09c78     1D 39 02 F6 | 	mov	local10, local11
09c7c     01 38 66 F0 | 	shl	local10, #1
09c80     1D 39 02 F1 | 	add	local10, local11
09c84     02 38 66 F0 | 	shl	local10, #2
09c88     03 00 00 FF 
09c8c     00 E4 85 F1 | 	sub	objptr, ##1536
09c90     F2 38 02 F1 | 	add	local10, objptr
09c94     04 38 06 F1 | 	add	local10, #4
09c98     1C 31 62 FC | 	wrlong	local06, local10
09c9c     03 00 00 FF 
09ca0     00 E4 05 F1 | 	add	objptr, ##1536
09ca4     F2 38 02 FB | 	rdlong	local10, objptr
09ca8     1C 3B 02 F6 | 	mov	local11, local10
09cac     01 3A 66 F0 | 	shl	local11, #1
09cb0     1C 3B 02 F1 | 	add	local11, local10
09cb4     02 3A 66 F0 | 	shl	local11, #2
09cb8     03 00 00 FF 
09cbc     00 E4 85 F1 | 	sub	objptr, ##1536
09cc0     F2 3A 02 F1 | 	add	local11, objptr
09cc4     08 3A 06 F1 | 	add	local11, #8
09cc8     1D 33 62 FC | 	wrlong	local07, local11
09ccc     03 00 00 FF 
09cd0     00 E4 05 F1 | 	add	objptr, ##1536
09cd4     F2 2E 02 FB | 	rdlong	local05, objptr
09cd8     01 2E 06 F1 | 	add	local05, #1
09cdc     F2 2E 62 FC | 	wrlong	local05, objptr
09ce0     4A 00 00 FF 
09ce4     9C E4 85 F1 | 	sub	objptr, ##38044
09ce8                 | LR__0864
09ce8                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
09ce8     37 00 00 FF 
09cec     64 E4 05 F1 | 	add	objptr, ##28260
09cf0     F2 2C 02 FB | 	rdlong	local04, objptr
09cf4     03 2C 66 F0 | 	shl	local04, #3
09cf8     02 00 00 FF 
09cfc     38 E4 85 F1 | 	sub	objptr, ##1080
09d00     F2 2C 02 F1 | 	add	local04, objptr
09d04     04 2C 06 F1 | 	add	local04, #4
09d08     16 35 02 FB | 	rdlong	local08, local04
09d0c     11 34 0E F2 | 	cmp	local08, #17 wz
09d10     35 00 00 FF 
09d14     2C E4 85 F1 | 	sub	objptr, ##27180
09d18     6C 00 90 AD |  if_e	jmp	#LR__0865
09d1c     37 00 00 FF 
09d20     64 E4 05 F1 | 	add	objptr, ##28260
09d24     F2 34 02 FB | 	rdlong	local08, objptr
09d28     03 34 66 F0 | 	shl	local08, #3
09d2c     02 00 00 FF 
09d30     38 E4 85 F1 | 	sub	objptr, ##1080
09d34     F2 34 02 F1 | 	add	local08, objptr
09d38     04 34 06 F1 | 	add	local08, #4
09d3c     1A 35 02 FB | 	rdlong	local08, local08
09d40     12 34 0E F2 | 	cmp	local08, #18 wz
09d44     35 00 00 FF 
09d48     2C E4 85 F1 | 	sub	objptr, ##27180
09d4c     38 00 90 AD |  if_e	jmp	#LR__0865
09d50     37 00 00 FF 
09d54     64 E4 05 F1 | 	add	objptr, ##28260
09d58     F2 3A 02 FB | 	rdlong	local11, objptr
09d5c     03 3A 66 F0 | 	shl	local11, #3
09d60     02 00 00 FF 
09d64     38 E4 85 F1 | 	sub	objptr, ##1080
09d68     F2 3A 02 F1 | 	add	local11, objptr
09d6c     04 3A 06 F1 | 	add	local11, #4
09d70     1D 3B 02 FB | 	rdlong	local11, local11
09d74     FE 3B 0E F2 | 	cmp	local11, #510 wz
09d78     35 00 00 FF 
09d7c     2C E4 85 F1 | 	sub	objptr, ##27180
09d80     16 FA 05 56 |  if_ne	mov	result1, #22
09d84     68 00 90 5D |  if_ne	jmp	#LR__0867
09d88                 | LR__0865
09d88     37 00 00 FF 
09d8c     64 E4 05 F1 | 	add	objptr, ##28260
09d90     F2 2C 02 FB | 	rdlong	local04, objptr
09d94     01 2C 06 F1 | 	add	local04, #1
09d98     F2 2C 62 FC | 	wrlong	local04, objptr
09d9c     03 2C 66 F0 | 	shl	local04, #3
09da0     02 00 00 FF 
09da4     38 E4 85 F1 | 	sub	objptr, ##1080
09da8     F2 2C 02 F1 | 	add	local04, objptr
09dac     04 2C 06 F1 | 	add	local04, #4
09db0     16 35 02 FB | 	rdlong	local08, local04
09db4     FE 35 0E F2 | 	cmp	local08, #510 wz
09db8     35 00 00 FF 
09dbc     2C E4 85 F1 | 	sub	objptr, ##27180
09dc0     28 00 90 AD |  if_e	jmp	#LR__0866
09dc4     37 00 00 FF 
09dc8     64 E4 05 F1 | 	add	objptr, ##28260
09dcc     F2 3A 02 FB | 	rdlong	local11, objptr
09dd0     0E 00 00 FF 
09dd4     1C E4 05 F1 | 	add	objptr, ##7196
09dd8     F2 38 02 FB | 	rdlong	local10, objptr
09ddc     45 00 00 FF 
09de0     80 E4 85 F1 | 	sub	objptr, ##35456
09de4     1C 3B 52 F2 | 	cmps	local11, local10 wc
09de8     E4 FA 9F CD |  if_b	jmp	#LR__0861
09dec                 | LR__0866
09dec                 | ' return 0
09dec     00 FA 05 F6 | 	mov	result1, #0
09df0                 | LR__0867
09df0     A7 F0 03 F6 | 	mov	ptra, fp
09df4     B2 00 A0 FD | 	call	#popregs_
09df8                 | _compile_print_ret
09df8     2D 00 64 FD | 	ret
09dfc                 | 
09dfc                 | ' 
09dfc                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09dfc                 | ' 
09dfc                 | ' function compile_if(aline as ulong) as ulong  
09dfc                 | _compile_if
09dfc     09 4A 05 F6 | 	mov	COUNT_, #9
09e00     A8 00 A0 FD | 	call	#pushregs_
09e04                 | _compile_if_enter
09e04     09 2D 02 F6 | 	mov	local04, arg01
09e08                 | ' return expr()
09e08     F8 21 B0 FD | 	call	#_expr
09e0c     37 00 00 FF 
09e10     64 E4 05 F1 | 	add	objptr, ##28260
09e14     F2 14 02 FB | 	rdlong	arg02, objptr
09e18     0A 2F 02 F6 | 	mov	local05, arg02
09e1c     03 2E 66 F0 | 	shl	local05, #3
09e20     02 00 00 FF 
09e24     38 E4 85 F1 | 	sub	objptr, ##1080
09e28     F2 2E 02 F1 | 	add	local05, objptr
09e2c     04 2E 06 F1 | 	add	local05, #4
09e30     17 2F 02 FB | 	rdlong	local05, local05
09e34     01 14 06 F1 | 	add	arg02, #1
09e38     02 00 00 FF 
09e3c     38 E4 05 F1 | 	add	objptr, ##1080
09e40     F2 14 62 FC | 	wrlong	arg02, objptr
09e44     37 00 00 FF 
09e48     64 E4 85 F1 | 	sub	objptr, ##28260
09e4c                 | ' 
09e4c                 | ' err=compile_fun_1p()
09e4c                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09e4c     5B 2E 0E F2 | 	cmp	local05, #91 wz
09e50     34 FA 05 56 |  if_ne	mov	result1, #52
09e54     20 01 90 5D |  if_ne	jmp	#LR__0872
09e58     58 2A 06 F6 | 	mov	local03, #88
09e5c     13 31 02 F6 | 	mov	local06, local01
09e60     14 33 02 F6 | 	mov	local07, local02
09e64     15 15 02 F6 | 	mov	arg02, local03
09e68     4A 00 00 FF 
09e6c     9C E4 05 F1 | 	add	objptr, ##38044
09e70     F2 12 02 FB | 	rdlong	arg01, objptr
09e74     09 35 02 F6 | 	mov	local08, arg01
09e78     01 34 66 F0 | 	shl	local08, #1
09e7c     09 35 02 F1 | 	add	local08, arg01
09e80     02 34 66 F0 | 	shl	local08, #2
09e84     03 00 00 FF 
09e88     00 E4 85 F1 | 	sub	objptr, ##1536
09e8c     F2 34 02 F1 | 	add	local08, objptr
09e90     1A 31 62 FC | 	wrlong	local06, local08
09e94     03 00 00 FF 
09e98     00 E4 05 F1 | 	add	objptr, ##1536
09e9c     F2 30 02 FB | 	rdlong	local06, objptr
09ea0     18 13 02 F6 | 	mov	arg01, local06
09ea4     01 12 66 F0 | 	shl	arg01, #1
09ea8     18 13 02 F1 | 	add	arg01, local06
09eac     02 12 66 F0 | 	shl	arg01, #2
09eb0     03 00 00 FF 
09eb4     00 E4 85 F1 | 	sub	objptr, ##1536
09eb8     F2 12 02 F1 | 	add	arg01, objptr
09ebc     04 12 06 F1 | 	add	arg01, #4
09ec0     09 33 62 FC | 	wrlong	local07, arg01
09ec4     03 00 00 FF 
09ec8     00 E4 05 F1 | 	add	objptr, ##1536
09ecc     F2 30 02 FB | 	rdlong	local06, objptr
09ed0     18 13 02 F6 | 	mov	arg01, local06
09ed4     01 12 66 F0 | 	shl	arg01, #1
09ed8     18 13 02 F1 | 	add	arg01, local06
09edc     02 12 66 F0 | 	shl	arg01, #2
09ee0     03 00 00 FF 
09ee4     00 E4 85 F1 | 	sub	objptr, ##1536
09ee8     F2 12 02 F1 | 	add	arg01, objptr
09eec     08 12 06 F1 | 	add	arg01, #8
09ef0     09 15 62 FC | 	wrlong	arg02, arg01
09ef4     03 00 00 FF 
09ef8     00 E4 05 F1 | 	add	objptr, ##1536
09efc     F2 30 02 FB | 	rdlong	local06, objptr
09f00     01 30 06 F1 | 	add	local06, #1
09f04     F2 30 62 FC | 	wrlong	local06, objptr
09f08                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
09f08                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09f08     13 00 00 FF 
09f0c     38 E4 85 F1 | 	sub	objptr, ##9784
09f10     F2 14 02 FB | 	rdlong	arg02, objptr
09f14     01 14 06 F1 | 	add	arg02, #1
09f18     03 14 66 F0 | 	shl	arg02, #3
09f1c     02 00 00 FF 
09f20     38 E4 85 F1 | 	sub	objptr, ##1080
09f24     F2 14 02 F1 | 	add	arg02, objptr
09f28     0A 13 02 FB | 	rdlong	arg01, arg02
09f2c     35 00 00 FF 
09f30     2C E4 85 F1 | 	sub	objptr, ##27180
09f34                 | ' 
09f34                 | ' select case s
09f34     BF 01 00 FF 
09f38     6E 14 06 F6 | 	mov	arg02, ##@LR__5689
09f3c     FC E1 B1 FD | 	call	#__system___string_cmp
09f40     00 FA 0D F2 | 	cmp	result1, #0 wz
09f44     1B FA 05 A6 |  if_e	mov	result1, #27
09f48     00 FA 05 56 |  if_ne	mov	result1, #0
09f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
09f50     10 00 90 AD |  if_e	jmp	#LR__0870
09f54     05 12 06 F6 | 	mov	arg01, #5
09f58     38 E4 BF FD | 	call	#_compile_immediate_assign
09f5c     FD 36 02 F6 | 	mov	local09, result1
09f60     10 00 90 FD | 	jmp	#LR__0871
09f64                 | LR__0870
09f64     05 12 06 F6 | 	mov	arg01, #5
09f68     16 15 02 F6 | 	mov	arg02, local04
09f6c     38 DA BF FD | 	call	#_compile_immediate
09f70     FD 36 02 F6 | 	mov	local09, result1
09f74                 | LR__0871
09f74                 | ' return err
09f74     1B FB 01 F6 | 	mov	result1, local09
09f78                 | LR__0872
09f78     A7 F0 03 F6 | 	mov	ptra, fp
09f7c     B2 00 A0 FD | 	call	#popregs_
09f80                 | _compile_if_ret
09f80     2D 00 64 FD | 	ret
09f84                 | 
09f84                 | ' 
09f84                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09f84                 | ' 
09f84                 | ' function compile_else(aline as ulong) as ulong  
09f84                 | _compile_else
09f84     07 4A 05 F6 | 	mov	COUNT_, #7
09f88     A8 00 A0 FD | 	call	#pushregs_
09f8c                 | _compile_else_enter
09f8c     09 2D 02 F6 | 	mov	local04, arg01
09f90     5A 2A 06 F6 | 	mov	local03, #90
09f94     13 2F 02 F6 | 	mov	local05, local01
09f98     14 31 02 F6 | 	mov	local06, local02
09f9c     15 27 02 F6 | 	mov	local01, local03
09fa0     4A 00 00 FF 
09fa4     9C E4 05 F1 | 	add	objptr, ##38044
09fa8     F2 14 02 FB | 	rdlong	arg02, objptr
09fac     0A 13 02 F6 | 	mov	arg01, arg02
09fb0     01 12 66 F0 | 	shl	arg01, #1
09fb4     0A 13 02 F1 | 	add	arg01, arg02
09fb8     02 12 66 F0 | 	shl	arg01, #2
09fbc     03 00 00 FF 
09fc0     00 E4 85 F1 | 	sub	objptr, ##1536
09fc4     F2 12 02 F1 | 	add	arg01, objptr
09fc8     09 2F 62 FC | 	wrlong	local05, arg01
09fcc     03 00 00 FF 
09fd0     00 E4 05 F1 | 	add	objptr, ##1536
09fd4     F2 2E 02 FB | 	rdlong	local05, objptr
09fd8     17 15 02 F6 | 	mov	arg02, local05
09fdc     01 14 66 F0 | 	shl	arg02, #1
09fe0     17 15 02 F1 | 	add	arg02, local05
09fe4     02 14 66 F0 | 	shl	arg02, #2
09fe8     03 00 00 FF 
09fec     00 E4 85 F1 | 	sub	objptr, ##1536
09ff0     F2 14 02 F1 | 	add	arg02, objptr
09ff4     04 14 06 F1 | 	add	arg02, #4
09ff8     0A 31 62 FC | 	wrlong	local06, arg02
09ffc     03 00 00 FF 
0a000     00 E4 05 F1 | 	add	objptr, ##1536
0a004     F2 30 02 FB | 	rdlong	local06, objptr
0a008     18 2F 02 F6 | 	mov	local05, local06
0a00c     01 2E 66 F0 | 	shl	local05, #1
0a010     18 2F 02 F1 | 	add	local05, local06
0a014     02 2E 66 F0 | 	shl	local05, #2
0a018     03 00 00 FF 
0a01c     00 E4 85 F1 | 	sub	objptr, ##1536
0a020     F2 2E 02 F1 | 	add	local05, objptr
0a024     08 2E 06 F1 | 	add	local05, #8
0a028     17 27 62 FC | 	wrlong	local01, local05
0a02c     03 00 00 FF 
0a030     00 E4 05 F1 | 	add	objptr, ##1536
0a034     F2 2E 02 FB | 	rdlong	local05, objptr
0a038     01 2E 06 F1 | 	add	local05, #1
0a03c     F2 2E 62 FC | 	wrlong	local05, objptr
0a040                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
0a040                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
0a040     13 00 00 FF 
0a044     38 E4 85 F1 | 	sub	objptr, ##9784
0a048     F2 30 02 FB | 	rdlong	local06, objptr
0a04c     01 30 06 F1 | 	add	local06, #1
0a050     03 30 66 F0 | 	shl	local06, #3
0a054     02 00 00 FF 
0a058     38 E4 85 F1 | 	sub	objptr, ##1080
0a05c     F2 30 02 F1 | 	add	local06, objptr
0a060     18 13 02 FB | 	rdlong	arg01, local06
0a064     35 00 00 FF 
0a068     2C E4 85 F1 | 	sub	objptr, ##27180
0a06c                 | ' 
0a06c                 | ' select case s
0a06c     BF 01 00 FF 
0a070     6E 14 06 F6 | 	mov	arg02, ##@LR__5689
0a074     C4 E0 B1 FD | 	call	#__system___string_cmp
0a078     00 FA 0D F2 | 	cmp	result1, #0 wz
0a07c     1B FA 05 A6 |  if_e	mov	result1, #27
0a080     00 FA 05 56 |  if_ne	mov	result1, #0
0a084     00 FA 0D F2 | 	cmp	result1, #0 wz
0a088     10 00 90 AD |  if_e	jmp	#LR__0880
0a08c     05 12 06 F6 | 	mov	arg01, #5
0a090     00 E3 BF FD | 	call	#_compile_immediate_assign
0a094     FD 32 02 F6 | 	mov	local07, result1
0a098     10 00 90 FD | 	jmp	#LR__0881
0a09c                 | LR__0880
0a09c     05 12 06 F6 | 	mov	arg01, #5
0a0a0     16 15 02 F6 | 	mov	arg02, local04
0a0a4     00 D9 BF FD | 	call	#_compile_immediate
0a0a8     FD 32 02 F6 | 	mov	local07, result1
0a0ac                 | LR__0881
0a0ac                 | ' return err
0a0ac     19 FB 01 F6 | 	mov	result1, local07
0a0b0     A7 F0 03 F6 | 	mov	ptra, fp
0a0b4     B2 00 A0 FD | 	call	#popregs_
0a0b8                 | _compile_else_ret
0a0b8     2D 00 64 FD | 	ret
0a0bc                 | 
0a0bc                 | ' 
0a0bc                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
0a0bc                 | ' 
0a0bc                 | ' function compile_dim() as ulong  
0a0bc                 | _compile_dim
0a0bc     11 4A 05 F6 | 	mov	COUNT_, #17
0a0c0     A8 00 A0 FD | 	call	#pushregs_
0a0c4     01 26 06 F6 | 	mov	local01, #1
0a0c8     01 28 06 F6 | 	mov	local02, #1
0a0cc     01 2A 06 F6 | 	mov	local03, #1
0a0d0                 | ' 
0a0d0                 | ' dims(0)=1: dims(1)=1: dims(2)=1
0a0d0                 | ' if isname(lparts(ct).part$) then 
0a0d0     37 00 00 FF 
0a0d4     64 E4 05 F1 | 	add	objptr, ##28260
0a0d8     F2 18 02 FB | 	rdlong	arg04, objptr
0a0dc     03 18 66 F0 | 	shl	arg04, #3
0a0e0     02 00 00 FF 
0a0e4     38 E4 85 F1 | 	sub	objptr, ##1080
0a0e8     F2 18 02 F1 | 	add	arg04, objptr
0a0ec     0C 13 02 FB | 	rdlong	arg01, arg04
0a0f0     35 00 00 FF 
0a0f4     2C E4 85 F1 | 	sub	objptr, ##27180
0a0f8     04 C7 BF FD | 	call	#_isname
0a0fc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a100     78 05 90 AD |  if_e	jmp	#LR__0913
0a104     37 00 00 FF 
0a108     64 E4 05 F1 | 	add	objptr, ##28260
0a10c     F2 2C 02 FB | 	rdlong	local04, objptr
0a110     03 2C 66 F0 | 	shl	local04, #3
0a114     02 00 00 FF 
0a118     38 E4 85 F1 | 	sub	objptr, ##1080
0a11c     F2 2C 02 F1 | 	add	local04, objptr
0a120     16 2F 02 FB | 	rdlong	local05, local04
0a124     01 30 66 F6 | 	neg	local06, #1
0a128                 | '   varname2$=lparts(ct).part$ 
0a128                 | '   j=-1
0a128                 | '   if varnum>0 then
0a128     04 E4 85 F1 | 	sub	objptr, #4
0a12c     F2 32 02 FB | 	rdlong	local07, objptr
0a130     35 00 00 FF 
0a134     28 E4 85 F1 | 	sub	objptr, ##27176
0a138     01 32 56 F2 | 	cmps	local07, #1 wc
0a13c     58 00 90 CD |  if_b	jmp	#LR__0892
0a140                 | '     for i=0 to varnum-1
0a140     00 34 06 F6 | 	mov	local08, #0
0a144     35 00 00 FF 
0a148     28 E4 05 F1 | 	add	objptr, ##27176
0a14c     F2 36 02 FB | 	rdlong	local09, objptr
0a150     35 00 00 FF 
0a154     28 E4 85 F1 | 	sub	objptr, ##27176
0a158                 | LR__0890
0a158     1B 35 52 F2 | 	cmps	local08, local09 wc
0a15c     38 00 90 3D |  if_ae	jmp	#LR__0891
0a160                 | '       if variables(i).name=varname2$ then j=i : exit
0a160     1A 2D 02 F6 | 	mov	local04, local08
0a164     04 2C 66 F0 | 	shl	local04, #4
0a168     15 00 00 FF 
0a16c     18 E4 05 F1 | 	add	objptr, ##10776
0a170     F2 2C 02 F1 | 	add	local04, objptr
0a174     16 13 02 FB | 	rdlong	arg01, local04
0a178     17 15 02 F6 | 	mov	arg02, local05
0a17c     15 00 00 FF 
0a180     18 E4 85 F1 | 	sub	objptr, ##10776
0a184     B4 DF B1 FD | 	call	#__system___string_cmp
0a188     00 FA 0D F2 | 	cmp	result1, #0 wz
0a18c     1A 31 02 A6 |  if_e	mov	local06, local08
0a190     01 34 06 51 |  if_ne	add	local08, #1
0a194     C0 FF 9F 5D |  if_ne	jmp	#LR__0890
0a198                 | LR__0891
0a198                 | LR__0892
0a198                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
0a198     FF FF 7F FF 
0a19c     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0a1a0     35 00 00 AF 
0a1a4     28 E4 05 A1 |  if_e	add	objptr, ##27176
0a1a8     F2 30 02 AB |  if_e	rdlong	local06, objptr
0a1ac     35 00 00 AF 
0a1b0     28 E4 85 A1 |  if_e	sub	objptr, ##27176
0a1b4     78 00 90 AD |  if_e	jmp	#LR__0893
0a1b8     00 12 06 F6 | 	mov	arg01, #0
0a1bc     04 3C B2 FD | 	call	#__system___getiolock_0620
0a1c0     FD 12 02 F6 | 	mov	arg01, result1
0a1c4     4C DF B1 FD | 	call	#__system___lockmem
0a1c8     C1 01 00 FF 
0a1cc     5F 15 06 F6 | 	mov	arg02, ##@LR__5957
0a1d0     00 12 06 F6 | 	mov	arg01, #0
0a1d4     00 16 06 F6 | 	mov	arg03, #0
0a1d8     30 EC B1 FD | 	call	#__system___basic_print_string
0a1dc     52 00 00 FF 
0a1e0     08 E5 05 F1 | 	add	objptr, ##42248
0a1e4     F2 14 02 FB | 	rdlong	arg02, objptr
0a1e8     52 00 00 FF 
0a1ec     08 E5 85 F1 | 	sub	objptr, ##42248
0a1f0     00 12 06 F6 | 	mov	arg01, #0
0a1f4     00 16 06 F6 | 	mov	arg03, #0
0a1f8     0A 18 06 F6 | 	mov	arg04, #10
0a1fc     90 EC B1 FD | 	call	#__system___basic_print_unsigned
0a200     C1 01 00 FF 
0a204     6D 15 06 F6 | 	mov	arg02, ##@LR__5958
0a208     00 12 06 F6 | 	mov	arg01, #0
0a20c     00 16 06 F6 | 	mov	arg03, #0
0a210     F8 EB B1 FD | 	call	#__system___basic_print_string
0a214     00 12 06 F6 | 	mov	arg01, #0
0a218     0A 14 06 F6 | 	mov	arg02, #10
0a21c     00 16 06 F6 | 	mov	arg03, #0
0a220     90 EB B1 FD | 	call	#__system___basic_print_char
0a224     00 12 06 F6 | 	mov	arg01, #0
0a228     98 3B B2 FD | 	call	#__system___getiolock_0620
0a22c     FD 00 68 FC | 	wrlong	#0, result1
0a230                 | LR__0893
0a230                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
0a230     37 00 00 FF 
0a234     64 E4 05 F1 | 	add	objptr, ##28260
0a238     F2 14 02 FB | 	rdlong	arg02, objptr
0a23c     01 14 06 F1 | 	add	arg02, #1
0a240     03 14 66 F0 | 	shl	arg02, #3
0a244     02 00 00 FF 
0a248     38 E4 85 F1 | 	sub	objptr, ##1080
0a24c     F2 14 02 F1 | 	add	arg02, objptr
0a250     0A 13 02 FB | 	rdlong	arg01, arg02
0a254     C1 01 00 FF 
0a258     8E 15 06 F6 | 	mov	arg02, ##@LR__5959
0a25c     35 00 00 FF 
0a260     2C E4 85 F1 | 	sub	objptr, ##27180
0a264     D4 DE B1 FD | 	call	#__system___string_cmp
0a268     00 FA 0D F2 | 	cmp	result1, #0 wz
0a26c     44 00 90 AD |  if_e	jmp	#LR__0894
0a270     37 00 00 FF 
0a274     64 E4 05 F1 | 	add	objptr, ##28260
0a278     F2 36 02 FB | 	rdlong	local09, objptr
0a27c     01 36 06 F1 | 	add	local09, #1
0a280     03 36 66 F0 | 	shl	local09, #3
0a284     02 00 00 FF 
0a288     38 E4 85 F1 | 	sub	objptr, ##1080
0a28c     F2 36 02 F1 | 	add	local09, objptr
0a290     1B 13 02 FB | 	rdlong	arg01, local09
0a294     C1 01 00 FF 
0a298     90 15 06 F6 | 	mov	arg02, ##@LR__5960
0a29c     35 00 00 FF 
0a2a0     2C E4 85 F1 | 	sub	objptr, ##27180
0a2a4     94 DE B1 FD | 	call	#__system___string_cmp
0a2a8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2ac     2B FA 05 56 |  if_ne	mov	result1, #43
0a2b0     D0 04 90 5D |  if_ne	jmp	#LR__0915
0a2b4                 | LR__0894
0a2b4                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
0a2b4     37 00 00 FF 
0a2b8     64 E4 05 F1 | 	add	objptr, ##28260
0a2bc     F2 14 02 FB | 	rdlong	arg02, objptr
0a2c0     01 14 06 F1 | 	add	arg02, #1
0a2c4     03 14 66 F0 | 	shl	arg02, #3
0a2c8     02 00 00 FF 
0a2cc     38 E4 85 F1 | 	sub	objptr, ##1080
0a2d0     F2 14 02 F1 | 	add	arg02, objptr
0a2d4     0A 13 02 FB | 	rdlong	arg01, arg02
0a2d8     C1 01 00 FF 
0a2dc     93 15 06 F6 | 	mov	arg02, ##@LR__5961
0a2e0     35 00 00 FF 
0a2e4     2C E4 85 F1 | 	sub	objptr, ##27180
0a2e8     50 DE B1 FD | 	call	#__system___string_cmp
0a2ec     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2f0     37 00 00 AF 
0a2f4     64 E4 05 A1 |  if_e	add	objptr, ##28260
0a2f8     F2 38 02 AB |  if_e	rdlong	local10, objptr
0a2fc     37 00 00 AF 
0a300     64 E4 85 A1 |  if_e	sub	objptr, ##28260
0a304     01 38 06 A1 |  if_e	add	local10, #1
0a308     5C 01 90 AD |  if_e	jmp	#LR__0899
0a30c     37 00 00 FF 
0a310     64 E4 05 F1 | 	add	objptr, ##28260
0a314     F2 38 02 FB | 	rdlong	local10, objptr
0a318     37 00 00 FF 
0a31c     64 E4 85 F1 | 	sub	objptr, ##28260
0a320     02 38 06 F1 | 	add	local10, #2
0a324     00 3A 06 F6 | 	mov	local11, #0
0a328                 | '   l=ct+2 : m=0 : do
0a328                 | LR__0895
0a328                 | '   if isdec(lparts(l).part$) then 
0a328     1C 2D 02 F6 | 	mov	local04, local10
0a32c     03 2C 66 F0 | 	shl	local04, #3
0a330     35 00 00 FF 
0a334     2C E4 05 F1 | 	add	objptr, ##27180
0a338     F2 2C 02 F1 | 	add	local04, objptr
0a33c     16 13 02 FB | 	rdlong	arg01, local04
0a340     35 00 00 FF 
0a344     2C E4 85 F1 | 	sub	objptr, ##27180
0a348     B8 CD BF FD | 	call	#_isdec
0a34c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a350     44 00 90 AD |  if_e	jmp	#LR__0896
0a354     1D 3D 02 F6 | 	mov	local12, local11
0a358     13 3D 06 F1 | 	add	local12, #local01
0a35c     1C 37 02 F6 | 	mov	local09, local10
0a360     03 36 66 F0 | 	shl	local09, #3
0a364     35 00 00 FF 
0a368     2C E4 05 F1 | 	add	objptr, ##27180
0a36c     F2 36 02 F1 | 	add	local09, objptr
0a370     1B 13 02 FB | 	rdlong	arg01, local09
0a374     00 14 06 F6 | 	mov	arg02, #0
0a378     35 00 00 FF 
0a37c     2C E4 85 F1 | 	sub	objptr, ##27180
0a380     84 12 B2 FD | 	call	#__system____builtin_atoi
0a384     FD 3E 02 F6 | 	mov	local13, result1
0a388                 | 	'.live	local13
0a388                 | 	'.live	local12
0a388     00 3C 8E F9 | 	altd	local12, #0
0a38c     1F 3D 02 F6 | 	mov	local12, local13
0a390     01 3A 06 F1 | 	add	local11, #1
0a394     08 00 90 FD | 	jmp	#LR__0897
0a398                 | LR__0896
0a398                 | '     return(17)
0a398     11 FA 05 F6 | 	mov	result1, #17
0a39c     E4 03 90 FD | 	jmp	#LR__0915
0a3a0                 | LR__0897
0a3a0                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
0a3a0     1C 2D 02 F6 | 	mov	local04, local10
0a3a4     01 2C 06 F1 | 	add	local04, #1
0a3a8     03 2C 66 F0 | 	shl	local04, #3
0a3ac     35 00 00 FF 
0a3b0     2C E4 05 F1 | 	add	objptr, ##27180
0a3b4     F2 2C 02 F1 | 	add	local04, objptr
0a3b8     16 13 02 FB | 	rdlong	arg01, local04
0a3bc     C1 01 00 FF 
0a3c0     96 15 06 F6 | 	mov	arg02, ##@LR__5962
0a3c4     35 00 00 FF 
0a3c8     2C E4 85 F1 | 	sub	objptr, ##27180
0a3cc     6C DD B1 FD | 	call	#__system___string_cmp
0a3d0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3d4     3C 00 90 AD |  if_e	jmp	#LR__0898
0a3d8     1C 3F 02 F6 | 	mov	local13, local10
0a3dc     01 3E 06 F1 | 	add	local13, #1
0a3e0     03 3E 66 F0 | 	shl	local13, #3
0a3e4     35 00 00 FF 
0a3e8     2C E4 05 F1 | 	add	objptr, ##27180
0a3ec     F2 3E 02 F1 | 	add	local13, objptr
0a3f0     1F 13 02 FB | 	rdlong	arg01, local13
0a3f4     C1 01 00 FF 
0a3f8     98 15 06 F6 | 	mov	arg02, ##@LR__5963
0a3fc     35 00 00 FF 
0a400     2C E4 85 F1 | 	sub	objptr, ##27180
0a404     34 DD B1 FD | 	call	#__system___string_cmp
0a408     00 FA 0D F2 | 	cmp	result1, #0 wz
0a40c     2C FA 05 56 |  if_ne	mov	result1, #44
0a410     70 03 90 5D |  if_ne	jmp	#LR__0915
0a414                 | LR__0898
0a414     02 38 06 F1 | 	add	local10, #2
0a418     1C 2D 02 F6 | 	mov	local04, local10
0a41c     01 2C 86 F1 | 	sub	local04, #1
0a420     03 2C 66 F0 | 	shl	local04, #3
0a424     35 00 00 FF 
0a428     2C E4 05 F1 | 	add	objptr, ##27180
0a42c     F2 2C 02 F1 | 	add	local04, objptr
0a430     16 13 02 FB | 	rdlong	arg01, local04
0a434     C1 01 00 FF 
0a438     9A 15 06 F6 | 	mov	arg02, ##@LR__5964
0a43c     35 00 00 FF 
0a440     2C E4 85 F1 | 	sub	objptr, ##27180
0a444     F4 DC B1 FD | 	call	#__system___string_cmp
0a448     00 FA 0D F2 | 	cmp	result1, #0 wz
0a44c     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
0a450     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0895
0a454                 | '   if m>3 then return 45
0a454     04 3A 56 F2 | 	cmps	local11, #4 wc
0a458     2D FA 05 36 |  if_ae	mov	result1, #45
0a45c     24 03 90 3D |  if_ae	jmp	#LR__0915
0a460     00 41 06 F6 | 	mov	local14, #256
0a464     0C 42 06 F6 | 	mov	local15, #12
0a468                 | LR__0899
0a468                 | '   arraytype=array_no_type : esize=12
0a468                 | ' 1350 
0a468                 | '   if lparts(l).part$="as" then
0a468     1C 2D 02 F6 | 	mov	local04, local10
0a46c     03 2C 66 F0 | 	shl	local04, #3
0a470     35 00 00 FF 
0a474     2C E4 05 F1 | 	add	objptr, ##27180
0a478     F2 2C 02 F1 | 	add	local04, objptr
0a47c     16 13 02 FB | 	rdlong	arg01, local04
0a480     C1 01 00 FF 
0a484     9C 15 06 F6 | 	mov	arg02, ##@LR__5965
0a488     35 00 00 FF 
0a48c     2C E4 85 F1 | 	sub	objptr, ##27180
0a490     A8 DC B1 FD | 	call	#__system___string_cmp
0a494     00 FA 0D F2 | 	cmp	result1, #0 wz
0a498     E8 01 90 5D |  if_ne	jmp	#LR__0914
0a49c                 | '     select case lparts(l+1).part$
0a49c     1C 3D 02 F6 | 	mov	local12, local10
0a4a0     01 3C 06 F1 | 	add	local12, #1
0a4a4     03 3C 66 F0 | 	shl	local12, #3
0a4a8     35 00 00 FF 
0a4ac     2C E4 05 F1 | 	add	objptr, ##27180
0a4b0     F2 3C 02 F1 | 	add	local12, objptr
0a4b4     1E 45 02 FB | 	rdlong	local16, local12
0a4b8     C1 01 00 FF 
0a4bc     9F 15 06 F6 | 	mov	arg02, ##@LR__5966
0a4c0     22 13 02 F6 | 	mov	arg01, local16
0a4c4     35 00 00 FF 
0a4c8     2C E4 85 F1 | 	sub	objptr, ##27180
0a4cc     6C DC B1 FD | 	call	#__system___string_cmp
0a4d0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a4d4     0C 01 90 AD |  if_e	jmp	#LR__0900
0a4d8     C1 01 00 FF 
0a4dc     A4 15 06 F6 | 	mov	arg02, ##@LR__5967
0a4e0     22 13 02 F6 | 	mov	arg01, local16
0a4e4     54 DC B1 FD | 	call	#__system___string_cmp
0a4e8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a4ec     00 01 90 AD |  if_e	jmp	#LR__0901
0a4f0     C1 01 00 FF 
0a4f4     AA 15 06 F6 | 	mov	arg02, ##@LR__5968
0a4f8     22 13 02 F6 | 	mov	arg01, local16
0a4fc     3C DC B1 FD | 	call	#__system___string_cmp
0a500     00 FA 0D F2 | 	cmp	result1, #0 wz
0a504     F4 00 90 AD |  if_e	jmp	#LR__0902
0a508     C1 01 00 FF 
0a50c     B0 15 06 F6 | 	mov	arg02, ##@LR__5969
0a510     22 13 02 F6 | 	mov	arg01, local16
0a514     24 DC B1 FD | 	call	#__system___string_cmp
0a518     00 FA 0D F2 | 	cmp	result1, #0 wz
0a51c     E8 00 90 AD |  if_e	jmp	#LR__0903
0a520     C1 01 00 FF 
0a524     B7 15 06 F6 | 	mov	arg02, ##@LR__5970
0a528     22 13 02 F6 | 	mov	arg01, local16
0a52c     0C DC B1 FD | 	call	#__system___string_cmp
0a530     00 FA 0D F2 | 	cmp	result1, #0 wz
0a534     DC 00 90 AD |  if_e	jmp	#LR__0904
0a538     C1 01 00 FF 
0a53c     BC 15 06 F6 | 	mov	arg02, ##@LR__5971
0a540     22 13 02 F6 | 	mov	arg01, local16
0a544     F4 DB B1 FD | 	call	#__system___string_cmp
0a548     00 FA 0D F2 | 	cmp	result1, #0 wz
0a54c     D0 00 90 AD |  if_e	jmp	#LR__0905
0a550     C1 01 00 FF 
0a554     C4 15 06 F6 | 	mov	arg02, ##@LR__5972
0a558     22 13 02 F6 | 	mov	arg01, local16
0a55c     DC DB B1 FD | 	call	#__system___string_cmp
0a560     00 FA 0D F2 | 	cmp	result1, #0 wz
0a564     C4 00 90 AD |  if_e	jmp	#LR__0906
0a568     C1 01 00 FF 
0a56c     CA 15 06 F6 | 	mov	arg02, ##@LR__5973
0a570     22 13 02 F6 | 	mov	arg01, local16
0a574     C4 DB B1 FD | 	call	#__system___string_cmp
0a578     00 FA 0D F2 | 	cmp	result1, #0 wz
0a57c     B8 00 90 AD |  if_e	jmp	#LR__0907
0a580     C1 01 00 FF 
0a584     D0 15 06 F6 | 	mov	arg02, ##@LR__5974
0a588     22 13 02 F6 | 	mov	arg01, local16
0a58c     AC DB B1 FD | 	call	#__system___string_cmp
0a590     00 FA 0D F2 | 	cmp	result1, #0 wz
0a594     AC 00 90 AD |  if_e	jmp	#LR__0908
0a598     C1 01 00 FF 
0a59c     D7 15 06 F6 | 	mov	arg02, ##@LR__5975
0a5a0     22 13 02 F6 | 	mov	arg01, local16
0a5a4     94 DB B1 FD | 	call	#__system___string_cmp
0a5a8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a5ac     A0 00 90 AD |  if_e	jmp	#LR__0909
0a5b0     C1 01 00 FF 
0a5b4     DE 15 06 F6 | 	mov	arg02, ##@LR__5976
0a5b8     22 13 02 F6 | 	mov	arg01, local16
0a5bc     7C DB B1 FD | 	call	#__system___string_cmp
0a5c0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a5c4     94 00 90 AD |  if_e	jmp	#LR__0910
0a5c8     C1 01 00 FF 
0a5cc     E5 15 06 F6 | 	mov	arg02, ##@LR__5977
0a5d0     22 13 02 F6 | 	mov	arg01, local16
0a5d4     64 DB B1 FD | 	call	#__system___string_cmp
0a5d8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a5dc     88 00 90 AD |  if_e	jmp	#LR__0911
0a5e0     90 00 90 FD | 	jmp	#LR__0912
0a5e4                 | LR__0900
0a5e4     01 41 06 F6 | 	mov	local14, #257
0a5e8     01 42 06 F6 | 	mov	local15, #1
0a5ec     94 00 90 FD | 	jmp	#LR__0914
0a5f0                 | LR__0901
0a5f0     02 41 06 F6 | 	mov	local14, #258
0a5f4     01 42 06 F6 | 	mov	local15, #1
0a5f8     88 00 90 FD | 	jmp	#LR__0914
0a5fc                 | LR__0902
0a5fc     03 41 06 F6 | 	mov	local14, #259
0a600     02 42 06 F6 | 	mov	local15, #2
0a604     7C 00 90 FD | 	jmp	#LR__0914
0a608                 | LR__0903
0a608     04 41 06 F6 | 	mov	local14, #260
0a60c     02 42 06 F6 | 	mov	local15, #2
0a610     70 00 90 FD | 	jmp	#LR__0914
0a614                 | LR__0904
0a614     05 41 06 F6 | 	mov	local14, #261
0a618     04 42 06 F6 | 	mov	local15, #4
0a61c     64 00 90 FD | 	jmp	#LR__0914
0a620                 | LR__0905
0a620     05 41 06 F6 | 	mov	local14, #261
0a624     04 42 06 F6 | 	mov	local15, #4
0a628     58 00 90 FD | 	jmp	#LR__0914
0a62c                 | LR__0906
0a62c     06 41 06 F6 | 	mov	local14, #262
0a630     04 42 06 F6 | 	mov	local15, #4
0a634     4C 00 90 FD | 	jmp	#LR__0914
0a638                 | LR__0907
0a638     07 41 06 F6 | 	mov	local14, #263
0a63c     08 42 06 F6 | 	mov	local15, #8
0a640     40 00 90 FD | 	jmp	#LR__0914
0a644                 | LR__0908
0a644     08 41 06 F6 | 	mov	local14, #264
0a648     08 42 06 F6 | 	mov	local15, #8
0a64c     34 00 90 FD | 	jmp	#LR__0914
0a650                 | LR__0909
0a650     09 41 06 F6 | 	mov	local14, #265
0a654     04 42 06 F6 | 	mov	local15, #4
0a658     28 00 90 FD | 	jmp	#LR__0914
0a65c                 | LR__0910
0a65c     0A 41 06 F6 | 	mov	local14, #266
0a660     08 42 06 F6 | 	mov	local15, #8
0a664     1C 00 90 FD | 	jmp	#LR__0914
0a668                 | LR__0911
0a668     0B 41 06 F6 | 	mov	local14, #267
0a66c     04 42 06 F6 | 	mov	local15, #4
0a670     10 00 90 FD | 	jmp	#LR__0914
0a674                 | LR__0912
0a674     2F FA 05 F6 | 	mov	result1, #47
0a678     08 01 90 FD | 	jmp	#LR__0915
0a67c                 | LR__0913
0a67c                 | '   return 46
0a67c     2E FA 05 F6 | 	mov	result1, #46
0a680     00 01 90 FD | 	jmp	#LR__0915
0a684                 | LR__0914
0a684     13 43 02 FD | 	qmul	local15, local01
0a688     18 32 62 FD | 	getqx	local07
0a68c     14 33 02 FD | 	qmul	local07, local02
0a690     18 44 62 FD | 	getqx	local16
0a694     15 45 02 FD | 	qmul	local16, local03
0a698     52 00 00 FF 
0a69c     F0 E4 05 F1 | 	add	objptr, ##42224
0a6a0     F2 46 02 FB | 	rdlong	local17, objptr
0a6a4     20 15 02 F6 | 	mov	arg02, local14
0a6a8     18 44 62 FD | 	getqx	local16
0a6ac     22 47 82 F1 | 	sub	local17, local16
0a6b0     10 46 86 F1 | 	sub	local17, #16
0a6b4     0F 46 26 F5 | 	andn	local17, #15
0a6b8     F2 46 62 FC | 	wrlong	local17, objptr
0a6bc     52 00 00 FF 
0a6c0     F0 E4 85 F1 | 	sub	objptr, ##42224
0a6c4     23 13 02 F6 | 	mov	arg01, local17
0a6c8     D8 A1 B1 FD | 	call	#_psdpoke
0a6cc     23 13 02 F6 | 	mov	arg01, local17
0a6d0     02 12 06 F1 | 	add	arg01, #2
0a6d4     21 15 02 F6 | 	mov	arg02, local15
0a6d8     C8 A1 B1 FD | 	call	#_psdpoke
0a6dc     23 13 02 F6 | 	mov	arg01, local17
0a6e0     04 12 06 F1 | 	add	arg01, #4
0a6e4     13 15 02 F6 | 	mov	arg02, local01
0a6e8     70 A1 B1 FD | 	call	#_pslpoke
0a6ec     23 13 02 F6 | 	mov	arg01, local17
0a6f0     08 12 06 F1 | 	add	arg01, #8
0a6f4     14 15 02 F6 | 	mov	arg02, local02
0a6f8     60 A1 B1 FD | 	call	#_pslpoke
0a6fc     23 13 02 F6 | 	mov	arg01, local17
0a700     0C 12 06 F1 | 	add	arg01, #12
0a704     15 15 02 F6 | 	mov	arg02, local03
0a708     50 A1 B1 FD | 	call	#_pslpoke
0a70c     18 3D 02 F6 | 	mov	local12, local06
0a710     04 3C 66 F0 | 	shl	local12, #4
0a714     15 00 00 FF 
0a718     18 E4 05 F1 | 	add	objptr, ##10776
0a71c     F2 3C 02 F1 | 	add	local12, objptr
0a720     1E 2F 62 FC | 	wrlong	local05, local12
0a724     18 3D 02 F6 | 	mov	local12, local06
0a728     04 3C 66 F0 | 	shl	local12, #4
0a72c     F2 3C 02 F1 | 	add	local12, objptr
0a730     04 3C 06 F1 | 	add	local12, #4
0a734     1E 47 62 FC | 	wrlong	local17, local12
0a738     18 3D 02 F6 | 	mov	local12, local06
0a73c     04 3C 66 F0 | 	shl	local12, #4
0a740     F2 3C 02 F1 | 	add	local12, objptr
0a744     0C 3C 06 F1 | 	add	local12, #12
0a748     1E 41 62 FC | 	wrlong	local14, local12
0a74c                 | ' memtop=arrayptr
0a74c                 | ' psdpoke arrayptr,arraytype 
0a74c                 | ' psdpoke arrayptr+2,esize 
0a74c                 | ' pslpoke arrayptr+4,dims(0)
0a74c                 | ' pslpoke arrayptr+8,dims(1)
0a74c                 | ' pslpoke arrayptr+12,dims(2)
0a74c                 | ' variables(j).name=varname2$
0a74c                 | ' variables(j).value.uresult=arrayptr
0a74c                 | ' variables(j).vartype=arraytype
0a74c                 | ' if j=varnum then varnum+=1
0a74c     20 00 00 FF 
0a750     10 E4 05 F1 | 	add	objptr, ##16400
0a754     F2 32 02 FB | 	rdlong	local07, objptr
0a758     35 00 00 FF 
0a75c     28 E4 85 F1 | 	sub	objptr, ##27176
0a760     19 31 0A F2 | 	cmp	local06, local07 wz
0a764     35 00 00 AF 
0a768     28 E4 05 A1 |  if_e	add	objptr, ##27176
0a76c     F2 32 02 AB |  if_e	rdlong	local07, objptr
0a770     01 32 06 A1 |  if_e	add	local07, #1
0a774     F2 32 62 AC |  if_e	wrlong	local07, objptr
0a778     35 00 00 AF 
0a77c     28 E4 85 A1 |  if_e	sub	objptr, ##27176
0a780                 | ' return 0
0a780     00 FA 05 F6 | 	mov	result1, #0
0a784                 | LR__0915
0a784     A7 F0 03 F6 | 	mov	ptra, fp
0a788     B2 00 A0 FD | 	call	#popregs_
0a78c                 | _compile_dim_ret
0a78c     2D 00 64 FD | 	ret
0a790                 | 
0a790                 | ' 
0a790                 | ' '----- compile 'for' command. 
0a790                 | ' 
0a790                 | ' function compile_for() as ulong  
0a790                 | _compile_for
0a790     0E 4A 05 F6 | 	mov	COUNT_, #14
0a794     A8 00 A0 FD | 	call	#pushregs_
0a798                 | ' 
0a798                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a798     37 00 00 FF 
0a79c     64 E4 05 F1 | 	add	objptr, ##28260
0a7a0     F2 14 02 FB | 	rdlong	arg02, objptr
0a7a4     01 14 06 F1 | 	add	arg02, #1
0a7a8     03 14 66 F0 | 	shl	arg02, #3
0a7ac     02 00 00 FF 
0a7b0     38 E4 85 F1 | 	sub	objptr, ##1080
0a7b4     F2 14 02 F1 | 	add	arg02, objptr
0a7b8     0A 13 02 FB | 	rdlong	arg01, arg02
0a7bc     35 00 00 FF 
0a7c0     2C E4 85 F1 | 	sub	objptr, ##27180
0a7c4                 | ' 
0a7c4                 | ' select case s
0a7c4     BF 01 00 FF 
0a7c8     6E 14 06 F6 | 	mov	arg02, ##@LR__5689
0a7cc     6C D9 B1 FD | 	call	#__system___string_cmp
0a7d0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a7d4     1B FA 05 A6 |  if_e	mov	result1, #27
0a7d8     00 FA 05 56 |  if_ne	mov	result1, #0
0a7dc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a7e0     0C 00 90 AD |  if_e	jmp	#LR__0920
0a7e4     05 12 06 F6 | 	mov	arg01, #5
0a7e8     A8 DB BF FD | 	call	#_compile_immediate_assign
0a7ec     08 00 90 FD | 	jmp	#LR__0921
0a7f0                 | LR__0920
0a7f0     20 FA 05 F6 | 	mov	result1, #32
0a7f4     58 08 90 FD | 	jmp	#LR__0937
0a7f8                 | LR__0921
0a7f8     4A 00 00 FF 
0a7fc     9C E4 05 F1 | 	add	objptr, ##38044
0a800     F2 14 02 FB | 	rdlong	arg02, objptr
0a804     0A 13 02 F6 | 	mov	arg01, arg02
0a808     01 12 86 F1 | 	sub	arg01, #1
0a80c     09 2D 02 F6 | 	mov	local04, arg01
0a810     01 2C 66 F0 | 	shl	local04, #1
0a814     09 2D 02 F1 | 	add	local04, arg01
0a818     02 2C 66 F0 | 	shl	local04, #2
0a81c     03 00 00 FF 
0a820     00 E4 85 F1 | 	sub	objptr, ##1536
0a824     F2 2C 02 F1 | 	add	local04, objptr
0a828     16 27 02 FB | 	rdlong	local01, local04
0a82c     04 2C 06 F1 | 	add	local04, #4
0a830     16 2F 02 FB | 	rdlong	local05, local04
0a834     01 14 86 F1 | 	sub	arg02, #1
0a838     0A 2D 02 F6 | 	mov	local04, arg02
0a83c     01 2C 66 F0 | 	shl	local04, #1
0a840     0A 2D 02 F1 | 	add	local04, arg02
0a844     02 2C 66 F0 | 	shl	local04, #2
0a848     F2 30 02 F6 | 	mov	local06, objptr
0a84c     F2 2C 02 F1 | 	add	local04, objptr
0a850     08 2C 06 F1 | 	add	local04, #8
0a854     16 2D 02 FB | 	rdlong	local04, local04
0a858     17 29 02 F6 | 	mov	local02, local05
0a85c     16 2B 02 F6 | 	mov	local03, local04
0a860                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a860     17 2A 0E F2 | 	cmp	local03, #23 wz
0a864     47 00 00 FF 
0a868     9C E4 85 F1 | 	sub	objptr, ##36508
0a86c     22 FA 05 56 |  if_ne	mov	result1, #34
0a870     DC 07 90 5D |  if_ne	jmp	#LR__0937
0a874     13 33 02 F6 | 	mov	local07, local01
0a878                 | ' varnum=t1.result.uresult
0a878                 | ' if lparts(ct).part$<>"to" then return 33
0a878     37 00 00 FF 
0a87c     64 E4 05 F1 | 	add	objptr, ##28260
0a880     F2 2C 02 FB | 	rdlong	local04, objptr
0a884     03 2C 66 F0 | 	shl	local04, #3
0a888     02 00 00 FF 
0a88c     38 E4 85 F1 | 	sub	objptr, ##1080
0a890     F2 2C 02 F1 | 	add	local04, objptr
0a894     16 13 02 FB | 	rdlong	arg01, local04
0a898     C1 01 00 FF 
0a89c     EC 15 06 F6 | 	mov	arg02, ##@LR__5978
0a8a0     35 00 00 FF 
0a8a4     2C E4 85 F1 | 	sub	objptr, ##27180
0a8a8     90 D8 B1 FD | 	call	#__system___string_cmp
0a8ac     00 FA 0D F2 | 	cmp	result1, #0 wz
0a8b0     21 FA 05 56 |  if_ne	mov	result1, #33
0a8b4     98 07 90 5D |  if_ne	jmp	#LR__0937
0a8b8     37 00 00 FF 
0a8bc     64 E4 05 F1 | 	add	objptr, ##28260
0a8c0     F2 34 02 FB | 	rdlong	local08, objptr
0a8c4     01 34 06 F1 | 	add	local08, #1
0a8c8     F2 34 62 FC | 	wrlong	local08, objptr
0a8cc     37 00 00 FF 
0a8d0     64 E4 85 F1 | 	sub	objptr, ##28260
0a8d4     2C 17 B0 FD | 	call	#_expr
0a8d8                 | ' ct+=1
0a8d8                 | ' expr()  										' there is "to" value pushed on the stack
0a8d8                 | ' if lparts(ct).part$="step" orelse left$(lparts(ct).part$,2)="s." then
0a8d8     37 00 00 FF 
0a8dc     64 E4 05 F1 | 	add	objptr, ##28260
0a8e0     F2 2C 02 FB | 	rdlong	local04, objptr
0a8e4     03 2C 66 F0 | 	shl	local04, #3
0a8e8     02 00 00 FF 
0a8ec     38 E4 85 F1 | 	sub	objptr, ##1080
0a8f0     F2 2C 02 F1 | 	add	local04, objptr
0a8f4     16 13 02 FB | 	rdlong	arg01, local04
0a8f8     C1 01 00 FF 
0a8fc     EF 15 06 F6 | 	mov	arg02, ##@LR__5979
0a900     35 00 00 FF 
0a904     2C E4 85 F1 | 	sub	objptr, ##27180
0a908     30 D8 B1 FD | 	call	#__system___string_cmp
0a90c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a910     48 00 90 AD |  if_e	jmp	#LR__0922
0a914     37 00 00 FF 
0a918     64 E4 05 F1 | 	add	objptr, ##28260
0a91c     F2 2C 02 FB | 	rdlong	local04, objptr
0a920     03 2C 66 F0 | 	shl	local04, #3
0a924     02 00 00 FF 
0a928     38 E4 85 F1 | 	sub	objptr, ##1080
0a92c     F2 2C 02 F1 | 	add	local04, objptr
0a930     16 13 02 FB | 	rdlong	arg01, local04
0a934     02 14 06 F6 | 	mov	arg02, #2
0a938     35 00 00 FF 
0a93c     2C E4 85 F1 | 	sub	objptr, ##27180
0a940     50 F8 B1 FD | 	call	#__system__Left_S
0a944     FD 12 02 F6 | 	mov	arg01, result1
0a948     C1 01 00 FF 
0a94c     F4 15 06 F6 | 	mov	arg02, ##@LR__5980
0a950     E8 D7 B1 FD | 	call	#__system___string_cmp
0a954     00 FA 0D F2 | 	cmp	result1, #0 wz
0a958     9C 05 90 5D |  if_ne	jmp	#LR__0935
0a95c                 | LR__0922
0a95c                 | '   if left$(lparts(ct).part$,2)="s." andalso len(lparts(ct).part$)>2 then ' correct the part
0a95c     37 00 00 FF 
0a960     64 E4 05 F1 | 	add	objptr, ##28260
0a964     F2 2C 02 FB | 	rdlong	local04, objptr
0a968     03 2C 66 F0 | 	shl	local04, #3
0a96c     02 00 00 FF 
0a970     38 E4 85 F1 | 	sub	objptr, ##1080
0a974     F2 2C 02 F1 | 	add	local04, objptr
0a978     16 13 02 FB | 	rdlong	arg01, local04
0a97c     02 14 06 F6 | 	mov	arg02, #2
0a980     35 00 00 FF 
0a984     2C E4 85 F1 | 	sub	objptr, ##27180
0a988     08 F8 B1 FD | 	call	#__system__Left_S
0a98c     FD 12 02 F6 | 	mov	arg01, result1
0a990     C1 01 00 FF 
0a994     F7 15 06 F6 | 	mov	arg02, ##@LR__5981
0a998     A0 D7 B1 FD | 	call	#__system___string_cmp
0a99c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a9a0     30 05 90 5D |  if_ne	jmp	#LR__0934
0a9a4     37 00 00 FF 
0a9a8     64 E4 05 F1 | 	add	objptr, ##28260
0a9ac     F2 2C 02 FB | 	rdlong	local04, objptr
0a9b0     03 2C 66 F0 | 	shl	local04, #3
0a9b4     02 00 00 FF 
0a9b8     38 E4 85 F1 | 	sub	objptr, ##1080
0a9bc     F2 2C 02 F1 | 	add	local04, objptr
0a9c0     16 13 02 FB | 	rdlong	arg01, local04
0a9c4     35 00 00 FF 
0a9c8     2C E4 85 F1 | 	sub	objptr, ##27180
0a9cc     09 37 02 F6 | 	mov	local09, arg01
0a9d0     97 06 48 FB | 	callpa	#(@LR__0924-@LR__0923)>>2,fcache_load_ptr_
0a9d4                 | LR__0923
0a9d4     1B FB C9 FA | 	rdbyte	result1, local09 wz
0a9d8     01 36 06 51 |  if_ne	add	local09, #1
0a9dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0923
0a9e0                 | LR__0924
0a9e0     09 37 82 F1 | 	sub	local09, arg01
0a9e4     03 36 56 F2 | 	cmps	local09, #3 wc
0a9e8     E8 04 90 CD |  if_b	jmp	#LR__0934
0a9ec     37 00 00 FF 
0a9f0     64 E4 05 F1 | 	add	objptr, ##28260
0a9f4     F2 2C 02 FB | 	rdlong	local04, objptr
0a9f8     16 39 02 F6 | 	mov	local10, local04
0a9fc     03 38 66 F0 | 	shl	local10, #3
0aa00     02 00 00 FF 
0aa04     38 E4 85 F1 | 	sub	objptr, ##1080
0aa08     F2 38 02 F1 | 	add	local10, objptr
0aa0c     03 2C 66 F0 | 	shl	local04, #3
0aa10     F2 2C 02 F1 | 	add	local04, objptr
0aa14     16 2D 02 FB | 	rdlong	local04, local04
0aa18     02 00 00 FF 
0aa1c     38 E4 05 F1 | 	add	objptr, ##1080
0aa20     F2 12 02 FB | 	rdlong	arg01, objptr
0aa24     03 12 66 F0 | 	shl	arg01, #3
0aa28     02 00 00 FF 
0aa2c     38 E4 85 F1 | 	sub	objptr, ##1080
0aa30     F2 12 02 F1 | 	add	arg01, objptr
0aa34     09 13 02 FB | 	rdlong	arg01, arg01
0aa38     35 00 00 FF 
0aa3c     2C E4 85 F1 | 	sub	objptr, ##27180
0aa40     09 37 02 F6 | 	mov	local09, arg01
0aa44     97 06 48 FB | 	callpa	#(@LR__0926-@LR__0925)>>2,fcache_load_ptr_
0aa48                 | LR__0925
0aa48     1B FB C9 FA | 	rdbyte	result1, local09 wz
0aa4c     01 36 06 51 |  if_ne	add	local09, #1
0aa50     F4 FF 9F 5D |  if_ne	jmp	#LR__0925
0aa54                 | LR__0926
0aa54     09 37 82 F1 | 	sub	local09, arg01
0aa58     1B 15 02 F6 | 	mov	arg02, local09
0aa5c     02 14 86 F1 | 	sub	arg02, #2
0aa60     16 13 02 F6 | 	mov	arg01, local04
0aa64     B4 F7 B1 FD | 	call	#__system__Right_S
0aa68     1C FB 61 FC | 	wrlong	result1, local10
0aa6c     37 00 00 FF 
0aa70     64 E4 05 F1 | 	add	objptr, ##28260
0aa74     F2 2C 02 FB | 	rdlong	local04, objptr
0aa78     16 39 02 F6 | 	mov	local10, local04
0aa7c     03 38 66 F0 | 	shl	local10, #3
0aa80     02 00 00 FF 
0aa84     38 E4 85 F1 | 	sub	objptr, ##1080
0aa88     F2 38 02 F1 | 	add	local10, objptr
0aa8c     03 2C 66 F0 | 	shl	local04, #3
0aa90     F2 2C 02 F1 | 	add	local04, objptr
0aa94     16 13 02 FB | 	rdlong	arg01, local04
0aa98     35 00 00 FF 
0aa9c     2C E4 85 F1 | 	sub	objptr, ##27180
0aaa0     5C B5 BF FD | 	call	#_isfunction
0aaa4     FD FA E1 F8 | 	getbyte	result1, result1, #0
0aaa8     04 38 06 F1 | 	add	local10, #4
0aaac     1C FB 61 FC | 	wrlong	result1, local10
0aab0                 | '     lparts(ct).token=isfunction(lparts(ct).part$) : if lparts(ct).token>0 then goto 2102
0aab0     37 00 00 FF 
0aab4     64 E4 05 F1 | 	add	objptr, ##28260
0aab8     F2 38 02 FB | 	rdlong	local10, objptr
0aabc     03 38 66 F0 | 	shl	local10, #3
0aac0     02 00 00 FF 
0aac4     38 E4 85 F1 | 	sub	objptr, ##1080
0aac8     F2 38 02 F1 | 	add	local10, objptr
0aacc     04 38 06 F1 | 	add	local10, #4
0aad0     1C 2D 02 FB | 	rdlong	local04, local10
0aad4     01 2C 56 F2 | 	cmps	local04, #1 wc
0aad8     35 00 00 FF 
0aadc     2C E4 85 F1 | 	sub	objptr, ##27180
0aae0     D4 03 90 3D |  if_ae	jmp	#LR__0933
0aae4     37 00 00 FF 
0aae8     64 E4 05 F1 | 	add	objptr, ##28260
0aaec     F2 2C 02 FB | 	rdlong	local04, objptr
0aaf0     16 39 02 F6 | 	mov	local10, local04
0aaf4     03 38 66 F0 | 	shl	local10, #3
0aaf8     02 00 00 FF 
0aafc     38 E4 85 F1 | 	sub	objptr, ##1080
0ab00     F2 38 02 F1 | 	add	local10, objptr
0ab04     03 2C 66 F0 | 	shl	local04, #3
0ab08     F2 2C 02 F1 | 	add	local04, objptr
0ab0c     16 13 02 FB | 	rdlong	arg01, local04
0ab10     35 00 00 FF 
0ab14     2C E4 85 F1 | 	sub	objptr, ##27180
0ab18     18 9E BF FD | 	call	#_isnotename
0ab1c     04 38 06 F1 | 	add	local10, #4
0ab20     1C FB 61 FC | 	wrlong	result1, local10
0ab24                 | '     lparts(ct).token=isnotename(lparts(ct).part$) :
0ab24                 | '     if lparts(ct).token>0 then 
0ab24     37 00 00 FF 
0ab28     64 E4 05 F1 | 	add	objptr, ##28260
0ab2c     F2 38 02 FB | 	rdlong	local10, objptr
0ab30     03 38 66 F0 | 	shl	local10, #3
0ab34     02 00 00 FF 
0ab38     38 E4 85 F1 | 	sub	objptr, ##1080
0ab3c     F2 38 02 F1 | 	add	local10, objptr
0ab40     04 38 06 F1 | 	add	local10, #4
0ab44     1C 2D 02 FB | 	rdlong	local04, local10
0ab48     01 2C 56 F2 | 	cmps	local04, #1 wc
0ab4c     35 00 00 FF 
0ab50     2C E4 85 F1 | 	sub	objptr, ##27180
0ab54     94 00 90 CD |  if_b	jmp	#LR__0927
0ab58     37 00 00 FF 
0ab5c     64 E4 05 F1 | 	add	objptr, ##28260
0ab60     F2 38 02 FB | 	rdlong	local10, objptr
0ab64     03 38 66 F0 | 	shl	local10, #3
0ab68     02 00 00 FF 
0ab6c     38 E4 85 F1 | 	sub	objptr, ##1080
0ab70     F2 38 02 F1 | 	add	local10, objptr
0ab74     04 38 06 F1 | 	add	local10, #4
0ab78     1C 13 02 FB | 	rdlong	arg01, local10
0ab7c     35 00 00 FF 
0ab80     2C E4 85 F1 | 	sub	objptr, ##27180
0ab84     A0 C6 BF FD | 	call	#_getnoteval
0ab88     FD 12 02 F6 | 	mov	arg01, result1
0ab8c     37 00 00 FF 
0ab90     64 E4 05 F1 | 	add	objptr, ##28260
0ab94     F2 38 02 FB | 	rdlong	local10, objptr
0ab98     03 38 66 F0 | 	shl	local10, #3
0ab9c     02 00 00 FF 
0aba0     38 E4 85 F1 | 	sub	objptr, ##1080
0aba4     F2 38 02 F1 | 	add	local10, objptr
0aba8     35 00 00 FF 
0abac     2C E4 85 F1 | 	sub	objptr, ##27180
0abb0     D8 F7 B1 FD | 	call	#__system__str_S
0abb4     1C FB 61 FC | 	wrlong	result1, local10
0abb8     37 00 00 FF 
0abbc     64 E4 05 F1 | 	add	objptr, ##28260
0abc0     F2 38 02 FB | 	rdlong	local10, objptr
0abc4     03 38 66 F0 | 	shl	local10, #3
0abc8     02 00 00 FF 
0abcc     38 E4 85 F1 | 	sub	objptr, ##1080
0abd0     F2 38 02 F1 | 	add	local10, objptr
0abd4     04 38 06 F1 | 	add	local10, #4
0abd8     01 00 80 FF 
0abdc     1C 05 68 FC | 	wrlong	##514, local10
0abe0     35 00 00 FF 
0abe4     2C E4 85 F1 | 	sub	objptr, ##27180
0abe8     CC 02 90 FD | 	jmp	#LR__0933
0abec                 | LR__0927
0abec     37 00 00 FF 
0abf0     64 E4 05 F1 | 	add	objptr, ##28260
0abf4     F2 2C 02 FB | 	rdlong	local04, objptr
0abf8     16 39 02 F6 | 	mov	local10, local04
0abfc     03 38 66 F0 | 	shl	local10, #3
0ac00     02 00 00 FF 
0ac04     38 E4 85 F1 | 	sub	objptr, ##1080
0ac08     F2 38 02 F1 | 	add	local10, objptr
0ac0c     03 2C 66 F0 | 	shl	local04, #3
0ac10     F2 2C 02 F1 | 	add	local04, objptr
0ac14     16 13 02 FB | 	rdlong	arg01, local04
0ac18     35 00 00 FF 
0ac1c     2C E4 85 F1 | 	sub	objptr, ##27180
0ac20     90 9C BF FD | 	call	#_isconstant
0ac24     04 38 06 F1 | 	add	local10, #4
0ac28     1C FB 61 FC | 	wrlong	result1, local10
0ac2c                 | '     lparts(ct).token=isconstant(lparts(ct).part$) : if lparts(ct).token>0 then lparts(ct).part$=str$(lparts(ct).token) : lparts(ct).token=token_integer : goto 2102
0ac2c     37 00 00 FF 
0ac30     64 E4 05 F1 | 	add	objptr, ##28260
0ac34     F2 38 02 FB | 	rdlong	local10, objptr
0ac38     03 38 66 F0 | 	shl	local10, #3
0ac3c     02 00 00 FF 
0ac40     38 E4 85 F1 | 	sub	objptr, ##1080
0ac44     F2 38 02 F1 | 	add	local10, objptr
0ac48     04 38 06 F1 | 	add	local10, #4
0ac4c     1C 2D 02 FB | 	rdlong	local04, local10
0ac50     01 2C 56 F2 | 	cmps	local04, #1 wc
0ac54     35 00 00 FF 
0ac58     2C E4 85 F1 | 	sub	objptr, ##27180
0ac5c     8C 00 90 CD |  if_b	jmp	#LR__0928
0ac60     37 00 00 FF 
0ac64     64 E4 05 F1 | 	add	objptr, ##28260
0ac68     F2 34 02 FB | 	rdlong	local08, objptr
0ac6c     1A 39 02 F6 | 	mov	local10, local08
0ac70     03 38 66 F0 | 	shl	local10, #3
0ac74     02 00 00 FF 
0ac78     38 E4 85 F1 | 	sub	objptr, ##1080
0ac7c     F2 38 02 F1 | 	add	local10, objptr
0ac80     03 34 66 F0 | 	shl	local08, #3
0ac84     F2 34 02 F1 | 	add	local08, objptr
0ac88     04 34 06 F1 | 	add	local08, #4
0ac8c     1A 13 02 FB | 	rdlong	arg01, local08
0ac90     35 00 00 FF 
0ac94     2C E4 85 F1 | 	sub	objptr, ##27180
0ac98     09 13 52 F6 | 	abs	arg01, arg01 wc
0ac9c     1F 3A C6 C9 |  if_b	decod	local11, #31
0aca0     00 3A 06 36 |  if_ae	mov	local11, #0
0aca4     E4 FE B1 FD | 	call	#__system___float_fromuns
0aca8     1D FB 61 F5 | 	xor	result1, local11
0acac     FD 12 02 F6 | 	mov	arg01, result1
0acb0     D8 F6 B1 FD | 	call	#__system__str_S
0acb4     1C FB 61 FC | 	wrlong	result1, local10
0acb8     37 00 00 FF 
0acbc     64 E4 05 F1 | 	add	objptr, ##28260
0acc0     F2 38 02 FB | 	rdlong	local10, objptr
0acc4     03 38 66 F0 | 	shl	local10, #3
0acc8     02 00 00 FF 
0accc     38 E4 85 F1 | 	sub	objptr, ##1080
0acd0     F2 38 02 F1 | 	add	local10, objptr
0acd4     04 38 06 F1 | 	add	local10, #4
0acd8     01 00 80 FF 
0acdc     1C 03 68 FC | 	wrlong	##513, local10
0ace0     35 00 00 FF 
0ace4     2C E4 85 F1 | 	sub	objptr, ##27180
0ace8     CC 01 90 FD | 	jmp	#LR__0933
0acec                 | LR__0928
0acec     37 00 00 FF 
0acf0     64 E4 05 F1 | 	add	objptr, ##28260
0acf4     F2 38 02 FB | 	rdlong	local10, objptr
0acf8     03 38 66 F0 | 	shl	local10, #3
0acfc     02 00 00 FF 
0ad00     38 E4 85 F1 | 	sub	objptr, ##1080
0ad04     F2 38 02 F1 | 	add	local10, objptr
0ad08     1C 13 02 FB | 	rdlong	arg01, local10
0ad0c     35 00 00 FF 
0ad10     2C E4 85 F1 | 	sub	objptr, ##27180
0ad14     5C BD BF FD | 	call	#_isnum
0ad18     FD 3C 02 F6 | 	mov	local12, result1
0ad1c     37 00 00 FF 
0ad20     64 E4 05 F1 | 	add	objptr, ##28260
0ad24     F2 38 02 FB | 	rdlong	local10, objptr
0ad28     03 38 66 F0 | 	shl	local10, #3
0ad2c     02 00 00 FF 
0ad30     38 E4 85 F1 | 	sub	objptr, ##1080
0ad34     F2 38 02 F1 | 	add	local10, objptr
0ad38     1C 13 02 FB | 	rdlong	arg01, local10
0ad3c     35 00 00 FF 
0ad40     2C E4 85 F1 | 	sub	objptr, ##27180
0ad44     18 C1 BF FD | 	call	#_isint
0ad48     FD 3E 02 F6 | 	mov	local13, result1
0ad4c     37 00 00 FF 
0ad50     64 E4 05 F1 | 	add	objptr, ##28260
0ad54     F2 38 02 FB | 	rdlong	local10, objptr
0ad58     03 38 66 F0 | 	shl	local10, #3
0ad5c     02 00 00 FF 
0ad60     38 E4 85 F1 | 	sub	objptr, ##1080
0ad64     F2 38 02 F1 | 	add	local10, objptr
0ad68     1C 13 02 FB | 	rdlong	arg01, local10
0ad6c     35 00 00 FF 
0ad70     2C E4 85 F1 | 	sub	objptr, ##27180
0ad74     8C C3 BF FD | 	call	#_isdec
0ad78     FD 40 02 F6 | 	mov	local14, result1
0ad7c                 | '     b1=isnum(lparts(ct).part$) : b2=isint(lparts(ct).part$) : b3=isdec(lparts(ct).part$)
0ad7c                 | '     if b1 andalso b2 andalso b3 then lparts(ct).token=token_decimal 			: goto 2102 	' pure decimal for line num
0ad7c     00 3C 0E F2 | 	cmp	local12, #0 wz
0ad80     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0ad84     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0ad88     34 00 90 AD |  if_e	jmp	#LR__0929
0ad8c     37 00 00 FF 
0ad90     64 E4 05 F1 | 	add	objptr, ##28260
0ad94     F2 38 02 FB | 	rdlong	local10, objptr
0ad98     03 38 66 F0 | 	shl	local10, #3
0ad9c     02 00 00 FF 
0ada0     38 E4 85 F1 | 	sub	objptr, ##1080
0ada4     F2 38 02 F1 | 	add	local10, objptr
0ada8     04 38 06 F1 | 	add	local10, #4
0adac     01 00 80 FF 
0adb0     1C 01 68 FC | 	wrlong	##512, local10
0adb4     35 00 00 FF 
0adb8     2C E4 85 F1 | 	sub	objptr, ##27180
0adbc     F8 00 90 FD | 	jmp	#LR__0933
0adc0                 | LR__0929
0adc0                 | '     if b1 andalso b2 andalso (not b3) then lparts(ct).token=token_integer 		: goto 2102 	' integer
0adc0     00 3C 0E F2 | 	cmp	local12, #0 wz
0adc4     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0adc8     20 35 22 56 |  if_ne	not	local08, local14
0adcc     00 34 0E 52 |  if_ne	cmp	local08, #0 wz
0add0     34 00 90 AD |  if_e	jmp	#LR__0930
0add4     37 00 00 FF 
0add8     64 E4 05 F1 | 	add	objptr, ##28260
0addc     F2 38 02 FB | 	rdlong	local10, objptr
0ade0     03 38 66 F0 | 	shl	local10, #3
0ade4     02 00 00 FF 
0ade8     38 E4 85 F1 | 	sub	objptr, ##1080
0adec     F2 38 02 F1 | 	add	local10, objptr
0adf0     04 38 06 F1 | 	add	local10, #4
0adf4     01 00 80 FF 
0adf8     1C 03 68 FC | 	wrlong	##513, local10
0adfc     35 00 00 FF 
0ae00     2C E4 85 F1 | 	sub	objptr, ##27180
0ae04     B0 00 90 FD | 	jmp	#LR__0933
0ae08                 | LR__0930
0ae08                 | '     if b1 andalso (not b2) andalso (not b3) then lparts(ct).token=token_float 		: goto 2102 	' float
0ae08     00 3C 0E F2 | 	cmp	local12, #0 wz
0ae0c     1F 3F 22 56 |  if_ne	not	local13, local13
0ae10     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0ae14     20 41 22 56 |  if_ne	not	local14, local14
0ae18     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0ae1c     34 00 90 AD |  if_e	jmp	#LR__0931
0ae20     37 00 00 FF 
0ae24     64 E4 05 F1 | 	add	objptr, ##28260
0ae28     F2 38 02 FB | 	rdlong	local10, objptr
0ae2c     03 38 66 F0 | 	shl	local10, #3
0ae30     02 00 00 FF 
0ae34     38 E4 85 F1 | 	sub	objptr, ##1080
0ae38     F2 38 02 F1 | 	add	local10, objptr
0ae3c     04 38 06 F1 | 	add	local10, #4
0ae40     01 00 80 FF 
0ae44     1C 05 68 FC | 	wrlong	##514, local10
0ae48     35 00 00 FF 
0ae4c     2C E4 85 F1 | 	sub	objptr, ##27180
0ae50     64 00 90 FD | 	jmp	#LR__0933
0ae54                 | LR__0931
0ae54                 | '     if isname(lparts(ct).part$) then lparts(ct).token=token_name : goto 2102	
0ae54     37 00 00 FF 
0ae58     64 E4 05 F1 | 	add	objptr, ##28260
0ae5c     F2 38 02 FB | 	rdlong	local10, objptr
0ae60     03 38 66 F0 | 	shl	local10, #3
0ae64     02 00 00 FF 
0ae68     38 E4 85 F1 | 	sub	objptr, ##1080
0ae6c     F2 38 02 F1 | 	add	local10, objptr
0ae70     1C 13 02 FB | 	rdlong	arg01, local10
0ae74     35 00 00 FF 
0ae78     2C E4 85 F1 | 	sub	objptr, ##27180
0ae7c     80 B9 BF FD | 	call	#_isname
0ae80     00 FA 0D F2 | 	cmp	result1, #0 wz
0ae84     30 00 90 AD |  if_e	jmp	#LR__0932
0ae88     37 00 00 FF 
0ae8c     64 E4 05 F1 | 	add	objptr, ##28260
0ae90     F2 38 02 FB | 	rdlong	local10, objptr
0ae94     03 38 66 F0 | 	shl	local10, #3
0ae98     02 00 00 FF 
0ae9c     38 E4 85 F1 | 	sub	objptr, ##1080
0aea0     F2 38 02 F1 | 	add	local10, objptr
0aea4     04 38 06 F1 | 	add	local10, #4
0aea8     01 00 80 FF 
0aeac     1C 09 68 FC | 	wrlong	##516, local10
0aeb0     35 00 00 FF 
0aeb4     2C E4 85 F1 | 	sub	objptr, ##27180
0aeb8                 | LR__0932
0aeb8                 | LR__0933
0aeb8     37 00 00 FF 
0aebc     64 E4 05 F1 | 	add	objptr, ##28260
0aec0     F2 34 02 FB | 	rdlong	local08, objptr
0aec4     01 34 86 F1 | 	sub	local08, #1
0aec8     F2 34 62 FC | 	wrlong	local08, objptr
0aecc     37 00 00 FF 
0aed0     64 E4 85 F1 | 	sub	objptr, ##28260
0aed4                 | LR__0934
0aed4     37 00 00 FF 
0aed8     64 E4 05 F1 | 	add	objptr, ##28260
0aedc     F2 34 02 FB | 	rdlong	local08, objptr
0aee0     01 34 06 F1 | 	add	local08, #1
0aee4     F2 34 62 FC | 	wrlong	local08, objptr
0aee8     37 00 00 FF 
0aeec     64 E4 85 F1 | 	sub	objptr, ##28260
0aef0     10 11 B0 FD | 	call	#_expr
0aef4     78 00 90 FD | 	jmp	#LR__0936
0aef8                 | LR__0935
0aef8     4A 00 00 FF 
0aefc     9C E4 05 F1 | 	add	objptr, ##38044
0af00     F2 40 02 FB | 	rdlong	local14, objptr
0af04     20 39 02 F6 | 	mov	local10, local14
0af08     01 38 66 F0 | 	shl	local10, #1
0af0c     20 39 02 F1 | 	add	local10, local14
0af10     02 38 66 F0 | 	shl	local10, #2
0af14     03 00 00 FF 
0af18     00 E4 85 F1 | 	sub	objptr, ##1536
0af1c     F2 38 02 F1 | 	add	local10, objptr
0af20     08 38 06 F1 | 	add	local10, #8
0af24     1C 39 68 FC | 	wrlong	#28, local10
0af28     03 00 00 FF 
0af2c     00 E4 05 F1 | 	add	objptr, ##1536
0af30     F2 40 02 FB | 	rdlong	local14, objptr
0af34     20 39 02 F6 | 	mov	local10, local14
0af38     01 38 66 F0 | 	shl	local10, #1
0af3c     20 39 02 F1 | 	add	local10, local14
0af40     02 38 66 F0 | 	shl	local10, #2
0af44     03 00 00 FF 
0af48     00 E4 85 F1 | 	sub	objptr, ##1536
0af4c     F2 38 02 F1 | 	add	local10, objptr
0af50     1C 03 68 FC | 	wrlong	#1, local10
0af54     03 00 00 FF 
0af58     00 E4 05 F1 | 	add	objptr, ##1536
0af5c     F2 34 02 FB | 	rdlong	local08, objptr
0af60     01 34 06 F1 | 	add	local08, #1
0af64     F2 34 62 FC | 	wrlong	local08, objptr
0af68     4A 00 00 FF 
0af6c     9C E4 85 F1 | 	sub	objptr, ##38044
0af70                 | LR__0936
0af70     4A 00 00 FF 
0af74     9C E4 05 F1 | 	add	objptr, ##38044
0af78     F2 40 02 FB | 	rdlong	local14, objptr
0af7c     20 39 02 F6 | 	mov	local10, local14
0af80     01 38 66 F0 | 	shl	local10, #1
0af84     20 39 02 F1 | 	add	local10, local14
0af88     02 38 66 F0 | 	shl	local10, #2
0af8c     03 00 00 FF 
0af90     00 E4 85 F1 | 	sub	objptr, ##1536
0af94     F2 38 02 F1 | 	add	local10, objptr
0af98     08 38 06 F1 | 	add	local10, #8
0af9c     1C 39 68 FC | 	wrlong	#28, local10
0afa0     03 00 00 FF 
0afa4     00 E4 05 F1 | 	add	objptr, ##1536
0afa8     F2 40 02 FB | 	rdlong	local14, objptr
0afac     20 39 02 F6 | 	mov	local10, local14
0afb0     01 38 66 F0 | 	shl	local10, #1
0afb4     20 39 02 F1 | 	add	local10, local14
0afb8     02 38 66 F0 | 	shl	local10, #2
0afbc     03 00 00 FF 
0afc0     00 E4 85 F1 | 	sub	objptr, ##1536
0afc4     F2 38 02 F1 | 	add	local10, objptr
0afc8     1C 33 62 FC | 	wrlong	local07, local10
0afcc     03 00 00 FF 
0afd0     00 E4 05 F1 | 	add	objptr, ##1536
0afd4     F2 40 02 FB | 	rdlong	local14, objptr
0afd8     01 40 06 F1 | 	add	local14, #1
0afdc     F2 40 62 FC | 	wrlong	local14, objptr
0afe0     20 39 02 F6 | 	mov	local10, local14
0afe4     01 38 66 F0 | 	shl	local10, #1
0afe8     20 39 02 F1 | 	add	local10, local14
0afec     02 38 66 F0 | 	shl	local10, #2
0aff0     03 00 00 FF 
0aff4     00 E4 85 F1 | 	sub	objptr, ##1536
0aff8     F2 38 02 F1 | 	add	local10, objptr
0affc     08 38 06 F1 | 	add	local10, #8
0b000     1C 95 68 FC | 	wrlong	#74, local10
0b004     03 00 00 FF 
0b008     00 E4 05 F1 | 	add	objptr, ##1536
0b00c     F2 40 02 FB | 	rdlong	local14, objptr
0b010     20 39 02 F6 | 	mov	local10, local14
0b014     01 38 66 F0 | 	shl	local10, #1
0b018     20 39 02 F1 | 	add	local10, local14
0b01c     02 38 66 F0 | 	shl	local10, #2
0b020     03 00 00 FF 
0b024     00 E4 85 F1 | 	sub	objptr, ##1536
0b028     F2 38 02 F1 | 	add	local10, objptr
0b02c     1C 01 68 FC | 	wrlong	#0, local10
0b030     03 00 00 FF 
0b034     00 E4 05 F1 | 	add	objptr, ##1536
0b038     F2 34 02 FB | 	rdlong	local08, objptr
0b03c     01 34 06 F1 | 	add	local08, #1
0b040     F2 34 62 FC | 	wrlong	local08, objptr
0b044     4A 00 00 FF 
0b048     9C E4 85 F1 | 	sub	objptr, ##38044
0b04c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0b04c                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0b04c                 | ' return 0
0b04c     00 FA 05 F6 | 	mov	result1, #0
0b050                 | LR__0937
0b050     A7 F0 03 F6 | 	mov	ptra, fp
0b054     B2 00 A0 FD | 	call	#popregs_
0b058                 | _compile_for_ret
0b058     2D 00 64 FD | 	ret
0b05c                 | 
0b05c                 | ' 
0b05c                 | ' '----- compile 'next' command. 
0b05c                 | ' 
0b05c                 | ' function compile_next() as ulong
0b05c                 | _compile_next
0b05c     04 4A 05 F6 | 	mov	COUNT_, #4
0b060     A8 00 A0 FD | 	call	#pushregs_
0b064     37 00 00 FF 
0b068     64 E4 05 F1 | 	add	objptr, ##28260
0b06c     F2 14 02 FB | 	rdlong	arg02, objptr
0b070     03 14 66 F0 | 	shl	arg02, #3
0b074     02 00 00 FF 
0b078     38 E4 85 F1 | 	sub	objptr, ##1080
0b07c     F2 14 02 F1 | 	add	arg02, objptr
0b080     0A 27 02 FB | 	rdlong	local01, arg02
0b084                 | ' 
0b084                 | ' varname$=lparts(ct).part$ 
0b084                 | ' if varnum=0 then return 35
0b084     04 E4 85 F1 | 	sub	objptr, #4
0b088     F2 14 0A FB | 	rdlong	arg02, objptr wz
0b08c     35 00 00 FF 
0b090     28 E4 85 F1 | 	sub	objptr, ##27176
0b094     23 FA 05 A6 |  if_e	mov	result1, #35
0b098     4C 01 90 AD |  if_e	jmp	#LR__0942
0b09c     01 28 66 F6 | 	neg	local02, #1
0b0a0                 | ' j=-1
0b0a0                 | ' for i=0 to varnum-1
0b0a0     00 2A 06 F6 | 	mov	local03, #0
0b0a4     35 00 00 FF 
0b0a8     28 E4 05 F1 | 	add	objptr, ##27176
0b0ac     F2 2C 02 FB | 	rdlong	local04, objptr
0b0b0     35 00 00 FF 
0b0b4     28 E4 85 F1 | 	sub	objptr, ##27176
0b0b8                 | LR__0940
0b0b8     16 2B 12 F2 | 	cmp	local03, local04 wc
0b0bc     38 00 90 3D |  if_ae	jmp	#LR__0941
0b0c0                 | '   if variables(i).name=varname$ then j=i : exit
0b0c0     15 15 02 F6 | 	mov	arg02, local03
0b0c4     04 14 66 F0 | 	shl	arg02, #4
0b0c8     15 00 00 FF 
0b0cc     18 E4 05 F1 | 	add	objptr, ##10776
0b0d0     F2 14 02 F1 | 	add	arg02, objptr
0b0d4     0A 13 02 FB | 	rdlong	arg01, arg02
0b0d8     13 15 02 F6 | 	mov	arg02, local01
0b0dc     15 00 00 FF 
0b0e0     18 E4 85 F1 | 	sub	objptr, ##10776
0b0e4     54 D0 B1 FD | 	call	#__system___string_cmp
0b0e8     00 FA 0D F2 | 	cmp	result1, #0 wz
0b0ec     15 29 02 A6 |  if_e	mov	local02, local03
0b0f0     01 2A 06 51 |  if_ne	add	local03, #1
0b0f4     C0 FF 9F 5D |  if_ne	jmp	#LR__0940
0b0f8                 | LR__0941
0b0f8                 | ' if j=-1 then return 35
0b0f8     FF FF 7F FF 
0b0fc     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0b100     23 FA 05 A6 |  if_e	mov	result1, #35
0b104     E0 00 90 AD |  if_e	jmp	#LR__0942
0b108     4A 00 00 FF 
0b10c     9C E4 05 F1 | 	add	objptr, ##38044
0b110     F2 2C 02 FB | 	rdlong	local04, objptr
0b114     16 2B 02 F6 | 	mov	local03, local04
0b118     01 2A 66 F0 | 	shl	local03, #1
0b11c     16 2B 02 F1 | 	add	local03, local04
0b120     02 2A 66 F0 | 	shl	local03, #2
0b124     03 00 00 FF 
0b128     00 E4 85 F1 | 	sub	objptr, ##1536
0b12c     F2 2A 02 F1 | 	add	local03, objptr
0b130     08 2A 06 F1 | 	add	local03, #8
0b134     15 39 68 FC | 	wrlong	#28, local03
0b138     03 00 00 FF 
0b13c     00 E4 05 F1 | 	add	objptr, ##1536
0b140     F2 2C 02 FB | 	rdlong	local04, objptr
0b144     16 2B 02 F6 | 	mov	local03, local04
0b148     01 2A 66 F0 | 	shl	local03, #1
0b14c     16 2B 02 F1 | 	add	local03, local04
0b150     02 2A 66 F0 | 	shl	local03, #2
0b154     03 00 00 FF 
0b158     00 E4 85 F1 | 	sub	objptr, ##1536
0b15c     F2 2A 02 F1 | 	add	local03, objptr
0b160     15 29 62 FC | 	wrlong	local02, local03
0b164     03 00 00 FF 
0b168     00 E4 05 F1 | 	add	objptr, ##1536
0b16c     F2 2C 02 FB | 	rdlong	local04, objptr
0b170     01 2C 06 F1 | 	add	local04, #1
0b174     F2 2C 62 FC | 	wrlong	local04, objptr
0b178     16 2B 02 F6 | 	mov	local03, local04
0b17c     01 2A 66 F0 | 	shl	local03, #1
0b180     16 2B 02 F1 | 	add	local03, local04
0b184     02 2A 66 F0 | 	shl	local03, #2
0b188     03 00 00 FF 
0b18c     00 E4 85 F1 | 	sub	objptr, ##1536
0b190     F2 2A 02 F1 | 	add	local03, objptr
0b194     08 2A 06 F1 | 	add	local03, #8
0b198     15 97 68 FC | 	wrlong	#75, local03
0b19c     03 00 00 FF 
0b1a0     00 E4 05 F1 | 	add	objptr, ##1536
0b1a4     F2 2C 02 FB | 	rdlong	local04, objptr
0b1a8     16 2B 02 F6 | 	mov	local03, local04
0b1ac     01 2A 66 F0 | 	shl	local03, #1
0b1b0     16 2B 02 F1 | 	add	local03, local04
0b1b4     02 2A 66 F0 | 	shl	local03, #2
0b1b8     03 00 00 FF 
0b1bc     00 E4 85 F1 | 	sub	objptr, ##1536
0b1c0     F2 2A 02 F1 | 	add	local03, objptr
0b1c4     15 01 68 FC | 	wrlong	#0, local03
0b1c8     03 00 00 FF 
0b1cc     00 E4 05 F1 | 	add	objptr, ##1536
0b1d0     F2 2C 02 FB | 	rdlong	local04, objptr
0b1d4     01 2C 06 F1 | 	add	local04, #1
0b1d8     F2 2C 62 FC | 	wrlong	local04, objptr
0b1dc     4A 00 00 FF 
0b1e0     9C E4 85 F1 | 	sub	objptr, ##38044
0b1e4                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0b1e4                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0b1e4                 | ' return 0
0b1e4     00 FA 05 F6 | 	mov	result1, #0
0b1e8                 | LR__0942
0b1e8     A7 F0 03 F6 | 	mov	ptra, fp
0b1ec     B2 00 A0 FD | 	call	#popregs_
0b1f0                 | _compile_next_ret
0b1f0     2D 00 64 FD | 	ret
0b1f4                 | 
0b1f4                 | ' 
0b1f4                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0b1f4                 | ' 
0b1f4                 | ' function compile_gosub() as ulong
0b1f4                 | _compile_gosub
0b1f4     02 4A 05 F6 | 	mov	COUNT_, #2
0b1f8     A8 00 A0 FD | 	call	#pushregs_
0b1fc     4A 00 00 FF 
0b200     9C E4 05 F1 | 	add	objptr, ##38044
0b204     F2 26 02 FB | 	rdlong	local01, objptr
0b208     13 29 02 F6 | 	mov	local02, local01
0b20c     01 28 66 F0 | 	shl	local02, #1
0b210     13 29 02 F1 | 	add	local02, local01
0b214     02 28 66 F0 | 	shl	local02, #2
0b218     03 00 00 FF 
0b21c     00 E4 85 F1 | 	sub	objptr, ##1536
0b220     F2 28 02 F1 | 	add	local02, objptr
0b224     08 28 06 F1 | 	add	local02, #8
0b228     14 53 69 FC | 	wrlong	#169, local02
0b22c     03 00 00 FF 
0b230     00 E4 05 F1 | 	add	objptr, ##1536
0b234     F2 28 02 FB | 	rdlong	local02, objptr
0b238     01 28 06 F1 | 	add	local02, #1
0b23c     F2 28 62 FC | 	wrlong	local02, objptr
0b240     4A 00 00 FF 
0b244     9C E4 85 F1 | 	sub	objptr, ##38044
0b248     0C 00 B0 FD | 	call	#_compile_goto
0b24c                 | ' compiledline(lineptr).result_type=token_gosub
0b24c                 | ' lineptr+=1
0b24c                 | ' err=compile_goto()
0b24c                 | ' return err
0b24c     A7 F0 03 F6 | 	mov	ptra, fp
0b250     B2 00 A0 FD | 	call	#popregs_
0b254                 | _compile_gosub_ret
0b254     2D 00 64 FD | 	ret
0b258                 | 
0b258                 | ' 
0b258                 | ' '----- compile 'goto' 
0b258                 | ' 
0b258                 | ' function compile_goto() as ulong
0b258                 | _compile_goto
0b258     03 4A 05 F6 | 	mov	COUNT_, #3
0b25c     A8 00 A0 FD | 	call	#pushregs_
0b260     34 F0 07 F1 | 	add	ptra, #52
0b264                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0b264     37 00 00 FF 
0b268     64 E4 05 F1 | 	add	objptr, ##28260
0b26c     F2 16 02 FB | 	rdlong	arg03, objptr
0b270     03 16 66 F0 | 	shl	arg03, #3
0b274     02 00 00 FF 
0b278     38 E4 85 F1 | 	sub	objptr, ##1080
0b27c     F2 16 02 F1 | 	add	arg03, objptr
0b280     04 16 06 F1 | 	add	arg03, #4
0b284     0B 17 02 FB | 	rdlong	arg03, arg03
0b288     01 00 00 FF 
0b28c     00 16 0E F2 | 	cmp	arg03, ##512 wz
0b290     35 00 00 FF 
0b294     2C E4 85 F1 | 	sub	objptr, ##27180
0b298     CC 02 90 5D |  if_ne	jmp	#LR__0955
0b29c     37 00 00 FF 
0b2a0     64 E4 05 F1 | 	add	objptr, ##28260
0b2a4     F2 16 02 FB | 	rdlong	arg03, objptr
0b2a8     01 16 06 F1 | 	add	arg03, #1
0b2ac     03 16 66 F0 | 	shl	arg03, #3
0b2b0     02 00 00 FF 
0b2b4     38 E4 85 F1 | 	sub	objptr, ##1080
0b2b8     F2 16 02 F1 | 	add	arg03, objptr
0b2bc     04 16 06 F1 | 	add	arg03, #4
0b2c0     0B 17 02 FB | 	rdlong	arg03, arg03
0b2c4     FE 17 0E F2 | 	cmp	arg03, #510 wz
0b2c8     35 00 00 FF 
0b2cc     2C E4 85 F1 | 	sub	objptr, ##27180
0b2d0     94 02 90 5D |  if_ne	jmp	#LR__0955
0b2d4     37 00 00 FF 
0b2d8     64 E4 05 F1 | 	add	objptr, ##28260
0b2dc     F2 16 02 FB | 	rdlong	arg03, objptr
0b2e0     03 16 66 F0 | 	shl	arg03, #3
0b2e4     02 00 00 FF 
0b2e8     38 E4 85 F1 | 	sub	objptr, ##1080
0b2ec     F2 16 02 F1 | 	add	arg03, objptr
0b2f0     0B 13 02 FB | 	rdlong	arg01, arg03
0b2f4     00 14 06 F6 | 	mov	arg02, #0
0b2f8     35 00 00 FF 
0b2fc     2C E4 85 F1 | 	sub	objptr, ##27180
0b300     04 03 B2 FD | 	call	#__system____builtin_atoi
0b304     04 4E 05 F1 | 	add	fp, #4
0b308     A7 FA 61 FC | 	wrlong	result1, fp
0b30c     4A 00 00 FF 
0b310     9C E4 05 F1 | 	add	objptr, ##38044
0b314     F2 26 02 FB | 	rdlong	local01, objptr
0b318     13 29 02 F6 | 	mov	local02, local01
0b31c     01 28 66 F0 | 	shl	local02, #1
0b320     13 29 02 F1 | 	add	local02, local01
0b324     02 28 66 F0 | 	shl	local02, #2
0b328     03 00 00 FF 
0b32c     00 E4 85 F1 | 	sub	objptr, ##1536
0b330     F2 28 02 F1 | 	add	local02, objptr
0b334     08 28 06 F1 | 	add	local02, #8
0b338     14 9D 68 FC | 	wrlong	#78, local02
0b33c     03 00 00 FF 
0b340     0C E4 05 F1 | 	add	objptr, ##1548
0b344     F2 2A 02 FB | 	rdlong	local03, objptr
0b348     4A 00 00 FF 
0b34c     A8 E4 85 F1 | 	sub	objptr, ##38056
0b350     04 4E 05 F1 | 	add	fp, #4
0b354     A7 2A 62 FC | 	wrlong	local03, fp
0b358     08 4E 85 F1 | 	sub	fp, #8
0b35c                 | '   gotoline=val%(lparts(ct).part$) 
0b35c                 | '   compiledline(lineptr).result_type=token_fast_goto
0b35c                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0b35c                 | '   do
0b35c                 | LR__0950
0b35c     10 4E 05 F1 | 	add	fp, #16
0b360     A7 12 02 F6 | 	mov	arg01, fp
0b364     08 4E 85 F1 | 	sub	fp, #8
0b368     A7 14 02 FB | 	rdlong	arg02, fp
0b36c     08 4E 85 F1 | 	sub	fp, #8
0b370     18 16 06 F6 | 	mov	arg03, #24
0b374     0B 00 00 FF 
0b378     CC E4 05 F1 | 	add	objptr, ##5836
0b37c     F0 C0 B1 FD | 	call	#_psram_spin2_read1
0b380     0B 00 00 FF 
0b384     CC E4 85 F1 | 	sub	objptr, ##5836
0b388                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0b388                 | '     if gotoheader(0)<>$FFFFFFFF then
0b388     10 4E 05 F1 | 	add	fp, #16
0b38c     A7 2A 02 FB | 	rdlong	local03, fp
0b390     10 4E 85 F1 | 	sub	fp, #16
0b394     FF FF 7F FF 
0b398     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
0b39c     24 00 90 AD |  if_e	jmp	#LR__0951
0b3a0     08 4E 05 F1 | 	add	fp, #8
0b3a4     A7 2A 02 FB | 	rdlong	local03, fp
0b3a8     04 4E 05 F1 | 	add	fp, #4
0b3ac     A7 2A 62 FC | 	wrlong	local03, fp
0b3b0     18 4E 05 F1 | 	add	fp, #24
0b3b4     A7 2A 02 FB | 	rdlong	local03, fp
0b3b8     1C 4E 85 F1 | 	sub	fp, #28
0b3bc     A7 2A 62 FC | 	wrlong	local03, fp
0b3c0     08 4E 85 F1 | 	sub	fp, #8
0b3c4                 | LR__0951
0b3c4     24 4E 05 F1 | 	add	fp, #36
0b3c8     A7 2A 02 FB | 	rdlong	local03, fp
0b3cc     24 4E 85 F1 | 	sub	fp, #36
0b3d0     FF FF 3F FF 
0b3d4     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0b3d8     10 4E 05 51 |  if_ne	add	fp, #16
0b3dc     A7 26 02 5B |  if_ne	rdlong	local01, fp
0b3e0     10 4E 85 51 |  if_ne	sub	fp, #16
0b3e4     FF FF 7F 5F 
0b3e8     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
0b3ec     1C 00 90 AD |  if_e	jmp	#LR__0952
0b3f0     10 4E 05 F1 | 	add	fp, #16
0b3f4     A7 2A 02 FB | 	rdlong	local03, fp
0b3f8     0C 4E 85 F1 | 	sub	fp, #12
0b3fc     A7 28 02 FB | 	rdlong	local02, fp
0b400     04 4E 85 F1 | 	sub	fp, #4
0b404     14 2B 0A F2 | 	cmp	local03, local02 wz
0b408     50 FF 9F 5D |  if_ne	jmp	#LR__0950
0b40c                 | LR__0952
0b40c                 | '   if gotoheader(0)=gotoline then
0b40c     10 4E 05 F1 | 	add	fp, #16
0b410     A7 2A 02 FB | 	rdlong	local03, fp
0b414     0C 4E 85 F1 | 	sub	fp, #12
0b418     A7 26 02 FB | 	rdlong	local01, fp
0b41c     04 4E 85 F1 | 	sub	fp, #4
0b420     13 2B 0A F2 | 	cmp	local03, local01 wz
0b424     7C 00 90 5D |  if_ne	jmp	#LR__0953
0b428     4A 00 00 FF 
0b42c     9C E4 05 F1 | 	add	objptr, ##38044
0b430     F2 26 02 FB | 	rdlong	local01, objptr
0b434     13 29 02 F6 | 	mov	local02, local01
0b438     01 28 66 F0 | 	shl	local02, #1
0b43c     13 29 02 F1 | 	add	local02, local01
0b440     02 28 66 F0 | 	shl	local02, #2
0b444     03 00 00 FF 
0b448     00 E4 85 F1 | 	sub	objptr, ##1536
0b44c     F2 28 02 F1 | 	add	local02, objptr
0b450     0C 4E 05 F1 | 	add	fp, #12
0b454     A7 2A 02 FB | 	rdlong	local03, fp
0b458     14 2B 62 FC | 	wrlong	local03, local02
0b45c     03 00 00 FF 
0b460     00 E4 05 F1 | 	add	objptr, ##1536
0b464     F2 26 02 FB | 	rdlong	local01, objptr
0b468     13 29 02 F6 | 	mov	local02, local01
0b46c     01 28 66 F0 | 	shl	local02, #1
0b470     13 29 02 F1 | 	add	local02, local01
0b474     02 28 66 F0 | 	shl	local02, #2
0b478     03 00 00 FF 
0b47c     00 E4 85 F1 | 	sub	objptr, ##1536
0b480     F2 28 02 F1 | 	add	local02, objptr
0b484     08 4E 85 F1 | 	sub	fp, #8
0b488     A7 2A 02 FB | 	rdlong	local03, fp
0b48c     04 4E 85 F1 | 	sub	fp, #4
0b490     04 28 06 F1 | 	add	local02, #4
0b494     14 2B 62 FC | 	wrlong	local03, local02
0b498     47 00 00 FF 
0b49c     9C E4 85 F1 | 	sub	objptr, ##36508
0b4a0     A4 00 90 FD | 	jmp	#LR__0954
0b4a4                 | LR__0953
0b4a4     4A 00 00 FF 
0b4a8     9C E4 05 F1 | 	add	objptr, ##38044
0b4ac     F2 26 02 FB | 	rdlong	local01, objptr
0b4b0     13 29 02 F6 | 	mov	local02, local01
0b4b4     01 28 66 F0 | 	shl	local02, #1
0b4b8     13 29 02 F1 | 	add	local02, local01
0b4bc     02 28 66 F0 | 	shl	local02, #2
0b4c0     03 00 00 FF 
0b4c4     00 E4 85 F1 | 	sub	objptr, ##1536
0b4c8     F2 28 02 F1 | 	add	local02, objptr
0b4cc     00 00 C0 FF 
0b4d0     14 01 68 FC | 	wrlong	##-2147483648, local02
0b4d4     03 00 00 FF 
0b4d8     00 E4 05 F1 | 	add	objptr, ##1536
0b4dc     F2 26 02 FB | 	rdlong	local01, objptr
0b4e0     13 29 02 F6 | 	mov	local02, local01
0b4e4     01 28 66 F0 | 	shl	local02, #1
0b4e8     13 29 02 F1 | 	add	local02, local01
0b4ec     02 28 66 F0 | 	shl	local02, #2
0b4f0     03 00 00 FF 
0b4f4     00 E4 85 F1 | 	sub	objptr, ##1536
0b4f8     F2 28 02 F1 | 	add	local02, objptr
0b4fc     04 4E 05 F1 | 	add	fp, #4
0b500     A7 2A 02 FB | 	rdlong	local03, fp
0b504     04 4E 85 F1 | 	sub	fp, #4
0b508     04 28 06 F1 | 	add	local02, #4
0b50c     14 2B 62 FC | 	wrlong	local03, local02
0b510     03 00 00 FF 
0b514     00 E4 05 F1 | 	add	objptr, ##1536
0b518     F2 26 02 FB | 	rdlong	local01, objptr
0b51c     13 29 02 F6 | 	mov	local02, local01
0b520     01 28 66 F0 | 	shl	local02, #1
0b524     13 29 02 F1 | 	add	local02, local01
0b528     02 28 66 F0 | 	shl	local02, #2
0b52c     03 00 00 FF 
0b530     00 E4 85 F1 | 	sub	objptr, ##1536
0b534     F2 28 02 F1 | 	add	local02, objptr
0b538     08 28 06 F1 | 	add	local02, #8
0b53c     14 A7 68 FC | 	wrlong	#83, local02
0b540     47 00 00 FF 
0b544     9C E4 85 F1 | 	sub	objptr, ##36508
0b548                 | LR__0954
0b548     4A 00 00 FF 
0b54c     9C E4 05 F1 | 	add	objptr, ##38044
0b550     F2 2A 02 FB | 	rdlong	local03, objptr
0b554     01 2A 06 F1 | 	add	local03, #1
0b558     F2 2A 62 FC | 	wrlong	local03, objptr
0b55c     4A 00 00 FF 
0b560     9C E4 85 F1 | 	sub	objptr, ##38044
0b564     D0 00 90 FD | 	jmp	#LR__0956
0b568                 | LR__0955
0b568     98 0A B0 FD | 	call	#_expr
0b56c     30 4E 05 F1 | 	add	fp, #48
0b570     A7 9E 68 FC | 	wrlong	#79, fp
0b574     08 4E 85 F1 | 	sub	fp, #8
0b578     A7 00 68 FC | 	wrlong	#0, fp
0b57c     04 4E 05 F1 | 	add	fp, #4
0b580     A7 2A 02 FB | 	rdlong	local03, fp
0b584     04 4E 05 F1 | 	add	fp, #4
0b588     A7 26 02 FB | 	rdlong	local01, fp
0b58c     30 4E 85 F1 | 	sub	fp, #48
0b590     4A 00 00 FF 
0b594     9C E4 05 F1 | 	add	objptr, ##38044
0b598     F2 28 02 FB | 	rdlong	local02, objptr
0b59c     14 17 02 F6 | 	mov	arg03, local02
0b5a0     01 16 66 F0 | 	shl	arg03, #1
0b5a4     14 17 02 F1 | 	add	arg03, local02
0b5a8     02 16 66 F0 | 	shl	arg03, #2
0b5ac     03 00 00 FF 
0b5b0     00 E4 85 F1 | 	sub	objptr, ##1536
0b5b4     F2 16 02 F1 | 	add	arg03, objptr
0b5b8     0B 01 68 FC | 	wrlong	#0, arg03
0b5bc     03 00 00 FF 
0b5c0     00 E4 05 F1 | 	add	objptr, ##1536
0b5c4     F2 28 02 FB | 	rdlong	local02, objptr
0b5c8     14 17 02 F6 | 	mov	arg03, local02
0b5cc     01 16 66 F0 | 	shl	arg03, #1
0b5d0     14 17 02 F1 | 	add	arg03, local02
0b5d4     02 16 66 F0 | 	shl	arg03, #2
0b5d8     03 00 00 FF 
0b5dc     00 E4 85 F1 | 	sub	objptr, ##1536
0b5e0     F2 16 02 F1 | 	add	arg03, objptr
0b5e4     04 16 06 F1 | 	add	arg03, #4
0b5e8     0B 2B 62 FC | 	wrlong	local03, arg03
0b5ec     03 00 00 FF 
0b5f0     00 E4 05 F1 | 	add	objptr, ##1536
0b5f4     F2 2A 02 FB | 	rdlong	local03, objptr
0b5f8     15 29 02 F6 | 	mov	local02, local03
0b5fc     01 28 66 F0 | 	shl	local02, #1
0b600     15 29 02 F1 | 	add	local02, local03
0b604     02 28 66 F0 | 	shl	local02, #2
0b608     03 00 00 FF 
0b60c     00 E4 85 F1 | 	sub	objptr, ##1536
0b610     F2 28 02 F1 | 	add	local02, objptr
0b614     08 28 06 F1 | 	add	local02, #8
0b618     14 27 62 FC | 	wrlong	local01, local02
0b61c     03 00 00 FF 
0b620     00 E4 05 F1 | 	add	objptr, ##1536
0b624     F2 2A 02 FB | 	rdlong	local03, objptr
0b628     01 2A 06 F1 | 	add	local03, #1
0b62c     F2 2A 62 FC | 	wrlong	local03, objptr
0b630     4A 00 00 FF 
0b634     9C E4 85 F1 | 	sub	objptr, ##38044
0b638                 | LR__0956
0b638                 | ' return 0
0b638     00 FA 05 F6 | 	mov	result1, #0
0b63c     A7 F0 03 F6 | 	mov	ptra, fp
0b640     B2 00 A0 FD | 	call	#popregs_
0b644                 | _compile_goto_ret
0b644     2D 00 64 FD | 	ret
0b648                 | 
0b648                 | ' 
0b648                 | ' '----- compile 'on' (on..goto, on..gosub) 
0b648                 | ' 
0b648                 | ' function compile_on() as ulong
0b648                 | _compile_on
0b648     04 4A 05 F6 | 	mov	COUNT_, #4
0b64c     A8 00 A0 FD | 	call	#pushregs_
0b650     B0 09 B0 FD | 	call	#_expr
0b654     00 26 06 F6 | 	mov	local01, #0
0b658     4A 00 00 FF 
0b65c     9C E4 05 F1 | 	add	objptr, ##38044
0b660     F2 14 02 FB | 	rdlong	arg02, objptr
0b664     0A 13 02 F6 | 	mov	arg01, arg02
0b668     01 12 66 F0 | 	shl	arg01, #1
0b66c     0A 13 02 F1 | 	add	arg01, arg02
0b670     02 12 66 F0 | 	shl	arg01, #2
0b674     03 00 00 FF 
0b678     00 E4 85 F1 | 	sub	objptr, ##1536
0b67c     F2 12 02 F1 | 	add	arg01, objptr
0b680     08 12 06 F1 | 	add	arg01, #8
0b684     09 83 69 FC | 	wrlong	#193, arg01
0b688     03 00 00 FF 
0b68c     00 E4 05 F1 | 	add	objptr, ##1536
0b690     F2 14 02 FB | 	rdlong	arg02, objptr
0b694     0A 29 02 F6 | 	mov	local02, arg02
0b698     01 14 06 F1 | 	add	arg02, #1
0b69c     F2 14 62 FC | 	wrlong	arg02, objptr
0b6a0                 | ' expr()
0b6a0                 | ' 'print lparts(ct).part$ 'ok
0b6a0                 | ' numpar=0
0b6a0                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0b6a0                 | ' if lparts(ct).part$="goto" then
0b6a0     13 00 00 FF 
0b6a4     38 E4 85 F1 | 	sub	objptr, ##9784
0b6a8     F2 14 02 FB | 	rdlong	arg02, objptr
0b6ac     03 14 66 F0 | 	shl	arg02, #3
0b6b0     02 00 00 FF 
0b6b4     38 E4 85 F1 | 	sub	objptr, ##1080
0b6b8     F2 14 02 F1 | 	add	arg02, objptr
0b6bc     0A 13 02 FB | 	rdlong	arg01, arg02
0b6c0     C1 01 00 FF 
0b6c4     FA 15 06 F6 | 	mov	arg02, ##@LR__5982
0b6c8     35 00 00 FF 
0b6cc     2C E4 85 F1 | 	sub	objptr, ##27180
0b6d0     68 CA B1 FD | 	call	#__system___string_cmp
0b6d4     00 FA 0D F2 | 	cmp	result1, #0 wz
0b6d8     14 02 90 5D |  if_ne	jmp	#LR__0965
0b6dc     37 00 00 FF 
0b6e0     64 E4 05 F1 | 	add	objptr, ##28260
0b6e4     F2 2A 02 FB | 	rdlong	local03, objptr
0b6e8     37 00 00 FF 
0b6ec     64 E4 85 F1 | 	sub	objptr, ##28260
0b6f0     01 2A 06 F1 | 	add	local03, #1
0b6f4                 | '   i=ct+1
0b6f4                 | '   do
0b6f4                 | LR__0960
0b6f4                 | '     if lparts(i).token=token_decimal then
0b6f4     15 FB 01 F6 | 	mov	result1, local03
0b6f8     03 FA 65 F0 | 	shl	result1, #3
0b6fc     35 00 00 FF 
0b700     2C E4 05 F1 | 	add	objptr, ##27180
0b704     F2 FA 01 F1 | 	add	result1, objptr
0b708     04 FA 05 F1 | 	add	result1, #4
0b70c     FD FA 01 FB | 	rdlong	result1, result1
0b710     01 00 00 FF 
0b714     00 FA 0D F2 | 	cmp	result1, ##512 wz
0b718     35 00 00 FF 
0b71c     2C E4 85 F1 | 	sub	objptr, ##27180
0b720     DC 00 90 5D |  if_ne	jmp	#LR__0961
0b724     4A 00 00 FF 
0b728     9C E4 05 F1 | 	add	objptr, ##38044
0b72c     F2 FA 01 FB | 	rdlong	result1, objptr
0b730     FD 14 02 F6 | 	mov	arg02, result1
0b734     01 14 66 F0 | 	shl	arg02, #1
0b738     FD 14 02 F1 | 	add	arg02, result1
0b73c     02 14 66 F0 | 	shl	arg02, #2
0b740     03 00 00 FF 
0b744     00 E4 85 F1 | 	sub	objptr, ##1536
0b748     F2 14 02 F1 | 	add	arg02, objptr
0b74c     00 00 C0 FF 
0b750     0A 01 68 FC | 	wrlong	##-2147483648, arg02
0b754     03 00 00 FF 
0b758     00 E4 05 F1 | 	add	objptr, ##1536
0b75c     F2 14 02 FB | 	rdlong	arg02, objptr
0b760     0A 2D 02 F6 | 	mov	local04, arg02
0b764     01 2C 66 F0 | 	shl	local04, #1
0b768     0A 2D 02 F1 | 	add	local04, arg02
0b76c     02 2C 66 F0 | 	shl	local04, #2
0b770     03 00 00 FF 
0b774     00 E4 85 F1 | 	sub	objptr, ##1536
0b778     F2 2C 02 F1 | 	add	local04, objptr
0b77c     15 15 02 F6 | 	mov	arg02, local03
0b780     03 14 66 F0 | 	shl	arg02, #3
0b784     12 00 00 FF 
0b788     70 E4 85 F1 | 	sub	objptr, ##9328
0b78c     F2 14 02 F1 | 	add	arg02, objptr
0b790     0A 13 02 FB | 	rdlong	arg01, arg02
0b794     00 14 06 F6 | 	mov	arg02, #0
0b798     35 00 00 FF 
0b79c     2C E4 85 F1 | 	sub	objptr, ##27180
0b7a0     64 FE B1 FD | 	call	#__system____builtin_atoi
0b7a4     04 2C 06 F1 | 	add	local04, #4
0b7a8     16 FB 61 FC | 	wrlong	result1, local04
0b7ac     4A 00 00 FF 
0b7b0     9C E4 05 F1 | 	add	objptr, ##38044
0b7b4     F2 14 02 FB | 	rdlong	arg02, objptr
0b7b8     0A 2D 02 F6 | 	mov	local04, arg02
0b7bc     01 2C 66 F0 | 	shl	local04, #1
0b7c0     0A 2D 02 F1 | 	add	local04, arg02
0b7c4     02 2C 66 F0 | 	shl	local04, #2
0b7c8     03 00 00 FF 
0b7cc     00 E4 85 F1 | 	sub	objptr, ##1536
0b7d0     F2 2C 02 F1 | 	add	local04, objptr
0b7d4     08 2C 06 F1 | 	add	local04, #8
0b7d8     16 A7 68 FC | 	wrlong	#83, local04
0b7dc     03 00 00 FF 
0b7e0     00 E4 05 F1 | 	add	objptr, ##1536
0b7e4     F2 2C 02 FB | 	rdlong	local04, objptr
0b7e8     01 2C 06 F1 | 	add	local04, #1
0b7ec     F2 2C 62 FC | 	wrlong	local04, objptr
0b7f0     4A 00 00 FF 
0b7f4     9C E4 85 F1 | 	sub	objptr, ##38044
0b7f8     01 26 06 F1 | 	add	local01, #1
0b7fc     08 00 90 FD | 	jmp	#LR__0962
0b800                 | LR__0961
0b800                 | '       return 17
0b800     11 FA 05 F6 | 	mov	result1, #17
0b804     5C 04 90 FD | 	jmp	#LR__0975
0b808                 | LR__0962
0b808     01 2A 06 F1 | 	add	local03, #1
0b80c                 | '     i+=1
0b80c                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b80c     15 2D 02 F6 | 	mov	local04, local03
0b810     03 2C 66 F0 | 	shl	local04, #3
0b814     35 00 00 FF 
0b818     2C E4 05 F1 | 	add	objptr, ##27180
0b81c     F2 2C 02 F1 | 	add	local04, objptr
0b820     04 2C 06 F1 | 	add	local04, #4
0b824     16 2D 02 FB | 	rdlong	local04, local04
0b828     11 2C 0E F2 | 	cmp	local04, #17 wz
0b82c     35 00 00 FF 
0b830     2C E4 85 F1 | 	sub	objptr, ##27180
0b834     30 00 90 AD |  if_e	jmp	#LR__0963
0b838     15 2D 02 F6 | 	mov	local04, local03
0b83c     03 2C 66 F0 | 	shl	local04, #3
0b840     35 00 00 FF 
0b844     2C E4 05 F1 | 	add	objptr, ##27180
0b848     F2 2C 02 F1 | 	add	local04, objptr
0b84c     04 2C 06 F1 | 	add	local04, #4
0b850     16 2D 02 FB | 	rdlong	local04, local04
0b854     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b858     35 00 00 FF 
0b85c     2C E4 85 F1 | 	sub	objptr, ##27180
0b860     15 FA 05 56 |  if_ne	mov	result1, #21
0b864     FC 03 90 5D |  if_ne	jmp	#LR__0975
0b868                 | LR__0963
0b868                 | '     if lparts(i).token=token_end then exit loop
0b868     15 2D 02 F6 | 	mov	local04, local03
0b86c     03 2C 66 F0 | 	shl	local04, #3
0b870     35 00 00 FF 
0b874     2C E4 05 F1 | 	add	objptr, ##27180
0b878     F2 2C 02 F1 | 	add	local04, objptr
0b87c     04 2C 06 F1 | 	add	local04, #4
0b880     16 2D 02 FB | 	rdlong	local04, local04
0b884     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b888     35 00 00 FF 
0b88c     2C E4 85 F1 | 	sub	objptr, ##27180
0b890     30 00 90 AD |  if_e	jmp	#LR__0964
0b894     01 2A 06 F1 | 	add	local03, #1
0b898     15 2D 02 F6 | 	mov	local04, local03
0b89c     03 2C 66 F0 | 	shl	local04, #3
0b8a0     35 00 00 FF 
0b8a4     2C E4 05 F1 | 	add	objptr, ##27180
0b8a8     F2 2C 02 F1 | 	add	local04, objptr
0b8ac     04 2C 06 F1 | 	add	local04, #4
0b8b0     16 2D 02 FB | 	rdlong	local04, local04
0b8b4     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b8b8     35 00 00 FF 
0b8bc     2C E4 85 F1 | 	sub	objptr, ##27180
0b8c0     30 FE 9F 5D |  if_ne	jmp	#LR__0960
0b8c4                 | LR__0964
0b8c4     14 2D 02 F6 | 	mov	local04, local02
0b8c8     01 2C 66 F0 | 	shl	local04, #1
0b8cc     14 2D 02 F1 | 	add	local04, local02
0b8d0     02 2C 66 F0 | 	shl	local04, #2
0b8d4     47 00 00 FF 
0b8d8     9C E4 05 F1 | 	add	objptr, ##36508
0b8dc     F2 2C 02 F1 | 	add	local04, objptr
0b8e0     04 2C 06 F1 | 	add	local04, #4
0b8e4     16 03 68 FC | 	wrlong	#1, local04
0b8e8     47 00 00 FF 
0b8ec     9C E4 85 F1 | 	sub	objptr, ##36508
0b8f0                 | LR__0965
0b8f0                 | ' 
0b8f0                 | ' if lparts(ct).part$="gosub" then
0b8f0     37 00 00 FF 
0b8f4     64 E4 05 F1 | 	add	objptr, ##28260
0b8f8     F2 2A 02 FB | 	rdlong	local03, objptr
0b8fc     03 2A 66 F0 | 	shl	local03, #3
0b900     02 00 00 FF 
0b904     38 E4 85 F1 | 	sub	objptr, ##1080
0b908     F2 2A 02 F1 | 	add	local03, objptr
0b90c     15 13 02 FB | 	rdlong	arg01, local03
0b910     C1 01 00 FF 
0b914     FF 15 06 F6 | 	mov	arg02, ##@LR__5983
0b918     35 00 00 FF 
0b91c     2C E4 85 F1 | 	sub	objptr, ##27180
0b920     18 C8 B1 FD | 	call	#__system___string_cmp
0b924     00 FA 0D F2 | 	cmp	result1, #0 wz
0b928     84 02 90 5D |  if_ne	jmp	#LR__0971
0b92c     37 00 00 FF 
0b930     64 E4 05 F1 | 	add	objptr, ##28260
0b934     F2 2A 02 FB | 	rdlong	local03, objptr
0b938     37 00 00 FF 
0b93c     64 E4 85 F1 | 	sub	objptr, ##28260
0b940     01 2A 06 F1 | 	add	local03, #1
0b944                 | '   i=ct+1
0b944                 | '   do
0b944                 | LR__0966
0b944                 | '     if lparts(i).token=token_decimal then
0b944     15 2D 02 F6 | 	mov	local04, local03
0b948     03 2C 66 F0 | 	shl	local04, #3
0b94c     35 00 00 FF 
0b950     2C E4 05 F1 | 	add	objptr, ##27180
0b954     F2 2C 02 F1 | 	add	local04, objptr
0b958     04 2C 06 F1 | 	add	local04, #4
0b95c     16 2D 02 FB | 	rdlong	local04, local04
0b960     01 00 00 FF 
0b964     00 2C 0E F2 | 	cmp	local04, ##512 wz
0b968     35 00 00 FF 
0b96c     2C E4 85 F1 | 	sub	objptr, ##27180
0b970     4C 01 90 5D |  if_ne	jmp	#LR__0967
0b974     4A 00 00 FF 
0b978     9C E4 05 F1 | 	add	objptr, ##38044
0b97c     F2 FA 01 FB | 	rdlong	result1, objptr
0b980     FD 2C 02 F6 | 	mov	local04, result1
0b984     01 2C 66 F0 | 	shl	local04, #1
0b988     FD 2C 02 F1 | 	add	local04, result1
0b98c     02 2C 66 F0 | 	shl	local04, #2
0b990     03 00 00 FF 
0b994     00 E4 85 F1 | 	sub	objptr, ##1536
0b998     F2 2C 02 F1 | 	add	local04, objptr
0b99c     08 2C 06 F1 | 	add	local04, #8
0b9a0     16 53 69 FC | 	wrlong	#169, local04
0b9a4     03 00 00 FF 
0b9a8     00 E4 05 F1 | 	add	objptr, ##1536
0b9ac     F2 FA 01 FB | 	rdlong	result1, objptr
0b9b0     01 FA 05 F1 | 	add	result1, #1
0b9b4     F2 FA 61 FC | 	wrlong	result1, objptr
0b9b8     FD 2C 02 F6 | 	mov	local04, result1
0b9bc     01 2C 66 F0 | 	shl	local04, #1
0b9c0     FD 2C 02 F1 | 	add	local04, result1
0b9c4     02 2C 66 F0 | 	shl	local04, #2
0b9c8     03 00 00 FF 
0b9cc     00 E4 85 F1 | 	sub	objptr, ##1536
0b9d0     F2 2C 02 F1 | 	add	local04, objptr
0b9d4     00 00 C0 FF 
0b9d8     16 01 68 FC | 	wrlong	##-2147483648, local04
0b9dc     03 00 00 FF 
0b9e0     00 E4 05 F1 | 	add	objptr, ##1536
0b9e4     F2 FA 01 FB | 	rdlong	result1, objptr
0b9e8     FD 2C 02 F6 | 	mov	local04, result1
0b9ec     01 2C 66 F0 | 	shl	local04, #1
0b9f0     FD 2C 02 F1 | 	add	local04, result1
0b9f4     02 2C 66 F0 | 	shl	local04, #2
0b9f8     03 00 00 FF 
0b9fc     00 E4 85 F1 | 	sub	objptr, ##1536
0ba00     F2 2C 02 F1 | 	add	local04, objptr
0ba04     15 13 02 F6 | 	mov	arg01, local03
0ba08     03 12 66 F0 | 	shl	arg01, #3
0ba0c     12 00 00 FF 
0ba10     70 E4 85 F1 | 	sub	objptr, ##9328
0ba14     F2 12 02 F1 | 	add	arg01, objptr
0ba18     09 13 02 FB | 	rdlong	arg01, arg01
0ba1c     00 14 06 F6 | 	mov	arg02, #0
0ba20     35 00 00 FF 
0ba24     2C E4 85 F1 | 	sub	objptr, ##27180
0ba28     DC FB B1 FD | 	call	#__system____builtin_atoi
0ba2c     04 2C 06 F1 | 	add	local04, #4
0ba30     16 FB 61 FC | 	wrlong	result1, local04
0ba34     4A 00 00 FF 
0ba38     9C E4 05 F1 | 	add	objptr, ##38044
0ba3c     F2 12 02 FB | 	rdlong	arg01, objptr
0ba40     09 2D 02 F6 | 	mov	local04, arg01
0ba44     01 2C 66 F0 | 	shl	local04, #1
0ba48     09 2D 02 F1 | 	add	local04, arg01
0ba4c     02 2C 66 F0 | 	shl	local04, #2
0ba50     03 00 00 FF 
0ba54     00 E4 85 F1 | 	sub	objptr, ##1536
0ba58     F2 2C 02 F1 | 	add	local04, objptr
0ba5c     08 2C 06 F1 | 	add	local04, #8
0ba60     16 A7 68 FC | 	wrlong	#83, local04
0ba64     03 00 00 FF 
0ba68     00 E4 05 F1 | 	add	objptr, ##1536
0ba6c     F2 12 02 FB | 	rdlong	arg01, objptr
0ba70     01 12 06 F1 | 	add	arg01, #1
0ba74     F2 12 62 FC | 	wrlong	arg01, objptr
0ba78     01 26 06 F1 | 	add	local01, #1
0ba7c     09 2D 02 F6 | 	mov	local04, arg01
0ba80     01 2C 66 F0 | 	shl	local04, #1
0ba84     09 2D 02 F1 | 	add	local04, arg01
0ba88     02 2C 66 F0 | 	shl	local04, #2
0ba8c     03 00 00 FF 
0ba90     00 E4 85 F1 | 	sub	objptr, ##1536
0ba94     F2 2C 02 F1 | 	add	local04, objptr
0ba98     08 2C 06 F1 | 	add	local04, #8
0ba9c     16 5B 68 FC | 	wrlong	#45, local04
0baa0     03 00 00 FF 
0baa4     00 E4 05 F1 | 	add	objptr, ##1536
0baa8     F2 2C 02 FB | 	rdlong	local04, objptr
0baac     01 2C 06 F1 | 	add	local04, #1
0bab0     F2 2C 62 FC | 	wrlong	local04, objptr
0bab4     4A 00 00 FF 
0bab8     9C E4 85 F1 | 	sub	objptr, ##38044
0babc     08 00 90 FD | 	jmp	#LR__0968
0bac0                 | LR__0967
0bac0                 | '       return 17
0bac0     11 FA 05 F6 | 	mov	result1, #17
0bac4     9C 01 90 FD | 	jmp	#LR__0975
0bac8                 | LR__0968
0bac8     01 2A 06 F1 | 	add	local03, #1
0bacc                 | '     i+=1
0bacc                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0bacc     15 2D 02 F6 | 	mov	local04, local03
0bad0     03 2C 66 F0 | 	shl	local04, #3
0bad4     35 00 00 FF 
0bad8     2C E4 05 F1 | 	add	objptr, ##27180
0badc     F2 2C 02 F1 | 	add	local04, objptr
0bae0     04 2C 06 F1 | 	add	local04, #4
0bae4     16 2D 02 FB | 	rdlong	local04, local04
0bae8     11 2C 0E F2 | 	cmp	local04, #17 wz
0baec     35 00 00 FF 
0baf0     2C E4 85 F1 | 	sub	objptr, ##27180
0baf4     30 00 90 AD |  if_e	jmp	#LR__0969
0baf8     15 2D 02 F6 | 	mov	local04, local03
0bafc     03 2C 66 F0 | 	shl	local04, #3
0bb00     35 00 00 FF 
0bb04     2C E4 05 F1 | 	add	objptr, ##27180
0bb08     F2 2C 02 F1 | 	add	local04, objptr
0bb0c     04 2C 06 F1 | 	add	local04, #4
0bb10     16 2D 02 FB | 	rdlong	local04, local04
0bb14     FE 2D 0E F2 | 	cmp	local04, #510 wz
0bb18     35 00 00 FF 
0bb1c     2C E4 85 F1 | 	sub	objptr, ##27180
0bb20     15 FA 05 56 |  if_ne	mov	result1, #21
0bb24     3C 01 90 5D |  if_ne	jmp	#LR__0975
0bb28                 | LR__0969
0bb28                 | '     if lparts(i).token=token_end then exit loop
0bb28     15 2D 02 F6 | 	mov	local04, local03
0bb2c     03 2C 66 F0 | 	shl	local04, #3
0bb30     35 00 00 FF 
0bb34     2C E4 05 F1 | 	add	objptr, ##27180
0bb38     F2 2C 02 F1 | 	add	local04, objptr
0bb3c     04 2C 06 F1 | 	add	local04, #4
0bb40     16 2D 02 FB | 	rdlong	local04, local04
0bb44     FE 2D 0E F2 | 	cmp	local04, #510 wz
0bb48     35 00 00 FF 
0bb4c     2C E4 85 F1 | 	sub	objptr, ##27180
0bb50     30 00 90 AD |  if_e	jmp	#LR__0970
0bb54     01 2A 06 F1 | 	add	local03, #1
0bb58     15 2D 02 F6 | 	mov	local04, local03
0bb5c     03 2C 66 F0 | 	shl	local04, #3
0bb60     35 00 00 FF 
0bb64     2C E4 05 F1 | 	add	objptr, ##27180
0bb68     F2 2C 02 F1 | 	add	local04, objptr
0bb6c     04 2C 06 F1 | 	add	local04, #4
0bb70     16 2D 02 FB | 	rdlong	local04, local04
0bb74     FE 2D 0E F2 | 	cmp	local04, #510 wz
0bb78     35 00 00 FF 
0bb7c     2C E4 85 F1 | 	sub	objptr, ##27180
0bb80     C0 FD 9F 5D |  if_ne	jmp	#LR__0966
0bb84                 | LR__0970
0bb84     14 2D 02 F6 | 	mov	local04, local02
0bb88     01 2C 66 F0 | 	shl	local04, #1
0bb8c     14 2D 02 F1 | 	add	local04, local02
0bb90     02 2C 66 F0 | 	shl	local04, #2
0bb94     47 00 00 FF 
0bb98     9C E4 05 F1 | 	add	objptr, ##36508
0bb9c     F2 2C 02 F1 | 	add	local04, objptr
0bba0     04 2C 06 F1 | 	add	local04, #4
0bba4     16 07 68 FC | 	wrlong	#3, local04
0bba8     47 00 00 FF 
0bbac     9C E4 85 F1 | 	sub	objptr, ##36508
0bbb0                 | LR__0971
0bbb0     14 2B 02 F6 | 	mov	local03, local02
0bbb4     01 2A 66 F0 | 	shl	local03, #1
0bbb8     14 2B 02 F1 | 	add	local03, local02
0bbbc     02 2A 66 F0 | 	shl	local03, #2
0bbc0     47 00 00 FF 
0bbc4     9C E4 05 F1 | 	add	objptr, ##36508
0bbc8     F2 2A 02 F1 | 	add	local03, objptr
0bbcc     15 27 62 FC | 	wrlong	local01, local03
0bbd0                 | ' compiledline(onlineptr).result.uresult=numpar
0bbd0                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0bbd0     03 00 00 FF 
0bbd4     00 E4 05 F1 | 	add	objptr, ##1536
0bbd8     F2 2A 02 FB | 	rdlong	local03, objptr
0bbdc     4A 00 00 FF 
0bbe0     9C E4 85 F1 | 	sub	objptr, ##38044
0bbe4     97 3C 48 FB | 	callpa	#(@LR__0974-@LR__0972)>>2,fcache_load_ptr_
0bbe8                 | LR__0972
0bbe8     15 2D 02 F6 | 	mov	local04, local03
0bbec     01 2C 66 F0 | 	shl	local04, #1
0bbf0     15 2D 02 F1 | 	add	local04, local03
0bbf4     02 2C 66 F0 | 	shl	local04, #2
0bbf8     47 00 00 FF 
0bbfc     9C E4 05 F1 | 	add	objptr, ##36508
0bc00     F2 2C 02 F1 | 	add	local04, objptr
0bc04     08 2C 06 F1 | 	add	local04, #8
0bc08     16 2D 02 FB | 	rdlong	local04, local04
0bc0c     2D 2C 0E F2 | 	cmp	local04, #45 wz
0bc10     47 00 00 FF 
0bc14     9C E4 85 F1 | 	sub	objptr, ##36508
0bc18     38 00 90 5D |  if_ne	jmp	#LR__0973
0bc1c     15 2D 02 F6 | 	mov	local04, local03
0bc20     01 2C 66 F0 | 	shl	local04, #1
0bc24     15 2D 02 F1 | 	add	local04, local03
0bc28     02 2C 66 F0 | 	shl	local04, #2
0bc2c     47 00 00 FF 
0bc30     9C E4 05 F1 | 	add	objptr, ##36508
0bc34     F2 2C 02 F1 | 	add	local04, objptr
0bc38     03 00 00 FF 
0bc3c     00 E4 05 F1 | 	add	objptr, ##1536
0bc40     F2 26 02 FB | 	rdlong	local01, objptr
0bc44     4A 00 00 FF 
0bc48     9C E4 85 F1 | 	sub	objptr, ##38044
0bc4c     02 26 86 F1 | 	sub	local01, #2
0bc50     16 27 62 FC | 	wrlong	local01, local04
0bc54                 | LR__0973
0bc54     01 2A 86 F1 | 	sub	local03, #1
0bc58     14 2B 52 F2 | 	cmps	local03, local02 wc
0bc5c     88 FF 9F 3D |  if_ae	jmp	#LR__0972
0bc60                 | LR__0974
0bc60                 | ' return 0
0bc60     00 FA 05 F6 | 	mov	result1, #0
0bc64                 | LR__0975
0bc64     A7 F0 03 F6 | 	mov	ptra, fp
0bc68     B2 00 A0 FD | 	call	#popregs_
0bc6c                 | _compile_on_ret
0bc6c     2D 00 64 FD | 	ret
0bc70                 | 
0bc70                 | ' 
0bc70                 | ' '----- A helper for compile_input and compile_read
0bc70                 | '  
0bc70                 | ' function getaddr() as ulong
0bc70                 | _getaddr
0bc70     0B 4A 05 F6 | 	mov	COUNT_, #11
0bc74     A8 00 A0 FD | 	call	#pushregs_
0bc78     37 00 00 FF 
0bc7c     64 E4 05 F1 | 	add	objptr, ##28260
0bc80     F2 2C 02 FB | 	rdlong	local04, objptr
0bc84     03 2C 66 F0 | 	shl	local04, #3
0bc88     02 00 00 FF 
0bc8c     38 E4 85 F1 | 	sub	objptr, ##1080
0bc90     F2 2C 02 F1 | 	add	local04, objptr
0bc94     16 2F 02 FB | 	rdlong	local05, local04
0bc98     01 30 66 F6 | 	neg	local06, #1
0bc9c                 | ' 
0bc9c                 | ' varname$=lparts(ct).part$
0bc9c                 | ' j=-1
0bc9c                 | ' 
0bc9c                 | ' for i=0 to varnum-1
0bc9c     00 32 06 F6 | 	mov	local07, #0
0bca0     04 E4 85 F1 | 	sub	objptr, #4
0bca4     F2 34 02 FB | 	rdlong	local08, objptr
0bca8     35 00 00 FF 
0bcac     28 E4 85 F1 | 	sub	objptr, ##27176
0bcb0                 | LR__0980
0bcb0     1A 33 52 F2 | 	cmps	local07, local08 wc
0bcb4     38 00 90 3D |  if_ae	jmp	#LR__0981
0bcb8                 | '   if variables(i).name=varname$ then j=i : exit
0bcb8     19 2D 02 F6 | 	mov	local04, local07
0bcbc     04 2C 66 F0 | 	shl	local04, #4
0bcc0     15 00 00 FF 
0bcc4     18 E4 05 F1 | 	add	objptr, ##10776
0bcc8     F2 2C 02 F1 | 	add	local04, objptr
0bccc     16 13 02 FB | 	rdlong	arg01, local04
0bcd0     17 15 02 F6 | 	mov	arg02, local05
0bcd4     15 00 00 FF 
0bcd8     18 E4 85 F1 | 	sub	objptr, ##10776
0bcdc     5C C4 B1 FD | 	call	#__system___string_cmp
0bce0     00 FA 0D F2 | 	cmp	result1, #0 wz
0bce4     19 31 02 A6 |  if_e	mov	local06, local07
0bce8     01 32 06 51 |  if_ne	add	local07, #1
0bcec     C0 FF 9F 5D |  if_ne	jmp	#LR__0980
0bcf0                 | LR__0981
0bcf0                 | ' if  j=-1 andalso varnum<maxvars then   
0bcf0     FF FF 7F FF 
0bcf4     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0bcf8     A8 00 90 5D |  if_ne	jmp	#LR__0982
0bcfc     35 00 00 FF 
0bd00     28 E4 05 F1 | 	add	objptr, ##27176
0bd04     F2 34 02 FB | 	rdlong	local08, objptr
0bd08     35 00 00 FF 
0bd0c     28 E4 85 F1 | 	sub	objptr, ##27176
0bd10     02 00 00 FF 
0bd14     00 34 56 F2 | 	cmps	local08, ##1024 wc
0bd18     88 00 90 3D |  if_ae	jmp	#LR__0982
0bd1c     35 00 00 FF 
0bd20     28 E4 05 F1 | 	add	objptr, ##27176
0bd24     F2 2C 02 FB | 	rdlong	local04, objptr
0bd28     04 2C 66 F0 | 	shl	local04, #4
0bd2c     20 00 00 FF 
0bd30     10 E4 85 F1 | 	sub	objptr, ##16400
0bd34     F2 2C 02 F1 | 	add	local04, objptr
0bd38     16 2F 62 FC | 	wrlong	local05, local04
0bd3c     20 00 00 FF 
0bd40     10 E4 05 F1 | 	add	objptr, ##16400
0bd44     F2 2C 02 FB | 	rdlong	local04, objptr
0bd48     04 2C 66 F0 | 	shl	local04, #4
0bd4c     20 00 00 FF 
0bd50     10 E4 85 F1 | 	sub	objptr, ##16400
0bd54     F2 2C 02 F1 | 	add	local04, objptr
0bd58     04 2C 06 F1 | 	add	local04, #4
0bd5c     16 01 68 FC | 	wrlong	#0, local04
0bd60     20 00 00 FF 
0bd64     10 E4 05 F1 | 	add	objptr, ##16400
0bd68     F2 2C 02 FB | 	rdlong	local04, objptr
0bd6c     04 2C 66 F0 | 	shl	local04, #4
0bd70     20 00 00 FF 
0bd74     10 E4 85 F1 | 	sub	objptr, ##16400
0bd78     F2 2C 02 F1 | 	add	local04, objptr
0bd7c     0C 2C 06 F1 | 	add	local04, #12
0bd80     16 39 68 FC | 	wrlong	#28, local04
0bd84     20 00 00 FF 
0bd88     10 E4 05 F1 | 	add	objptr, ##16400
0bd8c     F2 34 02 FB | 	rdlong	local08, objptr
0bd90     1A 31 02 F6 | 	mov	local06, local08
0bd94     01 34 06 F1 | 	add	local08, #1
0bd98     F2 34 62 FC | 	wrlong	local08, objptr
0bd9c     35 00 00 FF 
0bda0     28 E4 85 F1 | 	sub	objptr, ##27176
0bda4                 | LR__0982
0bda4     00 34 06 F6 | 	mov	local08, #0
0bda8                 | ' numpar=0
0bda8                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0bda8     37 00 00 FF 
0bdac     64 E4 05 F1 | 	add	objptr, ##28260
0bdb0     F2 2C 02 FB | 	rdlong	local04, objptr
0bdb4     01 2C 06 F1 | 	add	local04, #1
0bdb8     03 2C 66 F0 | 	shl	local04, #3
0bdbc     02 00 00 FF 
0bdc0     38 E4 85 F1 | 	sub	objptr, ##1080
0bdc4     F2 2C 02 F1 | 	add	local04, objptr
0bdc8     04 2C 06 F1 | 	add	local04, #4
0bdcc     16 33 02 FB | 	rdlong	local07, local04
0bdd0     15 32 0E F2 | 	cmp	local07, #21 wz
0bdd4     35 00 00 FF 
0bdd8     2C E4 85 F1 | 	sub	objptr, ##27180
0bddc     54 01 90 5D |  if_ne	jmp	#LR__0987
0bde0     37 00 00 FF 
0bde4     64 E4 05 F1 | 	add	objptr, ##28260
0bde8     F2 36 02 FB | 	rdlong	local09, objptr
0bdec     01 36 06 F1 | 	add	local09, #1
0bdf0     F2 36 62 FC | 	wrlong	local09, objptr
0bdf4     37 00 00 FF 
0bdf8     64 E4 85 F1 | 	sub	objptr, ##28260
0bdfc                 | '   ct+=1 											' omit this lpar, this is for expr list
0bdfc                 | '   do
0bdfc                 | LR__0983
0bdfc     37 00 00 FF 
0be00     64 E4 05 F1 | 	add	objptr, ##28260
0be04     F2 2C 02 FB | 	rdlong	local04, objptr
0be08     01 2C 06 F1 | 	add	local04, #1
0be0c     F2 2C 62 FC | 	wrlong	local04, objptr
0be10                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0be10                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0be10     03 2C 66 F0 | 	shl	local04, #3
0be14     02 00 00 FF 
0be18     38 E4 85 F1 | 	sub	objptr, ##1080
0be1c     F2 2C 02 F1 | 	add	local04, objptr
0be20     04 2C 06 F1 | 	add	local04, #4
0be24     16 37 02 FB | 	rdlong	local09, local04
0be28     15 36 0E F2 | 	cmp	local09, #21 wz
0be2c     35 00 00 FF 
0be30     2C E4 85 F1 | 	sub	objptr, ##27180
0be34     44 00 90 5D |  if_ne	jmp	#LR__0984
0be38     37 00 00 FF 
0be3c     64 E4 05 F1 | 	add	objptr, ##28260
0be40     F2 36 02 FB | 	rdlong	local09, objptr
0be44     01 36 06 F1 | 	add	local09, #1
0be48     F2 36 62 FC | 	wrlong	local09, objptr
0be4c     37 00 00 FF 
0be50     64 E4 85 F1 | 	sub	objptr, ##28260
0be54     AC 01 B0 FD | 	call	#_expr
0be58     FD 38 02 F6 | 	mov	local10, result1
0be5c     37 00 00 FF 
0be60     64 E4 05 F1 | 	add	objptr, ##28260
0be64     F2 36 02 FB | 	rdlong	local09, objptr
0be68     01 36 06 F1 | 	add	local09, #1
0be6c     F2 36 62 FC | 	wrlong	local09, objptr
0be70     37 00 00 FF 
0be74     64 E4 85 F1 | 	sub	objptr, ##28260
0be78     08 00 90 FD | 	jmp	#LR__0985
0be7c                 | LR__0984
0be7c     84 01 B0 FD | 	call	#_expr
0be80     FD 38 02 F6 | 	mov	local10, result1
0be84                 | LR__0985
0be84                 | '     if err>0 then return err
0be84     01 38 56 F2 | 	cmps	local10, #1 wc
0be88     1C FB 01 36 |  if_ae	mov	result1, local10
0be8c     68 01 90 3D |  if_ae	jmp	#LR__0988
0be90     01 34 06 F1 | 	add	local08, #1
0be94     37 00 00 FF 
0be98     64 E4 05 F1 | 	add	objptr, ##28260
0be9c     F2 2C 02 FB | 	rdlong	local04, objptr
0bea0     03 2C 66 F0 | 	shl	local04, #3
0bea4     02 00 00 FF 
0bea8     38 E4 85 F1 | 	sub	objptr, ##1080
0beac     F2 2C 02 F1 | 	add	local04, objptr
0beb0     04 2C 06 F1 | 	add	local04, #4
0beb4     16 39 02 FB | 	rdlong	local10, local04
0beb8     14 38 0E F2 | 	cmp	local10, #20 wz
0bebc     35 00 00 FF 
0bec0     2C E4 85 F1 | 	sub	objptr, ##27180
0bec4     34 00 90 AD |  if_e	jmp	#LR__0986
0bec8     37 00 00 FF 
0becc     64 E4 05 F1 | 	add	objptr, ##28260
0bed0     F2 38 02 FB | 	rdlong	local10, objptr
0bed4     03 38 66 F0 | 	shl	local10, #3
0bed8     02 00 00 FF 
0bedc     38 E4 85 F1 | 	sub	objptr, ##1080
0bee0     F2 38 02 F1 | 	add	local10, objptr
0bee4     04 38 06 F1 | 	add	local10, #4
0bee8     1C 39 02 FB | 	rdlong	local10, local10
0beec     FE 39 0E F2 | 	cmp	local10, #510 wz
0bef0     35 00 00 FF 
0bef4     2C E4 85 F1 | 	sub	objptr, ##27180
0bef8     00 FF 9F 5D |  if_ne	jmp	#LR__0983
0befc                 | LR__0986
0befc                 | '     if lparts(ct).token=token_end then return 14
0befc     37 00 00 FF 
0bf00     64 E4 05 F1 | 	add	objptr, ##28260
0bf04     F2 2C 02 FB | 	rdlong	local04, objptr
0bf08     03 2C 66 F0 | 	shl	local04, #3
0bf0c     02 00 00 FF 
0bf10     38 E4 85 F1 | 	sub	objptr, ##1080
0bf14     F2 2C 02 F1 | 	add	local04, objptr
0bf18     04 2C 06 F1 | 	add	local04, #4
0bf1c     16 39 02 FB | 	rdlong	local10, local04
0bf20     FE 39 0E F2 | 	cmp	local10, #510 wz
0bf24     35 00 00 FF 
0bf28     2C E4 85 F1 | 	sub	objptr, ##27180
0bf2c     0E FA 05 A6 |  if_e	mov	result1, #14
0bf30     C4 00 90 AD |  if_e	jmp	#LR__0988
0bf34                 | LR__0987
0bf34     1A 29 02 F6 | 	mov	local02, local08
0bf38     12 2A 06 F6 | 	mov	local03, #18
0bf3c     18 27 02 F6 | 	mov	local01, local06
0bf40     13 37 02 F6 | 	mov	local09, local01
0bf44     14 3B 02 F6 | 	mov	local11, local02
0bf48     15 27 02 F6 | 	mov	local01, local03
0bf4c     4A 00 00 FF 
0bf50     9C E4 05 F1 | 	add	objptr, ##38044
0bf54     F2 38 02 FB | 	rdlong	local10, objptr
0bf58     1C 35 02 F6 | 	mov	local08, local10
0bf5c     01 34 66 F0 | 	shl	local08, #1
0bf60     1C 35 02 F1 | 	add	local08, local10
0bf64     02 34 66 F0 | 	shl	local08, #2
0bf68     03 00 00 FF 
0bf6c     00 E4 85 F1 | 	sub	objptr, ##1536
0bf70     F2 34 02 F1 | 	add	local08, objptr
0bf74     1A 37 62 FC | 	wrlong	local09, local08
0bf78     03 00 00 FF 
0bf7c     00 E4 05 F1 | 	add	objptr, ##1536
0bf80     F2 38 02 FB | 	rdlong	local10, objptr
0bf84     1C 37 02 F6 | 	mov	local09, local10
0bf88     01 36 66 F0 | 	shl	local09, #1
0bf8c     1C 37 02 F1 | 	add	local09, local10
0bf90     02 36 66 F0 | 	shl	local09, #2
0bf94     03 00 00 FF 
0bf98     00 E4 85 F1 | 	sub	objptr, ##1536
0bf9c     F2 36 02 F1 | 	add	local09, objptr
0bfa0     04 36 06 F1 | 	add	local09, #4
0bfa4     1B 3B 62 FC | 	wrlong	local11, local09
0bfa8     03 00 00 FF 
0bfac     00 E4 05 F1 | 	add	objptr, ##1536
0bfb0     F2 3A 02 FB | 	rdlong	local11, objptr
0bfb4     1D 39 02 F6 | 	mov	local10, local11
0bfb8     01 38 66 F0 | 	shl	local10, #1
0bfbc     1D 39 02 F1 | 	add	local10, local11
0bfc0     02 38 66 F0 | 	shl	local10, #2
0bfc4     03 00 00 FF 
0bfc8     00 E4 85 F1 | 	sub	objptr, ##1536
0bfcc     F2 38 02 F1 | 	add	local10, objptr
0bfd0     08 38 06 F1 | 	add	local10, #8
0bfd4     1C 27 62 FC | 	wrlong	local01, local10
0bfd8     03 00 00 FF 
0bfdc     00 E4 05 F1 | 	add	objptr, ##1536
0bfe0     F2 36 02 FB | 	rdlong	local09, objptr
0bfe4     01 36 06 F1 | 	add	local09, #1
0bfe8     F2 36 62 FC | 	wrlong	local09, objptr
0bfec     4A 00 00 FF 
0bff0     9C E4 85 F1 | 	sub	objptr, ##38044
0bff4                 | ' t2.result.twowords(1)=numpar
0bff4                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0bff4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0bff4                 | ' return 0
0bff4     00 FA 05 F6 | 	mov	result1, #0
0bff8                 | LR__0988
0bff8     A7 F0 03 F6 | 	mov	ptra, fp
0bffc     B2 00 A0 FD | 	call	#popregs_
0c000                 | _getaddr_ret
0c000     2D 00 64 FD | 	ret
0c004                 | 
0c004                 | ' 
0c004                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c004                 | ' '--------------------------------------------- 
0c004                 | ' 
0c004                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0c004                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0c004                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0c004                 | ' 
0c004                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0c004                 | ' '
0c004                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0c004                 | ' '
0c004                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0c004                 | ' 
0c004                 | ' function expr() as ulong 
0c004                 | _expr
0c004     07 4A 05 F6 | 	mov	COUNT_, #7
0c008     A8 00 A0 FD | 	call	#pushregs_
0c00c                 | _expr_enter
0c00c     37 00 00 FF 
0c010     64 E4 05 F1 | 	add	objptr, ##28260
0c014     F2 2C 02 FB | 	rdlong	local04, objptr
0c018     03 2C 66 F0 | 	shl	local04, #3
0c01c     02 00 00 FF 
0c020     38 E4 85 F1 | 	sub	objptr, ##1080
0c024     F2 2C 02 F1 | 	add	local04, objptr
0c028     04 2C 06 F1 | 	add	local04, #4
0c02c     16 2F 02 FB | 	rdlong	local05, local04
0c030                 | ' 
0c030                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0c030     FE 2F 0E F2 | 	cmp	local05, #510 wz
0c034     35 00 00 FF 
0c038     2C E4 85 F1 | 	sub	objptr, ##27180
0c03c     C4 00 90 5D |  if_ne	jmp	#LR__0990
0c040     1D 26 06 F6 | 	mov	local01, #29
0c044     FF 2A 06 F6 | 	mov	local03, #255
0c048     13 31 02 F6 | 	mov	local06, local01
0c04c     14 33 02 F6 | 	mov	local07, local02
0c050     15 27 02 F6 | 	mov	local01, local03
0c054     4A 00 00 FF 
0c058     9C E4 05 F1 | 	add	objptr, ##38044
0c05c     F2 2E 02 FB | 	rdlong	local05, objptr
0c060     17 2D 02 F6 | 	mov	local04, local05
0c064     01 2C 66 F0 | 	shl	local04, #1
0c068     17 2D 02 F1 | 	add	local04, local05
0c06c     02 2C 66 F0 | 	shl	local04, #2
0c070     03 00 00 FF 
0c074     00 E4 85 F1 | 	sub	objptr, ##1536
0c078     F2 2C 02 F1 | 	add	local04, objptr
0c07c     16 31 62 FC | 	wrlong	local06, local04
0c080     03 00 00 FF 
0c084     00 E4 05 F1 | 	add	objptr, ##1536
0c088     F2 30 02 FB | 	rdlong	local06, objptr
0c08c     18 2F 02 F6 | 	mov	local05, local06
0c090     01 2E 66 F0 | 	shl	local05, #1
0c094     18 2F 02 F1 | 	add	local05, local06
0c098     02 2E 66 F0 | 	shl	local05, #2
0c09c     03 00 00 FF 
0c0a0     00 E4 85 F1 | 	sub	objptr, ##1536
0c0a4     F2 2E 02 F1 | 	add	local05, objptr
0c0a8     04 2E 06 F1 | 	add	local05, #4
0c0ac     17 33 62 FC | 	wrlong	local07, local05
0c0b0     03 00 00 FF 
0c0b4     00 E4 05 F1 | 	add	objptr, ##1536
0c0b8     F2 32 02 FB | 	rdlong	local07, objptr
0c0bc     19 31 02 F6 | 	mov	local06, local07
0c0c0     01 30 66 F0 | 	shl	local06, #1
0c0c4     19 31 02 F1 | 	add	local06, local07
0c0c8     02 30 66 F0 | 	shl	local06, #2
0c0cc     03 00 00 FF 
0c0d0     00 E4 85 F1 | 	sub	objptr, ##1536
0c0d4     F2 30 02 F1 | 	add	local06, objptr
0c0d8     08 30 06 F1 | 	add	local06, #8
0c0dc     18 27 62 FC | 	wrlong	local01, local06
0c0e0     03 00 00 FF 
0c0e4     00 E4 05 F1 | 	add	objptr, ##1536
0c0e8     F2 30 02 FB | 	rdlong	local06, objptr
0c0ec     01 30 06 F1 | 	add	local06, #1
0c0f0     F2 30 62 FC | 	wrlong	local06, objptr
0c0f4     4A 00 00 FF 
0c0f8     9C E4 85 F1 | 	sub	objptr, ##38044
0c0fc     1D FA 05 F6 | 	mov	result1, #29
0c100     64 01 90 FD | 	jmp	#LR__0993
0c104                 | LR__0990
0c104     00 26 06 F6 | 	mov	local01, #0
0c108     68 01 B0 FD | 	call	#_addsub
0c10c                 | ' t3.result.uresult=0
0c10c                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0c10c                 | ' if err>0 then return err
0c10c     01 FA 15 F2 | 	cmp	result1, #1 wc
0c110     54 01 90 3D |  if_ae	jmp	#LR__0993
0c114     37 00 00 FF 
0c118     64 E4 05 F1 | 	add	objptr, ##28260
0c11c     F2 2C 02 FB | 	rdlong	local04, objptr
0c120     03 2C 66 F0 | 	shl	local04, #3
0c124     02 00 00 FF 
0c128     38 E4 85 F1 | 	sub	objptr, ##1080
0c12c     F2 2C 02 F1 | 	add	local04, objptr
0c130     04 2C 06 F1 | 	add	local04, #4
0c134     16 2F 02 FB | 	rdlong	local05, local04
0c138                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0c138                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0c138     35 00 00 FF 
0c13c     2C E4 85 F1 | 	sub	objptr, ##27180
0c140                 | LR__0991
0c140     1B 2E 0E F2 | 	cmp	local05, #27 wz
0c144     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0c148     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0c14c     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0c150     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0c154     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0c158     08 01 90 5D |  if_ne	jmp	#LR__0992
0c15c     37 00 00 FF 
0c160     64 E4 05 F1 | 	add	objptr, ##28260
0c164     F2 30 02 FB | 	rdlong	local06, objptr
0c168     01 30 06 F1 | 	add	local06, #1
0c16c     F2 30 62 FC | 	wrlong	local06, objptr
0c170     37 00 00 FF 
0c174     64 E4 85 F1 | 	sub	objptr, ##28260
0c178     F8 00 B0 FD | 	call	#_addsub
0c17c                 | '   ct+=1
0c17c                 | '   err=addsub() : if err>0 then return err
0c17c     01 FA 15 F2 | 	cmp	result1, #1 wc
0c180     E4 00 90 3D |  if_ae	jmp	#LR__0993
0c184     17 2B 02 F6 | 	mov	local03, local05
0c188     13 31 02 F6 | 	mov	local06, local01
0c18c     14 33 02 F6 | 	mov	local07, local02
0c190     15 2F 02 F6 | 	mov	local05, local03
0c194     4A 00 00 FF 
0c198     9C E4 05 F1 | 	add	objptr, ##38044
0c19c     F2 2C 02 FB | 	rdlong	local04, objptr
0c1a0     16 FB 01 F6 | 	mov	result1, local04
0c1a4     01 FA 65 F0 | 	shl	result1, #1
0c1a8     16 FB 01 F1 | 	add	result1, local04
0c1ac     02 FA 65 F0 | 	shl	result1, #2
0c1b0     03 00 00 FF 
0c1b4     00 E4 85 F1 | 	sub	objptr, ##1536
0c1b8     F2 FA 01 F1 | 	add	result1, objptr
0c1bc     FD 30 62 FC | 	wrlong	local06, result1
0c1c0     03 00 00 FF 
0c1c4     00 E4 05 F1 | 	add	objptr, ##1536
0c1c8     F2 30 02 FB | 	rdlong	local06, objptr
0c1cc     18 2D 02 F6 | 	mov	local04, local06
0c1d0     01 2C 66 F0 | 	shl	local04, #1
0c1d4     18 2D 02 F1 | 	add	local04, local06
0c1d8     02 2C 66 F0 | 	shl	local04, #2
0c1dc     03 00 00 FF 
0c1e0     00 E4 85 F1 | 	sub	objptr, ##1536
0c1e4     F2 2C 02 F1 | 	add	local04, objptr
0c1e8     04 2C 06 F1 | 	add	local04, #4
0c1ec     16 33 62 FC | 	wrlong	local07, local04
0c1f0     03 00 00 FF 
0c1f4     00 E4 05 F1 | 	add	objptr, ##1536
0c1f8     F2 32 02 FB | 	rdlong	local07, objptr
0c1fc     19 31 02 F6 | 	mov	local06, local07
0c200     01 30 66 F0 | 	shl	local06, #1
0c204     19 31 02 F1 | 	add	local06, local07
0c208     02 30 66 F0 | 	shl	local06, #2
0c20c     03 00 00 FF 
0c210     00 E4 85 F1 | 	sub	objptr, ##1536
0c214     F2 30 02 F1 | 	add	local06, objptr
0c218     08 30 06 F1 | 	add	local06, #8
0c21c     18 2F 62 FC | 	wrlong	local05, local06
0c220     03 00 00 FF 
0c224     00 E4 05 F1 | 	add	objptr, ##1536
0c228     F2 30 02 FB | 	rdlong	local06, objptr
0c22c     01 30 06 F1 | 	add	local06, #1
0c230     F2 30 62 FC | 	wrlong	local06, objptr
0c234     13 00 00 FF 
0c238     38 E4 85 F1 | 	sub	objptr, ##9784
0c23c     F2 2C 02 FB | 	rdlong	local04, objptr
0c240     03 2C 66 F0 | 	shl	local04, #3
0c244     02 00 00 FF 
0c248     38 E4 85 F1 | 	sub	objptr, ##1080
0c24c     F2 2C 02 F1 | 	add	local04, objptr
0c250     04 2C 06 F1 | 	add	local04, #4
0c254     16 2F 02 FB | 	rdlong	local05, local04
0c258     35 00 00 FF 
0c25c     2C E4 85 F1 | 	sub	objptr, ##27180
0c260     DC FE 9F FD | 	jmp	#LR__0991
0c264                 | LR__0992
0c264                 | ' return 0  
0c264     00 FA 05 F6 | 	mov	result1, #0
0c268                 | LR__0993
0c268     A7 F0 03 F6 | 	mov	ptra, fp
0c26c     B2 00 A0 FD | 	call	#popregs_
0c270                 | _expr_ret
0c270     2D 00 64 FD | 	ret
0c274                 | 
0c274                 | ' 
0c274                 | ' ' Second level operators : add, sub, logic
0c274                 | ' 
0c274                 | ' function addsub() as ulong
0c274                 | _addsub
0c274     07 4A 05 F6 | 	mov	COUNT_, #7
0c278     A8 00 A0 FD | 	call	#pushregs_
0c27c                 | _addsub_enter
0c27c     00 26 06 F6 | 	mov	local01, #0
0c280     60 01 B0 FD | 	call	#_muldiv
0c284                 | ' 
0c284                 | ' t3.result.uresult=0
0c284                 | ' err=muldiv() : if err>0 then return err           			 
0c284     01 FA 15 F2 | 	cmp	result1, #1 wc
0c288     4C 01 90 3D |  if_ae	jmp	#LR__1002
0c28c     37 00 00 FF 
0c290     64 E4 05 F1 | 	add	objptr, ##28260
0c294     F2 2C 02 FB | 	rdlong	local04, objptr
0c298     03 2C 66 F0 | 	shl	local04, #3
0c29c     02 00 00 FF 
0c2a0     38 E4 85 F1 | 	sub	objptr, ##1080
0c2a4     F2 2C 02 F1 | 	add	local04, objptr
0c2a8     04 2C 06 F1 | 	add	local04, #4
0c2ac     16 2F 02 FB | 	rdlong	local05, local04
0c2b0                 | ' op = lparts(ct).token				 
0c2b0                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0c2b0     35 00 00 FF 
0c2b4     2C E4 85 F1 | 	sub	objptr, ##27180
0c2b8                 | LR__1000
0c2b8     01 2E 0E F2 | 	cmp	local05, #1 wz
0c2bc     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0c2c0     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0c2c4     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0c2c8     08 01 90 5D |  if_ne	jmp	#LR__1001
0c2cc     37 00 00 FF 
0c2d0     64 E4 05 F1 | 	add	objptr, ##28260
0c2d4     F2 2C 02 FB | 	rdlong	local04, objptr
0c2d8     01 2C 06 F1 | 	add	local04, #1
0c2dc     F2 2C 62 FC | 	wrlong	local04, objptr
0c2e0     37 00 00 FF 
0c2e4     64 E4 85 F1 | 	sub	objptr, ##28260
0c2e8     F8 00 B0 FD | 	call	#_muldiv
0c2ec                 | '   ct+=1
0c2ec                 | '   err=muldiv() : if err>0 then return err   
0c2ec     01 FA 15 F2 | 	cmp	result1, #1 wc
0c2f0     E4 00 90 3D |  if_ae	jmp	#LR__1002
0c2f4     17 2B 02 F6 | 	mov	local03, local05
0c2f8     13 31 02 F6 | 	mov	local06, local01
0c2fc     14 33 02 F6 | 	mov	local07, local02
0c300     15 2F 02 F6 | 	mov	local05, local03
0c304     4A 00 00 FF 
0c308     9C E4 05 F1 | 	add	objptr, ##38044
0c30c     F2 2C 02 FB | 	rdlong	local04, objptr
0c310     16 FB 01 F6 | 	mov	result1, local04
0c314     01 FA 65 F0 | 	shl	result1, #1
0c318     16 FB 01 F1 | 	add	result1, local04
0c31c     02 FA 65 F0 | 	shl	result1, #2
0c320     03 00 00 FF 
0c324     00 E4 85 F1 | 	sub	objptr, ##1536
0c328     F2 FA 01 F1 | 	add	result1, objptr
0c32c     FD 30 62 FC | 	wrlong	local06, result1
0c330     03 00 00 FF 
0c334     00 E4 05 F1 | 	add	objptr, ##1536
0c338     F2 30 02 FB | 	rdlong	local06, objptr
0c33c     18 2D 02 F6 | 	mov	local04, local06
0c340     01 2C 66 F0 | 	shl	local04, #1
0c344     18 2D 02 F1 | 	add	local04, local06
0c348     02 2C 66 F0 | 	shl	local04, #2
0c34c     03 00 00 FF 
0c350     00 E4 85 F1 | 	sub	objptr, ##1536
0c354     F2 2C 02 F1 | 	add	local04, objptr
0c358     04 2C 06 F1 | 	add	local04, #4
0c35c     16 33 62 FC | 	wrlong	local07, local04
0c360     03 00 00 FF 
0c364     00 E4 05 F1 | 	add	objptr, ##1536
0c368     F2 32 02 FB | 	rdlong	local07, objptr
0c36c     19 31 02 F6 | 	mov	local06, local07
0c370     01 30 66 F0 | 	shl	local06, #1
0c374     19 31 02 F1 | 	add	local06, local07
0c378     02 30 66 F0 | 	shl	local06, #2
0c37c     03 00 00 FF 
0c380     00 E4 85 F1 | 	sub	objptr, ##1536
0c384     F2 30 02 F1 | 	add	local06, objptr
0c388     08 30 06 F1 | 	add	local06, #8
0c38c     18 2F 62 FC | 	wrlong	local05, local06
0c390     03 00 00 FF 
0c394     00 E4 05 F1 | 	add	objptr, ##1536
0c398     F2 30 02 FB | 	rdlong	local06, objptr
0c39c     01 30 06 F1 | 	add	local06, #1
0c3a0     F2 30 62 FC | 	wrlong	local06, objptr
0c3a4     13 00 00 FF 
0c3a8     38 E4 85 F1 | 	sub	objptr, ##9784
0c3ac     F2 2C 02 FB | 	rdlong	local04, objptr
0c3b0     03 2C 66 F0 | 	shl	local04, #3
0c3b4     02 00 00 FF 
0c3b8     38 E4 85 F1 | 	sub	objptr, ##1080
0c3bc     F2 2C 02 F1 | 	add	local04, objptr
0c3c0     04 2C 06 F1 | 	add	local04, #4
0c3c4     16 2F 02 FB | 	rdlong	local05, local04
0c3c8     35 00 00 FF 
0c3cc     2C E4 85 F1 | 	sub	objptr, ##27180
0c3d0     E4 FE 9F FD | 	jmp	#LR__1000
0c3d4                 | LR__1001
0c3d4                 | ' return 0
0c3d4     00 FA 05 F6 | 	mov	result1, #0
0c3d8                 | LR__1002
0c3d8     A7 F0 03 F6 | 	mov	ptra, fp
0c3dc     B2 00 A0 FD | 	call	#popregs_
0c3e0                 | _addsub_ret
0c3e0     2D 00 64 FD | 	ret
0c3e4                 | 
0c3e4                 | ' 
0c3e4                 | ' ' Third level operators : mul,div,shift,power
0c3e4                 | ' 
0c3e4                 | ' function muldiv() as ulong
0c3e4                 | _muldiv
0c3e4     07 4A 05 F6 | 	mov	COUNT_, #7
0c3e8     A8 00 A0 FD | 	call	#pushregs_
0c3ec                 | _muldiv_enter
0c3ec     00 26 06 F6 | 	mov	local01, #0
0c3f0     6C 01 B0 FD | 	call	#_getvalue
0c3f4                 | ' 
0c3f4                 | ' t3.result.uresult=0
0c3f4                 | ' err=getvalue() : if err>0 then return err     
0c3f4     01 FA 15 F2 | 	cmp	result1, #1 wc
0c3f8     58 01 90 3D |  if_ae	jmp	#LR__1012
0c3fc     37 00 00 FF 
0c400     64 E4 05 F1 | 	add	objptr, ##28260
0c404     F2 2C 02 FB | 	rdlong	local04, objptr
0c408     03 2C 66 F0 | 	shl	local04, #3
0c40c     02 00 00 FF 
0c410     38 E4 85 F1 | 	sub	objptr, ##1080
0c414     F2 2C 02 F1 | 	add	local04, objptr
0c418     04 2C 06 F1 | 	add	local04, #4
0c41c     16 2F 02 FB | 	rdlong	local05, local04
0c420                 | ' op = lparts(ct).token
0c420                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0c420     35 00 00 FF 
0c424     2C E4 85 F1 | 	sub	objptr, ##27180
0c428                 | LR__1010
0c428     05 2E 0E F2 | 	cmp	local05, #5 wz
0c42c     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0c430     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0c434     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0c438     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0c43c     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0c440     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0c444     08 01 90 5D |  if_ne	jmp	#LR__1011
0c448     37 00 00 FF 
0c44c     64 E4 05 F1 | 	add	objptr, ##28260
0c450     F2 2C 02 FB | 	rdlong	local04, objptr
0c454     01 2C 06 F1 | 	add	local04, #1
0c458     F2 2C 62 FC | 	wrlong	local04, objptr
0c45c     37 00 00 FF 
0c460     64 E4 85 F1 | 	sub	objptr, ##28260
0c464     F8 00 B0 FD | 	call	#_getvalue
0c468                 | '   ct+=1
0c468                 | '   err=getvalue() :if err>0 then return err   
0c468     01 FA 15 F2 | 	cmp	result1, #1 wc
0c46c     E4 00 90 3D |  if_ae	jmp	#LR__1012
0c470     17 2B 02 F6 | 	mov	local03, local05
0c474     13 31 02 F6 | 	mov	local06, local01
0c478     14 33 02 F6 | 	mov	local07, local02
0c47c     15 2F 02 F6 | 	mov	local05, local03
0c480     4A 00 00 FF 
0c484     9C E4 05 F1 | 	add	objptr, ##38044
0c488     F2 2C 02 FB | 	rdlong	local04, objptr
0c48c     16 FB 01 F6 | 	mov	result1, local04
0c490     01 FA 65 F0 | 	shl	result1, #1
0c494     16 FB 01 F1 | 	add	result1, local04
0c498     02 FA 65 F0 | 	shl	result1, #2
0c49c     03 00 00 FF 
0c4a0     00 E4 85 F1 | 	sub	objptr, ##1536
0c4a4     F2 FA 01 F1 | 	add	result1, objptr
0c4a8     FD 30 62 FC | 	wrlong	local06, result1
0c4ac     03 00 00 FF 
0c4b0     00 E4 05 F1 | 	add	objptr, ##1536
0c4b4     F2 30 02 FB | 	rdlong	local06, objptr
0c4b8     18 2D 02 F6 | 	mov	local04, local06
0c4bc     01 2C 66 F0 | 	shl	local04, #1
0c4c0     18 2D 02 F1 | 	add	local04, local06
0c4c4     02 2C 66 F0 | 	shl	local04, #2
0c4c8     03 00 00 FF 
0c4cc     00 E4 85 F1 | 	sub	objptr, ##1536
0c4d0     F2 2C 02 F1 | 	add	local04, objptr
0c4d4     04 2C 06 F1 | 	add	local04, #4
0c4d8     16 33 62 FC | 	wrlong	local07, local04
0c4dc     03 00 00 FF 
0c4e0     00 E4 05 F1 | 	add	objptr, ##1536
0c4e4     F2 32 02 FB | 	rdlong	local07, objptr
0c4e8     19 31 02 F6 | 	mov	local06, local07
0c4ec     01 30 66 F0 | 	shl	local06, #1
0c4f0     19 31 02 F1 | 	add	local06, local07
0c4f4     02 30 66 F0 | 	shl	local06, #2
0c4f8     03 00 00 FF 
0c4fc     00 E4 85 F1 | 	sub	objptr, ##1536
0c500     F2 30 02 F1 | 	add	local06, objptr
0c504     08 30 06 F1 | 	add	local06, #8
0c508     18 2F 62 FC | 	wrlong	local05, local06
0c50c     03 00 00 FF 
0c510     00 E4 05 F1 | 	add	objptr, ##1536
0c514     F2 30 02 FB | 	rdlong	local06, objptr
0c518     01 30 06 F1 | 	add	local06, #1
0c51c     F2 30 62 FC | 	wrlong	local06, objptr
0c520     13 00 00 FF 
0c524     38 E4 85 F1 | 	sub	objptr, ##9784
0c528     F2 2C 02 FB | 	rdlong	local04, objptr
0c52c     03 2C 66 F0 | 	shl	local04, #3
0c530     02 00 00 FF 
0c534     38 E4 85 F1 | 	sub	objptr, ##1080
0c538     F2 2C 02 F1 | 	add	local04, objptr
0c53c     04 2C 06 F1 | 	add	local04, #4
0c540     16 2F 02 FB | 	rdlong	local05, local04
0c544     35 00 00 FF 
0c548     2C E4 85 F1 | 	sub	objptr, ##27180
0c54c     D8 FE 9F FD | 	jmp	#LR__1010
0c550                 | LR__1011
0c550                 | ' return 0
0c550     00 FA 05 F6 | 	mov	result1, #0
0c554                 | LR__1012
0c554     A7 F0 03 F6 | 	mov	ptra, fp
0c558     B2 00 A0 FD | 	call	#popregs_
0c55c                 | _muldiv_ret
0c55c     2D 00 64 FD | 	ret
0c560                 | 
0c560                 | ' 
0c560                 | ' ' Get a value for operations
0c560                 | ' 
0c560                 | ' function getvalue()  as ulong
0c560                 | _getvalue
0c560     0B 4A 05 F6 | 	mov	COUNT_, #11
0c564     A8 00 A0 FD | 	call	#pushregs_
0c568                 | _getvalue_enter
0c568     01 2C 06 F6 | 	mov	local04, #1
0c56c     00 26 06 F6 | 	mov	local01, #0
0c570     1D 2A 06 F6 | 	mov	local03, #29
0c574     37 00 00 FF 
0c578     64 E4 05 F1 | 	add	objptr, ##28260
0c57c     F2 16 02 FB | 	rdlong	arg03, objptr
0c580     03 16 66 F0 | 	shl	arg03, #3
0c584     02 00 00 FF 
0c588     38 E4 85 F1 | 	sub	objptr, ##1080
0c58c     F2 16 02 F1 | 	add	arg03, objptr
0c590     04 16 06 F1 | 	add	arg03, #4
0c594     0B 2F 02 FB | 	rdlong	local05, arg03
0c598                 | ' 
0c598                 | ' m=1											' for negative numbers
0c598                 | ' t1.result.uresult=0: t1.result_type=result_uint
0c598                 | ' op=lparts(ct).token
0c598                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0c598     02 2E 0E F2 | 	cmp	local05, #2 wz
0c59c     35 00 00 FF 
0c5a0     2C E4 85 F1 | 	sub	objptr, ##27180
0c5a4     38 00 90 5D |  if_ne	jmp	#LR__1020
0c5a8     01 2C 66 F6 | 	neg	local04, #1
0c5ac     37 00 00 FF 
0c5b0     64 E4 05 F1 | 	add	objptr, ##28260
0c5b4     F2 2E 02 FB | 	rdlong	local05, objptr
0c5b8     01 2E 06 F1 | 	add	local05, #1
0c5bc     F2 2E 62 FC | 	wrlong	local05, objptr
0c5c0     03 2E 66 F0 | 	shl	local05, #3
0c5c4     02 00 00 FF 
0c5c8     38 E4 85 F1 | 	sub	objptr, ##1080
0c5cc     F2 2E 02 F1 | 	add	local05, objptr
0c5d0     04 2E 06 F1 | 	add	local05, #4
0c5d4     17 2F 02 FB | 	rdlong	local05, local05
0c5d8     35 00 00 FF 
0c5dc     2C E4 85 F1 | 	sub	objptr, ##27180
0c5e0                 | LR__1020
0c5e0                 | ' select case op
0c5e0     01 00 00 FF 
0c5e4     00 2E 0E F2 | 	cmp	local05, ##512 wz
0c5e8     44 00 90 AD |  if_e	jmp	#LR__1021
0c5ec     01 00 00 FF 
0c5f0     01 2E 0E F2 | 	cmp	local05, ##513 wz
0c5f4     90 01 90 AD |  if_e	jmp	#LR__1024
0c5f8     01 00 00 FF 
0c5fc     02 2E 0E F2 | 	cmp	local05, ##514 wz
0c600     44 04 90 AD |  if_e	jmp	#LR__1031
0c604     01 00 00 FF 
0c608     03 2E 0E F2 | 	cmp	local05, ##515 wz
0c60c     A8 05 90 AD |  if_e	jmp	#LR__1034
0c610     2C 2E 0E F2 | 	cmp	local05, #44 wz
0c614     78 07 90 AD |  if_e	jmp	#LR__1039
0c618     01 00 00 FF 
0c61c     04 2E 0E F2 | 	cmp	local05, ##516 wz
0c620     70 08 90 AD |  if_e	jmp	#LR__1040
0c624     15 2E 0E F2 | 	cmp	local05, #21 wz
0c628     98 08 90 AD |  if_e	jmp	#LR__1041
0c62c     10 09 90 FD | 	jmp	#LR__1042
0c630                 | LR__1021
0c630                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0c630     01 2C 0E F2 | 	cmp	local04, #1 wz
0c634     3C 00 90 5D |  if_ne	jmp	#LR__1022
0c638     37 00 00 FF 
0c63c     64 E4 05 F1 | 	add	objptr, ##28260
0c640     F2 2E 02 FB | 	rdlong	local05, objptr
0c644     03 2E 66 F0 | 	shl	local05, #3
0c648     02 00 00 FF 
0c64c     38 E4 85 F1 | 	sub	objptr, ##1080
0c650     F2 2E 02 F1 | 	add	local05, objptr
0c654     17 13 02 FB | 	rdlong	arg01, local05
0c658     00 14 06 F6 | 	mov	arg02, #0
0c65c     35 00 00 FF 
0c660     2C E4 85 F1 | 	sub	objptr, ##27180
0c664     A0 EF B1 FD | 	call	#__system____builtin_atoi
0c668     FD 2C 02 FD | 	qmul	local04, result1
0c66c     18 26 62 FD | 	getqx	local01
0c670     1C 2A 06 F6 | 	mov	local03, #28
0c674                 | LR__1022
0c674                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0c674     FF FF 7F FF 
0c678     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c67c     3C 00 90 5D |  if_ne	jmp	#LR__1023
0c680     37 00 00 FF 
0c684     64 E4 05 F1 | 	add	objptr, ##28260
0c688     F2 2E 02 FB | 	rdlong	local05, objptr
0c68c     03 2E 66 F0 | 	shl	local05, #3
0c690     02 00 00 FF 
0c694     38 E4 85 F1 | 	sub	objptr, ##1080
0c698     F2 2E 02 F1 | 	add	local05, objptr
0c69c     17 13 02 FB | 	rdlong	arg01, local05
0c6a0     00 14 06 F6 | 	mov	arg02, #0
0c6a4     35 00 00 FF 
0c6a8     2C E4 85 F1 | 	sub	objptr, ##27180
0c6ac     58 EF B1 FD | 	call	#__system____builtin_atoi
0c6b0     FD 2C 02 FD | 	qmul	local04, result1
0c6b4     18 26 62 FD | 	getqx	local01
0c6b8     1C 2A 06 F6 | 	mov	local03, #28
0c6bc                 | LR__1023
0c6bc     13 31 02 F6 | 	mov	local06, local01
0c6c0     14 33 02 F6 | 	mov	local07, local02
0c6c4     15 2F 02 F6 | 	mov	local05, local03
0c6c8     4A 00 00 FF 
0c6cc     9C E4 05 F1 | 	add	objptr, ##38044
0c6d0     F2 26 02 FB | 	rdlong	local01, objptr
0c6d4     13 2D 02 F6 | 	mov	local04, local01
0c6d8     01 2C 66 F0 | 	shl	local04, #1
0c6dc     13 2D 02 F1 | 	add	local04, local01
0c6e0     02 2C 66 F0 | 	shl	local04, #2
0c6e4     03 00 00 FF 
0c6e8     00 E4 85 F1 | 	sub	objptr, ##1536
0c6ec     F2 2C 02 F1 | 	add	local04, objptr
0c6f0     16 31 62 FC | 	wrlong	local06, local04
0c6f4     03 00 00 FF 
0c6f8     00 E4 05 F1 | 	add	objptr, ##1536
0c6fc     F2 30 02 FB | 	rdlong	local06, objptr
0c700     18 27 02 F6 | 	mov	local01, local06
0c704     01 26 66 F0 | 	shl	local01, #1
0c708     18 27 02 F1 | 	add	local01, local06
0c70c     02 26 66 F0 | 	shl	local01, #2
0c710     03 00 00 FF 
0c714     00 E4 85 F1 | 	sub	objptr, ##1536
0c718     F2 26 02 F1 | 	add	local01, objptr
0c71c     04 26 06 F1 | 	add	local01, #4
0c720     13 33 62 FC | 	wrlong	local07, local01
0c724     03 00 00 FF 
0c728     00 E4 05 F1 | 	add	objptr, ##1536
0c72c     F2 32 02 FB | 	rdlong	local07, objptr
0c730     19 31 02 F6 | 	mov	local06, local07
0c734     01 30 66 F0 | 	shl	local06, #1
0c738     19 31 02 F1 | 	add	local06, local07
0c73c     02 30 66 F0 | 	shl	local06, #2
0c740     03 00 00 FF 
0c744     00 E4 85 F1 | 	sub	objptr, ##1536
0c748     F2 30 02 F1 | 	add	local06, objptr
0c74c     08 30 06 F1 | 	add	local06, #8
0c750     18 2F 62 FC | 	wrlong	local05, local06
0c754     03 00 00 FF 
0c758     00 E4 05 F1 | 	add	objptr, ##1536
0c75c     F2 30 02 FB | 	rdlong	local06, objptr
0c760     01 30 06 F1 | 	add	local06, #1
0c764     F2 30 62 FC | 	wrlong	local06, objptr
0c768     13 00 00 FF 
0c76c     38 E4 85 F1 | 	sub	objptr, ##9784
0c770     F2 30 02 FB | 	rdlong	local06, objptr
0c774     01 30 06 F1 | 	add	local06, #1
0c778     F2 30 62 FC | 	wrlong	local06, objptr
0c77c     37 00 00 FF 
0c780     64 E4 85 F1 | 	sub	objptr, ##28260
0c784     E4 07 90 FD | 	jmp	#LR__1043
0c788                 | LR__1024
0c788                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c788     37 00 00 FF 
0c78c     64 E4 05 F1 | 	add	objptr, ##28260
0c790     F2 16 02 FB | 	rdlong	arg03, objptr
0c794     03 16 66 F0 | 	shl	arg03, #3
0c798     02 00 00 FF 
0c79c     38 E4 85 F1 | 	sub	objptr, ##1080
0c7a0     F2 16 02 F1 | 	add	arg03, objptr
0c7a4     0B 13 02 FB | 	rdlong	arg01, arg03
0c7a8     01 14 06 F6 | 	mov	arg02, #1
0c7ac     35 00 00 FF 
0c7b0     2C E4 85 F1 | 	sub	objptr, ##27180
0c7b4     DC D9 B1 FD | 	call	#__system__Left_S
0c7b8     FD 12 02 F6 | 	mov	arg01, result1
0c7bc     C2 01 00 FF 
0c7c0     05 14 06 F6 | 	mov	arg02, ##@LR__5984
0c7c4     74 B9 B1 FD | 	call	#__system___string_cmp
0c7c8     00 FA 0D F2 | 	cmp	result1, #0 wz
0c7cc     94 00 90 5D |  if_ne	jmp	#LR__1027
0c7d0     37 00 00 FF 
0c7d4     64 E4 05 F1 | 	add	objptr, ##28260
0c7d8     F2 32 02 FB | 	rdlong	local07, objptr
0c7dc     19 31 02 F6 | 	mov	local06, local07
0c7e0     03 30 66 F0 | 	shl	local06, #3
0c7e4     02 00 00 FF 
0c7e8     38 E4 85 F1 | 	sub	objptr, ##1080
0c7ec     F2 30 02 F1 | 	add	local06, objptr
0c7f0     C2 01 00 FF 
0c7f4     07 2E 06 F6 | 	mov	local05, ##@LR__5985
0c7f8     03 32 66 F0 | 	shl	local07, #3
0c7fc     F2 32 02 F1 | 	add	local07, objptr
0c800     19 33 02 FB | 	rdlong	local07, local07
0c804     02 00 00 FF 
0c808     38 E4 05 F1 | 	add	objptr, ##1080
0c80c     F2 26 02 FB | 	rdlong	local01, objptr
0c810     03 26 66 F0 | 	shl	local01, #3
0c814     02 00 00 FF 
0c818     38 E4 85 F1 | 	sub	objptr, ##1080
0c81c     F2 26 02 F1 | 	add	local01, objptr
0c820     13 13 02 FB | 	rdlong	arg01, local01
0c824     35 00 00 FF 
0c828     2C E4 85 F1 | 	sub	objptr, ##27180
0c82c     09 35 02 F6 | 	mov	local08, arg01
0c830     97 06 48 FB | 	callpa	#(@LR__1026-@LR__1025)>>2,fcache_load_ptr_
0c834                 | LR__1025
0c834     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c838     01 34 06 51 |  if_ne	add	local08, #1
0c83c     F4 FF 9F 5D |  if_ne	jmp	#LR__1025
0c840                 | LR__1026
0c840     09 35 82 F1 | 	sub	local08, arg01
0c844     1A 15 02 F6 | 	mov	arg02, local08
0c848     01 14 86 F1 | 	sub	arg02, #1
0c84c     19 13 02 F6 | 	mov	arg01, local07
0c850     C8 D9 B1 FD | 	call	#__system__Right_S
0c854     FD 14 02 F6 | 	mov	arg02, result1
0c858     17 13 02 F6 | 	mov	arg01, local05
0c85c     10 B9 B1 FD | 	call	#__system___string_concat
0c860     18 FB 61 FC | 	wrlong	result1, local06
0c864                 | LR__1027
0c864                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c864     37 00 00 FF 
0c868     64 E4 05 F1 | 	add	objptr, ##28260
0c86c     F2 16 02 FB | 	rdlong	arg03, objptr
0c870     03 16 66 F0 | 	shl	arg03, #3
0c874     02 00 00 FF 
0c878     38 E4 85 F1 | 	sub	objptr, ##1080
0c87c     F2 16 02 F1 | 	add	arg03, objptr
0c880     0B 13 02 FB | 	rdlong	arg01, arg03
0c884     01 14 06 F6 | 	mov	arg02, #1
0c888     35 00 00 FF 
0c88c     2C E4 85 F1 | 	sub	objptr, ##27180
0c890     00 D9 B1 FD | 	call	#__system__Left_S
0c894     FD 12 02 F6 | 	mov	arg01, result1
0c898     C2 01 00 FF 
0c89c     0A 14 06 F6 | 	mov	arg02, ##@LR__5986
0c8a0     98 B8 B1 FD | 	call	#__system___string_cmp
0c8a4     00 FA 0D F2 | 	cmp	result1, #0 wz
0c8a8     94 00 90 5D |  if_ne	jmp	#LR__1030
0c8ac     37 00 00 FF 
0c8b0     64 E4 05 F1 | 	add	objptr, ##28260
0c8b4     F2 32 02 FB | 	rdlong	local07, objptr
0c8b8     19 31 02 F6 | 	mov	local06, local07
0c8bc     03 30 66 F0 | 	shl	local06, #3
0c8c0     02 00 00 FF 
0c8c4     38 E4 85 F1 | 	sub	objptr, ##1080
0c8c8     F2 30 02 F1 | 	add	local06, objptr
0c8cc     C2 01 00 FF 
0c8d0     0C 2E 06 F6 | 	mov	local05, ##@LR__5987
0c8d4     03 32 66 F0 | 	shl	local07, #3
0c8d8     F2 32 02 F1 | 	add	local07, objptr
0c8dc     19 33 02 FB | 	rdlong	local07, local07
0c8e0     02 00 00 FF 
0c8e4     38 E4 05 F1 | 	add	objptr, ##1080
0c8e8     F2 26 02 FB | 	rdlong	local01, objptr
0c8ec     03 26 66 F0 | 	shl	local01, #3
0c8f0     02 00 00 FF 
0c8f4     38 E4 85 F1 | 	sub	objptr, ##1080
0c8f8     F2 26 02 F1 | 	add	local01, objptr
0c8fc     13 13 02 FB | 	rdlong	arg01, local01
0c900     35 00 00 FF 
0c904     2C E4 85 F1 | 	sub	objptr, ##27180
0c908     09 35 02 F6 | 	mov	local08, arg01
0c90c     97 06 48 FB | 	callpa	#(@LR__1029-@LR__1028)>>2,fcache_load_ptr_
0c910                 | LR__1028
0c910     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c914     01 34 06 51 |  if_ne	add	local08, #1
0c918     F4 FF 9F 5D |  if_ne	jmp	#LR__1028
0c91c                 | LR__1029
0c91c     09 35 82 F1 | 	sub	local08, arg01
0c920     1A 15 02 F6 | 	mov	arg02, local08
0c924     01 14 86 F1 | 	sub	arg02, #1
0c928     19 13 02 F6 | 	mov	arg01, local07
0c92c     EC D8 B1 FD | 	call	#__system__Right_S
0c930     FD 14 02 F6 | 	mov	arg02, result1
0c934     17 13 02 F6 | 	mov	arg01, local05
0c938     34 B8 B1 FD | 	call	#__system___string_concat
0c93c     18 FB 61 FC | 	wrlong	result1, local06
0c940                 | LR__1030
0c940     37 00 00 FF 
0c944     64 E4 05 F1 | 	add	objptr, ##28260
0c948     F2 30 02 FB | 	rdlong	local06, objptr
0c94c     03 30 66 F0 | 	shl	local06, #3
0c950     02 00 00 FF 
0c954     38 E4 85 F1 | 	sub	objptr, ##1080
0c958     F2 30 02 F1 | 	add	local06, objptr
0c95c     18 13 02 FB | 	rdlong	arg01, local06
0c960     00 14 06 F6 | 	mov	arg02, #0
0c964     35 00 00 FF 
0c968     2C E4 85 F1 | 	sub	objptr, ##27180
0c96c     98 EC B1 FD | 	call	#__system____builtin_atoi
0c970     FD 2C 02 FD | 	qmul	local04, result1
0c974     4A 00 00 FF 
0c978     9C E4 05 F1 | 	add	objptr, ##38044
0c97c     F2 30 02 FB | 	rdlong	local06, objptr
0c980     18 37 02 F6 | 	mov	local09, local06
0c984     01 36 66 F0 | 	shl	local09, #1
0c988     18 37 02 F1 | 	add	local09, local06
0c98c     02 36 66 F0 | 	shl	local09, #2
0c990     03 00 00 FF 
0c994     00 E4 85 F1 | 	sub	objptr, ##1536
0c998     F2 36 02 F1 | 	add	local09, objptr
0c99c     03 00 00 FF 
0c9a0     00 E4 05 F1 | 	add	objptr, ##1536
0c9a4     18 26 62 FD | 	getqx	local01
0c9a8     1C 2A 06 F6 | 	mov	local03, #28
0c9ac     13 31 02 F6 | 	mov	local06, local01
0c9b0     14 33 02 F6 | 	mov	local07, local02
0c9b4     1B 31 62 FC | 	wrlong	local06, local09
0c9b8     15 37 02 F6 | 	mov	local09, local03
0c9bc     F2 30 02 FB | 	rdlong	local06, objptr
0c9c0     18 2F 02 F6 | 	mov	local05, local06
0c9c4     01 2E 66 F0 | 	shl	local05, #1
0c9c8     18 2F 02 F1 | 	add	local05, local06
0c9cc     02 2E 66 F0 | 	shl	local05, #2
0c9d0     03 00 00 FF 
0c9d4     00 E4 85 F1 | 	sub	objptr, ##1536
0c9d8     F2 2E 02 F1 | 	add	local05, objptr
0c9dc     04 2E 06 F1 | 	add	local05, #4
0c9e0     17 33 62 FC | 	wrlong	local07, local05
0c9e4     03 00 00 FF 
0c9e8     00 E4 05 F1 | 	add	objptr, ##1536
0c9ec     F2 32 02 FB | 	rdlong	local07, objptr
0c9f0     19 31 02 F6 | 	mov	local06, local07
0c9f4     01 30 66 F0 | 	shl	local06, #1
0c9f8     19 31 02 F1 | 	add	local06, local07
0c9fc     02 30 66 F0 | 	shl	local06, #2
0ca00     03 00 00 FF 
0ca04     00 E4 85 F1 | 	sub	objptr, ##1536
0ca08     F2 30 02 F1 | 	add	local06, objptr
0ca0c     08 30 06 F1 | 	add	local06, #8
0ca10     18 37 62 FC | 	wrlong	local09, local06
0ca14     03 00 00 FF 
0ca18     00 E4 05 F1 | 	add	objptr, ##1536
0ca1c     F2 30 02 FB | 	rdlong	local06, objptr
0ca20     01 30 06 F1 | 	add	local06, #1
0ca24     F2 30 62 FC | 	wrlong	local06, objptr
0ca28     13 00 00 FF 
0ca2c     38 E4 85 F1 | 	sub	objptr, ##9784
0ca30     F2 30 02 FB | 	rdlong	local06, objptr
0ca34     01 30 06 F1 | 	add	local06, #1
0ca38     F2 30 62 FC | 	wrlong	local06, objptr
0ca3c     37 00 00 FF 
0ca40     64 E4 85 F1 | 	sub	objptr, ##28260
0ca44     24 05 90 FD | 	jmp	#LR__1043
0ca48                 | LR__1031
0ca48                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0ca48     01 2C 0E F2 | 	cmp	local04, #1 wz
0ca4c     48 00 90 5D |  if_ne	jmp	#LR__1032
0ca50     00 C0 1F FF 
0ca54     00 30 06 F6 | 	mov	local06, ##1065353216
0ca58     37 00 00 FF 
0ca5c     64 E4 05 F1 | 	add	objptr, ##28260
0ca60     F2 36 02 FB | 	rdlong	local09, objptr
0ca64     03 36 66 F0 | 	shl	local09, #3
0ca68     02 00 00 FF 
0ca6c     38 E4 85 F1 | 	sub	objptr, ##1080
0ca70     F2 36 02 F1 | 	add	local09, objptr
0ca74     1B 13 02 FB | 	rdlong	arg01, local09
0ca78     35 00 00 FF 
0ca7c     2C E4 85 F1 | 	sub	objptr, ##27180
0ca80     1C ED B1 FD | 	call	#__system____builtin_atof
0ca84     FD 14 02 F6 | 	mov	arg02, result1
0ca88     18 13 02 F6 | 	mov	arg01, local06
0ca8c     00 E5 B1 FD | 	call	#__system___float_mul
0ca90     FD 26 02 F6 | 	mov	local01, result1
0ca94     1E 2A 06 F6 | 	mov	local03, #30
0ca98                 | LR__1032
0ca98                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0ca98     FF FF 7F FF 
0ca9c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0caa0     48 00 90 5D |  if_ne	jmp	#LR__1033
0caa4     00 C0 5F FF 
0caa8     00 30 06 F6 | 	mov	local06, ##-1082130432
0caac     37 00 00 FF 
0cab0     64 E4 05 F1 | 	add	objptr, ##28260
0cab4     F2 36 02 FB | 	rdlong	local09, objptr
0cab8     03 36 66 F0 | 	shl	local09, #3
0cabc     02 00 00 FF 
0cac0     38 E4 85 F1 | 	sub	objptr, ##1080
0cac4     F2 36 02 F1 | 	add	local09, objptr
0cac8     1B 13 02 FB | 	rdlong	arg01, local09
0cacc     35 00 00 FF 
0cad0     2C E4 85 F1 | 	sub	objptr, ##27180
0cad4     C8 EC B1 FD | 	call	#__system____builtin_atof
0cad8     FD 14 02 F6 | 	mov	arg02, result1
0cadc     18 13 02 F6 | 	mov	arg01, local06
0cae0     AC E4 B1 FD | 	call	#__system___float_mul
0cae4     FD 26 02 F6 | 	mov	local01, result1
0cae8     1E 2A 06 F6 | 	mov	local03, #30
0caec                 | LR__1033
0caec     13 31 02 F6 | 	mov	local06, local01
0caf0     14 33 02 F6 | 	mov	local07, local02
0caf4     15 2F 02 F6 | 	mov	local05, local03
0caf8     4A 00 00 FF 
0cafc     9C E4 05 F1 | 	add	objptr, ##38044
0cb00     F2 26 02 FB | 	rdlong	local01, objptr
0cb04     13 37 02 F6 | 	mov	local09, local01
0cb08     01 36 66 F0 | 	shl	local09, #1
0cb0c     13 37 02 F1 | 	add	local09, local01
0cb10     02 36 66 F0 | 	shl	local09, #2
0cb14     03 00 00 FF 
0cb18     00 E4 85 F1 | 	sub	objptr, ##1536
0cb1c     F2 36 02 F1 | 	add	local09, objptr
0cb20     1B 31 62 FC | 	wrlong	local06, local09
0cb24     03 00 00 FF 
0cb28     00 E4 05 F1 | 	add	objptr, ##1536
0cb2c     F2 36 02 FB | 	rdlong	local09, objptr
0cb30     1B 31 02 F6 | 	mov	local06, local09
0cb34     01 30 66 F0 | 	shl	local06, #1
0cb38     1B 31 02 F1 | 	add	local06, local09
0cb3c     02 30 66 F0 | 	shl	local06, #2
0cb40     03 00 00 FF 
0cb44     00 E4 85 F1 | 	sub	objptr, ##1536
0cb48     F2 30 02 F1 | 	add	local06, objptr
0cb4c     04 30 06 F1 | 	add	local06, #4
0cb50     18 33 62 FC | 	wrlong	local07, local06
0cb54     03 00 00 FF 
0cb58     00 E4 05 F1 | 	add	objptr, ##1536
0cb5c     F2 36 02 FB | 	rdlong	local09, objptr
0cb60     1B 33 02 F6 | 	mov	local07, local09
0cb64     01 32 66 F0 | 	shl	local07, #1
0cb68     1B 33 02 F1 | 	add	local07, local09
0cb6c     02 32 66 F0 | 	shl	local07, #2
0cb70     03 00 00 FF 
0cb74     00 E4 85 F1 | 	sub	objptr, ##1536
0cb78     F2 32 02 F1 | 	add	local07, objptr
0cb7c     08 32 06 F1 | 	add	local07, #8
0cb80     19 2F 62 FC | 	wrlong	local05, local07
0cb84     03 00 00 FF 
0cb88     00 E4 05 F1 | 	add	objptr, ##1536
0cb8c     F2 30 02 FB | 	rdlong	local06, objptr
0cb90     01 30 06 F1 | 	add	local06, #1
0cb94     F2 30 62 FC | 	wrlong	local06, objptr
0cb98     13 00 00 FF 
0cb9c     38 E4 85 F1 | 	sub	objptr, ##9784
0cba0     F2 30 02 FB | 	rdlong	local06, objptr
0cba4     01 30 06 F1 | 	add	local06, #1
0cba8     F2 30 62 FC | 	wrlong	local06, objptr
0cbac     37 00 00 FF 
0cbb0     64 E4 85 F1 | 	sub	objptr, ##28260
0cbb4     B4 03 90 FD | 	jmp	#LR__1043
0cbb8                 | LR__1034
0cbb8     37 00 00 FF 
0cbbc     64 E4 05 F1 | 	add	objptr, ##28260
0cbc0     F2 16 02 FB | 	rdlong	arg03, objptr
0cbc4     03 16 66 F0 | 	shl	arg03, #3
0cbc8     02 00 00 FF 
0cbcc     38 E4 85 F1 | 	sub	objptr, ##1080
0cbd0     F2 16 02 F1 | 	add	arg03, objptr
0cbd4     0B 13 02 FB | 	rdlong	arg01, arg03
0cbd8     35 00 00 FF 
0cbdc     2C E4 85 F1 | 	sub	objptr, ##27180
0cbe0     09 35 02 F6 | 	mov	local08, arg01
0cbe4     97 06 48 FB | 	callpa	#(@LR__1036-@LR__1035)>>2,fcache_load_ptr_
0cbe8                 | LR__1035
0cbe8     1A FB C9 FA | 	rdbyte	result1, local08 wz
0cbec     01 34 06 51 |  if_ne	add	local08, #1
0cbf0     F4 FF 9F 5D |  if_ne	jmp	#LR__1035
0cbf4                 | LR__1036
0cbf4     09 35 82 F1 | 	sub	local08, arg01
0cbf8     1A FB 01 F6 | 	mov	result1, local08
0cbfc     52 00 00 FF 
0cc00     48 E5 05 F1 | 	add	objptr, ##42312
0cc04     F2 FA 61 FC | 	wrlong	result1, objptr
0cc08     58 E4 85 F1 | 	sub	objptr, #88
0cc0c     F2 12 02 FB | 	rdlong	arg01, objptr
0cc10     FD 12 82 F1 | 	sub	arg01, result1
0cc14     04 12 86 F1 | 	sub	arg01, #4
0cc18     03 12 26 F5 | 	andn	arg01, #3
0cc1c     F2 12 62 FC | 	wrlong	arg01, objptr
0cc20     58 E4 05 F1 | 	add	objptr, #88
0cc24     F2 14 02 FB | 	rdlong	arg02, objptr
0cc28     52 00 00 FF 
0cc2c     48 E5 85 F1 | 	sub	objptr, ##42312
0cc30     28 7C B1 FD | 	call	#_pslpoke
0cc34                 | '     pslpoke memtop,l
0cc34                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0cc34     01 38 06 F6 | 	mov	local10, #1
0cc38     52 00 00 FF 
0cc3c     48 E5 05 F1 | 	add	objptr, ##42312
0cc40     F2 3A 02 FB | 	rdlong	local11, objptr
0cc44     52 00 00 FF 
0cc48     48 E5 85 F1 | 	sub	objptr, ##42312
0cc4c     01 3A 06 F1 | 	add	local11, #1
0cc50                 | LR__1037
0cc50     1D 39 52 F2 | 	cmps	local10, local11 wc
0cc54     5C 00 90 3D |  if_ae	jmp	#LR__1038
0cc58     52 00 00 FF 
0cc5c     F0 E4 05 F1 | 	add	objptr, ##42224
0cc60     F2 32 02 FB | 	rdlong	local07, objptr
0cc64     03 32 06 F1 | 	add	local07, #3
0cc68     1C 33 02 F1 | 	add	local07, local10
0cc6c     1B 00 00 FF 
0cc70     8C E4 85 F1 | 	sub	objptr, ##13964
0cc74     F2 36 02 FB | 	rdlong	local09, objptr
0cc78     03 36 66 F0 | 	shl	local09, #3
0cc7c     02 00 00 FF 
0cc80     38 E4 85 F1 | 	sub	objptr, ##1080
0cc84     F2 36 02 F1 | 	add	local09, objptr
0cc88     1B 13 02 FB | 	rdlong	arg01, local09
0cc8c     1C 15 02 F6 | 	mov	arg02, local10
0cc90     01 16 06 F6 | 	mov	arg03, #1
0cc94     35 00 00 FF 
0cc98     2C E4 85 F1 | 	sub	objptr, ##27180
0cc9c     0C D6 B1 FD | 	call	#__system__Mid_S
0cca0     FD 14 C2 FA | 	rdbyte	arg02, result1
0cca4     19 13 02 F6 | 	mov	arg01, local07
0cca8     40 7C B1 FD | 	call	#_pspoke
0ccac     01 38 06 F1 | 	add	local10, #1
0ccb0     9C FF 9F FD | 	jmp	#LR__1037
0ccb4                 | LR__1038
0ccb4     52 00 00 FF 
0ccb8     F0 E4 05 F1 | 	add	objptr, ##42224
0ccbc     F2 26 02 FB | 	rdlong	local01, objptr
0ccc0     2B 2A 06 F6 | 	mov	local03, #43
0ccc4     13 31 02 F6 | 	mov	local06, local01
0ccc8     14 33 02 F6 | 	mov	local07, local02
0cccc     15 3B 02 F6 | 	mov	local11, local03
0ccd0     08 00 00 FF 
0ccd4     54 E4 85 F1 | 	sub	objptr, ##4180
0ccd8     F2 38 02 FB | 	rdlong	local10, objptr
0ccdc     1C 37 02 F6 | 	mov	local09, local10
0cce0     01 36 66 F0 | 	shl	local09, #1
0cce4     1C 37 02 F1 | 	add	local09, local10
0cce8     02 36 66 F0 | 	shl	local09, #2
0ccec     03 00 00 FF 
0ccf0     00 E4 85 F1 | 	sub	objptr, ##1536
0ccf4     F2 36 02 F1 | 	add	local09, objptr
0ccf8     1B 31 62 FC | 	wrlong	local06, local09
0ccfc     03 00 00 FF 
0cd00     00 E4 05 F1 | 	add	objptr, ##1536
0cd04     F2 38 02 FB | 	rdlong	local10, objptr
0cd08     1C 37 02 F6 | 	mov	local09, local10
0cd0c     01 36 66 F0 | 	shl	local09, #1
0cd10     1C 37 02 F1 | 	add	local09, local10
0cd14     02 36 66 F0 | 	shl	local09, #2
0cd18     03 00 00 FF 
0cd1c     00 E4 85 F1 | 	sub	objptr, ##1536
0cd20     F2 36 02 F1 | 	add	local09, objptr
0cd24     04 36 06 F1 | 	add	local09, #4
0cd28     1B 33 62 FC | 	wrlong	local07, local09
0cd2c     03 00 00 FF 
0cd30     00 E4 05 F1 | 	add	objptr, ##1536
0cd34     F2 38 02 FB | 	rdlong	local10, objptr
0cd38     1C 37 02 F6 | 	mov	local09, local10
0cd3c     01 36 66 F0 | 	shl	local09, #1
0cd40     1C 37 02 F1 | 	add	local09, local10
0cd44     02 36 66 F0 | 	shl	local09, #2
0cd48     03 00 00 FF 
0cd4c     00 E4 85 F1 | 	sub	objptr, ##1536
0cd50     F2 36 02 F1 | 	add	local09, objptr
0cd54     08 36 06 F1 | 	add	local09, #8
0cd58     1B 3B 62 FC | 	wrlong	local11, local09
0cd5c     03 00 00 FF 
0cd60     00 E4 05 F1 | 	add	objptr, ##1536
0cd64     F2 30 02 FB | 	rdlong	local06, objptr
0cd68     01 30 06 F1 | 	add	local06, #1
0cd6c     F2 30 62 FC | 	wrlong	local06, objptr
0cd70     13 00 00 FF 
0cd74     38 E4 85 F1 | 	sub	objptr, ##9784
0cd78     F2 30 02 FB | 	rdlong	local06, objptr
0cd7c     01 30 06 F1 | 	add	local06, #1
0cd80     F2 30 62 FC | 	wrlong	local06, objptr
0cd84     37 00 00 FF 
0cd88     64 E4 85 F1 | 	sub	objptr, ##28260
0cd8c     DC 01 90 FD | 	jmp	#LR__1043
0cd90                 | LR__1039
0cd90     2C 2A 06 F6 | 	mov	local03, #44
0cd94     37 00 00 FF 
0cd98     64 E4 05 F1 | 	add	objptr, ##28260
0cd9c     F2 30 02 FB | 	rdlong	local06, objptr
0cda0     03 30 66 F0 | 	shl	local06, #3
0cda4     02 00 00 FF 
0cda8     38 E4 85 F1 | 	sub	objptr, ##1080
0cdac     F2 30 02 F1 | 	add	local06, objptr
0cdb0     18 13 02 FB | 	rdlong	arg01, local06
0cdb4     00 14 06 F6 | 	mov	arg02, #0
0cdb8     35 00 00 FF 
0cdbc     2C E4 85 F1 | 	sub	objptr, ##27180
0cdc0     44 E8 B1 FD | 	call	#__system____builtin_atoi
0cdc4     FD 26 02 F6 | 	mov	local01, result1
0cdc8     13 31 02 F6 | 	mov	local06, local01
0cdcc     14 33 02 F6 | 	mov	local07, local02
0cdd0     15 3B 02 F6 | 	mov	local11, local03
0cdd4     4A 00 00 FF 
0cdd8     9C E4 05 F1 | 	add	objptr, ##38044
0cddc     F2 38 02 FB | 	rdlong	local10, objptr
0cde0     1C 37 02 F6 | 	mov	local09, local10
0cde4     01 36 66 F0 | 	shl	local09, #1
0cde8     1C 37 02 F1 | 	add	local09, local10
0cdec     02 36 66 F0 | 	shl	local09, #2
0cdf0     03 00 00 FF 
0cdf4     00 E4 85 F1 | 	sub	objptr, ##1536
0cdf8     F2 36 02 F1 | 	add	local09, objptr
0cdfc     1B 31 62 FC | 	wrlong	local06, local09
0ce00     03 00 00 FF 
0ce04     00 E4 05 F1 | 	add	objptr, ##1536
0ce08     F2 38 02 FB | 	rdlong	local10, objptr
0ce0c     1C 37 02 F6 | 	mov	local09, local10
0ce10     01 36 66 F0 | 	shl	local09, #1
0ce14     1C 37 02 F1 | 	add	local09, local10
0ce18     02 36 66 F0 | 	shl	local09, #2
0ce1c     03 00 00 FF 
0ce20     00 E4 85 F1 | 	sub	objptr, ##1536
0ce24     F2 36 02 F1 | 	add	local09, objptr
0ce28     04 36 06 F1 | 	add	local09, #4
0ce2c     1B 33 62 FC | 	wrlong	local07, local09
0ce30     03 00 00 FF 
0ce34     00 E4 05 F1 | 	add	objptr, ##1536
0ce38     F2 38 02 FB | 	rdlong	local10, objptr
0ce3c     1C 37 02 F6 | 	mov	local09, local10
0ce40     01 36 66 F0 | 	shl	local09, #1
0ce44     1C 37 02 F1 | 	add	local09, local10
0ce48     02 36 66 F0 | 	shl	local09, #2
0ce4c     03 00 00 FF 
0ce50     00 E4 85 F1 | 	sub	objptr, ##1536
0ce54     F2 36 02 F1 | 	add	local09, objptr
0ce58     08 36 06 F1 | 	add	local09, #8
0ce5c     1B 3B 62 FC | 	wrlong	local11, local09
0ce60     03 00 00 FF 
0ce64     00 E4 05 F1 | 	add	objptr, ##1536
0ce68     F2 30 02 FB | 	rdlong	local06, objptr
0ce6c     01 30 06 F1 | 	add	local06, #1
0ce70     F2 30 62 FC | 	wrlong	local06, objptr
0ce74     13 00 00 FF 
0ce78     38 E4 85 F1 | 	sub	objptr, ##9784
0ce7c     F2 30 02 FB | 	rdlong	local06, objptr
0ce80     01 30 06 F1 | 	add	local06, #1
0ce84     F2 30 62 FC | 	wrlong	local06, objptr
0ce88     37 00 00 FF 
0ce8c     64 E4 85 F1 | 	sub	objptr, ##28260
0ce90     D8 00 90 FD | 	jmp	#LR__1043
0ce94                 | LR__1040
0ce94     16 13 02 F6 | 	mov	arg01, local04
0ce98     24 04 B0 FD | 	call	#_getvar
0ce9c     37 00 00 FF 
0cea0     64 E4 05 F1 | 	add	objptr, ##28260
0cea4     F2 30 02 FB | 	rdlong	local06, objptr
0cea8     01 30 06 F1 | 	add	local06, #1
0ceac     F2 30 62 FC | 	wrlong	local06, objptr
0ceb0     37 00 00 FF 
0ceb4     64 E4 85 F1 | 	sub	objptr, ##28260
0ceb8                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0ceb8     01 FA 55 F2 | 	cmps	result1, #1 wc
0cebc     B0 00 90 3D |  if_ae	jmp	#LR__1044
0cec0     A8 00 90 FD | 	jmp	#LR__1043
0cec4                 | LR__1041
0cec4     37 00 00 FF 
0cec8     64 E4 05 F1 | 	add	objptr, ##28260
0cecc     F2 30 02 FB | 	rdlong	local06, objptr
0ced0     01 30 06 F1 | 	add	local06, #1
0ced4     F2 30 62 FC | 	wrlong	local06, objptr
0ced8     37 00 00 FF 
0cedc     64 E4 85 F1 | 	sub	objptr, ##28260
0cee0     20 F1 BF FD | 	call	#_expr
0cee4                 | '     ct+=1
0cee4                 | '     err=expr() : if err>0 then return err 
0cee4     01 FA 55 F2 | 	cmps	result1, #1 wc
0cee8     84 00 90 3D |  if_ae	jmp	#LR__1044
0ceec                 | '     if lparts(ct).token=token_rpar then ct+=1
0ceec     37 00 00 FF 
0cef0     64 E4 05 F1 | 	add	objptr, ##28260
0cef4     F2 3A 02 FB | 	rdlong	local11, objptr
0cef8     03 3A 66 F0 | 	shl	local11, #3
0cefc     02 00 00 FF 
0cf00     38 E4 85 F1 | 	sub	objptr, ##1080
0cf04     F2 3A 02 F1 | 	add	local11, objptr
0cf08     04 3A 06 F1 | 	add	local11, #4
0cf0c     1D 3B 02 FB | 	rdlong	local11, local11
0cf10     14 3A 0E F2 | 	cmp	local11, #20 wz
0cf14     35 00 00 FF 
0cf18     2C E4 85 F1 | 	sub	objptr, ##27180
0cf1c     4C 00 90 5D |  if_ne	jmp	#LR__1043
0cf20     37 00 00 FF 
0cf24     64 E4 05 F1 | 	add	objptr, ##28260
0cf28     F2 30 02 FB | 	rdlong	local06, objptr
0cf2c     01 30 06 F1 | 	add	local06, #1
0cf30     F2 30 62 FC | 	wrlong	local06, objptr
0cf34     37 00 00 FF 
0cf38     64 E4 85 F1 | 	sub	objptr, ##28260
0cf3c     2C 00 90 FD | 	jmp	#LR__1043
0cf40                 | LR__1042
0cf40     16 13 02 F6 | 	mov	arg01, local04
0cf44     34 00 B0 FD | 	call	#_getfun
0cf48     37 00 00 FF 
0cf4c     64 E4 05 F1 | 	add	objptr, ##28260
0cf50     F2 30 02 FB | 	rdlong	local06, objptr
0cf54     01 30 06 F1 | 	add	local06, #1
0cf58     F2 30 62 FC | 	wrlong	local06, objptr
0cf5c     37 00 00 FF 
0cf60     64 E4 85 F1 | 	sub	objptr, ##28260
0cf64                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0cf64     01 FA 55 F2 | 	cmps	result1, #1 wc
0cf68     04 00 90 3D |  if_ae	jmp	#LR__1044
0cf6c                 | LR__1043
0cf6c                 | ' return 0  
0cf6c     00 FA 05 F6 | 	mov	result1, #0
0cf70                 | LR__1044
0cf70     A7 F0 03 F6 | 	mov	ptra, fp
0cf74     B2 00 A0 FD | 	call	#popregs_
0cf78                 | _getvalue_ret
0cf78     2D 00 64 FD | 	ret
0cf7c                 | 
0cf7c                 | ' 
0cf7c                 | ' ' Get a function result 
0cf7c                 | ' 
0cf7c                 | ' function getfun(m as integer) as ulong
0cf7c                 | _getfun
0cf7c     0F 4A 05 F6 | 	mov	COUNT_, #15
0cf80     A8 00 A0 FD | 	call	#pushregs_
0cf84                 | _getfun_enter
0cf84     09 2D 02 F6 | 	mov	local04, arg01
0cf88     37 00 00 FF 
0cf8c     64 E4 05 F1 | 	add	objptr, ##28260
0cf90     F2 2E 02 FB | 	rdlong	local05, objptr
0cf94     17 31 02 F6 | 	mov	local06, local05
0cf98     00 32 06 F6 | 	mov	local07, #0
0cf9c                 | ' oldct=ct
0cf9c                 | ' numpar=0
0cf9c                 | ' if lparts(ct+1).token=token_lpar then
0cf9c     01 2E 06 F1 | 	add	local05, #1
0cfa0     03 2E 66 F0 | 	shl	local05, #3
0cfa4     02 00 00 FF 
0cfa8     38 E4 85 F1 | 	sub	objptr, ##1080
0cfac     F2 2E 02 F1 | 	add	local05, objptr
0cfb0     04 2E 06 F1 | 	add	local05, #4
0cfb4     17 2F 02 FB | 	rdlong	local05, local05
0cfb8     15 2E 0E F2 | 	cmp	local05, #21 wz
0cfbc     35 00 00 FF 
0cfc0     2C E4 85 F1 | 	sub	objptr, ##27180
0cfc4     54 01 90 5D |  if_ne	jmp	#LR__1054
0cfc8     37 00 00 FF 
0cfcc     64 E4 05 F1 | 	add	objptr, ##28260
0cfd0     F2 34 02 FB | 	rdlong	local08, objptr
0cfd4     01 34 06 F1 | 	add	local08, #1
0cfd8     F2 34 62 FC | 	wrlong	local08, objptr
0cfdc     37 00 00 FF 
0cfe0     64 E4 85 F1 | 	sub	objptr, ##28260
0cfe4                 | '   ct+=1 											' omit this lpar, this is for expr list
0cfe4                 | '   do
0cfe4                 | LR__1050
0cfe4     37 00 00 FF 
0cfe8     64 E4 05 F1 | 	add	objptr, ##28260
0cfec     F2 2E 02 FB | 	rdlong	local05, objptr
0cff0     01 2E 06 F1 | 	add	local05, #1
0cff4     F2 2E 62 FC | 	wrlong	local05, objptr
0cff8                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0cff8                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0cff8     03 2E 66 F0 | 	shl	local05, #3
0cffc     02 00 00 FF 
0d000     38 E4 85 F1 | 	sub	objptr, ##1080
0d004     F2 2E 02 F1 | 	add	local05, objptr
0d008     04 2E 06 F1 | 	add	local05, #4
0d00c     17 35 02 FB | 	rdlong	local08, local05
0d010     15 34 0E F2 | 	cmp	local08, #21 wz
0d014     35 00 00 FF 
0d018     2C E4 85 F1 | 	sub	objptr, ##27180
0d01c     44 00 90 5D |  if_ne	jmp	#LR__1051
0d020     37 00 00 FF 
0d024     64 E4 05 F1 | 	add	objptr, ##28260
0d028     F2 34 02 FB | 	rdlong	local08, objptr
0d02c     01 34 06 F1 | 	add	local08, #1
0d030     F2 34 62 FC | 	wrlong	local08, objptr
0d034     37 00 00 FF 
0d038     64 E4 85 F1 | 	sub	objptr, ##28260
0d03c     C4 EF BF FD | 	call	#_expr
0d040     FD 36 02 F6 | 	mov	local09, result1
0d044     37 00 00 FF 
0d048     64 E4 05 F1 | 	add	objptr, ##28260
0d04c     F2 34 02 FB | 	rdlong	local08, objptr
0d050     01 34 06 F1 | 	add	local08, #1
0d054     F2 34 62 FC | 	wrlong	local08, objptr
0d058     37 00 00 FF 
0d05c     64 E4 85 F1 | 	sub	objptr, ##28260
0d060     08 00 90 FD | 	jmp	#LR__1052
0d064                 | LR__1051
0d064     9C EF BF FD | 	call	#_expr
0d068     FD 36 02 F6 | 	mov	local09, result1
0d06c                 | LR__1052
0d06c                 | '     if err>0 then return err
0d06c     01 36 16 F2 | 	cmp	local09, #1 wc
0d070     1B FB 01 36 |  if_ae	mov	result1, local09
0d074     3C 02 90 3D |  if_ae	jmp	#LR__1056
0d078     01 32 06 F1 | 	add	local07, #1
0d07c     37 00 00 FF 
0d080     64 E4 05 F1 | 	add	objptr, ##28260
0d084     F2 2E 02 FB | 	rdlong	local05, objptr
0d088     03 2E 66 F0 | 	shl	local05, #3
0d08c     02 00 00 FF 
0d090     38 E4 85 F1 | 	sub	objptr, ##1080
0d094     F2 2E 02 F1 | 	add	local05, objptr
0d098     04 2E 06 F1 | 	add	local05, #4
0d09c     17 37 02 FB | 	rdlong	local09, local05
0d0a0     14 36 0E F2 | 	cmp	local09, #20 wz
0d0a4     35 00 00 FF 
0d0a8     2C E4 85 F1 | 	sub	objptr, ##27180
0d0ac     34 00 90 AD |  if_e	jmp	#LR__1053
0d0b0     37 00 00 FF 
0d0b4     64 E4 05 F1 | 	add	objptr, ##28260
0d0b8     F2 36 02 FB | 	rdlong	local09, objptr
0d0bc     03 36 66 F0 | 	shl	local09, #3
0d0c0     02 00 00 FF 
0d0c4     38 E4 85 F1 | 	sub	objptr, ##1080
0d0c8     F2 36 02 F1 | 	add	local09, objptr
0d0cc     04 36 06 F1 | 	add	local09, #4
0d0d0     1B 37 02 FB | 	rdlong	local09, local09
0d0d4     FE 37 0E F2 | 	cmp	local09, #510 wz
0d0d8     35 00 00 FF 
0d0dc     2C E4 85 F1 | 	sub	objptr, ##27180
0d0e0     00 FF 9F 5D |  if_ne	jmp	#LR__1050
0d0e4                 | LR__1053
0d0e4                 | '   if lparts(ct).token=token_end then return 14
0d0e4     37 00 00 FF 
0d0e8     64 E4 05 F1 | 	add	objptr, ##28260
0d0ec     F2 2E 02 FB | 	rdlong	local05, objptr
0d0f0     03 2E 66 F0 | 	shl	local05, #3
0d0f4     02 00 00 FF 
0d0f8     38 E4 85 F1 | 	sub	objptr, ##1080
0d0fc     F2 2E 02 F1 | 	add	local05, objptr
0d100     04 2E 06 F1 | 	add	local05, #4
0d104     17 37 02 FB | 	rdlong	local09, local05
0d108     FE 37 0E F2 | 	cmp	local09, #510 wz
0d10c     35 00 00 FF 
0d110     2C E4 85 F1 | 	sub	objptr, ##27180
0d114     0E FA 05 A6 |  if_e	mov	result1, #14
0d118     98 01 90 AD |  if_e	jmp	#LR__1056
0d11c                 | LR__1054
0d11c     19 27 02 F6 | 	mov	local01, local07
0d120     03 30 66 F0 | 	shl	local06, #3
0d124     35 00 00 FF 
0d128     2C E4 05 F1 | 	add	objptr, ##27180
0d12c     F2 30 02 F1 | 	add	local06, objptr
0d130     04 30 06 F1 | 	add	local06, #4
0d134     18 2B 02 FB | 	rdlong	local03, local06
0d138     13 35 02 F6 | 	mov	local08, local01
0d13c     14 39 02 F6 | 	mov	local10, local02
0d140     15 3B 02 F6 | 	mov	local11, local03
0d144     15 00 00 FF 
0d148     70 E4 05 F1 | 	add	objptr, ##10864
0d14c     F2 3C 02 FB | 	rdlong	local12, objptr
0d150     1E 3F 02 F6 | 	mov	local13, local12
0d154     01 3E 66 F0 | 	shl	local13, #1
0d158     1E 3F 02 F1 | 	add	local13, local12
0d15c     02 3E 66 F0 | 	shl	local13, #2
0d160     03 00 00 FF 
0d164     00 E4 85 F1 | 	sub	objptr, ##1536
0d168     F2 3E 02 F1 | 	add	local13, objptr
0d16c     1F 35 62 FC | 	wrlong	local08, local13
0d170     03 00 00 FF 
0d174     00 E4 05 F1 | 	add	objptr, ##1536
0d178     F2 34 02 FB | 	rdlong	local08, objptr
0d17c     1A 41 02 F6 | 	mov	local14, local08
0d180     01 40 66 F0 | 	shl	local14, #1
0d184     1A 41 02 F1 | 	add	local14, local08
0d188     02 40 66 F0 | 	shl	local14, #2
0d18c     03 00 00 FF 
0d190     00 E4 85 F1 | 	sub	objptr, ##1536
0d194     F2 40 02 F1 | 	add	local14, objptr
0d198     04 40 06 F1 | 	add	local14, #4
0d19c     20 39 62 FC | 	wrlong	local10, local14
0d1a0     03 00 00 FF 
0d1a4     00 E4 05 F1 | 	add	objptr, ##1536
0d1a8     F2 34 02 FB | 	rdlong	local08, objptr
0d1ac     1A 43 02 F6 | 	mov	local15, local08
0d1b0     01 42 66 F0 | 	shl	local15, #1
0d1b4     1A 43 02 F1 | 	add	local15, local08
0d1b8     02 42 66 F0 | 	shl	local15, #2
0d1bc     03 00 00 FF 
0d1c0     00 E4 85 F1 | 	sub	objptr, ##1536
0d1c4     F2 42 02 F1 | 	add	local15, objptr
0d1c8     08 42 06 F1 | 	add	local15, #8
0d1cc     21 3B 62 FC | 	wrlong	local11, local15
0d1d0     03 00 00 FF 
0d1d4     00 E4 05 F1 | 	add	objptr, ##1536
0d1d8     F2 34 02 FB | 	rdlong	local08, objptr
0d1dc     01 34 06 F1 | 	add	local08, #1
0d1e0     F2 34 62 FC | 	wrlong	local08, objptr
0d1e4     4A 00 00 FF 
0d1e8     9C E4 85 F1 | 	sub	objptr, ##38044
0d1ec                 | ' t2.result.uresult=numpar
0d1ec                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0d1ec                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d1ec                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d1ec     FF FF 7F FF 
0d1f0     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0d1f4     B8 00 90 5D |  if_ne	jmp	#LR__1055
0d1f8     15 2A 06 F6 | 	mov	local03, #21
0d1fc     13 35 02 F6 | 	mov	local08, local01
0d200     14 39 02 F6 | 	mov	local10, local02
0d204     15 3B 02 F6 | 	mov	local11, local03
0d208     4A 00 00 FF 
0d20c     9C E4 05 F1 | 	add	objptr, ##38044
0d210     F2 3C 02 FB | 	rdlong	local12, objptr
0d214     1E 3F 02 F6 | 	mov	local13, local12
0d218     01 3E 66 F0 | 	shl	local13, #1
0d21c     1E 3F 02 F1 | 	add	local13, local12
0d220     02 3E 66 F0 | 	shl	local13, #2
0d224     03 00 00 FF 
0d228     00 E4 85 F1 | 	sub	objptr, ##1536
0d22c     F2 3E 02 F1 | 	add	local13, objptr
0d230     1F 35 62 FC | 	wrlong	local08, local13
0d234     03 00 00 FF 
0d238     00 E4 05 F1 | 	add	objptr, ##1536
0d23c     F2 42 02 FB | 	rdlong	local15, objptr
0d240     21 41 02 F6 | 	mov	local14, local15
0d244     01 40 66 F0 | 	shl	local14, #1
0d248     21 41 02 F1 | 	add	local14, local15
0d24c     02 40 66 F0 | 	shl	local14, #2
0d250     03 00 00 FF 
0d254     00 E4 85 F1 | 	sub	objptr, ##1536
0d258     F2 40 02 F1 | 	add	local14, objptr
0d25c     04 40 06 F1 | 	add	local14, #4
0d260     20 39 62 FC | 	wrlong	local10, local14
0d264     03 00 00 FF 
0d268     00 E4 05 F1 | 	add	objptr, ##1536
0d26c     F2 40 02 FB | 	rdlong	local14, objptr
0d270     20 43 02 F6 | 	mov	local15, local14
0d274     01 42 66 F0 | 	shl	local15, #1
0d278     20 43 02 F1 | 	add	local15, local14
0d27c     02 42 66 F0 | 	shl	local15, #2
0d280     03 00 00 FF 
0d284     00 E4 85 F1 | 	sub	objptr, ##1536
0d288     F2 42 02 F1 | 	add	local15, objptr
0d28c     08 42 06 F1 | 	add	local15, #8
0d290     21 3B 62 FC | 	wrlong	local11, local15
0d294     03 00 00 FF 
0d298     00 E4 05 F1 | 	add	objptr, ##1536
0d29c     F2 34 02 FB | 	rdlong	local08, objptr
0d2a0     01 34 06 F1 | 	add	local08, #1
0d2a4     F2 34 62 FC | 	wrlong	local08, objptr
0d2a8     4A 00 00 FF 
0d2ac     9C E4 85 F1 | 	sub	objptr, ##38044
0d2b0                 | LR__1055
0d2b0                 | ' return 0
0d2b0     00 FA 05 F6 | 	mov	result1, #0
0d2b4                 | LR__1056
0d2b4     A7 F0 03 F6 | 	mov	ptra, fp
0d2b8     B2 00 A0 FD | 	call	#popregs_
0d2bc                 | _getfun_ret
0d2bc     2D 00 64 FD | 	ret
0d2c0                 | 
0d2c0                 | '   
0d2c0                 | '   
0d2c0                 | ' function getvar(m as integer) as ulong
0d2c0                 | _getvar
0d2c0     11 4A 05 F6 | 	mov	COUNT_, #17
0d2c4     A8 00 A0 FD | 	call	#pushregs_
0d2c8                 | _getvar_enter
0d2c8     09 2D 02 F6 | 	mov	local04, arg01
0d2cc     37 00 00 FF 
0d2d0     64 E4 05 F1 | 	add	objptr, ##28260
0d2d4     F2 2E 02 FB | 	rdlong	local05, objptr
0d2d8     03 2E 66 F0 | 	shl	local05, #3
0d2dc     02 00 00 FF 
0d2e0     38 E4 85 F1 | 	sub	objptr, ##1080
0d2e4     F2 2E 02 F1 | 	add	local05, objptr
0d2e8     17 31 02 FB | 	rdlong	local06, local05
0d2ec     01 32 66 F6 | 	neg	local07, #1
0d2f0                 | ' 
0d2f0                 | ' varname$=lparts(ct).part$
0d2f0                 | ' j=-1
0d2f0                 | ' 
0d2f0                 | ' for i=0 to varnum-1
0d2f0     00 34 06 F6 | 	mov	local08, #0
0d2f4     04 E4 85 F1 | 	sub	objptr, #4
0d2f8     F2 36 02 FB | 	rdlong	local09, objptr
0d2fc     35 00 00 FF 
0d300     28 E4 85 F1 | 	sub	objptr, ##27176
0d304                 | LR__1060
0d304     1B 35 52 F2 | 	cmps	local08, local09 wc
0d308     38 00 90 3D |  if_ae	jmp	#LR__1061
0d30c                 | '   if variables(i).name=varname$ then j=i : exit
0d30c     1A 2F 02 F6 | 	mov	local05, local08
0d310     04 2E 66 F0 | 	shl	local05, #4
0d314     15 00 00 FF 
0d318     18 E4 05 F1 | 	add	objptr, ##10776
0d31c     F2 2E 02 F1 | 	add	local05, objptr
0d320     17 13 02 FB | 	rdlong	arg01, local05
0d324     18 15 02 F6 | 	mov	arg02, local06
0d328     15 00 00 FF 
0d32c     18 E4 85 F1 | 	sub	objptr, ##10776
0d330     08 AE B1 FD | 	call	#__system___string_cmp
0d334     00 FA 0D F2 | 	cmp	result1, #0 wz
0d338     1A 33 02 A6 |  if_e	mov	local07, local08
0d33c     01 34 06 51 |  if_ne	add	local08, #1
0d340     C0 FF 9F 5D |  if_ne	jmp	#LR__1060
0d344                 | LR__1061
0d344                 | ' if  j=-1 andalso varnum<maxvars then   
0d344     FF FF 7F FF 
0d348     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0d34c     A8 00 90 5D |  if_ne	jmp	#LR__1062
0d350     35 00 00 FF 
0d354     28 E4 05 F1 | 	add	objptr, ##27176
0d358     F2 36 02 FB | 	rdlong	local09, objptr
0d35c     35 00 00 FF 
0d360     28 E4 85 F1 | 	sub	objptr, ##27176
0d364     02 00 00 FF 
0d368     00 36 56 F2 | 	cmps	local09, ##1024 wc
0d36c     88 00 90 3D |  if_ae	jmp	#LR__1062
0d370     35 00 00 FF 
0d374     28 E4 05 F1 | 	add	objptr, ##27176
0d378     F2 2E 02 FB | 	rdlong	local05, objptr
0d37c     04 2E 66 F0 | 	shl	local05, #4
0d380     20 00 00 FF 
0d384     10 E4 85 F1 | 	sub	objptr, ##16400
0d388     F2 2E 02 F1 | 	add	local05, objptr
0d38c     17 31 62 FC | 	wrlong	local06, local05
0d390     20 00 00 FF 
0d394     10 E4 05 F1 | 	add	objptr, ##16400
0d398     F2 2E 02 FB | 	rdlong	local05, objptr
0d39c     04 2E 66 F0 | 	shl	local05, #4
0d3a0     20 00 00 FF 
0d3a4     10 E4 85 F1 | 	sub	objptr, ##16400
0d3a8     F2 2E 02 F1 | 	add	local05, objptr
0d3ac     04 2E 06 F1 | 	add	local05, #4
0d3b0     17 01 68 FC | 	wrlong	#0, local05
0d3b4     20 00 00 FF 
0d3b8     10 E4 05 F1 | 	add	objptr, ##16400
0d3bc     F2 2E 02 FB | 	rdlong	local05, objptr
0d3c0     04 2E 66 F0 | 	shl	local05, #4
0d3c4     20 00 00 FF 
0d3c8     10 E4 85 F1 | 	sub	objptr, ##16400
0d3cc     F2 2E 02 F1 | 	add	local05, objptr
0d3d0     0C 2E 06 F1 | 	add	local05, #12
0d3d4     17 39 68 FC | 	wrlong	#28, local05
0d3d8     20 00 00 FF 
0d3dc     10 E4 05 F1 | 	add	objptr, ##16400
0d3e0     F2 36 02 FB | 	rdlong	local09, objptr
0d3e4     1B 33 02 F6 | 	mov	local07, local09
0d3e8     01 36 06 F1 | 	add	local09, #1
0d3ec     F2 36 62 FC | 	wrlong	local09, objptr
0d3f0     35 00 00 FF 
0d3f4     28 E4 85 F1 | 	sub	objptr, ##27176
0d3f8                 | LR__1062
0d3f8     00 36 06 F6 | 	mov	local09, #0
0d3fc                 | ' numpar=0
0d3fc                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0d3fc     37 00 00 FF 
0d400     64 E4 05 F1 | 	add	objptr, ##28260
0d404     F2 2E 02 FB | 	rdlong	local05, objptr
0d408     01 2E 06 F1 | 	add	local05, #1
0d40c     03 2E 66 F0 | 	shl	local05, #3
0d410     02 00 00 FF 
0d414     38 E4 85 F1 | 	sub	objptr, ##1080
0d418     F2 2E 02 F1 | 	add	local05, objptr
0d41c     04 2E 06 F1 | 	add	local05, #4
0d420     17 35 02 FB | 	rdlong	local08, local05
0d424     15 34 0E F2 | 	cmp	local08, #21 wz
0d428     35 00 00 FF 
0d42c     2C E4 85 F1 | 	sub	objptr, ##27180
0d430     54 01 90 5D |  if_ne	jmp	#LR__1067
0d434     37 00 00 FF 
0d438     64 E4 05 F1 | 	add	objptr, ##28260
0d43c     F2 38 02 FB | 	rdlong	local10, objptr
0d440     01 38 06 F1 | 	add	local10, #1
0d444     F2 38 62 FC | 	wrlong	local10, objptr
0d448     37 00 00 FF 
0d44c     64 E4 85 F1 | 	sub	objptr, ##28260
0d450                 | '   ct+=1 											' omit this lpar, this is for expr list
0d450                 | '   do
0d450                 | LR__1063
0d450     37 00 00 FF 
0d454     64 E4 05 F1 | 	add	objptr, ##28260
0d458     F2 2E 02 FB | 	rdlong	local05, objptr
0d45c     01 2E 06 F1 | 	add	local05, #1
0d460     F2 2E 62 FC | 	wrlong	local05, objptr
0d464                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0d464                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0d464     03 2E 66 F0 | 	shl	local05, #3
0d468     02 00 00 FF 
0d46c     38 E4 85 F1 | 	sub	objptr, ##1080
0d470     F2 2E 02 F1 | 	add	local05, objptr
0d474     04 2E 06 F1 | 	add	local05, #4
0d478     17 39 02 FB | 	rdlong	local10, local05
0d47c     15 38 0E F2 | 	cmp	local10, #21 wz
0d480     35 00 00 FF 
0d484     2C E4 85 F1 | 	sub	objptr, ##27180
0d488     44 00 90 5D |  if_ne	jmp	#LR__1064
0d48c     37 00 00 FF 
0d490     64 E4 05 F1 | 	add	objptr, ##28260
0d494     F2 38 02 FB | 	rdlong	local10, objptr
0d498     01 38 06 F1 | 	add	local10, #1
0d49c     F2 38 62 FC | 	wrlong	local10, objptr
0d4a0     37 00 00 FF 
0d4a4     64 E4 85 F1 | 	sub	objptr, ##28260
0d4a8     58 EB BF FD | 	call	#_expr
0d4ac     FD 3A 02 F6 | 	mov	local11, result1
0d4b0     37 00 00 FF 
0d4b4     64 E4 05 F1 | 	add	objptr, ##28260
0d4b8     F2 38 02 FB | 	rdlong	local10, objptr
0d4bc     01 38 06 F1 | 	add	local10, #1
0d4c0     F2 38 62 FC | 	wrlong	local10, objptr
0d4c4     37 00 00 FF 
0d4c8     64 E4 85 F1 | 	sub	objptr, ##28260
0d4cc     08 00 90 FD | 	jmp	#LR__1065
0d4d0                 | LR__1064
0d4d0     30 EB BF FD | 	call	#_expr
0d4d4     FD 3A 02 F6 | 	mov	local11, result1
0d4d8                 | LR__1065
0d4d8                 | '     if err>0 then return err
0d4d8     01 3A 56 F2 | 	cmps	local11, #1 wc
0d4dc     1D FB 01 36 |  if_ae	mov	result1, local11
0d4e0     2C 02 90 3D |  if_ae	jmp	#LR__1069
0d4e4     01 36 06 F1 | 	add	local09, #1
0d4e8     37 00 00 FF 
0d4ec     64 E4 05 F1 | 	add	objptr, ##28260
0d4f0     F2 2E 02 FB | 	rdlong	local05, objptr
0d4f4     03 2E 66 F0 | 	shl	local05, #3
0d4f8     02 00 00 FF 
0d4fc     38 E4 85 F1 | 	sub	objptr, ##1080
0d500     F2 2E 02 F1 | 	add	local05, objptr
0d504     04 2E 06 F1 | 	add	local05, #4
0d508     17 3B 02 FB | 	rdlong	local11, local05
0d50c     14 3A 0E F2 | 	cmp	local11, #20 wz
0d510     35 00 00 FF 
0d514     2C E4 85 F1 | 	sub	objptr, ##27180
0d518     34 00 90 AD |  if_e	jmp	#LR__1066
0d51c     37 00 00 FF 
0d520     64 E4 05 F1 | 	add	objptr, ##28260
0d524     F2 3A 02 FB | 	rdlong	local11, objptr
0d528     03 3A 66 F0 | 	shl	local11, #3
0d52c     02 00 00 FF 
0d530     38 E4 85 F1 | 	sub	objptr, ##1080
0d534     F2 3A 02 F1 | 	add	local11, objptr
0d538     04 3A 06 F1 | 	add	local11, #4
0d53c     1D 3B 02 FB | 	rdlong	local11, local11
0d540     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d544     35 00 00 FF 
0d548     2C E4 85 F1 | 	sub	objptr, ##27180
0d54c     00 FF 9F 5D |  if_ne	jmp	#LR__1063
0d550                 | LR__1066
0d550                 | '     if lparts(ct).token=token_end then return 14
0d550     37 00 00 FF 
0d554     64 E4 05 F1 | 	add	objptr, ##28260
0d558     F2 2E 02 FB | 	rdlong	local05, objptr
0d55c     03 2E 66 F0 | 	shl	local05, #3
0d560     02 00 00 FF 
0d564     38 E4 85 F1 | 	sub	objptr, ##1080
0d568     F2 2E 02 F1 | 	add	local05, objptr
0d56c     04 2E 06 F1 | 	add	local05, #4
0d570     17 3B 02 FB | 	rdlong	local11, local05
0d574     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d578     35 00 00 FF 
0d57c     2C E4 85 F1 | 	sub	objptr, ##27180
0d580     0E FA 05 A6 |  if_e	mov	result1, #14
0d584     88 01 90 AD |  if_e	jmp	#LR__1069
0d588                 | LR__1067
0d588     1B 29 02 F6 | 	mov	local02, local09
0d58c     11 2A 06 F6 | 	mov	local03, #17
0d590     19 27 02 F6 | 	mov	local01, local07
0d594     13 39 02 F6 | 	mov	local10, local01
0d598     14 3D 02 F6 | 	mov	local12, local02
0d59c     15 3F 02 F6 | 	mov	local13, local03
0d5a0     4A 00 00 FF 
0d5a4     9C E4 05 F1 | 	add	objptr, ##38044
0d5a8     F2 40 02 FB | 	rdlong	local14, objptr
0d5ac     20 43 02 F6 | 	mov	local15, local14
0d5b0     01 42 66 F0 | 	shl	local15, #1
0d5b4     20 43 02 F1 | 	add	local15, local14
0d5b8     02 42 66 F0 | 	shl	local15, #2
0d5bc     03 00 00 FF 
0d5c0     00 E4 85 F1 | 	sub	objptr, ##1536
0d5c4     F2 42 02 F1 | 	add	local15, objptr
0d5c8     21 39 62 FC | 	wrlong	local10, local15
0d5cc     03 00 00 FF 
0d5d0     00 E4 05 F1 | 	add	objptr, ##1536
0d5d4     F2 38 02 FB | 	rdlong	local10, objptr
0d5d8     1C 45 02 F6 | 	mov	local16, local10
0d5dc     01 44 66 F0 | 	shl	local16, #1
0d5e0     1C 45 02 F1 | 	add	local16, local10
0d5e4     02 44 66 F0 | 	shl	local16, #2
0d5e8     03 00 00 FF 
0d5ec     00 E4 85 F1 | 	sub	objptr, ##1536
0d5f0     F2 44 02 F1 | 	add	local16, objptr
0d5f4     04 44 06 F1 | 	add	local16, #4
0d5f8     22 3D 62 FC | 	wrlong	local12, local16
0d5fc     03 00 00 FF 
0d600     00 E4 05 F1 | 	add	objptr, ##1536
0d604     F2 38 02 FB | 	rdlong	local10, objptr
0d608     1C 47 02 F6 | 	mov	local17, local10
0d60c     01 46 66 F0 | 	shl	local17, #1
0d610     1C 47 02 F1 | 	add	local17, local10
0d614     02 46 66 F0 | 	shl	local17, #2
0d618     03 00 00 FF 
0d61c     00 E4 85 F1 | 	sub	objptr, ##1536
0d620     F2 46 02 F1 | 	add	local17, objptr
0d624     08 46 06 F1 | 	add	local17, #8
0d628     23 3F 62 FC | 	wrlong	local13, local17
0d62c     03 00 00 FF 
0d630     00 E4 05 F1 | 	add	objptr, ##1536
0d634     F2 38 02 FB | 	rdlong	local10, objptr
0d638     01 38 06 F1 | 	add	local10, #1
0d63c     F2 38 62 FC | 	wrlong	local10, objptr
0d640     4A 00 00 FF 
0d644     9C E4 85 F1 | 	sub	objptr, ##38044
0d648                 | ' t2.result.twowords(1)=numpar
0d648                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0d648                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d648                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d648     FF FF 7F FF 
0d64c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0d650     B8 00 90 5D |  if_ne	jmp	#LR__1068
0d654     15 2A 06 F6 | 	mov	local03, #21
0d658     13 39 02 F6 | 	mov	local10, local01
0d65c     14 3D 02 F6 | 	mov	local12, local02
0d660     15 3F 02 F6 | 	mov	local13, local03
0d664     4A 00 00 FF 
0d668     9C E4 05 F1 | 	add	objptr, ##38044
0d66c     F2 40 02 FB | 	rdlong	local14, objptr
0d670     20 43 02 F6 | 	mov	local15, local14
0d674     01 42 66 F0 | 	shl	local15, #1
0d678     20 43 02 F1 | 	add	local15, local14
0d67c     02 42 66 F0 | 	shl	local15, #2
0d680     03 00 00 FF 
0d684     00 E4 85 F1 | 	sub	objptr, ##1536
0d688     F2 42 02 F1 | 	add	local15, objptr
0d68c     21 39 62 FC | 	wrlong	local10, local15
0d690     03 00 00 FF 
0d694     00 E4 05 F1 | 	add	objptr, ##1536
0d698     F2 46 02 FB | 	rdlong	local17, objptr
0d69c     23 45 02 F6 | 	mov	local16, local17
0d6a0     01 44 66 F0 | 	shl	local16, #1
0d6a4     23 45 02 F1 | 	add	local16, local17
0d6a8     02 44 66 F0 | 	shl	local16, #2
0d6ac     03 00 00 FF 
0d6b0     00 E4 85 F1 | 	sub	objptr, ##1536
0d6b4     F2 44 02 F1 | 	add	local16, objptr
0d6b8     04 44 06 F1 | 	add	local16, #4
0d6bc     22 3D 62 FC | 	wrlong	local12, local16
0d6c0     03 00 00 FF 
0d6c4     00 E4 05 F1 | 	add	objptr, ##1536
0d6c8     F2 44 02 FB | 	rdlong	local16, objptr
0d6cc     22 47 02 F6 | 	mov	local17, local16
0d6d0     01 46 66 F0 | 	shl	local17, #1
0d6d4     22 47 02 F1 | 	add	local17, local16
0d6d8     02 46 66 F0 | 	shl	local17, #2
0d6dc     03 00 00 FF 
0d6e0     00 E4 85 F1 | 	sub	objptr, ##1536
0d6e4     F2 46 02 F1 | 	add	local17, objptr
0d6e8     08 46 06 F1 | 	add	local17, #8
0d6ec     23 3F 62 FC | 	wrlong	local13, local17
0d6f0     03 00 00 FF 
0d6f4     00 E4 05 F1 | 	add	objptr, ##1536
0d6f8     F2 38 02 FB | 	rdlong	local10, objptr
0d6fc     01 38 06 F1 | 	add	local10, #1
0d700     F2 38 62 FC | 	wrlong	local10, objptr
0d704     4A 00 00 FF 
0d708     9C E4 85 F1 | 	sub	objptr, ##38044
0d70c                 | LR__1068
0d70c                 | ' return 0
0d70c     00 FA 05 F6 | 	mov	result1, #0
0d710                 | LR__1069
0d710     A7 F0 03 F6 | 	mov	ptra, fp
0d714     B2 00 A0 FD | 	call	#popregs_
0d718                 | _getvar_ret
0d718     2D 00 64 FD | 	ret
0d71c                 | 
0d71c                 | ' 
0d71c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d71c                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0d71c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d71c                 | ' 
0d71c                 | ' 
0d71c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d71c                 | ' '                                                                                                                                       -
0d71c                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0d71c                 | ' '                                                                                                                                       -
0d71c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d71c                 | ' 
0d71c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d71c                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0d71c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d71c                 | ' 
0d71c                 | ' function execute_line (astart=0 as integer) as integer
0d71c                 | _execute_line
0d71c     04 4A 05 F6 | 	mov	COUNT_, #4
0d720     A8 00 A0 FD | 	call	#pushregs_
0d724     50 00 00 FF 
0d728     DC E4 05 F1 | 	add	objptr, ##41180
0d72c     F2 00 68 FC | 	wrlong	#0, objptr
0d730                 | ' 
0d730                 | ' runptr2=0
0d730                 | ' for lineptr_e=astart to lineptr-1
0d730     06 00 00 FF 
0d734     3C E4 85 F1 | 	sub	objptr, ##3132
0d738     F2 12 62 FC | 	wrlong	arg01, objptr
0d73c     04 E4 85 F1 | 	sub	objptr, #4
0d740     F2 26 02 FB | 	rdlong	local01, objptr
0d744     4A 00 00 FF 
0d748     9C E4 85 F1 | 	sub	objptr, ##38044
0d74c                 | LR__1070
0d74c     4A 00 00 FF 
0d750     A0 E4 05 F1 | 	add	objptr, ##38048
0d754     F2 FA 01 FB | 	rdlong	result1, objptr
0d758     4A 00 00 FF 
0d75c     A0 E4 85 F1 | 	sub	objptr, ##38048
0d760     13 FB 51 F2 | 	cmps	result1, local01 wc
0d764     98 00 90 3D |  if_ae	jmp	#LR__1071
0d768     4A 00 00 FF 
0d76c     A0 E4 05 F1 | 	add	objptr, ##38048
0d770     F2 FA 01 FB | 	rdlong	result1, objptr
0d774     FD 28 02 F6 | 	mov	local02, result1
0d778     01 28 66 F0 | 	shl	local02, #1
0d77c     FD 28 02 F1 | 	add	local02, result1
0d780     02 28 66 F0 | 	shl	local02, #2
0d784     03 00 00 FF 
0d788     04 E4 85 F1 | 	sub	objptr, ##1540
0d78c     F2 28 02 F1 | 	add	local02, objptr
0d790     08 28 06 F1 | 	add	local02, #8
0d794     14 29 02 FB | 	rdlong	local02, local02
0d798     14 29 E2 F8 | 	getbyte	local02, local02, #0
0d79c     02 28 66 F0 | 	shl	local02, #2
0d7a0     04 00 00 FF 
0d7a4     1C E4 85 F1 | 	sub	objptr, ##2076
0d7a8     F2 28 02 F1 | 	add	local02, objptr
0d7ac     14 29 02 FB | 	rdlong	local02, local02
0d7b0     14 2B 02 F6 | 	mov	local03, local02
0d7b4     13 28 46 F7 | 	zerox	local02, #19
0d7b8     14 2A 46 F0 | 	shr	local03, #20
0d7bc     02 2A 66 F0 | 	shl	local03, #2
0d7c0     ED 2A 02 F1 | 	add	local03, __methods__
0d7c4     15 2B 02 FB | 	rdlong	local03, local03
0d7c8     43 00 00 FF 
0d7cc     80 E4 85 F1 | 	sub	objptr, ##34432
0d7d0     F2 2C 02 F6 | 	mov	local04, objptr
0d7d4     14 E5 01 F6 | 	mov	objptr, local02
0d7d8     2D 2A 62 FD | 	call	local03
0d7dc     16 E5 01 F6 | 	mov	objptr, local04
0d7e0     4A 00 00 FF 
0d7e4     A0 E4 05 F1 | 	add	objptr, ##38048
0d7e8     F2 2C 02 FB | 	rdlong	local04, objptr
0d7ec     01 2C 06 F1 | 	add	local04, #1
0d7f0     F2 2C 62 FC | 	wrlong	local04, objptr
0d7f4     4A 00 00 FF 
0d7f8     A0 E4 85 F1 | 	sub	objptr, ##38048
0d7fc     4C FF 9F FD | 	jmp	#LR__1070
0d800                 | LR__1071
0d800                 | ' return runptr2
0d800     50 00 00 FF 
0d804     DC E4 05 F1 | 	add	objptr, ##41180
0d808     F2 FA 01 FB | 	rdlong	result1, objptr
0d80c     50 00 00 FF 
0d810     DC E4 85 F1 | 	sub	objptr, ##41180
0d814     A7 F0 03 F6 | 	mov	ptra, fp
0d818     B2 00 A0 FD | 	call	#popregs_
0d81c                 | _execute_line_ret
0d81c     2D 00 64 FD | 	ret
0d820                 | 
0d820                 | ' 
0d820                 | ' 
0d820                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d820                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0d820                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d820                 | ' 
0d820                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0d820                 | ' 
0d820                 | ' function pop() as expr_result
0d820                 | _pop
0d820                 | ' if stackpointer=0 then
0d820     43 00 00 FF 
0d824     78 E4 05 F1 | 	add	objptr, ##34424
0d828     F2 FA 09 FB | 	rdlong	result1, objptr wz
0d82c     43 00 00 FF 
0d830     78 E4 85 F1 | 	sub	objptr, ##34424
0d834     FF 04 06 A6 |  if_e	mov	_var03, #255
0d838     18 00 06 A6 |  if_e	mov	_var01, #24
0d83c     68 00 90 AD |  if_e	jmp	#LR__1080
0d840     43 00 00 FF 
0d844     78 E4 05 F1 | 	add	objptr, ##34424
0d848     F2 FA 01 FB | 	rdlong	result1, objptr
0d84c     01 FA 85 F1 | 	sub	result1, #1
0d850     F2 FA 61 FC | 	wrlong	result1, objptr
0d854     FD FE 01 F6 | 	mov	result3, result1
0d858     01 FE 65 F0 | 	shl	result3, #1
0d85c     FD FE 01 F1 | 	add	result3, result1
0d860     02 FE 65 F0 | 	shl	result3, #2
0d864     0C 00 00 FF 
0d868     0C E4 85 F1 | 	sub	objptr, ##6156
0d86c     F2 FE 01 F1 | 	add	result3, objptr
0d870     FF 00 02 FB | 	rdlong	_var01, result3
0d874     04 FE 05 F1 | 	add	result3, #4
0d878     FF FE 01 FB | 	rdlong	result3, result3
0d87c     FD FC 01 F6 | 	mov	result2, result1
0d880     01 FC 65 F0 | 	shl	result2, #1
0d884     FD FC 01 F1 | 	add	result2, result1
0d888     02 FC 65 F0 | 	shl	result2, #2
0d88c     F2 FC 01 F1 | 	add	result2, objptr
0d890     08 FC 05 F1 | 	add	result2, #8
0d894     FE FA 01 FB | 	rdlong	result1, result2
0d898     FF 02 02 F6 | 	mov	_var02, result3
0d89c     FD 04 02 F6 | 	mov	_var03, result1
0d8a0     37 00 00 FF 
0d8a4     6C E4 85 F1 | 	sub	objptr, ##28268
0d8a8                 | LR__1080
0d8a8                 | ' return t1
0d8a8     01 FD 01 F6 | 	mov	result2, _var02
0d8ac     02 FF 01 F6 | 	mov	result3, _var03
0d8b0     00 FB 01 F6 | 	mov	result1, _var01
0d8b4                 | _pop_ret
0d8b4     2D 00 64 FD | 	ret
0d8b8                 | 
0d8b8                 | ' 
0d8b8                 | ' sub push(t1 as expr_result )
0d8b8                 | _push
0d8b8                 | ' if stackpointer<maxstack then 
0d8b8     43 00 00 FF 
0d8bc     78 E4 05 F1 | 	add	objptr, ##34424
0d8c0     F2 00 02 FB | 	rdlong	_var01, objptr
0d8c4     43 00 00 FF 
0d8c8     78 E4 85 F1 | 	sub	objptr, ##34424
0d8cc     01 00 00 FF 
0d8d0     00 00 56 F2 | 	cmps	_var01, ##512 wc
0d8d4     BC 00 90 3D |  if_ae	jmp	#LR__1090
0d8d8     09 01 02 FB | 	rdlong	_var01, arg01
0d8dc     04 12 06 F1 | 	add	arg01, #4
0d8e0     09 03 02 FB | 	rdlong	_var02, arg01
0d8e4     04 12 06 F1 | 	add	arg01, #4
0d8e8     09 13 02 FB | 	rdlong	arg01, arg01
0d8ec     43 00 00 FF 
0d8f0     78 E4 05 F1 | 	add	objptr, ##34424
0d8f4     F2 04 02 FB | 	rdlong	_var03, objptr
0d8f8     02 07 02 F6 | 	mov	_var04, _var03
0d8fc     01 06 66 F0 | 	shl	_var04, #1
0d900     02 07 02 F1 | 	add	_var04, _var03
0d904     02 06 66 F0 | 	shl	_var04, #2
0d908     0C 00 00 FF 
0d90c     0C E4 85 F1 | 	sub	objptr, ##6156
0d910     F2 06 02 F1 | 	add	_var04, objptr
0d914     03 01 62 FC | 	wrlong	_var01, _var04
0d918     0C 00 00 FF 
0d91c     0C E4 05 F1 | 	add	objptr, ##6156
0d920     F2 06 02 FB | 	rdlong	_var04, objptr
0d924     03 05 02 F6 | 	mov	_var03, _var04
0d928     01 04 66 F0 | 	shl	_var03, #1
0d92c     03 05 02 F1 | 	add	_var03, _var04
0d930     02 04 66 F0 | 	shl	_var03, #2
0d934     0C 00 00 FF 
0d938     0C E4 85 F1 | 	sub	objptr, ##6156
0d93c     F2 04 02 F1 | 	add	_var03, objptr
0d940     04 04 06 F1 | 	add	_var03, #4
0d944     02 03 62 FC | 	wrlong	_var02, _var03
0d948     0C 00 00 FF 
0d94c     0C E4 05 F1 | 	add	objptr, ##6156
0d950     F2 06 02 FB | 	rdlong	_var04, objptr
0d954     03 05 02 F6 | 	mov	_var03, _var04
0d958     01 04 66 F0 | 	shl	_var03, #1
0d95c     03 05 02 F1 | 	add	_var03, _var04
0d960     02 04 66 F0 | 	shl	_var03, #2
0d964     0C 00 00 FF 
0d968     0C E4 85 F1 | 	sub	objptr, ##6156
0d96c     F2 04 02 F1 | 	add	_var03, objptr
0d970     08 04 06 F1 | 	add	_var03, #8
0d974     02 13 62 FC | 	wrlong	arg01, _var03
0d978     0C 00 00 FF 
0d97c     0C E4 05 F1 | 	add	objptr, ##6156
0d980     F2 00 02 FB | 	rdlong	_var01, objptr
0d984     01 00 06 F1 | 	add	_var01, #1
0d988     F2 00 62 FC | 	wrlong	_var01, objptr
0d98c     43 00 00 FF 
0d990     78 E4 85 F1 | 	sub	objptr, ##34424
0d994                 | LR__1090
0d994                 | _push_ret
0d994     2D 00 64 FD | 	ret
0d998                 | 
0d998                 | ' 
0d998                 | ' ' -------------------------------- Runtime converting functions
0d998                 | ' 
0d998                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0d998                 | ' 
0d998                 | ' function  convertstring(psaddr as ulong) as string
0d998                 | _convertstring
0d998     04 4A 05 F6 | 	mov	COUNT_, #4
0d99c     A8 00 A0 FD | 	call	#pushregs_
0d9a0     09 27 02 F6 | 	mov	local01, arg01
0d9a4     E4 6F B1 FD | 	call	#_pslpeek
0d9a8     FD 28 02 F6 | 	mov	local02, result1
0d9ac     C2 01 00 FF 
0d9b0     0F 2A 06 F6 | 	mov	local03, ##@LR__5988
0d9b4                 | ' l=pslpeek(psaddr) 
0d9b4                 | ' s="" 
0d9b4                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0d9b4     01 2C 06 F6 | 	mov	local04, #1
0d9b8     01 28 06 F1 | 	add	local02, #1
0d9bc                 | LR__1100
0d9bc     14 2D 52 F2 | 	cmps	local04, local02 wc
0d9c0     30 00 90 3D |  if_ae	jmp	#LR__1101
0d9c4     13 13 02 F6 | 	mov	arg01, local01
0d9c8     03 12 06 F1 | 	add	arg01, #3
0d9cc     16 13 02 F1 | 	add	arg01, local04
0d9d0     60 6F B1 FD | 	call	#_pspeek
0d9d4     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0d9d8     7C C9 B1 FD | 	call	#__system__Chr_S
0d9dc     FD 14 02 F6 | 	mov	arg02, result1
0d9e0     15 13 02 F6 | 	mov	arg01, local03
0d9e4     88 A7 B1 FD | 	call	#__system___string_concat
0d9e8     FD 2A 02 F6 | 	mov	local03, result1
0d9ec     01 2C 06 F1 | 	add	local04, #1
0d9f0     C8 FF 9F FD | 	jmp	#LR__1100
0d9f4                 | LR__1101
0d9f4                 | ' return s
0d9f4     15 FB 01 F6 | 	mov	result1, local03
0d9f8     A7 F0 03 F6 | 	mov	ptra, fp
0d9fc     B2 00 A0 FD | 	call	#popregs_
0da00                 | _convertstring_ret
0da00     2D 00 64 FD | 	ret
0da04                 | 
0da04                 | ' 
0da04                 | ' ' converts a variable to an integer
0da04                 | ' 
0da04                 | ' function converttoint (t1 as expr_result) as integer 
0da04                 | _converttoint
0da04     02 4A 05 F6 | 	mov	COUNT_, #2
0da08     A8 00 A0 FD | 	call	#pushregs_
0da0c     09 27 02 F6 | 	mov	local01, arg01
0da10                 | ' 
0da10                 | ' select case t1.result_type
0da10     08 26 06 F1 | 	add	local01, #8
0da14     13 29 02 FB | 	rdlong	local02, local01
0da18     08 26 86 F1 | 	sub	local01, #8
0da1c     1C 28 0E F2 | 	cmp	local02, #28 wz
0da20     2C 00 90 AD |  if_e	jmp	#LR__1110
0da24     1D 28 0E F2 | 	cmp	local02, #29 wz
0da28     2C 00 90 AD |  if_e	jmp	#LR__1111
0da2c     1E 28 0E F2 | 	cmp	local02, #30 wz
0da30     2C 00 90 AD |  if_e	jmp	#LR__1112
0da34     1F 28 0E F2 | 	cmp	local02, #31 wz
0da38     34 00 90 AD |  if_e	jmp	#LR__1113
0da3c     2B 28 0E F2 | 	cmp	local02, #43 wz
0da40     44 00 90 AD |  if_e	jmp	#LR__1114
0da44     2C 28 0E F2 | 	cmp	local02, #44 wz
0da48     5C 00 90 AD |  if_e	jmp	#LR__1115
0da4c     60 00 90 FD | 	jmp	#LR__1116
0da50                 | LR__1110
0da50     13 FB 01 FB | 	rdlong	result1, local01
0da54     5C 00 90 FD | 	jmp	#LR__1117
0da58                 | LR__1111
0da58     13 FB 01 FB | 	rdlong	result1, local01
0da5c     54 00 90 FD | 	jmp	#LR__1117
0da60                 | LR__1112
0da60     13 13 02 FB | 	rdlong	arg01, local01
0da64     01 14 06 F6 | 	mov	arg02, #1
0da68     EC D9 B1 FD | 	call	#__system___float_tointeger
0da6c     44 00 90 FD | 	jmp	#LR__1117
0da70                 | LR__1113
0da70     13 13 02 FB | 	rdlong	arg01, local01
0da74     28 DD B1 FD | 	call	#__system____builtin_atof
0da78     FD 12 02 F6 | 	mov	arg01, result1
0da7c     01 14 06 F6 | 	mov	arg02, #1
0da80     D4 D9 B1 FD | 	call	#__system___float_tointeger
0da84     2C 00 90 FD | 	jmp	#LR__1117
0da88                 | LR__1114
0da88     13 13 02 FB | 	rdlong	arg01, local01
0da8c     08 FF BF FD | 	call	#_convertstring
0da90     FD 12 02 F6 | 	mov	arg01, result1
0da94     08 DD B1 FD | 	call	#__system____builtin_atof
0da98     FD 12 02 F6 | 	mov	arg01, result1
0da9c     01 14 06 F6 | 	mov	arg02, #1
0daa0     B4 D9 B1 FD | 	call	#__system___float_tointeger
0daa4     0C 00 90 FD | 	jmp	#LR__1117
0daa8                 | LR__1115
0daa8     13 FB 01 FB | 	rdlong	result1, local01
0daac     04 00 90 FD | 	jmp	#LR__1117
0dab0                 | LR__1116
0dab0     00 FA 05 F6 | 	mov	result1, #0
0dab4                 | LR__1117
0dab4     A7 F0 03 F6 | 	mov	ptra, fp
0dab8     B2 00 A0 FD | 	call	#popregs_
0dabc                 | _converttoint_ret
0dabc     2D 00 64 FD | 	ret
0dac0                 | 
0dac0                 | ' 
0dac0                 | ' ' converts a variable to float
0dac0                 | ' 
0dac0                 | ' function converttofloat (t1 as expr_result) as single
0dac0                 | _converttofloat
0dac0     03 4A 05 F6 | 	mov	COUNT_, #3
0dac4     A8 00 A0 FD | 	call	#pushregs_
0dac8     09 27 02 F6 | 	mov	local01, arg01
0dacc                 | ' 
0dacc                 | ' select case t1.result_type
0dacc     08 26 06 F1 | 	add	local01, #8
0dad0     13 29 02 FB | 	rdlong	local02, local01
0dad4     08 26 86 F1 | 	sub	local01, #8
0dad8     1C 28 0E F2 | 	cmp	local02, #28 wz
0dadc     24 00 90 AD |  if_e	jmp	#LR__1120
0dae0     1D 28 0E F2 | 	cmp	local02, #29 wz
0dae4     38 00 90 AD |  if_e	jmp	#LR__1121
0dae8     1E 28 0E F2 | 	cmp	local02, #30 wz
0daec     3C 00 90 AD |  if_e	jmp	#LR__1122
0daf0     1F 28 0E F2 | 	cmp	local02, #31 wz
0daf4     3C 00 90 AD |  if_e	jmp	#LR__1123
0daf8     2B 28 0E F2 | 	cmp	local02, #43 wz
0dafc     40 00 90 AD |  if_e	jmp	#LR__1124
0db00     50 00 90 FD | 	jmp	#LR__1125
0db04                 | LR__1120
0db04     13 13 02 FB | 	rdlong	arg01, local01
0db08     09 13 52 F6 | 	abs	arg01, arg01 wc
0db0c     1F 2A C6 C9 |  if_b	decod	local03, #31
0db10     00 2A 06 36 |  if_ae	mov	local03, #0
0db14     74 D0 B1 FD | 	call	#__system___float_fromuns
0db18     15 FB 61 F5 | 	xor	result1, local03
0db1c     38 00 90 FD | 	jmp	#LR__1126
0db20                 | LR__1121
0db20     13 13 02 FB | 	rdlong	arg01, local01
0db24     64 D0 B1 FD | 	call	#__system___float_fromuns
0db28     2C 00 90 FD | 	jmp	#LR__1126
0db2c                 | LR__1122
0db2c     13 FB 01 FB | 	rdlong	result1, local01
0db30     24 00 90 FD | 	jmp	#LR__1126
0db34                 | LR__1123
0db34     13 13 02 FB | 	rdlong	arg01, local01
0db38     64 DC B1 FD | 	call	#__system____builtin_atof
0db3c     18 00 90 FD | 	jmp	#LR__1126
0db40                 | LR__1124
0db40     13 13 02 FB | 	rdlong	arg01, local01
0db44     50 FE BF FD | 	call	#_convertstring
0db48     FD 12 02 F6 | 	mov	arg01, result1
0db4c     50 DC B1 FD | 	call	#__system____builtin_atof
0db50     04 00 90 FD | 	jmp	#LR__1126
0db54                 | LR__1125
0db54     00 FA 05 F6 | 	mov	result1, #0
0db58                 | LR__1126
0db58     A7 F0 03 F6 | 	mov	ptra, fp
0db5c     B2 00 A0 FD | 	call	#popregs_
0db60                 | _converttofloat_ret
0db60     2D 00 64 FD | 	ret
0db64                 | 
0db64                 | ' 
0db64                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0db64                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0db64                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0db64                 | ' 
0db64                 | ' 
0db64                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0db64                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0db64                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0db64                 | ' 
0db64                 | ' '-------------------- abs
0db64                 | ' 
0db64                 | ' sub do_abs
0db64                 | _do_abs
0db64     01 4A 05 F6 | 	mov	COUNT_, #1
0db68     A8 00 A0 FD | 	call	#pushregs_
0db6c     0C F0 07 F1 | 	add	ptra, #12
0db70     AC FC BF FD | 	call	#_pop
0db74     FF 26 02 F6 | 	mov	local01, result3
0db78     A7 FA 61 FC | 	wrlong	result1, fp
0db7c     04 4E 05 F1 | 	add	fp, #4
0db80     A7 FC 61 FC | 	wrlong	result2, fp
0db84     04 4E 05 F1 | 	add	fp, #4
0db88     A7 26 62 FC | 	wrlong	local01, fp
0db8c                 | ' 
0db8c                 | ' t1=pop()
0db8c                 | ' if t1.result_type=result_int then 
0db8c     08 4E 85 F1 | 	sub	fp, #8
0db90     1C 26 0E F2 | 	cmp	local01, #28 wz
0db94     A7 12 02 AB |  if_e	rdlong	arg01, fp
0db98     09 27 42 A6 |  if_e	abs	local01, arg01
0db9c     A7 26 62 AC |  if_e	wrlong	local01, fp
0dba0     2C 00 90 AD |  if_e	jmp	#LR__1130
0dba4     08 4E 05 F1 | 	add	fp, #8
0dba8     A7 26 02 FB | 	rdlong	local01, fp
0dbac     08 4E 85 F1 | 	sub	fp, #8
0dbb0     1E 26 0E F2 | 	cmp	local01, #30 wz
0dbb4     A7 FA 01 AB |  if_e	rdlong	result1, fp
0dbb8     1F FA 05 A4 |  if_e	bitl	result1, #31
0dbbc     A7 FA 61 AC |  if_e	wrlong	result1, fp
0dbc0     08 4E 05 51 |  if_ne	add	fp, #8
0dbc4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0dbc8     08 4E 85 51 |  if_ne	sub	fp, #8
0dbcc     A7 50 68 5C |  if_ne	wrlong	#40, fp
0dbd0                 | LR__1130
0dbd0     A7 12 02 F6 | 	mov	arg01, fp
0dbd4     E0 FC BF FD | 	call	#_push
0dbd8     A7 F0 03 F6 | 	mov	ptra, fp
0dbdc     B2 00 A0 FD | 	call	#popregs_
0dbe0                 | _do_abs_ret
0dbe0     2D 00 64 FD | 	ret
0dbe4                 | 
0dbe4                 | ' 
0dbe4                 | ' '-------------------- acos
0dbe4                 | ' 
0dbe4                 | ' sub do_acos
0dbe4                 | _do_acos
0dbe4     01 4A 05 F6 | 	mov	COUNT_, #1
0dbe8     A8 00 A0 FD | 	call	#pushregs_
0dbec     10 F0 07 F1 | 	add	ptra, #16
0dbf0     4A 00 00 FF 
0dbf4     A0 E4 05 F1 | 	add	objptr, ##38048
0dbf8     F2 26 02 FB | 	rdlong	local01, objptr
0dbfc     13 17 02 F6 | 	mov	arg03, local01
0dc00     01 16 66 F0 | 	shl	arg03, #1
0dc04     13 17 02 F1 | 	add	arg03, local01
0dc08     02 16 66 F0 | 	shl	arg03, #2
0dc0c     03 00 00 FF 
0dc10     04 E4 85 F1 | 	sub	objptr, ##1540
0dc14     F2 16 02 F1 | 	add	arg03, objptr
0dc18     0B 17 02 FB | 	rdlong	arg03, arg03
0dc1c     0C 4E 05 F1 | 	add	fp, #12
0dc20     A7 16 62 FC | 	wrlong	arg03, fp
0dc24                 | ' 
0dc24                 | ' numpar=compiledline(lineptr_e).result.uresult
0dc24                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0dc24     0C 4E 85 F1 | 	sub	fp, #12
0dc28     02 16 16 F2 | 	cmp	arg03, #2 wc
0dc2c     47 00 00 FF 
0dc30     9C E4 85 F1 | 	sub	objptr, ##36508
0dc34     0C 4E 05 C1 |  if_b	add	fp, #12
0dc38     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dc3c     0C 4E 85 C1 |  if_b	sub	fp, #12
0dc40     40 00 90 4D |  if_c_and_nz	jmp	#LR__1140
0dc44     00 12 06 F6 | 	mov	arg01, #0
0dc48     78 01 B2 FD | 	call	#__system___getiolock_0620
0dc4c     FD 12 02 F6 | 	mov	arg01, result1
0dc50     C0 A4 B1 FD | 	call	#__system___lockmem
0dc54     C2 01 00 FF 
0dc58     10 14 06 F6 | 	mov	arg02, ##@LR__5989
0dc5c     00 12 06 F6 | 	mov	arg01, #0
0dc60     00 16 06 F6 | 	mov	arg03, #0
0dc64     A4 B1 B1 FD | 	call	#__system___basic_print_string
0dc68     00 12 06 F6 | 	mov	arg01, #0
0dc6c     54 01 B2 FD | 	call	#__system___getiolock_0620
0dc70     FD 00 68 FC | 	wrlong	#0, result1
0dc74     27 12 06 F6 | 	mov	arg01, #39
0dc78     00 14 06 F6 | 	mov	arg02, #0
0dc7c     3C 6A B1 FD | 	call	#_printerror
0dc80     64 00 90 FD | 	jmp	#LR__1141
0dc84                 | LR__1140
0dc84     98 FB BF FD | 	call	#_pop
0dc88     FF 26 02 F6 | 	mov	local01, result3
0dc8c     A7 FA 61 FC | 	wrlong	result1, fp
0dc90     04 4E 05 F1 | 	add	fp, #4
0dc94     A7 FC 61 FC | 	wrlong	result2, fp
0dc98     04 4E 05 F1 | 	add	fp, #4
0dc9c     A7 26 62 FC | 	wrlong	local01, fp
0dca0     08 4E 85 F1 | 	sub	fp, #8
0dca4     A7 12 02 F6 | 	mov	arg01, fp
0dca8     14 FE BF FD | 	call	#_converttofloat
0dcac     FD 12 02 F6 | 	mov	arg01, result1
0dcb0     20 DE B1 FD | 	call	#__system____builtin_acosf
0dcb4     FD 12 02 F6 | 	mov	arg01, result1
0dcb8     52 00 00 FF 
0dcbc     04 E5 05 F1 | 	add	objptr, ##42244
0dcc0     F2 14 02 FB | 	rdlong	arg02, objptr
0dcc4     52 00 00 FF 
0dcc8     04 E5 85 F1 | 	sub	objptr, ##42244
0dccc     C0 D2 B1 FD | 	call	#__system___float_mul
0dcd0     A7 FA 61 FC | 	wrlong	result1, fp
0dcd4     08 4E 05 F1 | 	add	fp, #8
0dcd8     A7 3C 68 FC | 	wrlong	#30, fp
0dcdc     08 4E 85 F1 | 	sub	fp, #8
0dce0     A7 12 02 F6 | 	mov	arg01, fp
0dce4     D0 FB BF FD | 	call	#_push
0dce8                 | LR__1141
0dce8     A7 F0 03 F6 | 	mov	ptra, fp
0dcec     B2 00 A0 FD | 	call	#popregs_
0dcf0                 | _do_acos_ret
0dcf0     2D 00 64 FD | 	ret
0dcf4                 | 
0dcf4                 | ' 
0dcf4                 | ' '-------------------- asc
0dcf4                 | ' 
0dcf4                 | ' sub do_asc
0dcf4                 | _do_asc
0dcf4     01 4A 05 F6 | 	mov	COUNT_, #1
0dcf8     A8 00 A0 FD | 	call	#pushregs_
0dcfc     14 F0 07 F1 | 	add	ptra, #20
0dd00     4A 00 00 FF 
0dd04     A0 E4 05 F1 | 	add	objptr, ##38048
0dd08     F2 26 02 FB | 	rdlong	local01, objptr
0dd0c     13 17 02 F6 | 	mov	arg03, local01
0dd10     01 16 66 F0 | 	shl	arg03, #1
0dd14     13 17 02 F1 | 	add	arg03, local01
0dd18     02 16 66 F0 | 	shl	arg03, #2
0dd1c     03 00 00 FF 
0dd20     04 E4 85 F1 | 	sub	objptr, ##1540
0dd24     F2 16 02 F1 | 	add	arg03, objptr
0dd28     0B 17 02 FB | 	rdlong	arg03, arg03
0dd2c     0C 4E 05 F1 | 	add	fp, #12
0dd30     A7 16 62 FC | 	wrlong	arg03, fp
0dd34                 | ' 
0dd34                 | ' numpar=compiledline(lineptr_e).result.uresult
0dd34                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0dd34     0C 4E 85 F1 | 	sub	fp, #12
0dd38     02 16 16 F2 | 	cmp	arg03, #2 wc
0dd3c     47 00 00 FF 
0dd40     9C E4 85 F1 | 	sub	objptr, ##36508
0dd44     0C 4E 05 C1 |  if_b	add	fp, #12
0dd48     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dd4c     0C 4E 85 C1 |  if_b	sub	fp, #12
0dd50     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0dd54     00 12 06 F6 | 	mov	arg01, #0
0dd58     68 00 B2 FD | 	call	#__system___getiolock_0620
0dd5c     FD 12 02 F6 | 	mov	arg01, result1
0dd60     B0 A3 B1 FD | 	call	#__system___lockmem
0dd64     C2 01 00 FF 
0dd68     17 14 06 F6 | 	mov	arg02, ##@LR__5990
0dd6c     00 12 06 F6 | 	mov	arg01, #0
0dd70     00 16 06 F6 | 	mov	arg03, #0
0dd74     94 B0 B1 FD | 	call	#__system___basic_print_string
0dd78     00 12 06 F6 | 	mov	arg01, #0
0dd7c     44 00 B2 FD | 	call	#__system___getiolock_0620
0dd80     FD 00 68 FC | 	wrlong	#0, result1
0dd84     27 12 06 F6 | 	mov	arg01, #39
0dd88     00 14 06 F6 | 	mov	arg02, #0
0dd8c     2C 69 B1 FD | 	call	#_printerror
0dd90     B4 00 90 FD | 	jmp	#LR__1153
0dd94                 | LR__1150
0dd94     88 FA BF FD | 	call	#_pop
0dd98     FF 16 02 F6 | 	mov	arg03, result3
0dd9c     A7 FA 61 FC | 	wrlong	result1, fp
0dda0     04 4E 05 F1 | 	add	fp, #4
0dda4     A7 FC 61 FC | 	wrlong	result2, fp
0dda8     04 4E 05 F1 | 	add	fp, #4
0ddac     A7 16 62 FC | 	wrlong	arg03, fp
0ddb0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0ddb0     08 4E 85 F1 | 	sub	fp, #8
0ddb4     2B 16 0E F2 | 	cmp	arg03, #43 wz
0ddb8     18 00 90 5D |  if_ne	jmp	#LR__1151
0ddbc     A7 12 02 FB | 	rdlong	arg01, fp
0ddc0     D4 FB BF FD | 	call	#_convertstring
0ddc4     A7 FA 61 FC | 	wrlong	result1, fp
0ddc8     08 4E 05 F1 | 	add	fp, #8
0ddcc     A7 3E 68 FC | 	wrlong	#31, fp
0ddd0     08 4E 85 F1 | 	sub	fp, #8
0ddd4                 | LR__1151
0ddd4                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0ddd4     08 4E 05 F1 | 	add	fp, #8
0ddd8     A7 16 02 FB | 	rdlong	arg03, fp
0dddc     08 4E 85 F1 | 	sub	fp, #8
0dde0     1F 16 0E F2 | 	cmp	arg03, #31 wz
0dde4     40 00 90 AD |  if_e	jmp	#LR__1152
0dde8     00 12 06 F6 | 	mov	arg01, #0
0ddec     D4 FF B1 FD | 	call	#__system___getiolock_0620
0ddf0     FD 12 02 F6 | 	mov	arg01, result1
0ddf4     1C A3 B1 FD | 	call	#__system___lockmem
0ddf8     C2 01 00 FF 
0ddfc     1D 14 06 F6 | 	mov	arg02, ##@LR__5991
0de00     00 12 06 F6 | 	mov	arg01, #0
0de04     00 16 06 F6 | 	mov	arg03, #0
0de08     00 B0 B1 FD | 	call	#__system___basic_print_string
0de0c     00 12 06 F6 | 	mov	arg01, #0
0de10     B0 FF B1 FD | 	call	#__system___getiolock_0620
0de14     FD 00 68 FC | 	wrlong	#0, result1
0de18     0F 12 06 F6 | 	mov	arg01, #15
0de1c     00 14 06 F6 | 	mov	arg02, #0
0de20     98 68 B1 FD | 	call	#_printerror
0de24     20 00 90 FD | 	jmp	#LR__1153
0de28                 | LR__1152
0de28     A7 26 02 FB | 	rdlong	local01, fp
0de2c     13 27 C2 FA | 	rdbyte	local01, local01
0de30     A7 26 62 FC | 	wrlong	local01, fp
0de34     08 4E 05 F1 | 	add	fp, #8
0de38     A7 38 68 FC | 	wrlong	#28, fp
0de3c     08 4E 85 F1 | 	sub	fp, #8
0de40     A7 12 02 F6 | 	mov	arg01, fp
0de44     70 FA BF FD | 	call	#_push
0de48                 | LR__1153
0de48     A7 F0 03 F6 | 	mov	ptra, fp
0de4c     B2 00 A0 FD | 	call	#popregs_
0de50                 | _do_asc_ret
0de50     2D 00 64 FD | 	ret
0de54                 | 
0de54                 | ' 
0de54                 | ' '-------------------- asin
0de54                 | ' 
0de54                 | ' sub do_asin
0de54                 | _do_asin
0de54     01 4A 05 F6 | 	mov	COUNT_, #1
0de58     A8 00 A0 FD | 	call	#pushregs_
0de5c     10 F0 07 F1 | 	add	ptra, #16
0de60     4A 00 00 FF 
0de64     A0 E4 05 F1 | 	add	objptr, ##38048
0de68     F2 26 02 FB | 	rdlong	local01, objptr
0de6c     13 17 02 F6 | 	mov	arg03, local01
0de70     01 16 66 F0 | 	shl	arg03, #1
0de74     13 17 02 F1 | 	add	arg03, local01
0de78     02 16 66 F0 | 	shl	arg03, #2
0de7c     03 00 00 FF 
0de80     04 E4 85 F1 | 	sub	objptr, ##1540
0de84     F2 16 02 F1 | 	add	arg03, objptr
0de88     0B 17 02 FB | 	rdlong	arg03, arg03
0de8c     0C 4E 05 F1 | 	add	fp, #12
0de90     A7 16 62 FC | 	wrlong	arg03, fp
0de94                 | ' 
0de94                 | ' numpar=compiledline(lineptr_e).result.uresult
0de94                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0de94     0C 4E 85 F1 | 	sub	fp, #12
0de98     02 16 16 F2 | 	cmp	arg03, #2 wc
0de9c     47 00 00 FF 
0dea0     9C E4 85 F1 | 	sub	objptr, ##36508
0dea4     0C 4E 05 C1 |  if_b	add	fp, #12
0dea8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0deac     0C 4E 85 C1 |  if_b	sub	fp, #12
0deb0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1160
0deb4     00 12 06 F6 | 	mov	arg01, #0
0deb8     08 FF B1 FD | 	call	#__system___getiolock_0620
0debc     FD 12 02 F6 | 	mov	arg01, result1
0dec0     50 A2 B1 FD | 	call	#__system___lockmem
0dec4     C2 01 00 FF 
0dec8     23 14 06 F6 | 	mov	arg02, ##@LR__5992
0decc     00 12 06 F6 | 	mov	arg01, #0
0ded0     00 16 06 F6 | 	mov	arg03, #0
0ded4     34 AF B1 FD | 	call	#__system___basic_print_string
0ded8     00 12 06 F6 | 	mov	arg01, #0
0dedc     E4 FE B1 FD | 	call	#__system___getiolock_0620
0dee0     FD 00 68 FC | 	wrlong	#0, result1
0dee4     27 12 06 F6 | 	mov	arg01, #39
0dee8     00 14 06 F6 | 	mov	arg02, #0
0deec     CC 67 B1 FD | 	call	#_printerror
0def0     64 00 90 FD | 	jmp	#LR__1161
0def4                 | LR__1160
0def4     28 F9 BF FD | 	call	#_pop
0def8     FF 26 02 F6 | 	mov	local01, result3
0defc     A7 FA 61 FC | 	wrlong	result1, fp
0df00     04 4E 05 F1 | 	add	fp, #4
0df04     A7 FC 61 FC | 	wrlong	result2, fp
0df08     04 4E 05 F1 | 	add	fp, #4
0df0c     A7 26 62 FC | 	wrlong	local01, fp
0df10     08 4E 85 F1 | 	sub	fp, #8
0df14     A7 12 02 F6 | 	mov	arg01, fp
0df18     A4 FB BF FD | 	call	#_converttofloat
0df1c     FD 12 02 F6 | 	mov	arg01, result1
0df20     64 DB B1 FD | 	call	#__system____builtin_asinf
0df24     FD 12 02 F6 | 	mov	arg01, result1
0df28     52 00 00 FF 
0df2c     04 E5 05 F1 | 	add	objptr, ##42244
0df30     F2 14 02 FB | 	rdlong	arg02, objptr
0df34     52 00 00 FF 
0df38     04 E5 85 F1 | 	sub	objptr, ##42244
0df3c     50 D0 B1 FD | 	call	#__system___float_mul
0df40     A7 FA 61 FC | 	wrlong	result1, fp
0df44     08 4E 05 F1 | 	add	fp, #8
0df48     A7 3C 68 FC | 	wrlong	#30, fp
0df4c     08 4E 85 F1 | 	sub	fp, #8
0df50     A7 12 02 F6 | 	mov	arg01, fp
0df54     60 F9 BF FD | 	call	#_push
0df58                 | LR__1161
0df58     A7 F0 03 F6 | 	mov	ptra, fp
0df5c     B2 00 A0 FD | 	call	#popregs_
0df60                 | _do_asin_ret
0df60     2D 00 64 FD | 	ret
0df64                 | 
0df64                 | ' 
0df64                 | ' '-------------------- atn
0df64                 | ' 
0df64                 | ' sub do_atn
0df64                 | _do_atn
0df64     01 4A 05 F6 | 	mov	COUNT_, #1
0df68     A8 00 A0 FD | 	call	#pushregs_
0df6c     10 F0 07 F1 | 	add	ptra, #16
0df70     4A 00 00 FF 
0df74     A0 E4 05 F1 | 	add	objptr, ##38048
0df78     F2 26 02 FB | 	rdlong	local01, objptr
0df7c     13 17 02 F6 | 	mov	arg03, local01
0df80     01 16 66 F0 | 	shl	arg03, #1
0df84     13 17 02 F1 | 	add	arg03, local01
0df88     02 16 66 F0 | 	shl	arg03, #2
0df8c     03 00 00 FF 
0df90     04 E4 85 F1 | 	sub	objptr, ##1540
0df94     F2 16 02 F1 | 	add	arg03, objptr
0df98     0B 17 02 FB | 	rdlong	arg03, arg03
0df9c     0C 4E 05 F1 | 	add	fp, #12
0dfa0     A7 16 62 FC | 	wrlong	arg03, fp
0dfa4                 | ' 
0dfa4                 | ' numpar=compiledline(lineptr_e).result.uresult
0dfa4                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0dfa4     0C 4E 85 F1 | 	sub	fp, #12
0dfa8     02 16 16 F2 | 	cmp	arg03, #2 wc
0dfac     47 00 00 FF 
0dfb0     9C E4 85 F1 | 	sub	objptr, ##36508
0dfb4     0C 4E 05 C1 |  if_b	add	fp, #12
0dfb8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dfbc     0C 4E 85 C1 |  if_b	sub	fp, #12
0dfc0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1170
0dfc4     00 12 06 F6 | 	mov	arg01, #0
0dfc8     F8 FD B1 FD | 	call	#__system___getiolock_0620
0dfcc     FD 12 02 F6 | 	mov	arg01, result1
0dfd0     40 A1 B1 FD | 	call	#__system___lockmem
0dfd4     C2 01 00 FF 
0dfd8     2A 14 06 F6 | 	mov	arg02, ##@LR__5993
0dfdc     00 12 06 F6 | 	mov	arg01, #0
0dfe0     00 16 06 F6 | 	mov	arg03, #0
0dfe4     24 AE B1 FD | 	call	#__system___basic_print_string
0dfe8     00 12 06 F6 | 	mov	arg01, #0
0dfec     D4 FD B1 FD | 	call	#__system___getiolock_0620
0dff0     FD 00 68 FC | 	wrlong	#0, result1
0dff4     27 12 06 F6 | 	mov	arg01, #39
0dff8     00 14 06 F6 | 	mov	arg02, #0
0dffc     BC 66 B1 FD | 	call	#_printerror
0e000     6C 00 90 FD | 	jmp	#LR__1171
0e004                 | LR__1170
0e004     18 F8 BF FD | 	call	#_pop
0e008     FF 26 02 F6 | 	mov	local01, result3
0e00c     A7 FA 61 FC | 	wrlong	result1, fp
0e010     04 4E 05 F1 | 	add	fp, #4
0e014     A7 FC 61 FC | 	wrlong	result2, fp
0e018     04 4E 05 F1 | 	add	fp, #4
0e01c     A7 26 62 FC | 	wrlong	local01, fp
0e020     08 4E 85 F1 | 	sub	fp, #8
0e024     A7 12 02 F6 | 	mov	arg01, fp
0e028     94 FA BF FD | 	call	#_converttofloat
0e02c     FD 12 02 F6 | 	mov	arg01, result1
0e030     00 C0 1F FF 
0e034     00 14 06 F6 | 	mov	arg02, ##1065353216
0e038     E4 DA B1 FD | 	call	#__system____builtin_atan2f
0e03c     FD 12 02 F6 | 	mov	arg01, result1
0e040     52 00 00 FF 
0e044     04 E5 05 F1 | 	add	objptr, ##42244
0e048     F2 14 02 FB | 	rdlong	arg02, objptr
0e04c     52 00 00 FF 
0e050     04 E5 85 F1 | 	sub	objptr, ##42244
0e054     38 CF B1 FD | 	call	#__system___float_mul
0e058     A7 FA 61 FC | 	wrlong	result1, fp
0e05c     08 4E 05 F1 | 	add	fp, #8
0e060     A7 3C 68 FC | 	wrlong	#30, fp
0e064     08 4E 85 F1 | 	sub	fp, #8
0e068     A7 12 02 F6 | 	mov	arg01, fp
0e06c     48 F8 BF FD | 	call	#_push
0e070                 | LR__1171
0e070     A7 F0 03 F6 | 	mov	ptra, fp
0e074     B2 00 A0 FD | 	call	#popregs_
0e078                 | _do_atn_ret
0e078     2D 00 64 FD | 	ret
0e07c                 | 
0e07c                 | ' 
0e07c                 | ' '-------------------- beep
0e07c                 | ' 
0e07c                 | ' sub do_beep
0e07c                 | _do_beep
0e07c     02 4A 05 F6 | 	mov	COUNT_, #2
0e080     A8 00 A0 FD | 	call	#pushregs_
0e084     20 F0 07 F1 | 	add	ptra, #32
0e088     94 F7 BF FD | 	call	#_pop
0e08c     FD 26 02 F6 | 	mov	local01, result1
0e090     FE 1C 02 F6 | 	mov	arg06, result2
0e094     FF 28 02 F6 | 	mov	local02, result3
0e098     0C 4E 05 F1 | 	add	fp, #12
0e09c     A7 26 62 FC | 	wrlong	local01, fp
0e0a0     04 4E 05 F1 | 	add	fp, #4
0e0a4     A7 1C 62 FC | 	wrlong	arg06, fp
0e0a8     04 4E 05 F1 | 	add	fp, #4
0e0ac     A7 28 62 FC | 	wrlong	local02, fp
0e0b0     14 4E 85 F1 | 	sub	fp, #20
0e0b4     68 F7 BF FD | 	call	#_pop
0e0b8     A7 FA 61 FC | 	wrlong	result1, fp
0e0bc     04 4E 05 F1 | 	add	fp, #4
0e0c0     A7 FC 61 FC | 	wrlong	result2, fp
0e0c4     04 4E 05 F1 | 	add	fp, #4
0e0c8     A7 FE 61 FC | 	wrlong	result3, fp
0e0cc                 | ' 
0e0cc                 | ' t2=pop()
0e0cc                 | ' t1=pop()
0e0cc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0e0cc     08 4E 85 F1 | 	sub	fp, #8
0e0d0     1C FE 0D F2 | 	cmp	result3, #28 wz
0e0d4     08 4E 05 51 |  if_ne	add	fp, #8
0e0d8     A7 28 02 5B |  if_ne	rdlong	local02, fp
0e0dc     08 4E 85 51 |  if_ne	sub	fp, #8
0e0e0     1D 28 0E 52 |  if_ne	cmp	local02, #29 wz
0e0e4     A7 26 02 AB |  if_e	rdlong	local01, fp
0e0e8     18 4E 05 A1 |  if_e	add	fp, #24
0e0ec     A7 26 62 AC |  if_e	wrlong	local01, fp
0e0f0     18 4E 85 A1 |  if_e	sub	fp, #24
0e0f4     14 00 90 AD |  if_e	jmp	#LR__1180
0e0f8     A7 12 02 F6 | 	mov	arg01, fp
0e0fc     04 F9 BF FD | 	call	#_converttoint
0e100     18 4E 05 F1 | 	add	fp, #24
0e104     A7 FA 61 FC | 	wrlong	result1, fp
0e108     18 4E 85 F1 | 	sub	fp, #24
0e10c                 | LR__1180
0e10c     1C 4E 05 F1 | 	add	fp, #28
0e110     A7 FE 48 FC | 	wrbyte	#127, fp
0e114     01 4E 05 F1 | 	add	fp, #1
0e118     A7 00 49 FC | 	wrbyte	#128, fp
0e11c     01 4E 85 F1 | 	sub	fp, #1
0e120     A7 14 02 F6 | 	mov	arg02, fp
0e124     04 4E 85 F1 | 	sub	fp, #4
0e128     A7 16 02 FB | 	rdlong	arg03, fp
0e12c     18 4E 85 F1 | 	sub	fp, #24
0e130     01 16 66 F0 | 	shl	arg03, #1
0e134     07 12 06 F6 | 	mov	arg01, #7
0e138     0E 18 C6 F9 | 	decod	arg04, #14
0e13c     02 1A 06 F6 | 	mov	arg05, #2
0e140     00 1C 06 F6 | 	mov	arg06, #0
0e144     0B 00 00 FF 
0e148     CC E4 05 F1 | 	add	objptr, ##5836
0e14c     B0 9B B1 FD | 	call	#_audio096_spin2_play8
0e150     0B 00 00 FF 
0e154     CC E4 85 F1 | 	sub	objptr, ##5836
0e158     0C 4E 05 F1 | 	add	fp, #12
0e15c     A7 12 02 F6 | 	mov	arg01, fp
0e160     0C 4E 85 F1 | 	sub	fp, #12
0e164     50 F7 BF FD | 	call	#_push
0e168     88 F9 B0 FD | 	call	#_do_waitms
0e16c     07 12 06 F6 | 	mov	arg01, #7
0e170     0B 00 00 FF 
0e174     CC E4 05 F1 | 	add	objptr, ##5836
0e178     28 9C B1 FD | 	call	#_audio096_spin2_stop
0e17c     0B 00 00 FF 
0e180     CC E4 85 F1 | 	sub	objptr, ##5836
0e184     A7 F0 03 F6 | 	mov	ptra, fp
0e188     B2 00 A0 FD | 	call	#popregs_
0e18c                 | _do_beep_ret
0e18c     2D 00 64 FD | 	ret
0e190                 | 
0e190                 | ' 
0e190                 | ' '-------------------- blit
0e190                 | ' 
0e190                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0e190                 | ' sub do_blit
0e190                 | _do_blit
0e190     02 4A 05 F6 | 	mov	COUNT_, #2
0e194     A8 00 A0 FD | 	call	#pushregs_
0e198     3C F0 07 F1 | 	add	ptra, #60
0e19c     4A 00 00 FF 
0e1a0     A0 E4 05 F1 | 	add	objptr, ##38048
0e1a4     F2 26 02 FB | 	rdlong	local01, objptr
0e1a8     13 25 02 F6 | 	mov	arg10, local01
0e1ac     01 24 66 F0 | 	shl	arg10, #1
0e1b0     13 25 02 F1 | 	add	arg10, local01
0e1b4     02 24 66 F0 | 	shl	arg10, #2
0e1b8     03 00 00 FF 
0e1bc     04 E4 85 F1 | 	sub	objptr, ##1540
0e1c0     F2 24 02 F1 | 	add	arg10, objptr
0e1c4     12 25 02 FB | 	rdlong	arg10, arg10
0e1c8     38 4E 05 F1 | 	add	fp, #56
0e1cc     A7 24 62 FC | 	wrlong	arg10, fp
0e1d0                 | ' 
0e1d0                 | ' numpar=compiledline(lineptr_e).result.uresult
0e1d0                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0e1d0     38 4E 85 F1 | 	sub	fp, #56
0e1d4     0A 24 0E F2 | 	cmp	arg10, #10 wz
0e1d8     47 00 00 FF 
0e1dc     9C E4 85 F1 | 	sub	objptr, ##36508
0e1e0     38 4E 05 51 |  if_ne	add	fp, #56
0e1e4     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e1e8     38 4E 85 51 |  if_ne	sub	fp, #56
0e1ec     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0e1f0     50 00 90 AD |  if_e	jmp	#LR__1190
0e1f4     00 12 06 F6 | 	mov	arg01, #0
0e1f8     C8 FB B1 FD | 	call	#__system___getiolock_0620
0e1fc     FD 12 02 F6 | 	mov	arg01, result1
0e200     10 9F B1 FD | 	call	#__system___lockmem
0e204     C2 01 00 FF 
0e208     30 14 06 F6 | 	mov	arg02, ##@LR__5994
0e20c     00 12 06 F6 | 	mov	arg01, #0
0e210     00 16 06 F6 | 	mov	arg03, #0
0e214     F4 AB B1 FD | 	call	#__system___basic_print_string
0e218     00 12 06 F6 | 	mov	arg01, #0
0e21c     A4 FB B1 FD | 	call	#__system___getiolock_0620
0e220     FD 00 68 FC | 	wrlong	#0, result1
0e224     50 00 00 FF 
0e228     10 E5 05 F1 | 	add	objptr, ##41232
0e22c     F2 14 02 FB | 	rdlong	arg02, objptr
0e230     50 00 00 FF 
0e234     10 E5 85 F1 | 	sub	objptr, ##41232
0e238     27 12 06 F6 | 	mov	arg01, #39
0e23c     7C 64 B1 FD | 	call	#_printerror
0e240     44 01 90 FD | 	jmp	#LR__1195
0e244                 | LR__1190
0e244                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0e244     38 4E 05 F1 | 	add	fp, #56
0e248     A7 28 02 FB | 	rdlong	local02, fp
0e24c     01 28 86 F1 | 	sub	local02, #1
0e250     04 4E 85 F1 | 	sub	fp, #4
0e254     A7 28 62 FC | 	wrlong	local02, fp
0e258     34 4E 85 F1 | 	sub	fp, #52
0e25c                 | LR__1191
0e25c     38 4E 05 F1 | 	add	fp, #56
0e260     A7 26 02 FB | 	rdlong	local01, fp
0e264     01 26 86 F1 | 	sub	local01, #1
0e268     04 4E 85 F1 | 	sub	fp, #4
0e26c     A7 24 02 FB | 	rdlong	arg10, fp
0e270     34 4E 85 F1 | 	sub	fp, #52
0e274     13 25 1A F2 | 	cmp	arg10, local01 wcz
0e278     54 00 90 1D |  if_a	jmp	#LR__1192
0e27c     A0 F5 BF FD | 	call	#_pop
0e280     A7 FA 61 FC | 	wrlong	result1, fp
0e284     04 4E 05 F1 | 	add	fp, #4
0e288     A7 FC 61 FC | 	wrlong	result2, fp
0e28c     04 4E 05 F1 | 	add	fp, #4
0e290     A7 FE 61 FC | 	wrlong	result3, fp
0e294     2C 4E 05 F1 | 	add	fp, #44
0e298     A7 28 02 FB | 	rdlong	local02, fp
0e29c     02 28 66 F0 | 	shl	local02, #2
0e2a0     28 4E 85 F1 | 	sub	fp, #40
0e2a4     A7 28 02 F1 | 	add	local02, fp
0e2a8     0C 4E 85 F1 | 	sub	fp, #12
0e2ac     A7 12 02 F6 | 	mov	arg01, fp
0e2b0     50 F7 BF FD | 	call	#_converttoint
0e2b4     14 FB 61 FC | 	wrlong	result1, local02
0e2b8     34 4E 05 F1 | 	add	fp, #52
0e2bc     A7 28 02 FB | 	rdlong	local02, fp
0e2c0     01 28 86 F1 | 	sub	local02, #1
0e2c4     A7 28 62 FC | 	wrlong	local02, fp
0e2c8     34 4E 85 F1 | 	sub	fp, #52
0e2cc     8C FF 9F FD | 	jmp	#LR__1191
0e2d0                 | LR__1192
0e2d0                 | ' if numpar=10 then 
0e2d0     38 4E 05 F1 | 	add	fp, #56
0e2d4     A7 28 02 FB | 	rdlong	local02, fp
0e2d8     38 4E 85 F1 | 	sub	fp, #56
0e2dc     0A 28 0E F2 | 	cmp	local02, #10 wz
0e2e0     5C 00 90 5D |  if_ne	jmp	#LR__1193
0e2e4     0C 4E 05 F1 | 	add	fp, #12
0e2e8     A7 12 02 FB | 	rdlong	arg01, fp
0e2ec     04 4E 05 F1 | 	add	fp, #4
0e2f0     A7 14 02 FB | 	rdlong	arg02, fp
0e2f4     04 4E 05 F1 | 	add	fp, #4
0e2f8     A7 16 02 FB | 	rdlong	arg03, fp
0e2fc     04 4E 05 F1 | 	add	fp, #4
0e300     A7 18 02 FB | 	rdlong	arg04, fp
0e304     04 4E 05 F1 | 	add	fp, #4
0e308     A7 1A 02 FB | 	rdlong	arg05, fp
0e30c     04 4E 05 F1 | 	add	fp, #4
0e310     A7 1C 02 FB | 	rdlong	arg06, fp
0e314     04 4E 05 F1 | 	add	fp, #4
0e318     A7 1E 02 FB | 	rdlong	arg07, fp
0e31c     04 4E 05 F1 | 	add	fp, #4
0e320     A7 20 02 FB | 	rdlong	arg08, fp
0e324     04 4E 05 F1 | 	add	fp, #4
0e328     A7 22 02 FB | 	rdlong	arg09, fp
0e32c     04 4E 05 F1 | 	add	fp, #4
0e330     A7 24 02 FB | 	rdlong	arg10, fp
0e334     30 4E 85 F1 | 	sub	fp, #48
0e338     8C 8B B1 FD | 	call	#_hg010b_spin2_blit
0e33c     48 00 90 FD | 	jmp	#LR__1194
0e340                 | LR__1193
0e340     F2 1E 02 FB | 	rdlong	arg07, objptr
0e344     0C 4E 05 F1 | 	add	fp, #12
0e348     A7 14 02 FB | 	rdlong	arg02, fp
0e34c     04 4E 05 F1 | 	add	fp, #4
0e350     A7 16 02 FB | 	rdlong	arg03, fp
0e354     04 4E 05 F1 | 	add	fp, #4
0e358     A7 18 02 FB | 	rdlong	arg04, fp
0e35c     04 4E 05 F1 | 	add	fp, #4
0e360     A7 1A 02 FB | 	rdlong	arg05, fp
0e364     04 4E 05 F1 | 	add	fp, #4
0e368     A7 20 02 FB | 	rdlong	arg08, fp
0e36c     04 4E 05 F1 | 	add	fp, #4
0e370     A7 22 02 FB | 	rdlong	arg09, fp
0e374     20 4E 85 F1 | 	sub	fp, #32
0e378     0F 13 02 F6 | 	mov	arg01, arg07
0e37c     0A 1C C6 F9 | 	decod	arg06, #10
0e380     0A 24 C6 F9 | 	decod	arg10, #10
0e384     40 8B B1 FD | 	call	#_hg010b_spin2_blit
0e388                 | LR__1194
0e388                 | LR__1195
0e388     A7 F0 03 F6 | 	mov	ptra, fp
0e38c     B2 00 A0 FD | 	call	#popregs_
0e390                 | _do_blit_ret
0e390     2D 00 64 FD | 	ret
0e394                 | 
0e394                 | ' 
0e394                 | ' 
0e394                 | ' '-------------------- bin$
0e394                 | ' 
0e394                 | ' sub do_bin
0e394                 | _do_bin
0e394     01 4A 05 F6 | 	mov	COUNT_, #1
0e398     A8 00 A0 FD | 	call	#pushregs_
0e39c     18 F0 07 F1 | 	add	ptra, #24
0e3a0     4A 00 00 FF 
0e3a4     A0 E4 05 F1 | 	add	objptr, ##38048
0e3a8     F2 26 02 FB | 	rdlong	local01, objptr
0e3ac     13 17 02 F6 | 	mov	arg03, local01
0e3b0     01 16 66 F0 | 	shl	arg03, #1
0e3b4     13 17 02 F1 | 	add	arg03, local01
0e3b8     02 16 66 F0 | 	shl	arg03, #2
0e3bc     03 00 00 FF 
0e3c0     04 E4 85 F1 | 	sub	objptr, ##1540
0e3c4     F2 16 02 F1 | 	add	arg03, objptr
0e3c8     0B 17 02 FB | 	rdlong	arg03, arg03
0e3cc     0C 4E 05 F1 | 	add	fp, #12
0e3d0     A7 16 62 FC | 	wrlong	arg03, fp
0e3d4                 | ' 
0e3d4                 | ' numpar=compiledline(lineptr_e).result.uresult
0e3d4                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0e3d4     0C 4E 85 F1 | 	sub	fp, #12
0e3d8     03 16 16 F2 | 	cmp	arg03, #3 wc
0e3dc     47 00 00 FF 
0e3e0     9C E4 85 F1 | 	sub	objptr, ##36508
0e3e4     0C 4E 05 C1 |  if_b	add	fp, #12
0e3e8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0e3ec     0C 4E 85 C1 |  if_b	sub	fp, #12
0e3f0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1200
0e3f4     00 12 06 F6 | 	mov	arg01, #0
0e3f8     C8 F9 B1 FD | 	call	#__system___getiolock_0620
0e3fc     FD 12 02 F6 | 	mov	arg01, result1
0e400     10 9D B1 FD | 	call	#__system___lockmem
0e404     C2 01 00 FF 
0e408     37 14 06 F6 | 	mov	arg02, ##@LR__5995
0e40c     00 12 06 F6 | 	mov	arg01, #0
0e410     00 16 06 F6 | 	mov	arg03, #0
0e414     F4 A9 B1 FD | 	call	#__system___basic_print_string
0e418     00 12 06 F6 | 	mov	arg01, #0
0e41c     A4 F9 B1 FD | 	call	#__system___getiolock_0620
0e420     FD 00 68 FC | 	wrlong	#0, result1
0e424     27 12 06 F6 | 	mov	arg01, #39
0e428     00 14 06 F6 | 	mov	arg02, #0
0e42c     8C 62 B1 FD | 	call	#_printerror
0e430     B8 00 90 FD | 	jmp	#LR__1203
0e434                 | LR__1200
0e434                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e434     0C 4E 05 F1 | 	add	fp, #12
0e438     A7 26 02 FB | 	rdlong	local01, fp
0e43c     0C 4E 85 F1 | 	sub	fp, #12
0e440     02 26 0E F2 | 	cmp	local01, #2 wz
0e444     38 00 90 5D |  if_ne	jmp	#LR__1201
0e448     D4 F3 BF FD | 	call	#_pop
0e44c     FF 26 02 F6 | 	mov	local01, result3
0e450     A7 FA 61 FC | 	wrlong	result1, fp
0e454     04 4E 05 F1 | 	add	fp, #4
0e458     A7 FC 61 FC | 	wrlong	result2, fp
0e45c     04 4E 05 F1 | 	add	fp, #4
0e460     A7 26 62 FC | 	wrlong	local01, fp
0e464     08 4E 85 F1 | 	sub	fp, #8
0e468     A7 12 02 F6 | 	mov	arg01, fp
0e46c     94 F5 BF FD | 	call	#_converttoint
0e470     14 4E 05 F1 | 	add	fp, #20
0e474     A7 FA 61 FC | 	wrlong	result1, fp
0e478     14 4E 85 F1 | 	sub	fp, #20
0e47c     0C 00 90 FD | 	jmp	#LR__1202
0e480                 | LR__1201
0e480     14 4E 05 F1 | 	add	fp, #20
0e484     A7 00 68 FC | 	wrlong	#0, fp
0e488     14 4E 85 F1 | 	sub	fp, #20
0e48c                 | LR__1202
0e48c     90 F3 BF FD | 	call	#_pop
0e490     FF 26 02 F6 | 	mov	local01, result3
0e494     A7 FA 61 FC | 	wrlong	result1, fp
0e498     04 4E 05 F1 | 	add	fp, #4
0e49c     A7 FC 61 FC | 	wrlong	result2, fp
0e4a0     04 4E 05 F1 | 	add	fp, #4
0e4a4     A7 26 62 FC | 	wrlong	local01, fp
0e4a8     08 4E 85 F1 | 	sub	fp, #8
0e4ac     A7 12 02 F6 | 	mov	arg01, fp
0e4b0     50 F5 BF FD | 	call	#_converttoint
0e4b4     10 4E 05 F1 | 	add	fp, #16
0e4b8     A7 FA 61 FC | 	wrlong	result1, fp
0e4bc     FD 12 02 F6 | 	mov	arg01, result1
0e4c0     04 4E 05 F1 | 	add	fp, #4
0e4c4     A7 14 02 FB | 	rdlong	arg02, fp
0e4c8     14 4E 85 F1 | 	sub	fp, #20
0e4cc     02 16 06 F6 | 	mov	arg03, #2
0e4d0     14 BF B1 FD | 	call	#__system__Number_S
0e4d4     A7 FA 61 FC | 	wrlong	result1, fp
0e4d8     08 4E 05 F1 | 	add	fp, #8
0e4dc     A7 3E 68 FC | 	wrlong	#31, fp
0e4e0     08 4E 85 F1 | 	sub	fp, #8
0e4e4     A7 12 02 F6 | 	mov	arg01, fp
0e4e8     CC F3 BF FD | 	call	#_push
0e4ec                 | LR__1203
0e4ec     A7 F0 03 F6 | 	mov	ptra, fp
0e4f0     B2 00 A0 FD | 	call	#popregs_
0e4f4                 | _do_bin_ret
0e4f4     2D 00 64 FD | 	ret
0e4f8                 | 
0e4f8                 | ' 
0e4f8                 | ' '-------------------- box
0e4f8                 | ' 
0e4f8                 | ' sub do_box
0e4f8                 | _do_box
0e4f8     03 4A 05 F6 | 	mov	COUNT_, #3
0e4fc     A8 00 A0 FD | 	call	#pushregs_
0e500     30 F0 07 F1 | 	add	ptra, #48
0e504     18 F3 BF FD | 	call	#_pop
0e508     FD 1A 02 F6 | 	mov	arg05, result1
0e50c     FE 18 02 F6 | 	mov	arg04, result2
0e510     FF 16 02 F6 | 	mov	arg03, result3
0e514     24 4E 05 F1 | 	add	fp, #36
0e518     A7 1A 62 FC | 	wrlong	arg05, fp
0e51c     04 4E 05 F1 | 	add	fp, #4
0e520     A7 18 62 FC | 	wrlong	arg04, fp
0e524     04 4E 05 F1 | 	add	fp, #4
0e528     A7 16 62 FC | 	wrlong	arg03, fp
0e52c     2C 4E 85 F1 | 	sub	fp, #44
0e530     EC F2 BF FD | 	call	#_pop
0e534     FD 1A 02 F6 | 	mov	arg05, result1
0e538     FE 18 02 F6 | 	mov	arg04, result2
0e53c     FF 16 02 F6 | 	mov	arg03, result3
0e540     18 4E 05 F1 | 	add	fp, #24
0e544     A7 1A 62 FC | 	wrlong	arg05, fp
0e548     04 4E 05 F1 | 	add	fp, #4
0e54c     A7 18 62 FC | 	wrlong	arg04, fp
0e550     04 4E 05 F1 | 	add	fp, #4
0e554     A7 16 62 FC | 	wrlong	arg03, fp
0e558     20 4E 85 F1 | 	sub	fp, #32
0e55c     C0 F2 BF FD | 	call	#_pop
0e560     FD 1A 02 F6 | 	mov	arg05, result1
0e564     FE 18 02 F6 | 	mov	arg04, result2
0e568     FF 26 02 F6 | 	mov	local01, result3
0e56c     0C 4E 05 F1 | 	add	fp, #12
0e570     A7 1A 62 FC | 	wrlong	arg05, fp
0e574     04 4E 05 F1 | 	add	fp, #4
0e578     A7 18 62 FC | 	wrlong	arg04, fp
0e57c     04 4E 05 F1 | 	add	fp, #4
0e580     A7 26 62 FC | 	wrlong	local01, fp
0e584     14 4E 85 F1 | 	sub	fp, #20
0e588     94 F2 BF FD | 	call	#_pop
0e58c     A7 FA 61 FC | 	wrlong	result1, fp
0e590     04 4E 05 F1 | 	add	fp, #4
0e594     A7 FC 61 FC | 	wrlong	result2, fp
0e598     04 4E 05 F1 | 	add	fp, #4
0e59c     A7 FE 61 FC | 	wrlong	result3, fp
0e5a0                 | ' 
0e5a0                 | ' t4=pop()
0e5a0                 | ' t3=pop()
0e5a0                 | ' t2=pop()
0e5a0                 | ' t1=pop()
0e5a0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e5a0     FF 1A 02 F6 | 	mov	arg05, result3
0e5a4     08 4E 85 F1 | 	sub	fp, #8
0e5a8     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e5ac     08 4E 05 51 |  if_ne	add	fp, #8
0e5b0     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e5b4     08 4E 85 51 |  if_ne	sub	fp, #8
0e5b8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0e5bc     A8 00 90 5D |  if_ne	jmp	#LR__1210
0e5c0     14 4E 05 F1 | 	add	fp, #20
0e5c4     A7 26 02 FB | 	rdlong	local01, fp
0e5c8     14 4E 85 F1 | 	sub	fp, #20
0e5cc     1C 26 0E F2 | 	cmp	local01, #28 wz
0e5d0     14 4E 05 51 |  if_ne	add	fp, #20
0e5d4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e5d8     14 4E 85 51 |  if_ne	sub	fp, #20
0e5dc     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e5e0     84 00 90 5D |  if_ne	jmp	#LR__1210
0e5e4     20 4E 05 F1 | 	add	fp, #32
0e5e8     A7 26 02 FB | 	rdlong	local01, fp
0e5ec     20 4E 85 F1 | 	sub	fp, #32
0e5f0     1C 26 0E F2 | 	cmp	local01, #28 wz
0e5f4     20 4E 05 51 |  if_ne	add	fp, #32
0e5f8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e5fc     20 4E 85 51 |  if_ne	sub	fp, #32
0e600     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e604     60 00 90 5D |  if_ne	jmp	#LR__1210
0e608     2C 4E 05 F1 | 	add	fp, #44
0e60c     A7 26 02 FB | 	rdlong	local01, fp
0e610     2C 4E 85 F1 | 	sub	fp, #44
0e614     1C 26 0E F2 | 	cmp	local01, #28 wz
0e618     2C 4E 05 51 |  if_ne	add	fp, #44
0e61c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e620     2C 4E 85 51 |  if_ne	sub	fp, #44
0e624     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e628     3C 00 90 5D |  if_ne	jmp	#LR__1210
0e62c     A7 12 02 FB | 	rdlong	arg01, fp
0e630     0C 4E 05 F1 | 	add	fp, #12
0e634     A7 14 02 FB | 	rdlong	arg02, fp
0e638     0C 4E 05 F1 | 	add	fp, #12
0e63c     A7 16 02 FB | 	rdlong	arg03, fp
0e640     0C 4E 05 F1 | 	add	fp, #12
0e644     A7 18 02 FB | 	rdlong	arg04, fp
0e648     24 4E 85 F1 | 	sub	fp, #36
0e64c     37 00 00 FF 
0e650     48 E4 05 F1 | 	add	objptr, ##28232
0e654     F2 1A 02 FB | 	rdlong	arg05, objptr
0e658     37 00 00 FF 
0e65c     48 E4 85 F1 | 	sub	objptr, ##28232
0e660     18 7B B1 FD | 	call	#_hg010b_spin2_box
0e664                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e664     6C 00 90 FD | 	jmp	#LR__1211
0e668                 | LR__1210
0e668     A7 12 02 F6 | 	mov	arg01, fp
0e66c     94 F3 BF FD | 	call	#_converttoint
0e670     FD 28 02 F6 | 	mov	local02, result1
0e674     0C 4E 05 F1 | 	add	fp, #12
0e678     A7 12 02 F6 | 	mov	arg01, fp
0e67c     0C 4E 85 F1 | 	sub	fp, #12
0e680     80 F3 BF FD | 	call	#_converttoint
0e684     FD 2A 02 F6 | 	mov	local03, result1
0e688     18 4E 05 F1 | 	add	fp, #24
0e68c     A7 12 02 F6 | 	mov	arg01, fp
0e690     18 4E 85 F1 | 	sub	fp, #24
0e694     6C F3 BF FD | 	call	#_converttoint
0e698     FD 26 02 F6 | 	mov	local01, result1
0e69c     24 4E 05 F1 | 	add	fp, #36
0e6a0     A7 12 02 F6 | 	mov	arg01, fp
0e6a4     24 4E 85 F1 | 	sub	fp, #36
0e6a8     58 F3 BF FD | 	call	#_converttoint
0e6ac     FD 18 02 F6 | 	mov	arg04, result1
0e6b0     37 00 00 FF 
0e6b4     48 E4 05 F1 | 	add	objptr, ##28232
0e6b8     F2 1A 02 FB | 	rdlong	arg05, objptr
0e6bc     37 00 00 FF 
0e6c0     48 E4 85 F1 | 	sub	objptr, ##28232
0e6c4     14 13 02 F6 | 	mov	arg01, local02
0e6c8     15 15 02 F6 | 	mov	arg02, local03
0e6cc     13 17 02 F6 | 	mov	arg03, local01
0e6d0     A8 7A B1 FD | 	call	#_hg010b_spin2_box
0e6d4                 | LR__1211
0e6d4     A7 F0 03 F6 | 	mov	ptra, fp
0e6d8     B2 00 A0 FD | 	call	#popregs_
0e6dc                 | _do_box_ret
0e6dc     2D 00 64 FD | 	ret
0e6e0                 | 
0e6e0                 | ' 
0e6e0                 | ' '-------------------- brun
0e6e0                 | ' 
0e6e0                 | ' sub do_brun
0e6e0                 | _do_brun
0e6e0     08 4A 05 F6 | 	mov	COUNT_, #8
0e6e4     A8 00 A0 FD | 	call	#pushregs_
0e6e8     34 F1 BF FD | 	call	#_pop
0e6ec     FE 1A 02 F6 | 	mov	arg05, result2
0e6f0     FF 18 02 F6 | 	mov	arg04, result3
0e6f4     FD 26 02 F6 | 	mov	local01, result1
0e6f8     0D 29 02 F6 | 	mov	local02, arg05
0e6fc     0C 2B 02 F6 | 	mov	local03, arg04
0e700                 | ' 
0e700                 | ' t1=pop() 
0e700                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e700     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e704     10 00 90 5D |  if_ne	jmp	#LR__1220
0e708     13 13 02 F6 | 	mov	arg01, local01
0e70c     88 F2 BF FD | 	call	#_convertstring
0e710     FD 26 02 F6 | 	mov	local01, result1
0e714     1F 2A 06 F6 | 	mov	local03, #31
0e718                 | LR__1220
0e718                 | ' if t1.result_type=result_string then
0e718     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e71c     F0 01 90 5D |  if_ne	jmp	#LR__1224
0e720     13 2D 02 F6 | 	mov	local04, local01
0e724                 | '   filename=t1.result.sresult
0e724                 | '   if left$(filename,1)="/" then 
0e724     16 13 02 F6 | 	mov	arg01, local04
0e728     01 14 06 F6 | 	mov	arg02, #1
0e72c     64 BA B1 FD | 	call	#__system__Left_S
0e730     FD 12 02 F6 | 	mov	arg01, result1
0e734     C2 01 00 FF 
0e738     3E 14 06 F6 | 	mov	arg02, ##@LR__5996
0e73c     FC 99 B1 FD | 	call	#__system___string_cmp
0e740     00 FA 0D F2 | 	cmp	result1, #0 wz
0e744     16 2F 02 A6 |  if_e	mov	local05, local04
0e748     14 00 90 AD |  if_e	jmp	#LR__1221
0e74c     C2 01 00 FF 
0e750     40 12 06 F6 | 	mov	arg01, ##@LR__5997
0e754     16 15 02 F6 | 	mov	arg02, local04
0e758     14 9A B1 FD | 	call	#__system___string_concat
0e75c     FD 2E 02 F6 | 	mov	local05, result1
0e760                 | LR__1221
0e760                 | '   open fullfilename for input as #9
0e760     09 12 06 F6 | 	mov	arg01, #9
0e764     17 15 02 F6 | 	mov	arg02, local05
0e768     00 16 06 F6 | 	mov	arg03, #0
0e76c     A8 A5 B1 FD | 	call	#__system___basic_open_string
0e770     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e774     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e778     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e77c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e780     FD 30 0A F6 | 	mov	local06, result1 wz
0e784                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e784     8C 00 90 AD |  if_e	jmp	#LR__1222
0e788     00 12 06 F6 | 	mov	arg01, #0
0e78c     34 F6 B1 FD | 	call	#__system___getiolock_0620
0e790     FD 12 02 F6 | 	mov	arg01, result1
0e794     7C 99 B1 FD | 	call	#__system___lockmem
0e798     C2 01 00 FF 
0e79c     49 14 06 F6 | 	mov	arg02, ##@LR__5998
0e7a0     00 12 06 F6 | 	mov	arg01, #0
0e7a4     00 16 06 F6 | 	mov	arg03, #0
0e7a8     60 A6 B1 FD | 	call	#__system___basic_print_string
0e7ac     00 12 06 F6 | 	mov	arg01, #0
0e7b0     18 15 02 F6 | 	mov	arg02, local06
0e7b4     00 16 06 F6 | 	mov	arg03, #0
0e7b8     0A 18 06 F6 | 	mov	arg04, #10
0e7bc     90 A6 B1 FD | 	call	#__system___basic_print_integer
0e7c0     C2 01 00 FF 
0e7c4     57 14 06 F6 | 	mov	arg02, ##@LR__5999
0e7c8     00 12 06 F6 | 	mov	arg01, #0
0e7cc     00 16 06 F6 | 	mov	arg03, #0
0e7d0     38 A6 B1 FD | 	call	#__system___basic_print_string
0e7d4     18 13 02 F6 | 	mov	arg01, local06
0e7d8     C8 C2 B1 FD | 	call	#__system___strerror
0e7dc     FD 14 02 F6 | 	mov	arg02, result1
0e7e0     00 12 06 F6 | 	mov	arg01, #0
0e7e4     00 16 06 F6 | 	mov	arg03, #0
0e7e8     20 A6 B1 FD | 	call	#__system___basic_print_string
0e7ec     00 12 06 F6 | 	mov	arg01, #0
0e7f0     0A 14 06 F6 | 	mov	arg02, #10
0e7f4     00 16 06 F6 | 	mov	arg03, #0
0e7f8     B8 A5 B1 FD | 	call	#__system___basic_print_char
0e7fc     00 12 06 F6 | 	mov	arg01, #0
0e800     C0 F5 B1 FD | 	call	#__system___getiolock_0620
0e804     FD 00 68 FC | 	wrlong	#0, result1
0e808     09 12 06 F6 | 	mov	arg01, #9
0e80c     64 EC B1 FD | 	call	#__system__close
0e810     FC 00 90 FD | 	jmp	#LR__1225
0e814                 | LR__1222
0e814     01 32 06 F6 | 	mov	local07, #1
0e818     00 34 06 F6 | 	mov	local08, #0
0e81c                 | '   do
0e81c                 | LR__1223
0e81c                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e81c     4E 00 00 FF 
0e820     D4 E4 05 F1 | 	add	objptr, ##40148
0e824     F2 16 02 F6 | 	mov	arg03, objptr
0e828     4E 00 00 FF 
0e82c     D4 E4 85 F1 | 	sub	objptr, ##40148
0e830     09 12 06 F6 | 	mov	arg01, #9
0e834     19 15 02 F6 | 	mov	arg02, local07
0e838     0A 18 C6 F9 | 	decod	arg04, #10
0e83c     01 1A 06 F6 | 	mov	arg05, #1
0e840     44 A7 B1 FD | 	call	#__system___basic_get
0e844     FD 30 02 F6 | 	mov	local06, result1
0e848     FD 32 02 F1 | 	add	local07, result1
0e84c     4E 00 00 FF 
0e850     D4 E4 05 F1 | 	add	objptr, ##40148
0e854     F2 12 02 F6 | 	mov	arg01, objptr
0e858     1A 15 02 F6 | 	mov	arg02, local08
0e85c     0A 16 C6 F9 | 	decod	arg03, #10
0e860     43 00 00 FF 
0e864     08 E4 85 F1 | 	sub	objptr, ##34312
0e868     A0 8C B1 FD | 	call	#_psram_spin2_write
0e86c     0B 00 00 FF 
0e870     CC E4 85 F1 | 	sub	objptr, ##5836
0e874     18 35 02 F1 | 	add	local08, local06
0e878     02 00 00 FF 
0e87c     00 30 0E F2 | 	cmp	local06, ##1024 wz
0e880     E0 03 00 AF 
0e884     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0e888     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1223
0e88c     37 00 00 FF 
0e890     1C E4 05 F1 | 	add	objptr, ##28188
0e894     F2 12 02 FB | 	rdlong	arg01, objptr
0e898     03 12 62 FD | 	cogstop	arg01
0e89c     04 E4 05 F1 | 	add	objptr, #4
0e8a0     F2 12 02 FB | 	rdlong	arg01, objptr
0e8a4     03 12 62 FD | 	cogstop	arg01
0e8a8     04 E4 05 F1 | 	add	objptr, #4
0e8ac     F2 12 02 FB | 	rdlong	arg01, objptr
0e8b0     03 12 62 FD | 	cogstop	arg01
0e8b4     19 00 00 FF 
0e8b8     3C E5 05 F1 | 	add	objptr, ##13116
0e8bc     F2 12 02 FB | 	rdlong	arg01, objptr
0e8c0     03 12 62 FD | 	cogstop	arg01
0e8c4     18 00 00 FF 
0e8c8     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0e8cc     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0e8d0     18 00 00 FF 
0e8d4     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0e8d8     19 00 00 FF 
0e8dc     34 E5 85 F1 | 	sub	objptr, ##13108
0e8e0     1E 34 06 F6 | 	mov	local08, #30
0e8e4     28 E4 61 FD | 	setq	objptr
0e8e8     0A 35 F2 FC | 	coginit	local08, arg02 wc
0e8ec     01 34 66 C6 |  if_b	neg	local08, #1
0e8f0     1B 00 00 FF 
0e8f4     44 E5 05 F1 | 	add	objptr, ##14148
0e8f8     F2 34 62 FC | 	wrlong	local08, objptr
0e8fc     52 00 00 FF 
0e900     70 E5 85 F1 | 	sub	objptr, ##42352
0e904     00 12 06 F6 | 	mov	arg01, #0
0e908     01 12 62 FD | 	cogid	arg01
0e90c     03 12 62 FD | 	cogstop	arg01
0e910                 | LR__1224
0e910                 | LR__1225
0e910     A7 F0 03 F6 | 	mov	ptra, fp
0e914     B2 00 A0 FD | 	call	#popregs_
0e918                 | _do_brun_ret
0e918     2D 00 64 FD | 	ret
0e91c                 | 
0e91c                 | ' 
0e91c                 | ' '-------------------- cd
0e91c                 | ' 
0e91c                 | ' sub do_cd
0e91c                 | _do_cd
0e91c     06 4A 05 F6 | 	mov	COUNT_, #6
0e920     A8 00 A0 FD | 	call	#pushregs_
0e924     C2 01 00 FF 
0e928     5A 12 06 F6 | 	mov	arg01, ##@LR__6000
0e92c     31 14 06 F6 | 	mov	arg02, #49
0e930     50 F6 B1 FD | 	call	#__system___basic_dir
0e934     E8 EE BF FD | 	call	#_pop
0e938     FE 18 02 F6 | 	mov	arg04, result2
0e93c     FF 16 02 F6 | 	mov	arg03, result3
0e940     FD 26 02 F6 | 	mov	local01, result1
0e944     0C 29 02 F6 | 	mov	local02, arg04
0e948     0B 2B 02 F6 | 	mov	local03, arg03
0e94c                 | ' t1=pop()
0e94c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e94c     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e950     10 00 90 5D |  if_ne	jmp	#LR__1230
0e954     13 13 02 F6 | 	mov	arg01, local01
0e958     3C F0 BF FD | 	call	#_convertstring
0e95c     FD 26 02 F6 | 	mov	local01, result1
0e960     1F 2A 06 F6 | 	mov	local03, #31
0e964                 | LR__1230
0e964                 | ' if t1.result_type<>result_string then printerror(15): return
0e964     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e968     10 00 90 AD |  if_e	jmp	#LR__1231
0e96c     0F 12 06 F6 | 	mov	arg01, #15
0e970     00 14 06 F6 | 	mov	arg02, #0
0e974     44 5D B1 FD | 	call	#_printerror
0e978     54 05 90 FD | 	jmp	#LR__1249
0e97c                 | LR__1231
0e97c     13 2D 02 F6 | 	mov	local04, local01
0e980                 | ' newdir$=t1.result.sresult
0e980                 | ' if newdir$=".." then 
0e980     C2 01 00 FF 
0e984     5C 14 06 F6 | 	mov	arg02, ##@LR__6001
0e988     16 13 02 F6 | 	mov	arg01, local04
0e98c     AC 97 B1 FD | 	call	#__system___string_cmp
0e990     00 FA 0D F2 | 	cmp	result1, #0 wz
0e994     C8 01 90 5D |  if_ne	jmp	#LR__1238
0e998     4A 00 00 FF 
0e99c     B4 E4 05 F1 | 	add	objptr, ##38068
0e9a0     F2 12 02 FB | 	rdlong	arg01, objptr
0e9a4     4A 00 00 FF 
0e9a8     B4 E4 85 F1 | 	sub	objptr, ##38068
0e9ac     09 2F 02 F6 | 	mov	local05, arg01
0e9b0     97 06 48 FB | 	callpa	#(@LR__1233-@LR__1232)>>2,fcache_load_ptr_
0e9b4                 | LR__1232
0e9b4     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e9b8     01 2E 06 51 |  if_ne	add	local05, #1
0e9bc     F4 FF 9F 5D |  if_ne	jmp	#LR__1232
0e9c0                 | LR__1233
0e9c0     17 13 C2 F2 | 	subr	arg01, local05
0e9c4     4A 00 00 FF 
0e9c8     B4 E4 05 F1 | 	add	objptr, ##38068
0e9cc     F2 14 02 FB | 	rdlong	arg02, objptr
0e9d0     4A 00 00 FF 
0e9d4     B4 E4 85 F1 | 	sub	objptr, ##38068
0e9d8     C2 01 00 FF 
0e9dc     5F 16 06 F6 | 	mov	arg03, ##@LR__6002
0e9e0     FC BD B1 FD | 	call	#__system__InstrRev
0e9e4     FD 2C 02 F6 | 	mov	local04, result1
0e9e8                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e9e8     02 2C 56 F2 | 	cmps	local04, #2 wc
0e9ec     28 00 90 CD |  if_b	jmp	#LR__1234
0e9f0     4A 00 00 FF 
0e9f4     B4 E4 05 F1 | 	add	objptr, ##38068
0e9f8     F2 12 02 FB | 	rdlong	arg01, objptr
0e9fc     4A 00 00 FF 
0ea00     B4 E4 85 F1 | 	sub	objptr, ##38068
0ea04     01 2C 86 F1 | 	sub	local04, #1
0ea08     16 15 02 F6 | 	mov	arg02, local04
0ea0c     84 B7 B1 FD | 	call	#__system__Left_S
0ea10     FD 2C 02 F6 | 	mov	local04, result1
0ea14     08 00 90 FD | 	jmp	#LR__1235
0ea18                 | LR__1234
0ea18     C2 01 00 FF 
0ea1c     61 2C 06 F6 | 	mov	local04, ##@LR__6003
0ea20                 | LR__1235
0ea20     16 13 02 F6 | 	mov	arg01, local04
0ea24     78 9D B1 FD | 	call	#__system___chdir
0ea28     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ea2c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0ea30     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0ea34     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ea38     FD 30 0A F6 | 	mov	local06, result1 wz
0ea3c                 | '   chdir newdir$
0ea3c                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0ea3c     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0ea40     A4 00 90 AD |  if_e	jmp	#LR__1236
0ea44     00 12 06 F6 | 	mov	arg01, #0
0ea48     78 F3 B1 FD | 	call	#__system___getiolock_0620
0ea4c     FD 12 02 F6 | 	mov	arg01, result1
0ea50     C0 96 B1 FD | 	call	#__system___lockmem
0ea54     C2 01 00 FF 
0ea58     63 14 06 F6 | 	mov	arg02, ##@LR__6004
0ea5c     00 12 06 F6 | 	mov	arg01, #0
0ea60     00 16 06 F6 | 	mov	arg03, #0
0ea64     A4 A3 B1 FD | 	call	#__system___basic_print_string
0ea68     00 12 06 F6 | 	mov	arg01, #0
0ea6c     18 15 02 F6 | 	mov	arg02, local06
0ea70     00 16 06 F6 | 	mov	arg03, #0
0ea74     0A 18 06 F6 | 	mov	arg04, #10
0ea78     D4 A3 B1 FD | 	call	#__system___basic_print_integer
0ea7c     C2 01 00 FF 
0ea80     71 14 06 F6 | 	mov	arg02, ##@LR__6005
0ea84     00 12 06 F6 | 	mov	arg01, #0
0ea88     00 16 06 F6 | 	mov	arg03, #0
0ea8c     7C A3 B1 FD | 	call	#__system___basic_print_string
0ea90     45 00 00 FF 
0ea94     70 E5 05 F1 | 	add	objptr, ##35696
0ea98     F2 14 02 FB | 	rdlong	arg02, objptr
0ea9c     45 00 00 FF 
0eaa0     70 E5 85 F1 | 	sub	objptr, ##35696
0eaa4     00 12 06 F6 | 	mov	arg01, #0
0eaa8     00 16 06 F6 | 	mov	arg03, #0
0eaac     5C A3 B1 FD | 	call	#__system___basic_print_string
0eab0     00 12 06 F6 | 	mov	arg01, #0
0eab4     0A 14 06 F6 | 	mov	arg02, #10
0eab8     00 16 06 F6 | 	mov	arg03, #0
0eabc     F4 A2 B1 FD | 	call	#__system___basic_print_char
0eac0     00 12 06 F6 | 	mov	arg01, #0
0eac4     FC F2 B1 FD | 	call	#__system___getiolock_0620
0eac8     FD 00 68 FC | 	wrlong	#0, result1
0eacc     4A 00 00 FF 
0ead0     B4 E4 05 F1 | 	add	objptr, ##38068
0ead4     F2 12 02 FB | 	rdlong	arg01, objptr
0ead8     4A 00 00 FF 
0eadc     B4 E4 85 F1 | 	sub	objptr, ##38068
0eae0     BC 9C B1 FD | 	call	#__system___chdir
0eae4     14 00 90 FD | 	jmp	#LR__1237
0eae8                 | LR__1236
0eae8     4A 00 00 FF 
0eaec     B4 E4 05 F1 | 	add	objptr, ##38068
0eaf0     F2 2C 62 FC | 	wrlong	local04, objptr
0eaf4     4A 00 00 FF 
0eaf8     B4 E4 85 F1 | 	sub	objptr, ##38068
0eafc                 | LR__1237
0eafc                 | '   print "Current directory: ";currentdir$
0eafc     00 12 06 F6 | 	mov	arg01, #0
0eb00     C0 F2 B1 FD | 	call	#__system___getiolock_0620
0eb04     FD 12 02 F6 | 	mov	arg01, result1
0eb08     08 96 B1 FD | 	call	#__system___lockmem
0eb0c     C2 01 00 FF 
0eb10     74 14 06 F6 | 	mov	arg02, ##@LR__6006
0eb14     00 12 06 F6 | 	mov	arg01, #0
0eb18     00 16 06 F6 | 	mov	arg03, #0
0eb1c     EC A2 B1 FD | 	call	#__system___basic_print_string
0eb20     4A 00 00 FF 
0eb24     B4 E4 05 F1 | 	add	objptr, ##38068
0eb28     F2 14 02 FB | 	rdlong	arg02, objptr
0eb2c     4A 00 00 FF 
0eb30     B4 E4 85 F1 | 	sub	objptr, ##38068
0eb34     00 12 06 F6 | 	mov	arg01, #0
0eb38     00 16 06 F6 | 	mov	arg03, #0
0eb3c     CC A2 B1 FD | 	call	#__system___basic_print_string
0eb40     00 12 06 F6 | 	mov	arg01, #0
0eb44     0A 14 06 F6 | 	mov	arg02, #10
0eb48     00 16 06 F6 | 	mov	arg03, #0
0eb4c     64 A2 B1 FD | 	call	#__system___basic_print_char
0eb50     00 12 06 F6 | 	mov	arg01, #0
0eb54     6C F2 B1 FD | 	call	#__system___getiolock_0620
0eb58     FD 00 68 FC | 	wrlong	#0, result1
0eb5c                 | '   return
0eb5c     70 03 90 FD | 	jmp	#LR__1249
0eb60                 | LR__1238
0eb60                 | ' if left$(newdir$,1)="/" then 
0eb60     16 13 02 F6 | 	mov	arg01, local04
0eb64     01 14 06 F6 | 	mov	arg02, #1
0eb68     28 B6 B1 FD | 	call	#__system__Left_S
0eb6c     FD 12 02 F6 | 	mov	arg01, result1
0eb70     C2 01 00 FF 
0eb74     88 14 06 F6 | 	mov	arg02, ##@LR__6007
0eb78     C0 95 B1 FD | 	call	#__system___string_cmp
0eb7c     00 FA 0D F2 | 	cmp	result1, #0 wz
0eb80     40 01 90 5D |  if_ne	jmp	#LR__1241
0eb84     16 13 02 F6 | 	mov	arg01, local04
0eb88     14 9C B1 FD | 	call	#__system___chdir
0eb8c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0eb90     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0eb94     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0eb98     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0eb9c     FD 30 0A F6 | 	mov	local06, result1 wz
0eba0                 | '   chdir(newdir$)
0eba0                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0eba0     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0eba4     A4 00 90 AD |  if_e	jmp	#LR__1239
0eba8     00 12 06 F6 | 	mov	arg01, #0
0ebac     14 F2 B1 FD | 	call	#__system___getiolock_0620
0ebb0     FD 12 02 F6 | 	mov	arg01, result1
0ebb4     5C 95 B1 FD | 	call	#__system___lockmem
0ebb8     C2 01 00 FF 
0ebbc     8A 14 06 F6 | 	mov	arg02, ##@LR__6008
0ebc0     00 12 06 F6 | 	mov	arg01, #0
0ebc4     00 16 06 F6 | 	mov	arg03, #0
0ebc8     40 A2 B1 FD | 	call	#__system___basic_print_string
0ebcc     00 12 06 F6 | 	mov	arg01, #0
0ebd0     18 15 02 F6 | 	mov	arg02, local06
0ebd4     00 16 06 F6 | 	mov	arg03, #0
0ebd8     0A 18 06 F6 | 	mov	arg04, #10
0ebdc     70 A2 B1 FD | 	call	#__system___basic_print_integer
0ebe0     C2 01 00 FF 
0ebe4     98 14 06 F6 | 	mov	arg02, ##@LR__6009
0ebe8     00 12 06 F6 | 	mov	arg01, #0
0ebec     00 16 06 F6 | 	mov	arg03, #0
0ebf0     18 A2 B1 FD | 	call	#__system___basic_print_string
0ebf4     45 00 00 FF 
0ebf8     70 E5 05 F1 | 	add	objptr, ##35696
0ebfc     F2 14 02 FB | 	rdlong	arg02, objptr
0ec00     45 00 00 FF 
0ec04     70 E5 85 F1 | 	sub	objptr, ##35696
0ec08     00 12 06 F6 | 	mov	arg01, #0
0ec0c     00 16 06 F6 | 	mov	arg03, #0
0ec10     F8 A1 B1 FD | 	call	#__system___basic_print_string
0ec14     00 12 06 F6 | 	mov	arg01, #0
0ec18     0A 14 06 F6 | 	mov	arg02, #10
0ec1c     00 16 06 F6 | 	mov	arg03, #0
0ec20     90 A1 B1 FD | 	call	#__system___basic_print_char
0ec24     00 12 06 F6 | 	mov	arg01, #0
0ec28     98 F1 B1 FD | 	call	#__system___getiolock_0620
0ec2c     FD 00 68 FC | 	wrlong	#0, result1
0ec30     4A 00 00 FF 
0ec34     B4 E4 05 F1 | 	add	objptr, ##38068
0ec38     F2 12 02 FB | 	rdlong	arg01, objptr
0ec3c     4A 00 00 FF 
0ec40     B4 E4 85 F1 | 	sub	objptr, ##38068
0ec44     58 9B B1 FD | 	call	#__system___chdir
0ec48     14 00 90 FD | 	jmp	#LR__1240
0ec4c                 | LR__1239
0ec4c     4A 00 00 FF 
0ec50     B4 E4 05 F1 | 	add	objptr, ##38068
0ec54     F2 2C 62 FC | 	wrlong	local04, objptr
0ec58     4A 00 00 FF 
0ec5c     B4 E4 85 F1 | 	sub	objptr, ##38068
0ec60                 | LR__1240
0ec60                 | '   print "Current directory: ";currentdir$
0ec60     00 12 06 F6 | 	mov	arg01, #0
0ec64     5C F1 B1 FD | 	call	#__system___getiolock_0620
0ec68     FD 12 02 F6 | 	mov	arg01, result1
0ec6c     A4 94 B1 FD | 	call	#__system___lockmem
0ec70     C2 01 00 FF 
0ec74     9B 14 06 F6 | 	mov	arg02, ##@LR__6010
0ec78     00 12 06 F6 | 	mov	arg01, #0
0ec7c     00 16 06 F6 | 	mov	arg03, #0
0ec80     88 A1 B1 FD | 	call	#__system___basic_print_string
0ec84     4A 00 00 FF 
0ec88     B4 E4 05 F1 | 	add	objptr, ##38068
0ec8c     F2 14 02 FB | 	rdlong	arg02, objptr
0ec90     4A 00 00 FF 
0ec94     B4 E4 85 F1 | 	sub	objptr, ##38068
0ec98     00 12 06 F6 | 	mov	arg01, #0
0ec9c     00 16 06 F6 | 	mov	arg03, #0
0eca0     68 A1 B1 FD | 	call	#__system___basic_print_string
0eca4     00 12 06 F6 | 	mov	arg01, #0
0eca8     0A 14 06 F6 | 	mov	arg02, #10
0ecac     00 16 06 F6 | 	mov	arg03, #0
0ecb0     00 A1 B1 FD | 	call	#__system___basic_print_char
0ecb4     00 12 06 F6 | 	mov	arg01, #0
0ecb8     08 F1 B1 FD | 	call	#__system___getiolock_0620
0ecbc     FD 00 68 FC | 	wrlong	#0, result1
0ecc0                 | '   return
0ecc0     0C 02 90 FD | 	jmp	#LR__1249
0ecc4                 | LR__1241
0ecc4                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0ecc4     4A 00 00 FF 
0ecc8     B4 E4 05 F1 | 	add	objptr, ##38068
0eccc     F2 12 02 FB | 	rdlong	arg01, objptr
0ecd0     4A 00 00 FF 
0ecd4     B4 E4 85 F1 | 	sub	objptr, ##38068
0ecd8     C2 01 00 FF 
0ecdc     AF 14 06 F6 | 	mov	arg02, ##@LR__6011
0ece0     58 94 B1 FD | 	call	#__system___string_cmp
0ece4     00 FA 0D F2 | 	cmp	result1, #0 wz
0ece8     34 00 90 AD |  if_e	jmp	#LR__1242
0ecec     4A 00 00 FF 
0ecf0     B4 E4 05 F1 | 	add	objptr, ##38068
0ecf4     F2 12 02 FB | 	rdlong	arg01, objptr
0ecf8     4A 00 00 FF 
0ecfc     B4 E4 85 F1 | 	sub	objptr, ##38068
0ed00     C2 01 00 FF 
0ed04     B1 14 06 F6 | 	mov	arg02, ##@LR__6012
0ed08     64 94 B1 FD | 	call	#__system___string_concat
0ed0c     FD 12 02 F6 | 	mov	arg01, result1
0ed10     16 15 02 F6 | 	mov	arg02, local04
0ed14     58 94 B1 FD | 	call	#__system___string_concat
0ed18     FD 2C 02 F6 | 	mov	local04, result1
0ed1c     20 00 90 FD | 	jmp	#LR__1243
0ed20                 | LR__1242
0ed20     4A 00 00 FF 
0ed24     B4 E4 05 F1 | 	add	objptr, ##38068
0ed28     F2 12 02 FB | 	rdlong	arg01, objptr
0ed2c     4A 00 00 FF 
0ed30     B4 E4 85 F1 | 	sub	objptr, ##38068
0ed34     16 15 02 F6 | 	mov	arg02, local04
0ed38     34 94 B1 FD | 	call	#__system___string_concat
0ed3c     FD 2C 02 F6 | 	mov	local04, result1
0ed40                 | LR__1243
0ed40                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0ed40     16 13 02 F6 | 	mov	arg01, local04
0ed44     01 14 06 F6 | 	mov	arg02, #1
0ed48     D0 B4 B1 FD | 	call	#__system__Right_S
0ed4c     FD 12 02 F6 | 	mov	arg01, result1
0ed50     C2 01 00 FF 
0ed54     B3 14 06 F6 | 	mov	arg02, ##@LR__6013
0ed58     E0 93 B1 FD | 	call	#__system___string_cmp
0ed5c     00 FA 0D F2 | 	cmp	result1, #0 wz
0ed60     30 00 90 5D |  if_ne	jmp	#LR__1246
0ed64     16 13 02 F6 | 	mov	arg01, local04
0ed68     09 2F 02 F6 | 	mov	local05, arg01
0ed6c     97 06 48 FB | 	callpa	#(@LR__1245-@LR__1244)>>2,fcache_load_ptr_
0ed70                 | LR__1244
0ed70     17 FB C9 FA | 	rdbyte	result1, local05 wz
0ed74     01 2E 06 51 |  if_ne	add	local05, #1
0ed78     F4 FF 9F 5D |  if_ne	jmp	#LR__1244
0ed7c                 | LR__1245
0ed7c     09 2F 82 F1 | 	sub	local05, arg01
0ed80     17 15 02 F6 | 	mov	arg02, local05
0ed84     01 14 86 F1 | 	sub	arg02, #1
0ed88     16 13 02 F6 | 	mov	arg01, local04
0ed8c     04 B4 B1 FD | 	call	#__system__Left_S
0ed90     FD 2C 02 F6 | 	mov	local04, result1
0ed94                 | LR__1246
0ed94     16 13 02 F6 | 	mov	arg01, local04
0ed98     04 9A B1 FD | 	call	#__system___chdir
0ed9c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0eda0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0eda4     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0eda8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0edac     FD 30 0A F6 | 	mov	local06, result1 wz
0edb0                 | '   chdir(newdir$)
0edb0                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0edb0     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0edb4     A4 00 90 AD |  if_e	jmp	#LR__1247
0edb8     00 12 06 F6 | 	mov	arg01, #0
0edbc     04 F0 B1 FD | 	call	#__system___getiolock_0620
0edc0     FD 12 02 F6 | 	mov	arg01, result1
0edc4     4C 93 B1 FD | 	call	#__system___lockmem
0edc8     C2 01 00 FF 
0edcc     B5 14 06 F6 | 	mov	arg02, ##@LR__6014
0edd0     00 12 06 F6 | 	mov	arg01, #0
0edd4     00 16 06 F6 | 	mov	arg03, #0
0edd8     30 A0 B1 FD | 	call	#__system___basic_print_string
0eddc     00 12 06 F6 | 	mov	arg01, #0
0ede0     18 15 02 F6 | 	mov	arg02, local06
0ede4     00 16 06 F6 | 	mov	arg03, #0
0ede8     0A 18 06 F6 | 	mov	arg04, #10
0edec     60 A0 B1 FD | 	call	#__system___basic_print_integer
0edf0     C2 01 00 FF 
0edf4     C3 14 06 F6 | 	mov	arg02, ##@LR__6015
0edf8     00 12 06 F6 | 	mov	arg01, #0
0edfc     00 16 06 F6 | 	mov	arg03, #0
0ee00     08 A0 B1 FD | 	call	#__system___basic_print_string
0ee04     45 00 00 FF 
0ee08     70 E5 05 F1 | 	add	objptr, ##35696
0ee0c     F2 14 02 FB | 	rdlong	arg02, objptr
0ee10     45 00 00 FF 
0ee14     70 E5 85 F1 | 	sub	objptr, ##35696
0ee18     00 12 06 F6 | 	mov	arg01, #0
0ee1c     00 16 06 F6 | 	mov	arg03, #0
0ee20     E8 9F B1 FD | 	call	#__system___basic_print_string
0ee24     00 12 06 F6 | 	mov	arg01, #0
0ee28     0A 14 06 F6 | 	mov	arg02, #10
0ee2c     00 16 06 F6 | 	mov	arg03, #0
0ee30     80 9F B1 FD | 	call	#__system___basic_print_char
0ee34     00 12 06 F6 | 	mov	arg01, #0
0ee38     88 EF B1 FD | 	call	#__system___getiolock_0620
0ee3c     FD 00 68 FC | 	wrlong	#0, result1
0ee40     4A 00 00 FF 
0ee44     B4 E4 05 F1 | 	add	objptr, ##38068
0ee48     F2 12 02 FB | 	rdlong	arg01, objptr
0ee4c     4A 00 00 FF 
0ee50     B4 E4 85 F1 | 	sub	objptr, ##38068
0ee54     48 99 B1 FD | 	call	#__system___chdir
0ee58     14 00 90 FD | 	jmp	#LR__1248
0ee5c                 | LR__1247
0ee5c     4A 00 00 FF 
0ee60     B4 E4 05 F1 | 	add	objptr, ##38068
0ee64     F2 2C 62 FC | 	wrlong	local04, objptr
0ee68     4A 00 00 FF 
0ee6c     B4 E4 85 F1 | 	sub	objptr, ##38068
0ee70                 | LR__1248
0ee70                 | '   print "Current directory: ";currentdir$
0ee70     00 12 06 F6 | 	mov	arg01, #0
0ee74     4C EF B1 FD | 	call	#__system___getiolock_0620
0ee78     FD 12 02 F6 | 	mov	arg01, result1
0ee7c     94 92 B1 FD | 	call	#__system___lockmem
0ee80     C2 01 00 FF 
0ee84     C6 14 06 F6 | 	mov	arg02, ##@LR__6016
0ee88     00 12 06 F6 | 	mov	arg01, #0
0ee8c     00 16 06 F6 | 	mov	arg03, #0
0ee90     78 9F B1 FD | 	call	#__system___basic_print_string
0ee94     4A 00 00 FF 
0ee98     B4 E4 05 F1 | 	add	objptr, ##38068
0ee9c     F2 14 02 FB | 	rdlong	arg02, objptr
0eea0     4A 00 00 FF 
0eea4     B4 E4 85 F1 | 	sub	objptr, ##38068
0eea8     00 12 06 F6 | 	mov	arg01, #0
0eeac     00 16 06 F6 | 	mov	arg03, #0
0eeb0     58 9F B1 FD | 	call	#__system___basic_print_string
0eeb4     00 12 06 F6 | 	mov	arg01, #0
0eeb8     0A 14 06 F6 | 	mov	arg02, #10
0eebc     00 16 06 F6 | 	mov	arg03, #0
0eec0     F0 9E B1 FD | 	call	#__system___basic_print_char
0eec4     00 12 06 F6 | 	mov	arg01, #0
0eec8     F8 EE B1 FD | 	call	#__system___getiolock_0620
0eecc     FD 00 68 FC | 	wrlong	#0, result1
0eed0                 | LR__1249
0eed0     A7 F0 03 F6 | 	mov	ptra, fp
0eed4     B2 00 A0 FD | 	call	#popregs_
0eed8                 | _do_cd_ret
0eed8     2D 00 64 FD | 	ret
0eedc                 | 
0eedc                 | ' 
0eedc                 | ' '-------------------- changefreq
0eedc                 | ' 
0eedc                 | ' sub do_changefreq
0eedc                 | _do_changefreq
0eedc     04 4A 05 F6 | 	mov	COUNT_, #4
0eee0     A8 00 A0 FD | 	call	#pushregs_
0eee4     2C F0 07 F1 | 	add	ptra, #44
0eee8     34 E9 BF FD | 	call	#_pop
0eeec     FF 14 02 F6 | 	mov	arg02, result3
0eef0     A7 FA 61 FC | 	wrlong	result1, fp
0eef4     04 4E 05 F1 | 	add	fp, #4
0eef8     A7 FC 61 FC | 	wrlong	result2, fp
0eefc     04 4E 05 F1 | 	add	fp, #4
0ef00     A7 14 62 FC | 	wrlong	arg02, fp
0ef04     08 4E 85 F1 | 	sub	fp, #8
0ef08     A7 12 02 F6 | 	mov	arg01, fp
0ef0c     B0 EB BF FD | 	call	#_converttofloat
0ef10     FD 14 02 F6 | 	mov	arg02, result1
0ef14     28 4E 05 F1 | 	add	fp, #40
0ef18     A7 14 62 FC | 	wrlong	arg02, fp
0ef1c     28 4E 85 F1 | 	sub	fp, #40
0ef20     FC E8 BF FD | 	call	#_pop
0ef24     FF 14 02 F6 | 	mov	arg02, result3
0ef28     A7 FA 61 FC | 	wrlong	result1, fp
0ef2c     04 4E 05 F1 | 	add	fp, #4
0ef30     A7 FC 61 FC | 	wrlong	result2, fp
0ef34     04 4E 05 F1 | 	add	fp, #4
0ef38     A7 14 62 FC | 	wrlong	arg02, fp
0ef3c     08 4E 85 F1 | 	sub	fp, #8
0ef40     A7 12 02 F6 | 	mov	arg01, fp
0ef44     BC EA BF FD | 	call	#_converttoint
0ef48     FD 14 52 F6 | 	abs	arg02, result1 wc
0ef4c     07 14 06 F5 | 	and	arg02, #7
0ef50     0A 15 82 F6 | 	negc	arg02, arg02
0ef54     0C 4E 05 F1 | 	add	fp, #12
0ef58     A7 14 62 FC | 	wrlong	arg02, fp
0ef5c     0A 13 02 F6 | 	mov	arg01, arg02
0ef60     03 12 66 F0 | 	shl	arg01, #3
0ef64     0A 13 82 F1 | 	sub	arg01, arg02
0ef68     02 12 66 F0 | 	shl	arg01, #2
0ef6c     14 00 00 FF 
0ef70     38 E5 05 F1 | 	add	objptr, ##10552
0ef74     F2 12 02 F1 | 	add	arg01, objptr
0ef78     16 12 06 F1 | 	add	arg01, #22
0ef7c     09 15 E2 FA | 	rdword	arg02, arg01
0ef80     14 4E 05 F1 | 	add	fp, #20
0ef84     A7 14 62 FC | 	wrlong	arg02, fp
0ef88                 | ' amode=channels(channel).amode
0ef88                 | ' if amode>0 then
0ef88     20 4E 85 F1 | 	sub	fp, #32
0ef8c     01 14 56 F2 | 	cmps	arg02, #1 wc
0ef90     14 00 00 FF 
0ef94     38 E5 85 F1 | 	sub	objptr, ##10552
0ef98     38 02 90 CD |  if_b	jmp	#LR__1252
0ef9c     28 4E 05 F1 | 	add	fp, #40
0efa0     A7 14 02 FB | 	rdlong	arg02, fp
0efa4     28 4E 85 F1 | 	sub	fp, #40
0efa8     FC 16 20 FF 
0efac     54 12 06 F6 | 	mov	arg01, ##1076754516
0efb0     B0 CF B1 FD | 	call	#__system____builtin_logbase
0efb4     FD 26 02 F6 | 	mov	local01, result1
0efb8     1E 14 C6 F9 | 	decod	arg02, #30
0efbc     FC 16 20 FF 
0efc0     54 12 06 F6 | 	mov	arg01, ##1076754516
0efc4     9C CF B1 FD | 	call	#__system____builtin_logbase
0efc8     FD 14 02 F6 | 	mov	arg02, result1
0efcc     13 13 02 F6 | 	mov	arg01, local01
0efd0     C0 C1 B1 FD | 	call	#__system___float_div
0efd4     FD 12 02 F6 | 	mov	arg01, result1
0efd8     00 14 06 F6 | 	mov	arg02, #0
0efdc     78 C4 B1 FD | 	call	#__system___float_tointeger
0efe0     10 4E 05 F1 | 	add	fp, #16
0efe4     A7 FA 61 FC | 	wrlong	result1, fp
0efe8     1E 26 C6 F9 | 	decod	local01, #30
0efec     FD 12 02 F6 | 	mov	arg01, result1
0eff0     10 4E 05 F1 | 	add	fp, #16
0eff4     A7 14 02 FB | 	rdlong	arg02, fp
0eff8     20 4E 85 F1 | 	sub	fp, #32
0effc     0A 13 02 F1 | 	add	arg01, arg02
0f000     09 13 52 F6 | 	abs	arg01, arg01 wc
0f004     1F 28 C6 C9 |  if_b	decod	local02, #31
0f008     00 28 06 36 |  if_ae	mov	local02, #0
0f00c     7C BB B1 FD | 	call	#__system___float_fromuns
0f010     14 FB 61 F5 | 	xor	result1, local02
0f014     FD 14 02 F6 | 	mov	arg02, result1
0f018     13 13 02 F6 | 	mov	arg01, local01
0f01c     7C CE B1 FD | 	call	#__system____builtin_powf
0f020     FD 12 02 F6 | 	mov	arg01, result1
0f024     01 14 06 F6 | 	mov	arg02, #1
0f028     2C C4 B1 FD | 	call	#__system___float_tointeger
0f02c     14 4E 05 F1 | 	add	fp, #20
0f030     A7 FA 61 FC | 	wrlong	result1, fp
0f034                 | '   skip=round(2^(lfreq+amode))                     '''' this const + const 2 lines lower=18
0f034                 | '   if skip>32768 then i=skip/32768: skip=32768 else i=1
0f034     14 4E 85 F1 | 	sub	fp, #20
0f038     40 00 00 FF 
0f03c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0f040     30 00 90 CD |  if_b	jmp	#LR__1250
0f044     14 4E 05 F1 | 	add	fp, #20
0f048     A7 26 02 FB | 	rdlong	local01, fp
0f04c     13 27 52 F6 | 	abs	local01, local01 wc
0f050     0F 26 46 F0 | 	shr	local01, #15
0f054     13 27 82 F6 | 	negc	local01, local01
0f058     04 4E 05 F1 | 	add	fp, #4
0f05c     A7 26 62 FC | 	wrlong	local01, fp
0f060     04 4E 85 F1 | 	sub	fp, #4
0f064     40 00 80 FF 
0f068     A7 00 68 FC | 	wrlong	##32768, fp
0f06c     14 4E 85 F1 | 	sub	fp, #20
0f070     0C 00 90 FD | 	jmp	#LR__1251
0f074                 | LR__1250
0f074     18 4E 05 F1 | 	add	fp, #24
0f078     A7 02 68 FC | 	wrlong	#1, fp
0f07c     18 4E 85 F1 | 	sub	fp, #24
0f080                 | LR__1251
0f080     28 4E 05 F1 | 	add	fp, #40
0f084     A7 14 02 FB | 	rdlong	arg02, fp
0f088     28 4E 85 F1 | 	sub	fp, #40
0f08c     AA 2B 25 FF 
0f090     00 13 06 F6 | 	mov	arg01, ##1247237376
0f094     FC C0 B1 FD | 	call	#__system___float_div
0f098     FD 26 02 F6 | 	mov	local01, result1
0f09c     18 4E 05 F1 | 	add	fp, #24
0f0a0     A7 12 02 FB | 	rdlong	arg01, fp
0f0a4     18 4E 85 F1 | 	sub	fp, #24
0f0a8     09 13 52 F6 | 	abs	arg01, arg01 wc
0f0ac     1F 28 C6 C9 |  if_b	decod	local02, #31
0f0b0     00 28 06 36 |  if_ae	mov	local02, #0
0f0b4     D4 BA B1 FD | 	call	#__system___float_fromuns
0f0b8     14 FB 61 F5 | 	xor	result1, local02
0f0bc     FD 2A 02 F6 | 	mov	local03, result1
0f0c0     1E 2C C6 F9 | 	decod	local04, #30
0f0c4     12 12 06 F6 | 	mov	arg01, #18
0f0c8     20 4E 05 F1 | 	add	fp, #32
0f0cc     A7 14 02 FB | 	rdlong	arg02, fp
0f0d0     0A 13 82 F1 | 	sub	arg01, arg02
0f0d4     10 4E 85 F1 | 	sub	fp, #16
0f0d8     A7 14 02 FB | 	rdlong	arg02, fp
0f0dc     10 4E 85 F1 | 	sub	fp, #16
0f0e0     0A 13 82 F1 | 	sub	arg01, arg02
0f0e4     09 13 52 F6 | 	abs	arg01, arg01 wc
0f0e8     1F 28 C6 C9 |  if_b	decod	local02, #31
0f0ec     00 28 06 36 |  if_ae	mov	local02, #0
0f0f0     98 BA B1 FD | 	call	#__system___float_fromuns
0f0f4     14 FB 61 F5 | 	xor	result1, local02
0f0f8     FD 14 02 F6 | 	mov	arg02, result1
0f0fc     16 13 02 F6 | 	mov	arg01, local04
0f100     98 CD B1 FD | 	call	#__system____builtin_powf
0f104     FD 14 02 F6 | 	mov	arg02, result1
0f108     15 13 02 F6 | 	mov	arg01, local03
0f10c     80 BE B1 FD | 	call	#__system___float_mul
0f110     FD 14 02 F6 | 	mov	arg02, result1
0f114     13 13 02 F6 | 	mov	arg01, local01
0f118     78 C0 B1 FD | 	call	#__system___float_div
0f11c     FD 12 02 F6 | 	mov	arg01, result1
0f120     01 14 06 F6 | 	mov	arg02, #1
0f124     30 C3 B1 FD | 	call	#__system___float_tointeger
0f128     1C 4E 05 F1 | 	add	fp, #28
0f12c     A7 FA 61 FC | 	wrlong	result1, fp
0f130     10 4E 85 F1 | 	sub	fp, #16
0f134     A7 2C 02 FB | 	rdlong	local04, fp
0f138     16 2B 02 F6 | 	mov	local03, local04
0f13c     03 2A 66 F0 | 	shl	local03, #3
0f140     16 2B 82 F1 | 	sub	local03, local04
0f144     02 2A 66 F0 | 	shl	local03, #2
0f148     14 00 00 FF 
0f14c     38 E5 05 F1 | 	add	objptr, ##10552
0f150     F2 2A 02 F1 | 	add	local03, objptr
0f154     AA 2B 25 FF 
0f158     00 2D 06 F6 | 	mov	local04, ##1247237376
0f15c     0C 4E 85 F1 | 	sub	fp, #12
0f160     14 00 00 FF 
0f164     38 E5 85 F1 | 	sub	objptr, ##10552
0f168     FD 12 52 F6 | 	abs	arg01, result1 wc
0f16c     1F 28 C6 C9 |  if_b	decod	local02, #31
0f170     00 28 06 36 |  if_ae	mov	local02, #0
0f174     14 BA B1 FD | 	call	#__system___float_fromuns
0f178     14 FB 61 F5 | 	xor	result1, local02
0f17c     FD 14 02 F6 | 	mov	arg02, result1
0f180     16 13 02 F6 | 	mov	arg01, local04
0f184     0C C0 B1 FD | 	call	#__system___float_div
0f188     FD 2C 02 F6 | 	mov	local04, result1
0f18c     14 4E 05 F1 | 	add	fp, #20
0f190     A7 12 02 FB | 	rdlong	arg01, fp
0f194     14 4E 85 F1 | 	sub	fp, #20
0f198     09 13 52 F6 | 	abs	arg01, arg01 wc
0f19c     1F 28 C6 C9 |  if_b	decod	local02, #31
0f1a0     00 28 06 36 |  if_ae	mov	local02, #0
0f1a4     E4 B9 B1 FD | 	call	#__system___float_fromuns
0f1a8     14 FB 61 F5 | 	xor	result1, local02
0f1ac     FD 12 02 F6 | 	mov	arg01, result1
0f1b0     00 40 24 FF 
0f1b4     00 14 06 F6 | 	mov	arg02, ##1216348160
0f1b8     D8 BF B1 FD | 	call	#__system___float_div
0f1bc     FD 14 02 F6 | 	mov	arg02, result1
0f1c0     16 13 02 F6 | 	mov	arg01, local04
0f1c4     C8 BD B1 FD | 	call	#__system___float_mul
0f1c8     18 2A 06 F1 | 	add	local03, #24
0f1cc     15 FB 61 FC | 	wrlong	result1, local03
0f1d0     F0 00 90 FD | 	jmp	#LR__1253
0f1d4                 | LR__1252
0f1d4     1C 4E 05 F1 | 	add	fp, #28
0f1d8     A7 30 68 FC | 	wrlong	#24, fp
0f1dc     00 40 24 FF 
0f1e0     00 26 06 F6 | 	mov	local01, ##1216348160
0f1e4     0C 4E 05 F1 | 	add	fp, #12
0f1e8     A7 12 02 FB | 	rdlong	arg01, fp
0f1ec     28 4E 85 F1 | 	sub	fp, #40
0f1f0     C7 07 24 FF 
0f1f4     00 14 06 F6 | 	mov	arg02, ##1208978944
0f1f8     98 BF B1 FD | 	call	#__system___float_div
0f1fc     FD 14 02 F6 | 	mov	arg02, result1
0f200     13 13 02 F6 | 	mov	arg01, local01
0f204     88 BD B1 FD | 	call	#__system___float_mul
0f208     FD 12 02 F6 | 	mov	arg01, result1
0f20c     01 14 06 F6 | 	mov	arg02, #1
0f210     44 C2 B1 FD | 	call	#__system___float_tointeger
0f214     14 4E 05 F1 | 	add	fp, #20
0f218     A7 FA 61 FC | 	wrlong	result1, fp
0f21c     08 4E 85 F1 | 	sub	fp, #8
0f220     A7 2C 02 FB | 	rdlong	local04, fp
0f224     16 2B 02 F6 | 	mov	local03, local04
0f228     03 2A 66 F0 | 	shl	local03, #3
0f22c     16 2B 82 F1 | 	sub	local03, local04
0f230     02 2A 66 F0 | 	shl	local03, #2
0f234     14 00 00 FF 
0f238     38 E5 05 F1 | 	add	objptr, ##10552
0f23c     F2 2A 02 F1 | 	add	local03, objptr
0f240     AA 2B 25 FF 
0f244     00 2D 06 F6 | 	mov	local04, ##1247237376
0f248     10 4E 05 F1 | 	add	fp, #16
0f24c     A7 12 02 FB | 	rdlong	arg01, fp
0f250     1C 4E 85 F1 | 	sub	fp, #28
0f254     14 00 00 FF 
0f258     38 E5 85 F1 | 	sub	objptr, ##10552
0f25c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f260     1F 28 C6 C9 |  if_b	decod	local02, #31
0f264     00 28 06 36 |  if_ae	mov	local02, #0
0f268     20 B9 B1 FD | 	call	#__system___float_fromuns
0f26c     14 FB 61 F5 | 	xor	result1, local02
0f270     FD 14 02 F6 | 	mov	arg02, result1
0f274     16 13 02 F6 | 	mov	arg01, local04
0f278     18 BF B1 FD | 	call	#__system___float_div
0f27c     FD 2C 02 F6 | 	mov	local04, result1
0f280     14 4E 05 F1 | 	add	fp, #20
0f284     A7 12 02 FB | 	rdlong	arg01, fp
0f288     14 4E 85 F1 | 	sub	fp, #20
0f28c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f290     1F 28 C6 C9 |  if_b	decod	local02, #31
0f294     00 28 06 36 |  if_ae	mov	local02, #0
0f298     F0 B8 B1 FD | 	call	#__system___float_fromuns
0f29c     14 FB 61 F5 | 	xor	result1, local02
0f2a0     FD 12 02 F6 | 	mov	arg01, result1
0f2a4     00 40 24 FF 
0f2a8     00 14 06 F6 | 	mov	arg02, ##1216348160
0f2ac     E4 BE B1 FD | 	call	#__system___float_div
0f2b0     FD 14 02 F6 | 	mov	arg02, result1
0f2b4     16 13 02 F6 | 	mov	arg01, local04
0f2b8     D4 BC B1 FD | 	call	#__system___float_mul
0f2bc     18 2A 06 F1 | 	add	local03, #24
0f2c0     15 FB 61 FC | 	wrlong	result1, local03
0f2c4                 | LR__1253
0f2c4     14 4E 05 F1 | 	add	fp, #20
0f2c8     A7 26 02 FB | 	rdlong	local01, fp
0f2cc     10 26 66 F0 | 	shl	local01, #16
0f2d0     08 4E 05 F1 | 	add	fp, #8
0f2d4     A7 2C 02 FB | 	rdlong	local04, fp
0f2d8     16 27 02 F1 | 	add	local01, local04
0f2dc     08 4E 05 F1 | 	add	fp, #8
0f2e0     A7 26 62 FC | 	wrlong	local01, fp
0f2e4                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0f2e4     37 00 00 FF 
0f2e8     30 E4 05 F1 | 	add	objptr, ##28208
0f2ec     F2 12 02 FB | 	rdlong	arg01, objptr
0f2f0     37 00 00 FF 
0f2f4     30 E4 85 F1 | 	sub	objptr, ##28208
0f2f8     18 4E 85 F1 | 	sub	fp, #24
0f2fc     A7 2C 02 FB | 	rdlong	local04, fp
0f300     0C 4E 85 F1 | 	sub	fp, #12
0f304     06 2C 66 F0 | 	shl	local04, #6
0f308     16 13 02 F1 | 	add	arg01, local04
0f30c     08 12 06 F1 | 	add	arg01, #8
0f310     09 FB 01 FB | 	rdlong	result1, arg01
0f314     1B FA 2D F4 | 	testbn	result1, #27 wz
0f318     3C 00 90 5D |  if_ne	jmp	#LR__1254
0f31c     37 00 00 FF 
0f320     30 E4 05 F1 | 	add	objptr, ##28208
0f324     F2 12 02 FB | 	rdlong	arg01, objptr
0f328     37 00 00 FF 
0f32c     30 E4 85 F1 | 	sub	objptr, ##28208
0f330     0C 4E 05 F1 | 	add	fp, #12
0f334     A7 2C 02 FB | 	rdlong	local04, fp
0f338     06 2C 66 F0 | 	shl	local04, #6
0f33c     16 13 02 F1 | 	add	arg01, local04
0f340     18 12 06 F1 | 	add	arg01, #24
0f344     18 4E 05 F1 | 	add	fp, #24
0f348     A7 14 02 FB | 	rdlong	arg02, fp
0f34c     24 4E 85 F1 | 	sub	fp, #36
0f350     09 15 62 FC | 	wrlong	arg02, arg01
0f354     80 00 90 FD | 	jmp	#LR__1255
0f358                 | LR__1254
0f358     37 00 00 FF 
0f35c     30 E4 05 F1 | 	add	objptr, ##28208
0f360     F2 26 02 FB | 	rdlong	local01, objptr
0f364     37 00 00 FF 
0f368     30 E4 85 F1 | 	sub	objptr, ##28208
0f36c     0C 4E 05 F1 | 	add	fp, #12
0f370     A7 2C 02 FB | 	rdlong	local04, fp
0f374     06 2C 66 F0 | 	shl	local04, #6
0f378     16 27 02 F1 | 	add	local01, local04
0f37c     18 26 06 F1 | 	add	local01, #24
0f380     1C 4E 05 F1 | 	add	fp, #28
0f384     A7 14 02 FB | 	rdlong	arg02, fp
0f388     28 4E 85 F1 | 	sub	fp, #40
0f38c     3E 2C 25 FF 
0f390     3C 12 06 F6 | 	mov	arg01, ##1247312956
0f394     FC BD B1 FD | 	call	#__system___float_div
0f398     FD 12 02 F6 | 	mov	arg01, result1
0f39c     01 14 06 F6 | 	mov	arg02, #1
0f3a0     B4 C0 B1 FD | 	call	#__system___float_tointeger
0f3a4     13 FB 51 FC | 	wrword	result1, local01
0f3a8     37 00 00 FF 
0f3ac     30 E4 05 F1 | 	add	objptr, ##28208
0f3b0     F2 12 02 FB | 	rdlong	arg01, objptr
0f3b4     37 00 00 FF 
0f3b8     30 E4 85 F1 | 	sub	objptr, ##28208
0f3bc     0C 4E 05 F1 | 	add	fp, #12
0f3c0     A7 2C 02 FB | 	rdlong	local04, fp
0f3c4     0C 4E 85 F1 | 	sub	fp, #12
0f3c8     06 2C 66 F0 | 	shl	local04, #6
0f3cc     16 13 02 F1 | 	add	arg01, local04
0f3d0     1A 12 06 F1 | 	add	arg01, #26
0f3d4     09 01 5A FC | 	wrword	#256, arg01
0f3d8                 | LR__1255
0f3d8     A7 F0 03 F6 | 	mov	ptra, fp
0f3dc     B2 00 A0 FD | 	call	#popregs_
0f3e0                 | _do_changefreq_ret
0f3e0     2D 00 64 FD | 	ret
0f3e4                 | 
0f3e4                 | ' 
0f3e4                 | ' '-------------------- changepan
0f3e4                 | ' 
0f3e4                 | ' sub do_changepan
0f3e4                 | _do_changepan
0f3e4     01 4A 05 F6 | 	mov	COUNT_, #1
0f3e8     A8 00 A0 FD | 	call	#pushregs_
0f3ec     14 F0 07 F1 | 	add	ptra, #20
0f3f0     2C E4 BF FD | 	call	#_pop
0f3f4     A7 FA 61 FC | 	wrlong	result1, fp
0f3f8     04 4E 05 F1 | 	add	fp, #4
0f3fc     A7 FC 61 FC | 	wrlong	result2, fp
0f400     04 4E 05 F1 | 	add	fp, #4
0f404     A7 FE 61 FC | 	wrlong	result3, fp
0f408     08 4E 85 F1 | 	sub	fp, #8
0f40c     00 00 23 FF 
0f410     00 26 06 F6 | 	mov	local01, ##1174405120
0f414     A7 12 02 F6 | 	mov	arg01, fp
0f418     A4 E6 BF FD | 	call	#_converttofloat
0f41c     FD 14 02 F6 | 	mov	arg02, result1
0f420     13 13 02 F6 | 	mov	arg01, local01
0f424     68 BB B1 FD | 	call	#__system___float_mul
0f428     FD 12 02 F6 | 	mov	arg01, result1
0f42c     01 14 06 F6 | 	mov	arg02, #1
0f430     24 C0 B1 FD | 	call	#__system___float_tointeger
0f434     0D 26 C6 F9 | 	decod	local01, #13
0f438     FD 26 02 F1 | 	add	local01, result1
0f43c     10 4E 05 F1 | 	add	fp, #16
0f440     A7 26 62 FC | 	wrlong	local01, fp
0f444                 | ' 
0f444                 | ' t1=pop()
0f444                 | ' pan=8192+round(8192*converttofloat(t1)) 
0f444                 | ' if pan<0 then pan=0
0f444     10 4E 85 F1 | 	sub	fp, #16
0f448     00 26 56 F2 | 	cmps	local01, #0 wc
0f44c     10 4E 05 C1 |  if_b	add	fp, #16
0f450     A7 00 68 CC |  if_b	wrlong	#0, fp
0f454     10 4E 85 C1 |  if_b	sub	fp, #16
0f458                 | ' if pan>16384 then pan=16384
0f458     10 4E 05 F1 | 	add	fp, #16
0f45c     A7 26 02 FB | 	rdlong	local01, fp
0f460     10 4E 85 F1 | 	sub	fp, #16
0f464     20 00 00 FF 
0f468     01 26 56 F2 | 	cmps	local01, ##16385 wc
0f46c     10 4E 05 31 |  if_ae	add	fp, #16
0f470     20 00 80 3F 
0f474     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0f478     10 4E 85 31 |  if_ae	sub	fp, #16
0f47c     A0 E3 BF FD | 	call	#_pop
0f480     FF 26 02 F6 | 	mov	local01, result3
0f484     A7 FA 61 FC | 	wrlong	result1, fp
0f488     04 4E 05 F1 | 	add	fp, #4
0f48c     A7 FC 61 FC | 	wrlong	result2, fp
0f490     04 4E 05 F1 | 	add	fp, #4
0f494     A7 26 62 FC | 	wrlong	local01, fp
0f498     08 4E 85 F1 | 	sub	fp, #8
0f49c     A7 12 02 F6 | 	mov	arg01, fp
0f4a0     60 E5 BF FD | 	call	#_converttoint
0f4a4     FD 26 52 F6 | 	abs	local01, result1 wc
0f4a8     07 26 06 F5 | 	and	local01, #7
0f4ac     13 27 82 F6 | 	negc	local01, local01
0f4b0     0C 4E 05 F1 | 	add	fp, #12
0f4b4     A7 26 62 FC | 	wrlong	local01, fp
0f4b8     37 00 00 FF 
0f4bc     30 E4 05 F1 | 	add	objptr, ##28208
0f4c0     F2 12 02 FB | 	rdlong	arg01, objptr
0f4c4     37 00 00 FF 
0f4c8     30 E4 85 F1 | 	sub	objptr, ##28208
0f4cc     06 26 66 F0 | 	shl	local01, #6
0f4d0     13 13 02 F1 | 	add	arg01, local01
0f4d4     16 12 06 F1 | 	add	arg01, #22
0f4d8     04 4E 05 F1 | 	add	fp, #4
0f4dc     A7 14 02 FB | 	rdlong	arg02, fp
0f4e0     10 4E 85 F1 | 	sub	fp, #16
0f4e4     09 15 52 FC | 	wrword	arg02, arg01
0f4e8     A7 F0 03 F6 | 	mov	ptra, fp
0f4ec     B2 00 A0 FD | 	call	#popregs_
0f4f0                 | _do_changepan_ret
0f4f0     2D 00 64 FD | 	ret
0f4f4                 | 
0f4f4                 | ' 
0f4f4                 | ' '-------------------- changevol
0f4f4                 | ' 
0f4f4                 | ' sub do_changevol
0f4f4                 | _do_changevol
0f4f4     00 4A 05 F6 | 	mov	COUNT_, #0
0f4f8     A8 00 A0 FD | 	call	#pushregs_
0f4fc     14 F0 07 F1 | 	add	ptra, #20
0f500     1C E3 BF FD | 	call	#_pop
0f504     FF 14 02 F6 | 	mov	arg02, result3
0f508     A7 FA 61 FC | 	wrlong	result1, fp
0f50c     04 4E 05 F1 | 	add	fp, #4
0f510     A7 FC 61 FC | 	wrlong	result2, fp
0f514     04 4E 05 F1 | 	add	fp, #4
0f518     A7 14 62 FC | 	wrlong	arg02, fp
0f51c     08 4E 85 F1 | 	sub	fp, #8
0f520     A7 12 02 F6 | 	mov	arg01, fp
0f524     98 E5 BF FD | 	call	#_converttofloat
0f528     FD 12 02 F6 | 	mov	arg01, result1
0f52c     00 3D 22 FF 
0f530     00 14 06 F6 | 	mov	arg02, ##1148846080
0f534     58 BA B1 FD | 	call	#__system___float_mul
0f538     FD 12 02 F6 | 	mov	arg01, result1
0f53c     01 14 06 F6 | 	mov	arg02, #1
0f540     14 BF B1 FD | 	call	#__system___float_tointeger
0f544     FD 14 52 F6 | 	abs	arg02, result1 wc
0f548     0D 14 46 F7 | 	zerox	arg02, #13
0f54c     0A 15 82 F6 | 	negc	arg02, arg02
0f550     10 4E 05 F1 | 	add	fp, #16
0f554     A7 14 62 FC | 	wrlong	arg02, fp
0f558     10 4E 85 F1 | 	sub	fp, #16
0f55c     C0 E2 BF FD | 	call	#_pop
0f560     FF 14 02 F6 | 	mov	arg02, result3
0f564     A7 FA 61 FC | 	wrlong	result1, fp
0f568     04 4E 05 F1 | 	add	fp, #4
0f56c     A7 FC 61 FC | 	wrlong	result2, fp
0f570     04 4E 05 F1 | 	add	fp, #4
0f574     A7 14 62 FC | 	wrlong	arg02, fp
0f578     08 4E 85 F1 | 	sub	fp, #8
0f57c     A7 12 02 F6 | 	mov	arg01, fp
0f580     80 E4 BF FD | 	call	#_converttoint
0f584     FD 14 52 F6 | 	abs	arg02, result1 wc
0f588     07 14 06 F5 | 	and	arg02, #7
0f58c     0A 15 82 F6 | 	negc	arg02, arg02
0f590     0C 4E 05 F1 | 	add	fp, #12
0f594     A7 14 62 FC | 	wrlong	arg02, fp
0f598     37 00 00 FF 
0f59c     30 E4 05 F1 | 	add	objptr, ##28208
0f5a0     F2 12 02 FB | 	rdlong	arg01, objptr
0f5a4     37 00 00 FF 
0f5a8     30 E4 85 F1 | 	sub	objptr, ##28208
0f5ac     06 14 66 F0 | 	shl	arg02, #6
0f5b0     0A 13 02 F1 | 	add	arg01, arg02
0f5b4     14 12 06 F1 | 	add	arg01, #20
0f5b8     04 4E 05 F1 | 	add	fp, #4
0f5bc     A7 14 02 FB | 	rdlong	arg02, fp
0f5c0     10 4E 85 F1 | 	sub	fp, #16
0f5c4     09 15 52 FC | 	wrword	arg02, arg01
0f5c8     A7 F0 03 F6 | 	mov	ptra, fp
0f5cc     B2 00 A0 FD | 	call	#popregs_
0f5d0                 | _do_changevol_ret
0f5d0     2D 00 64 FD | 	ret
0f5d4                 | 
0f5d4                 | ' 
0f5d4                 | ' '-------------------- changewav
0f5d4                 | ' 
0f5d4                 | ' sub do_changewav
0f5d4                 | _do_changewav
0f5d4     00 4A 05 F6 | 	mov	COUNT_, #0
0f5d8     A8 00 A0 FD | 	call	#pushregs_
0f5dc     14 F0 07 F1 | 	add	ptra, #20
0f5e0     3C E2 BF FD | 	call	#_pop
0f5e4     FF 14 02 F6 | 	mov	arg02, result3
0f5e8     A7 FA 61 FC | 	wrlong	result1, fp
0f5ec     04 4E 05 F1 | 	add	fp, #4
0f5f0     A7 FC 61 FC | 	wrlong	result2, fp
0f5f4     04 4E 05 F1 | 	add	fp, #4
0f5f8     A7 14 62 FC | 	wrlong	arg02, fp
0f5fc     08 4E 85 F1 | 	sub	fp, #8
0f600     A7 12 02 F6 | 	mov	arg01, fp
0f604     FC E3 BF FD | 	call	#_converttoint
0f608     10 4E 05 F1 | 	add	fp, #16
0f60c     A7 FA 61 FC | 	wrlong	result1, fp
0f610                 | ' 
0f610                 | ' t1=pop()
0f610                 | ' wave=converttoint(t1)
0f610                 | ' if wave<0 then wave=0
0f610     FD 14 02 F6 | 	mov	arg02, result1
0f614     10 4E 85 F1 | 	sub	fp, #16
0f618     00 14 56 F2 | 	cmps	arg02, #0 wc
0f61c     10 4E 05 C1 |  if_b	add	fp, #16
0f620     A7 00 68 CC |  if_b	wrlong	#0, fp
0f624     10 4E 85 C1 |  if_b	sub	fp, #16
0f628     F4 E1 BF FD | 	call	#_pop
0f62c     FF 14 02 F6 | 	mov	arg02, result3
0f630     A7 FA 61 FC | 	wrlong	result1, fp
0f634     04 4E 05 F1 | 	add	fp, #4
0f638     A7 FC 61 FC | 	wrlong	result2, fp
0f63c     04 4E 05 F1 | 	add	fp, #4
0f640     A7 14 62 FC | 	wrlong	arg02, fp
0f644     08 4E 85 F1 | 	sub	fp, #8
0f648     A7 12 02 F6 | 	mov	arg01, fp
0f64c     B4 E3 BF FD | 	call	#_converttoint
0f650     FD 14 52 F6 | 	abs	arg02, result1 wc
0f654     07 14 06 F5 | 	and	arg02, #7
0f658     0A 15 82 F6 | 	negc	arg02, arg02
0f65c     0C 4E 05 F1 | 	add	fp, #12
0f660     A7 14 62 FC | 	wrlong	arg02, fp
0f664                 | ' if wave <32 then 
0f664     04 4E 05 F1 | 	add	fp, #4
0f668     A7 14 02 FB | 	rdlong	arg02, fp
0f66c     10 4E 85 F1 | 	sub	fp, #16
0f670     20 14 56 F2 | 	cmps	arg02, #32 wc
0f674     48 00 90 3D |  if_ae	jmp	#LR__1260
0f678     37 00 00 FF 
0f67c     30 E4 05 F1 | 	add	objptr, ##28208
0f680     F2 12 02 FB | 	rdlong	arg01, objptr
0f684     37 00 00 FF 
0f688     30 E4 85 F1 | 	sub	objptr, ##28208
0f68c     0C 4E 05 F1 | 	add	fp, #12
0f690     A7 14 02 FB | 	rdlong	arg02, fp
0f694     06 14 66 F0 | 	shl	arg02, #6
0f698     0A 13 02 F1 | 	add	arg01, arg02
0f69c     08 12 06 F1 | 	add	arg01, #8
0f6a0     04 4E 05 F1 | 	add	fp, #4
0f6a4     A7 14 02 FB | 	rdlong	arg02, fp
0f6a8     10 4E 85 F1 | 	sub	fp, #16
0f6ac     0B 14 66 F0 | 	shl	arg02, #11
0f6b0     00 00 40 FF 
0f6b4     00 14 06 F1 | 	add	arg02, ##-2147483648
0f6b8     09 15 62 FC | 	wrlong	arg02, arg01
0f6bc     34 00 90 FD | 	jmp	#LR__1261
0f6c0                 | LR__1260
0f6c0     37 00 00 FF 
0f6c4     30 E4 05 F1 | 	add	objptr, ##28208
0f6c8     F2 12 02 FB | 	rdlong	arg01, objptr
0f6cc     37 00 00 FF 
0f6d0     30 E4 85 F1 | 	sub	objptr, ##28208
0f6d4     0C 4E 05 F1 | 	add	fp, #12
0f6d8     A7 14 02 FB | 	rdlong	arg02, fp
0f6dc     0C 4E 85 F1 | 	sub	fp, #12
0f6e0     06 14 66 F0 | 	shl	arg02, #6
0f6e4     0A 13 02 F1 | 	add	arg01, arg02
0f6e8     08 12 06 F1 | 	add	arg01, #8
0f6ec     00 00 C4 FF 
0f6f0     09 01 68 FC | 	wrlong	##-2013265920, arg01
0f6f4                 | LR__1261
0f6f4     A7 F0 03 F6 | 	mov	ptra, fp
0f6f8     B2 00 A0 FD | 	call	#popregs_
0f6fc                 | _do_changewav_ret
0f6fc     2D 00 64 FD | 	ret
0f700                 | 
0f700                 | ' 
0f700                 | ' '-------------------- chr$
0f700                 | ' 
0f700                 | ' sub do_chr
0f700                 | _do_chr
0f700     01 4A 05 F6 | 	mov	COUNT_, #1
0f704     A8 00 A0 FD | 	call	#pushregs_
0f708     14 F0 07 F1 | 	add	ptra, #20
0f70c     4A 00 00 FF 
0f710     A0 E4 05 F1 | 	add	objptr, ##38048
0f714     F2 26 02 FB | 	rdlong	local01, objptr
0f718     13 17 02 F6 | 	mov	arg03, local01
0f71c     01 16 66 F0 | 	shl	arg03, #1
0f720     13 17 02 F1 | 	add	arg03, local01
0f724     02 16 66 F0 | 	shl	arg03, #2
0f728     03 00 00 FF 
0f72c     04 E4 85 F1 | 	sub	objptr, ##1540
0f730     F2 16 02 F1 | 	add	arg03, objptr
0f734     0B 17 02 FB | 	rdlong	arg03, arg03
0f738     0C 4E 05 F1 | 	add	fp, #12
0f73c     A7 16 62 FC | 	wrlong	arg03, fp
0f740                 | ' 
0f740                 | ' numpar=compiledline(lineptr_e).result.uresult
0f740                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f740     0C 4E 85 F1 | 	sub	fp, #12
0f744     02 16 16 F2 | 	cmp	arg03, #2 wc
0f748     47 00 00 FF 
0f74c     9C E4 85 F1 | 	sub	objptr, ##36508
0f750     0C 4E 05 C1 |  if_b	add	fp, #12
0f754     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f758     0C 4E 85 C1 |  if_b	sub	fp, #12
0f75c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1270
0f760     00 12 06 F6 | 	mov	arg01, #0
0f764     5C E6 B1 FD | 	call	#__system___getiolock_0620
0f768     FD 12 02 F6 | 	mov	arg01, result1
0f76c     A4 89 B1 FD | 	call	#__system___lockmem
0f770     C2 01 00 FF 
0f774     DA 14 06 F6 | 	mov	arg02, ##@LR__6017
0f778     00 12 06 F6 | 	mov	arg01, #0
0f77c     00 16 06 F6 | 	mov	arg03, #0
0f780     88 96 B1 FD | 	call	#__system___basic_print_string
0f784     00 12 06 F6 | 	mov	arg01, #0
0f788     38 E6 B1 FD | 	call	#__system___getiolock_0620
0f78c     FD 00 68 FC | 	wrlong	#0, result1
0f790     27 12 06 F6 | 	mov	arg01, #39
0f794     00 14 06 F6 | 	mov	arg02, #0
0f798     20 4F B1 FD | 	call	#_printerror
0f79c     54 00 90 FD | 	jmp	#LR__1271
0f7a0                 | LR__1270
0f7a0     7C E0 BF FD | 	call	#_pop
0f7a4     FF 26 02 F6 | 	mov	local01, result3
0f7a8     A7 FA 61 FC | 	wrlong	result1, fp
0f7ac     04 4E 05 F1 | 	add	fp, #4
0f7b0     A7 FC 61 FC | 	wrlong	result2, fp
0f7b4     04 4E 05 F1 | 	add	fp, #4
0f7b8     A7 26 62 FC | 	wrlong	local01, fp
0f7bc     08 4E 85 F1 | 	sub	fp, #8
0f7c0     A7 12 02 F6 | 	mov	arg01, fp
0f7c4     3C E2 BF FD | 	call	#_converttoint
0f7c8     10 4E 05 F1 | 	add	fp, #16
0f7cc     A7 FA 61 FC | 	wrlong	result1, fp
0f7d0     FD 12 02 F6 | 	mov	arg01, result1
0f7d4     10 4E 85 F1 | 	sub	fp, #16
0f7d8     7C AB B1 FD | 	call	#__system__Chr_S
0f7dc     A7 FA 61 FC | 	wrlong	result1, fp
0f7e0     08 4E 05 F1 | 	add	fp, #8
0f7e4     A7 3E 68 FC | 	wrlong	#31, fp
0f7e8     08 4E 85 F1 | 	sub	fp, #8
0f7ec     A7 12 02 F6 | 	mov	arg01, fp
0f7f0     C4 E0 BF FD | 	call	#_push
0f7f4                 | LR__1271
0f7f4     A7 F0 03 F6 | 	mov	ptra, fp
0f7f8     B2 00 A0 FD | 	call	#popregs_
0f7fc                 | _do_chr_ret
0f7fc     2D 00 64 FD | 	ret
0f800                 | 
0f800                 | ' 
0f800                 | ' '-------------------- circle
0f800                 | ' 
0f800                 | ' sub do_circle
0f800                 | _do_circle
0f800     02 4A 05 F6 | 	mov	COUNT_, #2
0f804     A8 00 A0 FD | 	call	#pushregs_
0f808     24 F0 07 F1 | 	add	ptra, #36
0f80c     10 E0 BF FD | 	call	#_pop
0f810     FD 18 02 F6 | 	mov	arg04, result1
0f814     FE 16 02 F6 | 	mov	arg03, result2
0f818     FF 14 02 F6 | 	mov	arg02, result3
0f81c     18 4E 05 F1 | 	add	fp, #24
0f820     A7 18 62 FC | 	wrlong	arg04, fp
0f824     04 4E 05 F1 | 	add	fp, #4
0f828     A7 16 62 FC | 	wrlong	arg03, fp
0f82c     04 4E 05 F1 | 	add	fp, #4
0f830     A7 14 62 FC | 	wrlong	arg02, fp
0f834     20 4E 85 F1 | 	sub	fp, #32
0f838     E4 DF BF FD | 	call	#_pop
0f83c     FD 18 02 F6 | 	mov	arg04, result1
0f840     FE 16 02 F6 | 	mov	arg03, result2
0f844     FF 26 02 F6 | 	mov	local01, result3
0f848     0C 4E 05 F1 | 	add	fp, #12
0f84c     A7 18 62 FC | 	wrlong	arg04, fp
0f850     04 4E 05 F1 | 	add	fp, #4
0f854     A7 16 62 FC | 	wrlong	arg03, fp
0f858     04 4E 05 F1 | 	add	fp, #4
0f85c     A7 26 62 FC | 	wrlong	local01, fp
0f860     14 4E 85 F1 | 	sub	fp, #20
0f864     B8 DF BF FD | 	call	#_pop
0f868     A7 FA 61 FC | 	wrlong	result1, fp
0f86c     04 4E 05 F1 | 	add	fp, #4
0f870     A7 FC 61 FC | 	wrlong	result2, fp
0f874     04 4E 05 F1 | 	add	fp, #4
0f878     A7 FE 61 FC | 	wrlong	result3, fp
0f87c                 | ' 
0f87c                 | ' t3=pop()
0f87c                 | ' t2=pop()
0f87c                 | ' t1=pop()
0f87c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f87c     FF 18 02 F6 | 	mov	arg04, result3
0f880     08 4E 85 F1 | 	sub	fp, #8
0f884     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f888     08 4E 05 51 |  if_ne	add	fp, #8
0f88c     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f890     08 4E 85 51 |  if_ne	sub	fp, #8
0f894     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0f898     7C 00 90 5D |  if_ne	jmp	#LR__1280
0f89c     14 4E 05 F1 | 	add	fp, #20
0f8a0     A7 26 02 FB | 	rdlong	local01, fp
0f8a4     14 4E 85 F1 | 	sub	fp, #20
0f8a8     1C 26 0E F2 | 	cmp	local01, #28 wz
0f8ac     14 4E 05 51 |  if_ne	add	fp, #20
0f8b0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f8b4     14 4E 85 51 |  if_ne	sub	fp, #20
0f8b8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f8bc     58 00 90 5D |  if_ne	jmp	#LR__1280
0f8c0     20 4E 05 F1 | 	add	fp, #32
0f8c4     A7 26 02 FB | 	rdlong	local01, fp
0f8c8     20 4E 85 F1 | 	sub	fp, #32
0f8cc     1C 26 0E F2 | 	cmp	local01, #28 wz
0f8d0     20 4E 05 51 |  if_ne	add	fp, #32
0f8d4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f8d8     20 4E 85 51 |  if_ne	sub	fp, #32
0f8dc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f8e0     34 00 90 5D |  if_ne	jmp	#LR__1280
0f8e4     A7 12 02 FB | 	rdlong	arg01, fp
0f8e8     0C 4E 05 F1 | 	add	fp, #12
0f8ec     A7 14 02 FB | 	rdlong	arg02, fp
0f8f0     0C 4E 05 F1 | 	add	fp, #12
0f8f4     A7 16 02 FB | 	rdlong	arg03, fp
0f8f8     18 4E 85 F1 | 	sub	fp, #24
0f8fc     37 00 00 FF 
0f900     48 E4 05 F1 | 	add	objptr, ##28232
0f904     F2 18 02 FB | 	rdlong	arg04, objptr
0f908     37 00 00 FF 
0f90c     48 E4 85 F1 | 	sub	objptr, ##28232
0f910     9C 66 B1 FD | 	call	#_hg010b_spin2_circle
0f914                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f914     54 00 90 FD | 	jmp	#LR__1281
0f918                 | LR__1280
0f918     A7 12 02 F6 | 	mov	arg01, fp
0f91c     E4 E0 BF FD | 	call	#_converttoint
0f920     FD 26 02 F6 | 	mov	local01, result1
0f924     0C 4E 05 F1 | 	add	fp, #12
0f928     A7 12 02 F6 | 	mov	arg01, fp
0f92c     0C 4E 85 F1 | 	sub	fp, #12
0f930     D0 E0 BF FD | 	call	#_converttoint
0f934     FD 28 02 F6 | 	mov	local02, result1
0f938     18 4E 05 F1 | 	add	fp, #24
0f93c     A7 12 02 F6 | 	mov	arg01, fp
0f940     18 4E 85 F1 | 	sub	fp, #24
0f944     BC E0 BF FD | 	call	#_converttoint
0f948     FD 16 02 F6 | 	mov	arg03, result1
0f94c     37 00 00 FF 
0f950     48 E4 05 F1 | 	add	objptr, ##28232
0f954     F2 18 02 FB | 	rdlong	arg04, objptr
0f958     37 00 00 FF 
0f95c     48 E4 85 F1 | 	sub	objptr, ##28232
0f960     13 13 02 F6 | 	mov	arg01, local01
0f964     14 15 02 F6 | 	mov	arg02, local02
0f968     44 66 B1 FD | 	call	#_hg010b_spin2_circle
0f96c                 | LR__1281
0f96c     A7 F0 03 F6 | 	mov	ptra, fp
0f970     B2 00 A0 FD | 	call	#popregs_
0f974                 | _do_circle_ret
0f974     2D 00 64 FD | 	ret
0f978                 | 
0f978                 | ' 
0f978                 | ' '-------------------- click
0f978                 | ' 
0f978                 | ' sub do_click
0f978                 | _do_click
0f978     A4 DE BF FD | 	call	#_pop
0f97c     00 FA 4D F2 | 	cmps	result1, #0 wz
0f980                 | ' 
0f980                 | ' t1=pop()
0f980                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f980     50 00 00 AF 
0f984     5C E5 05 A1 |  if_e	add	objptr, ##41308
0f988     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f98c     50 00 00 FF 
0f990     5C E5 C5 F3 | 	sumz	objptr, ##41308
0f994     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0f998     50 00 00 5F 
0f99c     5C E5 85 51 |  if_ne	sub	objptr, ##41308
0f9a0                 | _do_click_ret
0f9a0     2D 00 64 FD | 	ret
0f9a4                 | 
0f9a4                 | ' 
0f9a4                 | ' '-------------------- close
0f9a4                 | ' 
0f9a4                 | ' sub do_close
0f9a4                 | _do_close
0f9a4     03 4A 05 F6 | 	mov	COUNT_, #3
0f9a8     A8 00 A0 FD | 	call	#pushregs_
0f9ac     70 DE BF FD | 	call	#_pop
0f9b0     FD 26 02 F6 | 	mov	local01, result1
0f9b4     FF 16 02 F6 | 	mov	arg03, result3
0f9b8     FE 28 02 F6 | 	mov	local02, result2
0f9bc     0B 2B 02 F6 | 	mov	local03, arg03
0f9c0                 | ' 
0f9c0                 | ' numpar=compiledline(lineptr_e).result.uresult
0f9c0                 | ' t1=pop()
0f9c0                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f9c0     2C 2A 0E F2 | 	cmp	local03, #44 wz
0f9c4     44 00 90 AD |  if_e	jmp	#LR__1290
0f9c8     00 12 06 F6 | 	mov	arg01, #0
0f9cc     F4 E3 B1 FD | 	call	#__system___getiolock_0620
0f9d0     FD 12 02 F6 | 	mov	arg01, result1
0f9d4     3C 87 B1 FD | 	call	#__system___lockmem
0f9d8     C2 01 00 FF 
0f9dc     E1 14 06 F6 | 	mov	arg02, ##@LR__6018
0f9e0     00 12 06 F6 | 	mov	arg01, #0
0f9e4     00 16 06 F6 | 	mov	arg03, #0
0f9e8     20 94 B1 FD | 	call	#__system___basic_print_string
0f9ec     00 12 06 F6 | 	mov	arg01, #0
0f9f0     0A 14 06 F6 | 	mov	arg02, #10
0f9f4     00 16 06 F6 | 	mov	arg03, #0
0f9f8     B8 93 B1 FD | 	call	#__system___basic_print_char
0f9fc     00 12 06 F6 | 	mov	arg01, #0
0fa00     C0 E3 B1 FD | 	call	#__system___getiolock_0620
0fa04     FD 00 68 FC | 	wrlong	#0, result1
0fa08     08 00 90 FD | 	jmp	#LR__1291
0fa0c                 | LR__1290
0fa0c                 | ' channel  = t1.result.iresult
0fa0c                 | ' close #channel
0fa0c     13 13 02 F6 | 	mov	arg01, local01
0fa10     60 DA B1 FD | 	call	#__system__close
0fa14                 | LR__1291
0fa14     A7 F0 03 F6 | 	mov	ptra, fp
0fa18     B2 00 A0 FD | 	call	#popregs_
0fa1c                 | _do_close_ret
0fa1c     2D 00 64 FD | 	ret
0fa20                 | 
0fa20                 | ' 
0fa20                 | ' '-------------------- cls
0fa20                 | ' 
0fa20                 | ' sub do_cls
0fa20                 | _do_cls
0fa20     37 00 00 FF 
0fa24     5C E4 05 F1 | 	add	objptr, ##28252
0fa28     F2 12 02 FB | 	rdlong	arg01, objptr
0fa2c     04 E4 85 F1 | 	sub	objptr, #4
0fa30     F2 14 02 FB | 	rdlong	arg02, objptr
0fa34     37 00 00 FF 
0fa38     58 E4 85 F1 | 	sub	objptr, ##28248
0fa3c     78 6A B1 FD | 	call	#_hg010b_spin2_cls
0fa40     37 00 00 FF 
0fa44     5C E4 05 F1 | 	add	objptr, ##28252
0fa48     F2 14 02 FB | 	rdlong	arg02, objptr
0fa4c     14 E4 85 F1 | 	sub	objptr, #20
0fa50     F2 14 62 FC | 	wrlong	arg02, objptr
0fa54     37 00 00 FF 
0fa58     48 E4 85 F1 | 	sub	objptr, ##28232
0fa5c                 | _do_cls_ret
0fa5c     2D 00 64 FD | 	ret
0fa60                 | 
0fa60                 | ' 
0fa60                 | ' sub do_coginit
0fa60                 | _do_coginit
0fa60     00 4A 05 F6 | 	mov	COUNT_, #0
0fa64     A8 00 A0 FD | 	call	#pushregs_
0fa68     08 00 00 FF 
0fa6c     1C F0 07 F1 | 	add	ptra, ##4124
0fa70     4A 00 00 FF 
0fa74     A0 E4 05 F1 | 	add	objptr, ##38048
0fa78     F2 FA 01 FB | 	rdlong	result1, objptr
0fa7c     FD FC 01 F6 | 	mov	result2, result1
0fa80     01 FC 65 F0 | 	shl	result2, #1
0fa84     FD FC 01 F1 | 	add	result2, result1
0fa88     02 FC 65 F0 | 	shl	result2, #2
0fa8c     03 00 00 FF 
0fa90     04 E4 85 F1 | 	sub	objptr, ##1540
0fa94     F2 FC 01 F1 | 	add	result2, objptr
0fa98     FE FC 01 FB | 	rdlong	result2, result2
0fa9c     A7 FC 61 FC | 	wrlong	result2, fp
0faa0                 | ' numpar=compiledline(lineptr_e).result.uresult
0faa0                 | ' if numpar<2 orelse numpar>3 then print "coginit: "; : printerror(39) : return
0faa0     02 FC 55 F2 | 	cmps	result2, #2 wc
0faa4     47 00 00 FF 
0faa8     9C E4 85 F1 | 	sub	objptr, ##36508
0faac     0C 00 90 CD |  if_b	jmp	#LR__1300
0fab0     A7 FA 01 FB | 	rdlong	result1, fp
0fab4     04 FA 55 F2 | 	cmps	result1, #4 wc
0fab8     40 00 90 CD |  if_b	jmp	#LR__1301
0fabc                 | LR__1300
0fabc     00 12 06 F6 | 	mov	arg01, #0
0fac0     00 E3 B1 FD | 	call	#__system___getiolock_0620
0fac4     FD 12 02 F6 | 	mov	arg01, result1
0fac8     48 86 B1 FD | 	call	#__system___lockmem
0facc     C2 01 00 FF 
0fad0     F3 14 06 F6 | 	mov	arg02, ##@LR__6019
0fad4     00 12 06 F6 | 	mov	arg01, #0
0fad8     00 16 06 F6 | 	mov	arg03, #0
0fadc     2C 93 B1 FD | 	call	#__system___basic_print_string
0fae0     00 12 06 F6 | 	mov	arg01, #0
0fae4     DC E2 B1 FD | 	call	#__system___getiolock_0620
0fae8     FD 00 68 FC | 	wrlong	#0, result1
0faec     27 12 06 F6 | 	mov	arg01, #39
0faf0     00 14 06 F6 | 	mov	arg02, #0
0faf4     C4 4B B1 FD | 	call	#_printerror
0faf8     94 01 90 FD | 	jmp	#LR__1305
0fafc                 | LR__1301
0fafc     20 DD BF FD | 	call	#_pop
0fb00     FF 16 02 F6 | 	mov	arg03, result3
0fb04     08 00 00 FF 
0fb08     10 4E 05 F1 | 	add	fp, ##4112
0fb0c     A7 FA 61 FC | 	wrlong	result1, fp
0fb10     04 4E 05 F1 | 	add	fp, #4
0fb14     A7 FC 61 FC | 	wrlong	result2, fp
0fb18     04 4E 05 F1 | 	add	fp, #4
0fb1c     A7 16 62 FC | 	wrlong	arg03, fp
0fb20     08 4E 85 F1 | 	sub	fp, #8
0fb24     A7 12 02 F6 | 	mov	arg01, fp
0fb28     08 00 00 FF 
0fb2c     10 4E 85 F1 | 	sub	fp, ##4112
0fb30     D0 DE BF FD | 	call	#_converttoint
0fb34     FD 16 02 F6 | 	mov	arg03, result1
0fb38     04 4E 05 F1 | 	add	fp, #4
0fb3c     A7 16 62 FC | 	wrlong	arg03, fp
0fb40     04 4E 85 F1 | 	sub	fp, #4
0fb44     D8 DC BF FD | 	call	#_pop
0fb48     FF 16 02 F6 | 	mov	arg03, result3
0fb4c     08 00 00 FF 
0fb50     10 4E 05 F1 | 	add	fp, ##4112
0fb54     A7 FA 61 FC | 	wrlong	result1, fp
0fb58     04 4E 05 F1 | 	add	fp, #4
0fb5c     A7 FC 61 FC | 	wrlong	result2, fp
0fb60     04 4E 05 F1 | 	add	fp, #4
0fb64     A7 16 62 FC | 	wrlong	arg03, fp
0fb68     08 4E 85 F1 | 	sub	fp, #8
0fb6c     A7 12 02 F6 | 	mov	arg01, fp
0fb70     08 00 00 FF 
0fb74     10 4E 85 F1 | 	sub	fp, ##4112
0fb78     88 DE BF FD | 	call	#_converttoint
0fb7c     08 4E 05 F1 | 	add	fp, #8
0fb80     A7 FA 61 FC | 	wrlong	result1, fp
0fb84     08 4E 85 F1 | 	sub	fp, #8
0fb88                 | ' t1=pop()
0fb88                 | ' ptra_val=converttoint(t1)
0fb88                 | ' t1=pop()
0fb88                 | ' addrval=converttoint(t1)
0fb88                 | ' if numpar=3 then 
0fb88     A7 FA 01 FB | 	rdlong	result1, fp
0fb8c     03 FA 0D F2 | 	cmp	result1, #3 wz
0fb90     48 00 90 5D |  if_ne	jmp	#LR__1302
0fb94     88 DC BF FD | 	call	#_pop
0fb98     FF 16 02 F6 | 	mov	arg03, result3
0fb9c     08 00 00 FF 
0fba0     10 4E 05 F1 | 	add	fp, ##4112
0fba4     A7 FA 61 FC | 	wrlong	result1, fp
0fba8     04 4E 05 F1 | 	add	fp, #4
0fbac     A7 FC 61 FC | 	wrlong	result2, fp
0fbb0     04 4E 05 F1 | 	add	fp, #4
0fbb4     A7 16 62 FC | 	wrlong	arg03, fp
0fbb8     08 4E 85 F1 | 	sub	fp, #8
0fbbc     A7 12 02 F6 | 	mov	arg01, fp
0fbc0     08 00 00 FF 
0fbc4     10 4E 85 F1 | 	sub	fp, ##4112
0fbc8     38 DE BF FD | 	call	#_converttoint
0fbcc     0C 4E 05 F1 | 	add	fp, #12
0fbd0     A7 FA 61 FC | 	wrlong	result1, fp
0fbd4     0C 4E 85 F1 | 	sub	fp, #12
0fbd8     0C 00 90 FD | 	jmp	#LR__1303
0fbdc                 | LR__1302
0fbdc     0C 4E 05 F1 | 	add	fp, #12
0fbe0     A7 20 68 FC | 	wrlong	#16, fp
0fbe4     0C 4E 85 F1 | 	sub	fp, #12
0fbe8                 | LR__1303
0fbe8                 | '     
0fbe8                 | ' if addrval>$80000 then psram.read1(varptr(tempbuf(0)),addrval,4096) : addrval=varptr(tempbuf(0))
0fbe8     08 4E 05 F1 | 	add	fp, #8
0fbec     A7 16 02 FB | 	rdlong	arg03, fp
0fbf0     08 4E 85 F1 | 	sub	fp, #8
0fbf4     00 04 00 FF 
0fbf8     01 16 56 F2 | 	cmps	arg03, ##524289 wc
0fbfc     40 00 90 CD |  if_b	jmp	#LR__1304
0fc00     10 4E 05 F1 | 	add	fp, #16
0fc04     A7 12 02 F6 | 	mov	arg01, fp
0fc08     08 4E 85 F1 | 	sub	fp, #8
0fc0c     A7 14 02 FB | 	rdlong	arg02, fp
0fc10     08 4E 85 F1 | 	sub	fp, #8
0fc14     0C 16 C6 F9 | 	decod	arg03, #12
0fc18     0B 00 00 FF 
0fc1c     CC E4 05 F1 | 	add	objptr, ##5836
0fc20     4C 78 B1 FD | 	call	#_psram_spin2_read1
0fc24     0B 00 00 FF 
0fc28     CC E4 85 F1 | 	sub	objptr, ##5836
0fc2c     10 4E 05 F1 | 	add	fp, #16
0fc30     A7 FA 01 F6 | 	mov	result1, fp
0fc34     08 4E 85 F1 | 	sub	fp, #8
0fc38     A7 FA 61 FC | 	wrlong	result1, fp
0fc3c     08 4E 85 F1 | 	sub	fp, #8
0fc40                 | LR__1304
0fc40     0C 4E 05 F1 | 	add	fp, #12
0fc44     A7 FA 01 FB | 	rdlong	result1, fp
0fc48     04 4E 85 F1 | 	sub	fp, #4
0fc4c     A7 14 02 FB | 	rdlong	arg02, fp
0fc50     04 4E 85 F1 | 	sub	fp, #4
0fc54     A7 16 02 FB | 	rdlong	arg03, fp
0fc58                 | ' 
0fc58                 | '  asm
0fc58     28 16 62 FD | 	setq	arg03
0fc5c     0A FB F1 FC | 	coginit	result1, arg02 wc
0fc60                 | '  
0fc60                 | ' return cog 
0fc60     08 4E 05 F1 | 	add	fp, #8
0fc64     A7 FA 61 FC | 	wrlong	result1, fp
0fc68     08 00 00 FF 
0fc6c     04 4E 05 F1 | 	add	fp, ##4100
0fc70     A7 FA 61 FC | 	wrlong	result1, fp
0fc74     08 4E 05 F1 | 	add	fp, #8
0fc78     A7 38 68 FC | 	wrlong	#28, fp
0fc7c     08 4E 85 F1 | 	sub	fp, #8
0fc80     A7 12 02 F6 | 	mov	arg01, fp
0fc84     08 00 00 FF 
0fc88     10 4E 85 F1 | 	sub	fp, ##4112
0fc8c     28 DC BF FD | 	call	#_push
0fc90                 | LR__1305
0fc90     A7 F0 03 F6 | 	mov	ptra, fp
0fc94     B2 00 A0 FD | 	call	#popregs_
0fc98                 | _do_coginit_ret
0fc98     2D 00 64 FD | 	ret
0fc9c                 | 
0fc9c                 | ' 
0fc9c                 | ' '-------------------- cogstop
0fc9c                 | ' 
0fc9c                 | ' sub do_cogstop
0fc9c                 | _do_cogstop
0fc9c     00 4A 05 F6 | 	mov	COUNT_, #0
0fca0     A8 00 A0 FD | 	call	#pushregs_
0fca4     0C F0 07 F1 | 	add	ptra, #12
0fca8     74 DB BF FD | 	call	#_pop
0fcac     A7 FA 61 FC | 	wrlong	result1, fp
0fcb0     04 4E 05 F1 | 	add	fp, #4
0fcb4     A7 FC 61 FC | 	wrlong	result2, fp
0fcb8     04 4E 05 F1 | 	add	fp, #4
0fcbc     A7 FE 61 FC | 	wrlong	result3, fp
0fcc0     08 4E 85 F1 | 	sub	fp, #8
0fcc4     A7 12 02 F6 | 	mov	arg01, fp
0fcc8     38 DD BF FD | 	call	#_converttoint
0fccc     03 FA 61 FD | 	cogstop	result1
0fcd0     A7 F0 03 F6 | 	mov	ptra, fp
0fcd4     B2 00 A0 FD | 	call	#popregs_
0fcd8                 | _do_cogstop_ret
0fcd8     2D 00 64 FD | 	ret
0fcdc                 | 
0fcdc                 | ' 
0fcdc                 | ' '-------------------- color
0fcdc                 | ' 
0fcdc                 | ' sub do_color
0fcdc                 | _do_color
0fcdc     03 4A 05 F6 | 	mov	COUNT_, #3
0fce0     A8 00 A0 FD | 	call	#pushregs_
0fce4     38 DB BF FD | 	call	#_pop
0fce8     FD 26 02 F6 | 	mov	local01, result1
0fcec     FE 28 02 F6 | 	mov	local02, result2
0fcf0     FF 2A 02 F6 | 	mov	local03, result3
0fcf4     37 00 00 FF 
0fcf8     48 E4 05 F1 | 	add	objptr, ##28232
0fcfc     F2 26 62 FC | 	wrlong	local01, objptr
0fd00     37 00 00 FF 
0fd04     48 E4 85 F1 | 	sub	objptr, ##28232
0fd08     A7 F0 03 F6 | 	mov	ptra, fp
0fd0c     B2 00 A0 FD | 	call	#popregs_
0fd10                 | _do_color_ret
0fd10     2D 00 64 FD | 	ret
0fd14                 | 
0fd14                 | ' 
0fd14                 | ' '-------------------- copy
0fd14                 | ' 
0fd14                 | ' sub do_copy
0fd14                 | _do_copy
0fd14     08 4A 05 F6 | 	mov	COUNT_, #8
0fd18     A8 00 A0 FD | 	call	#pushregs_
0fd1c     00 DB BF FD | 	call	#_pop
0fd20     FD 26 02 F6 | 	mov	local01, result1
0fd24     FE 1A 02 F6 | 	mov	arg05, result2
0fd28     FF 18 02 F6 | 	mov	arg04, result3
0fd2c     0D 29 02 F6 | 	mov	local02, arg05
0fd30     0C 2B 02 F6 | 	mov	local03, arg04
0fd34     E8 DA BF FD | 	call	#_pop
0fd38     FE 1A 02 F6 | 	mov	arg05, result2
0fd3c     FF 18 02 F6 | 	mov	arg04, result3
0fd40     FD 2C 02 F6 | 	mov	local04, result1
0fd44     0D 2F 02 F6 | 	mov	local05, arg05
0fd48     0C 31 02 F6 | 	mov	local06, arg04
0fd4c                 | ' 
0fd4c                 | ' t1=pop()
0fd4c                 | ' t2=pop()
0fd4c                 | ' if t2.result_type=result_string2 then 
0fd4c     2B 30 0E F2 | 	cmp	local06, #43 wz
0fd50     10 00 90 5D |  if_ne	jmp	#LR__1310
0fd54     16 13 02 F6 | 	mov	arg01, local04
0fd58     3C DC BF FD | 	call	#_convertstring
0fd5c     FD 32 02 F6 | 	mov	local07, result1
0fd60     2C 00 90 FD | 	jmp	#LR__1312
0fd64                 | LR__1310
0fd64     1F 30 0E F2 | 	cmp	local06, #31 wz
0fd68     16 33 02 A6 |  if_e	mov	local07, local04
0fd6c     20 00 90 AD |  if_e	jmp	#LR__1311
0fd70     50 00 00 FF 
0fd74     10 E5 05 F1 | 	add	objptr, ##41232
0fd78     F2 14 02 FB | 	rdlong	arg02, objptr
0fd7c     50 00 00 FF 
0fd80     10 E5 85 F1 | 	sub	objptr, ##41232
0fd84     0F 12 06 F6 | 	mov	arg01, #15
0fd88     30 49 B1 FD | 	call	#_printerror
0fd8c                 | '   printerror(15,runheader(0)) : return
0fd8c     58 03 90 FD | 	jmp	#LR__1319
0fd90                 | LR__1311
0fd90                 | LR__1312
0fd90                 | ' if t1.result_type=result_string2 then 
0fd90     2B 2A 0E F2 | 	cmp	local03, #43 wz
0fd94     10 00 90 5D |  if_ne	jmp	#LR__1313
0fd98     13 13 02 F6 | 	mov	arg01, local01
0fd9c     F8 DB BF FD | 	call	#_convertstring
0fda0     FD 34 02 F6 | 	mov	local08, result1
0fda4     2C 00 90 FD | 	jmp	#LR__1315
0fda8                 | LR__1313
0fda8     1F 2A 0E F2 | 	cmp	local03, #31 wz
0fdac     13 35 02 A6 |  if_e	mov	local08, local01
0fdb0     20 00 90 AD |  if_e	jmp	#LR__1314
0fdb4     50 00 00 FF 
0fdb8     10 E5 05 F1 | 	add	objptr, ##41232
0fdbc     F2 14 02 FB | 	rdlong	arg02, objptr
0fdc0     50 00 00 FF 
0fdc4     10 E5 85 F1 | 	sub	objptr, ##41232
0fdc8     0F 12 06 F6 | 	mov	arg01, #15
0fdcc     EC 48 B1 FD | 	call	#_printerror
0fdd0                 | '   printerror(15,runheader(0)) : return
0fdd0     14 03 90 FD | 	jmp	#LR__1319
0fdd4                 | LR__1314
0fdd4                 | LR__1315
0fdd4                 | ' 
0fdd4                 | ' open filename_1 for input as #9 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_1 : close #9 : return
0fdd4     09 12 06 F6 | 	mov	arg01, #9
0fdd8     19 15 02 F6 | 	mov	arg02, local07
0fddc     00 16 06 F6 | 	mov	arg03, #0
0fde0     34 8F B1 FD | 	call	#__system___basic_open_string
0fde4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0fde8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0fdec     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0fdf0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0fdf4     52 00 00 FF 
0fdf8     30 E5 05 F1 | 	add	objptr, ##42288
0fdfc     F2 FA 61 FC | 	wrlong	result1, objptr
0fe00     52 00 00 FF 
0fe04     30 E5 85 F1 | 	sub	objptr, ##42288
0fe08     0C 01 90 AD |  if_e	jmp	#LR__1316
0fe0c     00 12 06 F6 | 	mov	arg01, #0
0fe10     B0 DF B1 FD | 	call	#__system___getiolock_0620
0fe14     FD 12 02 F6 | 	mov	arg01, result1
0fe18     F8 82 B1 FD | 	call	#__system___lockmem
0fe1c     C2 01 00 FF 
0fe20     FD 14 06 F6 | 	mov	arg02, ##@LR__6020
0fe24     00 12 06 F6 | 	mov	arg01, #0
0fe28     00 16 06 F6 | 	mov	arg03, #0
0fe2c     DC 8F B1 FD | 	call	#__system___basic_print_string
0fe30     52 00 00 FF 
0fe34     30 E5 05 F1 | 	add	objptr, ##42288
0fe38     F2 14 02 FB | 	rdlong	arg02, objptr
0fe3c     52 00 00 FF 
0fe40     30 E5 85 F1 | 	sub	objptr, ##42288
0fe44     00 12 06 F6 | 	mov	arg01, #0
0fe48     00 16 06 F6 | 	mov	arg03, #0
0fe4c     0A 18 06 F6 | 	mov	arg04, #10
0fe50     FC 8F B1 FD | 	call	#__system___basic_print_integer
0fe54     C2 01 00 FF 
0fe58     0D 15 06 F6 | 	mov	arg02, ##@LR__6021
0fe5c     00 12 06 F6 | 	mov	arg01, #0
0fe60     00 16 06 F6 | 	mov	arg03, #0
0fe64     A4 8F B1 FD | 	call	#__system___basic_print_string
0fe68     50 00 00 FF 
0fe6c     10 E5 05 F1 | 	add	objptr, ##41232
0fe70     F2 14 02 FB | 	rdlong	arg02, objptr
0fe74     50 00 00 FF 
0fe78     10 E5 85 F1 | 	sub	objptr, ##41232
0fe7c     00 12 06 F6 | 	mov	arg01, #0
0fe80     00 16 06 F6 | 	mov	arg03, #0
0fe84     0A 18 06 F6 | 	mov	arg04, #10
0fe88     04 90 B1 FD | 	call	#__system___basic_print_unsigned
0fe8c     C2 01 00 FF 
0fe90     17 15 06 F6 | 	mov	arg02, ##@LR__6022
0fe94     00 12 06 F6 | 	mov	arg01, #0
0fe98     00 16 06 F6 | 	mov	arg03, #0
0fe9c     6C 8F B1 FD | 	call	#__system___basic_print_string
0fea0     00 34 06 F6 | 	mov	local08, #0
0fea4     52 00 00 FF 
0fea8     30 E5 05 F1 | 	add	objptr, ##42288
0feac     F2 12 02 FB | 	rdlong	arg01, objptr
0feb0     52 00 00 FF 
0feb4     30 E5 85 F1 | 	sub	objptr, ##42288
0feb8     E8 AB B1 FD | 	call	#__system___strerror
0febc     FD 14 02 F6 | 	mov	arg02, result1
0fec0     1A 13 02 F6 | 	mov	arg01, local08
0fec4     00 16 06 F6 | 	mov	arg03, #0
0fec8     40 8F B1 FD | 	call	#__system___basic_print_string
0fecc     C2 01 00 FF 
0fed0     1A 15 06 F6 | 	mov	arg02, ##@LR__6023
0fed4     00 12 06 F6 | 	mov	arg01, #0
0fed8     00 16 06 F6 | 	mov	arg03, #0
0fedc     2C 8F B1 FD | 	call	#__system___basic_print_string
0fee0     00 12 06 F6 | 	mov	arg01, #0
0fee4     19 15 02 F6 | 	mov	arg02, local07
0fee8     00 16 06 F6 | 	mov	arg03, #0
0feec     1C 8F B1 FD | 	call	#__system___basic_print_string
0fef0     00 12 06 F6 | 	mov	arg01, #0
0fef4     0A 14 06 F6 | 	mov	arg02, #10
0fef8     00 16 06 F6 | 	mov	arg03, #0
0fefc     B4 8E B1 FD | 	call	#__system___basic_print_char
0ff00     00 12 06 F6 | 	mov	arg01, #0
0ff04     BC DE B1 FD | 	call	#__system___getiolock_0620
0ff08     FD 00 68 FC | 	wrlong	#0, result1
0ff0c     09 12 06 F6 | 	mov	arg01, #9
0ff10     60 D5 B1 FD | 	call	#__system__close
0ff14     D0 01 90 FD | 	jmp	#LR__1319
0ff18                 | LR__1316
0ff18                 | ' open filename_2 for output as #8 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_2  : close #8 : return
0ff18     08 12 06 F6 | 	mov	arg01, #8
0ff1c     1A 15 02 F6 | 	mov	arg02, local08
0ff20     0D 16 06 F6 | 	mov	arg03, #13
0ff24     F0 8D B1 FD | 	call	#__system___basic_open_string
0ff28     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ff2c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0ff30     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0ff34     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ff38     52 00 00 FF 
0ff3c     30 E5 05 F1 | 	add	objptr, ##42288
0ff40     F2 FA 61 FC | 	wrlong	result1, objptr
0ff44     52 00 00 FF 
0ff48     30 E5 85 F1 | 	sub	objptr, ##42288
0ff4c     0C 01 90 AD |  if_e	jmp	#LR__1317
0ff50     00 12 06 F6 | 	mov	arg01, #0
0ff54     6C DE B1 FD | 	call	#__system___getiolock_0620
0ff58     FD 12 02 F6 | 	mov	arg01, result1
0ff5c     B4 81 B1 FD | 	call	#__system___lockmem
0ff60     C2 01 00 FF 
0ff64     28 15 06 F6 | 	mov	arg02, ##@LR__6024
0ff68     00 12 06 F6 | 	mov	arg01, #0
0ff6c     00 16 06 F6 | 	mov	arg03, #0
0ff70     98 8E B1 FD | 	call	#__system___basic_print_string
0ff74     52 00 00 FF 
0ff78     30 E5 05 F1 | 	add	objptr, ##42288
0ff7c     F2 14 02 FB | 	rdlong	arg02, objptr
0ff80     52 00 00 FF 
0ff84     30 E5 85 F1 | 	sub	objptr, ##42288
0ff88     00 12 06 F6 | 	mov	arg01, #0
0ff8c     00 16 06 F6 | 	mov	arg03, #0
0ff90     0A 18 06 F6 | 	mov	arg04, #10
0ff94     B8 8E B1 FD | 	call	#__system___basic_print_integer
0ff98     C2 01 00 FF 
0ff9c     38 15 06 F6 | 	mov	arg02, ##@LR__6025
0ffa0     00 12 06 F6 | 	mov	arg01, #0
0ffa4     00 16 06 F6 | 	mov	arg03, #0
0ffa8     60 8E B1 FD | 	call	#__system___basic_print_string
0ffac     50 00 00 FF 
0ffb0     10 E5 05 F1 | 	add	objptr, ##41232
0ffb4     F2 14 02 FB | 	rdlong	arg02, objptr
0ffb8     50 00 00 FF 
0ffbc     10 E5 85 F1 | 	sub	objptr, ##41232
0ffc0     00 12 06 F6 | 	mov	arg01, #0
0ffc4     00 16 06 F6 | 	mov	arg03, #0
0ffc8     0A 18 06 F6 | 	mov	arg04, #10
0ffcc     C0 8E B1 FD | 	call	#__system___basic_print_unsigned
0ffd0     C2 01 00 FF 
0ffd4     42 15 06 F6 | 	mov	arg02, ##@LR__6026
0ffd8     00 12 06 F6 | 	mov	arg01, #0
0ffdc     00 16 06 F6 | 	mov	arg03, #0
0ffe0     28 8E B1 FD | 	call	#__system___basic_print_string
0ffe4     00 32 06 F6 | 	mov	local07, #0
0ffe8     52 00 00 FF 
0ffec     30 E5 05 F1 | 	add	objptr, ##42288
0fff0     F2 12 02 FB | 	rdlong	arg01, objptr
0fff4     52 00 00 FF 
0fff8     30 E5 85 F1 | 	sub	objptr, ##42288
0fffc     A4 AA B1 FD | 	call	#__system___strerror
10000     FD 14 02 F6 | 	mov	arg02, result1
10004     19 13 02 F6 | 	mov	arg01, local07
10008     00 16 06 F6 | 	mov	arg03, #0
1000c     FC 8D B1 FD | 	call	#__system___basic_print_string
10010     C2 01 00 FF 
10014     45 15 06 F6 | 	mov	arg02, ##@LR__6027
10018     00 12 06 F6 | 	mov	arg01, #0
1001c     00 16 06 F6 | 	mov	arg03, #0
10020     E8 8D B1 FD | 	call	#__system___basic_print_string
10024     00 12 06 F6 | 	mov	arg01, #0
10028     1A 15 02 F6 | 	mov	arg02, local08
1002c     00 16 06 F6 | 	mov	arg03, #0
10030     D8 8D B1 FD | 	call	#__system___basic_print_string
10034     00 12 06 F6 | 	mov	arg01, #0
10038     0A 14 06 F6 | 	mov	arg02, #10
1003c     00 16 06 F6 | 	mov	arg03, #0
10040     70 8D B1 FD | 	call	#__system___basic_print_char
10044     00 12 06 F6 | 	mov	arg01, #0
10048     78 DD B1 FD | 	call	#__system___getiolock_0620
1004c     FD 00 68 FC | 	wrlong	#0, result1
10050     08 12 06 F6 | 	mov	arg01, #8
10054     1C D4 B1 FD | 	call	#__system__close
10058     8C 00 90 FD | 	jmp	#LR__1319
1005c                 | LR__1317
1005c                 | ' 
1005c                 | ' do
1005c                 | LR__1318
1005c                 | '   get #9,,block(0),1024,r
1005c     4E 00 00 FF 
10060     D4 E4 05 F1 | 	add	objptr, ##40148
10064     F2 16 02 F6 | 	mov	arg03, objptr
10068     4E 00 00 FF 
1006c     D4 E4 85 F1 | 	sub	objptr, ##40148
10070     09 12 06 F6 | 	mov	arg01, #9
10074     00 14 06 F6 | 	mov	arg02, #0
10078     0A 18 C6 F9 | 	decod	arg04, #10
1007c     01 1A 06 F6 | 	mov	arg05, #1
10080     04 8F B1 FD | 	call	#__system___basic_get
10084     52 00 00 FF 
10088     68 E5 05 F1 | 	add	objptr, ##42344
1008c     F2 FA 61 FC | 	wrlong	result1, objptr
10090                 | '   put #8,,block(0),r
10090     04 00 00 FF 
10094     94 E4 85 F1 | 	sub	objptr, ##2196
10098     F2 16 02 F6 | 	mov	arg03, objptr
1009c     FD 18 02 F6 | 	mov	arg04, result1
100a0     4E 00 00 FF 
100a4     D4 E4 85 F1 | 	sub	objptr, ##40148
100a8     08 12 06 F6 | 	mov	arg01, #8
100ac     00 14 06 F6 | 	mov	arg02, #0
100b0     01 1A 06 F6 | 	mov	arg05, #1
100b4     64 8E B1 FD | 	call	#__system___basic_put
100b8     52 00 00 FF 
100bc     68 E5 05 F1 | 	add	objptr, ##42344
100c0     F2 34 02 FB | 	rdlong	local08, objptr
100c4     52 00 00 FF 
100c8     68 E5 85 F1 | 	sub	objptr, ##42344
100cc     02 00 00 FF 
100d0     00 34 0E F2 | 	cmp	local08, ##1024 wz
100d4     84 FF 9F AD |  if_e	jmp	#LR__1318
100d8                 | ' close #8
100d8     08 12 06 F6 | 	mov	arg01, #8
100dc     94 D3 B1 FD | 	call	#__system__close
100e0                 | ' close #9
100e0     09 12 06 F6 | 	mov	arg01, #9
100e4     8C D3 B1 FD | 	call	#__system__close
100e8                 | LR__1319
100e8     A7 F0 03 F6 | 	mov	ptra, fp
100ec     B2 00 A0 FD | 	call	#popregs_
100f0                 | _do_copy_ret
100f0     2D 00 64 FD | 	ret
100f4                 | 
100f4                 | ' 
100f4                 | ' '-------------------- cos
100f4                 | ' 
100f4                 | ' sub do_cos
100f4                 | _do_cos
100f4     01 4A 05 F6 | 	mov	COUNT_, #1
100f8     A8 00 A0 FD | 	call	#pushregs_
100fc     10 F0 07 F1 | 	add	ptra, #16
10100     4A 00 00 FF 
10104     A0 E4 05 F1 | 	add	objptr, ##38048
10108     F2 26 02 FB | 	rdlong	local01, objptr
1010c     13 17 02 F6 | 	mov	arg03, local01
10110     01 16 66 F0 | 	shl	arg03, #1
10114     13 17 02 F1 | 	add	arg03, local01
10118     02 16 66 F0 | 	shl	arg03, #2
1011c     03 00 00 FF 
10120     04 E4 85 F1 | 	sub	objptr, ##1540
10124     F2 16 02 F1 | 	add	arg03, objptr
10128     0B 17 02 FB | 	rdlong	arg03, arg03
1012c     0C 4E 05 F1 | 	add	fp, #12
10130     A7 16 62 FC | 	wrlong	arg03, fp
10134                 | ' 
10134                 | ' numpar=compiledline(lineptr_e).result.uresult
10134                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
10134     0C 4E 85 F1 | 	sub	fp, #12
10138     02 16 16 F2 | 	cmp	arg03, #2 wc
1013c     47 00 00 FF 
10140     9C E4 85 F1 | 	sub	objptr, ##36508
10144     0C 4E 05 C1 |  if_b	add	fp, #12
10148     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1014c     0C 4E 85 C1 |  if_b	sub	fp, #12
10150     40 00 90 4D |  if_c_and_nz	jmp	#LR__1320
10154     00 12 06 F6 | 	mov	arg01, #0
10158     68 DC B1 FD | 	call	#__system___getiolock_0620
1015c     FD 12 02 F6 | 	mov	arg01, result1
10160     B0 7F B1 FD | 	call	#__system___lockmem
10164     C2 01 00 FF 
10168     53 15 06 F6 | 	mov	arg02, ##@LR__6028
1016c     00 12 06 F6 | 	mov	arg01, #0
10170     00 16 06 F6 | 	mov	arg03, #0
10174     94 8C B1 FD | 	call	#__system___basic_print_string
10178     00 12 06 F6 | 	mov	arg01, #0
1017c     44 DC B1 FD | 	call	#__system___getiolock_0620
10180     FD 00 68 FC | 	wrlong	#0, result1
10184     27 12 06 F6 | 	mov	arg01, #39
10188     00 14 06 F6 | 	mov	arg02, #0
1018c     2C 45 B1 FD | 	call	#_printerror
10190     78 00 90 FD | 	jmp	#LR__1321
10194                 | LR__1320
10194     88 D6 BF FD | 	call	#_pop
10198     A7 FA 61 FC | 	wrlong	result1, fp
1019c     04 4E 05 F1 | 	add	fp, #4
101a0     A7 FC 61 FC | 	wrlong	result2, fp
101a4     04 4E 05 F1 | 	add	fp, #4
101a8     A7 FE 61 FC | 	wrlong	result3, fp
101ac     08 4E 85 F1 | 	sub	fp, #8
101b0     52 00 00 FF 
101b4     00 E5 05 F1 | 	add	objptr, ##42240
101b8     F2 26 02 FB | 	rdlong	local01, objptr
101bc     52 00 00 FF 
101c0     00 E5 85 F1 | 	sub	objptr, ##42240
101c4     A7 12 02 F6 | 	mov	arg01, fp
101c8     F4 D8 BF FD | 	call	#_converttofloat
101cc     FD 14 02 F6 | 	mov	arg02, result1
101d0     13 13 02 F6 | 	mov	arg01, local01
101d4     B8 AD B1 FD | 	call	#__system___float_mul
101d8     FD 14 02 F6 | 	mov	arg02, result1
101dc     87 E4 1F FF 
101e0     DB 13 06 F6 | 	mov	arg01, ##1070141403
101e4     1F 14 E6 F4 | 	bitnot	arg02, #31
101e8     D4 A9 B1 FD | 	call	#__system___float_add
101ec     FD 12 02 F6 | 	mov	arg01, result1
101f0     00 B7 B1 FD | 	call	#__system____builtin_sinf
101f4     A7 FA 61 FC | 	wrlong	result1, fp
101f8     08 4E 05 F1 | 	add	fp, #8
101fc     A7 3C 68 FC | 	wrlong	#30, fp
10200     08 4E 85 F1 | 	sub	fp, #8
10204     A7 12 02 F6 | 	mov	arg01, fp
10208     AC D6 BF FD | 	call	#_push
1020c                 | LR__1321
1020c     A7 F0 03 F6 | 	mov	ptra, fp
10210     B2 00 A0 FD | 	call	#popregs_
10214                 | _do_cos_ret
10214     2D 00 64 FD | 	ret
10218                 | 
10218                 | ' 
10218                 | ' '-------------------- cursor
10218                 | ' 
10218                 | ' sub do_cursor
10218                 | _do_cursor
10218     04 D6 BF FD | 	call	#_pop
1021c     00 FA 4D F2 | 	cmps	result1, #0 wz
10220                 | ' t1=pop()
10220                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
10220     14 00 90 5D |  if_ne	jmp	#LR__1330
10224     11 12 06 F6 | 	mov	arg01, #17
10228     00 14 06 F6 | 	mov	arg02, #0
1022c     00 16 06 F6 | 	mov	arg03, #0
10230     F0 54 B1 FD | 	call	#_hg010b_spin2_setspritesize
10234     10 00 90 FD | 	jmp	#LR__1331
10238                 | LR__1330
10238     11 12 06 F6 | 	mov	arg01, #17
1023c     08 14 06 F6 | 	mov	arg02, #8
10240     10 16 06 F6 | 	mov	arg03, #16
10244     DC 54 B1 FD | 	call	#_hg010b_spin2_setspritesize
10248                 | LR__1331
10248                 | _do_cursor_ret
10248     2D 00 64 FD | 	ret
1024c                 | 
1024c                 | ' 
1024c                 | ' '-------------------- defchar
1024c                 | ' 
1024c                 | ' sub do_defchar
1024c                 | _do_defchar
1024c     01 4A 05 F6 | 	mov	COUNT_, #1
10250     A8 00 A0 FD | 	call	#pushregs_
10254     28 F0 07 F1 | 	add	ptra, #40
10258     C4 D5 BF FD | 	call	#_pop
1025c     FF 14 02 F6 | 	mov	arg02, result3
10260     A7 FA 61 FC | 	wrlong	result1, fp
10264     04 4E 05 F1 | 	add	fp, #4
10268     A7 FC 61 FC | 	wrlong	result2, fp
1026c     04 4E 05 F1 | 	add	fp, #4
10270     A7 14 62 FC | 	wrlong	arg02, fp
10274     08 4E 85 F1 | 	sub	fp, #8
10278     A7 12 02 F6 | 	mov	arg01, fp
1027c     84 D7 BF FD | 	call	#_converttoint
10280     FD 14 02 F6 | 	mov	arg02, result1
10284     10 4E 05 F1 | 	add	fp, #16
10288     A7 14 62 FC | 	wrlong	arg02, fp
1028c     10 4E 85 F1 | 	sub	fp, #16
10290     8C D5 BF FD | 	call	#_pop
10294     FF 14 02 F6 | 	mov	arg02, result3
10298     A7 FA 61 FC | 	wrlong	result1, fp
1029c     04 4E 05 F1 | 	add	fp, #4
102a0     A7 FC 61 FC | 	wrlong	result2, fp
102a4     04 4E 05 F1 | 	add	fp, #4
102a8     A7 14 62 FC | 	wrlong	arg02, fp
102ac     08 4E 85 F1 | 	sub	fp, #8
102b0     A7 12 02 F6 | 	mov	arg01, fp
102b4     4C D7 BF FD | 	call	#_converttoint
102b8     0C 4E 05 F1 | 	add	fp, #12
102bc     A7 FA 61 FC | 	wrlong	result1, fp
102c0                 | ' 
102c0                 | ' t1=pop() : cptr=converttoint(t1)
102c0                 | ' t1=pop() : c=converttoint(t1)
102c0                 | ' if cptr<$80000 then 
102c0     04 4E 05 F1 | 	add	fp, #4
102c4     A7 14 02 FB | 	rdlong	arg02, fp
102c8     10 4E 85 F1 | 	sub	fp, #16
102cc     00 04 00 FF 
102d0     00 14 16 F2 | 	cmp	arg02, ##524288 wc
102d4     1C 00 90 3D |  if_ae	jmp	#LR__1340
102d8     0C 4E 05 F1 | 	add	fp, #12
102dc     A7 12 02 FB | 	rdlong	arg01, fp
102e0     04 4E 05 F1 | 	add	fp, #4
102e4     A7 14 02 FB | 	rdlong	arg02, fp
102e8     10 4E 85 F1 | 	sub	fp, #16
102ec     44 60 B1 FD | 	call	#_hg010b_spin2_defchar
102f0     60 00 90 FD | 	jmp	#LR__1342
102f4                 | LR__1340
102f4                 | '   for i=0 to 15: buf(i)=pspeek(cptr+i): next i
102f4     24 4E 05 F1 | 	add	fp, #36
102f8     A7 00 68 FC | 	wrlong	#0, fp
102fc                 | LR__1341
102fc     A7 14 02 FB | 	rdlong	arg02, fp
10300     0A 27 02 F6 | 	mov	local01, arg02
10304     10 4E 85 F1 | 	sub	fp, #16
10308     A7 26 02 F1 | 	add	local01, fp
1030c     04 4E 85 F1 | 	sub	fp, #4
10310     A7 12 02 FB | 	rdlong	arg01, fp
10314     10 4E 85 F1 | 	sub	fp, #16
10318     0A 13 02 F1 | 	add	arg01, arg02
1031c     14 46 B1 FD | 	call	#_pspeek
10320     13 FB 41 FC | 	wrbyte	result1, local01
10324     24 4E 05 F1 | 	add	fp, #36
10328     A7 26 02 FB | 	rdlong	local01, fp
1032c     01 26 06 F1 | 	add	local01, #1
10330     A7 26 62 FC | 	wrlong	local01, fp
10334     10 26 56 F2 | 	cmps	local01, #16 wc
10338     C0 FF 9F CD |  if_b	jmp	#LR__1341
1033c     18 4E 85 F1 | 	sub	fp, #24
10340     A7 12 02 FB | 	rdlong	arg01, fp
10344     08 4E 05 F1 | 	add	fp, #8
10348     A7 14 02 F6 | 	mov	arg02, fp
1034c     14 4E 85 F1 | 	sub	fp, #20
10350     E0 5F B1 FD | 	call	#_hg010b_spin2_defchar
10354                 | LR__1342
10354     A7 F0 03 F6 | 	mov	ptra, fp
10358     B2 00 A0 FD | 	call	#popregs_
1035c                 | _do_defchar_ret
1035c     2D 00 64 FD | 	ret
10360                 | 
10360                 | ' 
10360                 | ' '-------------------- defenv
10360                 | ' 
10360                 | ' sub do_defenv
10360                 | _do_defenv
10360     08 4A 05 F6 | 	mov	COUNT_, #8
10364     A8 00 A0 FD | 	call	#pushregs_
10368     58 F0 07 F1 | 	add	ptra, #88
1036c     4A 00 00 FF 
10370     A0 E4 05 F1 | 	add	objptr, ##38048
10374     F2 26 02 FB | 	rdlong	local01, objptr
10378     13 1B 02 F6 | 	mov	arg05, local01
1037c     01 1A 66 F0 | 	shl	arg05, #1
10380     13 1B 02 F1 | 	add	arg05, local01
10384     02 1A 66 F0 | 	shl	arg05, #2
10388     03 00 00 FF 
1038c     04 E4 85 F1 | 	sub	objptr, ##1540
10390     F2 1A 02 F1 | 	add	arg05, objptr
10394     0D 1B 02 FB | 	rdlong	arg05, arg05
10398     10 4E 05 F1 | 	add	fp, #16
1039c     A7 1A 62 FC | 	wrlong	arg05, fp
103a0                 | ' 
103a0                 | ' numpar=compiledline(lineptr_e).result.uresult
103a0                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
103a0     10 4E 85 F1 | 	sub	fp, #16
103a4     02 1A 0E F2 | 	cmp	arg05, #2 wz
103a8     47 00 00 FF 
103ac     9C E4 85 F1 | 	sub	objptr, ##36508
103b0     10 4E 05 51 |  if_ne	add	fp, #16
103b4     A7 26 02 5B |  if_ne	rdlong	local01, fp
103b8     10 4E 85 51 |  if_ne	sub	fp, #16
103bc     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
103c0     90 0A 90 5D |  if_ne	jmp	#LR__1371
103c4                 | ' 
103c4                 | ' if numpar=2 then						' env from .h2 or from a pointer
103c4     10 4E 05 F1 | 	add	fp, #16
103c8     A7 26 02 FB | 	rdlong	local01, fp
103cc     10 4E 85 F1 | 	sub	fp, #16
103d0     02 26 0E F2 | 	cmp	local01, #2 wz
103d4     28 04 90 5D |  if_ne	jmp	#LR__1363
103d8     44 D4 BF FD | 	call	#_pop
103dc     FF 1A 02 F6 | 	mov	arg05, result3
103e0     40 4E 05 F1 | 	add	fp, #64
103e4     A7 FA 61 FC | 	wrlong	result1, fp
103e8     04 4E 05 F1 | 	add	fp, #4
103ec     A7 FC 61 FC | 	wrlong	result2, fp
103f0     04 4E 05 F1 | 	add	fp, #4
103f4     A7 1A 62 FC | 	wrlong	arg05, fp
103f8                 | '   t1=pop()
103f8                 | '   if t1.result_type=result_string2 then 
103f8     48 4E 85 F1 | 	sub	fp, #72
103fc     2B 1A 0E F2 | 	cmp	arg05, #43 wz
10400     20 00 90 5D |  if_ne	jmp	#LR__1350
10404     40 4E 05 F1 | 	add	fp, #64
10408     A7 12 02 FB | 	rdlong	arg01, fp
1040c     40 4E 85 F1 | 	sub	fp, #64
10410     84 D5 BF FD | 	call	#_convertstring
10414     4C 4E 05 F1 | 	add	fp, #76
10418     A7 FA 61 FC | 	wrlong	result1, fp
1041c     4C 4E 85 F1 | 	sub	fp, #76
10420     58 00 90 FD | 	jmp	#LR__1353
10424                 | LR__1350
10424     48 4E 05 F1 | 	add	fp, #72
10428     A7 26 02 FB | 	rdlong	local01, fp
1042c     48 4E 85 F1 | 	sub	fp, #72
10430     1F 26 0E F2 | 	cmp	local01, #31 wz
10434     18 00 90 5D |  if_ne	jmp	#LR__1351
10438     40 4E 05 F1 | 	add	fp, #64
1043c     A7 26 02 FB | 	rdlong	local01, fp
10440     0C 4E 05 F1 | 	add	fp, #12
10444     A7 26 62 FC | 	wrlong	local01, fp
10448     4C 4E 85 F1 | 	sub	fp, #76
1044c     2C 00 90 FD | 	jmp	#LR__1352
10450                 | LR__1351
10450     C2 01 00 FF 
10454     59 27 06 F6 | 	mov	local01, ##@LR__6029
10458     4C 4E 05 F1 | 	add	fp, #76
1045c     A7 26 62 FC | 	wrlong	local01, fp
10460     0C 4E 85 F1 | 	sub	fp, #12
10464     A7 12 02 F6 | 	mov	arg01, fp
10468     40 4E 85 F1 | 	sub	fp, #64
1046c     94 D5 BF FD | 	call	#_converttoint
10470     1C 4E 05 F1 | 	add	fp, #28
10474     A7 FA 61 FC | 	wrlong	result1, fp
10478     1C 4E 85 F1 | 	sub	fp, #28
1047c                 | LR__1352
1047c                 | LR__1353
1047c                 | '   if s1<>"" then 
1047c     4C 4E 05 F1 | 	add	fp, #76
10480     A7 12 02 FB | 	rdlong	arg01, fp
10484     4C 4E 85 F1 | 	sub	fp, #76
10488     C2 01 00 FF 
1048c     5A 15 06 F6 | 	mov	arg02, ##@LR__6030
10490     A8 7C B1 FD | 	call	#__system___string_cmp
10494     00 FA 0D F2 | 	cmp	result1, #0 wz
10498     28 02 90 AD |  if_e	jmp	#LR__1357
1049c     80 D3 BF FD | 	call	#_pop
104a0     FF 26 02 F6 | 	mov	local01, result3
104a4     40 4E 05 F1 | 	add	fp, #64
104a8     A7 FA 61 FC | 	wrlong	result1, fp
104ac     04 4E 05 F1 | 	add	fp, #4
104b0     A7 FC 61 FC | 	wrlong	result2, fp
104b4     04 4E 05 F1 | 	add	fp, #4
104b8     A7 26 62 FC | 	wrlong	local01, fp
104bc     08 4E 85 F1 | 	sub	fp, #8
104c0     A7 12 02 F6 | 	mov	arg01, fp
104c4     40 4E 85 F1 | 	sub	fp, #64
104c8     38 D5 BF FD | 	call	#_converttoint
104cc     18 4E 05 F1 | 	add	fp, #24
104d0     A7 FA 61 FC | 	wrlong	result1, fp
104d4     18 4E 85 F1 | 	sub	fp, #24
104d8                 | '     t1=pop()
104d8                 | '     channel=converttoint(t1) 
104d8                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
104d8     09 12 06 F6 | 	mov	arg01, #9
104dc     94 CF B1 FD | 	call	#__system__close
104e0     09 26 06 F6 | 	mov	local01, #9
104e4     C2 01 00 FF 
104e8     5B 13 06 F6 | 	mov	arg01, ##@LR__6031
104ec     4C 4E 05 F1 | 	add	fp, #76
104f0     A7 14 02 FB | 	rdlong	arg02, fp
104f4     4C 4E 85 F1 | 	sub	fp, #76
104f8     74 7C B1 FD | 	call	#__system___string_concat
104fc     FD 14 02 F6 | 	mov	arg02, result1
10500     13 13 02 F6 | 	mov	arg01, local01
10504     00 16 06 F6 | 	mov	arg03, #0
10508     0C 88 B1 FD | 	call	#__system___basic_open_string
1050c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10510     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
10514     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
10518     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1051c     0C 4E 05 F1 | 	add	fp, #12
10520     A7 FA 61 FC | 	wrlong	result1, fp
10524                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
10524     0C 4E 85 F1 | 	sub	fp, #12
10528     A0 00 90 AD |  if_e	jmp	#LR__1354
1052c     00 12 06 F6 | 	mov	arg01, #0
10530     90 D8 B1 FD | 	call	#__system___getiolock_0620
10534     FD 12 02 F6 | 	mov	arg01, result1
10538     D8 7B B1 FD | 	call	#__system___lockmem
1053c     C2 01 00 FF 
10540     68 15 06 F6 | 	mov	arg02, ##@LR__6032
10544     00 12 06 F6 | 	mov	arg01, #0
10548     00 16 06 F6 | 	mov	arg03, #0
1054c     BC 88 B1 FD | 	call	#__system___basic_print_string
10550     0C 4E 05 F1 | 	add	fp, #12
10554     A7 14 02 FB | 	rdlong	arg02, fp
10558     0C 4E 85 F1 | 	sub	fp, #12
1055c     00 12 06 F6 | 	mov	arg01, #0
10560     00 16 06 F6 | 	mov	arg03, #0
10564     0A 18 06 F6 | 	mov	arg04, #10
10568     E4 88 B1 FD | 	call	#__system___basic_print_integer
1056c     C2 01 00 FF 
10570     76 15 06 F6 | 	mov	arg02, ##@LR__6033
10574     00 12 06 F6 | 	mov	arg01, #0
10578     00 16 06 F6 | 	mov	arg03, #0
1057c     8C 88 B1 FD | 	call	#__system___basic_print_string
10580     00 26 06 F6 | 	mov	local01, #0
10584     0C 4E 05 F1 | 	add	fp, #12
10588     A7 12 02 FB | 	rdlong	arg01, fp
1058c     0C 4E 85 F1 | 	sub	fp, #12
10590     10 A5 B1 FD | 	call	#__system___strerror
10594     FD 14 02 F6 | 	mov	arg02, result1
10598     13 13 02 F6 | 	mov	arg01, local01
1059c     00 16 06 F6 | 	mov	arg03, #0
105a0     68 88 B1 FD | 	call	#__system___basic_print_string
105a4     00 12 06 F6 | 	mov	arg01, #0
105a8     0A 14 06 F6 | 	mov	arg02, #10
105ac     00 16 06 F6 | 	mov	arg03, #0
105b0     00 88 B1 FD | 	call	#__system___basic_print_char
105b4     00 12 06 F6 | 	mov	arg01, #0
105b8     08 D8 B1 FD | 	call	#__system___getiolock_0620
105bc     FD 00 68 FC | 	wrlong	#0, result1
105c0     09 12 06 F6 | 	mov	arg01, #9
105c4     AC CE B1 FD | 	call	#__system__close
105c8     88 08 90 FD | 	jmp	#LR__1371
105cc                 | LR__1354
105cc                 | '     get #9,17,envbuf8(channel,0),256
105cc     18 4E 05 F1 | 	add	fp, #24
105d0     A7 1A 02 FB | 	rdlong	arg05, fp
105d4     18 4E 85 F1 | 	sub	fp, #24
105d8     0D 17 02 F6 | 	mov	arg03, arg05
105dc     09 16 66 F0 | 	shl	arg03, #9
105e0     0D 17 02 F1 | 	add	arg03, arg05
105e4     0C 00 00 FF 
105e8     D8 E4 05 F1 | 	add	objptr, ##6360
105ec     F2 16 02 F1 | 	add	arg03, objptr
105f0     09 12 06 F6 | 	mov	arg01, #9
105f4     11 14 06 F6 | 	mov	arg02, #17
105f8     00 19 06 F6 | 	mov	arg04, #256
105fc     01 1A 06 F6 | 	mov	arg05, #1
10600     0C 00 00 FF 
10604     D8 E4 85 F1 | 	sub	objptr, ##6360
10608     7C 89 B1 FD | 	call	#__system___basic_get
1060c                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
1060c     14 4E 05 F1 | 	add	fp, #20
10610     A7 FE 69 FC | 	wrlong	#255, fp
10614     14 4E 85 F1 | 	sub	fp, #20
10618     0C 00 00 FF 
1061c     D8 E4 05 F1 | 	add	objptr, ##6360
10620     97 30 48 FB | 	callpa	#(@LR__1356-@LR__1355)>>2,fcache_load_ptr_
10624                 | LR__1355
10624     18 4E 05 F1 | 	add	fp, #24
10628     A7 16 02 FB | 	rdlong	arg03, fp
1062c     0B 27 02 F6 | 	mov	local01, arg03
10630     09 26 66 F0 | 	shl	local01, #9
10634     F2 26 02 F1 | 	add	local01, objptr
10638     04 4E 85 F1 | 	sub	fp, #4
1063c     A7 1A 02 FB | 	rdlong	arg05, fp
10640     0D 19 02 F6 | 	mov	arg04, arg05
10644     01 18 66 F0 | 	shl	arg04, #1
10648     13 19 02 F1 | 	add	arg04, local01
1064c     0B 27 02 F6 | 	mov	local01, arg03
10650     09 26 66 F0 | 	shl	local01, #9
10654     0B 27 02 F1 | 	add	local01, arg03
10658     F2 26 02 F1 | 	add	local01, objptr
1065c     13 1B 02 F1 | 	add	arg05, local01
10660     0D 27 C2 FA | 	rdbyte	local01, arg05
10664     00 27 06 FA | 	mul	local01, #256
10668     0C 27 52 FC | 	wrword	local01, arg04
1066c     A7 26 02 FB | 	rdlong	local01, fp
10670     01 26 86 F1 | 	sub	local01, #1
10674     A7 26 62 FC | 	wrlong	local01, fp
10678     14 4E 85 F1 | 	sub	fp, #20
1067c     00 26 56 F2 | 	cmps	local01, #0 wc
10680     A0 FF 9F 3D |  if_ae	jmp	#LR__1355
10684                 | LR__1356
10684     0C 00 00 FF 
10688     D8 E4 85 F1 | 	sub	objptr, ##6360
1068c                 | '     close #9
1068c     09 12 06 F6 | 	mov	arg01, #9
10690     E0 CD B1 FD | 	call	#__system__close
10694     18 4E 05 F1 | 	add	fp, #24
10698     A7 26 02 FB | 	rdlong	local01, fp
1069c     18 4E 85 F1 | 	sub	fp, #24
106a0     09 26 66 F0 | 	shl	local01, #9
106a4     0C 00 00 FF 
106a8     D8 E4 05 F1 | 	add	objptr, ##6360
106ac     F2 26 02 F1 | 	add	local01, objptr
106b0     FE 27 06 F1 | 	add	local01, #510
106b4     13 01 58 FC | 	wrword	#0, local01
106b8                 | '     envbuf(channel,255)=0                                                              
106b8                 | '     return
106b8     0C 00 00 FF 
106bc     D8 E4 85 F1 | 	sub	objptr, ##6360
106c0     90 07 90 FD | 	jmp	#LR__1371
106c4                 | LR__1357
106c4                 | '     if wptr < $80000 then 
106c4     1C 4E 05 F1 | 	add	fp, #28
106c8     A7 28 02 FB | 	rdlong	local02, fp
106cc     1C 4E 85 F1 | 	sub	fp, #28
106d0     00 04 00 FF 
106d4     00 28 56 F2 | 	cmps	local02, ##524288 wc
106d8     7C 00 90 3D |  if_ae	jmp	#LR__1360
106dc                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
106dc     14 4E 05 F1 | 	add	fp, #20
106e0     A7 00 68 FC | 	wrlong	#0, fp
106e4     14 4E 85 F1 | 	sub	fp, #20
106e8     0C 00 00 FF 
106ec     D8 E4 05 F1 | 	add	objptr, ##6360
106f0     97 2C 48 FB | 	callpa	#(@LR__1359-@LR__1358)>>2,fcache_load_ptr_
106f4                 | LR__1358
106f4     18 4E 05 F1 | 	add	fp, #24
106f8     A7 28 02 FB | 	rdlong	local02, fp
106fc     09 28 66 F0 | 	shl	local02, #9
10700     F2 28 02 F1 | 	add	local02, objptr
10704     04 4E 85 F1 | 	sub	fp, #4
10708     A7 26 02 FB | 	rdlong	local01, fp
1070c     13 1B 02 F6 | 	mov	arg05, local01
10710     01 1A 66 F0 | 	shl	arg05, #1
10714     14 1B 02 F1 | 	add	arg05, local02
10718     08 4E 05 F1 | 	add	fp, #8
1071c     A7 12 02 FB | 	rdlong	arg01, fp
10720     01 26 66 F0 | 	shl	local01, #1
10724     13 13 02 F1 | 	add	arg01, local01
10728     09 FB E1 FA | 	rdword	result1, arg01
1072c     0D FB 51 FC | 	wrword	result1, arg05
10730     08 4E 85 F1 | 	sub	fp, #8
10734     A7 28 02 FB | 	rdlong	local02, fp
10738     01 28 06 F1 | 	add	local02, #1
1073c     A7 28 62 FC | 	wrlong	local02, fp
10740     14 4E 85 F1 | 	sub	fp, #20
10744     00 29 56 F2 | 	cmps	local02, #256 wc
10748     A8 FF 9F CD |  if_b	jmp	#LR__1358
1074c                 | LR__1359
1074c     0C 00 00 FF 
10750     D8 E4 85 F1 | 	sub	objptr, ##6360
10754     78 00 90 FD | 	jmp	#LR__1362
10758                 | LR__1360
10758                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
10758     14 4E 05 F1 | 	add	fp, #20
1075c     A7 00 68 FC | 	wrlong	#0, fp
10760     14 4E 85 F1 | 	sub	fp, #20
10764                 | LR__1361
10764     18 4E 05 F1 | 	add	fp, #24
10768     A7 28 02 FB | 	rdlong	local02, fp
1076c     09 28 66 F0 | 	shl	local02, #9
10770     0C 00 00 FF 
10774     D8 E4 05 F1 | 	add	objptr, ##6360
10778     F2 28 02 F1 | 	add	local02, objptr
1077c     04 4E 85 F1 | 	sub	fp, #4
10780     A7 26 02 FB | 	rdlong	local01, fp
10784     13 2B 02 F6 | 	mov	local03, local01
10788     01 2A 66 F0 | 	shl	local03, #1
1078c     14 2B 02 F1 | 	add	local03, local02
10790     08 4E 05 F1 | 	add	fp, #8
10794     A7 12 02 FB | 	rdlong	arg01, fp
10798     1C 4E 85 F1 | 	sub	fp, #28
1079c     01 26 66 F0 | 	shl	local01, #1
107a0     13 13 02 F1 | 	add	arg01, local01
107a4     0C 00 00 FF 
107a8     D8 E4 85 F1 | 	sub	objptr, ##6360
107ac     34 42 B1 FD | 	call	#_psdpeek
107b0     15 FB 51 FC | 	wrword	result1, local03
107b4     14 4E 05 F1 | 	add	fp, #20
107b8     A7 2A 02 FB | 	rdlong	local03, fp
107bc     01 2A 06 F1 | 	add	local03, #1
107c0     A7 2A 62 FC | 	wrlong	local03, fp
107c4     14 4E 85 F1 | 	sub	fp, #20
107c8     00 2B 56 F2 | 	cmps	local03, #256 wc
107cc     94 FF 9F CD |  if_b	jmp	#LR__1361
107d0                 | LR__1362
107d0     18 4E 05 F1 | 	add	fp, #24
107d4     A7 2A 02 FB | 	rdlong	local03, fp
107d8     18 4E 85 F1 | 	sub	fp, #24
107dc     09 2A 66 F0 | 	shl	local03, #9
107e0     0C 00 00 FF 
107e4     D8 E4 05 F1 | 	add	objptr, ##6360
107e8     F2 2A 02 F1 | 	add	local03, objptr
107ec     FE 2B 06 F1 | 	add	local03, #510
107f0     15 01 58 FC | 	wrword	#0, local03
107f4                 | '     envbuf(channel,255)=0
107f4                 | '     return   
107f4     0C 00 00 FF 
107f8     D8 E4 85 F1 | 	sub	objptr, ##6360
107fc     54 06 90 FD | 	jmp	#LR__1371
10800                 | LR__1363
10800                 | ' 
10800                 | ' if numpar=5 then   						 'simple adsr
10800     10 4E 05 F1 | 	add	fp, #16
10804     A7 28 02 FB | 	rdlong	local02, fp
10808     10 4E 85 F1 | 	sub	fp, #16
1080c     05 28 0E F2 | 	cmp	local02, #5 wz
10810     14 06 90 5D |  if_ne	jmp	#LR__1370
10814     08 D0 BF FD | 	call	#_pop
10818     FF 26 02 F6 | 	mov	local01, result3
1081c     40 4E 05 F1 | 	add	fp, #64
10820     A7 FA 61 FC | 	wrlong	result1, fp
10824     04 4E 05 F1 | 	add	fp, #4
10828     A7 FC 61 FC | 	wrlong	result2, fp
1082c     04 4E 05 F1 | 	add	fp, #4
10830     A7 26 62 FC | 	wrlong	local01, fp
10834     08 4E 85 F1 | 	sub	fp, #8
10838     A7 12 02 F6 | 	mov	arg01, fp
1083c     40 4E 85 F1 | 	sub	fp, #64
10840     7C D2 BF FD | 	call	#_converttofloat
10844     FD 28 02 F6 | 	mov	local02, result1
10848     2C 4E 05 F1 | 	add	fp, #44
1084c     A7 28 62 FC | 	wrlong	local02, fp
10850     2C 4E 85 F1 | 	sub	fp, #44
10854     C8 CF BF FD | 	call	#_pop
10858     FF 26 02 F6 | 	mov	local01, result3
1085c     40 4E 05 F1 | 	add	fp, #64
10860     A7 FA 61 FC | 	wrlong	result1, fp
10864     04 4E 05 F1 | 	add	fp, #4
10868     A7 FC 61 FC | 	wrlong	result2, fp
1086c     04 4E 05 F1 | 	add	fp, #4
10870     A7 26 62 FC | 	wrlong	local01, fp
10874     08 4E 85 F1 | 	sub	fp, #8
10878     A7 12 02 F6 | 	mov	arg01, fp
1087c     40 4E 85 F1 | 	sub	fp, #64
10880     3C D2 BF FD | 	call	#_converttofloat
10884     FD 28 02 F6 | 	mov	local02, result1
10888     28 4E 05 F1 | 	add	fp, #40
1088c     A7 28 62 FC | 	wrlong	local02, fp
10890     28 4E 85 F1 | 	sub	fp, #40
10894     88 CF BF FD | 	call	#_pop
10898     FF 26 02 F6 | 	mov	local01, result3
1089c     40 4E 05 F1 | 	add	fp, #64
108a0     A7 FA 61 FC | 	wrlong	result1, fp
108a4     04 4E 05 F1 | 	add	fp, #4
108a8     A7 FC 61 FC | 	wrlong	result2, fp
108ac     04 4E 05 F1 | 	add	fp, #4
108b0     A7 26 62 FC | 	wrlong	local01, fp
108b4     08 4E 85 F1 | 	sub	fp, #8
108b8     A7 12 02 F6 | 	mov	arg01, fp
108bc     40 4E 85 F1 | 	sub	fp, #64
108c0     FC D1 BF FD | 	call	#_converttofloat
108c4     FD 28 02 F6 | 	mov	local02, result1
108c8     24 4E 05 F1 | 	add	fp, #36
108cc     A7 28 62 FC | 	wrlong	local02, fp
108d0     24 4E 85 F1 | 	sub	fp, #36
108d4     48 CF BF FD | 	call	#_pop
108d8     FF 26 02 F6 | 	mov	local01, result3
108dc     40 4E 05 F1 | 	add	fp, #64
108e0     A7 FA 61 FC | 	wrlong	result1, fp
108e4     04 4E 05 F1 | 	add	fp, #4
108e8     A7 FC 61 FC | 	wrlong	result2, fp
108ec     04 4E 05 F1 | 	add	fp, #4
108f0     A7 26 62 FC | 	wrlong	local01, fp
108f4     08 4E 85 F1 | 	sub	fp, #8
108f8     A7 12 02 F6 | 	mov	arg01, fp
108fc     40 4E 85 F1 | 	sub	fp, #64
10900     BC D1 BF FD | 	call	#_converttofloat
10904     FD 28 02 F6 | 	mov	local02, result1
10908     20 4E 05 F1 | 	add	fp, #32
1090c     A7 28 62 FC | 	wrlong	local02, fp
10910     20 4E 85 F1 | 	sub	fp, #32
10914     08 CF BF FD | 	call	#_pop
10918     FF 26 02 F6 | 	mov	local01, result3
1091c     40 4E 05 F1 | 	add	fp, #64
10920     A7 FA 61 FC | 	wrlong	result1, fp
10924     04 4E 05 F1 | 	add	fp, #4
10928     A7 FC 61 FC | 	wrlong	result2, fp
1092c     04 4E 05 F1 | 	add	fp, #4
10930     A7 26 62 FC | 	wrlong	local01, fp
10934     08 4E 85 F1 | 	sub	fp, #8
10938     A7 12 02 F6 | 	mov	arg01, fp
1093c     40 4E 85 F1 | 	sub	fp, #64
10940     C0 D0 BF FD | 	call	#_converttoint
10944     18 4E 05 F1 | 	add	fp, #24
10948     A7 FA 61 FC | 	wrlong	result1, fp
1094c                 | '   t1=pop() : rr=converttofloat(t1)
1094c                 | '   t1=pop() : ss=converttofloat(t1) 
1094c                 | '   t1=pop() : dd=converttofloat(t1)
1094c                 | '   t1=pop() : aa=converttofloat(t1)
1094c                 | '   t1=pop() : channel=converttoint(t1)
1094c                 | '   if ss<0.0 then ss=0.0 
1094c     10 4E 05 F1 | 	add	fp, #16
10950     A7 12 02 FB | 	rdlong	arg01, fp
10954     28 4E 85 F1 | 	sub	fp, #40
10958     00 14 06 F6 | 	mov	arg02, #0
1095c     01 16 06 F6 | 	mov	arg03, #1
10960     60 AA B1 FD | 	call	#__system___float_cmp
10964     00 FA 55 F2 | 	cmps	result1, #0 wc
10968     28 4E 05 C1 |  if_b	add	fp, #40
1096c     A7 00 68 CC |  if_b	wrlong	#0, fp
10970     28 4E 85 C1 |  if_b	sub	fp, #40
10974                 | '   if ss>1.0 then ss=1.0
10974     28 4E 05 F1 | 	add	fp, #40
10978     A7 12 02 FB | 	rdlong	arg01, fp
1097c     28 4E 85 F1 | 	sub	fp, #40
10980     00 C0 1F FF 
10984     00 14 06 F6 | 	mov	arg02, ##1065353216
10988     01 16 66 F6 | 	neg	arg03, #1
1098c     34 AA B1 FD | 	call	#__system___float_cmp
10990     01 FA 55 F2 | 	cmps	result1, #1 wc
10994     28 4E 05 31 |  if_ae	add	fp, #40
10998     00 C0 9F 3F 
1099c     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
109a0     28 4E 85 31 |  if_ae	sub	fp, #40
109a4     20 4E 05 F1 | 	add	fp, #32
109a8     A7 12 02 FB | 	rdlong	arg01, fp
109ac     04 4E 05 F1 | 	add	fp, #4
109b0     A7 14 02 FB | 	rdlong	arg02, fp
109b4     24 4E 85 F1 | 	sub	fp, #36
109b8     04 A2 B1 FD | 	call	#__system___float_add
109bc     FD 12 02 F6 | 	mov	arg01, result1
109c0     2C 4E 05 F1 | 	add	fp, #44
109c4     A7 14 02 FB | 	rdlong	arg02, fp
109c8     2C 4E 85 F1 | 	sub	fp, #44
109cc     F0 A1 B1 FD | 	call	#__system___float_add
109d0     30 4E 05 F1 | 	add	fp, #48
109d4     A7 FA 61 FC | 	wrlong	result1, fp
109d8     FD 14 02 F6 | 	mov	arg02, result1
109dc     30 4E 85 F1 | 	sub	fp, #48
109e0     00 C0 21 FF 
109e4     00 12 06 F6 | 	mov	arg01, ##1132462080
109e8     A8 A7 B1 FD | 	call	#__system___float_div
109ec     34 4E 05 F1 | 	add	fp, #52
109f0     A7 FA 61 FC | 	wrlong	result1, fp
109f4     14 4E 85 F1 | 	sub	fp, #20
109f8     A7 12 02 FB | 	rdlong	arg01, fp
109fc     FD 14 02 F6 | 	mov	arg02, result1
10a00     20 4E 85 F1 | 	sub	fp, #32
10a04     88 A5 B1 FD | 	call	#__system___float_mul
10a08     FD 12 02 F6 | 	mov	arg01, result1
10a0c     01 14 06 F6 | 	mov	arg02, #1
10a10     44 AA B1 FD | 	call	#__system___float_tointeger
10a14     A7 FA 61 FC | 	wrlong	result1, fp
10a18     24 4E 05 F1 | 	add	fp, #36
10a1c     A7 12 02 FB | 	rdlong	arg01, fp
10a20     10 4E 05 F1 | 	add	fp, #16
10a24     A7 14 02 FB | 	rdlong	arg02, fp
10a28     34 4E 85 F1 | 	sub	fp, #52
10a2c     60 A5 B1 FD | 	call	#__system___float_mul
10a30     FD 12 02 F6 | 	mov	arg01, result1
10a34     01 14 06 F6 | 	mov	arg02, #1
10a38     1C AA B1 FD | 	call	#__system___float_tointeger
10a3c     04 4E 05 F1 | 	add	fp, #4
10a40     A7 FA 61 FC | 	wrlong	result1, fp
10a44     28 4E 05 F1 | 	add	fp, #40
10a48     A7 12 02 FB | 	rdlong	arg01, fp
10a4c     08 4E 05 F1 | 	add	fp, #8
10a50     A7 14 02 FB | 	rdlong	arg02, fp
10a54     34 4E 85 F1 | 	sub	fp, #52
10a58     34 A5 B1 FD | 	call	#__system___float_mul
10a5c     FD 12 02 F6 | 	mov	arg01, result1
10a60     01 14 06 F6 | 	mov	arg02, #1
10a64     F0 A9 B1 FD | 	call	#__system___float_tointeger
10a68     0C 4E 05 F1 | 	add	fp, #12
10a6c     A7 FA 61 FC | 	wrlong	result1, fp
10a70     0C 4E 85 F1 | 	sub	fp, #12
10a74     F8 BF 23 FF 
10a78     00 28 06 F6 | 	mov	local02, ##1199566848
10a7c     A7 12 02 FB | 	rdlong	arg01, fp
10a80     09 13 52 F6 | 	abs	arg01, arg01 wc
10a84     1F 2C C6 C9 |  if_b	decod	local04, #31
10a88     00 2C 06 36 |  if_ae	mov	local04, #0
10a8c     FC A0 B1 FD | 	call	#__system___float_fromuns
10a90     16 FB 61 F5 | 	xor	result1, local04
10a94     FD 14 02 F6 | 	mov	arg02, result1
10a98     14 13 02 F6 | 	mov	arg01, local02
10a9c     F4 A6 B1 FD | 	call	#__system___float_div
10aa0     38 4E 05 F1 | 	add	fp, #56
10aa4     A7 FA 61 FC | 	wrlong	result1, fp
10aa8     F8 BF 23 FF 
10aac     00 28 06 F6 | 	mov	local02, ##1199566848
10ab0     10 4E 85 F1 | 	sub	fp, #16
10ab4     A7 14 02 FB | 	rdlong	arg02, fp
10ab8     28 4E 85 F1 | 	sub	fp, #40
10abc     F8 BF 23 FF 
10ac0     00 12 06 F6 | 	mov	arg01, ##1199566848
10ac4     C8 A4 B1 FD | 	call	#__system___float_mul
10ac8     FD 14 02 F6 | 	mov	arg02, result1
10acc     14 13 02 F6 | 	mov	arg01, local02
10ad0     1F 14 E6 F4 | 	bitnot	arg02, #31
10ad4     E8 A0 B1 FD | 	call	#__system___float_add
10ad8     FD 28 02 F6 | 	mov	local02, result1
10adc     04 4E 05 F1 | 	add	fp, #4
10ae0     A7 12 02 FB | 	rdlong	arg01, fp
10ae4     04 4E 85 F1 | 	sub	fp, #4
10ae8     09 13 52 F6 | 	abs	arg01, arg01 wc
10aec     1F 2C C6 C9 |  if_b	decod	local04, #31
10af0     00 2C 06 36 |  if_ae	mov	local04, #0
10af4     94 A0 B1 FD | 	call	#__system___float_fromuns
10af8     16 FB 61 F5 | 	xor	result1, local04
10afc     FD 14 02 F6 | 	mov	arg02, result1
10b00     14 13 02 F6 | 	mov	arg01, local02
10b04     8C A6 B1 FD | 	call	#__system___float_div
10b08     24 4E 05 F1 | 	add	fp, #36
10b0c     A7 FA 61 FC | 	wrlong	result1, fp
10b10     04 4E 05 F1 | 	add	fp, #4
10b14     A7 14 02 FB | 	rdlong	arg02, fp
10b18     28 4E 85 F1 | 	sub	fp, #40
10b1c     F8 BF 23 FF 
10b20     00 12 06 F6 | 	mov	arg01, ##1199566848
10b24     68 A4 B1 FD | 	call	#__system___float_mul
10b28     FD 28 02 F6 | 	mov	local02, result1
10b2c     0C 4E 05 F1 | 	add	fp, #12
10b30     A7 12 02 FB | 	rdlong	arg01, fp
10b34     0C 4E 85 F1 | 	sub	fp, #12
10b38     09 13 52 F6 | 	abs	arg01, arg01 wc
10b3c     1F 2C C6 C9 |  if_b	decod	local04, #31
10b40     00 2C 06 36 |  if_ae	mov	local04, #0
10b44     44 A0 B1 FD | 	call	#__system___float_fromuns
10b48     16 FB 61 F5 | 	xor	result1, local04
10b4c     FD 14 02 F6 | 	mov	arg02, result1
10b50     14 13 02 F6 | 	mov	arg01, local02
10b54     3C A6 B1 FD | 	call	#__system___float_div
10b58     3C 4E 05 F1 | 	add	fp, #60
10b5c     A7 FA 61 FC | 	wrlong	result1, fp
10b60     24 4E 85 F1 | 	sub	fp, #36
10b64     A7 2E 02 FB | 	rdlong	local05, fp
10b68     18 4E 85 F1 | 	sub	fp, #24
10b6c     01 2E 66 F0 | 	shl	local05, #1
10b70     52 00 00 FF 
10b74     0C E5 05 F1 | 	add	objptr, ##42252
10b78     F2 2E 02 F1 | 	add	local05, objptr
10b7c     A7 30 02 FB | 	rdlong	local06, fp
10b80     04 4E 05 F1 | 	add	fp, #4
10b84     A7 2A 02 FB | 	rdlong	local03, fp
10b88     15 31 02 F1 | 	add	local06, local03
10b8c     17 31 52 FC | 	wrword	local06, local05
10b90     1C 4E 05 F1 | 	add	fp, #28
10b94     A7 00 68 FC | 	wrlong	#0, fp
10b98                 | '   fulltime=aa+dd+rr
10b98                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
10b98                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
10b98                 | '   suspoints(channel)=a+d
10b98                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
10b98     0C 4E 85 F1 | 	sub	fp, #12
10b9c     A7 00 68 FC | 	wrlong	#0, fp
10ba0     14 4E 85 F1 | 	sub	fp, #20
10ba4     A7 32 02 FB | 	rdlong	local07, fp
10ba8     52 00 00 FF 
10bac     0C E5 85 F1 | 	sub	objptr, ##42252
10bb0                 | LR__1364
10bb0     14 4E 05 F1 | 	add	fp, #20
10bb4     A7 28 02 FB | 	rdlong	local02, fp
10bb8     14 4E 85 F1 | 	sub	fp, #20
10bbc     19 29 52 F2 | 	cmps	local02, local07 wc
10bc0     80 00 90 3D |  if_ae	jmp	#LR__1365
10bc4     18 4E 05 F1 | 	add	fp, #24
10bc8     A7 30 02 FB | 	rdlong	local06, fp
10bcc     09 30 66 F0 | 	shl	local06, #9
10bd0     0C 00 00 FF 
10bd4     D8 E4 05 F1 | 	add	objptr, ##6360
10bd8     F2 30 02 F1 | 	add	local06, objptr
10bdc     04 4E 85 F1 | 	sub	fp, #4
10be0     A7 2E 02 FB | 	rdlong	local05, fp
10be4     01 2E 66 F0 | 	shl	local05, #1
10be8     18 2F 02 F1 | 	add	local05, local06
10bec     0C 4E 05 F1 | 	add	fp, #12
10bf0     A7 12 02 FB | 	rdlong	arg01, fp
10bf4     20 4E 85 F1 | 	sub	fp, #32
10bf8     0C 00 00 FF 
10bfc     D8 E4 85 F1 | 	sub	objptr, ##6360
10c00     01 14 06 F6 | 	mov	arg02, #1
10c04     50 A8 B1 FD | 	call	#__system___float_tointeger
10c08     17 FB 51 FC | 	wrword	result1, local05
10c0c     20 4E 05 F1 | 	add	fp, #32
10c10     A7 12 02 FB | 	rdlong	arg01, fp
10c14     18 4E 05 F1 | 	add	fp, #24
10c18     A7 14 02 FB | 	rdlong	arg02, fp
10c1c     38 4E 85 F1 | 	sub	fp, #56
10c20     9C 9F B1 FD | 	call	#__system___float_add
10c24     20 4E 05 F1 | 	add	fp, #32
10c28     A7 FA 61 FC | 	wrlong	result1, fp
10c2c     0C 4E 85 F1 | 	sub	fp, #12
10c30     A7 30 02 FB | 	rdlong	local06, fp
10c34     01 30 06 F1 | 	add	local06, #1
10c38     A7 30 62 FC | 	wrlong	local06, fp
10c3c     14 4E 85 F1 | 	sub	fp, #20
10c40     6C FF 9F FD | 	jmp	#LR__1364
10c44                 | LR__1365
10c44                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
10c44     A7 28 02 FB | 	rdlong	local02, fp
10c48     14 4E 05 F1 | 	add	fp, #20
10c4c     A7 28 62 FC | 	wrlong	local02, fp
10c50     14 4E 85 F1 | 	sub	fp, #20
10c54     A7 34 02 FB | 	rdlong	local08, fp
10c58     04 4E 05 F1 | 	add	fp, #4
10c5c     A7 28 02 FB | 	rdlong	local02, fp
10c60     04 4E 85 F1 | 	sub	fp, #4
10c64     14 35 02 F1 | 	add	local08, local02
10c68                 | LR__1366
10c68     14 4E 05 F1 | 	add	fp, #20
10c6c     A7 28 02 FB | 	rdlong	local02, fp
10c70     14 4E 85 F1 | 	sub	fp, #20
10c74     1A 29 52 F2 | 	cmps	local02, local08 wc
10c78     A8 00 90 3D |  if_ae	jmp	#LR__1367
10c7c     18 4E 05 F1 | 	add	fp, #24
10c80     A7 32 02 FB | 	rdlong	local07, fp
10c84     09 32 66 F0 | 	shl	local07, #9
10c88     0C 00 00 FF 
10c8c     D8 E4 05 F1 | 	add	objptr, ##6360
10c90     F2 32 02 F1 | 	add	local07, objptr
10c94     04 4E 85 F1 | 	sub	fp, #4
10c98     A7 30 02 FB | 	rdlong	local06, fp
10c9c     01 30 66 F0 | 	shl	local06, #1
10ca0     19 31 02 F1 | 	add	local06, local07
10ca4     0C 4E 05 F1 | 	add	fp, #12
10ca8     A7 12 02 FB | 	rdlong	arg01, fp
10cac     20 4E 85 F1 | 	sub	fp, #32
10cb0     0C 00 00 FF 
10cb4     D8 E4 85 F1 | 	sub	objptr, ##6360
10cb8     01 14 06 F6 | 	mov	arg02, #1
10cbc     98 A7 B1 FD | 	call	#__system___float_tointeger
10cc0     18 FB 51 FC | 	wrword	result1, local06
10cc4     20 4E 05 F1 | 	add	fp, #32
10cc8     A7 12 02 FB | 	rdlong	arg01, fp
10ccc     04 4E 05 F1 | 	add	fp, #4
10cd0     A7 14 02 FB | 	rdlong	arg02, fp
10cd4     24 4E 85 F1 | 	sub	fp, #36
10cd8     1F 14 E6 F4 | 	bitnot	arg02, #31
10cdc     E0 9E B1 FD | 	call	#__system___float_add
10ce0     20 4E 05 F1 | 	add	fp, #32
10ce4     A7 FA 61 FC | 	wrlong	result1, fp
10ce8     20 4E 85 F1 | 	sub	fp, #32
10cec     FD 12 02 F6 | 	mov	arg01, result1
10cf0     00 14 06 F6 | 	mov	arg02, #0
10cf4     01 16 06 F6 | 	mov	arg03, #1
10cf8     C8 A6 B1 FD | 	call	#__system___float_cmp
10cfc     00 FA 55 F2 | 	cmps	result1, #0 wc
10d00     20 4E 05 C1 |  if_b	add	fp, #32
10d04     A7 00 68 CC |  if_b	wrlong	#0, fp
10d08     20 4E 85 C1 |  if_b	sub	fp, #32
10d0c     14 4E 05 F1 | 	add	fp, #20
10d10     A7 32 02 FB | 	rdlong	local07, fp
10d14     01 32 06 F1 | 	add	local07, #1
10d18     A7 32 62 FC | 	wrlong	local07, fp
10d1c     14 4E 85 F1 | 	sub	fp, #20
10d20     44 FF 9F FD | 	jmp	#LR__1366
10d24                 | LR__1367
10d24                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
10d24     A7 28 02 FB | 	rdlong	local02, fp
10d28     04 4E 05 F1 | 	add	fp, #4
10d2c     A7 34 02 FB | 	rdlong	local08, fp
10d30     1A 29 02 F1 | 	add	local02, local08
10d34     10 4E 05 F1 | 	add	fp, #16
10d38     A7 28 62 FC | 	wrlong	local02, fp
10d3c     14 4E 85 F1 | 	sub	fp, #20
10d40                 | LR__1368
10d40     14 4E 05 F1 | 	add	fp, #20
10d44     A7 2E 02 FB | 	rdlong	local05, fp
10d48     14 4E 85 F1 | 	sub	fp, #20
10d4c     00 2F 56 F2 | 	cmps	local05, #256 wc
10d50     A8 00 90 3D |  if_ae	jmp	#LR__1369
10d54     18 4E 05 F1 | 	add	fp, #24
10d58     A7 34 02 FB | 	rdlong	local08, fp
10d5c     09 34 66 F0 | 	shl	local08, #9
10d60     0C 00 00 FF 
10d64     D8 E4 05 F1 | 	add	objptr, ##6360
10d68     F2 34 02 F1 | 	add	local08, objptr
10d6c     04 4E 85 F1 | 	sub	fp, #4
10d70     A7 32 02 FB | 	rdlong	local07, fp
10d74     01 32 66 F0 | 	shl	local07, #1
10d78     1A 33 02 F1 | 	add	local07, local08
10d7c     0C 4E 05 F1 | 	add	fp, #12
10d80     A7 12 02 FB | 	rdlong	arg01, fp
10d84     20 4E 85 F1 | 	sub	fp, #32
10d88     0C 00 00 FF 
10d8c     D8 E4 85 F1 | 	sub	objptr, ##6360
10d90     01 14 06 F6 | 	mov	arg02, #1
10d94     C0 A6 B1 FD | 	call	#__system___float_tointeger
10d98     19 FB 51 FC | 	wrword	result1, local07
10d9c     20 4E 05 F1 | 	add	fp, #32
10da0     A7 12 02 FB | 	rdlong	arg01, fp
10da4     1C 4E 05 F1 | 	add	fp, #28
10da8     A7 14 02 FB | 	rdlong	arg02, fp
10dac     3C 4E 85 F1 | 	sub	fp, #60
10db0     1F 14 E6 F4 | 	bitnot	arg02, #31
10db4     08 9E B1 FD | 	call	#__system___float_add
10db8     20 4E 05 F1 | 	add	fp, #32
10dbc     A7 FA 61 FC | 	wrlong	result1, fp
10dc0     20 4E 85 F1 | 	sub	fp, #32
10dc4     FD 12 02 F6 | 	mov	arg01, result1
10dc8     00 14 06 F6 | 	mov	arg02, #0
10dcc     01 16 06 F6 | 	mov	arg03, #1
10dd0     F0 A5 B1 FD | 	call	#__system___float_cmp
10dd4     00 FA 55 F2 | 	cmps	result1, #0 wc
10dd8     20 4E 05 C1 |  if_b	add	fp, #32
10ddc     A7 00 68 CC |  if_b	wrlong	#0, fp
10de0     20 4E 85 C1 |  if_b	sub	fp, #32
10de4     14 4E 05 F1 | 	add	fp, #20
10de8     A7 34 02 FB | 	rdlong	local08, fp
10dec     01 34 06 F1 | 	add	local08, #1
10df0     A7 34 62 FC | 	wrlong	local08, fp
10df4     14 4E 85 F1 | 	sub	fp, #20
10df8     44 FF 9F FD | 	jmp	#LR__1368
10dfc                 | LR__1369
10dfc     18 4E 05 F1 | 	add	fp, #24
10e00     A7 2E 02 FB | 	rdlong	local05, fp
10e04     18 4E 85 F1 | 	sub	fp, #24
10e08     09 2E 66 F0 | 	shl	local05, #9
10e0c     0C 00 00 FF 
10e10     D8 E4 05 F1 | 	add	objptr, ##6360
10e14     F2 2E 02 F1 | 	add	local05, objptr
10e18     FE 2F 06 F1 | 	add	local05, #510
10e1c     17 01 58 FC | 	wrword	#0, local05
10e20     0C 00 00 FF 
10e24     D8 E4 85 F1 | 	sub	objptr, ##6360
10e28                 | LR__1370
10e28     18 4E 05 F1 | 	add	fp, #24
10e2c     A7 2E 02 FB | 	rdlong	local05, fp
10e30     18 4E 85 F1 | 	sub	fp, #24
10e34     09 2E 66 F0 | 	shl	local05, #9
10e38     0C 00 00 FF 
10e3c     D8 E4 05 F1 | 	add	objptr, ##6360
10e40     F2 2E 02 F1 | 	add	local05, objptr
10e44     FE 2F 06 F1 | 	add	local05, #510
10e48     17 01 58 FC | 	wrword	#0, local05
10e4c     0C 00 00 FF 
10e50     D8 E4 85 F1 | 	sub	objptr, ##6360
10e54                 | LR__1371
10e54     A7 F0 03 F6 | 	mov	ptra, fp
10e58     B2 00 A0 FD | 	call	#popregs_
10e5c                 | _do_defenv_ret
10e5c     2D 00 64 FD | 	ret
10e60                 | 
10e60                 | ' 
10e60                 | ' '-------------------- defsnd
10e60                 | ' 
10e60                 | ' sub do_defsnd
10e60                 | _do_defsnd
10e60     04 4A 05 F6 | 	mov	COUNT_, #4
10e64     A8 00 A0 FD | 	call	#pushregs_
10e68     88 F0 07 F1 | 	add	ptra, #136
10e6c     4A 00 00 FF 
10e70     A0 E4 05 F1 | 	add	objptr, ##38048
10e74     F2 1A 02 FB | 	rdlong	arg05, objptr
10e78     0D 19 02 F6 | 	mov	arg04, arg05
10e7c     01 18 66 F0 | 	shl	arg04, #1
10e80     0D 19 02 F1 | 	add	arg04, arg05
10e84     02 18 66 F0 | 	shl	arg04, #2
10e88     03 00 00 FF 
10e8c     04 E4 85 F1 | 	sub	objptr, ##1540
10e90     F2 18 02 F1 | 	add	arg04, objptr
10e94     0C 1B 02 FB | 	rdlong	arg05, arg04
10e98     A7 1A 62 FC | 	wrlong	arg05, fp
10e9c                 | ' 
10e9c                 | ' numpar=compiledline(lineptr_e).result.uresult
10e9c                 | ' 
10e9c                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
10e9c                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
10e9c                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
10e9c                 | ' ' defsnd channel, oneint - loads the wave from the pointer
10e9c                 | ' 
10e9c                 | ' if numpar<2 then return
10e9c     02 1A 56 F2 | 	cmps	arg05, #2 wc
10ea0     47 00 00 FF 
10ea4     9C E4 85 F1 | 	sub	objptr, ##36508
10ea8     98 08 90 CD |  if_b	jmp	#LR__1403
10eac                 | '  
10eac                 | ' if numpar=2 then
10eac     A7 1A 02 FB | 	rdlong	arg05, fp
10eb0     02 1A 0E F2 | 	cmp	arg05, #2 wz
10eb4     A4 03 90 5D |  if_ne	jmp	#LR__1390
10eb8     64 C9 BF FD | 	call	#_pop
10ebc     FF 1A 02 F6 | 	mov	arg05, result3
10ec0     2C 4E 05 F1 | 	add	fp, #44
10ec4     A7 FA 61 FC | 	wrlong	result1, fp
10ec8     04 4E 05 F1 | 	add	fp, #4
10ecc     A7 FC 61 FC | 	wrlong	result2, fp
10ed0     04 4E 05 F1 | 	add	fp, #4
10ed4     A7 1A 62 FC | 	wrlong	arg05, fp
10ed8                 | '   t1=pop()
10ed8                 | '   if t1.result_type=result_string2 then 
10ed8     34 4E 85 F1 | 	sub	fp, #52
10edc     2B 1A 0E F2 | 	cmp	arg05, #43 wz
10ee0     20 00 90 5D |  if_ne	jmp	#LR__1380
10ee4     2C 4E 05 F1 | 	add	fp, #44
10ee8     A7 12 02 FB | 	rdlong	arg01, fp
10eec     2C 4E 85 F1 | 	sub	fp, #44
10ef0     A4 CA BF FD | 	call	#_convertstring
10ef4     38 4E 05 F1 | 	add	fp, #56
10ef8     A7 FA 61 FC | 	wrlong	result1, fp
10efc     38 4E 85 F1 | 	sub	fp, #56
10f00     58 00 90 FD | 	jmp	#LR__1383
10f04                 | LR__1380
10f04     34 4E 05 F1 | 	add	fp, #52
10f08     A7 1A 02 FB | 	rdlong	arg05, fp
10f0c     34 4E 85 F1 | 	sub	fp, #52
10f10     1F 1A 0E F2 | 	cmp	arg05, #31 wz
10f14     18 00 90 5D |  if_ne	jmp	#LR__1381
10f18     2C 4E 05 F1 | 	add	fp, #44
10f1c     A7 1A 02 FB | 	rdlong	arg05, fp
10f20     0C 4E 05 F1 | 	add	fp, #12
10f24     A7 1A 62 FC | 	wrlong	arg05, fp
10f28     38 4E 85 F1 | 	sub	fp, #56
10f2c     2C 00 90 FD | 	jmp	#LR__1382
10f30                 | LR__1381
10f30     C2 01 00 FF 
10f34     79 1B 06 F6 | 	mov	arg05, ##@LR__6034
10f38     38 4E 05 F1 | 	add	fp, #56
10f3c     A7 1A 62 FC | 	wrlong	arg05, fp
10f40     0C 4E 85 F1 | 	sub	fp, #12
10f44     A7 12 02 F6 | 	mov	arg01, fp
10f48     2C 4E 85 F1 | 	sub	fp, #44
10f4c     B4 CA BF FD | 	call	#_converttoint
10f50     14 4E 05 F1 | 	add	fp, #20
10f54     A7 FA 61 FC | 	wrlong	result1, fp
10f58     14 4E 85 F1 | 	sub	fp, #20
10f5c                 | LR__1382
10f5c                 | LR__1383
10f5c                 | '   if s<>"" then 
10f5c     38 4E 05 F1 | 	add	fp, #56
10f60     A7 12 02 FB | 	rdlong	arg01, fp
10f64     38 4E 85 F1 | 	sub	fp, #56
10f68     C2 01 00 FF 
10f6c     7A 15 06 F6 | 	mov	arg02, ##@LR__6035
10f70     C8 71 B1 FD | 	call	#__system___string_cmp
10f74     00 FA 0D F2 | 	cmp	result1, #0 wz
10f78     E4 01 90 AD |  if_e	jmp	#LR__1386
10f7c     A0 C8 BF FD | 	call	#_pop
10f80     FF 1A 02 F6 | 	mov	arg05, result3
10f84     2C 4E 05 F1 | 	add	fp, #44
10f88     A7 FA 61 FC | 	wrlong	result1, fp
10f8c     04 4E 05 F1 | 	add	fp, #4
10f90     A7 FC 61 FC | 	wrlong	result2, fp
10f94     04 4E 05 F1 | 	add	fp, #4
10f98     A7 1A 62 FC | 	wrlong	arg05, fp
10f9c     08 4E 85 F1 | 	sub	fp, #8
10fa0     A7 12 02 F6 | 	mov	arg01, fp
10fa4     2C 4E 85 F1 | 	sub	fp, #44
10fa8     58 CA BF FD | 	call	#_converttoint
10fac     10 4E 05 F1 | 	add	fp, #16
10fb0     A7 FA 61 FC | 	wrlong	result1, fp
10fb4                 | '     t1=pop()
10fb4                 | '     channel=converttoint(t1) : if channel>31 then return
10fb4     FD 1A 02 F6 | 	mov	arg05, result1
10fb8     10 4E 85 F1 | 	sub	fp, #16
10fbc     20 1A 56 F2 | 	cmps	arg05, #32 wc
10fc0     80 07 90 3D |  if_ae	jmp	#LR__1403
10fc4                 | '     close #9 : open "/sd/media/s/"+s for input as #9
10fc4     09 12 06 F6 | 	mov	arg01, #9
10fc8     A8 C4 B1 FD | 	call	#__system__close
10fcc     09 26 06 F6 | 	mov	local01, #9
10fd0     C2 01 00 FF 
10fd4     7B 13 06 F6 | 	mov	arg01, ##@LR__6036
10fd8     38 4E 05 F1 | 	add	fp, #56
10fdc     A7 14 02 FB | 	rdlong	arg02, fp
10fe0     38 4E 85 F1 | 	sub	fp, #56
10fe4     88 71 B1 FD | 	call	#__system___string_concat
10fe8     FD 14 02 F6 | 	mov	arg02, result1
10fec     13 13 02 F6 | 	mov	arg01, local01
10ff0     00 16 06 F6 | 	mov	arg03, #0
10ff4     20 7D B1 FD | 	call	#__system___basic_open_string
10ff8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10ffc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
11000     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
11004     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
11008     52 00 00 FF 
1100c     68 E5 05 F1 | 	add	objptr, ##42344
11010     F2 FA 61 FC | 	wrlong	result1, objptr
11014                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
11014     52 00 00 FF 
11018     68 E5 85 F1 | 	sub	objptr, ##42344
1101c     B0 00 90 AD |  if_e	jmp	#LR__1384
11020     00 12 06 F6 | 	mov	arg01, #0
11024     9C CD B1 FD | 	call	#__system___getiolock_0620
11028     FD 12 02 F6 | 	mov	arg01, result1
1102c     E4 70 B1 FD | 	call	#__system___lockmem
11030     C2 01 00 FF 
11034     88 15 06 F6 | 	mov	arg02, ##@LR__6037
11038     00 12 06 F6 | 	mov	arg01, #0
1103c     00 16 06 F6 | 	mov	arg03, #0
11040     C8 7D B1 FD | 	call	#__system___basic_print_string
11044     52 00 00 FF 
11048     68 E5 05 F1 | 	add	objptr, ##42344
1104c     F2 14 02 FB | 	rdlong	arg02, objptr
11050     52 00 00 FF 
11054     68 E5 85 F1 | 	sub	objptr, ##42344
11058     00 12 06 F6 | 	mov	arg01, #0
1105c     00 16 06 F6 | 	mov	arg03, #0
11060     0A 18 06 F6 | 	mov	arg04, #10
11064     E8 7D B1 FD | 	call	#__system___basic_print_integer
11068     C2 01 00 FF 
1106c     96 15 06 F6 | 	mov	arg02, ##@LR__6038
11070     00 12 06 F6 | 	mov	arg01, #0
11074     00 16 06 F6 | 	mov	arg03, #0
11078     90 7D B1 FD | 	call	#__system___basic_print_string
1107c     00 26 06 F6 | 	mov	local01, #0
11080     52 00 00 FF 
11084     68 E5 05 F1 | 	add	objptr, ##42344
11088     F2 12 02 FB | 	rdlong	arg01, objptr
1108c     52 00 00 FF 
11090     68 E5 85 F1 | 	sub	objptr, ##42344
11094     0C 9A B1 FD | 	call	#__system___strerror
11098     FD 14 02 F6 | 	mov	arg02, result1
1109c     13 13 02 F6 | 	mov	arg01, local01
110a0     00 16 06 F6 | 	mov	arg03, #0
110a4     64 7D B1 FD | 	call	#__system___basic_print_string
110a8     00 12 06 F6 | 	mov	arg01, #0
110ac     0A 14 06 F6 | 	mov	arg02, #10
110b0     00 16 06 F6 | 	mov	arg03, #0
110b4     FC 7C B1 FD | 	call	#__system___basic_print_char
110b8     00 12 06 F6 | 	mov	arg01, #0
110bc     04 CD B1 FD | 	call	#__system___getiolock_0620
110c0     FD 00 68 FC | 	wrlong	#0, result1
110c4     09 12 06 F6 | 	mov	arg01, #9
110c8     A8 C3 B1 FD | 	call	#__system__close
110cc     74 06 90 FD | 	jmp	#LR__1403
110d0                 | LR__1384
110d0                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
110d0     04 4E 05 F1 | 	add	fp, #4
110d4     A7 00 68 FC | 	wrlong	#0, fp
110d8                 | LR__1385
110d8     A7 26 02 FB | 	rdlong	local01, fp
110dc     01 26 66 F0 | 	shl	local01, #1
110e0     11 14 06 F6 | 	mov	arg02, #17
110e4     13 15 02 F1 | 	add	arg02, local01
110e8     78 4E 05 F1 | 	add	fp, #120
110ec     A7 16 02 F6 | 	mov	arg03, fp
110f0     7C 4E 85 F1 | 	sub	fp, #124
110f4     09 12 06 F6 | 	mov	arg01, #9
110f8     01 18 06 F6 | 	mov	arg04, #1
110fc     02 1A 06 F6 | 	mov	arg05, #2
11100     84 7E B1 FD | 	call	#__system___basic_get
11104     10 4E 05 F1 | 	add	fp, #16
11108     A7 12 02 FB | 	rdlong	arg01, fp
1110c     0B 12 66 F0 | 	shl	arg01, #11
11110     0C 4E 85 F1 | 	sub	fp, #12
11114     A7 26 02 FB | 	rdlong	local01, fp
11118     01 26 66 F0 | 	shl	local01, #1
1111c     13 13 02 F1 | 	add	arg01, local01
11120     78 4E 05 F1 | 	add	fp, #120
11124     A7 14 E2 FA | 	rdword	arg02, fp
11128     7C 4E 85 F1 | 	sub	fp, #124
1112c     0F 14 66 F7 | 	signx	arg02, #15
11130     70 37 B1 FD | 	call	#_psdpoke
11134     04 4E 05 F1 | 	add	fp, #4
11138     A7 26 02 FB | 	rdlong	local01, fp
1113c     01 26 06 F1 | 	add	local01, #1
11140     A7 26 62 FC | 	wrlong	local01, fp
11144     02 00 00 FF 
11148     01 26 56 F2 | 	cmps	local01, ##1025 wc
1114c     88 FF 9F CD |  if_b	jmp	#LR__1385
11150     04 4E 85 F1 | 	sub	fp, #4
11154                 | '     close #9
11154     09 12 06 F6 | 	mov	arg01, #9
11158     18 C3 B1 FD | 	call	#__system__close
1115c                 | '     return
1115c     E4 05 90 FD | 	jmp	#LR__1403
11160                 | LR__1386
11160                 | '     if wptr < ($80000 - 2048) then 
11160     14 4E 05 F1 | 	add	fp, #20
11164     A7 26 02 FB | 	rdlong	local01, fp
11168     14 4E 85 F1 | 	sub	fp, #20
1116c     FC 03 00 FF 
11170     00 26 56 F2 | 	cmps	local01, ##522240 wc
11174     70 00 90 3D |  if_ae	jmp	#LR__1388
11178                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
11178     04 4E 05 F1 | 	add	fp, #4
1117c     A7 00 68 FC | 	wrlong	#0, fp
11180     04 4E 85 F1 | 	sub	fp, #4
11184                 | LR__1387
11184     10 4E 05 F1 | 	add	fp, #16
11188     A7 26 02 FB | 	rdlong	local01, fp
1118c     0B 26 66 F0 | 	shl	local01, #11
11190     0C 4E 85 F1 | 	sub	fp, #12
11194     A7 1A 02 FB | 	rdlong	arg05, fp
11198     0D 19 02 F6 | 	mov	arg04, arg05
1119c     01 18 66 F0 | 	shl	arg04, #1
111a0     0C 27 02 F1 | 	add	local01, arg04
111a4     10 4E 05 F1 | 	add	fp, #16
111a8     A7 12 02 FB | 	rdlong	arg01, fp
111ac     14 4E 85 F1 | 	sub	fp, #20
111b0     01 1A 66 F0 | 	shl	arg05, #1
111b4     0D 13 02 F1 | 	add	arg01, arg05
111b8     09 15 E2 FA | 	rdword	arg02, arg01
111bc     13 13 02 F6 | 	mov	arg01, local01
111c0     E0 36 B1 FD | 	call	#_psdpoke
111c4     04 4E 05 F1 | 	add	fp, #4
111c8     A7 26 02 FB | 	rdlong	local01, fp
111cc     01 26 06 F1 | 	add	local01, #1
111d0     A7 26 62 FC | 	wrlong	local01, fp
111d4     04 4E 85 F1 | 	sub	fp, #4
111d8     02 00 00 FF 
111dc     00 26 56 F2 | 	cmps	local01, ##1024 wc
111e0     A0 FF 9F CD |  if_b	jmp	#LR__1387
111e4     5C 05 90 FD | 	jmp	#LR__1403
111e8                 | LR__1388
111e8                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
111e8     04 4E 05 F1 | 	add	fp, #4
111ec     A7 00 68 FC | 	wrlong	#0, fp
111f0     04 4E 85 F1 | 	sub	fp, #4
111f4                 | LR__1389
111f4     10 4E 05 F1 | 	add	fp, #16
111f8     A7 26 02 FB | 	rdlong	local01, fp
111fc     0B 26 66 F0 | 	shl	local01, #11
11200     0C 4E 85 F1 | 	sub	fp, #12
11204     A7 1A 02 FB | 	rdlong	arg05, fp
11208     0D 19 02 F6 | 	mov	arg04, arg05
1120c     01 18 66 F0 | 	shl	arg04, #1
11210     0C 27 02 F1 | 	add	local01, arg04
11214     10 4E 05 F1 | 	add	fp, #16
11218     A7 12 02 FB | 	rdlong	arg01, fp
1121c     14 4E 85 F1 | 	sub	fp, #20
11220     01 1A 66 F0 | 	shl	arg05, #1
11224     0D 13 02 F1 | 	add	arg01, arg05
11228     B8 37 B1 FD | 	call	#_psdpeek
1122c     FD 14 02 F6 | 	mov	arg02, result1
11230     13 13 02 F6 | 	mov	arg01, local01
11234     6C 36 B1 FD | 	call	#_psdpoke
11238     04 4E 05 F1 | 	add	fp, #4
1123c     A7 26 02 FB | 	rdlong	local01, fp
11240     01 26 06 F1 | 	add	local01, #1
11244     A7 26 62 FC | 	wrlong	local01, fp
11248     04 4E 85 F1 | 	sub	fp, #4
1124c     02 00 00 FF 
11250     00 26 56 F2 | 	cmps	local01, ##1024 wc
11254     9C FF 9F CD |  if_b	jmp	#LR__1389
11258                 | '     return 
11258     E8 04 90 FD | 	jmp	#LR__1403
1125c                 | '   return
1125c                 | LR__1390
1125c                 | ' for i=0 to 15 : harm(i)=0: next i  
1125c     04 4E 05 F1 | 	add	fp, #4
11260     A7 00 68 FC | 	wrlong	#0, fp
11264     97 16 48 FB | 	callpa	#(@LR__1392-@LR__1391)>>2,fcache_load_ptr_
11268                 | LR__1391
11268     A7 26 02 FB | 	rdlong	local01, fp
1126c     02 26 66 F0 | 	shl	local01, #2
11270     38 4E 05 F1 | 	add	fp, #56
11274     A7 26 02 F1 | 	add	local01, fp
11278     13 01 68 FC | 	wrlong	#0, local01
1127c     38 4E 85 F1 | 	sub	fp, #56
11280     A7 26 02 FB | 	rdlong	local01, fp
11284     01 26 06 F1 | 	add	local01, #1
11288     A7 26 62 FC | 	wrlong	local01, fp
1128c     10 26 56 F2 | 	cmps	local01, #16 wc
11290     D4 FF 9F CD |  if_b	jmp	#LR__1391
11294                 | LR__1392
11294     04 4E 85 F1 | 	sub	fp, #4
11298                 | ' for i=numpar to 2 step -1 
11298     A7 26 02 FB | 	rdlong	local01, fp
1129c     04 4E 05 F1 | 	add	fp, #4
112a0     A7 26 62 FC | 	wrlong	local01, fp
112a4     04 4E 85 F1 | 	sub	fp, #4
112a8                 | LR__1393
112a8     74 C5 BF FD | 	call	#_pop
112ac     2C 4E 05 F1 | 	add	fp, #44
112b0     A7 FA 61 FC | 	wrlong	result1, fp
112b4     04 4E 05 F1 | 	add	fp, #4
112b8     A7 FC 61 FC | 	wrlong	result2, fp
112bc     04 4E 05 F1 | 	add	fp, #4
112c0     A7 FE 61 FC | 	wrlong	result3, fp
112c4     30 4E 85 F1 | 	sub	fp, #48
112c8     A7 26 02 FB | 	rdlong	local01, fp
112cc     02 26 86 F1 | 	sub	local01, #2
112d0     02 26 66 F0 | 	shl	local01, #2
112d4     38 4E 05 F1 | 	add	fp, #56
112d8     A7 26 02 F1 | 	add	local01, fp
112dc     10 4E 85 F1 | 	sub	fp, #16
112e0     A7 12 02 F6 | 	mov	arg01, fp
112e4     2C 4E 85 F1 | 	sub	fp, #44
112e8     D4 C7 BF FD | 	call	#_converttofloat
112ec     13 FB 61 FC | 	wrlong	result1, local01
112f0     04 4E 05 F1 | 	add	fp, #4
112f4     A7 26 02 FB | 	rdlong	local01, fp
112f8     01 26 86 F1 | 	sub	local01, #1
112fc     A7 26 62 FC | 	wrlong	local01, fp
11300     04 4E 85 F1 | 	sub	fp, #4
11304     02 26 56 F2 | 	cmps	local01, #2 wc
11308     9C FF 9F 3D |  if_ae	jmp	#LR__1393
1130c     10 C5 BF FD | 	call	#_pop
11310     FF 26 02 F6 | 	mov	local01, result3
11314     2C 4E 05 F1 | 	add	fp, #44
11318     A7 FA 61 FC | 	wrlong	result1, fp
1131c     04 4E 05 F1 | 	add	fp, #4
11320     A7 FC 61 FC | 	wrlong	result2, fp
11324     04 4E 05 F1 | 	add	fp, #4
11328     A7 26 62 FC | 	wrlong	local01, fp
1132c     08 4E 85 F1 | 	sub	fp, #8
11330     A7 12 02 F6 | 	mov	arg01, fp
11334     2C 4E 85 F1 | 	sub	fp, #44
11338     C8 C6 BF FD | 	call	#_converttoint
1133c     10 4E 05 F1 | 	add	fp, #16
11340     A7 FA 61 FC | 	wrlong	result1, fp
11344                 | ' t1=pop()
11344                 | ' channel=converttoint(t1) : : if channel>31 then return
11344     FD 26 02 F6 | 	mov	local01, result1
11348     10 4E 85 F1 | 	sub	fp, #16
1134c     20 26 56 F2 | 	cmps	local01, #32 wc
11350     F0 03 90 3D |  if_ae	jmp	#LR__1403
11354     20 4E 05 F1 | 	add	fp, #32
11358     A7 00 68 FC | 	wrlong	#0, fp
1135c                 | ' max=0
1135c                 | ' if harm(0)<0 then
1135c     1C 4E 05 F1 | 	add	fp, #28
11360     A7 12 02 FB | 	rdlong	arg01, fp
11364     3C 4E 85 F1 | 	sub	fp, #60
11368     00 14 06 F6 | 	mov	arg02, #0
1136c     01 16 06 F6 | 	mov	arg03, #1
11370     50 A0 B1 FD | 	call	#__system___float_cmp
11374     00 FA 55 F2 | 	cmps	result1, #0 wc
11378     04 01 90 3D |  if_ae	jmp	#LR__1396
1137c     3C 4E 05 F1 | 	add	fp, #60
11380     A7 FA 01 FB | 	rdlong	result1, fp
11384     1F FA 05 F4 | 	bitl	result1, #31
11388     24 4E 85 F1 | 	sub	fp, #36
1138c     A7 FA 61 FC | 	wrlong	result1, fp
11390     28 4E 05 F1 | 	add	fp, #40
11394     A7 FA 01 FB | 	rdlong	result1, fp
11398     1F FA 05 F4 | 	bitl	result1, #31
1139c     24 4E 85 F1 | 	sub	fp, #36
113a0     A7 FA 61 FC | 	wrlong	result1, fp
113a4     20 4E 05 F1 | 	add	fp, #32
113a8     00 C0 9F FF 
113ac     A7 00 68 FC | 	wrlong	##1065353216, fp
113b0     24 4E 85 F1 | 	sub	fp, #36
113b4     A7 26 02 FB | 	rdlong	local01, fp
113b8     28 4E 05 F1 | 	add	fp, #40
113bc     A7 26 62 FC | 	wrlong	local01, fp
113c0     24 4E 85 F1 | 	sub	fp, #36
113c4     A7 26 02 FB | 	rdlong	local01, fp
113c8     28 4E 05 F1 | 	add	fp, #40
113cc     A7 26 62 FC | 	wrlong	local01, fp
113d0                 | '   harm(0)=1
113d0                 | '   harm(1)=even
113d0                 | '   harm(2)=odd
113d0                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
113d0     40 4E 85 F1 | 	sub	fp, #64
113d4     A7 06 68 FC | 	wrlong	#3, fp
113d8                 | LR__1394
113d8     A7 1A 02 FB | 	rdlong	arg05, fp
113dc     0D 29 02 F6 | 	mov	local02, arg05
113e0     02 28 66 F0 | 	shl	local02, #2
113e4     38 4E 05 F1 | 	add	fp, #56
113e8     A7 28 02 F1 | 	add	local02, fp
113ec     02 1A 86 F1 | 	sub	arg05, #2
113f0     02 1A 66 F0 | 	shl	arg05, #2
113f4     A7 1A 02 F1 | 	add	arg05, fp
113f8     0D 13 02 FB | 	rdlong	arg01, arg05
113fc     24 4E 85 F1 | 	sub	fp, #36
11400     A7 14 02 FB | 	rdlong	arg02, fp
11404     18 4E 85 F1 | 	sub	fp, #24
11408     84 9B B1 FD | 	call	#__system___float_mul
1140c     14 FB 61 FC | 	wrlong	result1, local02
11410     04 4E 05 F1 | 	add	fp, #4
11414     A7 2A 02 FB | 	rdlong	local03, fp
11418     02 2A 06 F1 | 	add	local03, #2
1141c     A7 2A 62 FC | 	wrlong	local03, fp
11420     10 2A 56 F2 | 	cmps	local03, #16 wc
11424     B0 FF 9F CD |  if_b	jmp	#LR__1394
11428                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
11428     A7 08 68 FC | 	wrlong	#4, fp
1142c                 | LR__1395
1142c     A7 2A 02 FB | 	rdlong	local03, fp
11430     15 29 02 F6 | 	mov	local02, local03
11434     02 28 66 F0 | 	shl	local02, #2
11438     38 4E 05 F1 | 	add	fp, #56
1143c     A7 28 02 F1 | 	add	local02, fp
11440     02 2A 86 F1 | 	sub	local03, #2
11444     02 2A 66 F0 | 	shl	local03, #2
11448     A7 2A 02 F1 | 	add	local03, fp
1144c     15 13 02 FB | 	rdlong	arg01, local03
11450     20 4E 85 F1 | 	sub	fp, #32
11454     A7 14 02 FB | 	rdlong	arg02, fp
11458     1C 4E 85 F1 | 	sub	fp, #28
1145c     30 9B B1 FD | 	call	#__system___float_mul
11460     14 FB 61 FC | 	wrlong	result1, local02
11464     04 4E 05 F1 | 	add	fp, #4
11468     A7 2A 02 FB | 	rdlong	local03, fp
1146c     02 2A 06 F1 | 	add	local03, #2
11470     A7 2A 62 FC | 	wrlong	local03, fp
11474     0F 2A 56 F2 | 	cmps	local03, #15 wc
11478     B0 FF 9F CD |  if_b	jmp	#LR__1395
1147c     04 4E 85 F1 | 	sub	fp, #4
11480                 | LR__1396
11480                 | ' if harm(0)>=0 then ' synthesize with harmonics
11480     3C 4E 05 F1 | 	add	fp, #60
11484     A7 12 02 FB | 	rdlong	arg01, fp
11488     3C 4E 85 F1 | 	sub	fp, #60
1148c     00 14 06 F6 | 	mov	arg02, #0
11490     01 16 66 F6 | 	neg	arg03, #1
11494     2C 9F B1 FD | 	call	#__system___float_cmp
11498     00 FA 55 F2 | 	cmps	result1, #0 wc
1149c     A4 02 90 CD |  if_b	jmp	#LR__1402
114a0                 | '   for i=0 to 1023
114a0     04 4E 05 F1 | 	add	fp, #4
114a4     A7 00 68 FC | 	wrlong	#0, fp
114a8     04 4E 85 F1 | 	sub	fp, #4
114ac                 | LR__1397
114ac     24 4E 05 F1 | 	add	fp, #36
114b0     A7 00 68 FC | 	wrlong	#0, fp
114b4                 | '     spl=0
114b4                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
114b4     1C 4E 85 F1 | 	sub	fp, #28
114b8     A7 00 68 FC | 	wrlong	#0, fp
114bc                 | LR__1398
114bc     A7 28 02 FB | 	rdlong	local02, fp
114c0     02 28 66 F0 | 	shl	local02, #2
114c4     34 4E 05 F1 | 	add	fp, #52
114c8     A7 28 02 F1 | 	add	local02, fp
114cc     14 2B 02 FB | 	rdlong	local03, local02
114d0     87 E4 1D FF 
114d4     DB 29 06 F6 | 	mov	local02, ##1003032539
114d8     38 4E 85 F1 | 	sub	fp, #56
114dc     A7 12 02 FB | 	rdlong	arg01, fp
114e0     04 4E 85 F1 | 	sub	fp, #4
114e4     09 13 52 F6 | 	abs	arg01, arg01 wc
114e8     1F 2C C6 C9 |  if_b	decod	local04, #31
114ec     00 2C 06 36 |  if_ae	mov	local04, #0
114f0     98 96 B1 FD | 	call	#__system___float_fromuns
114f4     16 FB 61 F5 | 	xor	result1, local04
114f8     FD 14 02 F6 | 	mov	arg02, result1
114fc     14 13 02 F6 | 	mov	arg01, local02
11500     8C 9A B1 FD | 	call	#__system___float_mul
11504     FD 28 02 F6 | 	mov	local02, result1
11508     08 4E 05 F1 | 	add	fp, #8
1150c     A7 12 02 FB | 	rdlong	arg01, fp
11510     08 4E 85 F1 | 	sub	fp, #8
11514     01 12 06 F1 | 	add	arg01, #1
11518     09 13 52 F6 | 	abs	arg01, arg01 wc
1151c     1F 2C C6 C9 |  if_b	decod	local04, #31
11520     00 2C 06 36 |  if_ae	mov	local04, #0
11524     64 96 B1 FD | 	call	#__system___float_fromuns
11528     16 FB 61 F5 | 	xor	result1, local04
1152c     FD 14 02 F6 | 	mov	arg02, result1
11530     14 13 02 F6 | 	mov	arg01, local02
11534     58 9A B1 FD | 	call	#__system___float_mul
11538     FD 12 02 F6 | 	mov	arg01, result1
1153c     B4 A3 B1 FD | 	call	#__system____builtin_sinf
11540     FD 14 02 F6 | 	mov	arg02, result1
11544     15 13 02 F6 | 	mov	arg01, local03
11548     44 9A B1 FD | 	call	#__system___float_mul
1154c     FD 14 02 F6 | 	mov	arg02, result1
11550     24 4E 05 F1 | 	add	fp, #36
11554     A7 12 02 FB | 	rdlong	arg01, fp
11558     24 4E 85 F1 | 	sub	fp, #36
1155c     60 96 B1 FD | 	call	#__system___float_add
11560     24 4E 05 F1 | 	add	fp, #36
11564     A7 FA 61 FC | 	wrlong	result1, fp
11568     1C 4E 85 F1 | 	sub	fp, #28
1156c     A7 16 02 FB | 	rdlong	arg03, fp
11570     01 16 06 F1 | 	add	arg03, #1
11574     A7 16 62 FC | 	wrlong	arg03, fp
11578     10 16 56 F2 | 	cmps	arg03, #16 wc
1157c     3C FF 9F CD |  if_b	jmp	#LR__1398
11580                 | '     if abs(spl)>max then max=abs(spl)  
11580     1C 4E 05 F1 | 	add	fp, #28
11584     A7 12 02 FB | 	rdlong	arg01, fp
11588     1F 12 06 F4 | 	bitl	arg01, #31
1158c     04 4E 85 F1 | 	sub	fp, #4
11590     A7 14 02 FB | 	rdlong	arg02, fp
11594     20 4E 85 F1 | 	sub	fp, #32
11598     01 16 66 F6 | 	neg	arg03, #1
1159c     24 9E B1 FD | 	call	#__system___float_cmp
115a0     01 FA 55 F2 | 	cmps	result1, #1 wc
115a4     18 00 90 CD |  if_b	jmp	#LR__1399
115a8     24 4E 05 F1 | 	add	fp, #36
115ac     A7 FA 01 FB | 	rdlong	result1, fp
115b0     1F FA 05 F4 | 	bitl	result1, #31
115b4     04 4E 85 F1 | 	sub	fp, #4
115b8     A7 FA 61 FC | 	wrlong	result1, fp
115bc     20 4E 85 F1 | 	sub	fp, #32
115c0                 | LR__1399
115c0     04 4E 05 F1 | 	add	fp, #4
115c4     A7 2A 02 FB | 	rdlong	local03, fp
115c8     01 2A 06 F1 | 	add	local03, #1
115cc     A7 2A 62 FC | 	wrlong	local03, fp
115d0     04 4E 85 F1 | 	sub	fp, #4
115d4     02 00 00 FF 
115d8     00 2A 56 F2 | 	cmps	local03, ##1024 wc
115dc     CC FE 9F CD |  if_b	jmp	#LR__1397
115e0                 | '   for i=0 to 1023
115e0     04 4E 05 F1 | 	add	fp, #4
115e4     A7 00 68 FC | 	wrlong	#0, fp
115e8     04 4E 85 F1 | 	sub	fp, #4
115ec                 | LR__1400
115ec     24 4E 05 F1 | 	add	fp, #36
115f0     A7 00 68 FC | 	wrlong	#0, fp
115f4                 | '     spl=0
115f4                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
115f4     1C 4E 85 F1 | 	sub	fp, #28
115f8     A7 00 68 FC | 	wrlong	#0, fp
115fc                 | LR__1401
115fc     A7 2A 02 FB | 	rdlong	local03, fp
11600     02 2A 66 F0 | 	shl	local03, #2
11604     34 4E 05 F1 | 	add	fp, #52
11608     A7 2A 02 F1 | 	add	local03, fp
1160c     15 2B 02 FB | 	rdlong	local03, local03
11610     1C 4E 85 F1 | 	sub	fp, #28
11614     A7 14 02 FB | 	rdlong	arg02, fp
11618     20 4E 85 F1 | 	sub	fp, #32
1161c     58 7F 23 FF 
11620     00 12 06 F6 | 	mov	arg01, ##1191096320
11624     6C 9B B1 FD | 	call	#__system___float_div
11628     FD 14 02 F6 | 	mov	arg02, result1
1162c     15 13 02 F6 | 	mov	arg01, local03
11630     5C 99 B1 FD | 	call	#__system___float_mul
11634     FD 2A 02 F6 | 	mov	local03, result1
11638     87 E4 1D FF 
1163c     DB 29 06 F6 | 	mov	local02, ##1003032539
11640     04 4E 05 F1 | 	add	fp, #4
11644     A7 12 02 FB | 	rdlong	arg01, fp
11648     04 4E 85 F1 | 	sub	fp, #4
1164c     09 13 52 F6 | 	abs	arg01, arg01 wc
11650     1F 2C C6 C9 |  if_b	decod	local04, #31
11654     00 2C 06 36 |  if_ae	mov	local04, #0
11658     30 95 B1 FD | 	call	#__system___float_fromuns
1165c     16 FB 61 F5 | 	xor	result1, local04
11660     FD 14 02 F6 | 	mov	arg02, result1
11664     14 13 02 F6 | 	mov	arg01, local02
11668     24 99 B1 FD | 	call	#__system___float_mul
1166c     FD 28 02 F6 | 	mov	local02, result1
11670     08 4E 05 F1 | 	add	fp, #8
11674     A7 12 02 FB | 	rdlong	arg01, fp
11678     08 4E 85 F1 | 	sub	fp, #8
1167c     01 12 06 F1 | 	add	arg01, #1
11680     09 13 52 F6 | 	abs	arg01, arg01 wc
11684     1F 2C C6 C9 |  if_b	decod	local04, #31
11688     00 2C 06 36 |  if_ae	mov	local04, #0
1168c     FC 94 B1 FD | 	call	#__system___float_fromuns
11690     16 FB 61 F5 | 	xor	result1, local04
11694     FD 14 02 F6 | 	mov	arg02, result1
11698     14 13 02 F6 | 	mov	arg01, local02
1169c     F0 98 B1 FD | 	call	#__system___float_mul
116a0     FD 12 02 F6 | 	mov	arg01, result1
116a4     4C A2 B1 FD | 	call	#__system____builtin_sinf
116a8     FD 14 02 F6 | 	mov	arg02, result1
116ac     15 13 02 F6 | 	mov	arg01, local03
116b0     DC 98 B1 FD | 	call	#__system___float_mul
116b4     FD 14 02 F6 | 	mov	arg02, result1
116b8     24 4E 05 F1 | 	add	fp, #36
116bc     A7 12 02 FB | 	rdlong	arg01, fp
116c0     24 4E 85 F1 | 	sub	fp, #36
116c4     F8 94 B1 FD | 	call	#__system___float_add
116c8     24 4E 05 F1 | 	add	fp, #36
116cc     A7 FA 61 FC | 	wrlong	result1, fp
116d0     1C 4E 85 F1 | 	sub	fp, #28
116d4     A7 2A 02 FB | 	rdlong	local03, fp
116d8     01 2A 06 F1 | 	add	local03, #1
116dc     A7 2A 62 FC | 	wrlong	local03, fp
116e0     10 2A 56 F2 | 	cmps	local03, #16 wc
116e4     14 FF 9F CD |  if_b	jmp	#LR__1401
116e8     08 4E 05 F1 | 	add	fp, #8
116ec     A7 2A 02 FB | 	rdlong	local03, fp
116f0     0B 2A 66 F0 | 	shl	local03, #11
116f4     0C 4E 85 F1 | 	sub	fp, #12
116f8     A7 28 02 FB | 	rdlong	local02, fp
116fc     01 28 66 F0 | 	shl	local02, #1
11700     14 2B 02 F1 | 	add	local03, local02
11704     20 4E 05 F1 | 	add	fp, #32
11708     A7 12 02 FB | 	rdlong	arg01, fp
1170c     24 4E 85 F1 | 	sub	fp, #36
11710     01 14 06 F6 | 	mov	arg02, #1
11714     40 9D B1 FD | 	call	#__system___float_tointeger
11718     FD 14 02 F6 | 	mov	arg02, result1
1171c     15 13 02 F6 | 	mov	arg01, local03
11720     80 31 B1 FD | 	call	#_psdpoke
11724     04 4E 05 F1 | 	add	fp, #4
11728     A7 2A 02 FB | 	rdlong	local03, fp
1172c     01 2A 06 F1 | 	add	local03, #1
11730     A7 2A 62 FC | 	wrlong	local03, fp
11734     04 4E 85 F1 | 	sub	fp, #4
11738     02 00 00 FF 
1173c     00 2A 56 F2 | 	cmps	local03, ##1024 wc
11740     A8 FE 9F CD |  if_b	jmp	#LR__1400
11744                 | LR__1402
11744                 | LR__1403
11744     A7 F0 03 F6 | 	mov	ptra, fp
11748     B2 00 A0 FD | 	call	#popregs_
1174c                 | _do_defsnd_ret
1174c     2D 00 64 FD | 	ret
11750                 | 
11750                 | ' 
11750                 | ' '-------------------- defsprite
11750                 | ' 
11750                 | ' sub do_defsprite
11750                 | _do_defsprite
11750     07 4A 05 F6 | 	mov	COUNT_, #7
11754     A8 00 A0 FD | 	call	#pushregs_
11758     60 F0 07 F1 | 	add	ptra, #96
1175c     C0 C0 BF FD | 	call	#_pop
11760     FD 16 02 F6 | 	mov	arg03, result1
11764     FE 14 02 F6 | 	mov	arg02, result2
11768     FF 12 02 F6 | 	mov	arg01, result3
1176c     30 4E 05 F1 | 	add	fp, #48
11770     A7 16 62 FC | 	wrlong	arg03, fp
11774     04 4E 05 F1 | 	add	fp, #4
11778     A7 14 62 FC | 	wrlong	arg02, fp
1177c     04 4E 05 F1 | 	add	fp, #4
11780     A7 12 62 FC | 	wrlong	arg01, fp
11784     38 4E 85 F1 | 	sub	fp, #56
11788     94 C0 BF FD | 	call	#_pop
1178c     FD 16 02 F6 | 	mov	arg03, result1
11790     FE 14 02 F6 | 	mov	arg02, result2
11794     FF 12 02 F6 | 	mov	arg01, result3
11798     24 4E 05 F1 | 	add	fp, #36
1179c     A7 16 62 FC | 	wrlong	arg03, fp
117a0     04 4E 05 F1 | 	add	fp, #4
117a4     A7 14 62 FC | 	wrlong	arg02, fp
117a8     04 4E 05 F1 | 	add	fp, #4
117ac     A7 12 62 FC | 	wrlong	arg01, fp
117b0     2C 4E 85 F1 | 	sub	fp, #44
117b4     68 C0 BF FD | 	call	#_pop
117b8     FD 16 02 F6 | 	mov	arg03, result1
117bc     FE 14 02 F6 | 	mov	arg02, result2
117c0     FF 12 02 F6 | 	mov	arg01, result3
117c4     18 4E 05 F1 | 	add	fp, #24
117c8     A7 16 62 FC | 	wrlong	arg03, fp
117cc     04 4E 05 F1 | 	add	fp, #4
117d0     A7 14 62 FC | 	wrlong	arg02, fp
117d4     04 4E 05 F1 | 	add	fp, #4
117d8     A7 12 62 FC | 	wrlong	arg01, fp
117dc     20 4E 85 F1 | 	sub	fp, #32
117e0     3C C0 BF FD | 	call	#_pop
117e4     FD 16 02 F6 | 	mov	arg03, result1
117e8     FE 14 02 F6 | 	mov	arg02, result2
117ec     FF 12 02 F6 | 	mov	arg01, result3
117f0     0C 4E 05 F1 | 	add	fp, #12
117f4     A7 16 62 FC | 	wrlong	arg03, fp
117f8     04 4E 05 F1 | 	add	fp, #4
117fc     A7 14 62 FC | 	wrlong	arg02, fp
11800     04 4E 05 F1 | 	add	fp, #4
11804     A7 12 62 FC | 	wrlong	arg01, fp
11808     14 4E 85 F1 | 	sub	fp, #20
1180c     10 C0 BF FD | 	call	#_pop
11810     FF 16 02 F6 | 	mov	arg03, result3
11814     A7 FA 61 FC | 	wrlong	result1, fp
11818     04 4E 05 F1 | 	add	fp, #4
1181c     A7 FC 61 FC | 	wrlong	result2, fp
11820     04 4E 05 F1 | 	add	fp, #4
11824     A7 16 62 FC | 	wrlong	arg03, fp
11828     08 4E 85 F1 | 	sub	fp, #8
1182c     A7 12 02 F6 | 	mov	arg01, fp
11830     D0 C1 BF FD | 	call	#_converttoint
11834     3C 4E 05 F1 | 	add	fp, #60
11838     A7 FA 61 FC | 	wrlong	result1, fp
1183c     30 4E 85 F1 | 	sub	fp, #48
11840     A7 12 02 F6 | 	mov	arg01, fp
11844     0C 4E 85 F1 | 	sub	fp, #12
11848     B8 C1 BF FD | 	call	#_converttoint
1184c     40 4E 05 F1 | 	add	fp, #64
11850     A7 FA 61 FC | 	wrlong	result1, fp
11854     28 4E 85 F1 | 	sub	fp, #40
11858     A7 12 02 F6 | 	mov	arg01, fp
1185c     18 4E 85 F1 | 	sub	fp, #24
11860     A0 C1 BF FD | 	call	#_converttoint
11864     44 4E 05 F1 | 	add	fp, #68
11868     A7 FA 61 FC | 	wrlong	result1, fp
1186c     20 4E 85 F1 | 	sub	fp, #32
11870     A7 12 02 F6 | 	mov	arg01, fp
11874     24 4E 85 F1 | 	sub	fp, #36
11878     88 C1 BF FD | 	call	#_converttoint
1187c     48 4E 05 F1 | 	add	fp, #72
11880     A7 FA 61 FC | 	wrlong	result1, fp
11884     18 4E 85 F1 | 	sub	fp, #24
11888     A7 12 02 F6 | 	mov	arg01, fp
1188c     30 4E 85 F1 | 	sub	fp, #48
11890     70 C1 BF FD | 	call	#_converttoint
11894     4C 4E 05 F1 | 	add	fp, #76
11898     A7 FA 61 FC | 	wrlong	result1, fp
1189c                 | ' 
1189c                 | ' t5=pop()
1189c                 | ' t4=pop()
1189c                 | ' t3=pop()
1189c                 | ' t2=pop()
1189c                 | ' t1=pop()
1189c                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
1189c                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
1189c     10 4E 85 F1 | 	sub	fp, #16
118a0     A7 16 02 FB | 	rdlong	arg03, fp
118a4     3C 4E 85 F1 | 	sub	fp, #60
118a8     02 16 66 F0 | 	shl	arg03, #2
118ac     52 00 00 FF 
118b0     AC E4 05 F1 | 	add	objptr, ##42156
118b4     F2 16 02 F1 | 	add	arg03, objptr
118b8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
118bc     52 00 00 FF 
118c0     AC E4 85 F1 | 	sub	objptr, ##42156
118c4     2C 00 90 AD |  if_e	jmp	#LR__1410
118c8     3C 4E 05 F1 | 	add	fp, #60
118cc     A7 16 02 FB | 	rdlong	arg03, fp
118d0     3C 4E 85 F1 | 	sub	fp, #60
118d4     02 16 66 F0 | 	shl	arg03, #2
118d8     52 00 00 FF 
118dc     AC E4 05 F1 | 	add	objptr, ##42156
118e0     F2 16 02 F1 | 	add	arg03, objptr
118e4     0B 13 02 FB | 	rdlong	arg01, arg03
118e8     52 00 00 FF 
118ec     AC E4 85 F1 | 	sub	objptr, ##42156
118f0     04 AB B1 FD | 	call	#__system___gc_free
118f4                 | LR__1410
118f4     3C 4E 05 F1 | 	add	fp, #60
118f8     A7 26 02 FB | 	rdlong	local01, fp
118fc     0C 4E 05 F1 | 	add	fp, #12
11900     A7 16 02 FB | 	rdlong	arg03, fp
11904     04 4E 05 F1 | 	add	fp, #4
11908     A7 14 02 FB | 	rdlong	arg02, fp
1190c     0A 17 02 FD | 	qmul	arg03, arg02
11910     02 26 66 F0 | 	shl	local01, #2
11914     52 00 00 FF 
11918     AC E4 05 F1 | 	add	objptr, ##42156
1191c     F2 26 02 F1 | 	add	local01, objptr
11920     4C 4E 85 F1 | 	sub	fp, #76
11924     52 00 00 FF 
11928     AC E4 85 F1 | 	sub	objptr, ##42156
1192c     18 12 62 FD | 	getqx	arg01
11930     88 A9 B1 FD | 	call	#__system___gc_alloc_managed
11934     13 FB 61 FC | 	wrlong	result1, local01
11938                 | ' for y=a3 to a3+a5-1
11938     44 4E 05 F1 | 	add	fp, #68
1193c     A7 28 02 FB | 	rdlong	local02, fp
11940     0C 4E 05 F1 | 	add	fp, #12
11944     A7 28 62 FC | 	wrlong	local02, fp
11948     0C 4E 85 F1 | 	sub	fp, #12
1194c     A7 2A 02 FB | 	rdlong	local03, fp
11950     08 4E 05 F1 | 	add	fp, #8
11954     A7 2C 02 FB | 	rdlong	local04, fp
11958     4C 4E 85 F1 | 	sub	fp, #76
1195c     16 2B 02 F1 | 	add	local03, local04
11960                 | LR__1411
11960     50 4E 05 F1 | 	add	fp, #80
11964     A7 28 02 FB | 	rdlong	local02, fp
11968     50 4E 85 F1 | 	sub	fp, #80
1196c     15 29 52 F2 | 	cmps	local02, local03 wc
11970     F4 00 90 3D |  if_ae	jmp	#LR__1414
11974                 | '   for x=a2 to a4+a2-1
11974     40 4E 05 F1 | 	add	fp, #64
11978     A7 26 02 FB | 	rdlong	local01, fp
1197c     14 4E 05 F1 | 	add	fp, #20
11980     A7 26 62 FC | 	wrlong	local01, fp
11984     0C 4E 85 F1 | 	sub	fp, #12
11988     A7 2E 02 FB | 	rdlong	local05, fp
1198c     08 4E 85 F1 | 	sub	fp, #8
11990     A7 30 02 FB | 	rdlong	local06, fp
11994     40 4E 85 F1 | 	sub	fp, #64
11998     18 2F 02 F1 | 	add	local05, local06
1199c                 | LR__1412
1199c     54 4E 05 F1 | 	add	fp, #84
119a0     A7 26 02 FB | 	rdlong	local01, fp
119a4     54 4E 85 F1 | 	sub	fp, #84
119a8     17 27 52 F2 | 	cmps	local01, local05 wc
119ac     A0 00 90 3D |  if_ae	jmp	#LR__1413
119b0     3C 4E 05 F1 | 	add	fp, #60
119b4     A7 30 02 FB | 	rdlong	local06, fp
119b8     18 4E 05 F1 | 	add	fp, #24
119bc     A7 2C 02 FB | 	rdlong	local04, fp
119c0     14 4E 85 F1 | 	sub	fp, #20
119c4     A7 28 02 FB | 	rdlong	local02, fp
119c8     10 4E 05 F1 | 	add	fp, #16
119cc     A7 26 02 FB | 	rdlong	local01, fp
119d0     13 17 02 F6 | 	mov	arg03, local01
119d4     0C 4E 85 F1 | 	sub	fp, #12
119d8     A7 14 02 FB | 	rdlong	arg02, fp
119dc     0A 17 82 F1 | 	sub	arg03, arg02
119e0     04 4E 05 F1 | 	add	fp, #4
119e4     A7 14 02 FB | 	rdlong	arg02, fp
119e8     0A 17 02 FD | 	qmul	arg03, arg02
119ec     02 30 66 F0 | 	shl	local06, #2
119f0     52 00 00 FF 
119f4     AC E4 05 F1 | 	add	objptr, ##42156
119f8     F2 30 02 F1 | 	add	local06, objptr
119fc     18 31 02 FB | 	rdlong	local06, local06
11a00     16 33 02 F6 | 	mov	local07, local04
11a04     14 33 82 F1 | 	sub	local07, local02
11a08     52 00 00 FF 
11a0c     AC E4 85 F1 | 	sub	objptr, ##42156
11a10     F2 12 02 FB | 	rdlong	arg01, objptr
11a14     16 13 02 F1 | 	add	arg01, local04
11a18     48 4E 85 F1 | 	sub	fp, #72
11a1c     0A 26 66 F0 | 	shl	local01, #10
11a20     13 13 02 F1 | 	add	arg01, local01
11a24     18 2C 62 FD | 	getqx	local04
11a28     16 33 02 F1 | 	add	local07, local04
11a2c     18 33 02 F1 | 	add	local07, local06
11a30     00 2F B1 FD | 	call	#_pspeek
11a34     19 FB 41 FC | 	wrbyte	result1, local07
11a38     54 4E 05 F1 | 	add	fp, #84
11a3c     A7 32 02 FB | 	rdlong	local07, fp
11a40     01 32 06 F1 | 	add	local07, #1
11a44     A7 32 62 FC | 	wrlong	local07, fp
11a48     54 4E 85 F1 | 	sub	fp, #84
11a4c     4C FF 9F FD | 	jmp	#LR__1412
11a50                 | LR__1413
11a50     50 4E 05 F1 | 	add	fp, #80
11a54     A7 32 02 FB | 	rdlong	local07, fp
11a58     01 32 06 F1 | 	add	local07, #1
11a5c     A7 32 62 FC | 	wrlong	local07, fp
11a60     50 4E 85 F1 | 	sub	fp, #80
11a64     F8 FE 9F FD | 	jmp	#LR__1411
11a68                 | LR__1414
11a68     3C 4E 05 F1 | 	add	fp, #60
11a6c     A7 32 02 FB | 	rdlong	local07, fp
11a70     19 13 02 F6 | 	mov	arg01, local07
11a74     3C 4E 85 F1 | 	sub	fp, #60
11a78     02 32 66 F0 | 	shl	local07, #2
11a7c     52 00 00 FF 
11a80     AC E4 05 F1 | 	add	objptr, ##42156
11a84     F2 32 02 F1 | 	add	local07, objptr
11a88     19 15 02 FB | 	rdlong	arg02, local07
11a8c     52 00 00 FF 
11a90     AC E4 85 F1 | 	sub	objptr, ##42156
11a94     FC 3B B1 FD | 	call	#_hg010b_spin2_setspriteptr
11a98     3C 4E 05 F1 | 	add	fp, #60
11a9c     A7 12 02 FB | 	rdlong	arg01, fp
11aa0     0C 4E 05 F1 | 	add	fp, #12
11aa4     A7 14 02 FB | 	rdlong	arg02, fp
11aa8     04 4E 05 F1 | 	add	fp, #4
11aac     A7 16 02 FB | 	rdlong	arg03, fp
11ab0     4C 4E 85 F1 | 	sub	fp, #76
11ab4     6C 3C B1 FD | 	call	#_hg010b_spin2_setspritesize
11ab8     A7 F0 03 F6 | 	mov	ptra, fp
11abc     B2 00 A0 FD | 	call	#popregs_
11ac0                 | _do_defsprite_ret
11ac0     2D 00 64 FD | 	ret
11ac4                 | 
11ac4                 | ' 
11ac4                 | ' '-------------------- deg
11ac4                 | ' 
11ac4                 | ' sub do_deg
11ac4                 | _do_deg
11ac4     52 00 00 FF 
11ac8     00 E5 05 F1 | 	add	objptr, ##42240
11acc     7D 47 9E FF 
11ad0     F2 6A 68 FC | 	wrlong	##1016003125, objptr
11ad4     04 E4 05 F1 | 	add	objptr, #4
11ad8     97 32 A1 FF 
11adc     F2 C2 69 FC | 	wrlong	##1113927393, objptr
11ae0     52 00 00 FF 
11ae4     04 E5 85 F1 | 	sub	objptr, ##42244
11ae8                 | _do_deg_ret
11ae8     2D 00 64 FD | 	ret
11aec                 | 
11aec                 | ' 
11aec                 | ' '-------------------- delete
11aec                 | ' 
11aec                 | ' sub do_delete
11aec                 | _do_delete
11aec     05 4A 05 F6 | 	mov	COUNT_, #5
11af0     A8 00 A0 FD | 	call	#pushregs_
11af4     28 BD BF FD | 	call	#_pop
11af8     FE 18 02 F6 | 	mov	arg04, result2
11afc     FF 16 02 F6 | 	mov	arg03, result3
11b00     FD 26 02 F6 | 	mov	local01, result1
11b04     0C 29 02 F6 | 	mov	local02, arg04
11b08     0B 2B 02 F6 | 	mov	local03, arg03
11b0c                 | ' 
11b0c                 | ' t1=pop()
11b0c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
11b0c     2B 2A 0E F2 | 	cmp	local03, #43 wz
11b10     10 00 90 5D |  if_ne	jmp	#LR__1420
11b14     13 13 02 F6 | 	mov	arg01, local01
11b18     7C BE BF FD | 	call	#_convertstring
11b1c     FD 26 02 F6 | 	mov	local01, result1
11b20     1F 2A 06 F6 | 	mov	local03, #31
11b24                 | LR__1420
11b24                 | ' if t1.result_type<>result_string then printerror(15): return
11b24     1F 2A 0E F2 | 	cmp	local03, #31 wz
11b28     10 00 90 AD |  if_e	jmp	#LR__1421
11b2c     0F 12 06 F6 | 	mov	arg01, #15
11b30     00 14 06 F6 | 	mov	arg02, #0
11b34     84 2B B1 FD | 	call	#_printerror
11b38     E4 00 90 FD | 	jmp	#LR__1425
11b3c                 | LR__1421
11b3c                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
11b3c     4A 00 00 FF 
11b40     B4 E4 05 F1 | 	add	objptr, ##38068
11b44     F2 12 02 FB | 	rdlong	arg01, objptr
11b48     4A 00 00 FF 
11b4c     B4 E4 85 F1 | 	sub	objptr, ##38068
11b50     C2 01 00 FF 
11b54     99 15 06 F6 | 	mov	arg02, ##@LR__6039
11b58     E0 65 B1 FD | 	call	#__system___string_cmp
11b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
11b60     34 00 90 AD |  if_e	jmp	#LR__1422
11b64     4A 00 00 FF 
11b68     B4 E4 05 F1 | 	add	objptr, ##38068
11b6c     F2 12 02 FB | 	rdlong	arg01, objptr
11b70     4A 00 00 FF 
11b74     B4 E4 85 F1 | 	sub	objptr, ##38068
11b78     C2 01 00 FF 
11b7c     9B 15 06 F6 | 	mov	arg02, ##@LR__6040
11b80     EC 65 B1 FD | 	call	#__system___string_concat
11b84     FD 12 02 F6 | 	mov	arg01, result1
11b88     13 15 02 F6 | 	mov	arg02, local01
11b8c     E0 65 B1 FD | 	call	#__system___string_concat
11b90     FD 2C 02 F6 | 	mov	local04, result1
11b94     14 00 90 FD | 	jmp	#LR__1423
11b98                 | LR__1422
11b98     C2 01 00 FF 
11b9c     9D 13 06 F6 | 	mov	arg01, ##@LR__6041
11ba0     13 15 02 F6 | 	mov	arg02, local01
11ba4     C8 65 B1 FD | 	call	#__system___string_concat
11ba8     FD 2C 02 F6 | 	mov	local04, result1
11bac                 | LR__1423
11bac     16 13 02 F6 | 	mov	arg01, local04
11bb0     30 8D B1 FD | 	call	#__system___remove
11bb4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
11bb8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
11bbc     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
11bc0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
11bc4     FD 2E 0A F6 | 	mov	local05, result1 wz
11bc8                 | ' kill filename$
11bc8                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
11bc8     54 00 90 AD |  if_e	jmp	#LR__1424
11bcc     00 12 06 F6 | 	mov	arg01, #0
11bd0     F0 C1 B1 FD | 	call	#__system___getiolock_0620
11bd4     FD 12 02 F6 | 	mov	arg01, result1
11bd8     38 65 B1 FD | 	call	#__system___lockmem
11bdc     C2 01 00 FF 
11be0     9F 15 06 F6 | 	mov	arg02, ##@LR__6042
11be4     00 12 06 F6 | 	mov	arg01, #0
11be8     00 16 06 F6 | 	mov	arg03, #0
11bec     1C 72 B1 FD | 	call	#__system___basic_print_string
11bf0     00 12 06 F6 | 	mov	arg01, #0
11bf4     17 15 02 F6 | 	mov	arg02, local05
11bf8     00 16 06 F6 | 	mov	arg03, #0
11bfc     0A 18 06 F6 | 	mov	arg04, #10
11c00     4C 72 B1 FD | 	call	#__system___basic_print_integer
11c04     00 12 06 F6 | 	mov	arg01, #0
11c08     0A 14 06 F6 | 	mov	arg02, #10
11c0c     00 16 06 F6 | 	mov	arg03, #0
11c10     A0 71 B1 FD | 	call	#__system___basic_print_char
11c14     00 12 06 F6 | 	mov	arg01, #0
11c18     A8 C1 B1 FD | 	call	#__system___getiolock_0620
11c1c     FD 00 68 FC | 	wrlong	#0, result1
11c20                 | LR__1424
11c20                 | LR__1425
11c20     A7 F0 03 F6 | 	mov	ptra, fp
11c24     B2 00 A0 FD | 	call	#popregs_
11c28                 | _do_delete_ret
11c28     2D 00 64 FD | 	ret
11c2c                 | 
11c2c                 | ' 
11c2c                 | ' '-------------------- dir
11c2c                 | ' 
11c2c                 | ' sub do_dir
11c2c                 | _do_dir
11c2c     13 4A 05 F6 | 	mov	COUNT_, #19
11c30     A8 00 A0 FD | 	call	#pushregs_
11c34     01 00 00 FF 
11c38     38 F0 07 F1 | 	add	ptra, ##568
11c3c                 | ' 
11c3c                 | ' print "Current directory: "; currentdir$ 
11c3c     00 12 06 F6 | 	mov	arg01, #0
11c40     80 C1 B1 FD | 	call	#__system___getiolock_0620
11c44     FD 12 02 F6 | 	mov	arg01, result1
11c48     C8 64 B1 FD | 	call	#__system___lockmem
11c4c     C2 01 00 FF 
11c50     D7 15 06 F6 | 	mov	arg02, ##@LR__6043
11c54     00 12 06 F6 | 	mov	arg01, #0
11c58     00 16 06 F6 | 	mov	arg03, #0
11c5c     AC 71 B1 FD | 	call	#__system___basic_print_string
11c60     4A 00 00 FF 
11c64     B4 E4 05 F1 | 	add	objptr, ##38068
11c68     F2 14 02 FB | 	rdlong	arg02, objptr
11c6c     4A 00 00 FF 
11c70     B4 E4 85 F1 | 	sub	objptr, ##38068
11c74     00 12 06 F6 | 	mov	arg01, #0
11c78     00 16 06 F6 | 	mov	arg03, #0
11c7c     8C 71 B1 FD | 	call	#__system___basic_print_string
11c80     00 12 06 F6 | 	mov	arg01, #0
11c84     0A 14 06 F6 | 	mov	arg02, #10
11c88     00 16 06 F6 | 	mov	arg03, #0
11c8c     24 71 B1 FD | 	call	#__system___basic_print_char
11c90     01 26 06 F6 | 	mov	local01, #1
11c94     00 12 06 F6 | 	mov	arg01, #0
11c98     28 C1 B1 FD | 	call	#__system___getiolock_0620
11c9c     FD 00 68 FC | 	wrlong	#0, result1
11ca0     00 28 06 F6 | 	mov	local02, #0
11ca4     00 2A 06 F6 | 	mov	local03, #0
11ca8                 | ' px=0
11ca8                 | ' for i=0 to 127: filelist(i)="" : next i
11ca8     00 2C 06 F6 | 	mov	local04, #0
11cac     1C 4E 05 F1 | 	add	fp, #28
11cb0     97 12 48 FB | 	callpa	#(@LR__1431-@LR__1430)>>2,fcache_load_ptr_
11cb4                 | LR__1430
11cb4     16 2F 02 F6 | 	mov	local05, local04
11cb8     02 2E 66 F0 | 	shl	local05, #2
11cbc     A7 2E 02 F1 | 	add	local05, fp
11cc0     C2 01 00 FF 
11cc4     EB 31 06 F6 | 	mov	local06, ##@LR__6044
11cc8     17 31 62 FC | 	wrlong	local06, local05
11ccc     01 2C 06 F1 | 	add	local04, #1
11cd0     80 2C 56 F2 | 	cmps	local04, #128 wc
11cd4     DC FF 9F CD |  if_b	jmp	#LR__1430
11cd8                 | LR__1431
11cd8     1C 4E 85 F1 | 	sub	fp, #28
11cdc     C2 01 00 FF 
11ce0     EC 13 06 F6 | 	mov	arg01, ##@LR__6045
11ce4     10 14 06 F6 | 	mov	arg02, #16
11ce8     98 C2 B1 FD | 	call	#__system___basic_dir
11cec     FD 32 02 F6 | 	mov	local07, result1
11cf0     00 34 06 F6 | 	mov	local08, #0
11cf4                 | ' filename=dir$("*", fbDirectory)
11cf4                 | ' n=0
11cf4                 | ' while filename <> "" andalso filename <> nil andalso n<128
11cf4                 | LR__1432
11cf4     C2 01 00 FF 
11cf8     EE 37 06 F6 | 	mov	local09, ##@LR__6046
11cfc     19 13 02 F6 | 	mov	arg01, local07
11d00     1B 15 02 F6 | 	mov	arg02, local09
11d04     34 64 B1 FD | 	call	#__system___string_cmp
11d08     00 FA 0D F2 | 	cmp	result1, #0 wz
11d0c     68 00 90 AD |  if_e	jmp	#LR__1433
11d10     00 36 06 F6 | 	mov	local09, #0
11d14     19 13 02 F6 | 	mov	arg01, local07
11d18     00 14 06 F6 | 	mov	arg02, #0
11d1c     1C 64 B1 FD | 	call	#__system___string_cmp
11d20     00 FA 0D F2 | 	cmp	result1, #0 wz
11d24     50 00 90 AD |  if_e	jmp	#LR__1433
11d28     80 34 56 F2 | 	cmps	local08, #128 wc
11d2c     48 00 90 3D |  if_ae	jmp	#LR__1433
11d30     C2 01 00 FF 
11d34     EF 13 06 F6 | 	mov	arg01, ##@LR__6047
11d38     19 15 02 F6 | 	mov	arg02, local07
11d3c     30 64 B1 FD | 	call	#__system___string_concat
11d40     FD 32 02 F6 | 	mov	local07, result1
11d44     1A 2F 02 F6 | 	mov	local05, local08
11d48     02 2E 66 F0 | 	shl	local05, #2
11d4c     1C 4E 05 F1 | 	add	fp, #28
11d50     A7 2E 02 F1 | 	add	local05, fp
11d54     17 33 62 FC | 	wrlong	local07, local05
11d58     01 34 06 F1 | 	add	local08, #1
11d5c     00 2E 06 F6 | 	mov	local05, #0
11d60     00 12 06 F6 | 	mov	arg01, #0
11d64     00 14 06 F6 | 	mov	arg02, #0
11d68     1C 4E 85 F1 | 	sub	fp, #28
11d6c     14 C2 B1 FD | 	call	#__system___basic_dir
11d70     FD 32 02 F6 | 	mov	local07, result1
11d74     7C FF 9F FD | 	jmp	#LR__1432
11d78                 | LR__1433
11d78                 | ' for i=0 to n-1			' now sort this
11d78     00 2C 06 F6 | 	mov	local04, #0
11d7c     1A 39 02 F6 | 	mov	local10, local08
11d80                 | LR__1434
11d80     1C 2D 52 F2 | 	cmps	local04, local10 wc
11d84     DC 00 90 3D |  if_ae	jmp	#LR__1438
11d88     00 3A 06 F6 | 	mov	local11, #0
11d8c                 | '   swapped=false
11d8c                 | '   for j=0 to n-i-2
11d8c     00 3C 06 F6 | 	mov	local12, #0
11d90     1A 3F 02 F6 | 	mov	local13, local08
11d94     16 3F 82 F1 | 	sub	local13, local04
11d98     01 3E 86 F1 | 	sub	local13, #1
11d9c                 | LR__1435
11d9c     1F 3D 52 F2 | 	cmps	local12, local13 wc
11da0     B0 00 90 3D |  if_ae	jmp	#LR__1437
11da4                 | '     if filelist(j) > filelist(j+1) then
11da4     1E 37 02 F6 | 	mov	local09, local12
11da8     02 36 66 F0 | 	shl	local09, #2
11dac     1C 4E 05 F1 | 	add	fp, #28
11db0     A7 36 02 F1 | 	add	local09, fp
11db4     1B 13 02 FB | 	rdlong	arg01, local09
11db8     1E 37 02 F6 | 	mov	local09, local12
11dbc     01 36 06 F1 | 	add	local09, #1
11dc0     1B 31 02 F6 | 	mov	local06, local09
11dc4     02 30 66 F0 | 	shl	local06, #2
11dc8     A7 26 02 F6 | 	mov	local01, fp
11dcc     A7 30 02 F1 | 	add	local06, fp
11dd0     18 2F 02 FB | 	rdlong	local05, local06
11dd4     17 15 02 F6 | 	mov	arg02, local05
11dd8     1C 4E 85 F1 | 	sub	fp, #28
11ddc     5C 63 B1 FD | 	call	#__system___string_cmp
11de0     01 FA 55 F2 | 	cmps	result1, #1 wc
11de4     64 00 90 CD |  if_b	jmp	#LR__1436
11de8     1E 37 02 F6 | 	mov	local09, local12
11dec     01 36 06 F1 | 	add	local09, #1
11df0     02 36 66 F0 | 	shl	local09, #2
11df4     1C 4E 05 F1 | 	add	fp, #28
11df8     A7 36 02 F1 | 	add	local09, fp
11dfc     1B 3B 02 FB | 	rdlong	local11, local09
11e00     1E 31 02 F6 | 	mov	local06, local12
11e04     02 30 66 F0 | 	shl	local06, #2
11e08     A7 30 02 F1 | 	add	local06, fp
11e0c     18 2F 02 FB | 	rdlong	local05, local06
11e10     1E 37 02 F6 | 	mov	local09, local12
11e14     1B 31 02 F6 | 	mov	local06, local09
11e18     02 30 66 F0 | 	shl	local06, #2
11e1c     A7 26 02 F6 | 	mov	local01, fp
11e20     A7 30 02 F1 | 	add	local06, fp
11e24     18 3B 62 FC | 	wrlong	local11, local06
11e28     1E 29 02 F6 | 	mov	local02, local12
11e2c     01 28 06 F1 | 	add	local02, #1
11e30     14 41 02 F6 | 	mov	local14, local02
11e34     02 40 66 F0 | 	shl	local14, #2
11e38     A7 42 02 F6 | 	mov	local15, fp
11e3c     A7 40 02 F1 | 	add	local14, fp
11e40     20 2F 62 FC | 	wrlong	local05, local14
11e44     01 3A 66 F6 | 	neg	local11, #1
11e48     1C 4E 85 F1 | 	sub	fp, #28
11e4c                 | LR__1436
11e4c     01 3C 06 F1 | 	add	local12, #1
11e50     48 FF 9F FD | 	jmp	#LR__1435
11e54                 | LR__1437
11e54                 | ' if not swapped then exit for
11e54     1D 45 22 F6 | 	not	local16, local11
11e58     00 44 0E F2 | 	cmp	local16, #0 wz
11e5c     01 2C 06 A1 |  if_e	add	local04, #1
11e60     1C FF 9F AD |  if_e	jmp	#LR__1434
11e64                 | LR__1438
11e64                 | ' for i=0 to n-1
11e64     00 2C 06 F6 | 	mov	local04, #0
11e68     1A 47 02 F6 | 	mov	local17, local08
11e6c                 | LR__1439
11e6c     23 2D 52 F2 | 	cmps	local04, local17 wc
11e70     94 00 90 3D |  if_ae	jmp	#LR__1441
11e74                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11e74     00 12 06 F6 | 	mov	arg01, #0
11e78     48 BF B1 FD | 	call	#__system___getiolock_0620
11e7c     FD 12 02 F6 | 	mov	arg01, result1
11e80     90 62 B1 FD | 	call	#__system___lockmem
11e84     16 29 02 F6 | 	mov	local02, local04
11e88     02 28 66 F0 | 	shl	local02, #2
11e8c     1C 4E 05 F1 | 	add	fp, #28
11e90     A7 40 02 F6 | 	mov	local14, fp
11e94     A7 28 02 F1 | 	add	local02, fp
11e98     14 15 02 FB | 	rdlong	arg02, local02
11e9c     00 26 06 F6 | 	mov	local01, #0
11ea0     00 12 06 F6 | 	mov	arg01, #0
11ea4     00 16 06 F6 | 	mov	arg03, #0
11ea8     1C 4E 85 F1 | 	sub	fp, #28
11eac     5C 6F B1 FD | 	call	#__system___basic_print_string
11eb0     00 12 06 F6 | 	mov	arg01, #0
11eb4     0C BF B1 FD | 	call	#__system___getiolock_0620
11eb8     FD 00 68 FC | 	wrlong	#0, result1
11ebc     40 2A 06 F1 | 	add	local03, #64
11ec0     15 13 02 F6 | 	mov	arg01, local03
11ec4     EC 44 B1 FD | 	call	#_hg010b_spin2_setcursorx
11ec8     00 2B 56 F2 | 	cmps	local03, #256 wc
11ecc     30 00 90 CD |  if_b	jmp	#LR__1440
11ed0     00 2A 06 F6 | 	mov	local03, #0
11ed4     00 12 06 F6 | 	mov	arg01, #0
11ed8     E8 BE B1 FD | 	call	#__system___getiolock_0620
11edc     FD 12 02 F6 | 	mov	arg01, result1
11ee0     30 62 B1 FD | 	call	#__system___lockmem
11ee4     00 12 06 F6 | 	mov	arg01, #0
11ee8     0A 14 06 F6 | 	mov	arg02, #10
11eec     00 16 06 F6 | 	mov	arg03, #0
11ef0     C0 6E B1 FD | 	call	#__system___basic_print_char
11ef4     00 12 06 F6 | 	mov	arg01, #0
11ef8     C8 BE B1 FD | 	call	#__system___getiolock_0620
11efc     FD 00 68 FC | 	wrlong	#0, result1
11f00                 | LR__1440
11f00     01 2C 06 F1 | 	add	local04, #1
11f04     64 FF 9F FD | 	jmp	#LR__1439
11f08                 | LR__1441
11f08                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11f08     80 34 56 F2 | 	cmps	local08, #128 wc
11f0c     44 00 90 CD |  if_b	jmp	#LR__1442
11f10     00 12 06 F6 | 	mov	arg01, #0
11f14     AC BE B1 FD | 	call	#__system___getiolock_0620
11f18     FD 12 02 F6 | 	mov	arg01, result1
11f1c     F4 61 B1 FD | 	call	#__system___lockmem
11f20     C2 01 00 FF 
11f24     F6 15 06 F6 | 	mov	arg02, ##@LR__6048
11f28     00 12 06 F6 | 	mov	arg01, #0
11f2c     00 16 06 F6 | 	mov	arg03, #0
11f30     D8 6E B1 FD | 	call	#__system___basic_print_string
11f34     00 12 06 F6 | 	mov	arg01, #0
11f38     0A 14 06 F6 | 	mov	arg02, #10
11f3c     00 16 06 F6 | 	mov	arg03, #0
11f40     70 6E B1 FD | 	call	#__system___basic_print_char
11f44     00 12 06 F6 | 	mov	arg01, #0
11f48     78 BE B1 FD | 	call	#__system___getiolock_0620
11f4c     FD 00 68 FC | 	wrlong	#0, result1
11f50     00 26 06 F6 | 	mov	local01, #0
11f54                 | LR__1442
11f54                 | ' print
11f54     00 12 06 F6 | 	mov	arg01, #0
11f58     68 BE B1 FD | 	call	#__system___getiolock_0620
11f5c     FD 12 02 F6 | 	mov	arg01, result1
11f60     B0 61 B1 FD | 	call	#__system___lockmem
11f64     00 12 06 F6 | 	mov	arg01, #0
11f68     0A 14 06 F6 | 	mov	arg02, #10
11f6c     00 16 06 F6 | 	mov	arg03, #0
11f70     40 6E B1 FD | 	call	#__system___basic_print_char
11f74     00 12 06 F6 | 	mov	arg01, #0
11f78     48 BE B1 FD | 	call	#__system___getiolock_0620
11f7c     FD 00 68 FC | 	wrlong	#0, result1
11f80     00 30 06 F6 | 	mov	local06, #0
11f84     00 34 06 F6 | 	mov	local08, #0
11f88     00 2A 06 F6 | 	mov	local03, #0
11f8c                 | ' return cursor_y
11f8c     3E E4 05 F1 | 	add	objptr, #62
11f90     F2 48 C2 FA | 	rdbyte	local18, objptr
11f94     3E E4 85 F1 | 	sub	objptr, #62
11f98     C3 01 00 FF 
11f9c     28 12 06 F6 | 	mov	arg01, ##@LR__6049
11fa0     21 14 06 F6 | 	mov	arg02, #33
11fa4     DC BF B1 FD | 	call	#__system___basic_dir
11fa8     FD 32 02 F6 | 	mov	local07, result1
11fac                 | ' n=0
11fac                 | ' px=0: py=v.getcursory()
11fac                 | ' filename = dir$("*", fbNormal )   
11fac                 | ' do while filename <> "" andalso filename <> nil andalso n<128
11fac                 | LR__1443
11fac     C3 01 00 FF 
11fb0     2A 36 06 F6 | 	mov	local09, ##@LR__6050
11fb4     19 13 02 F6 | 	mov	arg01, local07
11fb8     1B 15 02 F6 | 	mov	arg02, local09
11fbc     7C 61 B1 FD | 	call	#__system___string_cmp
11fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
11fc4     54 00 90 AD |  if_e	jmp	#LR__1444
11fc8     00 36 06 F6 | 	mov	local09, #0
11fcc     19 13 02 F6 | 	mov	arg01, local07
11fd0     00 14 06 F6 | 	mov	arg02, #0
11fd4     64 61 B1 FD | 	call	#__system___string_cmp
11fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
11fdc     3C 00 90 AD |  if_e	jmp	#LR__1444
11fe0     80 34 56 F2 | 	cmps	local08, #128 wc
11fe4     34 00 90 3D |  if_ae	jmp	#LR__1444
11fe8     1A 2F 02 F6 | 	mov	local05, local08
11fec     02 2E 66 F0 | 	shl	local05, #2
11ff0     1C 4E 05 F1 | 	add	fp, #28
11ff4     A7 2E 02 F1 | 	add	local05, fp
11ff8     17 33 62 FC | 	wrlong	local07, local05
11ffc     01 34 06 F1 | 	add	local08, #1
12000     00 2E 06 F6 | 	mov	local05, #0
12004     00 12 06 F6 | 	mov	arg01, #0
12008     00 14 06 F6 | 	mov	arg02, #0
1200c     1C 4E 85 F1 | 	sub	fp, #28
12010     70 BF B1 FD | 	call	#__system___basic_dir
12014     FD 32 02 F6 | 	mov	local07, result1
12018     90 FF 9F FD | 	jmp	#LR__1443
1201c                 | LR__1444
1201c                 | ' for i =0 to n-1
1201c     00 2C 06 F6 | 	mov	local04, #0
12020                 | LR__1445
12020     1A 2D 52 F2 | 	cmps	local04, local08 wc
12024     D8 00 90 3D |  if_ae	jmp	#LR__1449
12028     00 3A 06 F6 | 	mov	local11, #0
1202c                 | '   swapped=false
1202c                 | '   for j=0 to n-i-2
1202c     00 3C 06 F6 | 	mov	local12, #0
12030     1A 4B 02 F6 | 	mov	local19, local08
12034     16 4B 82 F1 | 	sub	local19, local04
12038     01 4A 86 F1 | 	sub	local19, #1
1203c                 | LR__1446
1203c     25 3D 52 F2 | 	cmps	local12, local19 wc
12040     AC 00 90 3D |  if_ae	jmp	#LR__1448
12044                 | '     if filelist(j) > filelist(j+1) then
12044     1E 37 02 F6 | 	mov	local09, local12
12048     02 36 66 F0 | 	shl	local09, #2
1204c     1C 4E 05 F1 | 	add	fp, #28
12050     A7 36 02 F1 | 	add	local09, fp
12054     1B 13 02 FB | 	rdlong	arg01, local09
12058     1E 37 02 F6 | 	mov	local09, local12
1205c     01 36 06 F1 | 	add	local09, #1
12060     1B 31 02 F6 | 	mov	local06, local09
12064     02 30 66 F0 | 	shl	local06, #2
12068     A7 26 02 F6 | 	mov	local01, fp
1206c     A7 30 02 F1 | 	add	local06, fp
12070     18 2F 02 FB | 	rdlong	local05, local06
12074     17 15 02 F6 | 	mov	arg02, local05
12078     1C 4E 85 F1 | 	sub	fp, #28
1207c     BC 60 B1 FD | 	call	#__system___string_cmp
12080     01 FA 55 F2 | 	cmps	result1, #1 wc
12084     60 00 90 CD |  if_b	jmp	#LR__1447
12088     1E 37 02 F6 | 	mov	local09, local12
1208c     01 36 06 F1 | 	add	local09, #1
12090     02 36 66 F0 | 	shl	local09, #2
12094     1C 4E 05 F1 | 	add	fp, #28
12098     A7 36 02 F1 | 	add	local09, fp
1209c     1B 45 02 FB | 	rdlong	local16, local09
120a0     1E 31 02 F6 | 	mov	local06, local12
120a4     02 30 66 F0 | 	shl	local06, #2
120a8     A7 30 02 F1 | 	add	local06, fp
120ac     18 2F 02 FB | 	rdlong	local05, local06
120b0     1E 37 02 F6 | 	mov	local09, local12
120b4     1B 31 02 F6 | 	mov	local06, local09
120b8     02 30 66 F0 | 	shl	local06, #2
120bc     A7 26 02 F6 | 	mov	local01, fp
120c0     A7 30 02 F1 | 	add	local06, fp
120c4     18 45 62 FC | 	wrlong	local16, local06
120c8     1E 41 02 F6 | 	mov	local14, local12
120cc     01 40 06 F1 | 	add	local14, #1
120d0     02 40 66 F0 | 	shl	local14, #2
120d4     A7 42 02 F6 | 	mov	local15, fp
120d8     A7 40 02 F1 | 	add	local14, fp
120dc     20 2F 62 FC | 	wrlong	local05, local14
120e0     01 3A 66 F6 | 	neg	local11, #1
120e4     1C 4E 85 F1 | 	sub	fp, #28
120e8                 | LR__1447
120e8     01 3C 06 F1 | 	add	local12, #1
120ec     4C FF 9F FD | 	jmp	#LR__1446
120f0                 | LR__1448
120f0                 | ' if not swapped then exit for
120f0     1D 45 22 F6 | 	not	local16, local11
120f4     00 44 0E F2 | 	cmp	local16, #0 wz
120f8     01 2C 06 A1 |  if_e	add	local04, #1
120fc     20 FF 9F AD |  if_e	jmp	#LR__1445
12100                 | LR__1449
12100                 | ' for i=0 to n-1
12100     00 2C 06 F6 | 	mov	local04, #0
12104                 | LR__1450
12104     1A 2D 52 F2 | 	cmps	local04, local08 wc
12108     8C 00 90 3D |  if_ae	jmp	#LR__1452
1210c                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
1210c     00 12 06 F6 | 	mov	arg01, #0
12110     B0 BC B1 FD | 	call	#__system___getiolock_0620
12114     FD 12 02 F6 | 	mov	arg01, result1
12118     F8 5F B1 FD | 	call	#__system___lockmem
1211c     16 29 02 F6 | 	mov	local02, local04
12120     02 28 66 F0 | 	shl	local02, #2
12124     1C 4E 05 F1 | 	add	fp, #28
12128     A7 28 02 F1 | 	add	local02, fp
1212c     14 15 02 FB | 	rdlong	arg02, local02
12130     00 12 06 F6 | 	mov	arg01, #0
12134     00 16 06 F6 | 	mov	arg03, #0
12138     1C 4E 85 F1 | 	sub	fp, #28
1213c     CC 6C B1 FD | 	call	#__system___basic_print_string
12140     00 12 06 F6 | 	mov	arg01, #0
12144     7C BC B1 FD | 	call	#__system___getiolock_0620
12148     FD 00 68 FC | 	wrlong	#0, result1
1214c     40 2A 06 F1 | 	add	local03, #64
12150     15 13 02 F6 | 	mov	arg01, local03
12154     5C 42 B1 FD | 	call	#_hg010b_spin2_setcursorx
12158     00 2B 56 F2 | 	cmps	local03, #256 wc
1215c     30 00 90 CD |  if_b	jmp	#LR__1451
12160     00 2A 06 F6 | 	mov	local03, #0
12164     00 12 06 F6 | 	mov	arg01, #0
12168     58 BC B1 FD | 	call	#__system___getiolock_0620
1216c     FD 12 02 F6 | 	mov	arg01, result1
12170     A0 5F B1 FD | 	call	#__system___lockmem
12174     00 12 06 F6 | 	mov	arg01, #0
12178     0A 14 06 F6 | 	mov	arg02, #10
1217c     00 16 06 F6 | 	mov	arg03, #0
12180     30 6C B1 FD | 	call	#__system___basic_print_char
12184     00 12 06 F6 | 	mov	arg01, #0
12188     38 BC B1 FD | 	call	#__system___getiolock_0620
1218c     FD 00 68 FC | 	wrlong	#0, result1
12190                 | LR__1451
12190     01 2C 06 F1 | 	add	local04, #1
12194     6C FF 9F FD | 	jmp	#LR__1450
12198                 | LR__1452
12198                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
12198     80 34 56 F2 | 	cmps	local08, #128 wc
1219c     40 00 90 CD |  if_b	jmp	#LR__1453
121a0     00 12 06 F6 | 	mov	arg01, #0
121a4     1C BC B1 FD | 	call	#__system___getiolock_0620
121a8     FD 12 02 F6 | 	mov	arg01, result1
121ac     64 5F B1 FD | 	call	#__system___lockmem
121b0     C3 01 00 FF 
121b4     2B 14 06 F6 | 	mov	arg02, ##@LR__6051
121b8     00 12 06 F6 | 	mov	arg01, #0
121bc     00 16 06 F6 | 	mov	arg03, #0
121c0     48 6C B1 FD | 	call	#__system___basic_print_string
121c4     00 12 06 F6 | 	mov	arg01, #0
121c8     0A 14 06 F6 | 	mov	arg02, #10
121cc     00 16 06 F6 | 	mov	arg03, #0
121d0     E0 6B B1 FD | 	call	#__system___basic_print_char
121d4     00 12 06 F6 | 	mov	arg01, #0
121d8     E8 BB B1 FD | 	call	#__system___getiolock_0620
121dc     FD 00 68 FC | 	wrlong	#0, result1
121e0                 | LR__1453
121e0                 | ' print
121e0     00 12 06 F6 | 	mov	arg01, #0
121e4     DC BB B1 FD | 	call	#__system___getiolock_0620
121e8     FD 12 02 F6 | 	mov	arg01, result1
121ec     24 5F B1 FD | 	call	#__system___lockmem
121f0     00 12 06 F6 | 	mov	arg01, #0
121f4     0A 14 06 F6 | 	mov	arg02, #10
121f8     00 16 06 F6 | 	mov	arg03, #0
121fc     B4 6B B1 FD | 	call	#__system___basic_print_char
12200     00 12 06 F6 | 	mov	arg01, #0
12204     BC BB B1 FD | 	call	#__system___getiolock_0620
12208     FD 00 68 FC | 	wrlong	#0, result1
1220c     A7 F0 03 F6 | 	mov	ptra, fp
12210     B2 00 A0 FD | 	call	#popregs_
12214                 | _do_dir_ret
12214     2D 00 64 FD | 	ret
12218                 | 
12218                 | ' 
12218                 | ' '-------------------- dpeek
12218                 | ' 
12218                 | ' sub do_dpeek
12218                 | _do_dpeek
12218     00 4A 05 F6 | 	mov	COUNT_, #0
1221c     A8 00 A0 FD | 	call	#pushregs_
12220     14 F0 07 F1 | 	add	ptra, #20
12224     F8 B5 BF FD | 	call	#_pop
12228     A7 FA 61 FC | 	wrlong	result1, fp
1222c     04 4E 05 F1 | 	add	fp, #4
12230     A7 FC 61 FC | 	wrlong	result2, fp
12234     04 4E 05 F1 | 	add	fp, #4
12238     A7 FE 61 FC | 	wrlong	result3, fp
1223c     08 4E 85 F1 | 	sub	fp, #8
12240     A7 12 02 F6 | 	mov	arg01, fp
12244     BC B7 BF FD | 	call	#_converttoint
12248     0C 4E 05 F1 | 	add	fp, #12
1224c     A7 FA 61 FC | 	wrlong	result1, fp
12250                 | ' 
12250                 | ' t1=pop()
12250                 | ' a=converttoint(t1)
12250                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
12250     0C 4E 85 F1 | 	sub	fp, #12
12254     00 04 00 FF 
12258     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1225c     1C 00 90 3D |  if_ae	jmp	#LR__1460
12260     0C 4E 05 F1 | 	add	fp, #12
12264     A7 12 02 FB | 	rdlong	arg01, fp
12268     09 FB E1 FA | 	rdword	result1, arg01
1226c     04 4E 05 F1 | 	add	fp, #4
12270     A7 FA 61 FC | 	wrlong	result1, fp
12274     10 4E 85 F1 | 	sub	fp, #16
12278     1C 00 90 FD | 	jmp	#LR__1461
1227c                 | LR__1460
1227c     0C 4E 05 F1 | 	add	fp, #12
12280     A7 12 02 FB | 	rdlong	arg01, fp
12284     0C 4E 85 F1 | 	sub	fp, #12
12288     58 27 B1 FD | 	call	#_psdpeek
1228c     10 4E 05 F1 | 	add	fp, #16
12290     A7 FA 61 FC | 	wrlong	result1, fp
12294     10 4E 85 F1 | 	sub	fp, #16
12298                 | LR__1461
12298     08 4E 05 F1 | 	add	fp, #8
1229c     A7 3A 68 FC | 	wrlong	#29, fp
122a0     08 4E 05 F1 | 	add	fp, #8
122a4     A7 12 02 FB | 	rdlong	arg01, fp
122a8     10 4E 85 F1 | 	sub	fp, #16
122ac     A7 12 62 FC | 	wrlong	arg01, fp
122b0     A7 12 02 F6 | 	mov	arg01, fp
122b4     00 B6 BF FD | 	call	#_push
122b8     A7 F0 03 F6 | 	mov	ptra, fp
122bc     B2 00 A0 FD | 	call	#popregs_
122c0                 | _do_dpeek_ret
122c0     2D 00 64 FD | 	ret
122c4                 | 
122c4                 | ' 
122c4                 | ' '-------------------- dpoke
122c4                 | ' 
122c4                 | ' sub do_dpoke
122c4                 | _do_dpoke
122c4     01 4A 05 F6 | 	mov	COUNT_, #1
122c8     A8 00 A0 FD | 	call	#pushregs_
122cc     20 F0 07 F1 | 	add	ptra, #32
122d0     4C B5 BF FD | 	call	#_pop
122d4     FD 14 02 F6 | 	mov	arg02, result1
122d8     FE 12 02 F6 | 	mov	arg01, result2
122dc     FF 26 02 F6 | 	mov	local01, result3
122e0     A7 14 62 FC | 	wrlong	arg02, fp
122e4     04 4E 05 F1 | 	add	fp, #4
122e8     A7 12 62 FC | 	wrlong	arg01, fp
122ec     04 4E 05 F1 | 	add	fp, #4
122f0     A7 26 62 FC | 	wrlong	local01, fp
122f4     08 4E 85 F1 | 	sub	fp, #8
122f8     24 B5 BF FD | 	call	#_pop
122fc     FF 26 02 F6 | 	mov	local01, result3
12300     0C 4E 05 F1 | 	add	fp, #12
12304     A7 FA 61 FC | 	wrlong	result1, fp
12308     04 4E 05 F1 | 	add	fp, #4
1230c     A7 FC 61 FC | 	wrlong	result2, fp
12310     04 4E 05 F1 | 	add	fp, #4
12314     A7 26 62 FC | 	wrlong	local01, fp
12318     08 4E 85 F1 | 	sub	fp, #8
1231c     A7 12 02 F6 | 	mov	arg01, fp
12320     0C 4E 85 F1 | 	sub	fp, #12
12324     DC B6 BF FD | 	call	#_converttoint
12328     18 4E 05 F1 | 	add	fp, #24
1232c     A7 FA 61 FC | 	wrlong	result1, fp
12330     18 4E 85 F1 | 	sub	fp, #24
12334     A7 12 02 F6 | 	mov	arg01, fp
12338     C8 B6 BF FD | 	call	#_converttoint
1233c     1C 4E 05 F1 | 	add	fp, #28
12340     A7 FA 61 FC | 	wrlong	result1, fp
12344                 | ' 
12344                 | ' t1=pop() 'value
12344                 | ' t2=pop() 
12344                 | ' a=converttoint(t2) : v=converttoint(t1)
12344                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
12344     04 4E 85 F1 | 	sub	fp, #4
12348     A7 26 02 FB | 	rdlong	local01, fp
1234c     18 4E 85 F1 | 	sub	fp, #24
12350     00 04 00 FF 
12354     00 26 16 F2 | 	cmp	local01, ##524288 wc
12358     1C 00 90 3D |  if_ae	jmp	#LR__1470
1235c     18 4E 05 F1 | 	add	fp, #24
12360     A7 12 02 FB | 	rdlong	arg01, fp
12364     04 4E 05 F1 | 	add	fp, #4
12368     A7 14 02 FB | 	rdlong	arg02, fp
1236c     1C 4E 85 F1 | 	sub	fp, #28
12370     09 15 52 FC | 	wrword	arg02, arg01
12374     18 00 90 FD | 	jmp	#LR__1471
12378                 | LR__1470
12378     18 4E 05 F1 | 	add	fp, #24
1237c     A7 12 02 FB | 	rdlong	arg01, fp
12380     04 4E 05 F1 | 	add	fp, #4
12384     A7 14 02 FB | 	rdlong	arg02, fp
12388     1C 4E 85 F1 | 	sub	fp, #28
1238c     14 25 B1 FD | 	call	#_psdpoke
12390                 | LR__1471
12390     A7 F0 03 F6 | 	mov	ptra, fp
12394     B2 00 A0 FD | 	call	#popregs_
12398                 | _do_dpoke_ret
12398     2D 00 64 FD | 	ret
1239c                 | 
1239c                 | ' '-------------------- draw
1239c                 | ' 
1239c                 | ' sub do_draw
1239c                 | _do_draw
1239c     00 4A 05 F6 | 	mov	COUNT_, #0
123a0     A8 00 A0 FD | 	call	#pushregs_
123a4     20 F0 07 F1 | 	add	ptra, #32
123a8     74 B4 BF FD | 	call	#_pop
123ac     FD 1A 02 F6 | 	mov	arg05, result1
123b0     FE 18 02 F6 | 	mov	arg04, result2
123b4     FF 16 02 F6 | 	mov	arg03, result3
123b8     0C 4E 05 F1 | 	add	fp, #12
123bc     A7 1A 62 FC | 	wrlong	arg05, fp
123c0     04 4E 05 F1 | 	add	fp, #4
123c4     A7 18 62 FC | 	wrlong	arg04, fp
123c8     04 4E 05 F1 | 	add	fp, #4
123cc     A7 16 62 FC | 	wrlong	arg03, fp
123d0     14 4E 85 F1 | 	sub	fp, #20
123d4     48 B4 BF FD | 	call	#_pop
123d8     FF 1A 02 F6 | 	mov	arg05, result3
123dc     A7 FA 61 FC | 	wrlong	result1, fp
123e0     04 4E 05 F1 | 	add	fp, #4
123e4     A7 FC 61 FC | 	wrlong	result2, fp
123e8     04 4E 05 F1 | 	add	fp, #4
123ec     A7 1A 62 FC | 	wrlong	arg05, fp
123f0     08 4E 85 F1 | 	sub	fp, #8
123f4     A7 12 02 F6 | 	mov	arg01, fp
123f8     08 B6 BF FD | 	call	#_converttoint
123fc     18 4E 05 F1 | 	add	fp, #24
12400     A7 FA 61 FC | 	wrlong	result1, fp
12404     0C 4E 85 F1 | 	sub	fp, #12
12408     A7 12 02 F6 | 	mov	arg01, fp
1240c     0C 4E 85 F1 | 	sub	fp, #12
12410     F0 B5 BF FD | 	call	#_converttoint
12414     1C 4E 05 F1 | 	add	fp, #28
12418     A7 FA 61 FC | 	wrlong	result1, fp
1241c     37 00 00 FF 
12420     4C E4 05 F1 | 	add	objptr, ##28236
12424     F2 12 02 FB | 	rdlong	arg01, objptr
12428     04 E4 05 F1 | 	add	objptr, #4
1242c     F2 14 02 FB | 	rdlong	arg02, objptr
12430     04 4E 85 F1 | 	sub	fp, #4
12434     A7 16 02 FB | 	rdlong	arg03, fp
12438     FD 18 02 F6 | 	mov	arg04, result1
1243c     18 4E 85 F1 | 	sub	fp, #24
12440     08 E4 85 F1 | 	sub	objptr, #8
12444     F2 1A 02 FB | 	rdlong	arg05, objptr
12448     37 00 00 FF 
1244c     48 E4 85 F1 | 	sub	objptr, ##28232
12450     CC 35 B1 FD | 	call	#_hg010b_spin2_draw
12454     18 4E 05 F1 | 	add	fp, #24
12458     A7 1A 02 FB | 	rdlong	arg05, fp
1245c     37 00 00 FF 
12460     4C E4 05 F1 | 	add	objptr, ##28236
12464     F2 1A 62 FC | 	wrlong	arg05, objptr
12468     04 4E 05 F1 | 	add	fp, #4
1246c     A7 1A 02 FB | 	rdlong	arg05, fp
12470     1C 4E 85 F1 | 	sub	fp, #28
12474     04 E4 05 F1 | 	add	objptr, #4
12478     F2 1A 62 FC | 	wrlong	arg05, objptr
1247c     37 00 00 FF 
12480     50 E4 85 F1 | 	sub	objptr, ##28240
12484     A7 F0 03 F6 | 	mov	ptra, fp
12488     B2 00 A0 FD | 	call	#popregs_
1248c                 | _do_draw_ret
1248c     2D 00 64 FD | 	ret
12490                 | 
12490                 | ' 
12490                 | ' '-------------------- else
12490                 | ' 
12490                 | ' sub do_else
12490                 | _do_else
12490     4A 00 00 FF 
12494     9C E4 05 F1 | 	add	objptr, ##38044
12498     F2 00 02 FB | 	rdlong	_var01, objptr
1249c     01 00 86 F1 | 	sub	_var01, #1
124a0     04 E4 05 F1 | 	add	objptr, #4
124a4     F2 00 62 FC | 	wrlong	_var01, objptr
124a8     4A 00 00 FF 
124ac     A0 E4 85 F1 | 	sub	objptr, ##38048
124b0                 | _do_else_ret
124b0     2D 00 64 FD | 	ret
124b4                 | 
124b4                 | ' 
124b4                 | ' '-------------------- end
124b4                 | ' 
124b4                 | ' sub do_end
124b4                 | _do_end
124b4     4A 00 00 FF 
124b8     9C E4 05 F1 | 	add	objptr, ##38044
124bc     F2 00 02 FB | 	rdlong	_var01, objptr
124c0     01 00 86 F1 | 	sub	_var01, #1
124c4     04 E4 05 F1 | 	add	objptr, #4
124c8     F2 00 62 FC | 	wrlong	_var01, objptr
124cc     06 00 00 FF 
124d0     38 E4 05 F1 | 	add	objptr, ##3128
124d4     FF FF BF FF 
124d8     F2 FE 6B FC | 	wrlong	##2147483647, objptr
124dc     50 00 00 FF 
124e0     D8 E4 85 F1 | 	sub	objptr, ##41176
124e4                 | _do_end_ret
124e4     2D 00 64 FD | 	ret
124e8                 | 
124e8                 | ' 
124e8                 | ' '-------------------- enter
124e8                 | ' 
124e8                 | ' sub do_enter
124e8                 | _do_enter
124e8     02 00 00 FF 
124ec     D2 12 06 F6 | 	mov	arg01, ##1234
124f0     00 34 B0 FD | 	call	#_do_load
124f4                 | _do_enter_ret
124f4     2D 00 64 FD | 	ret
124f8                 | 
124f8                 | ' 
124f8                 | ' '------------------- error processing
124f8                 | ' 
124f8                 | ' sub do_error
124f8                 | _do_error
124f8     01 4A 05 F6 | 	mov	COUNT_, #1
124fc     A8 00 A0 FD | 	call	#pushregs_
12500     4A 00 00 FF 
12504     A0 E4 05 F1 | 	add	objptr, ##38048
12508     F2 18 02 FB | 	rdlong	arg04, objptr
1250c     0C 17 02 F6 | 	mov	arg03, arg04
12510     01 16 66 F0 | 	shl	arg03, #1
12514     0C 17 02 F1 | 	add	arg03, arg04
12518     02 16 66 F0 | 	shl	arg03, #2
1251c     03 00 00 FF 
12520     04 E4 85 F1 | 	sub	objptr, ##1540
12524     F2 16 02 F1 | 	add	arg03, objptr
12528     0B 27 02 FB | 	rdlong	local01, arg03
1252c                 | ' r=compiledline(lineptr_e).result.uresult
1252c                 | ' print "Error ";r;": ";errors$(r)
1252c     00 12 06 F6 | 	mov	arg01, #0
12530     47 00 00 FF 
12534     9C E4 85 F1 | 	sub	objptr, ##36508
12538     88 B8 B1 FD | 	call	#__system___getiolock_0620
1253c     FD 12 02 F6 | 	mov	arg01, result1
12540     D0 5B B1 FD | 	call	#__system___lockmem
12544     C3 01 00 FF 
12548     5D 14 06 F6 | 	mov	arg02, ##@LR__6052
1254c     00 12 06 F6 | 	mov	arg01, #0
12550     00 16 06 F6 | 	mov	arg03, #0
12554     B4 68 B1 FD | 	call	#__system___basic_print_string
12558     00 12 06 F6 | 	mov	arg01, #0
1255c     13 15 02 F6 | 	mov	arg02, local01
12560     00 16 06 F6 | 	mov	arg03, #0
12564     0A 18 06 F6 | 	mov	arg04, #10
12568     24 69 B1 FD | 	call	#__system___basic_print_unsigned
1256c     C3 01 00 FF 
12570     64 14 06 F6 | 	mov	arg02, ##@LR__6053
12574     00 12 06 F6 | 	mov	arg01, #0
12578     00 16 06 F6 | 	mov	arg03, #0
1257c     8C 68 B1 FD | 	call	#__system___basic_print_string
12580     02 26 66 F0 | 	shl	local01, #2
12584     45 00 00 FF 
12588     9C E4 05 F1 | 	add	objptr, ##35484
1258c     F2 26 02 F1 | 	add	local01, objptr
12590     13 15 02 FB | 	rdlong	arg02, local01
12594     00 12 06 F6 | 	mov	arg01, #0
12598     00 16 06 F6 | 	mov	arg03, #0
1259c     45 00 00 FF 
125a0     9C E4 85 F1 | 	sub	objptr, ##35484
125a4     64 68 B1 FD | 	call	#__system___basic_print_string
125a8     00 12 06 F6 | 	mov	arg01, #0
125ac     0A 14 06 F6 | 	mov	arg02, #10
125b0     00 16 06 F6 | 	mov	arg03, #0
125b4     FC 67 B1 FD | 	call	#__system___basic_print_char
125b8     00 12 06 F6 | 	mov	arg01, #0
125bc     04 B8 B1 FD | 	call	#__system___getiolock_0620
125c0     FD 00 68 FC | 	wrlong	#0, result1
125c4     A7 F0 03 F6 | 	mov	ptra, fp
125c8     B2 00 A0 FD | 	call	#popregs_
125cc                 | _do_error_ret
125cc     2D 00 64 FD | 	ret
125d0                 | 
125d0                 | ' 
125d0                 | ' '-------------------- fcircle
125d0                 | ' 
125d0                 | ' sub do_fcircle
125d0                 | _do_fcircle
125d0     02 4A 05 F6 | 	mov	COUNT_, #2
125d4     A8 00 A0 FD | 	call	#pushregs_
125d8     24 F0 07 F1 | 	add	ptra, #36
125dc     40 B2 BF FD | 	call	#_pop
125e0     FD 14 02 F6 | 	mov	arg02, result1
125e4     FE 18 02 F6 | 	mov	arg04, result2
125e8     FF 16 02 F6 | 	mov	arg03, result3
125ec     18 4E 05 F1 | 	add	fp, #24
125f0     A7 14 62 FC | 	wrlong	arg02, fp
125f4     04 4E 05 F1 | 	add	fp, #4
125f8     A7 18 62 FC | 	wrlong	arg04, fp
125fc     04 4E 05 F1 | 	add	fp, #4
12600     A7 16 62 FC | 	wrlong	arg03, fp
12604     20 4E 85 F1 | 	sub	fp, #32
12608     14 B2 BF FD | 	call	#_pop
1260c     FD 14 02 F6 | 	mov	arg02, result1
12610     FE 18 02 F6 | 	mov	arg04, result2
12614     FF 16 02 F6 | 	mov	arg03, result3
12618     0C 4E 05 F1 | 	add	fp, #12
1261c     A7 14 62 FC | 	wrlong	arg02, fp
12620     04 4E 05 F1 | 	add	fp, #4
12624     A7 18 62 FC | 	wrlong	arg04, fp
12628     04 4E 05 F1 | 	add	fp, #4
1262c     A7 16 62 FC | 	wrlong	arg03, fp
12630     14 4E 85 F1 | 	sub	fp, #20
12634     E8 B1 BF FD | 	call	#_pop
12638     FF 14 02 F6 | 	mov	arg02, result3
1263c     A7 FA 61 FC | 	wrlong	result1, fp
12640     04 4E 05 F1 | 	add	fp, #4
12644     A7 FC 61 FC | 	wrlong	result2, fp
12648     04 4E 05 F1 | 	add	fp, #4
1264c     A7 14 62 FC | 	wrlong	arg02, fp
12650     08 4E 85 F1 | 	sub	fp, #8
12654     A7 12 02 F6 | 	mov	arg01, fp
12658     A8 B3 BF FD | 	call	#_converttoint
1265c     FD 26 02 F6 | 	mov	local01, result1
12660     0C 4E 05 F1 | 	add	fp, #12
12664     A7 12 02 F6 | 	mov	arg01, fp
12668     0C 4E 85 F1 | 	sub	fp, #12
1266c     94 B3 BF FD | 	call	#_converttoint
12670     FD 28 02 F6 | 	mov	local02, result1
12674     18 4E 05 F1 | 	add	fp, #24
12678     A7 12 02 F6 | 	mov	arg01, fp
1267c     18 4E 85 F1 | 	sub	fp, #24
12680     80 B3 BF FD | 	call	#_converttoint
12684     FD 16 02 F6 | 	mov	arg03, result1
12688     37 00 00 FF 
1268c     48 E4 05 F1 | 	add	objptr, ##28232
12690     F2 18 02 FB | 	rdlong	arg04, objptr
12694     37 00 00 FF 
12698     48 E4 85 F1 | 	sub	objptr, ##28232
1269c     13 13 02 F6 | 	mov	arg01, local01
126a0     14 15 02 F6 | 	mov	arg02, local02
126a4     FC 37 B1 FD | 	call	#_hg010b_spin2_fcircle
126a8     A7 F0 03 F6 | 	mov	ptra, fp
126ac     B2 00 A0 FD | 	call	#popregs_
126b0                 | _do_fcircle_ret
126b0     2D 00 64 FD | 	ret
126b4                 | 
126b4                 | ' 
126b4                 | ' '-------------------- fill
126b4                 | ' 
126b4                 | ' sub do_fill
126b4                 | _do_fill
126b4     03 4A 05 F6 | 	mov	COUNT_, #3
126b8     A8 00 A0 FD | 	call	#pushregs_
126bc     30 F0 07 F1 | 	add	ptra, #48
126c0     5C B1 BF FD | 	call	#_pop
126c4     FD 16 02 F6 | 	mov	arg03, result1
126c8     FE 14 02 F6 | 	mov	arg02, result2
126cc     FF 18 02 F6 | 	mov	arg04, result3
126d0     24 4E 05 F1 | 	add	fp, #36
126d4     A7 16 62 FC | 	wrlong	arg03, fp
126d8     04 4E 05 F1 | 	add	fp, #4
126dc     A7 14 62 FC | 	wrlong	arg02, fp
126e0     04 4E 05 F1 | 	add	fp, #4
126e4     A7 18 62 FC | 	wrlong	arg04, fp
126e8     2C 4E 85 F1 | 	sub	fp, #44
126ec     30 B1 BF FD | 	call	#_pop
126f0     FD 16 02 F6 | 	mov	arg03, result1
126f4     FE 14 02 F6 | 	mov	arg02, result2
126f8     FF 18 02 F6 | 	mov	arg04, result3
126fc     18 4E 05 F1 | 	add	fp, #24
12700     A7 16 62 FC | 	wrlong	arg03, fp
12704     04 4E 05 F1 | 	add	fp, #4
12708     A7 14 62 FC | 	wrlong	arg02, fp
1270c     04 4E 05 F1 | 	add	fp, #4
12710     A7 18 62 FC | 	wrlong	arg04, fp
12714     20 4E 85 F1 | 	sub	fp, #32
12718     04 B1 BF FD | 	call	#_pop
1271c     FD 16 02 F6 | 	mov	arg03, result1
12720     FE 14 02 F6 | 	mov	arg02, result2
12724     FF 18 02 F6 | 	mov	arg04, result3
12728     0C 4E 05 F1 | 	add	fp, #12
1272c     A7 16 62 FC | 	wrlong	arg03, fp
12730     04 4E 05 F1 | 	add	fp, #4
12734     A7 14 62 FC | 	wrlong	arg02, fp
12738     04 4E 05 F1 | 	add	fp, #4
1273c     A7 18 62 FC | 	wrlong	arg04, fp
12740     14 4E 85 F1 | 	sub	fp, #20
12744     D8 B0 BF FD | 	call	#_pop
12748     FF 16 02 F6 | 	mov	arg03, result3
1274c     A7 FA 61 FC | 	wrlong	result1, fp
12750     04 4E 05 F1 | 	add	fp, #4
12754     A7 FC 61 FC | 	wrlong	result2, fp
12758     04 4E 05 F1 | 	add	fp, #4
1275c     A7 16 62 FC | 	wrlong	arg03, fp
12760     08 4E 85 F1 | 	sub	fp, #8
12764     A7 12 02 F6 | 	mov	arg01, fp
12768     98 B2 BF FD | 	call	#_converttoint
1276c     FD 26 02 F6 | 	mov	local01, result1
12770     0C 4E 05 F1 | 	add	fp, #12
12774     A7 12 02 F6 | 	mov	arg01, fp
12778     0C 4E 85 F1 | 	sub	fp, #12
1277c     84 B2 BF FD | 	call	#_converttoint
12780     FD 28 02 F6 | 	mov	local02, result1
12784     18 4E 05 F1 | 	add	fp, #24
12788     A7 12 02 F6 | 	mov	arg01, fp
1278c     18 4E 85 F1 | 	sub	fp, #24
12790     70 B2 BF FD | 	call	#_converttoint
12794     FD 2A 02 F6 | 	mov	local03, result1
12798     24 4E 05 F1 | 	add	fp, #36
1279c     A7 12 02 F6 | 	mov	arg01, fp
127a0     24 4E 85 F1 | 	sub	fp, #36
127a4     5C B2 BF FD | 	call	#_converttoint
127a8     FD 18 02 F6 | 	mov	arg04, result1
127ac     13 13 02 F6 | 	mov	arg01, local01
127b0     14 15 02 F6 | 	mov	arg02, local02
127b4     15 17 02 F6 | 	mov	arg03, local03
127b8     54 34 B1 FD | 	call	#_hg010b_spin2_fill
127bc     A7 F0 03 F6 | 	mov	ptra, fp
127c0     B2 00 A0 FD | 	call	#popregs_
127c4                 | _do_fill_ret
127c4     2D 00 64 FD | 	ret
127c8                 | 
127c8                 | ' 
127c8                 | ' '-------------------- findfirst
127c8                 | ' 
127c8                 | ' sub do_findfirst
127c8                 | _do_findfirst
127c8     00 4A 05 F6 | 	mov	COUNT_, #0
127cc     A8 00 A0 FD | 	call	#pushregs_
127d0     1C F0 07 F1 | 	add	ptra, #28
127d4     4A 00 00 FF 
127d8     A0 E4 05 F1 | 	add	objptr, ##38048
127dc     F2 16 02 FB | 	rdlong	arg03, objptr
127e0     0B 15 02 F6 | 	mov	arg02, arg03
127e4     01 14 66 F0 | 	shl	arg02, #1
127e8     0B 15 02 F1 | 	add	arg02, arg03
127ec     02 14 66 F0 | 	shl	arg02, #2
127f0     03 00 00 FF 
127f4     04 E4 85 F1 | 	sub	objptr, ##1540
127f8     F2 14 02 F1 | 	add	arg02, objptr
127fc     0A 17 02 FB | 	rdlong	arg03, arg02
12800     A7 16 62 FC | 	wrlong	arg03, fp
12804                 | ' 
12804                 | ' numpar=compiledline(lineptr_e).result.uresult
12804                 | ' if numpar=2 then
12804     02 16 0E F2 | 	cmp	arg03, #2 wz
12808     47 00 00 FF 
1280c     9C E4 85 F1 | 	sub	objptr, ##36508
12810     70 01 90 5D |  if_ne	jmp	#LR__1486
12814     08 B0 BF FD | 	call	#_pop
12818     FF 16 02 F6 | 	mov	arg03, result3
1281c     08 4E 05 F1 | 	add	fp, #8
12820     A7 FA 61 FC | 	wrlong	result1, fp
12824     04 4E 05 F1 | 	add	fp, #4
12828     A7 FC 61 FC | 	wrlong	result2, fp
1282c     04 4E 05 F1 | 	add	fp, #4
12830     A7 16 62 FC | 	wrlong	arg03, fp
12834                 | '   t1=pop()
12834                 | '   if t1.result_type=result_string2 then 
12834     10 4E 85 F1 | 	sub	fp, #16
12838     2B 16 0E F2 | 	cmp	arg03, #43 wz
1283c     20 00 90 5D |  if_ne	jmp	#LR__1480
12840     08 4E 05 F1 | 	add	fp, #8
12844     A7 12 02 FB | 	rdlong	arg01, fp
12848     08 4E 85 F1 | 	sub	fp, #8
1284c     48 B1 BF FD | 	call	#_convertstring
12850     18 4E 05 F1 | 	add	fp, #24
12854     A7 FA 61 FC | 	wrlong	result1, fp
12858     18 4E 85 F1 | 	sub	fp, #24
1285c     6C 00 90 FD | 	jmp	#LR__1483
12860                 | LR__1480
12860     10 4E 05 F1 | 	add	fp, #16
12864     A7 16 02 FB | 	rdlong	arg03, fp
12868     10 4E 85 F1 | 	sub	fp, #16
1286c     1F 16 0E F2 | 	cmp	arg03, #31 wz
12870     18 00 90 5D |  if_ne	jmp	#LR__1481
12874     08 4E 05 F1 | 	add	fp, #8
12878     A7 16 02 FB | 	rdlong	arg03, fp
1287c     10 4E 05 F1 | 	add	fp, #16
12880     A7 16 62 FC | 	wrlong	arg03, fp
12884     18 4E 85 F1 | 	sub	fp, #24
12888     40 00 90 FD | 	jmp	#LR__1482
1288c                 | LR__1481
1288c                 | '     print "findfirst: "; : printerror(30) : return  
1288c     00 12 06 F6 | 	mov	arg01, #0
12890     30 B5 B1 FD | 	call	#__system___getiolock_0620
12894     FD 12 02 F6 | 	mov	arg01, result1
12898     78 58 B1 FD | 	call	#__system___lockmem
1289c     C3 01 00 FF 
128a0     67 14 06 F6 | 	mov	arg02, ##@LR__6054
128a4     00 12 06 F6 | 	mov	arg01, #0
128a8     00 16 06 F6 | 	mov	arg03, #0
128ac     5C 65 B1 FD | 	call	#__system___basic_print_string
128b0     00 12 06 F6 | 	mov	arg01, #0
128b4     0C B5 B1 FD | 	call	#__system___getiolock_0620
128b8     FD 00 68 FC | 	wrlong	#0, result1
128bc     1E 12 06 F6 | 	mov	arg01, #30
128c0     00 14 06 F6 | 	mov	arg02, #0
128c4     F4 1D B1 FD | 	call	#_printerror
128c8     7C 02 90 FD | 	jmp	#LR__1495
128cc                 | LR__1482
128cc                 | LR__1483
128cc     50 AF BF FD | 	call	#_pop
128d0     FF 16 02 F6 | 	mov	arg03, result3
128d4     08 4E 05 F1 | 	add	fp, #8
128d8     A7 FA 61 FC | 	wrlong	result1, fp
128dc     04 4E 05 F1 | 	add	fp, #4
128e0     A7 FC 61 FC | 	wrlong	result2, fp
128e4     04 4E 05 F1 | 	add	fp, #4
128e8     A7 16 62 FC | 	wrlong	arg03, fp
128ec                 | '   t1=pop()
128ec                 | '   if t1.result_type=result_string2 then 
128ec     10 4E 85 F1 | 	sub	fp, #16
128f0     2B 16 0E F2 | 	cmp	arg03, #43 wz
128f4     20 00 90 5D |  if_ne	jmp	#LR__1484
128f8     08 4E 05 F1 | 	add	fp, #8
128fc     A7 12 02 FB | 	rdlong	arg01, fp
12900     08 4E 85 F1 | 	sub	fp, #8
12904     90 B0 BF FD | 	call	#_convertstring
12908     14 4E 05 F1 | 	add	fp, #20
1290c     A7 FA 61 FC | 	wrlong	result1, fp
12910     14 4E 85 F1 | 	sub	fp, #20
12914     88 01 90 FD | 	jmp	#LR__1493
12918                 | LR__1484
12918     10 4E 05 F1 | 	add	fp, #16
1291c     A7 16 02 FB | 	rdlong	arg03, fp
12920     10 4E 85 F1 | 	sub	fp, #16
12924     1F 16 0E F2 | 	cmp	arg03, #31 wz
12928     18 00 90 5D |  if_ne	jmp	#LR__1485
1292c     08 4E 05 F1 | 	add	fp, #8
12930     A7 16 02 FB | 	rdlong	arg03, fp
12934     0C 4E 05 F1 | 	add	fp, #12
12938     A7 16 62 FC | 	wrlong	arg03, fp
1293c     14 4E 85 F1 | 	sub	fp, #20
12940     5C 01 90 FD | 	jmp	#LR__1493
12944                 | LR__1485
12944                 | '     print "findfirst: "; : printerror(30) : return  
12944     00 12 06 F6 | 	mov	arg01, #0
12948     78 B4 B1 FD | 	call	#__system___getiolock_0620
1294c     FD 12 02 F6 | 	mov	arg01, result1
12950     C0 57 B1 FD | 	call	#__system___lockmem
12954     C3 01 00 FF 
12958     73 14 06 F6 | 	mov	arg02, ##@LR__6055
1295c     00 12 06 F6 | 	mov	arg01, #0
12960     00 16 06 F6 | 	mov	arg03, #0
12964     A4 64 B1 FD | 	call	#__system___basic_print_string
12968     00 12 06 F6 | 	mov	arg01, #0
1296c     54 B4 B1 FD | 	call	#__system___getiolock_0620
12970     FD 00 68 FC | 	wrlong	#0, result1
12974     1E 12 06 F6 | 	mov	arg01, #30
12978     00 14 06 F6 | 	mov	arg02, #0
1297c     3C 1D B1 FD | 	call	#_printerror
12980     C4 01 90 FD | 	jmp	#LR__1495
12984                 | LR__1486
12984     A7 16 02 FB | 	rdlong	arg03, fp
12988     01 16 0E F2 | 	cmp	arg03, #1 wz
1298c     D0 00 90 5D |  if_ne	jmp	#LR__1491
12990     8C AE BF FD | 	call	#_pop
12994     FF 16 02 F6 | 	mov	arg03, result3
12998     08 4E 05 F1 | 	add	fp, #8
1299c     A7 FA 61 FC | 	wrlong	result1, fp
129a0     04 4E 05 F1 | 	add	fp, #4
129a4     A7 FC 61 FC | 	wrlong	result2, fp
129a8     04 4E 05 F1 | 	add	fp, #4
129ac     A7 16 62 FC | 	wrlong	arg03, fp
129b0                 | '   t1=pop()
129b0                 | '   if t1.result_type=result_string2 then 
129b0     10 4E 85 F1 | 	sub	fp, #16
129b4     2B 16 0E F2 | 	cmp	arg03, #43 wz
129b8     20 00 90 5D |  if_ne	jmp	#LR__1487
129bc     08 4E 05 F1 | 	add	fp, #8
129c0     A7 12 02 FB | 	rdlong	arg01, fp
129c4     08 4E 85 F1 | 	sub	fp, #8
129c8     CC AF BF FD | 	call	#_convertstring
129cc     14 4E 05 F1 | 	add	fp, #20
129d0     A7 FA 61 FC | 	wrlong	result1, fp
129d4     14 4E 85 F1 | 	sub	fp, #20
129d8     6C 00 90 FD | 	jmp	#LR__1490
129dc                 | LR__1487
129dc     10 4E 05 F1 | 	add	fp, #16
129e0     A7 16 02 FB | 	rdlong	arg03, fp
129e4     10 4E 85 F1 | 	sub	fp, #16
129e8     1F 16 0E F2 | 	cmp	arg03, #31 wz
129ec     18 00 90 5D |  if_ne	jmp	#LR__1488
129f0     08 4E 05 F1 | 	add	fp, #8
129f4     A7 16 02 FB | 	rdlong	arg03, fp
129f8     0C 4E 05 F1 | 	add	fp, #12
129fc     A7 16 62 FC | 	wrlong	arg03, fp
12a00     14 4E 85 F1 | 	sub	fp, #20
12a04     40 00 90 FD | 	jmp	#LR__1489
12a08                 | LR__1488
12a08                 | '     print "findfirst: "; : printerror(30) : return  
12a08     00 12 06 F6 | 	mov	arg01, #0
12a0c     B4 B3 B1 FD | 	call	#__system___getiolock_0620
12a10     FD 12 02 F6 | 	mov	arg01, result1
12a14     FC 56 B1 FD | 	call	#__system___lockmem
12a18     C3 01 00 FF 
12a1c     7F 14 06 F6 | 	mov	arg02, ##@LR__6056
12a20     00 12 06 F6 | 	mov	arg01, #0
12a24     00 16 06 F6 | 	mov	arg03, #0
12a28     E0 63 B1 FD | 	call	#__system___basic_print_string
12a2c     00 12 06 F6 | 	mov	arg01, #0
12a30     90 B3 B1 FD | 	call	#__system___getiolock_0620
12a34     FD 00 68 FC | 	wrlong	#0, result1
12a38     1E 12 06 F6 | 	mov	arg01, #30
12a3c     00 14 06 F6 | 	mov	arg02, #0
12a40     78 1C B1 FD | 	call	#_printerror
12a44     00 01 90 FD | 	jmp	#LR__1495
12a48                 | LR__1489
12a48                 | LR__1490
12a48     C3 01 00 FF 
12a4c     8B 16 06 F6 | 	mov	arg03, ##@LR__6057
12a50     18 4E 05 F1 | 	add	fp, #24
12a54     A7 16 62 FC | 	wrlong	arg03, fp
12a58     18 4E 85 F1 | 	sub	fp, #24
12a5c     40 00 90 FD | 	jmp	#LR__1492
12a60                 | LR__1491
12a60                 | '   print "findfirst: "; : printerror(39) : return     
12a60     00 12 06 F6 | 	mov	arg01, #0
12a64     5C B3 B1 FD | 	call	#__system___getiolock_0620
12a68     FD 12 02 F6 | 	mov	arg01, result1
12a6c     A4 56 B1 FD | 	call	#__system___lockmem
12a70     C3 01 00 FF 
12a74     8C 14 06 F6 | 	mov	arg02, ##@LR__6058
12a78     00 12 06 F6 | 	mov	arg01, #0
12a7c     00 16 06 F6 | 	mov	arg03, #0
12a80     88 63 B1 FD | 	call	#__system___basic_print_string
12a84     00 12 06 F6 | 	mov	arg01, #0
12a88     38 B3 B1 FD | 	call	#__system___getiolock_0620
12a8c     FD 00 68 FC | 	wrlong	#0, result1
12a90     27 12 06 F6 | 	mov	arg01, #39
12a94     00 14 06 F6 | 	mov	arg02, #0
12a98     20 1C B1 FD | 	call	#_printerror
12a9c     A8 00 90 FD | 	jmp	#LR__1495
12aa0                 | LR__1492
12aa0                 | LR__1493
12aa0                 | ' 
12aa0                 | ' if s2="" then
12aa0     18 4E 05 F1 | 	add	fp, #24
12aa4     A7 12 02 FB | 	rdlong	arg01, fp
12aa8     18 4E 85 F1 | 	sub	fp, #24
12aac     C3 01 00 FF 
12ab0     98 14 06 F6 | 	mov	arg02, ##@LR__6059
12ab4     84 56 B1 FD | 	call	#__system___string_cmp
12ab8     00 FA 0D F2 | 	cmp	result1, #0 wz
12abc     04 4E 05 A1 |  if_e	add	fp, #4
12ac0     A7 62 68 AC |  if_e	wrlong	#49, fp
12ac4     04 4E 85 A1 |  if_e	sub	fp, #4
12ac8     38 00 90 AD |  if_e	jmp	#LR__1494
12acc     18 4E 05 F1 | 	add	fp, #24
12ad0     A7 12 02 FB | 	rdlong	arg01, fp
12ad4     18 4E 85 F1 | 	sub	fp, #24
12ad8     C8 79 B1 FD | 	call	#__system__LCase_S
12adc     FD 12 02 F6 | 	mov	arg01, result1
12ae0     C3 01 00 FF 
12ae4     99 14 06 F6 | 	mov	arg02, ##@LR__6060
12ae8     50 56 B1 FD | 	call	#__system___string_cmp
12aec     00 FA 0D F2 | 	cmp	result1, #0 wz
12af0     04 4E 05 A1 |  if_e	add	fp, #4
12af4     A7 20 68 AC |  if_e	wrlong	#16, fp
12af8     04 4E C5 F3 | 	sumz	fp, #4
12afc     A7 42 68 5C |  if_ne	wrlong	#33, fp
12b00     04 4E 85 51 |  if_ne	sub	fp, #4
12b04                 | LR__1494
12b04     14 4E 05 F1 | 	add	fp, #20
12b08     A7 12 02 FB | 	rdlong	arg01, fp
12b0c     10 4E 85 F1 | 	sub	fp, #16
12b10     A7 14 02 FB | 	rdlong	arg02, fp
12b14     04 4E 85 F1 | 	sub	fp, #4
12b18     68 B4 B1 FD | 	call	#__system___basic_dir
12b1c     18 4E 05 F1 | 	add	fp, #24
12b20     A7 FA 61 FC | 	wrlong	result1, fp
12b24     08 4E 85 F1 | 	sub	fp, #8
12b28     A7 3E 68 FC | 	wrlong	#31, fp
12b2c     08 4E 05 F1 | 	add	fp, #8
12b30     A7 16 02 FB | 	rdlong	arg03, fp
12b34     10 4E 85 F1 | 	sub	fp, #16
12b38     A7 16 62 FC | 	wrlong	arg03, fp
12b3c     A7 12 02 F6 | 	mov	arg01, fp
12b40     08 4E 85 F1 | 	sub	fp, #8
12b44     70 AD BF FD | 	call	#_push
12b48                 | LR__1495
12b48     A7 F0 03 F6 | 	mov	ptra, fp
12b4c     B2 00 A0 FD | 	call	#popregs_
12b50                 | _do_findfirst_ret
12b50     2D 00 64 FD | 	ret
12b54                 | 
12b54                 | ' 
12b54                 | ' '-------------------- findnext
12b54                 | ' 
12b54                 | ' sub do_findnext
12b54                 | _do_findnext
12b54     00 4A 05 F6 | 	mov	COUNT_, #0
12b58     A8 00 A0 FD | 	call	#pushregs_
12b5c     10 F0 07 F1 | 	add	ptra, #16
12b60                 | ' 
12b60                 | ' if compiledline(lineptr_e).result.uresult>0 then print "findnext: "; : printerror(39) : return    
12b60     4A 00 00 FF 
12b64     A0 E4 05 F1 | 	add	objptr, ##38048
12b68     F2 16 02 FB | 	rdlong	arg03, objptr
12b6c     0B 15 02 F6 | 	mov	arg02, arg03
12b70     01 14 66 F0 | 	shl	arg02, #1
12b74     0B 15 02 F1 | 	add	arg02, arg03
12b78     02 14 66 F0 | 	shl	arg02, #2
12b7c     03 00 00 FF 
12b80     04 E4 85 F1 | 	sub	objptr, ##1540
12b84     F2 14 02 F1 | 	add	arg02, objptr
12b88     0A FB 01 FB | 	rdlong	result1, arg02
12b8c     01 FA 15 F2 | 	cmp	result1, #1 wc
12b90     47 00 00 FF 
12b94     9C E4 85 F1 | 	sub	objptr, ##36508
12b98     40 00 90 CD |  if_b	jmp	#LR__1500
12b9c     00 12 06 F6 | 	mov	arg01, #0
12ba0     20 B2 B1 FD | 	call	#__system___getiolock_0620
12ba4     FD 12 02 F6 | 	mov	arg01, result1
12ba8     68 55 B1 FD | 	call	#__system___lockmem
12bac     C3 01 00 FF 
12bb0     9D 14 06 F6 | 	mov	arg02, ##@LR__6061
12bb4     00 12 06 F6 | 	mov	arg01, #0
12bb8     00 16 06 F6 | 	mov	arg03, #0
12bbc     4C 62 B1 FD | 	call	#__system___basic_print_string
12bc0     00 12 06 F6 | 	mov	arg01, #0
12bc4     FC B1 B1 FD | 	call	#__system___getiolock_0620
12bc8     FD 00 68 FC | 	wrlong	#0, result1
12bcc     27 12 06 F6 | 	mov	arg01, #39
12bd0     00 14 06 F6 | 	mov	arg02, #0
12bd4     E4 1A B1 FD | 	call	#_printerror
12bd8     34 00 90 FD | 	jmp	#LR__1501
12bdc                 | LR__1500
12bdc     00 12 06 F6 | 	mov	arg01, #0
12be0     00 14 06 F6 | 	mov	arg02, #0
12be4     9C B3 B1 FD | 	call	#__system___basic_dir
12be8     0C 4E 05 F1 | 	add	fp, #12
12bec     A7 FA 61 FC | 	wrlong	result1, fp
12bf0     04 4E 85 F1 | 	sub	fp, #4
12bf4     A7 3E 68 FC | 	wrlong	#31, fp
12bf8     04 4E 05 F1 | 	add	fp, #4
12bfc     A7 16 02 FB | 	rdlong	arg03, fp
12c00     0C 4E 85 F1 | 	sub	fp, #12
12c04     A7 16 62 FC | 	wrlong	arg03, fp
12c08     A7 12 02 F6 | 	mov	arg01, fp
12c0c     A8 AC BF FD | 	call	#_push
12c10                 | LR__1501
12c10     A7 F0 03 F6 | 	mov	ptra, fp
12c14     B2 00 A0 FD | 	call	#popregs_
12c18                 | _do_findnext_ret
12c18     2D 00 64 FD | 	ret
12c1c                 | 
12c1c                 | ' 
12c1c                 | ' '-------------------- font
12c1c                 | ' 
12c1c                 | ' sub do_font
12c1c                 | _do_font
12c1c     03 4A 05 F6 | 	mov	COUNT_, #3
12c20     A8 00 A0 FD | 	call	#pushregs_
12c24     F8 AB BF FD | 	call	#_pop
12c28     FD 26 02 F6 | 	mov	local01, result1
12c2c     FE 28 02 F6 | 	mov	local02, result2
12c30     FF 2A 02 F6 | 	mov	local03, result3
12c34                 | ' 
12c34                 | ' t1=pop() 
12c34                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
12c34     1E 2A 0E F2 | 	cmp	local03, #30 wz
12c38     10 00 90 5D |  if_ne	jmp	#LR__1510
12c3c     13 13 02 F6 | 	mov	arg01, local01
12c40     00 14 06 F6 | 	mov	arg02, #0
12c44     10 88 B1 FD | 	call	#__system___float_tointeger
12c48     FD 26 02 F6 | 	mov	local01, result1
12c4c                 | LR__1510
12c4c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
12c4c     1F 2A 0E F2 | 	cmp	local03, #31 wz
12c50     18 00 90 5D |  if_ne	jmp	#LR__1511
12c54     13 13 02 F6 | 	mov	arg01, local01
12c58     44 8B B1 FD | 	call	#__system____builtin_atof
12c5c     FD 12 02 F6 | 	mov	arg01, result1
12c60     00 14 06 F6 | 	mov	arg02, #0
12c64     F0 87 B1 FD | 	call	#__system___float_tointeger
12c68     FD 26 02 F6 | 	mov	local01, result1
12c6c                 | LR__1511
12c6c     37 00 00 FF 
12c70     60 E4 05 F1 | 	add	objptr, ##28256
12c74     F2 26 62 FC | 	wrlong	local01, objptr
12c78     37 00 00 FF 
12c7c     60 E4 85 F1 | 	sub	objptr, ##28256
12c80     02 26 66 F0 | 	shl	local01, #2
12c84     13 13 02 F6 | 	mov	arg01, local01
12c88     68 36 B1 FD | 	call	#_hg010b_spin2_setfontfamily
12c8c     A7 F0 03 F6 | 	mov	ptra, fp
12c90     B2 00 A0 FD | 	call	#popregs_
12c94                 | _do_font_ret
12c94     2D 00 64 FD | 	ret
12c98                 | 
12c98                 | ' 
12c98                 | ' '-------------------- for
12c98                 | ' 
12c98                 | ' sub do_for()
12c98                 | _do_for
12c98     01 4A 05 F6 | 	mov	COUNT_, #1
12c9c     A8 00 A0 FD | 	call	#pushregs_
12ca0     10 F0 07 F1 | 	add	ptra, #16
12ca4     50 00 00 FF 
12ca8     50 E5 05 F1 | 	add	objptr, ##41296
12cac     F2 12 02 FB | 	rdlong	arg01, objptr
12cb0     01 12 06 F1 | 	add	arg01, #1
12cb4     F2 12 62 FC | 	wrlong	arg01, objptr
12cb8     50 00 00 FF 
12cbc     50 E5 85 F1 | 	sub	objptr, ##41296
12cc0     5C AB BF FD | 	call	#_pop
12cc4     A7 FA 61 FC | 	wrlong	result1, fp
12cc8     04 4E 05 F1 | 	add	fp, #4
12ccc     A7 FC 61 FC | 	wrlong	result2, fp
12cd0     04 4E 05 F1 | 	add	fp, #4
12cd4     A7 FE 61 FC | 	wrlong	result3, fp
12cd8     08 4E 85 F1 | 	sub	fp, #8
12cdc     50 00 00 FF 
12ce0     50 E5 05 F1 | 	add	objptr, ##41296
12ce4     F2 12 02 FB | 	rdlong	arg01, objptr
12ce8     09 27 02 F6 | 	mov	local01, arg01
12cec     02 26 66 F0 | 	shl	local01, #2
12cf0     09 27 02 F1 | 	add	local01, arg01
12cf4     02 26 66 F0 | 	shl	local01, #2
12cf8     06 00 00 FF 
12cfc     98 E4 85 F1 | 	sub	objptr, ##3224
12d00     F2 26 02 F1 | 	add	local01, objptr
12d04     A7 12 02 FB | 	rdlong	arg01, fp
12d08     08 26 06 F1 | 	add	local01, #8
12d0c     13 13 62 FC | 	wrlong	arg01, local01
12d10     4A 00 00 FF 
12d14     B8 E4 85 F1 | 	sub	objptr, ##38072
12d18     04 AB BF FD | 	call	#_pop
12d1c     A7 FA 61 FC | 	wrlong	result1, fp
12d20     04 4E 05 F1 | 	add	fp, #4
12d24     A7 FC 61 FC | 	wrlong	result2, fp
12d28     04 4E 05 F1 | 	add	fp, #4
12d2c     A7 FE 61 FC | 	wrlong	result3, fp
12d30     08 4E 85 F1 | 	sub	fp, #8
12d34     50 00 00 FF 
12d38     50 E5 05 F1 | 	add	objptr, ##41296
12d3c     F2 12 02 FB | 	rdlong	arg01, objptr
12d40     09 27 02 F6 | 	mov	local01, arg01
12d44     02 26 66 F0 | 	shl	local01, #2
12d48     09 27 02 F1 | 	add	local01, arg01
12d4c     02 26 66 F0 | 	shl	local01, #2
12d50     06 00 00 FF 
12d54     98 E4 85 F1 | 	sub	objptr, ##3224
12d58     F2 26 02 F1 | 	add	local01, objptr
12d5c     A7 12 02 F6 | 	mov	arg01, fp
12d60     4A 00 00 FF 
12d64     B8 E4 85 F1 | 	sub	objptr, ##38072
12d68     98 AC BF FD | 	call	#_converttoint
12d6c     FD 12 02 F6 | 	mov	arg01, result1
12d70     0C 26 06 F1 | 	add	local01, #12
12d74     13 13 62 FC | 	wrlong	arg01, local01
12d78     A4 AA BF FD | 	call	#_pop
12d7c     A7 FA 61 FC | 	wrlong	result1, fp
12d80     04 4E 05 F1 | 	add	fp, #4
12d84     A7 FC 61 FC | 	wrlong	result2, fp
12d88     04 4E 05 F1 | 	add	fp, #4
12d8c     A7 FE 61 FC | 	wrlong	result3, fp
12d90     08 4E 85 F1 | 	sub	fp, #8
12d94     50 00 00 FF 
12d98     50 E5 05 F1 | 	add	objptr, ##41296
12d9c     F2 12 02 FB | 	rdlong	arg01, objptr
12da0     09 27 02 F6 | 	mov	local01, arg01
12da4     02 26 66 F0 | 	shl	local01, #2
12da8     09 27 02 F1 | 	add	local01, arg01
12dac     02 26 66 F0 | 	shl	local01, #2
12db0     06 00 00 FF 
12db4     98 E4 85 F1 | 	sub	objptr, ##3224
12db8     F2 26 02 F1 | 	add	local01, objptr
12dbc     A7 12 02 F6 | 	mov	arg01, fp
12dc0     4A 00 00 FF 
12dc4     B8 E4 85 F1 | 	sub	objptr, ##38072
12dc8     38 AC BF FD | 	call	#_converttoint
12dcc     10 26 06 F1 | 	add	local01, #16
12dd0     13 FB 61 FC | 	wrlong	result1, local01
12dd4                 | ' fortop+=1
12dd4                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
12dd4                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
12dd4                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
12dd4                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
12dd4     4A 00 00 FF 
12dd8     A0 E4 05 F1 | 	add	objptr, ##38048
12ddc     F2 12 02 FB | 	rdlong	arg01, objptr
12de0     09 27 02 F6 | 	mov	local01, arg01
12de4     01 26 66 F0 | 	shl	local01, #1
12de8     09 27 02 F1 | 	add	local01, arg01
12dec     02 26 66 F0 | 	shl	local01, #2
12df0     03 00 00 FF 
12df4     04 E4 85 F1 | 	sub	objptr, ##1540
12df8     F2 26 02 F1 | 	add	local01, objptr
12dfc     08 26 06 F1 | 	add	local01, #8
12e00     13 27 02 FB | 	rdlong	local01, local01
12e04     FE 27 0E F2 | 	cmp	local01, #510 wz
12e08     47 00 00 FF 
12e0c     9C E4 85 F1 | 	sub	objptr, ##36508
12e10     70 00 90 5D |  if_ne	jmp	#LR__1520
12e14     50 00 00 FF 
12e18     50 E5 05 F1 | 	add	objptr, ##41296
12e1c     F2 12 02 FB | 	rdlong	arg01, objptr
12e20     09 27 02 F6 | 	mov	local01, arg01
12e24     02 26 66 F0 | 	shl	local01, #2
12e28     09 27 02 F1 | 	add	local01, arg01
12e2c     02 26 66 F0 | 	shl	local01, #2
12e30     06 00 00 FF 
12e34     98 E4 85 F1 | 	sub	objptr, ##3224
12e38     F2 26 02 F1 | 	add	local01, objptr
12e3c     06 00 00 FF 
12e40     20 E4 05 F1 | 	add	objptr, ##3104
12e44     F2 12 02 FB | 	rdlong	arg01, objptr
12e48     13 13 62 FC | 	wrlong	arg01, local01
12e4c     78 E4 05 F1 | 	add	objptr, #120
12e50     F2 12 02 FB | 	rdlong	arg01, objptr
12e54     09 27 02 F6 | 	mov	local01, arg01
12e58     02 26 66 F0 | 	shl	local01, #2
12e5c     09 27 02 F1 | 	add	local01, arg01
12e60     02 26 66 F0 | 	shl	local01, #2
12e64     06 00 00 FF 
12e68     98 E4 85 F1 | 	sub	objptr, ##3224
12e6c     F2 26 02 F1 | 	add	local01, objptr
12e70     04 26 06 F1 | 	add	local01, #4
12e74     13 01 68 FC | 	wrlong	#0, local01
12e78     4A 00 00 FF 
12e7c     B8 E4 85 F1 | 	sub	objptr, ##38072
12e80     78 00 90 FD | 	jmp	#LR__1521
12e84                 | LR__1520
12e84     50 00 00 FF 
12e88     50 E5 05 F1 | 	add	objptr, ##41296
12e8c     F2 12 02 FB | 	rdlong	arg01, objptr
12e90     09 27 02 F6 | 	mov	local01, arg01
12e94     02 26 66 F0 | 	shl	local01, #2
12e98     09 27 02 F1 | 	add	local01, arg01
12e9c     02 26 66 F0 | 	shl	local01, #2
12ea0     06 00 00 FF 
12ea4     98 E4 85 F1 | 	sub	objptr, ##3224
12ea8     F2 26 02 F1 | 	add	local01, objptr
12eac     06 00 00 FF 
12eb0     28 E4 05 F1 | 	add	objptr, ##3112
12eb4     F2 12 02 FB | 	rdlong	arg01, objptr
12eb8     13 13 62 FC | 	wrlong	arg01, local01
12ebc     70 E4 05 F1 | 	add	objptr, #112
12ec0     F2 12 02 FB | 	rdlong	arg01, objptr
12ec4     09 27 02 F6 | 	mov	local01, arg01
12ec8     02 26 66 F0 | 	shl	local01, #2
12ecc     09 27 02 F1 | 	add	local01, arg01
12ed0     02 26 66 F0 | 	shl	local01, #2
12ed4     06 00 00 FF 
12ed8     98 E4 85 F1 | 	sub	objptr, ##3224
12edc     F2 26 02 F1 | 	add	local01, objptr
12ee0     18 E4 85 F1 | 	sub	objptr, #24
12ee4     F2 12 02 FB | 	rdlong	arg01, objptr
12ee8     4A 00 00 FF 
12eec     A0 E4 85 F1 | 	sub	objptr, ##38048
12ef0     01 12 06 F1 | 	add	arg01, #1
12ef4     04 26 06 F1 | 	add	local01, #4
12ef8     13 13 62 FC | 	wrlong	arg01, local01
12efc                 | LR__1521
12efc     A7 F0 03 F6 | 	mov	ptra, fp
12f00     B2 00 A0 FD | 	call	#popregs_
12f04                 | _do_for_ret
12f04     2D 00 64 FD | 	ret
12f08                 | 
12f08                 | ' 
12f08                 | ' '-------------------- frame
12f08                 | ' 
12f08                 | ' sub do_frame
12f08                 | _do_frame
12f08     03 4A 05 F6 | 	mov	COUNT_, #3
12f0c     A8 00 A0 FD | 	call	#pushregs_
12f10     30 F0 07 F1 | 	add	ptra, #48
12f14     08 A9 BF FD | 	call	#_pop
12f18     FD 16 02 F6 | 	mov	arg03, result1
12f1c     FE 14 02 F6 | 	mov	arg02, result2
12f20     FF 1A 02 F6 | 	mov	arg05, result3
12f24     24 4E 05 F1 | 	add	fp, #36
12f28     A7 16 62 FC | 	wrlong	arg03, fp
12f2c     04 4E 05 F1 | 	add	fp, #4
12f30     A7 14 62 FC | 	wrlong	arg02, fp
12f34     04 4E 05 F1 | 	add	fp, #4
12f38     A7 1A 62 FC | 	wrlong	arg05, fp
12f3c     2C 4E 85 F1 | 	sub	fp, #44
12f40     DC A8 BF FD | 	call	#_pop
12f44     FD 16 02 F6 | 	mov	arg03, result1
12f48     FE 14 02 F6 | 	mov	arg02, result2
12f4c     FF 1A 02 F6 | 	mov	arg05, result3
12f50     18 4E 05 F1 | 	add	fp, #24
12f54     A7 16 62 FC | 	wrlong	arg03, fp
12f58     04 4E 05 F1 | 	add	fp, #4
12f5c     A7 14 62 FC | 	wrlong	arg02, fp
12f60     04 4E 05 F1 | 	add	fp, #4
12f64     A7 1A 62 FC | 	wrlong	arg05, fp
12f68     20 4E 85 F1 | 	sub	fp, #32
12f6c     B0 A8 BF FD | 	call	#_pop
12f70     FD 16 02 F6 | 	mov	arg03, result1
12f74     FE 14 02 F6 | 	mov	arg02, result2
12f78     FF 1A 02 F6 | 	mov	arg05, result3
12f7c     0C 4E 05 F1 | 	add	fp, #12
12f80     A7 16 62 FC | 	wrlong	arg03, fp
12f84     04 4E 05 F1 | 	add	fp, #4
12f88     A7 14 62 FC | 	wrlong	arg02, fp
12f8c     04 4E 05 F1 | 	add	fp, #4
12f90     A7 1A 62 FC | 	wrlong	arg05, fp
12f94     14 4E 85 F1 | 	sub	fp, #20
12f98     84 A8 BF FD | 	call	#_pop
12f9c     FF 16 02 F6 | 	mov	arg03, result3
12fa0     A7 FA 61 FC | 	wrlong	result1, fp
12fa4     04 4E 05 F1 | 	add	fp, #4
12fa8     A7 FC 61 FC | 	wrlong	result2, fp
12fac     04 4E 05 F1 | 	add	fp, #4
12fb0     A7 16 62 FC | 	wrlong	arg03, fp
12fb4     08 4E 85 F1 | 	sub	fp, #8
12fb8     A7 12 02 F6 | 	mov	arg01, fp
12fbc     44 AA BF FD | 	call	#_converttoint
12fc0     FD 26 02 F6 | 	mov	local01, result1
12fc4     0C 4E 05 F1 | 	add	fp, #12
12fc8     A7 12 02 F6 | 	mov	arg01, fp
12fcc     0C 4E 85 F1 | 	sub	fp, #12
12fd0     30 AA BF FD | 	call	#_converttoint
12fd4     FD 28 02 F6 | 	mov	local02, result1
12fd8     18 4E 05 F1 | 	add	fp, #24
12fdc     A7 12 02 F6 | 	mov	arg01, fp
12fe0     18 4E 85 F1 | 	sub	fp, #24
12fe4     1C AA BF FD | 	call	#_converttoint
12fe8     FD 2A 02 F6 | 	mov	local03, result1
12fec     24 4E 05 F1 | 	add	fp, #36
12ff0     A7 12 02 F6 | 	mov	arg01, fp
12ff4     24 4E 85 F1 | 	sub	fp, #36
12ff8     08 AA BF FD | 	call	#_converttoint
12ffc     FD 18 02 F6 | 	mov	arg04, result1
13000     37 00 00 FF 
13004     48 E4 05 F1 | 	add	objptr, ##28232
13008     F2 1A 02 FB | 	rdlong	arg05, objptr
1300c     37 00 00 FF 
13010     48 E4 85 F1 | 	sub	objptr, ##28232
13014     13 13 02 F6 | 	mov	arg01, local01
13018     14 15 02 F6 | 	mov	arg02, local02
1301c     15 17 02 F6 | 	mov	arg03, local03
13020     D8 30 B1 FD | 	call	#_hg010b_spin2_frame
13024     A7 F0 03 F6 | 	mov	ptra, fp
13028     B2 00 A0 FD | 	call	#popregs_
1302c                 | _do_frame_ret
1302c     2D 00 64 FD | 	ret
13030                 | 
13030                 | ' 
13030                 | ' '-------------------- framebuf
13030                 | ' 
13030                 | ' sub do_framebuf
13030                 | _do_framebuf
13030     00 4A 05 F6 | 	mov	COUNT_, #0
13034     A8 00 A0 FD | 	call	#pushregs_
13038     0C F0 07 F1 | 	add	ptra, #12
1303c     08 4E 05 F1 | 	add	fp, #8
13040     A7 3A 68 FC | 	wrlong	#29, fp
13044     F2 12 02 FB | 	rdlong	arg01, objptr
13048     08 4E 85 F1 | 	sub	fp, #8
1304c     A7 12 62 FC | 	wrlong	arg01, fp
13050     A7 12 02 F6 | 	mov	arg01, fp
13054     60 A8 BF FD | 	call	#_push
13058     A7 F0 03 F6 | 	mov	ptra, fp
1305c     B2 00 A0 FD | 	call	#popregs_
13060                 | _do_framebuf_ret
13060     2D 00 64 FD | 	ret
13064                 | 
13064                 | ' '-------------------- fre
13064                 | ' 
13064                 | ' sub do_fre
13064                 | _do_fre
13064     01 4A 05 F6 | 	mov	COUNT_, #1
13068     A8 00 A0 FD | 	call	#pushregs_
1306c     0C F0 07 F1 | 	add	ptra, #12
13070     52 00 00 FF 
13074     F0 E4 05 F1 | 	add	objptr, ##42224
13078     F2 12 02 FB | 	rdlong	arg01, objptr
1307c     0F 00 00 FF 
13080     74 E4 85 F1 | 	sub	objptr, ##7796
13084     F2 26 02 FB | 	rdlong	local01, objptr
13088     13 13 82 F1 | 	sub	arg01, local01
1308c     0F 00 00 FF 
13090     EC E4 05 F1 | 	add	objptr, ##7916
13094     F2 12 62 FC | 	wrlong	arg01, objptr
13098     08 4E 05 F1 | 	add	fp, #8
1309c     A7 3A 68 FC | 	wrlong	#29, fp
130a0     08 4E 85 F1 | 	sub	fp, #8
130a4     F2 26 02 FB | 	rdlong	local01, objptr
130a8     52 00 00 FF 
130ac     68 E5 85 F1 | 	sub	objptr, ##42344
130b0     A7 26 62 FC | 	wrlong	local01, fp
130b4     A7 12 02 F6 | 	mov	arg01, fp
130b8     FC A7 BF FD | 	call	#_push
130bc     A7 F0 03 F6 | 	mov	ptra, fp
130c0     B2 00 A0 FD | 	call	#popregs_
130c4                 | _do_fre_ret
130c4     2D 00 64 FD | 	ret
130c8                 | 
130c8                 | ' 
130c8                 | ' '-------------------- get
130c8                 | ' 
130c8                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
130c8                 | _do_get
130c8     09 4A 05 F6 | 	mov	COUNT_, #9
130cc     A8 00 A0 FD | 	call	#pushregs_
130d0     40 F0 07 F1 | 	add	ptra, #64
130d4     4A 00 00 FF 
130d8     A0 E4 05 F1 | 	add	objptr, ##38048
130dc     F2 1A 02 FB | 	rdlong	arg05, objptr
130e0     0D 19 02 F6 | 	mov	arg04, arg05
130e4     01 18 66 F0 | 	shl	arg04, #1
130e8     0D 19 02 F1 | 	add	arg04, arg05
130ec     02 18 66 F0 | 	shl	arg04, #2
130f0     03 00 00 FF 
130f4     04 E4 85 F1 | 	sub	objptr, ##1540
130f8     F2 18 02 F1 | 	add	arg04, objptr
130fc     0C 1B 02 FB | 	rdlong	arg05, arg04
13100     A7 1A 62 FC | 	wrlong	arg05, fp
13104                 | ' 
13104                 | ' numpar=compiledline(lineptr_e).result.uresult
13104                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
13104     04 1A 0E F2 | 	cmp	arg05, #4 wz
13108     47 00 00 FF 
1310c     9C E4 85 F1 | 	sub	objptr, ##36508
13110     48 00 90 5D |  if_ne	jmp	#LR__1530
13114     08 A7 BF FD | 	call	#_pop
13118     FF 1A 02 F6 | 	mov	arg05, result3
1311c     1C 4E 05 F1 | 	add	fp, #28
13120     A7 FA 61 FC | 	wrlong	result1, fp
13124     04 4E 05 F1 | 	add	fp, #4
13128     A7 FC 61 FC | 	wrlong	result2, fp
1312c     04 4E 05 F1 | 	add	fp, #4
13130     A7 1A 62 FC | 	wrlong	arg05, fp
13134     08 4E 85 F1 | 	sub	fp, #8
13138     A7 12 02 F6 | 	mov	arg01, fp
1313c     1C 4E 85 F1 | 	sub	fp, #28
13140     C0 A8 BF FD | 	call	#_converttoint
13144     52 00 00 FF 
13148     64 E5 05 F1 | 	add	objptr, ##42340
1314c     F2 FA 61 FC | 	wrlong	result1, objptr
13150     52 00 00 FF 
13154     64 E5 85 F1 | 	sub	objptr, ##42340
13158     18 00 90 FD | 	jmp	#LR__1531
1315c                 | LR__1530
1315c     52 00 00 FF 
13160     64 E5 05 F1 | 	add	objptr, ##42340
13164     FF FF FF FF 
13168     F2 FE 6B FC | 	wrlong	##-1, objptr
1316c     52 00 00 FF 
13170     64 E5 85 F1 | 	sub	objptr, ##42340
13174                 | LR__1531
13174                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
13174     A7 16 02 FB | 	rdlong	arg03, fp
13178     03 16 56 F2 | 	cmps	arg03, #3 wc
1317c     40 00 90 CD |  if_b	jmp	#LR__1532
13180     9C A6 BF FD | 	call	#_pop
13184     FF 16 02 F6 | 	mov	arg03, result3
13188     1C 4E 05 F1 | 	add	fp, #28
1318c     A7 FA 61 FC | 	wrlong	result1, fp
13190     04 4E 05 F1 | 	add	fp, #4
13194     A7 FC 61 FC | 	wrlong	result2, fp
13198     04 4E 05 F1 | 	add	fp, #4
1319c     A7 16 62 FC | 	wrlong	arg03, fp
131a0     08 4E 85 F1 | 	sub	fp, #8
131a4     A7 12 02 F6 | 	mov	arg01, fp
131a8     1C 4E 85 F1 | 	sub	fp, #28
131ac     54 A8 BF FD | 	call	#_converttoint
131b0     08 4E 05 F1 | 	add	fp, #8
131b4     A7 FA 61 FC | 	wrlong	result1, fp
131b8     08 4E 85 F1 | 	sub	fp, #8
131bc     0C 00 90 FD | 	jmp	#LR__1533
131c0                 | LR__1532
131c0     08 4E 05 F1 | 	add	fp, #8
131c4     A7 02 68 FC | 	wrlong	#1, fp
131c8     08 4E 85 F1 | 	sub	fp, #8
131cc                 | LR__1533
131cc                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
131cc     A7 16 02 FB | 	rdlong	arg03, fp
131d0     02 16 56 F2 | 	cmps	arg03, #2 wc
131d4     3C 00 90 CD |  if_b	jmp	#LR__1534
131d8     44 A6 BF FD | 	call	#_pop
131dc     FF 16 02 F6 | 	mov	arg03, result3
131e0     1C 4E 05 F1 | 	add	fp, #28
131e4     A7 FA 61 FC | 	wrlong	result1, fp
131e8     04 4E 05 F1 | 	add	fp, #4
131ec     A7 FC 61 FC | 	wrlong	result2, fp
131f0     04 4E 05 F1 | 	add	fp, #4
131f4     A7 16 62 FC | 	wrlong	arg03, fp
131f8     08 4E 85 F1 | 	sub	fp, #8
131fc     A7 12 02 F6 | 	mov	arg01, fp
13200     1C 4E 85 F1 | 	sub	fp, #28
13204     FC A7 BF FD | 	call	#_converttoint
13208     0C 4E 05 F1 | 	add	fp, #12
1320c     A7 FA 61 FC | 	wrlong	result1, fp
13210     0C 4E 85 F1 | 	sub	fp, #12
13214                 | LR__1534
13214     08 A6 BF FD | 	call	#_pop
13218     FF 16 02 F6 | 	mov	arg03, result3
1321c     1C 4E 05 F1 | 	add	fp, #28
13220     A7 FA 61 FC | 	wrlong	result1, fp
13224     04 4E 05 F1 | 	add	fp, #4
13228     A7 FC 61 FC | 	wrlong	result2, fp
1322c     04 4E 05 F1 | 	add	fp, #4
13230     A7 16 62 FC | 	wrlong	arg03, fp
13234     08 4E 85 F1 | 	sub	fp, #8
13238     A7 12 02 F6 | 	mov	arg01, fp
1323c     1C 4E 85 F1 | 	sub	fp, #28
13240     C0 A7 BF FD | 	call	#_converttoint
13244     04 4E 05 F1 | 	add	fp, #4
13248     A7 FA 61 FC | 	wrlong	result1, fp
1324c     10 4E 05 F1 | 	add	fp, #16
13250     A7 16 02 FB | 	rdlong	arg03, fp
13254     14 4E 85 F1 | 	sub	fp, #20
13258     02 16 66 F0 | 	shl	arg03, #2
1325c     50 00 00 FF 
13260     E4 E4 05 F1 | 	add	objptr, ##41188
13264     F2 26 02 F6 | 	mov	local01, objptr
13268     F2 16 02 F1 | 	add	arg03, objptr
1326c     0B 01 68 FC | 	wrlong	#0, arg03
13270                 | ' t1=pop() : channel=converttoint(t1)
13270                 | ' getres(j)=0
13270                 | ' if pos>=0 then
13270     02 00 00 FF 
13274     80 E4 05 F1 | 	add	objptr, ##1152
13278     F2 28 02 FB | 	rdlong	local02, objptr
1327c     52 00 00 FF 
13280     64 E5 85 F1 | 	sub	objptr, ##42340
13284     00 28 56 F2 | 	cmps	local02, #0 wc
13288     F0 01 90 CD |  if_b	jmp	#LR__1541
1328c                 | '   for i=0 to  amount/1024
1328c     10 4E 05 F1 | 	add	fp, #16
13290     A7 00 68 FC | 	wrlong	#0, fp
13294     08 4E 85 F1 | 	sub	fp, #8
13298     A7 2A 02 FB | 	rdlong	local03, fp
1329c     08 4E 85 F1 | 	sub	fp, #8
132a0     15 2D 52 F6 | 	abs	local04, local03 wc
132a4     0A 2C 46 F0 | 	shr	local04, #10
132a8     16 2D 82 F6 | 	negc	local04, local04
132ac     01 2C 06 F1 | 	add	local04, #1
132b0                 | LR__1535
132b0     10 4E 05 F1 | 	add	fp, #16
132b4     A7 2A 02 FB | 	rdlong	local03, fp
132b8     10 4E 85 F1 | 	sub	fp, #16
132bc     16 2B 52 F2 | 	cmps	local03, local04 wc
132c0     9C 03 90 3D |  if_ae	jmp	#LR__1549
132c4                 | '     get #channel,pos+1,block(0),amount,r
132c4     04 4E 05 F1 | 	add	fp, #4
132c8     A7 12 02 FB | 	rdlong	arg01, fp
132cc     52 00 00 FF 
132d0     64 E5 05 F1 | 	add	objptr, ##42340
132d4     F2 14 02 FB | 	rdlong	arg02, objptr
132d8     01 14 06 F1 | 	add	arg02, #1
132dc     04 00 00 FF 
132e0     90 E4 85 F1 | 	sub	objptr, ##2192
132e4     F2 16 02 F6 | 	mov	arg03, objptr
132e8     4E 00 00 FF 
132ec     D4 E4 85 F1 | 	sub	objptr, ##40148
132f0     04 4E 05 F1 | 	add	fp, #4
132f4     A7 18 02 FB | 	rdlong	arg04, fp
132f8     08 4E 85 F1 | 	sub	fp, #8
132fc     01 1A 06 F6 | 	mov	arg05, #1
13300     84 5C B1 FD | 	call	#__system___basic_get
13304     18 4E 05 F1 | 	add	fp, #24
13308     A7 FA 61 FC | 	wrlong	result1, fp
1330c                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
1330c     0C 4E 85 F1 | 	sub	fp, #12
13310     A7 28 02 FB | 	rdlong	local02, fp
13314     0C 4E 85 F1 | 	sub	fp, #12
13318     00 04 00 FF 
1331c     00 28 56 F2 | 	cmps	local02, ##524288 wc
13320     7C 00 90 3D |  if_ae	jmp	#LR__1537
13324     14 4E 05 F1 | 	add	fp, #20
13328     A7 00 68 FC | 	wrlong	#0, fp
1332c     04 4E 05 F1 | 	add	fp, #4
13330     A7 2E 02 FB | 	rdlong	local05, fp
13334     18 4E 85 F1 | 	sub	fp, #24
13338                 | LR__1536
13338     14 4E 05 F1 | 	add	fp, #20
1333c     A7 28 02 FB | 	rdlong	local02, fp
13340     14 4E 85 F1 | 	sub	fp, #20
13344     17 29 52 F2 | 	cmps	local02, local05 wc
13348     D8 00 90 3D |  if_ae	jmp	#LR__1540
1334c     0C 4E 05 F1 | 	add	fp, #12
13350     A7 12 02 FB | 	rdlong	arg01, fp
13354     04 4E 05 F1 | 	add	fp, #4
13358     A7 2A 02 FB | 	rdlong	local03, fp
1335c     0A 2A 66 F0 | 	shl	local03, #10
13360     15 13 02 F1 | 	add	arg01, local03
13364     04 4E 05 F1 | 	add	fp, #4
13368     A7 2A 02 FB | 	rdlong	local03, fp
1336c     15 13 02 F1 | 	add	arg01, local03
13370     4E 00 00 FF 
13374     D4 E4 05 F1 | 	add	objptr, ##40148
13378     F2 2A 02 F1 | 	add	local03, objptr
1337c     15 15 C2 FA | 	rdbyte	arg02, local03
13380     09 15 42 FC | 	wrbyte	arg02, arg01
13384     4E 00 00 FF 
13388     D4 E4 85 F1 | 	sub	objptr, ##40148
1338c     A7 2A 02 FB | 	rdlong	local03, fp
13390     01 2A 06 F1 | 	add	local03, #1
13394     A7 2A 62 FC | 	wrlong	local03, fp
13398     14 4E 85 F1 | 	sub	fp, #20
1339c     98 FF 9F FD | 	jmp	#LR__1536
133a0                 | LR__1537
133a0     14 4E 05 F1 | 	add	fp, #20
133a4     A7 00 68 FC | 	wrlong	#0, fp
133a8     04 4E 05 F1 | 	add	fp, #4
133ac     A7 30 02 FB | 	rdlong	local06, fp
133b0     18 4E 85 F1 | 	sub	fp, #24
133b4                 | LR__1538
133b4     14 4E 05 F1 | 	add	fp, #20
133b8     A7 28 02 FB | 	rdlong	local02, fp
133bc     14 4E 85 F1 | 	sub	fp, #20
133c0     18 29 52 F2 | 	cmps	local02, local06 wc
133c4     5C 00 90 3D |  if_ae	jmp	#LR__1539
133c8     0C 4E 05 F1 | 	add	fp, #12
133cc     A7 12 02 FB | 	rdlong	arg01, fp
133d0     04 4E 05 F1 | 	add	fp, #4
133d4     A7 2E 02 FB | 	rdlong	local05, fp
133d8     0A 2E 66 F0 | 	shl	local05, #10
133dc     17 13 02 F1 | 	add	arg01, local05
133e0     04 4E 05 F1 | 	add	fp, #4
133e4     A7 2E 02 FB | 	rdlong	local05, fp
133e8     17 13 02 F1 | 	add	arg01, local05
133ec     14 4E 85 F1 | 	sub	fp, #20
133f0     4E 00 00 FF 
133f4     D4 E4 05 F1 | 	add	objptr, ##40148
133f8     F2 2E 02 F1 | 	add	local05, objptr
133fc     17 15 C2 FA | 	rdbyte	arg02, local05
13400     4E 00 00 FF 
13404     D4 E4 85 F1 | 	sub	objptr, ##40148
13408     E0 14 B1 FD | 	call	#_pspoke
1340c     14 4E 05 F1 | 	add	fp, #20
13410     A7 2E 02 FB | 	rdlong	local05, fp
13414     01 2E 06 F1 | 	add	local05, #1
13418     A7 2E 62 FC | 	wrlong	local05, fp
1341c     14 4E 85 F1 | 	sub	fp, #20
13420     90 FF 9F FD | 	jmp	#LR__1538
13424                 | LR__1539
13424                 | LR__1540
13424     14 4E 05 F1 | 	add	fp, #20
13428     A7 30 02 FB | 	rdlong	local06, fp
1342c     18 2B 02 F6 | 	mov	local03, local06
13430     02 2A 66 F0 | 	shl	local03, #2
13434     50 00 00 FF 
13438     E4 E4 05 F1 | 	add	objptr, ##41188
1343c     F2 2A 02 F1 | 	add	local03, objptr
13440     02 30 66 F0 | 	shl	local06, #2
13444     F2 30 02 F1 | 	add	local06, objptr
13448     18 31 02 FB | 	rdlong	local06, local06
1344c     04 4E 05 F1 | 	add	fp, #4
13450     A7 2E 02 FB | 	rdlong	local05, fp
13454     17 31 02 F1 | 	add	local06, local05
13458     15 31 62 FC | 	wrlong	local06, local03
1345c     08 4E 85 F1 | 	sub	fp, #8
13460     A7 30 02 FB | 	rdlong	local06, fp
13464     01 30 06 F1 | 	add	local06, #1
13468     A7 30 62 FC | 	wrlong	local06, fp
1346c     10 4E 85 F1 | 	sub	fp, #16
13470     50 00 00 FF 
13474     E4 E4 85 F1 | 	sub	objptr, ##41188
13478     34 FE 9F FD | 	jmp	#LR__1535
1347c                 | LR__1541
1347c                 | '   for i=0 to  amount/1024
1347c     10 4E 05 F1 | 	add	fp, #16
13480     A7 00 68 FC | 	wrlong	#0, fp
13484     08 4E 85 F1 | 	sub	fp, #8
13488     A7 2A 02 FB | 	rdlong	local03, fp
1348c     08 4E 85 F1 | 	sub	fp, #8
13490     15 33 52 F6 | 	abs	local07, local03 wc
13494     0A 32 46 F0 | 	shr	local07, #10
13498     19 33 82 F6 | 	negc	local07, local07
1349c     01 32 06 F1 | 	add	local07, #1
134a0                 | LR__1542
134a0     10 4E 05 F1 | 	add	fp, #16
134a4     A7 2A 02 FB | 	rdlong	local03, fp
134a8     10 4E 85 F1 | 	sub	fp, #16
134ac     19 2B 52 F2 | 	cmps	local03, local07 wc
134b0     AC 01 90 3D |  if_ae	jmp	#LR__1548
134b4                 | '     get #channel,,block(0),amount,r
134b4     04 4E 05 F1 | 	add	fp, #4
134b8     A7 12 02 FB | 	rdlong	arg01, fp
134bc     4E 00 00 FF 
134c0     D4 E4 05 F1 | 	add	objptr, ##40148
134c4     F2 16 02 F6 | 	mov	arg03, objptr
134c8     4E 00 00 FF 
134cc     D4 E4 85 F1 | 	sub	objptr, ##40148
134d0     04 4E 05 F1 | 	add	fp, #4
134d4     A7 18 02 FB | 	rdlong	arg04, fp
134d8     08 4E 85 F1 | 	sub	fp, #8
134dc     00 14 06 F6 | 	mov	arg02, #0
134e0     01 1A 06 F6 | 	mov	arg05, #1
134e4     A0 5A B1 FD | 	call	#__system___basic_get
134e8     18 4E 05 F1 | 	add	fp, #24
134ec     A7 FA 61 FC | 	wrlong	result1, fp
134f0                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
134f0     0C 4E 85 F1 | 	sub	fp, #12
134f4     A7 28 02 FB | 	rdlong	local02, fp
134f8     0C 4E 85 F1 | 	sub	fp, #12
134fc     00 04 00 FF 
13500     00 28 56 F2 | 	cmps	local02, ##524288 wc
13504     7C 00 90 3D |  if_ae	jmp	#LR__1544
13508     14 4E 05 F1 | 	add	fp, #20
1350c     A7 00 68 FC | 	wrlong	#0, fp
13510     04 4E 05 F1 | 	add	fp, #4
13514     A7 34 02 FB | 	rdlong	local08, fp
13518     18 4E 85 F1 | 	sub	fp, #24
1351c                 | LR__1543
1351c     14 4E 05 F1 | 	add	fp, #20
13520     A7 28 02 FB | 	rdlong	local02, fp
13524     14 4E 85 F1 | 	sub	fp, #20
13528     1A 29 52 F2 | 	cmps	local02, local08 wc
1352c     D8 00 90 3D |  if_ae	jmp	#LR__1547
13530     0C 4E 05 F1 | 	add	fp, #12
13534     A7 12 02 FB | 	rdlong	arg01, fp
13538     04 4E 05 F1 | 	add	fp, #4
1353c     A7 30 02 FB | 	rdlong	local06, fp
13540     0A 30 66 F0 | 	shl	local06, #10
13544     18 13 02 F1 | 	add	arg01, local06
13548     04 4E 05 F1 | 	add	fp, #4
1354c     A7 30 02 FB | 	rdlong	local06, fp
13550     18 13 02 F1 | 	add	arg01, local06
13554     4E 00 00 FF 
13558     D4 E4 05 F1 | 	add	objptr, ##40148
1355c     F2 30 02 F1 | 	add	local06, objptr
13560     18 15 C2 FA | 	rdbyte	arg02, local06
13564     09 15 42 FC | 	wrbyte	arg02, arg01
13568     4E 00 00 FF 
1356c     D4 E4 85 F1 | 	sub	objptr, ##40148
13570     A7 30 02 FB | 	rdlong	local06, fp
13574     01 30 06 F1 | 	add	local06, #1
13578     A7 30 62 FC | 	wrlong	local06, fp
1357c     14 4E 85 F1 | 	sub	fp, #20
13580     98 FF 9F FD | 	jmp	#LR__1543
13584                 | LR__1544
13584     14 4E 05 F1 | 	add	fp, #20
13588     A7 00 68 FC | 	wrlong	#0, fp
1358c     04 4E 05 F1 | 	add	fp, #4
13590     A7 36 02 FB | 	rdlong	local09, fp
13594     18 4E 85 F1 | 	sub	fp, #24
13598                 | LR__1545
13598     14 4E 05 F1 | 	add	fp, #20
1359c     A7 28 02 FB | 	rdlong	local02, fp
135a0     14 4E 85 F1 | 	sub	fp, #20
135a4     1B 29 52 F2 | 	cmps	local02, local09 wc
135a8     5C 00 90 3D |  if_ae	jmp	#LR__1546
135ac     0C 4E 05 F1 | 	add	fp, #12
135b0     A7 12 02 FB | 	rdlong	arg01, fp
135b4     04 4E 05 F1 | 	add	fp, #4
135b8     A7 34 02 FB | 	rdlong	local08, fp
135bc     0A 34 66 F0 | 	shl	local08, #10
135c0     1A 13 02 F1 | 	add	arg01, local08
135c4     04 4E 05 F1 | 	add	fp, #4
135c8     A7 34 02 FB | 	rdlong	local08, fp
135cc     1A 13 02 F1 | 	add	arg01, local08
135d0     14 4E 85 F1 | 	sub	fp, #20
135d4     4E 00 00 FF 
135d8     D4 E4 05 F1 | 	add	objptr, ##40148
135dc     F2 34 02 F1 | 	add	local08, objptr
135e0     1A 15 C2 FA | 	rdbyte	arg02, local08
135e4     4E 00 00 FF 
135e8     D4 E4 85 F1 | 	sub	objptr, ##40148
135ec     FC 12 B1 FD | 	call	#_pspoke
135f0     14 4E 05 F1 | 	add	fp, #20
135f4     A7 34 02 FB | 	rdlong	local08, fp
135f8     01 34 06 F1 | 	add	local08, #1
135fc     A7 34 62 FC | 	wrlong	local08, fp
13600     14 4E 85 F1 | 	sub	fp, #20
13604     90 FF 9F FD | 	jmp	#LR__1545
13608                 | LR__1546
13608                 | LR__1547
13608     14 4E 05 F1 | 	add	fp, #20
1360c     A7 36 02 FB | 	rdlong	local09, fp
13610     1B 31 02 F6 | 	mov	local06, local09
13614     02 30 66 F0 | 	shl	local06, #2
13618     50 00 00 FF 
1361c     E4 E4 05 F1 | 	add	objptr, ##41188
13620     F2 30 02 F1 | 	add	local06, objptr
13624     02 36 66 F0 | 	shl	local09, #2
13628     F2 36 02 F1 | 	add	local09, objptr
1362c     1B 37 02 FB | 	rdlong	local09, local09
13630     04 4E 05 F1 | 	add	fp, #4
13634     A7 34 02 FB | 	rdlong	local08, fp
13638     1A 37 02 F1 | 	add	local09, local08
1363c     18 37 62 FC | 	wrlong	local09, local06
13640     08 4E 85 F1 | 	sub	fp, #8
13644     A7 36 02 FB | 	rdlong	local09, fp
13648     01 36 06 F1 | 	add	local09, #1
1364c     A7 36 62 FC | 	wrlong	local09, fp
13650     10 4E 85 F1 | 	sub	fp, #16
13654     50 00 00 FF 
13658     E4 E4 85 F1 | 	sub	objptr, ##41188
1365c     40 FE 9F FD | 	jmp	#LR__1542
13660                 | LR__1548
13660                 | LR__1549
13660     A7 F0 03 F6 | 	mov	ptra, fp
13664     B2 00 A0 FD | 	call	#popregs_
13668                 | _do_get_ret
13668     2D 00 64 FD | 	ret
1366c                 | 
1366c                 | ' 
1366c                 | ' '-------------------- getcolor
1366c                 | ' 
1366c                 | ' sub do_getcolor
1366c                 | _do_getcolor
1366c     01 4A 05 F6 | 	mov	COUNT_, #1
13670     A8 00 A0 FD | 	call	#pushregs_
13674     10 F0 07 F1 | 	add	ptra, #16
13678     4A 00 00 FF 
1367c     A0 E4 05 F1 | 	add	objptr, ##38048
13680     F2 26 02 FB | 	rdlong	local01, objptr
13684     13 17 02 F6 | 	mov	arg03, local01
13688     01 16 66 F0 | 	shl	arg03, #1
1368c     13 17 02 F1 | 	add	arg03, local01
13690     02 16 66 F0 | 	shl	arg03, #2
13694     03 00 00 FF 
13698     04 E4 85 F1 | 	sub	objptr, ##1540
1369c     F2 16 02 F1 | 	add	arg03, objptr
136a0     0B 17 02 FB | 	rdlong	arg03, arg03
136a4     0C 4E 05 F1 | 	add	fp, #12
136a8     A7 16 62 FC | 	wrlong	arg03, fp
136ac                 | ' 
136ac                 | ' numpar=compiledline(lineptr_e).result.uresult
136ac                 | ' if numpar>1 orelse numpar=0 then print "getcolor "; : printerror(39) : return
136ac     0C 4E 85 F1 | 	sub	fp, #12
136b0     02 16 16 F2 | 	cmp	arg03, #2 wc
136b4     47 00 00 FF 
136b8     9C E4 85 F1 | 	sub	objptr, ##36508
136bc     0C 4E 05 C1 |  if_b	add	fp, #12
136c0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
136c4     0C 4E 85 C1 |  if_b	sub	fp, #12
136c8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1550
136cc     00 12 06 F6 | 	mov	arg01, #0
136d0     F0 A6 B1 FD | 	call	#__system___getiolock_0620
136d4     FD 12 02 F6 | 	mov	arg01, result1
136d8     38 4A B1 FD | 	call	#__system___lockmem
136dc     C3 01 00 FF 
136e0     A8 14 06 F6 | 	mov	arg02, ##@LR__6062
136e4     00 12 06 F6 | 	mov	arg01, #0
136e8     00 16 06 F6 | 	mov	arg03, #0
136ec     1C 57 B1 FD | 	call	#__system___basic_print_string
136f0     00 12 06 F6 | 	mov	arg01, #0
136f4     CC A6 B1 FD | 	call	#__system___getiolock_0620
136f8     FD 00 68 FC | 	wrlong	#0, result1
136fc     27 12 06 F6 | 	mov	arg01, #39
13700     00 14 06 F6 | 	mov	arg02, #0
13704     B4 0F B1 FD | 	call	#_printerror
13708     60 00 90 FD | 	jmp	#LR__1551
1370c                 | LR__1550
1370c     10 A1 BF FD | 	call	#_pop
13710     A7 FA 61 FC | 	wrlong	result1, fp
13714     04 4E 05 F1 | 	add	fp, #4
13718     A7 FC 61 FC | 	wrlong	result2, fp
1371c     04 4E 05 F1 | 	add	fp, #4
13720     A7 FE 61 FC | 	wrlong	result3, fp
13724     08 4E 85 F1 | 	sub	fp, #8
13728     A7 12 02 F6 | 	mov	arg01, fp
1372c     D4 A2 BF FD | 	call	#_converttoint
13730     FD 12 02 F6 | 	mov	arg01, result1
13734                 | ' 
13734                 | ' return long[palette_ptr+4*color]
13734     1C E4 05 F1 | 	add	objptr, #28
13738     F2 FA 01 FB | 	rdlong	result1, objptr
1373c     1C E4 85 F1 | 	sub	objptr, #28
13740     02 12 66 F0 | 	shl	arg01, #2
13744     09 FB 01 F1 | 	add	result1, arg01
13748     FD FA 01 FB | 	rdlong	result1, result1
1374c     08 FA C5 F0 | 	sar	result1, #8
13750     F8 FA 05 F4 | 	bitl	result1, #248
13754     A7 FA 61 FC | 	wrlong	result1, fp
13758     08 4E 05 F1 | 	add	fp, #8
1375c     A7 3A 68 FC | 	wrlong	#29, fp
13760     08 4E 85 F1 | 	sub	fp, #8
13764     A7 12 02 F6 | 	mov	arg01, fp
13768     4C A1 BF FD | 	call	#_push
1376c                 | LR__1551
1376c     A7 F0 03 F6 | 	mov	ptra, fp
13770     B2 00 A0 FD | 	call	#popregs_
13774                 | _do_getcolor_ret
13774     2D 00 64 FD | 	ret
13778                 | 
13778                 | ' 
13778                 | ' '-------------------- getenvsustain
13778                 | ' 
13778                 | ' sub do_getenvsustain
13778                 | _do_getenvsustain
13778     01 4A 05 F6 | 	mov	COUNT_, #1
1377c     A8 00 A0 FD | 	call	#pushregs_
13780     10 F0 07 F1 | 	add	ptra, #16
13784     4A 00 00 FF 
13788     A0 E4 05 F1 | 	add	objptr, ##38048
1378c     F2 26 02 FB | 	rdlong	local01, objptr
13790     13 17 02 F6 | 	mov	arg03, local01
13794     01 16 66 F0 | 	shl	arg03, #1
13798     13 17 02 F1 | 	add	arg03, local01
1379c     02 16 66 F0 | 	shl	arg03, #2
137a0     03 00 00 FF 
137a4     04 E4 85 F1 | 	sub	objptr, ##1540
137a8     F2 16 02 F1 | 	add	arg03, objptr
137ac     0B 17 02 FB | 	rdlong	arg03, arg03
137b0     0C 4E 05 F1 | 	add	fp, #12
137b4     A7 16 62 FC | 	wrlong	arg03, fp
137b8                 | ' 
137b8                 | ' numpar=compiledline(lineptr_e).result.uresult
137b8                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
137b8     0C 4E 85 F1 | 	sub	fp, #12
137bc     02 16 16 F2 | 	cmp	arg03, #2 wc
137c0     47 00 00 FF 
137c4     9C E4 85 F1 | 	sub	objptr, ##36508
137c8     0C 4E 05 C1 |  if_b	add	fp, #12
137cc     A7 26 0A CB |  if_b	rdlong	local01, fp wz
137d0     0C 4E 85 C1 |  if_b	sub	fp, #12
137d4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1560
137d8     00 12 06 F6 | 	mov	arg01, #0
137dc     E4 A5 B1 FD | 	call	#__system___getiolock_0620
137e0     FD 12 02 F6 | 	mov	arg01, result1
137e4     2C 49 B1 FD | 	call	#__system___lockmem
137e8     C3 01 00 FF 
137ec     B2 14 06 F6 | 	mov	arg02, ##@LR__6063
137f0     00 12 06 F6 | 	mov	arg01, #0
137f4     00 16 06 F6 | 	mov	arg03, #0
137f8     10 56 B1 FD | 	call	#__system___basic_print_string
137fc     00 12 06 F6 | 	mov	arg01, #0
13800     C0 A5 B1 FD | 	call	#__system___getiolock_0620
13804     FD 00 68 FC | 	wrlong	#0, result1
13808     27 12 06 F6 | 	mov	arg01, #39
1380c     00 14 06 F6 | 	mov	arg02, #0
13810     A8 0E B1 FD | 	call	#_printerror
13814     64 00 90 FD | 	jmp	#LR__1561
13818                 | LR__1560
13818     04 A0 BF FD | 	call	#_pop
1381c     FD 26 02 F6 | 	mov	local01, result1
13820     FE 16 02 F6 | 	mov	arg03, result2
13824     A7 26 62 FC | 	wrlong	local01, fp
13828     04 4E 05 F1 | 	add	fp, #4
1382c     A7 16 62 FC | 	wrlong	arg03, fp
13830     04 4E 05 F1 | 	add	fp, #4
13834     A7 FE 61 FC | 	wrlong	result3, fp
13838     08 4E 85 F1 | 	sub	fp, #8
1383c     A7 12 02 F6 | 	mov	arg01, fp
13840     C0 A1 BF FD | 	call	#_converttoint
13844     FD 26 02 F6 | 	mov	local01, result1
13848     01 26 66 F0 | 	shl	local01, #1
1384c     52 00 00 FF 
13850     0C E5 05 F1 | 	add	objptr, ##42252
13854     F2 26 02 F1 | 	add	local01, objptr
13858     13 27 E2 FA | 	rdword	local01, local01
1385c     A7 26 62 FC | 	wrlong	local01, fp
13860     08 4E 05 F1 | 	add	fp, #8
13864     A7 38 68 FC | 	wrlong	#28, fp
13868     08 4E 85 F1 | 	sub	fp, #8
1386c     A7 12 02 F6 | 	mov	arg01, fp
13870     52 00 00 FF 
13874     0C E5 85 F1 | 	sub	objptr, ##42252
13878     3C A0 BF FD | 	call	#_push
1387c                 | LR__1561
1387c     A7 F0 03 F6 | 	mov	ptra, fp
13880     B2 00 A0 FD | 	call	#popregs_
13884                 | _do_getenvsustain_ret
13884     2D 00 64 FD | 	ret
13888                 | 
13888                 | ' 
13888                 | ' '-------------------- getnotevalue
13888                 | ' 
13888                 | ' sub do_getnotevalue
13888                 | _do_getnotevalue
13888     01 4A 05 F6 | 	mov	COUNT_, #1
1388c     A8 00 A0 FD | 	call	#pushregs_
13890     1C F0 07 F1 | 	add	ptra, #28
13894     88 9F BF FD | 	call	#_pop
13898     FF 14 02 F6 | 	mov	arg02, result3
1389c     10 4E 05 F1 | 	add	fp, #16
138a0     A7 FA 61 FC | 	wrlong	result1, fp
138a4     04 4E 05 F1 | 	add	fp, #4
138a8     A7 FC 61 FC | 	wrlong	result2, fp
138ac     04 4E 05 F1 | 	add	fp, #4
138b0     A7 14 62 FC | 	wrlong	arg02, fp
138b4     08 4E 85 F1 | 	sub	fp, #8
138b8     A7 12 02 F6 | 	mov	arg01, fp
138bc     10 4E 85 F1 | 	sub	fp, #16
138c0     40 A1 BF FD | 	call	#_converttoint
138c4     FD 14 52 F6 | 	abs	arg02, result1 wc
138c8     0C 14 16 FD | 	qdiv	arg02, #12
138cc     0C 4E 05 F1 | 	add	fp, #12
138d0     A7 FA 61 FC | 	wrlong	result1, fp
138d4     14 00 00 FF 
138d8     D8 E4 05 F1 | 	add	objptr, ##10456
138dc     08 4E 85 F1 | 	sub	fp, #8
138e0     19 14 62 FD | 	getqy	arg02
138e4     0A 15 82 F6 | 	negc	arg02, arg02
138e8     02 14 66 F0 | 	shl	arg02, #2
138ec     F2 14 02 F1 | 	add	arg02, objptr
138f0     0A 15 02 FB | 	rdlong	arg02, arg02
138f4     A7 14 62 FC | 	wrlong	arg02, fp
138f8     08 4E 05 F1 | 	add	fp, #8
138fc     A7 14 02 FB | 	rdlong	arg02, fp
13900     0A 15 52 F6 | 	abs	arg02, arg02 wc
13904     0C 14 16 FD | 	qdiv	arg02, #12
13908     0C 4E 85 F1 | 	sub	fp, #12
1390c     14 00 00 FF 
13910     D8 E4 85 F1 | 	sub	objptr, ##10456
13914     18 14 62 FD | 	getqx	arg02
13918     0A 13 82 F6 | 	negc	arg01, arg02
1391c     09 13 52 F6 | 	abs	arg01, arg01 wc
13920     1F 26 C6 C9 |  if_b	decod	local01, #31
13924     00 26 06 36 |  if_ae	mov	local01, #0
13928     60 72 B1 FD | 	call	#__system___float_fromuns
1392c     13 FB 61 F5 | 	xor	result1, local01
13930     08 4E 05 F1 | 	add	fp, #8
13934     A7 FA 61 FC | 	wrlong	result1, fp
13938     FD 14 02 F6 | 	mov	arg02, result1
1393c     08 4E 85 F1 | 	sub	fp, #8
13940     1E 12 C6 F9 | 	decod	arg01, #30
13944     54 85 B1 FD | 	call	#__system____builtin_powf
13948     FD 12 02 F6 | 	mov	arg01, result1
1394c     04 4E 05 F1 | 	add	fp, #4
13950     A7 14 02 FB | 	rdlong	arg02, fp
13954     04 4E 85 F1 | 	sub	fp, #4
13958     34 76 B1 FD | 	call	#__system___float_mul
1395c     A7 FA 61 FC | 	wrlong	result1, fp
13960     10 4E 05 F1 | 	add	fp, #16
13964     A7 FA 61 FC | 	wrlong	result1, fp
13968     08 4E 05 F1 | 	add	fp, #8
1396c     A7 3C 68 FC | 	wrlong	#30, fp
13970     08 4E 85 F1 | 	sub	fp, #8
13974     A7 12 02 F6 | 	mov	arg01, fp
13978     10 4E 85 F1 | 	sub	fp, #16
1397c     38 9F BF FD | 	call	#_push
13980     A7 F0 03 F6 | 	mov	ptra, fp
13984     B2 00 A0 FD | 	call	#popregs_
13988                 | _do_getnotevalue_ret
13988     2D 00 64 FD | 	ret
1398c                 | 
1398c                 | ' 
1398c                 | ' '-------------------- getpixel
1398c                 | ' 
1398c                 | ' sub do_getpixel
1398c                 | _do_getpixel
1398c     00 4A 05 F6 | 	mov	COUNT_, #0
13990     A8 00 A0 FD | 	call	#pushregs_
13994     24 F0 07 F1 | 	add	ptra, #36
13998     4A 00 00 FF 
1399c     A0 E4 05 F1 | 	add	objptr, ##38048
139a0     F2 16 02 FB | 	rdlong	arg03, objptr
139a4     0B 15 02 F6 | 	mov	arg02, arg03
139a8     01 14 66 F0 | 	shl	arg02, #1
139ac     0B 15 02 F1 | 	add	arg02, arg03
139b0     02 14 66 F0 | 	shl	arg02, #2
139b4     03 00 00 FF 
139b8     04 E4 85 F1 | 	sub	objptr, ##1540
139bc     F2 14 02 F1 | 	add	arg02, objptr
139c0     0A 17 02 FB | 	rdlong	arg03, arg02
139c4     18 4E 05 F1 | 	add	fp, #24
139c8     A7 16 62 FC | 	wrlong	arg03, fp
139cc                 | ' 
139cc                 | ' numpar=compiledline(lineptr_e).result.uresult
139cc                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
139cc     18 4E 85 F1 | 	sub	fp, #24
139d0     02 16 0E F2 | 	cmp	arg03, #2 wz
139d4     47 00 00 FF 
139d8     9C E4 85 F1 | 	sub	objptr, ##36508
139dc     40 00 90 AD |  if_e	jmp	#LR__1570
139e0     00 12 06 F6 | 	mov	arg01, #0
139e4     DC A3 B1 FD | 	call	#__system___getiolock_0620
139e8     FD 12 02 F6 | 	mov	arg01, result1
139ec     24 47 B1 FD | 	call	#__system___lockmem
139f0     C3 01 00 FF 
139f4     C2 14 06 F6 | 	mov	arg02, ##@LR__6064
139f8     00 12 06 F6 | 	mov	arg01, #0
139fc     00 16 06 F6 | 	mov	arg03, #0
13a00     08 54 B1 FD | 	call	#__system___basic_print_string
13a04     00 12 06 F6 | 	mov	arg01, #0
13a08     B8 A3 B1 FD | 	call	#__system___getiolock_0620
13a0c     FD 00 68 FC | 	wrlong	#0, result1
13a10     27 12 06 F6 | 	mov	arg01, #39
13a14     00 14 06 F6 | 	mov	arg02, #0
13a18     A0 0C B1 FD | 	call	#_printerror
13a1c     B4 00 90 FD | 	jmp	#LR__1571
13a20                 | LR__1570
13a20     FC 9D BF FD | 	call	#_pop
13a24     FD 16 02 F6 | 	mov	arg03, result1
13a28     FE 14 02 F6 | 	mov	arg02, result2
13a2c     FF 12 02 F6 | 	mov	arg01, result3
13a30     0C 4E 05 F1 | 	add	fp, #12
13a34     A7 16 62 FC | 	wrlong	arg03, fp
13a38     04 4E 05 F1 | 	add	fp, #4
13a3c     A7 14 62 FC | 	wrlong	arg02, fp
13a40     04 4E 05 F1 | 	add	fp, #4
13a44     A7 12 62 FC | 	wrlong	arg01, fp
13a48     14 4E 85 F1 | 	sub	fp, #20
13a4c     D0 9D BF FD | 	call	#_pop
13a50     FF 16 02 F6 | 	mov	arg03, result3
13a54     A7 FA 61 FC | 	wrlong	result1, fp
13a58     04 4E 05 F1 | 	add	fp, #4
13a5c     A7 FC 61 FC | 	wrlong	result2, fp
13a60     04 4E 05 F1 | 	add	fp, #4
13a64     A7 16 62 FC | 	wrlong	arg03, fp
13a68     08 4E 85 F1 | 	sub	fp, #8
13a6c     A7 12 02 F6 | 	mov	arg01, fp
13a70     90 9F BF FD | 	call	#_converttoint
13a74     1C 4E 05 F1 | 	add	fp, #28
13a78     A7 FA 61 FC | 	wrlong	result1, fp
13a7c     10 4E 85 F1 | 	sub	fp, #16
13a80     A7 12 02 F6 | 	mov	arg01, fp
13a84     0C 4E 85 F1 | 	sub	fp, #12
13a88     78 9F BF FD | 	call	#_converttoint
13a8c     FD 16 02 F6 | 	mov	arg03, result1
13a90     20 4E 05 F1 | 	add	fp, #32
13a94     A7 16 62 FC | 	wrlong	arg03, fp
13a98     F2 12 02 FB | 	rdlong	arg01, objptr
13a9c     04 4E 85 F1 | 	sub	fp, #4
13aa0     A7 FE 01 FB | 	rdlong	result3, fp
13aa4     FF 12 02 F1 | 	add	arg01, result3
13aa8     1C 4E 85 F1 | 	sub	fp, #28
13aac     0A 16 66 F0 | 	shl	arg03, #10
13ab0     0B 13 02 F1 | 	add	arg01, arg03
13ab4     7C 0E B1 FD | 	call	#_pspeek
13ab8     FD FA E1 F8 | 	getbyte	result1, result1, #0
13abc     A7 FA 61 FC | 	wrlong	result1, fp
13ac0     08 4E 05 F1 | 	add	fp, #8
13ac4     A7 3A 68 FC | 	wrlong	#29, fp
13ac8     08 4E 85 F1 | 	sub	fp, #8
13acc     A7 12 02 F6 | 	mov	arg01, fp
13ad0     E4 9D BF FD | 	call	#_push
13ad4                 | LR__1571
13ad4     A7 F0 03 F6 | 	mov	ptra, fp
13ad8     B2 00 A0 FD | 	call	#popregs_
13adc                 | _do_getpixel_ret
13adc     2D 00 64 FD | 	ret
13ae0                 | 
13ae0                 | ' 
13ae0                 | ' '-------------------- gettime
13ae0                 | ' 
13ae0                 | ' sub do_gettime
13ae0                 | _do_gettime
13ae0     02 4A 05 F6 | 	mov	COUNT_, #2
13ae4     A8 00 A0 FD | 	call	#pushregs_
13ae8     14 F0 07 F1 | 	add	ptra, #20
13aec                 | ' 
13aec                 | ' const asm 
13aec     1A 26 72 FD | 	getct	local01 wc
13af0     1A 28 62 FD | 	getct	local02
13af4                 | ' return hi1, lo1
13af4     14 FD 01 F6 | 	mov	result2, local02
13af8     A7 26 62 FC | 	wrlong	local01, fp
13afc     04 4E 05 F1 | 	add	fp, #4
13b00     A7 FC 61 FC | 	wrlong	result2, fp
13b04     0C 4E 05 F1 | 	add	fp, #12
13b08     A7 3A 68 FC | 	wrlong	#29, fp
13b0c     0C 4E 85 F1 | 	sub	fp, #12
13b10     A7 12 02 FB | 	rdlong	arg01, fp
13b14     04 4E 05 F1 | 	add	fp, #4
13b18     A7 12 62 FC | 	wrlong	arg01, fp
13b1c     08 4E 85 F1 | 	sub	fp, #8
13b20     A7 12 02 FB | 	rdlong	arg01, fp
13b24     0C 4E 05 F1 | 	add	fp, #12
13b28     A7 12 62 FC | 	wrlong	arg01, fp
13b2c     04 4E 85 F1 | 	sub	fp, #4
13b30     A7 12 02 F6 | 	mov	arg01, fp
13b34     08 4E 85 F1 | 	sub	fp, #8
13b38     7C 9D BF FD | 	call	#_push
13b3c     A7 F0 03 F6 | 	mov	ptra, fp
13b40     B2 00 A0 FD | 	call	#popregs_
13b44                 | _do_gettime_ret
13b44     2D 00 64 FD | 	ret
13b48                 | 
13b48                 | ' 
13b48                 | ' '-------------------- gosub
13b48                 | ' 
13b48                 | ' sub do_gosub()
13b48                 | _do_gosub
13b48     50 00 00 FF 
13b4c     54 E5 05 F1 | 	add	objptr, ##41300
13b50     F2 00 02 FB | 	rdlong	_var01, objptr
13b54     01 00 06 F1 | 	add	_var01, #1
13b58     F2 00 62 FC | 	wrlong	_var01, objptr
13b5c                 | ' gosubtop+=1
13b5c                 | ' if compiledline(lineptr_e+1).result_type=token_end then
13b5c     06 00 00 FF 
13b60     B4 E4 85 F1 | 	sub	objptr, ##3252
13b64     F2 00 02 FB | 	rdlong	_var01, objptr
13b68     01 00 06 F1 | 	add	_var01, #1
13b6c     00 03 02 F6 | 	mov	_var02, _var01
13b70     01 02 66 F0 | 	shl	_var02, #1
13b74     00 03 02 F1 | 	add	_var02, _var01
13b78     02 02 66 F0 | 	shl	_var02, #2
13b7c     03 00 00 FF 
13b80     04 E4 85 F1 | 	sub	objptr, ##1540
13b84     F2 02 02 F1 | 	add	_var02, objptr
13b88     08 02 06 F1 | 	add	_var02, #8
13b8c     01 03 02 FB | 	rdlong	_var02, _var02
13b90     FE 03 0E F2 | 	cmp	_var02, #510 wz
13b94     47 00 00 FF 
13b98     9C E4 85 F1 | 	sub	objptr, ##36508
13b9c     58 00 90 5D |  if_ne	jmp	#LR__1580
13ba0     50 00 00 FF 
13ba4     54 E5 05 F1 | 	add	objptr, ##41300
13ba8     F2 02 02 FB | 	rdlong	_var02, objptr
13bac     03 02 66 F0 | 	shl	_var02, #3
13bb0     03 00 00 FF 
13bb4     88 E5 85 F1 | 	sub	objptr, ##1928
13bb8     F2 02 02 F1 | 	add	_var02, objptr
13bbc     03 00 00 FF 
13bc0     0C E5 05 F1 | 	add	objptr, ##1804
13bc4     F2 00 02 FB | 	rdlong	_var01, objptr
13bc8     01 01 62 FC | 	wrlong	_var01, _var02
13bcc     7C E4 05 F1 | 	add	objptr, #124
13bd0     F2 02 02 FB | 	rdlong	_var02, objptr
13bd4     03 02 66 F0 | 	shl	_var02, #3
13bd8     03 00 00 FF 
13bdc     88 E5 85 F1 | 	sub	objptr, ##1928
13be0     F2 02 02 F1 | 	add	_var02, objptr
13be4     04 02 06 F1 | 	add	_var02, #4
13be8     01 01 68 FC | 	wrlong	#0, _var02
13bec     4C 00 00 FF 
13bf0     CC E5 85 F1 | 	sub	objptr, ##39372
13bf4     64 00 90 FD | 	jmp	#LR__1581
13bf8                 | LR__1580
13bf8     50 00 00 FF 
13bfc     54 E5 05 F1 | 	add	objptr, ##41300
13c00     F2 02 02 FB | 	rdlong	_var02, objptr
13c04     03 02 66 F0 | 	shl	_var02, #3
13c08     03 00 00 FF 
13c0c     88 E5 85 F1 | 	sub	objptr, ##1928
13c10     F2 02 02 F1 | 	add	_var02, objptr
13c14     03 00 00 FF 
13c18     14 E5 05 F1 | 	add	objptr, ##1812
13c1c     F2 00 02 FB | 	rdlong	_var01, objptr
13c20     01 01 62 FC | 	wrlong	_var01, _var02
13c24     74 E4 05 F1 | 	add	objptr, #116
13c28     F2 02 02 FB | 	rdlong	_var02, objptr
13c2c     03 02 66 F0 | 	shl	_var02, #3
13c30     03 00 00 FF 
13c34     88 E5 85 F1 | 	sub	objptr, ##1928
13c38     F2 02 02 F1 | 	add	_var02, objptr
13c3c     02 00 00 FF 
13c40     2C E5 85 F1 | 	sub	objptr, ##1324
13c44     F2 00 02 FB | 	rdlong	_var01, objptr
13c48     4A 00 00 FF 
13c4c     A0 E4 85 F1 | 	sub	objptr, ##38048
13c50     02 00 06 F1 | 	add	_var01, #2
13c54     04 02 06 F1 | 	add	_var02, #4
13c58     01 01 62 FC | 	wrlong	_var01, _var02
13c5c                 | LR__1581
13c5c                 | _do_gosub_ret
13c5c     2D 00 64 FD | 	ret
13c60                 | 
13c60                 | ' 
13c60                 | ' '--------------------- goto
13c60                 | ' 
13c60                 | ' '------- fast goto
13c60                 | ' 
13c60                 | ' sub do_fast_goto
13c60                 | _do_fast_goto
13c60     02 4A 05 F6 | 	mov	COUNT_, #2
13c64     A8 00 A0 FD | 	call	#pushregs_
13c68                 | _do_fast_goto_enter
13c68     4A 00 00 FF 
13c6c     A0 E4 05 F1 | 	add	objptr, ##38048
13c70     F2 12 02 FB | 	rdlong	arg01, objptr
13c74     09 27 02 F6 | 	mov	local01, arg01
13c78     01 26 66 F0 | 	shl	local01, #1
13c7c     09 27 02 F1 | 	add	local01, arg01
13c80     02 26 66 F0 | 	shl	local01, #2
13c84     03 00 00 FF 
13c88     04 E4 85 F1 | 	sub	objptr, ##1540
13c8c     F2 26 02 F1 | 	add	local01, objptr
13c90     13 29 02 FB | 	rdlong	local02, local01
13c94     14 13 02 F6 | 	mov	arg01, local02
13c98     47 00 00 FF 
13c9c     9C E4 85 F1 | 	sub	objptr, ##36508
13ca0     E8 0C B1 FD | 	call	#_pslpeek
13ca4     FD 12 02 F6 | 	mov	arg01, result1
13ca8                 | ' 
13ca8                 | ' testptr=compiledline(lineptr_e).result.uresult
13ca8                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
13ca8                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
13ca8     4A 00 00 FF 
13cac     A0 E4 05 F1 | 	add	objptr, ##38048
13cb0     F2 FA 01 FB | 	rdlong	result1, objptr
13cb4     FD 26 02 F6 | 	mov	local01, result1
13cb8     01 26 66 F0 | 	shl	local01, #1
13cbc     FD 26 02 F1 | 	add	local01, result1
13cc0     02 26 66 F0 | 	shl	local01, #2
13cc4     03 00 00 FF 
13cc8     04 E4 85 F1 | 	sub	objptr, ##1540
13ccc     F2 26 02 F1 | 	add	local01, objptr
13cd0     04 26 06 F1 | 	add	local01, #4
13cd4     13 27 02 FB | 	rdlong	local01, local01
13cd8     13 13 0A F2 | 	cmp	arg01, local01 wz
13cdc     47 00 00 FF 
13ce0     9C E4 85 F1 | 	sub	objptr, ##36508
13ce4     58 00 90 5D |  if_ne	jmp	#LR__1590
13ce8     50 00 00 FF 
13cec     D8 E4 05 F1 | 	add	objptr, ##41176
13cf0     F2 28 62 FC | 	wrlong	local02, objptr
13cf4     06 00 00 FF 
13cf8     3C E4 85 F1 | 	sub	objptr, ##3132
13cfc     F2 28 02 FB | 	rdlong	local02, objptr
13d00     01 28 86 F1 | 	sub	local02, #1
13d04     04 E4 05 F1 | 	add	objptr, #4
13d08     F2 28 62 FC | 	wrlong	local02, objptr
13d0c                 | '   runptr=testptr
13d0c                 | '   lineptr_e=lineptr-1
13d0c                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
13d0c     06 00 00 FF 
13d10     84 E4 05 F1 | 	add	objptr, ##3204
13d14     F2 28 02 FB | 	rdlong	local02, objptr
13d18     50 00 00 FF 
13d1c     24 E5 85 F1 | 	sub	objptr, ##41252
13d20     FF FF 3F FF 
13d24     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
13d28     50 00 00 AF 
13d2c     24 E5 05 A1 |  if_e	add	objptr, ##41252
13d30     F2 00 68 AC |  if_e	wrlong	#0, objptr
13d34     50 00 00 AF 
13d38     24 E5 85 A1 |  if_e	sub	objptr, ##41252
13d3c     04 00 90 FD | 	jmp	#LR__1591
13d40                 | LR__1590
13d40     0C 00 B0 FD | 	call	#_do_find_goto
13d44                 | LR__1591
13d44     A7 F0 03 F6 | 	mov	ptra, fp
13d48     B2 00 A0 FD | 	call	#popregs_
13d4c                 | _do_fast_goto_ret
13d4c     2D 00 64 FD | 	ret
13d50                 | 
13d50                 | ' 
13d50                 | ' '------- find goto  
13d50                 | ' 
13d50                 | ' sub do_find_goto
13d50                 | _do_find_goto
13d50     03 4A 05 F6 | 	mov	COUNT_, #3
13d54     A8 00 A0 FD | 	call	#pushregs_
13d58     24 F0 07 F1 | 	add	ptra, #36
13d5c                 | _do_find_goto_enter
13d5c     4A 00 00 FF 
13d60     A0 E4 05 F1 | 	add	objptr, ##38048
13d64     F2 26 02 FB | 	rdlong	local01, objptr
13d68     13 29 02 F6 | 	mov	local02, local01
13d6c     01 28 66 F0 | 	shl	local02, #1
13d70     13 29 02 F1 | 	add	local02, local01
13d74     02 28 66 F0 | 	shl	local02, #2
13d78     03 00 00 FF 
13d7c     04 E4 85 F1 | 	sub	objptr, ##1540
13d80     F2 28 02 F1 | 	add	local02, objptr
13d84     04 28 06 F1 | 	add	local02, #4
13d88     14 29 02 FB | 	rdlong	local02, local02
13d8c     A7 28 62 FC | 	wrlong	local02, fp
13d90     03 00 00 FF 
13d94     0C E4 05 F1 | 	add	objptr, ##1548
13d98     F2 2A 02 FB | 	rdlong	local03, objptr
13d9c     4A 00 00 FF 
13da0     A8 E4 85 F1 | 	sub	objptr, ##38056
13da4     04 4E 05 F1 | 	add	fp, #4
13da8     A7 2A 62 FC | 	wrlong	local03, fp
13dac     04 4E 85 F1 | 	sub	fp, #4
13db0                 | ' 
13db0                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
13db0                 | ' gotoptr=programstart
13db0                 | ' do
13db0                 | LR__1600
13db0     0C 4E 05 F1 | 	add	fp, #12
13db4     A7 12 02 F6 | 	mov	arg01, fp
13db8     08 4E 85 F1 | 	sub	fp, #8
13dbc     A7 14 02 FB | 	rdlong	arg02, fp
13dc0     04 4E 85 F1 | 	sub	fp, #4
13dc4     18 16 06 F6 | 	mov	arg03, #24
13dc8     0B 00 00 FF 
13dcc     CC E4 05 F1 | 	add	objptr, ##5836
13dd0     9C 36 B1 FD | 	call	#_psram_spin2_read1
13dd4     0B 00 00 FF 
13dd8     CC E4 85 F1 | 	sub	objptr, ##5836
13ddc                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
13ddc                 | '   if gotoheader(0)<>$FFFFFFFF then
13ddc     0C 4E 05 F1 | 	add	fp, #12
13de0     A7 2A 02 FB | 	rdlong	local03, fp
13de4     0C 4E 85 F1 | 	sub	fp, #12
13de8     FF FF 7F FF 
13dec     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
13df0     24 00 90 AD |  if_e	jmp	#LR__1601
13df4     04 4E 05 F1 | 	add	fp, #4
13df8     A7 2A 02 FB | 	rdlong	local03, fp
13dfc     04 4E 05 F1 | 	add	fp, #4
13e00     A7 2A 62 FC | 	wrlong	local03, fp
13e04     18 4E 05 F1 | 	add	fp, #24
13e08     A7 2A 02 FB | 	rdlong	local03, fp
13e0c     1C 4E 85 F1 | 	sub	fp, #28
13e10     A7 2A 62 FC | 	wrlong	local03, fp
13e14     04 4E 85 F1 | 	sub	fp, #4
13e18                 | LR__1601
13e18     20 4E 05 F1 | 	add	fp, #32
13e1c     A7 2A 02 FB | 	rdlong	local03, fp
13e20     20 4E 85 F1 | 	sub	fp, #32
13e24     FF FF 3F FF 
13e28     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
13e2c     0C 4E 05 51 |  if_ne	add	fp, #12
13e30     A7 26 02 5B |  if_ne	rdlong	local01, fp
13e34     0C 4E 85 51 |  if_ne	sub	fp, #12
13e38     FF FF 7F 5F 
13e3c     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
13e40     18 00 90 AD |  if_e	jmp	#LR__1602
13e44     0C 4E 05 F1 | 	add	fp, #12
13e48     A7 2A 02 FB | 	rdlong	local03, fp
13e4c     0C 4E 85 F1 | 	sub	fp, #12
13e50     A7 28 02 FB | 	rdlong	local02, fp
13e54     14 2B 0A F2 | 	cmp	local03, local02 wz
13e58     54 FF 9F 5D |  if_ne	jmp	#LR__1600
13e5c                 | LR__1602
13e5c                 | ' 
13e5c                 | ' if gotoheader(0)=gotoline then
13e5c     0C 4E 05 F1 | 	add	fp, #12
13e60     A7 2A 02 FB | 	rdlong	local03, fp
13e64     0C 4E 85 F1 | 	sub	fp, #12
13e68     A7 26 02 FB | 	rdlong	local01, fp
13e6c     13 2B 0A F2 | 	cmp	local03, local01 wz
13e70     D8 00 90 5D |  if_ne	jmp	#LR__1603
13e74     4A 00 00 FF 
13e78     A0 E4 05 F1 | 	add	objptr, ##38048
13e7c     F2 26 02 FB | 	rdlong	local01, objptr
13e80     13 29 02 F6 | 	mov	local02, local01
13e84     01 28 66 F0 | 	shl	local02, #1
13e88     13 29 02 F1 | 	add	local02, local01
13e8c     02 28 66 F0 | 	shl	local02, #2
13e90     03 00 00 FF 
13e94     04 E4 85 F1 | 	sub	objptr, ##1540
13e98     F2 28 02 F1 | 	add	local02, objptr
13e9c     08 4E 05 F1 | 	add	fp, #8
13ea0     A7 2A 02 FB | 	rdlong	local03, fp
13ea4     14 2B 62 FC | 	wrlong	local03, local02
13ea8     03 00 00 FF 
13eac     04 E4 05 F1 | 	add	objptr, ##1540
13eb0     F2 26 02 FB | 	rdlong	local01, objptr
13eb4     13 29 02 F6 | 	mov	local02, local01
13eb8     01 28 66 F0 | 	shl	local02, #1
13ebc     13 29 02 F1 | 	add	local02, local01
13ec0     02 28 66 F0 | 	shl	local02, #2
13ec4     03 00 00 FF 
13ec8     04 E4 85 F1 | 	sub	objptr, ##1540
13ecc     F2 28 02 F1 | 	add	local02, objptr
13ed0     08 28 06 F1 | 	add	local02, #8
13ed4     14 9D 68 FC | 	wrlong	#78, local02
13ed8     03 00 00 FF 
13edc     04 E4 05 F1 | 	add	objptr, ##1540
13ee0     F2 28 02 FB | 	rdlong	local02, objptr
13ee4     14 13 02 F6 | 	mov	arg01, local02
13ee8     01 12 66 F0 | 	shl	arg01, #1
13eec     14 13 02 F1 | 	add	arg01, local02
13ef0     02 12 66 F0 | 	shl	arg01, #2
13ef4     03 00 00 FF 
13ef8     04 E4 85 F1 | 	sub	objptr, ##1540
13efc     F2 12 02 F1 | 	add	arg01, objptr
13f00     09 00 00 FF 
13f04     44 E4 05 F1 | 	add	objptr, ##4676
13f08     F2 14 02 FB | 	rdlong	arg02, objptr
13f0c     02 2A 06 F6 | 	mov	local03, #2
13f10     14 2B 02 F1 | 	add	local03, local02
13f14     0B 00 00 FF 
13f18     5C E4 85 F1 | 	sub	objptr, ##5724
13f1c     F2 16 02 FB | 	rdlong	arg03, objptr
13f20     0B 2B 02 FD | 	qmul	local03, arg03
13f24     08 4E 85 F1 | 	sub	fp, #8
13f28     39 00 00 FF 
13f2c     B8 E5 85 F1 | 	sub	objptr, ##29624
13f30     18 2A 62 FD | 	getqx	local03
13f34     15 15 02 F1 | 	add	arg02, local03
13f38     D0 35 B1 FD | 	call	#_psram_spin2_write
13f3c     0B 00 00 FF 
13f40     CC E4 85 F1 | 	sub	objptr, ##5836
13f44     18 FD BF FD | 	call	#_do_fast_goto
13f48     0C 00 90 FD | 	jmp	#LR__1604
13f4c                 | LR__1603
13f4c     26 12 06 F6 | 	mov	arg01, #38
13f50     00 14 06 F6 | 	mov	arg02, #0
13f54     64 07 B1 FD | 	call	#_printerror
13f58                 | LR__1604
13f58     A7 F0 03 F6 | 	mov	ptra, fp
13f5c     B2 00 A0 FD | 	call	#popregs_
13f60                 | _do_find_goto_ret
13f60     2D 00 64 FD | 	ret
13f64                 | 
13f64                 | ' 
13f64                 | ' '------- slow goto  
13f64                 | ' 
13f64                 | ' sub do_slow_goto
13f64                 | _do_slow_goto
13f64     02 4A 05 F6 | 	mov	COUNT_, #2
13f68     A8 00 A0 FD | 	call	#pushregs_
13f6c     30 F0 07 F1 | 	add	ptra, #48
13f70     AC 98 BF FD | 	call	#_pop
13f74     FF 26 02 F6 | 	mov	local01, result3
13f78     24 4E 05 F1 | 	add	fp, #36
13f7c     A7 FA 61 FC | 	wrlong	result1, fp
13f80     04 4E 05 F1 | 	add	fp, #4
13f84     A7 FC 61 FC | 	wrlong	result2, fp
13f88     04 4E 05 F1 | 	add	fp, #4
13f8c     A7 26 62 FC | 	wrlong	local01, fp
13f90     08 4E 85 F1 | 	sub	fp, #8
13f94     A7 12 02 F6 | 	mov	arg01, fp
13f98     24 4E 85 F1 | 	sub	fp, #36
13f9c     64 9A BF FD | 	call	#_converttoint
13fa0     A7 FA 61 FC | 	wrlong	result1, fp
13fa4     4A 00 00 FF 
13fa8     A8 E4 05 F1 | 	add	objptr, ##38056
13fac     F2 28 02 FB | 	rdlong	local02, objptr
13fb0     4A 00 00 FF 
13fb4     A8 E4 85 F1 | 	sub	objptr, ##38056
13fb8     04 4E 05 F1 | 	add	fp, #4
13fbc     A7 28 62 FC | 	wrlong	local02, fp
13fc0     04 4E 85 F1 | 	sub	fp, #4
13fc4                 | ' 
13fc4                 | ' t1=pop() : gotoline=converttoint(t1)
13fc4                 | ' gotoptr=programstart
13fc4                 | ' do
13fc4                 | LR__1610
13fc4     0C 4E 05 F1 | 	add	fp, #12
13fc8     A7 12 02 F6 | 	mov	arg01, fp
13fcc     08 4E 85 F1 | 	sub	fp, #8
13fd0     A7 14 02 FB | 	rdlong	arg02, fp
13fd4     04 4E 85 F1 | 	sub	fp, #4
13fd8     18 16 06 F6 | 	mov	arg03, #24
13fdc     0B 00 00 FF 
13fe0     CC E4 05 F1 | 	add	objptr, ##5836
13fe4     88 34 B1 FD | 	call	#_psram_spin2_read1
13fe8     0B 00 00 FF 
13fec     CC E4 85 F1 | 	sub	objptr, ##5836
13ff0                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
13ff0                 | '   if gotoheader(0)<>$FFFFFFFF then
13ff0     0C 4E 05 F1 | 	add	fp, #12
13ff4     A7 28 02 FB | 	rdlong	local02, fp
13ff8     0C 4E 85 F1 | 	sub	fp, #12
13ffc     FF FF 7F FF 
14000     FF 29 0E F2 | 	cmp	local02, ##-1 wz
14004     24 00 90 AD |  if_e	jmp	#LR__1611
14008     04 4E 05 F1 | 	add	fp, #4
1400c     A7 28 02 FB | 	rdlong	local02, fp
14010     04 4E 05 F1 | 	add	fp, #4
14014     A7 28 62 FC | 	wrlong	local02, fp
14018     18 4E 05 F1 | 	add	fp, #24
1401c     A7 28 02 FB | 	rdlong	local02, fp
14020     1C 4E 85 F1 | 	sub	fp, #28
14024     A7 28 62 FC | 	wrlong	local02, fp
14028     04 4E 85 F1 | 	sub	fp, #4
1402c                 | LR__1611
1402c     20 4E 05 F1 | 	add	fp, #32
14030     A7 28 02 FB | 	rdlong	local02, fp
14034     20 4E 85 F1 | 	sub	fp, #32
14038     FF FF 3F FF 
1403c     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
14040     0C 4E 05 51 |  if_ne	add	fp, #12
14044     A7 26 02 5B |  if_ne	rdlong	local01, fp
14048     0C 4E 85 51 |  if_ne	sub	fp, #12
1404c     FF FF 7F 5F 
14050     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
14054     18 00 90 AD |  if_e	jmp	#LR__1612
14058     0C 4E 05 F1 | 	add	fp, #12
1405c     A7 28 02 FB | 	rdlong	local02, fp
14060     0C 4E 85 F1 | 	sub	fp, #12
14064     A7 16 02 FB | 	rdlong	arg03, fp
14068     0B 29 0A F2 | 	cmp	local02, arg03 wz
1406c     54 FF 9F 5D |  if_ne	jmp	#LR__1610
14070                 | LR__1612
14070                 | ' if gotoheader(0)=gotoline then  
14070     0C 4E 05 F1 | 	add	fp, #12
14074     A7 28 02 FB | 	rdlong	local02, fp
14078     0C 4E 85 F1 | 	sub	fp, #12
1407c     A7 26 02 FB | 	rdlong	local01, fp
14080     13 29 0A F2 | 	cmp	local02, local01 wz
14084     60 00 90 5D |  if_ne	jmp	#LR__1613
14088     08 4E 05 F1 | 	add	fp, #8
1408c     A7 28 02 FB | 	rdlong	local02, fp
14090     08 4E 85 F1 | 	sub	fp, #8
14094     50 00 00 FF 
14098     D8 E4 05 F1 | 	add	objptr, ##41176
1409c     F2 28 62 FC | 	wrlong	local02, objptr
140a0     06 00 00 FF 
140a4     3C E4 85 F1 | 	sub	objptr, ##3132
140a8     F2 28 02 FB | 	rdlong	local02, objptr
140ac     01 28 86 F1 | 	sub	local02, #1
140b0     04 E4 05 F1 | 	add	objptr, #4
140b4     F2 28 62 FC | 	wrlong	local02, objptr
140b8                 | '    runptr=oldgotoptr
140b8                 | '    lineptr_e=lineptr-1
140b8                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
140b8     06 00 00 FF 
140bc     84 E4 05 F1 | 	add	objptr, ##3204
140c0     F2 28 02 FB | 	rdlong	local02, objptr
140c4     50 00 00 FF 
140c8     24 E5 85 F1 | 	sub	objptr, ##41252
140cc     FF FF 3F FF 
140d0     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
140d4     50 00 00 AF 
140d8     24 E5 05 A1 |  if_e	add	objptr, ##41252
140dc     F2 00 68 AC |  if_e	wrlong	#0, objptr
140e0     50 00 00 AF 
140e4     24 E5 85 A1 |  if_e	sub	objptr, ##41252
140e8                 | LR__1613
140e8     A7 F0 03 F6 | 	mov	ptra, fp
140ec     B2 00 A0 FD | 	call	#popregs_
140f0                 | _do_slow_goto_ret
140f0     2D 00 64 FD | 	ret
140f4                 | 
140f4                 | ' 
140f4                 | ' ' ----------------  hex$
140f4                 | ' 
140f4                 | ' sub do_hex
140f4                 | _do_hex
140f4     01 4A 05 F6 | 	mov	COUNT_, #1
140f8     A8 00 A0 FD | 	call	#pushregs_
140fc     18 F0 07 F1 | 	add	ptra, #24
14100     4A 00 00 FF 
14104     A0 E4 05 F1 | 	add	objptr, ##38048
14108     F2 26 02 FB | 	rdlong	local01, objptr
1410c     13 17 02 F6 | 	mov	arg03, local01
14110     01 16 66 F0 | 	shl	arg03, #1
14114     13 17 02 F1 | 	add	arg03, local01
14118     02 16 66 F0 | 	shl	arg03, #2
1411c     03 00 00 FF 
14120     04 E4 85 F1 | 	sub	objptr, ##1540
14124     F2 16 02 F1 | 	add	arg03, objptr
14128     0B 17 02 FB | 	rdlong	arg03, arg03
1412c     0C 4E 05 F1 | 	add	fp, #12
14130     A7 16 62 FC | 	wrlong	arg03, fp
14134                 | ' 
14134                 | ' numpar=compiledline(lineptr_e).result.uresult
14134                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
14134     0C 4E 85 F1 | 	sub	fp, #12
14138     03 16 16 F2 | 	cmp	arg03, #3 wc
1413c     47 00 00 FF 
14140     9C E4 85 F1 | 	sub	objptr, ##36508
14144     0C 4E 05 C1 |  if_b	add	fp, #12
14148     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1414c     0C 4E 85 C1 |  if_b	sub	fp, #12
14150     40 00 90 4D |  if_c_and_nz	jmp	#LR__1620
14154     00 12 06 F6 | 	mov	arg01, #0
14158     68 9C B1 FD | 	call	#__system___getiolock_0620
1415c     FD 12 02 F6 | 	mov	arg01, result1
14160     B0 3F B1 FD | 	call	#__system___lockmem
14164     C3 01 00 FF 
14168     CD 14 06 F6 | 	mov	arg02, ##@LR__6065
1416c     00 12 06 F6 | 	mov	arg01, #0
14170     00 16 06 F6 | 	mov	arg03, #0
14174     94 4C B1 FD | 	call	#__system___basic_print_string
14178     00 12 06 F6 | 	mov	arg01, #0
1417c     44 9C B1 FD | 	call	#__system___getiolock_0620
14180     FD 00 68 FC | 	wrlong	#0, result1
14184     27 12 06 F6 | 	mov	arg01, #39
14188     00 14 06 F6 | 	mov	arg02, #0
1418c     2C 05 B1 FD | 	call	#_printerror
14190     B8 00 90 FD | 	jmp	#LR__1623
14194                 | LR__1620
14194                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
14194     0C 4E 05 F1 | 	add	fp, #12
14198     A7 26 02 FB | 	rdlong	local01, fp
1419c     0C 4E 85 F1 | 	sub	fp, #12
141a0     02 26 0E F2 | 	cmp	local01, #2 wz
141a4     38 00 90 5D |  if_ne	jmp	#LR__1621
141a8     74 96 BF FD | 	call	#_pop
141ac     FF 26 02 F6 | 	mov	local01, result3
141b0     A7 FA 61 FC | 	wrlong	result1, fp
141b4     04 4E 05 F1 | 	add	fp, #4
141b8     A7 FC 61 FC | 	wrlong	result2, fp
141bc     04 4E 05 F1 | 	add	fp, #4
141c0     A7 26 62 FC | 	wrlong	local01, fp
141c4     08 4E 85 F1 | 	sub	fp, #8
141c8     A7 12 02 F6 | 	mov	arg01, fp
141cc     34 98 BF FD | 	call	#_converttoint
141d0     14 4E 05 F1 | 	add	fp, #20
141d4     A7 FA 61 FC | 	wrlong	result1, fp
141d8     14 4E 85 F1 | 	sub	fp, #20
141dc     0C 00 90 FD | 	jmp	#LR__1622
141e0                 | LR__1621
141e0     14 4E 05 F1 | 	add	fp, #20
141e4     A7 10 68 FC | 	wrlong	#8, fp
141e8     14 4E 85 F1 | 	sub	fp, #20
141ec                 | LR__1622
141ec     30 96 BF FD | 	call	#_pop
141f0     FF 26 02 F6 | 	mov	local01, result3
141f4     A7 FA 61 FC | 	wrlong	result1, fp
141f8     04 4E 05 F1 | 	add	fp, #4
141fc     A7 FC 61 FC | 	wrlong	result2, fp
14200     04 4E 05 F1 | 	add	fp, #4
14204     A7 26 62 FC | 	wrlong	local01, fp
14208     08 4E 85 F1 | 	sub	fp, #8
1420c     A7 12 02 F6 | 	mov	arg01, fp
14210     F0 97 BF FD | 	call	#_converttoint
14214     10 4E 05 F1 | 	add	fp, #16
14218     A7 FA 61 FC | 	wrlong	result1, fp
1421c     FD 12 02 F6 | 	mov	arg01, result1
14220     04 4E 05 F1 | 	add	fp, #4
14224     A7 14 02 FB | 	rdlong	arg02, fp
14228     14 4E 85 F1 | 	sub	fp, #20
1422c     10 16 06 F6 | 	mov	arg03, #16
14230     B4 61 B1 FD | 	call	#__system__Number_S
14234     A7 FA 61 FC | 	wrlong	result1, fp
14238     08 4E 05 F1 | 	add	fp, #8
1423c     A7 3E 68 FC | 	wrlong	#31, fp
14240     08 4E 85 F1 | 	sub	fp, #8
14244     A7 12 02 F6 | 	mov	arg01, fp
14248     6C 96 BF FD | 	call	#_push
1424c                 | LR__1623
1424c     A7 F0 03 F6 | 	mov	ptra, fp
14250     B2 00 A0 FD | 	call	#popregs_
14254                 | _do_hex_ret
14254     2D 00 64 FD | 	ret
14258                 | 
14258                 | ' 
14258                 | ' ' ----------------  if
14258                 | ' 
14258                 | ' sub do_if
14258                 | _do_if
14258     05 4A 05 F6 | 	mov	COUNT_, #5
1425c     A8 00 A0 FD | 	call	#pushregs_
14260     BC 95 BF FD | 	call	#_pop
14264     FD 26 0A F6 | 	mov	local01, result1 wz
14268     FE 28 02 F6 | 	mov	local02, result2
1426c     FF 2A 02 F6 | 	mov	local03, result3
14270                 | ' t1=pop()
14270                 | ' ' if uresult=0, jump over else
14270                 | ' if t1.result.uresult = 0 then 
14270     BC 00 90 5D |  if_ne	jmp	#LR__1632
14274                 | '   for i=lineptr_e to lineptr-1
14274     4A 00 00 FF 
14278     A0 E4 05 F1 | 	add	objptr, ##38048
1427c     F2 2C 02 FB | 	rdlong	local04, objptr
14280     04 E4 85 F1 | 	sub	objptr, #4
14284     F2 2E 02 FB | 	rdlong	local05, objptr
14288     4A 00 00 FF 
1428c     9C E4 85 F1 | 	sub	objptr, ##38044
14290                 | LR__1630
14290     17 2D 52 F2 | 	cmps	local04, local05 wc
14294     78 00 90 3D |  if_ae	jmp	#LR__1631
14298     16 FF 01 F6 | 	mov	result3, local04
1429c     01 FE 65 F0 | 	shl	result3, #1
142a0     16 FF 01 F1 | 	add	result3, local04
142a4     02 FE 65 F0 | 	shl	result3, #2
142a8     47 00 00 FF 
142ac     9C E4 05 F1 | 	add	objptr, ##36508
142b0     F2 FE 01 F1 | 	add	result3, objptr
142b4     FF 26 02 FB | 	rdlong	local01, result3
142b8     04 FE 05 F1 | 	add	result3, #4
142bc     FF FC 01 FB | 	rdlong	result2, result3
142c0     16 FF 01 F6 | 	mov	result3, local04
142c4     01 FE 65 F0 | 	shl	result3, #1
142c8     16 FF 01 F1 | 	add	result3, local04
142cc     02 FE 65 F0 | 	shl	result3, #2
142d0     F2 FE 01 F1 | 	add	result3, objptr
142d4     08 FE 05 F1 | 	add	result3, #8
142d8     FF FE 01 FB | 	rdlong	result3, result3
142dc     FE 28 02 F6 | 	mov	local02, result2
142e0     FF 2A 02 F6 | 	mov	local03, result3
142e4                 | '     t1=compiledline(i)
142e4                 | '     if t1.result_type=token_else then lineptr_e=i : return
142e4     5A 2A 0E F2 | 	cmp	local03, #90 wz
142e8     47 00 00 FF 
142ec     9C E4 85 F1 | 	sub	objptr, ##36508
142f0     4A 00 00 AF 
142f4     A0 E4 05 A1 |  if_e	add	objptr, ##38048
142f8     F2 2C 62 AC |  if_e	wrlong	local04, objptr
142fc     4A 00 00 AF 
14300     A0 E4 85 A1 |  if_e	sub	objptr, ##38048
14304     28 00 90 AD |  if_e	jmp	#LR__1633
14308     01 2C 06 F1 | 	add	local04, #1
1430c     80 FF 9F FD | 	jmp	#LR__1630
14310                 | LR__1631
14310     4A 00 00 FF 
14314     9C E4 05 F1 | 	add	objptr, ##38044
14318     F2 2E 02 FB | 	rdlong	local05, objptr
1431c     01 2E 86 F1 | 	sub	local05, #1
14320     04 E4 05 F1 | 	add	objptr, #4
14324     F2 2E 62 FC | 	wrlong	local05, objptr
14328     4A 00 00 FF 
1432c     A0 E4 85 F1 | 	sub	objptr, ##38048
14330                 | LR__1632
14330                 | LR__1633
14330     A7 F0 03 F6 | 	mov	ptra, fp
14334     B2 00 A0 FD | 	call	#popregs_
14338                 | _do_if_ret
14338     2D 00 64 FD | 	ret
1433c                 | 
1433c                 | ' 
1433c                 | ' ' ----------------  inkey$
1433c                 | ' 
1433c                 | ' sub do_inkey
1433c                 | _do_inkey
1433c     02 4A 05 F6 | 	mov	COUNT_, #2
14340     A8 00 A0 FD | 	call	#pushregs_
14344     0C F0 07 F1 | 	add	ptra, #12
14348     50 35 B1 FD | 	call	#_usbnew_spin2_get_key
1434c     45 00 00 FF 
14350     94 E4 05 F1 | 	add	objptr, ##35476
14354     F2 FA 61 FC | 	wrlong	result1, objptr
14358                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
14358     45 00 00 FF 
1435c     94 E4 85 F1 | 	sub	objptr, ##35476
14360     00 FA 0D F2 | 	cmp	result1, #0 wz
14364     94 00 90 AD |  if_e	jmp	#LR__1641
14368     45 00 00 FF 
1436c     94 E4 05 F1 | 	add	objptr, ##35476
14370     F2 1C 02 FB | 	rdlong	arg06, objptr
14374     45 00 00 FF 
14378     94 E4 85 F1 | 	sub	objptr, ##35476
1437c     00 00 40 FF 
14380     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
14384     45 00 00 CF 
14388     94 E4 05 C1 |  if_b	add	objptr, ##35476
1438c     F2 26 02 CB |  if_b	rdlong	local01, objptr
14390     45 00 00 CF 
14394     94 E4 85 C1 |  if_b	sub	objptr, ##35476
14398     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
1439c     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
143a0     58 00 90 3D |  if_ae	jmp	#LR__1641
143a4                 | '   if keyclick=1 then audio.play(7,keyclick_spl,44100,4096,spl_len) 
143a4     50 00 00 FF 
143a8     5C E5 05 F1 | 	add	objptr, ##41308
143ac     F2 1C 02 FB | 	rdlong	arg06, objptr
143b0     50 00 00 FF 
143b4     5C E5 85 F1 | 	sub	objptr, ##41308
143b8     01 1C 0E F2 | 	cmp	arg06, #1 wz
143bc     3C 00 90 5D |  if_ne	jmp	#LR__1640
143c0     52 00 00 FF 
143c4     FC E4 05 F1 | 	add	objptr, ##42236
143c8     F2 14 02 FB | 	rdlong	arg02, objptr
143cc     04 E4 85 F1 | 	sub	objptr, #4
143d0     F2 1A 02 FB | 	rdlong	arg05, objptr
143d4     07 12 06 F6 | 	mov	arg01, #7
143d8     56 00 00 FF 
143dc     44 16 06 F6 | 	mov	arg03, ##44100
143e0     0C 18 C6 F9 | 	decod	arg04, #12
143e4     01 1C 66 F6 | 	neg	arg06, #1
143e8     47 00 00 FF 
143ec     2C E4 85 F1 | 	sub	objptr, ##36396
143f0     40 38 B1 FD | 	call	#_audio096_spin2_play
143f4     0B 00 00 FF 
143f8     CC E4 85 F1 | 	sub	objptr, ##5836
143fc                 | LR__1640
143fc                 | LR__1641
143fc                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
143fc     45 00 00 FF 
14400     94 E4 05 F1 | 	add	objptr, ##35476
14404     F2 1C 0A FB | 	rdlong	arg06, objptr wz
14408     45 00 00 FF 
1440c     94 E4 85 F1 | 	sub	objptr, ##35476
14410     D4 01 90 AD |  if_e	jmp	#LR__1650
14414     45 00 00 FF 
14418     94 E4 05 F1 | 	add	objptr, ##35476
1441c     F2 1C 02 FB | 	rdlong	arg06, objptr
14420     45 00 00 FF 
14424     94 E4 85 F1 | 	sub	objptr, ##35476
14428     00 00 40 FF 
1442c     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
14430     45 00 00 CF 
14434     94 E4 05 C1 |  if_b	add	objptr, ##35476
14438     F2 26 02 CB |  if_b	rdlong	local01, objptr
1443c     45 00 00 CF 
14440     94 E4 85 C1 |  if_b	sub	objptr, ##35476
14444     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
14448     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
1444c     98 01 90 3D |  if_ae	jmp	#LR__1650
14450                 | '   if leds and 2 = 2 then 
14450     52 00 00 FF 
14454     38 E5 05 F1 | 	add	objptr, ##42296
14458     F2 26 0A FB | 	rdlong	local01, objptr wz
1445c     52 00 00 FF 
14460     38 E5 85 F1 | 	sub	objptr, ##42296
14464     58 01 90 AD |  if_e	jmp	#LR__1649
14468                 | '     if key>96 andalso key<123 then
14468     45 00 00 FF 
1446c     94 E4 05 F1 | 	add	objptr, ##35476
14470     F2 26 02 FB | 	rdlong	local01, objptr
14474     45 00 00 FF 
14478     94 E4 85 F1 | 	sub	objptr, ##35476
1447c     61 26 16 F2 | 	cmp	local01, #97 wc
14480     3C 00 90 CD |  if_b	jmp	#LR__1642
14484     45 00 00 FF 
14488     94 E4 05 F1 | 	add	objptr, ##35476
1448c     F2 26 02 FB | 	rdlong	local01, objptr
14490     45 00 00 FF 
14494     94 E4 85 F1 | 	sub	objptr, ##35476
14498     7B 26 16 F2 | 	cmp	local01, #123 wc
1449c     20 00 90 3D |  if_ae	jmp	#LR__1642
144a0     45 00 00 FF 
144a4     94 E4 05 F1 | 	add	objptr, ##35476
144a8     F2 26 02 FB | 	rdlong	local01, objptr
144ac     20 26 86 F1 | 	sub	local01, #32
144b0     F2 26 62 FC | 	wrlong	local01, objptr
144b4     45 00 00 FF 
144b8     94 E4 85 F1 | 	sub	objptr, ##35476
144bc     00 01 90 FD | 	jmp	#LR__1648
144c0                 | LR__1642
144c0     45 00 00 FF 
144c4     94 E4 05 F1 | 	add	objptr, ##35476
144c8     F2 26 02 FB | 	rdlong	local01, objptr
144cc     45 00 00 FF 
144d0     94 E4 85 F1 | 	sub	objptr, ##35476
144d4     41 26 16 F2 | 	cmp	local01, #65 wc
144d8     3C 00 90 CD |  if_b	jmp	#LR__1643
144dc     45 00 00 FF 
144e0     94 E4 05 F1 | 	add	objptr, ##35476
144e4     F2 26 02 FB | 	rdlong	local01, objptr
144e8     45 00 00 FF 
144ec     94 E4 85 F1 | 	sub	objptr, ##35476
144f0     5B 26 16 F2 | 	cmp	local01, #91 wc
144f4     20 00 90 3D |  if_ae	jmp	#LR__1643
144f8     45 00 00 FF 
144fc     94 E4 05 F1 | 	add	objptr, ##35476
14500     F2 26 02 FB | 	rdlong	local01, objptr
14504     20 26 06 F1 | 	add	local01, #32
14508     F2 26 62 FC | 	wrlong	local01, objptr
1450c     45 00 00 FF 
14510     94 E4 85 F1 | 	sub	objptr, ##35476
14514     A8 00 90 FD | 	jmp	#LR__1647
14518                 | LR__1643
14518     45 00 00 FF 
1451c     94 E4 05 F1 | 	add	objptr, ##35476
14520     F2 26 02 FB | 	rdlong	local01, objptr
14524     45 00 00 FF 
14528     94 E4 85 F1 | 	sub	objptr, ##35476
1452c     17 26 16 F2 | 	cmp	local01, #23 wc
14530     3C 00 90 CD |  if_b	jmp	#LR__1644
14534     45 00 00 FF 
14538     94 E4 05 F1 | 	add	objptr, ##35476
1453c     F2 26 02 FB | 	rdlong	local01, objptr
14540     45 00 00 FF 
14544     94 E4 85 F1 | 	sub	objptr, ##35476
14548     20 26 16 F2 | 	cmp	local01, #32 wc
1454c     20 00 90 3D |  if_ae	jmp	#LR__1644
14550     45 00 00 FF 
14554     94 E4 05 F1 | 	add	objptr, ##35476
14558     F2 26 02 FB | 	rdlong	local01, objptr
1455c     09 26 86 F1 | 	sub	local01, #9
14560     F2 26 62 FC | 	wrlong	local01, objptr
14564     45 00 00 FF 
14568     94 E4 85 F1 | 	sub	objptr, ##35476
1456c     50 00 90 FD | 	jmp	#LR__1646
14570                 | LR__1644
14570     45 00 00 FF 
14574     94 E4 05 F1 | 	add	objptr, ##35476
14578     F2 28 02 FB | 	rdlong	local02, objptr
1457c     45 00 00 FF 
14580     94 E4 85 F1 | 	sub	objptr, ##35476
14584     0E 28 16 F2 | 	cmp	local02, #14 wc
14588     34 00 90 CD |  if_b	jmp	#LR__1645
1458c     45 00 00 FF 
14590     94 E4 05 F1 | 	add	objptr, ##35476
14594     F2 26 02 FB | 	rdlong	local01, objptr
14598     45 00 00 FF 
1459c     94 E4 85 F1 | 	sub	objptr, ##35476
145a0     17 26 16 F2 | 	cmp	local01, #23 wc
145a4     52 00 00 CF 
145a8     3C E5 05 C1 |  if_b	add	objptr, ##42300
145ac     F2 28 02 CB |  if_b	rdlong	local02, objptr
145b0     27 28 06 C1 |  if_b	add	local02, #39
145b4     F2 28 62 CC |  if_b	wrlong	local02, objptr
145b8     52 00 00 CF 
145bc     3C E5 85 C1 |  if_b	sub	objptr, ##42300
145c0                 | LR__1645
145c0                 | LR__1646
145c0                 | LR__1647
145c0                 | LR__1648
145c0                 | LR__1649
145c0     45 00 00 FF 
145c4     94 E4 05 F1 | 	add	objptr, ##35476
145c8     F2 12 02 FB | 	rdlong	arg01, objptr
145cc     45 00 00 FF 
145d0     94 E4 85 F1 | 	sub	objptr, ##35476
145d4     64 04 B1 FD | 	call	#_scantochar
145d8     FD 12 02 F6 | 	mov	arg01, result1
145dc     78 5D B1 FD | 	call	#__system__Chr_S
145e0     A7 FA 61 FC | 	wrlong	result1, fp
145e4     0C 00 90 FD | 	jmp	#LR__1651
145e8                 | LR__1650
145e8     C3 01 00 FF 
145ec     D4 28 06 F6 | 	mov	local02, ##@LR__6066
145f0     A7 28 62 FC | 	wrlong	local02, fp
145f4                 | LR__1651
145f4     08 4E 05 F1 | 	add	fp, #8
145f8     A7 3E 68 FC | 	wrlong	#31, fp
145fc     08 4E 85 F1 | 	sub	fp, #8
14600     A7 12 02 F6 | 	mov	arg01, fp
14604     B0 92 BF FD | 	call	#_push
14608     A7 F0 03 F6 | 	mov	ptra, fp
1460c     B2 00 A0 FD | 	call	#popregs_
14610                 | _do_inkey_ret
14610     2D 00 64 FD | 	ret
14614                 | 
14614                 | ' 
14614                 | ' ' ----------------  ink
14614                 | ' 
14614                 | ' sub do_ink
14614                 | _do_ink
14614     00 4A 05 F6 | 	mov	COUNT_, #0
14618     A8 00 A0 FD | 	call	#pushregs_
1461c     0C F0 07 F1 | 	add	ptra, #12
14620     FC 91 BF FD | 	call	#_pop
14624     FF 14 02 F6 | 	mov	arg02, result3
14628     A7 FA 61 FC | 	wrlong	result1, fp
1462c     04 4E 05 F1 | 	add	fp, #4
14630     A7 FC 61 FC | 	wrlong	result2, fp
14634     04 4E 05 F1 | 	add	fp, #4
14638     A7 14 62 FC | 	wrlong	arg02, fp
1463c     08 4E 85 F1 | 	sub	fp, #8
14640     A7 12 02 F6 | 	mov	arg01, fp
14644     BC 93 BF FD | 	call	#_converttoint
14648     37 00 00 FF 
1464c     5C E4 05 F1 | 	add	objptr, ##28252
14650     F2 FA 61 FC | 	wrlong	result1, objptr
14654     04 E4 85 F1 | 	sub	objptr, #4
14658     F2 14 02 FB | 	rdlong	arg02, objptr
1465c                 | ' 
1465c                 | ' write_color:=ff
1465c     37 00 00 FF 
14660     17 E4 85 F1 | 	sub	objptr, ##28183
14664     F2 FA 61 FC | 	wrlong	result1, objptr
14668                 | ' write_background:=bb
14668     04 E4 05 F1 | 	add	objptr, #4
1466c     F2 14 62 FC | 	wrlong	arg02, objptr
14670     37 00 00 FF 
14674     17 E4 05 F1 | 	add	objptr, ##28183
14678     F2 12 02 FB | 	rdlong	arg01, objptr
1467c     37 00 00 FF 
14680     5C E4 85 F1 | 	sub	objptr, ##28252
14684     40 0C B1 FD | 	call	#_hg010b_spin2_setcursorcolor
14688     A7 F0 03 F6 | 	mov	ptra, fp
1468c     B2 00 A0 FD | 	call	#popregs_
14690                 | _do_ink_ret
14690     2D 00 64 FD | 	ret
14694                 | 
14694                 | ' 
14694                 | ' ' ----------------  int
14694                 | ' 
14694                 | ' sub do_int
14694                 | _do_int
14694     02 4A 05 F6 | 	mov	COUNT_, #2
14698     A8 00 A0 FD | 	call	#pushregs_
1469c     10 F0 07 F1 | 	add	ptra, #16
146a0     7C 91 BF FD | 	call	#_pop
146a4     FE 26 02 F6 | 	mov	local01, result2
146a8     FF 28 02 F6 | 	mov	local02, result3
146ac     A7 FA 61 FC | 	wrlong	result1, fp
146b0     04 4E 05 F1 | 	add	fp, #4
146b4     A7 26 62 FC | 	wrlong	local01, fp
146b8     04 4E 05 F1 | 	add	fp, #4
146bc     A7 28 62 FC | 	wrlong	local02, fp
146c0                 | ' 
146c0                 | ' t1=pop()
146c0                 | ' select case t1.result_type
146c0     08 4E 85 F1 | 	sub	fp, #8
146c4     1E 28 0E F2 | 	cmp	local02, #30 wz
146c8     14 00 90 AD |  if_e	jmp	#LR__1660
146cc     1F 28 0E F2 | 	cmp	local02, #31 wz
146d0     20 00 90 AD |  if_e	jmp	#LR__1661
146d4     2B 28 0E F2 | 	cmp	local02, #43 wz
146d8     34 00 90 AD |  if_e	jmp	#LR__1662
146dc     50 00 90 FD | 	jmp	#LR__1663
146e0                 | LR__1660
146e0     A7 12 02 FB | 	rdlong	arg01, fp
146e4     00 14 06 F6 | 	mov	arg02, #0
146e8     6C 6D B1 FD | 	call	#__system___float_tointeger
146ec     A7 FA 61 FC | 	wrlong	result1, fp
146f0     3C 00 90 FD | 	jmp	#LR__1663
146f4                 | LR__1661
146f4     A7 12 02 FB | 	rdlong	arg01, fp
146f8     A4 70 B1 FD | 	call	#__system____builtin_atof
146fc     FD 12 02 F6 | 	mov	arg01, result1
14700     00 14 06 F6 | 	mov	arg02, #0
14704     50 6D B1 FD | 	call	#__system___float_tointeger
14708     A7 FA 61 FC | 	wrlong	result1, fp
1470c     20 00 90 FD | 	jmp	#LR__1663
14710                 | LR__1662
14710     A7 12 02 FB | 	rdlong	arg01, fp
14714     80 92 BF FD | 	call	#_convertstring
14718     FD 12 02 F6 | 	mov	arg01, result1
1471c     80 70 B1 FD | 	call	#__system____builtin_atof
14720     FD 12 02 F6 | 	mov	arg01, result1
14724     00 14 06 F6 | 	mov	arg02, #0
14728     2C 6D B1 FD | 	call	#__system___float_tointeger
1472c     A7 FA 61 FC | 	wrlong	result1, fp
14730                 | LR__1663
14730     08 4E 05 F1 | 	add	fp, #8
14734     A7 38 68 FC | 	wrlong	#28, fp
14738     08 4E 85 F1 | 	sub	fp, #8
1473c     A7 12 02 F6 | 	mov	arg01, fp
14740     74 91 BF FD | 	call	#_push
14744     A7 F0 03 F6 | 	mov	ptra, fp
14748     B2 00 A0 FD | 	call	#popregs_
1474c                 | _do_int_ret
1474c     2D 00 64 FD | 	ret
14750                 | 
14750                 | ' 
14750                 | ' ' ----------------  input
14750                 | ' 
14750                 | ' sub do_input
14750                 | _do_input
14750     11 4A 05 F6 | 	mov	COUNT_, #17
14754     A8 00 A0 FD | 	call	#pushregs_
14758     50 F1 07 F1 | 	add	ptra, #336
1475c     4A 00 00 FF 
14760     A0 E4 05 F1 | 	add	objptr, ##38048
14764     F2 FE 01 FB | 	rdlong	result3, objptr
14768     FF FC 01 F6 | 	mov	result2, result3
1476c     01 FC 65 F0 | 	shl	result2, #1
14770     FF FC 01 F1 | 	add	result2, result3
14774     02 FC 65 F0 | 	shl	result2, #2
14778     03 00 00 FF 
1477c     04 E4 85 F1 | 	sub	objptr, ##1540
14780     F2 FC 01 F1 | 	add	result2, objptr
14784     FE FC 01 FB | 	rdlong	result2, result2
14788     08 4E 05 F1 | 	add	fp, #8
1478c     A7 FC 61 FC | 	wrlong	result2, fp
14790                 | ' 
14790                 | ' numpar=compiledline(lineptr_e).result.uresult
14790                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
14790     08 4E 85 F1 | 	sub	fp, #8
14794     01 FC 15 F2 | 	cmp	result2, #1 wc
14798     47 00 00 FF 
1479c     9C E4 85 F1 | 	sub	objptr, ##36508
147a0     14 00 90 CD |  if_b	jmp	#LR__1670
147a4     08 4E 05 F1 | 	add	fp, #8
147a8     A7 FC 01 FB | 	rdlong	result2, fp
147ac     08 4E 85 F1 | 	sub	fp, #8
147b0     41 FC 15 F2 | 	cmp	result2, #65 wc
147b4     50 00 90 CD |  if_b	jmp	#LR__1671
147b8                 | LR__1670
147b8     00 12 06 F6 | 	mov	arg01, #0
147bc     04 96 B1 FD | 	call	#__system___getiolock_0620
147c0     FD 12 02 F6 | 	mov	arg01, result1
147c4     4C 39 B1 FD | 	call	#__system___lockmem
147c8     C3 01 00 FF 
147cc     D5 14 06 F6 | 	mov	arg02, ##@LR__6067
147d0     00 12 06 F6 | 	mov	arg01, #0
147d4     00 16 06 F6 | 	mov	arg03, #0
147d8     30 46 B1 FD | 	call	#__system___basic_print_string
147dc     00 12 06 F6 | 	mov	arg01, #0
147e0     E0 95 B1 FD | 	call	#__system___getiolock_0620
147e4     FD 00 68 FC | 	wrlong	#0, result1
147e8     50 00 00 FF 
147ec     10 E5 05 F1 | 	add	objptr, ##41232
147f0     F2 14 02 FB | 	rdlong	arg02, objptr
147f4     50 00 00 FF 
147f8     10 E5 85 F1 | 	sub	objptr, ##41232
147fc     27 12 06 F6 | 	mov	arg01, #39
14800     B8 FE B0 FD | 	call	#_printerror
14804     44 0B 90 FD | 	jmp	#LR__1720
14808                 | LR__1671
14808     08 4E 05 F1 | 	add	fp, #8
1480c     A7 FC 01 FB | 	rdlong	result2, fp
14810     01 FC 85 F1 | 	sub	result2, #1
14814     28 4F 05 F1 | 	add	fp, #296
14818     A7 FC 61 FC | 	wrlong	result2, fp
1481c     3C E4 05 F1 | 	add	objptr, #60
14820     F2 FC E1 FA | 	rdword	result2, objptr
14824     FE FC 51 F6 | 	abs	result2, result2 wc
14828     01 FC 45 F0 | 	shr	result2, #1
1482c     FE FC 81 F6 | 	negc	result2, result2
14830     0C 4E 05 F1 | 	add	fp, #12
14834     A7 FC 61 FC | 	wrlong	result2, fp
14838     02 E4 05 F1 | 	add	objptr, #2
1483c     F2 26 C2 FA | 	rdbyte	local01, objptr
14840     3E E4 85 F1 | 	sub	objptr, #62
14844     04 4E 05 F1 | 	add	fp, #4
14848     A7 26 62 FC | 	wrlong	local01, fp
1484c     40 4F 85 F1 | 	sub	fp, #320
14850                 | ' i=numpar-1
14850                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
14850                 | ' do
14850                 | LR__1672
14850     B0 BF BE FD | 	call	#_edit
14854     A7 FA 61 FC | 	wrlong	result1, fp
14858                 | ' 
14858                 | '   line$=edit()
14858                 | ' 
14858                 | '   if v.cursor_y=cpy+1 then
14858     3E E4 05 F1 | 	add	objptr, #62
1485c     F2 26 C2 FA | 	rdbyte	local01, objptr
14860     3E E4 85 F1 | 	sub	objptr, #62
14864     40 4F 05 F1 | 	add	fp, #320
14868     A7 16 02 FB | 	rdlong	arg03, fp
1486c     40 4F 85 F1 | 	sub	fp, #320
14870     01 16 06 F1 | 	add	arg03, #1
14874     0B 27 0A F2 | 	cmp	local01, arg03 wz
14878     6C 00 90 5D |  if_ne	jmp	#LR__1675
1487c     A7 26 02 FB | 	rdlong	local01, fp
14880     13 13 02 F6 | 	mov	arg01, local01
14884     09 29 02 F6 | 	mov	local02, arg01
14888     97 06 48 FB | 	callpa	#(@LR__1674-@LR__1673)>>2,fcache_load_ptr_
1488c                 | LR__1673
1488c     14 FB C9 FA | 	rdbyte	result1, local02 wz
14890     01 28 06 51 |  if_ne	add	local02, #1
14894     F4 FF 9F 5D |  if_ne	jmp	#LR__1673
14898                 | LR__1674
14898     09 29 82 F1 | 	sub	local02, arg01
1489c     14 15 02 F6 | 	mov	arg02, local02
148a0     3C 4F 05 F1 | 	add	fp, #316
148a4     A7 16 02 FB | 	rdlong	arg03, fp
148a8     3C 4F 85 F1 | 	sub	fp, #316
148ac     0B 15 82 F1 | 	sub	arg02, arg03
148b0     37 00 00 FF 
148b4     54 E4 05 F1 | 	add	objptr, ##28244
148b8     F2 16 02 FB | 	rdlong	arg03, objptr
148bc     37 00 00 FF 
148c0     54 E4 85 F1 | 	sub	objptr, ##28244
148c4     0B 15 02 F1 | 	add	arg02, arg03
148c8     13 13 02 F6 | 	mov	arg01, local01
148cc     4C 59 B1 FD | 	call	#__system__Right_S
148d0     FD 12 02 F6 | 	mov	arg01, result1
148d4     4C 5D B1 FD | 	call	#__system__RTrim_S
148d8     FD 12 02 F6 | 	mov	arg01, result1
148dc     84 5C B1 FD | 	call	#__system__LTrim_S
148e0     A7 FA 61 FC | 	wrlong	result1, fp
148e4     14 00 90 FD | 	jmp	#LR__1676
148e8                 | LR__1675
148e8     A7 12 02 FB | 	rdlong	arg01, fp
148ec     34 5D B1 FD | 	call	#__system__RTrim_S
148f0     FD 12 02 F6 | 	mov	arg01, result1
148f4     6C 5C B1 FD | 	call	#__system__LTrim_S
148f8     A7 FA 61 FC | 	wrlong	result1, fp
148fc                 | LR__1676
148fc                 | '   do
148fc                 | LR__1677
148fc     A7 14 02 FB | 	rdlong	arg02, fp
14900     C3 01 00 FF 
14904     E0 16 06 F6 | 	mov	arg03, ##@LR__6068
14908     01 12 06 F6 | 	mov	arg01, #1
1490c     CC 5D B1 FD | 	call	#__system__Instr
14910     0C 4E 05 F1 | 	add	fp, #12
14914     A7 FA 61 FC | 	wrlong	result1, fp
14918                 | '    comma=instr(1,line$,",")  
14918                 | '    if comma>0  then 
14918     0C 4E 85 F1 | 	sub	fp, #12
1491c     01 FA 15 F2 | 	cmp	result1, #1 wc
14920     68 00 90 CD |  if_b	jmp	#LR__1680
14924     A7 12 02 FB | 	rdlong	arg01, fp
14928     0C 4E 05 F1 | 	add	fp, #12
1492c     A7 14 02 FB | 	rdlong	arg02, fp
14930     0C 4E 85 F1 | 	sub	fp, #12
14934     01 14 86 F1 | 	sub	arg02, #1
14938     58 58 B1 FD | 	call	#__system__Left_S
1493c     04 4E 05 F1 | 	add	fp, #4
14940     A7 FA 61 FC | 	wrlong	result1, fp
14944     04 4E 85 F1 | 	sub	fp, #4
14948     A7 26 02 FB | 	rdlong	local01, fp
1494c     13 13 02 F6 | 	mov	arg01, local01
14950     09 29 02 F6 | 	mov	local02, arg01
14954     97 06 48 FB | 	callpa	#(@LR__1679-@LR__1678)>>2,fcache_load_ptr_
14958                 | LR__1678
14958     14 FB C9 FA | 	rdbyte	result1, local02 wz
1495c     01 28 06 51 |  if_ne	add	local02, #1
14960     F4 FF 9F 5D |  if_ne	jmp	#LR__1678
14964                 | LR__1679
14964     09 29 82 F1 | 	sub	local02, arg01
14968     14 15 02 F6 | 	mov	arg02, local02
1496c     0C 4E 05 F1 | 	add	fp, #12
14970     A7 16 02 FB | 	rdlong	arg03, fp
14974     0C 4E 85 F1 | 	sub	fp, #12
14978     0B 15 82 F1 | 	sub	arg02, arg03
1497c     13 13 02 F6 | 	mov	arg01, local01
14980     98 58 B1 FD | 	call	#__system__Right_S
14984     A7 FA 61 FC | 	wrlong	result1, fp
14988     28 00 90 FD | 	jmp	#LR__1681
1498c                 | LR__1680
1498c     A7 12 02 FB | 	rdlong	arg01, fp
14990     90 5C B1 FD | 	call	#__system__RTrim_S
14994     FD 12 02 F6 | 	mov	arg01, result1
14998     C8 5B B1 FD | 	call	#__system__LTrim_S
1499c     04 4E 05 F1 | 	add	fp, #4
149a0     A7 FA 61 FC | 	wrlong	result1, fp
149a4     04 4E 85 F1 | 	sub	fp, #4
149a8     C3 01 00 FF 
149ac     E2 26 06 F6 | 	mov	local01, ##@LR__6069
149b0     A7 26 62 FC | 	wrlong	local01, fp
149b4                 | LR__1681
149b4     30 4F 05 F1 | 	add	fp, #304
149b8     A7 26 02 FB | 	rdlong	local01, fp
149bc     02 26 66 F0 | 	shl	local01, #2
149c0     04 4F 85 F1 | 	sub	fp, #260
149c4     A7 26 02 F1 | 	add	local01, fp
149c8     28 4E 85 F1 | 	sub	fp, #40
149cc     A7 FA 01 FB | 	rdlong	result1, fp
149d0     13 FB 61 FC | 	wrlong	result1, local01
149d4     2C 4F 05 F1 | 	add	fp, #300
149d8     A7 26 02 FB | 	rdlong	local01, fp
149dc     01 26 86 F1 | 	sub	local01, #1
149e0     A7 26 62 FC | 	wrlong	local01, fp
149e4     30 4F 85 F1 | 	sub	fp, #304
149e8     00 26 56 F2 | 	cmps	local01, #0 wc
149ec     18 00 90 CD |  if_b	jmp	#LR__1682
149f0     A7 12 02 FB | 	rdlong	arg01, fp
149f4     C3 01 00 FF 
149f8     E3 14 06 F6 | 	mov	arg02, ##@LR__6070
149fc     3C 37 B1 FD | 	call	#__system___string_cmp
14a00     00 FA 0D F2 | 	cmp	result1, #0 wz
14a04     F4 FE 9F 5D |  if_ne	jmp	#LR__1677
14a08                 | LR__1682
14a08     30 4F 05 F1 | 	add	fp, #304
14a0c     A7 26 02 FB | 	rdlong	local01, fp
14a10     30 4F 85 F1 | 	sub	fp, #304
14a14     00 26 56 F2 | 	cmps	local01, #0 wc
14a18     34 FE 9F 3D |  if_ae	jmp	#LR__1672
14a1c                 | ' 
14a1c                 | ' for i=0 to numpar-1
14a1c     30 4F 05 F1 | 	add	fp, #304
14a20     A7 00 68 FC | 	wrlong	#0, fp
14a24     28 4F 85 F1 | 	sub	fp, #296
14a28     A7 2A 02 FB | 	rdlong	local03, fp
14a2c     08 4E 85 F1 | 	sub	fp, #8
14a30                 | LR__1683
14a30     30 4F 05 F1 | 	add	fp, #304
14a34     A7 2C 02 FB | 	rdlong	local04, fp
14a38     30 4F 85 F1 | 	sub	fp, #304
14a3c     16 27 02 F6 | 	mov	local01, local04
14a40     15 27 52 F2 | 	cmps	local01, local03 wc
14a44     04 09 90 3D |  if_ae	jmp	#LR__1719
14a48                 | ' 
14a48                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
14a48     30 4F 05 F1 | 	add	fp, #304
14a4c     A7 16 02 FB | 	rdlong	arg03, fp
14a50     02 16 66 F0 | 	shl	arg03, #2
14a54     04 4F 85 F1 | 	sub	fp, #260
14a58     A7 16 02 F1 | 	add	arg03, fp
14a5c     0B 13 02 FB | 	rdlong	arg01, arg03
14a60     2C 4E 85 F1 | 	sub	fp, #44
14a64     0C 20 BF FD | 	call	#_isnum
14a68     FD 2E 02 F6 | 	mov	local05, result1
14a6c     30 4F 05 F1 | 	add	fp, #304
14a70     A7 16 02 FB | 	rdlong	arg03, fp
14a74     02 16 66 F0 | 	shl	arg03, #2
14a78     04 4F 85 F1 | 	sub	fp, #260
14a7c     A7 30 02 F6 | 	mov	local06, fp
14a80     A7 16 02 F1 | 	add	arg03, fp
14a84     0B 13 02 FB | 	rdlong	arg01, arg03
14a88     2C 4E 85 F1 | 	sub	fp, #44
14a8c     D0 23 BF FD | 	call	#_isint
14a90     FD 2E 2A F5 | 	andn	local05, result1 wz
14a94     52 00 00 5F 
14a98     68 E5 05 51 |  if_ne	add	objptr, ##42344
14a9c     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
14aa0     52 00 00 5F 
14aa4     68 E5 85 51 |  if_ne	sub	objptr, ##42344
14aa8                 | '   if isint(args(i)) then r=result_int 
14aa8     30 4F 05 F1 | 	add	fp, #304
14aac     A7 2E 02 FB | 	rdlong	local05, fp
14ab0     02 2E 66 F0 | 	shl	local05, #2
14ab4     04 4F 85 F1 | 	sub	fp, #260
14ab8     A7 2E 02 F1 | 	add	local05, fp
14abc     17 13 02 FB | 	rdlong	arg01, local05
14ac0     2C 4E 85 F1 | 	sub	fp, #44
14ac4     98 23 BF FD | 	call	#_isint
14ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
14acc     52 00 00 5F 
14ad0     68 E5 05 51 |  if_ne	add	objptr, ##42344
14ad4     F2 38 68 5C |  if_ne	wrlong	#28, objptr
14ad8     52 00 00 5F 
14adc     68 E5 85 51 |  if_ne	sub	objptr, ##42344
14ae0                 | '   if isdec(args(i)) then r=result_uint 
14ae0     30 4F 05 F1 | 	add	fp, #304
14ae4     A7 2E 02 FB | 	rdlong	local05, fp
14ae8     02 2E 66 F0 | 	shl	local05, #2
14aec     04 4F 85 F1 | 	sub	fp, #260
14af0     A7 2E 02 F1 | 	add	local05, fp
14af4     17 13 02 FB | 	rdlong	arg01, local05
14af8     2C 4E 85 F1 | 	sub	fp, #44
14afc     04 26 BF FD | 	call	#_isdec
14b00     00 FA 0D F2 | 	cmp	result1, #0 wz
14b04     52 00 00 5F 
14b08     68 E5 05 51 |  if_ne	add	objptr, ##42344
14b0c     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
14b10     52 00 00 5F 
14b14     68 E5 85 51 |  if_ne	sub	objptr, ##42344
14b18                 | '   if not isnum(args(i)) then 
14b18     30 4F 05 F1 | 	add	fp, #304
14b1c     A7 32 02 FB | 	rdlong	local07, fp
14b20     19 35 02 F6 | 	mov	local08, local07
14b24     02 34 66 F0 | 	shl	local08, #2
14b28     04 4F 85 F1 | 	sub	fp, #260
14b2c     A7 36 02 F6 | 	mov	local09, fp
14b30     A7 34 02 F1 | 	add	local08, fp
14b34     1A 13 02 FB | 	rdlong	arg01, local08
14b38     2C 4E 85 F1 | 	sub	fp, #44
14b3c     34 1F BF FD | 	call	#_isnum
14b40     FD 2E 22 F6 | 	not	local05, result1
14b44     00 2E 0E F2 | 	cmp	local05, #0 wz
14b48     44 01 90 AD |  if_e	jmp	#LR__1688
14b4c     52 00 00 FF 
14b50     68 E5 05 F1 | 	add	objptr, ##42344
14b54     F2 56 68 FC | 	wrlong	#43, objptr
14b58     52 00 00 FF 
14b5c     68 E5 85 F1 | 	sub	objptr, ##42344
14b60     04 4E 05 F1 | 	add	fp, #4
14b64     A7 12 02 FB | 	rdlong	arg01, fp
14b68     04 4E 85 F1 | 	sub	fp, #4
14b6c     09 29 02 F6 | 	mov	local02, arg01
14b70     97 06 48 FB | 	callpa	#(@LR__1685-@LR__1684)>>2,fcache_load_ptr_
14b74                 | LR__1684
14b74     14 FB C9 FA | 	rdbyte	result1, local02 wz
14b78     01 28 06 51 |  if_ne	add	local02, #1
14b7c     F4 FF 9F 5D |  if_ne	jmp	#LR__1684
14b80                 | LR__1685
14b80     09 29 82 F1 | 	sub	local02, arg01
14b84     14 33 02 F6 | 	mov	local07, local02
14b88     38 4F 05 F1 | 	add	fp, #312
14b8c     A7 32 62 FC | 	wrlong	local07, fp
14b90     52 00 00 FF 
14b94     F0 E4 05 F1 | 	add	objptr, ##42224
14b98     F2 12 02 FB | 	rdlong	arg01, objptr
14b9c     19 13 82 F1 | 	sub	arg01, local07
14ba0     04 12 86 F1 | 	sub	arg01, #4
14ba4     03 12 26 F5 | 	andn	arg01, #3
14ba8     F2 12 62 FC | 	wrlong	arg01, objptr
14bac     52 00 00 FF 
14bb0     F0 E4 85 F1 | 	sub	objptr, ##42224
14bb4     A7 14 02 FB | 	rdlong	arg02, fp
14bb8     38 4F 85 F1 | 	sub	fp, #312
14bbc     9C FC B0 FD | 	call	#_pslpoke
14bc0                 | '     pslpoke memtop,l
14bc0                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
14bc0     34 4F 05 F1 | 	add	fp, #308
14bc4     A7 02 68 FC | 	wrlong	#1, fp
14bc8     04 4E 05 F1 | 	add	fp, #4
14bcc     A7 38 02 FB | 	rdlong	local10, fp
14bd0     38 4F 85 F1 | 	sub	fp, #312
14bd4     01 38 06 F1 | 	add	local10, #1
14bd8                 | LR__1686
14bd8     34 4F 05 F1 | 	add	fp, #308
14bdc     A7 2E 02 FB | 	rdlong	local05, fp
14be0     34 4F 85 F1 | 	sub	fp, #308
14be4     1C 2F 52 F2 | 	cmps	local05, local10 wc
14be8     84 00 90 3D |  if_ae	jmp	#LR__1687
14bec     52 00 00 FF 
14bf0     F0 E4 05 F1 | 	add	objptr, ##42224
14bf4     F2 32 02 FB | 	rdlong	local07, objptr
14bf8     52 00 00 FF 
14bfc     F0 E4 85 F1 | 	sub	objptr, ##42224
14c00     03 32 06 F1 | 	add	local07, #3
14c04     34 4F 05 F1 | 	add	fp, #308
14c08     A7 3A 02 FB | 	rdlong	local11, fp
14c0c     1D 33 02 F1 | 	add	local07, local11
14c10     04 4E 85 F1 | 	sub	fp, #4
14c14     A7 3C 02 FB | 	rdlong	local12, fp
14c18     02 3C 66 F0 | 	shl	local12, #2
14c1c     04 4F 85 F1 | 	sub	fp, #260
14c20     A7 3E 02 F6 | 	mov	local13, fp
14c24     A7 3C 02 F1 | 	add	local12, fp
14c28     1E 13 02 FB | 	rdlong	arg01, local12
14c2c     2C 4E 85 F1 | 	sub	fp, #44
14c30     01 40 06 F6 | 	mov	local14, #1
14c34     1D 15 02 F6 | 	mov	arg02, local11
14c38     01 16 06 F6 | 	mov	arg03, #1
14c3c     6C 56 B1 FD | 	call	#__system__Mid_S
14c40     FD 14 C2 FA | 	rdbyte	arg02, result1
14c44     19 13 02 F6 | 	mov	arg01, local07
14c48     A0 FC B0 FD | 	call	#_pspoke
14c4c     34 4F 05 F1 | 	add	fp, #308
14c50     A7 34 02 FB | 	rdlong	local08, fp
14c54     1A 33 02 F6 | 	mov	local07, local08
14c58     1A 31 02 F6 | 	mov	local06, local08
14c5c     18 37 02 F6 | 	mov	local09, local06
14c60     01 36 06 F1 | 	add	local09, #1
14c64     A7 36 62 FC | 	wrlong	local09, fp
14c68     34 4F 85 F1 | 	sub	fp, #308
14c6c     68 FF 9F FD | 	jmp	#LR__1686
14c70                 | LR__1687
14c70     52 00 00 FF 
14c74     F0 E4 05 F1 | 	add	objptr, ##42224
14c78     F2 2E 02 FB | 	rdlong	local05, objptr
14c7c     52 00 00 FF 
14c80     F0 E4 85 F1 | 	sub	objptr, ##42224
14c84     10 4E 05 F1 | 	add	fp, #16
14c88     A7 2E 62 FC | 	wrlong	local05, fp
14c8c     10 4E 85 F1 | 	sub	fp, #16
14c90                 | LR__1688
14c90     8C 8B BF FD | 	call	#_pop
14c94     FE 2E 02 F6 | 	mov	local05, result2
14c98     FF 42 02 F6 | 	mov	local15, result3
14c9c     1C 4E 05 F1 | 	add	fp, #28
14ca0     A7 FA 61 FC | 	wrlong	result1, fp
14ca4     04 4E 05 F1 | 	add	fp, #4
14ca8     A7 2E 62 FC | 	wrlong	local05, fp
14cac     04 4E 05 F1 | 	add	fp, #4
14cb0     A7 42 62 FC | 	wrlong	local15, fp
14cb4     04 4E 85 F1 | 	sub	fp, #4
14cb8     A7 44 02 FB | 	rdlong	local16, fp
14cbc     0C 4E 85 F1 | 	sub	fp, #12
14cc0     A7 44 62 FC | 	wrlong	local16, fp
14cc4                 | '   t1=pop() : vartype=t1.result.twowords(1)
14cc4                 | '   select case vartype
14cc4     14 4E 85 F1 | 	sub	fp, #20
14cc8     22 47 0A F6 | 	mov	local17, local16 wz
14ccc     64 00 90 AD |  if_e	jmp	#LR__1689
14cd0     00 47 0E F2 | 	cmp	local17, #256 wz
14cd4     6C 00 90 AD |  if_e	jmp	#LR__1690
14cd8     01 47 0E F2 | 	cmp	local17, #257 wz
14cdc     74 00 90 AD |  if_e	jmp	#LR__1691
14ce0     02 47 0E F2 | 	cmp	local17, #258 wz
14ce4     7C 00 90 AD |  if_e	jmp	#LR__1692
14ce8     03 47 0E F2 | 	cmp	local17, #259 wz
14cec     84 00 90 AD |  if_e	jmp	#LR__1693
14cf0     04 47 0E F2 | 	cmp	local17, #260 wz
14cf4     8C 00 90 AD |  if_e	jmp	#LR__1694
14cf8     05 47 0E F2 | 	cmp	local17, #261 wz
14cfc     94 00 90 AD |  if_e	jmp	#LR__1695
14d00     06 47 0E F2 | 	cmp	local17, #262 wz
14d04     9C 00 90 AD |  if_e	jmp	#LR__1696
14d08     07 47 0E F2 | 	cmp	local17, #263 wz
14d0c     A4 00 90 AD |  if_e	jmp	#LR__1697
14d10     08 47 0E F2 | 	cmp	local17, #264 wz
14d14     AC 00 90 AD |  if_e	jmp	#LR__1698
14d18     09 47 0E F2 | 	cmp	local17, #265 wz
14d1c     B4 00 90 AD |  if_e	jmp	#LR__1699
14d20     0A 47 0E F2 | 	cmp	local17, #266 wz
14d24     BC 00 90 AD |  if_e	jmp	#LR__1700
14d28     0B 47 0E F2 | 	cmp	local17, #267 wz
14d2c     C4 00 90 AD |  if_e	jmp	#LR__1701
14d30     D0 00 90 FD | 	jmp	#LR__1702
14d34                 | LR__1689
14d34     18 4E 05 F1 | 	add	fp, #24
14d38     A7 18 68 FC | 	wrlong	#12, fp
14d3c     18 4E 85 F1 | 	sub	fp, #24
14d40     CC 00 90 FD | 	jmp	#LR__1703
14d44                 | LR__1690
14d44     18 4E 05 F1 | 	add	fp, #24
14d48     A7 18 68 FC | 	wrlong	#12, fp
14d4c     18 4E 85 F1 | 	sub	fp, #24
14d50     BC 00 90 FD | 	jmp	#LR__1703
14d54                 | LR__1691
14d54     18 4E 05 F1 | 	add	fp, #24
14d58     A7 02 68 FC | 	wrlong	#1, fp
14d5c     18 4E 85 F1 | 	sub	fp, #24
14d60     AC 00 90 FD | 	jmp	#LR__1703
14d64                 | LR__1692
14d64     18 4E 05 F1 | 	add	fp, #24
14d68     A7 02 68 FC | 	wrlong	#1, fp
14d6c     18 4E 85 F1 | 	sub	fp, #24
14d70     9C 00 90 FD | 	jmp	#LR__1703
14d74                 | LR__1693
14d74     18 4E 05 F1 | 	add	fp, #24
14d78     A7 04 68 FC | 	wrlong	#2, fp
14d7c     18 4E 85 F1 | 	sub	fp, #24
14d80     8C 00 90 FD | 	jmp	#LR__1703
14d84                 | LR__1694
14d84     18 4E 05 F1 | 	add	fp, #24
14d88     A7 04 68 FC | 	wrlong	#2, fp
14d8c     18 4E 85 F1 | 	sub	fp, #24
14d90     7C 00 90 FD | 	jmp	#LR__1703
14d94                 | LR__1695
14d94     18 4E 05 F1 | 	add	fp, #24
14d98     A7 08 68 FC | 	wrlong	#4, fp
14d9c     18 4E 85 F1 | 	sub	fp, #24
14da0     6C 00 90 FD | 	jmp	#LR__1703
14da4                 | LR__1696
14da4     18 4E 05 F1 | 	add	fp, #24
14da8     A7 08 68 FC | 	wrlong	#4, fp
14dac     18 4E 85 F1 | 	sub	fp, #24
14db0     5C 00 90 FD | 	jmp	#LR__1703
14db4                 | LR__1697
14db4     18 4E 05 F1 | 	add	fp, #24
14db8     A7 10 68 FC | 	wrlong	#8, fp
14dbc     18 4E 85 F1 | 	sub	fp, #24
14dc0     4C 00 90 FD | 	jmp	#LR__1703
14dc4                 | LR__1698
14dc4     18 4E 05 F1 | 	add	fp, #24
14dc8     A7 10 68 FC | 	wrlong	#8, fp
14dcc     18 4E 85 F1 | 	sub	fp, #24
14dd0     3C 00 90 FD | 	jmp	#LR__1703
14dd4                 | LR__1699
14dd4     18 4E 05 F1 | 	add	fp, #24
14dd8     A7 0C 68 FC | 	wrlong	#6, fp
14ddc     18 4E 85 F1 | 	sub	fp, #24
14de0     2C 00 90 FD | 	jmp	#LR__1703
14de4                 | LR__1700
14de4     18 4E 05 F1 | 	add	fp, #24
14de8     A7 10 68 FC | 	wrlong	#8, fp
14dec     18 4E 85 F1 | 	sub	fp, #24
14df0     1C 00 90 FD | 	jmp	#LR__1703
14df4                 | LR__1701
14df4     18 4E 05 F1 | 	add	fp, #24
14df8     A7 0A 68 FC | 	wrlong	#5, fp
14dfc     18 4E 85 F1 | 	sub	fp, #24
14e00     0C 00 90 FD | 	jmp	#LR__1703
14e04                 | LR__1702
14e04     18 4E 05 F1 | 	add	fp, #24
14e08     A7 18 68 FC | 	wrlong	#12, fp
14e0c     18 4E 85 F1 | 	sub	fp, #24
14e10                 | LR__1703
14e10                 | '   if esize=12 andalso t1.result.uresult<$80000 then
14e10     18 4E 05 F1 | 	add	fp, #24
14e14     A7 44 02 FB | 	rdlong	local16, fp
14e18     18 4E 85 F1 | 	sub	fp, #24
14e1c     0C 44 0E F2 | 	cmp	local16, #12 wz
14e20     74 01 90 5D |  if_ne	jmp	#LR__1708
14e24     1C 4E 05 F1 | 	add	fp, #28
14e28     A7 32 02 FB | 	rdlong	local07, fp
14e2c     1C 4E 85 F1 | 	sub	fp, #28
14e30     00 04 00 FF 
14e34     00 32 16 F2 | 	cmp	local07, ##524288 wc
14e38     5C 01 90 3D |  if_ae	jmp	#LR__1708
14e3c                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
14e3c     52 00 00 FF 
14e40     68 E5 05 F1 | 	add	objptr, ##42344
14e44     F2 44 02 FB | 	rdlong	local16, objptr
14e48     52 00 00 FF 
14e4c     68 E5 85 F1 | 	sub	objptr, ##42344
14e50     1C 44 0E F2 | 	cmp	local16, #28 wz
14e54     38 00 90 5D |  if_ne	jmp	#LR__1704
14e58     1C 4E 05 F1 | 	add	fp, #28
14e5c     A7 44 02 FB | 	rdlong	local16, fp
14e60     14 4F 05 F1 | 	add	fp, #276
14e64     A7 32 02 FB | 	rdlong	local07, fp
14e68     19 35 02 F6 | 	mov	local08, local07
14e6c     02 34 66 F0 | 	shl	local08, #2
14e70     04 4F 85 F1 | 	sub	fp, #260
14e74     A7 36 02 F6 | 	mov	local09, fp
14e78     A7 34 02 F1 | 	add	local08, fp
14e7c     1A 13 02 FB | 	rdlong	arg01, local08
14e80     00 14 06 F6 | 	mov	arg02, #0
14e84     2C 4E 85 F1 | 	sub	fp, #44
14e88     7C 67 B1 FD | 	call	#__system____builtin_atoi
14e8c     22 FB 61 FC | 	wrlong	result1, local16
14e90                 | LR__1704
14e90                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
14e90     52 00 00 FF 
14e94     68 E5 05 F1 | 	add	objptr, ##42344
14e98     F2 44 02 FB | 	rdlong	local16, objptr
14e9c     52 00 00 FF 
14ea0     68 E5 85 F1 | 	sub	objptr, ##42344
14ea4     1D 44 0E F2 | 	cmp	local16, #29 wz
14ea8     38 00 90 5D |  if_ne	jmp	#LR__1705
14eac     1C 4E 05 F1 | 	add	fp, #28
14eb0     A7 44 02 FB | 	rdlong	local16, fp
14eb4     14 4F 05 F1 | 	add	fp, #276
14eb8     A7 32 02 FB | 	rdlong	local07, fp
14ebc     19 35 02 F6 | 	mov	local08, local07
14ec0     02 34 66 F0 | 	shl	local08, #2
14ec4     04 4F 85 F1 | 	sub	fp, #260
14ec8     A7 36 02 F6 | 	mov	local09, fp
14ecc     A7 34 02 F1 | 	add	local08, fp
14ed0     1A 13 02 FB | 	rdlong	arg01, local08
14ed4     00 14 06 F6 | 	mov	arg02, #0
14ed8     2C 4E 85 F1 | 	sub	fp, #44
14edc     28 67 B1 FD | 	call	#__system____builtin_atoi
14ee0     22 FB 61 FC | 	wrlong	result1, local16
14ee4                 | LR__1705
14ee4                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
14ee4     52 00 00 FF 
14ee8     68 E5 05 F1 | 	add	objptr, ##42344
14eec     F2 44 02 FB | 	rdlong	local16, objptr
14ef0     52 00 00 FF 
14ef4     68 E5 85 F1 | 	sub	objptr, ##42344
14ef8     1E 44 0E F2 | 	cmp	local16, #30 wz
14efc     3C 00 90 5D |  if_ne	jmp	#LR__1706
14f00     30 4F 05 F1 | 	add	fp, #304
14f04     A7 32 02 FB | 	rdlong	local07, fp
14f08     02 32 66 F0 | 	shl	local07, #2
14f0c     04 4F 85 F1 | 	sub	fp, #260
14f10     A7 34 02 F6 | 	mov	local08, fp
14f14     A7 32 02 F1 | 	add	local07, fp
14f18     19 13 02 FB | 	rdlong	arg01, local07
14f1c     2C 4E 85 F1 | 	sub	fp, #44
14f20     7C 68 B1 FD | 	call	#__system____builtin_atof
14f24     28 4E 05 F1 | 	add	fp, #40
14f28     A7 FA 61 FC | 	wrlong	result1, fp
14f2c     0C 4E 85 F1 | 	sub	fp, #12
14f30     A7 44 02 FB | 	rdlong	local16, fp
14f34     1C 4E 85 F1 | 	sub	fp, #28
14f38     22 FB 61 FC | 	wrlong	result1, local16
14f3c                 | LR__1706
14f3c                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
14f3c     52 00 00 FF 
14f40     68 E5 05 F1 | 	add	objptr, ##42344
14f44     F2 44 02 FB | 	rdlong	local16, objptr
14f48     52 00 00 FF 
14f4c     68 E5 85 F1 | 	sub	objptr, ##42344
14f50     2B 44 0E F2 | 	cmp	local16, #43 wz
14f54     18 00 90 5D |  if_ne	jmp	#LR__1707
14f58     1C 4E 05 F1 | 	add	fp, #28
14f5c     A7 12 02 FB | 	rdlong	arg01, fp
14f60     0C 4E 85 F1 | 	sub	fp, #12
14f64     A7 14 02 FB | 	rdlong	arg02, fp
14f68     10 4E 85 F1 | 	sub	fp, #16
14f6c     09 15 62 FC | 	wrlong	arg02, arg01
14f70                 | LR__1707
14f70     1C 4E 05 F1 | 	add	fp, #28
14f74     A7 12 02 FB | 	rdlong	arg01, fp
14f78     1C 4E 85 F1 | 	sub	fp, #28
14f7c     08 12 06 F1 | 	add	arg01, #8
14f80     52 00 00 FF 
14f84     68 E5 05 F1 | 	add	objptr, ##42344
14f88     F2 14 02 FB | 	rdlong	arg02, objptr
14f8c     52 00 00 FF 
14f90     68 E5 85 F1 | 	sub	objptr, ##42344
14f94     09 15 62 FC | 	wrlong	arg02, arg01
14f98                 | LR__1708
14f98                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
14f98     18 4E 05 F1 | 	add	fp, #24
14f9c     A7 44 02 FB | 	rdlong	local16, fp
14fa0     18 4E 85 F1 | 	sub	fp, #24
14fa4     0C 44 0E F2 | 	cmp	local16, #12 wz
14fa8     94 01 90 5D |  if_ne	jmp	#LR__1713
14fac     1C 4E 05 F1 | 	add	fp, #28
14fb0     A7 32 02 FB | 	rdlong	local07, fp
14fb4     1C 4E 85 F1 | 	sub	fp, #28
14fb8     00 04 00 FF 
14fbc     00 32 16 F2 | 	cmp	local07, ##524288 wc
14fc0     7C 01 90 CD |  if_b	jmp	#LR__1713
14fc4                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
14fc4     52 00 00 FF 
14fc8     68 E5 05 F1 | 	add	objptr, ##42344
14fcc     F2 44 02 FB | 	rdlong	local16, objptr
14fd0     52 00 00 FF 
14fd4     68 E5 85 F1 | 	sub	objptr, ##42344
14fd8     1C 44 0E F2 | 	cmp	local16, #28 wz
14fdc     40 00 90 5D |  if_ne	jmp	#LR__1709
14fe0     1C 4E 05 F1 | 	add	fp, #28
14fe4     A7 44 02 FB | 	rdlong	local16, fp
14fe8     14 4F 05 F1 | 	add	fp, #276
14fec     A7 32 02 FB | 	rdlong	local07, fp
14ff0     19 35 02 F6 | 	mov	local08, local07
14ff4     02 34 66 F0 | 	shl	local08, #2
14ff8     04 4F 85 F1 | 	sub	fp, #260
14ffc     A7 36 02 F6 | 	mov	local09, fp
15000     A7 34 02 F1 | 	add	local08, fp
15004     1A 13 02 FB | 	rdlong	arg01, local08
15008     00 14 06 F6 | 	mov	arg02, #0
1500c     2C 4E 85 F1 | 	sub	fp, #44
15010     F4 65 B1 FD | 	call	#__system____builtin_atoi
15014     FD 14 02 F6 | 	mov	arg02, result1
15018     22 13 02 F6 | 	mov	arg01, local16
1501c     3C F8 B0 FD | 	call	#_pslpoke
15020                 | LR__1709
15020                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
15020     52 00 00 FF 
15024     68 E5 05 F1 | 	add	objptr, ##42344
15028     F2 44 02 FB | 	rdlong	local16, objptr
1502c     52 00 00 FF 
15030     68 E5 85 F1 | 	sub	objptr, ##42344
15034     1D 44 0E F2 | 	cmp	local16, #29 wz
15038     40 00 90 5D |  if_ne	jmp	#LR__1710
1503c     1C 4E 05 F1 | 	add	fp, #28
15040     A7 44 02 FB | 	rdlong	local16, fp
15044     14 4F 05 F1 | 	add	fp, #276
15048     A7 32 02 FB | 	rdlong	local07, fp
1504c     19 35 02 F6 | 	mov	local08, local07
15050     02 34 66 F0 | 	shl	local08, #2
15054     04 4F 85 F1 | 	sub	fp, #260
15058     A7 36 02 F6 | 	mov	local09, fp
1505c     A7 34 02 F1 | 	add	local08, fp
15060     1A 13 02 FB | 	rdlong	arg01, local08
15064     00 14 06 F6 | 	mov	arg02, #0
15068     2C 4E 85 F1 | 	sub	fp, #44
1506c     98 65 B1 FD | 	call	#__system____builtin_atoi
15070     FD 14 02 F6 | 	mov	arg02, result1
15074     22 13 02 F6 | 	mov	arg01, local16
15078     E0 F7 B0 FD | 	call	#_pslpoke
1507c                 | LR__1710
1507c                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1507c     52 00 00 FF 
15080     68 E5 05 F1 | 	add	objptr, ##42344
15084     F2 44 02 FB | 	rdlong	local16, objptr
15088     52 00 00 FF 
1508c     68 E5 85 F1 | 	sub	objptr, ##42344
15090     1E 44 0E F2 | 	cmp	local16, #30 wz
15094     4C 00 90 5D |  if_ne	jmp	#LR__1711
15098     30 4F 05 F1 | 	add	fp, #304
1509c     A7 32 02 FB | 	rdlong	local07, fp
150a0     02 32 66 F0 | 	shl	local07, #2
150a4     04 4F 85 F1 | 	sub	fp, #260
150a8     A7 34 02 F6 | 	mov	local08, fp
150ac     A7 32 02 F1 | 	add	local07, fp
150b0     19 13 02 FB | 	rdlong	arg01, local07
150b4     2C 4E 85 F1 | 	sub	fp, #44
150b8     E4 66 B1 FD | 	call	#__system____builtin_atof
150bc     28 4E 05 F1 | 	add	fp, #40
150c0     A7 FA 61 FC | 	wrlong	result1, fp
150c4     0C 4E 85 F1 | 	sub	fp, #12
150c8     A7 44 02 FB | 	rdlong	local16, fp
150cc     0C 4E 05 F1 | 	add	fp, #12
150d0     A7 12 02 F6 | 	mov	arg01, fp
150d4     28 4E 85 F1 | 	sub	fp, #40
150d8     09 15 02 FB | 	rdlong	arg02, arg01
150dc     22 13 02 F6 | 	mov	arg01, local16
150e0     78 F7 B0 FD | 	call	#_pslpoke
150e4                 | LR__1711
150e4                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
150e4     52 00 00 FF 
150e8     68 E5 05 F1 | 	add	objptr, ##42344
150ec     F2 44 02 FB | 	rdlong	local16, objptr
150f0     52 00 00 FF 
150f4     68 E5 85 F1 | 	sub	objptr, ##42344
150f8     2B 44 0E F2 | 	cmp	local16, #43 wz
150fc     18 00 90 5D |  if_ne	jmp	#LR__1712
15100     1C 4E 05 F1 | 	add	fp, #28
15104     A7 12 02 FB | 	rdlong	arg01, fp
15108     0C 4E 85 F1 | 	sub	fp, #12
1510c     A7 14 02 FB | 	rdlong	arg02, fp
15110     10 4E 85 F1 | 	sub	fp, #16
15114     44 F7 B0 FD | 	call	#_pslpoke
15118                 | LR__1712
15118     1C 4E 05 F1 | 	add	fp, #28
1511c     A7 12 02 FB | 	rdlong	arg01, fp
15120     1C 4E 85 F1 | 	sub	fp, #28
15124     08 12 06 F1 | 	add	arg01, #8
15128     52 00 00 FF 
1512c     68 E5 05 F1 | 	add	objptr, ##42344
15130     F2 14 02 FB | 	rdlong	arg02, objptr
15134     52 00 00 FF 
15138     68 E5 85 F1 | 	sub	objptr, ##42344
1513c     1C F7 B0 FD | 	call	#_pslpoke
15140                 | LR__1713
15140                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
15140     18 4E 05 F1 | 	add	fp, #24
15144     A7 44 02 FB | 	rdlong	local16, fp
15148     18 4E 85 F1 | 	sub	fp, #24
1514c     05 44 0E F2 | 	cmp	local16, #5 wz
15150     52 00 00 AF 
15154     68 E5 05 A1 |  if_e	add	objptr, ##42344
15158     F2 42 02 AB |  if_e	rdlong	local15, objptr
1515c     52 00 00 AF 
15160     68 E5 85 A1 |  if_e	sub	objptr, ##42344
15164     2B 42 0E A2 |  if_e	cmp	local15, #43 wz
15168     18 00 90 5D |  if_ne	jmp	#LR__1714
1516c     1C 4E 05 F1 | 	add	fp, #28
15170     A7 12 02 FB | 	rdlong	arg01, fp
15174     0C 4E 85 F1 | 	sub	fp, #12
15178     A7 14 02 FB | 	rdlong	arg02, fp
1517c     10 4E 85 F1 | 	sub	fp, #16
15180     D8 F6 B0 FD | 	call	#_pslpoke
15184                 | LR__1714
15184                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
15184     18 4E 05 F1 | 	add	fp, #24
15188     A7 44 02 FB | 	rdlong	local16, fp
1518c     18 4E 85 F1 | 	sub	fp, #24
15190     04 44 0E F2 | 	cmp	local16, #4 wz
15194     54 00 90 5D |  if_ne	jmp	#LR__1715
15198     52 00 00 FF 
1519c     68 E5 05 F1 | 	add	objptr, ##42344
151a0     F2 42 02 FB | 	rdlong	local15, objptr
151a4     52 00 00 FF 
151a8     68 E5 85 F1 | 	sub	objptr, ##42344
151ac     2B 42 0E F2 | 	cmp	local15, #43 wz
151b0     38 00 90 AD |  if_e	jmp	#LR__1715
151b4     1C 4E 05 F1 | 	add	fp, #28
151b8     A7 44 02 FB | 	rdlong	local16, fp
151bc     14 4F 05 F1 | 	add	fp, #276
151c0     A7 34 02 FB | 	rdlong	local08, fp
151c4     02 34 66 F0 | 	shl	local08, #2
151c8     04 4F 85 F1 | 	sub	fp, #260
151cc     A7 34 02 F1 | 	add	local08, fp
151d0     1A 13 02 FB | 	rdlong	arg01, local08
151d4     00 14 06 F6 | 	mov	arg02, #0
151d8     2C 4E 85 F1 | 	sub	fp, #44
151dc     28 64 B1 FD | 	call	#__system____builtin_atoi
151e0     FD 14 02 F6 | 	mov	arg02, result1
151e4     22 13 02 F6 | 	mov	arg01, local16
151e8     70 F6 B0 FD | 	call	#_pslpoke
151ec                 | LR__1715
151ec                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
151ec     18 4E 05 F1 | 	add	fp, #24
151f0     A7 44 02 FB | 	rdlong	local16, fp
151f4     18 4E 85 F1 | 	sub	fp, #24
151f8     02 44 0E F2 | 	cmp	local16, #2 wz
151fc     54 00 90 5D |  if_ne	jmp	#LR__1716
15200     52 00 00 FF 
15204     68 E5 05 F1 | 	add	objptr, ##42344
15208     F2 42 02 FB | 	rdlong	local15, objptr
1520c     52 00 00 FF 
15210     68 E5 85 F1 | 	sub	objptr, ##42344
15214     2B 42 0E F2 | 	cmp	local15, #43 wz
15218     38 00 90 AD |  if_e	jmp	#LR__1716
1521c     1C 4E 05 F1 | 	add	fp, #28
15220     A7 44 02 FB | 	rdlong	local16, fp
15224     14 4F 05 F1 | 	add	fp, #276
15228     A7 34 02 FB | 	rdlong	local08, fp
1522c     02 34 66 F0 | 	shl	local08, #2
15230     04 4F 85 F1 | 	sub	fp, #260
15234     A7 34 02 F1 | 	add	local08, fp
15238     1A 13 02 FB | 	rdlong	arg01, local08
1523c     00 14 06 F6 | 	mov	arg02, #0
15240     2C 4E 85 F1 | 	sub	fp, #44
15244     C0 63 B1 FD | 	call	#__system____builtin_atoi
15248     FD 14 02 F6 | 	mov	arg02, result1
1524c     22 13 02 F6 | 	mov	arg01, local16
15250     50 F6 B0 FD | 	call	#_psdpoke
15254                 | LR__1716
15254                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
15254     18 4E 05 F1 | 	add	fp, #24
15258     A7 44 02 FB | 	rdlong	local16, fp
1525c     18 4E 85 F1 | 	sub	fp, #24
15260     01 44 0E F2 | 	cmp	local16, #1 wz
15264     54 00 90 5D |  if_ne	jmp	#LR__1717
15268     52 00 00 FF 
1526c     68 E5 05 F1 | 	add	objptr, ##42344
15270     F2 42 02 FB | 	rdlong	local15, objptr
15274     52 00 00 FF 
15278     68 E5 85 F1 | 	sub	objptr, ##42344
1527c     2B 42 0E F2 | 	cmp	local15, #43 wz
15280     38 00 90 AD |  if_e	jmp	#LR__1717
15284     1C 4E 05 F1 | 	add	fp, #28
15288     A7 44 02 FB | 	rdlong	local16, fp
1528c     14 4F 05 F1 | 	add	fp, #276
15290     A7 34 02 FB | 	rdlong	local08, fp
15294     02 34 66 F0 | 	shl	local08, #2
15298     04 4F 85 F1 | 	sub	fp, #260
1529c     A7 34 02 F1 | 	add	local08, fp
152a0     1A 13 02 FB | 	rdlong	arg01, local08
152a4     00 14 06 F6 | 	mov	arg02, #0
152a8     2C 4E 85 F1 | 	sub	fp, #44
152ac     58 63 B1 FD | 	call	#__system____builtin_atoi
152b0     FD 14 02 F6 | 	mov	arg02, result1
152b4     22 13 02 F6 | 	mov	arg01, local16
152b8     30 F6 B0 FD | 	call	#_pspoke
152bc                 | LR__1717
152bc                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
152bc     18 4E 05 F1 | 	add	fp, #24
152c0     A7 44 02 FB | 	rdlong	local16, fp
152c4     18 4E 85 F1 | 	sub	fp, #24
152c8     06 44 0E F2 | 	cmp	local16, #6 wz
152cc     64 00 90 5D |  if_ne	jmp	#LR__1718
152d0     52 00 00 FF 
152d4     68 E5 05 F1 | 	add	objptr, ##42344
152d8     F2 42 02 FB | 	rdlong	local15, objptr
152dc     52 00 00 FF 
152e0     68 E5 85 F1 | 	sub	objptr, ##42344
152e4     2B 42 0E F2 | 	cmp	local15, #43 wz
152e8     48 00 90 AD |  if_e	jmp	#LR__1718
152ec     30 4F 05 F1 | 	add	fp, #304
152f0     A7 32 02 FB | 	rdlong	local07, fp
152f4     02 32 66 F0 | 	shl	local07, #2
152f8     04 4F 85 F1 | 	sub	fp, #260
152fc     A7 32 02 F1 | 	add	local07, fp
15300     19 13 02 FB | 	rdlong	arg01, local07
15304     2C 4E 85 F1 | 	sub	fp, #44
15308     94 64 B1 FD | 	call	#__system____builtin_atof
1530c     28 4E 05 F1 | 	add	fp, #40
15310     A7 FA 61 FC | 	wrlong	result1, fp
15314     0C 4E 85 F1 | 	sub	fp, #12
15318     A7 44 02 FB | 	rdlong	local16, fp
1531c     0C 4E 05 F1 | 	add	fp, #12
15320     A7 12 02 F6 | 	mov	arg01, fp
15324     28 4E 85 F1 | 	sub	fp, #40
15328     09 15 02 FB | 	rdlong	arg02, arg01
1532c     22 13 02 F6 | 	mov	arg01, local16
15330     28 F5 B0 FD | 	call	#_pslpoke
15334                 | LR__1718
15334     30 4F 05 F1 | 	add	fp, #304
15338     A7 42 02 FB | 	rdlong	local15, fp
1533c     01 42 06 F1 | 	add	local15, #1
15340     A7 42 62 FC | 	wrlong	local15, fp
15344     30 4F 85 F1 | 	sub	fp, #304
15348     E4 F6 9F FD | 	jmp	#LR__1683
1534c                 | LR__1719
1534c                 | LR__1720
1534c     A7 F0 03 F6 | 	mov	ptra, fp
15350     B2 00 A0 FD | 	call	#popregs_
15354                 | _do_input_ret
15354     2D 00 64 FD | 	ret
15358                 | 
15358                 | ' 
15358                 | ' ' ----------------  left$
15358                 | ' 
15358                 | ' sub do_left
15358                 | _do_left
15358     00 4A 05 F6 | 	mov	COUNT_, #0
1535c     A8 00 A0 FD | 	call	#pushregs_
15360     14 F0 07 F1 | 	add	ptra, #20
15364     4A 00 00 FF 
15368     A0 E4 05 F1 | 	add	objptr, ##38048
1536c     F2 16 02 FB | 	rdlong	arg03, objptr
15370     0B 15 02 F6 | 	mov	arg02, arg03
15374     01 14 66 F0 | 	shl	arg02, #1
15378     0B 15 02 F1 | 	add	arg02, arg03
1537c     02 14 66 F0 | 	shl	arg02, #2
15380     03 00 00 FF 
15384     04 E4 85 F1 | 	sub	objptr, ##1540
15388     F2 14 02 F1 | 	add	arg02, objptr
1538c     0A 17 02 FB | 	rdlong	arg03, arg02
15390     0C 4E 05 F1 | 	add	fp, #12
15394     A7 16 62 FC | 	wrlong	arg03, fp
15398                 | ' 
15398                 | ' numpar=compiledline(lineptr_e).result.uresult
15398                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
15398     0C 4E 85 F1 | 	sub	fp, #12
1539c     02 16 0E F2 | 	cmp	arg03, #2 wz
153a0     47 00 00 FF 
153a4     9C E4 85 F1 | 	sub	objptr, ##36508
153a8     40 00 90 AD |  if_e	jmp	#LR__1730
153ac     00 12 06 F6 | 	mov	arg01, #0
153b0     10 8A B1 FD | 	call	#__system___getiolock_0620
153b4     FD 12 02 F6 | 	mov	arg01, result1
153b8     58 2D B1 FD | 	call	#__system___lockmem
153bc     C3 01 00 FF 
153c0     E4 14 06 F6 | 	mov	arg02, ##@LR__6071
153c4     00 12 06 F6 | 	mov	arg01, #0
153c8     00 16 06 F6 | 	mov	arg03, #0
153cc     3C 3A B1 FD | 	call	#__system___basic_print_string
153d0     00 12 06 F6 | 	mov	arg01, #0
153d4     EC 89 B1 FD | 	call	#__system___getiolock_0620
153d8     FD 00 68 FC | 	wrlong	#0, result1
153dc     27 12 06 F6 | 	mov	arg01, #39
153e0     00 14 06 F6 | 	mov	arg02, #0
153e4     D4 F2 B0 FD | 	call	#_printerror
153e8     EC 00 90 FD | 	jmp	#LR__1733
153ec                 | LR__1730
153ec     30 84 BF FD | 	call	#_pop
153f0     FF 16 02 F6 | 	mov	arg03, result3
153f4     A7 FA 61 FC | 	wrlong	result1, fp
153f8     04 4E 05 F1 | 	add	fp, #4
153fc     A7 FC 61 FC | 	wrlong	result2, fp
15400     04 4E 05 F1 | 	add	fp, #4
15404     A7 16 62 FC | 	wrlong	arg03, fp
15408     08 4E 85 F1 | 	sub	fp, #8
1540c     A7 12 02 F6 | 	mov	arg01, fp
15410     F0 85 BF FD | 	call	#_converttoint
15414     FD 16 02 F6 | 	mov	arg03, result1
15418     10 4E 05 F1 | 	add	fp, #16
1541c     A7 16 62 FC | 	wrlong	arg03, fp
15420     10 4E 85 F1 | 	sub	fp, #16
15424     F8 83 BF FD | 	call	#_pop
15428     FF 16 02 F6 | 	mov	arg03, result3
1542c     A7 FA 61 FC | 	wrlong	result1, fp
15430     04 4E 05 F1 | 	add	fp, #4
15434     A7 FC 61 FC | 	wrlong	result2, fp
15438     04 4E 05 F1 | 	add	fp, #4
1543c     A7 16 62 FC | 	wrlong	arg03, fp
15440                 | ' t1=pop() : arg=converttoint(t1)
15440                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15440     08 4E 85 F1 | 	sub	fp, #8
15444     2B 16 0E F2 | 	cmp	arg03, #43 wz
15448     18 00 90 5D |  if_ne	jmp	#LR__1731
1544c     A7 12 02 FB | 	rdlong	arg01, fp
15450     44 85 BF FD | 	call	#_convertstring
15454     A7 FA 61 FC | 	wrlong	result1, fp
15458     08 4E 05 F1 | 	add	fp, #8
1545c     A7 3E 68 FC | 	wrlong	#31, fp
15460     08 4E 85 F1 | 	sub	fp, #8
15464                 | LR__1731
15464                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
15464     08 4E 05 F1 | 	add	fp, #8
15468     A7 16 02 FB | 	rdlong	arg03, fp
1546c     08 4E 85 F1 | 	sub	fp, #8
15470     1F 16 0E F2 | 	cmp	arg03, #31 wz
15474     40 00 90 AD |  if_e	jmp	#LR__1732
15478     00 12 06 F6 | 	mov	arg01, #0
1547c     44 89 B1 FD | 	call	#__system___getiolock_0620
15480     FD 12 02 F6 | 	mov	arg01, result1
15484     8C 2C B1 FD | 	call	#__system___lockmem
15488     C3 01 00 FF 
1548c     EC 14 06 F6 | 	mov	arg02, ##@LR__6072
15490     00 12 06 F6 | 	mov	arg01, #0
15494     00 16 06 F6 | 	mov	arg03, #0
15498     70 39 B1 FD | 	call	#__system___basic_print_string
1549c     00 12 06 F6 | 	mov	arg01, #0
154a0     20 89 B1 FD | 	call	#__system___getiolock_0620
154a4     FD 00 68 FC | 	wrlong	#0, result1
154a8     0F 12 06 F6 | 	mov	arg01, #15
154ac     00 14 06 F6 | 	mov	arg02, #0
154b0     08 F2 B0 FD | 	call	#_printerror
154b4     20 00 90 FD | 	jmp	#LR__1733
154b8                 | LR__1732
154b8     A7 12 02 FB | 	rdlong	arg01, fp
154bc     10 4E 05 F1 | 	add	fp, #16
154c0     A7 14 02 FB | 	rdlong	arg02, fp
154c4     10 4E 85 F1 | 	sub	fp, #16
154c8     C8 4C B1 FD | 	call	#__system__Left_S
154cc     A7 FA 61 FC | 	wrlong	result1, fp
154d0     A7 12 02 F6 | 	mov	arg01, fp
154d4     E0 83 BF FD | 	call	#_push
154d8                 | LR__1733
154d8     A7 F0 03 F6 | 	mov	ptra, fp
154dc     B2 00 A0 FD | 	call	#popregs_
154e0                 | _do_left_ret
154e0     2D 00 64 FD | 	ret
154e4                 | 
154e4                 | ' 
154e4                 | ' ' ----------------  len
154e4                 | ' 
154e4                 | ' sub do_len
154e4                 | _do_len
154e4     02 4A 05 F6 | 	mov	COUNT_, #2
154e8     A8 00 A0 FD | 	call	#pushregs_
154ec     14 F0 07 F1 | 	add	ptra, #20
154f0     4A 00 00 FF 
154f4     A0 E4 05 F1 | 	add	objptr, ##38048
154f8     F2 26 02 FB | 	rdlong	local01, objptr
154fc     13 17 02 F6 | 	mov	arg03, local01
15500     01 16 66 F0 | 	shl	arg03, #1
15504     13 17 02 F1 | 	add	arg03, local01
15508     02 16 66 F0 | 	shl	arg03, #2
1550c     03 00 00 FF 
15510     04 E4 85 F1 | 	sub	objptr, ##1540
15514     F2 16 02 F1 | 	add	arg03, objptr
15518     0B 17 02 FB | 	rdlong	arg03, arg03
1551c     0C 4E 05 F1 | 	add	fp, #12
15520     A7 16 62 FC | 	wrlong	arg03, fp
15524                 | ' 
15524                 | ' numpar=compiledline(lineptr_e).result.uresult
15524                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
15524     0C 4E 85 F1 | 	sub	fp, #12
15528     02 16 16 F2 | 	cmp	arg03, #2 wc
1552c     47 00 00 FF 
15530     9C E4 85 F1 | 	sub	objptr, ##36508
15534     0C 4E 05 C1 |  if_b	add	fp, #12
15538     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1553c     0C 4E 85 C1 |  if_b	sub	fp, #12
15540     40 00 90 4D |  if_c_and_nz	jmp	#LR__1740
15544     00 12 06 F6 | 	mov	arg01, #0
15548     78 88 B1 FD | 	call	#__system___getiolock_0620
1554c     FD 12 02 F6 | 	mov	arg01, result1
15550     C0 2B B1 FD | 	call	#__system___lockmem
15554     C3 01 00 FF 
15558     F4 14 06 F6 | 	mov	arg02, ##@LR__6073
1555c     00 12 06 F6 | 	mov	arg01, #0
15560     00 16 06 F6 | 	mov	arg03, #0
15564     A4 38 B1 FD | 	call	#__system___basic_print_string
15568     00 12 06 F6 | 	mov	arg01, #0
1556c     54 88 B1 FD | 	call	#__system___getiolock_0620
15570     FD 00 68 FC | 	wrlong	#0, result1
15574     27 12 06 F6 | 	mov	arg01, #39
15578     00 14 06 F6 | 	mov	arg02, #0
1557c     3C F1 B0 FD | 	call	#_printerror
15580     C8 00 90 FD | 	jmp	#LR__1745
15584                 | LR__1740
15584     98 82 BF FD | 	call	#_pop
15588     FF 16 02 F6 | 	mov	arg03, result3
1558c     A7 FA 61 FC | 	wrlong	result1, fp
15590     04 4E 05 F1 | 	add	fp, #4
15594     A7 FC 61 FC | 	wrlong	result2, fp
15598     04 4E 05 F1 | 	add	fp, #4
1559c     A7 16 62 FC | 	wrlong	arg03, fp
155a0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
155a0     08 4E 85 F1 | 	sub	fp, #8
155a4     2B 16 0E F2 | 	cmp	arg03, #43 wz
155a8     18 00 90 5D |  if_ne	jmp	#LR__1741
155ac     A7 12 02 FB | 	rdlong	arg01, fp
155b0     E4 83 BF FD | 	call	#_convertstring
155b4     A7 FA 61 FC | 	wrlong	result1, fp
155b8     08 4E 05 F1 | 	add	fp, #8
155bc     A7 3E 68 FC | 	wrlong	#31, fp
155c0     08 4E 85 F1 | 	sub	fp, #8
155c4                 | LR__1741
155c4                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
155c4     08 4E 05 F1 | 	add	fp, #8
155c8     A7 16 02 FB | 	rdlong	arg03, fp
155cc     08 4E 85 F1 | 	sub	fp, #8
155d0     1F 16 0E F2 | 	cmp	arg03, #31 wz
155d4     40 00 90 AD |  if_e	jmp	#LR__1742
155d8     00 12 06 F6 | 	mov	arg01, #0
155dc     E4 87 B1 FD | 	call	#__system___getiolock_0620
155e0     FD 12 02 F6 | 	mov	arg01, result1
155e4     2C 2B B1 FD | 	call	#__system___lockmem
155e8     C3 01 00 FF 
155ec     FA 14 06 F6 | 	mov	arg02, ##@LR__6074
155f0     00 12 06 F6 | 	mov	arg01, #0
155f4     00 16 06 F6 | 	mov	arg03, #0
155f8     10 38 B1 FD | 	call	#__system___basic_print_string
155fc     00 12 06 F6 | 	mov	arg01, #0
15600     C0 87 B1 FD | 	call	#__system___getiolock_0620
15604     FD 00 68 FC | 	wrlong	#0, result1
15608     0F 12 06 F6 | 	mov	arg01, #15
1560c     00 14 06 F6 | 	mov	arg02, #0
15610     A8 F0 B0 FD | 	call	#_printerror
15614     34 00 90 FD | 	jmp	#LR__1745
15618                 | LR__1742
15618     A7 12 02 FB | 	rdlong	arg01, fp
1561c     09 29 02 F6 | 	mov	local02, arg01
15620     97 06 48 FB | 	callpa	#(@LR__1744-@LR__1743)>>2,fcache_load_ptr_
15624                 | LR__1743
15624     14 FB C9 FA | 	rdbyte	result1, local02 wz
15628     01 28 06 51 |  if_ne	add	local02, #1
1562c     F4 FF 9F 5D |  if_ne	jmp	#LR__1743
15630                 | LR__1744
15630     09 29 82 F1 | 	sub	local02, arg01
15634     A7 28 62 FC | 	wrlong	local02, fp
15638     08 4E 05 F1 | 	add	fp, #8
1563c     A7 38 68 FC | 	wrlong	#28, fp
15640     08 4E 85 F1 | 	sub	fp, #8
15644     A7 12 02 F6 | 	mov	arg01, fp
15648     6C 82 BF FD | 	call	#_push
1564c                 | LR__1745
1564c     A7 F0 03 F6 | 	mov	ptra, fp
15650     B2 00 A0 FD | 	call	#popregs_
15654                 | _do_len_ret
15654     2D 00 64 FD | 	ret
15658                 | 
15658                 | ' 
15658                 | ' ' ----------------  list
15658                 | ' 
15658                 | ' sub do_list
15658                 | _do_list
15658     02 4A 05 F6 | 	mov	COUNT_, #2
1565c     A8 00 A0 FD | 	call	#pushregs_
15660     B8 F0 07 F1 | 	add	ptra, #184
15664     04 4E 05 F1 | 	add	fp, #4
15668     A7 00 68 FC | 	wrlong	#0, fp
1566c     04 4E 05 F1 | 	add	fp, #4
15670     FF FF BF FF 
15674     A7 FE 6B FC | 	wrlong	##2147483647, fp
15678     08 4E 85 F1 | 	sub	fp, #8
1567c     4A 00 00 FF 
15680     A0 E4 05 F1 | 	add	objptr, ##38048
15684     F2 26 02 FB | 	rdlong	local01, objptr
15688     13 17 02 F6 | 	mov	arg03, local01
1568c     01 16 66 F0 | 	shl	arg03, #1
15690     13 17 02 F1 | 	add	arg03, local01
15694     02 16 66 F0 | 	shl	arg03, #2
15698     03 00 00 FF 
1569c     04 E4 85 F1 | 	sub	objptr, ##1540
156a0     F2 16 02 F1 | 	add	arg03, objptr
156a4     0B 17 02 FB | 	rdlong	arg03, arg03
156a8     A7 16 62 FC | 	wrlong	arg03, fp
156ac                 | ' 
156ac                 | ' startline=0 : endline=$7FFFFFFF
156ac                 | ' numpar=compiledline(lineptr_e).result.uresult
156ac                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
156ac     01 16 0E F2 | 	cmp	arg03, #1 wz
156b0     47 00 00 FF 
156b4     9C E4 85 F1 | 	sub	objptr, ##36508
156b8     3C 00 90 5D |  if_ne	jmp	#LR__1750
156bc     60 81 BF FD | 	call	#_pop
156c0     FF 26 02 F6 | 	mov	local01, result3
156c4     0C 4E 05 F1 | 	add	fp, #12
156c8     A7 FA 61 FC | 	wrlong	result1, fp
156cc     04 4E 05 F1 | 	add	fp, #4
156d0     A7 FC 61 FC | 	wrlong	result2, fp
156d4     04 4E 05 F1 | 	add	fp, #4
156d8     A7 26 62 FC | 	wrlong	local01, fp
156dc     08 4E 85 F1 | 	sub	fp, #8
156e0     A7 12 02 F6 | 	mov	arg01, fp
156e4     0C 4E 85 F1 | 	sub	fp, #12
156e8     18 83 BF FD | 	call	#_converttoint
156ec     04 4E 05 F1 | 	add	fp, #4
156f0     A7 FA 61 FC | 	wrlong	result1, fp
156f4     04 4E 85 F1 | 	sub	fp, #4
156f8                 | LR__1750
156f8                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
156f8     A7 16 02 FB | 	rdlong	arg03, fp
156fc     02 16 0E F2 | 	cmp	arg03, #2 wz
15700     7C 00 90 5D |  if_ne	jmp	#LR__1751
15704     18 81 BF FD | 	call	#_pop
15708     FF 26 02 F6 | 	mov	local01, result3
1570c     0C 4E 05 F1 | 	add	fp, #12
15710     A7 FA 61 FC | 	wrlong	result1, fp
15714     04 4E 05 F1 | 	add	fp, #4
15718     A7 FC 61 FC | 	wrlong	result2, fp
1571c     04 4E 05 F1 | 	add	fp, #4
15720     A7 26 62 FC | 	wrlong	local01, fp
15724     08 4E 85 F1 | 	sub	fp, #8
15728     A7 12 02 F6 | 	mov	arg01, fp
1572c     0C 4E 85 F1 | 	sub	fp, #12
15730     D0 82 BF FD | 	call	#_converttoint
15734     FD 26 02 F6 | 	mov	local01, result1
15738     08 4E 05 F1 | 	add	fp, #8
1573c     A7 26 62 FC | 	wrlong	local01, fp
15740     08 4E 85 F1 | 	sub	fp, #8
15744     D8 80 BF FD | 	call	#_pop
15748     FF 26 02 F6 | 	mov	local01, result3
1574c     0C 4E 05 F1 | 	add	fp, #12
15750     A7 FA 61 FC | 	wrlong	result1, fp
15754     04 4E 05 F1 | 	add	fp, #4
15758     A7 FC 61 FC | 	wrlong	result2, fp
1575c     04 4E 05 F1 | 	add	fp, #4
15760     A7 26 62 FC | 	wrlong	local01, fp
15764     08 4E 85 F1 | 	sub	fp, #8
15768     A7 12 02 F6 | 	mov	arg01, fp
1576c     0C 4E 85 F1 | 	sub	fp, #12
15770     90 82 BF FD | 	call	#_converttoint
15774     04 4E 05 F1 | 	add	fp, #4
15778     A7 FA 61 FC | 	wrlong	result1, fp
1577c     04 4E 85 F1 | 	sub	fp, #4
15780                 | LR__1751
15780                 | ' 
15780                 | ' 
15780                 | ' print
15780     00 12 06 F6 | 	mov	arg01, #0
15784     3C 86 B1 FD | 	call	#__system___getiolock_0620
15788     FD 12 02 F6 | 	mov	arg01, result1
1578c     84 29 B1 FD | 	call	#__system___lockmem
15790     00 12 06 F6 | 	mov	arg01, #0
15794     0A 14 06 F6 | 	mov	arg02, #10
15798     00 16 06 F6 | 	mov	arg03, #0
1579c     14 36 B1 FD | 	call	#__system___basic_print_char
157a0     00 12 06 F6 | 	mov	arg01, #0
157a4     1C 86 B1 FD | 	call	#__system___getiolock_0620
157a8     FD 00 68 FC | 	wrlong	#0, result1
157ac     4A 00 00 FF 
157b0     A8 E4 05 F1 | 	add	objptr, ##38056
157b4     F2 28 02 FB | 	rdlong	local02, objptr
157b8     08 00 00 FF 
157bc     CC E4 05 F1 | 	add	objptr, ##4300
157c0     F2 28 62 FC | 	wrlong	local02, objptr
157c4     52 00 00 FF 
157c8     74 E5 85 F1 | 	sub	objptr, ##42356
157cc                 | ' do 
157cc                 | LR__1752
157cc     20 4E 05 F1 | 	add	fp, #32
157d0     A7 12 02 F6 | 	mov	arg01, fp
157d4     20 4E 85 F1 | 	sub	fp, #32
157d8     52 00 00 FF 
157dc     74 E5 05 F1 | 	add	objptr, ##42356
157e0     F2 14 02 FB | 	rdlong	arg02, objptr
157e4     18 16 06 F6 | 	mov	arg03, #24
157e8     47 00 00 FF 
157ec     A8 E4 85 F1 | 	sub	objptr, ##36520
157f0     7C 1C B1 FD | 	call	#_psram_spin2_read1
157f4     0B 00 00 FF 
157f8     CC E4 85 F1 | 	sub	objptr, ##5836
157fc                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
157fc                 | '   
157fc                 | '   if header(0)<> $FFFFFFFF then
157fc     20 4E 05 F1 | 	add	fp, #32
15800     A7 28 02 FB | 	rdlong	local02, fp
15804     20 4E 85 F1 | 	sub	fp, #32
15808     FF FF 7F FF 
1580c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
15810     A8 00 90 AD |  if_e	jmp	#LR__1754
15814     38 4E 05 F1 | 	add	fp, #56
15818     3F 16 06 F6 | 	mov	arg03, #63
1581c     28 16 62 FD | 	setq	arg03
15820     A7 00 68 FC | 	wrlong	#0, fp
15824     A7 12 02 F6 | 	mov	arg01, fp
15828     10 4E 85 F1 | 	sub	fp, #16
1582c     A7 14 02 FB | 	rdlong	arg02, fp
15830     04 4E 05 F1 | 	add	fp, #4
15834     A7 16 02 FB | 	rdlong	arg03, fp
15838     2C 4E 85 F1 | 	sub	fp, #44
1583c     0B 00 00 FF 
15840     CC E4 05 F1 | 	add	objptr, ##5836
15844     28 1C B1 FD | 	call	#_psram_spin2_read1
15848     0B 00 00 FF 
1584c     CC E4 85 F1 | 	sub	objptr, ##5836
15850                 | '     longfill(linebuf,0,64)
15850                 | '     psram.read1(varptr(linebuf),header(2),header(3))
15850                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
15850     20 4E 05 F1 | 	add	fp, #32
15854     A7 28 02 FB | 	rdlong	local02, fp
15858     1C 4E 85 F1 | 	sub	fp, #28
1585c     A7 26 02 FB | 	rdlong	local01, fp
15860     04 4E 85 F1 | 	sub	fp, #4
15864     13 29 52 F2 | 	cmps	local02, local01 wc
15868     30 00 90 CD |  if_b	jmp	#LR__1753
1586c     20 4E 05 F1 | 	add	fp, #32
15870     A7 28 02 FB | 	rdlong	local02, fp
15874     18 4E 85 F1 | 	sub	fp, #24
15878     A7 16 02 FB | 	rdlong	arg03, fp
1587c     08 4E 85 F1 | 	sub	fp, #8
15880     0B 29 5A F2 | 	cmps	local02, arg03 wcz
15884     14 00 90 1D |  if_a	jmp	#LR__1753
15888     38 4E 05 F1 | 	add	fp, #56
1588c     A7 12 02 F6 | 	mov	arg01, fp
15890     38 4E 85 F1 | 	sub	fp, #56
15894                 | ' 
15894                 | ' write(text)
15894     E0 0F B1 FD | 	call	#_hg010b_spin2_write
15898                 | ' crlf
15898     7C 14 B1 FD | 	call	#_hg010b_spin2_crlf
1589c                 | LR__1753
1589c     34 4E 05 F1 | 	add	fp, #52
158a0     A7 28 02 FB | 	rdlong	local02, fp
158a4     34 4E 85 F1 | 	sub	fp, #52
158a8     52 00 00 FF 
158ac     74 E5 05 F1 | 	add	objptr, ##42356
158b0     F2 28 62 FC | 	wrlong	local02, objptr
158b4     52 00 00 FF 
158b8     74 E5 85 F1 | 	sub	objptr, ##42356
158bc                 | LR__1754
158bc     34 4E 05 F1 | 	add	fp, #52
158c0     A7 28 02 FB | 	rdlong	local02, fp
158c4     34 4E 85 F1 | 	sub	fp, #52
158c8     FF FF 3F FF 
158cc     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
158d0     20 4E 05 51 |  if_ne	add	fp, #32
158d4     A7 26 02 5B |  if_ne	rdlong	local01, fp
158d8     20 4E 85 51 |  if_ne	sub	fp, #32
158dc     FF FF 7F 5F 
158e0     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
158e4     E4 FE 9F 5D |  if_ne	jmp	#LR__1752
158e8     A7 F0 03 F6 | 	mov	ptra, fp
158ec     B2 00 A0 FD | 	call	#popregs_
158f0                 | _do_list_ret
158f0     2D 00 64 FD | 	ret
158f4                 | 
158f4                 | ' 
158f4                 | ' '-------------------- load
158f4                 | ' 
158f4                 | ' sub do_load(amode=0 as integer)  
158f4                 | _do_load
158f4     01 4A 05 F6 | 	mov	COUNT_, #1
158f8     A8 00 A0 FD | 	call	#pushregs_
158fc     AC F0 07 F1 | 	add	ptra, #172
15900     A7 12 62 FC | 	wrlong	arg01, fp
15904     52 00 00 FF 
15908     2C E5 05 F1 | 	add	objptr, ##42284
1590c     F2 02 68 FC | 	wrlong	#1, objptr
15910     08 00 00 FF 
15914     8C E4 85 F1 | 	sub	objptr, ##4236
15918     F2 14 02 FB | 	rdlong	arg02, objptr
1591c     0A 13 02 F6 | 	mov	arg01, arg02
15920     01 12 66 F0 | 	shl	arg01, #1
15924     0A 13 02 F1 | 	add	arg01, arg02
15928     02 12 66 F0 | 	shl	arg01, #2
1592c     03 00 00 FF 
15930     04 E4 85 F1 | 	sub	objptr, ##1540
15934     F2 12 02 F1 | 	add	arg01, objptr
15938     09 15 02 FB | 	rdlong	arg02, arg01
1593c     1C 4E 05 F1 | 	add	fp, #28
15940     A7 14 62 FC | 	wrlong	arg02, fp
15944     8C 4E 05 F1 | 	add	fp, #140
15948     A7 12 02 F6 | 	mov	arg01, fp
1594c     47 00 00 FF 
15950     9C E4 85 F1 | 	sub	objptr, ##36508
15954     80 4E 85 F1 | 	sub	fp, #128
15958     09 4F 61 FC | 	wrlong	fp, arg01
1595c                 | ' 
1595c                 | ' inload=1
1595c                 | ' numpar=compiledline(lineptr_e).result.uresult
1595c                 | ' lpoke varptr(line2$),varptr(line2)
1595c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1595c     0C 4E 85 F1 | 	sub	fp, #12
15960     A7 26 02 FB | 	rdlong	local01, fp
15964     1C 4E 85 F1 | 	sub	fp, #28
15968     01 26 56 F2 | 	cmps	local01, #1 wc
1596c     24 00 90 CD |  if_b	jmp	#LR__1760
15970     AC 7E BF FD | 	call	#_pop
15974     04 4E 05 F1 | 	add	fp, #4
15978     A7 FA 61 FC | 	wrlong	result1, fp
1597c     04 4E 05 F1 | 	add	fp, #4
15980     A7 FC 61 FC | 	wrlong	result2, fp
15984     04 4E 05 F1 | 	add	fp, #4
15988     A7 FE 61 FC | 	wrlong	result3, fp
1598c     0C 4E 85 F1 | 	sub	fp, #12
15990     28 00 90 FD | 	jmp	#LR__1761
15994                 | LR__1760
15994     52 00 00 FF 
15998     1C E5 05 F1 | 	add	objptr, ##42268
1599c     F2 26 02 FB | 	rdlong	local01, objptr
159a0     52 00 00 FF 
159a4     1C E5 85 F1 | 	sub	objptr, ##42268
159a8     04 4E 05 F1 | 	add	fp, #4
159ac     A7 26 62 FC | 	wrlong	local01, fp
159b0     08 4E 05 F1 | 	add	fp, #8
159b4     A7 3E 68 FC | 	wrlong	#31, fp
159b8     0C 4E 85 F1 | 	sub	fp, #12
159bc                 | LR__1761
159bc                 | ' 'print "popped "; t1.result.uresult, t1.result_type
159bc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
159bc     0C 4E 05 F1 | 	add	fp, #12
159c0     A7 26 02 FB | 	rdlong	local01, fp
159c4     0C 4E 85 F1 | 	sub	fp, #12
159c8     2B 26 0E F2 | 	cmp	local01, #43 wz
159cc     24 00 90 5D |  if_ne	jmp	#LR__1762
159d0     04 4E 05 F1 | 	add	fp, #4
159d4     A7 12 02 FB | 	rdlong	arg01, fp
159d8     04 4E 85 F1 | 	sub	fp, #4
159dc     B8 7F BF FD | 	call	#_convertstring
159e0     04 4E 05 F1 | 	add	fp, #4
159e4     A7 FA 61 FC | 	wrlong	result1, fp
159e8     08 4E 05 F1 | 	add	fp, #8
159ec     A7 3E 68 FC | 	wrlong	#31, fp
159f0     0C 4E 85 F1 | 	sub	fp, #12
159f4                 | LR__1762
159f4                 | ' if t1.result_type=result_string then
159f4     0C 4E 05 F1 | 	add	fp, #12
159f8     A7 26 02 FB | 	rdlong	local01, fp
159fc     0C 4E 85 F1 | 	sub	fp, #12
15a00     1F 26 0E F2 | 	cmp	local01, #31 wz
15a04     E8 02 90 5D |  if_ne	jmp	#LR__1768
15a08                 | '   if amode<>1234 then do_new
15a08     A7 26 02 FB | 	rdlong	local01, fp
15a0c     02 00 00 FF 
15a10     D2 26 0E F2 | 	cmp	local01, ##1234 wz
15a14     34 0F B0 5D |  if_ne	call	#_do_new
15a18                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
15a18     04 4E 05 F1 | 	add	fp, #4
15a1c     A7 12 02 FB | 	rdlong	arg01, fp
15a20     04 4E 85 F1 | 	sub	fp, #4
15a24     C3 01 00 FF 
15a28     00 15 06 F6 | 	mov	arg02, ##@LR__6075
15a2c     0C 27 B1 FD | 	call	#__system___string_cmp
15a30     00 FA 0D F2 | 	cmp	result1, #0 wz
15a34     24 00 90 5D |  if_ne	jmp	#LR__1763
15a38     52 00 00 FF 
15a3c     1C E5 05 F1 | 	add	objptr, ##42268
15a40     F2 26 02 FB | 	rdlong	local01, objptr
15a44     52 00 00 FF 
15a48     1C E5 85 F1 | 	sub	objptr, ##42268
15a4c     04 4E 05 F1 | 	add	fp, #4
15a50     A7 26 62 FC | 	wrlong	local01, fp
15a54     04 4E 85 F1 | 	sub	fp, #4
15a58     20 00 90 FD | 	jmp	#LR__1764
15a5c                 | LR__1763
15a5c     04 4E 05 F1 | 	add	fp, #4
15a60     A7 26 02 FB | 	rdlong	local01, fp
15a64     04 4E 85 F1 | 	sub	fp, #4
15a68     52 00 00 FF 
15a6c     1C E5 05 F1 | 	add	objptr, ##42268
15a70     F2 26 62 FC | 	wrlong	local01, objptr
15a74     52 00 00 FF 
15a78     1C E5 85 F1 | 	sub	objptr, ##42268
15a7c                 | LR__1764
15a7c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
15a7c     09 12 06 F6 | 	mov	arg01, #9
15a80     F0 79 B1 FD | 	call	#__system__close
15a84     09 26 06 F6 | 	mov	local01, #9
15a88     4A 00 00 FF 
15a8c     B4 E4 05 F1 | 	add	objptr, ##38068
15a90     F2 12 02 FB | 	rdlong	arg01, objptr
15a94     4A 00 00 FF 
15a98     B4 E4 85 F1 | 	sub	objptr, ##38068
15a9c     C3 01 00 FF 
15aa0     01 15 06 F6 | 	mov	arg02, ##@LR__6076
15aa4     C8 26 B1 FD | 	call	#__system___string_concat
15aa8     FD 12 02 F6 | 	mov	arg01, result1
15aac     04 4E 05 F1 | 	add	fp, #4
15ab0     A7 14 02 FB | 	rdlong	arg02, fp
15ab4     04 4E 85 F1 | 	sub	fp, #4
15ab8     B4 26 B1 FD | 	call	#__system___string_concat
15abc     FD 14 02 F6 | 	mov	arg02, result1
15ac0     13 13 02 F6 | 	mov	arg01, local01
15ac4     00 16 06 F6 | 	mov	arg03, #0
15ac8     4C 32 B1 FD | 	call	#__system___basic_open_string
15acc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
15ad0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
15ad4     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
15ad8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
15adc     14 4E 05 F1 | 	add	fp, #20
15ae0     A7 FA 61 FC | 	wrlong	result1, fp
15ae4                 | '   r=geterr() 
15ae4                 | '   if r then 
15ae4     14 4E 85 F1 | 	sub	fp, #20
15ae8     54 01 90 AD |  if_e	jmp	#LR__1766
15aec                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
15aec     09 12 06 F6 | 	mov	arg01, #9
15af0     80 79 B1 FD | 	call	#__system__close
15af4     09 26 06 F6 | 	mov	local01, #9
15af8     4A 00 00 FF 
15afc     B4 E4 05 F1 | 	add	objptr, ##38068
15b00     F2 12 02 FB | 	rdlong	arg01, objptr
15b04     4A 00 00 FF 
15b08     B4 E4 85 F1 | 	sub	objptr, ##38068
15b0c     C3 01 00 FF 
15b10     03 15 06 F6 | 	mov	arg02, ##@LR__6077
15b14     58 26 B1 FD | 	call	#__system___string_concat
15b18     FD 12 02 F6 | 	mov	arg01, result1
15b1c     04 4E 05 F1 | 	add	fp, #4
15b20     A7 14 02 FB | 	rdlong	arg02, fp
15b24     04 4E 85 F1 | 	sub	fp, #4
15b28     44 26 B1 FD | 	call	#__system___string_concat
15b2c     FD 12 02 F6 | 	mov	arg01, result1
15b30     C3 01 00 FF 
15b34     05 15 06 F6 | 	mov	arg02, ##@LR__6078
15b38     34 26 B1 FD | 	call	#__system___string_concat
15b3c     FD 14 02 F6 | 	mov	arg02, result1
15b40     13 13 02 F6 | 	mov	arg01, local01
15b44     00 16 06 F6 | 	mov	arg03, #0
15b48     CC 31 B1 FD | 	call	#__system___basic_open_string
15b4c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
15b50     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
15b54     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
15b58     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
15b5c     14 4E 05 F1 | 	add	fp, #20
15b60     A7 FA 61 FC | 	wrlong	result1, fp
15b64                 | '     r=geterr() 
15b64                 | '     if r then 
15b64     14 4E 85 F1 | 	sub	fp, #20
15b68     A0 00 90 AD |  if_e	jmp	#LR__1765
15b6c                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
15b6c     00 12 06 F6 | 	mov	arg01, #0
15b70     50 82 B1 FD | 	call	#__system___getiolock_0620
15b74     FD 12 02 F6 | 	mov	arg01, result1
15b78     98 25 B1 FD | 	call	#__system___lockmem
15b7c     C3 01 00 FF 
15b80     0A 15 06 F6 | 	mov	arg02, ##@LR__6079
15b84     00 12 06 F6 | 	mov	arg01, #0
15b88     00 16 06 F6 | 	mov	arg03, #0
15b8c     7C 32 B1 FD | 	call	#__system___basic_print_string
15b90     14 4E 05 F1 | 	add	fp, #20
15b94     A7 14 02 FB | 	rdlong	arg02, fp
15b98     14 4E 85 F1 | 	sub	fp, #20
15b9c     00 12 06 F6 | 	mov	arg01, #0
15ba0     00 16 06 F6 | 	mov	arg03, #0
15ba4     0A 18 06 F6 | 	mov	arg04, #10
15ba8     A4 32 B1 FD | 	call	#__system___basic_print_integer
15bac     C3 01 00 FF 
15bb0     18 15 06 F6 | 	mov	arg02, ##@LR__6080
15bb4     00 12 06 F6 | 	mov	arg01, #0
15bb8     00 16 06 F6 | 	mov	arg03, #0
15bbc     4C 32 B1 FD | 	call	#__system___basic_print_string
15bc0     00 26 06 F6 | 	mov	local01, #0
15bc4     14 4E 05 F1 | 	add	fp, #20
15bc8     A7 12 02 FB | 	rdlong	arg01, fp
15bcc     14 4E 85 F1 | 	sub	fp, #20
15bd0     D0 4E B1 FD | 	call	#__system___strerror
15bd4     FD 14 02 F6 | 	mov	arg02, result1
15bd8     13 13 02 F6 | 	mov	arg01, local01
15bdc     00 16 06 F6 | 	mov	arg03, #0
15be0     28 32 B1 FD | 	call	#__system___basic_print_string
15be4     00 12 06 F6 | 	mov	arg01, #0
15be8     0A 14 06 F6 | 	mov	arg02, #10
15bec     00 16 06 F6 | 	mov	arg03, #0
15bf0     C0 31 B1 FD | 	call	#__system___basic_print_char
15bf4     00 12 06 F6 | 	mov	arg01, #0
15bf8     C8 81 B1 FD | 	call	#__system___getiolock_0620
15bfc     FD 00 68 FC | 	wrlong	#0, result1
15c00     09 12 06 F6 | 	mov	arg01, #9
15c04     6C 78 B1 FD | 	call	#__system__close
15c08     94 01 90 FD | 	jmp	#LR__1770
15c0c                 | LR__1765
15c0c     52 00 00 FF 
15c10     1C E5 05 F1 | 	add	objptr, ##42268
15c14     F2 12 02 FB | 	rdlong	arg01, objptr
15c18     52 00 00 FF 
15c1c     1C E5 85 F1 | 	sub	objptr, ##42268
15c20     C3 01 00 FF 
15c24     1B 15 06 F6 | 	mov	arg02, ##@LR__6081
15c28     44 25 B1 FD | 	call	#__system___string_concat
15c2c     52 00 00 FF 
15c30     1C E5 05 F1 | 	add	objptr, ##42268
15c34     F2 FA 61 FC | 	wrlong	result1, objptr
15c38     52 00 00 FF 
15c3c     1C E5 85 F1 | 	sub	objptr, ##42268
15c40                 | LR__1766
15c40                 | '   close #9: open currentdir$+"/"+loadname for input as #9
15c40     09 12 06 F6 | 	mov	arg01, #9
15c44     2C 78 B1 FD | 	call	#__system__close
15c48     09 26 06 F6 | 	mov	local01, #9
15c4c     4A 00 00 FF 
15c50     B4 E4 05 F1 | 	add	objptr, ##38068
15c54     F2 12 02 FB | 	rdlong	arg01, objptr
15c58     4A 00 00 FF 
15c5c     B4 E4 85 F1 | 	sub	objptr, ##38068
15c60     C3 01 00 FF 
15c64     20 15 06 F6 | 	mov	arg02, ##@LR__6082
15c68     04 25 B1 FD | 	call	#__system___string_concat
15c6c     FD 12 02 F6 | 	mov	arg01, result1
15c70     52 00 00 FF 
15c74     1C E5 05 F1 | 	add	objptr, ##42268
15c78     F2 14 02 FB | 	rdlong	arg02, objptr
15c7c     52 00 00 FF 
15c80     1C E5 85 F1 | 	sub	objptr, ##42268
15c84     E8 24 B1 FD | 	call	#__system___string_concat
15c88     FD 14 02 F6 | 	mov	arg02, result1
15c8c     13 13 02 F6 | 	mov	arg01, local01
15c90     00 16 06 F6 | 	mov	arg03, #0
15c94     80 30 B1 FD | 	call	#__system___basic_open_string
15c98                 | '   do
15c98                 | LR__1767
15c98     09 12 06 F6 | 	mov	arg01, #9
15c9c     80 26 B1 FD | 	call	#__system___basic_read_line
15ca0     FD 26 02 F6 | 	mov	local01, result1
15ca4     37 00 00 FF 
15ca8     3C E4 05 F1 | 	add	objptr, ##28220
15cac     F2 26 62 FC | 	wrlong	local01, objptr
15cb0     37 00 00 FF 
15cb4     3C E4 85 F1 | 	sub	objptr, ##28220
15cb8     D0 BB BE FD | 	call	#_interpret
15cbc     37 00 00 FF 
15cc0     3C E4 05 F1 | 	add	objptr, ##28220
15cc4     F2 12 02 FB | 	rdlong	arg01, objptr
15cc8     37 00 00 FF 
15ccc     3C E4 85 F1 | 	sub	objptr, ##28220
15cd0     C3 01 00 FF 
15cd4     22 15 06 F6 | 	mov	arg02, ##@LR__6083
15cd8     60 24 B1 FD | 	call	#__system___string_cmp
15cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
15ce0     B4 FF 9F 5D |  if_ne	jmp	#LR__1767
15ce4                 | '   close #9   
15ce4     09 12 06 F6 | 	mov	arg01, #9
15ce8     88 77 B1 FD | 	call	#__system__close
15cec     0C 00 90 FD | 	jmp	#LR__1769
15cf0                 | LR__1768
15cf0     1E 12 06 F6 | 	mov	arg01, #30
15cf4     00 14 06 F6 | 	mov	arg02, #0
15cf8     C0 E9 B0 FD | 	call	#_printerror
15cfc                 | LR__1769
15cfc                 | ' print "Loaded ";currentdir$+"/"+loadname
15cfc     00 12 06 F6 | 	mov	arg01, #0
15d00     C0 80 B1 FD | 	call	#__system___getiolock_0620
15d04     FD 12 02 F6 | 	mov	arg01, result1
15d08     08 24 B1 FD | 	call	#__system___lockmem
15d0c     C3 01 00 FF 
15d10     23 15 06 F6 | 	mov	arg02, ##@LR__6084
15d14     00 12 06 F6 | 	mov	arg01, #0
15d18     00 16 06 F6 | 	mov	arg03, #0
15d1c     EC 30 B1 FD | 	call	#__system___basic_print_string
15d20     00 26 06 F6 | 	mov	local01, #0
15d24     4A 00 00 FF 
15d28     B4 E4 05 F1 | 	add	objptr, ##38068
15d2c     F2 12 02 FB | 	rdlong	arg01, objptr
15d30     4A 00 00 FF 
15d34     B4 E4 85 F1 | 	sub	objptr, ##38068
15d38     C3 01 00 FF 
15d3c     2B 15 06 F6 | 	mov	arg02, ##@LR__6085
15d40     2C 24 B1 FD | 	call	#__system___string_concat
15d44     FD 12 02 F6 | 	mov	arg01, result1
15d48     52 00 00 FF 
15d4c     1C E5 05 F1 | 	add	objptr, ##42268
15d50     F2 14 02 FB | 	rdlong	arg02, objptr
15d54     52 00 00 FF 
15d58     1C E5 85 F1 | 	sub	objptr, ##42268
15d5c     10 24 B1 FD | 	call	#__system___string_concat
15d60     FD 14 02 F6 | 	mov	arg02, result1
15d64     13 13 02 F6 | 	mov	arg01, local01
15d68     00 16 06 F6 | 	mov	arg03, #0
15d6c     9C 30 B1 FD | 	call	#__system___basic_print_string
15d70     00 12 06 F6 | 	mov	arg01, #0
15d74     0A 14 06 F6 | 	mov	arg02, #10
15d78     00 16 06 F6 | 	mov	arg03, #0
15d7c     34 30 B1 FD | 	call	#__system___basic_print_char
15d80     00 12 06 F6 | 	mov	arg01, #0
15d84     3C 80 B1 FD | 	call	#__system___getiolock_0620
15d88     FD 00 68 FC | 	wrlong	#0, result1
15d8c     52 00 00 FF 
15d90     2C E5 05 F1 | 	add	objptr, ##42284
15d94     F2 00 68 FC | 	wrlong	#0, objptr
15d98     52 00 00 FF 
15d9c     2C E5 85 F1 | 	sub	objptr, ##42284
15da0                 | LR__1770
15da0     A7 F0 03 F6 | 	mov	ptra, fp
15da4     B2 00 A0 FD | 	call	#popregs_
15da8                 | _do_load_ret
15da8     2D 00 64 FD | 	ret
15dac                 | 
15dac                 | ' 
15dac                 | ' '-------------------- log
15dac                 | ' 
15dac                 | ' sub do_log
15dac                 | _do_log
15dac     01 4A 05 F6 | 	mov	COUNT_, #1
15db0     A8 00 A0 FD | 	call	#pushregs_
15db4     14 F0 07 F1 | 	add	ptra, #20
15db8     4A 00 00 FF 
15dbc     A0 E4 05 F1 | 	add	objptr, ##38048
15dc0     F2 26 02 FB | 	rdlong	local01, objptr
15dc4     13 17 02 F6 | 	mov	arg03, local01
15dc8     01 16 66 F0 | 	shl	arg03, #1
15dcc     13 17 02 F1 | 	add	arg03, local01
15dd0     02 16 66 F0 | 	shl	arg03, #2
15dd4     03 00 00 FF 
15dd8     04 E4 85 F1 | 	sub	objptr, ##1540
15ddc     F2 16 02 F1 | 	add	arg03, objptr
15de0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
15de4     0C 4E 05 F1 | 	add	fp, #12
15de8     A7 16 62 FC | 	wrlong	arg03, fp
15dec                 | ' 
15dec                 | ' numpar=compiledline(lineptr_e).result.uresult
15dec                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
15dec     0C 4E 85 F1 | 	sub	fp, #12
15df0     47 00 00 FF 
15df4     9C E4 85 F1 | 	sub	objptr, ##36508
15df8     0C 4E 05 51 |  if_ne	add	fp, #12
15dfc     A7 26 02 5B |  if_ne	rdlong	local01, fp
15e00     0C 4E 85 51 |  if_ne	sub	fp, #12
15e04     03 26 16 52 |  if_ne	cmp	local01, #3 wc
15e08     40 00 90 4D |  if_c_and_nz	jmp	#LR__1780
15e0c     00 12 06 F6 | 	mov	arg01, #0
15e10     B0 7F B1 FD | 	call	#__system___getiolock_0620
15e14     FD 12 02 F6 | 	mov	arg01, result1
15e18     F8 22 B1 FD | 	call	#__system___lockmem
15e1c     C3 01 00 FF 
15e20     2D 15 06 F6 | 	mov	arg02, ##@LR__6086
15e24     00 12 06 F6 | 	mov	arg01, #0
15e28     00 16 06 F6 | 	mov	arg03, #0
15e2c     DC 2F B1 FD | 	call	#__system___basic_print_string
15e30     00 12 06 F6 | 	mov	arg01, #0
15e34     8C 7F B1 FD | 	call	#__system___getiolock_0620
15e38     FD 00 68 FC | 	wrlong	#0, result1
15e3c     27 12 06 F6 | 	mov	arg01, #39
15e40     00 14 06 F6 | 	mov	arg02, #0
15e44     74 E8 B0 FD | 	call	#_printerror
15e48     D0 00 90 FD | 	jmp	#LR__1783
15e4c                 | LR__1780
15e4c                 | ' if numpar=2 then 
15e4c     0C 4E 05 F1 | 	add	fp, #12
15e50     A7 26 02 FB | 	rdlong	local01, fp
15e54     0C 4E 85 F1 | 	sub	fp, #12
15e58     02 26 0E F2 | 	cmp	local01, #2 wz
15e5c     48 00 90 5D |  if_ne	jmp	#LR__1781
15e60     BC 79 BF FD | 	call	#_pop
15e64     FF 26 02 F6 | 	mov	local01, result3
15e68     A7 FA 61 FC | 	wrlong	result1, fp
15e6c     04 4E 05 F1 | 	add	fp, #4
15e70     A7 FC 61 FC | 	wrlong	result2, fp
15e74     04 4E 05 F1 | 	add	fp, #4
15e78     A7 26 62 FC | 	wrlong	local01, fp
15e7c     08 4E 85 F1 | 	sub	fp, #8
15e80     A7 12 02 F6 | 	mov	arg01, fp
15e84     38 7C BF FD | 	call	#_converttofloat
15e88     FD 14 02 F6 | 	mov	arg02, result1
15e8c     FC 16 20 FF 
15e90     54 12 06 F6 | 	mov	arg01, ##1076754516
15e94     CC 60 B1 FD | 	call	#__system____builtin_logbase
15e98     10 4E 05 F1 | 	add	fp, #16
15e9c     A7 FA 61 FC | 	wrlong	result1, fp
15ea0     10 4E 85 F1 | 	sub	fp, #16
15ea4     10 00 90 FD | 	jmp	#LR__1782
15ea8                 | LR__1781
15ea8     10 4E 05 F1 | 	add	fp, #16
15eac     00 C0 9F FF 
15eb0     A7 00 68 FC | 	wrlong	##1065353216, fp
15eb4     10 4E 85 F1 | 	sub	fp, #16
15eb8                 | LR__1782
15eb8     64 79 BF FD | 	call	#_pop
15ebc     FF 26 02 F6 | 	mov	local01, result3
15ec0     A7 FA 61 FC | 	wrlong	result1, fp
15ec4     04 4E 05 F1 | 	add	fp, #4
15ec8     A7 FC 61 FC | 	wrlong	result2, fp
15ecc     04 4E 05 F1 | 	add	fp, #4
15ed0     A7 26 62 FC | 	wrlong	local01, fp
15ed4     08 4E 85 F1 | 	sub	fp, #8
15ed8     A7 12 02 F6 | 	mov	arg01, fp
15edc     E0 7B BF FD | 	call	#_converttofloat
15ee0     FD 14 02 F6 | 	mov	arg02, result1
15ee4     FC 16 20 FF 
15ee8     54 12 06 F6 | 	mov	arg01, ##1076754516
15eec     74 60 B1 FD | 	call	#__system____builtin_logbase
15ef0     FD 12 02 F6 | 	mov	arg01, result1
15ef4     10 4E 05 F1 | 	add	fp, #16
15ef8     A7 14 02 FB | 	rdlong	arg02, fp
15efc     10 4E 85 F1 | 	sub	fp, #16
15f00     90 52 B1 FD | 	call	#__system___float_div
15f04     A7 FA 61 FC | 	wrlong	result1, fp
15f08     08 4E 05 F1 | 	add	fp, #8
15f0c     A7 3C 68 FC | 	wrlong	#30, fp
15f10     08 4E 85 F1 | 	sub	fp, #8
15f14     A7 12 02 F6 | 	mov	arg01, fp
15f18     9C 79 BF FD | 	call	#_push
15f1c                 | LR__1783
15f1c     A7 F0 03 F6 | 	mov	ptra, fp
15f20     B2 00 A0 FD | 	call	#popregs_
15f24                 | _do_log_ret
15f24     2D 00 64 FD | 	ret
15f28                 | 
15f28                 | ' 
15f28                 | ' '-------------------- lpeek
15f28                 | ' 
15f28                 | ' sub do_lpeek
15f28                 | _do_lpeek
15f28     00 4A 05 F6 | 	mov	COUNT_, #0
15f2c     A8 00 A0 FD | 	call	#pushregs_
15f30     14 F0 07 F1 | 	add	ptra, #20
15f34     E8 78 BF FD | 	call	#_pop
15f38     A7 FA 61 FC | 	wrlong	result1, fp
15f3c     04 4E 05 F1 | 	add	fp, #4
15f40     A7 FC 61 FC | 	wrlong	result2, fp
15f44     04 4E 05 F1 | 	add	fp, #4
15f48     A7 FE 61 FC | 	wrlong	result3, fp
15f4c     08 4E 85 F1 | 	sub	fp, #8
15f50     A7 12 02 F6 | 	mov	arg01, fp
15f54     AC 7A BF FD | 	call	#_converttoint
15f58     0C 4E 05 F1 | 	add	fp, #12
15f5c     A7 FA 61 FC | 	wrlong	result1, fp
15f60                 | ' 
15f60                 | ' t1=pop()
15f60                 | ' a=converttoint(t1)
15f60                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
15f60     0C 4E 85 F1 | 	sub	fp, #12
15f64     00 04 00 FF 
15f68     00 FA 15 F2 | 	cmp	result1, ##524288 wc
15f6c     1C 00 90 3D |  if_ae	jmp	#LR__1790
15f70     0C 4E 05 F1 | 	add	fp, #12
15f74     A7 12 02 FB | 	rdlong	arg01, fp
15f78     09 FB 01 FB | 	rdlong	result1, arg01
15f7c     04 4E 05 F1 | 	add	fp, #4
15f80     A7 FA 61 FC | 	wrlong	result1, fp
15f84     10 4E 85 F1 | 	sub	fp, #16
15f88     1C 00 90 FD | 	jmp	#LR__1791
15f8c                 | LR__1790
15f8c     0C 4E 05 F1 | 	add	fp, #12
15f90     A7 12 02 FB | 	rdlong	arg01, fp
15f94     0C 4E 85 F1 | 	sub	fp, #12
15f98     F0 E9 B0 FD | 	call	#_pslpeek
15f9c     10 4E 05 F1 | 	add	fp, #16
15fa0     A7 FA 61 FC | 	wrlong	result1, fp
15fa4     10 4E 85 F1 | 	sub	fp, #16
15fa8                 | LR__1791
15fa8     08 4E 05 F1 | 	add	fp, #8
15fac     A7 3A 68 FC | 	wrlong	#29, fp
15fb0     08 4E 05 F1 | 	add	fp, #8
15fb4     A7 12 02 FB | 	rdlong	arg01, fp
15fb8     10 4E 85 F1 | 	sub	fp, #16
15fbc     A7 12 62 FC | 	wrlong	arg01, fp
15fc0     A7 12 02 F6 | 	mov	arg01, fp
15fc4     F0 78 BF FD | 	call	#_push
15fc8     A7 F0 03 F6 | 	mov	ptra, fp
15fcc     B2 00 A0 FD | 	call	#popregs_
15fd0                 | _do_lpeek_ret
15fd0     2D 00 64 FD | 	ret
15fd4                 | 
15fd4                 | ' 
15fd4                 | ' '-------------------- lpoke
15fd4                 | ' 
15fd4                 | ' sub do_lpoke
15fd4                 | _do_lpoke
15fd4     01 4A 05 F6 | 	mov	COUNT_, #1
15fd8     A8 00 A0 FD | 	call	#pushregs_
15fdc     20 F0 07 F1 | 	add	ptra, #32
15fe0     3C 78 BF FD | 	call	#_pop
15fe4     FD 14 02 F6 | 	mov	arg02, result1
15fe8     FE 12 02 F6 | 	mov	arg01, result2
15fec     FF 26 02 F6 | 	mov	local01, result3
15ff0     A7 14 62 FC | 	wrlong	arg02, fp
15ff4     04 4E 05 F1 | 	add	fp, #4
15ff8     A7 12 62 FC | 	wrlong	arg01, fp
15ffc     04 4E 05 F1 | 	add	fp, #4
16000     A7 26 62 FC | 	wrlong	local01, fp
16004     08 4E 85 F1 | 	sub	fp, #8
16008     14 78 BF FD | 	call	#_pop
1600c     FF 26 02 F6 | 	mov	local01, result3
16010     0C 4E 05 F1 | 	add	fp, #12
16014     A7 FA 61 FC | 	wrlong	result1, fp
16018     04 4E 05 F1 | 	add	fp, #4
1601c     A7 FC 61 FC | 	wrlong	result2, fp
16020     04 4E 05 F1 | 	add	fp, #4
16024     A7 26 62 FC | 	wrlong	local01, fp
16028     08 4E 85 F1 | 	sub	fp, #8
1602c     A7 12 02 F6 | 	mov	arg01, fp
16030     0C 4E 85 F1 | 	sub	fp, #12
16034     CC 79 BF FD | 	call	#_converttoint
16038     18 4E 05 F1 | 	add	fp, #24
1603c     A7 FA 61 FC | 	wrlong	result1, fp
16040     18 4E 85 F1 | 	sub	fp, #24
16044     A7 12 02 F6 | 	mov	arg01, fp
16048     B8 79 BF FD | 	call	#_converttoint
1604c     1C 4E 05 F1 | 	add	fp, #28
16050     A7 FA 61 FC | 	wrlong	result1, fp
16054                 | ' 
16054                 | ' t1=pop() 'value
16054                 | ' t2=pop() 
16054                 | ' a=converttoint(t2) : v=converttoint(t1)
16054                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
16054     04 4E 85 F1 | 	sub	fp, #4
16058     A7 26 02 FB | 	rdlong	local01, fp
1605c     18 4E 85 F1 | 	sub	fp, #24
16060     00 04 00 FF 
16064     00 26 16 F2 | 	cmp	local01, ##524288 wc
16068     1C 00 90 3D |  if_ae	jmp	#LR__1800
1606c     18 4E 05 F1 | 	add	fp, #24
16070     A7 12 02 FB | 	rdlong	arg01, fp
16074     04 4E 05 F1 | 	add	fp, #4
16078     A7 14 02 FB | 	rdlong	arg02, fp
1607c     1C 4E 85 F1 | 	sub	fp, #28
16080     09 15 62 FC | 	wrlong	arg02, arg01
16084     18 00 90 FD | 	jmp	#LR__1801
16088                 | LR__1800
16088     18 4E 05 F1 | 	add	fp, #24
1608c     A7 12 02 FB | 	rdlong	arg01, fp
16090     04 4E 05 F1 | 	add	fp, #4
16094     A7 14 02 FB | 	rdlong	arg02, fp
16098     1C 4E 85 F1 | 	sub	fp, #28
1609c     BC E7 B0 FD | 	call	#_pslpoke
160a0                 | LR__1801
160a0     A7 F0 03 F6 | 	mov	ptra, fp
160a4     B2 00 A0 FD | 	call	#popregs_
160a8                 | _do_lpoke_ret
160a8     2D 00 64 FD | 	ret
160ac                 | 
160ac                 | ' 
160ac                 | ' '-------------------- memlo
160ac                 | ' 
160ac                 | ' sub do_memlo
160ac                 | _do_memlo
160ac     00 4A 05 F6 | 	mov	COUNT_, #0
160b0     A8 00 A0 FD | 	call	#pushregs_
160b4     0C F0 07 F1 | 	add	ptra, #12
160b8     43 00 00 FF 
160bc     7C E4 05 F1 | 	add	objptr, ##34428
160c0     F2 12 02 FB | 	rdlong	arg01, objptr
160c4     43 00 00 FF 
160c8     7C E4 85 F1 | 	sub	objptr, ##34428
160cc     A7 12 62 FC | 	wrlong	arg01, fp
160d0     08 4E 05 F1 | 	add	fp, #8
160d4     A7 3A 68 FC | 	wrlong	#29, fp
160d8     08 4E 85 F1 | 	sub	fp, #8
160dc     A7 12 02 F6 | 	mov	arg01, fp
160e0     D4 77 BF FD | 	call	#_push
160e4     A7 F0 03 F6 | 	mov	ptra, fp
160e8     B2 00 A0 FD | 	call	#popregs_
160ec                 | _do_memlo_ret
160ec     2D 00 64 FD | 	ret
160f0                 | 
160f0                 | ' 
160f0                 | ' '-------------------- memtop
160f0                 | ' 
160f0                 | ' sub do_memtop
160f0                 | _do_memtop
160f0     00 4A 05 F6 | 	mov	COUNT_, #0
160f4     A8 00 A0 FD | 	call	#pushregs_
160f8     0C F0 07 F1 | 	add	ptra, #12
160fc     52 00 00 FF 
16100     F0 E4 05 F1 | 	add	objptr, ##42224
16104     F2 12 02 FB | 	rdlong	arg01, objptr
16108     52 00 00 FF 
1610c     F0 E4 85 F1 | 	sub	objptr, ##42224
16110     A7 12 62 FC | 	wrlong	arg01, fp
16114     08 4E 05 F1 | 	add	fp, #8
16118     A7 3A 68 FC | 	wrlong	#29, fp
1611c     08 4E 85 F1 | 	sub	fp, #8
16120     A7 12 02 F6 | 	mov	arg01, fp
16124     90 77 BF FD | 	call	#_push
16128     A7 F0 03 F6 | 	mov	ptra, fp
1612c     B2 00 A0 FD | 	call	#popregs_
16130                 | _do_memtop_ret
16130     2D 00 64 FD | 	ret
16134                 | 
16134                 | ' 
16134                 | ' '-------------------- mid$
16134                 | ' 
16134                 | ' sub do_mid
16134                 | _do_mid
16134     00 4A 05 F6 | 	mov	COUNT_, #0
16138     A8 00 A0 FD | 	call	#pushregs_
1613c     18 F0 07 F1 | 	add	ptra, #24
16140     4A 00 00 FF 
16144     A0 E4 05 F1 | 	add	objptr, ##38048
16148     F2 16 02 FB | 	rdlong	arg03, objptr
1614c     0B 15 02 F6 | 	mov	arg02, arg03
16150     01 14 66 F0 | 	shl	arg02, #1
16154     0B 15 02 F1 | 	add	arg02, arg03
16158     02 14 66 F0 | 	shl	arg02, #2
1615c     03 00 00 FF 
16160     04 E4 85 F1 | 	sub	objptr, ##1540
16164     F2 14 02 F1 | 	add	arg02, objptr
16168     0A 17 02 FB | 	rdlong	arg03, arg02
1616c     0C 4E 05 F1 | 	add	fp, #12
16170     A7 16 62 FC | 	wrlong	arg03, fp
16174                 | ' 
16174                 | ' numpar=compiledline(lineptr_e).result.uresult
16174                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
16174     0C 4E 85 F1 | 	sub	fp, #12
16178     03 16 0E F2 | 	cmp	arg03, #3 wz
1617c     47 00 00 FF 
16180     9C E4 85 F1 | 	sub	objptr, ##36508
16184     40 00 90 AD |  if_e	jmp	#LR__1810
16188     00 12 06 F6 | 	mov	arg01, #0
1618c     34 7C B1 FD | 	call	#__system___getiolock_0620
16190     FD 12 02 F6 | 	mov	arg01, result1
16194     7C 1F B1 FD | 	call	#__system___lockmem
16198     C3 01 00 FF 
1619c     33 15 06 F6 | 	mov	arg02, ##@LR__6087
161a0     00 12 06 F6 | 	mov	arg01, #0
161a4     00 16 06 F6 | 	mov	arg03, #0
161a8     60 2C B1 FD | 	call	#__system___basic_print_string
161ac     00 12 06 F6 | 	mov	arg01, #0
161b0     10 7C B1 FD | 	call	#__system___getiolock_0620
161b4     FD 00 68 FC | 	wrlong	#0, result1
161b8     27 12 06 F6 | 	mov	arg01, #39
161bc     00 14 06 F6 | 	mov	arg02, #0
161c0     F8 E4 B0 FD | 	call	#_printerror
161c4     2C 01 90 FD | 	jmp	#LR__1813
161c8                 | LR__1810
161c8     54 76 BF FD | 	call	#_pop
161cc     FF 16 02 F6 | 	mov	arg03, result3
161d0     A7 FA 61 FC | 	wrlong	result1, fp
161d4     04 4E 05 F1 | 	add	fp, #4
161d8     A7 FC 61 FC | 	wrlong	result2, fp
161dc     04 4E 05 F1 | 	add	fp, #4
161e0     A7 16 62 FC | 	wrlong	arg03, fp
161e4     08 4E 85 F1 | 	sub	fp, #8
161e8     A7 12 02 F6 | 	mov	arg01, fp
161ec     14 78 BF FD | 	call	#_converttoint
161f0     FD 16 02 F6 | 	mov	arg03, result1
161f4     14 4E 05 F1 | 	add	fp, #20
161f8     A7 16 62 FC | 	wrlong	arg03, fp
161fc     14 4E 85 F1 | 	sub	fp, #20
16200     1C 76 BF FD | 	call	#_pop
16204     FF 16 02 F6 | 	mov	arg03, result3
16208     A7 FA 61 FC | 	wrlong	result1, fp
1620c     04 4E 05 F1 | 	add	fp, #4
16210     A7 FC 61 FC | 	wrlong	result2, fp
16214     04 4E 05 F1 | 	add	fp, #4
16218     A7 16 62 FC | 	wrlong	arg03, fp
1621c     08 4E 85 F1 | 	sub	fp, #8
16220     A7 12 02 F6 | 	mov	arg01, fp
16224     DC 77 BF FD | 	call	#_converttoint
16228     FD 16 02 F6 | 	mov	arg03, result1
1622c     10 4E 05 F1 | 	add	fp, #16
16230     A7 16 62 FC | 	wrlong	arg03, fp
16234     10 4E 85 F1 | 	sub	fp, #16
16238     E4 75 BF FD | 	call	#_pop
1623c     FF 16 02 F6 | 	mov	arg03, result3
16240     A7 FA 61 FC | 	wrlong	result1, fp
16244     04 4E 05 F1 | 	add	fp, #4
16248     A7 FC 61 FC | 	wrlong	result2, fp
1624c     04 4E 05 F1 | 	add	fp, #4
16250     A7 16 62 FC | 	wrlong	arg03, fp
16254                 | ' t1=pop() : arg2=converttoint(t1)
16254                 | ' t1=pop() : arg1=converttoint(t1)
16254                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16254     08 4E 85 F1 | 	sub	fp, #8
16258     2B 16 0E F2 | 	cmp	arg03, #43 wz
1625c     18 00 90 5D |  if_ne	jmp	#LR__1811
16260     A7 12 02 FB | 	rdlong	arg01, fp
16264     30 77 BF FD | 	call	#_convertstring
16268     A7 FA 61 FC | 	wrlong	result1, fp
1626c     08 4E 05 F1 | 	add	fp, #8
16270     A7 3E 68 FC | 	wrlong	#31, fp
16274     08 4E 85 F1 | 	sub	fp, #8
16278                 | LR__1811
16278                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
16278     08 4E 05 F1 | 	add	fp, #8
1627c     A7 16 02 FB | 	rdlong	arg03, fp
16280     08 4E 85 F1 | 	sub	fp, #8
16284     1F 16 0E F2 | 	cmp	arg03, #31 wz
16288     40 00 90 AD |  if_e	jmp	#LR__1812
1628c     00 12 06 F6 | 	mov	arg01, #0
16290     30 7B B1 FD | 	call	#__system___getiolock_0620
16294     FD 12 02 F6 | 	mov	arg01, result1
16298     78 1E B1 FD | 	call	#__system___lockmem
1629c     C3 01 00 FF 
162a0     3A 15 06 F6 | 	mov	arg02, ##@LR__6088
162a4     00 12 06 F6 | 	mov	arg01, #0
162a8     00 16 06 F6 | 	mov	arg03, #0
162ac     5C 2B B1 FD | 	call	#__system___basic_print_string
162b0     00 12 06 F6 | 	mov	arg01, #0
162b4     0C 7B B1 FD | 	call	#__system___getiolock_0620
162b8     FD 00 68 FC | 	wrlong	#0, result1
162bc     0F 12 06 F6 | 	mov	arg01, #15
162c0     00 14 06 F6 | 	mov	arg02, #0
162c4     F4 E3 B0 FD | 	call	#_printerror
162c8     28 00 90 FD | 	jmp	#LR__1813
162cc                 | LR__1812
162cc     A7 12 02 FB | 	rdlong	arg01, fp
162d0     10 4E 05 F1 | 	add	fp, #16
162d4     A7 14 02 FB | 	rdlong	arg02, fp
162d8     04 4E 05 F1 | 	add	fp, #4
162dc     A7 16 02 FB | 	rdlong	arg03, fp
162e0     14 4E 85 F1 | 	sub	fp, #20
162e4     C4 3F B1 FD | 	call	#__system__Mid_S
162e8     A7 FA 61 FC | 	wrlong	result1, fp
162ec     A7 12 02 F6 | 	mov	arg01, fp
162f0     C4 75 BF FD | 	call	#_push
162f4                 | LR__1813
162f4     A7 F0 03 F6 | 	mov	ptra, fp
162f8     B2 00 A0 FD | 	call	#popregs_
162fc                 | _do_mid_ret
162fc     2D 00 64 FD | 	ret
16300                 | 
16300                 | ' 
16300                 | ' '-------------------- mkdir
16300                 | ' 
16300                 | ' sub do_mkdir
16300                 | _do_mkdir
16300     04 4A 05 F6 | 	mov	COUNT_, #4
16304     A8 00 A0 FD | 	call	#pushregs_
16308     14 75 BF FD | 	call	#_pop
1630c     FE 18 02 F6 | 	mov	arg04, result2
16310     FF 16 02 F6 | 	mov	arg03, result3
16314     FD 26 02 F6 | 	mov	local01, result1
16318     0C 29 02 F6 | 	mov	local02, arg04
1631c     0B 2B 02 F6 | 	mov	local03, arg03
16320                 | ' 
16320                 | ' t1=pop()
16320                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16320     2B 2A 0E F2 | 	cmp	local03, #43 wz
16324     10 00 90 5D |  if_ne	jmp	#LR__1820
16328     13 13 02 F6 | 	mov	arg01, local01
1632c     68 76 BF FD | 	call	#_convertstring
16330     FD 26 02 F6 | 	mov	local01, result1
16334     1F 2A 06 F6 | 	mov	local03, #31
16338                 | LR__1820
16338                 | ' if t1.result_type<>result_string then printerror(15): return
16338     1F 2A 0E F2 | 	cmp	local03, #31 wz
1633c     10 00 90 AD |  if_e	jmp	#LR__1821
16340     0F 12 06 F6 | 	mov	arg01, #15
16344     00 14 06 F6 | 	mov	arg02, #0
16348     70 E3 B0 FD | 	call	#_printerror
1634c     64 00 90 FD | 	jmp	#LR__1823
16350                 | LR__1821
16350     13 13 02 F6 | 	mov	arg01, local01
16354     90 46 B1 FD | 	call	#__system___mkdir
16358     FD 2C 0A F6 | 	mov	local04, result1 wz
1635c                 | ' filename$=t1.result.sresult
1635c                 | ' err=mkdir(filename$)
1635c                 | ' 'err=geterr() : 
1635c                 | ' if err<>0 then print "Cannot create a directory: system error "; err
1635c     54 00 90 AD |  if_e	jmp	#LR__1822
16360     00 12 06 F6 | 	mov	arg01, #0
16364     5C 7A B1 FD | 	call	#__system___getiolock_0620
16368     FD 12 02 F6 | 	mov	arg01, result1
1636c     A4 1D B1 FD | 	call	#__system___lockmem
16370     C3 01 00 FF 
16374     41 15 06 F6 | 	mov	arg02, ##@LR__6089
16378     00 12 06 F6 | 	mov	arg01, #0
1637c     00 16 06 F6 | 	mov	arg03, #0
16380     88 2A B1 FD | 	call	#__system___basic_print_string
16384     00 12 06 F6 | 	mov	arg01, #0
16388     16 15 02 F6 | 	mov	arg02, local04
1638c     00 16 06 F6 | 	mov	arg03, #0
16390     0A 18 06 F6 | 	mov	arg04, #10
16394     B8 2A B1 FD | 	call	#__system___basic_print_integer
16398     00 12 06 F6 | 	mov	arg01, #0
1639c     0A 14 06 F6 | 	mov	arg02, #10
163a0     00 16 06 F6 | 	mov	arg03, #0
163a4     0C 2A B1 FD | 	call	#__system___basic_print_char
163a8     00 12 06 F6 | 	mov	arg01, #0
163ac     14 7A B1 FD | 	call	#__system___getiolock_0620
163b0     FD 00 68 FC | 	wrlong	#0, result1
163b4                 | LR__1822
163b4                 | LR__1823
163b4     A7 F0 03 F6 | 	mov	ptra, fp
163b8     B2 00 A0 FD | 	call	#popregs_
163bc                 | _do_mkdir_ret
163bc     2D 00 64 FD | 	ret
163c0                 | 
163c0                 | ' 
163c0                 | ' '-------------------- mode
163c0                 | ' 
163c0                 | ' sub do_mode
163c0                 | _do_mode
163c0     05 4A 05 F6 | 	mov	COUNT_, #5
163c4     A8 00 A0 FD | 	call	#pushregs_
163c8     54 74 BF FD | 	call	#_pop
163cc     FD 26 02 F6 | 	mov	local01, result1
163d0     FE 28 02 F6 | 	mov	local02, result2
163d4     FF 2A 02 F6 | 	mov	local03, result3
163d8                 | ' t1=pop() 
163d8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
163d8     1E 2A 0E F2 | 	cmp	local03, #30 wz
163dc     10 00 90 5D |  if_ne	jmp	#LR__1830
163e0     13 13 02 F6 | 	mov	arg01, local01
163e4     00 14 06 F6 | 	mov	arg02, #0
163e8     6C 50 B1 FD | 	call	#__system___float_tointeger
163ec     FD 26 02 F6 | 	mov	local01, result1
163f0                 | LR__1830
163f0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
163f0     1F 2A 0E F2 | 	cmp	local03, #31 wz
163f4     18 00 90 5D |  if_ne	jmp	#LR__1831
163f8     13 13 02 F6 | 	mov	arg01, local01
163fc     A0 53 B1 FD | 	call	#__system____builtin_atof
16400     FD 12 02 F6 | 	mov	arg01, result1
16404     00 14 06 F6 | 	mov	arg02, #0
16408     4C 50 B1 FD | 	call	#__system___float_tointeger
1640c     FD 26 02 F6 | 	mov	local01, result1
16410                 | LR__1831
16410                 | ' select case t1.result.iresult
16410     13 2D 02 F6 | 	mov	local04, local01
16414     06 2C 26 F3 | 	fle	local04, #6
16418     30 2C 62 FD | 	jmprel	local04
1641c                 | LR__1832
1641c     18 00 90 FD | 	jmp	#LR__1833
16420     AC 00 90 FD | 	jmp	#LR__1834
16424     14 01 90 FD | 	jmp	#LR__1835
16428     7C 01 90 FD | 	jmp	#LR__1836
1642c     E4 01 90 FD | 	jmp	#LR__1837
16430     78 02 90 FD | 	jmp	#LR__1838
16434     08 03 90 FD | 	jmp	#LR__1839
16438                 | LR__1833
16438     37 00 00 FF 
1643c     60 E4 05 F1 | 	add	objptr, ##28256
16440     F2 02 68 FC | 	wrlong	#1, objptr
16444     04 E4 85 F1 | 	sub	objptr, #4
16448     F2 34 69 FC | 	wrlong	#154, objptr
1644c     19 00 00 FF 
16450     00 E5 05 F1 | 	add	objptr, ##13056
16454     F2 02 68 FC | 	wrlong	#1, objptr
16458     19 00 00 FF 
1645c     04 E5 85 F1 | 	sub	objptr, ##13060
16460     F2 26 69 FC | 	wrlong	#147, objptr
16464     37 00 00 FF 
16468     58 E4 85 F1 | 	sub	objptr, ##28248
1646c     04 12 06 F6 | 	mov	arg01, #4
16470     80 FE B0 FD | 	call	#_hg010b_spin2_setfontfamily
16474     37 00 00 FF 
16478     5C E4 05 F1 | 	add	objptr, ##28252
1647c     F2 12 02 FB | 	rdlong	arg01, objptr
16480     04 E4 85 F1 | 	sub	objptr, #4
16484     F2 14 02 FB | 	rdlong	arg02, objptr
16488                 | ' 
16488                 | ' write_color:=ff
16488     37 00 00 FF 
1648c     17 E4 85 F1 | 	sub	objptr, ##28183
16490     F2 12 62 FC | 	wrlong	arg01, objptr
16494                 | ' write_background:=bb
16494     04 E4 05 F1 | 	add	objptr, #4
16498     F2 14 62 FC | 	wrlong	arg02, objptr
1649c     01 00 00 FF 
164a0     00 EA 05 F1 | 	add	ptr__dat__, ##512
164a4     52 00 00 FF 
164a8     B7 E4 05 F1 | 	add	objptr, ##42167
164ac     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
164b0     04 E4 85 F1 | 	sub	objptr, #4
164b4     03 00 80 FF 
164b8     F2 30 69 FC | 	wrlong	##1688, objptr
164bc     52 00 00 FF 
164c0     F8 E4 85 F1 | 	sub	objptr, ##42232
164c4     01 00 00 FF 
164c8     00 EA 85 F1 | 	sub	ptr__dat__, ##512
164cc     70 02 90 FD | 	jmp	#LR__1839
164d0                 | LR__1834
164d0     37 00 00 FF 
164d4     60 E4 05 F1 | 	add	objptr, ##28256
164d8     F2 00 68 FC | 	wrlong	#0, objptr
164dc     04 E4 85 F1 | 	sub	objptr, #4
164e0     F2 2E 68 FC | 	wrlong	#23, objptr
164e4     19 00 00 FF 
164e8     00 E5 05 F1 | 	add	objptr, ##13056
164ec     F2 00 68 FC | 	wrlong	#0, objptr
164f0     19 00 00 FF 
164f4     04 E5 85 F1 | 	sub	objptr, ##13060
164f8     F2 00 68 FC | 	wrlong	#0, objptr
164fc     37 00 00 FF 
16500     58 E4 85 F1 | 	sub	objptr, ##28248
16504     00 12 06 F6 | 	mov	arg01, #0
16508     E8 FD B0 FD | 	call	#_hg010b_spin2_setfontfamily
1650c     37 00 00 FF 
16510     5C E4 05 F1 | 	add	objptr, ##28252
16514     F2 12 02 FB | 	rdlong	arg01, objptr
16518     04 E4 85 F1 | 	sub	objptr, #4
1651c     F2 14 02 FB | 	rdlong	arg02, objptr
16520                 | ' 
16520                 | ' write_color:=ff
16520     37 00 00 FF 
16524     17 E4 85 F1 | 	sub	objptr, ##28183
16528     F2 12 62 FC | 	wrlong	arg01, objptr
1652c                 | ' write_background:=bb
1652c     04 E4 05 F1 | 	add	objptr, #4
16530     F2 14 62 FC | 	wrlong	arg02, objptr
16534     45 E4 85 F1 | 	sub	objptr, #69
16538     04 02 90 FD | 	jmp	#LR__1839
1653c                 | LR__1835
1653c     37 00 00 FF 
16540     60 E4 05 F1 | 	add	objptr, ##28256
16544     F2 00 68 FC | 	wrlong	#0, objptr
16548     04 E4 85 F1 | 	sub	objptr, #4
1654c     F2 6A 69 FC | 	wrlong	#181, objptr
16550     19 00 00 FF 
16554     00 E5 05 F1 | 	add	objptr, ##13056
16558     F2 00 68 FC | 	wrlong	#0, objptr
1655c     19 00 00 FF 
16560     04 E5 85 F1 | 	sub	objptr, ##13060
16564     F2 00 68 FC | 	wrlong	#0, objptr
16568     37 00 00 FF 
1656c     58 E4 85 F1 | 	sub	objptr, ##28248
16570     00 12 06 F6 | 	mov	arg01, #0
16574     7C FD B0 FD | 	call	#_hg010b_spin2_setfontfamily
16578     37 00 00 FF 
1657c     5C E4 05 F1 | 	add	objptr, ##28252
16580     F2 12 02 FB | 	rdlong	arg01, objptr
16584     04 E4 85 F1 | 	sub	objptr, #4
16588     F2 14 02 FB | 	rdlong	arg02, objptr
1658c                 | ' 
1658c                 | ' write_color:=ff
1658c     37 00 00 FF 
16590     17 E4 85 F1 | 	sub	objptr, ##28183
16594     F2 12 62 FC | 	wrlong	arg01, objptr
16598                 | ' write_background:=bb
16598     04 E4 05 F1 | 	add	objptr, #4
1659c     F2 14 62 FC | 	wrlong	arg02, objptr
165a0     45 E4 85 F1 | 	sub	objptr, #69
165a4     98 01 90 FD | 	jmp	#LR__1839
165a8                 | LR__1836
165a8     37 00 00 FF 
165ac     60 E4 05 F1 | 	add	objptr, ##28256
165b0     F2 00 68 FC | 	wrlong	#0, objptr
165b4     04 E4 85 F1 | 	sub	objptr, #4
165b8     F2 1E 68 FC | 	wrlong	#15, objptr
165bc     19 00 00 FF 
165c0     00 E5 05 F1 | 	add	objptr, ##13056
165c4     F2 00 68 FC | 	wrlong	#0, objptr
165c8     19 00 00 FF 
165cc     04 E5 85 F1 | 	sub	objptr, ##13060
165d0     F2 00 68 FC | 	wrlong	#0, objptr
165d4     37 00 00 FF 
165d8     58 E4 85 F1 | 	sub	objptr, ##28248
165dc     00 12 06 F6 | 	mov	arg01, #0
165e0     10 FD B0 FD | 	call	#_hg010b_spin2_setfontfamily
165e4     37 00 00 FF 
165e8     5C E4 05 F1 | 	add	objptr, ##28252
165ec     F2 12 02 FB | 	rdlong	arg01, objptr
165f0     04 E4 85 F1 | 	sub	objptr, #4
165f4     F2 14 02 FB | 	rdlong	arg02, objptr
165f8                 | ' 
165f8                 | ' write_color:=ff
165f8     37 00 00 FF 
165fc     17 E4 85 F1 | 	sub	objptr, ##28183
16600     F2 12 62 FC | 	wrlong	arg01, objptr
16604                 | ' write_background:=bb
16604     04 E4 05 F1 | 	add	objptr, #4
16608     F2 14 62 FC | 	wrlong	arg02, objptr
1660c     45 E4 85 F1 | 	sub	objptr, #69
16610     2C 01 90 FD | 	jmp	#LR__1839
16614                 | LR__1837
16614     37 00 00 FF 
16618     60 E4 05 F1 | 	add	objptr, ##28256
1661c     F2 02 68 FC | 	wrlong	#1, objptr
16620     04 E4 85 F1 | 	sub	objptr, #4
16624     F2 02 68 FC | 	wrlong	#1, objptr
16628     19 00 00 FF 
1662c     00 E5 05 F1 | 	add	objptr, ##13056
16630     F2 02 68 FC | 	wrlong	#1, objptr
16634     19 00 00 FF 
16638     04 E5 85 F1 | 	sub	objptr, ##13060
1663c     F2 1C 68 FC | 	wrlong	#14, objptr
16640     37 00 00 FF 
16644     58 E4 85 F1 | 	sub	objptr, ##28248
16648     04 12 06 F6 | 	mov	arg01, #4
1664c     A4 FC B0 FD | 	call	#_hg010b_spin2_setfontfamily
16650     37 00 00 FF 
16654     5C E4 05 F1 | 	add	objptr, ##28252
16658     F2 12 02 FB | 	rdlong	arg01, objptr
1665c     04 E4 85 F1 | 	sub	objptr, #4
16660     F2 14 02 FB | 	rdlong	arg02, objptr
16664                 | ' 
16664                 | ' write_color:=ff
16664     37 00 00 FF 
16668     17 E4 85 F1 | 	sub	objptr, ##28183
1666c     F2 12 62 FC | 	wrlong	arg01, objptr
16670                 | ' write_background:=bb
16670     04 E4 05 F1 | 	add	objptr, #4
16674     F2 14 62 FC | 	wrlong	arg02, objptr
16678     07 00 00 FF 
1667c     82 EB 05 F1 | 	add	ptr__dat__, ##3970
16680     52 00 00 FF 
16684     B7 E4 05 F1 | 	add	objptr, ##42167
16688     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1668c     04 E4 85 F1 | 	sub	objptr, #4
16690     03 00 80 FF 
16694     F2 30 69 FC | 	wrlong	##1688, objptr
16698     52 00 00 FF 
1669c     F8 E4 85 F1 | 	sub	objptr, ##42232
166a0     07 00 00 FF 
166a4     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
166a8     94 00 90 FD | 	jmp	#LR__1839
166ac                 | LR__1838
166ac     37 00 00 FF 
166b0     60 E4 05 F1 | 	add	objptr, ##28256
166b4     F2 04 68 FC | 	wrlong	#2, objptr
166b8     04 E4 85 F1 | 	sub	objptr, #4
166bc     F2 02 68 FC | 	wrlong	#1, objptr
166c0     19 00 00 FF 
166c4     00 E5 05 F1 | 	add	objptr, ##13056
166c8     F2 02 68 FC | 	wrlong	#1, objptr
166cc     19 00 00 FF 
166d0     04 E5 85 F1 | 	sub	objptr, ##13060
166d4     F2 0E 68 FC | 	wrlong	#7, objptr
166d8     37 00 00 FF 
166dc     58 E4 85 F1 | 	sub	objptr, ##28248
166e0     08 12 06 F6 | 	mov	arg01, #8
166e4     0C FC B0 FD | 	call	#_hg010b_spin2_setfontfamily
166e8     37 00 00 FF 
166ec     5C E4 05 F1 | 	add	objptr, ##28252
166f0     F2 12 02 FB | 	rdlong	arg01, objptr
166f4     04 E4 85 F1 | 	sub	objptr, #4
166f8     F2 14 02 FB | 	rdlong	arg02, objptr
166fc                 | ' 
166fc                 | ' write_color:=ff
166fc     37 00 00 FF 
16700     17 E4 85 F1 | 	sub	objptr, ##28183
16704     F2 12 62 FC | 	wrlong	arg01, objptr
16708                 | ' write_background:=bb
16708     04 E4 05 F1 | 	add	objptr, #4
1670c     F2 14 62 FC | 	wrlong	arg02, objptr
16710     07 00 00 FF 
16714     82 EB 05 F1 | 	add	ptr__dat__, ##3970
16718     52 00 00 FF 
1671c     B7 E4 05 F1 | 	add	objptr, ##42167
16720     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
16724     04 E4 85 F1 | 	sub	objptr, #4
16728     03 00 80 FF 
1672c     F2 30 69 FC | 	wrlong	##1688, objptr
16730     52 00 00 FF 
16734     F8 E4 85 F1 | 	sub	objptr, ##42232
16738     07 00 00 FF 
1673c     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
16740                 | LR__1839
16740     52 00 00 FF 
16744     F4 E4 05 F1 | 	add	objptr, ##42228
16748     F2 26 62 FC | 	wrlong	local01, objptr
1674c     04 E4 85 F1 | 	sub	objptr, #4
16750     F2 12 02 FB | 	rdlong	arg01, objptr
16754     0F 00 00 FF 
16758     74 E4 85 F1 | 	sub	objptr, ##7796
1675c     F2 2E 02 FB | 	rdlong	local05, objptr
16760     43 00 00 FF 
16764     7C E4 85 F1 | 	sub	objptr, ##34428
16768     17 13 82 F1 | 	sub	arg01, local05
1676c     00 14 06 F6 | 	mov	arg02, #0
16770     0A 16 06 F6 | 	mov	arg03, #10
16774     70 3C B1 FD | 	call	#__system__Number_S
16778     FD 12 02 F6 | 	mov	arg01, result1
1677c     C3 01 00 FF 
16780     6A 15 06 F6 | 	mov	arg02, ##@LR__6090
16784     E8 19 B1 FD | 	call	#__system___string_concat
16788     50 00 00 FF 
1678c     58 E5 05 F1 | 	add	objptr, ##41304
16790     F2 FA 61 FC | 	wrlong	result1, objptr
16794     19 00 00 FF 
16798     FC E4 85 F1 | 	sub	objptr, ##13052
1679c     F2 12 02 FB | 	rdlong	arg01, objptr
167a0     04 E4 85 F1 | 	sub	objptr, #4
167a4     F2 14 02 FB | 	rdlong	arg02, objptr
167a8     37 00 00 FF 
167ac     58 E4 85 F1 | 	sub	objptr, ##28248
167b0     04 FD B0 FD | 	call	#_hg010b_spin2_cls
167b4     C3 01 00 FF 
167b8     7C 13 06 F6 | 	mov	arg01, ##@LR__6091
167bc                 | ' 
167bc                 | ' write(text)
167bc     B8 00 B1 FD | 	call	#_hg010b_spin2_write
167c0                 | ' crlf
167c0     54 05 B1 FD | 	call	#_hg010b_spin2_crlf
167c4     18 00 00 FF 
167c8     40 EB 05 F1 | 	add	ptr__dat__, ##12608
167cc     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
167d0     18 00 00 FF 
167d4     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
167d8                 | ' 
167d8                 | ' write(text)
167d8     9C 00 B1 FD | 	call	#_hg010b_spin2_write
167dc                 | ' crlf
167dc     38 05 B1 FD | 	call	#_hg010b_spin2_crlf
167e0     50 00 00 FF 
167e4     58 E5 05 F1 | 	add	objptr, ##41304
167e8     F2 12 02 FB | 	rdlong	arg01, objptr
167ec     50 00 00 FF 
167f0     58 E5 85 F1 | 	sub	objptr, ##41304
167f4                 | ' 
167f4                 | ' write(text)
167f4     80 00 B1 FD | 	call	#_hg010b_spin2_write
167f8                 | ' crlf
167f8     1C 05 B1 FD | 	call	#_hg010b_spin2_crlf
167fc     A7 F0 03 F6 | 	mov	ptra, fp
16800     B2 00 A0 FD | 	call	#popregs_
16804                 | _do_mode_ret
16804     2D 00 64 FD | 	ret
16808                 | 
16808                 | ' 
16808                 | ' '-------------------- mouse
16808                 | ' 
16808                 | ' sub do_mouse
16808                 | _do_mouse
16808     14 70 BF FD | 	call	#_pop
1680c     00 FA 4D F2 | 	cmps	result1, #0 wz
16810                 | ' 
16810                 | ' t1=pop()
16810                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
16810     14 00 90 5D |  if_ne	jmp	#LR__1840
16814     10 12 06 F6 | 	mov	arg01, #16
16818     00 14 06 F6 | 	mov	arg02, #0
1681c     00 16 06 F6 | 	mov	arg03, #0
16820     00 EF B0 FD | 	call	#_hg010b_spin2_setspritesize
16824     10 00 90 FD | 	jmp	#LR__1841
16828                 | LR__1840
16828     10 12 06 F6 | 	mov	arg01, #16
1682c     20 14 06 F6 | 	mov	arg02, #32
16830     20 16 06 F6 | 	mov	arg03, #32
16834     EC EE B0 FD | 	call	#_hg010b_spin2_setspritesize
16838                 | LR__1841
16838                 | _do_mouse_ret
16838     2D 00 64 FD | 	ret
1683c                 | 
1683c                 | ' 
1683c                 | ' '-------------------- mousek
1683c                 | ' 
1683c                 | ' sub do_mousek
1683c                 | _do_mousek
1683c     00 4A 05 F6 | 	mov	COUNT_, #0
16840     A8 00 A0 FD | 	call	#pushregs_
16844     0C F0 07 F1 | 	add	ptra, #12
16848     08 4E 05 F1 | 	add	fp, #8
1684c     A7 3A 68 FC | 	wrlong	#29, fp
16850     08 4E 85 F1 | 	sub	fp, #8
16854     51 00 00 FF 
16858     70 E5 05 F1 | 	add	objptr, ##41840
1685c     F2 12 02 FB | 	rdlong	arg01, objptr
16860     51 00 00 FF 
16864     70 E5 85 F1 | 	sub	objptr, ##41840
16868     A7 12 62 FC | 	wrlong	arg01, fp
1686c     A7 12 02 F6 | 	mov	arg01, fp
16870     44 70 BF FD | 	call	#_push
16874     A7 F0 03 F6 | 	mov	ptra, fp
16878     B2 00 A0 FD | 	call	#popregs_
1687c                 | _do_mousek_ret
1687c     2D 00 64 FD | 	ret
16880                 | 
16880                 | ' 
16880                 | ' '-------------------- mousew
16880                 | ' 
16880                 | ' sub do_mousew
16880                 | _do_mousew
16880     00 4A 05 F6 | 	mov	COUNT_, #0
16884     A8 00 A0 FD | 	call	#pushregs_
16888     0C F0 07 F1 | 	add	ptra, #12
1688c     08 4E 05 F1 | 	add	fp, #8
16890     A7 38 68 FC | 	wrlong	#28, fp
16894     08 4E 85 F1 | 	sub	fp, #8
16898     51 00 00 FF 
1689c     74 E5 05 F1 | 	add	objptr, ##41844
168a0     F2 12 02 FB | 	rdlong	arg01, objptr
168a4     51 00 00 FF 
168a8     74 E5 85 F1 | 	sub	objptr, ##41844
168ac     A7 12 62 FC | 	wrlong	arg01, fp
168b0     A7 12 02 F6 | 	mov	arg01, fp
168b4     00 70 BF FD | 	call	#_push
168b8     A7 F0 03 F6 | 	mov	ptra, fp
168bc     B2 00 A0 FD | 	call	#popregs_
168c0                 | _do_mousew_ret
168c0     2D 00 64 FD | 	ret
168c4                 | 
168c4                 | ' 
168c4                 | ' '-------------------- mousex
168c4                 | ' 
168c4                 | ' sub do_mousex
168c4                 | _do_mousex
168c4     00 4A 05 F6 | 	mov	COUNT_, #0
168c8     A8 00 A0 FD | 	call	#pushregs_
168cc     0C F0 07 F1 | 	add	ptra, #12
168d0     08 4E 05 F1 | 	add	fp, #8
168d4     A7 3A 68 FC | 	wrlong	#29, fp
168d8     08 4E 85 F1 | 	sub	fp, #8
168dc     51 00 00 FF 
168e0     68 E5 05 F1 | 	add	objptr, ##41832
168e4     F2 12 02 FB | 	rdlong	arg01, objptr
168e8     51 00 00 FF 
168ec     68 E5 85 F1 | 	sub	objptr, ##41832
168f0     A7 12 62 FC | 	wrlong	arg01, fp
168f4     A7 12 02 F6 | 	mov	arg01, fp
168f8     BC 6F BF FD | 	call	#_push
168fc     A7 F0 03 F6 | 	mov	ptra, fp
16900     B2 00 A0 FD | 	call	#popregs_
16904                 | _do_mousex_ret
16904     2D 00 64 FD | 	ret
16908                 | 
16908                 | ' 
16908                 | ' '-------------------- mousey
16908                 | ' 
16908                 | ' sub do_mousey
16908                 | _do_mousey
16908     00 4A 05 F6 | 	mov	COUNT_, #0
1690c     A8 00 A0 FD | 	call	#pushregs_
16910     0C F0 07 F1 | 	add	ptra, #12
16914     08 4E 05 F1 | 	add	fp, #8
16918     A7 3A 68 FC | 	wrlong	#29, fp
1691c     08 4E 85 F1 | 	sub	fp, #8
16920     51 00 00 FF 
16924     6C E5 05 F1 | 	add	objptr, ##41836
16928     F2 12 02 FB | 	rdlong	arg01, objptr
1692c     51 00 00 FF 
16930     6C E5 85 F1 | 	sub	objptr, ##41836
16934     A7 12 62 FC | 	wrlong	arg01, fp
16938     A7 12 02 F6 | 	mov	arg01, fp
1693c     78 6F BF FD | 	call	#_push
16940     A7 F0 03 F6 | 	mov	ptra, fp
16944     B2 00 A0 FD | 	call	#popregs_
16948                 | _do_mousey_ret
16948     2D 00 64 FD | 	ret
1694c                 | 
1694c                 | ' 
1694c                 | ' '------------------ new
1694c                 | ' 
1694c                 | ' sub do_new
1694c                 | _do_new
1694c     03 4A 05 F6 | 	mov	COUNT_, #3
16950     A8 00 A0 FD | 	call	#pushregs_
16954                 | ' 
16954                 | ' if inrun=1 then inrun=2
16954     50 00 00 FF 
16958     0C E5 05 F1 | 	add	objptr, ##41228
1695c     F2 16 02 FB | 	rdlong	arg03, objptr
16960     50 00 00 FF 
16964     0C E5 85 F1 | 	sub	objptr, ##41228
16968     01 16 0E F2 | 	cmp	arg03, #1 wz
1696c     50 00 00 AF 
16970     0C E5 05 A1 |  if_e	add	objptr, ##41228
16974     F2 04 68 AC |  if_e	wrlong	#2, objptr
16978     50 00 00 AF 
1697c     0C E5 85 A1 |  if_e	sub	objptr, ##41228
16980     13 12 C6 F9 | 	decod	arg01, #19
16984     01 14 66 F6 | 	neg	arg02, #1
16988     D0 DE B0 FD | 	call	#_pslpoke
1698c     35 00 00 FF 
16990     28 E4 05 F1 | 	add	objptr, ##27176
16994     F2 00 68 FC | 	wrlong	#0, objptr
16998                 | ' pslpoke(memlo,$FFFFFFFF)
16998                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
16998     00 26 06 F6 | 	mov	local01, #0
1699c     20 00 00 FF 
169a0     10 E4 85 F1 | 	sub	objptr, ##16400
169a4     97 1E 48 FB | 	callpa	#(@LR__1851-@LR__1850)>>2,fcache_load_ptr_
169a8                 | LR__1850
169a8     13 17 02 F6 | 	mov	arg03, local01
169ac     04 16 66 F0 | 	shl	arg03, #4
169b0     F2 16 02 F1 | 	add	arg03, objptr
169b4     C3 01 00 FF 
169b8     7D 15 06 F6 | 	mov	arg02, ##@LR__6092
169bc     0B 15 62 FC | 	wrlong	arg02, arg03
169c0     13 29 02 F6 | 	mov	local02, local01
169c4     04 28 66 F0 | 	shl	local02, #4
169c8     F2 28 02 F1 | 	add	local02, objptr
169cc     0C 28 06 F1 | 	add	local02, #12
169d0     14 01 68 FC | 	wrlong	#0, local02
169d4     01 26 06 F1 | 	add	local01, #1
169d8     02 00 00 FF 
169dc     01 26 56 F2 | 	cmps	local01, ##1025 wc
169e0     C4 FF 9F CD |  if_b	jmp	#LR__1850
169e4                 | LR__1851
169e4     35 00 00 FF 
169e8     90 E4 05 F1 | 	add	objptr, ##27280
169ec     00 04 80 FF 
169f0     F2 00 68 FC | 	wrlong	##524288, objptr
169f4     06 00 00 FF 
169f8     30 E4 05 F1 | 	add	objptr, ##3120
169fc     00 04 80 FF 
16a00     F2 00 68 FC | 	wrlong	##524288, objptr
16a04     04 E4 05 F1 | 	add	objptr, #4
16a08     00 04 80 FF 
16a0c     F2 00 68 FC | 	wrlong	##524288, objptr
16a10     0D 00 00 FF 
16a14     64 E4 85 F1 | 	sub	objptr, ##6756
16a18     F2 00 68 FC | 	wrlong	#0, objptr
16a1c     07 00 00 FF 
16a20     24 E4 05 F1 | 	add	objptr, ##3620
16a24     F2 00 68 FC | 	wrlong	#0, objptr
16a28     07 00 00 FF 
16a2c     20 E4 85 F1 | 	sub	objptr, ##3616
16a30     00 04 80 FF 
16a34     F2 00 68 FC | 	wrlong	##524288, objptr
16a38     0D 00 00 FF 
16a3c     D0 E4 05 F1 | 	add	objptr, ##6864
16a40     F2 00 68 FC | 	wrlong	#0, objptr
16a44     C3 01 00 FF 
16a48     7E 2B 06 F6 | 	mov	local03, ##@LR__6093
16a4c     01 00 00 FF 
16a50     E8 E5 05 F1 | 	add	objptr, ##1000
16a54     F2 2A 62 FC | 	wrlong	local03, objptr
16a58     08 00 00 FF 
16a5c     88 E4 85 F1 | 	sub	objptr, ##4232
16a60     F2 00 68 FC | 	wrlong	#0, objptr
16a64     04 E4 05 F1 | 	add	objptr, #4
16a68     FF FF FF FF 
16a6c     F2 FE 6B FC | 	wrlong	##-1, objptr
16a70     06 00 00 FF 
16a74     A0 E4 05 F1 | 	add	objptr, ##3232
16a78     F2 00 68 FC | 	wrlong	#0, objptr
16a7c     04 E4 05 F1 | 	add	objptr, #4
16a80     F2 00 68 FC | 	wrlong	#0, objptr
16a84                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
16a84                 | ' stackpointer=0
16a84                 | ' lineptr=0 
16a84                 | ' programptr=memlo ': stringptr=0
16a84                 | ' dataptr=0 : readline=""
16a84                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
16a84                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
16a84     00 26 06 F6 | 	mov	local01, #0
16a88     06 00 00 FF 
16a8c     9C E4 85 F1 | 	sub	objptr, ##3228
16a90     97 16 48 FB | 	callpa	#(@LR__1853-@LR__1852)>>2,fcache_load_ptr_
16a94                 | LR__1852
16a94     13 29 02 F6 | 	mov	local02, local01
16a98     02 28 66 F0 | 	shl	local02, #2
16a9c     13 29 02 F1 | 	add	local02, local01
16aa0     02 28 66 F0 | 	shl	local02, #2
16aa4     F2 28 02 F1 | 	add	local02, objptr
16aa8     08 28 06 F1 | 	add	local02, #8
16aac     FF FF FF FF 
16ab0     14 FF 6B FC | 	wrlong	##-1, local02
16ab4     01 26 06 F1 | 	add	local01, #1
16ab8     41 26 56 F2 | 	cmps	local01, #65 wc
16abc     D4 FF 9F CD |  if_b	jmp	#LR__1852
16ac0                 | LR__1853
16ac0     4A 00 00 FF 
16ac4     B8 E4 85 F1 | 	sub	objptr, ##38072
16ac8                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
16ac8     00 26 06 F6 | 	mov	local01, #0
16acc                 | LR__1854
16acc     13 29 02 F6 | 	mov	local02, local01
16ad0     02 28 66 F0 | 	shl	local02, #2
16ad4     52 00 00 FF 
16ad8     AC E4 05 F1 | 	add	objptr, ##42156
16adc     F2 28 02 F1 | 	add	local02, objptr
16ae0     14 2B 0A FB | 	rdlong	local03, local02 wz
16ae4     52 00 00 FF 
16ae8     AC E4 85 F1 | 	sub	objptr, ##42156
16aec     34 00 90 AD |  if_e	jmp	#LR__1855
16af0     13 13 02 F6 | 	mov	arg01, local01
16af4     00 14 06 F6 | 	mov	arg02, #0
16af8     00 16 06 F6 | 	mov	arg03, #0
16afc     24 EC B0 FD | 	call	#_hg010b_spin2_setspritesize
16b00     13 29 02 F6 | 	mov	local02, local01
16b04     02 28 66 F0 | 	shl	local02, #2
16b08     52 00 00 FF 
16b0c     AC E4 05 F1 | 	add	objptr, ##42156
16b10     F2 28 02 F1 | 	add	local02, objptr
16b14     14 13 02 FB | 	rdlong	arg01, local02
16b18     52 00 00 FF 
16b1c     AC E4 85 F1 | 	sub	objptr, ##42156
16b20     D4 58 B1 FD | 	call	#__system___gc_free
16b24                 | LR__1855
16b24     01 26 06 F1 | 	add	local01, #1
16b28     10 26 56 F2 | 	cmps	local01, #16 wc
16b2c     9C FF 9F CD |  if_b	jmp	#LR__1854
16b30     52 00 00 FF 
16b34     00 E5 05 F1 | 	add	objptr, ##42240
16b38     00 C0 9F FF 
16b3c     F2 00 68 FC | 	wrlong	##1065353216, objptr
16b40     04 E4 05 F1 | 	add	objptr, #4
16b44     00 C0 9F FF 
16b48     F2 00 68 FC | 	wrlong	##1065353216, objptr
16b4c     52 00 00 FF 
16b50     00 E5 85 F1 | 	sub	objptr, ##42240
16b54     F2 2A 02 FB | 	rdlong	local03, objptr
16b58     52 00 00 FF 
16b5c     EC E4 05 F1 | 	add	objptr, ##42220
16b60     F2 2A 62 FC | 	wrlong	local03, objptr
16b64     52 00 00 FF 
16b68     F0 E4 85 F1 | 	sub	objptr, ##42224
16b6c     11 12 06 F6 | 	mov	arg01, #17
16b70     08 14 06 F6 | 	mov	arg02, #8
16b74     10 16 06 F6 | 	mov	arg03, #16
16b78     A8 EB B0 FD | 	call	#_hg010b_spin2_setspritesize
16b7c     10 12 06 F6 | 	mov	arg01, #16
16b80     20 14 06 F6 | 	mov	arg02, #32
16b84     20 16 06 F6 | 	mov	arg03, #32
16b88     98 EB B0 FD | 	call	#_hg010b_spin2_setspritesize
16b8c     C3 01 00 FF 
16b90     7F 2B 06 F6 | 	mov	local03, ##@LR__6094
16b94     52 00 00 FF 
16b98     1C E5 05 F1 | 	add	objptr, ##42268
16b9c     F2 2A 62 FC | 	wrlong	local03, objptr
16ba0     52 00 00 FF 
16ba4     1C E5 85 F1 | 	sub	objptr, ##42268
16ba8     CC CE B0 FD | 	call	#_init_audio
16bac     A7 F0 03 F6 | 	mov	ptra, fp
16bb0     B2 00 A0 FD | 	call	#popregs_
16bb4                 | _do_new_ret
16bb4     2D 00 64 FD | 	ret
16bb8                 | 
16bb8                 | ' 
16bb8                 | ' '-------------------- next
16bb8                 | ' 
16bb8                 | ' sub do_next()
16bb8                 | _do_next
16bb8     04 4A 05 F6 | 	mov	COUNT_, #4
16bbc     A8 00 A0 FD | 	call	#pushregs_
16bc0     5C 6C BF FD | 	call	#_pop
16bc4     FD 26 02 F6 | 	mov	local01, result1
16bc8     FE 28 02 F6 | 	mov	local02, result2
16bcc     FF 2A 02 F6 | 	mov	local03, result3
16bd0                 | ' t1=pop() :varnum=t1.result.uresult
16bd0                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
16bd0     50 00 00 FF 
16bd4     50 E5 05 F1 | 	add	objptr, ##41296
16bd8     F2 14 02 FB | 	rdlong	arg02, objptr
16bdc     0A 13 02 F6 | 	mov	arg01, arg02
16be0     02 12 66 F0 | 	shl	arg01, #2
16be4     0A 13 02 F1 | 	add	arg01, arg02
16be8     02 12 66 F0 | 	shl	arg01, #2
16bec     06 00 00 FF 
16bf0     98 E4 85 F1 | 	sub	objptr, ##3224
16bf4     F2 12 02 F1 | 	add	arg01, objptr
16bf8     08 12 06 F1 | 	add	arg01, #8
16bfc     09 15 02 FB | 	rdlong	arg02, arg01
16c00     13 15 0A F2 | 	cmp	arg02, local01 wz
16c04     4A 00 00 FF 
16c08     B8 E4 85 F1 | 	sub	objptr, ##38072
16c0c     10 00 90 AD |  if_e	jmp	#LR__1860
16c10     25 12 06 F6 | 	mov	arg01, #37
16c14     00 14 06 F6 | 	mov	arg02, #0
16c18     A0 DA B0 FD | 	call	#_printerror
16c1c     54 03 90 FD | 	jmp	#LR__1867
16c20                 | LR__1860
16c20                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
16c20     13 15 02 F6 | 	mov	arg02, local01
16c24     04 14 66 F0 | 	shl	arg02, #4
16c28     15 00 00 FF 
16c2c     18 E4 05 F1 | 	add	objptr, ##10776
16c30     F2 14 02 F1 | 	add	arg02, objptr
16c34     0C 14 06 F1 | 	add	arg02, #12
16c38     0A 15 02 FB | 	rdlong	arg02, arg02
16c3c     1E 14 0E F2 | 	cmp	arg02, #30 wz
16c40     15 00 00 FF 
16c44     18 E4 85 F1 | 	sub	objptr, ##10776
16c48     54 00 90 5D |  if_ne	jmp	#LR__1861
16c4c     13 15 02 F6 | 	mov	arg02, local01
16c50     04 14 66 F0 | 	shl	arg02, #4
16c54     15 00 00 FF 
16c58     18 E4 05 F1 | 	add	objptr, ##10776
16c5c     F2 14 02 F1 | 	add	arg02, objptr
16c60     0C 14 06 F1 | 	add	arg02, #12
16c64     0A 39 68 FC | 	wrlong	#28, arg02
16c68     13 2D 02 F6 | 	mov	local04, local01
16c6c     04 2C 66 F0 | 	shl	local04, #4
16c70     F2 2C 02 F1 | 	add	local04, objptr
16c74     13 15 02 F6 | 	mov	arg02, local01
16c78     04 14 66 F0 | 	shl	arg02, #4
16c7c     F2 14 02 F1 | 	add	arg02, objptr
16c80     04 14 06 F1 | 	add	arg02, #4
16c84     0A 13 02 FB | 	rdlong	arg01, arg02
16c88     15 00 00 FF 
16c8c     18 E4 85 F1 | 	sub	objptr, ##10776
16c90     01 14 06 F6 | 	mov	arg02, #1
16c94     C0 47 B1 FD | 	call	#__system___float_tointeger
16c98     04 2C 06 F1 | 	add	local04, #4
16c9c     16 FB 61 FC | 	wrlong	result1, local04
16ca0                 | LR__1861
16ca0     50 00 00 FF 
16ca4     50 E5 05 F1 | 	add	objptr, ##41296
16ca8     F2 2C 02 FB | 	rdlong	local04, objptr
16cac     16 15 02 F6 | 	mov	arg02, local04
16cb0     02 14 66 F0 | 	shl	arg02, #2
16cb4     16 15 02 F1 | 	add	arg02, local04
16cb8     02 14 66 F0 | 	shl	arg02, #2
16cbc     06 00 00 FF 
16cc0     98 E4 85 F1 | 	sub	objptr, ##3224
16cc4     F2 14 02 F1 | 	add	arg02, objptr
16cc8     0C 14 06 F1 | 	add	arg02, #12
16ccc     0A FF 01 FB | 	rdlong	result3, arg02
16cd0     13 2D 02 F6 | 	mov	local04, local01
16cd4     04 2C 66 F0 | 	shl	local04, #4
16cd8     35 00 00 FF 
16cdc     A0 E4 85 F1 | 	sub	objptr, ##27296
16ce0     F2 2C 02 F1 | 	add	local04, objptr
16ce4     13 15 02 F6 | 	mov	arg02, local01
16ce8     04 14 66 F0 | 	shl	arg02, #4
16cec     F2 14 02 F1 | 	add	arg02, objptr
16cf0     04 14 06 F1 | 	add	arg02, #4
16cf4     0A 13 02 FB | 	rdlong	arg01, arg02
16cf8     FF 12 02 F1 | 	add	arg01, result3
16cfc     04 2C 06 F1 | 	add	local04, #4
16d00     16 13 62 FC | 	wrlong	arg01, local04
16d04                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
16d04                 | ' if fortable(fortop).stepval>=0 then
16d04     3B 00 00 FF 
16d08     38 E5 05 F1 | 	add	objptr, ##30520
16d0c     F2 2C 02 FB | 	rdlong	local04, objptr
16d10     16 13 02 F6 | 	mov	arg01, local04
16d14     02 12 66 F0 | 	shl	arg01, #2
16d18     16 13 02 F1 | 	add	arg01, local04
16d1c     02 12 66 F0 | 	shl	arg01, #2
16d20     06 00 00 FF 
16d24     98 E4 85 F1 | 	sub	objptr, ##3224
16d28     F2 12 02 F1 | 	add	arg01, objptr
16d2c     0C 12 06 F1 | 	add	arg01, #12
16d30     09 13 02 FB | 	rdlong	arg01, arg01
16d34     00 12 56 F2 | 	cmps	arg01, #0 wc
16d38     4A 00 00 FF 
16d3c     B8 E4 85 F1 | 	sub	objptr, ##38072
16d40     78 00 90 CD |  if_b	jmp	#LR__1862
16d44                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
16d44     04 26 66 F0 | 	shl	local01, #4
16d48     15 00 00 FF 
16d4c     18 E4 05 F1 | 	add	objptr, ##10776
16d50     F2 26 02 F1 | 	add	local01, objptr
16d54     3B 00 00 FF 
16d58     38 E5 05 F1 | 	add	objptr, ##30520
16d5c     F2 12 02 FB | 	rdlong	arg01, objptr
16d60     09 2D 02 F6 | 	mov	local04, arg01
16d64     02 2C 66 F0 | 	shl	local04, #2
16d68     09 2D 02 F1 | 	add	local04, arg01
16d6c     02 2C 66 F0 | 	shl	local04, #2
16d70     06 00 00 FF 
16d74     98 E4 85 F1 | 	sub	objptr, ##3224
16d78     F2 2C 02 F1 | 	add	local04, objptr
16d7c     04 26 06 F1 | 	add	local01, #4
16d80     13 27 02 FB | 	rdlong	local01, local01
16d84     10 2C 06 F1 | 	add	local04, #16
16d88     16 2D 02 FB | 	rdlong	local04, local04
16d8c     16 27 5A F2 | 	cmps	local01, local04 wcz
16d90     4A 00 00 FF 
16d94     B8 E4 85 F1 | 	sub	objptr, ##38072
16d98     9C 00 90 ED |  if_be	jmp	#LR__1864
16d9c     50 00 00 FF 
16da0     50 E5 05 F1 | 	add	objptr, ##41296
16da4     F2 2C 02 FB | 	rdlong	local04, objptr
16da8     01 2C 86 F1 | 	sub	local04, #1
16dac     F2 2C 62 FC | 	wrlong	local04, objptr
16db0     50 00 00 FF 
16db4     50 E5 85 F1 | 	sub	objptr, ##41296
16db8     B8 01 90 FD | 	jmp	#LR__1867
16dbc                 | LR__1862
16dbc                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
16dbc     13 2D 02 F6 | 	mov	local04, local01
16dc0     04 2C 66 F0 | 	shl	local04, #4
16dc4     15 00 00 FF 
16dc8     18 E4 05 F1 | 	add	objptr, ##10776
16dcc     F2 2C 02 F1 | 	add	local04, objptr
16dd0     3B 00 00 FF 
16dd4     38 E5 05 F1 | 	add	objptr, ##30520
16dd8     F2 26 02 FB | 	rdlong	local01, objptr
16ddc     13 13 02 F6 | 	mov	arg01, local01
16de0     02 12 66 F0 | 	shl	arg01, #2
16de4     13 13 02 F1 | 	add	arg01, local01
16de8     02 12 66 F0 | 	shl	arg01, #2
16dec     06 00 00 FF 
16df0     98 E4 85 F1 | 	sub	objptr, ##3224
16df4     F2 12 02 F1 | 	add	arg01, objptr
16df8     04 2C 06 F1 | 	add	local04, #4
16dfc     16 2D 02 FB | 	rdlong	local04, local04
16e00     10 12 06 F1 | 	add	arg01, #16
16e04     09 13 02 FB | 	rdlong	arg01, arg01
16e08     09 2D 52 F2 | 	cmps	local04, arg01 wc
16e0c     4A 00 00 FF 
16e10     B8 E4 85 F1 | 	sub	objptr, ##38072
16e14     20 00 90 3D |  if_ae	jmp	#LR__1863
16e18     50 00 00 FF 
16e1c     50 E5 05 F1 | 	add	objptr, ##41296
16e20     F2 2C 02 FB | 	rdlong	local04, objptr
16e24     01 2C 86 F1 | 	sub	local04, #1
16e28     F2 2C 62 FC | 	wrlong	local04, objptr
16e2c     50 00 00 FF 
16e30     50 E5 85 F1 | 	sub	objptr, ##41296
16e34     3C 01 90 FD | 	jmp	#LR__1867
16e38                 | LR__1863
16e38                 | LR__1864
16e38                 | ' ' if not returned, goto pointer 
16e38                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
16e38     50 00 00 FF 
16e3c     0C E5 05 F1 | 	add	objptr, ##41228
16e40     F2 2C 02 FB | 	rdlong	local04, objptr
16e44     50 00 00 FF 
16e48     0C E5 85 F1 | 	sub	objptr, ##41228
16e4c     01 2C 16 F2 | 	cmp	local04, #1 wc
16e50     DC 00 90 CD |  if_b	jmp	#LR__1865
16e54     50 00 00 FF 
16e58     50 E5 05 F1 | 	add	objptr, ##41296
16e5c     F2 2C 02 FB | 	rdlong	local04, objptr
16e60     16 27 02 F6 | 	mov	local01, local04
16e64     02 26 66 F0 | 	shl	local01, #2
16e68     16 27 02 F1 | 	add	local01, local04
16e6c     02 26 66 F0 | 	shl	local01, #2
16e70     06 00 00 FF 
16e74     98 E4 85 F1 | 	sub	objptr, ##3224
16e78     F2 26 02 F1 | 	add	local01, objptr
16e7c     06 00 00 FF 
16e80     20 E4 05 F1 | 	add	objptr, ##3104
16e84     F2 2C 02 FB | 	rdlong	local04, objptr
16e88     50 00 00 FF 
16e8c     D8 E4 85 F1 | 	sub	objptr, ##41176
16e90     13 27 02 FB | 	rdlong	local01, local01
16e94     13 2D 0A F2 | 	cmp	local04, local01 wz
16e98     94 00 90 AD |  if_e	jmp	#LR__1865
16e9c     50 00 00 FF 
16ea0     50 E5 05 F1 | 	add	objptr, ##41296
16ea4     F2 2C 02 FB | 	rdlong	local04, objptr
16ea8     16 27 02 F6 | 	mov	local01, local04
16eac     02 26 66 F0 | 	shl	local01, #2
16eb0     16 27 02 F1 | 	add	local01, local04
16eb4     02 26 66 F0 | 	shl	local01, #2
16eb8     06 00 00 FF 
16ebc     98 E4 85 F1 | 	sub	objptr, ##3224
16ec0     F2 26 02 F1 | 	add	local01, objptr
16ec4     13 27 02 FB | 	rdlong	local01, local01
16ec8     06 00 00 FF 
16ecc     20 E4 05 F1 | 	add	objptr, ##3104
16ed0     F2 26 62 FC | 	wrlong	local01, objptr
16ed4     78 E4 05 F1 | 	add	objptr, #120
16ed8     F2 2C 02 FB | 	rdlong	local04, objptr
16edc     16 27 02 F6 | 	mov	local01, local04
16ee0     02 26 66 F0 | 	shl	local01, #2
16ee4     16 27 02 F1 | 	add	local01, local04
16ee8     02 26 66 F0 | 	shl	local01, #2
16eec     06 00 00 FF 
16ef0     98 E4 85 F1 | 	sub	objptr, ##3224
16ef4     F2 26 02 F1 | 	add	local01, objptr
16ef8     04 26 06 F1 | 	add	local01, #4
16efc     13 27 02 FB | 	rdlong	local01, local01
16f00     06 00 00 FF 
16f04     24 E4 05 F1 | 	add	objptr, ##3108
16f08     F2 26 62 FC | 	wrlong	local01, objptr
16f0c     06 00 00 FF 
16f10     40 E4 85 F1 | 	sub	objptr, ##3136
16f14     F2 2C 02 FB | 	rdlong	local04, objptr
16f18     01 2C 86 F1 | 	sub	local04, #1
16f1c     04 E4 05 F1 | 	add	objptr, #4
16f20     F2 2C 62 FC | 	wrlong	local04, objptr
16f24     4A 00 00 FF 
16f28     A0 E4 85 F1 | 	sub	objptr, ##38048
16f2c     44 00 90 FD | 	jmp	#LR__1866
16f30                 | LR__1865
16f30     50 00 00 FF 
16f34     50 E5 05 F1 | 	add	objptr, ##41296
16f38     F2 2C 02 FB | 	rdlong	local04, objptr
16f3c     16 27 02 F6 | 	mov	local01, local04
16f40     02 26 66 F0 | 	shl	local01, #2
16f44     16 27 02 F1 | 	add	local01, local04
16f48     02 26 66 F0 | 	shl	local01, #2
16f4c     06 00 00 FF 
16f50     98 E4 85 F1 | 	sub	objptr, ##3224
16f54     F2 26 02 F1 | 	add	local01, objptr
16f58     04 26 06 F1 | 	add	local01, #4
16f5c     13 27 02 FB | 	rdlong	local01, local01
16f60     01 26 86 F1 | 	sub	local01, #1
16f64     18 E4 85 F1 | 	sub	objptr, #24
16f68     F2 26 62 FC | 	wrlong	local01, objptr
16f6c     4A 00 00 FF 
16f70     A0 E4 85 F1 | 	sub	objptr, ##38048
16f74                 | LR__1866
16f74                 | LR__1867
16f74     A7 F0 03 F6 | 	mov	ptra, fp
16f78     B2 00 A0 FD | 	call	#popregs_
16f7c                 | _do_next_ret
16f7c     2D 00 64 FD | 	ret
16f80                 | 
16f80                 | ' 
16f80                 | ' '-------------------- no command (print "Unknown command")
16f80                 | ' 
16f80                 | ' sub do_no_command
16f80                 | _do_no_command
16f80     50 00 00 FF 
16f84     10 E5 05 F1 | 	add	objptr, ##41232
16f88     F2 14 02 FB | 	rdlong	arg02, objptr
16f8c     50 00 00 FF 
16f90     10 E5 85 F1 | 	sub	objptr, ##41232
16f94     17 12 06 F6 | 	mov	arg01, #23
16f98     20 D7 B0 FD | 	call	#_printerror
16f9c                 | _do_no_command_ret
16f9c     2D 00 64 FD | 	ret
16fa0                 | 
16fa0                 | ' 
16fa0                 | ' '-------------------- nothing
16fa0                 | ' 
16fa0                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
16fa0                 | _do_nothing
16fa0                 | _do_nothing_ret
16fa0     2D 00 64 FD | 	ret
16fa4                 | 
16fa4                 | ' 
16fa4                 | ' '-------------------- on
16fa4                 | ' 
16fa4                 | ' sub do_on
16fa4                 | _do_on
16fa4     01 4A 05 F6 | 	mov	COUNT_, #1
16fa8     A8 00 A0 FD | 	call	#pushregs_
16fac     18 F0 07 F1 | 	add	ptra, #24
16fb0     4A 00 00 FF 
16fb4     A0 E4 05 F1 | 	add	objptr, ##38048
16fb8     F2 12 02 FB | 	rdlong	arg01, objptr
16fbc     09 FD 01 F6 | 	mov	result2, arg01
16fc0     01 FC 65 F0 | 	shl	result2, #1
16fc4     09 FD 01 F1 | 	add	result2, arg01
16fc8     02 FC 65 F0 | 	shl	result2, #2
16fcc     03 00 00 FF 
16fd0     04 E4 85 F1 | 	sub	objptr, ##1540
16fd4     F2 FC 01 F1 | 	add	result2, objptr
16fd8     FE 12 02 FB | 	rdlong	arg01, result2
16fdc     14 4E 05 F1 | 	add	fp, #20
16fe0     A7 12 62 FC | 	wrlong	arg01, fp
16fe4     03 00 00 FF 
16fe8     04 E4 05 F1 | 	add	objptr, ##1540
16fec     F2 12 02 FB | 	rdlong	arg01, objptr
16ff0     09 27 02 F6 | 	mov	local01, arg01
16ff4     01 26 66 F0 | 	shl	local01, #1
16ff8     09 27 02 F1 | 	add	local01, arg01
16ffc     02 26 66 F0 | 	shl	local01, #2
17000     03 00 00 FF 
17004     04 E4 85 F1 | 	sub	objptr, ##1540
17008     F2 26 02 F1 | 	add	local01, objptr
1700c     04 26 06 F1 | 	add	local01, #4
17010     13 27 02 FB | 	rdlong	local01, local01
17014     08 4E 85 F1 | 	sub	fp, #8
17018     A7 26 62 FC | 	wrlong	local01, fp
1701c     0C 4E 85 F1 | 	sub	fp, #12
17020     47 00 00 FF 
17024     9C E4 85 F1 | 	sub	objptr, ##36508
17028     F4 67 BF FD | 	call	#_pop
1702c     FF 26 02 F6 | 	mov	local01, result3
17030     A7 FA 61 FC | 	wrlong	result1, fp
17034     04 4E 05 F1 | 	add	fp, #4
17038     A7 FC 61 FC | 	wrlong	result2, fp
1703c     04 4E 05 F1 | 	add	fp, #4
17040     A7 26 62 FC | 	wrlong	local01, fp
17044     08 4E 85 F1 | 	sub	fp, #8
17048     A7 12 02 F6 | 	mov	arg01, fp
1704c     B4 69 BF FD | 	call	#_converttoint
17050     10 4E 05 F1 | 	add	fp, #16
17054     A7 FA 61 FC | 	wrlong	result1, fp
17058                 | ' 
17058                 | ' numpar=compiledline(lineptr_e).result.uresult
17058                 | ' skip=compiledline(lineptr_e).result.twowords(1)
17058                 | ' t1=pop()
17058                 | ' t=converttoint(t1)
17058                 | ' if t<1 orelse t>numpar then return
17058     10 4E 85 F1 | 	sub	fp, #16
1705c     01 FA 55 F2 | 	cmps	result1, #1 wc
17060     58 00 90 CD |  if_b	jmp	#LR__1870
17064     10 4E 05 F1 | 	add	fp, #16
17068     A7 26 02 FB | 	rdlong	local01, fp
1706c     04 4E 05 F1 | 	add	fp, #4
17070     A7 12 02 FB | 	rdlong	arg01, fp
17074     14 4E 85 F1 | 	sub	fp, #20
17078     09 27 5A F2 | 	cmps	local01, arg01 wcz
1707c     3C 00 90 1D |  if_a	jmp	#LR__1870
17080     10 4E 05 F1 | 	add	fp, #16
17084     A7 26 02 FB | 	rdlong	local01, fp
17088     01 26 86 F1 | 	sub	local01, #1
1708c     04 4E 85 F1 | 	sub	fp, #4
17090     A7 12 02 FB | 	rdlong	arg01, fp
17094     13 13 02 FD | 	qmul	arg01, local01
17098     4A 00 00 FF 
1709c     A0 E4 05 F1 | 	add	objptr, ##38048
170a0     F2 26 02 FB | 	rdlong	local01, objptr
170a4     0C 4E 85 F1 | 	sub	fp, #12
170a8     18 12 62 FD | 	getqx	arg01
170ac     09 27 02 F1 | 	add	local01, arg01
170b0     F2 26 62 FC | 	wrlong	local01, objptr
170b4     4A 00 00 FF 
170b8     A0 E4 85 F1 | 	sub	objptr, ##38048
170bc                 | LR__1870
170bc     A7 F0 03 F6 | 	mov	ptra, fp
170c0     B2 00 A0 FD | 	call	#popregs_
170c4                 | _do_on_ret
170c4     2D 00 64 FD | 	ret
170c8                 | 
170c8                 | ' 
170c8                 | ' '-------------------- open
170c8                 | ' 
170c8                 | ' sub do_open
170c8                 | _do_open
170c8     02 4A 05 F6 | 	mov	COUNT_, #2
170cc     A8 00 A0 FD | 	call	#pushregs_
170d0     20 F0 07 F1 | 	add	ptra, #32
170d4     4A 00 00 FF 
170d8     A0 E4 05 F1 | 	add	objptr, ##38048
170dc     F2 16 02 FB | 	rdlong	arg03, objptr
170e0     0B 15 02 F6 | 	mov	arg02, arg03
170e4     01 14 66 F0 | 	shl	arg02, #1
170e8     0B 15 02 F1 | 	add	arg02, arg03
170ec     02 14 66 F0 | 	shl	arg02, #2
170f0     03 00 00 FF 
170f4     04 E4 85 F1 | 	sub	objptr, ##1540
170f8     F2 14 02 F1 | 	add	arg02, objptr
170fc     0A 17 02 FB | 	rdlong	arg03, arg02
17100     10 4E 05 F1 | 	add	fp, #16
17104     A7 16 62 FC | 	wrlong	arg03, fp
17108     10 4E 85 F1 | 	sub	fp, #16
1710c     47 00 00 FF 
17110     9C E4 85 F1 | 	sub	objptr, ##36508
17114     08 67 BF FD | 	call	#_pop
17118     FF 16 02 F6 | 	mov	arg03, result3
1711c     A7 FA 61 FC | 	wrlong	result1, fp
17120     04 4E 05 F1 | 	add	fp, #4
17124     A7 FC 61 FC | 	wrlong	result2, fp
17128     04 4E 05 F1 | 	add	fp, #4
1712c     A7 16 62 FC | 	wrlong	arg03, fp
17130                 | ' 
17130                 | ' numpar=compiledline(lineptr_e).result.uresult
17130                 | ' 
17130                 | ' t1=pop()
17130                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
17130     08 4E 85 F1 | 	sub	fp, #8
17134     2B 16 0E F2 | 	cmp	arg03, #43 wz
17138     18 00 90 5D |  if_ne	jmp	#LR__1880
1713c     A7 12 02 FB | 	rdlong	arg01, fp
17140     54 68 BF FD | 	call	#_convertstring
17144     A7 FA 61 FC | 	wrlong	result1, fp
17148     08 4E 05 F1 | 	add	fp, #8
1714c     A7 3E 68 FC | 	wrlong	#31, fp
17150     08 4E 85 F1 | 	sub	fp, #8
17154                 | LR__1880
17154                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
17154     08 4E 05 F1 | 	add	fp, #8
17158     A7 16 02 FB | 	rdlong	arg03, fp
1715c     08 4E 85 F1 | 	sub	fp, #8
17160     1F 16 0E F2 | 	cmp	arg03, #31 wz
17164     44 00 90 AD |  if_e	jmp	#LR__1881
17168     00 12 06 F6 | 	mov	arg01, #0
1716c     54 6C B1 FD | 	call	#__system___getiolock_0620
17170     FD 12 02 F6 | 	mov	arg01, result1
17174     9C 0F B1 FD | 	call	#__system___lockmem
17178     C3 01 00 FF 
1717c     8A 15 06 F6 | 	mov	arg02, ##@LR__6095
17180     00 12 06 F6 | 	mov	arg01, #0
17184     00 16 06 F6 | 	mov	arg03, #0
17188     80 1C B1 FD | 	call	#__system___basic_print_string
1718c     00 12 06 F6 | 	mov	arg01, #0
17190     0A 14 06 F6 | 	mov	arg02, #10
17194     00 16 06 F6 | 	mov	arg03, #0
17198     18 1C B1 FD | 	call	#__system___basic_print_char
1719c     00 12 06 F6 | 	mov	arg01, #0
171a0     20 6C B1 FD | 	call	#__system___getiolock_0620
171a4     FD 00 68 FC | 	wrlong	#0, result1
171a8     28 02 90 FD | 	jmp	#LR__1892
171ac                 | LR__1881
171ac     A7 16 02 FB | 	rdlong	arg03, fp
171b0     0C 4E 05 F1 | 	add	fp, #12
171b4     A7 16 62 FC | 	wrlong	arg03, fp
171b8     0C 4E 85 F1 | 	sub	fp, #12
171bc     60 66 BF FD | 	call	#_pop
171c0     FF 16 02 F6 | 	mov	arg03, result3
171c4     A7 FA 61 FC | 	wrlong	result1, fp
171c8     04 4E 05 F1 | 	add	fp, #4
171cc     A7 FC 61 FC | 	wrlong	result2, fp
171d0     04 4E 05 F1 | 	add	fp, #4
171d4     A7 16 62 FC | 	wrlong	arg03, fp
171d8                 | ' filename=t1.result.sresult
171d8                 | ' t1=pop()
171d8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
171d8     08 4E 85 F1 | 	sub	fp, #8
171dc     2B 16 0E F2 | 	cmp	arg03, #43 wz
171e0     18 00 90 5D |  if_ne	jmp	#LR__1882
171e4     A7 12 02 FB | 	rdlong	arg01, fp
171e8     AC 67 BF FD | 	call	#_convertstring
171ec     A7 FA 61 FC | 	wrlong	result1, fp
171f0     08 4E 05 F1 | 	add	fp, #8
171f4     A7 3E 68 FC | 	wrlong	#31, fp
171f8     08 4E 85 F1 | 	sub	fp, #8
171fc                 | LR__1882
171fc     14 4E 05 F1 | 	add	fp, #20
17200     A7 00 68 FC | 	wrlong	#0, fp
17204                 | ' mode=0
17204                 | ' if t1.result_type=result_string then
17204     0C 4E 85 F1 | 	sub	fp, #12
17208     A7 14 02 FB | 	rdlong	arg02, fp
1720c     08 4E 85 F1 | 	sub	fp, #8
17210     1F 14 0E F2 | 	cmp	arg02, #31 wz
17214     64 00 90 5D |  if_ne	jmp	#LR__1883
17218                 | '   if t1.result.sresult="read" then mode=1
17218     A7 12 02 FB | 	rdlong	arg01, fp
1721c     C3 01 00 FF 
17220     9C 15 06 F6 | 	mov	arg02, ##@LR__6096
17224     14 0F B1 FD | 	call	#__system___string_cmp
17228     00 FA 0D F2 | 	cmp	result1, #0 wz
1722c     14 4E 05 A1 |  if_e	add	fp, #20
17230     A7 02 68 AC |  if_e	wrlong	#1, fp
17234     14 4E 85 A1 |  if_e	sub	fp, #20
17238                 | '   if t1.result.sresult="write" then mode=2
17238     A7 12 02 FB | 	rdlong	arg01, fp
1723c     C3 01 00 FF 
17240     A1 15 06 F6 | 	mov	arg02, ##@LR__6097
17244     F4 0E B1 FD | 	call	#__system___string_cmp
17248     00 FA 0D F2 | 	cmp	result1, #0 wz
1724c     14 4E 05 A1 |  if_e	add	fp, #20
17250     A7 04 68 AC |  if_e	wrlong	#2, fp
17254     14 4E 85 A1 |  if_e	sub	fp, #20
17258                 | '   if t1.result.sresult="append" then mode=4
17258     A7 12 02 FB | 	rdlong	arg01, fp
1725c     C3 01 00 FF 
17260     A7 15 06 F6 | 	mov	arg02, ##@LR__6098
17264     D4 0E B1 FD | 	call	#__system___string_cmp
17268     00 FA 0D F2 | 	cmp	result1, #0 wz
1726c     14 4E 05 A1 |  if_e	add	fp, #20
17270     A7 08 68 AC |  if_e	wrlong	#4, fp
17274     14 4E 85 A1 |  if_e	sub	fp, #20
17278     14 00 90 FD | 	jmp	#LR__1884
1727c                 | LR__1883
1727c     A7 12 02 F6 | 	mov	arg01, fp
17280     80 67 BF FD | 	call	#_converttoint
17284     14 4E 05 F1 | 	add	fp, #20
17288     A7 FA 61 FC | 	wrlong	result1, fp
1728c     14 4E 85 F1 | 	sub	fp, #20
17290                 | LR__1884
17290     8C 65 BF FD | 	call	#_pop
17294     FF 16 02 F6 | 	mov	arg03, result3
17298     A7 FA 61 FC | 	wrlong	result1, fp
1729c     04 4E 05 F1 | 	add	fp, #4
172a0     A7 FC 61 FC | 	wrlong	result2, fp
172a4     04 4E 05 F1 | 	add	fp, #4
172a8     A7 16 62 FC | 	wrlong	arg03, fp
172ac                 | ' t1=pop()
172ac                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
172ac     08 4E 85 F1 | 	sub	fp, #8
172b0     2C 16 0E F2 | 	cmp	arg03, #44 wz
172b4     44 00 90 AD |  if_e	jmp	#LR__1885
172b8     00 12 06 F6 | 	mov	arg01, #0
172bc     04 6B B1 FD | 	call	#__system___getiolock_0620
172c0     FD 12 02 F6 | 	mov	arg01, result1
172c4     4C 0E B1 FD | 	call	#__system___lockmem
172c8     C3 01 00 FF 
172cc     AE 15 06 F6 | 	mov	arg02, ##@LR__6099
172d0     00 12 06 F6 | 	mov	arg01, #0
172d4     00 16 06 F6 | 	mov	arg03, #0
172d8     30 1B B1 FD | 	call	#__system___basic_print_string
172dc     00 12 06 F6 | 	mov	arg01, #0
172e0     0A 14 06 F6 | 	mov	arg02, #10
172e4     00 16 06 F6 | 	mov	arg03, #0
172e8     C8 1A B1 FD | 	call	#__system___basic_print_char
172ec     00 12 06 F6 | 	mov	arg01, #0
172f0     D0 6A B1 FD | 	call	#__system___getiolock_0620
172f4     FD 00 68 FC | 	wrlong	#0, result1
172f8     D8 00 90 FD | 	jmp	#LR__1892
172fc                 | LR__1885
172fc     A7 26 02 FB | 	rdlong	local01, fp
17300     18 4E 05 F1 | 	add	fp, #24
17304     A7 26 62 FC | 	wrlong	local01, fp
17308                 | ' channel  = t1.result.iresult
17308                 | ' select case  mode
17308     04 4E 85 F1 | 	sub	fp, #4
1730c     A7 28 02 FB | 	rdlong	local02, fp
17310     14 4E 85 F1 | 	sub	fp, #20
17314     01 28 86 F1 | 	sub	local02, #1
17318     04 28 26 F3 | 	fle	local02, #4
1731c     30 28 62 FD | 	jmprel	local02
17320                 | LR__1886
17320     10 00 90 FD | 	jmp	#LR__1887
17324     2C 00 90 FD | 	jmp	#LR__1888
17328     68 00 90 FD | 	jmp	#LR__1890
1732c     44 00 90 FD | 	jmp	#LR__1889
17330     60 00 90 FD | 	jmp	#LR__1890
17334                 | LR__1887
17334     18 4E 05 F1 | 	add	fp, #24
17338     A7 12 02 FB | 	rdlong	arg01, fp
1733c     0C 4E 85 F1 | 	sub	fp, #12
17340     A7 14 02 FB | 	rdlong	arg02, fp
17344     0C 4E 85 F1 | 	sub	fp, #12
17348     00 16 06 F6 | 	mov	arg03, #0
1734c     C8 19 B1 FD | 	call	#__system___basic_open_string
17350     80 00 90 FD | 	jmp	#LR__1891
17354                 | LR__1888
17354     18 4E 05 F1 | 	add	fp, #24
17358     A7 12 02 FB | 	rdlong	arg01, fp
1735c     0C 4E 85 F1 | 	sub	fp, #12
17360     A7 14 02 FB | 	rdlong	arg02, fp
17364     0C 4E 85 F1 | 	sub	fp, #12
17368     0D 16 06 F6 | 	mov	arg03, #13
1736c     A8 19 B1 FD | 	call	#__system___basic_open_string
17370     60 00 90 FD | 	jmp	#LR__1891
17374                 | LR__1889
17374     18 4E 05 F1 | 	add	fp, #24
17378     A7 12 02 FB | 	rdlong	arg01, fp
1737c     0C 4E 85 F1 | 	sub	fp, #12
17380     A7 14 02 FB | 	rdlong	arg02, fp
17384     0C 4E 85 F1 | 	sub	fp, #12
17388     25 16 06 F6 | 	mov	arg03, #37
1738c     88 19 B1 FD | 	call	#__system___basic_open_string
17390     40 00 90 FD | 	jmp	#LR__1891
17394                 | LR__1890
17394     00 12 06 F6 | 	mov	arg01, #0
17398     28 6A B1 FD | 	call	#__system___getiolock_0620
1739c     FD 12 02 F6 | 	mov	arg01, result1
173a0     70 0D B1 FD | 	call	#__system___lockmem
173a4     C3 01 00 FF 
173a8     C0 15 06 F6 | 	mov	arg02, ##@LR__6100
173ac     00 12 06 F6 | 	mov	arg01, #0
173b0     00 16 06 F6 | 	mov	arg03, #0
173b4     54 1A B1 FD | 	call	#__system___basic_print_string
173b8     00 12 06 F6 | 	mov	arg01, #0
173bc     0A 14 06 F6 | 	mov	arg02, #10
173c0     00 16 06 F6 | 	mov	arg03, #0
173c4     EC 19 B1 FD | 	call	#__system___basic_print_char
173c8     00 12 06 F6 | 	mov	arg01, #0
173cc     F4 69 B1 FD | 	call	#__system___getiolock_0620
173d0     FD 00 68 FC | 	wrlong	#0, result1
173d4                 | LR__1891
173d4                 | LR__1892
173d4     A7 F0 03 F6 | 	mov	ptra, fp
173d8     B2 00 A0 FD | 	call	#popregs_
173dc                 | _do_open_ret
173dc     2D 00 64 FD | 	ret
173e0                 | 
173e0                 | ' 
173e0                 | ' ' ------------------ padrx
173e0                 | ' 
173e0                 | ' sub do_padrx
173e0                 | _do_padrx
173e0     02 4A 05 F6 | 	mov	COUNT_, #2
173e4     A8 00 A0 FD | 	call	#pushregs_
173e8     14 F0 07 F1 | 	add	ptra, #20
173ec     4A 00 00 FF 
173f0     A0 E4 05 F1 | 	add	objptr, ##38048
173f4     F2 26 02 FB | 	rdlong	local01, objptr
173f8     13 17 02 F6 | 	mov	arg03, local01
173fc     01 16 66 F0 | 	shl	arg03, #1
17400     13 17 02 F1 | 	add	arg03, local01
17404     02 16 66 F0 | 	shl	arg03, #2
17408     03 00 00 FF 
1740c     04 E4 85 F1 | 	sub	objptr, ##1540
17410     F2 16 02 F1 | 	add	arg03, objptr
17414     0B 17 02 FB | 	rdlong	arg03, arg03
17418     0C 4E 05 F1 | 	add	fp, #12
1741c     A7 16 62 FC | 	wrlong	arg03, fp
17420                 | ' 
17420                 | ' numpar=compiledline(lineptr_e).result.uresult
17420                 | ' if numpar>1 then print "padrx: "; : printerror(39) : return
17420     0C 4E 85 F1 | 	sub	fp, #12
17424     02 16 16 F2 | 	cmp	arg03, #2 wc
17428     47 00 00 FF 
1742c     9C E4 85 F1 | 	sub	objptr, ##36508
17430     40 00 90 CD |  if_b	jmp	#LR__1900
17434     00 12 06 F6 | 	mov	arg01, #0
17438     88 69 B1 FD | 	call	#__system___getiolock_0620
1743c     FD 12 02 F6 | 	mov	arg01, result1
17440     D0 0C B1 FD | 	call	#__system___lockmem
17444     C3 01 00 FF 
17448     D3 15 06 F6 | 	mov	arg02, ##@LR__6101
1744c     00 12 06 F6 | 	mov	arg01, #0
17450     00 16 06 F6 | 	mov	arg03, #0
17454     B4 19 B1 FD | 	call	#__system___basic_print_string
17458     00 12 06 F6 | 	mov	arg01, #0
1745c     64 69 B1 FD | 	call	#__system___getiolock_0620
17460     FD 00 68 FC | 	wrlong	#0, result1
17464     27 12 06 F6 | 	mov	arg01, #39
17468     00 14 06 F6 | 	mov	arg02, #0
1746c     4C D2 B0 FD | 	call	#_printerror
17470     E0 01 90 FD | 	jmp	#LR__1904
17474                 | LR__1900
17474                 | ' if numpar=0 then 
17474     0C 4E 05 F1 | 	add	fp, #12
17478     A7 FE 09 FB | 	rdlong	result3, fp wz
1747c     0C 4E 85 F1 | 	sub	fp, #12
17480     A8 00 90 5D |  if_ne	jmp	#LR__1901
17484     00 C0 1B FF 
17488     00 26 06 F6 | 	mov	local01, ##931135488
1748c     51 00 00 FF 
17490     E8 E5 05 F1 | 	add	objptr, ##41960
17494     F2 12 02 FB | 	rdlong	arg01, objptr
17498     51 00 00 FF 
1749c     E8 E5 85 F1 | 	sub	objptr, ##41960
174a0     09 13 52 F6 | 	abs	arg01, arg01 wc
174a4     1F 28 C6 C9 |  if_b	decod	local02, #31
174a8     00 28 06 36 |  if_ae	mov	local02, #0
174ac     DC 36 B1 FD | 	call	#__system___float_fromuns
174b0     14 FB 61 F5 | 	xor	result1, local02
174b4     FD 12 02 F6 | 	mov	arg01, result1
174b8     FF 7F 23 FF 
174bc     00 14 06 F6 | 	mov	arg02, ##1191181824
174c0     D0 3C B1 FD | 	call	#__system___float_div
174c4     FD 14 02 F6 | 	mov	arg02, result1
174c8     13 13 02 F6 | 	mov	arg01, local01
174cc     F0 36 B1 FD | 	call	#__system___float_add
174d0     10 4E 05 F1 | 	add	fp, #16
174d4     A7 FA 61 FC | 	wrlong	result1, fp
174d8                 | '   fpad=(1.0/65536.0)+padrx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
174d8     10 4E 85 F1 | 	sub	fp, #16
174dc     1F FA 05 F4 | 	bitl	result1, #31
174e0     FD 12 02 F6 | 	mov	arg01, result1
174e4     89 41 1D FF 
174e8     6F 14 06 F6 | 	mov	arg02, ##981668463
174ec     01 16 06 F6 | 	mov	arg03, #1
174f0     D0 3E B1 FD | 	call	#__system___float_cmp
174f4     00 FA 55 F2 | 	cmps	result1, #0 wc
174f8     10 4E 05 C1 |  if_b	add	fp, #16
174fc     A7 00 68 CC |  if_b	wrlong	#0, fp
17500     10 4E 85 C1 |  if_b	sub	fp, #16
17504     10 4E 05 F1 | 	add	fp, #16
17508     A7 26 02 FB | 	rdlong	local01, fp
1750c     10 4E 85 F1 | 	sub	fp, #16
17510     A7 26 62 FC | 	wrlong	local01, fp
17514     08 4E 05 F1 | 	add	fp, #8
17518     A7 3C 68 FC | 	wrlong	#30, fp
1751c     08 4E 85 F1 | 	sub	fp, #8
17520     A7 12 02 F6 | 	mov	arg01, fp
17524     90 63 BF FD | 	call	#_push
17528                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17528     28 01 90 FD | 	jmp	#LR__1904
1752c                 | LR__1901
1752c     F0 62 BF FD | 	call	#_pop
17530     A7 FA 61 FC | 	wrlong	result1, fp
17534     04 4E 05 F1 | 	add	fp, #4
17538     A7 FC 61 FC | 	wrlong	result2, fp
1753c     04 4E 05 F1 | 	add	fp, #4
17540     A7 FE 61 FC | 	wrlong	result3, fp
17544                 | ' t1=pop()
17544                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17544     08 4E 85 F1 | 	sub	fp, #8
17548     1C FE 0D F2 | 	cmp	result3, #28 wz
1754c     08 4E 05 51 |  if_ne	add	fp, #8
17550     A7 26 02 5B |  if_ne	rdlong	local01, fp
17554     08 4E 85 51 |  if_ne	sub	fp, #8
17558     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1755c     E8 00 90 5D |  if_ne	jmp	#LR__1903
17560     A7 26 02 FB | 	rdlong	local01, fp
17564     52 00 00 FF 
17568     60 E5 05 F1 | 	add	objptr, ##42336
1756c     F2 26 62 FC | 	wrlong	local01, objptr
17570                 | '   q=t1.result.uresult
17570                 | '   if q<7 then 
17570     52 00 00 FF 
17574     60 E5 85 F1 | 	sub	objptr, ##42336
17578     07 26 56 F2 | 	cmps	local01, #7 wc
1757c     B8 00 90 3D |  if_ae	jmp	#LR__1902
17580     00 C0 1B FF 
17584     00 26 06 F6 | 	mov	local01, ##931135488
17588     52 00 00 FF 
1758c     60 E5 05 F1 | 	add	objptr, ##42336
17590     F2 16 02 FB | 	rdlong	arg03, objptr
17594     02 16 66 F0 | 	shl	arg03, #2
17598     78 E5 85 F1 | 	sub	objptr, #376
1759c     F2 16 02 F1 | 	add	arg03, objptr
175a0     0B 13 02 FB | 	rdlong	arg01, arg03
175a4     51 00 00 FF 
175a8     E8 E5 85 F1 | 	sub	objptr, ##41960
175ac     09 13 52 F6 | 	abs	arg01, arg01 wc
175b0     1F 28 C6 C9 |  if_b	decod	local02, #31
175b4     00 28 06 36 |  if_ae	mov	local02, #0
175b8     D0 35 B1 FD | 	call	#__system___float_fromuns
175bc     14 FB 61 F5 | 	xor	result1, local02
175c0     FD 12 02 F6 | 	mov	arg01, result1
175c4     FF 7F 23 FF 
175c8     00 14 06 F6 | 	mov	arg02, ##1191181824
175cc     C4 3B B1 FD | 	call	#__system___float_div
175d0     FD 14 02 F6 | 	mov	arg02, result1
175d4     13 13 02 F6 | 	mov	arg01, local01
175d8     E4 35 B1 FD | 	call	#__system___float_add
175dc     10 4E 05 F1 | 	add	fp, #16
175e0     A7 FA 61 FC | 	wrlong	result1, fp
175e4                 | '     fpad=(1.0/65536.0)+padrx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
175e4     10 4E 85 F1 | 	sub	fp, #16
175e8     1F FA 05 F4 | 	bitl	result1, #31
175ec     FD 12 02 F6 | 	mov	arg01, result1
175f0     89 41 1D FF 
175f4     6F 14 06 F6 | 	mov	arg02, ##981668463
175f8     01 16 06 F6 | 	mov	arg03, #1
175fc     C4 3D B1 FD | 	call	#__system___float_cmp
17600     00 FA 55 F2 | 	cmps	result1, #0 wc
17604     10 4E 05 C1 |  if_b	add	fp, #16
17608     A7 00 68 CC |  if_b	wrlong	#0, fp
1760c     10 4E 85 C1 |  if_b	sub	fp, #16
17610     10 4E 05 F1 | 	add	fp, #16
17614     A7 26 02 FB | 	rdlong	local01, fp
17618     10 4E 85 F1 | 	sub	fp, #16
1761c     A7 26 62 FC | 	wrlong	local01, fp
17620     08 4E 05 F1 | 	add	fp, #8
17624     A7 3C 68 FC | 	wrlong	#30, fp
17628     08 4E 85 F1 | 	sub	fp, #8
1762c     A7 12 02 F6 | 	mov	arg01, fp
17630     84 62 BF FD | 	call	#_push
17634                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17634     1C 00 90 FD | 	jmp	#LR__1904
17638                 | LR__1902
17638     29 12 06 F6 | 	mov	arg01, #41
1763c     00 14 06 F6 | 	mov	arg02, #0
17640     78 D0 B0 FD | 	call	#_printerror
17644                 | '      printerror(41) : return
17644     0C 00 90 FD | 	jmp	#LR__1904
17648                 | LR__1903
17648     29 12 06 F6 | 	mov	arg01, #41
1764c     00 14 06 F6 | 	mov	arg02, #0
17650     68 D0 B0 FD | 	call	#_printerror
17654                 | LR__1904
17654     A7 F0 03 F6 | 	mov	ptra, fp
17658     B2 00 A0 FD | 	call	#popregs_
1765c                 | _do_padrx_ret
1765c     2D 00 64 FD | 	ret
17660                 | 
17660                 | ' 
17660                 | ' ' ------------------ padry
17660                 | ' 
17660                 | ' sub do_padry
17660                 | _do_padry
17660     02 4A 05 F6 | 	mov	COUNT_, #2
17664     A8 00 A0 FD | 	call	#pushregs_
17668     14 F0 07 F1 | 	add	ptra, #20
1766c     4A 00 00 FF 
17670     A0 E4 05 F1 | 	add	objptr, ##38048
17674     F2 26 02 FB | 	rdlong	local01, objptr
17678     13 17 02 F6 | 	mov	arg03, local01
1767c     01 16 66 F0 | 	shl	arg03, #1
17680     13 17 02 F1 | 	add	arg03, local01
17684     02 16 66 F0 | 	shl	arg03, #2
17688     03 00 00 FF 
1768c     04 E4 85 F1 | 	sub	objptr, ##1540
17690     F2 16 02 F1 | 	add	arg03, objptr
17694     0B 17 02 FB | 	rdlong	arg03, arg03
17698     0C 4E 05 F1 | 	add	fp, #12
1769c     A7 16 62 FC | 	wrlong	arg03, fp
176a0                 | ' 
176a0                 | ' numpar=compiledline(lineptr_e).result.uresult
176a0                 | ' if numpar>1 then print "padry: "; : printerror(39) : return
176a0     0C 4E 85 F1 | 	sub	fp, #12
176a4     02 16 16 F2 | 	cmp	arg03, #2 wc
176a8     47 00 00 FF 
176ac     9C E4 85 F1 | 	sub	objptr, ##36508
176b0     40 00 90 CD |  if_b	jmp	#LR__1910
176b4     00 12 06 F6 | 	mov	arg01, #0
176b8     08 67 B1 FD | 	call	#__system___getiolock_0620
176bc     FD 12 02 F6 | 	mov	arg01, result1
176c0     50 0A B1 FD | 	call	#__system___lockmem
176c4     C3 01 00 FF 
176c8     DB 15 06 F6 | 	mov	arg02, ##@LR__6102
176cc     00 12 06 F6 | 	mov	arg01, #0
176d0     00 16 06 F6 | 	mov	arg03, #0
176d4     34 17 B1 FD | 	call	#__system___basic_print_string
176d8     00 12 06 F6 | 	mov	arg01, #0
176dc     E4 66 B1 FD | 	call	#__system___getiolock_0620
176e0     FD 00 68 FC | 	wrlong	#0, result1
176e4     27 12 06 F6 | 	mov	arg01, #39
176e8     00 14 06 F6 | 	mov	arg02, #0
176ec     CC CF B0 FD | 	call	#_printerror
176f0     E0 01 90 FD | 	jmp	#LR__1914
176f4                 | LR__1910
176f4                 | ' if numpar=0 then 
176f4     0C 4E 05 F1 | 	add	fp, #12
176f8     A7 FE 09 FB | 	rdlong	result3, fp wz
176fc     0C 4E 85 F1 | 	sub	fp, #12
17700     A8 00 90 5D |  if_ne	jmp	#LR__1911
17704     00 C0 1B FF 
17708     00 26 06 F6 | 	mov	local01, ##931135488
1770c     52 00 00 FF 
17710     04 E4 05 F1 | 	add	objptr, ##41988
17714     F2 12 02 FB | 	rdlong	arg01, objptr
17718     52 00 00 FF 
1771c     04 E4 85 F1 | 	sub	objptr, ##41988
17720     09 13 52 F6 | 	abs	arg01, arg01 wc
17724     1F 28 C6 C9 |  if_b	decod	local02, #31
17728     00 28 06 36 |  if_ae	mov	local02, #0
1772c     5C 34 B1 FD | 	call	#__system___float_fromuns
17730     14 FB 61 F5 | 	xor	result1, local02
17734     FD 12 02 F6 | 	mov	arg01, result1
17738     FF 7F 23 FF 
1773c     00 14 06 F6 | 	mov	arg02, ##1191181824
17740     50 3A B1 FD | 	call	#__system___float_div
17744     FD 14 02 F6 | 	mov	arg02, result1
17748     13 13 02 F6 | 	mov	arg01, local01
1774c     70 34 B1 FD | 	call	#__system___float_add
17750     10 4E 05 F1 | 	add	fp, #16
17754     A7 FA 61 FC | 	wrlong	result1, fp
17758                 | '   fpad=(1.0/65536.0)+padry(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17758     10 4E 85 F1 | 	sub	fp, #16
1775c     1F FA 05 F4 | 	bitl	result1, #31
17760     FD 12 02 F6 | 	mov	arg01, result1
17764     89 41 1D FF 
17768     6F 14 06 F6 | 	mov	arg02, ##981668463
1776c     01 16 06 F6 | 	mov	arg03, #1
17770     50 3C B1 FD | 	call	#__system___float_cmp
17774     00 FA 55 F2 | 	cmps	result1, #0 wc
17778     10 4E 05 C1 |  if_b	add	fp, #16
1777c     A7 00 68 CC |  if_b	wrlong	#0, fp
17780     10 4E 85 C1 |  if_b	sub	fp, #16
17784     10 4E 05 F1 | 	add	fp, #16
17788     A7 26 02 FB | 	rdlong	local01, fp
1778c     10 4E 85 F1 | 	sub	fp, #16
17790     A7 26 62 FC | 	wrlong	local01, fp
17794     08 4E 05 F1 | 	add	fp, #8
17798     A7 3C 68 FC | 	wrlong	#30, fp
1779c     08 4E 85 F1 | 	sub	fp, #8
177a0     A7 12 02 F6 | 	mov	arg01, fp
177a4     10 61 BF FD | 	call	#_push
177a8                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
177a8     28 01 90 FD | 	jmp	#LR__1914
177ac                 | LR__1911
177ac     70 60 BF FD | 	call	#_pop
177b0     A7 FA 61 FC | 	wrlong	result1, fp
177b4     04 4E 05 F1 | 	add	fp, #4
177b8     A7 FC 61 FC | 	wrlong	result2, fp
177bc     04 4E 05 F1 | 	add	fp, #4
177c0     A7 FE 61 FC | 	wrlong	result3, fp
177c4                 | ' t1=pop()
177c4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
177c4     08 4E 85 F1 | 	sub	fp, #8
177c8     1C FE 0D F2 | 	cmp	result3, #28 wz
177cc     08 4E 05 51 |  if_ne	add	fp, #8
177d0     A7 26 02 5B |  if_ne	rdlong	local01, fp
177d4     08 4E 85 51 |  if_ne	sub	fp, #8
177d8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
177dc     E8 00 90 5D |  if_ne	jmp	#LR__1913
177e0     A7 26 02 FB | 	rdlong	local01, fp
177e4     52 00 00 FF 
177e8     60 E5 05 F1 | 	add	objptr, ##42336
177ec     F2 26 62 FC | 	wrlong	local01, objptr
177f0                 | '   q=t1.result.uresult
177f0                 | '   if q<7 then 
177f0     52 00 00 FF 
177f4     60 E5 85 F1 | 	sub	objptr, ##42336
177f8     07 26 56 F2 | 	cmps	local01, #7 wc
177fc     B8 00 90 3D |  if_ae	jmp	#LR__1912
17800     00 C0 1B FF 
17804     00 26 06 F6 | 	mov	local01, ##931135488
17808     52 00 00 FF 
1780c     60 E5 05 F1 | 	add	objptr, ##42336
17810     F2 16 02 FB | 	rdlong	arg03, objptr
17814     02 16 66 F0 | 	shl	arg03, #2
17818     5C E5 85 F1 | 	sub	objptr, #348
1781c     F2 16 02 F1 | 	add	arg03, objptr
17820     0B 13 02 FB | 	rdlong	arg01, arg03
17824     52 00 00 FF 
17828     04 E4 85 F1 | 	sub	objptr, ##41988
1782c     09 13 52 F6 | 	abs	arg01, arg01 wc
17830     1F 28 C6 C9 |  if_b	decod	local02, #31
17834     00 28 06 36 |  if_ae	mov	local02, #0
17838     50 33 B1 FD | 	call	#__system___float_fromuns
1783c     14 FB 61 F5 | 	xor	result1, local02
17840     FD 12 02 F6 | 	mov	arg01, result1
17844     FF 7F 23 FF 
17848     00 14 06 F6 | 	mov	arg02, ##1191181824
1784c     44 39 B1 FD | 	call	#__system___float_div
17850     FD 14 02 F6 | 	mov	arg02, result1
17854     13 13 02 F6 | 	mov	arg01, local01
17858     64 33 B1 FD | 	call	#__system___float_add
1785c     10 4E 05 F1 | 	add	fp, #16
17860     A7 FA 61 FC | 	wrlong	result1, fp
17864                 | '     fpad=(1.0/65536.0)+padry(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17864     10 4E 85 F1 | 	sub	fp, #16
17868     1F FA 05 F4 | 	bitl	result1, #31
1786c     FD 12 02 F6 | 	mov	arg01, result1
17870     89 41 1D FF 
17874     6F 14 06 F6 | 	mov	arg02, ##981668463
17878     01 16 06 F6 | 	mov	arg03, #1
1787c     44 3B B1 FD | 	call	#__system___float_cmp
17880     00 FA 55 F2 | 	cmps	result1, #0 wc
17884     10 4E 05 C1 |  if_b	add	fp, #16
17888     A7 00 68 CC |  if_b	wrlong	#0, fp
1788c     10 4E 85 C1 |  if_b	sub	fp, #16
17890     10 4E 05 F1 | 	add	fp, #16
17894     A7 26 02 FB | 	rdlong	local01, fp
17898     10 4E 85 F1 | 	sub	fp, #16
1789c     A7 26 62 FC | 	wrlong	local01, fp
178a0     08 4E 05 F1 | 	add	fp, #8
178a4     A7 3C 68 FC | 	wrlong	#30, fp
178a8     08 4E 85 F1 | 	sub	fp, #8
178ac     A7 12 02 F6 | 	mov	arg01, fp
178b0     04 60 BF FD | 	call	#_push
178b4                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
178b4     1C 00 90 FD | 	jmp	#LR__1914
178b8                 | LR__1912
178b8     29 12 06 F6 | 	mov	arg01, #41
178bc     00 14 06 F6 | 	mov	arg02, #0
178c0     F8 CD B0 FD | 	call	#_printerror
178c4                 | '      printerror(41) : return
178c4     0C 00 90 FD | 	jmp	#LR__1914
178c8                 | LR__1913
178c8     29 12 06 F6 | 	mov	arg01, #41
178cc     00 14 06 F6 | 	mov	arg02, #0
178d0     E8 CD B0 FD | 	call	#_printerror
178d4                 | LR__1914
178d4     A7 F0 03 F6 | 	mov	ptra, fp
178d8     B2 00 A0 FD | 	call	#popregs_
178dc                 | _do_padry_ret
178dc     2D 00 64 FD | 	ret
178e0                 | 
178e0                 | ' 
178e0                 | ' ' ------------------ padrz
178e0                 | ' 
178e0                 | ' sub do_padrz
178e0                 | _do_padrz
178e0     02 4A 05 F6 | 	mov	COUNT_, #2
178e4     A8 00 A0 FD | 	call	#pushregs_
178e8     14 F0 07 F1 | 	add	ptra, #20
178ec     4A 00 00 FF 
178f0     A0 E4 05 F1 | 	add	objptr, ##38048
178f4     F2 26 02 FB | 	rdlong	local01, objptr
178f8     13 17 02 F6 | 	mov	arg03, local01
178fc     01 16 66 F0 | 	shl	arg03, #1
17900     13 17 02 F1 | 	add	arg03, local01
17904     02 16 66 F0 | 	shl	arg03, #2
17908     03 00 00 FF 
1790c     04 E4 85 F1 | 	sub	objptr, ##1540
17910     F2 16 02 F1 | 	add	arg03, objptr
17914     0B 17 02 FB | 	rdlong	arg03, arg03
17918     0C 4E 05 F1 | 	add	fp, #12
1791c     A7 16 62 FC | 	wrlong	arg03, fp
17920                 | ' 
17920                 | ' numpar=compiledline(lineptr_e).result.uresult
17920                 | ' if numpar>1 then print "padrz: "; : printerror(39) : return
17920     0C 4E 85 F1 | 	sub	fp, #12
17924     02 16 16 F2 | 	cmp	arg03, #2 wc
17928     47 00 00 FF 
1792c     9C E4 85 F1 | 	sub	objptr, ##36508
17930     40 00 90 CD |  if_b	jmp	#LR__1920
17934     00 12 06 F6 | 	mov	arg01, #0
17938     88 64 B1 FD | 	call	#__system___getiolock_0620
1793c     FD 12 02 F6 | 	mov	arg01, result1
17940     D0 07 B1 FD | 	call	#__system___lockmem
17944     C3 01 00 FF 
17948     E3 15 06 F6 | 	mov	arg02, ##@LR__6103
1794c     00 12 06 F6 | 	mov	arg01, #0
17950     00 16 06 F6 | 	mov	arg03, #0
17954     B4 14 B1 FD | 	call	#__system___basic_print_string
17958     00 12 06 F6 | 	mov	arg01, #0
1795c     64 64 B1 FD | 	call	#__system___getiolock_0620
17960     FD 00 68 FC | 	wrlong	#0, result1
17964     27 12 06 F6 | 	mov	arg01, #39
17968     00 14 06 F6 | 	mov	arg02, #0
1796c     4C CD B0 FD | 	call	#_printerror
17970     E0 01 90 FD | 	jmp	#LR__1924
17974                 | LR__1920
17974                 | ' if numpar=0 then 
17974     0C 4E 05 F1 | 	add	fp, #12
17978     A7 FE 09 FB | 	rdlong	result3, fp wz
1797c     0C 4E 85 F1 | 	sub	fp, #12
17980     A8 00 90 5D |  if_ne	jmp	#LR__1921
17984     00 C0 1B FF 
17988     00 26 06 F6 | 	mov	local01, ##931135488
1798c     52 00 00 FF 
17990     20 E4 05 F1 | 	add	objptr, ##42016
17994     F2 12 02 FB | 	rdlong	arg01, objptr
17998     52 00 00 FF 
1799c     20 E4 85 F1 | 	sub	objptr, ##42016
179a0     09 13 52 F6 | 	abs	arg01, arg01 wc
179a4     1F 28 C6 C9 |  if_b	decod	local02, #31
179a8     00 28 06 36 |  if_ae	mov	local02, #0
179ac     DC 31 B1 FD | 	call	#__system___float_fromuns
179b0     14 FB 61 F5 | 	xor	result1, local02
179b4     FD 12 02 F6 | 	mov	arg01, result1
179b8     FF 7F 23 FF 
179bc     00 14 06 F6 | 	mov	arg02, ##1191181824
179c0     D0 37 B1 FD | 	call	#__system___float_div
179c4     FD 14 02 F6 | 	mov	arg02, result1
179c8     13 13 02 F6 | 	mov	arg01, local01
179cc     F0 31 B1 FD | 	call	#__system___float_add
179d0     10 4E 05 F1 | 	add	fp, #16
179d4     A7 FA 61 FC | 	wrlong	result1, fp
179d8                 | '   fpad=(1.0/65536.0)+padrz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
179d8     10 4E 85 F1 | 	sub	fp, #16
179dc     1F FA 05 F4 | 	bitl	result1, #31
179e0     FD 12 02 F6 | 	mov	arg01, result1
179e4     89 41 1D FF 
179e8     6F 14 06 F6 | 	mov	arg02, ##981668463
179ec     01 16 06 F6 | 	mov	arg03, #1
179f0     D0 39 B1 FD | 	call	#__system___float_cmp
179f4     00 FA 55 F2 | 	cmps	result1, #0 wc
179f8     10 4E 05 C1 |  if_b	add	fp, #16
179fc     A7 00 68 CC |  if_b	wrlong	#0, fp
17a00     10 4E 85 C1 |  if_b	sub	fp, #16
17a04     10 4E 05 F1 | 	add	fp, #16
17a08     A7 26 02 FB | 	rdlong	local01, fp
17a0c     10 4E 85 F1 | 	sub	fp, #16
17a10     A7 26 62 FC | 	wrlong	local01, fp
17a14     08 4E 05 F1 | 	add	fp, #8
17a18     A7 3C 68 FC | 	wrlong	#30, fp
17a1c     08 4E 85 F1 | 	sub	fp, #8
17a20     A7 12 02 F6 | 	mov	arg01, fp
17a24     90 5E BF FD | 	call	#_push
17a28                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17a28     28 01 90 FD | 	jmp	#LR__1924
17a2c                 | LR__1921
17a2c     F0 5D BF FD | 	call	#_pop
17a30     A7 FA 61 FC | 	wrlong	result1, fp
17a34     04 4E 05 F1 | 	add	fp, #4
17a38     A7 FC 61 FC | 	wrlong	result2, fp
17a3c     04 4E 05 F1 | 	add	fp, #4
17a40     A7 FE 61 FC | 	wrlong	result3, fp
17a44                 | ' t1=pop()
17a44                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17a44     08 4E 85 F1 | 	sub	fp, #8
17a48     1C FE 0D F2 | 	cmp	result3, #28 wz
17a4c     08 4E 05 51 |  if_ne	add	fp, #8
17a50     A7 26 02 5B |  if_ne	rdlong	local01, fp
17a54     08 4E 85 51 |  if_ne	sub	fp, #8
17a58     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17a5c     E8 00 90 5D |  if_ne	jmp	#LR__1923
17a60     A7 26 02 FB | 	rdlong	local01, fp
17a64     52 00 00 FF 
17a68     60 E5 05 F1 | 	add	objptr, ##42336
17a6c     F2 26 62 FC | 	wrlong	local01, objptr
17a70                 | '   q=t1.result.uresult
17a70                 | '   if q<7 then 
17a70     52 00 00 FF 
17a74     60 E5 85 F1 | 	sub	objptr, ##42336
17a78     07 26 56 F2 | 	cmps	local01, #7 wc
17a7c     B8 00 90 3D |  if_ae	jmp	#LR__1922
17a80     00 C0 1B FF 
17a84     00 26 06 F6 | 	mov	local01, ##931135488
17a88     52 00 00 FF 
17a8c     60 E5 05 F1 | 	add	objptr, ##42336
17a90     F2 16 02 FB | 	rdlong	arg03, objptr
17a94     02 16 66 F0 | 	shl	arg03, #2
17a98     40 E5 85 F1 | 	sub	objptr, #320
17a9c     F2 16 02 F1 | 	add	arg03, objptr
17aa0     0B 13 02 FB | 	rdlong	arg01, arg03
17aa4     52 00 00 FF 
17aa8     20 E4 85 F1 | 	sub	objptr, ##42016
17aac     09 13 52 F6 | 	abs	arg01, arg01 wc
17ab0     1F 28 C6 C9 |  if_b	decod	local02, #31
17ab4     00 28 06 36 |  if_ae	mov	local02, #0
17ab8     D0 30 B1 FD | 	call	#__system___float_fromuns
17abc     14 FB 61 F5 | 	xor	result1, local02
17ac0     FD 12 02 F6 | 	mov	arg01, result1
17ac4     FF 7F 23 FF 
17ac8     00 14 06 F6 | 	mov	arg02, ##1191181824
17acc     C4 36 B1 FD | 	call	#__system___float_div
17ad0     FD 14 02 F6 | 	mov	arg02, result1
17ad4     13 13 02 F6 | 	mov	arg01, local01
17ad8     E4 30 B1 FD | 	call	#__system___float_add
17adc     10 4E 05 F1 | 	add	fp, #16
17ae0     A7 FA 61 FC | 	wrlong	result1, fp
17ae4                 | '     fpad=(1.0/65536.0)+padrz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17ae4     10 4E 85 F1 | 	sub	fp, #16
17ae8     1F FA 05 F4 | 	bitl	result1, #31
17aec     FD 12 02 F6 | 	mov	arg01, result1
17af0     89 41 1D FF 
17af4     6F 14 06 F6 | 	mov	arg02, ##981668463
17af8     01 16 06 F6 | 	mov	arg03, #1
17afc     C4 38 B1 FD | 	call	#__system___float_cmp
17b00     00 FA 55 F2 | 	cmps	result1, #0 wc
17b04     10 4E 05 C1 |  if_b	add	fp, #16
17b08     A7 00 68 CC |  if_b	wrlong	#0, fp
17b0c     10 4E 85 C1 |  if_b	sub	fp, #16
17b10     10 4E 05 F1 | 	add	fp, #16
17b14     A7 26 02 FB | 	rdlong	local01, fp
17b18     10 4E 85 F1 | 	sub	fp, #16
17b1c     A7 26 62 FC | 	wrlong	local01, fp
17b20     08 4E 05 F1 | 	add	fp, #8
17b24     A7 3C 68 FC | 	wrlong	#30, fp
17b28     08 4E 85 F1 | 	sub	fp, #8
17b2c     A7 12 02 F6 | 	mov	arg01, fp
17b30     84 5D BF FD | 	call	#_push
17b34                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17b34     1C 00 90 FD | 	jmp	#LR__1924
17b38                 | LR__1922
17b38     29 12 06 F6 | 	mov	arg01, #41
17b3c     00 14 06 F6 | 	mov	arg02, #0
17b40     78 CB B0 FD | 	call	#_printerror
17b44                 | '      printerror(41) : return
17b44     0C 00 90 FD | 	jmp	#LR__1924
17b48                 | LR__1923
17b48     29 12 06 F6 | 	mov	arg01, #41
17b4c     00 14 06 F6 | 	mov	arg02, #0
17b50     68 CB B0 FD | 	call	#_printerror
17b54                 | LR__1924
17b54     A7 F0 03 F6 | 	mov	ptra, fp
17b58     B2 00 A0 FD | 	call	#popregs_
17b5c                 | _do_padrz_ret
17b5c     2D 00 64 FD | 	ret
17b60                 | 
17b60                 | ' 
17b60                 | ' ' ------------------ pads
17b60                 | ' 
17b60                 | ' sub do_pads
17b60                 | _do_pads
17b60     02 4A 05 F6 | 	mov	COUNT_, #2
17b64     A8 00 A0 FD | 	call	#pushregs_
17b68     14 F0 07 F1 | 	add	ptra, #20
17b6c     4A 00 00 FF 
17b70     A0 E4 05 F1 | 	add	objptr, ##38048
17b74     F2 26 02 FB | 	rdlong	local01, objptr
17b78     13 17 02 F6 | 	mov	arg03, local01
17b7c     01 16 66 F0 | 	shl	arg03, #1
17b80     13 17 02 F1 | 	add	arg03, local01
17b84     02 16 66 F0 | 	shl	arg03, #2
17b88     03 00 00 FF 
17b8c     04 E4 85 F1 | 	sub	objptr, ##1540
17b90     F2 16 02 F1 | 	add	arg03, objptr
17b94     0B 17 02 FB | 	rdlong	arg03, arg03
17b98     0C 4E 05 F1 | 	add	fp, #12
17b9c     A7 16 62 FC | 	wrlong	arg03, fp
17ba0                 | ' 
17ba0                 | ' numpar=compiledline(lineptr_e).result.uresult
17ba0                 | ' if numpar>1 then print "pads: "; : printerror(39) : return
17ba0     0C 4E 85 F1 | 	sub	fp, #12
17ba4     02 16 16 F2 | 	cmp	arg03, #2 wc
17ba8     47 00 00 FF 
17bac     9C E4 85 F1 | 	sub	objptr, ##36508
17bb0     40 00 90 CD |  if_b	jmp	#LR__1930
17bb4     00 12 06 F6 | 	mov	arg01, #0
17bb8     08 62 B1 FD | 	call	#__system___getiolock_0620
17bbc     FD 12 02 F6 | 	mov	arg01, result1
17bc0     50 05 B1 FD | 	call	#__system___lockmem
17bc4     C3 01 00 FF 
17bc8     EB 15 06 F6 | 	mov	arg02, ##@LR__6104
17bcc     00 12 06 F6 | 	mov	arg01, #0
17bd0     00 16 06 F6 | 	mov	arg03, #0
17bd4     34 12 B1 FD | 	call	#__system___basic_print_string
17bd8     00 12 06 F6 | 	mov	arg01, #0
17bdc     E4 61 B1 FD | 	call	#__system___getiolock_0620
17be0     FD 00 68 FC | 	wrlong	#0, result1
17be4     27 12 06 F6 | 	mov	arg01, #39
17be8     00 14 06 F6 | 	mov	arg02, #0
17bec     CC CA B0 FD | 	call	#_printerror
17bf0     E0 01 90 FD | 	jmp	#LR__1934
17bf4                 | LR__1930
17bf4                 | ' if numpar=0 then 
17bf4     0C 4E 05 F1 | 	add	fp, #12
17bf8     A7 FE 09 FB | 	rdlong	result3, fp wz
17bfc     0C 4E 85 F1 | 	sub	fp, #12
17c00     A8 00 90 5D |  if_ne	jmp	#LR__1931
17c04     00 C0 1B FF 
17c08     00 26 06 F6 | 	mov	local01, ##931135488
17c0c     52 00 00 FF 
17c10     3C E4 05 F1 | 	add	objptr, ##42044
17c14     F2 12 02 FB | 	rdlong	arg01, objptr
17c18     52 00 00 FF 
17c1c     3C E4 85 F1 | 	sub	objptr, ##42044
17c20     09 13 52 F6 | 	abs	arg01, arg01 wc
17c24     1F 28 C6 C9 |  if_b	decod	local02, #31
17c28     00 28 06 36 |  if_ae	mov	local02, #0
17c2c     5C 2F B1 FD | 	call	#__system___float_fromuns
17c30     14 FB 61 F5 | 	xor	result1, local02
17c34     FD 12 02 F6 | 	mov	arg01, result1
17c38     FF 7F 23 FF 
17c3c     00 14 06 F6 | 	mov	arg02, ##1191181824
17c40     50 35 B1 FD | 	call	#__system___float_div
17c44     FD 14 02 F6 | 	mov	arg02, result1
17c48     13 13 02 F6 | 	mov	arg01, local01
17c4c     70 2F B1 FD | 	call	#__system___float_add
17c50     10 4E 05 F1 | 	add	fp, #16
17c54     A7 FA 61 FC | 	wrlong	result1, fp
17c58                 | '   fpad=(1.0/65536.0)+pads(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17c58     10 4E 85 F1 | 	sub	fp, #16
17c5c     1F FA 05 F4 | 	bitl	result1, #31
17c60     FD 12 02 F6 | 	mov	arg01, result1
17c64     89 41 1D FF 
17c68     6F 14 06 F6 | 	mov	arg02, ##981668463
17c6c     01 16 06 F6 | 	mov	arg03, #1
17c70     50 37 B1 FD | 	call	#__system___float_cmp
17c74     00 FA 55 F2 | 	cmps	result1, #0 wc
17c78     10 4E 05 C1 |  if_b	add	fp, #16
17c7c     A7 00 68 CC |  if_b	wrlong	#0, fp
17c80     10 4E 85 C1 |  if_b	sub	fp, #16
17c84     10 4E 05 F1 | 	add	fp, #16
17c88     A7 26 02 FB | 	rdlong	local01, fp
17c8c     10 4E 85 F1 | 	sub	fp, #16
17c90     A7 26 62 FC | 	wrlong	local01, fp
17c94     08 4E 05 F1 | 	add	fp, #8
17c98     A7 3C 68 FC | 	wrlong	#30, fp
17c9c     08 4E 85 F1 | 	sub	fp, #8
17ca0     A7 12 02 F6 | 	mov	arg01, fp
17ca4     10 5C BF FD | 	call	#_push
17ca8                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17ca8     28 01 90 FD | 	jmp	#LR__1934
17cac                 | LR__1931
17cac     70 5B BF FD | 	call	#_pop
17cb0     A7 FA 61 FC | 	wrlong	result1, fp
17cb4     04 4E 05 F1 | 	add	fp, #4
17cb8     A7 FC 61 FC | 	wrlong	result2, fp
17cbc     04 4E 05 F1 | 	add	fp, #4
17cc0     A7 FE 61 FC | 	wrlong	result3, fp
17cc4                 | ' t1=pop()
17cc4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17cc4     08 4E 85 F1 | 	sub	fp, #8
17cc8     1C FE 0D F2 | 	cmp	result3, #28 wz
17ccc     08 4E 05 51 |  if_ne	add	fp, #8
17cd0     A7 26 02 5B |  if_ne	rdlong	local01, fp
17cd4     08 4E 85 51 |  if_ne	sub	fp, #8
17cd8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17cdc     E8 00 90 5D |  if_ne	jmp	#LR__1933
17ce0     A7 26 02 FB | 	rdlong	local01, fp
17ce4     52 00 00 FF 
17ce8     60 E5 05 F1 | 	add	objptr, ##42336
17cec     F2 26 62 FC | 	wrlong	local01, objptr
17cf0                 | '   q=t1.result.uresult
17cf0                 | '   if q<7 then 
17cf0     52 00 00 FF 
17cf4     60 E5 85 F1 | 	sub	objptr, ##42336
17cf8     07 26 56 F2 | 	cmps	local01, #7 wc
17cfc     B8 00 90 3D |  if_ae	jmp	#LR__1932
17d00     00 C0 1B FF 
17d04     00 26 06 F6 | 	mov	local01, ##931135488
17d08     52 00 00 FF 
17d0c     60 E5 05 F1 | 	add	objptr, ##42336
17d10     F2 16 02 FB | 	rdlong	arg03, objptr
17d14     02 16 66 F0 | 	shl	arg03, #2
17d18     24 E5 85 F1 | 	sub	objptr, #292
17d1c     F2 16 02 F1 | 	add	arg03, objptr
17d20     0B 13 02 FB | 	rdlong	arg01, arg03
17d24     52 00 00 FF 
17d28     3C E4 85 F1 | 	sub	objptr, ##42044
17d2c     09 13 52 F6 | 	abs	arg01, arg01 wc
17d30     1F 28 C6 C9 |  if_b	decod	local02, #31
17d34     00 28 06 36 |  if_ae	mov	local02, #0
17d38     50 2E B1 FD | 	call	#__system___float_fromuns
17d3c     14 FB 61 F5 | 	xor	result1, local02
17d40     FD 12 02 F6 | 	mov	arg01, result1
17d44     FF 7F 23 FF 
17d48     00 14 06 F6 | 	mov	arg02, ##1191181824
17d4c     44 34 B1 FD | 	call	#__system___float_div
17d50     FD 14 02 F6 | 	mov	arg02, result1
17d54     13 13 02 F6 | 	mov	arg01, local01
17d58     64 2E B1 FD | 	call	#__system___float_add
17d5c     10 4E 05 F1 | 	add	fp, #16
17d60     A7 FA 61 FC | 	wrlong	result1, fp
17d64                 | '     fpad=(1.0/65536.0)+pads(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17d64     10 4E 85 F1 | 	sub	fp, #16
17d68     1F FA 05 F4 | 	bitl	result1, #31
17d6c     FD 12 02 F6 | 	mov	arg01, result1
17d70     89 41 1D FF 
17d74     6F 14 06 F6 | 	mov	arg02, ##981668463
17d78     01 16 06 F6 | 	mov	arg03, #1
17d7c     44 36 B1 FD | 	call	#__system___float_cmp
17d80     00 FA 55 F2 | 	cmps	result1, #0 wc
17d84     10 4E 05 C1 |  if_b	add	fp, #16
17d88     A7 00 68 CC |  if_b	wrlong	#0, fp
17d8c     10 4E 85 C1 |  if_b	sub	fp, #16
17d90     10 4E 05 F1 | 	add	fp, #16
17d94     A7 26 02 FB | 	rdlong	local01, fp
17d98     10 4E 85 F1 | 	sub	fp, #16
17d9c     A7 26 62 FC | 	wrlong	local01, fp
17da0     08 4E 05 F1 | 	add	fp, #8
17da4     A7 3C 68 FC | 	wrlong	#30, fp
17da8     08 4E 85 F1 | 	sub	fp, #8
17dac     A7 12 02 F6 | 	mov	arg01, fp
17db0     04 5B BF FD | 	call	#_push
17db4                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17db4     1C 00 90 FD | 	jmp	#LR__1934
17db8                 | LR__1932
17db8     29 12 06 F6 | 	mov	arg01, #41
17dbc     00 14 06 F6 | 	mov	arg02, #0
17dc0     F8 C8 B0 FD | 	call	#_printerror
17dc4                 | '      printerror(41) : return
17dc4     0C 00 90 FD | 	jmp	#LR__1934
17dc8                 | LR__1933
17dc8     29 12 06 F6 | 	mov	arg01, #41
17dcc     00 14 06 F6 | 	mov	arg02, #0
17dd0     E8 C8 B0 FD | 	call	#_printerror
17dd4                 | LR__1934
17dd4     A7 F0 03 F6 | 	mov	ptra, fp
17dd8     B2 00 A0 FD | 	call	#popregs_
17ddc                 | _do_pads_ret
17ddc     2D 00 64 FD | 	ret
17de0                 | 
17de0                 | ' 
17de0                 | ' ' ------------------ padw
17de0                 | ' 
17de0                 | ' sub do_padw
17de0                 | _do_padw
17de0     02 4A 05 F6 | 	mov	COUNT_, #2
17de4     A8 00 A0 FD | 	call	#pushregs_
17de8     14 F0 07 F1 | 	add	ptra, #20
17dec     4A 00 00 FF 
17df0     A0 E4 05 F1 | 	add	objptr, ##38048
17df4     F2 26 02 FB | 	rdlong	local01, objptr
17df8     13 17 02 F6 | 	mov	arg03, local01
17dfc     01 16 66 F0 | 	shl	arg03, #1
17e00     13 17 02 F1 | 	add	arg03, local01
17e04     02 16 66 F0 | 	shl	arg03, #2
17e08     03 00 00 FF 
17e0c     04 E4 85 F1 | 	sub	objptr, ##1540
17e10     F2 16 02 F1 | 	add	arg03, objptr
17e14     0B 17 02 FB | 	rdlong	arg03, arg03
17e18     0C 4E 05 F1 | 	add	fp, #12
17e1c     A7 16 62 FC | 	wrlong	arg03, fp
17e20                 | ' 
17e20                 | ' numpar=compiledline(lineptr_e).result.uresult
17e20                 | ' if numpar>1 then print "padw: "; : printerror(39) : return
17e20     0C 4E 85 F1 | 	sub	fp, #12
17e24     02 16 16 F2 | 	cmp	arg03, #2 wc
17e28     47 00 00 FF 
17e2c     9C E4 85 F1 | 	sub	objptr, ##36508
17e30     40 00 90 CD |  if_b	jmp	#LR__1940
17e34     00 12 06 F6 | 	mov	arg01, #0
17e38     88 5F B1 FD | 	call	#__system___getiolock_0620
17e3c     FD 12 02 F6 | 	mov	arg01, result1
17e40     D0 02 B1 FD | 	call	#__system___lockmem
17e44     C3 01 00 FF 
17e48     F2 15 06 F6 | 	mov	arg02, ##@LR__6105
17e4c     00 12 06 F6 | 	mov	arg01, #0
17e50     00 16 06 F6 | 	mov	arg03, #0
17e54     B4 0F B1 FD | 	call	#__system___basic_print_string
17e58     00 12 06 F6 | 	mov	arg01, #0
17e5c     64 5F B1 FD | 	call	#__system___getiolock_0620
17e60     FD 00 68 FC | 	wrlong	#0, result1
17e64     27 12 06 F6 | 	mov	arg01, #39
17e68     00 14 06 F6 | 	mov	arg02, #0
17e6c     4C C8 B0 FD | 	call	#_printerror
17e70     E0 01 90 FD | 	jmp	#LR__1944
17e74                 | LR__1940
17e74                 | ' if numpar=0 then 
17e74     0C 4E 05 F1 | 	add	fp, #12
17e78     A7 FE 09 FB | 	rdlong	result3, fp wz
17e7c     0C 4E 85 F1 | 	sub	fp, #12
17e80     A8 00 90 5D |  if_ne	jmp	#LR__1941
17e84     00 C0 1B FF 
17e88     00 26 06 F6 | 	mov	local01, ##931135488
17e8c     52 00 00 FF 
17e90     58 E4 05 F1 | 	add	objptr, ##42072
17e94     F2 12 02 FB | 	rdlong	arg01, objptr
17e98     52 00 00 FF 
17e9c     58 E4 85 F1 | 	sub	objptr, ##42072
17ea0     09 13 52 F6 | 	abs	arg01, arg01 wc
17ea4     1F 28 C6 C9 |  if_b	decod	local02, #31
17ea8     00 28 06 36 |  if_ae	mov	local02, #0
17eac     DC 2C B1 FD | 	call	#__system___float_fromuns
17eb0     14 FB 61 F5 | 	xor	result1, local02
17eb4     FD 12 02 F6 | 	mov	arg01, result1
17eb8     FF 7F 23 FF 
17ebc     00 14 06 F6 | 	mov	arg02, ##1191181824
17ec0     D0 32 B1 FD | 	call	#__system___float_div
17ec4     FD 14 02 F6 | 	mov	arg02, result1
17ec8     13 13 02 F6 | 	mov	arg01, local01
17ecc     F0 2C B1 FD | 	call	#__system___float_add
17ed0     10 4E 05 F1 | 	add	fp, #16
17ed4     A7 FA 61 FC | 	wrlong	result1, fp
17ed8                 | '   fpad=(1.0/65536.0)+padw(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17ed8     10 4E 85 F1 | 	sub	fp, #16
17edc     1F FA 05 F4 | 	bitl	result1, #31
17ee0     FD 12 02 F6 | 	mov	arg01, result1
17ee4     89 41 1D FF 
17ee8     6F 14 06 F6 | 	mov	arg02, ##981668463
17eec     01 16 06 F6 | 	mov	arg03, #1
17ef0     D0 34 B1 FD | 	call	#__system___float_cmp
17ef4     00 FA 55 F2 | 	cmps	result1, #0 wc
17ef8     10 4E 05 C1 |  if_b	add	fp, #16
17efc     A7 00 68 CC |  if_b	wrlong	#0, fp
17f00     10 4E 85 C1 |  if_b	sub	fp, #16
17f04     10 4E 05 F1 | 	add	fp, #16
17f08     A7 26 02 FB | 	rdlong	local01, fp
17f0c     10 4E 85 F1 | 	sub	fp, #16
17f10     A7 26 62 FC | 	wrlong	local01, fp
17f14     08 4E 05 F1 | 	add	fp, #8
17f18     A7 3C 68 FC | 	wrlong	#30, fp
17f1c     08 4E 85 F1 | 	sub	fp, #8
17f20     A7 12 02 F6 | 	mov	arg01, fp
17f24     90 59 BF FD | 	call	#_push
17f28                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17f28     28 01 90 FD | 	jmp	#LR__1944
17f2c                 | LR__1941
17f2c     F0 58 BF FD | 	call	#_pop
17f30     A7 FA 61 FC | 	wrlong	result1, fp
17f34     04 4E 05 F1 | 	add	fp, #4
17f38     A7 FC 61 FC | 	wrlong	result2, fp
17f3c     04 4E 05 F1 | 	add	fp, #4
17f40     A7 FE 61 FC | 	wrlong	result3, fp
17f44                 | ' t1=pop()
17f44                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17f44     08 4E 85 F1 | 	sub	fp, #8
17f48     1C FE 0D F2 | 	cmp	result3, #28 wz
17f4c     08 4E 05 51 |  if_ne	add	fp, #8
17f50     A7 26 02 5B |  if_ne	rdlong	local01, fp
17f54     08 4E 85 51 |  if_ne	sub	fp, #8
17f58     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17f5c     E8 00 90 5D |  if_ne	jmp	#LR__1943
17f60     A7 26 02 FB | 	rdlong	local01, fp
17f64     52 00 00 FF 
17f68     60 E5 05 F1 | 	add	objptr, ##42336
17f6c     F2 26 62 FC | 	wrlong	local01, objptr
17f70                 | '   q=t1.result.uresult
17f70                 | '   if q<7 then 
17f70     52 00 00 FF 
17f74     60 E5 85 F1 | 	sub	objptr, ##42336
17f78     07 26 56 F2 | 	cmps	local01, #7 wc
17f7c     B8 00 90 3D |  if_ae	jmp	#LR__1942
17f80     00 C0 1B FF 
17f84     00 26 06 F6 | 	mov	local01, ##931135488
17f88     52 00 00 FF 
17f8c     60 E5 05 F1 | 	add	objptr, ##42336
17f90     F2 16 02 FB | 	rdlong	arg03, objptr
17f94     02 16 66 F0 | 	shl	arg03, #2
17f98     08 E5 85 F1 | 	sub	objptr, #264
17f9c     F2 16 02 F1 | 	add	arg03, objptr
17fa0     0B 13 02 FB | 	rdlong	arg01, arg03
17fa4     52 00 00 FF 
17fa8     58 E4 85 F1 | 	sub	objptr, ##42072
17fac     09 13 52 F6 | 	abs	arg01, arg01 wc
17fb0     1F 28 C6 C9 |  if_b	decod	local02, #31
17fb4     00 28 06 36 |  if_ae	mov	local02, #0
17fb8     D0 2B B1 FD | 	call	#__system___float_fromuns
17fbc     14 FB 61 F5 | 	xor	result1, local02
17fc0     FD 12 02 F6 | 	mov	arg01, result1
17fc4     FF 7F 23 FF 
17fc8     00 14 06 F6 | 	mov	arg02, ##1191181824
17fcc     C4 31 B1 FD | 	call	#__system___float_div
17fd0     FD 14 02 F6 | 	mov	arg02, result1
17fd4     13 13 02 F6 | 	mov	arg01, local01
17fd8     E4 2B B1 FD | 	call	#__system___float_add
17fdc     10 4E 05 F1 | 	add	fp, #16
17fe0     A7 FA 61 FC | 	wrlong	result1, fp
17fe4                 | '     fpad=(1.0/65536.0)+padw(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17fe4     10 4E 85 F1 | 	sub	fp, #16
17fe8     1F FA 05 F4 | 	bitl	result1, #31
17fec     FD 12 02 F6 | 	mov	arg01, result1
17ff0     89 41 1D FF 
17ff4     6F 14 06 F6 | 	mov	arg02, ##981668463
17ff8     01 16 06 F6 | 	mov	arg03, #1
17ffc     C4 33 B1 FD | 	call	#__system___float_cmp
18000     00 FA 55 F2 | 	cmps	result1, #0 wc
18004     10 4E 05 C1 |  if_b	add	fp, #16
18008     A7 00 68 CC |  if_b	wrlong	#0, fp
1800c     10 4E 85 C1 |  if_b	sub	fp, #16
18010     10 4E 05 F1 | 	add	fp, #16
18014     A7 26 02 FB | 	rdlong	local01, fp
18018     10 4E 85 F1 | 	sub	fp, #16
1801c     A7 26 62 FC | 	wrlong	local01, fp
18020     08 4E 05 F1 | 	add	fp, #8
18024     A7 3C 68 FC | 	wrlong	#30, fp
18028     08 4E 85 F1 | 	sub	fp, #8
1802c     A7 12 02 F6 | 	mov	arg01, fp
18030     84 58 BF FD | 	call	#_push
18034                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
18034     1C 00 90 FD | 	jmp	#LR__1944
18038                 | LR__1942
18038     29 12 06 F6 | 	mov	arg01, #41
1803c     00 14 06 F6 | 	mov	arg02, #0
18040     78 C6 B0 FD | 	call	#_printerror
18044                 | '      printerror(41) : return
18044     0C 00 90 FD | 	jmp	#LR__1944
18048                 | LR__1943
18048     29 12 06 F6 | 	mov	arg01, #41
1804c     00 14 06 F6 | 	mov	arg02, #0
18050     68 C6 B0 FD | 	call	#_printerror
18054                 | LR__1944
18054     A7 F0 03 F6 | 	mov	ptra, fp
18058     B2 00 A0 FD | 	call	#popregs_
1805c                 | _do_padw_ret
1805c     2D 00 64 FD | 	ret
18060                 | 
18060                 | ' 
18060                 | ' ' ------------------ padx
18060                 | ' 
18060                 | ' sub do_padx
18060                 | _do_padx
18060     02 4A 05 F6 | 	mov	COUNT_, #2
18064     A8 00 A0 FD | 	call	#pushregs_
18068     14 F0 07 F1 | 	add	ptra, #20
1806c     4A 00 00 FF 
18070     A0 E4 05 F1 | 	add	objptr, ##38048
18074     F2 26 02 FB | 	rdlong	local01, objptr
18078     13 17 02 F6 | 	mov	arg03, local01
1807c     01 16 66 F0 | 	shl	arg03, #1
18080     13 17 02 F1 | 	add	arg03, local01
18084     02 16 66 F0 | 	shl	arg03, #2
18088     03 00 00 FF 
1808c     04 E4 85 F1 | 	sub	objptr, ##1540
18090     F2 16 02 F1 | 	add	arg03, objptr
18094     0B 17 02 FB | 	rdlong	arg03, arg03
18098     0C 4E 05 F1 | 	add	fp, #12
1809c     A7 16 62 FC | 	wrlong	arg03, fp
180a0                 | ' 
180a0                 | ' numpar=compiledline(lineptr_e).result.uresult
180a0                 | ' if numpar>1 then print "padx: "; : printerror(39) : return
180a0     0C 4E 85 F1 | 	sub	fp, #12
180a4     02 16 16 F2 | 	cmp	arg03, #2 wc
180a8     47 00 00 FF 
180ac     9C E4 85 F1 | 	sub	objptr, ##36508
180b0     40 00 90 CD |  if_b	jmp	#LR__1950
180b4     00 12 06 F6 | 	mov	arg01, #0
180b8     08 5D B1 FD | 	call	#__system___getiolock_0620
180bc     FD 12 02 F6 | 	mov	arg01, result1
180c0     50 00 B1 FD | 	call	#__system___lockmem
180c4     C3 01 00 FF 
180c8     F9 15 06 F6 | 	mov	arg02, ##@LR__6106
180cc     00 12 06 F6 | 	mov	arg01, #0
180d0     00 16 06 F6 | 	mov	arg03, #0
180d4     34 0D B1 FD | 	call	#__system___basic_print_string
180d8     00 12 06 F6 | 	mov	arg01, #0
180dc     E4 5C B1 FD | 	call	#__system___getiolock_0620
180e0     FD 00 68 FC | 	wrlong	#0, result1
180e4     27 12 06 F6 | 	mov	arg01, #39
180e8     00 14 06 F6 | 	mov	arg02, #0
180ec     CC C5 B0 FD | 	call	#_printerror
180f0     E0 01 90 FD | 	jmp	#LR__1954
180f4                 | LR__1950
180f4                 | ' if numpar=0 then 
180f4     0C 4E 05 F1 | 	add	fp, #12
180f8     A7 FE 09 FB | 	rdlong	result3, fp wz
180fc     0C 4E 85 F1 | 	sub	fp, #12
18100     A8 00 90 5D |  if_ne	jmp	#LR__1951
18104     00 C0 1B FF 
18108     00 26 06 F6 | 	mov	local01, ##931135488
1810c     51 00 00 FF 
18110     78 E5 05 F1 | 	add	objptr, ##41848
18114     F2 12 02 FB | 	rdlong	arg01, objptr
18118     51 00 00 FF 
1811c     78 E5 85 F1 | 	sub	objptr, ##41848
18120     09 13 52 F6 | 	abs	arg01, arg01 wc
18124     1F 28 C6 C9 |  if_b	decod	local02, #31
18128     00 28 06 36 |  if_ae	mov	local02, #0
1812c     5C 2A B1 FD | 	call	#__system___float_fromuns
18130     14 FB 61 F5 | 	xor	result1, local02
18134     FD 12 02 F6 | 	mov	arg01, result1
18138     FF 7F 23 FF 
1813c     00 14 06 F6 | 	mov	arg02, ##1191181824
18140     50 30 B1 FD | 	call	#__system___float_div
18144     FD 14 02 F6 | 	mov	arg02, result1
18148     13 13 02 F6 | 	mov	arg01, local01
1814c     70 2A B1 FD | 	call	#__system___float_add
18150     10 4E 05 F1 | 	add	fp, #16
18154     A7 FA 61 FC | 	wrlong	result1, fp
18158                 | '   fpad=(1.0/65536.0)+padx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
18158     10 4E 85 F1 | 	sub	fp, #16
1815c     1F FA 05 F4 | 	bitl	result1, #31
18160     FD 12 02 F6 | 	mov	arg01, result1
18164     89 41 1D FF 
18168     6F 14 06 F6 | 	mov	arg02, ##981668463
1816c     01 16 06 F6 | 	mov	arg03, #1
18170     50 32 B1 FD | 	call	#__system___float_cmp
18174     00 FA 55 F2 | 	cmps	result1, #0 wc
18178     10 4E 05 C1 |  if_b	add	fp, #16
1817c     A7 00 68 CC |  if_b	wrlong	#0, fp
18180     10 4E 85 C1 |  if_b	sub	fp, #16
18184     10 4E 05 F1 | 	add	fp, #16
18188     A7 26 02 FB | 	rdlong	local01, fp
1818c     10 4E 85 F1 | 	sub	fp, #16
18190     A7 26 62 FC | 	wrlong	local01, fp
18194     08 4E 05 F1 | 	add	fp, #8
18198     A7 3C 68 FC | 	wrlong	#30, fp
1819c     08 4E 85 F1 | 	sub	fp, #8
181a0     A7 12 02 F6 | 	mov	arg01, fp
181a4     10 57 BF FD | 	call	#_push
181a8                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
181a8     28 01 90 FD | 	jmp	#LR__1954
181ac                 | LR__1951
181ac     70 56 BF FD | 	call	#_pop
181b0     A7 FA 61 FC | 	wrlong	result1, fp
181b4     04 4E 05 F1 | 	add	fp, #4
181b8     A7 FC 61 FC | 	wrlong	result2, fp
181bc     04 4E 05 F1 | 	add	fp, #4
181c0     A7 FE 61 FC | 	wrlong	result3, fp
181c4                 | ' t1=pop()
181c4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
181c4     08 4E 85 F1 | 	sub	fp, #8
181c8     1C FE 0D F2 | 	cmp	result3, #28 wz
181cc     08 4E 05 51 |  if_ne	add	fp, #8
181d0     A7 26 02 5B |  if_ne	rdlong	local01, fp
181d4     08 4E 85 51 |  if_ne	sub	fp, #8
181d8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
181dc     E8 00 90 5D |  if_ne	jmp	#LR__1953
181e0     A7 26 02 FB | 	rdlong	local01, fp
181e4     52 00 00 FF 
181e8     60 E5 05 F1 | 	add	objptr, ##42336
181ec     F2 26 62 FC | 	wrlong	local01, objptr
181f0                 | '   q=t1.result.uresult
181f0                 | '   if q<7 then 
181f0     52 00 00 FF 
181f4     60 E5 85 F1 | 	sub	objptr, ##42336
181f8     07 26 56 F2 | 	cmps	local01, #7 wc
181fc     B8 00 90 3D |  if_ae	jmp	#LR__1952
18200     00 C0 1B FF 
18204     00 26 06 F6 | 	mov	local01, ##931135488
18208     52 00 00 FF 
1820c     60 E5 05 F1 | 	add	objptr, ##42336
18210     F2 16 02 FB | 	rdlong	arg03, objptr
18214     02 16 66 F0 | 	shl	arg03, #2
18218     E8 E5 85 F1 | 	sub	objptr, #488
1821c     F2 16 02 F1 | 	add	arg03, objptr
18220     0B 13 02 FB | 	rdlong	arg01, arg03
18224     51 00 00 FF 
18228     78 E5 85 F1 | 	sub	objptr, ##41848
1822c     09 13 52 F6 | 	abs	arg01, arg01 wc
18230     1F 28 C6 C9 |  if_b	decod	local02, #31
18234     00 28 06 36 |  if_ae	mov	local02, #0
18238     50 29 B1 FD | 	call	#__system___float_fromuns
1823c     14 FB 61 F5 | 	xor	result1, local02
18240     FD 12 02 F6 | 	mov	arg01, result1
18244     FF 7F 23 FF 
18248     00 14 06 F6 | 	mov	arg02, ##1191181824
1824c     44 2F B1 FD | 	call	#__system___float_div
18250     FD 14 02 F6 | 	mov	arg02, result1
18254     13 13 02 F6 | 	mov	arg01, local01
18258     64 29 B1 FD | 	call	#__system___float_add
1825c     10 4E 05 F1 | 	add	fp, #16
18260     A7 FA 61 FC | 	wrlong	result1, fp
18264                 | '     fpad=(1.0/65536.0)+padx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
18264     10 4E 85 F1 | 	sub	fp, #16
18268     1F FA 05 F4 | 	bitl	result1, #31
1826c     FD 12 02 F6 | 	mov	arg01, result1
18270     89 41 1D FF 
18274     6F 14 06 F6 | 	mov	arg02, ##981668463
18278     01 16 06 F6 | 	mov	arg03, #1
1827c     44 31 B1 FD | 	call	#__system___float_cmp
18280     00 FA 55 F2 | 	cmps	result1, #0 wc
18284     10 4E 05 C1 |  if_b	add	fp, #16
18288     A7 00 68 CC |  if_b	wrlong	#0, fp
1828c     10 4E 85 C1 |  if_b	sub	fp, #16
18290     10 4E 05 F1 | 	add	fp, #16
18294     A7 26 02 FB | 	rdlong	local01, fp
18298     10 4E 85 F1 | 	sub	fp, #16
1829c     A7 26 62 FC | 	wrlong	local01, fp
182a0     08 4E 05 F1 | 	add	fp, #8
182a4     A7 3C 68 FC | 	wrlong	#30, fp
182a8     08 4E 85 F1 | 	sub	fp, #8
182ac     A7 12 02 F6 | 	mov	arg01, fp
182b0     04 56 BF FD | 	call	#_push
182b4                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
182b4     1C 00 90 FD | 	jmp	#LR__1954
182b8                 | LR__1952
182b8     29 12 06 F6 | 	mov	arg01, #41
182bc     00 14 06 F6 | 	mov	arg02, #0
182c0     F8 C3 B0 FD | 	call	#_printerror
182c4                 | '      printerror(41) : return
182c4     0C 00 90 FD | 	jmp	#LR__1954
182c8                 | LR__1953
182c8     29 12 06 F6 | 	mov	arg01, #41
182cc     00 14 06 F6 | 	mov	arg02, #0
182d0     E8 C3 B0 FD | 	call	#_printerror
182d4                 | LR__1954
182d4     A7 F0 03 F6 | 	mov	ptra, fp
182d8     B2 00 A0 FD | 	call	#popregs_
182dc                 | _do_padx_ret
182dc     2D 00 64 FD | 	ret
182e0                 | 
182e0                 | ' 
182e0                 | ' ' ------------------ pady
182e0                 | ' 
182e0                 | ' sub do_pady
182e0                 | _do_pady
182e0     02 4A 05 F6 | 	mov	COUNT_, #2
182e4     A8 00 A0 FD | 	call	#pushregs_
182e8     14 F0 07 F1 | 	add	ptra, #20
182ec     4A 00 00 FF 
182f0     A0 E4 05 F1 | 	add	objptr, ##38048
182f4     F2 26 02 FB | 	rdlong	local01, objptr
182f8     13 17 02 F6 | 	mov	arg03, local01
182fc     01 16 66 F0 | 	shl	arg03, #1
18300     13 17 02 F1 | 	add	arg03, local01
18304     02 16 66 F0 | 	shl	arg03, #2
18308     03 00 00 FF 
1830c     04 E4 85 F1 | 	sub	objptr, ##1540
18310     F2 16 02 F1 | 	add	arg03, objptr
18314     0B 17 02 FB | 	rdlong	arg03, arg03
18318     0C 4E 05 F1 | 	add	fp, #12
1831c     A7 16 62 FC | 	wrlong	arg03, fp
18320                 | ' 
18320                 | ' numpar=compiledline(lineptr_e).result.uresult
18320                 | ' if numpar>1 then print "pady: "; : printerror(39) : return
18320     0C 4E 85 F1 | 	sub	fp, #12
18324     02 16 16 F2 | 	cmp	arg03, #2 wc
18328     47 00 00 FF 
1832c     9C E4 85 F1 | 	sub	objptr, ##36508
18330     40 00 90 CD |  if_b	jmp	#LR__1960
18334     00 12 06 F6 | 	mov	arg01, #0
18338     88 5A B1 FD | 	call	#__system___getiolock_0620
1833c     FD 12 02 F6 | 	mov	arg01, result1
18340     D0 FD B0 FD | 	call	#__system___lockmem
18344     C4 01 00 FF 
18348     00 14 06 F6 | 	mov	arg02, ##@LR__6107
1834c     00 12 06 F6 | 	mov	arg01, #0
18350     00 16 06 F6 | 	mov	arg03, #0
18354     B4 0A B1 FD | 	call	#__system___basic_print_string
18358     00 12 06 F6 | 	mov	arg01, #0
1835c     64 5A B1 FD | 	call	#__system___getiolock_0620
18360     FD 00 68 FC | 	wrlong	#0, result1
18364     27 12 06 F6 | 	mov	arg01, #39
18368     00 14 06 F6 | 	mov	arg02, #0
1836c     4C C3 B0 FD | 	call	#_printerror
18370     E0 01 90 FD | 	jmp	#LR__1964
18374                 | LR__1960
18374                 | ' if numpar=0 then 
18374     0C 4E 05 F1 | 	add	fp, #12
18378     A7 FE 09 FB | 	rdlong	result3, fp wz
1837c     0C 4E 85 F1 | 	sub	fp, #12
18380     A8 00 90 5D |  if_ne	jmp	#LR__1961
18384     00 C0 1B FF 
18388     00 26 06 F6 | 	mov	local01, ##931135488
1838c     51 00 00 FF 
18390     94 E5 05 F1 | 	add	objptr, ##41876
18394     F2 12 02 FB | 	rdlong	arg01, objptr
18398     51 00 00 FF 
1839c     94 E5 85 F1 | 	sub	objptr, ##41876
183a0     09 13 52 F6 | 	abs	arg01, arg01 wc
183a4     1F 28 C6 C9 |  if_b	decod	local02, #31
183a8     00 28 06 36 |  if_ae	mov	local02, #0
183ac     DC 27 B1 FD | 	call	#__system___float_fromuns
183b0     14 FB 61 F5 | 	xor	result1, local02
183b4     FD 12 02 F6 | 	mov	arg01, result1
183b8     FF 7F 23 FF 
183bc     00 14 06 F6 | 	mov	arg02, ##1191181824
183c0     D0 2D B1 FD | 	call	#__system___float_div
183c4     FD 14 02 F6 | 	mov	arg02, result1
183c8     13 13 02 F6 | 	mov	arg01, local01
183cc     F0 27 B1 FD | 	call	#__system___float_add
183d0     10 4E 05 F1 | 	add	fp, #16
183d4     A7 FA 61 FC | 	wrlong	result1, fp
183d8                 | '   fpad=(1.0/65536.0)+pady(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
183d8     10 4E 85 F1 | 	sub	fp, #16
183dc     1F FA 05 F4 | 	bitl	result1, #31
183e0     FD 12 02 F6 | 	mov	arg01, result1
183e4     89 41 1D FF 
183e8     6F 14 06 F6 | 	mov	arg02, ##981668463
183ec     01 16 06 F6 | 	mov	arg03, #1
183f0     D0 2F B1 FD | 	call	#__system___float_cmp
183f4     00 FA 55 F2 | 	cmps	result1, #0 wc
183f8     10 4E 05 C1 |  if_b	add	fp, #16
183fc     A7 00 68 CC |  if_b	wrlong	#0, fp
18400     10 4E 85 C1 |  if_b	sub	fp, #16
18404     10 4E 05 F1 | 	add	fp, #16
18408     A7 26 02 FB | 	rdlong	local01, fp
1840c     10 4E 85 F1 | 	sub	fp, #16
18410     A7 26 62 FC | 	wrlong	local01, fp
18414     08 4E 05 F1 | 	add	fp, #8
18418     A7 3C 68 FC | 	wrlong	#30, fp
1841c     08 4E 85 F1 | 	sub	fp, #8
18420     A7 12 02 F6 | 	mov	arg01, fp
18424     90 54 BF FD | 	call	#_push
18428                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
18428     28 01 90 FD | 	jmp	#LR__1964
1842c                 | LR__1961
1842c     F0 53 BF FD | 	call	#_pop
18430     A7 FA 61 FC | 	wrlong	result1, fp
18434     04 4E 05 F1 | 	add	fp, #4
18438     A7 FC 61 FC | 	wrlong	result2, fp
1843c     04 4E 05 F1 | 	add	fp, #4
18440     A7 FE 61 FC | 	wrlong	result3, fp
18444                 | ' t1=pop()
18444                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
18444     08 4E 85 F1 | 	sub	fp, #8
18448     1C FE 0D F2 | 	cmp	result3, #28 wz
1844c     08 4E 05 51 |  if_ne	add	fp, #8
18450     A7 26 02 5B |  if_ne	rdlong	local01, fp
18454     08 4E 85 51 |  if_ne	sub	fp, #8
18458     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1845c     E8 00 90 5D |  if_ne	jmp	#LR__1963
18460     A7 26 02 FB | 	rdlong	local01, fp
18464     52 00 00 FF 
18468     60 E5 05 F1 | 	add	objptr, ##42336
1846c     F2 26 62 FC | 	wrlong	local01, objptr
18470                 | '   q=t1.result.uresult
18470                 | '   if q<7 then 
18470     52 00 00 FF 
18474     60 E5 85 F1 | 	sub	objptr, ##42336
18478     07 26 56 F2 | 	cmps	local01, #7 wc
1847c     B8 00 90 3D |  if_ae	jmp	#LR__1962
18480     00 C0 1B FF 
18484     00 26 06 F6 | 	mov	local01, ##931135488
18488     52 00 00 FF 
1848c     60 E5 05 F1 | 	add	objptr, ##42336
18490     F2 16 02 FB | 	rdlong	arg03, objptr
18494     02 16 66 F0 | 	shl	arg03, #2
18498     CC E5 85 F1 | 	sub	objptr, #460
1849c     F2 16 02 F1 | 	add	arg03, objptr
184a0     0B 13 02 FB | 	rdlong	arg01, arg03
184a4     51 00 00 FF 
184a8     94 E5 85 F1 | 	sub	objptr, ##41876
184ac     09 13 52 F6 | 	abs	arg01, arg01 wc
184b0     1F 28 C6 C9 |  if_b	decod	local02, #31
184b4     00 28 06 36 |  if_ae	mov	local02, #0
184b8     D0 26 B1 FD | 	call	#__system___float_fromuns
184bc     14 FB 61 F5 | 	xor	result1, local02
184c0     FD 12 02 F6 | 	mov	arg01, result1
184c4     FF 7F 23 FF 
184c8     00 14 06 F6 | 	mov	arg02, ##1191181824
184cc     C4 2C B1 FD | 	call	#__system___float_div
184d0     FD 14 02 F6 | 	mov	arg02, result1
184d4     13 13 02 F6 | 	mov	arg01, local01
184d8     E4 26 B1 FD | 	call	#__system___float_add
184dc     10 4E 05 F1 | 	add	fp, #16
184e0     A7 FA 61 FC | 	wrlong	result1, fp
184e4                 | '     fpad=(1.0/65536.0)+pady(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
184e4     10 4E 85 F1 | 	sub	fp, #16
184e8     1F FA 05 F4 | 	bitl	result1, #31
184ec     FD 12 02 F6 | 	mov	arg01, result1
184f0     89 41 1D FF 
184f4     6F 14 06 F6 | 	mov	arg02, ##981668463
184f8     01 16 06 F6 | 	mov	arg03, #1
184fc     C4 2E B1 FD | 	call	#__system___float_cmp
18500     00 FA 55 F2 | 	cmps	result1, #0 wc
18504     10 4E 05 C1 |  if_b	add	fp, #16
18508     A7 00 68 CC |  if_b	wrlong	#0, fp
1850c     10 4E 85 C1 |  if_b	sub	fp, #16
18510     10 4E 05 F1 | 	add	fp, #16
18514     A7 26 02 FB | 	rdlong	local01, fp
18518     10 4E 85 F1 | 	sub	fp, #16
1851c     A7 26 62 FC | 	wrlong	local01, fp
18520     08 4E 05 F1 | 	add	fp, #8
18524     A7 3C 68 FC | 	wrlong	#30, fp
18528     08 4E 85 F1 | 	sub	fp, #8
1852c     A7 12 02 F6 | 	mov	arg01, fp
18530     84 53 BF FD | 	call	#_push
18534                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
18534     1C 00 90 FD | 	jmp	#LR__1964
18538                 | LR__1962
18538     29 12 06 F6 | 	mov	arg01, #41
1853c     00 14 06 F6 | 	mov	arg02, #0
18540     78 C1 B0 FD | 	call	#_printerror
18544                 | '      printerror(41) : return
18544     0C 00 90 FD | 	jmp	#LR__1964
18548                 | LR__1963
18548     29 12 06 F6 | 	mov	arg01, #41
1854c     00 14 06 F6 | 	mov	arg02, #0
18550     68 C1 B0 FD | 	call	#_printerror
18554                 | LR__1964
18554     A7 F0 03 F6 | 	mov	ptra, fp
18558     B2 00 A0 FD | 	call	#popregs_
1855c                 | _do_pady_ret
1855c     2D 00 64 FD | 	ret
18560                 | 
18560                 | ' 
18560                 | ' ' ------------------ padz
18560                 | ' 
18560                 | ' sub do_padz
18560                 | _do_padz
18560     02 4A 05 F6 | 	mov	COUNT_, #2
18564     A8 00 A0 FD | 	call	#pushregs_
18568     14 F0 07 F1 | 	add	ptra, #20
1856c     4A 00 00 FF 
18570     A0 E4 05 F1 | 	add	objptr, ##38048
18574     F2 26 02 FB | 	rdlong	local01, objptr
18578     13 17 02 F6 | 	mov	arg03, local01
1857c     01 16 66 F0 | 	shl	arg03, #1
18580     13 17 02 F1 | 	add	arg03, local01
18584     02 16 66 F0 | 	shl	arg03, #2
18588     03 00 00 FF 
1858c     04 E4 85 F1 | 	sub	objptr, ##1540
18590     F2 16 02 F1 | 	add	arg03, objptr
18594     0B 17 02 FB | 	rdlong	arg03, arg03
18598     0C 4E 05 F1 | 	add	fp, #12
1859c     A7 16 62 FC | 	wrlong	arg03, fp
185a0                 | ' 
185a0                 | ' numpar=compiledline(lineptr_e).result.uresult
185a0                 | ' if numpar>1 then print "padz: "; : printerror(39) : return
185a0     0C 4E 85 F1 | 	sub	fp, #12
185a4     02 16 16 F2 | 	cmp	arg03, #2 wc
185a8     47 00 00 FF 
185ac     9C E4 85 F1 | 	sub	objptr, ##36508
185b0     40 00 90 CD |  if_b	jmp	#LR__1970
185b4     00 12 06 F6 | 	mov	arg01, #0
185b8     08 58 B1 FD | 	call	#__system___getiolock_0620
185bc     FD 12 02 F6 | 	mov	arg01, result1
185c0     50 FB B0 FD | 	call	#__system___lockmem
185c4     C4 01 00 FF 
185c8     07 14 06 F6 | 	mov	arg02, ##@LR__6108
185cc     00 12 06 F6 | 	mov	arg01, #0
185d0     00 16 06 F6 | 	mov	arg03, #0
185d4     34 08 B1 FD | 	call	#__system___basic_print_string
185d8     00 12 06 F6 | 	mov	arg01, #0
185dc     E4 57 B1 FD | 	call	#__system___getiolock_0620
185e0     FD 00 68 FC | 	wrlong	#0, result1
185e4     27 12 06 F6 | 	mov	arg01, #39
185e8     00 14 06 F6 | 	mov	arg02, #0
185ec     CC C0 B0 FD | 	call	#_printerror
185f0     E0 01 90 FD | 	jmp	#LR__1974
185f4                 | LR__1970
185f4                 | ' if numpar=0 then 
185f4     0C 4E 05 F1 | 	add	fp, #12
185f8     A7 FE 09 FB | 	rdlong	result3, fp wz
185fc     0C 4E 85 F1 | 	sub	fp, #12
18600     A8 00 90 5D |  if_ne	jmp	#LR__1971
18604     00 C0 1B FF 
18608     00 26 06 F6 | 	mov	local01, ##931135488
1860c     51 00 00 FF 
18610     B0 E5 05 F1 | 	add	objptr, ##41904
18614     F2 12 02 FB | 	rdlong	arg01, objptr
18618     51 00 00 FF 
1861c     B0 E5 85 F1 | 	sub	objptr, ##41904
18620     09 13 52 F6 | 	abs	arg01, arg01 wc
18624     1F 28 C6 C9 |  if_b	decod	local02, #31
18628     00 28 06 36 |  if_ae	mov	local02, #0
1862c     5C 25 B1 FD | 	call	#__system___float_fromuns
18630     14 FB 61 F5 | 	xor	result1, local02
18634     FD 12 02 F6 | 	mov	arg01, result1
18638     FF 7F 23 FF 
1863c     00 14 06 F6 | 	mov	arg02, ##1191181824
18640     50 2B B1 FD | 	call	#__system___float_div
18644     FD 14 02 F6 | 	mov	arg02, result1
18648     13 13 02 F6 | 	mov	arg01, local01
1864c     70 25 B1 FD | 	call	#__system___float_add
18650     10 4E 05 F1 | 	add	fp, #16
18654     A7 FA 61 FC | 	wrlong	result1, fp
18658                 | '   fpad=(1.0/65536.0)+padz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
18658     10 4E 85 F1 | 	sub	fp, #16
1865c     1F FA 05 F4 | 	bitl	result1, #31
18660     FD 12 02 F6 | 	mov	arg01, result1
18664     89 41 1D FF 
18668     6F 14 06 F6 | 	mov	arg02, ##981668463
1866c     01 16 06 F6 | 	mov	arg03, #1
18670     50 2D B1 FD | 	call	#__system___float_cmp
18674     00 FA 55 F2 | 	cmps	result1, #0 wc
18678     10 4E 05 C1 |  if_b	add	fp, #16
1867c     A7 00 68 CC |  if_b	wrlong	#0, fp
18680     10 4E 85 C1 |  if_b	sub	fp, #16
18684     10 4E 05 F1 | 	add	fp, #16
18688     A7 26 02 FB | 	rdlong	local01, fp
1868c     10 4E 85 F1 | 	sub	fp, #16
18690     A7 26 62 FC | 	wrlong	local01, fp
18694     08 4E 05 F1 | 	add	fp, #8
18698     A7 3C 68 FC | 	wrlong	#30, fp
1869c     08 4E 85 F1 | 	sub	fp, #8
186a0     A7 12 02 F6 | 	mov	arg01, fp
186a4     10 52 BF FD | 	call	#_push
186a8                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
186a8     28 01 90 FD | 	jmp	#LR__1974
186ac                 | LR__1971
186ac     70 51 BF FD | 	call	#_pop
186b0     A7 FA 61 FC | 	wrlong	result1, fp
186b4     04 4E 05 F1 | 	add	fp, #4
186b8     A7 FC 61 FC | 	wrlong	result2, fp
186bc     04 4E 05 F1 | 	add	fp, #4
186c0     A7 FE 61 FC | 	wrlong	result3, fp
186c4                 | ' t1=pop()
186c4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
186c4     08 4E 85 F1 | 	sub	fp, #8
186c8     1C FE 0D F2 | 	cmp	result3, #28 wz
186cc     08 4E 05 51 |  if_ne	add	fp, #8
186d0     A7 26 02 5B |  if_ne	rdlong	local01, fp
186d4     08 4E 85 51 |  if_ne	sub	fp, #8
186d8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
186dc     E8 00 90 5D |  if_ne	jmp	#LR__1973
186e0     A7 26 02 FB | 	rdlong	local01, fp
186e4     52 00 00 FF 
186e8     60 E5 05 F1 | 	add	objptr, ##42336
186ec     F2 26 62 FC | 	wrlong	local01, objptr
186f0                 | '   q=t1.result.uresult
186f0                 | '   if q<7 then 
186f0     52 00 00 FF 
186f4     60 E5 85 F1 | 	sub	objptr, ##42336
186f8     07 26 56 F2 | 	cmps	local01, #7 wc
186fc     B8 00 90 3D |  if_ae	jmp	#LR__1972
18700     00 C0 1B FF 
18704     00 26 06 F6 | 	mov	local01, ##931135488
18708     52 00 00 FF 
1870c     60 E5 05 F1 | 	add	objptr, ##42336
18710     F2 16 02 FB | 	rdlong	arg03, objptr
18714     02 16 66 F0 | 	shl	arg03, #2
18718     B0 E5 85 F1 | 	sub	objptr, #432
1871c     F2 16 02 F1 | 	add	arg03, objptr
18720     0B 13 02 FB | 	rdlong	arg01, arg03
18724     51 00 00 FF 
18728     B0 E5 85 F1 | 	sub	objptr, ##41904
1872c     09 13 52 F6 | 	abs	arg01, arg01 wc
18730     1F 28 C6 C9 |  if_b	decod	local02, #31
18734     00 28 06 36 |  if_ae	mov	local02, #0
18738     50 24 B1 FD | 	call	#__system___float_fromuns
1873c     14 FB 61 F5 | 	xor	result1, local02
18740     FD 12 02 F6 | 	mov	arg01, result1
18744     FF 7F 23 FF 
18748     00 14 06 F6 | 	mov	arg02, ##1191181824
1874c     44 2A B1 FD | 	call	#__system___float_div
18750     FD 14 02 F6 | 	mov	arg02, result1
18754     13 13 02 F6 | 	mov	arg01, local01
18758     64 24 B1 FD | 	call	#__system___float_add
1875c     10 4E 05 F1 | 	add	fp, #16
18760     A7 FA 61 FC | 	wrlong	result1, fp
18764                 | '     fpad=(1.0/65536.0)+padz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
18764     10 4E 85 F1 | 	sub	fp, #16
18768     1F FA 05 F4 | 	bitl	result1, #31
1876c     FD 12 02 F6 | 	mov	arg01, result1
18770     89 41 1D FF 
18774     6F 14 06 F6 | 	mov	arg02, ##981668463
18778     01 16 06 F6 | 	mov	arg03, #1
1877c     44 2C B1 FD | 	call	#__system___float_cmp
18780     00 FA 55 F2 | 	cmps	result1, #0 wc
18784     10 4E 05 C1 |  if_b	add	fp, #16
18788     A7 00 68 CC |  if_b	wrlong	#0, fp
1878c     10 4E 85 C1 |  if_b	sub	fp, #16
18790     10 4E 05 F1 | 	add	fp, #16
18794     A7 26 02 FB | 	rdlong	local01, fp
18798     10 4E 85 F1 | 	sub	fp, #16
1879c     A7 26 62 FC | 	wrlong	local01, fp
187a0     08 4E 05 F1 | 	add	fp, #8
187a4     A7 3C 68 FC | 	wrlong	#30, fp
187a8     08 4E 85 F1 | 	sub	fp, #8
187ac     A7 12 02 F6 | 	mov	arg01, fp
187b0     04 51 BF FD | 	call	#_push
187b4                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
187b4     1C 00 90 FD | 	jmp	#LR__1974
187b8                 | LR__1972
187b8     29 12 06 F6 | 	mov	arg01, #41
187bc     00 14 06 F6 | 	mov	arg02, #0
187c0     F8 BE B0 FD | 	call	#_printerror
187c4                 | '      printerror(41) : return
187c4     0C 00 90 FD | 	jmp	#LR__1974
187c8                 | LR__1973
187c8     29 12 06 F6 | 	mov	arg01, #41
187cc     00 14 06 F6 | 	mov	arg02, #0
187d0     E8 BE B0 FD | 	call	#_printerror
187d4                 | LR__1974
187d4     A7 F0 03 F6 | 	mov	ptra, fp
187d8     B2 00 A0 FD | 	call	#popregs_
187dc                 | _do_padz_ret
187dc     2D 00 64 FD | 	ret
187e0                 | 
187e0                 | ' 
187e0                 | ' '-------------------- paper
187e0                 | ' 
187e0                 | ' sub do_paper
187e0                 | _do_paper
187e0     03 4A 05 F6 | 	mov	COUNT_, #3
187e4     A8 00 A0 FD | 	call	#pushregs_
187e8     34 50 BF FD | 	call	#_pop
187ec     FD 26 02 F6 | 	mov	local01, result1
187f0     FE 28 02 F6 | 	mov	local02, result2
187f4     FF 2A 02 F6 | 	mov	local03, result3
187f8                 | ' t1=pop() 
187f8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
187f8     1E 2A 0E F2 | 	cmp	local03, #30 wz
187fc     10 00 90 5D |  if_ne	jmp	#LR__1980
18800     13 13 02 F6 | 	mov	arg01, local01
18804     00 14 06 F6 | 	mov	arg02, #0
18808     4C 2C B1 FD | 	call	#__system___float_tointeger
1880c     FD 26 02 F6 | 	mov	local01, result1
18810                 | LR__1980
18810                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
18810     1F 2A 0E F2 | 	cmp	local03, #31 wz
18814     18 00 90 5D |  if_ne	jmp	#LR__1981
18818     13 13 02 F6 | 	mov	arg01, local01
1881c     80 2F B1 FD | 	call	#__system____builtin_atof
18820     FD 12 02 F6 | 	mov	arg01, result1
18824     00 14 06 F6 | 	mov	arg02, #0
18828     2C 2C B1 FD | 	call	#__system___float_tointeger
1882c     FD 26 02 F6 | 	mov	local01, result1
18830                 | LR__1981
18830     37 00 00 FF 
18834     58 E4 05 F1 | 	add	objptr, ##28248
18838     F2 26 62 FC | 	wrlong	local01, objptr
1883c     04 E4 05 F1 | 	add	objptr, #4
18840     F2 12 02 FB | 	rdlong	arg01, objptr
18844                 | ' 
18844                 | ' write_color:=ff
18844     37 00 00 FF 
18848     1B E4 85 F1 | 	sub	objptr, ##28187
1884c     F2 12 62 FC | 	wrlong	arg01, objptr
18850                 | ' write_background:=bb
18850     04 E4 05 F1 | 	add	objptr, #4
18854     F2 26 62 FC | 	wrlong	local01, objptr
18858     45 E4 85 F1 | 	sub	objptr, #69
1885c     A7 F0 03 F6 | 	mov	ptra, fp
18860     B2 00 A0 FD | 	call	#popregs_
18864                 | _do_paper_ret
18864     2D 00 64 FD | 	ret
18868                 | 
18868                 | ' 
18868                 | ' '-------------------- peek
18868                 | ' 
18868                 | ' sub do_peek
18868                 | _do_peek
18868     00 4A 05 F6 | 	mov	COUNT_, #0
1886c     A8 00 A0 FD | 	call	#pushregs_
18870     14 F0 07 F1 | 	add	ptra, #20
18874     A8 4F BF FD | 	call	#_pop
18878     A7 FA 61 FC | 	wrlong	result1, fp
1887c     04 4E 05 F1 | 	add	fp, #4
18880     A7 FC 61 FC | 	wrlong	result2, fp
18884     04 4E 05 F1 | 	add	fp, #4
18888     A7 FE 61 FC | 	wrlong	result3, fp
1888c     08 4E 85 F1 | 	sub	fp, #8
18890     A7 12 02 F6 | 	mov	arg01, fp
18894     6C 51 BF FD | 	call	#_converttoint
18898     0C 4E 05 F1 | 	add	fp, #12
1889c     A7 FA 61 FC | 	wrlong	result1, fp
188a0                 | ' 
188a0                 | ' t1=pop()
188a0                 | ' a=converttoint(t1)
188a0                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
188a0     0C 4E 85 F1 | 	sub	fp, #12
188a4     00 04 00 FF 
188a8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
188ac     1C 00 90 3D |  if_ae	jmp	#LR__1990
188b0     0C 4E 05 F1 | 	add	fp, #12
188b4     A7 12 02 FB | 	rdlong	arg01, fp
188b8     09 FB C1 FA | 	rdbyte	result1, arg01
188bc     04 4E 05 F1 | 	add	fp, #4
188c0     A7 FA 61 FC | 	wrlong	result1, fp
188c4     10 4E 85 F1 | 	sub	fp, #16
188c8     20 00 90 FD | 	jmp	#LR__1991
188cc                 | LR__1990
188cc     0C 4E 05 F1 | 	add	fp, #12
188d0     A7 12 02 FB | 	rdlong	arg01, fp
188d4     0C 4E 85 F1 | 	sub	fp, #12
188d8     58 C0 B0 FD | 	call	#_pspeek
188dc     FD FA E1 F8 | 	getbyte	result1, result1, #0
188e0     10 4E 05 F1 | 	add	fp, #16
188e4     A7 FA 61 FC | 	wrlong	result1, fp
188e8     10 4E 85 F1 | 	sub	fp, #16
188ec                 | LR__1991
188ec     08 4E 05 F1 | 	add	fp, #8
188f0     A7 3A 68 FC | 	wrlong	#29, fp
188f4     08 4E 05 F1 | 	add	fp, #8
188f8     A7 12 02 FB | 	rdlong	arg01, fp
188fc     10 4E 85 F1 | 	sub	fp, #16
18900     A7 12 62 FC | 	wrlong	arg01, fp
18904     A7 12 02 F6 | 	mov	arg01, fp
18908     AC 4F BF FD | 	call	#_push
1890c     A7 F0 03 F6 | 	mov	ptra, fp
18910     B2 00 A0 FD | 	call	#popregs_
18914                 | _do_peek_ret
18914     2D 00 64 FD | 	ret
18918                 | 
18918                 | ' 
18918                 | ' '-------------------- pinfloat
18918                 | ' 
18918                 | ' sub do_pinfloat
18918                 | _do_pinfloat
18918     00 4A 05 F6 | 	mov	COUNT_, #0
1891c     A8 00 A0 FD | 	call	#pushregs_
18920     0C F0 07 F1 | 	add	ptra, #12
18924     F8 4E BF FD | 	call	#_pop
18928     A7 FA 61 FC | 	wrlong	result1, fp
1892c     04 4E 05 F1 | 	add	fp, #4
18930     A7 FC 61 FC | 	wrlong	result2, fp
18934     04 4E 05 F1 | 	add	fp, #4
18938     A7 FE 61 FC | 	wrlong	result3, fp
1893c     08 4E 85 F1 | 	sub	fp, #8
18940     A7 12 02 F6 | 	mov	arg01, fp
18944     BC 50 BF FD | 	call	#_converttoint
18948     50 FA 61 FD | 	fltl	result1
1894c     A7 F0 03 F6 | 	mov	ptra, fp
18950     B2 00 A0 FD | 	call	#popregs_
18954                 | _do_pinfloat_ret
18954     2D 00 64 FD | 	ret
18958                 | 
18958                 | ' 
18958                 | ' '-------------------- pinhi
18958                 | ' 
18958                 | ' sub do_pinhi
18958                 | _do_pinhi
18958     00 4A 05 F6 | 	mov	COUNT_, #0
1895c     A8 00 A0 FD | 	call	#pushregs_
18960     0C F0 07 F1 | 	add	ptra, #12
18964     B8 4E BF FD | 	call	#_pop
18968     A7 FA 61 FC | 	wrlong	result1, fp
1896c     04 4E 05 F1 | 	add	fp, #4
18970     A7 FC 61 FC | 	wrlong	result2, fp
18974     04 4E 05 F1 | 	add	fp, #4
18978     A7 FE 61 FC | 	wrlong	result3, fp
1897c     08 4E 85 F1 | 	sub	fp, #8
18980     A7 12 02 F6 | 	mov	arg01, fp
18984     7C 50 BF FD | 	call	#_converttoint
18988     59 FA 61 FD | 	drvh	result1
1898c     A7 F0 03 F6 | 	mov	ptra, fp
18990     B2 00 A0 FD | 	call	#popregs_
18994                 | _do_pinhi_ret
18994     2D 00 64 FD | 	ret
18998                 | 
18998                 | ' 
18998                 | ' '-------------------- pinlo
18998                 | ' 
18998                 | ' sub do_pinlo
18998                 | _do_pinlo
18998     00 4A 05 F6 | 	mov	COUNT_, #0
1899c     A8 00 A0 FD | 	call	#pushregs_
189a0     0C F0 07 F1 | 	add	ptra, #12
189a4     78 4E BF FD | 	call	#_pop
189a8     A7 FA 61 FC | 	wrlong	result1, fp
189ac     04 4E 05 F1 | 	add	fp, #4
189b0     A7 FC 61 FC | 	wrlong	result2, fp
189b4     04 4E 05 F1 | 	add	fp, #4
189b8     A7 FE 61 FC | 	wrlong	result3, fp
189bc     08 4E 85 F1 | 	sub	fp, #8
189c0     A7 12 02 F6 | 	mov	arg01, fp
189c4     3C 50 BF FD | 	call	#_converttoint
189c8     58 FA 61 FD | 	drvl	result1
189cc     A7 F0 03 F6 | 	mov	ptra, fp
189d0     B2 00 A0 FD | 	call	#popregs_
189d4                 | _do_pinlo_ret
189d4     2D 00 64 FD | 	ret
189d8                 | 
189d8                 | ' 
189d8                 | ' '-------------------- pinread
189d8                 | ' 
189d8                 | ' sub do_pinread
189d8                 | _do_pinread
189d8     00 4A 05 F6 | 	mov	COUNT_, #0
189dc     A8 00 A0 FD | 	call	#pushregs_
189e0     0C F0 07 F1 | 	add	ptra, #12
189e4     38 4E BF FD | 	call	#_pop
189e8     A7 FA 61 FC | 	wrlong	result1, fp
189ec     04 4E 05 F1 | 	add	fp, #4
189f0     A7 FC 61 FC | 	wrlong	result2, fp
189f4     04 4E 05 F1 | 	add	fp, #4
189f8     A7 FE 61 FC | 	wrlong	result3, fp
189fc     08 4E 85 F1 | 	sub	fp, #8
18a00     A7 12 02 F6 | 	mov	arg01, fp
18a04     FC 4F BF FD | 	call	#_converttoint
18a08     FD 12 02 F6 | 	mov	arg01, result1
18a0c     20 12 CE F7 | 	test	arg01, #32 wz
18a10     FF FB 01 56 |  if_ne	mov	result1, inb
18a14     FE FB 01 A6 |  if_e	mov	result1, ina
18a18     09 FB 41 F0 | 	shr	result1, arg01
18a1c     06 12 46 F0 | 	shr	arg01, #6
18a20     09 FB 41 F7 | 	zerox	result1, arg01
18a24     52 00 00 FF 
18a28     68 E5 05 F1 | 	add	objptr, ##42344
18a2c     F2 FA 61 FC | 	wrlong	result1, objptr
18a30     52 00 00 FF 
18a34     68 E5 85 F1 | 	sub	objptr, ##42344
18a38     08 4E 05 F1 | 	add	fp, #8
18a3c     A7 3A 68 FC | 	wrlong	#29, fp
18a40     08 4E 85 F1 | 	sub	fp, #8
18a44     A7 08 68 FC | 	wrlong	#4, fp
18a48     A7 12 02 F6 | 	mov	arg01, fp
18a4c     68 4E BF FD | 	call	#_push
18a50     A7 F0 03 F6 | 	mov	ptra, fp
18a54     B2 00 A0 FD | 	call	#popregs_
18a58                 | _do_pinread_ret
18a58     2D 00 64 FD | 	ret
18a5c                 | 
18a5c                 | ' 
18a5c                 | ' '-------------------- pinstart
18a5c                 | ' 
18a5c                 | ' sub do_pinstart
18a5c                 | _do_pinstart
18a5c     03 4A 05 F6 | 	mov	COUNT_, #3
18a60     A8 00 A0 FD | 	call	#pushregs_
18a64     30 F0 07 F1 | 	add	ptra, #48
18a68     B4 4D BF FD | 	call	#_pop
18a6c     FD 16 02 F6 | 	mov	arg03, result1
18a70     FE 14 02 F6 | 	mov	arg02, result2
18a74     FF 18 02 F6 | 	mov	arg04, result3
18a78     A7 16 62 FC | 	wrlong	arg03, fp
18a7c     04 4E 05 F1 | 	add	fp, #4
18a80     A7 14 62 FC | 	wrlong	arg02, fp
18a84     04 4E 05 F1 | 	add	fp, #4
18a88     A7 18 62 FC | 	wrlong	arg04, fp
18a8c     08 4E 85 F1 | 	sub	fp, #8
18a90     8C 4D BF FD | 	call	#_pop
18a94     FD 16 02 F6 | 	mov	arg03, result1
18a98     FE 14 02 F6 | 	mov	arg02, result2
18a9c     FF 18 02 F6 | 	mov	arg04, result3
18aa0     0C 4E 05 F1 | 	add	fp, #12
18aa4     A7 16 62 FC | 	wrlong	arg03, fp
18aa8     04 4E 05 F1 | 	add	fp, #4
18aac     A7 14 62 FC | 	wrlong	arg02, fp
18ab0     04 4E 05 F1 | 	add	fp, #4
18ab4     A7 18 62 FC | 	wrlong	arg04, fp
18ab8     14 4E 85 F1 | 	sub	fp, #20
18abc     60 4D BF FD | 	call	#_pop
18ac0     FD 16 02 F6 | 	mov	arg03, result1
18ac4     FE 14 02 F6 | 	mov	arg02, result2
18ac8     FF 18 02 F6 | 	mov	arg04, result3
18acc     18 4E 05 F1 | 	add	fp, #24
18ad0     A7 16 62 FC | 	wrlong	arg03, fp
18ad4     04 4E 05 F1 | 	add	fp, #4
18ad8     A7 14 62 FC | 	wrlong	arg02, fp
18adc     04 4E 05 F1 | 	add	fp, #4
18ae0     A7 18 62 FC | 	wrlong	arg04, fp
18ae4     20 4E 85 F1 | 	sub	fp, #32
18ae8     34 4D BF FD | 	call	#_pop
18aec     FF 16 02 F6 | 	mov	arg03, result3
18af0     24 4E 05 F1 | 	add	fp, #36
18af4     A7 FA 61 FC | 	wrlong	result1, fp
18af8     04 4E 05 F1 | 	add	fp, #4
18afc     A7 FC 61 FC | 	wrlong	result2, fp
18b00     04 4E 05 F1 | 	add	fp, #4
18b04     A7 16 62 FC | 	wrlong	arg03, fp
18b08     08 4E 85 F1 | 	sub	fp, #8
18b0c     A7 12 02 F6 | 	mov	arg01, fp
18b10     24 4E 85 F1 | 	sub	fp, #36
18b14     EC 4E BF FD | 	call	#_converttoint
18b18     FD 26 02 F6 | 	mov	local01, result1
18b1c     18 4E 05 F1 | 	add	fp, #24
18b20     A7 12 02 F6 | 	mov	arg01, fp
18b24     18 4E 85 F1 | 	sub	fp, #24
18b28     D8 4E BF FD | 	call	#_converttoint
18b2c     FD 28 02 F6 | 	mov	local02, result1
18b30     0C 4E 05 F1 | 	add	fp, #12
18b34     A7 12 02 F6 | 	mov	arg01, fp
18b38     0C 4E 85 F1 | 	sub	fp, #12
18b3c     C4 4E BF FD | 	call	#_converttoint
18b40     FD 2A 02 F6 | 	mov	local03, result1
18b44     A7 12 02 F6 | 	mov	arg01, fp
18b48     B8 4E BF FD | 	call	#_converttoint
18b4c     40 26 62 FD | 	dirl	local01
18b50     13 29 02 FC | 	wrpin	local02, local01
18b54     13 2B 12 FC | 	wxpin	local03, local01
18b58     13 FB 21 FC | 	wypin	result1, local01
18b5c     41 26 62 FD | 	dirh	local01
18b60     A7 F0 03 F6 | 	mov	ptra, fp
18b64     B2 00 A0 FD | 	call	#popregs_
18b68                 | _do_pinstart_ret
18b68     2D 00 64 FD | 	ret
18b6c                 | 
18b6c                 | ' 
18b6c                 | ' '-------------------- pintoggle
18b6c                 | ' 
18b6c                 | ' sub do_pintoggle
18b6c                 | _do_pintoggle
18b6c     00 4A 05 F6 | 	mov	COUNT_, #0
18b70     A8 00 A0 FD | 	call	#pushregs_
18b74     0C F0 07 F1 | 	add	ptra, #12
18b78     A4 4C BF FD | 	call	#_pop
18b7c     A7 FA 61 FC | 	wrlong	result1, fp
18b80     04 4E 05 F1 | 	add	fp, #4
18b84     A7 FC 61 FC | 	wrlong	result2, fp
18b88     04 4E 05 F1 | 	add	fp, #4
18b8c     A7 FE 61 FC | 	wrlong	result3, fp
18b90     08 4E 85 F1 | 	sub	fp, #8
18b94     A7 12 02 F6 | 	mov	arg01, fp
18b98     68 4E BF FD | 	call	#_converttoint
18b9c     5F FA 61 FD | 	drvnot	result1
18ba0     A7 F0 03 F6 | 	mov	ptra, fp
18ba4     B2 00 A0 FD | 	call	#popregs_
18ba8                 | _do_pintoggle_ret
18ba8     2D 00 64 FD | 	ret
18bac                 | 
18bac                 | ' 
18bac                 | ' '-------------------- pinwrite
18bac                 | ' 
18bac                 | ' sub do_pinwrite
18bac                 | _do_pinwrite
18bac     01 4A 05 F6 | 	mov	COUNT_, #1
18bb0     A8 00 A0 FD | 	call	#pushregs_
18bb4     18 F0 07 F1 | 	add	ptra, #24
18bb8     64 4C BF FD | 	call	#_pop
18bbc     FD 14 02 F6 | 	mov	arg02, result1
18bc0     FE 12 02 F6 | 	mov	arg01, result2
18bc4     FF 26 02 F6 | 	mov	local01, result3
18bc8     A7 14 62 FC | 	wrlong	arg02, fp
18bcc     04 4E 05 F1 | 	add	fp, #4
18bd0     A7 12 62 FC | 	wrlong	arg01, fp
18bd4     04 4E 05 F1 | 	add	fp, #4
18bd8     A7 26 62 FC | 	wrlong	local01, fp
18bdc     08 4E 85 F1 | 	sub	fp, #8
18be0     3C 4C BF FD | 	call	#_pop
18be4     FF 26 02 F6 | 	mov	local01, result3
18be8     0C 4E 05 F1 | 	add	fp, #12
18bec     A7 FA 61 FC | 	wrlong	result1, fp
18bf0     04 4E 05 F1 | 	add	fp, #4
18bf4     A7 FC 61 FC | 	wrlong	result2, fp
18bf8     04 4E 05 F1 | 	add	fp, #4
18bfc     A7 26 62 FC | 	wrlong	local01, fp
18c00     08 4E 85 F1 | 	sub	fp, #8
18c04     A7 12 02 F6 | 	mov	arg01, fp
18c08     0C 4E 85 F1 | 	sub	fp, #12
18c0c     F4 4D BF FD | 	call	#_converttoint
18c10     FD 26 02 F6 | 	mov	local01, result1
18c14     A7 12 02 F6 | 	mov	arg01, fp
18c18     E8 4D BF FD | 	call	#_converttoint
18c1c     FD 14 02 F6 | 	mov	arg02, result1
18c20     13 13 02 F6 | 	mov	arg01, local01
18c24     A0 F6 B0 FD | 	call	#__system___pinwrite
18c28     A7 F0 03 F6 | 	mov	ptra, fp
18c2c     B2 00 A0 FD | 	call	#popregs_
18c30                 | _do_pinwrite_ret
18c30     2D 00 64 FD | 	ret
18c34                 | 
18c34                 | ' 
18c34                 | ' '-------------------- play
18c34                 | ' 
18c34                 | ' sub do_play
18c34                 | _do_play
18c34     08 4A 05 F6 | 	mov	COUNT_, #8
18c38     A8 00 A0 FD | 	call	#pushregs_
18c3c     84 F0 07 F1 | 	add	ptra, #132
18c40     70 4E 05 F1 | 	add	fp, #112
18c44     77 CC A1 FF 
18c48     A7 7C 6B FC | 	wrlong	##1134096318, fp
18c4c                 | ' speed_coeff=305.873
18c4c                 | ' 
18c4c                 | ' for i=0 to 9 : params(i)=-2.0 : next i
18c4c     6C 4E 85 F1 | 	sub	fp, #108
18c50     A7 00 68 FC | 	wrlong	#0, fp
18c54     97 18 48 FB | 	callpa	#(@LR__2001-@LR__2000)>>2,fcache_load_ptr_
18c58                 | LR__2000
18c58     A7 18 02 FB | 	rdlong	arg04, fp
18c5c     02 18 66 F0 | 	shl	arg04, #2
18c60     38 4E 05 F1 | 	add	fp, #56
18c64     A7 18 02 F1 | 	add	arg04, fp
18c68     00 00 E0 FF 
18c6c     0C 01 68 FC | 	wrlong	##-1073741824, arg04
18c70     38 4E 85 F1 | 	sub	fp, #56
18c74     A7 26 02 FB | 	rdlong	local01, fp
18c78     01 26 06 F1 | 	add	local01, #1
18c7c     A7 26 62 FC | 	wrlong	local01, fp
18c80     0A 26 56 F2 | 	cmps	local01, #10 wc
18c84     D0 FF 9F CD |  if_b	jmp	#LR__2000
18c88                 | LR__2001
18c88     04 4E 85 F1 | 	sub	fp, #4
18c8c     4A 00 00 FF 
18c90     A0 E4 05 F1 | 	add	objptr, ##38048
18c94     F2 28 02 FB | 	rdlong	local02, objptr
18c98     14 2B 02 F6 | 	mov	local03, local02
18c9c     01 2A 66 F0 | 	shl	local03, #1
18ca0     14 2B 02 F1 | 	add	local03, local02
18ca4     02 2A 66 F0 | 	shl	local03, #2
18ca8     03 00 00 FF 
18cac     04 E4 85 F1 | 	sub	objptr, ##1540
18cb0     F2 2A 02 F1 | 	add	local03, objptr
18cb4     15 2D 02 FB | 	rdlong	local04, local03
18cb8     A7 2C 62 FC | 	wrlong	local04, fp
18cbc                 | ' numpar=compiledline(lineptr_e).result.uresult
18cbc                 | ' for i=numpar to 1 step -1 
18cbc     04 4E 05 F1 | 	add	fp, #4
18cc0     A7 2C 62 FC | 	wrlong	local04, fp
18cc4     04 4E 85 F1 | 	sub	fp, #4
18cc8     47 00 00 FF 
18ccc     9C E4 85 F1 | 	sub	objptr, ##36508
18cd0                 | LR__2002
18cd0     4C 4B BF FD | 	call	#_pop
18cd4     64 4E 05 F1 | 	add	fp, #100
18cd8     A7 FA 61 FC | 	wrlong	result1, fp
18cdc     04 4E 05 F1 | 	add	fp, #4
18ce0     A7 FC 61 FC | 	wrlong	result2, fp
18ce4     04 4E 05 F1 | 	add	fp, #4
18ce8     A7 FE 61 FC | 	wrlong	result3, fp
18cec     68 4E 85 F1 | 	sub	fp, #104
18cf0     A7 2A 02 FB | 	rdlong	local03, fp
18cf4     01 2A 86 F1 | 	sub	local03, #1
18cf8     02 2A 66 F0 | 	shl	local03, #2
18cfc     38 4E 05 F1 | 	add	fp, #56
18d00     A7 2A 02 F1 | 	add	local03, fp
18d04     28 4E 05 F1 | 	add	fp, #40
18d08     A7 2E 02 F6 | 	mov	local05, fp
18d0c     17 13 02 F6 | 	mov	arg01, local05
18d10     64 4E 85 F1 | 	sub	fp, #100
18d14     A8 4D BF FD | 	call	#_converttofloat
18d18     15 FB 61 FC | 	wrlong	result1, local03
18d1c     04 4E 05 F1 | 	add	fp, #4
18d20     A7 26 02 FB | 	rdlong	local01, fp
18d24     01 26 86 F1 | 	sub	local01, #1
18d28     A7 26 62 FC | 	wrlong	local01, fp
18d2c     04 4E 85 F1 | 	sub	fp, #4
18d30     01 26 56 F2 | 	cmps	local01, #1 wc
18d34     98 FF 9F 3D |  if_ae	jmp	#LR__2002
18d38                 | ' 
18d38                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
18d38     3C 4E 05 F1 | 	add	fp, #60
18d3c     A7 12 02 FB | 	rdlong	arg01, fp
18d40     3C 4E 85 F1 | 	sub	fp, #60
18d44     00 14 06 F6 | 	mov	arg02, #0
18d48     01 16 06 F6 | 	mov	arg03, #1
18d4c     74 26 B1 FD | 	call	#__system___float_cmp
18d50     00 FA 55 F2 | 	cmps	result1, #0 wc
18d54     0C 4E 05 C1 |  if_b	add	fp, #12
18d58     A7 00 68 CC |  if_b	wrlong	#0, fp
18d5c     0C 4E 85 C1 |  if_b	sub	fp, #12
18d60     2C 00 90 CD |  if_b	jmp	#LR__2003
18d64     3C 4E 05 F1 | 	add	fp, #60
18d68     A7 12 02 FB | 	rdlong	arg01, fp
18d6c     3C 4E 85 F1 | 	sub	fp, #60
18d70     01 14 06 F6 | 	mov	arg02, #1
18d74     E0 26 B1 FD | 	call	#__system___float_tointeger
18d78     FD 26 52 F6 | 	abs	local01, result1 wc
18d7c     07 26 06 F5 | 	and	local01, #7
18d80     13 27 82 F6 | 	negc	local01, local01
18d84     0C 4E 05 F1 | 	add	fp, #12
18d88     A7 26 62 FC | 	wrlong	local01, fp
18d8c     0C 4E 85 F1 | 	sub	fp, #12
18d90                 | LR__2003
18d90                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
18d90     40 4E 05 F1 | 	add	fp, #64
18d94     A7 12 02 FB | 	rdlong	arg01, fp
18d98     40 4E 85 F1 | 	sub	fp, #64
18d9c     00 14 06 F6 | 	mov	arg02, #0
18da0     01 16 06 F6 | 	mov	arg03, #1
18da4     1C 26 B1 FD | 	call	#__system___float_cmp
18da8     00 FA 55 F2 | 	cmps	result1, #0 wc
18dac     40 00 90 3D |  if_ae	jmp	#LR__2004
18db0     0C 4E 05 F1 | 	add	fp, #12
18db4     A7 28 02 FB | 	rdlong	local02, fp
18db8     14 2B 02 F6 | 	mov	local03, local02
18dbc     03 2A 66 F0 | 	shl	local03, #3
18dc0     14 2B 82 F1 | 	sub	local03, local02
18dc4     02 2A 66 F0 | 	shl	local03, #2
18dc8     14 00 00 FF 
18dcc     38 E5 05 F1 | 	add	objptr, ##10552
18dd0     F2 2A 02 F1 | 	add	local03, objptr
18dd4     15 31 02 FB | 	rdlong	local06, local03
18dd8     68 4E 05 F1 | 	add	fp, #104
18ddc     A7 30 62 FC | 	wrlong	local06, fp
18de0     74 4E 85 F1 | 	sub	fp, #116
18de4     14 00 00 FF 
18de8     38 E5 85 F1 | 	sub	objptr, ##10552
18dec     44 00 90 FD | 	jmp	#LR__2005
18df0                 | LR__2004
18df0     40 4E 05 F1 | 	add	fp, #64
18df4     A7 2C 02 FB | 	rdlong	local04, fp
18df8     34 4E 05 F1 | 	add	fp, #52
18dfc     A7 2C 62 FC | 	wrlong	local04, fp
18e00     68 4E 85 F1 | 	sub	fp, #104
18e04     A7 28 02 FB | 	rdlong	local02, fp
18e08     14 2B 02 F6 | 	mov	local03, local02
18e0c     03 2A 66 F0 | 	shl	local03, #3
18e10     14 2B 82 F1 | 	sub	local03, local02
18e14     02 2A 66 F0 | 	shl	local03, #2
18e18     14 00 00 FF 
18e1c     38 E5 05 F1 | 	add	objptr, ##10552
18e20     F2 2A 02 F1 | 	add	local03, objptr
18e24     0C 4E 85 F1 | 	sub	fp, #12
18e28     15 2D 62 FC | 	wrlong	local04, local03
18e2c     14 00 00 FF 
18e30     38 E5 85 F1 | 	sub	objptr, ##10552
18e34                 | LR__2005
18e34                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
18e34     44 4E 05 F1 | 	add	fp, #68
18e38     A7 12 02 FB | 	rdlong	arg01, fp
18e3c     44 4E 85 F1 | 	sub	fp, #68
18e40     00 14 06 F6 | 	mov	arg02, #0
18e44     01 16 06 F6 | 	mov	arg03, #1
18e48     78 25 B1 FD | 	call	#__system___float_cmp
18e4c     00 FA 55 F2 | 	cmps	result1, #0 wc
18e50     24 00 90 CD |  if_b	jmp	#LR__2006
18e54     44 4E 05 F1 | 	add	fp, #68
18e58     A7 12 02 FB | 	rdlong	arg01, fp
18e5c     44 4E 85 F1 | 	sub	fp, #68
18e60     20 0E 23 FF 
18e64     00 14 06 F6 | 	mov	arg02, ##1176256512
18e68     01 16 66 F6 | 	neg	arg03, #1
18e6c     54 25 B1 FD | 	call	#__system___float_cmp
18e70     01 FA 55 F2 | 	cmps	result1, #1 wc
18e74     48 00 90 CD |  if_b	jmp	#LR__2007
18e78                 | LR__2006
18e78     0C 4E 05 F1 | 	add	fp, #12
18e7c     A7 2A 02 FB | 	rdlong	local03, fp
18e80     15 33 02 F6 | 	mov	local07, local03
18e84     03 32 66 F0 | 	shl	local07, #3
18e88     15 33 82 F1 | 	sub	local07, local03
18e8c     02 32 66 F0 | 	shl	local07, #2
18e90     14 00 00 FF 
18e94     38 E5 05 F1 | 	add	objptr, ##10552
18e98     F2 32 02 F1 | 	add	local07, objptr
18e9c     06 32 06 F1 | 	add	local07, #6
18ea0     19 2F E2 FA | 	rdword	local05, local07
18ea4     17 2D 32 F9 | 	getword	local04, local05, #0
18ea8     1C 4E 05 F1 | 	add	fp, #28
18eac     A7 2C 62 FC | 	wrlong	local04, fp
18eb0     28 4E 85 F1 | 	sub	fp, #40
18eb4     14 00 00 FF 
18eb8     38 E5 85 F1 | 	sub	objptr, ##10552
18ebc     54 00 90 FD | 	jmp	#LR__2008
18ec0                 | LR__2007
18ec0     44 4E 05 F1 | 	add	fp, #68
18ec4     A7 12 02 FB | 	rdlong	arg01, fp
18ec8     44 4E 85 F1 | 	sub	fp, #68
18ecc     01 14 06 F6 | 	mov	arg02, #1
18ed0     84 25 B1 FD | 	call	#__system___float_tointeger
18ed4     28 4E 05 F1 | 	add	fp, #40
18ed8     A7 FA 61 FC | 	wrlong	result1, fp
18edc     1C 4E 85 F1 | 	sub	fp, #28
18ee0     A7 28 02 FB | 	rdlong	local02, fp
18ee4     14 2B 02 F6 | 	mov	local03, local02
18ee8     03 2A 66 F0 | 	shl	local03, #3
18eec     14 2B 82 F1 | 	sub	local03, local02
18ef0     02 2A 66 F0 | 	shl	local03, #2
18ef4     14 00 00 FF 
18ef8     38 E5 05 F1 | 	add	objptr, ##10552
18efc     F2 2A 02 F1 | 	add	local03, objptr
18f00     0C 4E 85 F1 | 	sub	fp, #12
18f04     06 2A 06 F1 | 	add	local03, #6
18f08     15 FB 51 FC | 	wrword	result1, local03
18f0c     14 00 00 FF 
18f10     38 E5 85 F1 | 	sub	objptr, ##10552
18f14                 | LR__2008
18f14                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
18f14     48 4E 05 F1 | 	add	fp, #72
18f18     A7 12 02 FB | 	rdlong	arg01, fp
18f1c     48 4E 85 F1 | 	sub	fp, #72
18f20     00 14 06 F6 | 	mov	arg02, #0
18f24     01 16 06 F6 | 	mov	arg03, #1
18f28     98 24 B1 FD | 	call	#__system___float_cmp
18f2c     00 FA 55 F2 | 	cmps	result1, #0 wc
18f30     24 00 90 CD |  if_b	jmp	#LR__2009
18f34     48 4E 05 F1 | 	add	fp, #72
18f38     A7 12 02 FB | 	rdlong	arg01, fp
18f3c     48 4E 85 F1 | 	sub	fp, #72
18f40     89 C1 20 FF 
18f44     6F 14 06 F6 | 	mov	arg02, ##1099108975
18f48     01 16 66 F6 | 	neg	arg03, #1
18f4c     74 24 B1 FD | 	call	#__system___float_cmp
18f50     01 FA 55 F2 | 	cmps	result1, #1 wc
18f54     44 00 90 CD |  if_b	jmp	#LR__2010
18f58                 | LR__2009
18f58     0C 4E 05 F1 | 	add	fp, #12
18f5c     A7 28 02 FB | 	rdlong	local02, fp
18f60     14 2B 02 F6 | 	mov	local03, local02
18f64     03 2A 66 F0 | 	shl	local03, #3
18f68     14 2B 82 F1 | 	sub	local03, local02
18f6c     02 2A 66 F0 | 	shl	local03, #2
18f70     14 00 00 FF 
18f74     38 E5 05 F1 | 	add	objptr, ##10552
18f78     F2 2A 02 F1 | 	add	local03, objptr
18f7c     0C 2A 06 F1 | 	add	local03, #12
18f80     15 31 02 FB | 	rdlong	local06, local03
18f84     70 4E 05 F1 | 	add	fp, #112
18f88     A7 30 62 FC | 	wrlong	local06, fp
18f8c     7C 4E 85 F1 | 	sub	fp, #124
18f90     14 00 00 FF 
18f94     38 E5 85 F1 | 	sub	objptr, ##10552
18f98     48 00 90 FD | 	jmp	#LR__2011
18f9c                 | LR__2010
18f9c     48 4E 05 F1 | 	add	fp, #72
18fa0     A7 2C 02 FB | 	rdlong	local04, fp
18fa4     34 4E 05 F1 | 	add	fp, #52
18fa8     A7 2C 62 FC | 	wrlong	local04, fp
18fac     70 4E 85 F1 | 	sub	fp, #112
18fb0     A7 28 02 FB | 	rdlong	local02, fp
18fb4     14 2B 02 F6 | 	mov	local03, local02
18fb8     03 2A 66 F0 | 	shl	local03, #3
18fbc     14 2B 82 F1 | 	sub	local03, local02
18fc0     02 2A 66 F0 | 	shl	local03, #2
18fc4     14 00 00 FF 
18fc8     38 E5 05 F1 | 	add	objptr, ##10552
18fcc     F2 2A 02 F1 | 	add	local03, objptr
18fd0     0C 4E 85 F1 | 	sub	fp, #12
18fd4     0C 2A 06 F1 | 	add	local03, #12
18fd8     15 2D 62 FC | 	wrlong	local04, local03
18fdc     14 00 00 FF 
18fe0     38 E5 85 F1 | 	sub	objptr, ##10552
18fe4                 | LR__2011
18fe4                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
18fe4     4C 4E 05 F1 | 	add	fp, #76
18fe8     A7 12 02 FB | 	rdlong	arg01, fp
18fec     4C 4E 85 F1 | 	sub	fp, #76
18ff0     00 14 06 F6 | 	mov	arg02, #0
18ff4     01 16 06 F6 | 	mov	arg03, #1
18ff8     C8 23 B1 FD | 	call	#__system___float_cmp
18ffc     00 FA 55 F2 | 	cmps	result1, #0 wc
19000     24 00 90 CD |  if_b	jmp	#LR__2012
19004     4C 4E 05 F1 | 	add	fp, #76
19008     A7 12 02 FB | 	rdlong	arg01, fp
1900c     4C 4E 85 F1 | 	sub	fp, #76
19010     00 00 21 FF 
19014     00 14 06 F6 | 	mov	arg02, ##1107296256
19018     01 16 66 F6 | 	neg	arg03, #1
1901c     A4 23 B1 FD | 	call	#__system___float_cmp
19020     01 FA 55 F2 | 	cmps	result1, #1 wc
19024     48 00 90 CD |  if_b	jmp	#LR__2013
19028                 | LR__2012
19028     0C 4E 05 F1 | 	add	fp, #12
1902c     A7 2A 02 FB | 	rdlong	local03, fp
19030     15 33 02 F6 | 	mov	local07, local03
19034     03 32 66 F0 | 	shl	local07, #3
19038     15 33 82 F1 | 	sub	local07, local03
1903c     02 32 66 F0 | 	shl	local07, #2
19040     14 00 00 FF 
19044     38 E5 05 F1 | 	add	objptr, ##10552
19048     F2 32 02 F1 | 	add	local07, objptr
1904c     04 32 06 F1 | 	add	local07, #4
19050     19 2F C2 FA | 	rdbyte	local05, local07
19054     17 2D E2 F8 | 	getbyte	local04, local05, #0
19058     14 4E 05 F1 | 	add	fp, #20
1905c     A7 2C 62 FC | 	wrlong	local04, fp
19060     20 4E 85 F1 | 	sub	fp, #32
19064     14 00 00 FF 
19068     38 E5 85 F1 | 	sub	objptr, ##10552
1906c     54 00 90 FD | 	jmp	#LR__2014
19070                 | LR__2013
19070     4C 4E 05 F1 | 	add	fp, #76
19074     A7 12 02 FB | 	rdlong	arg01, fp
19078     4C 4E 85 F1 | 	sub	fp, #76
1907c     01 14 06 F6 | 	mov	arg02, #1
19080     D4 23 B1 FD | 	call	#__system___float_tointeger
19084     20 4E 05 F1 | 	add	fp, #32
19088     A7 FA 61 FC | 	wrlong	result1, fp
1908c     14 4E 85 F1 | 	sub	fp, #20
19090     A7 28 02 FB | 	rdlong	local02, fp
19094     14 2B 02 F6 | 	mov	local03, local02
19098     03 2A 66 F0 | 	shl	local03, #3
1909c     14 2B 82 F1 | 	sub	local03, local02
190a0     02 2A 66 F0 | 	shl	local03, #2
190a4     14 00 00 FF 
190a8     38 E5 05 F1 | 	add	objptr, ##10552
190ac     F2 2A 02 F1 | 	add	local03, objptr
190b0     0C 4E 85 F1 | 	sub	fp, #12
190b4     04 2A 06 F1 | 	add	local03, #4
190b8     15 FB 41 FC | 	wrbyte	result1, local03
190bc     14 00 00 FF 
190c0     38 E5 85 F1 | 	sub	objptr, ##10552
190c4                 | LR__2014
190c4                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
190c4     50 4E 05 F1 | 	add	fp, #80
190c8     A7 12 02 FB | 	rdlong	arg01, fp
190cc     50 4E 85 F1 | 	sub	fp, #80
190d0     00 14 06 F6 | 	mov	arg02, #0
190d4     01 16 06 F6 | 	mov	arg03, #1
190d8     E8 22 B1 FD | 	call	#__system___float_cmp
190dc     00 FA 55 F2 | 	cmps	result1, #0 wc
190e0     24 00 90 CD |  if_b	jmp	#LR__2015
190e4     50 4E 05 F1 | 	add	fp, #80
190e8     A7 12 02 FB | 	rdlong	arg01, fp
190ec     50 4E 85 F1 | 	sub	fp, #80
190f0     00 80 20 FF 
190f4     00 14 06 F6 | 	mov	arg02, ##1090519040
190f8     01 16 66 F6 | 	neg	arg03, #1
190fc     C4 22 B1 FD | 	call	#__system___float_cmp
19100     01 FA 55 F2 | 	cmps	result1, #1 wc
19104     48 00 90 CD |  if_b	jmp	#LR__2016
19108                 | LR__2015
19108     0C 4E 05 F1 | 	add	fp, #12
1910c     A7 2A 02 FB | 	rdlong	local03, fp
19110     15 33 02 F6 | 	mov	local07, local03
19114     03 32 66 F0 | 	shl	local07, #3
19118     15 33 82 F1 | 	sub	local07, local03
1911c     02 32 66 F0 | 	shl	local07, #2
19120     14 00 00 FF 
19124     38 E5 05 F1 | 	add	objptr, ##10552
19128     F2 32 02 F1 | 	add	local07, objptr
1912c     05 32 06 F1 | 	add	local07, #5
19130     19 2F C2 FA | 	rdbyte	local05, local07
19134     17 2D E2 F8 | 	getbyte	local04, local05, #0
19138     18 4E 05 F1 | 	add	fp, #24
1913c     A7 2C 62 FC | 	wrlong	local04, fp
19140     24 4E 85 F1 | 	sub	fp, #36
19144     14 00 00 FF 
19148     38 E5 85 F1 | 	sub	objptr, ##10552
1914c     54 00 90 FD | 	jmp	#LR__2017
19150                 | LR__2016
19150     50 4E 05 F1 | 	add	fp, #80
19154     A7 12 02 FB | 	rdlong	arg01, fp
19158     50 4E 85 F1 | 	sub	fp, #80
1915c     01 14 06 F6 | 	mov	arg02, #1
19160     F4 22 B1 FD | 	call	#__system___float_tointeger
19164     24 4E 05 F1 | 	add	fp, #36
19168     A7 FA 61 FC | 	wrlong	result1, fp
1916c     18 4E 85 F1 | 	sub	fp, #24
19170     A7 28 02 FB | 	rdlong	local02, fp
19174     14 2B 02 F6 | 	mov	local03, local02
19178     03 2A 66 F0 | 	shl	local03, #3
1917c     14 2B 82 F1 | 	sub	local03, local02
19180     02 2A 66 F0 | 	shl	local03, #2
19184     14 00 00 FF 
19188     38 E5 05 F1 | 	add	objptr, ##10552
1918c     F2 2A 02 F1 | 	add	local03, objptr
19190     0C 4E 85 F1 | 	sub	fp, #12
19194     05 2A 06 F1 | 	add	local03, #5
19198     15 FB 41 FC | 	wrbyte	result1, local03
1919c     14 00 00 FF 
191a0     38 E5 85 F1 | 	sub	objptr, ##10552
191a4                 | LR__2017
191a4                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
191a4     54 4E 05 F1 | 	add	fp, #84
191a8     A7 12 02 FB | 	rdlong	arg01, fp
191ac     54 4E 85 F1 | 	sub	fp, #84
191b0     00 14 06 F6 | 	mov	arg02, #0
191b4     01 16 06 F6 | 	mov	arg03, #1
191b8     08 22 B1 FD | 	call	#__system___float_cmp
191bc     00 FA 55 F2 | 	cmps	result1, #0 wc
191c0     24 00 90 CD |  if_b	jmp	#LR__2018
191c4     54 4E 05 F1 | 	add	fp, #84
191c8     A7 12 02 FB | 	rdlong	arg01, fp
191cc     54 4E 85 F1 | 	sub	fp, #84
191d0     00 3D 22 FF 
191d4     00 14 06 F6 | 	mov	arg02, ##1148846080
191d8     01 16 66 F6 | 	neg	arg03, #1
191dc     E4 21 B1 FD | 	call	#__system___float_cmp
191e0     01 FA 55 F2 | 	cmps	result1, #1 wc
191e4     44 00 90 CD |  if_b	jmp	#LR__2019
191e8                 | LR__2018
191e8     0C 4E 05 F1 | 	add	fp, #12
191ec     A7 28 02 FB | 	rdlong	local02, fp
191f0     14 2B 02 F6 | 	mov	local03, local02
191f4     03 2A 66 F0 | 	shl	local03, #3
191f8     14 2B 82 F1 | 	sub	local03, local02
191fc     02 2A 66 F0 | 	shl	local03, #2
19200     14 00 00 FF 
19204     38 E5 05 F1 | 	add	objptr, ##10552
19208     F2 2A 02 F1 | 	add	local03, objptr
1920c     08 2A 06 F1 | 	add	local03, #8
19210     15 31 02 FB | 	rdlong	local06, local03
19214     74 4E 05 F1 | 	add	fp, #116
19218     A7 30 62 FC | 	wrlong	local06, fp
1921c     80 4E 85 F1 | 	sub	fp, #128
19220     14 00 00 FF 
19224     38 E5 85 F1 | 	sub	objptr, ##10552
19228     48 00 90 FD | 	jmp	#LR__2020
1922c                 | LR__2019
1922c     54 4E 05 F1 | 	add	fp, #84
19230     A7 30 02 FB | 	rdlong	local06, fp
19234     2C 4E 05 F1 | 	add	fp, #44
19238     A7 30 62 FC | 	wrlong	local06, fp
1923c     74 4E 85 F1 | 	sub	fp, #116
19240     A7 28 02 FB | 	rdlong	local02, fp
19244     14 2B 02 F6 | 	mov	local03, local02
19248     03 2A 66 F0 | 	shl	local03, #3
1924c     14 2B 82 F1 | 	sub	local03, local02
19250     02 2A 66 F0 | 	shl	local03, #2
19254     14 00 00 FF 
19258     38 E5 05 F1 | 	add	objptr, ##10552
1925c     F2 2A 02 F1 | 	add	local03, objptr
19260     0C 4E 85 F1 | 	sub	fp, #12
19264     08 2A 06 F1 | 	add	local03, #8
19268     15 31 62 FC | 	wrlong	local06, local03
1926c     14 00 00 FF 
19270     38 E5 85 F1 | 	sub	objptr, ##10552
19274                 | LR__2020
19274                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
19274     58 4E 05 F1 | 	add	fp, #88
19278     A7 12 02 FB | 	rdlong	arg01, fp
1927c     58 4E 85 F1 | 	sub	fp, #88
19280     00 C0 5F FF 
19284     00 14 06 F6 | 	mov	arg02, ##-1082130432
19288     01 16 06 F6 | 	mov	arg03, #1
1928c     34 21 B1 FD | 	call	#__system___float_cmp
19290     00 FA 55 F2 | 	cmps	result1, #0 wc
19294     24 00 90 CD |  if_b	jmp	#LR__2021
19298     58 4E 05 F1 | 	add	fp, #88
1929c     A7 12 02 FB | 	rdlong	arg01, fp
192a0     58 4E 85 F1 | 	sub	fp, #88
192a4     00 C0 1F FF 
192a8     00 14 06 F6 | 	mov	arg02, ##1065353216
192ac     01 16 66 F6 | 	neg	arg03, #1
192b0     10 21 B1 FD | 	call	#__system___float_cmp
192b4     01 FA 55 F2 | 	cmps	result1, #1 wc
192b8     44 00 90 CD |  if_b	jmp	#LR__2022
192bc                 | LR__2021
192bc     0C 4E 05 F1 | 	add	fp, #12
192c0     A7 28 02 FB | 	rdlong	local02, fp
192c4     14 2B 02 F6 | 	mov	local03, local02
192c8     03 2A 66 F0 | 	shl	local03, #3
192cc     14 2B 82 F1 | 	sub	local03, local02
192d0     02 2A 66 F0 | 	shl	local03, #2
192d4     14 00 00 FF 
192d8     38 E5 05 F1 | 	add	objptr, ##10552
192dc     F2 2A 02 F1 | 	add	local03, objptr
192e0     10 2A 06 F1 | 	add	local03, #16
192e4     15 31 02 FB | 	rdlong	local06, local03
192e8     6C 4E 05 F1 | 	add	fp, #108
192ec     A7 30 62 FC | 	wrlong	local06, fp
192f0     78 4E 85 F1 | 	sub	fp, #120
192f4     14 00 00 FF 
192f8     38 E5 85 F1 | 	sub	objptr, ##10552
192fc     48 00 90 FD | 	jmp	#LR__2023
19300                 | LR__2022
19300     58 4E 05 F1 | 	add	fp, #88
19304     A7 30 02 FB | 	rdlong	local06, fp
19308     20 4E 05 F1 | 	add	fp, #32
1930c     A7 30 62 FC | 	wrlong	local06, fp
19310     6C 4E 85 F1 | 	sub	fp, #108
19314     A7 28 02 FB | 	rdlong	local02, fp
19318     14 2B 02 F6 | 	mov	local03, local02
1931c     03 2A 66 F0 | 	shl	local03, #3
19320     14 2B 82 F1 | 	sub	local03, local02
19324     02 2A 66 F0 | 	shl	local03, #2
19328     14 00 00 FF 
1932c     38 E5 05 F1 | 	add	objptr, ##10552
19330     F2 2A 02 F1 | 	add	local03, objptr
19334     0C 4E 85 F1 | 	sub	fp, #12
19338     10 2A 06 F1 | 	add	local03, #16
1933c     15 31 62 FC | 	wrlong	local06, local03
19340     14 00 00 FF 
19344     38 E5 85 F1 | 	sub	objptr, ##10552
19348                 | LR__2023
19348                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
19348     5C 4E 05 F1 | 	add	fp, #92
1934c     A7 12 02 FB | 	rdlong	arg01, fp
19350     5C 4E 85 F1 | 	sub	fp, #92
19354     00 14 06 F6 | 	mov	arg02, #0
19358     01 16 06 F6 | 	mov	arg03, #1
1935c     64 20 B1 FD | 	call	#__system___float_cmp
19360     00 FA 55 F2 | 	cmps	result1, #0 wc
19364     24 00 90 CD |  if_b	jmp	#LR__2024
19368     5C 4E 05 F1 | 	add	fp, #92
1936c     A7 12 02 FB | 	rdlong	arg01, fp
19370     5C 4E 85 F1 | 	sub	fp, #92
19374     80 BF 21 FF 
19378     00 14 06 F6 | 	mov	arg02, ##1132396544
1937c     01 16 66 F6 | 	neg	arg03, #1
19380     40 20 B1 FD | 	call	#__system___float_cmp
19384     01 FA 55 F2 | 	cmps	result1, #1 wc
19388     44 00 90 CD |  if_b	jmp	#LR__2025
1938c                 | LR__2024
1938c     0C 4E 05 F1 | 	add	fp, #12
19390     A7 2A 02 FB | 	rdlong	local03, fp
19394     15 33 02 F6 | 	mov	local07, local03
19398     03 32 66 F0 | 	shl	local07, #3
1939c     15 33 82 F1 | 	sub	local07, local03
193a0     02 32 66 F0 | 	shl	local07, #2
193a4     14 00 00 FF 
193a8     38 E5 05 F1 | 	add	objptr, ##10552
193ac     F2 32 02 F1 | 	add	local07, objptr
193b0     14 32 06 F1 | 	add	local07, #20
193b4     19 2D E2 FA | 	rdword	local04, local07
193b8     20 4E 05 F1 | 	add	fp, #32
193bc     A7 2C 62 FC | 	wrlong	local04, fp
193c0     2C 4E 85 F1 | 	sub	fp, #44
193c4     14 00 00 FF 
193c8     38 E5 85 F1 | 	sub	objptr, ##10552
193cc     54 00 90 FD | 	jmp	#LR__2026
193d0                 | LR__2025
193d0     5C 4E 05 F1 | 	add	fp, #92
193d4     A7 12 02 FB | 	rdlong	arg01, fp
193d8     5C 4E 85 F1 | 	sub	fp, #92
193dc     01 14 06 F6 | 	mov	arg02, #1
193e0     74 20 B1 FD | 	call	#__system___float_tointeger
193e4     2C 4E 05 F1 | 	add	fp, #44
193e8     A7 FA 61 FC | 	wrlong	result1, fp
193ec     20 4E 85 F1 | 	sub	fp, #32
193f0     A7 28 02 FB | 	rdlong	local02, fp
193f4     14 2B 02 F6 | 	mov	local03, local02
193f8     03 2A 66 F0 | 	shl	local03, #3
193fc     14 2B 82 F1 | 	sub	local03, local02
19400     02 2A 66 F0 | 	shl	local03, #2
19404     14 00 00 FF 
19408     38 E5 05 F1 | 	add	objptr, ##10552
1940c     F2 2A 02 F1 | 	add	local03, objptr
19410     0C 4E 85 F1 | 	sub	fp, #12
19414     14 2A 06 F1 | 	add	local03, #20
19418     15 FB 51 FC | 	wrword	result1, local03
1941c     14 00 00 FF 
19420     38 E5 85 F1 | 	sub	objptr, ##10552
19424                 | LR__2026
19424                 | ' if params(9)<0 orelse params(8)>255 then amode=channels(channel).amode else amode= round(params(9)) : channels(channel).amode=amode
19424     60 4E 05 F1 | 	add	fp, #96
19428     A7 12 02 FB | 	rdlong	arg01, fp
1942c     60 4E 85 F1 | 	sub	fp, #96
19430     00 14 06 F6 | 	mov	arg02, #0
19434     01 16 06 F6 | 	mov	arg03, #1
19438     88 1F B1 FD | 	call	#__system___float_cmp
1943c     00 FA 55 F2 | 	cmps	result1, #0 wc
19440     24 00 90 CD |  if_b	jmp	#LR__2027
19444     5C 4E 05 F1 | 	add	fp, #92
19448     A7 12 02 FB | 	rdlong	arg01, fp
1944c     5C 4E 85 F1 | 	sub	fp, #92
19450     80 BF 21 FF 
19454     00 14 06 F6 | 	mov	arg02, ##1132396544
19458     01 16 66 F6 | 	neg	arg03, #1
1945c     64 1F B1 FD | 	call	#__system___float_cmp
19460     01 FA 55 F2 | 	cmps	result1, #1 wc
19464     44 00 90 CD |  if_b	jmp	#LR__2028
19468                 | LR__2027
19468     0C 4E 05 F1 | 	add	fp, #12
1946c     A7 2A 02 FB | 	rdlong	local03, fp
19470     15 33 02 F6 | 	mov	local07, local03
19474     03 32 66 F0 | 	shl	local07, #3
19478     15 33 82 F1 | 	sub	local07, local03
1947c     02 32 66 F0 | 	shl	local07, #2
19480     14 00 00 FF 
19484     38 E5 05 F1 | 	add	objptr, ##10552
19488     F2 32 02 F1 | 	add	local07, objptr
1948c     16 32 06 F1 | 	add	local07, #22
19490     19 2D E2 FA | 	rdword	local04, local07
19494     2C 4E 05 F1 | 	add	fp, #44
19498     A7 2C 62 FC | 	wrlong	local04, fp
1949c     38 4E 85 F1 | 	sub	fp, #56
194a0     14 00 00 FF 
194a4     38 E5 85 F1 | 	sub	objptr, ##10552
194a8     54 00 90 FD | 	jmp	#LR__2029
194ac                 | LR__2028
194ac     60 4E 05 F1 | 	add	fp, #96
194b0     A7 12 02 FB | 	rdlong	arg01, fp
194b4     60 4E 85 F1 | 	sub	fp, #96
194b8     01 14 06 F6 | 	mov	arg02, #1
194bc     98 1F B1 FD | 	call	#__system___float_tointeger
194c0     38 4E 05 F1 | 	add	fp, #56
194c4     A7 FA 61 FC | 	wrlong	result1, fp
194c8     2C 4E 85 F1 | 	sub	fp, #44
194cc     A7 28 02 FB | 	rdlong	local02, fp
194d0     14 2B 02 F6 | 	mov	local03, local02
194d4     03 2A 66 F0 | 	shl	local03, #3
194d8     14 2B 82 F1 | 	sub	local03, local02
194dc     02 2A 66 F0 | 	shl	local03, #2
194e0     14 00 00 FF 
194e4     38 E5 05 F1 | 	add	objptr, ##10552
194e8     F2 2A 02 F1 | 	add	local03, objptr
194ec     0C 4E 85 F1 | 	sub	fp, #12
194f0     16 2A 06 F1 | 	add	local03, #22
194f4     15 FB 51 FC | 	wrword	result1, local03
194f8     14 00 00 FF 
194fc     38 E5 85 F1 | 	sub	objptr, ##10552
19500                 | LR__2029
19500                 | ' 
19500                 | ' 
19500                 | ' if amode>0 then
19500     38 4E 05 F1 | 	add	fp, #56
19504     A7 2C 02 FB | 	rdlong	local04, fp
19508     38 4E 85 F1 | 	sub	fp, #56
1950c     01 2C 56 F2 | 	cmps	local04, #1 wc
19510     08 03 90 CD |  if_b	jmp	#LR__2032
19514     74 4E 05 F1 | 	add	fp, #116
19518     A7 14 02 FB | 	rdlong	arg02, fp
1951c     74 4E 85 F1 | 	sub	fp, #116
19520     FC 16 20 FF 
19524     54 12 06 F6 | 	mov	arg01, ##1076754516
19528     38 2A B1 FD | 	call	#__system____builtin_logbase
1952c     FD 2C 02 F6 | 	mov	local04, result1
19530     1E 14 C6 F9 | 	decod	arg02, #30
19534     FC 16 20 FF 
19538     54 12 06 F6 | 	mov	arg01, ##1076754516
1953c     24 2A B1 FD | 	call	#__system____builtin_logbase
19540     FD 14 02 F6 | 	mov	arg02, result1
19544     16 13 02 F6 | 	mov	arg01, local04
19548     48 1C B1 FD | 	call	#__system___float_div
1954c     FD 12 02 F6 | 	mov	arg01, result1
19550     00 14 06 F6 | 	mov	arg02, #0
19554     00 1F B1 FD | 	call	#__system___float_tointeger
19558     30 4E 05 F1 | 	add	fp, #48
1955c     A7 FA 61 FC | 	wrlong	result1, fp
19560     1E 2C C6 F9 | 	decod	local04, #30
19564     FD 12 02 F6 | 	mov	arg01, result1
19568     08 4E 05 F1 | 	add	fp, #8
1956c     A7 32 02 FB | 	rdlong	local07, fp
19570     38 4E 85 F1 | 	sub	fp, #56
19574     19 13 02 F1 | 	add	arg01, local07
19578     09 13 52 F6 | 	abs	arg01, arg01 wc
1957c     1F 34 C6 C9 |  if_b	decod	local08, #31
19580     00 34 06 36 |  if_ae	mov	local08, #0
19584     04 16 B1 FD | 	call	#__system___float_fromuns
19588     1A FB 61 F5 | 	xor	result1, local08
1958c     FD 14 02 F6 | 	mov	arg02, result1
19590     16 13 02 F6 | 	mov	arg01, local04
19594     04 29 B1 FD | 	call	#__system____builtin_powf
19598     FD 12 02 F6 | 	mov	arg01, result1
1959c     01 14 06 F6 | 	mov	arg02, #1
195a0     B4 1E B1 FD | 	call	#__system___float_tointeger
195a4     10 4E 05 F1 | 	add	fp, #16
195a8     A7 FA 61 FC | 	wrlong	result1, fp
195ac                 | '   skip=round(2^(lfreq+amode))                     '''' this const + const 2 lines lower=18
195ac                 | '   if skip>32768 then i=skip/32768: skip=32768 else i=1
195ac     10 4E 85 F1 | 	sub	fp, #16
195b0     40 00 00 FF 
195b4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
195b8     30 00 90 CD |  if_b	jmp	#LR__2030
195bc     10 4E 05 F1 | 	add	fp, #16
195c0     A7 26 02 FB | 	rdlong	local01, fp
195c4     13 2D 52 F6 | 	abs	local04, local01 wc
195c8     0F 2C 46 F0 | 	shr	local04, #15
195cc     16 2D 82 F6 | 	negc	local04, local04
195d0     0C 4E 85 F1 | 	sub	fp, #12
195d4     A7 2C 62 FC | 	wrlong	local04, fp
195d8     0C 4E 05 F1 | 	add	fp, #12
195dc     40 00 80 FF 
195e0     A7 00 68 FC | 	wrlong	##32768, fp
195e4     10 4E 85 F1 | 	sub	fp, #16
195e8     0C 00 90 FD | 	jmp	#LR__2031
195ec                 | LR__2030
195ec     04 4E 05 F1 | 	add	fp, #4
195f0     A7 02 68 FC | 	wrlong	#1, fp
195f4     04 4E 85 F1 | 	sub	fp, #4
195f8                 | LR__2031
195f8     74 4E 05 F1 | 	add	fp, #116
195fc     A7 14 02 FB | 	rdlong	arg02, fp
19600     74 4E 85 F1 | 	sub	fp, #116
19604     AA 2B 25 FF 
19608     00 13 06 F6 | 	mov	arg01, ##1247237376
1960c     84 1B B1 FD | 	call	#__system___float_div
19610     FD 2C 02 F6 | 	mov	local04, result1
19614     04 4E 05 F1 | 	add	fp, #4
19618     A7 12 02 FB | 	rdlong	arg01, fp
1961c     04 4E 85 F1 | 	sub	fp, #4
19620     09 13 52 F6 | 	abs	arg01, arg01 wc
19624     1F 34 C6 C9 |  if_b	decod	local08, #31
19628     00 34 06 36 |  if_ae	mov	local08, #0
1962c     5C 15 B1 FD | 	call	#__system___float_fromuns
19630     1A FB 61 F5 | 	xor	result1, local08
19634     FD 26 02 F6 | 	mov	local01, result1
19638     1E 28 C6 F9 | 	decod	local02, #30
1963c     12 12 06 F6 | 	mov	arg01, #18
19640     38 4E 05 F1 | 	add	fp, #56
19644     A7 30 02 FB | 	rdlong	local06, fp
19648     18 13 82 F1 | 	sub	arg01, local06
1964c     08 4E 85 F1 | 	sub	fp, #8
19650     A7 32 02 FB | 	rdlong	local07, fp
19654     30 4E 85 F1 | 	sub	fp, #48
19658     19 13 82 F1 | 	sub	arg01, local07
1965c     09 13 52 F6 | 	abs	arg01, arg01 wc
19660     1F 34 C6 C9 |  if_b	decod	local08, #31
19664     00 34 06 36 |  if_ae	mov	local08, #0
19668     20 15 B1 FD | 	call	#__system___float_fromuns
1966c     1A FB 61 F5 | 	xor	result1, local08
19670     FD 14 02 F6 | 	mov	arg02, result1
19674     14 13 02 F6 | 	mov	arg01, local02
19678     20 28 B1 FD | 	call	#__system____builtin_powf
1967c     FD 14 02 F6 | 	mov	arg02, result1
19680     13 13 02 F6 | 	mov	arg01, local01
19684     08 19 B1 FD | 	call	#__system___float_mul
19688     FD 14 02 F6 | 	mov	arg02, result1
1968c     16 13 02 F6 | 	mov	arg01, local04
19690     00 1B B1 FD | 	call	#__system___float_div
19694     FD 12 02 F6 | 	mov	arg01, result1
19698     01 14 06 F6 | 	mov	arg02, #1
1969c     B8 1D B1 FD | 	call	#__system___float_tointeger
196a0     34 4E 05 F1 | 	add	fp, #52
196a4     A7 FA 61 FC | 	wrlong	result1, fp
196a8     28 4E 85 F1 | 	sub	fp, #40
196ac     A7 28 02 FB | 	rdlong	local02, fp
196b0     14 2B 02 F6 | 	mov	local03, local02
196b4     03 2A 66 F0 | 	shl	local03, #3
196b8     14 2B 82 F1 | 	sub	local03, local02
196bc     02 2A 66 F0 | 	shl	local03, #2
196c0     14 00 00 FF 
196c4     38 E5 05 F1 | 	add	objptr, ##10552
196c8     F2 2A 02 F1 | 	add	local03, objptr
196cc     AA 2B 25 FF 
196d0     00 31 06 F6 | 	mov	local06, ##1247237376
196d4     0C 4E 85 F1 | 	sub	fp, #12
196d8     14 00 00 FF 
196dc     38 E5 85 F1 | 	sub	objptr, ##10552
196e0     FD 12 52 F6 | 	abs	arg01, result1 wc
196e4     1F 34 C6 C9 |  if_b	decod	local08, #31
196e8     00 34 06 36 |  if_ae	mov	local08, #0
196ec     9C 14 B1 FD | 	call	#__system___float_fromuns
196f0     1A FB 61 F5 | 	xor	result1, local08
196f4     FD 14 02 F6 | 	mov	arg02, result1
196f8     18 13 02 F6 | 	mov	arg01, local06
196fc     94 1A B1 FD | 	call	#__system___float_div
19700     FD 30 02 F6 | 	mov	local06, result1
19704     10 4E 05 F1 | 	add	fp, #16
19708     A7 12 02 FB | 	rdlong	arg01, fp
1970c     10 4E 85 F1 | 	sub	fp, #16
19710     09 13 52 F6 | 	abs	arg01, arg01 wc
19714     1F 34 C6 C9 |  if_b	decod	local08, #31
19718     00 34 06 36 |  if_ae	mov	local08, #0
1971c     6C 14 B1 FD | 	call	#__system___float_fromuns
19720     1A FB 61 F5 | 	xor	result1, local08
19724     FD 12 02 F6 | 	mov	arg01, result1
19728     00 40 24 FF 
1972c     00 14 06 F6 | 	mov	arg02, ##1216348160
19730     60 1A B1 FD | 	call	#__system___float_div
19734     FD 14 02 F6 | 	mov	arg02, result1
19738     18 13 02 F6 | 	mov	arg01, local06
1973c     50 18 B1 FD | 	call	#__system___float_mul
19740     FD 30 02 F6 | 	mov	local06, result1
19744     18 2A 06 F1 | 	add	local03, #24
19748     15 31 62 FC | 	wrlong	local06, local03
1974c                 | '   period=round((3528000/freq)/(i*(2^(18-amode-lfreq))))  ' should be 3546895 but I use 338688000 for 44100 Hz samples
1974c                 | '   channels(channel).realfreq=(3528000.0/period)*(skip/(256.0*1024.0)) : print period, skip, channels(channel).realfreq
1974c     00 12 06 F6 | 	mov	arg01, #0
19750     70 46 B1 FD | 	call	#__system___getiolock_0620
19754     FD 12 02 F6 | 	mov	arg01, result1
19758     B8 E9 B0 FD | 	call	#__system___lockmem
1975c     34 4E 05 F1 | 	add	fp, #52
19760     A7 14 02 FB | 	rdlong	arg02, fp
19764     34 4E 85 F1 | 	sub	fp, #52
19768     00 12 06 F6 | 	mov	arg01, #0
1976c     00 16 06 F6 | 	mov	arg03, #0
19770     0A 18 06 F6 | 	mov	arg04, #10
19774     D8 F6 B0 FD | 	call	#__system___basic_print_integer
19778     00 12 06 F6 | 	mov	arg01, #0
1977c     09 14 06 F6 | 	mov	arg02, #9
19780     00 16 06 F6 | 	mov	arg03, #0
19784     2C F6 B0 FD | 	call	#__system___basic_print_char
19788     10 4E 05 F1 | 	add	fp, #16
1978c     A7 14 02 FB | 	rdlong	arg02, fp
19790     10 4E 85 F1 | 	sub	fp, #16
19794     00 12 06 F6 | 	mov	arg01, #0
19798     00 16 06 F6 | 	mov	arg03, #0
1979c     0A 18 06 F6 | 	mov	arg04, #10
197a0     AC F6 B0 FD | 	call	#__system___basic_print_integer
197a4     00 12 06 F6 | 	mov	arg01, #0
197a8     09 14 06 F6 | 	mov	arg02, #9
197ac     00 16 06 F6 | 	mov	arg03, #0
197b0     00 F6 B0 FD | 	call	#__system___basic_print_char
197b4     0C 4E 05 F1 | 	add	fp, #12
197b8     A7 32 02 FB | 	rdlong	local07, fp
197bc     0C 4E 85 F1 | 	sub	fp, #12
197c0     19 31 02 F6 | 	mov	local06, local07
197c4     03 30 66 F0 | 	shl	local06, #3
197c8     19 31 82 F1 | 	sub	local06, local07
197cc     02 30 66 F0 | 	shl	local06, #2
197d0     14 00 00 FF 
197d4     38 E5 05 F1 | 	add	objptr, ##10552
197d8     F2 30 02 F1 | 	add	local06, objptr
197dc     18 30 06 F1 | 	add	local06, #24
197e0     18 15 02 FB | 	rdlong	arg02, local06
197e4     00 12 06 F6 | 	mov	arg01, #0
197e8     00 16 06 F6 | 	mov	arg03, #0
197ec     23 18 06 F6 | 	mov	arg04, #35
197f0     14 00 00 FF 
197f4     38 E5 85 F1 | 	sub	objptr, ##10552
197f8     AC 1D B1 FD | 	call	#__system___basic_print_float
197fc     00 12 06 F6 | 	mov	arg01, #0
19800     0A 14 06 F6 | 	mov	arg02, #10
19804     00 16 06 F6 | 	mov	arg03, #0
19808     A8 F5 B0 FD | 	call	#__system___basic_print_char
1980c     00 12 06 F6 | 	mov	arg01, #0
19810     B0 45 B1 FD | 	call	#__system___getiolock_0620
19814     FD 00 68 FC | 	wrlong	#0, result1
19818     C0 01 90 FD | 	jmp	#LR__2033
1981c                 | LR__2032
1981c     34 4E 05 F1 | 	add	fp, #52
19820     A7 30 68 FC | 	wrlong	#24, fp
19824     00 40 24 FF 
19828     00 2C 06 F6 | 	mov	local04, ##1216348160
1982c     40 4E 05 F1 | 	add	fp, #64
19830     A7 12 02 FB | 	rdlong	arg01, fp
19834     74 4E 85 F1 | 	sub	fp, #116
19838     C7 07 24 FF 
1983c     00 14 06 F6 | 	mov	arg02, ##1208978944
19840     50 19 B1 FD | 	call	#__system___float_div
19844     FD 14 02 F6 | 	mov	arg02, result1
19848     16 13 02 F6 | 	mov	arg01, local04
1984c     40 17 B1 FD | 	call	#__system___float_mul
19850     FD 12 02 F6 | 	mov	arg01, result1
19854     01 14 06 F6 | 	mov	arg02, #1
19858     FC 1B B1 FD | 	call	#__system___float_tointeger
1985c     10 4E 05 F1 | 	add	fp, #16
19860     A7 FA 61 FC | 	wrlong	result1, fp
19864     04 4E 85 F1 | 	sub	fp, #4
19868     A7 28 02 FB | 	rdlong	local02, fp
1986c     14 2B 02 F6 | 	mov	local03, local02
19870     03 2A 66 F0 | 	shl	local03, #3
19874     14 2B 82 F1 | 	sub	local03, local02
19878     02 2A 66 F0 | 	shl	local03, #2
1987c     14 00 00 FF 
19880     38 E5 05 F1 | 	add	objptr, ##10552
19884     F2 2A 02 F1 | 	add	local03, objptr
19888     AA 2B 25 FF 
1988c     00 31 06 F6 | 	mov	local06, ##1247237376
19890     28 4E 05 F1 | 	add	fp, #40
19894     A7 12 02 FB | 	rdlong	arg01, fp
19898     34 4E 85 F1 | 	sub	fp, #52
1989c     14 00 00 FF 
198a0     38 E5 85 F1 | 	sub	objptr, ##10552
198a4     09 13 52 F6 | 	abs	arg01, arg01 wc
198a8     1F 34 C6 C9 |  if_b	decod	local08, #31
198ac     00 34 06 36 |  if_ae	mov	local08, #0
198b0     D8 12 B1 FD | 	call	#__system___float_fromuns
198b4     1A FB 61 F5 | 	xor	result1, local08
198b8     FD 14 02 F6 | 	mov	arg02, result1
198bc     18 13 02 F6 | 	mov	arg01, local06
198c0     D0 18 B1 FD | 	call	#__system___float_div
198c4     FD 30 02 F6 | 	mov	local06, result1
198c8     10 4E 05 F1 | 	add	fp, #16
198cc     A7 12 02 FB | 	rdlong	arg01, fp
198d0     10 4E 85 F1 | 	sub	fp, #16
198d4     09 13 52 F6 | 	abs	arg01, arg01 wc
198d8     1F 34 C6 C9 |  if_b	decod	local08, #31
198dc     00 34 06 36 |  if_ae	mov	local08, #0
198e0     A8 12 B1 FD | 	call	#__system___float_fromuns
198e4     1A FB 61 F5 | 	xor	result1, local08
198e8     FD 12 02 F6 | 	mov	arg01, result1
198ec     00 40 24 FF 
198f0     00 14 06 F6 | 	mov	arg02, ##1216348160
198f4     9C 18 B1 FD | 	call	#__system___float_div
198f8     FD 14 02 F6 | 	mov	arg02, result1
198fc     18 13 02 F6 | 	mov	arg01, local06
19900     8C 16 B1 FD | 	call	#__system___float_mul
19904     FD 30 02 F6 | 	mov	local06, result1
19908     18 2A 06 F1 | 	add	local03, #24
1990c     15 31 62 FC | 	wrlong	local06, local03
19910                 | '   period=24 '147000 Hz
19910                 | '   skip=round(1024*256*(freq/147000.0))
19910                 | '   channels(channel).realfreq=(3528000.0/period)*(skip/(256.0*1024.0)) : print period, skip, channels(channel).realfreq
19910     00 12 06 F6 | 	mov	arg01, #0
19914     AC 44 B1 FD | 	call	#__system___getiolock_0620
19918     FD 12 02 F6 | 	mov	arg01, result1
1991c     F4 E7 B0 FD | 	call	#__system___lockmem
19920     34 4E 05 F1 | 	add	fp, #52
19924     A7 14 02 FB | 	rdlong	arg02, fp
19928     34 4E 85 F1 | 	sub	fp, #52
1992c     00 12 06 F6 | 	mov	arg01, #0
19930     00 16 06 F6 | 	mov	arg03, #0
19934     0A 18 06 F6 | 	mov	arg04, #10
19938     14 F5 B0 FD | 	call	#__system___basic_print_integer
1993c     00 12 06 F6 | 	mov	arg01, #0
19940     09 14 06 F6 | 	mov	arg02, #9
19944     00 16 06 F6 | 	mov	arg03, #0
19948     68 F4 B0 FD | 	call	#__system___basic_print_char
1994c     10 4E 05 F1 | 	add	fp, #16
19950     A7 14 02 FB | 	rdlong	arg02, fp
19954     10 4E 85 F1 | 	sub	fp, #16
19958     00 12 06 F6 | 	mov	arg01, #0
1995c     00 16 06 F6 | 	mov	arg03, #0
19960     0A 18 06 F6 | 	mov	arg04, #10
19964     E8 F4 B0 FD | 	call	#__system___basic_print_integer
19968     00 12 06 F6 | 	mov	arg01, #0
1996c     09 14 06 F6 | 	mov	arg02, #9
19970     00 16 06 F6 | 	mov	arg03, #0
19974     3C F4 B0 FD | 	call	#__system___basic_print_char
19978     0C 4E 05 F1 | 	add	fp, #12
1997c     A7 32 02 FB | 	rdlong	local07, fp
19980     0C 4E 85 F1 | 	sub	fp, #12
19984     19 31 02 F6 | 	mov	local06, local07
19988     03 30 66 F0 | 	shl	local06, #3
1998c     19 31 82 F1 | 	sub	local06, local07
19990     02 30 66 F0 | 	shl	local06, #2
19994     14 00 00 FF 
19998     38 E5 05 F1 | 	add	objptr, ##10552
1999c     F2 30 02 F1 | 	add	local06, objptr
199a0     18 30 06 F1 | 	add	local06, #24
199a4     18 15 02 FB | 	rdlong	arg02, local06
199a8     00 12 06 F6 | 	mov	arg01, #0
199ac     00 16 06 F6 | 	mov	arg03, #0
199b0     23 18 06 F6 | 	mov	arg04, #35
199b4     14 00 00 FF 
199b8     38 E5 85 F1 | 	sub	objptr, ##10552
199bc     E8 1B B1 FD | 	call	#__system___basic_print_float
199c0     00 12 06 F6 | 	mov	arg01, #0
199c4     0A 14 06 F6 | 	mov	arg02, #10
199c8     00 16 06 F6 | 	mov	arg03, #0
199cc     E4 F3 B0 FD | 	call	#__system___basic_print_char
199d0     00 12 06 F6 | 	mov	arg01, #0
199d4     EC 43 B1 FD | 	call	#__system___getiolock_0620
199d8     FD 00 68 FC | 	wrlong	#0, result1
199dc                 | LR__2033
199dc     70 4E 05 F1 | 	add	fp, #112
199e0     A7 12 02 FB | 	rdlong	arg01, fp
199e4     10 4E 05 F1 | 	add	fp, #16
199e8     A7 14 02 FB | 	rdlong	arg02, fp
199ec     80 4E 85 F1 | 	sub	fp, #128
199f0     A0 17 B1 FD | 	call	#__system___float_div
199f4     FD 12 02 F6 | 	mov	arg01, result1
199f8     01 14 06 F6 | 	mov	arg02, #1
199fc     58 1A B1 FD | 	call	#__system___float_tointeger
19a00     FD 2C 02 F6 | 	mov	local04, result1
19a04     14 4E 05 F1 | 	add	fp, #20
19a08     A7 2C 62 FC | 	wrlong	local04, fp
19a0c     64 4E 05 F1 | 	add	fp, #100
19a10     A7 14 02 FB | 	rdlong	arg02, fp
19a14     78 4E 85 F1 | 	sub	fp, #120
19a18     00 00 23 FF 
19a1c     00 12 06 F6 | 	mov	arg01, ##1174405120
19a20     6C 15 B1 FD | 	call	#__system___float_mul
19a24     FD 12 02 F6 | 	mov	arg01, result1
19a28     01 14 06 F6 | 	mov	arg02, #1
19a2c     28 1A B1 FD | 	call	#__system___float_tointeger
19a30     0D 2C C6 F9 | 	decod	local04, #13
19a34     FD 2C 02 F1 | 	add	local04, result1
19a38     18 4E 05 F1 | 	add	fp, #24
19a3c     A7 2C 62 FC | 	wrlong	local04, fp
19a40     64 4E 05 F1 | 	add	fp, #100
19a44     A7 14 02 FB | 	rdlong	arg02, fp
19a48     7C 4E 85 F1 | 	sub	fp, #124
19a4c     00 3D 22 FF 
19a50     00 12 06 F6 | 	mov	arg01, ##1148846080
19a54     38 15 B1 FD | 	call	#__system___float_mul
19a58     FD 12 02 F6 | 	mov	arg01, result1
19a5c     01 14 06 F6 | 	mov	arg02, #1
19a60     F4 19 B1 FD | 	call	#__system___float_tointeger
19a64     1C 4E 05 F1 | 	add	fp, #28
19a68     A7 FA 61 FC | 	wrlong	result1, fp
19a6c     37 00 00 FF 
19a70     30 E4 05 F1 | 	add	objptr, ##28208
19a74     F2 2C 02 FB | 	rdlong	local04, objptr
19a78     37 00 00 FF 
19a7c     30 E4 85 F1 | 	sub	objptr, ##28208
19a80     10 4E 85 F1 | 	sub	fp, #16
19a84     A7 28 02 FB | 	rdlong	local02, fp
19a88     06 28 66 F0 | 	shl	local02, #6
19a8c     14 2D 02 F1 | 	add	local04, local02
19a90     04 4E 85 F1 | 	sub	fp, #4
19a94     A7 2C 62 FC | 	wrlong	local04, fp
19a98                 | ' 
19a98                 | ' speed=round(speed_coeff/slen)
19a98                 | ' ipan=8192+round(8192*pan)
19a98                 | ' ivol=round(1000.0*vol)
19a98                 | ' base2=base+64*channel
19a98                 | ' if wave <32 then 
19a98     18 4E 05 F1 | 	add	fp, #24
19a9c     A7 2C 02 FB | 	rdlong	local04, fp
19aa0     20 4E 85 F1 | 	sub	fp, #32
19aa4     20 2C 56 F2 | 	cmps	local04, #32 wc
19aa8     2C 00 90 3D |  if_ae	jmp	#LR__2034
19aac     08 4E 05 F1 | 	add	fp, #8
19ab0     A7 12 02 FB | 	rdlong	arg01, fp
19ab4     08 12 06 F1 | 	add	arg01, #8
19ab8     18 4E 05 F1 | 	add	fp, #24
19abc     A7 14 02 FB | 	rdlong	arg02, fp
19ac0     20 4E 85 F1 | 	sub	fp, #32
19ac4     0B 14 66 F0 | 	shl	arg02, #11
19ac8     00 00 60 FF 
19acc     00 14 06 F1 | 	add	arg02, ##-1073741824
19ad0     09 15 62 FC | 	wrlong	arg02, arg01
19ad4     18 00 90 FD | 	jmp	#LR__2035
19ad8                 | LR__2034
19ad8     08 4E 05 F1 | 	add	fp, #8
19adc     A7 12 02 FB | 	rdlong	arg01, fp
19ae0     08 4E 85 F1 | 	sub	fp, #8
19ae4     08 12 06 F1 | 	add	arg01, #8
19ae8     00 00 E4 FF 
19aec     09 01 68 FC | 	wrlong	##-939524096, arg01
19af0                 | LR__2035
19af0     08 4E 05 F1 | 	add	fp, #8
19af4     A7 12 02 FB | 	rdlong	arg01, fp
19af8     10 12 06 F1 | 	add	arg01, #16
19afc     04 00 80 FF 
19b00     09 01 68 FC | 	wrlong	##2048, arg01
19b04     A7 12 02 FB | 	rdlong	arg01, fp
19b08     0C 12 06 F1 | 	add	arg01, #12
19b0c     09 01 68 FC | 	wrlong	#0, arg01
19b10     A7 12 02 FB | 	rdlong	arg01, fp
19b14     14 12 06 F1 | 	add	arg01, #20
19b18     14 4E 05 F1 | 	add	fp, #20
19b1c     A7 14 02 FB | 	rdlong	arg02, fp
19b20     09 15 52 FC | 	wrword	arg02, arg01
19b24     14 4E 85 F1 | 	sub	fp, #20
19b28     A7 12 02 FB | 	rdlong	arg01, fp
19b2c     16 12 06 F1 | 	add	arg01, #22
19b30     10 4E 05 F1 | 	add	fp, #16
19b34     A7 14 02 FB | 	rdlong	arg02, fp
19b38     09 15 52 FC | 	wrword	arg02, arg01
19b3c                 | ' lpoke base2+16,2048
19b3c                 | ' lpoke base2+12,0
19b3c                 | ' dpoke base2+20,ivol 
19b3c                 | ' dpoke base2+22,ipan 
19b3c                 | ' if wave<32 then
19b3c     08 4E 05 F1 | 	add	fp, #8
19b40     A7 2C 02 FB | 	rdlong	local04, fp
19b44     20 4E 85 F1 | 	sub	fp, #32
19b48     20 2C 56 F2 | 	cmps	local04, #32 wc
19b4c     38 00 90 3D |  if_ae	jmp	#LR__2036
19b50     08 4E 05 F1 | 	add	fp, #8
19b54     A7 12 02 FB | 	rdlong	arg01, fp
19b58     18 12 06 F1 | 	add	arg01, #24
19b5c     2C 4E 05 F1 | 	add	fp, #44
19b60     A7 14 02 FB | 	rdlong	arg02, fp
19b64     09 15 52 FC | 	wrword	arg02, arg01
19b68     2C 4E 85 F1 | 	sub	fp, #44
19b6c     A7 12 02 FB | 	rdlong	arg01, fp
19b70     1A 12 06 F1 | 	add	arg01, #26
19b74     08 4E 05 F1 | 	add	fp, #8
19b78     A7 14 02 FB | 	rdlong	arg02, fp
19b7c     10 4E 85 F1 | 	sub	fp, #16
19b80     09 15 52 FC | 	wrword	arg02, arg01
19b84     48 00 90 FD | 	jmp	#LR__2037
19b88                 | LR__2036
19b88     08 4E 05 F1 | 	add	fp, #8
19b8c     A7 2C 02 FB | 	rdlong	local04, fp
19b90     18 2C 06 F1 | 	add	local04, #24
19b94     6C 4E 05 F1 | 	add	fp, #108
19b98     A7 14 02 FB | 	rdlong	arg02, fp
19b9c     74 4E 85 F1 | 	sub	fp, #116
19ba0     3E 2C 25 FF 
19ba4     3C 12 06 F6 | 	mov	arg01, ##1247312956
19ba8     E8 15 B1 FD | 	call	#__system___float_div
19bac     FD 12 02 F6 | 	mov	arg01, result1
19bb0     01 14 06 F6 | 	mov	arg02, #1
19bb4     A0 18 B1 FD | 	call	#__system___float_tointeger
19bb8     16 FB 51 FC | 	wrword	result1, local04
19bbc     08 4E 05 F1 | 	add	fp, #8
19bc0     A7 12 02 FB | 	rdlong	arg01, fp
19bc4     08 4E 85 F1 | 	sub	fp, #8
19bc8     1A 12 06 F1 | 	add	arg01, #26
19bcc     09 01 5A FC | 	wrword	#256, arg01
19bd0                 | LR__2037
19bd0     08 4E 05 F1 | 	add	fp, #8
19bd4     A7 12 02 FB | 	rdlong	arg01, fp
19bd8     1C 12 06 F1 | 	add	arg01, #28
19bdc     09 01 68 FC | 	wrlong	#0, arg01
19be0     A7 12 02 FB | 	rdlong	arg01, fp
19be4     20 12 06 F1 | 	add	arg01, #32
19be8     09 01 68 FC | 	wrlong	#0, arg01
19bec                 | ' lpoke base2+28,$0000_0000
19bec                 | ' lpoke base2+32,0 
19bec                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
19bec     1C 4E 05 F1 | 	add	fp, #28
19bf0     A7 2C 02 FB | 	rdlong	local04, fp
19bf4     24 4E 85 F1 | 	sub	fp, #36
19bf8     08 2C 0E F2 | 	cmp	local04, #8 wz
19bfc     18 00 90 5D |  if_ne	jmp	#LR__2038
19c00     08 4E 05 F1 | 	add	fp, #8
19c04     A7 12 02 FB | 	rdlong	arg01, fp
19c08     08 4E 85 F1 | 	sub	fp, #8
19c0c     24 12 06 F1 | 	add	arg01, #36
19c10     09 01 68 FC | 	wrlong	#0, arg01
19c14     34 00 90 FD | 	jmp	#LR__2039
19c18                 | LR__2038
19c18     08 4E 05 F1 | 	add	fp, #8
19c1c     A7 12 02 FB | 	rdlong	arg01, fp
19c20     24 12 06 F1 | 	add	arg01, #36
19c24     1C 4E 05 F1 | 	add	fp, #28
19c28     A7 14 02 FB | 	rdlong	arg02, fp
19c2c     24 4E 85 F1 | 	sub	fp, #36
19c30     09 14 66 F0 | 	shl	arg02, #9
19c34     0C 00 00 FF 
19c38     D8 E4 05 F1 | 	add	objptr, ##6360
19c3c     F2 14 02 F1 | 	add	arg02, objptr
19c40     0C 00 00 FF 
19c44     D8 E4 85 F1 | 	sub	objptr, ##6360
19c48     09 15 62 FC | 	wrlong	arg02, arg01
19c4c                 | LR__2039
19c4c     08 4E 05 F1 | 	add	fp, #8
19c50     A7 12 02 FB | 	rdlong	arg01, fp
19c54     28 12 06 F1 | 	add	arg01, #40
19c58     0C 4E 05 F1 | 	add	fp, #12
19c5c     A7 14 02 FB | 	rdlong	arg02, fp
19c60     09 15 62 FC | 	wrlong	arg02, arg01
19c64     0C 4E 85 F1 | 	sub	fp, #12
19c68     A7 12 02 FB | 	rdlong	arg01, fp
19c6c     2C 12 06 F1 | 	add	arg01, #44
19c70     24 4E 05 F1 | 	add	fp, #36
19c74     A7 14 02 FB | 	rdlong	arg02, fp
19c78     09 15 62 FC | 	wrlong	arg02, arg01
19c7c                 | ' lpoke base2+40,speed 
19c7c                 | ' lpoke base2+44,sus 
19c7c                 | ' if delay>0 then waitms(delay) 
19c7c     04 4E 85 F1 | 	sub	fp, #4
19c80     A7 2C 02 FB | 	rdlong	local04, fp
19c84     28 4E 85 F1 | 	sub	fp, #40
19c88     01 2C 56 F2 | 	cmps	local04, #1 wc
19c8c     28 4E 05 31 |  if_ae	add	fp, #40
19c90     A7 12 02 3B |  if_ae	rdlong	arg01, fp
19c94     28 4E 85 31 |  if_ae	sub	fp, #40
19c98     6C E7 B0 3D |  if_ae	call	#__system___waitms
19c9c     A7 F0 03 F6 | 	mov	ptra, fp
19ca0     B2 00 A0 FD | 	call	#popregs_
19ca4                 | _do_play_ret
19ca4     2D 00 64 FD | 	ret
19ca8                 | 
19ca8                 | ' 
19ca8                 | ' '-------------------- plot
19ca8                 | ' 
19ca8                 | ' sub do_plot
19ca8                 | _do_plot
19ca8     00 4A 05 F6 | 	mov	COUNT_, #0
19cac     A8 00 A0 FD | 	call	#pushregs_
19cb0     20 F0 07 F1 | 	add	ptra, #32
19cb4     68 3B BF FD | 	call	#_pop
19cb8     FD 16 02 F6 | 	mov	arg03, result1
19cbc     FE 14 02 F6 | 	mov	arg02, result2
19cc0     FF 12 02 F6 | 	mov	arg01, result3
19cc4     0C 4E 05 F1 | 	add	fp, #12
19cc8     A7 16 62 FC | 	wrlong	arg03, fp
19ccc     04 4E 05 F1 | 	add	fp, #4
19cd0     A7 14 62 FC | 	wrlong	arg02, fp
19cd4     04 4E 05 F1 | 	add	fp, #4
19cd8     A7 12 62 FC | 	wrlong	arg01, fp
19cdc     14 4E 85 F1 | 	sub	fp, #20
19ce0     3C 3B BF FD | 	call	#_pop
19ce4     FF 16 02 F6 | 	mov	arg03, result3
19ce8     A7 FA 61 FC | 	wrlong	result1, fp
19cec     04 4E 05 F1 | 	add	fp, #4
19cf0     A7 FC 61 FC | 	wrlong	result2, fp
19cf4     04 4E 05 F1 | 	add	fp, #4
19cf8     A7 16 62 FC | 	wrlong	arg03, fp
19cfc     08 4E 85 F1 | 	sub	fp, #8
19d00     A7 12 02 F6 | 	mov	arg01, fp
19d04     FC 3C BF FD | 	call	#_converttoint
19d08     18 4E 05 F1 | 	add	fp, #24
19d0c     A7 FA 61 FC | 	wrlong	result1, fp
19d10     0C 4E 85 F1 | 	sub	fp, #12
19d14     A7 12 02 F6 | 	mov	arg01, fp
19d18     0C 4E 85 F1 | 	sub	fp, #12
19d1c     E4 3C BF FD | 	call	#_converttoint
19d20     1C 4E 05 F1 | 	add	fp, #28
19d24     A7 FA 61 FC | 	wrlong	result1, fp
19d28     04 4E 85 F1 | 	sub	fp, #4
19d2c     A7 16 02 FB | 	rdlong	arg03, fp
19d30     37 00 00 FF 
19d34     4C E4 05 F1 | 	add	objptr, ##28236
19d38     F2 16 62 FC | 	wrlong	arg03, objptr
19d3c     04 4E 05 F1 | 	add	fp, #4
19d40     A7 14 02 FB | 	rdlong	arg02, fp
19d44     1C 4E 85 F1 | 	sub	fp, #28
19d48     04 E4 05 F1 | 	add	objptr, #4
19d4c     F2 14 62 FC | 	wrlong	arg02, objptr
19d50     04 E4 85 F1 | 	sub	objptr, #4
19d54     F2 12 02 FB | 	rdlong	arg01, objptr
19d58     04 E4 85 F1 | 	sub	objptr, #4
19d5c     F2 16 02 FB | 	rdlong	arg03, objptr
19d60     37 00 00 FF 
19d64     48 E4 85 F1 | 	sub	objptr, ##28232
19d68     04 BA B0 FD | 	call	#_hg010b_spin2_putpixel
19d6c     A7 F0 03 F6 | 	mov	ptra, fp
19d70     B2 00 A0 FD | 	call	#popregs_
19d74                 | _do_plot_ret
19d74     2D 00 64 FD | 	ret
19d78                 | 
19d78                 | ' 
19d78                 | ' '-------------------- poke
19d78                 | ' 
19d78                 | ' sub do_poke
19d78                 | _do_poke
19d78     01 4A 05 F6 | 	mov	COUNT_, #1
19d7c     A8 00 A0 FD | 	call	#pushregs_
19d80     20 F0 07 F1 | 	add	ptra, #32
19d84     98 3A BF FD | 	call	#_pop
19d88     FD 14 02 F6 | 	mov	arg02, result1
19d8c     FE 12 02 F6 | 	mov	arg01, result2
19d90     FF 26 02 F6 | 	mov	local01, result3
19d94     A7 14 62 FC | 	wrlong	arg02, fp
19d98     04 4E 05 F1 | 	add	fp, #4
19d9c     A7 12 62 FC | 	wrlong	arg01, fp
19da0     04 4E 05 F1 | 	add	fp, #4
19da4     A7 26 62 FC | 	wrlong	local01, fp
19da8     08 4E 85 F1 | 	sub	fp, #8
19dac     70 3A BF FD | 	call	#_pop
19db0     FF 26 02 F6 | 	mov	local01, result3
19db4     0C 4E 05 F1 | 	add	fp, #12
19db8     A7 FA 61 FC | 	wrlong	result1, fp
19dbc     04 4E 05 F1 | 	add	fp, #4
19dc0     A7 FC 61 FC | 	wrlong	result2, fp
19dc4     04 4E 05 F1 | 	add	fp, #4
19dc8     A7 26 62 FC | 	wrlong	local01, fp
19dcc     08 4E 85 F1 | 	sub	fp, #8
19dd0     A7 12 02 F6 | 	mov	arg01, fp
19dd4     0C 4E 85 F1 | 	sub	fp, #12
19dd8     28 3C BF FD | 	call	#_converttoint
19ddc     18 4E 05 F1 | 	add	fp, #24
19de0     A7 FA 61 FC | 	wrlong	result1, fp
19de4     18 4E 85 F1 | 	sub	fp, #24
19de8     A7 12 02 F6 | 	mov	arg01, fp
19dec     14 3C BF FD | 	call	#_converttoint
19df0     1C 4E 05 F1 | 	add	fp, #28
19df4     A7 FA 61 FC | 	wrlong	result1, fp
19df8                 | ' t1=pop() 'value
19df8                 | ' t2=pop() 
19df8                 | ' a=converttoint(t2) : v=converttoint(t1)
19df8                 | ' if a<$80000 then poke a,v else pspoke a,v
19df8     04 4E 85 F1 | 	sub	fp, #4
19dfc     A7 26 02 FB | 	rdlong	local01, fp
19e00     18 4E 85 F1 | 	sub	fp, #24
19e04     00 04 00 FF 
19e08     00 26 16 F2 | 	cmp	local01, ##524288 wc
19e0c     1C 00 90 3D |  if_ae	jmp	#LR__2040
19e10     18 4E 05 F1 | 	add	fp, #24
19e14     A7 12 02 FB | 	rdlong	arg01, fp
19e18     04 4E 05 F1 | 	add	fp, #4
19e1c     A7 14 02 FB | 	rdlong	arg02, fp
19e20     1C 4E 85 F1 | 	sub	fp, #28
19e24     09 15 42 FC | 	wrbyte	arg02, arg01
19e28     18 00 90 FD | 	jmp	#LR__2041
19e2c                 | LR__2040
19e2c     18 4E 05 F1 | 	add	fp, #24
19e30     A7 12 02 FB | 	rdlong	arg01, fp
19e34     04 4E 05 F1 | 	add	fp, #4
19e38     A7 14 02 FB | 	rdlong	arg02, fp
19e3c     1C 4E 85 F1 | 	sub	fp, #28
19e40     A8 AA B0 FD | 	call	#_pspoke
19e44                 | LR__2041
19e44     A7 F0 03 F6 | 	mov	ptra, fp
19e48     B2 00 A0 FD | 	call	#popregs_
19e4c                 | _do_poke_ret
19e4c     2D 00 64 FD | 	ret
19e50                 | 
19e50                 | ' 
19e50                 | ' '-------------------- pop
19e50                 | ' 
19e50                 | ' sub do_pop()
19e50                 | _do_pop
19e50                 | ' if gosubtop>0 then  gosubtop -=1 
19e50     50 00 00 FF 
19e54     54 E5 05 F1 | 	add	objptr, ##41300
19e58     F2 00 02 FB | 	rdlong	_var01, objptr
19e5c     50 00 00 FF 
19e60     54 E5 85 F1 | 	sub	objptr, ##41300
19e64     01 00 56 F2 | 	cmps	_var01, #1 wc
19e68     50 00 00 3F 
19e6c     54 E5 05 31 |  if_ae	add	objptr, ##41300
19e70     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
19e74     01 00 86 31 |  if_ae	sub	_var01, #1
19e78     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
19e7c     50 00 00 3F 
19e80     54 E5 85 31 |  if_ae	sub	objptr, ##41300
19e84                 | _do_pop_ret
19e84     2D 00 64 FD | 	ret
19e88                 | 
19e88                 | ' 
19e88                 | ' '-------------------- position
19e88                 | ' 
19e88                 | ' sub do_position
19e88                 | _do_position
19e88     01 4A 05 F6 | 	mov	COUNT_, #1
19e8c     A8 00 A0 FD | 	call	#pushregs_
19e90     18 F0 07 F1 | 	add	ptra, #24
19e94     88 39 BF FD | 	call	#_pop
19e98     FD 14 02 F6 | 	mov	arg02, result1
19e9c     FE 12 02 F6 | 	mov	arg01, result2
19ea0     FF 26 02 F6 | 	mov	local01, result3
19ea4     A7 14 62 FC | 	wrlong	arg02, fp
19ea8     04 4E 05 F1 | 	add	fp, #4
19eac     A7 12 62 FC | 	wrlong	arg01, fp
19eb0     04 4E 05 F1 | 	add	fp, #4
19eb4     A7 26 62 FC | 	wrlong	local01, fp
19eb8     08 4E 85 F1 | 	sub	fp, #8
19ebc     60 39 BF FD | 	call	#_pop
19ec0     FF 26 02 F6 | 	mov	local01, result3
19ec4     0C 4E 05 F1 | 	add	fp, #12
19ec8     A7 FA 61 FC | 	wrlong	result1, fp
19ecc     04 4E 05 F1 | 	add	fp, #4
19ed0     A7 FC 61 FC | 	wrlong	result2, fp
19ed4     04 4E 05 F1 | 	add	fp, #4
19ed8     A7 26 62 FC | 	wrlong	local01, fp
19edc     08 4E 85 F1 | 	sub	fp, #8
19ee0     A7 12 02 F6 | 	mov	arg01, fp
19ee4     0C 4E 85 F1 | 	sub	fp, #12
19ee8     18 3B BF FD | 	call	#_converttoint
19eec     FD 26 02 F6 | 	mov	local01, result1
19ef0     A7 12 02 F6 | 	mov	arg01, fp
19ef4     0C 3B BF FD | 	call	#_converttoint
19ef8     FD 14 02 F6 | 	mov	arg02, result1
19efc     13 13 02 F6 | 	mov	arg01, local01
19f00     74 C4 B0 FD | 	call	#_hg010b_spin2_setcursorpos
19f04     A7 F0 03 F6 | 	mov	ptra, fp
19f08     B2 00 A0 FD | 	call	#popregs_
19f0c                 | _do_position_ret
19f0c     2D 00 64 FD | 	ret
19f10                 | 
19f10                 | ' 
19f10                 | ' '-------------------- print
19f10                 | ' 
19f10                 | ' sub do_print  
19f10                 | _do_print
19f10     0B 4A 05 F6 | 	mov	COUNT_, #11
19f14     A8 00 A0 FD | 	call	#pushregs_
19f18     00 2C 06 F6 | 	mov	local04, #0
19f1c     00 39 BF FD | 	call	#_pop
19f20     FD 2E 02 F6 | 	mov	local05, result1
19f24     FE 30 02 F6 | 	mov	local06, result2
19f28     FF 32 02 F6 | 	mov	local07, result3
19f2c     17 27 02 F6 | 	mov	local01, local05
19f30     18 29 02 F6 | 	mov	local02, local06
19f34     19 2B 02 F6 | 	mov	local03, local07
19f38                 | '  
19f38                 | ' r=0
19f38                 | ' t1=pop() 
19f38                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
19f38     21 2A 0E F2 | 	cmp	local03, #33 wz
19f3c     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
19f40     20 00 90 5D |  if_ne	jmp	#LR__2050
19f44     15 2D 02 F6 | 	mov	local04, local03
19f48     D4 38 BF FD | 	call	#_pop
19f4c     FD 2E 02 F6 | 	mov	local05, result1
19f50     FE 30 02 F6 | 	mov	local06, result2
19f54     FF 32 02 F6 | 	mov	local07, result3
19f58     17 27 02 F6 | 	mov	local01, local05
19f5c     18 29 02 F6 | 	mov	local02, local06
19f60     19 2B 02 F6 | 	mov	local03, local07
19f64                 | LR__2050
19f64                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
19f64     20 2A 0E F2 | 	cmp	local03, #32 wz
19f68     15 2D 02 A6 |  if_e	mov	local04, local03
19f6c                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
19f6c     FF 2A 0E F2 | 	cmp	local03, #255 wz
19f70     10 00 90 5D |  if_ne	jmp	#LR__2051
19f74     13 13 02 F6 | 	mov	arg01, local01
19f78     00 14 06 F6 | 	mov	arg02, #0
19f7c     3C A7 B0 FD | 	call	#_printerror
19f80     D4 04 90 FD | 	jmp	#LR__2070
19f84                 | LR__2051
19f84                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
19f84     2B 2A 0E F2 | 	cmp	local03, #43 wz
19f88     14 00 90 5D |  if_ne	jmp	#LR__2052
19f8c     13 13 02 F6 | 	mov	arg01, local01
19f90     04 3A BF FD | 	call	#_convertstring
19f94     FD 2E 02 F6 | 	mov	local05, result1
19f98     17 27 02 F6 | 	mov	local01, local05
19f9c     1F 2A 06 F6 | 	mov	local03, #31
19fa0                 | LR__2052
19fa0                 | ' 
19fa0                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
19fa0     2C 2A 0E F2 | 	cmp	local03, #44 wz
19fa4     80 00 90 5D |  if_ne	jmp	#LR__2053
19fa8     00 12 06 F6 | 	mov	arg01, #0
19fac     14 3E B1 FD | 	call	#__system___getiolock_0620
19fb0     FD 12 02 F6 | 	mov	arg01, result1
19fb4     5C E1 B0 FD | 	call	#__system___lockmem
19fb8     C4 01 00 FF 
19fbc     0E 14 06 F6 | 	mov	arg02, ##@LR__6109
19fc0     00 12 06 F6 | 	mov	arg01, #0
19fc4     00 16 06 F6 | 	mov	arg03, #0
19fc8     40 EE B0 FD | 	call	#__system___basic_print_string
19fcc     0A 34 06 F6 | 	mov	local08, #10
19fd0     00 12 06 F6 | 	mov	arg01, #0
19fd4     13 15 02 F6 | 	mov	arg02, local01
19fd8     00 16 06 F6 | 	mov	arg03, #0
19fdc     0A 18 06 F6 | 	mov	arg04, #10
19fe0     6C EE B0 FD | 	call	#__system___basic_print_integer
19fe4     FD 36 02 F6 | 	mov	local09, result1
19fe8     00 12 06 F6 | 	mov	arg01, #0
19fec     0A 14 06 F6 | 	mov	arg02, #10
19ff0     00 16 06 F6 | 	mov	arg03, #0
19ff4     BC ED B0 FD | 	call	#__system___basic_print_char
19ff8     01 38 06 F6 | 	mov	local10, #1
19ffc     00 12 06 F6 | 	mov	arg01, #0
1a000     C0 3D B1 FD | 	call	#__system___getiolock_0620
1a004     FD 00 68 FC | 	wrlong	#0, result1
1a008     00 3A 06 F6 | 	mov	local11, #0
1a00c     10 38 BF FD | 	call	#_pop
1a010     FD 2E 02 F6 | 	mov	local05, result1
1a014     FE 30 02 F6 | 	mov	local06, result2
1a018     FF 32 02 F6 | 	mov	local07, result3
1a01c     17 27 02 F6 | 	mov	local01, local05
1a020     18 29 02 F6 | 	mov	local02, local06
1a024     19 2B 02 F6 | 	mov	local03, local07
1a028                 | LR__2053
1a028                 | ' 
1a028                 | ' if r=print_mod_comma  then
1a028     21 2C 0E F2 | 	cmp	local04, #33 wz
1a02c     AC 01 90 5D |  if_ne	jmp	#LR__2058
1a030                 | '   if t1.result_type=result_int then print t1.result.iresult,
1a030     1C 2A 0E F2 | 	cmp	local03, #28 wz
1a034     64 00 90 5D |  if_ne	jmp	#LR__2054
1a038     00 12 06 F6 | 	mov	arg01, #0
1a03c     84 3D B1 FD | 	call	#__system___getiolock_0620
1a040     FD 12 02 F6 | 	mov	arg01, result1
1a044     CC E0 B0 FD | 	call	#__system___lockmem
1a048     00 30 06 F6 | 	mov	local06, #0
1a04c     00 12 06 F6 | 	mov	arg01, #0
1a050     13 15 02 F6 | 	mov	arg02, local01
1a054     00 16 06 F6 | 	mov	arg03, #0
1a058     0A 18 06 F6 | 	mov	arg04, #10
1a05c     F0 ED B0 FD | 	call	#__system___basic_print_integer
1a060     FD 32 02 F6 | 	mov	local07, result1
1a064     18 2F 02 F6 | 	mov	local05, local06
1a068     19 2F 02 F1 | 	add	local05, local07
1a06c     00 3A 06 F6 | 	mov	local11, #0
1a070     00 12 06 F6 | 	mov	arg01, #0
1a074     09 14 06 F6 | 	mov	arg02, #9
1a078     00 16 06 F6 | 	mov	arg03, #0
1a07c     34 ED B0 FD | 	call	#__system___basic_print_char
1a080     FD 36 02 F6 | 	mov	local09, result1
1a084     FD 2E 02 F1 | 	add	local05, result1
1a088     00 12 06 F6 | 	mov	arg01, #0
1a08c     34 3D B1 FD | 	call	#__system___getiolock_0620
1a090     FD 00 68 FC | 	wrlong	#0, result1
1a094     00 FA 05 F6 | 	mov	result1, #0
1a098     00 38 06 F6 | 	mov	local10, #0
1a09c                 | LR__2054
1a09c                 | '   if t1.result_type=result_uint then print t1.result.uresult,
1a09c     1D 2A 0E F2 | 	cmp	local03, #29 wz
1a0a0     64 00 90 5D |  if_ne	jmp	#LR__2055
1a0a4     00 12 06 F6 | 	mov	arg01, #0
1a0a8     18 3D B1 FD | 	call	#__system___getiolock_0620
1a0ac     FD 12 02 F6 | 	mov	arg01, result1
1a0b0     60 E0 B0 FD | 	call	#__system___lockmem
1a0b4     00 30 06 F6 | 	mov	local06, #0
1a0b8     00 12 06 F6 | 	mov	arg01, #0
1a0bc     13 15 02 F6 | 	mov	arg02, local01
1a0c0     00 16 06 F6 | 	mov	arg03, #0
1a0c4     0A 18 06 F6 | 	mov	arg04, #10
1a0c8     C4 ED B0 FD | 	call	#__system___basic_print_unsigned
1a0cc     FD 32 02 F6 | 	mov	local07, result1
1a0d0     18 2F 02 F6 | 	mov	local05, local06
1a0d4     19 2F 02 F1 | 	add	local05, local07
1a0d8     00 3A 06 F6 | 	mov	local11, #0
1a0dc     00 12 06 F6 | 	mov	arg01, #0
1a0e0     09 14 06 F6 | 	mov	arg02, #9
1a0e4     00 16 06 F6 | 	mov	arg03, #0
1a0e8     C8 EC B0 FD | 	call	#__system___basic_print_char
1a0ec     FD 36 02 F6 | 	mov	local09, result1
1a0f0     FD 2E 02 F1 | 	add	local05, result1
1a0f4     00 12 06 F6 | 	mov	arg01, #0
1a0f8     C8 3C B1 FD | 	call	#__system___getiolock_0620
1a0fc     FD 00 68 FC | 	wrlong	#0, result1
1a100     00 FA 05 F6 | 	mov	result1, #0
1a104     00 38 06 F6 | 	mov	local10, #0
1a108                 | LR__2055
1a108                 | '   if t1.result_type=result_float then print t1.result.fresult,
1a108     1E 2A 0E F2 | 	cmp	local03, #30 wz
1a10c     64 00 90 5D |  if_ne	jmp	#LR__2056
1a110     00 12 06 F6 | 	mov	arg01, #0
1a114     AC 3C B1 FD | 	call	#__system___getiolock_0620
1a118     FD 12 02 F6 | 	mov	arg01, result1
1a11c     F4 DF B0 FD | 	call	#__system___lockmem
1a120     00 30 06 F6 | 	mov	local06, #0
1a124     00 12 06 F6 | 	mov	arg01, #0
1a128     13 15 02 F6 | 	mov	arg02, local01
1a12c     00 16 06 F6 | 	mov	arg03, #0
1a130     23 18 06 F6 | 	mov	arg04, #35
1a134     70 14 B1 FD | 	call	#__system___basic_print_float
1a138     FD 32 02 F6 | 	mov	local07, result1
1a13c     18 2F 02 F6 | 	mov	local05, local06
1a140     19 2F 02 F1 | 	add	local05, local07
1a144     00 3A 06 F6 | 	mov	local11, #0
1a148     00 12 06 F6 | 	mov	arg01, #0
1a14c     09 14 06 F6 | 	mov	arg02, #9
1a150     00 16 06 F6 | 	mov	arg03, #0
1a154     5C EC B0 FD | 	call	#__system___basic_print_char
1a158     FD 36 02 F6 | 	mov	local09, result1
1a15c     FD 2E 02 F1 | 	add	local05, result1
1a160     00 12 06 F6 | 	mov	arg01, #0
1a164     5C 3C B1 FD | 	call	#__system___getiolock_0620
1a168     FD 00 68 FC | 	wrlong	#0, result1
1a16c     00 FA 05 F6 | 	mov	result1, #0
1a170     00 38 06 F6 | 	mov	local10, #0
1a174                 | LR__2056
1a174                 | '   if t1.result_type=result_string then print t1.result.sresult,
1a174     1F 2A 0E F2 | 	cmp	local03, #31 wz
1a178     60 00 90 5D |  if_ne	jmp	#LR__2057
1a17c     00 12 06 F6 | 	mov	arg01, #0
1a180     40 3C B1 FD | 	call	#__system___getiolock_0620
1a184     FD 12 02 F6 | 	mov	arg01, result1
1a188     88 DF B0 FD | 	call	#__system___lockmem
1a18c     00 30 06 F6 | 	mov	local06, #0
1a190     00 12 06 F6 | 	mov	arg01, #0
1a194     13 15 02 F6 | 	mov	arg02, local01
1a198     00 16 06 F6 | 	mov	arg03, #0
1a19c     6C EC B0 FD | 	call	#__system___basic_print_string
1a1a0     FD 32 02 F6 | 	mov	local07, result1
1a1a4     18 2F 02 F6 | 	mov	local05, local06
1a1a8     19 2F 02 F1 | 	add	local05, local07
1a1ac     00 3A 06 F6 | 	mov	local11, #0
1a1b0     00 12 06 F6 | 	mov	arg01, #0
1a1b4     09 14 06 F6 | 	mov	arg02, #9
1a1b8     00 16 06 F6 | 	mov	arg03, #0
1a1bc     F4 EB B0 FD | 	call	#__system___basic_print_char
1a1c0     FD 36 02 F6 | 	mov	local09, result1
1a1c4     FD 2E 02 F1 | 	add	local05, result1
1a1c8     00 12 06 F6 | 	mov	arg01, #0
1a1cc     F4 3B B1 FD | 	call	#__system___getiolock_0620
1a1d0     FD 00 68 FC | 	wrlong	#0, result1
1a1d4     00 FA 05 F6 | 	mov	result1, #0
1a1d8     00 38 06 F6 | 	mov	local10, #0
1a1dc                 | LR__2057
1a1dc                 | LR__2058
1a1dc                 | ' if r=print_mod_semicolon then 
1a1dc     22 2C 0E F2 | 	cmp	local04, #34 wz
1a1e0     1C 01 90 5D |  if_ne	jmp	#LR__2063
1a1e4                 | '   if t1.result_type=result_int then print t1.result.iresult;
1a1e4     1C 2A 0E F2 | 	cmp	local03, #28 wz
1a1e8     50 00 90 5D |  if_ne	jmp	#LR__2059
1a1ec     00 12 06 F6 | 	mov	arg01, #0
1a1f0     D0 3B B1 FD | 	call	#__system___getiolock_0620
1a1f4     FD 12 02 F6 | 	mov	arg01, result1
1a1f8     18 DF B0 FD | 	call	#__system___lockmem
1a1fc     00 30 06 F6 | 	mov	local06, #0
1a200     00 38 06 F6 | 	mov	local10, #0
1a204     0A 3A 06 F6 | 	mov	local11, #10
1a208     00 12 06 F6 | 	mov	arg01, #0
1a20c     13 15 02 F6 | 	mov	arg02, local01
1a210     00 16 06 F6 | 	mov	arg03, #0
1a214     0A 18 06 F6 | 	mov	arg04, #10
1a218     34 EC B0 FD | 	call	#__system___basic_print_integer
1a21c     FD 32 02 F6 | 	mov	local07, result1
1a220     18 2F 02 F6 | 	mov	local05, local06
1a224     19 2F 02 F1 | 	add	local05, local07
1a228     00 12 06 F6 | 	mov	arg01, #0
1a22c     94 3B B1 FD | 	call	#__system___getiolock_0620
1a230     FD 00 68 FC | 	wrlong	#0, result1
1a234     00 FA 05 F6 | 	mov	result1, #0
1a238     00 36 06 F6 | 	mov	local09, #0
1a23c                 | LR__2059
1a23c                 | '   if t1.result_type=result_uint then print t1.result.uresult;
1a23c     1D 2A 0E F2 | 	cmp	local03, #29 wz
1a240     50 00 90 5D |  if_ne	jmp	#LR__2060
1a244     00 12 06 F6 | 	mov	arg01, #0
1a248     78 3B B1 FD | 	call	#__system___getiolock_0620
1a24c     FD 12 02 F6 | 	mov	arg01, result1
1a250     C0 DE B0 FD | 	call	#__system___lockmem
1a254     00 30 06 F6 | 	mov	local06, #0
1a258     00 38 06 F6 | 	mov	local10, #0
1a25c     0A 3A 06 F6 | 	mov	local11, #10
1a260     00 12 06 F6 | 	mov	arg01, #0
1a264     13 15 02 F6 | 	mov	arg02, local01
1a268     00 16 06 F6 | 	mov	arg03, #0
1a26c     0A 18 06 F6 | 	mov	arg04, #10
1a270     1C EC B0 FD | 	call	#__system___basic_print_unsigned
1a274     FD 32 02 F6 | 	mov	local07, result1
1a278     18 2F 02 F6 | 	mov	local05, local06
1a27c     19 2F 02 F1 | 	add	local05, local07
1a280     00 12 06 F6 | 	mov	arg01, #0
1a284     3C 3B B1 FD | 	call	#__system___getiolock_0620
1a288     FD 00 68 FC | 	wrlong	#0, result1
1a28c     00 FA 05 F6 | 	mov	result1, #0
1a290     00 36 06 F6 | 	mov	local09, #0
1a294                 | LR__2060
1a294                 | '   if t1.result_type=result_float then print t1.result.fresult;
1a294     1E 2A 0E F2 | 	cmp	local03, #30 wz
1a298     30 00 90 5D |  if_ne	jmp	#LR__2061
1a29c     00 12 06 F6 | 	mov	arg01, #0
1a2a0     20 3B B1 FD | 	call	#__system___getiolock_0620
1a2a4     FD 12 02 F6 | 	mov	arg01, result1
1a2a8     68 DE B0 FD | 	call	#__system___lockmem
1a2ac     00 12 06 F6 | 	mov	arg01, #0
1a2b0     13 15 02 F6 | 	mov	arg02, local01
1a2b4     00 16 06 F6 | 	mov	arg03, #0
1a2b8     23 18 06 F6 | 	mov	arg04, #35
1a2bc     E8 12 B1 FD | 	call	#__system___basic_print_float
1a2c0     00 12 06 F6 | 	mov	arg01, #0
1a2c4     FC 3A B1 FD | 	call	#__system___getiolock_0620
1a2c8     FD 00 68 FC | 	wrlong	#0, result1
1a2cc                 | LR__2061
1a2cc                 | '   if t1.result_type=result_string then print t1.result.sresult;
1a2cc     1F 2A 0E F2 | 	cmp	local03, #31 wz
1a2d0     2C 00 90 5D |  if_ne	jmp	#LR__2062
1a2d4     00 12 06 F6 | 	mov	arg01, #0
1a2d8     E8 3A B1 FD | 	call	#__system___getiolock_0620
1a2dc     FD 12 02 F6 | 	mov	arg01, result1
1a2e0     30 DE B0 FD | 	call	#__system___lockmem
1a2e4     00 12 06 F6 | 	mov	arg01, #0
1a2e8     13 15 02 F6 | 	mov	arg02, local01
1a2ec     00 16 06 F6 | 	mov	arg03, #0
1a2f0     18 EB B0 FD | 	call	#__system___basic_print_string
1a2f4     00 12 06 F6 | 	mov	arg01, #0
1a2f8     C8 3A B1 FD | 	call	#__system___getiolock_0620
1a2fc     FD 00 68 FC | 	wrlong	#0, result1
1a300                 | LR__2062
1a300                 | LR__2063
1a300                 | ' if r=0 then 
1a300     00 2C 0E F2 | 	cmp	local04, #0 wz
1a304     1C 01 90 5D |  if_ne	jmp	#LR__2068
1a308                 | '   if t1.result_type=result_int then print t1.result.iresult
1a308     1C 2A 0E F2 | 	cmp	local03, #28 wz
1a30c     40 00 90 5D |  if_ne	jmp	#LR__2064
1a310     00 12 06 F6 | 	mov	arg01, #0
1a314     AC 3A B1 FD | 	call	#__system___getiolock_0620
1a318     FD 12 02 F6 | 	mov	arg01, result1
1a31c     F4 DD B0 FD | 	call	#__system___lockmem
1a320     00 12 06 F6 | 	mov	arg01, #0
1a324     13 15 02 F6 | 	mov	arg02, local01
1a328     00 16 06 F6 | 	mov	arg03, #0
1a32c     0A 18 06 F6 | 	mov	arg04, #10
1a330     1C EB B0 FD | 	call	#__system___basic_print_integer
1a334     00 12 06 F6 | 	mov	arg01, #0
1a338     0A 14 06 F6 | 	mov	arg02, #10
1a33c     00 16 06 F6 | 	mov	arg03, #0
1a340     70 EA B0 FD | 	call	#__system___basic_print_char
1a344     00 12 06 F6 | 	mov	arg01, #0
1a348     78 3A B1 FD | 	call	#__system___getiolock_0620
1a34c     FD 00 68 FC | 	wrlong	#0, result1
1a350                 | LR__2064
1a350                 | '   if t1.result_type=result_uint then print t1.result.uresult
1a350     1D 2A 0E F2 | 	cmp	local03, #29 wz
1a354     40 00 90 5D |  if_ne	jmp	#LR__2065
1a358     00 12 06 F6 | 	mov	arg01, #0
1a35c     64 3A B1 FD | 	call	#__system___getiolock_0620
1a360     FD 12 02 F6 | 	mov	arg01, result1
1a364     AC DD B0 FD | 	call	#__system___lockmem
1a368     00 12 06 F6 | 	mov	arg01, #0
1a36c     13 15 02 F6 | 	mov	arg02, local01
1a370     00 16 06 F6 | 	mov	arg03, #0
1a374     0A 18 06 F6 | 	mov	arg04, #10
1a378     14 EB B0 FD | 	call	#__system___basic_print_unsigned
1a37c     00 12 06 F6 | 	mov	arg01, #0
1a380     0A 14 06 F6 | 	mov	arg02, #10
1a384     00 16 06 F6 | 	mov	arg03, #0
1a388     28 EA B0 FD | 	call	#__system___basic_print_char
1a38c     00 12 06 F6 | 	mov	arg01, #0
1a390     30 3A B1 FD | 	call	#__system___getiolock_0620
1a394     FD 00 68 FC | 	wrlong	#0, result1
1a398                 | LR__2065
1a398                 | '   if t1.result_type=result_float then print t1.result.fresult
1a398     1E 2A 0E F2 | 	cmp	local03, #30 wz
1a39c     40 00 90 5D |  if_ne	jmp	#LR__2066
1a3a0     00 12 06 F6 | 	mov	arg01, #0
1a3a4     1C 3A B1 FD | 	call	#__system___getiolock_0620
1a3a8     FD 12 02 F6 | 	mov	arg01, result1
1a3ac     64 DD B0 FD | 	call	#__system___lockmem
1a3b0     00 12 06 F6 | 	mov	arg01, #0
1a3b4     13 15 02 F6 | 	mov	arg02, local01
1a3b8     00 16 06 F6 | 	mov	arg03, #0
1a3bc     23 18 06 F6 | 	mov	arg04, #35
1a3c0     E4 11 B1 FD | 	call	#__system___basic_print_float
1a3c4     00 12 06 F6 | 	mov	arg01, #0
1a3c8     0A 14 06 F6 | 	mov	arg02, #10
1a3cc     00 16 06 F6 | 	mov	arg03, #0
1a3d0     E0 E9 B0 FD | 	call	#__system___basic_print_char
1a3d4     00 12 06 F6 | 	mov	arg01, #0
1a3d8     E8 39 B1 FD | 	call	#__system___getiolock_0620
1a3dc     FD 00 68 FC | 	wrlong	#0, result1
1a3e0                 | LR__2066
1a3e0                 | '   if t1.result_type=result_string then print t1.result.sresult
1a3e0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1a3e4     3C 00 90 5D |  if_ne	jmp	#LR__2067
1a3e8     00 12 06 F6 | 	mov	arg01, #0
1a3ec     D4 39 B1 FD | 	call	#__system___getiolock_0620
1a3f0     FD 12 02 F6 | 	mov	arg01, result1
1a3f4     1C DD B0 FD | 	call	#__system___lockmem
1a3f8     00 12 06 F6 | 	mov	arg01, #0
1a3fc     13 15 02 F6 | 	mov	arg02, local01
1a400     00 16 06 F6 | 	mov	arg03, #0
1a404     04 EA B0 FD | 	call	#__system___basic_print_string
1a408     00 12 06 F6 | 	mov	arg01, #0
1a40c     0A 14 06 F6 | 	mov	arg02, #10
1a410     00 16 06 F6 | 	mov	arg03, #0
1a414     9C E9 B0 FD | 	call	#__system___basic_print_char
1a418     00 12 06 F6 | 	mov	arg01, #0
1a41c     A4 39 B1 FD | 	call	#__system___getiolock_0620
1a420     FD 00 68 FC | 	wrlong	#0, result1
1a424                 | LR__2067
1a424                 | LR__2068
1a424                 | ' if r=print_mod_empty then print
1a424     20 2C 0E F2 | 	cmp	local04, #32 wz
1a428     2C 00 90 5D |  if_ne	jmp	#LR__2069
1a42c     00 12 06 F6 | 	mov	arg01, #0
1a430     90 39 B1 FD | 	call	#__system___getiolock_0620
1a434     FD 12 02 F6 | 	mov	arg01, result1
1a438     D8 DC B0 FD | 	call	#__system___lockmem
1a43c     00 12 06 F6 | 	mov	arg01, #0
1a440     0A 14 06 F6 | 	mov	arg02, #10
1a444     00 16 06 F6 | 	mov	arg03, #0
1a448     68 E9 B0 FD | 	call	#__system___basic_print_char
1a44c     00 12 06 F6 | 	mov	arg01, #0
1a450     70 39 B1 FD | 	call	#__system___getiolock_0620
1a454     FD 00 68 FC | 	wrlong	#0, result1
1a458                 | LR__2069
1a458                 | LR__2070
1a458     A7 F0 03 F6 | 	mov	ptra, fp
1a45c     B2 00 A0 FD | 	call	#popregs_
1a460                 | _do_print_ret
1a460     2D 00 64 FD | 	ret
1a464                 | 
1a464                 | ' 
1a464                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
1a464                 | ' 
1a464                 | ' sub do_push
1a464                 | _do_push
1a464                 | ' if stackpointer<maxstack then 
1a464     43 00 00 FF 
1a468     78 E4 05 F1 | 	add	objptr, ##34424
1a46c     F2 00 02 FB | 	rdlong	_var01, objptr
1a470     43 00 00 FF 
1a474     78 E4 85 F1 | 	sub	objptr, ##34424
1a478     01 00 00 FF 
1a47c     00 00 56 F2 | 	cmps	_var01, ##512 wc
1a480     F8 00 90 3D |  if_ae	jmp	#LR__2080
1a484     4A 00 00 FF 
1a488     A0 E4 05 F1 | 	add	objptr, ##38048
1a48c     F2 02 02 FB | 	rdlong	_var02, objptr
1a490     01 05 02 F6 | 	mov	_var03, _var02
1a494     01 04 66 F0 | 	shl	_var03, #1
1a498     01 05 02 F1 | 	add	_var03, _var02
1a49c     02 04 66 F0 | 	shl	_var03, #2
1a4a0     03 00 00 FF 
1a4a4     04 E4 85 F1 | 	sub	objptr, ##1540
1a4a8     F2 04 02 F1 | 	add	_var03, objptr
1a4ac     02 01 02 FB | 	rdlong	_var01, _var03
1a4b0     04 04 06 F1 | 	add	_var03, #4
1a4b4     02 07 02 FB | 	rdlong	_var04, _var03
1a4b8     01 05 02 F6 | 	mov	_var03, _var02
1a4bc     01 04 66 F0 | 	shl	_var03, #1
1a4c0     01 05 02 F1 | 	add	_var03, _var02
1a4c4     02 04 66 F0 | 	shl	_var03, #2
1a4c8     F2 04 02 F1 | 	add	_var03, objptr
1a4cc     08 04 06 F1 | 	add	_var03, #8
1a4d0     02 03 02 FB | 	rdlong	_var02, _var03
1a4d4     04 00 00 FF 
1a4d8     24 E4 85 F1 | 	sub	objptr, ##2084
1a4dc     F2 04 02 FB | 	rdlong	_var03, objptr
1a4e0     02 09 02 F6 | 	mov	_var05, _var03
1a4e4     01 08 66 F0 | 	shl	_var05, #1
1a4e8     02 09 02 F1 | 	add	_var05, _var03
1a4ec     02 08 66 F0 | 	shl	_var05, #2
1a4f0     0C 00 00 FF 
1a4f4     0C E4 85 F1 | 	sub	objptr, ##6156
1a4f8     F2 08 02 F1 | 	add	_var05, objptr
1a4fc     04 01 62 FC | 	wrlong	_var01, _var05
1a500     0C 00 00 FF 
1a504     0C E4 05 F1 | 	add	objptr, ##6156
1a508     F2 08 02 FB | 	rdlong	_var05, objptr
1a50c     04 05 02 F6 | 	mov	_var03, _var05
1a510     01 04 66 F0 | 	shl	_var03, #1
1a514     04 05 02 F1 | 	add	_var03, _var05
1a518     02 04 66 F0 | 	shl	_var03, #2
1a51c     0C 00 00 FF 
1a520     0C E4 85 F1 | 	sub	objptr, ##6156
1a524     F2 04 02 F1 | 	add	_var03, objptr
1a528     04 04 06 F1 | 	add	_var03, #4
1a52c     02 07 62 FC | 	wrlong	_var04, _var03
1a530     0C 00 00 FF 
1a534     0C E4 05 F1 | 	add	objptr, ##6156
1a538     F2 08 02 FB | 	rdlong	_var05, objptr
1a53c     04 07 02 F6 | 	mov	_var04, _var05
1a540     01 06 66 F0 | 	shl	_var04, #1
1a544     04 07 02 F1 | 	add	_var04, _var05
1a548     02 06 66 F0 | 	shl	_var04, #2
1a54c     0C 00 00 FF 
1a550     0C E4 85 F1 | 	sub	objptr, ##6156
1a554     F2 06 02 F1 | 	add	_var04, objptr
1a558     08 06 06 F1 | 	add	_var04, #8
1a55c     03 03 62 FC | 	wrlong	_var02, _var04
1a560     0C 00 00 FF 
1a564     0C E4 05 F1 | 	add	objptr, ##6156
1a568     F2 00 02 FB | 	rdlong	_var01, objptr
1a56c     01 00 06 F1 | 	add	_var01, #1
1a570     F2 00 62 FC | 	wrlong	_var01, objptr
1a574     43 00 00 FF 
1a578     78 E4 85 F1 | 	sub	objptr, ##34424
1a57c                 | LR__2080
1a57c                 | _do_push_ret
1a57c     2D 00 64 FD | 	ret
1a580                 | 
1a580                 | ' 
1a580                 | ' '-------------------- put
1a580                 | ' 
1a580                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
1a580                 | _do_put
1a580     03 4A 05 F6 | 	mov	COUNT_, #3
1a584     A8 00 A0 FD | 	call	#pushregs_
1a588     28 F0 07 F1 | 	add	ptra, #40
1a58c     4A 00 00 FF 
1a590     A0 E4 05 F1 | 	add	objptr, ##38048
1a594     F2 1A 02 FB | 	rdlong	arg05, objptr
1a598     0D 19 02 F6 | 	mov	arg04, arg05
1a59c     01 18 66 F0 | 	shl	arg04, #1
1a5a0     0D 19 02 F1 | 	add	arg04, arg05
1a5a4     02 18 66 F0 | 	shl	arg04, #2
1a5a8     03 00 00 FF 
1a5ac     04 E4 85 F1 | 	sub	objptr, ##1540
1a5b0     F2 18 02 F1 | 	add	arg04, objptr
1a5b4     0C 1B 02 FB | 	rdlong	arg05, arg04
1a5b8     A7 1A 62 FC | 	wrlong	arg05, fp
1a5bc                 | ' 
1a5bc                 | ' numpar=compiledline(lineptr_e).result.uresult
1a5bc                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
1a5bc     04 1A 0E F2 | 	cmp	arg05, #4 wz
1a5c0     47 00 00 FF 
1a5c4     9C E4 85 F1 | 	sub	objptr, ##36508
1a5c8     48 00 90 5D |  if_ne	jmp	#LR__2090
1a5cc     50 32 BF FD | 	call	#_pop
1a5d0     FF 1A 02 F6 | 	mov	arg05, result3
1a5d4     1C 4E 05 F1 | 	add	fp, #28
1a5d8     A7 FA 61 FC | 	wrlong	result1, fp
1a5dc     04 4E 05 F1 | 	add	fp, #4
1a5e0     A7 FC 61 FC | 	wrlong	result2, fp
1a5e4     04 4E 05 F1 | 	add	fp, #4
1a5e8     A7 1A 62 FC | 	wrlong	arg05, fp
1a5ec     08 4E 85 F1 | 	sub	fp, #8
1a5f0     A7 12 02 F6 | 	mov	arg01, fp
1a5f4     1C 4E 85 F1 | 	sub	fp, #28
1a5f8     08 34 BF FD | 	call	#_converttoint
1a5fc     52 00 00 FF 
1a600     64 E5 05 F1 | 	add	objptr, ##42340
1a604     F2 FA 61 FC | 	wrlong	result1, objptr
1a608     52 00 00 FF 
1a60c     64 E5 85 F1 | 	sub	objptr, ##42340
1a610     18 00 90 FD | 	jmp	#LR__2091
1a614                 | LR__2090
1a614     52 00 00 FF 
1a618     64 E5 05 F1 | 	add	objptr, ##42340
1a61c     FF FF FF FF 
1a620     F2 FE 6B FC | 	wrlong	##-1, objptr
1a624     52 00 00 FF 
1a628     64 E5 85 F1 | 	sub	objptr, ##42340
1a62c                 | LR__2091
1a62c                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
1a62c     A7 1A 02 FB | 	rdlong	arg05, fp
1a630     03 1A 56 F2 | 	cmps	arg05, #3 wc
1a634     40 00 90 CD |  if_b	jmp	#LR__2092
1a638     E4 31 BF FD | 	call	#_pop
1a63c     FF 1A 02 F6 | 	mov	arg05, result3
1a640     1C 4E 05 F1 | 	add	fp, #28
1a644     A7 FA 61 FC | 	wrlong	result1, fp
1a648     04 4E 05 F1 | 	add	fp, #4
1a64c     A7 FC 61 FC | 	wrlong	result2, fp
1a650     04 4E 05 F1 | 	add	fp, #4
1a654     A7 1A 62 FC | 	wrlong	arg05, fp
1a658     08 4E 85 F1 | 	sub	fp, #8
1a65c     A7 12 02 F6 | 	mov	arg01, fp
1a660     1C 4E 85 F1 | 	sub	fp, #28
1a664     9C 33 BF FD | 	call	#_converttoint
1a668     08 4E 05 F1 | 	add	fp, #8
1a66c     A7 FA 61 FC | 	wrlong	result1, fp
1a670     08 4E 85 F1 | 	sub	fp, #8
1a674     0C 00 90 FD | 	jmp	#LR__2093
1a678                 | LR__2092
1a678     08 4E 05 F1 | 	add	fp, #8
1a67c     A7 02 68 FC | 	wrlong	#1, fp
1a680     08 4E 85 F1 | 	sub	fp, #8
1a684                 | LR__2093
1a684                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
1a684     A7 18 02 FB | 	rdlong	arg04, fp
1a688     02 18 56 F2 | 	cmps	arg04, #2 wc
1a68c     3C 00 90 CD |  if_b	jmp	#LR__2094
1a690     8C 31 BF FD | 	call	#_pop
1a694     FF 18 02 F6 | 	mov	arg04, result3
1a698     1C 4E 05 F1 | 	add	fp, #28
1a69c     A7 FA 61 FC | 	wrlong	result1, fp
1a6a0     04 4E 05 F1 | 	add	fp, #4
1a6a4     A7 FC 61 FC | 	wrlong	result2, fp
1a6a8     04 4E 05 F1 | 	add	fp, #4
1a6ac     A7 18 62 FC | 	wrlong	arg04, fp
1a6b0     08 4E 85 F1 | 	sub	fp, #8
1a6b4     A7 12 02 F6 | 	mov	arg01, fp
1a6b8     1C 4E 85 F1 | 	sub	fp, #28
1a6bc     44 33 BF FD | 	call	#_converttoint
1a6c0     0C 4E 05 F1 | 	add	fp, #12
1a6c4     A7 FA 61 FC | 	wrlong	result1, fp
1a6c8     0C 4E 85 F1 | 	sub	fp, #12
1a6cc                 | LR__2094
1a6cc     50 31 BF FD | 	call	#_pop
1a6d0     FF 18 02 F6 | 	mov	arg04, result3
1a6d4     1C 4E 05 F1 | 	add	fp, #28
1a6d8     A7 FA 61 FC | 	wrlong	result1, fp
1a6dc     04 4E 05 F1 | 	add	fp, #4
1a6e0     A7 FC 61 FC | 	wrlong	result2, fp
1a6e4     04 4E 05 F1 | 	add	fp, #4
1a6e8     A7 18 62 FC | 	wrlong	arg04, fp
1a6ec     08 4E 85 F1 | 	sub	fp, #8
1a6f0     A7 12 02 F6 | 	mov	arg01, fp
1a6f4     1C 4E 85 F1 | 	sub	fp, #28
1a6f8     08 33 BF FD | 	call	#_converttoint
1a6fc     04 4E 05 F1 | 	add	fp, #4
1a700     A7 FA 61 FC | 	wrlong	result1, fp
1a704     10 4E 05 F1 | 	add	fp, #16
1a708     A7 26 02 FB | 	rdlong	local01, fp
1a70c     14 4E 85 F1 | 	sub	fp, #20
1a710     02 26 66 F0 | 	shl	local01, #2
1a714     50 00 00 FF 
1a718     E4 E4 05 F1 | 	add	objptr, ##41188
1a71c     F2 26 02 F1 | 	add	local01, objptr
1a720     13 01 68 FC | 	wrlong	#0, local01
1a724                 | ' t1=pop() : channel=converttoint(t1)
1a724                 | ' getres(j)=0
1a724                 | ' if pos>=0 then
1a724     02 00 00 FF 
1a728     80 E4 05 F1 | 	add	objptr, ##1152
1a72c     F2 28 02 FB | 	rdlong	local02, objptr
1a730     52 00 00 FF 
1a734     64 E5 85 F1 | 	sub	objptr, ##42340
1a738     00 28 56 F2 | 	cmps	local02, #0 wc
1a73c     C0 01 90 CD |  if_b	jmp	#LR__2100
1a740     10 4E 05 F1 | 	add	fp, #16
1a744     A7 00 68 FC | 	wrlong	#0, fp
1a748     10 4E 85 F1 | 	sub	fp, #16
1a74c                 | '    i=0: do
1a74c                 | LR__2095
1a74c     14 4E 05 F1 | 	add	fp, #20
1a750     A7 00 68 FC | 	wrlong	#0, fp
1a754     14 4E 85 F1 | 	sub	fp, #20
1a758                 | '    j=0: do    
1a758                 | LR__2096
1a758                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
1a758     0C 4E 05 F1 | 	add	fp, #12
1a75c     A7 28 02 FB | 	rdlong	local02, fp
1a760     0C 4E 85 F1 | 	sub	fp, #12
1a764     00 04 00 FF 
1a768     00 28 56 F2 | 	cmps	local02, ##524288 wc
1a76c     4C 00 90 3D |  if_ae	jmp	#LR__2097
1a770     14 4E 05 F1 | 	add	fp, #20
1a774     A7 28 02 FB | 	rdlong	local02, fp
1a778     14 27 02 F6 | 	mov	local01, local02
1a77c     4E 00 00 FF 
1a780     D4 E4 05 F1 | 	add	objptr, ##40148
1a784     F2 26 02 F1 | 	add	local01, objptr
1a788     08 4E 85 F1 | 	sub	fp, #8
1a78c     A7 12 02 FB | 	rdlong	arg01, fp
1a790     04 4E 05 F1 | 	add	fp, #4
1a794     A7 18 02 FB | 	rdlong	arg04, fp
1a798     0A 18 66 F0 | 	shl	arg04, #10
1a79c     0C 13 02 F1 | 	add	arg01, arg04
1a7a0     10 4E 85 F1 | 	sub	fp, #16
1a7a4     14 13 02 F1 | 	add	arg01, local02
1a7a8     09 FB C1 FA | 	rdbyte	result1, arg01
1a7ac     4E 00 00 FF 
1a7b0     D4 E4 85 F1 | 	sub	objptr, ##40148
1a7b4     13 FB 41 FC | 	wrbyte	result1, local01
1a7b8     48 00 90 FD | 	jmp	#LR__2098
1a7bc                 | LR__2097
1a7bc     14 4E 05 F1 | 	add	fp, #20
1a7c0     A7 28 02 FB | 	rdlong	local02, fp
1a7c4     14 27 02 F6 | 	mov	local01, local02
1a7c8     4E 00 00 FF 
1a7cc     D4 E4 05 F1 | 	add	objptr, ##40148
1a7d0     F2 26 02 F1 | 	add	local01, objptr
1a7d4     08 4E 85 F1 | 	sub	fp, #8
1a7d8     A7 12 02 FB | 	rdlong	arg01, fp
1a7dc     04 4E 05 F1 | 	add	fp, #4
1a7e0     A7 18 02 FB | 	rdlong	arg04, fp
1a7e4     0A 18 66 F0 | 	shl	arg04, #10
1a7e8     0C 13 02 F1 | 	add	arg01, arg04
1a7ec     10 4E 85 F1 | 	sub	fp, #16
1a7f0     14 13 02 F1 | 	add	arg01, local02
1a7f4     4E 00 00 FF 
1a7f8     D4 E4 85 F1 | 	sub	objptr, ##40148
1a7fc     34 A1 B0 FD | 	call	#_pspeek
1a800     13 FB 41 FC | 	wrbyte	result1, local01
1a804                 | LR__2098
1a804     14 4E 05 F1 | 	add	fp, #20
1a808     A7 28 02 FB | 	rdlong	local02, fp
1a80c     01 28 06 F1 | 	add	local02, #1
1a810     A7 28 62 FC | 	wrlong	local02, fp
1a814     14 4E 85 F1 | 	sub	fp, #20
1a818     02 00 00 FF 
1a81c     00 28 56 F2 | 	cmps	local02, ##1024 wc
1a820     2C 00 90 3D |  if_ae	jmp	#LR__2099
1a824     10 4E 05 F1 | 	add	fp, #16
1a828     A7 26 02 FB | 	rdlong	local01, fp
1a82c     0A 26 66 F0 | 	shl	local01, #10
1a830     04 4E 05 F1 | 	add	fp, #4
1a834     A7 28 02 FB | 	rdlong	local02, fp
1a838     14 27 02 F1 | 	add	local01, local02
1a83c     0C 4E 85 F1 | 	sub	fp, #12
1a840     A7 28 02 FB | 	rdlong	local02, fp
1a844     08 4E 85 F1 | 	sub	fp, #8
1a848     14 27 5A F2 | 	cmps	local01, local02 wcz
1a84c     08 FF 9F ED |  if_be	jmp	#LR__2096
1a850                 | LR__2099
1a850                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
1a850     04 4E 05 F1 | 	add	fp, #4
1a854     A7 12 02 FB | 	rdlong	arg01, fp
1a858     52 00 00 FF 
1a85c     64 E5 05 F1 | 	add	objptr, ##42340
1a860     F2 14 02 FB | 	rdlong	arg02, objptr
1a864     01 14 06 F1 | 	add	arg02, #1
1a868     04 00 00 FF 
1a86c     90 E4 85 F1 | 	sub	objptr, ##2192
1a870     F2 16 02 F6 | 	mov	arg03, objptr
1a874     4E 00 00 FF 
1a878     D4 E4 85 F1 | 	sub	objptr, ##40148
1a87c     04 4E 05 F1 | 	add	fp, #4
1a880     A7 18 02 FB | 	rdlong	arg04, fp
1a884     08 4E 85 F1 | 	sub	fp, #8
1a888     01 1A 06 F6 | 	mov	arg05, #1
1a88c     8C E6 B0 FD | 	call	#__system___basic_put
1a890     18 4E 05 F1 | 	add	fp, #24
1a894     A7 FA 61 FC | 	wrlong	result1, fp
1a898     14 4E 85 F1 | 	sub	fp, #20
1a89c     A7 26 02 FB | 	rdlong	local01, fp
1a8a0     02 26 66 F0 | 	shl	local01, #2
1a8a4     50 00 00 FF 
1a8a8     E4 E4 05 F1 | 	add	objptr, ##41188
1a8ac     F2 26 02 F1 | 	add	local01, objptr
1a8b0     13 FB 61 FC | 	wrlong	result1, local01
1a8b4                 | '    if 1024*i+j>amount then exit loop
1a8b4     0C 4E 05 F1 | 	add	fp, #12
1a8b8     A7 28 02 FB | 	rdlong	local02, fp
1a8bc     0A 28 66 F0 | 	shl	local02, #10
1a8c0     04 4E 05 F1 | 	add	fp, #4
1a8c4     A7 26 02 FB | 	rdlong	local01, fp
1a8c8     13 29 02 F1 | 	add	local02, local01
1a8cc     0C 4E 85 F1 | 	sub	fp, #12
1a8d0     A7 26 02 FB | 	rdlong	local01, fp
1a8d4     08 4E 85 F1 | 	sub	fp, #8
1a8d8     13 29 5A F2 | 	cmps	local02, local01 wcz
1a8dc     50 00 00 FF 
1a8e0     E4 E4 85 F1 | 	sub	objptr, ##41188
1a8e4     CC 01 90 1D |  if_a	jmp	#LR__2107
1a8e8     10 4E 05 F1 | 	add	fp, #16
1a8ec     A7 28 02 FB | 	rdlong	local02, fp
1a8f0     01 28 06 F1 | 	add	local02, #1
1a8f4     A7 28 62 FC | 	wrlong	local02, fp
1a8f8     10 4E 85 F1 | 	sub	fp, #16
1a8fc     4C FE 9F FD | 	jmp	#LR__2095
1a900                 | LR__2100
1a900     10 4E 05 F1 | 	add	fp, #16
1a904     A7 00 68 FC | 	wrlong	#0, fp
1a908     10 4E 85 F1 | 	sub	fp, #16
1a90c                 | '    i=0: do
1a90c                 | LR__2101
1a90c     14 4E 05 F1 | 	add	fp, #20
1a910     A7 00 68 FC | 	wrlong	#0, fp
1a914     14 4E 85 F1 | 	sub	fp, #20
1a918                 | '    j=0: do  
1a918                 | LR__2102
1a918                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
1a918     0C 4E 05 F1 | 	add	fp, #12
1a91c     A7 28 02 FB | 	rdlong	local02, fp
1a920     0C 4E 85 F1 | 	sub	fp, #12
1a924     00 04 00 FF 
1a928     00 28 56 F2 | 	cmps	local02, ##524288 wc
1a92c     4C 00 90 3D |  if_ae	jmp	#LR__2103
1a930     14 4E 05 F1 | 	add	fp, #20
1a934     A7 28 02 FB | 	rdlong	local02, fp
1a938     14 27 02 F6 | 	mov	local01, local02
1a93c     4E 00 00 FF 
1a940     D4 E4 05 F1 | 	add	objptr, ##40148
1a944     F2 26 02 F1 | 	add	local01, objptr
1a948     08 4E 85 F1 | 	sub	fp, #8
1a94c     A7 12 02 FB | 	rdlong	arg01, fp
1a950     04 4E 05 F1 | 	add	fp, #4
1a954     A7 18 02 FB | 	rdlong	arg04, fp
1a958     0A 18 66 F0 | 	shl	arg04, #10
1a95c     0C 13 02 F1 | 	add	arg01, arg04
1a960     10 4E 85 F1 | 	sub	fp, #16
1a964     14 13 02 F1 | 	add	arg01, local02
1a968     09 FB C1 FA | 	rdbyte	result1, arg01
1a96c     4E 00 00 FF 
1a970     D4 E4 85 F1 | 	sub	objptr, ##40148
1a974     13 FB 41 FC | 	wrbyte	result1, local01
1a978     48 00 90 FD | 	jmp	#LR__2104
1a97c                 | LR__2103
1a97c     14 4E 05 F1 | 	add	fp, #20
1a980     A7 28 02 FB | 	rdlong	local02, fp
1a984     14 27 02 F6 | 	mov	local01, local02
1a988     4E 00 00 FF 
1a98c     D4 E4 05 F1 | 	add	objptr, ##40148
1a990     F2 26 02 F1 | 	add	local01, objptr
1a994     08 4E 85 F1 | 	sub	fp, #8
1a998     A7 12 02 FB | 	rdlong	arg01, fp
1a99c     04 4E 05 F1 | 	add	fp, #4
1a9a0     A7 18 02 FB | 	rdlong	arg04, fp
1a9a4     0A 18 66 F0 | 	shl	arg04, #10
1a9a8     0C 13 02 F1 | 	add	arg01, arg04
1a9ac     10 4E 85 F1 | 	sub	fp, #16
1a9b0     14 13 02 F1 | 	add	arg01, local02
1a9b4     4E 00 00 FF 
1a9b8     D4 E4 85 F1 | 	sub	objptr, ##40148
1a9bc     74 9F B0 FD | 	call	#_pspeek
1a9c0     13 FB 41 FC | 	wrbyte	result1, local01
1a9c4                 | LR__2104
1a9c4     14 4E 05 F1 | 	add	fp, #20
1a9c8     A7 28 02 FB | 	rdlong	local02, fp
1a9cc     01 28 06 F1 | 	add	local02, #1
1a9d0     A7 28 62 FC | 	wrlong	local02, fp
1a9d4     14 4E 85 F1 | 	sub	fp, #20
1a9d8     02 00 00 FF 
1a9dc     00 28 56 F2 | 	cmps	local02, ##1024 wc
1a9e0     2C 00 90 3D |  if_ae	jmp	#LR__2105
1a9e4     10 4E 05 F1 | 	add	fp, #16
1a9e8     A7 26 02 FB | 	rdlong	local01, fp
1a9ec     0A 26 66 F0 | 	shl	local01, #10
1a9f0     04 4E 05 F1 | 	add	fp, #4
1a9f4     A7 28 02 FB | 	rdlong	local02, fp
1a9f8     14 27 02 F1 | 	add	local01, local02
1a9fc     0C 4E 85 F1 | 	sub	fp, #12
1aa00     A7 28 02 FB | 	rdlong	local02, fp
1aa04     08 4E 85 F1 | 	sub	fp, #8
1aa08     14 27 5A F2 | 	cmps	local01, local02 wcz
1aa0c     08 FF 9F ED |  if_be	jmp	#LR__2102
1aa10                 | LR__2105
1aa10                 | '    put #channel,,block(0),amount, r : getres(channel)=r
1aa10     04 4E 05 F1 | 	add	fp, #4
1aa14     A7 12 02 FB | 	rdlong	arg01, fp
1aa18     4E 00 00 FF 
1aa1c     D4 E4 05 F1 | 	add	objptr, ##40148
1aa20     F2 16 02 F6 | 	mov	arg03, objptr
1aa24     4E 00 00 FF 
1aa28     D4 E4 85 F1 | 	sub	objptr, ##40148
1aa2c     04 4E 05 F1 | 	add	fp, #4
1aa30     A7 18 02 FB | 	rdlong	arg04, fp
1aa34     08 4E 85 F1 | 	sub	fp, #8
1aa38     00 14 06 F6 | 	mov	arg02, #0
1aa3c     01 1A 06 F6 | 	mov	arg05, #1
1aa40     D8 E4 B0 FD | 	call	#__system___basic_put
1aa44     18 4E 05 F1 | 	add	fp, #24
1aa48     A7 FA 61 FC | 	wrlong	result1, fp
1aa4c     14 4E 85 F1 | 	sub	fp, #20
1aa50     A7 26 02 FB | 	rdlong	local01, fp
1aa54     02 26 66 F0 | 	shl	local01, #2
1aa58     50 00 00 FF 
1aa5c     E4 E4 05 F1 | 	add	objptr, ##41188
1aa60     F2 26 02 F1 | 	add	local01, objptr
1aa64     13 FB 61 FC | 	wrlong	result1, local01
1aa68                 | '    if 1024*i+j>amount then exit loop
1aa68     0C 4E 05 F1 | 	add	fp, #12
1aa6c     A7 28 02 FB | 	rdlong	local02, fp
1aa70     0A 28 66 F0 | 	shl	local02, #10
1aa74     04 4E 05 F1 | 	add	fp, #4
1aa78     A7 26 02 FB | 	rdlong	local01, fp
1aa7c     13 29 02 F1 | 	add	local02, local01
1aa80     0C 4E 85 F1 | 	sub	fp, #12
1aa84     A7 2A 02 FB | 	rdlong	local03, fp
1aa88     08 4E 85 F1 | 	sub	fp, #8
1aa8c     15 29 5A F2 | 	cmps	local02, local03 wcz
1aa90     50 00 00 FF 
1aa94     E4 E4 85 F1 | 	sub	objptr, ##41188
1aa98     18 00 90 1D |  if_a	jmp	#LR__2106
1aa9c     10 4E 05 F1 | 	add	fp, #16
1aaa0     A7 28 02 FB | 	rdlong	local02, fp
1aaa4     01 28 06 F1 | 	add	local02, #1
1aaa8     A7 28 62 FC | 	wrlong	local02, fp
1aaac     10 4E 85 F1 | 	sub	fp, #16
1aab0     58 FE 9F FD | 	jmp	#LR__2101
1aab4                 | LR__2106
1aab4                 | LR__2107
1aab4     A7 F0 03 F6 | 	mov	ptra, fp
1aab8     B2 00 A0 FD | 	call	#popregs_
1aabc                 | _do_put_ret
1aabc     2D 00 64 FD | 	ret
1aac0                 | 
1aac0                 | ' 
1aac0                 | ' '-------------------- rad
1aac0                 | ' 
1aac0                 | ' sub do_rad
1aac0                 | _do_rad
1aac0     52 00 00 FF 
1aac4     00 E5 05 F1 | 	add	objptr, ##42240
1aac8     00 C0 9F FF 
1aacc     F2 00 68 FC | 	wrlong	##1065353216, objptr
1aad0     04 E4 05 F1 | 	add	objptr, #4
1aad4     00 C0 9F FF 
1aad8     F2 00 68 FC | 	wrlong	##1065353216, objptr
1aadc     52 00 00 FF 
1aae0     04 E5 85 F1 | 	sub	objptr, ##42244
1aae4                 | _do_rad_ret
1aae4     2D 00 64 FD | 	ret
1aae8                 | 
1aae8                 | ' 
1aae8                 | ' '-------------------- rdpin
1aae8                 | ' 
1aae8                 | ' sub do_rdpin
1aae8                 | _do_rdpin
1aae8     00 4A 05 F6 | 	mov	COUNT_, #0
1aaec     A8 00 A0 FD | 	call	#pushregs_
1aaf0     0C F0 07 F1 | 	add	ptra, #12
1aaf4     28 2D BF FD | 	call	#_pop
1aaf8     A7 FA 61 FC | 	wrlong	result1, fp
1aafc     04 4E 05 F1 | 	add	fp, #4
1ab00     A7 FC 61 FC | 	wrlong	result2, fp
1ab04     04 4E 05 F1 | 	add	fp, #4
1ab08     A7 FE 61 FC | 	wrlong	result3, fp
1ab0c     08 4E 85 F1 | 	sub	fp, #8
1ab10     A7 12 02 F6 | 	mov	arg01, fp
1ab14     EC 2E BF FD | 	call	#_converttoint
1ab18     FD FA 89 FA | 	rdpin	result1, result1
1ab1c     52 00 00 FF 
1ab20     68 E5 05 F1 | 	add	objptr, ##42344
1ab24     F2 FA 61 FC | 	wrlong	result1, objptr
1ab28     52 00 00 FF 
1ab2c     68 E5 85 F1 | 	sub	objptr, ##42344
1ab30     08 4E 05 F1 | 	add	fp, #8
1ab34     A7 3A 68 FC | 	wrlong	#29, fp
1ab38     08 4E 85 F1 | 	sub	fp, #8
1ab3c     A7 08 68 FC | 	wrlong	#4, fp
1ab40     A7 12 02 F6 | 	mov	arg01, fp
1ab44     70 2D BF FD | 	call	#_push
1ab48     A7 F0 03 F6 | 	mov	ptra, fp
1ab4c     B2 00 A0 FD | 	call	#popregs_
1ab50                 | _do_rdpin_ret
1ab50     2D 00 64 FD | 	ret
1ab54                 | 
1ab54                 | ' 
1ab54                 | ' ' ----------------  read
1ab54                 | ' 
1ab54                 | ' function read_next_line() as string
1ab54                 | _read_next_line
1ab54     07 4A 05 F6 | 	mov	COUNT_, #7
1ab58     A8 00 A0 FD | 	call	#pushregs_
1ab5c                 | ' if dataptr=$7FFFFFFF then return("")
1ab5c     50 00 00 FF 
1ab60     4C E5 05 F1 | 	add	objptr, ##41292
1ab64     F2 26 02 FB | 	rdlong	local01, objptr
1ab68     50 00 00 FF 
1ab6c     4C E5 85 F1 | 	sub	objptr, ##41292
1ab70     FF FF 3F FF 
1ab74     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
1ab78     C4 01 00 AF 
1ab7c     35 FA 05 A6 |  if_e	mov	result1, ##@LR__6110
1ab80     BC 01 90 AD |  if_e	jmp	#LR__2117
1ab84                 | ' do
1ab84                 | LR__2110
1ab84     50 00 00 FF 
1ab88     28 E5 05 F1 | 	add	objptr, ##41256
1ab8c     F2 12 02 F6 | 	mov	arg01, objptr
1ab90     24 E4 05 F1 | 	add	objptr, #36
1ab94     F2 14 02 FB | 	rdlong	arg02, objptr
1ab98     24 16 06 F6 | 	mov	arg03, #36
1ab9c     45 00 00 FF 
1aba0     80 E4 85 F1 | 	sub	objptr, ##35456
1aba4     C8 C8 B0 FD | 	call	#_psram_spin2_read1
1aba8                 | '  ' print dataptr
1aba8                 | '   psram.read1(varptr(dataheader),dataptr,36) 
1aba8                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
1aba8     45 00 00 FF 
1abac     5C E4 05 F1 | 	add	objptr, ##35420
1abb0     F2 26 02 FB | 	rdlong	local01, objptr
1abb4     50 00 00 FF 
1abb8     28 E5 85 F1 | 	sub	objptr, ##41256
1abbc     FF FF 7F FF 
1abc0     FF 27 0E F2 | 	cmp	local01, ##-1 wz
1abc4     50 00 00 5F 
1abc8     3C E5 05 51 |  if_ne	add	objptr, ##41276
1abcc     F2 26 02 5B |  if_ne	rdlong	local01, objptr
1abd0     10 E4 05 51 |  if_ne	add	objptr, #16
1abd4     F2 26 62 5C |  if_ne	wrlong	local01, objptr
1abd8     50 00 00 5F 
1abdc     4C E5 85 51 |  if_ne	sub	objptr, ##41292
1abe0     50 00 00 FF 
1abe4     3C E5 05 F1 | 	add	objptr, ##41276
1abe8     F2 26 02 FB | 	rdlong	local01, objptr
1abec     50 00 00 FF 
1abf0     3C E5 85 F1 | 	sub	objptr, ##41276
1abf4     FF FF 3F FF 
1abf8     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
1abfc     50 00 00 5F 
1ac00     28 E5 05 51 |  if_ne	add	objptr, ##41256
1ac04     F2 28 02 5B |  if_ne	rdlong	local02, objptr
1ac08     50 00 00 5F 
1ac0c     28 E5 85 51 |  if_ne	sub	objptr, ##41256
1ac10     FF FF 7F 5F 
1ac14     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
1ac18     50 00 00 5F 
1ac1c     48 E5 05 51 |  if_ne	add	objptr, ##41288
1ac20     F2 2A 02 5B |  if_ne	rdlong	local03, objptr
1ac24     50 00 00 5F 
1ac28     48 E5 85 51 |  if_ne	sub	objptr, ##41288
1ac2c     B7 2A 0E 52 |  if_ne	cmp	local03, #183 wz
1ac30     50 FF 9F 5D |  if_ne	jmp	#LR__2110
1ac34                 | ' if dataheader(8)=token_data then 
1ac34     50 00 00 FF 
1ac38     48 E5 05 F1 | 	add	objptr, ##41288
1ac3c     F2 26 02 FB | 	rdlong	local01, objptr
1ac40     50 00 00 FF 
1ac44     48 E5 85 F1 | 	sub	objptr, ##41288
1ac48     B7 26 0E F2 | 	cmp	local01, #183 wz
1ac4c     E0 00 90 5D |  if_ne	jmp	#LR__2115
1ac50     50 00 00 FF 
1ac54     30 E5 05 F1 | 	add	objptr, ##41264
1ac58     F2 26 02 FB | 	rdlong	local01, objptr
1ac5c     02 00 00 FF 
1ac60     18 E4 05 F1 | 	add	objptr, ##1048
1ac64     F2 26 62 FC | 	wrlong	local01, objptr
1ac68     02 00 00 FF 
1ac6c     14 E4 85 F1 | 	sub	objptr, ##1044
1ac70     F2 2C 02 FB | 	rdlong	local04, objptr
1ac74     02 00 00 FF 
1ac78     0C E4 05 F1 | 	add	objptr, ##1036
1ac7c     F2 2C 62 FC | 	wrlong	local04, objptr
1ac80                 | '  'print "data found at line "; dataheader(0)
1ac80                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
1ac80     00 2E 06 F6 | 	mov	local05, #0
1ac84     52 00 00 FF 
1ac88     40 E5 85 F1 | 	sub	objptr, ##42304
1ac8c                 | LR__2111
1ac8c     16 2F 52 F2 | 	cmps	local05, local04 wc
1ac90     3C 00 90 3D |  if_ae	jmp	#LR__2112
1ac94     52 00 00 FF 
1ac98     48 E5 05 F1 | 	add	objptr, ##42312
1ac9c     F2 12 02 FB | 	rdlong	arg01, objptr
1aca0     52 00 00 FF 
1aca4     48 E5 85 F1 | 	sub	objptr, ##42312
1aca8     17 13 02 F1 | 	add	arg01, local05
1acac     84 9C B0 FD | 	call	#_pspeek
1acb0     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
1acb4     A0 F6 B0 FD | 	call	#__system__Chr_S
1acb8     FD 14 02 F6 | 	mov	arg02, result1
1acbc     18 13 02 F6 | 	mov	arg01, local06
1acc0     AC D4 B0 FD | 	call	#__system___string_concat
1acc4     FD 30 02 F6 | 	mov	local06, result1
1acc8     01 2E 06 F1 | 	add	local05, #1
1accc     BC FF 9F FD | 	jmp	#LR__2111
1acd0                 | LR__2112
1acd0     C4 01 00 FF 
1acd4     36 16 06 F6 | 	mov	arg03, ##@LR__6111
1acd8     01 12 06 F6 | 	mov	arg01, #1
1acdc     18 15 02 F6 | 	mov	arg02, local06
1ace0     F8 F9 B0 FD | 	call	#__system__Instr
1ace4     FD 2E 02 F6 | 	mov	local05, result1
1ace8     18 13 02 F6 | 	mov	arg01, local06
1acec     09 33 02 F6 | 	mov	local07, arg01
1acf0     97 06 48 FB | 	callpa	#(@LR__2114-@LR__2113)>>2,fcache_load_ptr_
1acf4                 | LR__2113
1acf4     19 FB C9 FA | 	rdbyte	result1, local07 wz
1acf8     01 32 06 51 |  if_ne	add	local07, #1
1acfc     F4 FF 9F 5D |  if_ne	jmp	#LR__2113
1ad00                 | LR__2114
1ad00     09 33 82 F1 | 	sub	local07, arg01
1ad04     19 15 02 F6 | 	mov	arg02, local07
1ad08     17 15 82 F1 | 	sub	arg02, local05
1ad0c     04 14 86 F1 | 	sub	arg02, #4
1ad10     18 13 02 F6 | 	mov	arg01, local06
1ad14     04 F5 B0 FD | 	call	#__system__Right_S
1ad18     FD 12 02 F6 | 	mov	arg01, result1
1ad1c     04 F9 B0 FD | 	call	#__system__RTrim_S
1ad20     FD 12 02 F6 | 	mov	arg01, result1
1ad24     3C F8 B0 FD | 	call	#__system__LTrim_S
1ad28     FD 30 02 F6 | 	mov	local06, result1
1ad2c     0C 00 90 FD | 	jmp	#LR__2116
1ad30                 | LR__2115
1ad30                 | '   return ("") 'todo proper err
1ad30     C4 01 00 FF 
1ad34     3B FA 05 F6 | 	mov	result1, ##@LR__6112
1ad38     04 00 90 FD | 	jmp	#LR__2117
1ad3c                 | LR__2116
1ad3c                 | ' return readline
1ad3c     18 FB 01 F6 | 	mov	result1, local06
1ad40                 | LR__2117
1ad40     A7 F0 03 F6 | 	mov	ptra, fp
1ad44     B2 00 A0 FD | 	call	#popregs_
1ad48                 | _read_next_line_ret
1ad48     2D 00 64 FD | 	ret
1ad4c                 | 
1ad4c                 | ' 
1ad4c                 | ' sub do_read
1ad4c                 | _do_read
1ad4c     11 4A 05 F6 | 	mov	COUNT_, #17
1ad50     A8 00 A0 FD | 	call	#pushregs_
1ad54     58 F1 07 F1 | 	add	ptra, #344
1ad58     4A 00 00 FF 
1ad5c     A0 E4 05 F1 | 	add	objptr, ##38048
1ad60     F2 FE 01 FB | 	rdlong	result3, objptr
1ad64     FF FC 01 F6 | 	mov	result2, result3
1ad68     01 FC 65 F0 | 	shl	result2, #1
1ad6c     FF FC 01 F1 | 	add	result2, result3
1ad70     02 FC 65 F0 | 	shl	result2, #2
1ad74     03 00 00 FF 
1ad78     04 E4 85 F1 | 	sub	objptr, ##1540
1ad7c     F2 FC 01 F1 | 	add	result2, objptr
1ad80     FE FC 01 FB | 	rdlong	result2, result2
1ad84     08 4E 05 F1 | 	add	fp, #8
1ad88     A7 FC 61 FC | 	wrlong	result2, fp
1ad8c                 | ' 
1ad8c                 | ' 
1ad8c                 | ' numpar=compiledline(lineptr_e).result.uresult
1ad8c                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
1ad8c     08 4E 85 F1 | 	sub	fp, #8
1ad90     01 FC 15 F2 | 	cmp	result2, #1 wc
1ad94     47 00 00 FF 
1ad98     9C E4 85 F1 | 	sub	objptr, ##36508
1ad9c     14 00 90 CD |  if_b	jmp	#LR__2120
1ada0     08 4E 05 F1 | 	add	fp, #8
1ada4     A7 FC 01 FB | 	rdlong	result2, fp
1ada8     08 4E 85 F1 | 	sub	fp, #8
1adac     41 FC 15 F2 | 	cmp	result2, #65 wc
1adb0     50 00 90 CD |  if_b	jmp	#LR__2121
1adb4                 | LR__2120
1adb4     00 12 06 F6 | 	mov	arg01, #0
1adb8     08 30 B1 FD | 	call	#__system___getiolock_0620
1adbc     FD 12 02 F6 | 	mov	arg01, result1
1adc0     50 D3 B0 FD | 	call	#__system___lockmem
1adc4     C4 01 00 FF 
1adc8     3C 14 06 F6 | 	mov	arg02, ##@LR__6113
1adcc     00 12 06 F6 | 	mov	arg01, #0
1add0     00 16 06 F6 | 	mov	arg03, #0
1add4     34 E0 B0 FD | 	call	#__system___basic_print_string
1add8     00 12 06 F6 | 	mov	arg01, #0
1addc     E4 2F B1 FD | 	call	#__system___getiolock_0620
1ade0     FD 00 68 FC | 	wrlong	#0, result1
1ade4     50 00 00 FF 
1ade8     10 E5 05 F1 | 	add	objptr, ##41232
1adec     F2 14 02 FB | 	rdlong	arg02, objptr
1adf0     50 00 00 FF 
1adf4     10 E5 85 F1 | 	sub	objptr, ##41232
1adf8     27 12 06 F6 | 	mov	arg01, #39
1adfc     BC 98 B0 FD | 	call	#_printerror
1ae00     D0 0C 90 FD | 	jmp	#LR__2171
1ae04                 | LR__2121
1ae04     08 4E 05 F1 | 	add	fp, #8
1ae08     A7 16 02 FB | 	rdlong	arg03, fp
1ae0c     01 16 86 F1 | 	sub	arg03, #1
1ae10     28 4F 05 F1 | 	add	fp, #296
1ae14     A7 16 62 FC | 	wrlong	arg03, fp
1ae18     30 4F 85 F1 | 	sub	fp, #304
1ae1c                 | ' i=numpar-1
1ae1c                 | ' if readline="" then readline=read_next_line() ': print readline
1ae1c     52 00 00 FF 
1ae20     34 E5 05 F1 | 	add	objptr, ##42292
1ae24     F2 12 02 FB | 	rdlong	arg01, objptr
1ae28     52 00 00 FF 
1ae2c     34 E5 85 F1 | 	sub	objptr, ##42292
1ae30     C4 01 00 FF 
1ae34     46 14 06 F6 | 	mov	arg02, ##@LR__6114
1ae38     00 D3 B0 FD | 	call	#__system___string_cmp
1ae3c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ae40     18 00 90 5D |  if_ne	jmp	#LR__2122
1ae44     0C FD BF FD | 	call	#_read_next_line
1ae48     52 00 00 FF 
1ae4c     34 E5 05 F1 | 	add	objptr, ##42292
1ae50     F2 FA 61 FC | 	wrlong	result1, objptr
1ae54     52 00 00 FF 
1ae58     34 E5 85 F1 | 	sub	objptr, ##42292
1ae5c                 | LR__2122
1ae5c                 | ' if readline="" then printerror(55,runheader(0)) :return
1ae5c     52 00 00 FF 
1ae60     34 E5 05 F1 | 	add	objptr, ##42292
1ae64     F2 12 02 FB | 	rdlong	arg01, objptr
1ae68     52 00 00 FF 
1ae6c     34 E5 85 F1 | 	sub	objptr, ##42292
1ae70     C4 01 00 FF 
1ae74     47 14 06 F6 | 	mov	arg02, ##@LR__6115
1ae78     C0 D2 B0 FD | 	call	#__system___string_cmp
1ae7c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ae80     20 00 90 5D |  if_ne	jmp	#LR__2123
1ae84     50 00 00 FF 
1ae88     10 E5 05 F1 | 	add	objptr, ##41232
1ae8c     F2 14 02 FB | 	rdlong	arg02, objptr
1ae90     50 00 00 FF 
1ae94     10 E5 85 F1 | 	sub	objptr, ##41232
1ae98     37 12 06 F6 | 	mov	arg01, #55
1ae9c     1C 98 B0 FD | 	call	#_printerror
1aea0     30 0C 90 FD | 	jmp	#LR__2171
1aea4                 | LR__2123
1aea4     34 4F 05 F1 | 	add	fp, #308
1aea8     A7 00 68 FC | 	wrlong	#0, fp
1aeac     2C 4F 85 F1 | 	sub	fp, #300
1aeb0     A7 26 02 FB | 	rdlong	local01, fp
1aeb4     01 26 86 F1 | 	sub	local01, #1
1aeb8     28 4F 05 F1 | 	add	fp, #296
1aebc     A7 26 62 FC | 	wrlong	local01, fp
1aec0     30 4F 85 F1 | 	sub	fp, #304
1aec4                 | ' j=0
1aec4                 | ' i=numpar-1
1aec4                 | ' do
1aec4                 | LR__2124
1aec4                 | '   do
1aec4                 | LR__2125
1aec4     52 00 00 FF 
1aec8     34 E5 05 F1 | 	add	objptr, ##42292
1aecc     F2 14 02 FB | 	rdlong	arg02, objptr
1aed0     52 00 00 FF 
1aed4     34 E5 85 F1 | 	sub	objptr, ##42292
1aed8     C4 01 00 FF 
1aedc     48 16 06 F6 | 	mov	arg03, ##@LR__6116
1aee0     01 12 06 F6 | 	mov	arg01, #1
1aee4     F4 F7 B0 FD | 	call	#__system__Instr
1aee8     0C 4E 05 F1 | 	add	fp, #12
1aeec     A7 FA 61 FC | 	wrlong	result1, fp
1aef0                 | '     comma=instr(1,readline,"'") : if comma>0 then readline=left$(readline,comma-1) ' allows comments in data
1aef0     0C 4E 85 F1 | 	sub	fp, #12
1aef4     01 FA 15 F2 | 	cmp	result1, #1 wc
1aef8     3C 00 90 CD |  if_b	jmp	#LR__2126
1aefc     52 00 00 FF 
1af00     34 E5 05 F1 | 	add	objptr, ##42292
1af04     F2 12 02 FB | 	rdlong	arg01, objptr
1af08     52 00 00 FF 
1af0c     34 E5 85 F1 | 	sub	objptr, ##42292
1af10     0C 4E 05 F1 | 	add	fp, #12
1af14     A7 14 02 FB | 	rdlong	arg02, fp
1af18     0C 4E 85 F1 | 	sub	fp, #12
1af1c     01 14 86 F1 | 	sub	arg02, #1
1af20     70 F2 B0 FD | 	call	#__system__Left_S
1af24     52 00 00 FF 
1af28     34 E5 05 F1 | 	add	objptr, ##42292
1af2c     F2 FA 61 FC | 	wrlong	result1, objptr
1af30     52 00 00 FF 
1af34     34 E5 85 F1 | 	sub	objptr, ##42292
1af38                 | LR__2126
1af38     52 00 00 FF 
1af3c     34 E5 05 F1 | 	add	objptr, ##42292
1af40     F2 14 02 FB | 	rdlong	arg02, objptr
1af44     52 00 00 FF 
1af48     34 E5 85 F1 | 	sub	objptr, ##42292
1af4c     C4 01 00 FF 
1af50     4A 16 06 F6 | 	mov	arg03, ##@LR__6117
1af54     01 12 06 F6 | 	mov	arg01, #1
1af58     80 F7 B0 FD | 	call	#__system__Instr
1af5c     0C 4E 05 F1 | 	add	fp, #12
1af60     A7 FA 61 FC | 	wrlong	result1, fp
1af64                 | '     comma=instr(1,readline,",")  
1af64                 | '       if comma>0  then 
1af64     0C 4E 85 F1 | 	sub	fp, #12
1af68     01 FA 15 F2 | 	cmp	result1, #1 wc
1af6c     98 00 90 CD |  if_b	jmp	#LR__2129
1af70     52 00 00 FF 
1af74     34 E5 05 F1 | 	add	objptr, ##42292
1af78     F2 12 02 FB | 	rdlong	arg01, objptr
1af7c     52 00 00 FF 
1af80     34 E5 85 F1 | 	sub	objptr, ##42292
1af84     0C 4E 05 F1 | 	add	fp, #12
1af88     A7 14 02 FB | 	rdlong	arg02, fp
1af8c     0C 4E 85 F1 | 	sub	fp, #12
1af90     01 14 86 F1 | 	sub	arg02, #1
1af94     FC F1 B0 FD | 	call	#__system__Left_S
1af98     04 4E 05 F1 | 	add	fp, #4
1af9c     A7 FA 61 FC | 	wrlong	result1, fp
1afa0     04 4E 85 F1 | 	sub	fp, #4
1afa4     52 00 00 FF 
1afa8     34 E5 05 F1 | 	add	objptr, ##42292
1afac     F2 12 02 FB | 	rdlong	arg01, objptr
1afb0     09 27 02 F6 | 	mov	local01, arg01
1afb4     52 00 00 FF 
1afb8     34 E5 85 F1 | 	sub	objptr, ##42292
1afbc     09 29 02 F6 | 	mov	local02, arg01
1afc0     97 06 48 FB | 	callpa	#(@LR__2128-@LR__2127)>>2,fcache_load_ptr_
1afc4                 | LR__2127
1afc4     14 FB C9 FA | 	rdbyte	result1, local02 wz
1afc8     01 28 06 51 |  if_ne	add	local02, #1
1afcc     F4 FF 9F 5D |  if_ne	jmp	#LR__2127
1afd0                 | LR__2128
1afd0     09 29 82 F1 | 	sub	local02, arg01
1afd4     14 15 02 F6 | 	mov	arg02, local02
1afd8     0C 4E 05 F1 | 	add	fp, #12
1afdc     A7 16 02 FB | 	rdlong	arg03, fp
1afe0     0C 4E 85 F1 | 	sub	fp, #12
1afe4     0B 15 82 F1 | 	sub	arg02, arg03
1afe8     13 13 02 F6 | 	mov	arg01, local01
1afec     2C F2 B0 FD | 	call	#__system__Right_S
1aff0     52 00 00 FF 
1aff4     34 E5 05 F1 | 	add	objptr, ##42292
1aff8     F2 FA 61 FC | 	wrlong	result1, objptr
1affc     52 00 00 FF 
1b000     34 E5 85 F1 | 	sub	objptr, ##42292
1b004     48 00 90 FD | 	jmp	#LR__2130
1b008                 | LR__2129
1b008     52 00 00 FF 
1b00c     34 E5 05 F1 | 	add	objptr, ##42292
1b010     F2 12 02 FB | 	rdlong	arg01, objptr
1b014     52 00 00 FF 
1b018     34 E5 85 F1 | 	sub	objptr, ##42292
1b01c     04 F6 B0 FD | 	call	#__system__RTrim_S
1b020     FD 12 02 F6 | 	mov	arg01, result1
1b024     3C F5 B0 FD | 	call	#__system__LTrim_S
1b028     04 4E 05 F1 | 	add	fp, #4
1b02c     A7 FA 61 FC | 	wrlong	result1, fp
1b030     04 4E 85 F1 | 	sub	fp, #4
1b034     C4 01 00 FF 
1b038     4C 26 06 F6 | 	mov	local01, ##@LR__6118
1b03c     52 00 00 FF 
1b040     34 E5 05 F1 | 	add	objptr, ##42292
1b044     F2 26 62 FC | 	wrlong	local01, objptr
1b048     52 00 00 FF 
1b04c     34 E5 85 F1 | 	sub	objptr, ##42292
1b050                 | LR__2130
1b050                 | '      
1b050                 | '      if part$<>"" then j=j+1
1b050     04 4E 05 F1 | 	add	fp, #4
1b054     A7 12 02 FB | 	rdlong	arg01, fp
1b058     04 4E 85 F1 | 	sub	fp, #4
1b05c     C4 01 00 FF 
1b060     4D 14 06 F6 | 	mov	arg02, ##@LR__6119
1b064     D4 D0 B0 FD | 	call	#__system___string_cmp
1b068     00 FA 0D F2 | 	cmp	result1, #0 wz
1b06c     34 4F 05 51 |  if_ne	add	fp, #308
1b070     A7 26 02 5B |  if_ne	rdlong	local01, fp
1b074     01 26 06 51 |  if_ne	add	local01, #1
1b078     A7 26 62 5C |  if_ne	wrlong	local01, fp
1b07c     34 4F 85 51 |  if_ne	sub	fp, #308
1b080     30 4F 05 F1 | 	add	fp, #304
1b084     A7 26 02 FB | 	rdlong	local01, fp
1b088     02 26 66 F0 | 	shl	local01, #2
1b08c     04 4F 85 F1 | 	sub	fp, #260
1b090     A7 26 02 F1 | 	add	local01, fp
1b094     28 4E 85 F1 | 	sub	fp, #40
1b098     A7 FA 01 FB | 	rdlong	result1, fp
1b09c     13 FB 61 FC | 	wrlong	result1, local01
1b0a0     2C 4F 05 F1 | 	add	fp, #300
1b0a4     A7 26 02 FB | 	rdlong	local01, fp
1b0a8     01 26 86 F1 | 	sub	local01, #1
1b0ac     A7 26 62 FC | 	wrlong	local01, fp
1b0b0     30 4F 85 F1 | 	sub	fp, #304
1b0b4                 | '      args(i)=part$  
1b0b4                 | '      i=i-1
1b0b4                 | '     if readline="" then readline=read_next_line() 
1b0b4     52 00 00 FF 
1b0b8     34 E5 05 F1 | 	add	objptr, ##42292
1b0bc     F2 12 02 FB | 	rdlong	arg01, objptr
1b0c0     52 00 00 FF 
1b0c4     34 E5 85 F1 | 	sub	objptr, ##42292
1b0c8     C4 01 00 FF 
1b0cc     4E 14 06 F6 | 	mov	arg02, ##@LR__6120
1b0d0     68 D0 B0 FD | 	call	#__system___string_cmp
1b0d4     00 FA 0D F2 | 	cmp	result1, #0 wz
1b0d8     18 00 90 5D |  if_ne	jmp	#LR__2131
1b0dc     74 FA BF FD | 	call	#_read_next_line
1b0e0     52 00 00 FF 
1b0e4     34 E5 05 F1 | 	add	objptr, ##42292
1b0e8     F2 FA 61 FC | 	wrlong	result1, objptr
1b0ec     52 00 00 FF 
1b0f0     34 E5 85 F1 | 	sub	objptr, ##42292
1b0f4                 | LR__2131
1b0f4     30 4F 05 F1 | 	add	fp, #304
1b0f8     A7 26 02 FB | 	rdlong	local01, fp
1b0fc     30 4F 85 F1 | 	sub	fp, #304
1b100     00 26 56 F2 | 	cmps	local01, #0 wc
1b104     28 00 90 CD |  if_b	jmp	#LR__2132
1b108     52 00 00 FF 
1b10c     34 E5 05 F1 | 	add	objptr, ##42292
1b110     F2 12 02 FB | 	rdlong	arg01, objptr
1b114     52 00 00 FF 
1b118     34 E5 85 F1 | 	sub	objptr, ##42292
1b11c     C4 01 00 FF 
1b120     4F 14 06 F6 | 	mov	arg02, ##@LR__6121
1b124     14 D0 B0 FD | 	call	#__system___string_cmp
1b128     00 FA 0D F2 | 	cmp	result1, #0 wz
1b12c     94 FD 9F 5D |  if_ne	jmp	#LR__2125
1b130                 | LR__2132
1b130     30 4F 05 F1 | 	add	fp, #304
1b134     A7 26 02 FB | 	rdlong	local01, fp
1b138     30 4F 85 F1 | 	sub	fp, #304
1b13c     00 26 56 F2 | 	cmps	local01, #0 wc
1b140     80 FD 9F 3D |  if_ae	jmp	#LR__2124
1b144                 | ' if j<numpar then printerror(55,runheader(0))
1b144     34 4F 05 F1 | 	add	fp, #308
1b148     A7 26 02 FB | 	rdlong	local01, fp
1b14c     2C 4F 85 F1 | 	sub	fp, #300
1b150     A7 16 02 FB | 	rdlong	arg03, fp
1b154     08 4E 85 F1 | 	sub	fp, #8
1b158     0B 27 52 F2 | 	cmps	local01, arg03 wc
1b15c     50 00 00 CF 
1b160     10 E5 05 C1 |  if_b	add	objptr, ##41232
1b164     F2 14 02 CB |  if_b	rdlong	arg02, objptr
1b168     50 00 00 CF 
1b16c     10 E5 85 C1 |  if_b	sub	objptr, ##41232
1b170     37 12 06 C6 |  if_b	mov	arg01, #55
1b174     44 95 B0 CD |  if_b	call	#_printerror
1b178                 | ' 
1b178                 | ' for i=0 to numpar-1
1b178     30 4F 05 F1 | 	add	fp, #304
1b17c     A7 00 68 FC | 	wrlong	#0, fp
1b180     28 4F 85 F1 | 	sub	fp, #296
1b184     A7 2A 02 FB | 	rdlong	local03, fp
1b188     08 4E 85 F1 | 	sub	fp, #8
1b18c                 | LR__2133
1b18c     30 4F 05 F1 | 	add	fp, #304
1b190     A7 2C 02 FB | 	rdlong	local04, fp
1b194     30 4F 85 F1 | 	sub	fp, #304
1b198     16 27 02 F6 | 	mov	local01, local04
1b19c     15 27 52 F2 | 	cmps	local01, local03 wc
1b1a0     30 09 90 3D |  if_ae	jmp	#LR__2170
1b1a4                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
1b1a4     30 4F 05 F1 | 	add	fp, #304
1b1a8     A7 16 02 FB | 	rdlong	arg03, fp
1b1ac     02 16 66 F0 | 	shl	arg03, #2
1b1b0     04 4F 85 F1 | 	sub	fp, #260
1b1b4     A7 16 02 F1 | 	add	arg03, fp
1b1b8     0B 13 02 FB | 	rdlong	arg01, arg03
1b1bc     2C 4E 85 F1 | 	sub	fp, #44
1b1c0     B0 B8 BE FD | 	call	#_isnum
1b1c4     FD 2E 02 F6 | 	mov	local05, result1
1b1c8     30 4F 05 F1 | 	add	fp, #304
1b1cc     A7 16 02 FB | 	rdlong	arg03, fp
1b1d0     02 16 66 F0 | 	shl	arg03, #2
1b1d4     04 4F 85 F1 | 	sub	fp, #260
1b1d8     A7 30 02 F6 | 	mov	local06, fp
1b1dc     A7 16 02 F1 | 	add	arg03, fp
1b1e0     0B 13 02 FB | 	rdlong	arg01, arg03
1b1e4     2C 4E 85 F1 | 	sub	fp, #44
1b1e8     74 BC BE FD | 	call	#_isint
1b1ec     FD 2E 2A F5 | 	andn	local05, result1 wz
1b1f0     52 00 00 5F 
1b1f4     68 E5 05 51 |  if_ne	add	objptr, ##42344
1b1f8     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
1b1fc     52 00 00 5F 
1b200     68 E5 85 51 |  if_ne	sub	objptr, ##42344
1b204                 | '   if isint(args(i)) then r=result_int 
1b204     30 4F 05 F1 | 	add	fp, #304
1b208     A7 2E 02 FB | 	rdlong	local05, fp
1b20c     02 2E 66 F0 | 	shl	local05, #2
1b210     04 4F 85 F1 | 	sub	fp, #260
1b214     A7 2E 02 F1 | 	add	local05, fp
1b218     17 13 02 FB | 	rdlong	arg01, local05
1b21c     2C 4E 85 F1 | 	sub	fp, #44
1b220     3C BC BE FD | 	call	#_isint
1b224     00 FA 0D F2 | 	cmp	result1, #0 wz
1b228     52 00 00 5F 
1b22c     68 E5 05 51 |  if_ne	add	objptr, ##42344
1b230     F2 38 68 5C |  if_ne	wrlong	#28, objptr
1b234     52 00 00 5F 
1b238     68 E5 85 51 |  if_ne	sub	objptr, ##42344
1b23c                 | '   if isdec(args(i)) then r=result_uint 
1b23c     30 4F 05 F1 | 	add	fp, #304
1b240     A7 2E 02 FB | 	rdlong	local05, fp
1b244     02 2E 66 F0 | 	shl	local05, #2
1b248     04 4F 85 F1 | 	sub	fp, #260
1b24c     A7 2E 02 F1 | 	add	local05, fp
1b250     17 13 02 FB | 	rdlong	arg01, local05
1b254     2C 4E 85 F1 | 	sub	fp, #44
1b258     A8 BE BE FD | 	call	#_isdec
1b25c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b260     52 00 00 5F 
1b264     68 E5 05 51 |  if_ne	add	objptr, ##42344
1b268     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
1b26c     52 00 00 5F 
1b270     68 E5 85 51 |  if_ne	sub	objptr, ##42344
1b274                 | '   if not isnum(args(i)) then 
1b274     30 4F 05 F1 | 	add	fp, #304
1b278     A7 2E 02 FB | 	rdlong	local05, fp
1b27c     02 2E 66 F0 | 	shl	local05, #2
1b280     04 4F 85 F1 | 	sub	fp, #260
1b284     A7 2E 02 F1 | 	add	local05, fp
1b288     17 13 02 FB | 	rdlong	arg01, local05
1b28c     2C 4E 85 F1 | 	sub	fp, #44
1b290     E0 B7 BE FD | 	call	#_isnum
1b294     FD 2E 22 F6 | 	not	local05, result1
1b298     00 2E 0E F2 | 	cmp	local05, #0 wz
1b29c     4C 01 90 AD |  if_e	jmp	#LR__2138
1b2a0     52 00 00 FF 
1b2a4     68 E5 05 F1 | 	add	objptr, ##42344
1b2a8     F2 56 68 FC | 	wrlong	#43, objptr
1b2ac     52 00 00 FF 
1b2b0     68 E5 85 F1 | 	sub	objptr, ##42344
1b2b4     30 4F 05 F1 | 	add	fp, #304
1b2b8     A7 16 02 FB | 	rdlong	arg03, fp
1b2bc     02 16 66 F0 | 	shl	arg03, #2
1b2c0     04 4F 85 F1 | 	sub	fp, #260
1b2c4     A7 16 02 F1 | 	add	arg03, fp
1b2c8     0B 13 02 FB | 	rdlong	arg01, arg03
1b2cc     2C 4E 85 F1 | 	sub	fp, #44
1b2d0     09 29 02 F6 | 	mov	local02, arg01
1b2d4     97 06 48 FB | 	callpa	#(@LR__2135-@LR__2134)>>2,fcache_load_ptr_
1b2d8                 | LR__2134
1b2d8     14 FB C9 FA | 	rdbyte	result1, local02 wz
1b2dc     01 28 06 51 |  if_ne	add	local02, #1
1b2e0     F4 FF 9F 5D |  if_ne	jmp	#LR__2134
1b2e4                 | LR__2135
1b2e4     09 29 82 F1 | 	sub	local02, arg01
1b2e8     14 FB 01 F6 | 	mov	result1, local02
1b2ec     38 4F 05 F1 | 	add	fp, #312
1b2f0     A7 FA 61 FC | 	wrlong	result1, fp
1b2f4     52 00 00 FF 
1b2f8     F0 E4 05 F1 | 	add	objptr, ##42224
1b2fc     F2 12 02 FB | 	rdlong	arg01, objptr
1b300     FD 12 82 F1 | 	sub	arg01, result1
1b304     04 12 86 F1 | 	sub	arg01, #4
1b308     03 12 26 F5 | 	andn	arg01, #3
1b30c     F2 12 62 FC | 	wrlong	arg01, objptr
1b310     52 00 00 FF 
1b314     F0 E4 85 F1 | 	sub	objptr, ##42224
1b318     A7 14 02 FB | 	rdlong	arg02, fp
1b31c     38 4F 85 F1 | 	sub	fp, #312
1b320     38 95 B0 FD | 	call	#_pslpoke
1b324                 | '     pslpoke memtop,l
1b324                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
1b324     34 4F 05 F1 | 	add	fp, #308
1b328     A7 02 68 FC | 	wrlong	#1, fp
1b32c     04 4E 05 F1 | 	add	fp, #4
1b330     A7 32 02 FB | 	rdlong	local07, fp
1b334     38 4F 85 F1 | 	sub	fp, #312
1b338     01 32 06 F1 | 	add	local07, #1
1b33c                 | LR__2136
1b33c     34 4F 05 F1 | 	add	fp, #308
1b340     A7 2E 02 FB | 	rdlong	local05, fp
1b344     34 4F 85 F1 | 	sub	fp, #308
1b348     19 2F 52 F2 | 	cmps	local05, local07 wc
1b34c     7C 00 90 3D |  if_ae	jmp	#LR__2137
1b350     52 00 00 FF 
1b354     F0 E4 05 F1 | 	add	objptr, ##42224
1b358     F2 30 02 FB | 	rdlong	local06, objptr
1b35c     52 00 00 FF 
1b360     F0 E4 85 F1 | 	sub	objptr, ##42224
1b364     03 30 06 F1 | 	add	local06, #3
1b368     34 4F 05 F1 | 	add	fp, #308
1b36c     A7 34 02 FB | 	rdlong	local08, fp
1b370     1A 31 02 F1 | 	add	local06, local08
1b374     04 4E 85 F1 | 	sub	fp, #4
1b378     A7 36 02 FB | 	rdlong	local09, fp
1b37c     02 36 66 F0 | 	shl	local09, #2
1b380     04 4F 85 F1 | 	sub	fp, #260
1b384     A7 38 02 F6 | 	mov	local10, fp
1b388     A7 36 02 F1 | 	add	local09, fp
1b38c     1B 13 02 FB | 	rdlong	arg01, local09
1b390     2C 4E 85 F1 | 	sub	fp, #44
1b394     01 3A 06 F6 | 	mov	local11, #1
1b398     1A 15 02 F6 | 	mov	arg02, local08
1b39c     01 16 06 F6 | 	mov	arg03, #1
1b3a0     08 EF B0 FD | 	call	#__system__Mid_S
1b3a4     FD 14 C2 FA | 	rdbyte	arg02, result1
1b3a8     18 13 02 F6 | 	mov	arg01, local06
1b3ac     3C 95 B0 FD | 	call	#_pspoke
1b3b0     34 4F 05 F1 | 	add	fp, #308
1b3b4     A7 30 02 FB | 	rdlong	local06, fp
1b3b8     18 2F 02 F6 | 	mov	local05, local06
1b3bc     01 2E 06 F1 | 	add	local05, #1
1b3c0     A7 2E 62 FC | 	wrlong	local05, fp
1b3c4     34 4F 85 F1 | 	sub	fp, #308
1b3c8     70 FF 9F FD | 	jmp	#LR__2136
1b3cc                 | LR__2137
1b3cc     52 00 00 FF 
1b3d0     F0 E4 05 F1 | 	add	objptr, ##42224
1b3d4     F2 2E 02 FB | 	rdlong	local05, objptr
1b3d8     52 00 00 FF 
1b3dc     F0 E4 85 F1 | 	sub	objptr, ##42224
1b3e0     10 4E 05 F1 | 	add	fp, #16
1b3e4     A7 2E 62 FC | 	wrlong	local05, fp
1b3e8     10 4E 85 F1 | 	sub	fp, #16
1b3ec                 | LR__2138
1b3ec     30 24 BF FD | 	call	#_pop
1b3f0     1C 4E 05 F1 | 	add	fp, #28
1b3f4     A7 FA 61 FC | 	wrlong	result1, fp
1b3f8     04 4E 05 F1 | 	add	fp, #4
1b3fc     A7 FC 61 FC | 	wrlong	result2, fp
1b400     04 4E 05 F1 | 	add	fp, #4
1b404     A7 FE 61 FC | 	wrlong	result3, fp
1b408                 | '   t1=pop() 
1b408                 | '   if i>=numpar-j then
1b408     1C 4E 85 F1 | 	sub	fp, #28
1b40c     A7 2E 02 FB | 	rdlong	local05, fp
1b410     17 3D 02 F6 | 	mov	local12, local05
1b414     2C 4F 05 F1 | 	add	fp, #300
1b418     A7 3E 02 FB | 	rdlong	local13, fp
1b41c     1F 41 02 F6 | 	mov	local14, local13
1b420     20 3D 82 F1 | 	sub	local12, local14
1b424     04 4E 85 F1 | 	sub	fp, #4
1b428     A7 42 02 FB | 	rdlong	local15, fp
1b42c     30 4F 85 F1 | 	sub	fp, #304
1b430     21 45 02 F6 | 	mov	local16, local15
1b434     1E 45 52 F2 | 	cmps	local16, local12 wc
1b438     80 06 90 CD |  if_b	jmp	#LR__2169
1b43c     20 4E 05 F1 | 	add	fp, #32
1b440     A7 3C 02 FB | 	rdlong	local12, fp
1b444     0C 4E 85 F1 | 	sub	fp, #12
1b448     A7 3C 62 FC | 	wrlong	local12, fp
1b44c                 | '     vartype=t1.result.twowords(1)
1b44c                 | '     select case vartype
1b44c     14 4E 85 F1 | 	sub	fp, #20
1b450     1E 47 0A F6 | 	mov	local17, local12 wz
1b454     64 00 90 AD |  if_e	jmp	#LR__2139
1b458     00 47 0E F2 | 	cmp	local17, #256 wz
1b45c     6C 00 90 AD |  if_e	jmp	#LR__2140
1b460     01 47 0E F2 | 	cmp	local17, #257 wz
1b464     74 00 90 AD |  if_e	jmp	#LR__2141
1b468     02 47 0E F2 | 	cmp	local17, #258 wz
1b46c     7C 00 90 AD |  if_e	jmp	#LR__2142
1b470     03 47 0E F2 | 	cmp	local17, #259 wz
1b474     84 00 90 AD |  if_e	jmp	#LR__2143
1b478     04 47 0E F2 | 	cmp	local17, #260 wz
1b47c     8C 00 90 AD |  if_e	jmp	#LR__2144
1b480     05 47 0E F2 | 	cmp	local17, #261 wz
1b484     94 00 90 AD |  if_e	jmp	#LR__2145
1b488     06 47 0E F2 | 	cmp	local17, #262 wz
1b48c     9C 00 90 AD |  if_e	jmp	#LR__2146
1b490     07 47 0E F2 | 	cmp	local17, #263 wz
1b494     A4 00 90 AD |  if_e	jmp	#LR__2147
1b498     08 47 0E F2 | 	cmp	local17, #264 wz
1b49c     AC 00 90 AD |  if_e	jmp	#LR__2148
1b4a0     09 47 0E F2 | 	cmp	local17, #265 wz
1b4a4     B4 00 90 AD |  if_e	jmp	#LR__2149
1b4a8     0A 47 0E F2 | 	cmp	local17, #266 wz
1b4ac     BC 00 90 AD |  if_e	jmp	#LR__2150
1b4b0     0B 47 0E F2 | 	cmp	local17, #267 wz
1b4b4     C4 00 90 AD |  if_e	jmp	#LR__2151
1b4b8     D0 00 90 FD | 	jmp	#LR__2152
1b4bc                 | LR__2139
1b4bc     18 4E 05 F1 | 	add	fp, #24
1b4c0     A7 18 68 FC | 	wrlong	#12, fp
1b4c4     18 4E 85 F1 | 	sub	fp, #24
1b4c8     CC 00 90 FD | 	jmp	#LR__2153
1b4cc                 | LR__2140
1b4cc     18 4E 05 F1 | 	add	fp, #24
1b4d0     A7 18 68 FC | 	wrlong	#12, fp
1b4d4     18 4E 85 F1 | 	sub	fp, #24
1b4d8     BC 00 90 FD | 	jmp	#LR__2153
1b4dc                 | LR__2141
1b4dc     18 4E 05 F1 | 	add	fp, #24
1b4e0     A7 02 68 FC | 	wrlong	#1, fp
1b4e4     18 4E 85 F1 | 	sub	fp, #24
1b4e8     AC 00 90 FD | 	jmp	#LR__2153
1b4ec                 | LR__2142
1b4ec     18 4E 05 F1 | 	add	fp, #24
1b4f0     A7 02 68 FC | 	wrlong	#1, fp
1b4f4     18 4E 85 F1 | 	sub	fp, #24
1b4f8     9C 00 90 FD | 	jmp	#LR__2153
1b4fc                 | LR__2143
1b4fc     18 4E 05 F1 | 	add	fp, #24
1b500     A7 04 68 FC | 	wrlong	#2, fp
1b504     18 4E 85 F1 | 	sub	fp, #24
1b508     8C 00 90 FD | 	jmp	#LR__2153
1b50c                 | LR__2144
1b50c     18 4E 05 F1 | 	add	fp, #24
1b510     A7 04 68 FC | 	wrlong	#2, fp
1b514     18 4E 85 F1 | 	sub	fp, #24
1b518     7C 00 90 FD | 	jmp	#LR__2153
1b51c                 | LR__2145
1b51c     18 4E 05 F1 | 	add	fp, #24
1b520     A7 08 68 FC | 	wrlong	#4, fp
1b524     18 4E 85 F1 | 	sub	fp, #24
1b528     6C 00 90 FD | 	jmp	#LR__2153
1b52c                 | LR__2146
1b52c     18 4E 05 F1 | 	add	fp, #24
1b530     A7 08 68 FC | 	wrlong	#4, fp
1b534     18 4E 85 F1 | 	sub	fp, #24
1b538     5C 00 90 FD | 	jmp	#LR__2153
1b53c                 | LR__2147
1b53c     18 4E 05 F1 | 	add	fp, #24
1b540     A7 10 68 FC | 	wrlong	#8, fp
1b544     18 4E 85 F1 | 	sub	fp, #24
1b548     4C 00 90 FD | 	jmp	#LR__2153
1b54c                 | LR__2148
1b54c     18 4E 05 F1 | 	add	fp, #24
1b550     A7 10 68 FC | 	wrlong	#8, fp
1b554     18 4E 85 F1 | 	sub	fp, #24
1b558     3C 00 90 FD | 	jmp	#LR__2153
1b55c                 | LR__2149
1b55c     18 4E 05 F1 | 	add	fp, #24
1b560     A7 0C 68 FC | 	wrlong	#6, fp
1b564     18 4E 85 F1 | 	sub	fp, #24
1b568     2C 00 90 FD | 	jmp	#LR__2153
1b56c                 | LR__2150
1b56c     18 4E 05 F1 | 	add	fp, #24
1b570     A7 10 68 FC | 	wrlong	#8, fp
1b574     18 4E 85 F1 | 	sub	fp, #24
1b578     1C 00 90 FD | 	jmp	#LR__2153
1b57c                 | LR__2151
1b57c     18 4E 05 F1 | 	add	fp, #24
1b580     A7 0A 68 FC | 	wrlong	#5, fp
1b584     18 4E 85 F1 | 	sub	fp, #24
1b588     0C 00 90 FD | 	jmp	#LR__2153
1b58c                 | LR__2152
1b58c     18 4E 05 F1 | 	add	fp, #24
1b590     A7 18 68 FC | 	wrlong	#12, fp
1b594     18 4E 85 F1 | 	sub	fp, #24
1b598                 | LR__2153
1b598                 | '     if esize=12 andalso t1.result.uresult<$80000 then
1b598     18 4E 05 F1 | 	add	fp, #24
1b59c     A7 3C 02 FB | 	rdlong	local12, fp
1b5a0     18 4E 85 F1 | 	sub	fp, #24
1b5a4     0C 3C 0E F2 | 	cmp	local12, #12 wz
1b5a8     74 01 90 5D |  if_ne	jmp	#LR__2158
1b5ac     1C 4E 05 F1 | 	add	fp, #28
1b5b0     A7 3E 02 FB | 	rdlong	local13, fp
1b5b4     1C 4E 85 F1 | 	sub	fp, #28
1b5b8     00 04 00 FF 
1b5bc     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1b5c0     5C 01 90 3D |  if_ae	jmp	#LR__2158
1b5c4                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
1b5c4     52 00 00 FF 
1b5c8     68 E5 05 F1 | 	add	objptr, ##42344
1b5cc     F2 3C 02 FB | 	rdlong	local12, objptr
1b5d0     52 00 00 FF 
1b5d4     68 E5 85 F1 | 	sub	objptr, ##42344
1b5d8     1C 3C 0E F2 | 	cmp	local12, #28 wz
1b5dc     38 00 90 5D |  if_ne	jmp	#LR__2154
1b5e0     1C 4E 05 F1 | 	add	fp, #28
1b5e4     A7 3C 02 FB | 	rdlong	local12, fp
1b5e8     14 4F 05 F1 | 	add	fp, #276
1b5ec     A7 3E 02 FB | 	rdlong	local13, fp
1b5f0     1F 45 02 F6 | 	mov	local16, local13
1b5f4     02 44 66 F0 | 	shl	local16, #2
1b5f8     04 4F 85 F1 | 	sub	fp, #260
1b5fc     A7 42 02 F6 | 	mov	local15, fp
1b600     A7 44 02 F1 | 	add	local16, fp
1b604     22 13 02 FB | 	rdlong	arg01, local16
1b608     00 14 06 F6 | 	mov	arg02, #0
1b60c     2C 4E 85 F1 | 	sub	fp, #44
1b610     F4 FF B0 FD | 	call	#__system____builtin_atoi
1b614     1E FB 61 FC | 	wrlong	result1, local12
1b618                 | LR__2154
1b618                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
1b618     52 00 00 FF 
1b61c     68 E5 05 F1 | 	add	objptr, ##42344
1b620     F2 3C 02 FB | 	rdlong	local12, objptr
1b624     52 00 00 FF 
1b628     68 E5 85 F1 | 	sub	objptr, ##42344
1b62c     1D 3C 0E F2 | 	cmp	local12, #29 wz
1b630     38 00 90 5D |  if_ne	jmp	#LR__2155
1b634     1C 4E 05 F1 | 	add	fp, #28
1b638     A7 3C 02 FB | 	rdlong	local12, fp
1b63c     14 4F 05 F1 | 	add	fp, #276
1b640     A7 3E 02 FB | 	rdlong	local13, fp
1b644     1F 45 02 F6 | 	mov	local16, local13
1b648     02 44 66 F0 | 	shl	local16, #2
1b64c     04 4F 85 F1 | 	sub	fp, #260
1b650     A7 42 02 F6 | 	mov	local15, fp
1b654     A7 44 02 F1 | 	add	local16, fp
1b658     22 13 02 FB | 	rdlong	arg01, local16
1b65c     00 14 06 F6 | 	mov	arg02, #0
1b660     2C 4E 85 F1 | 	sub	fp, #44
1b664     A0 FF B0 FD | 	call	#__system____builtin_atoi
1b668     1E FB 61 FC | 	wrlong	result1, local12
1b66c                 | LR__2155
1b66c                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
1b66c     52 00 00 FF 
1b670     68 E5 05 F1 | 	add	objptr, ##42344
1b674     F2 3C 02 FB | 	rdlong	local12, objptr
1b678     52 00 00 FF 
1b67c     68 E5 85 F1 | 	sub	objptr, ##42344
1b680     1E 3C 0E F2 | 	cmp	local12, #30 wz
1b684     3C 00 90 5D |  if_ne	jmp	#LR__2156
1b688     30 4F 05 F1 | 	add	fp, #304
1b68c     A7 3E 02 FB | 	rdlong	local13, fp
1b690     02 3E 66 F0 | 	shl	local13, #2
1b694     04 4F 85 F1 | 	sub	fp, #260
1b698     A7 44 02 F6 | 	mov	local16, fp
1b69c     A7 3E 02 F1 | 	add	local13, fp
1b6a0     1F 13 02 FB | 	rdlong	arg01, local13
1b6a4     2C 4E 85 F1 | 	sub	fp, #44
1b6a8     F4 00 B1 FD | 	call	#__system____builtin_atof
1b6ac     28 4E 05 F1 | 	add	fp, #40
1b6b0     A7 FA 61 FC | 	wrlong	result1, fp
1b6b4     0C 4E 85 F1 | 	sub	fp, #12
1b6b8     A7 3C 02 FB | 	rdlong	local12, fp
1b6bc     1C 4E 85 F1 | 	sub	fp, #28
1b6c0     1E FB 61 FC | 	wrlong	result1, local12
1b6c4                 | LR__2156
1b6c4                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
1b6c4     52 00 00 FF 
1b6c8     68 E5 05 F1 | 	add	objptr, ##42344
1b6cc     F2 3C 02 FB | 	rdlong	local12, objptr
1b6d0     52 00 00 FF 
1b6d4     68 E5 85 F1 | 	sub	objptr, ##42344
1b6d8     2B 3C 0E F2 | 	cmp	local12, #43 wz
1b6dc     18 00 90 5D |  if_ne	jmp	#LR__2157
1b6e0     1C 4E 05 F1 | 	add	fp, #28
1b6e4     A7 12 02 FB | 	rdlong	arg01, fp
1b6e8     0C 4E 85 F1 | 	sub	fp, #12
1b6ec     A7 14 02 FB | 	rdlong	arg02, fp
1b6f0     10 4E 85 F1 | 	sub	fp, #16
1b6f4     09 15 62 FC | 	wrlong	arg02, arg01
1b6f8                 | LR__2157
1b6f8     1C 4E 05 F1 | 	add	fp, #28
1b6fc     A7 12 02 FB | 	rdlong	arg01, fp
1b700     1C 4E 85 F1 | 	sub	fp, #28
1b704     08 12 06 F1 | 	add	arg01, #8
1b708     52 00 00 FF 
1b70c     68 E5 05 F1 | 	add	objptr, ##42344
1b710     F2 14 02 FB | 	rdlong	arg02, objptr
1b714     52 00 00 FF 
1b718     68 E5 85 F1 | 	sub	objptr, ##42344
1b71c     09 15 62 FC | 	wrlong	arg02, arg01
1b720                 | LR__2158
1b720                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
1b720     18 4E 05 F1 | 	add	fp, #24
1b724     A7 3C 02 FB | 	rdlong	local12, fp
1b728     18 4E 85 F1 | 	sub	fp, #24
1b72c     0C 3C 0E F2 | 	cmp	local12, #12 wz
1b730     94 01 90 5D |  if_ne	jmp	#LR__2163
1b734     1C 4E 05 F1 | 	add	fp, #28
1b738     A7 3E 02 FB | 	rdlong	local13, fp
1b73c     1C 4E 85 F1 | 	sub	fp, #28
1b740     00 04 00 FF 
1b744     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1b748     7C 01 90 CD |  if_b	jmp	#LR__2163
1b74c                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
1b74c     52 00 00 FF 
1b750     68 E5 05 F1 | 	add	objptr, ##42344
1b754     F2 3C 02 FB | 	rdlong	local12, objptr
1b758     52 00 00 FF 
1b75c     68 E5 85 F1 | 	sub	objptr, ##42344
1b760     1C 3C 0E F2 | 	cmp	local12, #28 wz
1b764     40 00 90 5D |  if_ne	jmp	#LR__2159
1b768     1C 4E 05 F1 | 	add	fp, #28
1b76c     A7 3C 02 FB | 	rdlong	local12, fp
1b770     14 4F 05 F1 | 	add	fp, #276
1b774     A7 3E 02 FB | 	rdlong	local13, fp
1b778     1F 45 02 F6 | 	mov	local16, local13
1b77c     02 44 66 F0 | 	shl	local16, #2
1b780     04 4F 85 F1 | 	sub	fp, #260
1b784     A7 42 02 F6 | 	mov	local15, fp
1b788     A7 44 02 F1 | 	add	local16, fp
1b78c     22 13 02 FB | 	rdlong	arg01, local16
1b790     00 14 06 F6 | 	mov	arg02, #0
1b794     2C 4E 85 F1 | 	sub	fp, #44
1b798     6C FE B0 FD | 	call	#__system____builtin_atoi
1b79c     FD 14 02 F6 | 	mov	arg02, result1
1b7a0     1E 13 02 F6 | 	mov	arg01, local12
1b7a4     B4 90 B0 FD | 	call	#_pslpoke
1b7a8                 | LR__2159
1b7a8                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
1b7a8     52 00 00 FF 
1b7ac     68 E5 05 F1 | 	add	objptr, ##42344
1b7b0     F2 3C 02 FB | 	rdlong	local12, objptr
1b7b4     52 00 00 FF 
1b7b8     68 E5 85 F1 | 	sub	objptr, ##42344
1b7bc     1D 3C 0E F2 | 	cmp	local12, #29 wz
1b7c0     40 00 90 5D |  if_ne	jmp	#LR__2160
1b7c4     1C 4E 05 F1 | 	add	fp, #28
1b7c8     A7 3C 02 FB | 	rdlong	local12, fp
1b7cc     14 4F 05 F1 | 	add	fp, #276
1b7d0     A7 3E 02 FB | 	rdlong	local13, fp
1b7d4     1F 45 02 F6 | 	mov	local16, local13
1b7d8     02 44 66 F0 | 	shl	local16, #2
1b7dc     04 4F 85 F1 | 	sub	fp, #260
1b7e0     A7 42 02 F6 | 	mov	local15, fp
1b7e4     A7 44 02 F1 | 	add	local16, fp
1b7e8     22 13 02 FB | 	rdlong	arg01, local16
1b7ec     00 14 06 F6 | 	mov	arg02, #0
1b7f0     2C 4E 85 F1 | 	sub	fp, #44
1b7f4     10 FE B0 FD | 	call	#__system____builtin_atoi
1b7f8     FD 14 02 F6 | 	mov	arg02, result1
1b7fc     1E 13 02 F6 | 	mov	arg01, local12
1b800     58 90 B0 FD | 	call	#_pslpoke
1b804                 | LR__2160
1b804                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1b804     52 00 00 FF 
1b808     68 E5 05 F1 | 	add	objptr, ##42344
1b80c     F2 3C 02 FB | 	rdlong	local12, objptr
1b810     52 00 00 FF 
1b814     68 E5 85 F1 | 	sub	objptr, ##42344
1b818     1E 3C 0E F2 | 	cmp	local12, #30 wz
1b81c     4C 00 90 5D |  if_ne	jmp	#LR__2161
1b820     30 4F 05 F1 | 	add	fp, #304
1b824     A7 3E 02 FB | 	rdlong	local13, fp
1b828     02 3E 66 F0 | 	shl	local13, #2
1b82c     04 4F 85 F1 | 	sub	fp, #260
1b830     A7 44 02 F6 | 	mov	local16, fp
1b834     A7 3E 02 F1 | 	add	local13, fp
1b838     1F 13 02 FB | 	rdlong	arg01, local13
1b83c     2C 4E 85 F1 | 	sub	fp, #44
1b840     5C FF B0 FD | 	call	#__system____builtin_atof
1b844     28 4E 05 F1 | 	add	fp, #40
1b848     A7 FA 61 FC | 	wrlong	result1, fp
1b84c     0C 4E 85 F1 | 	sub	fp, #12
1b850     A7 3C 02 FB | 	rdlong	local12, fp
1b854     0C 4E 05 F1 | 	add	fp, #12
1b858     A7 12 02 F6 | 	mov	arg01, fp
1b85c     28 4E 85 F1 | 	sub	fp, #40
1b860     09 15 02 FB | 	rdlong	arg02, arg01
1b864     1E 13 02 F6 | 	mov	arg01, local12
1b868     F0 8F B0 FD | 	call	#_pslpoke
1b86c                 | LR__2161
1b86c                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
1b86c     52 00 00 FF 
1b870     68 E5 05 F1 | 	add	objptr, ##42344
1b874     F2 3C 02 FB | 	rdlong	local12, objptr
1b878     52 00 00 FF 
1b87c     68 E5 85 F1 | 	sub	objptr, ##42344
1b880     2B 3C 0E F2 | 	cmp	local12, #43 wz
1b884     18 00 90 5D |  if_ne	jmp	#LR__2162
1b888     1C 4E 05 F1 | 	add	fp, #28
1b88c     A7 12 02 FB | 	rdlong	arg01, fp
1b890     0C 4E 85 F1 | 	sub	fp, #12
1b894     A7 14 02 FB | 	rdlong	arg02, fp
1b898     10 4E 85 F1 | 	sub	fp, #16
1b89c     BC 8F B0 FD | 	call	#_pslpoke
1b8a0                 | LR__2162
1b8a0     1C 4E 05 F1 | 	add	fp, #28
1b8a4     A7 12 02 FB | 	rdlong	arg01, fp
1b8a8     1C 4E 85 F1 | 	sub	fp, #28
1b8ac     08 12 06 F1 | 	add	arg01, #8
1b8b0     52 00 00 FF 
1b8b4     68 E5 05 F1 | 	add	objptr, ##42344
1b8b8     F2 14 02 FB | 	rdlong	arg02, objptr
1b8bc     52 00 00 FF 
1b8c0     68 E5 85 F1 | 	sub	objptr, ##42344
1b8c4     94 8F B0 FD | 	call	#_pslpoke
1b8c8                 | LR__2163
1b8c8                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
1b8c8     18 4E 05 F1 | 	add	fp, #24
1b8cc     A7 3C 02 FB | 	rdlong	local12, fp
1b8d0     18 4E 85 F1 | 	sub	fp, #24
1b8d4     05 3C 0E F2 | 	cmp	local12, #5 wz
1b8d8     52 00 00 AF 
1b8dc     68 E5 05 A1 |  if_e	add	objptr, ##42344
1b8e0     F2 40 02 AB |  if_e	rdlong	local14, objptr
1b8e4     52 00 00 AF 
1b8e8     68 E5 85 A1 |  if_e	sub	objptr, ##42344
1b8ec     2B 40 0E A2 |  if_e	cmp	local14, #43 wz
1b8f0     18 00 90 5D |  if_ne	jmp	#LR__2164
1b8f4     1C 4E 05 F1 | 	add	fp, #28
1b8f8     A7 12 02 FB | 	rdlong	arg01, fp
1b8fc     0C 4E 85 F1 | 	sub	fp, #12
1b900     A7 14 02 FB | 	rdlong	arg02, fp
1b904     10 4E 85 F1 | 	sub	fp, #16
1b908     50 8F B0 FD | 	call	#_pslpoke
1b90c                 | LR__2164
1b90c                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
1b90c     18 4E 05 F1 | 	add	fp, #24
1b910     A7 3C 02 FB | 	rdlong	local12, fp
1b914     18 4E 85 F1 | 	sub	fp, #24
1b918     04 3C 0E F2 | 	cmp	local12, #4 wz
1b91c     54 00 90 5D |  if_ne	jmp	#LR__2165
1b920     52 00 00 FF 
1b924     68 E5 05 F1 | 	add	objptr, ##42344
1b928     F2 40 02 FB | 	rdlong	local14, objptr
1b92c     52 00 00 FF 
1b930     68 E5 85 F1 | 	sub	objptr, ##42344
1b934     2B 40 0E F2 | 	cmp	local14, #43 wz
1b938     38 00 90 AD |  if_e	jmp	#LR__2165
1b93c     1C 4E 05 F1 | 	add	fp, #28
1b940     A7 3C 02 FB | 	rdlong	local12, fp
1b944     14 4F 05 F1 | 	add	fp, #276
1b948     A7 44 02 FB | 	rdlong	local16, fp
1b94c     02 44 66 F0 | 	shl	local16, #2
1b950     04 4F 85 F1 | 	sub	fp, #260
1b954     A7 44 02 F1 | 	add	local16, fp
1b958     22 13 02 FB | 	rdlong	arg01, local16
1b95c     00 14 06 F6 | 	mov	arg02, #0
1b960     2C 4E 85 F1 | 	sub	fp, #44
1b964     A0 FC B0 FD | 	call	#__system____builtin_atoi
1b968     FD 14 02 F6 | 	mov	arg02, result1
1b96c     1E 13 02 F6 | 	mov	arg01, local12
1b970     E8 8E B0 FD | 	call	#_pslpoke
1b974                 | LR__2165
1b974                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
1b974     18 4E 05 F1 | 	add	fp, #24
1b978     A7 3C 02 FB | 	rdlong	local12, fp
1b97c     18 4E 85 F1 | 	sub	fp, #24
1b980     02 3C 0E F2 | 	cmp	local12, #2 wz
1b984     54 00 90 5D |  if_ne	jmp	#LR__2166
1b988     52 00 00 FF 
1b98c     68 E5 05 F1 | 	add	objptr, ##42344
1b990     F2 40 02 FB | 	rdlong	local14, objptr
1b994     52 00 00 FF 
1b998     68 E5 85 F1 | 	sub	objptr, ##42344
1b99c     2B 40 0E F2 | 	cmp	local14, #43 wz
1b9a0     38 00 90 AD |  if_e	jmp	#LR__2166
1b9a4     1C 4E 05 F1 | 	add	fp, #28
1b9a8     A7 3C 02 FB | 	rdlong	local12, fp
1b9ac     14 4F 05 F1 | 	add	fp, #276
1b9b0     A7 44 02 FB | 	rdlong	local16, fp
1b9b4     02 44 66 F0 | 	shl	local16, #2
1b9b8     04 4F 85 F1 | 	sub	fp, #260
1b9bc     A7 44 02 F1 | 	add	local16, fp
1b9c0     22 13 02 FB | 	rdlong	arg01, local16
1b9c4     00 14 06 F6 | 	mov	arg02, #0
1b9c8     2C 4E 85 F1 | 	sub	fp, #44
1b9cc     38 FC B0 FD | 	call	#__system____builtin_atoi
1b9d0     FD 14 02 F6 | 	mov	arg02, result1
1b9d4     1E 13 02 F6 | 	mov	arg01, local12
1b9d8     C8 8E B0 FD | 	call	#_psdpoke
1b9dc                 | LR__2166
1b9dc                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
1b9dc     18 4E 05 F1 | 	add	fp, #24
1b9e0     A7 3C 02 FB | 	rdlong	local12, fp
1b9e4     18 4E 85 F1 | 	sub	fp, #24
1b9e8     01 3C 0E F2 | 	cmp	local12, #1 wz
1b9ec     54 00 90 5D |  if_ne	jmp	#LR__2167
1b9f0     52 00 00 FF 
1b9f4     68 E5 05 F1 | 	add	objptr, ##42344
1b9f8     F2 40 02 FB | 	rdlong	local14, objptr
1b9fc     52 00 00 FF 
1ba00     68 E5 85 F1 | 	sub	objptr, ##42344
1ba04     2B 40 0E F2 | 	cmp	local14, #43 wz
1ba08     38 00 90 AD |  if_e	jmp	#LR__2167
1ba0c     1C 4E 05 F1 | 	add	fp, #28
1ba10     A7 3C 02 FB | 	rdlong	local12, fp
1ba14     14 4F 05 F1 | 	add	fp, #276
1ba18     A7 44 02 FB | 	rdlong	local16, fp
1ba1c     02 44 66 F0 | 	shl	local16, #2
1ba20     04 4F 85 F1 | 	sub	fp, #260
1ba24     A7 44 02 F1 | 	add	local16, fp
1ba28     22 13 02 FB | 	rdlong	arg01, local16
1ba2c     00 14 06 F6 | 	mov	arg02, #0
1ba30     2C 4E 85 F1 | 	sub	fp, #44
1ba34     D0 FB B0 FD | 	call	#__system____builtin_atoi
1ba38     FD 14 02 F6 | 	mov	arg02, result1
1ba3c     1E 13 02 F6 | 	mov	arg01, local12
1ba40     A8 8E B0 FD | 	call	#_pspoke
1ba44                 | LR__2167
1ba44                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1ba44     18 4E 05 F1 | 	add	fp, #24
1ba48     A7 3C 02 FB | 	rdlong	local12, fp
1ba4c     18 4E 85 F1 | 	sub	fp, #24
1ba50     06 3C 0E F2 | 	cmp	local12, #6 wz
1ba54     64 00 90 5D |  if_ne	jmp	#LR__2168
1ba58     52 00 00 FF 
1ba5c     68 E5 05 F1 | 	add	objptr, ##42344
1ba60     F2 40 02 FB | 	rdlong	local14, objptr
1ba64     52 00 00 FF 
1ba68     68 E5 85 F1 | 	sub	objptr, ##42344
1ba6c     2B 40 0E F2 | 	cmp	local14, #43 wz
1ba70     48 00 90 AD |  if_e	jmp	#LR__2168
1ba74     30 4F 05 F1 | 	add	fp, #304
1ba78     A7 3E 02 FB | 	rdlong	local13, fp
1ba7c     02 3E 66 F0 | 	shl	local13, #2
1ba80     04 4F 85 F1 | 	sub	fp, #260
1ba84     A7 3E 02 F1 | 	add	local13, fp
1ba88     1F 13 02 FB | 	rdlong	arg01, local13
1ba8c     2C 4E 85 F1 | 	sub	fp, #44
1ba90     0C FD B0 FD | 	call	#__system____builtin_atof
1ba94     28 4E 05 F1 | 	add	fp, #40
1ba98     A7 FA 61 FC | 	wrlong	result1, fp
1ba9c     0C 4E 85 F1 | 	sub	fp, #12
1baa0     A7 3C 02 FB | 	rdlong	local12, fp
1baa4     0C 4E 05 F1 | 	add	fp, #12
1baa8     A7 12 02 F6 | 	mov	arg01, fp
1baac     28 4E 85 F1 | 	sub	fp, #40
1bab0     09 15 02 FB | 	rdlong	arg02, arg01
1bab4     1E 13 02 F6 | 	mov	arg01, local12
1bab8     A0 8D B0 FD | 	call	#_pslpoke
1babc                 | LR__2168
1babc                 | LR__2169
1babc     30 4F 05 F1 | 	add	fp, #304
1bac0     A7 40 02 FB | 	rdlong	local14, fp
1bac4     01 40 06 F1 | 	add	local14, #1
1bac8     A7 40 62 FC | 	wrlong	local14, fp
1bacc     30 4F 85 F1 | 	sub	fp, #304
1bad0     B8 F6 9F FD | 	jmp	#LR__2133
1bad4                 | LR__2170
1bad4                 | LR__2171
1bad4     A7 F0 03 F6 | 	mov	ptra, fp
1bad8     B2 00 A0 FD | 	call	#popregs_
1badc                 | _do_read_ret
1badc     2D 00 64 FD | 	ret
1bae0                 | 
1bae0                 | ' 
1bae0                 | ' '------------------- release
1bae0                 | ' 
1bae0                 | ' sub do_release
1bae0                 | _do_release
1bae0     00 4A 05 F6 | 	mov	COUNT_, #0
1bae4     A8 00 A0 FD | 	call	#pushregs_
1bae8     10 F0 07 F1 | 	add	ptra, #16
1baec     30 1D BF FD | 	call	#_pop
1baf0     FF 14 02 F6 | 	mov	arg02, result3
1baf4     A7 FA 61 FC | 	wrlong	result1, fp
1baf8     04 4E 05 F1 | 	add	fp, #4
1bafc     A7 FC 61 FC | 	wrlong	result2, fp
1bb00     04 4E 05 F1 | 	add	fp, #4
1bb04     A7 14 62 FC | 	wrlong	arg02, fp
1bb08     08 4E 85 F1 | 	sub	fp, #8
1bb0c     A7 12 02 F6 | 	mov	arg01, fp
1bb10     F0 1E BF FD | 	call	#_converttoint
1bb14     0C 4E 05 F1 | 	add	fp, #12
1bb18     A7 FA 61 FC | 	wrlong	result1, fp
1bb1c                 | ' 
1bb1c                 | ' t1=pop()
1bb1c                 | ' channel=converttoint(t1)
1bb1c                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
1bb1c     0C 4E 85 F1 | 	sub	fp, #12
1bb20     00 FA 55 F2 | 	cmps	result1, #0 wc
1bb24     44 00 90 CD |  if_b	jmp	#LR__2180
1bb28     0C 4E 05 F1 | 	add	fp, #12
1bb2c     A7 14 02 FB | 	rdlong	arg02, fp
1bb30     0C 4E 85 F1 | 	sub	fp, #12
1bb34     08 14 56 F2 | 	cmps	arg02, #8 wc
1bb38     30 00 90 3D |  if_ae	jmp	#LR__2180
1bb3c     37 00 00 FF 
1bb40     30 E4 05 F1 | 	add	objptr, ##28208
1bb44     F2 12 02 FB | 	rdlong	arg01, objptr
1bb48     37 00 00 FF 
1bb4c     30 E4 85 F1 | 	sub	objptr, ##28208
1bb50     0C 4E 05 F1 | 	add	fp, #12
1bb54     A7 14 02 FB | 	rdlong	arg02, fp
1bb58     0C 4E 85 F1 | 	sub	fp, #12
1bb5c     06 14 66 F0 | 	shl	arg02, #6
1bb60     0A 13 02 F1 | 	add	arg01, arg02
1bb64     2C 12 06 F1 | 	add	arg01, #44
1bb68     09 FF 69 FC | 	wrlong	#255, arg01
1bb6c                 | LR__2180
1bb6c     A7 F0 03 F6 | 	mov	ptra, fp
1bb70     B2 00 A0 FD | 	call	#popregs_
1bb74                 | _do_release_ret
1bb74     2D 00 64 FD | 	ret
1bb78                 | 
1bb78                 | ' 
1bb78                 | ' '------------------- restore
1bb78                 | ' 
1bb78                 | ' sub do_restore()
1bb78                 | _do_restore
1bb78     4A 00 00 FF 
1bb7c     A8 E4 05 F1 | 	add	objptr, ##38056
1bb80     F2 00 02 FB | 	rdlong	_var01, objptr
1bb84     06 00 00 FF 
1bb88     A4 E4 05 F1 | 	add	objptr, ##3236
1bb8c     F2 00 62 FC | 	wrlong	_var01, objptr
1bb90     C4 01 00 FF 
1bb94     50 00 06 F6 | 	mov	_var01, ##@LR__6122
1bb98     01 00 00 FF 
1bb9c     E8 E5 05 F1 | 	add	objptr, ##1000
1bba0     F2 00 62 FC | 	wrlong	_var01, objptr
1bba4     52 00 00 FF 
1bba8     34 E5 85 F1 | 	sub	objptr, ##42292
1bbac                 | _do_restore_ret
1bbac     2D 00 64 FD | 	ret
1bbb0                 | 
1bbb0                 | ' 
1bbb0                 | ' '------------------- restorepalette
1bbb0                 | ' 
1bbb0                 | ' sub do_restorepalette()
1bbb0                 | _do_restorepalette
1bbb0     70 95 B0 FD | 	call	#_hg010b_spin2_restorepalette
1bbb4                 | _do_restorepalette_ret
1bbb4     2D 00 64 FD | 	ret
1bbb8                 | 
1bbb8                 | ' '------------------- return
1bbb8                 | ' 
1bbb8                 | ' sub do_return()
1bbb8                 | _do_return
1bbb8                 | ' if gosubtop>0 then
1bbb8     50 00 00 FF 
1bbbc     54 E5 05 F1 | 	add	objptr, ##41300
1bbc0     F2 00 02 FB | 	rdlong	_var01, objptr
1bbc4     50 00 00 FF 
1bbc8     54 E5 85 F1 | 	sub	objptr, ##41300
1bbcc     01 00 56 F2 | 	cmps	_var01, #1 wc
1bbd0     8C 00 90 CD |  if_b	jmp	#LR__2190
1bbd4     50 00 00 FF 
1bbd8     54 E5 05 F1 | 	add	objptr, ##41300
1bbdc     F2 00 02 FB | 	rdlong	_var01, objptr
1bbe0     03 00 66 F0 | 	shl	_var01, #3
1bbe4     03 00 00 FF 
1bbe8     88 E5 85 F1 | 	sub	objptr, ##1928
1bbec     F2 00 02 F1 | 	add	_var01, objptr
1bbf0     00 01 02 FB | 	rdlong	_var01, _var01
1bbf4     03 00 00 FF 
1bbf8     0C E5 05 F1 | 	add	objptr, ##1804
1bbfc     F2 00 62 FC | 	wrlong	_var01, objptr
1bc00     7C E4 05 F1 | 	add	objptr, #124
1bc04     F2 00 02 FB | 	rdlong	_var01, objptr
1bc08     03 00 66 F0 | 	shl	_var01, #3
1bc0c     03 00 00 FF 
1bc10     88 E5 85 F1 | 	sub	objptr, ##1928
1bc14     F2 00 02 F1 | 	add	_var01, objptr
1bc18     04 00 06 F1 | 	add	_var01, #4
1bc1c     00 01 02 FB | 	rdlong	_var01, _var01
1bc20     03 00 00 FF 
1bc24     10 E5 05 F1 | 	add	objptr, ##1808
1bc28     F2 00 62 FC | 	wrlong	_var01, objptr
1bc2c     06 00 00 FF 
1bc30     40 E4 85 F1 | 	sub	objptr, ##3136
1bc34     F2 00 02 FB | 	rdlong	_var01, objptr
1bc38     01 00 86 F1 | 	sub	_var01, #1
1bc3c     04 E4 05 F1 | 	add	objptr, #4
1bc40     F2 00 62 FC | 	wrlong	_var01, objptr
1bc44     06 00 00 FF 
1bc48     B4 E4 05 F1 | 	add	objptr, ##3252
1bc4c     F2 00 02 FB | 	rdlong	_var01, objptr
1bc50     01 00 86 F1 | 	sub	_var01, #1
1bc54     F2 00 62 FC | 	wrlong	_var01, objptr
1bc58     50 00 00 FF 
1bc5c     54 E5 85 F1 | 	sub	objptr, ##41300
1bc60                 | LR__2190
1bc60                 | _do_return_ret
1bc60     2D 00 64 FD | 	ret
1bc64                 | 
1bc64                 | ' 
1bc64                 | ' '------------------- right$
1bc64                 | ' 
1bc64                 | ' sub do_right
1bc64                 | _do_right
1bc64     00 4A 05 F6 | 	mov	COUNT_, #0
1bc68     A8 00 A0 FD | 	call	#pushregs_
1bc6c     14 F0 07 F1 | 	add	ptra, #20
1bc70     4A 00 00 FF 
1bc74     A0 E4 05 F1 | 	add	objptr, ##38048
1bc78     F2 16 02 FB | 	rdlong	arg03, objptr
1bc7c     0B 15 02 F6 | 	mov	arg02, arg03
1bc80     01 14 66 F0 | 	shl	arg02, #1
1bc84     0B 15 02 F1 | 	add	arg02, arg03
1bc88     02 14 66 F0 | 	shl	arg02, #2
1bc8c     03 00 00 FF 
1bc90     04 E4 85 F1 | 	sub	objptr, ##1540
1bc94     F2 14 02 F1 | 	add	arg02, objptr
1bc98     0A 17 02 FB | 	rdlong	arg03, arg02
1bc9c     0C 4E 05 F1 | 	add	fp, #12
1bca0     A7 16 62 FC | 	wrlong	arg03, fp
1bca4                 | ' 
1bca4                 | ' numpar=compiledline(lineptr_e).result.uresult
1bca4                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
1bca4     0C 4E 85 F1 | 	sub	fp, #12
1bca8     02 16 0E F2 | 	cmp	arg03, #2 wz
1bcac     47 00 00 FF 
1bcb0     9C E4 85 F1 | 	sub	objptr, ##36508
1bcb4     40 00 90 AD |  if_e	jmp	#LR__2200
1bcb8     00 12 06 F6 | 	mov	arg01, #0
1bcbc     04 21 B1 FD | 	call	#__system___getiolock_0620
1bcc0     FD 12 02 F6 | 	mov	arg01, result1
1bcc4     4C C4 B0 FD | 	call	#__system___lockmem
1bcc8     C4 01 00 FF 
1bccc     51 14 06 F6 | 	mov	arg02, ##@LR__6123
1bcd0     00 12 06 F6 | 	mov	arg01, #0
1bcd4     00 16 06 F6 | 	mov	arg03, #0
1bcd8     30 D1 B0 FD | 	call	#__system___basic_print_string
1bcdc     00 12 06 F6 | 	mov	arg01, #0
1bce0     E0 20 B1 FD | 	call	#__system___getiolock_0620
1bce4     FD 00 68 FC | 	wrlong	#0, result1
1bce8     27 12 06 F6 | 	mov	arg01, #39
1bcec     00 14 06 F6 | 	mov	arg02, #0
1bcf0     C8 89 B0 FD | 	call	#_printerror
1bcf4     EC 00 90 FD | 	jmp	#LR__2203
1bcf8                 | LR__2200
1bcf8     24 1B BF FD | 	call	#_pop
1bcfc     FF 16 02 F6 | 	mov	arg03, result3
1bd00     A7 FA 61 FC | 	wrlong	result1, fp
1bd04     04 4E 05 F1 | 	add	fp, #4
1bd08     A7 FC 61 FC | 	wrlong	result2, fp
1bd0c     04 4E 05 F1 | 	add	fp, #4
1bd10     A7 16 62 FC | 	wrlong	arg03, fp
1bd14     08 4E 85 F1 | 	sub	fp, #8
1bd18     A7 12 02 F6 | 	mov	arg01, fp
1bd1c     E4 1C BF FD | 	call	#_converttoint
1bd20     FD 16 02 F6 | 	mov	arg03, result1
1bd24     10 4E 05 F1 | 	add	fp, #16
1bd28     A7 16 62 FC | 	wrlong	arg03, fp
1bd2c     10 4E 85 F1 | 	sub	fp, #16
1bd30     EC 1A BF FD | 	call	#_pop
1bd34     FF 16 02 F6 | 	mov	arg03, result3
1bd38     A7 FA 61 FC | 	wrlong	result1, fp
1bd3c     04 4E 05 F1 | 	add	fp, #4
1bd40     A7 FC 61 FC | 	wrlong	result2, fp
1bd44     04 4E 05 F1 | 	add	fp, #4
1bd48     A7 16 62 FC | 	wrlong	arg03, fp
1bd4c                 | ' t1=pop() : arg=converttoint(t1)
1bd4c                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1bd4c     08 4E 85 F1 | 	sub	fp, #8
1bd50     2B 16 0E F2 | 	cmp	arg03, #43 wz
1bd54     18 00 90 5D |  if_ne	jmp	#LR__2201
1bd58     A7 12 02 FB | 	rdlong	arg01, fp
1bd5c     38 1C BF FD | 	call	#_convertstring
1bd60     A7 FA 61 FC | 	wrlong	result1, fp
1bd64     08 4E 05 F1 | 	add	fp, #8
1bd68     A7 3E 68 FC | 	wrlong	#31, fp
1bd6c     08 4E 85 F1 | 	sub	fp, #8
1bd70                 | LR__2201
1bd70                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
1bd70     08 4E 05 F1 | 	add	fp, #8
1bd74     A7 16 02 FB | 	rdlong	arg03, fp
1bd78     08 4E 85 F1 | 	sub	fp, #8
1bd7c     1F 16 0E F2 | 	cmp	arg03, #31 wz
1bd80     40 00 90 AD |  if_e	jmp	#LR__2202
1bd84     00 12 06 F6 | 	mov	arg01, #0
1bd88     38 20 B1 FD | 	call	#__system___getiolock_0620
1bd8c     FD 12 02 F6 | 	mov	arg01, result1
1bd90     80 C3 B0 FD | 	call	#__system___lockmem
1bd94     C4 01 00 FF 
1bd98     5A 14 06 F6 | 	mov	arg02, ##@LR__6124
1bd9c     00 12 06 F6 | 	mov	arg01, #0
1bda0     00 16 06 F6 | 	mov	arg03, #0
1bda4     64 D0 B0 FD | 	call	#__system___basic_print_string
1bda8     00 12 06 F6 | 	mov	arg01, #0
1bdac     14 20 B1 FD | 	call	#__system___getiolock_0620
1bdb0     FD 00 68 FC | 	wrlong	#0, result1
1bdb4     0F 12 06 F6 | 	mov	arg01, #15
1bdb8     00 14 06 F6 | 	mov	arg02, #0
1bdbc     FC 88 B0 FD | 	call	#_printerror
1bdc0     20 00 90 FD | 	jmp	#LR__2203
1bdc4                 | LR__2202
1bdc4     A7 12 02 FB | 	rdlong	arg01, fp
1bdc8     10 4E 05 F1 | 	add	fp, #16
1bdcc     A7 14 02 FB | 	rdlong	arg02, fp
1bdd0     10 4E 85 F1 | 	sub	fp, #16
1bdd4     44 E4 B0 FD | 	call	#__system__Right_S
1bdd8     A7 FA 61 FC | 	wrlong	result1, fp
1bddc     A7 12 02 F6 | 	mov	arg01, fp
1bde0     D4 1A BF FD | 	call	#_push
1bde4                 | LR__2203
1bde4     A7 F0 03 F6 | 	mov	ptra, fp
1bde8     B2 00 A0 FD | 	call	#popregs_
1bdec                 | _do_right_ret
1bdec     2D 00 64 FD | 	ret
1bdf0                 | 
1bdf0                 | ' 
1bdf0                 | ' '------------------- rnd
1bdf0                 | ' 
1bdf0                 | ' sub do_rnd
1bdf0                 | _do_rnd
1bdf0     01 4A 05 F6 | 	mov	COUNT_, #1
1bdf4     A8 00 A0 FD | 	call	#pushregs_
1bdf8     10 F0 07 F1 | 	add	ptra, #16
1bdfc     4A 00 00 FF 
1be00     A0 E4 05 F1 | 	add	objptr, ##38048
1be04     F2 26 02 FB | 	rdlong	local01, objptr
1be08     13 17 02 F6 | 	mov	arg03, local01
1be0c     01 16 66 F0 | 	shl	arg03, #1
1be10     13 17 02 F1 | 	add	arg03, local01
1be14     02 16 66 F0 | 	shl	arg03, #2
1be18     03 00 00 FF 
1be1c     04 E4 85 F1 | 	sub	objptr, ##1540
1be20     F2 16 02 F1 | 	add	arg03, objptr
1be24     0B 17 02 FB | 	rdlong	arg03, arg03
1be28     0C 4E 05 F1 | 	add	fp, #12
1be2c     A7 16 62 FC | 	wrlong	arg03, fp
1be30                 | ' 
1be30                 | ' numpar=compiledline(lineptr_e).result.uresult
1be30                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
1be30     0C 4E 85 F1 | 	sub	fp, #12
1be34     02 16 16 F2 | 	cmp	arg03, #2 wc
1be38     47 00 00 FF 
1be3c     9C E4 85 F1 | 	sub	objptr, ##36508
1be40     40 00 90 CD |  if_b	jmp	#LR__2210
1be44     00 12 06 F6 | 	mov	arg01, #0
1be48     78 1F B1 FD | 	call	#__system___getiolock_0620
1be4c     FD 12 02 F6 | 	mov	arg01, result1
1be50     C0 C2 B0 FD | 	call	#__system___lockmem
1be54     C4 01 00 FF 
1be58     63 14 06 F6 | 	mov	arg02, ##@LR__6125
1be5c     00 12 06 F6 | 	mov	arg01, #0
1be60     00 16 06 F6 | 	mov	arg03, #0
1be64     A4 CF B0 FD | 	call	#__system___basic_print_string
1be68     00 12 06 F6 | 	mov	arg01, #0
1be6c     54 1F B1 FD | 	call	#__system___getiolock_0620
1be70     FD 00 68 FC | 	wrlong	#0, result1
1be74     27 12 06 F6 | 	mov	arg01, #39
1be78     00 14 06 F6 | 	mov	arg02, #0
1be7c     3C 88 B0 FD | 	call	#_printerror
1be80     30 01 90 FD | 	jmp	#LR__2217
1be84                 | LR__2210
1be84                 | ' if numpar=0 then
1be84     0C 4E 05 F1 | 	add	fp, #12
1be88     A7 FE 09 FB | 	rdlong	result3, fp wz
1be8c     0C 4E 85 F1 | 	sub	fp, #12
1be90     20 00 90 5D |  if_ne	jmp	#LR__2211
1be94     08 4E 05 F1 | 	add	fp, #8
1be98     A7 3A 68 FC | 	wrlong	#29, fp
1be9c     08 4E 85 F1 | 	sub	fp, #8
1bea0     1B FA 61 FD | 	getrnd	result1
1bea4     A7 FA 61 FC | 	wrlong	result1, fp
1bea8     A7 12 02 F6 | 	mov	arg01, fp
1beac     08 1A BF FD | 	call	#_push
1beb0     00 01 90 FD | 	jmp	#LR__2216
1beb4                 | LR__2211
1beb4     68 19 BF FD | 	call	#_pop
1beb8     A7 FA 61 FC | 	wrlong	result1, fp
1bebc     04 4E 05 F1 | 	add	fp, #4
1bec0     A7 FC 61 FC | 	wrlong	result2, fp
1bec4     04 4E 05 F1 | 	add	fp, #4
1bec8     A7 FE 61 FC | 	wrlong	result3, fp
1becc                 | '   t1=pop()
1becc                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
1becc     08 4E 85 F1 | 	sub	fp, #8
1bed0     1C FE 0D F2 | 	cmp	result3, #28 wz
1bed4     08 4E 05 51 |  if_ne	add	fp, #8
1bed8     A7 26 02 5B |  if_ne	rdlong	local01, fp
1bedc     08 4E 85 51 |  if_ne	sub	fp, #8
1bee0     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1bee4     2C 00 90 5D |  if_ne	jmp	#LR__2212
1bee8     1B FA 61 FD | 	getrnd	result1
1beec     A7 26 02 FB | 	rdlong	local01, fp
1bef0     13 FB 11 FD | 	qdiv	result1, local01
1bef4     A7 12 02 F6 | 	mov	arg01, fp
1bef8     19 26 62 FD | 	getqy	local01
1befc     A7 26 62 FC | 	wrlong	local01, fp
1bf00     08 4E 05 F1 | 	add	fp, #8
1bf04     A7 3A 68 FC | 	wrlong	#29, fp
1bf08     08 4E 85 F1 | 	sub	fp, #8
1bf0c     A8 19 BF FD | 	call	#_push
1bf10     A0 00 90 FD | 	jmp	#LR__2215
1bf14                 | LR__2212
1bf14     08 4E 05 F1 | 	add	fp, #8
1bf18     A7 26 02 FB | 	rdlong	local01, fp
1bf1c     08 4E 85 F1 | 	sub	fp, #8
1bf20     1E 26 0E F2 | 	cmp	local01, #30 wz
1bf24     48 00 90 5D |  if_ne	jmp	#LR__2213
1bf28     A7 12 02 FB | 	rdlong	arg01, fp
1bf2c     00 C0 24 FF 
1bf30     00 14 06 F6 | 	mov	arg02, ##1233125376
1bf34     5C F2 B0 FD | 	call	#__system___float_div
1bf38     FD 26 02 F6 | 	mov	local01, result1
1bf3c     1B 12 62 FD | 	getrnd	arg01
1bf40     74 13 06 F4 | 	bitl	arg01, #372
1bf44     44 EC B0 FD | 	call	#__system___float_fromuns
1bf48     FD 14 02 F6 | 	mov	arg02, result1
1bf4c     13 13 02 F6 | 	mov	arg01, local01
1bf50     3C F0 B0 FD | 	call	#__system___float_mul
1bf54     A7 FA 61 FC | 	wrlong	result1, fp
1bf58     08 4E 05 F1 | 	add	fp, #8
1bf5c     A7 3C 68 FC | 	wrlong	#30, fp
1bf60     08 4E 85 F1 | 	sub	fp, #8
1bf64     A7 12 02 F6 | 	mov	arg01, fp
1bf68     4C 19 BF FD | 	call	#_push
1bf6c     44 00 90 FD | 	jmp	#LR__2214
1bf70                 | LR__2213
1bf70                 | '     print "rnd: "; : printerror(40) 
1bf70     00 12 06 F6 | 	mov	arg01, #0
1bf74     4C 1E B1 FD | 	call	#__system___getiolock_0620
1bf78     FD 12 02 F6 | 	mov	arg01, result1
1bf7c     94 C1 B0 FD | 	call	#__system___lockmem
1bf80     C4 01 00 FF 
1bf84     69 14 06 F6 | 	mov	arg02, ##@LR__6126
1bf88     00 12 06 F6 | 	mov	arg01, #0
1bf8c     00 16 06 F6 | 	mov	arg03, #0
1bf90     78 CE B0 FD | 	call	#__system___basic_print_string
1bf94     00 12 06 F6 | 	mov	arg01, #0
1bf98     28 1E B1 FD | 	call	#__system___getiolock_0620
1bf9c     FD 00 68 FC | 	wrlong	#0, result1
1bfa0     28 12 06 F6 | 	mov	arg01, #40
1bfa4     00 14 06 F6 | 	mov	arg02, #0
1bfa8     10 87 B0 FD | 	call	#_printerror
1bfac     A7 12 02 F6 | 	mov	arg01, fp
1bfb0     04 19 BF FD | 	call	#_push
1bfb4                 | LR__2214
1bfb4                 | LR__2215
1bfb4                 | LR__2216
1bfb4                 | LR__2217
1bfb4     A7 F0 03 F6 | 	mov	ptra, fp
1bfb8     B2 00 A0 FD | 	call	#popregs_
1bfbc                 | _do_rnd_ret
1bfbc     2D 00 64 FD | 	ret
1bfc0                 | 
1bfc0                 | ' 
1bfc0                 | ' '-------------------- round
1bfc0                 | ' 
1bfc0                 | ' sub do_round
1bfc0                 | _do_round
1bfc0     00 4A 05 F6 | 	mov	COUNT_, #0
1bfc4     A8 00 A0 FD | 	call	#pushregs_
1bfc8     0C F0 07 F1 | 	add	ptra, #12
1bfcc     50 18 BF FD | 	call	#_pop
1bfd0     A7 FA 61 FC | 	wrlong	result1, fp
1bfd4     04 4E 05 F1 | 	add	fp, #4
1bfd8     A7 FC 61 FC | 	wrlong	result2, fp
1bfdc     04 4E 05 F1 | 	add	fp, #4
1bfe0     A7 FE 61 FC | 	wrlong	result3, fp
1bfe4     08 4E 85 F1 | 	sub	fp, #8
1bfe8     A7 12 02 F6 | 	mov	arg01, fp
1bfec     14 1A BF FD | 	call	#_converttoint
1bff0     A7 FA 61 FC | 	wrlong	result1, fp
1bff4     08 4E 05 F1 | 	add	fp, #8
1bff8     A7 38 68 FC | 	wrlong	#28, fp
1bffc     08 4E 85 F1 | 	sub	fp, #8
1c000     A7 12 02 F6 | 	mov	arg01, fp
1c004     B0 18 BF FD | 	call	#_push
1c008     A7 F0 03 F6 | 	mov	ptra, fp
1c00c     B2 00 A0 FD | 	call	#popregs_
1c010                 | _do_round_ret
1c010     2D 00 64 FD | 	ret
1c014                 | 
1c014                 | ' 
1c014                 | ' '-------------------- rqpin
1c014                 | ' 
1c014                 | ' sub do_rqpin
1c014                 | _do_rqpin
1c014     00 4A 05 F6 | 	mov	COUNT_, #0
1c018     A8 00 A0 FD | 	call	#pushregs_
1c01c     0C F0 07 F1 | 	add	ptra, #12
1c020     FC 17 BF FD | 	call	#_pop
1c024     A7 FA 61 FC | 	wrlong	result1, fp
1c028     04 4E 05 F1 | 	add	fp, #4
1c02c     A7 FC 61 FC | 	wrlong	result2, fp
1c030     04 4E 05 F1 | 	add	fp, #4
1c034     A7 FE 61 FC | 	wrlong	result3, fp
1c038     08 4E 85 F1 | 	sub	fp, #8
1c03c     A7 12 02 F6 | 	mov	arg01, fp
1c040     C0 19 BF FD | 	call	#_converttoint
1c044     FD 12 02 F6 | 	mov	arg01, result1
1c048     00 FA 05 F6 | 	mov	result1, #0
1c04c     09 FB 81 FA | 	rqpin	result1, arg01
1c050     52 00 00 FF 
1c054     68 E5 05 F1 | 	add	objptr, ##42344
1c058     F2 FA 61 FC | 	wrlong	result1, objptr
1c05c     52 00 00 FF 
1c060     68 E5 85 F1 | 	sub	objptr, ##42344
1c064     08 4E 05 F1 | 	add	fp, #8
1c068     A7 3A 68 FC | 	wrlong	#29, fp
1c06c     08 4E 85 F1 | 	sub	fp, #8
1c070     A7 08 68 FC | 	wrlong	#4, fp
1c074     A7 12 02 F6 | 	mov	arg01, fp
1c078     3C 18 BF FD | 	call	#_push
1c07c     A7 F0 03 F6 | 	mov	ptra, fp
1c080     B2 00 A0 FD | 	call	#popregs_
1c084                 | _do_rqpin_ret
1c084     2D 00 64 FD | 	ret
1c088                 | 
1c088                 | ' 
1c088                 | ' ' ------------------ run
1c088                 | ' 
1c088                 | ' sub do_run
1c088                 | _do_run
1c088     04 4A 05 F6 | 	mov	COUNT_, #4
1c08c     A8 00 A0 FD | 	call	#pushregs_
1c090     4A 00 00 FF 
1c094     A0 E4 05 F1 | 	add	objptr, ##38048
1c098     F2 26 02 FB | 	rdlong	local01, objptr
1c09c     06 00 00 FF 
1c0a0     38 E4 05 F1 | 	add	objptr, ##3128
1c0a4     F2 28 02 FB | 	rdlong	local02, objptr
1c0a8     04 E4 05 F1 | 	add	objptr, #4
1c0ac     F2 2A 02 FB | 	rdlong	local03, objptr
1c0b0     13 19 02 F6 | 	mov	arg04, local01
1c0b4     0C 17 02 F6 | 	mov	arg03, arg04
1c0b8     01 16 66 F0 | 	shl	arg03, #1
1c0bc     0C 17 02 F1 | 	add	arg03, arg04
1c0c0     02 16 66 F0 | 	shl	arg03, #2
1c0c4     09 00 00 FF 
1c0c8     40 E4 85 F1 | 	sub	objptr, ##4672
1c0cc     F2 16 02 F1 | 	add	arg03, objptr
1c0d0     0B 15 02 FB | 	rdlong	arg02, arg03
1c0d4                 | ' 
1c0d4                 | ' r_lineptr_e=lineptr_e
1c0d4                 | ' r_runptr=runptr
1c0d4                 | ' r_runptr2=runptr2
1c0d4                 | ' 
1c0d4                 | ' numpar=compiledline(lineptr_e).result.uresult
1c0d4                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
1c0d4     01 14 0E F2 | 	cmp	arg02, #1 wz
1c0d8     47 00 00 FF 
1c0dc     9C E4 85 F1 | 	sub	objptr, ##36508
1c0e0     00 12 06 A6 |  if_e	mov	arg01, #0
1c0e4     0C 98 BF AD |  if_e	call	#_do_load
1c0e8     4A 00 00 FF 
1c0ec     A8 E4 05 F1 | 	add	objptr, ##38056
1c0f0     F2 18 02 FB | 	rdlong	arg04, objptr
1c0f4     06 00 00 FF 
1c0f8     30 E4 05 F1 | 	add	objptr, ##3120
1c0fc     F2 18 62 FC | 	wrlong	arg04, objptr
1c100     04 E4 05 F1 | 	add	objptr, #4
1c104     F2 00 68 FC | 	wrlong	#0, objptr
1c108     04 E4 05 F1 | 	add	objptr, #4
1c10c     FF FF FF FF 
1c110     F2 FE 6B FC | 	wrlong	##-1, objptr
1c114     06 00 00 FF 
1c118     38 E4 85 F1 | 	sub	objptr, ##3128
1c11c     F2 18 02 FB | 	rdlong	arg04, objptr
1c120     06 00 00 FF 
1c124     A4 E4 05 F1 | 	add	objptr, ##3236
1c128     F2 18 62 FC | 	wrlong	arg04, objptr
1c12c     C4 01 00 FF 
1c130     6F 18 06 F6 | 	mov	arg04, ##@LR__6127
1c134     01 00 00 FF 
1c138     E8 E5 05 F1 | 	add	objptr, ##1000
1c13c     F2 18 62 FC | 	wrlong	arg04, objptr
1c140                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
1c140                 | ' dataptr=programstart : readline="" ' reset the data pointer
1c140                 | ' if inrun>0 then 
1c140     02 00 00 FF 
1c144     28 E4 85 F1 | 	sub	objptr, ##1064
1c148     F2 18 02 FB | 	rdlong	arg04, objptr
1c14c     50 00 00 FF 
1c150     0C E5 85 F1 | 	sub	objptr, ##41228
1c154     01 18 16 F2 | 	cmp	arg04, #1 wc
1c158     30 00 90 CD |  if_b	jmp	#LR__2220
1c15c     50 00 00 FF 
1c160     10 E5 05 F1 | 	add	objptr, ##41232
1c164     F2 12 02 F6 | 	mov	arg01, objptr
1c168     38 E4 85 F1 | 	sub	objptr, #56
1c16c     F2 14 02 FB | 	rdlong	arg02, objptr
1c170     18 16 06 F6 | 	mov	arg03, #24
1c174     45 00 00 FF 
1c178     0C E4 85 F1 | 	sub	objptr, ##35340
1c17c     F0 B2 B0 FD | 	call	#_psram_spin2_read1
1c180     0B 00 00 FF 
1c184     CC E4 85 F1 | 	sub	objptr, ##5836
1c188                 | '   psram.read1(varptr(runheader),runptr,24)  
1c188                 | '   return
1c188     0C 03 90 FD | 	jmp	#LR__2227
1c18c                 | LR__2220
1c18c     50 00 00 FF 
1c190     0C E5 05 F1 | 	add	objptr, ##41228
1c194     F2 02 68 FC | 	wrlong	#1, objptr
1c198     04 E4 05 F1 | 	add	objptr, #4
1c19c     F2 12 02 F6 | 	mov	arg01, objptr
1c1a0     38 E4 85 F1 | 	sub	objptr, #56
1c1a4     F2 14 02 FB | 	rdlong	arg02, objptr
1c1a8     18 16 06 F6 | 	mov	arg03, #24
1c1ac     45 00 00 FF 
1c1b0     0C E4 85 F1 | 	sub	objptr, ##35340
1c1b4     B8 B2 B0 FD | 	call	#_psram_spin2_read1
1c1b8                 | ' inrun=1
1c1b8                 | ' psram.read1(varptr(runheader),runptr,24) 
1c1b8                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
1c1b8     45 00 00 FF 
1c1bc     44 E4 05 F1 | 	add	objptr, ##35396
1c1c0     F2 2C 02 FB | 	rdlong	local04, objptr
1c1c4     50 00 00 FF 
1c1c8     10 E5 85 F1 | 	sub	objptr, ##41232
1c1cc     FF FF 7F FF 
1c1d0     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
1c1d4     50 00 00 AF 
1c1d8     0C E5 05 A1 |  if_e	add	objptr, ##41228
1c1dc     F2 00 68 AC |  if_e	wrlong	#0, objptr
1c1e0     50 00 00 AF 
1c1e4     0C E5 85 A1 |  if_e	sub	objptr, ##41228
1c1e8     AC 02 90 AD |  if_e	jmp	#LR__2227
1c1ec                 | ' do 
1c1ec                 | LR__2221
1c1ec                 | '   if runptr<>oldrunptr then
1c1ec     50 00 00 FF 
1c1f0     D8 E4 05 F1 | 	add	objptr, ##41176
1c1f4     F2 2C 02 FB | 	rdlong	local04, objptr
1c1f8     08 E4 05 F1 | 	add	objptr, #8
1c1fc     F2 18 02 FB | 	rdlong	arg04, objptr
1c200     50 00 00 FF 
1c204     E0 E4 85 F1 | 	sub	objptr, ##41184
1c208     0C 2D 0A F2 | 	cmp	local04, arg04 wz
1c20c     CC 00 90 AD |  if_e	jmp	#LR__2222
1c210     50 00 00 FF 
1c214     10 E5 05 F1 | 	add	objptr, ##41232
1c218     F2 12 02 F6 | 	mov	arg01, objptr
1c21c     38 E4 85 F1 | 	sub	objptr, #56
1c220     F2 14 02 FB | 	rdlong	arg02, objptr
1c224     18 16 06 F6 | 	mov	arg03, #24
1c228     45 00 00 FF 
1c22c     0C E4 85 F1 | 	sub	objptr, ##35340
1c230     3C B2 B0 FD | 	call	#_psram_spin2_read1
1c234     3B 00 00 FF 
1c238     D0 E5 05 F1 | 	add	objptr, ##30672
1c23c     F2 12 02 F6 | 	mov	arg01, objptr
1c240     09 00 00 FF 
1c244     3C E4 05 F1 | 	add	objptr, ##4668
1c248     F2 14 02 FB | 	rdlong	arg02, objptr
1c24c     0B 00 00 FF 
1c250     54 E4 85 F1 | 	sub	objptr, ##5716
1c254     F2 2C 02 FB | 	rdlong	local04, objptr
1c258     01 2C 66 F0 | 	shl	local04, #1
1c25c     16 15 02 F1 | 	add	arg02, local04
1c260     0B 00 00 FF 
1c264     94 E4 05 F1 | 	add	objptr, ##5780
1c268     F2 16 02 FB | 	rdlong	arg03, objptr
1c26c     40 E4 85 F1 | 	sub	objptr, #64
1c270     F2 2C 02 FB | 	rdlong	local04, objptr
1c274     16 17 82 F1 | 	sub	arg03, local04
1c278     45 00 00 FF 
1c27c     0C E4 85 F1 | 	sub	objptr, ##35340
1c280     EC B1 B0 FD | 	call	#_psram_spin2_read1
1c284     45 00 00 FF 
1c288     4C E4 05 F1 | 	add	objptr, ##35404
1c28c     F2 2C 02 FB | 	rdlong	local04, objptr
1c290     40 E4 85 F1 | 	sub	objptr, #64
1c294     F2 14 02 FB | 	rdlong	arg02, objptr
1c298     0A 2D 82 F1 | 	sub	local04, arg02
1c29c     0B 00 00 FF 
1c2a0     54 E4 85 F1 | 	sub	objptr, ##5716
1c2a4     F2 14 02 FB | 	rdlong	arg02, objptr
1c2a8     0A 2D 12 FD | 	qdiv	local04, arg02
1c2ac     05 00 00 FF 
1c2b0     18 E4 05 F1 | 	add	objptr, ##2584
1c2b4     18 2C 62 FD | 	getqx	local04
1c2b8     03 2C 86 F1 | 	sub	local04, #3
1c2bc     F2 2C 62 FC | 	wrlong	local04, objptr
1c2c0     06 00 00 FF 
1c2c4     3C E4 05 F1 | 	add	objptr, ##3132
1c2c8     F2 2C 02 FB | 	rdlong	local04, objptr
1c2cc     08 E4 05 F1 | 	add	objptr, #8
1c2d0     F2 2C 62 FC | 	wrlong	local04, objptr
1c2d4     50 00 00 FF 
1c2d8     E0 E4 85 F1 | 	sub	objptr, ##41184
1c2dc                 | LR__2222
1c2dc     50 00 00 FF 
1c2e0     24 E5 05 F1 | 	add	objptr, ##41252
1c2e4     F2 2C 02 FB | 	rdlong	local04, objptr
1c2e8     4C E4 85 F1 | 	sub	objptr, #76
1c2ec     F2 2C 62 FC | 	wrlong	local04, objptr
1c2f0     04 E4 05 F1 | 	add	objptr, #4
1c2f4     F2 12 02 FB | 	rdlong	arg01, objptr
1c2f8     50 00 00 FF 
1c2fc     DC E4 85 F1 | 	sub	objptr, ##41180
1c300     18 14 BF FD | 	call	#_execute_line
1c304     50 00 00 FF 
1c308     DC E4 05 F1 | 	add	objptr, ##41180
1c30c     F2 FA 61 FC | 	wrlong	result1, objptr
1c310     04 E4 85 F1 | 	sub	objptr, #4
1c314     F2 2C 02 FB | 	rdlong	local04, objptr
1c318     50 00 00 FF 
1c31c     D8 E4 85 F1 | 	sub	objptr, ##41176
1c320     FF FF 3F FF 
1c324     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1c328     4C 00 90 AD |  if_e	jmp	#LR__2225
1c32c     E0 12 06 F6 | 	mov	arg01, #224
1c330     CC B4 B0 FD | 	call	#_usbnew_spin2_keystate
1c334     00 FA 0D F2 | 	cmp	result1, #0 wz
1c338     10 00 90 5D |  if_ne	jmp	#LR__2223
1c33c     E4 12 06 F6 | 	mov	arg01, #228
1c340     BC B4 B0 FD | 	call	#_usbnew_spin2_keystate
1c344     00 FA 0D F2 | 	cmp	result1, #0 wz
1c348     10 00 90 AD |  if_e	jmp	#LR__2224
1c34c                 | LR__2223
1c34c     06 12 06 F6 | 	mov	arg01, #6
1c350     AC B4 B0 FD | 	call	#_usbnew_spin2_keystate
1c354     00 FA 0D F2 | 	cmp	result1, #0 wz
1c358     1C 00 90 5D |  if_ne	jmp	#LR__2225
1c35c                 | LR__2224
1c35c     50 00 00 FF 
1c360     0C E5 05 F1 | 	add	objptr, ##41228
1c364     F2 2C 02 FB | 	rdlong	local04, objptr
1c368     50 00 00 FF 
1c36c     0C E5 85 F1 | 	sub	objptr, ##41228
1c370     02 2C 0E F2 | 	cmp	local04, #2 wz
1c374     74 FE 9F 5D |  if_ne	jmp	#LR__2221
1c378                 | LR__2225
1c378                 | '   ''do whatever kbm.peek_latest_key()=$106 
1c378                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
1c378     50 00 00 FF 
1c37c     D8 E4 05 F1 | 	add	objptr, ##41176
1c380     F2 2C 02 FB | 	rdlong	local04, objptr
1c384     50 00 00 FF 
1c388     D8 E4 85 F1 | 	sub	objptr, ##41176
1c38c     FF FF 3F FF 
1c390     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1c394     AC 00 90 AD |  if_e	jmp	#LR__2226
1c398     50 00 00 FF 
1c39c     0C E5 05 F1 | 	add	objptr, ##41228
1c3a0     F2 2C 02 FB | 	rdlong	local04, objptr
1c3a4     50 00 00 FF 
1c3a8     0C E5 85 F1 | 	sub	objptr, ##41228
1c3ac     01 2C 0E F2 | 	cmp	local04, #1 wz
1c3b0     90 00 90 5D |  if_ne	jmp	#LR__2226
1c3b4                 | '   print: print "Stopped at line ";runheader(0) 
1c3b4     00 12 06 F6 | 	mov	arg01, #0
1c3b8     08 1A B1 FD | 	call	#__system___getiolock_0620
1c3bc     FD 12 02 F6 | 	mov	arg01, result1
1c3c0     50 BD B0 FD | 	call	#__system___lockmem
1c3c4     00 12 06 F6 | 	mov	arg01, #0
1c3c8     0A 14 06 F6 | 	mov	arg02, #10
1c3cc     00 16 06 F6 | 	mov	arg03, #0
1c3d0     E0 C9 B0 FD | 	call	#__system___basic_print_char
1c3d4     00 12 06 F6 | 	mov	arg01, #0
1c3d8     E8 19 B1 FD | 	call	#__system___getiolock_0620
1c3dc     FD 00 68 FC | 	wrlong	#0, result1
1c3e0     00 12 06 F6 | 	mov	arg01, #0
1c3e4     DC 19 B1 FD | 	call	#__system___getiolock_0620
1c3e8     FD 12 02 F6 | 	mov	arg01, result1
1c3ec     24 BD B0 FD | 	call	#__system___lockmem
1c3f0     C4 01 00 FF 
1c3f4     70 14 06 F6 | 	mov	arg02, ##@LR__6128
1c3f8     00 12 06 F6 | 	mov	arg01, #0
1c3fc     00 16 06 F6 | 	mov	arg03, #0
1c400     08 CA B0 FD | 	call	#__system___basic_print_string
1c404     50 00 00 FF 
1c408     10 E5 05 F1 | 	add	objptr, ##41232
1c40c     F2 14 02 FB | 	rdlong	arg02, objptr
1c410     50 00 00 FF 
1c414     10 E5 85 F1 | 	sub	objptr, ##41232
1c418     00 12 06 F6 | 	mov	arg01, #0
1c41c     00 16 06 F6 | 	mov	arg03, #0
1c420     0A 18 06 F6 | 	mov	arg04, #10
1c424     68 CA B0 FD | 	call	#__system___basic_print_unsigned
1c428     00 12 06 F6 | 	mov	arg01, #0
1c42c     0A 14 06 F6 | 	mov	arg02, #10
1c430     00 16 06 F6 | 	mov	arg03, #0
1c434     7C C9 B0 FD | 	call	#__system___basic_print_char
1c438     00 12 06 F6 | 	mov	arg01, #0
1c43c     84 19 B1 FD | 	call	#__system___getiolock_0620
1c440     FD 00 68 FC | 	wrlong	#0, result1
1c444                 | LR__2226
1c444     50 00 00 FF 
1c448     0C E5 05 F1 | 	add	objptr, ##41228
1c44c     F2 00 68 FC | 	wrlong	#0, objptr
1c450     06 00 00 FF 
1c454     6C E4 85 F1 | 	sub	objptr, ##3180
1c458     F2 26 62 FC | 	wrlong	local01, objptr
1c45c     06 00 00 FF 
1c460     38 E4 05 F1 | 	add	objptr, ##3128
1c464     F2 28 62 FC | 	wrlong	local02, objptr
1c468     04 E4 05 F1 | 	add	objptr, #4
1c46c     F2 2A 62 FC | 	wrlong	local03, objptr
1c470     50 00 00 FF 
1c474     DC E4 85 F1 | 	sub	objptr, ##41180
1c478     11 12 06 F6 | 	mov	arg01, #17
1c47c     08 14 06 F6 | 	mov	arg02, #8
1c480     10 16 06 F6 | 	mov	arg03, #16
1c484     9C 92 B0 FD | 	call	#_hg010b_spin2_setspritesize
1c488     10 12 06 F6 | 	mov	arg01, #16
1c48c     20 14 06 F6 | 	mov	arg02, #32
1c490     20 16 06 F6 | 	mov	arg03, #32
1c494     8C 92 B0 FD | 	call	#_hg010b_spin2_setspritesize
1c498                 | LR__2227
1c498     A7 F0 03 F6 | 	mov	ptra, fp
1c49c     B2 00 A0 FD | 	call	#popregs_
1c4a0                 | _do_run_ret
1c4a0     2D 00 64 FD | 	ret
1c4a4                 | 
1c4a4                 | ' 
1c4a4                 | ' ' ------------------ save
1c4a4                 | ' 
1c4a4                 | ' sub do_save                        
1c4a4                 | _do_save
1c4a4     04 4A 05 F6 | 	mov	COUNT_, #4
1c4a8     A8 00 A0 FD | 	call	#pushregs_
1c4ac     B8 F0 07 F1 | 	add	ptra, #184
1c4b0     4A 00 00 FF 
1c4b4     A0 E4 05 F1 | 	add	objptr, ##38048
1c4b8     F2 26 02 FB | 	rdlong	local01, objptr
1c4bc     13 29 02 F6 | 	mov	local02, local01
1c4c0     01 28 66 F0 | 	shl	local02, #1
1c4c4     13 29 02 F1 | 	add	local02, local01
1c4c8     02 28 66 F0 | 	shl	local02, #2
1c4cc     03 00 00 FF 
1c4d0     04 E4 85 F1 | 	sub	objptr, ##1540
1c4d4     F2 28 02 F1 | 	add	local02, objptr
1c4d8     14 2B 02 FB | 	rdlong	local03, local02
1c4dc     10 4E 05 F1 | 	add	fp, #16
1c4e0     A7 2A 62 FC | 	wrlong	local03, fp
1c4e4                 | ' 
1c4e4                 | ' numpar=compiledline(lineptr_e).result.uresult
1c4e4                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1c4e4     10 4E 85 F1 | 	sub	fp, #16
1c4e8     01 2A 56 F2 | 	cmps	local03, #1 wc
1c4ec     47 00 00 FF 
1c4f0     9C E4 85 F1 | 	sub	objptr, ##36508
1c4f4     20 00 90 CD |  if_b	jmp	#LR__2230
1c4f8     24 13 BF FD | 	call	#_pop
1c4fc     A7 FA 61 FC | 	wrlong	result1, fp
1c500     04 4E 05 F1 | 	add	fp, #4
1c504     A7 FC 61 FC | 	wrlong	result2, fp
1c508     04 4E 05 F1 | 	add	fp, #4
1c50c     A7 FE 61 FC | 	wrlong	result3, fp
1c510     08 4E 85 F1 | 	sub	fp, #8
1c514     24 00 90 FD | 	jmp	#LR__2231
1c518                 | LR__2230
1c518     52 00 00 FF 
1c51c     1C E5 05 F1 | 	add	objptr, ##42268
1c520     F2 2A 02 FB | 	rdlong	local03, objptr
1c524     52 00 00 FF 
1c528     1C E5 85 F1 | 	sub	objptr, ##42268
1c52c     A7 2A 62 FC | 	wrlong	local03, fp
1c530     08 4E 05 F1 | 	add	fp, #8
1c534     A7 3E 68 FC | 	wrlong	#31, fp
1c538     08 4E 85 F1 | 	sub	fp, #8
1c53c                 | LR__2231
1c53c                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
1c53c     4A 00 00 FF 
1c540     A8 E4 05 F1 | 	add	objptr, ##38056
1c544     F2 12 02 FB | 	rdlong	arg01, objptr
1c548     4A 00 00 FF 
1c54c     A8 E4 85 F1 | 	sub	objptr, ##38056
1c550     38 84 B0 FD | 	call	#_pslpeek
1c554     FF FF 7F FF 
1c558     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1c55c     10 00 90 5D |  if_ne	jmp	#LR__2232
1c560     1B 12 06 F6 | 	mov	arg01, #27
1c564     00 14 06 F6 | 	mov	arg02, #0
1c568     50 81 B0 FD | 	call	#_printerror
1c56c     CC 02 90 FD | 	jmp	#LR__2238
1c570                 | LR__2232
1c570                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1c570     08 4E 05 F1 | 	add	fp, #8
1c574     A7 2A 02 FB | 	rdlong	local03, fp
1c578     08 4E 85 F1 | 	sub	fp, #8
1c57c     2B 2A 0E F2 | 	cmp	local03, #43 wz
1c580     18 00 90 5D |  if_ne	jmp	#LR__2233
1c584     A7 12 02 FB | 	rdlong	arg01, fp
1c588     0C 14 BF FD | 	call	#_convertstring
1c58c     A7 FA 61 FC | 	wrlong	result1, fp
1c590     08 4E 05 F1 | 	add	fp, #8
1c594     A7 3E 68 FC | 	wrlong	#31, fp
1c598     08 4E 85 F1 | 	sub	fp, #8
1c59c                 | LR__2233
1c59c                 | ' if t1.result_type=result_string then
1c59c     08 4E 05 F1 | 	add	fp, #8
1c5a0     A7 2A 02 FB | 	rdlong	local03, fp
1c5a4     08 4E 85 F1 | 	sub	fp, #8
1c5a8     1F 2A 0E F2 | 	cmp	local03, #31 wz
1c5ac     8C 02 90 5D |  if_ne	jmp	#LR__2237
1c5b0                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1c5b0     A7 12 02 FB | 	rdlong	arg01, fp
1c5b4     C4 01 00 FF 
1c5b8     81 14 06 F6 | 	mov	arg02, ##@LR__6129
1c5bc     7C BB B0 FD | 	call	#__system___string_cmp
1c5c0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c5c4     52 00 00 AF 
1c5c8     1C E5 05 A1 |  if_e	add	objptr, ##42268
1c5cc     F2 2A 02 AB |  if_e	rdlong	local03, objptr
1c5d0     A7 2A 62 AC |  if_e	wrlong	local03, fp
1c5d4     52 00 00 AF 
1c5d8     1C E5 85 A1 |  if_e	sub	objptr, ##42268
1c5dc     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1c5e0     52 00 00 5F 
1c5e4     1C E5 05 51 |  if_ne	add	objptr, ##42268
1c5e8     F2 2A 62 5C |  if_ne	wrlong	local03, objptr
1c5ec     52 00 00 5F 
1c5f0     1C E5 85 51 |  if_ne	sub	objptr, ##42268
1c5f4                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
1c5f4     09 12 06 F6 | 	mov	arg01, #9
1c5f8     78 0E B1 FD | 	call	#__system__close
1c5fc     09 2A 06 F6 | 	mov	local03, #9
1c600     4A 00 00 FF 
1c604     B4 E4 05 F1 | 	add	objptr, ##38068
1c608     F2 12 02 FB | 	rdlong	arg01, objptr
1c60c     4A 00 00 FF 
1c610     B4 E4 85 F1 | 	sub	objptr, ##38068
1c614     C4 01 00 FF 
1c618     82 14 06 F6 | 	mov	arg02, ##@LR__6130
1c61c     50 BB B0 FD | 	call	#__system___string_concat
1c620     FD 12 02 F6 | 	mov	arg01, result1
1c624     A7 14 02 FB | 	rdlong	arg02, fp
1c628     44 BB B0 FD | 	call	#__system___string_concat
1c62c     FD 14 02 F6 | 	mov	arg02, result1
1c630     15 13 02 F6 | 	mov	arg01, local03
1c634     0D 16 06 F6 | 	mov	arg03, #13
1c638     DC C6 B0 FD | 	call	#__system___basic_open_string
1c63c     4A 00 00 FF 
1c640     A8 E4 05 F1 | 	add	objptr, ##38056
1c644     F2 2A 02 FB | 	rdlong	local03, objptr
1c648     4A 00 00 FF 
1c64c     A8 E4 85 F1 | 	sub	objptr, ##38056
1c650     B0 4E 05 F1 | 	add	fp, #176
1c654     A7 2A 62 FC | 	wrlong	local03, fp
1c658     B0 4E 85 F1 | 	sub	fp, #176
1c65c                 | '   saveptr=programstart
1c65c                 | '   do
1c65c                 | LR__2234
1c65c     14 4E 05 F1 | 	add	fp, #20
1c660     A7 12 02 F6 | 	mov	arg01, fp
1c664     9C 4E 05 F1 | 	add	fp, #156
1c668     A7 14 02 FB | 	rdlong	arg02, fp
1c66c     B0 4E 85 F1 | 	sub	fp, #176
1c670     18 16 06 F6 | 	mov	arg03, #24
1c674     0B 00 00 FF 
1c678     CC E4 05 F1 | 	add	objptr, ##5836
1c67c     F0 AD B0 FD | 	call	#_psram_spin2_read1
1c680     2C 4E 05 F1 | 	add	fp, #44
1c684     A7 12 02 F6 | 	mov	arg01, fp
1c688     10 4E 85 F1 | 	sub	fp, #16
1c68c     A7 14 02 FB | 	rdlong	arg02, fp
1c690     04 4E 05 F1 | 	add	fp, #4
1c694     A7 16 02 FB | 	rdlong	arg03, fp
1c698     20 4E 85 F1 | 	sub	fp, #32
1c69c     D0 AD B0 FD | 	call	#_psram_spin2_read1
1c6a0     0B 00 00 FF 
1c6a4     CC E4 85 F1 | 	sub	objptr, ##5836
1c6a8     C4 01 00 FF 
1c6ac     84 2A 06 F6 | 	mov	local03, ##@LR__6131
1c6b0     AC 4E 05 F1 | 	add	fp, #172
1c6b4     A7 2A 62 FC | 	wrlong	local03, fp
1c6b8                 | '     psram.read1(varptr(header(0)),saveptr,24)
1c6b8                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
1c6b8                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
1c6b8     A0 4E 85 F1 | 	sub	fp, #160
1c6bc     A7 02 68 FC | 	wrlong	#1, fp
1c6c0     14 4E 05 F1 | 	add	fp, #20
1c6c4     A7 2C 02 FB | 	rdlong	local04, fp
1c6c8     20 4E 85 F1 | 	sub	fp, #32
1c6cc     01 2C 06 F1 | 	add	local04, #1
1c6d0                 | LR__2235
1c6d0     0C 4E 05 F1 | 	add	fp, #12
1c6d4     A7 2A 02 FB | 	rdlong	local03, fp
1c6d8     0C 4E 85 F1 | 	sub	fp, #12
1c6dc     16 2B 52 F2 | 	cmps	local03, local04 wc
1c6e0     54 00 90 3D |  if_ae	jmp	#LR__2236
1c6e4     AC 4E 05 F1 | 	add	fp, #172
1c6e8     A7 26 02 FB | 	rdlong	local01, fp
1c6ec     A0 4E 85 F1 | 	sub	fp, #160
1c6f0     A7 2A 02 FB | 	rdlong	local03, fp
1c6f4     01 2A 86 F1 | 	sub	local03, #1
1c6f8     20 4E 05 F1 | 	add	fp, #32
1c6fc     A7 2A 02 F1 | 	add	local03, fp
1c700     15 13 C2 FA | 	rdbyte	arg01, local03
1c704     2C 4E 85 F1 | 	sub	fp, #44
1c708     4C DC B0 FD | 	call	#__system__Chr_S
1c70c     FD 14 02 F6 | 	mov	arg02, result1
1c710     13 13 02 F6 | 	mov	arg01, local01
1c714     58 BA B0 FD | 	call	#__system___string_concat
1c718     AC 4E 05 F1 | 	add	fp, #172
1c71c     A7 FA 61 FC | 	wrlong	result1, fp
1c720     A0 4E 85 F1 | 	sub	fp, #160
1c724     A7 2A 02 FB | 	rdlong	local03, fp
1c728     01 2A 06 F1 | 	add	local03, #1
1c72c     A7 2A 62 FC | 	wrlong	local03, fp
1c730     0C 4E 85 F1 | 	sub	fp, #12
1c734     98 FF 9F FD | 	jmp	#LR__2235
1c738                 | LR__2236
1c738                 | '     print #9, saveline$
1c738     09 12 06 F6 | 	mov	arg01, #9
1c73c     84 16 B1 FD | 	call	#__system___getiolock_0620
1c740     FD 12 02 F6 | 	mov	arg01, result1
1c744     CC B9 B0 FD | 	call	#__system___lockmem
1c748     AC 4E 05 F1 | 	add	fp, #172
1c74c     A7 14 02 FB | 	rdlong	arg02, fp
1c750     AC 4E 85 F1 | 	sub	fp, #172
1c754     09 12 06 F6 | 	mov	arg01, #9
1c758     00 16 06 F6 | 	mov	arg03, #0
1c75c     AC C6 B0 FD | 	call	#__system___basic_print_string
1c760     09 12 06 F6 | 	mov	arg01, #9
1c764     0A 14 06 F6 | 	mov	arg02, #10
1c768     00 16 06 F6 | 	mov	arg03, #0
1c76c     44 C6 B0 FD | 	call	#__system___basic_print_char
1c770     09 12 06 F6 | 	mov	arg01, #9
1c774     4C 16 B1 FD | 	call	#__system___getiolock_0620
1c778     FD 00 68 FC | 	wrlong	#0, result1
1c77c     28 4E 05 F1 | 	add	fp, #40
1c780     A7 2A 02 FB | 	rdlong	local03, fp
1c784     88 4E 05 F1 | 	add	fp, #136
1c788     A7 2A 62 FC | 	wrlong	local03, fp
1c78c     88 4E 85 F1 | 	sub	fp, #136
1c790     A7 2A 02 FB | 	rdlong	local03, fp
1c794     28 4E 85 F1 | 	sub	fp, #40
1c798     FF FF 3F FF 
1c79c     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
1c7a0     B8 FE 9F 5D |  if_ne	jmp	#LR__2234
1c7a4                 | '   close #9  
1c7a4     09 12 06 F6 | 	mov	arg01, #9
1c7a8     C8 0C B1 FD | 	call	#__system__close
1c7ac                 | '   print "Saved as ";currentdir$+"/"+loadname
1c7ac     00 12 06 F6 | 	mov	arg01, #0
1c7b0     10 16 B1 FD | 	call	#__system___getiolock_0620
1c7b4     FD 12 02 F6 | 	mov	arg01, result1
1c7b8     58 B9 B0 FD | 	call	#__system___lockmem
1c7bc     C4 01 00 FF 
1c7c0     85 14 06 F6 | 	mov	arg02, ##@LR__6132
1c7c4     00 12 06 F6 | 	mov	arg01, #0
1c7c8     00 16 06 F6 | 	mov	arg03, #0
1c7cc     3C C6 B0 FD | 	call	#__system___basic_print_string
1c7d0     00 28 06 F6 | 	mov	local02, #0
1c7d4     4A 00 00 FF 
1c7d8     B4 E4 05 F1 | 	add	objptr, ##38068
1c7dc     F2 12 02 FB | 	rdlong	arg01, objptr
1c7e0     4A 00 00 FF 
1c7e4     B4 E4 85 F1 | 	sub	objptr, ##38068
1c7e8     C4 01 00 FF 
1c7ec     8F 14 06 F6 | 	mov	arg02, ##@LR__6133
1c7f0     7C B9 B0 FD | 	call	#__system___string_concat
1c7f4     FD 12 02 F6 | 	mov	arg01, result1
1c7f8     52 00 00 FF 
1c7fc     1C E5 05 F1 | 	add	objptr, ##42268
1c800     F2 14 02 FB | 	rdlong	arg02, objptr
1c804     52 00 00 FF 
1c808     1C E5 85 F1 | 	sub	objptr, ##42268
1c80c     60 B9 B0 FD | 	call	#__system___string_concat
1c810     FD 14 02 F6 | 	mov	arg02, result1
1c814     14 13 02 F6 | 	mov	arg01, local02
1c818     00 16 06 F6 | 	mov	arg03, #0
1c81c     EC C5 B0 FD | 	call	#__system___basic_print_string
1c820     00 12 06 F6 | 	mov	arg01, #0
1c824     0A 14 06 F6 | 	mov	arg02, #10
1c828     00 16 06 F6 | 	mov	arg03, #0
1c82c     84 C5 B0 FD | 	call	#__system___basic_print_char
1c830     00 12 06 F6 | 	mov	arg01, #0
1c834     8C 15 B1 FD | 	call	#__system___getiolock_0620
1c838     FD 00 68 FC | 	wrlong	#0, result1
1c83c                 | LR__2237
1c83c                 | LR__2238
1c83c     A7 F0 03 F6 | 	mov	ptra, fp
1c840     B2 00 A0 FD | 	call	#popregs_
1c844                 | _do_save_ret
1c844     2D 00 64 FD | 	ret
1c848                 | 
1c848                 | ' 
1c848                 | ' ' ------------------ setcolor
1c848                 | ' 
1c848                 | ' sub do_setcolor
1c848                 | _do_setcolor
1c848     00 4A 05 F6 | 	mov	COUNT_, #0
1c84c     A8 00 A0 FD | 	call	#pushregs_
1c850     20 F0 07 F1 | 	add	ptra, #32
1c854     4A 00 00 FF 
1c858     A0 E4 05 F1 | 	add	objptr, ##38048
1c85c     F2 18 02 FB | 	rdlong	arg04, objptr
1c860     0C 17 02 F6 | 	mov	arg03, arg04
1c864     01 16 66 F0 | 	shl	arg03, #1
1c868     0C 17 02 F1 | 	add	arg03, arg04
1c86c     02 16 66 F0 | 	shl	arg03, #2
1c870     03 00 00 FF 
1c874     04 E4 85 F1 | 	sub	objptr, ##1540
1c878     F2 16 02 F1 | 	add	arg03, objptr
1c87c     0B 19 02 FB | 	rdlong	arg04, arg03
1c880     1C 4E 05 F1 | 	add	fp, #28
1c884     A7 18 62 FC | 	wrlong	arg04, fp
1c888                 | ' 
1c888                 | ' numpar=compiledline(lineptr_e).result.uresult
1c888                 | ' 
1c888                 | ' if numpar=4 then
1c888     1C 4E 85 F1 | 	sub	fp, #28
1c88c     04 18 0E F2 | 	cmp	arg04, #4 wz
1c890     47 00 00 FF 
1c894     9C E4 85 F1 | 	sub	objptr, ##36508
1c898     E0 00 90 5D |  if_ne	jmp	#LR__2240
1c89c     80 0F BF FD | 	call	#_pop
1c8a0     FF 18 02 F6 | 	mov	arg04, result3
1c8a4     A7 FA 61 FC | 	wrlong	result1, fp
1c8a8     04 4E 05 F1 | 	add	fp, #4
1c8ac     A7 FC 61 FC | 	wrlong	result2, fp
1c8b0     04 4E 05 F1 | 	add	fp, #4
1c8b4     A7 18 62 FC | 	wrlong	arg04, fp
1c8b8     08 4E 85 F1 | 	sub	fp, #8
1c8bc     A7 12 02 F6 | 	mov	arg01, fp
1c8c0     40 11 BF FD | 	call	#_converttoint
1c8c4     FD 18 02 F6 | 	mov	arg04, result1
1c8c8     14 4E 05 F1 | 	add	fp, #20
1c8cc     A7 18 62 FC | 	wrlong	arg04, fp
1c8d0     14 4E 85 F1 | 	sub	fp, #20
1c8d4     48 0F BF FD | 	call	#_pop
1c8d8     FF 18 02 F6 | 	mov	arg04, result3
1c8dc     A7 FA 61 FC | 	wrlong	result1, fp
1c8e0     04 4E 05 F1 | 	add	fp, #4
1c8e4     A7 FC 61 FC | 	wrlong	result2, fp
1c8e8     04 4E 05 F1 | 	add	fp, #4
1c8ec     A7 18 62 FC | 	wrlong	arg04, fp
1c8f0     08 4E 85 F1 | 	sub	fp, #8
1c8f4     A7 12 02 F6 | 	mov	arg01, fp
1c8f8     08 11 BF FD | 	call	#_converttoint
1c8fc     FD 18 02 F6 | 	mov	arg04, result1
1c900     10 4E 05 F1 | 	add	fp, #16
1c904     A7 18 62 FC | 	wrlong	arg04, fp
1c908     10 4E 85 F1 | 	sub	fp, #16
1c90c     10 0F BF FD | 	call	#_pop
1c910     FF 18 02 F6 | 	mov	arg04, result3
1c914     A7 FA 61 FC | 	wrlong	result1, fp
1c918     04 4E 05 F1 | 	add	fp, #4
1c91c     A7 FC 61 FC | 	wrlong	result2, fp
1c920     04 4E 05 F1 | 	add	fp, #4
1c924     A7 18 62 FC | 	wrlong	arg04, fp
1c928     08 4E 85 F1 | 	sub	fp, #8
1c92c     A7 12 02 F6 | 	mov	arg01, fp
1c930     D0 10 BF FD | 	call	#_converttoint
1c934     FD 18 02 F6 | 	mov	arg04, result1
1c938     0C 4E 05 F1 | 	add	fp, #12
1c93c     A7 18 62 FC | 	wrlong	arg04, fp
1c940     0C 4E 85 F1 | 	sub	fp, #12
1c944     D8 0E BF FD | 	call	#_pop
1c948     FF 18 02 F6 | 	mov	arg04, result3
1c94c     A7 FA 61 FC | 	wrlong	result1, fp
1c950     04 4E 05 F1 | 	add	fp, #4
1c954     A7 FC 61 FC | 	wrlong	result2, fp
1c958     04 4E 05 F1 | 	add	fp, #4
1c95c     A7 18 62 FC | 	wrlong	arg04, fp
1c960     08 4E 85 F1 | 	sub	fp, #8
1c964     A7 12 02 F6 | 	mov	arg01, fp
1c968     98 10 BF FD | 	call	#_converttoint
1c96c     18 4E 05 F1 | 	add	fp, #24
1c970     A7 FA 61 FC | 	wrlong	result1, fp
1c974     18 4E 85 F1 | 	sub	fp, #24
1c978     04 01 90 FD | 	jmp	#LR__2243
1c97c                 | LR__2240
1c97c     1C 4E 05 F1 | 	add	fp, #28
1c980     A7 18 02 FB | 	rdlong	arg04, fp
1c984     1C 4E 85 F1 | 	sub	fp, #28
1c988     02 18 0E F2 | 	cmp	arg04, #2 wz
1c98c     A0 00 90 5D |  if_ne	jmp	#LR__2241
1c990     8C 0E BF FD | 	call	#_pop
1c994     FF 18 02 F6 | 	mov	arg04, result3
1c998     A7 FA 61 FC | 	wrlong	result1, fp
1c99c     04 4E 05 F1 | 	add	fp, #4
1c9a0     A7 FC 61 FC | 	wrlong	result2, fp
1c9a4     04 4E 05 F1 | 	add	fp, #4
1c9a8     A7 18 62 FC | 	wrlong	arg04, fp
1c9ac     08 4E 85 F1 | 	sub	fp, #8
1c9b0     A7 12 02 F6 | 	mov	arg01, fp
1c9b4     4C 10 BF FD | 	call	#_converttoint
1c9b8     18 4E 05 F1 | 	add	fp, #24
1c9bc     A7 FA 61 FC | 	wrlong	result1, fp
1c9c0     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c9c4     04 4E 85 F1 | 	sub	fp, #4
1c9c8     A7 FA 61 FC | 	wrlong	result1, fp
1c9cc     04 4E 05 F1 | 	add	fp, #4
1c9d0     A7 18 02 FB | 	rdlong	arg04, fp
1c9d4     0C 19 EA F8 | 	getbyte	arg04, arg04, #1
1c9d8     08 4E 85 F1 | 	sub	fp, #8
1c9dc     A7 18 62 FC | 	wrlong	arg04, fp
1c9e0     08 4E 05 F1 | 	add	fp, #8
1c9e4     A7 18 02 FB | 	rdlong	arg04, fp
1c9e8     0C 19 F2 F8 | 	getbyte	arg04, arg04, #2
1c9ec     0C 4E 85 F1 | 	sub	fp, #12
1c9f0     A7 18 62 FC | 	wrlong	arg04, fp
1c9f4     0C 4E 85 F1 | 	sub	fp, #12
1c9f8     24 0E BF FD | 	call	#_pop
1c9fc     FF 18 02 F6 | 	mov	arg04, result3
1ca00     A7 FA 61 FC | 	wrlong	result1, fp
1ca04     04 4E 05 F1 | 	add	fp, #4
1ca08     A7 FC 61 FC | 	wrlong	result2, fp
1ca0c     04 4E 05 F1 | 	add	fp, #4
1ca10     A7 18 62 FC | 	wrlong	arg04, fp
1ca14     08 4E 85 F1 | 	sub	fp, #8
1ca18     A7 12 02 F6 | 	mov	arg01, fp
1ca1c     E4 0F BF FD | 	call	#_converttoint
1ca20     18 4E 05 F1 | 	add	fp, #24
1ca24     A7 FA 61 FC | 	wrlong	result1, fp
1ca28     18 4E 85 F1 | 	sub	fp, #24
1ca2c     50 00 90 FD | 	jmp	#LR__2242
1ca30                 | LR__2241
1ca30                 | '   print "setcolor: "; : printerror(39,runheader(0)) : return  
1ca30     00 12 06 F6 | 	mov	arg01, #0
1ca34     8C 13 B1 FD | 	call	#__system___getiolock_0620
1ca38     FD 12 02 F6 | 	mov	arg01, result1
1ca3c     D4 B6 B0 FD | 	call	#__system___lockmem
1ca40     C4 01 00 FF 
1ca44     91 14 06 F6 | 	mov	arg02, ##@LR__6134
1ca48     00 12 06 F6 | 	mov	arg01, #0
1ca4c     00 16 06 F6 | 	mov	arg03, #0
1ca50     B8 C3 B0 FD | 	call	#__system___basic_print_string
1ca54     00 12 06 F6 | 	mov	arg01, #0
1ca58     68 13 B1 FD | 	call	#__system___getiolock_0620
1ca5c     FD 00 68 FC | 	wrlong	#0, result1
1ca60     50 00 00 FF 
1ca64     10 E5 05 F1 | 	add	objptr, ##41232
1ca68     F2 14 02 FB | 	rdlong	arg02, objptr
1ca6c     50 00 00 FF 
1ca70     10 E5 85 F1 | 	sub	objptr, ##41232
1ca74     27 12 06 F6 | 	mov	arg01, #39
1ca78     40 7C B0 FD | 	call	#_printerror
1ca7c     28 00 90 FD | 	jmp	#LR__2244
1ca80                 | LR__2242
1ca80                 | LR__2243
1ca80     18 4E 05 F1 | 	add	fp, #24
1ca84     A7 12 02 FB | 	rdlong	arg01, fp
1ca88     0C 4E 85 F1 | 	sub	fp, #12
1ca8c     A7 14 02 FB | 	rdlong	arg02, fp
1ca90     04 4E 05 F1 | 	add	fp, #4
1ca94     A7 16 02 FB | 	rdlong	arg03, fp
1ca98     04 4E 05 F1 | 	add	fp, #4
1ca9c     A7 18 02 FB | 	rdlong	arg04, fp
1caa0     14 4E 85 F1 | 	sub	fp, #20
1caa4     E0 99 B0 FD | 	call	#_hg010b_spin2_setcolor
1caa8                 | LR__2244
1caa8     A7 F0 03 F6 | 	mov	ptra, fp
1caac     B2 00 A0 FD | 	call	#popregs_
1cab0                 | _do_setcolor_ret
1cab0     2D 00 64 FD | 	ret
1cab4                 | 
1cab4                 | ' 
1cab4                 | ' ' ------------------ setdelay
1cab4                 | ' 
1cab4                 | ' sub do_setdelay
1cab4                 | _do_setdelay
1cab4     02 4A 05 F6 | 	mov	COUNT_, #2
1cab8     A8 00 A0 FD | 	call	#pushregs_
1cabc     18 F0 07 F1 | 	add	ptra, #24
1cac0     5C 0D BF FD | 	call	#_pop
1cac4     FD 12 02 F6 | 	mov	arg01, result1
1cac8     FE 26 02 F6 | 	mov	local01, result2
1cacc     FF 28 02 F6 | 	mov	local02, result3
1cad0     A7 12 62 FC | 	wrlong	arg01, fp
1cad4     04 4E 05 F1 | 	add	fp, #4
1cad8     A7 26 62 FC | 	wrlong	local01, fp
1cadc     04 4E 05 F1 | 	add	fp, #4
1cae0     A7 28 62 FC | 	wrlong	local02, fp
1cae4     08 4E 85 F1 | 	sub	fp, #8
1cae8     34 0D BF FD | 	call	#_pop
1caec     FD 28 02 F6 | 	mov	local02, result1
1caf0     0C 4E 05 F1 | 	add	fp, #12
1caf4     A7 28 62 FC | 	wrlong	local02, fp
1caf8     04 4E 05 F1 | 	add	fp, #4
1cafc     A7 FC 61 FC | 	wrlong	result2, fp
1cb00     04 4E 05 F1 | 	add	fp, #4
1cb04     A7 FE 61 FC | 	wrlong	result3, fp
1cb08     08 4E 85 F1 | 	sub	fp, #8
1cb0c     A7 12 02 F6 | 	mov	arg01, fp
1cb10     0C 4E 85 F1 | 	sub	fp, #12
1cb14     EC 0E BF FD | 	call	#_converttoint
1cb18     FD 28 02 F6 | 	mov	local02, result1
1cb1c     14 27 02 F6 | 	mov	local01, local02
1cb20     03 26 66 F0 | 	shl	local01, #3
1cb24     14 27 82 F1 | 	sub	local01, local02
1cb28     02 26 66 F0 | 	shl	local01, #2
1cb2c     14 00 00 FF 
1cb30     38 E5 05 F1 | 	add	objptr, ##10552
1cb34     F2 26 02 F1 | 	add	local01, objptr
1cb38     A7 12 02 F6 | 	mov	arg01, fp
1cb3c     14 00 00 FF 
1cb40     38 E5 85 F1 | 	sub	objptr, ##10552
1cb44     BC 0E BF FD | 	call	#_converttoint
1cb48     06 26 06 F1 | 	add	local01, #6
1cb4c     13 FB 51 FC | 	wrword	result1, local01
1cb50     A7 F0 03 F6 | 	mov	ptra, fp
1cb54     B2 00 A0 FD | 	call	#popregs_
1cb58                 | _do_setdelay_ret
1cb58     2D 00 64 FD | 	ret
1cb5c                 | 
1cb5c                 | ' 
1cb5c                 | ' ' ------------------ setenv
1cb5c                 | ' 
1cb5c                 | ' sub do_setenv
1cb5c                 | _do_setenv
1cb5c     02 4A 05 F6 | 	mov	COUNT_, #2
1cb60     A8 00 A0 FD | 	call	#pushregs_
1cb64     18 F0 07 F1 | 	add	ptra, #24
1cb68     B4 0C BF FD | 	call	#_pop
1cb6c     FD 12 02 F6 | 	mov	arg01, result1
1cb70     FE 26 02 F6 | 	mov	local01, result2
1cb74     FF 28 02 F6 | 	mov	local02, result3
1cb78     A7 12 62 FC | 	wrlong	arg01, fp
1cb7c     04 4E 05 F1 | 	add	fp, #4
1cb80     A7 26 62 FC | 	wrlong	local01, fp
1cb84     04 4E 05 F1 | 	add	fp, #4
1cb88     A7 28 62 FC | 	wrlong	local02, fp
1cb8c     08 4E 85 F1 | 	sub	fp, #8
1cb90     8C 0C BF FD | 	call	#_pop
1cb94     FD 28 02 F6 | 	mov	local02, result1
1cb98     0C 4E 05 F1 | 	add	fp, #12
1cb9c     A7 28 62 FC | 	wrlong	local02, fp
1cba0     04 4E 05 F1 | 	add	fp, #4
1cba4     A7 FC 61 FC | 	wrlong	result2, fp
1cba8     04 4E 05 F1 | 	add	fp, #4
1cbac     A7 FE 61 FC | 	wrlong	result3, fp
1cbb0     08 4E 85 F1 | 	sub	fp, #8
1cbb4     A7 12 02 F6 | 	mov	arg01, fp
1cbb8     0C 4E 85 F1 | 	sub	fp, #12
1cbbc     44 0E BF FD | 	call	#_converttoint
1cbc0     FD 28 02 F6 | 	mov	local02, result1
1cbc4     14 27 02 F6 | 	mov	local01, local02
1cbc8     03 26 66 F0 | 	shl	local01, #3
1cbcc     14 27 82 F1 | 	sub	local01, local02
1cbd0     02 26 66 F0 | 	shl	local01, #2
1cbd4     14 00 00 FF 
1cbd8     38 E5 05 F1 | 	add	objptr, ##10552
1cbdc     F2 26 02 F1 | 	add	local01, objptr
1cbe0     A7 12 02 F6 | 	mov	arg01, fp
1cbe4     14 00 00 FF 
1cbe8     38 E5 85 F1 | 	sub	objptr, ##10552
1cbec     14 0E BF FD | 	call	#_converttoint
1cbf0     05 26 06 F1 | 	add	local01, #5
1cbf4     13 FB 41 FC | 	wrbyte	result1, local01
1cbf8     A7 F0 03 F6 | 	mov	ptra, fp
1cbfc     B2 00 A0 FD | 	call	#popregs_
1cc00                 | _do_setenv_ret
1cc00     2D 00 64 FD | 	ret
1cc04                 | 
1cc04                 | ' 
1cc04                 | ' ' ------------------ setlen
1cc04                 | ' 
1cc04                 | ' sub do_setlen
1cc04                 | _do_setlen
1cc04     02 4A 05 F6 | 	mov	COUNT_, #2
1cc08     A8 00 A0 FD | 	call	#pushregs_
1cc0c     18 F0 07 F1 | 	add	ptra, #24
1cc10     0C 0C BF FD | 	call	#_pop
1cc14     FD 12 02 F6 | 	mov	arg01, result1
1cc18     FE 26 02 F6 | 	mov	local01, result2
1cc1c     FF 28 02 F6 | 	mov	local02, result3
1cc20     A7 12 62 FC | 	wrlong	arg01, fp
1cc24     04 4E 05 F1 | 	add	fp, #4
1cc28     A7 26 62 FC | 	wrlong	local01, fp
1cc2c     04 4E 05 F1 | 	add	fp, #4
1cc30     A7 28 62 FC | 	wrlong	local02, fp
1cc34     08 4E 85 F1 | 	sub	fp, #8
1cc38     E4 0B BF FD | 	call	#_pop
1cc3c     FD 28 02 F6 | 	mov	local02, result1
1cc40     0C 4E 05 F1 | 	add	fp, #12
1cc44     A7 28 62 FC | 	wrlong	local02, fp
1cc48     04 4E 05 F1 | 	add	fp, #4
1cc4c     A7 FC 61 FC | 	wrlong	result2, fp
1cc50     04 4E 05 F1 | 	add	fp, #4
1cc54     A7 FE 61 FC | 	wrlong	result3, fp
1cc58     08 4E 85 F1 | 	sub	fp, #8
1cc5c     A7 12 02 F6 | 	mov	arg01, fp
1cc60     0C 4E 85 F1 | 	sub	fp, #12
1cc64     9C 0D BF FD | 	call	#_converttoint
1cc68     FD 28 02 F6 | 	mov	local02, result1
1cc6c     14 27 02 F6 | 	mov	local01, local02
1cc70     03 26 66 F0 | 	shl	local01, #3
1cc74     14 27 82 F1 | 	sub	local01, local02
1cc78     02 26 66 F0 | 	shl	local01, #2
1cc7c     14 00 00 FF 
1cc80     38 E5 05 F1 | 	add	objptr, ##10552
1cc84     F2 26 02 F1 | 	add	local01, objptr
1cc88     A7 12 02 F6 | 	mov	arg01, fp
1cc8c     14 00 00 FF 
1cc90     38 E5 85 F1 | 	sub	objptr, ##10552
1cc94     28 0E BF FD | 	call	#_converttofloat
1cc98     08 26 06 F1 | 	add	local01, #8
1cc9c     13 FB 61 FC | 	wrlong	result1, local01
1cca0     A7 F0 03 F6 | 	mov	ptra, fp
1cca4     B2 00 A0 FD | 	call	#popregs_
1cca8                 | _do_setlen_ret
1cca8     2D 00 64 FD | 	ret
1ccac                 | 
1ccac                 | ' 
1ccac                 | ' ' ------------------ setpan
1ccac                 | ' 
1ccac                 | ' sub do_setpan
1ccac                 | _do_setpan
1ccac     02 4A 05 F6 | 	mov	COUNT_, #2
1ccb0     A8 00 A0 FD | 	call	#pushregs_
1ccb4     18 F0 07 F1 | 	add	ptra, #24
1ccb8     64 0B BF FD | 	call	#_pop
1ccbc     FD 12 02 F6 | 	mov	arg01, result1
1ccc0     FE 26 02 F6 | 	mov	local01, result2
1ccc4     FF 28 02 F6 | 	mov	local02, result3
1ccc8     A7 12 62 FC | 	wrlong	arg01, fp
1cccc     04 4E 05 F1 | 	add	fp, #4
1ccd0     A7 26 62 FC | 	wrlong	local01, fp
1ccd4     04 4E 05 F1 | 	add	fp, #4
1ccd8     A7 28 62 FC | 	wrlong	local02, fp
1ccdc     08 4E 85 F1 | 	sub	fp, #8
1cce0     3C 0B BF FD | 	call	#_pop
1cce4     FD 28 02 F6 | 	mov	local02, result1
1cce8     0C 4E 05 F1 | 	add	fp, #12
1ccec     A7 28 62 FC | 	wrlong	local02, fp
1ccf0     04 4E 05 F1 | 	add	fp, #4
1ccf4     A7 FC 61 FC | 	wrlong	result2, fp
1ccf8     04 4E 05 F1 | 	add	fp, #4
1ccfc     A7 FE 61 FC | 	wrlong	result3, fp
1cd00     08 4E 85 F1 | 	sub	fp, #8
1cd04     A7 12 02 F6 | 	mov	arg01, fp
1cd08     0C 4E 85 F1 | 	sub	fp, #12
1cd0c     F4 0C BF FD | 	call	#_converttoint
1cd10     FD 28 02 F6 | 	mov	local02, result1
1cd14     14 27 02 F6 | 	mov	local01, local02
1cd18     03 26 66 F0 | 	shl	local01, #3
1cd1c     14 27 82 F1 | 	sub	local01, local02
1cd20     02 26 66 F0 | 	shl	local01, #2
1cd24     14 00 00 FF 
1cd28     38 E5 05 F1 | 	add	objptr, ##10552
1cd2c     F2 26 02 F1 | 	add	local01, objptr
1cd30     A7 12 02 F6 | 	mov	arg01, fp
1cd34     14 00 00 FF 
1cd38     38 E5 85 F1 | 	sub	objptr, ##10552
1cd3c     80 0D BF FD | 	call	#_converttofloat
1cd40     10 26 06 F1 | 	add	local01, #16
1cd44     13 FB 61 FC | 	wrlong	result1, local01
1cd48     A7 F0 03 F6 | 	mov	ptra, fp
1cd4c     B2 00 A0 FD | 	call	#popregs_
1cd50                 | _do_setpan_ret
1cd50     2D 00 64 FD | 	ret
1cd54                 | 
1cd54                 | ' 
1cd54                 | ' ' ------------------ setsustain
1cd54                 | ' 
1cd54                 | ' sub do_setsustain
1cd54                 | _do_setsustain
1cd54     02 4A 05 F6 | 	mov	COUNT_, #2
1cd58     A8 00 A0 FD | 	call	#pushregs_
1cd5c     18 F0 07 F1 | 	add	ptra, #24
1cd60     BC 0A BF FD | 	call	#_pop
1cd64     FD 12 02 F6 | 	mov	arg01, result1
1cd68     FE 26 02 F6 | 	mov	local01, result2
1cd6c     FF 28 02 F6 | 	mov	local02, result3
1cd70     A7 12 62 FC | 	wrlong	arg01, fp
1cd74     04 4E 05 F1 | 	add	fp, #4
1cd78     A7 26 62 FC | 	wrlong	local01, fp
1cd7c     04 4E 05 F1 | 	add	fp, #4
1cd80     A7 28 62 FC | 	wrlong	local02, fp
1cd84     08 4E 85 F1 | 	sub	fp, #8
1cd88     94 0A BF FD | 	call	#_pop
1cd8c     FD 28 02 F6 | 	mov	local02, result1
1cd90     0C 4E 05 F1 | 	add	fp, #12
1cd94     A7 28 62 FC | 	wrlong	local02, fp
1cd98     04 4E 05 F1 | 	add	fp, #4
1cd9c     A7 FC 61 FC | 	wrlong	result2, fp
1cda0     04 4E 05 F1 | 	add	fp, #4
1cda4     A7 FE 61 FC | 	wrlong	result3, fp
1cda8     08 4E 85 F1 | 	sub	fp, #8
1cdac     A7 12 02 F6 | 	mov	arg01, fp
1cdb0     0C 4E 85 F1 | 	sub	fp, #12
1cdb4     4C 0C BF FD | 	call	#_converttoint
1cdb8     FD 28 02 F6 | 	mov	local02, result1
1cdbc     14 27 02 F6 | 	mov	local01, local02
1cdc0     03 26 66 F0 | 	shl	local01, #3
1cdc4     14 27 82 F1 | 	sub	local01, local02
1cdc8     02 26 66 F0 | 	shl	local01, #2
1cdcc     14 00 00 FF 
1cdd0     38 E5 05 F1 | 	add	objptr, ##10552
1cdd4     F2 26 02 F1 | 	add	local01, objptr
1cdd8     A7 12 02 F6 | 	mov	arg01, fp
1cddc     14 00 00 FF 
1cde0     38 E5 85 F1 | 	sub	objptr, ##10552
1cde4     1C 0C BF FD | 	call	#_converttoint
1cde8     14 26 06 F1 | 	add	local01, #20
1cdec     13 FB 51 FC | 	wrword	result1, local01
1cdf0     A7 F0 03 F6 | 	mov	ptra, fp
1cdf4     B2 00 A0 FD | 	call	#popregs_
1cdf8                 | _do_setsustain_ret
1cdf8     2D 00 64 FD | 	ret
1cdfc                 | 
1cdfc                 | ' 
1cdfc                 | ' ' ------------------ setvol
1cdfc                 | ' 
1cdfc                 | ' sub do_setvol
1cdfc                 | _do_setvol
1cdfc     02 4A 05 F6 | 	mov	COUNT_, #2
1ce00     A8 00 A0 FD | 	call	#pushregs_
1ce04     18 F0 07 F1 | 	add	ptra, #24
1ce08     14 0A BF FD | 	call	#_pop
1ce0c     FD 12 02 F6 | 	mov	arg01, result1
1ce10     FE 26 02 F6 | 	mov	local01, result2
1ce14     FF 28 02 F6 | 	mov	local02, result3
1ce18     A7 12 62 FC | 	wrlong	arg01, fp
1ce1c     04 4E 05 F1 | 	add	fp, #4
1ce20     A7 26 62 FC | 	wrlong	local01, fp
1ce24     04 4E 05 F1 | 	add	fp, #4
1ce28     A7 28 62 FC | 	wrlong	local02, fp
1ce2c     08 4E 85 F1 | 	sub	fp, #8
1ce30     EC 09 BF FD | 	call	#_pop
1ce34     FD 28 02 F6 | 	mov	local02, result1
1ce38     0C 4E 05 F1 | 	add	fp, #12
1ce3c     A7 28 62 FC | 	wrlong	local02, fp
1ce40     04 4E 05 F1 | 	add	fp, #4
1ce44     A7 FC 61 FC | 	wrlong	result2, fp
1ce48     04 4E 05 F1 | 	add	fp, #4
1ce4c     A7 FE 61 FC | 	wrlong	result3, fp
1ce50     08 4E 85 F1 | 	sub	fp, #8
1ce54     A7 12 02 F6 | 	mov	arg01, fp
1ce58     0C 4E 85 F1 | 	sub	fp, #12
1ce5c     A4 0B BF FD | 	call	#_converttoint
1ce60     FD 28 02 F6 | 	mov	local02, result1
1ce64     14 27 02 F6 | 	mov	local01, local02
1ce68     03 26 66 F0 | 	shl	local01, #3
1ce6c     14 27 82 F1 | 	sub	local01, local02
1ce70     02 26 66 F0 | 	shl	local01, #2
1ce74     14 00 00 FF 
1ce78     38 E5 05 F1 | 	add	objptr, ##10552
1ce7c     F2 26 02 F1 | 	add	local01, objptr
1ce80     A7 12 02 F6 | 	mov	arg01, fp
1ce84     14 00 00 FF 
1ce88     38 E5 85 F1 | 	sub	objptr, ##10552
1ce8c     30 0C BF FD | 	call	#_converttofloat
1ce90     0C 26 06 F1 | 	add	local01, #12
1ce94     13 FB 61 FC | 	wrlong	result1, local01
1ce98     A7 F0 03 F6 | 	mov	ptra, fp
1ce9c     B2 00 A0 FD | 	call	#popregs_
1cea0                 | _do_setvol_ret
1cea0     2D 00 64 FD | 	ret
1cea4                 | 
1cea4                 | ' 
1cea4                 | ' ' ------------------ setwave
1cea4                 | ' 
1cea4                 | ' sub do_setwave
1cea4                 | _do_setwave
1cea4     02 4A 05 F6 | 	mov	COUNT_, #2
1cea8     A8 00 A0 FD | 	call	#pushregs_
1ceac     18 F0 07 F1 | 	add	ptra, #24
1ceb0     6C 09 BF FD | 	call	#_pop
1ceb4     FD 12 02 F6 | 	mov	arg01, result1
1ceb8     FE 26 02 F6 | 	mov	local01, result2
1cebc     FF 28 02 F6 | 	mov	local02, result3
1cec0     A7 12 62 FC | 	wrlong	arg01, fp
1cec4     04 4E 05 F1 | 	add	fp, #4
1cec8     A7 26 62 FC | 	wrlong	local01, fp
1cecc     04 4E 05 F1 | 	add	fp, #4
1ced0     A7 28 62 FC | 	wrlong	local02, fp
1ced4     08 4E 85 F1 | 	sub	fp, #8
1ced8     44 09 BF FD | 	call	#_pop
1cedc     FD 28 02 F6 | 	mov	local02, result1
1cee0     0C 4E 05 F1 | 	add	fp, #12
1cee4     A7 28 62 FC | 	wrlong	local02, fp
1cee8     04 4E 05 F1 | 	add	fp, #4
1ceec     A7 FC 61 FC | 	wrlong	result2, fp
1cef0     04 4E 05 F1 | 	add	fp, #4
1cef4     A7 FE 61 FC | 	wrlong	result3, fp
1cef8     08 4E 85 F1 | 	sub	fp, #8
1cefc     A7 12 02 F6 | 	mov	arg01, fp
1cf00     0C 4E 85 F1 | 	sub	fp, #12
1cf04     FC 0A BF FD | 	call	#_converttoint
1cf08     FD 28 02 F6 | 	mov	local02, result1
1cf0c     14 27 02 F6 | 	mov	local01, local02
1cf10     03 26 66 F0 | 	shl	local01, #3
1cf14     14 27 82 F1 | 	sub	local01, local02
1cf18     02 26 66 F0 | 	shl	local01, #2
1cf1c     14 00 00 FF 
1cf20     38 E5 05 F1 | 	add	objptr, ##10552
1cf24     F2 26 02 F1 | 	add	local01, objptr
1cf28     A7 12 02 F6 | 	mov	arg01, fp
1cf2c     14 00 00 FF 
1cf30     38 E5 85 F1 | 	sub	objptr, ##10552
1cf34     CC 0A BF FD | 	call	#_converttoint
1cf38     04 26 06 F1 | 	add	local01, #4
1cf3c     13 FB 41 FC | 	wrbyte	result1, local01
1cf40     A7 F0 03 F6 | 	mov	ptra, fp
1cf44     B2 00 A0 FD | 	call	#popregs_
1cf48                 | _do_setwave_ret
1cf48     2D 00 64 FD | 	ret
1cf4c                 | 
1cf4c                 | ' 
1cf4c                 | ' ' ------------------ shutup
1cf4c                 | ' 
1cf4c                 | ' sub do_shutup
1cf4c                 | _do_shutup
1cf4c     03 4A 05 F6 | 	mov	COUNT_, #3
1cf50     A8 00 A0 FD | 	call	#pushregs_
1cf54     18 F0 07 F1 | 	add	ptra, #24
1cf58     4A 00 00 FF 
1cf5c     A0 E4 05 F1 | 	add	objptr, ##38048
1cf60     F2 26 02 FB | 	rdlong	local01, objptr
1cf64     13 29 02 F6 | 	mov	local02, local01
1cf68     01 28 66 F0 | 	shl	local02, #1
1cf6c     13 29 02 F1 | 	add	local02, local01
1cf70     02 28 66 F0 | 	shl	local02, #2
1cf74     03 00 00 FF 
1cf78     04 E4 85 F1 | 	sub	objptr, ##1540
1cf7c     F2 28 02 F1 | 	add	local02, objptr
1cf80     14 2B 0A FB | 	rdlong	local03, local02 wz
1cf84     14 4E 05 F1 | 	add	fp, #20
1cf88     A7 2A 62 FC | 	wrlong	local03, fp
1cf8c                 | ' 
1cf8c                 | ' numpar=compiledline(lineptr_e).result.uresult
1cf8c                 | ' if numpar=0 then
1cf8c     14 4E 85 F1 | 	sub	fp, #20
1cf90     47 00 00 FF 
1cf94     9C E4 85 F1 | 	sub	objptr, ##36508
1cf98     50 00 90 5D |  if_ne	jmp	#LR__2252
1cf9c                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1cf9c     10 4E 05 F1 | 	add	fp, #16
1cfa0     A7 00 68 FC | 	wrlong	#0, fp
1cfa4     37 00 00 FF 
1cfa8     30 E4 05 F1 | 	add	objptr, ##28208
1cfac     97 16 48 FB | 	callpa	#(@LR__2251-@LR__2250)>>2,fcache_load_ptr_
1cfb0                 | LR__2250
1cfb0     F2 12 02 FB | 	rdlong	arg01, objptr
1cfb4     A7 2A 02 FB | 	rdlong	local03, fp
1cfb8     06 2A 66 F0 | 	shl	local03, #6
1cfbc     15 13 02 F1 | 	add	arg01, local03
1cfc0     14 12 06 F1 | 	add	arg01, #20
1cfc4     09 01 58 FC | 	wrword	#0, arg01
1cfc8     A7 2A 02 FB | 	rdlong	local03, fp
1cfcc     01 2A 06 F1 | 	add	local03, #1
1cfd0     A7 2A 62 FC | 	wrlong	local03, fp
1cfd4     08 2A 56 F2 | 	cmps	local03, #8 wc
1cfd8     D4 FF 9F CD |  if_b	jmp	#LR__2250
1cfdc                 | LR__2251
1cfdc     37 00 00 FF 
1cfe0     30 E4 85 F1 | 	sub	objptr, ##28208
1cfe4     10 4E 85 F1 | 	sub	fp, #16
1cfe8     64 00 90 FD | 	jmp	#LR__2253
1cfec                 | LR__2252
1cfec     30 08 BF FD | 	call	#_pop
1cff0     FF 26 02 F6 | 	mov	local01, result3
1cff4     A7 FA 61 FC | 	wrlong	result1, fp
1cff8     04 4E 05 F1 | 	add	fp, #4
1cffc     A7 FC 61 FC | 	wrlong	result2, fp
1d000     04 4E 05 F1 | 	add	fp, #4
1d004     A7 26 62 FC | 	wrlong	local01, fp
1d008     08 4E 85 F1 | 	sub	fp, #8
1d00c     A7 12 02 F6 | 	mov	arg01, fp
1d010     F0 09 BF FD | 	call	#_converttoint
1d014     FD 2A 52 F6 | 	abs	local03, result1 wc
1d018     07 2A 06 F5 | 	and	local03, #7
1d01c     15 29 82 F6 | 	negc	local02, local03
1d020     0C 4E 05 F1 | 	add	fp, #12
1d024     A7 28 62 FC | 	wrlong	local02, fp
1d028     37 00 00 FF 
1d02c     30 E4 05 F1 | 	add	objptr, ##28208
1d030     F2 12 02 FB | 	rdlong	arg01, objptr
1d034     37 00 00 FF 
1d038     30 E4 85 F1 | 	sub	objptr, ##28208
1d03c     0C 4E 85 F1 | 	sub	fp, #12
1d040     06 28 66 F0 | 	shl	local02, #6
1d044     14 13 02 F1 | 	add	arg01, local02
1d048     14 12 06 F1 | 	add	arg01, #20
1d04c     09 01 58 FC | 	wrword	#0, arg01
1d050                 | LR__2253
1d050     A7 F0 03 F6 | 	mov	ptra, fp
1d054     B2 00 A0 FD | 	call	#popregs_
1d058                 | _do_shutup_ret
1d058     2D 00 64 FD | 	ret
1d05c                 | 
1d05c                 | ' 
1d05c                 | ' ' ------------------ sin
1d05c                 | ' 
1d05c                 | ' sub do_sin
1d05c                 | _do_sin
1d05c     01 4A 05 F6 | 	mov	COUNT_, #1
1d060     A8 00 A0 FD | 	call	#pushregs_
1d064     10 F0 07 F1 | 	add	ptra, #16
1d068     4A 00 00 FF 
1d06c     A0 E4 05 F1 | 	add	objptr, ##38048
1d070     F2 26 02 FB | 	rdlong	local01, objptr
1d074     13 17 02 F6 | 	mov	arg03, local01
1d078     01 16 66 F0 | 	shl	arg03, #1
1d07c     13 17 02 F1 | 	add	arg03, local01
1d080     02 16 66 F0 | 	shl	arg03, #2
1d084     03 00 00 FF 
1d088     04 E4 85 F1 | 	sub	objptr, ##1540
1d08c     F2 16 02 F1 | 	add	arg03, objptr
1d090     0B 17 02 FB | 	rdlong	arg03, arg03
1d094     0C 4E 05 F1 | 	add	fp, #12
1d098     A7 16 62 FC | 	wrlong	arg03, fp
1d09c                 | ' 
1d09c                 | ' numpar=compiledline(lineptr_e).result.uresult
1d09c                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1d09c     0C 4E 85 F1 | 	sub	fp, #12
1d0a0     02 16 16 F2 | 	cmp	arg03, #2 wc
1d0a4     47 00 00 FF 
1d0a8     9C E4 85 F1 | 	sub	objptr, ##36508
1d0ac     0C 4E 05 C1 |  if_b	add	fp, #12
1d0b0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1d0b4     0C 4E 85 C1 |  if_b	sub	fp, #12
1d0b8     40 00 90 4D |  if_c_and_nz	jmp	#LR__2260
1d0bc     00 12 06 F6 | 	mov	arg01, #0
1d0c0     00 0D B1 FD | 	call	#__system___getiolock_0620
1d0c4     FD 12 02 F6 | 	mov	arg01, result1
1d0c8     48 B0 B0 FD | 	call	#__system___lockmem
1d0cc     C4 01 00 FF 
1d0d0     9C 14 06 F6 | 	mov	arg02, ##@LR__6135
1d0d4     00 12 06 F6 | 	mov	arg01, #0
1d0d8     00 16 06 F6 | 	mov	arg03, #0
1d0dc     2C BD B0 FD | 	call	#__system___basic_print_string
1d0e0     00 12 06 F6 | 	mov	arg01, #0
1d0e4     DC 0C B1 FD | 	call	#__system___getiolock_0620
1d0e8     FD 00 68 FC | 	wrlong	#0, result1
1d0ec     27 12 06 F6 | 	mov	arg01, #39
1d0f0     00 14 06 F6 | 	mov	arg02, #0
1d0f4     C4 75 B0 FD | 	call	#_printerror
1d0f8     64 00 90 FD | 	jmp	#LR__2261
1d0fc                 | LR__2260
1d0fc     20 07 BF FD | 	call	#_pop
1d100     A7 FA 61 FC | 	wrlong	result1, fp
1d104     04 4E 05 F1 | 	add	fp, #4
1d108     A7 FC 61 FC | 	wrlong	result2, fp
1d10c     04 4E 05 F1 | 	add	fp, #4
1d110     A7 FE 61 FC | 	wrlong	result3, fp
1d114     08 4E 85 F1 | 	sub	fp, #8
1d118     52 00 00 FF 
1d11c     00 E5 05 F1 | 	add	objptr, ##42240
1d120     F2 26 02 FB | 	rdlong	local01, objptr
1d124     52 00 00 FF 
1d128     00 E5 85 F1 | 	sub	objptr, ##42240
1d12c     A7 12 02 F6 | 	mov	arg01, fp
1d130     8C 09 BF FD | 	call	#_converttofloat
1d134     FD 14 02 F6 | 	mov	arg02, result1
1d138     13 13 02 F6 | 	mov	arg01, local01
1d13c     50 DE B0 FD | 	call	#__system___float_mul
1d140     FD 12 02 F6 | 	mov	arg01, result1
1d144     AC E7 B0 FD | 	call	#__system____builtin_sinf
1d148     A7 FA 61 FC | 	wrlong	result1, fp
1d14c     08 4E 05 F1 | 	add	fp, #8
1d150     A7 3C 68 FC | 	wrlong	#30, fp
1d154     08 4E 85 F1 | 	sub	fp, #8
1d158     A7 12 02 F6 | 	mov	arg01, fp
1d15c     58 07 BF FD | 	call	#_push
1d160                 | LR__2261
1d160     A7 F0 03 F6 | 	mov	ptra, fp
1d164     B2 00 A0 FD | 	call	#popregs_
1d168                 | _do_sin_ret
1d168     2D 00 64 FD | 	ret
1d16c                 | 
1d16c                 | ' 
1d16c                 | ' ' ------------------ skip
1d16c                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1d16c                 | ' 
1d16c                 | ' sub do_skip
1d16c                 | _do_skip
1d16c     4A 00 00 FF 
1d170     A0 E4 05 F1 | 	add	objptr, ##38048
1d174     F2 00 02 FB | 	rdlong	_var01, objptr
1d178     00 03 02 F6 | 	mov	_var02, _var01
1d17c     01 02 66 F0 | 	shl	_var02, #1
1d180     00 03 02 F1 | 	add	_var02, _var01
1d184     02 02 66 F0 | 	shl	_var02, #2
1d188     03 00 00 FF 
1d18c     04 E4 85 F1 | 	sub	objptr, ##1540
1d190     F2 02 02 F1 | 	add	_var02, objptr
1d194     01 03 02 FB | 	rdlong	_var02, _var02
1d198     01 02 86 F1 | 	sub	_var02, #1
1d19c     03 00 00 FF 
1d1a0     04 E4 05 F1 | 	add	objptr, ##1540
1d1a4     F2 02 62 FC | 	wrlong	_var02, objptr
1d1a8     4A 00 00 FF 
1d1ac     A0 E4 85 F1 | 	sub	objptr, ##38048
1d1b0                 | _do_skip_ret
1d1b0     2D 00 64 FD | 	ret
1d1b4                 | 
1d1b4                 | ' 
1d1b4                 | ' ' ------------------ sprite
1d1b4                 | ' 
1d1b4                 | ' sub do_sprite
1d1b4                 | _do_sprite
1d1b4     00 4A 05 F6 | 	mov	COUNT_, #0
1d1b8     A8 00 A0 FD | 	call	#pushregs_
1d1bc     30 F0 07 F1 | 	add	ptra, #48
1d1c0     5C 06 BF FD | 	call	#_pop
1d1c4     FD 16 02 F6 | 	mov	arg03, result1
1d1c8     FE 14 02 F6 | 	mov	arg02, result2
1d1cc     FF 12 02 F6 | 	mov	arg01, result3
1d1d0     18 4E 05 F1 | 	add	fp, #24
1d1d4     A7 16 62 FC | 	wrlong	arg03, fp
1d1d8     04 4E 05 F1 | 	add	fp, #4
1d1dc     A7 14 62 FC | 	wrlong	arg02, fp
1d1e0     04 4E 05 F1 | 	add	fp, #4
1d1e4     A7 12 62 FC | 	wrlong	arg01, fp
1d1e8     20 4E 85 F1 | 	sub	fp, #32
1d1ec     30 06 BF FD | 	call	#_pop
1d1f0     FD 16 02 F6 | 	mov	arg03, result1
1d1f4     FE 14 02 F6 | 	mov	arg02, result2
1d1f8     FF 12 02 F6 | 	mov	arg01, result3
1d1fc     0C 4E 05 F1 | 	add	fp, #12
1d200     A7 16 62 FC | 	wrlong	arg03, fp
1d204     04 4E 05 F1 | 	add	fp, #4
1d208     A7 14 62 FC | 	wrlong	arg02, fp
1d20c     04 4E 05 F1 | 	add	fp, #4
1d210     A7 12 62 FC | 	wrlong	arg01, fp
1d214     14 4E 85 F1 | 	sub	fp, #20
1d218     04 06 BF FD | 	call	#_pop
1d21c     FF 16 02 F6 | 	mov	arg03, result3
1d220     A7 FA 61 FC | 	wrlong	result1, fp
1d224     04 4E 05 F1 | 	add	fp, #4
1d228     A7 FC 61 FC | 	wrlong	result2, fp
1d22c     04 4E 05 F1 | 	add	fp, #4
1d230     A7 16 62 FC | 	wrlong	arg03, fp
1d234     08 4E 85 F1 | 	sub	fp, #8
1d238     A7 12 02 F6 | 	mov	arg01, fp
1d23c     C4 07 BF FD | 	call	#_converttoint
1d240     24 4E 05 F1 | 	add	fp, #36
1d244     A7 FA 61 FC | 	wrlong	result1, fp
1d248     18 4E 85 F1 | 	sub	fp, #24
1d24c     A7 12 02 F6 | 	mov	arg01, fp
1d250     0C 4E 85 F1 | 	sub	fp, #12
1d254     AC 07 BF FD | 	call	#_converttoint
1d258     28 4E 05 F1 | 	add	fp, #40
1d25c     A7 FA 61 FC | 	wrlong	result1, fp
1d260     10 4E 85 F1 | 	sub	fp, #16
1d264     A7 12 02 F6 | 	mov	arg01, fp
1d268     18 4E 85 F1 | 	sub	fp, #24
1d26c     94 07 BF FD | 	call	#_converttoint
1d270     2C 4E 05 F1 | 	add	fp, #44
1d274     A7 FA 61 FC | 	wrlong	result1, fp
1d278     08 4E 85 F1 | 	sub	fp, #8
1d27c     A7 12 02 FB | 	rdlong	arg01, fp
1d280     04 4E 05 F1 | 	add	fp, #4
1d284     A7 14 02 FB | 	rdlong	arg02, fp
1d288     FD 16 02 F6 | 	mov	arg03, result1
1d28c     28 4E 85 F1 | 	sub	fp, #40
1d290     28 84 B0 FD | 	call	#_hg010b_spin2_setspritepos
1d294     A7 F0 03 F6 | 	mov	ptra, fp
1d298     B2 00 A0 FD | 	call	#popregs_
1d29c                 | _do_sprite_ret
1d29c     2D 00 64 FD | 	ret
1d2a0                 | 
1d2a0                 | ' 
1d2a0                 | ' ' ------------------ sqr
1d2a0                 | ' 
1d2a0                 | ' sub do_sqr
1d2a0                 | _do_sqr
1d2a0     01 4A 05 F6 | 	mov	COUNT_, #1
1d2a4     A8 00 A0 FD | 	call	#pushregs_
1d2a8     10 F0 07 F1 | 	add	ptra, #16
1d2ac     4A 00 00 FF 
1d2b0     A0 E4 05 F1 | 	add	objptr, ##38048
1d2b4     F2 26 02 FB | 	rdlong	local01, objptr
1d2b8     13 17 02 F6 | 	mov	arg03, local01
1d2bc     01 16 66 F0 | 	shl	arg03, #1
1d2c0     13 17 02 F1 | 	add	arg03, local01
1d2c4     02 16 66 F0 | 	shl	arg03, #2
1d2c8     03 00 00 FF 
1d2cc     04 E4 85 F1 | 	sub	objptr, ##1540
1d2d0     F2 16 02 F1 | 	add	arg03, objptr
1d2d4     0B 17 02 FB | 	rdlong	arg03, arg03
1d2d8     0C 4E 05 F1 | 	add	fp, #12
1d2dc     A7 16 62 FC | 	wrlong	arg03, fp
1d2e0                 | ' 
1d2e0                 | ' numpar=compiledline(lineptr_e).result.uresult
1d2e0                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1d2e0     0C 4E 85 F1 | 	sub	fp, #12
1d2e4     02 16 16 F2 | 	cmp	arg03, #2 wc
1d2e8     47 00 00 FF 
1d2ec     9C E4 85 F1 | 	sub	objptr, ##36508
1d2f0     0C 4E 05 C1 |  if_b	add	fp, #12
1d2f4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1d2f8     0C 4E 85 C1 |  if_b	sub	fp, #12
1d2fc     40 00 90 4D |  if_c_and_nz	jmp	#LR__2270
1d300     00 12 06 F6 | 	mov	arg01, #0
1d304     BC 0A B1 FD | 	call	#__system___getiolock_0620
1d308     FD 12 02 F6 | 	mov	arg01, result1
1d30c     04 AE B0 FD | 	call	#__system___lockmem
1d310     C4 01 00 FF 
1d314     A2 14 06 F6 | 	mov	arg02, ##@LR__6136
1d318     00 12 06 F6 | 	mov	arg01, #0
1d31c     00 16 06 F6 | 	mov	arg03, #0
1d320     E8 BA B0 FD | 	call	#__system___basic_print_string
1d324     00 12 06 F6 | 	mov	arg01, #0
1d328     98 0A B1 FD | 	call	#__system___getiolock_0620
1d32c     FD 00 68 FC | 	wrlong	#0, result1
1d330     27 12 06 F6 | 	mov	arg01, #39
1d334     00 14 06 F6 | 	mov	arg02, #0
1d338     80 73 B0 FD | 	call	#_printerror
1d33c     48 00 90 FD | 	jmp	#LR__2271
1d340                 | LR__2270
1d340     DC 04 BF FD | 	call	#_pop
1d344     FF 26 02 F6 | 	mov	local01, result3
1d348     A7 FA 61 FC | 	wrlong	result1, fp
1d34c     04 4E 05 F1 | 	add	fp, #4
1d350     A7 FC 61 FC | 	wrlong	result2, fp
1d354     04 4E 05 F1 | 	add	fp, #4
1d358     A7 26 62 FC | 	wrlong	local01, fp
1d35c     08 4E 85 F1 | 	sub	fp, #8
1d360     A7 12 02 F6 | 	mov	arg01, fp
1d364     58 07 BF FD | 	call	#_converttofloat
1d368     FD 12 02 F6 | 	mov	arg01, result1
1d36c     48 DB B0 FD | 	call	#__system___float_sqrt
1d370     A7 FA 61 FC | 	wrlong	result1, fp
1d374     08 4E 05 F1 | 	add	fp, #8
1d378     A7 3C 68 FC | 	wrlong	#30, fp
1d37c     08 4E 85 F1 | 	sub	fp, #8
1d380     A7 12 02 F6 | 	mov	arg01, fp
1d384     30 05 BF FD | 	call	#_push
1d388                 | LR__2271
1d388     A7 F0 03 F6 | 	mov	ptra, fp
1d38c     B2 00 A0 FD | 	call	#popregs_
1d390                 | _do_sqr_ret
1d390     2D 00 64 FD | 	ret
1d394                 | 
1d394                 | ' 
1d394                 | ' ' ------------------ stick
1d394                 | ' 
1d394                 | ' sub do_stick
1d394                 | _do_stick
1d394     01 4A 05 F6 | 	mov	COUNT_, #1
1d398     A8 00 A0 FD | 	call	#pushregs_
1d39c     10 F0 07 F1 | 	add	ptra, #16
1d3a0     4A 00 00 FF 
1d3a4     A0 E4 05 F1 | 	add	objptr, ##38048
1d3a8     F2 26 02 FB | 	rdlong	local01, objptr
1d3ac     13 17 02 F6 | 	mov	arg03, local01
1d3b0     01 16 66 F0 | 	shl	arg03, #1
1d3b4     13 17 02 F1 | 	add	arg03, local01
1d3b8     02 16 66 F0 | 	shl	arg03, #2
1d3bc     03 00 00 FF 
1d3c0     04 E4 85 F1 | 	sub	objptr, ##1540
1d3c4     F2 16 02 F1 | 	add	arg03, objptr
1d3c8     0B 17 02 FB | 	rdlong	arg03, arg03
1d3cc     0C 4E 05 F1 | 	add	fp, #12
1d3d0     A7 16 62 FC | 	wrlong	arg03, fp
1d3d4                 | ' 
1d3d4                 | ' numpar=compiledline(lineptr_e).result.uresult
1d3d4                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1d3d4     0C 4E 85 F1 | 	sub	fp, #12
1d3d8     02 16 16 F2 | 	cmp	arg03, #2 wc
1d3dc     47 00 00 FF 
1d3e0     9C E4 85 F1 | 	sub	objptr, ##36508
1d3e4     40 00 90 CD |  if_b	jmp	#LR__2280
1d3e8     00 12 06 F6 | 	mov	arg01, #0
1d3ec     D4 09 B1 FD | 	call	#__system___getiolock_0620
1d3f0     FD 12 02 F6 | 	mov	arg01, result1
1d3f4     1C AD B0 FD | 	call	#__system___lockmem
1d3f8     C4 01 00 FF 
1d3fc     A8 14 06 F6 | 	mov	arg02, ##@LR__6137
1d400     00 12 06 F6 | 	mov	arg01, #0
1d404     00 16 06 F6 | 	mov	arg03, #0
1d408     00 BA B0 FD | 	call	#__system___basic_print_string
1d40c     00 12 06 F6 | 	mov	arg01, #0
1d410     B0 09 B1 FD | 	call	#__system___getiolock_0620
1d414     FD 00 68 FC | 	wrlong	#0, result1
1d418     27 12 06 F6 | 	mov	arg01, #39
1d41c     00 14 06 F6 | 	mov	arg02, #0
1d420     98 72 B0 FD | 	call	#_printerror
1d424     F0 00 90 FD | 	jmp	#LR__2284
1d428                 | LR__2280
1d428                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1d428     0C 4E 05 F1 | 	add	fp, #12
1d42c     A7 FE 09 FB | 	rdlong	result3, fp wz
1d430     0C 4E 85 F1 | 	sub	fp, #12
1d434     30 00 90 5D |  if_ne	jmp	#LR__2281
1d438     52 00 00 FF 
1d43c     74 E4 05 F1 | 	add	objptr, ##42100
1d440     F2 26 02 FB | 	rdlong	local01, objptr
1d444     52 00 00 FF 
1d448     74 E4 85 F1 | 	sub	objptr, ##42100
1d44c     A7 26 62 FC | 	wrlong	local01, fp
1d450     08 4E 05 F1 | 	add	fp, #8
1d454     A7 3A 68 FC | 	wrlong	#29, fp
1d458     08 4E 85 F1 | 	sub	fp, #8
1d45c     A7 12 02 F6 | 	mov	arg01, fp
1d460     54 04 BF FD | 	call	#_push
1d464     B0 00 90 FD | 	jmp	#LR__2284
1d468                 | LR__2281
1d468     B4 03 BF FD | 	call	#_pop
1d46c     A7 FA 61 FC | 	wrlong	result1, fp
1d470     04 4E 05 F1 | 	add	fp, #4
1d474     A7 FC 61 FC | 	wrlong	result2, fp
1d478     04 4E 05 F1 | 	add	fp, #4
1d47c     A7 FE 61 FC | 	wrlong	result3, fp
1d480                 | ' t1=pop()
1d480                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1d480     08 4E 85 F1 | 	sub	fp, #8
1d484     1C FE 0D F2 | 	cmp	result3, #28 wz
1d488     08 4E 05 51 |  if_ne	add	fp, #8
1d48c     A7 26 02 5B |  if_ne	rdlong	local01, fp
1d490     08 4E 85 51 |  if_ne	sub	fp, #8
1d494     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1d498     70 00 90 5D |  if_ne	jmp	#LR__2283
1d49c     A7 26 02 FB | 	rdlong	local01, fp
1d4a0     52 00 00 FF 
1d4a4     60 E5 05 F1 | 	add	objptr, ##42336
1d4a8     F2 26 62 FC | 	wrlong	local01, objptr
1d4ac                 | '   q=t1.result.uresult
1d4ac                 | '   if q<7 then 
1d4ac     52 00 00 FF 
1d4b0     60 E5 85 F1 | 	sub	objptr, ##42336
1d4b4     07 26 56 F2 | 	cmps	local01, #7 wc
1d4b8     40 00 90 3D |  if_ae	jmp	#LR__2282
1d4bc     52 00 00 FF 
1d4c0     60 E5 05 F1 | 	add	objptr, ##42336
1d4c4     F2 26 02 FB | 	rdlong	local01, objptr
1d4c8     02 26 66 F0 | 	shl	local01, #2
1d4cc     EC E4 85 F1 | 	sub	objptr, #236
1d4d0     F2 26 02 F1 | 	add	local01, objptr
1d4d4     13 27 02 FB | 	rdlong	local01, local01
1d4d8     A7 26 62 FC | 	wrlong	local01, fp
1d4dc     08 4E 05 F1 | 	add	fp, #8
1d4e0     A7 3A 68 FC | 	wrlong	#29, fp
1d4e4     08 4E 85 F1 | 	sub	fp, #8
1d4e8     A7 12 02 F6 | 	mov	arg01, fp
1d4ec     52 00 00 FF 
1d4f0     74 E4 85 F1 | 	sub	objptr, ##42100
1d4f4     C0 03 BF FD | 	call	#_push
1d4f8                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1d4f8     1C 00 90 FD | 	jmp	#LR__2284
1d4fc                 | LR__2282
1d4fc     29 12 06 F6 | 	mov	arg01, #41
1d500     00 14 06 F6 | 	mov	arg02, #0
1d504     B4 71 B0 FD | 	call	#_printerror
1d508                 | '      printerror(41) : return
1d508     0C 00 90 FD | 	jmp	#LR__2284
1d50c                 | LR__2283
1d50c     29 12 06 F6 | 	mov	arg01, #41
1d510     00 14 06 F6 | 	mov	arg02, #0
1d514     A4 71 B0 FD | 	call	#_printerror
1d518                 | LR__2284
1d518     A7 F0 03 F6 | 	mov	ptra, fp
1d51c     B2 00 A0 FD | 	call	#popregs_
1d520                 | _do_stick_ret
1d520     2D 00 64 FD | 	ret
1d524                 | 
1d524                 | ' 
1d524                 | ' ' ------------------ strig
1d524                 | ' 
1d524                 | ' sub do_strig
1d524                 | _do_strig
1d524     01 4A 05 F6 | 	mov	COUNT_, #1
1d528     A8 00 A0 FD | 	call	#pushregs_
1d52c     10 F0 07 F1 | 	add	ptra, #16
1d530     4A 00 00 FF 
1d534     A0 E4 05 F1 | 	add	objptr, ##38048
1d538     F2 26 02 FB | 	rdlong	local01, objptr
1d53c     13 17 02 F6 | 	mov	arg03, local01
1d540     01 16 66 F0 | 	shl	arg03, #1
1d544     13 17 02 F1 | 	add	arg03, local01
1d548     02 16 66 F0 | 	shl	arg03, #2
1d54c     03 00 00 FF 
1d550     04 E4 85 F1 | 	sub	objptr, ##1540
1d554     F2 16 02 F1 | 	add	arg03, objptr
1d558     0B 17 02 FB | 	rdlong	arg03, arg03
1d55c     0C 4E 05 F1 | 	add	fp, #12
1d560     A7 16 62 FC | 	wrlong	arg03, fp
1d564                 | ' 
1d564                 | ' numpar=compiledline(lineptr_e).result.uresult
1d564                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1d564     0C 4E 85 F1 | 	sub	fp, #12
1d568     02 16 16 F2 | 	cmp	arg03, #2 wc
1d56c     47 00 00 FF 
1d570     9C E4 85 F1 | 	sub	objptr, ##36508
1d574     40 00 90 CD |  if_b	jmp	#LR__2290
1d578     00 12 06 F6 | 	mov	arg01, #0
1d57c     44 08 B1 FD | 	call	#__system___getiolock_0620
1d580     FD 12 02 F6 | 	mov	arg01, result1
1d584     8C AB B0 FD | 	call	#__system___lockmem
1d588     C4 01 00 FF 
1d58c     B0 14 06 F6 | 	mov	arg02, ##@LR__6138
1d590     00 12 06 F6 | 	mov	arg01, #0
1d594     00 16 06 F6 | 	mov	arg03, #0
1d598     70 B8 B0 FD | 	call	#__system___basic_print_string
1d59c     00 12 06 F6 | 	mov	arg01, #0
1d5a0     20 08 B1 FD | 	call	#__system___getiolock_0620
1d5a4     FD 00 68 FC | 	wrlong	#0, result1
1d5a8     27 12 06 F6 | 	mov	arg01, #39
1d5ac     00 14 06 F6 | 	mov	arg02, #0
1d5b0     08 71 B0 FD | 	call	#_printerror
1d5b4     F0 00 90 FD | 	jmp	#LR__2294
1d5b8                 | LR__2290
1d5b8                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1d5b8     0C 4E 05 F1 | 	add	fp, #12
1d5bc     A7 FE 09 FB | 	rdlong	result3, fp wz
1d5c0     0C 4E 85 F1 | 	sub	fp, #12
1d5c4     30 00 90 5D |  if_ne	jmp	#LR__2291
1d5c8     52 00 00 FF 
1d5cc     90 E4 05 F1 | 	add	objptr, ##42128
1d5d0     F2 26 02 FB | 	rdlong	local01, objptr
1d5d4     52 00 00 FF 
1d5d8     90 E4 85 F1 | 	sub	objptr, ##42128
1d5dc     A7 26 62 FC | 	wrlong	local01, fp
1d5e0     08 4E 05 F1 | 	add	fp, #8
1d5e4     A7 3A 68 FC | 	wrlong	#29, fp
1d5e8     08 4E 85 F1 | 	sub	fp, #8
1d5ec     A7 12 02 F6 | 	mov	arg01, fp
1d5f0     C4 02 BF FD | 	call	#_push
1d5f4     B0 00 90 FD | 	jmp	#LR__2294
1d5f8                 | LR__2291
1d5f8     24 02 BF FD | 	call	#_pop
1d5fc     A7 FA 61 FC | 	wrlong	result1, fp
1d600     04 4E 05 F1 | 	add	fp, #4
1d604     A7 FC 61 FC | 	wrlong	result2, fp
1d608     04 4E 05 F1 | 	add	fp, #4
1d60c     A7 FE 61 FC | 	wrlong	result3, fp
1d610                 | ' t1=pop()
1d610                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1d610     08 4E 85 F1 | 	sub	fp, #8
1d614     1C FE 0D F2 | 	cmp	result3, #28 wz
1d618     08 4E 05 51 |  if_ne	add	fp, #8
1d61c     A7 26 02 5B |  if_ne	rdlong	local01, fp
1d620     08 4E 85 51 |  if_ne	sub	fp, #8
1d624     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1d628     70 00 90 5D |  if_ne	jmp	#LR__2293
1d62c     A7 26 02 FB | 	rdlong	local01, fp
1d630     52 00 00 FF 
1d634     60 E5 05 F1 | 	add	objptr, ##42336
1d638     F2 26 62 FC | 	wrlong	local01, objptr
1d63c                 | '   q=t1.result.uresult
1d63c                 | '   if q<7 then 
1d63c     52 00 00 FF 
1d640     60 E5 85 F1 | 	sub	objptr, ##42336
1d644     07 26 56 F2 | 	cmps	local01, #7 wc
1d648     40 00 90 3D |  if_ae	jmp	#LR__2292
1d64c     52 00 00 FF 
1d650     60 E5 05 F1 | 	add	objptr, ##42336
1d654     F2 26 02 FB | 	rdlong	local01, objptr
1d658     02 26 66 F0 | 	shl	local01, #2
1d65c     D0 E4 85 F1 | 	sub	objptr, #208
1d660     F2 26 02 F1 | 	add	local01, objptr
1d664     13 27 02 FB | 	rdlong	local01, local01
1d668     A7 26 62 FC | 	wrlong	local01, fp
1d66c     08 4E 05 F1 | 	add	fp, #8
1d670     A7 3A 68 FC | 	wrlong	#29, fp
1d674     08 4E 85 F1 | 	sub	fp, #8
1d678     A7 12 02 F6 | 	mov	arg01, fp
1d67c     52 00 00 FF 
1d680     90 E4 85 F1 | 	sub	objptr, ##42128
1d684     30 02 BF FD | 	call	#_push
1d688                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1d688     1C 00 90 FD | 	jmp	#LR__2294
1d68c                 | LR__2292
1d68c     29 12 06 F6 | 	mov	arg01, #41
1d690     00 14 06 F6 | 	mov	arg02, #0
1d694     24 70 B0 FD | 	call	#_printerror
1d698                 | '      printerror(41) : return
1d698     0C 00 90 FD | 	jmp	#LR__2294
1d69c                 | LR__2293
1d69c     29 12 06 F6 | 	mov	arg01, #41
1d6a0     00 14 06 F6 | 	mov	arg02, #0
1d6a4     14 70 B0 FD | 	call	#_printerror
1d6a8                 | LR__2294
1d6a8     A7 F0 03 F6 | 	mov	ptra, fp
1d6ac     B2 00 A0 FD | 	call	#popregs_
1d6b0                 | _do_strig_ret
1d6b0     2D 00 64 FD | 	ret
1d6b4                 | 
1d6b4                 | ' 
1d6b4                 | ' ' ------------------ tan
1d6b4                 | ' 
1d6b4                 | ' sub do_tan
1d6b4                 | _do_tan
1d6b4     01 4A 05 F6 | 	mov	COUNT_, #1
1d6b8     A8 00 A0 FD | 	call	#pushregs_
1d6bc     10 F0 07 F1 | 	add	ptra, #16
1d6c0     4A 00 00 FF 
1d6c4     A0 E4 05 F1 | 	add	objptr, ##38048
1d6c8     F2 26 02 FB | 	rdlong	local01, objptr
1d6cc     13 17 02 F6 | 	mov	arg03, local01
1d6d0     01 16 66 F0 | 	shl	arg03, #1
1d6d4     13 17 02 F1 | 	add	arg03, local01
1d6d8     02 16 66 F0 | 	shl	arg03, #2
1d6dc     03 00 00 FF 
1d6e0     04 E4 85 F1 | 	sub	objptr, ##1540
1d6e4     F2 16 02 F1 | 	add	arg03, objptr
1d6e8     0B 17 02 FB | 	rdlong	arg03, arg03
1d6ec     0C 4E 05 F1 | 	add	fp, #12
1d6f0     A7 16 62 FC | 	wrlong	arg03, fp
1d6f4                 | ' 
1d6f4                 | ' numpar=compiledline(lineptr_e).result.uresult
1d6f4                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1d6f4     0C 4E 85 F1 | 	sub	fp, #12
1d6f8     02 16 16 F2 | 	cmp	arg03, #2 wc
1d6fc     47 00 00 FF 
1d700     9C E4 85 F1 | 	sub	objptr, ##36508
1d704     0C 4E 05 C1 |  if_b	add	fp, #12
1d708     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1d70c     0C 4E 85 C1 |  if_b	sub	fp, #12
1d710     40 00 90 4D |  if_c_and_nz	jmp	#LR__2300
1d714     00 12 06 F6 | 	mov	arg01, #0
1d718     A8 06 B1 FD | 	call	#__system___getiolock_0620
1d71c     FD 12 02 F6 | 	mov	arg01, result1
1d720     F0 A9 B0 FD | 	call	#__system___lockmem
1d724     C4 01 00 FF 
1d728     B8 14 06 F6 | 	mov	arg02, ##@LR__6139
1d72c     00 12 06 F6 | 	mov	arg01, #0
1d730     00 16 06 F6 | 	mov	arg03, #0
1d734     D4 B6 B0 FD | 	call	#__system___basic_print_string
1d738     00 12 06 F6 | 	mov	arg01, #0
1d73c     84 06 B1 FD | 	call	#__system___getiolock_0620
1d740     FD 00 68 FC | 	wrlong	#0, result1
1d744     27 12 06 F6 | 	mov	arg01, #39
1d748     00 14 06 F6 | 	mov	arg02, #0
1d74c     6C 6F B0 FD | 	call	#_printerror
1d750     64 00 90 FD | 	jmp	#LR__2301
1d754                 | LR__2300
1d754     C8 00 BF FD | 	call	#_pop
1d758     A7 FA 61 FC | 	wrlong	result1, fp
1d75c     04 4E 05 F1 | 	add	fp, #4
1d760     A7 FC 61 FC | 	wrlong	result2, fp
1d764     04 4E 05 F1 | 	add	fp, #4
1d768     A7 FE 61 FC | 	wrlong	result3, fp
1d76c     08 4E 85 F1 | 	sub	fp, #8
1d770     52 00 00 FF 
1d774     00 E5 05 F1 | 	add	objptr, ##42240
1d778     F2 26 02 FB | 	rdlong	local01, objptr
1d77c     52 00 00 FF 
1d780     00 E5 85 F1 | 	sub	objptr, ##42240
1d784     A7 12 02 F6 | 	mov	arg01, fp
1d788     34 03 BF FD | 	call	#_converttofloat
1d78c     FD 14 02 F6 | 	mov	arg02, result1
1d790     13 13 02 F6 | 	mov	arg01, local01
1d794     F8 D7 B0 FD | 	call	#__system___float_mul
1d798     FD 12 02 F6 | 	mov	arg01, result1
1d79c     A0 E2 B0 FD | 	call	#__system____builtin_tanf
1d7a0     A7 FA 61 FC | 	wrlong	result1, fp
1d7a4     08 4E 05 F1 | 	add	fp, #8
1d7a8     A7 3C 68 FC | 	wrlong	#30, fp
1d7ac     08 4E 85 F1 | 	sub	fp, #8
1d7b0     A7 12 02 F6 | 	mov	arg01, fp
1d7b4     00 01 BF FD | 	call	#_push
1d7b8                 | LR__2301
1d7b8     A7 F0 03 F6 | 	mov	ptra, fp
1d7bc     B2 00 A0 FD | 	call	#popregs_
1d7c0                 | _do_tan_ret
1d7c0     2D 00 64 FD | 	ret
1d7c4                 | 
1d7c4                 | ' 
1d7c4                 | ' ' ------------------ val
1d7c4                 | ' 
1d7c4                 | ' sub do_val
1d7c4                 | _do_val
1d7c4     03 4A 05 F6 | 	mov	COUNT_, #3
1d7c8     A8 00 A0 FD | 	call	#pushregs_
1d7cc     20 F0 07 F1 | 	add	ptra, #32
1d7d0     4A 00 00 FF 
1d7d4     A0 E4 05 F1 | 	add	objptr, ##38048
1d7d8     F2 16 02 FB | 	rdlong	arg03, objptr
1d7dc     0B 27 02 F6 | 	mov	local01, arg03
1d7e0     01 26 66 F0 | 	shl	local01, #1
1d7e4     0B 27 02 F1 | 	add	local01, arg03
1d7e8     02 26 66 F0 | 	shl	local01, #2
1d7ec     03 00 00 FF 
1d7f0     04 E4 85 F1 | 	sub	objptr, ##1540
1d7f4     F2 26 02 F1 | 	add	local01, objptr
1d7f8     13 17 02 FB | 	rdlong	arg03, local01
1d7fc     0C 4E 05 F1 | 	add	fp, #12
1d800     A7 16 62 FC | 	wrlong	arg03, fp
1d804                 | ' 
1d804                 | ' numpar=compiledline(lineptr_e).result.uresult
1d804                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1d804     0C 4E 85 F1 | 	sub	fp, #12
1d808     02 16 16 F2 | 	cmp	arg03, #2 wc
1d80c     47 00 00 FF 
1d810     9C E4 85 F1 | 	sub	objptr, ##36508
1d814     0C 4E 05 C1 |  if_b	add	fp, #12
1d818     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1d81c     0C 4E 85 C1 |  if_b	sub	fp, #12
1d820     40 00 90 4D |  if_c_and_nz	jmp	#LR__2310
1d824     00 12 06 F6 | 	mov	arg01, #0
1d828     98 05 B1 FD | 	call	#__system___getiolock_0620
1d82c     FD 12 02 F6 | 	mov	arg01, result1
1d830     E0 A8 B0 FD | 	call	#__system___lockmem
1d834     C4 01 00 FF 
1d838     BE 14 06 F6 | 	mov	arg02, ##@LR__6140
1d83c     00 12 06 F6 | 	mov	arg01, #0
1d840     00 16 06 F6 | 	mov	arg03, #0
1d844     C4 B5 B0 FD | 	call	#__system___basic_print_string
1d848     00 12 06 F6 | 	mov	arg01, #0
1d84c     74 05 B1 FD | 	call	#__system___getiolock_0620
1d850     FD 00 68 FC | 	wrlong	#0, result1
1d854     27 12 06 F6 | 	mov	arg01, #39
1d858     00 14 06 F6 | 	mov	arg02, #0
1d85c     5C 6E B0 FD | 	call	#_printerror
1d860     60 02 90 FD | 	jmp	#LR__2323
1d864                 | LR__2310
1d864     B8 FF BE FD | 	call	#_pop
1d868     FF 16 02 F6 | 	mov	arg03, result3
1d86c     A7 FA 61 FC | 	wrlong	result1, fp
1d870     04 4E 05 F1 | 	add	fp, #4
1d874     A7 FC 61 FC | 	wrlong	result2, fp
1d878     04 4E 05 F1 | 	add	fp, #4
1d87c     A7 16 62 FC | 	wrlong	arg03, fp
1d880                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1d880     08 4E 85 F1 | 	sub	fp, #8
1d884     2B 16 0E F2 | 	cmp	arg03, #43 wz
1d888     18 00 90 5D |  if_ne	jmp	#LR__2311
1d88c     A7 12 02 FB | 	rdlong	arg01, fp
1d890     04 01 BF FD | 	call	#_convertstring
1d894     A7 FA 61 FC | 	wrlong	result1, fp
1d898     08 4E 05 F1 | 	add	fp, #8
1d89c     A7 3E 68 FC | 	wrlong	#31, fp
1d8a0     08 4E 85 F1 | 	sub	fp, #8
1d8a4                 | LR__2311
1d8a4                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1d8a4     08 4E 05 F1 | 	add	fp, #8
1d8a8     A7 16 02 FB | 	rdlong	arg03, fp
1d8ac     08 4E 85 F1 | 	sub	fp, #8
1d8b0     1F 16 0E F2 | 	cmp	arg03, #31 wz
1d8b4     40 00 90 AD |  if_e	jmp	#LR__2312
1d8b8     00 12 06 F6 | 	mov	arg01, #0
1d8bc     04 05 B1 FD | 	call	#__system___getiolock_0620
1d8c0     FD 12 02 F6 | 	mov	arg01, result1
1d8c4     4C A8 B0 FD | 	call	#__system___lockmem
1d8c8     C4 01 00 FF 
1d8cc     C4 14 06 F6 | 	mov	arg02, ##@LR__6141
1d8d0     00 12 06 F6 | 	mov	arg01, #0
1d8d4     00 16 06 F6 | 	mov	arg03, #0
1d8d8     30 B5 B0 FD | 	call	#__system___basic_print_string
1d8dc     00 12 06 F6 | 	mov	arg01, #0
1d8e0     E0 04 B1 FD | 	call	#__system___getiolock_0620
1d8e4     FD 00 68 FC | 	wrlong	#0, result1
1d8e8     0F 12 06 F6 | 	mov	arg01, #15
1d8ec     00 14 06 F6 | 	mov	arg02, #0
1d8f0     C8 6D B0 FD | 	call	#_printerror
1d8f4     CC 01 90 FD | 	jmp	#LR__2323
1d8f8                 | LR__2312
1d8f8                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1d8f8     A7 12 02 FB | 	rdlong	arg01, fp
1d8fc     01 14 06 F6 | 	mov	arg02, #1
1d900     90 C8 B0 FD | 	call	#__system__Left_S
1d904     FD 12 02 F6 | 	mov	arg01, result1
1d908     C4 01 00 FF 
1d90c     CA 14 06 F6 | 	mov	arg02, ##@LR__6142
1d910     28 A8 B0 FD | 	call	#__system___string_cmp
1d914     00 FA 0D F2 | 	cmp	result1, #0 wz
1d918     48 00 90 5D |  if_ne	jmp	#LR__2315
1d91c     C4 01 00 FF 
1d920     CC 26 06 F6 | 	mov	local01, ##@LR__6143
1d924     A7 16 02 FB | 	rdlong	arg03, fp
1d928     0B 13 02 F6 | 	mov	arg01, arg03
1d92c     09 29 02 F6 | 	mov	local02, arg01
1d930     97 06 48 FB | 	callpa	#(@LR__2314-@LR__2313)>>2,fcache_load_ptr_
1d934                 | LR__2313
1d934     14 FB C9 FA | 	rdbyte	result1, local02 wz
1d938     01 28 06 51 |  if_ne	add	local02, #1
1d93c     F4 FF 9F 5D |  if_ne	jmp	#LR__2313
1d940                 | LR__2314
1d940     09 29 82 F1 | 	sub	local02, arg01
1d944     14 15 02 F6 | 	mov	arg02, local02
1d948     01 14 86 F1 | 	sub	arg02, #1
1d94c     0B 13 02 F6 | 	mov	arg01, arg03
1d950     C8 C8 B0 FD | 	call	#__system__Right_S
1d954     FD 14 02 F6 | 	mov	arg02, result1
1d958     13 13 02 F6 | 	mov	arg01, local01
1d95c     10 A8 B0 FD | 	call	#__system___string_concat
1d960     A7 FA 61 FC | 	wrlong	result1, fp
1d964                 | LR__2315
1d964                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1d964     A7 12 02 FB | 	rdlong	arg01, fp
1d968     01 14 06 F6 | 	mov	arg02, #1
1d96c     24 C8 B0 FD | 	call	#__system__Left_S
1d970     FD 12 02 F6 | 	mov	arg01, result1
1d974     C4 01 00 FF 
1d978     CF 14 06 F6 | 	mov	arg02, ##@LR__6144
1d97c     BC A7 B0 FD | 	call	#__system___string_cmp
1d980     00 FA 0D F2 | 	cmp	result1, #0 wz
1d984     48 00 90 5D |  if_ne	jmp	#LR__2318
1d988     C4 01 00 FF 
1d98c     D1 26 06 F6 | 	mov	local01, ##@LR__6145
1d990     A7 16 02 FB | 	rdlong	arg03, fp
1d994     0B 13 02 F6 | 	mov	arg01, arg03
1d998     09 29 02 F6 | 	mov	local02, arg01
1d99c     97 06 48 FB | 	callpa	#(@LR__2317-@LR__2316)>>2,fcache_load_ptr_
1d9a0                 | LR__2316
1d9a0     14 FB C9 FA | 	rdbyte	result1, local02 wz
1d9a4     01 28 06 51 |  if_ne	add	local02, #1
1d9a8     F4 FF 9F 5D |  if_ne	jmp	#LR__2316
1d9ac                 | LR__2317
1d9ac     09 29 82 F1 | 	sub	local02, arg01
1d9b0     14 15 02 F6 | 	mov	arg02, local02
1d9b4     01 14 86 F1 | 	sub	arg02, #1
1d9b8     0B 13 02 F6 | 	mov	arg01, arg03
1d9bc     5C C8 B0 FD | 	call	#__system__Right_S
1d9c0     FD 14 02 F6 | 	mov	arg02, result1
1d9c4     13 13 02 F6 | 	mov	arg01, local01
1d9c8     A4 A7 B0 FD | 	call	#__system___string_concat
1d9cc     A7 FA 61 FC | 	wrlong	result1, fp
1d9d0                 | LR__2318
1d9d0     A7 12 02 FB | 	rdlong	arg01, fp
1d9d4     C8 DD B0 FD | 	call	#__system____builtin_atof
1d9d8     1C 4E 05 F1 | 	add	fp, #28
1d9dc     A7 FA 61 FC | 	wrlong	result1, fp
1d9e0     1C 4E 85 F1 | 	sub	fp, #28
1d9e4     A7 12 02 FB | 	rdlong	arg01, fp
1d9e8     00 14 06 F6 | 	mov	arg02, #0
1d9ec     18 DC B0 FD | 	call	#__system____builtin_atoi
1d9f0     18 4E 05 F1 | 	add	fp, #24
1d9f4     A7 FA 61 FC | 	wrlong	result1, fp
1d9f8                 | ' fval=val(t1.result.sresult)
1d9f8                 | ' ival=val%(t1.result.sresult)
1d9f8                 | ' if fval=ival then
1d9f8     04 4E 05 F1 | 	add	fp, #4
1d9fc     A7 26 02 FB | 	rdlong	local01, fp
1da00     1C 4E 85 F1 | 	sub	fp, #28
1da04     FD 12 52 F6 | 	abs	arg01, result1 wc
1da08     1F 2A C6 C9 |  if_b	decod	local03, #31
1da0c     00 2A 06 36 |  if_ae	mov	local03, #0
1da10     78 D1 B0 FD | 	call	#__system___float_fromuns
1da14     15 FB 61 F5 | 	xor	result1, local03
1da18     FD 14 02 F6 | 	mov	arg02, result1
1da1c     13 13 02 F6 | 	mov	arg01, local01
1da20     01 16 06 F6 | 	mov	arg03, #1
1da24     9C D9 B0 FD | 	call	#__system___float_cmp
1da28     00 FA 0D F2 | 	cmp	result1, #0 wz
1da2c     20 00 90 5D |  if_ne	jmp	#LR__2319
1da30     18 4E 05 F1 | 	add	fp, #24
1da34     A7 26 02 FB | 	rdlong	local01, fp
1da38     18 4E 85 F1 | 	sub	fp, #24
1da3c     A7 26 62 FC | 	wrlong	local01, fp
1da40     08 4E 05 F1 | 	add	fp, #8
1da44     A7 38 68 FC | 	wrlong	#28, fp
1da48     08 4E 85 F1 | 	sub	fp, #8
1da4c     6C 00 90 FD | 	jmp	#LR__2322
1da50                 | LR__2319
1da50                 | '   if fval=0 andalso ival<>0 then
1da50     1C 4E 05 F1 | 	add	fp, #28
1da54     A7 12 02 FB | 	rdlong	arg01, fp
1da58     1C 4E 85 F1 | 	sub	fp, #28
1da5c     00 14 06 F6 | 	mov	arg02, #0
1da60     01 16 06 F6 | 	mov	arg03, #1
1da64     5C D9 B0 FD | 	call	#__system___float_cmp
1da68     00 FA 0D F2 | 	cmp	result1, #0 wz
1da6c     30 00 90 5D |  if_ne	jmp	#LR__2320
1da70     18 4E 05 F1 | 	add	fp, #24
1da74     A7 26 0A FB | 	rdlong	local01, fp wz
1da78     18 4E 85 F1 | 	sub	fp, #24
1da7c     20 00 90 AD |  if_e	jmp	#LR__2320
1da80     18 4E 05 F1 | 	add	fp, #24
1da84     A7 26 02 FB | 	rdlong	local01, fp
1da88     18 4E 85 F1 | 	sub	fp, #24
1da8c     A7 26 62 FC | 	wrlong	local01, fp
1da90     08 4E 05 F1 | 	add	fp, #8
1da94     A7 38 68 FC | 	wrlong	#28, fp
1da98     08 4E 85 F1 | 	sub	fp, #8
1da9c     1C 00 90 FD | 	jmp	#LR__2321
1daa0                 | LR__2320
1daa0     1C 4E 05 F1 | 	add	fp, #28
1daa4     A7 26 02 FB | 	rdlong	local01, fp
1daa8     1C 4E 85 F1 | 	sub	fp, #28
1daac     A7 26 62 FC | 	wrlong	local01, fp
1dab0     08 4E 05 F1 | 	add	fp, #8
1dab4     A7 3C 68 FC | 	wrlong	#30, fp
1dab8     08 4E 85 F1 | 	sub	fp, #8
1dabc                 | LR__2321
1dabc                 | LR__2322
1dabc     A7 12 02 F6 | 	mov	arg01, fp
1dac0     F4 FD BE FD | 	call	#_push
1dac4                 | LR__2323
1dac4     A7 F0 03 F6 | 	mov	ptra, fp
1dac8     B2 00 A0 FD | 	call	#popregs_
1dacc                 | _do_val_ret
1dacc     2D 00 64 FD | 	ret
1dad0                 | 
1dad0                 | ' 
1dad0                 | ' ' ------------------ waitclock
1dad0                 | ' 
1dad0                 | ' sub do_waitclock
1dad0                 | _do_waitclock
1dad0     52 00 00 FF 
1dad4     EC E4 05 F1 | 	add	objptr, ##42220
1dad8     F2 00 02 FB | 	rdlong	_var01, objptr
1dadc                 | ' c=hkcnt
1dadc                 | ' do: loop until hkcnt<>c
1dadc                 | LR__2330
1dadc     F2 02 02 FB | 	rdlong	_var02, objptr
1dae0     00 03 0A F2 | 	cmp	_var02, _var01 wz
1dae4     F4 FF 9F AD |  if_e	jmp	#LR__2330
1dae8     52 00 00 FF 
1daec     EC E4 85 F1 | 	sub	objptr, ##42220
1daf0                 | _do_waitclock_ret
1daf0     2D 00 64 FD | 	ret
1daf4                 | 
1daf4                 | ' 
1daf4                 | ' ' ------------------ waitms
1daf4                 | ' 
1daf4                 | ' sub do_waitms
1daf4                 | _do_waitms
1daf4     01 4A 05 F6 | 	mov	COUNT_, #1
1daf8     A8 00 A0 FD | 	call	#pushregs_
1dafc     18 F0 07 F1 | 	add	ptra, #24
1db00     1C FD BE FD | 	call	#_pop
1db04     A7 FA 61 FC | 	wrlong	result1, fp
1db08     04 4E 05 F1 | 	add	fp, #4
1db0c     A7 FC 61 FC | 	wrlong	result2, fp
1db10     04 4E 05 F1 | 	add	fp, #4
1db14     A7 FE 61 FC | 	wrlong	result3, fp
1db18     08 4E 85 F1 | 	sub	fp, #8
1db1c     A7 12 02 F6 | 	mov	arg01, fp
1db20     E0 FE BE FD | 	call	#_converttoint
1db24     0C 4E 05 F1 | 	add	fp, #12
1db28     A7 FA 61 FC | 	wrlong	result1, fp
1db2c                 | ' 
1db2c                 | ' t1=pop()  
1db2c                 | ' t=converttoint(t1)
1db2c                 | ' if t<0 then return
1db2c     0C 4E 85 F1 | 	sub	fp, #12
1db30     00 FA 55 F2 | 	cmps	result1, #0 wc
1db34     E4 00 90 CD |  if_b	jmp	#LR__2346
1db38                 | ' if t < 1000 then 
1db38     0C 4E 05 F1 | 	add	fp, #12
1db3c     A7 12 02 FB | 	rdlong	arg01, fp
1db40     0C 4E 85 F1 | 	sub	fp, #12
1db44     01 00 00 FF 
1db48     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
1db4c     14 00 90 3D |  if_ae	jmp	#LR__2340
1db50     0C 4E 05 F1 | 	add	fp, #12
1db54     A7 12 02 FB | 	rdlong	arg01, fp
1db58     0C 4E 85 F1 | 	sub	fp, #12
1db5c     A8 A8 B0 FD | 	call	#__system___waitms
1db60     B8 00 90 FD | 	jmp	#LR__2345
1db64                 | LR__2340
1db64     10 4E 05 F1 | 	add	fp, #16
1db68     A7 02 68 FC | 	wrlong	#1, fp
1db6c     04 4E 85 F1 | 	sub	fp, #4
1db70     A7 12 02 FB | 	rdlong	arg01, fp
1db74     09 13 52 F6 | 	abs	arg01, arg01 wc
1db78     01 00 00 FF 
1db7c     E8 13 16 FD | 	qdiv	arg01, ##1000
1db80                 | '   for i=1 to t/1000
1db80     0C 4E 85 F1 | 	sub	fp, #12
1db84     18 26 62 FD | 	getqx	local01
1db88     13 27 82 F6 | 	negc	local01, local01
1db8c     01 26 06 F1 | 	add	local01, #1
1db90                 | LR__2341
1db90     10 4E 05 F1 | 	add	fp, #16
1db94     A7 12 02 FB | 	rdlong	arg01, fp
1db98     10 4E 85 F1 | 	sub	fp, #16
1db9c     13 13 52 F2 | 	cmps	arg01, local01 wc
1dba0     54 00 90 3D |  if_ae	jmp	#LR__2344
1dba4     01 00 00 FF 
1dba8     E8 13 06 F6 | 	mov	arg01, ##1000
1dbac     58 A8 B0 FD | 	call	#__system___waitms
1dbb0                 | '     waitms(1000)
1dbb0                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1dbb0     E0 12 06 F6 | 	mov	arg01, #224
1dbb4     48 9C B0 FD | 	call	#_usbnew_spin2_keystate
1dbb8     00 FA 0D F2 | 	cmp	result1, #0 wz
1dbbc     10 00 90 5D |  if_ne	jmp	#LR__2342
1dbc0     E4 12 06 F6 | 	mov	arg01, #228
1dbc4     38 9C B0 FD | 	call	#_usbnew_spin2_keystate
1dbc8     00 FA 0D F2 | 	cmp	result1, #0 wz
1dbcc     10 00 90 AD |  if_e	jmp	#LR__2343
1dbd0                 | LR__2342
1dbd0     06 12 06 F6 | 	mov	arg01, #6
1dbd4     28 9C B0 FD | 	call	#_usbnew_spin2_keystate
1dbd8     00 FA 0D F2 | 	cmp	result1, #0 wz
1dbdc     3C 00 90 5D |  if_ne	jmp	#LR__2346
1dbe0                 | LR__2343
1dbe0     10 4E 05 F1 | 	add	fp, #16
1dbe4     A7 12 02 FB | 	rdlong	arg01, fp
1dbe8     01 12 06 F1 | 	add	arg01, #1
1dbec     A7 12 62 FC | 	wrlong	arg01, fp
1dbf0     10 4E 85 F1 | 	sub	fp, #16
1dbf4     98 FF 9F FD | 	jmp	#LR__2341
1dbf8                 | LR__2344
1dbf8     0C 4E 05 F1 | 	add	fp, #12
1dbfc     A7 26 02 FB | 	rdlong	local01, fp
1dc00     13 27 52 F6 | 	abs	local01, local01 wc
1dc04     01 00 00 FF 
1dc08     E8 27 16 FD | 	qdiv	local01, ##1000
1dc0c     0C 4E 85 F1 | 	sub	fp, #12
1dc10     19 26 62 FD | 	getqy	local01
1dc14     13 13 82 F6 | 	negc	arg01, local01
1dc18     EC A7 B0 FD | 	call	#__system___waitms
1dc1c                 | LR__2345
1dc1c                 | LR__2346
1dc1c     A7 F0 03 F6 | 	mov	ptra, fp
1dc20     B2 00 A0 FD | 	call	#popregs_
1dc24                 | _do_waitms_ret
1dc24     2D 00 64 FD | 	ret
1dc28                 | 
1dc28                 | ' 
1dc28                 | ' ' ------------------ waitvbl
1dc28                 | ' 
1dc28                 | ' sub do_waitvbl
1dc28                 | _do_waitvbl
1dc28     01 12 06 F6 | 	mov	arg01, #1
1dc2c     E8 87 B0 FD | 	call	#_hg010b_spin2_waitvbl
1dc30                 | _do_waitvbl_ret
1dc30     2D 00 64 FD | 	ret
1dc34                 | 
1dc34                 | ' 
1dc34                 | ' ' ------------------ wrpin
1dc34                 | ' 
1dc34                 | ' sub do_wrpin
1dc34                 | _do_wrpin
1dc34     01 4A 05 F6 | 	mov	COUNT_, #1
1dc38     A8 00 A0 FD | 	call	#pushregs_
1dc3c     18 F0 07 F1 | 	add	ptra, #24
1dc40     DC FB BE FD | 	call	#_pop
1dc44     FD 14 02 F6 | 	mov	arg02, result1
1dc48     FE 12 02 F6 | 	mov	arg01, result2
1dc4c     FF 26 02 F6 | 	mov	local01, result3
1dc50     A7 14 62 FC | 	wrlong	arg02, fp
1dc54     04 4E 05 F1 | 	add	fp, #4
1dc58     A7 12 62 FC | 	wrlong	arg01, fp
1dc5c     04 4E 05 F1 | 	add	fp, #4
1dc60     A7 26 62 FC | 	wrlong	local01, fp
1dc64     08 4E 85 F1 | 	sub	fp, #8
1dc68     B4 FB BE FD | 	call	#_pop
1dc6c     FF 26 02 F6 | 	mov	local01, result3
1dc70     0C 4E 05 F1 | 	add	fp, #12
1dc74     A7 FA 61 FC | 	wrlong	result1, fp
1dc78     04 4E 05 F1 | 	add	fp, #4
1dc7c     A7 FC 61 FC | 	wrlong	result2, fp
1dc80     04 4E 05 F1 | 	add	fp, #4
1dc84     A7 26 62 FC | 	wrlong	local01, fp
1dc88     08 4E 85 F1 | 	sub	fp, #8
1dc8c     A7 12 02 F6 | 	mov	arg01, fp
1dc90     0C 4E 85 F1 | 	sub	fp, #12
1dc94     6C FD BE FD | 	call	#_converttoint
1dc98     FD 26 02 F6 | 	mov	local01, result1
1dc9c     A7 12 02 F6 | 	mov	arg01, fp
1dca0     60 FD BE FD | 	call	#_converttoint
1dca4     13 FB 01 FC | 	wrpin	result1, local01
1dca8     A7 F0 03 F6 | 	mov	ptra, fp
1dcac     B2 00 A0 FD | 	call	#popregs_
1dcb0                 | _do_wrpin_ret
1dcb0     2D 00 64 FD | 	ret
1dcb4                 | 
1dcb4                 | ' 
1dcb4                 | ' ' ------------------ wxpin
1dcb4                 | ' 
1dcb4                 | ' sub do_wxpin
1dcb4                 | _do_wxpin
1dcb4     01 4A 05 F6 | 	mov	COUNT_, #1
1dcb8     A8 00 A0 FD | 	call	#pushregs_
1dcbc     18 F0 07 F1 | 	add	ptra, #24
1dcc0     5C FB BE FD | 	call	#_pop
1dcc4     FD 14 02 F6 | 	mov	arg02, result1
1dcc8     FE 12 02 F6 | 	mov	arg01, result2
1dccc     FF 26 02 F6 | 	mov	local01, result3
1dcd0     A7 14 62 FC | 	wrlong	arg02, fp
1dcd4     04 4E 05 F1 | 	add	fp, #4
1dcd8     A7 12 62 FC | 	wrlong	arg01, fp
1dcdc     04 4E 05 F1 | 	add	fp, #4
1dce0     A7 26 62 FC | 	wrlong	local01, fp
1dce4     08 4E 85 F1 | 	sub	fp, #8
1dce8     34 FB BE FD | 	call	#_pop
1dcec     FF 26 02 F6 | 	mov	local01, result3
1dcf0     0C 4E 05 F1 | 	add	fp, #12
1dcf4     A7 FA 61 FC | 	wrlong	result1, fp
1dcf8     04 4E 05 F1 | 	add	fp, #4
1dcfc     A7 FC 61 FC | 	wrlong	result2, fp
1dd00     04 4E 05 F1 | 	add	fp, #4
1dd04     A7 26 62 FC | 	wrlong	local01, fp
1dd08     08 4E 85 F1 | 	sub	fp, #8
1dd0c     A7 12 02 F6 | 	mov	arg01, fp
1dd10     0C 4E 85 F1 | 	sub	fp, #12
1dd14     EC FC BE FD | 	call	#_converttoint
1dd18     FD 26 02 F6 | 	mov	local01, result1
1dd1c     A7 12 02 F6 | 	mov	arg01, fp
1dd20     E0 FC BE FD | 	call	#_converttoint
1dd24     13 FB 11 FC | 	wxpin	result1, local01
1dd28     A7 F0 03 F6 | 	mov	ptra, fp
1dd2c     B2 00 A0 FD | 	call	#popregs_
1dd30                 | _do_wxpin_ret
1dd30     2D 00 64 FD | 	ret
1dd34                 | 
1dd34                 | ' 
1dd34                 | ' ' ------------------ wypin
1dd34                 | ' 
1dd34                 | ' sub do_wypin
1dd34                 | _do_wypin
1dd34     01 4A 05 F6 | 	mov	COUNT_, #1
1dd38     A8 00 A0 FD | 	call	#pushregs_
1dd3c     18 F0 07 F1 | 	add	ptra, #24
1dd40     DC FA BE FD | 	call	#_pop
1dd44     FD 14 02 F6 | 	mov	arg02, result1
1dd48     FE 12 02 F6 | 	mov	arg01, result2
1dd4c     FF 26 02 F6 | 	mov	local01, result3
1dd50     A7 14 62 FC | 	wrlong	arg02, fp
1dd54     04 4E 05 F1 | 	add	fp, #4
1dd58     A7 12 62 FC | 	wrlong	arg01, fp
1dd5c     04 4E 05 F1 | 	add	fp, #4
1dd60     A7 26 62 FC | 	wrlong	local01, fp
1dd64     08 4E 85 F1 | 	sub	fp, #8
1dd68     B4 FA BE FD | 	call	#_pop
1dd6c     FF 26 02 F6 | 	mov	local01, result3
1dd70     0C 4E 05 F1 | 	add	fp, #12
1dd74     A7 FA 61 FC | 	wrlong	result1, fp
1dd78     04 4E 05 F1 | 	add	fp, #4
1dd7c     A7 FC 61 FC | 	wrlong	result2, fp
1dd80     04 4E 05 F1 | 	add	fp, #4
1dd84     A7 26 62 FC | 	wrlong	local01, fp
1dd88     08 4E 85 F1 | 	sub	fp, #8
1dd8c     A7 12 02 F6 | 	mov	arg01, fp
1dd90     0C 4E 85 F1 | 	sub	fp, #12
1dd94     6C FC BE FD | 	call	#_converttoint
1dd98     FD 26 02 F6 | 	mov	local01, result1
1dd9c     A7 12 02 F6 | 	mov	arg01, fp
1dda0     60 FC BE FD | 	call	#_converttoint
1dda4     13 FB 21 FC | 	wypin	result1, local01
1dda8     A7 F0 03 F6 | 	mov	ptra, fp
1ddac     B2 00 A0 FD | 	call	#popregs_
1ddb0                 | _do_wypin_ret
1ddb0     2D 00 64 FD | 	ret
1ddb4                 | 
1ddb4                 | ' 
1ddb4                 | ' 
1ddb4                 | ' 
1ddb4                 | ' 
1ddb4                 | ' 
1ddb4                 | ' 
1ddb4                 | ' 
1ddb4                 | ' 
1ddb4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1ddb4                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1ddb4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1ddb4                 | ' 
1ddb4                 | ' 
1ddb4                 | ' '------------------ Assign
1ddb4                 | ' 
1ddb4                 | ' sub do_assign
1ddb4                 | _do_assign
1ddb4     05 4A 05 F6 | 	mov	COUNT_, #5
1ddb8     A8 00 A0 FD | 	call	#pushregs_
1ddbc     44 F0 07 F1 | 	add	ptra, #68
1ddc0     4A 00 00 FF 
1ddc4     A0 E4 05 F1 | 	add	objptr, ##38048
1ddc8     F2 16 02 FB | 	rdlong	arg03, objptr
1ddcc     0B 15 02 F6 | 	mov	arg02, arg03
1ddd0     01 14 66 F0 | 	shl	arg02, #1
1ddd4     0B 15 02 F1 | 	add	arg02, arg03
1ddd8     02 14 66 F0 | 	shl	arg02, #2
1dddc     03 00 00 FF 
1dde0     04 E4 85 F1 | 	sub	objptr, ##1540
1dde4     F2 14 02 F1 | 	add	arg02, objptr
1dde8     0A 15 02 FB | 	rdlong	arg02, arg02
1ddec     18 4E 05 F1 | 	add	fp, #24
1ddf0     A7 14 62 FC | 	wrlong	arg02, fp
1ddf4                 | ' 
1ddf4                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1ddf4                 | ' if variables(varnum).vartype<array_no_type then 
1ddf4     18 4E 85 F1 | 	sub	fp, #24
1ddf8     04 14 66 F0 | 	shl	arg02, #4
1ddfc     32 00 00 FF 
1de00     84 E4 85 F1 | 	sub	objptr, ##25732
1de04     F2 14 02 F1 | 	add	arg02, objptr
1de08     0C 14 06 F1 | 	add	arg02, #12
1de0c     0A 17 02 FB | 	rdlong	arg03, arg02
1de10     00 17 16 F2 | 	cmp	arg03, #256 wc
1de14     15 00 00 FF 
1de18     18 E4 85 F1 | 	sub	objptr, ##10776
1de1c     18 01 90 3D |  if_ae	jmp	#LR__2350
1de20     FC F9 BE FD | 	call	#_pop
1de24     A7 FA 61 FC | 	wrlong	result1, fp
1de28     04 4E 05 F1 | 	add	fp, #4
1de2c     A7 FC 61 FC | 	wrlong	result2, fp
1de30     04 4E 05 F1 | 	add	fp, #4
1de34     A7 FE 61 FC | 	wrlong	result3, fp
1de38     08 4E 85 F1 | 	sub	fp, #8
1de3c     A7 16 02 FB | 	rdlong	arg03, fp
1de40     04 4E 05 F1 | 	add	fp, #4
1de44     A7 14 02 FB | 	rdlong	arg02, fp
1de48     14 4E 05 F1 | 	add	fp, #20
1de4c     A7 12 02 FB | 	rdlong	arg01, fp
1de50     04 12 66 F0 | 	shl	arg01, #4
1de54     15 00 00 FF 
1de58     18 E4 05 F1 | 	add	objptr, ##10776
1de5c     F2 12 02 F1 | 	add	arg01, objptr
1de60     04 12 06 F1 | 	add	arg01, #4
1de64     09 17 62 FC | 	wrlong	arg03, arg01
1de68     A7 16 02 FB | 	rdlong	arg03, fp
1de6c     04 16 66 F0 | 	shl	arg03, #4
1de70     F2 16 02 F1 | 	add	arg03, objptr
1de74     08 16 06 F1 | 	add	arg03, #8
1de78     0B 15 62 FC | 	wrlong	arg02, arg03
1de7c     A7 16 02 FB | 	rdlong	arg03, fp
1de80     04 16 66 F0 | 	shl	arg03, #4
1de84     F2 16 02 F1 | 	add	arg03, objptr
1de88     10 4E 85 F1 | 	sub	fp, #16
1de8c     A7 14 02 FB | 	rdlong	arg02, fp
1de90     0C 16 06 F1 | 	add	arg03, #12
1de94     0B 15 62 FC | 	wrlong	arg02, arg03
1de98                 | '   t1=pop() 
1de98                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1de98                 | '   if variables(varnum).vartype<>result_string2 then return
1de98     10 4E 05 F1 | 	add	fp, #16
1de9c     A7 16 02 FB | 	rdlong	arg03, fp
1dea0     18 4E 85 F1 | 	sub	fp, #24
1dea4     04 16 66 F0 | 	shl	arg03, #4
1dea8     F2 16 02 F1 | 	add	arg03, objptr
1deac     0C 16 06 F1 | 	add	arg03, #12
1deb0     0B 17 02 FB | 	rdlong	arg03, arg03
1deb4     2B 16 0E F2 | 	cmp	arg03, #43 wz
1deb8     15 00 00 FF 
1debc     18 E4 85 F1 | 	sub	objptr, ##10776
1dec0     EC 04 90 5D |  if_ne	jmp	#LR__2373
1dec4     18 4E 05 F1 | 	add	fp, #24
1dec8     A7 16 02 FB | 	rdlong	arg03, fp
1decc     0B 27 02 F6 | 	mov	local01, arg03
1ded0     04 26 66 F0 | 	shl	local01, #4
1ded4     15 00 00 FF 
1ded8     18 E4 05 F1 | 	add	objptr, ##10776
1dedc     F2 26 02 F1 | 	add	local01, objptr
1dee0     18 4E 85 F1 | 	sub	fp, #24
1dee4     04 16 66 F0 | 	shl	arg03, #4
1dee8     F2 16 02 F1 | 	add	arg03, objptr
1deec     04 16 06 F1 | 	add	arg03, #4
1def0     0B 13 02 FB | 	rdlong	arg01, arg03
1def4     15 00 00 FF 
1def8     18 E4 85 F1 | 	sub	objptr, ##10776
1defc     98 FA BE FD | 	call	#_convertstring
1df00     04 26 06 F1 | 	add	local01, #4
1df04     13 FB 61 FC | 	wrlong	result1, local01
1df08     18 4E 05 F1 | 	add	fp, #24
1df0c     A7 26 02 FB | 	rdlong	local01, fp
1df10     18 4E 85 F1 | 	sub	fp, #24
1df14     04 26 66 F0 | 	shl	local01, #4
1df18     15 00 00 FF 
1df1c     18 E4 05 F1 | 	add	objptr, ##10776
1df20     F2 26 02 F1 | 	add	local01, objptr
1df24     0C 26 06 F1 | 	add	local01, #12
1df28     13 3F 68 FC | 	wrlong	#31, local01
1df2c                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1df2c                 | '   variables(varnum).vartype=result_string
1df2c                 | '   return
1df2c     15 00 00 FF 
1df30     18 E4 85 F1 | 	sub	objptr, ##10776
1df34     78 04 90 FD | 	jmp	#LR__2373
1df38                 | LR__2350
1df38                 | ' for i=0 to 2 : arrid(i)=0 : next i
1df38     1C 4E 05 F1 | 	add	fp, #28
1df3c     A7 00 68 FC | 	wrlong	#0, fp
1df40     97 16 48 FB | 	callpa	#(@LR__2352-@LR__2351)>>2,fcache_load_ptr_
1df44                 | LR__2351
1df44     A7 26 02 FB | 	rdlong	local01, fp
1df48     02 26 66 F0 | 	shl	local01, #2
1df4c     18 4E 05 F1 | 	add	fp, #24
1df50     A7 26 02 F1 | 	add	local01, fp
1df54     13 01 68 FC | 	wrlong	#0, local01
1df58     18 4E 85 F1 | 	sub	fp, #24
1df5c     A7 26 02 FB | 	rdlong	local01, fp
1df60     01 26 06 F1 | 	add	local01, #1
1df64     A7 26 62 FC | 	wrlong	local01, fp
1df68     03 26 16 F2 | 	cmp	local01, #3 wc
1df6c     D4 FF 9F CD |  if_b	jmp	#LR__2351
1df70                 | LR__2352
1df70     4A 00 00 FF 
1df74     A0 E4 05 F1 | 	add	objptr, ##38048
1df78     F2 16 02 FB | 	rdlong	arg03, objptr
1df7c     0B 27 02 F6 | 	mov	local01, arg03
1df80     01 26 66 F0 | 	shl	local01, #1
1df84     0B 27 02 F1 | 	add	local01, arg03
1df88     02 26 66 F0 | 	shl	local01, #2
1df8c     03 00 00 FF 
1df90     04 E4 85 F1 | 	sub	objptr, ##1540
1df94     F2 26 02 F1 | 	add	local01, objptr
1df98     04 26 06 F1 | 	add	local01, #4
1df9c     13 29 02 FB | 	rdlong	local02, local01
1dfa0     04 4E 05 F1 | 	add	fp, #4
1dfa4     A7 28 62 FC | 	wrlong	local02, fp
1dfa8     20 4E 85 F1 | 	sub	fp, #32
1dfac     47 00 00 FF 
1dfb0     9C E4 85 F1 | 	sub	objptr, ##36508
1dfb4     68 F8 BE FD | 	call	#_pop
1dfb8     A7 FA 61 FC | 	wrlong	result1, fp
1dfbc     04 4E 05 F1 | 	add	fp, #4
1dfc0     A7 FC 61 FC | 	wrlong	result2, fp
1dfc4     04 4E 05 F1 | 	add	fp, #4
1dfc8     A7 FE 61 FC | 	wrlong	result3, fp
1dfcc                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1dfcc                 | ' t1=pop() ' var value
1dfcc                 | ' if numpar>0 then
1dfcc     18 4E 05 F1 | 	add	fp, #24
1dfd0     A7 2A 02 FB | 	rdlong	local03, fp
1dfd4     20 4E 85 F1 | 	sub	fp, #32
1dfd8     01 2A 16 F2 | 	cmp	local03, #1 wc
1dfdc     78 00 90 CD |  if_b	jmp	#LR__2355
1dfe0                 | '   for i=numpar to 1 step -1
1dfe0     20 4E 05 F1 | 	add	fp, #32
1dfe4     A7 2C 0A FB | 	rdlong	local04, fp wz
1dfe8     04 4E 85 F1 | 	sub	fp, #4
1dfec     A7 2C 62 FC | 	wrlong	local04, fp
1dff0     1C 4E 85 F1 | 	sub	fp, #28
1dff4     60 00 90 AD |  if_e	jmp	#LR__2354
1dff8                 | LR__2353
1dff8     24 F8 BE FD | 	call	#_pop
1dffc     0C 4E 05 F1 | 	add	fp, #12
1e000     A7 FA 61 FC | 	wrlong	result1, fp
1e004     04 4E 05 F1 | 	add	fp, #4
1e008     A7 FC 61 FC | 	wrlong	result2, fp
1e00c     04 4E 05 F1 | 	add	fp, #4
1e010     A7 FE 61 FC | 	wrlong	result3, fp
1e014     08 4E 05 F1 | 	add	fp, #8
1e018     A7 2A 02 FB | 	rdlong	local03, fp
1e01c     01 2A 86 F1 | 	sub	local03, #1
1e020     02 2A 66 F0 | 	shl	local03, #2
1e024     18 4E 05 F1 | 	add	fp, #24
1e028     A7 2A 02 F1 | 	add	local03, fp
1e02c     28 4E 85 F1 | 	sub	fp, #40
1e030     A7 12 02 F6 | 	mov	arg01, fp
1e034     0C 4E 85 F1 | 	sub	fp, #12
1e038     C8 F9 BE FD | 	call	#_converttoint
1e03c     15 FB 61 FC | 	wrlong	result1, local03
1e040     1C 4E 05 F1 | 	add	fp, #28
1e044     A7 2C 02 FB | 	rdlong	local04, fp
1e048     01 2C 8E F1 | 	sub	local04, #1 wz
1e04c     A7 2C 62 FC | 	wrlong	local04, fp
1e050     1C 4E 85 F1 | 	sub	fp, #28
1e054     A0 FF 9F 5D |  if_ne	jmp	#LR__2353
1e058                 | LR__2354
1e058                 | LR__2355
1e058     18 4E 05 F1 | 	add	fp, #24
1e05c     A7 26 02 FB | 	rdlong	local01, fp
1e060     04 26 66 F0 | 	shl	local01, #4
1e064     15 00 00 FF 
1e068     18 E4 05 F1 | 	add	objptr, ##10776
1e06c     F2 26 02 F1 | 	add	local01, objptr
1e070     04 26 06 F1 | 	add	local01, #4
1e074     13 13 02 FB | 	rdlong	arg01, local01
1e078     0C 4E 05 F1 | 	add	fp, #12
1e07c     A7 12 62 FC | 	wrlong	arg01, fp
1e080     24 4E 85 F1 | 	sub	fp, #36
1e084     15 00 00 FF 
1e088     18 E4 85 F1 | 	sub	objptr, ##10776
1e08c     FC 68 B0 FD | 	call	#_pslpeek
1e090     FD 2C 32 F9 | 	getword	local04, result1, #0
1e094     28 4E 05 F1 | 	add	fp, #40
1e098     A7 2C 62 FC | 	wrlong	local04, fp
1e09c     04 4E 85 F1 | 	sub	fp, #4
1e0a0     A7 12 02 FB | 	rdlong	arg01, fp
1e0a4     24 4E 85 F1 | 	sub	fp, #36
1e0a8     02 12 06 F1 | 	add	arg01, #2
1e0ac     84 68 B0 FD | 	call	#_pspeek
1e0b0     FD FA E1 F8 | 	getbyte	result1, result1, #0
1e0b4     2C 4E 05 F1 | 	add	fp, #44
1e0b8     A7 FA 61 FC | 	wrlong	result1, fp
1e0bc                 | ' esize=pspeek(arrptr+2)
1e0bc                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1e0bc     08 4E 85 F1 | 	sub	fp, #8
1e0c0     A7 12 02 FB | 	rdlong	arg01, fp
1e0c4     24 4E 85 F1 | 	sub	fp, #36
1e0c8     04 12 06 F1 | 	add	arg01, #4
1e0cc     BC 68 B0 FD | 	call	#_pslpeek
1e0d0     FD 2C 02 F6 | 	mov	local04, result1
1e0d4     34 4E 05 F1 | 	add	fp, #52
1e0d8     A7 26 02 FB | 	rdlong	local01, fp
1e0dc     34 4E 85 F1 | 	sub	fp, #52
1e0e0     16 27 12 F2 | 	cmp	local01, local04 wc
1e0e4     54 00 90 3D |  if_ae	jmp	#LR__2356
1e0e8     24 4E 05 F1 | 	add	fp, #36
1e0ec     A7 12 02 FB | 	rdlong	arg01, fp
1e0f0     24 4E 85 F1 | 	sub	fp, #36
1e0f4     08 12 06 F1 | 	add	arg01, #8
1e0f8     90 68 B0 FD | 	call	#_pslpeek
1e0fc     FD 26 02 F6 | 	mov	local01, result1
1e100     38 4E 05 F1 | 	add	fp, #56
1e104     A7 2C 02 FB | 	rdlong	local04, fp
1e108     38 4E 85 F1 | 	sub	fp, #56
1e10c     13 2D 12 F2 | 	cmp	local04, local01 wc
1e110     28 00 90 3D |  if_ae	jmp	#LR__2356
1e114     24 4E 05 F1 | 	add	fp, #36
1e118     A7 12 02 FB | 	rdlong	arg01, fp
1e11c     24 4E 85 F1 | 	sub	fp, #36
1e120     0C 12 06 F1 | 	add	arg01, #12
1e124     64 68 B0 FD | 	call	#_pslpeek
1e128     3C 4E 05 F1 | 	add	fp, #60
1e12c     A7 2C 02 FB | 	rdlong	local04, fp
1e130     3C 4E 85 F1 | 	sub	fp, #60
1e134     FD 2C 12 F2 | 	cmp	local04, result1 wc
1e138     10 00 90 CD |  if_b	jmp	#LR__2357
1e13c                 | LR__2356
1e13c     31 12 06 F6 | 	mov	arg01, #49
1e140     00 14 06 F6 | 	mov	arg02, #0
1e144     74 65 B0 FD | 	call	#_printerror
1e148     64 02 90 FD | 	jmp	#LR__2373
1e14c                 | LR__2357
1e14c     24 4E 05 F1 | 	add	fp, #36
1e150     A7 12 02 FB | 	rdlong	arg01, fp
1e154     09 2D 02 F6 | 	mov	local04, arg01
1e158     10 2C 06 F1 | 	add	local04, #16
1e15c     24 4E 85 F1 | 	sub	fp, #36
1e160     04 12 06 F1 | 	add	arg01, #4
1e164     24 68 B0 FD | 	call	#_pslpeek
1e168     FD 26 02 F6 | 	mov	local01, result1
1e16c     38 4E 05 F1 | 	add	fp, #56
1e170     A7 28 02 FB | 	rdlong	local02, fp
1e174     14 27 02 FD | 	qmul	local01, local02
1e178     04 4E 85 F1 | 	sub	fp, #4
1e17c     A7 2A 02 FB | 	rdlong	local03, fp
1e180     10 4E 85 F1 | 	sub	fp, #16
1e184     A7 12 02 FB | 	rdlong	arg01, fp
1e188     24 4E 85 F1 | 	sub	fp, #36
1e18c     08 12 06 F1 | 	add	arg01, #8
1e190     18 28 62 FD | 	getqx	local02
1e194     14 2B 02 F1 | 	add	local03, local02
1e198     F0 67 B0 FD | 	call	#_pslpeek
1e19c     FD 28 02 F6 | 	mov	local02, result1
1e1a0     24 4E 05 F1 | 	add	fp, #36
1e1a4     A7 12 02 FB | 	rdlong	arg01, fp
1e1a8     24 4E 85 F1 | 	sub	fp, #36
1e1ac     04 12 06 F1 | 	add	arg01, #4
1e1b0     D8 67 B0 FD | 	call	#_pslpeek
1e1b4     FD 28 02 FD | 	qmul	local02, result1
1e1b8     3C 4E 05 F1 | 	add	fp, #60
1e1bc     A7 28 02 FB | 	rdlong	local02, fp
1e1c0     18 26 62 FD | 	getqx	local01
1e1c4     14 27 02 FD | 	qmul	local01, local02
1e1c8     10 4E 85 F1 | 	sub	fp, #16
1e1cc     A7 28 02 FB | 	rdlong	local02, fp
1e1d0     18 26 62 FD | 	getqx	local01
1e1d4     13 2B 02 F1 | 	add	local03, local01
1e1d8     15 29 02 FD | 	qmul	local02, local03
1e1dc     04 4E 05 F1 | 	add	fp, #4
1e1e0                 | ' 
1e1e0                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1e1e0                 | ' select case arrtype
1e1e0     18 2A 62 FD | 	getqx	local03
1e1e4     15 2D 02 F1 | 	add	local04, local03
1e1e8     A7 2C 62 FC | 	wrlong	local04, fp
1e1ec     08 4E 85 F1 | 	sub	fp, #8
1e1f0     A7 2E 02 FB | 	rdlong	local05, fp
1e1f4     28 4E 85 F1 | 	sub	fp, #40
1e1f8     00 2F 86 F1 | 	sub	local05, #256
1e1fc     0C 2E 26 F3 | 	fle	local05, #12
1e200     30 2E 62 FD | 	jmprel	local05
1e204                 | LR__2358
1e204     30 00 90 FD | 	jmp	#LR__2359
1e208     58 00 90 FD | 	jmp	#LR__2360
1e20c     6C 00 90 FD | 	jmp	#LR__2361
1e210     80 00 90 FD | 	jmp	#LR__2362
1e214     B0 00 90 FD | 	jmp	#LR__2363
1e218     E0 00 90 FD | 	jmp	#LR__2364
1e21c     F4 00 90 FD | 	jmp	#LR__2365
1e220     08 01 90 FD | 	jmp	#LR__2366
1e224     1C 01 90 FD | 	jmp	#LR__2367
1e228     30 01 90 FD | 	jmp	#LR__2368
1e22c     44 01 90 FD | 	jmp	#LR__2369
1e230     58 01 90 FD | 	jmp	#LR__2370
1e234     6C 01 90 FD | 	jmp	#LR__2371
1e238                 | LR__2359
1e238     A7 12 02 F6 | 	mov	arg01, fp
1e23c     30 4E 05 F1 | 	add	fp, #48
1e240     A7 14 02 FB | 	rdlong	arg02, fp
1e244     30 4E 85 F1 | 	sub	fp, #48
1e248     0C 16 06 F6 | 	mov	arg03, #12
1e24c     0B 00 00 FF 
1e250     CC E4 05 F1 | 	add	objptr, ##5836
1e254     B4 92 B0 FD | 	call	#_psram_spin2_write
1e258     0B 00 00 FF 
1e25c     CC E4 85 F1 | 	sub	objptr, ##5836
1e260     4C 01 90 FD | 	jmp	#LR__2372
1e264                 | LR__2360
1e264     30 4E 05 F1 | 	add	fp, #48
1e268     A7 12 02 FB | 	rdlong	arg01, fp
1e26c     30 4E 85 F1 | 	sub	fp, #48
1e270     A7 14 02 FB | 	rdlong	arg02, fp
1e274     74 66 B0 FD | 	call	#_pspoke
1e278     34 01 90 FD | 	jmp	#LR__2372
1e27c                 | LR__2361
1e27c     30 4E 05 F1 | 	add	fp, #48
1e280     A7 12 02 FB | 	rdlong	arg01, fp
1e284     30 4E 85 F1 | 	sub	fp, #48
1e288     A7 14 02 FB | 	rdlong	arg02, fp
1e28c     5C 66 B0 FD | 	call	#_pspoke
1e290     1C 01 90 FD | 	jmp	#LR__2372
1e294                 | LR__2362
1e294     30 4E 05 F1 | 	add	fp, #48
1e298     A7 12 02 FB | 	rdlong	arg01, fp
1e29c     30 4E 85 F1 | 	sub	fp, #48
1e2a0     A7 14 02 FB | 	rdlong	arg02, fp
1e2a4     44 66 B0 FD | 	call	#_pspoke
1e2a8     30 4E 05 F1 | 	add	fp, #48
1e2ac     A7 12 02 FB | 	rdlong	arg01, fp
1e2b0     30 4E 85 F1 | 	sub	fp, #48
1e2b4     01 12 06 F1 | 	add	arg01, #1
1e2b8     A7 14 02 FB | 	rdlong	arg02, fp
1e2bc     08 14 46 F0 | 	shr	arg02, #8
1e2c0     28 66 B0 FD | 	call	#_pspoke
1e2c4     E8 00 90 FD | 	jmp	#LR__2372
1e2c8                 | LR__2363
1e2c8     30 4E 05 F1 | 	add	fp, #48
1e2cc     A7 12 02 FB | 	rdlong	arg01, fp
1e2d0     30 4E 85 F1 | 	sub	fp, #48
1e2d4     A7 14 02 FB | 	rdlong	arg02, fp
1e2d8     10 66 B0 FD | 	call	#_pspoke
1e2dc     30 4E 05 F1 | 	add	fp, #48
1e2e0     A7 12 02 FB | 	rdlong	arg01, fp
1e2e4     30 4E 85 F1 | 	sub	fp, #48
1e2e8     01 12 06 F1 | 	add	arg01, #1
1e2ec     A7 14 02 FB | 	rdlong	arg02, fp
1e2f0     08 14 46 F0 | 	shr	arg02, #8
1e2f4     F4 65 B0 FD | 	call	#_pspoke
1e2f8     B4 00 90 FD | 	jmp	#LR__2372
1e2fc                 | LR__2364
1e2fc     30 4E 05 F1 | 	add	fp, #48
1e300     A7 12 02 FB | 	rdlong	arg01, fp
1e304     30 4E 85 F1 | 	sub	fp, #48
1e308     A7 14 02 FB | 	rdlong	arg02, fp
1e30c     4C 65 B0 FD | 	call	#_pslpoke
1e310     9C 00 90 FD | 	jmp	#LR__2372
1e314                 | LR__2365
1e314     30 4E 05 F1 | 	add	fp, #48
1e318     A7 12 02 FB | 	rdlong	arg01, fp
1e31c     30 4E 85 F1 | 	sub	fp, #48
1e320     A7 14 02 FB | 	rdlong	arg02, fp
1e324     34 65 B0 FD | 	call	#_pslpoke
1e328     84 00 90 FD | 	jmp	#LR__2372
1e32c                 | LR__2366
1e32c     30 4E 05 F1 | 	add	fp, #48
1e330     A7 12 02 FB | 	rdlong	arg01, fp
1e334     30 4E 85 F1 | 	sub	fp, #48
1e338     A7 14 02 FB | 	rdlong	arg02, fp
1e33c     1C 65 B0 FD | 	call	#_pslpoke
1e340     6C 00 90 FD | 	jmp	#LR__2372
1e344                 | LR__2367
1e344     30 4E 05 F1 | 	add	fp, #48
1e348     A7 12 02 FB | 	rdlong	arg01, fp
1e34c     30 4E 85 F1 | 	sub	fp, #48
1e350     A7 14 02 FB | 	rdlong	arg02, fp
1e354     04 65 B0 FD | 	call	#_pslpoke
1e358     54 00 90 FD | 	jmp	#LR__2372
1e35c                 | LR__2368
1e35c     30 4E 05 F1 | 	add	fp, #48
1e360     A7 12 02 FB | 	rdlong	arg01, fp
1e364     30 4E 85 F1 | 	sub	fp, #48
1e368     A7 14 02 FB | 	rdlong	arg02, fp
1e36c     EC 64 B0 FD | 	call	#_pslpoke
1e370     3C 00 90 FD | 	jmp	#LR__2372
1e374                 | LR__2369
1e374     30 4E 05 F1 | 	add	fp, #48
1e378     A7 12 02 FB | 	rdlong	arg01, fp
1e37c     30 4E 85 F1 | 	sub	fp, #48
1e380     A7 14 02 FB | 	rdlong	arg02, fp
1e384     D4 64 B0 FD | 	call	#_pslpoke
1e388     24 00 90 FD | 	jmp	#LR__2372
1e38c                 | LR__2370
1e38c     30 4E 05 F1 | 	add	fp, #48
1e390     A7 12 02 FB | 	rdlong	arg01, fp
1e394     30 4E 85 F1 | 	sub	fp, #48
1e398     A7 14 02 FB | 	rdlong	arg02, fp
1e39c     BC 64 B0 FD | 	call	#_pslpoke
1e3a0     0C 00 90 FD | 	jmp	#LR__2372
1e3a4                 | LR__2371
1e3a4     32 12 06 F6 | 	mov	arg01, #50
1e3a8     00 14 06 F6 | 	mov	arg02, #0
1e3ac     0C 63 B0 FD | 	call	#_printerror
1e3b0                 | LR__2372
1e3b0                 | LR__2373
1e3b0     A7 F0 03 F6 | 	mov	ptra, fp
1e3b4     B2 00 A0 FD | 	call	#popregs_
1e3b8                 | _do_assign_ret
1e3b8     2D 00 64 FD | 	ret
1e3bc                 | 
1e3bc                 | ' 
1e3bc                 | ' 
1e3bc                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1e3bc                 | ' 
1e3bc                 | ' sub do_getvar
1e3bc                 | _do_getvar
1e3bc     04 4A 05 F6 | 	mov	COUNT_, #4
1e3c0     A8 00 A0 FD | 	call	#pushregs_
1e3c4     3C F0 07 F1 | 	add	ptra, #60
1e3c8                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1e3c8     4A 00 00 FF 
1e3cc     A0 E4 05 F1 | 	add	objptr, ##38048
1e3d0     F2 26 02 FB | 	rdlong	local01, objptr
1e3d4     13 17 02 F6 | 	mov	arg03, local01
1e3d8     01 16 66 F0 | 	shl	arg03, #1
1e3dc     13 17 02 F1 | 	add	arg03, local01
1e3e0     02 16 66 F0 | 	shl	arg03, #2
1e3e4     03 00 00 FF 
1e3e8     04 E4 85 F1 | 	sub	objptr, ##1540
1e3ec     F2 16 02 F1 | 	add	arg03, objptr
1e3f0     04 16 06 F1 | 	add	arg03, #4
1e3f4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1e3f8     47 00 00 FF 
1e3fc     9C E4 85 F1 | 	sub	objptr, ##36508
1e400     C4 00 90 5D |  if_ne	jmp	#LR__2381
1e404     4A 00 00 FF 
1e408     A0 E4 05 F1 | 	add	objptr, ##38048
1e40c     F2 26 02 FB | 	rdlong	local01, objptr
1e410     13 13 02 F6 | 	mov	arg01, local01
1e414     01 12 66 F0 | 	shl	arg01, #1
1e418     13 13 02 F1 | 	add	arg01, local01
1e41c     02 12 66 F0 | 	shl	arg01, #2
1e420     03 00 00 FF 
1e424     04 E4 85 F1 | 	sub	objptr, ##1540
1e428     F2 12 02 F1 | 	add	arg01, objptr
1e42c     09 27 02 FB | 	rdlong	local01, arg01
1e430     04 26 66 F0 | 	shl	local01, #4
1e434     32 00 00 FF 
1e438     84 E4 85 F1 | 	sub	objptr, ##25732
1e43c     F2 26 02 F1 | 	add	local01, objptr
1e440     04 26 06 F1 | 	add	local01, #4
1e444     13 13 02 FB | 	rdlong	arg01, local01
1e448     04 26 06 F1 | 	add	local01, #4
1e44c     13 27 02 FB | 	rdlong	local01, local01
1e450     A7 12 62 FC | 	wrlong	arg01, fp
1e454     04 4E 05 F1 | 	add	fp, #4
1e458     A7 26 62 FC | 	wrlong	local01, fp
1e45c     35 00 00 FF 
1e460     88 E4 05 F1 | 	add	objptr, ##27272
1e464     F2 26 02 FB | 	rdlong	local01, objptr
1e468     13 13 02 F6 | 	mov	arg01, local01
1e46c     01 12 66 F0 | 	shl	arg01, #1
1e470     13 13 02 F1 | 	add	arg01, local01
1e474     02 12 66 F0 | 	shl	arg01, #2
1e478     03 00 00 FF 
1e47c     04 E4 85 F1 | 	sub	objptr, ##1540
1e480     F2 12 02 F1 | 	add	arg01, objptr
1e484     09 27 02 FB | 	rdlong	local01, arg01
1e488     04 26 66 F0 | 	shl	local01, #4
1e48c     32 00 00 FF 
1e490     84 E4 85 F1 | 	sub	objptr, ##25732
1e494     F2 26 02 F1 | 	add	local01, objptr
1e498     0C 26 06 F1 | 	add	local01, #12
1e49c     13 27 02 FB | 	rdlong	local01, local01
1e4a0     04 4E 05 F1 | 	add	fp, #4
1e4a4     A7 26 62 FC | 	wrlong	local01, fp
1e4a8                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1e4a8                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1e4a8                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1e4a8     08 4E 85 F1 | 	sub	fp, #8
1e4ac     00 27 16 F2 | 	cmp	local01, #256 wc
1e4b0     15 00 00 FF 
1e4b4     18 E4 85 F1 | 	sub	objptr, ##10776
1e4b8     0C 00 90 3D |  if_ae	jmp	#LR__2380
1e4bc     A7 12 02 F6 | 	mov	arg01, fp
1e4c0     F4 F3 BE FD | 	call	#_push
1e4c4     A0 04 90 FD | 	jmp	#LR__2402
1e4c8                 | LR__2380
1e4c8                 | LR__2381
1e4c8     4A 00 00 FF 
1e4cc     A0 E4 05 F1 | 	add	objptr, ##38048
1e4d0     F2 16 02 FB | 	rdlong	arg03, objptr
1e4d4     0B 15 02 F6 | 	mov	arg02, arg03
1e4d8     01 14 66 F0 | 	shl	arg02, #1
1e4dc     0B 15 02 F1 | 	add	arg02, arg03
1e4e0     02 14 66 F0 | 	shl	arg02, #2
1e4e4     03 00 00 FF 
1e4e8     04 E4 85 F1 | 	sub	objptr, ##1540
1e4ec     F2 14 02 F1 | 	add	arg02, objptr
1e4f0     0A 17 02 FB | 	rdlong	arg03, arg02
1e4f4     04 16 66 F0 | 	shl	arg03, #4
1e4f8     32 00 00 FF 
1e4fc     84 E4 85 F1 | 	sub	objptr, ##25732
1e500     F2 16 02 F1 | 	add	arg03, objptr
1e504     04 16 06 F1 | 	add	arg03, #4
1e508     0B 13 02 FB | 	rdlong	arg01, arg03
1e50c     0C 4E 05 F1 | 	add	fp, #12
1e510     A7 12 62 FC | 	wrlong	arg01, fp
1e514     0C 4E 85 F1 | 	sub	fp, #12
1e518     15 00 00 FF 
1e51c     18 E4 85 F1 | 	sub	objptr, ##10776
1e520     68 64 B0 FD | 	call	#_pslpeek
1e524     FD FA 31 F9 | 	getword	result1, result1, #0
1e528     10 4E 05 F1 | 	add	fp, #16
1e52c     A7 FA 61 FC | 	wrlong	result1, fp
1e530     4A 00 00 FF 
1e534     A0 E4 05 F1 | 	add	objptr, ##38048
1e538     F2 16 02 FB | 	rdlong	arg03, objptr
1e53c     0B 15 02 F6 | 	mov	arg02, arg03
1e540     01 14 66 F0 | 	shl	arg02, #1
1e544     0B 15 02 F1 | 	add	arg02, arg03
1e548     02 14 66 F0 | 	shl	arg02, #2
1e54c     03 00 00 FF 
1e550     04 E4 85 F1 | 	sub	objptr, ##1540
1e554     F2 14 02 F1 | 	add	arg02, objptr
1e558     04 14 06 F1 | 	add	arg02, #4
1e55c     0A 17 02 FB | 	rdlong	arg03, arg02
1e560     04 4E 05 F1 | 	add	fp, #4
1e564     A7 16 62 FC | 	wrlong	arg03, fp
1e568     08 4E 85 F1 | 	sub	fp, #8
1e56c     A7 12 02 FB | 	rdlong	arg01, fp
1e570     0C 4E 85 F1 | 	sub	fp, #12
1e574     02 12 06 F1 | 	add	arg01, #2
1e578     47 00 00 FF 
1e57c     9C E4 85 F1 | 	sub	objptr, ##36508
1e580     B0 63 B0 FD | 	call	#_pspeek
1e584     FD FA E1 F8 | 	getbyte	result1, result1, #0
1e588     18 4E 05 F1 | 	add	fp, #24
1e58c     A7 FA 61 FC | 	wrlong	result1, fp
1e590     0C 4E 85 F1 | 	sub	fp, #12
1e594     A7 12 02 FB | 	rdlong	arg01, fp
1e598     0C 4E 85 F1 | 	sub	fp, #12
1e59c     04 12 06 F1 | 	add	arg01, #4
1e5a0     E8 63 B0 FD | 	call	#_pslpeek
1e5a4     1C 4E 05 F1 | 	add	fp, #28
1e5a8     A7 FA 61 FC | 	wrlong	result1, fp
1e5ac     10 4E 85 F1 | 	sub	fp, #16
1e5b0     A7 12 02 FB | 	rdlong	arg01, fp
1e5b4     0C 4E 85 F1 | 	sub	fp, #12
1e5b8     08 12 06 F1 | 	add	arg01, #8
1e5bc     CC 63 B0 FD | 	call	#_pslpeek
1e5c0     20 4E 05 F1 | 	add	fp, #32
1e5c4     A7 FA 61 FC | 	wrlong	result1, fp
1e5c8     14 4E 85 F1 | 	sub	fp, #20
1e5cc     A7 12 02 FB | 	rdlong	arg01, fp
1e5d0     0C 4E 85 F1 | 	sub	fp, #12
1e5d4     0C 12 06 F1 | 	add	arg01, #12
1e5d8     B0 63 B0 FD | 	call	#_pslpeek
1e5dc     24 4E 05 F1 | 	add	fp, #36
1e5e0     A7 FA 61 FC | 	wrlong	result1, fp
1e5e4                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1e5e4                 | ' esize=pspeek(arrptr+2)
1e5e4                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1e5e4                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1e5e4                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1e5e4                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1e5e4     10 4E 85 F1 | 	sub	fp, #16
1e5e8     A7 16 02 FB | 	rdlong	arg03, fp
1e5ec     14 4E 85 F1 | 	sub	fp, #20
1e5f0     03 16 16 F2 | 	cmp	arg03, #3 wc
1e5f4     38 00 90 CD |  if_b	jmp	#LR__2382
1e5f8     24 F2 BE FD | 	call	#_pop
1e5fc     FF 16 02 F6 | 	mov	arg03, result3
1e600     A7 FA 61 FC | 	wrlong	result1, fp
1e604     04 4E 05 F1 | 	add	fp, #4
1e608     A7 FC 61 FC | 	wrlong	result2, fp
1e60c     04 4E 05 F1 | 	add	fp, #4
1e610     A7 16 62 FC | 	wrlong	arg03, fp
1e614     08 4E 85 F1 | 	sub	fp, #8
1e618     A7 12 02 F6 | 	mov	arg01, fp
1e61c     E4 F3 BE FD | 	call	#_converttoint
1e620     30 4E 05 F1 | 	add	fp, #48
1e624     A7 FA 61 FC | 	wrlong	result1, fp
1e628     30 4E 85 F1 | 	sub	fp, #48
1e62c     0C 00 90 FD | 	jmp	#LR__2383
1e630                 | LR__2382
1e630     30 4E 05 F1 | 	add	fp, #48
1e634     A7 00 68 FC | 	wrlong	#0, fp
1e638     30 4E 85 F1 | 	sub	fp, #48
1e63c                 | LR__2383
1e63c                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1e63c     14 4E 05 F1 | 	add	fp, #20
1e640     A7 16 02 FB | 	rdlong	arg03, fp
1e644     14 4E 85 F1 | 	sub	fp, #20
1e648     02 16 16 F2 | 	cmp	arg03, #2 wc
1e64c     38 00 90 CD |  if_b	jmp	#LR__2384
1e650     CC F1 BE FD | 	call	#_pop
1e654     FF 16 02 F6 | 	mov	arg03, result3
1e658     A7 FA 61 FC | 	wrlong	result1, fp
1e65c     04 4E 05 F1 | 	add	fp, #4
1e660     A7 FC 61 FC | 	wrlong	result2, fp
1e664     04 4E 05 F1 | 	add	fp, #4
1e668     A7 16 62 FC | 	wrlong	arg03, fp
1e66c     08 4E 85 F1 | 	sub	fp, #8
1e670     A7 12 02 F6 | 	mov	arg01, fp
1e674     8C F3 BE FD | 	call	#_converttoint
1e678     2C 4E 05 F1 | 	add	fp, #44
1e67c     A7 FA 61 FC | 	wrlong	result1, fp
1e680     2C 4E 85 F1 | 	sub	fp, #44
1e684     0C 00 90 FD | 	jmp	#LR__2385
1e688                 | LR__2384
1e688     2C 4E 05 F1 | 	add	fp, #44
1e68c     A7 00 68 FC | 	wrlong	#0, fp
1e690     2C 4E 85 F1 | 	sub	fp, #44
1e694                 | LR__2385
1e694                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1e694     14 4E 05 F1 | 	add	fp, #20
1e698     A7 16 02 FB | 	rdlong	arg03, fp
1e69c     14 4E 85 F1 | 	sub	fp, #20
1e6a0     01 16 16 F2 | 	cmp	arg03, #1 wc
1e6a4     38 00 90 CD |  if_b	jmp	#LR__2386
1e6a8     74 F1 BE FD | 	call	#_pop
1e6ac     FF 16 02 F6 | 	mov	arg03, result3
1e6b0     A7 FA 61 FC | 	wrlong	result1, fp
1e6b4     04 4E 05 F1 | 	add	fp, #4
1e6b8     A7 FC 61 FC | 	wrlong	result2, fp
1e6bc     04 4E 05 F1 | 	add	fp, #4
1e6c0     A7 16 62 FC | 	wrlong	arg03, fp
1e6c4     08 4E 85 F1 | 	sub	fp, #8
1e6c8     A7 12 02 F6 | 	mov	arg01, fp
1e6cc     34 F3 BE FD | 	call	#_converttoint
1e6d0     28 4E 05 F1 | 	add	fp, #40
1e6d4     A7 FA 61 FC | 	wrlong	result1, fp
1e6d8     28 4E 85 F1 | 	sub	fp, #40
1e6dc     0C 00 90 FD | 	jmp	#LR__2387
1e6e0                 | LR__2386
1e6e0     28 4E 05 F1 | 	add	fp, #40
1e6e4     A7 00 68 FC | 	wrlong	#0, fp
1e6e8     28 4E 85 F1 | 	sub	fp, #40
1e6ec                 | LR__2387
1e6ec     0C 4E 05 F1 | 	add	fp, #12
1e6f0     A7 28 02 FB | 	rdlong	local02, fp
1e6f4     1C 4E 05 F1 | 	add	fp, #28
1e6f8     A7 2A 02 FB | 	rdlong	local03, fp
1e6fc     04 4E 05 F1 | 	add	fp, #4
1e700     A7 FC 01 FB | 	rdlong	result2, fp
1e704     10 4E 85 F1 | 	sub	fp, #16
1e708     A7 FE 01 FB | 	rdlong	result3, fp
1e70c     FF FC 01 FD | 	qmul	result2, result3
1e710     10 28 06 F1 | 	add	local02, #16
1e714     14 4E 05 F1 | 	add	fp, #20
1e718     A7 FC 01 FB | 	rdlong	result2, fp
1e71c     18 FA 61 FD | 	getqx	result1
1e720     FF FC 01 FD | 	qmul	result2, result3
1e724     FD 2A 02 F1 | 	add	local03, result1
1e728     10 4E 85 F1 | 	sub	fp, #16
1e72c     A7 FE 01 FB | 	rdlong	result3, fp
1e730     18 FC 61 FD | 	getqx	result2
1e734     FF FC 01 FD | 	qmul	result2, result3
1e738     08 4E 85 F1 | 	sub	fp, #8
1e73c     A7 FE 01 FB | 	rdlong	result3, fp
1e740     18 FC 61 FD | 	getqx	result2
1e744     FE 2A 02 F1 | 	add	local03, result2
1e748     FF 2A 02 FD | 	qmul	local03, result3
1e74c     1C 4E 05 F1 | 	add	fp, #28
1e750                 | ' 
1e750                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1e750                 | ' 
1e750                 | ' select case vartype
1e750     18 FC 61 FD | 	getqx	result2
1e754     FE 28 02 F1 | 	add	local02, result2
1e758     A7 28 62 FC | 	wrlong	local02, fp
1e75c     24 4E 85 F1 | 	sub	fp, #36
1e760     A7 2C 02 FB | 	rdlong	local04, fp
1e764     10 4E 85 F1 | 	sub	fp, #16
1e768     00 2D 86 F1 | 	sub	local04, #256
1e76c     0C 2C 26 F3 | 	fle	local04, #12
1e770     30 2C 62 FD | 	jmprel	local04
1e774                 | LR__2388
1e774     30 00 90 FD | 	jmp	#LR__2389
1e778     58 00 90 FD | 	jmp	#LR__2390
1e77c     8C 00 90 FD | 	jmp	#LR__2391
1e780     AC 00 90 FD | 	jmp	#LR__2392
1e784     E8 00 90 FD | 	jmp	#LR__2393
1e788     08 01 90 FD | 	jmp	#LR__2394
1e78c     24 01 90 FD | 	jmp	#LR__2395
1e790     40 01 90 FD | 	jmp	#LR__2396
1e794     50 01 90 FD | 	jmp	#LR__2397
1e798     60 01 90 FD | 	jmp	#LR__2398
1e79c     7C 01 90 FD | 	jmp	#LR__2399
1e7a0     8C 01 90 FD | 	jmp	#LR__2400
1e7a4     B8 01 90 FD | 	jmp	#LR__2401
1e7a8                 | LR__2389
1e7a8     A7 12 02 F6 | 	mov	arg01, fp
1e7ac     34 4E 05 F1 | 	add	fp, #52
1e7b0     A7 14 02 FB | 	rdlong	arg02, fp
1e7b4     34 4E 85 F1 | 	sub	fp, #52
1e7b8     0C 16 06 F6 | 	mov	arg03, #12
1e7bc     0B 00 00 FF 
1e7c0     CC E4 05 F1 | 	add	objptr, ##5836
1e7c4     A8 8C B0 FD | 	call	#_psram_spin2_read1
1e7c8     0B 00 00 FF 
1e7cc     CC E4 85 F1 | 	sub	objptr, ##5836
1e7d0     8C 01 90 FD | 	jmp	#LR__2401
1e7d4                 | LR__2390
1e7d4     08 4E 05 F1 | 	add	fp, #8
1e7d8     A7 38 68 FC | 	wrlong	#28, fp
1e7dc     2C 4E 05 F1 | 	add	fp, #44
1e7e0     A7 12 02 FB | 	rdlong	arg01, fp
1e7e4     34 4E 85 F1 | 	sub	fp, #52
1e7e8     48 61 B0 FD | 	call	#_pspeek
1e7ec     FD FA E1 F8 | 	getbyte	result1, result1, #0
1e7f0     A7 FA 61 FC | 	wrlong	result1, fp
1e7f4     80 FA 15 F2 | 	cmp	result1, #128 wc
1e7f8     00 27 66 36 |  if_ae	neg	local01, #256
1e7fc     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1e800     15 27 42 35 |  if_ae	or	local01, local03
1e804     A7 26 62 3C |  if_ae	wrlong	local01, fp
1e808     54 01 90 FD | 	jmp	#LR__2401
1e80c                 | LR__2391
1e80c     08 4E 05 F1 | 	add	fp, #8
1e810     A7 3A 68 FC | 	wrlong	#29, fp
1e814     2C 4E 05 F1 | 	add	fp, #44
1e818     A7 12 02 FB | 	rdlong	arg01, fp
1e81c     34 4E 85 F1 | 	sub	fp, #52
1e820     10 61 B0 FD | 	call	#_pspeek
1e824     FD FA E1 F8 | 	getbyte	result1, result1, #0
1e828     A7 FA 61 FC | 	wrlong	result1, fp
1e82c     30 01 90 FD | 	jmp	#LR__2401
1e830                 | LR__2392
1e830     08 4E 05 F1 | 	add	fp, #8
1e834     A7 38 68 FC | 	wrlong	#28, fp
1e838     2C 4E 05 F1 | 	add	fp, #44
1e83c     A7 12 02 FB | 	rdlong	arg01, fp
1e840     34 4E 85 F1 | 	sub	fp, #52
1e844     44 61 B0 FD | 	call	#_pslpeek
1e848     FD FA 31 F9 | 	getword	result1, result1, #0
1e84c     A7 FA 61 FC | 	wrlong	result1, fp
1e850     40 00 00 FF 
1e854     00 FA 15 F2 | 	cmp	result1, ##32768 wc
1e858     FF 7F 00 3F 
1e85c     00 27 06 36 |  if_ae	mov	local01, ##16776960
1e860     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1e864     15 27 42 35 |  if_ae	or	local01, local03
1e868     A7 26 62 3C |  if_ae	wrlong	local01, fp
1e86c     F0 00 90 FD | 	jmp	#LR__2401
1e870                 | LR__2393
1e870     08 4E 05 F1 | 	add	fp, #8
1e874     A7 3A 68 FC | 	wrlong	#29, fp
1e878     2C 4E 05 F1 | 	add	fp, #44
1e87c     A7 12 02 FB | 	rdlong	arg01, fp
1e880     34 4E 85 F1 | 	sub	fp, #52
1e884     04 61 B0 FD | 	call	#_pslpeek
1e888     FD FA 31 F9 | 	getword	result1, result1, #0
1e88c     A7 FA 61 FC | 	wrlong	result1, fp
1e890     CC 00 90 FD | 	jmp	#LR__2401
1e894                 | LR__2394
1e894     08 4E 05 F1 | 	add	fp, #8
1e898     A7 38 68 FC | 	wrlong	#28, fp
1e89c     2C 4E 05 F1 | 	add	fp, #44
1e8a0     A7 12 02 FB | 	rdlong	arg01, fp
1e8a4     34 4E 85 F1 | 	sub	fp, #52
1e8a8     E0 60 B0 FD | 	call	#_pslpeek
1e8ac     A7 FA 61 FC | 	wrlong	result1, fp
1e8b0     AC 00 90 FD | 	jmp	#LR__2401
1e8b4                 | LR__2395
1e8b4     08 4E 05 F1 | 	add	fp, #8
1e8b8     A7 3A 68 FC | 	wrlong	#29, fp
1e8bc     2C 4E 05 F1 | 	add	fp, #44
1e8c0     A7 12 02 FB | 	rdlong	arg01, fp
1e8c4     34 4E 85 F1 | 	sub	fp, #52
1e8c8     C0 60 B0 FD | 	call	#_pslpeek
1e8cc     A7 FA 61 FC | 	wrlong	result1, fp
1e8d0     8C 00 90 FD | 	jmp	#LR__2401
1e8d4                 | LR__2396
1e8d4     08 4E 05 F1 | 	add	fp, #8
1e8d8     A7 FE 69 FC | 	wrlong	#255, fp
1e8dc     08 4E 85 F1 | 	sub	fp, #8
1e8e0     A7 60 68 FC | 	wrlong	#48, fp
1e8e4     78 00 90 FD | 	jmp	#LR__2401
1e8e8                 | LR__2397
1e8e8     08 4E 05 F1 | 	add	fp, #8
1e8ec     A7 FE 69 FC | 	wrlong	#255, fp
1e8f0     08 4E 85 F1 | 	sub	fp, #8
1e8f4     A7 60 68 FC | 	wrlong	#48, fp
1e8f8     64 00 90 FD | 	jmp	#LR__2401
1e8fc                 | LR__2398
1e8fc     08 4E 05 F1 | 	add	fp, #8
1e900     A7 3C 68 FC | 	wrlong	#30, fp
1e904     2C 4E 05 F1 | 	add	fp, #44
1e908     A7 12 02 FB | 	rdlong	arg01, fp
1e90c     34 4E 85 F1 | 	sub	fp, #52
1e910     78 60 B0 FD | 	call	#_pslpeek
1e914     A7 FA 61 FC | 	wrlong	result1, fp
1e918     44 00 90 FD | 	jmp	#LR__2401
1e91c                 | LR__2399
1e91c     08 4E 05 F1 | 	add	fp, #8
1e920     A7 FE 69 FC | 	wrlong	#255, fp
1e924     08 4E 85 F1 | 	sub	fp, #8
1e928     A7 60 68 FC | 	wrlong	#48, fp
1e92c     30 00 90 FD | 	jmp	#LR__2401
1e930                 | LR__2400
1e930     08 4E 05 F1 | 	add	fp, #8
1e934     A7 3E 68 FC | 	wrlong	#31, fp
1e938     2C 4E 05 F1 | 	add	fp, #44
1e93c     A7 12 02 FB | 	rdlong	arg01, fp
1e940     34 4E 85 F1 | 	sub	fp, #52
1e944     44 60 B0 FD | 	call	#_pslpeek
1e948     A7 FA 61 FC | 	wrlong	result1, fp
1e94c     00 04 00 FF 
1e950     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1e954     08 4E 05 31 |  if_ae	add	fp, #8
1e958     A7 56 68 3C |  if_ae	wrlong	#43, fp
1e95c     08 4E 85 31 |  if_ae	sub	fp, #8
1e960                 | LR__2401
1e960     A7 12 02 F6 | 	mov	arg01, fp
1e964     50 EF BE FD | 	call	#_push
1e968                 | LR__2402
1e968     A7 F0 03 F6 | 	mov	ptra, fp
1e96c     B2 00 A0 FD | 	call	#popregs_
1e970                 | _do_getvar_ret
1e970     2D 00 64 FD | 	ret
1e974                 | 
1e974                 | ' 
1e974                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1e974                 | ' 
1e974                 | ' sub do_getaddr
1e974                 | _do_getaddr
1e974     01 4A 05 F6 | 	mov	COUNT_, #1
1e978     A8 00 A0 FD | 	call	#pushregs_
1e97c     38 F0 07 F1 | 	add	ptra, #56
1e980                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1e980                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1e980     4A 00 00 FF 
1e984     A0 E4 05 F1 | 	add	objptr, ##38048
1e988     F2 12 02 FB | 	rdlong	arg01, objptr
1e98c     09 FD 01 F6 | 	mov	result2, arg01
1e990     01 FC 65 F0 | 	shl	result2, #1
1e994     09 FD 01 F1 | 	add	result2, arg01
1e998     02 FC 65 F0 | 	shl	result2, #2
1e99c     03 00 00 FF 
1e9a0     04 E4 85 F1 | 	sub	objptr, ##1540
1e9a4     F2 FC 01 F1 | 	add	result2, objptr
1e9a8     04 FC 05 F1 | 	add	result2, #4
1e9ac     FE FC 09 FB | 	rdlong	result2, result2 wz
1e9b0     47 00 00 FF 
1e9b4     9C E4 85 F1 | 	sub	objptr, ##36508
1e9b8     10 01 90 5D |  if_ne	jmp	#LR__2410
1e9bc     4A 00 00 FF 
1e9c0     A0 E4 05 F1 | 	add	objptr, ##38048
1e9c4     F2 12 02 FB | 	rdlong	arg01, objptr
1e9c8     09 FD 01 F6 | 	mov	result2, arg01
1e9cc     01 FC 65 F0 | 	shl	result2, #1
1e9d0     09 FD 01 F1 | 	add	result2, arg01
1e9d4     02 FC 65 F0 | 	shl	result2, #2
1e9d8     03 00 00 FF 
1e9dc     04 E4 85 F1 | 	sub	objptr, ##1540
1e9e0     F2 FC 01 F1 | 	add	result2, objptr
1e9e4     FE 12 02 FB | 	rdlong	arg01, result2
1e9e8     04 12 66 F0 | 	shl	arg01, #4
1e9ec     32 00 00 FF 
1e9f0     84 E4 85 F1 | 	sub	objptr, ##25732
1e9f4     F2 12 02 F1 | 	add	arg01, objptr
1e9f8     0C 12 06 F1 | 	add	arg01, #12
1e9fc     09 13 02 FB | 	rdlong	arg01, arg01
1ea00     08 4E 05 F1 | 	add	fp, #8
1ea04     A7 12 62 FC | 	wrlong	arg01, fp
1ea08                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1ea08                 | '    if t1.result_type>=array_no_type then goto 2200
1ea08     08 4E 85 F1 | 	sub	fp, #8
1ea0c     00 13 16 F2 | 	cmp	arg01, #256 wc
1ea10     15 00 00 FF 
1ea14     18 E4 85 F1 | 	sub	objptr, ##10776
1ea18     B0 00 90 3D |  if_ae	jmp	#LR__2411
1ea1c     4A 00 00 FF 
1ea20     A0 E4 05 F1 | 	add	objptr, ##38048
1ea24     F2 12 02 FB | 	rdlong	arg01, objptr
1ea28     09 FF 01 F6 | 	mov	result3, arg01
1ea2c     01 FE 65 F0 | 	shl	result3, #1
1ea30     09 FF 01 F1 | 	add	result3, arg01
1ea34     02 FE 65 F0 | 	shl	result3, #2
1ea38     03 00 00 FF 
1ea3c     04 E4 85 F1 | 	sub	objptr, ##1540
1ea40     F2 FE 01 F1 | 	add	result3, objptr
1ea44     FF FA 01 FB | 	rdlong	result1, result3
1ea48     04 FA 65 F0 | 	shl	result1, #4
1ea4c     32 00 00 FF 
1ea50     84 E4 85 F1 | 	sub	objptr, ##25732
1ea54     F2 FA 01 F1 | 	add	result1, objptr
1ea58     04 FA 05 F1 | 	add	result1, #4
1ea5c     A7 FA 61 FC | 	wrlong	result1, fp
1ea60     35 00 00 FF 
1ea64     88 E4 05 F1 | 	add	objptr, ##27272
1ea68     F2 FE 01 FB | 	rdlong	result3, objptr
1ea6c     FF 12 02 F6 | 	mov	arg01, result3
1ea70     01 12 66 F0 | 	shl	arg01, #1
1ea74     FF 12 02 F1 | 	add	arg01, result3
1ea78     02 12 66 F0 | 	shl	arg01, #2
1ea7c     03 00 00 FF 
1ea80     04 E4 85 F1 | 	sub	objptr, ##1540
1ea84     F2 12 02 F1 | 	add	arg01, objptr
1ea88     09 13 02 FB | 	rdlong	arg01, arg01
1ea8c     04 12 66 F0 | 	shl	arg01, #4
1ea90     32 00 00 FF 
1ea94     84 E4 85 F1 | 	sub	objptr, ##25732
1ea98     F2 12 02 F1 | 	add	arg01, objptr
1ea9c     0C 12 06 F1 | 	add	arg01, #12
1eaa0     09 13 02 FB | 	rdlong	arg01, arg01
1eaa4     04 4E 05 F1 | 	add	fp, #4
1eaa8     A7 12 62 FC | 	wrlong	arg01, fp
1eaac     04 4E 05 F1 | 	add	fp, #4
1eab0     A7 3A 68 FC | 	wrlong	#29, fp
1eab4     08 4E 85 F1 | 	sub	fp, #8
1eab8     A7 12 02 F6 | 	mov	arg01, fp
1eabc     15 00 00 FF 
1eac0     18 E4 85 F1 | 	sub	objptr, ##10776
1eac4     F0 ED BE FD | 	call	#_push
1eac8                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1eac8                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1eac8                 | '   t1.result_type=result_uint
1eac8                 | '   push t1 : return
1eac8     2C 03 90 FD | 	jmp	#LR__2420
1eacc                 | LR__2410
1eacc                 | LR__2411
1eacc     4A 00 00 FF 
1ead0     A0 E4 05 F1 | 	add	objptr, ##38048
1ead4     F2 FE 01 FB | 	rdlong	result3, objptr
1ead8     FF FC 01 F6 | 	mov	result2, result3
1eadc     01 FC 65 F0 | 	shl	result2, #1
1eae0     FF FC 01 F1 | 	add	result2, result3
1eae4     02 FC 65 F0 | 	shl	result2, #2
1eae8     03 00 00 FF 
1eaec     04 E4 85 F1 | 	sub	objptr, ##1540
1eaf0     F2 FC 01 F1 | 	add	result2, objptr
1eaf4     FE FE 01 FB | 	rdlong	result3, result2
1eaf8     04 FE 65 F0 | 	shl	result3, #4
1eafc     32 00 00 FF 
1eb00     84 E4 85 F1 | 	sub	objptr, ##25732
1eb04     F2 FE 01 F1 | 	add	result3, objptr
1eb08     04 FE 05 F1 | 	add	result3, #4
1eb0c     FF FE 01 FB | 	rdlong	result3, result3
1eb10     0C 4E 05 F1 | 	add	fp, #12
1eb14     A7 FE 61 FC | 	wrlong	result3, fp
1eb18     35 00 00 FF 
1eb1c     88 E4 05 F1 | 	add	objptr, ##27272
1eb20     F2 FE 01 FB | 	rdlong	result3, objptr
1eb24     FF 12 02 F6 | 	mov	arg01, result3
1eb28     01 12 66 F0 | 	shl	arg01, #1
1eb2c     FF 12 02 F1 | 	add	arg01, result3
1eb30     02 12 66 F0 | 	shl	arg01, #2
1eb34     03 00 00 FF 
1eb38     04 E4 85 F1 | 	sub	objptr, ##1540
1eb3c     F2 12 02 F1 | 	add	arg01, objptr
1eb40     09 13 02 FB | 	rdlong	arg01, arg01
1eb44     04 12 66 F0 | 	shl	arg01, #4
1eb48     32 00 00 FF 
1eb4c     84 E4 85 F1 | 	sub	objptr, ##25732
1eb50     F2 12 02 F1 | 	add	arg01, objptr
1eb54     0C 12 06 F1 | 	add	arg01, #12
1eb58     09 13 02 FB | 	rdlong	arg01, arg01
1eb5c     08 4E 85 F1 | 	sub	fp, #8
1eb60     A7 12 62 FC | 	wrlong	arg01, fp
1eb64     08 4E 05 F1 | 	add	fp, #8
1eb68     A7 12 02 FB | 	rdlong	arg01, fp
1eb6c     0C 4E 85 F1 | 	sub	fp, #12
1eb70     15 00 00 FF 
1eb74     18 E4 85 F1 | 	sub	objptr, ##10776
1eb78     10 5E B0 FD | 	call	#_pslpeek
1eb7c     FD FA 31 F9 | 	getword	result1, result1, #0
1eb80     10 4E 05 F1 | 	add	fp, #16
1eb84     A7 FA 61 FC | 	wrlong	result1, fp
1eb88     4A 00 00 FF 
1eb8c     A0 E4 05 F1 | 	add	objptr, ##38048
1eb90     F2 FE 01 FB | 	rdlong	result3, objptr
1eb94     FF 12 02 F6 | 	mov	arg01, result3
1eb98     01 12 66 F0 | 	shl	arg01, #1
1eb9c     FF 12 02 F1 | 	add	arg01, result3
1eba0     02 12 66 F0 | 	shl	arg01, #2
1eba4     03 00 00 FF 
1eba8     04 E4 85 F1 | 	sub	objptr, ##1540
1ebac     F2 12 02 F1 | 	add	arg01, objptr
1ebb0     04 12 06 F1 | 	add	arg01, #4
1ebb4     09 13 02 FB | 	rdlong	arg01, arg01
1ebb8     04 4E 05 F1 | 	add	fp, #4
1ebbc     A7 12 62 FC | 	wrlong	arg01, fp
1ebc0     08 4E 85 F1 | 	sub	fp, #8
1ebc4     A7 12 02 FB | 	rdlong	arg01, fp
1ebc8     0C 4E 85 F1 | 	sub	fp, #12
1ebcc     02 12 06 F1 | 	add	arg01, #2
1ebd0     47 00 00 FF 
1ebd4     9C E4 85 F1 | 	sub	objptr, ##36508
1ebd8     58 5D B0 FD | 	call	#_pspeek
1ebdc     FD FA E1 F8 | 	getbyte	result1, result1, #0
1ebe0     18 4E 05 F1 | 	add	fp, #24
1ebe4     A7 FA 61 FC | 	wrlong	result1, fp
1ebe8     0C 4E 85 F1 | 	sub	fp, #12
1ebec     A7 12 02 FB | 	rdlong	arg01, fp
1ebf0     0C 4E 85 F1 | 	sub	fp, #12
1ebf4     04 12 06 F1 | 	add	arg01, #4
1ebf8     90 5D B0 FD | 	call	#_pslpeek
1ebfc     1C 4E 05 F1 | 	add	fp, #28
1ec00     A7 FA 61 FC | 	wrlong	result1, fp
1ec04     10 4E 85 F1 | 	sub	fp, #16
1ec08     A7 12 02 FB | 	rdlong	arg01, fp
1ec0c     0C 4E 85 F1 | 	sub	fp, #12
1ec10     08 12 06 F1 | 	add	arg01, #8
1ec14     74 5D B0 FD | 	call	#_pslpeek
1ec18     20 4E 05 F1 | 	add	fp, #32
1ec1c     A7 FA 61 FC | 	wrlong	result1, fp
1ec20     14 4E 85 F1 | 	sub	fp, #20
1ec24     A7 12 02 FB | 	rdlong	arg01, fp
1ec28     0C 4E 85 F1 | 	sub	fp, #12
1ec2c     0C 12 06 F1 | 	add	arg01, #12
1ec30     58 5D B0 FD | 	call	#_pslpeek
1ec34     24 4E 05 F1 | 	add	fp, #36
1ec38     A7 FA 61 FC | 	wrlong	result1, fp
1ec3c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1ec3c                 | ' esize=pspeek(arrptr+2)
1ec3c                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1ec3c                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1ec3c                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1ec3c                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1ec3c     10 4E 85 F1 | 	sub	fp, #16
1ec40     A7 12 02 FB | 	rdlong	arg01, fp
1ec44     14 4E 85 F1 | 	sub	fp, #20
1ec48     03 12 16 F2 | 	cmp	arg01, #3 wc
1ec4c     34 00 90 CD |  if_b	jmp	#LR__2412
1ec50     CC EB BE FD | 	call	#_pop
1ec54     A7 FA 61 FC | 	wrlong	result1, fp
1ec58     04 4E 05 F1 | 	add	fp, #4
1ec5c     A7 FC 61 FC | 	wrlong	result2, fp
1ec60     04 4E 05 F1 | 	add	fp, #4
1ec64     A7 FE 61 FC | 	wrlong	result3, fp
1ec68     08 4E 85 F1 | 	sub	fp, #8
1ec6c     A7 12 02 F6 | 	mov	arg01, fp
1ec70     90 ED BE FD | 	call	#_converttoint
1ec74     30 4E 05 F1 | 	add	fp, #48
1ec78     A7 FA 61 FC | 	wrlong	result1, fp
1ec7c     30 4E 85 F1 | 	sub	fp, #48
1ec80     0C 00 90 FD | 	jmp	#LR__2413
1ec84                 | LR__2412
1ec84     30 4E 05 F1 | 	add	fp, #48
1ec88     A7 00 68 FC | 	wrlong	#0, fp
1ec8c     30 4E 85 F1 | 	sub	fp, #48
1ec90                 | LR__2413
1ec90                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1ec90     14 4E 05 F1 | 	add	fp, #20
1ec94     A7 12 02 FB | 	rdlong	arg01, fp
1ec98     14 4E 85 F1 | 	sub	fp, #20
1ec9c     02 12 16 F2 | 	cmp	arg01, #2 wc
1eca0     34 00 90 CD |  if_b	jmp	#LR__2414
1eca4     78 EB BE FD | 	call	#_pop
1eca8     A7 FA 61 FC | 	wrlong	result1, fp
1ecac     04 4E 05 F1 | 	add	fp, #4
1ecb0     A7 FC 61 FC | 	wrlong	result2, fp
1ecb4     04 4E 05 F1 | 	add	fp, #4
1ecb8     A7 FE 61 FC | 	wrlong	result3, fp
1ecbc     08 4E 85 F1 | 	sub	fp, #8
1ecc0     A7 12 02 F6 | 	mov	arg01, fp
1ecc4     3C ED BE FD | 	call	#_converttoint
1ecc8     2C 4E 05 F1 | 	add	fp, #44
1eccc     A7 FA 61 FC | 	wrlong	result1, fp
1ecd0     2C 4E 85 F1 | 	sub	fp, #44
1ecd4     0C 00 90 FD | 	jmp	#LR__2415
1ecd8                 | LR__2414
1ecd8     2C 4E 05 F1 | 	add	fp, #44
1ecdc     A7 00 68 FC | 	wrlong	#0, fp
1ece0     2C 4E 85 F1 | 	sub	fp, #44
1ece4                 | LR__2415
1ece4                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1ece4     14 4E 05 F1 | 	add	fp, #20
1ece8     A7 12 02 FB | 	rdlong	arg01, fp
1ecec     14 4E 85 F1 | 	sub	fp, #20
1ecf0     01 12 16 F2 | 	cmp	arg01, #1 wc
1ecf4     34 00 90 CD |  if_b	jmp	#LR__2416
1ecf8     24 EB BE FD | 	call	#_pop
1ecfc     A7 FA 61 FC | 	wrlong	result1, fp
1ed00     04 4E 05 F1 | 	add	fp, #4
1ed04     A7 FC 61 FC | 	wrlong	result2, fp
1ed08     04 4E 05 F1 | 	add	fp, #4
1ed0c     A7 FE 61 FC | 	wrlong	result3, fp
1ed10     08 4E 85 F1 | 	sub	fp, #8
1ed14     A7 12 02 F6 | 	mov	arg01, fp
1ed18     E8 EC BE FD | 	call	#_converttoint
1ed1c     28 4E 05 F1 | 	add	fp, #40
1ed20     A7 FA 61 FC | 	wrlong	result1, fp
1ed24     28 4E 85 F1 | 	sub	fp, #40
1ed28     0C 00 90 FD | 	jmp	#LR__2417
1ed2c                 | LR__2416
1ed2c     28 4E 05 F1 | 	add	fp, #40
1ed30     A7 00 68 FC | 	wrlong	#0, fp
1ed34     28 4E 85 F1 | 	sub	fp, #40
1ed38                 | LR__2417
1ed38                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1ed38                 | ' if numpar>0 then
1ed38     14 4E 05 F1 | 	add	fp, #20
1ed3c     A7 FE 01 FB | 	rdlong	result3, fp
1ed40     14 4E 85 F1 | 	sub	fp, #20
1ed44     01 FE 15 F2 | 	cmp	result3, #1 wc
1ed48     8C 00 90 CD |  if_b	jmp	#LR__2418
1ed4c     0C 4E 05 F1 | 	add	fp, #12
1ed50     A7 FC 01 FB | 	rdlong	result2, fp
1ed54     1C 4E 05 F1 | 	add	fp, #28
1ed58     A7 FE 01 FB | 	rdlong	result3, fp
1ed5c     04 4E 05 F1 | 	add	fp, #4
1ed60     A7 12 02 FB | 	rdlong	arg01, fp
1ed64     10 4E 85 F1 | 	sub	fp, #16
1ed68     A7 FA 01 FB | 	rdlong	result1, fp
1ed6c     FD 12 02 FD | 	qmul	arg01, result1
1ed70     10 FC 05 F1 | 	add	result2, #16
1ed74     14 4E 05 F1 | 	add	fp, #20
1ed78     A7 26 02 FB | 	rdlong	local01, fp
1ed7c     18 12 62 FD | 	getqx	arg01
1ed80     FD 26 02 FD | 	qmul	local01, result1
1ed84     09 FF 01 F1 | 	add	result3, arg01
1ed88     10 4E 85 F1 | 	sub	fp, #16
1ed8c     A7 26 02 FB | 	rdlong	local01, fp
1ed90     18 FA 61 FD | 	getqx	result1
1ed94     13 FB 01 FD | 	qmul	result1, local01
1ed98     08 4E 85 F1 | 	sub	fp, #8
1ed9c     A7 26 02 FB | 	rdlong	local01, fp
1eda0     18 FA 61 FD | 	getqx	result1
1eda4     FD FE 01 F1 | 	add	result3, result1
1eda8     13 FF 01 FD | 	qmul	result3, local01
1edac     1C 4E 05 F1 | 	add	fp, #28
1edb0     18 26 62 FD | 	getqx	local01
1edb4     13 FD 01 F1 | 	add	result2, local01
1edb8     A7 FC 61 FC | 	wrlong	result2, fp
1edbc     2C 4E 85 F1 | 	sub	fp, #44
1edc0     A7 3A 68 FC | 	wrlong	#29, fp
1edc4     2C 4E 05 F1 | 	add	fp, #44
1edc8     A7 26 02 FB | 	rdlong	local01, fp
1edcc     34 4E 85 F1 | 	sub	fp, #52
1edd0     A7 26 62 FC | 	wrlong	local01, fp
1edd4     18 00 90 FD | 	jmp	#LR__2419
1edd8                 | LR__2418
1edd8     08 4E 05 F1 | 	add	fp, #8
1eddc     A7 3A 68 FC | 	wrlong	#29, fp
1ede0     04 4E 05 F1 | 	add	fp, #4
1ede4     A7 26 02 FB | 	rdlong	local01, fp
1ede8     0C 4E 85 F1 | 	sub	fp, #12
1edec     A7 26 62 FC | 	wrlong	local01, fp
1edf0                 | LR__2419
1edf0     A7 12 02 F6 | 	mov	arg01, fp
1edf4     C0 EA BE FD | 	call	#_push
1edf8                 | LR__2420
1edf8     A7 F0 03 F6 | 	mov	ptra, fp
1edfc     B2 00 A0 FD | 	call	#popregs_
1ee00                 | _do_getaddr_ret
1ee00     2D 00 64 FD | 	ret
1ee04                 | 
1ee04                 | ' 
1ee04                 | ' 
1ee04                 | ' 
1ee04                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1ee04                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1ee04                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1ee04                 | ' 
1ee04                 | ' '--------------------------------- AND 
1ee04                 | ' 
1ee04                 | ' sub do_and 
1ee04                 | _do_and
1ee04     03 4A 05 F6 | 	mov	COUNT_, #3
1ee08     A8 00 A0 FD | 	call	#pushregs_
1ee0c     18 F0 07 F1 | 	add	ptra, #24
1ee10     0C EA BE FD | 	call	#_pop
1ee14     FD 12 02 F6 | 	mov	arg01, result1
1ee18     FE 26 02 F6 | 	mov	local01, result2
1ee1c     FF 28 02 F6 | 	mov	local02, result3
1ee20     0C 4E 05 F1 | 	add	fp, #12
1ee24     A7 12 62 FC | 	wrlong	arg01, fp
1ee28     04 4E 05 F1 | 	add	fp, #4
1ee2c     A7 26 62 FC | 	wrlong	local01, fp
1ee30     04 4E 05 F1 | 	add	fp, #4
1ee34     A7 28 62 FC | 	wrlong	local02, fp
1ee38     14 4E 85 F1 | 	sub	fp, #20
1ee3c     E0 E9 BE FD | 	call	#_pop
1ee40     FF 2A 02 F6 | 	mov	local03, result3
1ee44     A7 FA 61 FC | 	wrlong	result1, fp
1ee48     04 4E 05 F1 | 	add	fp, #4
1ee4c     A7 FC 61 FC | 	wrlong	result2, fp
1ee50     04 4E 05 F1 | 	add	fp, #4
1ee54     A7 2A 62 FC | 	wrlong	local03, fp
1ee58                 | ' 
1ee58                 | ' t2=pop()
1ee58                 | ' t1=pop()
1ee58                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1ee58     08 4E 85 F1 | 	sub	fp, #8
1ee5c     1C 2A 0E F2 | 	cmp	local03, #28 wz
1ee60     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ee64     A7 2A 62 AC |  if_e	wrlong	local03, fp
1ee68     08 4E 05 A1 |  if_e	add	fp, #8
1ee6c     A7 3A 68 AC |  if_e	wrlong	#29, fp
1ee70     08 4E 85 A1 |  if_e	sub	fp, #8
1ee74                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1ee74     14 4E 05 F1 | 	add	fp, #20
1ee78     A7 2A 02 FB | 	rdlong	local03, fp
1ee7c     14 4E 85 F1 | 	sub	fp, #20
1ee80     1C 2A 0E F2 | 	cmp	local03, #28 wz
1ee84     18 00 90 5D |  if_ne	jmp	#LR__2430
1ee88     0C 4E 05 F1 | 	add	fp, #12
1ee8c     A7 2A 02 FB | 	rdlong	local03, fp
1ee90     A7 2A 62 FC | 	wrlong	local03, fp
1ee94     08 4E 05 F1 | 	add	fp, #8
1ee98     A7 3A 68 FC | 	wrlong	#29, fp
1ee9c     14 4E 85 F1 | 	sub	fp, #20
1eea0                 | LR__2430
1eea0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1eea0     08 4E 05 F1 | 	add	fp, #8
1eea4     A7 2A 02 FB | 	rdlong	local03, fp
1eea8     08 4E 85 F1 | 	sub	fp, #8
1eeac     1F 2A 0E F2 | 	cmp	local03, #31 wz
1eeb0     14 4E 05 51 |  if_ne	add	fp, #20
1eeb4     A7 28 02 5B |  if_ne	rdlong	local02, fp
1eeb8     14 4E 85 51 |  if_ne	sub	fp, #20
1eebc     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1eec0     08 4E 05 51 |  if_ne	add	fp, #8
1eec4     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1eec8     08 4E 85 51 |  if_ne	sub	fp, #8
1eecc     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1eed0     14 4E 05 51 |  if_ne	add	fp, #20
1eed4     14 4E 85 51 |  if_ne	sub	fp, #20
1eed8     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1eedc     A7 0C 68 AC |  if_e	wrlong	#6, fp
1eee0     08 4E 05 A1 |  if_e	add	fp, #8
1eee4     A7 FE 69 AC |  if_e	wrlong	#255, fp
1eee8     08 4E 85 A1 |  if_e	sub	fp, #8
1eeec     18 00 90 AD |  if_e	jmp	#LR__2431
1eef0     A7 2A 02 FB | 	rdlong	local03, fp
1eef4     0C 4E 05 F1 | 	add	fp, #12
1eef8     A7 26 02 FB | 	rdlong	local01, fp
1eefc     0C 4E 85 F1 | 	sub	fp, #12
1ef00     13 2B 02 F5 | 	and	local03, local01
1ef04     A7 2A 62 FC | 	wrlong	local03, fp
1ef08                 | LR__2431
1ef08     A7 12 02 F6 | 	mov	arg01, fp
1ef0c     A8 E9 BE FD | 	call	#_push
1ef10     A7 F0 03 F6 | 	mov	ptra, fp
1ef14     B2 00 A0 FD | 	call	#popregs_
1ef18                 | _do_and_ret
1ef18     2D 00 64 FD | 	ret
1ef1c                 | 
1ef1c                 | ' 
1ef1c                 | ' '--------------------------------- DIV (integer divide)
1ef1c                 | ' 
1ef1c                 | ' sub do_div 
1ef1c                 | _do_div
1ef1c     01 4A 05 F6 | 	mov	COUNT_, #1
1ef20     A8 00 A0 FD | 	call	#pushregs_
1ef24     18 F0 07 F1 | 	add	ptra, #24
1ef28     F4 E8 BE FD | 	call	#_pop
1ef2c     FD 92 02 F6 | 	mov	muldivb_, result1
1ef30     FE 90 02 F6 | 	mov	muldiva_, result2
1ef34     FF 26 02 F6 | 	mov	local01, result3
1ef38     0C 4E 05 F1 | 	add	fp, #12
1ef3c     A7 92 62 FC | 	wrlong	muldivb_, fp
1ef40     04 4E 05 F1 | 	add	fp, #4
1ef44     A7 90 62 FC | 	wrlong	muldiva_, fp
1ef48     04 4E 05 F1 | 	add	fp, #4
1ef4c     A7 26 62 FC | 	wrlong	local01, fp
1ef50     14 4E 85 F1 | 	sub	fp, #20
1ef54     C8 E8 BE FD | 	call	#_pop
1ef58     A7 FA 61 FC | 	wrlong	result1, fp
1ef5c     04 4E 05 F1 | 	add	fp, #4
1ef60     A7 FC 61 FC | 	wrlong	result2, fp
1ef64     04 4E 05 F1 | 	add	fp, #4
1ef68     A7 FE 61 FC | 	wrlong	result3, fp
1ef6c                 | ' 
1ef6c                 | ' t2=pop()
1ef6c                 | ' t1=pop()
1ef6c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1ef6c     08 4E 85 F1 | 	sub	fp, #8
1ef70     1F FE 0D F2 | 	cmp	result3, #31 wz
1ef74     14 4E 05 51 |  if_ne	add	fp, #20
1ef78     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1ef7c     14 4E 85 51 |  if_ne	sub	fp, #20
1ef80     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1ef84     A7 14 68 AC |  if_e	wrlong	#10, fp
1ef88     08 4E 05 A1 |  if_e	add	fp, #8
1ef8c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1ef90     08 4E 85 A1 |  if_e	sub	fp, #8
1ef94     90 01 90 AD |  if_e	jmp	#LR__2446
1ef98                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1ef98     08 4E 05 F1 | 	add	fp, #8
1ef9c     A7 92 02 FB | 	rdlong	muldivb_, fp
1efa0     08 4E 85 F1 | 	sub	fp, #8
1efa4     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1efa8     1C 00 90 5D |  if_ne	jmp	#LR__2440
1efac     08 4E 05 F1 | 	add	fp, #8
1efb0     A7 38 68 FC | 	wrlong	#28, fp
1efb4     08 4E 85 F1 | 	sub	fp, #8
1efb8     A7 12 02 FB | 	rdlong	arg01, fp
1efbc     00 14 06 F6 | 	mov	arg02, #0
1efc0     94 C4 B0 FD | 	call	#__system___float_tointeger
1efc4     A7 FA 61 FC | 	wrlong	result1, fp
1efc8                 | LR__2440
1efc8                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1efc8     14 4E 05 F1 | 	add	fp, #20
1efcc     A7 92 02 FB | 	rdlong	muldivb_, fp
1efd0     14 4E 85 F1 | 	sub	fp, #20
1efd4     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1efd8     28 00 90 5D |  if_ne	jmp	#LR__2441
1efdc     14 4E 05 F1 | 	add	fp, #20
1efe0     A7 38 68 FC | 	wrlong	#28, fp
1efe4     08 4E 85 F1 | 	sub	fp, #8
1efe8     A7 12 02 FB | 	rdlong	arg01, fp
1efec     0C 4E 85 F1 | 	sub	fp, #12
1eff0     00 14 06 F6 | 	mov	arg02, #0
1eff4     60 C4 B0 FD | 	call	#__system___float_tointeger
1eff8     0C 4E 05 F1 | 	add	fp, #12
1effc     A7 FA 61 FC | 	wrlong	result1, fp
1f000     0C 4E 85 F1 | 	sub	fp, #12
1f004                 | LR__2441
1f004                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1f004     08 4E 05 F1 | 	add	fp, #8
1f008     A7 92 02 FB | 	rdlong	muldivb_, fp
1f00c     08 4E 85 F1 | 	sub	fp, #8
1f010     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1f014     14 4E 05 A1 |  if_e	add	fp, #20
1f018     A7 26 02 AB |  if_e	rdlong	local01, fp
1f01c     14 4E 85 A1 |  if_e	sub	fp, #20
1f020     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1f024     20 00 90 5D |  if_ne	jmp	#LR__2442
1f028     0C 4E 05 F1 | 	add	fp, #12
1f02c     A7 26 02 FB | 	rdlong	local01, fp
1f030     0C 4E 85 F1 | 	sub	fp, #12
1f034     A7 92 02 FB | 	rdlong	muldivb_, fp
1f038     13 93 12 FD | 	qdiv	muldivb_, local01
1f03c     18 26 62 FD | 	getqx	local01
1f040     A7 26 62 FC | 	wrlong	local01, fp
1f044     E0 00 90 FD | 	jmp	#LR__2446
1f048                 | LR__2442
1f048                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1f048     08 4E 05 F1 | 	add	fp, #8
1f04c     A7 92 02 FB | 	rdlong	muldivb_, fp
1f050     08 4E 85 F1 | 	sub	fp, #8
1f054     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1f058     14 4E 05 A1 |  if_e	add	fp, #20
1f05c     A7 26 02 AB |  if_e	rdlong	local01, fp
1f060     14 4E 85 A1 |  if_e	sub	fp, #20
1f064     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1f068     2C 00 90 5D |  if_ne	jmp	#LR__2443
1f06c     0C 4E 05 F1 | 	add	fp, #12
1f070     A7 26 02 FB | 	rdlong	local01, fp
1f074     0C 4E 85 F1 | 	sub	fp, #12
1f078     A7 92 02 FB | 	rdlong	muldivb_, fp
1f07c     13 93 12 FD | 	qdiv	muldivb_, local01
1f080     18 26 62 FD | 	getqx	local01
1f084     A7 26 62 FC | 	wrlong	local01, fp
1f088     08 4E 05 F1 | 	add	fp, #8
1f08c     A7 38 68 FC | 	wrlong	#28, fp
1f090     08 4E 85 F1 | 	sub	fp, #8
1f094     90 00 90 FD | 	jmp	#LR__2446
1f098                 | LR__2443
1f098                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1f098     08 4E 05 F1 | 	add	fp, #8
1f09c     A7 92 02 FB | 	rdlong	muldivb_, fp
1f0a0     08 4E 85 F1 | 	sub	fp, #8
1f0a4     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1f0a8     14 4E 05 A1 |  if_e	add	fp, #20
1f0ac     A7 26 02 AB |  if_e	rdlong	local01, fp
1f0b0     14 4E 85 A1 |  if_e	sub	fp, #20
1f0b4     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1f0b8     1C 00 90 5D |  if_ne	jmp	#LR__2444
1f0bc     A7 90 02 FB | 	rdlong	muldiva_, fp
1f0c0     0C 4E 05 F1 | 	add	fp, #12
1f0c4     A7 92 02 FB | 	rdlong	muldivb_, fp
1f0c8     0C 4E 85 F1 | 	sub	fp, #12
1f0cc     BA 00 A0 FD | 	call	#divide_
1f0d0     A7 92 62 FC | 	wrlong	muldivb_, fp
1f0d4     50 00 90 FD | 	jmp	#LR__2446
1f0d8                 | LR__2444
1f0d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1f0d8     08 4E 05 F1 | 	add	fp, #8
1f0dc     A7 92 02 FB | 	rdlong	muldivb_, fp
1f0e0     08 4E 85 F1 | 	sub	fp, #8
1f0e4     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1f0e8     14 4E 05 A1 |  if_e	add	fp, #20
1f0ec     A7 26 02 AB |  if_e	rdlong	local01, fp
1f0f0     14 4E 85 A1 |  if_e	sub	fp, #20
1f0f4     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1f0f8     1C 00 90 5D |  if_ne	jmp	#LR__2445
1f0fc     A7 90 02 FB | 	rdlong	muldiva_, fp
1f100     0C 4E 05 F1 | 	add	fp, #12
1f104     A7 92 02 FB | 	rdlong	muldivb_, fp
1f108     0C 4E 85 F1 | 	sub	fp, #12
1f10c     BA 00 A0 FD | 	call	#divide_
1f110     A7 92 62 FC | 	wrlong	muldivb_, fp
1f114     10 00 90 FD | 	jmp	#LR__2446
1f118                 | LR__2445
1f118     A7 16 68 FC | 	wrlong	#11, fp
1f11c     08 4E 05 F1 | 	add	fp, #8
1f120     A7 FE 69 FC | 	wrlong	#255, fp
1f124     08 4E 85 F1 | 	sub	fp, #8
1f128                 | LR__2446
1f128     A7 12 02 F6 | 	mov	arg01, fp
1f12c     88 E7 BE FD | 	call	#_push
1f130     A7 F0 03 F6 | 	mov	ptra, fp
1f134     B2 00 A0 FD | 	call	#popregs_
1f138                 | _do_div_ret
1f138     2D 00 64 FD | 	ret
1f13c                 | 
1f13c                 | ' 
1f13c                 | ' '--------------------------------- equal (=)
1f13c                 | ' 
1f13c                 | ' sub do_eq
1f13c                 | _do_eq
1f13c     05 4A 05 F6 | 	mov	COUNT_, #5
1f140     A8 00 A0 FD | 	call	#pushregs_
1f144     18 F0 07 F1 | 	add	ptra, #24
1f148     D4 E6 BE FD | 	call	#_pop
1f14c     FD 26 02 F6 | 	mov	local01, result1
1f150     FE 28 02 F6 | 	mov	local02, result2
1f154     FF 2A 02 F6 | 	mov	local03, result3
1f158     0C 4E 05 F1 | 	add	fp, #12
1f15c     A7 26 62 FC | 	wrlong	local01, fp
1f160     04 4E 05 F1 | 	add	fp, #4
1f164     A7 28 62 FC | 	wrlong	local02, fp
1f168     04 4E 05 F1 | 	add	fp, #4
1f16c     A7 2A 62 FC | 	wrlong	local03, fp
1f170     14 4E 85 F1 | 	sub	fp, #20
1f174     A8 E6 BE FD | 	call	#_pop
1f178     FF 2A 02 F6 | 	mov	local03, result3
1f17c     A7 FA 61 FC | 	wrlong	result1, fp
1f180     04 4E 05 F1 | 	add	fp, #4
1f184     A7 FC 61 FC | 	wrlong	result2, fp
1f188     04 4E 05 F1 | 	add	fp, #4
1f18c     A7 2A 62 FC | 	wrlong	local03, fp
1f190                 | ' 
1f190                 | ' t2=pop()
1f190                 | ' t1=pop()
1f190                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1f190     08 4E 85 F1 | 	sub	fp, #8
1f194     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f198     14 4E 05 A1 |  if_e	add	fp, #20
1f19c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f1a0     14 4E 85 A1 |  if_e	sub	fp, #20
1f1a4     16 2B 02 A6 |  if_e	mov	local03, local04
1f1a8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f1ac     28 00 90 5D |  if_ne	jmp	#LR__2450
1f1b0     00 26 06 F6 | 	mov	local01, #0
1f1b4     A7 12 02 FB | 	rdlong	arg01, fp
1f1b8     0C 4E 05 F1 | 	add	fp, #12
1f1bc     A7 14 02 FB | 	rdlong	arg02, fp
1f1c0     0C 4E 85 F1 | 	sub	fp, #12
1f1c4     74 8F B0 FD | 	call	#__system___string_cmp
1f1c8     00 FA 0D F2 | 	cmp	result1, #0 wz
1f1cc     00 26 26 A6 |  if_e	not	local01, #0
1f1d0     A7 26 62 FC | 	wrlong	local01, fp
1f1d4     20 04 90 FD | 	jmp	#LR__2463
1f1d8                 | LR__2450
1f1d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1f1d8     08 4E 05 F1 | 	add	fp, #8
1f1dc     A7 26 02 FB | 	rdlong	local01, fp
1f1e0     08 4E 85 F1 | 	sub	fp, #8
1f1e4     1E 26 0E F2 | 	cmp	local01, #30 wz
1f1e8     14 4E 05 A1 |  if_e	add	fp, #20
1f1ec     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f1f0     14 4E 85 A1 |  if_e	sub	fp, #20
1f1f4     16 2B 02 A6 |  if_e	mov	local03, local04
1f1f8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f1fc     2C 00 90 5D |  if_ne	jmp	#LR__2451
1f200     00 26 06 F6 | 	mov	local01, #0
1f204     A7 12 02 FB | 	rdlong	arg01, fp
1f208     0C 4E 05 F1 | 	add	fp, #12
1f20c     A7 14 02 FB | 	rdlong	arg02, fp
1f210     0C 4E 85 F1 | 	sub	fp, #12
1f214     01 16 06 F6 | 	mov	arg03, #1
1f218     A8 C1 B0 FD | 	call	#__system___float_cmp
1f21c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f220     00 26 26 A6 |  if_e	not	local01, #0
1f224     A7 26 62 FC | 	wrlong	local01, fp
1f228     CC 03 90 FD | 	jmp	#LR__2463
1f22c                 | LR__2451
1f22c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1f22c     08 4E 05 F1 | 	add	fp, #8
1f230     A7 26 02 FB | 	rdlong	local01, fp
1f234     08 4E 85 F1 | 	sub	fp, #8
1f238     1E 26 0E F2 | 	cmp	local01, #30 wz
1f23c     14 4E 05 A1 |  if_e	add	fp, #20
1f240     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f244     14 4E 85 A1 |  if_e	sub	fp, #20
1f248     16 2B 02 A6 |  if_e	mov	local03, local04
1f24c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f250     48 00 90 5D |  if_ne	jmp	#LR__2452
1f254     00 26 06 F6 | 	mov	local01, #0
1f258     A7 28 02 FB | 	rdlong	local02, fp
1f25c     0C 4E 05 F1 | 	add	fp, #12
1f260     A7 12 02 FB | 	rdlong	arg01, fp
1f264     0C 4E 85 F1 | 	sub	fp, #12
1f268     09 13 52 F6 | 	abs	arg01, arg01 wc
1f26c     1F 2E C6 C9 |  if_b	decod	local05, #31
1f270     00 2E 06 36 |  if_ae	mov	local05, #0
1f274     14 B9 B0 FD | 	call	#__system___float_fromuns
1f278     17 FB 61 F5 | 	xor	result1, local05
1f27c     FD 14 02 F6 | 	mov	arg02, result1
1f280     14 13 02 F6 | 	mov	arg01, local02
1f284     01 16 06 F6 | 	mov	arg03, #1
1f288     38 C1 B0 FD | 	call	#__system___float_cmp
1f28c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f290     00 26 26 A6 |  if_e	not	local01, #0
1f294     A7 26 62 FC | 	wrlong	local01, fp
1f298     5C 03 90 FD | 	jmp	#LR__2463
1f29c                 | LR__2452
1f29c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1f29c     08 4E 05 F1 | 	add	fp, #8
1f2a0     A7 26 02 FB | 	rdlong	local01, fp
1f2a4     08 4E 85 F1 | 	sub	fp, #8
1f2a8     1E 26 0E F2 | 	cmp	local01, #30 wz
1f2ac     14 4E 05 A1 |  if_e	add	fp, #20
1f2b0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f2b4     14 4E 85 A1 |  if_e	sub	fp, #20
1f2b8     16 2B 02 A6 |  if_e	mov	local03, local04
1f2bc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f2c0     38 00 90 5D |  if_ne	jmp	#LR__2453
1f2c4     00 26 06 F6 | 	mov	local01, #0
1f2c8     A7 28 02 FB | 	rdlong	local02, fp
1f2cc     0C 4E 05 F1 | 	add	fp, #12
1f2d0     A7 12 02 FB | 	rdlong	arg01, fp
1f2d4     0C 4E 85 F1 | 	sub	fp, #12
1f2d8     B0 B8 B0 FD | 	call	#__system___float_fromuns
1f2dc     FD 14 02 F6 | 	mov	arg02, result1
1f2e0     14 13 02 F6 | 	mov	arg01, local02
1f2e4     01 16 06 F6 | 	mov	arg03, #1
1f2e8     D8 C0 B0 FD | 	call	#__system___float_cmp
1f2ec     00 FA 0D F2 | 	cmp	result1, #0 wz
1f2f0     00 26 26 A6 |  if_e	not	local01, #0
1f2f4     A7 26 62 FC | 	wrlong	local01, fp
1f2f8     FC 02 90 FD | 	jmp	#LR__2463
1f2fc                 | LR__2453
1f2fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1f2fc     08 4E 05 F1 | 	add	fp, #8
1f300     A7 26 02 FB | 	rdlong	local01, fp
1f304     08 4E 85 F1 | 	sub	fp, #8
1f308     1C 26 0E F2 | 	cmp	local01, #28 wz
1f30c     14 4E 05 A1 |  if_e	add	fp, #20
1f310     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f314     14 4E 85 A1 |  if_e	sub	fp, #20
1f318     16 2B 02 A6 |  if_e	mov	local03, local04
1f31c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f320     44 00 90 5D |  if_ne	jmp	#LR__2454
1f324     00 26 06 F6 | 	mov	local01, #0
1f328     A7 12 02 FB | 	rdlong	arg01, fp
1f32c     09 13 52 F6 | 	abs	arg01, arg01 wc
1f330     1F 2E C6 C9 |  if_b	decod	local05, #31
1f334     00 2E 06 36 |  if_ae	mov	local05, #0
1f338     50 B8 B0 FD | 	call	#__system___float_fromuns
1f33c     17 FB 61 F5 | 	xor	result1, local05
1f340     FD 12 02 F6 | 	mov	arg01, result1
1f344     0C 4E 05 F1 | 	add	fp, #12
1f348     A7 14 02 FB | 	rdlong	arg02, fp
1f34c     0C 4E 85 F1 | 	sub	fp, #12
1f350     01 16 06 F6 | 	mov	arg03, #1
1f354     6C C0 B0 FD | 	call	#__system___float_cmp
1f358     00 FA 0D F2 | 	cmp	result1, #0 wz
1f35c     00 26 26 A6 |  if_e	not	local01, #0
1f360     A7 26 62 FC | 	wrlong	local01, fp
1f364     90 02 90 FD | 	jmp	#LR__2463
1f368                 | LR__2454
1f368                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1f368     08 4E 05 F1 | 	add	fp, #8
1f36c     A7 26 02 FB | 	rdlong	local01, fp
1f370     08 4E 85 F1 | 	sub	fp, #8
1f374     1C 26 0E F2 | 	cmp	local01, #28 wz
1f378     14 4E 05 A1 |  if_e	add	fp, #20
1f37c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f380     14 4E 85 A1 |  if_e	sub	fp, #20
1f384     16 2B 02 A6 |  if_e	mov	local03, local04
1f388     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f38c     24 00 90 5D |  if_ne	jmp	#LR__2455
1f390     00 26 06 F6 | 	mov	local01, #0
1f394     A7 28 02 FB | 	rdlong	local02, fp
1f398     0C 4E 05 F1 | 	add	fp, #12
1f39c     A7 2A 02 FB | 	rdlong	local03, fp
1f3a0     0C 4E 85 F1 | 	sub	fp, #12
1f3a4     15 29 0A F2 | 	cmp	local02, local03 wz
1f3a8     01 26 66 A6 |  if_e	neg	local01, #1
1f3ac     A7 26 62 FC | 	wrlong	local01, fp
1f3b0     44 02 90 FD | 	jmp	#LR__2463
1f3b4                 | LR__2455
1f3b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1f3b4     08 4E 05 F1 | 	add	fp, #8
1f3b8     A7 26 02 FB | 	rdlong	local01, fp
1f3bc     08 4E 85 F1 | 	sub	fp, #8
1f3c0     1C 26 0E F2 | 	cmp	local01, #28 wz
1f3c4     14 4E 05 A1 |  if_e	add	fp, #20
1f3c8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f3cc     14 4E 85 A1 |  if_e	sub	fp, #20
1f3d0     16 2B 02 A6 |  if_e	mov	local03, local04
1f3d4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f3d8     24 00 90 5D |  if_ne	jmp	#LR__2456
1f3dc     00 26 06 F6 | 	mov	local01, #0
1f3e0     A7 28 02 FB | 	rdlong	local02, fp
1f3e4     0C 4E 05 F1 | 	add	fp, #12
1f3e8     A7 2A 02 FB | 	rdlong	local03, fp
1f3ec     0C 4E 85 F1 | 	sub	fp, #12
1f3f0     15 29 0A F2 | 	cmp	local02, local03 wz
1f3f4     01 26 66 A6 |  if_e	neg	local01, #1
1f3f8     A7 26 62 FC | 	wrlong	local01, fp
1f3fc     F8 01 90 FD | 	jmp	#LR__2463
1f400                 | LR__2456
1f400                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1f400     08 4E 05 F1 | 	add	fp, #8
1f404     A7 26 02 FB | 	rdlong	local01, fp
1f408     08 4E 85 F1 | 	sub	fp, #8
1f40c     1D 26 0E F2 | 	cmp	local01, #29 wz
1f410     14 4E 05 A1 |  if_e	add	fp, #20
1f414     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f418     14 4E 85 A1 |  if_e	sub	fp, #20
1f41c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1f420     34 00 90 5D |  if_ne	jmp	#LR__2457
1f424     00 26 06 F6 | 	mov	local01, #0
1f428     A7 12 02 FB | 	rdlong	arg01, fp
1f42c     5C B7 B0 FD | 	call	#__system___float_fromuns
1f430     FD 12 02 F6 | 	mov	arg01, result1
1f434     0C 4E 05 F1 | 	add	fp, #12
1f438     A7 14 02 FB | 	rdlong	arg02, fp
1f43c     0C 4E 85 F1 | 	sub	fp, #12
1f440     01 16 06 F6 | 	mov	arg03, #1
1f444     7C BF B0 FD | 	call	#__system___float_cmp
1f448     00 FA 0D F2 | 	cmp	result1, #0 wz
1f44c     00 26 26 A6 |  if_e	not	local01, #0
1f450     A7 26 62 FC | 	wrlong	local01, fp
1f454     A0 01 90 FD | 	jmp	#LR__2463
1f458                 | LR__2457
1f458                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1f458     08 4E 05 F1 | 	add	fp, #8
1f45c     A7 26 02 FB | 	rdlong	local01, fp
1f460     08 4E 85 F1 | 	sub	fp, #8
1f464     1D 26 0E F2 | 	cmp	local01, #29 wz
1f468     14 4E 05 A1 |  if_e	add	fp, #20
1f46c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f470     14 4E 85 A1 |  if_e	sub	fp, #20
1f474     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f478     24 00 90 5D |  if_ne	jmp	#LR__2458
1f47c     00 26 06 F6 | 	mov	local01, #0
1f480     A7 28 02 FB | 	rdlong	local02, fp
1f484     0C 4E 05 F1 | 	add	fp, #12
1f488     A7 2A 02 FB | 	rdlong	local03, fp
1f48c     0C 4E 85 F1 | 	sub	fp, #12
1f490     15 29 0A F2 | 	cmp	local02, local03 wz
1f494     01 26 66 A6 |  if_e	neg	local01, #1
1f498     A7 26 62 FC | 	wrlong	local01, fp
1f49c     58 01 90 FD | 	jmp	#LR__2463
1f4a0                 | LR__2458
1f4a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1f4a0     08 4E 05 F1 | 	add	fp, #8
1f4a4     A7 26 02 FB | 	rdlong	local01, fp
1f4a8     08 4E 85 F1 | 	sub	fp, #8
1f4ac     1D 26 0E F2 | 	cmp	local01, #29 wz
1f4b0     14 4E 05 A1 |  if_e	add	fp, #20
1f4b4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f4b8     14 4E 85 A1 |  if_e	sub	fp, #20
1f4bc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f4c0     24 00 90 5D |  if_ne	jmp	#LR__2459
1f4c4     00 26 06 F6 | 	mov	local01, #0
1f4c8     A7 28 02 FB | 	rdlong	local02, fp
1f4cc     0C 4E 05 F1 | 	add	fp, #12
1f4d0     A7 2A 02 FB | 	rdlong	local03, fp
1f4d4     0C 4E 85 F1 | 	sub	fp, #12
1f4d8     15 29 0A F2 | 	cmp	local02, local03 wz
1f4dc     01 26 66 A6 |  if_e	neg	local01, #1
1f4e0     A7 26 62 FC | 	wrlong	local01, fp
1f4e4     10 01 90 FD | 	jmp	#LR__2463
1f4e8                 | LR__2459
1f4e8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1f4e8     08 4E 05 F1 | 	add	fp, #8
1f4ec     A7 26 02 FB | 	rdlong	local01, fp
1f4f0     08 4E 85 F1 | 	sub	fp, #8
1f4f4     2B 26 0E F2 | 	cmp	local01, #43 wz
1f4f8     14 4E 05 A1 |  if_e	add	fp, #20
1f4fc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f500     14 4E 85 A1 |  if_e	sub	fp, #20
1f504     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f508     30 00 90 5D |  if_ne	jmp	#LR__2460
1f50c     00 26 06 F6 | 	mov	local01, #0
1f510     A7 12 02 FB | 	rdlong	arg01, fp
1f514     80 E4 BE FD | 	call	#_convertstring
1f518     FD 12 02 F6 | 	mov	arg01, result1
1f51c     0C 4E 05 F1 | 	add	fp, #12
1f520     A7 14 02 FB | 	rdlong	arg02, fp
1f524     0C 4E 85 F1 | 	sub	fp, #12
1f528     10 8C B0 FD | 	call	#__system___string_cmp
1f52c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f530     00 26 26 A6 |  if_e	not	local01, #0
1f534     A7 26 62 FC | 	wrlong	local01, fp
1f538     BC 00 90 FD | 	jmp	#LR__2463
1f53c                 | LR__2460
1f53c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1f53c     08 4E 05 F1 | 	add	fp, #8
1f540     A7 26 02 FB | 	rdlong	local01, fp
1f544     08 4E 85 F1 | 	sub	fp, #8
1f548     1F 26 0E F2 | 	cmp	local01, #31 wz
1f54c     14 4E 05 A1 |  if_e	add	fp, #20
1f550     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f554     14 4E 85 A1 |  if_e	sub	fp, #20
1f558     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f55c     34 00 90 5D |  if_ne	jmp	#LR__2461
1f560     00 26 06 F6 | 	mov	local01, #0
1f564     A7 28 02 FB | 	rdlong	local02, fp
1f568     0C 4E 05 F1 | 	add	fp, #12
1f56c     A7 12 02 FB | 	rdlong	arg01, fp
1f570     0C 4E 85 F1 | 	sub	fp, #12
1f574     20 E4 BE FD | 	call	#_convertstring
1f578     FD 14 02 F6 | 	mov	arg02, result1
1f57c     14 13 02 F6 | 	mov	arg01, local02
1f580     B8 8B B0 FD | 	call	#__system___string_cmp
1f584     00 FA 0D F2 | 	cmp	result1, #0 wz
1f588     00 26 26 A6 |  if_e	not	local01, #0
1f58c     A7 26 62 FC | 	wrlong	local01, fp
1f590     64 00 90 FD | 	jmp	#LR__2463
1f594                 | LR__2461
1f594                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1f594     08 4E 05 F1 | 	add	fp, #8
1f598     A7 26 02 FB | 	rdlong	local01, fp
1f59c     08 4E 85 F1 | 	sub	fp, #8
1f5a0     2B 26 0E F2 | 	cmp	local01, #43 wz
1f5a4     14 4E 05 A1 |  if_e	add	fp, #20
1f5a8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f5ac     14 4E 85 A1 |  if_e	sub	fp, #20
1f5b0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f5b4     3C 00 90 5D |  if_ne	jmp	#LR__2462
1f5b8     00 26 06 F6 | 	mov	local01, #0
1f5bc     A7 12 02 FB | 	rdlong	arg01, fp
1f5c0     D4 E3 BE FD | 	call	#_convertstring
1f5c4     FD 28 02 F6 | 	mov	local02, result1
1f5c8     0C 4E 05 F1 | 	add	fp, #12
1f5cc     A7 12 02 FB | 	rdlong	arg01, fp
1f5d0     0C 4E 85 F1 | 	sub	fp, #12
1f5d4     C0 E3 BE FD | 	call	#_convertstring
1f5d8     FD 14 02 F6 | 	mov	arg02, result1
1f5dc     14 13 02 F6 | 	mov	arg01, local02
1f5e0     58 8B B0 FD | 	call	#__system___string_cmp
1f5e4     00 FA 0D F2 | 	cmp	result1, #0 wz
1f5e8     00 26 26 A6 |  if_e	not	local01, #0
1f5ec     A7 26 62 FC | 	wrlong	local01, fp
1f5f0     04 00 90 FD | 	jmp	#LR__2463
1f5f4                 | LR__2462
1f5f4     A7 00 68 FC | 	wrlong	#0, fp
1f5f8                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f5f8                 | LR__2463
1f5f8     08 4E 05 F1 | 	add	fp, #8
1f5fc     A7 38 68 FC | 	wrlong	#28, fp
1f600     08 4E 85 F1 | 	sub	fp, #8
1f604     A7 12 02 F6 | 	mov	arg01, fp
1f608     AC E2 BE FD | 	call	#_push
1f60c     A7 F0 03 F6 | 	mov	ptra, fp
1f610     B2 00 A0 FD | 	call	#popregs_
1f614                 | _do_eq_ret
1f614     2D 00 64 FD | 	ret
1f618                 | 
1f618                 | ' 
1f618                 | ' '--------------------------------- fdiv (/) - float divide
1f618                 | ' 
1f618                 | ' sub do_fdiv 
1f618                 | _do_fdiv
1f618     02 4A 05 F6 | 	mov	COUNT_, #2
1f61c     A8 00 A0 FD | 	call	#pushregs_
1f620     18 F0 07 F1 | 	add	ptra, #24
1f624     F8 E1 BE FD | 	call	#_pop
1f628     FD 14 02 F6 | 	mov	arg02, result1
1f62c     FE 12 02 F6 | 	mov	arg01, result2
1f630     FF 26 02 F6 | 	mov	local01, result3
1f634     0C 4E 05 F1 | 	add	fp, #12
1f638     A7 14 62 FC | 	wrlong	arg02, fp
1f63c     04 4E 05 F1 | 	add	fp, #4
1f640     A7 12 62 FC | 	wrlong	arg01, fp
1f644     04 4E 05 F1 | 	add	fp, #4
1f648     A7 26 62 FC | 	wrlong	local01, fp
1f64c     14 4E 85 F1 | 	sub	fp, #20
1f650     CC E1 BE FD | 	call	#_pop
1f654     A7 FA 61 FC | 	wrlong	result1, fp
1f658     04 4E 05 F1 | 	add	fp, #4
1f65c     A7 FC 61 FC | 	wrlong	result2, fp
1f660     04 4E 05 F1 | 	add	fp, #4
1f664     A7 FE 61 FC | 	wrlong	result3, fp
1f668                 | ' 
1f668                 | ' t2=pop()
1f668                 | ' t1=pop()
1f668                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1f668     08 4E 85 F1 | 	sub	fp, #8
1f66c     1F FE 0D F2 | 	cmp	result3, #31 wz
1f670     14 4E 05 51 |  if_ne	add	fp, #20
1f674     A7 26 02 5B |  if_ne	rdlong	local01, fp
1f678     14 4E 85 51 |  if_ne	sub	fp, #20
1f67c     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1f680     A7 14 68 AC |  if_e	wrlong	#10, fp
1f684     08 4E 05 A1 |  if_e	add	fp, #8
1f688     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f68c     08 4E 85 A1 |  if_e	sub	fp, #8
1f690     38 01 90 AD |  if_e	jmp	#LR__2475
1f694                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1f694     08 4E 05 F1 | 	add	fp, #8
1f698     A7 14 02 FB | 	rdlong	arg02, fp
1f69c     08 4E 85 F1 | 	sub	fp, #8
1f6a0     1C 14 0E F2 | 	cmp	arg02, #28 wz
1f6a4     28 00 90 5D |  if_ne	jmp	#LR__2470
1f6a8     08 4E 05 F1 | 	add	fp, #8
1f6ac     A7 3C 68 FC | 	wrlong	#30, fp
1f6b0     08 4E 85 F1 | 	sub	fp, #8
1f6b4     A7 12 02 FB | 	rdlong	arg01, fp
1f6b8     09 13 52 F6 | 	abs	arg01, arg01 wc
1f6bc     1F 28 C6 C9 |  if_b	decod	local02, #31
1f6c0     00 28 06 36 |  if_ae	mov	local02, #0
1f6c4     C4 B4 B0 FD | 	call	#__system___float_fromuns
1f6c8     14 FB 61 F5 | 	xor	result1, local02
1f6cc     A7 FA 61 FC | 	wrlong	result1, fp
1f6d0                 | LR__2470
1f6d0                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1f6d0     08 4E 05 F1 | 	add	fp, #8
1f6d4     A7 14 02 FB | 	rdlong	arg02, fp
1f6d8     08 4E 85 F1 | 	sub	fp, #8
1f6dc     1D 14 0E F2 | 	cmp	arg02, #29 wz
1f6e0     18 00 90 5D |  if_ne	jmp	#LR__2471
1f6e4     08 4E 05 F1 | 	add	fp, #8
1f6e8     A7 3C 68 FC | 	wrlong	#30, fp
1f6ec     08 4E 85 F1 | 	sub	fp, #8
1f6f0     A7 12 02 FB | 	rdlong	arg01, fp
1f6f4     94 B4 B0 FD | 	call	#__system___float_fromuns
1f6f8     A7 FA 61 FC | 	wrlong	result1, fp
1f6fc                 | LR__2471
1f6fc                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1f6fc     14 4E 05 F1 | 	add	fp, #20
1f700     A7 14 02 FB | 	rdlong	arg02, fp
1f704     14 4E 85 F1 | 	sub	fp, #20
1f708     1C 14 0E F2 | 	cmp	arg02, #28 wz
1f70c     34 00 90 5D |  if_ne	jmp	#LR__2472
1f710     14 4E 05 F1 | 	add	fp, #20
1f714     A7 3C 68 FC | 	wrlong	#30, fp
1f718     08 4E 85 F1 | 	sub	fp, #8
1f71c     A7 12 02 FB | 	rdlong	arg01, fp
1f720     0C 4E 85 F1 | 	sub	fp, #12
1f724     09 13 52 F6 | 	abs	arg01, arg01 wc
1f728     1F 28 C6 C9 |  if_b	decod	local02, #31
1f72c     00 28 06 36 |  if_ae	mov	local02, #0
1f730     58 B4 B0 FD | 	call	#__system___float_fromuns
1f734     14 FB 61 F5 | 	xor	result1, local02
1f738     0C 4E 05 F1 | 	add	fp, #12
1f73c     A7 FA 61 FC | 	wrlong	result1, fp
1f740     0C 4E 85 F1 | 	sub	fp, #12
1f744                 | LR__2472
1f744                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1f744     14 4E 05 F1 | 	add	fp, #20
1f748     A7 14 02 FB | 	rdlong	arg02, fp
1f74c     14 4E 85 F1 | 	sub	fp, #20
1f750     1D 14 0E F2 | 	cmp	arg02, #29 wz
1f754     24 00 90 5D |  if_ne	jmp	#LR__2473
1f758     14 4E 05 F1 | 	add	fp, #20
1f75c     A7 3C 68 FC | 	wrlong	#30, fp
1f760     08 4E 85 F1 | 	sub	fp, #8
1f764     A7 12 02 FB | 	rdlong	arg01, fp
1f768     0C 4E 85 F1 | 	sub	fp, #12
1f76c     1C B4 B0 FD | 	call	#__system___float_fromuns
1f770     0C 4E 05 F1 | 	add	fp, #12
1f774     A7 FA 61 FC | 	wrlong	result1, fp
1f778     0C 4E 85 F1 | 	sub	fp, #12
1f77c                 | LR__2473
1f77c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1f77c     08 4E 05 F1 | 	add	fp, #8
1f780     A7 14 02 FB | 	rdlong	arg02, fp
1f784     08 4E 85 F1 | 	sub	fp, #8
1f788     1E 14 0E F2 | 	cmp	arg02, #30 wz
1f78c     14 4E 05 A1 |  if_e	add	fp, #20
1f790     A7 26 02 AB |  if_e	rdlong	local01, fp
1f794     14 4E 85 A1 |  if_e	sub	fp, #20
1f798     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1f79c     1C 00 90 5D |  if_ne	jmp	#LR__2474
1f7a0     A7 12 02 FB | 	rdlong	arg01, fp
1f7a4     0C 4E 05 F1 | 	add	fp, #12
1f7a8     A7 14 02 FB | 	rdlong	arg02, fp
1f7ac     0C 4E 85 F1 | 	sub	fp, #12
1f7b0     E0 B9 B0 FD | 	call	#__system___float_div
1f7b4     A7 FA 61 FC | 	wrlong	result1, fp
1f7b8     10 00 90 FD | 	jmp	#LR__2475
1f7bc                 | LR__2474
1f7bc     A7 16 68 FC | 	wrlong	#11, fp
1f7c0     08 4E 05 F1 | 	add	fp, #8
1f7c4     A7 FE 69 FC | 	wrlong	#255, fp
1f7c8     08 4E 85 F1 | 	sub	fp, #8
1f7cc                 | LR__2475
1f7cc     A7 12 02 F6 | 	mov	arg01, fp
1f7d0     E4 E0 BE FD | 	call	#_push
1f7d4     A7 F0 03 F6 | 	mov	ptra, fp
1f7d8     B2 00 A0 FD | 	call	#popregs_
1f7dc                 | _do_fdiv_ret
1f7dc     2D 00 64 FD | 	ret
1f7e0                 | 
1f7e0                 | ' 
1f7e0                 | ' '--------------------------------- greater or equal (>=)
1f7e0                 | ' 
1f7e0                 | ' sub do_ge
1f7e0                 | _do_ge
1f7e0     05 4A 05 F6 | 	mov	COUNT_, #5
1f7e4     A8 00 A0 FD | 	call	#pushregs_
1f7e8     18 F0 07 F1 | 	add	ptra, #24
1f7ec     30 E0 BE FD | 	call	#_pop
1f7f0     FD 26 02 F6 | 	mov	local01, result1
1f7f4     FE 28 02 F6 | 	mov	local02, result2
1f7f8     FF 2A 02 F6 | 	mov	local03, result3
1f7fc     0C 4E 05 F1 | 	add	fp, #12
1f800     A7 26 62 FC | 	wrlong	local01, fp
1f804     04 4E 05 F1 | 	add	fp, #4
1f808     A7 28 62 FC | 	wrlong	local02, fp
1f80c     04 4E 05 F1 | 	add	fp, #4
1f810     A7 2A 62 FC | 	wrlong	local03, fp
1f814     14 4E 85 F1 | 	sub	fp, #20
1f818     04 E0 BE FD | 	call	#_pop
1f81c     FF 2A 02 F6 | 	mov	local03, result3
1f820     A7 FA 61 FC | 	wrlong	result1, fp
1f824     04 4E 05 F1 | 	add	fp, #4
1f828     A7 FC 61 FC | 	wrlong	result2, fp
1f82c     04 4E 05 F1 | 	add	fp, #4
1f830     A7 2A 62 FC | 	wrlong	local03, fp
1f834                 | ' 
1f834                 | ' t2=pop()
1f834                 | ' t1=pop()
1f834                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1f834     08 4E 85 F1 | 	sub	fp, #8
1f838     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f83c     14 4E 05 A1 |  if_e	add	fp, #20
1f840     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f844     14 4E 85 A1 |  if_e	sub	fp, #20
1f848     16 2B 02 A6 |  if_e	mov	local03, local04
1f84c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f850     28 00 90 5D |  if_ne	jmp	#LR__2480
1f854     00 26 06 F6 | 	mov	local01, #0
1f858     A7 12 02 FB | 	rdlong	arg01, fp
1f85c     0C 4E 05 F1 | 	add	fp, #12
1f860     A7 14 02 FB | 	rdlong	arg02, fp
1f864     0C 4E 85 F1 | 	sub	fp, #12
1f868     D0 88 B0 FD | 	call	#__system___string_cmp
1f86c     00 FA 55 F2 | 	cmps	result1, #0 wc
1f870     00 26 26 36 |  if_ae	not	local01, #0
1f874     A7 26 62 FC | 	wrlong	local01, fp
1f878     24 04 90 FD | 	jmp	#LR__2493
1f87c                 | LR__2480
1f87c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1f87c     08 4E 05 F1 | 	add	fp, #8
1f880     A7 26 02 FB | 	rdlong	local01, fp
1f884     08 4E 85 F1 | 	sub	fp, #8
1f888     1E 26 0E F2 | 	cmp	local01, #30 wz
1f88c     14 4E 05 A1 |  if_e	add	fp, #20
1f890     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f894     14 4E 85 A1 |  if_e	sub	fp, #20
1f898     16 2B 02 A6 |  if_e	mov	local03, local04
1f89c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f8a0     2C 00 90 5D |  if_ne	jmp	#LR__2481
1f8a4     00 26 06 F6 | 	mov	local01, #0
1f8a8     A7 12 02 FB | 	rdlong	arg01, fp
1f8ac     0C 4E 05 F1 | 	add	fp, #12
1f8b0     A7 14 02 FB | 	rdlong	arg02, fp
1f8b4     0C 4E 85 F1 | 	sub	fp, #12
1f8b8     01 16 66 F6 | 	neg	arg03, #1
1f8bc     04 BB B0 FD | 	call	#__system___float_cmp
1f8c0     00 FA 55 F2 | 	cmps	result1, #0 wc
1f8c4     00 26 26 36 |  if_ae	not	local01, #0
1f8c8     A7 26 62 FC | 	wrlong	local01, fp
1f8cc     D0 03 90 FD | 	jmp	#LR__2493
1f8d0                 | LR__2481
1f8d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1f8d0     08 4E 05 F1 | 	add	fp, #8
1f8d4     A7 26 02 FB | 	rdlong	local01, fp
1f8d8     08 4E 85 F1 | 	sub	fp, #8
1f8dc     1E 26 0E F2 | 	cmp	local01, #30 wz
1f8e0     14 4E 05 A1 |  if_e	add	fp, #20
1f8e4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f8e8     14 4E 85 A1 |  if_e	sub	fp, #20
1f8ec     16 2B 02 A6 |  if_e	mov	local03, local04
1f8f0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f8f4     48 00 90 5D |  if_ne	jmp	#LR__2482
1f8f8     00 26 06 F6 | 	mov	local01, #0
1f8fc     A7 28 02 FB | 	rdlong	local02, fp
1f900     0C 4E 05 F1 | 	add	fp, #12
1f904     A7 12 02 FB | 	rdlong	arg01, fp
1f908     0C 4E 85 F1 | 	sub	fp, #12
1f90c     09 13 52 F6 | 	abs	arg01, arg01 wc
1f910     1F 2E C6 C9 |  if_b	decod	local05, #31
1f914     00 2E 06 36 |  if_ae	mov	local05, #0
1f918     70 B2 B0 FD | 	call	#__system___float_fromuns
1f91c     17 FB 61 F5 | 	xor	result1, local05
1f920     FD 14 02 F6 | 	mov	arg02, result1
1f924     14 13 02 F6 | 	mov	arg01, local02
1f928     01 16 66 F6 | 	neg	arg03, #1
1f92c     94 BA B0 FD | 	call	#__system___float_cmp
1f930     00 FA 55 F2 | 	cmps	result1, #0 wc
1f934     00 26 26 36 |  if_ae	not	local01, #0
1f938     A7 26 62 FC | 	wrlong	local01, fp
1f93c     60 03 90 FD | 	jmp	#LR__2493
1f940                 | LR__2482
1f940                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1f940     08 4E 05 F1 | 	add	fp, #8
1f944     A7 26 02 FB | 	rdlong	local01, fp
1f948     08 4E 85 F1 | 	sub	fp, #8
1f94c     1E 26 0E F2 | 	cmp	local01, #30 wz
1f950     14 4E 05 A1 |  if_e	add	fp, #20
1f954     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f958     14 4E 85 A1 |  if_e	sub	fp, #20
1f95c     16 2B 02 A6 |  if_e	mov	local03, local04
1f960     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f964     38 00 90 5D |  if_ne	jmp	#LR__2483
1f968     00 26 06 F6 | 	mov	local01, #0
1f96c     A7 28 02 FB | 	rdlong	local02, fp
1f970     0C 4E 05 F1 | 	add	fp, #12
1f974     A7 12 02 FB | 	rdlong	arg01, fp
1f978     0C 4E 85 F1 | 	sub	fp, #12
1f97c     0C B2 B0 FD | 	call	#__system___float_fromuns
1f980     FD 14 02 F6 | 	mov	arg02, result1
1f984     14 13 02 F6 | 	mov	arg01, local02
1f988     01 16 66 F6 | 	neg	arg03, #1
1f98c     34 BA B0 FD | 	call	#__system___float_cmp
1f990     00 FA 55 F2 | 	cmps	result1, #0 wc
1f994     00 26 26 36 |  if_ae	not	local01, #0
1f998     A7 26 62 FC | 	wrlong	local01, fp
1f99c     00 03 90 FD | 	jmp	#LR__2493
1f9a0                 | LR__2483
1f9a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1f9a0     08 4E 05 F1 | 	add	fp, #8
1f9a4     A7 26 02 FB | 	rdlong	local01, fp
1f9a8     08 4E 85 F1 | 	sub	fp, #8
1f9ac     1C 26 0E F2 | 	cmp	local01, #28 wz
1f9b0     14 4E 05 A1 |  if_e	add	fp, #20
1f9b4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f9b8     14 4E 85 A1 |  if_e	sub	fp, #20
1f9bc     16 2B 02 A6 |  if_e	mov	local03, local04
1f9c0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f9c4     44 00 90 5D |  if_ne	jmp	#LR__2484
1f9c8     00 26 06 F6 | 	mov	local01, #0
1f9cc     A7 12 02 FB | 	rdlong	arg01, fp
1f9d0     09 13 52 F6 | 	abs	arg01, arg01 wc
1f9d4     1F 2E C6 C9 |  if_b	decod	local05, #31
1f9d8     00 2E 06 36 |  if_ae	mov	local05, #0
1f9dc     AC B1 B0 FD | 	call	#__system___float_fromuns
1f9e0     17 FB 61 F5 | 	xor	result1, local05
1f9e4     FD 12 02 F6 | 	mov	arg01, result1
1f9e8     0C 4E 05 F1 | 	add	fp, #12
1f9ec     A7 14 02 FB | 	rdlong	arg02, fp
1f9f0     0C 4E 85 F1 | 	sub	fp, #12
1f9f4     01 16 66 F6 | 	neg	arg03, #1
1f9f8     C8 B9 B0 FD | 	call	#__system___float_cmp
1f9fc     00 FA 55 F2 | 	cmps	result1, #0 wc
1fa00     00 26 26 36 |  if_ae	not	local01, #0
1fa04     A7 26 62 FC | 	wrlong	local01, fp
1fa08     94 02 90 FD | 	jmp	#LR__2493
1fa0c                 | LR__2484
1fa0c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1fa0c     08 4E 05 F1 | 	add	fp, #8
1fa10     A7 26 02 FB | 	rdlong	local01, fp
1fa14     08 4E 85 F1 | 	sub	fp, #8
1fa18     1C 26 0E F2 | 	cmp	local01, #28 wz
1fa1c     14 4E 05 A1 |  if_e	add	fp, #20
1fa20     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fa24     14 4E 85 A1 |  if_e	sub	fp, #20
1fa28     16 2B 02 A6 |  if_e	mov	local03, local04
1fa2c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fa30     24 00 90 5D |  if_ne	jmp	#LR__2485
1fa34     00 26 06 F6 | 	mov	local01, #0
1fa38     A7 28 02 FB | 	rdlong	local02, fp
1fa3c     0C 4E 05 F1 | 	add	fp, #12
1fa40     A7 2A 02 FB | 	rdlong	local03, fp
1fa44     0C 4E 85 F1 | 	sub	fp, #12
1fa48     15 29 52 F2 | 	cmps	local02, local03 wc
1fa4c     01 26 66 36 |  if_ae	neg	local01, #1
1fa50     A7 26 62 FC | 	wrlong	local01, fp
1fa54     48 02 90 FD | 	jmp	#LR__2493
1fa58                 | LR__2485
1fa58                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1fa58     08 4E 05 F1 | 	add	fp, #8
1fa5c     A7 26 02 FB | 	rdlong	local01, fp
1fa60     08 4E 85 F1 | 	sub	fp, #8
1fa64     1C 26 0E F2 | 	cmp	local01, #28 wz
1fa68     14 4E 05 A1 |  if_e	add	fp, #20
1fa6c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fa70     14 4E 85 A1 |  if_e	sub	fp, #20
1fa74     16 2B 02 A6 |  if_e	mov	local03, local04
1fa78     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fa7c     24 00 90 5D |  if_ne	jmp	#LR__2486
1fa80     00 26 06 F6 | 	mov	local01, #0
1fa84     A7 28 02 FB | 	rdlong	local02, fp
1fa88     0C 4E 05 F1 | 	add	fp, #12
1fa8c     A7 2A 02 FB | 	rdlong	local03, fp
1fa90     0C 4E 85 F1 | 	sub	fp, #12
1fa94     15 29 52 F2 | 	cmps	local02, local03 wc
1fa98     01 26 66 36 |  if_ae	neg	local01, #1
1fa9c     A7 26 62 FC | 	wrlong	local01, fp
1faa0     FC 01 90 FD | 	jmp	#LR__2493
1faa4                 | LR__2486
1faa4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1faa4     08 4E 05 F1 | 	add	fp, #8
1faa8     A7 26 02 FB | 	rdlong	local01, fp
1faac     08 4E 85 F1 | 	sub	fp, #8
1fab0     1D 26 0E F2 | 	cmp	local01, #29 wz
1fab4     14 4E 05 A1 |  if_e	add	fp, #20
1fab8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fabc     14 4E 85 A1 |  if_e	sub	fp, #20
1fac0     16 2B 02 A6 |  if_e	mov	local03, local04
1fac4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fac8     34 00 90 5D |  if_ne	jmp	#LR__2487
1facc     00 26 06 F6 | 	mov	local01, #0
1fad0     A7 12 02 FB | 	rdlong	arg01, fp
1fad4     B4 B0 B0 FD | 	call	#__system___float_fromuns
1fad8     FD 12 02 F6 | 	mov	arg01, result1
1fadc     0C 4E 05 F1 | 	add	fp, #12
1fae0     A7 14 02 FB | 	rdlong	arg02, fp
1fae4     0C 4E 85 F1 | 	sub	fp, #12
1fae8     01 16 66 F6 | 	neg	arg03, #1
1faec     D4 B8 B0 FD | 	call	#__system___float_cmp
1faf0     00 FA 55 F2 | 	cmps	result1, #0 wc
1faf4     00 26 26 36 |  if_ae	not	local01, #0
1faf8     A7 26 62 FC | 	wrlong	local01, fp
1fafc     A0 01 90 FD | 	jmp	#LR__2493
1fb00                 | LR__2487
1fb00                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1fb00     08 4E 05 F1 | 	add	fp, #8
1fb04     A7 26 02 FB | 	rdlong	local01, fp
1fb08     08 4E 85 F1 | 	sub	fp, #8
1fb0c     1D 26 0E F2 | 	cmp	local01, #29 wz
1fb10     14 4E 05 A1 |  if_e	add	fp, #20
1fb14     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fb18     14 4E 85 A1 |  if_e	sub	fp, #20
1fb1c     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1fb20     24 00 90 5D |  if_ne	jmp	#LR__2488
1fb24     00 26 06 F6 | 	mov	local01, #0
1fb28     A7 28 02 FB | 	rdlong	local02, fp
1fb2c     0C 4E 05 F1 | 	add	fp, #12
1fb30     A7 2A 02 FB | 	rdlong	local03, fp
1fb34     0C 4E 85 F1 | 	sub	fp, #12
1fb38     15 29 52 F2 | 	cmps	local02, local03 wc
1fb3c     01 26 66 36 |  if_ae	neg	local01, #1
1fb40     A7 26 62 FC | 	wrlong	local01, fp
1fb44     58 01 90 FD | 	jmp	#LR__2493
1fb48                 | LR__2488
1fb48                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1fb48     08 4E 05 F1 | 	add	fp, #8
1fb4c     A7 26 02 FB | 	rdlong	local01, fp
1fb50     08 4E 85 F1 | 	sub	fp, #8
1fb54     1D 26 0E F2 | 	cmp	local01, #29 wz
1fb58     14 4E 05 A1 |  if_e	add	fp, #20
1fb5c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fb60     14 4E 85 A1 |  if_e	sub	fp, #20
1fb64     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fb68     24 00 90 5D |  if_ne	jmp	#LR__2489
1fb6c     00 26 06 F6 | 	mov	local01, #0
1fb70     A7 28 02 FB | 	rdlong	local02, fp
1fb74     0C 4E 05 F1 | 	add	fp, #12
1fb78     A7 2A 02 FB | 	rdlong	local03, fp
1fb7c     0C 4E 85 F1 | 	sub	fp, #12
1fb80     15 29 12 F2 | 	cmp	local02, local03 wc
1fb84     01 26 66 36 |  if_ae	neg	local01, #1
1fb88     A7 26 62 FC | 	wrlong	local01, fp
1fb8c     10 01 90 FD | 	jmp	#LR__2493
1fb90                 | LR__2489
1fb90                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1fb90     08 4E 05 F1 | 	add	fp, #8
1fb94     A7 26 02 FB | 	rdlong	local01, fp
1fb98     08 4E 85 F1 | 	sub	fp, #8
1fb9c     2B 26 0E F2 | 	cmp	local01, #43 wz
1fba0     14 4E 05 A1 |  if_e	add	fp, #20
1fba4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fba8     14 4E 85 A1 |  if_e	sub	fp, #20
1fbac     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1fbb0     30 00 90 5D |  if_ne	jmp	#LR__2490
1fbb4     00 26 06 F6 | 	mov	local01, #0
1fbb8     A7 12 02 FB | 	rdlong	arg01, fp
1fbbc     D8 DD BE FD | 	call	#_convertstring
1fbc0     FD 12 02 F6 | 	mov	arg01, result1
1fbc4     0C 4E 05 F1 | 	add	fp, #12
1fbc8     A7 14 02 FB | 	rdlong	arg02, fp
1fbcc     0C 4E 85 F1 | 	sub	fp, #12
1fbd0     68 85 B0 FD | 	call	#__system___string_cmp
1fbd4     00 FA 55 F2 | 	cmps	result1, #0 wc
1fbd8     00 26 26 36 |  if_ae	not	local01, #0
1fbdc     A7 26 62 FC | 	wrlong	local01, fp
1fbe0     BC 00 90 FD | 	jmp	#LR__2493
1fbe4                 | LR__2490
1fbe4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1fbe4     08 4E 05 F1 | 	add	fp, #8
1fbe8     A7 26 02 FB | 	rdlong	local01, fp
1fbec     08 4E 85 F1 | 	sub	fp, #8
1fbf0     1F 26 0E F2 | 	cmp	local01, #31 wz
1fbf4     14 4E 05 A1 |  if_e	add	fp, #20
1fbf8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fbfc     14 4E 85 A1 |  if_e	sub	fp, #20
1fc00     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1fc04     34 00 90 5D |  if_ne	jmp	#LR__2491
1fc08     00 26 06 F6 | 	mov	local01, #0
1fc0c     A7 28 02 FB | 	rdlong	local02, fp
1fc10     0C 4E 05 F1 | 	add	fp, #12
1fc14     A7 12 02 FB | 	rdlong	arg01, fp
1fc18     0C 4E 85 F1 | 	sub	fp, #12
1fc1c     78 DD BE FD | 	call	#_convertstring
1fc20     FD 14 02 F6 | 	mov	arg02, result1
1fc24     14 13 02 F6 | 	mov	arg01, local02
1fc28     10 85 B0 FD | 	call	#__system___string_cmp
1fc2c     00 FA 55 F2 | 	cmps	result1, #0 wc
1fc30     00 26 26 36 |  if_ae	not	local01, #0
1fc34     A7 26 62 FC | 	wrlong	local01, fp
1fc38     64 00 90 FD | 	jmp	#LR__2493
1fc3c                 | LR__2491
1fc3c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1fc3c     08 4E 05 F1 | 	add	fp, #8
1fc40     A7 26 02 FB | 	rdlong	local01, fp
1fc44     08 4E 85 F1 | 	sub	fp, #8
1fc48     2B 26 0E F2 | 	cmp	local01, #43 wz
1fc4c     14 4E 05 A1 |  if_e	add	fp, #20
1fc50     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fc54     14 4E 85 A1 |  if_e	sub	fp, #20
1fc58     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1fc5c     3C 00 90 5D |  if_ne	jmp	#LR__2492
1fc60     00 26 06 F6 | 	mov	local01, #0
1fc64     A7 12 02 FB | 	rdlong	arg01, fp
1fc68     2C DD BE FD | 	call	#_convertstring
1fc6c     FD 28 02 F6 | 	mov	local02, result1
1fc70     0C 4E 05 F1 | 	add	fp, #12
1fc74     A7 12 02 FB | 	rdlong	arg01, fp
1fc78     0C 4E 85 F1 | 	sub	fp, #12
1fc7c     18 DD BE FD | 	call	#_convertstring
1fc80     FD 14 02 F6 | 	mov	arg02, result1
1fc84     14 13 02 F6 | 	mov	arg01, local02
1fc88     B0 84 B0 FD | 	call	#__system___string_cmp
1fc8c     00 FA 55 F2 | 	cmps	result1, #0 wc
1fc90     00 26 26 36 |  if_ae	not	local01, #0
1fc94     A7 26 62 FC | 	wrlong	local01, fp
1fc98     04 00 90 FD | 	jmp	#LR__2493
1fc9c                 | LR__2492
1fc9c     A7 00 68 FC | 	wrlong	#0, fp
1fca0                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1fca0                 | LR__2493
1fca0     08 4E 05 F1 | 	add	fp, #8
1fca4     A7 38 68 FC | 	wrlong	#28, fp
1fca8     08 4E 85 F1 | 	sub	fp, #8
1fcac                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1fcac     A7 26 0A FB | 	rdlong	local01, fp wz
1fcb0     A7 02 68 5C |  if_ne	wrlong	#1, fp
1fcb4     A7 12 02 F6 | 	mov	arg01, fp
1fcb8     FC DB BE FD | 	call	#_push
1fcbc     A7 F0 03 F6 | 	mov	ptra, fp
1fcc0     B2 00 A0 FD | 	call	#popregs_
1fcc4                 | _do_ge_ret
1fcc4     2D 00 64 FD | 	ret
1fcc8                 | 
1fcc8                 | ' 
1fcc8                 | ' '--------------------------------- greater than (>)
1fcc8                 | ' 
1fcc8                 | ' sub do_gt
1fcc8                 | _do_gt
1fcc8     05 4A 05 F6 | 	mov	COUNT_, #5
1fccc     A8 00 A0 FD | 	call	#pushregs_
1fcd0     18 F0 07 F1 | 	add	ptra, #24
1fcd4     48 DB BE FD | 	call	#_pop
1fcd8     FD 26 02 F6 | 	mov	local01, result1
1fcdc     FE 28 02 F6 | 	mov	local02, result2
1fce0     FF 2A 02 F6 | 	mov	local03, result3
1fce4     0C 4E 05 F1 | 	add	fp, #12
1fce8     A7 26 62 FC | 	wrlong	local01, fp
1fcec     04 4E 05 F1 | 	add	fp, #4
1fcf0     A7 28 62 FC | 	wrlong	local02, fp
1fcf4     04 4E 05 F1 | 	add	fp, #4
1fcf8     A7 2A 62 FC | 	wrlong	local03, fp
1fcfc     14 4E 85 F1 | 	sub	fp, #20
1fd00     1C DB BE FD | 	call	#_pop
1fd04     FF 2A 02 F6 | 	mov	local03, result3
1fd08     A7 FA 61 FC | 	wrlong	result1, fp
1fd0c     04 4E 05 F1 | 	add	fp, #4
1fd10     A7 FC 61 FC | 	wrlong	result2, fp
1fd14     04 4E 05 F1 | 	add	fp, #4
1fd18     A7 2A 62 FC | 	wrlong	local03, fp
1fd1c                 | ' 
1fd1c                 | ' t2=pop()
1fd1c                 | ' t1=pop()
1fd1c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1fd1c     08 4E 85 F1 | 	sub	fp, #8
1fd20     1F 2A 0E F2 | 	cmp	local03, #31 wz
1fd24     14 4E 05 A1 |  if_e	add	fp, #20
1fd28     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fd2c     14 4E 85 A1 |  if_e	sub	fp, #20
1fd30     16 2B 02 A6 |  if_e	mov	local03, local04
1fd34     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1fd38     28 00 90 5D |  if_ne	jmp	#LR__2500
1fd3c     00 26 06 F6 | 	mov	local01, #0
1fd40     A7 12 02 FB | 	rdlong	arg01, fp
1fd44     0C 4E 05 F1 | 	add	fp, #12
1fd48     A7 14 02 FB | 	rdlong	arg02, fp
1fd4c     0C 4E 85 F1 | 	sub	fp, #12
1fd50     E8 83 B0 FD | 	call	#__system___string_cmp
1fd54     01 FA 55 F2 | 	cmps	result1, #1 wc
1fd58     00 26 26 36 |  if_ae	not	local01, #0
1fd5c     A7 26 62 FC | 	wrlong	local01, fp
1fd60     20 04 90 FD | 	jmp	#LR__2513
1fd64                 | LR__2500
1fd64                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1fd64     08 4E 05 F1 | 	add	fp, #8
1fd68     A7 26 02 FB | 	rdlong	local01, fp
1fd6c     08 4E 85 F1 | 	sub	fp, #8
1fd70     1E 26 0E F2 | 	cmp	local01, #30 wz
1fd74     14 4E 05 A1 |  if_e	add	fp, #20
1fd78     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fd7c     14 4E 85 A1 |  if_e	sub	fp, #20
1fd80     16 2B 02 A6 |  if_e	mov	local03, local04
1fd84     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fd88     2C 00 90 5D |  if_ne	jmp	#LR__2501
1fd8c     00 26 06 F6 | 	mov	local01, #0
1fd90     A7 12 02 FB | 	rdlong	arg01, fp
1fd94     0C 4E 05 F1 | 	add	fp, #12
1fd98     A7 14 02 FB | 	rdlong	arg02, fp
1fd9c     0C 4E 85 F1 | 	sub	fp, #12
1fda0     01 16 66 F6 | 	neg	arg03, #1
1fda4     1C B6 B0 FD | 	call	#__system___float_cmp
1fda8     01 FA 55 F2 | 	cmps	result1, #1 wc
1fdac     00 26 26 36 |  if_ae	not	local01, #0
1fdb0     A7 26 62 FC | 	wrlong	local01, fp
1fdb4     CC 03 90 FD | 	jmp	#LR__2513
1fdb8                 | LR__2501
1fdb8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1fdb8     08 4E 05 F1 | 	add	fp, #8
1fdbc     A7 26 02 FB | 	rdlong	local01, fp
1fdc0     08 4E 85 F1 | 	sub	fp, #8
1fdc4     1E 26 0E F2 | 	cmp	local01, #30 wz
1fdc8     14 4E 05 A1 |  if_e	add	fp, #20
1fdcc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fdd0     14 4E 85 A1 |  if_e	sub	fp, #20
1fdd4     16 2B 02 A6 |  if_e	mov	local03, local04
1fdd8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fddc     48 00 90 5D |  if_ne	jmp	#LR__2502
1fde0     00 26 06 F6 | 	mov	local01, #0
1fde4     A7 28 02 FB | 	rdlong	local02, fp
1fde8     0C 4E 05 F1 | 	add	fp, #12
1fdec     A7 12 02 FB | 	rdlong	arg01, fp
1fdf0     0C 4E 85 F1 | 	sub	fp, #12
1fdf4     09 13 52 F6 | 	abs	arg01, arg01 wc
1fdf8     1F 2E C6 C9 |  if_b	decod	local05, #31
1fdfc     00 2E 06 36 |  if_ae	mov	local05, #0
1fe00     88 AD B0 FD | 	call	#__system___float_fromuns
1fe04     17 FB 61 F5 | 	xor	result1, local05
1fe08     FD 14 02 F6 | 	mov	arg02, result1
1fe0c     14 13 02 F6 | 	mov	arg01, local02
1fe10     01 16 66 F6 | 	neg	arg03, #1
1fe14     AC B5 B0 FD | 	call	#__system___float_cmp
1fe18     01 FA 55 F2 | 	cmps	result1, #1 wc
1fe1c     00 26 26 36 |  if_ae	not	local01, #0
1fe20     A7 26 62 FC | 	wrlong	local01, fp
1fe24     5C 03 90 FD | 	jmp	#LR__2513
1fe28                 | LR__2502
1fe28                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1fe28     08 4E 05 F1 | 	add	fp, #8
1fe2c     A7 26 02 FB | 	rdlong	local01, fp
1fe30     08 4E 85 F1 | 	sub	fp, #8
1fe34     1E 26 0E F2 | 	cmp	local01, #30 wz
1fe38     14 4E 05 A1 |  if_e	add	fp, #20
1fe3c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fe40     14 4E 85 A1 |  if_e	sub	fp, #20
1fe44     16 2B 02 A6 |  if_e	mov	local03, local04
1fe48     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fe4c     38 00 90 5D |  if_ne	jmp	#LR__2503
1fe50     00 26 06 F6 | 	mov	local01, #0
1fe54     A7 28 02 FB | 	rdlong	local02, fp
1fe58     0C 4E 05 F1 | 	add	fp, #12
1fe5c     A7 12 02 FB | 	rdlong	arg01, fp
1fe60     0C 4E 85 F1 | 	sub	fp, #12
1fe64     24 AD B0 FD | 	call	#__system___float_fromuns
1fe68     FD 14 02 F6 | 	mov	arg02, result1
1fe6c     14 13 02 F6 | 	mov	arg01, local02
1fe70     01 16 66 F6 | 	neg	arg03, #1
1fe74     4C B5 B0 FD | 	call	#__system___float_cmp
1fe78     01 FA 55 F2 | 	cmps	result1, #1 wc
1fe7c     00 26 26 36 |  if_ae	not	local01, #0
1fe80     A7 26 62 FC | 	wrlong	local01, fp
1fe84     FC 02 90 FD | 	jmp	#LR__2513
1fe88                 | LR__2503
1fe88                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1fe88     08 4E 05 F1 | 	add	fp, #8
1fe8c     A7 26 02 FB | 	rdlong	local01, fp
1fe90     08 4E 85 F1 | 	sub	fp, #8
1fe94     1C 26 0E F2 | 	cmp	local01, #28 wz
1fe98     14 4E 05 A1 |  if_e	add	fp, #20
1fe9c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fea0     14 4E 85 A1 |  if_e	sub	fp, #20
1fea4     16 2B 02 A6 |  if_e	mov	local03, local04
1fea8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1feac     44 00 90 5D |  if_ne	jmp	#LR__2504
1feb0     00 26 06 F6 | 	mov	local01, #0
1feb4     A7 12 02 FB | 	rdlong	arg01, fp
1feb8     09 13 52 F6 | 	abs	arg01, arg01 wc
1febc     1F 2E C6 C9 |  if_b	decod	local05, #31
1fec0     00 2E 06 36 |  if_ae	mov	local05, #0
1fec4     C4 AC B0 FD | 	call	#__system___float_fromuns
1fec8     17 FB 61 F5 | 	xor	result1, local05
1fecc     FD 12 02 F6 | 	mov	arg01, result1
1fed0     0C 4E 05 F1 | 	add	fp, #12
1fed4     A7 14 02 FB | 	rdlong	arg02, fp
1fed8     0C 4E 85 F1 | 	sub	fp, #12
1fedc     01 16 66 F6 | 	neg	arg03, #1
1fee0     E0 B4 B0 FD | 	call	#__system___float_cmp
1fee4     01 FA 55 F2 | 	cmps	result1, #1 wc
1fee8     00 26 26 36 |  if_ae	not	local01, #0
1feec     A7 26 62 FC | 	wrlong	local01, fp
1fef0     90 02 90 FD | 	jmp	#LR__2513
1fef4                 | LR__2504
1fef4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1fef4     08 4E 05 F1 | 	add	fp, #8
1fef8     A7 26 02 FB | 	rdlong	local01, fp
1fefc     08 4E 85 F1 | 	sub	fp, #8
1ff00     1C 26 0E F2 | 	cmp	local01, #28 wz
1ff04     14 4E 05 A1 |  if_e	add	fp, #20
1ff08     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ff0c     14 4E 85 A1 |  if_e	sub	fp, #20
1ff10     16 2B 02 A6 |  if_e	mov	local03, local04
1ff14     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ff18     24 00 90 5D |  if_ne	jmp	#LR__2505
1ff1c     00 26 06 F6 | 	mov	local01, #0
1ff20     A7 28 02 FB | 	rdlong	local02, fp
1ff24     0C 4E 05 F1 | 	add	fp, #12
1ff28     A7 2A 02 FB | 	rdlong	local03, fp
1ff2c     0C 4E 85 F1 | 	sub	fp, #12
1ff30     15 29 5A F2 | 	cmps	local02, local03 wcz
1ff34     01 26 66 16 |  if_a	neg	local01, #1
1ff38     A7 26 62 FC | 	wrlong	local01, fp
1ff3c     44 02 90 FD | 	jmp	#LR__2513
1ff40                 | LR__2505
1ff40                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1ff40     08 4E 05 F1 | 	add	fp, #8
1ff44     A7 26 02 FB | 	rdlong	local01, fp
1ff48     08 4E 85 F1 | 	sub	fp, #8
1ff4c     1C 26 0E F2 | 	cmp	local01, #28 wz
1ff50     14 4E 05 A1 |  if_e	add	fp, #20
1ff54     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ff58     14 4E 85 A1 |  if_e	sub	fp, #20
1ff5c     16 2B 02 A6 |  if_e	mov	local03, local04
1ff60     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ff64     24 00 90 5D |  if_ne	jmp	#LR__2506
1ff68     00 26 06 F6 | 	mov	local01, #0
1ff6c     A7 28 02 FB | 	rdlong	local02, fp
1ff70     0C 4E 05 F1 | 	add	fp, #12
1ff74     A7 2A 02 FB | 	rdlong	local03, fp
1ff78     0C 4E 85 F1 | 	sub	fp, #12
1ff7c     15 29 5A F2 | 	cmps	local02, local03 wcz
1ff80     01 26 66 16 |  if_a	neg	local01, #1
1ff84     A7 26 62 FC | 	wrlong	local01, fp
1ff88     F8 01 90 FD | 	jmp	#LR__2513
1ff8c                 | LR__2506
1ff8c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1ff8c     08 4E 05 F1 | 	add	fp, #8
1ff90     A7 26 02 FB | 	rdlong	local01, fp
1ff94     08 4E 85 F1 | 	sub	fp, #8
1ff98     1D 26 0E F2 | 	cmp	local01, #29 wz
1ff9c     14 4E 05 A1 |  if_e	add	fp, #20
1ffa0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ffa4     14 4E 85 A1 |  if_e	sub	fp, #20
1ffa8     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1ffac     34 00 90 5D |  if_ne	jmp	#LR__2507
1ffb0     00 26 06 F6 | 	mov	local01, #0
1ffb4     A7 12 02 FB | 	rdlong	arg01, fp
1ffb8     D0 AB B0 FD | 	call	#__system___float_fromuns
1ffbc     FD 12 02 F6 | 	mov	arg01, result1
1ffc0     0C 4E 05 F1 | 	add	fp, #12
1ffc4     A7 14 02 FB | 	rdlong	arg02, fp
1ffc8     0C 4E 85 F1 | 	sub	fp, #12
1ffcc     01 16 66 F6 | 	neg	arg03, #1
1ffd0     F0 B3 B0 FD | 	call	#__system___float_cmp
1ffd4     01 FA 55 F2 | 	cmps	result1, #1 wc
1ffd8     00 26 26 36 |  if_ae	not	local01, #0
1ffdc     A7 26 62 FC | 	wrlong	local01, fp
1ffe0     A0 01 90 FD | 	jmp	#LR__2513
1ffe4                 | LR__2507
1ffe4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1ffe4     08 4E 05 F1 | 	add	fp, #8
1ffe8     A7 26 02 FB | 	rdlong	local01, fp
1ffec     08 4E 85 F1 | 	sub	fp, #8
1fff0     1D 26 0E F2 | 	cmp	local01, #29 wz
1fff4     14 4E 05 A1 |  if_e	add	fp, #20
1fff8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fffc     14 4E 85 A1 |  if_e	sub	fp, #20
20000     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20004     24 00 90 5D |  if_ne	jmp	#LR__2508
20008     00 26 06 F6 | 	mov	local01, #0
2000c     A7 28 02 FB | 	rdlong	local02, fp
20010     0C 4E 05 F1 | 	add	fp, #12
20014     A7 2A 02 FB | 	rdlong	local03, fp
20018     0C 4E 85 F1 | 	sub	fp, #12
2001c     15 29 5A F2 | 	cmps	local02, local03 wcz
20020     01 26 66 16 |  if_a	neg	local01, #1
20024     A7 26 62 FC | 	wrlong	local01, fp
20028     58 01 90 FD | 	jmp	#LR__2513
2002c                 | LR__2508
2002c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
2002c     08 4E 05 F1 | 	add	fp, #8
20030     A7 26 02 FB | 	rdlong	local01, fp
20034     08 4E 85 F1 | 	sub	fp, #8
20038     1D 26 0E F2 | 	cmp	local01, #29 wz
2003c     14 4E 05 A1 |  if_e	add	fp, #20
20040     A7 2A 02 AB |  if_e	rdlong	local03, fp
20044     14 4E 85 A1 |  if_e	sub	fp, #20
20048     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
2004c     24 00 90 5D |  if_ne	jmp	#LR__2509
20050     00 26 06 F6 | 	mov	local01, #0
20054     A7 28 02 FB | 	rdlong	local02, fp
20058     0C 4E 05 F1 | 	add	fp, #12
2005c     A7 2A 02 FB | 	rdlong	local03, fp
20060     0C 4E 85 F1 | 	sub	fp, #12
20064     15 29 1A F2 | 	cmp	local02, local03 wcz
20068     01 26 66 16 |  if_a	neg	local01, #1
2006c     A7 26 62 FC | 	wrlong	local01, fp
20070     10 01 90 FD | 	jmp	#LR__2513
20074                 | LR__2509
20074                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
20074     08 4E 05 F1 | 	add	fp, #8
20078     A7 26 02 FB | 	rdlong	local01, fp
2007c     08 4E 85 F1 | 	sub	fp, #8
20080     2B 26 0E F2 | 	cmp	local01, #43 wz
20084     14 4E 05 A1 |  if_e	add	fp, #20
20088     A7 2A 02 AB |  if_e	rdlong	local03, fp
2008c     14 4E 85 A1 |  if_e	sub	fp, #20
20090     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20094     30 00 90 5D |  if_ne	jmp	#LR__2510
20098     00 26 06 F6 | 	mov	local01, #0
2009c     A7 12 02 FB | 	rdlong	arg01, fp
200a0     F4 D8 BE FD | 	call	#_convertstring
200a4     FD 12 02 F6 | 	mov	arg01, result1
200a8     0C 4E 05 F1 | 	add	fp, #12
200ac     A7 14 02 FB | 	rdlong	arg02, fp
200b0     0C 4E 85 F1 | 	sub	fp, #12
200b4     84 80 B0 FD | 	call	#__system___string_cmp
200b8     01 FA 55 F2 | 	cmps	result1, #1 wc
200bc     00 26 26 36 |  if_ae	not	local01, #0
200c0     A7 26 62 FC | 	wrlong	local01, fp
200c4     BC 00 90 FD | 	jmp	#LR__2513
200c8                 | LR__2510
200c8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
200c8     08 4E 05 F1 | 	add	fp, #8
200cc     A7 26 02 FB | 	rdlong	local01, fp
200d0     08 4E 85 F1 | 	sub	fp, #8
200d4     1F 26 0E F2 | 	cmp	local01, #31 wz
200d8     14 4E 05 A1 |  if_e	add	fp, #20
200dc     A7 2A 02 AB |  if_e	rdlong	local03, fp
200e0     14 4E 85 A1 |  if_e	sub	fp, #20
200e4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
200e8     34 00 90 5D |  if_ne	jmp	#LR__2511
200ec     00 26 06 F6 | 	mov	local01, #0
200f0     A7 28 02 FB | 	rdlong	local02, fp
200f4     0C 4E 05 F1 | 	add	fp, #12
200f8     A7 12 02 FB | 	rdlong	arg01, fp
200fc     0C 4E 85 F1 | 	sub	fp, #12
20100     94 D8 BE FD | 	call	#_convertstring
20104     FD 14 02 F6 | 	mov	arg02, result1
20108     14 13 02 F6 | 	mov	arg01, local02
2010c     2C 80 B0 FD | 	call	#__system___string_cmp
20110     01 FA 55 F2 | 	cmps	result1, #1 wc
20114     00 26 26 36 |  if_ae	not	local01, #0
20118     A7 26 62 FC | 	wrlong	local01, fp
2011c     64 00 90 FD | 	jmp	#LR__2513
20120                 | LR__2511
20120                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
20120     08 4E 05 F1 | 	add	fp, #8
20124     A7 26 02 FB | 	rdlong	local01, fp
20128     08 4E 85 F1 | 	sub	fp, #8
2012c     2B 26 0E F2 | 	cmp	local01, #43 wz
20130     14 4E 05 A1 |  if_e	add	fp, #20
20134     A7 2A 02 AB |  if_e	rdlong	local03, fp
20138     14 4E 85 A1 |  if_e	sub	fp, #20
2013c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20140     3C 00 90 5D |  if_ne	jmp	#LR__2512
20144     00 26 06 F6 | 	mov	local01, #0
20148     A7 12 02 FB | 	rdlong	arg01, fp
2014c     48 D8 BE FD | 	call	#_convertstring
20150     FD 28 02 F6 | 	mov	local02, result1
20154     0C 4E 05 F1 | 	add	fp, #12
20158     A7 12 02 FB | 	rdlong	arg01, fp
2015c     0C 4E 85 F1 | 	sub	fp, #12
20160     34 D8 BE FD | 	call	#_convertstring
20164     FD 14 02 F6 | 	mov	arg02, result1
20168     14 13 02 F6 | 	mov	arg01, local02
2016c     CC 7F B0 FD | 	call	#__system___string_cmp
20170     01 FA 55 F2 | 	cmps	result1, #1 wc
20174     00 26 26 36 |  if_ae	not	local01, #0
20178     A7 26 62 FC | 	wrlong	local01, fp
2017c     04 00 90 FD | 	jmp	#LR__2513
20180                 | LR__2512
20180     A7 00 68 FC | 	wrlong	#0, fp
20184                 | LR__2513
20184     08 4E 05 F1 | 	add	fp, #8
20188     A7 38 68 FC | 	wrlong	#28, fp
2018c     08 4E 85 F1 | 	sub	fp, #8
20190                 | ' t1.result.uresult=0
20190                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
20190     A7 26 0A FB | 	rdlong	local01, fp wz
20194     A7 02 68 5C |  if_ne	wrlong	#1, fp
20198     A7 12 02 F6 | 	mov	arg01, fp
2019c     18 D7 BE FD | 	call	#_push
201a0     A7 F0 03 F6 | 	mov	ptra, fp
201a4     B2 00 A0 FD | 	call	#popregs_
201a8                 | _do_gt_ret
201a8     2D 00 64 FD | 	ret
201ac                 | 
201ac                 | ' 
201ac                 | ' '--------------------------------- less or equal (<=)
201ac                 | ' 
201ac                 | ' sub do_le
201ac                 | _do_le
201ac     05 4A 05 F6 | 	mov	COUNT_, #5
201b0     A8 00 A0 FD | 	call	#pushregs_
201b4     18 F0 07 F1 | 	add	ptra, #24
201b8     64 D6 BE FD | 	call	#_pop
201bc     FD 26 02 F6 | 	mov	local01, result1
201c0     FE 28 02 F6 | 	mov	local02, result2
201c4     FF 2A 02 F6 | 	mov	local03, result3
201c8     0C 4E 05 F1 | 	add	fp, #12
201cc     A7 26 62 FC | 	wrlong	local01, fp
201d0     04 4E 05 F1 | 	add	fp, #4
201d4     A7 28 62 FC | 	wrlong	local02, fp
201d8     04 4E 05 F1 | 	add	fp, #4
201dc     A7 2A 62 FC | 	wrlong	local03, fp
201e0     14 4E 85 F1 | 	sub	fp, #20
201e4     38 D6 BE FD | 	call	#_pop
201e8     FF 2A 02 F6 | 	mov	local03, result3
201ec     A7 FA 61 FC | 	wrlong	result1, fp
201f0     04 4E 05 F1 | 	add	fp, #4
201f4     A7 FC 61 FC | 	wrlong	result2, fp
201f8     04 4E 05 F1 | 	add	fp, #4
201fc     A7 2A 62 FC | 	wrlong	local03, fp
20200                 | ' 
20200                 | ' t2=pop()
20200                 | ' t1=pop()
20200                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
20200     08 4E 85 F1 | 	sub	fp, #8
20204     1F 2A 0E F2 | 	cmp	local03, #31 wz
20208     14 4E 05 A1 |  if_e	add	fp, #20
2020c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20210     14 4E 85 A1 |  if_e	sub	fp, #20
20214     16 2B 02 A6 |  if_e	mov	local03, local04
20218     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
2021c     28 00 90 5D |  if_ne	jmp	#LR__2520
20220     00 26 06 F6 | 	mov	local01, #0
20224     A7 12 02 FB | 	rdlong	arg01, fp
20228     0C 4E 05 F1 | 	add	fp, #12
2022c     A7 14 02 FB | 	rdlong	arg02, fp
20230     0C 4E 85 F1 | 	sub	fp, #12
20234     04 7F B0 FD | 	call	#__system___string_cmp
20238     01 FA 55 F2 | 	cmps	result1, #1 wc
2023c     00 26 26 C6 |  if_b	not	local01, #0
20240     A7 26 62 FC | 	wrlong	local01, fp
20244     20 04 90 FD | 	jmp	#LR__2533
20248                 | LR__2520
20248                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
20248     08 4E 05 F1 | 	add	fp, #8
2024c     A7 26 02 FB | 	rdlong	local01, fp
20250     08 4E 85 F1 | 	sub	fp, #8
20254     1E 26 0E F2 | 	cmp	local01, #30 wz
20258     14 4E 05 A1 |  if_e	add	fp, #20
2025c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20260     14 4E 85 A1 |  if_e	sub	fp, #20
20264     16 2B 02 A6 |  if_e	mov	local03, local04
20268     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
2026c     2C 00 90 5D |  if_ne	jmp	#LR__2521
20270     00 26 06 F6 | 	mov	local01, #0
20274     A7 12 02 FB | 	rdlong	arg01, fp
20278     0C 4E 05 F1 | 	add	fp, #12
2027c     A7 14 02 FB | 	rdlong	arg02, fp
20280     0C 4E 85 F1 | 	sub	fp, #12
20284     01 16 06 F6 | 	mov	arg03, #1
20288     38 B1 B0 FD | 	call	#__system___float_cmp
2028c     01 FA 55 F2 | 	cmps	result1, #1 wc
20290     00 26 26 C6 |  if_b	not	local01, #0
20294     A7 26 62 FC | 	wrlong	local01, fp
20298     CC 03 90 FD | 	jmp	#LR__2533
2029c                 | LR__2521
2029c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
2029c     08 4E 05 F1 | 	add	fp, #8
202a0     A7 26 02 FB | 	rdlong	local01, fp
202a4     08 4E 85 F1 | 	sub	fp, #8
202a8     1E 26 0E F2 | 	cmp	local01, #30 wz
202ac     14 4E 05 A1 |  if_e	add	fp, #20
202b0     A7 2C 02 AB |  if_e	rdlong	local04, fp
202b4     14 4E 85 A1 |  if_e	sub	fp, #20
202b8     16 2B 02 A6 |  if_e	mov	local03, local04
202bc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
202c0     48 00 90 5D |  if_ne	jmp	#LR__2522
202c4     00 26 06 F6 | 	mov	local01, #0
202c8     A7 28 02 FB | 	rdlong	local02, fp
202cc     0C 4E 05 F1 | 	add	fp, #12
202d0     A7 12 02 FB | 	rdlong	arg01, fp
202d4     0C 4E 85 F1 | 	sub	fp, #12
202d8     09 13 52 F6 | 	abs	arg01, arg01 wc
202dc     1F 2E C6 C9 |  if_b	decod	local05, #31
202e0     00 2E 06 36 |  if_ae	mov	local05, #0
202e4     A4 A8 B0 FD | 	call	#__system___float_fromuns
202e8     17 FB 61 F5 | 	xor	result1, local05
202ec     FD 14 02 F6 | 	mov	arg02, result1
202f0     14 13 02 F6 | 	mov	arg01, local02
202f4     01 16 06 F6 | 	mov	arg03, #1
202f8     C8 B0 B0 FD | 	call	#__system___float_cmp
202fc     01 FA 55 F2 | 	cmps	result1, #1 wc
20300     00 26 26 C6 |  if_b	not	local01, #0
20304     A7 26 62 FC | 	wrlong	local01, fp
20308     5C 03 90 FD | 	jmp	#LR__2533
2030c                 | LR__2522
2030c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
2030c     08 4E 05 F1 | 	add	fp, #8
20310     A7 26 02 FB | 	rdlong	local01, fp
20314     08 4E 85 F1 | 	sub	fp, #8
20318     1E 26 0E F2 | 	cmp	local01, #30 wz
2031c     14 4E 05 A1 |  if_e	add	fp, #20
20320     A7 2C 02 AB |  if_e	rdlong	local04, fp
20324     14 4E 85 A1 |  if_e	sub	fp, #20
20328     16 2B 02 A6 |  if_e	mov	local03, local04
2032c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20330     38 00 90 5D |  if_ne	jmp	#LR__2523
20334     00 26 06 F6 | 	mov	local01, #0
20338     A7 28 02 FB | 	rdlong	local02, fp
2033c     0C 4E 05 F1 | 	add	fp, #12
20340     A7 12 02 FB | 	rdlong	arg01, fp
20344     0C 4E 85 F1 | 	sub	fp, #12
20348     40 A8 B0 FD | 	call	#__system___float_fromuns
2034c     FD 14 02 F6 | 	mov	arg02, result1
20350     14 13 02 F6 | 	mov	arg01, local02
20354     01 16 06 F6 | 	mov	arg03, #1
20358     68 B0 B0 FD | 	call	#__system___float_cmp
2035c     01 FA 55 F2 | 	cmps	result1, #1 wc
20360     00 26 26 C6 |  if_b	not	local01, #0
20364     A7 26 62 FC | 	wrlong	local01, fp
20368     FC 02 90 FD | 	jmp	#LR__2533
2036c                 | LR__2523
2036c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
2036c     08 4E 05 F1 | 	add	fp, #8
20370     A7 26 02 FB | 	rdlong	local01, fp
20374     08 4E 85 F1 | 	sub	fp, #8
20378     1C 26 0E F2 | 	cmp	local01, #28 wz
2037c     14 4E 05 A1 |  if_e	add	fp, #20
20380     A7 2C 02 AB |  if_e	rdlong	local04, fp
20384     14 4E 85 A1 |  if_e	sub	fp, #20
20388     16 2B 02 A6 |  if_e	mov	local03, local04
2038c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20390     44 00 90 5D |  if_ne	jmp	#LR__2524
20394     00 26 06 F6 | 	mov	local01, #0
20398     A7 12 02 FB | 	rdlong	arg01, fp
2039c     09 13 52 F6 | 	abs	arg01, arg01 wc
203a0     1F 2E C6 C9 |  if_b	decod	local05, #31
203a4     00 2E 06 36 |  if_ae	mov	local05, #0
203a8     E0 A7 B0 FD | 	call	#__system___float_fromuns
203ac     17 FB 61 F5 | 	xor	result1, local05
203b0     FD 12 02 F6 | 	mov	arg01, result1
203b4     0C 4E 05 F1 | 	add	fp, #12
203b8     A7 14 02 FB | 	rdlong	arg02, fp
203bc     0C 4E 85 F1 | 	sub	fp, #12
203c0     01 16 06 F6 | 	mov	arg03, #1
203c4     FC AF B0 FD | 	call	#__system___float_cmp
203c8     01 FA 55 F2 | 	cmps	result1, #1 wc
203cc     00 26 26 C6 |  if_b	not	local01, #0
203d0     A7 26 62 FC | 	wrlong	local01, fp
203d4     90 02 90 FD | 	jmp	#LR__2533
203d8                 | LR__2524
203d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
203d8     08 4E 05 F1 | 	add	fp, #8
203dc     A7 26 02 FB | 	rdlong	local01, fp
203e0     08 4E 85 F1 | 	sub	fp, #8
203e4     1C 26 0E F2 | 	cmp	local01, #28 wz
203e8     14 4E 05 A1 |  if_e	add	fp, #20
203ec     A7 2C 02 AB |  if_e	rdlong	local04, fp
203f0     14 4E 85 A1 |  if_e	sub	fp, #20
203f4     16 2B 02 A6 |  if_e	mov	local03, local04
203f8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
203fc     24 00 90 5D |  if_ne	jmp	#LR__2525
20400     00 26 06 F6 | 	mov	local01, #0
20404     A7 28 02 FB | 	rdlong	local02, fp
20408     0C 4E 05 F1 | 	add	fp, #12
2040c     A7 2A 02 FB | 	rdlong	local03, fp
20410     0C 4E 85 F1 | 	sub	fp, #12
20414     15 29 5A F2 | 	cmps	local02, local03 wcz
20418     01 26 66 E6 |  if_be	neg	local01, #1
2041c     A7 26 62 FC | 	wrlong	local01, fp
20420     44 02 90 FD | 	jmp	#LR__2533
20424                 | LR__2525
20424                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
20424     08 4E 05 F1 | 	add	fp, #8
20428     A7 26 02 FB | 	rdlong	local01, fp
2042c     08 4E 85 F1 | 	sub	fp, #8
20430     1C 26 0E F2 | 	cmp	local01, #28 wz
20434     14 4E 05 A1 |  if_e	add	fp, #20
20438     A7 2C 02 AB |  if_e	rdlong	local04, fp
2043c     14 4E 85 A1 |  if_e	sub	fp, #20
20440     16 2B 02 A6 |  if_e	mov	local03, local04
20444     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20448     24 00 90 5D |  if_ne	jmp	#LR__2526
2044c     00 26 06 F6 | 	mov	local01, #0
20450     A7 28 02 FB | 	rdlong	local02, fp
20454     0C 4E 05 F1 | 	add	fp, #12
20458     A7 2A 02 FB | 	rdlong	local03, fp
2045c     0C 4E 85 F1 | 	sub	fp, #12
20460     15 29 5A F2 | 	cmps	local02, local03 wcz
20464     01 26 66 E6 |  if_be	neg	local01, #1
20468     A7 26 62 FC | 	wrlong	local01, fp
2046c     F8 01 90 FD | 	jmp	#LR__2533
20470                 | LR__2526
20470                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
20470     08 4E 05 F1 | 	add	fp, #8
20474     A7 26 02 FB | 	rdlong	local01, fp
20478     08 4E 85 F1 | 	sub	fp, #8
2047c     1D 26 0E F2 | 	cmp	local01, #29 wz
20480     14 4E 05 A1 |  if_e	add	fp, #20
20484     A7 2C 02 AB |  if_e	rdlong	local04, fp
20488     14 4E 85 A1 |  if_e	sub	fp, #20
2048c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
20490     34 00 90 5D |  if_ne	jmp	#LR__2527
20494     00 26 06 F6 | 	mov	local01, #0
20498     A7 12 02 FB | 	rdlong	arg01, fp
2049c     EC A6 B0 FD | 	call	#__system___float_fromuns
204a0     FD 12 02 F6 | 	mov	arg01, result1
204a4     0C 4E 05 F1 | 	add	fp, #12
204a8     A7 14 02 FB | 	rdlong	arg02, fp
204ac     0C 4E 85 F1 | 	sub	fp, #12
204b0     01 16 06 F6 | 	mov	arg03, #1
204b4     0C AF B0 FD | 	call	#__system___float_cmp
204b8     01 FA 55 F2 | 	cmps	result1, #1 wc
204bc     00 26 26 C6 |  if_b	not	local01, #0
204c0     A7 26 62 FC | 	wrlong	local01, fp
204c4     A0 01 90 FD | 	jmp	#LR__2533
204c8                 | LR__2527
204c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
204c8     08 4E 05 F1 | 	add	fp, #8
204cc     A7 26 02 FB | 	rdlong	local01, fp
204d0     08 4E 85 F1 | 	sub	fp, #8
204d4     1D 26 0E F2 | 	cmp	local01, #29 wz
204d8     14 4E 05 A1 |  if_e	add	fp, #20
204dc     A7 2A 02 AB |  if_e	rdlong	local03, fp
204e0     14 4E 85 A1 |  if_e	sub	fp, #20
204e4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
204e8     24 00 90 5D |  if_ne	jmp	#LR__2528
204ec     00 26 06 F6 | 	mov	local01, #0
204f0     A7 28 02 FB | 	rdlong	local02, fp
204f4     0C 4E 05 F1 | 	add	fp, #12
204f8     A7 2A 02 FB | 	rdlong	local03, fp
204fc     0C 4E 85 F1 | 	sub	fp, #12
20500     15 29 5A F2 | 	cmps	local02, local03 wcz
20504     01 26 66 E6 |  if_be	neg	local01, #1
20508     A7 26 62 FC | 	wrlong	local01, fp
2050c     58 01 90 FD | 	jmp	#LR__2533
20510                 | LR__2528
20510                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
20510     08 4E 05 F1 | 	add	fp, #8
20514     A7 26 02 FB | 	rdlong	local01, fp
20518     08 4E 85 F1 | 	sub	fp, #8
2051c     1D 26 0E F2 | 	cmp	local01, #29 wz
20520     14 4E 05 A1 |  if_e	add	fp, #20
20524     A7 2A 02 AB |  if_e	rdlong	local03, fp
20528     14 4E 85 A1 |  if_e	sub	fp, #20
2052c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20530     24 00 90 5D |  if_ne	jmp	#LR__2529
20534     00 26 06 F6 | 	mov	local01, #0
20538     A7 28 02 FB | 	rdlong	local02, fp
2053c     0C 4E 05 F1 | 	add	fp, #12
20540     A7 2A 02 FB | 	rdlong	local03, fp
20544     0C 4E 85 F1 | 	sub	fp, #12
20548     15 29 1A F2 | 	cmp	local02, local03 wcz
2054c     01 26 66 E6 |  if_be	neg	local01, #1
20550     A7 26 62 FC | 	wrlong	local01, fp
20554     10 01 90 FD | 	jmp	#LR__2533
20558                 | LR__2529
20558                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
20558     08 4E 05 F1 | 	add	fp, #8
2055c     A7 26 02 FB | 	rdlong	local01, fp
20560     08 4E 85 F1 | 	sub	fp, #8
20564     2B 26 0E F2 | 	cmp	local01, #43 wz
20568     14 4E 05 A1 |  if_e	add	fp, #20
2056c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20570     14 4E 85 A1 |  if_e	sub	fp, #20
20574     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20578     30 00 90 5D |  if_ne	jmp	#LR__2530
2057c     00 26 06 F6 | 	mov	local01, #0
20580     A7 12 02 FB | 	rdlong	arg01, fp
20584     10 D4 BE FD | 	call	#_convertstring
20588     FD 12 02 F6 | 	mov	arg01, result1
2058c     0C 4E 05 F1 | 	add	fp, #12
20590     A7 14 02 FB | 	rdlong	arg02, fp
20594     0C 4E 85 F1 | 	sub	fp, #12
20598     A0 7B B0 FD | 	call	#__system___string_cmp
2059c     01 FA 55 F2 | 	cmps	result1, #1 wc
205a0     00 26 26 C6 |  if_b	not	local01, #0
205a4     A7 26 62 FC | 	wrlong	local01, fp
205a8     BC 00 90 FD | 	jmp	#LR__2533
205ac                 | LR__2530
205ac                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
205ac     08 4E 05 F1 | 	add	fp, #8
205b0     A7 26 02 FB | 	rdlong	local01, fp
205b4     08 4E 85 F1 | 	sub	fp, #8
205b8     1F 26 0E F2 | 	cmp	local01, #31 wz
205bc     14 4E 05 A1 |  if_e	add	fp, #20
205c0     A7 2A 02 AB |  if_e	rdlong	local03, fp
205c4     14 4E 85 A1 |  if_e	sub	fp, #20
205c8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
205cc     34 00 90 5D |  if_ne	jmp	#LR__2531
205d0     00 26 06 F6 | 	mov	local01, #0
205d4     A7 28 02 FB | 	rdlong	local02, fp
205d8     0C 4E 05 F1 | 	add	fp, #12
205dc     A7 12 02 FB | 	rdlong	arg01, fp
205e0     0C 4E 85 F1 | 	sub	fp, #12
205e4     B0 D3 BE FD | 	call	#_convertstring
205e8     FD 14 02 F6 | 	mov	arg02, result1
205ec     14 13 02 F6 | 	mov	arg01, local02
205f0     48 7B B0 FD | 	call	#__system___string_cmp
205f4     01 FA 55 F2 | 	cmps	result1, #1 wc
205f8     00 26 26 C6 |  if_b	not	local01, #0
205fc     A7 26 62 FC | 	wrlong	local01, fp
20600     64 00 90 FD | 	jmp	#LR__2533
20604                 | LR__2531
20604                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
20604     08 4E 05 F1 | 	add	fp, #8
20608     A7 26 02 FB | 	rdlong	local01, fp
2060c     08 4E 85 F1 | 	sub	fp, #8
20610     2B 26 0E F2 | 	cmp	local01, #43 wz
20614     14 4E 05 A1 |  if_e	add	fp, #20
20618     A7 2A 02 AB |  if_e	rdlong	local03, fp
2061c     14 4E 85 A1 |  if_e	sub	fp, #20
20620     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20624     3C 00 90 5D |  if_ne	jmp	#LR__2532
20628     00 26 06 F6 | 	mov	local01, #0
2062c     A7 12 02 FB | 	rdlong	arg01, fp
20630     64 D3 BE FD | 	call	#_convertstring
20634     FD 28 02 F6 | 	mov	local02, result1
20638     0C 4E 05 F1 | 	add	fp, #12
2063c     A7 12 02 FB | 	rdlong	arg01, fp
20640     0C 4E 85 F1 | 	sub	fp, #12
20644     50 D3 BE FD | 	call	#_convertstring
20648     FD 14 02 F6 | 	mov	arg02, result1
2064c     14 13 02 F6 | 	mov	arg01, local02
20650     E8 7A B0 FD | 	call	#__system___string_cmp
20654     01 FA 55 F2 | 	cmps	result1, #1 wc
20658     00 26 26 C6 |  if_b	not	local01, #0
2065c     A7 26 62 FC | 	wrlong	local01, fp
20660     04 00 90 FD | 	jmp	#LR__2533
20664                 | LR__2532
20664     A7 00 68 FC | 	wrlong	#0, fp
20668                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
20668                 | LR__2533
20668     08 4E 05 F1 | 	add	fp, #8
2066c     A7 38 68 FC | 	wrlong	#28, fp
20670     08 4E 85 F1 | 	sub	fp, #8
20674     A7 12 02 F6 | 	mov	arg01, fp
20678     3C D2 BE FD | 	call	#_push
2067c     A7 F0 03 F6 | 	mov	ptra, fp
20680     B2 00 A0 FD | 	call	#popregs_
20684                 | _do_le_ret
20684     2D 00 64 FD | 	ret
20688                 | 
20688                 | ' 
20688                 | ' '--------------------------------- less than (<)
20688                 | ' 
20688                 | ' sub do_lt
20688                 | _do_lt
20688     05 4A 05 F6 | 	mov	COUNT_, #5
2068c     A8 00 A0 FD | 	call	#pushregs_
20690     18 F0 07 F1 | 	add	ptra, #24
20694     88 D1 BE FD | 	call	#_pop
20698     FD 26 02 F6 | 	mov	local01, result1
2069c     FE 28 02 F6 | 	mov	local02, result2
206a0     FF 2A 02 F6 | 	mov	local03, result3
206a4     0C 4E 05 F1 | 	add	fp, #12
206a8     A7 26 62 FC | 	wrlong	local01, fp
206ac     04 4E 05 F1 | 	add	fp, #4
206b0     A7 28 62 FC | 	wrlong	local02, fp
206b4     04 4E 05 F1 | 	add	fp, #4
206b8     A7 2A 62 FC | 	wrlong	local03, fp
206bc     14 4E 85 F1 | 	sub	fp, #20
206c0     5C D1 BE FD | 	call	#_pop
206c4     FF 2A 02 F6 | 	mov	local03, result3
206c8     A7 FA 61 FC | 	wrlong	result1, fp
206cc     04 4E 05 F1 | 	add	fp, #4
206d0     A7 FC 61 FC | 	wrlong	result2, fp
206d4     04 4E 05 F1 | 	add	fp, #4
206d8     A7 2A 62 FC | 	wrlong	local03, fp
206dc                 | ' 
206dc                 | ' t2=pop()
206dc                 | ' t1=pop()
206dc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
206dc     08 4E 85 F1 | 	sub	fp, #8
206e0     1F 2A 0E F2 | 	cmp	local03, #31 wz
206e4     14 4E 05 A1 |  if_e	add	fp, #20
206e8     A7 2C 02 AB |  if_e	rdlong	local04, fp
206ec     14 4E 85 A1 |  if_e	sub	fp, #20
206f0     16 2B 02 A6 |  if_e	mov	local03, local04
206f4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
206f8     28 00 90 5D |  if_ne	jmp	#LR__2540
206fc     00 26 06 F6 | 	mov	local01, #0
20700     A7 12 02 FB | 	rdlong	arg01, fp
20704     0C 4E 05 F1 | 	add	fp, #12
20708     A7 14 02 FB | 	rdlong	arg02, fp
2070c     0C 4E 85 F1 | 	sub	fp, #12
20710     28 7A B0 FD | 	call	#__system___string_cmp
20714     00 FA 55 F2 | 	cmps	result1, #0 wc
20718     00 26 26 C6 |  if_b	not	local01, #0
2071c     A7 26 62 FC | 	wrlong	local01, fp
20720     10 04 90 FD | 	jmp	#LR__2553
20724                 | LR__2540
20724                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
20724     08 4E 05 F1 | 	add	fp, #8
20728     A7 26 02 FB | 	rdlong	local01, fp
2072c     08 4E 85 F1 | 	sub	fp, #8
20730     1E 26 0E F2 | 	cmp	local01, #30 wz
20734     14 4E 05 A1 |  if_e	add	fp, #20
20738     A7 2C 02 AB |  if_e	rdlong	local04, fp
2073c     14 4E 85 A1 |  if_e	sub	fp, #20
20740     16 2B 02 A6 |  if_e	mov	local03, local04
20744     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20748     2C 00 90 5D |  if_ne	jmp	#LR__2541
2074c     00 26 06 F6 | 	mov	local01, #0
20750     A7 12 02 FB | 	rdlong	arg01, fp
20754     0C 4E 05 F1 | 	add	fp, #12
20758     A7 14 02 FB | 	rdlong	arg02, fp
2075c     0C 4E 85 F1 | 	sub	fp, #12
20760     01 16 06 F6 | 	mov	arg03, #1
20764     5C AC B0 FD | 	call	#__system___float_cmp
20768     00 FA 55 F2 | 	cmps	result1, #0 wc
2076c     00 26 26 C6 |  if_b	not	local01, #0
20770     A7 26 62 FC | 	wrlong	local01, fp
20774     BC 03 90 FD | 	jmp	#LR__2553
20778                 | LR__2541
20778                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
20778     08 4E 05 F1 | 	add	fp, #8
2077c     A7 26 02 FB | 	rdlong	local01, fp
20780     08 4E 85 F1 | 	sub	fp, #8
20784     1E 26 0E F2 | 	cmp	local01, #30 wz
20788     14 4E 05 A1 |  if_e	add	fp, #20
2078c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20790     14 4E 85 A1 |  if_e	sub	fp, #20
20794     16 2B 02 A6 |  if_e	mov	local03, local04
20798     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
2079c     48 00 90 5D |  if_ne	jmp	#LR__2542
207a0     00 26 06 F6 | 	mov	local01, #0
207a4     A7 28 02 FB | 	rdlong	local02, fp
207a8     0C 4E 05 F1 | 	add	fp, #12
207ac     A7 12 02 FB | 	rdlong	arg01, fp
207b0     0C 4E 85 F1 | 	sub	fp, #12
207b4     09 13 52 F6 | 	abs	arg01, arg01 wc
207b8     1F 2E C6 C9 |  if_b	decod	local05, #31
207bc     00 2E 06 36 |  if_ae	mov	local05, #0
207c0     C8 A3 B0 FD | 	call	#__system___float_fromuns
207c4     17 FB 61 F5 | 	xor	result1, local05
207c8     FD 14 02 F6 | 	mov	arg02, result1
207cc     14 13 02 F6 | 	mov	arg01, local02
207d0     01 16 06 F6 | 	mov	arg03, #1
207d4     EC AB B0 FD | 	call	#__system___float_cmp
207d8     00 FA 55 F2 | 	cmps	result1, #0 wc
207dc     00 26 26 C6 |  if_b	not	local01, #0
207e0     A7 26 62 FC | 	wrlong	local01, fp
207e4     4C 03 90 FD | 	jmp	#LR__2553
207e8                 | LR__2542
207e8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
207e8     08 4E 05 F1 | 	add	fp, #8
207ec     A7 26 02 FB | 	rdlong	local01, fp
207f0     08 4E 85 F1 | 	sub	fp, #8
207f4     1E 26 0E F2 | 	cmp	local01, #30 wz
207f8     14 4E 05 A1 |  if_e	add	fp, #20
207fc     A7 2C 02 AB |  if_e	rdlong	local04, fp
20800     14 4E 85 A1 |  if_e	sub	fp, #20
20804     16 2B 02 A6 |  if_e	mov	local03, local04
20808     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
2080c     38 00 90 5D |  if_ne	jmp	#LR__2543
20810     00 26 06 F6 | 	mov	local01, #0
20814     A7 28 02 FB | 	rdlong	local02, fp
20818     0C 4E 05 F1 | 	add	fp, #12
2081c     A7 12 02 FB | 	rdlong	arg01, fp
20820     0C 4E 85 F1 | 	sub	fp, #12
20824     64 A3 B0 FD | 	call	#__system___float_fromuns
20828     FD 14 02 F6 | 	mov	arg02, result1
2082c     14 13 02 F6 | 	mov	arg01, local02
20830     01 16 06 F6 | 	mov	arg03, #1
20834     8C AB B0 FD | 	call	#__system___float_cmp
20838     00 FA 55 F2 | 	cmps	result1, #0 wc
2083c     00 26 26 C6 |  if_b	not	local01, #0
20840     A7 26 62 FC | 	wrlong	local01, fp
20844     EC 02 90 FD | 	jmp	#LR__2553
20848                 | LR__2543
20848                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
20848     08 4E 05 F1 | 	add	fp, #8
2084c     A7 26 02 FB | 	rdlong	local01, fp
20850     08 4E 85 F1 | 	sub	fp, #8
20854     1C 26 0E F2 | 	cmp	local01, #28 wz
20858     14 4E 05 A1 |  if_e	add	fp, #20
2085c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20860     14 4E 85 A1 |  if_e	sub	fp, #20
20864     16 2B 02 A6 |  if_e	mov	local03, local04
20868     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
2086c     44 00 90 5D |  if_ne	jmp	#LR__2544
20870     00 26 06 F6 | 	mov	local01, #0
20874     A7 12 02 FB | 	rdlong	arg01, fp
20878     09 13 52 F6 | 	abs	arg01, arg01 wc
2087c     1F 2E C6 C9 |  if_b	decod	local05, #31
20880     00 2E 06 36 |  if_ae	mov	local05, #0
20884     04 A3 B0 FD | 	call	#__system___float_fromuns
20888     17 FB 61 F5 | 	xor	result1, local05
2088c     FD 12 02 F6 | 	mov	arg01, result1
20890     0C 4E 05 F1 | 	add	fp, #12
20894     A7 14 02 FB | 	rdlong	arg02, fp
20898     0C 4E 85 F1 | 	sub	fp, #12
2089c     01 16 06 F6 | 	mov	arg03, #1
208a0     20 AB B0 FD | 	call	#__system___float_cmp
208a4     00 FA 55 F2 | 	cmps	result1, #0 wc
208a8     00 26 26 C6 |  if_b	not	local01, #0
208ac     A7 26 62 FC | 	wrlong	local01, fp
208b0     80 02 90 FD | 	jmp	#LR__2553
208b4                 | LR__2544
208b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
208b4     08 4E 05 F1 | 	add	fp, #8
208b8     A7 26 02 FB | 	rdlong	local01, fp
208bc     08 4E 85 F1 | 	sub	fp, #8
208c0     1C 26 0E F2 | 	cmp	local01, #28 wz
208c4     14 4E 05 A1 |  if_e	add	fp, #20
208c8     A7 2C 02 AB |  if_e	rdlong	local04, fp
208cc     14 4E 85 A1 |  if_e	sub	fp, #20
208d0     16 2B 02 A6 |  if_e	mov	local03, local04
208d4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
208d8     20 00 90 5D |  if_ne	jmp	#LR__2545
208dc     A7 28 02 FB | 	rdlong	local02, fp
208e0     0C 4E 05 F1 | 	add	fp, #12
208e4     A7 2A 02 FB | 	rdlong	local03, fp
208e8     0C 4E 85 F1 | 	sub	fp, #12
208ec     15 29 52 F2 | 	cmps	local02, local03 wc
208f0     13 27 A2 F1 | 	subx	local01, local01
208f4     A7 26 62 FC | 	wrlong	local01, fp
208f8     38 02 90 FD | 	jmp	#LR__2553
208fc                 | LR__2545
208fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
208fc     08 4E 05 F1 | 	add	fp, #8
20900     A7 26 02 FB | 	rdlong	local01, fp
20904     08 4E 85 F1 | 	sub	fp, #8
20908     1C 26 0E F2 | 	cmp	local01, #28 wz
2090c     14 4E 05 A1 |  if_e	add	fp, #20
20910     A7 2C 02 AB |  if_e	rdlong	local04, fp
20914     14 4E 85 A1 |  if_e	sub	fp, #20
20918     16 2B 02 A6 |  if_e	mov	local03, local04
2091c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20920     20 00 90 5D |  if_ne	jmp	#LR__2546
20924     A7 28 02 FB | 	rdlong	local02, fp
20928     0C 4E 05 F1 | 	add	fp, #12
2092c     A7 2A 02 FB | 	rdlong	local03, fp
20930     0C 4E 85 F1 | 	sub	fp, #12
20934     15 29 52 F2 | 	cmps	local02, local03 wc
20938     13 27 A2 F1 | 	subx	local01, local01
2093c     A7 26 62 FC | 	wrlong	local01, fp
20940     F0 01 90 FD | 	jmp	#LR__2553
20944                 | LR__2546
20944                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
20944     08 4E 05 F1 | 	add	fp, #8
20948     A7 26 02 FB | 	rdlong	local01, fp
2094c     08 4E 85 F1 | 	sub	fp, #8
20950     1D 26 0E F2 | 	cmp	local01, #29 wz
20954     14 4E 05 A1 |  if_e	add	fp, #20
20958     A7 2C 02 AB |  if_e	rdlong	local04, fp
2095c     14 4E 85 A1 |  if_e	sub	fp, #20
20960     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
20964     34 00 90 5D |  if_ne	jmp	#LR__2547
20968     00 26 06 F6 | 	mov	local01, #0
2096c     A7 12 02 FB | 	rdlong	arg01, fp
20970     18 A2 B0 FD | 	call	#__system___float_fromuns
20974     FD 12 02 F6 | 	mov	arg01, result1
20978     0C 4E 05 F1 | 	add	fp, #12
2097c     A7 14 02 FB | 	rdlong	arg02, fp
20980     0C 4E 85 F1 | 	sub	fp, #12
20984     01 16 06 F6 | 	mov	arg03, #1
20988     38 AA B0 FD | 	call	#__system___float_cmp
2098c     00 FA 55 F2 | 	cmps	result1, #0 wc
20990     00 26 26 C6 |  if_b	not	local01, #0
20994     A7 26 62 FC | 	wrlong	local01, fp
20998     98 01 90 FD | 	jmp	#LR__2553
2099c                 | LR__2547
2099c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
2099c     08 4E 05 F1 | 	add	fp, #8
209a0     A7 26 02 FB | 	rdlong	local01, fp
209a4     08 4E 85 F1 | 	sub	fp, #8
209a8     1D 26 0E F2 | 	cmp	local01, #29 wz
209ac     14 4E 05 A1 |  if_e	add	fp, #20
209b0     A7 2A 02 AB |  if_e	rdlong	local03, fp
209b4     14 4E 85 A1 |  if_e	sub	fp, #20
209b8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
209bc     20 00 90 5D |  if_ne	jmp	#LR__2548
209c0     A7 28 02 FB | 	rdlong	local02, fp
209c4     0C 4E 05 F1 | 	add	fp, #12
209c8     A7 2A 02 FB | 	rdlong	local03, fp
209cc     0C 4E 85 F1 | 	sub	fp, #12
209d0     15 29 52 F2 | 	cmps	local02, local03 wc
209d4     13 27 A2 F1 | 	subx	local01, local01
209d8     A7 26 62 FC | 	wrlong	local01, fp
209dc     54 01 90 FD | 	jmp	#LR__2553
209e0                 | LR__2548
209e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
209e0     08 4E 05 F1 | 	add	fp, #8
209e4     A7 26 02 FB | 	rdlong	local01, fp
209e8     08 4E 85 F1 | 	sub	fp, #8
209ec     1D 26 0E F2 | 	cmp	local01, #29 wz
209f0     14 4E 05 A1 |  if_e	add	fp, #20
209f4     A7 2A 02 AB |  if_e	rdlong	local03, fp
209f8     14 4E 85 A1 |  if_e	sub	fp, #20
209fc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20a00     20 00 90 5D |  if_ne	jmp	#LR__2549
20a04     A7 28 02 FB | 	rdlong	local02, fp
20a08     0C 4E 05 F1 | 	add	fp, #12
20a0c     A7 2A 02 FB | 	rdlong	local03, fp
20a10     0C 4E 85 F1 | 	sub	fp, #12
20a14     15 29 12 F2 | 	cmp	local02, local03 wc
20a18     13 27 A2 F1 | 	subx	local01, local01
20a1c     A7 26 62 FC | 	wrlong	local01, fp
20a20     10 01 90 FD | 	jmp	#LR__2553
20a24                 | LR__2549
20a24                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
20a24     08 4E 05 F1 | 	add	fp, #8
20a28     A7 26 02 FB | 	rdlong	local01, fp
20a2c     08 4E 85 F1 | 	sub	fp, #8
20a30     2B 26 0E F2 | 	cmp	local01, #43 wz
20a34     14 4E 05 A1 |  if_e	add	fp, #20
20a38     A7 2A 02 AB |  if_e	rdlong	local03, fp
20a3c     14 4E 85 A1 |  if_e	sub	fp, #20
20a40     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20a44     30 00 90 5D |  if_ne	jmp	#LR__2550
20a48     00 26 06 F6 | 	mov	local01, #0
20a4c     A7 12 02 FB | 	rdlong	arg01, fp
20a50     44 CF BE FD | 	call	#_convertstring
20a54     FD 12 02 F6 | 	mov	arg01, result1
20a58     0C 4E 05 F1 | 	add	fp, #12
20a5c     A7 14 02 FB | 	rdlong	arg02, fp
20a60     0C 4E 85 F1 | 	sub	fp, #12
20a64     D4 76 B0 FD | 	call	#__system___string_cmp
20a68     00 FA 55 F2 | 	cmps	result1, #0 wc
20a6c     00 26 26 C6 |  if_b	not	local01, #0
20a70     A7 26 62 FC | 	wrlong	local01, fp
20a74     BC 00 90 FD | 	jmp	#LR__2553
20a78                 | LR__2550
20a78                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
20a78     08 4E 05 F1 | 	add	fp, #8
20a7c     A7 26 02 FB | 	rdlong	local01, fp
20a80     08 4E 85 F1 | 	sub	fp, #8
20a84     1F 26 0E F2 | 	cmp	local01, #31 wz
20a88     14 4E 05 A1 |  if_e	add	fp, #20
20a8c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20a90     14 4E 85 A1 |  if_e	sub	fp, #20
20a94     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20a98     34 00 90 5D |  if_ne	jmp	#LR__2551
20a9c     00 26 06 F6 | 	mov	local01, #0
20aa0     A7 28 02 FB | 	rdlong	local02, fp
20aa4     0C 4E 05 F1 | 	add	fp, #12
20aa8     A7 12 02 FB | 	rdlong	arg01, fp
20aac     0C 4E 85 F1 | 	sub	fp, #12
20ab0     E4 CE BE FD | 	call	#_convertstring
20ab4     FD 14 02 F6 | 	mov	arg02, result1
20ab8     14 13 02 F6 | 	mov	arg01, local02
20abc     7C 76 B0 FD | 	call	#__system___string_cmp
20ac0     00 FA 55 F2 | 	cmps	result1, #0 wc
20ac4     00 26 26 C6 |  if_b	not	local01, #0
20ac8     A7 26 62 FC | 	wrlong	local01, fp
20acc     64 00 90 FD | 	jmp	#LR__2553
20ad0                 | LR__2551
20ad0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
20ad0     08 4E 05 F1 | 	add	fp, #8
20ad4     A7 26 02 FB | 	rdlong	local01, fp
20ad8     08 4E 85 F1 | 	sub	fp, #8
20adc     2B 26 0E F2 | 	cmp	local01, #43 wz
20ae0     14 4E 05 A1 |  if_e	add	fp, #20
20ae4     A7 2A 02 AB |  if_e	rdlong	local03, fp
20ae8     14 4E 85 A1 |  if_e	sub	fp, #20
20aec     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20af0     3C 00 90 5D |  if_ne	jmp	#LR__2552
20af4     00 26 06 F6 | 	mov	local01, #0
20af8     A7 12 02 FB | 	rdlong	arg01, fp
20afc     98 CE BE FD | 	call	#_convertstring
20b00     FD 28 02 F6 | 	mov	local02, result1
20b04     0C 4E 05 F1 | 	add	fp, #12
20b08     A7 12 02 FB | 	rdlong	arg01, fp
20b0c     0C 4E 85 F1 | 	sub	fp, #12
20b10     84 CE BE FD | 	call	#_convertstring
20b14     FD 14 02 F6 | 	mov	arg02, result1
20b18     14 13 02 F6 | 	mov	arg01, local02
20b1c     1C 76 B0 FD | 	call	#__system___string_cmp
20b20     00 FA 55 F2 | 	cmps	result1, #0 wc
20b24     00 26 26 C6 |  if_b	not	local01, #0
20b28     A7 26 62 FC | 	wrlong	local01, fp
20b2c     04 00 90 FD | 	jmp	#LR__2553
20b30                 | LR__2552
20b30     A7 00 68 FC | 	wrlong	#0, fp
20b34                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
20b34                 | LR__2553
20b34     08 4E 05 F1 | 	add	fp, #8
20b38     A7 38 68 FC | 	wrlong	#28, fp
20b3c     08 4E 85 F1 | 	sub	fp, #8
20b40     A7 12 02 F6 | 	mov	arg01, fp
20b44     70 CD BE FD | 	call	#_push
20b48     A7 F0 03 F6 | 	mov	ptra, fp
20b4c     B2 00 A0 FD | 	call	#popregs_
20b50                 | _do_lt_ret
20b50     2D 00 64 FD | 	ret
20b54                 | 
20b54                 | ' 
20b54                 | ' '--------------------------------- minus (-)
20b54                 | ' 
20b54                 | ' sub do_minus
20b54                 | _do_minus
20b54     05 4A 05 F6 | 	mov	COUNT_, #5
20b58     A8 00 A0 FD | 	call	#pushregs_
20b5c     18 F0 07 F1 | 	add	ptra, #24
20b60     BC CC BE FD | 	call	#_pop
20b64     FD 26 02 F6 | 	mov	local01, result1
20b68     FE 28 02 F6 | 	mov	local02, result2
20b6c     FF 2A 02 F6 | 	mov	local03, result3
20b70     0C 4E 05 F1 | 	add	fp, #12
20b74     A7 26 62 FC | 	wrlong	local01, fp
20b78     04 4E 05 F1 | 	add	fp, #4
20b7c     A7 28 62 FC | 	wrlong	local02, fp
20b80     04 4E 05 F1 | 	add	fp, #4
20b84     A7 2A 62 FC | 	wrlong	local03, fp
20b88     14 4E 85 F1 | 	sub	fp, #20
20b8c     90 CC BE FD | 	call	#_pop
20b90     FF 2A 02 F6 | 	mov	local03, result3
20b94     A7 FA 61 FC | 	wrlong	result1, fp
20b98     04 4E 05 F1 | 	add	fp, #4
20b9c     A7 FC 61 FC | 	wrlong	result2, fp
20ba0     04 4E 05 F1 | 	add	fp, #4
20ba4     A7 2A 62 FC | 	wrlong	local03, fp
20ba8                 | ' 
20ba8                 | ' t2=pop()
20ba8                 | ' t1=pop()
20ba8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
20ba8     08 4E 85 F1 | 	sub	fp, #8
20bac     1D 2A 0E F2 | 	cmp	local03, #29 wz
20bb0     14 4E 05 A1 |  if_e	add	fp, #20
20bb4     A7 2C 02 AB |  if_e	rdlong	local04, fp
20bb8     14 4E 85 A1 |  if_e	sub	fp, #20
20bbc     16 2B 02 A6 |  if_e	mov	local03, local04
20bc0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20bc4     5C 00 90 5D |  if_ne	jmp	#LR__2561
20bc8                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
20bc8     0C 4E 05 F1 | 	add	fp, #12
20bcc     A7 26 02 FB | 	rdlong	local01, fp
20bd0     0C 4E 85 F1 | 	sub	fp, #12
20bd4     A7 2A 02 FB | 	rdlong	local03, fp
20bd8     15 27 12 F2 | 	cmp	local01, local03 wc
20bdc     1C 00 90 3D |  if_ae	jmp	#LR__2560
20be0     A7 26 02 FB | 	rdlong	local01, fp
20be4     0C 4E 05 F1 | 	add	fp, #12
20be8     A7 28 02 FB | 	rdlong	local02, fp
20bec     0C 4E 85 F1 | 	sub	fp, #12
20bf0     14 27 82 F1 | 	sub	local01, local02
20bf4     A7 26 62 FC | 	wrlong	local01, fp
20bf8     F4 02 90 FD | 	jmp	#LR__2570
20bfc                 | LR__2560
20bfc     A7 26 02 FB | 	rdlong	local01, fp
20c00     0C 4E 05 F1 | 	add	fp, #12
20c04     A7 28 02 FB | 	rdlong	local02, fp
20c08     0C 4E 85 F1 | 	sub	fp, #12
20c0c     14 27 82 F1 | 	sub	local01, local02
20c10     A7 26 62 FC | 	wrlong	local01, fp
20c14     08 4E 05 F1 | 	add	fp, #8
20c18     A7 38 68 FC | 	wrlong	#28, fp
20c1c     08 4E 85 F1 | 	sub	fp, #8
20c20     CC 02 90 FD | 	jmp	#LR__2570
20c24                 | LR__2561
20c24                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
20c24     08 4E 05 F1 | 	add	fp, #8
20c28     A7 26 02 FB | 	rdlong	local01, fp
20c2c     08 4E 85 F1 | 	sub	fp, #8
20c30     1D 26 0E F2 | 	cmp	local01, #29 wz
20c34     14 4E 05 A1 |  if_e	add	fp, #20
20c38     A7 2C 02 AB |  if_e	rdlong	local04, fp
20c3c     14 4E 85 A1 |  if_e	sub	fp, #20
20c40     16 2B 02 A6 |  if_e	mov	local03, local04
20c44     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20c48     28 00 90 5D |  if_ne	jmp	#LR__2562
20c4c     A7 26 02 FB | 	rdlong	local01, fp
20c50     0C 4E 05 F1 | 	add	fp, #12
20c54     A7 28 02 FB | 	rdlong	local02, fp
20c58     0C 4E 85 F1 | 	sub	fp, #12
20c5c     14 27 82 F1 | 	sub	local01, local02
20c60     A7 26 62 FC | 	wrlong	local01, fp
20c64     08 4E 05 F1 | 	add	fp, #8
20c68     A7 38 68 FC | 	wrlong	#28, fp
20c6c     08 4E 85 F1 | 	sub	fp, #8
20c70     7C 02 90 FD | 	jmp	#LR__2570
20c74                 | LR__2562
20c74                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
20c74     08 4E 05 F1 | 	add	fp, #8
20c78     A7 26 02 FB | 	rdlong	local01, fp
20c7c     08 4E 85 F1 | 	sub	fp, #8
20c80     1D 26 0E F2 | 	cmp	local01, #29 wz
20c84     14 4E 05 A1 |  if_e	add	fp, #20
20c88     A7 2C 02 AB |  if_e	rdlong	local04, fp
20c8c     14 4E 85 A1 |  if_e	sub	fp, #20
20c90     16 2B 02 A6 |  if_e	mov	local03, local04
20c94     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20c98     34 00 90 5D |  if_ne	jmp	#LR__2563
20c9c     A7 12 02 FB | 	rdlong	arg01, fp
20ca0     E8 9E B0 FD | 	call	#__system___float_fromuns
20ca4     FD 12 02 F6 | 	mov	arg01, result1
20ca8     0C 4E 05 F1 | 	add	fp, #12
20cac     A7 14 02 FB | 	rdlong	arg02, fp
20cb0     0C 4E 85 F1 | 	sub	fp, #12
20cb4     1F 14 E6 F4 | 	bitnot	arg02, #31
20cb8     04 9F B0 FD | 	call	#__system___float_add
20cbc     A7 FA 61 FC | 	wrlong	result1, fp
20cc0     08 4E 05 F1 | 	add	fp, #8
20cc4     A7 3C 68 FC | 	wrlong	#30, fp
20cc8     08 4E 85 F1 | 	sub	fp, #8
20ccc     20 02 90 FD | 	jmp	#LR__2570
20cd0                 | LR__2563
20cd0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
20cd0     08 4E 05 F1 | 	add	fp, #8
20cd4     A7 26 02 FB | 	rdlong	local01, fp
20cd8     08 4E 85 F1 | 	sub	fp, #8
20cdc     1C 26 0E F2 | 	cmp	local01, #28 wz
20ce0     14 4E 05 A1 |  if_e	add	fp, #20
20ce4     A7 2C 02 AB |  if_e	rdlong	local04, fp
20ce8     14 4E 85 A1 |  if_e	sub	fp, #20
20cec     16 2B 02 A6 |  if_e	mov	local03, local04
20cf0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20cf4     1C 00 90 5D |  if_ne	jmp	#LR__2564
20cf8     A7 26 02 FB | 	rdlong	local01, fp
20cfc     0C 4E 05 F1 | 	add	fp, #12
20d00     A7 28 02 FB | 	rdlong	local02, fp
20d04     0C 4E 85 F1 | 	sub	fp, #12
20d08     14 27 82 F1 | 	sub	local01, local02
20d0c     A7 26 62 FC | 	wrlong	local01, fp
20d10     DC 01 90 FD | 	jmp	#LR__2570
20d14                 | LR__2564
20d14                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
20d14     08 4E 05 F1 | 	add	fp, #8
20d18     A7 26 02 FB | 	rdlong	local01, fp
20d1c     08 4E 85 F1 | 	sub	fp, #8
20d20     1C 26 0E F2 | 	cmp	local01, #28 wz
20d24     14 4E 05 A1 |  if_e	add	fp, #20
20d28     A7 2C 02 AB |  if_e	rdlong	local04, fp
20d2c     14 4E 85 A1 |  if_e	sub	fp, #20
20d30     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
20d34     1C 00 90 5D |  if_ne	jmp	#LR__2565
20d38     A7 26 02 FB | 	rdlong	local01, fp
20d3c     0C 4E 05 F1 | 	add	fp, #12
20d40     A7 28 02 FB | 	rdlong	local02, fp
20d44     0C 4E 85 F1 | 	sub	fp, #12
20d48     14 27 82 F1 | 	sub	local01, local02
20d4c     A7 26 62 FC | 	wrlong	local01, fp
20d50     9C 01 90 FD | 	jmp	#LR__2570
20d54                 | LR__2565
20d54                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
20d54     08 4E 05 F1 | 	add	fp, #8
20d58     A7 26 02 FB | 	rdlong	local01, fp
20d5c     08 4E 85 F1 | 	sub	fp, #8
20d60     1C 26 0E F2 | 	cmp	local01, #28 wz
20d64     14 4E 05 A1 |  if_e	add	fp, #20
20d68     A7 2A 02 AB |  if_e	rdlong	local03, fp
20d6c     14 4E 85 A1 |  if_e	sub	fp, #20
20d70     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20d74     44 00 90 5D |  if_ne	jmp	#LR__2566
20d78     A7 12 02 FB | 	rdlong	arg01, fp
20d7c     09 13 52 F6 | 	abs	arg01, arg01 wc
20d80     1F 2E C6 C9 |  if_b	decod	local05, #31
20d84     00 2E 06 36 |  if_ae	mov	local05, #0
20d88     00 9E B0 FD | 	call	#__system___float_fromuns
20d8c     17 FB 61 F5 | 	xor	result1, local05
20d90     FD 12 02 F6 | 	mov	arg01, result1
20d94     0C 4E 05 F1 | 	add	fp, #12
20d98     A7 14 02 FB | 	rdlong	arg02, fp
20d9c     0C 4E 85 F1 | 	sub	fp, #12
20da0     1F 14 E6 F4 | 	bitnot	arg02, #31
20da4     18 9E B0 FD | 	call	#__system___float_add
20da8     A7 FA 61 FC | 	wrlong	result1, fp
20dac     08 4E 05 F1 | 	add	fp, #8
20db0     A7 3C 68 FC | 	wrlong	#30, fp
20db4     08 4E 85 F1 | 	sub	fp, #8
20db8     34 01 90 FD | 	jmp	#LR__2570
20dbc                 | LR__2566
20dbc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
20dbc     08 4E 05 F1 | 	add	fp, #8
20dc0     A7 26 02 FB | 	rdlong	local01, fp
20dc4     08 4E 85 F1 | 	sub	fp, #8
20dc8     1E 26 0E F2 | 	cmp	local01, #30 wz
20dcc     14 4E 05 A1 |  if_e	add	fp, #20
20dd0     A7 2A 02 AB |  if_e	rdlong	local03, fp
20dd4     14 4E 85 A1 |  if_e	sub	fp, #20
20dd8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20ddc     2C 00 90 5D |  if_ne	jmp	#LR__2567
20de0     A7 26 02 FB | 	rdlong	local01, fp
20de4     0C 4E 05 F1 | 	add	fp, #12
20de8     A7 12 02 FB | 	rdlong	arg01, fp
20dec     0C 4E 85 F1 | 	sub	fp, #12
20df0     98 9D B0 FD | 	call	#__system___float_fromuns
20df4     FD 14 02 F6 | 	mov	arg02, result1
20df8     13 13 02 F6 | 	mov	arg01, local01
20dfc     1F 14 E6 F4 | 	bitnot	arg02, #31
20e00     BC 9D B0 FD | 	call	#__system___float_add
20e04     A7 FA 61 FC | 	wrlong	result1, fp
20e08     E4 00 90 FD | 	jmp	#LR__2570
20e0c                 | LR__2567
20e0c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
20e0c     08 4E 05 F1 | 	add	fp, #8
20e10     A7 26 02 FB | 	rdlong	local01, fp
20e14     08 4E 85 F1 | 	sub	fp, #8
20e18     1E 26 0E F2 | 	cmp	local01, #30 wz
20e1c     14 4E 05 A1 |  if_e	add	fp, #20
20e20     A7 2A 02 AB |  if_e	rdlong	local03, fp
20e24     14 4E 85 A1 |  if_e	sub	fp, #20
20e28     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20e2c     3C 00 90 5D |  if_ne	jmp	#LR__2568
20e30     A7 26 02 FB | 	rdlong	local01, fp
20e34     0C 4E 05 F1 | 	add	fp, #12
20e38     A7 12 02 FB | 	rdlong	arg01, fp
20e3c     0C 4E 85 F1 | 	sub	fp, #12
20e40     09 13 52 F6 | 	abs	arg01, arg01 wc
20e44     1F 2E C6 C9 |  if_b	decod	local05, #31
20e48     00 2E 06 36 |  if_ae	mov	local05, #0
20e4c     3C 9D B0 FD | 	call	#__system___float_fromuns
20e50     17 FB 61 F5 | 	xor	result1, local05
20e54     FD 14 02 F6 | 	mov	arg02, result1
20e58     13 13 02 F6 | 	mov	arg01, local01
20e5c     1F 14 E6 F4 | 	bitnot	arg02, #31
20e60     5C 9D B0 FD | 	call	#__system___float_add
20e64     A7 FA 61 FC | 	wrlong	result1, fp
20e68     84 00 90 FD | 	jmp	#LR__2570
20e6c                 | LR__2568
20e6c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
20e6c     08 4E 05 F1 | 	add	fp, #8
20e70     A7 26 02 FB | 	rdlong	local01, fp
20e74     08 4E 85 F1 | 	sub	fp, #8
20e78     1E 26 0E F2 | 	cmp	local01, #30 wz
20e7c     14 4E 05 A1 |  if_e	add	fp, #20
20e80     A7 2A 02 AB |  if_e	rdlong	local03, fp
20e84     14 4E 85 A1 |  if_e	sub	fp, #20
20e88     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20e8c     20 00 90 5D |  if_ne	jmp	#LR__2569
20e90     A7 12 02 FB | 	rdlong	arg01, fp
20e94     0C 4E 05 F1 | 	add	fp, #12
20e98     A7 14 02 FB | 	rdlong	arg02, fp
20e9c     0C 4E 85 F1 | 	sub	fp, #12
20ea0     1F 14 E6 F4 | 	bitnot	arg02, #31
20ea4     18 9D B0 FD | 	call	#__system___float_add
20ea8     A7 FA 61 FC | 	wrlong	result1, fp
20eac     40 00 90 FD | 	jmp	#LR__2570
20eb0                 | LR__2569
20eb0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
20eb0     08 4E 05 F1 | 	add	fp, #8
20eb4     A7 26 02 FB | 	rdlong	local01, fp
20eb8     08 4E 85 F1 | 	sub	fp, #8
20ebc     1F 26 0E F2 | 	cmp	local01, #31 wz
20ec0     14 4E 05 51 |  if_ne	add	fp, #20
20ec4     A7 2A 02 5B |  if_ne	rdlong	local03, fp
20ec8     14 4E 85 51 |  if_ne	sub	fp, #20
20ecc     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
20ed0     A7 06 68 AC |  if_e	wrlong	#3, fp
20ed4     08 4E 05 A1 |  if_e	add	fp, #8
20ed8     A7 FE 69 AC |  if_e	wrlong	#255, fp
20edc     08 4E 85 A1 |  if_e	sub	fp, #8
20ee0     A7 0A 68 5C |  if_ne	wrlong	#5, fp
20ee4     08 4E 05 51 |  if_ne	add	fp, #8
20ee8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
20eec     08 4E 85 51 |  if_ne	sub	fp, #8
20ef0                 | LR__2570
20ef0     A7 12 02 F6 | 	mov	arg01, fp
20ef4     C0 C9 BE FD | 	call	#_push
20ef8     A7 F0 03 F6 | 	mov	ptra, fp
20efc     B2 00 A0 FD | 	call	#popregs_
20f00                 | _do_minus_ret
20f00     2D 00 64 FD | 	ret
20f04                 | 
20f04                 | ' 
20f04                 | ' '--------------------------------- negative (-), one argument negative
20f04                 | ' 
20f04                 | ' sub do_negative
20f04                 | _do_negative
20f04     02 4A 05 F6 | 	mov	COUNT_, #2
20f08     A8 00 A0 FD | 	call	#pushregs_
20f0c     0C F0 07 F1 | 	add	ptra, #12
20f10     0C C9 BE FD | 	call	#_pop
20f14     FF 26 02 F6 | 	mov	local01, result3
20f18     A7 FA 61 FC | 	wrlong	result1, fp
20f1c     04 4E 05 F1 | 	add	fp, #4
20f20     A7 FC 61 FC | 	wrlong	result2, fp
20f24     04 4E 05 F1 | 	add	fp, #4
20f28     A7 26 62 FC | 	wrlong	local01, fp
20f2c                 | ' 
20f2c                 | ' t1=pop()
20f2c                 | ' if t1.result_type=result_int then 
20f2c     08 4E 85 F1 | 	sub	fp, #8
20f30     1C 26 0E F2 | 	cmp	local01, #28 wz
20f34     A7 28 02 AB |  if_e	rdlong	local02, fp
20f38     14 27 62 A6 |  if_e	neg	local01, local02
20f3c     A7 26 62 AC |  if_e	wrlong	local01, fp
20f40     5C 00 90 AD |  if_e	jmp	#LR__2582
20f44     08 4E 05 F1 | 	add	fp, #8
20f48     A7 26 02 FB | 	rdlong	local01, fp
20f4c     08 4E 85 F1 | 	sub	fp, #8
20f50     1D 26 0E F2 | 	cmp	local01, #29 wz
20f54     1C 00 90 5D |  if_ne	jmp	#LR__2580
20f58     A7 28 02 FB | 	rdlong	local02, fp
20f5c     14 27 62 F6 | 	neg	local01, local02
20f60     A7 26 62 FC | 	wrlong	local01, fp
20f64     08 4E 05 F1 | 	add	fp, #8
20f68     A7 38 68 FC | 	wrlong	#28, fp
20f6c     08 4E 85 F1 | 	sub	fp, #8
20f70     2C 00 90 FD | 	jmp	#LR__2581
20f74                 | LR__2580
20f74     08 4E 05 F1 | 	add	fp, #8
20f78     A7 26 02 FB | 	rdlong	local01, fp
20f7c     08 4E 85 F1 | 	sub	fp, #8
20f80     1E 26 0E F2 | 	cmp	local01, #30 wz
20f84     A7 FA 01 AB |  if_e	rdlong	result1, fp
20f88     1F FA E5 A4 |  if_e	bitnot	result1, #31
20f8c     A7 FA 61 AC |  if_e	wrlong	result1, fp
20f90     08 4E 05 51 |  if_ne	add	fp, #8
20f94     A7 FE 69 5C |  if_ne	wrlong	#255, fp
20f98     08 4E 85 51 |  if_ne	sub	fp, #8
20f9c     A7 50 68 5C |  if_ne	wrlong	#40, fp
20fa0                 | LR__2581
20fa0                 | LR__2582
20fa0     A7 12 02 F6 | 	mov	arg01, fp
20fa4     10 C9 BE FD | 	call	#_push
20fa8     A7 F0 03 F6 | 	mov	ptra, fp
20fac     B2 00 A0 FD | 	call	#popregs_
20fb0                 | _do_negative_ret
20fb0     2D 00 64 FD | 	ret
20fb4                 | 
20fb4                 | ' 
20fb4                 | ' '--------------------------------- MOD (modulo)
20fb4                 | ' 
20fb4                 | ' sub do_mod 
20fb4                 | _do_mod
20fb4     01 4A 05 F6 | 	mov	COUNT_, #1
20fb8     A8 00 A0 FD | 	call	#pushregs_
20fbc     18 F0 07 F1 | 	add	ptra, #24
20fc0     5C C8 BE FD | 	call	#_pop
20fc4     FD 92 02 F6 | 	mov	muldivb_, result1
20fc8     FE 90 02 F6 | 	mov	muldiva_, result2
20fcc     FF 26 02 F6 | 	mov	local01, result3
20fd0     0C 4E 05 F1 | 	add	fp, #12
20fd4     A7 92 62 FC | 	wrlong	muldivb_, fp
20fd8     04 4E 05 F1 | 	add	fp, #4
20fdc     A7 90 62 FC | 	wrlong	muldiva_, fp
20fe0     04 4E 05 F1 | 	add	fp, #4
20fe4     A7 26 62 FC | 	wrlong	local01, fp
20fe8     14 4E 85 F1 | 	sub	fp, #20
20fec     30 C8 BE FD | 	call	#_pop
20ff0     A7 FA 61 FC | 	wrlong	result1, fp
20ff4     04 4E 05 F1 | 	add	fp, #4
20ff8     A7 FC 61 FC | 	wrlong	result2, fp
20ffc     04 4E 05 F1 | 	add	fp, #4
21000     A7 FE 61 FC | 	wrlong	result3, fp
21004                 | ' 
21004                 | ' t2=pop()
21004                 | ' t1=pop()
21004                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
21004     08 4E 85 F1 | 	sub	fp, #8
21008     1F FE 0D F2 | 	cmp	result3, #31 wz
2100c     14 4E 05 51 |  if_ne	add	fp, #20
21010     A7 12 02 5B |  if_ne	rdlong	arg01, fp
21014     14 4E 85 51 |  if_ne	sub	fp, #20
21018     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
2101c     A7 14 68 AC |  if_e	wrlong	#10, fp
21020     08 4E 05 A1 |  if_e	add	fp, #8
21024     A7 FE 69 AC |  if_e	wrlong	#255, fp
21028     08 4E 85 A1 |  if_e	sub	fp, #8
2102c     90 01 90 AD |  if_e	jmp	#LR__2596
21030                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
21030     08 4E 05 F1 | 	add	fp, #8
21034     A7 92 02 FB | 	rdlong	muldivb_, fp
21038     08 4E 85 F1 | 	sub	fp, #8
2103c     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
21040     1C 00 90 5D |  if_ne	jmp	#LR__2590
21044     08 4E 05 F1 | 	add	fp, #8
21048     A7 38 68 FC | 	wrlong	#28, fp
2104c     08 4E 85 F1 | 	sub	fp, #8
21050     A7 12 02 FB | 	rdlong	arg01, fp
21054     00 14 06 F6 | 	mov	arg02, #0
21058     FC A3 B0 FD | 	call	#__system___float_tointeger
2105c     A7 FA 61 FC | 	wrlong	result1, fp
21060                 | LR__2590
21060                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
21060     14 4E 05 F1 | 	add	fp, #20
21064     A7 92 02 FB | 	rdlong	muldivb_, fp
21068     14 4E 85 F1 | 	sub	fp, #20
2106c     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
21070     28 00 90 5D |  if_ne	jmp	#LR__2591
21074     14 4E 05 F1 | 	add	fp, #20
21078     A7 38 68 FC | 	wrlong	#28, fp
2107c     08 4E 85 F1 | 	sub	fp, #8
21080     A7 12 02 FB | 	rdlong	arg01, fp
21084     0C 4E 85 F1 | 	sub	fp, #12
21088     00 14 06 F6 | 	mov	arg02, #0
2108c     C8 A3 B0 FD | 	call	#__system___float_tointeger
21090     0C 4E 05 F1 | 	add	fp, #12
21094     A7 FA 61 FC | 	wrlong	result1, fp
21098     0C 4E 85 F1 | 	sub	fp, #12
2109c                 | LR__2591
2109c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
2109c     08 4E 05 F1 | 	add	fp, #8
210a0     A7 92 02 FB | 	rdlong	muldivb_, fp
210a4     08 4E 85 F1 | 	sub	fp, #8
210a8     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
210ac     14 4E 05 A1 |  if_e	add	fp, #20
210b0     A7 26 02 AB |  if_e	rdlong	local01, fp
210b4     14 4E 85 A1 |  if_e	sub	fp, #20
210b8     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
210bc     20 00 90 5D |  if_ne	jmp	#LR__2592
210c0     0C 4E 05 F1 | 	add	fp, #12
210c4     A7 26 02 FB | 	rdlong	local01, fp
210c8     0C 4E 85 F1 | 	sub	fp, #12
210cc     A7 92 02 FB | 	rdlong	muldivb_, fp
210d0     13 93 12 FD | 	qdiv	muldivb_, local01
210d4     19 26 62 FD | 	getqy	local01
210d8     A7 26 62 FC | 	wrlong	local01, fp
210dc     E0 00 90 FD | 	jmp	#LR__2596
210e0                 | LR__2592
210e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
210e0     08 4E 05 F1 | 	add	fp, #8
210e4     A7 92 02 FB | 	rdlong	muldivb_, fp
210e8     08 4E 85 F1 | 	sub	fp, #8
210ec     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
210f0     14 4E 05 A1 |  if_e	add	fp, #20
210f4     A7 26 02 AB |  if_e	rdlong	local01, fp
210f8     14 4E 85 A1 |  if_e	sub	fp, #20
210fc     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
21100     2C 00 90 5D |  if_ne	jmp	#LR__2593
21104     0C 4E 05 F1 | 	add	fp, #12
21108     A7 26 02 FB | 	rdlong	local01, fp
2110c     0C 4E 85 F1 | 	sub	fp, #12
21110     A7 92 02 FB | 	rdlong	muldivb_, fp
21114     13 93 12 FD | 	qdiv	muldivb_, local01
21118     19 26 62 FD | 	getqy	local01
2111c     A7 26 62 FC | 	wrlong	local01, fp
21120     08 4E 05 F1 | 	add	fp, #8
21124     A7 38 68 FC | 	wrlong	#28, fp
21128     08 4E 85 F1 | 	sub	fp, #8
2112c     90 00 90 FD | 	jmp	#LR__2596
21130                 | LR__2593
21130                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
21130     08 4E 05 F1 | 	add	fp, #8
21134     A7 92 02 FB | 	rdlong	muldivb_, fp
21138     08 4E 85 F1 | 	sub	fp, #8
2113c     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
21140     14 4E 05 A1 |  if_e	add	fp, #20
21144     A7 26 02 AB |  if_e	rdlong	local01, fp
21148     14 4E 85 A1 |  if_e	sub	fp, #20
2114c     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
21150     1C 00 90 5D |  if_ne	jmp	#LR__2594
21154     A7 90 02 FB | 	rdlong	muldiva_, fp
21158     0C 4E 05 F1 | 	add	fp, #12
2115c     A7 92 02 FB | 	rdlong	muldivb_, fp
21160     0C 4E 85 F1 | 	sub	fp, #12
21164     BA 00 A0 FD | 	call	#divide_
21168     A7 90 62 FC | 	wrlong	muldiva_, fp
2116c     50 00 90 FD | 	jmp	#LR__2596
21170                 | LR__2594
21170                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
21170     08 4E 05 F1 | 	add	fp, #8
21174     A7 92 02 FB | 	rdlong	muldivb_, fp
21178     08 4E 85 F1 | 	sub	fp, #8
2117c     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
21180     14 4E 05 A1 |  if_e	add	fp, #20
21184     A7 26 02 AB |  if_e	rdlong	local01, fp
21188     14 4E 85 A1 |  if_e	sub	fp, #20
2118c     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
21190     1C 00 90 5D |  if_ne	jmp	#LR__2595
21194     A7 90 02 FB | 	rdlong	muldiva_, fp
21198     0C 4E 05 F1 | 	add	fp, #12
2119c     A7 92 02 FB | 	rdlong	muldivb_, fp
211a0     0C 4E 85 F1 | 	sub	fp, #12
211a4     BA 00 A0 FD | 	call	#divide_
211a8     A7 90 62 FC | 	wrlong	muldiva_, fp
211ac     10 00 90 FD | 	jmp	#LR__2596
211b0                 | LR__2595
211b0     A7 16 68 FC | 	wrlong	#11, fp
211b4     08 4E 05 F1 | 	add	fp, #8
211b8     A7 FE 69 FC | 	wrlong	#255, fp
211bc     08 4E 85 F1 | 	sub	fp, #8
211c0                 | LR__2596
211c0     A7 12 02 F6 | 	mov	arg01, fp
211c4     F0 C6 BE FD | 	call	#_push
211c8     A7 F0 03 F6 | 	mov	ptra, fp
211cc     B2 00 A0 FD | 	call	#popregs_
211d0                 | _do_mod_ret
211d0     2D 00 64 FD | 	ret
211d4                 | 
211d4                 | ' 
211d4                 | ' '--------------------------------- mul (*)
211d4                 | ' 
211d4                 | ' sub do_mul
211d4                 | _do_mul
211d4     05 4A 05 F6 | 	mov	COUNT_, #5
211d8     A8 00 A0 FD | 	call	#pushregs_
211dc     18 F0 07 F1 | 	add	ptra, #24
211e0     3C C6 BE FD | 	call	#_pop
211e4     FD 26 02 F6 | 	mov	local01, result1
211e8     FE 28 02 F6 | 	mov	local02, result2
211ec     FF 2A 02 F6 | 	mov	local03, result3
211f0     0C 4E 05 F1 | 	add	fp, #12
211f4     A7 26 62 FC | 	wrlong	local01, fp
211f8     04 4E 05 F1 | 	add	fp, #4
211fc     A7 28 62 FC | 	wrlong	local02, fp
21200     04 4E 05 F1 | 	add	fp, #4
21204     A7 2A 62 FC | 	wrlong	local03, fp
21208     14 4E 85 F1 | 	sub	fp, #20
2120c     10 C6 BE FD | 	call	#_pop
21210     FF 2A 02 F6 | 	mov	local03, result3
21214     A7 FA 61 FC | 	wrlong	result1, fp
21218     04 4E 05 F1 | 	add	fp, #4
2121c     A7 FC 61 FC | 	wrlong	result2, fp
21220     04 4E 05 F1 | 	add	fp, #4
21224     A7 2A 62 FC | 	wrlong	local03, fp
21228                 | ' 
21228                 | ' t2=pop()
21228                 | ' t1=pop()
21228                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
21228     08 4E 85 F1 | 	sub	fp, #8
2122c     1D 2A 0E F2 | 	cmp	local03, #29 wz
21230     14 4E 05 A1 |  if_e	add	fp, #20
21234     A7 2C 02 AB |  if_e	rdlong	local04, fp
21238     14 4E 85 A1 |  if_e	sub	fp, #20
2123c     16 2B 02 A6 |  if_e	mov	local03, local04
21240     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
21244     20 00 90 5D |  if_ne	jmp	#LR__2600
21248     A7 28 02 FB | 	rdlong	local02, fp
2124c     0C 4E 05 F1 | 	add	fp, #12
21250     A7 2A 02 FB | 	rdlong	local03, fp
21254     15 29 02 FD | 	qmul	local02, local03
21258     0C 4E 85 F1 | 	sub	fp, #12
2125c     18 26 62 FD | 	getqx	local01
21260     A7 26 62 FC | 	wrlong	local01, fp
21264     C4 02 90 FD | 	jmp	#LR__2609
21268                 | LR__2600
21268                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
21268     08 4E 05 F1 | 	add	fp, #8
2126c     A7 26 02 FB | 	rdlong	local01, fp
21270     08 4E 85 F1 | 	sub	fp, #8
21274     1D 26 0E F2 | 	cmp	local01, #29 wz
21278     14 4E 05 A1 |  if_e	add	fp, #20
2127c     A7 2C 02 AB |  if_e	rdlong	local04, fp
21280     14 4E 85 A1 |  if_e	sub	fp, #20
21284     16 2B 02 A6 |  if_e	mov	local03, local04
21288     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
2128c     2C 00 90 5D |  if_ne	jmp	#LR__2601
21290     A7 28 02 FB | 	rdlong	local02, fp
21294     0C 4E 05 F1 | 	add	fp, #12
21298     A7 2A 02 FB | 	rdlong	local03, fp
2129c     15 29 02 FD | 	qmul	local02, local03
212a0     0C 4E 85 F1 | 	sub	fp, #12
212a4     18 26 62 FD | 	getqx	local01
212a8     A7 26 62 FC | 	wrlong	local01, fp
212ac     08 4E 05 F1 | 	add	fp, #8
212b0     A7 38 68 FC | 	wrlong	#28, fp
212b4     08 4E 85 F1 | 	sub	fp, #8
212b8     70 02 90 FD | 	jmp	#LR__2609
212bc                 | LR__2601
212bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
212bc     08 4E 05 F1 | 	add	fp, #8
212c0     A7 26 02 FB | 	rdlong	local01, fp
212c4     08 4E 85 F1 | 	sub	fp, #8
212c8     1D 26 0E F2 | 	cmp	local01, #29 wz
212cc     14 4E 05 A1 |  if_e	add	fp, #20
212d0     A7 2C 02 AB |  if_e	rdlong	local04, fp
212d4     14 4E 85 A1 |  if_e	sub	fp, #20
212d8     16 2B 02 A6 |  if_e	mov	local03, local04
212dc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
212e0     30 00 90 5D |  if_ne	jmp	#LR__2602
212e4     A7 12 02 FB | 	rdlong	arg01, fp
212e8     A0 98 B0 FD | 	call	#__system___float_fromuns
212ec     FD 12 02 F6 | 	mov	arg01, result1
212f0     0C 4E 05 F1 | 	add	fp, #12
212f4     A7 14 02 FB | 	rdlong	arg02, fp
212f8     0C 4E 85 F1 | 	sub	fp, #12
212fc     90 9C B0 FD | 	call	#__system___float_mul
21300     A7 FA 61 FC | 	wrlong	result1, fp
21304     08 4E 05 F1 | 	add	fp, #8
21308     A7 3C 68 FC | 	wrlong	#30, fp
2130c     08 4E 85 F1 | 	sub	fp, #8
21310     18 02 90 FD | 	jmp	#LR__2609
21314                 | LR__2602
21314                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
21314     08 4E 05 F1 | 	add	fp, #8
21318     A7 26 02 FB | 	rdlong	local01, fp
2131c     08 4E 85 F1 | 	sub	fp, #8
21320     1C 26 0E F2 | 	cmp	local01, #28 wz
21324     14 4E 05 A1 |  if_e	add	fp, #20
21328     A7 2C 02 AB |  if_e	rdlong	local04, fp
2132c     14 4E 85 A1 |  if_e	sub	fp, #20
21330     16 2B 02 A6 |  if_e	mov	local03, local04
21334     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
21338     20 00 90 5D |  if_ne	jmp	#LR__2603
2133c     A7 28 02 FB | 	rdlong	local02, fp
21340     0C 4E 05 F1 | 	add	fp, #12
21344     A7 2A 02 FB | 	rdlong	local03, fp
21348     15 29 02 FD | 	qmul	local02, local03
2134c     0C 4E 85 F1 | 	sub	fp, #12
21350     18 26 62 FD | 	getqx	local01
21354     A7 26 62 FC | 	wrlong	local01, fp
21358     D0 01 90 FD | 	jmp	#LR__2609
2135c                 | LR__2603
2135c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
2135c     08 4E 05 F1 | 	add	fp, #8
21360     A7 26 02 FB | 	rdlong	local01, fp
21364     08 4E 85 F1 | 	sub	fp, #8
21368     1C 26 0E F2 | 	cmp	local01, #28 wz
2136c     14 4E 05 A1 |  if_e	add	fp, #20
21370     A7 2C 02 AB |  if_e	rdlong	local04, fp
21374     14 4E 85 A1 |  if_e	sub	fp, #20
21378     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
2137c     20 00 90 5D |  if_ne	jmp	#LR__2604
21380     A7 28 02 FB | 	rdlong	local02, fp
21384     0C 4E 05 F1 | 	add	fp, #12
21388     A7 2A 02 FB | 	rdlong	local03, fp
2138c     15 29 02 FD | 	qmul	local02, local03
21390     0C 4E 85 F1 | 	sub	fp, #12
21394     18 26 62 FD | 	getqx	local01
21398     A7 26 62 FC | 	wrlong	local01, fp
2139c     8C 01 90 FD | 	jmp	#LR__2609
213a0                 | LR__2604
213a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
213a0     08 4E 05 F1 | 	add	fp, #8
213a4     A7 26 02 FB | 	rdlong	local01, fp
213a8     08 4E 85 F1 | 	sub	fp, #8
213ac     1C 26 0E F2 | 	cmp	local01, #28 wz
213b0     14 4E 05 A1 |  if_e	add	fp, #20
213b4     A7 2A 02 AB |  if_e	rdlong	local03, fp
213b8     14 4E 85 A1 |  if_e	sub	fp, #20
213bc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
213c0     40 00 90 5D |  if_ne	jmp	#LR__2605
213c4     A7 12 02 FB | 	rdlong	arg01, fp
213c8     09 13 52 F6 | 	abs	arg01, arg01 wc
213cc     1F 2E C6 C9 |  if_b	decod	local05, #31
213d0     00 2E 06 36 |  if_ae	mov	local05, #0
213d4     B4 97 B0 FD | 	call	#__system___float_fromuns
213d8     17 FB 61 F5 | 	xor	result1, local05
213dc     FD 12 02 F6 | 	mov	arg01, result1
213e0     0C 4E 05 F1 | 	add	fp, #12
213e4     A7 14 02 FB | 	rdlong	arg02, fp
213e8     0C 4E 85 F1 | 	sub	fp, #12
213ec     A0 9B B0 FD | 	call	#__system___float_mul
213f0     A7 FA 61 FC | 	wrlong	result1, fp
213f4     08 4E 05 F1 | 	add	fp, #8
213f8     A7 3C 68 FC | 	wrlong	#30, fp
213fc     08 4E 85 F1 | 	sub	fp, #8
21400     28 01 90 FD | 	jmp	#LR__2609
21404                 | LR__2605
21404                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
21404     08 4E 05 F1 | 	add	fp, #8
21408     A7 26 02 FB | 	rdlong	local01, fp
2140c     08 4E 85 F1 | 	sub	fp, #8
21410     1E 26 0E F2 | 	cmp	local01, #30 wz
21414     14 4E 05 A1 |  if_e	add	fp, #20
21418     A7 2A 02 AB |  if_e	rdlong	local03, fp
2141c     14 4E 85 A1 |  if_e	sub	fp, #20
21420     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
21424     28 00 90 5D |  if_ne	jmp	#LR__2606
21428     A7 26 02 FB | 	rdlong	local01, fp
2142c     0C 4E 05 F1 | 	add	fp, #12
21430     A7 12 02 FB | 	rdlong	arg01, fp
21434     0C 4E 85 F1 | 	sub	fp, #12
21438     50 97 B0 FD | 	call	#__system___float_fromuns
2143c     FD 14 02 F6 | 	mov	arg02, result1
21440     13 13 02 F6 | 	mov	arg01, local01
21444     48 9B B0 FD | 	call	#__system___float_mul
21448     A7 FA 61 FC | 	wrlong	result1, fp
2144c     DC 00 90 FD | 	jmp	#LR__2609
21450                 | LR__2606
21450                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
21450     08 4E 05 F1 | 	add	fp, #8
21454     A7 26 02 FB | 	rdlong	local01, fp
21458     08 4E 85 F1 | 	sub	fp, #8
2145c     1E 26 0E F2 | 	cmp	local01, #30 wz
21460     14 4E 05 A1 |  if_e	add	fp, #20
21464     A7 2A 02 AB |  if_e	rdlong	local03, fp
21468     14 4E 85 A1 |  if_e	sub	fp, #20
2146c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
21470     38 00 90 5D |  if_ne	jmp	#LR__2607
21474     A7 26 02 FB | 	rdlong	local01, fp
21478     0C 4E 05 F1 | 	add	fp, #12
2147c     A7 12 02 FB | 	rdlong	arg01, fp
21480     0C 4E 85 F1 | 	sub	fp, #12
21484     09 13 52 F6 | 	abs	arg01, arg01 wc
21488     1F 2E C6 C9 |  if_b	decod	local05, #31
2148c     00 2E 06 36 |  if_ae	mov	local05, #0
21490     F8 96 B0 FD | 	call	#__system___float_fromuns
21494     17 FB 61 F5 | 	xor	result1, local05
21498     FD 14 02 F6 | 	mov	arg02, result1
2149c     13 13 02 F6 | 	mov	arg01, local01
214a0     EC 9A B0 FD | 	call	#__system___float_mul
214a4     A7 FA 61 FC | 	wrlong	result1, fp
214a8     80 00 90 FD | 	jmp	#LR__2609
214ac                 | LR__2607
214ac                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
214ac     08 4E 05 F1 | 	add	fp, #8
214b0     A7 26 02 FB | 	rdlong	local01, fp
214b4     08 4E 85 F1 | 	sub	fp, #8
214b8     1E 26 0E F2 | 	cmp	local01, #30 wz
214bc     14 4E 05 A1 |  if_e	add	fp, #20
214c0     A7 2A 02 AB |  if_e	rdlong	local03, fp
214c4     14 4E 85 A1 |  if_e	sub	fp, #20
214c8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
214cc     1C 00 90 5D |  if_ne	jmp	#LR__2608
214d0     A7 12 02 FB | 	rdlong	arg01, fp
214d4     0C 4E 05 F1 | 	add	fp, #12
214d8     A7 14 02 FB | 	rdlong	arg02, fp
214dc     0C 4E 85 F1 | 	sub	fp, #12
214e0     AC 9A B0 FD | 	call	#__system___float_mul
214e4     A7 FA 61 FC | 	wrlong	result1, fp
214e8     40 00 90 FD | 	jmp	#LR__2609
214ec                 | LR__2608
214ec                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
214ec     08 4E 05 F1 | 	add	fp, #8
214f0     A7 26 02 FB | 	rdlong	local01, fp
214f4     08 4E 85 F1 | 	sub	fp, #8
214f8     1F 26 0E F2 | 	cmp	local01, #31 wz
214fc     14 4E 05 51 |  if_ne	add	fp, #20
21500     A7 2A 02 5B |  if_ne	rdlong	local03, fp
21504     14 4E 85 51 |  if_ne	sub	fp, #20
21508     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
2150c     A7 10 68 AC |  if_e	wrlong	#8, fp
21510     08 4E 05 A1 |  if_e	add	fp, #8
21514     A7 FE 69 AC |  if_e	wrlong	#255, fp
21518     08 4E 85 A1 |  if_e	sub	fp, #8
2151c     A7 12 68 5C |  if_ne	wrlong	#9, fp
21520     08 4E 05 51 |  if_ne	add	fp, #8
21524     A7 FE 69 5C |  if_ne	wrlong	#255, fp
21528     08 4E 85 51 |  if_ne	sub	fp, #8
2152c                 | LR__2609
2152c     A7 12 02 F6 | 	mov	arg01, fp
21530     84 C3 BE FD | 	call	#_push
21534     A7 F0 03 F6 | 	mov	ptra, fp
21538     B2 00 A0 FD | 	call	#popregs_
2153c                 | _do_mul_ret
2153c     2D 00 64 FD | 	ret
21540                 | 
21540                 | ' 
21540                 | ' '--------------------------------- not equal (<>)
21540                 | ' 
21540                 | ' sub do_ne
21540                 | _do_ne
21540     05 4A 05 F6 | 	mov	COUNT_, #5
21544     A8 00 A0 FD | 	call	#pushregs_
21548     18 F0 07 F1 | 	add	ptra, #24
2154c     D0 C2 BE FD | 	call	#_pop
21550     FD 26 02 F6 | 	mov	local01, result1
21554     FE 28 02 F6 | 	mov	local02, result2
21558     FF 2A 02 F6 | 	mov	local03, result3
2155c     0C 4E 05 F1 | 	add	fp, #12
21560     A7 26 62 FC | 	wrlong	local01, fp
21564     04 4E 05 F1 | 	add	fp, #4
21568     A7 28 62 FC | 	wrlong	local02, fp
2156c     04 4E 05 F1 | 	add	fp, #4
21570     A7 2A 62 FC | 	wrlong	local03, fp
21574     14 4E 85 F1 | 	sub	fp, #20
21578     A4 C2 BE FD | 	call	#_pop
2157c     FF 2A 02 F6 | 	mov	local03, result3
21580     A7 FA 61 FC | 	wrlong	result1, fp
21584     04 4E 05 F1 | 	add	fp, #4
21588     A7 FC 61 FC | 	wrlong	result2, fp
2158c     04 4E 05 F1 | 	add	fp, #4
21590     A7 2A 62 FC | 	wrlong	local03, fp
21594                 | ' 
21594                 | ' t2=pop()
21594                 | ' t1=pop()
21594                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
21594     08 4E 85 F1 | 	sub	fp, #8
21598     1F 2A 0E F2 | 	cmp	local03, #31 wz
2159c     14 4E 05 A1 |  if_e	add	fp, #20
215a0     A7 2C 02 AB |  if_e	rdlong	local04, fp
215a4     14 4E 85 A1 |  if_e	sub	fp, #20
215a8     16 2B 02 A6 |  if_e	mov	local03, local04
215ac     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
215b0     28 00 90 5D |  if_ne	jmp	#LR__2610
215b4     00 26 06 F6 | 	mov	local01, #0
215b8     A7 12 02 FB | 	rdlong	arg01, fp
215bc     0C 4E 05 F1 | 	add	fp, #12
215c0     A7 14 02 FB | 	rdlong	arg02, fp
215c4     0C 4E 85 F1 | 	sub	fp, #12
215c8     70 6B B0 FD | 	call	#__system___string_cmp
215cc     00 FA 0D F2 | 	cmp	result1, #0 wz
215d0     00 26 26 56 |  if_ne	not	local01, #0
215d4     A7 26 62 FC | 	wrlong	local01, fp
215d8     20 04 90 FD | 	jmp	#LR__2623
215dc                 | LR__2610
215dc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
215dc     08 4E 05 F1 | 	add	fp, #8
215e0     A7 26 02 FB | 	rdlong	local01, fp
215e4     08 4E 85 F1 | 	sub	fp, #8
215e8     1E 26 0E F2 | 	cmp	local01, #30 wz
215ec     14 4E 05 A1 |  if_e	add	fp, #20
215f0     A7 2C 02 AB |  if_e	rdlong	local04, fp
215f4     14 4E 85 A1 |  if_e	sub	fp, #20
215f8     16 2B 02 A6 |  if_e	mov	local03, local04
215fc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
21600     2C 00 90 5D |  if_ne	jmp	#LR__2611
21604     00 26 06 F6 | 	mov	local01, #0
21608     A7 12 02 FB | 	rdlong	arg01, fp
2160c     0C 4E 05 F1 | 	add	fp, #12
21610     A7 14 02 FB | 	rdlong	arg02, fp
21614     0C 4E 85 F1 | 	sub	fp, #12
21618     01 16 06 F6 | 	mov	arg03, #1
2161c     A4 9D B0 FD | 	call	#__system___float_cmp
21620     00 FA 0D F2 | 	cmp	result1, #0 wz
21624     00 26 26 56 |  if_ne	not	local01, #0
21628     A7 26 62 FC | 	wrlong	local01, fp
2162c     CC 03 90 FD | 	jmp	#LR__2623
21630                 | LR__2611
21630                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
21630     08 4E 05 F1 | 	add	fp, #8
21634     A7 26 02 FB | 	rdlong	local01, fp
21638     08 4E 85 F1 | 	sub	fp, #8
2163c     1E 26 0E F2 | 	cmp	local01, #30 wz
21640     14 4E 05 A1 |  if_e	add	fp, #20
21644     A7 2C 02 AB |  if_e	rdlong	local04, fp
21648     14 4E 85 A1 |  if_e	sub	fp, #20
2164c     16 2B 02 A6 |  if_e	mov	local03, local04
21650     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
21654     48 00 90 5D |  if_ne	jmp	#LR__2612
21658     00 26 06 F6 | 	mov	local01, #0
2165c     A7 28 02 FB | 	rdlong	local02, fp
21660     0C 4E 05 F1 | 	add	fp, #12
21664     A7 12 02 FB | 	rdlong	arg01, fp
21668     0C 4E 85 F1 | 	sub	fp, #12
2166c     09 13 52 F6 | 	abs	arg01, arg01 wc
21670     1F 2E C6 C9 |  if_b	decod	local05, #31
21674     00 2E 06 36 |  if_ae	mov	local05, #0
21678     10 95 B0 FD | 	call	#__system___float_fromuns
2167c     17 FB 61 F5 | 	xor	result1, local05
21680     FD 14 02 F6 | 	mov	arg02, result1
21684     14 13 02 F6 | 	mov	arg01, local02
21688     01 16 06 F6 | 	mov	arg03, #1
2168c     34 9D B0 FD | 	call	#__system___float_cmp
21690     00 FA 0D F2 | 	cmp	result1, #0 wz
21694     00 26 26 56 |  if_ne	not	local01, #0
21698     A7 26 62 FC | 	wrlong	local01, fp
2169c     5C 03 90 FD | 	jmp	#LR__2623
216a0                 | LR__2612
216a0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
216a0     08 4E 05 F1 | 	add	fp, #8
216a4     A7 26 02 FB | 	rdlong	local01, fp
216a8     08 4E 85 F1 | 	sub	fp, #8
216ac     1E 26 0E F2 | 	cmp	local01, #30 wz
216b0     14 4E 05 A1 |  if_e	add	fp, #20
216b4     A7 2C 02 AB |  if_e	rdlong	local04, fp
216b8     14 4E 85 A1 |  if_e	sub	fp, #20
216bc     16 2B 02 A6 |  if_e	mov	local03, local04
216c0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
216c4     38 00 90 5D |  if_ne	jmp	#LR__2613
216c8     00 26 06 F6 | 	mov	local01, #0
216cc     A7 28 02 FB | 	rdlong	local02, fp
216d0     0C 4E 05 F1 | 	add	fp, #12
216d4     A7 12 02 FB | 	rdlong	arg01, fp
216d8     0C 4E 85 F1 | 	sub	fp, #12
216dc     AC 94 B0 FD | 	call	#__system___float_fromuns
216e0     FD 14 02 F6 | 	mov	arg02, result1
216e4     14 13 02 F6 | 	mov	arg01, local02
216e8     01 16 06 F6 | 	mov	arg03, #1
216ec     D4 9C B0 FD | 	call	#__system___float_cmp
216f0     00 FA 0D F2 | 	cmp	result1, #0 wz
216f4     00 26 26 56 |  if_ne	not	local01, #0
216f8     A7 26 62 FC | 	wrlong	local01, fp
216fc     FC 02 90 FD | 	jmp	#LR__2623
21700                 | LR__2613
21700                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
21700     08 4E 05 F1 | 	add	fp, #8
21704     A7 26 02 FB | 	rdlong	local01, fp
21708     08 4E 85 F1 | 	sub	fp, #8
2170c     1C 26 0E F2 | 	cmp	local01, #28 wz
21710     14 4E 05 A1 |  if_e	add	fp, #20
21714     A7 2C 02 AB |  if_e	rdlong	local04, fp
21718     14 4E 85 A1 |  if_e	sub	fp, #20
2171c     16 2B 02 A6 |  if_e	mov	local03, local04
21720     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
21724     44 00 90 5D |  if_ne	jmp	#LR__2614
21728     00 26 06 F6 | 	mov	local01, #0
2172c     A7 12 02 FB | 	rdlong	arg01, fp
21730     09 13 52 F6 | 	abs	arg01, arg01 wc
21734     1F 2E C6 C9 |  if_b	decod	local05, #31
21738     00 2E 06 36 |  if_ae	mov	local05, #0
2173c     4C 94 B0 FD | 	call	#__system___float_fromuns
21740     17 FB 61 F5 | 	xor	result1, local05
21744     FD 12 02 F6 | 	mov	arg01, result1
21748     0C 4E 05 F1 | 	add	fp, #12
2174c     A7 14 02 FB | 	rdlong	arg02, fp
21750     0C 4E 85 F1 | 	sub	fp, #12
21754     01 16 06 F6 | 	mov	arg03, #1
21758     68 9C B0 FD | 	call	#__system___float_cmp
2175c     00 FA 0D F2 | 	cmp	result1, #0 wz
21760     00 26 26 56 |  if_ne	not	local01, #0
21764     A7 26 62 FC | 	wrlong	local01, fp
21768     90 02 90 FD | 	jmp	#LR__2623
2176c                 | LR__2614
2176c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
2176c     08 4E 05 F1 | 	add	fp, #8
21770     A7 26 02 FB | 	rdlong	local01, fp
21774     08 4E 85 F1 | 	sub	fp, #8
21778     1C 26 0E F2 | 	cmp	local01, #28 wz
2177c     14 4E 05 A1 |  if_e	add	fp, #20
21780     A7 2C 02 AB |  if_e	rdlong	local04, fp
21784     14 4E 85 A1 |  if_e	sub	fp, #20
21788     16 2B 02 A6 |  if_e	mov	local03, local04
2178c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
21790     24 00 90 5D |  if_ne	jmp	#LR__2615
21794     00 26 06 F6 | 	mov	local01, #0
21798     A7 28 02 FB | 	rdlong	local02, fp
2179c     0C 4E 05 F1 | 	add	fp, #12
217a0     A7 2A 02 FB | 	rdlong	local03, fp
217a4     0C 4E 85 F1 | 	sub	fp, #12
217a8     15 29 0A F2 | 	cmp	local02, local03 wz
217ac     01 26 66 56 |  if_ne	neg	local01, #1
217b0     A7 26 62 FC | 	wrlong	local01, fp
217b4     44 02 90 FD | 	jmp	#LR__2623
217b8                 | LR__2615
217b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
217b8     08 4E 05 F1 | 	add	fp, #8
217bc     A7 26 02 FB | 	rdlong	local01, fp
217c0     08 4E 85 F1 | 	sub	fp, #8
217c4     1C 26 0E F2 | 	cmp	local01, #28 wz
217c8     14 4E 05 A1 |  if_e	add	fp, #20
217cc     A7 2C 02 AB |  if_e	rdlong	local04, fp
217d0     14 4E 85 A1 |  if_e	sub	fp, #20
217d4     16 2B 02 A6 |  if_e	mov	local03, local04
217d8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
217dc     24 00 90 5D |  if_ne	jmp	#LR__2616
217e0     00 26 06 F6 | 	mov	local01, #0
217e4     A7 28 02 FB | 	rdlong	local02, fp
217e8     0C 4E 05 F1 | 	add	fp, #12
217ec     A7 2A 02 FB | 	rdlong	local03, fp
217f0     0C 4E 85 F1 | 	sub	fp, #12
217f4     15 29 0A F2 | 	cmp	local02, local03 wz
217f8     01 26 66 56 |  if_ne	neg	local01, #1
217fc     A7 26 62 FC | 	wrlong	local01, fp
21800     F8 01 90 FD | 	jmp	#LR__2623
21804                 | LR__2616
21804                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
21804     08 4E 05 F1 | 	add	fp, #8
21808     A7 26 02 FB | 	rdlong	local01, fp
2180c     08 4E 85 F1 | 	sub	fp, #8
21810     1D 26 0E F2 | 	cmp	local01, #29 wz
21814     14 4E 05 A1 |  if_e	add	fp, #20
21818     A7 2C 02 AB |  if_e	rdlong	local04, fp
2181c     14 4E 85 A1 |  if_e	sub	fp, #20
21820     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
21824     34 00 90 5D |  if_ne	jmp	#LR__2617
21828     00 26 06 F6 | 	mov	local01, #0
2182c     A7 12 02 FB | 	rdlong	arg01, fp
21830     58 93 B0 FD | 	call	#__system___float_fromuns
21834     FD 12 02 F6 | 	mov	arg01, result1
21838     0C 4E 05 F1 | 	add	fp, #12
2183c     A7 14 02 FB | 	rdlong	arg02, fp
21840     0C 4E 85 F1 | 	sub	fp, #12
21844     01 16 06 F6 | 	mov	arg03, #1
21848     78 9B B0 FD | 	call	#__system___float_cmp
2184c     00 FA 0D F2 | 	cmp	result1, #0 wz
21850     00 26 26 56 |  if_ne	not	local01, #0
21854     A7 26 62 FC | 	wrlong	local01, fp
21858     A0 01 90 FD | 	jmp	#LR__2623
2185c                 | LR__2617
2185c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
2185c     08 4E 05 F1 | 	add	fp, #8
21860     A7 26 02 FB | 	rdlong	local01, fp
21864     08 4E 85 F1 | 	sub	fp, #8
21868     1D 26 0E F2 | 	cmp	local01, #29 wz
2186c     14 4E 05 A1 |  if_e	add	fp, #20
21870     A7 2A 02 AB |  if_e	rdlong	local03, fp
21874     14 4E 85 A1 |  if_e	sub	fp, #20
21878     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
2187c     24 00 90 5D |  if_ne	jmp	#LR__2618
21880     00 26 06 F6 | 	mov	local01, #0
21884     A7 28 02 FB | 	rdlong	local02, fp
21888     0C 4E 05 F1 | 	add	fp, #12
2188c     A7 2A 02 FB | 	rdlong	local03, fp
21890     0C 4E 85 F1 | 	sub	fp, #12
21894     15 29 0A F2 | 	cmp	local02, local03 wz
21898     01 26 66 56 |  if_ne	neg	local01, #1
2189c     A7 26 62 FC | 	wrlong	local01, fp
218a0     58 01 90 FD | 	jmp	#LR__2623
218a4                 | LR__2618
218a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
218a4     08 4E 05 F1 | 	add	fp, #8
218a8     A7 26 02 FB | 	rdlong	local01, fp
218ac     08 4E 85 F1 | 	sub	fp, #8
218b0     1D 26 0E F2 | 	cmp	local01, #29 wz
218b4     14 4E 05 A1 |  if_e	add	fp, #20
218b8     A7 2A 02 AB |  if_e	rdlong	local03, fp
218bc     14 4E 85 A1 |  if_e	sub	fp, #20
218c0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
218c4     24 00 90 5D |  if_ne	jmp	#LR__2619
218c8     00 26 06 F6 | 	mov	local01, #0
218cc     A7 28 02 FB | 	rdlong	local02, fp
218d0     0C 4E 05 F1 | 	add	fp, #12
218d4     A7 2A 02 FB | 	rdlong	local03, fp
218d8     0C 4E 85 F1 | 	sub	fp, #12
218dc     15 29 0A F2 | 	cmp	local02, local03 wz
218e0     01 26 66 56 |  if_ne	neg	local01, #1
218e4     A7 26 62 FC | 	wrlong	local01, fp
218e8     10 01 90 FD | 	jmp	#LR__2623
218ec                 | LR__2619
218ec                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
218ec     08 4E 05 F1 | 	add	fp, #8
218f0     A7 26 02 FB | 	rdlong	local01, fp
218f4     08 4E 85 F1 | 	sub	fp, #8
218f8     2B 26 0E F2 | 	cmp	local01, #43 wz
218fc     14 4E 05 A1 |  if_e	add	fp, #20
21900     A7 2A 02 AB |  if_e	rdlong	local03, fp
21904     14 4E 85 A1 |  if_e	sub	fp, #20
21908     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
2190c     30 00 90 5D |  if_ne	jmp	#LR__2620
21910     00 26 06 F6 | 	mov	local01, #0
21914     A7 12 02 FB | 	rdlong	arg01, fp
21918     7C C0 BE FD | 	call	#_convertstring
2191c     FD 12 02 F6 | 	mov	arg01, result1
21920     0C 4E 05 F1 | 	add	fp, #12
21924     A7 14 02 FB | 	rdlong	arg02, fp
21928     0C 4E 85 F1 | 	sub	fp, #12
2192c     0C 68 B0 FD | 	call	#__system___string_cmp
21930     00 FA 0D F2 | 	cmp	result1, #0 wz
21934     00 26 26 56 |  if_ne	not	local01, #0
21938     A7 26 62 FC | 	wrlong	local01, fp
2193c     BC 00 90 FD | 	jmp	#LR__2623
21940                 | LR__2620
21940                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
21940     08 4E 05 F1 | 	add	fp, #8
21944     A7 26 02 FB | 	rdlong	local01, fp
21948     08 4E 85 F1 | 	sub	fp, #8
2194c     1F 26 0E F2 | 	cmp	local01, #31 wz
21950     14 4E 05 A1 |  if_e	add	fp, #20
21954     A7 2A 02 AB |  if_e	rdlong	local03, fp
21958     14 4E 85 A1 |  if_e	sub	fp, #20
2195c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
21960     34 00 90 5D |  if_ne	jmp	#LR__2621
21964     00 26 06 F6 | 	mov	local01, #0
21968     A7 28 02 FB | 	rdlong	local02, fp
2196c     0C 4E 05 F1 | 	add	fp, #12
21970     A7 12 02 FB | 	rdlong	arg01, fp
21974     0C 4E 85 F1 | 	sub	fp, #12
21978     1C C0 BE FD | 	call	#_convertstring
2197c     FD 14 02 F6 | 	mov	arg02, result1
21980     14 13 02 F6 | 	mov	arg01, local02
21984     B4 67 B0 FD | 	call	#__system___string_cmp
21988     00 FA 0D F2 | 	cmp	result1, #0 wz
2198c     00 26 26 56 |  if_ne	not	local01, #0
21990     A7 26 62 FC | 	wrlong	local01, fp
21994     64 00 90 FD | 	jmp	#LR__2623
21998                 | LR__2621
21998                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
21998     08 4E 05 F1 | 	add	fp, #8
2199c     A7 26 02 FB | 	rdlong	local01, fp
219a0     08 4E 85 F1 | 	sub	fp, #8
219a4     2B 26 0E F2 | 	cmp	local01, #43 wz
219a8     14 4E 05 A1 |  if_e	add	fp, #20
219ac     A7 2A 02 AB |  if_e	rdlong	local03, fp
219b0     14 4E 85 A1 |  if_e	sub	fp, #20
219b4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
219b8     3C 00 90 5D |  if_ne	jmp	#LR__2622
219bc     00 26 06 F6 | 	mov	local01, #0
219c0     A7 12 02 FB | 	rdlong	arg01, fp
219c4     D0 BF BE FD | 	call	#_convertstring
219c8     FD 28 02 F6 | 	mov	local02, result1
219cc     0C 4E 05 F1 | 	add	fp, #12
219d0     A7 12 02 FB | 	rdlong	arg01, fp
219d4     0C 4E 85 F1 | 	sub	fp, #12
219d8     BC BF BE FD | 	call	#_convertstring
219dc     FD 14 02 F6 | 	mov	arg02, result1
219e0     14 13 02 F6 | 	mov	arg01, local02
219e4     54 67 B0 FD | 	call	#__system___string_cmp
219e8     00 FA 0D F2 | 	cmp	result1, #0 wz
219ec     00 26 26 56 |  if_ne	not	local01, #0
219f0     A7 26 62 FC | 	wrlong	local01, fp
219f4     04 00 90 FD | 	jmp	#LR__2623
219f8                 | LR__2622
219f8     A7 00 68 FC | 	wrlong	#0, fp
219fc                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
219fc                 | LR__2623
219fc     08 4E 05 F1 | 	add	fp, #8
21a00     A7 38 68 FC | 	wrlong	#28, fp
21a04     08 4E 85 F1 | 	sub	fp, #8
21a08     A7 12 02 F6 | 	mov	arg01, fp
21a0c     A8 BE BE FD | 	call	#_push
21a10     A7 F0 03 F6 | 	mov	ptra, fp
21a14     B2 00 A0 FD | 	call	#popregs_
21a18                 | _do_ne_ret
21a18     2D 00 64 FD | 	ret
21a1c                 | 
21a1c                 | ' 
21a1c                 | ' '--------------------------------- OR
21a1c                 | ' 
21a1c                 | ' sub do_or 
21a1c                 | _do_or
21a1c     03 4A 05 F6 | 	mov	COUNT_, #3
21a20     A8 00 A0 FD | 	call	#pushregs_
21a24     18 F0 07 F1 | 	add	ptra, #24
21a28     F4 BD BE FD | 	call	#_pop
21a2c     FD 12 02 F6 | 	mov	arg01, result1
21a30     FE 26 02 F6 | 	mov	local01, result2
21a34     FF 28 02 F6 | 	mov	local02, result3
21a38     0C 4E 05 F1 | 	add	fp, #12
21a3c     A7 12 62 FC | 	wrlong	arg01, fp
21a40     04 4E 05 F1 | 	add	fp, #4
21a44     A7 26 62 FC | 	wrlong	local01, fp
21a48     04 4E 05 F1 | 	add	fp, #4
21a4c     A7 28 62 FC | 	wrlong	local02, fp
21a50     14 4E 85 F1 | 	sub	fp, #20
21a54     C8 BD BE FD | 	call	#_pop
21a58     FF 2A 02 F6 | 	mov	local03, result3
21a5c     A7 FA 61 FC | 	wrlong	result1, fp
21a60     04 4E 05 F1 | 	add	fp, #4
21a64     A7 FC 61 FC | 	wrlong	result2, fp
21a68     04 4E 05 F1 | 	add	fp, #4
21a6c     A7 2A 62 FC | 	wrlong	local03, fp
21a70                 | ' 
21a70                 | ' t2=pop()
21a70                 | ' t1=pop()
21a70                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
21a70     08 4E 85 F1 | 	sub	fp, #8
21a74     1C 2A 0E F2 | 	cmp	local03, #28 wz
21a78     A7 2A 02 AB |  if_e	rdlong	local03, fp
21a7c     A7 2A 62 AC |  if_e	wrlong	local03, fp
21a80     08 4E 05 A1 |  if_e	add	fp, #8
21a84     A7 3A 68 AC |  if_e	wrlong	#29, fp
21a88     08 4E 85 A1 |  if_e	sub	fp, #8
21a8c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
21a8c     14 4E 05 F1 | 	add	fp, #20
21a90     A7 2A 02 FB | 	rdlong	local03, fp
21a94     14 4E 85 F1 | 	sub	fp, #20
21a98     1C 2A 0E F2 | 	cmp	local03, #28 wz
21a9c     18 00 90 5D |  if_ne	jmp	#LR__2630
21aa0     0C 4E 05 F1 | 	add	fp, #12
21aa4     A7 2A 02 FB | 	rdlong	local03, fp
21aa8     A7 2A 62 FC | 	wrlong	local03, fp
21aac     08 4E 05 F1 | 	add	fp, #8
21ab0     A7 3A 68 FC | 	wrlong	#29, fp
21ab4     14 4E 85 F1 | 	sub	fp, #20
21ab8                 | LR__2630
21ab8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
21ab8     08 4E 05 F1 | 	add	fp, #8
21abc     A7 2A 02 FB | 	rdlong	local03, fp
21ac0     08 4E 85 F1 | 	sub	fp, #8
21ac4     1F 2A 0E F2 | 	cmp	local03, #31 wz
21ac8     14 4E 05 51 |  if_ne	add	fp, #20
21acc     A7 28 02 5B |  if_ne	rdlong	local02, fp
21ad0     14 4E 85 51 |  if_ne	sub	fp, #20
21ad4     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
21ad8     08 4E 05 51 |  if_ne	add	fp, #8
21adc     A7 2A 02 5B |  if_ne	rdlong	local03, fp
21ae0     08 4E 85 51 |  if_ne	sub	fp, #8
21ae4     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
21ae8     14 4E 05 51 |  if_ne	add	fp, #20
21aec     14 4E 85 51 |  if_ne	sub	fp, #20
21af0     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
21af4     A7 0C 68 AC |  if_e	wrlong	#6, fp
21af8     08 4E 05 A1 |  if_e	add	fp, #8
21afc     A7 FE 69 AC |  if_e	wrlong	#255, fp
21b00     08 4E 85 A1 |  if_e	sub	fp, #8
21b04     18 00 90 AD |  if_e	jmp	#LR__2631
21b08     A7 2A 02 FB | 	rdlong	local03, fp
21b0c     0C 4E 05 F1 | 	add	fp, #12
21b10     A7 26 02 FB | 	rdlong	local01, fp
21b14     0C 4E 85 F1 | 	sub	fp, #12
21b18     13 2B 42 F5 | 	or	local03, local01
21b1c     A7 2A 62 FC | 	wrlong	local03, fp
21b20                 | LR__2631
21b20     A7 12 02 F6 | 	mov	arg01, fp
21b24     90 BD BE FD | 	call	#_push
21b28     A7 F0 03 F6 | 	mov	ptra, fp
21b2c     B2 00 A0 FD | 	call	#popregs_
21b30                 | _do_or_ret
21b30     2D 00 64 FD | 	ret
21b34                 | 
21b34                 | ' 
21b34                 | ' '--------------------------------- plus (+)
21b34                 | ' 
21b34                 | ' sub do_plus 
21b34                 | _do_plus
21b34     05 4A 05 F6 | 	mov	COUNT_, #5
21b38     A8 00 A0 FD | 	call	#pushregs_
21b3c     18 F0 07 F1 | 	add	ptra, #24
21b40     DC BC BE FD | 	call	#_pop
21b44     FD 26 02 F6 | 	mov	local01, result1
21b48     FE 28 02 F6 | 	mov	local02, result2
21b4c     FF 2A 02 F6 | 	mov	local03, result3
21b50     0C 4E 05 F1 | 	add	fp, #12
21b54     A7 26 62 FC | 	wrlong	local01, fp
21b58     04 4E 05 F1 | 	add	fp, #4
21b5c     A7 28 62 FC | 	wrlong	local02, fp
21b60     04 4E 05 F1 | 	add	fp, #4
21b64     A7 2A 62 FC | 	wrlong	local03, fp
21b68     14 4E 85 F1 | 	sub	fp, #20
21b6c     B0 BC BE FD | 	call	#_pop
21b70     FF 2A 02 F6 | 	mov	local03, result3
21b74     A7 FA 61 FC | 	wrlong	result1, fp
21b78     04 4E 05 F1 | 	add	fp, #4
21b7c     A7 FC 61 FC | 	wrlong	result2, fp
21b80     04 4E 05 F1 | 	add	fp, #4
21b84     A7 2A 62 FC | 	wrlong	local03, fp
21b88                 | ' 
21b88                 | ' t2=pop()
21b88                 | ' t1=pop()
21b88                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
21b88     08 4E 85 F1 | 	sub	fp, #8
21b8c     1D 2A 0E F2 | 	cmp	local03, #29 wz
21b90     14 4E 05 A1 |  if_e	add	fp, #20
21b94     A7 2C 02 AB |  if_e	rdlong	local04, fp
21b98     14 4E 85 A1 |  if_e	sub	fp, #20
21b9c     16 2B 02 A6 |  if_e	mov	local03, local04
21ba0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
21ba4     1C 00 90 5D |  if_ne	jmp	#LR__2640
21ba8     A7 26 02 FB | 	rdlong	local01, fp
21bac     0C 4E 05 F1 | 	add	fp, #12
21bb0     A7 28 02 FB | 	rdlong	local02, fp
21bb4     0C 4E 85 F1 | 	sub	fp, #12
21bb8     14 27 02 F1 | 	add	local01, local02
21bbc     A7 26 62 FC | 	wrlong	local01, fp
21bc0     48 04 90 FD | 	jmp	#LR__2655
21bc4                 | LR__2640
21bc4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
21bc4     08 4E 05 F1 | 	add	fp, #8
21bc8     A7 26 02 FB | 	rdlong	local01, fp
21bcc     08 4E 85 F1 | 	sub	fp, #8
21bd0     1D 26 0E F2 | 	cmp	local01, #29 wz
21bd4     14 4E 05 A1 |  if_e	add	fp, #20
21bd8     A7 2C 02 AB |  if_e	rdlong	local04, fp
21bdc     14 4E 85 A1 |  if_e	sub	fp, #20
21be0     16 2B 02 A6 |  if_e	mov	local03, local04
21be4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
21be8     28 00 90 5D |  if_ne	jmp	#LR__2641
21bec     A7 26 02 FB | 	rdlong	local01, fp
21bf0     0C 4E 05 F1 | 	add	fp, #12
21bf4     A7 28 02 FB | 	rdlong	local02, fp
21bf8     0C 4E 85 F1 | 	sub	fp, #12
21bfc     14 27 02 F1 | 	add	local01, local02
21c00     A7 26 62 FC | 	wrlong	local01, fp
21c04     08 4E 05 F1 | 	add	fp, #8
21c08     A7 38 68 FC | 	wrlong	#28, fp
21c0c     08 4E 85 F1 | 	sub	fp, #8
21c10     F8 03 90 FD | 	jmp	#LR__2655
21c14                 | LR__2641
21c14                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
21c14     08 4E 05 F1 | 	add	fp, #8
21c18     A7 26 02 FB | 	rdlong	local01, fp
21c1c     08 4E 85 F1 | 	sub	fp, #8
21c20     1D 26 0E F2 | 	cmp	local01, #29 wz
21c24     14 4E 05 A1 |  if_e	add	fp, #20
21c28     A7 2C 02 AB |  if_e	rdlong	local04, fp
21c2c     14 4E 85 A1 |  if_e	sub	fp, #20
21c30     16 2B 02 A6 |  if_e	mov	local03, local04
21c34     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
21c38     30 00 90 5D |  if_ne	jmp	#LR__2642
21c3c     A7 12 02 FB | 	rdlong	arg01, fp
21c40     48 8F B0 FD | 	call	#__system___float_fromuns
21c44     FD 12 02 F6 | 	mov	arg01, result1
21c48     0C 4E 05 F1 | 	add	fp, #12
21c4c     A7 14 02 FB | 	rdlong	arg02, fp
21c50     0C 4E 85 F1 | 	sub	fp, #12
21c54     68 8F B0 FD | 	call	#__system___float_add
21c58     A7 FA 61 FC | 	wrlong	result1, fp
21c5c     08 4E 05 F1 | 	add	fp, #8
21c60     A7 3C 68 FC | 	wrlong	#30, fp
21c64     08 4E 85 F1 | 	sub	fp, #8
21c68     A0 03 90 FD | 	jmp	#LR__2655
21c6c                 | LR__2642
21c6c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
21c6c     08 4E 05 F1 | 	add	fp, #8
21c70     A7 26 02 FB | 	rdlong	local01, fp
21c74     08 4E 85 F1 | 	sub	fp, #8
21c78     1C 26 0E F2 | 	cmp	local01, #28 wz
21c7c     14 4E 05 A1 |  if_e	add	fp, #20
21c80     A7 2C 02 AB |  if_e	rdlong	local04, fp
21c84     14 4E 85 A1 |  if_e	sub	fp, #20
21c88     16 2B 02 A6 |  if_e	mov	local03, local04
21c8c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
21c90     1C 00 90 5D |  if_ne	jmp	#LR__2643
21c94     A7 26 02 FB | 	rdlong	local01, fp
21c98     0C 4E 05 F1 | 	add	fp, #12
21c9c     A7 28 02 FB | 	rdlong	local02, fp
21ca0     0C 4E 85 F1 | 	sub	fp, #12
21ca4     14 27 02 F1 | 	add	local01, local02
21ca8     A7 26 62 FC | 	wrlong	local01, fp
21cac     5C 03 90 FD | 	jmp	#LR__2655
21cb0                 | LR__2643
21cb0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
21cb0     08 4E 05 F1 | 	add	fp, #8
21cb4     A7 26 02 FB | 	rdlong	local01, fp
21cb8     08 4E 85 F1 | 	sub	fp, #8
21cbc     1C 26 0E F2 | 	cmp	local01, #28 wz
21cc0     14 4E 05 A1 |  if_e	add	fp, #20
21cc4     A7 2C 02 AB |  if_e	rdlong	local04, fp
21cc8     14 4E 85 A1 |  if_e	sub	fp, #20
21ccc     16 2B 02 A6 |  if_e	mov	local03, local04
21cd0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
21cd4     1C 00 90 5D |  if_ne	jmp	#LR__2644
21cd8     A7 26 02 FB | 	rdlong	local01, fp
21cdc     0C 4E 05 F1 | 	add	fp, #12
21ce0     A7 28 02 FB | 	rdlong	local02, fp
21ce4     0C 4E 85 F1 | 	sub	fp, #12
21ce8     14 27 02 F1 | 	add	local01, local02
21cec     A7 26 62 FC | 	wrlong	local01, fp
21cf0     18 03 90 FD | 	jmp	#LR__2655
21cf4                 | LR__2644
21cf4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
21cf4     08 4E 05 F1 | 	add	fp, #8
21cf8     A7 26 02 FB | 	rdlong	local01, fp
21cfc     08 4E 85 F1 | 	sub	fp, #8
21d00     1C 26 0E F2 | 	cmp	local01, #28 wz
21d04     14 4E 05 A1 |  if_e	add	fp, #20
21d08     A7 2C 02 AB |  if_e	rdlong	local04, fp
21d0c     14 4E 85 A1 |  if_e	sub	fp, #20
21d10     16 2B 02 A6 |  if_e	mov	local03, local04
21d14     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
21d18     40 00 90 5D |  if_ne	jmp	#LR__2645
21d1c     A7 12 02 FB | 	rdlong	arg01, fp
21d20     09 13 52 F6 | 	abs	arg01, arg01 wc
21d24     1F 2E C6 C9 |  if_b	decod	local05, #31
21d28     00 2E 06 36 |  if_ae	mov	local05, #0
21d2c     5C 8E B0 FD | 	call	#__system___float_fromuns
21d30     17 FB 61 F5 | 	xor	result1, local05
21d34     FD 12 02 F6 | 	mov	arg01, result1
21d38     0C 4E 05 F1 | 	add	fp, #12
21d3c     A7 14 02 FB | 	rdlong	arg02, fp
21d40     0C 4E 85 F1 | 	sub	fp, #12
21d44     78 8E B0 FD | 	call	#__system___float_add
21d48     A7 FA 61 FC | 	wrlong	result1, fp
21d4c     08 4E 05 F1 | 	add	fp, #8
21d50     A7 3C 68 FC | 	wrlong	#30, fp
21d54     08 4E 85 F1 | 	sub	fp, #8
21d58     B0 02 90 FD | 	jmp	#LR__2655
21d5c                 | LR__2645
21d5c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
21d5c     08 4E 05 F1 | 	add	fp, #8
21d60     A7 26 02 FB | 	rdlong	local01, fp
21d64     08 4E 85 F1 | 	sub	fp, #8
21d68     1E 26 0E F2 | 	cmp	local01, #30 wz
21d6c     14 4E 05 A1 |  if_e	add	fp, #20
21d70     A7 2C 02 AB |  if_e	rdlong	local04, fp
21d74     14 4E 85 A1 |  if_e	sub	fp, #20
21d78     16 2B 02 A6 |  if_e	mov	local03, local04
21d7c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
21d80     28 00 90 5D |  if_ne	jmp	#LR__2646
21d84     A7 26 02 FB | 	rdlong	local01, fp
21d88     0C 4E 05 F1 | 	add	fp, #12
21d8c     A7 12 02 FB | 	rdlong	arg01, fp
21d90     0C 4E 85 F1 | 	sub	fp, #12
21d94     F4 8D B0 FD | 	call	#__system___float_fromuns
21d98     FD 14 02 F6 | 	mov	arg02, result1
21d9c     13 13 02 F6 | 	mov	arg01, local01
21da0     1C 8E B0 FD | 	call	#__system___float_add
21da4     A7 FA 61 FC | 	wrlong	result1, fp
21da8     60 02 90 FD | 	jmp	#LR__2655
21dac                 | LR__2646
21dac                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
21dac     08 4E 05 F1 | 	add	fp, #8
21db0     A7 26 02 FB | 	rdlong	local01, fp
21db4     08 4E 85 F1 | 	sub	fp, #8
21db8     1E 26 0E F2 | 	cmp	local01, #30 wz
21dbc     14 4E 05 A1 |  if_e	add	fp, #20
21dc0     A7 2C 02 AB |  if_e	rdlong	local04, fp
21dc4     14 4E 85 A1 |  if_e	sub	fp, #20
21dc8     16 2B 02 A6 |  if_e	mov	local03, local04
21dcc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
21dd0     38 00 90 5D |  if_ne	jmp	#LR__2647
21dd4     A7 26 02 FB | 	rdlong	local01, fp
21dd8     0C 4E 05 F1 | 	add	fp, #12
21ddc     A7 12 02 FB | 	rdlong	arg01, fp
21de0     0C 4E 85 F1 | 	sub	fp, #12
21de4     09 13 52 F6 | 	abs	arg01, arg01 wc
21de8     1F 2E C6 C9 |  if_b	decod	local05, #31
21dec     00 2E 06 36 |  if_ae	mov	local05, #0
21df0     98 8D B0 FD | 	call	#__system___float_fromuns
21df4     17 FB 61 F5 | 	xor	result1, local05
21df8     FD 14 02 F6 | 	mov	arg02, result1
21dfc     13 13 02 F6 | 	mov	arg01, local01
21e00     BC 8D B0 FD | 	call	#__system___float_add
21e04     A7 FA 61 FC | 	wrlong	result1, fp
21e08     00 02 90 FD | 	jmp	#LR__2655
21e0c                 | LR__2647
21e0c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
21e0c     08 4E 05 F1 | 	add	fp, #8
21e10     A7 26 02 FB | 	rdlong	local01, fp
21e14     08 4E 85 F1 | 	sub	fp, #8
21e18     1E 26 0E F2 | 	cmp	local01, #30 wz
21e1c     14 4E 05 A1 |  if_e	add	fp, #20
21e20     A7 2C 02 AB |  if_e	rdlong	local04, fp
21e24     14 4E 85 A1 |  if_e	sub	fp, #20
21e28     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
21e2c     1C 00 90 5D |  if_ne	jmp	#LR__2648
21e30     A7 12 02 FB | 	rdlong	arg01, fp
21e34     0C 4E 05 F1 | 	add	fp, #12
21e38     A7 14 02 FB | 	rdlong	arg02, fp
21e3c     0C 4E 85 F1 | 	sub	fp, #12
21e40     7C 8D B0 FD | 	call	#__system___float_add
21e44     A7 FA 61 FC | 	wrlong	result1, fp
21e48     C0 01 90 FD | 	jmp	#LR__2655
21e4c                 | LR__2648
21e4c                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
21e4c     08 4E 05 F1 | 	add	fp, #8
21e50     A7 26 02 FB | 	rdlong	local01, fp
21e54     08 4E 85 F1 | 	sub	fp, #8
21e58     1F 26 0E F2 | 	cmp	local01, #31 wz
21e5c     24 00 90 5D |  if_ne	jmp	#LR__2649
21e60     14 4E 05 F1 | 	add	fp, #20
21e64     A7 2A 02 FB | 	rdlong	local03, fp
21e68     14 4E 85 F1 | 	sub	fp, #20
21e6c     1F 2A 0E F2 | 	cmp	local03, #31 wz
21e70     A7 04 68 5C |  if_ne	wrlong	#2, fp
21e74     08 4E 05 51 |  if_ne	add	fp, #8
21e78     A7 FE 69 5C |  if_ne	wrlong	#255, fp
21e7c     08 4E 85 51 |  if_ne	sub	fp, #8
21e80     88 01 90 5D |  if_ne	jmp	#LR__2655
21e84                 | LR__2649
21e84                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
21e84     14 4E 05 F1 | 	add	fp, #20
21e88     A7 26 02 FB | 	rdlong	local01, fp
21e8c     14 4E 85 F1 | 	sub	fp, #20
21e90     1F 26 0E F2 | 	cmp	local01, #31 wz
21e94     24 00 90 5D |  if_ne	jmp	#LR__2650
21e98     08 4E 05 F1 | 	add	fp, #8
21e9c     A7 2A 02 FB | 	rdlong	local03, fp
21ea0     08 4E 85 F1 | 	sub	fp, #8
21ea4     1F 2A 0E F2 | 	cmp	local03, #31 wz
21ea8     A7 04 68 5C |  if_ne	wrlong	#2, fp
21eac     08 4E 05 51 |  if_ne	add	fp, #8
21eb0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
21eb4     08 4E 85 51 |  if_ne	sub	fp, #8
21eb8     50 01 90 5D |  if_ne	jmp	#LR__2655
21ebc                 | LR__2650
21ebc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
21ebc     08 4E 05 F1 | 	add	fp, #8
21ec0     A7 26 02 FB | 	rdlong	local01, fp
21ec4     08 4E 85 F1 | 	sub	fp, #8
21ec8     1F 26 0E F2 | 	cmp	local01, #31 wz
21ecc     14 4E 05 A1 |  if_e	add	fp, #20
21ed0     A7 2A 02 AB |  if_e	rdlong	local03, fp
21ed4     14 4E 85 A1 |  if_e	sub	fp, #20
21ed8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
21edc     1C 00 90 5D |  if_ne	jmp	#LR__2651
21ee0     A7 12 02 FB | 	rdlong	arg01, fp
21ee4     0C 4E 05 F1 | 	add	fp, #12
21ee8     A7 14 02 FB | 	rdlong	arg02, fp
21eec     0C 4E 85 F1 | 	sub	fp, #12
21ef0     7C 62 B0 FD | 	call	#__system___string_concat
21ef4     A7 FA 61 FC | 	wrlong	result1, fp
21ef8     10 01 90 FD | 	jmp	#LR__2655
21efc                 | LR__2651
21efc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
21efc     08 4E 05 F1 | 	add	fp, #8
21f00     A7 26 02 FB | 	rdlong	local01, fp
21f04     08 4E 85 F1 | 	sub	fp, #8
21f08     2B 26 0E F2 | 	cmp	local01, #43 wz
21f0c     14 4E 05 A1 |  if_e	add	fp, #20
21f10     A7 2A 02 AB |  if_e	rdlong	local03, fp
21f14     14 4E 85 A1 |  if_e	sub	fp, #20
21f18     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
21f1c     30 00 90 5D |  if_ne	jmp	#LR__2652
21f20     A7 12 02 FB | 	rdlong	arg01, fp
21f24     70 BA BE FD | 	call	#_convertstring
21f28     FD 12 02 F6 | 	mov	arg01, result1
21f2c     0C 4E 05 F1 | 	add	fp, #12
21f30     A7 14 02 FB | 	rdlong	arg02, fp
21f34     0C 4E 85 F1 | 	sub	fp, #12
21f38     34 62 B0 FD | 	call	#__system___string_concat
21f3c     A7 FA 61 FC | 	wrlong	result1, fp
21f40     08 4E 05 F1 | 	add	fp, #8
21f44     A7 3E 68 FC | 	wrlong	#31, fp
21f48     08 4E 85 F1 | 	sub	fp, #8
21f4c     BC 00 90 FD | 	jmp	#LR__2655
21f50                 | LR__2652
21f50                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
21f50     08 4E 05 F1 | 	add	fp, #8
21f54     A7 26 02 FB | 	rdlong	local01, fp
21f58     08 4E 85 F1 | 	sub	fp, #8
21f5c     1F 26 0E F2 | 	cmp	local01, #31 wz
21f60     14 4E 05 A1 |  if_e	add	fp, #20
21f64     A7 2A 02 AB |  if_e	rdlong	local03, fp
21f68     14 4E 85 A1 |  if_e	sub	fp, #20
21f6c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
21f70     28 00 90 5D |  if_ne	jmp	#LR__2653
21f74     A7 26 02 FB | 	rdlong	local01, fp
21f78     0C 4E 05 F1 | 	add	fp, #12
21f7c     A7 12 02 FB | 	rdlong	arg01, fp
21f80     0C 4E 85 F1 | 	sub	fp, #12
21f84     10 BA BE FD | 	call	#_convertstring
21f88     FD 14 02 F6 | 	mov	arg02, result1
21f8c     13 13 02 F6 | 	mov	arg01, local01
21f90     DC 61 B0 FD | 	call	#__system___string_concat
21f94     A7 FA 61 FC | 	wrlong	result1, fp
21f98     70 00 90 FD | 	jmp	#LR__2655
21f9c                 | LR__2653
21f9c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
21f9c     08 4E 05 F1 | 	add	fp, #8
21fa0     A7 26 02 FB | 	rdlong	local01, fp
21fa4     08 4E 85 F1 | 	sub	fp, #8
21fa8     2B 26 0E F2 | 	cmp	local01, #43 wz
21fac     14 4E 05 A1 |  if_e	add	fp, #20
21fb0     A7 2A 02 AB |  if_e	rdlong	local03, fp
21fb4     14 4E 85 A1 |  if_e	sub	fp, #20
21fb8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
21fbc     3C 00 90 5D |  if_ne	jmp	#LR__2654
21fc0     A7 12 02 FB | 	rdlong	arg01, fp
21fc4     D0 B9 BE FD | 	call	#_convertstring
21fc8     FD 26 02 F6 | 	mov	local01, result1
21fcc     0C 4E 05 F1 | 	add	fp, #12
21fd0     A7 12 02 FB | 	rdlong	arg01, fp
21fd4     0C 4E 85 F1 | 	sub	fp, #12
21fd8     BC B9 BE FD | 	call	#_convertstring
21fdc     FD 14 02 F6 | 	mov	arg02, result1
21fe0     13 13 02 F6 | 	mov	arg01, local01
21fe4     88 61 B0 FD | 	call	#__system___string_concat
21fe8     A7 FA 61 FC | 	wrlong	result1, fp
21fec     08 4E 05 F1 | 	add	fp, #8
21ff0     A7 3E 68 FC | 	wrlong	#31, fp
21ff4     08 4E 85 F1 | 	sub	fp, #8
21ff8     10 00 90 FD | 	jmp	#LR__2655
21ffc                 | LR__2654
21ffc     A7 08 68 FC | 	wrlong	#4, fp
22000     08 4E 05 F1 | 	add	fp, #8
22004     A7 FE 69 FC | 	wrlong	#255, fp
22008     08 4E 85 F1 | 	sub	fp, #8
2200c                 | LR__2655
2200c     A7 12 02 F6 | 	mov	arg01, fp
22010     A4 B8 BE FD | 	call	#_push
22014     A7 F0 03 F6 | 	mov	ptra, fp
22018     B2 00 A0 FD | 	call	#popregs_
2201c                 | _do_plus_ret
2201c     2D 00 64 FD | 	ret
22020                 | 
22020                 | ' 
22020                 | ' '--------------------------------- power (^)
22020                 | ' 
22020                 | ' sub do_power 
22020                 | _do_power
22020     02 4A 05 F6 | 	mov	COUNT_, #2
22024     A8 00 A0 FD | 	call	#pushregs_
22028     18 F0 07 F1 | 	add	ptra, #24
2202c     F0 B7 BE FD | 	call	#_pop
22030     FD 14 02 F6 | 	mov	arg02, result1
22034     FE 12 02 F6 | 	mov	arg01, result2
22038     FF 26 02 F6 | 	mov	local01, result3
2203c     0C 4E 05 F1 | 	add	fp, #12
22040     A7 14 62 FC | 	wrlong	arg02, fp
22044     04 4E 05 F1 | 	add	fp, #4
22048     A7 12 62 FC | 	wrlong	arg01, fp
2204c     04 4E 05 F1 | 	add	fp, #4
22050     A7 26 62 FC | 	wrlong	local01, fp
22054     14 4E 85 F1 | 	sub	fp, #20
22058     C4 B7 BE FD | 	call	#_pop
2205c     A7 FA 61 FC | 	wrlong	result1, fp
22060     04 4E 05 F1 | 	add	fp, #4
22064     A7 FC 61 FC | 	wrlong	result2, fp
22068     04 4E 05 F1 | 	add	fp, #4
2206c     A7 FE 61 FC | 	wrlong	result3, fp
22070                 | ' 
22070                 | ' t2=pop()
22070                 | ' t1=pop()
22070                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
22070     08 4E 85 F1 | 	sub	fp, #8
22074     1F FE 0D F2 | 	cmp	result3, #31 wz
22078     14 4E 05 51 |  if_ne	add	fp, #20
2207c     A7 26 02 5B |  if_ne	rdlong	local01, fp
22080     14 4E 85 51 |  if_ne	sub	fp, #20
22084     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
22088     A7 18 68 AC |  if_e	wrlong	#12, fp
2208c     08 4E 05 A1 |  if_e	add	fp, #8
22090     A7 FE 69 AC |  if_e	wrlong	#255, fp
22094     08 4E 85 A1 |  if_e	sub	fp, #8
22098     38 01 90 AD |  if_e	jmp	#LR__2665
2209c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
2209c     08 4E 05 F1 | 	add	fp, #8
220a0     A7 14 02 FB | 	rdlong	arg02, fp
220a4     08 4E 85 F1 | 	sub	fp, #8
220a8     1C 14 0E F2 | 	cmp	arg02, #28 wz
220ac     28 00 90 5D |  if_ne	jmp	#LR__2660
220b0     08 4E 05 F1 | 	add	fp, #8
220b4     A7 3C 68 FC | 	wrlong	#30, fp
220b8     08 4E 85 F1 | 	sub	fp, #8
220bc     A7 12 02 FB | 	rdlong	arg01, fp
220c0     09 13 52 F6 | 	abs	arg01, arg01 wc
220c4     1F 28 C6 C9 |  if_b	decod	local02, #31
220c8     00 28 06 36 |  if_ae	mov	local02, #0
220cc     BC 8A B0 FD | 	call	#__system___float_fromuns
220d0     14 FB 61 F5 | 	xor	result1, local02
220d4     A7 FA 61 FC | 	wrlong	result1, fp
220d8                 | LR__2660
220d8                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
220d8     08 4E 05 F1 | 	add	fp, #8
220dc     A7 14 02 FB | 	rdlong	arg02, fp
220e0     08 4E 85 F1 | 	sub	fp, #8
220e4     1D 14 0E F2 | 	cmp	arg02, #29 wz
220e8     18 00 90 5D |  if_ne	jmp	#LR__2661
220ec     08 4E 05 F1 | 	add	fp, #8
220f0     A7 3C 68 FC | 	wrlong	#30, fp
220f4     08 4E 85 F1 | 	sub	fp, #8
220f8     A7 12 02 FB | 	rdlong	arg01, fp
220fc     8C 8A B0 FD | 	call	#__system___float_fromuns
22100     A7 FA 61 FC | 	wrlong	result1, fp
22104                 | LR__2661
22104                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
22104     14 4E 05 F1 | 	add	fp, #20
22108     A7 14 02 FB | 	rdlong	arg02, fp
2210c     14 4E 85 F1 | 	sub	fp, #20
22110     1C 14 0E F2 | 	cmp	arg02, #28 wz
22114     34 00 90 5D |  if_ne	jmp	#LR__2662
22118     14 4E 05 F1 | 	add	fp, #20
2211c     A7 3C 68 FC | 	wrlong	#30, fp
22120     08 4E 85 F1 | 	sub	fp, #8
22124     A7 12 02 FB | 	rdlong	arg01, fp
22128     0C 4E 85 F1 | 	sub	fp, #12
2212c     09 13 52 F6 | 	abs	arg01, arg01 wc
22130     1F 28 C6 C9 |  if_b	decod	local02, #31
22134     00 28 06 36 |  if_ae	mov	local02, #0
22138     50 8A B0 FD | 	call	#__system___float_fromuns
2213c     14 FB 61 F5 | 	xor	result1, local02
22140     0C 4E 05 F1 | 	add	fp, #12
22144     A7 FA 61 FC | 	wrlong	result1, fp
22148     0C 4E 85 F1 | 	sub	fp, #12
2214c                 | LR__2662
2214c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
2214c     14 4E 05 F1 | 	add	fp, #20
22150     A7 14 02 FB | 	rdlong	arg02, fp
22154     14 4E 85 F1 | 	sub	fp, #20
22158     1D 14 0E F2 | 	cmp	arg02, #29 wz
2215c     24 00 90 5D |  if_ne	jmp	#LR__2663
22160     14 4E 05 F1 | 	add	fp, #20
22164     A7 3C 68 FC | 	wrlong	#30, fp
22168     08 4E 85 F1 | 	sub	fp, #8
2216c     A7 12 02 FB | 	rdlong	arg01, fp
22170     0C 4E 85 F1 | 	sub	fp, #12
22174     14 8A B0 FD | 	call	#__system___float_fromuns
22178     0C 4E 05 F1 | 	add	fp, #12
2217c     A7 FA 61 FC | 	wrlong	result1, fp
22180     0C 4E 85 F1 | 	sub	fp, #12
22184                 | LR__2663
22184                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
22184     08 4E 05 F1 | 	add	fp, #8
22188     A7 14 02 FB | 	rdlong	arg02, fp
2218c     08 4E 85 F1 | 	sub	fp, #8
22190     1E 14 0E F2 | 	cmp	arg02, #30 wz
22194     14 4E 05 A1 |  if_e	add	fp, #20
22198     A7 26 02 AB |  if_e	rdlong	local01, fp
2219c     14 4E 85 A1 |  if_e	sub	fp, #20
221a0     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
221a4     1C 00 90 5D |  if_ne	jmp	#LR__2664
221a8     A7 12 02 FB | 	rdlong	arg01, fp
221ac     0C 4E 05 F1 | 	add	fp, #12
221b0     A7 14 02 FB | 	rdlong	arg02, fp
221b4     0C 4E 85 F1 | 	sub	fp, #12
221b8     E0 9C B0 FD | 	call	#__system____builtin_powf
221bc     A7 FA 61 FC | 	wrlong	result1, fp
221c0     10 00 90 FD | 	jmp	#LR__2665
221c4                 | LR__2664
221c4     A7 1A 68 FC | 	wrlong	#13, fp
221c8     08 4E 05 F1 | 	add	fp, #8
221cc     A7 FE 69 FC | 	wrlong	#255, fp
221d0     08 4E 85 F1 | 	sub	fp, #8
221d4                 | LR__2665
221d4     A7 12 02 F6 | 	mov	arg01, fp
221d8     DC B6 BE FD | 	call	#_push
221dc     A7 F0 03 F6 | 	mov	ptra, fp
221e0     B2 00 A0 FD | 	call	#popregs_
221e4                 | _do_power_ret
221e4     2D 00 64 FD | 	ret
221e8                 | 
221e8                 | ' 
221e8                 | ' '--------------------------------- SHL
221e8                 | ' 
221e8                 | ' sub do_shl 
221e8                 | _do_shl
221e8     03 4A 05 F6 | 	mov	COUNT_, #3
221ec     A8 00 A0 FD | 	call	#pushregs_
221f0     18 F0 07 F1 | 	add	ptra, #24
221f4     28 B6 BE FD | 	call	#_pop
221f8     FD 12 02 F6 | 	mov	arg01, result1
221fc     FE 26 02 F6 | 	mov	local01, result2
22200     FF 28 02 F6 | 	mov	local02, result3
22204     0C 4E 05 F1 | 	add	fp, #12
22208     A7 12 62 FC | 	wrlong	arg01, fp
2220c     04 4E 05 F1 | 	add	fp, #4
22210     A7 26 62 FC | 	wrlong	local01, fp
22214     04 4E 05 F1 | 	add	fp, #4
22218     A7 28 62 FC | 	wrlong	local02, fp
2221c     14 4E 85 F1 | 	sub	fp, #20
22220     FC B5 BE FD | 	call	#_pop
22224     FF 2A 02 F6 | 	mov	local03, result3
22228     A7 FA 61 FC | 	wrlong	result1, fp
2222c     04 4E 05 F1 | 	add	fp, #4
22230     A7 FC 61 FC | 	wrlong	result2, fp
22234     04 4E 05 F1 | 	add	fp, #4
22238     A7 2A 62 FC | 	wrlong	local03, fp
2223c                 | ' 
2223c                 | ' t2=pop()
2223c                 | ' t1=pop()
2223c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
2223c     08 4E 85 F1 | 	sub	fp, #8
22240     1C 2A 0E F2 | 	cmp	local03, #28 wz
22244     A7 2A 02 AB |  if_e	rdlong	local03, fp
22248     A7 2A 62 AC |  if_e	wrlong	local03, fp
2224c     08 4E 05 A1 |  if_e	add	fp, #8
22250     A7 3A 68 AC |  if_e	wrlong	#29, fp
22254     08 4E 85 A1 |  if_e	sub	fp, #8
22258                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
22258     14 4E 05 F1 | 	add	fp, #20
2225c     A7 2A 02 FB | 	rdlong	local03, fp
22260     14 4E 85 F1 | 	sub	fp, #20
22264     1C 2A 0E F2 | 	cmp	local03, #28 wz
22268     18 00 90 5D |  if_ne	jmp	#LR__2670
2226c     0C 4E 05 F1 | 	add	fp, #12
22270     A7 2A 02 FB | 	rdlong	local03, fp
22274     A7 2A 62 FC | 	wrlong	local03, fp
22278     08 4E 05 F1 | 	add	fp, #8
2227c     A7 3A 68 FC | 	wrlong	#29, fp
22280     14 4E 85 F1 | 	sub	fp, #20
22284                 | LR__2670
22284                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
22284     08 4E 05 F1 | 	add	fp, #8
22288     A7 2A 02 FB | 	rdlong	local03, fp
2228c     08 4E 85 F1 | 	sub	fp, #8
22290     1F 2A 0E F2 | 	cmp	local03, #31 wz
22294     14 4E 05 51 |  if_ne	add	fp, #20
22298     A7 28 02 5B |  if_ne	rdlong	local02, fp
2229c     14 4E 85 51 |  if_ne	sub	fp, #20
222a0     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
222a4     08 4E 05 51 |  if_ne	add	fp, #8
222a8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
222ac     08 4E 85 51 |  if_ne	sub	fp, #8
222b0     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
222b4     14 4E 05 51 |  if_ne	add	fp, #20
222b8     14 4E 85 51 |  if_ne	sub	fp, #20
222bc     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
222c0     A7 0C 68 AC |  if_e	wrlong	#6, fp
222c4     08 4E 05 A1 |  if_e	add	fp, #8
222c8     A7 FE 69 AC |  if_e	wrlong	#255, fp
222cc     08 4E 85 A1 |  if_e	sub	fp, #8
222d0     18 00 90 AD |  if_e	jmp	#LR__2671
222d4     A7 2A 02 FB | 	rdlong	local03, fp
222d8     0C 4E 05 F1 | 	add	fp, #12
222dc     A7 26 02 FB | 	rdlong	local01, fp
222e0     0C 4E 85 F1 | 	sub	fp, #12
222e4     13 2B 62 F0 | 	shl	local03, local01
222e8     A7 2A 62 FC | 	wrlong	local03, fp
222ec                 | LR__2671
222ec     A7 12 02 F6 | 	mov	arg01, fp
222f0     C4 B5 BE FD | 	call	#_push
222f4     A7 F0 03 F6 | 	mov	ptra, fp
222f8     B2 00 A0 FD | 	call	#popregs_
222fc                 | _do_shl_ret
222fc     2D 00 64 FD | 	ret
22300                 | 
22300                 | ' 
22300                 | ' '--------------------------------- SHR
22300                 | ' 
22300                 | ' sub do_shr 
22300                 | _do_shr
22300     03 4A 05 F6 | 	mov	COUNT_, #3
22304     A8 00 A0 FD | 	call	#pushregs_
22308     18 F0 07 F1 | 	add	ptra, #24
2230c     10 B5 BE FD | 	call	#_pop
22310     FD 12 02 F6 | 	mov	arg01, result1
22314     FE 26 02 F6 | 	mov	local01, result2
22318     FF 28 02 F6 | 	mov	local02, result3
2231c     0C 4E 05 F1 | 	add	fp, #12
22320     A7 12 62 FC | 	wrlong	arg01, fp
22324     04 4E 05 F1 | 	add	fp, #4
22328     A7 26 62 FC | 	wrlong	local01, fp
2232c     04 4E 05 F1 | 	add	fp, #4
22330     A7 28 62 FC | 	wrlong	local02, fp
22334     14 4E 85 F1 | 	sub	fp, #20
22338     E4 B4 BE FD | 	call	#_pop
2233c     FF 2A 02 F6 | 	mov	local03, result3
22340     A7 FA 61 FC | 	wrlong	result1, fp
22344     04 4E 05 F1 | 	add	fp, #4
22348     A7 FC 61 FC | 	wrlong	result2, fp
2234c     04 4E 05 F1 | 	add	fp, #4
22350     A7 2A 62 FC | 	wrlong	local03, fp
22354                 | ' 
22354                 | ' t2=pop()
22354                 | ' t1=pop()
22354                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
22354     08 4E 85 F1 | 	sub	fp, #8
22358     1C 2A 0E F2 | 	cmp	local03, #28 wz
2235c     A7 2A 02 AB |  if_e	rdlong	local03, fp
22360     A7 2A 62 AC |  if_e	wrlong	local03, fp
22364     08 4E 05 A1 |  if_e	add	fp, #8
22368     A7 3A 68 AC |  if_e	wrlong	#29, fp
2236c     08 4E 85 A1 |  if_e	sub	fp, #8
22370                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
22370     14 4E 05 F1 | 	add	fp, #20
22374     A7 2A 02 FB | 	rdlong	local03, fp
22378     14 4E 85 F1 | 	sub	fp, #20
2237c     1C 2A 0E F2 | 	cmp	local03, #28 wz
22380     18 00 90 5D |  if_ne	jmp	#LR__2680
22384     0C 4E 05 F1 | 	add	fp, #12
22388     A7 2A 02 FB | 	rdlong	local03, fp
2238c     A7 2A 62 FC | 	wrlong	local03, fp
22390     08 4E 05 F1 | 	add	fp, #8
22394     A7 3A 68 FC | 	wrlong	#29, fp
22398     14 4E 85 F1 | 	sub	fp, #20
2239c                 | LR__2680
2239c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
2239c     08 4E 05 F1 | 	add	fp, #8
223a0     A7 2A 02 FB | 	rdlong	local03, fp
223a4     08 4E 85 F1 | 	sub	fp, #8
223a8     1F 2A 0E F2 | 	cmp	local03, #31 wz
223ac     14 4E 05 51 |  if_ne	add	fp, #20
223b0     A7 28 02 5B |  if_ne	rdlong	local02, fp
223b4     14 4E 85 51 |  if_ne	sub	fp, #20
223b8     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
223bc     08 4E 05 51 |  if_ne	add	fp, #8
223c0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
223c4     08 4E 85 51 |  if_ne	sub	fp, #8
223c8     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
223cc     14 4E 05 51 |  if_ne	add	fp, #20
223d0     14 4E 85 51 |  if_ne	sub	fp, #20
223d4     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
223d8     A7 0C 68 AC |  if_e	wrlong	#6, fp
223dc     08 4E 05 A1 |  if_e	add	fp, #8
223e0     A7 FE 69 AC |  if_e	wrlong	#255, fp
223e4     08 4E 85 A1 |  if_e	sub	fp, #8
223e8     18 00 90 AD |  if_e	jmp	#LR__2681
223ec     A7 2A 02 FB | 	rdlong	local03, fp
223f0     0C 4E 05 F1 | 	add	fp, #12
223f4     A7 26 02 FB | 	rdlong	local01, fp
223f8     0C 4E 85 F1 | 	sub	fp, #12
223fc     13 2B 42 F0 | 	shr	local03, local01
22400     A7 2A 62 FC | 	wrlong	local03, fp
22404                 | LR__2681
22404     A7 12 02 F6 | 	mov	arg01, fp
22408     AC B4 BE FD | 	call	#_push
2240c     A7 F0 03 F6 | 	mov	ptra, fp
22410     B2 00 A0 FD | 	call	#popregs_
22414                 | _do_shr_ret
22414     2D 00 64 FD | 	ret
22418                 | 
22418                 | ' 
22418                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
22418                 | ' 
22418                 | ' ''----------------------------------------------------------------------------------------------------
22418                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
22418                 | ' ''----------------------------------------------------------------------------------------------------
22418                 | ' 
22418                 | ' ''--------------------------- Command function pointers
22418                 | ' 
22418                 | ' sub init_commands
22418                 | _init_commands
22418                 | ' 
22418                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
22418     00 00 06 F6 | 	mov	_var01, #0
2241c     97 16 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
22420                 | LR__2690
22420     00 FB 01 F6 | 	mov	result1, _var01
22424     02 FA 65 F0 | 	shl	result1, #2
22428     43 00 00 FF 
2242c     80 E4 05 F1 | 	add	objptr, ##34432
22430     F2 FA 01 F1 | 	add	result1, objptr
22434     43 00 00 FF 
22438     80 E4 85 F1 | 	sub	objptr, ##34432
2243c     FD E4 61 FC | 	wrlong	objptr, result1
22440     01 00 06 F1 | 	add	_var01, #1
22444     00 01 56 F2 | 	cmps	_var01, #256 wc
22448     D4 FF 9F CD |  if_b	jmp	#LR__2690
2244c                 | LR__2691
2244c     F2 FA 01 F6 | 	mov	result1, objptr
22450     14 FA 25 F4 | 	bith	result1, #20
22454     43 00 00 FF 
22458     84 E4 05 F1 | 	add	objptr, ##34436
2245c     F2 FA 61 FC | 	wrlong	result1, objptr
22460     43 00 00 FF 
22464     84 E4 85 F1 | 	sub	objptr, ##34436
22468     F2 FA 01 F6 | 	mov	result1, objptr
2246c     15 FA 25 F4 | 	bith	result1, #21
22470     43 00 00 FF 
22474     88 E4 05 F1 | 	add	objptr, ##34440
22478     F2 FA 61 FC | 	wrlong	result1, objptr
2247c     43 00 00 FF 
22480     88 E4 85 F1 | 	sub	objptr, ##34440
22484     F2 FA 01 F6 | 	mov	result1, objptr
22488     34 FA 25 F4 | 	bith	result1, #52
2248c     43 00 00 FF 
22490     8C E4 05 F1 | 	add	objptr, ##34444
22494     F2 FA 61 FC | 	wrlong	result1, objptr
22498     43 00 00 FF 
2249c     8C E4 85 F1 | 	sub	objptr, ##34444
224a0     F2 FA 01 F6 | 	mov	result1, objptr
224a4     16 FA 25 F4 | 	bith	result1, #22
224a8     43 00 00 FF 
224ac     94 E4 05 F1 | 	add	objptr, ##34452
224b0     F2 FA 61 FC | 	wrlong	result1, objptr
224b4     43 00 00 FF 
224b8     94 E4 85 F1 | 	sub	objptr, ##34452
224bc     F2 FA 01 F6 | 	mov	result1, objptr
224c0     00 28 00 FF 
224c4     00 FA 45 F5 | 	or	result1, ##5242880
224c8     43 00 00 FF 
224cc     98 E4 05 F1 | 	add	objptr, ##34456
224d0     F2 FA 61 FC | 	wrlong	result1, objptr
224d4     43 00 00 FF 
224d8     98 E4 85 F1 | 	sub	objptr, ##34456
224dc     F2 FA 01 F6 | 	mov	result1, objptr
224e0     35 FA 25 F4 | 	bith	result1, #53
224e4     43 00 00 FF 
224e8     9C E4 05 F1 | 	add	objptr, ##34460
224ec     F2 FA 61 FC | 	wrlong	result1, objptr
224f0     43 00 00 FF 
224f4     9C E4 85 F1 | 	sub	objptr, ##34460
224f8     F2 FA 01 F6 | 	mov	result1, objptr
224fc     54 FA 25 F4 | 	bith	result1, #84
22500     43 00 00 FF 
22504     A0 E4 05 F1 | 	add	objptr, ##34464
22508     F2 FA 61 FC | 	wrlong	result1, objptr
2250c     43 00 00 FF 
22510     A0 E4 85 F1 | 	sub	objptr, ##34464
22514     F2 FA 01 F6 | 	mov	result1, objptr
22518     17 FA 25 F4 | 	bith	result1, #23
2251c     43 00 00 FF 
22520     A4 E4 05 F1 | 	add	objptr, ##34468
22524     F2 FA 61 FC | 	wrlong	result1, objptr
22528     43 00 00 FF 
2252c     A4 E4 85 F1 | 	sub	objptr, ##34468
22530     F2 FA 01 F6 | 	mov	result1, objptr
22534     00 48 00 FF 
22538     00 FA 45 F5 | 	or	result1, ##9437184
2253c     43 00 00 FF 
22540     A8 E4 05 F1 | 	add	objptr, ##34472
22544     F2 FA 61 FC | 	wrlong	result1, objptr
22548     43 00 00 FF 
2254c     A8 E4 85 F1 | 	sub	objptr, ##34472
22550     F2 FA 01 F6 | 	mov	result1, objptr
22554     00 50 00 FF 
22558     00 FA 45 F5 | 	or	result1, ##10485760
2255c     43 00 00 FF 
22560     AC E4 05 F1 | 	add	objptr, ##34476
22564     F2 FA 61 FC | 	wrlong	result1, objptr
22568     43 00 00 FF 
2256c     AC E4 85 F1 | 	sub	objptr, ##34476
22570     F2 FA 01 F6 | 	mov	result1, objptr
22574     00 58 00 FF 
22578     00 FA 45 F5 | 	or	result1, ##11534336
2257c     43 00 00 FF 
22580     B0 E4 05 F1 | 	add	objptr, ##34480
22584     F2 FA 61 FC | 	wrlong	result1, objptr
22588     43 00 00 FF 
2258c     B0 E4 85 F1 | 	sub	objptr, ##34480
22590     F2 FA 01 F6 | 	mov	result1, objptr
22594     36 FA 25 F4 | 	bith	result1, #54
22598     43 00 00 FF 
2259c     C4 E4 05 F1 | 	add	objptr, ##34500
225a0     F2 FA 61 FC | 	wrlong	result1, objptr
225a4     43 00 00 FF 
225a8     C4 E4 85 F1 | 	sub	objptr, ##34500
225ac     F2 FA 01 F6 | 	mov	result1, objptr
225b0     00 68 00 FF 
225b4     00 FA 45 F5 | 	or	result1, ##13631488
225b8     43 00 00 FF 
225bc     F4 E4 05 F1 | 	add	objptr, ##34548
225c0     F2 FA 61 FC | 	wrlong	result1, objptr
225c4     43 00 00 FF 
225c8     F4 E4 85 F1 | 	sub	objptr, ##34548
225cc     F2 FA 01 F6 | 	mov	result1, objptr
225d0     00 68 00 FF 
225d4     00 FA 45 F5 | 	or	result1, ##13631488
225d8     43 00 00 FF 
225dc     F0 E4 05 F1 | 	add	objptr, ##34544
225e0     F2 FA 61 FC | 	wrlong	result1, objptr
225e4     43 00 00 FF 
225e8     F0 E4 85 F1 | 	sub	objptr, ##34544
225ec     F2 FA 01 F6 | 	mov	result1, objptr
225f0     00 68 00 FF 
225f4     00 FA 45 F5 | 	or	result1, ##13631488
225f8     43 00 00 FF 
225fc     F8 E4 05 F1 | 	add	objptr, ##34552
22600     F2 FA 61 FC | 	wrlong	result1, objptr
22604     43 00 00 FF 
22608     F8 E4 85 F1 | 	sub	objptr, ##34552
2260c     F2 FA 01 F6 | 	mov	result1, objptr
22610     00 68 00 FF 
22614     00 FA 45 F5 | 	or	result1, ##13631488
22618     43 00 00 FF 
2261c     FC E4 05 F1 | 	add	objptr, ##34556
22620     F2 FA 61 FC | 	wrlong	result1, objptr
22624     43 00 00 FF 
22628     FC E4 85 F1 | 	sub	objptr, ##34556
2262c     F2 FA 01 F6 | 	mov	result1, objptr
22630     00 68 00 FF 
22634     00 FA 45 F5 | 	or	result1, ##13631488
22638     43 00 00 FF 
2263c     2C E5 05 F1 | 	add	objptr, ##34604
22640     F2 FA 61 FC | 	wrlong	result1, objptr
22644     43 00 00 FF 
22648     2C E5 85 F1 | 	sub	objptr, ##34604
2264c     F2 FA 01 F6 | 	mov	result1, objptr
22650     55 FA 25 F4 | 	bith	result1, #85
22654     43 00 00 FF 
22658     DC E4 05 F1 | 	add	objptr, ##34524
2265c     F2 FA 61 FC | 	wrlong	result1, objptr
22660     43 00 00 FF 
22664     DC E4 85 F1 | 	sub	objptr, ##34524
22668     F2 FA 01 F6 | 	mov	result1, objptr
2266c     00 68 00 FF 
22670     00 FA 45 F5 | 	or	result1, ##13631488
22674     43 00 00 FF 
22678     30 E5 05 F1 | 	add	objptr, ##34608
2267c     F2 FA 61 FC | 	wrlong	result1, objptr
22680     43 00 00 FF 
22684     30 E5 85 F1 | 	sub	objptr, ##34608
22688     F2 FA 01 F6 | 	mov	result1, objptr
2268c     00 68 00 FF 
22690     00 FA 45 F5 | 	or	result1, ##13631488
22694     43 00 00 FF 
22698     00 E5 05 F1 | 	add	objptr, ##34560
2269c     F2 FA 61 FC | 	wrlong	result1, objptr
226a0     43 00 00 FF 
226a4     00 E5 85 F1 | 	sub	objptr, ##34560
226a8     F2 FA 01 F6 | 	mov	result1, objptr
226ac     00 68 00 FF 
226b0     00 FA 45 F5 | 	or	result1, ##13631488
226b4     43 00 00 FF 
226b8     04 E5 05 F1 | 	add	objptr, ##34564
226bc     F2 FA 61 FC | 	wrlong	result1, objptr
226c0     43 00 00 FF 
226c4     04 E5 85 F1 | 	sub	objptr, ##34564
226c8     F2 FA 01 F6 | 	mov	result1, objptr
226cc     00 68 00 FF 
226d0     00 FA 45 F5 | 	or	result1, ##13631488
226d4     43 00 00 FF 
226d8     08 E5 05 F1 | 	add	objptr, ##34568
226dc     F2 FA 61 FC | 	wrlong	result1, objptr
226e0     43 00 00 FF 
226e4     08 E5 85 F1 | 	sub	objptr, ##34568
226e8     F2 FA 01 F6 | 	mov	result1, objptr
226ec     74 FA 25 F4 | 	bith	result1, #116
226f0     43 00 00 FF 
226f4     80 E5 05 F1 | 	add	objptr, ##34688
226f8     F2 FA 61 FC | 	wrlong	result1, objptr
226fc     43 00 00 FF 
22700     80 E5 85 F1 | 	sub	objptr, ##34688
22704     F2 FA 01 F6 | 	mov	result1, objptr
22708     18 FA 25 F4 | 	bith	result1, #24
2270c     43 00 00 FF 
22710     84 E5 05 F1 | 	add	objptr, ##34692
22714     F2 FA 61 FC | 	wrlong	result1, objptr
22718     43 00 00 FF 
2271c     84 E5 85 F1 | 	sub	objptr, ##34692
22720     F2 FA 01 F6 | 	mov	result1, objptr
22724     00 88 00 FF 
22728     00 FA 45 F5 | 	or	result1, ##17825792
2272c     43 00 00 FF 
22730     88 E5 05 F1 | 	add	objptr, ##34696
22734     F2 FA 61 FC | 	wrlong	result1, objptr
22738     43 00 00 FF 
2273c     88 E5 85 F1 | 	sub	objptr, ##34696
22740     F2 FA 01 F6 | 	mov	result1, objptr
22744     00 90 00 FF 
22748     00 FA 45 F5 | 	or	result1, ##18874368
2274c     43 00 00 FF 
22750     8C E5 05 F1 | 	add	objptr, ##34700
22754     F2 FA 61 FC | 	wrlong	result1, objptr
22758     43 00 00 FF 
2275c     8C E5 85 F1 | 	sub	objptr, ##34700
22760     F2 FA 01 F6 | 	mov	result1, objptr
22764     00 98 00 FF 
22768     00 FA 45 F5 | 	or	result1, ##19922944
2276c     43 00 00 FF 
22770     90 E5 05 F1 | 	add	objptr, ##34704
22774     F2 FA 61 FC | 	wrlong	result1, objptr
22778     43 00 00 FF 
2277c     90 E5 85 F1 | 	sub	objptr, ##34704
22780     F2 FA 01 F6 | 	mov	result1, objptr
22784     00 A0 00 FF 
22788     00 FA 45 F5 | 	or	result1, ##20971520
2278c     43 00 00 FF 
22790     94 E5 05 F1 | 	add	objptr, ##34708
22794     F2 FA 61 FC | 	wrlong	result1, objptr
22798     43 00 00 FF 
2279c     94 E5 85 F1 | 	sub	objptr, ##34708
227a0     F2 FA 01 F6 | 	mov	result1, objptr
227a4     00 A8 00 FF 
227a8     00 FA 45 F5 | 	or	result1, ##22020096
227ac     43 00 00 FF 
227b0     98 E5 05 F1 | 	add	objptr, ##34712
227b4     F2 FA 61 FC | 	wrlong	result1, objptr
227b8     43 00 00 FF 
227bc     98 E5 85 F1 | 	sub	objptr, ##34712
227c0     F2 FA 01 F6 | 	mov	result1, objptr
227c4     00 B0 00 FF 
227c8     00 FA 45 F5 | 	or	result1, ##23068672
227cc     43 00 00 FF 
227d0     9C E5 05 F1 | 	add	objptr, ##34716
227d4     F2 FA 61 FC | 	wrlong	result1, objptr
227d8     43 00 00 FF 
227dc     9C E5 85 F1 | 	sub	objptr, ##34716
227e0     F2 FA 01 F6 | 	mov	result1, objptr
227e4     00 B8 00 FF 
227e8     00 FA 45 F5 | 	or	result1, ##24117248
227ec     43 00 00 FF 
227f0     A0 E5 05 F1 | 	add	objptr, ##34720
227f4     F2 FA 61 FC | 	wrlong	result1, objptr
227f8     43 00 00 FF 
227fc     A0 E5 85 F1 | 	sub	objptr, ##34720
22800     F2 FA 01 F6 | 	mov	result1, objptr
22804     37 FA 25 F4 | 	bith	result1, #55
22808     43 00 00 FF 
2280c     A4 E5 05 F1 | 	add	objptr, ##34724
22810     F2 FA 61 FC | 	wrlong	result1, objptr
22814     43 00 00 FF 
22818     A4 E5 85 F1 | 	sub	objptr, ##34724
2281c     F2 FA 01 F6 | 	mov	result1, objptr
22820     00 C8 00 FF 
22824     00 FA 45 F5 | 	or	result1, ##26214400
22828     43 00 00 FF 
2282c     A8 E5 05 F1 | 	add	objptr, ##34728
22830     F2 FA 61 FC | 	wrlong	result1, objptr
22834     43 00 00 FF 
22838     A8 E5 85 F1 | 	sub	objptr, ##34728
2283c     F2 FA 01 F6 | 	mov	result1, objptr
22840     00 D0 00 FF 
22844     00 FA 45 F5 | 	or	result1, ##27262976
22848     43 00 00 FF 
2284c     AC E5 05 F1 | 	add	objptr, ##34732
22850     F2 FA 61 FC | 	wrlong	result1, objptr
22854     43 00 00 FF 
22858     AC E5 85 F1 | 	sub	objptr, ##34732
2285c     F2 FA 01 F6 | 	mov	result1, objptr
22860     00 D8 00 FF 
22864     00 FA 45 F5 | 	or	result1, ##28311552
22868     43 00 00 FF 
2286c     B0 E5 05 F1 | 	add	objptr, ##34736
22870     F2 FA 61 FC | 	wrlong	result1, objptr
22874     43 00 00 FF 
22878     B0 E5 85 F1 | 	sub	objptr, ##34736
2287c     F2 FA 01 F6 | 	mov	result1, objptr
22880     56 FA 25 F4 | 	bith	result1, #86
22884     43 00 00 FF 
22888     B4 E5 05 F1 | 	add	objptr, ##34740
2288c     F2 FA 61 FC | 	wrlong	result1, objptr
22890     43 00 00 FF 
22894     B4 E5 85 F1 | 	sub	objptr, ##34740
22898     F2 FA 01 F6 | 	mov	result1, objptr
2289c     00 E8 00 FF 
228a0     00 FA 45 F5 | 	or	result1, ##30408704
228a4     45 00 00 FF 
228a8     7C E4 05 F1 | 	add	objptr, ##35452
228ac     F2 FA 61 FC | 	wrlong	result1, objptr
228b0     45 00 00 FF 
228b4     7C E4 85 F1 | 	sub	objptr, ##35452
228b8     F2 FA 01 F6 | 	mov	result1, objptr
228bc     75 FA 25 F4 | 	bith	result1, #117
228c0     43 00 00 FF 
228c4     B8 E5 05 F1 | 	add	objptr, ##34744
228c8     F2 FA 61 FC | 	wrlong	result1, objptr
228cc     43 00 00 FF 
228d0     B8 E5 85 F1 | 	sub	objptr, ##34744
228d4     F2 FA 01 F6 | 	mov	result1, objptr
228d8     94 FA 25 F4 | 	bith	result1, #148
228dc     43 00 00 FF 
228e0     CC E5 05 F1 | 	add	objptr, ##34764
228e4     F2 FA 61 FC | 	wrlong	result1, objptr
228e8     43 00 00 FF 
228ec     CC E5 85 F1 | 	sub	objptr, ##34764
228f0     F2 FA 01 F6 | 	mov	result1, objptr
228f4     19 FA 25 F4 | 	bith	result1, #25
228f8     43 00 00 FF 
228fc     BC E5 05 F1 | 	add	objptr, ##34748
22900     F2 FA 61 FC | 	wrlong	result1, objptr
22904     43 00 00 FF 
22908     BC E5 85 F1 | 	sub	objptr, ##34748
2290c     F2 FA 01 F6 | 	mov	result1, objptr
22910     00 08 01 FF 
22914     00 FA 45 F5 | 	or	result1, ##34603008
22918     43 00 00 FF 
2291c     D8 E4 05 F1 | 	add	objptr, ##34520
22920     F2 FA 61 FC | 	wrlong	result1, objptr
22924     43 00 00 FF 
22928     D8 E4 85 F1 | 	sub	objptr, ##34520
2292c     F2 FA 01 F6 | 	mov	result1, objptr
22930     00 10 01 FF 
22934     00 FA 45 F5 | 	or	result1, ##35651584
22938     43 00 00 FF 
2293c     C4 E5 05 F1 | 	add	objptr, ##34756
22940     F2 FA 61 FC | 	wrlong	result1, objptr
22944     43 00 00 FF 
22948     C4 E5 85 F1 | 	sub	objptr, ##34756
2294c     F2 FA 01 F6 | 	mov	result1, objptr
22950     00 18 01 FF 
22954     00 FA 45 F5 | 	or	result1, ##36700160
22958     43 00 00 FF 
2295c     C8 E5 05 F1 | 	add	objptr, ##34760
22960     F2 FA 61 FC | 	wrlong	result1, objptr
22964     43 00 00 FF 
22968     C8 E5 85 F1 | 	sub	objptr, ##34760
2296c     F2 FA 01 F6 | 	mov	result1, objptr
22970     00 20 01 FF 
22974     00 FA 45 F5 | 	or	result1, ##37748736
22978     43 00 00 FF 
2297c     D4 E5 05 F1 | 	add	objptr, ##34772
22980     F2 FA 61 FC | 	wrlong	result1, objptr
22984     43 00 00 FF 
22988     D4 E5 85 F1 | 	sub	objptr, ##34772
2298c     F2 FA 01 F6 | 	mov	result1, objptr
22990     00 28 01 FF 
22994     00 FA 45 F5 | 	or	result1, ##38797312
22998     43 00 00 FF 
2299c     D8 E5 05 F1 | 	add	objptr, ##34776
229a0     F2 FA 61 FC | 	wrlong	result1, objptr
229a4     43 00 00 FF 
229a8     D8 E5 85 F1 | 	sub	objptr, ##34776
229ac     F2 FA 01 F6 | 	mov	result1, objptr
229b0     00 30 01 FF 
229b4     00 FA 45 F5 | 	or	result1, ##39845888
229b8     43 00 00 FF 
229bc     DC E5 05 F1 | 	add	objptr, ##34780
229c0     F2 FA 61 FC | 	wrlong	result1, objptr
229c4     43 00 00 FF 
229c8     DC E5 85 F1 | 	sub	objptr, ##34780
229cc     F2 FA 01 F6 | 	mov	result1, objptr
229d0     00 38 01 FF 
229d4     00 FA 45 F5 | 	or	result1, ##40894464
229d8     43 00 00 FF 
229dc     E0 E5 05 F1 | 	add	objptr, ##34784
229e0     F2 FA 61 FC | 	wrlong	result1, objptr
229e4     43 00 00 FF 
229e8     E0 E5 85 F1 | 	sub	objptr, ##34784
229ec     F2 FA 01 F6 | 	mov	result1, objptr
229f0     00 40 01 FF 
229f4     00 FA 45 F5 | 	or	result1, ##41943040
229f8     43 00 00 FF 
229fc     E8 E5 05 F1 | 	add	objptr, ##34792
22a00     F2 FA 61 FC | 	wrlong	result1, objptr
22a04     43 00 00 FF 
22a08     E8 E5 85 F1 | 	sub	objptr, ##34792
22a0c     F2 FA 01 F6 | 	mov	result1, objptr
22a10     00 08 01 FF 
22a14     00 FA 45 F5 | 	or	result1, ##34603008
22a18     43 00 00 FF 
22a1c     EC E5 05 F1 | 	add	objptr, ##34796
22a20     F2 FA 61 FC | 	wrlong	result1, objptr
22a24     43 00 00 FF 
22a28     EC E5 85 F1 | 	sub	objptr, ##34796
22a2c     F2 FA 01 F6 | 	mov	result1, objptr
22a30     00 48 01 FF 
22a34     00 FA 45 F5 | 	or	result1, ##42991616
22a38     43 00 00 FF 
22a3c     EC E4 05 F1 | 	add	objptr, ##34540
22a40     F2 FA 61 FC | 	wrlong	result1, objptr
22a44     43 00 00 FF 
22a48     EC E4 85 F1 | 	sub	objptr, ##34540
22a4c     F2 FA 01 F6 | 	mov	result1, objptr
22a50     00 50 01 FF 
22a54     00 FA 45 F5 | 	or	result1, ##44040192
22a58     43 00 00 FF 
22a5c     1C E5 05 F1 | 	add	objptr, ##34588
22a60     F2 FA 61 FC | 	wrlong	result1, objptr
22a64     43 00 00 FF 
22a68     1C E5 85 F1 | 	sub	objptr, ##34588
22a6c     F2 FA 01 F6 | 	mov	result1, objptr
22a70     00 58 01 FF 
22a74     00 FA 45 F5 | 	or	result1, ##45088768
22a78     43 00 00 FF 
22a7c     18 E5 05 F1 | 	add	objptr, ##34584
22a80     F2 FA 61 FC | 	wrlong	result1, objptr
22a84     43 00 00 FF 
22a88     18 E5 85 F1 | 	sub	objptr, ##34584
22a8c     F2 FA 01 F6 | 	mov	result1, objptr
22a90     00 60 01 FF 
22a94     00 FA 45 F5 | 	or	result1, ##46137344
22a98     43 00 00 FF 
22a9c     BC E4 05 F1 | 	add	objptr, ##34492
22aa0     F2 FA 61 FC | 	wrlong	result1, objptr
22aa4     43 00 00 FF 
22aa8     BC E4 85 F1 | 	sub	objptr, ##34492
22aac     F2 FA 01 F6 | 	mov	result1, objptr
22ab0     00 68 01 FF 
22ab4     00 FA 45 F5 | 	or	result1, ##47185920
22ab8     43 00 00 FF 
22abc     C0 E4 05 F1 | 	add	objptr, ##34496
22ac0     F2 FA 61 FC | 	wrlong	result1, objptr
22ac4     43 00 00 FF 
22ac8     C0 E4 85 F1 | 	sub	objptr, ##34496
22acc     F2 FA 01 F6 | 	mov	result1, objptr
22ad0     00 70 01 FF 
22ad4     00 FA 45 F5 | 	or	result1, ##48234496
22ad8     43 00 00 FF 
22adc     28 E5 05 F1 | 	add	objptr, ##34600
22ae0     F2 FA 61 FC | 	wrlong	result1, objptr
22ae4     43 00 00 FF 
22ae8     28 E5 85 F1 | 	sub	objptr, ##34600
22aec     F2 FA 01 F6 | 	mov	result1, objptr
22af0     00 78 01 FF 
22af4     00 FA 45 F5 | 	or	result1, ##49283072
22af8     43 00 00 FF 
22afc     D0 E5 05 F1 | 	add	objptr, ##34768
22b00     F2 FA 61 FC | 	wrlong	result1, objptr
22b04     43 00 00 FF 
22b08     D0 E5 85 F1 | 	sub	objptr, ##34768
22b0c     F2 FA 01 F6 | 	mov	result1, objptr
22b10     38 FA 25 F4 | 	bith	result1, #56
22b14     43 00 00 FF 
22b18     E4 E5 05 F1 | 	add	objptr, ##34788
22b1c     F2 FA 61 FC | 	wrlong	result1, objptr
22b20     43 00 00 FF 
22b24     E4 E5 85 F1 | 	sub	objptr, ##34788
22b28     F2 FA 01 F6 | 	mov	result1, objptr
22b2c     00 88 01 FF 
22b30     00 FA 45 F5 | 	or	result1, ##51380224
22b34     43 00 00 FF 
22b38     F0 E5 05 F1 | 	add	objptr, ##34800
22b3c     F2 FA 61 FC | 	wrlong	result1, objptr
22b40     43 00 00 FF 
22b44     F0 E5 85 F1 | 	sub	objptr, ##34800
22b48     F2 FA 01 F6 | 	mov	result1, objptr
22b4c     00 90 01 FF 
22b50     00 FA 45 F5 | 	or	result1, ##52428800
22b54     43 00 00 FF 
22b58     F4 E5 05 F1 | 	add	objptr, ##34804
22b5c     F2 FA 61 FC | 	wrlong	result1, objptr
22b60     43 00 00 FF 
22b64     F4 E5 85 F1 | 	sub	objptr, ##34804
22b68     F2 FA 01 F6 | 	mov	result1, objptr
22b6c     00 98 01 FF 
22b70     00 FA 45 F5 | 	or	result1, ##53477376
22b74     43 00 00 FF 
22b78     F8 E5 05 F1 | 	add	objptr, ##34808
22b7c     F2 FA 61 FC | 	wrlong	result1, objptr
22b80     43 00 00 FF 
22b84     F8 E5 85 F1 | 	sub	objptr, ##34808
22b88     F2 FA 01 F6 | 	mov	result1, objptr
22b8c     00 A0 01 FF 
22b90     00 FA 45 F5 | 	or	result1, ##54525952
22b94     43 00 00 FF 
22b98     FC E5 05 F1 | 	add	objptr, ##34812
22b9c     F2 FA 61 FC | 	wrlong	result1, objptr
22ba0     43 00 00 FF 
22ba4     FC E5 85 F1 | 	sub	objptr, ##34812
22ba8     F2 FA 01 F6 | 	mov	result1, objptr
22bac     00 A8 01 FF 
22bb0     00 FA 45 F5 | 	or	result1, ##55574528
22bb4     44 00 00 FF 
22bb8     00 E4 05 F1 | 	add	objptr, ##34816
22bbc     F2 FA 61 FC | 	wrlong	result1, objptr
22bc0     44 00 00 FF 
22bc4     00 E4 85 F1 | 	sub	objptr, ##34816
22bc8     F2 FA 01 F6 | 	mov	result1, objptr
22bcc     00 B0 01 FF 
22bd0     00 FA 45 F5 | 	or	result1, ##56623104
22bd4     44 00 00 FF 
22bd8     04 E4 05 F1 | 	add	objptr, ##34820
22bdc     F2 FA 61 FC | 	wrlong	result1, objptr
22be0     44 00 00 FF 
22be4     04 E4 85 F1 | 	sub	objptr, ##34820
22be8     F2 FA 01 F6 | 	mov	result1, objptr
22bec     94 FA 25 F4 | 	bith	result1, #148
22bf0     43 00 00 FF 
22bf4     CC E5 05 F1 | 	add	objptr, ##34764
22bf8     F2 FA 61 FC | 	wrlong	result1, objptr
22bfc     43 00 00 FF 
22c00     CC E5 85 F1 | 	sub	objptr, ##34764
22c04     F2 FA 01 F6 | 	mov	result1, objptr
22c08     00 B8 01 FF 
22c0c     00 FA 45 F5 | 	or	result1, ##57671680
22c10     44 00 00 FF 
22c14     0C E4 05 F1 | 	add	objptr, ##34828
22c18     F2 FA 61 FC | 	wrlong	result1, objptr
22c1c     44 00 00 FF 
22c20     0C E4 85 F1 | 	sub	objptr, ##34828
22c24     F2 FA 01 F6 | 	mov	result1, objptr
22c28     57 FA 25 F4 | 	bith	result1, #87
22c2c     44 00 00 FF 
22c30     08 E4 05 F1 | 	add	objptr, ##34824
22c34     F2 FA 61 FC | 	wrlong	result1, objptr
22c38     44 00 00 FF 
22c3c     08 E4 85 F1 | 	sub	objptr, ##34824
22c40     F2 FA 01 F6 | 	mov	result1, objptr
22c44     00 C8 01 FF 
22c48     00 FA 45 F5 | 	or	result1, ##59768832
22c4c     44 00 00 FF 
22c50     20 E4 05 F1 | 	add	objptr, ##34848
22c54     F2 FA 61 FC | 	wrlong	result1, objptr
22c58     44 00 00 FF 
22c5c     20 E4 85 F1 | 	sub	objptr, ##34848
22c60     F2 FA 01 F6 | 	mov	result1, objptr
22c64     00 D0 01 FF 
22c68     00 FA 45 F5 | 	or	result1, ##60817408
22c6c     44 00 00 FF 
22c70     24 E4 05 F1 | 	add	objptr, ##34852
22c74     F2 FA 61 FC | 	wrlong	result1, objptr
22c78     44 00 00 FF 
22c7c     24 E4 85 F1 | 	sub	objptr, ##34852
22c80     F2 FA 01 F6 | 	mov	result1, objptr
22c84     00 D8 01 FF 
22c88     00 FA 45 F5 | 	or	result1, ##61865984
22c8c     44 00 00 FF 
22c90     10 E4 05 F1 | 	add	objptr, ##34832
22c94     F2 FA 61 FC | 	wrlong	result1, objptr
22c98     44 00 00 FF 
22c9c     10 E4 85 F1 | 	sub	objptr, ##34832
22ca0     F2 FA 01 F6 | 	mov	result1, objptr
22ca4     76 FA 25 F4 | 	bith	result1, #118
22ca8     44 00 00 FF 
22cac     14 E4 05 F1 | 	add	objptr, ##34836
22cb0     F2 FA 61 FC | 	wrlong	result1, objptr
22cb4     44 00 00 FF 
22cb8     14 E4 85 F1 | 	sub	objptr, ##34836
22cbc     F2 FA 01 F6 | 	mov	result1, objptr
22cc0     00 E8 01 FF 
22cc4     00 FA 45 F5 | 	or	result1, ##63963136
22cc8     44 00 00 FF 
22ccc     18 E4 05 F1 | 	add	objptr, ##34840
22cd0     F2 FA 61 FC | 	wrlong	result1, objptr
22cd4     44 00 00 FF 
22cd8     18 E4 85 F1 | 	sub	objptr, ##34840
22cdc     F2 FA 01 F6 | 	mov	result1, objptr
22ce0     95 FA 25 F4 | 	bith	result1, #149
22ce4     44 00 00 FF 
22ce8     1C E4 05 F1 | 	add	objptr, ##34844
22cec     F2 FA 61 FC | 	wrlong	result1, objptr
22cf0     44 00 00 FF 
22cf4     1C E4 85 F1 | 	sub	objptr, ##34844
22cf8     F2 FA 01 F6 | 	mov	result1, objptr
22cfc     B4 FA 25 F4 | 	bith	result1, #180
22d00     44 00 00 FF 
22d04     2C E4 05 F1 | 	add	objptr, ##34860
22d08     F2 FA 61 FC | 	wrlong	result1, objptr
22d0c     44 00 00 FF 
22d10     2C E4 85 F1 | 	sub	objptr, ##34860
22d14     F2 FA 01 F6 | 	mov	result1, objptr
22d18     1A FA 25 F4 | 	bith	result1, #26
22d1c     44 00 00 FF 
22d20     28 E4 05 F1 | 	add	objptr, ##34856
22d24     F2 FA 61 FC | 	wrlong	result1, objptr
22d28     44 00 00 FF 
22d2c     28 E4 85 F1 | 	sub	objptr, ##34856
22d30     F2 FA 01 F6 | 	mov	result1, objptr
22d34     00 08 02 FF 
22d38     00 FA 45 F5 | 	or	result1, ##68157440
22d3c     44 00 00 FF 
22d40     38 E4 05 F1 | 	add	objptr, ##34872
22d44     F2 FA 61 FC | 	wrlong	result1, objptr
22d48     44 00 00 FF 
22d4c     38 E4 85 F1 | 	sub	objptr, ##34872
22d50     F2 FA 01 F6 | 	mov	result1, objptr
22d54     00 10 02 FF 
22d58     00 FA 45 F5 | 	or	result1, ##69206016
22d5c     44 00 00 FF 
22d60     34 E4 05 F1 | 	add	objptr, ##34868
22d64     F2 FA 61 FC | 	wrlong	result1, objptr
22d68     44 00 00 FF 
22d6c     34 E4 85 F1 | 	sub	objptr, ##34868
22d70     F2 FA 01 F6 | 	mov	result1, objptr
22d74     00 18 02 FF 
22d78     00 FA 45 F5 | 	or	result1, ##70254592
22d7c     44 00 00 FF 
22d80     30 E4 05 F1 | 	add	objptr, ##34864
22d84     F2 FA 61 FC | 	wrlong	result1, objptr
22d88     44 00 00 FF 
22d8c     30 E4 85 F1 | 	sub	objptr, ##34864
22d90     F2 FA 01 F6 | 	mov	result1, objptr
22d94     00 20 02 FF 
22d98     00 FA 45 F5 | 	or	result1, ##71303168
22d9c     44 00 00 FF 
22da0     3C E4 05 F1 | 	add	objptr, ##34876
22da4     F2 FA 61 FC | 	wrlong	result1, objptr
22da8     44 00 00 FF 
22dac     3C E4 85 F1 | 	sub	objptr, ##34876
22db0     F2 FA 01 F6 | 	mov	result1, objptr
22db4     00 28 02 FF 
22db8     00 FA 45 F5 | 	or	result1, ##72351744
22dbc     44 00 00 FF 
22dc0     40 E4 05 F1 | 	add	objptr, ##34880
22dc4     F2 FA 61 FC | 	wrlong	result1, objptr
22dc8     44 00 00 FF 
22dcc     40 E4 85 F1 | 	sub	objptr, ##34880
22dd0     F2 FA 01 F6 | 	mov	result1, objptr
22dd4     00 30 02 FF 
22dd8     00 FA 45 F5 | 	or	result1, ##73400320
22ddc     43 00 00 FF 
22de0     D4 E4 05 F1 | 	add	objptr, ##34516
22de4     F2 FA 61 FC | 	wrlong	result1, objptr
22de8     43 00 00 FF 
22dec     D4 E4 85 F1 | 	sub	objptr, ##34516
22df0     F2 FA 01 F6 | 	mov	result1, objptr
22df4     00 38 02 FF 
22df8     00 FA 45 F5 | 	or	result1, ##74448896
22dfc     44 00 00 FF 
22e00     58 E4 05 F1 | 	add	objptr, ##34904
22e04     F2 FA 61 FC | 	wrlong	result1, objptr
22e08     44 00 00 FF 
22e0c     58 E4 85 F1 | 	sub	objptr, ##34904
22e10     F2 FA 01 F6 | 	mov	result1, objptr
22e14     00 40 02 FF 
22e18     00 FA 45 F5 | 	or	result1, ##75497472
22e1c     44 00 00 FF 
22e20     68 E4 05 F1 | 	add	objptr, ##34920
22e24     F2 FA 61 FC | 	wrlong	result1, objptr
22e28     44 00 00 FF 
22e2c     68 E4 85 F1 | 	sub	objptr, ##34920
22e30     F2 FA 01 F6 | 	mov	result1, objptr
22e34     00 48 02 FF 
22e38     00 FA 45 F5 | 	or	result1, ##76546048
22e3c     44 00 00 FF 
22e40     6C E4 05 F1 | 	add	objptr, ##34924
22e44     F2 FA 61 FC | 	wrlong	result1, objptr
22e48     44 00 00 FF 
22e4c     6C E4 85 F1 | 	sub	objptr, ##34924
22e50     F2 FA 01 F6 | 	mov	result1, objptr
22e54     00 50 02 FF 
22e58     00 FA 45 F5 | 	or	result1, ##77594624
22e5c     44 00 00 FF 
22e60     64 E4 05 F1 | 	add	objptr, ##34916
22e64     F2 FA 61 FC | 	wrlong	result1, objptr
22e68     44 00 00 FF 
22e6c     64 E4 85 F1 | 	sub	objptr, ##34916
22e70     F2 FA 01 F6 | 	mov	result1, objptr
22e74     00 58 02 FF 
22e78     00 FA 45 F5 | 	or	result1, ##78643200
22e7c     44 00 00 FF 
22e80     5C E4 05 F1 | 	add	objptr, ##34908
22e84     F2 FA 61 FC | 	wrlong	result1, objptr
22e88     44 00 00 FF 
22e8c     5C E4 85 F1 | 	sub	objptr, ##34908
22e90     F2 FA 01 F6 | 	mov	result1, objptr
22e94     00 60 02 FF 
22e98     00 FA 45 F5 | 	or	result1, ##79691776
22e9c     44 00 00 FF 
22ea0     60 E4 05 F1 | 	add	objptr, ##34912
22ea4     F2 FA 61 FC | 	wrlong	result1, objptr
22ea8     44 00 00 FF 
22eac     60 E4 85 F1 | 	sub	objptr, ##34912
22eb0     F2 FA 01 F6 | 	mov	result1, objptr
22eb4     00 68 02 FF 
22eb8     00 FA 45 F5 | 	or	result1, ##80740352
22ebc     44 00 00 FF 
22ec0     70 E4 05 F1 | 	add	objptr, ##34928
22ec4     F2 FA 61 FC | 	wrlong	result1, objptr
22ec8     44 00 00 FF 
22ecc     70 E4 85 F1 | 	sub	objptr, ##34928
22ed0     F2 FA 01 F6 | 	mov	result1, objptr
22ed4     00 70 02 FF 
22ed8     00 FA 45 F5 | 	or	result1, ##81788928
22edc     44 00 00 FF 
22ee0     74 E4 05 F1 | 	add	objptr, ##34932
22ee4     F2 FA 61 FC | 	wrlong	result1, objptr
22ee8     44 00 00 FF 
22eec     74 E4 85 F1 | 	sub	objptr, ##34932
22ef0     F2 FA 01 F6 | 	mov	result1, objptr
22ef4     00 78 02 FF 
22ef8     00 FA 45 F5 | 	or	result1, ##82837504
22efc     44 00 00 FF 
22f00     78 E4 05 F1 | 	add	objptr, ##34936
22f04     F2 FA 61 FC | 	wrlong	result1, objptr
22f08     44 00 00 FF 
22f0c     78 E4 85 F1 | 	sub	objptr, ##34936
22f10     F2 FA 01 F6 | 	mov	result1, objptr
22f14     00 80 02 FF 
22f18     00 FA 45 F5 | 	or	result1, ##83886080
22f1c     44 00 00 FF 
22f20     7C E4 05 F1 | 	add	objptr, ##34940
22f24     F2 FA 61 FC | 	wrlong	result1, objptr
22f28     44 00 00 FF 
22f2c     7C E4 85 F1 | 	sub	objptr, ##34940
22f30     F2 FA 01 F6 | 	mov	result1, objptr
22f34     00 88 02 FF 
22f38     00 FA 45 F5 | 	or	result1, ##84934656
22f3c     44 00 00 FF 
22f40     80 E4 05 F1 | 	add	objptr, ##34944
22f44     F2 FA 61 FC | 	wrlong	result1, objptr
22f48     44 00 00 FF 
22f4c     80 E4 85 F1 | 	sub	objptr, ##34944
22f50     F2 FA 01 F6 | 	mov	result1, objptr
22f54     00 90 02 FF 
22f58     00 FA 45 F5 | 	or	result1, ##85983232
22f5c     44 00 00 FF 
22f60     84 E4 05 F1 | 	add	objptr, ##34948
22f64     F2 FA 61 FC | 	wrlong	result1, objptr
22f68     44 00 00 FF 
22f6c     84 E4 85 F1 | 	sub	objptr, ##34948
22f70     F2 FA 01 F6 | 	mov	result1, objptr
22f74     00 98 02 FF 
22f78     00 FA 45 F5 | 	or	result1, ##87031808
22f7c     44 00 00 FF 
22f80     88 E4 05 F1 | 	add	objptr, ##34952
22f84     F2 FA 61 FC | 	wrlong	result1, objptr
22f88     44 00 00 FF 
22f8c     88 E4 85 F1 | 	sub	objptr, ##34952
22f90     F2 FA 01 F6 | 	mov	result1, objptr
22f94     00 A0 02 FF 
22f98     00 FA 45 F5 | 	or	result1, ##88080384
22f9c     44 00 00 FF 
22fa0     8C E4 05 F1 | 	add	objptr, ##34956
22fa4     F2 FA 61 FC | 	wrlong	result1, objptr
22fa8     44 00 00 FF 
22fac     8C E4 85 F1 | 	sub	objptr, ##34956
22fb0     F2 FA 01 F6 | 	mov	result1, objptr
22fb4     00 A8 02 FF 
22fb8     00 FA 45 F5 | 	or	result1, ##89128960
22fbc     44 00 00 FF 
22fc0     98 E4 05 F1 | 	add	objptr, ##34968
22fc4     F2 FA 61 FC | 	wrlong	result1, objptr
22fc8     44 00 00 FF 
22fcc     98 E4 85 F1 | 	sub	objptr, ##34968
22fd0     F2 FA 01 F6 | 	mov	result1, objptr
22fd4     00 B0 02 FF 
22fd8     00 FA 45 F5 | 	or	result1, ##90177536
22fdc     44 00 00 FF 
22fe0     90 E4 05 F1 | 	add	objptr, ##34960
22fe4     F2 FA 61 FC | 	wrlong	result1, objptr
22fe8     44 00 00 FF 
22fec     90 E4 85 F1 | 	sub	objptr, ##34960
22ff0     F2 FA 01 F6 | 	mov	result1, objptr
22ff4     00 B8 02 FF 
22ff8     00 FA 45 F5 | 	or	result1, ##91226112
22ffc     44 00 00 FF 
23000     94 E4 05 F1 | 	add	objptr, ##34964
23004     F2 FA 61 FC | 	wrlong	result1, objptr
23008     44 00 00 FF 
2300c     94 E4 85 F1 | 	sub	objptr, ##34964
23010     F2 FA 01 F6 | 	mov	result1, objptr
23014     00 C0 02 FF 
23018     00 FA 45 F5 | 	or	result1, ##92274688
2301c     44 00 00 FF 
23020     9C E4 05 F1 | 	add	objptr, ##34972
23024     F2 FA 61 FC | 	wrlong	result1, objptr
23028     44 00 00 FF 
2302c     9C E4 85 F1 | 	sub	objptr, ##34972
23030     F2 FA 01 F6 | 	mov	result1, objptr
23034     00 C8 02 FF 
23038     00 FA 45 F5 | 	or	result1, ##93323264
2303c     44 00 00 FF 
23040     44 E4 05 F1 | 	add	objptr, ##34884
23044     F2 FA 61 FC | 	wrlong	result1, objptr
23048     44 00 00 FF 
2304c     44 E4 85 F1 | 	sub	objptr, ##34884
23050     F2 FA 01 F6 | 	mov	result1, objptr
23054     00 D0 02 FF 
23058     00 FA 45 F5 | 	or	result1, ##94371840
2305c     44 00 00 FF 
23060     4C E4 05 F1 | 	add	objptr, ##34892
23064     F2 FA 61 FC | 	wrlong	result1, objptr
23068     44 00 00 FF 
2306c     4C E4 85 F1 | 	sub	objptr, ##34892
23070     F2 FA 01 F6 | 	mov	result1, objptr
23074     00 D8 02 FF 
23078     00 FA 45 F5 | 	or	result1, ##95420416
2307c     44 00 00 FF 
23080     50 E4 05 F1 | 	add	objptr, ##34896
23084     F2 FA 61 FC | 	wrlong	result1, objptr
23088     44 00 00 FF 
2308c     50 E4 85 F1 | 	sub	objptr, ##34896
23090     F2 FA 01 F6 | 	mov	result1, objptr
23094     00 E0 02 FF 
23098     00 FA 45 F5 | 	or	result1, ##96468992
2309c     44 00 00 FF 
230a0     A0 E4 05 F1 | 	add	objptr, ##34976
230a4     F2 FA 61 FC | 	wrlong	result1, objptr
230a8     44 00 00 FF 
230ac     A0 E4 85 F1 | 	sub	objptr, ##34976
230b0     F2 FA 01 F6 | 	mov	result1, objptr
230b4     00 E8 02 FF 
230b8     00 FA 45 F5 | 	or	result1, ##97517568
230bc     44 00 00 FF 
230c0     A4 E4 05 F1 | 	add	objptr, ##34980
230c4     F2 FA 61 FC | 	wrlong	result1, objptr
230c8     44 00 00 FF 
230cc     A4 E4 85 F1 | 	sub	objptr, ##34980
230d0     F2 FA 01 F6 | 	mov	result1, objptr
230d4     00 F0 02 FF 
230d8     00 FA 45 F5 | 	or	result1, ##98566144
230dc     44 00 00 FF 
230e0     A8 E4 05 F1 | 	add	objptr, ##34984
230e4     F2 FA 61 FC | 	wrlong	result1, objptr
230e8     44 00 00 FF 
230ec     A8 E4 85 F1 | 	sub	objptr, ##34984
230f0     F2 FA 01 F6 | 	mov	result1, objptr
230f4     00 F8 02 FF 
230f8     00 FA 45 F5 | 	or	result1, ##99614720
230fc     44 00 00 FF 
23100     54 E4 05 F1 | 	add	objptr, ##34900
23104     F2 FA 61 FC | 	wrlong	result1, objptr
23108     44 00 00 FF 
2310c     54 E4 85 F1 | 	sub	objptr, ##34900
23110     F2 FA 01 F6 | 	mov	result1, objptr
23114     39 FA 25 F4 | 	bith	result1, #57
23118     44 00 00 FF 
2311c     B8 E4 05 F1 | 	add	objptr, ##35000
23120     F2 FA 61 FC | 	wrlong	result1, objptr
23124     44 00 00 FF 
23128     B8 E4 85 F1 | 	sub	objptr, ##35000
2312c     F2 FA 01 F6 | 	mov	result1, objptr
23130     00 08 03 FF 
23134     00 FA 45 F5 | 	or	result1, ##101711872
23138     44 00 00 FF 
2313c     C0 E4 05 F1 | 	add	objptr, ##35008
23140     F2 FA 61 FC | 	wrlong	result1, objptr
23144     44 00 00 FF 
23148     C0 E4 85 F1 | 	sub	objptr, ##35008
2314c     F2 FA 01 F6 | 	mov	result1, objptr
23150     00 10 03 FF 
23154     00 FA 45 F5 | 	or	result1, ##102760448
23158     44 00 00 FF 
2315c     B4 E4 05 F1 | 	add	objptr, ##34996
23160     F2 FA 61 FC | 	wrlong	result1, objptr
23164     44 00 00 FF 
23168     B4 E4 85 F1 | 	sub	objptr, ##34996
2316c     F2 FA 01 F6 | 	mov	result1, objptr
23170     00 18 03 FF 
23174     00 FA 45 F5 | 	or	result1, ##103809024
23178     44 00 00 FF 
2317c     B0 E4 05 F1 | 	add	objptr, ##34992
23180     F2 FA 61 FC | 	wrlong	result1, objptr
23184     44 00 00 FF 
23188     B0 E4 85 F1 | 	sub	objptr, ##34992
2318c     F2 FA 01 F6 | 	mov	result1, objptr
23190     00 20 03 FF 
23194     00 FA 45 F5 | 	or	result1, ##104857600
23198     44 00 00 FF 
2319c     AC E4 05 F1 | 	add	objptr, ##34988
231a0     F2 FA 61 FC | 	wrlong	result1, objptr
231a4     44 00 00 FF 
231a8     AC E4 85 F1 | 	sub	objptr, ##34988
231ac     F2 FA 01 F6 | 	mov	result1, objptr
231b0     00 28 03 FF 
231b4     00 FA 45 F5 | 	or	result1, ##105906176
231b8     44 00 00 FF 
231bc     BC E4 05 F1 | 	add	objptr, ##35004
231c0     F2 FA 61 FC | 	wrlong	result1, objptr
231c4     44 00 00 FF 
231c8     BC E4 85 F1 | 	sub	objptr, ##35004
231cc     F2 FA 01 F6 | 	mov	result1, objptr
231d0     00 30 03 FF 
231d4     00 FA 45 F5 | 	or	result1, ##106954752
231d8     44 00 00 FF 
231dc     C4 E4 05 F1 | 	add	objptr, ##35012
231e0     F2 FA 61 FC | 	wrlong	result1, objptr
231e4     44 00 00 FF 
231e8     C4 E4 85 F1 | 	sub	objptr, ##35012
231ec     F2 FA 01 F6 | 	mov	result1, objptr
231f0     00 38 03 FF 
231f4     00 FA 45 F5 | 	or	result1, ##108003328
231f8     44 00 00 FF 
231fc     C8 E4 05 F1 | 	add	objptr, ##35016
23200     F2 FA 61 FC | 	wrlong	result1, objptr
23204     44 00 00 FF 
23208     C8 E4 85 F1 | 	sub	objptr, ##35016
2320c     F2 FA 01 F6 | 	mov	result1, objptr
23210     00 40 03 FF 
23214     00 FA 45 F5 | 	or	result1, ##109051904
23218     44 00 00 FF 
2321c     CC E4 05 F1 | 	add	objptr, ##35020
23220     F2 FA 61 FC | 	wrlong	result1, objptr
23224     44 00 00 FF 
23228     CC E4 85 F1 | 	sub	objptr, ##35020
2322c     F2 FA 01 F6 | 	mov	result1, objptr
23230     00 48 03 FF 
23234     00 FA 45 F5 | 	or	result1, ##110100480
23238     44 00 00 FF 
2323c     D4 E4 05 F1 | 	add	objptr, ##35028
23240     F2 FA 61 FC | 	wrlong	result1, objptr
23244     44 00 00 FF 
23248     D4 E4 85 F1 | 	sub	objptr, ##35028
2324c     F2 FA 01 F6 | 	mov	result1, objptr
23250     00 50 03 FF 
23254     00 FA 45 F5 | 	or	result1, ##111149056
23258     44 00 00 FF 
2325c     D8 E4 05 F1 | 	add	objptr, ##35032
23260     F2 FA 61 FC | 	wrlong	result1, objptr
23264     44 00 00 FF 
23268     D8 E4 85 F1 | 	sub	objptr, ##35032
2326c     F2 FA 01 F6 | 	mov	result1, objptr
23270     00 58 03 FF 
23274     00 FA 45 F5 | 	or	result1, ##112197632
23278     44 00 00 FF 
2327c     DC E4 05 F1 | 	add	objptr, ##35036
23280     F2 FA 61 FC | 	wrlong	result1, objptr
23284     44 00 00 FF 
23288     DC E4 85 F1 | 	sub	objptr, ##35036
2328c     F2 FA 01 F6 | 	mov	result1, objptr
23290     00 60 03 FF 
23294     00 FA 45 F5 | 	or	result1, ##113246208
23298     44 00 00 FF 
2329c     E0 E4 05 F1 | 	add	objptr, ##35040
232a0     F2 FA 61 FC | 	wrlong	result1, objptr
232a4     44 00 00 FF 
232a8     E0 E4 85 F1 | 	sub	objptr, ##35040
232ac     F2 FA 01 F6 | 	mov	result1, objptr
232b0     00 68 03 FF 
232b4     00 FA 45 F5 | 	or	result1, ##114294784
232b8     44 00 00 FF 
232bc     E4 E4 05 F1 | 	add	objptr, ##35044
232c0     F2 FA 61 FC | 	wrlong	result1, objptr
232c4     44 00 00 FF 
232c8     E4 E4 85 F1 | 	sub	objptr, ##35044
232cc     F2 FA 01 F6 | 	mov	result1, objptr
232d0     00 70 03 FF 
232d4     00 FA 45 F5 | 	or	result1, ##115343360
232d8     44 00 00 FF 
232dc     E8 E4 05 F1 | 	add	objptr, ##35048
232e0     F2 FA 61 FC | 	wrlong	result1, objptr
232e4     44 00 00 FF 
232e8     E8 E4 85 F1 | 	sub	objptr, ##35048
232ec     F2 FA 01 F6 | 	mov	result1, objptr
232f0     00 08 01 FF 
232f4     00 FA 45 F5 | 	or	result1, ##34603008
232f8     44 00 00 FF 
232fc     EC E4 05 F1 | 	add	objptr, ##35052
23300     F2 FA 61 FC | 	wrlong	result1, objptr
23304     44 00 00 FF 
23308     EC E4 85 F1 | 	sub	objptr, ##35052
2330c     F2 FA 01 F6 | 	mov	result1, objptr
23310     00 78 03 FF 
23314     00 FA 45 F5 | 	or	result1, ##116391936
23318     44 00 00 FF 
2331c     F0 E4 05 F1 | 	add	objptr, ##35056
23320     F2 FA 61 FC | 	wrlong	result1, objptr
23324     44 00 00 FF 
23328     F0 E4 85 F1 | 	sub	objptr, ##35056
2332c     F2 FA 01 F6 | 	mov	result1, objptr
23330     58 FA 25 F4 | 	bith	result1, #88
23334     44 00 00 FF 
23338     D0 E4 05 F1 | 	add	objptr, ##35024
2333c     F2 FA 61 FC | 	wrlong	result1, objptr
23340     44 00 00 FF 
23344     D0 E4 85 F1 | 	sub	objptr, ##35024
23348     F2 FA 01 F6 | 	mov	result1, objptr
2334c     00 88 03 FF 
23350     00 FA 45 F5 | 	or	result1, ##118489088
23354     43 00 00 FF 
23358     C8 E4 05 F1 | 	add	objptr, ##34504
2335c     F2 FA 61 FC | 	wrlong	result1, objptr
23360     43 00 00 FF 
23364     C8 E4 85 F1 | 	sub	objptr, ##34504
23368     F2 FA 01 F6 | 	mov	result1, objptr
2336c     00 90 03 FF 
23370     00 FA 45 F5 | 	or	result1, ##119537664
23374     44 00 00 FF 
23378     F4 E4 05 F1 | 	add	objptr, ##35060
2337c     F2 FA 61 FC | 	wrlong	result1, objptr
23380     44 00 00 FF 
23384     F4 E4 85 F1 | 	sub	objptr, ##35060
23388     F2 FA 01 F6 | 	mov	result1, objptr
2338c     00 98 03 FF 
23390     00 FA 45 F5 | 	or	result1, ##120586240
23394     44 00 00 FF 
23398     F8 E4 05 F1 | 	add	objptr, ##35064
2339c     F2 FA 61 FC | 	wrlong	result1, objptr
233a0     44 00 00 FF 
233a4     F8 E4 85 F1 | 	sub	objptr, ##35064
233a8     F2 FA 01 F6 | 	mov	result1, objptr
233ac     00 A0 03 FF 
233b0     00 FA 45 F5 | 	or	result1, ##121634816
233b4     44 00 00 FF 
233b8     0C E5 05 F1 | 	add	objptr, ##35084
233bc     F2 FA 61 FC | 	wrlong	result1, objptr
233c0     44 00 00 FF 
233c4     0C E5 85 F1 | 	sub	objptr, ##35084
233c8     F2 FA 01 F6 | 	mov	result1, objptr
233cc     00 A8 03 FF 
233d0     00 FA 45 F5 | 	or	result1, ##122683392
233d4     44 00 00 FF 
233d8     08 E5 05 F1 | 	add	objptr, ##35080
233dc     F2 FA 61 FC | 	wrlong	result1, objptr
233e0     44 00 00 FF 
233e4     08 E5 85 F1 | 	sub	objptr, ##35080
233e8     F2 FA 01 F6 | 	mov	result1, objptr
233ec     00 B0 03 FF 
233f0     00 FA 45 F5 | 	or	result1, ##123731968
233f4     44 00 00 FF 
233f8     00 E5 05 F1 | 	add	objptr, ##35072
233fc     F2 FA 61 FC | 	wrlong	result1, objptr
23400     44 00 00 FF 
23404     00 E5 85 F1 | 	sub	objptr, ##35072
23408     F2 FA 01 F6 | 	mov	result1, objptr
2340c     00 B8 03 FF 
23410     00 FA 45 F5 | 	or	result1, ##124780544
23414     44 00 00 FF 
23418     FC E4 05 F1 | 	add	objptr, ##35068
2341c     F2 FA 61 FC | 	wrlong	result1, objptr
23420     44 00 00 FF 
23424     FC E4 85 F1 | 	sub	objptr, ##35068
23428     F2 FA 01 F6 | 	mov	result1, objptr
2342c     77 FA 25 F4 | 	bith	result1, #119
23430     44 00 00 FF 
23434     1C E5 05 F1 | 	add	objptr, ##35100
23438     F2 FA 61 FC | 	wrlong	result1, objptr
2343c     44 00 00 FF 
23440     1C E5 85 F1 | 	sub	objptr, ##35100
23444     F2 FA 01 F6 | 	mov	result1, objptr
23448     00 C8 03 FF 
2344c     00 FA 45 F5 | 	or	result1, ##126877696
23450     44 00 00 FF 
23454     10 E5 05 F1 | 	add	objptr, ##35088
23458     F2 FA 61 FC | 	wrlong	result1, objptr
2345c     44 00 00 FF 
23460     10 E5 85 F1 | 	sub	objptr, ##35088
23464     F2 FA 01 F6 | 	mov	result1, objptr
23468     00 D0 03 FF 
2346c     00 FA 45 F5 | 	or	result1, ##127926272
23470     44 00 00 FF 
23474     14 E5 05 F1 | 	add	objptr, ##35092
23478     F2 FA 61 FC | 	wrlong	result1, objptr
2347c     44 00 00 FF 
23480     14 E5 85 F1 | 	sub	objptr, ##35092
23484     F2 FA 01 F6 | 	mov	result1, objptr
23488     00 D8 03 FF 
2348c     00 FA 45 F5 | 	or	result1, ##128974848
23490     44 00 00 FF 
23494     18 E5 05 F1 | 	add	objptr, ##35096
23498     F2 FA 61 FC | 	wrlong	result1, objptr
2349c     44 00 00 FF 
234a0     18 E5 85 F1 | 	sub	objptr, ##35096
234a4     F2 FA 01 F6 | 	mov	result1, objptr
234a8     96 FA 25 F4 | 	bith	result1, #150
234ac     44 00 00 FF 
234b0     20 E5 05 F1 | 	add	objptr, ##35104
234b4     F2 FA 61 FC | 	wrlong	result1, objptr
234b8     44 00 00 FF 
234bc     20 E5 85 F1 | 	sub	objptr, ##35104
234c0     F2 FA 01 F6 | 	mov	result1, objptr
234c4     00 E8 03 FF 
234c8     00 FA 45 F5 | 	or	result1, ##131072000
234cc     44 00 00 FF 
234d0     24 E5 05 F1 | 	add	objptr, ##35108
234d4     F2 FA 61 FC | 	wrlong	result1, objptr
234d8     44 00 00 FF 
234dc     24 E5 85 F1 | 	sub	objptr, ##35108
234e0     F2 FA 01 F6 | 	mov	result1, objptr
234e4     B5 FA 25 F4 | 	bith	result1, #181
234e8     44 00 00 FF 
234ec     28 E5 05 F1 | 	add	objptr, ##35112
234f0     F2 FA 61 FC | 	wrlong	result1, objptr
234f4     44 00 00 FF 
234f8     28 E5 85 F1 | 	sub	objptr, ##35112
234fc     F2 FA 01 F6 | 	mov	result1, objptr
23500     D4 FA 25 F4 | 	bith	result1, #212
23504     44 00 00 FF 
23508     2C E5 05 F1 | 	add	objptr, ##35116
2350c     F2 FA 61 FC | 	wrlong	result1, objptr
23510     44 00 00 FF 
23514     2C E5 85 F1 | 	sub	objptr, ##35116
23518     F2 FA 01 F6 | 	mov	result1, objptr
2351c     1B FA 25 F4 | 	bith	result1, #27
23520     44 00 00 FF 
23524     30 E5 05 F1 | 	add	objptr, ##35120
23528     F2 FA 61 FC | 	wrlong	result1, objptr
2352c     44 00 00 FF 
23530     30 E5 85 F1 | 	sub	objptr, ##35120
23534     F2 FA 01 F6 | 	mov	result1, objptr
23538     00 08 04 FF 
2353c     00 FA 45 F5 | 	or	result1, ##135266304
23540     44 00 00 FF 
23544     34 E5 05 F1 | 	add	objptr, ##35124
23548     F2 FA 61 FC | 	wrlong	result1, objptr
2354c     44 00 00 FF 
23550     34 E5 85 F1 | 	sub	objptr, ##35124
23554     F2 FA 01 F6 | 	mov	result1, objptr
23558     00 10 04 FF 
2355c     00 FA 45 F5 | 	or	result1, ##136314880
23560     44 00 00 FF 
23564     3C E5 05 F1 | 	add	objptr, ##35132
23568     F2 FA 61 FC | 	wrlong	result1, objptr
2356c     44 00 00 FF 
23570     3C E5 85 F1 | 	sub	objptr, ##35132
23574     F2 FA 01 F6 | 	mov	result1, objptr
23578     00 18 04 FF 
2357c     00 FA 45 F5 | 	or	result1, ##137363456
23580     44 00 00 FF 
23584     40 E5 05 F1 | 	add	objptr, ##35136
23588     F2 FA 61 FC | 	wrlong	result1, objptr
2358c     44 00 00 FF 
23590     40 E5 85 F1 | 	sub	objptr, ##35136
23594     F2 FA 01 F6 | 	mov	result1, objptr
23598     00 20 04 FF 
2359c     00 FA 45 F5 | 	or	result1, ##138412032
235a0     44 00 00 FF 
235a4     44 E5 05 F1 | 	add	objptr, ##35140
235a8     F2 FA 61 FC | 	wrlong	result1, objptr
235ac     44 00 00 FF 
235b0     44 E5 85 F1 | 	sub	objptr, ##35140
235b4     F2 FA 01 F6 | 	mov	result1, objptr
235b8     00 28 04 FF 
235bc     00 FA 45 F5 | 	or	result1, ##139460608
235c0     44 00 00 FF 
235c4     38 E5 05 F1 | 	add	objptr, ##35128
235c8     F2 FA 61 FC | 	wrlong	result1, objptr
235cc     44 00 00 FF 
235d0     38 E5 85 F1 | 	sub	objptr, ##35128
235d4     F2 FA 01 F6 | 	mov	result1, objptr
235d8     00 30 04 FF 
235dc     00 FA 45 F5 | 	or	result1, ##140509184
235e0     44 00 00 FF 
235e4     48 E5 05 F1 | 	add	objptr, ##35144
235e8     F2 FA 61 FC | 	wrlong	result1, objptr
235ec     44 00 00 FF 
235f0     48 E5 85 F1 | 	sub	objptr, ##35144
235f4     F2 FA 01 F6 | 	mov	result1, objptr
235f8     00 38 04 FF 
235fc     00 FA 45 F5 | 	or	result1, ##141557760
23600     44 00 00 FF 
23604     7C E5 05 F1 | 	add	objptr, ##35196
23608     F2 FA 61 FC | 	wrlong	result1, objptr
2360c     44 00 00 FF 
23610     7C E5 85 F1 | 	sub	objptr, ##35196
23614     F2 FA 01 F6 | 	mov	result1, objptr
23618     00 40 04 FF 
2361c     00 FA 45 F5 | 	or	result1, ##142606336
23620     44 00 00 FF 
23624     74 E5 05 F1 | 	add	objptr, ##35188
23628     F2 FA 61 FC | 	wrlong	result1, objptr
2362c     44 00 00 FF 
23630     74 E5 85 F1 | 	sub	objptr, ##35188
23634     F2 FA 01 F6 | 	mov	result1, objptr
23638     00 48 04 FF 
2363c     00 FA 45 F5 | 	or	result1, ##143654912
23640     44 00 00 FF 
23644     4C E5 05 F1 | 	add	objptr, ##35148
23648     F2 FA 61 FC | 	wrlong	result1, objptr
2364c     44 00 00 FF 
23650     4C E5 85 F1 | 	sub	objptr, ##35148
23654     F2 FA 01 F6 | 	mov	result1, objptr
23658     00 50 04 FF 
2365c     00 FA 45 F5 | 	or	result1, ##144703488
23660     44 00 00 FF 
23664     50 E5 05 F1 | 	add	objptr, ##35152
23668     F2 FA 61 FC | 	wrlong	result1, objptr
2366c     44 00 00 FF 
23670     50 E5 85 F1 | 	sub	objptr, ##35152
23674     F2 FA 01 F6 | 	mov	result1, objptr
23678     00 58 04 FF 
2367c     00 FA 45 F5 | 	or	result1, ##145752064
23680     44 00 00 FF 
23684     6C E5 05 F1 | 	add	objptr, ##35180
23688     F2 FA 61 FC | 	wrlong	result1, objptr
2368c     44 00 00 FF 
23690     6C E5 85 F1 | 	sub	objptr, ##35180
23694     F2 FA 01 F6 | 	mov	result1, objptr
23698     00 60 04 FF 
2369c     00 FA 45 F5 | 	or	result1, ##146800640
236a0     44 00 00 FF 
236a4     70 E5 05 F1 | 	add	objptr, ##35184
236a8     F2 FA 61 FC | 	wrlong	result1, objptr
236ac     44 00 00 FF 
236b0     70 E5 85 F1 | 	sub	objptr, ##35184
236b4     F2 FA 01 F6 | 	mov	result1, objptr
236b8     00 68 04 FF 
236bc     00 FA 45 F5 | 	or	result1, ##147849216
236c0     44 00 00 FF 
236c4     8C E5 05 F1 | 	add	objptr, ##35212
236c8     F2 FA 61 FC | 	wrlong	result1, objptr
236cc     44 00 00 FF 
236d0     8C E5 85 F1 | 	sub	objptr, ##35212
236d4     F2 FA 01 F6 | 	mov	result1, objptr
236d8     00 70 04 FF 
236dc     00 FA 45 F5 | 	or	result1, ##148897792
236e0     44 00 00 FF 
236e4     88 E5 05 F1 | 	add	objptr, ##35208
236e8     F2 FA 61 FC | 	wrlong	result1, objptr
236ec     44 00 00 FF 
236f0     88 E5 85 F1 | 	sub	objptr, ##35208
236f4     F2 FA 01 F6 | 	mov	result1, objptr
236f8     00 78 04 FF 
236fc     00 FA 45 F5 | 	or	result1, ##149946368
23700     44 00 00 FF 
23704     98 E5 05 F1 | 	add	objptr, ##35224
23708     F2 FA 61 FC | 	wrlong	result1, objptr
2370c     44 00 00 FF 
23710     98 E5 85 F1 | 	sub	objptr, ##35224
23714     F2 FA 01 F6 | 	mov	result1, objptr
23718     00 80 04 FF 
2371c     00 FA 45 F5 | 	or	result1, ##150994944
23720     44 00 00 FF 
23724     64 E5 05 F1 | 	add	objptr, ##35172
23728     F2 FA 61 FC | 	wrlong	result1, objptr
2372c     44 00 00 FF 
23730     64 E5 85 F1 | 	sub	objptr, ##35172
23734     F2 FA 01 F6 | 	mov	result1, objptr
23738     00 88 04 FF 
2373c     00 FA 45 F5 | 	or	result1, ##152043520
23740     44 00 00 FF 
23744     94 E5 05 F1 | 	add	objptr, ##35220
23748     F2 FA 61 FC | 	wrlong	result1, objptr
2374c     44 00 00 FF 
23750     94 E5 85 F1 | 	sub	objptr, ##35220
23754     F2 FA 01 F6 | 	mov	result1, objptr
23758     00 90 04 FF 
2375c     00 FA 45 F5 | 	or	result1, ##153092096
23760     44 00 00 FF 
23764     84 E5 05 F1 | 	add	objptr, ##35204
23768     F2 FA 61 FC | 	wrlong	result1, objptr
2376c     44 00 00 FF 
23770     84 E5 85 F1 | 	sub	objptr, ##35204
23774     F2 FA 01 F6 | 	mov	result1, objptr
23778     00 98 04 FF 
2377c     00 FA 45 F5 | 	or	result1, ##154140672
23780     43 00 00 FF 
23784     34 E5 05 F1 | 	add	objptr, ##34612
23788     F2 FA 61 FC | 	wrlong	result1, objptr
2378c     43 00 00 FF 
23790     34 E5 85 F1 | 	sub	objptr, ##34612
23794     F2 FA 01 F6 | 	mov	result1, objptr
23798     00 A0 04 FF 
2379c     00 FA 45 F5 | 	or	result1, ##155189248
237a0     44 00 00 FF 
237a4     54 E5 05 F1 | 	add	objptr, ##35156
237a8     F2 FA 61 FC | 	wrlong	result1, objptr
237ac     44 00 00 FF 
237b0     54 E5 85 F1 | 	sub	objptr, ##35156
237b4     F2 FA 01 F6 | 	mov	result1, objptr
237b8     00 08 01 FF 
237bc     00 FA 45 F5 | 	or	result1, ##34603008
237c0     44 00 00 FF 
237c4     5C E5 05 F1 | 	add	objptr, ##35164
237c8     F2 FA 61 FC | 	wrlong	result1, objptr
237cc     44 00 00 FF 
237d0     5C E5 85 F1 | 	sub	objptr, ##35164
237d4     F2 FA 01 F6 | 	mov	result1, objptr
237d8     00 A8 04 FF 
237dc     00 FA 45 F5 | 	or	result1, ##156237824
237e0     44 00 00 FF 
237e4     58 E5 05 F1 | 	add	objptr, ##35160
237e8     F2 FA 61 FC | 	wrlong	result1, objptr
237ec     44 00 00 FF 
237f0     58 E5 85 F1 | 	sub	objptr, ##35160
237f4     F2 FA 01 F6 | 	mov	result1, objptr
237f8     00 B0 04 FF 
237fc     00 FA 45 F5 | 	or	result1, ##157286400
23800     44 00 00 FF 
23804     9C E5 05 F1 | 	add	objptr, ##35228
23808     F2 FA 61 FC | 	wrlong	result1, objptr
2380c     44 00 00 FF 
23810     9C E5 85 F1 | 	sub	objptr, ##35228
23814     F2 FA 01 F6 | 	mov	result1, objptr
23818     00 B8 04 FF 
2381c     00 FA 45 F5 | 	or	result1, ##158334976
23820     44 00 00 FF 
23824     A0 E5 05 F1 | 	add	objptr, ##35232
23828     F2 FA 61 FC | 	wrlong	result1, objptr
2382c     44 00 00 FF 
23830     A0 E5 85 F1 | 	sub	objptr, ##35232
23834     F2 FA 01 F6 | 	mov	result1, objptr
23838     00 C0 04 FF 
2383c     00 FA 45 F5 | 	or	result1, ##159383552
23840     44 00 00 FF 
23844     A4 E5 05 F1 | 	add	objptr, ##35236
23848     F2 FA 61 FC | 	wrlong	result1, objptr
2384c     44 00 00 FF 
23850     A4 E5 85 F1 | 	sub	objptr, ##35236
23854     F2 FA 01 F6 | 	mov	result1, objptr
23858     00 C8 04 FF 
2385c     00 FA 45 F5 | 	or	result1, ##160432128
23860     44 00 00 FF 
23864     A8 E5 05 F1 | 	add	objptr, ##35240
23868     F2 FA 61 FC | 	wrlong	result1, objptr
2386c     44 00 00 FF 
23870     A8 E5 85 F1 | 	sub	objptr, ##35240
23874     F2 FA 01 F6 | 	mov	result1, objptr
23878     00 D0 04 FF 
2387c     00 FA 45 F5 | 	or	result1, ##161480704
23880     44 00 00 FF 
23884     B0 E5 05 F1 | 	add	objptr, ##35248
23888     F2 FA 61 FC | 	wrlong	result1, objptr
2388c     44 00 00 FF 
23890     B0 E5 85 F1 | 	sub	objptr, ##35248
23894     F2 FA 01 F6 | 	mov	result1, objptr
23898     00 D8 04 FF 
2389c     00 FA 45 F5 | 	or	result1, ##162529280
238a0     44 00 00 FF 
238a4     B4 E5 05 F1 | 	add	objptr, ##35252
238a8     F2 FA 61 FC | 	wrlong	result1, objptr
238ac     44 00 00 FF 
238b0     B4 E5 85 F1 | 	sub	objptr, ##35252
238b4     F2 FA 01 F6 | 	mov	result1, objptr
238b8     00 E0 04 FF 
238bc     00 FA 45 F5 | 	or	result1, ##163577856
238c0     44 00 00 FF 
238c4     B8 E5 05 F1 | 	add	objptr, ##35256
238c8     F2 FA 61 FC | 	wrlong	result1, objptr
238cc     44 00 00 FF 
238d0     B8 E5 85 F1 | 	sub	objptr, ##35256
238d4     F2 FA 01 F6 | 	mov	result1, objptr
238d8     00 E8 04 FF 
238dc     00 FA 45 F5 | 	or	result1, ##164626432
238e0     44 00 00 FF 
238e4     D8 E5 05 F1 | 	add	objptr, ##35288
238e8     F2 FA 61 FC | 	wrlong	result1, objptr
238ec     44 00 00 FF 
238f0     D8 E5 85 F1 | 	sub	objptr, ##35288
238f4     F2 FA 01 F6 | 	mov	result1, objptr
238f8     00 F0 04 FF 
238fc     00 FA 45 F5 | 	or	result1, ##165675008
23900     44 00 00 FF 
23904     D4 E5 05 F1 | 	add	objptr, ##35284
23908     F2 FA 61 FC | 	wrlong	result1, objptr
2390c     44 00 00 FF 
23910     D4 E5 85 F1 | 	sub	objptr, ##35284
23914     F2 FA 01 F6 | 	mov	result1, objptr
23918     00 F8 04 FF 
2391c     00 FA 45 F5 | 	or	result1, ##166723584
23920     44 00 00 FF 
23924     90 E5 05 F1 | 	add	objptr, ##35216
23928     F2 FA 61 FC | 	wrlong	result1, objptr
2392c     44 00 00 FF 
23930     90 E5 85 F1 | 	sub	objptr, ##35216
23934     F2 FA 01 F6 | 	mov	result1, objptr
23938     00 00 05 FF 
2393c     00 FA 45 F5 | 	or	result1, ##167772160
23940     44 00 00 FF 
23944     80 E5 05 F1 | 	add	objptr, ##35200
23948     F2 FA 61 FC | 	wrlong	result1, objptr
2394c     44 00 00 FF 
23950     80 E5 85 F1 | 	sub	objptr, ##35200
23954     F2 FA 01 F6 | 	mov	result1, objptr
23958     00 08 05 FF 
2395c     00 FA 45 F5 | 	or	result1, ##168820736
23960     44 00 00 FF 
23964     BC E5 05 F1 | 	add	objptr, ##35260
23968     F2 FA 61 FC | 	wrlong	result1, objptr
2396c     44 00 00 FF 
23970     BC E5 85 F1 | 	sub	objptr, ##35260
23974     F2 FA 01 F6 | 	mov	result1, objptr
23978     00 10 05 FF 
2397c     00 FA 45 F5 | 	or	result1, ##169869312
23980     44 00 00 FF 
23984     C0 E5 05 F1 | 	add	objptr, ##35264
23988     F2 FA 61 FC | 	wrlong	result1, objptr
2398c     44 00 00 FF 
23990     C0 E5 85 F1 | 	sub	objptr, ##35264
23994     F2 FA 01 F6 | 	mov	result1, objptr
23998     00 18 05 FF 
2399c     00 FA 45 F5 | 	or	result1, ##170917888
239a0     44 00 00 FF 
239a4     C4 E5 05 F1 | 	add	objptr, ##35268
239a8     F2 FA 61 FC | 	wrlong	result1, objptr
239ac     44 00 00 FF 
239b0     C4 E5 85 F1 | 	sub	objptr, ##35268
239b4     F2 FA 01 F6 | 	mov	result1, objptr
239b8     00 20 05 FF 
239bc     00 FA 45 F5 | 	or	result1, ##171966464
239c0     44 00 00 FF 
239c4     C8 E5 05 F1 | 	add	objptr, ##35272
239c8     F2 FA 61 FC | 	wrlong	result1, objptr
239cc     44 00 00 FF 
239d0     C8 E5 85 F1 | 	sub	objptr, ##35272
239d4     F2 FA 01 F6 | 	mov	result1, objptr
239d8     00 28 05 FF 
239dc     00 FA 45 F5 | 	or	result1, ##173015040
239e0     44 00 00 FF 
239e4     CC E5 05 F1 | 	add	objptr, ##35276
239e8     F2 FA 61 FC | 	wrlong	result1, objptr
239ec     44 00 00 FF 
239f0     CC E5 85 F1 | 	sub	objptr, ##35276
239f4     F2 FA 01 F6 | 	mov	result1, objptr
239f8     00 30 05 FF 
239fc     00 FA 45 F5 | 	or	result1, ##174063616
23a00     44 00 00 FF 
23a04     E4 E5 05 F1 | 	add	objptr, ##35300
23a08     F2 FA 61 FC | 	wrlong	result1, objptr
23a0c     44 00 00 FF 
23a10     E4 E5 85 F1 | 	sub	objptr, ##35300
23a14     F2 FA 01 F6 | 	mov	result1, objptr
23a18     00 38 05 FF 
23a1c     00 FA 45 F5 | 	or	result1, ##175112192
23a20     44 00 00 FF 
23a24     D0 E5 05 F1 | 	add	objptr, ##35280
23a28     F2 FA 61 FC | 	wrlong	result1, objptr
23a2c     44 00 00 FF 
23a30     D0 E5 85 F1 | 	sub	objptr, ##35280
23a34     F2 FA 01 F6 | 	mov	result1, objptr
23a38     00 40 05 FF 
23a3c     00 FA 45 F5 | 	or	result1, ##176160768
23a40     44 00 00 FF 
23a44     DC E5 05 F1 | 	add	objptr, ##35292
23a48     F2 FA 61 FC | 	wrlong	result1, objptr
23a4c     44 00 00 FF 
23a50     DC E5 85 F1 | 	sub	objptr, ##35292
23a54     F2 FA 01 F6 | 	mov	result1, objptr
23a58     00 48 05 FF 
23a5c     00 FA 45 F5 | 	or	result1, ##177209344
23a60     44 00 00 FF 
23a64     E0 E5 05 F1 | 	add	objptr, ##35296
23a68     F2 FA 61 FC | 	wrlong	result1, objptr
23a6c     44 00 00 FF 
23a70     E0 E5 85 F1 | 	sub	objptr, ##35296
23a74                 | _init_commands_ret
23a74     2D 00 64 FD | 	ret
23a78                 | 
23a78                 | ' 
23a78                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
23a78                 | ' 
23a78                 | ' sub init_audio
23a78                 | _init_audio
23a78     06 4A 05 F6 | 	mov	COUNT_, #6
23a7c     A8 00 A0 FD | 	call	#pushregs_
23a80     00 C0 1F FF 
23a84     00 26 06 F6 | 	mov	local01, ##1065353216
23a88                 | ' 
23a88                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
23a88     00 28 06 F6 | 	mov	local02, #0
23a8c                 | LR__2700
23a8c     14 2B 02 F6 | 	mov	local03, local02
23a90     01 2A 66 F0 | 	shl	local03, #1
23a94     58 7F 23 FF 
23a98     00 2C 06 F6 | 	mov	local04, ##1191096320
23a9c     14 13 52 F6 | 	abs	arg01, local02 wc
23aa0     1F 2E C6 C9 |  if_b	decod	local05, #31
23aa4     00 2E 06 36 |  if_ae	mov	local05, #0
23aa8     E0 70 B0 FD | 	call	#__system___float_fromuns
23aac     17 FB 61 F5 | 	xor	result1, local05
23ab0     FD 12 02 F6 | 	mov	arg01, result1
23ab4     87 24 20 FF 
23ab8     DB 15 06 F6 | 	mov	arg02, ##1078530011
23abc     D0 74 B0 FD | 	call	#__system___float_mul
23ac0     FD 12 02 F6 | 	mov	arg01, result1
23ac4     00 00 22 FF 
23ac8     00 14 06 F6 | 	mov	arg02, ##1140850688
23acc     C4 76 B0 FD | 	call	#__system___float_div
23ad0     FD 12 02 F6 | 	mov	arg01, result1
23ad4     1C 7E B0 FD | 	call	#__system____builtin_sinf
23ad8     FD 14 02 F6 | 	mov	arg02, result1
23adc     16 13 02 F6 | 	mov	arg01, local04
23ae0     AC 74 B0 FD | 	call	#__system___float_mul
23ae4     FD 12 02 F6 | 	mov	arg01, result1
23ae8     01 14 06 F6 | 	mov	arg02, #1
23aec     68 79 B0 FD | 	call	#__system___float_tointeger
23af0     FD 14 02 F6 | 	mov	arg02, result1
23af4     15 13 02 F6 | 	mov	arg01, local03
23af8     A8 0D B0 FD | 	call	#_psdpoke
23afc     01 28 06 F1 | 	add	local02, #1
23b00     02 00 00 FF 
23b04     00 28 56 F2 | 	cmps	local02, ##1024 wc
23b08     80 FF 9F CD |  if_b	jmp	#LR__2700
23b0c                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
23b0c     00 28 06 F6 | 	mov	local02, #0
23b10                 | LR__2701
23b10     14 15 02 F6 | 	mov	arg02, local02
23b14     01 14 66 F0 | 	shl	arg02, #1
23b18     0B 12 C6 F9 | 	decod	arg01, #11
23b1c     0A 13 02 F1 | 	add	arg01, arg02
23b20     14 2D 02 F6 | 	mov	local04, local02
23b24     07 2C 66 F0 | 	shl	local04, #7
23b28     14 2D 82 F1 | 	sub	local04, local02
23b2c     C0 FF 7F FF 
23b30     00 15 06 F6 | 	mov	arg02, ##-32512
23b34     16 15 02 F1 | 	add	arg02, local04
23b38     68 0D B0 FD | 	call	#_psdpoke
23b3c     09 2C C6 F9 | 	decod	local04, #9
23b40     14 2D 02 F1 | 	add	local04, local02
23b44     01 2C 66 F0 | 	shl	local04, #1
23b48     0B 12 C6 F9 | 	decod	arg01, #11
23b4c     16 13 02 F1 | 	add	arg01, local04
23b50     14 2F 02 F6 | 	mov	local05, local02
23b54     07 2E 66 F0 | 	shl	local05, #7
23b58     14 2F 82 F1 | 	sub	local05, local02
23b5c     3F 00 00 FF 
23b60     00 15 06 F6 | 	mov	arg02, ##32512
23b64     17 15 82 F1 | 	sub	arg02, local05
23b68     38 0D B0 FD | 	call	#_psdpoke
23b6c     01 28 06 F1 | 	add	local02, #1
23b70     01 00 00 FF 
23b74     00 28 56 F2 | 	cmps	local02, ##512 wc
23b78     94 FF 9F CD |  if_b	jmp	#LR__2701
23b7c                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
23b7c     00 28 06 F6 | 	mov	local02, #0
23b80                 | LR__2702
23b80     14 2F 02 F6 | 	mov	local05, local02
23b84     01 2E 66 F0 | 	shl	local05, #1
23b88     0C 12 C6 F9 | 	decod	arg01, #12
23b8c     17 13 02 F1 | 	add	arg01, local05
23b90     14 2F 02 F6 | 	mov	local05, local02
23b94     06 2E 66 F0 | 	shl	local05, #6
23b98     14 2F 82 F1 | 	sub	local05, local02
23b9c     C1 FF 7F FF 
23ba0     00 14 06 F6 | 	mov	arg02, ##-32256
23ba4     17 15 02 F1 | 	add	arg02, local05
23ba8     F8 0C B0 FD | 	call	#_psdpoke
23bac     01 28 06 F1 | 	add	local02, #1
23bb0     02 00 00 FF 
23bb4     00 28 56 F2 | 	cmps	local02, ##1024 wc
23bb8     C4 FF 9F CD |  if_b	jmp	#LR__2702
23bbc                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
23bbc     00 28 06 F6 | 	mov	local02, #0
23bc0                 | LR__2703
23bc0     14 2F 02 F6 | 	mov	local05, local02
23bc4     01 2E 66 F0 | 	shl	local05, #1
23bc8     0C 00 00 FF 
23bcc     00 12 06 F6 | 	mov	arg01, ##6144
23bd0     17 13 02 F1 | 	add	arg01, local05
23bd4     C0 FF 7F FF 
23bd8     A8 14 06 F6 | 	mov	arg02, ##-32600
23bdc     C4 0C B0 FD | 	call	#_psdpoke
23be0     01 28 06 F1 | 	add	local02, #1
23be4     80 28 56 F2 | 	cmps	local02, #128 wc
23be8     D4 FF 9F CD |  if_b	jmp	#LR__2703
23bec     80 28 06 F6 | 	mov	local02, #128
23bf0                 | LR__2704
23bf0     14 2F 02 F6 | 	mov	local05, local02
23bf4     01 2E 66 F0 | 	shl	local05, #1
23bf8     0C 00 00 FF 
23bfc     00 12 06 F6 | 	mov	arg01, ##6144
23c00     17 13 02 F1 | 	add	arg01, local05
23c04     3F 00 00 FF 
23c08     58 15 06 F6 | 	mov	arg02, ##32600
23c0c     94 0C B0 FD | 	call	#_psdpoke
23c10     01 28 06 F1 | 	add	local02, #1
23c14     02 00 00 FF 
23c18     00 28 16 F2 | 	cmp	local02, ##1024 wc
23c1c     D0 FF 9F CD |  if_b	jmp	#LR__2704
23c20                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
23c20     00 28 06 F6 | 	mov	local02, #0
23c24                 | LR__2705
23c24     14 2F 02 F6 | 	mov	local05, local02
23c28     01 2E 66 F0 | 	shl	local05, #1
23c2c     0D 12 C6 F9 | 	decod	arg01, #13
23c30     17 13 02 F1 | 	add	arg01, local05
23c34     C0 FF 7F FF 
23c38     A8 14 06 F6 | 	mov	arg02, ##-32600
23c3c     64 0C B0 FD | 	call	#_psdpoke
23c40     01 28 06 F1 | 	add	local02, #1
23c44     01 00 00 FF 
23c48     00 28 56 F2 | 	cmps	local02, ##512 wc
23c4c     D4 FF 9F CD |  if_b	jmp	#LR__2705
23c50     09 28 C6 F9 | 	decod	local02, #9
23c54                 | LR__2706
23c54     14 2F 02 F6 | 	mov	local05, local02
23c58     01 2E 66 F0 | 	shl	local05, #1
23c5c     0D 12 C6 F9 | 	decod	arg01, #13
23c60     17 13 02 F1 | 	add	arg01, local05
23c64     3F 00 00 FF 
23c68     58 15 06 F6 | 	mov	arg02, ##32600
23c6c     34 0C B0 FD | 	call	#_psdpoke
23c70     01 28 06 F1 | 	add	local02, #1
23c74     02 00 00 FF 
23c78     00 28 16 F2 | 	cmp	local02, ##1024 wc
23c7c     D4 FF 9F CD |  if_b	jmp	#LR__2706
23c80                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
23c80     00 28 06 F6 | 	mov	local02, #0
23c84                 | LR__2707
23c84     14 2F 02 F6 | 	mov	local05, local02
23c88     01 2E 66 F0 | 	shl	local05, #1
23c8c     14 00 00 FF 
23c90     00 12 06 F6 | 	mov	arg01, ##10240
23c94     17 13 02 F1 | 	add	arg01, local05
23c98     C0 FF 7F FF 
23c9c     A8 14 06 F6 | 	mov	arg02, ##-32600
23ca0     00 0C B0 FD | 	call	#_psdpoke
23ca4     01 28 06 F1 | 	add	local02, #1
23ca8     00 29 56 F2 | 	cmps	local02, #256 wc
23cac     D4 FF 9F CD |  if_b	jmp	#LR__2707
23cb0     00 29 06 F6 | 	mov	local02, #256
23cb4                 | LR__2708
23cb4     14 2F 02 F6 | 	mov	local05, local02
23cb8     01 2E 66 F0 | 	shl	local05, #1
23cbc     14 00 00 FF 
23cc0     00 12 06 F6 | 	mov	arg01, ##10240
23cc4     17 13 02 F1 | 	add	arg01, local05
23cc8     3F 00 00 FF 
23ccc     58 15 06 F6 | 	mov	arg02, ##32600
23cd0     D0 0B B0 FD | 	call	#_psdpoke
23cd4     01 28 06 F1 | 	add	local02, #1
23cd8     02 00 00 FF 
23cdc     00 28 16 F2 | 	cmp	local02, ##1024 wc
23ce0     D0 FF 9F CD |  if_b	jmp	#LR__2708
23ce4                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
23ce4     18 00 00 FF 
23ce8     00 28 06 F6 | 	mov	local02, ##12288
23cec                 | LR__2709
23cec     14 13 02 F6 | 	mov	arg01, local02
23cf0     00 14 06 F6 | 	mov	arg02, #0
23cf4     64 0B B0 FD | 	call	#_pslpoke
23cf8     04 28 06 F1 | 	add	local02, #4
23cfc     77 00 00 FF 
23d00     FD 29 56 F2 | 	cmps	local02, ##61437 wc
23d04     E4 FF 9F CD |  if_b	jmp	#LR__2709
23d08                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
23d08     00 28 06 F6 | 	mov	local02, #0
23d0c                 | LR__2710
23d0c     14 2F 02 F6 | 	mov	local05, local02
23d10     01 2E 66 F0 | 	shl	local05, #1
23d14     78 00 00 FF 
23d18     00 2A 06 F6 | 	mov	local03, ##61440
23d1c     17 2B 02 F1 | 	add	local03, local05
23d20     12 00 00 FF 
23d24     BA EA 05 F1 | 	add	ptr__dat__, ##9402
23d28     F5 12 02 F6 | 	mov	arg01, ptr__dat__
23d2c     12 00 00 FF 
23d30     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
23d34     10 12 06 F1 | 	add	arg01, #16
23d38     14 15 02 F6 | 	mov	arg02, local02
23d3c     01 14 66 F0 | 	shl	arg02, #1
23d40     0A 13 02 F1 | 	add	arg01, arg02
23d44     09 15 E2 FA | 	rdword	arg02, arg01
23d48     15 13 02 F6 | 	mov	arg01, local03
23d4c     54 0B B0 FD | 	call	#_psdpoke
23d50     01 28 06 F1 | 	add	local02, #1
23d54     02 00 00 FF 
23d58     00 28 56 F2 | 	cmps	local02, ##1024 wc
23d5c     AC FF 9F CD |  if_b	jmp	#LR__2710
23d60                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
23d60     00 28 06 F6 | 	mov	local02, #0
23d64                 | LR__2711
23d64     14 2F 02 F6 | 	mov	local05, local02
23d68     01 2E 66 F0 | 	shl	local05, #1
23d6c     7C 00 00 FF 
23d70     00 2A 06 F6 | 	mov	local03, ##63488
23d74     17 2B 02 F1 | 	add	local03, local05
23d78     0E 00 00 FF 
23d7c     AA EA 05 F1 | 	add	ptr__dat__, ##7338
23d80     F5 12 02 F6 | 	mov	arg01, ptr__dat__
23d84     0E 00 00 FF 
23d88     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
23d8c     10 12 06 F1 | 	add	arg01, #16
23d90     14 15 02 F6 | 	mov	arg02, local02
23d94     01 14 66 F0 | 	shl	arg02, #1
23d98     0A 13 02 F1 | 	add	arg01, arg02
23d9c     09 15 E2 FA | 	rdword	arg02, arg01
23da0     15 13 02 F6 | 	mov	arg01, local03
23da4     FC 0A B0 FD | 	call	#_psdpoke
23da8     01 28 06 F1 | 	add	local02, #1
23dac     02 00 00 FF 
23db0     00 28 56 F2 | 	cmps	local02, ##1024 wc
23db4     AC FF 9F CD |  if_b	jmp	#LR__2711
23db8                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
23db8     00 28 06 F6 | 	mov	local02, #0
23dbc     0C 00 00 FF 
23dc0     D8 E4 05 F1 | 	add	objptr, ##6360
23dc4     97 18 48 FB | 	callpa	#(@LR__2713-@LR__2712)>>2,fcache_load_ptr_
23dc8                 | LR__2712
23dc8     14 2F 02 F6 | 	mov	local05, local02
23dcc     01 2E 66 F0 | 	shl	local05, #1
23dd0     F2 2E 02 F1 | 	add	local05, objptr
23dd4     14 2B 02 F6 | 	mov	local03, local02
23dd8     08 2A 66 F0 | 	shl	local03, #8
23ddc     7F 00 00 FF 
23de0     00 31 06 F6 | 	mov	local06, ##65280
23de4     15 31 82 F1 | 	sub	local06, local03
23de8     17 31 52 FC | 	wrword	local06, local05
23dec     01 28 06 F1 | 	add	local02, #1
23df0     00 29 56 F2 | 	cmps	local02, #256 wc
23df4     D0 FF 9F CD |  if_b	jmp	#LR__2712
23df8                 | LR__2713
23df8     0C 00 00 FF 
23dfc     D8 E4 85 F1 | 	sub	objptr, ##6360
23e00                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
23e00     00 28 06 F6 | 	mov	local02, #0
23e04                 | LR__2714
23e04     14 2F 02 F6 | 	mov	local05, local02
23e08     01 2E 66 F0 | 	shl	local05, #1
23e0c     0D 00 00 FF 
23e10     D8 E4 05 F1 | 	add	objptr, ##6872
23e14     F2 2E 02 F1 | 	add	local05, objptr
23e18     80 BF 23 FF 
23e1c     00 12 06 F6 | 	mov	arg01, ##1199505408
23e20     13 15 02 F6 | 	mov	arg02, local01
23e24     0D 00 00 FF 
23e28     D8 E4 85 F1 | 	sub	objptr, ##6872
23e2c     60 71 B0 FD | 	call	#__system___float_mul
23e30     FD 12 02 F6 | 	mov	arg01, result1
23e34     01 14 06 F6 | 	mov	arg02, #1
23e38     1C 76 B0 FD | 	call	#__system___float_tointeger
23e3c     17 FB 51 FC | 	wrword	result1, local05
23e40     13 13 02 F6 | 	mov	arg01, local01
23e44     CC BC 1F FF 
23e48     9A 15 06 F6 | 	mov	arg02, ##1064933786
23e4c     40 71 B0 FD | 	call	#__system___float_mul
23e50     FD 26 02 F6 | 	mov	local01, result1
23e54     01 28 06 F1 | 	add	local02, #1
23e58     00 29 56 F2 | 	cmps	local02, #256 wc
23e5c     A4 FF 9F CD |  if_b	jmp	#LR__2714
23e60     0E 00 00 FF 
23e64     D6 E4 05 F1 | 	add	objptr, ##7382
23e68     F2 00 58 FC | 	wrword	#0, objptr
23e6c                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
23e6c     00 28 06 F6 | 	mov	local02, #0
23e70     02 E4 05 F1 | 	add	objptr, #2
23e74     97 10 48 FB | 	callpa	#(@LR__2716-@LR__2715)>>2,fcache_load_ptr_
23e78                 | LR__2715
23e78     14 2F 02 F6 | 	mov	local05, local02
23e7c     01 2E 66 F0 | 	shl	local05, #1
23e80     F2 2E 02 F1 | 	add	local05, objptr
23e84     7F 00 80 FF 
23e88     17 01 5A FC | 	wrword	##65280, local05
23e8c     01 28 06 F1 | 	add	local02, #1
23e90     FF 28 56 F2 | 	cmps	local02, #255 wc
23e94     E0 FF 9F CD |  if_b	jmp	#LR__2715
23e98                 | LR__2716
23e98     FE E5 05 F1 | 	add	objptr, #510
23e9c     F2 00 58 FC | 	wrword	#0, objptr
23ea0                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
23ea0     00 28 06 F6 | 	mov	local02, #0
23ea4     02 E4 05 F1 | 	add	objptr, #2
23ea8     97 12 48 FB | 	callpa	#(@LR__2718-@LR__2717)>>2,fcache_load_ptr_
23eac                 | LR__2717
23eac     14 2F 02 F6 | 	mov	local05, local02
23eb0     01 2E 66 F0 | 	shl	local05, #1
23eb4     F2 2E 02 F1 | 	add	local05, objptr
23eb8     14 31 02 F6 | 	mov	local06, local02
23ebc     0C 30 66 F0 | 	shl	local06, #12
23ec0     17 31 52 FC | 	wrword	local06, local05
23ec4     01 28 06 F1 | 	add	local02, #1
23ec8     10 28 56 F2 | 	cmps	local02, #16 wc
23ecc     DC FF 9F CD |  if_b	jmp	#LR__2717
23ed0                 | LR__2718
23ed0                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
23ed0     10 28 06 F6 | 	mov	local02, #16
23ed4     97 10 48 FB | 	callpa	#(@LR__2720-@LR__2719)>>2,fcache_load_ptr_
23ed8                 | LR__2719
23ed8     14 2F 02 F6 | 	mov	local05, local02
23edc     01 2E 66 F0 | 	shl	local05, #1
23ee0     F2 2E 02 F1 | 	add	local05, objptr
23ee4     7F 00 80 FF 
23ee8     17 01 5A FC | 	wrword	##65280, local05
23eec     01 28 06 F1 | 	add	local02, #1
23ef0     F0 28 16 F2 | 	cmp	local02, #240 wc
23ef4     E0 FF 9F CD |  if_b	jmp	#LR__2719
23ef8                 | LR__2720
23ef8                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
23ef8     F0 28 06 F6 | 	mov	local02, #240
23efc     97 14 48 FB | 	callpa	#(@LR__2722-@LR__2721)>>2,fcache_load_ptr_
23f00                 | LR__2721
23f00     14 2F 02 F6 | 	mov	local05, local02
23f04     01 2E 66 F0 | 	shl	local05, #1
23f08     F2 2E 02 F1 | 	add	local05, objptr
23f0c     FF 2A 06 F6 | 	mov	local03, #255
23f10     14 2B 82 F1 | 	sub	local03, local02
23f14     0C 2A 66 F0 | 	shl	local03, #12
23f18     17 2B 52 FC | 	wrword	local03, local05
23f1c     01 28 06 F1 | 	add	local02, #1
23f20     00 29 16 F2 | 	cmp	local02, #256 wc
23f24     D8 FF 9F CD |  if_b	jmp	#LR__2721
23f28                 | LR__2722
23f28                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
23f28     00 28 06 F6 | 	mov	local02, #0
23f2c     01 00 00 FF 
23f30     00 E4 05 F1 | 	add	objptr, ##512
23f34     97 12 48 FB | 	callpa	#(@LR__2724-@LR__2723)>>2,fcache_load_ptr_
23f38                 | LR__2723
23f38     14 2F 02 F6 | 	mov	local05, local02
23f3c     01 2E 66 F0 | 	shl	local05, #1
23f40     F2 2E 02 F1 | 	add	local05, objptr
23f44     14 31 02 F6 | 	mov	local06, local02
23f48     08 30 66 F0 | 	shl	local06, #8
23f4c     17 31 52 FC | 	wrword	local06, local05
23f50     01 28 06 F1 | 	add	local02, #1
23f54     00 29 56 F2 | 	cmps	local02, #256 wc
23f58     DC FF 9F CD |  if_b	jmp	#LR__2723
23f5c                 | LR__2724
23f5c     FE E5 05 F1 | 	add	objptr, #510
23f60     F2 00 58 FC | 	wrword	#0, objptr
23f64                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
23f64     00 28 06 F6 | 	mov	local02, #0
23f68     02 E4 05 F1 | 	add	objptr, #2
23f6c     97 16 48 FB | 	callpa	#(@LR__2726-@LR__2725)>>2,fcache_load_ptr_
23f70                 | LR__2725
23f70     14 2F 02 F6 | 	mov	local05, local02
23f74     01 2E 66 F0 | 	shl	local05, #1
23f78     F2 2E 02 F1 | 	add	local05, objptr
23f7c     14 31 02 F6 | 	mov	local06, local02
23f80     04 30 66 F0 | 	shl	local06, #4
23f84     14 31 02 F1 | 	add	local06, local02
23f88     04 30 66 F0 | 	shl	local06, #4
23f8c     17 31 52 FC | 	wrword	local06, local05
23f90     01 28 06 F1 | 	add	local02, #1
23f94     F0 28 56 F2 | 	cmps	local02, #240 wc
23f98     D4 FF 9F CD |  if_b	jmp	#LR__2725
23f9c                 | LR__2726
23f9c     F0 28 06 F6 | 	mov	local02, #240
23fa0     97 14 48 FB | 	callpa	#(@LR__2728-@LR__2727)>>2,fcache_load_ptr_
23fa4                 | LR__2727
23fa4     14 2F 02 F6 | 	mov	local05, local02
23fa8     01 2E 66 F0 | 	shl	local05, #1
23fac     F2 2E 02 F1 | 	add	local05, objptr
23fb0     FF 2A 06 F6 | 	mov	local03, #255
23fb4     14 2B 82 F1 | 	sub	local03, local02
23fb8     0C 2A 66 F0 | 	shl	local03, #12
23fbc     17 2B 52 FC | 	wrword	local03, local05
23fc0     01 28 06 F1 | 	add	local02, #1
23fc4     00 29 16 F2 | 	cmp	local02, #256 wc
23fc8     D8 FF 9F CD |  if_b	jmp	#LR__2727
23fcc                 | LR__2728
23fcc                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
23fcc     00 28 06 F6 | 	mov	local02, #0
23fd0     01 00 00 FF 
23fd4     00 E4 05 F1 | 	add	objptr, ##512
23fd8     97 20 48 FB | 	callpa	#(@LR__2730-@LR__2729)>>2,fcache_load_ptr_
23fdc                 | LR__2729
23fdc     14 2F 02 F6 | 	mov	local05, local02
23fe0     01 2E 66 F0 | 	shl	local05, #1
23fe4     F2 2E 02 F1 | 	add	local05, objptr
23fe8     14 31 02 F6 | 	mov	local06, local02
23fec     09 30 66 F0 | 	shl	local06, #9
23ff0     17 31 52 FC | 	wrword	local06, local05
23ff4     FF 2E 06 F6 | 	mov	local05, #255
23ff8     14 2F 82 F1 | 	sub	local05, local02
23ffc     01 2E 66 F0 | 	shl	local05, #1
24000     F2 2E 02 F1 | 	add	local05, objptr
24004     14 31 02 F6 | 	mov	local06, local02
24008     09 30 66 F0 | 	shl	local06, #9
2400c     17 31 52 FC | 	wrword	local06, local05
24010     01 28 06 F1 | 	add	local02, #1
24014     80 28 56 F2 | 	cmps	local02, #128 wc
24018     C0 FF 9F CD |  if_b	jmp	#LR__2729
2401c                 | LR__2730
2401c                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
2401c     00 28 06 F6 | 	mov	local02, #0
24020     01 00 00 FF 
24024     00 E4 05 F1 | 	add	objptr, ##512
24028     97 12 48 FB | 	callpa	#(@LR__2732-@LR__2731)>>2,fcache_load_ptr_
2402c                 | LR__2731
2402c     14 2F 02 F6 | 	mov	local05, local02
24030     01 2E 66 F0 | 	shl	local05, #1
24034     F2 2E 02 F1 | 	add	local05, objptr
24038     14 31 02 F6 | 	mov	local06, local02
2403c     0D 30 66 F0 | 	shl	local06, #13
24040     17 31 52 FC | 	wrword	local06, local05
24044     01 28 06 F1 | 	add	local02, #1
24048     08 28 56 F2 | 	cmps	local02, #8 wc
2404c     DC FF 9F CD |  if_b	jmp	#LR__2731
24050                 | LR__2732
24050                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
24050     08 28 06 F6 | 	mov	local02, #8
24054     97 1A 48 FB | 	callpa	#(@LR__2734-@LR__2733)>>2,fcache_load_ptr_
24058                 | LR__2733
24058     14 2F 02 F6 | 	mov	local05, local02
2405c     01 2E 66 F0 | 	shl	local05, #1
24060     F2 2E 02 F1 | 	add	local05, objptr
24064     14 27 02 F6 | 	mov	local01, local02
24068     08 26 86 F1 | 	sub	local01, #8
2406c     0B 26 66 F0 | 	shl	local01, #11
24070     7F 00 00 FF 
24074     00 31 06 F6 | 	mov	local06, ##65280
24078     13 31 82 F1 | 	sub	local06, local01
2407c     17 31 52 FC | 	wrword	local06, local05
24080     01 28 06 F1 | 	add	local02, #1
24084     18 28 16 F2 | 	cmp	local02, #24 wc
24088     CC FF 9F CD |  if_b	jmp	#LR__2733
2408c                 | LR__2734
2408c                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
2408c     18 28 06 F6 | 	mov	local02, #24
24090     97 10 48 FB | 	callpa	#(@LR__2736-@LR__2735)>>2,fcache_load_ptr_
24094                 | LR__2735
24094     14 2F 02 F6 | 	mov	local05, local02
24098     01 2E 66 F0 | 	shl	local05, #1
2409c     F2 2E 02 F1 | 	add	local05, objptr
240a0     40 00 80 FF 
240a4     17 01 58 FC | 	wrword	##32768, local05
240a8     01 28 06 F1 | 	add	local02, #1
240ac     81 28 16 F2 | 	cmp	local02, #129 wc
240b0     E0 FF 9F CD |  if_b	jmp	#LR__2735
240b4                 | LR__2736
240b4                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
240b4     81 28 06 F6 | 	mov	local02, #129
240b8     97 14 48 FB | 	callpa	#(@LR__2738-@LR__2737)>>2,fcache_load_ptr_
240bc                 | LR__2737
240bc     14 2F 02 F6 | 	mov	local05, local02
240c0     01 2E 66 F0 | 	shl	local05, #1
240c4     F2 2E 02 F1 | 	add	local05, objptr
240c8     FF 2A 06 F6 | 	mov	local03, #255
240cc     14 2B 82 F1 | 	sub	local03, local02
240d0     08 2A 66 F0 | 	shl	local03, #8
240d4     17 2B 52 FC | 	wrword	local03, local05
240d8     01 28 06 F1 | 	add	local02, #1
240dc     00 29 16 F2 | 	cmp	local02, #256 wc
240e0     D8 FF 9F CD |  if_b	jmp	#LR__2737
240e4                 | LR__2738
240e4     3F 00 00 FF 
240e8     42 E4 05 F1 | 	add	objptr, ##32322
240ec     F2 00 59 FC | 	wrword	#128, objptr
240f0     52 00 00 FF 
240f4     1A E5 85 F1 | 	sub	objptr, ##42266
240f8                 | ' for i=0 to 7
240f8     00 28 06 F6 | 	mov	local02, #0
240fc     97 9C 48 FB | 	callpa	#(@LR__2740-@LR__2739)>>2,fcache_load_ptr_
24100                 | LR__2739
24100     14 2F 02 F6 | 	mov	local05, local02
24104     03 2E 66 F0 | 	shl	local05, #3
24108     14 2F 82 F1 | 	sub	local05, local02
2410c     02 2E 66 F0 | 	shl	local05, #2
24110     14 00 00 FF 
24114     38 E5 05 F1 | 	add	objptr, ##10552
24118     F2 2E 02 F1 | 	add	local05, objptr
2411c     00 EE A1 FF 
24120     17 01 68 FC | 	wrlong	##1138491392, local05
24124     14 2F 02 F6 | 	mov	local05, local02
24128     03 2E 66 F0 | 	shl	local05, #3
2412c     14 2F 82 F1 | 	sub	local05, local02
24130     02 2E 66 F0 | 	shl	local05, #2
24134     F2 2E 02 F1 | 	add	local05, objptr
24138     04 2E 06 F1 | 	add	local05, #4
2413c     17 29 42 FC | 	wrbyte	local02, local05
24140     14 2F 02 F6 | 	mov	local05, local02
24144     03 2E 66 F0 | 	shl	local05, #3
24148     14 2F 82 F1 | 	sub	local05, local02
2414c     02 2E 66 F0 | 	shl	local05, #2
24150     F2 2E 02 F1 | 	add	local05, objptr
24154     05 2E 06 F1 | 	add	local05, #5
24158     17 29 42 FC | 	wrbyte	local02, local05
2415c     14 2F 02 F6 | 	mov	local05, local02
24160     03 2E 66 F0 | 	shl	local05, #3
24164     14 2F 82 F1 | 	sub	local05, local02
24168     02 2E 66 F0 | 	shl	local05, #2
2416c     F2 2E 02 F1 | 	add	local05, objptr
24170     06 2E 06 F1 | 	add	local05, #6
24174     17 01 58 FC | 	wrword	#0, local05
24178     14 2F 02 F6 | 	mov	local05, local02
2417c     03 2E 66 F0 | 	shl	local05, #3
24180     14 2F 82 F1 | 	sub	local05, local02
24184     02 2E 66 F0 | 	shl	local05, #2
24188     F2 2E 02 F1 | 	add	local05, objptr
2418c     08 2E 06 F1 | 	add	local05, #8
24190     00 C0 9F FF 
24194     17 01 68 FC | 	wrlong	##1065353216, local05
24198     14 2F 02 F6 | 	mov	local05, local02
2419c     03 2E 66 F0 | 	shl	local05, #3
241a0     14 2F 82 F1 | 	sub	local05, local02
241a4     02 2E 66 F0 | 	shl	local05, #2
241a8     F2 2E 02 F1 | 	add	local05, objptr
241ac     0C 2E 06 F1 | 	add	local05, #12
241b0     00 40 A0 FF 
241b4     17 01 68 FC | 	wrlong	##1082130432, local05
241b8     14 2F 02 F6 | 	mov	local05, local02
241bc     03 2E 66 F0 | 	shl	local05, #3
241c0     14 2F 82 F1 | 	sub	local05, local02
241c4     02 2E 66 F0 | 	shl	local05, #2
241c8     F2 2E 02 F1 | 	add	local05, objptr
241cc     10 2E 06 F1 | 	add	local05, #16
241d0     17 01 68 FC | 	wrlong	#0, local05
241d4     14 2F 02 F6 | 	mov	local05, local02
241d8     03 2E 66 F0 | 	shl	local05, #3
241dc     14 2F 82 F1 | 	sub	local05, local02
241e0     02 2E 66 F0 | 	shl	local05, #2
241e4     F2 2E 02 F1 | 	add	local05, objptr
241e8     14 2E 06 F1 | 	add	local05, #20
241ec     17 FF 59 FC | 	wrword	#255, local05
241f0     14 2F 02 F6 | 	mov	local05, local02
241f4     03 2E 66 F0 | 	shl	local05, #3
241f8     14 2F 82 F1 | 	sub	local05, local02
241fc     02 2E 66 F0 | 	shl	local05, #2
24200     F2 2E 02 F1 | 	add	local05, objptr
24204     16 2E 06 F1 | 	add	local05, #22
24208     17 01 58 FC | 	wrword	#0, local05
2420c     14 2F 02 F6 | 	mov	local05, local02
24210     01 2E 66 F0 | 	shl	local05, #1
24214     3D 00 00 FF 
24218     D4 E5 05 F1 | 	add	objptr, ##31700
2421c     F2 2E 02 F1 | 	add	local05, objptr
24220     17 FF 59 FC | 	wrword	#255, local05
24224     01 28 06 F1 | 	add	local02, #1
24228     08 28 56 F2 | 	cmps	local02, #8 wc
2422c     52 00 00 FF 
24230     0C E5 85 F1 | 	sub	objptr, ##42252
24234     C8 FE 9F CD |  if_b	jmp	#LR__2739
24238                 | LR__2740
24238     00 6E 20 FF 
2423c     00 30 06 F6 | 	mov	local06, ##1088159744
24240                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
24240     03 2E 06 F6 | 	mov	local05, #3
24244                 | LR__2741
24244     18 13 02 F6 | 	mov	arg01, local06
24248     CE C3 1F FF 
2424c     7D 14 06 F6 | 	mov	arg02, ##1065852029
24250     3C 6D B0 FD | 	call	#__system___float_mul
24254     FD 30 02 F6 | 	mov	local06, result1
24258     FA 2F 6E FB | 	djnz	local05, #LR__2741
2425c     00 28 06 F6 | 	mov	local02, #0
24260                 | LR__2742
24260     14 2D 02 F6 | 	mov	local04, local02
24264     02 2C 66 F0 | 	shl	local04, #2
24268     14 00 00 FF 
2426c     D8 E4 05 F1 | 	add	objptr, ##10456
24270     F2 2C 02 F1 | 	add	local04, objptr
24274     16 31 62 FC | 	wrlong	local06, local04
24278     18 13 02 F6 | 	mov	arg01, local06
2427c     CE C3 1F FF 
24280     7D 14 06 F6 | 	mov	arg02, ##1065852029
24284     14 00 00 FF 
24288     D8 E4 85 F1 | 	sub	objptr, ##10456
2428c     00 6D B0 FD | 	call	#__system___float_mul
24290     FD 30 02 F6 | 	mov	local06, result1
24294     01 28 06 F1 | 	add	local02, #1
24298     0C 28 56 F2 | 	cmps	local02, #12 wc
2429c     C0 FF 9F CD |  if_b	jmp	#LR__2742
242a0     14 00 00 FF 
242a4     08 E5 05 F1 | 	add	objptr, ##10504
242a8     F2 50 6B FC | 	wrlong	#424, objptr
242ac     04 E4 05 F1 | 	add	objptr, #4
242b0     F2 20 6B FC | 	wrlong	#400, objptr
242b4     04 E4 05 F1 | 	add	objptr, #4
242b8     F2 F2 6A FC | 	wrlong	#377, objptr
242bc     04 E4 05 F1 | 	add	objptr, #4
242c0     F2 C8 6A FC | 	wrlong	#356, objptr
242c4     04 E4 05 F1 | 	add	objptr, #4
242c8     F2 A0 6A FC | 	wrlong	#336, objptr
242cc     04 E4 05 F1 | 	add	objptr, #4
242d0     F2 7A 6A FC | 	wrlong	#317, objptr
242d4     04 E4 05 F1 | 	add	objptr, #4
242d8     F2 58 6A FC | 	wrlong	#300, objptr
242dc     04 E4 05 F1 | 	add	objptr, #4
242e0     F2 36 6A FC | 	wrlong	#283, objptr
242e4     04 E4 05 F1 | 	add	objptr, #4
242e8     F2 16 6A FC | 	wrlong	#267, objptr
242ec     04 E4 05 F1 | 	add	objptr, #4
242f0     F2 F8 69 FC | 	wrlong	#252, objptr
242f4     04 E4 05 F1 | 	add	objptr, #4
242f8     F2 DC 69 FC | 	wrlong	#238, objptr
242fc     04 E4 05 F1 | 	add	objptr, #4
24300     F2 C0 69 FC | 	wrlong	#224, objptr
24304     3D 00 00 FF 
24308     E6 E5 05 F1 | 	add	objptr, ##31718
2430c     F2 00 59 FC | 	wrword	#128, objptr
24310     02 E4 85 F1 | 	sub	objptr, #2
24314     F2 00 59 FC | 	wrword	#128, objptr
24318     52 00 00 FF 
2431c     18 E5 85 F1 | 	sub	objptr, ##42264
24320     A7 F0 03 F6 | 	mov	ptra, fp
24324     B2 00 A0 FD | 	call	#popregs_
24328                 | _init_audio_ret
24328     2D 00 64 FD | 	ret
2432c                 | 
2432c                 | ' 
2432c                 | ' '------------------- Error messages
2432c                 | ' 
2432c                 | ' sub init_error_strings
2432c                 | _init_error_strings
2432c     C4 01 00 FF 
24330     D4 00 06 F6 | 	mov	_var01, ##@LR__6146
24334     45 00 00 FF 
24338     9C E4 05 F1 | 	add	objptr, ##35484
2433c     F2 00 62 FC | 	wrlong	_var01, objptr
24340     C4 01 00 FF 
24344     D5 00 06 F6 | 	mov	_var01, ##@LR__6147
24348     04 E4 05 F1 | 	add	objptr, #4
2434c     F2 00 62 FC | 	wrlong	_var01, objptr
24350     C4 01 00 FF 
24354     F9 00 06 F6 | 	mov	_var01, ##@LR__6148
24358     04 E4 05 F1 | 	add	objptr, #4
2435c     F2 00 62 FC | 	wrlong	_var01, objptr
24360     C4 01 00 FF 
24364     19 01 06 F6 | 	mov	_var01, ##@LR__6149
24368     04 E4 05 F1 | 	add	objptr, #4
2436c     F2 00 62 FC | 	wrlong	_var01, objptr
24370     C4 01 00 FF 
24374     32 01 06 F6 | 	mov	_var01, ##@LR__6150
24378     04 E4 05 F1 | 	add	objptr, #4
2437c     F2 00 62 FC | 	wrlong	_var01, objptr
24380     C4 01 00 FF 
24384     4D 01 06 F6 | 	mov	_var01, ##@LR__6151
24388     04 E4 05 F1 | 	add	objptr, #4
2438c     F2 00 62 FC | 	wrlong	_var01, objptr
24390     C4 01 00 FF 
24394     6E 01 06 F6 | 	mov	_var01, ##@LR__6152
24398     04 E4 05 F1 | 	add	objptr, #4
2439c     F2 00 62 FC | 	wrlong	_var01, objptr
243a0     C4 01 00 FF 
243a4     9B 01 06 F6 | 	mov	_var01, ##@LR__6153
243a8     04 E4 05 F1 | 	add	objptr, #4
243ac     F2 00 62 FC | 	wrlong	_var01, objptr
243b0     C4 01 00 FF 
243b4     C5 01 06 F6 | 	mov	_var01, ##@LR__6154
243b8     04 E4 05 F1 | 	add	objptr, #4
243bc     F2 00 62 FC | 	wrlong	_var01, objptr
243c0     C4 01 00 FF 
243c4     DD 01 06 F6 | 	mov	_var01, ##@LR__6155
243c8     04 E4 05 F1 | 	add	objptr, #4
243cc     F2 00 62 FC | 	wrlong	_var01, objptr
243d0     C4 01 00 FF 
243d4     FD 01 06 F6 | 	mov	_var01, ##@LR__6156
243d8     04 E4 05 F1 | 	add	objptr, #4
243dc     F2 00 62 FC | 	wrlong	_var01, objptr
243e0     C5 01 00 FF 
243e4     13 00 06 F6 | 	mov	_var01, ##@LR__6157
243e8     04 E4 05 F1 | 	add	objptr, #4
243ec     F2 00 62 FC | 	wrlong	_var01, objptr
243f0     C5 01 00 FF 
243f4     30 00 06 F6 | 	mov	_var01, ##@LR__6158
243f8     04 E4 05 F1 | 	add	objptr, #4
243fc     F2 00 62 FC | 	wrlong	_var01, objptr
24400     C5 01 00 FF 
24404     53 00 06 F6 | 	mov	_var01, ##@LR__6159
24408     04 E4 05 F1 | 	add	objptr, #4
2440c     F2 00 62 FC | 	wrlong	_var01, objptr
24410     C5 01 00 FF 
24414     79 00 06 F6 | 	mov	_var01, ##@LR__6160
24418     04 E4 05 F1 | 	add	objptr, #4
2441c     F2 00 62 FC | 	wrlong	_var01, objptr
24420     C5 01 00 FF 
24424     94 00 06 F6 | 	mov	_var01, ##@LR__6161
24428     04 E4 05 F1 | 	add	objptr, #4
2442c     F2 00 62 FC | 	wrlong	_var01, objptr
24430     C5 01 00 FF 
24434     A4 00 06 F6 | 	mov	_var01, ##@LR__6162
24438     04 E4 05 F1 | 	add	objptr, #4
2443c     F2 00 62 FC | 	wrlong	_var01, objptr
24440     C5 01 00 FF 
24444     B3 00 06 F6 | 	mov	_var01, ##@LR__6163
24448     04 E4 05 F1 | 	add	objptr, #4
2444c     F2 00 62 FC | 	wrlong	_var01, objptr
24450     C5 01 00 FF 
24454     CD 00 06 F6 | 	mov	_var01, ##@LR__6164
24458     04 E4 05 F1 | 	add	objptr, #4
2445c     F2 00 62 FC | 	wrlong	_var01, objptr
24460     C5 01 00 FF 
24464     DE 00 06 F6 | 	mov	_var01, ##@LR__6165
24468     04 E4 05 F1 | 	add	objptr, #4
2446c     F2 00 62 FC | 	wrlong	_var01, objptr
24470     C5 01 00 FF 
24474     F5 00 06 F6 | 	mov	_var01, ##@LR__6166
24478     04 E4 05 F1 | 	add	objptr, #4
2447c     F2 00 62 FC | 	wrlong	_var01, objptr
24480     C5 01 00 FF 
24484     08 01 06 F6 | 	mov	_var01, ##@LR__6167
24488     04 E4 05 F1 | 	add	objptr, #4
2448c     F2 00 62 FC | 	wrlong	_var01, objptr
24490     C5 01 00 FF 
24494     17 01 06 F6 | 	mov	_var01, ##@LR__6168
24498     04 E4 05 F1 | 	add	objptr, #4
2449c     F2 00 62 FC | 	wrlong	_var01, objptr
244a0     C5 01 00 FF 
244a4     33 01 06 F6 | 	mov	_var01, ##@LR__6169
244a8     04 E4 05 F1 | 	add	objptr, #4
244ac     F2 00 62 FC | 	wrlong	_var01, objptr
244b0     C5 01 00 FF 
244b4     43 01 06 F6 | 	mov	_var01, ##@LR__6170
244b8     04 E4 05 F1 | 	add	objptr, #4
244bc     F2 00 62 FC | 	wrlong	_var01, objptr
244c0     C5 01 00 FF 
244c4     53 01 06 F6 | 	mov	_var01, ##@LR__6171
244c8     04 E4 05 F1 | 	add	objptr, #4
244cc     F2 00 62 FC | 	wrlong	_var01, objptr
244d0     C5 01 00 FF 
244d4     86 01 06 F6 | 	mov	_var01, ##@LR__6172
244d8     04 E4 05 F1 | 	add	objptr, #4
244dc     F2 00 62 FC | 	wrlong	_var01, objptr
244e0     C5 01 00 FF 
244e4     A1 01 06 F6 | 	mov	_var01, ##@LR__6173
244e8     04 E4 05 F1 | 	add	objptr, #4
244ec     F2 00 62 FC | 	wrlong	_var01, objptr
244f0     C5 01 00 FF 
244f4     B6 01 06 F6 | 	mov	_var01, ##@LR__6174
244f8     04 E4 05 F1 | 	add	objptr, #4
244fc     F2 00 62 FC | 	wrlong	_var01, objptr
24500     C5 01 00 FF 
24504     C2 01 06 F6 | 	mov	_var01, ##@LR__6175
24508     04 E4 05 F1 | 	add	objptr, #4
2450c     F2 00 62 FC | 	wrlong	_var01, objptr
24510     C5 01 00 FF 
24514     D3 01 06 F6 | 	mov	_var01, ##@LR__6176
24518     04 E4 05 F1 | 	add	objptr, #4
2451c     F2 00 62 FC | 	wrlong	_var01, objptr
24520     C5 01 00 FF 
24524     E3 01 06 F6 | 	mov	_var01, ##@LR__6177
24528     04 E4 05 F1 | 	add	objptr, #4
2452c     F2 00 62 FC | 	wrlong	_var01, objptr
24530     C5 01 00 FF 
24534     FE 01 06 F6 | 	mov	_var01, ##@LR__6178
24538     04 E4 05 F1 | 	add	objptr, #4
2453c     F2 00 62 FC | 	wrlong	_var01, objptr
24540     C6 01 00 FF 
24544     0E 00 06 F6 | 	mov	_var01, ##@LR__6179
24548     04 E4 05 F1 | 	add	objptr, #4
2454c     F2 00 62 FC | 	wrlong	_var01, objptr
24550     C6 01 00 FF 
24554     1C 00 06 F6 | 	mov	_var01, ##@LR__6180
24558     04 E4 05 F1 | 	add	objptr, #4
2455c     F2 00 62 FC | 	wrlong	_var01, objptr
24560     C6 01 00 FF 
24564     36 00 06 F6 | 	mov	_var01, ##@LR__6181
24568     04 E4 05 F1 | 	add	objptr, #4
2456c     F2 00 62 FC | 	wrlong	_var01, objptr
24570     C6 01 00 FF 
24574     69 00 06 F6 | 	mov	_var01, ##@LR__6182
24578     04 E4 05 F1 | 	add	objptr, #4
2457c     F2 00 62 FC | 	wrlong	_var01, objptr
24580     C6 01 00 FF 
24584     81 00 06 F6 | 	mov	_var01, ##@LR__6183
24588     04 E4 05 F1 | 	add	objptr, #4
2458c     F2 00 62 FC | 	wrlong	_var01, objptr
24590     C6 01 00 FF 
24594     9C 00 06 F6 | 	mov	_var01, ##@LR__6184
24598     04 E4 05 F1 | 	add	objptr, #4
2459c     F2 00 62 FC | 	wrlong	_var01, objptr
245a0     C6 01 00 FF 
245a4     B9 00 06 F6 | 	mov	_var01, ##@LR__6185
245a8     04 E4 05 F1 | 	add	objptr, #4
245ac     F2 00 62 FC | 	wrlong	_var01, objptr
245b0     C6 01 00 FF 
245b4     D2 00 06 F6 | 	mov	_var01, ##@LR__6186
245b8     04 E4 05 F1 | 	add	objptr, #4
245bc     F2 00 62 FC | 	wrlong	_var01, objptr
245c0     C6 01 00 FF 
245c4     F1 00 06 F6 | 	mov	_var01, ##@LR__6187
245c8     04 E4 05 F1 | 	add	objptr, #4
245cc     F2 00 62 FC | 	wrlong	_var01, objptr
245d0     C6 01 00 FF 
245d4     FF 00 06 F6 | 	mov	_var01, ##@LR__6188
245d8     04 E4 05 F1 | 	add	objptr, #4
245dc     F2 00 62 FC | 	wrlong	_var01, objptr
245e0     C6 01 00 FF 
245e4     2C 01 06 F6 | 	mov	_var01, ##@LR__6189
245e8     04 E4 05 F1 | 	add	objptr, #4
245ec     F2 00 62 FC | 	wrlong	_var01, objptr
245f0     C6 01 00 FF 
245f4     39 01 06 F6 | 	mov	_var01, ##@LR__6190
245f8     04 E4 05 F1 | 	add	objptr, #4
245fc     F2 00 62 FC | 	wrlong	_var01, objptr
24600     C6 01 00 FF 
24604     4D 01 06 F6 | 	mov	_var01, ##@LR__6191
24608     04 E4 05 F1 | 	add	objptr, #4
2460c     F2 00 62 FC | 	wrlong	_var01, objptr
24610     C6 01 00 FF 
24614     71 01 06 F6 | 	mov	_var01, ##@LR__6192
24618     04 E4 05 F1 | 	add	objptr, #4
2461c     F2 00 62 FC | 	wrlong	_var01, objptr
24620     C6 01 00 FF 
24624     88 01 06 F6 | 	mov	_var01, ##@LR__6193
24628     04 E4 05 F1 | 	add	objptr, #4
2462c     F2 00 62 FC | 	wrlong	_var01, objptr
24630     C6 01 00 FF 
24634     9B 01 06 F6 | 	mov	_var01, ##@LR__6194
24638     04 E4 05 F1 | 	add	objptr, #4
2463c     F2 00 62 FC | 	wrlong	_var01, objptr
24640     C6 01 00 FF 
24644     B2 01 06 F6 | 	mov	_var01, ##@LR__6195
24648     04 E4 05 F1 | 	add	objptr, #4
2464c     F2 00 62 FC | 	wrlong	_var01, objptr
24650     C6 01 00 FF 
24654     CB 01 06 F6 | 	mov	_var01, ##@LR__6196
24658     04 E4 05 F1 | 	add	objptr, #4
2465c     F2 00 62 FC | 	wrlong	_var01, objptr
24660     C6 01 00 FF 
24664     ED 01 06 F6 | 	mov	_var01, ##@LR__6197
24668     04 E4 05 F1 | 	add	objptr, #4
2466c     F2 00 62 FC | 	wrlong	_var01, objptr
24670     C7 01 00 FF 
24674     00 00 06 F6 | 	mov	_var01, ##@LR__6198
24678     04 E4 05 F1 | 	add	objptr, #4
2467c     F2 00 62 FC | 	wrlong	_var01, objptr
24680     C7 01 00 FF 
24684     10 00 06 F6 | 	mov	_var01, ##@LR__6199
24688     04 E4 05 F1 | 	add	objptr, #4
2468c     F2 00 62 FC | 	wrlong	_var01, objptr
24690     C7 01 00 FF 
24694     28 00 06 F6 | 	mov	_var01, ##@LR__6200
24698     04 E4 05 F1 | 	add	objptr, #4
2469c     F2 00 62 FC | 	wrlong	_var01, objptr
246a0     C7 01 00 FF 
246a4     3F 00 06 F6 | 	mov	_var01, ##@LR__6201
246a8     04 E4 05 F1 | 	add	objptr, #4
246ac     F2 00 62 FC | 	wrlong	_var01, objptr
246b0     45 00 00 FF 
246b4     78 E5 85 F1 | 	sub	objptr, ##35704
246b8                 | _init_error_strings_ret
246b8     2D 00 64 FD | 	ret
246bc                 | 
246bc                 | '         
246bc                 | ' sub printerror(err as integer, linenum=0 as integer)
246bc                 | _printerror
246bc     02 4A 05 F6 | 	mov	COUNT_, #2
246c0     A8 00 A0 FD | 	call	#pushregs_
246c4     09 27 02 F6 | 	mov	local01, arg01
246c8     0A 29 02 F6 | 	mov	local02, arg02
246cc     C7 01 00 FF 
246d0     4C 12 06 F6 | 	mov	arg01, ##@LR__6202
246d4     A0 21 B0 FD | 	call	#_hg010b_spin2_write
246d8     13 13 02 F6 | 	mov	arg01, local01
246dc     DC 26 B0 FD | 	call	#_hg010b_spin2_inttostr
246e0     FD 12 02 F6 | 	mov	arg01, result1
246e4     90 21 B0 FD | 	call	#_hg010b_spin2_write
246e8     C7 01 00 FF 
246ec     53 12 06 F6 | 	mov	arg01, ##@LR__6203
246f0     84 21 B0 FD | 	call	#_hg010b_spin2_write
246f4     02 26 66 F0 | 	shl	local01, #2
246f8     45 00 00 FF 
246fc     9C E4 05 F1 | 	add	objptr, ##35484
24700     F2 26 02 F1 | 	add	local01, objptr
24704     13 13 02 FB | 	rdlong	arg01, local01
24708     45 00 00 FF 
2470c     9C E4 85 F1 | 	sub	objptr, ##35484
24710     64 21 B0 FD | 	call	#_hg010b_spin2_write
24714                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
24714                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
24714     01 28 56 F2 | 	cmps	local02, #1 wc
24718     24 00 90 CD |  if_b	jmp	#LR__2750
2471c     C7 01 00 FF 
24720     57 12 06 F6 | 	mov	arg01, ##@LR__6204
24724     50 21 B0 FD | 	call	#_hg010b_spin2_write
24728     14 13 02 F6 | 	mov	arg01, local02
2472c     8C 26 B0 FD | 	call	#_hg010b_spin2_inttostr
24730     FD 12 02 F6 | 	mov	arg01, result1
24734                 | ' 
24734                 | ' write(text)
24734     40 21 B0 FD | 	call	#_hg010b_spin2_write
24738                 | ' crlf
24738     DC 25 B0 FD | 	call	#_hg010b_spin2_crlf
2473c     10 00 90 FD | 	jmp	#LR__2751
24740                 | LR__2750
24740     C7 01 00 FF 
24744     61 12 06 F6 | 	mov	arg01, ##@LR__6205
24748                 | ' 
24748                 | ' write(text)
24748     2C 21 B0 FD | 	call	#_hg010b_spin2_write
2474c                 | ' crlf
2474c     C8 25 B0 FD | 	call	#_hg010b_spin2_crlf
24750                 | LR__2751
24750     A7 F0 03 F6 | 	mov	ptra, fp
24754     B2 00 A0 FD | 	call	#popregs_
24758                 | _printerror_ret
24758     2D 00 64 FD | 	ret
2475c                 | 
2475c                 | ' 
2475c                 | ' '' ------------------------------- Hardware start/stop/initialization 
2475c                 | ' 
2475c                 | ' sub startpsram
2475c                 | _startpsram
2475c     00 12 06 F6 | 	mov	arg01, #0
24760     0A 14 C6 F9 | 	decod	arg02, #10
24764     0B 16 06 F6 | 	mov	arg03, #11
24768     07 18 06 F6 | 	mov	arg04, #7
2476c     0B 00 00 FF 
24770     CC E4 05 F1 | 	add	objptr, ##5836
24774     CC 2A B0 FD | 	call	#_psram_spin2_startx
24778     2B 00 00 FF 
2477c     5C E5 05 F1 | 	add	objptr, ##22364
24780     F2 FA 61 FC | 	wrlong	result1, objptr
24784                 | '     return $7FF00 + cog*12
24784     0C E4 05 F1 | 	add	objptr, #12
24788     FF 03 80 FF 
2478c     F2 00 6A FC | 	wrlong	##524032, objptr
24790     37 00 00 FF 
24794     34 E4 85 F1 | 	sub	objptr, ##28212
24798                 | _startpsram_ret
24798     2D 00 64 FD | 	ret
2479c                 | 
2479c                 | ' 
2479c                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
2479c                 | _startvideo
2479c     01 4A 05 F6 | 	mov	COUNT_, #1
247a0     A8 00 A0 FD | 	call	#pushregs_
247a4     37 00 00 FF 
247a8     34 E4 05 F1 | 	add	objptr, ##28212
247ac     F2 18 02 FB | 	rdlong	arg04, objptr
247b0     37 00 00 FF 
247b4     34 E4 85 F1 | 	sub	objptr, ##28212
247b8     0A 13 02 F6 | 	mov	arg01, arg02
247bc     0C 15 02 F6 | 	mov	arg02, arg04
247c0     20 08 B0 FD | 	call	#_hg010b_spin2_start
247c4     37 00 00 FF 
247c8     20 E4 05 F1 | 	add	objptr, ##28192
247cc     F2 FA 61 FC | 	wrlong	result1, objptr
247d0                 | ' 
247d0                 | ' videocog=v.start(pin,mbox)
247d0                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
247d0     00 26 06 F6 | 	mov	local01, #0
247d4     2B 00 00 FF 
247d8     54 E5 85 F1 | 	sub	objptr, ##22356
247dc                 | LR__2760
247dc     13 13 02 F6 | 	mov	arg01, local01
247e0     00 28 00 FF 
247e4     00 14 06 F6 | 	mov	arg02, ##5242880
247e8     B0 2E B0 FD | 	call	#_psram_spin2_setQos
247ec     01 26 06 F1 | 	add	local01, #1
247f0     08 26 56 F2 | 	cmps	local01, #8 wc
247f4     E4 FF 9F CD |  if_b	jmp	#LR__2760
247f8     2B 00 00 FF 
247fc     54 E5 05 F1 | 	add	objptr, ##22356
24800     F2 12 02 FB | 	rdlong	arg01, objptr
24804     7A 00 02 FF 
24808     00 14 06 F6 | 	mov	arg02, ##67171328
2480c     2B 00 00 FF 
24810     54 E5 85 F1 | 	sub	objptr, ##22356
24814     84 2E B0 FD | 	call	#_psram_spin2_setQos
24818     0B 00 00 FF 
2481c     CC E4 85 F1 | 	sub	objptr, ##5836
24820                 | ' psram.setQoS(videocog, $0400f400) 
24820                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
24820     F2 14 02 F6 | 	mov	arg02, objptr
24824     00 50 05 FF 
24828     00 14 46 F5 | 	or	arg02, ##178257920
2482c     00 16 06 F6 | 	mov	arg03, #0
24830     00 18 06 F6 | 	mov	arg04, #0
24834     00 12 06 F6 | 	mov	arg01, #0
24838     80 43 B0 FD | 	call	#__system___basic_open
2483c                 | ' return videocog
2483c     37 00 00 FF 
24840     20 E4 05 F1 | 	add	objptr, ##28192
24844     F2 FA 01 FB | 	rdlong	result1, objptr
24848     37 00 00 FF 
2484c     20 E4 85 F1 | 	sub	objptr, ##28192
24850     A7 F0 03 F6 | 	mov	ptra, fp
24854     B2 00 A0 FD | 	call	#popregs_
24858                 | _startvideo_ret
24858     2D 00 64 FD | 	ret
2485c                 | 
2485c                 | ' 
2485c                 | ' 
2485c                 | ' 
2485c                 | ' '' ------------------------------- Convenient psram peek/poke
2485c                 | ' 
2485c                 | ' sub pslpoke(addr as ulong,value as ulong)
2485c                 | _pslpoke
2485c     00 4A 05 F6 | 	mov	COUNT_, #0
24860     A8 00 A0 FD | 	call	#pushregs_
24864     08 F0 07 F1 | 	add	ptra, #8
24868     A7 12 62 FC | 	wrlong	arg01, fp
2486c     04 4E 05 F1 | 	add	fp, #4
24870     A7 14 62 FC | 	wrlong	arg02, fp
24874     A7 12 02 F6 | 	mov	arg01, fp
24878     04 4E 85 F1 | 	sub	fp, #4
2487c     A7 14 02 FB | 	rdlong	arg02, fp
24880     04 16 06 F6 | 	mov	arg03, #4
24884     0B 00 00 FF 
24888     CC E4 05 F1 | 	add	objptr, ##5836
2488c     7C 2C B0 FD | 	call	#_psram_spin2_write
24890     0B 00 00 FF 
24894     CC E4 85 F1 | 	sub	objptr, ##5836
24898     A7 F0 03 F6 | 	mov	ptra, fp
2489c     B2 00 A0 FD | 	call	#popregs_
248a0                 | _pslpoke_ret
248a0     2D 00 64 FD | 	ret
248a4                 | 
248a4                 | ' 
248a4                 | ' sub psdpoke(addr as ulong,value as ulong)
248a4                 | _psdpoke
248a4     00 4A 05 F6 | 	mov	COUNT_, #0
248a8     A8 00 A0 FD | 	call	#pushregs_
248ac     08 F0 07 F1 | 	add	ptra, #8
248b0     A7 12 62 FC | 	wrlong	arg01, fp
248b4     04 4E 05 F1 | 	add	fp, #4
248b8     A7 14 62 FC | 	wrlong	arg02, fp
248bc     A7 12 02 F6 | 	mov	arg01, fp
248c0     04 4E 85 F1 | 	sub	fp, #4
248c4     A7 14 02 FB | 	rdlong	arg02, fp
248c8     02 16 06 F6 | 	mov	arg03, #2
248cc     0B 00 00 FF 
248d0     CC E4 05 F1 | 	add	objptr, ##5836
248d4     34 2C B0 FD | 	call	#_psram_spin2_write
248d8     0B 00 00 FF 
248dc     CC E4 85 F1 | 	sub	objptr, ##5836
248e0     A7 F0 03 F6 | 	mov	ptra, fp
248e4     B2 00 A0 FD | 	call	#popregs_
248e8                 | _psdpoke_ret
248e8     2D 00 64 FD | 	ret
248ec                 | 
248ec                 | ' 
248ec                 | ' sub pspoke(addr as ulong,value as ulong)
248ec                 | _pspoke
248ec     00 4A 05 F6 | 	mov	COUNT_, #0
248f0     A8 00 A0 FD | 	call	#pushregs_
248f4     08 F0 07 F1 | 	add	ptra, #8
248f8     A7 12 62 FC | 	wrlong	arg01, fp
248fc     04 4E 05 F1 | 	add	fp, #4
24900     A7 14 62 FC | 	wrlong	arg02, fp
24904     A7 12 02 F6 | 	mov	arg01, fp
24908     04 4E 85 F1 | 	sub	fp, #4
2490c     A7 14 02 FB | 	rdlong	arg02, fp
24910     01 16 06 F6 | 	mov	arg03, #1
24914     0B 00 00 FF 
24918     CC E4 05 F1 | 	add	objptr, ##5836
2491c     EC 2B B0 FD | 	call	#_psram_spin2_write
24920     0B 00 00 FF 
24924     CC E4 85 F1 | 	sub	objptr, ##5836
24928     A7 F0 03 F6 | 	mov	ptra, fp
2492c     B2 00 A0 FD | 	call	#popregs_
24930                 | _pspoke_ret
24930     2D 00 64 FD | 	ret
24934                 | 
24934                 | ' 
24934                 | ' function pspeek(adr as ulong) as ubyte
24934                 | _pspeek
24934     00 4A 05 F6 | 	mov	COUNT_, #0
24938     A8 00 A0 FD | 	call	#pushregs_
2493c     0C F0 07 F1 | 	add	ptra, #12
24940     04 4E 05 F1 | 	add	fp, #4
24944     A7 12 62 FC | 	wrlong	arg01, fp
24948     04 4E 05 F1 | 	add	fp, #4
2494c     A7 12 02 F6 | 	mov	arg01, fp
24950     04 4E 85 F1 | 	sub	fp, #4
24954     A7 14 02 FB | 	rdlong	arg02, fp
24958     04 4E 85 F1 | 	sub	fp, #4
2495c     01 16 06 F6 | 	mov	arg03, #1
24960     0B 00 00 FF 
24964     CC E4 05 F1 | 	add	objptr, ##5836
24968     04 2B B0 FD | 	call	#_psram_spin2_read1
2496c     0B 00 00 FF 
24970     CC E4 85 F1 | 	sub	objptr, ##5836
24974                 | ' psram.read1(varptr(res),adr,1)
24974                 | ' return res
24974     08 4E 05 F1 | 	add	fp, #8
24978     A7 FA C1 FA | 	rdbyte	result1, fp
2497c     08 4E 85 F1 | 	sub	fp, #8
24980     A7 F0 03 F6 | 	mov	ptra, fp
24984     B2 00 A0 FD | 	call	#popregs_
24988                 | _pspeek_ret
24988     2D 00 64 FD | 	ret
2498c                 | 
2498c                 | ' 
2498c                 | ' function pslpeek(adr as ulong) as ulong
2498c                 | _pslpeek
2498c     00 4A 05 F6 | 	mov	COUNT_, #0
24990     A8 00 A0 FD | 	call	#pushregs_
24994     0C F0 07 F1 | 	add	ptra, #12
24998     04 4E 05 F1 | 	add	fp, #4
2499c     A7 12 62 FC | 	wrlong	arg01, fp
249a0     04 4E 05 F1 | 	add	fp, #4
249a4     A7 12 02 F6 | 	mov	arg01, fp
249a8     04 4E 85 F1 | 	sub	fp, #4
249ac     A7 14 02 FB | 	rdlong	arg02, fp
249b0     04 4E 85 F1 | 	sub	fp, #4
249b4     04 16 06 F6 | 	mov	arg03, #4
249b8     0B 00 00 FF 
249bc     CC E4 05 F1 | 	add	objptr, ##5836
249c0     AC 2A B0 FD | 	call	#_psram_spin2_read1
249c4     0B 00 00 FF 
249c8     CC E4 85 F1 | 	sub	objptr, ##5836
249cc                 | ' psram.read1(varptr(res),adr,4)
249cc                 | ' return res
249cc     08 4E 05 F1 | 	add	fp, #8
249d0     A7 FA 01 FB | 	rdlong	result1, fp
249d4     08 4E 85 F1 | 	sub	fp, #8
249d8     A7 F0 03 F6 | 	mov	ptra, fp
249dc     B2 00 A0 FD | 	call	#popregs_
249e0                 | _pslpeek_ret
249e0     2D 00 64 FD | 	ret
249e4                 | 
249e4                 | ' 
249e4                 | ' function psdpeek(adr as ulong) as ulong
249e4                 | _psdpeek
249e4     00 4A 05 F6 | 	mov	COUNT_, #0
249e8     A8 00 A0 FD | 	call	#pushregs_
249ec     0C F0 07 F1 | 	add	ptra, #12
249f0     04 4E 05 F1 | 	add	fp, #4
249f4     A7 12 62 FC | 	wrlong	arg01, fp
249f8     04 4E 05 F1 | 	add	fp, #4
249fc     A7 12 02 F6 | 	mov	arg01, fp
24a00     04 4E 85 F1 | 	sub	fp, #4
24a04     A7 14 02 FB | 	rdlong	arg02, fp
24a08     04 4E 85 F1 | 	sub	fp, #4
24a0c     02 16 06 F6 | 	mov	arg03, #2
24a10     0B 00 00 FF 
24a14     CC E4 05 F1 | 	add	objptr, ##5836
24a18     54 2A B0 FD | 	call	#_psram_spin2_read1
24a1c     0B 00 00 FF 
24a20     CC E4 85 F1 | 	sub	objptr, ##5836
24a24                 | ' psram.read1(varptr(res),adr,2)
24a24                 | ' return res
24a24     08 4E 05 F1 | 	add	fp, #8
24a28     A7 FA E1 FA | 	rdword	result1, fp
24a2c     08 4E 85 F1 | 	sub	fp, #8
24a30     A7 F0 03 F6 | 	mov	ptra, fp
24a34     B2 00 A0 FD | 	call	#popregs_
24a38                 | _psdpeek_ret
24a38     2D 00 64 FD | 	ret
24a3c                 | 
24a3c                 | ' 
24a3c                 | ' '' ------------------------------- USB keyboard scan to char translator
24a3c                 | ' 
24a3c                 | ' function scantochar(key)
24a3c                 | _scantochar
24a3c                 | ' 
24a3c                 | ' select case (key shr 8) and 255
24a3c     09 01 02 F6 | 	mov	_var01, arg01
24a40     08 00 C6 F0 | 	sar	_var01, #8
24a44     FF 00 0E F5 | 	and	_var01, #255 wz
24a48     24 00 90 AD |  if_e	jmp	#LR__2770
24a4c     02 00 0E F2 | 	cmp	_var01, #2 wz
24a50     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
24a54     30 00 90 AD |  if_e	jmp	#LR__2771
24a58     40 00 0E F2 | 	cmp	_var01, #64 wz
24a5c     44 00 90 AD |  if_e	jmp	#LR__2772
24a60     42 00 0E F2 | 	cmp	_var01, #66 wz
24a64     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
24a68     70 00 90 5D |  if_ne	jmp	#LR__2774
24a6c     50 00 90 FD | 	jmp	#LR__2773
24a70                 | LR__2770
24a70     09 FB 01 F6 | 	mov	result1, arg01
24a74     7F FA 05 F5 | 	and	result1, #127
24a78     02 FA 65 F0 | 	shl	result1, #2
24a7c     F5 FA 01 F1 | 	add	result1, ptr__dat__
24a80     FD FA C1 FA | 	rdbyte	result1, result1
24a84     54 00 90 FD | 	jmp	#_scantochar_ret
24a88                 | LR__2771
24a88     09 FB 01 F6 | 	mov	result1, arg01
24a8c     7F FA 05 F5 | 	and	result1, #127
24a90     02 FA 65 F0 | 	shl	result1, #2
24a94     01 FA 05 F1 | 	add	result1, #1
24a98     F5 FA 01 F1 | 	add	result1, ptr__dat__
24a9c     FD FA C1 FA | 	rdbyte	result1, result1
24aa0     38 00 90 FD | 	jmp	#_scantochar_ret
24aa4                 | LR__2772
24aa4     09 FB 01 F6 | 	mov	result1, arg01
24aa8     7F FA 05 F5 | 	and	result1, #127
24aac     02 FA 65 F0 | 	shl	result1, #2
24ab0     02 FA 05 F1 | 	add	result1, #2
24ab4     F5 FA 01 F1 | 	add	result1, ptr__dat__
24ab8     FD FA C1 FA | 	rdbyte	result1, result1
24abc     1C 00 90 FD | 	jmp	#_scantochar_ret
24ac0                 | LR__2773
24ac0     09 FB 01 F6 | 	mov	result1, arg01
24ac4     7F FA 05 F5 | 	and	result1, #127
24ac8     02 FA 65 F0 | 	shl	result1, #2
24acc     03 FA 05 F1 | 	add	result1, #3
24ad0     F5 FA 01 F1 | 	add	result1, ptr__dat__
24ad4     FD FA C1 FA | 	rdbyte	result1, result1
24ad8     00 00 90 FD | 	jmp	#_scantochar_ret
24adc                 | LR__2774
24adc                 | _scantochar_ret
24adc     2D 00 64 FD | 	ret
24ae0                 | 
24ae0                 | _program
24ae0     01 4A 05 F6 | 	mov	COUNT_, #1
24ae4     A8 00 A0 FD | 	call	#pushregs_
24ae8     70 FC BF FD | 	call	#_startpsram
24aec     37 00 00 FF 
24af0     34 E4 05 F1 | 	add	objptr, ##28212
24af4     F2 12 02 FB | 	rdlong	arg01, objptr
24af8     00 14 06 F6 | 	mov	arg02, #0
24afc     F0 03 00 FF 
24b00     00 16 06 F6 | 	mov	arg03, ##516096
24b04     2B 00 00 FF 
24b08     68 E5 85 F1 | 	sub	objptr, ##22376
24b0c     30 2F B0 FD | 	call	#_audio096_spin2_start
24b10     FE 16 02 F6 | 	mov	arg03, result2
24b14     2B 00 00 FF 
24b18     50 E5 05 F1 | 	add	objptr, ##22352
24b1c     F2 FA 61 FC | 	wrlong	result1, objptr
24b20     14 E4 05 F1 | 	add	objptr, #20
24b24     F2 16 62 FC | 	wrlong	arg03, objptr
24b28     37 00 00 FF 
24b2c     30 E4 85 F1 | 	sub	objptr, ##28208
24b30     32 12 06 F6 | 	mov	arg01, #50
24b34     D0 38 B0 FD | 	call	#__system___waitms
24b38     37 00 00 FF 
24b3c     30 E4 05 F1 | 	add	objptr, ##28208
24b40     F2 12 02 FB | 	rdlong	arg01, objptr
24b44     37 00 00 FF 
24b48     30 E4 85 F1 | 	sub	objptr, ##28208
24b4c     14 12 06 F1 | 	add	arg01, #20
24b50     20 00 80 FF 
24b54     09 01 58 FC | 	wrword	##16384, arg01
24b58     48 2C B0 FD | 	call	#_usbnew_spin2_start
24b5c     37 00 00 FF 
24b60     24 E4 05 F1 | 	add	objptr, ##28196
24b64     F2 FA 61 FC | 	wrlong	result1, objptr
24b68     37 00 00 FF 
24b6c     24 E4 85 F1 | 	sub	objptr, ##28196
24b70     40 12 06 F6 | 	mov	arg01, #64
24b74     00 14 06 F6 | 	mov	arg02, #0
24b78     00 16 06 F6 | 	mov	arg03, #0
24b7c     1C FC BF FD | 	call	#_startvideo
24b80                 | '   mouse_limits[0] := xlim
24b80     0F 00 00 FF 
24b84     C8 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7880
24b88     01 00 80 FF 
24b8c     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
24b90                 | '   mouse_limits[1] := ylim
24b90     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
24b94     01 00 80 FF 
24b98     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
24b9c     11 E5 05 F1 | 	add	objptr, #273
24ba0     F2 12 02 F6 | 	mov	arg01, objptr
24ba4     11 E5 85 F1 | 	sub	objptr, #273
24ba8     C4 12 06 F1 | 	add	arg01, #196
24bac                 | '   mouse_outptr := ptr
24bac     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
24bb0     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
24bb4     0F 00 00 FF 
24bb8     D0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
24bbc     16 00 00 FF 
24bc0     CA EA 05 F1 | 	add	ptr__dat__, ##11466
24bc4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
24bc8     16 00 00 FF 
24bcc     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
24bd0     10 12 06 F6 | 	mov	arg01, #16
24bd4     BC 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
24bd8     10 12 06 F6 | 	mov	arg01, #16
24bdc     20 14 06 F6 | 	mov	arg02, #32
24be0     20 16 06 F6 | 	mov	arg03, #32
24be4     3C 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
24be8     09 12 C6 F9 | 	decod	arg01, #9
24bec     2C 15 06 F6 | 	mov	arg02, #300
24bf0     08 2D B0 FD | 	call	#_usbnew_spin2_mouse_move
24bf4     F2 16 02 F6 | 	mov	arg03, objptr
24bf8     50 00 00 FF 
24bfc     64 E5 05 F1 | 	add	objptr, ##41316
24c00     F2 14 02 F6 | 	mov	arg02, objptr
24c04     0A 17 62 FC | 	wrlong	arg03, arg02
24c08     04 14 06 F1 | 	add	arg02, #4
24c0c     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
24c10     EF 14 02 F6 | 	mov	arg02, entryptr__
24c14     1E FA 05 F6 | 	mov	result1, #30
24c18     28 E4 61 FD | 	setq	objptr
24c1c     0A FB F1 FC | 	coginit	result1, arg02 wc
24c20     01 FA 65 C6 |  if_b	neg	result1, #1
24c24     04 E4 85 F1 | 	sub	objptr, #4
24c28     F2 FA 61 FC | 	wrlong	result1, objptr
24c2c     01 00 00 FF 
24c30     8C E5 05 F1 | 	add	objptr, ##908
24c34     F2 00 68 FC | 	wrlong	#0, objptr
24c38     1B 00 00 FF 
24c3c     98 E4 85 F1 | 	sub	objptr, ##13976
24c40     F2 04 68 FC | 	wrlong	#2, objptr
24c44     04 E4 05 F1 | 	add	objptr, #4
24c48     F2 26 69 FC | 	wrlong	#147, objptr
24c4c     04 E4 05 F1 | 	add	objptr, #4
24c50     F2 34 69 FC | 	wrlong	#154, objptr
24c54     04 E4 05 F1 | 	add	objptr, #4
24c58     F2 08 68 FC | 	wrlong	#4, objptr
24c5c     04 E4 85 F1 | 	sub	objptr, #4
24c60     F2 16 02 FB | 	rdlong	arg03, objptr
24c64     14 E4 85 F1 | 	sub	objptr, #20
24c68     F2 16 62 FC | 	wrlong	arg03, objptr
24c6c     04 E4 05 F1 | 	add	objptr, #4
24c70     F2 00 68 FC | 	wrlong	#0, objptr
24c74     04 E4 05 F1 | 	add	objptr, #4
24c78     F2 00 68 FC | 	wrlong	#0, objptr
24c7c     19 00 00 FF 
24c80     0C E5 05 F1 | 	add	objptr, ##13068
24c84     F2 02 68 FC | 	wrlong	#1, objptr
24c88     01 00 00 FF 
24c8c     98 E5 05 F1 | 	add	objptr, ##920
24c90     F2 00 68 FC | 	wrlong	#0, objptr
24c94     01 00 00 FF 
24c98     00 EA 05 F1 | 	add	ptr__dat__, ##512
24c9c     08 E4 05 F1 | 	add	objptr, #8
24ca0     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
24ca4     04 E4 85 F1 | 	sub	objptr, #4
24ca8     03 00 80 FF 
24cac     F2 3C 69 FC | 	wrlong	##1694, objptr
24cb0     0D 00 00 FF 
24cb4     74 E4 85 F1 | 	sub	objptr, ##6772
24cb8     F2 18 68 FC | 	wrlong	#12, objptr
24cbc     45 00 00 FF 
24cc0     84 E4 85 F1 | 	sub	objptr, ##35460
24cc4     01 00 00 FF 
24cc8     00 EA 85 F1 | 	sub	ptr__dat__, ##512
24ccc     48 D7 BF FD | 	call	#_init_commands
24cd0     58 F6 BF FD | 	call	#_init_error_strings
24cd4     A0 ED BF FD | 	call	#_init_audio
24cd8     70 1C BF FD | 	call	#_do_new
24cdc     37 00 00 FF 
24ce0     5C E4 05 F1 | 	add	objptr, ##28252
24ce4     F2 12 02 FB | 	rdlong	arg01, objptr
24ce8     04 E4 85 F1 | 	sub	objptr, #4
24cec     F2 14 02 FB | 	rdlong	arg02, objptr
24cf0     37 00 00 FF 
24cf4     58 E4 85 F1 | 	sub	objptr, ##28248
24cf8     BC 17 B0 FD | 	call	#_hg010b_spin2_cls
24cfc     37 00 00 FF 
24d00     60 E4 05 F1 | 	add	objptr, ##28256
24d04     F2 12 02 FB | 	rdlong	arg01, objptr
24d08     37 00 00 FF 
24d0c     60 E4 85 F1 | 	sub	objptr, ##28256
24d10     E0 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
24d14                 | ' 
24d14                 | ' leading_spaces:=amount
24d14     01 00 00 FF 
24d18     B6 E4 05 F1 | 	add	objptr, ##694
24d1c     F2 04 68 FC | 	wrlong	#2, objptr
24d20     01 00 00 FF 
24d24     B6 E4 85 F1 | 	sub	objptr, ##694
24d28     C7 01 00 FF 
24d2c     62 26 06 F6 | 	mov	local01, ##@LR__6206
24d30     3D 12 06 F6 | 	mov	arg01, #61
24d34     3C 14 06 F6 | 	mov	arg02, #60
24d38     3B 16 06 F6 | 	mov	arg03, #59
24d3c     3A 18 06 F6 | 	mov	arg04, #58
24d40     5C 81 B0 FD | 	call	#__system___vfs_open_sdcardx
24d44     FD 14 02 F6 | 	mov	arg02, result1
24d48     13 13 02 F6 | 	mov	arg01, local01
24d4c     90 37 B0 FD | 	call	#__system___mount
24d50     C7 01 00 FF 
24d54     66 12 06 F6 | 	mov	arg01, ##@LR__6207
24d58     44 3A B0 FD | 	call	#__system___chdir
24d5c     C7 01 00 FF 
24d60     6E 26 06 F6 | 	mov	local01, ##@LR__6208
24d64     4A 00 00 FF 
24d68     B4 E4 05 F1 | 	add	objptr, ##38068
24d6c     F2 26 62 FC | 	wrlong	local01, objptr
24d70     13 00 00 FF 
24d74     60 E4 85 F1 | 	sub	objptr, ##9824
24d78     F2 12 02 FB | 	rdlong	arg01, objptr
24d7c     37 00 00 FF 
24d80     54 E4 85 F1 | 	sub	objptr, ##28244
24d84     01 12 66 F0 | 	shl	arg01, #1
24d88     01 14 06 F6 | 	mov	arg02, #1
24d8c     E8 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
24d90                 | ' init_commands
24d90                 | ' init_error_strings
24d90                 | ' init_audio
24d90                 | ' do_new
24d90                 | ' cls(ink, paper)
24d90                 | ' v.setfontfamily(font) 				' use ST Mono font
24d90                 | ' v.setleadingspaces(2)
24d90                 | ' mount "/sd", _vfs_open_sdcard()
24d90                 | ' chdir "/sd/bas"
24d90                 | ' currentdir$="/sd/bas"
24d90                 | ' position 2*editor_spaces,1 : print ver$
24d90     00 12 06 F6 | 	mov	arg01, #0
24d94     2C 90 B0 FD | 	call	#__system___getiolock_0620
24d98     FD 12 02 F6 | 	mov	arg01, result1
24d9c     74 33 B0 FD | 	call	#__system___lockmem
24da0     18 00 00 FF 
24da4     40 EB 05 F1 | 	add	ptr__dat__, ##12608
24da8     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
24dac     18 00 00 FF 
24db0     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
24db4     00 12 06 F6 | 	mov	arg01, #0
24db8     00 16 06 F6 | 	mov	arg03, #0
24dbc     4C 40 B0 FD | 	call	#__system___basic_print_string
24dc0     00 12 06 F6 | 	mov	arg01, #0
24dc4     0A 14 06 F6 | 	mov	arg02, #10
24dc8     00 16 06 F6 | 	mov	arg03, #0
24dcc     E4 3F B0 FD | 	call	#__system___basic_print_char
24dd0     00 12 06 F6 | 	mov	arg01, #0
24dd4     EC 8F B0 FD | 	call	#__system___getiolock_0620
24dd8     FD 00 68 FC | 	wrlong	#0, result1
24ddc     52 00 00 FF 
24de0     F0 E4 05 F1 | 	add	objptr, ##42224
24de4     F2 12 02 FB | 	rdlong	arg01, objptr
24de8     0F 00 00 FF 
24dec     74 E4 85 F1 | 	sub	objptr, ##7796
24df0     F2 26 02 FB | 	rdlong	local01, objptr
24df4     43 00 00 FF 
24df8     7C E4 85 F1 | 	sub	objptr, ##34428
24dfc     13 13 82 F1 | 	sub	arg01, local01
24e00     00 14 06 F6 | 	mov	arg02, #0
24e04     0A 16 06 F6 | 	mov	arg03, #10
24e08     DC 55 B0 FD | 	call	#__system__Number_S
24e0c     FD 12 02 F6 | 	mov	arg01, result1
24e10     C7 01 00 FF 
24e14     76 14 06 F6 | 	mov	arg02, ##@LR__6209
24e18     54 33 B0 FD | 	call	#__system___string_concat
24e1c     FD 26 02 F6 | 	mov	local01, result1
24e20     50 00 00 FF 
24e24     58 E5 05 F1 | 	add	objptr, ##41304
24e28     F2 26 62 FC | 	wrlong	local01, objptr
24e2c     50 00 00 FF 
24e30     58 E5 85 F1 | 	sub	objptr, ##41304
24e34                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
24e34     00 12 06 F6 | 	mov	arg01, #0
24e38     88 8F B0 FD | 	call	#__system___getiolock_0620
24e3c     FD 12 02 F6 | 	mov	arg01, result1
24e40     D0 32 B0 FD | 	call	#__system___lockmem
24e44     50 00 00 FF 
24e48     58 E5 05 F1 | 	add	objptr, ##41304
24e4c     F2 14 02 FB | 	rdlong	arg02, objptr
24e50     50 00 00 FF 
24e54     58 E5 85 F1 | 	sub	objptr, ##41304
24e58     00 12 06 F6 | 	mov	arg01, #0
24e5c     00 16 06 F6 | 	mov	arg03, #0
24e60     A8 3F B0 FD | 	call	#__system___basic_print_string
24e64     00 12 06 F6 | 	mov	arg01, #0
24e68     0A 14 06 F6 | 	mov	arg02, #10
24e6c     00 16 06 F6 | 	mov	arg03, #0
24e70     40 3F B0 FD | 	call	#__system___basic_print_char
24e74     00 12 06 F6 | 	mov	arg01, #0
24e78     48 8F B0 FD | 	call	#__system___getiolock_0620
24e7c     FD 00 68 FC | 	wrlong	#0, result1
24e80     37 00 00 FF 
24e84     54 E4 05 F1 | 	add	objptr, ##28244
24e88     F2 12 02 FB | 	rdlong	arg01, objptr
24e8c     37 00 00 FF 
24e90     54 E4 85 F1 | 	sub	objptr, ##28244
24e94     01 12 66 F0 | 	shl	arg01, #1
24e98     04 14 06 F6 | 	mov	arg02, #4
24e9c     D8 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
24ea0                 | ' position 2*editor_spaces,4 : print "Ready"
24ea0     00 12 06 F6 | 	mov	arg01, #0
24ea4     1C 8F B0 FD | 	call	#__system___getiolock_0620
24ea8     FD 12 02 F6 | 	mov	arg01, result1
24eac     64 32 B0 FD | 	call	#__system___lockmem
24eb0     C7 01 00 FF 
24eb4     88 14 06 F6 | 	mov	arg02, ##@LR__6210
24eb8     00 12 06 F6 | 	mov	arg01, #0
24ebc     00 16 06 F6 | 	mov	arg03, #0
24ec0     48 3F B0 FD | 	call	#__system___basic_print_string
24ec4     00 12 06 F6 | 	mov	arg01, #0
24ec8     0A 14 06 F6 | 	mov	arg02, #10
24ecc     00 16 06 F6 | 	mov	arg03, #0
24ed0     E0 3E B0 FD | 	call	#__system___basic_print_char
24ed4     00 12 06 F6 | 	mov	arg01, #0
24ed8     E8 8E B0 FD | 	call	#__system___getiolock_0620
24edc     FD 00 68 FC | 	wrlong	#0, result1
24ee0     00 14 06 F6 | 	mov	arg02, #0
24ee4     01 14 D6 F7 | 	test	arg02, #1 wc
24ee8     5A 4C 64 FD | 	drvc	#38
24eec     01 14 D6 F7 | 	test	arg02, #1 wc
24ef0     5A 4E 64 FD | 	drvc	#39
24ef4     C7 01 00 FF 
24ef8     8E 26 06 F6 | 	mov	local01, ##@LR__6211
24efc     52 00 00 FF 
24f00     1C E5 05 F1 | 	add	objptr, ##42268
24f04     F2 26 62 FC | 	wrlong	local01, objptr
24f08     04 E4 05 F1 | 	add	objptr, #4
24f0c     FF FF FF FF 
24f10     F2 FE 6B FC | 	wrlong	##-1, objptr
24f14     0C E4 05 F1 | 	add	objptr, #12
24f18     F2 00 68 FC | 	wrlong	#0, objptr
24f1c     52 00 00 FF 
24f20     2C E5 85 F1 | 	sub	objptr, ##42284
24f24                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
24f24                 | ' loadname="noname.bas"
24f24                 | ' do_insert=-1
24f24                 | ' inload=0
24f24                 | ' 
24f24                 | ' open "/sd/bas/autorun.bas" for input as #9
24f24     C7 01 00 FF 
24f28     99 14 06 F6 | 	mov	arg02, ##@LR__6212
24f2c     09 12 06 F6 | 	mov	arg01, #9
24f30     00 16 06 F6 | 	mov	arg03, #0
24f34     E0 3D B0 FD | 	call	#__system___basic_open_string
24f38     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24f3c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
24f40     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
24f44     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24f48     52 00 00 FF 
24f4c     30 E5 05 F1 | 	add	objptr, ##42288
24f50     F2 FA 61 FC | 	wrlong	result1, objptr
24f54     52 00 00 FF 
24f58     30 E5 85 F1 | 	sub	objptr, ##42288
24f5c                 | ' err=geterr()
24f5c                 | ' close #9
24f5c     09 12 06 F6 | 	mov	arg01, #9
24f60     10 85 B0 FD | 	call	#__system__close
24f64                 | ' if err=0 then line$="run autorun.bas" : interpret
24f64     52 00 00 FF 
24f68     30 E5 05 F1 | 	add	objptr, ##42288
24f6c     F2 26 0A FB | 	rdlong	local01, objptr wz
24f70     52 00 00 FF 
24f74     30 E5 85 F1 | 	sub	objptr, ##42288
24f78     C7 01 00 AF 
24f7c     AD 26 06 A6 |  if_e	mov	local01, ##@LR__6213
24f80     37 00 00 AF 
24f84     3C E4 05 A1 |  if_e	add	objptr, ##28220
24f88     F2 26 62 AC |  if_e	wrlong	local01, objptr
24f8c     37 00 00 AF 
24f90     3C E4 85 A1 |  if_e	sub	objptr, ##28220
24f94     F4 C8 BD AD |  if_e	call	#_interpret
24f98                 | ' 
24f98                 | ' 
24f98                 | ' '-------------------------------------------------------------------------------------------------------- 
24f98                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
24f98                 | ' '--------------------------------------------------------------------------------------------------------
24f98                 | ' 
24f98                 | ' do
24f98                 | LR__2780
24f98     68 B8 BD FD | 	call	#_edit
24f9c     FD 26 02 F6 | 	mov	local01, result1
24fa0     37 00 00 FF 
24fa4     3C E4 05 F1 | 	add	objptr, ##28220
24fa8     F2 26 62 FC | 	wrlong	local01, objptr
24fac     37 00 00 FF 
24fb0     3C E4 85 F1 | 	sub	objptr, ##28220
24fb4     D4 C8 BD FD | 	call	#_interpret
24fb8     C7 01 00 FF 
24fbc     BD 26 06 F6 | 	mov	local01, ##@LR__6214
24fc0     37 00 00 FF 
24fc4     3C E4 05 F1 | 	add	objptr, ##28220
24fc8     F2 26 62 FC | 	wrlong	local01, objptr
24fcc     37 00 00 FF 
24fd0     3C E4 85 F1 | 	sub	objptr, ##28220
24fd4     C0 FF 9F FD | 	jmp	#LR__2780
24fd8     A7 F0 03 F6 | 	mov	ptra, fp
24fdc     B2 00 A0 FD | 	call	#popregs_
24fe0                 | _program_ret
24fe0     2D 00 64 FD | 	ret
24fe4                 | 
24fe4                 | ' '' this is not a main program.
24fe4                 | ' 
24fe4                 | ' '****************************************************************************************************************
24fe4                 | ' '                                                                                                             	*
24fe4                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
24fe4                 | ' '                                                                                                            	*
24fe4                 | ' ' base - HDMI base pin												*
24fe4                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
24fe4                 | ' '														*
24fe4                 | ' '														*
24fe4                 | ' '****************************************************************************************************************
24fe4                 | ' 
24fe4                 | ' pub start(base,mb):result |i
24fe4                 | _hg010b_spin2_start
24fe4                 | ' 
24fe4                 | ' '--------------------------- initialize pointers and variables
24fe4                 | ' 
24fe4                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
24fe4     34 E4 05 F1 | 	add	objptr, #52
24fe8     F2 FA 01 F6 | 	mov	result1, objptr
24fec     28 E4 85 F1 | 	sub	objptr, #40
24ff0     F2 FA 61 FC | 	wrlong	result1, objptr
24ff4                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
24ff4                 | ' hdmibase:=base							' HDMI base pin, 8*n
24ff4     18 E4 05 F1 | 	add	objptr, #24
24ff8     F2 12 62 FC | 	wrlong	arg01, objptr
24ffc                 | ' mailbox_ptr:=mb		
24ffc     04 E4 05 F1 | 	add	objptr, #4
25000     F2 14 62 FC | 	wrlong	arg02, objptr
25004                 | ' mailbox0:=mb				' PSRAM mailbox pointer
25004     C1 E5 05 F1 | 	add	objptr, #449
25008     F2 14 62 FC | 	wrlong	arg02, objptr
2500c                 | ' sprite_ptr:=@spr1ptr
2500c     D8 E4 85 F1 | 	sub	objptr, #216
25010     F2 FA 01 F6 | 	mov	result1, objptr
25014     E5 E4 85 F1 | 	sub	objptr, #229
25018     F2 FA 61 FC | 	wrlong	result1, objptr
2501c                 | ' 
2501c                 | ' 		'
2501c                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
2501c     E5 E4 05 F1 | 	add	objptr, #229
25020     F2 FA 01 FB | 	rdlong	result1, objptr
25024     D0 FA 05 F1 | 	add	result1, #208
25028     FD 10 58 FC | 	wrword	#8, result1
2502c                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
2502c     F2 16 02 FB | 	rdlong	arg03, objptr
25030     D2 16 06 F1 | 	add	arg03, #210
25034     0B 21 58 FC | 	wrword	#16, arg03
25038                 | ' leading_spaces:=0				'
25038     A5 E5 05 F1 | 	add	objptr, #421
2503c     F2 00 68 FC | 	wrlong	#0, objptr
25040                 | ' 
25040                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
25040     99 E4 85 F1 | 	sub	objptr, #153
25044     00 00 A0 FF 
25048     F2 0E 68 FC | 	wrlong	##1073741831, objptr
2504c                 | ' emptydl[1]:=0
2504c     04 E4 05 F1 | 	add	objptr, #4
25050     F2 00 68 FC | 	wrlong	#0, objptr
25054                 | ' 
25054                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
25054                 | ' 
25054                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
25054     28 E5 85 F1 | 	sub	objptr, #296
25058     F2 02 68 FC | 	wrlong	#1, objptr
2505c                 | ' if s_debug<>0
2505c                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
2505c     20 00 80 FF 
25060     F2 00 68 FC | 	wrlong	##16384, objptr
25064     F9 E4 85 F1 | 	sub	objptr, #249
25068                 | ' setmode()							' set the mode, see below
25068     1C 03 B0 FD | 	call	#_hg010b_spin2_setmode
2506c                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
2506c     49 E4 05 F1 | 	add	objptr, #73
25070     F2 FA 01 F6 | 	mov	result1, objptr
25074     35 E4 85 F1 | 	sub	objptr, #53
25078     F2 FA 61 FC | 	wrlong	result1, objptr
2507c                 | ' cursor_ptr:=@cursor_x						
2507c     28 E4 05 F1 | 	add	objptr, #40
25080     F2 16 02 F6 | 	mov	arg03, objptr
25084     2C E4 85 F1 | 	sub	objptr, #44
25088     F2 16 62 FC | 	wrlong	arg03, objptr
2508c                 | ' fontnum:=0  							' start with a PC type font 
2508c     55 E4 05 F1 | 	add	objptr, #85
25090     F2 00 68 FC | 	wrlong	#0, objptr
25094                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
25094     1C E4 05 F1 | 	add	objptr, #28
25098     F2 12 02 F6 | 	mov	arg01, objptr
2509c     81 E4 85 F1 | 	sub	objptr, #129
250a0     1C 00 00 FF 
250a4     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14464
250a8     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
250ac     1C 00 00 FF 
250b0     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14464
250b4     10 16 06 F6 | 	mov	arg03, #16
250b8     08 2F B0 FD | 	call	#__system____builtin_memmove
250bc                 | ' leading_spaces:=0
250bc     01 00 00 FF 
250c0     B6 E4 05 F1 | 	add	objptr, ##694
250c4     F2 00 68 FC | 	wrlong	#0, objptr
250c8     01 00 00 FF 
250cc     B6 E4 85 F1 | 	sub	objptr, ##694
250d0                 | ' '---------------------------- initialize a cursor (MSDOS type)
250d0                 | ' 
250d0                 | ' initcursor(154)
250d0     9A 12 06 F6 | 	mov	arg01, #154
250d4     78 00 B0 FD | 	call	#_hg010b_spin2_initcursor
250d8                 | ' 
250d8                 | ' '---------------------------- start the cog
250d8                 | ' 
250d8                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
250d8     1C 00 00 FF 
250dc     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14480
250e0     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
250e4     1C 00 00 FF 
250e8     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14480
250ec     14 E4 05 F1 | 	add	objptr, #20
250f0     10 FA 05 F6 | 	mov	result1, #16
250f4     28 E4 61 FD | 	setq	objptr
250f8     0A FB F1 FC | 	coginit	result1, arg02 wc
250fc     01 FA 65 C6 |  if_b	neg	result1, #1
25100     1C E4 05 F1 | 	add	objptr, #28
25104     F2 FA 61 FC | 	wrlong	result1, objptr
25108     30 E4 85 F1 | 	sub	objptr, #48
2510c                 | ' waitms(40)							' wait for stabilize
2510c     28 12 06 F6 | 	mov	arg01, #40
25110     F4 32 B0 FD | 	call	#__system___waitms
25114                 | ' return cog							' return the driver's cog #
25114     30 E4 05 F1 | 	add	objptr, #48
25118     F2 FA 01 FB | 	rdlong	result1, objptr
2511c     30 E4 85 F1 | 	sub	objptr, #48
25120                 | _hg010b_spin2_start_ret
25120     2D 00 64 FD | 	ret
25124                 | 
25124                 | ' 
25124                 | ' 
25124                 | ' '**************************************************************************************************************** 
25124                 | ' '                                                                                                             	*
25124                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
25124                 | ' '  Mode number - see start() above or bits below								*
25124                 | ' '                                                                                                             	*
25124                 | ' '****************************************************************************************************************
25124                 | ' 
25124                 | ' 
25124                 | ' pub restorepalette()
25124                 | _hg010b_spin2_restorepalette
25124                 | ' 
25124                 | ' longmove(@ataripalette,@ataripalette2,256)
25124     18 00 00 FF 
25128     40 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##12352
2512c     F7 12 02 F6 | 	mov	arg01, ptr__hg010b_spin2_dat__
25130     02 00 00 FF 
25134     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
25138     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
2513c     1A 00 00 FF 
25140     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##13376
25144     00 17 06 F6 | 	mov	arg03, #256
25148     0C 2F B0 FD | 	call	#__system__longmove
2514c                 | _hg010b_spin2_restorepalette_ret
2514c     2D 00 64 FD | 	ret
25150                 | 
25150                 | ' 
25150                 | ' '---------------------------- initialize a cursor (MSDOS type)
25150                 | ' pub initcursor(color) |i
25150                 | _hg010b_spin2_initcursor
25150     03 4A 05 F6 | 	mov	COUNT_, #3
25154     A8 00 A0 FD | 	call	#pushregs_
25158     09 27 02 F6 | 	mov	local01, arg01
2515c                 | ' 
2515c                 | ' cursor_x:=0							' place the cursor at 0:0
2515c     3C E4 05 F1 | 	add	objptr, #60
25160     F2 00 58 FC | 	wrword	#0, objptr
25164                 | ' cursor_y:=0
25164     02 E4 05 F1 | 	add	objptr, #2
25168     F2 00 48 FC | 	wrbyte	#0, objptr
2516c                 | ' repeat i from 0 to 111
2516c     00 28 06 F6 | 	mov	local02, #0
25170     F8 E5 05 F1 | 	add	objptr, #504
25174     97 0C 48 FB | 	callpa	#(@LR__2791-@LR__2790)>>2,fcache_load_ptr_
25178                 | LR__2790
25178                 | '   cursor[i]:=0
25178     14 2B 02 F6 | 	mov	local03, local02
2517c     F2 2A 02 F1 | 	add	local03, objptr
25180     15 01 48 FC | 	wrbyte	#0, local03
25184     01 28 06 F1 | 	add	local02, #1
25188     70 28 56 F2 | 	cmps	local02, #112 wc
2518c     E8 FF 9F CD |  if_b	jmp	#LR__2790
25190                 | LR__2791
25190                 | ' repeat i from 112 to 127
25190     70 28 06 F6 | 	mov	local02, #112
25194     97 0C 48 FB | 	callpa	#(@LR__2793-@LR__2792)>>2,fcache_load_ptr_
25198                 | LR__2792
25198                 | '   cursor[i]:=color  
25198     14 2B 02 F6 | 	mov	local03, local02
2519c     F2 2A 02 F1 | 	add	local03, objptr
251a0     15 27 42 FC | 	wrbyte	local01, local03
251a4     01 28 06 F1 | 	add	local02, #1
251a8     80 28 16 F2 | 	cmp	local02, #128 wc
251ac     E8 FF 9F CD |  if_b	jmp	#LR__2792
251b0                 | LR__2793
251b0                 | ' 'repeat i from 0 to 127
251b0                 | ' '  if ((i/8)//2)
251b0                 | ' '    cursor[i]:=15
251b0                 | ' '  else
251b0                 | ' '    cursor[i]:=0
251b0                 | ' '  if i>=120    
251b0                 | ' '    cursor[i]:=40
251b0                 | ' setspriteptr(17,@cursor)
251b0     F2 14 02 F6 | 	mov	arg02, objptr
251b4     01 00 00 FF 
251b8     36 E4 85 F1 | 	sub	objptr, ##566
251bc     11 12 06 F6 | 	mov	arg01, #17
251c0     D0 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
251c4                 | ' setspritesize(17,8,16)
251c4     11 12 06 F6 | 	mov	arg01, #17
251c8     08 14 06 F6 | 	mov	arg02, #8
251cc     10 16 06 F6 | 	mov	arg03, #16
251d0     50 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
251d4                 | ' setspritepos(17,0,0)
251d4     11 12 06 F6 | 	mov	arg01, #17
251d8     00 14 06 F6 | 	mov	arg02, #0
251dc     00 16 06 F6 | 	mov	arg03, #0
251e0     D8 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
251e4                 | ' cursorshape:=14
251e4     0B 00 00 FF 
251e8     C6 E4 05 F1 | 	add	objptr, ##5830
251ec     F2 1C 68 FC | 	wrlong	#14, objptr
251f0                 | ' cursorcolor:=color
251f0     04 E4 85 F1 | 	sub	objptr, #4
251f4     F2 26 62 FC | 	wrlong	local01, objptr
251f8     0B 00 00 FF 
251fc     C2 E4 85 F1 | 	sub	objptr, ##5826
25200     A7 F0 03 F6 | 	mov	ptra, fp
25204     B2 00 A0 FD | 	call	#popregs_
25208                 | _hg010b_spin2_initcursor_ret
25208     2D 00 64 FD | 	ret
2520c                 | 
2520c                 | ' 
2520c                 | ' pub setcursorshape(shape) | i
2520c                 | _hg010b_spin2_setcursorshape
2520c                 | ' 
2520c                 | ' cursorshape:=shape
2520c     0B 00 00 FF 
25210     C6 E4 05 F1 | 	add	objptr, ##5830
25214     F2 12 62 FC | 	wrlong	arg01, objptr
25218                 | ' repeat i from 0 to (8*cursorshape)-1
25218     00 00 06 F6 | 	mov	_var01, #0
2521c     09 03 02 F6 | 	mov	_var02, arg01
25220     03 02 66 F0 | 	shl	_var02, #3
25224     01 02 86 F1 | 	sub	_var02, #1
25228     00 02 56 F2 | 	cmps	_var02, #0 wc
2522c     01 04 86 F6 | 	negc	_var03, #1
25230     02 07 02 F6 | 	mov	_var04, _var03
25234     02 03 02 F1 | 	add	_var02, _var03
25238     0A 00 00 FF 
2523c     90 E4 85 F1 | 	sub	objptr, ##5264
25240     97 0C 48 FB | 	callpa	#(@LR__2801-@LR__2800)>>2,fcache_load_ptr_
25244                 | LR__2800
25244                 | '   cursor[i]:=0
25244     00 05 02 F6 | 	mov	_var03, _var01
25248     F2 04 02 F1 | 	add	_var03, objptr
2524c     02 01 48 FC | 	wrbyte	#0, _var03
25250     03 01 02 F1 | 	add	_var01, _var04
25254     01 01 0A F2 | 	cmp	_var01, _var02 wz
25258     E8 FF 9F 5D |  if_ne	jmp	#LR__2800
2525c                 | LR__2801
2525c                 | ' repeat i from 8*cursorshape to 127
2525c     0A 00 00 FF 
25260     90 E4 05 F1 | 	add	objptr, ##5264
25264     F2 06 02 FB | 	rdlong	_var04, objptr
25268     03 01 02 F6 | 	mov	_var01, _var04
2526c     03 00 66 F0 | 	shl	_var01, #3
25270     0B 00 00 FF 
25274     C6 E4 85 F1 | 	sub	objptr, ##5830
25278     03 06 66 F0 | 	shl	_var04, #3
2527c     80 06 56 F2 | 	cmps	_var04, #128 wc
25280     01 04 A6 F6 | 	negnc	_var03, #1
25284     7F 02 06 F6 | 	mov	_var02, #127
25288     02 03 02 F1 | 	add	_var02, _var03
2528c     97 1A 48 FB | 	callpa	#(@LR__2803-@LR__2802)>>2,fcache_load_ptr_
25290                 | LR__2802
25290                 | '   cursor[i]:=cursorcolor
25290     00 07 02 F6 | 	mov	_var04, _var01
25294     01 00 00 FF 
25298     36 E4 05 F1 | 	add	objptr, ##566
2529c     F2 06 02 F1 | 	add	_var04, objptr
252a0     0A 00 00 FF 
252a4     8C E4 05 F1 | 	add	objptr, ##5260
252a8     F2 12 02 FB | 	rdlong	arg01, objptr
252ac     0B 00 00 FF 
252b0     C2 E4 85 F1 | 	sub	objptr, ##5826
252b4     03 13 42 FC | 	wrbyte	arg01, _var04
252b8     02 01 02 F1 | 	add	_var01, _var03
252bc     01 01 0A F2 | 	cmp	_var01, _var02 wz
252c0     CC FF 9F 5D |  if_ne	jmp	#LR__2802
252c4                 | LR__2803
252c4                 | _hg010b_spin2_setcursorshape_ret
252c4     2D 00 64 FD | 	ret
252c8                 | 
252c8                 | ' 
252c8                 | ' pub setcursorcolor(color) | i
252c8                 | _hg010b_spin2_setcursorcolor
252c8                 | ' 
252c8                 | ' cursorcolor:=color
252c8     0B 00 00 FF 
252cc     C2 E4 05 F1 | 	add	objptr, ##5826
252d0     F2 12 62 FC | 	wrlong	arg01, objptr
252d4                 | ' repeat i from 0 to (8*cursorshape)-1
252d4     00 12 06 F6 | 	mov	arg01, #0
252d8     04 E4 05 F1 | 	add	objptr, #4
252dc     F2 00 02 FB | 	rdlong	_var01, objptr
252e0     03 00 66 F0 | 	shl	_var01, #3
252e4     01 00 86 F1 | 	sub	_var01, #1
252e8     00 00 56 F2 | 	cmps	_var01, #0 wc
252ec     01 02 86 F6 | 	negc	_var02, #1
252f0     01 05 02 F6 | 	mov	_var03, _var02
252f4     01 01 02 F1 | 	add	_var01, _var02
252f8     0A 00 00 FF 
252fc     90 E4 85 F1 | 	sub	objptr, ##5264
25300     97 0C 48 FB | 	callpa	#(@LR__2811-@LR__2810)>>2,fcache_load_ptr_
25304                 | LR__2810
25304                 | '   cursor[i]:=0
25304     09 03 02 F6 | 	mov	_var02, arg01
25308     F2 02 02 F1 | 	add	_var02, objptr
2530c     01 01 48 FC | 	wrbyte	#0, _var02
25310     02 13 02 F1 | 	add	arg01, _var03
25314     00 13 0A F2 | 	cmp	arg01, _var01 wz
25318     E8 FF 9F 5D |  if_ne	jmp	#LR__2810
2531c                 | LR__2811
2531c                 | ' repeat i from 8*cursorshape to 127
2531c     0A 00 00 FF 
25320     90 E4 05 F1 | 	add	objptr, ##5264
25324     F2 04 02 FB | 	rdlong	_var03, objptr
25328     02 13 02 F6 | 	mov	arg01, _var03
2532c     03 12 66 F0 | 	shl	arg01, #3
25330     0B 00 00 FF 
25334     C6 E4 85 F1 | 	sub	objptr, ##5830
25338     03 04 66 F0 | 	shl	_var03, #3
2533c     80 04 56 F2 | 	cmps	_var03, #128 wc
25340     01 02 A6 F6 | 	negnc	_var02, #1
25344     7F 00 06 F6 | 	mov	_var01, #127
25348     01 01 02 F1 | 	add	_var01, _var02
2534c     97 1A 48 FB | 	callpa	#(@LR__2813-@LR__2812)>>2,fcache_load_ptr_
25350                 | LR__2812
25350                 | '   cursor[i]:=cursorcolor
25350     09 05 02 F6 | 	mov	_var03, arg01
25354     01 00 00 FF 
25358     36 E4 05 F1 | 	add	objptr, ##566
2535c     F2 04 02 F1 | 	add	_var03, objptr
25360     0A 00 00 FF 
25364     8C E4 05 F1 | 	add	objptr, ##5260
25368     F2 06 02 FB | 	rdlong	_var04, objptr
2536c     0B 00 00 FF 
25370     C2 E4 85 F1 | 	sub	objptr, ##5826
25374     02 07 42 FC | 	wrbyte	_var04, _var03
25378     01 13 02 F1 | 	add	arg01, _var02
2537c     00 13 0A F2 | 	cmp	arg01, _var01 wz
25380     CC FF 9F 5D |  if_ne	jmp	#LR__2812
25384                 | LR__2813
25384                 | _hg010b_spin2_setcursorcolor_ret
25384     2D 00 64 FD | 	ret
25388                 | 
25388                 | '   
25388                 | '   
25388                 | '   
25388                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
25388                 | _hg010b_spin2_setmode
25388     02 4A 05 F6 | 	mov	COUNT_, #2
2538c     A8 00 A0 FD | 	call	#pushregs_
25390                 | ' 
25390                 | ' 
25390                 | ' dl_ptr:=@emptydl[0]
25390     01 00 00 FF 
25394     1D E4 05 F1 | 	add	objptr, ##541
25398     F2 1A 02 F6 | 	mov	arg05, objptr
2539c     FD E5 85 F1 | 	sub	objptr, #509
253a0     F2 1A 62 FC | 	wrlong	arg05, objptr
253a4                 | ' 
253a4                 | ' if cog>0 
253a4     10 E4 05 F1 | 	add	objptr, #16
253a8     F2 1A 02 FB | 	rdlong	arg05, objptr
253ac     30 E4 85 F1 | 	sub	objptr, #48
253b0     01 1A 56 F2 | 	cmps	arg05, #1 wc
253b4                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
253b4     01 12 06 36 |  if_ae	mov	arg01, #1
253b8     5C 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
253bc                 | ' xres:=1024
253bc     01 00 00 FF 
253c0     26 E4 05 F1 | 	add	objptr, ##550
253c4     02 00 80 FF 
253c8     F2 00 68 FC | 	wrlong	##1024, objptr
253cc                 | ' yres:=600
253cc     04 E4 05 F1 | 	add	objptr, #4
253d0     01 00 80 FF 
253d4     F2 B0 68 FC | 	wrlong	##600, objptr
253d8                 | ' ppl:=(timings[3])
253d8     1C 00 00 FF 
253dc     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14412
253e0     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
253e4     51 E5 85 F1 | 	sub	objptr, #337
253e8     F2 1A 62 FC | 	wrlong	arg05, objptr
253ec                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
253ec     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
253f0     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
253f4     01 26 66 F0 | 	shl	local01, #1
253f8     80 E4 85 F1 | 	sub	objptr, #128
253fc     F2 26 62 FC | 	wrlong	local01, objptr
25400                 | ' cpl1:=cpl '' todo remove
25400     04 E4 05 F1 | 	add	objptr, #4
25404     F2 26 62 FC | 	wrlong	local01, objptr
25408                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
25408     04 00 00 FF 
2540c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##2076
25410     41 E4 85 F1 | 	sub	objptr, #65
25414     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
25418                 | ' repeat i from 0 to 3
25418     00 28 06 F6 | 	mov	local02, #0
2541c     04 00 00 FF 
25420     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##2048
25424     08 E4 05 F1 | 	add	objptr, #8
25428     97 20 48 FB | 	callpa	#(@LR__2821-@LR__2820)>>2,fcache_load_ptr_
2542c                 | LR__2820
2542c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
2542c     14 27 02 F6 | 	mov	local01, local02
25430     02 26 66 F0 | 	shl	local01, #2
25434     F7 26 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
25438     F2 1A 02 FB | 	rdlong	arg05, objptr
2543c     11 1A 66 F0 | 	shl	arg05, #17
25440     13 27 02 FB | 	rdlong	local01, local01
25444     0D 27 02 F1 | 	add	local01, arg05
25448     80 40 38 FF 
2544c     00 26 06 F1 | 	add	local01, ##1887502336
25450     14 1B 02 F6 | 	mov	arg05, local02
25454     02 1A 66 F0 | 	shl	arg05, #2
25458     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
2545c     0D 27 62 FC | 	wrlong	local01, arg05
25460     01 28 06 F1 | 	add	local02, #1
25464     04 28 56 F2 | 	cmps	local02, #4 wc
25468     C0 FF 9F CD |  if_b	jmp	#LR__2820
2546c                 | LR__2821
2546c     24 E4 85 F1 | 	sub	objptr, #36
25470     1C 00 00 FF 
25474     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
25478                 | ' 'clkfreq:=timings[9]					    	' set the clock frequency for the mode
25478                 | ' 'hubset(timings[10])
25478                 | ' waitms(1)                                                   	' wait for stabilization
25478     01 12 06 F6 | 	mov	arg01, #1
2547c     88 2F B0 FD | 	call	#__system___waitms
25480     1C 00 00 FF 
25484     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14444
25488     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
2548c     61 E4 05 F1 | 	add	objptr, #97
25490     F2 28 62 FC | 	wrlong	local02, objptr
25494     14 27 52 F6 | 	abs	local01, local02 wc
25498     04 26 46 F0 | 	shr	local01, #4
2549c     13 27 82 F6 | 	negc	local01, local01
254a0     9C E4 05 F1 | 	add	objptr, #156
254a4     F2 26 62 FC | 	wrlong	local01, objptr
254a8     A4 E4 85 F1 | 	sub	objptr, #164
254ac     F2 28 02 FB | 	rdlong	local02, objptr
254b0     08 E4 05 F1 | 	add	objptr, #8
254b4     F2 26 02 FB | 	rdlong	local01, objptr
254b8     13 29 02 FD | 	qmul	local02, local01
254bc                 | ' lines:=timings[11]
254bc                 | ' t_lines:=lines/16
254bc                 | ' buflen:=cpl*lines						' framebuffer length in longs
254bc     29 E4 85 F1 | 	sub	objptr, #41
254c0     19 26 C6 F9 | 	decod	local01, #25
254c4     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
254c8     18 28 62 FD | 	getqx	local02
254cc     F2 28 62 FC | 	wrlong	local02, objptr
254d0     38 E4 85 F1 | 	sub	objptr, #56
254d4     02 28 66 F0 | 	shl	local02, #2
254d8     14 27 82 F1 | 	sub	local01, local02
254dc     F2 26 62 FC | 	wrlong	local01, objptr
254e0     FD E4 05 F1 | 	add	objptr, #253
254e4     F2 28 02 FB | 	rdlong	local02, objptr
254e8     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
254ec     0D 29 02 FD | 	qmul	local02, arg05
254f0                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
254f0                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
254f0     F9 E4 85 F1 | 	sub	objptr, #249
254f4                 | ' mode_ptr:=@timings						' set pointers to timings
254f4     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
254f8                 | ' graphmode:=1024+512+192+48							' det global variable
254f8                 | ' makedl(graphmode)							' make a DL for the mode
254f8     03 00 00 FF 
254fc     F0 12 06 F6 | 	mov	arg01, ##1776
25500     18 28 62 FD | 	getqx	local02
25504     14 27 82 F1 | 	sub	local01, local02
25508     F2 26 62 FC | 	wrlong	local01, objptr
2550c     14 E4 05 F1 | 	add	objptr, #20
25510     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
25514     79 E4 05 F1 | 	add	objptr, #121
25518     03 00 80 FF 
2551c     F2 E0 69 FC | 	wrlong	##1776, objptr
25520     91 E4 85 F1 | 	sub	objptr, #145
25524     1C 00 00 FF 
25528     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
2552c     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
25530                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
25530     F2 26 02 FB | 	rdlong	local01, objptr
25534     DD E4 05 F1 | 	add	objptr, #221
25538     F2 26 62 FC | 	wrlong	local01, objptr
2553c                 | ' s_font_ptr:=font_ptr
2553c     D5 E4 85 F1 | 	sub	objptr, #213
25540     F2 26 02 FB | 	rdlong	local01, objptr
25544     D9 E4 05 F1 | 	add	objptr, #217
25548     F2 26 62 FC | 	wrlong	local01, objptr
2554c                 | ' s_lines:=lines
2554c     80 E4 85 F1 | 	sub	objptr, #128
25550     F2 26 02 FB | 	rdlong	local01, objptr
25554     84 E4 05 F1 | 	add	objptr, #132
25558     F2 26 62 FC | 	wrlong	local01, objptr
2555c                 | ' s_buflen:=buflen
2555c     AD E4 85 F1 | 	sub	objptr, #173
25560     F2 26 02 FB | 	rdlong	local01, objptr
25564     B5 E4 05 F1 | 	add	objptr, #181
25568     F2 26 62 FC | 	wrlong	local01, objptr
2556c                 | ' s_cpl:=cpl
2556c     94 E4 85 F1 | 	sub	objptr, #148
25570     F2 26 02 FB | 	rdlong	local01, objptr
25574     90 E4 05 F1 | 	add	objptr, #144
25578     F2 26 62 FC | 	wrlong	local01, objptr
2557c                 | ' s_cpl1:=cpl
2557c     90 E4 85 F1 | 	sub	objptr, #144
25580     F2 26 02 FB | 	rdlong	local01, objptr
25584     98 E4 05 F1 | 	add	objptr, #152
25588     F2 26 62 FC | 	wrlong	local01, objptr
2558c                 | ' st_lines:=t_lines
2558c     0C E4 05 F1 | 	add	objptr, #12
25590     F2 26 02 FB | 	rdlong	local01, objptr
25594     04 E4 05 F1 | 	add	objptr, #4
25598     F2 26 62 FC | 	wrlong	local01, objptr
2559c                 | ' ppl:=ppl/xzoom  
2559c     28 E4 85 F1 | 	sub	objptr, #40
255a0     F2 90 02 FB | 	rdlong	muldiva_, objptr
255a4     2C E4 05 F1 | 	add	objptr, #44
255a8     F2 92 02 FB | 	rdlong	muldivb_, objptr
255ac     05 E5 85 F1 | 	sub	objptr, #261
255b0     BA 00 A0 FD | 	call	#divide_
255b4     D9 E4 05 F1 | 	add	objptr, #217
255b8     F2 92 62 FC | 	wrlong	muldivb_, objptr
255bc                 | ' s_ppl:=ppl
255bc     1C E4 05 F1 | 	add	objptr, #28
255c0     F2 92 62 FC | 	wrlong	muldivb_, objptr
255c4     F5 E4 85 F1 | 	sub	objptr, #245
255c8                 | ' waitms(20)							' wait 
255c8     14 12 06 F6 | 	mov	arg01, #20
255cc     38 2E B0 FD | 	call	#__system___waitms
255d0                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
255d0     04 E4 05 F1 | 	add	objptr, #4
255d4     F2 12 02 FB | 	rdlong	arg01, objptr
255d8     04 E4 85 F1 | 	sub	objptr, #4
255dc     F2 16 02 FB | 	rdlong	arg03, objptr
255e0     09 17 82 F1 | 	sub	arg03, arg01
255e4     20 14 06 F6 | 	mov	arg02, #32
255e8     00 18 06 F6 | 	mov	arg04, #0
255ec     01 1A 06 F6 | 	mov	arg05, #1
255f0     0B 00 00 FF 
255f4     CC E4 05 F1 | 	add	objptr, ##5836
255f8     AC 1F B0 FD | 	call	#_psram_spin2_fill
255fc     0B 00 00 FF 
25600     CC E4 85 F1 | 	sub	objptr, ##5836
25604     A7 F0 03 F6 | 	mov	ptra, fp
25608     B2 00 A0 FD | 	call	#popregs_
2560c                 | _hg010b_spin2_setmode_ret
2560c     2D 00 64 FD | 	ret
25610                 | 
25610                 | ' 
25610                 | ' '****************************************************************************************************************
25610                 | ' '                                                                                                             	*
25610                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
25610                 | ' '                                                                                                             	*
25610                 | ' '****************************************************************************************************************
25610                 | ' 
25610                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
25610                 | _hg010b_spin2_makedl
25610                 | ' 
25610                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
25610                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
25610                 | ' repeat i from 0 to 11                                                           ' clear DL
25610     00 00 06 F6 | 	mov	_var01, #0
25614     ED E5 05 F1 | 	add	objptr, #493
25618     97 0E 48 FB | 	callpa	#(@LR__2831-@LR__2830)>>2,fcache_load_ptr_
2561c                 | LR__2830
2561c                 | '   displaylist[i]:=0 
2561c     00 03 02 F6 | 	mov	_var02, _var01
25620     02 02 66 F0 | 	shl	_var02, #2
25624     F2 02 02 F1 | 	add	_var02, objptr
25628     01 01 68 FC | 	wrlong	#0, _var02
2562c     01 00 06 F1 | 	add	_var01, #1
25630     0C 00 56 F2 | 	cmps	_var01, #12 wc
25634     E4 FF 9F CD |  if_b	jmp	#LR__2830
25638                 | LR__2831
25638                 | '                         ' 
25638                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
25638     8C E5 85 F1 | 	sub	objptr, #396
2563c     F2 02 02 FB | 	rdlong	_var02, objptr
25640     14 02 66 F0 | 	shl	_var02, #20
25644     01 02 06 F1 | 	add	_var02, #1
25648     04 E4 85 F1 | 	sub	objptr, #4
2564c     F2 00 02 FB | 	rdlong	_var01, objptr
25650     02 00 66 F0 | 	shl	_var01, #2
25654     04 00 66 F0 | 	shl	_var01, #4
25658     00 03 02 F1 | 	add	_var02, _var01
2565c     90 E5 05 F1 | 	add	objptr, #400
25660     F2 02 62 FC | 	wrlong	_var02, objptr
25664     ED E5 85 F1 | 	sub	objptr, #493
25668                 | ' displaylist[1]:=buf_ptr<<4+%10  
25668     F2 02 02 FB | 	rdlong	_var02, objptr
2566c     04 02 66 F0 | 	shl	_var02, #4
25670     02 02 06 F1 | 	add	_var02, #2
25674     F1 E5 05 F1 | 	add	objptr, #497
25678     F2 02 62 FC | 	wrlong	_var02, objptr
2567c                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
2567c     04 E4 85 F1 | 	sub	objptr, #4
25680     F2 02 02 F6 | 	mov	_var02, objptr
25684     CD E5 85 F1 | 	sub	objptr, #461
25688     F2 02 62 FC | 	wrlong	_var02, objptr
2568c     20 E4 85 F1 | 	sub	objptr, #32
25690                 | _hg010b_spin2_makedl_ret
25690     2D 00 64 FD | 	ret
25694                 | 
25694                 | ' 
25694                 | ' 
25694                 | ' '****************************************************************************************************************
25694                 | ' '                                                                        					*
25694                 | ' '  Graphic primitives                                                    					*
25694                 | ' '                                                                        					*
25694                 | ' '****************************************************************************************************************
25694                 | ' 
25694                 | ' pub setspriteptr(num,ptr)
25694                 | _hg010b_spin2_setspriteptr
25694                 | ' long[@spr1ptr+12*num]:=ptr
25694     11 E5 05 F1 | 	add	objptr, #273
25698     F2 00 02 F6 | 	mov	_var01, objptr
2569c     09 03 02 F6 | 	mov	_var02, arg01
256a0     01 02 66 F0 | 	shl	_var02, #1
256a4     09 03 02 F1 | 	add	_var02, arg01
256a8     02 02 66 F0 | 	shl	_var02, #2
256ac     01 01 02 F1 | 	add	_var01, _var02
256b0     00 15 62 FC | 	wrlong	arg02, _var01
256b4     11 E5 85 F1 | 	sub	objptr, #273
256b8                 | _hg010b_spin2_setspriteptr_ret
256b8     2D 00 64 FD | 	ret
256bc                 | 
256bc                 | ' 
256bc                 | ' pub setspritepos(num,x,y)
256bc                 | _hg010b_spin2_setspritepos
256bc                 | ' if y>601
256bc     01 00 00 FF 
256c0     5A 16 56 F2 | 	cmps	arg03, ##602 wc
256c4                 | '   y:=601
256c4     01 00 00 3F 
256c8     59 16 06 36 |  if_ae	mov	arg03, ##601
256cc                 | ' if x>1024
256cc     02 00 00 FF 
256d0     01 14 56 F2 | 	cmps	arg02, ##1025 wc
256d4                 | '   x:=1024
256d4     0A 14 C6 39 |  if_ae	decod	arg02, #10
256d8                 | ' word[@spr1ptr+12*num+4]:=x
256d8     11 E5 05 F1 | 	add	objptr, #273
256dc     F2 00 02 F6 | 	mov	_var01, objptr
256e0     09 03 02 F6 | 	mov	_var02, arg01
256e4     01 02 66 F0 | 	shl	_var02, #1
256e8     09 03 02 F1 | 	add	_var02, arg01
256ec     02 02 66 F0 | 	shl	_var02, #2
256f0     01 01 02 F1 | 	add	_var01, _var02
256f4     04 00 06 F1 | 	add	_var01, #4
256f8     00 15 52 FC | 	wrword	arg02, _var01
256fc                 | ' word[@spr1ptr+12*num+6]:=y
256fc     F2 00 02 F6 | 	mov	_var01, objptr
25700     09 03 02 F6 | 	mov	_var02, arg01
25704     01 02 66 F0 | 	shl	_var02, #1
25708     09 03 02 F1 | 	add	_var02, arg01
2570c     02 02 66 F0 | 	shl	_var02, #2
25710     01 01 02 F1 | 	add	_var01, _var02
25714     06 00 06 F1 | 	add	_var01, #6
25718     00 17 52 FC | 	wrword	arg03, _var01
2571c     11 E5 85 F1 | 	sub	objptr, #273
25720                 | _hg010b_spin2_setspritepos_ret
25720     2D 00 64 FD | 	ret
25724                 | 
25724                 | ' 
25724                 | ' pub setspritesize(num,w,h)
25724                 | _hg010b_spin2_setspritesize
25724                 | ' word[@spr1ptr+12*num+8]:=w
25724     11 E5 05 F1 | 	add	objptr, #273
25728     F2 00 02 F6 | 	mov	_var01, objptr
2572c     09 03 02 F6 | 	mov	_var02, arg01
25730     01 02 66 F0 | 	shl	_var02, #1
25734     09 03 02 F1 | 	add	_var02, arg01
25738     02 02 66 F0 | 	shl	_var02, #2
2573c     01 01 02 F1 | 	add	_var01, _var02
25740     08 00 06 F1 | 	add	_var01, #8
25744     00 15 52 FC | 	wrword	arg02, _var01
25748                 | ' word[@spr1ptr+12*num+10]:=h
25748     F2 00 02 F6 | 	mov	_var01, objptr
2574c     09 03 02 F6 | 	mov	_var02, arg01
25750     01 02 66 F0 | 	shl	_var02, #1
25754     09 03 02 F1 | 	add	_var02, arg01
25758     02 02 66 F0 | 	shl	_var02, #2
2575c     01 01 02 F1 | 	add	_var01, _var02
25760     0A 00 06 F1 | 	add	_var01, #10
25764     00 17 52 FC | 	wrword	arg03, _var01
25768     11 E5 85 F1 | 	sub	objptr, #273
2576c                 | _hg010b_spin2_setspritesize_ret
2576c     2D 00 64 FD | 	ret
25770                 | 
25770                 | ' 
25770                 | ' 
25770                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
25770                 | ' 
25770                 | ' 
25770                 | ' pub putpixel(x,y,c)
25770                 | _hg010b_spin2_putpixel
25770     04 4A 05 F6 | 	mov	COUNT_, #4
25774     A8 00 A0 FD | 	call	#pushregs_
25778     09 27 02 F6 | 	mov	local01, arg01
2577c                 | ' 
2577c                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
2577c     00 28 06 F6 | 	mov	local02, #0
25780     00 26 56 F2 | 	cmps	local01, #0 wc
25784     01 28 66 36 |  if_ae	neg	local02, #1
25788     E9 E4 05 F1 | 	add	objptr, #233
2578c     F2 1A 02 FB | 	rdlong	arg05, objptr
25790     02 1A 66 F0 | 	shl	arg05, #2
25794     0D 27 52 F2 | 	cmps	local01, arg05 wc
25798     15 2B A2 F1 | 	subx	local03, local03
2579c     15 29 02 F5 | 	and	local02, local03
257a0     00 2A 06 F6 | 	mov	local03, #0
257a4     00 14 56 F2 | 	cmps	arg02, #0 wc
257a8     01 2A 66 36 |  if_ae	neg	local03, #1
257ac     15 29 02 F5 | 	and	local02, local03
257b0     04 E4 85 F1 | 	sub	objptr, #4
257b4     F2 2A 02 FB | 	rdlong	local03, objptr
257b8     E5 E4 85 F1 | 	sub	objptr, #229
257bc     15 15 52 F2 | 	cmps	arg02, local03 wc
257c0     16 2D A2 F1 | 	subx	local04, local04
257c4     16 29 CA F7 | 	test	local02, local04 wz
257c8     48 00 90 AD |  if_e	jmp	#LR__2840
257cc     DD E4 05 F1 | 	add	objptr, #221
257d0     F2 12 02 FB | 	rdlong	arg01, objptr
257d4     14 E4 05 F1 | 	add	objptr, #20
257d8     F2 2C 02 FB | 	rdlong	local04, objptr
257dc     02 2C 66 F0 | 	shl	local04, #2
257e0     0A 2D 02 FD | 	qmul	local04, arg02
257e4                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
257e4     0B 15 02 F6 | 	mov	arg02, arg03
257e8     01 16 06 F6 | 	mov	arg03, #1
257ec     00 18 06 F6 | 	mov	arg04, #0
257f0     01 1A 06 F6 | 	mov	arg05, #1
257f4     0A 00 00 FF 
257f8     DB E5 05 F1 | 	add	objptr, ##5595
257fc     18 2C 62 FD | 	getqx	local04
25800     13 2D 02 F1 | 	add	local04, local01
25804     16 13 02 F1 | 	add	arg01, local04
25808     9C 1D B0 FD | 	call	#_psram_spin2_fill
2580c     0B 00 00 FF 
25810     CC E4 85 F1 | 	sub	objptr, ##5836
25814                 | LR__2840
25814     A7 F0 03 F6 | 	mov	ptra, fp
25818     B2 00 A0 FD | 	call	#popregs_
2581c                 | _hg010b_spin2_putpixel_ret
2581c     2D 00 64 FD | 	ret
25820                 | 
25820                 | ' 
25820                 | ' pub putpixel2(x,y,c)
25820                 | _hg010b_spin2_putpixel2
25820     02 4A 05 F6 | 	mov	COUNT_, #2
25824     A8 00 A0 FD | 	call	#pushregs_
25828     DD E4 05 F1 | 	add	objptr, #221
2582c     F2 26 02 FB | 	rdlong	local01, objptr
25830     14 E4 05 F1 | 	add	objptr, #20
25834     F2 1A 02 FB | 	rdlong	arg05, objptr
25838     02 1A 66 F0 | 	shl	arg05, #2
2583c     0A 1B 02 FD | 	qmul	arg05, arg02
25840                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
25840     0B 15 02 F6 | 	mov	arg02, arg03
25844     01 16 06 F6 | 	mov	arg03, #1
25848     00 18 06 F6 | 	mov	arg04, #0
2584c     01 1A 06 F6 | 	mov	arg05, #1
25850     0A 00 00 FF 
25854     DB E5 05 F1 | 	add	objptr, ##5595
25858     18 28 62 FD | 	getqx	local02
2585c     09 29 02 F1 | 	add	local02, arg01
25860     14 27 02 F1 | 	add	local01, local02
25864     13 13 02 F6 | 	mov	arg01, local01
25868     3C 1D B0 FD | 	call	#_psram_spin2_fill
2586c     0B 00 00 FF 
25870     CC E4 85 F1 | 	sub	objptr, ##5836
25874     A7 F0 03 F6 | 	mov	ptra, fp
25878     B2 00 A0 FD | 	call	#popregs_
2587c                 | _hg010b_spin2_putpixel2_ret
2587c     2D 00 64 FD | 	ret
25880                 | 
25880                 | ' 
25880                 | ' pub getpixel2(x,y): c 
25880                 | _hg010b_spin2_getpixel2
25880     02 4A 05 F6 | 	mov	COUNT_, #2
25884     A8 00 A0 FD | 	call	#pushregs_
25888     0C F0 07 F1 | 	add	ptra, #12
2588c     04 4E 05 F1 | 	add	fp, #4
25890     A7 12 62 FC | 	wrlong	arg01, fp
25894     04 4E 05 F1 | 	add	fp, #4
25898     A7 14 62 FC | 	wrlong	arg02, fp
2589c     08 4E 85 F1 | 	sub	fp, #8
258a0     A7 00 68 FC | 	wrlong	#0, fp
258a4     A7 12 02 F6 | 	mov	arg01, fp
258a8     DD E4 05 F1 | 	add	objptr, #221
258ac     F2 14 02 FB | 	rdlong	arg02, objptr
258b0     14 E4 05 F1 | 	add	objptr, #20
258b4     F2 16 02 FB | 	rdlong	arg03, objptr
258b8     02 16 66 F0 | 	shl	arg03, #2
258bc     08 4E 05 F1 | 	add	fp, #8
258c0     A7 FA 01 FB | 	rdlong	result1, fp
258c4     FD 16 02 FD | 	qmul	arg03, result1
258c8                 | ' 
258c8                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
258c8     04 4E 85 F1 | 	sub	fp, #4
258cc     A7 26 02 FB | 	rdlong	local01, fp
258d0     04 4E 85 F1 | 	sub	fp, #4
258d4     01 16 06 F6 | 	mov	arg03, #1
258d8     0A 00 00 FF 
258dc     DB E5 05 F1 | 	add	objptr, ##5595
258e0     18 28 62 FD | 	getqx	local02
258e4     13 29 02 F1 | 	add	local02, local01
258e8     14 15 02 F1 | 	add	arg02, local02
258ec     80 1B B0 FD | 	call	#_psram_spin2_read1
258f0     0B 00 00 FF 
258f4     CC E4 85 F1 | 	sub	objptr, ##5836
258f8                 | ' return c
258f8     A7 FA 01 FB | 	rdlong	result1, fp
258fc     A7 F0 03 F6 | 	mov	ptra, fp
25900     B2 00 A0 FD | 	call	#popregs_
25904                 | _hg010b_spin2_getpixel2_ret
25904     2D 00 64 FD | 	ret
25908                 | 
25908                 | '   
25908                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
25908                 | ' 
25908                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
25908                 | _hg010b_spin2_fastline
25908     02 4A 05 F6 | 	mov	COUNT_, #2
2590c     A8 00 A0 FD | 	call	#pushregs_
25910     09 27 02 F6 | 	mov	local01, arg01
25914     0A 29 02 F6 | 	mov	local02, arg02
25918                 | ' 
25918                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
25918     00 16 56 F2 | 	cmps	arg03, #0 wc
2591c     F4 00 90 CD |  if_b	jmp	#LR__2850
25920     01 00 00 FF 
25924     2A E4 05 F1 | 	add	objptr, ##554
25928     F2 1A 02 FB | 	rdlong	arg05, objptr
2592c     01 00 00 FF 
25930     2A E4 85 F1 | 	sub	objptr, ##554
25934     0D 17 52 F2 | 	cmps	arg03, arg05 wc
25938     D8 00 90 3D |  if_ae	jmp	#LR__2850
2593c     00 26 56 F2 | 	cmps	local01, #0 wc
25940     00 28 56 C2 |  if_b	cmps	local02, #0 wc
25944     CC 00 90 CD |  if_b	jmp	#LR__2850
25948     01 00 00 FF 
2594c     26 E4 05 F1 | 	add	objptr, ##550
25950     F2 1A 02 FB | 	rdlong	arg05, objptr
25954     01 00 00 FF 
25958     26 E4 85 F1 | 	sub	objptr, ##550
2595c     0D 27 5A F2 | 	cmps	local01, arg05 wcz
25960     01 00 00 1F 
25964     26 E4 05 11 |  if_a	add	objptr, ##550
25968     F2 12 02 1B |  if_a	rdlong	arg01, objptr
2596c     01 00 00 1F 
25970     26 E4 85 11 |  if_a	sub	objptr, ##550
25974     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
25978                 | '   return
25978     98 00 90 1D |  if_a	jmp	#LR__2850
2597c     14 27 5A F2 | 	cmps	local01, local02 wcz
25980     13 1B 02 16 |  if_a	mov	arg05, local01
25984     14 27 02 16 |  if_a	mov	local01, local02
25988     0D 29 02 16 |  if_a	mov	local02, arg05
2598c     00 26 56 F2 | 	cmps	local01, #0 wc
25990     00 26 06 C6 |  if_b	mov	local01, #0
25994     01 00 00 FF 
25998     26 E4 05 F1 | 	add	objptr, ##550
2599c     F2 1A 02 FB | 	rdlong	arg05, objptr
259a0     01 00 00 FF 
259a4     26 E4 85 F1 | 	sub	objptr, ##550
259a8     0D 29 52 F2 | 	cmps	local02, arg05 wc
259ac     01 00 00 3F 
259b0     26 E4 05 31 |  if_ae	add	objptr, ##550
259b4     F2 28 02 3B |  if_ae	rdlong	local02, objptr
259b8     01 00 00 3F 
259bc     26 E4 85 31 |  if_ae	sub	objptr, ##550
259c0     DD E4 05 F1 | 	add	objptr, #221
259c4     F2 12 02 FB | 	rdlong	arg01, objptr
259c8     14 E4 05 F1 | 	add	objptr, #20
259cc     F2 1A 02 FB | 	rdlong	arg05, objptr
259d0     02 1A 66 F0 | 	shl	arg05, #2
259d4     0B 1B 02 FD | 	qmul	arg05, arg03
259d8                 | ' if x1>x2
259d8                 | '   x1,x2:=x2,x1
259d8                 | ' if x1<0 
259d8                 | '   x1:=0
259d8                 | ' if x2>=xres
259d8                 | '   x2:=xres-1  
259d8     01 28 86 31 |  if_ae	sub	local02, #1
259dc                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
259dc     01 16 06 F6 | 	mov	arg03, #1
259e0     14 17 02 F1 | 	add	arg03, local02
259e4     13 17 82 F1 | 	sub	arg03, local01
259e8     0C 15 02 F6 | 	mov	arg02, arg04
259ec     00 18 06 F6 | 	mov	arg04, #0
259f0     01 1A 06 F6 | 	mov	arg05, #1
259f4     0A 00 00 FF 
259f8     DB E5 05 F1 | 	add	objptr, ##5595
259fc     18 28 62 FD | 	getqx	local02
25a00     13 29 02 F1 | 	add	local02, local01
25a04     14 13 02 F1 | 	add	arg01, local02
25a08     9C 1B B0 FD | 	call	#_psram_spin2_fill
25a0c     0B 00 00 FF 
25a10     CC E4 85 F1 | 	sub	objptr, ##5836
25a14                 | LR__2850
25a14     A7 F0 03 F6 | 	mov	ptra, fp
25a18     B2 00 A0 FD | 	call	#popregs_
25a1c                 | _hg010b_spin2_fastline_ret
25a1c     2D 00 64 FD | 	ret
25a20                 | 
25a20                 | ' 
25a20                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
25a20                 | _hg010b_spin2_draw
25a20     0E 4A 05 F6 | 	mov	COUNT_, #14
25a24     A8 00 A0 FD | 	call	#pushregs_
25a28     09 27 02 F6 | 	mov	local01, arg01
25a2c     0A 29 02 F6 | 	mov	local02, arg02
25a30     0B 2B 02 F6 | 	mov	local03, arg03
25a34     0C 2D 02 F6 | 	mov	local04, arg04
25a38     0D 2F 02 F6 | 	mov	local05, arg05
25a3c                 | ' 
25a3c                 | ' if (y1==y2)
25a3c     16 29 0A F2 | 	cmp	local02, local04 wz
25a40     18 00 90 5D |  if_ne	jmp	#LR__2860
25a44                 | '   fastline(x1,x2,y1,c)
25a44     13 13 02 F6 | 	mov	arg01, local01
25a48     15 15 02 F6 | 	mov	arg02, local03
25a4c     14 17 02 F6 | 	mov	arg03, local02
25a50     17 19 02 F6 | 	mov	arg04, local05
25a54     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
25a58     F8 00 90 FD | 	jmp	#LR__2866
25a5c                 | LR__2860
25a5c                 | ' else  
25a5c                 | '   x:=x1
25a5c     13 31 02 F6 | 	mov	local06, local01
25a60                 | '   y:=y1
25a60     14 33 02 F6 | 	mov	local07, local02
25a64                 | ' 
25a64                 | '   if (x1<x2) 
25a64     15 27 52 F2 | 	cmps	local01, local03 wc
25a68                 | '     xi:=1
25a68     01 34 06 C6 |  if_b	mov	local08, #1
25a6c                 | '     dx:=x2-x1
25a6c     15 37 02 C6 |  if_b	mov	local09, local03
25a70     13 37 82 C1 |  if_b	sub	local09, local01
25a74                 | '   else
25a74                 | '     xi:=-1
25a74     01 34 66 36 |  if_ae	neg	local08, #1
25a78                 | '     dx:=x1-x2
25a78     15 27 82 31 |  if_ae	sub	local01, local03
25a7c     13 37 02 36 |  if_ae	mov	local09, local01
25a80                 | '   
25a80                 | '   if (y1<y2) 
25a80     16 29 52 F2 | 	cmps	local02, local04 wc
25a84                 | '     yi:=1
25a84     01 38 06 C6 |  if_b	mov	local10, #1
25a88                 | '     dy:=y2-y1
25a88     16 3B 02 C6 |  if_b	mov	local11, local04
25a8c     14 3B 82 C1 |  if_b	sub	local11, local02
25a90                 | '   else
25a90                 | '     yi:=-1
25a90     01 38 66 36 |  if_ae	neg	local10, #1
25a94                 | '     dy:=y1-y2
25a94     16 29 82 31 |  if_ae	sub	local02, local04
25a98     14 3B 02 36 |  if_ae	mov	local11, local02
25a9c                 | ' 
25a9c                 | '   putpixel(x,y,c)
25a9c     17 17 02 F6 | 	mov	arg03, local05
25aa0     18 13 02 F6 | 	mov	arg01, local06
25aa4     19 15 02 F6 | 	mov	arg02, local07
25aa8     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
25aac                 | ' 
25aac                 | '   if (dx>dy)
25aac     1D 37 5A F2 | 	cmps	local09, local11 wcz
25ab0     50 00 90 ED |  if_be	jmp	#LR__2862
25ab4                 | '     ai:=(dy-dx)*2
25ab4     1D 3D 02 F6 | 	mov	local12, local11
25ab8     1B 3D 82 F1 | 	sub	local12, local09
25abc     01 3C 66 F0 | 	shl	local12, #1
25ac0                 | '     bi:=dy*2
25ac0     01 3A 66 F0 | 	shl	local11, #1
25ac4     1D 3F 02 F6 | 	mov	local13, local11
25ac8                 | '     d:= bi-dx
25ac8     1F 41 02 F6 | 	mov	local14, local13
25acc     1B 41 82 F1 | 	sub	local14, local09
25ad0                 | '     repeat while (x<>x2) 
25ad0                 | LR__2861
25ad0     15 31 0A F2 | 	cmp	local06, local03 wz
25ad4     7C 00 90 AD |  if_e	jmp	#LR__2865
25ad8                 | '       if (d>=0) 
25ad8     00 40 56 F2 | 	cmps	local14, #0 wc
25adc                 | '         x+=xi
25adc     1A 31 02 31 |  if_ae	add	local06, local08
25ae0                 | '         y+=yi
25ae0     1C 33 02 31 |  if_ae	add	local07, local10
25ae4                 | '         d+=ai
25ae4     1E 41 02 31 |  if_ae	add	local14, local12
25ae8                 | '       else
25ae8                 | '         d+=bi
25ae8     1F 41 02 C1 |  if_b	add	local14, local13
25aec                 | '         x+=xi
25aec     1A 31 02 C1 |  if_b	add	local06, local08
25af0                 | '       putpixel(x,y,c)
25af0     18 13 02 F6 | 	mov	arg01, local06
25af4     19 15 02 F6 | 	mov	arg02, local07
25af8     17 17 02 F6 | 	mov	arg03, local05
25afc     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
25b00     CC FF 9F FD | 	jmp	#LR__2861
25b04                 | LR__2862
25b04                 | '   else
25b04                 | '     ai:=(dx-dy)*2
25b04     1B 3D 02 F6 | 	mov	local12, local09
25b08     1D 3D 82 F1 | 	sub	local12, local11
25b0c     01 3C 66 F0 | 	shl	local12, #1
25b10                 | '     bi:=dx*2
25b10     01 36 66 F0 | 	shl	local09, #1
25b14     1B 3F 02 F6 | 	mov	local13, local09
25b18                 | '     d:=bi-dy
25b18     1F 41 02 F6 | 	mov	local14, local13
25b1c     1D 41 82 F1 | 	sub	local14, local11
25b20                 | '     repeat while (y<>y2)
25b20                 | LR__2863
25b20     16 33 0A F2 | 	cmp	local07, local04 wz
25b24     2C 00 90 AD |  if_e	jmp	#LR__2864
25b28                 | '       if (d>=0)
25b28     00 40 56 F2 | 	cmps	local14, #0 wc
25b2c                 | '         x+=xi
25b2c     1A 31 02 31 |  if_ae	add	local06, local08
25b30                 | '         y+=yi
25b30     1C 33 02 31 |  if_ae	add	local07, local10
25b34                 | '         d+=ai
25b34     1E 41 02 31 |  if_ae	add	local14, local12
25b38                 | '       else
25b38                 | '         d+=bi
25b38     1F 41 02 C1 |  if_b	add	local14, local13
25b3c                 | '         y+=yi
25b3c     1C 33 02 C1 |  if_b	add	local07, local10
25b40                 | '       putpixel(x, y,c)
25b40     18 13 02 F6 | 	mov	arg01, local06
25b44     19 15 02 F6 | 	mov	arg02, local07
25b48     17 17 02 F6 | 	mov	arg03, local05
25b4c     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
25b50     CC FF 9F FD | 	jmp	#LR__2863
25b54                 | LR__2864
25b54                 | LR__2865
25b54                 | LR__2866
25b54     A7 F0 03 F6 | 	mov	ptra, fp
25b58     B2 00 A0 FD | 	call	#popregs_
25b5c                 | _hg010b_spin2_draw_ret
25b5c     2D 00 64 FD | 	ret
25b60                 | 
25b60                 | '  
25b60                 | ' pub fillpush(val) 
25b60                 | _hg010b_spin2_fillpush
25b60                 | ' fillstack[fillptr]:=val
25b60     0B 00 00 FF 
25b64     BA E4 05 F1 | 	add	objptr, ##5818
25b68     F2 00 02 FB | 	rdlong	_var01, objptr
25b6c     02 00 66 F0 | 	shl	_var01, #2
25b70     0A 00 00 FF 
25b74     00 E4 85 F1 | 	sub	objptr, ##5120
25b78     F2 00 02 F1 | 	add	_var01, objptr
25b7c     00 13 62 FC | 	wrlong	arg01, _var01
25b80                 | ' fillptr+=1   
25b80     0A 00 00 FF 
25b84     00 E4 05 F1 | 	add	objptr, ##5120
25b88     F2 00 02 FB | 	rdlong	_var01, objptr
25b8c     01 00 06 F1 | 	add	_var01, #1
25b90     F2 00 62 FC | 	wrlong	_var01, objptr
25b94     0B 00 00 FF 
25b98     BA E4 85 F1 | 	sub	objptr, ##5818
25b9c                 | _hg010b_spin2_fillpush_ret
25b9c     2D 00 64 FD | 	ret
25ba0                 | 
25ba0                 | ' 
25ba0                 | '     
25ba0                 | ' pub fillpop() : val
25ba0                 | _hg010b_spin2_fillpop
25ba0                 | ' 
25ba0                 | ' fillptr-=1
25ba0     0B 00 00 FF 
25ba4     BA E4 05 F1 | 	add	objptr, ##5818
25ba8     F2 FA 01 FB | 	rdlong	result1, objptr
25bac     01 FA 85 F1 | 	sub	result1, #1
25bb0     F2 FA 61 FC | 	wrlong	result1, objptr
25bb4                 | ' if fillptr<0
25bb4     0B 00 00 FF 
25bb8     BA E4 85 F1 | 	sub	objptr, ##5818
25bbc     00 FA 55 F2 | 	cmps	result1, #0 wc
25bc0                 | '   fillptr:=0
25bc0     0B 00 00 CF 
25bc4     BA E4 05 C1 |  if_b	add	objptr, ##5818
25bc8     F2 00 68 CC |  if_b	wrlong	#0, objptr
25bcc     0B 00 00 CF 
25bd0     BA E4 85 C1 |  if_b	sub	objptr, ##5818
25bd4                 | '   val:=-12345
25bd4     E7 FF 7F CF 
25bd8     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
25bdc     28 00 90 CD |  if_b	jmp	#LR__2870
25be0                 | ' else 
25be0                 | '   val:=fillstack[fillptr]
25be0     0B 00 00 FF 
25be4     BA E4 05 F1 | 	add	objptr, ##5818
25be8     F2 00 02 FB | 	rdlong	_var01, objptr
25bec     02 00 66 F0 | 	shl	_var01, #2
25bf0     0A 00 00 FF 
25bf4     00 E4 85 F1 | 	sub	objptr, ##5120
25bf8     F2 00 02 F1 | 	add	_var01, objptr
25bfc     00 01 02 FB | 	rdlong	_var01, _var01
25c00     01 00 00 FF 
25c04     BA E4 85 F1 | 	sub	objptr, ##698
25c08                 | LR__2870
25c08                 | ' return val
25c08     00 FB 01 F6 | 	mov	result1, _var01
25c0c                 | _hg010b_spin2_fillpop_ret
25c0c     2D 00 64 FD | 	ret
25c10                 | 
25c10                 | ' 
25c10                 | '       
25c10                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
25c10                 | _hg010b_spin2_fill
25c10     0B 4A 05 F6 | 	mov	COUNT_, #11
25c14     A8 00 A0 FD | 	call	#pushregs_
25c18                 | ' 
25c18                 | ' newcolor:=newcolor & 255
25c18     0B 27 E2 F8 | 	getbyte	local01, arg03, #0
25c1c                 | ' oldcolor:=oldcolor & 255
25c1c     0C 29 E2 F8 | 	getbyte	local02, arg04, #0
25c20                 | ' 
25c20                 | ' if (oldcolor == newcolor) 
25c20     13 29 0A F2 | 	cmp	local02, local01 wz
25c24                 | '   return
25c24     70 02 90 AD |  if_e	jmp	#LR__2889
25c28                 | ' 
25c28                 | ' fillptr:=0
25c28     0B 00 00 FF 
25c2c     BA E4 05 F1 | 	add	objptr, ##5818
25c30     F2 00 68 FC | 	wrlong	#0, objptr
25c34                 | ' fillmax:=0
25c34     04 E4 05 F1 | 	add	objptr, #4
25c38     F2 00 68 FC | 	wrlong	#0, objptr
25c3c     0B 00 00 FF 
25c40     BE E4 85 F1 | 	sub	objptr, ##5822
25c44                 | ' fillpush(x)
25c44     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
25c48                 | ' fillpush(y)
25c48     0A 13 02 F6 | 	mov	arg01, arg02
25c4c     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
25c50                 | ' y:=fillpop()
25c50     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
25c54     FD 2A 02 F6 | 	mov	local03, result1
25c58                 | ' x:=fillpop()
25c58     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
25c5c     FD 2C 02 F6 | 	mov	local04, result1
25c60                 | ' 'pinhigh(38)
25c60                 | ' repeat while (x>-1)       
25c60                 | LR__2880
25c60     00 2C 56 F2 | 	cmps	local04, #0 wc
25c64     30 02 90 CD |  if_b	jmp	#LR__2888
25c68                 | '  ' pintoggle(39)
25c68                 | '   x1 := x
25c68     16 2F 02 F6 | 	mov	local05, local04
25c6c                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
25c6c                 | LR__2881
25c6c     00 30 06 F6 | 	mov	local06, #0
25c70     00 32 06 F6 | 	mov	local07, #0
25c74     00 2E 56 F2 | 	cmps	local05, #0 wc
25c78     01 32 66 36 |  if_ae	neg	local07, #1
25c7c     00 32 0E F2 | 	cmp	local07, #0 wz
25c80     00 30 26 56 |  if_ne	not	local06, #0
25c84     00 34 06 F6 | 	mov	local08, #0
25c88     00 36 06 F6 | 	mov	local09, #0
25c8c     15 15 02 F6 | 	mov	arg02, local03
25c90     17 13 02 F6 | 	mov	arg01, local05
25c94     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
25c98     14 FB 09 F2 | 	cmp	result1, local02 wz
25c9c     00 36 26 A6 |  if_e	not	local09, #0
25ca0     00 36 0E F2 | 	cmp	local09, #0 wz
25ca4     00 34 26 56 |  if_ne	not	local08, #0
25ca8     1A 31 CA F7 | 	test	local06, local08 wz
25cac                 | '     x1--
25cac     01 2E 86 51 |  if_ne	sub	local05, #1
25cb0     B8 FF 9F 5D |  if_ne	jmp	#LR__2881
25cb4                 | '   x1++
25cb4     01 2E 06 F1 | 	add	local05, #1
25cb8                 | '   spanabove := 0
25cb8     00 38 06 F6 | 	mov	local10, #0
25cbc                 | '   spanbelow := 0
25cbc     00 3A 06 F6 | 	mov	local11, #0
25cc0                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
25cc0                 | LR__2882
25cc0     00 30 06 F6 | 	mov	local06, #0
25cc4     02 00 00 FF 
25cc8     00 2E 56 F2 | 	cmps	local05, ##1024 wc
25ccc     00 30 26 C6 |  if_b	not	local06, #0
25cd0     00 34 06 F6 | 	mov	local08, #0
25cd4     00 36 06 F6 | 	mov	local09, #0
25cd8     15 15 02 F6 | 	mov	arg02, local03
25cdc     17 13 02 F6 | 	mov	arg01, local05
25ce0     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
25ce4     14 FB 09 F2 | 	cmp	result1, local02 wz
25ce8     00 36 26 A6 |  if_e	not	local09, #0
25cec     00 36 0E F2 | 	cmp	local09, #0 wz
25cf0     00 34 26 56 |  if_ne	not	local08, #0
25cf4     1A 31 CA F7 | 	test	local06, local08 wz
25cf8     88 01 90 AD |  if_e	jmp	#LR__2887
25cfc                 | '     putpixel2 (x1,y, newcolor & 255)
25cfc     13 17 E2 F8 | 	getbyte	arg03, local01, #0
25d00     17 13 02 F6 | 	mov	arg01, local05
25d04     15 15 02 F6 | 	mov	arg02, local03
25d08     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
25d0c                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
25d0c     00 30 06 F6 | 	mov	local06, #0
25d10     00 32 06 F6 | 	mov	local07, #0
25d14     00 38 0E F2 | 	cmp	local10, #0 wz
25d18     01 2A 56 A2 |  if_e	cmps	local03, #1 wc
25d1c     01 32 66 26 |  if_nc_and_z	neg	local07, #1
25d20     00 32 0E F2 | 	cmp	local07, #0 wz
25d24     00 30 26 56 |  if_ne	not	local06, #0
25d28     00 34 06 F6 | 	mov	local08, #0
25d2c     00 36 06 F6 | 	mov	local09, #0
25d30     15 15 02 F6 | 	mov	arg02, local03
25d34     01 14 86 F1 | 	sub	arg02, #1
25d38     17 13 02 F6 | 	mov	arg01, local05
25d3c     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
25d40     14 FB 09 F2 | 	cmp	result1, local02 wz
25d44     00 36 26 A6 |  if_e	not	local09, #0
25d48     00 36 0E F2 | 	cmp	local09, #0 wz
25d4c     00 34 26 56 |  if_ne	not	local08, #0
25d50     1A 31 CA F7 | 	test	local06, local08 wz
25d54     1C 00 90 AD |  if_e	jmp	#LR__2883
25d58                 | '       fillpush(x1)
25d58     17 13 02 F6 | 	mov	arg01, local05
25d5c     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
25d60                 | '       fillpush(y-1)
25d60     15 13 02 F6 | 	mov	arg01, local03
25d64     01 12 86 F1 | 	sub	arg01, #1
25d68     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
25d6c                 | '       spanabove := 1 
25d6c     01 38 06 F6 | 	mov	local10, #1
25d70     4C 00 90 FD | 	jmp	#LR__2884
25d74                 | LR__2883
25d74                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
25d74     00 30 06 F6 | 	mov	local06, #0
25d78     00 32 06 F6 | 	mov	local07, #0
25d7c     00 38 0E F2 | 	cmp	local10, #0 wz
25d80     01 2A 56 52 |  if_ne	cmps	local03, #1 wc
25d84     01 32 66 16 |  if_a	neg	local07, #1
25d88     00 32 0E F2 | 	cmp	local07, #0 wz
25d8c     00 30 26 56 |  if_ne	not	local06, #0
25d90     00 34 06 F6 | 	mov	local08, #0
25d94     00 36 06 F6 | 	mov	local09, #0
25d98     15 15 02 F6 | 	mov	arg02, local03
25d9c     01 14 86 F1 | 	sub	arg02, #1
25da0     17 13 02 F6 | 	mov	arg01, local05
25da4     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
25da8     14 FB 09 F2 | 	cmp	result1, local02 wz
25dac     00 36 26 56 |  if_ne	not	local09, #0
25db0     00 36 0E F2 | 	cmp	local09, #0 wz
25db4     00 34 26 56 |  if_ne	not	local08, #0
25db8     1A 31 CA F7 | 	test	local06, local08 wz
25dbc                 | '       spanabove := 0 
25dbc     00 38 06 56 |  if_ne	mov	local10, #0
25dc0                 | LR__2884
25dc0                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
25dc0     00 30 06 F6 | 	mov	local06, #0
25dc4     00 32 06 F6 | 	mov	local07, #0
25dc8     00 3A 0E F2 | 	cmp	local11, #0 wz
25dcc     01 00 00 AF 
25dd0     3F 2A 56 A2 |  if_e	cmps	local03, ##575 wc
25dd4     01 32 66 86 |  if_c_and_z	neg	local07, #1
25dd8     00 32 0E F2 | 	cmp	local07, #0 wz
25ddc     00 30 26 56 |  if_ne	not	local06, #0
25de0     00 34 06 F6 | 	mov	local08, #0
25de4     00 36 06 F6 | 	mov	local09, #0
25de8     15 15 02 F6 | 	mov	arg02, local03
25dec     01 14 06 F1 | 	add	arg02, #1
25df0     17 13 02 F6 | 	mov	arg01, local05
25df4     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
25df8     14 FB 09 F2 | 	cmp	result1, local02 wz
25dfc     00 36 26 A6 |  if_e	not	local09, #0
25e00     00 36 0E F2 | 	cmp	local09, #0 wz
25e04     00 34 26 56 |  if_ne	not	local08, #0
25e08     1A 31 CA F7 | 	test	local06, local08 wz
25e0c     1C 00 90 AD |  if_e	jmp	#LR__2885
25e10                 | '       fillpush(x1)
25e10     17 13 02 F6 | 	mov	arg01, local05
25e14     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
25e18                 | '       fillpush(y + 1)
25e18     15 13 02 F6 | 	mov	arg01, local03
25e1c     01 12 06 F1 | 	add	arg01, #1
25e20     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
25e24                 | '       spanBelow := 1
25e24     01 3A 06 F6 | 	mov	local11, #1
25e28     50 00 90 FD | 	jmp	#LR__2886
25e2c                 | LR__2885
25e2c                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
25e2c     00 30 06 F6 | 	mov	local06, #0
25e30     00 32 06 F6 | 	mov	local07, #0
25e34     00 3A 0E F2 | 	cmp	local11, #0 wz
25e38     01 00 00 5F 
25e3c     3F 2A 56 52 |  if_ne	cmps	local03, ##575 wc
25e40     01 32 66 46 |  if_c_and_nz	neg	local07, #1
25e44     00 32 0E F2 | 	cmp	local07, #0 wz
25e48     00 30 26 56 |  if_ne	not	local06, #0
25e4c     00 34 06 F6 | 	mov	local08, #0
25e50     00 36 06 F6 | 	mov	local09, #0
25e54     15 15 02 F6 | 	mov	arg02, local03
25e58     01 14 06 F1 | 	add	arg02, #1
25e5c     17 13 02 F6 | 	mov	arg01, local05
25e60     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
25e64     14 FB 09 F2 | 	cmp	result1, local02 wz
25e68     00 36 26 56 |  if_ne	not	local09, #0
25e6c     00 36 0E F2 | 	cmp	local09, #0 wz
25e70     00 34 26 56 |  if_ne	not	local08, #0
25e74     1A 31 CA F7 | 	test	local06, local08 wz
25e78                 | '       spanbelow := 0
25e78     00 3A 06 56 |  if_ne	mov	local11, #0
25e7c                 | LR__2886
25e7c                 | '     x1++
25e7c     01 2E 06 F1 | 	add	local05, #1
25e80     3C FE 9F FD | 	jmp	#LR__2882
25e84                 | LR__2887
25e84                 | '   y:=fillpop()
25e84     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
25e88     FD 2A 02 F6 | 	mov	local03, result1
25e8c                 | '   x:=fillpop()
25e8c     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
25e90     FD 2C 02 F6 | 	mov	local04, result1
25e94     C8 FD 9F FD | 	jmp	#LR__2880
25e98                 | LR__2888
25e98                 | LR__2889
25e98     A7 F0 03 F6 | 	mov	ptra, fp
25e9c     B2 00 A0 FD | 	call	#popregs_
25ea0                 | _hg010b_spin2_fill_ret
25ea0     2D 00 64 FD | 	ret
25ea4                 | 
25ea4                 | ' 'pinlow(38)    
25ea4                 | ' 
25ea4                 | ' '-- A filled circle -----------------------------------------------------
25ea4                 | ' 
25ea4                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
25ea4                 | _hg010b_spin2_fcircle
25ea4     08 4A 05 F6 | 	mov	COUNT_, #8
25ea8     A8 00 A0 FD | 	call	#pushregs_
25eac     0B 27 02 F6 | 	mov	local01, arg03
25eb0     FF FF 7F FF 
25eb4     FE 27 06 FD | 	qmul	local01, ##-2
25eb8     09 29 02 F6 | 	mov	local02, arg01
25ebc     0A 2B 02 F6 | 	mov	local03, arg02
25ec0     0C 2D 02 F6 | 	mov	local04, arg04
25ec4                 | ' 
25ec4                 | ' d:=5-4*r
25ec4     13 19 02 F6 | 	mov	arg04, local01
25ec8     02 18 66 F0 | 	shl	arg04, #2
25ecc     05 2E 06 F6 | 	mov	local05, #5
25ed0     0C 2F 82 F1 | 	sub	local05, arg04
25ed4                 | ' x:=0
25ed4     00 30 06 F6 | 	mov	local06, #0
25ed8                 | ' y:=r
25ed8                 | ' da:=(-2*r+5)*4
25ed8                 | ' db:=3*4
25ed8     0C 32 06 F6 | 	mov	local07, #12
25edc                 | ' repeat while (x<=y) 
25edc     18 34 62 FD | 	getqx	local08
25ee0     05 34 06 F1 | 	add	local08, #5
25ee4     02 34 66 F0 | 	shl	local08, #2
25ee8                 | LR__2890
25ee8     13 31 5A F2 | 	cmps	local06, local01 wcz
25eec     B4 00 90 1D |  if_a	jmp	#LR__2892
25ef0                 | '   fastline(x0-x,x0+x,y0-y,c)
25ef0     14 13 02 F6 | 	mov	arg01, local02
25ef4     18 13 82 F1 | 	sub	arg01, local06
25ef8     14 15 02 F6 | 	mov	arg02, local02
25efc     18 15 02 F1 | 	add	arg02, local06
25f00     15 17 02 F6 | 	mov	arg03, local03
25f04     13 17 82 F1 | 	sub	arg03, local01
25f08     16 19 02 F6 | 	mov	arg04, local04
25f0c     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
25f10                 | '   fastline(x0-x,x0+x,y0+y,c)
25f10     14 13 02 F6 | 	mov	arg01, local02
25f14     18 13 82 F1 | 	sub	arg01, local06
25f18     14 15 02 F6 | 	mov	arg02, local02
25f1c     18 15 02 F1 | 	add	arg02, local06
25f20     15 17 02 F6 | 	mov	arg03, local03
25f24     13 17 02 F1 | 	add	arg03, local01
25f28     16 19 02 F6 | 	mov	arg04, local04
25f2c     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
25f30                 | '   fastline(x0-y,x0+y,y0-x,c)
25f30     14 13 02 F6 | 	mov	arg01, local02
25f34     13 13 82 F1 | 	sub	arg01, local01
25f38     14 15 02 F6 | 	mov	arg02, local02
25f3c     13 15 02 F1 | 	add	arg02, local01
25f40     15 17 02 F6 | 	mov	arg03, local03
25f44     18 17 82 F1 | 	sub	arg03, local06
25f48     16 19 02 F6 | 	mov	arg04, local04
25f4c     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
25f50                 | '   fastline(x0-y,x0+y,y0+x,c)
25f50     14 13 02 F6 | 	mov	arg01, local02
25f54     13 13 82 F1 | 	sub	arg01, local01
25f58     14 15 02 F6 | 	mov	arg02, local02
25f5c     13 15 02 F1 | 	add	arg02, local01
25f60     15 17 02 F6 | 	mov	arg03, local03
25f64     18 17 02 F1 | 	add	arg03, local06
25f68     16 19 02 F6 | 	mov	arg04, local04
25f6c     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
25f70                 | '   if d>0 
25f70     01 2E 56 F2 | 	cmps	local05, #1 wc
25f74     18 00 90 CD |  if_b	jmp	#LR__2891
25f78                 | '     d+=da
25f78     1A 2F 02 F1 | 	add	local05, local08
25f7c                 | '     y-=1
25f7c     01 26 86 F1 | 	sub	local01, #1
25f80                 | '     x+=1
25f80     01 30 06 F1 | 	add	local06, #1
25f84                 | '     da+=4*4
25f84     10 34 06 F1 | 	add	local08, #16
25f88                 | '     db+=2*4
25f88     08 32 06 F1 | 	add	local07, #8
25f8c     58 FF 9F FD | 	jmp	#LR__2890
25f90                 | LR__2891
25f90                 | '   else
25f90                 | '     d+=db
25f90     19 2F 02 F1 | 	add	local05, local07
25f94                 | '     x+=1
25f94     01 30 06 F1 | 	add	local06, #1
25f98                 | '     da+=2*4
25f98     08 34 06 F1 | 	add	local08, #8
25f9c                 | '     db+=2*4
25f9c     08 32 06 F1 | 	add	local07, #8
25fa0     44 FF 9F FD | 	jmp	#LR__2890
25fa4                 | LR__2892
25fa4     A7 F0 03 F6 | 	mov	ptra, fp
25fa8     B2 00 A0 FD | 	call	#popregs_
25fac                 | _hg010b_spin2_fcircle_ret
25fac     2D 00 64 FD | 	ret
25fb0                 | 
25fb0                 | '  
25fb0                 | ' '-- A circle ------------------------------------------------------------ 
25fb0                 | '  
25fb0                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
25fb0                 | _hg010b_spin2_circle
25fb0     08 4A 05 F6 | 	mov	COUNT_, #8
25fb4     A8 00 A0 FD | 	call	#pushregs_
25fb8     0B 27 02 F6 | 	mov	local01, arg03
25fbc     FF FF 7F FF 
25fc0     FE 27 06 FD | 	qmul	local01, ##-2
25fc4     09 29 02 F6 | 	mov	local02, arg01
25fc8     0A 2B 02 F6 | 	mov	local03, arg02
25fcc     0C 2D 02 F6 | 	mov	local04, arg04
25fd0                 | ' 
25fd0                 | '  
25fd0                 | ' d:=5-4*r
25fd0     13 19 02 F6 | 	mov	arg04, local01
25fd4     02 18 66 F0 | 	shl	arg04, #2
25fd8     05 2E 06 F6 | 	mov	local05, #5
25fdc     0C 2F 82 F1 | 	sub	local05, arg04
25fe0                 | ' x:=0
25fe0     00 30 06 F6 | 	mov	local06, #0
25fe4                 | ' y:=r
25fe4                 | ' da:=(-2*r+5)*4
25fe4                 | ' db:=3*4
25fe4     0C 32 06 F6 | 	mov	local07, #12
25fe8                 | ' repeat while (x<=y) 
25fe8     18 34 62 FD | 	getqx	local08
25fec     05 34 06 F1 | 	add	local08, #5
25ff0     02 34 66 F0 | 	shl	local08, #2
25ff4                 | LR__2900
25ff4     13 31 5A F2 | 	cmps	local06, local01 wcz
25ff8     F4 00 90 1D |  if_a	jmp	#LR__2902
25ffc                 | '   putpixel(x0-x,y0-y,c)
25ffc     14 13 02 F6 | 	mov	arg01, local02
26000     18 13 82 F1 | 	sub	arg01, local06
26004     15 15 02 F6 | 	mov	arg02, local03
26008     13 15 82 F1 | 	sub	arg02, local01
2600c     16 17 02 F6 | 	mov	arg03, local04
26010     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
26014                 | '   putpixel(x0-x,y0+y,c)
26014     14 13 02 F6 | 	mov	arg01, local02
26018     18 13 82 F1 | 	sub	arg01, local06
2601c     15 15 02 F6 | 	mov	arg02, local03
26020     13 15 02 F1 | 	add	arg02, local01
26024     16 17 02 F6 | 	mov	arg03, local04
26028     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
2602c                 | '   putpixel(x0+x,y0-y,c)
2602c     14 13 02 F6 | 	mov	arg01, local02
26030     18 13 02 F1 | 	add	arg01, local06
26034     15 15 02 F6 | 	mov	arg02, local03
26038     13 15 82 F1 | 	sub	arg02, local01
2603c     16 17 02 F6 | 	mov	arg03, local04
26040     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
26044                 | '   putpixel(x0+x,y0+y,c)
26044     14 13 02 F6 | 	mov	arg01, local02
26048     18 13 02 F1 | 	add	arg01, local06
2604c     15 15 02 F6 | 	mov	arg02, local03
26050     13 15 02 F1 | 	add	arg02, local01
26054     16 17 02 F6 | 	mov	arg03, local04
26058     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
2605c                 | '   putpixel(x0-y,y0-x,c)
2605c     14 13 02 F6 | 	mov	arg01, local02
26060     13 13 82 F1 | 	sub	arg01, local01
26064     15 15 02 F6 | 	mov	arg02, local03
26068     18 15 82 F1 | 	sub	arg02, local06
2606c     16 17 02 F6 | 	mov	arg03, local04
26070     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
26074                 | '   putpixel(x0-y,y0+x,c)
26074     14 13 02 F6 | 	mov	arg01, local02
26078     13 13 82 F1 | 	sub	arg01, local01
2607c     15 15 02 F6 | 	mov	arg02, local03
26080     18 15 02 F1 | 	add	arg02, local06
26084     16 17 02 F6 | 	mov	arg03, local04
26088     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
2608c                 | '   putpixel(x0+y,y0-x,c)
2608c     14 13 02 F6 | 	mov	arg01, local02
26090     13 13 02 F1 | 	add	arg01, local01
26094     15 15 02 F6 | 	mov	arg02, local03
26098     18 15 82 F1 | 	sub	arg02, local06
2609c     16 17 02 F6 | 	mov	arg03, local04
260a0     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
260a4                 | '   putpixel(x0+y,y0+x,c)
260a4     14 13 02 F6 | 	mov	arg01, local02
260a8     13 13 02 F1 | 	add	arg01, local01
260ac     15 15 02 F6 | 	mov	arg02, local03
260b0     18 15 02 F1 | 	add	arg02, local06
260b4     16 17 02 F6 | 	mov	arg03, local04
260b8     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
260bc                 | '   if d>0 
260bc     01 2E 56 F2 | 	cmps	local05, #1 wc
260c0     18 00 90 CD |  if_b	jmp	#LR__2901
260c4                 | '     d+=da
260c4     1A 2F 02 F1 | 	add	local05, local08
260c8                 | '     y-=1
260c8     01 26 86 F1 | 	sub	local01, #1
260cc                 | '     x+=1
260cc     01 30 06 F1 | 	add	local06, #1
260d0                 | '     da+=4*4
260d0     10 34 06 F1 | 	add	local08, #16
260d4                 | '     db+=2*4
260d4     08 32 06 F1 | 	add	local07, #8
260d8     18 FF 9F FD | 	jmp	#LR__2900
260dc                 | LR__2901
260dc                 | '   else
260dc                 | '     d+=db
260dc     19 2F 02 F1 | 	add	local05, local07
260e0                 | '     x+=1
260e0     01 30 06 F1 | 	add	local06, #1
260e4                 | '     da+=2*4
260e4     08 34 06 F1 | 	add	local08, #8
260e8                 | '     db+=2*4
260e8     08 32 06 F1 | 	add	local07, #8
260ec     04 FF 9F FD | 	jmp	#LR__2900
260f0                 | LR__2902
260f0     A7 F0 03 F6 | 	mov	ptra, fp
260f4     B2 00 A0 FD | 	call	#popregs_
260f8                 | _hg010b_spin2_circle_ret
260f8     2D 00 64 FD | 	ret
260fc                 | 
260fc                 | '     
260fc                 | ' '-- A frame (an empty rectangle) ---------------------------------------
260fc                 | ' 
260fc                 | ' pub frame(x1,y1,x2,y2,c)
260fc                 | _hg010b_spin2_frame
260fc     05 4A 05 F6 | 	mov	COUNT_, #5
26100     A8 00 A0 FD | 	call	#pushregs_
26104     09 27 02 F6 | 	mov	local01, arg01
26108     0A 29 02 F6 | 	mov	local02, arg02
2610c     0B 2B 02 F6 | 	mov	local03, arg03
26110     0C 2D 02 F6 | 	mov	local04, arg04
26114     0D 2F 02 F6 | 	mov	local05, arg05
26118                 | ' 
26118                 | ' fastline(x1,x2,y1,c)
26118     13 13 02 F6 | 	mov	arg01, local01
2611c     15 15 02 F6 | 	mov	arg02, local03
26120     14 17 02 F6 | 	mov	arg03, local02
26124     17 19 02 F6 | 	mov	arg04, local05
26128     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
2612c                 | ' fastline(x1,x2,y2,c)
2612c     13 13 02 F6 | 	mov	arg01, local01
26130     15 15 02 F6 | 	mov	arg02, local03
26134     16 17 02 F6 | 	mov	arg03, local04
26138     17 19 02 F6 | 	mov	arg04, local05
2613c     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
26140                 | ' line(x1,y1,x1,y2,c)
26140     13 13 02 F6 | 	mov	arg01, local01
26144     14 15 02 F6 | 	mov	arg02, local02
26148     13 17 02 F6 | 	mov	arg03, local01
2614c     16 19 02 F6 | 	mov	arg04, local04
26150     17 1B 02 F6 | 	mov	arg05, local05
26154                 | ' draw(x1,y1,x2,y2,c)
26154     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
26158                 | ' line(x2,y1,x2,y2,c)
26158     15 13 02 F6 | 	mov	arg01, local03
2615c     14 15 02 F6 | 	mov	arg02, local02
26160     15 17 02 F6 | 	mov	arg03, local03
26164     16 19 02 F6 | 	mov	arg04, local04
26168     17 1B 02 F6 | 	mov	arg05, local05
2616c                 | ' draw(x1,y1,x2,y2,c)
2616c     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
26170     A7 F0 03 F6 | 	mov	ptra, fp
26174     B2 00 A0 FD | 	call	#popregs_
26178                 | _hg010b_spin2_frame_ret
26178     2D 00 64 FD | 	ret
2617c                 | 
2617c                 | ' 
2617c                 | ' '-- A box (a filled rectangle) ----------------------------------------
2617c                 | ' 
2617c                 | ' pub box(x1,y1,x2,y2,c) |yy
2617c                 | _hg010b_spin2_box
2617c     06 4A 05 F6 | 	mov	COUNT_, #6
26180     A8 00 A0 FD | 	call	#pushregs_
26184     09 27 02 F6 | 	mov	local01, arg01
26188     0A 29 02 F6 | 	mov	local02, arg02
2618c     0B 2B 02 F6 | 	mov	local03, arg03
26190     0C 2D 02 F6 | 	mov	local04, arg04
26194     0D 2F 02 F6 | 	mov	local05, arg05
26198                 | ' 
26198                 | ' repeat yy from y1 to y2
26198     14 2D 52 F2 | 	cmps	local04, local02 wc
2619c     01 30 86 F6 | 	negc	local06, #1
261a0     18 2D 02 F1 | 	add	local04, local06
261a4                 | LR__2910
261a4                 | '   fastline(x1,x2,yy,c)
261a4     13 13 02 F6 | 	mov	arg01, local01
261a8     15 15 02 F6 | 	mov	arg02, local03
261ac     17 19 02 F6 | 	mov	arg04, local05
261b0     14 17 02 F6 | 	mov	arg03, local02
261b4     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
261b8     18 29 02 F1 | 	add	local02, local06
261bc     16 29 0A F2 | 	cmp	local02, local04 wz
261c0     E0 FF 9F 5D |  if_ne	jmp	#LR__2910
261c4     A7 F0 03 F6 | 	mov	ptra, fp
261c8     B2 00 A0 FD | 	call	#popregs_
261cc                 | _hg010b_spin2_box_ret
261cc     2D 00 64 FD | 	ret
261d0                 | 
261d0                 | '       
261d0                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
261d0                 | _hg010b_spin2_putcharxycgf
261d0                 | ' 
261d0                 | '  
261d0                 | ' repeat yy from 0 to 15
261d0     00 00 06 F6 | 	mov	_var01, #0
261d4     97 8C 48 FB | 	callpa	#(@LR__2922-@LR__2920)>>2,fcache_load_ptr_
261d8                 | LR__2920
261d8                 | ' 
261d8                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
261d8     95 E4 05 F1 | 	add	objptr, #149
261dc     F2 02 02 FB | 	rdlong	_var02, objptr
261e0     0A 02 66 F0 | 	shl	_var02, #10
261e4     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
261e8     01 05 02 F1 | 	add	_var03, _var02
261ec     0B 03 02 F6 | 	mov	_var02, arg03
261f0     04 02 66 F0 | 	shl	_var02, #4
261f4     01 05 02 F1 | 	add	_var03, _var02
261f8     00 05 02 F1 | 	add	_var03, _var01
261fc     02 05 C2 FA | 	rdbyte	_var03, _var03
26200                 | '   asm
26200     00 04 0E F4 | 	testb	_var03, #0 wz
26204     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
26208     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
2620c     01 04 0E F4 | 	testb	_var03, #1 wz
26210     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
26214     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
26218     02 04 0E F4 | 	testb	_var03, #2 wz
2621c     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
26220     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
26224     03 04 0E F4 | 	testb	_var03, #3 wz
26228     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
2622c     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
26230     04 04 0E F4 | 	testb	_var03, #4 wz
26234     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
26238     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
2623c     05 04 0E F4 | 	testb	_var03, #5 wz
26240     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
26244     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
26248     06 04 0E F4 | 	testb	_var03, #6 wz
2624c     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
26250     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
26254     07 04 0E F4 | 	testb	_var03, #7 wz
26258     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
2625c     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
26260                 | '   
26260                 | '   ccc[0]:=c1
26260     99 E5 05 F1 | 	add	objptr, #409
26264     F2 06 62 FC | 	wrlong	_var04, objptr
26268                 | '   ccc[1]:=c2 
26268     04 E4 05 F1 | 	add	objptr, #4
2626c     F2 08 62 FC | 	wrlong	_var05, objptr
26270                 | '   long[mailbox0][2]:=8
26270     49 E4 85 F1 | 	sub	objptr, #73
26274     F2 04 02 FB | 	rdlong	_var03, objptr
26278     08 04 06 F1 | 	add	_var03, #8
2627c     02 11 68 FC | 	wrlong	#8, _var03
26280                 | '   long[mailbox0][1]:=@ccc
26280     45 E4 05 F1 | 	add	objptr, #69
26284     F2 04 02 F6 | 	mov	_var03, objptr
26288     45 E4 85 F1 | 	sub	objptr, #69
2628c     F2 02 02 FB | 	rdlong	_var02, objptr
26290     04 02 06 F1 | 	add	_var02, #4
26294     01 05 62 FC | 	wrlong	_var03, _var02
26298                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
26298     0C E5 85 F1 | 	sub	objptr, #268
2629c     F2 04 02 FB | 	rdlong	_var03, objptr
262a0     0A 03 02 F6 | 	mov	_var02, arg02
262a4     00 03 02 F1 | 	add	_var02, _var01
262a8     0A 02 66 F0 | 	shl	_var02, #10
262ac     09 0B 02 F6 | 	mov	_var06, arg01
262b0     02 0A 66 F0 | 	shl	_var06, #2
262b4     05 03 02 F1 | 	add	_var02, _var06
262b8     01 05 02 F1 | 	add	_var03, _var02
262bc     00 00 78 FF 
262c0     00 04 06 F1 | 	add	_var03, ##-268435456
262c4     0C E5 05 F1 | 	add	objptr, #268
262c8     F2 0A 02 FB | 	rdlong	_var06, objptr
262cc     05 05 62 FC | 	wrlong	_var03, _var06
262d0                 | '   repeat
262d0                 | LR__2921
262d0     F2 04 02 FB | 	rdlong	_var03, objptr
262d4     02 03 02 FB | 	rdlong	_var02, _var03
262d8     00 02 56 F2 | 	cmps	_var02, #0 wc
262dc     F0 FF 9F CD |  if_b	jmp	#LR__2921
262e0     E9 E5 85 F1 | 	sub	objptr, #489
262e4     01 00 06 F1 | 	add	_var01, #1
262e8     10 00 56 F2 | 	cmps	_var01, #16 wc
262ec     E8 FE 9F CD |  if_b	jmp	#LR__2920
262f0                 | LR__2922
262f0                 | _hg010b_spin2_putcharxycgf_ret
262f0     2D 00 64 FD | 	ret
262f4                 | 
262f4                 | ' 
262f4                 | ' 
262f4                 | ' '**********************************************************************r***
262f4                 | ' '                                                                        *
262f4                 | ' ' Font related functions                                                 *
262f4                 | ' '                                                                        *
262f4                 | ' '*************************************************************************
262f4                 | ' 
262f4                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
262f4                 | ' 
262f4                 | ' pub setfontfamily(afontnum)
262f4                 | _hg010b_spin2_setfontfamily
262f4                 | ' 
262f4                 | ' font_family:=afontnum
262f4     95 E4 05 F1 | 	add	objptr, #149
262f8     F2 12 62 FC | 	wrlong	arg01, objptr
262fc     95 E4 85 F1 | 	sub	objptr, #149
26300                 | ' 'if afontnum==8
26300                 | ' '  font_ptr:=@amiga_font
26300                 | ' 
26300                 | ' if afontnum==4
26300     04 12 0E F2 | 	cmp	arg01, #4 wz
26304                 | '   font_ptr:=@st_font
26304     08 00 00 AF 
26308     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
2630c     08 E4 05 A1 |  if_e	add	objptr, #8
26310     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
26314     08 E4 85 A1 |  if_e	sub	objptr, #8
26318     08 00 00 AF 
2631c     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
26320                 | ' if afontnum==0
26320     00 12 0E F2 | 	cmp	arg01, #0 wz
26324                 | '   font_ptr:=@vga_font
26324     08 E4 05 A1 |  if_e	add	objptr, #8
26328     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
2632c     08 E4 85 A1 |  if_e	sub	objptr, #8
26330                 | _hg010b_spin2_setfontfamily_ret
26330     2D 00 64 FD | 	ret
26334                 | 
26334                 | ' 
26334                 | ' ''--------- Redefine a character
26334                 | ' 
26334                 | ' pub defchar(ch,ptr) | s,i ' 
26334                 | _hg010b_spin2_defchar
26334                 | ' 
26334                 | ' s:=font_ptr+ch*16
26334     08 E4 05 F1 | 	add	objptr, #8
26338     F2 00 02 FB | 	rdlong	_var01, objptr
2633c     08 E4 85 F1 | 	sub	objptr, #8
26340     04 12 66 F0 | 	shl	arg01, #4
26344     09 01 02 F1 | 	add	_var01, arg01
26348                 | ' repeat i from 0 to 15
26348     00 02 06 F6 | 	mov	_var02, #0
2634c     97 12 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
26350                 | LR__2930
26350                 | '   byte[s+i]:=byte[ptr+i]
26350     0A 13 02 F6 | 	mov	arg01, arg02
26354     01 13 02 F1 | 	add	arg01, _var02
26358     00 05 02 F6 | 	mov	_var03, _var01
2635c     09 13 C2 FA | 	rdbyte	arg01, arg01
26360     01 05 02 F1 | 	add	_var03, _var02
26364     02 13 42 FC | 	wrbyte	arg01, _var03
26368     01 02 06 F1 | 	add	_var02, #1
2636c     10 02 56 F2 | 	cmps	_var02, #16 wc
26370     DC FF 9F CD |  if_b	jmp	#LR__2930
26374                 | LR__2931
26374                 | _hg010b_spin2_defchar_ret
26374     2D 00 64 FD | 	ret
26378                 | 
26378                 | ' 
26378                 | ' 
26378                 | ' '*************************************************************************
26378                 | ' '                                                                        *
26378                 | ' '  Cursor functions                                                      *
26378                 | ' '                                                                        *
26378                 | ' '*************************************************************************
26378                 | ' 
26378                 | ' 
26378                 | ' pub setcursorpos(x,y)
26378                 | _hg010b_spin2_setcursorpos
26378                 | ' 
26378                 | ' ''---------- Set the (x,y) position of cursor
26378                 | ' 
26378                 | ' cursor_x:=x
26378     3C E4 05 F1 | 	add	objptr, #60
2637c     F2 12 52 FC | 	wrword	arg01, objptr
26380                 | ' cursor_y:=y
26380     02 E4 05 F1 | 	add	objptr, #2
26384     F2 14 42 FC | 	wrbyte	arg02, objptr
26388                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
26388     02 E4 85 F1 | 	sub	objptr, #2
2638c     F2 14 E2 FA | 	rdword	arg02, objptr
26390     02 14 66 F0 | 	shl	arg02, #2
26394     02 E4 05 F1 | 	add	objptr, #2
26398     F2 16 C2 FA | 	rdbyte	arg03, objptr
2639c     3E E4 85 F1 | 	sub	objptr, #62
263a0     04 16 66 F0 | 	shl	arg03, #4
263a4     04 16 06 F1 | 	add	arg03, #4
263a8     11 12 06 F6 | 	mov	arg01, #17
263ac     0C F3 BF FD | 	call	#_hg010b_spin2_setspritepos
263b0                 | _hg010b_spin2_setcursorpos_ret
263b0     2D 00 64 FD | 	ret
263b4                 | 
263b4                 | ' 
263b4                 | ' pub setcursorx(x)
263b4                 | _hg010b_spin2_setcursorx
263b4                 | ' cursor_x:=x
263b4     3C E4 05 F1 | 	add	objptr, #60
263b8     F2 12 52 FC | 	wrword	arg01, objptr
263bc                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
263bc     F2 14 E2 FA | 	rdword	arg02, objptr
263c0     02 14 66 F0 | 	shl	arg02, #2
263c4     02 E4 05 F1 | 	add	objptr, #2
263c8     F2 16 C2 FA | 	rdbyte	arg03, objptr
263cc     3E E4 85 F1 | 	sub	objptr, #62
263d0     04 16 66 F0 | 	shl	arg03, #4
263d4     04 16 06 F1 | 	add	arg03, #4
263d8     11 12 06 F6 | 	mov	arg01, #17
263dc     DC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
263e0                 | _hg010b_spin2_setcursorx_ret
263e0     2D 00 64 FD | 	ret
263e4                 | 
263e4                 | ' 
263e4                 | ' pub setcursory(y) 
263e4                 | _hg010b_spin2_setcursory
263e4                 | ' cursor_y:=y
263e4     3E E4 05 F1 | 	add	objptr, #62
263e8     F2 12 42 FC | 	wrbyte	arg01, objptr
263ec                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
263ec     02 E4 85 F1 | 	sub	objptr, #2
263f0     F2 14 E2 FA | 	rdword	arg02, objptr
263f4     02 14 66 F0 | 	shl	arg02, #2
263f8     02 E4 05 F1 | 	add	objptr, #2
263fc     F2 16 C2 FA | 	rdbyte	arg03, objptr
26400     3E E4 85 F1 | 	sub	objptr, #62
26404     04 16 66 F0 | 	shl	arg03, #4
26408     04 16 06 F1 | 	add	arg03, #4
2640c     11 12 06 F6 | 	mov	arg01, #17
26410     A8 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
26414                 | _hg010b_spin2_setcursory_ret
26414     2D 00 64 FD | 	ret
26418                 | 
26418                 | ' 
26418                 | ' '*************************************************************************
26418                 | ' '                                                                        *
26418                 | ' '  VBlank functions                                                      *
26418                 | ' '                                                                        *
26418                 | ' '*************************************************************************
26418                 | ' 
26418                 | ' pub waitvbl(amount) | i
26418                 | _hg010b_spin2_waitvbl
26418     03 4A 05 F6 | 	mov	COUNT_, #3
2641c     A8 00 A0 FD | 	call	#pushregs_
26420     09 27 02 F6 | 	mov	local01, arg01
26424                 | ' 
26424                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
26424                 | ' 
26424                 | ' repeat i from 1 to amount
26424     01 28 06 F6 | 	mov	local02, #1
26428     01 26 56 F2 | 	cmps	local01, #1 wc
2642c     01 2A 86 F6 | 	negc	local03, #1
26430     15 27 02 F1 | 	add	local01, local03
26434                 | LR__2940
26434                 | '   repeat until vblank==0
26434                 | LR__2941
26434     49 E4 05 F1 | 	add	objptr, #73
26438     F2 12 0A FB | 	rdlong	arg01, objptr wz
2643c     49 E4 85 F1 | 	sub	objptr, #73
26440     0C 00 90 AD |  if_e	jmp	#LR__2942
26444                 | '     waitus(100)
26444     64 12 06 F6 | 	mov	arg01, #100
26448     28 20 B0 FD | 	call	#__system___waitus
2644c     E4 FF 9F FD | 	jmp	#LR__2941
26450                 | LR__2942
26450                 | '   repeat until vblank==1
26450                 | LR__2943
26450     49 E4 05 F1 | 	add	objptr, #73
26454     F2 12 02 FB | 	rdlong	arg01, objptr
26458     49 E4 85 F1 | 	sub	objptr, #73
2645c     01 12 0E F2 | 	cmp	arg01, #1 wz
26460     0C 00 90 AD |  if_e	jmp	#LR__2944
26464                 | '     waitus(100)
26464     64 12 06 F6 | 	mov	arg01, #100
26468     08 20 B0 FD | 	call	#__system___waitus
2646c     E0 FF 9F FD | 	jmp	#LR__2943
26470                 | LR__2944
26470     15 29 02 F1 | 	add	local02, local03
26474     13 29 0A F2 | 	cmp	local02, local01 wz
26478     B8 FF 9F 5D |  if_ne	jmp	#LR__2940
2647c     A7 F0 03 F6 | 	mov	ptra, fp
26480     B2 00 A0 FD | 	call	#popregs_
26484                 | _hg010b_spin2_waitvbl_ret
26484     2D 00 64 FD | 	ret
26488                 | 
26488                 | ' 
26488                 | ' ''---------- Set color #c in palette to r,g,b
26488                 | ' 
26488                 | ' pub setcolor(c,r,g,b)  |cc
26488                 | _hg010b_spin2_setcolor
26488                 | ' 
26488                 | ' cc:=r<<24+g<<16+b<<8
26488     18 14 66 F0 | 	shl	arg02, #24
2648c     10 16 66 F0 | 	shl	arg03, #16
26490     0B 15 02 F1 | 	add	arg02, arg03
26494     08 18 66 F0 | 	shl	arg04, #8
26498     0C 15 02 F1 | 	add	arg02, arg04
2649c                 | ' long[palette_ptr+4*c]:=cc
2649c     1C E4 05 F1 | 	add	objptr, #28
264a0     F2 18 02 FB | 	rdlong	arg04, objptr
264a4     1C E4 85 F1 | 	sub	objptr, #28
264a8     02 12 66 F0 | 	shl	arg01, #2
264ac     09 19 02 F1 | 	add	arg04, arg01
264b0     0C 15 62 FC | 	wrlong	arg02, arg04
264b4                 | _hg010b_spin2_setcolor_ret
264b4     2D 00 64 FD | 	ret
264b8                 | 
264b8                 | ' 
264b8                 | ' 
264b8                 | ' pub cls(fc,bc)   :c,i
264b8                 | _hg010b_spin2_cls
264b8     02 4A 05 F6 | 	mov	COUNT_, #2
264bc     A8 00 A0 FD | 	call	#pushregs_
264c0     09 27 02 F6 | 	mov	local01, arg01
264c4     0A 29 02 F6 | 	mov	local02, arg02
264c8                 | ' 
264c8                 | ' c:=bc
264c8                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
264c8     DD E4 05 F1 | 	add	objptr, #221
264cc     F2 12 02 FB | 	rdlong	arg01, objptr
264d0     A5 E4 85 F1 | 	sub	objptr, #165
264d4     F2 16 02 FB | 	rdlong	arg03, objptr
264d8     02 16 66 F0 | 	shl	arg03, #2
264dc     14 15 02 F6 | 	mov	arg02, local02
264e0     00 18 06 F6 | 	mov	arg04, #0
264e4     01 1A 06 F6 | 	mov	arg05, #1
264e8     0B 00 00 FF 
264ec     94 E4 05 F1 | 	add	objptr, ##5780
264f0     B4 10 B0 FD | 	call	#_psram_spin2_fill
264f4                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
264f4     0B 00 00 FF 
264f8     C8 E4 85 F1 | 	sub	objptr, ##5832
264fc     F2 12 02 FB | 	rdlong	arg01, objptr
26500     04 E4 85 F1 | 	sub	objptr, #4
26504     F2 16 02 FB | 	rdlong	arg03, objptr
26508     09 17 82 F1 | 	sub	arg03, arg01
2650c     20 14 06 F6 | 	mov	arg02, #32
26510     00 18 06 F6 | 	mov	arg04, #0
26514     01 1A 06 F6 | 	mov	arg05, #1
26518     0B 00 00 FF 
2651c     CC E4 05 F1 | 	add	objptr, ##5836
26520     84 10 B0 FD | 	call	#_psram_spin2_fill
26524                 | ' setwritecolors(fc,bc)
26524                 | ' 
26524                 | ' write_color:=ff
26524     0B 00 00 FF 
26528     8B E4 85 F1 | 	sub	objptr, ##5771
2652c     F2 26 62 FC | 	wrlong	local01, objptr
26530                 | ' write_background:=bb
26530     04 E4 05 F1 | 	add	objptr, #4
26534     F2 28 62 FC | 	wrlong	local02, objptr
26538                 | ' cursor_x:=0
26538     09 E4 85 F1 | 	sub	objptr, #9
2653c     F2 00 58 FC | 	wrword	#0, objptr
26540                 | ' cursor_y:=0
26540     02 E4 05 F1 | 	add	objptr, #2
26544     F2 00 48 FC | 	wrbyte	#0, objptr
26548                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
26548     02 E4 85 F1 | 	sub	objptr, #2
2654c     F2 14 E2 FA | 	rdword	arg02, objptr
26550     02 14 66 F0 | 	shl	arg02, #2
26554     02 E4 05 F1 | 	add	objptr, #2
26558     F2 16 C2 FA | 	rdbyte	arg03, objptr
2655c     3E E4 85 F1 | 	sub	objptr, #62
26560     04 16 66 F0 | 	shl	arg03, #4
26564     04 16 06 F1 | 	add	arg03, #4
26568     11 12 06 F6 | 	mov	arg01, #17
2656c     4C F1 BF FD | 	call	#_hg010b_spin2_setspritepos
26570                 | ' setcursorcolor(fc)
26570     13 13 02 F6 | 	mov	arg01, local01
26574     50 ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
26578     14 FB 01 F6 | 	mov	result1, local02
2657c     00 FC 05 F6 | 	mov	result2, #0
26580     A7 F0 03 F6 | 	mov	ptra, fp
26584     B2 00 A0 FD | 	call	#popregs_
26588                 | _hg010b_spin2_cls_ret
26588     2D 00 64 FD | 	ret
2658c                 | 
2658c                 | ' 
2658c                 | ' ''---------- Output a char at the cursor position, move the cursor 
2658c                 | ' 
2658c                 | ' pub putchar(achar) | c,x,y,l,newcpl
2658c                 | _hg010b_spin2_putchar
2658c     02 4A 05 F6 | 	mov	COUNT_, #2
26590     A8 00 A0 FD | 	call	#pushregs_
26594     09 27 02 F6 | 	mov	local01, arg01
26598                 | ' 
26598                 | ' if achar==10
26598     0A 26 0E F2 | 	cmp	local01, #10 wz
2659c                 | '   crlf()
2659c     78 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
265a0                 | ' if achar==9
265a0     09 26 0E F2 | 	cmp	local01, #9 wz
265a4     18 00 90 5D |  if_ne	jmp	#LR__2950
265a8                 | '   cursor_x:=(cursor_x& %11110000)+16
265a8     3C E4 05 F1 | 	add	objptr, #60
265ac     F2 16 E2 FA | 	rdword	arg03, objptr
265b0     F0 16 06 F5 | 	and	arg03, #240
265b4     10 16 06 F1 | 	add	arg03, #16
265b8     F2 16 52 FC | 	wrword	arg03, objptr
265bc     3C E4 85 F1 | 	sub	objptr, #60
265c0                 | LR__2950
265c0                 | '   
265c0                 | ' if (achar<>9) && (achar<>10) 
265c0     09 26 0E F2 | 	cmp	local01, #9 wz
265c4     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
265c8     A8 00 90 AD |  if_e	jmp	#LR__2951
265cc                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
265cc     3C E4 05 F1 | 	add	objptr, #60
265d0     F2 12 E2 FA | 	rdword	arg01, objptr
265d4     02 E4 05 F1 | 	add	objptr, #2
265d8     F2 14 C2 FA | 	rdbyte	arg02, objptr
265dc     04 14 66 F0 | 	shl	arg02, #4
265e0     04 14 06 F1 | 	add	arg02, #4
265e4     03 E4 05 F1 | 	add	objptr, #3
265e8     F2 18 02 FB | 	rdlong	arg04, objptr
265ec     04 E4 05 F1 | 	add	objptr, #4
265f0     F2 1A 02 FB | 	rdlong	arg05, objptr
265f4     45 E4 85 F1 | 	sub	objptr, #69
265f8     13 17 02 F6 | 	mov	arg03, local01
265fc     D0 FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
26600     04 E4 05 F1 | 	add	objptr, #4
26604     F2 12 02 FB | 	rdlong	arg01, objptr
26608     1C 00 00 FF 
2660c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
26610     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
26614     3A E4 05 F1 | 	add	objptr, #58
26618     F2 1A C2 FA | 	rdbyte	arg05, objptr
2661c     0D 17 02 FD | 	qmul	arg03, arg05
26620                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
26620     1C 00 00 FF 
26624     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
26628     02 E4 85 F1 | 	sub	objptr, #2
2662c     F2 28 E2 FA | 	rdword	local02, objptr
26630     01 28 46 F0 | 	shr	local02, #1
26634     13 15 02 F6 | 	mov	arg02, local01
26638     01 16 06 F6 | 	mov	arg03, #1
2663c     00 18 06 F6 | 	mov	arg04, #0
26640     01 1A 06 F6 | 	mov	arg05, #1
26644     0B 00 00 FF 
26648     90 E4 05 F1 | 	add	objptr, ##5776
2664c     18 26 62 FD | 	getqx	local01
26650     14 27 02 F1 | 	add	local01, local02
26654     13 13 02 F1 | 	add	arg01, local01
26658     4C 0F B0 FD | 	call	#_psram_spin2_fill
2665c                 | '   cursor_x+=2
2665c     0B 00 00 FF 
26660     90 E4 85 F1 | 	sub	objptr, ##5776
26664     F2 28 E2 FA | 	rdword	local02, objptr
26668     02 28 06 F1 | 	add	local02, #2
2666c     F2 28 52 FC | 	wrword	local02, objptr
26670     3C E4 85 F1 | 	sub	objptr, #60
26674                 | LR__2951
26674                 | ' 
26674                 | ' if cursor_x>=256
26674     3C E4 05 F1 | 	add	objptr, #60
26678     F2 28 E2 FA | 	rdword	local02, objptr
2667c     3C E4 85 F1 | 	sub	objptr, #60
26680     00 29 56 F2 | 	cmps	local02, #256 wc
26684     64 00 90 CD |  if_b	jmp	#LR__2953
26688                 | '   cursor_x:=0
26688     3C E4 05 F1 | 	add	objptr, #60
2668c     F2 00 58 FC | 	wrword	#0, objptr
26690                 | '   cursor_y+=1
26690     02 E4 05 F1 | 	add	objptr, #2
26694     F2 28 C2 FA | 	rdbyte	local02, objptr
26698     01 28 06 F1 | 	add	local02, #1
2669c     F2 28 42 FC | 	wrbyte	local02, objptr
266a0                 | '   if cursor_y>st_lines-1
266a0     C3 E4 05 F1 | 	add	objptr, #195
266a4     F2 28 02 FB | 	rdlong	local02, objptr
266a8     01 28 86 F1 | 	sub	local02, #1
266ac     C3 E4 85 F1 | 	sub	objptr, #195
266b0     F2 16 C2 FA | 	rdbyte	arg03, objptr
266b4     3E E4 85 F1 | 	sub	objptr, #62
266b8     14 17 5A F2 | 	cmps	arg03, local02 wcz
266bc     2C 00 90 ED |  if_be	jmp	#LR__2952
266c0                 | '     scrollup2()
266c0     00 12 06 F6 | 	mov	arg01, #0
266c4     01 00 00 FF 
266c8     58 14 06 F6 | 	mov	arg02, ##600
266cc     10 16 06 F6 | 	mov	arg03, #16
266d0     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
266d4                 | '     cursor_y:=st_lines-1
266d4     01 E5 05 F1 | 	add	objptr, #257
266d8     F2 28 02 FB | 	rdlong	local02, objptr
266dc     01 28 86 F1 | 	sub	local02, #1
266e0     C3 E4 85 F1 | 	sub	objptr, #195
266e4     F2 28 42 FC | 	wrbyte	local02, objptr
266e8     3E E4 85 F1 | 	sub	objptr, #62
266ec                 | LR__2952
266ec                 | LR__2953
266ec                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
266ec     3C E4 05 F1 | 	add	objptr, #60
266f0     F2 14 E2 FA | 	rdword	arg02, objptr
266f4     02 14 66 F0 | 	shl	arg02, #2
266f8     02 E4 05 F1 | 	add	objptr, #2
266fc     F2 16 C2 FA | 	rdbyte	arg03, objptr
26700     3E E4 85 F1 | 	sub	objptr, #62
26704     04 16 66 F0 | 	shl	arg03, #4
26708     04 16 06 F1 | 	add	arg03, #4
2670c     11 12 06 F6 | 	mov	arg01, #17
26710     A8 EF BF FD | 	call	#_hg010b_spin2_setspritepos
26714     A7 F0 03 F6 | 	mov	ptra, fp
26718     B2 00 A0 FD | 	call	#popregs_
2671c                 | _hg010b_spin2_putchar_ret
2671c     2D 00 64 FD | 	ret
26720                 | 
26720                 | '     
26720                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
26720                 | ' 
26720                 | ' pub putchar2(achar) | c,x,y,l,newcpl
26720                 | _hg010b_spin2_putchar2
26720     02 4A 05 F6 | 	mov	COUNT_, #2
26724     A8 00 A0 FD | 	call	#pushregs_
26728     09 27 02 F6 | 	mov	local01, arg01
2672c                 | ' 
2672c                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
2672c     3C E4 05 F1 | 	add	objptr, #60
26730     F2 12 E2 FA | 	rdword	arg01, objptr
26734     02 E4 05 F1 | 	add	objptr, #2
26738     F2 14 C2 FA | 	rdbyte	arg02, objptr
2673c     04 14 66 F0 | 	shl	arg02, #4
26740     04 14 06 F1 | 	add	arg02, #4
26744     03 E4 05 F1 | 	add	objptr, #3
26748     F2 18 02 FB | 	rdlong	arg04, objptr
2674c     04 E4 05 F1 | 	add	objptr, #4
26750     F2 1A 02 FB | 	rdlong	arg05, objptr
26754     45 E4 85 F1 | 	sub	objptr, #69
26758     13 17 02 F6 | 	mov	arg03, local01
2675c     70 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
26760     04 E4 05 F1 | 	add	objptr, #4
26764     F2 12 02 FB | 	rdlong	arg01, objptr
26768     1C 00 00 FF 
2676c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
26770     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
26774     3A E4 05 F1 | 	add	objptr, #58
26778     F2 1A C2 FA | 	rdbyte	arg05, objptr
2677c     0D 17 02 FD | 	qmul	arg03, arg05
26780                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
26780     1C 00 00 FF 
26784     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
26788     02 E4 85 F1 | 	sub	objptr, #2
2678c     F2 28 E2 FA | 	rdword	local02, objptr
26790     01 28 46 F0 | 	shr	local02, #1
26794     13 15 02 F6 | 	mov	arg02, local01
26798     01 16 06 F6 | 	mov	arg03, #1
2679c     00 18 06 F6 | 	mov	arg04, #0
267a0     01 1A 06 F6 | 	mov	arg05, #1
267a4     0B 00 00 FF 
267a8     90 E4 05 F1 | 	add	objptr, ##5776
267ac     18 26 62 FD | 	getqx	local01
267b0     14 27 02 F1 | 	add	local01, local02
267b4     13 13 02 F1 | 	add	arg01, local01
267b8     EC 0D B0 FD | 	call	#_psram_spin2_fill
267bc                 | ' 
267bc                 | ' cursor_x+=2
267bc     0B 00 00 FF 
267c0     90 E4 85 F1 | 	sub	objptr, ##5776
267c4     F2 28 E2 FA | 	rdword	local02, objptr
267c8     02 28 06 F1 | 	add	local02, #2
267cc     F2 28 52 FC | 	wrword	local02, objptr
267d0                 | ' if cursor_x>=256
267d0     F2 28 E2 FA | 	rdword	local02, objptr
267d4     3C E4 85 F1 | 	sub	objptr, #60
267d8     00 29 56 F2 | 	cmps	local02, #256 wc
267dc     64 00 90 CD |  if_b	jmp	#LR__2961
267e0                 | '   cursor_x:=0
267e0     3C E4 05 F1 | 	add	objptr, #60
267e4     F2 00 58 FC | 	wrword	#0, objptr
267e8                 | '   cursor_y+=1
267e8     02 E4 05 F1 | 	add	objptr, #2
267ec     F2 28 C2 FA | 	rdbyte	local02, objptr
267f0     01 28 06 F1 | 	add	local02, #1
267f4     F2 28 42 FC | 	wrbyte	local02, objptr
267f8                 | '   if cursor_y>st_lines-1
267f8     C3 E4 05 F1 | 	add	objptr, #195
267fc     F2 28 02 FB | 	rdlong	local02, objptr
26800     01 28 86 F1 | 	sub	local02, #1
26804     C3 E4 85 F1 | 	sub	objptr, #195
26808     F2 16 C2 FA | 	rdbyte	arg03, objptr
2680c     3E E4 85 F1 | 	sub	objptr, #62
26810     14 17 5A F2 | 	cmps	arg03, local02 wcz
26814     2C 00 90 ED |  if_be	jmp	#LR__2960
26818                 | '     scrollup2()
26818     00 12 06 F6 | 	mov	arg01, #0
2681c     01 00 00 FF 
26820     58 14 06 F6 | 	mov	arg02, ##600
26824     10 16 06 F6 | 	mov	arg03, #16
26828     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
2682c                 | '     cursor_y:=st_lines-1
2682c     01 E5 05 F1 | 	add	objptr, #257
26830     F2 28 02 FB | 	rdlong	local02, objptr
26834     01 28 86 F1 | 	sub	local02, #1
26838     C3 E4 85 F1 | 	sub	objptr, #195
2683c     F2 28 42 FC | 	wrbyte	local02, objptr
26840     3E E4 85 F1 | 	sub	objptr, #62
26844                 | LR__2960
26844                 | LR__2961
26844                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
26844     3C E4 05 F1 | 	add	objptr, #60
26848     F2 14 E2 FA | 	rdword	arg02, objptr
2684c     02 14 66 F0 | 	shl	arg02, #2
26850     02 E4 05 F1 | 	add	objptr, #2
26854     F2 16 C2 FA | 	rdbyte	arg03, objptr
26858     3E E4 85 F1 | 	sub	objptr, #62
2685c     04 16 66 F0 | 	shl	arg03, #4
26860     04 16 06 F1 | 	add	arg03, #4
26864     11 12 06 F6 | 	mov	arg01, #17
26868     50 EE BF FD | 	call	#_hg010b_spin2_setspritepos
2686c     A7 F0 03 F6 | 	mov	ptra, fp
26870     B2 00 A0 FD | 	call	#popregs_
26874                 | _hg010b_spin2_putchar2_ret
26874     2D 00 64 FD | 	ret
26878                 | 
26878                 | ' ''--------- Output a string at the cursor position, move the cursor  
26878                 | ' 
26878                 | ' pub write(text) | iii,c,ncx,ncy
26878                 | _hg010b_spin2_write
26878     04 4A 05 F6 | 	mov	COUNT_, #4
2687c     A8 00 A0 FD | 	call	#pushregs_
26880     09 27 02 F6 | 	mov	local01, arg01
26884                 | ' 
26884                 | ' repeat iii from 0 to strsize(text)-1
26884     00 28 06 F6 | 	mov	local02, #0
26888     13 13 02 F6 | 	mov	arg01, local01
2688c     09 2B 02 F6 | 	mov	local03, arg01
26890     97 06 48 FB | 	callpa	#(@LR__2971-@LR__2970)>>2,fcache_load_ptr_
26894                 | LR__2970
26894     15 FB C9 FA | 	rdbyte	result1, local03 wz
26898     01 2A 06 51 |  if_ne	add	local03, #1
2689c     F4 FF 9F 5D |  if_ne	jmp	#LR__2970
268a0                 | LR__2971
268a0     09 2B 82 F1 | 	sub	local03, arg01
268a4     01 2A 86 F1 | 	sub	local03, #1
268a8     00 2A 56 F2 | 	cmps	local03, #0 wc
268ac     01 2C 86 F6 | 	negc	local04, #1
268b0     16 2B 02 F1 | 	add	local03, local04
268b4                 | LR__2972
268b4                 | '   putchar2(byte[text+iii])
268b4     13 13 02 F6 | 	mov	arg01, local01
268b8     14 13 02 F1 | 	add	arg01, local02
268bc     09 13 C2 FA | 	rdbyte	arg01, arg01
268c0     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
268c4     16 29 02 F1 | 	add	local02, local04
268c8     15 29 0A F2 | 	cmp	local02, local03 wz
268cc     E4 FF 9F 5D |  if_ne	jmp	#LR__2972
268d0     A7 F0 03 F6 | 	mov	ptra, fp
268d4     B2 00 A0 FD | 	call	#popregs_
268d8                 | _hg010b_spin2_write_ret
268d8     2D 00 64 FD | 	ret
268dc                 | 
268dc                 | '    
268dc                 | ' ' a version for text scrolling in Basic shifted 4 lines down
268dc                 | ' 
268dc                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
268dc                 | _hg010b_spin2_scrollup2
268dc     03 4A 05 F6 | 	mov	COUNT_, #3
268e0     A8 00 A0 FD | 	call	#pushregs_
268e4                 | ' 	
268e4                 | ' repeat i from 4 to 579 
268e4     04 26 06 F6 | 	mov	local01, #4
268e8                 | LR__2980
268e8     DD E4 05 F1 | 	add	objptr, #221
268ec     F2 14 02 FB | 	rdlong	arg02, objptr
268f0     13 1B 02 F6 | 	mov	arg05, local01
268f4     10 1A 06 F1 | 	add	arg05, #16
268f8     02 1A 66 F0 | 	shl	arg05, #2
268fc     14 E4 05 F1 | 	add	objptr, #20
26900     F2 16 02 FB | 	rdlong	arg03, objptr
26904     0B 1B 02 FD | 	qmul	arg05, arg03
26908                 | '   ram.read1($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
26908     02 16 66 F0 | 	shl	arg03, #2
2690c     F4 03 00 FF 
26910     00 12 06 F6 | 	mov	arg01, ##518144
26914     0A 00 00 FF 
26918     DB E5 05 F1 | 	add	objptr, ##5595
2691c     18 1A 62 FD | 	getqx	arg05
26920     0D 15 02 F1 | 	add	arg02, arg05
26924     48 0B B0 FD | 	call	#_psram_spin2_read1
26928     0A 00 00 FF 
2692c     EF E5 85 F1 | 	sub	objptr, ##5615
26930     F2 14 02 FB | 	rdlong	arg02, objptr
26934     13 1B 02 F6 | 	mov	arg05, local01
26938     02 1A 66 F0 | 	shl	arg05, #2
2693c     14 E4 05 F1 | 	add	objptr, #20
26940     F2 16 02 FB | 	rdlong	arg03, objptr
26944     0B 1B 02 FD | 	qmul	arg05, arg03
26948                 | '   ram.write($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
26948     02 16 66 F0 | 	shl	arg03, #2
2694c     F4 03 00 FF 
26950     00 12 06 F6 | 	mov	arg01, ##518144
26954     0A 00 00 FF 
26958     DB E5 05 F1 | 	add	objptr, ##5595
2695c     18 1A 62 FD | 	getqx	arg05
26960     0D 15 02 F1 | 	add	arg02, arg05
26964     A4 0B B0 FD | 	call	#_psram_spin2_write
26968     0B 00 00 FF 
2696c     CC E4 85 F1 | 	sub	objptr, ##5836
26970     01 26 06 F1 | 	add	local01, #1
26974     01 00 00 FF 
26978     44 26 16 F2 | 	cmp	local01, ##580 wc
2697c     68 FF 9F CD |  if_b	jmp	#LR__2980
26980                 | ' 
26980                 | ' repeat i from 580 to 599
26980     01 00 00 FF 
26984     44 26 06 F6 | 	mov	local01, ##580
26988                 | LR__2981
26988                 | '    fastline(0,1023,i,write_background)   
26988     45 E4 05 F1 | 	add	objptr, #69
2698c     F2 18 02 FB | 	rdlong	arg04, objptr
26990     45 E4 85 F1 | 	sub	objptr, #69
26994     00 12 06 F6 | 	mov	arg01, #0
26998     09 14 CE F9 | 	bmask	arg02, #9
2699c     13 17 02 F6 | 	mov	arg03, local01
269a0     64 EF BF FD | 	call	#_hg010b_spin2_fastline
269a4     01 26 06 F1 | 	add	local01, #1
269a8     01 00 00 FF 
269ac     58 26 16 F2 | 	cmp	local01, ##600 wc
269b0     D4 FF 9F CD |  if_b	jmp	#LR__2981
269b4                 | ' repeat i from 0 to 3
269b4     00 26 06 F6 | 	mov	local01, #0
269b8                 | LR__2982
269b8                 | '    fastline(0,1023,i,write_background)      
269b8     45 E4 05 F1 | 	add	objptr, #69
269bc     F2 18 02 FB | 	rdlong	arg04, objptr
269c0     45 E4 85 F1 | 	sub	objptr, #69
269c4     00 12 06 F6 | 	mov	arg01, #0
269c8     09 14 CE F9 | 	bmask	arg02, #9
269cc     13 17 02 F6 | 	mov	arg03, local01
269d0     34 EF BF FD | 	call	#_hg010b_spin2_fastline
269d4     01 26 06 F1 | 	add	local01, #1
269d8     04 26 56 F2 | 	cmps	local01, #4 wc
269dc     D8 FF 9F CD |  if_b	jmp	#LR__2982
269e0                 | ' 
269e0                 | ' repeat i from 0 to 35
269e0     00 26 06 F6 | 	mov	local01, #0
269e4                 | LR__2983
269e4     13 1B 02 F6 | 	mov	arg05, local01
269e8     01 1A 06 F1 | 	add	arg05, #1
269ec     1C 00 00 FF 
269f0     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
269f4     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
269f8     0B 1B 02 FD | 	qmul	arg05, arg03
269fc                 | '   ram.read1($7E800, textbuf_ptr+(i+1)*timings[7], timings[7])
269fc     04 E4 05 F1 | 	add	objptr, #4
26a00     F2 14 02 FB | 	rdlong	arg02, objptr
26a04     1C 00 00 FF 
26a08     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
26a0c     F4 03 00 FF 
26a10     00 12 06 F6 | 	mov	arg01, ##518144
26a14     0B 00 00 FF 
26a18     C8 E4 05 F1 | 	add	objptr, ##5832
26a1c     18 1A 62 FD | 	getqx	arg05
26a20     0D 15 02 F1 | 	add	arg02, arg05
26a24     48 0A B0 FD | 	call	#_psram_spin2_read1
26a28     1C 00 00 FF 
26a2c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
26a30     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
26a34     0B 27 02 FD | 	qmul	local01, arg03
26a38                 | '   ram.write($7E800, textbuf_ptr+i*timings[7], timings[7])
26a38     0B 00 00 FF 
26a3c     C8 E4 85 F1 | 	sub	objptr, ##5832
26a40     F2 14 02 FB | 	rdlong	arg02, objptr
26a44     1C 00 00 FF 
26a48     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
26a4c     F4 03 00 FF 
26a50     00 12 06 F6 | 	mov	arg01, ##518144
26a54     0B 00 00 FF 
26a58     C8 E4 05 F1 | 	add	objptr, ##5832
26a5c     18 1A 62 FD | 	getqx	arg05
26a60     0D 15 02 F1 | 	add	arg02, arg05
26a64     A4 0A B0 FD | 	call	#_psram_spin2_write
26a68     0B 00 00 FF 
26a6c     CC E4 85 F1 | 	sub	objptr, ##5836
26a70     01 26 06 F1 | 	add	local01, #1
26a74     24 26 56 F2 | 	cmps	local01, #36 wc
26a78     68 FF 9F CD |  if_b	jmp	#LR__2983
26a7c                 | ' repeat i from 0 to timings[7]-1
26a7c     00 26 06 F6 | 	mov	local01, #0
26a80     1C 00 00 FF 
26a84     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
26a88     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
26a8c     1C 00 00 FF 
26a90     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
26a94     01 28 86 F1 | 	sub	local02, #1
26a98     00 28 56 F2 | 	cmps	local02, #0 wc
26a9c     01 2A 86 F6 | 	negc	local03, #1
26aa0     15 29 02 F1 | 	add	local02, local03
26aa4                 | LR__2984
26aa4                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
26aa4     04 E4 05 F1 | 	add	objptr, #4
26aa8     F2 12 02 FB | 	rdlong	arg01, objptr
26aac     1C 00 00 FF 
26ab0     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
26ab4     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
26ab8     1C 00 00 FF 
26abc     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
26ac0     0D 19 02 F6 | 	mov	arg04, arg05
26ac4     03 18 66 F0 | 	shl	arg04, #3
26ac8     0D 19 02 F1 | 	add	arg04, arg05
26acc     02 18 66 F0 | 	shl	arg04, #2
26ad0     13 19 02 F1 | 	add	arg04, local01
26ad4     0C 13 02 F1 | 	add	arg01, arg04
26ad8     20 14 06 F6 | 	mov	arg02, #32
26adc     01 16 06 F6 | 	mov	arg03, #1
26ae0     00 18 06 F6 | 	mov	arg04, #0
26ae4     01 1A 06 F6 | 	mov	arg05, #1
26ae8     0B 00 00 FF 
26aec     C8 E4 05 F1 | 	add	objptr, ##5832
26af0     B4 0A B0 FD | 	call	#_psram_spin2_fill
26af4     0B 00 00 FF 
26af8     CC E4 85 F1 | 	sub	objptr, ##5836
26afc     15 27 02 F1 | 	add	local01, local03
26b00     14 27 0A F2 | 	cmp	local01, local02 wz
26b04     9C FF 9F 5D |  if_ne	jmp	#LR__2984
26b08     A7 F0 03 F6 | 	mov	ptra, fp
26b0c     B2 00 A0 FD | 	call	#popregs_
26b10                 | _hg010b_spin2_scrollup2_ret
26b10     2D 00 64 FD | 	ret
26b14                 | 
26b14                 | '  
26b14                 | ' ''----------- Scroll the screen one line down 
26b14                 | ' 
26b14                 | ' pub scrolldown(start=0) | i
26b14                 | _hg010b_spin2_scrolldown
26b14     05 4A 05 F6 | 	mov	COUNT_, #5
26b18     A8 00 A0 FD | 	call	#pushregs_
26b1c     09 27 02 F6 | 	mov	local01, arg01
26b20                 | ' 
26b20                 | ' repeat i from 579 to (start*16)+4
26b20     01 00 00 FF 
26b24     43 28 06 F6 | 	mov	local02, ##579
26b28     13 2B 02 F6 | 	mov	local03, local01
26b2c     04 2A 66 F0 | 	shl	local03, #4
26b30     04 2A 06 F1 | 	add	local03, #4
26b34     01 00 00 FF 
26b38     43 2A 56 F2 | 	cmps	local03, ##579 wc
26b3c     01 2C 86 F6 | 	negc	local04, #1
26b40     16 2F 02 F6 | 	mov	local05, local04
26b44     16 2B 02 F1 | 	add	local03, local04
26b48                 | LR__2990
26b48     DD E4 05 F1 | 	add	objptr, #221
26b4c     F2 14 02 FB | 	rdlong	arg02, objptr
26b50     14 2D 02 F6 | 	mov	local04, local02
26b54     02 2C 66 F0 | 	shl	local04, #2
26b58     14 E4 05 F1 | 	add	objptr, #20
26b5c     F2 16 02 FB | 	rdlong	arg03, objptr
26b60     0B 2D 02 FD | 	qmul	local04, arg03
26b64                 | '   ram.read1($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
26b64     02 16 66 F0 | 	shl	arg03, #2
26b68     F4 03 00 FF 
26b6c     00 12 06 F6 | 	mov	arg01, ##518144
26b70     0A 00 00 FF 
26b74     DB E5 05 F1 | 	add	objptr, ##5595
26b78     18 2C 62 FD | 	getqx	local04
26b7c     16 15 02 F1 | 	add	arg02, local04
26b80     EC 08 B0 FD | 	call	#_psram_spin2_read1
26b84     0A 00 00 FF 
26b88     EF E5 85 F1 | 	sub	objptr, ##5615
26b8c     F2 14 02 FB | 	rdlong	arg02, objptr
26b90     14 2D 02 F6 | 	mov	local04, local02
26b94     10 2C 06 F1 | 	add	local04, #16
26b98     02 2C 66 F0 | 	shl	local04, #2
26b9c     14 E4 05 F1 | 	add	objptr, #20
26ba0     F2 16 02 FB | 	rdlong	arg03, objptr
26ba4     0B 2D 02 FD | 	qmul	local04, arg03
26ba8                 | '   ram.write($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
26ba8     02 16 66 F0 | 	shl	arg03, #2
26bac     F4 03 00 FF 
26bb0     00 12 06 F6 | 	mov	arg01, ##518144
26bb4     0A 00 00 FF 
26bb8     DB E5 05 F1 | 	add	objptr, ##5595
26bbc     18 2C 62 FD | 	getqx	local04
26bc0     16 15 02 F1 | 	add	arg02, local04
26bc4     44 09 B0 FD | 	call	#_psram_spin2_write
26bc8     0B 00 00 FF 
26bcc     CC E4 85 F1 | 	sub	objptr, ##5836
26bd0     17 29 02 F1 | 	add	local02, local05
26bd4     15 29 0A F2 | 	cmp	local02, local03 wz
26bd8     6C FF 9F 5D |  if_ne	jmp	#LR__2990
26bdc                 | ' 
26bdc                 | ' repeat i from (start*16)+4 to (start*16)+19
26bdc     13 29 02 F6 | 	mov	local02, local01
26be0     04 28 66 F0 | 	shl	local02, #4
26be4     04 28 06 F1 | 	add	local02, #4
26be8     13 2F 02 F6 | 	mov	local05, local01
26bec     04 2E 66 F0 | 	shl	local05, #4
26bf0     13 2E 06 F1 | 	add	local05, #19
26bf4     13 2D 02 F6 | 	mov	local04, local01
26bf8     04 2C 66 F0 | 	shl	local04, #4
26bfc     04 2C 06 F1 | 	add	local04, #4
26c00     16 2F 52 F2 | 	cmps	local05, local04 wc
26c04     01 2C 86 F6 | 	negc	local04, #1
26c08     16 2B 02 F6 | 	mov	local03, local04
26c0c     16 2F 02 F1 | 	add	local05, local04
26c10                 | LR__2991
26c10                 | '    fastline(0,1023,i,write_background)    
26c10     45 E4 05 F1 | 	add	objptr, #69
26c14     F2 18 02 FB | 	rdlong	arg04, objptr
26c18     45 E4 85 F1 | 	sub	objptr, #69
26c1c     00 12 06 F6 | 	mov	arg01, #0
26c20     09 14 CE F9 | 	bmask	arg02, #9
26c24     14 17 02 F6 | 	mov	arg03, local02
26c28     DC EC BF FD | 	call	#_hg010b_spin2_fastline
26c2c     15 29 02 F1 | 	add	local02, local03
26c30     17 29 0A F2 | 	cmp	local02, local05 wz
26c34     D8 FF 9F 5D |  if_ne	jmp	#LR__2991
26c38                 | '    
26c38                 | ' repeat i from 35 to start
26c38     23 28 06 F6 | 	mov	local02, #35
26c3c     23 26 56 F2 | 	cmps	local01, #35 wc
26c40     01 2C 86 F6 | 	negc	local04, #1
26c44     13 2F 02 F6 | 	mov	local05, local01
26c48     16 2F 02 F1 | 	add	local05, local04
26c4c                 | LR__2992
26c4c                 | '   ram.read1($7E800, textbuf_ptr+(i*128), 128)
26c4c     04 E4 05 F1 | 	add	objptr, #4
26c50     F2 14 02 FB | 	rdlong	arg02, objptr
26c54     14 2B 02 F6 | 	mov	local03, local02
26c58     07 2A 66 F0 | 	shl	local03, #7
26c5c     15 15 02 F1 | 	add	arg02, local03
26c60     F4 03 00 FF 
26c64     00 12 06 F6 | 	mov	arg01, ##518144
26c68     80 16 06 F6 | 	mov	arg03, #128
26c6c     0B 00 00 FF 
26c70     C8 E4 05 F1 | 	add	objptr, ##5832
26c74     F8 07 B0 FD | 	call	#_psram_spin2_read1
26c78                 | '   ram.write($7E800, textbuf_ptr+(i+1)*128,128)
26c78     0B 00 00 FF 
26c7c     C8 E4 85 F1 | 	sub	objptr, ##5832
26c80     F2 14 02 FB | 	rdlong	arg02, objptr
26c84     14 2B 02 F6 | 	mov	local03, local02
26c88     01 2A 06 F1 | 	add	local03, #1
26c8c     07 2A 66 F0 | 	shl	local03, #7
26c90     15 15 02 F1 | 	add	arg02, local03
26c94     F4 03 00 FF 
26c98     00 12 06 F6 | 	mov	arg01, ##518144
26c9c     80 16 06 F6 | 	mov	arg03, #128
26ca0     0B 00 00 FF 
26ca4     C8 E4 05 F1 | 	add	objptr, ##5832
26ca8     60 08 B0 FD | 	call	#_psram_spin2_write
26cac     0B 00 00 FF 
26cb0     CC E4 85 F1 | 	sub	objptr, ##5836
26cb4     16 29 02 F1 | 	add	local02, local04
26cb8     17 29 0A F2 | 	cmp	local02, local05 wz
26cbc     8C FF 9F 5D |  if_ne	jmp	#LR__2992
26cc0                 | ' repeat i from 0 to 127
26cc0     00 28 06 F6 | 	mov	local02, #0
26cc4                 | LR__2993
26cc4                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
26cc4     04 E4 05 F1 | 	add	objptr, #4
26cc8     F2 12 02 FB | 	rdlong	arg01, objptr
26ccc     13 2F 02 F6 | 	mov	local05, local01
26cd0     07 2E 66 F0 | 	shl	local05, #7
26cd4     17 13 02 F1 | 	add	arg01, local05
26cd8     14 13 02 F1 | 	add	arg01, local02
26cdc     20 14 06 F6 | 	mov	arg02, #32
26ce0     01 16 06 F6 | 	mov	arg03, #1
26ce4     00 18 06 F6 | 	mov	arg04, #0
26ce8     01 1A 06 F6 | 	mov	arg05, #1
26cec     0B 00 00 FF 
26cf0     C8 E4 05 F1 | 	add	objptr, ##5832
26cf4     B0 08 B0 FD | 	call	#_psram_spin2_fill
26cf8     0B 00 00 FF 
26cfc     CC E4 85 F1 | 	sub	objptr, ##5836
26d00     01 28 06 F1 | 	add	local02, #1
26d04     80 28 56 F2 | 	cmps	local02, #128 wc
26d08     B8 FF 9F CD |  if_b	jmp	#LR__2993
26d0c     A7 F0 03 F6 | 	mov	ptra, fp
26d10     B2 00 A0 FD | 	call	#popregs_
26d14                 | _hg010b_spin2_scrolldown_ret
26d14     2D 00 64 FD | 	ret
26d18                 | 
26d18                 | ' 
26d18                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
26d18                 | ' 
26d18                 | ' pub crlf()
26d18                 | _hg010b_spin2_crlf
26d18                 | ' 
26d18                 | ' cursor_x:=leading_spaces*2
26d18     01 00 00 FF 
26d1c     B6 E4 05 F1 | 	add	objptr, ##694
26d20     F2 16 02 FB | 	rdlong	arg03, objptr
26d24     01 16 66 F0 | 	shl	arg03, #1
26d28     01 00 00 FF 
26d2c     7A E4 85 F1 | 	sub	objptr, ##634
26d30     F2 16 52 FC | 	wrword	arg03, objptr
26d34                 | ' cursor_y+=1
26d34     02 E4 05 F1 | 	add	objptr, #2
26d38     F2 16 C2 FA | 	rdbyte	arg03, objptr
26d3c     01 16 06 F1 | 	add	arg03, #1
26d40     F2 16 42 FC | 	wrbyte	arg03, objptr
26d44                 | ' if cursor_y>st_lines-1
26d44     C3 E4 05 F1 | 	add	objptr, #195
26d48     F2 16 02 FB | 	rdlong	arg03, objptr
26d4c     01 16 86 F1 | 	sub	arg03, #1
26d50     C3 E4 85 F1 | 	sub	objptr, #195
26d54     F2 14 C2 FA | 	rdbyte	arg02, objptr
26d58     3E E4 85 F1 | 	sub	objptr, #62
26d5c     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
26d60     2C 00 90 ED |  if_be	jmp	#LR__3000
26d64                 | '   scrollup2()
26d64     00 12 06 F6 | 	mov	arg01, #0
26d68     01 00 00 FF 
26d6c     58 14 06 F6 | 	mov	arg02, ##600
26d70     10 16 06 F6 | 	mov	arg03, #16
26d74     64 FB BF FD | 	call	#_hg010b_spin2_scrollup2
26d78                 | '   cursor_y:=st_lines-1
26d78     01 E5 05 F1 | 	add	objptr, #257
26d7c     F2 16 02 FB | 	rdlong	arg03, objptr
26d80     01 16 86 F1 | 	sub	arg03, #1
26d84     C3 E4 85 F1 | 	sub	objptr, #195
26d88     F2 16 42 FC | 	wrbyte	arg03, objptr
26d8c     3E E4 85 F1 | 	sub	objptr, #62
26d90                 | LR__3000
26d90                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
26d90     3C E4 05 F1 | 	add	objptr, #60
26d94     F2 14 E2 FA | 	rdword	arg02, objptr
26d98     02 14 66 F0 | 	shl	arg02, #2
26d9c     02 E4 05 F1 | 	add	objptr, #2
26da0     F2 16 C2 FA | 	rdbyte	arg03, objptr
26da4     3E E4 85 F1 | 	sub	objptr, #62
26da8     04 16 66 F0 | 	shl	arg03, #4
26dac     04 16 06 F1 | 	add	arg03, #4
26db0     11 12 06 F6 | 	mov	arg01, #17
26db4     04 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
26db8                 | _hg010b_spin2_crlf_ret
26db8     2D 00 64 FD | 	ret
26dbc                 | 
26dbc                 | ' 
26dbc                 | ' 
26dbc                 | ' '*************************************************************************
26dbc                 | ' '                                                                        *
26dbc                 | ' '  Conversions                                                           *
26dbc                 | ' '                                                                        *
26dbc                 | ' '*************************************************************************
26dbc                 | ' 
26dbc                 | ' ''---------- Convert a integer to dec string, return a pointer
26dbc                 | ' 
26dbc                 | ' pub inttostr(i):result |q,pos,k,j
26dbc                 | _hg010b_spin2_inttostr
26dbc     03 4A 05 F6 | 	mov	COUNT_, #3
26dc0     A8 00 A0 FD | 	call	#pushregs_
26dc4     09 27 0A F6 | 	mov	local01, arg01 wz
26dc8                 | ' 
26dc8                 | ' j:=i
26dc8                 | ' pos:=10
26dc8     0A 28 06 F6 | 	mov	local02, #10
26dcc                 | ' k:=0
26dcc     00 2A 06 F6 | 	mov	local03, #0
26dd0                 | ' 
26dd0                 | ' if (j==0)
26dd0     18 00 90 5D |  if_ne	jmp	#LR__3010
26dd4                 | '   n_string[0]:=48
26dd4     4D E4 05 F1 | 	add	objptr, #77
26dd8     F2 60 48 FC | 	wrbyte	#48, objptr
26ddc                 | '   n_string[1]:=0
26ddc     01 E4 05 F1 | 	add	objptr, #1
26de0     F2 00 48 FC | 	wrbyte	#0, objptr
26de4     4E E4 85 F1 | 	sub	objptr, #78
26de8     C4 00 90 FD | 	jmp	#LR__3017
26dec                 | LR__3010
26dec                 | ' 
26dec                 | ' else
26dec                 | '   if (j<0)
26dec     13 27 52 F6 | 	abs	local01, local01 wc
26df0                 | '     j:=0-j
26df0                 | '     k:=45
26df0     2D 2A 06 C6 |  if_b	mov	local03, #45
26df4                 | ' 
26df4                 | '   n_string[11]:=0
26df4     58 E4 05 F1 | 	add	objptr, #88
26df8     F2 00 48 FC | 	wrbyte	#0, objptr
26dfc     58 E4 85 F1 | 	sub	objptr, #88
26e00     97 24 48 FB | 	callpa	#(@LR__3012-@LR__3011)>>2,fcache_load_ptr_
26e04                 | '   repeat while (pos>-1)
26e04                 | LR__3011
26e04     00 28 56 F2 | 	cmps	local02, #0 wc
26e08     40 00 90 CD |  if_b	jmp	#LR__3013
26e0c     13 FB 51 F6 | 	abs	result1, local01 wc
26e10     0A FA 15 FD | 	qdiv	result1, #10
26e14                 | '     q:=j//10
26e14     19 FA 61 FD | 	getqy	result1
26e18     FD FA 81 F6 | 	negc	result1, result1
26e1c     13 27 52 F6 | 	abs	local01, local01 wc
26e20     0A 26 16 FD | 	qdiv	local01, #10
26e24                 | '     q:=48+q
26e24     30 FA 05 F1 | 	add	result1, #48
26e28                 | '     n_string[pos]:=q
26e28     14 27 02 F6 | 	mov	local01, local02
26e2c     4D E4 05 F1 | 	add	objptr, #77
26e30     F2 26 02 F1 | 	add	local01, objptr
26e34     13 FB 41 FC | 	wrbyte	result1, local01
26e38                 | '     j:=j/10
26e38     4D E4 85 F1 | 	sub	objptr, #77
26e3c                 | '     pos-=1
26e3c     01 28 86 F1 | 	sub	local02, #1
26e40     18 26 62 FD | 	getqx	local01
26e44     13 27 82 F6 | 	negc	local01, local01
26e48     B8 FF 9F FD | 	jmp	#LR__3011
26e4c                 | LR__3012
26e4c                 | LR__3013
26e4c                 | '   repeat while n_string[0]==48
26e4c                 | LR__3014
26e4c     4D E4 05 F1 | 	add	objptr, #77
26e50     F2 16 C2 FA | 	rdbyte	arg03, objptr
26e54     4D E4 85 F1 | 	sub	objptr, #77
26e58     30 16 0E F2 | 	cmp	arg03, #48 wz
26e5c     20 00 90 5D |  if_ne	jmp	#LR__3015
26e60                 | '     bytemove(@n_string,@n_string+1,12)
26e60     4D E4 05 F1 | 	add	objptr, #77
26e64     F2 12 02 F6 | 	mov	arg01, objptr
26e68     F2 14 02 F6 | 	mov	arg02, objptr
26e6c     4D E4 85 F1 | 	sub	objptr, #77
26e70     01 14 06 F1 | 	add	arg02, #1
26e74     0C 16 06 F6 | 	mov	arg03, #12
26e78     48 11 B0 FD | 	call	#__system____builtin_memmove
26e7c     CC FF 9F FD | 	jmp	#LR__3014
26e80                 | LR__3015
26e80                 | ' 
26e80                 | '   if k==45
26e80     2D 2A 0E F2 | 	cmp	local03, #45 wz
26e84     28 00 90 5D |  if_ne	jmp	#LR__3016
26e88                 | '      bytemove(@n_string+1,@n_string,12)
26e88     4D E4 05 F1 | 	add	objptr, #77
26e8c     F2 12 02 F6 | 	mov	arg01, objptr
26e90     01 12 06 F1 | 	add	arg01, #1
26e94     F2 14 02 F6 | 	mov	arg02, objptr
26e98     4D E4 85 F1 | 	sub	objptr, #77
26e9c     0C 16 06 F6 | 	mov	arg03, #12
26ea0     20 11 B0 FD | 	call	#__system____builtin_memmove
26ea4                 | '      n_string[0]:=k
26ea4     4D E4 05 F1 | 	add	objptr, #77
26ea8     F2 2A 42 FC | 	wrbyte	local03, objptr
26eac     4D E4 85 F1 | 	sub	objptr, #77
26eb0                 | LR__3016
26eb0                 | LR__3017
26eb0                 | ' 
26eb0                 | ' q:=@n_string
26eb0     4D E4 05 F1 | 	add	objptr, #77
26eb4     F2 FA 01 F6 | 	mov	result1, objptr
26eb8     4D E4 85 F1 | 	sub	objptr, #77
26ebc                 | ' return q
26ebc     A7 F0 03 F6 | 	mov	ptra, fp
26ec0     B2 00 A0 FD | 	call	#popregs_
26ec4                 | _hg010b_spin2_inttostr_ret
26ec4     2D 00 64 FD | 	ret
26ec8                 | 
26ec8                 | ' 
26ec8                 | ' '**********************************************************************************
26ec8                 | ' '
26ec8                 | ' '        Blitting
26ec8                 | ' '
26ec8                 | ' '**********************************************************************************
26ec8                 | ' 
26ec8                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
26ec8                 | _hg010b_spin2_blit
26ec8     18 4A 05 F6 | 	mov	COUNT_, #24
26ecc     A8 00 A0 FD | 	call	#pushregs_
26ed0     09 27 02 F6 | 	mov	local01, arg01
26ed4     0A 29 02 F6 | 	mov	local02, arg02
26ed8     0B 2B 02 F6 | 	mov	local03, arg03
26edc     0C 2D 02 F6 | 	mov	local04, arg04
26ee0     0D 2F 02 F6 | 	mov	local05, arg05
26ee4     0E 31 02 F6 | 	mov	local06, arg06
26ee8     0F 33 02 F6 | 	mov	local07, arg07
26eec     10 35 02 F6 | 	mov	local08, arg08
26ef0     11 37 02 F6 | 	mov	local09, arg09
26ef4     12 39 02 F6 | 	mov	local10, arg10
26ef8                 | ' 
26ef8                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
26ef8     00 04 00 FF 
26efc     00 26 56 F2 | 	cmps	local01, ##524288 wc
26f00     00 04 00 3F 
26f04     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
26f08     98 01 90 CD |  if_b	jmp	#LR__3024
26f0c     16 29 5A F2 | 	cmps	local02, local04 wcz
26f10     14 3B 02 16 |  if_a	mov	local11, local02
26f14     16 29 02 16 |  if_a	mov	local02, local04
26f18     1D 2D 02 16 |  if_a	mov	local04, local11
26f1c     17 2B 5A F2 | 	cmps	local03, local05 wcz
26f20     15 3B 02 16 |  if_a	mov	local11, local03
26f24     17 2B 02 16 |  if_a	mov	local03, local05
26f28     18 2B 02 FD | 	qmul	local03, local06
26f2c                 | '   if x1a>x2a
26f2c                 | '     x1a,x2a:=x2a,x1a
26f2c                 | '   if y1a>y2a
26f2c                 | '     y1a,y2a:=y2a,y1a  
26f2c     1D 2F 02 16 |  if_a	mov	local05, local11
26f30                 | '   if x2a-x1a>1023 
26f30     16 3B 02 F6 | 	mov	local11, local04
26f34     14 3B 82 F1 | 	sub	local11, local02
26f38     02 00 00 FF 
26f3c     00 3A 56 F2 | 	cmps	local11, ##1024 wc
26f40                 | '     x2a:=x1a+1023 ' limit the line to 1024
26f40     14 2D 02 36 |  if_ae	mov	local04, local02
26f44     01 00 00 3F 
26f48     FF 2D 06 31 |  if_ae	add	local04, ##1023
26f4c                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
26f4c     19 3D 02 F6 | 	mov	local12, local07
26f50     14 3D 02 F1 | 	add	local12, local02
26f54     18 3A 62 FD | 	getqx	local11
26f58     1C 37 02 FD | 	qmul	local09, local10
26f5c     1D 3D 02 F1 | 	add	local12, local11
26f60     13 3F 02 F6 | 	mov	local13, local01
26f64     1A 3F 02 F1 | 	add	local13, local08
26f68     18 3A 62 FD | 	getqx	local11
26f6c     1D 3F 02 F1 | 	add	local13, local11
26f70     1F 3D 5A F2 | 	cmps	local12, local13 wcz
26f74     98 00 90 ED |  if_be	jmp	#LR__3021
26f78                 | '     repeat y from y1a to y2a
26f78     15 41 02 F6 | 	mov	local14, local03
26f7c     15 2F 52 F2 | 	cmps	local05, local03 wc
26f80     01 42 86 F6 | 	negc	local15, #1
26f84     17 45 02 F6 | 	mov	local16, local05
26f88     21 45 02 F1 | 	add	local16, local15
26f8c     0B 00 00 FF 
26f90     CC E4 05 F1 | 	add	objptr, ##5836
26f94                 | LR__3020
26f94     18 41 02 FD | 	qmul	local14, local06
26f98                 | '   '    writeln(string("I am here"))
26f98                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
26f98     13 15 02 F6 | 	mov	arg02, local01
26f9c     16 17 02 F6 | 	mov	arg03, local04
26fa0     14 17 82 F1 | 	sub	arg03, local02
26fa4     01 16 06 F1 | 	add	arg03, #1
26fa8     F4 03 00 FF 
26fac     00 12 06 F6 | 	mov	arg01, ##518144
26fb0     18 3E 62 FD | 	getqx	local13
26fb4     1F 15 02 F1 | 	add	arg02, local13
26fb8     14 15 02 F1 | 	add	arg02, local02
26fbc     B0 04 B0 FD | 	call	#_psram_spin2_read1
26fc0     1B 3F 02 F6 | 	mov	local13, local09
26fc4     15 3F 82 F1 | 	sub	local13, local03
26fc8     20 3F 02 F1 | 	add	local13, local14
26fcc     1C 3F 02 FD | 	qmul	local13, local10
26fd0                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
26fd0     19 15 02 F6 | 	mov	arg02, local07
26fd4     16 17 02 F6 | 	mov	arg03, local04
26fd8     14 17 82 F1 | 	sub	arg03, local02
26fdc     01 16 06 F1 | 	add	arg03, #1
26fe0     F4 03 00 FF 
26fe4     00 12 06 F6 | 	mov	arg01, ##518144
26fe8     18 3E 62 FD | 	getqx	local13
26fec     1F 15 02 F1 | 	add	arg02, local13
26ff0     1A 15 02 F1 | 	add	arg02, local08
26ff4     14 05 B0 FD | 	call	#_psram_spin2_write
26ff8     21 41 02 F1 | 	add	local14, local15
26ffc     22 41 0A F2 | 	cmp	local14, local16 wz
27000     90 FF 9F 5D |  if_ne	jmp	#LR__3020
27004     0B 00 00 FF 
27008     CC E4 85 F1 | 	sub	objptr, ##5836
2700c     94 00 90 FD | 	jmp	#LR__3023
27010                 | LR__3021
27010                 | '   else
27010                 | '     repeat y from y2a to y1a
27010     17 41 02 F6 | 	mov	local14, local05
27014     17 2B 52 F2 | 	cmps	local03, local05 wc
27018     01 46 86 F6 | 	negc	local17, #1
2701c     15 49 02 F6 | 	mov	local18, local03
27020     23 49 02 F1 | 	add	local18, local17
27024     0B 00 00 FF 
27028     CC E4 05 F1 | 	add	objptr, ##5836
2702c                 | LR__3022
2702c     18 41 02 FD | 	qmul	local14, local06
27030                 | '  '     writeln(string("I am there"))
27030                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
27030     13 15 02 F6 | 	mov	arg02, local01
27034     16 17 02 F6 | 	mov	arg03, local04
27038     14 17 82 F1 | 	sub	arg03, local02
2703c     01 16 06 F1 | 	add	arg03, #1
27040     F4 03 00 FF 
27044     00 12 06 F6 | 	mov	arg01, ##518144
27048     18 44 62 FD | 	getqx	local16
2704c     22 15 02 F1 | 	add	arg02, local16
27050     14 15 02 F1 | 	add	arg02, local02
27054     18 04 B0 FD | 	call	#_psram_spin2_read1
27058     1B 45 02 F6 | 	mov	local16, local09
2705c     15 45 82 F1 | 	sub	local16, local03
27060     20 45 02 F1 | 	add	local16, local14
27064     1C 45 02 FD | 	qmul	local16, local10
27068                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
27068     19 15 02 F6 | 	mov	arg02, local07
2706c     16 17 02 F6 | 	mov	arg03, local04
27070     14 17 82 F1 | 	sub	arg03, local02
27074     01 16 06 F1 | 	add	arg03, #1
27078     F4 03 00 FF 
2707c     00 12 06 F6 | 	mov	arg01, ##518144
27080     18 44 62 FD | 	getqx	local16
27084     22 15 02 F1 | 	add	arg02, local16
27088     1A 15 02 F1 | 	add	arg02, local08
2708c     7C 04 B0 FD | 	call	#_psram_spin2_write
27090     23 41 02 F1 | 	add	local14, local17
27094     24 41 0A F2 | 	cmp	local14, local18 wz
27098     90 FF 9F 5D |  if_ne	jmp	#LR__3022
2709c     0B 00 00 FF 
270a0     CC E4 85 F1 | 	sub	objptr, ##5836
270a4                 | LR__3023
270a4                 | LR__3024
270a4                 | '     
270a4                 | ' if ((f>=$80000) && (t<$80000)) 
270a4     00 04 00 FF 
270a8     00 26 56 F2 | 	cmps	local01, ##524288 wc
270ac     80 00 90 CD |  if_b	jmp	#LR__3026
270b0     00 04 00 FF 
270b4     00 32 56 F2 | 	cmps	local07, ##524288 wc
270b8     74 00 90 3D |  if_ae	jmp	#LR__3026
270bc                 | '   repeat y from y1a to y2a
270bc     15 41 02 F6 | 	mov	local14, local03
270c0     15 2F 52 F2 | 	cmps	local05, local03 wc
270c4     01 4A 86 F6 | 	negc	local19, #1
270c8     17 4D 02 F6 | 	mov	local20, local05
270cc     25 4D 02 F1 | 	add	local20, local19
270d0     0B 00 00 FF 
270d4     CC E4 05 F1 | 	add	objptr, ##5836
270d8                 | LR__3025
270d8     1B 49 02 F6 | 	mov	local18, local09
270dc     15 49 82 F1 | 	sub	local18, local03
270e0     20 49 02 F1 | 	add	local18, local14
270e4     1C 49 02 FD | 	qmul	local18, local10
270e8                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
270e8     19 13 02 F6 | 	mov	arg01, local07
270ec     18 48 62 FD | 	getqx	local18
270f0     18 41 02 FD | 	qmul	local14, local06
270f4     24 13 02 F1 | 	add	arg01, local18
270f8     1A 13 02 F1 | 	add	arg01, local08
270fc     13 15 02 F6 | 	mov	arg02, local01
27100     16 17 02 F6 | 	mov	arg03, local04
27104     14 17 82 F1 | 	sub	arg03, local02
27108     01 16 06 F1 | 	add	arg03, #1
2710c     18 48 62 FD | 	getqx	local18
27110     24 15 02 F1 | 	add	arg02, local18
27114     14 15 02 F1 | 	add	arg02, local02
27118     54 03 B0 FD | 	call	#_psram_spin2_read1
2711c     25 41 02 F1 | 	add	local14, local19
27120     26 41 0A F2 | 	cmp	local14, local20 wz
27124     B0 FF 9F 5D |  if_ne	jmp	#LR__3025
27128     0B 00 00 FF 
2712c     CC E4 85 F1 | 	sub	objptr, ##5836
27130                 | LR__3026
27130                 | '     
27130                 | ' if ((f<$80000) && (t>=$80000)) 
27130     00 04 00 FF 
27134     00 26 56 F2 | 	cmps	local01, ##524288 wc
27138     84 00 90 3D |  if_ae	jmp	#LR__3028
2713c     00 04 00 FF 
27140     00 32 56 F2 | 	cmps	local07, ##524288 wc
27144     78 00 90 CD |  if_b	jmp	#LR__3028
27148                 | '   t:=t & $FFFFFFF
27148     7C 32 06 F4 | 	bitl	local07, #124
2714c                 | '   repeat y from y1a to y2a
2714c     15 41 02 F6 | 	mov	local14, local03
27150     15 2F 52 F2 | 	cmps	local05, local03 wc
27154     01 4E 86 F6 | 	negc	local21, #1
27158     17 51 02 F6 | 	mov	local22, local05
2715c     27 51 02 F1 | 	add	local22, local21
27160     0B 00 00 FF 
27164     CC E4 05 F1 | 	add	objptr, ##5836
27168                 | LR__3027
27168     18 41 02 FD | 	qmul	local14, local06
2716c                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
2716c     13 13 02 F6 | 	mov	arg01, local01
27170     1B 4D 02 F6 | 	mov	local20, local09
27174     15 4D 82 F1 | 	sub	local20, local03
27178     20 4D 02 F1 | 	add	local20, local14
2717c     18 4A 62 FD | 	getqx	local19
27180     1C 4D 02 FD | 	qmul	local20, local10
27184     25 13 02 F1 | 	add	arg01, local19
27188     14 13 02 F1 | 	add	arg01, local02
2718c     19 15 02 F6 | 	mov	arg02, local07
27190     16 17 02 F6 | 	mov	arg03, local04
27194     14 17 82 F1 | 	sub	arg03, local02
27198     01 16 06 F1 | 	add	arg03, #1
2719c     18 4C 62 FD | 	getqx	local20
271a0     26 15 02 F1 | 	add	arg02, local20
271a4     1A 15 02 F1 | 	add	arg02, local08
271a8     60 03 B0 FD | 	call	#_psram_spin2_write
271ac     27 41 02 F1 | 	add	local14, local21
271b0     28 41 0A F2 | 	cmp	local14, local22 wz
271b4     B0 FF 9F 5D |  if_ne	jmp	#LR__3027
271b8     0B 00 00 FF 
271bc     CC E4 85 F1 | 	sub	objptr, ##5836
271c0                 | LR__3028
271c0                 | '     
271c0                 | ' if ((f<$80000) && (t<$80000)) 
271c0     00 04 00 FF 
271c4     00 26 56 F2 | 	cmps	local01, ##524288 wc
271c8     00 04 00 CF 
271cc     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
271d0     64 00 90 3D |  if_ae	jmp	#LR__3030
271d4                 | '   repeat y from y1a to y2a
271d4     15 41 02 F6 | 	mov	local14, local03
271d8     15 2F 52 F2 | 	cmps	local05, local03 wc
271dc     01 52 86 F6 | 	negc	local23, #1
271e0     17 55 02 F6 | 	mov	local24, local05
271e4     29 55 02 F1 | 	add	local24, local23
271e8                 | LR__3029
271e8     18 41 02 FD | 	qmul	local14, local06
271ec                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
271ec     13 13 02 F6 | 	mov	arg01, local01
271f0     1B 51 02 F6 | 	mov	local22, local09
271f4     15 51 82 F1 | 	sub	local22, local03
271f8     20 51 02 F1 | 	add	local22, local14
271fc     18 4E 62 FD | 	getqx	local21
27200     1C 51 02 FD | 	qmul	local22, local10
27204     27 13 02 F1 | 	add	arg01, local21
27208     14 13 02 F1 | 	add	arg01, local02
2720c     19 15 02 F6 | 	mov	arg02, local07
27210     16 17 02 F6 | 	mov	arg03, local04
27214     14 17 82 F1 | 	sub	arg03, local02
27218     01 16 06 F1 | 	add	arg03, #1
2721c     18 50 62 FD | 	getqx	local22
27220     28 15 02 F1 | 	add	arg02, local22
27224     1A 15 02 F1 | 	add	arg02, local08
27228     98 0D B0 FD | 	call	#__system____builtin_memmove
2722c     29 41 02 F1 | 	add	local14, local23
27230     2A 41 0A F2 | 	cmp	local14, local24 wz
27234     B0 FF 9F 5D |  if_ne	jmp	#LR__3029
27238                 | LR__3030
27238     A7 F0 03 F6 | 	mov	ptra, fp
2723c     B2 00 A0 FD | 	call	#popregs_
27240                 | _hg010b_spin2_blit_ret
27240     2D 00 64 FD | 	ret
27244                 | 
27244                 | ' 
27244                 | ' '..............................................................................
27244                 | ' 
27244                 | ' {{
27244                 | ' }}
27244                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
27244                 | _psram_spin2_startx
27244     04 4A 05 F6 | 	mov	COUNT_, #4
27248     A8 00 A0 FD | 	call	#pushregs_
2724c     09 27 02 F6 | 	mov	local01, arg01
27250     0B 29 02 F6 | 	mov	local02, arg03
27254     0C 2B 02 F6 | 	mov	local03, arg04
27258                 | '     stop() ' restart driver if required
27258     54 01 B0 FD | 	call	#_psram_spin2_stop
2725c     00 26 0E F2 | 	cmp	local01, #0 wz
27260     14 26 06 AB |  if_e	rdlong	local01, #20
27264     13 15 52 F6 | 	abs	arg02, local01 wc
27268     A1 07 00 FF 
2726c     40 14 16 FD | 	qdiv	arg02, ##1000000
27270                 | ' 
27270                 | '     ' use current frequency if none specified
27270                 | ' 
27270                 | '     if freq == 0 
27270                 | '         freq := clkfreq 
27270                 | ' 
27270                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
27270                 | ' 
27270                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
27270                 | '     if burst < 0
27270                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
27270     18 14 62 FD | 	getqx	arg02
27274     0A 19 82 F6 | 	negc	arg04, arg02
27278     03 18 66 F0 | 	shl	arg04, #3
2727c     84 18 86 F1 | 	sub	arg04, #132
27280     04 18 46 F0 | 	shr	arg04, #4
27284     04 18 66 F0 | 	shl	arg04, #4
27288     00 18 56 F2 | 	cmps	arg04, #0 wc
2728c     0E FA 65 C6 |  if_b	neg	result1, #14
27290     10 01 90 CD |  if_b	jmp	#LR__3043
27294                 | ' 
27294                 | '     ' compute the input delay
27294                 | ' 
27294                 | '     if delay <= 0
27294     01 28 56 F2 | 	cmps	local02, #1 wc
27298     10 00 90 3D |  if_ae	jmp	#LR__3040
2729c                 | '         delay := lookupDelay(freq)
2729c     13 13 02 F6 | 	mov	arg01, local01
272a0     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
272a4     FD 28 02 F6 | 	mov	local02, result1
272a8     04 00 90 FD | 	jmp	#LR__3041
272ac                 | LR__3040
272ac                 | '     else
272ac                 | '         delay <#= $f ' limit to 15
272ac     0F 28 66 F3 | 	fles	local02, #15
272b0                 | LR__3041
272b0                 | ' 
272b0                 | '     ' create our lock
272b0                 | ' 
272b0                 | '     driverlock := LOCKNEW()  
272b0     00 FA 05 F6 | 	mov	result1, #0
272b4     04 FA 61 FD | 	locknew	result1
272b8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
272bc     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
272c0                 | '     if driverlock == -1
272c0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
272c4     FF FF 7F FF 
272c8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
272cc                 | '         return ERR_NO_LOCK
272cc     1A FA 65 A6 |  if_e	neg	result1, #26
272d0     D0 00 90 AD |  if_e	jmp	#LR__3043
272d4                 | ' 
272d4                 | '     ' patch in the proper data and HUB addresses to the startup structure
272d4                 | ' 
272d4                 | '     long[@startupData][0]:=clkfreq
272d4     14 26 06 FB | 	rdlong	local01, #20
272d8     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
272dc     FA 26 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
272e0                 | ' '    long[@startupData][1]:=$1000_0000
272e0                 | '     long[@startupData][5]:=@deviceData
272e0     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
272e4     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
272e8     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
272ec     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
272f0     14 14 06 F1 | 	add	arg02, #20
272f4     0A 27 62 FC | 	wrlong	local01, arg02
272f8                 | '     long[@startupData][6]:=@qosData
272f8     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
272fc     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
27300     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
27304     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
27308     18 14 06 F1 | 	add	arg02, #24
2730c     0A 27 62 FC | 	wrlong	local01, arg02
27310                 | '     long[@startupData][7]:=$7FF00
27310     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
27314     1C 26 06 F1 | 	add	local01, #28
27318     FF 03 80 FF 
2731c     13 01 6A FC | 	wrlong	##524032, local01
27320                 | ' 
27320                 | '     ' setup some default bank and QoS parameter values
27320                 | ' 
27320                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
27320     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
27324     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
27328     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
2732c     10 18 66 F0 | 	shl	arg04, #16
27330     0C 28 66 F0 | 	shl	local02, #12
27334     14 19 42 F5 | 	or	arg04, local02
27338     18 18 46 F5 | 	or	arg04, #24
2733c     0C 15 02 F6 | 	mov	arg02, arg04
27340     02 16 06 F6 | 	mov	arg03, #2
27344     A0 00 A0 FD | 	call	#\builtin_longfill_
27348                 | '     longfill(@qosData, $FFFF0000, 8)
27348     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
2734c     07 16 06 F6 | 	mov	arg03, #7
27350     28 16 62 FD | 	setq	arg03
27354     80 FF FF FF 
27358     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
2735c                 | ' 
2735c                 | '     ' get the address of the PSRAM memory driver so we can start it
2735c                 | ' 
2735c                 | '     driverAddr:= driver.getDriverAddr()
2735c                 | '     return @driver_start
2735c     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
27360     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
27364     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
27368                 | ' 
27368                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
27368                 | ' 
27368                 | '     if desiredcog < 0
27368     00 2A 56 F2 | 	cmps	local03, #0 wc
2736c                 | '         desiredcog := NEWCOG
2736c     10 2A 06 C6 |  if_b	mov	local03, #16
27370                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
27370     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
27374     15 2D 02 F6 | 	mov	local04, local03
27378     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
2737c     0A 2D F2 FC | 	coginit	local04, arg02 wc
27380     01 2C 66 C6 |  if_b	neg	local04, #1
27384     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
27388     FA 2C 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
2738c                 | '     repeat until long[@startupData] == 0 
2738c     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
27390                 | LR__3042
27390     FA 2C 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
27394     F8 FF 9F 5D |  if_ne	jmp	#LR__3042
27398                 | ' 
27398                 | '     return drivercog
27398     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
2739c     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
273a0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
273a4                 | LR__3043
273a4     A7 F0 03 F6 | 	mov	ptra, fp
273a8     B2 00 A0 FD | 	call	#popregs_
273ac                 | _psram_spin2_startx_ret
273ac     2D 00 64 FD | 	ret
273b0                 | 
273b0                 | ' 
273b0                 | ' '..............................................................................
273b0                 | ' 
273b0                 | ' {{
273b0                 | ' }}
273b0                 | ' PUB stop() : i
273b0                 | _psram_spin2_stop
273b0     00 00 06 F6 | 	mov	_var01, #0
273b4                 | '     if drivercog <> -1
273b4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
273b8     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
273bc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
273c0     FF FF 7F FF 
273c4     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
273c8     70 00 90 AD |  if_e	jmp	#LR__3053
273cc                 | '         cogstop(drivercog) ' a rather brutal stop
273cc     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
273d0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
273d4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
273d8     03 12 62 FD | 	cogstop	arg01
273dc     97 26 48 FB | 	callpa	#(@LR__3052-@LR__3050)>>2,fcache_load_ptr_
273e0                 | '         repeat i from 0 to 7
273e0                 | LR__3050
273e0                 | '             if long[$7FF00][i*3] < 0
273e0     00 FB 01 F6 | 	mov	result1, _var01
273e4     01 FA 65 F0 | 	shl	result1, #1
273e8     00 FB 01 F1 | 	add	result1, _var01
273ec     02 FA 65 F0 | 	shl	result1, #2
273f0     FF 03 00 FF 
273f4     00 FB 05 F1 | 	add	result1, ##524032
273f8     FD FA 01 FB | 	rdlong	result1, result1
273fc     00 FA 55 F2 | 	cmps	result1, #0 wc
27400     1C 00 90 3D |  if_ae	jmp	#LR__3051
27404                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
27404     00 FB 01 F6 | 	mov	result1, _var01
27408     01 FA 65 F0 | 	shl	result1, #1
2740c     00 FB 01 F1 | 	add	result1, _var01
27410     02 FA 65 F0 | 	shl	result1, #2
27414     FF 03 00 FF 
27418     00 FB 05 F1 | 	add	result1, ##524032
2741c     FD 20 68 FC | 	wrlong	#16, result1
27420                 | LR__3051
27420     01 00 06 F1 | 	add	_var01, #1
27424     08 00 56 F2 | 	cmps	_var01, #8 wc
27428     B4 FF 9F CD |  if_b	jmp	#LR__3050
2742c                 | LR__3052
2742c                 | '         drivercog := -1
2742c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
27430     FF FF FF FF 
27434     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
27438     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2743c                 | LR__3053
2743c                 | '     if driverlock <> -1
2743c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
27440     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
27444     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
27448     FF FF 7F FF 
2744c     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
27450                 | '         LOCKRET(driverlock)
27450     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
27454     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
27458     05 12 62 5D |  if_ne	lockret	arg01
2745c                 | '         driverlock := -1
2745c     FF FF FF 5F 
27460     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
27464     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
27468     00 FB 01 F6 | 	mov	result1, _var01
2746c                 | _psram_spin2_stop_ret
2746c     2D 00 64 FD | 	ret
27470                 | 
27470                 | ' 
27470                 | ' '..............................................................................
27470                 | ' 
27470                 | ' {{
27470                 | ' }}
27470                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
27470                 | _psram_spin2_read1
27470                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
27470                 | '     if drivercog == -1 ' driver must be running
27470     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
27474     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
27478     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2747c     FF FF 7F FF 
27480     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
27484                 | '         return ERR_INACTIVE
27484     0F FA 65 A6 |  if_e	neg	result1, #15
27488     7C 00 90 AD |  if_e	jmp	#LR__3061
2748c                 | '     if count == 0 ' don't even bother reading
2748c     00 16 0E F2 | 	cmp	arg03, #0 wz
27490                 | '         return 0
27490     00 FA 05 A6 |  if_e	mov	result1, #0
27494     70 00 90 AD |  if_e	jmp	#LR__3061
27498                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
27498     00 FA 05 F6 | 	mov	result1, #0
2749c     01 FA 61 FD | 	cogid	result1
274a0     FD 00 02 F6 | 	mov	_var01, result1
274a4     01 00 66 F0 | 	shl	_var01, #1
274a8     FD 00 02 F1 | 	add	_var01, result1
274ac     02 00 66 F0 | 	shl	_var01, #2
274b0     FF 03 00 FF 
274b4     00 03 06 F6 | 	mov	_var02, ##524032
274b8     00 03 02 F1 | 	add	_var02, _var01
274bc                 | '     if long[mailbox] < 0
274bc     01 01 02 FB | 	rdlong	_var01, _var02
274c0     00 00 56 F2 | 	cmps	_var01, #0 wc
274c4                 | '         return ERR_MAILBOX_BUSY
274c4     1C FA 65 C6 |  if_b	neg	result1, #28
274c8     3C 00 90 CD |  if_b	jmp	#LR__3061
274cc                 | '     long[mailbox][2] := count
274cc     08 02 06 F1 | 	add	_var02, #8
274d0     01 17 62 FC | 	wrlong	arg03, _var02
274d4                 | '     long[mailbox][1] := dstHubAddr
274d4     04 02 86 F1 | 	sub	_var02, #4
274d8     01 13 62 FC | 	wrlong	arg01, _var02
274dc     04 02 86 F1 | 	sub	_var02, #4
274e0                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
274e0     0A 05 02 F6 | 	mov	_var03, arg02
274e4     D9 04 06 F4 | 	bitl	_var03, #217
274e8     00 00 58 FF 
274ec     00 00 06 F6 | 	mov	_var01, ##-1342177280
274f0     02 01 02 F1 | 	add	_var01, _var03
274f4     01 01 62 FC | 	wrlong	_var01, _var02
274f8                 | '     repeat
274f8                 | LR__3060
274f8                 | '         result := long[mailbox]    
274f8     01 05 02 FB | 	rdlong	_var03, _var02
274fc     00 04 56 F2 | 	cmps	_var03, #0 wc
27500     F4 FF 9F CD |  if_b	jmp	#LR__3060
27504                 | '     while result < 0   
27504                 | '     return -result                       'return success or error
27504     02 FB 61 F6 | 	neg	result1, _var03
27508                 | LR__3061
27508                 | _psram_spin2_read1_ret
27508     2D 00 64 FD | 	ret
2750c                 | 
2750c                 | ' 
2750c                 | ' '..............................................................................
2750c                 | ' 
2750c                 | ' {{
2750c                 | ' }}
2750c                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
2750c                 | _psram_spin2_write
2750c                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
2750c                 | '     if drivercog == -1 ' driver must be running
2750c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
27510     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
27514     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
27518     FF FF 7F FF 
2751c     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
27520                 | '         return ERR_INACTIVE
27520     0F FA 65 A6 |  if_e	neg	result1, #15
27524     7C 00 90 AD |  if_e	jmp	#LR__3071
27528                 | '     if count == 0 ' don't even bother writing
27528     00 16 0E F2 | 	cmp	arg03, #0 wz
2752c                 | '         return 0
2752c     00 FA 05 A6 |  if_e	mov	result1, #0
27530     70 00 90 AD |  if_e	jmp	#LR__3071
27534                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
27534     00 FA 05 F6 | 	mov	result1, #0
27538     01 FA 61 FD | 	cogid	result1
2753c     FD 00 02 F6 | 	mov	_var01, result1
27540     01 00 66 F0 | 	shl	_var01, #1
27544     FD 00 02 F1 | 	add	_var01, result1
27548     02 00 66 F0 | 	shl	_var01, #2
2754c     FF 03 00 FF 
27550     00 03 06 F6 | 	mov	_var02, ##524032
27554     00 03 02 F1 | 	add	_var02, _var01
27558                 | '     if long[mailbox] < 0
27558     01 01 02 FB | 	rdlong	_var01, _var02
2755c     00 00 56 F2 | 	cmps	_var01, #0 wc
27560                 | '         return ERR_MAILBOX_BUSY
27560     1C FA 65 C6 |  if_b	neg	result1, #28
27564     3C 00 90 CD |  if_b	jmp	#LR__3071
27568                 | '     long[mailbox][2] := count
27568     08 02 06 F1 | 	add	_var02, #8
2756c     01 17 62 FC | 	wrlong	arg03, _var02
27570                 | '     long[mailbox][1] := srcHubAddr
27570     04 02 86 F1 | 	sub	_var02, #4
27574     01 13 62 FC | 	wrlong	arg01, _var02
27578     04 02 86 F1 | 	sub	_var02, #4
2757c                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
2757c     0A 05 02 F6 | 	mov	_var03, arg02
27580     D9 04 06 F4 | 	bitl	_var03, #217
27584     00 00 78 FF 
27588     00 00 06 F6 | 	mov	_var01, ##-268435456
2758c     02 01 02 F1 | 	add	_var01, _var03
27590     01 01 62 FC | 	wrlong	_var01, _var02
27594                 | '     repeat
27594                 | LR__3070
27594                 | '         result := long[mailbox]    
27594     01 05 02 FB | 	rdlong	_var03, _var02
27598     00 04 56 F2 | 	cmps	_var03, #0 wc
2759c     F4 FF 9F CD |  if_b	jmp	#LR__3070
275a0                 | '     while result < 0   
275a0                 | '     return -result                       'return success or error
275a0     02 FB 61 F6 | 	neg	result1, _var03
275a4                 | LR__3071
275a4                 | _psram_spin2_write_ret
275a4     2D 00 64 FD | 	ret
275a8                 | 
275a8                 | ' 
275a8                 | ' ' generalized fill
275a8                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
275a8                 | _psram_spin2_fill
275a8     09 01 02 F6 | 	mov	_var01, arg01
275ac     0A 03 02 F6 | 	mov	_var02, arg02
275b0     0B 05 02 F6 | 	mov	_var03, arg03
275b4     0D 07 02 F6 | 	mov	_var04, arg05
275b8                 | '     case datasize 
275b8     01 06 86 F1 | 	sub	_var04, #1
275bc     04 06 26 F3 | 	fle	_var04, #4
275c0     30 06 62 FD | 	jmprel	_var04
275c4                 | LR__3080
275c4     10 00 90 FD | 	jmp	#LR__3081
275c8     18 00 90 FD | 	jmp	#LR__3082
275cc     2C 00 90 FD | 	jmp	#LR__3084
275d0     1C 00 90 FD | 	jmp	#LR__3083
275d4     24 00 90 FD | 	jmp	#LR__3084
275d8                 | LR__3081
275d8                 | '         1: req := driver.R_WRITEBYTE
275d8     00 00 60 FF 
275dc     00 08 06 F6 | 	mov	_var05, ##-1073741824
275e0     20 00 90 FD | 	jmp	#LR__3085
275e4                 | LR__3082
275e4                 | '         2: req := driver.R_WRITEWORD
275e4     00 00 68 FF 
275e8     00 08 06 F6 | 	mov	_var05, ##-805306368
275ec     14 00 90 FD | 	jmp	#LR__3085
275f0                 | LR__3083
275f0                 | '         4: req := driver.R_WRITELONG
275f0     00 00 70 FF 
275f4     00 08 06 F6 | 	mov	_var05, ##-536870912
275f8     08 00 90 FD | 	jmp	#LR__3085
275fc                 | LR__3084
275fc                 | '         other : return ERR_INVALID
275fc     06 FA 65 F6 | 	neg	result1, #6
27600     94 00 90 FD | 	jmp	#LR__3087
27604                 | LR__3085
27604                 | '     if count == 0   ' nothing to do
27604     00 04 0E F2 | 	cmp	_var03, #0 wz
27608                 | '         return 0
27608     00 FA 05 A6 |  if_e	mov	result1, #0
2760c     88 00 90 AD |  if_e	jmp	#LR__3087
27610                 | '     if drivercog == -1
27610     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
27614     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
27618     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2761c     FF FF 7F FF 
27620     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
27624                 | '         return ERR_INACTIVE
27624     0F FA 65 A6 |  if_e	neg	result1, #15
27628     6C 00 90 AD |  if_e	jmp	#LR__3087
2762c                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
2762c     00 FA 05 F6 | 	mov	result1, #0
27630     01 FA 61 FD | 	cogid	result1
27634     FD 06 02 F6 | 	mov	_var04, result1
27638     01 06 66 F0 | 	shl	_var04, #1
2763c     FD 06 02 F1 | 	add	_var04, result1
27640     02 06 66 F0 | 	shl	_var04, #2
27644     FF 03 00 FF 
27648     00 0B 06 F6 | 	mov	_var06, ##524032
2764c     03 0B 02 F1 | 	add	_var06, _var04
27650                 | '     if long[mailbox] < 0
27650     05 07 02 FB | 	rdlong	_var04, _var06
27654     00 06 56 F2 | 	cmps	_var04, #0 wc
27658                 | '         return ERR_MAILBOX_BUSY
27658     1C FA 65 C6 |  if_b	neg	result1, #28
2765c     38 00 90 CD |  if_b	jmp	#LR__3087
27660                 | '     long[mailbox][2] := count
27660     08 0A 06 F1 | 	add	_var06, #8
27664     05 05 62 FC | 	wrlong	_var03, _var06
27668                 | '     long[mailbox][1] := pattern
27668     04 0A 86 F1 | 	sub	_var06, #4
2766c     05 03 62 FC | 	wrlong	_var02, _var06
27670     04 0A 86 F1 | 	sub	_var06, #4
27674                 | '     long[mailbox] := req + (addr & $1ffffff)
27674     04 0D 02 F6 | 	mov	_var07, _var05
27678     00 0F 02 F6 | 	mov	_var08, _var01
2767c     D9 0E 06 F4 | 	bitl	_var08, #217
27680     07 0D 02 F1 | 	add	_var07, _var08
27684     05 0D 62 FC | 	wrlong	_var07, _var06
27688                 | '     repeat
27688                 | LR__3086
27688                 | '         r := long[mailbox]
27688     05 0F 02 FB | 	rdlong	_var08, _var06
2768c     00 0E 56 F2 | 	cmps	_var08, #0 wc
27690     F4 FF 9F CD |  if_b	jmp	#LR__3086
27694                 | '     while r < 0
27694                 | '     return -r                  ' return 0 for success or negated error code
27694     07 FB 61 F6 | 	neg	result1, _var08
27698                 | LR__3087
27698                 | _psram_spin2_fill_ret
27698     2D 00 64 FD | 	ret
2769c                 | 
2769c                 | ' 
2769c                 | ' '..............................................................................
2769c                 | ' 
2769c                 | ' {{
2769c                 | ' }}
2769c                 | ' PUB setQos(cog, qos) : result | mailbox
2769c                 | _psram_spin2_setQos
2769c     09 01 02 F6 | 	mov	_var01, arg01
276a0                 | '     if drivercog == -1 ' driver must be running
276a0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
276a4     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
276a8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
276ac     FF FF 7F FF 
276b0     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
276b4                 | '         return ERR_INACTIVE
276b4     0F FA 65 A6 |  if_e	neg	result1, #15
276b8     9C 00 90 AD |  if_e	jmp	#LR__3094
276bc                 | '     if cog < 0 or cog > 7 ' enforce cog id range
276bc     00 00 56 F2 | 	cmps	_var01, #0 wc
276c0     08 00 90 CD |  if_b	jmp	#LR__3090
276c4     08 00 56 F2 | 	cmps	_var01, #8 wc
276c8     08 00 90 CD |  if_b	jmp	#LR__3091
276cc                 | LR__3090
276cc                 | '         return ERR_INVALID
276cc     06 FA 65 F6 | 	neg	result1, #6
276d0     84 00 90 FD | 	jmp	#LR__3094
276d4                 | LR__3091
276d4                 | '     long[@qosData][cog] := qos & !$1ff
276d4     FF 15 26 F5 | 	andn	arg02, #511
276d8     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
276dc     02 00 66 F0 | 	shl	_var01, #2
276e0     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
276e4     00 15 62 FC | 	wrlong	arg02, _var01
276e8                 | '     mailbox := $7FF00 + drivercog*12
276e8     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
276ec     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
276f0     02 07 02 F6 | 	mov	_var04, _var03
276f4     01 06 66 F0 | 	shl	_var04, #1
276f8     02 07 02 F1 | 	add	_var04, _var03
276fc     02 06 66 F0 | 	shl	_var04, #2
27700     FF 03 00 FF 
27704     00 09 06 F6 | 	mov	_var05, ##524032
27708     03 09 02 F1 | 	add	_var05, _var04
2770c                 | '     repeat until LOCKTRY(driverlock)
2770c     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
27710                 | LR__3092
27710     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
27714     06 12 72 FD | 	locktry	arg01 wc
27718     F4 FF 9F 3D |  if_ae	jmp	#LR__3092
2771c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
27720                 | '     long[mailbox] := driver.R_CONFIG + cogid()
27720     00 06 06 F6 | 	mov	_var04, #0
27724     01 06 62 FD | 	cogid	_var04
27728     00 00 78 FF 
2772c     00 02 06 F6 | 	mov	_var02, ##-268435456
27730     03 03 02 F1 | 	add	_var02, _var04
27734     04 03 62 FC | 	wrlong	_var02, _var05
27738                 | '     repeat while long[mailbox] < 0
27738                 | LR__3093
27738     04 03 02 FB | 	rdlong	_var02, _var05
2773c     00 02 56 F2 | 	cmps	_var02, #0 wc
27740     F4 FF 9F CD |  if_b	jmp	#LR__3093
27744                 | '     LOCKREL(driverlock)
27744     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
27748     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
2774c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
27750     07 12 72 FD | 	lockrel	arg01 wc
27754     00 FA 05 F6 | 	mov	result1, #0
27758                 | LR__3094
27758                 | _psram_spin2_setQos_ret
27758     2D 00 64 FD | 	ret
2775c                 | 
2775c                 | ' 
2775c                 | ' '..............................................................................
2775c                 | ' 
2775c                 | ' {{
2775c                 | ' }}
2775c                 | ' PRI lookupDelay(freq) : delay | profile
2775c                 | _psram_spin2_lookupDelay
2775c                 | '     profile := @delayTable
2775c     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
27760     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
27764                 | '     delay := long[profile][0]
27764     00 03 02 FB | 	rdlong	_var02, _var01
27768                 | '     repeat while long[profile][1] 
27768     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
2776c     97 16 48 FB | 	callpa	#(@LR__3101-@LR__3100)>>2,fcache_load_ptr_
27770                 | LR__3100
27770     04 00 06 F1 | 	add	_var01, #4
27774     00 FB 09 FB | 	rdlong	result1, _var01 wz
27778     04 00 86 F1 | 	sub	_var01, #4
2777c     1C 00 90 AD |  if_e	jmp	#LR__3102
27780                 | '         if freq +< long[profile][1] 
27780     04 00 06 F1 | 	add	_var01, #4
27784     00 FB 01 FB | 	rdlong	result1, _var01
27788     04 00 86 F1 | 	sub	_var01, #4
2778c     FD 12 12 F2 | 	cmp	arg01, result1 wc
27790                 | '             quit
27790                 | '         profile += 4
27790     04 00 06 31 |  if_ae	add	_var01, #4
27794                 | '         delay++
27794     01 02 06 31 |  if_ae	add	_var02, #1
27798     D4 FF 9F 3D |  if_ae	jmp	#LR__3100
2779c                 | LR__3101
2779c                 | LR__3102
2779c     01 FB 01 F6 | 	mov	result1, _var02
277a0                 | _psram_spin2_lookupDelay_ret
277a0     2D 00 64 FD | 	ret
277a4                 | 
277a4                 | ' 
277a4                 | ' PUB start() : r
277a4                 | _usbnew_spin2_start
277a4     00 00 06 F6 | 	mov	_var01, #0
277a8                 | '   ifnot driver_cog
277a8     15 00 00 FF 
277ac     87 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10887
277b0     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
277b4     15 00 00 FF 
277b8     87 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10887
277bc     38 00 90 5D |  if_ne	jmp	#LR__3110
277c0                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
277c0     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
277c4     10 00 06 F6 | 	mov	_var01, #16
277c8     00 16 06 F6 | 	mov	arg03, #0
277cc     28 16 62 FD | 	setq	arg03
277d0     0A 01 F2 FC | 	coginit	_var01, arg02 wc
277d4     01 00 66 C6 |  if_b	neg	_var01, #1
277d8                 | '     if r >= 0
277d8     00 00 56 F2 | 	cmps	_var01, #0 wc
277dc                 | '       driver_cog := r+1
277dc     00 03 02 36 |  if_ae	mov	_var02, _var01
277e0     01 02 06 31 |  if_ae	add	_var02, #1
277e4     15 00 00 3F 
277e8     87 F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10887
277ec     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
277f0     15 00 00 3F 
277f4     87 F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10887
277f8                 | LR__3110
277f8     00 FB 01 F6 | 	mov	result1, _var01
277fc                 | _usbnew_spin2_start_ret
277fc     2D 00 64 FD | 	ret
27800                 | 
27800                 | '     '' (Always enabled)
27800                 | ' 
27800                 | ' '' Get current pressed state of a keyboard key
27800                 | ' PUB keystate(key) : r | buf[2],tmp
27800                 | _usbnew_spin2_keystate
27800     00 04 06 F6 | 	mov	_var03, #0
27804                 | '   if key >= $E0 && key < $E8
27804     E0 12 56 F2 | 	cmps	arg01, #224 wc
27808     34 00 90 CD |  if_b	jmp	#LR__3120
2780c     E8 12 56 F2 | 	cmps	arg01, #232 wc
27810     2C 00 90 3D |  if_ae	jmp	#LR__3120
27814                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
27814     00 FA 05 F6 | 	mov	result1, #0
27818     13 00 00 FF 
2781c     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
27820     09 07 02 F6 | 	mov	_var04, arg01
27824     E0 06 86 F1 | 	sub	_var04, #224
27828     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
2782c     03 09 4A F0 | 	shr	_var05, _var04 wz
27830     13 00 00 FF 
27834     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
27838     01 FA 65 56 |  if_ne	neg	result1, #1
2783c     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
27840                 | LR__3120
27840                 | '   else
27840                 | '     '' Do this in inline ASM to ensure atomicity
27840                 | '     tmp := @hkbd_report
27840     13 00 00 FF 
27844     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
27848     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
2784c                 | '     org
2784c     13 00 00 FF 
27850     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
27854     97 1E 48 FB | 	callpa	#(@LR__3122-@LR__3121)>>2,fcache_load_ptr_
27858                 | LR__3121
27858 000             | 	org	0
27858 000 28 02 64 FD | 	setq	#1
2785c 001 04 01 02 FB | 	rdlong	_var01, _var05
27860 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
27864 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
27868 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
2786c 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
27870 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
27874 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
27878 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
2787c 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
27880 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
27884 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
27888 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
2788c 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
27890 00e 01 04 66 A6 |  if_e	neg	_var03, #1
27894 00f             | LR__3122
27894                 | 	orgh
27894     02 FB 01 F6 | 	mov	result1, _var03
27898                 | _usbnew_spin2_keystate_ret
27898     2D 00 64 FD | 	ret
2789c                 | 
2789c                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
2789c                 | ' 
2789c                 | ' '' Return key event from buffer if there is one
2789c                 | ' PUB get_key() : r | tail
2789c                 | _usbnew_spin2_get_key
2789c                 | '   tail := keyq_tail
2789c     0F 00 00 FF 
278a0     D5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7893
278a4     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
278a8                 | '   if keyq_head == tail
278a8     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
278ac     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
278b0     0F 00 00 FF 
278b4     D4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7892
278b8     00 03 0A F2 | 	cmp	_var02, _var01 wz
278bc                 | '     return 0 ' No event
278bc     00 FA 05 A6 |  if_e	mov	result1, #0
278c0     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
278c4                 | '   r := keyq_data[tail]
278c4     00 03 02 F6 | 	mov	_var02, _var01
278c8     02 02 66 F0 | 	shl	_var02, #2
278cc     0F 00 00 FF 
278d0     D6 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7894
278d4     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
278d8     01 FB 01 FB | 	rdlong	result1, _var02
278dc                 | '   if ++tail == KEYQUEUE_SIZE
278dc     01 00 06 F1 | 	add	_var01, #1
278e0     80 00 0E F2 | 	cmp	_var01, #128 wz
278e4                 | '     tail := 0
278e4     00 00 06 A6 |  if_e	mov	_var01, #0
278e8                 | '   keyq_tail := tail
278e8     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
278ec     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
278f0     0F 00 00 FF 
278f4     D5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7893
278f8                 | _usbnew_spin2_get_key_ret
278f8     2D 00 64 FD | 	ret
278fc                 | 
278fc                 | ' 
278fc                 | ' '' Emulate mouse movement
278fc                 | ' PUB mouse_move(x,y)
278fc                 | _usbnew_spin2_mouse_move
278fc     02 4A 05 F6 | 	mov	COUNT_, #2
27900     A8 00 A0 FD | 	call	#pushregs_
27904     09 27 02 F6 | 	mov	local01, arg01
27908     0A 29 02 F6 | 	mov	local02, arg02
2790c                 | '   mouse_lock := 1
2790c     14 00 00 FF 
27910     F1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
27914     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
27918     14 00 00 FF 
2791c     F1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
27920                 | '   waitus(2) ' hope driver is now done
27920     02 12 06 F6 | 	mov	arg01, #2
27924     4C 0B B0 FD | 	call	#__system___waitus
27928                 | '   mouse_xacc := x
27928     14 00 00 FF 
2792c     E1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
27930     FB 26 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
27934                 | '   mouse_yacc := y
27934     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
27938     FB 28 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
2793c                 | '   if mouse_outptr
2793c     05 00 00 FF 
27940     15 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2581
27944     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
27948     0F 00 00 FF 
2794c     D0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
27950     24 00 90 AD |  if_e	jmp	#LR__3130
27954                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
27954     10 28 66 F0 | 	shl	local02, #16
27958     13 27 32 F9 | 	getword	local01, local01, #0
2795c     13 29 42 F5 | 	or	local02, local01
27960     0F 00 00 FF 
27964     D0 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7888
27968     FB 26 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
2796c     0F 00 00 FF 
27970     D0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
27974     13 29 62 FC | 	wrlong	local02, local01
27978                 | LR__3130
27978                 | '   mouse_lock := 0
27978     14 00 00 FF 
2797c     F1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
27980     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
27984     14 00 00 FF 
27988     F1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
2798c     A7 F0 03 F6 | 	mov	ptra, fp
27990     B2 00 A0 FD | 	call	#popregs_
27994                 | _usbnew_spin2_mouse_move_ret
27994     2D 00 64 FD | 	ret
27998                 | 
27998                 | ' 
27998                 | ' '' Get all button states for a device
27998                 | ' PUB hidpad_buttons(dev) : r 
27998                 | _usbnew_spin2_hidpad_buttons
27998                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][6]
27998     13 00 00 FF 
2799c     F8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10232
279a0     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
279a4     05 12 66 F0 | 	shl	arg01, #5
279a8     09 FB 01 F1 | 	add	result1, arg01
279ac     18 FA 05 F1 | 	add	result1, #24
279b0     FD FA 01 FB | 	rdlong	result1, result1
279b4     13 00 00 FF 
279b8     F8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10232
279bc                 | _usbnew_spin2_hidpad_buttons_ret
279bc     2D 00 64 FD | 	ret
279c0                 | 
279c0                 | ' 
279c0                 | ' '' Get state of an axis (normalized between -32768 and 32767)
279c0                 | ' PUB hidpad_axis(dev,axnum) : r
279c0                 | _usbnew_spin2_hidpad_axis
279c0                 | '   if axnum +>= 8
279c0     08 14 16 F2 | 	cmp	arg02, #8 wc
279c4                 | '     return 0
279c4     00 FA 05 36 |  if_ae	mov	result1, #0
279c8     34 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
279cc                 | '   else 
279cc                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
279cc     13 00 00 FF 
279d0     F8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10232
279d4     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
279d8     05 12 66 F0 | 	shl	arg01, #5
279dc     09 FB 01 F1 | 	add	result1, arg01
279e0     04 12 06 F6 | 	mov	arg01, #4
279e4     0A 13 02 F1 | 	add	arg01, arg02
279e8     01 12 66 F0 | 	shl	arg01, #1
279ec     FD 12 02 F1 | 	add	arg01, result1
279f0     09 FB E1 FA | 	rdword	result1, arg01
279f4     0F FA 65 F7 | 	signx	result1, #15
279f8     13 00 00 FF 
279fc     F8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10232
27a00                 | _usbnew_spin2_hidpad_axis_ret
27a00     2D 00 64 FD | 	ret
27a04                 | 
27a04                 | ' 
27a04                 | ' '' Get state of a hat
27a04                 | ' PUB hidpad_hat(dev,hatnum) : r
27a04                 | _usbnew_spin2_hidpad_hat
27a04                 | '   if hatnum +>= 4
27a04     04 14 16 F2 | 	cmp	arg02, #4 wc
27a08                 | '     return 0
27a08     00 FA 05 36 |  if_ae	mov	result1, #0
27a0c     2C 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_hat_ret
27a10                 | '   else 
27a10                 | '     return byte[@hidpad_report+dev*HIDPAD_REPORT_SIZE][7*4+hatnum]
27a10     13 00 00 FF 
27a14     F8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10232
27a18     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
27a1c     05 12 66 F0 | 	shl	arg01, #5
27a20     09 FB 01 F1 | 	add	result1, arg01
27a24     1C 12 06 F6 | 	mov	arg01, #28
27a28     0A 13 02 F1 | 	add	arg01, arg02
27a2c     FD 12 02 F1 | 	add	arg01, result1
27a30     09 FB C1 FA | 	rdbyte	result1, arg01
27a34     13 00 00 FF 
27a38     F8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10232
27a3c                 | _usbnew_spin2_hidpad_hat_ret
27a3c     2D 00 64 FD | 	ret
27a40                 | 
27a40                 | ' 
27a40                 | ' 
27a40                 | ' '--------------------------------------------------------------
27a40                 | ' '---------- Init the variables, start the cog. ----------------
27a40                 | ' '--------------------------------------------------------------
27a40                 | ' 
27a40                 | ' pub start(mbox,scope,cache) :cog,base | iii
27a40                 | _audio096_spin2_start
27a40     04 4A 05 F6 | 	mov	COUNT_, #4
27a44     A8 00 A0 FD | 	call	#pushregs_
27a48     09 27 02 F6 | 	mov	local01, arg01
27a4c                 | ' 
27a4c                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
27a4c                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
27a4c                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
27a4c                 | ' 
27a4c                 | ' mailboxaddr:=mbox 
27a4c     F2 26 62 FC | 	wrlong	local01, objptr
27a50                 | ' scope_ptr:=scope
27a50     04 E4 05 F1 | 	add	objptr, #4
27a54     F2 14 62 FC | 	wrlong	arg02, objptr
27a58                 | ' cache_ptr:=cache
27a58     04 E4 05 F1 | 	add	objptr, #4
27a5c     F2 16 62 FC | 	wrlong	arg03, objptr
27a60                 | ' base:=@channel1[0]
27a60     04 E4 05 F1 | 	add	objptr, #4
27a64     F2 28 02 F6 | 	mov	local02, objptr
27a68                 | ' long[$40]:=mbox
27a68     40 26 66 FC | 	wrlong	local01, #64
27a6c                 | ' repeat iii from 0 to 7
27a6c     00 2A 06 F6 | 	mov	local03, #0
27a70     02 00 00 FF 
27a74     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
27a78     0C E4 85 F1 | 	sub	objptr, #12
27a7c     97 BC 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
27a80                 | LR__3140
27a80                 | '   long[base+64*iii]:=0
27a80     14 27 02 F6 | 	mov	local01, local02
27a84     15 FD 01 F6 | 	mov	result2, local03
27a88     06 FC 65 F0 | 	shl	result2, #6
27a8c     FE 26 02 F1 | 	add	local01, result2
27a90     13 01 68 FC | 	wrlong	#0, local01
27a94                 | '   long[base+64*iii+4]:=0
27a94     14 27 02 F6 | 	mov	local01, local02
27a98     15 FD 01 F6 | 	mov	result2, local03
27a9c     06 FC 65 F0 | 	shl	result2, #6
27aa0     FE 26 02 F1 | 	add	local01, result2
27aa4     04 26 06 F1 | 	add	local01, #4
27aa8     13 01 68 FC | 	wrlong	#0, local01
27aac                 | '   long[base+64*iii+12]:=0
27aac     14 2D 02 F6 | 	mov	local04, local02
27ab0     15 27 02 F6 | 	mov	local01, local03
27ab4     06 26 66 F0 | 	shl	local01, #6
27ab8     13 2D 02 F1 | 	add	local04, local01
27abc     0C 2C 06 F1 | 	add	local04, #12
27ac0     16 01 68 FC | 	wrlong	#0, local04
27ac4                 | '   long[base+64*iii+16]:=2 
27ac4     14 2D 02 F6 | 	mov	local04, local02
27ac8     15 27 02 F6 | 	mov	local01, local03
27acc     06 26 66 F0 | 	shl	local01, #6
27ad0     13 2D 02 F1 | 	add	local04, local01
27ad4     10 2C 06 F1 | 	add	local04, #16
27ad8     16 05 68 FC | 	wrlong	#2, local04
27adc                 | '   word[base+64*iii+20]:=0
27adc     14 2D 02 F6 | 	mov	local04, local02
27ae0     15 27 02 F6 | 	mov	local01, local03
27ae4     06 26 66 F0 | 	shl	local01, #6
27ae8     13 2D 02 F1 | 	add	local04, local01
27aec     14 2C 06 F1 | 	add	local04, #20
27af0     16 01 58 FC | 	wrword	#0, local04
27af4                 | '   word[base+64*iii+22]:=8192
27af4     14 2D 02 F6 | 	mov	local04, local02
27af8     15 27 02 F6 | 	mov	local01, local03
27afc     06 26 66 F0 | 	shl	local01, #6
27b00     13 2D 02 F1 | 	add	local04, local01
27b04     16 2C 06 F1 | 	add	local04, #22
27b08     10 00 80 FF 
27b0c     16 01 58 FC | 	wrword	##8192, local04
27b10                 | '   word[base+64*iii+24]:=4000+2*iii
27b10     15 2D 02 F6 | 	mov	local04, local03
27b14     01 2C 66 F0 | 	shl	local04, #1
27b18     07 00 00 FF 
27b1c     A0 27 06 F6 | 	mov	local01, ##4000
27b20     16 27 02 F1 | 	add	local01, local04
27b24     14 2D 02 F6 | 	mov	local04, local02
27b28     15 FD 01 F6 | 	mov	result2, local03
27b2c     06 FC 65 F0 | 	shl	result2, #6
27b30     FE 2C 02 F1 | 	add	local04, result2
27b34     18 2C 06 F1 | 	add	local04, #24
27b38     16 27 52 FC | 	wrword	local01, local04
27b3c                 | '   word[base+64*iii+26]:=2
27b3c     14 2D 02 F6 | 	mov	local04, local02
27b40     15 27 02 F6 | 	mov	local01, local03
27b44     06 26 66 F0 | 	shl	local01, #6
27b48     13 2D 02 F1 | 	add	local04, local01
27b4c     1A 2C 06 F1 | 	add	local04, #26
27b50     16 05 58 FC | 	wrword	#2, local04
27b54                 | '   long [base+64*iii+8]:=@null | $C0000000
27b54     F4 26 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
27b58     3E 26 26 F4 | 	bith	local01, #62
27b5c     14 2D 02 F6 | 	mov	local04, local02
27b60     15 17 02 F6 | 	mov	arg03, local03
27b64     06 16 66 F0 | 	shl	arg03, #6
27b68     0B 2D 02 F1 | 	add	local04, arg03
27b6c     08 2C 06 F1 | 	add	local04, #8
27b70     16 27 62 FC | 	wrlong	local01, local04
27b74                 | '   long[base+64*iii+32]:=0
27b74     14 2D 02 F6 | 	mov	local04, local02
27b78     15 27 02 F6 | 	mov	local01, local03
27b7c     06 26 66 F0 | 	shl	local01, #6
27b80     13 2D 02 F1 | 	add	local04, local01
27b84     20 2C 06 F1 | 	add	local04, #32
27b88     16 01 68 FC | 	wrlong	#0, local04
27b8c                 | '   long[base+64*iii+36]:=0
27b8c     14 2D 02 F6 | 	mov	local04, local02
27b90     15 27 02 F6 | 	mov	local01, local03
27b94     06 26 66 F0 | 	shl	local01, #6
27b98     13 2D 02 F1 | 	add	local04, local01
27b9c     24 2C 06 F1 | 	add	local04, #36
27ba0     16 01 68 FC | 	wrlong	#0, local04
27ba4                 | '   long[base+64*iii+40]:=0
27ba4     14 2D 02 F6 | 	mov	local04, local02
27ba8     15 27 02 F6 | 	mov	local01, local03
27bac     06 26 66 F0 | 	shl	local01, #6
27bb0     13 2D 02 F1 | 	add	local04, local01
27bb4     28 2C 06 F1 | 	add	local04, #40
27bb8     16 01 68 FC | 	wrlong	#0, local04
27bbc                 | '   long[base+64*iii+44]:=0
27bbc     14 2D 02 F6 | 	mov	local04, local02
27bc0     15 27 02 F6 | 	mov	local01, local03
27bc4     06 26 66 F0 | 	shl	local01, #6
27bc8     13 2D 02 F1 | 	add	local04, local01
27bcc     2C 2C 06 F1 | 	add	local04, #44
27bd0     16 01 68 FC | 	wrlong	#0, local04
27bd4                 | '   long[base+64*iii+28]:=0
27bd4     14 2D 02 F6 | 	mov	local04, local02
27bd8     15 27 02 F6 | 	mov	local01, local03
27bdc     06 26 66 F0 | 	shl	local01, #6
27be0     13 2D 02 F1 | 	add	local04, local01
27be4     1C 2C 06 F1 | 	add	local04, #28
27be8     16 01 68 FC | 	wrlong	#0, local04
27bec     01 2A 06 F1 | 	add	local03, #1
27bf0     08 2A 56 F2 | 	cmps	local03, #8 wc
27bf4     88 FE 9F CD |  if_b	jmp	#LR__3140
27bf8                 | LR__3141
27bf8     02 00 00 FF 
27bfc     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
27c00                 | '   
27c00                 | ' cog:=coginit(16,@audio,@mailboxaddr)
27c00     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
27c04     F2 16 02 F6 | 	mov	arg03, objptr
27c08     10 2C 06 F6 | 	mov	local04, #16
27c0c     28 16 62 FD | 	setq	arg03
27c10     0A 2D F2 FC | 	coginit	local04, arg02 wc
27c14     01 2C 66 C6 |  if_b	neg	local04, #1
27c18                 | ' waitms(100)
27c18     64 12 06 F6 | 	mov	arg01, #100
27c1c     E8 07 B0 FD | 	call	#__system___waitms
27c20                 | ' return cog,base
27c20     14 FD 01 F6 | 	mov	result2, local02
27c24     16 FB 01 F6 | 	mov	result1, local04
27c28     A7 F0 03 F6 | 	mov	ptra, fp
27c2c     B2 00 A0 FD | 	call	#popregs_
27c30                 | _audio096_spin2_start_ret
27c30     2D 00 64 FD | 	ret
27c34                 | 
27c34                 | ' 
27c34                 | ' ' a simple play procedure to not poke everything. 
27c34                 | ' 
27c34                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
27c34                 | _audio096_spin2_play
27c34     0C E4 05 F1 | 	add	objptr, #12
27c38     F2 00 02 F6 | 	mov	_var01, objptr
27c3c     06 12 66 F0 | 	shl	arg01, #6
27c40     09 01 02 F1 | 	add	_var01, arg01
27c44     00 13 02 F6 | 	mov	arg01, _var01
27c48     0C 12 06 F1 | 	add	arg01, #12
27c4c     09 1B 62 FC | 	wrlong	arg05, arg01
27c50     00 1C 56 F2 | 	cmps	arg06, #0 wc
27c54     00 13 02 36 |  if_ae	mov	arg01, _var01
27c58     10 12 06 31 |  if_ae	add	arg01, #16
27c5c     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
27c60     02 1A 06 C1 |  if_b	add	arg05, #2
27c64     00 13 02 C6 |  if_b	mov	arg01, _var01
27c68     10 12 06 C1 |  if_b	add	arg01, #16
27c6c     09 1B 62 CC |  if_b	wrlong	arg05, arg01
27c70     0B 13 52 F6 | 	abs	arg01, arg03 wc
27c74     0F 1B 80 FF 
27c78     09 1F 1A FD | 	qdiv	##3546895, arg01
27c7c                 | ' 
27c7c                 | ' base2:=@channel1[0]+64*channel
27c7c                 | ' 
27c7c                 | ' 
27c7c                 | ' long[base2+12]:= len
27c7c                 | ' if loop >=0 
27c7c                 | '   long[base2+16]:= loop
27c7c     0C E4 85 F1 | 	sub	objptr, #12
27c80                 | ' else
27c80                 | '   long[base2+16]:= len+2
27c80                 | ' word[base2+20]:=vol
27c80     00 13 02 F6 | 	mov	arg01, _var01
27c84     14 12 06 F1 | 	add	arg01, #20
27c88     09 19 52 FC | 	wrword	arg04, arg01
27c8c                 | ' word[base2+24]:= 3546895/splfreq 
27c8c     00 19 02 F6 | 	mov	arg04, _var01
27c90     18 18 06 F1 | 	add	arg04, #24
27c94                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
27c94                 | ' long[base2+28]:=$40000000    
27c94                 | ' long[base2+32]:=0    
27c94                 | ' long[base2+36]:=0    
27c94                 | ' long[base2+40]:=0    
27c94                 | ' long[base2+44]:=0    
27c94                 | ' long[base2+8]:=sample+$C0000000     
27c94     00 00 60 FF 
27c98     00 14 06 F1 | 	add	arg02, ##-1073741824
27c9c     18 12 62 FD | 	getqx	arg01
27ca0     09 13 82 F6 | 	negc	arg01, arg01
27ca4     0C 13 52 FC | 	wrword	arg01, arg04
27ca8     00 13 02 F6 | 	mov	arg01, _var01
27cac     1A 12 06 F1 | 	add	arg01, #26
27cb0     09 01 5A FC | 	wrword	#256, arg01
27cb4     00 13 02 F6 | 	mov	arg01, _var01
27cb8     1C 12 06 F1 | 	add	arg01, #28
27cbc     00 00 A0 FF 
27cc0     09 01 68 FC | 	wrlong	##1073741824, arg01
27cc4     00 13 02 F6 | 	mov	arg01, _var01
27cc8     20 12 06 F1 | 	add	arg01, #32
27ccc     09 01 68 FC | 	wrlong	#0, arg01
27cd0     00 13 02 F6 | 	mov	arg01, _var01
27cd4     24 12 06 F1 | 	add	arg01, #36
27cd8     09 01 68 FC | 	wrlong	#0, arg01
27cdc     00 13 02 F6 | 	mov	arg01, _var01
27ce0     28 12 06 F1 | 	add	arg01, #40
27ce4     09 01 68 FC | 	wrlong	#0, arg01
27ce8     00 13 02 F6 | 	mov	arg01, _var01
27cec     2C 12 06 F1 | 	add	arg01, #44
27cf0     09 01 68 FC | 	wrlong	#0, arg01
27cf4     08 00 06 F1 | 	add	_var01, #8
27cf8     00 15 62 FC | 	wrlong	arg02, _var01
27cfc                 | _audio096_spin2_play_ret
27cfc     2D 00 64 FD | 	ret
27d00                 | 
27d00                 | ' 
27d00                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
27d00                 | _audio096_spin2_play8
27d00                 | ' 
27d00                 | ' base2:=@channel1[0]+64*channel
27d00     0C E4 05 F1 | 	add	objptr, #12
27d04     F2 00 02 F6 | 	mov	_var01, objptr
27d08     06 12 66 F0 | 	shl	arg01, #6
27d0c     09 01 02 F1 | 	add	_var01, arg01
27d10                 | ' long[base2]:=0
27d10     00 01 68 FC | 	wrlong	#0, _var01
27d14                 | ' long[base2+8]:=sample+$40000000 
27d14     00 00 20 FF 
27d18     00 14 06 F1 | 	add	arg02, ##1073741824
27d1c     00 13 02 F6 | 	mov	arg01, _var01
27d20     08 12 06 F1 | 	add	arg01, #8
27d24     09 15 62 FC | 	wrlong	arg02, arg01
27d28                 | ' if loop>=0
27d28     00 1C 56 F2 | 	cmps	arg06, #0 wc
27d2c     0C E4 85 F1 | 	sub	objptr, #12
27d30     1C 00 90 CD |  if_b	jmp	#LR__3150
27d34                 | '   long[base2+12]:=loop
27d34     00 15 02 F6 | 	mov	arg02, _var01
27d38     0C 14 06 F1 | 	add	arg02, #12
27d3c     0A 1D 62 FC | 	wrlong	arg06, arg02
27d40                 | '   long[base2+16]:= len
27d40     00 1D 02 F6 | 	mov	arg06, _var01
27d44     10 1C 06 F1 | 	add	arg06, #16
27d48     0E 1B 62 FC | 	wrlong	arg05, arg06
27d4c     1C 00 90 FD | 	jmp	#LR__3151
27d50                 | LR__3150
27d50                 | ' else
27d50                 | '   long[base2+12]:= len
27d50     00 1D 02 F6 | 	mov	arg06, _var01
27d54     0C 1C 06 F1 | 	add	arg06, #12
27d58     0E 1B 62 FC | 	wrlong	arg05, arg06
27d5c                 | '   long[base2+16]:= len+1
27d5c     01 1A 06 F1 | 	add	arg05, #1
27d60     00 13 02 F6 | 	mov	arg01, _var01
27d64     10 12 06 F1 | 	add	arg01, #16
27d68     09 1B 62 FC | 	wrlong	arg05, arg01
27d6c                 | LR__3151
27d6c     0B 17 52 F6 | 	abs	arg03, arg03 wc
27d70     0F 1B 80 FF 
27d74     0B 1F 1A FD | 	qdiv	##3546895, arg03
27d78                 | ' word[base2+20]:=vol
27d78     00 17 02 F6 | 	mov	arg03, _var01
27d7c     14 16 06 F1 | 	add	arg03, #20
27d80     0B 19 52 FC | 	wrword	arg04, arg03
27d84                 | ' word[base2+24]:= 3546895 /splfreq 
27d84     00 13 02 F6 | 	mov	arg01, _var01
27d88     18 12 06 F1 | 	add	arg01, #24
27d8c                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
27d8c     1A 00 06 F1 | 	add	_var01, #26
27d90     18 18 62 FD | 	getqx	arg04
27d94     0C 19 82 F6 | 	negc	arg04, arg04
27d98     09 19 52 FC | 	wrword	arg04, arg01
27d9c     00 01 5A FC | 	wrword	#256, _var01
27da0                 | _audio096_spin2_play8_ret
27da0     2D 00 64 FD | 	ret
27da4                 | 
27da4                 | ' 'long[base2+28]:=$40000000
27da4                 | ' 
27da4                 | '     
27da4                 | ' pub stop(channel) 'silence it
27da4                 | _audio096_spin2_stop
27da4                 | ' 
27da4                 | ' word[@channel1[0]+64*channel+20]:=0
27da4     0C E4 05 F1 | 	add	objptr, #12
27da8     F2 00 02 F6 | 	mov	_var01, objptr
27dac     09 03 02 F6 | 	mov	_var02, arg01
27db0     06 02 66 F0 | 	shl	_var02, #6
27db4     01 01 02 F1 | 	add	_var01, _var02
27db8     14 00 06 F1 | 	add	_var01, #20
27dbc     00 01 58 FC | 	wrword	#0, _var01
27dc0                 | ' word[@channel1[0]+64*channel+20]:=0
27dc0     F2 00 02 F6 | 	mov	_var01, objptr
27dc4     06 12 66 F0 | 	shl	arg01, #6
27dc8     09 01 02 F1 | 	add	_var01, arg01
27dcc     14 00 06 F1 | 	add	_var01, #20
27dd0     00 01 58 FC | 	wrword	#0, _var01
27dd4     0C E4 85 F1 | 	sub	objptr, #12
27dd8                 | _audio096_spin2_stop_ret
27dd8     2D 00 64 FD | 	ret
27ddc                 | hubexit
27ddc     81 00 80 FD | 	jmp	#cogexit
27de0                 | 
27de0                 | __system___setbaud
27de0     14 90 06 FB | 	rdlong	muldiva_, #20
27de4     09 93 02 F6 | 	mov	muldivb_, arg01
27de8     BA 00 A0 FD | 	call	#divide_
27dec     97 06 48 FB | 	callpa	#(@LR__3161-@LR__3160)>>2,fcache_load_ptr_
27df0                 | LR__3160
27df0     3E FA 9D FA | 	rdpin	result1, #62 wc
27df4     FE FC A1 F1 | 	subx	result2, result2
27df8     F4 FF 9F CD |  if_b	jmp	#LR__3160
27dfc                 | LR__3161
27dfc     40 7C 64 FD | 	dirl	#62
27e00     40 7E 64 FD | 	dirl	#63
27e04     F3 92 62 FC | 	wrlong	muldivb_, ptr___system__dat__
27e08     10 92 66 F0 | 	shl	muldivb_, #16
27e0c     07 14 06 F6 | 	mov	arg02, #7
27e10     49 15 02 F1 | 	add	arg02, muldivb_
27e14     3E F8 0C FC | 	wrpin	#124, #62
27e18     3E 14 16 FC | 	wxpin	arg02, #62
27e1c     3F 7C 0C FC | 	wrpin	#62, #63
27e20     14 14 06 F1 | 	add	arg02, #20
27e24     3F 14 16 FC | 	wxpin	arg02, #63
27e28     41 7C 64 FD | 	dirh	#62
27e2c     41 7E 64 FD | 	dirh	#63
27e30                 | __system___setbaud_ret
27e30     2D 00 64 FD | 	ret
27e34                 | 
27e34                 | __system___txraw
27e34     01 4A 05 F6 | 	mov	COUNT_, #1
27e38     A8 00 A0 FD | 	call	#pushregs_
27e3c     09 27 02 F6 | 	mov	local01, arg01
27e40     97 06 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
27e44                 | LR__3170
27e44     3E FA 9D FA | 	rdpin	result1, #62 wc
27e48     FE FC A1 F1 | 	subx	result2, result2
27e4c     F4 FF 9F CD |  if_b	jmp	#LR__3170
27e50                 | LR__3171
27e50     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
27e54     C2 01 00 AF 
27e58     00 12 06 A6 |  if_e	mov	arg01, ##230400
27e5c     80 FF BF AD |  if_e	call	#__system___setbaud
27e60     58 7C 64 FD | 	drvl	#62
27e64     3E 26 26 FC | 	wypin	local01, #62
27e68     01 FA 05 F6 | 	mov	result1, #1
27e6c     A7 F0 03 F6 | 	mov	ptra, fp
27e70     B2 00 A0 FD | 	call	#popregs_
27e74                 | __system___txraw_ret
27e74     2D 00 64 FD | 	ret
27e78                 | 
27e78                 | __system___rxraw
27e78     0D 4A 05 F6 | 	mov	COUNT_, #13
27e7c     A8 00 A0 FD | 	call	#pushregs_
27e80     09 27 02 F6 | 	mov	local01, arg01
27e84     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
27e88     C2 01 00 AF 
27e8c     00 12 06 A6 |  if_e	mov	arg01, ##230400
27e90     4C FF BF AD |  if_e	call	#__system___setbaud
27e94     00 26 0E F2 | 	cmp	local01, #0 wz
27e98     20 00 90 AD |  if_e	jmp	#LR__3180
27e9c     14 2A 06 FB | 	rdlong	local03, #20
27ea0     0A 2A 46 F0 | 	shr	local03, #10
27ea4     15 27 02 FD | 	qmul	local01, local03
27ea8     1A FA 61 FD | 	getct	result1
27eac     18 2C 62 FD | 	getqx	local04
27eb0     16 FB 01 F1 | 	add	result1, local04
27eb4     FD 2E 02 F6 | 	mov	local05, result1
27eb8     04 00 90 FD | 	jmp	#LR__3181
27ebc                 | LR__3180
27ebc     00 2E 06 F6 | 	mov	local05, #0
27ec0                 | LR__3181
27ec0     01 30 66 F6 | 	neg	local06, #1
27ec4     3F 32 06 F6 | 	mov	local07, #63
27ec8     00 34 06 F6 | 	mov	local08, #0
27ecc     04 E6 05 F1 | 	add	ptr___system__dat__, #4
27ed0     F3 36 02 FB | 	rdlong	local09, ptr___system__dat__
27ed4     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
27ed8                 | LR__3182
27ed8     08 36 16 F4 | 	testb	local09, #8 wc
27edc     09 36 76 F4 | 	testbn	local09, #9 andc
27ee0     0A 36 46 F0 | 	shr	local09, #10
27ee4     01 34 06 C6 |  if_b	mov	local08, #1
27ee8     40 7E 6C 3D |  if_ae	testp	#63 wz
27eec     01 34 06 26 |  if_nc_and_z	mov	local08, #1
27ef0     3F 36 8E 2A |  if_nc_and_z	rdpin	local09, #63
27ef4     04 36 46 20 |  if_nc_and_z	shr	local09, #4
27ef8                 | LR__3183
27ef8     00 28 06 F6 | 	mov	local02, #0
27efc     00 34 0E F2 | 	cmp	local08, #0 wz
27f00     01 28 66 56 |  if_ne	neg	local02, #1
27f04     00 38 06 F6 | 	mov	local10, #0
27f08     00 2A 06 F6 | 	mov	local03, #0
27f0c     00 26 0E F2 | 	cmp	local01, #0 wz
27f10     01 2A 66 56 |  if_ne	neg	local03, #1
27f14     00 2C 06 F6 | 	mov	local04, #0
27f18     00 3A 06 F6 | 	mov	local11, #0
27f1c     17 3D 02 F6 | 	mov	local12, local05
27f20     1A FA 61 FD | 	getct	result1
27f24     FD 3E 02 F6 | 	mov	local13, result1
27f28     1F 3D 82 F1 | 	sub	local12, local13
27f2c     00 3C 56 F2 | 	cmps	local12, #0 wc
27f30     00 3A 26 C6 |  if_b	not	local11, #0
27f34     00 3A 0E F2 | 	cmp	local11, #0 wz
27f38     00 2C 26 56 |  if_ne	not	local04, #0
27f3c     16 2B CA F7 | 	test	local03, local04 wz
27f40     00 38 26 56 |  if_ne	not	local10, #0
27f44     1C 29 4A F5 | 	or	local02, local10 wz
27f48     8C FF 9F AD |  if_e	jmp	#LR__3182
27f4c     00 34 0E F2 | 	cmp	local08, #0 wz
27f50     1B 31 02 56 |  if_ne	mov	local06, local09
27f54     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
27f58     04 E6 05 F1 | 	add	ptr___system__dat__, #4
27f5c     F3 36 62 FC | 	wrlong	local09, ptr___system__dat__
27f60     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
27f64     18 FB 01 F6 | 	mov	result1, local06
27f68     A7 F0 03 F6 | 	mov	ptra, fp
27f6c     B2 00 A0 FD | 	call	#popregs_
27f70                 | __system___rxraw_ret
27f70     2D 00 64 FD | 	ret
27f74                 | 
27f74                 | __system___getus
27f74     1A FC 71 FD | 	getct	result2 wc
27f78     1A 00 62 FD | 	getct	_var01
27f7c     10 E6 05 F1 | 	add	ptr___system__dat__, #16
27f80     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
27f84     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
27f88     20 00 90 5D |  if_ne	jmp	#LR__3190
27f8c     14 02 06 FB | 	rdlong	_var02, #20
27f90     A1 07 00 FF 
27f94     40 02 16 FD | 	qdiv	_var02, ##1000000
27f98     10 E6 05 F1 | 	add	ptr___system__dat__, #16
27f9c     18 FA 61 FD | 	getqx	result1
27fa0     FD 02 02 F6 | 	mov	_var02, result1
27fa4     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
27fa8     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
27fac                 | LR__3190
27fac     01 FD 11 FD | 	qdiv	result2, _var02
27fb0     19 FC 61 FD | 	getqy	result2
27fb4     28 FC 61 FD | 	setq	result2
27fb8     01 01 12 FD | 	qdiv	_var01, _var02
27fbc     18 FA 61 FD | 	getqx	result1
27fc0                 | __system___getus_ret
27fc0     2D 00 64 FD | 	ret
27fc4                 | 
27fc4                 | __system____builtin_memmove
27fc4     09 01 02 F6 | 	mov	_var01, arg01
27fc8     0A 13 52 F2 | 	cmps	arg01, arg02 wc
27fcc     10 00 90 CD |  if_b	jmp	#LR__3200
27fd0     0A 03 02 F6 | 	mov	_var02, arg02
27fd4     0B 03 02 F1 | 	add	_var02, arg03
27fd8     01 13 52 F2 | 	cmps	arg01, _var02 wc
27fdc     48 00 90 CD |  if_b	jmp	#LR__3206
27fe0                 | LR__3200
27fe0     0B 05 02 F6 | 	mov	_var03, arg03
27fe4     02 04 4E F0 | 	shr	_var03, #2 wz
27fe8     18 00 90 AD |  if_e	jmp	#LR__3205
27fec     97 0A 48 FB | 	callpa	#(@LR__3203-@LR__3201)>>2,fcache_load_ptr_
27ff0                 | LR__3201
27ff0     02 09 D8 FC | 	rep	@LR__3204, _var03
27ff4                 | LR__3202
27ff4     0A 05 02 FB | 	rdlong	_var03, arg02
27ff8     09 05 62 FC | 	wrlong	_var03, arg01
27ffc     04 12 06 F1 | 	add	arg01, #4
28000     04 14 06 F1 | 	add	arg02, #4
28004                 | LR__3203
28004                 | LR__3204
28004                 | LR__3205
28004     02 16 CE F7 | 	test	arg03, #2 wz
28008     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
2800c     09 03 52 5C |  if_ne	wrword	_var02, arg01
28010     02 12 06 51 |  if_ne	add	arg01, #2
28014     02 14 06 51 |  if_ne	add	arg02, #2
28018     01 16 CE F7 | 	test	arg03, #1 wz
2801c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
28020     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
28024     28 00 90 FD | 	jmp	#LR__3212
28028                 | LR__3206
28028     0B 13 02 F1 | 	add	arg01, arg03
2802c     0B 15 02 F1 | 	add	arg02, arg03
28030     0B 07 0A F6 | 	mov	_var04, arg03 wz
28034     18 00 90 AD |  if_e	jmp	#LR__3211
28038     97 0A 48 FB | 	callpa	#(@LR__3209-@LR__3207)>>2,fcache_load_ptr_
2803c                 | LR__3207
2803c     03 09 D8 FC | 	rep	@LR__3210, _var04
28040                 | LR__3208
28040     01 12 86 F1 | 	sub	arg01, #1
28044     01 14 86 F1 | 	sub	arg02, #1
28048     0A 03 C2 FA | 	rdbyte	_var02, arg02
2804c     09 03 42 FC | 	wrbyte	_var02, arg01
28050                 | LR__3209
28050                 | LR__3210
28050                 | LR__3211
28050                 | LR__3212
28050     00 FB 01 F6 | 	mov	result1, _var01
28054                 | __system____builtin_memmove_ret
28054     2D 00 64 FD | 	ret
28058                 | 
28058                 | __system__longmove
28058     09 01 02 F6 | 	mov	_var01, arg01
2805c     0A 13 52 F2 | 	cmps	arg01, arg02 wc
28060     24 00 90 3D |  if_ae	jmp	#LR__3224
28064     0B 03 0A F6 | 	mov	_var02, arg03 wz
28068     54 00 90 AD |  if_e	jmp	#LR__3230
2806c     97 0A 48 FB | 	callpa	#(@LR__3222-@LR__3220)>>2,fcache_load_ptr_
28070                 | LR__3220
28070     01 09 D8 FC | 	rep	@LR__3223, _var02
28074                 | LR__3221
28074     0A 03 02 FB | 	rdlong	_var02, arg02
28078     09 03 62 FC | 	wrlong	_var02, arg01
2807c     04 12 06 F1 | 	add	arg01, #4
28080     04 14 06 F1 | 	add	arg02, #4
28084                 | LR__3222
28084                 | LR__3223
28084     38 00 90 FD | 	jmp	#LR__3230
28088                 | LR__3224
28088     0B 03 02 F6 | 	mov	_var02, arg03
2808c     02 02 66 F0 | 	shl	_var02, #2
28090     01 13 02 F1 | 	add	arg01, _var02
28094     0B 05 02 F6 | 	mov	_var03, arg03
28098     02 04 66 F0 | 	shl	_var03, #2
2809c     02 15 02 F1 | 	add	arg02, _var03
280a0     0B 07 0A F6 | 	mov	_var04, arg03 wz
280a4     18 00 90 AD |  if_e	jmp	#LR__3229
280a8     97 0A 48 FB | 	callpa	#(@LR__3227-@LR__3225)>>2,fcache_load_ptr_
280ac                 | LR__3225
280ac     03 09 D8 FC | 	rep	@LR__3228, _var04
280b0                 | LR__3226
280b0     04 12 86 F1 | 	sub	arg01, #4
280b4     04 14 86 F1 | 	sub	arg02, #4
280b8     0A 07 02 FB | 	rdlong	_var04, arg02
280bc     09 07 62 FC | 	wrlong	_var04, arg01
280c0                 | LR__3227
280c0                 | LR__3228
280c0                 | LR__3229
280c0                 | LR__3230
280c0     00 FB 01 F6 | 	mov	result1, _var01
280c4                 | __system__longmove_ret
280c4     2D 00 64 FD | 	ret
280c8                 | 
280c8                 | __system____builtin_strcpy
280c8     09 01 02 F6 | 	mov	_var01, arg01
280cc     97 0A 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
280d0                 | LR__3240
280d0     0A FB C9 FA | 	rdbyte	result1, arg02 wz
280d4     09 FB 41 FC | 	wrbyte	result1, arg01
280d8     01 14 06 F1 | 	add	arg02, #1
280dc     01 12 06 F1 | 	add	arg01, #1
280e0     EC FF 9F 5D |  if_ne	jmp	#LR__3240
280e4                 | LR__3241
280e4     00 FB 01 F6 | 	mov	result1, _var01
280e8                 | __system____builtin_strcpy_ret
280e8     2D 00 64 FD | 	ret
280ec                 | 
280ec                 | __system____topofstack
280ec     00 4A 05 F6 | 	mov	COUNT_, #0
280f0     A8 00 A0 FD | 	call	#pushregs_
280f4     08 F0 07 F1 | 	add	ptra, #8
280f8     04 4E 05 F1 | 	add	fp, #4
280fc     A7 12 62 FC | 	wrlong	arg01, fp
28100     A7 FA 01 F6 | 	mov	result1, fp
28104     04 4E 85 F1 | 	sub	fp, #4
28108     A7 F0 03 F6 | 	mov	ptra, fp
2810c     B2 00 A0 FD | 	call	#popregs_
28110                 | __system____topofstack_ret
28110     2D 00 64 FD | 	ret
28114                 | 
28114                 | __system___lockmem
28114     00 FA 05 F6 | 	mov	result1, #0
28118     01 FA 61 FD | 	cogid	result1
2811c     00 FB 05 F1 | 	add	result1, #256
28120                 | LR__3250
28120     09 01 0A FB | 	rdlong	_var01, arg01 wz
28124     09 FB 61 AC |  if_e	wrlong	result1, arg01
28128     09 01 02 AB |  if_e	rdlong	_var01, arg01
2812c     09 01 02 AB |  if_e	rdlong	_var01, arg01
28130     FD 00 0A F2 | 	cmp	_var01, result1 wz
28134     E8 FF 9F 5D |  if_ne	jmp	#LR__3250
28138                 | __system___lockmem_ret
28138     2D 00 64 FD | 	ret
2813c                 | 
2813c                 | __system___string_cmp
2813c     97 14 48 FB | 	callpa	#(@LR__3261-@LR__3260)>>2,fcache_load_ptr_
28140                 | LR__3260
28140     09 01 C2 FA | 	rdbyte	_var01, arg01
28144     0A 03 C2 FA | 	rdbyte	_var02, arg02
28148     00 05 02 F6 | 	mov	_var03, _var01
2814c     01 05 8A F1 | 	sub	_var03, _var02 wz
28150     01 12 06 F1 | 	add	arg01, #1
28154     01 14 06 F1 | 	add	arg02, #1
28158     0C 00 90 5D |  if_ne	jmp	#LR__3262
2815c     00 00 0E F2 | 	cmp	_var01, #0 wz
28160     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
28164     D8 FF 9F 5D |  if_ne	jmp	#LR__3260
28168                 | LR__3261
28168                 | LR__3262
28168     02 FB 01 F6 | 	mov	result1, _var03
2816c                 | __system___string_cmp_ret
2816c     2D 00 64 FD | 	ret
28170                 | 
28170                 | __system___string_concat
28170     05 4A 05 F6 | 	mov	COUNT_, #5
28174     A8 00 A0 FD | 	call	#pushregs_
28178     09 27 02 F6 | 	mov	local01, arg01
2817c     0A 29 02 F6 | 	mov	local02, arg02
28180     13 13 02 F6 | 	mov	arg01, local01
28184     09 2B 02 F6 | 	mov	local03, arg01
28188     97 06 48 FB | 	callpa	#(@LR__3271-@LR__3270)>>2,fcache_load_ptr_
2818c                 | LR__3270
2818c     15 FB C9 FA | 	rdbyte	result1, local03 wz
28190     01 2A 06 51 |  if_ne	add	local03, #1
28194     F4 FF 9F 5D |  if_ne	jmp	#LR__3270
28198                 | LR__3271
28198     09 2B 82 F1 | 	sub	local03, arg01
2819c     15 2D 02 F6 | 	mov	local04, local03
281a0     14 13 02 F6 | 	mov	arg01, local02
281a4     09 2B 02 F6 | 	mov	local03, arg01
281a8     97 06 48 FB | 	callpa	#(@LR__3273-@LR__3272)>>2,fcache_load_ptr_
281ac                 | LR__3272
281ac     15 FB C9 FA | 	rdbyte	result1, local03 wz
281b0     01 2A 06 51 |  if_ne	add	local03, #1
281b4     F4 FF 9F 5D |  if_ne	jmp	#LR__3272
281b8                 | LR__3273
281b8     09 2B 82 F1 | 	sub	local03, arg01
281bc     16 13 02 F6 | 	mov	arg01, local04
281c0     15 13 02 F1 | 	add	arg01, local03
281c4     01 12 06 F1 | 	add	arg01, #1
281c8     F0 40 B0 FD | 	call	#__system___gc_alloc_managed
281cc     FD 2E 0A F6 | 	mov	local05, result1 wz
281d0     28 00 90 AD |  if_e	jmp	#LR__3274
281d4     17 13 02 F6 | 	mov	arg01, local05
281d8     13 15 02 F6 | 	mov	arg02, local01
281dc     16 17 02 F6 | 	mov	arg03, local04
281e0     E0 FD BF FD | 	call	#__system____builtin_memmove
281e4     17 13 02 F6 | 	mov	arg01, local05
281e8     16 13 02 F1 | 	add	arg01, local04
281ec     01 2A 06 F1 | 	add	local03, #1
281f0     14 15 02 F6 | 	mov	arg02, local02
281f4     15 17 02 F6 | 	mov	arg03, local03
281f8     C8 FD BF FD | 	call	#__system____builtin_memmove
281fc                 | LR__3274
281fc     17 FB 01 F6 | 	mov	result1, local05
28200     A7 F0 03 F6 | 	mov	ptra, fp
28204     B2 00 A0 FD | 	call	#popregs_
28208                 | __system___string_concat_ret
28208     2D 00 64 FD | 	ret
2820c                 | 
2820c                 | __system___tx
2820c     02 4A 05 F6 | 	mov	COUNT_, #2
28210     A8 00 A0 FD | 	call	#pushregs_
28214     09 27 02 F6 | 	mov	local01, arg01
28218     0A 26 0E F2 | 	cmp	local01, #10 wz
2821c     18 00 90 5D |  if_ne	jmp	#LR__3280
28220     08 E6 05 F1 | 	add	ptr___system__dat__, #8
28224     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
28228     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2822c     02 28 CE F7 | 	test	local02, #2 wz
28230     0D 12 06 56 |  if_ne	mov	arg01, #13
28234     FC FB BF 5D |  if_ne	call	#__system___txraw
28238                 | LR__3280
28238     13 13 02 F6 | 	mov	arg01, local01
2823c     F4 FB BF FD | 	call	#__system___txraw
28240     A7 F0 03 F6 | 	mov	ptra, fp
28244     B2 00 A0 FD | 	call	#popregs_
28248                 | __system___tx_ret
28248     2D 00 64 FD | 	ret
2824c                 | 
2824c                 | __system___rx
2824c     01 4A 05 F6 | 	mov	COUNT_, #1
28250     A8 00 A0 FD | 	call	#pushregs_
28254                 | LR__3290
28254     00 12 06 F6 | 	mov	arg01, #0
28258     1C FC BF FD | 	call	#__system___rxraw
2825c     FD 26 02 F6 | 	mov	local01, result1
28260     FF FF 7F FF 
28264     FF 27 0E F2 | 	cmp	local01, ##-1 wz
28268     E8 FF 9F AD |  if_e	jmp	#LR__3290
2826c     0D 26 0E F2 | 	cmp	local01, #13 wz
28270     14 00 90 5D |  if_ne	jmp	#LR__3291
28274     08 E6 05 F1 | 	add	ptr___system__dat__, #8
28278     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2827c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
28280     02 FA CD F7 | 	test	result1, #2 wz
28284     0A 26 06 56 |  if_ne	mov	local01, #10
28288                 | LR__3291
28288     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2828c     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
28290     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
28294     01 12 CE F7 | 	test	arg01, #1 wz
28298     1C 00 90 AD |  if_e	jmp	#LR__3294
2829c     7F 26 0E F2 | 	cmp	local01, #127 wz
282a0     0C 00 90 5D |  if_ne	jmp	#LR__3292
282a4     08 12 06 F6 | 	mov	arg01, #8
282a8     60 FF BF FD | 	call	#__system___tx
282ac     08 00 90 FD | 	jmp	#LR__3293
282b0                 | LR__3292
282b0     13 13 02 F6 | 	mov	arg01, local01
282b4     54 FF BF FD | 	call	#__system___tx
282b8                 | LR__3293
282b8                 | LR__3294
282b8     13 FB 01 F6 | 	mov	result1, local01
282bc     A7 F0 03 F6 | 	mov	ptra, fp
282c0     B2 00 A0 FD | 	call	#popregs_
282c4                 | __system___rx_ret
282c4     2D 00 64 FD | 	ret
282c8                 | 
282c8                 | __system___pinwrite
282c8     09 01 02 F6 | 	mov	_var01, arg01
282cc     1F 00 06 F5 | 	and	_var01, #31
282d0     20 12 CE F7 | 	test	arg01, #32 wz
282d4     06 12 46 F0 | 	shr	arg01, #6
282d8     09 13 CA F9 | 	bmask	arg01, arg01
282dc     00 13 62 F0 | 	shl	arg01, _var01
282e0     00 15 62 F0 | 	shl	arg02, _var01
282e4     1C 00 90 AD |  if_e	jmp	#LR__3300
282e8     09 F7 43 F5 | 	or	dirb, arg01
282ec     FD 01 02 F6 | 	mov	_var01, outb
282f0     09 01 22 F5 | 	andn	_var01, arg01
282f4     09 15 02 F5 | 	and	arg02, arg01
282f8     0A 01 42 F5 | 	or	_var01, arg02
282fc     00 FB 03 F6 | 	mov	outb, _var01
28300     18 00 90 FD | 	jmp	#LR__3301
28304                 | LR__3300
28304     09 F5 43 F5 | 	or	dira, arg01
28308     FC 01 02 F6 | 	mov	_var01, outa
2830c     09 01 22 F5 | 	andn	_var01, arg01
28310     09 15 02 F5 | 	and	arg02, arg01
28314     0A 01 42 F5 | 	or	_var01, arg02
28318     00 F9 03 F6 | 	mov	outa, _var01
2831c                 | LR__3301
2831c                 | __system___pinwrite_ret
2831c     2D 00 64 FD | 	ret
28320                 | 
28320                 | __system___basic_read_line
28320     06 4A 05 F6 | 	mov	COUNT_, #6
28324     A8 00 A0 FD | 	call	#pushregs_
28328     09 27 02 F6 | 	mov	local01, arg01
2832c     00 28 06 F6 | 	mov	local02, #0
28330     18 2A 06 F6 | 	mov	local03, #24
28334     00 2C 06 F6 | 	mov	local04, #0
28338     18 12 06 F6 | 	mov	arg01, #24
2833c     7C 3F B0 FD | 	call	#__system___gc_alloc_managed
28340     FD 2E 0A F6 | 	mov	local05, result1 wz
28344     17 FB 01 A6 |  if_e	mov	result1, local05
28348     B0 00 90 AD |  if_e	jmp	#LR__3313
2834c                 | LR__3310
2834c     13 13 02 F6 | 	mov	arg01, local01
28350     7C 0B B0 FD | 	call	#__system___basic_get_char
28354     FD 30 02 F6 | 	mov	local06, result1
28358     01 30 56 F2 | 	cmps	local06, #1 wc
2835c     8C 00 90 CD |  if_b	jmp	#LR__3312
28360     0A 30 0E F2 | 	cmp	local06, #10 wz
28364     10 00 90 5D |  if_ne	jmp	#LR__3311
28368     00 2C 0E F2 | 	cmp	local04, #0 wz
2836c     01 28 56 52 |  if_ne	cmps	local02, #1 wc
28370     01 28 86 11 |  if_a	sub	local02, #1
28374     74 00 90 FD | 	jmp	#LR__3312
28378                 | LR__3311
28378     0D 30 0E F2 | 	cmp	local06, #13 wz
2837c     01 2C 06 A6 |  if_e	mov	local04, #1
28380     00 2C 06 56 |  if_ne	mov	local04, #0
28384     08 30 0E F2 | 	cmp	local06, #8 wz
28388     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
2838c     01 28 56 A2 |  if_e	cmps	local02, #1 wc
28390     01 28 86 21 |  if_nc_and_z	sub	local02, #1
28394     B4 FF 9F AD |  if_e	jmp	#LR__3310
28398     17 17 02 F6 | 	mov	arg03, local05
2839c     14 17 02 F1 | 	add	arg03, local02
283a0     0B 31 42 FC | 	wrbyte	local06, arg03
283a4     01 28 06 F1 | 	add	local02, #1
283a8     15 29 0A F2 | 	cmp	local02, local03 wz
283ac     9C FF 9F 5D |  if_ne	jmp	#LR__3310
283b0     15 13 02 F6 | 	mov	arg01, local03
283b4     20 12 06 F1 | 	add	arg01, #32
283b8     00 3F B0 FD | 	call	#__system___gc_alloc_managed
283bc     FD 30 0A F6 | 	mov	local06, result1 wz
283c0     18 FB 01 A6 |  if_e	mov	result1, local06
283c4     34 00 90 AD |  if_e	jmp	#LR__3313
283c8     18 13 02 F6 | 	mov	arg01, local06
283cc     17 15 02 F6 | 	mov	arg02, local05
283d0     15 17 02 F6 | 	mov	arg03, local03
283d4     EC FB BF FD | 	call	#__system____builtin_memmove
283d8     20 2A 06 F1 | 	add	local03, #32
283dc     17 13 02 F6 | 	mov	arg01, local05
283e0     14 40 B0 FD | 	call	#__system___gc_free
283e4     18 2F 02 F6 | 	mov	local05, local06
283e8     60 FF 9F FD | 	jmp	#LR__3310
283ec                 | LR__3312
283ec     17 31 02 F6 | 	mov	local06, local05
283f0     14 31 02 F1 | 	add	local06, local02
283f4     18 01 48 FC | 	wrbyte	#0, local06
283f8     17 FB 01 F6 | 	mov	result1, local05
283fc                 | LR__3313
283fc     A7 F0 03 F6 | 	mov	ptra, fp
28400     B2 00 A0 FD | 	call	#popregs_
28404                 | __system___basic_read_line_ret
28404     2D 00 64 FD | 	ret
28408                 | 
28408                 | __system___waitms
28408     09 01 02 F6 | 	mov	_var01, arg01
2840c     1A 02 62 FD | 	getct	_var02
28410     14 04 06 FB | 	rdlong	_var03, #20
28414     97 14 48 FB | 	callpa	#(@LR__3321-@LR__3320)>>2,fcache_load_ptr_
28418                 | LR__3320
28418     01 00 00 FF 
2841c     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
28420     1C 00 90 CD |  if_b	jmp	#LR__3322
28424     02 03 02 F1 | 	add	_var02, _var03
28428     01 13 02 F6 | 	mov	arg01, _var02
2842c     00 12 66 FA | 	addct1	arg01, #0
28430     24 22 60 FD | 	waitct1
28434     01 00 00 FF 
28438     E8 01 86 F1 | 	sub	_var01, ##1000
2843c     D8 FF 9F FD | 	jmp	#LR__3320
28440                 | LR__3321
28440                 | LR__3322
28440     01 00 56 F2 | 	cmps	_var01, #1 wc
28444     28 00 90 CD |  if_b	jmp	#LR__3323
28448     02 01 02 FD | 	qmul	_var01, _var03
2844c     01 00 00 FF 
28450     E8 17 06 F6 | 	mov	arg03, ##1000
28454     19 FA 61 FD | 	getqy	result1
28458     18 12 62 FD | 	getqx	arg01
2845c     28 FA 61 FD | 	setq	result1
28460     0B 13 12 FD | 	qdiv	arg01, arg03
28464     18 12 62 FD | 	getqx	arg01
28468     01 13 62 FA | 	addct1	arg01, _var02
2846c     24 22 60 FD | 	waitct1
28470                 | LR__3323
28470                 | __system___waitms_ret
28470     2D 00 64 FD | 	ret
28474                 | 
28474                 | __system___waitus
28474     09 01 02 F6 | 	mov	_var01, arg01
28478     1A 02 62 FD | 	getct	_var02
2847c     14 04 06 FB | 	rdlong	_var03, #20
28480     97 14 48 FB | 	callpa	#(@LR__3331-@LR__3330)>>2,fcache_load_ptr_
28484                 | LR__3330
28484     A1 07 00 FF 
28488     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
2848c     1C 00 90 CD |  if_b	jmp	#LR__3332
28490     02 03 02 F1 | 	add	_var02, _var03
28494     01 13 02 F6 | 	mov	arg01, _var02
28498     00 12 66 FA | 	addct1	arg01, #0
2849c     24 22 60 FD | 	waitct1
284a0     A1 07 00 FF 
284a4     40 00 86 F1 | 	sub	_var01, ##1000000
284a8     D8 FF 9F FD | 	jmp	#LR__3330
284ac                 | LR__3331
284ac                 | LR__3332
284ac     01 00 56 F2 | 	cmps	_var01, #1 wc
284b0     28 00 90 CD |  if_b	jmp	#LR__3333
284b4     02 01 02 FD | 	qmul	_var01, _var03
284b8     A1 07 00 FF 
284bc     40 16 06 F6 | 	mov	arg03, ##1000000
284c0     19 FA 61 FD | 	getqy	result1
284c4     18 12 62 FD | 	getqx	arg01
284c8     28 FA 61 FD | 	setq	result1
284cc     0B 13 12 FD | 	qdiv	arg01, arg03
284d0     18 FA 61 FD | 	getqx	result1
284d4     FD 02 62 FA | 	addct1	_var02, result1
284d8     24 22 60 FD | 	waitct1
284dc                 | LR__3333
284dc                 | __system___waitus_ret
284dc     2D 00 64 FD | 	ret
284e0                 | 
284e0                 | __system___mount
284e0     0B 4A 05 F6 | 	mov	COUNT_, #11
284e4     A8 00 A0 FD | 	call	#pushregs_
284e8     09 27 02 F6 | 	mov	local01, arg01
284ec     0A 29 0A F6 | 	mov	local02, arg02 wz
284f0     01 2A 66 F6 | 	neg	local03, #1
284f4     01 FA 65 A6 |  if_e	neg	result1, #1
284f8     98 02 90 AD |  if_e	jmp	#LR__3355
284fc     13 FB C1 FA | 	rdbyte	result1, local01
28500     2F FA 0D F2 | 	cmp	result1, #47 wz
28504     28 00 90 5D |  if_ne	jmp	#LR__3342
28508     13 13 02 F6 | 	mov	arg01, local01
2850c     09 2D 02 F6 | 	mov	local04, arg01
28510     97 06 48 FB | 	callpa	#(@LR__3341-@LR__3340)>>2,fcache_load_ptr_
28514                 | LR__3340
28514     16 FB C9 FA | 	rdbyte	result1, local04 wz
28518     01 2C 06 51 |  if_ne	add	local04, #1
2851c     F4 FF 9F 5D |  if_ne	jmp	#LR__3340
28520                 | LR__3341
28520     09 2D 82 F1 | 	sub	local04, arg01
28524     16 FB 01 F6 | 	mov	result1, local04
28528     10 FA 55 F2 | 	cmps	result1, #16 wc
2852c     14 00 90 CD |  if_b	jmp	#LR__3343
28530                 | LR__3342
28530     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28534     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
28538     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2853c     01 FA 65 F6 | 	neg	result1, #1
28540     50 02 90 FD | 	jmp	#LR__3355
28544                 | LR__3343
28544     00 2E 06 F6 | 	mov	local05, #0
28548                 | LR__3344
28548     04 2E 56 F2 | 	cmps	local05, #4 wc
2854c     B0 00 90 3D |  if_ae	jmp	#LR__3349
28550     17 13 02 F6 | 	mov	arg01, local05
28554     02 12 66 F0 | 	shl	arg01, #2
28558     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2855c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
28560     09 FB 09 FB | 	rdlong	result1, arg01 wz
28564     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
28568     00 2A 56 A2 |  if_e	cmps	local03, #0 wc
2856c     17 2B 02 86 |  if_c_and_z	mov	local03, local05
28570     84 00 90 8D |  if_c_and_z	jmp	#LR__3348
28574     17 13 02 F6 | 	mov	arg01, local05
28578     02 12 66 F0 | 	shl	arg01, #2
2857c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
28580     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
28584     09 13 02 FB | 	rdlong	arg01, arg01
28588     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2858c     09 2D 02 F6 | 	mov	local04, arg01
28590     97 06 48 FB | 	callpa	#(@LR__3346-@LR__3345)>>2,fcache_load_ptr_
28594                 | LR__3345
28594     16 FB C9 FA | 	rdbyte	result1, local04 wz
28598     01 2C 06 51 |  if_ne	add	local04, #1
2859c     F4 FF 9F 5D |  if_ne	jmp	#LR__3345
285a0                 | LR__3346
285a0     09 2D 82 F1 | 	sub	local04, arg01
285a4     16 31 02 F6 | 	mov	local06, local04
285a8     18 13 02 F6 | 	mov	arg01, local06
285ac     13 13 02 F1 | 	add	arg01, local01
285b0     09 FB C1 FA | 	rdbyte	result1, arg01
285b4     2F FA 0D F2 | 	cmp	result1, #47 wz
285b8     18 33 02 56 |  if_ne	mov	local07, local06
285bc     13 33 02 51 |  if_ne	add	local07, local01
285c0     19 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
285c4     30 00 90 5D |  if_ne	jmp	#LR__3347
285c8     17 17 02 F6 | 	mov	arg03, local05
285cc     02 16 66 F0 | 	shl	arg03, #2
285d0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
285d4     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
285d8     0B 15 02 FB | 	rdlong	arg02, arg03
285dc     13 13 02 F6 | 	mov	arg01, local01
285e0     18 17 02 F6 | 	mov	arg03, local06
285e4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
285e8     54 51 B0 FD | 	call	#__system__strncmp
285ec     00 FA 0D F2 | 	cmp	result1, #0 wz
285f0     17 2B 02 A6 |  if_e	mov	local03, local05
285f4     08 00 90 AD |  if_e	jmp	#LR__3349
285f8                 | LR__3347
285f8                 | LR__3348
285f8     01 2E 06 F1 | 	add	local05, #1
285fc     48 FF 9F FD | 	jmp	#LR__3344
28600                 | LR__3349
28600     FF FF 7F FF 
28604     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
28608     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2860c     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
28610     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
28614     01 FA 65 A6 |  if_e	neg	result1, #1
28618     78 01 90 AD |  if_e	jmp	#LR__3355
2861c     15 2F 02 F6 | 	mov	local05, local03
28620     17 33 02 F6 | 	mov	local07, local05
28624     02 32 66 F0 | 	shl	local07, #2
28628     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2862c     F3 32 02 F1 | 	add	local07, ptr___system__dat__
28630     19 31 0A FB | 	rdlong	local06, local07 wz
28634     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
28638     58 00 90 AD |  if_e	jmp	#LR__3350
2863c     4C 30 06 F1 | 	add	local06, #76
28640     18 33 0A FB | 	rdlong	local07, local06 wz
28644     4C 30 86 F1 | 	sub	local06, #76
28648     48 00 90 AD |  if_e	jmp	#LR__3350
2864c     4C 30 06 F1 | 	add	local06, #76
28650     18 33 02 FB | 	rdlong	local07, local06
28654     19 2B 02 F6 | 	mov	local03, local07
28658     13 32 46 F7 | 	zerox	local07, #19
2865c     14 2A 46 F0 | 	shr	local03, #20
28660     02 2A 66 F0 | 	shl	local03, #2
28664     ED 2A 02 F1 | 	add	local03, __methods__
28668     15 2B 02 FB | 	rdlong	local03, local03
2866c     17 31 02 F6 | 	mov	local06, local05
28670     02 30 66 F0 | 	shl	local06, #2
28674     64 E6 05 F1 | 	add	ptr___system__dat__, #100
28678     F3 30 02 F1 | 	add	local06, ptr___system__dat__
2867c     18 13 02 FB | 	rdlong	arg01, local06
28680     F2 30 02 F6 | 	mov	local06, objptr
28684     19 E5 01 F6 | 	mov	objptr, local07
28688     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2868c     2D 2A 62 FD | 	call	local03
28690     18 E5 01 F6 | 	mov	objptr, local06
28694                 | LR__3350
28694     17 35 02 F6 | 	mov	local08, local05
28698     02 34 66 F0 | 	shl	local08, #2
2869c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
286a0     F3 34 02 F1 | 	add	local08, ptr___system__dat__
286a4     1A 29 62 FC | 	wrlong	local02, local08
286a8     00 28 0E F2 | 	cmp	local02, #0 wz
286ac     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
286b0     18 00 90 5D |  if_ne	jmp	#LR__3351
286b4     02 2E 66 F0 | 	shl	local05, #2
286b8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
286bc     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
286c0     17 01 68 FC | 	wrlong	#0, local05
286c4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
286c8     C4 00 90 FD | 	jmp	#LR__3354
286cc                 | LR__3351
286cc     17 37 02 F6 | 	mov	local09, local05
286d0     04 36 66 F0 | 	shl	local09, #4
286d4     24 E6 05 F1 | 	add	ptr___system__dat__, #36
286d8     F3 36 02 F1 | 	add	local09, ptr___system__dat__
286dc     1B 13 02 F6 | 	mov	arg01, local09
286e0     13 15 02 F6 | 	mov	arg02, local01
286e4     10 16 06 F6 | 	mov	arg03, #16
286e8     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
286ec     A0 4F B0 FD | 	call	#__system__strncpy
286f0     48 28 06 F1 | 	add	local02, #72
286f4     14 35 0A FB | 	rdlong	local08, local02 wz
286f8     48 28 86 F1 | 	sub	local02, #72
286fc     7C 00 90 AD |  if_e	jmp	#LR__3353
28700     48 28 06 F1 | 	add	local02, #72
28704     14 35 02 FB | 	rdlong	local08, local02
28708     1A 39 02 F6 | 	mov	local10, local08
2870c     13 34 46 F7 | 	zerox	local08, #19
28710     14 38 46 F0 | 	shr	local10, #20
28714     02 38 66 F0 | 	shl	local10, #2
28718     ED 38 02 F1 | 	add	local10, __methods__
2871c     1C 39 02 FB | 	rdlong	local10, local10
28720     1B 13 02 F6 | 	mov	arg01, local09
28724     F2 3A 02 F6 | 	mov	local11, objptr
28728     1A E5 01 F6 | 	mov	objptr, local08
2872c     2D 38 62 FD | 	call	local10
28730     1D E5 01 F6 | 	mov	objptr, local11
28734     FD 12 0A F6 | 	mov	arg01, result1 wz
28738     40 00 90 AD |  if_e	jmp	#LR__3352
2873c     17 35 02 F6 | 	mov	local08, local05
28740     02 34 66 F0 | 	shl	local08, #2
28744     74 E6 05 F1 | 	add	ptr___system__dat__, #116
28748     F3 34 02 F1 | 	add	local08, ptr___system__dat__
2874c     1A 01 68 FC | 	wrlong	#0, local08
28750     02 2E 66 F0 | 	shl	local05, #2
28754     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
28758     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
2875c     17 01 68 FC | 	wrlong	#0, local05
28760     09 13 6A F6 | 	neg	arg01, arg01 wz
28764     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
28768     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2876c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28770     01 FA 65 56 |  if_ne	neg	result1, #1
28774     00 FA 05 A6 |  if_e	mov	result1, #0
28778     18 00 90 FD | 	jmp	#LR__3355
2877c                 | LR__3352
2877c                 | LR__3353
2877c     02 2E 66 F0 | 	shl	local05, #2
28780     64 E6 05 F1 | 	add	ptr___system__dat__, #100
28784     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
28788     17 37 62 FC | 	wrlong	local09, local05
2878c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
28790                 | LR__3354
28790     00 FA 05 F6 | 	mov	result1, #0
28794                 | LR__3355
28794     A7 F0 03 F6 | 	mov	ptra, fp
28798     B2 00 A0 FD | 	call	#popregs_
2879c                 | __system___mount_ret
2879c     2D 00 64 FD | 	ret
287a0                 | 
287a0                 | __system___chdir
287a0     00 4A 05 F6 | 	mov	COUNT_, #0
287a4     A8 00 A0 FD | 	call	#pushregs_
287a8     40 F0 07 F1 | 	add	ptra, #64
287ac     04 4E 05 F1 | 	add	fp, #4
287b0     A7 12 62 FC | 	wrlong	arg01, fp
287b4     04 4E 05 F1 | 	add	fp, #4
287b8     A7 14 02 F6 | 	mov	arg02, fp
287bc     08 4E 85 F1 | 	sub	fp, #8
287c0     70 4B B0 FD | 	call	#__system__stat
287c4     3C 4E 05 F1 | 	add	fp, #60
287c8     A7 FA 61 FC | 	wrlong	result1, fp
287cc     3C 4E 85 F1 | 	sub	fp, #60
287d0     00 FA 0D F2 | 	cmp	result1, #0 wz
287d4     3C 4E 05 51 |  if_ne	add	fp, #60
287d8     A7 FA 01 5B |  if_ne	rdlong	result1, fp
287dc     3C 4E 85 51 |  if_ne	sub	fp, #60
287e0     BC 00 90 5D |  if_ne	jmp	#LR__3362
287e4     10 4E 05 F1 | 	add	fp, #16
287e8     A7 12 02 FB | 	rdlong	arg01, fp
287ec     10 4E 85 F1 | 	sub	fp, #16
287f0     78 00 00 FF 
287f4     00 12 06 F5 | 	and	arg01, ##61440
287f8     08 00 00 FF 
287fc     00 12 0E F2 | 	cmp	arg01, ##4096 wz
28800     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
28804     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
28808     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
2880c     01 FA 65 56 |  if_ne	neg	result1, #1
28810     8C 00 90 5D |  if_ne	jmp	#LR__3362
28814     04 4E 05 F1 | 	add	fp, #4
28818     A7 16 02 FB | 	rdlong	arg03, fp
2881c     04 4E 85 F1 | 	sub	fp, #4
28820     0B 17 C2 FA | 	rdbyte	arg03, arg03
28824     2F 16 0E F2 | 	cmp	arg03, #47 wz
28828     24 00 90 5D |  if_ne	jmp	#LR__3360
2882c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
28830     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
28834     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
28838     04 4E 05 F1 | 	add	fp, #4
2883c     A7 14 02 FB | 	rdlong	arg02, fp
28840     04 4E 85 F1 | 	sub	fp, #4
28844     00 17 06 F6 | 	mov	arg03, #256
28848     44 4E B0 FD | 	call	#__system__strncpy
2884c     4C 00 90 FD | 	jmp	#LR__3361
28850                 | LR__3360
28850     84 E7 05 F1 | 	add	ptr___system__dat__, #388
28854     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
28858     38 4E 05 F1 | 	add	fp, #56
2885c     A7 12 62 FC | 	wrlong	arg01, fp
28860     38 4E 85 F1 | 	sub	fp, #56
28864     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
28868     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
2886c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
28870     00 17 06 F6 | 	mov	arg03, #256
28874     18 4E B0 FD | 	call	#__system__strncpy
28878     38 4E 05 F1 | 	add	fp, #56
2887c     A7 12 02 FB | 	rdlong	arg01, fp
28880     34 4E 85 F1 | 	sub	fp, #52
28884     A7 14 02 FB | 	rdlong	arg02, fp
28888     04 4E 85 F1 | 	sub	fp, #4
2888c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
28890     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
28894     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
28898     10 00 B0 FD | 	call	#__system____getvfsforfile
2889c                 | LR__3361
2889c     00 FA 05 F6 | 	mov	result1, #0
288a0                 | LR__3362
288a0     A7 F0 03 F6 | 	mov	ptra, fp
288a4     B2 00 A0 FD | 	call	#popregs_
288a8                 | __system___chdir_ret
288a8     2D 00 64 FD | 	ret
288ac                 | 
288ac                 | __system____getvfsforfile
288ac     0E 4A 05 F6 | 	mov	COUNT_, #14
288b0     A8 00 A0 FD | 	call	#pushregs_
288b4     09 27 02 F6 | 	mov	local01, arg01
288b8     0A 29 02 F6 | 	mov	local02, arg02
288bc     0B 2B 02 F6 | 	mov	local03, arg03
288c0     97 10 48 FB | 	callpa	#(@LR__3371-@LR__3370)>>2,fcache_load_ptr_
288c4                 | LR__3370
288c4     14 FB C1 FA | 	rdbyte	result1, local02
288c8     2F FA 0D F2 | 	cmp	result1, #47 wz
288cc     01 28 06 A1 |  if_e	add	local02, #1
288d0     14 2D C2 AA |  if_e	rdbyte	local04, local02
288d4     01 28 86 A1 |  if_e	sub	local02, #1
288d8     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
288dc     01 28 06 A1 |  if_e	add	local02, #1
288e0     E0 FF 9F AD |  if_e	jmp	#LR__3370
288e4                 | LR__3371
288e4     14 2D C2 FA | 	rdbyte	local04, local02
288e8     2F 2C 0E F2 | 	cmp	local04, #47 wz
288ec     14 00 90 5D |  if_ne	jmp	#LR__3372
288f0     13 13 02 F6 | 	mov	arg01, local01
288f4     14 15 02 F6 | 	mov	arg02, local02
288f8     00 17 06 F6 | 	mov	arg03, #256
288fc     90 4D B0 FD | 	call	#__system__strncpy
28900     7C 00 90 FD | 	jmp	#LR__3374
28904                 | LR__3372
28904     84 E6 05 F1 | 	add	ptr___system__dat__, #132
28908     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
2890c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
28910     13 13 02 F6 | 	mov	arg01, local01
28914     00 17 06 F6 | 	mov	arg03, #256
28918     74 4D B0 FD | 	call	#__system__strncpy
2891c     14 2D CA FA | 	rdbyte	local04, local02 wz
28920     5C 00 90 AD |  if_e	jmp	#LR__3373
28924     14 2D C2 FA | 	rdbyte	local04, local02
28928     2E 2C 0E F2 | 	cmp	local04, #46 wz
2892c     01 28 06 A1 |  if_e	add	local02, #1
28930     14 2F C2 AA |  if_e	rdbyte	local05, local02
28934     01 28 86 A1 |  if_e	sub	local02, #1
28938     17 31 02 A6 |  if_e	mov	local06, local05
2893c     07 30 4E A7 |  if_e	zerox	local06, #7 wz
28940     3C 00 90 AD |  if_e	jmp	#LR__3373
28944     13 2F C2 FA | 	rdbyte	local05, local01
28948     2F 2E 0E F2 | 	cmp	local05, #47 wz
2894c     01 26 06 A1 |  if_e	add	local01, #1
28950     13 2D C2 AA |  if_e	rdbyte	local04, local01
28954     01 26 86 A1 |  if_e	sub	local01, #1
28958     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
2895c     BE 01 00 5F 
28960     30 14 06 56 |  if_ne	mov	arg02, ##@LR__5510
28964     13 13 02 56 |  if_ne	mov	arg01, local01
28968     00 17 06 56 |  if_ne	mov	arg03, #256
2896c     6C 4D B0 5D |  if_ne	call	#__system__strncat
28970     13 13 02 F6 | 	mov	arg01, local01
28974     14 15 02 F6 | 	mov	arg02, local02
28978     00 17 06 F6 | 	mov	arg03, #256
2897c     5C 4D B0 FD | 	call	#__system__strncat
28980                 | LR__3373
28980                 | LR__3374
28980     13 13 02 F6 | 	mov	arg01, local01
28984     18 4F B0 FD | 	call	#__system___normalizeName
28988     13 2D CA FA | 	rdbyte	local04, local01 wz
2898c     1C 00 90 AD |  if_e	jmp	#LR__3375
28990     13 2D C2 FA | 	rdbyte	local04, local01
28994     2F 2C 0E F2 | 	cmp	local04, #47 wz
28998     01 26 06 A1 |  if_e	add	local01, #1
2899c     13 31 C2 AA |  if_e	rdbyte	local06, local01
289a0     01 26 86 A1 |  if_e	sub	local01, #1
289a4     00 30 4E A2 |  if_e	cmps	local06, #0 wz
289a8     18 00 90 5D |  if_ne	jmp	#LR__3376
289ac                 | LR__3375
289ac     01 00 00 FF 
289b0     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
289b4     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
289b8     01 00 00 FF 
289bc     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
289c0     EC 01 90 FD | 	jmp	#LR__3390
289c4                 | LR__3376
289c4     00 32 06 F6 | 	mov	local07, #0
289c8                 | LR__3377
289c8     04 32 56 F2 | 	cmps	local07, #4 wc
289cc     CC 01 90 3D |  if_ae	jmp	#LR__3389
289d0     19 31 02 F6 | 	mov	local06, local07
289d4     02 30 66 F0 | 	shl	local06, #2
289d8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
289dc     F3 30 02 F1 | 	add	local06, ptr___system__dat__
289e0     18 31 0A FB | 	rdlong	local06, local06 wz
289e4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
289e8     A8 01 90 AD |  if_e	jmp	#LR__3388
289ec     19 2D 02 F6 | 	mov	local04, local07
289f0     02 2C 66 F0 | 	shl	local04, #2
289f4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
289f8     F3 2C 02 F1 | 	add	local04, ptr___system__dat__
289fc     16 13 02 FB | 	rdlong	arg01, local04
28a00     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
28a04     09 35 02 F6 | 	mov	local08, arg01
28a08     97 06 48 FB | 	callpa	#(@LR__3379-@LR__3378)>>2,fcache_load_ptr_
28a0c                 | LR__3378
28a0c     1A FB C9 FA | 	rdbyte	result1, local08 wz
28a10     01 34 06 51 |  if_ne	add	local08, #1
28a14     F4 FF 9F 5D |  if_ne	jmp	#LR__3378
28a18                 | LR__3379
28a18     09 35 82 F1 | 	sub	local08, arg01
28a1c     1A 37 02 F6 | 	mov	local09, local08
28a20     1B 2D 02 F6 | 	mov	local04, local09
28a24     13 2D 02 F1 | 	add	local04, local01
28a28     16 31 C2 FA | 	rdbyte	local06, local04
28a2c     2F 30 0E F2 | 	cmp	local06, #47 wz
28a30     1B 39 02 56 |  if_ne	mov	local10, local09
28a34     13 39 02 51 |  if_ne	add	local10, local01
28a38     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
28a3c     54 01 90 5D |  if_ne	jmp	#LR__3387
28a40     19 17 02 F6 | 	mov	arg03, local07
28a44     02 16 66 F0 | 	shl	arg03, #2
28a48     64 E6 05 F1 | 	add	ptr___system__dat__, #100
28a4c     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
28a50     0B 15 02 FB | 	rdlong	arg02, arg03
28a54     1B 17 02 F6 | 	mov	arg03, local09
28a58     13 13 02 F6 | 	mov	arg01, local01
28a5c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
28a60     DC 4C B0 FD | 	call	#__system__strncmp
28a64     00 FA 4D F2 | 	cmps	result1, #0 wz
28a68     28 01 90 5D |  if_ne	jmp	#LR__3387
28a6c     19 3B 02 F6 | 	mov	local11, local07
28a70     02 3A 66 F0 | 	shl	local11, #2
28a74     74 E6 05 F1 | 	add	ptr___system__dat__, #116
28a78     F3 3A 02 F1 | 	add	local11, ptr___system__dat__
28a7c     1D 3D 02 FB | 	rdlong	local12, local11
28a80     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
28a84     97 22 48 FB | 	callpa	#(@LR__3381-@LR__3380)>>2,fcache_load_ptr_
28a88                 | LR__3380
28a88     1B 31 02 F6 | 	mov	local06, local09
28a8c     01 30 06 F1 | 	add	local06, #1
28a90     13 31 02 F1 | 	add	local06, local01
28a94     18 3B C2 FA | 	rdbyte	local11, local06
28a98     2E 3A 0E F2 | 	cmp	local11, #46 wz
28a9c     2C 00 90 5D |  if_ne	jmp	#LR__3382
28aa0     1B 3B 02 F6 | 	mov	local11, local09
28aa4     02 3A 06 F1 | 	add	local11, #2
28aa8     13 3B 02 F1 | 	add	local11, local01
28aac     1D 39 C2 FA | 	rdbyte	local10, local11
28ab0     2F 38 0E F2 | 	cmp	local10, #47 wz
28ab4     1B 3F 02 56 |  if_ne	mov	local13, local09
28ab8     02 3E 06 51 |  if_ne	add	local13, #2
28abc     13 3F 02 51 |  if_ne	add	local13, local01
28ac0     1F 41 CA 5A |  if_ne	rdbyte	local14, local13 wz
28ac4     01 36 06 A1 |  if_e	add	local09, #1
28ac8     BC FF 9F AD |  if_e	jmp	#LR__3380
28acc                 | LR__3381
28acc                 | LR__3382
28acc     00 2A 0E F2 | 	cmp	local03, #0 wz
28ad0     15 13 02 56 |  if_ne	mov	arg01, local03
28ad4     13 15 02 56 |  if_ne	mov	arg02, local01
28ad8     00 17 06 56 |  if_ne	mov	arg03, #256
28adc     B0 4B B0 5D |  if_ne	call	#__system__strncpy
28ae0     13 15 02 F6 | 	mov	arg02, local01
28ae4     1B 15 02 F1 | 	add	arg02, local09
28ae8     01 14 06 F1 | 	add	arg02, #1
28aec     13 13 02 F6 | 	mov	arg01, local01
28af0     D4 F5 BF FD | 	call	#__system____builtin_strcpy
28af4     13 13 02 F6 | 	mov	arg01, local01
28af8     09 35 02 F6 | 	mov	local08, arg01
28afc     97 06 48 FB | 	callpa	#(@LR__3384-@LR__3383)>>2,fcache_load_ptr_
28b00                 | LR__3383
28b00     1A FB C9 FA | 	rdbyte	result1, local08 wz
28b04     01 34 06 51 |  if_ne	add	local08, #1
28b08     F4 FF 9F 5D |  if_ne	jmp	#LR__3383
28b0c                 | LR__3384
28b0c     09 35 82 F1 | 	sub	local08, arg01
28b10     1A 37 02 F6 | 	mov	local09, local08
28b14                 | LR__3385
28b14     01 36 56 F2 | 	cmps	local09, #1 wc
28b18     70 00 90 CD |  if_b	jmp	#LR__3386
28b1c     1B 2D 02 F6 | 	mov	local04, local09
28b20     13 2D 02 F1 | 	add	local04, local01
28b24     16 3B C2 FA | 	rdbyte	local11, local04
28b28     2F 3A 0E F2 | 	cmp	local11, #47 wz
28b2c     1B 3B 02 A6 |  if_e	mov	local11, local09
28b30     13 3B 02 A1 |  if_e	add	local11, local01
28b34     1D 01 48 AC |  if_e	wrbyte	#0, local11
28b38     01 36 86 A1 |  if_e	sub	local09, #1
28b3c     D4 FF 9F AD |  if_e	jmp	#LR__3385
28b40     1B 2D 02 F6 | 	mov	local04, local09
28b44     13 2D 02 F1 | 	add	local04, local01
28b48     16 3B C2 FA | 	rdbyte	local11, local04
28b4c     2E 3A 0E F2 | 	cmp	local11, #46 wz
28b50     38 00 90 5D |  if_ne	jmp	#LR__3386
28b54     02 36 56 F2 | 	cmps	local09, #2 wc
28b58     30 00 90 CD |  if_b	jmp	#LR__3386
28b5c     1B 41 02 F6 | 	mov	local14, local09
28b60     01 40 86 F1 | 	sub	local14, #1
28b64     13 41 02 F1 | 	add	local14, local01
28b68     20 2F C2 FA | 	rdbyte	local05, local14
28b6c     2F 2E 0E F2 | 	cmp	local05, #47 wz
28b70     18 00 90 5D |  if_ne	jmp	#LR__3386
28b74     1B 2D 02 F6 | 	mov	local04, local09
28b78     01 2C 86 F1 | 	sub	local04, #1
28b7c     13 2D 02 F1 | 	add	local04, local01
28b80     16 01 48 FC | 	wrbyte	#0, local04
28b84     02 36 86 F1 | 	sub	local09, #2
28b88     88 FF 9F FD | 	jmp	#LR__3385
28b8c                 | LR__3386
28b8c     1E FB 01 F6 | 	mov	result1, local12
28b90     1C 00 90 FD | 	jmp	#LR__3390
28b94                 | LR__3387
28b94                 | LR__3388
28b94     01 32 06 F1 | 	add	local07, #1
28b98     2C FE 9F FD | 	jmp	#LR__3377
28b9c                 | LR__3389
28b9c     02 00 00 FF 
28ba0     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
28ba4     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
28ba8     02 00 00 FF 
28bac     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
28bb0                 | LR__3390
28bb0     A7 F0 03 F6 | 	mov	ptra, fp
28bb4     B2 00 A0 FD | 	call	#popregs_
28bb8                 | __system____getvfsforfile_ret
28bb8     2D 00 64 FD | 	ret
28bbc                 | 
28bbc                 | __system___basic_open
28bbc     05 4A 05 F6 | 	mov	COUNT_, #5
28bc0     A8 00 A0 FD | 	call	#pushregs_
28bc4     0A 27 02 F6 | 	mov	local01, arg02
28bc8     0B 29 02 F6 | 	mov	local02, arg03
28bcc     0C 2B 02 F6 | 	mov	local03, arg04
28bd0     00 2C 06 F6 | 	mov	local04, #0
28bd4     90 4A B0 FD | 	call	#__system____getftab
28bd8     FD 2E 0A F6 | 	mov	local05, result1 wz
28bdc     18 00 90 5D |  if_ne	jmp	#LR__3400
28be0     EE 12 02 F6 | 	mov	arg01, abortchain
28be4     0C 14 06 F6 | 	mov	arg02, #12
28be8     01 16 06 F6 | 	mov	arg03, #1
28bec     DA 00 A0 FD | 	call	#__longjmp
28bf0     01 FA 65 F6 | 	neg	result1, #1
28bf4     14 01 90 FD | 	jmp	#LR__3409
28bf8                 | LR__3400
28bf8     08 2E 06 F1 | 	add	local05, #8
28bfc     17 FB 09 FB | 	rdlong	result1, local05 wz
28c00     08 2E 86 F1 | 	sub	local05, #8
28c04     17 13 02 56 |  if_ne	mov	arg01, local05
28c08     B0 41 B0 5D |  if_ne	call	#__system___closeraw
28c0c     00 26 0E F2 | 	cmp	local01, #0 wz
28c10     00 28 0E A2 |  if_e	cmp	local02, #0 wz
28c14     00 2A 0E A2 |  if_e	cmp	local03, #0 wz
28c18     3C 00 90 AD |  if_e	jmp	#LR__3402
28c1c     0C 12 06 F6 | 	mov	arg01, #12
28c20     98 36 B0 FD | 	call	#__system___gc_alloc_managed
28c24     FD 2C 0A F6 | 	mov	local04, result1 wz
28c28     18 00 90 5D |  if_ne	jmp	#LR__3401
28c2c     EE 12 02 F6 | 	mov	arg01, abortchain
28c30     07 14 06 F6 | 	mov	arg02, #7
28c34     01 16 06 F6 | 	mov	arg03, #1
28c38     DA 00 A0 FD | 	call	#__longjmp
28c3c     01 FA 65 F6 | 	neg	result1, #1
28c40     C8 00 90 FD | 	jmp	#LR__3409
28c44                 | LR__3401
28c44     16 01 68 FC | 	wrlong	#0, local04
28c48     04 2C 06 F1 | 	add	local04, #4
28c4c     16 01 68 FC | 	wrlong	#0, local04
28c50     04 2C 86 F1 | 	sub	local04, #4
28c54     17 2D 62 FC | 	wrlong	local04, local05
28c58                 | LR__3402
28c58     00 26 0E F2 | 	cmp	local01, #0 wz
28c5c     20 00 90 AD |  if_e	jmp	#LR__3403
28c60     16 27 62 FC | 	wrlong	local01, local04
28c64     16 FB 01 F6 | 	mov	result1, local04
28c68     00 58 05 FF 
28c6c     00 FA 45 F5 | 	or	result1, ##179306496
28c70     1C 2E 06 F1 | 	add	local05, #28
28c74     17 FB 61 FC | 	wrlong	result1, local05
28c78     1C 2E 86 F1 | 	sub	local05, #28
28c7c     0C 00 90 FD | 	jmp	#LR__3404
28c80                 | LR__3403
28c80     1C 2E 06 F1 | 	add	local05, #28
28c84     17 01 68 FC | 	wrlong	#0, local05
28c88     1C 2E 86 F1 | 	sub	local05, #28
28c8c                 | LR__3404
28c8c     00 28 0E F2 | 	cmp	local02, #0 wz
28c90     28 00 90 AD |  if_e	jmp	#LR__3405
28c94     04 2C 06 F1 | 	add	local04, #4
28c98     16 29 62 FC | 	wrlong	local02, local04
28c9c     04 2C 86 F1 | 	sub	local04, #4
28ca0     16 FB 01 F6 | 	mov	result1, local04
28ca4     00 60 05 FF 
28ca8     00 FA 45 F5 | 	or	result1, ##180355072
28cac     20 2E 06 F1 | 	add	local05, #32
28cb0     17 FB 61 FC | 	wrlong	result1, local05
28cb4     20 2E 86 F1 | 	sub	local05, #32
28cb8     0C 00 90 FD | 	jmp	#LR__3406
28cbc                 | LR__3405
28cbc     20 2E 06 F1 | 	add	local05, #32
28cc0     17 01 68 FC | 	wrlong	#0, local05
28cc4     20 2E 86 F1 | 	sub	local05, #32
28cc8                 | LR__3406
28cc8     00 2A 0E F2 | 	cmp	local03, #0 wz
28ccc     24 00 90 AD |  if_e	jmp	#LR__3407
28cd0     08 2C 06 F1 | 	add	local04, #8
28cd4     16 2B 62 FC | 	wrlong	local03, local04
28cd8     08 2C 86 F1 | 	sub	local04, #8
28cdc     00 68 05 FF 
28ce0     00 2C 46 F5 | 	or	local04, ##181403648
28ce4     24 2E 06 F1 | 	add	local05, #36
28ce8     17 2D 62 FC | 	wrlong	local04, local05
28cec     24 2E 86 F1 | 	sub	local05, #36
28cf0     0C 00 90 FD | 	jmp	#LR__3408
28cf4                 | LR__3407
28cf4     24 2E 06 F1 | 	add	local05, #36
28cf8     17 01 68 FC | 	wrlong	#0, local05
28cfc     24 2E 86 F1 | 	sub	local05, #36
28d00                 | LR__3408
28d00     08 2E 06 F1 | 	add	local05, #8
28d04     17 0F 68 FC | 	wrlong	#7, local05
28d08     00 FA 05 F6 | 	mov	result1, #0
28d0c                 | LR__3409
28d0c     A7 F0 03 F6 | 	mov	ptra, fp
28d10     B2 00 A0 FD | 	call	#popregs_
28d14                 | __system___basic_open_ret
28d14     2D 00 64 FD | 	ret
28d18                 | 
28d18                 | __system___basic_open_string
28d18     04 4A 05 F6 | 	mov	COUNT_, #4
28d1c     A8 00 A0 FD | 	call	#pushregs_
28d20     0A 27 02 F6 | 	mov	local01, arg02
28d24     0B 29 02 F6 | 	mov	local02, arg03
28d28     3C 49 B0 FD | 	call	#__system____getftab
28d2c     FD 2A 0A F6 | 	mov	local03, result1 wz
28d30     18 00 90 5D |  if_ne	jmp	#LR__3410
28d34     EE 12 02 F6 | 	mov	arg01, abortchain
28d38     0C 14 06 F6 | 	mov	arg02, #12
28d3c     01 16 06 F6 | 	mov	arg03, #1
28d40     DA 00 A0 FD | 	call	#__longjmp
28d44     01 FA 65 F6 | 	neg	result1, #1
28d48     5C 00 90 FD | 	jmp	#LR__3412
28d4c                 | LR__3410
28d4c     08 2A 06 F1 | 	add	local03, #8
28d50     15 19 0A FB | 	rdlong	arg04, local03 wz
28d54     08 2A 86 F1 | 	sub	local03, #8
28d58     15 13 02 56 |  if_ne	mov	arg01, local03
28d5c     5C 40 B0 5D |  if_ne	call	#__system___closeraw
28d60     13 15 02 F6 | 	mov	arg02, local01
28d64     14 17 02 F6 | 	mov	arg03, local02
28d68     15 13 02 F6 | 	mov	arg01, local03
28d6c     B6 19 06 F6 | 	mov	arg04, #438
28d70     44 3D B0 FD | 	call	#__system___openraw
28d74     FD 2C 02 F6 | 	mov	local04, result1
28d78     00 2C 56 F2 | 	cmps	local04, #0 wc
28d7c     24 00 90 3D |  if_ae	jmp	#LR__3411
28d80     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28d84     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
28d88     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28d8c     EE 12 02 F6 | 	mov	arg01, abortchain
28d90     FD 14 02 FB | 	rdlong	arg02, result1
28d94     01 16 06 F6 | 	mov	arg03, #1
28d98     DA 00 A0 FD | 	call	#__longjmp
28d9c     01 FA 65 F6 | 	neg	result1, #1
28da0     04 00 90 FD | 	jmp	#LR__3412
28da4                 | LR__3411
28da4     16 FB 01 F6 | 	mov	result1, local04
28da8                 | LR__3412
28da8     A7 F0 03 F6 | 	mov	ptra, fp
28dac     B2 00 A0 FD | 	call	#popregs_
28db0                 | __system___basic_open_string_ret
28db0     2D 00 64 FD | 	ret
28db4                 | 
28db4                 | __system___basic_print_char
28db4     03 4A 05 F6 | 	mov	COUNT_, #3
28db8     A8 00 A0 FD | 	call	#pushregs_
28dbc     0A 27 02 F6 | 	mov	local01, arg02
28dc0     50 50 B0 FD | 	call	#__system___gettxfunc
28dc4     FD 28 0A F6 | 	mov	local02, result1 wz
28dc8     00 FA 05 A6 |  if_e	mov	result1, #0
28dcc     30 00 90 AD |  if_e	jmp	#LR__3420
28dd0     14 2B 02 F6 | 	mov	local03, local02
28dd4     13 28 46 F7 | 	zerox	local02, #19
28dd8     14 2A 46 F0 | 	shr	local03, #20
28ddc     02 2A 66 F0 | 	shl	local03, #2
28de0     ED 2A 02 F1 | 	add	local03, __methods__
28de4     15 2B 02 FB | 	rdlong	local03, local03
28de8     13 13 02 F6 | 	mov	arg01, local01
28dec     F2 26 02 F6 | 	mov	local01, objptr
28df0     14 E5 01 F6 | 	mov	objptr, local02
28df4     2D 2A 62 FD | 	call	local03
28df8     13 E5 01 F6 | 	mov	objptr, local01
28dfc     01 FA 05 F6 | 	mov	result1, #1
28e00                 | LR__3420
28e00     A7 F0 03 F6 | 	mov	ptra, fp
28e04     B2 00 A0 FD | 	call	#popregs_
28e08                 | __system___basic_print_char_ret
28e08     2D 00 64 FD | 	ret
28e0c                 | 
28e0c                 | __system___basic_print_string
28e0c     03 4A 05 F6 | 	mov	COUNT_, #3
28e10     A8 00 A0 FD | 	call	#pushregs_
28e14     0A 27 02 F6 | 	mov	local01, arg02
28e18     0B 29 02 F6 | 	mov	local02, arg03
28e1c     F4 4F B0 FD | 	call	#__system___gettxfunc
28e20     FD 2A 0A F6 | 	mov	local03, result1 wz
28e24     00 FA 05 A6 |  if_e	mov	result1, #0
28e28     18 00 90 AD |  if_e	jmp	#LR__3430
28e2c     00 26 0E F2 | 	cmp	local01, #0 wz
28e30     00 FA 05 A6 |  if_e	mov	result1, #0
28e34     15 13 02 56 |  if_ne	mov	arg01, local03
28e38     14 15 02 56 |  if_ne	mov	arg02, local02
28e3c     13 17 02 56 |  if_ne	mov	arg03, local01
28e40     08 02 B0 5D |  if_ne	call	#__system___fmtstr
28e44                 | LR__3430
28e44     A7 F0 03 F6 | 	mov	ptra, fp
28e48     B2 00 A0 FD | 	call	#popregs_
28e4c                 | __system___basic_print_string_ret
28e4c     2D 00 64 FD | 	ret
28e50                 | 
28e50                 | __system___basic_print_integer
28e50     04 4A 05 F6 | 	mov	COUNT_, #4
28e54     A8 00 A0 FD | 	call	#pushregs_
28e58     0A 27 02 F6 | 	mov	local01, arg02
28e5c     0B 29 02 F6 | 	mov	local02, arg03
28e60     0C 2B 02 F6 | 	mov	local03, arg04
28e64     AC 4F B0 FD | 	call	#__system___gettxfunc
28e68     FD 2C 0A F6 | 	mov	local04, result1 wz
28e6c     00 FA 05 A6 |  if_e	mov	result1, #0
28e70     16 13 02 56 |  if_ne	mov	arg01, local04
28e74     14 15 02 56 |  if_ne	mov	arg02, local02
28e78     13 17 02 56 |  if_ne	mov	arg03, local01
28e7c     15 19 02 56 |  if_ne	mov	arg04, local03
28e80     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
28e84     A7 F0 03 F6 | 	mov	ptra, fp
28e88     B2 00 A0 FD | 	call	#popregs_
28e8c                 | __system___basic_print_integer_ret
28e8c     2D 00 64 FD | 	ret
28e90                 | 
28e90                 | __system___basic_print_unsigned
28e90     03 4A 05 F6 | 	mov	COUNT_, #3
28e94     A8 00 A0 FD | 	call	#pushregs_
28e98     0A 27 02 F6 | 	mov	local01, arg02
28e9c     0B 29 02 F6 | 	mov	local02, arg03
28ea0     0C 2B 02 F6 | 	mov	local03, arg04
28ea4     6C 4F B0 FD | 	call	#__system___gettxfunc
28ea8     FD 12 0A F6 | 	mov	arg01, result1 wz
28eac     00 FA 05 A6 |  if_e	mov	result1, #0
28eb0     3A 28 26 54 |  if_ne	bith	local02, #58
28eb4     14 15 02 56 |  if_ne	mov	arg02, local02
28eb8     13 17 02 56 |  if_ne	mov	arg03, local01
28ebc     15 19 02 56 |  if_ne	mov	arg04, local03
28ec0     74 02 B0 5D |  if_ne	call	#__system___fmtnum
28ec4     A7 F0 03 F6 | 	mov	ptra, fp
28ec8     B2 00 A0 FD | 	call	#popregs_
28ecc                 | __system___basic_print_unsigned_ret
28ecc     2D 00 64 FD | 	ret
28ed0                 | 
28ed0                 | __system___basic_get_char
28ed0     03 4A 05 F6 | 	mov	COUNT_, #3
28ed4     A8 00 A0 FD | 	call	#pushregs_
28ed8     7C 4F B0 FD | 	call	#__system___getrxfunc
28edc     FD 26 0A F6 | 	mov	local01, result1 wz
28ee0     01 FA 65 A6 |  if_e	neg	result1, #1
28ee4     28 00 90 AD |  if_e	jmp	#LR__3440
28ee8     13 29 02 F6 | 	mov	local02, local01
28eec     13 26 46 F7 | 	zerox	local01, #19
28ef0     14 28 46 F0 | 	shr	local02, #20
28ef4     02 28 66 F0 | 	shl	local02, #2
28ef8     ED 28 02 F1 | 	add	local02, __methods__
28efc     14 29 02 FB | 	rdlong	local02, local02
28f00     F2 2A 02 F6 | 	mov	local03, objptr
28f04     13 E5 01 F6 | 	mov	objptr, local01
28f08     2D 28 62 FD | 	call	local02
28f0c     15 E5 01 F6 | 	mov	objptr, local03
28f10                 | LR__3440
28f10     A7 F0 03 F6 | 	mov	ptra, fp
28f14     B2 00 A0 FD | 	call	#popregs_
28f18                 | __system___basic_get_char_ret
28f18     2D 00 64 FD | 	ret
28f1c                 | 
28f1c                 | __system___basic_put
28f1c     04 4A 05 F6 | 	mov	COUNT_, #4
28f20     A8 00 A0 FD | 	call	#pushregs_
28f24     0D 27 02 F6 | 	mov	local01, arg05
28f28     13 19 02 FD | 	qmul	arg04, local01
28f2c     09 29 02 F6 | 	mov	local02, arg01
28f30     0B 2B 02 F6 | 	mov	local03, arg03
28f34     00 14 0E F2 | 	cmp	arg02, #0 wz
28f38     01 14 86 51 |  if_ne	sub	arg02, #1
28f3c     14 13 02 56 |  if_ne	mov	arg01, local02
28f40     00 16 06 56 |  if_ne	mov	arg03, #0
28f44     18 2C 62 FD | 	getqx	local04
28f48     64 45 B0 5D |  if_ne	call	#__system__lseek
28f4c     15 15 02 F6 | 	mov	arg02, local03
28f50     16 17 02 F6 | 	mov	arg03, local04
28f54     14 13 02 F6 | 	mov	arg01, local02
28f58     A0 44 B0 FD | 	call	#__system__write
28f5c     FD 2C 02 F6 | 	mov	local04, result1
28f60     01 2C 56 F2 | 	cmps	local04, #1 wc
28f64     10 00 90 CD |  if_b	jmp	#LR__3450
28f68     16 91 02 F6 | 	mov	muldiva_, local04
28f6c     13 93 02 F6 | 	mov	muldivb_, local01
28f70     BA 00 A0 FD | 	call	#divide_
28f74     49 2D 02 F6 | 	mov	local04, muldivb_
28f78                 | LR__3450
28f78     16 FB 01 F6 | 	mov	result1, local04
28f7c     A7 F0 03 F6 | 	mov	ptra, fp
28f80     B2 00 A0 FD | 	call	#popregs_
28f84                 | __system___basic_put_ret
28f84     2D 00 64 FD | 	ret
28f88                 | 
28f88                 | __system___basic_get
28f88     04 4A 05 F6 | 	mov	COUNT_, #4
28f8c     A8 00 A0 FD | 	call	#pushregs_
28f90     0D 27 02 F6 | 	mov	local01, arg05
28f94     13 19 02 FD | 	qmul	arg04, local01
28f98     09 29 02 F6 | 	mov	local02, arg01
28f9c     0B 2B 02 F6 | 	mov	local03, arg03
28fa0     00 14 0E F2 | 	cmp	arg02, #0 wz
28fa4     01 14 86 51 |  if_ne	sub	arg02, #1
28fa8     14 13 02 56 |  if_ne	mov	arg01, local02
28fac     00 16 06 56 |  if_ne	mov	arg03, #0
28fb0     18 2C 62 FD | 	getqx	local04
28fb4     F8 44 B0 5D |  if_ne	call	#__system__lseek
28fb8     15 15 02 F6 | 	mov	arg02, local03
28fbc     16 17 02 F6 | 	mov	arg03, local04
28fc0     14 13 02 F6 | 	mov	arg01, local02
28fc4     70 44 B0 FD | 	call	#__system__read
28fc8     FD 2C 02 F6 | 	mov	local04, result1
28fcc     01 2C 56 F2 | 	cmps	local04, #1 wc
28fd0     10 00 90 CD |  if_b	jmp	#LR__3460
28fd4     16 91 02 F6 | 	mov	muldiva_, local04
28fd8     13 93 02 F6 | 	mov	muldivb_, local01
28fdc     BA 00 A0 FD | 	call	#divide_
28fe0     49 2D 02 F6 | 	mov	local04, muldivb_
28fe4                 | LR__3460
28fe4     16 FB 01 F6 | 	mov	result1, local04
28fe8     A7 F0 03 F6 | 	mov	ptra, fp
28fec     B2 00 A0 FD | 	call	#popregs_
28ff0                 | __system___basic_get_ret
28ff0     2D 00 64 FD | 	ret
28ff4                 | 
28ff4                 | __system___fmtchar
28ff4     00 4A 05 F6 | 	mov	COUNT_, #0
28ff8     A8 00 A0 FD | 	call	#pushregs_
28ffc     10 F0 07 F1 | 	add	ptra, #16
29000     04 4E 05 F1 | 	add	fp, #4
29004     A7 12 62 FC | 	wrlong	arg01, fp
29008     04 4E 05 F1 | 	add	fp, #4
2900c     A7 14 62 FC | 	wrlong	arg02, fp
29010     04 4E 05 F1 | 	add	fp, #4
29014     A7 16 62 FC | 	wrlong	arg03, fp
29018     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2901c     A7 16 62 FC | 	wrlong	arg03, fp
29020     08 4E 85 F1 | 	sub	fp, #8
29024     A7 12 02 FB | 	rdlong	arg01, fp
29028     04 4E 05 F1 | 	add	fp, #4
2902c     A7 14 02 FB | 	rdlong	arg02, fp
29030     04 4E 05 F1 | 	add	fp, #4
29034     A7 16 02 F6 | 	mov	arg03, fp
29038     0C 4E 85 F1 | 	sub	fp, #12
2903c     0C 00 B0 FD | 	call	#__system___fmtstr
29040     A7 F0 03 F6 | 	mov	ptra, fp
29044     B2 00 A0 FD | 	call	#popregs_
29048                 | __system___fmtchar_ret
29048     2D 00 64 FD | 	ret
2904c                 | 
2904c                 | __system___fmtstr
2904c     09 4A 05 F6 | 	mov	COUNT_, #9
29050     A8 00 A0 FD | 	call	#pushregs_
29054     09 27 02 F6 | 	mov	local01, arg01
29058     0A 29 02 F6 | 	mov	local02, arg02
2905c     0B 2B 02 F6 | 	mov	local03, arg03
29060     14 19 E2 F8 | 	getbyte	arg04, local02, #0
29064     15 13 02 F6 | 	mov	arg01, local03
29068     09 2D 02 F6 | 	mov	local04, arg01
2906c     97 06 48 FB | 	callpa	#(@LR__3471-@LR__3470)>>2,fcache_load_ptr_
29070                 | LR__3470
29070     16 FB C9 FA | 	rdbyte	result1, local04 wz
29074     01 2C 06 51 |  if_ne	add	local04, #1
29078     F4 FF 9F 5D |  if_ne	jmp	#LR__3470
2907c                 | LR__3471
2907c     09 2D 82 F1 | 	sub	local04, arg01
29080     00 18 0E F2 | 	cmp	arg04, #0 wz
29084     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
29088     14 15 02 F6 | 	mov	arg02, local02
2908c     16 17 02 F6 | 	mov	arg03, local04
29090     13 13 02 F6 | 	mov	arg01, local01
29094     02 18 06 F6 | 	mov	arg04, #2
29098     C8 49 B0 FD | 	call	#__system___fmtpad
2909c     FD 2E 02 F6 | 	mov	local05, result1
290a0     00 2E 56 F2 | 	cmps	local05, #0 wc
290a4     17 FB 01 C6 |  if_b	mov	result1, local05
290a8     80 00 90 CD |  if_b	jmp	#LR__3474
290ac     01 2C 56 F2 | 	cmps	local04, #1 wc
290b0     50 00 90 CD |  if_b	jmp	#LR__3473
290b4     16 31 02 F6 | 	mov	local06, local04
290b8                 | LR__3472
290b8     13 33 02 F6 | 	mov	local07, local01
290bc     13 35 02 F6 | 	mov	local08, local01
290c0     13 32 46 F7 | 	zerox	local07, #19
290c4     14 34 46 F0 | 	shr	local08, #20
290c8     02 34 66 F0 | 	shl	local08, #2
290cc     ED 34 02 F1 | 	add	local08, __methods__
290d0     1A 35 02 FB | 	rdlong	local08, local08
290d4     15 13 C2 FA | 	rdbyte	arg01, local03
290d8     F2 36 02 F6 | 	mov	local09, objptr
290dc     19 E5 01 F6 | 	mov	objptr, local07
290e0     01 2A 06 F1 | 	add	local03, #1
290e4     2D 34 62 FD | 	call	local08
290e8     1B E5 01 F6 | 	mov	objptr, local09
290ec     FD 36 02 F6 | 	mov	local09, result1
290f0     00 36 56 F2 | 	cmps	local09, #0 wc
290f4     1B FB 01 C6 |  if_b	mov	result1, local09
290f8     30 00 90 CD |  if_b	jmp	#LR__3474
290fc     1B 2F 02 F1 | 	add	local05, local09
29100     ED 31 6E FB | 	djnz	local06, #LR__3472
29104                 | LR__3473
29104     14 15 02 F6 | 	mov	arg02, local02
29108     16 17 02 F6 | 	mov	arg03, local04
2910c     13 13 02 F6 | 	mov	arg01, local01
29110     01 18 06 F6 | 	mov	arg04, #1
29114     4C 49 B0 FD | 	call	#__system___fmtpad
29118     FD 36 02 F6 | 	mov	local09, result1
2911c     00 36 56 F2 | 	cmps	local09, #0 wc
29120     1B FB 01 C6 |  if_b	mov	result1, local09
29124     1B 2F 02 31 |  if_ae	add	local05, local09
29128     17 FB 01 36 |  if_ae	mov	result1, local05
2912c                 | LR__3474
2912c     A7 F0 03 F6 | 	mov	ptra, fp
29130     B2 00 A0 FD | 	call	#popregs_
29134                 | __system___fmtstr_ret
29134     2D 00 64 FD | 	ret
29138                 | 
29138                 | __system___fmtnum
29138     0B 4A 05 F6 | 	mov	COUNT_, #11
2913c     A8 00 A0 FD | 	call	#pushregs_
29140     09 27 02 F6 | 	mov	local01, arg01
29144     0A 29 02 F6 | 	mov	local02, arg02
29148     0B 2B 02 F6 | 	mov	local03, arg03
2914c     0C 2D 02 F6 | 	mov	local04, arg04
29150     F8 2F 02 F6 | 	mov	local05, ptra
29154     17 31 02 F6 | 	mov	local06, local05
29158     00 32 06 F6 | 	mov	local07, #0
2915c     14 35 02 F6 | 	mov	local08, local02
29160     10 34 46 F0 | 	shr	local08, #16
29164     3F 34 06 F5 | 	and	local08, #63
29168     14 37 E2 F8 | 	getbyte	local09, local02, #0
2916c     14 39 02 F6 | 	mov	local10, local02
29170     1A 38 46 F0 | 	shr	local10, #26
29174     03 38 06 F5 | 	and	local10, #3
29178     1C 3B 02 F6 | 	mov	local11, local10
2917c     01 34 56 F2 | 	cmps	local08, #1 wc
29180     44 F0 07 F1 | 	add	ptra, #68
29184     01 34 86 31 |  if_ae	sub	local08, #1
29188     41 36 56 F2 | 	cmps	local09, #65 wc
2918c     00 36 0E C2 |  if_b	cmp	local09, #0 wz
29190     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
29194     03 3A 0E F2 | 	cmp	local11, #3 wz
29198     00 3A 06 A6 |  if_e	mov	local11, #0
2919c     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
291a0     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
291a4     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
291a8     00 3A 0E F2 | 	cmp	local11, #0 wz
291ac     4C 00 90 AD |  if_e	jmp	#LR__3483
291b0     01 32 06 F6 | 	mov	local07, #1
291b4     1B 35 0A F2 | 	cmp	local08, local09 wz
291b8     18 00 90 5D |  if_ne	jmp	#LR__3481
291bc     05 34 6E FB | 	djnz	local08, #LR__3480
291c0     13 13 02 F6 | 	mov	arg01, local01
291c4     14 15 02 F6 | 	mov	arg02, local02
291c8     23 16 06 F6 | 	mov	arg03, #35
291cc     24 FE BF FD | 	call	#__system___fmtchar
291d0     88 00 90 FD | 	jmp	#LR__3487
291d4                 | LR__3480
291d4                 | LR__3481
291d4     02 3A 0E F2 | 	cmp	local11, #2 wz
291d8     18 39 02 A6 |  if_e	mov	local10, local06
291dc     01 30 06 A1 |  if_e	add	local06, #1
291e0     1C 41 48 AC |  if_e	wrbyte	#32, local10
291e4     14 00 90 AD |  if_e	jmp	#LR__3482
291e8     04 3A 0E F2 | 	cmp	local11, #4 wz
291ec     18 5B 48 AC |  if_e	wrbyte	#45, local06
291f0     01 30 06 A1 |  if_e	add	local06, #1
291f4     18 57 48 5C |  if_ne	wrbyte	#43, local06
291f8     01 30 06 51 |  if_ne	add	local06, #1
291fc                 | LR__3482
291fc                 | LR__3483
291fc     18 13 02 F6 | 	mov	arg01, local06
29200     15 15 02 F6 | 	mov	arg02, local03
29204     16 17 02 F6 | 	mov	arg03, local04
29208     1A 19 02 F6 | 	mov	arg04, local08
2920c     00 1A 06 F6 | 	mov	arg05, #0
29210     1D 28 2E F4 | 	testbn	local02, #29 wz
29214     01 1A 06 56 |  if_ne	mov	arg05, #1
29218     10 49 B0 FD | 	call	#__system___uitoa
2921c     FD 32 02 F1 | 	add	local07, result1
29220     1B 33 5A F2 | 	cmps	local07, local09 wcz
29224     24 00 90 ED |  if_be	jmp	#LR__3486
29228     97 0E 48 FB | 	callpa	#(@LR__3485-@LR__3484)>>2,fcache_load_ptr_
2922c                 | LR__3484
2922c     1B 39 02 F6 | 	mov	local10, local09
29230     01 38 56 F2 | 	cmps	local10, #1 wc
29234     01 36 86 F1 | 	sub	local09, #1
29238     18 39 02 36 |  if_ae	mov	local10, local06
2923c     01 30 06 31 |  if_ae	add	local06, #1
29240     1C 47 48 3C |  if_ae	wrbyte	#35, local10
29244     E4 FF 9F 3D |  if_ae	jmp	#LR__3484
29248                 | LR__3485
29248     18 01 48 FC | 	wrbyte	#0, local06
2924c                 | LR__3486
2924c     13 13 02 F6 | 	mov	arg01, local01
29250     14 15 02 F6 | 	mov	arg02, local02
29254     17 17 02 F6 | 	mov	arg03, local05
29258     F0 FD BF FD | 	call	#__system___fmtstr
2925c                 | LR__3487
2925c     A7 F0 03 F6 | 	mov	ptra, fp
29260     B2 00 A0 FD | 	call	#popregs_
29264                 | __system___fmtnum_ret
29264     2D 00 64 FD | 	ret
29268                 | 
29268                 | __system___fmtfloat
29268     10 4A 05 F6 | 	mov	COUNT_, #16
2926c     A8 00 A0 FD | 	call	#pushregs_
29270     24 F1 07 F1 | 	add	ptra, #292
29274     04 4E 05 F1 | 	add	fp, #4
29278     A7 12 62 FC | 	wrlong	arg01, fp
2927c     04 4E 05 F1 | 	add	fp, #4
29280     A7 14 62 FC | 	wrlong	arg02, fp
29284     04 4E 05 F1 | 	add	fp, #4
29288     A7 16 62 FC | 	wrlong	arg03, fp
2928c     04 4E 05 F1 | 	add	fp, #4
29290     A7 18 62 FC | 	wrlong	arg04, fp
29294     0C 4E 05 F1 | 	add	fp, #12
29298     A7 14 68 FC | 	wrlong	#10, fp
2929c     08 4E 05 F1 | 	add	fp, #8
292a0     A7 00 68 FC | 	wrlong	#0, fp
292a4     08 4E 05 F1 | 	add	fp, #8
292a8     A7 00 68 FC | 	wrlong	#0, fp
292ac     08 4E 05 F1 | 	add	fp, #8
292b0     A7 00 68 FC | 	wrlong	#0, fp
292b4     04 4E 05 F1 | 	add	fp, #4
292b8     A7 04 68 FC | 	wrlong	#2, fp
292bc     04 4E 05 F1 | 	add	fp, #4
292c0     A7 00 68 FC | 	wrlong	#0, fp
292c4     04 4E 05 F1 | 	add	fp, #4
292c8     A7 00 68 FC | 	wrlong	#0, fp
292cc     04 4E 05 F1 | 	add	fp, #4
292d0     A7 00 68 FC | 	wrlong	#0, fp
292d4     04 4E 05 F1 | 	add	fp, #4
292d8     A7 00 68 FC | 	wrlong	#0, fp
292dc     18 4E 05 F1 | 	add	fp, #24
292e0     A7 00 68 FC | 	wrlong	#0, fp
292e4     68 4E 05 F1 | 	add	fp, #104
292e8     A7 26 02 F6 | 	mov	local01, fp
292ec     08 4E 85 F1 | 	sub	fp, #8
292f0     A7 26 62 FC | 	wrlong	local01, fp
292f4     04 4E 05 F1 | 	add	fp, #4
292f8     A7 26 62 FC | 	wrlong	local01, fp
292fc     BC 4E 85 F1 | 	sub	fp, #188
29300     A7 26 02 FB | 	rdlong	local01, fp
29304     10 26 46 F0 | 	shr	local01, #16
29308     3F 26 06 F5 | 	and	local01, #63
2930c     B0 4E 05 F1 | 	add	fp, #176
29310     A7 26 62 FC | 	wrlong	local01, fp
29314     B0 4E 85 F1 | 	sub	fp, #176
29318     A7 26 02 FB | 	rdlong	local01, fp
2931c     1C 26 46 F0 | 	shr	local01, #28
29320     01 26 06 F5 | 	and	local01, #1
29324     08 4F 05 F1 | 	add	fp, #264
29328     A7 26 62 FC | 	wrlong	local01, fp
2932c     58 4E 85 F1 | 	sub	fp, #88
29330     A7 26 0A FB | 	rdlong	local01, fp wz
29334     B8 4E 85 F1 | 	sub	fp, #184
29338     3C 00 90 5D |  if_ne	jmp	#LR__3491
2933c     10 4E 05 F1 | 	add	fp, #16
29340     A7 26 02 FB | 	rdlong	local01, fp
29344     10 4E 85 F1 | 	sub	fp, #16
29348     61 26 0E F2 | 	cmp	local01, #97 wz
2934c     18 00 90 5D |  if_ne	jmp	#LR__3490
29350     B8 4E 05 F1 | 	add	fp, #184
29354     A7 1A 68 FC | 	wrlong	#13, fp
29358     84 4E 85 F1 | 	sub	fp, #132
2935c     A7 02 68 FC | 	wrlong	#1, fp
29360     34 4E 85 F1 | 	sub	fp, #52
29364     24 00 90 FD | 	jmp	#LR__3492
29368                 | LR__3490
29368     B8 4E 05 F1 | 	add	fp, #184
2936c     A7 0C 68 FC | 	wrlong	#6, fp
29370     B8 4E 85 F1 | 	sub	fp, #184
29374     14 00 90 FD | 	jmp	#LR__3492
29378                 | LR__3491
29378     B8 4E 05 F1 | 	add	fp, #184
2937c     A7 26 02 FB | 	rdlong	local01, fp
29380     01 26 86 F1 | 	sub	local01, #1
29384     A7 26 62 FC | 	wrlong	local01, fp
29388     B8 4E 85 F1 | 	sub	fp, #184
2938c                 | LR__3492
2938c     08 4E 05 F1 | 	add	fp, #8
29390     A7 26 02 FB | 	rdlong	local01, fp
29394     16 26 46 F0 | 	shr	local01, #22
29398     03 26 06 F5 | 	and	local01, #3
2939c     04 4F 05 F1 | 	add	fp, #260
293a0     A7 26 62 FC | 	wrlong	local01, fp
293a4     04 4F 85 F1 | 	sub	fp, #260
293a8     A7 26 02 FB | 	rdlong	local01, fp
293ac     1D 26 46 F0 | 	shr	local01, #29
293b0     01 26 06 F5 | 	and	local01, #1
293b4     B4 4E 05 F1 | 	add	fp, #180
293b8     A7 26 62 FC | 	wrlong	local01, fp
293bc     B4 4E 85 F1 | 	sub	fp, #180
293c0     A7 26 02 FB | 	rdlong	local01, fp
293c4     13 27 EA F8 | 	getbyte	local01, local01, #1
293c8     60 4E 05 F1 | 	add	fp, #96
293cc     A7 26 62 FC | 	wrlong	local01, fp
293d0     60 4E 85 F1 | 	sub	fp, #96
293d4     A7 26 02 FB | 	rdlong	local01, fp
293d8     13 27 E2 F8 | 	getbyte	local01, local01, #0
293dc     64 4E 05 F1 | 	add	fp, #100
293e0     A7 26 62 FC | 	wrlong	local01, fp
293e4     00 26 06 F6 | 	mov	local01, #0
293e8     5C 4E 85 F1 | 	sub	fp, #92
293ec     A7 1A 02 FB | 	rdlong	arg05, fp
293f0     65 1A 0E F2 | 	cmp	arg05, #101 wz
293f4     01 26 06 A6 |  if_e	mov	local01, #1
293f8     14 4E 05 F1 | 	add	fp, #20
293fc     A7 26 62 FC | 	wrlong	local01, fp
29400     98 4E 05 F1 | 	add	fp, #152
29404     A7 28 0A FB | 	rdlong	local02, fp wz
29408     45 26 06 56 |  if_ne	mov	local01, #69
2940c     65 26 06 A6 |  if_e	mov	local01, #101
29410     8C 4E 85 F1 | 	sub	fp, #140
29414     A7 26 62 FC | 	wrlong	local01, fp
29418     20 4E 85 F1 | 	sub	fp, #32
2941c     A7 26 02 FB | 	rdlong	local01, fp
29420     10 4E 85 F1 | 	sub	fp, #16
29424     61 26 0E F2 | 	cmp	local01, #97 wz
29428     4C 00 90 5D |  if_ne	jmp	#LR__3493
2942c     24 4E 05 F1 | 	add	fp, #36
29430     A7 02 68 FC | 	wrlong	#1, fp
29434     98 4E 05 F1 | 	add	fp, #152
29438     A7 28 0A FB | 	rdlong	local02, fp wz
2943c     50 26 06 56 |  if_ne	mov	local01, #80
29440     70 26 06 A6 |  if_e	mov	local01, #112
29444     8C 4E 85 F1 | 	sub	fp, #140
29448     A7 26 62 FC | 	wrlong	local01, fp
2944c     14 4E 85 F1 | 	sub	fp, #20
29450     A7 04 68 FC | 	wrlong	#2, fp
29454     1C 4E 05 F1 | 	add	fp, #28
29458     A7 02 68 FC | 	wrlong	#1, fp
2945c     84 4E 05 F1 | 	add	fp, #132
29460     A7 28 0A FB | 	rdlong	local02, fp wz
29464     58 26 06 56 |  if_ne	mov	local01, #88
29468     78 26 06 A6 |  if_e	mov	local01, #120
2946c     7C 4E 85 F1 | 	sub	fp, #124
29470     A7 26 62 FC | 	wrlong	local01, fp
29474     40 4E 85 F1 | 	sub	fp, #64
29478                 | LR__3493
29478     10 4E 05 F1 | 	add	fp, #16
2947c     A7 26 02 FB | 	rdlong	local01, fp
29480     10 4E 85 F1 | 	sub	fp, #16
29484     23 26 0E F2 | 	cmp	local01, #35 wz
29488     3C 00 90 5D |  if_ne	jmp	#LR__3496
2948c     48 4E 05 F1 | 	add	fp, #72
29490     A7 02 68 FC | 	wrlong	#1, fp
29494     C8 4E 05 F1 | 	add	fp, #200
29498     A7 26 0A FB | 	rdlong	local01, fp wz
2949c     10 4F 85 F1 | 	sub	fp, #272
294a0     18 00 90 AD |  if_e	jmp	#LR__3494
294a4     10 4E 05 F1 | 	add	fp, #16
294a8     A7 CC 68 FC | 	wrlong	#102, fp
294ac     00 4F 05 F1 | 	add	fp, #256
294b0     A7 00 68 FC | 	wrlong	#0, fp
294b4     10 4F 85 F1 | 	sub	fp, #272
294b8     0C 00 90 FD | 	jmp	#LR__3495
294bc                 | LR__3494
294bc     10 4F 05 F1 | 	add	fp, #272
294c0     A7 02 68 FC | 	wrlong	#1, fp
294c4     10 4F 85 F1 | 	sub	fp, #272
294c8                 | LR__3495
294c8                 | LR__3496
294c8     08 4E 05 F1 | 	add	fp, #8
294cc     A7 26 02 FB | 	rdlong	local01, fp
294d0     1A 26 46 F0 | 	shr	local01, #26
294d4     03 26 06 F5 | 	and	local01, #3
294d8     5C 4E 05 F1 | 	add	fp, #92
294dc     A7 26 62 FC | 	wrlong	local01, fp
294e0     58 4E 85 F1 | 	sub	fp, #88
294e4     A7 FA 01 FB | 	rdlong	result1, fp
294e8     0C 4E 85 F1 | 	sub	fp, #12
294ec     1F FA 4D F0 | 	shr	result1, #31 wz
294f0     20 00 90 AD |  if_e	jmp	#LR__3497
294f4     2C 4E 05 F1 | 	add	fp, #44
294f8     A7 5A 68 FC | 	wrlong	#45, fp
294fc     20 4E 85 F1 | 	sub	fp, #32
29500     A7 FA 01 FB | 	rdlong	result1, fp
29504     1F FA E5 F4 | 	bitnot	result1, #31
29508     A7 FA 61 FC | 	wrlong	result1, fp
2950c     0C 4E 85 F1 | 	sub	fp, #12
29510     3C 00 90 FD | 	jmp	#LR__3499
29514                 | LR__3497
29514     64 4E 05 F1 | 	add	fp, #100
29518     A7 26 02 FB | 	rdlong	local01, fp
2951c     64 4E 85 F1 | 	sub	fp, #100
29520     01 26 0E F2 | 	cmp	local01, #1 wz
29524     2C 4E 05 A1 |  if_e	add	fp, #44
29528     A7 56 68 AC |  if_e	wrlong	#43, fp
2952c     2C 4E 85 A1 |  if_e	sub	fp, #44
29530     1C 00 90 AD |  if_e	jmp	#LR__3498
29534     64 4E 05 F1 | 	add	fp, #100
29538     A7 26 02 FB | 	rdlong	local01, fp
2953c     64 4E 85 F1 | 	sub	fp, #100
29540     02 26 0E F2 | 	cmp	local01, #2 wz
29544     2C 4E 05 A1 |  if_e	add	fp, #44
29548     A7 40 68 AC |  if_e	wrlong	#32, fp
2954c     2C 4E 85 A1 |  if_e	sub	fp, #44
29550                 | LR__3498
29550                 | LR__3499
29550     08 4E 05 F1 | 	add	fp, #8
29554     A7 26 02 FB | 	rdlong	local01, fp
29558     18 26 46 F0 | 	shr	local01, #24
2955c     03 26 06 F5 | 	and	local01, #3
29560     3C 4E 05 F1 | 	add	fp, #60
29564     A7 26 62 FC | 	wrlong	local01, fp
29568     00 26 06 F6 | 	mov	local01, #0
2956c     18 4E 85 F1 | 	sub	fp, #24
29570     A7 2A 0A FB | 	rdlong	local03, fp wz
29574     2C 4E 85 F1 | 	sub	fp, #44
29578     18 00 90 5D |  if_ne	jmp	#LR__3500
2957c     1C 4E 05 F1 | 	add	fp, #28
29580     A7 2C 02 FB | 	rdlong	local04, fp
29584     1C 4E 85 F1 | 	sub	fp, #28
29588     16 2F 02 F6 | 	mov	local05, local04
2958c     0A 2E 0E F2 | 	cmp	local05, #10 wz
29590     04 00 90 AD |  if_e	jmp	#LR__3501
29594                 | LR__3500
29594     01 26 66 F5 | 	xor	local01, #1
29598                 | LR__3501
29598     3C 4E 05 F1 | 	add	fp, #60
2959c     A7 26 62 FC | 	wrlong	local01, fp
295a0     3C 4E 85 F1 | 	sub	fp, #60
295a4     00 26 0E F2 | 	cmp	local01, #0 wz
295a8     0C 01 90 AD |  if_e	jmp	#LR__3503
295ac     44 4E 05 F1 | 	add	fp, #68
295b0     A7 2E 02 FB | 	rdlong	local05, fp
295b4     44 4E 85 F1 | 	sub	fp, #68
295b8     17 2B 02 F6 | 	mov	local03, local05
295bc     02 2A 0E F2 | 	cmp	local03, #2 wz
295c0     F4 00 90 5D |  if_ne	jmp	#LR__3503
295c4     0C 4F 05 F1 | 	add	fp, #268
295c8     A7 30 02 FB | 	rdlong	local06, fp
295cc     0C 4F 85 F1 | 	sub	fp, #268
295d0     18 2D 02 F6 | 	mov	local04, local06
295d4     02 2C 0E F2 | 	cmp	local04, #2 wz
295d8     DC 00 90 AD |  if_e	jmp	#LR__3503
295dc     C0 4E 05 F1 | 	add	fp, #192
295e0     A7 12 02 FB | 	rdlong	arg01, fp
295e4     94 4E 85 F1 | 	sub	fp, #148
295e8     A7 14 02 FB | 	rdlong	arg02, fp
295ec     14 4E 05 F1 | 	add	fp, #20
295f0     A7 16 02 FB | 	rdlong	arg03, fp
295f4     40 4E 85 F1 | 	sub	fp, #64
295f8     98 47 B0 FD | 	call	#__system__emitsign_0582
295fc     14 4F 05 F1 | 	add	fp, #276
29600     A7 FA 61 FC | 	wrlong	result1, fp
29604     14 4F 85 F1 | 	sub	fp, #276
29608     00 FA 55 F2 | 	cmps	result1, #0 wc
2960c     14 4F 05 C1 |  if_b	add	fp, #276
29610     A7 FA 01 CB |  if_b	rdlong	result1, fp
29614     14 4F 85 C1 |  if_b	sub	fp, #276
29618     6C 0B 90 CD |  if_b	jmp	#LR__3553
2961c     C0 4E 05 F1 | 	add	fp, #192
29620     A7 26 02 FB | 	rdlong	local01, fp
29624     54 4E 05 F1 | 	add	fp, #84
29628     A7 2E 02 FB | 	rdlong	local05, fp
2962c     17 2B 02 F6 | 	mov	local03, local05
29630     17 27 02 F1 | 	add	local01, local05
29634     54 4E 85 F1 | 	sub	fp, #84
29638     A7 26 62 FC | 	wrlong	local01, fp
2963c     58 4E 85 F1 | 	sub	fp, #88
29640     A7 26 0A FB | 	rdlong	local01, fp wz
29644     68 4E 85 F1 | 	sub	fp, #104
29648     60 00 90 AD |  if_e	jmp	#LR__3502
2964c     68 4E 05 F1 | 	add	fp, #104
29650     A7 26 02 FB | 	rdlong	local01, fp
29654     AC 4E 05 F1 | 	add	fp, #172
29658     A7 2A 02 FB | 	rdlong	local03, fp
2965c     15 27 82 F1 | 	sub	local01, local03
29660     AC 4E 85 F1 | 	sub	fp, #172
29664     A7 26 62 FC | 	wrlong	local01, fp
29668     68 4E 85 F1 | 	sub	fp, #104
2966c     00 26 56 F2 | 	cmps	local01, #0 wc
29670     68 4E 05 C1 |  if_b	add	fp, #104
29674     A7 00 68 CC |  if_b	wrlong	#0, fp
29678     68 4E 85 C1 |  if_b	sub	fp, #104
2967c     08 4E 05 F1 | 	add	fp, #8
29680     A7 26 02 FB | 	rdlong	local01, fp
29684     E8 26 06 F4 | 	bitl	local01, #232
29688     A7 26 62 FC | 	wrlong	local01, fp
2968c     60 4E 05 F1 | 	add	fp, #96
29690     A7 2E 02 FB | 	rdlong	local05, fp
29694     17 2B 02 F6 | 	mov	local03, local05
29698     08 2A 66 F0 | 	shl	local03, #8
2969c     15 27 42 F5 | 	or	local01, local03
296a0     60 4E 85 F1 | 	sub	fp, #96
296a4     A7 26 62 FC | 	wrlong	local01, fp
296a8     08 4E 85 F1 | 	sub	fp, #8
296ac                 | LR__3502
296ac     3C 4E 05 F1 | 	add	fp, #60
296b0     A7 00 68 FC | 	wrlong	#0, fp
296b4     3C 4E 85 F1 | 	sub	fp, #60
296b8                 | LR__3503
296b8     0C 4E 05 F1 | 	add	fp, #12
296bc     A7 12 02 FB | 	rdlong	arg01, fp
296c0     0C 4E 85 F1 | 	sub	fp, #12
296c4     F0 21 B0 FD | 	call	#__system____builtin_ilogb
296c8     FF FF 3F FF 
296cc     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
296d0     50 00 90 5D |  if_ne	jmp	#LR__3505
296d4     2C 4E 05 F1 | 	add	fp, #44
296d8     A7 26 0A FB | 	rdlong	local01, fp wz
296dc     2C 4E 85 F1 | 	sub	fp, #44
296e0     24 00 90 AD |  if_e	jmp	#LR__3504
296e4     C0 4E 05 F1 | 	add	fp, #192
296e8     A7 28 02 FB | 	rdlong	local02, fp
296ec     14 2B 02 F6 | 	mov	local03, local02
296f0     01 2A 06 F1 | 	add	local03, #1
296f4     A7 2A 62 FC | 	wrlong	local03, fp
296f8     94 4E 85 F1 | 	sub	fp, #148
296fc     A7 2C 02 FB | 	rdlong	local04, fp
29700     2C 4E 85 F1 | 	sub	fp, #44
29704     14 2D 42 FC | 	wrbyte	local04, local02
29708                 | LR__3504
29708     C0 4E 05 F1 | 	add	fp, #192
2970c     A7 12 02 FB | 	rdlong	arg01, fp
29710     C0 4E 85 F1 | 	sub	fp, #192
29714     BE 01 00 FF 
29718     32 14 06 F6 | 	mov	arg02, ##@LR__5511
2971c     A8 E9 BF FD | 	call	#__system____builtin_strcpy
29720     A4 08 90 FD | 	jmp	#LR__3541
29724                 | LR__3505
29724     0C 4E 05 F1 | 	add	fp, #12
29728     A7 28 02 FB | 	rdlong	local02, fp
2972c     0C 4E 85 F1 | 	sub	fp, #12
29730     14 13 02 F6 | 	mov	arg01, local02
29734     80 21 B0 FD | 	call	#__system____builtin_ilogb
29738     00 00 40 FF 
2973c     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
29740     50 00 90 5D |  if_ne	jmp	#LR__3507
29744     2C 4E 05 F1 | 	add	fp, #44
29748     A7 26 0A FB | 	rdlong	local01, fp wz
2974c     2C 4E 85 F1 | 	sub	fp, #44
29750     24 00 90 AD |  if_e	jmp	#LR__3506
29754     C0 4E 05 F1 | 	add	fp, #192
29758     A7 28 02 FB | 	rdlong	local02, fp
2975c     14 2B 02 F6 | 	mov	local03, local02
29760     01 2A 06 F1 | 	add	local03, #1
29764     A7 2A 62 FC | 	wrlong	local03, fp
29768     94 4E 85 F1 | 	sub	fp, #148
2976c     A7 2C 02 FB | 	rdlong	local04, fp
29770     2C 4E 85 F1 | 	sub	fp, #44
29774     14 2D 42 FC | 	wrbyte	local04, local02
29778                 | LR__3506
29778     C0 4E 05 F1 | 	add	fp, #192
2977c     A7 12 02 FB | 	rdlong	arg01, fp
29780     C0 4E 85 F1 | 	sub	fp, #192
29784     BE 01 00 FF 
29788     36 14 06 F6 | 	mov	arg02, ##@LR__5512
2978c     38 E9 BF FD | 	call	#__system____builtin_strcpy
29790     34 08 90 FD | 	jmp	#LR__3541
29794                 | LR__3507
29794     10 4E 05 F1 | 	add	fp, #16
29798     A7 26 02 FB | 	rdlong	local01, fp
2979c     10 4E 85 F1 | 	sub	fp, #16
297a0     67 26 0E F2 | 	cmp	local01, #103 wz
297a4     10 4E 05 51 |  if_ne	add	fp, #16
297a8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
297ac     10 4E 85 51 |  if_ne	sub	fp, #16
297b0     23 2A 0E 52 |  if_ne	cmp	local03, #35 wz
297b4     94 01 90 5D |  if_ne	jmp	#LR__3512
297b8     0C 4E 05 F1 | 	add	fp, #12
297bc     A7 12 02 FB | 	rdlong	arg01, fp
297c0     08 4E 05 F1 | 	add	fp, #8
297c4     A7 14 02 F6 | 	mov	arg02, fp
297c8     0C 4E 05 F1 | 	add	fp, #12
297cc     A7 16 02 F6 | 	mov	arg03, fp
297d0     98 4E 05 F1 | 	add	fp, #152
297d4     A7 18 02 FB | 	rdlong	arg04, fp
297d8     9C 4E 85 F1 | 	sub	fp, #156
297dc     A7 1A 02 FB | 	rdlong	arg05, fp
297e0     1C 4E 85 F1 | 	sub	fp, #28
297e4     B8 43 B0 FD | 	call	#__system__disassemble_0580
297e8     10 4E 05 F1 | 	add	fp, #16
297ec     A7 26 02 FB | 	rdlong	local01, fp
297f0     10 4E 85 F1 | 	sub	fp, #16
297f4     23 26 0E F2 | 	cmp	local01, #35 wz
297f8     A0 00 90 5D |  if_ne	jmp	#LR__3509
297fc     20 4E 05 F1 | 	add	fp, #32
29800     A7 26 02 FB | 	rdlong	local01, fp
29804     98 4E 05 F1 | 	add	fp, #152
29808     A7 2A 02 FB | 	rdlong	local03, fp
2980c     B8 4E 85 F1 | 	sub	fp, #184
29810     15 27 5A F2 | 	cmps	local01, local03 wcz
29814     24 4E 05 11 |  if_a	add	fp, #36
29818     A7 02 68 1C |  if_a	wrlong	#1, fp
2981c     24 4E 85 11 |  if_a	sub	fp, #36
29820     A4 01 90 1D |  if_a	jmp	#LR__3515
29824     20 4E 05 F1 | 	add	fp, #32
29828     A7 26 02 FB | 	rdlong	local01, fp
2982c     20 4E 85 F1 | 	sub	fp, #32
29830     00 26 56 F2 | 	cmps	local01, #0 wc
29834     2C 00 90 3D |  if_ae	jmp	#LR__3508
29838     B8 4E 05 F1 | 	add	fp, #184
2983c     A7 26 02 FB | 	rdlong	local01, fp
29840     13 27 62 F6 | 	neg	local01, local01
29844     98 4E 85 F1 | 	sub	fp, #152
29848     A7 2A 02 FB | 	rdlong	local03, fp
2984c     20 4E 85 F1 | 	sub	fp, #32
29850     13 2B 5A F2 | 	cmps	local03, local01 wcz
29854     24 4E 05 E1 |  if_be	add	fp, #36
29858     A7 02 68 EC |  if_be	wrlong	#1, fp
2985c     24 4E 85 E1 |  if_be	sub	fp, #36
29860     64 01 90 FD | 	jmp	#LR__3515
29864                 | LR__3508
29864     20 4E 05 F1 | 	add	fp, #32
29868     A7 26 02 FB | 	rdlong	local01, fp
2986c     20 4E 85 F1 | 	sub	fp, #32
29870     01 26 56 F2 | 	cmps	local01, #1 wc
29874     50 01 90 CD |  if_b	jmp	#LR__3515
29878     B8 4E 05 F1 | 	add	fp, #184
2987c     A7 26 02 FB | 	rdlong	local01, fp
29880     98 4E 85 F1 | 	sub	fp, #152
29884     A7 2A 02 FB | 	rdlong	local03, fp
29888     15 27 82 F1 | 	sub	local01, local03
2988c     98 4E 05 F1 | 	add	fp, #152
29890     A7 26 62 FC | 	wrlong	local01, fp
29894     B8 4E 85 F1 | 	sub	fp, #184
29898     2C 01 90 FD | 	jmp	#LR__3515
2989c                 | LR__3509
2989c     00 26 06 F6 | 	mov	local01, #0
298a0     08 4E 05 F1 | 	add	fp, #8
298a4     A7 28 02 FB | 	rdlong	local02, fp
298a8     1C 28 46 F0 | 	shr	local02, #28
298ac     01 28 0E F5 | 	and	local02, #1 wz
298b0     01 26 06 A6 |  if_e	mov	local01, #1
298b4     2C 4E 05 F1 | 	add	fp, #44
298b8     A7 26 62 FC | 	wrlong	local01, fp
298bc     14 4E 85 F1 | 	sub	fp, #20
298c0     A7 26 02 FB | 	rdlong	local01, fp
298c4     98 4E 05 F1 | 	add	fp, #152
298c8     A7 2A 02 FB | 	rdlong	local03, fp
298cc     B8 4E 85 F1 | 	sub	fp, #184
298d0     15 27 52 F2 | 	cmps	local01, local03 wc
298d4     18 00 90 3D |  if_ae	jmp	#LR__3510
298d8     20 4E 05 F1 | 	add	fp, #32
298dc     A7 2C 02 FB | 	rdlong	local04, fp
298e0     20 4E 85 F1 | 	sub	fp, #32
298e4     FF FF 7F FF 
298e8     FC 2D 56 F2 | 	cmps	local04, ##-4 wc
298ec     10 00 90 3D |  if_ae	jmp	#LR__3511
298f0                 | LR__3510
298f0     24 4E 05 F1 | 	add	fp, #36
298f4     A7 02 68 FC | 	wrlong	#1, fp
298f8     24 4E 85 F1 | 	sub	fp, #36
298fc     C8 00 90 FD | 	jmp	#LR__3515
29900                 | LR__3511
29900     B8 4E 05 F1 | 	add	fp, #184
29904     A7 2C 02 FB | 	rdlong	local04, fp
29908     98 4E 85 F1 | 	sub	fp, #152
2990c     A7 2A 02 FB | 	rdlong	local03, fp
29910     15 2D 82 F1 | 	sub	local04, local03
29914     98 4E 05 F1 | 	add	fp, #152
29918     A7 2C 62 FC | 	wrlong	local04, fp
2991c     AC 4E 85 F1 | 	sub	fp, #172
29920     A7 12 02 FB | 	rdlong	arg01, fp
29924     08 4E 05 F1 | 	add	fp, #8
29928     A7 14 02 F6 | 	mov	arg02, fp
2992c     0C 4E 05 F1 | 	add	fp, #12
29930     A7 16 02 F6 | 	mov	arg03, fp
29934     16 19 62 F6 | 	neg	arg04, local04
29938     04 4E 85 F1 | 	sub	fp, #4
2993c     A7 1A 02 FB | 	rdlong	arg05, fp
29940     1C 4E 85 F1 | 	sub	fp, #28
29944     58 42 B0 FD | 	call	#__system__disassemble_0580
29948     7C 00 90 FD | 	jmp	#LR__3515
2994c                 | LR__3512
2994c     24 4E 05 F1 | 	add	fp, #36
29950     A7 26 0A FB | 	rdlong	local01, fp wz
29954     24 4E 85 F1 | 	sub	fp, #36
29958     34 00 90 AD |  if_e	jmp	#LR__3513
2995c     0C 4E 05 F1 | 	add	fp, #12
29960     A7 12 02 FB | 	rdlong	arg01, fp
29964     08 4E 05 F1 | 	add	fp, #8
29968     A7 14 02 F6 | 	mov	arg02, fp
2996c     0C 4E 05 F1 | 	add	fp, #12
29970     A7 16 02 F6 | 	mov	arg03, fp
29974     98 4E 05 F1 | 	add	fp, #152
29978     A7 18 02 FB | 	rdlong	arg04, fp
2997c     9C 4E 85 F1 | 	sub	fp, #156
29980     A7 1A 02 FB | 	rdlong	arg05, fp
29984     1C 4E 85 F1 | 	sub	fp, #28
29988     14 42 B0 FD | 	call	#__system__disassemble_0580
2998c     38 00 90 FD | 	jmp	#LR__3514
29990                 | LR__3513
29990     0C 4E 05 F1 | 	add	fp, #12
29994     A7 12 02 FB | 	rdlong	arg01, fp
29998     08 4E 05 F1 | 	add	fp, #8
2999c     A7 14 02 F6 | 	mov	arg02, fp
299a0     0C 4E 05 F1 | 	add	fp, #12
299a4     A7 16 02 F6 | 	mov	arg03, fp
299a8     98 4E 05 F1 | 	add	fp, #152
299ac     A7 2C 02 FB | 	rdlong	local04, fp
299b0     01 2C 06 F1 | 	add	local04, #1
299b4     16 19 62 F6 | 	neg	arg04, local04
299b8     9C 4E 85 F1 | 	sub	fp, #156
299bc     A7 1A 02 FB | 	rdlong	arg05, fp
299c0     1C 4E 85 F1 | 	sub	fp, #28
299c4     D8 41 B0 FD | 	call	#__system__disassemble_0580
299c8                 | LR__3514
299c8                 | LR__3515
299c8     1C 4E 05 F1 | 	add	fp, #28
299cc     A7 26 02 FB | 	rdlong	local01, fp
299d0     1C 4E 85 F1 | 	sub	fp, #28
299d4     02 26 0E F2 | 	cmp	local01, #2 wz
299d8     4C 00 90 5D |  if_ne	jmp	#LR__3518
299dc     1C 4E 05 F1 | 	add	fp, #28
299e0     A7 20 68 FC | 	wrlong	#16, fp
299e4     1C 4E 85 F1 | 	sub	fp, #28
299e8                 | LR__3516
299e8     14 4E 05 F1 | 	add	fp, #20
299ec     A7 26 0A FB | 	rdlong	local01, fp wz
299f0     14 4E 85 F1 | 	sub	fp, #20
299f4     30 00 90 AD |  if_e	jmp	#LR__3517
299f8     14 4E 05 F1 | 	add	fp, #20
299fc     A7 2A 02 FB | 	rdlong	local03, fp
29a00     14 4E 85 F1 | 	sub	fp, #20
29a04     00 80 00 FF 
29a08     00 2A 16 F2 | 	cmp	local03, ##16777216 wc
29a0c     18 00 90 3D |  if_ae	jmp	#LR__3517
29a10     14 4E 05 F1 | 	add	fp, #20
29a14     A7 26 02 FB | 	rdlong	local01, fp
29a18     01 26 66 F0 | 	shl	local01, #1
29a1c     A7 26 62 FC | 	wrlong	local01, fp
29a20     14 4E 85 F1 | 	sub	fp, #20
29a24     C0 FF 9F FD | 	jmp	#LR__3516
29a28                 | LR__3517
29a28                 | LR__3518
29a28     70 4E 05 F1 | 	add	fp, #112
29a2c     A7 12 02 F6 | 	mov	arg01, fp
29a30     5C 4E 85 F1 | 	sub	fp, #92
29a34     A7 14 02 FB | 	rdlong	arg02, fp
29a38     08 4E 05 F1 | 	add	fp, #8
29a3c     A7 16 02 FB | 	rdlong	arg03, fp
29a40     A0 4E 05 F1 | 	add	fp, #160
29a44     A7 1A 02 FB | 	rdlong	arg05, fp
29a48     BC 4E 85 F1 | 	sub	fp, #188
29a4c     01 18 06 F6 | 	mov	arg04, #1
29a50     D8 40 B0 FD | 	call	#__system___uitoa
29a54     58 4E 05 F1 | 	add	fp, #88
29a58     A7 FA 61 FC | 	wrlong	result1, fp
29a5c     38 4E 85 F1 | 	sub	fp, #56
29a60     A7 26 02 FB | 	rdlong	local01, fp
29a64     20 4E 85 F1 | 	sub	fp, #32
29a68     00 26 56 F2 | 	cmps	local01, #0 wc
29a6c     50 00 90 3D |  if_ae	jmp	#LR__3519
29a70     60 4E 05 F1 | 	add	fp, #96
29a74     A7 5A 68 FC | 	wrlong	#45, fp
29a78     50 4E 05 F1 | 	add	fp, #80
29a7c     A7 12 02 F6 | 	mov	arg01, fp
29a80     90 4E 85 F1 | 	sub	fp, #144
29a84     A7 2A 02 FB | 	rdlong	local03, fp
29a88     15 15 62 F6 | 	neg	arg02, local03
29a8c     18 4E 05 F1 | 	add	fp, #24
29a90     A7 18 02 FB | 	rdlong	arg04, fp
29a94     84 4E 05 F1 | 	add	fp, #132
29a98     A7 30 02 FB | 	rdlong	local06, fp
29a9c     BC 4E 85 F1 | 	sub	fp, #188
29aa0     18 2D 02 F6 | 	mov	local04, local06
29aa4     0A 16 06 F6 | 	mov	arg03, #10
29aa8     16 1B 02 F6 | 	mov	arg05, local04
29aac     7C 40 B0 FD | 	call	#__system___uitoa
29ab0     5C 4E 05 F1 | 	add	fp, #92
29ab4     A7 FA 61 FC | 	wrlong	result1, fp
29ab8     5C 4E 85 F1 | 	sub	fp, #92
29abc     48 00 90 FD | 	jmp	#LR__3520
29ac0                 | LR__3519
29ac0     60 4E 05 F1 | 	add	fp, #96
29ac4     A7 56 68 FC | 	wrlong	#43, fp
29ac8     50 4E 05 F1 | 	add	fp, #80
29acc     A7 12 02 F6 | 	mov	arg01, fp
29ad0     90 4E 85 F1 | 	sub	fp, #144
29ad4     A7 14 02 FB | 	rdlong	arg02, fp
29ad8     18 4E 05 F1 | 	add	fp, #24
29adc     A7 18 02 FB | 	rdlong	arg04, fp
29ae0     84 4E 05 F1 | 	add	fp, #132
29ae4     A7 30 02 FB | 	rdlong	local06, fp
29ae8     BC 4E 85 F1 | 	sub	fp, #188
29aec     18 2D 02 F6 | 	mov	local04, local06
29af0     0A 16 06 F6 | 	mov	arg03, #10
29af4     16 1B 02 F6 | 	mov	arg05, local04
29af8     30 40 B0 FD | 	call	#__system___uitoa
29afc     5C 4E 05 F1 | 	add	fp, #92
29b00     A7 FA 61 FC | 	wrlong	result1, fp
29b04     5C 4E 85 F1 | 	sub	fp, #92
29b08                 | LR__3520
29b08     24 4E 05 F1 | 	add	fp, #36
29b0c     A7 26 0A FB | 	rdlong	local01, fp wz
29b10     24 4E 85 F1 | 	sub	fp, #36
29b14     2C 00 90 AD |  if_e	jmp	#LR__3521
29b18     50 4E 05 F1 | 	add	fp, #80
29b1c     A7 00 68 FC | 	wrlong	#0, fp
29b20     04 4E 85 F1 | 	sub	fp, #4
29b24     A7 00 68 FC | 	wrlong	#0, fp
29b28     6C 4E 05 F1 | 	add	fp, #108
29b2c     A7 26 02 FB | 	rdlong	local01, fp
29b30     01 26 06 F1 | 	add	local01, #1
29b34     64 4E 85 F1 | 	sub	fp, #100
29b38     A7 26 62 FC | 	wrlong	local01, fp
29b3c     54 4E 85 F1 | 	sub	fp, #84
29b40     88 00 90 FD | 	jmp	#LR__3524
29b44                 | LR__3521
29b44     20 4E 05 F1 | 	add	fp, #32
29b48     A7 26 02 FB | 	rdlong	local01, fp
29b4c     20 4E 85 F1 | 	sub	fp, #32
29b50     00 26 56 F2 | 	cmps	local01, #0 wc
29b54     40 00 90 3D |  if_ae	jmp	#LR__3522
29b58     20 4E 05 F1 | 	add	fp, #32
29b5c     A7 28 02 FB | 	rdlong	local02, fp
29b60     30 4E 05 F1 | 	add	fp, #48
29b64     A7 28 62 FC | 	wrlong	local02, fp
29b68     04 4E 85 F1 | 	sub	fp, #4
29b6c     A7 28 62 FC | 	wrlong	local02, fp
29b70     2C 4E 85 F1 | 	sub	fp, #44
29b74     A7 26 02 FB | 	rdlong	local01, fp
29b78     98 4E 05 F1 | 	add	fp, #152
29b7c     A7 2A 02 FB | 	rdlong	local03, fp
29b80     15 27 02 F1 | 	add	local01, local03
29b84     01 26 06 F1 | 	add	local01, #1
29b88     64 4E 85 F1 | 	sub	fp, #100
29b8c     A7 26 62 FC | 	wrlong	local01, fp
29b90     54 4E 85 F1 | 	sub	fp, #84
29b94     34 00 90 FD | 	jmp	#LR__3523
29b98                 | LR__3522
29b98     4C 4E 05 F1 | 	add	fp, #76
29b9c     A7 00 68 FC | 	wrlong	#0, fp
29ba0     2C 4E 85 F1 | 	sub	fp, #44
29ba4     A7 26 02 FB | 	rdlong	local01, fp
29ba8     30 4E 05 F1 | 	add	fp, #48
29bac     A7 26 62 FC | 	wrlong	local01, fp
29bb0     68 4E 05 F1 | 	add	fp, #104
29bb4     A7 2A 02 FB | 	rdlong	local03, fp
29bb8     15 27 02 F1 | 	add	local01, local03
29bbc     01 26 06 F1 | 	add	local01, #1
29bc0     64 4E 85 F1 | 	sub	fp, #100
29bc4     A7 26 62 FC | 	wrlong	local01, fp
29bc8     54 4E 85 F1 | 	sub	fp, #84
29bcc                 | LR__3523
29bcc                 | LR__3524
29bcc     54 4E 05 F1 | 	add	fp, #84
29bd0     A7 26 02 FB | 	rdlong	local01, fp
29bd4     08 4E 85 F1 | 	sub	fp, #8
29bd8     A7 2A 02 FB | 	rdlong	local03, fp
29bdc     15 27 82 F1 | 	sub	local01, local03
29be0     01 26 06 F1 | 	add	local01, #1
29be4     24 4E 85 F1 | 	sub	fp, #36
29be8     A7 26 62 FC | 	wrlong	local01, fp
29bec     04 4E 05 F1 | 	add	fp, #4
29bf0     A7 26 0A FB | 	rdlong	local01, fp wz
29bf4     2C 4E 85 F1 | 	sub	fp, #44
29bf8     28 4E 05 51 |  if_ne	add	fp, #40
29bfc     A7 2A 02 5B |  if_ne	rdlong	local03, fp
29c00     01 2A 06 51 |  if_ne	add	local03, #1
29c04     A7 2A 62 5C |  if_ne	wrlong	local03, fp
29c08     28 4E 85 51 |  if_ne	sub	fp, #40
29c0c     1C 4E 05 F1 | 	add	fp, #28
29c10     A7 26 02 FB | 	rdlong	local01, fp
29c14     1C 4E 85 F1 | 	sub	fp, #28
29c18     10 26 0E F2 | 	cmp	local01, #16 wz
29c1c     28 4E 05 A1 |  if_e	add	fp, #40
29c20     A7 26 02 AB |  if_e	rdlong	local01, fp
29c24     02 26 06 A1 |  if_e	add	local01, #2
29c28     A7 26 62 AC |  if_e	wrlong	local01, fp
29c2c     28 4E 85 A1 |  if_e	sub	fp, #40
29c30     24 4E 05 F1 | 	add	fp, #36
29c34     A7 26 0A FB | 	rdlong	local01, fp wz
29c38     24 4E 85 F1 | 	sub	fp, #36
29c3c     28 00 90 AD |  if_e	jmp	#LR__3525
29c40     28 4E 05 F1 | 	add	fp, #40
29c44     A7 26 02 FB | 	rdlong	local01, fp
29c48     02 2A 06 F6 | 	mov	local03, #2
29c4c     34 4E 05 F1 | 	add	fp, #52
29c50     A7 2E 02 FB | 	rdlong	local05, fp
29c54     17 2B 02 F1 | 	add	local03, local05
29c58     15 27 02 F1 | 	add	local01, local03
29c5c     34 4E 85 F1 | 	sub	fp, #52
29c60     A7 26 62 FC | 	wrlong	local01, fp
29c64     28 4E 85 F1 | 	sub	fp, #40
29c68                 | LR__3525
29c68     28 4E 05 F1 | 	add	fp, #40
29c6c     A7 26 02 FB | 	rdlong	local01, fp
29c70     28 4E 85 F1 | 	sub	fp, #40
29c74     41 26 56 F2 | 	cmps	local01, #65 wc
29c78     01 FA 65 36 |  if_ae	neg	result1, #1
29c7c     08 05 90 3D |  if_ae	jmp	#LR__3553
29c80     3C 4E 05 F1 | 	add	fp, #60
29c84     A7 26 0A FB | 	rdlong	local01, fp wz
29c88     3C 4E 85 F1 | 	sub	fp, #60
29c8c     60 00 90 AD |  if_e	jmp	#LR__3526
29c90     C0 4E 05 F1 | 	add	fp, #192
29c94     A7 12 02 FB | 	rdlong	arg01, fp
29c98     94 4E 85 F1 | 	sub	fp, #148
29c9c     A7 14 02 FB | 	rdlong	arg02, fp
29ca0     14 4E 05 F1 | 	add	fp, #20
29ca4     A7 16 02 FB | 	rdlong	arg03, fp
29ca8     40 4E 85 F1 | 	sub	fp, #64
29cac     E4 40 B0 FD | 	call	#__system__emitsign_0582
29cb0     18 4F 05 F1 | 	add	fp, #280
29cb4     A7 FA 61 FC | 	wrlong	result1, fp
29cb8     18 4F 85 F1 | 	sub	fp, #280
29cbc     00 FA 55 F2 | 	cmps	result1, #0 wc
29cc0     18 4F 05 C1 |  if_b	add	fp, #280
29cc4     A7 FA 01 CB |  if_b	rdlong	result1, fp
29cc8     18 4F 85 C1 |  if_b	sub	fp, #280
29ccc     B8 04 90 CD |  if_b	jmp	#LR__3553
29cd0     C0 4E 05 F1 | 	add	fp, #192
29cd4     A7 26 02 FB | 	rdlong	local01, fp
29cd8     58 4E 05 F1 | 	add	fp, #88
29cdc     A7 2A 02 FB | 	rdlong	local03, fp
29ce0     15 27 02 F1 | 	add	local01, local03
29ce4     58 4E 85 F1 | 	sub	fp, #88
29ce8     A7 26 62 FC | 	wrlong	local01, fp
29cec     C0 4E 85 F1 | 	sub	fp, #192
29cf0                 | LR__3526
29cf0     4C 4E 05 F1 | 	add	fp, #76
29cf4     A7 26 02 FB | 	rdlong	local01, fp
29cf8     34 4E 85 F1 | 	sub	fp, #52
29cfc     A7 26 62 FC | 	wrlong	local01, fp
29d00     18 4E 85 F1 | 	sub	fp, #24
29d04     97 9E 48 FB | 	callpa	#(@LR__3532-@LR__3527)>>2,fcache_load_ptr_
29d08                 | LR__3527
29d08     18 4E 05 F1 | 	add	fp, #24
29d0c     A7 28 02 FB | 	rdlong	local02, fp
29d10     3C 4E 05 F1 | 	add	fp, #60
29d14     A7 2E 02 FB | 	rdlong	local05, fp
29d18     54 4E 85 F1 | 	sub	fp, #84
29d1c     17 29 52 F2 | 	cmps	local02, local05 wc
29d20     20 01 90 3D |  if_ae	jmp	#LR__3533
29d24     18 4E 05 F1 | 	add	fp, #24
29d28     A7 30 02 FB | 	rdlong	local06, fp
29d2c     18 4E 85 F1 | 	sub	fp, #24
29d30     00 30 56 F2 | 	cmps	local06, #0 wc
29d34     58 00 90 CD |  if_b	jmp	#LR__3528
29d38     18 4E 05 F1 | 	add	fp, #24
29d3c     A7 30 02 FB | 	rdlong	local06, fp
29d40     40 4E 05 F1 | 	add	fp, #64
29d44     A7 32 02 FB | 	rdlong	local07, fp
29d48     58 4E 85 F1 | 	sub	fp, #88
29d4c     19 31 52 F2 | 	cmps	local06, local07 wc
29d50     3C 00 90 3D |  if_ae	jmp	#LR__3528
29d54     C0 4E 05 F1 | 	add	fp, #192
29d58     A7 34 02 FB | 	rdlong	local08, fp
29d5c     1A 33 02 F6 | 	mov	local07, local08
29d60     01 32 06 F1 | 	add	local07, #1
29d64     A7 32 62 FC | 	wrlong	local07, fp
29d68     A8 4E 85 F1 | 	sub	fp, #168
29d6c     A7 32 02 FB | 	rdlong	local07, fp
29d70     19 37 02 F6 | 	mov	local09, local07
29d74     58 4E 05 F1 | 	add	fp, #88
29d78     A7 38 02 F6 | 	mov	local10, fp
29d7c     A7 36 02 F1 | 	add	local09, fp
29d80     1B 3B C2 FA | 	rdbyte	local11, local09
29d84     1A 3B 42 FC | 	wrbyte	local11, local08
29d88     70 4E 85 F1 | 	sub	fp, #112
29d8c     20 00 90 FD | 	jmp	#LR__3529
29d90                 | LR__3528
29d90     C0 4E 05 F1 | 	add	fp, #192
29d94     A7 34 02 FB | 	rdlong	local08, fp
29d98     1A 37 02 F6 | 	mov	local09, local08
29d9c     01 36 06 F1 | 	add	local09, #1
29da0     A7 36 62 FC | 	wrlong	local09, fp
29da4     C0 4E 85 F1 | 	sub	fp, #192
29da8     30 36 06 F6 | 	mov	local09, #48
29dac     1A 61 48 FC | 	wrbyte	#48, local08
29db0                 | LR__3529
29db0     18 4E 05 F1 | 	add	fp, #24
29db4     A7 30 02 FB | 	rdlong	local06, fp
29db8     38 4E 05 F1 | 	add	fp, #56
29dbc     A7 3C 02 FB | 	rdlong	local12, fp
29dc0     50 4E 85 F1 | 	sub	fp, #80
29dc4     1E 31 0A F2 | 	cmp	local06, local12 wz
29dc8     5C 00 90 5D |  if_ne	jmp	#LR__3531
29dcc     10 4F 05 F1 | 	add	fp, #272
29dd0     A7 32 02 FB | 	rdlong	local07, fp
29dd4     10 4F 85 F1 | 	sub	fp, #272
29dd8     19 37 0A F6 | 	mov	local09, local07 wz
29ddc     28 00 90 5D |  if_ne	jmp	#LR__3530
29de0     54 4E 05 F1 | 	add	fp, #84
29de4     A7 3A 02 FB | 	rdlong	local11, fp
29de8     1D 39 02 F6 | 	mov	local10, local11
29dec     01 38 86 F1 | 	sub	local10, #1
29df0     3C 4E 85 F1 | 	sub	fp, #60
29df4     A7 3E 02 FB | 	rdlong	local13, fp
29df8     18 4E 85 F1 | 	sub	fp, #24
29dfc     1F 41 02 F6 | 	mov	local14, local13
29e00     1C 41 52 F2 | 	cmps	local14, local10 wc
29e04     20 00 90 3D |  if_ae	jmp	#LR__3531
29e08                 | LR__3530
29e08     C0 4E 05 F1 | 	add	fp, #192
29e0c     A7 34 02 FB | 	rdlong	local08, fp
29e10     1A 3D 02 F6 | 	mov	local12, local08
29e14     01 3C 06 F1 | 	add	local12, #1
29e18     A7 3C 62 FC | 	wrlong	local12, fp
29e1c     C0 4E 85 F1 | 	sub	fp, #192
29e20     2E 36 06 F6 | 	mov	local09, #46
29e24     1A 5D 48 FC | 	wrbyte	#46, local08
29e28                 | LR__3531
29e28     18 4E 05 F1 | 	add	fp, #24
29e2c     A7 42 02 FB | 	rdlong	local15, fp
29e30     21 3D 02 F6 | 	mov	local12, local15
29e34     01 3C 06 F1 | 	add	local12, #1
29e38     A7 3C 62 FC | 	wrlong	local12, fp
29e3c     18 4E 85 F1 | 	sub	fp, #24
29e40     C4 FE 9F FD | 	jmp	#LR__3527
29e44                 | LR__3532
29e44                 | LR__3533
29e44     34 4E 05 F1 | 	add	fp, #52
29e48     A7 26 0A FB | 	rdlong	local01, fp wz
29e4c     34 4E 85 F1 | 	sub	fp, #52
29e50     A0 00 90 AD |  if_e	jmp	#LR__3537
29e54     C0 4E 05 F1 | 	add	fp, #192
29e58     A7 26 02 FB | 	rdlong	local01, fp
29e5c     01 26 86 F1 | 	sub	local01, #1
29e60     A7 26 62 FC | 	wrlong	local01, fp
29e64     C0 4E 85 F1 | 	sub	fp, #192
29e68     97 26 48 FB | 	callpa	#(@LR__3535-@LR__3534)>>2,fcache_load_ptr_
29e6c                 | LR__3534
29e6c     C0 4E 05 F1 | 	add	fp, #192
29e70     A7 26 02 FB | 	rdlong	local01, fp
29e74     04 4E 05 F1 | 	add	fp, #4
29e78     A7 2A 02 FB | 	rdlong	local03, fp
29e7c     C4 4E 85 F1 | 	sub	fp, #196
29e80     15 27 5A F2 | 	cmps	local01, local03 wcz
29e84     30 00 90 ED |  if_be	jmp	#LR__3536
29e88     C0 4E 05 F1 | 	add	fp, #192
29e8c     A7 30 02 FB | 	rdlong	local06, fp
29e90     C0 4E 85 F1 | 	sub	fp, #192
29e94     18 2D C2 FA | 	rdbyte	local04, local06
29e98     30 2C 0E F2 | 	cmp	local04, #48 wz
29e9c     18 00 90 5D |  if_ne	jmp	#LR__3536
29ea0     C0 4E 05 F1 | 	add	fp, #192
29ea4     A7 26 02 FB | 	rdlong	local01, fp
29ea8     01 26 86 F1 | 	sub	local01, #1
29eac     A7 26 62 FC | 	wrlong	local01, fp
29eb0     C0 4E 85 F1 | 	sub	fp, #192
29eb4     B4 FF 9F FD | 	jmp	#LR__3534
29eb8                 | LR__3535
29eb8                 | LR__3536
29eb8     C0 4E 05 F1 | 	add	fp, #192
29ebc     A7 28 02 FB | 	rdlong	local02, fp
29ec0     C0 4E 85 F1 | 	sub	fp, #192
29ec4     14 27 C2 FA | 	rdbyte	local01, local02
29ec8     2E 26 0E F2 | 	cmp	local01, #46 wz
29ecc     C0 4E 05 A1 |  if_e	add	fp, #192
29ed0     A7 26 02 AB |  if_e	rdlong	local01, fp
29ed4     01 26 86 A1 |  if_e	sub	local01, #1
29ed8     A7 26 62 AC |  if_e	wrlong	local01, fp
29edc     C0 4E 85 A1 |  if_e	sub	fp, #192
29ee0     C0 4E 05 F1 | 	add	fp, #192
29ee4     A7 2A 02 FB | 	rdlong	local03, fp
29ee8     01 2A 06 F1 | 	add	local03, #1
29eec     A7 2A 62 FC | 	wrlong	local03, fp
29ef0     C0 4E 85 F1 | 	sub	fp, #192
29ef4                 | LR__3537
29ef4     24 4E 05 F1 | 	add	fp, #36
29ef8     A7 26 0A FB | 	rdlong	local01, fp wz
29efc     24 4E 85 F1 | 	sub	fp, #36
29f00     B4 00 90 AD |  if_e	jmp	#LR__3540
29f04     C0 4E 05 F1 | 	add	fp, #192
29f08     A7 28 02 FB | 	rdlong	local02, fp
29f0c     14 2B 02 F6 | 	mov	local03, local02
29f10     01 2A 06 F1 | 	add	local03, #1
29f14     A7 2A 62 FC | 	wrlong	local03, fp
29f18     90 4E 85 F1 | 	sub	fp, #144
29f1c     A7 2C 02 FB | 	rdlong	local04, fp
29f20     14 2D 42 FC | 	wrbyte	local04, local02
29f24     90 4E 05 F1 | 	add	fp, #144
29f28     A7 28 02 FB | 	rdlong	local02, fp
29f2c     14 2B 02 F6 | 	mov	local03, local02
29f30     01 2A 06 F1 | 	add	local03, #1
29f34     A7 2A 62 FC | 	wrlong	local03, fp
29f38     60 4E 85 F1 | 	sub	fp, #96
29f3c     A7 2C 02 FB | 	rdlong	local04, fp
29f40     14 2D 42 FC | 	wrbyte	local04, local02
29f44     48 4E 85 F1 | 	sub	fp, #72
29f48     A7 00 68 FC | 	wrlong	#0, fp
29f4c     18 4E 85 F1 | 	sub	fp, #24
29f50                 | LR__3538
29f50     18 4E 05 F1 | 	add	fp, #24
29f54     A7 28 02 FB | 	rdlong	local02, fp
29f58     44 4E 05 F1 | 	add	fp, #68
29f5c     A7 2E 02 FB | 	rdlong	local05, fp
29f60     5C 4E 85 F1 | 	sub	fp, #92
29f64     17 29 52 F2 | 	cmps	local02, local05 wc
29f68     4C 00 90 3D |  if_ae	jmp	#LR__3539
29f6c     C0 4E 05 F1 | 	add	fp, #192
29f70     A7 34 02 FB | 	rdlong	local08, fp
29f74     1A 3D 02 F6 | 	mov	local12, local08
29f78     01 3C 06 F1 | 	add	local12, #1
29f7c     A7 3C 62 FC | 	wrlong	local12, fp
29f80     A8 4E 85 F1 | 	sub	fp, #168
29f84     A7 32 02 FB | 	rdlong	local07, fp
29f88     19 37 02 F6 | 	mov	local09, local07
29f8c     98 4E 05 F1 | 	add	fp, #152
29f90     A7 38 02 F6 | 	mov	local10, fp
29f94     A7 36 02 F1 | 	add	local09, fp
29f98     1B 3B C2 FA | 	rdbyte	local11, local09
29f9c     1A 3B 42 FC | 	wrbyte	local11, local08
29fa0     98 4E 85 F1 | 	sub	fp, #152
29fa4     A7 3C 02 FB | 	rdlong	local12, fp
29fa8     01 3C 06 F1 | 	add	local12, #1
29fac     A7 3C 62 FC | 	wrlong	local12, fp
29fb0     18 4E 85 F1 | 	sub	fp, #24
29fb4     98 FF 9F FD | 	jmp	#LR__3538
29fb8                 | LR__3539
29fb8                 | LR__3540
29fb8     C0 4E 05 F1 | 	add	fp, #192
29fbc     A7 26 02 FB | 	rdlong	local01, fp
29fc0     C0 4E 85 F1 | 	sub	fp, #192
29fc4     13 01 48 FC | 	wrbyte	#0, local01
29fc8                 | LR__3541
29fc8     6C 4E 05 F1 | 	add	fp, #108
29fcc     A7 26 0A FB | 	rdlong	local01, fp wz
29fd0     6C 4E 85 F1 | 	sub	fp, #108
29fd4     90 01 90 AD |  if_e	jmp	#LR__3552
29fd8     48 4E 05 F1 | 	add	fp, #72
29fdc     A7 2A 0A FB | 	rdlong	local03, fp wz
29fe0     48 4E 85 F1 | 	sub	fp, #72
29fe4     80 01 90 AD |  if_e	jmp	#LR__3552
29fe8     C4 4E 05 F1 | 	add	fp, #196
29fec     A7 12 02 FB | 	rdlong	arg01, fp
29ff0     C4 4E 85 F1 | 	sub	fp, #196
29ff4     09 45 02 F6 | 	mov	local16, arg01
29ff8     97 06 48 FB | 	callpa	#(@LR__3543-@LR__3542)>>2,fcache_load_ptr_
29ffc                 | LR__3542
29ffc     22 FB C9 FA | 	rdbyte	result1, local16 wz
2a000     01 44 06 51 |  if_ne	add	local16, #1
2a004     F4 FF 9F 5D |  if_ne	jmp	#LR__3542
2a008                 | LR__3543
2a008     09 45 82 F1 | 	sub	local16, arg01
2a00c     22 2D 02 F6 | 	mov	local04, local16
2a010     6C 4E 05 F1 | 	add	fp, #108
2a014     A7 30 02 FB | 	rdlong	local06, fp
2a018     6C 4E 85 F1 | 	sub	fp, #108
2a01c     18 2D 5A F2 | 	cmps	local04, local06 wcz
2a020     44 01 90 ED |  if_be	jmp	#LR__3552
2a024     C4 4E 05 F1 | 	add	fp, #196
2a028     A7 26 02 FB | 	rdlong	local01, fp
2a02c     5C 4E 05 F1 | 	add	fp, #92
2a030     A7 26 62 FC | 	wrlong	local01, fp
2a034     FC 4E 85 F1 | 	sub	fp, #252
2a038     A7 26 0A FB | 	rdlong	local01, fp wz
2a03c     24 4E 85 F1 | 	sub	fp, #36
2a040     20 00 90 AD |  if_e	jmp	#LR__3544
2a044     B8 4E 05 F1 | 	add	fp, #184
2a048     A7 00 68 FC | 	wrlong	#0, fp
2a04c     4C 4E 85 F1 | 	sub	fp, #76
2a050     A7 26 02 FB | 	rdlong	local01, fp
2a054     B0 4E 05 F1 | 	add	fp, #176
2a058     A7 26 62 FC | 	wrlong	local01, fp
2a05c     1C 4F 85 F1 | 	sub	fp, #284
2a060     24 00 90 FD | 	jmp	#LR__3545
2a064                 | LR__3544
2a064     6C 4E 05 F1 | 	add	fp, #108
2a068     A7 26 02 FB | 	rdlong	local01, fp
2a06c     01 26 86 F1 | 	sub	local01, #1
2a070     4C 4E 05 F1 | 	add	fp, #76
2a074     A7 2A 02 FB | 	rdlong	local03, fp
2a078     15 27 82 F1 | 	sub	local01, local03
2a07c     64 4E 05 F1 | 	add	fp, #100
2a080     A7 26 62 FC | 	wrlong	local01, fp
2a084     1C 4F 85 F1 | 	sub	fp, #284
2a088                 | LR__3545
2a088     97 20 48 FB | 	callpa	#(@LR__3547-@LR__3546)>>2,fcache_load_ptr_
2a08c                 | LR__3546
2a08c     1C 4F 05 F1 | 	add	fp, #284
2a090     A7 26 0A FB | 	rdlong	local01, fp wz
2a094     1C 4F 85 F1 | 	sub	fp, #284
2a098     30 00 90 AD |  if_e	jmp	#LR__3548
2a09c     20 4F 05 F1 | 	add	fp, #288
2a0a0     A7 28 02 FB | 	rdlong	local02, fp
2a0a4     14 2B 02 F6 | 	mov	local03, local02
2a0a8     01 2A 06 F1 | 	add	local03, #1
2a0ac     A7 2A 62 FC | 	wrlong	local03, fp
2a0b0     14 55 48 FC | 	wrbyte	#42, local02
2a0b4     04 4E 85 F1 | 	sub	fp, #4
2a0b8     A7 26 02 FB | 	rdlong	local01, fp
2a0bc     01 26 86 F1 | 	sub	local01, #1
2a0c0     A7 26 62 FC | 	wrlong	local01, fp
2a0c4     1C 4F 85 F1 | 	sub	fp, #284
2a0c8     C0 FF 9F FD | 	jmp	#LR__3546
2a0cc                 | LR__3547
2a0cc                 | LR__3548
2a0cc     B8 4E 05 F1 | 	add	fp, #184
2a0d0     A7 26 0A FB | 	rdlong	local01, fp wz
2a0d4     B8 4E 85 F1 | 	sub	fp, #184
2a0d8     70 00 90 AD |  if_e	jmp	#LR__3551
2a0dc     20 4F 05 F1 | 	add	fp, #288
2a0e0     A7 28 02 FB | 	rdlong	local02, fp
2a0e4     14 2B 02 F6 | 	mov	local03, local02
2a0e8     01 2A 06 F1 | 	add	local03, #1
2a0ec     A7 2A 62 FC | 	wrlong	local03, fp
2a0f0     14 5D 48 FC | 	wrbyte	#46, local02
2a0f4     04 4E 85 F1 | 	sub	fp, #4
2a0f8     A7 00 68 FC | 	wrlong	#0, fp
2a0fc     1C 4F 85 F1 | 	sub	fp, #284
2a100                 | LR__3549
2a100     1C 4F 05 F1 | 	add	fp, #284
2a104     A7 28 02 FB | 	rdlong	local02, fp
2a108     64 4E 85 F1 | 	sub	fp, #100
2a10c     A7 2E 02 FB | 	rdlong	local05, fp
2a110     B8 4E 85 F1 | 	sub	fp, #184
2a114     17 29 52 F2 | 	cmps	local02, local05 wc
2a118     30 00 90 3D |  if_ae	jmp	#LR__3550
2a11c     20 4F 05 F1 | 	add	fp, #288
2a120     A7 34 02 FB | 	rdlong	local08, fp
2a124     1A 3D 02 F6 | 	mov	local12, local08
2a128     01 3C 06 F1 | 	add	local12, #1
2a12c     A7 3C 62 FC | 	wrlong	local12, fp
2a130     1A 55 48 FC | 	wrbyte	#42, local08
2a134     04 4E 85 F1 | 	sub	fp, #4
2a138     A7 3C 02 FB | 	rdlong	local12, fp
2a13c     01 3C 06 F1 | 	add	local12, #1
2a140     A7 3C 62 FC | 	wrlong	local12, fp
2a144     1C 4F 85 F1 | 	sub	fp, #284
2a148     B4 FF 9F FD | 	jmp	#LR__3549
2a14c                 | LR__3550
2a14c                 | LR__3551
2a14c     20 4F 05 F1 | 	add	fp, #288
2a150     A7 28 02 FB | 	rdlong	local02, fp
2a154     14 2B 02 F6 | 	mov	local03, local02
2a158     01 2A 06 F1 | 	add	local03, #1
2a15c     A7 2A 62 FC | 	wrlong	local03, fp
2a160     20 4F 85 F1 | 	sub	fp, #288
2a164     14 01 48 FC | 	wrbyte	#0, local02
2a168                 | LR__3552
2a168     04 4E 05 F1 | 	add	fp, #4
2a16c     A7 12 02 FB | 	rdlong	arg01, fp
2a170     04 4E 05 F1 | 	add	fp, #4
2a174     A7 14 02 FB | 	rdlong	arg02, fp
2a178     BC 4E 05 F1 | 	add	fp, #188
2a17c     A7 16 02 FB | 	rdlong	arg03, fp
2a180     C4 4E 85 F1 | 	sub	fp, #196
2a184     C4 EE BF FD | 	call	#__system___fmtstr
2a188                 | LR__3553
2a188     A7 F0 03 F6 | 	mov	ptra, fp
2a18c     B2 00 A0 FD | 	call	#popregs_
2a190                 | __system___fmtfloat_ret
2a190     2D 00 64 FD | 	ret
2a194                 | 
2a194                 | __system__Left_S
2a194     04 4A 05 F6 | 	mov	COUNT_, #4
2a198     A8 00 A0 FD | 	call	#pushregs_
2a19c     09 27 02 F6 | 	mov	local01, arg01
2a1a0     0A 29 02 F6 | 	mov	local02, arg02
2a1a4     01 28 56 F2 | 	cmps	local02, #1 wc
2a1a8     BE 01 00 CF 
2a1ac     3A FA 05 C6 |  if_b	mov	result1, ##@LR__5513
2a1b0     5C 00 90 CD |  if_b	jmp	#LR__3563
2a1b4     13 13 02 F6 | 	mov	arg01, local01
2a1b8     09 2B 02 F6 | 	mov	local03, arg01
2a1bc     97 06 48 FB | 	callpa	#(@LR__3561-@LR__3560)>>2,fcache_load_ptr_
2a1c0                 | LR__3560
2a1c0     15 FB C9 FA | 	rdbyte	result1, local03 wz
2a1c4     01 2A 06 51 |  if_ne	add	local03, #1
2a1c8     F4 FF 9F 5D |  if_ne	jmp	#LR__3560
2a1cc                 | LR__3561
2a1cc     09 2B 82 F1 | 	sub	local03, arg01
2a1d0     15 FB 01 F6 | 	mov	result1, local03
2a1d4     14 FB 59 F2 | 	cmps	result1, local02 wcz
2a1d8     13 FB 01 E6 |  if_be	mov	result1, local01
2a1dc     30 00 90 ED |  if_be	jmp	#LR__3563
2a1e0     14 13 02 F6 | 	mov	arg01, local02
2a1e4     02 12 06 F1 | 	add	arg01, #2
2a1e8     D0 20 B0 FD | 	call	#__system___gc_alloc_managed
2a1ec     FD 2C 0A F6 | 	mov	local04, result1 wz
2a1f0     18 00 90 AD |  if_e	jmp	#LR__3562
2a1f4     16 13 02 F6 | 	mov	arg01, local04
2a1f8     13 15 02 F6 | 	mov	arg02, local01
2a1fc     14 17 02 F6 | 	mov	arg03, local02
2a200     C0 DD BF FD | 	call	#__system____builtin_memmove
2a204     16 29 02 F1 | 	add	local02, local04
2a208     14 01 48 FC | 	wrbyte	#0, local02
2a20c                 | LR__3562
2a20c     16 FB 01 F6 | 	mov	result1, local04
2a210                 | LR__3563
2a210     A7 F0 03 F6 | 	mov	ptra, fp
2a214     B2 00 A0 FD | 	call	#popregs_
2a218                 | __system__Left_S_ret
2a218     2D 00 64 FD | 	ret
2a21c                 | 
2a21c                 | __system__Right_S
2a21c     05 4A 05 F6 | 	mov	COUNT_, #5
2a220     A8 00 A0 FD | 	call	#pushregs_
2a224     09 27 02 F6 | 	mov	local01, arg01
2a228     0A 29 02 F6 | 	mov	local02, arg02
2a22c     01 28 56 F2 | 	cmps	local02, #1 wc
2a230     BE 01 00 CF 
2a234     3B FA 05 C6 |  if_b	mov	result1, ##@LR__5514
2a238     64 00 90 CD |  if_b	jmp	#LR__3573
2a23c     13 13 02 F6 | 	mov	arg01, local01
2a240     09 2B 02 F6 | 	mov	local03, arg01
2a244     97 06 48 FB | 	callpa	#(@LR__3571-@LR__3570)>>2,fcache_load_ptr_
2a248                 | LR__3570
2a248     15 FB C9 FA | 	rdbyte	result1, local03 wz
2a24c     01 2A 06 51 |  if_ne	add	local03, #1
2a250     F4 FF 9F 5D |  if_ne	jmp	#LR__3570
2a254                 | LR__3571
2a254     09 2B 82 F1 | 	sub	local03, arg01
2a258     15 FB 01 F6 | 	mov	result1, local03
2a25c     FD 2C 02 F6 | 	mov	local04, result1
2a260     14 2D 5A F2 | 	cmps	local04, local02 wcz
2a264     13 FB 01 E6 |  if_be	mov	result1, local01
2a268     34 00 90 ED |  if_be	jmp	#LR__3573
2a26c     14 13 02 F6 | 	mov	arg01, local02
2a270     02 12 06 F1 | 	add	arg01, #2
2a274     44 20 B0 FD | 	call	#__system___gc_alloc_managed
2a278     FD 2E 0A F6 | 	mov	local05, result1 wz
2a27c     1C 00 90 AD |  if_e	jmp	#LR__3572
2a280     14 2D 82 F1 | 	sub	local04, local02
2a284     13 2D 02 F1 | 	add	local04, local01
2a288     01 28 06 F1 | 	add	local02, #1
2a28c     17 13 02 F6 | 	mov	arg01, local05
2a290     16 15 02 F6 | 	mov	arg02, local04
2a294     14 17 02 F6 | 	mov	arg03, local02
2a298     28 DD BF FD | 	call	#__system____builtin_memmove
2a29c                 | LR__3572
2a29c     17 FB 01 F6 | 	mov	result1, local05
2a2a0                 | LR__3573
2a2a0     A7 F0 03 F6 | 	mov	ptra, fp
2a2a4     B2 00 A0 FD | 	call	#popregs_
2a2a8                 | __system__Right_S_ret
2a2a8     2D 00 64 FD | 	ret
2a2ac                 | 
2a2ac                 | __system__Mid_S
2a2ac     05 4A 05 F6 | 	mov	COUNT_, #5
2a2b0     A8 00 A0 FD | 	call	#pushregs_
2a2b4     09 27 02 F6 | 	mov	local01, arg01
2a2b8     0A 29 02 F6 | 	mov	local02, arg02
2a2bc     01 16 56 F2 | 	cmps	arg03, #1 wc
2a2c0     BE 01 00 CF 
2a2c4     3C FA 05 C6 |  if_b	mov	result1, ##@LR__5515
2a2c8     80 00 90 CD |  if_b	jmp	#LR__3583
2a2cc     01 28 86 F1 | 	sub	local02, #1
2a2d0     00 28 56 F3 | 	fges	local02, #0 wc
2a2d4     13 13 02 F6 | 	mov	arg01, local01
2a2d8     09 2B 02 F6 | 	mov	local03, arg01
2a2dc     97 06 48 FB | 	callpa	#(@LR__3581-@LR__3580)>>2,fcache_load_ptr_
2a2e0                 | LR__3580
2a2e0     15 FB C9 FA | 	rdbyte	result1, local03 wz
2a2e4     01 2A 06 51 |  if_ne	add	local03, #1
2a2e8     F4 FF 9F 5D |  if_ne	jmp	#LR__3580
2a2ec                 | LR__3581
2a2ec     09 2B 82 F1 | 	sub	local03, arg01
2a2f0     15 FB 01 F6 | 	mov	result1, local03
2a2f4     FD 14 02 F6 | 	mov	arg02, result1
2a2f8     14 15 52 F2 | 	cmps	arg02, local02 wc
2a2fc     BE 01 00 CF 
2a300     3D FA 05 C6 |  if_b	mov	result1, ##@LR__5516
2a304     44 00 90 CD |  if_b	jmp	#LR__3583
2a308     0A 2D 02 F6 | 	mov	local04, arg02
2a30c     14 2D 82 F1 | 	sub	local04, local02
2a310     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
2a314     0B 2D 02 16 |  if_a	mov	local04, arg03
2a318     16 13 02 F6 | 	mov	arg01, local04
2a31c     02 12 06 F1 | 	add	arg01, #2
2a320     98 1F B0 FD | 	call	#__system___gc_alloc_managed
2a324     FD 2E 0A F6 | 	mov	local05, result1 wz
2a328     1C 00 90 AD |  if_e	jmp	#LR__3582
2a32c     13 29 02 F1 | 	add	local02, local01
2a330     17 13 02 F6 | 	mov	arg01, local05
2a334     14 15 02 F6 | 	mov	arg02, local02
2a338     16 17 02 F6 | 	mov	arg03, local04
2a33c     84 DC BF FD | 	call	#__system____builtin_memmove
2a340     17 2D 02 F1 | 	add	local04, local05
2a344     16 01 48 FC | 	wrbyte	#0, local04
2a348                 | LR__3582
2a348     17 FB 01 F6 | 	mov	result1, local05
2a34c                 | LR__3583
2a34c     A7 F0 03 F6 | 	mov	ptra, fp
2a350     B2 00 A0 FD | 	call	#popregs_
2a354                 | __system__Mid_S_ret
2a354     2D 00 64 FD | 	ret
2a358                 | 
2a358                 | __system__Chr_S
2a358     01 4A 05 F6 | 	mov	COUNT_, #1
2a35c     A8 00 A0 FD | 	call	#pushregs_
2a360     09 27 02 F6 | 	mov	local01, arg01
2a364     03 12 06 F6 | 	mov	arg01, #3
2a368     50 1F B0 FD | 	call	#__system___gc_alloc_managed
2a36c     00 FA 4D F2 | 	cmps	result1, #0 wz
2a370     FD 26 42 5C |  if_ne	wrbyte	local01, result1
2a374     01 FA 05 51 |  if_ne	add	result1, #1
2a378     FD 00 48 5C |  if_ne	wrbyte	#0, result1
2a37c     01 FA 85 51 |  if_ne	sub	result1, #1
2a380     A7 F0 03 F6 | 	mov	ptra, fp
2a384     B2 00 A0 FD | 	call	#popregs_
2a388                 | __system__Chr_S_ret
2a388     2D 00 64 FD | 	ret
2a38c                 | 
2a38c                 | __system__str_S
2a38c     02 4A 05 F6 | 	mov	COUNT_, #2
2a390     A8 00 A0 FD | 	call	#pushregs_
2a394     09 27 02 F6 | 	mov	local01, arg01
2a398     10 12 06 F6 | 	mov	arg01, #16
2a39c     1C 1F B0 FD | 	call	#__system___gc_alloc_managed
2a3a0     FD 28 0A F6 | 	mov	local02, result1 wz
2a3a4     30 00 90 AD |  if_e	jmp	#LR__3590
2a3a8     F8 13 02 F6 | 	mov	arg01, ptra
2a3ac     08 F0 07 F1 | 	add	ptra, #8
2a3b0     09 29 62 FC | 	wrlong	local02, arg01
2a3b4     04 12 06 F1 | 	add	arg01, #4
2a3b8     09 01 68 FC | 	wrlong	#0, arg01
2a3bc     04 12 86 F1 | 	sub	arg01, #4
2a3c0     00 80 05 FF 
2a3c4     00 12 46 F5 | 	or	arg01, ##184549376
2a3c8     00 14 06 F6 | 	mov	arg02, #0
2a3cc     13 17 02 F6 | 	mov	arg03, local01
2a3d0     67 18 06 F6 | 	mov	arg04, #103
2a3d4     90 EE BF FD | 	call	#__system___fmtfloat
2a3d8                 | LR__3590
2a3d8     14 FB 01 F6 | 	mov	result1, local02
2a3dc     A7 F0 03 F6 | 	mov	ptra, fp
2a3e0     B2 00 A0 FD | 	call	#popregs_
2a3e4                 | __system__str_S_ret
2a3e4     2D 00 64 FD | 	ret
2a3e8                 | 
2a3e8                 | __system__Number_S
2a3e8     08 4A 05 F6 | 	mov	COUNT_, #8
2a3ec     A8 00 A0 FD | 	call	#pushregs_
2a3f0     09 27 02 F6 | 	mov	local01, arg01
2a3f4     0A 29 0A F6 | 	mov	local02, arg02 wz
2a3f8     0B 2B 02 F6 | 	mov	local03, arg03
2a3fc     3C 00 90 5D |  if_ne	jmp	#LR__3602
2a400     01 28 06 F6 | 	mov	local02, #1
2a404     15 2D 02 F6 | 	mov	local04, local03
2a408     01 2E 06 F6 | 	mov	local05, #1
2a40c     97 16 48 FB | 	callpa	#(@LR__3601-@LR__3600)>>2,fcache_load_ptr_
2a410                 | LR__3600
2a410     00 30 06 F6 | 	mov	local06, #0
2a414     13 2D 1A F2 | 	cmp	local04, local01 wcz
2a418     01 30 66 E6 |  if_be	neg	local06, #1
2a41c     16 2F 12 F2 | 	cmp	local05, local04 wc
2a420     19 33 A2 F1 | 	subx	local07, local07
2a424     19 31 CA F7 | 	test	local06, local07 wz
2a428     15 2D 02 5D |  if_ne	qmul	local04, local03
2a42c     16 2F 02 56 |  if_ne	mov	local05, local04
2a430     01 28 06 51 |  if_ne	add	local02, #1
2a434     18 2C 62 5D |  if_ne	getqx	local04
2a438     D4 FF 9F 5D |  if_ne	jmp	#LR__3600
2a43c                 | LR__3601
2a43c                 | LR__3602
2a43c     20 28 36 F3 | 	fle	local02, #32 wc
2a440     14 13 02 F6 | 	mov	arg01, local02
2a444     02 12 06 F1 | 	add	arg01, #2
2a448     70 1E B0 FD | 	call	#__system___gc_alloc_managed
2a44c     FD 30 02 F6 | 	mov	local06, result1
2a450     14 33 02 F6 | 	mov	local07, local02
2a454     18 33 02 F1 | 	add	local07, local06
2a458     19 01 48 FC | 	wrbyte	#0, local07
2a45c     97 1A 48 FB | 	callpa	#(@LR__3604-@LR__3603)>>2,fcache_load_ptr_
2a460                 | LR__3603
2a460     01 28 16 F2 | 	cmp	local02, #1 wc
2a464     2C 00 90 CD |  if_b	jmp	#LR__3605
2a468     15 27 12 FD | 	qdiv	local01, local03
2a46c     01 28 86 F1 | 	sub	local02, #1
2a470     14 33 02 F6 | 	mov	local07, local02
2a474     18 33 02 F1 | 	add	local07, local06
2a478     19 34 62 FD | 	getqy	local08
2a47c     0A 34 16 F2 | 	cmp	local08, #10 wc
2a480     30 34 06 C1 |  if_b	add	local08, #48
2a484     37 34 06 31 |  if_ae	add	local08, #55
2a488     19 35 42 FC | 	wrbyte	local08, local07
2a48c     18 26 62 FD | 	getqx	local01
2a490     CC FF 9F FD | 	jmp	#LR__3603
2a494                 | LR__3604
2a494                 | LR__3605
2a494     18 FB 01 F6 | 	mov	result1, local06
2a498     A7 F0 03 F6 | 	mov	ptra, fp
2a49c     B2 00 A0 FD | 	call	#popregs_
2a4a0                 | __system__Number_S_ret
2a4a0     2D 00 64 FD | 	ret
2a4a4                 | 
2a4a4                 | __system__LCase_S
2a4a4     07 4A 05 F6 | 	mov	COUNT_, #7
2a4a8     A8 00 A0 FD | 	call	#pushregs_
2a4ac     09 27 02 F6 | 	mov	local01, arg01
2a4b0     09 29 02 F6 | 	mov	local02, arg01
2a4b4     97 06 48 FB | 	callpa	#(@LR__3611-@LR__3610)>>2,fcache_load_ptr_
2a4b8                 | LR__3610
2a4b8     14 FB C9 FA | 	rdbyte	result1, local02 wz
2a4bc     01 28 06 51 |  if_ne	add	local02, #1
2a4c0     F4 FF 9F 5D |  if_ne	jmp	#LR__3610
2a4c4                 | LR__3611
2a4c4     09 29 82 F1 | 	sub	local02, arg01
2a4c8     14 FB 01 F6 | 	mov	result1, local02
2a4cc     FD 28 0A F6 | 	mov	local02, result1 wz
2a4d0     BE 01 00 AF 
2a4d4     3E FA 05 A6 |  if_e	mov	result1, ##@LR__5517
2a4d8     7C 00 90 AD |  if_e	jmp	#LR__3617
2a4dc     14 13 02 F6 | 	mov	arg01, local02
2a4e0     02 12 06 F1 | 	add	arg01, #2
2a4e4     D4 1D B0 FD | 	call	#__system___gc_alloc_managed
2a4e8     FD 2A 0A F6 | 	mov	local03, result1 wz
2a4ec     64 00 90 AD |  if_e	jmp	#LR__3616
2a4f0     01 2C 66 F6 | 	neg	local04, #1
2a4f4     97 26 48 FB | 	callpa	#(@LR__3615-@LR__3612)>>2,fcache_load_ptr_
2a4f8                 | LR__3612
2a4f8     01 2C 06 F1 | 	add	local04, #1
2a4fc     16 2F 02 F6 | 	mov	local05, local04
2a500     13 2F 02 F1 | 	add	local05, local01
2a504     17 31 C2 FA | 	rdbyte	local06, local05
2a508     41 30 56 F2 | 	cmps	local06, #65 wc
2a50c     18 00 90 CD |  if_b	jmp	#LR__3613
2a510     5B 30 56 F2 | 	cmps	local06, #91 wc
2a514     16 33 02 C6 |  if_b	mov	local07, local04
2a518     15 33 02 C1 |  if_b	add	local07, local03
2a51c     20 30 06 C1 |  if_b	add	local06, #32
2a520     19 31 42 CC |  if_b	wrbyte	local06, local07
2a524     0C 00 90 CD |  if_b	jmp	#LR__3614
2a528                 | LR__3613
2a528     16 33 02 F6 | 	mov	local07, local04
2a52c     15 33 02 F1 | 	add	local07, local03
2a530     19 31 42 FC | 	wrbyte	local06, local07
2a534                 | LR__3614
2a534     14 31 02 F6 | 	mov	local06, local02
2a538     01 30 86 F1 | 	sub	local06, #1
2a53c     18 2D 0A F2 | 	cmp	local04, local06 wz
2a540     B4 FF 9F 5D |  if_ne	jmp	#LR__3612
2a544                 | LR__3615
2a544     15 29 02 F1 | 	add	local02, local03
2a548     14 01 48 FC | 	wrbyte	#0, local02
2a54c     15 FB 01 F6 | 	mov	result1, local03
2a550     04 00 90 FD | 	jmp	#LR__3617
2a554                 | LR__3616
2a554     15 FB 01 F6 | 	mov	result1, local03
2a558                 | LR__3617
2a558     A7 F0 03 F6 | 	mov	ptra, fp
2a55c     B2 00 A0 FD | 	call	#popregs_
2a560                 | __system__LCase_S_ret
2a560     2D 00 64 FD | 	ret
2a564                 | 
2a564                 | __system__LTrim_S
2a564     05 4A 05 F6 | 	mov	COUNT_, #5
2a568     A8 00 A0 FD | 	call	#pushregs_
2a56c     09 27 02 F6 | 	mov	local01, arg01
2a570     09 29 02 F6 | 	mov	local02, arg01
2a574     97 06 48 FB | 	callpa	#(@LR__3621-@LR__3620)>>2,fcache_load_ptr_
2a578                 | LR__3620
2a578     14 FB C9 FA | 	rdbyte	result1, local02 wz
2a57c     01 28 06 51 |  if_ne	add	local02, #1
2a580     F4 FF 9F 5D |  if_ne	jmp	#LR__3620
2a584                 | LR__3621
2a584     09 29 82 F1 | 	sub	local02, arg01
2a588     14 FB 01 F6 | 	mov	result1, local02
2a58c     FD 28 0A F6 | 	mov	local02, result1 wz
2a590     BE 01 00 AF 
2a594     3F FA 05 A6 |  if_e	mov	result1, ##@LR__5518
2a598     7C 00 90 AD |  if_e	jmp	#LR__3626
2a59c     00 2A 06 F6 | 	mov	local03, #0
2a5a0     14 2D 02 F6 | 	mov	local04, local02
2a5a4                 | LR__3622
2a5a4     16 2B 52 F2 | 	cmps	local03, local04 wc
2a5a8     68 00 90 3D |  if_ae	jmp	#LR__3625
2a5ac     15 17 02 F6 | 	mov	arg03, local03
2a5b0     13 17 02 F1 | 	add	arg03, local01
2a5b4     0B 17 C2 FA | 	rdbyte	arg03, arg03
2a5b8     20 16 0E F2 | 	cmp	arg03, #32 wz
2a5bc     4C 00 90 AD |  if_e	jmp	#LR__3624
2a5c0     14 13 02 F6 | 	mov	arg01, local02
2a5c4     15 13 82 F1 | 	sub	arg01, local03
2a5c8     02 12 06 F1 | 	add	arg01, #2
2a5cc     EC 1C B0 FD | 	call	#__system___gc_alloc_managed
2a5d0     FD 2E 0A F6 | 	mov	local05, result1 wz
2a5d4     2C 00 90 AD |  if_e	jmp	#LR__3623
2a5d8     15 15 02 F6 | 	mov	arg02, local03
2a5dc     13 15 02 F1 | 	add	arg02, local01
2a5e0     14 17 02 F6 | 	mov	arg03, local02
2a5e4     15 17 82 F1 | 	sub	arg03, local03
2a5e8     17 13 02 F6 | 	mov	arg01, local05
2a5ec     D4 D9 BF FD | 	call	#__system____builtin_memmove
2a5f0     15 29 82 F1 | 	sub	local02, local03
2a5f4     17 29 02 F1 | 	add	local02, local05
2a5f8     14 01 48 FC | 	wrbyte	#0, local02
2a5fc     17 FB 01 F6 | 	mov	result1, local05
2a600     14 00 90 FD | 	jmp	#LR__3626
2a604                 | LR__3623
2a604     17 FB 01 F6 | 	mov	result1, local05
2a608     0C 00 90 FD | 	jmp	#LR__3626
2a60c                 | LR__3624
2a60c     01 2A 06 F1 | 	add	local03, #1
2a610     90 FF 9F FD | 	jmp	#LR__3622
2a614                 | LR__3625
2a614     13 FB 01 F6 | 	mov	result1, local01
2a618                 | LR__3626
2a618     A7 F0 03 F6 | 	mov	ptra, fp
2a61c     B2 00 A0 FD | 	call	#popregs_
2a620                 | __system__LTrim_S_ret
2a620     2D 00 64 FD | 	ret
2a624                 | 
2a624                 | __system__RTrim_S
2a624     04 4A 05 F6 | 	mov	COUNT_, #4
2a628     A8 00 A0 FD | 	call	#pushregs_
2a62c     09 27 02 F6 | 	mov	local01, arg01
2a630     09 29 02 F6 | 	mov	local02, arg01
2a634     97 06 48 FB | 	callpa	#(@LR__3631-@LR__3630)>>2,fcache_load_ptr_
2a638                 | LR__3630
2a638     14 FB C9 FA | 	rdbyte	result1, local02 wz
2a63c     01 28 06 51 |  if_ne	add	local02, #1
2a640     F4 FF 9F 5D |  if_ne	jmp	#LR__3630
2a644                 | LR__3631
2a644     09 29 82 F1 | 	sub	local02, arg01
2a648     14 FB 01 F6 | 	mov	result1, local02
2a64c     FD 28 0A F6 | 	mov	local02, result1 wz
2a650     BE 01 00 AF 
2a654     40 FA 05 A6 |  if_e	mov	result1, ##@LR__5519
2a658     74 00 90 AD |  if_e	jmp	#LR__3635
2a65c     14 2B 02 F6 | 	mov	local03, local02
2a660     01 2A 86 F1 | 	sub	local03, #1
2a664                 | LR__3632
2a664     15 15 02 F6 | 	mov	arg02, local03
2a668     13 15 02 F1 | 	add	arg02, local01
2a66c     0A 29 C2 FA | 	rdbyte	local02, arg02
2a670     20 28 0E F2 | 	cmp	local02, #32 wz
2a674     44 00 90 AD |  if_e	jmp	#LR__3634
2a678     15 13 02 F6 | 	mov	arg01, local03
2a67c     02 12 06 F1 | 	add	arg01, #2
2a680     38 1C B0 FD | 	call	#__system___gc_alloc_managed
2a684     FD 2C 0A F6 | 	mov	local04, result1 wz
2a688     28 00 90 AD |  if_e	jmp	#LR__3633
2a68c     15 17 02 F6 | 	mov	arg03, local03
2a690     01 16 06 F1 | 	add	arg03, #1
2a694     16 13 02 F6 | 	mov	arg01, local04
2a698     13 15 02 F6 | 	mov	arg02, local01
2a69c     24 D9 BF FD | 	call	#__system____builtin_memmove
2a6a0     01 2A 06 F1 | 	add	local03, #1
2a6a4     16 2B 02 F1 | 	add	local03, local04
2a6a8     15 01 48 FC | 	wrbyte	#0, local03
2a6ac     16 FB 01 F6 | 	mov	result1, local04
2a6b0     1C 00 90 FD | 	jmp	#LR__3635
2a6b4                 | LR__3633
2a6b4     16 FB 01 F6 | 	mov	result1, local04
2a6b8     14 00 90 FD | 	jmp	#LR__3635
2a6bc                 | LR__3634
2a6bc     01 2A 86 F1 | 	sub	local03, #1
2a6c0     00 2A 56 F2 | 	cmps	local03, #0 wc
2a6c4     9C FF 9F 3D |  if_ae	jmp	#LR__3632
2a6c8     BE 01 00 FF 
2a6cc     41 FA 05 F6 | 	mov	result1, ##@LR__5520
2a6d0                 | LR__3635
2a6d0     A7 F0 03 F6 | 	mov	ptra, fp
2a6d4     B2 00 A0 FD | 	call	#popregs_
2a6d8                 | __system__RTrim_S_ret
2a6d8     2D 00 64 FD | 	ret
2a6dc                 | 
2a6dc                 | __system__Instr
2a6dc     07 4A 05 F6 | 	mov	COUNT_, #7
2a6e0     A8 00 A0 FD | 	call	#pushregs_
2a6e4     09 27 02 F6 | 	mov	local01, arg01
2a6e8     0A 29 02 F6 | 	mov	local02, arg02
2a6ec     0B 2B 02 F6 | 	mov	local03, arg03
2a6f0     15 13 02 F6 | 	mov	arg01, local03
2a6f4     09 2D 02 F6 | 	mov	local04, arg01
2a6f8     97 06 48 FB | 	callpa	#(@LR__3641-@LR__3640)>>2,fcache_load_ptr_
2a6fc                 | LR__3640
2a6fc     16 FB C9 FA | 	rdbyte	result1, local04 wz
2a700     01 2C 06 51 |  if_ne	add	local04, #1
2a704     F4 FF 9F 5D |  if_ne	jmp	#LR__3640
2a708                 | LR__3641
2a708     09 2D 82 F1 | 	sub	local04, arg01
2a70c     16 2F 02 F6 | 	mov	local05, local04
2a710     14 13 02 F6 | 	mov	arg01, local02
2a714     09 2D 02 F6 | 	mov	local04, arg01
2a718     97 06 48 FB | 	callpa	#(@LR__3643-@LR__3642)>>2,fcache_load_ptr_
2a71c                 | LR__3642
2a71c     16 FB C9 FA | 	rdbyte	result1, local04 wz
2a720     01 2C 06 51 |  if_ne	add	local04, #1
2a724     F4 FF 9F 5D |  if_ne	jmp	#LR__3642
2a728                 | LR__3643
2a728     09 2D 82 F1 | 	sub	local04, arg01
2a72c     16 FB 01 F6 | 	mov	result1, local04
2a730     FD 18 0A F6 | 	mov	arg04, result1 wz
2a734     00 FA 05 A6 |  if_e	mov	result1, #0
2a738     98 00 90 AD |  if_e	jmp	#LR__3647
2a73c     00 2E 0E F2 | 	cmp	local05, #0 wz
2a740     00 FA 05 A6 |  if_e	mov	result1, #0
2a744     8C 00 90 AD |  if_e	jmp	#LR__3647
2a748     0C 27 5A F2 | 	cmps	local01, arg04 wcz
2a74c     00 FA 05 16 |  if_a	mov	result1, #0
2a750     80 00 90 1D |  if_a	jmp	#LR__3647
2a754     01 26 56 F2 | 	cmps	local01, #1 wc
2a758     01 26 06 C6 |  if_b	mov	local01, #1
2a75c     15 31 C2 FA | 	rdbyte	local06, local03
2a760     01 2E 0E F2 | 	cmp	local05, #1 wz
2a764     18 00 90 5D |  if_ne	jmp	#LR__3644
2a768     14 13 02 F6 | 	mov	arg01, local02
2a76c     18 15 02 F6 | 	mov	arg02, local06
2a770     13 17 02 F6 | 	mov	arg03, local01
2a774     00 18 06 F6 | 	mov	arg04, #0
2a778     20 37 B0 FD | 	call	#__system____ScanForChar
2a77c     54 00 90 FD | 	jmp	#LR__3647
2a780                 | LR__3644
2a780     13 33 02 F6 | 	mov	local07, local01
2a784                 | LR__3645
2a784     14 13 02 F6 | 	mov	arg01, local02
2a788     18 15 02 F6 | 	mov	arg02, local06
2a78c     19 17 02 F6 | 	mov	arg03, local07
2a790     00 18 06 F6 | 	mov	arg04, #0
2a794     04 37 B0 FD | 	call	#__system____ScanForChar
2a798     FD 32 0A F6 | 	mov	local07, result1 wz
2a79c     30 00 90 AD |  if_e	jmp	#LR__3646
2a7a0     17 17 02 F6 | 	mov	arg03, local05
2a7a4     14 13 02 F6 | 	mov	arg01, local02
2a7a8     19 15 02 F6 | 	mov	arg02, local07
2a7ac     FC FA BF FD | 	call	#__system__Mid_S
2a7b0     FD 12 02 F6 | 	mov	arg01, result1
2a7b4     15 15 02 F6 | 	mov	arg02, local03
2a7b8     80 D9 BF FD | 	call	#__system___string_cmp
2a7bc     00 FA 0D F2 | 	cmp	result1, #0 wz
2a7c0     19 FB 01 A6 |  if_e	mov	result1, local07
2a7c4     0C 00 90 AD |  if_e	jmp	#LR__3647
2a7c8     17 33 02 F1 | 	add	local07, local05
2a7cc     B4 FF 9F FD | 	jmp	#LR__3645
2a7d0                 | LR__3646
2a7d0     00 FA 05 F6 | 	mov	result1, #0
2a7d4                 | LR__3647
2a7d4     A7 F0 03 F6 | 	mov	ptra, fp
2a7d8     B2 00 A0 FD | 	call	#popregs_
2a7dc                 | __system__Instr_ret
2a7dc     2D 00 64 FD | 	ret
2a7e0                 | 
2a7e0                 | __system__InstrRev
2a7e0     07 4A 05 F6 | 	mov	COUNT_, #7
2a7e4     A8 00 A0 FD | 	call	#pushregs_
2a7e8     09 27 02 F6 | 	mov	local01, arg01
2a7ec     0A 29 02 F6 | 	mov	local02, arg02
2a7f0     0B 2B 02 F6 | 	mov	local03, arg03
2a7f4     15 13 02 F6 | 	mov	arg01, local03
2a7f8     09 2D 02 F6 | 	mov	local04, arg01
2a7fc     97 06 48 FB | 	callpa	#(@LR__3651-@LR__3650)>>2,fcache_load_ptr_
2a800                 | LR__3650
2a800     16 FB C9 FA | 	rdbyte	result1, local04 wz
2a804     01 2C 06 51 |  if_ne	add	local04, #1
2a808     F4 FF 9F 5D |  if_ne	jmp	#LR__3650
2a80c                 | LR__3651
2a80c     09 2D 82 F1 | 	sub	local04, arg01
2a810     16 2F 02 F6 | 	mov	local05, local04
2a814     14 13 02 F6 | 	mov	arg01, local02
2a818     09 2D 02 F6 | 	mov	local04, arg01
2a81c     97 06 48 FB | 	callpa	#(@LR__3653-@LR__3652)>>2,fcache_load_ptr_
2a820                 | LR__3652
2a820     16 FB C9 FA | 	rdbyte	result1, local04 wz
2a824     01 2C 06 51 |  if_ne	add	local04, #1
2a828     F4 FF 9F 5D |  if_ne	jmp	#LR__3652
2a82c                 | LR__3653
2a82c     09 2D 82 F1 | 	sub	local04, arg01
2a830     16 FB 01 F6 | 	mov	result1, local04
2a834     FD 18 0A F6 | 	mov	arg04, result1 wz
2a838     00 FA 05 A6 |  if_e	mov	result1, #0
2a83c     98 00 90 AD |  if_e	jmp	#LR__3657
2a840     00 2E 0E F2 | 	cmp	local05, #0 wz
2a844     00 FA 05 A6 |  if_e	mov	result1, #0
2a848     8C 00 90 AD |  if_e	jmp	#LR__3657
2a84c     0C 27 5A F2 | 	cmps	local01, arg04 wcz
2a850     0C 27 02 16 |  if_a	mov	local01, arg04
2a854     01 26 56 F2 | 	cmps	local01, #1 wc
2a858     01 26 06 C6 |  if_b	mov	local01, #1
2a85c     15 31 C2 FA | 	rdbyte	local06, local03
2a860     01 2E 0E F2 | 	cmp	local05, #1 wz
2a864     18 00 90 5D |  if_ne	jmp	#LR__3654
2a868     14 13 02 F6 | 	mov	arg01, local02
2a86c     18 15 02 F6 | 	mov	arg02, local06
2a870     13 17 02 F6 | 	mov	arg03, local01
2a874     01 18 06 F6 | 	mov	arg04, #1
2a878     20 36 B0 FD | 	call	#__system____ScanForChar
2a87c     58 00 90 FD | 	jmp	#LR__3657
2a880                 | LR__3654
2a880     17 33 02 F6 | 	mov	local07, local05
2a884     01 32 86 F1 | 	sub	local07, #1
2a888                 | LR__3655
2a888     14 13 02 F6 | 	mov	arg01, local02
2a88c     18 15 02 F6 | 	mov	arg02, local06
2a890     19 17 02 F6 | 	mov	arg03, local07
2a894     01 18 06 F6 | 	mov	arg04, #1
2a898     00 36 B0 FD | 	call	#__system____ScanForChar
2a89c     FD 32 0A F6 | 	mov	local07, result1 wz
2a8a0     30 00 90 AD |  if_e	jmp	#LR__3656
2a8a4     17 17 02 F6 | 	mov	arg03, local05
2a8a8     14 13 02 F6 | 	mov	arg01, local02
2a8ac     19 15 02 F6 | 	mov	arg02, local07
2a8b0     F8 F9 BF FD | 	call	#__system__Mid_S
2a8b4     FD 12 02 F6 | 	mov	arg01, result1
2a8b8     15 15 02 F6 | 	mov	arg02, local03
2a8bc     7C D8 BF FD | 	call	#__system___string_cmp
2a8c0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a8c4     19 FB 01 A6 |  if_e	mov	result1, local07
2a8c8     0C 00 90 AD |  if_e	jmp	#LR__3657
2a8cc     17 33 82 F1 | 	sub	local07, local05
2a8d0     B4 FF 9F FD | 	jmp	#LR__3655
2a8d4                 | LR__3656
2a8d4     00 FA 05 F6 | 	mov	result1, #0
2a8d8                 | LR__3657
2a8d8     A7 F0 03 F6 | 	mov	ptra, fp
2a8dc     B2 00 A0 FD | 	call	#popregs_
2a8e0                 | __system__InstrRev_ret
2a8e0     2D 00 64 FD | 	ret
2a8e4                 | 
2a8e4                 | __system___remove
2a8e4     06 4A 05 F6 | 	mov	COUNT_, #6
2a8e8     A8 00 A0 FD | 	call	#pushregs_
2a8ec     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2a8f0     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2a8f4     09 15 02 F6 | 	mov	arg02, arg01
2a8f8     13 13 02 F6 | 	mov	arg01, local01
2a8fc     00 16 06 F6 | 	mov	arg03, #0
2a900     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2a904     A4 DF BF FD | 	call	#__system____getvfsforfile
2a908     FD 28 0A F6 | 	mov	local02, result1 wz
2a90c     10 00 90 AD |  if_e	jmp	#LR__3660
2a910     20 28 06 F1 | 	add	local02, #32
2a914     14 13 0A FB | 	rdlong	arg01, local02 wz
2a918     20 28 86 F1 | 	sub	local02, #32
2a91c     14 00 90 5D |  if_ne	jmp	#LR__3661
2a920                 | LR__3660
2a920     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a924     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2a928     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a92c     01 FA 65 F6 | 	neg	result1, #1
2a930     A8 00 90 FD | 	jmp	#LR__3664
2a934                 | LR__3661
2a934     40 28 06 F1 | 	add	local02, #64
2a938     14 2B 02 FB | 	rdlong	local03, local02
2a93c     15 2D 02 F6 | 	mov	local04, local03
2a940     40 28 86 F1 | 	sub	local02, #64
2a944     13 2C 46 F7 | 	zerox	local04, #19
2a948     14 2A 46 F0 | 	shr	local03, #20
2a94c     02 2A 66 F0 | 	shl	local03, #2
2a950     ED 2A 02 F1 | 	add	local03, __methods__
2a954     15 2B 02 FB | 	rdlong	local03, local03
2a958     13 13 02 F6 | 	mov	arg01, local01
2a95c     F2 2E 02 F6 | 	mov	local05, objptr
2a960     16 E5 01 F6 | 	mov	objptr, local04
2a964     2D 2A 62 FD | 	call	local03
2a968     17 E5 01 F6 | 	mov	objptr, local05
2a96c     FD 30 02 F6 | 	mov	local06, result1
2a970     FF FF 7F FF 
2a974     F2 31 0E F2 | 	cmp	local06, ##-14 wz
2a978     38 00 90 5D |  if_ne	jmp	#LR__3662
2a97c     3C 28 06 F1 | 	add	local02, #60
2a980     14 31 02 FB | 	rdlong	local06, local02
2a984     18 2B 02 F6 | 	mov	local03, local06
2a988     13 30 46 F7 | 	zerox	local06, #19
2a98c     14 2A 46 F0 | 	shr	local03, #20
2a990     02 2A 66 F0 | 	shl	local03, #2
2a994     ED 2A 02 F1 | 	add	local03, __methods__
2a998     15 2B 02 FB | 	rdlong	local03, local03
2a99c     13 13 02 F6 | 	mov	arg01, local01
2a9a0     F2 2E 02 F6 | 	mov	local05, objptr
2a9a4     18 E5 01 F6 | 	mov	objptr, local06
2a9a8     2D 2A 62 FD | 	call	local03
2a9ac     17 E5 01 F6 | 	mov	objptr, local05
2a9b0     FD 30 02 F6 | 	mov	local06, result1
2a9b4                 | LR__3662
2a9b4     00 30 0E F2 | 	cmp	local06, #0 wz
2a9b8     1C 00 90 AD |  if_e	jmp	#LR__3663
2a9bc     18 13 6A F6 | 	neg	arg01, local06 wz
2a9c0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a9c4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2a9c8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a9cc     01 FA 65 56 |  if_ne	neg	result1, #1
2a9d0     00 FA 05 A6 |  if_e	mov	result1, #0
2a9d4     04 00 90 FD | 	jmp	#LR__3664
2a9d8                 | LR__3663
2a9d8     00 FA 05 F6 | 	mov	result1, #0
2a9dc                 | LR__3664
2a9dc     A7 F0 03 F6 | 	mov	ptra, fp
2a9e0     B2 00 A0 FD | 	call	#popregs_
2a9e4                 | __system___remove_ret
2a9e4     2D 00 64 FD | 	ret
2a9e8                 | 
2a9e8                 | __system___mkdir
2a9e8     05 4A 05 F6 | 	mov	COUNT_, #5
2a9ec     A8 00 A0 FD | 	call	#pushregs_
2a9f0     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2a9f4     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2a9f8     09 15 02 F6 | 	mov	arg02, arg01
2a9fc     13 13 02 F6 | 	mov	arg01, local01
2aa00     00 16 06 F6 | 	mov	arg03, #0
2aa04     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2aa08     A0 DE BF FD | 	call	#__system____getvfsforfile
2aa0c     FD 28 0A F6 | 	mov	local02, result1 wz
2aa10     10 00 90 AD |  if_e	jmp	#LR__3670
2aa14     20 28 06 F1 | 	add	local02, #32
2aa18     14 15 0A FB | 	rdlong	arg02, local02 wz
2aa1c     20 28 86 F1 | 	sub	local02, #32
2aa20     14 00 90 5D |  if_ne	jmp	#LR__3671
2aa24                 | LR__3670
2aa24     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2aa28     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2aa2c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2aa30     01 FA 65 F6 | 	neg	result1, #1
2aa34     60 00 90 FD | 	jmp	#LR__3673
2aa38                 | LR__3671
2aa38     38 28 06 F1 | 	add	local02, #56
2aa3c     14 2B 02 FB | 	rdlong	local03, local02
2aa40     15 2D 02 F6 | 	mov	local04, local03
2aa44     13 2A 46 F7 | 	zerox	local03, #19
2aa48     14 2C 46 F0 | 	shr	local04, #20
2aa4c     02 2C 66 F0 | 	shl	local04, #2
2aa50     ED 2C 02 F1 | 	add	local04, __methods__
2aa54     16 2D 02 FB | 	rdlong	local04, local04
2aa58     13 13 02 F6 | 	mov	arg01, local01
2aa5c     FF 15 06 F6 | 	mov	arg02, #511
2aa60     F2 2E 02 F6 | 	mov	local05, objptr
2aa64     15 E5 01 F6 | 	mov	objptr, local03
2aa68     2D 2C 62 FD | 	call	local04
2aa6c     17 E5 01 F6 | 	mov	objptr, local05
2aa70     FD 12 0A F6 | 	mov	arg01, result1 wz
2aa74     1C 00 90 AD |  if_e	jmp	#LR__3672
2aa78     09 13 6A F6 | 	neg	arg01, arg01 wz
2aa7c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2aa80     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2aa84     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2aa88     01 FA 65 56 |  if_ne	neg	result1, #1
2aa8c     00 FA 05 A6 |  if_e	mov	result1, #0
2aa90     04 00 90 FD | 	jmp	#LR__3673
2aa94                 | LR__3672
2aa94     00 FA 05 F6 | 	mov	result1, #0
2aa98                 | LR__3673
2aa98     A7 F0 03 F6 | 	mov	ptra, fp
2aa9c     B2 00 A0 FD | 	call	#popregs_
2aaa0                 | __system___mkdir_ret
2aaa0     2D 00 64 FD | 	ret
2aaa4                 | 
2aaa4                 | __system___strerror
2aaa4     00 12 56 F2 | 	cmps	arg01, #0 wc
2aaa8     08 00 90 CD |  if_b	jmp	#LR__3680
2aaac     1A 12 56 F2 | 	cmps	arg01, #26 wc
2aab0     04 00 90 CD |  if_b	jmp	#LR__3681
2aab4                 | LR__3680
2aab4     19 12 06 F6 | 	mov	arg01, #25
2aab8                 | LR__3681
2aab8     02 12 66 F0 | 	shl	arg01, #2
2aabc     01 00 00 FF 
2aac0     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
2aac4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2aac8     09 FB 01 FB | 	rdlong	result1, arg01
2aacc     01 00 00 FF 
2aad0     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
2aad4                 | __system___strerror_ret
2aad4     2D 00 64 FD | 	ret
2aad8                 | 
2aad8                 | __system___int64_shl
2aad8     20 16 CE F7 | 	test	arg03, #32 wz
2aadc     09 15 02 56 |  if_ne	mov	arg02, arg01
2aae0     00 12 06 56 |  if_ne	mov	arg01, #0
2aae4     1F 16 CE F7 | 	test	arg03, #31 wz
2aae8     18 00 90 AD |  if_e	jmp	#LR__3690
2aaec     0B 15 62 F0 | 	shl	arg02, arg03
2aaf0     09 FB 01 F6 | 	mov	result1, arg01
2aaf4     0B FD 61 F6 | 	neg	result2, arg03
2aaf8     FE FA 41 F0 | 	shr	result1, result2
2aafc     FD 14 42 F5 | 	or	arg02, result1
2ab00     0B 13 62 F0 | 	shl	arg01, arg03
2ab04                 | LR__3690
2ab04     0A FD 01 F6 | 	mov	result2, arg02
2ab08     09 FB 01 F6 | 	mov	result1, arg01
2ab0c                 | __system___int64_shl_ret
2ab0c     2D 00 64 FD | 	ret
2ab10                 | 
2ab10                 | __system___usepins
2ab10     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2ab14     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
2ab18     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
2ab1c     00 13 CA F7 | 	test	arg01, _var01 wz
2ab20     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
2ab24     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
2ab28     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
2ab2c     01 15 CA A7 |  if_e	test	arg02, _var02 wz
2ab30     00 FA 05 56 |  if_ne	mov	result1, #0
2ab34     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
2ab38     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2ab3c     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
2ab40     09 03 42 F5 | 	or	_var02, arg01
2ab44     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2ab48     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2ab4c     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
2ab50     0A 03 42 F5 | 	or	_var02, arg02
2ab54     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2ab58     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
2ab5c     01 FA 65 F6 | 	neg	result1, #1
2ab60                 | __system___usepins_ret
2ab60     2D 00 64 FD | 	ret
2ab64                 | 
2ab64                 | __system___freepins
2ab64     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2ab68     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
2ab6c     09 01 22 F5 | 	andn	_var01, arg01
2ab70     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
2ab74     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2ab78     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
2ab7c     0A 01 22 F5 | 	andn	_var01, arg02
2ab80     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
2ab84     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
2ab88                 | __system___freepins_ret
2ab88     2D 00 64 FD | 	ret
2ab8c                 | 
2ab8c                 | __system___float_fromuns
2ab8c     09 17 0A F6 | 	mov	arg03, arg01 wz
2ab90     0B FB 01 A6 |  if_e	mov	result1, arg03
2ab94     24 00 90 AD |  if_e	jmp	#LR__3700
2ab98     0B 15 92 F7 | 	encod	arg02, arg03 wc
2ab9c     01 14 06 C1 |  if_b	add	arg02, #1
2aba0     01 14 86 F1 | 	sub	arg02, #1
2aba4     1F 12 06 F6 | 	mov	arg01, #31
2aba8     0A 13 82 F1 | 	sub	arg01, arg02
2abac     09 17 62 F0 | 	shl	arg03, arg01
2abb0     02 16 46 F0 | 	shr	arg03, #2
2abb4     00 12 06 F6 | 	mov	arg01, #0
2abb8     4C 09 B0 FD | 	call	#__system___float_Pack
2abbc                 | LR__3700
2abbc                 | __system___float_fromuns_ret
2abbc     2D 00 64 FD | 	ret
2abc0                 | 
2abc0                 | __system___float_add
2abc0     0F 4A 05 F6 | 	mov	COUNT_, #15
2abc4     A8 00 A0 FD | 	call	#pushregs_
2abc8     09 27 02 F6 | 	mov	local01, arg01
2abcc     0A 29 02 F6 | 	mov	local02, arg02
2abd0     00 2A 06 F6 | 	mov	local03, #0
2abd4     13 2D 02 F6 | 	mov	local04, local01
2abd8     16 2F 02 F6 | 	mov	local05, local04
2abdc     16 2E 46 F7 | 	zerox	local05, #22
2abe0     16 31 02 F6 | 	mov	local06, local04
2abe4     01 30 66 F0 | 	shl	local06, #1
2abe8     18 30 46 F0 | 	shr	local06, #24
2abec     1F 2C 46 F0 | 	shr	local04, #31
2abf0     14 13 02 F6 | 	mov	arg01, local02
2abf4     09 FB 01 F6 | 	mov	result1, arg01
2abf8     FD 32 02 F6 | 	mov	local07, result1
2abfc     19 35 02 F6 | 	mov	local08, local07
2ac00     16 34 46 F7 | 	zerox	local08, #22
2ac04     19 37 02 F6 | 	mov	local09, local07
2ac08     01 36 66 F0 | 	shl	local09, #1
2ac0c     18 36 46 F0 | 	shr	local09, #24
2ac10     1B 39 02 F6 | 	mov	local10, local09
2ac14     1F 32 46 F0 | 	shr	local07, #31
2ac18     00 3A 06 F6 | 	mov	local11, #0
2ac1c     00 3C 06 F6 | 	mov	local12, #0
2ac20     1C 31 12 F2 | 	cmp	local06, local10 wc
2ac24     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
2ac28     2C 00 90 1D |  if_a	jmp	#LR__3710
2ac2c     1A 2F 12 32 |  if_ae	cmp	local05, local08 wc
2ac30     24 00 90 3D |  if_ae	jmp	#LR__3710
2ac34     17 3F 02 F6 | 	mov	local13, local05
2ac38     1A 2F 02 F6 | 	mov	local05, local08
2ac3c     1F 35 02 F6 | 	mov	local08, local13
2ac40     18 3F 02 F6 | 	mov	local13, local06
2ac44     1C 31 02 F6 | 	mov	local06, local10
2ac48     1F 39 02 F6 | 	mov	local10, local13
2ac4c     16 3F 02 F6 | 	mov	local13, local04
2ac50     19 2D 02 F6 | 	mov	local04, local07
2ac54     1F 33 02 F6 | 	mov	local07, local13
2ac58                 | LR__3710
2ac58     FF 30 0E F2 | 	cmp	local06, #255 wz
2ac5c     70 01 90 AD |  if_e	jmp	#LR__3725
2ac60     00 30 0E F2 | 	cmp	local06, #0 wz
2ac64     AC 01 90 AD |  if_e	jmp	#LR__3727
2ac68     17 2E 26 F4 | 	bith	local05, #23
2ac6c                 | LR__3711
2ac6c     00 38 0E F2 | 	cmp	local10, #0 wz
2ac70     F0 01 90 AD |  if_e	jmp	#LR__3731
2ac74     17 34 26 F4 | 	bith	local08, #23
2ac78                 | LR__3712
2ac78     7F 30 86 F1 | 	sub	local06, #127
2ac7c     7F 38 86 F1 | 	sub	local10, #127
2ac80     18 41 02 F6 | 	mov	local14, local06
2ac84     1C 41 82 F1 | 	sub	local14, local10
2ac88     97 14 48 FB | 	callpa	#(@LR__3714-@LR__3713)>>2,fcache_load_ptr_
2ac8c                 | LR__3713
2ac8c     20 40 56 F2 | 	cmps	local14, #32 wc
2ac90     20 00 90 CD |  if_b	jmp	#LR__3715
2ac94     1A 37 02 F6 | 	mov	local09, local08
2ac98     00 3A 0E F2 | 	cmp	local11, #0 wz
2ac9c     6F 3A 62 FD | 	wrnz	local11
2aca0     1D 37 42 F5 | 	or	local09, local11
2aca4     1B 3B 02 F6 | 	mov	local11, local09
2aca8     00 34 06 F6 | 	mov	local08, #0
2acac     20 40 86 F1 | 	sub	local14, #32
2acb0     D8 FF 9F FD | 	jmp	#LR__3713
2acb4                 | LR__3714
2acb4                 | LR__3715
2acb4     00 40 0E F2 | 	cmp	local14, #0 wz
2acb8     38 00 90 AD |  if_e	jmp	#LR__3716
2acbc     1A 3F 02 F6 | 	mov	local13, local08
2acc0     20 38 06 F6 | 	mov	local10, #32
2acc4     20 39 82 F1 | 	sub	local10, local14
2acc8     1C 3F 62 F0 | 	shl	local13, local10
2accc     1D 39 02 F6 | 	mov	local10, local11
2acd0     20 36 06 F6 | 	mov	local09, #32
2acd4     20 37 82 F1 | 	sub	local09, local14
2acd8     1B 39 6A F0 | 	shl	local10, local09 wz
2acdc     20 3B 42 F0 | 	shr	local11, local14
2ace0     20 35 42 F0 | 	shr	local08, local14
2ace4     1F 3B 42 F5 | 	or	local11, local13
2ace8     00 42 06 F6 | 	mov	local15, #0
2acec     01 42 06 56 |  if_ne	mov	local15, #1
2acf0     21 3B 42 F5 | 	or	local11, local15
2acf4                 | LR__3716
2acf4     16 43 02 F6 | 	mov	local15, local04
2acf8     19 43 62 F5 | 	xor	local15, local07
2acfc     01 42 CE F7 | 	test	local15, #1 wz
2ad00     18 00 90 AD |  if_e	jmp	#LR__3717
2ad04     1A 35 22 F6 | 	not	local08, local08
2ad08     1D 3B 22 F6 | 	not	local11, local11
2ad0c     01 3A 0E F1 | 	add	local11, #1 wz
2ad10     00 42 06 F6 | 	mov	local15, #0
2ad14     01 42 06 A6 |  if_e	mov	local15, #1
2ad18     21 35 02 F1 | 	add	local08, local15
2ad1c                 | LR__3717
2ad1c     1D 3D 12 F1 | 	add	local12, local11 wc
2ad20     1A 2F 22 F1 | 	addx	local05, local08
2ad24     00 2E 56 F2 | 	cmps	local05, #0 wc
2ad28     1C 00 90 3D |  if_ae	jmp	#LR__3718
2ad2c     01 2C 66 F5 | 	xor	local04, #1
2ad30     17 2F 22 F6 | 	not	local05, local05
2ad34     1E 3D 22 F6 | 	not	local12, local12
2ad38     01 3C 0E F1 | 	add	local12, #1 wz
2ad3c     00 42 06 F6 | 	mov	local15, #0
2ad40     01 42 06 A6 |  if_e	mov	local15, #1
2ad44     21 2F 02 F1 | 	add	local05, local15
2ad48                 | LR__3718
2ad48     00 80 00 FF 
2ad4c     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
2ad50     28 00 90 CD |  if_b	jmp	#LR__3719
2ad54     01 30 06 F1 | 	add	local06, #1
2ad58     1E 41 02 F6 | 	mov	local14, local12
2ad5c     01 40 06 F5 | 	and	local14, #1
2ad60     01 3C 46 F0 | 	shr	local12, #1
2ad64     17 43 02 F6 | 	mov	local15, local05
2ad68     1F 42 66 F0 | 	shl	local15, #31
2ad6c     21 3D 42 F5 | 	or	local12, local15
2ad70     20 3D 42 F5 | 	or	local12, local14
2ad74     01 2E 46 F0 | 	shr	local05, #1
2ad78     3C 00 90 FD | 	jmp	#LR__3724
2ad7c                 | LR__3719
2ad7c     00 40 00 FF 
2ad80     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
2ad84     30 00 90 3D |  if_ae	jmp	#LR__3723
2ad88     00 2E 0E F2 | 	cmp	local05, #0 wz
2ad8c     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
2ad90     08 2C 46 A5 |  if_e	or	local04, #8
2ad94     01 2C 26 A5 |  if_e	andn	local04, #1
2ad98     1C 00 90 AD |  if_e	jmp	#LR__3722
2ad9c                 | LR__3720
2ad9c     00 40 00 FF 
2ada0     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
2ada4     10 00 90 3D |  if_ae	jmp	#LR__3721
2ada8     1E 3D 12 F1 | 	add	local12, local12 wc
2adac     17 2F 22 F1 | 	addx	local05, local05
2adb0     01 30 86 F1 | 	sub	local06, #1
2adb4     E4 FF 9F FD | 	jmp	#LR__3720
2adb8                 | LR__3721
2adb8                 | LR__3722
2adb8                 | LR__3723
2adb8                 | LR__3724
2adb8     17 13 02 F6 | 	mov	arg01, local05
2adbc     1E 15 02 F6 | 	mov	arg02, local12
2adc0     18 17 02 F6 | 	mov	arg03, local06
2adc4     16 19 02 F6 | 	mov	arg04, local04
2adc8     14 35 B0 FD | 	call	#__system__pack_0696
2adcc     DC 00 90 FD | 	jmp	#LR__3735
2add0                 | LR__3725
2add0     FF 38 0E F2 | 	cmp	local10, #255 wz
2add4     10 00 90 5D |  if_ne	jmp	#LR__3726
2add8     16 33 0A F2 | 	cmp	local07, local04 wz
2addc     00 F8 3F 5F 
2ade0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2ade4     C4 00 90 5D |  if_ne	jmp	#LR__3735
2ade8                 | LR__3726
2ade8     00 2E 0E F2 | 	cmp	local05, #0 wz
2adec     00 F8 3F 5F 
2adf0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2adf4     B4 00 90 5D |  if_ne	jmp	#LR__3735
2adf8     1E 15 02 F6 | 	mov	arg02, local12
2adfc     18 17 02 F6 | 	mov	arg03, local06
2ae00     16 19 02 F6 | 	mov	arg04, local04
2ae04     02 18 46 F5 | 	or	arg04, #2
2ae08     17 13 02 F6 | 	mov	arg01, local05
2ae0c     D0 34 B0 FD | 	call	#__system__pack_0696
2ae10     98 00 90 FD | 	jmp	#LR__3735
2ae14                 | LR__3727
2ae14     00 2E 0E F2 | 	cmp	local05, #0 wz
2ae18     28 00 90 AD |  if_e	jmp	#LR__3730
2ae1c     01 2E 66 F0 | 	shl	local05, #1
2ae20     97 0E 48 FB | 	callpa	#(@LR__3729-@LR__3728)>>2,fcache_load_ptr_
2ae24                 | LR__3728
2ae24     00 40 00 FF 
2ae28     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
2ae2c     18 43 02 C6 |  if_b	mov	local15, local06
2ae30     01 42 86 C1 |  if_b	sub	local15, #1
2ae34     21 31 02 C6 |  if_b	mov	local06, local15
2ae38     01 2E 66 C0 |  if_b	shl	local05, #1
2ae3c     E4 FF 9F CD |  if_b	jmp	#LR__3728
2ae40                 | LR__3729
2ae40     28 FE 9F FD | 	jmp	#LR__3711
2ae44                 | LR__3730
2ae44     19 2D 02 F5 | 	and	local04, local07
2ae48     16 19 02 F6 | 	mov	arg04, local04
2ae4c     08 18 46 F5 | 	or	arg04, #8
2ae50     00 12 06 F6 | 	mov	arg01, #0
2ae54     00 14 06 F6 | 	mov	arg02, #0
2ae58     00 16 06 F6 | 	mov	arg03, #0
2ae5c     80 34 B0 FD | 	call	#__system__pack_0696
2ae60     48 00 90 FD | 	jmp	#LR__3735
2ae64                 | LR__3731
2ae64     00 34 0E F2 | 	cmp	local08, #0 wz
2ae68     28 00 90 AD |  if_e	jmp	#LR__3734
2ae6c     01 34 66 F0 | 	shl	local08, #1
2ae70     97 0E 48 FB | 	callpa	#(@LR__3733-@LR__3732)>>2,fcache_load_ptr_
2ae74                 | LR__3732
2ae74     00 40 00 FF 
2ae78     00 34 16 F2 | 	cmp	local08, ##8388608 wc
2ae7c     1C 43 02 C6 |  if_b	mov	local15, local10
2ae80     01 42 86 C1 |  if_b	sub	local15, #1
2ae84     21 39 02 C6 |  if_b	mov	local10, local15
2ae88     01 34 66 C0 |  if_b	shl	local08, #1
2ae8c     E4 FF 9F CD |  if_b	jmp	#LR__3732
2ae90                 | LR__3733
2ae90     E4 FD 9F FD | 	jmp	#LR__3712
2ae94                 | LR__3734
2ae94     7F 30 86 F1 | 	sub	local06, #127
2ae98     17 13 02 F6 | 	mov	arg01, local05
2ae9c     1E 15 02 F6 | 	mov	arg02, local12
2aea0     18 17 02 F6 | 	mov	arg03, local06
2aea4     16 19 02 F6 | 	mov	arg04, local04
2aea8     34 34 B0 FD | 	call	#__system__pack_0696
2aeac                 | LR__3735
2aeac     A7 F0 03 F6 | 	mov	ptra, fp
2aeb0     B2 00 A0 FD | 	call	#popregs_
2aeb4                 | __system___float_add_ret
2aeb4     2D 00 64 FD | 	ret
2aeb8                 | 
2aeb8                 | __system___float_sqrt
2aeb8     04 4A 05 F6 | 	mov	COUNT_, #4
2aebc     A8 00 A0 FD | 	call	#pushregs_
2aec0     09 27 02 F6 | 	mov	local01, arg01
2aec4     09 FB 01 F6 | 	mov	result1, arg01
2aec8     FD 28 02 F6 | 	mov	local02, result1
2aecc     14 2B 02 F6 | 	mov	local03, local02
2aed0     16 2A 46 F7 | 	zerox	local03, #22
2aed4     14 2D 02 F6 | 	mov	local04, local02
2aed8     01 2C 66 F0 | 	shl	local04, #1
2aedc     18 2C 4E F0 | 	shr	local04, #24 wz
2aee0     1F 28 46 F0 | 	shr	local02, #31
2aee4     70 00 90 AD |  if_e	jmp	#LR__3741
2aee8     17 2A 26 F4 | 	bith	local03, #23
2aeec                 | LR__3740
2aeec     00 28 0E F2 | 	cmp	local02, #0 wz
2aef0     00 F8 3F 5F 
2aef4     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2aef8     88 00 90 5D |  if_ne	jmp	#LR__3744
2aefc     FF 2C 0E F2 | 	cmp	local04, #255 wz
2af00     13 FB 01 A6 |  if_e	mov	result1, local01
2af04     7C 00 90 AD |  if_e	jmp	#LR__3744
2af08     7F 2C 86 F1 | 	sub	local04, #127
2af0c     01 2C CE F7 | 	test	local04, #1 wz
2af10     01 2A 66 50 |  if_ne	shl	local03, #1
2af14     05 2A 66 F0 | 	shl	local03, #5
2af18     15 01 38 FD | 	qsqrt	#0, local03
2af1c     01 2C 86 51 |  if_ne	sub	local04, #1
2af20     16 2D 52 F6 | 	abs	local04, local04 wc
2af24     01 2C 46 F0 | 	shr	local04, #1
2af28     16 17 82 F6 | 	negc	arg03, local04
2af2c     14 19 02 F6 | 	mov	arg04, local02
2af30     18 12 62 FD | 	getqx	arg01
2af34     09 15 02 F6 | 	mov	arg02, arg01
2af38     19 14 66 F0 | 	shl	arg02, #25
2af3c     07 12 46 F0 | 	shr	arg01, #7
2af40     00 80 00 FF 
2af44     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
2af48     01 16 06 31 |  if_ae	add	arg03, #1
2af4c     01 12 46 30 |  if_ae	shr	arg01, #1
2af50     8C 33 B0 FD | 	call	#__system__pack_0696
2af54     2C 00 90 FD | 	jmp	#LR__3744
2af58                 | LR__3741
2af58     00 2A 0E F2 | 	cmp	local03, #0 wz
2af5c     13 FB 01 A6 |  if_e	mov	result1, local01
2af60     20 00 90 AD |  if_e	jmp	#LR__3744
2af64     01 2A 66 F0 | 	shl	local03, #1
2af68     97 0A 48 FB | 	callpa	#(@LR__3743-@LR__3742)>>2,fcache_load_ptr_
2af6c                 | LR__3742
2af6c     00 40 00 FF 
2af70     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
2af74     01 2C 86 C1 |  if_b	sub	local04, #1
2af78     01 2A 66 C0 |  if_b	shl	local03, #1
2af7c     EC FF 9F CD |  if_b	jmp	#LR__3742
2af80                 | LR__3743
2af80     68 FF 9F FD | 	jmp	#LR__3740
2af84                 | LR__3744
2af84     A7 F0 03 F6 | 	mov	ptra, fp
2af88     B2 00 A0 FD | 	call	#popregs_
2af8c                 | __system___float_sqrt_ret
2af8c     2D 00 64 FD | 	ret
2af90                 | 
2af90                 | __system___float_mul
2af90     0B 4A 05 F6 | 	mov	COUNT_, #11
2af94     A8 00 A0 FD | 	call	#pushregs_
2af98     09 27 02 F6 | 	mov	local01, arg01
2af9c     0A 29 02 F6 | 	mov	local02, arg02
2afa0     13 2B 02 F6 | 	mov	local03, local01
2afa4     15 2D 02 F6 | 	mov	local04, local03
2afa8     16 2C 46 F7 | 	zerox	local04, #22
2afac     15 2F 02 F6 | 	mov	local05, local03
2afb0     01 2E 66 F0 | 	shl	local05, #1
2afb4     18 2E 46 F0 | 	shr	local05, #24
2afb8     1F 2A 46 F0 | 	shr	local03, #31
2afbc     14 FB 01 F6 | 	mov	result1, local02
2afc0     FD 30 02 F6 | 	mov	local06, result1
2afc4     18 33 02 F6 | 	mov	local07, local06
2afc8     16 32 46 F7 | 	zerox	local07, #22
2afcc     18 35 02 F6 | 	mov	local08, local06
2afd0     01 34 66 F0 | 	shl	local08, #1
2afd4     18 34 46 F0 | 	shr	local08, #24
2afd8     1F 30 46 F0 | 	shr	local06, #31
2afdc     18 2B 62 F5 | 	xor	local03, local06
2afe0     FF 2E 0E F2 | 	cmp	local05, #255 wz
2afe4     90 00 90 AD |  if_e	jmp	#LR__3753
2afe8     FF 34 0E F2 | 	cmp	local08, #255 wz
2afec     D8 00 90 AD |  if_e	jmp	#LR__3755
2aff0     00 2E 0E F2 | 	cmp	local05, #0 wz
2aff4     0C 01 90 AD |  if_e	jmp	#LR__3756
2aff8     17 2C 26 F4 | 	bith	local04, #23
2affc                 | LR__3750
2affc     00 34 0E F2 | 	cmp	local08, #0 wz
2b000     44 01 90 AD |  if_e	jmp	#LR__3760
2b004     17 32 26 F4 | 	bith	local07, #23
2b008                 | LR__3751
2b008     16 29 02 F6 | 	mov	local02, local04
2b00c     04 28 66 F0 | 	shl	local02, #4
2b010     19 31 02 F6 | 	mov	local06, local07
2b014     05 30 66 F0 | 	shl	local06, #5
2b018     18 29 02 FD | 	qmul	local02, local06
2b01c     1A 2F 02 F1 | 	add	local05, local08
2b020     FE 2E 86 F1 | 	sub	local05, #254
2b024     17 37 02 F6 | 	mov	local09, local05
2b028     04 2C 66 F0 | 	shl	local04, #4
2b02c     05 32 66 F0 | 	shl	local07, #5
2b030     18 38 62 FD | 	getqx	local10
2b034     19 2D 02 FD | 	qmul	local04, local07
2b038     19 3A 62 FD | 	getqy	local11
2b03c     00 80 00 FF 
2b040     00 3A 16 F2 | 	cmp	local11, ##16777216 wc
2b044     18 00 90 CD |  if_b	jmp	#LR__3752
2b048     01 36 06 F1 | 	add	local09, #1
2b04c     01 38 46 F0 | 	shr	local10, #1
2b050     1D 35 02 F6 | 	mov	local08, local11
2b054     1F 34 66 F0 | 	shl	local08, #31
2b058     1A 39 42 F5 | 	or	local10, local08
2b05c     01 3A 46 F0 | 	shr	local11, #1
2b060                 | LR__3752
2b060     1D 13 02 F6 | 	mov	arg01, local11
2b064     1C 15 02 F6 | 	mov	arg02, local10
2b068     1B 17 02 F6 | 	mov	arg03, local09
2b06c     15 19 02 F6 | 	mov	arg04, local03
2b070     6C 32 B0 FD | 	call	#__system__pack_0696
2b074     10 01 90 FD | 	jmp	#LR__3764
2b078                 | LR__3753
2b078     00 2C 0E F2 | 	cmp	local04, #0 wz
2b07c     13 FB 01 56 |  if_ne	mov	result1, local01
2b080     04 01 90 5D |  if_ne	jmp	#LR__3764
2b084     FF 34 56 F2 | 	cmps	local08, #255 wc
2b088     00 34 0E C2 |  if_b	cmp	local08, #0 wz
2b08c     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
2b090     18 00 90 4D |  if_c_and_nz	jmp	#LR__3754
2b094     00 F8 3F CF 
2b098     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
2b09c     E8 00 90 CD |  if_b	jmp	#LR__3764
2b0a0     00 32 0E F2 | 	cmp	local07, #0 wz
2b0a4     14 FB 01 56 |  if_ne	mov	result1, local02
2b0a8     DC 00 90 5D |  if_ne	jmp	#LR__3764
2b0ac                 | LR__3754
2b0ac     02 2A 46 F5 | 	or	local03, #2
2b0b0     00 12 06 F6 | 	mov	arg01, #0
2b0b4     00 14 06 F6 | 	mov	arg02, #0
2b0b8     17 17 02 F6 | 	mov	arg03, local05
2b0bc     15 19 02 F6 | 	mov	arg04, local03
2b0c0     1C 32 B0 FD | 	call	#__system__pack_0696
2b0c4     C0 00 90 FD | 	jmp	#LR__3764
2b0c8                 | LR__3755
2b0c8     00 2E 0E F2 | 	cmp	local05, #0 wz
2b0cc     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
2b0d0     00 F8 3F AF 
2b0d4     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2b0d8     AC 00 90 AD |  if_e	jmp	#LR__3764
2b0dc     00 32 0E F2 | 	cmp	local07, #0 wz
2b0e0     14 FB 01 56 |  if_ne	mov	result1, local02
2b0e4     A0 00 90 5D |  if_ne	jmp	#LR__3764
2b0e8     1A 17 02 F6 | 	mov	arg03, local08
2b0ec     15 19 02 F6 | 	mov	arg04, local03
2b0f0     02 18 46 F5 | 	or	arg04, #2
2b0f4     00 12 06 F6 | 	mov	arg01, #0
2b0f8     00 14 06 F6 | 	mov	arg02, #0
2b0fc     E0 31 B0 FD | 	call	#__system__pack_0696
2b100     84 00 90 FD | 	jmp	#LR__3764
2b104                 | LR__3756
2b104     00 2C 0E F2 | 	cmp	local04, #0 wz
2b108     20 00 90 AD |  if_e	jmp	#LR__3759
2b10c     01 2C 66 F0 | 	shl	local04, #1
2b110     97 0A 48 FB | 	callpa	#(@LR__3758-@LR__3757)>>2,fcache_load_ptr_
2b114                 | LR__3757
2b114     00 40 00 FF 
2b118     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
2b11c     01 2E 86 C1 |  if_b	sub	local05, #1
2b120     01 2C 66 C0 |  if_b	shl	local04, #1
2b124     EC FF 9F CD |  if_b	jmp	#LR__3757
2b128                 | LR__3758
2b128     D0 FE 9F FD | 	jmp	#LR__3750
2b12c                 | LR__3759
2b12c     08 2A 46 F5 | 	or	local03, #8
2b130     00 12 06 F6 | 	mov	arg01, #0
2b134     00 14 06 F6 | 	mov	arg02, #0
2b138     00 16 06 F6 | 	mov	arg03, #0
2b13c     15 19 02 F6 | 	mov	arg04, local03
2b140     9C 31 B0 FD | 	call	#__system__pack_0696
2b144     40 00 90 FD | 	jmp	#LR__3764
2b148                 | LR__3760
2b148     00 32 0E F2 | 	cmp	local07, #0 wz
2b14c     20 00 90 AD |  if_e	jmp	#LR__3763
2b150     01 32 66 F0 | 	shl	local07, #1
2b154     97 0A 48 FB | 	callpa	#(@LR__3762-@LR__3761)>>2,fcache_load_ptr_
2b158                 | LR__3761
2b158     00 40 00 FF 
2b15c     00 32 16 F2 | 	cmp	local07, ##8388608 wc
2b160     01 34 86 C1 |  if_b	sub	local08, #1
2b164     01 32 66 C0 |  if_b	shl	local07, #1
2b168     EC FF 9F CD |  if_b	jmp	#LR__3761
2b16c                 | LR__3762
2b16c     98 FE 9F FD | 	jmp	#LR__3751
2b170                 | LR__3763
2b170     08 2A 46 F5 | 	or	local03, #8
2b174     00 12 06 F6 | 	mov	arg01, #0
2b178     00 14 06 F6 | 	mov	arg02, #0
2b17c     00 16 06 F6 | 	mov	arg03, #0
2b180     15 19 02 F6 | 	mov	arg04, local03
2b184     58 31 B0 FD | 	call	#__system__pack_0696
2b188                 | LR__3764
2b188     A7 F0 03 F6 | 	mov	ptra, fp
2b18c     B2 00 A0 FD | 	call	#popregs_
2b190                 | __system___float_mul_ret
2b190     2D 00 64 FD | 	ret
2b194                 | 
2b194                 | __system___float_div
2b194     0E 4A 05 F6 | 	mov	COUNT_, #14
2b198     A8 00 A0 FD | 	call	#pushregs_
2b19c     09 2B 02 F6 | 	mov	local03, arg01
2b1a0     0A 2D 02 F6 | 	mov	local04, arg02
2b1a4     15 2F 02 F6 | 	mov	local05, local03
2b1a8     17 31 02 F6 | 	mov	local06, local05
2b1ac     16 30 46 F7 | 	zerox	local06, #22
2b1b0     17 33 02 F6 | 	mov	local07, local05
2b1b4     01 32 66 F0 | 	shl	local07, #1
2b1b8     18 32 46 F0 | 	shr	local07, #24
2b1bc     1F 2E 46 F0 | 	shr	local05, #31
2b1c0     16 FB 01 F6 | 	mov	result1, local04
2b1c4     FD 34 02 F6 | 	mov	local08, result1
2b1c8     1A 37 02 F6 | 	mov	local09, local08
2b1cc     16 36 46 F7 | 	zerox	local09, #22
2b1d0     1A 39 02 F6 | 	mov	local10, local08
2b1d4     01 38 66 F0 | 	shl	local10, #1
2b1d8     18 38 46 F0 | 	shr	local10, #24
2b1dc     1F 34 46 F0 | 	shr	local08, #31
2b1e0     1A 2F 62 F5 | 	xor	local05, local08
2b1e4     FF 32 0E F2 | 	cmp	local07, #255 wz
2b1e8     D4 00 90 AD |  if_e	jmp	#LR__3775
2b1ec     FF 38 0E F2 | 	cmp	local10, #255 wz
2b1f0     04 01 90 AD |  if_e	jmp	#LR__3776
2b1f4     00 32 0E F2 | 	cmp	local07, #0 wz
2b1f8     24 01 90 AD |  if_e	jmp	#LR__3777
2b1fc     17 30 26 F4 | 	bith	local06, #23
2b200                 | LR__3770
2b200     00 38 0E F2 | 	cmp	local10, #0 wz
2b204     70 01 90 AD |  if_e	jmp	#LR__3781
2b208     17 36 26 F4 | 	bith	local09, #23
2b20c                 | LR__3771
2b20c     1C 33 82 F1 | 	sub	local07, local10
2b210     19 3B 02 F6 | 	mov	local11, local07
2b214     18 13 02 F6 | 	mov	arg01, local06
2b218     02 12 46 F0 | 	shr	arg01, #2
2b21c     1E 30 66 F0 | 	shl	local06, #30
2b220     18 15 02 F6 | 	mov	arg02, local06
2b224     1B 17 02 F6 | 	mov	arg03, local09
2b228     28 12 62 FD | 	setq	arg01
2b22c     0B 15 12 FD | 	qdiv	arg02, arg03
2b230     00 3C 06 F6 | 	mov	local12, #0
2b234     18 26 62 FD | 	getqx	local01
2b238     19 FC 61 FD | 	getqy	result2
2b23c     FE 28 02 F6 | 	mov	local02, result2
2b240     13 3F 02 F6 | 	mov	local13, local01
2b244     00 28 4E F2 | 	cmps	local02, #0 wz
2b248     1F 41 02 F6 | 	mov	local14, local13
2b24c     19 40 66 F0 | 	shl	local14, #25
2b250     01 3C 06 56 |  if_ne	mov	local12, #1
2b254     1E 41 42 F5 | 	or	local14, local12
2b258     07 3E 46 F0 | 	shr	local13, #7
2b25c     00 80 00 FF 
2b260     00 3E 16 F2 | 	cmp	local13, ##16777216 wc
2b264     1C 00 90 CD |  if_b	jmp	#LR__3772
2b268     01 3A 06 F1 | 	add	local11, #1
2b26c     01 40 46 F0 | 	shr	local14, #1
2b270     1F 3D 02 F6 | 	mov	local12, local13
2b274     1F 3C 66 F0 | 	shl	local12, #31
2b278     1E 41 42 F5 | 	or	local14, local12
2b27c     01 3E 46 F0 | 	shr	local13, #1
2b280     24 00 90 FD | 	jmp	#LR__3774
2b284                 | LR__3772
2b284     00 40 00 FF 
2b288     00 3E 16 F2 | 	cmp	local13, ##8388608 wc
2b28c     18 00 90 3D |  if_ae	jmp	#LR__3773
2b290     01 3A 86 F1 | 	sub	local11, #1
2b294     01 3E 66 F0 | 	shl	local13, #1
2b298     20 3D 02 F6 | 	mov	local12, local14
2b29c     1F 3C 46 F0 | 	shr	local12, #31
2b2a0     1E 3F 42 F5 | 	or	local13, local12
2b2a4     01 40 66 F0 | 	shl	local14, #1
2b2a8                 | LR__3773
2b2a8                 | LR__3774
2b2a8     1F 13 02 F6 | 	mov	arg01, local13
2b2ac     20 15 02 F6 | 	mov	arg02, local14
2b2b0     1D 17 02 F6 | 	mov	arg03, local11
2b2b4     17 19 02 F6 | 	mov	arg04, local05
2b2b8     24 30 B0 FD | 	call	#__system__pack_0696
2b2bc     F8 00 90 FD | 	jmp	#LR__3785
2b2c0                 | LR__3775
2b2c0     00 30 0E F2 | 	cmp	local06, #0 wz
2b2c4     15 FB 01 56 |  if_ne	mov	result1, local03
2b2c8     EC 00 90 5D |  if_ne	jmp	#LR__3785
2b2cc     FF 38 0E F2 | 	cmp	local10, #255 wz
2b2d0     00 F8 3F AF 
2b2d4     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2b2d8     DC 00 90 AD |  if_e	jmp	#LR__3785
2b2dc     02 2E 46 F5 | 	or	local05, #2
2b2e0     00 12 06 F6 | 	mov	arg01, #0
2b2e4     00 14 06 F6 | 	mov	arg02, #0
2b2e8     19 17 02 F6 | 	mov	arg03, local07
2b2ec     17 19 02 F6 | 	mov	arg04, local05
2b2f0     EC 2F B0 FD | 	call	#__system__pack_0696
2b2f4     C0 00 90 FD | 	jmp	#LR__3785
2b2f8                 | LR__3776
2b2f8     00 36 0E F2 | 	cmp	local09, #0 wz
2b2fc     16 FB 01 56 |  if_ne	mov	result1, local04
2b300     B4 00 90 5D |  if_ne	jmp	#LR__3785
2b304     17 19 02 F6 | 	mov	arg04, local05
2b308     08 18 46 F5 | 	or	arg04, #8
2b30c     00 12 06 F6 | 	mov	arg01, #0
2b310     00 14 06 F6 | 	mov	arg02, #0
2b314     00 16 06 F6 | 	mov	arg03, #0
2b318     C4 2F B0 FD | 	call	#__system__pack_0696
2b31c     98 00 90 FD | 	jmp	#LR__3785
2b320                 | LR__3777
2b320     00 30 0E F2 | 	cmp	local06, #0 wz
2b324     20 00 90 AD |  if_e	jmp	#LR__3780
2b328     01 30 66 F0 | 	shl	local06, #1
2b32c     97 0A 48 FB | 	callpa	#(@LR__3779-@LR__3778)>>2,fcache_load_ptr_
2b330                 | LR__3778
2b330     00 40 00 FF 
2b334     00 30 16 F2 | 	cmp	local06, ##8388608 wc
2b338     01 32 86 C1 |  if_b	sub	local07, #1
2b33c     01 30 66 C0 |  if_b	shl	local06, #1
2b340     EC FF 9F CD |  if_b	jmp	#LR__3778
2b344                 | LR__3779
2b344     B8 FE 9F FD | 	jmp	#LR__3770
2b348                 | LR__3780
2b348     00 38 0E F2 | 	cmp	local10, #0 wz
2b34c     00 36 0E A2 |  if_e	cmp	local09, #0 wz
2b350     00 F8 3F AF 
2b354     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2b358     5C 00 90 AD |  if_e	jmp	#LR__3785
2b35c     17 19 02 F6 | 	mov	arg04, local05
2b360     08 18 46 F5 | 	or	arg04, #8
2b364     00 12 06 F6 | 	mov	arg01, #0
2b368     00 14 06 F6 | 	mov	arg02, #0
2b36c     00 16 06 F6 | 	mov	arg03, #0
2b370     6C 2F B0 FD | 	call	#__system__pack_0696
2b374     40 00 90 FD | 	jmp	#LR__3785
2b378                 | LR__3781
2b378     00 36 0E F2 | 	cmp	local09, #0 wz
2b37c     20 00 90 AD |  if_e	jmp	#LR__3784
2b380     01 36 66 F0 | 	shl	local09, #1
2b384     97 0A 48 FB | 	callpa	#(@LR__3783-@LR__3782)>>2,fcache_load_ptr_
2b388                 | LR__3782
2b388     00 40 00 FF 
2b38c     00 36 16 F2 | 	cmp	local09, ##8388608 wc
2b390     01 38 86 C1 |  if_b	sub	local10, #1
2b394     01 36 66 C0 |  if_b	shl	local09, #1
2b398     EC FF 9F CD |  if_b	jmp	#LR__3782
2b39c                 | LR__3783
2b39c     6C FE 9F FD | 	jmp	#LR__3771
2b3a0                 | LR__3784
2b3a0     02 2E 46 F5 | 	or	local05, #2
2b3a4     00 12 06 F6 | 	mov	arg01, #0
2b3a8     00 14 06 F6 | 	mov	arg02, #0
2b3ac     00 16 06 F6 | 	mov	arg03, #0
2b3b0     17 19 02 F6 | 	mov	arg04, local05
2b3b4     28 2F B0 FD | 	call	#__system__pack_0696
2b3b8                 | LR__3785
2b3b8     A7 F0 03 F6 | 	mov	ptra, fp
2b3bc     B2 00 A0 FD | 	call	#popregs_
2b3c0                 | __system___float_div_ret
2b3c0     2D 00 64 FD | 	ret
2b3c4                 | 
2b3c4                 | __system___float_cmp
2b3c4     00 C0 3F FF 
2b3c8     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
2b3cc     00 C0 3F CF 
2b3d0     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
2b3d4     0B FB 01 36 |  if_ae	mov	result1, arg03
2b3d8     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2b3dc     00 C0 7F FF 
2b3e0     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
2b3e4     00 C0 7F CF 
2b3e8     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
2b3ec     0B FB 01 36 |  if_ae	mov	result1, arg03
2b3f0     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2b3f4     00 12 56 F2 | 	cmps	arg01, #0 wc
2b3f8     2C 00 90 3D |  if_ae	jmp	#LR__3790
2b3fc     00 14 56 F2 | 	cmps	arg02, #0 wc
2b400     0A FB 01 C6 |  if_b	mov	result1, arg02
2b404     09 FB 81 C1 |  if_b	sub	result1, arg01
2b408     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
2b40c     00 14 0E F2 | 	cmp	arg02, #0 wz
2b410     00 00 40 AF 
2b414     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
2b418     00 FA 05 A6 |  if_e	mov	result1, #0
2b41c     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2b420     01 FA 65 F6 | 	neg	result1, #1
2b424     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
2b428                 | LR__3790
2b428     00 14 56 F2 | 	cmps	arg02, #0 wc
2b42c     1C 00 90 3D |  if_ae	jmp	#LR__3791
2b430     00 12 0E F2 | 	cmp	arg01, #0 wz
2b434     00 00 40 AF 
2b438     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
2b43c     00 FA 05 A6 |  if_e	mov	result1, #0
2b440     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2b444     01 FA 05 F6 | 	mov	result1, #1
2b448     08 00 90 FD | 	jmp	#__system___float_cmp_ret
2b44c                 | LR__3791
2b44c     0A 13 82 F1 | 	sub	arg01, arg02
2b450     09 FB 01 F6 | 	mov	result1, arg01
2b454                 | __system___float_cmp_ret
2b454     2D 00 64 FD | 	ret
2b458                 | 
2b458                 | __system___float_tointeger
2b458     02 4A 05 F6 | 	mov	COUNT_, #2
2b45c     A8 00 A0 FD | 	call	#pushregs_
2b460     50 00 B0 FD | 	call	#__system___float_Unpack
2b464     FF FF 7F FF 
2b468     FF FD 55 F2 | 	cmps	result2, ##-1 wc
2b46c     34 00 90 CD |  if_b	jmp	#LR__3800
2b470     1F FC 55 F2 | 	cmps	result2, #31 wc
2b474     2C 00 90 3D |  if_ae	jmp	#LR__3800
2b478     02 FE 65 F0 | 	shl	result3, #2
2b47c     1E 26 06 F6 | 	mov	local01, #30
2b480     FE 26 82 F1 | 	sub	local01, result2
2b484     13 FF 41 F0 | 	shr	result3, local01
2b488     FF 28 02 F6 | 	mov	local02, result3
2b48c     0A 29 02 F1 | 	add	local02, arg02
2b490     01 28 46 F0 | 	shr	local02, #1
2b494     00 FA 0D F2 | 	cmp	result1, #0 wz
2b498     14 29 62 56 |  if_ne	neg	local02, local02
2b49c     14 FB 01 F6 | 	mov	result1, local02
2b4a0     04 00 90 FD | 	jmp	#LR__3801
2b4a4                 | LR__3800
2b4a4     00 FA 05 F6 | 	mov	result1, #0
2b4a8                 | LR__3801
2b4a8     A7 F0 03 F6 | 	mov	ptra, fp
2b4ac     B2 00 A0 FD | 	call	#popregs_
2b4b0                 | __system___float_tointeger_ret
2b4b0     2D 00 64 FD | 	ret
2b4b4                 | 
2b4b4                 | __system___float_Unpack
2b4b4     09 01 02 F6 | 	mov	_var01, arg01
2b4b8     1F 00 46 F0 | 	shr	_var01, #31
2b4bc     09 03 02 F6 | 	mov	_var02, arg01
2b4c0     01 02 66 F0 | 	shl	_var02, #1
2b4c4     18 02 4E F0 | 	shr	_var02, #24 wz
2b4c8     17 13 06 F4 | 	bitl	arg01, #279
2b4cc     06 12 66 50 |  if_ne	shl	arg01, #6
2b4d0     1D 12 26 54 |  if_ne	bith	arg01, #29
2b4d4     1C 00 90 5D |  if_ne	jmp	#LR__3810
2b4d8     09 05 92 F7 | 	encod	_var03, arg01 wc
2b4dc     01 04 06 C1 |  if_b	add	_var03, #1
2b4e0     17 04 86 F1 | 	sub	_var03, #23
2b4e4     02 03 02 F6 | 	mov	_var02, _var03
2b4e8     07 FC 05 F6 | 	mov	result2, #7
2b4ec     02 FD 81 F1 | 	sub	result2, _var03
2b4f0     FE 12 62 F0 | 	shl	arg01, result2
2b4f4                 | LR__3810
2b4f4     7F 02 86 F1 | 	sub	_var02, #127
2b4f8     09 FF 01 F6 | 	mov	result3, arg01
2b4fc     00 FB 01 F6 | 	mov	result1, _var01
2b500     01 FD 01 F6 | 	mov	result2, _var02
2b504                 | __system___float_Unpack_ret
2b504     2D 00 64 FD | 	ret
2b508                 | 
2b508                 | __system___float_Pack
2b508     00 00 06 F6 | 	mov	_var01, #0
2b50c     00 16 0E F2 | 	cmp	arg03, #0 wz
2b510     8C 00 90 AD |  if_e	jmp	#LR__3821
2b514     0B 03 92 F7 | 	encod	_var02, arg03 wc
2b518     01 02 06 C1 |  if_b	add	_var02, #1
2b51c     21 00 06 F6 | 	mov	_var01, #33
2b520     01 01 82 F1 | 	sub	_var01, _var02
2b524     00 17 62 F0 | 	shl	arg03, _var01
2b528     03 02 06 F6 | 	mov	_var02, #3
2b52c     00 03 82 F1 | 	sub	_var02, _var01
2b530     01 15 02 F1 | 	add	arg02, _var02
2b534     0A 05 02 F6 | 	mov	_var03, arg02
2b538     00 17 06 F1 | 	add	arg03, #256
2b53c     0B 03 02 F6 | 	mov	_var02, arg03
2b540     FF 02 2E F5 | 	andn	_var02, #255 wz
2b544     01 04 06 A1 |  if_e	add	_var03, #1
2b548     7F 04 06 F1 | 	add	_var03, #127
2b54c     FF FF 7F FF 
2b550     E9 05 46 F3 | 	fges	_var03, ##-23
2b554     FF 04 66 F3 | 	fles	_var03, #255
2b558     01 04 56 F2 | 	cmps	_var03, #1 wc
2b55c     1C 00 90 3D |  if_ae	jmp	#LR__3820
2b560     01 16 46 F0 | 	shr	arg03, #1
2b564     1F 02 C6 F9 | 	decod	_var02, #31
2b568     0B 03 02 F1 | 	add	_var02, arg03
2b56c     02 05 62 F6 | 	neg	_var03, _var03
2b570     02 03 42 F0 | 	shr	_var02, _var03
2b574     01 17 02 F6 | 	mov	arg03, _var02
2b578     00 04 06 F6 | 	mov	_var03, #0
2b57c                 | LR__3820
2b57c     09 FB 01 F6 | 	mov	result1, arg01
2b580     1F FA 65 F0 | 	shl	result1, #31
2b584     02 03 02 F6 | 	mov	_var02, _var03
2b588     17 02 66 F0 | 	shl	_var02, #23
2b58c     01 FB 41 F5 | 	or	result1, _var02
2b590     0B 07 02 F6 | 	mov	_var04, arg03
2b594     09 06 46 F0 | 	shr	_var04, #9
2b598     03 FB 41 F5 | 	or	result1, _var04
2b59c     04 00 90 FD | 	jmp	#__system___float_Pack_ret
2b5a0                 | LR__3821
2b5a0     00 FB 01 F6 | 	mov	result1, _var01
2b5a4                 | __system___float_Pack_ret
2b5a4     2D 00 64 FD | 	ret
2b5a8                 | 
2b5a8                 | __system___basic_print_float
2b5a8     05 4A 05 F6 | 	mov	COUNT_, #5
2b5ac     A8 00 A0 FD | 	call	#pushregs_
2b5b0     09 27 02 F6 | 	mov	local01, arg01
2b5b4     0A 29 02 F6 | 	mov	local02, arg02
2b5b8     0B 2B 0A F6 | 	mov	local03, arg03 wz
2b5bc     0C 2D 02 F6 | 	mov	local04, arg04
2b5c0     14 00 90 5D |  if_ne	jmp	#LR__3830
2b5c4     23 2C 0E F2 | 	cmp	local04, #35 wz
2b5c8     80 02 10 AF 
2b5cc     00 2E 06 A6 |  if_e	mov	local05, ##537198592
2b5d0     1D 2E C6 59 |  if_ne	decod	local05, #29
2b5d4     17 2B 02 F6 | 	mov	local03, local05
2b5d8                 | LR__3830
2b5d8     13 13 02 F6 | 	mov	arg01, local01
2b5dc     34 28 B0 FD | 	call	#__system___gettxfunc
2b5e0     FD 2E 0A F6 | 	mov	local05, result1 wz
2b5e4     00 FA 05 A6 |  if_e	mov	result1, #0
2b5e8     17 13 02 56 |  if_ne	mov	arg01, local05
2b5ec     15 15 02 56 |  if_ne	mov	arg02, local03
2b5f0     14 17 02 56 |  if_ne	mov	arg03, local02
2b5f4     16 19 02 56 |  if_ne	mov	arg04, local04
2b5f8     6C DC BF 5D |  if_ne	call	#__system___fmtfloat
2b5fc     A7 F0 03 F6 | 	mov	ptra, fp
2b600     B2 00 A0 FD | 	call	#popregs_
2b604                 | __system___basic_print_float_ret
2b604     2D 00 64 FD | 	ret
2b608                 | 
2b608                 | __system____builtin_atoi
2b608     07 4A 05 F6 | 	mov	COUNT_, #7
2b60c     A8 00 A0 FD | 	call	#pushregs_
2b610                 | __system____builtin_atoi_enter
2b610     09 27 02 F6 | 	mov	local01, arg01
2b614     0A 29 02 F6 | 	mov	local02, arg02
2b618     00 2A 06 F6 | 	mov	local03, #0
2b61c     00 2C 06 F6 | 	mov	local04, #0
2b620     00 2E 06 F6 | 	mov	local05, #0
2b624     97 08 48 FB | 	callpa	#(@LR__3841-@LR__3840)>>2,fcache_load_ptr_
2b628                 | LR__3840
2b628     13 31 C2 FA | 	rdbyte	local06, local01
2b62c     20 30 0E F2 | 	cmp	local06, #32 wz
2b630     01 26 06 A1 |  if_e	add	local01, #1
2b634     F0 FF 9F AD |  if_e	jmp	#LR__3840
2b638                 | LR__3841
2b638     13 33 C2 FA | 	rdbyte	local07, local01
2b63c     97 12 48 FB | 	callpa	#(@LR__3843-@LR__3842)>>2,fcache_load_ptr_
2b640                 | LR__3842
2b640     2D 32 0E F2 | 	cmp	local07, #45 wz
2b644     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
2b648     18 00 90 5D |  if_ne	jmp	#LR__3844
2b64c     01 26 06 F1 | 	add	local01, #1
2b650     2D 32 0E F2 | 	cmp	local07, #45 wz
2b654     01 30 06 A6 |  if_e	mov	local06, #1
2b658     18 2F C2 A2 |  if_e	subr	local05, local06
2b65c     13 33 C2 FA | 	rdbyte	local07, local01
2b660     DC FF 9F FD | 	jmp	#LR__3842
2b664                 | LR__3843
2b664                 | LR__3844
2b664     00 28 0E F2 | 	cmp	local02, #0 wz
2b668     1C 00 90 5D |  if_ne	jmp	#LR__3846
2b66c     24 32 0E F2 | 	cmp	local07, #36 wz
2b670     10 28 06 A6 |  if_e	mov	local02, #16
2b674     01 26 06 A1 |  if_e	add	local01, #1
2b678     0C 00 90 AD |  if_e	jmp	#LR__3845
2b67c     25 32 0E F2 | 	cmp	local07, #37 wz
2b680     02 28 06 A6 |  if_e	mov	local02, #2
2b684     01 26 06 A1 |  if_e	add	local01, #1
2b688                 | LR__3845
2b688                 | LR__3846
2b688     97 48 48 FB | 	callpa	#(@LR__3854-@LR__3847)>>2,fcache_load_ptr_
2b68c                 | LR__3847
2b68c                 | LR__3848
2b68c     13 33 C2 FA | 	rdbyte	local07, local01
2b690     5F 32 0E F2 | 	cmp	local07, #95 wz
2b694     01 26 06 F1 | 	add	local01, #1
2b698     F0 FF 9F AD |  if_e	jmp	#LR__3848
2b69c     30 32 0E F2 | 	cmp	local07, #48 wz
2b6a0     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
2b6a4     00 2C 06 A6 |  if_e	mov	local04, #0
2b6a8     60 00 90 AD |  if_e	jmp	#LR__3853
2b6ac     31 32 56 F2 | 	cmps	local07, #49 wc
2b6b0     18 00 90 CD |  if_b	jmp	#LR__3849
2b6b4     3A 32 56 F2 | 	cmps	local07, #58 wc
2b6b8     19 2D 02 C6 |  if_b	mov	local04, local07
2b6bc     30 2C 86 C1 |  if_b	sub	local04, #48
2b6c0     00 28 0E C2 |  if_b	cmp	local02, #0 wz
2b6c4     0A 28 06 86 |  if_c_and_z	mov	local02, #10
2b6c8     40 00 90 CD |  if_b	jmp	#LR__3852
2b6cc                 | LR__3849
2b6cc     0B 28 56 F2 | 	cmps	local02, #11 wc
2b6d0     61 32 56 32 |  if_ae	cmps	local07, #97 wc
2b6d4     14 00 90 CD |  if_b	jmp	#LR__3850
2b6d8     67 32 56 F2 | 	cmps	local07, #103 wc
2b6dc     61 32 86 C1 |  if_b	sub	local07, #97
2b6e0     0A 2C 06 C6 |  if_b	mov	local04, #10
2b6e4     19 2D 02 C1 |  if_b	add	local04, local07
2b6e8     20 00 90 CD |  if_b	jmp	#LR__3851
2b6ec                 | LR__3850
2b6ec     0B 28 56 F2 | 	cmps	local02, #11 wc
2b6f0     41 32 56 32 |  if_ae	cmps	local07, #65 wc
2b6f4     24 00 90 CD |  if_b	jmp	#LR__3855
2b6f8     47 32 56 F2 | 	cmps	local07, #71 wc
2b6fc     41 32 86 C1 |  if_b	sub	local07, #65
2b700     0A 2C 06 C6 |  if_b	mov	local04, #10
2b704     19 2D 02 C1 |  if_b	add	local04, local07
2b708     10 00 90 3D |  if_ae	jmp	#LR__3855
2b70c                 | LR__3851
2b70c                 | LR__3852
2b70c                 | LR__3853
2b70c     15 29 02 FD | 	qmul	local02, local03
2b710     18 2A 62 FD | 	getqx	local03
2b714     16 2B 02 F1 | 	add	local03, local04
2b718     70 FF 9F FD | 	jmp	#LR__3847
2b71c                 | LR__3854
2b71c                 | LR__3855
2b71c     00 28 0E F2 | 	cmp	local02, #0 wz
2b720     64 00 90 5D |  if_ne	jmp	#LR__3861
2b724     78 32 0E F2 | 	cmp	local07, #120 wz
2b728     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
2b72c     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
2b730     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
2b734     14 00 90 5D |  if_ne	jmp	#LR__3856
2b738     13 13 02 F6 | 	mov	arg01, local01
2b73c     10 14 06 F6 | 	mov	arg02, #16
2b740     C4 FE BF FD | 	call	#__system____builtin_atoi
2b744     FD 2A 02 F6 | 	mov	local03, result1
2b748     3C 00 90 FD | 	jmp	#LR__3860
2b74c                 | LR__3856
2b74c     62 32 0E F2 | 	cmp	local07, #98 wz
2b750     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
2b754     14 00 90 5D |  if_ne	jmp	#LR__3857
2b758     13 13 02 F6 | 	mov	arg01, local01
2b75c     02 14 06 F6 | 	mov	arg02, #2
2b760     A4 FE BF FD | 	call	#__system____builtin_atoi
2b764     FD 2A 02 F6 | 	mov	local03, result1
2b768     1C 00 90 FD | 	jmp	#LR__3859
2b76c                 | LR__3857
2b76c     6F 32 0E F2 | 	cmp	local07, #111 wz
2b770     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
2b774     10 00 90 5D |  if_ne	jmp	#LR__3858
2b778     13 13 02 F6 | 	mov	arg01, local01
2b77c     08 14 06 F6 | 	mov	arg02, #8
2b780     84 FE BF FD | 	call	#__system____builtin_atoi
2b784     FD 2A 02 F6 | 	mov	local03, result1
2b788                 | LR__3858
2b788                 | LR__3859
2b788                 | LR__3860
2b788                 | LR__3861
2b788     00 2E 0E F2 | 	cmp	local05, #0 wz
2b78c     15 2B 62 56 |  if_ne	neg	local03, local03
2b790     15 FB 01 F6 | 	mov	result1, local03
2b794     A7 F0 03 F6 | 	mov	ptra, fp
2b798     B2 00 A0 FD | 	call	#popregs_
2b79c                 | __system____builtin_atoi_ret
2b79c     2D 00 64 FD | 	ret
2b7a0                 | 
2b7a0                 | __system____builtin_atof
2b7a0     07 4A 05 F6 | 	mov	COUNT_, #7
2b7a4     A8 00 A0 FD | 	call	#pushregs_
2b7a8     09 27 02 F6 | 	mov	local01, arg01
2b7ac     00 28 06 F6 | 	mov	local02, #0
2b7b0     00 2A 06 F6 | 	mov	local03, #0
2b7b4     00 2C 06 F6 | 	mov	local04, #0
2b7b8     00 2E 06 F6 | 	mov	local05, #0
2b7bc     97 08 48 FB | 	callpa	#(@LR__3871-@LR__3870)>>2,fcache_load_ptr_
2b7c0                 | LR__3870
2b7c0     13 17 C2 FA | 	rdbyte	arg03, local01
2b7c4     20 16 0E F2 | 	cmp	arg03, #32 wz
2b7c8     01 26 06 A1 |  if_e	add	local01, #1
2b7cc     F0 FF 9F AD |  if_e	jmp	#LR__3870
2b7d0                 | LR__3871
2b7d0     13 31 C2 FA | 	rdbyte	local06, local01
2b7d4                 | LR__3872
2b7d4     2B 30 0E F2 | 	cmp	local06, #43 wz
2b7d8     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
2b7dc     14 00 90 5D |  if_ne	jmp	#LR__3873
2b7e0     2D 30 0E F2 | 	cmp	local06, #45 wz
2b7e4     1F 2C E6 A4 |  if_e	bitnot	local04, #31
2b7e8     01 26 06 F1 | 	add	local01, #1
2b7ec     13 31 C2 FA | 	rdbyte	local06, local01
2b7f0     E0 FF 9F FD | 	jmp	#LR__3872
2b7f4                 | LR__3873
2b7f4                 | LR__3874
2b7f4     97 08 48 FB | 	callpa	#(@LR__3876-@LR__3875)>>2,fcache_load_ptr_
2b7f8                 | LR__3875
2b7f8     13 31 C2 FA | 	rdbyte	local06, local01
2b7fc     5F 30 0E F2 | 	cmp	local06, #95 wz
2b800     01 26 06 F1 | 	add	local01, #1
2b804     F0 FF 9F AD |  if_e	jmp	#LR__3875
2b808                 | LR__3876
2b808     00 30 0E F2 | 	cmp	local06, #0 wz
2b80c     5C 00 90 AD |  if_e	jmp	#LR__3878
2b810     30 30 56 F2 | 	cmps	local06, #48 wc
2b814     44 00 90 CD |  if_b	jmp	#LR__3877
2b818     3A 30 56 F2 | 	cmps	local06, #58 wc
2b81c     3C 00 90 3D |  if_ae	jmp	#LR__3877
2b820     14 13 02 F6 | 	mov	arg01, local02
2b824     00 90 20 FF 
2b828     00 14 06 F6 | 	mov	arg02, ##1092616192
2b82c     60 F7 BF FD | 	call	#__system___float_mul
2b830     FD 28 02 F6 | 	mov	local02, result1
2b834     30 30 86 F1 | 	sub	local06, #48
2b838     18 13 02 F6 | 	mov	arg01, local06
2b83c     4C F3 BF FD | 	call	#__system___float_fromuns
2b840     FD 14 02 F6 | 	mov	arg02, result1
2b844     14 13 02 F6 | 	mov	arg01, local02
2b848     74 F3 BF FD | 	call	#__system___float_add
2b84c     FD 28 02 F6 | 	mov	local02, result1
2b850     00 2E 0E F2 | 	cmp	local05, #0 wz
2b854     01 2A 86 51 |  if_ne	sub	local03, #1
2b858     98 FF 9F FD | 	jmp	#LR__3874
2b85c                 | LR__3877
2b85c     2E 30 0E F2 | 	cmp	local06, #46 wz
2b860     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
2b864     01 2E 06 A6 |  if_e	mov	local05, #1
2b868     88 FF 9F AD |  if_e	jmp	#LR__3874
2b86c                 | LR__3878
2b86c     45 30 0E F2 | 	cmp	local06, #69 wz
2b870     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
2b874     18 00 90 5D |  if_ne	jmp	#LR__3879
2b878     13 13 02 F6 | 	mov	arg01, local01
2b87c     00 14 06 F6 | 	mov	arg02, #0
2b880     84 FD BF FD | 	call	#__system____builtin_atoi
2b884     15 FB 01 F1 | 	add	result1, local03
2b888     FD 32 02 F6 | 	mov	local07, result1
2b88c     04 00 90 FD | 	jmp	#LR__3880
2b890                 | LR__3879
2b890     15 33 02 F6 | 	mov	local07, local03
2b894                 | LR__3880
2b894     19 17 02 F6 | 	mov	arg03, local07
2b898     14 13 02 F6 | 	mov	arg01, local02
2b89c     00 90 20 FF 
2b8a0     00 14 06 F6 | 	mov	arg02, ##1092616192
2b8a4     F4 06 B0 FD | 	call	#__system___float_pow_n
2b8a8     16 FB 61 F5 | 	xor	result1, local04
2b8ac     A7 F0 03 F6 | 	mov	ptra, fp
2b8b0     B2 00 A0 FD | 	call	#popregs_
2b8b4                 | __system____builtin_atof_ret
2b8b4     2D 00 64 FD | 	ret
2b8b8                 | 
2b8b8                 | __system____builtin_ilogb
2b8b8     F8 FB BF FD | 	call	#__system___float_Unpack
2b8bc     00 FE 0D F2 | 	cmp	result3, #0 wz
2b8c0     00 00 40 AF 
2b8c4     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
2b8c8     24 00 90 AD |  if_e	jmp	#LR__3891
2b8cc     80 FC 0D F2 | 	cmp	result2, #128 wz
2b8d0     18 00 90 5D |  if_ne	jmp	#LR__3890
2b8d4     00 00 10 FF 
2b8d8     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
2b8dc     1E FA CD A9 |  if_e	bmask	result1, #30
2b8e0     0C 00 90 AD |  if_e	jmp	#LR__3891
2b8e4     1F FA C5 F9 | 	decod	result1, #31
2b8e8     04 00 90 FD | 	jmp	#LR__3891
2b8ec                 | LR__3890
2b8ec     FE FA 01 F6 | 	mov	result1, result2
2b8f0                 | LR__3891
2b8f0                 | __system____builtin_ilogb_ret
2b8f0     2D 00 64 FD | 	ret
2b8f4                 | 
2b8f4                 | __system____builtin_sinf
2b8f4     03 4A 05 F6 | 	mov	COUNT_, #3
2b8f8     A8 00 A0 FD | 	call	#pushregs_
2b8fc     09 27 02 F6 | 	mov	local01, arg01
2b900     87 64 20 FF 
2b904     DB 15 06 F6 | 	mov	arg02, ##1086918619
2b908     88 F8 BF FD | 	call	#__system___float_div
2b90c     FD 12 02 F6 | 	mov	arg01, result1
2b910     00 14 06 F6 | 	mov	arg02, #0
2b914     40 FB BF FD | 	call	#__system___float_tointeger
2b918     FD 16 0A F6 | 	mov	arg03, result1 wz
2b91c     44 00 90 AD |  if_e	jmp	#LR__3900
2b920     0B 13 52 F6 | 	abs	arg01, arg03 wc
2b924     1F 28 C6 C9 |  if_b	decod	local02, #31
2b928     00 28 06 36 |  if_ae	mov	local02, #0
2b92c     5C F2 BF FD | 	call	#__system___float_fromuns
2b930     14 FB 61 F5 | 	xor	result1, local02
2b934     FD 12 02 F6 | 	mov	arg01, result1
2b938     1E 14 C6 F9 | 	decod	arg02, #30
2b93c     50 F6 BF FD | 	call	#__system___float_mul
2b940     FD 12 02 F6 | 	mov	arg01, result1
2b944     87 24 20 FF 
2b948     DB 15 06 F6 | 	mov	arg02, ##1078530011
2b94c     40 F6 BF FD | 	call	#__system___float_mul
2b950     FD 14 02 F6 | 	mov	arg02, result1
2b954     13 13 02 F6 | 	mov	arg01, local01
2b958     1F 14 E6 F4 | 	bitnot	arg02, #31
2b95c     60 F2 BF FD | 	call	#__system___float_add
2b960     FD 26 02 F6 | 	mov	local01, result1
2b964                 | LR__3900
2b964     13 13 02 F6 | 	mov	arg01, local01
2b968     66 E6 1E FF 
2b96c     CD 14 06 F6 | 	mov	arg02, ##1036831949
2b970     01 16 06 F6 | 	mov	arg03, #1
2b974     4C FA BF FD | 	call	#__system___float_cmp
2b978     00 FA 55 F2 | 	cmps	result1, #0 wc
2b97c     5C 00 90 3D |  if_ae	jmp	#LR__3901
2b980     13 13 02 F6 | 	mov	arg01, local01
2b984     66 E6 5E FF 
2b988     CD 14 06 F6 | 	mov	arg02, ##-1110651699
2b98c     01 16 66 F6 | 	neg	arg03, #1
2b990     30 FA BF FD | 	call	#__system___float_cmp
2b994     01 FA 55 F2 | 	cmps	result1, #1 wc
2b998     40 00 90 CD |  if_b	jmp	#LR__3901
2b99c     13 13 02 F6 | 	mov	arg01, local01
2b9a0     13 15 02 F6 | 	mov	arg02, local01
2b9a4     E8 F5 BF FD | 	call	#__system___float_mul
2b9a8     FD 12 02 F6 | 	mov	arg01, result1
2b9ac     13 15 02 F6 | 	mov	arg02, local01
2b9b0     DC F5 BF FD | 	call	#__system___float_mul
2b9b4     FD 12 02 F6 | 	mov	arg01, result1
2b9b8     00 60 20 FF 
2b9bc     00 14 06 F6 | 	mov	arg02, ##1086324736
2b9c0     D0 F7 BF FD | 	call	#__system___float_div
2b9c4     FD 14 02 F6 | 	mov	arg02, result1
2b9c8     13 13 02 F6 | 	mov	arg01, local01
2b9cc     1F 14 E6 F4 | 	bitnot	arg02, #31
2b9d0     EC F1 BF FD | 	call	#__system___float_add
2b9d4     FD 2A 02 F6 | 	mov	local03, result1
2b9d8     54 00 90 FD | 	jmp	#LR__3902
2b9dc                 | LR__3901
2b9dc     13 13 02 F6 | 	mov	arg01, local01
2b9e0     7C 91 26 FF 
2b9e4     83 15 06 F6 | 	mov	arg02, ##1294137731
2b9e8     A4 F5 BF FD | 	call	#__system___float_mul
2b9ec     FD 12 02 F6 | 	mov	arg01, result1
2b9f0     00 14 06 F6 | 	mov	arg02, #0
2b9f4     60 FA BF FD | 	call	#__system___float_tointeger
2b9f8     02 FA 65 F0 | 	shl	result1, #2
2b9fc     00 00 A0 FF 
2ba00     FD 00 48 FD | 	qrotate	##1073741824, result1
2ba04     19 12 62 FD | 	getqy	arg01
2ba08     09 13 52 F6 | 	abs	arg01, arg01 wc
2ba0c     1F 28 C6 C9 |  if_b	decod	local02, #31
2ba10     00 28 06 36 |  if_ae	mov	local02, #0
2ba14     74 F1 BF FD | 	call	#__system___float_fromuns
2ba18     14 FB 61 F5 | 	xor	result1, local02
2ba1c     FD 12 02 F6 | 	mov	arg01, result1
2ba20     00 40 27 FF 
2ba24     00 14 06 F6 | 	mov	arg02, ##1317011456
2ba28     68 F7 BF FD | 	call	#__system___float_div
2ba2c     FD 2A 02 F6 | 	mov	local03, result1
2ba30                 | LR__3902
2ba30     15 FB 01 F6 | 	mov	result1, local03
2ba34     A7 F0 03 F6 | 	mov	ptra, fp
2ba38     B2 00 A0 FD | 	call	#popregs_
2ba3c                 | __system____builtin_sinf_ret
2ba3c     2D 00 64 FD | 	ret
2ba40                 | 
2ba40                 | __system____builtin_tanf
2ba40     02 4A 05 F6 | 	mov	COUNT_, #2
2ba44     A8 00 A0 FD | 	call	#pushregs_
2ba48     09 27 02 F6 | 	mov	local01, arg01
2ba4c     A4 FE BF FD | 	call	#__system____builtin_sinf
2ba50     FD 28 02 F6 | 	mov	local02, result1
2ba54     13 15 02 F6 | 	mov	arg02, local01
2ba58     87 E4 1F FF 
2ba5c     DB 13 06 F6 | 	mov	arg01, ##1070141403
2ba60     1F 14 E6 F4 | 	bitnot	arg02, #31
2ba64     58 F1 BF FD | 	call	#__system___float_add
2ba68     FD 12 02 F6 | 	mov	arg01, result1
2ba6c     84 FE BF FD | 	call	#__system____builtin_sinf
2ba70     FD 14 02 F6 | 	mov	arg02, result1
2ba74     14 13 02 F6 | 	mov	arg01, local02
2ba78     18 F7 BF FD | 	call	#__system___float_div
2ba7c     A7 F0 03 F6 | 	mov	ptra, fp
2ba80     B2 00 A0 FD | 	call	#popregs_
2ba84                 | __system____builtin_tanf_ret
2ba84     2D 00 64 FD | 	ret
2ba88                 | 
2ba88                 | __system____builtin_asinf
2ba88     01 4A 05 F6 | 	mov	COUNT_, #1
2ba8c     A8 00 A0 FD | 	call	#pushregs_
2ba90     09 27 02 F6 | 	mov	local01, arg01
2ba94     13 15 02 F6 | 	mov	arg02, local01
2ba98     13 13 02 F6 | 	mov	arg01, local01
2ba9c     F0 F4 BF FD | 	call	#__system___float_mul
2baa0     FD 14 02 F6 | 	mov	arg02, result1
2baa4     00 C0 1F FF 
2baa8     00 12 06 F6 | 	mov	arg01, ##1065353216
2baac     1F 14 E6 F4 | 	bitnot	arg02, #31
2bab0     0C F1 BF FD | 	call	#__system___float_add
2bab4     FD 12 02 F6 | 	mov	arg01, result1
2bab8     FC F3 BF FD | 	call	#__system___float_sqrt
2babc     FD 14 02 F6 | 	mov	arg02, result1
2bac0     13 13 02 F6 | 	mov	arg01, local01
2bac4     58 00 B0 FD | 	call	#__system____builtin_atan2f
2bac8     A7 F0 03 F6 | 	mov	ptra, fp
2bacc     B2 00 A0 FD | 	call	#popregs_
2bad0                 | __system____builtin_asinf_ret
2bad0     2D 00 64 FD | 	ret
2bad4                 | 
2bad4                 | __system____builtin_acosf
2bad4     01 4A 05 F6 | 	mov	COUNT_, #1
2bad8     A8 00 A0 FD | 	call	#pushregs_
2badc     09 27 02 F6 | 	mov	local01, arg01
2bae0     13 15 02 F6 | 	mov	arg02, local01
2bae4     13 13 02 F6 | 	mov	arg01, local01
2bae8     A4 F4 BF FD | 	call	#__system___float_mul
2baec     FD 14 02 F6 | 	mov	arg02, result1
2baf0     00 C0 1F FF 
2baf4     00 12 06 F6 | 	mov	arg01, ##1065353216
2baf8     1F 14 E6 F4 | 	bitnot	arg02, #31
2bafc     C0 F0 BF FD | 	call	#__system___float_add
2bb00     FD 12 02 F6 | 	mov	arg01, result1
2bb04     B0 F3 BF FD | 	call	#__system___float_sqrt
2bb08     FD 12 02 F6 | 	mov	arg01, result1
2bb0c     13 15 02 F6 | 	mov	arg02, local01
2bb10     0C 00 B0 FD | 	call	#__system____builtin_atan2f
2bb14     A7 F0 03 F6 | 	mov	ptra, fp
2bb18     B2 00 A0 FD | 	call	#popregs_
2bb1c                 | __system____builtin_acosf_ret
2bb1c     2D 00 64 FD | 	ret
2bb20                 | 
2bb20                 | __system____builtin_atan2f
2bb20     04 4A 05 F6 | 	mov	COUNT_, #4
2bb24     A8 00 A0 FD | 	call	#pushregs_
2bb28     09 27 02 F6 | 	mov	local01, arg01
2bb2c     0A 29 02 F6 | 	mov	local02, arg02
2bb30     13 13 02 F6 | 	mov	arg01, local01
2bb34     00 14 06 F6 | 	mov	arg02, #0
2bb38     01 16 06 F6 | 	mov	arg03, #1
2bb3c     84 F8 BF FD | 	call	#__system___float_cmp
2bb40     00 FA 0D F2 | 	cmp	result1, #0 wz
2bb44     28 00 90 5D |  if_ne	jmp	#LR__3910
2bb48     14 13 02 F6 | 	mov	arg01, local02
2bb4c     00 14 06 F6 | 	mov	arg02, #0
2bb50     01 16 06 F6 | 	mov	arg03, #1
2bb54     6C F8 BF FD | 	call	#__system___float_cmp
2bb58     00 FA 55 F2 | 	cmps	result1, #0 wc
2bb5c     87 24 60 CF 
2bb60     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
2bb64     DC 00 90 CD |  if_b	jmp	#LR__3911
2bb68     00 FA 05 F6 | 	mov	result1, #0
2bb6c     D4 00 90 FD | 	jmp	#LR__3911
2bb70                 | LR__3910
2bb70     14 13 02 F6 | 	mov	arg01, local02
2bb74     14 15 02 F6 | 	mov	arg02, local02
2bb78     14 F4 BF FD | 	call	#__system___float_mul
2bb7c     FD 2A 02 F6 | 	mov	local03, result1
2bb80     13 13 02 F6 | 	mov	arg01, local01
2bb84     13 15 02 F6 | 	mov	arg02, local01
2bb88     04 F4 BF FD | 	call	#__system___float_mul
2bb8c     FD 14 02 F6 | 	mov	arg02, result1
2bb90     15 13 02 F6 | 	mov	arg01, local03
2bb94     28 F0 BF FD | 	call	#__system___float_add
2bb98     FD 12 02 F6 | 	mov	arg01, result1
2bb9c     18 F3 BF FD | 	call	#__system___float_sqrt
2bba0     FD 2A 02 F6 | 	mov	local03, result1
2bba4     14 13 02 F6 | 	mov	arg01, local02
2bba8     15 15 02 F6 | 	mov	arg02, local03
2bbac     E4 F5 BF FD | 	call	#__system___float_div
2bbb0     FD 28 02 F6 | 	mov	local02, result1
2bbb4     13 13 02 F6 | 	mov	arg01, local01
2bbb8     15 15 02 F6 | 	mov	arg02, local03
2bbbc     D4 F5 BF FD | 	call	#__system___float_div
2bbc0     FD 26 02 F6 | 	mov	local01, result1
2bbc4     00 40 27 FF 
2bbc8     00 12 06 F6 | 	mov	arg01, ##1317011456
2bbcc     14 15 02 F6 | 	mov	arg02, local02
2bbd0     BC F3 BF FD | 	call	#__system___float_mul
2bbd4     FD 12 02 F6 | 	mov	arg01, result1
2bbd8     00 14 06 F6 | 	mov	arg02, #0
2bbdc     78 F8 BF FD | 	call	#__system___float_tointeger
2bbe0     FD 2A 02 F6 | 	mov	local03, result1
2bbe4     00 40 27 FF 
2bbe8     00 12 06 F6 | 	mov	arg01, ##1317011456
2bbec     13 15 02 F6 | 	mov	arg02, local01
2bbf0     9C F3 BF FD | 	call	#__system___float_mul
2bbf4     FD 12 02 F6 | 	mov	arg01, result1
2bbf8     00 14 06 F6 | 	mov	arg02, #0
2bbfc     58 F8 BF FD | 	call	#__system___float_tointeger
2bc00     FD 2A 52 FD | 	qvector	local03, result1
2bc04     87 24 20 FF 
2bc08     DB 2B 06 F6 | 	mov	local03, ##1078530011
2bc0c     19 12 62 FD | 	getqy	arg01
2bc10     01 12 C6 F0 | 	sar	arg01, #1
2bc14     09 13 52 F6 | 	abs	arg01, arg01 wc
2bc18     1F 2C C6 C9 |  if_b	decod	local04, #31
2bc1c     00 2C 06 36 |  if_ae	mov	local04, #0
2bc20     68 EF BF FD | 	call	#__system___float_fromuns
2bc24     16 FB 61 F5 | 	xor	result1, local04
2bc28     FD 12 02 F6 | 	mov	arg01, result1
2bc2c     00 40 27 FF 
2bc30     00 14 06 F6 | 	mov	arg02, ##1317011456
2bc34     5C F5 BF FD | 	call	#__system___float_div
2bc38     FD 14 02 F6 | 	mov	arg02, result1
2bc3c     15 13 02 F6 | 	mov	arg01, local03
2bc40     4C F3 BF FD | 	call	#__system___float_mul
2bc44                 | LR__3911
2bc44     A7 F0 03 F6 | 	mov	ptra, fp
2bc48     B2 00 A0 FD | 	call	#popregs_
2bc4c                 | __system____builtin_atan2f_ret
2bc4c     2D 00 64 FD | 	ret
2bc50                 | 
2bc50                 | __system____builtin_exp2f
2bc50     04 4A 05 F6 | 	mov	COUNT_, #4
2bc54     A8 00 A0 FD | 	call	#pushregs_
2bc58     09 27 02 F6 | 	mov	local01, arg01
2bc5c     00 7F 21 FF 
2bc60     00 14 06 F6 | 	mov	arg02, ##1123942400
2bc64     01 16 66 F6 | 	neg	arg03, #1
2bc68     58 F7 BF FD | 	call	#__system___float_cmp
2bc6c     00 FA 55 F2 | 	cmps	result1, #0 wc
2bc70     00 C0 3F 3F 
2bc74     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
2bc78     DC 00 90 3D |  if_ae	jmp	#LR__3921
2bc7c     13 13 02 F6 | 	mov	arg01, local01
2bc80     00 7F 61 FF 
2bc84     00 14 06 F6 | 	mov	arg02, ##-1023541248
2bc88     01 16 06 F6 | 	mov	arg03, #1
2bc8c     34 F7 BF FD | 	call	#__system___float_cmp
2bc90     00 FA 55 F2 | 	cmps	result1, #0 wc
2bc94     00 FA 05 C6 |  if_b	mov	result1, #0
2bc98     BC 00 90 CD |  if_b	jmp	#LR__3921
2bc9c     13 13 02 F6 | 	mov	arg01, local01
2bca0     00 14 06 F6 | 	mov	arg02, #0
2bca4     B0 F7 BF FD | 	call	#__system___float_tointeger
2bca8     FD 28 02 F6 | 	mov	local02, result1
2bcac     14 13 52 F6 | 	abs	arg01, local02 wc
2bcb0     1F 2A C6 C9 |  if_b	decod	local03, #31
2bcb4     00 2A 06 36 |  if_ae	mov	local03, #0
2bcb8     D0 EE BF FD | 	call	#__system___float_fromuns
2bcbc     15 FB 61 F5 | 	xor	result1, local03
2bcc0     FD 14 02 F6 | 	mov	arg02, result1
2bcc4     13 13 02 F6 | 	mov	arg01, local01
2bcc8     1F 14 E6 F4 | 	bitnot	arg02, #31
2bccc     F0 EE BF FD | 	call	#__system___float_add
2bcd0     FD 2C 02 F6 | 	mov	local04, result1
2bcd4     16 13 02 F6 | 	mov	arg01, local04
2bcd8     00 14 06 F6 | 	mov	arg02, #0
2bcdc     01 16 06 F6 | 	mov	arg03, #1
2bce0     E0 F6 BF FD | 	call	#__system___float_cmp
2bce4     00 FA 55 F2 | 	cmps	result1, #0 wc
2bce8     18 00 90 3D |  if_ae	jmp	#LR__3920
2bcec     16 13 02 F6 | 	mov	arg01, local04
2bcf0     00 C0 1F FF 
2bcf4     00 14 06 F6 | 	mov	arg02, ##1065353216
2bcf8     C4 EE BF FD | 	call	#__system___float_add
2bcfc     FD 2C 02 F6 | 	mov	local04, result1
2bd00     01 28 86 F1 | 	sub	local02, #1
2bd04                 | LR__3920
2bd04     7F 28 06 F1 | 	add	local02, #127
2bd08     17 28 66 F0 | 	shl	local02, #23
2bd0c     16 13 02 F6 | 	mov	arg01, local04
2bd10     00 80 26 FF 
2bd14     00 14 06 F6 | 	mov	arg02, ##1291845632
2bd18     74 F2 BF FD | 	call	#__system___float_mul
2bd1c     FD 12 02 F6 | 	mov	arg01, result1
2bd20     00 14 06 F6 | 	mov	arg02, #0
2bd24     30 F7 BF FD | 	call	#__system___float_tointeger
2bd28     FD 2C 0A F6 | 	mov	local04, result1 wz
2bd2c     14 FB 01 A6 |  if_e	mov	result1, local02
2bd30     24 00 90 AD |  if_e	jmp	#LR__3921
2bd34     3E 2C 26 F4 | 	bith	local04, #62
2bd38     0F 2C 62 FD | 	qexp	local04
2bd3c     14 13 02 F6 | 	mov	arg01, local02
2bd40     18 14 62 FD | 	getqx	arg02
2bd44     01 14 06 F1 | 	add	arg02, #1
2bd48     01 14 46 F0 | 	shr	arg02, #1
2bd4c     00 80 1F FF 
2bd50     00 14 06 F1 | 	add	arg02, ##1056964608
2bd54     38 F2 BF FD | 	call	#__system___float_mul
2bd58                 | LR__3921
2bd58     A7 F0 03 F6 | 	mov	ptra, fp
2bd5c     B2 00 A0 FD | 	call	#popregs_
2bd60                 | __system____builtin_exp2f_ret
2bd60     2D 00 64 FD | 	ret
2bd64                 | 
2bd64                 | __system____builtin_log2f
2bd64     06 4A 05 F6 | 	mov	COUNT_, #6
2bd68     A8 00 A0 FD | 	call	#pushregs_
2bd6c     09 27 02 F6 | 	mov	local01, arg01
2bd70     09 29 0A F6 | 	mov	local02, arg01 wz
2bd74     00 00 40 5F 
2bd78     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
2bd7c     00 40 00 AF 
2bd80     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2bd84     08 01 90 AD |  if_e	jmp	#LR__3934
2bd88     00 28 56 F2 | 	cmps	local02, #0 wc
2bd8c     00 E0 3F CF 
2bd90     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2bd94     F8 00 90 CD |  if_b	jmp	#LR__3934
2bd98     13 13 02 F6 | 	mov	arg01, local01
2bd9c     00 90 20 FF 
2bda0     00 14 06 F6 | 	mov	arg02, ##1092616192
2bda4     01 16 06 F6 | 	mov	arg03, #1
2bda8     18 F6 BF FD | 	call	#__system___float_cmp
2bdac     00 FA 0D F2 | 	cmp	result1, #0 wz
2bdb0     4D 2A 20 AF 
2bdb4     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
2bdb8     D4 00 90 AD |  if_e	jmp	#LR__3934
2bdbc     13 13 02 F6 | 	mov	arg01, local01
2bdc0     FC 16 20 FF 
2bdc4     54 14 06 F6 | 	mov	arg02, ##1076754516
2bdc8     01 16 06 F6 | 	mov	arg03, #1
2bdcc     F4 F5 BF FD | 	call	#__system___float_cmp
2bdd0     00 FA 0D F2 | 	cmp	result1, #0 wz
2bdd4     55 DC 1F AF 
2bdd8     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
2bddc     B0 00 90 AD |  if_e	jmp	#LR__3934
2bde0     14 2B 02 F6 | 	mov	local03, local02
2bde4     17 2A 46 F0 | 	shr	local03, #23
2bde8     15 2B E2 F8 | 	getbyte	local03, local03, #0
2bdec     17 29 06 F4 | 	bitl	local02, #279
2bdf0     14 2D 02 F6 | 	mov	local04, local02
2bdf4     FF 2A 0E F2 | 	cmp	local03, #255 wz
2bdf8     1C 00 90 5D |  if_ne	jmp	#LR__3930
2bdfc     00 2C 0E F2 | 	cmp	local04, #0 wz
2be00     00 C0 3F 5F 
2be04     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
2be08     00 E0 3F AF 
2be0c     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
2be10     17 FB 01 F6 | 	mov	result1, local05
2be14     78 00 90 FD | 	jmp	#LR__3934
2be18                 | LR__3930
2be18     00 2A 0E F2 | 	cmp	local03, #0 wz
2be1c     17 2C 26 54 |  if_ne	bith	local04, #23
2be20     7F 2A 86 51 |  if_ne	sub	local03, #127
2be24     28 00 90 5D |  if_ne	jmp	#LR__3933
2be28     00 2C 0E F2 | 	cmp	local04, #0 wz
2be2c     00 40 00 AF 
2be30     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2be34     58 00 90 AD |  if_e	jmp	#LR__3934
2be38     7E 2A 66 F6 | 	neg	local03, #126
2be3c     97 08 48 FB | 	callpa	#(@LR__3932-@LR__3931)>>2,fcache_load_ptr_
2be40                 | LR__3931
2be40     17 2C 2E F4 | 	testbn	local04, #23 wz
2be44     01 2C 66 A0 |  if_e	shl	local04, #1
2be48     01 2A 06 A1 |  if_e	add	local03, #1
2be4c     F0 FF 9F AD |  if_e	jmp	#LR__3931
2be50                 | LR__3932
2be50                 | LR__3933
2be50     0E 2C 62 FD | 	qlog	local04
2be54     01 2A 86 F1 | 	sub	local03, #1
2be58     15 13 52 F6 | 	abs	arg01, local03 wc
2be5c     1F 30 C6 C9 |  if_b	decod	local06, #31
2be60     00 30 06 36 |  if_ae	mov	local06, #0
2be64     18 2E 62 FD | 	getqx	local05
2be68     9B 2E 06 F4 | 	bitl	local05, #155
2be6c     08 2E 06 F1 | 	add	local05, #8
2be70     04 2E 46 F0 | 	shr	local05, #4
2be74     00 C0 1F FF 
2be78     00 2E 06 F1 | 	add	local05, ##1065353216
2be7c     0C ED BF FD | 	call	#__system___float_fromuns
2be80     18 FB 61 F5 | 	xor	result1, local06
2be84     FD 14 02 F6 | 	mov	arg02, result1
2be88     17 13 02 F6 | 	mov	arg01, local05
2be8c     30 ED BF FD | 	call	#__system___float_add
2be90                 | LR__3934
2be90     A7 F0 03 F6 | 	mov	ptra, fp
2be94     B2 00 A0 FD | 	call	#popregs_
2be98                 | __system____builtin_log2f_ret
2be98     2D 00 64 FD | 	ret
2be9c                 | 
2be9c                 | __system____builtin_powf
2be9c     04 4A 05 F6 | 	mov	COUNT_, #4
2bea0     A8 00 A0 FD | 	call	#pushregs_
2bea4     09 27 02 F6 | 	mov	local01, arg01
2bea8     0A 29 02 F6 | 	mov	local02, arg02
2beac     14 13 02 F6 | 	mov	arg01, local02
2beb0     00 14 06 F6 | 	mov	arg02, #0
2beb4     A0 F5 BF FD | 	call	#__system___float_tointeger
2beb8     FD 2A 02 F6 | 	mov	local03, result1
2bebc     15 13 52 F6 | 	abs	arg01, local03 wc
2bec0     1F 2C C6 C9 |  if_b	decod	local04, #31
2bec4     00 2C 06 36 |  if_ae	mov	local04, #0
2bec8     C0 EC BF FD | 	call	#__system___float_fromuns
2becc     16 FB 61 F5 | 	xor	result1, local04
2bed0     FD 12 02 F6 | 	mov	arg01, result1
2bed4     14 15 02 F6 | 	mov	arg02, local02
2bed8     01 16 06 F6 | 	mov	arg03, #1
2bedc     E4 F4 BF FD | 	call	#__system___float_cmp
2bee0     00 FA 0D F2 | 	cmp	result1, #0 wz
2bee4     18 00 90 5D |  if_ne	jmp	#LR__3940
2bee8     00 C0 1F FF 
2beec     00 12 06 F6 | 	mov	arg01, ##1065353216
2bef0     13 15 02 F6 | 	mov	arg02, local01
2bef4     15 17 02 F6 | 	mov	arg03, local03
2bef8     A0 00 B0 FD | 	call	#__system___float_pow_n
2befc     58 00 90 FD | 	jmp	#LR__3941
2bf00                 | LR__3940
2bf00     13 13 02 F6 | 	mov	arg01, local01
2bf04     00 14 06 F6 | 	mov	arg02, #0
2bf08     01 16 06 F6 | 	mov	arg03, #1
2bf0c     B4 F4 BF FD | 	call	#__system___float_cmp
2bf10     00 FA 55 F2 | 	cmps	result1, #0 wc
2bf14     00 E0 3F CF 
2bf18     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2bf1c     38 00 90 CD |  if_b	jmp	#LR__3941
2bf20     13 13 02 F6 | 	mov	arg01, local01
2bf24     00 14 06 F6 | 	mov	arg02, #0
2bf28     01 16 06 F6 | 	mov	arg03, #1
2bf2c     94 F4 BF FD | 	call	#__system___float_cmp
2bf30     00 FA 0D F2 | 	cmp	result1, #0 wz
2bf34     00 FA 05 A6 |  if_e	mov	result1, #0
2bf38     1C 00 90 AD |  if_e	jmp	#LR__3941
2bf3c     13 13 02 F6 | 	mov	arg01, local01
2bf40     20 FE BF FD | 	call	#__system____builtin_log2f
2bf44     FD 12 02 F6 | 	mov	arg01, result1
2bf48     14 15 02 F6 | 	mov	arg02, local02
2bf4c     40 F0 BF FD | 	call	#__system___float_mul
2bf50     FD 12 02 F6 | 	mov	arg01, result1
2bf54     F8 FC BF FD | 	call	#__system____builtin_exp2f
2bf58                 | LR__3941
2bf58     A7 F0 03 F6 | 	mov	ptra, fp
2bf5c     B2 00 A0 FD | 	call	#popregs_
2bf60                 | __system____builtin_powf_ret
2bf60     2D 00 64 FD | 	ret
2bf64                 | 
2bf64                 | __system____builtin_logbase
2bf64     02 4A 05 F6 | 	mov	COUNT_, #2
2bf68     A8 00 A0 FD | 	call	#pushregs_
2bf6c     09 27 02 F6 | 	mov	local01, arg01
2bf70     0A 13 02 F6 | 	mov	arg01, arg02
2bf74     EC FD BF FD | 	call	#__system____builtin_log2f
2bf78     FD 28 02 F6 | 	mov	local02, result1
2bf7c     13 13 02 F6 | 	mov	arg01, local01
2bf80     E0 FD BF FD | 	call	#__system____builtin_log2f
2bf84     FD 14 02 F6 | 	mov	arg02, result1
2bf88     14 13 02 F6 | 	mov	arg01, local02
2bf8c     04 F2 BF FD | 	call	#__system___float_div
2bf90     A7 F0 03 F6 | 	mov	ptra, fp
2bf94     B2 00 A0 FD | 	call	#popregs_
2bf98                 | __system____builtin_logbase_ret
2bf98     2D 00 64 FD | 	ret
2bf9c                 | 
2bf9c                 | __system___float_pow_n
2bf9c     05 4A 05 F6 | 	mov	COUNT_, #5
2bfa0     A8 00 A0 FD | 	call	#pushregs_
2bfa4     09 27 02 F6 | 	mov	local01, arg01
2bfa8     0A 29 02 F6 | 	mov	local02, arg02
2bfac     0B 2B 02 F6 | 	mov	local03, arg03
2bfb0     00 2A 56 F2 | 	cmps	local03, #0 wc
2bfb4     18 00 90 3D |  if_ae	jmp	#LR__3950
2bfb8     01 2C 06 F6 | 	mov	local04, #1
2bfbc     15 2B 62 F6 | 	neg	local03, local03
2bfc0     00 2A 56 F2 | 	cmps	local03, #0 wc
2bfc4     00 FA 05 C6 |  if_b	mov	result1, #0
2bfc8     94 00 90 CD |  if_b	jmp	#LR__3958
2bfcc     04 00 90 FD | 	jmp	#LR__3951
2bfd0                 | LR__3950
2bfd0     00 2C 06 F6 | 	mov	local04, #0
2bfd4                 | LR__3951
2bfd4     00 C0 1F FF 
2bfd8     00 2E 06 F6 | 	mov	local05, ##1065353216
2bfdc                 | LR__3952
2bfdc     01 2A 56 F2 | 	cmps	local03, #1 wc
2bfe0     30 00 90 CD |  if_b	jmp	#LR__3954
2bfe4     01 2A CE F7 | 	test	local03, #1 wz
2bfe8     10 00 90 AD |  if_e	jmp	#LR__3953
2bfec     17 13 02 F6 | 	mov	arg01, local05
2bff0     14 15 02 F6 | 	mov	arg02, local02
2bff4     98 EF BF FD | 	call	#__system___float_mul
2bff8     FD 2E 02 F6 | 	mov	local05, result1
2bffc                 | LR__3953
2bffc     01 2A C6 F0 | 	sar	local03, #1
2c000     14 13 02 F6 | 	mov	arg01, local02
2c004     14 15 02 F6 | 	mov	arg02, local02
2c008     84 EF BF FD | 	call	#__system___float_mul
2c00c     FD 28 02 F6 | 	mov	local02, result1
2c010     C8 FF 9F FD | 	jmp	#LR__3952
2c014                 | LR__3954
2c014     00 2C 0E F2 | 	cmp	local04, #0 wz
2c018     14 00 90 AD |  if_e	jmp	#LR__3955
2c01c     13 13 02 F6 | 	mov	arg01, local01
2c020     17 15 02 F6 | 	mov	arg02, local05
2c024     6C F1 BF FD | 	call	#__system___float_div
2c028     FD 2E 02 F6 | 	mov	local05, result1
2c02c     2C 00 90 FD | 	jmp	#LR__3957
2c030                 | LR__3955
2c030     13 13 02 F6 | 	mov	arg01, local01
2c034     00 C0 1F FF 
2c038     00 14 06 F6 | 	mov	arg02, ##1065353216
2c03c     01 16 06 F6 | 	mov	arg03, #1
2c040     80 F3 BF FD | 	call	#__system___float_cmp
2c044     00 FA 0D F2 | 	cmp	result1, #0 wz
2c048     10 00 90 AD |  if_e	jmp	#LR__3956
2c04c     13 13 02 F6 | 	mov	arg01, local01
2c050     17 15 02 F6 | 	mov	arg02, local05
2c054     38 EF BF FD | 	call	#__system___float_mul
2c058     FD 2E 02 F6 | 	mov	local05, result1
2c05c                 | LR__3956
2c05c                 | LR__3957
2c05c     17 FB 01 F6 | 	mov	result1, local05
2c060                 | LR__3958
2c060     A7 F0 03 F6 | 	mov	ptra, fp
2c064     B2 00 A0 FD | 	call	#popregs_
2c068                 | __system___float_pow_n_ret
2c068     2D 00 64 FD | 	ret
2c06c                 | 
2c06c                 | __system___gc_ptrs
2c06c     EC 00 02 F6 | 	mov	_var01, __heap_ptr
2c070     00 03 02 F6 | 	mov	_var02, _var01
2c074     BB 00 00 FF 
2c078     F8 02 06 F1 | 	add	_var02, ##95992
2c07c     00 FD 09 FB | 	rdlong	result2, _var01 wz
2c080     74 00 90 5D |  if_ne	jmp	#LR__3960
2c084     01 FD 01 F6 | 	mov	result2, _var02
2c088     00 FD 81 F1 | 	sub	result2, _var01
2c08c     00 03 58 FC | 	wrword	#1, _var01
2c090     00 FB 01 F6 | 	mov	result1, _var01
2c094     02 FA 05 F1 | 	add	result1, #2
2c098     36 00 80 FF 
2c09c     FD 20 59 FC | 	wrword	##27792, result1
2c0a0     00 FB 01 F6 | 	mov	result1, _var01
2c0a4     04 FA 05 F1 | 	add	result1, #4
2c0a8     FD 00 58 FC | 	wrword	#0, result1
2c0ac     00 FB 01 F6 | 	mov	result1, _var01
2c0b0     06 FA 05 F1 | 	add	result1, #6
2c0b4     FD 02 58 FC | 	wrword	#1, result1
2c0b8     10 00 06 F1 | 	add	_var01, #16
2c0bc     FE FC 51 F6 | 	abs	result2, result2 wc
2c0c0     04 FC 45 F0 | 	shr	result2, #4
2c0c4     FE FC 81 F6 | 	negc	result2, result2
2c0c8     00 FD 51 FC | 	wrword	result2, _var01
2c0cc     00 FD 01 F6 | 	mov	result2, _var01
2c0d0     02 FC 05 F1 | 	add	result2, #2
2c0d4     36 00 80 FF 
2c0d8     FE 1E 59 FC | 	wrword	##27791, result2
2c0dc     00 FD 01 F6 | 	mov	result2, _var01
2c0e0     04 FC 05 F1 | 	add	result2, #4
2c0e4     FE 00 58 FC | 	wrword	#0, result2
2c0e8     00 FD 01 F6 | 	mov	result2, _var01
2c0ec     06 FC 05 F1 | 	add	result2, #6
2c0f0     FE 00 58 FC | 	wrword	#0, result2
2c0f4     10 00 86 F1 | 	sub	_var01, #16
2c0f8                 | LR__3960
2c0f8     00 FB 01 F6 | 	mov	result1, _var01
2c0fc     01 FD 01 F6 | 	mov	result2, _var02
2c100                 | __system___gc_ptrs_ret
2c100     2D 00 64 FD | 	ret
2c104                 | 
2c104                 | __system___gc_tryalloc
2c104     0B 4A 05 F6 | 	mov	COUNT_, #11
2c108     A8 00 A0 FD | 	call	#pushregs_
2c10c     09 27 02 F6 | 	mov	local01, arg01
2c110     0A 29 02 F6 | 	mov	local02, arg02
2c114     54 FF BF FD | 	call	#__system___gc_ptrs
2c118     FD 2A 02 F6 | 	mov	local03, result1
2c11c     FE 2C 02 F6 | 	mov	local04, result2
2c120     15 2F 02 F6 | 	mov	local05, local03
2c124     00 30 06 F6 | 	mov	local06, #0
2c128     97 1E 48 FB | 	callpa	#(@LR__3971-@LR__3970)>>2,fcache_load_ptr_
2c12c                 | LR__3970
2c12c     17 33 02 F6 | 	mov	local07, local05
2c130     06 2E 06 F1 | 	add	local05, #6
2c134     17 15 EA FA | 	rdword	arg02, local05 wz
2c138     15 13 02 F6 | 	mov	arg01, local03
2c13c     00 FA 05 A6 |  if_e	mov	result1, #0
2c140     04 14 66 50 |  if_ne	shl	arg02, #4
2c144     0A 13 02 51 |  if_ne	add	arg01, arg02
2c148     09 FB 01 56 |  if_ne	mov	result1, arg01
2c14c     FD 2E 0A F6 | 	mov	local05, result1 wz
2c150     17 31 E2 5A |  if_ne	rdword	local06, local05
2c154     00 2E 0E F2 | 	cmp	local05, #0 wz
2c158     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
2c15c     08 00 90 1D |  if_a	jmp	#LR__3972
2c160     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
2c164     C4 FF 9F 1D |  if_a	jmp	#LR__3970
2c168                 | LR__3971
2c168                 | LR__3972
2c168     00 2E 0E F2 | 	cmp	local05, #0 wz
2c16c     17 FB 01 A6 |  if_e	mov	result1, local05
2c170     3C 01 90 AD |  if_e	jmp	#LR__3975
2c174     17 FD 01 F6 | 	mov	result2, local05
2c178     06 FC 05 F1 | 	add	result2, #6
2c17c     FE 34 E2 FA | 	rdword	local08, result2
2c180     18 27 52 F2 | 	cmps	local01, local06 wc
2c184     C0 00 90 3D |  if_ae	jmp	#LR__3974
2c188     17 27 52 FC | 	wrword	local01, local05
2c18c     17 13 02 F6 | 	mov	arg01, local05
2c190     13 35 02 F6 | 	mov	local08, local01
2c194     04 34 66 F0 | 	shl	local08, #4
2c198     1A 13 02 F1 | 	add	arg01, local08
2c19c     13 31 82 F1 | 	sub	local06, local01
2c1a0     09 31 52 FC | 	wrword	local06, arg01
2c1a4     09 35 02 F6 | 	mov	local08, arg01
2c1a8     02 34 06 F1 | 	add	local08, #2
2c1ac     36 00 80 FF 
2c1b0     1A 1F 59 FC | 	wrword	##27791, local08
2c1b4     17 15 0A F6 | 	mov	arg02, local05 wz
2c1b8     00 FA 05 A6 |  if_e	mov	result1, #0
2c1bc     15 15 82 51 |  if_ne	sub	arg02, local03
2c1c0     04 14 46 50 |  if_ne	shr	arg02, #4
2c1c4     0A FB 01 56 |  if_ne	mov	result1, arg02
2c1c8     09 35 02 F6 | 	mov	local08, arg01
2c1cc     04 34 06 F1 | 	add	local08, #4
2c1d0     1A FB 51 FC | 	wrword	result1, local08
2c1d4     17 35 02 F6 | 	mov	local08, local05
2c1d8     06 34 06 F1 | 	add	local08, #6
2c1dc     09 15 02 F6 | 	mov	arg02, arg01
2c1e0     1A 35 E2 FA | 	rdword	local08, local08
2c1e4     06 14 06 F1 | 	add	arg02, #6
2c1e8     0A 35 52 FC | 	wrword	local08, arg02
2c1ec     09 37 02 F6 | 	mov	local09, arg01
2c1f0     1B 15 0A F6 | 	mov	arg02, local09 wz
2c1f4     00 FA 05 A6 |  if_e	mov	result1, #0
2c1f8     15 15 82 51 |  if_ne	sub	arg02, local03
2c1fc     04 14 46 50 |  if_ne	shr	arg02, #4
2c200     0A FB 01 56 |  if_ne	mov	result1, arg02
2c204     FD 34 02 F6 | 	mov	local08, result1
2c208     09 39 EA FA | 	rdword	local10, arg01 wz
2c20c     00 FA 05 A6 |  if_e	mov	result1, #0
2c210     04 38 66 50 |  if_ne	shl	local10, #4
2c214     1C 13 02 51 |  if_ne	add	arg01, local10
2c218     09 FB 01 56 |  if_ne	mov	result1, arg01
2c21c     FD 3A 0A F6 | 	mov	local11, result1 wz
2c220     24 00 90 AD |  if_e	jmp	#LR__3973
2c224     16 3B 52 F2 | 	cmps	local11, local04 wc
2c228     1C 00 90 3D |  if_ae	jmp	#LR__3973
2c22c     1B 15 0A F6 | 	mov	arg02, local09 wz
2c230     00 FA 05 A6 |  if_e	mov	result1, #0
2c234     15 15 82 51 |  if_ne	sub	arg02, local03
2c238     04 14 46 50 |  if_ne	shr	arg02, #4
2c23c     0A FB 01 56 |  if_ne	mov	result1, arg02
2c240     04 3A 06 F1 | 	add	local11, #4
2c244     1D FB 51 FC | 	wrword	result1, local11
2c248                 | LR__3973
2c248                 | LR__3974
2c248     06 32 06 F1 | 	add	local07, #6
2c24c     19 35 52 FC | 	wrword	local08, local07
2c250     36 00 00 FF 
2c254     80 36 06 F6 | 	mov	local09, ##27776
2c258     14 37 42 F5 | 	or	local09, local02
2c25c     00 FA 05 F6 | 	mov	result1, #0
2c260     01 FA 61 FD | 	cogid	result1
2c264     FD 36 42 F5 | 	or	local09, result1
2c268     17 3B 02 F6 | 	mov	local11, local05
2c26c     02 3A 06 F1 | 	add	local11, #2
2c270     1D 37 52 FC | 	wrword	local09, local11
2c274     15 37 02 F6 | 	mov	local09, local03
2c278     08 36 06 F1 | 	add	local09, #8
2c27c     17 3B 02 F6 | 	mov	local11, local05
2c280     1B 37 E2 FA | 	rdword	local09, local09
2c284     06 3A 06 F1 | 	add	local11, #6
2c288     1D 37 52 FC | 	wrword	local09, local11
2c28c     17 15 0A F6 | 	mov	arg02, local05 wz
2c290     00 FA 05 A6 |  if_e	mov	result1, #0
2c294     15 15 82 51 |  if_ne	sub	arg02, local03
2c298     04 14 46 50 |  if_ne	shr	arg02, #4
2c29c     0A FB 01 56 |  if_ne	mov	result1, arg02
2c2a0     08 2A 06 F1 | 	add	local03, #8
2c2a4     15 FB 51 FC | 	wrword	result1, local03
2c2a8     08 2E 06 F1 | 	add	local05, #8
2c2ac     17 FB 01 F6 | 	mov	result1, local05
2c2b0                 | LR__3975
2c2b0     A7 F0 03 F6 | 	mov	ptra, fp
2c2b4     B2 00 A0 FD | 	call	#popregs_
2c2b8                 | __system___gc_tryalloc_ret
2c2b8     2D 00 64 FD | 	ret
2c2bc                 | 
2c2bc                 | __system___gc_alloc_managed
2c2bc     01 4A 05 F6 | 	mov	COUNT_, #1
2c2c0     A8 00 A0 FD | 	call	#pushregs_
2c2c4     09 27 02 F6 | 	mov	local01, arg01
2c2c8     00 14 06 F6 | 	mov	arg02, #0
2c2cc     1C 00 B0 FD | 	call	#__system___gc_doalloc
2c2d0     FD 14 0A F6 | 	mov	arg02, result1 wz
2c2d4     01 26 56 A2 |  if_e	cmps	local01, #1 wc
2c2d8     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
2c2dc     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
2c2e0     A7 F0 03 F6 | 	mov	ptra, fp
2c2e4     B2 00 A0 FD | 	call	#popregs_
2c2e8                 | __system___gc_alloc_managed_ret
2c2e8     2D 00 64 FD | 	ret
2c2ec                 | 
2c2ec                 | __system___gc_doalloc
2c2ec     06 4A 05 F6 | 	mov	COUNT_, #6
2c2f0     A8 00 A0 FD | 	call	#pushregs_
2c2f4     09 27 0A F6 | 	mov	local01, arg01 wz
2c2f8     0A 29 02 F6 | 	mov	local02, arg02
2c2fc     00 FA 05 A6 |  if_e	mov	result1, #0
2c300     8C 00 90 AD |  if_e	jmp	#LR__3987
2c304     17 26 06 F1 | 	add	local01, #23
2c308     0F 26 26 F5 | 	andn	local01, #15
2c30c     04 26 46 F0 | 	shr	local01, #4
2c310     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2c314     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2c318     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2c31c     F4 BD BF FD | 	call	#__system___lockmem
2c320     13 13 02 F6 | 	mov	arg01, local01
2c324     14 15 02 F6 | 	mov	arg02, local02
2c328     D8 FD BF FD | 	call	#__system___gc_tryalloc
2c32c     FD 2A 0A F6 | 	mov	local03, result1 wz
2c330     14 00 90 5D |  if_ne	jmp	#LR__3980
2c334     70 03 B0 FD | 	call	#__system___gc_docollect
2c338     13 13 02 F6 | 	mov	arg01, local01
2c33c     14 15 02 F6 | 	mov	arg02, local02
2c340     C0 FD BF FD | 	call	#__system___gc_tryalloc
2c344     FD 2A 02 F6 | 	mov	local03, result1
2c348                 | LR__3980
2c348     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2c34c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2c350     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2c354     09 01 68 FC | 	wrlong	#0, arg01
2c358     00 2A 0E F2 | 	cmp	local03, #0 wz
2c35c     2C 00 90 AD |  if_e	jmp	#LR__3986
2c360     04 26 66 F0 | 	shl	local01, #4
2c364     08 26 86 F1 | 	sub	local01, #8
2c368     13 2D 52 F6 | 	abs	local04, local01 wc
2c36c     02 2C 46 F0 | 	shr	local04, #2
2c370     16 2F 8A F6 | 	negc	local05, local04 wz
2c374     15 31 02 F6 | 	mov	local06, local03
2c378     10 00 90 AD |  if_e	jmp	#LR__3985
2c37c     97 06 48 FB | 	callpa	#(@LR__3983-@LR__3981)>>2,fcache_load_ptr_
2c380                 | LR__3981
2c380     17 05 D8 FC | 	rep	@LR__3984, local05
2c384                 | LR__3982
2c384     18 01 68 FC | 	wrlong	#0, local06
2c388     04 30 06 F1 | 	add	local06, #4
2c38c                 | LR__3983
2c38c                 | LR__3984
2c38c                 | LR__3985
2c38c                 | LR__3986
2c38c     15 FB 01 F6 | 	mov	result1, local03
2c390                 | LR__3987
2c390     A7 F0 03 F6 | 	mov	ptra, fp
2c394     B2 00 A0 FD | 	call	#popregs_
2c398                 | __system___gc_doalloc_ret
2c398     2D 00 64 FD | 	ret
2c39c                 | 
2c39c                 | __system___gc_isvalidptr
2c39c     F8 16 06 F4 | 	bitl	arg03, #248
2c3a0     08 16 86 F1 | 	sub	arg03, #8
2c3a4     09 17 52 F2 | 	cmps	arg03, arg01 wc
2c3a8     08 00 90 CD |  if_b	jmp	#LR__3990
2c3ac     0A 17 52 F2 | 	cmps	arg03, arg02 wc
2c3b0     08 00 90 CD |  if_b	jmp	#LR__3991
2c3b4                 | LR__3990
2c3b4     00 FA 05 F6 | 	mov	result1, #0
2c3b8     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
2c3bc                 | LR__3991
2c3bc     0B 01 02 F6 | 	mov	_var01, arg03
2c3c0     09 01 62 F5 | 	xor	_var01, arg01
2c3c4     0F 00 CE F7 | 	test	_var01, #15 wz
2c3c8     00 FA 05 56 |  if_ne	mov	result1, #0
2c3cc     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
2c3d0     0B 01 02 F6 | 	mov	_var01, arg03
2c3d4     02 00 06 F1 | 	add	_var01, #2
2c3d8     00 01 E2 FA | 	rdword	_var01, _var01
2c3dc     7F 00 00 FF 
2c3e0     C0 01 06 F5 | 	and	_var01, ##65472
2c3e4     36 00 00 FF 
2c3e8     80 00 0E F2 | 	cmp	_var01, ##27776 wz
2c3ec     00 FA 05 56 |  if_ne	mov	result1, #0
2c3f0     0B FB 01 A6 |  if_e	mov	result1, arg03
2c3f4                 | __system___gc_isvalidptr_ret
2c3f4     2D 00 64 FD | 	ret
2c3f8                 | 
2c3f8                 | __system___gc_free
2c3f8     09 17 02 F6 | 	mov	arg03, arg01
2c3fc     6C FC BF FD | 	call	#__system___gc_ptrs
2c400     FD 12 02 F6 | 	mov	arg01, result1
2c404     FE 14 02 F6 | 	mov	arg02, result2
2c408     90 FF BF FD | 	call	#__system___gc_isvalidptr
2c40c     FD 14 0A F6 | 	mov	arg02, result1 wz
2c410     28 00 90 AD |  if_e	jmp	#LR__4000
2c414     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2c418     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2c41c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2c420     F0 BC BF FD | 	call	#__system___lockmem
2c424     0A 13 02 F6 | 	mov	arg01, arg02
2c428     14 00 B0 FD | 	call	#__system___gc_dofree
2c42c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2c430     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2c434     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2c438     09 01 68 FC | 	wrlong	#0, arg01
2c43c                 | LR__4000
2c43c                 | __system___gc_free_ret
2c43c     2D 00 64 FD | 	ret
2c440                 | 
2c440                 | __system___gc_dofree
2c440     06 4A 05 F6 | 	mov	COUNT_, #6
2c444     A8 00 A0 FD | 	call	#pushregs_
2c448     09 27 02 F6 | 	mov	local01, arg01
2c44c     1C FC BF FD | 	call	#__system___gc_ptrs
2c450     FD 28 02 F6 | 	mov	local02, result1
2c454     FE 2A 02 F6 | 	mov	local03, result2
2c458     13 15 02 F6 | 	mov	arg02, local01
2c45c     02 14 06 F1 | 	add	arg02, #2
2c460     36 00 80 FF 
2c464     0A 1F 59 FC | 	wrword	##27791, arg02
2c468     13 2D 02 F6 | 	mov	local04, local01
2c46c     13 13 02 F6 | 	mov	arg01, local01
2c470     09 2F EA FA | 	rdword	local05, arg01 wz
2c474     00 FA 05 A6 |  if_e	mov	result1, #0
2c478     04 2E 66 50 |  if_ne	shl	local05, #4
2c47c     17 13 02 51 |  if_ne	add	arg01, local05
2c480     09 FB 01 56 |  if_ne	mov	result1, arg01
2c484     FD 30 02 F6 | 	mov	local06, result1
2c488     97 24 48 FB | 	callpa	#(@LR__4011-@LR__4010)>>2,fcache_load_ptr_
2c48c                 | LR__4010
2c48c     04 2C 06 F1 | 	add	local04, #4
2c490     16 15 EA FA | 	rdword	arg02, local04 wz
2c494     14 13 02 F6 | 	mov	arg01, local02
2c498     00 FA 05 A6 |  if_e	mov	result1, #0
2c49c     04 14 66 50 |  if_ne	shl	arg02, #4
2c4a0     0A 13 02 51 |  if_ne	add	arg01, arg02
2c4a4     09 FB 01 56 |  if_ne	mov	result1, arg01
2c4a8     FD 2C 0A F6 | 	mov	local04, result1 wz
2c4ac     24 00 90 AD |  if_e	jmp	#LR__4012
2c4b0     16 13 02 F6 | 	mov	arg01, local04
2c4b4     00 FA 05 F6 | 	mov	result1, #0
2c4b8     02 12 06 F1 | 	add	arg01, #2
2c4bc     09 13 E2 FA | 	rdword	arg01, arg01
2c4c0     36 00 00 FF 
2c4c4     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2c4c8     01 FA 65 A6 |  if_e	neg	result1, #1
2c4cc     00 FA 0D F2 | 	cmp	result1, #0 wz
2c4d0     B8 FF 9F AD |  if_e	jmp	#LR__4010
2c4d4                 | LR__4011
2c4d4                 | LR__4012
2c4d4     00 2C 0E F2 | 	cmp	local04, #0 wz
2c4d8     14 2D 02 A6 |  if_e	mov	local04, local02
2c4dc     16 15 02 F6 | 	mov	arg02, local04
2c4e0     06 14 06 F1 | 	add	arg02, #6
2c4e4     13 13 02 F6 | 	mov	arg01, local01
2c4e8     0A 15 E2 FA | 	rdword	arg02, arg02
2c4ec     06 12 06 F1 | 	add	arg01, #6
2c4f0     09 15 52 FC | 	wrword	arg02, arg01
2c4f4     13 15 0A F6 | 	mov	arg02, local01 wz
2c4f8     00 FA 05 A6 |  if_e	mov	result1, #0
2c4fc     14 15 82 51 |  if_ne	sub	arg02, local02
2c500     04 14 46 50 |  if_ne	shr	arg02, #4
2c504     0A FB 01 56 |  if_ne	mov	result1, arg02
2c508     16 15 02 F6 | 	mov	arg02, local04
2c50c     06 14 06 F1 | 	add	arg02, #6
2c510     0A FB 51 FC | 	wrword	result1, arg02
2c514     14 2D 0A F2 | 	cmp	local04, local02 wz
2c518     A4 00 90 AD |  if_e	jmp	#LR__4015
2c51c     16 13 02 F6 | 	mov	arg01, local04
2c520     09 2F EA FA | 	rdword	local05, arg01 wz
2c524     00 FA 05 A6 |  if_e	mov	result1, #0
2c528     04 2E 66 50 |  if_ne	shl	local05, #4
2c52c     17 13 02 51 |  if_ne	add	arg01, local05
2c530     09 FB 01 56 |  if_ne	mov	result1, arg01
2c534     13 FB 09 F2 | 	cmp	result1, local01 wz
2c538     84 00 90 5D |  if_ne	jmp	#LR__4014
2c53c     16 31 E2 FA | 	rdword	local06, local04
2c540     13 15 E2 FA | 	rdword	arg02, local01
2c544     0A 31 02 F1 | 	add	local06, arg02
2c548     16 31 52 FC | 	wrword	local06, local04
2c54c     13 31 02 F6 | 	mov	local06, local01
2c550     02 30 06 F1 | 	add	local06, #2
2c554     18 01 58 FC | 	wrword	#0, local06
2c558     13 13 02 F6 | 	mov	arg01, local01
2c55c     09 2F EA FA | 	rdword	local05, arg01 wz
2c560     00 FA 05 A6 |  if_e	mov	result1, #0
2c564     04 2E 66 50 |  if_ne	shl	local05, #4
2c568     17 13 02 51 |  if_ne	add	arg01, local05
2c56c     09 FB 01 56 |  if_ne	mov	result1, arg01
2c570     FD 30 02 F6 | 	mov	local06, result1
2c574     15 31 52 F2 | 	cmps	local06, local03 wc
2c578     20 00 90 3D |  if_ae	jmp	#LR__4013
2c57c     16 15 0A F6 | 	mov	arg02, local04 wz
2c580     00 FA 05 A6 |  if_e	mov	result1, #0
2c584     14 15 82 51 |  if_ne	sub	arg02, local02
2c588     04 14 46 50 |  if_ne	shr	arg02, #4
2c58c     0A FB 01 56 |  if_ne	mov	result1, arg02
2c590     18 15 02 F6 | 	mov	arg02, local06
2c594     04 14 06 F1 | 	add	arg02, #4
2c598     0A FB 51 FC | 	wrword	result1, arg02
2c59c                 | LR__4013
2c59c     13 15 02 F6 | 	mov	arg02, local01
2c5a0     06 14 06 F1 | 	add	arg02, #6
2c5a4     16 FD 01 F6 | 	mov	result2, local04
2c5a8     0A 15 E2 FA | 	rdword	arg02, arg02
2c5ac     06 FC 05 F1 | 	add	result2, #6
2c5b0     FE 14 52 FC | 	wrword	arg02, result2
2c5b4     06 26 06 F1 | 	add	local01, #6
2c5b8     13 01 58 FC | 	wrword	#0, local01
2c5bc     16 27 02 F6 | 	mov	local01, local04
2c5c0                 | LR__4014
2c5c0                 | LR__4015
2c5c0     13 13 02 F6 | 	mov	arg01, local01
2c5c4     09 2F EA FA | 	rdword	local05, arg01 wz
2c5c8     00 FA 05 A6 |  if_e	mov	result1, #0
2c5cc     04 2E 66 50 |  if_ne	shl	local05, #4
2c5d0     17 13 02 51 |  if_ne	add	arg01, local05
2c5d4     09 FB 01 56 |  if_ne	mov	result1, arg01
2c5d8     FD 14 0A F6 | 	mov	arg02, result1 wz
2c5dc     B8 00 90 AD |  if_e	jmp	#LR__4017
2c5e0     15 15 52 F2 | 	cmps	arg02, local03 wc
2c5e4     B0 00 90 3D |  if_ae	jmp	#LR__4017
2c5e8     0A 13 02 F6 | 	mov	arg01, arg02
2c5ec     00 FA 05 F6 | 	mov	result1, #0
2c5f0     02 12 06 F1 | 	add	arg01, #2
2c5f4     09 13 E2 FA | 	rdword	arg01, arg01
2c5f8     36 00 00 FF 
2c5fc     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2c600     01 FA 65 A6 |  if_e	neg	result1, #1
2c604     00 FA 0D F2 | 	cmp	result1, #0 wz
2c608     8C 00 90 AD |  if_e	jmp	#LR__4017
2c60c     13 2D 02 F6 | 	mov	local04, local01
2c610     16 31 E2 FA | 	rdword	local06, local04
2c614     0A 13 02 F6 | 	mov	arg01, arg02
2c618     09 27 E2 FA | 	rdword	local01, arg01
2c61c     13 31 02 F1 | 	add	local06, local01
2c620     16 31 52 FC | 	wrword	local06, local04
2c624     09 31 02 F6 | 	mov	local06, arg01
2c628     06 30 06 F1 | 	add	local06, #6
2c62c     16 27 02 F6 | 	mov	local01, local04
2c630     18 31 E2 FA | 	rdword	local06, local06
2c634     06 26 06 F1 | 	add	local01, #6
2c638     13 31 52 FC | 	wrword	local06, local01
2c63c     09 31 02 F6 | 	mov	local06, arg01
2c640     02 30 06 F1 | 	add	local06, #2
2c644     18 55 59 FC | 	wrword	#170, local06
2c648     09 31 02 F6 | 	mov	local06, arg01
2c64c     06 30 06 F1 | 	add	local06, #6
2c650     18 01 58 FC | 	wrword	#0, local06
2c654     09 2F EA FA | 	rdword	local05, arg01 wz
2c658     00 FA 05 A6 |  if_e	mov	result1, #0
2c65c     04 2E 66 50 |  if_ne	shl	local05, #4
2c660     17 13 02 51 |  if_ne	add	arg01, local05
2c664     09 FB 01 56 |  if_ne	mov	result1, arg01
2c668     FD 30 0A F6 | 	mov	local06, result1 wz
2c66c     28 00 90 AD |  if_e	jmp	#LR__4016
2c670     15 31 52 F2 | 	cmps	local06, local03 wc
2c674     20 00 90 3D |  if_ae	jmp	#LR__4016
2c678     16 15 0A F6 | 	mov	arg02, local04 wz
2c67c     00 FA 05 A6 |  if_e	mov	result1, #0
2c680     14 15 82 51 |  if_ne	sub	arg02, local02
2c684     04 14 46 50 |  if_ne	shr	arg02, #4
2c688     0A FB 01 56 |  if_ne	mov	result1, arg02
2c68c     18 2D 02 F6 | 	mov	local04, local06
2c690     04 2C 06 F1 | 	add	local04, #4
2c694     16 FB 51 FC | 	wrword	result1, local04
2c698                 | LR__4016
2c698                 | LR__4017
2c698     18 FB 01 F6 | 	mov	result1, local06
2c69c     A7 F0 03 F6 | 	mov	ptra, fp
2c6a0     B2 00 A0 FD | 	call	#popregs_
2c6a4                 | __system___gc_dofree_ret
2c6a4     2D 00 64 FD | 	ret
2c6a8                 | 
2c6a8                 | __system___gc_docollect
2c6a8     05 4A 05 F6 | 	mov	COUNT_, #5
2c6ac     A8 00 A0 FD | 	call	#pushregs_
2c6b0     B8 F9 BF FD | 	call	#__system___gc_ptrs
2c6b4     FE 26 02 F6 | 	mov	local01, result2
2c6b8     FD 28 02 F6 | 	mov	local02, result1
2c6bc     14 13 02 F6 | 	mov	arg01, local02
2c6c0     09 2B EA FA | 	rdword	local03, arg01 wz
2c6c4     00 FA 05 A6 |  if_e	mov	result1, #0
2c6c8     04 2A 66 50 |  if_ne	shl	local03, #4
2c6cc     15 13 02 51 |  if_ne	add	arg01, local03
2c6d0     09 FB 01 56 |  if_ne	mov	result1, arg01
2c6d4     FD 2C 0A F6 | 	mov	local04, result1 wz
2c6d8     00 FA 05 F6 | 	mov	result1, #0
2c6dc     01 FA 61 FD | 	cogid	result1
2c6e0     FD 2E 02 F6 | 	mov	local05, result1
2c6e4     48 00 90 AD |  if_e	jmp	#LR__4022
2c6e8     97 22 48 FB | 	callpa	#(@LR__4021-@LR__4020)>>2,fcache_load_ptr_
2c6ec                 | LR__4020
2c6ec     13 2D 52 F2 | 	cmps	local04, local01 wc
2c6f0     3C 00 90 3D |  if_ae	jmp	#LR__4022
2c6f4     16 15 02 F6 | 	mov	arg02, local04
2c6f8     02 14 06 F1 | 	add	arg02, #2
2c6fc     0A 15 E2 FA | 	rdword	arg02, arg02
2c700     20 14 26 F5 | 	andn	arg02, #32
2c704     16 13 02 F6 | 	mov	arg01, local04
2c708     02 12 06 F1 | 	add	arg01, #2
2c70c     09 15 52 FC | 	wrword	arg02, arg01
2c710     16 13 02 F6 | 	mov	arg01, local04
2c714     09 2B EA FA | 	rdword	local03, arg01 wz
2c718     00 FA 05 A6 |  if_e	mov	result1, #0
2c71c     04 2A 66 50 |  if_ne	shl	local03, #4
2c720     15 13 02 51 |  if_ne	add	arg01, local03
2c724     09 FB 01 56 |  if_ne	mov	result1, arg01
2c728     FD 2C 0A F6 | 	mov	local04, result1 wz
2c72c     BC FF 9F 5D |  if_ne	jmp	#LR__4020
2c730                 | LR__4021
2c730                 | LR__4022
2c730     00 2A 06 F6 | 	mov	local03, #0
2c734     00 12 06 F6 | 	mov	arg01, #0
2c738     B0 B9 BF FD | 	call	#__system____topofstack
2c73c     FD 14 02 F6 | 	mov	arg02, result1
2c740     15 13 02 F6 | 	mov	arg01, local03
2c744     90 00 B0 FD | 	call	#__system___gc_markhub
2c748     1C 01 B0 FD | 	call	#__system___gc_markcog
2c74c     14 13 02 F6 | 	mov	arg01, local02
2c750     09 2B EA FA | 	rdword	local03, arg01 wz
2c754     00 FA 05 A6 |  if_e	mov	result1, #0
2c758     04 2A 66 50 |  if_ne	shl	local03, #4
2c75c     15 13 02 51 |  if_ne	add	arg01, local03
2c760     09 FB 01 56 |  if_ne	mov	result1, arg01
2c764     FD 28 0A F6 | 	mov	local02, result1 wz
2c768     60 00 90 AD |  if_e	jmp	#LR__4026
2c76c                 | LR__4023
2c76c     14 2D 02 F6 | 	mov	local04, local02
2c770     16 13 02 F6 | 	mov	arg01, local04
2c774     09 2B EA FA | 	rdword	local03, arg01 wz
2c778     00 FA 05 A6 |  if_e	mov	result1, #0
2c77c     04 2A 66 50 |  if_ne	shl	local03, #4
2c780     15 13 02 51 |  if_ne	add	arg01, local03
2c784     09 FB 01 56 |  if_ne	mov	result1, arg01
2c788     FD 28 02 F6 | 	mov	local02, result1
2c78c     16 15 02 F6 | 	mov	arg02, local04
2c790     02 14 06 F1 | 	add	arg02, #2
2c794     0A 15 E2 FA | 	rdword	arg02, arg02
2c798     20 14 CE F7 | 	test	arg02, #32 wz
2c79c     10 14 CE A7 |  if_e	test	arg02, #16 wz
2c7a0     1C 00 90 5D |  if_ne	jmp	#LR__4025
2c7a4     0A 15 42 F8 | 	getnib	arg02, arg02, #0
2c7a8     17 15 0A F2 | 	cmp	arg02, local05 wz
2c7ac     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
2c7b0     0C 00 90 5D |  if_ne	jmp	#LR__4024
2c7b4     16 13 02 F6 | 	mov	arg01, local04
2c7b8     84 FC BF FD | 	call	#__system___gc_dofree
2c7bc     FD 28 02 F6 | 	mov	local02, result1
2c7c0                 | LR__4024
2c7c0                 | LR__4025
2c7c0     00 28 0E F2 | 	cmp	local02, #0 wz
2c7c4     13 29 52 52 |  if_ne	cmps	local02, local01 wc
2c7c8     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__4023
2c7cc                 | LR__4026
2c7cc     A7 F0 03 F6 | 	mov	ptra, fp
2c7d0     B2 00 A0 FD | 	call	#popregs_
2c7d4                 | __system___gc_docollect_ret
2c7d4     2D 00 64 FD | 	ret
2c7d8                 | 
2c7d8                 | __system___gc_markhub
2c7d8     04 4A 05 F6 | 	mov	COUNT_, #4
2c7dc     A8 00 A0 FD | 	call	#pushregs_
2c7e0     09 27 02 F6 | 	mov	local01, arg01
2c7e4     0A 29 02 F6 | 	mov	local02, arg02
2c7e8     80 F8 BF FD | 	call	#__system___gc_ptrs
2c7ec     FD 2A 02 F6 | 	mov	local03, result1
2c7f0     FE 2C 02 F6 | 	mov	local04, result2
2c7f4                 | LR__4030
2c7f4     14 27 52 F2 | 	cmps	local01, local02 wc
2c7f8     60 00 90 3D |  if_ae	jmp	#LR__4031
2c7fc     13 17 02 FB | 	rdlong	arg03, local01
2c800     04 26 06 F1 | 	add	local01, #4
2c804     16 15 02 F6 | 	mov	arg02, local04
2c808     15 13 02 F6 | 	mov	arg01, local03
2c80c     8C FB BF FD | 	call	#__system___gc_isvalidptr
2c810     FD 16 0A F6 | 	mov	arg03, result1 wz
2c814     DC FF 9F AD |  if_e	jmp	#LR__4030
2c818     0B 13 02 F6 | 	mov	arg01, arg03
2c81c     00 FA 05 F6 | 	mov	result1, #0
2c820     02 12 06 F1 | 	add	arg01, #2
2c824     09 13 E2 FA | 	rdword	arg01, arg01
2c828     36 00 00 FF 
2c82c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2c830     01 FA 65 A6 |  if_e	neg	result1, #1
2c834     00 FA 0D F2 | 	cmp	result1, #0 wz
2c838     B8 FF 9F 5D |  if_ne	jmp	#LR__4030
2c83c     0B FD 01 F6 | 	mov	result2, arg03
2c840     02 FC 05 F1 | 	add	result2, #2
2c844     FE FC E1 FA | 	rdword	result2, result2
2c848     0F FC 25 F5 | 	andn	result2, #15
2c84c     2E FC 45 F5 | 	or	result2, #46
2c850     02 16 06 F1 | 	add	arg03, #2
2c854     0B FD 51 FC | 	wrword	result2, arg03
2c858     98 FF 9F FD | 	jmp	#LR__4030
2c85c                 | LR__4031
2c85c     A7 F0 03 F6 | 	mov	ptra, fp
2c860     B2 00 A0 FD | 	call	#popregs_
2c864                 | __system___gc_markhub_ret
2c864     2D 00 64 FD | 	ret
2c868                 | 
2c868                 | __system___gc_markcog
2c868     04 4A 05 F6 | 	mov	COUNT_, #4
2c86c     A8 00 A0 FD | 	call	#pushregs_
2c870     F8 F7 BF FD | 	call	#__system___gc_ptrs
2c874     FD 26 02 F6 | 	mov	local01, result1
2c878     FE 28 02 F6 | 	mov	local02, result2
2c87c     EF 2B 06 F6 | 	mov	local03, #495
2c880                 | LR__4040
2c880                 | 	'.live	local03
2c880     00 2A 96 F9 | 	alts	local03, #0
2c884     15 2D 02 F6 | 	mov	local04, local03
2c888     13 13 02 F6 | 	mov	arg01, local01
2c88c     14 15 02 F6 | 	mov	arg02, local02
2c890     16 17 02 F6 | 	mov	arg03, local04
2c894     04 FB BF FD | 	call	#__system___gc_isvalidptr
2c898     00 FA 0D F2 | 	cmp	result1, #0 wz
2c89c     18 00 90 AD |  if_e	jmp	#LR__4041
2c8a0     FD 2C 02 F6 | 	mov	local04, result1
2c8a4     02 2C 06 F1 | 	add	local04, #2
2c8a8     16 2D E2 FA | 	rdword	local04, local04
2c8ac     20 2C 46 F5 | 	or	local04, #32
2c8b0     02 FA 05 F1 | 	add	result1, #2
2c8b4     FD 2C 52 FC | 	wrword	local04, result1
2c8b8                 | LR__4041
2c8b8     01 2A 86 F1 | 	sub	local03, #1
2c8bc     00 2A 56 F2 | 	cmps	local03, #0 wc
2c8c0     BC FF 9F 3D |  if_ae	jmp	#LR__4040
2c8c4     A7 F0 03 F6 | 	mov	ptra, fp
2c8c8     B2 00 A0 FD | 	call	#popregs_
2c8cc                 | __system___gc_markcog_ret
2c8cc     2D 00 64 FD | 	ret
2c8d0                 | 
2c8d0                 | __system__opendir
2c8d0     06 4A 05 F6 | 	mov	COUNT_, #6
2c8d4     A8 00 A0 FD | 	call	#pushregs_
2c8d8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2c8dc     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2c8e0     09 15 02 F6 | 	mov	arg02, arg01
2c8e4     13 13 02 F6 | 	mov	arg01, local01
2c8e8     00 16 06 F6 | 	mov	arg03, #0
2c8ec     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2c8f0     B8 BF BF FD | 	call	#__system____getvfsforfile
2c8f4     FD 28 0A F6 | 	mov	local02, result1 wz
2c8f8     10 00 90 AD |  if_e	jmp	#LR__4050
2c8fc     28 28 06 F1 | 	add	local02, #40
2c900     14 17 0A FB | 	rdlong	arg03, local02 wz
2c904     28 28 86 F1 | 	sub	local02, #40
2c908     14 00 90 5D |  if_ne	jmp	#LR__4051
2c90c                 | LR__4050
2c90c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c910     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2c914     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c918     00 FA 05 F6 | 	mov	result1, #0
2c91c     90 00 90 FD | 	jmp	#LR__4053
2c920                 | LR__4051
2c920     5C 12 06 F6 | 	mov	arg01, #92
2c924     10 14 06 F6 | 	mov	arg02, #16
2c928     C0 F9 BF FD | 	call	#__system___gc_doalloc
2c92c     FD 2A 0A F6 | 	mov	local03, result1 wz
2c930     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c934     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2c938     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c93c     00 FA 05 A6 |  if_e	mov	result1, #0
2c940     6C 00 90 AD |  if_e	jmp	#LR__4053
2c944     28 28 06 F1 | 	add	local02, #40
2c948     14 2D 02 FB | 	rdlong	local04, local02
2c94c     16 2F 02 F6 | 	mov	local05, local04
2c950     28 28 86 F1 | 	sub	local02, #40
2c954     13 2E 46 F7 | 	zerox	local05, #19
2c958     14 2C 46 F0 | 	shr	local04, #20
2c95c     02 2C 66 F0 | 	shl	local04, #2
2c960     ED 2C 02 F1 | 	add	local04, __methods__
2c964     16 2D 02 FB | 	rdlong	local04, local04
2c968     15 13 02 F6 | 	mov	arg01, local03
2c96c     13 15 02 F6 | 	mov	arg02, local01
2c970     F2 30 02 F6 | 	mov	local06, objptr
2c974     17 E5 01 F6 | 	mov	objptr, local05
2c978     2D 2C 62 FD | 	call	local04
2c97c     18 E5 01 F6 | 	mov	objptr, local06
2c980     FD 16 0A F6 | 	mov	arg03, result1 wz
2c984     20 00 90 AD |  if_e	jmp	#LR__4052
2c988     00 16 4E F2 | 	cmps	arg03, #0 wz
2c98c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c990     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
2c994     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c998     15 13 02 F6 | 	mov	arg01, local03
2c99c     58 FA BF FD | 	call	#__system___gc_free
2c9a0     00 FA 05 F6 | 	mov	result1, #0
2c9a4     08 00 90 FD | 	jmp	#LR__4053
2c9a8                 | LR__4052
2c9a8     15 29 62 FC | 	wrlong	local02, local03
2c9ac     15 FB 01 F6 | 	mov	result1, local03
2c9b0                 | LR__4053
2c9b0     A7 F0 03 F6 | 	mov	ptra, fp
2c9b4     B2 00 A0 FD | 	call	#popregs_
2c9b8                 | __system__opendir_ret
2c9b8     2D 00 64 FD | 	ret
2c9bc                 | 
2c9bc                 | __system__closedir
2c9bc     04 4A 05 F6 | 	mov	COUNT_, #4
2c9c0     A8 00 A0 FD | 	call	#pushregs_
2c9c4     09 27 02 F6 | 	mov	local01, arg01
2c9c8     13 13 02 FB | 	rdlong	arg01, local01
2c9cc     2C 12 06 F1 | 	add	arg01, #44
2c9d0     09 29 02 FB | 	rdlong	local02, arg01
2c9d4     14 2B 02 F6 | 	mov	local03, local02
2c9d8     13 2A 46 F7 | 	zerox	local03, #19
2c9dc     14 28 46 F0 | 	shr	local02, #20
2c9e0     02 28 66 F0 | 	shl	local02, #2
2c9e4     ED 28 02 F1 | 	add	local02, __methods__
2c9e8     14 29 02 FB | 	rdlong	local02, local02
2c9ec     13 13 02 F6 | 	mov	arg01, local01
2c9f0     F2 2C 02 F6 | 	mov	local04, objptr
2c9f4     15 E5 01 F6 | 	mov	objptr, local03
2c9f8     2D 28 62 FD | 	call	local02
2c9fc     16 E5 01 F6 | 	mov	objptr, local04
2ca00     FD 2C 02 F6 | 	mov	local04, result1
2ca04     13 13 02 F6 | 	mov	arg01, local01
2ca08     EC F9 BF FD | 	call	#__system___gc_free
2ca0c     00 2C 4E F2 | 	cmps	local04, #0 wz
2ca10     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2ca14     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
2ca18     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2ca1c     01 FA 65 56 |  if_ne	neg	result1, #1
2ca20     00 FA 05 A6 |  if_e	mov	result1, #0
2ca24     A7 F0 03 F6 | 	mov	ptra, fp
2ca28     B2 00 A0 FD | 	call	#popregs_
2ca2c                 | __system__closedir_ret
2ca2c     2D 00 64 FD | 	ret
2ca30                 | 
2ca30                 | __system__readdir
2ca30     04 4A 05 F6 | 	mov	COUNT_, #4
2ca34     A8 00 A0 FD | 	call	#pushregs_
2ca38     09 15 0A FB | 	rdlong	arg02, arg01 wz
2ca3c     08 12 06 F1 | 	add	arg01, #8
2ca40     09 27 02 F6 | 	mov	local01, arg01
2ca44     08 12 86 F1 | 	sub	arg01, #8
2ca48     00 FA 05 A6 |  if_e	mov	result1, #0
2ca4c     5C 00 90 AD |  if_e	jmp	#LR__4061
2ca50     30 14 06 F1 | 	add	arg02, #48
2ca54     0A 29 02 FB | 	rdlong	local02, arg02
2ca58     14 2B 02 F6 | 	mov	local03, local02
2ca5c     13 2A 46 F7 | 	zerox	local03, #19
2ca60     14 28 46 F0 | 	shr	local02, #20
2ca64     02 28 66 F0 | 	shl	local02, #2
2ca68     ED 28 02 F1 | 	add	local02, __methods__
2ca6c     14 29 02 FB | 	rdlong	local02, local02
2ca70     13 15 02 F6 | 	mov	arg02, local01
2ca74     F2 2C 02 F6 | 	mov	local04, objptr
2ca78     15 E5 01 F6 | 	mov	objptr, local03
2ca7c     2D 28 62 FD | 	call	local02
2ca80     16 E5 01 F6 | 	mov	objptr, local04
2ca84     00 FA 4D F2 | 	cmps	result1, #0 wz
2ca88     1C 00 90 AD |  if_e	jmp	#LR__4060
2ca8c     01 FA 55 F2 | 	cmps	result1, #1 wc
2ca90     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
2ca94     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2ca98     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
2ca9c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2caa0     00 FA 05 F6 | 	mov	result1, #0
2caa4     04 00 90 FD | 	jmp	#LR__4061
2caa8                 | LR__4060
2caa8     13 FB 01 F6 | 	mov	result1, local01
2caac                 | LR__4061
2caac     A7 F0 03 F6 | 	mov	ptra, fp
2cab0     B2 00 A0 FD | 	call	#popregs_
2cab4                 | __system__readdir_ret
2cab4     2D 00 64 FD | 	ret
2cab8                 | 
2cab8                 | __system___openraw
2cab8     15 4A 05 F6 | 	mov	COUNT_, #21
2cabc     A8 00 A0 FD | 	call	#pushregs_
2cac0     09 27 02 F6 | 	mov	local01, arg01
2cac4     0A 29 02 F6 | 	mov	local02, arg02
2cac8     0B 2B 02 F6 | 	mov	local03, arg03
2cacc     0C 2D 02 F6 | 	mov	local04, arg04
2cad0     04 2E 06 F6 | 	mov	local05, #4
2cad4     13 31 02 F6 | 	mov	local06, local01
2cad8     00 32 06 F6 | 	mov	local07, #0
2cadc     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2cae0     F3 34 02 F6 | 	mov	local08, ptr___system__dat__
2cae4     1A 13 02 F6 | 	mov	arg01, local08
2cae8     14 15 02 F6 | 	mov	arg02, local02
2caec     00 16 06 F6 | 	mov	arg03, #0
2caf0     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2caf4     B4 BD BF FD | 	call	#__system____getvfsforfile
2caf8     FD 36 0A F6 | 	mov	local09, result1 wz
2cafc     10 00 90 AD |  if_e	jmp	#LR__4070
2cb00     20 36 06 F1 | 	add	local09, #32
2cb04     1B FB 09 FB | 	rdlong	result1, local09 wz
2cb08     20 36 86 F1 | 	sub	local09, #32
2cb0c     14 00 90 5D |  if_ne	jmp	#LR__4071
2cb10                 | LR__4070
2cb10     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2cb14     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2cb18     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2cb1c     01 FA 65 F6 | 	neg	result1, #1
2cb20     8C 02 90 FD | 	jmp	#LR__4084
2cb24                 | LR__4071
2cb24     18 13 02 F6 | 	mov	arg01, local06
2cb28     00 14 06 F6 | 	mov	arg02, #0
2cb2c     34 16 06 F6 | 	mov	arg03, #52
2cb30     09 39 02 F6 | 	mov	local10, arg01
2cb34     98 00 A0 FD | 	call	#\builtin_bytefill_
2cb38     20 36 06 F1 | 	add	local09, #32
2cb3c     1B 3B 02 FB | 	rdlong	local11, local09
2cb40     1D 3D 02 F6 | 	mov	local12, local11
2cb44     1D 3F 02 F6 | 	mov	local13, local11
2cb48     20 36 86 F1 | 	sub	local09, #32
2cb4c     1F 41 02 F6 | 	mov	local14, local13
2cb50     13 3C 46 F7 | 	zerox	local12, #19
2cb54     14 40 46 F0 | 	shr	local14, #20
2cb58     02 40 66 F0 | 	shl	local14, #2
2cb5c     ED 40 02 F1 | 	add	local14, __methods__
2cb60     20 41 02 FB | 	rdlong	local14, local14
2cb64     18 43 02 F6 | 	mov	local15, local06
2cb68     1A 45 02 F6 | 	mov	local16, local08
2cb6c     15 47 02 F6 | 	mov	local17, local03
2cb70     21 13 02 F6 | 	mov	arg01, local15
2cb74     22 15 02 F6 | 	mov	arg02, local16
2cb78     23 17 02 F6 | 	mov	arg03, local17
2cb7c     F2 48 02 F6 | 	mov	local18, objptr
2cb80     1E E5 01 F6 | 	mov	objptr, local12
2cb84     2D 40 62 FD | 	call	local14
2cb88     24 E5 01 F6 | 	mov	objptr, local18
2cb8c     FD 4A 0A F6 | 	mov	local19, result1 wz
2cb90     04 2A CE 57 |  if_ne	test	local03, #4 wz
2cb94     58 00 90 AD |  if_e	jmp	#LR__4072
2cb98     24 36 06 F1 | 	add	local09, #36
2cb9c     1B 3B 02 FB | 	rdlong	local11, local09
2cba0     1D 3D 02 F6 | 	mov	local12, local11
2cba4     1D 3F 02 F6 | 	mov	local13, local11
2cba8     24 36 86 F1 | 	sub	local09, #36
2cbac     1F 41 02 F6 | 	mov	local14, local13
2cbb0     13 3C 46 F7 | 	zerox	local12, #19
2cbb4     14 40 46 F0 | 	shr	local14, #20
2cbb8     02 40 66 F0 | 	shl	local14, #2
2cbbc     ED 40 02 F1 | 	add	local14, __methods__
2cbc0     20 41 02 FB | 	rdlong	local14, local14
2cbc4     18 43 02 F6 | 	mov	local15, local06
2cbc8     1A 45 02 F6 | 	mov	local16, local08
2cbcc     16 47 02 F6 | 	mov	local17, local04
2cbd0     21 13 02 F6 | 	mov	arg01, local15
2cbd4     22 15 02 F6 | 	mov	arg02, local16
2cbd8     23 17 02 F6 | 	mov	arg03, local17
2cbdc     F2 48 02 F6 | 	mov	local18, objptr
2cbe0     1E E5 01 F6 | 	mov	objptr, local12
2cbe4     2D 40 62 FD | 	call	local14
2cbe8     24 E5 01 F6 | 	mov	objptr, local18
2cbec     FD 4A 02 F6 | 	mov	local19, result1
2cbf0                 | LR__4072
2cbf0     00 4A 0E F2 | 	cmp	local19, #0 wz
2cbf4     8C 01 90 5D |  if_ne	jmp	#LR__4082
2cbf8     15 4D 02 F6 | 	mov	local20, local03
2cbfc     03 4C 0E F5 | 	and	local20, #3 wz
2cc00     02 2E 46 55 |  if_ne	or	local05, #2
2cc04     01 4C 0E F2 | 	cmp	local20, #1 wz
2cc08     01 2E 46 55 |  if_ne	or	local05, #1
2cc0c     20 2A CE F7 | 	test	local03, #32 wz
2cc10     C0 2E 46 55 |  if_ne	or	local05, #192
2cc14     08 30 06 F1 | 	add	local06, #8
2cc18     18 2F 62 FC | 	wrlong	local05, local06
2cc1c     0C 30 06 F1 | 	add	local06, #12
2cc20     18 4F 0A FB | 	rdlong	local21, local06 wz
2cc24     14 30 86 F1 | 	sub	local06, #20
2cc28     18 00 90 5D |  if_ne	jmp	#LR__4073
2cc2c     04 36 06 F1 | 	add	local09, #4
2cc30     1B 4F 02 FB | 	rdlong	local21, local09
2cc34     04 36 86 F1 | 	sub	local09, #4
2cc38     14 30 06 F1 | 	add	local06, #20
2cc3c     18 4F 62 FC | 	wrlong	local21, local06
2cc40     14 30 86 F1 | 	sub	local06, #20
2cc44                 | LR__4073
2cc44     18 30 06 F1 | 	add	local06, #24
2cc48     18 4F 0A FB | 	rdlong	local21, local06 wz
2cc4c     18 30 86 F1 | 	sub	local06, #24
2cc50     18 00 90 5D |  if_ne	jmp	#LR__4074
2cc54     08 36 06 F1 | 	add	local09, #8
2cc58     1B 4F 02 FB | 	rdlong	local21, local09
2cc5c     08 36 86 F1 | 	sub	local09, #8
2cc60     18 30 06 F1 | 	add	local06, #24
2cc64     18 4F 62 FC | 	wrlong	local21, local06
2cc68     18 30 86 F1 | 	sub	local06, #24
2cc6c                 | LR__4074
2cc6c     24 30 06 F1 | 	add	local06, #36
2cc70     18 4F 0A FB | 	rdlong	local21, local06 wz
2cc74     24 30 86 F1 | 	sub	local06, #36
2cc78     1B 4F 02 AB |  if_e	rdlong	local21, local09
2cc7c     24 30 06 A1 |  if_e	add	local06, #36
2cc80     18 4F 62 AC |  if_e	wrlong	local21, local06
2cc84     24 30 86 A1 |  if_e	sub	local06, #36
2cc88     28 30 06 F1 | 	add	local06, #40
2cc8c     18 4F 0A FB | 	rdlong	local21, local06 wz
2cc90     28 30 86 F1 | 	sub	local06, #40
2cc94     18 00 90 5D |  if_ne	jmp	#LR__4075
2cc98     10 36 06 F1 | 	add	local09, #16
2cc9c     1B 4F 02 FB | 	rdlong	local21, local09
2cca0     10 36 86 F1 | 	sub	local09, #16
2cca4     28 30 06 F1 | 	add	local06, #40
2cca8     18 4F 62 FC | 	wrlong	local21, local06
2ccac     28 30 86 F1 | 	sub	local06, #40
2ccb0                 | LR__4075
2ccb0     30 30 06 F1 | 	add	local06, #48
2ccb4     18 4F 0A FB | 	rdlong	local21, local06 wz
2ccb8     30 30 86 F1 | 	sub	local06, #48
2ccbc     18 00 90 5D |  if_ne	jmp	#LR__4076
2ccc0     0C 36 06 F1 | 	add	local09, #12
2ccc4     1B 4F 02 FB | 	rdlong	local21, local09
2ccc8     0C 36 86 F1 | 	sub	local09, #12
2cccc     30 30 06 F1 | 	add	local06, #48
2ccd0     18 4F 62 FC | 	wrlong	local21, local06
2ccd4     30 30 86 F1 | 	sub	local06, #48
2ccd8                 | LR__4076
2ccd8     1C 30 06 F1 | 	add	local06, #28
2ccdc     18 4F 0A FB | 	rdlong	local21, local06 wz
2cce0     1C 30 86 F1 | 	sub	local06, #28
2cce4     1C 00 90 5D |  if_ne	jmp	#LR__4077
2cce8     01 32 06 F6 | 	mov	local07, #1
2ccec     F2 12 02 F6 | 	mov	arg01, objptr
2ccf0     00 A8 05 FF 
2ccf4     00 12 46 F5 | 	or	arg01, ##189792256
2ccf8     1C 30 06 F1 | 	add	local06, #28
2ccfc     18 13 62 FC | 	wrlong	arg01, local06
2cd00     1C 30 86 F1 | 	sub	local06, #28
2cd04                 | LR__4077
2cd04     20 30 06 F1 | 	add	local06, #32
2cd08     18 4F 0A FB | 	rdlong	local21, local06 wz
2cd0c     20 30 86 F1 | 	sub	local06, #32
2cd10     1C 00 90 5D |  if_ne	jmp	#LR__4078
2cd14     01 32 06 F6 | 	mov	local07, #1
2cd18     F2 12 02 F6 | 	mov	arg01, objptr
2cd1c     00 B0 05 FF 
2cd20     00 12 46 F5 | 	or	arg01, ##190840832
2cd24     20 30 06 F1 | 	add	local06, #32
2cd28     18 13 62 FC | 	wrlong	arg01, local06
2cd2c     20 30 86 F1 | 	sub	local06, #32
2cd30                 | LR__4078
2cd30     2C 30 06 F1 | 	add	local06, #44
2cd34     18 4F 0A FB | 	rdlong	local21, local06 wz
2cd38     2C 30 86 F1 | 	sub	local06, #44
2cd3c     44 00 90 5D |  if_ne	jmp	#LR__4081
2cd40     14 36 06 F1 | 	add	local09, #20
2cd44     1B 4F 0A FB | 	rdlong	local21, local09 wz
2cd48     14 36 86 F1 | 	sub	local09, #20
2cd4c     18 00 90 AD |  if_e	jmp	#LR__4079
2cd50     14 36 06 F1 | 	add	local09, #20
2cd54     1B 4F 02 FB | 	rdlong	local21, local09
2cd58     2C 30 06 F1 | 	add	local06, #44
2cd5c     18 4F 62 FC | 	wrlong	local21, local06
2cd60     2C 30 86 F1 | 	sub	local06, #44
2cd64     1C 00 90 FD | 	jmp	#LR__4080
2cd68                 | LR__4079
2cd68     01 32 06 F6 | 	mov	local07, #1
2cd6c     F2 12 02 F6 | 	mov	arg01, objptr
2cd70     00 B8 05 FF 
2cd74     00 12 46 F5 | 	or	arg01, ##191889408
2cd78     2C 30 06 F1 | 	add	local06, #44
2cd7c     18 13 62 FC | 	wrlong	arg01, local06
2cd80     2C 30 86 F1 | 	sub	local06, #44
2cd84                 | LR__4080
2cd84                 | LR__4081
2cd84                 | LR__4082
2cd84     00 32 0E F2 | 	cmp	local07, #0 wz
2cd88     18 13 02 56 |  if_ne	mov	arg01, local06
2cd8c     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
2cd90     00 4A 0E F2 | 	cmp	local19, #0 wz
2cd94     00 12 06 A6 |  if_e	mov	arg01, #0
2cd98     10 00 90 5D |  if_ne	jmp	#LR__4083
2cd9c     00 12 4E F2 | 	cmps	arg01, #0 wz
2cda0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2cda4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2cda8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2cdac                 | LR__4083
2cdac     25 FB 01 F6 | 	mov	result1, local19
2cdb0                 | LR__4084
2cdb0     A7 F0 03 F6 | 	mov	ptra, fp
2cdb4     B2 00 A0 FD | 	call	#popregs_
2cdb8                 | __system___openraw_ret
2cdb8     2D 00 64 FD | 	ret
2cdbc                 | 
2cdbc                 | __system___closeraw
2cdbc     05 4A 05 F6 | 	mov	COUNT_, #5
2cdc0     A8 00 A0 FD | 	call	#pushregs_
2cdc4     09 27 02 F6 | 	mov	local01, arg01
2cdc8     00 28 06 F6 | 	mov	local02, #0
2cdcc     08 26 06 F1 | 	add	local01, #8
2cdd0     13 FB 09 FB | 	rdlong	result1, local01 wz
2cdd4     08 26 86 F1 | 	sub	local01, #8
2cdd8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cddc     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2cde0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cde4     01 FA 65 A6 |  if_e	neg	result1, #1
2cde8     A8 00 90 AD |  if_e	jmp	#LR__4092
2cdec     2C 26 06 F1 | 	add	local01, #44
2cdf0     13 FB 09 FB | 	rdlong	result1, local01 wz
2cdf4     2C 26 86 F1 | 	sub	local01, #44
2cdf8     38 00 90 AD |  if_e	jmp	#LR__4090
2cdfc     2C 26 06 F1 | 	add	local01, #44
2ce00     13 2B 02 FB | 	rdlong	local03, local01
2ce04     15 2D 02 F6 | 	mov	local04, local03
2ce08     2C 26 86 F1 | 	sub	local01, #44
2ce0c     13 2C 46 F7 | 	zerox	local04, #19
2ce10     14 2A 46 F0 | 	shr	local03, #20
2ce14     02 2A 66 F0 | 	shl	local03, #2
2ce18     ED 2A 02 F1 | 	add	local03, __methods__
2ce1c     15 2B 02 FB | 	rdlong	local03, local03
2ce20     13 13 02 F6 | 	mov	arg01, local01
2ce24     F2 2E 02 F6 | 	mov	local05, objptr
2ce28     16 E5 01 F6 | 	mov	objptr, local04
2ce2c     2D 2A 62 FD | 	call	local03
2ce30     17 E5 01 F6 | 	mov	objptr, local05
2ce34                 | LR__4090
2ce34     24 26 06 F1 | 	add	local01, #36
2ce38     13 2F 0A FB | 	rdlong	local05, local01 wz
2ce3c     24 26 86 F1 | 	sub	local01, #36
2ce40     3C 00 90 AD |  if_e	jmp	#LR__4091
2ce44     24 26 06 F1 | 	add	local01, #36
2ce48     13 2B 02 FB | 	rdlong	local03, local01
2ce4c     15 2D 02 F6 | 	mov	local04, local03
2ce50     24 26 86 F1 | 	sub	local01, #36
2ce54     13 2C 46 F7 | 	zerox	local04, #19
2ce58     14 2A 46 F0 | 	shr	local03, #20
2ce5c     02 2A 66 F0 | 	shl	local03, #2
2ce60     ED 2A 02 F1 | 	add	local03, __methods__
2ce64     15 2B 02 FB | 	rdlong	local03, local03
2ce68     13 13 02 F6 | 	mov	arg01, local01
2ce6c     F2 2E 02 F6 | 	mov	local05, objptr
2ce70     16 E5 01 F6 | 	mov	objptr, local04
2ce74     2D 2A 62 FD | 	call	local03
2ce78     17 E5 01 F6 | 	mov	objptr, local05
2ce7c     FD 28 02 F6 | 	mov	local02, result1
2ce80                 | LR__4091
2ce80     13 13 02 F6 | 	mov	arg01, local01
2ce84     00 14 06 F6 | 	mov	arg02, #0
2ce88     34 16 06 F6 | 	mov	arg03, #52
2ce8c     98 00 A0 FD | 	call	#\builtin_bytefill_
2ce90     14 FB 01 F6 | 	mov	result1, local02
2ce94                 | LR__4092
2ce94     A7 F0 03 F6 | 	mov	ptra, fp
2ce98     B2 00 A0 FD | 	call	#popregs_
2ce9c                 | __system___closeraw_ret
2ce9c     2D 00 64 FD | 	ret
2cea0                 | 
2cea0                 | __system___vfs_open_sdcardx
2cea0     0B 4A 05 F6 | 	mov	COUNT_, #11
2cea4     A8 00 A0 FD | 	call	#pushregs_
2cea8     09 2B 02 F6 | 	mov	local03, arg01
2ceac     0A 2D 02 F6 | 	mov	local04, arg02
2ceb0     0B 2F 02 F6 | 	mov	local05, arg03
2ceb4     0C 31 02 F6 | 	mov	local06, arg04
2ceb8     01 00 00 FF 
2cebc     24 12 06 F6 | 	mov	arg01, ##548
2cec0     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
2cec4     FD 32 02 F6 | 	mov	local07, result1
2cec8     01 00 00 FF 
2cecc     34 12 06 F6 | 	mov	arg01, ##564
2ced0     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
2ced4     FD 34 02 F6 | 	mov	local08, result1
2ced8     15 19 02 F6 | 	mov	arg04, local03
2cedc     1F 18 C6 F0 | 	sar	arg04, #31
2cee0     15 17 02 F6 | 	mov	arg03, local03
2cee4     01 12 06 F6 | 	mov	arg01, #1
2cee8     00 14 06 F6 | 	mov	arg02, #0
2ceec     E8 DB BF FD | 	call	#__system___int64_shl
2cef0     FD 26 02 F6 | 	mov	local01, result1
2cef4     FE 36 02 F6 | 	mov	local09, result2
2cef8     16 19 02 F6 | 	mov	arg04, local04
2cefc     1F 18 C6 F0 | 	sar	arg04, #31
2cf00     16 17 02 F6 | 	mov	arg03, local04
2cf04     01 12 06 F6 | 	mov	arg01, #1
2cf08     00 14 06 F6 | 	mov	arg02, #0
2cf0c     C8 DB BF FD | 	call	#__system___int64_shl
2cf10     FD 26 42 F5 | 	or	local01, result1
2cf14     FE 36 42 F5 | 	or	local09, result2
2cf18     17 19 02 F6 | 	mov	arg04, local05
2cf1c     1F 18 C6 F0 | 	sar	arg04, #31
2cf20     17 17 02 F6 | 	mov	arg03, local05
2cf24     01 12 06 F6 | 	mov	arg01, #1
2cf28     00 14 06 F6 | 	mov	arg02, #0
2cf2c     A8 DB BF FD | 	call	#__system___int64_shl
2cf30     FD 26 42 F5 | 	or	local01, result1
2cf34     FE 36 42 F5 | 	or	local09, result2
2cf38     18 19 02 F6 | 	mov	arg04, local06
2cf3c     1F 18 C6 F0 | 	sar	arg04, #31
2cf40     18 17 02 F6 | 	mov	arg03, local06
2cf44     01 12 06 F6 | 	mov	arg01, #1
2cf48     00 14 06 F6 | 	mov	arg02, #0
2cf4c     88 DB BF FD | 	call	#__system___int64_shl
2cf50     1B 15 02 F6 | 	mov	arg02, local09
2cf54     FD 26 42 F5 | 	or	local01, result1
2cf58     0A FD 41 F5 | 	or	result2, arg02
2cf5c     FE 28 02 F6 | 	mov	local02, result2
2cf60     13 13 02 F6 | 	mov	arg01, local01
2cf64     14 15 02 F6 | 	mov	arg02, local02
2cf68     A4 DB BF FD | 	call	#__system___usepins
2cf6c     00 FA 0D F2 | 	cmp	result1, #0 wz
2cf70     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cf74     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
2cf78     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cf7c     00 FA 05 A6 |  if_e	mov	result1, #0
2cf80     B4 00 90 AD |  if_e	jmp	#LR__4102
2cf84     13 39 02 F6 | 	mov	local10, local01
2cf88     14 37 02 F6 | 	mov	local09, local02
2cf8c     01 00 00 FF 
2cf90     08 32 06 F1 | 	add	local07, ##520
2cf94     19 39 62 FC | 	wrlong	local10, local07
2cf98     04 32 06 F1 | 	add	local07, #4
2cf9c     19 37 62 FC | 	wrlong	local09, local07
2cfa0     01 00 00 FF 
2cfa4     0C 32 86 F1 | 	sub	local07, ##524
2cfa8     18 1B 02 F6 | 	mov	arg05, local06
2cfac     00 12 06 F6 | 	mov	arg01, #0
2cfb0     15 15 02 F6 | 	mov	arg02, local03
2cfb4     16 17 02 F6 | 	mov	arg03, local04
2cfb8     17 19 02 F6 | 	mov	arg04, local05
2cfbc     F2 38 02 F6 | 	mov	local10, objptr
2cfc0     19 E5 01 F6 | 	mov	objptr, local07
2cfc4     8C 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
2cfc8     1C E5 01 F6 | 	mov	objptr, local10
2cfcc     FD 3A 0A F6 | 	mov	local11, result1 wz
2cfd0     24 00 90 5D |  if_ne	jmp	#LR__4100
2cfd4     BE 01 00 FF 
2cfd8     9A 14 06 F6 | 	mov	arg02, ##@LR__5527
2cfdc     1A 13 02 F6 | 	mov	arg01, local08
2cfe0     00 16 06 F6 | 	mov	arg03, #0
2cfe4     F2 3A 02 F6 | 	mov	local11, objptr
2cfe8     19 E5 01 F6 | 	mov	objptr, local07
2cfec     BC 60 B0 FD | 	call	#_fatfs_cc_f_mount
2cff0     1D E5 01 F6 | 	mov	objptr, local11
2cff4     FD 3A 02 F6 | 	mov	local11, result1
2cff8                 | LR__4100
2cff8     00 3A 0E F2 | 	cmp	local11, #0 wz
2cffc     24 00 90 AD |  if_e	jmp	#LR__4101
2d000     13 13 02 F6 | 	mov	arg01, local01
2d004     14 15 02 F6 | 	mov	arg02, local02
2d008     58 DB BF FD | 	call	#__system___freepins
2d00c     1D 13 6A F6 | 	neg	arg01, local11 wz
2d010     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d014     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2d018     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d01c     00 FA 05 F6 | 	mov	result1, #0
2d020     14 00 90 FD | 	jmp	#LR__4102
2d024                 | LR__4101
2d024     19 13 02 F6 | 	mov	arg01, local07
2d028     F2 3A 02 F6 | 	mov	local11, objptr
2d02c     19 E5 01 F6 | 	mov	objptr, local07
2d030     58 9D B0 FD | 	call	#_fatfs_cc_get_vfs
2d034     1D E5 01 F6 | 	mov	objptr, local11
2d038                 | LR__4102
2d038     A7 F0 03 F6 | 	mov	ptra, fp
2d03c     B2 00 A0 FD | 	call	#popregs_
2d040                 | __system___vfs_open_sdcardx_ret
2d040     2D 00 64 FD | 	ret
2d044                 | 
2d044                 | __system____default_getc
2d044     03 4A 05 F6 | 	mov	COUNT_, #3
2d048     A8 00 A0 FD | 	call	#pushregs_
2d04c     09 27 02 F6 | 	mov	local01, arg01
2d050     13 29 02 FB | 	rdlong	local02, local01
2d054     08 28 06 F1 | 	add	local02, #8
2d058     14 2B 02 FB | 	rdlong	local03, local02
2d05c     02 2A CE F7 | 	test	local03, #2 wz
2d060     13 13 02 56 |  if_ne	mov	arg01, local01
2d064     00 01 B0 5D |  if_ne	call	#__system____default_flush
2d068     14 2B 02 FB | 	rdlong	local03, local02
2d06c     01 2A 46 F5 | 	or	local03, #1
2d070     14 2B 62 FC | 	wrlong	local03, local02
2d074     08 28 86 F1 | 	sub	local02, #8
2d078     14 2B 0A FB | 	rdlong	local03, local02 wz
2d07c     0C 00 90 5D |  if_ne	jmp	#LR__4110
2d080     13 13 02 F6 | 	mov	arg01, local01
2d084     70 18 B0 FD | 	call	#__system____default_filbuf
2d088     FD 2A 02 F6 | 	mov	local03, result1
2d08c                 | LR__4110
2d08c     01 2A 56 F2 | 	cmps	local03, #1 wc
2d090     01 FA 65 C6 |  if_b	neg	result1, #1
2d094     1C 00 90 CD |  if_b	jmp	#LR__4111
2d098     01 2A 86 F1 | 	sub	local03, #1
2d09c     14 2B 62 FC | 	wrlong	local03, local02
2d0a0     04 28 06 F1 | 	add	local02, #4
2d0a4     14 2B 02 FB | 	rdlong	local03, local02
2d0a8     15 FB C1 FA | 	rdbyte	result1, local03
2d0ac     01 2A 06 F1 | 	add	local03, #1
2d0b0     14 2B 62 FC | 	wrlong	local03, local02
2d0b4                 | LR__4111
2d0b4     A7 F0 03 F6 | 	mov	ptra, fp
2d0b8     B2 00 A0 FD | 	call	#popregs_
2d0bc                 | __system____default_getc_ret
2d0bc     2D 00 64 FD | 	ret
2d0c0                 | 
2d0c0                 | __system____default_putc
2d0c0     06 4A 05 F6 | 	mov	COUNT_, #6
2d0c4     A8 00 A0 FD | 	call	#pushregs_
2d0c8     09 27 02 F6 | 	mov	local01, arg01
2d0cc     0A 29 02 F6 | 	mov	local02, arg02
2d0d0     14 2B 02 FB | 	rdlong	local03, local02
2d0d4     08 2A 06 F1 | 	add	local03, #8
2d0d8     15 FB 01 FB | 	rdlong	result1, local03
2d0dc     01 FA CD F7 | 	test	result1, #1 wz
2d0e0     14 13 02 56 |  if_ne	mov	arg01, local02
2d0e4     80 00 B0 5D |  if_ne	call	#__system____default_flush
2d0e8     15 2D 02 FB | 	rdlong	local04, local03
2d0ec     02 2C 46 F5 | 	or	local04, #2
2d0f0     15 2D 62 FC | 	wrlong	local04, local03
2d0f4     08 2A 86 F1 | 	sub	local03, #8
2d0f8     15 2F 02 FB | 	rdlong	local05, local03
2d0fc     10 2A 06 F1 | 	add	local03, #16
2d100     15 15 02 FB | 	rdlong	arg02, local03
2d104     10 2A 86 F1 | 	sub	local03, #16
2d108     17 FB 01 F6 | 	mov	result1, local05
2d10c     0A FB 01 F1 | 	add	result1, arg02
2d110     FD 26 42 FC | 	wrbyte	local01, result1
2d114     13 27 E2 F8 | 	getbyte	local01, local01, #0
2d118     01 2E 06 F1 | 	add	local05, #1
2d11c     15 2F 62 FC | 	wrlong	local05, local03
2d120     06 28 06 F1 | 	add	local02, #6
2d124     14 31 EA FA | 	rdword	local06, local02 wz
2d128     06 28 86 F1 | 	sub	local02, #6
2d12c     0C 2A 06 51 |  if_ne	add	local03, #12
2d130     15 2D 02 5B |  if_ne	rdlong	local04, local03
2d134     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
2d138     0C 00 90 AD |  if_e	jmp	#LR__4120
2d13c     0A 26 0E F2 | 	cmp	local01, #10 wz
2d140     01 30 0E A2 |  if_e	cmp	local06, #1 wz
2d144     10 00 90 5D |  if_ne	jmp	#LR__4121
2d148                 | LR__4120
2d148     14 13 02 F6 | 	mov	arg01, local02
2d14c     18 00 B0 FD | 	call	#__system____default_flush
2d150     00 FA 0D F2 | 	cmp	result1, #0 wz
2d154     01 26 66 56 |  if_ne	neg	local01, #1
2d158                 | LR__4121
2d158     13 FB 01 F6 | 	mov	result1, local01
2d15c     A7 F0 03 F6 | 	mov	ptra, fp
2d160     B2 00 A0 FD | 	call	#popregs_
2d164                 | __system____default_putc_ret
2d164     2D 00 64 FD | 	ret
2d168                 | 
2d168                 | __system____default_flush
2d168     06 4A 05 F6 | 	mov	COUNT_, #6
2d16c     A8 00 A0 FD | 	call	#pushregs_
2d170     09 27 02 F6 | 	mov	local01, arg01
2d174     13 29 02 FB | 	rdlong	local02, local01
2d178     14 2B 02 FB | 	rdlong	local03, local02
2d17c     08 28 06 F1 | 	add	local02, #8
2d180     14 FB 01 FB | 	rdlong	result1, local02
2d184     08 28 86 F1 | 	sub	local02, #8
2d188     02 FA CD F7 | 	test	result1, #2 wz
2d18c     D0 00 90 AD |  if_e	jmp	#LR__4132
2d190     01 2A 56 F2 | 	cmps	local03, #1 wc
2d194     20 01 90 CD |  if_b	jmp	#LR__4134
2d198     08 26 06 F1 | 	add	local01, #8
2d19c     13 FB 01 FB | 	rdlong	result1, local01
2d1a0     08 26 86 F1 | 	sub	local01, #8
2d1a4     40 FA CD F7 | 	test	result1, #64 wz
2d1a8     68 00 90 AD |  if_e	jmp	#LR__4131
2d1ac     08 26 06 F1 | 	add	local01, #8
2d1b0     13 17 02 FB | 	rdlong	arg03, local01
2d1b4     08 26 86 F1 | 	sub	local01, #8
2d1b8     80 16 CE F7 | 	test	arg03, #128 wz
2d1bc     54 00 90 AD |  if_e	jmp	#LR__4130
2d1c0     30 26 06 F1 | 	add	local01, #48
2d1c4     13 2D 02 FB | 	rdlong	local04, local01
2d1c8     16 2F 02 F6 | 	mov	local05, local04
2d1cc     30 26 86 F1 | 	sub	local01, #48
2d1d0     13 2E 46 F7 | 	zerox	local05, #19
2d1d4     14 2C 46 F0 | 	shr	local04, #20
2d1d8     02 2C 66 F0 | 	shl	local04, #2
2d1dc     ED 2C 02 F1 | 	add	local04, __methods__
2d1e0     16 2D 02 FB | 	rdlong	local04, local04
2d1e4     13 13 02 F6 | 	mov	arg01, local01
2d1e8     00 14 06 F6 | 	mov	arg02, #0
2d1ec     02 16 06 F6 | 	mov	arg03, #2
2d1f0     F2 30 02 F6 | 	mov	local06, objptr
2d1f4     17 E5 01 F6 | 	mov	objptr, local05
2d1f8     2D 2C 62 FD | 	call	local04
2d1fc     18 E5 01 F6 | 	mov	objptr, local06
2d200     08 26 06 F1 | 	add	local01, #8
2d204     13 31 02 FB | 	rdlong	local06, local01
2d208     80 30 26 F5 | 	andn	local06, #128
2d20c     13 31 62 FC | 	wrlong	local06, local01
2d210     08 26 86 F1 | 	sub	local01, #8
2d214                 | LR__4130
2d214                 | LR__4131
2d214     18 26 06 F1 | 	add	local01, #24
2d218     13 2D 02 FB | 	rdlong	local04, local01
2d21c     16 2F 02 F6 | 	mov	local05, local04
2d220     18 26 86 F1 | 	sub	local01, #24
2d224     13 2E 46 F7 | 	zerox	local05, #19
2d228     14 2C 46 F0 | 	shr	local04, #20
2d22c     02 2C 66 F0 | 	shl	local04, #2
2d230     ED 2C 02 F1 | 	add	local04, __methods__
2d234     16 2D 02 FB | 	rdlong	local04, local04
2d238     10 28 06 F1 | 	add	local02, #16
2d23c     14 15 02 FB | 	rdlong	arg02, local02
2d240     10 28 86 F1 | 	sub	local02, #16
2d244     13 13 02 F6 | 	mov	arg01, local01
2d248     15 17 02 F6 | 	mov	arg03, local03
2d24c     F2 30 02 F6 | 	mov	local06, objptr
2d250     17 E5 01 F6 | 	mov	objptr, local05
2d254     2D 2C 62 FD | 	call	local04
2d258     18 E5 01 F6 | 	mov	objptr, local06
2d25c     58 00 90 FD | 	jmp	#LR__4134
2d260                 | LR__4132
2d260     08 28 06 F1 | 	add	local02, #8
2d264     14 31 02 FB | 	rdlong	local06, local02
2d268     08 28 86 F1 | 	sub	local02, #8
2d26c     01 30 CE F7 | 	test	local06, #1 wz
2d270     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2d274     40 00 90 AD |  if_e	jmp	#LR__4133
2d278     30 26 06 F1 | 	add	local01, #48
2d27c     13 2D 02 FB | 	rdlong	local04, local01
2d280     16 2F 02 F6 | 	mov	local05, local04
2d284     30 26 86 F1 | 	sub	local01, #48
2d288     13 2E 46 F7 | 	zerox	local05, #19
2d28c     14 2C 46 F0 | 	shr	local04, #20
2d290     02 2C 66 F0 | 	shl	local04, #2
2d294     ED 2C 02 F1 | 	add	local04, __methods__
2d298     16 2D 02 FB | 	rdlong	local04, local04
2d29c     13 13 02 F6 | 	mov	arg01, local01
2d2a0     15 15 62 F6 | 	neg	arg02, local03
2d2a4     01 16 06 F6 | 	mov	arg03, #1
2d2a8     F2 30 02 F6 | 	mov	local06, objptr
2d2ac     17 E5 01 F6 | 	mov	objptr, local05
2d2b0     2D 2C 62 FD | 	call	local04
2d2b4     18 E5 01 F6 | 	mov	objptr, local06
2d2b8                 | LR__4133
2d2b8                 | LR__4134
2d2b8     14 01 68 FC | 	wrlong	#0, local02
2d2bc     04 28 06 F1 | 	add	local02, #4
2d2c0     14 01 68 FC | 	wrlong	#0, local02
2d2c4     04 28 06 F1 | 	add	local02, #4
2d2c8     14 01 68 FC | 	wrlong	#0, local02
2d2cc     00 FA 05 F6 | 	mov	result1, #0
2d2d0     A7 F0 03 F6 | 	mov	ptra, fp
2d2d4     B2 00 A0 FD | 	call	#popregs_
2d2d8                 | __system____default_flush_ret
2d2d8     2D 00 64 FD | 	ret
2d2dc                 | 
2d2dc                 | __system____default_buffer_init
2d2dc     02 4A 05 F6 | 	mov	COUNT_, #2
2d2e0     A8 00 A0 FD | 	call	#pushregs_
2d2e4     09 27 02 F6 | 	mov	local01, arg01
2d2e8     13 29 02 FB | 	rdlong	local02, local01
2d2ec     13 13 02 F6 | 	mov	arg01, local01
2d2f0     34 03 B0 FD | 	call	#__system___isatty
2d2f4     00 FA 0D F2 | 	cmp	result1, #0 wz
2d2f8     06 26 06 51 |  if_ne	add	local01, #6
2d2fc     13 0B 58 5C |  if_ne	wrword	#5, local01
2d300     06 26 06 A1 |  if_e	add	local01, #6
2d304     13 0D 58 AC |  if_e	wrword	#6, local01
2d308     14 28 06 F1 | 	add	local02, #20
2d30c     14 27 02 F6 | 	mov	local01, local02
2d310     04 28 86 F1 | 	sub	local02, #4
2d314     14 27 62 FC | 	wrlong	local01, local02
2d318     04 28 86 F1 | 	sub	local02, #4
2d31c     02 00 80 FF 
2d320     14 01 68 FC | 	wrlong	##1024, local02
2d324     00 FA 05 F6 | 	mov	result1, #0
2d328     A7 F0 03 F6 | 	mov	ptra, fp
2d32c     B2 00 A0 FD | 	call	#popregs_
2d330                 | __system____default_buffer_init_ret
2d330     2D 00 64 FD | 	ret
2d334                 | 
2d334                 | __system__stat
2d334     04 4A 05 F6 | 	mov	COUNT_, #4
2d338     A8 00 A0 FD | 	call	#pushregs_
2d33c     0A 27 02 F6 | 	mov	local01, arg02
2d340     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2d344     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
2d348     09 15 02 F6 | 	mov	arg02, arg01
2d34c     14 13 02 F6 | 	mov	arg01, local02
2d350     00 16 06 F6 | 	mov	arg03, #0
2d354     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2d358     50 B5 BF FD | 	call	#__system____getvfsforfile
2d35c     FD 2A 0A F6 | 	mov	local03, result1 wz
2d360     10 00 90 AD |  if_e	jmp	#LR__4140
2d364     34 2A 06 F1 | 	add	local03, #52
2d368     15 17 0A FB | 	rdlong	arg03, local03 wz
2d36c     34 2A 86 F1 | 	sub	local03, #52
2d370     14 00 90 5D |  if_ne	jmp	#LR__4141
2d374                 | LR__4140
2d374     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d378     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2d37c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d380     01 FA 65 F6 | 	neg	result1, #1
2d384     68 00 90 FD | 	jmp	#LR__4142
2d388                 | LR__4141
2d388     13 13 02 F6 | 	mov	arg01, local01
2d38c     00 14 06 F6 | 	mov	arg02, #0
2d390     30 16 06 F6 | 	mov	arg03, #48
2d394     09 2D 02 F6 | 	mov	local04, arg01
2d398     98 00 A0 FD | 	call	#\builtin_bytefill_
2d39c     16 FB 01 F6 | 	mov	result1, local04
2d3a0     14 13 CA FA | 	rdbyte	arg01, local02 wz
2d3a4     08 26 06 A1 |  if_e	add	local01, #8
2d3a8     08 00 80 AF 
2d3ac     13 FF 6B AC |  if_e	wrlong	##4607, local01
2d3b0     00 FA 05 A6 |  if_e	mov	result1, #0
2d3b4     38 00 90 AD |  if_e	jmp	#LR__4142
2d3b8     34 2A 06 F1 | 	add	local03, #52
2d3bc     15 2B 02 FB | 	rdlong	local03, local03
2d3c0     15 2D 02 F6 | 	mov	local04, local03
2d3c4     13 2A 46 F7 | 	zerox	local03, #19
2d3c8     14 2C 46 F0 | 	shr	local04, #20
2d3cc     02 2C 66 F0 | 	shl	local04, #2
2d3d0     ED 2C 02 F1 | 	add	local04, __methods__
2d3d4     16 2D 02 FB | 	rdlong	local04, local04
2d3d8     14 13 02 F6 | 	mov	arg01, local02
2d3dc     13 15 02 F6 | 	mov	arg02, local01
2d3e0     F2 28 02 F6 | 	mov	local02, objptr
2d3e4     15 E5 01 F6 | 	mov	objptr, local03
2d3e8     2D 2C 62 FD | 	call	local04
2d3ec     14 E5 01 F6 | 	mov	objptr, local02
2d3f0                 | LR__4142
2d3f0     A7 F0 03 F6 | 	mov	ptra, fp
2d3f4     B2 00 A0 FD | 	call	#popregs_
2d3f8                 | __system__stat_ret
2d3f8     2D 00 64 FD | 	ret
2d3fc                 | 
2d3fc                 | __system__write
2d3fc     0A 12 16 F2 | 	cmp	arg01, #10 wc
2d400     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2d404     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2d408     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2d40c     01 FA 65 36 |  if_ae	neg	result1, #1
2d410     20 00 90 3D |  if_ae	jmp	#LR__4150
2d414     34 12 06 FD | 	qmul	arg01, #52
2d418     02 00 00 FF 
2d41c     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2d420     18 12 62 FD | 	getqx	arg01
2d424     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2d428     02 00 00 FF 
2d42c     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2d430     14 10 B0 FD | 	call	#__system___vfswrite
2d434                 | LR__4150
2d434                 | __system__write_ret
2d434     2D 00 64 FD | 	ret
2d438                 | 
2d438                 | __system__read
2d438     0A 12 16 F2 | 	cmp	arg01, #10 wc
2d43c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2d440     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2d444     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2d448     01 FA 65 36 |  if_ae	neg	result1, #1
2d44c     20 00 90 3D |  if_ae	jmp	#LR__4160
2d450     34 12 06 FD | 	qmul	arg01, #52
2d454     02 00 00 FF 
2d458     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2d45c     18 12 62 FD | 	getqx	arg01
2d460     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2d464     02 00 00 FF 
2d468     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2d46c     A0 11 B0 FD | 	call	#__system___vfsread
2d470                 | LR__4160
2d470                 | __system__read_ret
2d470     2D 00 64 FD | 	ret
2d474                 | 
2d474                 | __system__close
2d474     0A 12 16 F2 | 	cmp	arg01, #10 wc
2d478     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2d47c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2d480     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2d484     01 FA 65 36 |  if_ae	neg	result1, #1
2d488     20 00 90 3D |  if_ae	jmp	#LR__4170
2d48c     34 12 06 FD | 	qmul	arg01, #52
2d490     02 00 00 FF 
2d494     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2d498     18 12 62 FD | 	getqx	arg01
2d49c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2d4a0     02 00 00 FF 
2d4a4     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2d4a8     10 F9 BF FD | 	call	#__system___closeraw
2d4ac                 | LR__4170
2d4ac                 | __system__close_ret
2d4ac     2D 00 64 FD | 	ret
2d4b0                 | 
2d4b0                 | __system__lseek
2d4b0     06 4A 05 F6 | 	mov	COUNT_, #6
2d4b4     A8 00 A0 FD | 	call	#pushregs_
2d4b8     0A 12 16 F2 | 	cmp	arg01, #10 wc
2d4bc     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2d4c0     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2d4c4     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2d4c8     01 FA 65 36 |  if_ae	neg	result1, #1
2d4cc     C4 00 90 3D |  if_ae	jmp	#LR__4181
2d4d0     34 12 06 FD | 	qmul	arg01, #52
2d4d4     02 00 00 FF 
2d4d8     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2d4dc     18 26 62 FD | 	getqx	local01
2d4e0     F3 26 02 F1 | 	add	local01, ptr___system__dat__
2d4e4     30 26 06 F1 | 	add	local01, #48
2d4e8     13 13 0A FB | 	rdlong	arg01, local01 wz
2d4ec     30 26 86 F1 | 	sub	local01, #48
2d4f0     02 00 00 FF 
2d4f4     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2d4f8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d4fc     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
2d500     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d504     01 FA 65 A6 |  if_e	neg	result1, #1
2d508     88 00 90 AD |  if_e	jmp	#LR__4181
2d50c     08 26 06 F1 | 	add	local01, #8
2d510     13 29 02 FB | 	rdlong	local02, local01
2d514     08 26 86 F1 | 	sub	local01, #8
2d518     40 28 CE F7 | 	test	local02, #64 wz
2d51c     08 26 06 51 |  if_ne	add	local01, #8
2d520     13 29 02 5B |  if_ne	rdlong	local02, local01
2d524     80 28 46 55 |  if_ne	or	local02, #128
2d528     13 29 62 5C |  if_ne	wrlong	local02, local01
2d52c     08 26 86 51 |  if_ne	sub	local01, #8
2d530     30 26 06 F1 | 	add	local01, #48
2d534     13 2B 02 FB | 	rdlong	local03, local01
2d538     15 2D 02 F6 | 	mov	local04, local03
2d53c     30 26 86 F1 | 	sub	local01, #48
2d540     13 2C 46 F7 | 	zerox	local04, #19
2d544     14 2A 46 F0 | 	shr	local03, #20
2d548     02 2A 66 F0 | 	shl	local03, #2
2d54c     ED 2A 02 F1 | 	add	local03, __methods__
2d550     15 2B 02 FB | 	rdlong	local03, local03
2d554     13 13 02 F6 | 	mov	arg01, local01
2d558     F2 2E 02 F6 | 	mov	local05, objptr
2d55c     16 E5 01 F6 | 	mov	objptr, local04
2d560     2D 2A 62 FD | 	call	local03
2d564     17 E5 01 F6 | 	mov	objptr, local05
2d568     FD 30 02 F6 | 	mov	local06, result1
2d56c     00 30 56 F2 | 	cmps	local06, #0 wc
2d570     1C 00 90 3D |  if_ae	jmp	#LR__4180
2d574     18 13 6A F6 | 	neg	arg01, local06 wz
2d578     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d57c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2d580     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d584     01 FA 65 56 |  if_ne	neg	result1, #1
2d588     00 FA 05 A6 |  if_e	mov	result1, #0
2d58c     04 00 90 FD | 	jmp	#LR__4181
2d590                 | LR__4180
2d590     18 FB 01 F6 | 	mov	result1, local06
2d594                 | LR__4181
2d594     A7 F0 03 F6 | 	mov	ptra, fp
2d598     B2 00 A0 FD | 	call	#popregs_
2d59c                 | __system__lseek_ret
2d59c     2D 00 64 FD | 	ret
2d5a0                 | 
2d5a0                 | __system___ioctl
2d5a0     03 4A 05 F6 | 	mov	COUNT_, #3
2d5a4     A8 00 A0 FD | 	call	#pushregs_
2d5a8     00 12 4E F2 | 	cmps	arg01, #0 wz
2d5ac     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d5b0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2d5b4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d5b8     01 FA 65 A6 |  if_e	neg	result1, #1
2d5bc     5C 00 90 AD |  if_e	jmp	#LR__4191
2d5c0     28 12 06 F1 | 	add	arg01, #40
2d5c4     09 27 02 FB | 	rdlong	local01, arg01
2d5c8     13 29 02 F6 | 	mov	local02, local01
2d5cc     28 12 86 F1 | 	sub	arg01, #40
2d5d0     13 28 46 F7 | 	zerox	local02, #19
2d5d4     14 26 46 F0 | 	shr	local01, #20
2d5d8     02 26 66 F0 | 	shl	local01, #2
2d5dc     ED 26 02 F1 | 	add	local01, __methods__
2d5e0     13 27 02 FB | 	rdlong	local01, local01
2d5e4     F2 2A 02 F6 | 	mov	local03, objptr
2d5e8     14 E5 01 F6 | 	mov	objptr, local02
2d5ec     2D 26 62 FD | 	call	local01
2d5f0     15 E5 01 F6 | 	mov	objptr, local03
2d5f4     FD 12 0A F6 | 	mov	arg01, result1 wz
2d5f8     1C 00 90 AD |  if_e	jmp	#LR__4190
2d5fc     00 12 4E F2 | 	cmps	arg01, #0 wz
2d600     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d604     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2d608     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d60c     01 FA 65 56 |  if_ne	neg	result1, #1
2d610     00 FA 05 A6 |  if_e	mov	result1, #0
2d614     04 00 90 FD | 	jmp	#LR__4191
2d618                 | LR__4190
2d618     00 FA 05 F6 | 	mov	result1, #0
2d61c                 | LR__4191
2d61c     A7 F0 03 F6 | 	mov	ptra, fp
2d620     B2 00 A0 FD | 	call	#popregs_
2d624                 | __system___ioctl_ret
2d624     2D 00 64 FD | 	ret
2d628                 | 
2d628                 | __system___isatty
2d628     00 4A 05 F6 | 	mov	COUNT_, #0
2d62c     A8 00 A0 FD | 	call	#pushregs_
2d630     0C F0 07 F1 | 	add	ptra, #12
2d634     04 4E 05 F1 | 	add	fp, #4
2d638     A7 12 62 FC | 	wrlong	arg01, fp
2d63c     04 4E 05 F1 | 	add	fp, #4
2d640     A7 16 02 F6 | 	mov	arg03, fp
2d644     08 4E 85 F1 | 	sub	fp, #8
2d648     00 15 06 F6 | 	mov	arg02, #256
2d64c     50 FF BF FD | 	call	#__system___ioctl
2d650     00 FA 0D F2 | 	cmp	result1, #0 wz
2d654     01 FA 05 A6 |  if_e	mov	result1, #1
2d658     00 FA 05 56 |  if_ne	mov	result1, #0
2d65c     A7 F0 03 F6 | 	mov	ptra, fp
2d660     B2 00 A0 FD | 	call	#popregs_
2d664                 | __system___isatty_ret
2d664     2D 00 64 FD | 	ret
2d668                 | 
2d668                 | __system____getftab
2d668     0A 12 16 F2 | 	cmp	arg01, #10 wc
2d66c     34 12 06 CD |  if_b	qmul	arg01, #52
2d670     00 FA 05 36 |  if_ae	mov	result1, #0
2d674     02 00 00 CF 
2d678     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
2d67c     18 FA 61 CD |  if_b	getqx	result1
2d680     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
2d684     02 00 00 CF 
2d688     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
2d68c                 | __system____getftab_ret
2d68c     2D 00 64 FD | 	ret
2d690                 | 
2d690                 | __system__strncpy
2d690     09 01 02 F6 | 	mov	_var01, arg01
2d694                 | LR__4200
2d694     01 16 86 F1 | 	sub	arg03, #1
2d698     00 16 56 F2 | 	cmps	arg03, #0 wc
2d69c     18 00 90 CD |  if_b	jmp	#LR__4201
2d6a0     0A FB C1 FA | 	rdbyte	result1, arg02
2d6a4     00 FB 41 FC | 	wrbyte	result1, _var01
2d6a8     01 14 06 F1 | 	add	arg02, #1
2d6ac     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2d6b0     01 00 06 F1 | 	add	_var01, #1
2d6b4     DC FF 9F 5D |  if_ne	jmp	#LR__4200
2d6b8                 | LR__4201
2d6b8     97 0C 48 FB | 	callpa	#(@LR__4203-@LR__4202)>>2,fcache_load_ptr_
2d6bc                 | LR__4202
2d6bc     01 16 86 F1 | 	sub	arg03, #1
2d6c0     00 16 56 F2 | 	cmps	arg03, #0 wc
2d6c4     00 03 02 36 |  if_ae	mov	_var02, _var01
2d6c8     01 00 06 31 |  if_ae	add	_var01, #1
2d6cc     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2d6d0     E8 FF 9F 3D |  if_ae	jmp	#LR__4202
2d6d4                 | LR__4203
2d6d4     09 FB 01 F6 | 	mov	result1, arg01
2d6d8                 | __system__strncpy_ret
2d6d8     2D 00 64 FD | 	ret
2d6dc                 | 
2d6dc                 | __system__strncat
2d6dc     00 14 4E F2 | 	cmps	arg02, #0 wz
2d6e0     54 00 90 AD |  if_e	jmp	#LR__4215
2d6e4     01 16 16 F2 | 	cmp	arg03, #1 wc
2d6e8     4C 00 90 CD |  if_b	jmp	#LR__4215
2d6ec     09 01 02 F6 | 	mov	_var01, arg01
2d6f0     97 06 48 FB | 	callpa	#(@LR__4211-@LR__4210)>>2,fcache_load_ptr_
2d6f4                 | LR__4210
2d6f4     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2d6f8     01 00 06 51 |  if_ne	add	_var01, #1
2d6fc     F4 FF 9F 5D |  if_ne	jmp	#LR__4210
2d700                 | LR__4211
2d700     0B 03 02 F6 | 	mov	_var02, arg03
2d704     97 16 48 FB | 	callpa	#(@LR__4213-@LR__4212)>>2,fcache_load_ptr_
2d708                 | LR__4212
2d708     0A 05 C2 FA | 	rdbyte	_var03, arg02
2d70c     02 07 02 F6 | 	mov	_var04, _var03
2d710     07 06 4E F7 | 	zerox	_var04, #7 wz
2d714     01 14 06 F1 | 	add	arg02, #1
2d718     18 00 90 AD |  if_e	jmp	#LR__4214
2d71c     01 02 86 F1 | 	sub	_var02, #1
2d720     00 02 56 F2 | 	cmps	_var02, #0 wc
2d724     00 07 02 36 |  if_ae	mov	_var04, _var01
2d728     01 00 06 31 |  if_ae	add	_var01, #1
2d72c     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
2d730     D4 FF 9F 3D |  if_ae	jmp	#LR__4212
2d734                 | LR__4213
2d734                 | LR__4214
2d734     00 01 48 FC | 	wrbyte	#0, _var01
2d738                 | LR__4215
2d738     09 FB 01 F6 | 	mov	result1, arg01
2d73c                 | __system__strncat_ret
2d73c     2D 00 64 FD | 	ret
2d740                 | 
2d740                 | __system__strncmp
2d740     09 01 0A F6 | 	mov	_var01, arg01 wz
2d744     14 00 90 5D |  if_ne	jmp	#LR__4220
2d748     00 14 0E F2 | 	cmp	arg02, #0 wz
2d74c     01 02 66 56 |  if_ne	neg	_var02, #1
2d750     00 02 06 A6 |  if_e	mov	_var02, #0
2d754     01 FB 01 F6 | 	mov	result1, _var02
2d758     74 00 90 FD | 	jmp	#__system__strncmp_ret
2d75c                 | LR__4220
2d75c     00 14 0E F2 | 	cmp	arg02, #0 wz
2d760     01 FA 05 A6 |  if_e	mov	result1, #1
2d764     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2d768     0B 05 02 F6 | 	mov	_var03, arg03
2d76c     97 16 48 FB | 	callpa	#(@LR__4222-@LR__4221)>>2,fcache_load_ptr_
2d770                 | LR__4221
2d770     00 07 C2 FA | 	rdbyte	_var04, _var01
2d774     0A 09 02 F6 | 	mov	_var05, arg02
2d778     04 0B C2 FA | 	rdbyte	_var06, _var05
2d77c     01 04 86 F1 | 	sub	_var03, #1
2d780     00 04 56 F2 | 	cmps	_var03, #0 wc
2d784     01 00 06 F1 | 	add	_var01, #1
2d788     01 14 06 F1 | 	add	arg02, #1
2d78c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2d790     08 00 90 2D |  if_nc_and_z	jmp	#LR__4223
2d794     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2d798     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4221
2d79c                 | LR__4222
2d79c                 | LR__4223
2d79c     00 04 56 F2 | 	cmps	_var03, #0 wc
2d7a0     00 FA 05 C6 |  if_b	mov	result1, #0
2d7a4     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
2d7a8     05 07 0A F2 | 	cmp	_var04, _var06 wz
2d7ac     00 FA 05 A6 |  if_e	mov	result1, #0
2d7b0     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2d7b4     00 06 0E F2 | 	cmp	_var04, #0 wz
2d7b8     01 FA 65 A6 |  if_e	neg	result1, #1
2d7bc     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2d7c0     00 0A 0E F2 | 	cmp	_var06, #0 wz
2d7c4     01 FA 05 A6 |  if_e	mov	result1, #1
2d7c8     03 FB 01 56 |  if_ne	mov	result1, _var04
2d7cc     05 FB 81 51 |  if_ne	sub	result1, _var06
2d7d0                 | __system__strncmp_ret
2d7d0     2D 00 64 FD | 	ret
2d7d4                 | 
2d7d4                 | __system____root_opendir
2d7d4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2d7d8     04 12 06 F1 | 	add	arg01, #4
2d7dc     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
2d7e0     00 FA 05 F6 | 	mov	result1, #0
2d7e4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2d7e8                 | __system____root_opendir_ret
2d7e8     2D 00 64 FD | 	ret
2d7ec                 | 
2d7ec                 | __system____root_readdir
2d7ec     03 4A 05 F6 | 	mov	COUNT_, #3
2d7f0     A8 00 A0 FD | 	call	#pushregs_
2d7f4     09 27 02 F6 | 	mov	local01, arg01
2d7f8     0A 29 02 F6 | 	mov	local02, arg02
2d7fc     04 26 06 F1 | 	add	local01, #4
2d800     13 2B 02 FB | 	rdlong	local03, local01
2d804     04 26 86 F1 | 	sub	local01, #4
2d808                 | LR__4230
2d808     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2d80c     F3 2A 0A F2 | 	cmp	local03, ptr___system__dat__ wz
2d810     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2d814     01 FA 65 A6 |  if_e	neg	result1, #1
2d818     48 00 90 AD |  if_e	jmp	#LR__4231
2d81c     15 17 0A FB | 	rdlong	arg03, local03 wz
2d820     04 2A 06 A1 |  if_e	add	local03, #4
2d824     E0 FF 9F AD |  if_e	jmp	#LR__4230
2d828     15 15 02 FB | 	rdlong	arg02, local03
2d82c     01 14 06 F1 | 	add	arg02, #1
2d830     14 13 02 F6 | 	mov	arg01, local02
2d834     40 16 06 F6 | 	mov	arg03, #64
2d838     54 FE BF FD | 	call	#__system__strncpy
2d83c     50 28 06 F1 | 	add	local02, #80
2d840     14 03 48 FC | 	wrbyte	#1, local02
2d844     08 28 86 F1 | 	sub	local02, #8
2d848     14 01 68 FC | 	wrlong	#0, local02
2d84c     04 28 06 F1 | 	add	local02, #4
2d850     14 01 68 FC | 	wrlong	#0, local02
2d854     04 2A 06 F1 | 	add	local03, #4
2d858     04 26 06 F1 | 	add	local01, #4
2d85c     13 2B 62 FC | 	wrlong	local03, local01
2d860     00 FA 05 F6 | 	mov	result1, #0
2d864                 | LR__4231
2d864     A7 F0 03 F6 | 	mov	ptra, fp
2d868     B2 00 A0 FD | 	call	#popregs_
2d86c                 | __system____root_readdir_ret
2d86c     2D 00 64 FD | 	ret
2d870                 | 
2d870                 | __system____root_closedir
2d870     00 FA 05 F6 | 	mov	result1, #0
2d874                 | __system____root_closedir_ret
2d874     2D 00 64 FD | 	ret
2d878                 | 
2d878                 | __system____root_stat
2d878     0A 01 02 F6 | 	mov	_var01, arg02
2d87c     00 13 02 F6 | 	mov	arg01, _var01
2d880     00 14 06 F6 | 	mov	arg02, #0
2d884     30 16 06 F6 | 	mov	arg03, #48
2d888     98 00 A0 FD | 	call	#\builtin_bytefill_
2d88c     08 00 06 F1 | 	add	_var01, #8
2d890     08 00 80 FF 
2d894     00 FF 6B FC | 	wrlong	##4607, _var01
2d898     00 FA 05 F6 | 	mov	result1, #0
2d89c                 | __system____root_stat_ret
2d89c     2D 00 64 FD | 	ret
2d8a0                 | 
2d8a0                 | __system___normalizeName
2d8a0     00 00 06 F6 | 	mov	_var01, #0
2d8a4     09 03 02 F6 | 	mov	_var02, arg01
2d8a8     01 05 02 F6 | 	mov	_var03, _var02
2d8ac                 | LR__4240
2d8ac     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2d8b0     5C 01 90 AD |  if_e	jmp	#LR__4259
2d8b4     00 00 0E F2 | 	cmp	_var01, #0 wz
2d8b8     02 07 02 56 |  if_ne	mov	_var04, _var03
2d8bc     01 04 06 51 |  if_ne	add	_var03, #1
2d8c0     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
2d8c4     00 00 06 56 |  if_ne	mov	_var01, #0
2d8c8     01 07 C2 FA | 	rdbyte	_var04, _var02
2d8cc     2E 06 0E F2 | 	cmp	_var04, #46 wz
2d8d0     D8 00 90 5D |  if_ne	jmp	#LR__4252
2d8d4     01 02 06 F1 | 	add	_var02, #1
2d8d8     01 07 C2 FA | 	rdbyte	_var04, _var02
2d8dc     01 02 86 F1 | 	sub	_var02, #1
2d8e0     2F 06 0E F2 | 	cmp	_var04, #47 wz
2d8e4     18 00 90 AD |  if_e	jmp	#LR__4241
2d8e8     01 02 06 F1 | 	add	_var02, #1
2d8ec     01 09 C2 FA | 	rdbyte	_var05, _var02
2d8f0     01 02 86 F1 | 	sub	_var02, #1
2d8f4     04 0B 02 F6 | 	mov	_var06, _var05
2d8f8     07 0A 4E F7 | 	zerox	_var06, #7 wz
2d8fc     10 00 90 5D |  if_ne	jmp	#LR__4242
2d900                 | LR__4241
2d900     01 0D 02 F6 | 	mov	_var07, _var02
2d904     01 0C 06 F1 | 	add	_var07, #1
2d908     06 03 02 F6 | 	mov	_var02, _var07
2d90c     E0 00 90 FD | 	jmp	#LR__4256
2d910                 | LR__4242
2d910     01 02 06 F1 | 	add	_var02, #1
2d914     01 0D C2 FA | 	rdbyte	_var07, _var02
2d918     01 02 86 F1 | 	sub	_var02, #1
2d91c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2d920     2E 06 0E F2 | 	cmp	_var04, #46 wz
2d924     84 00 90 5D |  if_ne	jmp	#LR__4251
2d928     02 02 06 F1 | 	add	_var02, #2
2d92c     01 0D C2 FA | 	rdbyte	_var07, _var02
2d930     02 02 86 F1 | 	sub	_var02, #2
2d934     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2d938     2F 06 0E F2 | 	cmp	_var04, #47 wz
2d93c     18 00 90 AD |  if_e	jmp	#LR__4243
2d940     02 02 06 F1 | 	add	_var02, #2
2d944     01 09 C2 FA | 	rdbyte	_var05, _var02
2d948     02 02 86 F1 | 	sub	_var02, #2
2d94c     04 0B 02 F6 | 	mov	_var06, _var05
2d950     07 0A 4E F7 | 	zerox	_var06, #7 wz
2d954     54 00 90 5D |  if_ne	jmp	#LR__4250
2d958                 | LR__4243
2d958     02 02 06 F1 | 	add	_var02, #2
2d95c     09 05 5A F2 | 	cmps	_var03, arg01 wcz
2d960     40 00 90 ED |  if_be	jmp	#LR__4249
2d964     02 0F 02 F6 | 	mov	_var08, _var03
2d968     01 0E 86 F1 | 	sub	_var08, #1
2d96c                 | LR__4244
2d96c     07 07 C2 FA | 	rdbyte	_var04, _var08
2d970     2F 06 0E F2 | 	cmp	_var04, #47 wz
2d974     0C 00 90 5D |  if_ne	jmp	#LR__4245
2d978     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2d97c     01 0E 86 11 |  if_a	sub	_var08, #1
2d980     E8 FF 9F 1D |  if_a	jmp	#LR__4244
2d984                 | LR__4245
2d984     97 0C 48 FB | 	callpa	#(@LR__4247-@LR__4246)>>2,fcache_load_ptr_
2d988                 | LR__4246
2d988     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2d98c     10 00 90 ED |  if_be	jmp	#LR__4248
2d990     07 07 C2 FA | 	rdbyte	_var04, _var08
2d994     2F 06 0E F2 | 	cmp	_var04, #47 wz
2d998     01 0E 86 51 |  if_ne	sub	_var08, #1
2d99c     E8 FF 9F 5D |  if_ne	jmp	#LR__4246
2d9a0                 | LR__4247
2d9a0                 | LR__4248
2d9a0     07 05 02 F6 | 	mov	_var03, _var08
2d9a4                 | LR__4249
2d9a4     01 00 06 F6 | 	mov	_var01, #1
2d9a8     44 00 90 FD | 	jmp	#LR__4256
2d9ac                 | LR__4250
2d9ac                 | LR__4251
2d9ac                 | LR__4252
2d9ac     97 18 48 FB | 	callpa	#(@LR__4254-@LR__4253)>>2,fcache_load_ptr_
2d9b0                 | LR__4253
2d9b0     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2d9b4     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
2d9b8     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
2d9bc     20 00 90 AD |  if_e	jmp	#LR__4255
2d9c0     01 0B 02 F6 | 	mov	_var06, _var02
2d9c4     01 09 02 F6 | 	mov	_var05, _var02
2d9c8     01 08 06 F1 | 	add	_var05, #1
2d9cc     05 11 C2 FA | 	rdbyte	_var09, _var06
2d9d0     04 03 02 F6 | 	mov	_var02, _var05
2d9d4     02 11 42 FC | 	wrbyte	_var09, _var03
2d9d8     01 04 06 F1 | 	add	_var03, #1
2d9dc     D0 FF 9F FD | 	jmp	#LR__4253
2d9e0                 | LR__4254
2d9e0                 | LR__4255
2d9e0     01 07 C2 FA | 	rdbyte	_var04, _var02
2d9e4     2F 06 0E F2 | 	cmp	_var04, #47 wz
2d9e8     C0 FE 9F 5D |  if_ne	jmp	#LR__4240
2d9ec     01 00 06 F6 | 	mov	_var01, #1
2d9f0                 | LR__4256
2d9f0     97 0C 48 FB | 	callpa	#(@LR__4258-@LR__4257)>>2,fcache_load_ptr_
2d9f4                 | LR__4257
2d9f4     01 07 C2 FA | 	rdbyte	_var04, _var02
2d9f8     2F 06 0E F2 | 	cmp	_var04, #47 wz
2d9fc     01 0D 02 A6 |  if_e	mov	_var07, _var02
2da00     01 0C 06 A1 |  if_e	add	_var07, #1
2da04     06 03 02 A6 |  if_e	mov	_var02, _var07
2da08     E8 FF 9F AD |  if_e	jmp	#LR__4257
2da0c                 | LR__4258
2da0c     9C FE 9F FD | 	jmp	#LR__4240
2da10                 | LR__4259
2da10     02 01 48 FC | 	wrbyte	#0, _var03
2da14                 | __system___normalizeName_ret
2da14     2D 00 64 FD | 	ret
2da18                 | 
2da18                 | __system___strrev
2da18     09 01 CA FA | 	rdbyte	_var01, arg01 wz
2da1c     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
2da20     09 03 02 F6 | 	mov	_var02, arg01
2da24     97 06 48 FB | 	callpa	#(@LR__4261-@LR__4260)>>2,fcache_load_ptr_
2da28                 | LR__4260
2da28     01 01 CA FA | 	rdbyte	_var01, _var02 wz
2da2c     01 02 06 51 |  if_ne	add	_var02, #1
2da30     F4 FF 9F 5D |  if_ne	jmp	#LR__4260
2da34                 | LR__4261
2da34     01 02 86 F1 | 	sub	_var02, #1
2da38     97 12 48 FB | 	callpa	#(@LR__4263-@LR__4262)>>2,fcache_load_ptr_
2da3c                 | LR__4262
2da3c     09 03 5A F2 | 	cmps	_var02, arg01 wcz
2da40     1C 00 90 ED |  if_be	jmp	#LR__4264
2da44     09 01 C2 FA | 	rdbyte	_var01, arg01
2da48     01 05 C2 FA | 	rdbyte	_var03, _var02
2da4c     09 05 42 FC | 	wrbyte	_var03, arg01
2da50     01 01 42 FC | 	wrbyte	_var01, _var02
2da54     01 12 06 F1 | 	add	arg01, #1
2da58     01 02 86 F1 | 	sub	_var02, #1
2da5c     DC FF 9F FD | 	jmp	#LR__4262
2da60                 | LR__4263
2da60                 | LR__4264
2da60                 | __system___strrev_ret
2da60     2D 00 64 FD | 	ret
2da64                 | 
2da64                 | __system___fmtpad
2da64     06 4A 05 F6 | 	mov	COUNT_, #6
2da68     A8 00 A0 FD | 	call	#pushregs_
2da6c     09 27 02 F6 | 	mov	local01, arg01
2da70     0A 29 02 F6 | 	mov	local02, arg02
2da74     0B 2B 02 F6 | 	mov	local03, arg03
2da78     14 13 EA F8 | 	getbyte	arg01, local02, #1
2da7c     16 28 46 F0 | 	shr	local02, #22
2da80     03 28 0E F5 | 	and	local02, #3 wz
2da84     00 2C 06 F6 | 	mov	local04, #0
2da88     01 28 06 A6 |  if_e	mov	local02, #1
2da8c     0C 29 CA F7 | 	test	local02, arg04 wz
2da90     00 FA 05 A6 |  if_e	mov	result1, #0
2da94     88 00 90 AD |  if_e	jmp	#LR__4273
2da98     09 2B C2 F2 | 	subr	local03, arg01
2da9c     01 2A 56 F2 | 	cmps	local03, #1 wc
2daa0     00 FA 05 C6 |  if_b	mov	result1, #0
2daa4     78 00 90 CD |  if_b	jmp	#LR__4273
2daa8     03 28 0E F2 | 	cmp	local02, #3 wz
2daac     18 00 90 5D |  if_ne	jmp	#LR__4270
2dab0     01 18 0E F2 | 	cmp	arg04, #1 wz
2dab4     6E 28 62 FD | 	wrz	local02
2dab8     14 2B 02 F1 | 	add	local03, local02
2dabc     15 2B 52 F6 | 	abs	local03, local03 wc
2dac0     01 2A 46 F0 | 	shr	local03, #1
2dac4     15 2B 82 F6 | 	negc	local03, local03
2dac8                 | LR__4270
2dac8     01 2A 56 F2 | 	cmps	local03, #1 wc
2dacc     4C 00 90 CD |  if_b	jmp	#LR__4272
2dad0     15 2F 02 F6 | 	mov	local05, local03
2dad4                 | LR__4271
2dad4     13 29 02 F6 | 	mov	local02, local01
2dad8     13 31 02 F6 | 	mov	local06, local01
2dadc     13 28 46 F7 | 	zerox	local02, #19
2dae0     14 30 46 F0 | 	shr	local06, #20
2dae4     02 30 66 F0 | 	shl	local06, #2
2dae8     ED 30 02 F1 | 	add	local06, __methods__
2daec     18 31 02 FB | 	rdlong	local06, local06
2daf0     20 12 06 F6 | 	mov	arg01, #32
2daf4     F2 2A 02 F6 | 	mov	local03, objptr
2daf8     14 E5 01 F6 | 	mov	objptr, local02
2dafc     2D 30 62 FD | 	call	local06
2db00     15 E5 01 F6 | 	mov	objptr, local03
2db04     FD 30 02 F6 | 	mov	local06, result1
2db08     00 30 56 F2 | 	cmps	local06, #0 wc
2db0c     18 FB 01 C6 |  if_b	mov	result1, local06
2db10     0C 00 90 CD |  if_b	jmp	#LR__4273
2db14     18 2D 02 F1 | 	add	local04, local06
2db18     EE 2F 6E FB | 	djnz	local05, #LR__4271
2db1c                 | LR__4272
2db1c     16 FB 01 F6 | 	mov	result1, local04
2db20                 | LR__4273
2db20     A7 F0 03 F6 | 	mov	ptra, fp
2db24     B2 00 A0 FD | 	call	#popregs_
2db28                 | __system___fmtpad_ret
2db28     2D 00 64 FD | 	ret
2db2c                 | 
2db2c                 | __system___uitoa
2db2c     04 4A 05 F6 | 	mov	COUNT_, #4
2db30     A8 00 A0 FD | 	call	#pushregs_
2db34     09 27 02 F6 | 	mov	local01, arg01
2db38     00 1A 4E F2 | 	cmps	arg05, #0 wz
2db3c     13 1B 02 F6 | 	mov	arg05, local01
2db40     00 28 06 F6 | 	mov	local02, #0
2db44     37 2A 06 56 |  if_ne	mov	local03, #55
2db48     57 2A 06 A6 |  if_e	mov	local03, #87
2db4c                 | LR__4280
2db4c     0B 15 12 FD | 	qdiv	arg02, arg03
2db50     19 2C 62 FD | 	getqy	local04
2db54     0B 15 12 FD | 	qdiv	arg02, arg03
2db58     0A 2C 16 F2 | 	cmp	local04, #10 wc
2db5c     30 2C 06 C1 |  if_b	add	local04, #48
2db60     15 2D 02 31 |  if_ae	add	local04, local03
2db64     0D 2D 42 FC | 	wrbyte	local04, arg05
2db68     01 1A 06 F1 | 	add	arg05, #1
2db6c     01 28 06 F1 | 	add	local02, #1
2db70     18 14 62 FD | 	getqx	arg02
2db74     00 14 0E F2 | 	cmp	arg02, #0 wz
2db78     D0 FF 9F 5D |  if_ne	jmp	#LR__4280
2db7c     0C 29 12 F2 | 	cmp	local02, arg04 wc
2db80     C8 FF 9F CD |  if_b	jmp	#LR__4280
2db84     0D 01 48 FC | 	wrbyte	#0, arg05
2db88     13 13 02 F6 | 	mov	arg01, local01
2db8c     88 FE BF FD | 	call	#__system___strrev
2db90     14 FB 01 F6 | 	mov	result1, local02
2db94     A7 F0 03 F6 | 	mov	ptra, fp
2db98     B2 00 A0 FD | 	call	#popregs_
2db9c                 | __system___uitoa_ret
2db9c     2D 00 64 FD | 	ret
2dba0                 | 
2dba0                 | __system__disassemble_0580
2dba0     10 4A 05 F6 | 	mov	COUNT_, #16
2dba4     A8 00 A0 FD | 	call	#pushregs_
2dba8     09 27 02 F6 | 	mov	local01, arg01
2dbac     0A 29 02 F6 | 	mov	local02, arg02
2dbb0     0B 2B 02 F6 | 	mov	local03, arg03
2dbb4     0C 2D 02 F6 | 	mov	local04, arg04
2dbb8     0D 2F 02 F6 | 	mov	local05, arg05
2dbbc     17 13 52 F6 | 	abs	arg01, local05 wc
2dbc0     1F 30 C6 C9 |  if_b	decod	local06, #31
2dbc4     00 30 06 36 |  if_ae	mov	local06, #0
2dbc8     C0 CF BF FD | 	call	#__system___float_fromuns
2dbcc     18 FB 61 F5 | 	xor	result1, local06
2dbd0     FD 32 02 F6 | 	mov	local07, result1
2dbd4     00 34 06 F6 | 	mov	local08, #0
2dbd8     13 13 02 F6 | 	mov	arg01, local01
2dbdc     00 14 06 F6 | 	mov	arg02, #0
2dbe0     01 16 06 F6 | 	mov	arg03, #1
2dbe4     DC D7 BF FD | 	call	#__system___float_cmp
2dbe8     00 FA 0D F2 | 	cmp	result1, #0 wz
2dbec     00 36 06 A6 |  if_e	mov	local09, #0
2dbf0     14 01 68 AC |  if_e	wrlong	#0, local02
2dbf4     15 37 62 AC |  if_e	wrlong	local09, local03
2dbf8     8C 01 90 AD |  if_e	jmp	#LR__4302
2dbfc     13 13 02 F6 | 	mov	arg01, local01
2dc00     B4 DC BF FD | 	call	#__system____builtin_ilogb
2dc04     FD 38 02 F6 | 	mov	local10, result1
2dc08     0A 2E 0E F2 | 	cmp	local05, #10 wz
2dc0c     24 00 90 5D |  if_ne	jmp	#LR__4290
2dc10     1C 37 02 F6 | 	mov	local09, local10
2dc14     01 36 66 F0 | 	shl	local09, #1
2dc18     1C 37 02 F1 | 	add	local09, local10
2dc1c     1B 39 52 F6 | 	abs	local10, local09 wc
2dc20     0A 38 16 FD | 	qdiv	local10, #10
2dc24     09 3A 06 F6 | 	mov	local11, #9
2dc28     18 38 62 FD | 	getqx	local10
2dc2c     1C 39 82 F6 | 	negc	local10, local10
2dc30     04 00 90 FD | 	jmp	#LR__4291
2dc34                 | LR__4290
2dc34     18 3A 06 F6 | 	mov	local11, #24
2dc38                 | LR__4291
2dc38                 | LR__4292
2dc38     08 34 56 F2 | 	cmps	local08, #8 wc
2dc3c     01 34 06 F1 | 	add	local08, #1
2dc40     60 00 90 3D |  if_ae	jmp	#LR__4293
2dc44     00 C0 1F FF 
2dc48     00 12 06 F6 | 	mov	arg01, ##1065353216
2dc4c     19 15 02 F6 | 	mov	arg02, local07
2dc50     1C 17 02 F6 | 	mov	arg03, local10
2dc54     44 E3 BF FD | 	call	#__system___float_pow_n
2dc58     FD 14 02 F6 | 	mov	arg02, result1
2dc5c     13 13 02 F6 | 	mov	arg01, local01
2dc60     30 D5 BF FD | 	call	#__system___float_div
2dc64     FD 3C 02 F6 | 	mov	local12, result1
2dc68     1E 13 02 F6 | 	mov	arg01, local12
2dc6c     00 C0 1F FF 
2dc70     00 14 06 F6 | 	mov	arg02, ##1065353216
2dc74     01 16 06 F6 | 	mov	arg03, #1
2dc78     48 D7 BF FD | 	call	#__system___float_cmp
2dc7c     00 FA 55 F2 | 	cmps	result1, #0 wc
2dc80     01 38 86 C1 |  if_b	sub	local10, #1
2dc84     B0 FF 9F CD |  if_b	jmp	#LR__4292
2dc88     19 15 02 F6 | 	mov	arg02, local07
2dc8c     1E 13 02 F6 | 	mov	arg01, local12
2dc90     01 16 66 F6 | 	neg	arg03, #1
2dc94     2C D7 BF FD | 	call	#__system___float_cmp
2dc98     00 FA 55 F2 | 	cmps	result1, #0 wc
2dc9c     01 38 06 31 |  if_ae	add	local10, #1
2dca0     94 FF 9F 3D |  if_ae	jmp	#LR__4292
2dca4                 | LR__4293
2dca4     1E 13 02 F6 | 	mov	arg01, local12
2dca8     0C DC BF FD | 	call	#__system____builtin_ilogb
2dcac     FD 3E 02 F6 | 	mov	local13, result1
2dcb0     1E 41 02 F6 | 	mov	local14, local12
2dcb4     17 41 06 F4 | 	bitl	local14, #279
2dcb8     17 40 26 F4 | 	bith	local14, #23
2dcbc     1F 41 62 F0 | 	shl	local14, local13
2dcc0     02 2E 0E F2 | 	cmp	local05, #2 wz
2dcc4     02 2C 66 A0 |  if_e	shl	local04, #2
2dcc8     00 42 06 F6 | 	mov	local15, #0
2dccc     00 2C 56 F2 | 	cmps	local04, #0 wc
2dcd0     10 00 90 3D |  if_ae	jmp	#LR__4294
2dcd4     1C 2D C2 F2 | 	subr	local04, local10
2dcd8     00 2C 56 F2 | 	cmps	local04, #0 wc
2dcdc     A0 00 90 CD |  if_b	jmp	#LR__4301
2dce0     04 00 90 FD | 	jmp	#LR__4295
2dce4                 | LR__4294
2dce4     01 2C 06 F1 | 	add	local04, #1
2dce8                 | LR__4295
2dce8     1D 2D 7A F3 | 	fles	local04, local11 wcz
2dcec     01 44 06 F6 | 	mov	local16, #1
2dcf0     97 22 48 FB | 	callpa	#(@LR__4297-@LR__4296)>>2,fcache_load_ptr_
2dcf4                 | LR__4296
2dcf4     00 40 00 FF 
2dcf8     00 42 16 F2 | 	cmp	local15, ##8388608 wc
2dcfc     38 00 90 3D |  if_ae	jmp	#LR__4298
2dd00     01 2C 56 F2 | 	cmps	local04, #1 wc
2dd04     01 2C 86 F1 | 	sub	local04, #1
2dd08     2C 00 90 CD |  if_b	jmp	#LR__4298
2dd0c     17 43 02 FD | 	qmul	local15, local05
2dd10     20 3F 02 F6 | 	mov	local13, local14
2dd14     17 3E 46 F0 | 	shr	local13, #23
2dd18     17 41 06 F4 | 	bitl	local14, #279
2dd1c     18 42 62 FD | 	getqx	local15
2dd20     17 45 02 FD | 	qmul	local16, local05
2dd24     18 44 62 FD | 	getqx	local16
2dd28     17 41 02 FD | 	qmul	local14, local05
2dd2c     1F 43 02 F1 | 	add	local15, local13
2dd30     18 40 62 FD | 	getqx	local14
2dd34     BC FF 9F FD | 	jmp	#LR__4296
2dd38                 | LR__4297
2dd38                 | LR__4298
2dd38     17 37 02 F6 | 	mov	local09, local05
2dd3c     17 36 66 F0 | 	shl	local09, #23
2dd40     1B 3F 52 F6 | 	abs	local13, local09 wc
2dd44     01 3E 46 F0 | 	shr	local13, #1
2dd48     1F 3F 82 F6 | 	negc	local13, local13
2dd4c     1F 41 1A F2 | 	cmp	local14, local13 wcz
2dd50     20 00 90 1D |  if_a	jmp	#LR__4299
2dd54     17 2E 66 F0 | 	shl	local05, #23
2dd58     17 3F 52 F6 | 	abs	local13, local05 wc
2dd5c     01 3E 46 F0 | 	shr	local13, #1
2dd60     1F 3F 82 F6 | 	negc	local13, local13
2dd64     1F 41 0A F2 | 	cmp	local14, local13 wz
2dd68     14 00 90 5D |  if_ne	jmp	#LR__4300
2dd6c     01 42 CE F7 | 	test	local15, #1 wz
2dd70     0C 00 90 AD |  if_e	jmp	#LR__4300
2dd74                 | LR__4299
2dd74     01 42 06 F1 | 	add	local15, #1
2dd78     22 43 0A F2 | 	cmp	local15, local16 wz
2dd7c     01 38 06 A1 |  if_e	add	local10, #1
2dd80                 | LR__4300
2dd80                 | LR__4301
2dd80     14 43 62 FC | 	wrlong	local15, local02
2dd84     15 39 62 FC | 	wrlong	local10, local03
2dd88                 | LR__4302
2dd88     A7 F0 03 F6 | 	mov	ptra, fp
2dd8c     B2 00 A0 FD | 	call	#popregs_
2dd90                 | __system__disassemble_0580_ret
2dd90     2D 00 64 FD | 	ret
2dd94                 | 
2dd94                 | __system__emitsign_0582
2dd94     00 FA 05 F6 | 	mov	result1, #0
2dd98     00 14 0E F2 | 	cmp	arg02, #0 wz
2dd9c     09 01 02 56 |  if_ne	mov	_var01, arg01
2dda0     01 12 06 51 |  if_ne	add	arg01, #1
2dda4     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2dda8     01 FA 05 56 |  if_ne	mov	result1, #1
2ddac     00 16 0E F2 | 	cmp	arg03, #0 wz
2ddb0     09 61 48 5C |  if_ne	wrbyte	#48, arg01
2ddb4     01 12 06 51 |  if_ne	add	arg01, #1
2ddb8     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
2ddbc     02 FA 05 51 |  if_ne	add	result1, #2
2ddc0                 | __system__emitsign_0582_ret
2ddc0     2D 00 64 FD | 	ret
2ddc4                 | 
2ddc4                 | __system___getiolock_0620
2ddc4     01 4A 05 F6 | 	mov	COUNT_, #1
2ddc8     A8 00 A0 FD | 	call	#pushregs_
2ddcc     98 F8 BF FD | 	call	#__system____getftab
2ddd0     FD 26 0A F6 | 	mov	local01, result1 wz
2ddd4     10 00 90 AD |  if_e	jmp	#LR__4310
2ddd8     08 26 06 F1 | 	add	local01, #8
2dddc     13 FB 09 FB | 	rdlong	result1, local01 wz
2dde0     08 26 86 F1 | 	sub	local01, #8
2dde4     18 00 90 5D |  if_ne	jmp	#LR__4311
2dde8                 | LR__4310
2dde8     01 00 00 FF 
2ddec     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
2ddf0     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2ddf4     01 00 00 FF 
2ddf8     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
2ddfc     08 00 90 FD | 	jmp	#LR__4312
2de00                 | LR__4311
2de00     0C 26 06 F1 | 	add	local01, #12
2de04     13 FB 01 F6 | 	mov	result1, local01
2de08                 | LR__4312
2de08     A7 F0 03 F6 | 	mov	ptra, fp
2de0c     B2 00 A0 FD | 	call	#popregs_
2de10                 | __system___getiolock_0620_ret
2de10     2D 00 64 FD | 	ret
2de14                 | 
2de14                 | __system___gettxfunc
2de14     01 4A 05 F6 | 	mov	COUNT_, #1
2de18     A8 00 A0 FD | 	call	#pushregs_
2de1c     48 F8 BF FD | 	call	#__system____getftab
2de20     FD 26 0A F6 | 	mov	local01, result1 wz
2de24     10 00 90 AD |  if_e	jmp	#LR__4320
2de28     08 26 06 F1 | 	add	local01, #8
2de2c     13 15 0A FB | 	rdlong	arg02, local01 wz
2de30     08 26 86 F1 | 	sub	local01, #8
2de34     08 00 90 5D |  if_ne	jmp	#LR__4321
2de38                 | LR__4320
2de38     00 FA 05 F6 | 	mov	result1, #0
2de3c     0C 00 90 FD | 	jmp	#LR__4322
2de40                 | LR__4321
2de40     00 70 05 FF 
2de44     00 26 46 F5 | 	or	local01, ##182452224
2de48     13 FB 01 F6 | 	mov	result1, local01
2de4c                 | LR__4322
2de4c     A7 F0 03 F6 | 	mov	ptra, fp
2de50     B2 00 A0 FD | 	call	#popregs_
2de54                 | __system___gettxfunc_ret
2de54     2D 00 64 FD | 	ret
2de58                 | 
2de58                 | __system___getrxfunc
2de58     01 4A 05 F6 | 	mov	COUNT_, #1
2de5c     A8 00 A0 FD | 	call	#pushregs_
2de60     04 F8 BF FD | 	call	#__system____getftab
2de64     FD 26 0A F6 | 	mov	local01, result1 wz
2de68     10 00 90 AD |  if_e	jmp	#LR__4330
2de6c     08 26 06 F1 | 	add	local01, #8
2de70     13 15 0A FB | 	rdlong	arg02, local01 wz
2de74     08 26 86 F1 | 	sub	local01, #8
2de78     08 00 90 5D |  if_ne	jmp	#LR__4331
2de7c                 | LR__4330
2de7c     00 FA 05 F6 | 	mov	result1, #0
2de80     0C 00 90 FD | 	jmp	#LR__4332
2de84                 | LR__4331
2de84     00 78 05 FF 
2de88     00 26 46 F5 | 	or	local01, ##183500800
2de8c     13 FB 01 F6 | 	mov	result1, local01
2de90                 | LR__4332
2de90     A7 F0 03 F6 | 	mov	ptra, fp
2de94     B2 00 A0 FD | 	call	#popregs_
2de98                 | __system___getrxfunc_ret
2de98     2D 00 64 FD | 	ret
2de9c                 | 
2de9c                 | __system____ScanForChar
2de9c     09 01 02 F6 | 	mov	_var01, arg01
2dea0     09 03 02 F6 | 	mov	_var02, arg01
2dea4     97 06 48 FB | 	callpa	#(@LR__4341-@LR__4340)>>2,fcache_load_ptr_
2dea8                 | LR__4340
2dea8     01 FB C9 FA | 	rdbyte	result1, _var02 wz
2deac     01 02 06 51 |  if_ne	add	_var02, #1
2deb0     F4 FF 9F 5D |  if_ne	jmp	#LR__4340
2deb4                 | LR__4341
2deb4     09 03 82 F1 | 	sub	_var02, arg01
2deb8     01 FB 01 F6 | 	mov	result1, _var02
2debc     FD 12 0A F6 | 	mov	arg01, result1 wz
2dec0     00 FA 05 A6 |  if_e	mov	result1, #0
2dec4     B8 00 90 AD |  if_e	jmp	#LR__4348
2dec8     0A 05 02 F6 | 	mov	_var03, arg02
2decc     07 04 4E F7 | 	zerox	_var03, #7 wz
2ded0     00 FA 05 A6 |  if_e	mov	result1, #0
2ded4     A8 00 90 AD |  if_e	jmp	#LR__4348
2ded8     01 16 16 F2 | 	cmp	arg03, #1 wc
2dedc     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
2dee0     01 16 06 86 |  if_c_and_z	mov	arg03, #1
2dee4     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2dee8     94 00 90 4D |  if_c_and_nz	jmp	#LR__4348
2deec     09 17 1A F2 | 	cmp	arg03, arg01 wcz
2def0     10 00 90 ED |  if_be	jmp	#LR__4342
2def4     00 18 0E F2 | 	cmp	arg04, #0 wz
2def8     00 FA 05 A6 |  if_e	mov	result1, #0
2defc     80 00 90 AD |  if_e	jmp	#LR__4348
2df00     09 17 02 F6 | 	mov	arg03, arg01
2df04                 | LR__4342
2df04     01 16 86 F1 | 	sub	arg03, #1
2df08     00 18 0E F2 | 	cmp	arg04, #0 wz
2df0c     38 00 90 5D |  if_ne	jmp	#LR__4344
2df10     0B 07 02 F6 | 	mov	_var04, arg03
2df14     09 09 02 F6 | 	mov	_var05, arg01
2df18                 | LR__4343
2df18     04 07 12 F2 | 	cmp	_var04, _var05 wc
2df1c     5C 00 90 3D |  if_ae	jmp	#LR__4347
2df20     03 05 02 F6 | 	mov	_var03, _var04
2df24     00 05 02 F1 | 	add	_var03, _var01
2df28     02 05 C2 FA | 	rdbyte	_var03, _var03
2df2c     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
2df30     0C 05 0A F2 | 	cmp	_var03, arg04 wz
2df34     01 06 06 A1 |  if_e	add	_var04, #1
2df38     03 FB 01 A6 |  if_e	mov	result1, _var04
2df3c     40 00 90 AD |  if_e	jmp	#LR__4348
2df40     01 06 06 F1 | 	add	_var04, #1
2df44     D0 FF 9F FD | 	jmp	#LR__4343
2df48                 | LR__4344
2df48     0B 07 02 F6 | 	mov	_var04, arg03
2df4c                 | LR__4345
2df4c     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
2df50     28 00 90 1D |  if_a	jmp	#LR__4346
2df54     03 09 02 F6 | 	mov	_var05, _var04
2df58     00 09 02 F1 | 	add	_var05, _var01
2df5c     04 05 C2 FA | 	rdbyte	_var03, _var05
2df60     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
2df64     04 05 0A F2 | 	cmp	_var03, _var05 wz
2df68     01 06 06 A1 |  if_e	add	_var04, #1
2df6c     03 FB 01 A6 |  if_e	mov	result1, _var04
2df70     0C 00 90 AD |  if_e	jmp	#LR__4348
2df74     01 06 86 F1 | 	sub	_var04, #1
2df78     D0 FF 9F FD | 	jmp	#LR__4345
2df7c                 | LR__4346
2df7c                 | LR__4347
2df7c     00 FA 05 F6 | 	mov	result1, #0
2df80                 | LR__4348
2df80                 | __system____ScanForChar_ret
2df80     2D 00 64 FD | 	ret
2df84                 | 
2df84                 | __system___basic_dir
2df84     05 4A 05 F6 | 	mov	COUNT_, #5
2df88     A8 00 A0 FD | 	call	#pushregs_
2df8c     4C F0 07 F1 | 	add	ptra, #76
2df90     04 4E 05 F1 | 	add	fp, #4
2df94     A7 12 62 FC | 	wrlong	arg01, fp
2df98     04 4E 05 F1 | 	add	fp, #4
2df9c     A7 14 62 FC | 	wrlong	arg02, fp
2dfa0     04 4E 85 F1 | 	sub	fp, #4
2dfa4     A7 14 0A FB | 	rdlong	arg02, fp wz
2dfa8     04 4E 85 F1 | 	sub	fp, #4
2dfac     04 4E 05 51 |  if_ne	add	fp, #4
2dfb0     A7 26 02 5B |  if_ne	rdlong	local01, fp
2dfb4     04 4E 85 51 |  if_ne	sub	fp, #4
2dfb8     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
2dfbc     70 00 90 AD |  if_e	jmp	#LR__4350
2dfc0     03 00 00 FF 
2dfc4     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2dfc8     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2dfcc     03 00 00 FF 
2dfd0     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2dfd4     03 00 00 5F 
2dfd8     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
2dfdc     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2dfe0     03 00 00 5F 
2dfe4     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
2dfe8     D0 E9 BF 5D |  if_ne	call	#__system__closedir
2dfec     BE 01 00 FF 
2dff0     9C 12 06 F6 | 	mov	arg01, ##@LR__5528
2dff4     D8 E8 BF FD | 	call	#__system__opendir
2dff8     03 00 00 FF 
2dffc     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2e000     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2e004     08 4E 05 F1 | 	add	fp, #8
2e008     A7 28 02 FB | 	rdlong	local02, fp
2e00c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2e010     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2e014     04 4E 85 F1 | 	sub	fp, #4
2e018     A7 28 02 FB | 	rdlong	local02, fp
2e01c     04 4E 85 F1 | 	sub	fp, #4
2e020     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2e024     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2e028     03 00 00 FF 
2e02c     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2e030                 | LR__4350
2e030     03 00 00 FF 
2e034     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2e038     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2e03c     03 00 00 FF 
2e040     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2e044     BE 01 00 AF 
2e048     9E FA 05 A6 |  if_e	mov	result1, ##@LR__5529
2e04c     84 02 90 AD |  if_e	jmp	#LR__4363
2e050                 | LR__4351
2e050     03 00 00 FF 
2e054     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2e058     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2e05c     03 00 00 FF 
2e060     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2e064     C8 E9 BF FD | 	call	#__system__readdir
2e068     0C 4E 05 F1 | 	add	fp, #12
2e06c     A7 FA 61 FC | 	wrlong	result1, fp
2e070     0C 4E 85 F1 | 	sub	fp, #12
2e074     00 FA 0D F2 | 	cmp	result1, #0 wz
2e078     38 00 90 5D |  if_ne	jmp	#LR__4352
2e07c     03 00 00 FF 
2e080     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2e084     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2e088     03 00 00 FF 
2e08c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2e090     28 E9 BF FD | 	call	#__system__closedir
2e094     03 00 00 FF 
2e098     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2e09c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
2e0a0     03 00 00 FF 
2e0a4     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2e0a8     BE 01 00 FF 
2e0ac     A0 FA 05 F6 | 	mov	result1, ##@LR__5530
2e0b0     20 02 90 FD | 	jmp	#LR__4363
2e0b4                 | LR__4352
2e0b4     0C 4E 05 F1 | 	add	fp, #12
2e0b8     A7 12 02 FB | 	rdlong	arg01, fp
2e0bc     0C 4E 85 F1 | 	sub	fp, #12
2e0c0     03 00 00 FF 
2e0c4     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
2e0c8     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2e0cc     03 00 00 FF 
2e0d0     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2e0d4     10 09 B0 FD | 	call	#__system___pat_match
2e0d8     00 FA 0D F2 | 	cmp	result1, #0 wz
2e0dc     70 FF 9F AD |  if_e	jmp	#LR__4351
2e0e0     03 00 00 FF 
2e0e4     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2e0e8     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2e0ec     03 00 00 FF 
2e0f0     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2e0f4     78 01 90 AD |  if_e	jmp	#LR__4359
2e0f8     0C 4E 05 F1 | 	add	fp, #12
2e0fc     A7 12 02 FB | 	rdlong	arg01, fp
2e100     04 4E 05 F1 | 	add	fp, #4
2e104     A7 14 02 F6 | 	mov	arg02, fp
2e108     10 4E 85 F1 | 	sub	fp, #16
2e10c     24 F2 BF FD | 	call	#__system__stat
2e110     40 4E 05 F1 | 	add	fp, #64
2e114     A7 FA 61 FC | 	wrlong	result1, fp
2e118     40 4E 85 F1 | 	sub	fp, #64
2e11c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e120     BE 01 00 5F 
2e124     A2 FA 05 56 |  if_ne	mov	result1, ##@LR__5531
2e128     A8 01 90 5D |  if_ne	jmp	#LR__4363
2e12c     18 4E 05 F1 | 	add	fp, #24
2e130     A7 28 02 FB | 	rdlong	local02, fp
2e134     78 00 00 FF 
2e138     00 28 06 F5 | 	and	local02, ##61440
2e13c     2C 4E 05 F1 | 	add	fp, #44
2e140     A7 28 62 FC | 	wrlong	local02, fp
2e144     38 4E 85 F1 | 	sub	fp, #56
2e148     A7 28 02 FB | 	rdlong	local02, fp
2e14c     0C 4E 85 F1 | 	sub	fp, #12
2e150     14 29 C2 FA | 	rdbyte	local02, local02
2e154     2E 28 0E F2 | 	cmp	local02, #46 wz
2e158     08 4E 05 A1 |  if_e	add	fp, #8
2e15c     A7 04 68 AC |  if_e	wrlong	#2, fp
2e160     08 4E C5 F3 | 	sumz	fp, #8
2e164     A7 00 68 5C |  if_ne	wrlong	#0, fp
2e168     08 4E 85 51 |  if_ne	sub	fp, #8
2e16c     44 4E 05 F1 | 	add	fp, #68
2e170     A7 28 02 FB | 	rdlong	local02, fp
2e174     44 4E 85 F1 | 	sub	fp, #68
2e178     08 00 00 FF 
2e17c     00 28 0E F2 | 	cmp	local02, ##4096 wz
2e180     18 00 90 5D |  if_ne	jmp	#LR__4353
2e184     08 4E 05 F1 | 	add	fp, #8
2e188     A7 28 02 FB | 	rdlong	local02, fp
2e18c     10 28 46 F5 | 	or	local02, #16
2e190     A7 28 62 FC | 	wrlong	local02, fp
2e194     08 4E 85 F1 | 	sub	fp, #8
2e198     AC 00 90 FD | 	jmp	#LR__4358
2e19c                 | LR__4353
2e19c     44 4E 05 F1 | 	add	fp, #68
2e1a0     A7 28 02 FB | 	rdlong	local02, fp
2e1a4     44 4E 85 F1 | 	sub	fp, #68
2e1a8     10 00 00 FF 
2e1ac     00 28 0E F2 | 	cmp	local02, ##8192 wz
2e1b0     44 4E 05 51 |  if_ne	add	fp, #68
2e1b4     A7 26 02 5B |  if_ne	rdlong	local01, fp
2e1b8     44 4E 85 51 |  if_ne	sub	fp, #68
2e1bc     18 00 00 5F 
2e1c0     00 26 0E 52 |  if_ne	cmp	local01, ##12288 wz
2e1c4     44 4E 05 51 |  if_ne	add	fp, #68
2e1c8     13 2B 02 56 |  if_ne	mov	local03, local01
2e1cc     44 4E 85 51 |  if_ne	sub	fp, #68
2e1d0     20 00 00 5F 
2e1d4     00 2A 0E 52 |  if_ne	cmp	local03, ##16384 wz
2e1d8     18 00 90 5D |  if_ne	jmp	#LR__4354
2e1dc     08 4E 05 F1 | 	add	fp, #8
2e1e0     A7 28 02 FB | 	rdlong	local02, fp
2e1e4     04 28 46 F5 | 	or	local02, #4
2e1e8     A7 28 62 FC | 	wrlong	local02, fp
2e1ec     08 4E 85 F1 | 	sub	fp, #8
2e1f0     54 00 90 FD | 	jmp	#LR__4357
2e1f4                 | LR__4354
2e1f4     18 4E 05 F1 | 	add	fp, #24
2e1f8     A7 28 02 FB | 	rdlong	local02, fp
2e1fc     18 4E 85 F1 | 	sub	fp, #24
2e200     92 28 CE F7 | 	test	local02, #146 wz
2e204     18 00 90 5D |  if_ne	jmp	#LR__4355
2e208     08 4E 05 F1 | 	add	fp, #8
2e20c     A7 28 02 FB | 	rdlong	local02, fp
2e210     01 28 46 F5 | 	or	local02, #1
2e214     A7 28 62 FC | 	wrlong	local02, fp
2e218     08 4E 85 F1 | 	sub	fp, #8
2e21c     28 00 90 FD | 	jmp	#LR__4356
2e220                 | LR__4355
2e220     44 4E 05 F1 | 	add	fp, #68
2e224     A7 2C 02 FB | 	rdlong	local04, fp
2e228     44 4E 85 F1 | 	sub	fp, #68
2e22c     08 00 00 FF 
2e230     00 2C 0E F2 | 	cmp	local04, ##4096 wz
2e234     08 4E 05 51 |  if_ne	add	fp, #8
2e238     A7 2C 02 5B |  if_ne	rdlong	local04, fp
2e23c     20 2C 46 55 |  if_ne	or	local04, #32
2e240     A7 2C 62 5C |  if_ne	wrlong	local04, fp
2e244     08 4E 85 51 |  if_ne	sub	fp, #8
2e248                 | LR__4356
2e248                 | LR__4357
2e248                 | LR__4358
2e248     08 4E 05 F1 | 	add	fp, #8
2e24c     A7 2C 02 FB | 	rdlong	local04, fp
2e250     08 4E 85 F1 | 	sub	fp, #8
2e254     03 00 00 FF 
2e258     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2e25c     F3 26 02 FB | 	rdlong	local01, ptr___system__dat__
2e260     03 00 00 FF 
2e264     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2e268     13 2D CA F7 | 	test	local04, local01 wz
2e26c     E0 FD 9F AD |  if_e	jmp	#LR__4351
2e270                 | LR__4359
2e270     0C 4E 05 F1 | 	add	fp, #12
2e274     A7 12 02 FB | 	rdlong	arg01, fp
2e278     0C 4E 85 F1 | 	sub	fp, #12
2e27c     09 2F 02 F6 | 	mov	local05, arg01
2e280     97 06 48 FB | 	callpa	#(@LR__4361-@LR__4360)>>2,fcache_load_ptr_
2e284                 | LR__4360
2e284     17 FB C9 FA | 	rdbyte	result1, local05 wz
2e288     01 2E 06 51 |  if_ne	add	local05, #1
2e28c     F4 FF 9F 5D |  if_ne	jmp	#LR__4360
2e290                 | LR__4361
2e290     17 13 C2 F2 | 	subr	arg01, local05
2e294     01 12 06 F1 | 	add	arg01, #1
2e298     20 E0 BF FD | 	call	#__system___gc_alloc_managed
2e29c     48 4E 05 F1 | 	add	fp, #72
2e2a0     A7 FA 61 FC | 	wrlong	result1, fp
2e2a4     48 4E 85 F1 | 	sub	fp, #72
2e2a8     00 FA 0D F2 | 	cmp	result1, #0 wz
2e2ac     18 00 90 AD |  if_e	jmp	#LR__4362
2e2b0     48 4E 05 F1 | 	add	fp, #72
2e2b4     A7 12 02 FB | 	rdlong	arg01, fp
2e2b8     3C 4E 85 F1 | 	sub	fp, #60
2e2bc     A7 14 02 FB | 	rdlong	arg02, fp
2e2c0     0C 4E 85 F1 | 	sub	fp, #12
2e2c4     00 9E BF FD | 	call	#__system____builtin_strcpy
2e2c8                 | LR__4362
2e2c8     48 4E 05 F1 | 	add	fp, #72
2e2cc     A7 FA 01 FB | 	rdlong	result1, fp
2e2d0     48 4E 85 F1 | 	sub	fp, #72
2e2d4                 | LR__4363
2e2d4     A7 F0 03 F6 | 	mov	ptra, fp
2e2d8     B2 00 A0 FD | 	call	#popregs_
2e2dc                 | __system___basic_dir_ret
2e2dc     2D 00 64 FD | 	ret
2e2e0                 | 
2e2e0                 | __system__pack_0696
2e2e0     09 01 02 F6 | 	mov	_var01, arg01
2e2e4     7F 16 06 F1 | 	add	arg03, #127
2e2e8     04 18 CE F7 | 	test	arg04, #4 wz
2e2ec     10 00 90 AD |  if_e	jmp	#LR__4370
2e2f0     00 00 0E F2 | 	cmp	_var01, #0 wz
2e2f4     16 00 C6 A9 |  if_e	decod	_var01, #22
2e2f8     F7 00 26 F4 | 	bith	_var01, #247
2e2fc     B4 00 90 FD | 	jmp	#LR__4379
2e300                 | LR__4370
2e300     02 18 CE F7 | 	test	arg04, #2 wz
2e304     00 C0 3F 5F 
2e308     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2e30c     00 14 06 56 |  if_ne	mov	arg02, #0
2e310     A0 00 90 5D |  if_ne	jmp	#LR__4378
2e314     08 18 CE F7 | 	test	arg04, #8 wz
2e318     00 00 06 56 |  if_ne	mov	_var01, #0
2e31c     94 00 90 5D |  if_ne	jmp	#LR__4377
2e320     FF 16 56 F2 | 	cmps	arg03, #255 wc
2e324     00 C0 3F 3F 
2e328     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
2e32c     00 14 06 36 |  if_ae	mov	arg02, #0
2e330     80 00 90 3D |  if_ae	jmp	#LR__4376
2e334     01 16 56 F2 | 	cmps	arg03, #1 wc
2e338     6C 00 90 3D |  if_ae	jmp	#LR__4374
2e33c     01 14 46 F0 | 	shr	arg02, #1
2e340     00 03 02 F6 | 	mov	_var02, _var01
2e344     01 02 06 F5 | 	and	_var02, #1
2e348     1F 02 66 F0 | 	shl	_var02, #31
2e34c     01 15 42 F5 | 	or	arg02, _var02
2e350     01 00 46 F0 | 	shr	_var01, #1
2e354     97 1E 48 FB | 	callpa	#(@LR__4372-@LR__4371)>>2,fcache_load_ptr_
2e358                 | LR__4371
2e358     00 16 56 F2 | 	cmps	arg03, #0 wc
2e35c     34 00 90 3D |  if_ae	jmp	#LR__4373
2e360     00 00 0E F2 | 	cmp	_var01, #0 wz
2e364     2C 00 90 AD |  if_e	jmp	#LR__4373
2e368     0A 13 02 F6 | 	mov	arg01, arg02
2e36c     01 12 06 F5 | 	and	arg01, #1
2e370     01 16 06 F1 | 	add	arg03, #1
2e374     01 14 46 F0 | 	shr	arg02, #1
2e378     00 03 02 F6 | 	mov	_var02, _var01
2e37c     01 02 06 F5 | 	and	_var02, #1
2e380     1F 02 66 F0 | 	shl	_var02, #31
2e384     01 15 42 F5 | 	or	arg02, _var02
2e388     09 15 42 F5 | 	or	arg02, arg01
2e38c     01 00 46 F0 | 	shr	_var01, #1
2e390     C4 FF 9F FD | 	jmp	#LR__4371
2e394                 | LR__4372
2e394                 | LR__4373
2e394     00 16 56 F2 | 	cmps	arg03, #0 wc
2e398     18 00 90 3D |  if_ae	jmp	#LR__4375
2e39c     00 14 0E F2 | 	cmp	arg02, #0 wz
2e3a0     6F 14 62 FD | 	wrnz	arg02
2e3a4     0C 00 90 FD | 	jmp	#LR__4375
2e3a8                 | LR__4374
2e3a8     17 01 06 F4 | 	bitl	_var01, #279
2e3ac     17 16 66 F0 | 	shl	arg03, #23
2e3b0     0B 01 42 F5 | 	or	_var01, arg03
2e3b4                 | LR__4375
2e3b4                 | LR__4376
2e3b4                 | LR__4377
2e3b4                 | LR__4378
2e3b4                 | LR__4379
2e3b4     01 00 CE F7 | 	test	_var01, #1 wz
2e3b8     01 14 46 55 |  if_ne	or	arg02, #1
2e3bc     0A 17 02 F6 | 	mov	arg03, arg02
2e3c0     00 02 06 F6 | 	mov	_var02, #0
2e3c4     FF FF 3F FF 
2e3c8     FF 15 06 F1 | 	add	arg02, ##2147483647
2e3cc     0B 15 12 F2 | 	cmp	arg02, arg03 wc
2e3d0     01 02 06 C6 |  if_b	mov	_var02, #1
2e3d4     01 01 02 F1 | 	add	_var01, _var02
2e3d8     01 18 CE F7 | 	test	arg04, #1 wz
2e3dc     1F 00 26 54 |  if_ne	bith	_var01, #31
2e3e0     00 FB 01 F6 | 	mov	result1, _var01
2e3e4                 | __system__pack_0696_ret
2e3e4     2D 00 64 FD | 	ret
2e3e8                 | 
2e3e8                 | __system___rxtxioctl_0786
2e3e8     00 15 0E F2 | 	cmp	arg02, #256 wz
2e3ec     0C 00 90 AD |  if_e	jmp	#LR__4380
2e3f0     01 15 0E F2 | 	cmp	arg02, #257 wz
2e3f4     1C 00 90 AD |  if_e	jmp	#LR__4381
2e3f8     30 00 90 FD | 	jmp	#LR__4382
2e3fc                 | LR__4380
2e3fc     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2e400     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2e404     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2e408     0B FB 61 FC | 	wrlong	result1, arg03
2e40c     00 FA 05 F6 | 	mov	result1, #0
2e410     28 00 90 FD | 	jmp	#LR__4383
2e414                 | LR__4381
2e414     0B 13 02 FB | 	rdlong	arg01, arg03
2e418     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2e41c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2e420     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2e424     00 FA 05 F6 | 	mov	result1, #0
2e428     10 00 90 FD | 	jmp	#LR__4383
2e42c                 | LR__4382
2e42c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2e430     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2e434     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2e438     01 FA 65 F6 | 	neg	result1, #1
2e43c                 | LR__4383
2e43c                 | __system___rxtxioctl_0786_ret
2e43c     2D 00 64 FD | 	ret
2e440                 | 
2e440                 | __system____dummy_flush_0787
2e440     00 FA 05 F6 | 	mov	result1, #0
2e444                 | __system____dummy_flush_0787_ret
2e444     2D 00 64 FD | 	ret
2e448                 | 
2e448                 | __system___vfswrite
2e448     09 4A 05 F6 | 	mov	COUNT_, #9
2e44c     A8 00 A0 FD | 	call	#pushregs_
2e450     09 27 02 F6 | 	mov	local01, arg01
2e454     0A 29 02 F6 | 	mov	local02, arg02
2e458     0B 2B 02 F6 | 	mov	local03, arg03
2e45c     14 2D 02 F6 | 	mov	local04, local02
2e460     08 26 06 F1 | 	add	local01, #8
2e464     13 13 02 FB | 	rdlong	arg01, local01
2e468     08 26 86 F1 | 	sub	local01, #8
2e46c     02 12 CE F7 | 	test	arg01, #2 wz
2e470     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2e474     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2e478     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2e47c     01 FA 65 A6 |  if_e	neg	result1, #1
2e480     80 01 90 AD |  if_e	jmp	#LR__4396
2e484     08 26 06 F1 | 	add	local01, #8
2e488     13 FB 01 FB | 	rdlong	result1, local01
2e48c     08 26 86 F1 | 	sub	local01, #8
2e490     40 FA CD F7 | 	test	result1, #64 wz
2e494     68 00 90 AD |  if_e	jmp	#LR__4391
2e498     08 26 06 F1 | 	add	local01, #8
2e49c     13 15 02 FB | 	rdlong	arg02, local01
2e4a0     08 26 86 F1 | 	sub	local01, #8
2e4a4     80 14 CE F7 | 	test	arg02, #128 wz
2e4a8     54 00 90 AD |  if_e	jmp	#LR__4390
2e4ac     30 26 06 F1 | 	add	local01, #48
2e4b0     13 2F 02 FB | 	rdlong	local05, local01
2e4b4     17 31 02 F6 | 	mov	local06, local05
2e4b8     30 26 86 F1 | 	sub	local01, #48
2e4bc     13 30 46 F7 | 	zerox	local06, #19
2e4c0     14 2E 46 F0 | 	shr	local05, #20
2e4c4     02 2E 66 F0 | 	shl	local05, #2
2e4c8     ED 2E 02 F1 | 	add	local05, __methods__
2e4cc     17 2F 02 FB | 	rdlong	local05, local05
2e4d0     13 13 02 F6 | 	mov	arg01, local01
2e4d4     00 14 06 F6 | 	mov	arg02, #0
2e4d8     02 16 06 F6 | 	mov	arg03, #2
2e4dc     F2 32 02 F6 | 	mov	local07, objptr
2e4e0     18 E5 01 F6 | 	mov	objptr, local06
2e4e4     2D 2E 62 FD | 	call	local05
2e4e8     19 E5 01 F6 | 	mov	objptr, local07
2e4ec     08 26 06 F1 | 	add	local01, #8
2e4f0     13 33 02 FB | 	rdlong	local07, local01
2e4f4     80 32 26 F5 | 	andn	local07, #128
2e4f8     13 33 62 FC | 	wrlong	local07, local01
2e4fc     08 26 86 F1 | 	sub	local01, #8
2e500                 | LR__4390
2e500                 | LR__4391
2e500     18 26 06 F1 | 	add	local01, #24
2e504     13 33 0A FB | 	rdlong	local07, local01 wz
2e508     18 26 86 F1 | 	sub	local01, #24
2e50c     80 00 90 AD |  if_e	jmp	#LR__4393
2e510     18 26 06 F1 | 	add	local01, #24
2e514     13 2F 02 FB | 	rdlong	local05, local01
2e518     17 31 02 F6 | 	mov	local06, local05
2e51c     18 26 86 F1 | 	sub	local01, #24
2e520     13 30 46 F7 | 	zerox	local06, #19
2e524     14 2E 46 F0 | 	shr	local05, #20
2e528     02 2E 66 F0 | 	shl	local05, #2
2e52c     ED 2E 02 F1 | 	add	local05, __methods__
2e530     17 2F 02 FB | 	rdlong	local05, local05
2e534     14 15 02 F6 | 	mov	arg02, local02
2e538     15 17 02 F6 | 	mov	arg03, local03
2e53c     13 13 02 F6 | 	mov	arg01, local01
2e540     F2 32 02 F6 | 	mov	local07, objptr
2e544     18 E5 01 F6 | 	mov	objptr, local06
2e548     2D 2E 62 FD | 	call	local05
2e54c     19 E5 01 F6 | 	mov	objptr, local07
2e550     FD 34 02 F6 | 	mov	local08, result1
2e554     00 34 56 F2 | 	cmps	local08, #0 wc
2e558     2C 00 90 3D |  if_ae	jmp	#LR__4392
2e55c     08 26 06 F1 | 	add	local01, #8
2e560     13 33 02 FB | 	rdlong	local07, local01
2e564     20 32 46 F5 | 	or	local07, #32
2e568     13 33 62 FC | 	wrlong	local07, local01
2e56c     00 34 4E F2 | 	cmps	local08, #0 wz
2e570     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2e574     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
2e578     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2e57c     01 FA 65 56 |  if_ne	neg	result1, #1
2e580     00 FA 05 A6 |  if_e	mov	result1, #0
2e584     7C 00 90 FD | 	jmp	#LR__4396
2e588                 | LR__4392
2e588     1A FB 01 F6 | 	mov	result1, local08
2e58c     74 00 90 FD | 	jmp	#LR__4396
2e590                 | LR__4393
2e590     1C 26 06 F1 | 	add	local01, #28
2e594     13 37 0A FB | 	rdlong	local09, local01 wz
2e598     1C 26 86 F1 | 	sub	local01, #28
2e59c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2e5a0     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2e5a4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2e5a8     01 FA 65 A6 |  if_e	neg	result1, #1
2e5ac     54 00 90 AD |  if_e	jmp	#LR__4396
2e5b0     00 34 06 F6 | 	mov	local08, #0
2e5b4                 | LR__4394
2e5b4     01 2A 16 F2 | 	cmp	local03, #1 wc
2e5b8     44 00 90 CD |  if_b	jmp	#LR__4395
2e5bc     1B 31 02 F6 | 	mov	local06, local09
2e5c0     1B 2F 02 F6 | 	mov	local05, local09
2e5c4     13 30 46 F7 | 	zerox	local06, #19
2e5c8     14 2E 46 F0 | 	shr	local05, #20
2e5cc     02 2E 66 F0 | 	shl	local05, #2
2e5d0     ED 2E 02 F1 | 	add	local05, __methods__
2e5d4     17 2F 02 FB | 	rdlong	local05, local05
2e5d8     16 13 C2 FA | 	rdbyte	arg01, local04
2e5dc     13 15 02 F6 | 	mov	arg02, local01
2e5e0     F2 32 02 F6 | 	mov	local07, objptr
2e5e4     18 E5 01 F6 | 	mov	objptr, local06
2e5e8     01 2C 06 F1 | 	add	local04, #1
2e5ec     2D 2E 62 FD | 	call	local05
2e5f0     19 E5 01 F6 | 	mov	objptr, local07
2e5f4     FD 34 02 F1 | 	add	local08, result1
2e5f8     01 2A 86 F1 | 	sub	local03, #1
2e5fc     B4 FF 9F FD | 	jmp	#LR__4394
2e600                 | LR__4395
2e600     1A FB 01 F6 | 	mov	result1, local08
2e604                 | LR__4396
2e604     A7 F0 03 F6 | 	mov	ptra, fp
2e608     B2 00 A0 FD | 	call	#popregs_
2e60c                 | __system___vfswrite_ret
2e60c     2D 00 64 FD | 	ret
2e610                 | 
2e610                 | __system___vfsread
2e610     03 4A 05 F6 | 	mov	COUNT_, #3
2e614     A8 00 A0 FD | 	call	#pushregs_
2e618     28 F0 07 F1 | 	add	ptra, #40
2e61c     04 4E 05 F1 | 	add	fp, #4
2e620     A7 12 62 FC | 	wrlong	arg01, fp
2e624     04 4E 05 F1 | 	add	fp, #4
2e628     A7 14 62 FC | 	wrlong	arg02, fp
2e62c     04 4E 05 F1 | 	add	fp, #4
2e630     A7 16 62 FC | 	wrlong	arg03, fp
2e634     04 4E 85 F1 | 	sub	fp, #4
2e638     A7 FA 01 FB | 	rdlong	result1, fp
2e63c     14 4E 05 F1 | 	add	fp, #20
2e640     A7 FA 61 FC | 	wrlong	result1, fp
2e644     04 4E 05 F1 | 	add	fp, #4
2e648     A7 00 68 FC | 	wrlong	#0, fp
2e64c     1C 4E 85 F1 | 	sub	fp, #28
2e650     A7 12 02 FB | 	rdlong	arg01, fp
2e654     04 4E 85 F1 | 	sub	fp, #4
2e658     08 12 06 F1 | 	add	arg01, #8
2e65c     09 FB 01 FB | 	rdlong	result1, arg01
2e660     01 FA CD F7 | 	test	result1, #1 wz
2e664     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2e668     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2e66c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2e670     01 FA 65 A6 |  if_e	neg	result1, #1
2e674     74 02 90 AD |  if_e	jmp	#LR__4406
2e678     04 4E 05 F1 | 	add	fp, #4
2e67c     A7 12 02 FB | 	rdlong	arg01, fp
2e680     04 4E 85 F1 | 	sub	fp, #4
2e684     14 12 06 F1 | 	add	arg01, #20
2e688     09 FB 09 FB | 	rdlong	result1, arg01 wz
2e68c     B8 00 90 AD |  if_e	jmp	#LR__4401
2e690     04 4E 05 F1 | 	add	fp, #4
2e694     A7 12 02 FB | 	rdlong	arg01, fp
2e698     09 17 02 F6 | 	mov	arg03, arg01
2e69c     14 16 06 F1 | 	add	arg03, #20
2e6a0     0B 27 02 FB | 	rdlong	local01, arg03
2e6a4     13 29 02 F6 | 	mov	local02, local01
2e6a8     13 26 46 F7 | 	zerox	local01, #19
2e6ac     14 28 46 F0 | 	shr	local02, #20
2e6b0     02 28 66 F0 | 	shl	local02, #2
2e6b4     ED 28 02 F1 | 	add	local02, __methods__
2e6b8     14 29 02 FB | 	rdlong	local02, local02
2e6bc     04 4E 05 F1 | 	add	fp, #4
2e6c0     A7 14 02 FB | 	rdlong	arg02, fp
2e6c4     04 4E 05 F1 | 	add	fp, #4
2e6c8     A7 16 02 FB | 	rdlong	arg03, fp
2e6cc     0C 4E 85 F1 | 	sub	fp, #12
2e6d0     F2 2A 02 F6 | 	mov	local03, objptr
2e6d4     13 E5 01 F6 | 	mov	objptr, local01
2e6d8     2D 28 62 FD | 	call	local02
2e6dc     15 E5 01 F6 | 	mov	objptr, local03
2e6e0     10 4E 05 F1 | 	add	fp, #16
2e6e4     A7 FA 61 FC | 	wrlong	result1, fp
2e6e8     10 4E 85 F1 | 	sub	fp, #16
2e6ec     00 FA 55 F2 | 	cmps	result1, #0 wc
2e6f0     44 00 90 3D |  if_ae	jmp	#LR__4400
2e6f4     04 4E 05 F1 | 	add	fp, #4
2e6f8     A7 2A 02 FB | 	rdlong	local03, fp
2e6fc     15 27 02 F6 | 	mov	local01, local03
2e700     08 2A 06 F1 | 	add	local03, #8
2e704     15 29 02 FB | 	rdlong	local02, local03
2e708     20 28 46 F5 | 	or	local02, #32
2e70c     08 26 06 F1 | 	add	local01, #8
2e710     13 29 62 FC | 	wrlong	local02, local01
2e714     0C 4E 05 F1 | 	add	fp, #12
2e718     A7 12 0A FB | 	rdlong	arg01, fp wz
2e71c     10 4E 85 F1 | 	sub	fp, #16
2e720     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2e724     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2e728     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2e72c     01 FA 65 56 |  if_ne	neg	result1, #1
2e730     00 FA 05 A6 |  if_e	mov	result1, #0
2e734     B4 01 90 FD | 	jmp	#LR__4406
2e738                 | LR__4400
2e738     10 4E 05 F1 | 	add	fp, #16
2e73c     A7 FA 01 FB | 	rdlong	result1, fp
2e740     10 4E 85 F1 | 	sub	fp, #16
2e744     A4 01 90 FD | 	jmp	#LR__4406
2e748                 | LR__4401
2e748     04 4E 05 F1 | 	add	fp, #4
2e74c     A7 12 02 FB | 	rdlong	arg01, fp
2e750     20 12 06 F1 | 	add	arg01, #32
2e754     09 13 0A FB | 	rdlong	arg01, arg01 wz
2e758     14 4E 05 F1 | 	add	fp, #20
2e75c     A7 12 62 FC | 	wrlong	arg01, fp
2e760     18 4E 85 F1 | 	sub	fp, #24
2e764     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2e768     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2e76c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2e770     01 FA 65 A6 |  if_e	neg	result1, #1
2e774     74 01 90 AD |  if_e	jmp	#LR__4406
2e778     04 4E 05 F1 | 	add	fp, #4
2e77c     A7 2A 02 FB | 	rdlong	local03, fp
2e780     04 4E 85 F1 | 	sub	fp, #4
2e784     28 2A 06 F1 | 	add	local03, #40
2e788     15 29 0A FB | 	rdlong	local02, local03 wz
2e78c     7C 00 90 AD |  if_e	jmp	#LR__4403
2e790     04 4E 05 F1 | 	add	fp, #4
2e794     A7 12 02 FB | 	rdlong	arg01, fp
2e798     09 2B 02 F6 | 	mov	local03, arg01
2e79c     28 2A 06 F1 | 	add	local03, #40
2e7a0     15 27 02 FB | 	rdlong	local01, local03
2e7a4     13 29 02 F6 | 	mov	local02, local01
2e7a8     13 26 46 F7 | 	zerox	local01, #19
2e7ac     14 28 46 F0 | 	shr	local02, #20
2e7b0     02 28 66 F0 | 	shl	local02, #2
2e7b4     ED 28 02 F1 | 	add	local02, __methods__
2e7b8     14 29 02 FB | 	rdlong	local02, local02
2e7bc     20 4E 05 F1 | 	add	fp, #32
2e7c0     A7 16 02 F6 | 	mov	arg03, fp
2e7c4     24 4E 85 F1 | 	sub	fp, #36
2e7c8     00 15 06 F6 | 	mov	arg02, #256
2e7cc     F2 2A 02 F6 | 	mov	local03, objptr
2e7d0     13 E5 01 F6 | 	mov	objptr, local01
2e7d4     2D 28 62 FD | 	call	local02
2e7d8     15 E5 01 F6 | 	mov	objptr, local03
2e7dc     10 4E 05 F1 | 	add	fp, #16
2e7e0     A7 FA 61 FC | 	wrlong	result1, fp
2e7e4     00 FA 4D F2 | 	cmps	result1, #0 wz
2e7e8     10 4E 85 F1 | 	sub	fp, #16
2e7ec     1C 00 90 5D |  if_ne	jmp	#LR__4402
2e7f0     24 4E 05 F1 | 	add	fp, #36
2e7f4     A7 28 02 FB | 	rdlong	local02, fp
2e7f8     24 4E 85 F1 | 	sub	fp, #36
2e7fc     02 28 CE F7 | 	test	local02, #2 wz
2e800     20 4E 05 51 |  if_ne	add	fp, #32
2e804     A7 02 68 5C |  if_ne	wrlong	#1, fp
2e808     20 4E 85 51 |  if_ne	sub	fp, #32
2e80c                 | LR__4402
2e80c                 | LR__4403
2e80c     10 4E 05 F1 | 	add	fp, #16
2e810     A7 00 68 FC | 	wrlong	#0, fp
2e814     10 4E 85 F1 | 	sub	fp, #16
2e818                 | LR__4404
2e818     0C 4E 05 F1 | 	add	fp, #12
2e81c     A7 2A 02 FB | 	rdlong	local03, fp
2e820     0C 4E 85 F1 | 	sub	fp, #12
2e824     01 2A 16 F2 | 	cmp	local03, #1 wc
2e828     B4 00 90 CD |  if_b	jmp	#LR__4405
2e82c     18 4E 05 F1 | 	add	fp, #24
2e830     A7 28 02 FB | 	rdlong	local02, fp
2e834     14 2B 02 F6 | 	mov	local03, local02
2e838     13 2A 46 F7 | 	zerox	local03, #19
2e83c     14 28 46 F0 | 	shr	local02, #20
2e840     02 28 66 F0 | 	shl	local02, #2
2e844     ED 28 02 F1 | 	add	local02, __methods__
2e848     14 29 02 FB | 	rdlong	local02, local02
2e84c     14 4E 85 F1 | 	sub	fp, #20
2e850     A7 12 02 FB | 	rdlong	arg01, fp
2e854     04 4E 85 F1 | 	sub	fp, #4
2e858     F2 26 02 F6 | 	mov	local01, objptr
2e85c     15 E5 01 F6 | 	mov	objptr, local03
2e860     2D 28 62 FD | 	call	local02
2e864     13 E5 01 F6 | 	mov	objptr, local01
2e868     14 4E 05 F1 | 	add	fp, #20
2e86c     A7 FA 61 FC | 	wrlong	result1, fp
2e870     14 4E 85 F1 | 	sub	fp, #20
2e874     00 FA 55 F2 | 	cmps	result1, #0 wc
2e878     64 00 90 CD |  if_b	jmp	#LR__4405
2e87c     1C 4E 05 F1 | 	add	fp, #28
2e880     A7 2A 02 FB | 	rdlong	local03, fp
2e884     15 29 02 F6 | 	mov	local02, local03
2e888     01 28 06 F1 | 	add	local02, #1
2e88c     A7 28 62 FC | 	wrlong	local02, fp
2e890     08 4E 85 F1 | 	sub	fp, #8
2e894     A7 28 02 FB | 	rdlong	local02, fp
2e898     15 29 42 FC | 	wrbyte	local02, local03
2e89c     04 4E 85 F1 | 	sub	fp, #4
2e8a0     A7 2A 02 FB | 	rdlong	local03, fp
2e8a4     01 2A 06 F1 | 	add	local03, #1
2e8a8     A7 2A 62 FC | 	wrlong	local03, fp
2e8ac     04 4E 85 F1 | 	sub	fp, #4
2e8b0     A7 2A 02 FB | 	rdlong	local03, fp
2e8b4     01 2A 86 F1 | 	sub	local03, #1
2e8b8     A7 2A 62 FC | 	wrlong	local03, fp
2e8bc     14 4E 05 F1 | 	add	fp, #20
2e8c0     A7 2A 0A FB | 	rdlong	local03, fp wz
2e8c4     20 4E 85 F1 | 	sub	fp, #32
2e8c8     4C FF 9F AD |  if_e	jmp	#LR__4404
2e8cc     14 4E 05 F1 | 	add	fp, #20
2e8d0     A7 28 02 FB | 	rdlong	local02, fp
2e8d4     14 4E 85 F1 | 	sub	fp, #20
2e8d8     0A 28 0E F2 | 	cmp	local02, #10 wz
2e8dc     38 FF 9F 5D |  if_ne	jmp	#LR__4404
2e8e0                 | LR__4405
2e8e0     10 4E 05 F1 | 	add	fp, #16
2e8e4     A7 FA 01 FB | 	rdlong	result1, fp
2e8e8     10 4E 85 F1 | 	sub	fp, #16
2e8ec                 | LR__4406
2e8ec     A7 F0 03 F6 | 	mov	ptra, fp
2e8f0     B2 00 A0 FD | 	call	#popregs_
2e8f4                 | __system___vfsread_ret
2e8f4     2D 00 64 FD | 	ret
2e8f8                 | 
2e8f8                 | __system____default_filbuf
2e8f8     04 4A 05 F6 | 	mov	COUNT_, #4
2e8fc     A8 00 A0 FD | 	call	#pushregs_
2e900     09 27 02 F6 | 	mov	local01, arg01
2e904     13 29 02 FB | 	rdlong	local02, local01
2e908     0C 28 06 F1 | 	add	local02, #12
2e90c     14 FB 09 FB | 	rdlong	result1, local02 wz
2e910     0C 28 86 F1 | 	sub	local02, #12
2e914     20 00 90 5D |  if_ne	jmp	#LR__4410
2e918     14 28 06 F1 | 	add	local02, #20
2e91c     14 FB 01 F6 | 	mov	result1, local02
2e920     04 28 86 F1 | 	sub	local02, #4
2e924     14 FB 61 FC | 	wrlong	result1, local02
2e928     04 28 86 F1 | 	sub	local02, #4
2e92c     02 00 80 FF 
2e930     14 01 68 FC | 	wrlong	##1024, local02
2e934     0C 28 86 F1 | 	sub	local02, #12
2e938                 | LR__4410
2e938     14 26 06 F1 | 	add	local01, #20
2e93c     13 2B 02 FB | 	rdlong	local03, local01
2e940     15 2D 02 F6 | 	mov	local04, local03
2e944     14 26 86 F1 | 	sub	local01, #20
2e948     13 2C 46 F7 | 	zerox	local04, #19
2e94c     14 2A 46 F0 | 	shr	local03, #20
2e950     02 2A 66 F0 | 	shl	local03, #2
2e954     ED 2A 02 F1 | 	add	local03, __methods__
2e958     15 2B 02 FB | 	rdlong	local03, local03
2e95c     10 28 06 F1 | 	add	local02, #16
2e960     14 15 02 FB | 	rdlong	arg02, local02
2e964     04 28 86 F1 | 	sub	local02, #4
2e968     14 17 02 FB | 	rdlong	arg03, local02
2e96c     0C 28 86 F1 | 	sub	local02, #12
2e970     13 13 02 F6 | 	mov	arg01, local01
2e974     F2 26 02 F6 | 	mov	local01, objptr
2e978     16 E5 01 F6 | 	mov	objptr, local04
2e97c     2D 2A 62 FD | 	call	local03
2e980     13 E5 01 F6 | 	mov	objptr, local01
2e984     FD 2C 02 F6 | 	mov	local04, result1
2e988     00 2C 56 F2 | 	cmps	local04, #0 wc
2e98c     01 FA 65 C6 |  if_b	neg	result1, #1
2e990     28 00 90 CD |  if_b	jmp	#LR__4411
2e994     14 2D 62 FC | 	wrlong	local04, local02
2e998     10 28 06 F1 | 	add	local02, #16
2e99c     14 2B 02 FB | 	rdlong	local03, local02
2e9a0     0C 28 86 F1 | 	sub	local02, #12
2e9a4     14 2B 62 FC | 	wrlong	local03, local02
2e9a8     04 28 06 F1 | 	add	local02, #4
2e9ac     14 2B 02 FB | 	rdlong	local03, local02
2e9b0     01 2A 46 F5 | 	or	local03, #1
2e9b4     14 2B 62 FC | 	wrlong	local03, local02
2e9b8     16 FB 01 F6 | 	mov	result1, local04
2e9bc                 | LR__4411
2e9bc     A7 F0 03 F6 | 	mov	ptra, fp
2e9c0     B2 00 A0 FD | 	call	#popregs_
2e9c4                 | __system____default_filbuf_ret
2e9c4     2D 00 64 FD | 	ret
2e9c8                 | 
2e9c8                 | __system__getlower_1176
2e9c8     41 12 56 F2 | 	cmps	arg01, #65 wc
2e9cc     10 00 90 CD |  if_b	jmp	#LR__4420
2e9d0     5B 12 56 F2 | 	cmps	arg01, #91 wc
2e9d4     09 FB 01 C6 |  if_b	mov	result1, arg01
2e9d8     20 FA 05 C1 |  if_b	add	result1, #32
2e9dc     04 00 90 CD |  if_b	jmp	#__system__getlower_1176_ret
2e9e0                 | LR__4420
2e9e0     09 FB 01 F6 | 	mov	result1, arg01
2e9e4                 | __system__getlower_1176_ret
2e9e4     2D 00 64 FD | 	ret
2e9e8                 | 
2e9e8                 | __system___pat_match
2e9e8     08 4A 05 F6 | 	mov	COUNT_, #8
2e9ec     A8 00 A0 FD | 	call	#pushregs_
2e9f0     09 27 02 F6 | 	mov	local01, arg01
2e9f4                 | LR__4430
2e9f4     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
2e9f8     13 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
2e9fc     0A 29 C2 5A |  if_ne	rdbyte	local02, arg02
2ea00     2A 28 0E 52 |  if_ne	cmp	local02, #42 wz
2ea04     2C 00 90 AD |  if_e	jmp	#LR__4431
2ea08     0A 13 C2 FA | 	rdbyte	arg01, arg02
2ea0c     B8 FF BF FD | 	call	#__system__getlower_1176
2ea10     FD 2A 02 F6 | 	mov	local03, result1
2ea14     13 13 C2 FA | 	rdbyte	arg01, local01
2ea18     AC FF BF FD | 	call	#__system__getlower_1176
2ea1c     15 FB 09 F2 | 	cmp	result1, local03 wz
2ea20     00 FA 05 56 |  if_ne	mov	result1, #0
2ea24     00 01 90 5D |  if_ne	jmp	#LR__4440
2ea28     01 26 06 F1 | 	add	local01, #1
2ea2c     01 14 06 F1 | 	add	arg02, #1
2ea30     C0 FF 9F FD | 	jmp	#LR__4430
2ea34                 | LR__4431
2ea34     0A 2B C2 FA | 	rdbyte	local03, arg02
2ea38     2A 2A 0E F2 | 	cmp	local03, #42 wz
2ea3c     D8 00 90 5D |  if_ne	jmp	#LR__4439
2ea40     01 14 06 F1 | 	add	arg02, #1
2ea44     0A 29 C2 FA | 	rdbyte	local02, arg02
2ea48     01 14 86 F1 | 	sub	arg02, #1
2ea4c     2E 28 0E F2 | 	cmp	local02, #46 wz
2ea50     28 00 90 5D |  if_ne	jmp	#LR__4432
2ea54     02 14 06 F1 | 	add	arg02, #2
2ea58     0A 29 C2 FA | 	rdbyte	local02, arg02
2ea5c     02 14 86 F1 | 	sub	arg02, #2
2ea60     2A 28 0E F2 | 	cmp	local02, #42 wz
2ea64     03 14 06 A1 |  if_e	add	arg02, #3
2ea68     0A 2D C2 AA |  if_e	rdbyte	local04, arg02
2ea6c     03 14 86 A1 |  if_e	sub	arg02, #3
2ea70     16 2F 0A A6 |  if_e	mov	local05, local04 wz
2ea74     01 FA 05 A6 |  if_e	mov	result1, #1
2ea78     AC 00 90 AD |  if_e	jmp	#LR__4440
2ea7c                 | LR__4432
2ea7c     01 14 06 F1 | 	add	arg02, #1
2ea80     00 30 06 F6 | 	mov	local06, #0
2ea84     97 0E 48 FB | 	callpa	#(@LR__4434-@LR__4433)>>2,fcache_load_ptr_
2ea88                 | LR__4433
2ea88     18 33 02 F6 | 	mov	local07, local06
2ea8c     0A 33 02 F1 | 	add	local07, arg02
2ea90     19 33 CA FA | 	rdbyte	local07, local07 wz
2ea94     18 2F 02 56 |  if_ne	mov	local05, local06
2ea98     01 2E 06 51 |  if_ne	add	local05, #1
2ea9c     17 31 02 56 |  if_ne	mov	local06, local05
2eaa0     E4 FF 9F 5D |  if_ne	jmp	#LR__4433
2eaa4                 | LR__4434
2eaa4     00 34 06 F6 | 	mov	local08, #0
2eaa8     97 0E 48 FB | 	callpa	#(@LR__4436-@LR__4435)>>2,fcache_load_ptr_
2eaac                 | LR__4435
2eaac     1A 33 02 F6 | 	mov	local07, local08
2eab0     13 33 02 F1 | 	add	local07, local01
2eab4     19 33 CA FA | 	rdbyte	local07, local07 wz
2eab8     1A 2F 02 56 |  if_ne	mov	local05, local08
2eabc     01 2E 06 51 |  if_ne	add	local05, #1
2eac0     17 35 02 56 |  if_ne	mov	local08, local05
2eac4     E4 FF 9F 5D |  if_ne	jmp	#LR__4435
2eac8                 | LR__4436
2eac8     18 35 52 F2 | 	cmps	local08, local06 wc
2eacc     00 FA 05 C6 |  if_b	mov	result1, #0
2ead0     54 00 90 CD |  if_b	jmp	#LR__4440
2ead4     1A 29 02 F6 | 	mov	local02, local08
2ead8     18 29 82 F1 | 	sub	local02, local06
2eadc     14 27 02 F1 | 	add	local01, local02
2eae0                 | LR__4437
2eae0     01 30 56 F2 | 	cmps	local06, #1 wc
2eae4     30 00 90 CD |  if_b	jmp	#LR__4438
2eae8     13 13 C2 FA | 	rdbyte	arg01, local01
2eaec     D8 FE BF FD | 	call	#__system__getlower_1176
2eaf0     FD 34 02 F6 | 	mov	local08, result1
2eaf4     0A 13 C2 FA | 	rdbyte	arg01, arg02
2eaf8     CC FE BF FD | 	call	#__system__getlower_1176
2eafc     FD 34 0A F2 | 	cmp	local08, result1 wz
2eb00     00 FA 05 56 |  if_ne	mov	result1, #0
2eb04     20 00 90 5D |  if_ne	jmp	#LR__4440
2eb08     01 26 06 F1 | 	add	local01, #1
2eb0c     01 14 06 F1 | 	add	arg02, #1
2eb10     01 30 86 F1 | 	sub	local06, #1
2eb14     C8 FF 9F FD | 	jmp	#LR__4437
2eb18                 | LR__4438
2eb18                 | LR__4439
2eb18     0A 35 CA FA | 	rdbyte	local08, arg02 wz
2eb1c     13 33 CA AA |  if_e	rdbyte	local07, local01 wz
2eb20     01 FA 05 A6 |  if_e	mov	result1, #1
2eb24     00 FA 05 56 |  if_ne	mov	result1, #0
2eb28                 | LR__4440
2eb28     A7 F0 03 F6 | 	mov	ptra, fp
2eb2c     B2 00 A0 FD | 	call	#popregs_
2eb30                 | __system___pat_match_ret
2eb30     2D 00 64 FD | 	ret
2eb34                 | 
2eb34                 | _fatfs_cc_ff_uni2oem
2eb34     00 00 06 F6 | 	mov	_var01, #0
2eb38     80 12 16 F2 | 	cmp	arg01, #128 wc
2eb3c     09 01 02 C6 |  if_b	mov	_var01, arg01
2eb40     58 00 90 CD |  if_b	jmp	#LR__4454
2eb44     80 00 00 FF 
2eb48     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2eb4c     4C 00 90 3D |  if_ae	jmp	#LR__4453
2eb50     0A FB 31 F9 | 	getword	result1, arg02, #0
2eb54     01 00 00 FF 
2eb58     52 FB 0D F2 | 	cmp	result1, ##850 wz
2eb5c     3C 00 90 5D |  if_ne	jmp	#LR__4453
2eb60                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2eb60     00 00 06 F6 | 	mov	_var01, #0
2eb64     97 14 48 FB | 	callpa	#(@LR__4451-@LR__4450)>>2,fcache_load_ptr_
2eb68                 | LR__4450
2eb68     00 FB 31 F9 | 	getword	result1, _var01, #0
2eb6c     80 FA 15 F2 | 	cmp	result1, #128 wc
2eb70     1C 00 90 3D |  if_ae	jmp	#LR__4452
2eb74     00 FB 31 F9 | 	getword	result1, _var01, #0
2eb78     01 FA 65 F0 | 	shl	result1, #1
2eb7c     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
2eb80     FD FA E1 FA | 	rdword	result1, result1
2eb84     FD 12 0A F2 | 	cmp	arg01, result1 wz
2eb88     01 00 06 51 |  if_ne	add	_var01, #1
2eb8c     D8 FF 9F 5D |  if_ne	jmp	#LR__4450
2eb90                 | LR__4451
2eb90                 | LR__4452
2eb90     00 01 32 F9 | 	getword	_var01, _var01, #0
2eb94     80 00 06 F1 | 	add	_var01, #128
2eb98     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2eb9c                 | LR__4453
2eb9c                 | LR__4454
2eb9c                 | ' 			c = (c + 0x80) & 0xFF;
2eb9c                 | ' 		}
2eb9c                 | ' 	}
2eb9c                 | ' 
2eb9c                 | ' 	return c;
2eb9c     00 FB 01 F6 | 	mov	result1, _var01
2eba0                 | _fatfs_cc_ff_uni2oem_ret
2eba0     2D 00 64 FD | 	ret
2eba4                 | 
2eba4                 | _fatfs_cc_ff_oem2uni
2eba4     00 00 06 F6 | 	mov	_var01, #0
2eba8     09 FB 31 F9 | 	getword	result1, arg01, #0
2ebac     80 FA 15 F2 | 	cmp	result1, #128 wc
2ebb0     09 01 02 C6 |  if_b	mov	_var01, arg01
2ebb4     2C 00 90 CD |  if_b	jmp	#LR__4461
2ebb8     0A 15 32 F9 | 	getword	arg02, arg02, #0
2ebbc     01 00 00 FF 
2ebc0     52 15 0E F2 | 	cmp	arg02, ##850 wz
2ebc4     1C 00 90 5D |  if_ne	jmp	#LR__4460
2ebc8     09 FB 31 F9 | 	getword	result1, arg01, #0
2ebcc     00 FB 15 F2 | 	cmp	result1, #256 wc
2ebd0     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
2ebd4     80 12 86 C1 |  if_b	sub	arg01, #128
2ebd8     01 12 66 C0 |  if_b	shl	arg01, #1
2ebdc     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2ebe0     09 01 E2 CA |  if_b	rdword	_var01, arg01
2ebe4                 | LR__4460
2ebe4                 | LR__4461
2ebe4                 | ' 		}
2ebe4                 | ' 	}
2ebe4                 | ' 
2ebe4                 | ' 	return c;
2ebe4     00 FB 01 F6 | 	mov	result1, _var01
2ebe8                 | _fatfs_cc_ff_oem2uni_ret
2ebe8     2D 00 64 FD | 	ret
2ebec                 | 
2ebec                 | _fatfs_cc_ff_wtoupper
2ebec     09 01 02 F6 | 	mov	_var01, arg01
2ebf0     80 00 00 FF 
2ebf4     00 00 16 F2 | 	cmp	_var01, ##65536 wc
2ebf8     60 01 90 3D |  if_ae	jmp	#LR__4483
2ebfc     00 03 02 F6 | 	mov	_var02, _var01
2ec00     01 01 32 F9 | 	getword	_var01, _var02, #0
2ec04     08 00 00 FF 
2ec08     00 00 16 F2 | 	cmp	_var01, ##4096 wc
2ec0c     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
2ec10     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2ec14     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
2ec18     01 00 00 3F 
2ec1c     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
2ec20     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2ec24     01 00 00 3F 
2ec28     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2ec2c     02 07 02 F6 | 	mov	_var04, _var03
2ec30                 | ' 		uc = (WORD)uni;
2ec30                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2ec30                 | ' 		for (;;) {
2ec30                 | LR__4470
2ec30     03 09 E2 FA | 	rdword	_var05, _var04
2ec34     04 05 02 F6 | 	mov	_var03, _var05
2ec38     0F 04 4E F7 | 	zerox	_var03, #15 wz
2ec3c     02 06 06 F1 | 	add	_var04, #2
2ec40     14 01 90 AD |  if_e	jmp	#LR__4482
2ec44     01 05 32 F9 | 	getword	_var03, _var02, #0
2ec48     04 01 32 F9 | 	getword	_var01, _var05, #0
2ec4c     00 05 12 F2 | 	cmp	_var03, _var01 wc
2ec50     04 01 90 CD |  if_b	jmp	#LR__4482
2ec54     03 0B E2 FA | 	rdword	_var06, _var04
2ec58     05 0D 32 F9 | 	getword	_var07, _var06, #0
2ec5c     08 0C 46 F0 | 	shr	_var07, #8
2ec60     05 0B 32 F9 | 	getword	_var06, _var06, #0
2ec64     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
2ec68     01 05 32 F9 | 	getword	_var03, _var02, #0
2ec6c     04 0F 32 F9 | 	getword	_var08, _var05, #0
2ec70     05 01 32 F9 | 	getword	_var01, _var06, #0
2ec74     00 0F 02 F1 | 	add	_var08, _var01
2ec78     07 05 52 F2 | 	cmps	_var03, _var08 wc
2ec7c     02 06 06 F1 | 	add	_var04, #2
2ec80     C4 00 90 3D |  if_ae	jmp	#LR__4481
2ec84                 | ' 				switch (cmd) {
2ec84     06 11 32 F9 | 	getword	_var09, _var07, #0
2ec88     09 10 26 F3 | 	fle	_var09, #9
2ec8c     30 10 62 FD | 	jmprel	_var09
2ec90                 | LR__4471
2ec90     24 00 90 FD | 	jmp	#LR__4472
2ec94     3C 00 90 FD | 	jmp	#LR__4473
2ec98     54 00 90 FD | 	jmp	#LR__4474
2ec9c     5C 00 90 FD | 	jmp	#LR__4475
2eca0     64 00 90 FD | 	jmp	#LR__4476
2eca4     6C 00 90 FD | 	jmp	#LR__4477
2eca8     74 00 90 FD | 	jmp	#LR__4478
2ecac     7C 00 90 FD | 	jmp	#LR__4479
2ecb0     84 00 90 FD | 	jmp	#LR__4480
2ecb4     A0 00 90 FD | 	jmp	#LR__4482
2ecb8                 | LR__4472
2ecb8     01 03 32 F9 | 	getword	_var02, _var02, #0
2ecbc     04 09 32 F9 | 	getword	_var05, _var05, #0
2ecc0     04 03 82 F1 | 	sub	_var02, _var05
2ecc4     01 02 66 F0 | 	shl	_var02, #1
2ecc8     03 03 02 F1 | 	add	_var02, _var04
2eccc     01 03 E2 FA | 	rdword	_var02, _var02
2ecd0     84 00 90 FD | 	jmp	#LR__4482
2ecd4                 | LR__4473
2ecd4     01 05 32 F9 | 	getword	_var03, _var02, #0
2ecd8     01 03 32 F9 | 	getword	_var02, _var02, #0
2ecdc     04 09 32 F9 | 	getword	_var05, _var05, #0
2ece0     04 03 82 F1 | 	sub	_var02, _var05
2ece4     01 02 06 F5 | 	and	_var02, #1
2ece8     02 03 C2 F2 | 	subr	_var02, _var03
2ecec     68 00 90 FD | 	jmp	#LR__4482
2ecf0                 | LR__4474
2ecf0     01 03 32 F9 | 	getword	_var02, _var02, #0
2ecf4     10 02 86 F1 | 	sub	_var02, #16
2ecf8     5C 00 90 FD | 	jmp	#LR__4482
2ecfc                 | LR__4475
2ecfc     01 03 32 F9 | 	getword	_var02, _var02, #0
2ed00     20 02 86 F1 | 	sub	_var02, #32
2ed04     50 00 90 FD | 	jmp	#LR__4482
2ed08                 | LR__4476
2ed08     01 03 32 F9 | 	getword	_var02, _var02, #0
2ed0c     30 02 86 F1 | 	sub	_var02, #48
2ed10     44 00 90 FD | 	jmp	#LR__4482
2ed14                 | LR__4477
2ed14     01 03 32 F9 | 	getword	_var02, _var02, #0
2ed18     1A 02 86 F1 | 	sub	_var02, #26
2ed1c     38 00 90 FD | 	jmp	#LR__4482
2ed20                 | LR__4478
2ed20     01 03 32 F9 | 	getword	_var02, _var02, #0
2ed24     08 02 06 F1 | 	add	_var02, #8
2ed28     2C 00 90 FD | 	jmp	#LR__4482
2ed2c                 | LR__4479
2ed2c     01 03 32 F9 | 	getword	_var02, _var02, #0
2ed30     50 02 86 F1 | 	sub	_var02, #80
2ed34     20 00 90 FD | 	jmp	#LR__4482
2ed38                 | LR__4480
2ed38     01 03 32 F9 | 	getword	_var02, _var02, #0
2ed3c     0E 00 00 FF 
2ed40     60 02 86 F1 | 	sub	_var02, ##7264
2ed44                 | ' 				}
2ed44                 | ' 				break;
2ed44     10 00 90 FD | 	jmp	#LR__4482
2ed48                 | LR__4481
2ed48     0F 0C 4E F7 | 	zerox	_var07, #15 wz
2ed4c     02 0A 06 AA |  if_e	mul	_var06, #2
2ed50     05 07 02 A1 |  if_e	add	_var04, _var06
2ed54     D8 FE 9F FD | 	jmp	#LR__4470
2ed58                 | LR__4482
2ed58     01 01 32 F9 | 	getword	_var01, _var02, #0
2ed5c                 | LR__4483
2ed5c                 | ' 		}
2ed5c                 | ' 		uni = uc;
2ed5c                 | ' 	}
2ed5c                 | ' 
2ed5c                 | ' 	return uni;
2ed5c     00 FB 01 F6 | 	mov	result1, _var01
2ed60                 | _fatfs_cc_ff_wtoupper_ret
2ed60     2D 00 64 FD | 	ret
2ed64                 | 
2ed64                 | _fatfs_cc_strncpy
2ed64     09 01 02 F6 | 	mov	_var01, arg01
2ed68     97 12 48 FB | 	callpa	#(@LR__4491-@LR__4490)>>2,fcache_load_ptr_
2ed6c                 | ' 
2ed6c                 | ' 	dscan = dst;
2ed6c                 | ' 	sscan = src;
2ed6c                 | ' 	count = n;
2ed6c                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2ed6c                 | LR__4490
2ed6c     01 16 86 F1 | 	sub	arg03, #1
2ed70     00 16 56 F2 | 	cmps	arg03, #0 wc
2ed74     18 00 90 CD |  if_b	jmp	#LR__4492
2ed78     0A FB C1 FA | 	rdbyte	result1, arg02
2ed7c     00 FB 41 FC | 	wrbyte	result1, _var01
2ed80     01 14 06 F1 | 	add	arg02, #1
2ed84     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2ed88                 | ' 		continue;
2ed88     01 00 06 F1 | 	add	_var01, #1
2ed8c     DC FF 9F 5D |  if_ne	jmp	#LR__4490
2ed90                 | LR__4491
2ed90                 | LR__4492
2ed90     97 0C 48 FB | 	callpa	#(@LR__4494-@LR__4493)>>2,fcache_load_ptr_
2ed94                 | ' 	while (--count >= 0)
2ed94                 | LR__4493
2ed94     01 16 86 F1 | 	sub	arg03, #1
2ed98     00 16 56 F2 | 	cmps	arg03, #0 wc
2ed9c     00 03 02 36 |  if_ae	mov	_var02, _var01
2eda0     01 00 06 31 |  if_ae	add	_var01, #1
2eda4     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2eda8     E8 FF 9F 3D |  if_ae	jmp	#LR__4493
2edac                 | LR__4494
2edac                 | ' 		*dscan++ = '\0';
2edac                 | ' 	return(dst);
2edac     09 FB 01 F6 | 	mov	result1, arg01
2edb0                 | _fatfs_cc_strncpy_ret
2edb0     2D 00 64 FD | 	ret
2edb4                 | 
2edb4                 | _fatfs_cc_memcmp
2edb4                 | ' 	for (n = size; n > 0; n--)
2edb4     00 16 0E F2 | 	cmp	arg03, #0 wz
2edb8     28 00 90 AD |  if_e	jmp	#LR__4501
2edbc                 | LR__4500
2edbc     09 01 C2 FA | 	rdbyte	_var01, arg01
2edc0     0A 03 C2 FA | 	rdbyte	_var02, arg02
2edc4     01 01 0A F2 | 	cmp	_var01, _var02 wz
2edc8     01 12 06 A1 |  if_e	add	arg01, #1
2edcc     01 14 06 A1 |  if_e	add	arg02, #1
2edd0                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2edd0     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2edd4     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2edd8     01 FB 81 51 |  if_ne	sub	result1, _var02
2eddc     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2ede0     F6 17 6E FB | 	djnz	arg03, #LR__4500
2ede4                 | LR__4501
2ede4                 | ' 
2ede4                 | ' 	return(0);
2ede4     00 FA 05 F6 | 	mov	result1, #0
2ede8                 | _fatfs_cc_memcmp_ret
2ede8     2D 00 64 FD | 	ret
2edec                 | 
2edec                 | _fatfs_cc_strncmp
2edec     09 01 0A F6 | 	mov	_var01, arg01 wz
2edf0     14 00 90 5D |  if_ne	jmp	#LR__4510
2edf4                 | ' 		return scan2 ? -1 : 0;
2edf4     00 14 0E F2 | 	cmp	arg02, #0 wz
2edf8     01 02 66 56 |  if_ne	neg	_var02, #1
2edfc     00 02 06 A6 |  if_e	mov	_var02, #0
2ee00     01 FB 01 F6 | 	mov	result1, _var02
2ee04     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2ee08                 | LR__4510
2ee08     00 14 0E F2 | 	cmp	arg02, #0 wz
2ee0c     01 FA 05 A6 |  if_e	mov	result1, #1
2ee10     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2ee14     0B 05 02 F6 | 	mov	_var03, arg03
2ee18     97 16 48 FB | 	callpa	#(@LR__4512-@LR__4511)>>2,fcache_load_ptr_
2ee1c                 | ' 	count = n;
2ee1c                 | ' 	do {
2ee1c                 | LR__4511
2ee1c     00 07 C2 FA | 	rdbyte	_var04, _var01
2ee20     0A 09 02 F6 | 	mov	_var05, arg02
2ee24     04 0B C2 FA | 	rdbyte	_var06, _var05
2ee28     01 04 86 F1 | 	sub	_var03, #1
2ee2c     00 04 56 F2 | 	cmps	_var03, #0 wc
2ee30     01 00 06 F1 | 	add	_var01, #1
2ee34     01 14 06 F1 | 	add	arg02, #1
2ee38     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2ee3c     08 00 90 2D |  if_nc_and_z	jmp	#LR__4513
2ee40     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2ee44     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4511
2ee48                 | LR__4512
2ee48                 | LR__4513
2ee48     00 04 56 F2 | 	cmps	_var03, #0 wc
2ee4c                 | ' 		return(0);
2ee4c     00 FA 05 C6 |  if_b	mov	result1, #0
2ee50     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2ee54     05 07 0A F2 | 	cmp	_var04, _var06 wz
2ee58                 | ' 		return(0);
2ee58     00 FA 05 A6 |  if_e	mov	result1, #0
2ee5c     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2ee60     00 06 0E F2 | 	cmp	_var04, #0 wz
2ee64                 | ' 		return(-1);
2ee64     01 FA 65 A6 |  if_e	neg	result1, #1
2ee68     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2ee6c     00 0A 0E F2 | 	cmp	_var06, #0 wz
2ee70                 | ' 		return(1);
2ee70     01 FA 05 A6 |  if_e	mov	result1, #1
2ee74                 | ' 		return(c1 - c2);
2ee74     03 FB 01 56 |  if_ne	mov	result1, _var04
2ee78     05 FB 81 51 |  if_ne	sub	result1, _var06
2ee7c                 | _fatfs_cc_strncmp_ret
2ee7c     2D 00 64 FD | 	ret
2ee80                 | 
2ee80                 | _fatfs_cc_strchr
2ee80                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/libc/string/strchr.c"
2ee80                 | ' 	while ((c = *s++) != (char) charwanted)
2ee80                 | LR__4520
2ee80     09 01 02 F6 | 	mov	_var01, arg01
2ee84     00 03 C2 FA | 	rdbyte	_var02, _var01
2ee88     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
2ee8c     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2ee90     03 05 0A F2 | 	cmp	_var03, _var04 wz
2ee94     01 12 06 F1 | 	add	arg01, #1
2ee98     14 00 90 AD |  if_e	jmp	#LR__4521
2ee9c     01 05 02 F6 | 	mov	_var03, _var02
2eea0     07 04 4E F7 | 	zerox	_var03, #7 wz
2eea4     00 FA 05 A6 |  if_e	mov	result1, #0
2eea8     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2eeac     D0 FF 9F FD | 	jmp	#LR__4520
2eeb0                 | LR__4521
2eeb0                 | ' 	return((char *)--s);
2eeb0     01 12 86 F1 | 	sub	arg01, #1
2eeb4     09 FB 01 F6 | 	mov	result1, arg01
2eeb8                 | _fatfs_cc_strchr_ret
2eeb8     2D 00 64 FD | 	ret
2eebc                 | 
2eebc                 | _fatfs_cc_disk_initialize
2eebc     04 4A 05 F6 | 	mov	COUNT_, #4
2eec0     A8 00 A0 FD | 	call	#pushregs_
2eec4     40 F0 07 F1 | 	add	ptra, #64
2eec8     04 4E 05 F1 | 	add	fp, #4
2eecc     A7 12 42 FC | 	wrbyte	arg01, fp
2eed0     01 00 00 FF 
2eed4     14 E4 05 F1 | 	add	objptr, ##532
2eed8     F2 18 02 FB | 	rdlong	arg04, objptr
2eedc     2C 4E 05 F1 | 	add	fp, #44
2eee0     A7 18 62 FC | 	wrlong	arg04, fp
2eee4     04 E4 85 F1 | 	sub	objptr, #4
2eee8     F2 18 02 FB | 	rdlong	arg04, objptr
2eeec     04 4E 05 F1 | 	add	fp, #4
2eef0     A7 18 62 FC | 	wrlong	arg04, fp
2eef4     08 E4 05 F1 | 	add	objptr, #8
2eef8     F2 18 02 FB | 	rdlong	arg04, objptr
2eefc     04 4E 05 F1 | 	add	fp, #4
2ef00     A7 18 62 FC | 	wrlong	arg04, fp
2ef04     04 E4 05 F1 | 	add	objptr, #4
2ef08     F2 18 02 FB | 	rdlong	arg04, objptr
2ef0c     04 4E 05 F1 | 	add	fp, #4
2ef10     A7 18 62 FC | 	wrlong	arg04, fp
2ef14     04 E4 05 F1 | 	add	objptr, #4
2ef18     F2 02 48 FC | 	wrbyte	#1, objptr
2ef1c     01 00 00 FF 
2ef20     20 E4 85 F1 | 	sub	objptr, ##544
2ef24     38 4E 85 F1 | 	sub	fp, #56
2ef28     A7 18 CA FA | 	rdbyte	arg04, fp wz
2ef2c     04 4E 85 F1 | 	sub	fp, #4
2ef30                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/sdmm.cc"
2ef30                 | '             return RES_NOTRDY;
2ef30     03 FA 05 56 |  if_ne	mov	result1, #3
2ef34     D8 05 90 5D |  if_ne	jmp	#LR__4548
2ef38     13 00 00 FF 
2ef3c     10 13 06 F6 | 	mov	arg01, ##10000
2ef40     30 95 BF FD | 	call	#__system___waitus
2ef44     30 4E 05 F1 | 	add	fp, #48
2ef48     A7 12 02 FB | 	rdlong	arg01, fp
2ef4c     09 01 08 FC | 	wrpin	#0, arg01
2ef50     04 4E 05 F1 | 	add	fp, #4
2ef54     A7 12 02 FB | 	rdlong	arg01, fp
2ef58     09 01 08 FC | 	wrpin	#0, arg01
2ef5c     04 4E 05 F1 | 	add	fp, #4
2ef60     A7 12 02 FB | 	rdlong	arg01, fp
2ef64     09 01 08 FC | 	wrpin	#0, arg01
2ef68     04 4E 05 F1 | 	add	fp, #4
2ef6c     A7 12 02 FB | 	rdlong	arg01, fp
2ef70     09 00 80 FF 
2ef74     09 01 08 FC | 	wrpin	##4608, arg01
2ef78     0C 4E 85 F1 | 	sub	fp, #12
2ef7c     A7 12 02 FB | 	rdlong	arg01, fp
2ef80     59 12 62 FD | 	drvh	arg01
2ef84     04 4E 05 F1 | 	add	fp, #4
2ef88     A7 12 02 FB | 	rdlong	arg01, fp
2ef8c     59 12 62 FD | 	drvh	arg01
2ef90     04 4E 05 F1 | 	add	fp, #4
2ef94     A7 12 02 FB | 	rdlong	arg01, fp
2ef98     59 12 62 FD | 	drvh	arg01
2ef9c     04 4E 05 F1 | 	add	fp, #4
2efa0     A7 12 02 FB | 	rdlong	arg01, fp
2efa4     59 12 62 FD | 	drvh	arg01
2efa8     20 4E 85 F1 | 	sub	fp, #32
2efac     00 04 80 FF 
2efb0     A7 20 68 FC | 	wrlong	##524304, fp
2efb4     04 4E 05 F1 | 	add	fp, #4
2efb8     20 03 80 FF 
2efbc     A7 90 68 FC | 	wrlong	##409672, fp
2efc0     14 4E 05 F1 | 	add	fp, #20
2efc4     A7 26 02 FB | 	rdlong	local01, fp
2efc8     18 4E 85 F1 | 	sub	fp, #24
2efcc     A7 16 02 FB | 	rdlong	arg03, fp
2efd0     40 26 62 FD | 	dirl	local01
2efd4     A0 03 80 FF 
2efd8     13 91 08 FC | 	wrpin	##475208, local01
2efdc     13 17 12 FC | 	wxpin	arg03, local01
2efe0     13 01 28 FC | 	wypin	#0, local01
2efe4     41 26 62 FD | 	dirh	local01
2efe8     1C 4E 05 F1 | 	add	fp, #28
2efec     A7 28 02 FB | 	rdlong	local02, fp
2eff0     14 27 82 F1 | 	sub	local01, local02
2eff4     07 26 06 F5 | 	and	local01, #7
2eff8     18 26 66 F0 | 	shl	local01, #24
2effc     78 14 06 F6 | 	mov	arg02, #120
2f000     13 15 42 F5 | 	or	arg02, local01
2f004     14 4E 85 F1 | 	sub	fp, #20
2f008     A7 14 62 FC | 	wrlong	arg02, fp
2f00c     14 4E 05 F1 | 	add	fp, #20
2f010     A7 12 02 FB | 	rdlong	arg01, fp
2f014     10 14 26 F4 | 	bith	arg02, #16
2f018     40 12 62 FD | 	dirl	arg01
2f01c     09 15 02 FC | 	wrpin	arg02, arg01
2f020     09 3F 18 FC | 	wxpin	#31, arg01
2f024     FF FF FF FF 
2f028     09 FF 2B FC | 	wypin	##-1, arg01
2f02c     41 12 62 FD | 	dirh	arg01
2f030     04 4E 85 F1 | 	sub	fp, #4
2f034     A7 14 02 FB | 	rdlong	arg02, fp
2f038     08 4E 05 F1 | 	add	fp, #8
2f03c     A7 2A 02 FB | 	rdlong	local03, fp
2f040     15 15 82 F1 | 	sub	arg02, local03
2f044     07 14 06 F5 | 	and	arg02, #7
2f048     18 14 66 F0 | 	shl	arg02, #24
2f04c     14 4E 85 F1 | 	sub	fp, #20
2f050     A7 14 62 FC | 	wrlong	arg02, fp
2f054     29 00 00 FF 
2f058     7A 14 46 F5 | 	or	arg02, ##21114
2f05c     A7 14 62 FC | 	wrlong	arg02, fp
2f060     14 4E 05 F1 | 	add	fp, #20
2f064     A7 12 02 FB | 	rdlong	arg01, fp
2f068     40 12 62 FD | 	dirl	arg01
2f06c     09 15 02 FC | 	wrpin	arg02, arg01
2f070     09 4F 18 FC | 	wxpin	#39, arg01
2f074     09 01 28 FC | 	wypin	#0, arg01
2f078     41 12 62 FD | 	dirh	arg01
2f07c     28 4E 85 F1 | 	sub	fp, #40
2f080     A7 12 02 F6 | 	mov	arg01, fp
2f084     14 4E 85 F1 | 	sub	fp, #20
2f088     0A 14 06 F6 | 	mov	arg02, #10
2f08c     1C 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1210
2f090     00 12 06 F6 | 	mov	arg01, #0
2f094     00 14 06 F6 | 	mov	arg02, #0
2f098     E8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1234
2f09c     24 80 B0 FD | 	call	#_fatfs_cc_deselect_1220
2f0a0     64 12 06 F6 | 	mov	arg01, #100
2f0a4     CC 93 BF FD | 	call	#__system___waitus
2f0a8     14 4E 05 F1 | 	add	fp, #20
2f0ac     A7 12 02 F6 | 	mov	arg01, fp
2f0b0     14 4E 85 F1 | 	sub	fp, #20
2f0b4     0A 14 06 F6 | 	mov	arg02, #10
2f0b8     F0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1210
2f0bc     0C 4E 05 F1 | 	add	fp, #12
2f0c0     A7 00 48 FC | 	wrbyte	#0, fp
2f0c4     0C 4E 85 F1 | 	sub	fp, #12
2f0c8     00 12 06 F6 | 	mov	arg01, #0
2f0cc     00 14 06 F6 | 	mov	arg02, #0
2f0d0     B0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1234
2f0d4     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
2f0d8     01 18 0E F2 | 	cmp	arg04, #1 wz
2f0dc     B8 03 90 5D |  if_ne	jmp	#LR__4547
2f0e0     08 12 06 F6 | 	mov	arg01, #8
2f0e4     AA 15 06 F6 | 	mov	arg02, #426
2f0e8     98 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1234
2f0ec     FD FA E1 F8 | 	getbyte	result1, result1, #0
2f0f0     01 FA 0D F2 | 	cmp	result1, #1 wz
2f0f4     98 01 90 5D |  if_ne	jmp	#LR__4533
2f0f8     14 4E 05 F1 | 	add	fp, #20
2f0fc     A7 12 02 F6 | 	mov	arg01, fp
2f100     14 4E 85 F1 | 	sub	fp, #20
2f104     04 14 06 F6 | 	mov	arg02, #4
2f108     A0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1210
2f10c     16 4E 05 F1 | 	add	fp, #22
2f110     A7 2C C2 FA | 	rdbyte	local04, fp
2f114     16 4E 85 F1 | 	sub	fp, #22
2f118     01 2C 0E F2 | 	cmp	local04, #1 wz
2f11c     17 4E 05 A1 |  if_e	add	fp, #23
2f120     A7 2A C2 AA |  if_e	rdbyte	local03, fp
2f124     17 4E 85 A1 |  if_e	sub	fp, #23
2f128     AA 2A 0E A2 |  if_e	cmp	local03, #170 wz
2f12c     68 03 90 5D |  if_ne	jmp	#LR__4546
2f130                 | ' 				for (tmr = 1000; tmr; tmr--) {
2f130     18 4E 05 F1 | 	add	fp, #24
2f134     01 00 80 FF 
2f138     A7 D0 6B FC | 	wrlong	##1000, fp
2f13c     18 4E 85 F1 | 	sub	fp, #24
2f140                 | LR__4530
2f140     18 4E 05 F1 | 	add	fp, #24
2f144     A7 26 0A FB | 	rdlong	local01, fp wz
2f148     18 4E 85 F1 | 	sub	fp, #24
2f14c     3C 00 90 AD |  if_e	jmp	#LR__4531
2f150     A9 12 06 F6 | 	mov	arg01, #169
2f154     1E 14 C6 F9 | 	decod	arg02, #30
2f158     28 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1234
2f15c     FD 2C 02 F6 | 	mov	local04, result1
2f160     07 2C 4E F7 | 	zerox	local04, #7 wz
2f164     24 00 90 AD |  if_e	jmp	#LR__4531
2f168     01 00 00 FF 
2f16c     E8 13 06 F6 | 	mov	arg01, ##1000
2f170     00 93 BF FD | 	call	#__system___waitus
2f174     18 4E 05 F1 | 	add	fp, #24
2f178     A7 2C 02 FB | 	rdlong	local04, fp
2f17c     01 2C 86 F1 | 	sub	local04, #1
2f180     A7 2C 62 FC | 	wrlong	local04, fp
2f184     18 4E 85 F1 | 	sub	fp, #24
2f188     B4 FF 9F FD | 	jmp	#LR__4530
2f18c                 | LR__4531
2f18c     18 4E 05 F1 | 	add	fp, #24
2f190     A7 2C 0A FB | 	rdlong	local04, fp wz
2f194     18 4E 85 F1 | 	sub	fp, #24
2f198     4C 00 90 AD |  if_e	jmp	#LR__4532
2f19c     3A 12 06 F6 | 	mov	arg01, #58
2f1a0     00 14 06 F6 | 	mov	arg02, #0
2f1a4     DC 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1234
2f1a8     FD 2A 02 F6 | 	mov	local03, result1
2f1ac     07 2A 4E F7 | 	zerox	local03, #7 wz
2f1b0     34 00 90 5D |  if_ne	jmp	#LR__4532
2f1b4     14 4E 05 F1 | 	add	fp, #20
2f1b8     A7 12 02 F6 | 	mov	arg01, fp
2f1bc     14 4E 85 F1 | 	sub	fp, #20
2f1c0     04 14 06 F6 | 	mov	arg02, #4
2f1c4     E4 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1210
2f1c8     14 4E 05 F1 | 	add	fp, #20
2f1cc     A7 26 C2 FA | 	rdbyte	local01, fp
2f1d0     40 26 CE F7 | 	test	local01, #64 wz
2f1d4     0C 2C 06 56 |  if_ne	mov	local04, #12
2f1d8     04 2C 06 A6 |  if_e	mov	local04, #4
2f1dc     08 4E 85 F1 | 	sub	fp, #8
2f1e0     A7 2C 42 FC | 	wrbyte	local04, fp
2f1e4     0C 4E 85 F1 | 	sub	fp, #12
2f1e8                 | LR__4532
2f1e8     14 2C 06 FB | 	rdlong	local04, #20
2f1ec     18 4E 05 F1 | 	add	fp, #24
2f1f0     A7 2C 62 FC | 	wrlong	local04, fp
2f1f4     0C 4E 05 F1 | 	add	fp, #12
2f1f8     A7 2C 02 FB | 	rdlong	local04, fp
2f1fc     1B 2C 26 F4 | 	bith	local04, #27
2f200     A7 2C 62 FC | 	wrlong	local04, fp
2f204     0C 4E 85 F1 | 	sub	fp, #12
2f208     A7 2C 02 FB | 	rdlong	local04, fp
2f20c     18 4E 85 F1 | 	sub	fp, #24
2f210     68 78 04 FF 
2f214     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2f218     1C 4E 05 C1 |  if_b	add	fp, #28
2f21c     00 01 80 CF 
2f220     A7 08 68 CC |  if_b	wrlong	##131076, fp
2f224     1C 4E 85 C1 |  if_b	sub	fp, #28
2f228     6C 02 90 CD |  if_b	jmp	#LR__4546
2f22c     18 4E 05 F1 | 	add	fp, #24
2f230     A7 2C 02 FB | 	rdlong	local04, fp
2f234     18 4E 85 F1 | 	sub	fp, #24
2f238     E1 F5 05 FF 
2f23c     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2f240     1C 4E 05 C1 |  if_b	add	fp, #28
2f244     00 01 80 CF 
2f248     A7 0A 68 CC |  if_b	wrlong	##131077, fp
2f24c     1C 4E 85 C1 |  if_b	sub	fp, #28
2f250     44 02 90 CD |  if_b	jmp	#LR__4546
2f254     18 4E 05 F1 | 	add	fp, #24
2f258     A7 2C 02 FB | 	rdlong	local04, fp
2f25c     18 4E 85 F1 | 	sub	fp, #24
2f260     3B 58 08 FF 
2f264     01 2C 16 F2 | 	cmp	local04, ##280000001 wc
2f268     1C 4E 05 C1 |  if_b	add	fp, #28
2f26c     00 01 80 CF 
2f270     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2f274     1C 4E 85 C1 |  if_b	sub	fp, #28
2f278     1C 02 90 CD |  if_b	jmp	#LR__4546
2f27c     1C 4E 05 F1 | 	add	fp, #28
2f280     80 01 80 FF 
2f284     A7 10 68 FC | 	wrlong	##196616, fp
2f288     1C 4E 85 F1 | 	sub	fp, #28
2f28c     08 02 90 FD | 	jmp	#LR__4546
2f290                 | LR__4533
2f290     A9 12 06 F6 | 	mov	arg01, #169
2f294     00 14 06 F6 | 	mov	arg02, #0
2f298     E8 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1234
2f29c     FD 2C E2 F8 | 	getbyte	local04, result1, #0
2f2a0     02 2C 16 F2 | 	cmp	local04, #2 wc
2f2a4     18 00 90 3D |  if_ae	jmp	#LR__4534
2f2a8     0C 4E 05 F1 | 	add	fp, #12
2f2ac     A7 04 48 FC | 	wrbyte	#2, fp
2f2b0     04 4E 05 F1 | 	add	fp, #4
2f2b4     A7 52 49 FC | 	wrbyte	#169, fp
2f2b8     10 4E 85 F1 | 	sub	fp, #16
2f2bc     14 00 90 FD | 	jmp	#LR__4535
2f2c0                 | LR__4534
2f2c0     0C 4E 05 F1 | 	add	fp, #12
2f2c4     A7 02 48 FC | 	wrbyte	#1, fp
2f2c8     04 4E 05 F1 | 	add	fp, #4
2f2cc     A7 02 48 FC | 	wrbyte	#1, fp
2f2d0     10 4E 85 F1 | 	sub	fp, #16
2f2d4                 | LR__4535
2f2d4                 | ' 				ty =  0x01 ; cmd =  (1) ;
2f2d4                 | ' 			}
2f2d4                 | ' 			for (tmr = 1000; tmr; tmr--) {
2f2d4     18 4E 05 F1 | 	add	fp, #24
2f2d8     01 00 80 FF 
2f2dc     A7 D0 6B FC | 	wrlong	##1000, fp
2f2e0     18 4E 85 F1 | 	sub	fp, #24
2f2e4                 | LR__4536
2f2e4     18 4E 05 F1 | 	add	fp, #24
2f2e8     A7 2A 0A FB | 	rdlong	local03, fp wz
2f2ec     18 4E 85 F1 | 	sub	fp, #24
2f2f0     44 00 90 AD |  if_e	jmp	#LR__4537
2f2f4     10 4E 05 F1 | 	add	fp, #16
2f2f8     A7 12 C2 FA | 	rdbyte	arg01, fp
2f2fc     10 4E 85 F1 | 	sub	fp, #16
2f300     00 14 06 F6 | 	mov	arg02, #0
2f304     7C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1234
2f308     FD 2C 02 F6 | 	mov	local04, result1
2f30c     07 2C 4E F7 | 	zerox	local04, #7 wz
2f310     24 00 90 AD |  if_e	jmp	#LR__4537
2f314     01 00 00 FF 
2f318     E8 13 06 F6 | 	mov	arg01, ##1000
2f31c     54 91 BF FD | 	call	#__system___waitus
2f320     18 4E 05 F1 | 	add	fp, #24
2f324     A7 2C 02 FB | 	rdlong	local04, fp
2f328     01 2C 86 F1 | 	sub	local04, #1
2f32c     A7 2C 62 FC | 	wrlong	local04, fp
2f330     18 4E 85 F1 | 	sub	fp, #24
2f334     AC FF 9F FD | 	jmp	#LR__4536
2f338                 | LR__4537
2f338     18 4E 05 F1 | 	add	fp, #24
2f33c     A7 2C 0A FB | 	rdlong	local04, fp wz
2f340     18 4E 85 F1 | 	sub	fp, #24
2f344     14 00 90 AD |  if_e	jmp	#LR__4538
2f348     10 12 06 F6 | 	mov	arg01, #16
2f34c     09 14 C6 F9 | 	decod	arg02, #9
2f350     30 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1234
2f354     07 FA 4D F7 | 	zerox	result1, #7 wz
2f358     0C 00 90 AD |  if_e	jmp	#LR__4539
2f35c                 | LR__4538
2f35c     0C 4E 05 F1 | 	add	fp, #12
2f360     A7 00 48 FC | 	wrbyte	#0, fp
2f364     0C 4E 85 F1 | 	sub	fp, #12
2f368                 | LR__4539
2f368     14 2C 06 FB | 	rdlong	local04, #20
2f36c     18 4E 05 F1 | 	add	fp, #24
2f370     A7 2C 62 FC | 	wrlong	local04, fp
2f374     18 4E 85 F1 | 	sub	fp, #24
2f378     F0 FA 02 FF 
2f37c     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2f380     18 00 90 3D |  if_ae	jmp	#LR__4540
2f384     24 4E 05 F1 | 	add	fp, #36
2f388     A7 2C 02 FB | 	rdlong	local04, fp
2f38c     1B 2C 26 F4 | 	bith	local04, #27
2f390     A7 2C 62 FC | 	wrlong	local04, fp
2f394     24 4E 85 F1 | 	sub	fp, #36
2f398     2C 00 90 FD | 	jmp	#LR__4541
2f39c                 | LR__4540
2f39c     18 4E 05 F1 | 	add	fp, #24
2f3a0     A7 2C 02 FB | 	rdlong	local04, fp
2f3a4     18 4E 85 F1 | 	sub	fp, #24
2f3a8     E1 F5 05 FF 
2f3ac     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2f3b0     24 4E 05 C1 |  if_b	add	fp, #36
2f3b4     A7 2C 02 CB |  if_b	rdlong	local04, fp
2f3b8     80 00 04 CF 
2f3bc     00 2C 46 C5 |  if_b	or	local04, ##134283264
2f3c0     A7 2C 62 CC |  if_b	wrlong	local04, fp
2f3c4     24 4E 85 C1 |  if_b	sub	fp, #36
2f3c8                 | LR__4541
2f3c8     18 4E 05 F1 | 	add	fp, #24
2f3cc     A7 2C 02 FB | 	rdlong	local04, fp
2f3d0     18 4E 85 F1 | 	sub	fp, #24
2f3d4     F0 FA 02 FF 
2f3d8     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2f3dc     1C 4E 05 C1 |  if_b	add	fp, #28
2f3e0     00 01 80 CF 
2f3e4     A7 08 68 CC |  if_b	wrlong	##131076, fp
2f3e8     1C 4E 85 C1 |  if_b	sub	fp, #28
2f3ec     A8 00 90 CD |  if_b	jmp	#LR__4545
2f3f0     18 4E 05 F1 | 	add	fp, #24
2f3f4     A7 2C 02 FB | 	rdlong	local04, fp
2f3f8     18 4E 85 F1 | 	sub	fp, #24
2f3fc     68 78 04 FF 
2f400     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2f404     1C 4E 05 C1 |  if_b	add	fp, #28
2f408     80 01 80 CF 
2f40c     A7 0C 68 CC |  if_b	wrlong	##196614, fp
2f410     1C 4E 85 C1 |  if_b	sub	fp, #28
2f414     80 00 90 CD |  if_b	jmp	#LR__4544
2f418     18 4E 05 F1 | 	add	fp, #24
2f41c     A7 2C 02 FB | 	rdlong	local04, fp
2f420     18 4E 85 F1 | 	sub	fp, #24
2f424     E1 F5 05 FF 
2f428     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2f42c     1C 4E 05 C1 |  if_b	add	fp, #28
2f430     00 02 80 CF 
2f434     A7 10 68 CC |  if_b	wrlong	##262152, fp
2f438     1C 4E 85 C1 |  if_b	sub	fp, #28
2f43c     58 00 90 CD |  if_b	jmp	#LR__4543
2f440     18 4E 05 F1 | 	add	fp, #24
2f444     A7 2C 02 FB | 	rdlong	local04, fp
2f448     18 4E 85 F1 | 	sub	fp, #24
2f44c     59 73 07 FF 
2f450     81 2C 16 F2 | 	cmp	local04, ##250000001 wc
2f454     1C 4E 05 C1 |  if_b	add	fp, #28
2f458     80 02 80 CF 
2f45c     A7 14 68 CC |  if_b	wrlong	##327690, fp
2f460     1C 4E 85 C1 |  if_b	sub	fp, #28
2f464     30 00 90 CD |  if_b	jmp	#LR__4542
2f468     18 4E 05 F1 | 	add	fp, #24
2f46c     A7 2C 02 FB | 	rdlong	local04, fp
2f470     18 4E 85 F1 | 	sub	fp, #24
2f474     D1 F0 08 FF 
2f478     01 2D 16 F2 | 	cmp	local04, ##300000001 wc
2f47c     1C 4E 05 C1 |  if_b	add	fp, #28
2f480     00 03 80 CF 
2f484     A7 18 68 CC |  if_b	wrlong	##393228, fp
2f488     1C 4E 85 F3 | 	sumc	fp, #28
2f48c     80 03 80 3F 
2f490     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
2f494     1C 4E 85 31 |  if_ae	sub	fp, #28
2f498                 | LR__4542
2f498                 | LR__4543
2f498                 | LR__4544
2f498                 | LR__4545
2f498                 | LR__4546
2f498                 | LR__4547
2f498     0C 4E 05 F1 | 	add	fp, #12
2f49c     A7 2C C2 FA | 	rdbyte	local04, fp
2f4a0     01 00 00 FF 
2f4a4     21 E4 05 F1 | 	add	objptr, ##545
2f4a8     F2 2C 42 FC | 	wrbyte	local04, objptr
2f4ac     A7 26 CA FA | 	rdbyte	local01, fp wz
2f4b0     00 2C 06 56 |  if_ne	mov	local04, #0
2f4b4     01 2C 06 A6 |  if_e	mov	local04, #1
2f4b8     20 4E 05 F1 | 	add	fp, #32
2f4bc     A7 2C 42 FC | 	wrbyte	local04, fp
2f4c0     A7 2C C2 FA | 	rdbyte	local04, fp
2f4c4     2C 4E 85 F1 | 	sub	fp, #44
2f4c8     01 E4 85 F1 | 	sub	objptr, #1
2f4cc     F2 2C 42 FC | 	wrbyte	local04, objptr
2f4d0     01 00 00 FF 
2f4d4     20 E4 85 F1 | 	sub	objptr, ##544
2f4d8     E8 7B B0 FD | 	call	#_fatfs_cc_deselect_1220
2f4dc     34 4E 05 F1 | 	add	fp, #52
2f4e0     A7 12 02 FB | 	rdlong	arg01, fp
2f4e4     18 4E 85 F1 | 	sub	fp, #24
2f4e8     A7 14 02 FB | 	rdlong	arg02, fp
2f4ec     09 15 12 FC | 	wxpin	arg02, arg01
2f4f0     1C 4E 05 F1 | 	add	fp, #28
2f4f4     A7 12 02 FB | 	rdlong	arg01, fp
2f4f8     14 4E 85 F1 | 	sub	fp, #20
2f4fc     A7 14 02 FB | 	rdlong	arg02, fp
2f500     09 15 02 FC | 	wrpin	arg02, arg01
2f504                 | ' 
2f504                 | ' 		}
2f504                 | ' 	}
2f504                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/sdmm.cc"
2f504                 | ' 	CardType = ty;
2f504                 | ' 	s = ty ? 0 :  0x01 ;
2f504                 | ' 	Stat = s;
2f504                 | ' 
2f504                 | ' 	deselect();
2f504                 | ' 
2f504                 | ' 
2f504                 | ' 	_wxpin( PIN_CLK, ck_div );
2f504                 | ' 	_wrpin( PIN_DI, spm_tx );
2f504                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/sdmm.cc"
2f504                 | ' 	return s;
2f504     08 4E 05 F1 | 	add	fp, #8
2f508     A7 FA C1 FA | 	rdbyte	result1, fp
2f50c     2C 4E 85 F1 | 	sub	fp, #44
2f510                 | LR__4548
2f510     A7 F0 03 F6 | 	mov	ptra, fp
2f514     B2 00 A0 FD | 	call	#popregs_
2f518                 | _fatfs_cc_disk_initialize_ret
2f518     2D 00 64 FD | 	ret
2f51c                 | 
2f51c                 | _fatfs_cc_disk_read
2f51c     05 4A 05 F6 | 	mov	COUNT_, #5
2f520     A8 00 A0 FD | 	call	#pushregs_
2f524     0A 27 02 F6 | 	mov	local01, arg02
2f528     0B 29 02 F6 | 	mov	local02, arg03
2f52c     0C 2B 02 F6 | 	mov	local03, arg04
2f530     00 12 0E F2 | 	cmp	arg01, #0 wz
2f534     01 FA 05 56 |  if_ne	mov	result1, #1
2f538                 | ' 
2f538                 | ' 	return Stat;
2f538     01 00 00 AF 
2f53c     20 E4 05 A1 |  if_e	add	objptr, ##544
2f540     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2f544     01 00 00 AF 
2f548     20 E4 85 A1 |  if_e	sub	objptr, ##544
2f54c     FD FA E1 F8 | 	getbyte	result1, result1, #0
2f550     01 FA CD F7 | 	test	result1, #1 wz
2f554     03 FA 05 56 |  if_ne	mov	result1, #3
2f558     84 00 90 5D |  if_ne	jmp	#LR__4552
2f55c     01 00 00 FF 
2f560     21 E4 05 F1 | 	add	objptr, ##545
2f564     F2 2C C2 FA | 	rdbyte	local04, objptr
2f568     01 00 00 FF 
2f56c     21 E4 85 F1 | 	sub	objptr, ##545
2f570     08 2C CE F7 | 	test	local04, #8 wz
2f574     09 28 66 A0 |  if_e	shl	local02, #9
2f578     02 2A 16 F2 | 	cmp	local03, #2 wc
2f57c     12 2C 06 36 |  if_ae	mov	local04, #18
2f580     11 2C 06 C6 |  if_b	mov	local04, #17
2f584     14 15 02 F6 | 	mov	arg02, local02
2f588     16 13 02 F6 | 	mov	arg01, local04
2f58c     F4 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1234
2f590     FD 2E 02 F6 | 	mov	local05, result1
2f594     07 2E 4E F7 | 	zerox	local05, #7 wz
2f598     30 00 90 5D |  if_ne	jmp	#LR__4551
2f59c                 | ' 		do {
2f59c                 | LR__4550
2f59c     13 13 02 F6 | 	mov	arg01, local01
2f5a0     09 14 C6 F9 | 	decod	arg02, #9
2f5a4     30 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1228
2f5a8     00 FA 0D F2 | 	cmp	result1, #0 wz
2f5ac     01 00 00 5F 
2f5b0     00 26 06 51 |  if_ne	add	local01, ##512
2f5b4     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4550
2f5b8     16 2D E2 F8 | 	getbyte	local04, local04, #0
2f5bc     12 2C 0E F2 | 	cmp	local04, #18 wz
2f5c0     0C 12 06 A6 |  if_e	mov	arg01, #12
2f5c4     00 14 06 A6 |  if_e	mov	arg02, #0
2f5c8     B8 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1234
2f5cc                 | LR__4551
2f5cc     F4 7A B0 FD | 	call	#_fatfs_cc_deselect_1220
2f5d0                 | ' 	}
2f5d0                 | ' 	deselect();
2f5d0                 | ' 
2f5d0                 | ' 	return count ? RES_ERROR : RES_OK;
2f5d0     00 2A 0E F2 | 	cmp	local03, #0 wz
2f5d4     01 2E 06 56 |  if_ne	mov	local05, #1
2f5d8     00 2E 06 A6 |  if_e	mov	local05, #0
2f5dc     17 FB 01 F6 | 	mov	result1, local05
2f5e0                 | LR__4552
2f5e0     A7 F0 03 F6 | 	mov	ptra, fp
2f5e4     B2 00 A0 FD | 	call	#popregs_
2f5e8                 | _fatfs_cc_disk_read_ret
2f5e8     2D 00 64 FD | 	ret
2f5ec                 | 
2f5ec                 | _fatfs_cc_disk_write
2f5ec     04 4A 05 F6 | 	mov	COUNT_, #4
2f5f0     A8 00 A0 FD | 	call	#pushregs_
2f5f4     0A 27 02 F6 | 	mov	local01, arg02
2f5f8     0C 29 02 F6 | 	mov	local02, arg04
2f5fc     0B 2B 02 F6 | 	mov	local03, arg03
2f600     00 12 0E F2 | 	cmp	arg01, #0 wz
2f604     01 FA 05 56 |  if_ne	mov	result1, #1
2f608                 | ' 
2f608                 | ' 	return Stat;
2f608     01 00 00 AF 
2f60c     20 E4 05 A1 |  if_e	add	objptr, ##544
2f610     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2f614     01 00 00 AF 
2f618     20 E4 85 A1 |  if_e	sub	objptr, ##544
2f61c     FD FA E1 F8 | 	getbyte	result1, result1, #0
2f620     01 FA CD F7 | 	test	result1, #1 wz
2f624     03 FA 05 56 |  if_ne	mov	result1, #3
2f628     D4 00 90 5D |  if_ne	jmp	#LR__4564
2f62c     01 00 00 FF 
2f630     21 E4 05 F1 | 	add	objptr, ##545
2f634     F2 16 C2 FA | 	rdbyte	arg03, objptr
2f638     01 00 00 FF 
2f63c     21 E4 85 F1 | 	sub	objptr, ##545
2f640     08 16 CE F7 | 	test	arg03, #8 wz
2f644     09 2A 66 A0 |  if_e	shl	local03, #9
2f648     01 28 0E F2 | 	cmp	local02, #1 wz
2f64c     30 00 90 5D |  if_ne	jmp	#LR__4560
2f650     18 12 06 F6 | 	mov	arg01, #24
2f654     15 15 02 F6 | 	mov	arg02, local03
2f658     28 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1234
2f65c     FD 2C 02 F6 | 	mov	local04, result1
2f660     07 2C 4E F7 | 	zerox	local04, #7 wz
2f664     84 00 90 5D |  if_ne	jmp	#LR__4563
2f668     13 13 02 F6 | 	mov	arg01, local01
2f66c     FE 14 06 F6 | 	mov	arg02, #254
2f670     44 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1230
2f674     00 FA 0D F2 | 	cmp	result1, #0 wz
2f678     00 28 06 56 |  if_ne	mov	local02, #0
2f67c     6C 00 90 FD | 	jmp	#LR__4563
2f680                 | LR__4560
2f680     01 00 00 FF 
2f684     21 E4 05 F1 | 	add	objptr, ##545
2f688     F2 2C C2 FA | 	rdbyte	local04, objptr
2f68c     01 00 00 FF 
2f690     21 E4 85 F1 | 	sub	objptr, ##545
2f694     06 2C CE F7 | 	test	local04, #6 wz
2f698     97 12 06 56 |  if_ne	mov	arg01, #151
2f69c     14 15 02 56 |  if_ne	mov	arg02, local02
2f6a0     E0 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1234
2f6a4     15 15 02 F6 | 	mov	arg02, local03
2f6a8     19 12 06 F6 | 	mov	arg01, #25
2f6ac     D4 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1234
2f6b0     FD 2C 02 F6 | 	mov	local04, result1
2f6b4     07 2C 4E F7 | 	zerox	local04, #7 wz
2f6b8     30 00 90 5D |  if_ne	jmp	#LR__4562
2f6bc                 | ' 			do {
2f6bc                 | LR__4561
2f6bc     13 13 02 F6 | 	mov	arg01, local01
2f6c0     FC 14 06 F6 | 	mov	arg02, #252
2f6c4     F0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1230
2f6c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2f6cc     01 00 00 5F 
2f6d0     00 26 06 51 |  if_ne	add	local01, ##512
2f6d4     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4561
2f6d8     00 12 06 F6 | 	mov	arg01, #0
2f6dc     FD 14 06 F6 | 	mov	arg02, #253
2f6e0     D4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1230
2f6e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2f6e8     01 28 06 A6 |  if_e	mov	local02, #1
2f6ec                 | LR__4562
2f6ec                 | LR__4563
2f6ec     D4 79 B0 FD | 	call	#_fatfs_cc_deselect_1220
2f6f0                 | ' 				count = 1;
2f6f0                 | ' 		}
2f6f0                 | ' 	}
2f6f0                 | ' 	deselect();
2f6f0                 | ' 
2f6f0                 | ' 	return count ? RES_ERROR : RES_OK;
2f6f0     00 28 0E F2 | 	cmp	local02, #0 wz
2f6f4     01 2C 06 56 |  if_ne	mov	local04, #1
2f6f8     00 2C 06 A6 |  if_e	mov	local04, #0
2f6fc     16 FB 01 F6 | 	mov	result1, local04
2f700                 | LR__4564
2f700     A7 F0 03 F6 | 	mov	ptra, fp
2f704     B2 00 A0 FD | 	call	#popregs_
2f708                 | _fatfs_cc_disk_write_ret
2f708     2D 00 64 FD | 	ret
2f70c                 | 
2f70c                 | _fatfs_cc_disk_ioctl
2f70c     01 4A 05 F6 | 	mov	COUNT_, #1
2f710     A8 00 A0 FD | 	call	#pushregs_
2f714     30 F0 07 F1 | 	add	ptra, #48
2f718     04 4E 05 F1 | 	add	fp, #4
2f71c     A7 12 42 FC | 	wrbyte	arg01, fp
2f720     04 4E 05 F1 | 	add	fp, #4
2f724     A7 14 42 FC | 	wrbyte	arg02, fp
2f728     04 4E 05 F1 | 	add	fp, #4
2f72c     A7 16 62 FC | 	wrlong	arg03, fp
2f730     08 4E 85 F1 | 	sub	fp, #8
2f734     A7 12 CA FA | 	rdbyte	arg01, fp wz
2f738     04 4E 85 F1 | 	sub	fp, #4
2f73c     01 FA 05 56 |  if_ne	mov	result1, #1
2f740                 | ' 
2f740                 | ' 	return Stat;
2f740     01 00 00 AF 
2f744     20 E4 05 A1 |  if_e	add	objptr, ##544
2f748     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2f74c     01 00 00 AF 
2f750     20 E4 85 A1 |  if_e	sub	objptr, ##544
2f754     FD FA E1 F8 | 	getbyte	result1, result1, #0
2f758     01 FA CD F7 | 	test	result1, #1 wz
2f75c     03 FA 05 56 |  if_ne	mov	result1, #3
2f760     E4 01 90 5D |  if_ne	jmp	#LR__4578
2f764     10 4E 05 F1 | 	add	fp, #16
2f768     A7 02 68 FC | 	wrlong	#1, fp
2f76c                 | ' 
2f76c                 | ' 	res = RES_ERROR;
2f76c                 | ' 	switch (ctrl) {
2f76c     08 4E 85 F1 | 	sub	fp, #8
2f770     A7 26 C2 FA | 	rdbyte	local01, fp
2f774     08 4E 85 F1 | 	sub	fp, #8
2f778     04 26 26 F3 | 	fle	local01, #4
2f77c     30 26 62 FD | 	jmprel	local01
2f780                 | LR__4570
2f780     10 00 90 FD | 	jmp	#LR__4571
2f784     24 00 90 FD | 	jmp	#LR__4572
2f788     A0 01 90 FD | 	jmp	#LR__4576
2f78c     80 01 90 FD | 	jmp	#LR__4575
2f790     98 01 90 FD | 	jmp	#LR__4576
2f794                 | LR__4571
2f794     B0 79 B0 FD | 	call	#_fatfs_cc_select_1224
2f798     00 FA 0D F2 | 	cmp	result1, #0 wz
2f79c     10 4E 05 51 |  if_ne	add	fp, #16
2f7a0     A7 00 68 5C |  if_ne	wrlong	#0, fp
2f7a4     10 4E 85 51 |  if_ne	sub	fp, #16
2f7a8                 | ' 			break;
2f7a8     8C 01 90 FD | 	jmp	#LR__4577
2f7ac                 | LR__4572
2f7ac     09 12 06 F6 | 	mov	arg01, #9
2f7b0     00 14 06 F6 | 	mov	arg02, #0
2f7b4     CC 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1234
2f7b8     FD 26 02 F6 | 	mov	local01, result1
2f7bc     07 26 4E F7 | 	zerox	local01, #7 wz
2f7c0     74 01 90 5D |  if_ne	jmp	#LR__4577
2f7c4     18 4E 05 F1 | 	add	fp, #24
2f7c8     A7 12 02 F6 | 	mov	arg01, fp
2f7cc     18 4E 85 F1 | 	sub	fp, #24
2f7d0     10 14 06 F6 | 	mov	arg02, #16
2f7d4     00 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1228
2f7d8     00 FA 0D F2 | 	cmp	result1, #0 wz
2f7dc     58 01 90 AD |  if_e	jmp	#LR__4577
2f7e0     18 4E 05 F1 | 	add	fp, #24
2f7e4     A7 26 C2 FA | 	rdbyte	local01, fp
2f7e8     18 4E 85 F1 | 	sub	fp, #24
2f7ec     06 26 46 F0 | 	shr	local01, #6
2f7f0     01 26 0E F2 | 	cmp	local01, #1 wz
2f7f4     5C 00 90 5D |  if_ne	jmp	#LR__4573
2f7f8     21 4E 05 F1 | 	add	fp, #33
2f7fc     A7 26 C2 FA | 	rdbyte	local01, fp
2f800     01 4E 85 F1 | 	sub	fp, #1
2f804     A7 FA C1 FA | 	rdbyte	result1, fp
2f808     FD FA 31 F9 | 	getword	result1, result1, #0
2f80c     08 FA 65 F0 | 	shl	result1, #8
2f810     FD 26 02 F1 | 	add	local01, result1
2f814     01 4E 85 F1 | 	sub	fp, #1
2f818     A7 FA C1 FA | 	rdbyte	result1, fp
2f81c     3F FA 05 F5 | 	and	result1, #63
2f820     10 FA 65 F0 | 	shl	result1, #16
2f824     FD 26 02 F1 | 	add	local01, result1
2f828     01 26 06 F1 | 	add	local01, #1
2f82c     09 4E 05 F1 | 	add	fp, #9
2f830     A7 26 62 FC | 	wrlong	local01, fp
2f834     1C 4E 85 F1 | 	sub	fp, #28
2f838     A7 26 02 FB | 	rdlong	local01, fp
2f83c     1C 4E 05 F1 | 	add	fp, #28
2f840     A7 FA 01 FB | 	rdlong	result1, fp
2f844     28 4E 85 F1 | 	sub	fp, #40
2f848     0A FA 65 F0 | 	shl	result1, #10
2f84c     13 FB 61 FC | 	wrlong	result1, local01
2f850     AC 00 90 FD | 	jmp	#LR__4574
2f854                 | LR__4573
2f854     1D 4E 05 F1 | 	add	fp, #29
2f858     A7 26 C2 FA | 	rdbyte	local01, fp
2f85c     13 27 42 F8 | 	getnib	local01, local01, #0
2f860     05 4E 05 F1 | 	add	fp, #5
2f864     A7 FA C1 FA | 	rdbyte	result1, fp
2f868     80 FA 05 F5 | 	and	result1, #128
2f86c     07 FA C5 F0 | 	sar	result1, #7
2f870     FD 26 02 F1 | 	add	local01, result1
2f874     01 4E 85 F1 | 	sub	fp, #1
2f878     A7 FA C1 FA | 	rdbyte	result1, fp
2f87c     03 FA 05 F5 | 	and	result1, #3
2f880     01 FA 65 F0 | 	shl	result1, #1
2f884     FD 26 02 F1 | 	add	local01, result1
2f888     02 26 06 F1 | 	add	local01, #2
2f88c     0D 4E 85 F1 | 	sub	fp, #13
2f890     A7 26 42 FC | 	wrbyte	local01, fp
2f894     0C 4E 05 F1 | 	add	fp, #12
2f898     A7 26 C2 FA | 	rdbyte	local01, fp
2f89c     06 26 46 F0 | 	shr	local01, #6
2f8a0     01 4E 85 F1 | 	sub	fp, #1
2f8a4     A7 FA C1 FA | 	rdbyte	result1, fp
2f8a8     FD FA 31 F9 | 	getword	result1, result1, #0
2f8ac     02 FA 65 F0 | 	shl	result1, #2
2f8b0     FD 26 02 F1 | 	add	local01, result1
2f8b4     01 4E 85 F1 | 	sub	fp, #1
2f8b8     A7 FA C1 FA | 	rdbyte	result1, fp
2f8bc     03 FA 05 F5 | 	and	result1, #3
2f8c0     FD FA 31 F9 | 	getword	result1, result1, #0
2f8c4     0A FA 65 F0 | 	shl	result1, #10
2f8c8     FD 26 02 F1 | 	add	local01, result1
2f8cc     01 26 06 F1 | 	add	local01, #1
2f8d0     0A 4E 05 F1 | 	add	fp, #10
2f8d4     A7 26 62 FC | 	wrlong	local01, fp
2f8d8     1C 4E 85 F1 | 	sub	fp, #28
2f8dc     A7 26 02 FB | 	rdlong	local01, fp
2f8e0     1C 4E 05 F1 | 	add	fp, #28
2f8e4     A7 FA 01 FB | 	rdlong	result1, fp
2f8e8     14 4E 85 F1 | 	sub	fp, #20
2f8ec     A7 16 C2 FA | 	rdbyte	arg03, fp
2f8f0     14 4E 85 F1 | 	sub	fp, #20
2f8f4     09 16 86 F1 | 	sub	arg03, #9
2f8f8     0B FB 61 F0 | 	shl	result1, arg03
2f8fc     13 FB 61 FC | 	wrlong	result1, local01
2f900                 | LR__4574
2f900     10 4E 05 F1 | 	add	fp, #16
2f904     A7 00 68 FC | 	wrlong	#0, fp
2f908     10 4E 85 F1 | 	sub	fp, #16
2f90c                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
2f90c                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
2f90c                 | ' 					*(LBA_t*)buff = cs << (n - 9);
2f90c                 | ' 				}
2f90c                 | ' 				res = RES_OK;
2f90c                 | ' 			}
2f90c                 | ' 			break;
2f90c     28 00 90 FD | 	jmp	#LR__4577
2f910                 | LR__4575
2f910     0C 4E 05 F1 | 	add	fp, #12
2f914     A7 26 02 FB | 	rdlong	local01, fp
2f918     13 01 69 FC | 	wrlong	#128, local01
2f91c     04 4E 05 F1 | 	add	fp, #4
2f920     A7 00 68 FC | 	wrlong	#0, fp
2f924     10 4E 85 F1 | 	sub	fp, #16
2f928                 | ' 			*(DWORD*)buff = 128;
2f928                 | ' 			res = RES_OK;
2f928                 | ' 			break;
2f928     0C 00 90 FD | 	jmp	#LR__4577
2f92c                 | LR__4576
2f92c     10 4E 05 F1 | 	add	fp, #16
2f930     A7 08 68 FC | 	wrlong	#4, fp
2f934     10 4E 85 F1 | 	sub	fp, #16
2f938                 | LR__4577
2f938     88 77 B0 FD | 	call	#_fatfs_cc_deselect_1220
2f93c                 | ' 			res = RES_PARERR;
2f93c                 | ' 	}
2f93c                 | ' 
2f93c                 | ' 	deselect();
2f93c                 | ' 
2f93c                 | ' 	return res;
2f93c     10 4E 05 F1 | 	add	fp, #16
2f940     A7 FA 01 FB | 	rdlong	result1, fp
2f944     10 4E 85 F1 | 	sub	fp, #16
2f948                 | LR__4578
2f948     A7 F0 03 F6 | 	mov	ptra, fp
2f94c     B2 00 A0 FD | 	call	#popregs_
2f950                 | _fatfs_cc_disk_ioctl_ret
2f950     2D 00 64 FD | 	ret
2f954                 | 
2f954                 | _fatfs_cc_disk_setpins
2f954     00 12 0E F2 | 	cmp	arg01, #0 wz
2f958     01 FA 65 56 |  if_ne	neg	result1, #1
2f95c     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
2f960     01 00 00 FF 
2f964     10 E4 05 F1 | 	add	objptr, ##528
2f968     F2 14 62 FC | 	wrlong	arg02, objptr
2f96c     04 E4 05 F1 | 	add	objptr, #4
2f970     F2 16 62 FC | 	wrlong	arg03, objptr
2f974     04 E4 05 F1 | 	add	objptr, #4
2f978     F2 18 62 FC | 	wrlong	arg04, objptr
2f97c     04 E4 05 F1 | 	add	objptr, #4
2f980     F2 1A 62 FC | 	wrlong	arg05, objptr
2f984     01 00 00 FF 
2f988     1C E4 85 F1 | 	sub	objptr, ##540
2f98c     00 FA 05 F6 | 	mov	result1, #0
2f990                 | _fatfs_cc_disk_setpins_ret
2f990     2D 00 64 FD | 	ret
2f994                 | 
2f994                 | _fatfs_cc_tchar2uni
2f994     09 01 02 FB | 	rdlong	_var01, arg01
2f998     00 03 02 F6 | 	mov	_var02, _var01
2f99c     01 00 06 F1 | 	add	_var01, #1
2f9a0     00 05 02 F6 | 	mov	_var03, _var01
2f9a4     01 07 C2 FA | 	rdbyte	_var04, _var02
2f9a8     80 06 CE F7 | 	test	_var04, #128 wz
2f9ac     E8 00 90 AD |  if_e	jmp	#LR__4587
2f9b0     03 09 02 F6 | 	mov	_var05, _var04
2f9b4     E0 08 06 F5 | 	and	_var05, #224
2f9b8     C0 08 0E F2 | 	cmp	_var05, #192 wz
2f9bc     1F 06 06 A5 |  if_e	and	_var04, #31
2f9c0     01 0A 06 A6 |  if_e	mov	_var06, #1
2f9c4     34 00 90 AD |  if_e	jmp	#LR__4581
2f9c8     03 09 02 F6 | 	mov	_var05, _var04
2f9cc     F0 08 06 F5 | 	and	_var05, #240
2f9d0     E0 08 0E F2 | 	cmp	_var05, #224 wz
2f9d4     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2f9d8     02 0A 06 A6 |  if_e	mov	_var06, #2
2f9dc     1C 00 90 AD |  if_e	jmp	#LR__4580
2f9e0     03 09 02 F6 | 	mov	_var05, _var04
2f9e4     F8 08 06 F5 | 	and	_var05, #248
2f9e8     F0 08 0E F2 | 	cmp	_var05, #240 wz
2f9ec     07 06 06 A5 |  if_e	and	_var04, #7
2f9f0     03 0A 06 A6 |  if_e	mov	_var06, #3
2f9f4                 | ' 			return 0xFFFFFFFF;
2f9f4     01 FA 65 56 |  if_ne	neg	result1, #1
2f9f8     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2f9fc                 | LR__4580
2f9fc                 | LR__4581
2f9fc                 | ' 		}
2f9fc                 | ' 		do {
2f9fc                 | LR__4582
2f9fc     02 0D C2 FA | 	rdbyte	_var07, _var03
2fa00     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
2fa04     C0 08 06 F5 | 	and	_var05, #192
2fa08     80 08 0E F2 | 	cmp	_var05, #128 wz
2fa0c     01 04 06 F1 | 	add	_var03, #1
2fa10     01 FA 65 56 |  if_ne	neg	result1, #1
2fa14     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2fa18     06 06 66 F0 | 	shl	_var04, #6
2fa1c     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
2fa20     3F 02 06 F5 | 	and	_var02, #63
2fa24     01 07 42 F5 | 	or	_var04, _var02
2fa28     F4 0B 6E FB | 	djnz	_var06, #LR__4582
2fa2c     80 06 16 F2 | 	cmp	_var04, #128 wc
2fa30     24 00 90 CD |  if_b	jmp	#LR__4584
2fa34     6C 00 00 FF 
2fa38     00 06 16 F2 | 	cmp	_var04, ##55296 wc
2fa3c     0C 00 90 CD |  if_b	jmp	#LR__4583
2fa40     70 00 00 FF 
2fa44     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2fa48     0C 00 90 CD |  if_b	jmp	#LR__4584
2fa4c                 | LR__4583
2fa4c     80 08 00 FF 
2fa50     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
2fa54     08 00 90 CD |  if_b	jmp	#LR__4585
2fa58                 | LR__4584
2fa58     01 FA 65 F6 | 	neg	result1, #1
2fa5c     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2fa60                 | LR__4585
2fa60     80 00 00 FF 
2fa64     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2fa68     2C 00 90 CD |  if_b	jmp	#LR__4586
2fa6c     03 03 02 F6 | 	mov	_var02, _var04
2fa70     80 00 00 FF 
2fa74     00 02 86 F1 | 	sub	_var02, ##65536
2fa78     06 02 66 F0 | 	shl	_var02, #6
2fa7c     80 FF 01 FF 
2fa80     00 02 06 F5 | 	and	_var02, ##67043328
2fa84     6E 00 6C FF 
2fa88     00 08 06 F6 | 	mov	_var05, ##-671032320
2fa8c     01 09 42 F5 | 	or	_var05, _var02
2fa90     09 06 46 F7 | 	zerox	_var04, #9
2fa94     04 07 42 F5 | 	or	_var04, _var05
2fa98                 | LR__4586
2fa98                 | LR__4587
2fa98     09 05 62 FC | 	wrlong	_var03, arg01
2fa9c                 | ' 	}
2fa9c                 | ' #line 811 "ff.c"
2fa9c                 | ' 	*str = p;
2fa9c                 | ' 	return uc;
2fa9c     03 FB 01 F6 | 	mov	result1, _var04
2faa0                 | _fatfs_cc_tchar2uni_ret
2faa0     2D 00 64 FD | 	ret
2faa4                 | 
2faa4                 | _fatfs_cc_put_utf
2faa4     80 12 16 F2 | 	cmp	arg01, #128 wc
2faa8     18 00 90 3D |  if_ae	jmp	#LR__4590
2faac     01 16 16 F2 | 	cmp	arg03, #1 wc
2fab0     00 FA 05 C6 |  if_b	mov	result1, #0
2fab4     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2fab8     0A 13 42 FC | 	wrbyte	arg01, arg02
2fabc                 | ' 		*buf = (TCHAR)chr;
2fabc                 | ' 		return 1;
2fabc     01 FA 05 F6 | 	mov	result1, #1
2fac0     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2fac4                 | LR__4590
2fac4     04 00 00 FF 
2fac8     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2facc     40 00 90 3D |  if_ae	jmp	#LR__4591
2fad0     02 16 16 F2 | 	cmp	arg03, #2 wc
2fad4     00 FA 05 C6 |  if_b	mov	result1, #0
2fad8     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2fadc     09 FB 01 F6 | 	mov	result1, arg01
2fae0     06 FA 45 F0 | 	shr	result1, #6
2fae4     1F FA 05 F5 | 	and	result1, #31
2fae8     C0 16 06 F6 | 	mov	arg03, #192
2faec     FD 16 42 F5 | 	or	arg03, result1
2faf0     0A 17 42 FC | 	wrbyte	arg03, arg02
2faf4     01 14 06 F1 | 	add	arg02, #1
2faf8     3F 12 06 F5 | 	and	arg01, #63
2fafc     80 FA 05 F6 | 	mov	result1, #128
2fb00     09 FB 41 F5 | 	or	result1, arg01
2fb04     0A FB 41 FC | 	wrbyte	result1, arg02
2fb08                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2fb08                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2fb08                 | ' 		return 2;
2fb08     02 FA 05 F6 | 	mov	result1, #2
2fb0c     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2fb10                 | LR__4591
2fb10     80 00 00 FF 
2fb14     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2fb18     70 00 90 3D |  if_ae	jmp	#LR__4594
2fb1c     03 16 16 F2 | 	cmp	arg03, #3 wc
2fb20     18 00 90 CD |  if_b	jmp	#LR__4592
2fb24     6C 00 00 FF 
2fb28     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2fb2c     14 00 90 CD |  if_b	jmp	#LR__4593
2fb30     70 00 00 FF 
2fb34     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2fb38     08 00 90 3D |  if_ae	jmp	#LR__4593
2fb3c                 | LR__4592
2fb3c     00 FA 05 F6 | 	mov	result1, #0
2fb40     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2fb44                 | LR__4593
2fb44     09 FB 59 F8 | 	getnib	result1, arg01, #3
2fb48     E0 16 06 F6 | 	mov	arg03, #224
2fb4c     FD 16 42 F5 | 	or	arg03, result1
2fb50     0A 17 42 FC | 	wrbyte	arg03, arg02
2fb54     01 14 06 F1 | 	add	arg02, #1
2fb58     09 FB 01 F6 | 	mov	result1, arg01
2fb5c     06 FA 45 F0 | 	shr	result1, #6
2fb60     3F FA 05 F5 | 	and	result1, #63
2fb64     80 16 06 F6 | 	mov	arg03, #128
2fb68     FD 16 42 F5 | 	or	arg03, result1
2fb6c     0A 17 42 FC | 	wrbyte	arg03, arg02
2fb70     01 14 06 F1 | 	add	arg02, #1
2fb74     3F 12 06 F5 | 	and	arg01, #63
2fb78     80 FA 05 F6 | 	mov	result1, #128
2fb7c     09 FB 41 F5 | 	or	result1, arg01
2fb80     0A FB 41 FC | 	wrbyte	result1, arg02
2fb84                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2fb84                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2fb84                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2fb84                 | ' 		return 3;
2fb84     03 FA 05 F6 | 	mov	result1, #3
2fb88     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2fb8c                 | LR__4594
2fb8c     04 16 16 F2 | 	cmp	arg03, #4 wc
2fb90     00 FA 05 C6 |  if_b	mov	result1, #0
2fb94     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2fb98     09 01 02 F6 | 	mov	_var01, arg01
2fb9c     E0 01 06 F4 | 	bitl	_var01, #480
2fba0     00 00 6C FF 
2fba4     00 00 86 F1 | 	sub	_var01, ##-671088640
2fba8     06 00 46 F0 | 	shr	_var01, #6
2fbac     09 13 32 F9 | 	getword	arg01, arg01, #0
2fbb0     6E 00 00 FF 
2fbb4     00 12 86 F1 | 	sub	arg01, ##56320
2fbb8     00 08 00 FF 
2fbbc     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2fbc0     02 00 00 CF 
2fbc4     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2fbc8     00 FA 05 36 |  if_ae	mov	result1, #0
2fbcc     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2fbd0     09 01 42 F5 | 	or	_var01, arg01
2fbd4     80 00 00 FF 
2fbd8     00 00 06 F1 | 	add	_var01, ##65536
2fbdc     00 FB 01 F6 | 	mov	result1, _var01
2fbe0     12 FA 45 F0 | 	shr	result1, #18
2fbe4     07 FA 05 F5 | 	and	result1, #7
2fbe8     F0 16 06 F6 | 	mov	arg03, #240
2fbec     FD 16 42 F5 | 	or	arg03, result1
2fbf0     0A 17 42 FC | 	wrbyte	arg03, arg02
2fbf4     01 14 06 F1 | 	add	arg02, #1
2fbf8     00 FB 01 F6 | 	mov	result1, _var01
2fbfc     0C FA 45 F0 | 	shr	result1, #12
2fc00     3F FA 05 F5 | 	and	result1, #63
2fc04     80 16 06 F6 | 	mov	arg03, #128
2fc08     FD 16 42 F5 | 	or	arg03, result1
2fc0c     0A 17 42 FC | 	wrbyte	arg03, arg02
2fc10     01 14 06 F1 | 	add	arg02, #1
2fc14     00 FB 01 F6 | 	mov	result1, _var01
2fc18     06 FA 45 F0 | 	shr	result1, #6
2fc1c     3F FA 05 F5 | 	and	result1, #63
2fc20     80 16 06 F6 | 	mov	arg03, #128
2fc24     FD 16 42 F5 | 	or	arg03, result1
2fc28     0A 17 42 FC | 	wrbyte	arg03, arg02
2fc2c     01 14 06 F1 | 	add	arg02, #1
2fc30     3F 00 06 F5 | 	and	_var01, #63
2fc34     80 FA 05 F6 | 	mov	result1, #128
2fc38     00 FB 41 F5 | 	or	result1, _var01
2fc3c     0A FB 41 FC | 	wrbyte	result1, arg02
2fc40                 | ' 	chr = (hc | chr) + 0x10000;
2fc40                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2fc40                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2fc40                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2fc40                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2fc40                 | ' 	return 4;
2fc40     04 FA 05 F6 | 	mov	result1, #4
2fc44                 | _fatfs_cc_put_utf_ret
2fc44     2D 00 64 FD | 	ret
2fc48                 | 
2fc48                 | _fatfs_cc_sync_window
2fc48     02 4A 05 F6 | 	mov	COUNT_, #2
2fc4c     A8 00 A0 FD | 	call	#pushregs_
2fc50     09 27 02 F6 | 	mov	local01, arg01
2fc54     00 28 06 F6 | 	mov	local02, #0
2fc58     03 26 06 F1 | 	add	local01, #3
2fc5c     13 FB C9 FA | 	rdbyte	result1, local01 wz
2fc60     03 26 86 F1 | 	sub	local01, #3
2fc64     A4 00 90 AD |  if_e	jmp	#LR__4602
2fc68     01 26 06 F1 | 	add	local01, #1
2fc6c     13 13 C2 FA | 	rdbyte	arg01, local01
2fc70     33 26 06 F1 | 	add	local01, #51
2fc74     13 15 02 F6 | 	mov	arg02, local01
2fc78     04 26 86 F1 | 	sub	local01, #4
2fc7c     13 17 02 FB | 	rdlong	arg03, local01
2fc80     30 26 86 F1 | 	sub	local01, #48
2fc84     01 18 06 F6 | 	mov	arg04, #1
2fc88     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2fc8c     00 FA 0D F2 | 	cmp	result1, #0 wz
2fc90     74 00 90 5D |  if_ne	jmp	#LR__4600
2fc94     03 26 06 F1 | 	add	local01, #3
2fc98     13 01 48 FC | 	wrbyte	#0, local01
2fc9c     2D 26 06 F1 | 	add	local01, #45
2fca0     13 FB 01 FB | 	rdlong	result1, local01
2fca4     0C 26 86 F1 | 	sub	local01, #12
2fca8     13 19 02 FB | 	rdlong	arg04, local01
2fcac     0C FB 81 F1 | 	sub	result1, arg04
2fcb0     08 26 86 F1 | 	sub	local01, #8
2fcb4     13 19 02 FB | 	rdlong	arg04, local01
2fcb8     1C 26 86 F1 | 	sub	local01, #28
2fcbc     0C FB 11 F2 | 	cmp	result1, arg04 wc
2fcc0     48 00 90 3D |  if_ae	jmp	#LR__4601
2fcc4     02 26 06 F1 | 	add	local01, #2
2fcc8     13 19 C2 FA | 	rdbyte	arg04, local01
2fccc     02 26 86 F1 | 	sub	local01, #2
2fcd0     02 18 0E F2 | 	cmp	arg04, #2 wz
2fcd4     34 00 90 5D |  if_ne	jmp	#LR__4601
2fcd8     01 26 06 F1 | 	add	local01, #1
2fcdc     13 13 C2 FA | 	rdbyte	arg01, local01
2fce0     33 26 06 F1 | 	add	local01, #51
2fce4     13 15 02 F6 | 	mov	arg02, local01
2fce8     04 26 86 F1 | 	sub	local01, #4
2fcec     13 17 02 FB | 	rdlong	arg03, local01
2fcf0     14 26 86 F1 | 	sub	local01, #20
2fcf4     13 27 02 FB | 	rdlong	local01, local01
2fcf8     13 17 02 F1 | 	add	arg03, local01
2fcfc     01 18 06 F6 | 	mov	arg04, #1
2fd00     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2fd04     04 00 90 FD | 	jmp	#LR__4601
2fd08                 | LR__4600
2fd08     01 28 06 F6 | 	mov	local02, #1
2fd0c                 | LR__4601
2fd0c                 | LR__4602
2fd0c                 | ' 			res = FR_DISK_ERR;
2fd0c                 | ' 		}
2fd0c                 | ' 	}
2fd0c                 | ' 	return res;
2fd0c     14 FB 01 F6 | 	mov	result1, local02
2fd10     A7 F0 03 F6 | 	mov	ptra, fp
2fd14     B2 00 A0 FD | 	call	#popregs_
2fd18                 | _fatfs_cc_sync_window_ret
2fd18     2D 00 64 FD | 	ret
2fd1c                 | 
2fd1c                 | _fatfs_cc_move_window
2fd1c     03 4A 05 F6 | 	mov	COUNT_, #3
2fd20     A8 00 A0 FD | 	call	#pushregs_
2fd24     09 27 02 F6 | 	mov	local01, arg01
2fd28     0A 29 02 F6 | 	mov	local02, arg02
2fd2c     00 2A 06 F6 | 	mov	local03, #0
2fd30     30 26 06 F1 | 	add	local01, #48
2fd34     13 19 02 FB | 	rdlong	arg04, local01
2fd38     30 26 86 F1 | 	sub	local01, #48
2fd3c     0C 29 0A F2 | 	cmp	local02, arg04 wz
2fd40     40 00 90 AD |  if_e	jmp	#LR__4611
2fd44     13 13 02 F6 | 	mov	arg01, local01
2fd48     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2fd4c     FD 2A 0A F6 | 	mov	local03, result1 wz
2fd50     30 00 90 5D |  if_ne	jmp	#LR__4610
2fd54     01 26 06 F1 | 	add	local01, #1
2fd58     13 13 C2 FA | 	rdbyte	arg01, local01
2fd5c     33 26 06 F1 | 	add	local01, #51
2fd60     13 15 02 F6 | 	mov	arg02, local01
2fd64     14 17 02 F6 | 	mov	arg03, local02
2fd68     01 18 06 F6 | 	mov	arg04, #1
2fd6c     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
2fd70     00 FA 0D F2 | 	cmp	result1, #0 wz
2fd74     01 28 66 56 |  if_ne	neg	local02, #1
2fd78     01 2A 06 56 |  if_ne	mov	local03, #1
2fd7c     04 26 86 F1 | 	sub	local01, #4
2fd80     13 29 62 FC | 	wrlong	local02, local01
2fd84                 | LR__4610
2fd84                 | LR__4611
2fd84                 | ' 				sect = (LBA_t)0 - 1;
2fd84                 | ' 				res = FR_DISK_ERR;
2fd84                 | ' 			}
2fd84                 | ' 			fs->winsect = sect;
2fd84                 | ' 		}
2fd84                 | ' 	}
2fd84                 | ' 	return res;
2fd84     15 FB 01 F6 | 	mov	result1, local03
2fd88     A7 F0 03 F6 | 	mov	ptra, fp
2fd8c     B2 00 A0 FD | 	call	#popregs_
2fd90                 | _fatfs_cc_move_window_ret
2fd90     2D 00 64 FD | 	ret
2fd94                 | 
2fd94                 | _fatfs_cc_sync_fs
2fd94     02 4A 05 F6 | 	mov	COUNT_, #2
2fd98     A8 00 A0 FD | 	call	#pushregs_
2fd9c     09 27 02 F6 | 	mov	local01, arg01
2fda0     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2fda4     FD 28 0A F6 | 	mov	local02, result1 wz
2fda8     D8 00 90 5D |  if_ne	jmp	#LR__4621
2fdac     13 19 C2 FA | 	rdbyte	arg04, local01
2fdb0     03 18 0E F2 | 	cmp	arg04, #3 wz
2fdb4     04 26 06 A1 |  if_e	add	local01, #4
2fdb8     13 19 C2 AA |  if_e	rdbyte	arg04, local01
2fdbc     04 26 86 A1 |  if_e	sub	local01, #4
2fdc0     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2fdc4     A0 00 90 5D |  if_ne	jmp	#LR__4620
2fdc8     34 26 06 F1 | 	add	local01, #52
2fdcc     13 13 02 F6 | 	mov	arg01, local01
2fdd0     00 14 06 F6 | 	mov	arg02, #0
2fdd4     09 16 C6 F9 | 	decod	arg03, #9
2fdd8     98 00 A0 FD | 	call	#\builtin_bytefill_
2fddc     13 13 02 F6 | 	mov	arg01, local01
2fde0     FE 13 06 F1 | 	add	arg01, #510
2fde4     55 00 80 FF 
2fde8     09 AB 58 FC | 	wrword	##43605, arg01
2fdec     A9 B0 A0 FF 
2fdf0     13 A5 68 FC | 	wrlong	##1096897106, local01
2fdf4     13 13 02 F6 | 	mov	arg01, local01
2fdf8     E4 13 06 F1 | 	add	arg01, #484
2fdfc     B9 A0 B0 FF 
2fe00     09 E5 68 FC | 	wrlong	##1631679090, arg01
2fe04     13 13 02 F6 | 	mov	arg01, local01
2fe08     E8 13 06 F1 | 	add	arg01, #488
2fe0c     20 26 86 F1 | 	sub	local01, #32
2fe10     13 15 02 FB | 	rdlong	arg02, local01
2fe14     09 15 62 FC | 	wrlong	arg02, arg01
2fe18     20 26 06 F1 | 	add	local01, #32
2fe1c     13 13 02 F6 | 	mov	arg01, local01
2fe20     EC 13 06 F1 | 	add	arg01, #492
2fe24     24 26 86 F1 | 	sub	local01, #36
2fe28     13 15 02 FB | 	rdlong	arg02, local01
2fe2c     09 15 62 FC | 	wrlong	arg02, arg01
2fe30     10 26 06 F1 | 	add	local01, #16
2fe34     13 17 02 FB | 	rdlong	arg03, local01
2fe38     01 16 06 F1 | 	add	arg03, #1
2fe3c     10 26 06 F1 | 	add	local01, #16
2fe40     13 17 62 FC | 	wrlong	arg03, local01
2fe44     2F 26 86 F1 | 	sub	local01, #47
2fe48     13 13 C2 FA | 	rdbyte	arg01, local01
2fe4c     33 26 06 F1 | 	add	local01, #51
2fe50     13 15 02 F6 | 	mov	arg02, local01
2fe54     01 18 06 F6 | 	mov	arg04, #1
2fe58     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
2fe5c     30 26 86 F1 | 	sub	local01, #48
2fe60     13 01 48 FC | 	wrbyte	#0, local01
2fe64     04 26 86 F1 | 	sub	local01, #4
2fe68                 | LR__4620
2fe68     01 26 06 F1 | 	add	local01, #1
2fe6c     13 13 C2 FA | 	rdbyte	arg01, local01
2fe70     00 14 06 F6 | 	mov	arg02, #0
2fe74     00 16 06 F6 | 	mov	arg03, #0
2fe78     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2fe7c     00 FA 0D F2 | 	cmp	result1, #0 wz
2fe80     01 28 06 56 |  if_ne	mov	local02, #1
2fe84                 | LR__4621
2fe84                 | ' 	}
2fe84                 | ' 
2fe84                 | ' 	return res;
2fe84     14 FB 01 F6 | 	mov	result1, local02
2fe88     A7 F0 03 F6 | 	mov	ptra, fp
2fe8c     B2 00 A0 FD | 	call	#popregs_
2fe90                 | _fatfs_cc_sync_fs_ret
2fe90     2D 00 64 FD | 	ret
2fe94                 | 
2fe94                 | _fatfs_cc_clst2sect
2fe94     02 14 86 F1 | 	sub	arg02, #2
2fe98     18 12 06 F1 | 	add	arg01, #24
2fe9c     09 01 02 FB | 	rdlong	_var01, arg01
2fea0     18 12 86 F1 | 	sub	arg01, #24
2fea4     02 00 86 F1 | 	sub	_var01, #2
2fea8     00 15 12 F2 | 	cmp	arg02, _var01 wc
2feac     00 FA 05 36 |  if_ae	mov	result1, #0
2feb0     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2feb4     0A 12 06 F1 | 	add	arg01, #10
2feb8     09 01 E2 FA | 	rdword	_var01, arg01
2febc     0A 01 02 FD | 	qmul	_var01, arg02
2fec0                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2fec0     22 12 06 F1 | 	add	arg01, #34
2fec4     09 FB 01 FB | 	rdlong	result1, arg01
2fec8     18 00 62 FD | 	getqx	_var01
2fecc     00 FB 01 F1 | 	add	result1, _var01
2fed0                 | _fatfs_cc_clst2sect_ret
2fed0     2D 00 64 FD | 	ret
2fed4                 | 
2fed4                 | _fatfs_cc_get_fat
2fed4     07 4A 05 F6 | 	mov	COUNT_, #7
2fed8     A8 00 A0 FD | 	call	#pushregs_
2fedc     0A 27 02 F6 | 	mov	local01, arg02
2fee0     09 29 02 FB | 	rdlong	local02, arg01
2fee4     02 26 16 F2 | 	cmp	local01, #2 wc
2fee8     14 00 90 CD |  if_b	jmp	#LR__4630
2feec     18 28 06 F1 | 	add	local02, #24
2fef0     14 2B 02 FB | 	rdlong	local03, local02
2fef4     18 28 86 F1 | 	sub	local02, #24
2fef8     15 27 12 F2 | 	cmp	local01, local03 wc
2fefc     08 00 90 CD |  if_b	jmp	#LR__4631
2ff00                 | LR__4630
2ff00     01 2C 06 F6 | 	mov	local04, #1
2ff04     60 01 90 FD | 	jmp	#LR__4638
2ff08                 | LR__4631
2ff08     01 2C 66 F6 | 	neg	local04, #1
2ff0c                 | ' 		val = 0xFFFFFFFF;
2ff0c                 | ' 
2ff0c                 | ' 		switch (fs->fs_type) {
2ff0c     14 2F C2 FA | 	rdbyte	local05, local02
2ff10     01 2E 86 F1 | 	sub	local05, #1
2ff14     03 2E 26 F3 | 	fle	local05, #3
2ff18     30 2E 62 FD | 	jmprel	local05
2ff1c                 | LR__4632
2ff1c     0C 00 90 FD | 	jmp	#LR__4633
2ff20     B8 00 90 FD | 	jmp	#LR__4634
2ff24     F8 00 90 FD | 	jmp	#LR__4635
2ff28     38 01 90 FD | 	jmp	#LR__4636
2ff2c                 | LR__4633
2ff2c     13 2F 02 F6 | 	mov	local05, local01
2ff30     13 13 02 F6 | 	mov	arg01, local01
2ff34     01 12 46 F0 | 	shr	arg01, #1
2ff38     09 2F 02 F1 | 	add	local05, arg01
2ff3c     14 13 02 F6 | 	mov	arg01, local02
2ff40     17 31 02 F6 | 	mov	local06, local05
2ff44     09 30 46 F0 | 	shr	local06, #9
2ff48     24 28 06 F1 | 	add	local02, #36
2ff4c     14 15 02 FB | 	rdlong	arg02, local02
2ff50     24 28 86 F1 | 	sub	local02, #36
2ff54     18 15 02 F1 | 	add	arg02, local06
2ff58     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2ff5c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ff60     04 01 90 5D |  if_ne	jmp	#LR__4637
2ff64     17 31 02 F6 | 	mov	local06, local05
2ff68     FF 31 06 F5 | 	and	local06, #511
2ff6c     34 28 06 F1 | 	add	local02, #52
2ff70     14 31 02 F1 | 	add	local06, local02
2ff74     18 33 C2 FA | 	rdbyte	local07, local06
2ff78     34 28 86 F1 | 	sub	local02, #52
2ff7c     14 13 02 F6 | 	mov	arg01, local02
2ff80     01 2E 06 F1 | 	add	local05, #1
2ff84     17 31 02 F6 | 	mov	local06, local05
2ff88     09 30 46 F0 | 	shr	local06, #9
2ff8c     24 28 06 F1 | 	add	local02, #36
2ff90     14 15 02 FB | 	rdlong	arg02, local02
2ff94     24 28 86 F1 | 	sub	local02, #36
2ff98     18 15 02 F1 | 	add	arg02, local06
2ff9c     7C FD BF FD | 	call	#_fatfs_cc_move_window
2ffa0     00 FA 0D F2 | 	cmp	result1, #0 wz
2ffa4     C0 00 90 5D |  if_ne	jmp	#LR__4637
2ffa8     FF 2F 06 F5 | 	and	local05, #511
2ffac     34 28 06 F1 | 	add	local02, #52
2ffb0     14 2F 02 F1 | 	add	local05, local02
2ffb4     17 31 C2 FA | 	rdbyte	local06, local05
2ffb8     08 30 66 F0 | 	shl	local06, #8
2ffbc     18 33 42 F5 | 	or	local07, local06
2ffc0     01 26 CE F7 | 	test	local01, #1 wz
2ffc4     04 32 46 50 |  if_ne	shr	local07, #4
2ffc8     19 2B 02 56 |  if_ne	mov	local03, local07
2ffcc     0B 32 46 A7 |  if_e	zerox	local07, #11
2ffd0     19 2B 02 A6 |  if_e	mov	local03, local07
2ffd4     15 2D 02 F6 | 	mov	local04, local03
2ffd8                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2ffd8                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2ffd8                 | ' 			break;
2ffd8     8C 00 90 FD | 	jmp	#LR__4637
2ffdc                 | LR__4634
2ffdc     14 13 02 F6 | 	mov	arg01, local02
2ffe0     13 31 02 F6 | 	mov	local06, local01
2ffe4     08 30 46 F0 | 	shr	local06, #8
2ffe8     24 28 06 F1 | 	add	local02, #36
2ffec     14 15 02 FB | 	rdlong	arg02, local02
2fff0     24 28 86 F1 | 	sub	local02, #36
2fff4     18 15 02 F1 | 	add	arg02, local06
2fff8     20 FD BF FD | 	call	#_fatfs_cc_move_window
2fffc     00 FA 0D F2 | 	cmp	result1, #0 wz
30000     64 00 90 5D |  if_ne	jmp	#LR__4637
30004     34 28 06 F1 | 	add	local02, #52
30008     01 26 66 F0 | 	shl	local01, #1
3000c     FF 27 06 F5 | 	and	local01, #511
30010     13 29 02 F1 | 	add	local02, local01
30014                 | ' {
30014                 | ' 
30014                 | ' 	return *((WORD*)ptr);
30014     14 FB E1 FA | 	rdword	result1, local02
30018     FD 2C 32 F9 | 	getword	local04, result1, #0
3001c                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
3001c                 | ' 			break;
3001c     48 00 90 FD | 	jmp	#LR__4637
30020                 | LR__4635
30020     14 13 02 F6 | 	mov	arg01, local02
30024     13 31 02 F6 | 	mov	local06, local01
30028     07 30 46 F0 | 	shr	local06, #7
3002c     24 28 06 F1 | 	add	local02, #36
30030     14 15 02 FB | 	rdlong	arg02, local02
30034     24 28 86 F1 | 	sub	local02, #36
30038     18 15 02 F1 | 	add	arg02, local06
3003c     DC FC BF FD | 	call	#_fatfs_cc_move_window
30040     00 FA 0D F2 | 	cmp	result1, #0 wz
30044     20 00 90 5D |  if_ne	jmp	#LR__4637
30048     34 28 06 F1 | 	add	local02, #52
3004c     02 26 66 F0 | 	shl	local01, #2
30050     FF 27 06 F5 | 	and	local01, #511
30054     13 29 02 F1 | 	add	local02, local01
30058                 | ' {
30058                 | ' 
30058                 | ' 	return *((DWORD*)ptr);
30058     14 2D 02 FB | 	rdlong	local04, local02
3005c     7C 2C 06 F4 | 	bitl	local04, #124
30060                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
30060                 | ' 			break;
30060     04 00 90 FD | 	jmp	#LR__4637
30064                 | LR__4636
30064     01 2C 06 F6 | 	mov	local04, #1
30068                 | LR__4637
30068                 | LR__4638
30068                 | ' 			val = 1;
30068                 | ' 		}
30068                 | ' 	}
30068                 | ' 
30068                 | ' 	return val;
30068     16 FB 01 F6 | 	mov	result1, local04
3006c     A7 F0 03 F6 | 	mov	ptra, fp
30070     B2 00 A0 FD | 	call	#popregs_
30074                 | _fatfs_cc_get_fat_ret
30074     2D 00 64 FD | 	ret
30078                 | 
30078                 | _fatfs_cc_put_fat
30078     08 4A 05 F6 | 	mov	COUNT_, #8
3007c     A8 00 A0 FD | 	call	#pushregs_
30080     09 27 02 F6 | 	mov	local01, arg01
30084     0A 29 02 F6 | 	mov	local02, arg02
30088     0B 2B 02 F6 | 	mov	local03, arg03
3008c     02 2C 06 F6 | 	mov	local04, #2
30090     02 28 16 F2 | 	cmp	local02, #2 wc
30094     E0 01 90 CD |  if_b	jmp	#LR__4647
30098     18 26 06 F1 | 	add	local01, #24
3009c     13 2F 02 FB | 	rdlong	local05, local01
300a0     18 26 86 F1 | 	sub	local01, #24
300a4     17 29 12 F2 | 	cmp	local02, local05 wc
300a8     CC 01 90 3D |  if_ae	jmp	#LR__4647
300ac                 | ' 		switch (fs->fs_type) {
300ac     13 31 C2 FA | 	rdbyte	local06, local01
300b0     01 30 86 F1 | 	sub	local06, #1
300b4     03 30 26 F3 | 	fle	local06, #3
300b8     30 30 62 FD | 	jmprel	local06
300bc                 | LR__4640
300bc     0C 00 90 FD | 	jmp	#LR__4641
300c0     F8 00 90 FD | 	jmp	#LR__4644
300c4     40 01 90 FD | 	jmp	#LR__4645
300c8     AC 01 90 FD | 	jmp	#LR__4646
300cc                 | LR__4641
300cc     14 33 02 F6 | 	mov	local07, local02
300d0     14 2F 02 F6 | 	mov	local05, local02
300d4     01 2E 46 F0 | 	shr	local05, #1
300d8     17 33 02 F1 | 	add	local07, local05
300dc     13 13 02 F6 | 	mov	arg01, local01
300e0     19 31 02 F6 | 	mov	local06, local07
300e4     09 30 46 F0 | 	shr	local06, #9
300e8     24 26 06 F1 | 	add	local01, #36
300ec     13 15 02 FB | 	rdlong	arg02, local01
300f0     24 26 86 F1 | 	sub	local01, #36
300f4     18 15 02 F1 | 	add	arg02, local06
300f8     20 FC BF FD | 	call	#_fatfs_cc_move_window
300fc     FD 2C 0A F6 | 	mov	local04, result1 wz
30100     74 01 90 5D |  if_ne	jmp	#LR__4646
30104     34 26 06 F1 | 	add	local01, #52
30108     13 35 02 F6 | 	mov	local08, local01
3010c     19 2F 02 F6 | 	mov	local05, local07
30110     FF 2F 06 F5 | 	and	local05, #511
30114     17 35 02 F1 | 	add	local08, local05
30118     01 28 CE F7 | 	test	local02, #1 wz
3011c     34 26 86 F1 | 	sub	local01, #52
30120     01 32 06 F1 | 	add	local07, #1
30124     18 00 90 AD |  if_e	jmp	#LR__4642
30128     1A 2F C2 FA | 	rdbyte	local05, local08
3012c     17 2F 42 F8 | 	getnib	local05, local05, #0
30130     15 31 E2 F8 | 	getbyte	local06, local03, #0
30134     04 30 66 F0 | 	shl	local06, #4
30138     18 2F 42 F5 | 	or	local05, local06
3013c     04 00 90 FD | 	jmp	#LR__4643
30140                 | LR__4642
30140     15 2F 02 F6 | 	mov	local05, local03
30144                 | LR__4643
30144     1A 2F 42 FC | 	wrbyte	local05, local08
30148     03 26 06 F1 | 	add	local01, #3
3014c     13 03 48 FC | 	wrbyte	#1, local01
30150     03 26 86 F1 | 	sub	local01, #3
30154     13 13 02 F6 | 	mov	arg01, local01
30158     19 35 02 F6 | 	mov	local08, local07
3015c     09 34 46 F0 | 	shr	local08, #9
30160     24 26 06 F1 | 	add	local01, #36
30164     13 15 02 FB | 	rdlong	arg02, local01
30168     24 26 86 F1 | 	sub	local01, #36
3016c     1A 15 02 F1 | 	add	arg02, local08
30170     A8 FB BF FD | 	call	#_fatfs_cc_move_window
30174     FD 2C 0A F6 | 	mov	local04, result1 wz
30178     FC 00 90 5D |  if_ne	jmp	#LR__4646
3017c     34 26 06 F1 | 	add	local01, #52
30180     13 35 02 F6 | 	mov	local08, local01
30184     FF 33 06 F5 | 	and	local07, #511
30188     19 35 02 F1 | 	add	local08, local07
3018c     01 28 CE F7 | 	test	local02, #1 wz
30190     04 2A 46 50 |  if_ne	shr	local03, #4
30194     15 2F 02 56 |  if_ne	mov	local05, local03
30198     1A 2F C2 AA |  if_e	rdbyte	local05, local08
3019c     F0 2E 06 A5 |  if_e	and	local05, #240
301a0     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
301a4     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
301a8     15 2F 42 A5 |  if_e	or	local05, local03
301ac     1A 2F 42 FC | 	wrbyte	local05, local08
301b0     31 26 86 F1 | 	sub	local01, #49
301b4     13 03 48 FC | 	wrbyte	#1, local01
301b8                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
301b8                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
301b8                 | ' 			fs->wflag = 1;
301b8                 | ' 			break;
301b8     BC 00 90 FD | 	jmp	#LR__4646
301bc                 | LR__4644
301bc     13 13 02 F6 | 	mov	arg01, local01
301c0     14 35 02 F6 | 	mov	local08, local02
301c4     08 34 46 F0 | 	shr	local08, #8
301c8     24 26 06 F1 | 	add	local01, #36
301cc     13 15 02 FB | 	rdlong	arg02, local01
301d0     24 26 86 F1 | 	sub	local01, #36
301d4     1A 15 02 F1 | 	add	arg02, local08
301d8     40 FB BF FD | 	call	#_fatfs_cc_move_window
301dc     FD 2C 0A F6 | 	mov	local04, result1 wz
301e0     94 00 90 5D |  if_ne	jmp	#LR__4646
301e4     34 26 06 F1 | 	add	local01, #52
301e8     13 13 02 F6 | 	mov	arg01, local01
301ec     01 28 66 F0 | 	shl	local02, #1
301f0     FF 29 06 F5 | 	and	local02, #511
301f4     14 13 02 F1 | 	add	arg01, local02
301f8     09 2B 52 FC | 	wrword	local03, arg01
301fc     31 26 86 F1 | 	sub	local01, #49
30200     13 03 48 FC | 	wrbyte	#1, local01
30204                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
30204                 | ' 			fs->wflag = 1;
30204                 | ' 			break;
30204     70 00 90 FD | 	jmp	#LR__4646
30208                 | LR__4645
30208     13 13 02 F6 | 	mov	arg01, local01
3020c     14 35 02 F6 | 	mov	local08, local02
30210     07 34 46 F0 | 	shr	local08, #7
30214     24 26 06 F1 | 	add	local01, #36
30218     13 15 02 FB | 	rdlong	arg02, local01
3021c     24 26 86 F1 | 	sub	local01, #36
30220     1A 15 02 F1 | 	add	arg02, local08
30224     F4 FA BF FD | 	call	#_fatfs_cc_move_window
30228     FD 2C 0A F6 | 	mov	local04, result1 wz
3022c     48 00 90 5D |  if_ne	jmp	#LR__4646
30230     7C 2A 06 F4 | 	bitl	local03, #124
30234     34 26 06 F1 | 	add	local01, #52
30238     14 35 02 F6 | 	mov	local08, local02
3023c     02 34 66 F0 | 	shl	local08, #2
30240     FF 35 06 F5 | 	and	local08, #511
30244     13 13 02 F6 | 	mov	arg01, local01
30248     1A 13 02 F1 | 	add	arg01, local08
3024c                 | ' {
3024c                 | ' 
3024c                 | ' 	return *((DWORD*)ptr);
3024c     09 35 02 FB | 	rdlong	local08, arg01
30250     00 00 78 FF 
30254     00 34 06 F5 | 	and	local08, ##-268435456
30258     1A 2B 42 F5 | 	or	local03, local08
3025c     13 13 02 F6 | 	mov	arg01, local01
30260     02 28 66 F0 | 	shl	local02, #2
30264     FF 29 06 F5 | 	and	local02, #511
30268     14 13 02 F1 | 	add	arg01, local02
3026c     09 2B 62 FC | 	wrlong	local03, arg01
30270     31 26 86 F1 | 	sub	local01, #49
30274     13 03 48 FC | 	wrbyte	#1, local01
30278                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
30278                 | ' 			}
30278                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
30278                 | ' 			fs->wflag = 1;
30278                 | ' 			break;
30278                 | LR__4646
30278                 | LR__4647
30278                 | ' 		}
30278                 | ' 	}
30278                 | ' 	return res;
30278     16 FB 01 F6 | 	mov	result1, local04
3027c     A7 F0 03 F6 | 	mov	ptra, fp
30280     B2 00 A0 FD | 	call	#popregs_
30284                 | _fatfs_cc_put_fat_ret
30284     2D 00 64 FD | 	ret
30288                 | 
30288                 | _fatfs_cc_remove_chain
30288     05 4A 05 F6 | 	mov	COUNT_, #5
3028c     A8 00 A0 FD | 	call	#pushregs_
30290     09 27 02 F6 | 	mov	local01, arg01
30294     0A 29 02 F6 | 	mov	local02, arg02
30298     0B 2B 02 F6 | 	mov	local03, arg03
3029c     13 2D 02 FB | 	rdlong	local04, local01
302a0     02 28 16 F2 | 	cmp	local02, #2 wc
302a4     14 00 90 CD |  if_b	jmp	#LR__4650
302a8     18 2C 06 F1 | 	add	local04, #24
302ac     16 FB 01 FB | 	rdlong	result1, local04
302b0     18 2C 86 F1 | 	sub	local04, #24
302b4     FD 28 12 F2 | 	cmp	local02, result1 wc
302b8     08 00 90 CD |  if_b	jmp	#LR__4651
302bc                 | LR__4650
302bc     02 FA 05 F6 | 	mov	result1, #2
302c0     CC 00 90 FD | 	jmp	#LR__4656
302c4                 | LR__4651
302c4     00 2A 0E F2 | 	cmp	local03, #0 wz
302c8     18 00 90 AD |  if_e	jmp	#LR__4652
302cc     15 15 02 F6 | 	mov	arg02, local03
302d0     16 13 02 F6 | 	mov	arg01, local04
302d4     01 16 66 F6 | 	neg	arg03, #1
302d8     9C FD BF FD | 	call	#_fatfs_cc_put_fat
302dc     00 FA 0D F2 | 	cmp	result1, #0 wz
302e0     AC 00 90 5D |  if_ne	jmp	#LR__4656
302e4                 | LR__4652
302e4                 | ' 	}
302e4                 | ' 
302e4                 | ' 
302e4                 | ' 	do {
302e4                 | LR__4653
302e4     14 15 02 F6 | 	mov	arg02, local02
302e8     13 13 02 F6 | 	mov	arg01, local01
302ec     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
302f0     FD 2E 0A F6 | 	mov	local05, result1 wz
302f4     94 00 90 AD |  if_e	jmp	#LR__4655
302f8     01 2E 0E F2 | 	cmp	local05, #1 wz
302fc     02 FA 05 A6 |  if_e	mov	result1, #2
30300     8C 00 90 AD |  if_e	jmp	#LR__4656
30304     FF FF 7F FF 
30308     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
3030c     01 FA 05 A6 |  if_e	mov	result1, #1
30310     7C 00 90 AD |  if_e	jmp	#LR__4656
30314     14 15 02 F6 | 	mov	arg02, local02
30318     16 13 02 F6 | 	mov	arg01, local04
3031c     00 16 06 F6 | 	mov	arg03, #0
30320     54 FD BF FD | 	call	#_fatfs_cc_put_fat
30324     FD 2A 0A F6 | 	mov	local03, result1 wz
30328     15 FB 01 56 |  if_ne	mov	result1, local03
3032c     60 00 90 5D |  if_ne	jmp	#LR__4656
30330     18 2C 06 F1 | 	add	local04, #24
30334     16 2B 02 FB | 	rdlong	local03, local04
30338     02 2A 86 F1 | 	sub	local03, #2
3033c     04 2C 86 F1 | 	sub	local04, #4
30340     16 29 02 FB | 	rdlong	local02, local04
30344     14 2C 86 F1 | 	sub	local04, #20
30348     15 29 12 F2 | 	cmp	local02, local03 wc
3034c     24 00 90 3D |  if_ae	jmp	#LR__4654
30350     14 2C 06 F1 | 	add	local04, #20
30354     16 2B 02 FB | 	rdlong	local03, local04
30358     01 2A 06 F1 | 	add	local03, #1
3035c     16 2B 62 FC | 	wrlong	local03, local04
30360     10 2C 86 F1 | 	sub	local04, #16
30364     16 2B C2 FA | 	rdbyte	local03, local04
30368     01 2A 46 F5 | 	or	local03, #1
3036c     16 2B 42 FC | 	wrbyte	local03, local04
30370     04 2C 86 F1 | 	sub	local04, #4
30374                 | LR__4654
30374     17 29 02 F6 | 	mov	local02, local05
30378     18 2C 06 F1 | 	add	local04, #24
3037c     16 2F 02 FB | 	rdlong	local05, local04
30380     18 2C 86 F1 | 	sub	local04, #24
30384     17 29 12 F2 | 	cmp	local02, local05 wc
30388     58 FF 9F CD |  if_b	jmp	#LR__4653
3038c                 | LR__4655
3038c                 | ' #line 1500 "ff.c"
3038c                 | ' 	return FR_OK;
3038c     00 FA 05 F6 | 	mov	result1, #0
30390                 | LR__4656
30390     A7 F0 03 F6 | 	mov	ptra, fp
30394     B2 00 A0 FD | 	call	#popregs_
30398                 | _fatfs_cc_remove_chain_ret
30398     2D 00 64 FD | 	ret
3039c                 | 
3039c                 | _fatfs_cc_create_chain
3039c     09 4A 05 F6 | 	mov	COUNT_, #9
303a0     A8 00 A0 FD | 	call	#pushregs_
303a4     09 27 02 F6 | 	mov	local01, arg01
303a8     0A 29 0A F6 | 	mov	local02, arg02 wz
303ac     13 2B 02 FB | 	rdlong	local03, local01
303b0     28 00 90 5D |  if_ne	jmp	#LR__4660
303b4     10 2A 06 F1 | 	add	local03, #16
303b8     15 2D 0A FB | 	rdlong	local04, local03 wz
303bc     10 2A 86 F1 | 	sub	local03, #16
303c0     18 2A 06 51 |  if_ne	add	local03, #24
303c4     15 2F 02 5B |  if_ne	rdlong	local05, local03
303c8     18 2A 86 51 |  if_ne	sub	local03, #24
303cc     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
303d0     50 00 90 4D |  if_c_and_nz	jmp	#LR__4661
303d4     01 2C 06 F6 | 	mov	local04, #1
303d8     48 00 90 FD | 	jmp	#LR__4661
303dc                 | LR__4660
303dc     14 15 02 F6 | 	mov	arg02, local02
303e0     13 13 02 F6 | 	mov	arg01, local01
303e4     EC FA BF FD | 	call	#_fatfs_cc_get_fat
303e8     FD 2C 02 F6 | 	mov	local04, result1
303ec     02 2C 16 F2 | 	cmp	local04, #2 wc
303f0     01 FA 05 C6 |  if_b	mov	result1, #1
303f4     BC 01 90 CD |  if_b	jmp	#LR__4671
303f8     FF FF 7F FF 
303fc     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
30400     16 FB 01 A6 |  if_e	mov	result1, local04
30404     AC 01 90 AD |  if_e	jmp	#LR__4671
30408     18 2A 06 F1 | 	add	local03, #24
3040c     15 2F 02 FB | 	rdlong	local05, local03
30410     18 2A 86 F1 | 	sub	local03, #24
30414     17 2D 12 F2 | 	cmp	local04, local05 wc
30418     16 FB 01 C6 |  if_b	mov	result1, local04
3041c     94 01 90 CD |  if_b	jmp	#LR__4671
30420     14 2D 02 F6 | 	mov	local04, local02
30424                 | LR__4661
30424     14 2A 06 F1 | 	add	local03, #20
30428     15 2F 0A FB | 	rdlong	local05, local03 wz
3042c     14 2A 86 F1 | 	sub	local03, #20
30430     00 FA 05 A6 |  if_e	mov	result1, #0
30434     7C 01 90 AD |  if_e	jmp	#LR__4671
30438     00 30 06 F6 | 	mov	local06, #0
3043c     14 2D 0A F2 | 	cmp	local04, local02 wz
30440     74 00 90 5D |  if_ne	jmp	#LR__4664
30444     16 31 02 F6 | 	mov	local06, local04
30448     01 30 06 F1 | 	add	local06, #1
3044c     18 2A 06 F1 | 	add	local03, #24
30450     15 2F 02 FB | 	rdlong	local05, local03
30454     18 2A 86 F1 | 	sub	local03, #24
30458     17 31 12 F2 | 	cmp	local06, local05 wc
3045c     02 30 06 36 |  if_ae	mov	local06, #2
30460     18 15 02 F6 | 	mov	arg02, local06
30464     13 13 02 F6 | 	mov	arg01, local01
30468     68 FA BF FD | 	call	#_fatfs_cc_get_fat
3046c     FD 2E 02 F6 | 	mov	local05, result1
30470     01 2E 0E F2 | 	cmp	local05, #1 wz
30474     FF FF 7F 5F 
30478     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
3047c     17 FB 01 A6 |  if_e	mov	result1, local05
30480     30 01 90 AD |  if_e	jmp	#LR__4671
30484     00 2E 0E F2 | 	cmp	local05, #0 wz
30488     2C 00 90 AD |  if_e	jmp	#LR__4663
3048c     10 2A 06 F1 | 	add	local03, #16
30490     15 33 02 FB | 	rdlong	local07, local03
30494     10 2A 86 F1 | 	sub	local03, #16
30498     02 32 16 F2 | 	cmp	local07, #2 wc
3049c     14 00 90 CD |  if_b	jmp	#LR__4662
304a0     18 2A 06 F1 | 	add	local03, #24
304a4     15 2F 02 FB | 	rdlong	local05, local03
304a8     18 2A 86 F1 | 	sub	local03, #24
304ac     17 33 12 F2 | 	cmp	local07, local05 wc
304b0     19 2D 02 C6 |  if_b	mov	local04, local07
304b4                 | LR__4662
304b4     00 30 06 F6 | 	mov	local06, #0
304b8                 | LR__4663
304b8                 | LR__4664
304b8     00 30 0E F2 | 	cmp	local06, #0 wz
304bc     60 00 90 5D |  if_ne	jmp	#LR__4667
304c0     16 31 02 F6 | 	mov	local06, local04
304c4                 | ' 			ncl = scl;
304c4                 | ' 			for (;;) {
304c4                 | LR__4665
304c4     01 30 06 F1 | 	add	local06, #1
304c8     18 2A 06 F1 | 	add	local03, #24
304cc     15 2F 02 FB | 	rdlong	local05, local03
304d0     18 2A 86 F1 | 	sub	local03, #24
304d4     17 31 12 F2 | 	cmp	local06, local05 wc
304d8     02 30 06 36 |  if_ae	mov	local06, #2
304dc     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
304e0     00 FA 05 16 |  if_a	mov	result1, #0
304e4     CC 00 90 1D |  if_a	jmp	#LR__4671
304e8     18 15 02 F6 | 	mov	arg02, local06
304ec     13 13 02 F6 | 	mov	arg01, local01
304f0     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
304f4     FD 32 0A F6 | 	mov	local07, result1 wz
304f8     24 00 90 AD |  if_e	jmp	#LR__4666
304fc     01 32 0E F2 | 	cmp	local07, #1 wz
30500     FF FF 7F 5F 
30504     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
30508     19 FB 01 A6 |  if_e	mov	result1, local07
3050c     A4 00 90 AD |  if_e	jmp	#LR__4671
30510     16 31 0A F2 | 	cmp	local06, local04 wz
30514     00 FA 05 A6 |  if_e	mov	result1, #0
30518     98 00 90 AD |  if_e	jmp	#LR__4671
3051c     A4 FF 9F FD | 	jmp	#LR__4665
30520                 | LR__4666
30520                 | LR__4667
30520     15 13 02 F6 | 	mov	arg01, local03
30524     18 15 02 F6 | 	mov	arg02, local06
30528     01 16 66 F6 | 	neg	arg03, #1
3052c     48 FB BF FD | 	call	#_fatfs_cc_put_fat
30530     FD 34 0A F6 | 	mov	local08, result1 wz
30534     1C 00 90 5D |  if_ne	jmp	#LR__4668
30538     00 28 0E F2 | 	cmp	local02, #0 wz
3053c     14 00 90 AD |  if_e	jmp	#LR__4668
30540     15 13 02 F6 | 	mov	arg01, local03
30544     14 15 02 F6 | 	mov	arg02, local02
30548     18 17 02 F6 | 	mov	arg03, local06
3054c     28 FB BF FD | 	call	#_fatfs_cc_put_fat
30550     FD 34 02 F6 | 	mov	local08, result1
30554                 | LR__4668
30554     00 34 0E F2 | 	cmp	local08, #0 wz
30558     4C 00 90 5D |  if_ne	jmp	#LR__4669
3055c     10 2A 06 F1 | 	add	local03, #16
30560     15 31 62 FC | 	wrlong	local06, local03
30564     08 2A 06 F1 | 	add	local03, #8
30568     15 2F 02 FB | 	rdlong	local05, local03
3056c     02 2E 86 F1 | 	sub	local05, #2
30570     04 2A 86 F1 | 	sub	local03, #4
30574     15 37 02 FB | 	rdlong	local09, local03
30578     14 2A 86 F1 | 	sub	local03, #20
3057c     17 37 1A F2 | 	cmp	local09, local05 wcz
30580     14 2A 06 E1 |  if_be	add	local03, #20
30584     15 37 02 EB |  if_be	rdlong	local09, local03
30588     01 36 86 E1 |  if_be	sub	local09, #1
3058c     15 37 62 EC |  if_be	wrlong	local09, local03
30590     14 2A 86 E1 |  if_be	sub	local03, #20
30594     04 2A 06 F1 | 	add	local03, #4
30598     15 2F C2 FA | 	rdbyte	local05, local03
3059c     01 2E 46 F5 | 	or	local05, #1
305a0     15 2F 42 FC | 	wrbyte	local05, local03
305a4     08 00 90 FD | 	jmp	#LR__4670
305a8                 | LR__4669
305a8     01 34 0E F2 | 	cmp	local08, #1 wz
305ac     01 30 C6 F6 | 	negz	local06, #1
305b0                 | LR__4670
305b0                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
305b0                 | ' 	}
305b0                 | ' 
305b0                 | ' 	return ncl;
305b0     18 FB 01 F6 | 	mov	result1, local06
305b4                 | LR__4671
305b4     A7 F0 03 F6 | 	mov	ptra, fp
305b8     B2 00 A0 FD | 	call	#popregs_
305bc                 | _fatfs_cc_create_chain_ret
305bc     2D 00 64 FD | 	ret
305c0                 | 
305c0                 | _fatfs_cc_dir_clear
305c0     06 4A 05 F6 | 	mov	COUNT_, #6
305c4     A8 00 A0 FD | 	call	#pushregs_
305c8     09 27 02 F6 | 	mov	local01, arg01
305cc     0A 29 02 F6 | 	mov	local02, arg02
305d0     13 13 02 F6 | 	mov	arg01, local01
305d4     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
305d8     00 FA 0D F2 | 	cmp	result1, #0 wz
305dc     01 FA 05 56 |  if_ne	mov	result1, #1
305e0     90 00 90 5D |  if_ne	jmp	#LR__4682
305e4     13 13 02 F6 | 	mov	arg01, local01
305e8     14 15 02 F6 | 	mov	arg02, local02
305ec     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
305f0     FD 2A 02 F6 | 	mov	local03, result1
305f4     30 26 06 F1 | 	add	local01, #48
305f8     13 2B 62 FC | 	wrlong	local03, local01
305fc     04 26 06 F1 | 	add	local01, #4
30600     13 13 02 F6 | 	mov	arg01, local01
30604     00 14 06 F6 | 	mov	arg02, #0
30608     09 16 C6 F9 | 	decod	arg03, #9
3060c     98 00 A0 FD | 	call	#\builtin_bytefill_
30610     13 2D 02 F6 | 	mov	local04, local01
30614                 | ' #line 1667 "ff.c"
30614                 | ' 	{
30614                 | ' 		ibuf = fs->win; szb = 1;
30614                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
30614     00 2E 06 F6 | 	mov	local05, #0
30618     34 26 86 F1 | 	sub	local01, #52
3061c                 | LR__4680
3061c     0A 26 06 F1 | 	add	local01, #10
30620     13 31 E2 FA | 	rdword	local06, local01
30624     0A 26 86 F1 | 	sub	local01, #10
30628     18 2F 12 F2 | 	cmp	local05, local06 wc
3062c     2C 00 90 3D |  if_ae	jmp	#LR__4681
30630     01 26 06 F1 | 	add	local01, #1
30634     13 13 C2 FA | 	rdbyte	arg01, local01
30638     01 26 86 F1 | 	sub	local01, #1
3063c     16 15 02 F6 | 	mov	arg02, local04
30640     15 17 02 F6 | 	mov	arg03, local03
30644     17 17 02 F1 | 	add	arg03, local05
30648     01 18 06 F6 | 	mov	arg04, #1
3064c     9C EF BF FD | 	call	#_fatfs_cc_disk_write
30650     00 FA 0D F2 | 	cmp	result1, #0 wz
30654     01 2E 06 A1 |  if_e	add	local05, #1
30658     C0 FF 9F AD |  if_e	jmp	#LR__4680
3065c                 | LR__4681
3065c                 | ' 	}
3065c                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
3065c     0A 26 06 F1 | 	add	local01, #10
30660     13 2D E2 FA | 	rdword	local04, local01
30664     16 2F 0A F2 | 	cmp	local05, local04 wz
30668     00 30 06 A6 |  if_e	mov	local06, #0
3066c     01 30 06 56 |  if_ne	mov	local06, #1
30670     18 FB 01 F6 | 	mov	result1, local06
30674                 | LR__4682
30674     A7 F0 03 F6 | 	mov	ptra, fp
30678     B2 00 A0 FD | 	call	#popregs_
3067c                 | _fatfs_cc_dir_clear_ret
3067c     2D 00 64 FD | 	ret
30680                 | 
30680                 | _fatfs_cc_dir_sdi
30680     06 4A 05 F6 | 	mov	COUNT_, #6
30684     A8 00 A0 FD | 	call	#pushregs_
30688     09 27 02 F6 | 	mov	local01, arg01
3068c     0A 29 02 F6 | 	mov	local02, arg02
30690     13 2B 02 FB | 	rdlong	local03, local01
30694     00 10 00 FF 
30698     00 28 16 F2 | 	cmp	local02, ##2097152 wc
3069c     1F 28 CE C7 |  if_b	test	local02, #31 wz
306a0                 | ' 		return FR_INT_ERR;
306a0     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
306a4     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4696
306a8     10 26 06 F1 | 	add	local01, #16
306ac     13 29 62 FC | 	wrlong	local02, local01
306b0     08 26 86 F1 | 	sub	local01, #8
306b4     13 2D 0A FB | 	rdlong	local04, local01 wz
306b8     08 26 86 F1 | 	sub	local01, #8
306bc     15 2F C2 AA |  if_e	rdbyte	local05, local03
306c0     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
306c4     28 2A 06 21 |  if_nc_and_z	add	local03, #40
306c8     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
306cc     28 2A 86 21 |  if_nc_and_z	sub	local03, #40
306d0     00 2C 0E F2 | 	cmp	local04, #0 wz
306d4     3C 00 90 5D |  if_ne	jmp	#LR__4690
306d8     14 2F 02 F6 | 	mov	local05, local02
306dc     05 2E 46 F0 | 	shr	local05, #5
306e0     08 2A 06 F1 | 	add	local03, #8
306e4     15 15 E2 FA | 	rdword	arg02, local03
306e8     08 2A 86 F1 | 	sub	local03, #8
306ec     0A 2F 12 F2 | 	cmp	local05, arg02 wc
306f0     02 FA 05 36 |  if_ae	mov	result1, #2
306f4     E4 00 90 3D |  if_ae	jmp	#LR__4696
306f8     28 2A 06 F1 | 	add	local03, #40
306fc     15 2F 02 FB | 	rdlong	local05, local03
30700     28 2A 86 F1 | 	sub	local03, #40
30704     18 26 06 F1 | 	add	local01, #24
30708     13 2F 62 FC | 	wrlong	local05, local01
3070c     18 26 86 F1 | 	sub	local01, #24
30710     7C 00 90 FD | 	jmp	#LR__4695
30714                 | LR__4690
30714     0A 2A 06 F1 | 	add	local03, #10
30718     15 31 E2 FA | 	rdword	local06, local03
3071c     0A 2A 86 F1 | 	sub	local03, #10
30720     09 30 66 F0 | 	shl	local06, #9
30724                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
30724                 | ' 		while (ofs >= csz) {
30724                 | LR__4691
30724     18 29 12 F2 | 	cmp	local02, local06 wc
30728     4C 00 90 CD |  if_b	jmp	#LR__4694
3072c     13 13 02 F6 | 	mov	arg01, local01
30730     16 15 02 F6 | 	mov	arg02, local04
30734     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
30738     FD 2C 02 F6 | 	mov	local04, result1
3073c     FF FF 7F FF 
30740     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
30744     01 FA 05 A6 |  if_e	mov	result1, #1
30748     90 00 90 AD |  if_e	jmp	#LR__4696
3074c     02 2C 16 F2 | 	cmp	local04, #2 wc
30750     14 00 90 CD |  if_b	jmp	#LR__4692
30754     18 2A 06 F1 | 	add	local03, #24
30758     15 2F 02 FB | 	rdlong	local05, local03
3075c     18 2A 86 F1 | 	sub	local03, #24
30760     17 2D 12 F2 | 	cmp	local04, local05 wc
30764     08 00 90 CD |  if_b	jmp	#LR__4693
30768                 | LR__4692
30768     02 FA 05 F6 | 	mov	result1, #2
3076c     6C 00 90 FD | 	jmp	#LR__4696
30770                 | LR__4693
30770     18 29 82 F1 | 	sub	local02, local06
30774     AC FF 9F FD | 	jmp	#LR__4691
30778                 | LR__4694
30778     15 13 02 F6 | 	mov	arg01, local03
3077c     16 15 02 F6 | 	mov	arg02, local04
30780     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
30784     18 26 06 F1 | 	add	local01, #24
30788     13 FB 61 FC | 	wrlong	result1, local01
3078c     18 26 86 F1 | 	sub	local01, #24
30790                 | LR__4695
30790     14 26 06 F1 | 	add	local01, #20
30794     13 2D 62 FC | 	wrlong	local04, local01
30798     04 26 06 F1 | 	add	local01, #4
3079c     13 2F 0A FB | 	rdlong	local05, local01 wz
307a0     18 26 86 F1 | 	sub	local01, #24
307a4     02 FA 05 A6 |  if_e	mov	result1, #2
307a8     30 00 90 AD |  if_e	jmp	#LR__4696
307ac     14 31 02 F6 | 	mov	local06, local02
307b0     09 30 46 F0 | 	shr	local06, #9
307b4     18 26 06 F1 | 	add	local01, #24
307b8     13 2F 02 FB | 	rdlong	local05, local01
307bc     18 2F 02 F1 | 	add	local05, local06
307c0     13 2F 62 FC | 	wrlong	local05, local01
307c4     34 2A 06 F1 | 	add	local03, #52
307c8     FF 29 06 F5 | 	and	local02, #511
307cc     14 2B 02 F1 | 	add	local03, local02
307d0     04 26 06 F1 | 	add	local01, #4
307d4     13 2B 62 FC | 	wrlong	local03, local01
307d8                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
307d8                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
307d8                 | ' 
307d8                 | ' 	return FR_OK;
307d8     00 FA 05 F6 | 	mov	result1, #0
307dc                 | LR__4696
307dc     A7 F0 03 F6 | 	mov	ptra, fp
307e0     B2 00 A0 FD | 	call	#popregs_
307e4                 | _fatfs_cc_dir_sdi_ret
307e4     2D 00 64 FD | 	ret
307e8                 | 
307e8                 | _fatfs_cc_dir_next
307e8     05 4A 05 F6 | 	mov	COUNT_, #5
307ec     A8 00 A0 FD | 	call	#pushregs_
307f0     09 27 02 F6 | 	mov	local01, arg01
307f4     0A 29 02 F6 | 	mov	local02, arg02
307f8     13 2B 02 FB | 	rdlong	local03, local01
307fc     10 26 06 F1 | 	add	local01, #16
30800     13 2D 02 FB | 	rdlong	local04, local01
30804     10 26 86 F1 | 	sub	local01, #16
30808     20 2C 06 F1 | 	add	local04, #32
3080c     00 10 00 FF 
30810     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
30814     18 26 06 31 |  if_ae	add	local01, #24
30818     13 01 68 3C |  if_ae	wrlong	#0, local01
3081c     18 26 86 31 |  if_ae	sub	local01, #24
30820     18 26 06 F1 | 	add	local01, #24
30824     13 15 0A FB | 	rdlong	arg02, local01 wz
30828     18 26 86 F1 | 	sub	local01, #24
3082c     04 FA 05 A6 |  if_e	mov	result1, #4
30830     64 01 90 AD |  if_e	jmp	#LR__4705
30834     FF 2D CE F7 | 	test	local04, #511 wz
30838     3C 01 90 5D |  if_ne	jmp	#LR__4704
3083c     18 26 06 F1 | 	add	local01, #24
30840     13 15 02 FB | 	rdlong	arg02, local01
30844     01 14 06 F1 | 	add	arg02, #1
30848     13 15 62 FC | 	wrlong	arg02, local01
3084c     04 26 86 F1 | 	sub	local01, #4
30850     13 15 0A FB | 	rdlong	arg02, local01 wz
30854     14 26 86 F1 | 	sub	local01, #20
30858     2C 00 90 5D |  if_ne	jmp	#LR__4700
3085c     16 15 02 F6 | 	mov	arg02, local04
30860     05 14 46 F0 | 	shr	arg02, #5
30864     08 2A 06 F1 | 	add	local03, #8
30868     15 29 E2 FA | 	rdword	local02, local03
3086c     08 2A 86 F1 | 	sub	local03, #8
30870     14 15 12 F2 | 	cmp	arg02, local02 wc
30874     18 26 06 31 |  if_ae	add	local01, #24
30878     13 01 68 3C |  if_ae	wrlong	#0, local01
3087c                 | ' 				dp->sect = 0; return FR_NO_FILE;
3087c     04 FA 05 36 |  if_ae	mov	result1, #4
30880     14 01 90 3D |  if_ae	jmp	#LR__4705
30884     F0 00 90 FD | 	jmp	#LR__4703
30888                 | LR__4700
30888     16 13 02 F6 | 	mov	arg01, local04
3088c     09 12 46 F0 | 	shr	arg01, #9
30890     0A 2A 06 F1 | 	add	local03, #10
30894     15 15 E2 FA | 	rdword	arg02, local03
30898     0A 2A 86 F1 | 	sub	local03, #10
3089c     01 14 86 F1 | 	sub	arg02, #1
308a0     0A 13 CA F7 | 	test	arg01, arg02 wz
308a4     D0 00 90 5D |  if_ne	jmp	#LR__4702
308a8     13 13 02 F6 | 	mov	arg01, local01
308ac     14 26 06 F1 | 	add	local01, #20
308b0     13 15 02 FB | 	rdlong	arg02, local01
308b4     14 26 86 F1 | 	sub	local01, #20
308b8     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
308bc     FD 2E 02 F6 | 	mov	local05, result1
308c0     02 2E 16 F2 | 	cmp	local05, #2 wc
308c4     02 FA 05 C6 |  if_b	mov	result1, #2
308c8     CC 00 90 CD |  if_b	jmp	#LR__4705
308cc     FF FF 7F FF 
308d0     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
308d4     01 FA 05 A6 |  if_e	mov	result1, #1
308d8     BC 00 90 AD |  if_e	jmp	#LR__4705
308dc     18 2A 06 F1 | 	add	local03, #24
308e0     15 15 02 FB | 	rdlong	arg02, local03
308e4     18 2A 86 F1 | 	sub	local03, #24
308e8     0A 2F 12 F2 | 	cmp	local05, arg02 wc
308ec     68 00 90 CD |  if_b	jmp	#LR__4701
308f0     00 28 0E F2 | 	cmp	local02, #0 wz
308f4     18 26 06 A1 |  if_e	add	local01, #24
308f8     13 01 68 AC |  if_e	wrlong	#0, local01
308fc                 | ' 						dp->sect = 0; return FR_NO_FILE;
308fc     04 FA 05 A6 |  if_e	mov	result1, #4
30900     94 00 90 AD |  if_e	jmp	#LR__4705
30904     13 13 02 F6 | 	mov	arg01, local01
30908     14 26 06 F1 | 	add	local01, #20
3090c     13 15 02 FB | 	rdlong	arg02, local01
30910     14 26 86 F1 | 	sub	local01, #20
30914     84 FA BF FD | 	call	#_fatfs_cc_create_chain
30918     FD 2E 0A F6 | 	mov	local05, result1 wz
3091c     07 FA 05 A6 |  if_e	mov	result1, #7
30920     74 00 90 AD |  if_e	jmp	#LR__4705
30924     01 2E 0E F2 | 	cmp	local05, #1 wz
30928     02 FA 05 A6 |  if_e	mov	result1, #2
3092c     68 00 90 AD |  if_e	jmp	#LR__4705
30930     FF FF 7F FF 
30934     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
30938     01 FA 05 A6 |  if_e	mov	result1, #1
3093c     58 00 90 AD |  if_e	jmp	#LR__4705
30940     17 15 02 F6 | 	mov	arg02, local05
30944     15 13 02 F6 | 	mov	arg01, local03
30948     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
3094c     00 FA 0D F2 | 	cmp	result1, #0 wz
30950     01 FA 05 56 |  if_ne	mov	result1, #1
30954     40 00 90 5D |  if_ne	jmp	#LR__4705
30958                 | LR__4701
30958     14 26 06 F1 | 	add	local01, #20
3095c     13 2F 62 FC | 	wrlong	local05, local01
30960     15 13 02 F6 | 	mov	arg01, local03
30964     17 15 02 F6 | 	mov	arg02, local05
30968     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
3096c     04 26 06 F1 | 	add	local01, #4
30970     13 FB 61 FC | 	wrlong	result1, local01
30974     18 26 86 F1 | 	sub	local01, #24
30978                 | LR__4702
30978                 | LR__4703
30978                 | LR__4704
30978     10 26 06 F1 | 	add	local01, #16
3097c     13 2D 62 FC | 	wrlong	local04, local01
30980     34 2A 06 F1 | 	add	local03, #52
30984     FF 2D 06 F5 | 	and	local04, #511
30988     16 2B 02 F1 | 	add	local03, local04
3098c     0C 26 06 F1 | 	add	local01, #12
30990     13 2B 62 FC | 	wrlong	local03, local01
30994                 | ' #line 1771 "ff.c"
30994                 | ' 				}
30994                 | ' 				dp->clust = clst;
30994                 | ' 				dp->sect = clst2sect(fs, clst);
30994                 | ' 			}
30994                 | ' 		}
30994                 | ' 	}
30994                 | ' 	dp->dptr = ofs;
30994                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
30994                 | ' 
30994                 | ' 	return FR_OK;
30994     00 FA 05 F6 | 	mov	result1, #0
30998                 | LR__4705
30998     A7 F0 03 F6 | 	mov	ptra, fp
3099c     B2 00 A0 FD | 	call	#popregs_
309a0                 | _fatfs_cc_dir_next_ret
309a0     2D 00 64 FD | 	ret
309a4                 | 
309a4                 | _fatfs_cc_dir_alloc
309a4     08 4A 05 F6 | 	mov	COUNT_, #8
309a8     A8 00 A0 FD | 	call	#pushregs_
309ac     09 27 02 F6 | 	mov	local01, arg01
309b0     0A 29 02 F6 | 	mov	local02, arg02
309b4     13 2B 02 FB | 	rdlong	local03, local01
309b8     13 13 02 F6 | 	mov	arg01, local01
309bc     00 14 06 F6 | 	mov	arg02, #0
309c0     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
309c4     FD 2C 0A F6 | 	mov	local04, result1 wz
309c8     70 00 90 5D |  if_ne	jmp	#LR__4714
309cc     00 2E 06 F6 | 	mov	local05, #0
309d0                 | ' 		n = 0;
309d0                 | ' 		do {
309d0                 | LR__4710
309d0     18 26 06 F1 | 	add	local01, #24
309d4     13 15 02 FB | 	rdlong	arg02, local01
309d8     18 26 86 F1 | 	sub	local01, #24
309dc     15 13 02 F6 | 	mov	arg01, local03
309e0     38 F3 BF FD | 	call	#_fatfs_cc_move_window
309e4     FD 2C 0A F6 | 	mov	local04, result1 wz
309e8     50 00 90 5D |  if_ne	jmp	#LR__4713
309ec     1C 26 06 F1 | 	add	local01, #28
309f0     13 31 02 FB | 	rdlong	local06, local01
309f4     1C 26 86 F1 | 	sub	local01, #28
309f8     18 31 C2 FA | 	rdbyte	local06, local06
309fc     E5 30 0E F2 | 	cmp	local06, #229 wz
30a00     1C 26 06 51 |  if_ne	add	local01, #28
30a04     13 33 02 5B |  if_ne	rdlong	local07, local01
30a08     1C 26 86 51 |  if_ne	sub	local01, #28
30a0c     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
30a10     10 00 90 5D |  if_ne	jmp	#LR__4711
30a14     01 2E 06 F1 | 	add	local05, #1
30a18     14 2F 0A F2 | 	cmp	local05, local02 wz
30a1c     1C 00 90 AD |  if_e	jmp	#LR__4713
30a20     04 00 90 FD | 	jmp	#LR__4712
30a24                 | LR__4711
30a24     00 2E 06 F6 | 	mov	local05, #0
30a28                 | LR__4712
30a28     13 13 02 F6 | 	mov	arg01, local01
30a2c     01 14 06 F6 | 	mov	arg02, #1
30a30     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
30a34     FD 2C 0A F6 | 	mov	local04, result1 wz
30a38     94 FF 9F AD |  if_e	jmp	#LR__4710
30a3c                 | LR__4713
30a3c                 | LR__4714
30a3c     04 2C 0E F2 | 	cmp	local04, #4 wz
30a40     07 2C 06 A6 |  if_e	mov	local04, #7
30a44                 | ' 	return res;
30a44     16 FB 01 F6 | 	mov	result1, local04
30a48     A7 F0 03 F6 | 	mov	ptra, fp
30a4c     B2 00 A0 FD | 	call	#popregs_
30a50                 | _fatfs_cc_dir_alloc_ret
30a50     2D 00 64 FD | 	ret
30a54                 | 
30a54                 | _fatfs_cc_ld_clust
30a54     09 01 02 F6 | 	mov	_var01, arg01
30a58     0A 13 02 F6 | 	mov	arg01, arg02
30a5c     1A 12 06 F1 | 	add	arg01, #26
30a60                 | ' {
30a60                 | ' 
30a60                 | ' 	return *((WORD*)ptr);
30a60     09 FB E1 FA | 	rdword	result1, arg01
30a64     FD 12 32 F9 | 	getword	arg01, result1, #0
30a68     00 01 C2 FA | 	rdbyte	_var01, _var01
30a6c     03 00 0E F2 | 	cmp	_var01, #3 wz
30a70     14 14 06 A1 |  if_e	add	arg02, #20
30a74                 | ' {
30a74                 | ' 
30a74                 | ' 	return *((WORD*)ptr);
30a74     0A FB E1 AA |  if_e	rdword	result1, arg02
30a78     10 FA 65 A0 |  if_e	shl	result1, #16
30a7c     FD 12 42 A5 |  if_e	or	arg01, result1
30a80                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
30a80                 | ' 	}
30a80                 | ' 
30a80                 | ' 	return cl;
30a80     09 FB 01 F6 | 	mov	result1, arg01
30a84                 | _fatfs_cc_ld_clust_ret
30a84     2D 00 64 FD | 	ret
30a88                 | 
30a88                 | _fatfs_cc_st_clust
30a88     09 01 02 F6 | 	mov	_var01, arg01
30a8c     0A 13 02 F6 | 	mov	arg01, arg02
30a90     1A 12 06 F1 | 	add	arg01, #26
30a94     09 17 52 FC | 	wrword	arg03, arg01
30a98     00 01 C2 FA | 	rdbyte	_var01, _var01
30a9c     03 00 0E F2 | 	cmp	_var01, #3 wz
30aa0     14 14 06 A1 |  if_e	add	arg02, #20
30aa4     10 16 46 A0 |  if_e	shr	arg03, #16
30aa8     0A 17 52 AC |  if_e	wrword	arg03, arg02
30aac                 | _fatfs_cc_st_clust_ret
30aac     2D 00 64 FD | 	ret
30ab0                 | 
30ab0                 | _fatfs_cc_cmp_lfn
30ab0     07 4A 05 F6 | 	mov	COUNT_, #7
30ab4     A8 00 A0 FD | 	call	#pushregs_
30ab8     09 27 02 F6 | 	mov	local01, arg01
30abc     0A 13 02 F6 | 	mov	arg01, arg02
30ac0     1A 12 06 F1 | 	add	arg01, #26
30ac4                 | ' {
30ac4                 | ' 
30ac4                 | ' 	return *((WORD*)ptr);
30ac4     09 FB E9 FA | 	rdword	result1, arg01 wz
30ac8     00 FA 05 56 |  if_ne	mov	result1, #0
30acc     E0 00 90 5D |  if_ne	jmp	#LR__4726
30ad0     0A 29 C2 FA | 	rdbyte	local02, arg02
30ad4     3F 28 06 F5 | 	and	local02, #63
30ad8     01 28 86 F1 | 	sub	local02, #1
30adc     0D 28 06 FD | 	qmul	local02, #13
30ae0                 | ' 
30ae0                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
30ae0                 | ' 
30ae0                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
30ae0     01 2A 06 F6 | 	mov	local03, #1
30ae4     00 2C 06 F6 | 	mov	local04, #0
30ae8     18 2E 62 FD | 	getqx	local05
30aec                 | LR__4720
30aec     0D 2C 16 F2 | 	cmp	local04, #13 wc
30af0     9C 00 90 3D |  if_ae	jmp	#LR__4725
30af4     0A 13 02 F6 | 	mov	arg01, arg02
30af8     16 29 02 F6 | 	mov	local02, local04
30afc     01 00 00 FF 
30b00     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
30b04     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
30b08     14 29 C2 FA | 	rdbyte	local02, local02
30b0c     01 28 06 FA | 	mul	local02, #1
30b10     14 13 02 F1 | 	add	arg01, local02
30b14     01 00 00 FF 
30b18     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
30b1c                 | ' {
30b1c                 | ' 
30b1c                 | ' 	return *((WORD*)ptr);
30b1c     09 FB E1 FA | 	rdword	result1, arg01
30b20     FD 30 02 F6 | 	mov	local06, result1
30b24     15 29 02 F6 | 	mov	local02, local03
30b28     0F 28 4E F7 | 	zerox	local02, #15 wz
30b2c     44 00 90 AD |  if_e	jmp	#LR__4723
30b30     00 2F 16 F2 | 	cmp	local05, #256 wc
30b34     2C 00 90 3D |  if_ae	jmp	#LR__4721
30b38     18 13 32 F9 | 	getword	arg01, local06, #0
30b3c     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
30b40     FD 28 02 F6 | 	mov	local02, result1
30b44     17 2B 02 F6 | 	mov	local03, local05
30b48     01 2A 66 F0 | 	shl	local03, #1
30b4c     13 2B 02 F1 | 	add	local03, local01
30b50     15 13 E2 FA | 	rdword	arg01, local03
30b54     01 2E 06 F1 | 	add	local05, #1
30b58     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
30b5c     FD 28 0A F2 | 	cmp	local02, result1 wz
30b60     08 00 90 AD |  if_e	jmp	#LR__4722
30b64                 | LR__4721
30b64                 | ' 				return 0;
30b64     00 FA 05 F6 | 	mov	result1, #0
30b68     44 00 90 FD | 	jmp	#LR__4726
30b6c                 | LR__4722
30b6c     18 2B 02 F6 | 	mov	local03, local06
30b70     14 00 90 FD | 	jmp	#LR__4724
30b74                 | LR__4723
30b74     18 31 32 F9 | 	getword	local06, local06, #0
30b78     7F 00 00 FF 
30b7c     FF 31 0E F2 | 	cmp	local06, ##65535 wz
30b80     00 FA 05 56 |  if_ne	mov	result1, #0
30b84     28 00 90 5D |  if_ne	jmp	#LR__4726
30b88                 | LR__4724
30b88     01 2C 06 F1 | 	add	local04, #1
30b8c     5C FF 9F FD | 	jmp	#LR__4720
30b90                 | LR__4725
30b90     0A 29 C2 FA | 	rdbyte	local02, arg02
30b94     40 28 CE F7 | 	test	local02, #64 wz
30b98     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
30b9c     01 2E 66 50 |  if_ne	shl	local05, #1
30ba0     13 2F 02 51 |  if_ne	add	local05, local01
30ba4     17 33 EA 5A |  if_ne	rdword	local07, local05 wz
30ba8     00 FA 05 56 |  if_ne	mov	result1, #0
30bac                 | ' 
30bac                 | ' 	return 1;
30bac     01 FA 05 A6 |  if_e	mov	result1, #1
30bb0                 | LR__4726
30bb0     A7 F0 03 F6 | 	mov	ptra, fp
30bb4     B2 00 A0 FD | 	call	#popregs_
30bb8                 | _fatfs_cc_cmp_lfn_ret
30bb8     2D 00 64 FD | 	ret
30bbc                 | 
30bbc                 | _fatfs_cc_pick_lfn
30bbc     09 01 02 F6 | 	mov	_var01, arg01
30bc0     0A 13 02 F6 | 	mov	arg01, arg02
30bc4     1A 12 06 F1 | 	add	arg01, #26
30bc8                 | ' {
30bc8                 | ' 
30bc8                 | ' 	return *((WORD*)ptr);
30bc8     09 FB E9 FA | 	rdword	result1, arg01 wz
30bcc     00 FA 05 56 |  if_ne	mov	result1, #0
30bd0     D4 00 90 5D |  if_ne	jmp	#LR__4735
30bd4     0A 03 C2 FA | 	rdbyte	_var02, arg02
30bd8     40 02 26 F5 | 	andn	_var02, #64
30bdc     01 02 86 F1 | 	sub	_var02, #1
30be0     0D 02 06 FD | 	qmul	_var02, #13
30be4                 | ' 
30be4                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
30be4                 | ' 
30be4                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
30be4     01 04 06 F6 | 	mov	_var03, #1
30be8     00 06 06 F6 | 	mov	_var04, #0
30bec     18 08 62 FD | 	getqx	_var05
30bf0                 | LR__4730
30bf0     0D 06 16 F2 | 	cmp	_var04, #13 wc
30bf4     80 00 90 3D |  if_ae	jmp	#LR__4733
30bf8     0A 13 02 F6 | 	mov	arg01, arg02
30bfc     03 03 02 F6 | 	mov	_var02, _var04
30c00     01 00 00 FF 
30c04     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
30c08     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
30c0c     01 03 C2 FA | 	rdbyte	_var02, _var02
30c10     01 02 06 FA | 	mul	_var02, #1
30c14     01 13 02 F1 | 	add	arg01, _var02
30c18     01 00 00 FF 
30c1c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
30c20                 | ' {
30c20                 | ' 
30c20                 | ' 	return *((WORD*)ptr);
30c20     09 FB E1 FA | 	rdword	result1, arg01
30c24     FD 0A 02 F6 | 	mov	_var06, result1
30c28     02 03 02 F6 | 	mov	_var02, _var03
30c2c     0F 02 4E F7 | 	zerox	_var02, #15 wz
30c30     28 00 90 AD |  if_e	jmp	#LR__4731
30c34     00 09 16 F2 | 	cmp	_var05, #256 wc
30c38     00 FA 05 36 |  if_ae	mov	result1, #0
30c3c     68 00 90 3D |  if_ae	jmp	#LR__4735
30c40     04 03 02 F6 | 	mov	_var02, _var05
30c44     01 02 66 F0 | 	shl	_var02, #1
30c48     00 03 02 F1 | 	add	_var02, _var01
30c4c     05 05 02 F6 | 	mov	_var03, _var06
30c50     01 05 52 FC | 	wrword	_var03, _var02
30c54     01 08 06 F1 | 	add	_var05, #1
30c58     14 00 90 FD | 	jmp	#LR__4732
30c5c                 | LR__4731
30c5c     05 0B 32 F9 | 	getword	_var06, _var06, #0
30c60     7F 00 00 FF 
30c64     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
30c68     00 FA 05 56 |  if_ne	mov	result1, #0
30c6c     38 00 90 5D |  if_ne	jmp	#LR__4735
30c70                 | LR__4732
30c70     01 06 06 F1 | 	add	_var04, #1
30c74     78 FF 9F FD | 	jmp	#LR__4730
30c78                 | LR__4733
30c78     0A 03 C2 FA | 	rdbyte	_var02, arg02
30c7c     40 02 CE F7 | 	test	_var02, #64 wz
30c80     02 0D 02 56 |  if_ne	mov	_var07, _var03
30c84     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
30c88     18 00 90 AD |  if_e	jmp	#LR__4734
30c8c     00 09 16 F2 | 	cmp	_var05, #256 wc
30c90     00 FA 05 36 |  if_ae	mov	result1, #0
30c94     10 00 90 3D |  if_ae	jmp	#LR__4735
30c98     01 08 66 F0 | 	shl	_var05, #1
30c9c     00 09 02 F1 | 	add	_var05, _var01
30ca0     04 01 58 FC | 	wrword	#0, _var05
30ca4                 | LR__4734
30ca4                 | ' 		lfnbuf[i] = 0;
30ca4                 | ' 	}
30ca4                 | ' 
30ca4                 | ' 	return 1;
30ca4     01 FA 05 F6 | 	mov	result1, #1
30ca8                 | LR__4735
30ca8                 | _fatfs_cc_pick_lfn_ret
30ca8     2D 00 64 FD | 	ret
30cac                 | 
30cac                 | _fatfs_cc_put_lfn
30cac     0D 14 06 F1 | 	add	arg02, #13
30cb0     0A 19 42 FC | 	wrbyte	arg04, arg02
30cb4     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
30cb8     01 18 86 F1 | 	sub	arg04, #1
30cbc     0D 18 06 FD | 	qmul	arg04, #13
30cc0     09 01 02 F6 | 	mov	_var01, arg01
30cc4     02 14 86 F1 | 	sub	arg02, #2
30cc8     0A 1F 48 FC | 	wrbyte	#15, arg02
30ccc     01 14 06 F1 | 	add	arg02, #1
30cd0     0A 01 48 FC | 	wrbyte	#0, arg02
30cd4     0C 14 86 F1 | 	sub	arg02, #12
30cd8     0A 13 02 F6 | 	mov	arg01, arg02
30cdc     1A 12 06 F1 | 	add	arg01, #26
30ce0     09 01 58 FC | 	wrword	#0, arg01
30ce4     00 02 06 F6 | 	mov	_var02, #0
30ce8     00 04 06 F6 | 	mov	_var03, #0
30cec                 | ' 	BYTE* dir,
30cec                 | ' 	BYTE ord,
30cec                 | ' 	BYTE sum
30cec                 | ' )
30cec                 | ' {
30cec                 | ' 	UINT i, s;
30cec                 | ' 	WCHAR wc;
30cec                 | ' 
30cec                 | ' 
30cec                 | ' 	dir[ 13 ] = sum;
30cec                 | ' 	dir[ 11 ] =  0x0F ;
30cec                 | ' 	dir[ 12 ] = 0;
30cec                 | ' 	st_word(dir +  26 , 0);
30cec                 | ' 
30cec                 | ' 	i = (ord - 1) * 13;
30cec                 | ' 	s = wc = 0;
30cec                 | ' 	do {
30cec     01 00 00 FF 
30cf0     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
30cf4     18 06 62 FD | 	getqx	_var04
30cf8     97 2A 48 FB | 	callpa	#(@LR__4741-@LR__4740)>>2,fcache_load_ptr_
30cfc                 | LR__4740
30cfc     01 19 32 F9 | 	getword	arg04, _var02, #0
30d00     7F 00 00 FF 
30d04     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
30d08     03 13 02 56 |  if_ne	mov	arg01, _var04
30d0c     01 06 06 51 |  if_ne	add	_var04, #1
30d10     01 12 66 50 |  if_ne	shl	arg01, #1
30d14     00 13 02 51 |  if_ne	add	arg01, _var01
30d18     09 03 E2 5A |  if_ne	rdword	_var02, arg01
30d1c     0A 13 02 F6 | 	mov	arg01, arg02
30d20     02 19 02 F6 | 	mov	arg04, _var03
30d24     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
30d28     0C 19 C2 FA | 	rdbyte	arg04, arg04
30d2c     01 18 06 FA | 	mul	arg04, #1
30d30     0C 13 02 F1 | 	add	arg01, arg04
30d34     09 03 52 FC | 	wrword	_var02, arg01
30d38     01 19 02 F6 | 	mov	arg04, _var02
30d3c     0F 18 4E F7 | 	zerox	arg04, #15 wz
30d40     0F 02 CE A9 |  if_e	bmask	_var02, #15
30d44     01 04 06 F1 | 	add	_var03, #1
30d48     0D 04 16 F2 | 	cmp	_var03, #13 wc
30d4c     AC FF 9F CD |  if_b	jmp	#LR__4740
30d50                 | LR__4741
30d50     01 00 00 FF 
30d54     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
30d58     01 03 32 F9 | 	getword	_var02, _var02, #0
30d5c     7F 00 00 FF 
30d60     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
30d64     01 06 66 50 |  if_ne	shl	_var04, #1
30d68     00 07 02 51 |  if_ne	add	_var04, _var01
30d6c     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
30d70     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
30d74     40 16 46 A5 |  if_e	or	arg03, #64
30d78     0A 17 42 FC | 	wrbyte	arg03, arg02
30d7c                 | _fatfs_cc_put_lfn_ret
30d7c     2D 00 64 FD | 	ret
30d80                 | 
30d80                 | _fatfs_cc_gen_numname
30d80     08 4A 05 F6 | 	mov	COUNT_, #8
30d84     A8 00 A0 FD | 	call	#pushregs_
30d88     2C F0 07 F1 | 	add	ptra, #44
30d8c     09 27 02 F6 | 	mov	local01, arg01
30d90     0A 29 02 F6 | 	mov	local02, arg02
30d94     0B 2B 02 F6 | 	mov	local03, arg03
30d98     0C 2D 02 F6 | 	mov	local04, arg04
30d9c     13 13 02 F6 | 	mov	arg01, local01
30da0     14 15 02 F6 | 	mov	arg02, local02
30da4     0B 16 06 F6 | 	mov	arg03, #11
30da8     18 72 BF FD | 	call	#__system____builtin_memmove
30dac     06 2C 16 F2 | 	cmp	local04, #6 wc
30db0     48 00 90 CD |  if_b	jmp	#LR__4755
30db4     16 2F 02 F6 | 	mov	local05, local04
30db8     97 1E 48 FB | 	callpa	#(@LR__4753-@LR__4750)>>2,fcache_load_ptr_
30dbc                 | ' 		sreg = seq;
30dbc                 | ' 		while (*lfn) {
30dbc                 | LR__4750
30dbc     15 31 EA FA | 	rdword	local06, local03 wz
30dc0     34 00 90 AD |  if_e	jmp	#LR__4754
30dc4     15 33 E2 FA | 	rdword	local07, local03
30dc8                 | ' 			wc = *lfn++;
30dc8                 | ' 			for (i = 0; i < 16; i++) {
30dc8     02 2A 06 F1 | 	add	local03, #2
30dcc     10 12 DC FC | 	rep	@LR__4752, #16
30dd0                 | LR__4751
30dd0     01 2E 66 F0 | 	shl	local05, #1
30dd4     19 31 32 F9 | 	getword	local06, local07, #0
30dd8     01 30 06 F5 | 	and	local06, #1
30ddc     18 2F 02 F1 | 	add	local05, local06
30de0     19 33 32 F9 | 	getword	local07, local07, #0
30de4     01 32 46 F0 | 	shr	local07, #1
30de8     10 2E 2E F4 | 	testbn	local05, #16 wz
30dec     88 00 00 5F 
30df0     21 2E 66 55 |  if_ne	xor	local05, ##69665
30df4                 | LR__4752
30df4     C4 FF 9F FD | 	jmp	#LR__4750
30df8                 | LR__4753
30df8                 | LR__4754
30df8     17 2D 02 F6 | 	mov	local04, local05
30dfc                 | LR__4755
30dfc     07 32 06 F6 | 	mov	local07, #7
30e00                 | ' 			}
30e00                 | ' 		}
30e00                 | ' 		seq = (UINT)sreg;
30e00                 | ' 	}
30e00                 | ' 
30e00                 | ' 
30e00                 | ' 	i = 7;
30e00                 | ' 	do {
30e00     10 4E 05 F1 | 	add	fp, #16
30e04     97 1A 48 FB | 	callpa	#(@LR__4757-@LR__4756)>>2,fcache_load_ptr_
30e08                 | LR__4756
30e08     16 2F 42 F8 | 	getnib	local05, local04, #0
30e0c     30 2E 06 F1 | 	add	local05, #48
30e10     04 2C 46 F0 | 	shr	local04, #4
30e14     17 31 E2 F8 | 	getbyte	local06, local05, #0
30e18     3A 30 16 F2 | 	cmp	local06, #58 wc
30e1c     17 2F E2 38 |  if_ae	getbyte	local05, local05, #0
30e20     07 2E 06 31 |  if_ae	add	local05, #7
30e24     19 31 02 F6 | 	mov	local06, local07
30e28     01 32 8E F1 | 	sub	local07, #1 wz
30e2c     A7 30 02 F1 | 	add	local06, fp
30e30     18 2F 42 FC | 	wrbyte	local05, local06
30e34     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
30e38     CC FF 9F 5D |  if_ne	jmp	#LR__4756
30e3c                 | LR__4757
30e3c     19 31 02 F6 | 	mov	local06, local07
30e40     A7 30 02 F1 | 	add	local06, fp
30e44     18 FD 48 FC | 	wrbyte	#126, local06
30e48                 | ' 	ns[i] = '~';
30e48                 | ' 
30e48                 | ' 
30e48                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
30e48     00 2E 06 F6 | 	mov	local05, #0
30e4c     10 4E 85 F1 | 	sub	fp, #16
30e50     97 2A 48 FB | 	callpa	#(@LR__4760-@LR__4758)>>2,fcache_load_ptr_
30e54                 | LR__4758
30e54     19 2F 12 F2 | 	cmp	local05, local07 wc
30e58     4C 00 90 3D |  if_ae	jmp	#LR__4761
30e5c     17 31 02 F6 | 	mov	local06, local05
30e60     13 31 02 F1 | 	add	local06, local01
30e64     18 31 C2 FA | 	rdbyte	local06, local06
30e68     20 30 0E F2 | 	cmp	local06, #32 wz
30e6c     38 00 90 AD |  if_e	jmp	#LR__4761
30e70     17 13 02 F6 | 	mov	arg01, local05
30e74     13 13 02 F1 | 	add	arg01, local01
30e78     09 13 CA FA | 	rdbyte	arg01, arg01 wz
30e7c     00 FA 05 56 |  if_ne	mov	result1, #0
30e80                 | ' 
30e80                 | ' 	return 0;
30e80     00 FA 05 A6 |  if_e	mov	result1, #0
30e84     00 FA 0D F2 | 	cmp	result1, #0 wz
30e88     14 00 90 AD |  if_e	jmp	#LR__4759
30e8c     19 31 02 F6 | 	mov	local06, local07
30e90     01 30 86 F1 | 	sub	local06, #1
30e94     18 2F 0A F2 | 	cmp	local05, local06 wz
30e98     0C 00 90 AD |  if_e	jmp	#LR__4761
30e9c     01 2E 06 F1 | 	add	local05, #1
30ea0                 | LR__4759
30ea0     01 2E 06 F1 | 	add	local05, #1
30ea4     AC FF 9F FD | 	jmp	#LR__4758
30ea8                 | LR__4760
30ea8                 | LR__4761
30ea8     97 20 48 FB | 	callpa	#(@LR__4765-@LR__4762)>>2,fcache_load_ptr_
30eac                 | ' 			j++;
30eac                 | ' 		}
30eac                 | ' 	}
30eac                 | ' 	do {
30eac                 | LR__4762
30eac     17 31 02 F6 | 	mov	local06, local05
30eb0     13 31 02 F1 | 	add	local06, local01
30eb4     08 32 16 F2 | 	cmp	local07, #8 wc
30eb8     01 2E 06 F1 | 	add	local05, #1
30ebc     1C 00 90 3D |  if_ae	jmp	#LR__4763
30ec0     19 2D 02 F6 | 	mov	local04, local07
30ec4     10 4E 05 F1 | 	add	fp, #16
30ec8     A7 2C 02 F1 | 	add	local04, fp
30ecc     16 35 C2 FA | 	rdbyte	local08, local04
30ed0     01 32 06 F1 | 	add	local07, #1
30ed4     10 4E 85 F1 | 	sub	fp, #16
30ed8     04 00 90 FD | 	jmp	#LR__4764
30edc                 | LR__4763
30edc     20 34 06 F6 | 	mov	local08, #32
30ee0                 | LR__4764
30ee0     18 35 42 FC | 	wrbyte	local08, local06
30ee4     08 2E 16 F2 | 	cmp	local05, #8 wc
30ee8     C0 FF 9F CD |  if_b	jmp	#LR__4762
30eec                 | LR__4765
30eec     A7 F0 03 F6 | 	mov	ptra, fp
30ef0     B2 00 A0 FD | 	call	#popregs_
30ef4                 | _fatfs_cc_gen_numname_ret
30ef4     2D 00 64 FD | 	ret
30ef8                 | 
30ef8                 | _fatfs_cc_sum_sfn
30ef8     00 00 06 F6 | 	mov	_var01, #0
30efc                 | ' )
30efc                 | ' {
30efc                 | ' 	BYTE sum = 0;
30efc                 | ' 	UINT n = 11;
30efc                 | ' 
30efc                 | ' 	do {
30efc     97 12 48 FB | 	callpa	#(@LR__4772-@LR__4770)>>2,fcache_load_ptr_
30f00                 | LR__4770
30f00     0B 10 DC FC | 	rep	@LR__4773, #11
30f04                 | LR__4771
30f04     00 FB E1 F8 | 	getbyte	result1, _var01, #0
30f08     01 FA 45 F0 | 	shr	result1, #1
30f0c     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
30f10     07 00 66 F0 | 	shl	_var01, #7
30f14     00 FB 01 F1 | 	add	result1, _var01
30f18     09 01 C2 FA | 	rdbyte	_var01, arg01
30f1c     FD 00 02 F1 | 	add	_var01, result1
30f20     01 12 06 F1 | 	add	arg01, #1
30f24                 | LR__4772
30f24                 | LR__4773
30f24                 | ' 	return sum;
30f24     00 FB 01 F6 | 	mov	result1, _var01
30f28                 | _fatfs_cc_sum_sfn_ret
30f28     2D 00 64 FD | 	ret
30f2c                 | 
30f2c                 | _fatfs_cc_dir_read
30f2c     0C 4A 05 F6 | 	mov	COUNT_, #12
30f30     A8 00 A0 FD | 	call	#pushregs_
30f34     09 27 02 F6 | 	mov	local01, arg01
30f38     0A 29 02 F6 | 	mov	local02, arg02
30f3c     04 2A 06 F6 | 	mov	local03, #4
30f40     13 2D 02 FB | 	rdlong	local04, local01
30f44     FF 2E 06 F6 | 	mov	local05, #255
30f48     FF 30 06 F6 | 	mov	local06, #255
30f4c                 | ' )
30f4c                 | ' {
30f4c                 | ' 	FRESULT res = FR_NO_FILE;
30f4c                 | ' 	FATFS *fs = dp->obj.fs;
30f4c                 | ' 	BYTE attr, b;
30f4c                 | ' 
30f4c                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
30f4c                 | ' 
30f4c                 | ' 
30f4c                 | ' 	while (dp->sect) {
30f4c                 | LR__4780
30f4c     18 26 06 F1 | 	add	local01, #24
30f50     13 FB 09 FB | 	rdlong	result1, local01 wz
30f54     18 26 86 F1 | 	sub	local01, #24
30f58     AC 01 90 AD |  if_e	jmp	#LR__4790
30f5c     18 26 06 F1 | 	add	local01, #24
30f60     13 15 02 FB | 	rdlong	arg02, local01
30f64     18 26 86 F1 | 	sub	local01, #24
30f68     16 13 02 F6 | 	mov	arg01, local04
30f6c     AC ED BF FD | 	call	#_fatfs_cc_move_window
30f70     FD 2A 0A F6 | 	mov	local03, result1 wz
30f74     90 01 90 5D |  if_ne	jmp	#LR__4790
30f78     1C 26 06 F1 | 	add	local01, #28
30f7c     13 FB 01 FB | 	rdlong	result1, local01
30f80     1C 26 86 F1 | 	sub	local01, #28
30f84     FD 32 C2 FA | 	rdbyte	local07, result1
30f88     19 FB 01 F6 | 	mov	result1, local07
30f8c     07 FA 4D F7 | 	zerox	result1, #7 wz
30f90     04 2A 06 A6 |  if_e	mov	local03, #4
30f94                 | ' 			res = FR_NO_FILE; break;
30f94     70 01 90 AD |  if_e	jmp	#LR__4790
30f98     1C 26 06 F1 | 	add	local01, #28
30f9c     13 35 02 FB | 	rdlong	local08, local01
30fa0     0B 34 06 F1 | 	add	local08, #11
30fa4     1A 37 C2 FA | 	rdbyte	local09, local08
30fa8     3F 36 06 F5 | 	and	local09, #63
30fac     16 26 86 F1 | 	sub	local01, #22
30fb0     13 37 42 FC | 	wrbyte	local09, local01
30fb4     06 26 86 F1 | 	sub	local01, #6
30fb8     19 FB E1 F8 | 	getbyte	result1, local07, #0
30fbc     E5 FA 0D F2 | 	cmp	result1, #229 wz
30fc0     19 35 02 56 |  if_ne	mov	local08, local07
30fc4     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
30fc8     2E 34 0E 52 |  if_ne	cmp	local08, #46 wz
30fcc     1C 00 90 AD |  if_e	jmp	#LR__4781
30fd0     00 38 06 F6 | 	mov	local10, #0
30fd4     1B 35 E2 F8 | 	getbyte	local08, local09, #0
30fd8     20 34 26 F5 | 	andn	local08, #32
30fdc     08 34 0E F2 | 	cmp	local08, #8 wz
30fe0     01 38 06 A6 |  if_e	mov	local10, #1
30fe4     14 39 0A F2 | 	cmp	local10, local02 wz
30fe8     08 00 90 AD |  if_e	jmp	#LR__4782
30fec                 | LR__4781
30fec     FF 2E 06 F6 | 	mov	local05, #255
30ff0     00 01 90 FD | 	jmp	#LR__4789
30ff4                 | LR__4782
30ff4     1B 37 E2 F8 | 	getbyte	local09, local09, #0
30ff8     0F 36 0E F2 | 	cmp	local09, #15 wz
30ffc     B4 00 90 5D |  if_ne	jmp	#LR__4786
31000     19 3B E2 F8 | 	getbyte	local11, local07, #0
31004     40 3A CE F7 | 	test	local11, #64 wz
31008     30 00 90 AD |  if_e	jmp	#LR__4783
3100c     1C 26 06 F1 | 	add	local01, #28
31010     13 3B 02 FB | 	rdlong	local11, local01
31014     0D 3A 06 F1 | 	add	local11, #13
31018     1D 31 C2 FA | 	rdbyte	local06, local11
3101c     19 33 E2 F8 | 	getbyte	local07, local07, #0
31020     BF 32 06 F5 | 	and	local07, #191
31024     19 2F 02 F6 | 	mov	local05, local07
31028     0C 26 86 F1 | 	sub	local01, #12
3102c     13 3B 02 FB | 	rdlong	local11, local01
31030     1C 26 06 F1 | 	add	local01, #28
31034     13 3B 62 FC | 	wrlong	local11, local01
31038     2C 26 86 F1 | 	sub	local01, #44
3103c                 | LR__4783
3103c     19 35 E2 F8 | 	getbyte	local08, local07, #0
31040     17 39 E2 F8 | 	getbyte	local10, local05, #0
31044     1C 35 0A F2 | 	cmp	local08, local10 wz
31048     5C 00 90 5D |  if_ne	jmp	#LR__4784
3104c     18 39 E2 F8 | 	getbyte	local10, local06, #0
31050     1C 26 06 F1 | 	add	local01, #28
31054     13 37 02 FB | 	rdlong	local09, local01
31058     1C 26 86 F1 | 	sub	local01, #28
3105c     0D 36 06 F1 | 	add	local09, #13
31060     1B 35 C2 FA | 	rdbyte	local08, local09
31064     1A 37 E2 F8 | 	getbyte	local09, local08, #0
31068     1B 39 0A F2 | 	cmp	local10, local09 wz
3106c     38 00 90 5D |  if_ne	jmp	#LR__4784
31070     0C 2C 06 F1 | 	add	local04, #12
31074     16 13 02 FB | 	rdlong	arg01, local04
31078     0C 2C 86 F1 | 	sub	local04, #12
3107c     1C 26 06 F1 | 	add	local01, #28
31080     13 3D 02 FB | 	rdlong	local12, local01
31084     1C 26 86 F1 | 	sub	local01, #28
31088     1E 15 02 F6 | 	mov	arg02, local12
3108c     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
31090     00 FA 4D F2 | 	cmps	result1, #0 wz
31094     17 3D 02 56 |  if_ne	mov	local12, local05
31098     1E 3D E2 58 |  if_ne	getbyte	local12, local12, #0
3109c     01 3C 86 51 |  if_ne	sub	local12, #1
310a0     1E 3B 02 56 |  if_ne	mov	local11, local12
310a4     04 00 90 5D |  if_ne	jmp	#LR__4785
310a8                 | LR__4784
310a8     FF 3A 06 F6 | 	mov	local11, #255
310ac                 | LR__4785
310ac     1D 2F 02 F6 | 	mov	local05, local11
310b0     40 00 90 FD | 	jmp	#LR__4788
310b4                 | LR__4786
310b4     17 3B 02 F6 | 	mov	local11, local05
310b8     07 3A 4E F7 | 	zerox	local11, #7 wz
310bc     20 00 90 5D |  if_ne	jmp	#LR__4787
310c0     18 31 E2 F8 | 	getbyte	local06, local06, #0
310c4     1C 26 06 F1 | 	add	local01, #28
310c8     13 13 02 FB | 	rdlong	arg01, local01
310cc     1C 26 86 F1 | 	sub	local01, #28
310d0     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
310d4     FD FA E1 F8 | 	getbyte	result1, result1, #0
310d8     FD 30 0A F2 | 	cmp	local06, result1 wz
310dc     28 00 90 AD |  if_e	jmp	#LR__4790
310e0                 | LR__4787
310e0     2C 26 06 F1 | 	add	local01, #44
310e4     FF FF FF FF 
310e8     13 FF 6B FC | 	wrlong	##-1, local01
310ec     2C 26 86 F1 | 	sub	local01, #44
310f0                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
310f0                 | ' 					}
310f0                 | ' 					break;
310f0     14 00 90 FD | 	jmp	#LR__4790
310f4                 | LR__4788
310f4                 | LR__4789
310f4     13 13 02 F6 | 	mov	arg01, local01
310f8     00 14 06 F6 | 	mov	arg02, #0
310fc     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
31100     FD 2A 0A F6 | 	mov	local03, result1 wz
31104     44 FE 9F AD |  if_e	jmp	#LR__4780
31108                 | LR__4790
31108     00 2A 0E F2 | 	cmp	local03, #0 wz
3110c     18 26 06 51 |  if_ne	add	local01, #24
31110     13 01 68 5C |  if_ne	wrlong	#0, local01
31114                 | ' 	return res;
31114     15 FB 01 F6 | 	mov	result1, local03
31118     A7 F0 03 F6 | 	mov	ptra, fp
3111c     B2 00 A0 FD | 	call	#popregs_
31120                 | _fatfs_cc_dir_read_ret
31120     2D 00 64 FD | 	ret
31124                 | 
31124                 | _fatfs_cc_dir_find
31124     0B 4A 05 F6 | 	mov	COUNT_, #11
31128     A8 00 A0 FD | 	call	#pushregs_
3112c     09 27 02 F6 | 	mov	local01, arg01
31130     13 29 02 FB | 	rdlong	local02, local01
31134     13 13 02 F6 | 	mov	arg01, local01
31138     00 14 06 F6 | 	mov	arg02, #0
3113c     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
31140     00 FA 0D F2 | 	cmp	result1, #0 wz
31144     18 02 90 5D |  if_ne	jmp	#LR__4812
31148     FF 2A 06 F6 | 	mov	local03, #255
3114c     FF 2C 06 F6 | 	mov	local04, #255
31150     2C 26 06 F1 | 	add	local01, #44
31154     FF FF FF FF 
31158     13 FF 6B FC | 	wrlong	##-1, local01
3115c     2C 26 86 F1 | 	sub	local01, #44
31160                 | ' #line 2404 "ff.c"
31160                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
31160                 | ' 
31160                 | ' 	do {
31160                 | LR__4800
31160     18 26 06 F1 | 	add	local01, #24
31164     13 15 02 FB | 	rdlong	arg02, local01
31168     18 26 86 F1 | 	sub	local01, #24
3116c     14 13 02 F6 | 	mov	arg01, local02
31170     A8 EB BF FD | 	call	#_fatfs_cc_move_window
31174     FD 2E 0A F6 | 	mov	local05, result1 wz
31178     E0 01 90 5D |  if_ne	jmp	#LR__4811
3117c     1C 26 06 F1 | 	add	local01, #28
31180     13 17 02 FB | 	rdlong	arg03, local01
31184     1C 26 86 F1 | 	sub	local01, #28
31188     0B 31 C2 FA | 	rdbyte	local06, arg03
3118c     18 17 02 F6 | 	mov	arg03, local06
31190     07 16 4E F7 | 	zerox	arg03, #7 wz
31194     04 2E 06 A6 |  if_e	mov	local05, #4
31198     C0 01 90 AD |  if_e	jmp	#LR__4811
3119c     1C 26 06 F1 | 	add	local01, #28
311a0     13 33 02 FB | 	rdlong	local07, local01
311a4     19 17 02 F6 | 	mov	arg03, local07
311a8     0B 16 06 F1 | 	add	arg03, #11
311ac     0B 35 C2 FA | 	rdbyte	local08, arg03
311b0     3F 34 06 F5 | 	and	local08, #63
311b4     16 26 86 F1 | 	sub	local01, #22
311b8     13 35 42 FC | 	wrbyte	local08, local01
311bc     06 26 86 F1 | 	sub	local01, #6
311c0     18 17 E2 F8 | 	getbyte	arg03, local06, #0
311c4     E5 16 0E F2 | 	cmp	arg03, #229 wz
311c8     18 00 90 AD |  if_e	jmp	#LR__4801
311cc     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
311d0     08 16 CE F7 | 	test	arg03, #8 wz
311d4     1A 33 02 56 |  if_ne	mov	local07, local08
311d8     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
311dc     0F 32 0E 52 |  if_ne	cmp	local07, #15 wz
311e0     18 00 90 AD |  if_e	jmp	#LR__4802
311e4                 | LR__4801
311e4     FF 2C 06 F6 | 	mov	local04, #255
311e8     2C 26 06 F1 | 	add	local01, #44
311ec     FF FF FF FF 
311f0     13 FF 6B FC | 	wrlong	##-1, local01
311f4     2C 26 86 F1 | 	sub	local01, #44
311f8     4C 01 90 FD | 	jmp	#LR__4810
311fc                 | LR__4802
311fc     1A 35 E2 F8 | 	getbyte	local08, local08, #0
31200     0F 34 0E F2 | 	cmp	local08, #15 wz
31204     C8 00 90 5D |  if_ne	jmp	#LR__4806
31208     2B 26 06 F1 | 	add	local01, #43
3120c     13 35 C2 FA | 	rdbyte	local08, local01
31210     2B 26 86 F1 | 	sub	local01, #43
31214     40 34 CE F7 | 	test	local08, #64 wz
31218     2C 01 90 5D |  if_ne	jmp	#LR__4809
3121c     18 37 E2 F8 | 	getbyte	local09, local06, #0
31220     40 36 CE F7 | 	test	local09, #64 wz
31224     30 00 90 AD |  if_e	jmp	#LR__4803
31228     1C 26 06 F1 | 	add	local01, #28
3122c     13 37 02 FB | 	rdlong	local09, local01
31230     0D 36 06 F1 | 	add	local09, #13
31234     1B 2B C2 FA | 	rdbyte	local03, local09
31238     18 31 E2 F8 | 	getbyte	local06, local06, #0
3123c     BF 30 06 F5 | 	and	local06, #191
31240     18 2D 02 F6 | 	mov	local04, local06
31244     0C 26 86 F1 | 	sub	local01, #12
31248     13 37 02 FB | 	rdlong	local09, local01
3124c     1C 26 06 F1 | 	add	local01, #28
31250     13 37 62 FC | 	wrlong	local09, local01
31254     2C 26 86 F1 | 	sub	local01, #44
31258                 | LR__4803
31258     18 39 E2 F8 | 	getbyte	local10, local06, #0
3125c     16 33 E2 F8 | 	getbyte	local07, local04, #0
31260     19 39 0A F2 | 	cmp	local10, local07 wz
31264     5C 00 90 5D |  if_ne	jmp	#LR__4804
31268     15 35 E2 F8 | 	getbyte	local08, local03, #0
3126c     1C 26 06 F1 | 	add	local01, #28
31270     13 33 02 FB | 	rdlong	local07, local01
31274     1C 26 86 F1 | 	sub	local01, #28
31278     0D 32 06 F1 | 	add	local07, #13
3127c     19 31 C2 FA | 	rdbyte	local06, local07
31280     18 33 E2 F8 | 	getbyte	local07, local06, #0
31284     19 35 0A F2 | 	cmp	local08, local07 wz
31288     38 00 90 5D |  if_ne	jmp	#LR__4804
3128c     0C 28 06 F1 | 	add	local02, #12
31290     14 13 02 FB | 	rdlong	arg01, local02
31294     0C 28 86 F1 | 	sub	local02, #12
31298     1C 26 06 F1 | 	add	local01, #28
3129c     13 3B 02 FB | 	rdlong	local11, local01
312a0     1C 26 86 F1 | 	sub	local01, #28
312a4     1D 15 02 F6 | 	mov	arg02, local11
312a8     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
312ac     00 FA 4D F2 | 	cmps	result1, #0 wz
312b0     16 3B 02 56 |  if_ne	mov	local11, local04
312b4     1D 3B E2 58 |  if_ne	getbyte	local11, local11, #0
312b8     01 3A 86 51 |  if_ne	sub	local11, #1
312bc     1D 37 02 56 |  if_ne	mov	local09, local11
312c0     04 00 90 5D |  if_ne	jmp	#LR__4805
312c4                 | LR__4804
312c4     FF 36 06 F6 | 	mov	local09, #255
312c8                 | LR__4805
312c8     1B 2D 02 F6 | 	mov	local04, local09
312cc     78 00 90 FD | 	jmp	#LR__4809
312d0                 | LR__4806
312d0     16 37 02 F6 | 	mov	local09, local04
312d4     07 36 4E F7 | 	zerox	local09, #7 wz
312d8     20 00 90 5D |  if_ne	jmp	#LR__4807
312dc     15 39 E2 F8 | 	getbyte	local10, local03, #0
312e0     1C 26 06 F1 | 	add	local01, #28
312e4     13 13 02 FB | 	rdlong	arg01, local01
312e8     1C 26 86 F1 | 	sub	local01, #28
312ec     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
312f0     FD FA E1 F8 | 	getbyte	result1, result1, #0
312f4     FD 38 0A F2 | 	cmp	local10, result1 wz
312f8     60 00 90 AD |  if_e	jmp	#LR__4811
312fc                 | LR__4807
312fc     2B 26 06 F1 | 	add	local01, #43
31300     13 37 C2 FA | 	rdbyte	local09, local01
31304     2B 26 86 F1 | 	sub	local01, #43
31308     01 36 CE F7 | 	test	local09, #1 wz
3130c     24 00 90 5D |  if_ne	jmp	#LR__4808
31310     1C 26 06 F1 | 	add	local01, #28
31314     13 13 02 FB | 	rdlong	arg01, local01
31318     04 26 06 F1 | 	add	local01, #4
3131c     13 15 02 F6 | 	mov	arg02, local01
31320     20 26 86 F1 | 	sub	local01, #32
31324     0B 16 06 F6 | 	mov	arg03, #11
31328     88 DA BF FD | 	call	#_fatfs_cc_memcmp
3132c     00 FA 0D F2 | 	cmp	result1, #0 wz
31330     28 00 90 AD |  if_e	jmp	#LR__4811
31334                 | LR__4808
31334     FF 2C 06 F6 | 	mov	local04, #255
31338     2C 26 06 F1 | 	add	local01, #44
3133c     FF FF FF FF 
31340     13 FF 6B FC | 	wrlong	##-1, local01
31344     2C 26 86 F1 | 	sub	local01, #44
31348                 | LR__4809
31348                 | LR__4810
31348     13 13 02 F6 | 	mov	arg01, local01
3134c     00 14 06 F6 | 	mov	arg02, #0
31350     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
31354     FD 2E 0A F6 | 	mov	local05, result1 wz
31358     04 FE 9F AD |  if_e	jmp	#LR__4800
3135c                 | LR__4811
3135c                 | ' 
3135c                 | ' 	return res;
3135c     17 FB 01 F6 | 	mov	result1, local05
31360                 | LR__4812
31360     A7 F0 03 F6 | 	mov	ptra, fp
31364     B2 00 A0 FD | 	call	#popregs_
31368                 | _fatfs_cc_dir_find_ret
31368     2D 00 64 FD | 	ret
3136c                 | 
3136c                 | _fatfs_cc_dir_register
3136c     0A 4A 05 F6 | 	mov	COUNT_, #10
31370     A8 00 A0 FD | 	call	#pushregs_
31374     2C F0 07 F1 | 	add	ptra, #44
31378     04 4E 05 F1 | 	add	fp, #4
3137c     A7 12 62 FC | 	wrlong	arg01, fp
31380     09 27 02 FB | 	rdlong	local01, arg01
31384     08 4E 05 F1 | 	add	fp, #8
31388     A7 26 62 FC | 	wrlong	local01, fp
3138c     08 4E 85 F1 | 	sub	fp, #8
31390     A7 28 02 FB | 	rdlong	local02, fp
31394     04 4E 85 F1 | 	sub	fp, #4
31398     2B 28 06 F1 | 	add	local02, #43
3139c     14 29 C2 FA | 	rdbyte	local02, local02
313a0     A0 28 CE F7 | 	test	local02, #160 wz
313a4     06 FA 05 56 |  if_ne	mov	result1, #6
313a8     F8 03 90 5D |  if_ne	jmp	#LR__4835
313ac                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
313ac     14 4E 05 F1 | 	add	fp, #20
313b0     A7 00 68 FC | 	wrlong	#0, fp
313b4     14 4E 85 F1 | 	sub	fp, #20
313b8     97 28 48 FB | 	callpa	#(@LR__4821-@LR__4820)>>2,fcache_load_ptr_
313bc                 | LR__4820
313bc     0C 4E 05 F1 | 	add	fp, #12
313c0     A7 28 02 FB | 	rdlong	local02, fp
313c4     0C 28 06 F1 | 	add	local02, #12
313c8     14 2B 02 FB | 	rdlong	local03, local02
313cc     08 4E 05 F1 | 	add	fp, #8
313d0     A7 2C 02 FB | 	rdlong	local04, fp
313d4     14 4E 85 F1 | 	sub	fp, #20
313d8     01 2C 66 F0 | 	shl	local04, #1
313dc     15 2D 02 F1 | 	add	local04, local03
313e0     16 29 EA FA | 	rdword	local02, local04 wz
313e4     24 00 90 AD |  if_e	jmp	#LR__4822
313e8     14 4E 05 F1 | 	add	fp, #20
313ec     A7 2E 02 FB | 	rdlong	local05, fp
313f0     17 31 02 F6 | 	mov	local06, local05
313f4     17 33 02 F6 | 	mov	local07, local05
313f8     19 35 02 F6 | 	mov	local08, local07
313fc     01 34 06 F1 | 	add	local08, #1
31400     A7 34 62 FC | 	wrlong	local08, fp
31404     14 4E 85 F1 | 	sub	fp, #20
31408     B0 FF 9F FD | 	jmp	#LR__4820
3140c                 | LR__4821
3140c                 | LR__4822
3140c     1C 4E 05 F1 | 	add	fp, #28
31410     A7 12 02 F6 | 	mov	arg01, fp
31414     18 4E 85 F1 | 	sub	fp, #24
31418     A7 14 02 FB | 	rdlong	arg02, fp
3141c     04 4E 85 F1 | 	sub	fp, #4
31420     20 14 06 F1 | 	add	arg02, #32
31424     0C 16 06 F6 | 	mov	arg03, #12
31428     98 6B BF FD | 	call	#__system____builtin_memmove
3142c     27 4E 05 F1 | 	add	fp, #39
31430     A7 36 C2 FA | 	rdbyte	local09, fp
31434     27 4E 85 F1 | 	sub	fp, #39
31438     01 36 CE F7 | 	test	local09, #1 wz
3143c     F4 00 90 AD |  if_e	jmp	#LR__4825
31440     04 4E 05 F1 | 	add	fp, #4
31444     A7 38 02 FB | 	rdlong	local10, fp
31448     2B 38 06 F1 | 	add	local10, #43
3144c     1C 81 48 FC | 	wrbyte	#64, local10
31450                 | ' 		dp->fn[ 11 ] =  0x40 ;
31450                 | ' 		for (n = 1; n < 100; n++) {
31450     0C 4E 05 F1 | 	add	fp, #12
31454     A7 02 68 FC | 	wrlong	#1, fp
31458     10 4E 85 F1 | 	sub	fp, #16
3145c                 | LR__4823
3145c     10 4E 05 F1 | 	add	fp, #16
31460     A7 28 02 FB | 	rdlong	local02, fp
31464     10 4E 85 F1 | 	sub	fp, #16
31468     64 28 16 F2 | 	cmp	local02, #100 wc
3146c     70 00 90 3D |  if_ae	jmp	#LR__4824
31470     04 4E 05 F1 | 	add	fp, #4
31474     A7 12 02 FB | 	rdlong	arg01, fp
31478     20 12 06 F1 | 	add	arg01, #32
3147c     18 4E 05 F1 | 	add	fp, #24
31480     A7 14 02 F6 | 	mov	arg02, fp
31484     10 4E 85 F1 | 	sub	fp, #16
31488     A7 38 02 FB | 	rdlong	local10, fp
3148c     0C 38 06 F1 | 	add	local10, #12
31490     1C 17 02 FB | 	rdlong	arg03, local10
31494     04 4E 05 F1 | 	add	fp, #4
31498     A7 18 02 FB | 	rdlong	arg04, fp
3149c     10 4E 85 F1 | 	sub	fp, #16
314a0     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
314a4     04 4E 05 F1 | 	add	fp, #4
314a8     A7 12 02 FB | 	rdlong	arg01, fp
314ac     04 4E 85 F1 | 	sub	fp, #4
314b0     70 FC BF FD | 	call	#_fatfs_cc_dir_find
314b4     08 4E 05 F1 | 	add	fp, #8
314b8     A7 FA 61 FC | 	wrlong	result1, fp
314bc     00 FA 4D F2 | 	cmps	result1, #0 wz
314c0     08 4E 85 F1 | 	sub	fp, #8
314c4     18 00 90 5D |  if_ne	jmp	#LR__4824
314c8     10 4E 05 F1 | 	add	fp, #16
314cc     A7 38 02 FB | 	rdlong	local10, fp
314d0     01 38 06 F1 | 	add	local10, #1
314d4     A7 38 62 FC | 	wrlong	local10, fp
314d8     10 4E 85 F1 | 	sub	fp, #16
314dc     7C FF 9F FD | 	jmp	#LR__4823
314e0                 | LR__4824
314e0     10 4E 05 F1 | 	add	fp, #16
314e4     A7 38 02 FB | 	rdlong	local10, fp
314e8     10 4E 85 F1 | 	sub	fp, #16
314ec     64 38 0E F2 | 	cmp	local10, #100 wz
314f0     07 FA 05 A6 |  if_e	mov	result1, #7
314f4     AC 02 90 AD |  if_e	jmp	#LR__4835
314f8     08 4E 05 F1 | 	add	fp, #8
314fc     A7 38 02 FB | 	rdlong	local10, fp
31500     08 4E 85 F1 | 	sub	fp, #8
31504     04 38 0E F2 | 	cmp	local10, #4 wz
31508     08 4E 05 51 |  if_ne	add	fp, #8
3150c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
31510     08 4E 85 51 |  if_ne	sub	fp, #8
31514     8C 02 90 5D |  if_ne	jmp	#LR__4835
31518     04 4E 05 F1 | 	add	fp, #4
3151c     A7 38 02 FB | 	rdlong	local10, fp
31520     23 4E 05 F1 | 	add	fp, #35
31524     A7 26 C2 FA | 	rdbyte	local01, fp
31528     27 4E 85 F1 | 	sub	fp, #39
3152c     2B 38 06 F1 | 	add	local10, #43
31530     1C 27 42 FC | 	wrbyte	local01, local10
31534                 | LR__4825
31534     27 4E 05 F1 | 	add	fp, #39
31538     A7 28 C2 FA | 	rdbyte	local02, fp
3153c     27 4E 85 F1 | 	sub	fp, #39
31540     02 28 CE F7 | 	test	local02, #2 wz
31544     20 00 90 AD |  if_e	jmp	#LR__4826
31548     14 4E 05 F1 | 	add	fp, #20
3154c     A7 38 02 FB | 	rdlong	local10, fp
31550     0C 38 06 F1 | 	add	local10, #12
31554     0D 38 16 FD | 	qdiv	local10, #13
31558     14 4E 85 F1 | 	sub	fp, #20
3155c     18 38 62 FD | 	getqx	local10
31560     01 38 06 F1 | 	add	local10, #1
31564     04 00 90 FD | 	jmp	#LR__4827
31568                 | LR__4826
31568     01 38 06 F6 | 	mov	local10, #1
3156c                 | LR__4827
3156c     18 4E 05 F1 | 	add	fp, #24
31570     A7 38 62 FC | 	wrlong	local10, fp
31574     14 4E 85 F1 | 	sub	fp, #20
31578     A7 12 02 FB | 	rdlong	arg01, fp
3157c     1C 15 02 F6 | 	mov	arg02, local10
31580     04 4E 85 F1 | 	sub	fp, #4
31584     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
31588     08 4E 05 F1 | 	add	fp, #8
3158c     A7 FA 61 FC | 	wrlong	result1, fp
31590     08 4E 85 F1 | 	sub	fp, #8
31594     00 FA 0D F2 | 	cmp	result1, #0 wz
31598     38 01 90 5D |  if_ne	jmp	#LR__4832
3159c     18 4E 05 F1 | 	add	fp, #24
315a0     A7 38 02 FB | 	rdlong	local10, fp
315a4     01 38 8E F1 | 	sub	local10, #1 wz
315a8     A7 38 62 FC | 	wrlong	local10, fp
315ac     18 4E 85 F1 | 	sub	fp, #24
315b0     20 01 90 AD |  if_e	jmp	#LR__4832
315b4     04 4E 05 F1 | 	add	fp, #4
315b8     A7 38 02 FB | 	rdlong	local10, fp
315bc     1C 13 02 F6 | 	mov	arg01, local10
315c0     14 4E 05 F1 | 	add	fp, #20
315c4     A7 18 02 FB | 	rdlong	arg04, fp
315c8     18 4E 85 F1 | 	sub	fp, #24
315cc     05 18 66 F0 | 	shl	arg04, #5
315d0     10 38 06 F1 | 	add	local10, #16
315d4     1C 15 02 FB | 	rdlong	arg02, local10
315d8     0C 15 82 F1 | 	sub	arg02, arg04
315dc     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
315e0     08 4E 05 F1 | 	add	fp, #8
315e4     A7 FA 61 FC | 	wrlong	result1, fp
315e8     08 4E 85 F1 | 	sub	fp, #8
315ec     00 FA 0D F2 | 	cmp	result1, #0 wz
315f0     E0 00 90 5D |  if_ne	jmp	#LR__4831
315f4     04 4E 05 F1 | 	add	fp, #4
315f8     A7 12 02 FB | 	rdlong	arg01, fp
315fc     04 4E 85 F1 | 	sub	fp, #4
31600     20 12 06 F1 | 	add	arg01, #32
31604     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
31608     FD 38 02 F6 | 	mov	local10, result1
3160c     28 4E 05 F1 | 	add	fp, #40
31610     A7 38 42 FC | 	wrbyte	local10, fp
31614     28 4E 85 F1 | 	sub	fp, #40
31618                 | ' 			sum = sum_sfn(dp->fn);
31618                 | ' 			do {
31618                 | LR__4828
31618     0C 4E 05 F1 | 	add	fp, #12
3161c     A7 12 02 FB | 	rdlong	arg01, fp
31620     08 4E 85 F1 | 	sub	fp, #8
31624     A7 26 02 FB | 	rdlong	local01, fp
31628     04 4E 85 F1 | 	sub	fp, #4
3162c     18 26 06 F1 | 	add	local01, #24
31630     13 15 02 FB | 	rdlong	arg02, local01
31634     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
31638     08 4E 05 F1 | 	add	fp, #8
3163c     A7 FA 61 FC | 	wrlong	result1, fp
31640     00 FA 4D F2 | 	cmps	result1, #0 wz
31644     08 4E 85 F1 | 	sub	fp, #8
31648     88 00 90 5D |  if_ne	jmp	#LR__4830
3164c     0C 4E 05 F1 | 	add	fp, #12
31650     A7 28 02 FB | 	rdlong	local02, fp
31654     0C 28 06 F1 | 	add	local02, #12
31658     14 13 02 FB | 	rdlong	arg01, local02
3165c     08 4E 85 F1 | 	sub	fp, #8
31660     A7 26 02 FB | 	rdlong	local01, fp
31664     1C 26 06 F1 | 	add	local01, #28
31668     13 15 02 FB | 	rdlong	arg02, local01
3166c     14 4E 05 F1 | 	add	fp, #20
31670     A7 16 02 FB | 	rdlong	arg03, fp
31674     10 4E 05 F1 | 	add	fp, #16
31678     A7 18 C2 FA | 	rdbyte	arg04, fp
3167c     28 4E 85 F1 | 	sub	fp, #40
31680     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
31684     0C 4E 05 F1 | 	add	fp, #12
31688     A7 38 02 FB | 	rdlong	local10, fp
3168c     03 38 06 F1 | 	add	local10, #3
31690     1C 03 48 FC | 	wrbyte	#1, local10
31694     08 4E 85 F1 | 	sub	fp, #8
31698     A7 12 02 FB | 	rdlong	arg01, fp
3169c     04 4E 85 F1 | 	sub	fp, #4
316a0     00 14 06 F6 | 	mov	arg02, #0
316a4     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
316a8     08 4E 05 F1 | 	add	fp, #8
316ac     A7 FA 61 FC | 	wrlong	result1, fp
316b0     00 FA 4D F2 | 	cmps	result1, #0 wz
316b4     08 4E 85 F1 | 	sub	fp, #8
316b8     18 00 90 5D |  if_ne	jmp	#LR__4829
316bc     18 4E 05 F1 | 	add	fp, #24
316c0     A7 38 02 FB | 	rdlong	local10, fp
316c4     01 38 8E F1 | 	sub	local10, #1 wz
316c8     A7 38 62 FC | 	wrlong	local10, fp
316cc     18 4E 85 F1 | 	sub	fp, #24
316d0     44 FF 9F 5D |  if_ne	jmp	#LR__4828
316d4                 | LR__4829
316d4                 | LR__4830
316d4                 | LR__4831
316d4                 | LR__4832
316d4     08 4E 05 F1 | 	add	fp, #8
316d8     A7 38 0A FB | 	rdlong	local10, fp wz
316dc     08 4E 85 F1 | 	sub	fp, #8
316e0     B4 00 90 5D |  if_ne	jmp	#LR__4834
316e4     0C 4E 05 F1 | 	add	fp, #12
316e8     A7 12 02 FB | 	rdlong	arg01, fp
316ec     08 4E 85 F1 | 	sub	fp, #8
316f0     A7 26 02 FB | 	rdlong	local01, fp
316f4     04 4E 85 F1 | 	sub	fp, #4
316f8     18 26 06 F1 | 	add	local01, #24
316fc     13 15 02 FB | 	rdlong	arg02, local01
31700     18 E6 BF FD | 	call	#_fatfs_cc_move_window
31704     08 4E 05 F1 | 	add	fp, #8
31708     A7 FA 61 FC | 	wrlong	result1, fp
3170c     08 4E 85 F1 | 	sub	fp, #8
31710     00 FA 0D F2 | 	cmp	result1, #0 wz
31714     80 00 90 5D |  if_ne	jmp	#LR__4833
31718     04 4E 05 F1 | 	add	fp, #4
3171c     A7 28 02 FB | 	rdlong	local02, fp
31720     04 4E 85 F1 | 	sub	fp, #4
31724     1C 28 06 F1 | 	add	local02, #28
31728     14 13 02 FB | 	rdlong	arg01, local02
3172c     00 14 06 F6 | 	mov	arg02, #0
31730     20 16 06 F6 | 	mov	arg03, #32
31734     98 00 A0 FD | 	call	#\builtin_bytefill_
31738     04 4E 05 F1 | 	add	fp, #4
3173c     A7 14 02 FB | 	rdlong	arg02, fp
31740     0A 27 02 F6 | 	mov	local01, arg02
31744     1C 26 06 F1 | 	add	local01, #28
31748     13 13 02 FB | 	rdlong	arg01, local01
3174c     04 4E 85 F1 | 	sub	fp, #4
31750     20 14 06 F1 | 	add	arg02, #32
31754     0B 16 06 F6 | 	mov	arg03, #11
31758     68 68 BF FD | 	call	#__system____builtin_memmove
3175c     04 4E 05 F1 | 	add	fp, #4
31760     A7 36 02 FB | 	rdlong	local09, fp
31764     1B 39 02 F6 | 	mov	local10, local09
31768     1C 38 06 F1 | 	add	local10, #28
3176c     1C 27 02 FB | 	rdlong	local01, local10
31770     2B 36 06 F1 | 	add	local09, #43
31774     1B 39 C2 FA | 	rdbyte	local10, local09
31778     18 38 06 F5 | 	and	local10, #24
3177c     0C 26 06 F1 | 	add	local01, #12
31780     13 39 42 FC | 	wrbyte	local10, local01
31784     08 4E 05 F1 | 	add	fp, #8
31788     A7 38 02 FB | 	rdlong	local10, fp
3178c     0C 4E 85 F1 | 	sub	fp, #12
31790     03 38 06 F1 | 	add	local10, #3
31794     1C 03 48 FC | 	wrbyte	#1, local10
31798                 | LR__4833
31798                 | LR__4834
31798                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
31798                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
31798                 | ' 
31798                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
31798                 | ' 
31798                 | ' 			fs->wflag = 1;
31798                 | ' 		}
31798                 | ' 	}
31798                 | ' 
31798                 | ' 	return res;
31798     08 4E 05 F1 | 	add	fp, #8
3179c     A7 FA 01 FB | 	rdlong	result1, fp
317a0     08 4E 85 F1 | 	sub	fp, #8
317a4                 | LR__4835
317a4     A7 F0 03 F6 | 	mov	ptra, fp
317a8     B2 00 A0 FD | 	call	#popregs_
317ac                 | _fatfs_cc_dir_register_ret
317ac     2D 00 64 FD | 	ret
317b0                 | 
317b0                 | _fatfs_cc_dir_remove
317b0     05 4A 05 F6 | 	mov	COUNT_, #5
317b4     A8 00 A0 FD | 	call	#pushregs_
317b8     09 27 02 F6 | 	mov	local01, arg01
317bc     13 29 02 FB | 	rdlong	local02, local01
317c0     10 26 06 F1 | 	add	local01, #16
317c4     13 2B 02 FB | 	rdlong	local03, local01
317c8     1C 26 06 F1 | 	add	local01, #28
317cc     13 15 02 FB | 	rdlong	arg02, local01
317d0     2C 26 86 F1 | 	sub	local01, #44
317d4     FF FF 7F FF 
317d8     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
317dc     00 2C 06 A6 |  if_e	mov	local04, #0
317e0     18 00 90 AD |  if_e	jmp	#LR__4840
317e4     13 13 02 F6 | 	mov	arg01, local01
317e8     2C 26 06 F1 | 	add	local01, #44
317ec     13 15 02 FB | 	rdlong	arg02, local01
317f0     2C 26 86 F1 | 	sub	local01, #44
317f4     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
317f8     FD 2C 02 F6 | 	mov	local04, result1
317fc                 | LR__4840
317fc     16 2F 0A F6 | 	mov	local05, local04 wz
31800     64 00 90 5D |  if_ne	jmp	#LR__4843
31804                 | ' 		do {
31804                 | LR__4841
31804     18 26 06 F1 | 	add	local01, #24
31808     13 15 02 FB | 	rdlong	arg02, local01
3180c     18 26 86 F1 | 	sub	local01, #24
31810     14 13 02 F6 | 	mov	arg01, local02
31814     04 E5 BF FD | 	call	#_fatfs_cc_move_window
31818     FD 2E 0A F6 | 	mov	local05, result1 wz
3181c     40 00 90 5D |  if_ne	jmp	#LR__4842
31820     1C 26 06 F1 | 	add	local01, #28
31824     13 2D 02 FB | 	rdlong	local04, local01
31828     16 CB 49 FC | 	wrbyte	#229, local04
3182c     03 28 06 F1 | 	add	local02, #3
31830     14 03 48 FC | 	wrbyte	#1, local02
31834     03 28 86 F1 | 	sub	local02, #3
31838     0C 26 86 F1 | 	sub	local01, #12
3183c     13 2D 02 FB | 	rdlong	local04, local01
31840     10 26 86 F1 | 	sub	local01, #16
31844     15 2D 12 F2 | 	cmp	local04, local03 wc
31848     14 00 90 3D |  if_ae	jmp	#LR__4842
3184c     13 13 02 F6 | 	mov	arg01, local01
31850     00 14 06 F6 | 	mov	arg02, #0
31854     90 EF BF FD | 	call	#_fatfs_cc_dir_next
31858     FD 2E 0A F6 | 	mov	local05, result1 wz
3185c     A4 FF 9F AD |  if_e	jmp	#LR__4841
31860                 | LR__4842
31860     04 2E 0E F2 | 	cmp	local05, #4 wz
31864     02 2E 06 A6 |  if_e	mov	local05, #2
31868                 | LR__4843
31868                 | ' 	}
31868                 | ' #line 2590 "ff.c"
31868                 | ' 	return res;
31868     17 FB 01 F6 | 	mov	result1, local05
3186c     A7 F0 03 F6 | 	mov	ptra, fp
31870     B2 00 A0 FD | 	call	#popregs_
31874                 | _fatfs_cc_dir_remove_ret
31874     2D 00 64 FD | 	ret
31878                 | 
31878                 | _fatfs_cc_get_fileinfo
31878     0F 4A 05 F6 | 	mov	COUNT_, #15
3187c     A8 00 A0 FD | 	call	#pushregs_
31880     09 27 02 F6 | 	mov	local01, arg01
31884     0A 29 02 F6 | 	mov	local02, arg02
31888     13 2B 02 FB | 	rdlong	local03, local01
3188c     1C 28 06 F1 | 	add	local02, #28
31890     14 01 48 FC | 	wrbyte	#0, local02
31894     1C 28 86 F1 | 	sub	local02, #28
31898     18 26 06 F1 | 	add	local01, #24
3189c     13 2D 0A FB | 	rdlong	local04, local01 wz
318a0     18 26 86 F1 | 	sub	local01, #24
318a4     90 03 90 AD |  if_e	jmp	#LR__4864
318a8     2C 26 06 F1 | 	add	local01, #44
318ac     13 2D 02 FB | 	rdlong	local04, local01
318b0     2C 26 86 F1 | 	sub	local01, #44
318b4     FF FF 7F FF 
318b8     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
318bc     D8 00 90 AD |  if_e	jmp	#LR__4853
318c0     00 2E 06 F6 | 	mov	local05, #0
318c4     00 30 06 F6 | 	mov	local06, #0
318c8     00 32 06 F6 | 	mov	local07, #0
318cc                 | ' 			si = di = 0;
318cc                 | ' 			hs = 0;
318cc                 | ' 			while (fs->lfnbuf[si] != 0) {
318cc                 | LR__4850
318cc     0C 2A 06 F1 | 	add	local03, #12
318d0     15 2D 02 FB | 	rdlong	local04, local03
318d4     0C 2A 86 F1 | 	sub	local03, #12
318d8     18 35 02 F6 | 	mov	local08, local06
318dc     01 34 66 F0 | 	shl	local08, #1
318e0     16 35 02 F1 | 	add	local08, local04
318e4     1A 2D EA FA | 	rdword	local04, local08 wz
318e8     90 00 90 AD |  if_e	jmp	#LR__4852
318ec     0C 2A 06 F1 | 	add	local03, #12
318f0     15 37 02 FB | 	rdlong	local09, local03
318f4     0C 2A 86 F1 | 	sub	local03, #12
318f8     18 39 02 F6 | 	mov	local10, local06
318fc     01 38 66 F0 | 	shl	local10, #1
31900     1B 39 02 F1 | 	add	local10, local09
31904     1C 3B E2 FA | 	rdword	local11, local10
31908     19 2D 02 F6 | 	mov	local04, local07
3190c     0F 2C 4E F7 | 	zerox	local04, #15 wz
31910     01 30 06 F1 | 	add	local06, #1
31914     24 00 90 5D |  if_ne	jmp	#LR__4851
31918     1D 3D 32 F9 | 	getword	local12, local11, #0
3191c     6C 00 00 FF 
31920     00 3C 16 F2 | 	cmp	local12, ##55296 wc
31924     14 00 90 CD |  if_b	jmp	#LR__4851
31928     1D 3F 32 F9 | 	getword	local13, local11, #0
3192c     70 00 00 FF 
31930     00 3E 16 F2 | 	cmp	local13, ##57344 wc
31934     1D 33 02 C6 |  if_b	mov	local07, local11
31938                 | ' 					hs = wc; continue;
31938     90 FF 9F CD |  if_b	jmp	#LR__4850
3193c                 | LR__4851
3193c     19 13 32 F9 | 	getword	arg01, local07, #0
31940     10 12 66 F0 | 	shl	arg01, #16
31944     1D 3B 32 F9 | 	getword	local11, local11, #0
31948     1D 13 42 F5 | 	or	arg01, local11
3194c     17 15 02 F6 | 	mov	arg02, local05
31950     1C 28 06 F1 | 	add	local02, #28
31954     14 15 02 F1 | 	add	arg02, local02
31958     FF 16 06 F6 | 	mov	arg03, #255
3195c     17 17 82 F1 | 	sub	arg03, local05
31960     1C 28 86 F1 | 	sub	local02, #28
31964     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
31968     FD 40 0A F6 | 	mov	local14, result1 wz
3196c     00 2E 06 A6 |  if_e	mov	local05, #0
31970     20 2F 02 51 |  if_ne	add	local05, local14
31974     00 32 06 56 |  if_ne	mov	local07, #0
31978     50 FF 9F 5D |  if_ne	jmp	#LR__4850
3197c                 | LR__4852
3197c     19 2D 02 F6 | 	mov	local04, local07
31980     0F 2C 4E F7 | 	zerox	local04, #15 wz
31984     00 2E 06 56 |  if_ne	mov	local05, #0
31988     1C 28 06 F1 | 	add	local02, #28
3198c     14 2F 02 F1 | 	add	local05, local02
31990     17 01 48 FC | 	wrbyte	#0, local05
31994     1C 28 86 F1 | 	sub	local02, #28
31998                 | LR__4853
31998     00 2E 06 F6 | 	mov	local05, #0
3199c     00 30 06 F6 | 	mov	local06, #0
319a0                 | ' 			fno->fname[di] = 0;
319a0                 | ' 		}
319a0                 | ' 	}
319a0                 | ' 
319a0                 | ' 	si = di = 0;
319a0                 | ' 	while (si < 11) {
319a0                 | LR__4854
319a0     0B 30 16 F2 | 	cmp	local06, #11 wc
319a4     20 01 90 3D |  if_ae	jmp	#LR__4857
319a8     1C 26 06 F1 | 	add	local01, #28
319ac     13 37 02 FB | 	rdlong	local09, local01
319b0     1C 26 86 F1 | 	sub	local01, #28
319b4     18 39 02 F6 | 	mov	local10, local06
319b8     1B 39 02 F1 | 	add	local10, local09
319bc     1C 3B C2 FA | 	rdbyte	local11, local10
319c0     1D 2D 32 F9 | 	getword	local04, local11, #0
319c4     20 2C 0E F2 | 	cmp	local04, #32 wz
319c8     01 30 06 F1 | 	add	local06, #1
319cc     D0 FF 9F AD |  if_e	jmp	#LR__4854
319d0     1D 2D 32 F9 | 	getword	local04, local11, #0
319d4     05 2C 0E F2 | 	cmp	local04, #5 wz
319d8     E5 3A 06 A6 |  if_e	mov	local11, #229
319dc     09 30 0E F2 | 	cmp	local06, #9 wz
319e0     20 00 90 5D |  if_ne	jmp	#LR__4855
319e4     0C 2E 16 F2 | 	cmp	local05, #12 wc
319e8     18 00 90 3D |  if_ae	jmp	#LR__4855
319ec     17 3F 02 F6 | 	mov	local13, local05
319f0     0C 28 06 F1 | 	add	local02, #12
319f4     14 3F 02 F1 | 	add	local13, local02
319f8     1F 5D 48 FC | 	wrbyte	#46, local13
319fc     01 2E 06 F1 | 	add	local05, #1
31a00     0C 28 86 F1 | 	sub	local02, #12
31a04                 | LR__4855
31a04     1D 13 32 F9 | 	getword	arg01, local11, #0
31a08     07 12 4E F7 | 	zerox	arg01, #7 wz
31a0c     00 FA 05 56 |  if_ne	mov	result1, #0
31a10                 | ' 
31a10                 | ' 	return 0;
31a10     00 FA 05 A6 |  if_e	mov	result1, #0
31a14     00 FA 0D F2 | 	cmp	result1, #0 wz
31a18     08 30 0E 52 |  if_ne	cmp	local06, #8 wz
31a1c     0B 30 0E 52 |  if_ne	cmp	local06, #11 wz
31a20     50 00 90 AD |  if_e	jmp	#LR__4856
31a24     1C 26 06 F1 | 	add	local01, #28
31a28     13 39 02 FB | 	rdlong	local10, local01
31a2c     1C 26 86 F1 | 	sub	local01, #28
31a30     18 35 02 F6 | 	mov	local08, local06
31a34     1C 35 02 F1 | 	add	local08, local10
31a38     1A 13 CA FA | 	rdbyte	arg01, local08 wz
31a3c     00 FA 05 56 |  if_ne	mov	result1, #0
31a40                 | ' 
31a40                 | ' 	return 0;
31a40     00 FA 05 A6 |  if_e	mov	result1, #0
31a44     00 FA 0D F2 | 	cmp	result1, #0 wz
31a48     28 00 90 AD |  if_e	jmp	#LR__4856
31a4c     1D 3B 32 F9 | 	getword	local11, local11, #0
31a50     08 3A 66 F0 | 	shl	local11, #8
31a54     1C 26 06 F1 | 	add	local01, #28
31a58     13 41 02 FB | 	rdlong	local14, local01
31a5c     1C 26 86 F1 | 	sub	local01, #28
31a60     18 37 02 F6 | 	mov	local09, local06
31a64     20 37 02 F1 | 	add	local09, local14
31a68     1B 3D C2 FA | 	rdbyte	local12, local09
31a6c     1E 3B 42 F5 | 	or	local11, local12
31a70     01 30 06 F1 | 	add	local06, #1
31a74                 | LR__4856
31a74     1D 13 02 F6 | 	mov	arg01, local11
31a78     01 00 00 FF 
31a7c     52 15 06 F6 | 	mov	arg02, ##850
31a80     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
31a84     FD 3A 02 F6 | 	mov	local11, result1
31a88     1D 2D 02 F6 | 	mov	local04, local11
31a8c     0F 2C 4E F7 | 	zerox	local04, #15 wz
31a90     00 2E 06 A6 |  if_e	mov	local05, #0
31a94     30 00 90 AD |  if_e	jmp	#LR__4857
31a98     1D 13 32 F9 | 	getword	arg01, local11, #0
31a9c     17 15 02 F6 | 	mov	arg02, local05
31aa0     0C 28 06 F1 | 	add	local02, #12
31aa4     14 15 02 F1 | 	add	arg02, local02
31aa8     0C 16 06 F6 | 	mov	arg03, #12
31aac     17 17 82 F1 | 	sub	arg03, local05
31ab0     0C 28 86 F1 | 	sub	local02, #12
31ab4     EC DF BF FD | 	call	#_fatfs_cc_put_utf
31ab8     FD 40 0A F6 | 	mov	local14, result1 wz
31abc     00 2E 06 A6 |  if_e	mov	local05, #0
31ac0     20 2F 02 51 |  if_ne	add	local05, local14
31ac4     D8 FE 9F 5D |  if_ne	jmp	#LR__4854
31ac8                 | LR__4857
31ac8     17 2D 02 F6 | 	mov	local04, local05
31acc     0C 28 06 F1 | 	add	local02, #12
31ad0     14 2D 02 F1 | 	add	local04, local02
31ad4     16 01 48 FC | 	wrbyte	#0, local04
31ad8     10 28 06 F1 | 	add	local02, #16
31adc     14 2D CA FA | 	rdbyte	local04, local02 wz
31ae0     1C 28 86 F1 | 	sub	local02, #28
31ae4     F8 00 90 5D |  if_ne	jmp	#LR__4863
31ae8     00 2E 0E F2 | 	cmp	local05, #0 wz
31aec     1C 00 90 5D |  if_ne	jmp	#LR__4858
31af0     17 3F 02 F6 | 	mov	local13, local05
31af4     1C 28 06 F1 | 	add	local02, #28
31af8     14 3F 02 F1 | 	add	local13, local02
31afc     1F 7F 48 FC | 	wrbyte	#63, local13
31b00     01 2E 06 F1 | 	add	local05, #1
31b04     1C 28 86 F1 | 	sub	local02, #28
31b08     A4 00 90 FD | 	jmp	#LR__4862
31b0c                 | LR__4858
31b0c                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
31b0c     00 2E 06 F6 | 	mov	local05, #0
31b10     00 30 06 F6 | 	mov	local06, #0
31b14     08 42 06 F6 | 	mov	local15, #8
31b18                 | LR__4859
31b18     18 2D 02 F6 | 	mov	local04, local06
31b1c     0C 28 06 F1 | 	add	local02, #12
31b20     14 2D 02 F1 | 	add	local04, local02
31b24     16 3F CA FA | 	rdbyte	local13, local04 wz
31b28     0C 28 86 F1 | 	sub	local02, #12
31b2c     80 00 90 AD |  if_e	jmp	#LR__4861
31b30     18 35 02 F6 | 	mov	local08, local06
31b34     0C 28 06 F1 | 	add	local02, #12
31b38     14 35 02 F1 | 	add	local08, local02
31b3c     1A 3B C2 FA | 	rdbyte	local11, local08
31b40     1D 41 32 F9 | 	getword	local14, local11, #0
31b44     2E 40 0E F2 | 	cmp	local14, #46 wz
31b48     0C 28 86 F1 | 	sub	local02, #12
31b4c     10 42 06 A6 |  if_e	mov	local15, #16
31b50     1D 41 32 F9 | 	getword	local14, local11, #0
31b54     41 40 16 F2 | 	cmp	local14, #65 wc
31b58     30 00 90 CD |  if_b	jmp	#LR__4860
31b5c     1D 35 32 F9 | 	getword	local08, local11, #0
31b60     5B 34 16 F2 | 	cmp	local08, #91 wc
31b64     24 00 90 3D |  if_ae	jmp	#LR__4860
31b68     1C 26 06 F1 | 	add	local01, #28
31b6c     13 37 02 FB | 	rdlong	local09, local01
31b70     1C 26 86 F1 | 	sub	local01, #28
31b74     0C 36 06 F1 | 	add	local09, #12
31b78     1B 39 C2 FA | 	rdbyte	local10, local09
31b7c     21 41 E2 F8 | 	getbyte	local14, local15, #0
31b80     20 39 CA F7 | 	test	local10, local14 wz
31b84     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
31b88     20 3A 06 51 |  if_ne	add	local11, #32
31b8c                 | LR__4860
31b8c     17 41 02 F6 | 	mov	local14, local05
31b90     1C 28 06 F1 | 	add	local02, #28
31b94     14 41 02 F1 | 	add	local14, local02
31b98     1D 3B 32 F9 | 	getword	local11, local11, #0
31b9c     20 3B 42 FC | 	wrbyte	local11, local14
31ba0     01 30 06 F1 | 	add	local06, #1
31ba4     01 2E 06 F1 | 	add	local05, #1
31ba8     1C 28 86 F1 | 	sub	local02, #28
31bac     68 FF 9F FD | 	jmp	#LR__4859
31bb0                 | LR__4861
31bb0                 | LR__4862
31bb0     1C 28 06 F1 | 	add	local02, #28
31bb4     14 2F 02 F1 | 	add	local05, local02
31bb8     17 01 48 FC | 	wrbyte	#0, local05
31bbc     1C 26 06 F1 | 	add	local01, #28
31bc0     13 2D 02 FB | 	rdlong	local04, local01
31bc4     1C 26 86 F1 | 	sub	local01, #28
31bc8     0C 2C 06 F1 | 	add	local04, #12
31bcc     16 3F CA FA | 	rdbyte	local13, local04 wz
31bd0     1C 28 86 F1 | 	sub	local02, #28
31bd4     0C 28 06 A1 |  if_e	add	local02, #12
31bd8     14 01 48 AC |  if_e	wrbyte	#0, local02
31bdc     0C 28 86 A1 |  if_e	sub	local02, #12
31be0                 | LR__4863
31be0     1C 26 06 F1 | 	add	local01, #28
31be4     13 3D 02 FB | 	rdlong	local12, local01
31be8     0B 3C 06 F1 | 	add	local12, #11
31bec     1E 2D C2 FA | 	rdbyte	local04, local12
31bf0     3F 2C 06 F5 | 	and	local04, #63
31bf4     08 28 06 F1 | 	add	local02, #8
31bf8     14 2D 42 FC | 	wrbyte	local04, local02
31bfc     08 28 86 F1 | 	sub	local02, #8
31c00     13 13 02 FB | 	rdlong	arg01, local01
31c04     1C 12 06 F1 | 	add	arg01, #28
31c08                 | ' {
31c08                 | ' 
31c08                 | ' 	return *((DWORD*)ptr);
31c08     09 FB 01 FB | 	rdlong	result1, arg01
31c0c     14 FB 61 FC | 	wrlong	result1, local02
31c10     13 13 02 FB | 	rdlong	arg01, local01
31c14     16 12 06 F1 | 	add	arg01, #22
31c18                 | ' {
31c18                 | ' 
31c18                 | ' 	return *((WORD*)ptr);
31c18     09 FB E1 FA | 	rdword	result1, arg01
31c1c     06 28 06 F1 | 	add	local02, #6
31c20     14 FB 51 FC | 	wrword	result1, local02
31c24     13 13 02 FB | 	rdlong	arg01, local01
31c28     18 12 06 F1 | 	add	arg01, #24
31c2c                 | ' {
31c2c                 | ' 
31c2c                 | ' 	return *((WORD*)ptr);
31c2c     09 FB E1 FA | 	rdword	result1, arg01
31c30     02 28 86 F1 | 	sub	local02, #2
31c34     14 FB 51 FC | 	wrword	result1, local02
31c38                 | LR__4864
31c38     A7 F0 03 F6 | 	mov	ptra, fp
31c3c     B2 00 A0 FD | 	call	#popregs_
31c40                 | _fatfs_cc_get_fileinfo_ret
31c40     2D 00 64 FD | 	ret
31c44                 | 
31c44                 | _fatfs_cc_create_name
31c44     0D 4A 05 F6 | 	mov	COUNT_, #13
31c48     A8 00 A0 FD | 	call	#pushregs_
31c4c     34 F0 07 F1 | 	add	ptra, #52
31c50     04 4E 05 F1 | 	add	fp, #4
31c54     A7 12 62 FC | 	wrlong	arg01, fp
31c58     04 4E 05 F1 | 	add	fp, #4
31c5c     A7 14 62 FC | 	wrlong	arg02, fp
31c60     0A FB 01 FB | 	rdlong	result1, arg02
31c64     28 4E 05 F1 | 	add	fp, #40
31c68     A7 FA 61 FC | 	wrlong	result1, fp
31c6c     2C 4E 85 F1 | 	sub	fp, #44
31c70     A7 FA 01 FB | 	rdlong	result1, fp
31c74     FD 26 02 FB | 	rdlong	local01, result1
31c78     0C 26 06 F1 | 	add	local01, #12
31c7c     13 29 02 FB | 	rdlong	local02, local01
31c80     14 4E 05 F1 | 	add	fp, #20
31c84     A7 28 62 FC | 	wrlong	local02, fp
31c88     14 4E 05 F1 | 	add	fp, #20
31c8c     A7 00 68 FC | 	wrlong	#0, fp
31c90     2C 4E 85 F1 | 	sub	fp, #44
31c94                 | ' 
31c94                 | ' 
31c94                 | ' 
31c94                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
31c94                 | ' 	for (;;) {
31c94                 | LR__4870
31c94     30 4E 05 F1 | 	add	fp, #48
31c98     A7 12 02 F6 | 	mov	arg01, fp
31c9c     30 4E 85 F1 | 	sub	fp, #48
31ca0     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
31ca4     1C 4E 05 F1 | 	add	fp, #28
31ca8     A7 FA 61 FC | 	wrlong	result1, fp
31cac     1C 4E 85 F1 | 	sub	fp, #28
31cb0     FF FF 7F FF 
31cb4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
31cb8     06 FA 05 A6 |  if_e	mov	result1, #6
31cbc     74 08 90 AD |  if_e	jmp	#LR__4910
31cc0     1C 4E 05 F1 | 	add	fp, #28
31cc4     A7 26 02 FB | 	rdlong	local01, fp
31cc8     1C 4E 85 F1 | 	sub	fp, #28
31ccc     80 00 00 FF 
31cd0     00 26 16 F2 | 	cmp	local01, ##65536 wc
31cd4     3C 00 90 CD |  if_b	jmp	#LR__4871
31cd8     18 4E 05 F1 | 	add	fp, #24
31cdc     A7 2A 02 FB | 	rdlong	local03, fp
31ce0     14 4E 05 F1 | 	add	fp, #20
31ce4     A7 26 02 FB | 	rdlong	local01, fp
31ce8     13 2D 02 F6 | 	mov	local04, local01
31cec     01 2C 06 F1 | 	add	local04, #1
31cf0     A7 2C 62 FC | 	wrlong	local04, fp
31cf4     01 26 66 F0 | 	shl	local01, #1
31cf8     15 27 02 F1 | 	add	local01, local03
31cfc     10 4E 85 F1 | 	sub	fp, #16
31d00     A7 2E 02 FB | 	rdlong	local05, fp
31d04     1C 4E 85 F1 | 	sub	fp, #28
31d08     17 31 02 F6 | 	mov	local06, local05
31d0c     10 30 46 F0 | 	shr	local06, #16
31d10     13 31 52 FC | 	wrword	local06, local01
31d14                 | LR__4871
31d14     1C 4E 05 F1 | 	add	fp, #28
31d18     A7 26 02 FB | 	rdlong	local01, fp
31d1c     08 4E 85 F1 | 	sub	fp, #8
31d20     A7 26 52 FC | 	wrword	local01, fp
31d24     A7 26 E2 FA | 	rdword	local01, fp
31d28     14 4E 85 F1 | 	sub	fp, #20
31d2c     20 26 16 F2 | 	cmp	local01, #32 wc
31d30     B0 00 90 CD |  if_b	jmp	#LR__4873
31d34     14 4E 05 F1 | 	add	fp, #20
31d38     A7 26 E2 FA | 	rdword	local01, fp
31d3c     14 4E 85 F1 | 	sub	fp, #20
31d40     2F 26 0E F2 | 	cmp	local01, #47 wz
31d44     14 4E 05 51 |  if_ne	add	fp, #20
31d48     A7 2C E2 5A |  if_ne	rdword	local04, fp
31d4c     14 4E 85 51 |  if_ne	sub	fp, #20
31d50     5C 2C 0E 52 |  if_ne	cmp	local04, #92 wz
31d54     8C 00 90 AD |  if_e	jmp	#LR__4873
31d58     14 4E 05 F1 | 	add	fp, #20
31d5c     A7 12 E2 FA | 	rdword	arg01, fp
31d60     14 4E 85 F1 | 	sub	fp, #20
31d64     80 12 16 F2 | 	cmp	arg01, #128 wc
31d68     24 00 90 3D |  if_ae	jmp	#LR__4872
31d6c     BE 01 00 FF 
31d70     A4 12 06 F6 | 	mov	arg01, ##@LR__5532
31d74     14 4E 05 F1 | 	add	fp, #20
31d78     A7 14 E2 FA | 	rdword	arg02, fp
31d7c     14 4E 85 F1 | 	sub	fp, #20
31d80     FC D0 BF FD | 	call	#_fatfs_cc_strchr
31d84     00 FA 0D F2 | 	cmp	result1, #0 wz
31d88     06 FA 05 56 |  if_ne	mov	result1, #6
31d8c     A4 07 90 5D |  if_ne	jmp	#LR__4910
31d90                 | LR__4872
31d90     2C 4E 05 F1 | 	add	fp, #44
31d94     A7 30 02 FB | 	rdlong	local06, fp
31d98     2C 4E 85 F1 | 	sub	fp, #44
31d9c     FF 30 16 F2 | 	cmp	local06, #255 wc
31da0     06 FA 05 36 |  if_ae	mov	result1, #6
31da4     8C 07 90 3D |  if_ae	jmp	#LR__4910
31da8     18 4E 05 F1 | 	add	fp, #24
31dac     A7 2A 02 FB | 	rdlong	local03, fp
31db0     14 4E 05 F1 | 	add	fp, #20
31db4     A7 28 02 FB | 	rdlong	local02, fp
31db8     14 2D 02 F6 | 	mov	local04, local02
31dbc     01 2C 06 F1 | 	add	local04, #1
31dc0     A7 2C 62 FC | 	wrlong	local04, fp
31dc4     14 27 02 F6 | 	mov	local01, local02
31dc8     01 26 66 F0 | 	shl	local01, #1
31dcc     15 27 02 F1 | 	add	local01, local03
31dd0     18 4E 85 F1 | 	sub	fp, #24
31dd4     A7 30 E2 FA | 	rdword	local06, fp
31dd8     14 4E 85 F1 | 	sub	fp, #20
31ddc     13 31 52 FC | 	wrword	local06, local01
31de0     B0 FE 9F FD | 	jmp	#LR__4870
31de4                 | LR__4873
31de4     14 4E 05 F1 | 	add	fp, #20
31de8     A7 32 E2 FA | 	rdword	local07, fp
31dec     14 4E 85 F1 | 	sub	fp, #20
31df0     20 32 16 F2 | 	cmp	local07, #32 wc
31df4     10 4E 05 C1 |  if_b	add	fp, #16
31df8     A7 08 48 CC |  if_b	wrbyte	#4, fp
31dfc     10 4E 85 C1 |  if_b	sub	fp, #16
31e00     74 00 90 CD |  if_b	jmp	#LR__4878
31e04     97 24 48 FB | 	callpa	#(@LR__4876-@LR__4874)>>2,fcache_load_ptr_
31e08                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
31e08                 | LR__4874
31e08     30 4E 05 F1 | 	add	fp, #48
31e0c     A7 2C 02 FB | 	rdlong	local04, fp
31e10     30 4E 85 F1 | 	sub	fp, #48
31e14     16 33 C2 FA | 	rdbyte	local07, local04
31e18     2F 32 0E F2 | 	cmp	local07, #47 wz
31e1c     18 00 90 AD |  if_e	jmp	#LR__4875
31e20     30 4E 05 F1 | 	add	fp, #48
31e24     A7 2C 02 FB | 	rdlong	local04, fp
31e28     30 4E 85 F1 | 	sub	fp, #48
31e2c     16 29 C2 FA | 	rdbyte	local02, local04
31e30     5C 28 0E F2 | 	cmp	local02, #92 wz
31e34     18 00 90 5D |  if_ne	jmp	#LR__4877
31e38                 | LR__4875
31e38     30 4E 05 F1 | 	add	fp, #48
31e3c     A7 26 02 FB | 	rdlong	local01, fp
31e40     01 26 06 F1 | 	add	local01, #1
31e44     A7 26 62 FC | 	wrlong	local01, fp
31e48     30 4E 85 F1 | 	sub	fp, #48
31e4c     B8 FF 9F FD | 	jmp	#LR__4874
31e50                 | LR__4876
31e50                 | LR__4877
31e50     10 4E 05 F1 | 	add	fp, #16
31e54     A7 00 48 FC | 	wrbyte	#0, fp
31e58     20 4E 05 F1 | 	add	fp, #32
31e5c     A7 30 02 FB | 	rdlong	local06, fp
31e60     30 4E 85 F1 | 	sub	fp, #48
31e64     18 33 C2 FA | 	rdbyte	local07, local06
31e68     20 32 16 F2 | 	cmp	local07, #32 wc
31e6c     10 4E 05 C1 |  if_b	add	fp, #16
31e70     A7 08 48 CC |  if_b	wrbyte	#4, fp
31e74     10 4E 85 C1 |  if_b	sub	fp, #16
31e78                 | LR__4878
31e78     08 4E 05 F1 | 	add	fp, #8
31e7c     A7 32 02 FB | 	rdlong	local07, fp
31e80     28 4E 05 F1 | 	add	fp, #40
31e84     A7 26 02 FB | 	rdlong	local01, fp
31e88     30 4E 85 F1 | 	sub	fp, #48
31e8c     19 27 62 FC | 	wrlong	local01, local07
31e90     97 38 48 FB | 	callpa	#(@LR__4880-@LR__4879)>>2,fcache_load_ptr_
31e94                 | ' 	}
31e94                 | ' 	*path = p;
31e94                 | ' #line 2862 "ff.c"
31e94                 | ' 	while (di) {
31e94                 | LR__4879
31e94     2C 4E 05 F1 | 	add	fp, #44
31e98     A7 32 0A FB | 	rdlong	local07, fp wz
31e9c     2C 4E 85 F1 | 	sub	fp, #44
31ea0     60 00 90 AD |  if_e	jmp	#LR__4881
31ea4     18 4E 05 F1 | 	add	fp, #24
31ea8     A7 30 02 FB | 	rdlong	local06, fp
31eac     14 4E 05 F1 | 	add	fp, #20
31eb0     A7 2C 02 FB | 	rdlong	local04, fp
31eb4     01 2C 86 F1 | 	sub	local04, #1
31eb8     01 2C 66 F0 | 	shl	local04, #1
31ebc     18 2D 02 F1 | 	add	local04, local06
31ec0     16 31 E2 FA | 	rdword	local06, local04
31ec4     18 4E 85 F1 | 	sub	fp, #24
31ec8     A7 30 52 FC | 	wrword	local06, fp
31ecc     A7 32 E2 FA | 	rdword	local07, fp
31ed0     14 4E 85 F1 | 	sub	fp, #20
31ed4     20 32 0E F2 | 	cmp	local07, #32 wz
31ed8     14 4E 05 51 |  if_ne	add	fp, #20
31edc     A7 26 E2 5A |  if_ne	rdword	local01, fp
31ee0     14 4E 85 51 |  if_ne	sub	fp, #20
31ee4     2E 26 0E 52 |  if_ne	cmp	local01, #46 wz
31ee8     18 00 90 5D |  if_ne	jmp	#LR__4881
31eec     2C 4E 05 F1 | 	add	fp, #44
31ef0     A7 26 02 FB | 	rdlong	local01, fp
31ef4     01 26 86 F1 | 	sub	local01, #1
31ef8     A7 26 62 FC | 	wrlong	local01, fp
31efc     2C 4E 85 F1 | 	sub	fp, #44
31f00     90 FF 9F FD | 	jmp	#LR__4879
31f04                 | LR__4880
31f04                 | LR__4881
31f04     18 4E 05 F1 | 	add	fp, #24
31f08     A7 34 02 FB | 	rdlong	local08, fp
31f0c     14 4E 05 F1 | 	add	fp, #20
31f10     A7 2C 02 FB | 	rdlong	local04, fp
31f14     01 2C 66 F0 | 	shl	local04, #1
31f18     1A 2D 02 F1 | 	add	local04, local08
31f1c     16 01 58 FC | 	wrword	#0, local04
31f20     A7 32 0A FB | 	rdlong	local07, fp wz
31f24     2C 4E 85 F1 | 	sub	fp, #44
31f28     06 FA 05 A6 |  if_e	mov	result1, #6
31f2c     04 06 90 AD |  if_e	jmp	#LR__4910
31f30                 | ' 
31f30                 | ' 
31f30                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
31f30     28 4E 05 F1 | 	add	fp, #40
31f34     A7 00 68 FC | 	wrlong	#0, fp
31f38     28 4E 85 F1 | 	sub	fp, #40
31f3c     97 22 48 FB | 	callpa	#(@LR__4883-@LR__4882)>>2,fcache_load_ptr_
31f40                 | LR__4882
31f40     18 4E 05 F1 | 	add	fp, #24
31f44     A7 36 02 FB | 	rdlong	local09, fp
31f48     10 4E 05 F1 | 	add	fp, #16
31f4c     A7 38 02 FB | 	rdlong	local10, fp
31f50     28 4E 85 F1 | 	sub	fp, #40
31f54     01 38 66 F0 | 	shl	local10, #1
31f58     1B 39 02 F1 | 	add	local10, local09
31f5c     1C 3B E2 FA | 	rdword	local11, local10
31f60     20 3A 0E F2 | 	cmp	local11, #32 wz
31f64     1C 00 90 5D |  if_ne	jmp	#LR__4884
31f68     28 4E 05 F1 | 	add	fp, #40
31f6c     A7 3C 02 FB | 	rdlong	local12, fp
31f70     1E 2F 02 F6 | 	mov	local05, local12
31f74     01 2E 06 F1 | 	add	local05, #1
31f78     A7 2E 62 FC | 	wrlong	local05, fp
31f7c     28 4E 85 F1 | 	sub	fp, #40
31f80     BC FF 9F FD | 	jmp	#LR__4882
31f84                 | LR__4883
31f84                 | LR__4884
31f84     28 4E 05 F1 | 	add	fp, #40
31f88     A7 32 02 FB | 	rdlong	local07, fp
31f8c     28 4E 85 F1 | 	sub	fp, #40
31f90     01 32 16 F2 | 	cmp	local07, #1 wc
31f94     28 00 90 3D |  if_ae	jmp	#LR__4885
31f98     18 4E 05 F1 | 	add	fp, #24
31f9c     A7 2A 02 FB | 	rdlong	local03, fp
31fa0     10 4E 05 F1 | 	add	fp, #16
31fa4     A7 36 02 FB | 	rdlong	local09, fp
31fa8     28 4E 85 F1 | 	sub	fp, #40
31fac     01 36 66 F0 | 	shl	local09, #1
31fb0     15 37 02 F1 | 	add	local09, local03
31fb4     1B 27 E2 FA | 	rdword	local01, local09
31fb8     2E 26 0E F2 | 	cmp	local01, #46 wz
31fbc     14 00 90 5D |  if_ne	jmp	#LR__4886
31fc0                 | LR__4885
31fc0     10 4E 05 F1 | 	add	fp, #16
31fc4     A7 32 C2 FA | 	rdbyte	local07, fp
31fc8     03 32 46 F5 | 	or	local07, #3
31fcc     A7 32 42 FC | 	wrbyte	local07, fp
31fd0     10 4E 85 F1 | 	sub	fp, #16
31fd4                 | LR__4886
31fd4     97 2C 48 FB | 	callpa	#(@LR__4888-@LR__4887)>>2,fcache_load_ptr_
31fd8                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
31fd8                 | LR__4887
31fd8     2C 4E 05 F1 | 	add	fp, #44
31fdc     A7 32 02 FB | 	rdlong	local07, fp
31fe0     2C 4E 85 F1 | 	sub	fp, #44
31fe4     01 32 16 F2 | 	cmp	local07, #1 wc
31fe8     44 00 90 CD |  if_b	jmp	#LR__4889
31fec     18 4E 05 F1 | 	add	fp, #24
31ff0     A7 30 02 FB | 	rdlong	local06, fp
31ff4     14 4E 05 F1 | 	add	fp, #20
31ff8     A7 2A 02 FB | 	rdlong	local03, fp
31ffc     2C 4E 85 F1 | 	sub	fp, #44
32000     01 2A 86 F1 | 	sub	local03, #1
32004     01 2A 66 F0 | 	shl	local03, #1
32008     18 2B 02 F1 | 	add	local03, local06
3200c     15 27 E2 FA | 	rdword	local01, local03
32010     2E 26 0E F2 | 	cmp	local01, #46 wz
32014     18 00 90 AD |  if_e	jmp	#LR__4889
32018     2C 4E 05 F1 | 	add	fp, #44
3201c     A7 26 02 FB | 	rdlong	local01, fp
32020     01 26 86 F1 | 	sub	local01, #1
32024     A7 26 62 FC | 	wrlong	local01, fp
32028     2C 4E 85 F1 | 	sub	fp, #44
3202c     A8 FF 9F FD | 	jmp	#LR__4887
32030                 | LR__4888
32030                 | LR__4889
32030     04 4E 05 F1 | 	add	fp, #4
32034     A7 12 02 FB | 	rdlong	arg01, fp
32038     04 4E 85 F1 | 	sub	fp, #4
3203c     20 12 06 F1 | 	add	arg01, #32
32040     20 14 06 F6 | 	mov	arg02, #32
32044     0B 16 06 F6 | 	mov	arg03, #11
32048     09 3F 02 F6 | 	mov	local13, arg01
3204c     98 00 A0 FD | 	call	#\builtin_bytefill_
32050     1F FB 01 F6 | 	mov	result1, local13
32054     0C 4E 05 F1 | 	add	fp, #12
32058     A7 00 48 FC | 	wrbyte	#0, fp
3205c     A7 32 C2 FA | 	rdbyte	local07, fp
32060     14 4E 05 F1 | 	add	fp, #20
32064     A7 32 62 FC | 	wrlong	local07, fp
32068     04 4E 05 F1 | 	add	fp, #4
3206c     A7 10 68 FC | 	wrlong	#8, fp
32070     24 4E 85 F1 | 	sub	fp, #36
32074                 | ' 
32074                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
32074                 | ' 	i = b = 0; ni = 8;
32074                 | ' 	for (;;) {
32074                 | LR__4890
32074     18 4E 05 F1 | 	add	fp, #24
32078     A7 2A 02 FB | 	rdlong	local03, fp
3207c     10 4E 05 F1 | 	add	fp, #16
32080     A7 36 02 FB | 	rdlong	local09, fp
32084     1B 2D 02 F6 | 	mov	local04, local09
32088     01 2C 06 F1 | 	add	local04, #1
3208c     A7 2C 62 FC | 	wrlong	local04, fp
32090     01 36 66 F0 | 	shl	local09, #1
32094     15 37 02 F1 | 	add	local09, local03
32098     1B 31 E2 FA | 	rdword	local06, local09
3209c     14 4E 85 F1 | 	sub	fp, #20
320a0     A7 30 52 FC | 	wrword	local06, fp
320a4     A7 32 EA FA | 	rdword	local07, fp wz
320a8     14 4E 85 F1 | 	sub	fp, #20
320ac     74 03 90 AD |  if_e	jmp	#LR__4906
320b0     14 4E 05 F1 | 	add	fp, #20
320b4     A7 32 E2 FA | 	rdword	local07, fp
320b8     14 4E 85 F1 | 	sub	fp, #20
320bc     20 32 0E F2 | 	cmp	local07, #32 wz
320c0     30 00 90 AD |  if_e	jmp	#LR__4891
320c4     14 4E 05 F1 | 	add	fp, #20
320c8     A7 26 E2 FA | 	rdword	local01, fp
320cc     14 4E 85 F1 | 	sub	fp, #20
320d0     2E 26 0E F2 | 	cmp	local01, #46 wz
320d4     34 00 90 5D |  if_ne	jmp	#LR__4892
320d8     28 4E 05 F1 | 	add	fp, #40
320dc     A7 2C 02 FB | 	rdlong	local04, fp
320e0     04 4E 05 F1 | 	add	fp, #4
320e4     A7 38 02 FB | 	rdlong	local10, fp
320e8     2C 4E 85 F1 | 	sub	fp, #44
320ec     1C 2D 0A F2 | 	cmp	local04, local10 wz
320f0     18 00 90 AD |  if_e	jmp	#LR__4892
320f4                 | LR__4891
320f4     10 4E 05 F1 | 	add	fp, #16
320f8     A7 32 C2 FA | 	rdbyte	local07, fp
320fc     03 32 46 F5 | 	or	local07, #3
32100     A7 32 42 FC | 	wrbyte	local07, fp
32104     10 4E 85 F1 | 	sub	fp, #16
32108                 | ' 			cf |=  0x01  |  0x02 ;
32108                 | ' 			continue;
32108     68 FF 9F FD | 	jmp	#LR__4890
3210c                 | LR__4892
3210c     20 4E 05 F1 | 	add	fp, #32
32110     A7 32 02 FB | 	rdlong	local07, fp
32114     04 4E 05 F1 | 	add	fp, #4
32118     A7 26 02 FB | 	rdlong	local01, fp
3211c     24 4E 85 F1 | 	sub	fp, #36
32120     13 33 12 F2 | 	cmp	local07, local01 wc
32124     1C 00 90 3D |  if_ae	jmp	#LR__4893
32128     28 4E 05 F1 | 	add	fp, #40
3212c     A7 34 02 FB | 	rdlong	local08, fp
32130     04 4E 05 F1 | 	add	fp, #4
32134     A7 38 02 FB | 	rdlong	local10, fp
32138     2C 4E 85 F1 | 	sub	fp, #44
3213c     1C 35 0A F2 | 	cmp	local08, local10 wz
32140     B0 00 90 5D |  if_ne	jmp	#LR__4895
32144                 | LR__4893
32144     24 4E 05 F1 | 	add	fp, #36
32148     A7 32 02 FB | 	rdlong	local07, fp
3214c     24 4E 85 F1 | 	sub	fp, #36
32150     0B 32 0E F2 | 	cmp	local07, #11 wz
32154     18 00 90 5D |  if_ne	jmp	#LR__4894
32158     10 4E 05 F1 | 	add	fp, #16
3215c     A7 32 C2 FA | 	rdbyte	local07, fp
32160     03 32 46 F5 | 	or	local07, #3
32164     A7 32 42 FC | 	wrbyte	local07, fp
32168     10 4E 85 F1 | 	sub	fp, #16
3216c                 | ' 				cf |=  0x01  |  0x02 ;
3216c                 | ' 				break;
3216c     B4 02 90 FD | 	jmp	#LR__4906
32170                 | LR__4894
32170     28 4E 05 F1 | 	add	fp, #40
32174     A7 32 02 FB | 	rdlong	local07, fp
32178     04 4E 05 F1 | 	add	fp, #4
3217c     A7 26 02 FB | 	rdlong	local01, fp
32180     2C 4E 85 F1 | 	sub	fp, #44
32184     13 33 0A F2 | 	cmp	local07, local01 wz
32188     10 4E 05 51 |  if_ne	add	fp, #16
3218c     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
32190     03 32 46 55 |  if_ne	or	local07, #3
32194     A7 32 42 5C |  if_ne	wrbyte	local07, fp
32198     10 4E 85 51 |  if_ne	sub	fp, #16
3219c     28 4E 05 F1 | 	add	fp, #40
321a0     A7 32 02 FB | 	rdlong	local07, fp
321a4     04 4E 05 F1 | 	add	fp, #4
321a8     A7 28 02 FB | 	rdlong	local02, fp
321ac     2C 4E 85 F1 | 	sub	fp, #44
321b0     14 33 1A F2 | 	cmp	local07, local02 wcz
321b4     6C 02 90 1D |  if_a	jmp	#LR__4906
321b8     2C 4E 05 F1 | 	add	fp, #44
321bc     A7 32 02 FB | 	rdlong	local07, fp
321c0     04 4E 85 F1 | 	sub	fp, #4
321c4     A7 32 62 FC | 	wrlong	local07, fp
321c8     08 4E 85 F1 | 	sub	fp, #8
321cc     A7 10 68 FC | 	wrlong	#8, fp
321d0     04 4E 05 F1 | 	add	fp, #4
321d4     A7 16 68 FC | 	wrlong	#11, fp
321d8     18 4E 85 F1 | 	sub	fp, #24
321dc     A7 3A C2 FA | 	rdbyte	local11, fp
321e0     1D 33 E2 F8 | 	getbyte	local07, local11, #0
321e4     02 32 66 F0 | 	shl	local07, #2
321e8     A7 32 42 FC | 	wrbyte	local07, fp
321ec     0C 4E 85 F1 | 	sub	fp, #12
321f0                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
321f0                 | ' 			continue;
321f0     80 FE 9F FD | 	jmp	#LR__4890
321f4                 | LR__4895
321f4     14 4E 05 F1 | 	add	fp, #20
321f8     A7 32 E2 FA | 	rdword	local07, fp
321fc     14 4E 85 F1 | 	sub	fp, #20
32200     80 32 16 F2 | 	cmp	local07, #128 wc
32204     6C 00 90 CD |  if_b	jmp	#LR__4897
32208     10 4E 05 F1 | 	add	fp, #16
3220c     A7 32 C2 FA | 	rdbyte	local07, fp
32210     02 32 46 F5 | 	or	local07, #2
32214     A7 32 42 FC | 	wrbyte	local07, fp
32218     04 4E 05 F1 | 	add	fp, #4
3221c     A7 12 E2 FA | 	rdword	arg01, fp
32220     14 4E 85 F1 | 	sub	fp, #20
32224     01 00 00 FF 
32228     52 15 06 F6 | 	mov	arg02, ##850
3222c     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
32230     14 4E 05 F1 | 	add	fp, #20
32234     A7 FA 51 FC | 	wrword	result1, fp
32238     A7 32 E2 FA | 	rdword	local07, fp
3223c     14 4E 85 F1 | 	sub	fp, #20
32240     80 32 CE F7 | 	test	local07, #128 wz
32244     2C 00 90 AD |  if_e	jmp	#LR__4896
32248     14 4E 05 F1 | 	add	fp, #20
3224c     A7 28 E2 FA | 	rdword	local02, fp
32250     7F 28 06 F5 | 	and	local02, #127
32254     01 00 00 FF 
32258     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
3225c     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
32260     14 33 C2 FA | 	rdbyte	local07, local02
32264     A7 32 52 FC | 	wrword	local07, fp
32268     14 4E 85 F1 | 	sub	fp, #20
3226c     01 00 00 FF 
32270     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
32274                 | LR__4896
32274                 | LR__4897
32274     14 4E 05 F1 | 	add	fp, #20
32278     A7 32 E2 FA | 	rdword	local07, fp
3227c     14 4E 85 F1 | 	sub	fp, #20
32280     00 33 16 F2 | 	cmp	local07, #256 wc
32284     88 00 90 CD |  if_b	jmp	#LR__4899
32288     24 4E 05 F1 | 	add	fp, #36
3228c     A7 32 02 FB | 	rdlong	local07, fp
32290     01 32 86 F1 | 	sub	local07, #1
32294     04 4E 85 F1 | 	sub	fp, #4
32298     A7 28 02 FB | 	rdlong	local02, fp
3229c     20 4E 85 F1 | 	sub	fp, #32
322a0     19 29 12 F2 | 	cmp	local02, local07 wc
322a4     2C 00 90 CD |  if_b	jmp	#LR__4898
322a8     10 4E 05 F1 | 	add	fp, #16
322ac     A7 3A C2 FA | 	rdbyte	local11, fp
322b0     1D 33 E2 F8 | 	getbyte	local07, local11, #0
322b4     03 32 46 F5 | 	or	local07, #3
322b8     A7 32 42 FC | 	wrbyte	local07, fp
322bc     14 4E 05 F1 | 	add	fp, #20
322c0     A7 32 02 FB | 	rdlong	local07, fp
322c4     04 4E 85 F1 | 	sub	fp, #4
322c8     A7 32 62 FC | 	wrlong	local07, fp
322cc     20 4E 85 F1 | 	sub	fp, #32
322d0                 | ' 				cf |=  0x01  |  0x02 ;
322d0                 | ' 				i = ni; continue;
322d0     A0 FD 9F FD | 	jmp	#LR__4890
322d4                 | LR__4898
322d4     04 4E 05 F1 | 	add	fp, #4
322d8     A7 36 02 FB | 	rdlong	local09, fp
322dc     1C 4E 05 F1 | 	add	fp, #28
322e0     A7 38 02 FB | 	rdlong	local10, fp
322e4     1C 2D 02 F6 | 	mov	local04, local10
322e8     01 2C 06 F1 | 	add	local04, #1
322ec     A7 2C 62 FC | 	wrlong	local04, fp
322f0     20 36 06 F1 | 	add	local09, #32
322f4     1B 39 02 F1 | 	add	local10, local09
322f8     0C 4E 85 F1 | 	sub	fp, #12
322fc     A7 2A E2 FA | 	rdword	local03, fp
32300     14 4E 85 F1 | 	sub	fp, #20
32304     08 2A 46 F0 | 	shr	local03, #8
32308     1C 2B 42 FC | 	wrbyte	local03, local10
3230c     D4 00 90 FD | 	jmp	#LR__4905
32310                 | LR__4899
32310     14 4E 05 F1 | 	add	fp, #20
32314     A7 32 EA FA | 	rdword	local07, fp wz
32318     14 4E 85 F1 | 	sub	fp, #20
3231c     20 00 90 AD |  if_e	jmp	#LR__4900
32320     BE 01 00 FF 
32324     AD 12 06 F6 | 	mov	arg01, ##@LR__5533
32328     14 4E 05 F1 | 	add	fp, #20
3232c     A7 14 E2 FA | 	rdword	arg02, fp
32330     14 4E 85 F1 | 	sub	fp, #20
32334     48 CB BF FD | 	call	#_fatfs_cc_strchr
32338     00 FA 0D F2 | 	cmp	result1, #0 wz
3233c     20 00 90 AD |  if_e	jmp	#LR__4901
32340                 | LR__4900
32340     14 4E 05 F1 | 	add	fp, #20
32344     A7 BE 58 FC | 	wrword	#95, fp
32348     04 4E 85 F1 | 	sub	fp, #4
3234c     A7 32 C2 FA | 	rdbyte	local07, fp
32350     03 32 46 F5 | 	or	local07, #3
32354     A7 32 42 FC | 	wrbyte	local07, fp
32358     10 4E 85 F1 | 	sub	fp, #16
3235c     84 00 90 FD | 	jmp	#LR__4904
32360                 | LR__4901
32360     14 4E 05 F1 | 	add	fp, #20
32364     A7 32 E2 FA | 	rdword	local07, fp
32368     14 4E 85 F1 | 	sub	fp, #20
3236c     41 32 16 F2 | 	cmp	local07, #65 wc
32370     24 00 90 CD |  if_b	jmp	#LR__4902
32374     14 4E 05 F1 | 	add	fp, #20
32378     A7 26 E2 FA | 	rdword	local01, fp
3237c     14 4E 85 F1 | 	sub	fp, #20
32380     5B 26 16 F2 | 	cmp	local01, #91 wc
32384     0C 4E 05 C1 |  if_b	add	fp, #12
32388     A7 32 C2 CA |  if_b	rdbyte	local07, fp
3238c     02 32 46 C5 |  if_b	or	local07, #2
32390     A7 32 42 CC |  if_b	wrbyte	local07, fp
32394     0C 4E 85 C1 |  if_b	sub	fp, #12
32398                 | LR__4902
32398     14 4E 05 F1 | 	add	fp, #20
3239c     A7 32 E2 FA | 	rdword	local07, fp
323a0     14 4E 85 F1 | 	sub	fp, #20
323a4     61 32 16 F2 | 	cmp	local07, #97 wc
323a8     38 00 90 CD |  if_b	jmp	#LR__4903
323ac     14 4E 05 F1 | 	add	fp, #20
323b0     A7 26 E2 FA | 	rdword	local01, fp
323b4     14 4E 85 F1 | 	sub	fp, #20
323b8     7B 26 16 F2 | 	cmp	local01, #123 wc
323bc     24 00 90 3D |  if_ae	jmp	#LR__4903
323c0     0C 4E 05 F1 | 	add	fp, #12
323c4     A7 32 C2 FA | 	rdbyte	local07, fp
323c8     01 32 46 F5 | 	or	local07, #1
323cc     A7 32 42 FC | 	wrbyte	local07, fp
323d0     08 4E 05 F1 | 	add	fp, #8
323d4     A7 32 E2 FA | 	rdword	local07, fp
323d8     20 32 86 F1 | 	sub	local07, #32
323dc     A7 32 52 FC | 	wrword	local07, fp
323e0     14 4E 85 F1 | 	sub	fp, #20
323e4                 | LR__4903
323e4                 | LR__4904
323e4                 | LR__4905
323e4     04 4E 05 F1 | 	add	fp, #4
323e8     A7 3A 02 FB | 	rdlong	local11, fp
323ec     1D 37 02 F6 | 	mov	local09, local11
323f0     1C 4E 05 F1 | 	add	fp, #28
323f4     A7 28 02 FB | 	rdlong	local02, fp
323f8     14 2D 02 F6 | 	mov	local04, local02
323fc     01 2C 06 F1 | 	add	local04, #1
32400     A7 2C 62 FC | 	wrlong	local04, fp
32404     14 39 02 F6 | 	mov	local10, local02
32408     20 36 06 F1 | 	add	local09, #32
3240c     1B 39 02 F1 | 	add	local10, local09
32410     0C 4E 85 F1 | 	sub	fp, #12
32414     A7 2A E2 FA | 	rdword	local03, fp
32418     14 4E 85 F1 | 	sub	fp, #20
3241c     1C 2B 42 FC | 	wrbyte	local03, local10
32420     50 FC 9F FD | 	jmp	#LR__4890
32424                 | LR__4906
32424     04 4E 05 F1 | 	add	fp, #4
32428     A7 3A 02 FB | 	rdlong	local11, fp
3242c     04 4E 85 F1 | 	sub	fp, #4
32430     20 3A 06 F1 | 	add	local11, #32
32434     1D 33 C2 FA | 	rdbyte	local07, local11
32438     E5 32 0E F2 | 	cmp	local07, #229 wz
3243c     04 4E 05 A1 |  if_e	add	fp, #4
32440     A7 32 02 AB |  if_e	rdlong	local07, fp
32444     04 4E 85 A1 |  if_e	sub	fp, #4
32448     20 32 06 A1 |  if_e	add	local07, #32
3244c     19 0B 48 AC |  if_e	wrbyte	#5, local07
32450     24 4E 05 F1 | 	add	fp, #36
32454     A7 32 02 FB | 	rdlong	local07, fp
32458     24 4E 85 F1 | 	sub	fp, #36
3245c     08 32 0E F2 | 	cmp	local07, #8 wz
32460     0C 4E 05 A1 |  if_e	add	fp, #12
32464     A7 32 C2 AA |  if_e	rdbyte	local07, fp
32468     02 32 66 A0 |  if_e	shl	local07, #2
3246c     A7 32 42 AC |  if_e	wrbyte	local07, fp
32470     0C 4E 85 A1 |  if_e	sub	fp, #12
32474     0C 4E 05 F1 | 	add	fp, #12
32478     A7 32 C2 FA | 	rdbyte	local07, fp
3247c     0C 4E 85 F1 | 	sub	fp, #12
32480     0C 32 06 F5 | 	and	local07, #12
32484     0C 32 0E F2 | 	cmp	local07, #12 wz
32488     18 00 90 AD |  if_e	jmp	#LR__4907
3248c     0C 4E 05 F1 | 	add	fp, #12
32490     A7 26 C2 FA | 	rdbyte	local01, fp
32494     0C 4E 85 F1 | 	sub	fp, #12
32498     03 26 06 F5 | 	and	local01, #3
3249c     03 26 0E F2 | 	cmp	local01, #3 wz
324a0     14 00 90 5D |  if_ne	jmp	#LR__4908
324a4                 | LR__4907
324a4     10 4E 05 F1 | 	add	fp, #16
324a8     A7 32 C2 FA | 	rdbyte	local07, fp
324ac     02 32 46 F5 | 	or	local07, #2
324b0     A7 32 42 FC | 	wrbyte	local07, fp
324b4     10 4E 85 F1 | 	sub	fp, #16
324b8                 | LR__4908
324b8     10 4E 05 F1 | 	add	fp, #16
324bc     A7 32 C2 FA | 	rdbyte	local07, fp
324c0     10 4E 85 F1 | 	sub	fp, #16
324c4     02 32 CE F7 | 	test	local07, #2 wz
324c8     48 00 90 5D |  if_ne	jmp	#LR__4909
324cc     0C 4E 05 F1 | 	add	fp, #12
324d0     A7 32 C2 FA | 	rdbyte	local07, fp
324d4     0C 4E 85 F1 | 	sub	fp, #12
324d8     01 32 CE F7 | 	test	local07, #1 wz
324dc     10 4E 05 51 |  if_ne	add	fp, #16
324e0     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
324e4     10 32 46 55 |  if_ne	or	local07, #16
324e8     A7 32 42 5C |  if_ne	wrbyte	local07, fp
324ec     10 4E 85 51 |  if_ne	sub	fp, #16
324f0     0C 4E 05 F1 | 	add	fp, #12
324f4     A7 32 C2 FA | 	rdbyte	local07, fp
324f8     0C 4E 85 F1 | 	sub	fp, #12
324fc     04 32 CE F7 | 	test	local07, #4 wz
32500     10 4E 05 51 |  if_ne	add	fp, #16
32504     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
32508     08 32 46 55 |  if_ne	or	local07, #8
3250c     A7 32 42 5C |  if_ne	wrbyte	local07, fp
32510     10 4E 85 51 |  if_ne	sub	fp, #16
32514                 | LR__4909
32514     04 4E 05 F1 | 	add	fp, #4
32518     A7 32 02 FB | 	rdlong	local07, fp
3251c     0C 4E 05 F1 | 	add	fp, #12
32520     A7 26 C2 FA | 	rdbyte	local01, fp
32524     10 4E 85 F1 | 	sub	fp, #16
32528     2B 32 06 F1 | 	add	local07, #43
3252c     19 27 42 FC | 	wrbyte	local01, local07
32530                 | ' 	}
32530                 | ' 
32530                 | ' 	dp->fn[ 11 ] = cf;
32530                 | ' 
32530                 | ' 	return FR_OK;
32530     00 FA 05 F6 | 	mov	result1, #0
32534                 | LR__4910
32534     A7 F0 03 F6 | 	mov	ptra, fp
32538     B2 00 A0 FD | 	call	#popregs_
3253c                 | _fatfs_cc_create_name_ret
3253c     2D 00 64 FD | 	ret
32540                 | 
32540                 | _fatfs_cc_follow_path
32540     02 4A 05 F6 | 	mov	COUNT_, #2
32544     A8 00 A0 FD | 	call	#pushregs_
32548     18 F0 07 F1 | 	add	ptra, #24
3254c     04 4E 05 F1 | 	add	fp, #4
32550     A7 12 62 FC | 	wrlong	arg01, fp
32554     04 4E 05 F1 | 	add	fp, #4
32558     A7 14 62 FC | 	wrlong	arg02, fp
3255c     04 4E 85 F1 | 	sub	fp, #4
32560     A7 FA 01 FB | 	rdlong	result1, fp
32564     FD 26 02 FB | 	rdlong	local01, result1
32568     10 4E 05 F1 | 	add	fp, #16
3256c     A7 26 62 FC | 	wrlong	local01, fp
32570     14 4E 85 F1 | 	sub	fp, #20
32574     97 24 48 FB | 	callpa	#(@LR__4922-@LR__4920)>>2,fcache_load_ptr_
32578                 | ' )
32578                 | ' {
32578                 | ' 	FRESULT res;
32578                 | ' 	BYTE ns;
32578                 | ' 	FATFS *fs = dp->obj.fs;
32578                 | ' #line 3034 "ff.c"
32578                 | ' 	{
32578                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
32578                 | LR__4920
32578     08 4E 05 F1 | 	add	fp, #8
3257c     A7 26 02 FB | 	rdlong	local01, fp
32580     08 4E 85 F1 | 	sub	fp, #8
32584     13 27 C2 FA | 	rdbyte	local01, local01
32588     2F 26 0E F2 | 	cmp	local01, #47 wz
3258c     18 00 90 AD |  if_e	jmp	#LR__4921
32590     08 4E 05 F1 | 	add	fp, #8
32594     A7 26 02 FB | 	rdlong	local01, fp
32598     08 4E 85 F1 | 	sub	fp, #8
3259c     13 27 C2 FA | 	rdbyte	local01, local01
325a0     5C 26 0E F2 | 	cmp	local01, #92 wz
325a4     18 00 90 5D |  if_ne	jmp	#LR__4923
325a8                 | LR__4921
325a8     08 4E 05 F1 | 	add	fp, #8
325ac     A7 26 02 FB | 	rdlong	local01, fp
325b0     01 26 06 F1 | 	add	local01, #1
325b4     A7 26 62 FC | 	wrlong	local01, fp
325b8     08 4E 85 F1 | 	sub	fp, #8
325bc     B8 FF 9F FD | 	jmp	#LR__4920
325c0                 | LR__4922
325c0                 | LR__4923
325c0     04 4E 05 F1 | 	add	fp, #4
325c4     A7 26 02 FB | 	rdlong	local01, fp
325c8     08 26 06 F1 | 	add	local01, #8
325cc     13 01 68 FC | 	wrlong	#0, local01
325d0     04 4E 05 F1 | 	add	fp, #4
325d4     A7 26 02 FB | 	rdlong	local01, fp
325d8     08 4E 85 F1 | 	sub	fp, #8
325dc     13 27 C2 FA | 	rdbyte	local01, local01
325e0     20 26 16 F2 | 	cmp	local01, #32 wc
325e4     30 00 90 3D |  if_ae	jmp	#LR__4924
325e8     04 4E 05 F1 | 	add	fp, #4
325ec     A7 26 02 FB | 	rdlong	local01, fp
325f0     2B 26 06 F1 | 	add	local01, #43
325f4     13 01 49 FC | 	wrbyte	#128, local01
325f8     A7 12 02 FB | 	rdlong	arg01, fp
325fc     04 4E 85 F1 | 	sub	fp, #4
32600     00 14 06 F6 | 	mov	arg02, #0
32604     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
32608     0C 4E 05 F1 | 	add	fp, #12
3260c     A7 FA 61 FC | 	wrlong	result1, fp
32610     0C 4E 85 F1 | 	sub	fp, #12
32614     1C 01 90 FD | 	jmp	#LR__4928
32618                 | LR__4924
32618                 | ' 		for (;;) {
32618                 | LR__4925
32618     04 4E 05 F1 | 	add	fp, #4
3261c     A7 12 02 FB | 	rdlong	arg01, fp
32620     04 4E 05 F1 | 	add	fp, #4
32624     A7 14 02 F6 | 	mov	arg02, fp
32628     08 4E 85 F1 | 	sub	fp, #8
3262c     14 F6 BF FD | 	call	#_fatfs_cc_create_name
32630     0C 4E 05 F1 | 	add	fp, #12
32634     A7 FA 61 FC | 	wrlong	result1, fp
32638     00 FA 4D F2 | 	cmps	result1, #0 wz
3263c     0C 4E 85 F1 | 	sub	fp, #12
32640     F0 00 90 5D |  if_ne	jmp	#LR__4927
32644     04 4E 05 F1 | 	add	fp, #4
32648     A7 12 02 FB | 	rdlong	arg01, fp
3264c     04 4E 85 F1 | 	sub	fp, #4
32650     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
32654     0C 4E 05 F1 | 	add	fp, #12
32658     A7 FA 61 FC | 	wrlong	result1, fp
3265c     08 4E 85 F1 | 	sub	fp, #8
32660     A7 26 02 FB | 	rdlong	local01, fp
32664     2B 26 06 F1 | 	add	local01, #43
32668     13 27 C2 FA | 	rdbyte	local01, local01
3266c     0C 4E 05 F1 | 	add	fp, #12
32670     A7 26 42 FC | 	wrbyte	local01, fp
32674     04 4E 85 F1 | 	sub	fp, #4
32678     A7 26 0A FB | 	rdlong	local01, fp wz
3267c     0C 4E 85 F1 | 	sub	fp, #12
32680     34 00 90 AD |  if_e	jmp	#LR__4926
32684     0C 4E 05 F1 | 	add	fp, #12
32688     A7 26 02 FB | 	rdlong	local01, fp
3268c     0C 4E 85 F1 | 	sub	fp, #12
32690     04 26 0E F2 | 	cmp	local01, #4 wz
32694     9C 00 90 5D |  if_ne	jmp	#LR__4927
32698     10 4E 05 F1 | 	add	fp, #16
3269c     A7 26 C2 FA | 	rdbyte	local01, fp
326a0     10 4E 85 F1 | 	sub	fp, #16
326a4     04 26 CE F7 | 	test	local01, #4 wz
326a8     0C 4E 05 A1 |  if_e	add	fp, #12
326ac     A7 0A 68 AC |  if_e	wrlong	#5, fp
326b0     0C 4E 85 A1 |  if_e	sub	fp, #12
326b4                 | ' 					}
326b4                 | ' 				}
326b4                 | ' 				break;
326b4     7C 00 90 FD | 	jmp	#LR__4927
326b8                 | LR__4926
326b8     10 4E 05 F1 | 	add	fp, #16
326bc     A7 26 C2 FA | 	rdbyte	local01, fp
326c0     10 4E 85 F1 | 	sub	fp, #16
326c4     04 26 CE F7 | 	test	local01, #4 wz
326c8     68 00 90 5D |  if_ne	jmp	#LR__4927
326cc     04 4E 05 F1 | 	add	fp, #4
326d0     A7 26 02 FB | 	rdlong	local01, fp
326d4     04 4E 85 F1 | 	sub	fp, #4
326d8     06 26 06 F1 | 	add	local01, #6
326dc     13 27 C2 FA | 	rdbyte	local01, local01
326e0     10 26 CE F7 | 	test	local01, #16 wz
326e4     0C 4E 05 A1 |  if_e	add	fp, #12
326e8     A7 0A 68 AC |  if_e	wrlong	#5, fp
326ec     0C 4E 85 A1 |  if_e	sub	fp, #12
326f0                 | ' 				res = FR_NO_PATH; break;
326f0     40 00 90 AD |  if_e	jmp	#LR__4927
326f4     04 4E 05 F1 | 	add	fp, #4
326f8     A7 28 02 FB | 	rdlong	local02, fp
326fc     14 27 02 F6 | 	mov	local01, local02
32700     10 4E 05 F1 | 	add	fp, #16
32704     A7 14 02 FB | 	rdlong	arg02, fp
32708     0A 13 02 F6 | 	mov	arg01, arg02
3270c     34 14 06 F1 | 	add	arg02, #52
32710     14 4E 85 F1 | 	sub	fp, #20
32714     10 28 06 F1 | 	add	local02, #16
32718     14 29 02 FB | 	rdlong	local02, local02
3271c     FF 29 06 F5 | 	and	local02, #511
32720     14 15 02 F1 | 	add	arg02, local02
32724     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
32728     08 26 06 F1 | 	add	local01, #8
3272c     13 FB 61 FC | 	wrlong	result1, local01
32730     E4 FE 9F FD | 	jmp	#LR__4925
32734                 | LR__4927
32734                 | LR__4928
32734                 | ' 			}
32734                 | ' #line 3090 "ff.c"
32734                 | ' 			{
32734                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
32734                 | ' 			}
32734                 | ' 		}
32734                 | ' 	}
32734                 | ' 
32734                 | ' 	return res;
32734     0C 4E 05 F1 | 	add	fp, #12
32738     A7 FA 01 FB | 	rdlong	result1, fp
3273c     0C 4E 85 F1 | 	sub	fp, #12
32740     A7 F0 03 F6 | 	mov	ptra, fp
32744     B2 00 A0 FD | 	call	#popregs_
32748                 | _fatfs_cc_follow_path_ret
32748     2D 00 64 FD | 	ret
3274c                 | 
3274c                 | _fatfs_cc_get_ldnumber
3274c     01 00 66 F6 | 	neg	_var01, #1
32750     09 03 0A FB | 	rdlong	_var02, arg01 wz
32754     01 05 02 F6 | 	mov	_var03, _var02
32758     01 FA 65 A6 |  if_e	neg	result1, #1
3275c     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
32760     97 10 48 FB | 	callpa	#(@LR__4931-@LR__4930)>>2,fcache_load_ptr_
32764                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
32764                 | LR__4930
32764     02 07 C2 FA | 	rdbyte	_var04, _var03
32768     03 FB E1 F8 | 	getbyte	result1, _var04, #0
3276c     20 FA 15 F2 | 	cmp	result1, #32 wc
32770     01 04 06 F1 | 	add	_var03, #1
32774     03 09 02 36 |  if_ae	mov	_var05, _var04
32778     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
3277c     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
32780     E0 FF 9F 1D |  if_a	jmp	#LR__4930
32784                 | LR__4931
32784     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
32788     3A 06 0E F2 | 	cmp	_var04, #58 wz
3278c     40 00 90 5D |  if_ne	jmp	#LR__4933
32790     01 0A 06 F6 | 	mov	_var06, #1
32794     01 09 C2 FA | 	rdbyte	_var05, _var02
32798     30 08 16 F2 | 	cmp	_var05, #48 wc
3279c     1C 00 90 CD |  if_b	jmp	#LR__4932
327a0     01 09 C2 FA | 	rdbyte	_var05, _var02
327a4     3A 08 16 F2 | 	cmp	_var05, #58 wc
327a8     01 0D 02 C6 |  if_b	mov	_var07, _var02
327ac     02 0C 06 C1 |  if_b	add	_var07, #2
327b0     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
327b4     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
327b8     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
327bc                 | LR__4932
327bc     01 0A 56 F2 | 	cmps	_var06, #1 wc
327c0     05 01 02 C6 |  if_b	mov	_var01, _var06
327c4     09 05 62 CC |  if_b	wrlong	_var03, arg01
327c8                 | ' 			vol = i;
327c8                 | ' 			*path = tt;
327c8                 | ' 		}
327c8                 | ' 		return vol;
327c8     00 FB 01 F6 | 	mov	result1, _var01
327cc     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
327d0                 | LR__4933
327d0                 | ' 	}
327d0                 | ' #line 3170 "ff.c"
327d0                 | ' 	vol = 0;
327d0                 | ' 
327d0                 | ' 	return vol;
327d0     00 FA 05 F6 | 	mov	result1, #0
327d4                 | _fatfs_cc_get_ldnumber_ret
327d4     2D 00 64 FD | 	ret
327d8                 | 
327d8                 | _fatfs_cc_check_fs
327d8     04 4A 05 F6 | 	mov	COUNT_, #4
327dc     A8 00 A0 FD | 	call	#pushregs_
327e0     09 27 02 F6 | 	mov	local01, arg01
327e4     03 26 06 F1 | 	add	local01, #3
327e8     13 01 48 FC | 	wrbyte	#0, local01
327ec     2D 26 06 F1 | 	add	local01, #45
327f0     FF FF FF FF 
327f4     13 FF 6B FC | 	wrlong	##-1, local01
327f8     30 26 86 F1 | 	sub	local01, #48
327fc     13 13 02 F6 | 	mov	arg01, local01
32800     18 D5 BF FD | 	call	#_fatfs_cc_move_window
32804     00 FA 0D F2 | 	cmp	result1, #0 wz
32808     04 FA 05 56 |  if_ne	mov	result1, #4
3280c     94 01 90 5D |  if_ne	jmp	#LR__4944
32810     34 26 06 F1 | 	add	local01, #52
32814     13 13 02 F6 | 	mov	arg01, local01
32818     FE 13 06 F1 | 	add	arg01, #510
3281c                 | ' {
3281c                 | ' 
3281c                 | ' 	return *((WORD*)ptr);
3281c     09 29 E2 FA | 	rdword	local02, arg01
32820     13 2B C2 FA | 	rdbyte	local03, local01
32824     34 26 86 F1 | 	sub	local01, #52
32828     15 2D E2 F8 | 	getbyte	local04, local03, #0
3282c     EB 2C 0E F2 | 	cmp	local04, #235 wz
32830     15 17 02 56 |  if_ne	mov	arg03, local03
32834     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
32838     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
3283c     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
32840     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
32844     44 01 90 5D |  if_ne	jmp	#LR__4943
32848     14 2D 32 F9 | 	getword	local04, local02, #0
3284c     55 00 00 FF 
32850     55 2C 0E F2 | 	cmp	local04, ##43605 wz
32854     2C 00 90 5D |  if_ne	jmp	#LR__4940
32858     34 26 06 F1 | 	add	local01, #52
3285c     13 13 02 F6 | 	mov	arg01, local01
32860     34 26 86 F1 | 	sub	local01, #52
32864     52 12 06 F1 | 	add	arg01, #82
32868     BE 01 00 FF 
3286c     B4 14 06 F6 | 	mov	arg02, ##@LR__5534
32870     08 16 06 F6 | 	mov	arg03, #8
32874     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
32878     00 FA 0D F2 | 	cmp	result1, #0 wz
3287c                 | ' 			return 0;
3287c     00 FA 05 A6 |  if_e	mov	result1, #0
32880     20 01 90 AD |  if_e	jmp	#LR__4944
32884                 | LR__4940
32884     34 26 06 F1 | 	add	local01, #52
32888     13 13 02 F6 | 	mov	arg01, local01
3288c     0B 12 06 F1 | 	add	arg01, #11
32890                 | ' {
32890                 | ' 
32890                 | ' 	return *((WORD*)ptr);
32890     09 FB E1 FA | 	rdword	result1, arg01
32894     0D 26 06 F1 | 	add	local01, #13
32898     13 2B C2 FA | 	rdbyte	local03, local01
3289c     41 26 86 F1 | 	sub	local01, #65
328a0     FD 2C 32 F9 | 	getword	local04, result1, #0
328a4     FD 14 32 F9 | 	getword	arg02, result1, #0
328a8     01 14 86 F1 | 	sub	arg02, #1
328ac     0A 2D CA F7 | 	test	local04, arg02 wz
328b0     D8 00 90 5D |  if_ne	jmp	#LR__4942
328b4     FD 14 32 F9 | 	getword	arg02, result1, #0
328b8     01 00 00 FF 
328bc     00 14 16 F2 | 	cmp	arg02, ##512 wc
328c0     C8 00 90 CD |  if_b	jmp	#LR__4942
328c4     FD 14 32 F9 | 	getword	arg02, result1, #0
328c8     01 00 00 FF 
328cc     01 14 16 F2 | 	cmp	arg02, ##513 wc
328d0     B8 00 90 3D |  if_ae	jmp	#LR__4942
328d4     15 13 02 F6 | 	mov	arg01, local03
328d8     07 12 4E F7 | 	zerox	arg01, #7 wz
328dc     AC 00 90 AD |  if_e	jmp	#LR__4942
328e0     15 13 E2 F8 | 	getbyte	arg01, local03, #0
328e4     15 2B E2 F8 | 	getbyte	local03, local03, #0
328e8     01 2A 86 F1 | 	sub	local03, #1
328ec     15 13 CA F7 | 	test	arg01, local03 wz
328f0     98 00 90 5D |  if_ne	jmp	#LR__4942
328f4     34 26 06 F1 | 	add	local01, #52
328f8     13 13 02 F6 | 	mov	arg01, local01
328fc     34 26 86 F1 | 	sub	local01, #52
32900     0E 12 06 F1 | 	add	arg01, #14
32904                 | ' {
32904                 | ' 
32904                 | ' 	return *((WORD*)ptr);
32904     09 FB E9 FA | 	rdword	result1, arg01 wz
32908     80 00 90 AD |  if_e	jmp	#LR__4942
3290c     44 26 06 F1 | 	add	local01, #68
32910     13 13 C2 FA | 	rdbyte	arg01, local01
32914     44 26 86 F1 | 	sub	local01, #68
32918     01 12 86 F1 | 	sub	arg01, #1
3291c     02 12 16 F2 | 	cmp	arg01, #2 wc
32920     68 00 90 3D |  if_ae	jmp	#LR__4942
32924     34 26 06 F1 | 	add	local01, #52
32928     13 13 02 F6 | 	mov	arg01, local01
3292c     34 26 86 F1 | 	sub	local01, #52
32930     11 12 06 F1 | 	add	arg01, #17
32934                 | ' {
32934                 | ' 
32934                 | ' 	return *((WORD*)ptr);
32934     09 FB E9 FA | 	rdword	result1, arg01 wz
32938     50 00 90 AD |  if_e	jmp	#LR__4942
3293c     34 26 06 F1 | 	add	local01, #52
32940     13 13 02 F6 | 	mov	arg01, local01
32944     34 26 86 F1 | 	sub	local01, #52
32948     13 12 06 F1 | 	add	arg01, #19
3294c                 | ' {
3294c                 | ' 
3294c                 | ' 	return *((WORD*)ptr);
3294c     09 FB E1 FA | 	rdword	result1, arg01
32950     FD 2A 32 F9 | 	getword	local03, result1, #0
32954     80 2A 16 F2 | 	cmp	local03, #128 wc
32958     20 00 90 3D |  if_ae	jmp	#LR__4941
3295c     34 26 06 F1 | 	add	local01, #52
32960     13 13 02 F6 | 	mov	arg01, local01
32964     34 26 86 F1 | 	sub	local01, #52
32968     20 12 06 F1 | 	add	arg01, #32
3296c                 | ' {
3296c                 | ' 
3296c                 | ' 	return *((DWORD*)ptr);
3296c     09 FB 01 FB | 	rdlong	result1, arg01
32970     80 00 00 FF 
32974     00 FA 15 F2 | 	cmp	result1, ##65536 wc
32978     10 00 90 CD |  if_b	jmp	#LR__4942
3297c                 | LR__4941
3297c     4A 26 06 F1 | 	add	local01, #74
32980                 | ' {
32980                 | ' 
32980                 | ' 	return *((WORD*)ptr);
32980     13 FB E9 FA | 	rdword	result1, local01 wz
32984                 | ' 			&& b != 0 && (b & (b - 1)) == 0
32984                 | ' 			&& ld_word(fs->win +  14 ) != 0
32984                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
32984                 | ' 			&& ld_word(fs->win +  17 ) != 0
32984                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
32984                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
32984                 | ' 				return 0;
32984     00 FA 05 56 |  if_ne	mov	result1, #0
32988     18 00 90 5D |  if_ne	jmp	#LR__4944
3298c                 | LR__4942
3298c                 | LR__4943
3298c                 | ' 		}
3298c                 | ' 	}
3298c                 | ' 	return sign == 0xAA55 ? 2 : 3;
3298c     14 2B 32 F9 | 	getword	local03, local02, #0
32990     55 00 00 FF 
32994     55 2A 0E F2 | 	cmp	local03, ##43605 wz
32998     02 2C 06 A6 |  if_e	mov	local04, #2
3299c     03 2C 06 56 |  if_ne	mov	local04, #3
329a0     16 FB 01 F6 | 	mov	result1, local04
329a4                 | LR__4944
329a4     A7 F0 03 F6 | 	mov	ptra, fp
329a8     B2 00 A0 FD | 	call	#popregs_
329ac                 | _fatfs_cc_check_fs_ret
329ac     2D 00 64 FD | 	ret
329b0                 | 
329b0                 | _fatfs_cc_find_volume
329b0     05 4A 05 F6 | 	mov	COUNT_, #5
329b4     A8 00 A0 FD | 	call	#pushregs_
329b8     24 F0 07 F1 | 	add	ptra, #36
329bc     09 27 02 F6 | 	mov	local01, arg01
329c0     0A 29 02 F6 | 	mov	local02, arg02
329c4     13 13 02 F6 | 	mov	arg01, local01
329c8     00 14 06 F6 | 	mov	arg02, #0
329cc     08 FE BF FD | 	call	#_fatfs_cc_check_fs
329d0     02 FA 0D F2 | 	cmp	result1, #2 wz
329d4     0C 00 90 AD |  if_e	jmp	#LR__4950
329d8     03 FA 15 F2 | 	cmp	result1, #3 wc
329dc     00 28 0E C2 |  if_b	cmp	local02, #0 wz
329e0     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4958
329e4                 | LR__4950
329e4                 | ' 	for (i = 0; i < 4; i++) {
329e4     00 2A 06 F6 | 	mov	local03, #0
329e8     97 26 48 FB | 	callpa	#(@LR__4952-@LR__4951)>>2,fcache_load_ptr_
329ec                 | LR__4951
329ec     04 2A 16 F2 | 	cmp	local03, #4 wc
329f0     44 00 90 3D |  if_ae	jmp	#LR__4953
329f4     15 2D 02 F6 | 	mov	local04, local03
329f8     02 2C 66 F0 | 	shl	local04, #2
329fc     14 4E 05 F1 | 	add	fp, #20
32a00     A7 2C 02 F1 | 	add	local04, fp
32a04     34 26 06 F1 | 	add	local01, #52
32a08     13 13 02 F6 | 	mov	arg01, local01
32a0c     34 26 86 F1 | 	sub	local01, #52
32a10     BE 13 06 F1 | 	add	arg01, #446
32a14     15 15 02 F6 | 	mov	arg02, local03
32a18     04 14 66 F0 | 	shl	arg02, #4
32a1c     0A 13 02 F1 | 	add	arg01, arg02
32a20     08 12 06 F1 | 	add	arg01, #8
32a24                 | ' {
32a24                 | ' 
32a24                 | ' 	return *((DWORD*)ptr);
32a24     09 FB 01 FB | 	rdlong	result1, arg01
32a28     14 4E 85 F1 | 	sub	fp, #20
32a2c     16 FB 61 FC | 	wrlong	result1, local04
32a30     01 2A 06 F1 | 	add	local03, #1
32a34     B4 FF 9F FD | 	jmp	#LR__4951
32a38                 | LR__4952
32a38                 | LR__4953
32a38     00 28 0E F2 | 	cmp	local02, #0 wz
32a3c     14 2D 02 56 |  if_ne	mov	local04, local02
32a40     01 2C 86 51 |  if_ne	sub	local04, #1
32a44     00 2C 06 A6 |  if_e	mov	local04, #0
32a48     16 2B 02 F6 | 	mov	local03, local04
32a4c                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
32a4c                 | ' 	}
32a4c                 | ' 	i = part ? part - 1 : 0;
32a4c                 | ' 	do {
32a4c                 | LR__4954
32a4c     15 2D 02 F6 | 	mov	local04, local03
32a50     02 2C 66 F0 | 	shl	local04, #2
32a54     14 4E 05 F1 | 	add	fp, #20
32a58     A7 2C 02 F1 | 	add	local04, fp
32a5c     16 2D 0A FB | 	rdlong	local04, local04 wz
32a60     14 4E 85 F1 | 	sub	fp, #20
32a64     28 00 90 AD |  if_e	jmp	#LR__4955
32a68     15 2D 02 F6 | 	mov	local04, local03
32a6c     02 2C 66 F0 | 	shl	local04, #2
32a70     14 4E 05 F1 | 	add	fp, #20
32a74     A7 2C 02 F1 | 	add	local04, fp
32a78     16 15 02 FB | 	rdlong	arg02, local04
32a7c     13 13 02 F6 | 	mov	arg01, local01
32a80     14 4E 85 F1 | 	sub	fp, #20
32a84     50 FD BF FD | 	call	#_fatfs_cc_check_fs
32a88     FD 2C 02 F6 | 	mov	local04, result1
32a8c     04 00 90 FD | 	jmp	#LR__4956
32a90                 | LR__4955
32a90     03 2C 06 F6 | 	mov	local04, #3
32a94                 | LR__4956
32a94     16 2F 02 F6 | 	mov	local05, local04
32a98     00 28 0E F2 | 	cmp	local02, #0 wz
32a9c     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
32aa0     0C 00 90 8D |  if_c_and_z	jmp	#LR__4957
32aa4     01 2A 06 A1 |  if_e	add	local03, #1
32aa8     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
32aac     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4954
32ab0                 | LR__4957
32ab0                 | ' 	return fmt;
32ab0     17 FB 01 F6 | 	mov	result1, local05
32ab4                 | LR__4958
32ab4     A7 F0 03 F6 | 	mov	ptra, fp
32ab8     B2 00 A0 FD | 	call	#popregs_
32abc                 | _fatfs_cc_find_volume_ret
32abc     2D 00 64 FD | 	ret
32ac0                 | 
32ac0                 | _fatfs_cc_mount_volume
32ac0     0B 4A 05 F6 | 	mov	COUNT_, #11
32ac4     A8 00 A0 FD | 	call	#pushregs_
32ac8     0A 27 02 F6 | 	mov	local01, arg02
32acc     0B 29 02 F6 | 	mov	local02, arg03
32ad0     13 01 68 FC | 	wrlong	#0, local01
32ad4     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
32ad8     FD 2A 02 F6 | 	mov	local03, result1
32adc     00 2A 56 F2 | 	cmps	local03, #0 wc
32ae0     0B FA 05 C6 |  if_b	mov	result1, #11
32ae4     3C 05 90 CD |  if_b	jmp	#LR__4970
32ae8     15 17 02 F6 | 	mov	arg03, local03
32aec     02 16 66 F0 | 	shl	arg03, #2
32af0     F2 16 02 F1 | 	add	arg03, objptr
32af4     0B 2D 0A FB | 	rdlong	local04, arg03 wz
32af8     0C FA 05 A6 |  if_e	mov	result1, #12
32afc     24 05 90 AD |  if_e	jmp	#LR__4970
32b00     13 2D 62 FC | 	wrlong	local04, local01
32b04     14 29 E2 F8 | 	getbyte	local02, local02, #0
32b08     FE 28 06 F5 | 	and	local02, #254
32b0c     16 17 CA FA | 	rdbyte	arg03, local04 wz
32b10     4C 00 90 AD |  if_e	jmp	#LR__4961
32b14     01 2C 06 F1 | 	add	local04, #1
32b18     16 13 CA FA | 	rdbyte	arg01, local04 wz
32b1c     01 2C 86 F1 | 	sub	local04, #1
32b20     01 FA 05 56 |  if_ne	mov	result1, #1
32b24                 | ' 
32b24                 | ' 	return Stat;
32b24     01 00 00 AF 
32b28     20 E4 05 A1 |  if_e	add	objptr, ##544
32b2c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
32b30     01 00 00 AF 
32b34     20 E4 85 A1 |  if_e	sub	objptr, ##544
32b38     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
32b3c     01 16 CE F7 | 	test	arg03, #1 wz
32b40     1C 00 90 5D |  if_ne	jmp	#LR__4960
32b44     00 28 0E F2 | 	cmp	local02, #0 wz
32b48     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
32b4c     04 FA CD 57 |  if_ne	test	result1, #4 wz
32b50                 | ' 				return FR_WRITE_PROTECTED;
32b50     0A FA 05 56 |  if_ne	mov	result1, #10
32b54     CC 04 90 5D |  if_ne	jmp	#LR__4970
32b58                 | ' 			}
32b58                 | ' 			return FR_OK;
32b58     00 FA 05 F6 | 	mov	result1, #0
32b5c     C4 04 90 FD | 	jmp	#LR__4970
32b60                 | LR__4960
32b60                 | LR__4961
32b60     16 01 48 FC | 	wrbyte	#0, local04
32b64     01 2C 06 F1 | 	add	local04, #1
32b68     16 2B 42 FC | 	wrbyte	local03, local04
32b6c     16 13 C2 FA | 	rdbyte	arg01, local04
32b70     01 2C 86 F1 | 	sub	local04, #1
32b74     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
32b78     FD 16 02 F6 | 	mov	arg03, result1
32b7c     0B 2F E2 F8 | 	getbyte	local05, arg03, #0
32b80     01 2E CE F7 | 	test	local05, #1 wz
32b84                 | ' 		return FR_NOT_READY;
32b84     03 FA 05 56 |  if_ne	mov	result1, #3
32b88     98 04 90 5D |  if_ne	jmp	#LR__4970
32b8c     00 28 0E F2 | 	cmp	local02, #0 wz
32b90     0B 2F 02 56 |  if_ne	mov	local05, arg03
32b94     17 2F E2 58 |  if_ne	getbyte	local05, local05, #0
32b98     04 2E CE 57 |  if_ne	test	local05, #4 wz
32b9c                 | ' 		return FR_WRITE_PROTECTED;
32b9c     0A FA 05 56 |  if_ne	mov	result1, #10
32ba0     80 04 90 5D |  if_ne	jmp	#LR__4970
32ba4     16 13 02 F6 | 	mov	arg01, local04
32ba8     00 14 06 F6 | 	mov	arg02, #0
32bac     00 FE BF FD | 	call	#_fatfs_cc_find_volume
32bb0     FD 12 02 F6 | 	mov	arg01, result1
32bb4     04 12 0E F2 | 	cmp	arg01, #4 wz
32bb8     01 FA 05 A6 |  if_e	mov	result1, #1
32bbc     64 04 90 AD |  if_e	jmp	#LR__4970
32bc0     02 12 16 F2 | 	cmp	arg01, #2 wc
32bc4     0D FA 05 36 |  if_ae	mov	result1, #13
32bc8     58 04 90 3D |  if_ae	jmp	#LR__4970
32bcc     30 2C 06 F1 | 	add	local04, #48
32bd0     16 31 02 FB | 	rdlong	local06, local04
32bd4     04 2C 06 F1 | 	add	local04, #4
32bd8     16 13 02 F6 | 	mov	arg01, local04
32bdc     34 2C 86 F1 | 	sub	local04, #52
32be0     0B 12 06 F1 | 	add	arg01, #11
32be4                 | ' {
32be4                 | ' 
32be4                 | ' 	return *((WORD*)ptr);
32be4     09 FB E1 FA | 	rdword	result1, arg01
32be8     01 00 00 FF 
32bec     00 FA 0D F2 | 	cmp	result1, ##512 wz
32bf0     0D FA 05 56 |  if_ne	mov	result1, #13
32bf4     2C 04 90 5D |  if_ne	jmp	#LR__4970
32bf8     34 2C 06 F1 | 	add	local04, #52
32bfc     16 13 02 F6 | 	mov	arg01, local04
32c00     34 2C 86 F1 | 	sub	local04, #52
32c04     16 12 06 F1 | 	add	arg01, #22
32c08                 | ' {
32c08                 | ' 
32c08                 | ' 	return *((WORD*)ptr);
32c08     09 FB E1 FA | 	rdword	result1, arg01
32c0c     FD 32 0A F6 | 	mov	local07, result1 wz
32c10     18 00 90 5D |  if_ne	jmp	#LR__4962
32c14     34 2C 06 F1 | 	add	local04, #52
32c18     16 13 02 F6 | 	mov	arg01, local04
32c1c     34 2C 86 F1 | 	sub	local04, #52
32c20     24 12 06 F1 | 	add	arg01, #36
32c24                 | ' {
32c24                 | ' 
32c24                 | ' 	return *((DWORD*)ptr);
32c24     09 FB 01 FB | 	rdlong	result1, arg01
32c28     FD 32 02 F6 | 	mov	local07, result1
32c2c                 | LR__4962
32c2c     1C 2C 06 F1 | 	add	local04, #28
32c30     16 33 62 FC | 	wrlong	local07, local04
32c34     28 2C 06 F1 | 	add	local04, #40
32c38     16 2F C2 FA | 	rdbyte	local05, local04
32c3c     42 2C 86 F1 | 	sub	local04, #66
32c40     16 2F 42 FC | 	wrbyte	local05, local04
32c44     16 2F C2 FA | 	rdbyte	local05, local04
32c48     02 2C 86 F1 | 	sub	local04, #2
32c4c     01 2E 0E F2 | 	cmp	local05, #1 wz
32c50     02 2C 06 51 |  if_ne	add	local04, #2
32c54     16 2F C2 5A |  if_ne	rdbyte	local05, local04
32c58     02 2C 86 51 |  if_ne	sub	local04, #2
32c5c     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
32c60     0D FA 05 56 |  if_ne	mov	result1, #13
32c64     BC 03 90 5D |  if_ne	jmp	#LR__4970
32c68     02 2C 06 F1 | 	add	local04, #2
32c6c     16 2F C2 FA | 	rdbyte	local05, local04
32c70     17 33 02 FD | 	qmul	local07, local05
32c74     3F 2C 06 F1 | 	add	local04, #63
32c78     16 2F C2 FA | 	rdbyte	local05, local04
32c7c     37 2C 86 F1 | 	sub	local04, #55
32c80     16 2F 52 FC | 	wrword	local05, local04
32c84     16 2F EA FA | 	rdword	local05, local04 wz
32c88     0A 2C 86 F1 | 	sub	local04, #10
32c8c     18 32 62 FD | 	getqx	local07
32c90     20 00 90 AD |  if_e	jmp	#LR__4963
32c94     0A 2C 06 F1 | 	add	local04, #10
32c98     16 2F E2 FA | 	rdword	local05, local04
32c9c     17 2B 32 F9 | 	getword	local03, local05, #0
32ca0     0A 2C 86 F1 | 	sub	local04, #10
32ca4     17 2F 32 F9 | 	getword	local05, local05, #0
32ca8     01 2E 86 F1 | 	sub	local05, #1
32cac     17 2B CA F7 | 	test	local03, local05 wz
32cb0     08 00 90 AD |  if_e	jmp	#LR__4964
32cb4                 | LR__4963
32cb4     0D FA 05 F6 | 	mov	result1, #13
32cb8     68 03 90 FD | 	jmp	#LR__4970
32cbc                 | LR__4964
32cbc     34 2C 06 F1 | 	add	local04, #52
32cc0     16 13 02 F6 | 	mov	arg01, local04
32cc4     11 12 06 F1 | 	add	arg01, #17
32cc8                 | ' {
32cc8                 | ' 
32cc8                 | ' 	return *((WORD*)ptr);
32cc8     09 FB E1 FA | 	rdword	result1, arg01
32ccc     2C 2C 86 F1 | 	sub	local04, #44
32cd0     16 FB 51 FC | 	wrword	result1, local04
32cd4     16 2F E2 FA | 	rdword	local05, local04
32cd8     08 2C 86 F1 | 	sub	local04, #8
32cdc     17 13 52 F6 | 	abs	arg01, local05 wc
32ce0     09 13 42 F8 | 	getnib	arg01, arg01, #0
32ce4     09 13 8A F6 | 	negc	arg01, arg01 wz
32ce8     0D FA 05 56 |  if_ne	mov	result1, #13
32cec     34 03 90 5D |  if_ne	jmp	#LR__4970
32cf0     34 2C 06 F1 | 	add	local04, #52
32cf4     16 13 02 F6 | 	mov	arg01, local04
32cf8     34 2C 86 F1 | 	sub	local04, #52
32cfc     13 12 06 F1 | 	add	arg01, #19
32d00                 | ' {
32d00                 | ' 
32d00                 | ' 	return *((WORD*)ptr);
32d00     09 FB E1 FA | 	rdword	result1, arg01
32d04     FD 34 0A F6 | 	mov	local08, result1 wz
32d08     34 2C 06 A1 |  if_e	add	local04, #52
32d0c     16 13 02 A6 |  if_e	mov	arg01, local04
32d10     34 2C 86 A1 |  if_e	sub	local04, #52
32d14     20 12 06 A1 |  if_e	add	arg01, #32
32d18                 | ' {
32d18                 | ' 
32d18                 | ' 	return *((DWORD*)ptr);
32d18     09 35 02 AB |  if_e	rdlong	local08, arg01
32d1c     34 2C 06 F1 | 	add	local04, #52
32d20     16 13 02 F6 | 	mov	arg01, local04
32d24     34 2C 86 F1 | 	sub	local04, #52
32d28     0E 12 06 F1 | 	add	arg01, #14
32d2c                 | ' {
32d2c                 | ' 
32d2c                 | ' 	return *((WORD*)ptr);
32d2c     09 FB E1 FA | 	rdword	result1, arg01
32d30     FD 12 02 F6 | 	mov	arg01, result1
32d34     09 2F 02 F6 | 	mov	local05, arg01
32d38     0F 2E 4E F7 | 	zerox	local05, #15 wz
32d3c     0D FA 05 A6 |  if_e	mov	result1, #13
32d40     E0 02 90 AD |  if_e	jmp	#LR__4970
32d44     09 37 32 F9 | 	getword	local09, arg01, #0
32d48     19 37 02 F1 | 	add	local09, local07
32d4c     08 2C 06 F1 | 	add	local04, #8
32d50     16 2F E2 FA | 	rdword	local05, local04
32d54     08 2C 86 F1 | 	sub	local04, #8
32d58     17 2F 52 F6 | 	abs	local05, local05 wc
32d5c     04 2E 46 F0 | 	shr	local05, #4
32d60     17 37 82 F3 | 	sumc	local09, local05
32d64     1B 35 12 F2 | 	cmp	local08, local09 wc
32d68     0D FA 05 C6 |  if_b	mov	result1, #13
32d6c     B4 02 90 CD |  if_b	jmp	#LR__4970
32d70     1B 35 82 F1 | 	sub	local08, local09
32d74     0A 2C 06 F1 | 	add	local04, #10
32d78     16 2F E2 FA | 	rdword	local05, local04
32d7c     17 35 12 FD | 	qdiv	local08, local05
32d80     0A 2C 86 F1 | 	sub	local04, #10
32d84     18 2E 62 FD | 	getqx	local05
32d88     00 2E 0E F2 | 	cmp	local05, #0 wz
32d8c     0D FA 05 A6 |  if_e	mov	result1, #13
32d90     90 02 90 AD |  if_e	jmp	#LR__4970
32d94     00 38 06 F6 | 	mov	local10, #0
32d98     FF FF 07 FF 
32d9c     F6 2F 16 F2 | 	cmp	local05, ##268435446 wc
32da0     03 38 06 C6 |  if_b	mov	local10, #3
32da4     7F 00 00 FF 
32da8     F6 2F 16 F2 | 	cmp	local05, ##65526 wc
32dac     02 38 06 C6 |  if_b	mov	local10, #2
32db0     07 00 00 FF 
32db4     F6 2F 16 F2 | 	cmp	local05, ##4086 wc
32db8     01 38 06 C6 |  if_b	mov	local10, #1
32dbc     00 38 0E F2 | 	cmp	local10, #0 wz
32dc0     0D FA 05 A6 |  if_e	mov	result1, #13
32dc4     5C 02 90 AD |  if_e	jmp	#LR__4970
32dc8     02 2E 06 F1 | 	add	local05, #2
32dcc     18 2C 06 F1 | 	add	local04, #24
32dd0     16 2F 62 FC | 	wrlong	local05, local04
32dd4     08 2C 06 F1 | 	add	local04, #8
32dd8     16 31 62 FC | 	wrlong	local06, local04
32ddc     18 2F 02 F6 | 	mov	local05, local06
32de0     09 13 32 F9 | 	getword	arg01, arg01, #0
32de4     09 2F 02 F1 | 	add	local05, arg01
32de8     04 2C 06 F1 | 	add	local04, #4
32dec     16 2F 62 FC | 	wrlong	local05, local04
32df0     18 2F 02 F6 | 	mov	local05, local06
32df4     1B 2F 02 F1 | 	add	local05, local09
32df8     08 2C 06 F1 | 	add	local04, #8
32dfc     16 2F 62 FC | 	wrlong	local05, local04
32e00     2C 2C 86 F1 | 	sub	local04, #44
32e04     03 38 0E F2 | 	cmp	local10, #3 wz
32e08     5C 00 90 5D |  if_ne	jmp	#LR__4965
32e0c     34 2C 06 F1 | 	add	local04, #52
32e10     16 13 02 F6 | 	mov	arg01, local04
32e14     34 2C 86 F1 | 	sub	local04, #52
32e18     2A 12 06 F1 | 	add	arg01, #42
32e1c                 | ' {
32e1c                 | ' 
32e1c                 | ' 	return *((WORD*)ptr);
32e1c     09 FB E9 FA | 	rdword	result1, arg01 wz
32e20     0D FA 05 56 |  if_ne	mov	result1, #13
32e24     FC 01 90 5D |  if_ne	jmp	#LR__4970
32e28     08 2C 06 F1 | 	add	local04, #8
32e2c     16 2F EA FA | 	rdword	local05, local04 wz
32e30     08 2C 86 F1 | 	sub	local04, #8
32e34     0D FA 05 56 |  if_ne	mov	result1, #13
32e38     E8 01 90 5D |  if_ne	jmp	#LR__4970
32e3c     34 2C 06 F1 | 	add	local04, #52
32e40     16 13 02 F6 | 	mov	arg01, local04
32e44     2C 12 06 F1 | 	add	arg01, #44
32e48                 | ' {
32e48                 | ' 
32e48                 | ' 	return *((DWORD*)ptr);
32e48     09 FB 01 FB | 	rdlong	result1, arg01
32e4c     0C 2C 86 F1 | 	sub	local04, #12
32e50     16 FB 61 FC | 	wrlong	result1, local04
32e54     10 2C 86 F1 | 	sub	local04, #16
32e58     16 3B 02 FB | 	rdlong	local11, local04
32e5c     18 2C 86 F1 | 	sub	local04, #24
32e60     02 3A 66 F0 | 	shl	local11, #2
32e64     6C 00 90 FD | 	jmp	#LR__4967
32e68                 | LR__4965
32e68     08 2C 06 F1 | 	add	local04, #8
32e6c     16 2F EA FA | 	rdword	local05, local04 wz
32e70     08 2C 86 F1 | 	sub	local04, #8
32e74     0D FA 05 A6 |  if_e	mov	result1, #13
32e78     A8 01 90 AD |  if_e	jmp	#LR__4970
32e7c     24 2C 06 F1 | 	add	local04, #36
32e80     16 2F 02 FB | 	rdlong	local05, local04
32e84     19 2F 02 F1 | 	add	local05, local07
32e88     04 2C 06 F1 | 	add	local04, #4
32e8c     16 2F 62 FC | 	wrlong	local05, local04
32e90     28 2C 86 F1 | 	sub	local04, #40
32e94     02 38 0E F2 | 	cmp	local10, #2 wz
32e98     18 2C 06 A1 |  if_e	add	local04, #24
32e9c     16 2F 02 AB |  if_e	rdlong	local05, local04
32ea0     18 2C 86 A1 |  if_e	sub	local04, #24
32ea4     01 2E 66 A0 |  if_e	shl	local05, #1
32ea8     24 00 90 AD |  if_e	jmp	#LR__4966
32eac     18 2C 06 F1 | 	add	local04, #24
32eb0     16 3B 02 FB | 	rdlong	local11, local04
32eb4     1D 2F 02 F6 | 	mov	local05, local11
32eb8     01 2E 66 F0 | 	shl	local05, #1
32ebc     1D 2F 02 F1 | 	add	local05, local11
32ec0     01 2E 46 F0 | 	shr	local05, #1
32ec4     18 2C 86 F1 | 	sub	local04, #24
32ec8     01 3A 06 F5 | 	and	local11, #1
32ecc     1D 2F 02 F1 | 	add	local05, local11
32ed0                 | LR__4966
32ed0     17 3B 02 F6 | 	mov	local11, local05
32ed4                 | LR__4967
32ed4     FF 3B 06 F1 | 	add	local11, #511
32ed8     09 3A 46 F0 | 	shr	local11, #9
32edc     1C 2C 06 F1 | 	add	local04, #28
32ee0     16 17 02 FB | 	rdlong	arg03, local04
32ee4     1C 2C 86 F1 | 	sub	local04, #28
32ee8     1D 17 12 F2 | 	cmp	arg03, local11 wc
32eec     0D FA 05 C6 |  if_b	mov	result1, #13
32ef0     30 01 90 CD |  if_b	jmp	#LR__4970
32ef4     14 2C 06 F1 | 	add	local04, #20
32ef8     FF FF FF FF 
32efc     16 FF 6B FC | 	wrlong	##-1, local04
32f00     04 2C 86 F1 | 	sub	local04, #4
32f04     FF FF FF FF 
32f08     16 FF 6B FC | 	wrlong	##-1, local04
32f0c     0C 2C 86 F1 | 	sub	local04, #12
32f10     16 01 49 FC | 	wrbyte	#128, local04
32f14     04 2C 86 F1 | 	sub	local04, #4
32f18     03 38 0E F2 | 	cmp	local10, #3 wz
32f1c     D0 00 90 5D |  if_ne	jmp	#LR__4969
32f20     34 2C 06 F1 | 	add	local04, #52
32f24     16 13 02 F6 | 	mov	arg01, local04
32f28     34 2C 86 F1 | 	sub	local04, #52
32f2c     30 12 06 F1 | 	add	arg01, #48
32f30                 | ' {
32f30                 | ' 
32f30                 | ' 	return *((WORD*)ptr);
32f30     09 FB E1 FA | 	rdword	result1, arg01
32f34     FD 2E 32 F9 | 	getword	local05, result1, #0
32f38     01 2E 0E F2 | 	cmp	local05, #1 wz
32f3c     B0 00 90 5D |  if_ne	jmp	#LR__4969
32f40     01 30 06 F1 | 	add	local06, #1
32f44     16 13 02 F6 | 	mov	arg01, local04
32f48     18 15 02 F6 | 	mov	arg02, local06
32f4c     CC CD BF FD | 	call	#_fatfs_cc_move_window
32f50     00 FA 0D F2 | 	cmp	result1, #0 wz
32f54     98 00 90 5D |  if_ne	jmp	#LR__4969
32f58     04 2C 06 F1 | 	add	local04, #4
32f5c     16 01 48 FC | 	wrbyte	#0, local04
32f60     30 2C 06 F1 | 	add	local04, #48
32f64     16 13 02 F6 | 	mov	arg01, local04
32f68     34 2C 86 F1 | 	sub	local04, #52
32f6c     FE 13 06 F1 | 	add	arg01, #510
32f70                 | ' {
32f70                 | ' 
32f70                 | ' 	return *((WORD*)ptr);
32f70     09 FB E1 FA | 	rdword	result1, arg01
32f74     FD 2E 32 F9 | 	getword	local05, result1, #0
32f78     55 00 00 FF 
32f7c     55 2E 0E F2 | 	cmp	local05, ##43605 wz
32f80     34 2C 06 A1 |  if_e	add	local04, #52
32f84     16 13 02 A6 |  if_e	mov	arg01, local04
32f88     34 2C 86 A1 |  if_e	sub	local04, #52
32f8c                 | ' {
32f8c                 | ' 
32f8c                 | ' 	return *((DWORD*)ptr);
32f8c     09 FB 01 AB |  if_e	rdlong	result1, arg01
32f90     A9 B0 20 AF 
32f94     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
32f98     54 00 90 5D |  if_ne	jmp	#LR__4968
32f9c     34 2C 06 F1 | 	add	local04, #52
32fa0     16 13 02 F6 | 	mov	arg01, local04
32fa4     34 2C 86 F1 | 	sub	local04, #52
32fa8     E4 13 06 F1 | 	add	arg01, #484
32fac                 | ' {
32fac                 | ' 
32fac                 | ' 	return *((DWORD*)ptr);
32fac     09 FB 01 FB | 	rdlong	result1, arg01
32fb0     B9 A0 30 FF 
32fb4     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
32fb8     34 00 90 5D |  if_ne	jmp	#LR__4968
32fbc     34 2C 06 F1 | 	add	local04, #52
32fc0     16 13 02 F6 | 	mov	arg01, local04
32fc4     E8 13 06 F1 | 	add	arg01, #488
32fc8                 | ' {
32fc8                 | ' 
32fc8                 | ' 	return *((DWORD*)ptr);
32fc8     09 FB 01 FB | 	rdlong	result1, arg01
32fcc     20 2C 86 F1 | 	sub	local04, #32
32fd0     16 FB 61 FC | 	wrlong	result1, local04
32fd4     20 2C 06 F1 | 	add	local04, #32
32fd8     16 13 02 F6 | 	mov	arg01, local04
32fdc     EC 13 06 F1 | 	add	arg01, #492
32fe0                 | ' {
32fe0                 | ' 
32fe0                 | ' 	return *((DWORD*)ptr);
32fe0     09 FB 01 FB | 	rdlong	result1, arg01
32fe4     24 2C 86 F1 | 	sub	local04, #36
32fe8     16 FB 61 FC | 	wrlong	result1, local04
32fec     10 2C 86 F1 | 	sub	local04, #16
32ff0                 | LR__4968
32ff0                 | LR__4969
32ff0     16 39 42 FC | 	wrbyte	local10, local04
32ff4     04 E4 05 F1 | 	add	objptr, #4
32ff8     F2 2E E2 FA | 	rdword	local05, objptr
32ffc     01 2E 06 F1 | 	add	local05, #1
33000     F2 2E 52 FC | 	wrword	local05, objptr
33004     F2 3A E2 FA | 	rdword	local11, objptr
33008     06 2C 06 F1 | 	add	local04, #6
3300c     16 3B 52 FC | 	wrword	local11, local04
33010     04 E4 05 F1 | 	add	objptr, #4
33014     06 2C 06 F1 | 	add	local04, #6
33018     16 E5 61 FC | 	wrlong	objptr, local04
3301c                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
3301c                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
3301c                 | ' 			{
3301c                 | ' 
3301c                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
3301c                 | ' 
3301c                 | ' 
3301c                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
3301c                 | ' 
3301c                 | ' 			}
3301c                 | ' 		}
3301c                 | ' 
3301c                 | ' 
3301c                 | ' 	}
3301c                 | ' 
3301c                 | ' 	fs->fs_type = (BYTE)fmt;
3301c                 | ' 	fs->id = ++Fsid;
3301c                 | ' 
3301c                 | ' 	fs->lfnbuf = LfnBuf;
3301c                 | ' #line 3567 "ff.c"
3301c                 | ' 	return FR_OK;
3301c     00 FA 05 F6 | 	mov	result1, #0
33020     08 E4 85 F1 | 	sub	objptr, #8
33024                 | LR__4970
33024     A7 F0 03 F6 | 	mov	ptra, fp
33028     B2 00 A0 FD | 	call	#popregs_
3302c                 | _fatfs_cc_mount_volume_ret
3302c     2D 00 64 FD | 	ret
33030                 | 
33030                 | _fatfs_cc_validate
33030     09 01 0A F6 | 	mov	_var01, arg01 wz
33034     09 02 06 F6 | 	mov	_var02, #9
33038     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
3303c     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
33040     50 00 90 AD |  if_e	jmp	#LR__4980
33044     04 00 06 F1 | 	add	_var01, #4
33048     00 07 E2 FA | 	rdword	_var04, _var01
3304c     04 00 86 F1 | 	sub	_var01, #4
33050     00 13 02 FB | 	rdlong	arg01, _var01
33054     06 12 06 F1 | 	add	arg01, #6
33058     09 FB E1 FA | 	rdword	result1, arg01
3305c     FD 06 0A F2 | 	cmp	_var04, result1 wz
33060     30 00 90 5D |  if_ne	jmp	#LR__4980
33064     00 07 02 FB | 	rdlong	_var04, _var01
33068     01 06 06 F1 | 	add	_var04, #1
3306c     03 13 CA FA | 	rdbyte	arg01, _var04 wz
33070     01 FA 05 56 |  if_ne	mov	result1, #1
33074                 | ' 
33074                 | ' 	return Stat;
33074     01 00 00 AF 
33078     20 E4 05 A1 |  if_e	add	objptr, ##544
3307c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
33080     01 00 00 AF 
33084     20 E4 85 A1 |  if_e	sub	objptr, ##544
33088     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
3308c     01 04 CE F7 | 	test	_var03, #1 wz
33090     00 02 06 A6 |  if_e	mov	_var02, #0
33094                 | LR__4980
33094     00 02 0E F2 | 	cmp	_var02, #0 wz
33098     00 05 02 AB |  if_e	rdlong	_var03, _var01
3309c     00 04 06 56 |  if_ne	mov	_var03, #0
330a0     0A 05 62 FC | 	wrlong	_var03, arg02
330a4                 | ' 			res = FR_OK;
330a4                 | ' 		}
330a4                 | ' 
330a4                 | ' 	}
330a4                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
330a4                 | ' 	return res;
330a4     01 FB 01 F6 | 	mov	result1, _var02
330a8                 | _fatfs_cc_validate_ret
330a8     2D 00 64 FD | 	ret
330ac                 | 
330ac                 | _fatfs_cc_f_mount
330ac     01 4A 05 F6 | 	mov	COUNT_, #1
330b0     A8 00 A0 FD | 	call	#pushregs_
330b4     20 F0 07 F1 | 	add	ptra, #32
330b8     04 4E 05 F1 | 	add	fp, #4
330bc     A7 12 62 FC | 	wrlong	arg01, fp
330c0     04 4E 05 F1 | 	add	fp, #4
330c4     A7 14 62 FC | 	wrlong	arg02, fp
330c8     04 4E 05 F1 | 	add	fp, #4
330cc     A7 16 42 FC | 	wrbyte	arg03, fp
330d0     04 4E 85 F1 | 	sub	fp, #4
330d4     A7 16 02 FB | 	rdlong	arg03, fp
330d8     14 4E 05 F1 | 	add	fp, #20
330dc     A7 16 62 FC | 	wrlong	arg03, fp
330e0     A7 12 02 F6 | 	mov	arg01, fp
330e4     1C 4E 85 F1 | 	sub	fp, #28
330e8     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
330ec     14 4E 05 F1 | 	add	fp, #20
330f0     A7 FA 61 FC | 	wrlong	result1, fp
330f4     14 4E 85 F1 | 	sub	fp, #20
330f8     00 FA 55 F2 | 	cmps	result1, #0 wc
330fc     0B FA 05 C6 |  if_b	mov	result1, #11
33100     C0 00 90 CD |  if_b	jmp	#LR__4991
33104     14 4E 05 F1 | 	add	fp, #20
33108     A7 16 02 FB | 	rdlong	arg03, fp
3310c     02 16 66 F0 | 	shl	arg03, #2
33110     F2 16 02 F1 | 	add	arg03, objptr
33114     0B 17 0A FB | 	rdlong	arg03, arg03 wz
33118     04 4E 85 F1 | 	sub	fp, #4
3311c     A7 16 62 FC | 	wrlong	arg03, fp
33120     10 4E 85 F1 | 	sub	fp, #16
33124     28 00 90 AD |  if_e	jmp	#LR__4990
33128     10 4E 05 F1 | 	add	fp, #16
3312c     A7 16 02 FB | 	rdlong	arg03, fp
33130     10 4E 85 F1 | 	sub	fp, #16
33134     01 16 06 F1 | 	add	arg03, #1
33138     0B 13 C2 FA | 	rdbyte	arg01, arg03
3313c     30 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
33140     10 4E 05 F1 | 	add	fp, #16
33144     A7 16 02 FB | 	rdlong	arg03, fp
33148     10 4E 85 F1 | 	sub	fp, #16
3314c     0B 01 48 FC | 	wrbyte	#0, arg03
33150                 | LR__4990
33150     04 4E 05 F1 | 	add	fp, #4
33154     A7 26 0A FB | 	rdlong	local01, fp wz
33158     04 4E 85 F1 | 	sub	fp, #4
3315c     04 4E 05 51 |  if_ne	add	fp, #4
33160     A7 26 02 5B |  if_ne	rdlong	local01, fp
33164     04 4E 85 51 |  if_ne	sub	fp, #4
33168     13 01 48 5C |  if_ne	wrbyte	#0, local01
3316c     14 4E 05 F1 | 	add	fp, #20
33170     A7 26 02 FB | 	rdlong	local01, fp
33174     02 26 66 F0 | 	shl	local01, #2
33178     F2 26 02 F1 | 	add	local01, objptr
3317c     10 4E 85 F1 | 	sub	fp, #16
33180     A7 16 02 FB | 	rdlong	arg03, fp
33184     13 17 62 FC | 	wrlong	arg03, local01
33188     08 4E 05 F1 | 	add	fp, #8
3318c     A7 26 CA FA | 	rdbyte	local01, fp wz
33190     0C 4E 85 F1 | 	sub	fp, #12
33194     00 FA 05 A6 |  if_e	mov	result1, #0
33198     28 00 90 AD |  if_e	jmp	#LR__4991
3319c     08 4E 05 F1 | 	add	fp, #8
331a0     A7 12 02 F6 | 	mov	arg01, fp
331a4     04 4E 85 F1 | 	sub	fp, #4
331a8     A7 14 02 F6 | 	mov	arg02, fp
331ac     04 4E 85 F1 | 	sub	fp, #4
331b0     00 16 06 F6 | 	mov	arg03, #0
331b4     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
331b8     18 4E 05 F1 | 	add	fp, #24
331bc     A7 FA 61 FC | 	wrlong	result1, fp
331c0                 | ' 
331c0                 | ' 	res = mount_volume(&path, &fs, 0);
331c0                 | ' 	return res ;
331c0     18 4E 85 F1 | 	sub	fp, #24
331c4                 | LR__4991
331c4     A7 F0 03 F6 | 	mov	ptra, fp
331c8     B2 00 A0 FD | 	call	#popregs_
331cc                 | _fatfs_cc_f_mount_ret
331cc     2D 00 64 FD | 	ret
331d0                 | 
331d0                 | _fatfs_cc_f_open
331d0     02 4A 05 F6 | 	mov	COUNT_, #2
331d4     A8 00 A0 FD | 	call	#pushregs_
331d8     60 F0 07 F1 | 	add	ptra, #96
331dc     04 4E 05 F1 | 	add	fp, #4
331e0     A7 12 62 FC | 	wrlong	arg01, fp
331e4     04 4E 05 F1 | 	add	fp, #4
331e8     A7 14 62 FC | 	wrlong	arg02, fp
331ec     04 4E 05 F1 | 	add	fp, #4
331f0     A7 16 42 FC | 	wrbyte	arg03, fp
331f4     08 4E 85 F1 | 	sub	fp, #8
331f8     A7 18 0A FB | 	rdlong	arg04, fp wz
331fc     04 4E 85 F1 | 	sub	fp, #4
33200     09 FA 05 A6 |  if_e	mov	result1, #9
33204     98 06 90 AD |  if_e	jmp	#LR__5017
33208     0C 4E 05 F1 | 	add	fp, #12
3320c     A7 18 C2 FA | 	rdbyte	arg04, fp
33210     3F 18 06 F5 | 	and	arg04, #63
33214     A7 18 42 FC | 	wrbyte	arg04, fp
33218     04 4E 85 F1 | 	sub	fp, #4
3321c     A7 12 02 F6 | 	mov	arg01, fp
33220     3C 4E 05 F1 | 	add	fp, #60
33224     A7 14 02 F6 | 	mov	arg02, fp
33228     38 4E 85 F1 | 	sub	fp, #56
3322c     A7 16 C2 FA | 	rdbyte	arg03, fp
33230     0C 4E 85 F1 | 	sub	fp, #12
33234     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
33238     10 4E 05 F1 | 	add	fp, #16
3323c     A7 FA 61 FC | 	wrlong	result1, fp
33240     10 4E 85 F1 | 	sub	fp, #16
33244     00 FA 0D F2 | 	cmp	result1, #0 wz
33248     2C 06 90 5D |  if_ne	jmp	#LR__5016
3324c     44 4E 05 F1 | 	add	fp, #68
33250     A7 18 02 FB | 	rdlong	arg04, fp
33254     30 4E 85 F1 | 	sub	fp, #48
33258     A7 18 62 FC | 	wrlong	arg04, fp
3325c     A7 12 02 F6 | 	mov	arg01, fp
33260     0C 4E 85 F1 | 	sub	fp, #12
33264     A7 26 02 FB | 	rdlong	local01, fp
33268     08 4E 85 F1 | 	sub	fp, #8
3326c     13 15 02 F6 | 	mov	arg02, local01
33270     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
33274     10 4E 05 F1 | 	add	fp, #16
33278     A7 FA 61 FC | 	wrlong	result1, fp
3327c     10 4E 85 F1 | 	sub	fp, #16
33280     00 FA 0D F2 | 	cmp	result1, #0 wz
33284     1C 00 90 5D |  if_ne	jmp	#LR__5000
33288     3F 4E 05 F1 | 	add	fp, #63
3328c     A7 18 C2 FA | 	rdbyte	arg04, fp
33290     3F 4E 85 F1 | 	sub	fp, #63
33294     80 18 CE F7 | 	test	arg04, #128 wz
33298     10 4E 05 51 |  if_ne	add	fp, #16
3329c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
332a0     10 4E 85 51 |  if_ne	sub	fp, #16
332a4                 | LR__5000
332a4     0C 4E 05 F1 | 	add	fp, #12
332a8     A7 18 C2 FA | 	rdbyte	arg04, fp
332ac     0C 4E 85 F1 | 	sub	fp, #12
332b0     1C 18 CE F7 | 	test	arg04, #28 wz
332b4     F0 01 90 AD |  if_e	jmp	#LR__5005
332b8     10 4E 05 F1 | 	add	fp, #16
332bc     A7 26 0A FB | 	rdlong	local01, fp wz
332c0     10 4E 85 F1 | 	sub	fp, #16
332c4     48 00 90 AD |  if_e	jmp	#LR__5002
332c8     10 4E 05 F1 | 	add	fp, #16
332cc     A7 18 02 FB | 	rdlong	arg04, fp
332d0     10 4E 85 F1 | 	sub	fp, #16
332d4     04 18 0E F2 | 	cmp	arg04, #4 wz
332d8     1C 00 90 5D |  if_ne	jmp	#LR__5001
332dc     14 4E 05 F1 | 	add	fp, #20
332e0     A7 12 02 F6 | 	mov	arg01, fp
332e4     14 4E 85 F1 | 	sub	fp, #20
332e8     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
332ec     10 4E 05 F1 | 	add	fp, #16
332f0     A7 FA 61 FC | 	wrlong	result1, fp
332f4     10 4E 85 F1 | 	sub	fp, #16
332f8                 | LR__5001
332f8     0C 4E 05 F1 | 	add	fp, #12
332fc     A7 26 C2 FA | 	rdbyte	local01, fp
33300     08 26 46 F5 | 	or	local01, #8
33304     A7 26 42 FC | 	wrbyte	local01, fp
33308     0C 4E 85 F1 | 	sub	fp, #12
3330c     3C 00 90 FD | 	jmp	#LR__5004
33310                 | LR__5002
33310     1A 4E 05 F1 | 	add	fp, #26
33314     A7 26 C2 FA | 	rdbyte	local01, fp
33318     1A 4E 85 F1 | 	sub	fp, #26
3331c     11 26 CE F7 | 	test	local01, #17 wz
33320     10 4E 05 51 |  if_ne	add	fp, #16
33324     A7 0E 68 5C |  if_ne	wrlong	#7, fp
33328     10 4E 85 51 |  if_ne	sub	fp, #16
3332c     1C 00 90 5D |  if_ne	jmp	#LR__5003
33330     0C 4E 05 F1 | 	add	fp, #12
33334     A7 26 C2 FA | 	rdbyte	local01, fp
33338     0C 4E 85 F1 | 	sub	fp, #12
3333c     04 26 CE F7 | 	test	local01, #4 wz
33340     10 4E 05 51 |  if_ne	add	fp, #16
33344     A7 10 68 5C |  if_ne	wrlong	#8, fp
33348     10 4E 85 51 |  if_ne	sub	fp, #16
3334c                 | LR__5003
3334c                 | LR__5004
3334c     10 4E 05 F1 | 	add	fp, #16
33350     A7 26 0A FB | 	rdlong	local01, fp wz
33354     10 4E 85 F1 | 	sub	fp, #16
33358     A8 01 90 5D |  if_ne	jmp	#LR__5008
3335c     0C 4E 05 F1 | 	add	fp, #12
33360     A7 26 C2 FA | 	rdbyte	local01, fp
33364     0C 4E 85 F1 | 	sub	fp, #12
33368     08 26 CE F7 | 	test	local01, #8 wz
3336c     94 01 90 AD |  if_e	jmp	#LR__5008
33370     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
33374     54 4E 05 F1 | 	add	fp, #84
33378     A7 FA 61 FC | 	wrlong	result1, fp
3337c     24 4E 85 F1 | 	sub	fp, #36
33380     A7 12 02 FB | 	rdlong	arg01, fp
33384     0E 12 06 F1 | 	add	arg01, #14
33388     09 FB 61 FC | 	wrlong	result1, arg01
3338c     A7 12 02 FB | 	rdlong	arg01, fp
33390     16 12 06 F1 | 	add	arg01, #22
33394     24 4E 05 F1 | 	add	fp, #36
33398     A7 14 02 FB | 	rdlong	arg02, fp
3339c     09 15 62 FC | 	wrlong	arg02, arg01
333a0     10 4E 85 F1 | 	sub	fp, #16
333a4     A7 12 02 FB | 	rdlong	arg01, fp
333a8     14 4E 85 F1 | 	sub	fp, #20
333ac     A7 14 02 FB | 	rdlong	arg02, fp
333b0     30 4E 85 F1 | 	sub	fp, #48
333b4     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
333b8     48 4E 05 F1 | 	add	fp, #72
333bc     A7 FA 61 FC | 	wrlong	result1, fp
333c0     18 4E 85 F1 | 	sub	fp, #24
333c4     A7 26 02 FB | 	rdlong	local01, fp
333c8     0B 26 06 F1 | 	add	local01, #11
333cc     13 41 48 FC | 	wrbyte	#32, local01
333d0     14 4E 05 F1 | 	add	fp, #20
333d4     A7 12 02 FB | 	rdlong	arg01, fp
333d8     14 4E 85 F1 | 	sub	fp, #20
333dc     A7 14 02 FB | 	rdlong	arg02, fp
333e0     30 4E 85 F1 | 	sub	fp, #48
333e4     00 16 06 F6 | 	mov	arg03, #0
333e8     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
333ec     30 4E 05 F1 | 	add	fp, #48
333f0     A7 12 02 FB | 	rdlong	arg01, fp
333f4     1C 12 06 F1 | 	add	arg01, #28
333f8     09 01 68 FC | 	wrlong	#0, arg01
333fc     14 4E 05 F1 | 	add	fp, #20
33400     A7 26 02 FB | 	rdlong	local01, fp
33404     03 26 06 F1 | 	add	local01, #3
33408     13 03 48 FC | 	wrbyte	#1, local01
3340c     04 4E 05 F1 | 	add	fp, #4
33410     A7 26 0A FB | 	rdlong	local01, fp wz
33414     48 4E 85 F1 | 	sub	fp, #72
33418     E8 00 90 AD |  if_e	jmp	#LR__5008
3341c     44 4E 05 F1 | 	add	fp, #68
33420     A7 26 02 FB | 	rdlong	local01, fp
33424     30 26 06 F1 | 	add	local01, #48
33428     13 27 02 FB | 	rdlong	local01, local01
3342c     14 4E 05 F1 | 	add	fp, #20
33430     A7 26 62 FC | 	wrlong	local01, fp
33434     44 4E 85 F1 | 	sub	fp, #68
33438     A7 12 02 F6 | 	mov	arg01, fp
3343c     34 4E 05 F1 | 	add	fp, #52
33440     A7 14 02 FB | 	rdlong	arg02, fp
33444     48 4E 85 F1 | 	sub	fp, #72
33448     00 16 06 F6 | 	mov	arg03, #0
3344c     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
33450     10 4E 05 F1 | 	add	fp, #16
33454     A7 FA 61 FC | 	wrlong	result1, fp
33458     10 4E 85 F1 | 	sub	fp, #16
3345c     00 FA 0D F2 | 	cmp	result1, #0 wz
33460     A0 00 90 5D |  if_ne	jmp	#LR__5008
33464     44 4E 05 F1 | 	add	fp, #68
33468     A7 12 02 FB | 	rdlong	arg01, fp
3346c     14 4E 05 F1 | 	add	fp, #20
33470     A7 14 02 FB | 	rdlong	arg02, fp
33474     58 4E 85 F1 | 	sub	fp, #88
33478     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
3347c     10 4E 05 F1 | 	add	fp, #16
33480     A7 FA 61 FC | 	wrlong	result1, fp
33484     34 4E 05 F1 | 	add	fp, #52
33488     A7 18 02 FB | 	rdlong	arg04, fp
3348c     04 4E 05 F1 | 	add	fp, #4
33490     A7 26 02 FB | 	rdlong	local01, fp
33494     48 4E 85 F1 | 	sub	fp, #72
33498     01 26 86 F1 | 	sub	local01, #1
3349c     10 18 06 F1 | 	add	arg04, #16
334a0     0C 27 62 FC | 	wrlong	local01, arg04
334a4     5C 00 90 FD | 	jmp	#LR__5008
334a8                 | LR__5005
334a8     10 4E 05 F1 | 	add	fp, #16
334ac     A7 18 0A FB | 	rdlong	arg04, fp wz
334b0     10 4E 85 F1 | 	sub	fp, #16
334b4     4C 00 90 5D |  if_ne	jmp	#LR__5007
334b8     1A 4E 05 F1 | 	add	fp, #26
334bc     A7 18 C2 FA | 	rdbyte	arg04, fp
334c0     1A 4E 85 F1 | 	sub	fp, #26
334c4     10 18 CE F7 | 	test	arg04, #16 wz
334c8     10 4E 05 51 |  if_ne	add	fp, #16
334cc     A7 08 68 5C |  if_ne	wrlong	#4, fp
334d0     10 4E 85 51 |  if_ne	sub	fp, #16
334d4     2C 00 90 5D |  if_ne	jmp	#LR__5006
334d8     0C 4E 05 F1 | 	add	fp, #12
334dc     A7 18 C2 FA | 	rdbyte	arg04, fp
334e0     0C 4E 85 F1 | 	sub	fp, #12
334e4     02 18 CE F7 | 	test	arg04, #2 wz
334e8     1A 4E 05 51 |  if_ne	add	fp, #26
334ec     A7 26 C2 5A |  if_ne	rdbyte	local01, fp
334f0     1A 4E 85 51 |  if_ne	sub	fp, #26
334f4     01 26 CE 57 |  if_ne	test	local01, #1 wz
334f8     10 4E 05 51 |  if_ne	add	fp, #16
334fc     A7 0E 68 5C |  if_ne	wrlong	#7, fp
33500     10 4E 85 51 |  if_ne	sub	fp, #16
33504                 | LR__5006
33504                 | LR__5007
33504                 | LR__5008
33504     10 4E 05 F1 | 	add	fp, #16
33508     A7 26 0A FB | 	rdlong	local01, fp wz
3350c     10 4E 85 F1 | 	sub	fp, #16
33510     60 00 90 5D |  if_ne	jmp	#LR__5009
33514     0C 4E 05 F1 | 	add	fp, #12
33518     A7 28 C2 FA | 	rdbyte	local02, fp
3351c     0C 4E 85 F1 | 	sub	fp, #12
33520     08 28 CE F7 | 	test	local02, #8 wz
33524     0C 4E 05 51 |  if_ne	add	fp, #12
33528     A7 28 C2 5A |  if_ne	rdbyte	local02, fp
3352c     40 28 46 55 |  if_ne	or	local02, #64
33530     A7 28 42 5C |  if_ne	wrbyte	local02, fp
33534     0C 4E 85 51 |  if_ne	sub	fp, #12
33538     04 4E 05 F1 | 	add	fp, #4
3353c     A7 28 02 FB | 	rdlong	local02, fp
33540     40 4E 05 F1 | 	add	fp, #64
33544     A7 26 02 FB | 	rdlong	local01, fp
33548     30 26 06 F1 | 	add	local01, #48
3354c     13 27 02 FB | 	rdlong	local01, local01
33550     20 28 06 F1 | 	add	local02, #32
33554     14 27 62 FC | 	wrlong	local01, local02
33558     40 4E 85 F1 | 	sub	fp, #64
3355c     A7 28 02 FB | 	rdlong	local02, fp
33560     2C 4E 05 F1 | 	add	fp, #44
33564     A7 26 02 FB | 	rdlong	local01, fp
33568     30 4E 85 F1 | 	sub	fp, #48
3356c     24 28 06 F1 | 	add	local02, #36
33570     14 27 62 FC | 	wrlong	local01, local02
33574                 | LR__5009
33574     10 4E 05 F1 | 	add	fp, #16
33578     A7 28 0A FB | 	rdlong	local02, fp wz
3357c     10 4E 85 F1 | 	sub	fp, #16
33580     F4 02 90 5D |  if_ne	jmp	#LR__5015
33584     04 4E 05 F1 | 	add	fp, #4
33588     A7 28 02 FB | 	rdlong	local02, fp
3358c     40 4E 05 F1 | 	add	fp, #64
33590     A7 12 02 FB | 	rdlong	arg01, fp
33594     14 4E 85 F1 | 	sub	fp, #20
33598     A7 14 02 FB | 	rdlong	arg02, fp
3359c     30 4E 85 F1 | 	sub	fp, #48
335a0     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
335a4     08 28 06 F1 | 	add	local02, #8
335a8     14 FB 61 FC | 	wrlong	result1, local02
335ac     04 4E 05 F1 | 	add	fp, #4
335b0     A7 28 02 FB | 	rdlong	local02, fp
335b4     2C 4E 05 F1 | 	add	fp, #44
335b8     A7 12 02 FB | 	rdlong	arg01, fp
335bc     1C 12 06 F1 | 	add	arg01, #28
335c0                 | ' {
335c0                 | ' 
335c0                 | ' 	return *((DWORD*)ptr);
335c0     09 FB 01 FB | 	rdlong	result1, arg01
335c4     0C 28 06 F1 | 	add	local02, #12
335c8     14 FB 61 FC | 	wrlong	result1, local02
335cc     2C 4E 85 F1 | 	sub	fp, #44
335d0     A7 28 02 FB | 	rdlong	local02, fp
335d4     40 4E 05 F1 | 	add	fp, #64
335d8     A7 26 02 FB | 	rdlong	local01, fp
335dc     14 27 62 FC | 	wrlong	local01, local02
335e0     40 4E 85 F1 | 	sub	fp, #64
335e4     A7 28 02 FB | 	rdlong	local02, fp
335e8     40 4E 05 F1 | 	add	fp, #64
335ec     A7 26 02 FB | 	rdlong	local01, fp
335f0     06 26 06 F1 | 	add	local01, #6
335f4     13 27 E2 FA | 	rdword	local01, local01
335f8     04 28 06 F1 | 	add	local02, #4
335fc     14 27 52 FC | 	wrword	local01, local02
33600     40 4E 85 F1 | 	sub	fp, #64
33604     A7 28 02 FB | 	rdlong	local02, fp
33608     08 4E 05 F1 | 	add	fp, #8
3360c     A7 26 C2 FA | 	rdbyte	local01, fp
33610     10 28 06 F1 | 	add	local02, #16
33614     14 27 42 FC | 	wrbyte	local01, local02
33618     08 4E 85 F1 | 	sub	fp, #8
3361c     A7 28 02 FB | 	rdlong	local02, fp
33620     11 28 06 F1 | 	add	local02, #17
33624     14 01 48 FC | 	wrbyte	#0, local02
33628     A7 28 02 FB | 	rdlong	local02, fp
3362c     1C 28 06 F1 | 	add	local02, #28
33630     14 01 68 FC | 	wrlong	#0, local02
33634     A7 28 02 FB | 	rdlong	local02, fp
33638     14 28 06 F1 | 	add	local02, #20
3363c     14 01 68 FC | 	wrlong	#0, local02
33640     A7 12 02 FB | 	rdlong	arg01, fp
33644     04 4E 85 F1 | 	sub	fp, #4
33648     28 12 06 F1 | 	add	arg01, #40
3364c     00 14 06 F6 | 	mov	arg02, #0
33650     09 16 C6 F9 | 	decod	arg03, #9
33654     98 00 A0 FD | 	call	#\builtin_bytefill_
33658     0C 4E 05 F1 | 	add	fp, #12
3365c     A7 28 C2 FA | 	rdbyte	local02, fp
33660     0C 4E 85 F1 | 	sub	fp, #12
33664     20 28 CE F7 | 	test	local02, #32 wz
33668     0C 02 90 AD |  if_e	jmp	#LR__5014
3366c     04 4E 05 F1 | 	add	fp, #4
33670     A7 26 02 FB | 	rdlong	local01, fp
33674     04 4E 85 F1 | 	sub	fp, #4
33678     0C 26 06 F1 | 	add	local01, #12
3367c     13 29 02 FB | 	rdlong	local02, local01
33680     01 28 16 F2 | 	cmp	local02, #1 wc
33684     F0 01 90 CD |  if_b	jmp	#LR__5014
33688     04 4E 05 F1 | 	add	fp, #4
3368c     A7 26 02 FB | 	rdlong	local01, fp
33690     13 29 02 F6 | 	mov	local02, local01
33694     0C 26 06 F1 | 	add	local01, #12
33698     13 27 02 FB | 	rdlong	local01, local01
3369c     14 28 06 F1 | 	add	local02, #20
336a0     14 27 62 FC | 	wrlong	local01, local02
336a4     40 4E 05 F1 | 	add	fp, #64
336a8     A7 28 02 FB | 	rdlong	local02, fp
336ac     0A 28 06 F1 | 	add	local02, #10
336b0     14 29 E2 FA | 	rdword	local02, local02
336b4     09 28 66 F0 | 	shl	local02, #9
336b8     08 4E 05 F1 | 	add	fp, #8
336bc     A7 28 62 FC | 	wrlong	local02, fp
336c0     48 4E 85 F1 | 	sub	fp, #72
336c4     A7 28 02 FB | 	rdlong	local02, fp
336c8     08 28 06 F1 | 	add	local02, #8
336cc     14 27 02 FB | 	rdlong	local01, local02
336d0     4C 4E 05 F1 | 	add	fp, #76
336d4     A7 26 62 FC | 	wrlong	local01, fp
336d8                 | ' 				fp->fptr = fp->obj.objsize;
336d8                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
336d8                 | ' 				clst = fp->obj.sclust;
336d8                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
336d8     4C 4E 85 F1 | 	sub	fp, #76
336dc     A7 28 02 FB | 	rdlong	local02, fp
336e0     0C 28 06 F1 | 	add	local02, #12
336e4     14 27 02 FB | 	rdlong	local01, local02
336e8     58 4E 05 F1 | 	add	fp, #88
336ec     A7 26 62 FC | 	wrlong	local01, fp
336f0     5C 4E 85 F1 | 	sub	fp, #92
336f4                 | LR__5010
336f4     10 4E 05 F1 | 	add	fp, #16
336f8     A7 28 0A FB | 	rdlong	local02, fp wz
336fc     10 4E 85 F1 | 	sub	fp, #16
33700     94 00 90 5D |  if_ne	jmp	#LR__5011
33704     5C 4E 05 F1 | 	add	fp, #92
33708     A7 28 02 FB | 	rdlong	local02, fp
3370c     10 4E 85 F1 | 	sub	fp, #16
33710     A7 26 02 FB | 	rdlong	local01, fp
33714     4C 4E 85 F1 | 	sub	fp, #76
33718     13 29 1A F2 | 	cmp	local02, local01 wcz
3371c     78 00 90 ED |  if_be	jmp	#LR__5011
33720     04 4E 05 F1 | 	add	fp, #4
33724     A7 12 02 FB | 	rdlong	arg01, fp
33728     4C 4E 05 F1 | 	add	fp, #76
3372c     A7 14 02 FB | 	rdlong	arg02, fp
33730     50 4E 85 F1 | 	sub	fp, #80
33734     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
33738     50 4E 05 F1 | 	add	fp, #80
3373c     A7 FA 61 FC | 	wrlong	result1, fp
33740     50 4E 85 F1 | 	sub	fp, #80
33744     02 FA 15 F2 | 	cmp	result1, #2 wc
33748     10 4E 05 C1 |  if_b	add	fp, #16
3374c     A7 04 68 CC |  if_b	wrlong	#2, fp
33750     10 4E 85 C1 |  if_b	sub	fp, #16
33754     50 4E 05 F1 | 	add	fp, #80
33758     A7 28 02 FB | 	rdlong	local02, fp
3375c     50 4E 85 F1 | 	sub	fp, #80
33760     FF FF 7F FF 
33764     FF 29 0E F2 | 	cmp	local02, ##-1 wz
33768     10 4E 05 A1 |  if_e	add	fp, #16
3376c     A7 02 68 AC |  if_e	wrlong	#1, fp
33770     10 4E 85 A1 |  if_e	sub	fp, #16
33774     5C 4E 05 F1 | 	add	fp, #92
33778     A7 28 02 FB | 	rdlong	local02, fp
3377c     10 4E 85 F1 | 	sub	fp, #16
33780     A7 26 02 FB | 	rdlong	local01, fp
33784     13 29 82 F1 | 	sub	local02, local01
33788     10 4E 05 F1 | 	add	fp, #16
3378c     A7 28 62 FC | 	wrlong	local02, fp
33790     5C 4E 85 F1 | 	sub	fp, #92
33794     5C FF 9F FD | 	jmp	#LR__5010
33798                 | LR__5011
33798     04 4E 05 F1 | 	add	fp, #4
3379c     A7 28 02 FB | 	rdlong	local02, fp
337a0     4C 4E 05 F1 | 	add	fp, #76
337a4     A7 26 02 FB | 	rdlong	local01, fp
337a8     18 28 06 F1 | 	add	local02, #24
337ac     14 27 62 FC | 	wrlong	local01, local02
337b0     40 4E 85 F1 | 	sub	fp, #64
337b4     A7 28 0A FB | 	rdlong	local02, fp wz
337b8     10 4E 85 F1 | 	sub	fp, #16
337bc     B8 00 90 5D |  if_ne	jmp	#LR__5013
337c0     5C 4E 05 F1 | 	add	fp, #92
337c4     A7 26 02 FB | 	rdlong	local01, fp
337c8     5C 4E 85 F1 | 	sub	fp, #92
337cc     FF 27 CE F7 | 	test	local01, #511 wz
337d0     A4 00 90 AD |  if_e	jmp	#LR__5013
337d4     44 4E 05 F1 | 	add	fp, #68
337d8     A7 12 02 FB | 	rdlong	arg01, fp
337dc     0C 4E 05 F1 | 	add	fp, #12
337e0     A7 14 02 FB | 	rdlong	arg02, fp
337e4     50 4E 85 F1 | 	sub	fp, #80
337e8     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
337ec     58 4E 05 F1 | 	add	fp, #88
337f0     A7 FA 61 FC | 	wrlong	result1, fp
337f4     00 FA 4D F2 | 	cmps	result1, #0 wz
337f8     58 4E 85 F1 | 	sub	fp, #88
337fc     10 4E 05 A1 |  if_e	add	fp, #16
33800     A7 04 68 AC |  if_e	wrlong	#2, fp
33804     10 4E 85 A1 |  if_e	sub	fp, #16
33808     6C 00 90 AD |  if_e	jmp	#LR__5012
3380c     04 4E 05 F1 | 	add	fp, #4
33810     A7 28 02 FB | 	rdlong	local02, fp
33814     54 4E 05 F1 | 	add	fp, #84
33818     A7 26 02 FB | 	rdlong	local01, fp
3381c     04 4E 05 F1 | 	add	fp, #4
33820     A7 18 02 FB | 	rdlong	arg04, fp
33824     09 18 46 F0 | 	shr	arg04, #9
33828     0C 27 02 F1 | 	add	local01, arg04
3382c     1C 28 06 F1 | 	add	local02, #28
33830     14 27 62 FC | 	wrlong	local01, local02
33834     18 4E 85 F1 | 	sub	fp, #24
33838     A7 28 02 FB | 	rdlong	local02, fp
3383c     01 28 06 F1 | 	add	local02, #1
33840     14 13 C2 FA | 	rdbyte	arg01, local02
33844     40 4E 85 F1 | 	sub	fp, #64
33848     A7 28 02 FB | 	rdlong	local02, fp
3384c     14 15 02 F6 | 	mov	arg02, local02
33850     28 14 06 F1 | 	add	arg02, #40
33854     04 4E 85 F1 | 	sub	fp, #4
33858     1C 28 06 F1 | 	add	local02, #28
3385c     14 17 02 FB | 	rdlong	arg03, local02
33860     01 18 06 F6 | 	mov	arg04, #1
33864     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
33868     00 FA 0D F2 | 	cmp	result1, #0 wz
3386c     10 4E 05 51 |  if_ne	add	fp, #16
33870     A7 02 68 5C |  if_ne	wrlong	#1, fp
33874     10 4E 85 51 |  if_ne	sub	fp, #16
33878                 | LR__5012
33878                 | LR__5013
33878                 | LR__5014
33878                 | LR__5015
33878                 | LR__5016
33878     10 4E 05 F1 | 	add	fp, #16
3387c     A7 28 0A FB | 	rdlong	local02, fp wz
33880     10 4E 85 F1 | 	sub	fp, #16
33884     04 4E 05 51 |  if_ne	add	fp, #4
33888     A7 28 02 5B |  if_ne	rdlong	local02, fp
3388c     04 4E 85 51 |  if_ne	sub	fp, #4
33890     14 01 68 5C |  if_ne	wrlong	#0, local02
33894                 | ' 
33894                 | ' 	return res ;
33894     10 4E 05 F1 | 	add	fp, #16
33898     A7 FA 01 FB | 	rdlong	result1, fp
3389c     10 4E 85 F1 | 	sub	fp, #16
338a0                 | LR__5017
338a0     A7 F0 03 F6 | 	mov	ptra, fp
338a4     B2 00 A0 FD | 	call	#popregs_
338a8                 | _fatfs_cc_f_open_ret
338a8     2D 00 64 FD | 	ret
338ac                 | 
338ac                 | _fatfs_cc_f_read
338ac     0E 4A 05 F6 | 	mov	COUNT_, #14
338b0     A8 00 A0 FD | 	call	#pushregs_
338b4     38 F0 07 F1 | 	add	ptra, #56
338b8     04 4E 05 F1 | 	add	fp, #4
338bc     A7 12 62 FC | 	wrlong	arg01, fp
338c0     04 4E 05 F1 | 	add	fp, #4
338c4     A7 14 62 FC | 	wrlong	arg02, fp
338c8     04 4E 05 F1 | 	add	fp, #4
338cc     A7 16 62 FC | 	wrlong	arg03, fp
338d0     04 4E 05 F1 | 	add	fp, #4
338d4     A7 18 62 FC | 	wrlong	arg04, fp
338d8     08 4E 85 F1 | 	sub	fp, #8
338dc     A7 FA 01 FB | 	rdlong	result1, fp
338e0     2C 4E 05 F1 | 	add	fp, #44
338e4     A7 FA 61 FC | 	wrlong	result1, fp
338e8     24 4E 85 F1 | 	sub	fp, #36
338ec     A7 FA 01 FB | 	rdlong	result1, fp
338f0     FD 00 68 FC | 	wrlong	#0, result1
338f4     0C 4E 85 F1 | 	sub	fp, #12
338f8     A7 12 02 FB | 	rdlong	arg01, fp
338fc     14 4E 05 F1 | 	add	fp, #20
33900     A7 14 02 F6 | 	mov	arg02, fp
33904     18 4E 85 F1 | 	sub	fp, #24
33908     24 F7 BF FD | 	call	#_fatfs_cc_validate
3390c     14 4E 05 F1 | 	add	fp, #20
33910     A7 FA 61 FC | 	wrlong	result1, fp
33914     00 FA 4D F2 | 	cmps	result1, #0 wz
33918     14 4E 85 F1 | 	sub	fp, #20
3391c     20 00 90 5D |  if_ne	jmp	#LR__5020
33920     04 4E 05 F1 | 	add	fp, #4
33924     A7 14 02 FB | 	rdlong	arg02, fp
33928     11 14 06 F1 | 	add	arg02, #17
3392c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
33930     10 4E 05 F1 | 	add	fp, #16
33934     A7 14 62 FC | 	wrlong	arg02, fp
33938     14 4E 85 F1 | 	sub	fp, #20
3393c     10 00 90 AD |  if_e	jmp	#LR__5021
33940                 | LR__5020
33940     14 4E 05 F1 | 	add	fp, #20
33944     A7 FA 01 FB | 	rdlong	result1, fp
33948     14 4E 85 F1 | 	sub	fp, #20
3394c     EC 05 90 FD | 	jmp	#LR__5040
33950                 | LR__5021
33950     04 4E 05 F1 | 	add	fp, #4
33954     A7 18 02 FB | 	rdlong	arg04, fp
33958     04 4E 85 F1 | 	sub	fp, #4
3395c     10 18 06 F1 | 	add	arg04, #16
33960     0C 19 C2 FA | 	rdbyte	arg04, arg04
33964     01 18 CE F7 | 	test	arg04, #1 wz
33968     07 FA 05 A6 |  if_e	mov	result1, #7
3396c     CC 05 90 AD |  if_e	jmp	#LR__5040
33970     04 4E 05 F1 | 	add	fp, #4
33974     A7 26 02 FB | 	rdlong	local01, fp
33978     13 29 02 F6 | 	mov	local02, local01
3397c     0C 28 06 F1 | 	add	local02, #12
33980     14 2B 02 FB | 	rdlong	local03, local02
33984     14 26 06 F1 | 	add	local01, #20
33988     13 27 02 FB | 	rdlong	local01, local01
3398c     13 2B 82 F1 | 	sub	local03, local01
33990     20 4E 05 F1 | 	add	fp, #32
33994     A7 2A 62 FC | 	wrlong	local03, fp
33998     18 4E 85 F1 | 	sub	fp, #24
3399c     A7 2C 02 FB | 	rdlong	local04, fp
339a0     0C 4E 85 F1 | 	sub	fp, #12
339a4     15 2D 1A F2 | 	cmp	local04, local03 wcz
339a8     24 4E 05 11 |  if_a	add	fp, #36
339ac     A7 2C 02 1B |  if_a	rdlong	local04, fp
339b0     18 4E 85 11 |  if_a	sub	fp, #24
339b4     A7 2C 62 1C |  if_a	wrlong	local04, fp
339b8     0C 4E 85 11 |  if_a	sub	fp, #12
339bc                 | ' 
339bc                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
339bc                 | LR__5022
339bc     0C 4E 05 F1 | 	add	fp, #12
339c0     A7 28 02 FB | 	rdlong	local02, fp
339c4     0C 4E 85 F1 | 	sub	fp, #12
339c8     14 2D 02 F6 | 	mov	local04, local02
339cc     01 2C 16 F2 | 	cmp	local04, #1 wc
339d0     64 05 90 CD |  if_b	jmp	#LR__5039
339d4     04 4E 05 F1 | 	add	fp, #4
339d8     A7 2A 02 FB | 	rdlong	local03, fp
339dc     04 4E 85 F1 | 	sub	fp, #4
339e0     14 2A 06 F1 | 	add	local03, #20
339e4     15 2B 02 FB | 	rdlong	local03, local03
339e8     FF 2B CE F7 | 	test	local03, #511 wz
339ec     3C 04 90 5D |  if_ne	jmp	#LR__5037
339f0     04 4E 05 F1 | 	add	fp, #4
339f4     A7 26 02 FB | 	rdlong	local01, fp
339f8     14 26 06 F1 | 	add	local01, #20
339fc     13 2B 02 FB | 	rdlong	local03, local01
33a00     09 2A 46 F0 | 	shr	local03, #9
33a04     14 4E 05 F1 | 	add	fp, #20
33a08     A7 2E 02 FB | 	rdlong	local05, fp
33a0c     17 31 02 F6 | 	mov	local06, local05
33a10     0A 30 06 F1 | 	add	local06, #10
33a14     18 33 E2 FA | 	rdword	local07, local06
33a18     0A 30 86 F1 | 	sub	local06, #10
33a1c     19 35 32 F9 | 	getword	local08, local07, #0
33a20     01 34 86 F1 | 	sub	local08, #1
33a24     1A 2B 0A F5 | 	and	local03, local08 wz
33a28     18 4E 05 F1 | 	add	fp, #24
33a2c     A7 2A 62 FC | 	wrlong	local03, fp
33a30     30 4E 85 F1 | 	sub	fp, #48
33a34     E0 00 90 5D |  if_ne	jmp	#LR__5027
33a38     04 4E 05 F1 | 	add	fp, #4
33a3c     A7 2A 02 FB | 	rdlong	local03, fp
33a40     04 4E 85 F1 | 	sub	fp, #4
33a44     14 2A 06 F1 | 	add	local03, #20
33a48     15 2B 0A FB | 	rdlong	local03, local03 wz
33a4c     20 00 90 5D |  if_ne	jmp	#LR__5023
33a50     04 4E 05 F1 | 	add	fp, #4
33a54     A7 2A 02 FB | 	rdlong	local03, fp
33a58     08 2A 06 F1 | 	add	local03, #8
33a5c     15 2B 02 FB | 	rdlong	local03, local03
33a60     18 4E 05 F1 | 	add	fp, #24
33a64     A7 2A 62 FC | 	wrlong	local03, fp
33a68     1C 4E 85 F1 | 	sub	fp, #28
33a6c     28 00 90 FD | 	jmp	#LR__5024
33a70                 | LR__5023
33a70     04 4E 05 F1 | 	add	fp, #4
33a74     A7 34 02 FB | 	rdlong	local08, fp
33a78     1A 13 02 F6 | 	mov	arg01, local08
33a7c     04 4E 85 F1 | 	sub	fp, #4
33a80     18 34 06 F1 | 	add	local08, #24
33a84     1A 15 02 FB | 	rdlong	arg02, local08
33a88     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
33a8c     1C 4E 05 F1 | 	add	fp, #28
33a90     A7 FA 61 FC | 	wrlong	result1, fp
33a94     1C 4E 85 F1 | 	sub	fp, #28
33a98                 | LR__5024
33a98     1C 4E 05 F1 | 	add	fp, #28
33a9c     A7 2A 02 FB | 	rdlong	local03, fp
33aa0     1C 4E 85 F1 | 	sub	fp, #28
33aa4     02 2A 16 F2 | 	cmp	local03, #2 wc
33aa8     1C 00 90 3D |  if_ae	jmp	#LR__5025
33aac     04 4E 05 F1 | 	add	fp, #4
33ab0     A7 2A 02 FB | 	rdlong	local03, fp
33ab4     04 4E 85 F1 | 	sub	fp, #4
33ab8     11 2A 06 F1 | 	add	local03, #17
33abc     15 05 48 FC | 	wrbyte	#2, local03
33ac0     02 FA 05 F6 | 	mov	result1, #2
33ac4     74 04 90 FD | 	jmp	#LR__5040
33ac8                 | LR__5025
33ac8     1C 4E 05 F1 | 	add	fp, #28
33acc     A7 2A 02 FB | 	rdlong	local03, fp
33ad0     1C 4E 85 F1 | 	sub	fp, #28
33ad4     FF FF 7F FF 
33ad8     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
33adc     1C 00 90 5D |  if_ne	jmp	#LR__5026
33ae0     04 4E 05 F1 | 	add	fp, #4
33ae4     A7 2A 02 FB | 	rdlong	local03, fp
33ae8     04 4E 85 F1 | 	sub	fp, #4
33aec     11 2A 06 F1 | 	add	local03, #17
33af0     15 03 48 FC | 	wrbyte	#1, local03
33af4     01 FA 05 F6 | 	mov	result1, #1
33af8     40 04 90 FD | 	jmp	#LR__5040
33afc                 | LR__5026
33afc     04 4E 05 F1 | 	add	fp, #4
33b00     A7 2A 02 FB | 	rdlong	local03, fp
33b04     18 4E 05 F1 | 	add	fp, #24
33b08     A7 34 02 FB | 	rdlong	local08, fp
33b0c     1C 4E 85 F1 | 	sub	fp, #28
33b10     18 2A 06 F1 | 	add	local03, #24
33b14     15 35 62 FC | 	wrlong	local08, local03
33b18                 | LR__5027
33b18     18 4E 05 F1 | 	add	fp, #24
33b1c     A7 12 02 FB | 	rdlong	arg01, fp
33b20     14 4E 85 F1 | 	sub	fp, #20
33b24     A7 2A 02 FB | 	rdlong	local03, fp
33b28     04 4E 85 F1 | 	sub	fp, #4
33b2c     18 2A 06 F1 | 	add	local03, #24
33b30     15 15 02 FB | 	rdlong	arg02, local03
33b34     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
33b38     20 4E 05 F1 | 	add	fp, #32
33b3c     A7 FA 61 FC | 	wrlong	result1, fp
33b40     20 4E 85 F1 | 	sub	fp, #32
33b44     00 FA 0D F2 | 	cmp	result1, #0 wz
33b48     1C 00 90 5D |  if_ne	jmp	#LR__5028
33b4c     04 4E 05 F1 | 	add	fp, #4
33b50     A7 2A 02 FB | 	rdlong	local03, fp
33b54     04 4E 85 F1 | 	sub	fp, #4
33b58     11 2A 06 F1 | 	add	local03, #17
33b5c     15 05 48 FC | 	wrbyte	#2, local03
33b60     02 FA 05 F6 | 	mov	result1, #2
33b64     D4 03 90 FD | 	jmp	#LR__5040
33b68                 | LR__5028
33b68     20 4E 05 F1 | 	add	fp, #32
33b6c     A7 2A 02 FB | 	rdlong	local03, fp
33b70     10 4E 05 F1 | 	add	fp, #16
33b74     A7 34 02 FB | 	rdlong	local08, fp
33b78     1A 2B 02 F1 | 	add	local03, local08
33b7c     10 4E 85 F1 | 	sub	fp, #16
33b80     A7 2A 62 FC | 	wrlong	local03, fp
33b84     14 4E 85 F1 | 	sub	fp, #20
33b88     A7 2A 02 FB | 	rdlong	local03, fp
33b8c     09 2A 46 F0 | 	shr	local03, #9
33b90     20 4E 05 F1 | 	add	fp, #32
33b94     A7 2A 62 FC | 	wrlong	local03, fp
33b98     2C 4E 85 F1 | 	sub	fp, #44
33b9c     01 2A 16 F2 | 	cmp	local03, #1 wc
33ba0     5C 01 90 CD |  if_b	jmp	#LR__5032
33ba4     30 4E 05 F1 | 	add	fp, #48
33ba8     A7 2A 02 FB | 	rdlong	local03, fp
33bac     04 4E 85 F1 | 	sub	fp, #4
33bb0     A7 34 02 FB | 	rdlong	local08, fp
33bb4     1A 2B 02 F1 | 	add	local03, local08
33bb8     14 4E 85 F1 | 	sub	fp, #20
33bbc     A7 34 02 FB | 	rdlong	local08, fp
33bc0     18 4E 85 F1 | 	sub	fp, #24
33bc4     0A 34 06 F1 | 	add	local08, #10
33bc8     1A 35 E2 FA | 	rdword	local08, local08
33bcc     1A 2B 1A F2 | 	cmp	local03, local08 wcz
33bd0     28 00 90 ED |  if_be	jmp	#LR__5029
33bd4     18 4E 05 F1 | 	add	fp, #24
33bd8     A7 26 02 FB | 	rdlong	local01, fp
33bdc     0A 26 06 F1 | 	add	local01, #10
33be0     13 2B E2 FA | 	rdword	local03, local01
33be4     18 4E 05 F1 | 	add	fp, #24
33be8     A7 34 02 FB | 	rdlong	local08, fp
33bec     1A 2B 82 F1 | 	sub	local03, local08
33bf0     04 4E 85 F1 | 	sub	fp, #4
33bf4     A7 2A 62 FC | 	wrlong	local03, fp
33bf8     2C 4E 85 F1 | 	sub	fp, #44
33bfc                 | LR__5029
33bfc     18 4E 05 F1 | 	add	fp, #24
33c00     A7 26 02 FB | 	rdlong	local01, fp
33c04     01 26 06 F1 | 	add	local01, #1
33c08     13 13 C2 FA | 	rdbyte	arg01, local01
33c0c     1C 4E 05 F1 | 	add	fp, #28
33c10     A7 14 02 FB | 	rdlong	arg02, fp
33c14     14 4E 85 F1 | 	sub	fp, #20
33c18     A7 16 02 FB | 	rdlong	arg03, fp
33c1c     0C 4E 05 F1 | 	add	fp, #12
33c20     A7 18 02 FB | 	rdlong	arg04, fp
33c24     2C 4E 85 F1 | 	sub	fp, #44
33c28     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
33c2c     00 FA 0D F2 | 	cmp	result1, #0 wz
33c30     1C 00 90 AD |  if_e	jmp	#LR__5030
33c34     04 4E 05 F1 | 	add	fp, #4
33c38     A7 2A 02 FB | 	rdlong	local03, fp
33c3c     04 4E 85 F1 | 	sub	fp, #4
33c40     11 2A 06 F1 | 	add	local03, #17
33c44     15 03 48 FC | 	wrbyte	#1, local03
33c48     01 FA 05 F6 | 	mov	result1, #1
33c4c     EC 02 90 FD | 	jmp	#LR__5040
33c50                 | LR__5030
33c50     04 4E 05 F1 | 	add	fp, #4
33c54     A7 26 02 FB | 	rdlong	local01, fp
33c58     04 4E 85 F1 | 	sub	fp, #4
33c5c     10 26 06 F1 | 	add	local01, #16
33c60     13 2B C2 FA | 	rdbyte	local03, local01
33c64     80 2A CE F7 | 	test	local03, #128 wz
33c68     78 00 90 AD |  if_e	jmp	#LR__5031
33c6c     04 4E 05 F1 | 	add	fp, #4
33c70     A7 34 02 FB | 	rdlong	local08, fp
33c74     1C 34 06 F1 | 	add	local08, #28
33c78     1A 35 02 FB | 	rdlong	local08, local08
33c7c     1C 4E 05 F1 | 	add	fp, #28
33c80     A7 36 02 FB | 	rdlong	local09, fp
33c84     1B 35 82 F1 | 	sub	local08, local09
33c88     0C 4E 05 F1 | 	add	fp, #12
33c8c     A7 38 02 FB | 	rdlong	local10, fp
33c90     2C 4E 85 F1 | 	sub	fp, #44
33c94     1C 3B 02 F6 | 	mov	local11, local10
33c98     1D 35 12 F2 | 	cmp	local08, local11 wc
33c9c     44 00 90 3D |  if_ae	jmp	#LR__5031
33ca0     34 4E 05 F1 | 	add	fp, #52
33ca4     A7 12 02 FB | 	rdlong	arg01, fp
33ca8     30 4E 85 F1 | 	sub	fp, #48
33cac     A7 14 02 FB | 	rdlong	arg02, fp
33cb0     0A 3B 02 F6 | 	mov	local11, arg02
33cb4     1C 3A 06 F1 | 	add	local11, #28
33cb8     1D 37 02 FB | 	rdlong	local09, local11
33cbc     1C 4E 05 F1 | 	add	fp, #28
33cc0     A7 2E 02 FB | 	rdlong	local05, fp
33cc4     17 37 82 F1 | 	sub	local09, local05
33cc8     09 36 66 F0 | 	shl	local09, #9
33ccc     1B 3B 02 F6 | 	mov	local11, local09
33cd0     1B 13 02 F1 | 	add	arg01, local09
33cd4     20 4E 85 F1 | 	sub	fp, #32
33cd8     28 14 06 F1 | 	add	arg02, #40
33cdc     09 16 C6 F9 | 	decod	arg03, #9
33ce0     E0 42 BF FD | 	call	#__system____builtin_memmove
33ce4                 | LR__5031
33ce4     2C 4E 05 F1 | 	add	fp, #44
33ce8     A7 2A 02 FB | 	rdlong	local03, fp
33cec     09 2A 66 F0 | 	shl	local03, #9
33cf0     04 4E 85 F1 | 	sub	fp, #4
33cf4     A7 2A 62 FC | 	wrlong	local03, fp
33cf8     28 4E 85 F1 | 	sub	fp, #40
33cfc                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
33cfc                 | ' 				}
33cfc                 | ' 
33cfc                 | ' 
33cfc                 | ' 				rcnt =  ((UINT) 512 )  * cc;
33cfc                 | ' 				continue;
33cfc     B4 01 90 FD | 	jmp	#LR__5038
33d00                 | LR__5032
33d00     04 4E 05 F1 | 	add	fp, #4
33d04     A7 2A 02 FB | 	rdlong	local03, fp
33d08     1C 2A 06 F1 | 	add	local03, #28
33d0c     15 2B 02 FB | 	rdlong	local03, local03
33d10     1C 4E 05 F1 | 	add	fp, #28
33d14     A7 26 02 FB | 	rdlong	local01, fp
33d18     20 4E 85 F1 | 	sub	fp, #32
33d1c     13 2B 0A F2 | 	cmp	local03, local01 wz
33d20     EC 00 90 AD |  if_e	jmp	#LR__5036
33d24     04 4E 05 F1 | 	add	fp, #4
33d28     A7 26 02 FB | 	rdlong	local01, fp
33d2c     04 4E 85 F1 | 	sub	fp, #4
33d30     10 26 06 F1 | 	add	local01, #16
33d34     13 2B C2 FA | 	rdbyte	local03, local01
33d38     80 2A CE F7 | 	test	local03, #128 wz
33d3c     7C 00 90 AD |  if_e	jmp	#LR__5034
33d40     18 4E 05 F1 | 	add	fp, #24
33d44     A7 26 02 FB | 	rdlong	local01, fp
33d48     01 26 06 F1 | 	add	local01, #1
33d4c     13 13 C2 FA | 	rdbyte	arg01, local01
33d50     14 4E 85 F1 | 	sub	fp, #20
33d54     A7 2A 02 FB | 	rdlong	local03, fp
33d58     15 15 02 F6 | 	mov	arg02, local03
33d5c     28 14 06 F1 | 	add	arg02, #40
33d60     04 4E 85 F1 | 	sub	fp, #4
33d64     1C 2A 06 F1 | 	add	local03, #28
33d68     15 17 02 FB | 	rdlong	arg03, local03
33d6c     01 18 06 F6 | 	mov	arg04, #1
33d70     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
33d74     00 FA 0D F2 | 	cmp	result1, #0 wz
33d78     1C 00 90 AD |  if_e	jmp	#LR__5033
33d7c     04 4E 05 F1 | 	add	fp, #4
33d80     A7 2A 02 FB | 	rdlong	local03, fp
33d84     04 4E 85 F1 | 	sub	fp, #4
33d88     11 2A 06 F1 | 	add	local03, #17
33d8c     15 03 48 FC | 	wrbyte	#1, local03
33d90     01 FA 05 F6 | 	mov	result1, #1
33d94     A4 01 90 FD | 	jmp	#LR__5040
33d98                 | LR__5033
33d98     04 4E 05 F1 | 	add	fp, #4
33d9c     A7 3A 02 FB | 	rdlong	local11, fp
33da0     1D 2B 02 F6 | 	mov	local03, local11
33da4     04 4E 85 F1 | 	sub	fp, #4
33da8     10 3A 06 F1 | 	add	local11, #16
33dac     1D 3B C2 FA | 	rdbyte	local11, local11
33db0     7F 3A 06 F5 | 	and	local11, #127
33db4     10 2A 06 F1 | 	add	local03, #16
33db8     15 3B 42 FC | 	wrbyte	local11, local03
33dbc                 | LR__5034
33dbc     18 4E 05 F1 | 	add	fp, #24
33dc0     A7 26 02 FB | 	rdlong	local01, fp
33dc4     01 26 06 F1 | 	add	local01, #1
33dc8     13 13 C2 FA | 	rdbyte	arg01, local01
33dcc     14 4E 85 F1 | 	sub	fp, #20
33dd0     A7 14 02 FB | 	rdlong	arg02, fp
33dd4     28 14 06 F1 | 	add	arg02, #40
33dd8     1C 4E 05 F1 | 	add	fp, #28
33ddc     A7 16 02 FB | 	rdlong	arg03, fp
33de0     20 4E 85 F1 | 	sub	fp, #32
33de4     01 18 06 F6 | 	mov	arg04, #1
33de8     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
33dec     00 FA 0D F2 | 	cmp	result1, #0 wz
33df0     1C 00 90 AD |  if_e	jmp	#LR__5035
33df4     04 4E 05 F1 | 	add	fp, #4
33df8     A7 2A 02 FB | 	rdlong	local03, fp
33dfc     04 4E 85 F1 | 	sub	fp, #4
33e00     11 2A 06 F1 | 	add	local03, #17
33e04     15 03 48 FC | 	wrbyte	#1, local03
33e08     01 FA 05 F6 | 	mov	result1, #1
33e0c     2C 01 90 FD | 	jmp	#LR__5040
33e10                 | LR__5035
33e10                 | LR__5036
33e10     04 4E 05 F1 | 	add	fp, #4
33e14     A7 2A 02 FB | 	rdlong	local03, fp
33e18     1C 4E 05 F1 | 	add	fp, #28
33e1c     A7 3A 02 FB | 	rdlong	local11, fp
33e20     20 4E 85 F1 | 	sub	fp, #32
33e24     1C 2A 06 F1 | 	add	local03, #28
33e28     15 3B 62 FC | 	wrlong	local11, local03
33e2c                 | LR__5037
33e2c     04 4E 05 F1 | 	add	fp, #4
33e30     A7 26 02 FB | 	rdlong	local01, fp
33e34     14 26 06 F1 | 	add	local01, #20
33e38     13 3B 02 FB | 	rdlong	local11, local01
33e3c     FF 3B 06 F5 | 	and	local11, #511
33e40     09 2A C6 F9 | 	decod	local03, #9
33e44     1D 2B 82 F1 | 	sub	local03, local11
33e48     24 4E 05 F1 | 	add	fp, #36
33e4c     A7 2A 62 FC | 	wrlong	local03, fp
33e50     1C 4E 85 F1 | 	sub	fp, #28
33e54     A7 3A 02 FB | 	rdlong	local11, fp
33e58     0C 4E 85 F1 | 	sub	fp, #12
33e5c     1D 2B 1A F2 | 	cmp	local03, local11 wcz
33e60     0C 4E 05 11 |  if_a	add	fp, #12
33e64     A7 2A 02 1B |  if_a	rdlong	local03, fp
33e68     1C 4E 05 11 |  if_a	add	fp, #28
33e6c     A7 2A 62 1C |  if_a	wrlong	local03, fp
33e70     28 4E 85 11 |  if_a	sub	fp, #40
33e74     34 4E 05 F1 | 	add	fp, #52
33e78     A7 12 02 FB | 	rdlong	arg01, fp
33e7c     30 4E 85 F1 | 	sub	fp, #48
33e80     A7 30 02 FB | 	rdlong	local06, fp
33e84     18 15 02 F6 | 	mov	arg02, local06
33e88     28 14 06 F1 | 	add	arg02, #40
33e8c     14 30 06 F1 | 	add	local06, #20
33e90     18 3B 02 FB | 	rdlong	local11, local06
33e94     1D 37 02 F6 | 	mov	local09, local11
33e98     1B 39 02 F6 | 	mov	local10, local09
33e9c     FF 39 06 F5 | 	and	local10, #511
33ea0     1C 15 02 F1 | 	add	arg02, local10
33ea4     24 4E 05 F1 | 	add	fp, #36
33ea8     A7 16 02 FB | 	rdlong	arg03, fp
33eac     28 4E 85 F1 | 	sub	fp, #40
33eb0     10 41 BF FD | 	call	#__system____builtin_memmove
33eb4                 | LR__5038
33eb4     0C 4E 05 F1 | 	add	fp, #12
33eb8     A7 2A 02 FB | 	rdlong	local03, fp
33ebc     1C 4E 05 F1 | 	add	fp, #28
33ec0     A7 34 02 FB | 	rdlong	local08, fp
33ec4     1A 2B 82 F1 | 	sub	local03, local08
33ec8     1C 4E 85 F1 | 	sub	fp, #28
33ecc     A7 2A 62 FC | 	wrlong	local03, fp
33ed0     04 4E 05 F1 | 	add	fp, #4
33ed4     A7 26 02 FB | 	rdlong	local01, fp
33ed8     13 33 02 FB | 	rdlong	local07, local01
33edc     18 4E 05 F1 | 	add	fp, #24
33ee0     A7 34 02 FB | 	rdlong	local08, fp
33ee4     1A 33 02 F1 | 	add	local07, local08
33ee8     13 33 62 FC | 	wrlong	local07, local01
33eec     0C 4E 05 F1 | 	add	fp, #12
33ef0     A7 2A 02 FB | 	rdlong	local03, fp
33ef4     0C 4E 85 F1 | 	sub	fp, #12
33ef8     A7 3C 02 FB | 	rdlong	local12, fp
33efc     1E 2B 02 F1 | 	add	local03, local12
33f00     0C 4E 05 F1 | 	add	fp, #12
33f04     A7 2A 62 FC | 	wrlong	local03, fp
33f08     30 4E 85 F1 | 	sub	fp, #48
33f0c     A7 3E 02 FB | 	rdlong	local13, fp
33f10     1F 2B 02 F6 | 	mov	local03, local13
33f14     14 3E 06 F1 | 	add	local13, #20
33f18     1F 41 02 FB | 	rdlong	local14, local13
33f1c     24 4E 05 F1 | 	add	fp, #36
33f20     A7 30 02 FB | 	rdlong	local06, fp
33f24     28 4E 85 F1 | 	sub	fp, #40
33f28     18 41 02 F1 | 	add	local14, local06
33f2c     14 2A 06 F1 | 	add	local03, #20
33f30     15 41 62 FC | 	wrlong	local14, local03
33f34     84 FA 9F FD | 	jmp	#LR__5022
33f38                 | LR__5039
33f38                 | ' 
33f38                 | ' 
33f38                 | ' 
33f38                 | ' 
33f38                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
33f38                 | ' 
33f38                 | ' 	}
33f38                 | ' 
33f38                 | ' 	return FR_OK ;
33f38     00 FA 05 F6 | 	mov	result1, #0
33f3c                 | LR__5040
33f3c     A7 F0 03 F6 | 	mov	ptra, fp
33f40     B2 00 A0 FD | 	call	#popregs_
33f44                 | _fatfs_cc_f_read_ret
33f44     2D 00 64 FD | 	ret
33f48                 | 
33f48                 | _fatfs_cc_f_write
33f48     15 4A 05 F6 | 	mov	COUNT_, #21
33f4c     A8 00 A0 FD | 	call	#pushregs_
33f50     34 F0 07 F1 | 	add	ptra, #52
33f54     04 4E 05 F1 | 	add	fp, #4
33f58     A7 12 62 FC | 	wrlong	arg01, fp
33f5c     04 4E 05 F1 | 	add	fp, #4
33f60     A7 14 62 FC | 	wrlong	arg02, fp
33f64     04 4E 05 F1 | 	add	fp, #4
33f68     A7 16 62 FC | 	wrlong	arg03, fp
33f6c     04 4E 05 F1 | 	add	fp, #4
33f70     A7 18 62 FC | 	wrlong	arg04, fp
33f74     08 4E 85 F1 | 	sub	fp, #8
33f78     A7 FA 01 FB | 	rdlong	result1, fp
33f7c     28 4E 05 F1 | 	add	fp, #40
33f80     A7 FA 61 FC | 	wrlong	result1, fp
33f84     20 4E 85 F1 | 	sub	fp, #32
33f88     A7 FA 01 FB | 	rdlong	result1, fp
33f8c     FD 00 68 FC | 	wrlong	#0, result1
33f90     0C 4E 85 F1 | 	sub	fp, #12
33f94     A7 12 02 FB | 	rdlong	arg01, fp
33f98     14 4E 05 F1 | 	add	fp, #20
33f9c     A7 14 02 F6 | 	mov	arg02, fp
33fa0     18 4E 85 F1 | 	sub	fp, #24
33fa4     88 F0 BF FD | 	call	#_fatfs_cc_validate
33fa8     14 4E 05 F1 | 	add	fp, #20
33fac     A7 FA 61 FC | 	wrlong	result1, fp
33fb0     00 FA 4D F2 | 	cmps	result1, #0 wz
33fb4     14 4E 85 F1 | 	sub	fp, #20
33fb8     20 00 90 5D |  if_ne	jmp	#LR__5050
33fbc     04 4E 05 F1 | 	add	fp, #4
33fc0     A7 14 02 FB | 	rdlong	arg02, fp
33fc4     11 14 06 F1 | 	add	arg02, #17
33fc8     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
33fcc     10 4E 05 F1 | 	add	fp, #16
33fd0     A7 14 62 FC | 	wrlong	arg02, fp
33fd4     14 4E 85 F1 | 	sub	fp, #20
33fd8     10 00 90 AD |  if_e	jmp	#LR__5051
33fdc                 | LR__5050
33fdc     14 4E 05 F1 | 	add	fp, #20
33fe0     A7 FA 01 FB | 	rdlong	result1, fp
33fe4     14 4E 85 F1 | 	sub	fp, #20
33fe8     44 07 90 FD | 	jmp	#LR__5073
33fec                 | LR__5051
33fec     04 4E 05 F1 | 	add	fp, #4
33ff0     A7 14 02 FB | 	rdlong	arg02, fp
33ff4     04 4E 85 F1 | 	sub	fp, #4
33ff8     10 14 06 F1 | 	add	arg02, #16
33ffc     0A 15 C2 FA | 	rdbyte	arg02, arg02
34000     02 14 CE F7 | 	test	arg02, #2 wz
34004     07 FA 05 A6 |  if_e	mov	result1, #7
34008     24 07 90 AD |  if_e	jmp	#LR__5073
3400c     04 4E 05 F1 | 	add	fp, #4
34010     A7 14 02 FB | 	rdlong	arg02, fp
34014     0A 13 02 F6 | 	mov	arg01, arg02
34018     14 12 06 F1 | 	add	arg01, #20
3401c     09 13 02 FB | 	rdlong	arg01, arg01
34020     08 4E 05 F1 | 	add	fp, #8
34024     A7 FA 01 FB | 	rdlong	result1, fp
34028     FD 12 02 F1 | 	add	arg01, result1
3402c     0C 4E 85 F1 | 	sub	fp, #12
34030     14 14 06 F1 | 	add	arg02, #20
34034     0A FB 01 FB | 	rdlong	result1, arg02
34038     FD 12 12 F2 | 	cmp	arg01, result1 wc
3403c     24 00 90 3D |  if_ae	jmp	#LR__5052
34040     04 4E 05 F1 | 	add	fp, #4
34044     A7 14 02 FB | 	rdlong	arg02, fp
34048     01 FA 65 F6 | 	neg	result1, #1
3404c     14 14 06 F1 | 	add	arg02, #20
34050     0A 15 02 FB | 	rdlong	arg02, arg02
34054     0A FB 81 F1 | 	sub	result1, arg02
34058     08 4E 05 F1 | 	add	fp, #8
3405c     A7 FA 61 FC | 	wrlong	result1, fp
34060     0C 4E 85 F1 | 	sub	fp, #12
34064                 | LR__5052
34064                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
34064                 | ' 	}
34064                 | ' 
34064                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
34064                 | LR__5053
34064     0C 4E 05 F1 | 	add	fp, #12
34068     A7 FA 01 FB | 	rdlong	result1, fp
3406c     0C 4E 85 F1 | 	sub	fp, #12
34070     01 FA 15 F2 | 	cmp	result1, #1 wc
34074     90 06 90 CD |  if_b	jmp	#LR__5072
34078     04 4E 05 F1 | 	add	fp, #4
3407c     A7 FA 01 FB | 	rdlong	result1, fp
34080     04 4E 85 F1 | 	sub	fp, #4
34084     14 FA 05 F1 | 	add	result1, #20
34088     FD FA 01 FB | 	rdlong	result1, result1
3408c     FF FB CD F7 | 	test	result1, #511 wz
34090     D8 04 90 5D |  if_ne	jmp	#LR__5068
34094     04 4E 05 F1 | 	add	fp, #4
34098     A7 FA 01 FB | 	rdlong	result1, fp
3409c     14 FA 05 F1 | 	add	result1, #20
340a0     FD FA 01 FB | 	rdlong	result1, result1
340a4     09 FA 45 F0 | 	shr	result1, #9
340a8     14 4E 05 F1 | 	add	fp, #20
340ac     A7 14 02 FB | 	rdlong	arg02, fp
340b0     0A 14 06 F1 | 	add	arg02, #10
340b4     0A 19 E2 FA | 	rdword	arg04, arg02
340b8     0C 15 32 F9 | 	getword	arg02, arg04, #0
340bc     01 14 86 F1 | 	sub	arg02, #1
340c0     0A FB 09 F5 | 	and	result1, arg02 wz
340c4     14 4E 05 F1 | 	add	fp, #20
340c8     A7 FA 61 FC | 	wrlong	result1, fp
340cc     2C 4E 85 F1 | 	sub	fp, #44
340d0     44 01 90 5D |  if_ne	jmp	#LR__5059
340d4     04 4E 05 F1 | 	add	fp, #4
340d8     A7 FA 01 FB | 	rdlong	result1, fp
340dc     04 4E 85 F1 | 	sub	fp, #4
340e0     14 FA 05 F1 | 	add	result1, #20
340e4     FD 14 0A FB | 	rdlong	arg02, result1 wz
340e8     44 00 90 5D |  if_ne	jmp	#LR__5054
340ec     04 4E 05 F1 | 	add	fp, #4
340f0     A7 14 02 FB | 	rdlong	arg02, fp
340f4     08 14 06 F1 | 	add	arg02, #8
340f8     0A 15 0A FB | 	rdlong	arg02, arg02 wz
340fc     18 4E 05 F1 | 	add	fp, #24
34100     A7 14 62 FC | 	wrlong	arg02, fp
34104     1C 4E 85 F1 | 	sub	fp, #28
34108     4C 00 90 5D |  if_ne	jmp	#LR__5055
3410c     04 4E 05 F1 | 	add	fp, #4
34110     A7 12 02 FB | 	rdlong	arg01, fp
34114     04 4E 85 F1 | 	sub	fp, #4
34118     00 14 06 F6 | 	mov	arg02, #0
3411c     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
34120     1C 4E 05 F1 | 	add	fp, #28
34124     A7 FA 61 FC | 	wrlong	result1, fp
34128     1C 4E 85 F1 | 	sub	fp, #28
3412c     28 00 90 FD | 	jmp	#LR__5055
34130                 | LR__5054
34130     04 4E 05 F1 | 	add	fp, #4
34134     A7 18 02 FB | 	rdlong	arg04, fp
34138     0C 13 02 F6 | 	mov	arg01, arg04
3413c     04 4E 85 F1 | 	sub	fp, #4
34140     18 18 06 F1 | 	add	arg04, #24
34144     0C 15 02 FB | 	rdlong	arg02, arg04
34148     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
3414c     1C 4E 05 F1 | 	add	fp, #28
34150     A7 FA 61 FC | 	wrlong	result1, fp
34154     1C 4E 85 F1 | 	sub	fp, #28
34158                 | LR__5055
34158     1C 4E 05 F1 | 	add	fp, #28
3415c     A7 FA 09 FB | 	rdlong	result1, fp wz
34160     1C 4E 85 F1 | 	sub	fp, #28
34164     A0 05 90 AD |  if_e	jmp	#LR__5072
34168     1C 4E 05 F1 | 	add	fp, #28
3416c     A7 FA 01 FB | 	rdlong	result1, fp
34170     1C 4E 85 F1 | 	sub	fp, #28
34174     01 FA 0D F2 | 	cmp	result1, #1 wz
34178     1C 00 90 5D |  if_ne	jmp	#LR__5056
3417c     04 4E 05 F1 | 	add	fp, #4
34180     A7 FA 01 FB | 	rdlong	result1, fp
34184     04 4E 85 F1 | 	sub	fp, #4
34188     11 FA 05 F1 | 	add	result1, #17
3418c     FD 04 48 FC | 	wrbyte	#2, result1
34190     02 FA 05 F6 | 	mov	result1, #2
34194     98 05 90 FD | 	jmp	#LR__5073
34198                 | LR__5056
34198     1C 4E 05 F1 | 	add	fp, #28
3419c     A7 FA 01 FB | 	rdlong	result1, fp
341a0     1C 4E 85 F1 | 	sub	fp, #28
341a4     FF FF 7F FF 
341a8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
341ac     1C 00 90 5D |  if_ne	jmp	#LR__5057
341b0     04 4E 05 F1 | 	add	fp, #4
341b4     A7 FA 01 FB | 	rdlong	result1, fp
341b8     04 4E 85 F1 | 	sub	fp, #4
341bc     11 FA 05 F1 | 	add	result1, #17
341c0     FD 02 48 FC | 	wrbyte	#1, result1
341c4     01 FA 05 F6 | 	mov	result1, #1
341c8     64 05 90 FD | 	jmp	#LR__5073
341cc                 | LR__5057
341cc     04 4E 05 F1 | 	add	fp, #4
341d0     A7 FA 01 FB | 	rdlong	result1, fp
341d4     18 4E 05 F1 | 	add	fp, #24
341d8     A7 18 02 FB | 	rdlong	arg04, fp
341dc     18 FA 05 F1 | 	add	result1, #24
341e0     FD 18 62 FC | 	wrlong	arg04, result1
341e4     18 4E 85 F1 | 	sub	fp, #24
341e8     A7 FA 01 FB | 	rdlong	result1, fp
341ec     04 4E 85 F1 | 	sub	fp, #4
341f0     08 FA 05 F1 | 	add	result1, #8
341f4     FD FA 09 FB | 	rdlong	result1, result1 wz
341f8     1C 00 90 5D |  if_ne	jmp	#LR__5058
341fc     04 4E 05 F1 | 	add	fp, #4
34200     A7 18 02 FB | 	rdlong	arg04, fp
34204     18 4E 05 F1 | 	add	fp, #24
34208     A7 FA 01 FB | 	rdlong	result1, fp
3420c     1C 4E 85 F1 | 	sub	fp, #28
34210     08 18 06 F1 | 	add	arg04, #8
34214     0C FB 61 FC | 	wrlong	result1, arg04
34218                 | LR__5058
34218                 | LR__5059
34218     04 4E 05 F1 | 	add	fp, #4
3421c     A7 18 02 FB | 	rdlong	arg04, fp
34220     04 4E 85 F1 | 	sub	fp, #4
34224     10 18 06 F1 | 	add	arg04, #16
34228     0C 19 C2 FA | 	rdbyte	arg04, arg04
3422c     80 18 CE F7 | 	test	arg04, #128 wz
34230     7C 00 90 AD |  if_e	jmp	#LR__5061
34234     18 4E 05 F1 | 	add	fp, #24
34238     A7 18 02 FB | 	rdlong	arg04, fp
3423c     01 18 06 F1 | 	add	arg04, #1
34240     0C 13 C2 FA | 	rdbyte	arg01, arg04
34244     14 4E 85 F1 | 	sub	fp, #20
34248     A7 18 02 FB | 	rdlong	arg04, fp
3424c     0C 15 02 F6 | 	mov	arg02, arg04
34250     28 14 06 F1 | 	add	arg02, #40
34254     04 4E 85 F1 | 	sub	fp, #4
34258     1C 18 06 F1 | 	add	arg04, #28
3425c     0C 17 02 FB | 	rdlong	arg03, arg04
34260     01 18 06 F6 | 	mov	arg04, #1
34264     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
34268     00 FA 0D F2 | 	cmp	result1, #0 wz
3426c     1C 00 90 AD |  if_e	jmp	#LR__5060
34270     04 4E 05 F1 | 	add	fp, #4
34274     A7 FA 01 FB | 	rdlong	result1, fp
34278     04 4E 85 F1 | 	sub	fp, #4
3427c     11 FA 05 F1 | 	add	result1, #17
34280     FD 02 48 FC | 	wrbyte	#1, result1
34284     01 FA 05 F6 | 	mov	result1, #1
34288     A4 04 90 FD | 	jmp	#LR__5073
3428c                 | LR__5060
3428c     04 4E 05 F1 | 	add	fp, #4
34290     A7 18 02 FB | 	rdlong	arg04, fp
34294     0C FB 01 F6 | 	mov	result1, arg04
34298     04 4E 85 F1 | 	sub	fp, #4
3429c     10 18 06 F1 | 	add	arg04, #16
342a0     0C 19 C2 FA | 	rdbyte	arg04, arg04
342a4     7F 18 06 F5 | 	and	arg04, #127
342a8     10 FA 05 F1 | 	add	result1, #16
342ac     FD 18 42 FC | 	wrbyte	arg04, result1
342b0                 | LR__5061
342b0     18 4E 05 F1 | 	add	fp, #24
342b4     A7 12 02 FB | 	rdlong	arg01, fp
342b8     14 4E 85 F1 | 	sub	fp, #20
342bc     A7 14 02 FB | 	rdlong	arg02, fp
342c0     04 4E 85 F1 | 	sub	fp, #4
342c4     18 14 06 F1 | 	add	arg02, #24
342c8     0A 15 02 FB | 	rdlong	arg02, arg02
342cc     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
342d0     20 4E 05 F1 | 	add	fp, #32
342d4     A7 FA 61 FC | 	wrlong	result1, fp
342d8     20 4E 85 F1 | 	sub	fp, #32
342dc     00 FA 0D F2 | 	cmp	result1, #0 wz
342e0     1C 00 90 5D |  if_ne	jmp	#LR__5062
342e4     04 4E 05 F1 | 	add	fp, #4
342e8     A7 FA 01 FB | 	rdlong	result1, fp
342ec     04 4E 85 F1 | 	sub	fp, #4
342f0     11 FA 05 F1 | 	add	result1, #17
342f4     FD 04 48 FC | 	wrbyte	#2, result1
342f8     02 FA 05 F6 | 	mov	result1, #2
342fc     30 04 90 FD | 	jmp	#LR__5073
34300                 | LR__5062
34300     20 4E 05 F1 | 	add	fp, #32
34304     A7 FA 01 FB | 	rdlong	result1, fp
34308     0C 4E 05 F1 | 	add	fp, #12
3430c     A7 26 02 FB | 	rdlong	local01, fp
34310     13 FB 01 F1 | 	add	result1, local01
34314     0C 4E 85 F1 | 	sub	fp, #12
34318     A7 FA 61 FC | 	wrlong	result1, fp
3431c     14 4E 85 F1 | 	sub	fp, #20
34320     A7 FA 01 FB | 	rdlong	result1, fp
34324     09 FA 45 F0 | 	shr	result1, #9
34328     1C 4E 05 F1 | 	add	fp, #28
3432c     A7 FA 61 FC | 	wrlong	result1, fp
34330     28 4E 85 F1 | 	sub	fp, #40
34334     01 FA 15 F2 | 	cmp	result1, #1 wc
34338     60 01 90 CD |  if_b	jmp	#LR__5066
3433c     2C 4E 05 F1 | 	add	fp, #44
34340     A7 FA 01 FB | 	rdlong	result1, fp
34344     04 4E 85 F1 | 	sub	fp, #4
34348     A7 18 02 FB | 	rdlong	arg04, fp
3434c     0C FB 01 F1 | 	add	result1, arg04
34350     10 4E 85 F1 | 	sub	fp, #16
34354     A7 18 02 FB | 	rdlong	arg04, fp
34358     18 4E 85 F1 | 	sub	fp, #24
3435c     0A 18 06 F1 | 	add	arg04, #10
34360     0C 19 E2 FA | 	rdword	arg04, arg04
34364     0C FB 19 F2 | 	cmp	result1, arg04 wcz
34368     28 00 90 ED |  if_be	jmp	#LR__5063
3436c     18 4E 05 F1 | 	add	fp, #24
34370     A7 FA 01 FB | 	rdlong	result1, fp
34374     0A FA 05 F1 | 	add	result1, #10
34378     FD FA E1 FA | 	rdword	result1, result1
3437c     14 4E 05 F1 | 	add	fp, #20
34380     A7 18 02 FB | 	rdlong	arg04, fp
34384     0C FB 81 F1 | 	sub	result1, arg04
34388     04 4E 85 F1 | 	sub	fp, #4
3438c     A7 FA 61 FC | 	wrlong	result1, fp
34390     28 4E 85 F1 | 	sub	fp, #40
34394                 | LR__5063
34394     18 4E 05 F1 | 	add	fp, #24
34398     A7 18 02 FB | 	rdlong	arg04, fp
3439c     01 18 06 F1 | 	add	arg04, #1
343a0     0C 13 C2 FA | 	rdbyte	arg01, arg04
343a4     18 4E 05 F1 | 	add	fp, #24
343a8     A7 14 02 FB | 	rdlong	arg02, fp
343ac     10 4E 85 F1 | 	sub	fp, #16
343b0     A7 16 02 FB | 	rdlong	arg03, fp
343b4     08 4E 05 F1 | 	add	fp, #8
343b8     A7 18 02 FB | 	rdlong	arg04, fp
343bc     28 4E 85 F1 | 	sub	fp, #40
343c0     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
343c4     00 FA 0D F2 | 	cmp	result1, #0 wz
343c8     1C 00 90 AD |  if_e	jmp	#LR__5064
343cc     04 4E 05 F1 | 	add	fp, #4
343d0     A7 26 02 FB | 	rdlong	local01, fp
343d4     04 4E 85 F1 | 	sub	fp, #4
343d8     11 26 06 F1 | 	add	local01, #17
343dc     13 03 48 FC | 	wrbyte	#1, local01
343e0     01 FA 05 F6 | 	mov	result1, #1
343e4     48 03 90 FD | 	jmp	#LR__5073
343e8                 | LR__5064
343e8     04 4E 05 F1 | 	add	fp, #4
343ec     A7 FA 01 FB | 	rdlong	result1, fp
343f0     1C FA 05 F1 | 	add	result1, #28
343f4     FD FA 01 FB | 	rdlong	result1, result1
343f8     1C 4E 05 F1 | 	add	fp, #28
343fc     A7 28 02 FB | 	rdlong	local02, fp
34400     14 FB 81 F1 | 	sub	result1, local02
34404     08 4E 05 F1 | 	add	fp, #8
34408     A7 18 02 FB | 	rdlong	arg04, fp
3440c     28 4E 85 F1 | 	sub	fp, #40
34410     0C FB 11 F2 | 	cmp	result1, arg04 wc
34414     68 00 90 3D |  if_ae	jmp	#LR__5065
34418     04 4E 05 F1 | 	add	fp, #4
3441c     A7 12 02 FB | 	rdlong	arg01, fp
34420     28 12 06 F1 | 	add	arg01, #40
34424     2C 4E 05 F1 | 	add	fp, #44
34428     A7 14 02 FB | 	rdlong	arg02, fp
3442c     2C 4E 85 F1 | 	sub	fp, #44
34430     A7 FA 01 FB | 	rdlong	result1, fp
34434     1C FA 05 F1 | 	add	result1, #28
34438     FD 2A 02 FB | 	rdlong	local03, result1
3443c     1C 4E 05 F1 | 	add	fp, #28
34440     A7 18 02 FB | 	rdlong	arg04, fp
34444     20 4E 85 F1 | 	sub	fp, #32
34448     0C 2B 82 F1 | 	sub	local03, arg04
3444c     09 2A 66 F0 | 	shl	local03, #9
34450     15 15 02 F1 | 	add	arg02, local03
34454     09 16 C6 F9 | 	decod	arg03, #9
34458     68 3B BF FD | 	call	#__system____builtin_memmove
3445c     04 4E 05 F1 | 	add	fp, #4
34460     A7 18 02 FB | 	rdlong	arg04, fp
34464     0C FB 01 F6 | 	mov	result1, arg04
34468     04 4E 85 F1 | 	sub	fp, #4
3446c     10 18 06 F1 | 	add	arg04, #16
34470     0C 19 C2 FA | 	rdbyte	arg04, arg04
34474     7F 18 06 F5 | 	and	arg04, #127
34478     10 FA 05 F1 | 	add	result1, #16
3447c     FD 18 42 FC | 	wrbyte	arg04, result1
34480                 | LR__5065
34480     28 4E 05 F1 | 	add	fp, #40
34484     A7 FA 01 FB | 	rdlong	result1, fp
34488     09 FA 65 F0 | 	shl	result1, #9
3448c     04 4E 85 F1 | 	sub	fp, #4
34490     A7 FA 61 FC | 	wrlong	result1, fp
34494     24 4E 85 F1 | 	sub	fp, #36
34498                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
34498                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
34498                 | ' 				}
34498                 | ' 
34498                 | ' 
34498                 | ' 				wcnt =  ((UINT) 512 )  * cc;
34498                 | ' 				continue;
34498     74 01 90 FD | 	jmp	#LR__5069
3449c                 | LR__5066
3449c     04 4E 05 F1 | 	add	fp, #4
344a0     A7 28 02 FB | 	rdlong	local02, fp
344a4     1C 28 06 F1 | 	add	local02, #28
344a8     14 FB 01 FB | 	rdlong	result1, local02
344ac     1C 4E 05 F1 | 	add	fp, #28
344b0     A7 28 02 FB | 	rdlong	local02, fp
344b4     20 4E 85 F1 | 	sub	fp, #32
344b8     14 FB 09 F2 | 	cmp	result1, local02 wz
344bc     90 00 90 AD |  if_e	jmp	#LR__5067
344c0     04 4E 05 F1 | 	add	fp, #4
344c4     A7 FA 01 FB | 	rdlong	result1, fp
344c8     FD 2A 02 F6 | 	mov	local03, result1
344cc     04 4E 85 F1 | 	sub	fp, #4
344d0     14 2A 06 F1 | 	add	local03, #20
344d4     15 2B 02 FB | 	rdlong	local03, local03
344d8     0C FA 05 F1 | 	add	result1, #12
344dc     FD 2C 02 FB | 	rdlong	local04, result1
344e0     16 2F 02 F6 | 	mov	local05, local04
344e4     17 2B 12 F2 | 	cmp	local03, local05 wc
344e8     64 00 90 3D |  if_ae	jmp	#LR__5067
344ec     18 4E 05 F1 | 	add	fp, #24
344f0     A7 18 02 FB | 	rdlong	arg04, fp
344f4     01 18 06 F1 | 	add	arg04, #1
344f8     0C 13 C2 FA | 	rdbyte	arg01, arg04
344fc     14 4E 85 F1 | 	sub	fp, #20
34500     A7 30 02 FB | 	rdlong	local06, fp
34504     28 30 06 F1 | 	add	local06, #40
34508     18 33 02 F6 | 	mov	local07, local06
3450c     1C 4E 05 F1 | 	add	fp, #28
34510     A7 34 02 FB | 	rdlong	local08, fp
34514     20 4E 85 F1 | 	sub	fp, #32
34518     01 36 06 F6 | 	mov	local09, #1
3451c     19 15 02 F6 | 	mov	arg02, local07
34520     1A 17 02 F6 | 	mov	arg03, local08
34524     01 18 06 F6 | 	mov	arg04, #1
34528     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
3452c     FD 38 0A F6 | 	mov	local10, result1 wz
34530     1C 00 90 AD |  if_e	jmp	#LR__5067
34534     04 4E 05 F1 | 	add	fp, #4
34538     A7 38 02 FB | 	rdlong	local10, fp
3453c     04 4E 85 F1 | 	sub	fp, #4
34540     11 38 06 F1 | 	add	local10, #17
34544     1C 03 48 FC | 	wrbyte	#1, local10
34548                 | ' 				fp->fptr < fp->obj.objsize &&
34548                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
34548                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
34548     01 FA 05 F6 | 	mov	result1, #1
3454c     E0 01 90 FD | 	jmp	#LR__5073
34550                 | LR__5067
34550     04 4E 05 F1 | 	add	fp, #4
34554     A7 18 02 FB | 	rdlong	arg04, fp
34558     1C 4E 05 F1 | 	add	fp, #28
3455c     A7 FA 01 FB | 	rdlong	result1, fp
34560     20 4E 85 F1 | 	sub	fp, #32
34564     1C 18 06 F1 | 	add	arg04, #28
34568     0C FB 61 FC | 	wrlong	result1, arg04
3456c                 | LR__5068
3456c     04 4E 05 F1 | 	add	fp, #4
34570     A7 FA 01 FB | 	rdlong	result1, fp
34574     14 FA 05 F1 | 	add	result1, #20
34578     FD FA 01 FB | 	rdlong	result1, result1
3457c     FF FB 05 F5 | 	and	result1, #511
34580     09 3A C6 F9 | 	decod	local11, #9
34584     FD 3A 82 F1 | 	sub	local11, result1
34588     20 4E 05 F1 | 	add	fp, #32
3458c     A7 3A 62 FC | 	wrlong	local11, fp
34590     18 4E 85 F1 | 	sub	fp, #24
34594     A7 FA 01 FB | 	rdlong	result1, fp
34598     0C 4E 85 F1 | 	sub	fp, #12
3459c     FD 3A 1A F2 | 	cmp	local11, result1 wcz
345a0     0C 4E 05 11 |  if_a	add	fp, #12
345a4     A7 3A 02 1B |  if_a	rdlong	local11, fp
345a8     18 4E 05 11 |  if_a	add	fp, #24
345ac     A7 3A 62 1C |  if_a	wrlong	local11, fp
345b0     24 4E 85 11 |  if_a	sub	fp, #36
345b4     04 4E 05 F1 | 	add	fp, #4
345b8     A7 3A 02 FB | 	rdlong	local11, fp
345bc     1D 13 02 F6 | 	mov	arg01, local11
345c0     28 12 06 F1 | 	add	arg01, #40
345c4     14 3A 06 F1 | 	add	local11, #20
345c8     1D 3B 02 FB | 	rdlong	local11, local11
345cc     FF 3B 06 F5 | 	and	local11, #511
345d0     1D 13 02 F1 | 	add	arg01, local11
345d4     2C 4E 05 F1 | 	add	fp, #44
345d8     A7 14 02 FB | 	rdlong	arg02, fp
345dc     0C 4E 85 F1 | 	sub	fp, #12
345e0     A7 16 02 FB | 	rdlong	arg03, fp
345e4     24 4E 85 F1 | 	sub	fp, #36
345e8     D8 39 BF FD | 	call	#__system____builtin_memmove
345ec     04 4E 05 F1 | 	add	fp, #4
345f0     A7 FA 01 FB | 	rdlong	result1, fp
345f4     FD 3A 02 F6 | 	mov	local11, result1
345f8     04 4E 85 F1 | 	sub	fp, #4
345fc     10 FA 05 F1 | 	add	result1, #16
34600     FD FA C1 FA | 	rdbyte	result1, result1
34604     80 FA 45 F5 | 	or	result1, #128
34608     10 3A 06 F1 | 	add	local11, #16
3460c     1D FB 41 FC | 	wrbyte	result1, local11
34610                 | LR__5069
34610     0C 4E 05 F1 | 	add	fp, #12
34614     A7 3A 02 FB | 	rdlong	local11, fp
34618     18 4E 05 F1 | 	add	fp, #24
3461c     A7 FA 01 FB | 	rdlong	result1, fp
34620     FD 3A 82 F1 | 	sub	local11, result1
34624     18 4E 85 F1 | 	sub	fp, #24
34628     A7 3A 62 FC | 	wrlong	local11, fp
3462c     04 4E 05 F1 | 	add	fp, #4
34630     A7 3C 02 FB | 	rdlong	local12, fp
34634     1E 3B 02 FB | 	rdlong	local11, local12
34638     14 4E 05 F1 | 	add	fp, #20
3463c     A7 3E 02 FB | 	rdlong	local13, fp
34640     1F 3B 02 F1 | 	add	local11, local13
34644     1E 3B 62 FC | 	wrlong	local11, local12
34648     0C 4E 05 F1 | 	add	fp, #12
3464c     A7 3A 02 FB | 	rdlong	local11, fp
34650     0C 4E 85 F1 | 	sub	fp, #12
34654     A7 40 02 FB | 	rdlong	local14, fp
34658     20 3B 02 F1 | 	add	local11, local14
3465c     0C 4E 05 F1 | 	add	fp, #12
34660     A7 3A 62 FC | 	wrlong	local11, fp
34664     2C 4E 85 F1 | 	sub	fp, #44
34668     A7 42 02 FB | 	rdlong	local15, fp
3466c     21 3B 02 F6 | 	mov	local11, local15
34670     14 42 06 F1 | 	add	local15, #20
34674     21 43 02 FB | 	rdlong	local15, local15
34678     20 4E 05 F1 | 	add	fp, #32
3467c     A7 44 02 FB | 	rdlong	local16, fp
34680     22 43 02 F1 | 	add	local15, local16
34684     14 3A 06 F1 | 	add	local11, #20
34688     1D 43 62 FC | 	wrlong	local15, local11
3468c     20 4E 85 F1 | 	sub	fp, #32
34690     A7 46 02 FB | 	rdlong	local17, fp
34694     23 3B 02 F6 | 	mov	local11, local17
34698     23 49 02 F6 | 	mov	local18, local17
3469c     04 4E 85 F1 | 	sub	fp, #4
346a0     14 46 06 F1 | 	add	local17, #20
346a4     23 4B 02 FB | 	rdlong	local19, local17
346a8     0C 48 06 F1 | 	add	local18, #12
346ac     24 4D 02 FB | 	rdlong	local20, local18
346b0     26 4B 1A F2 | 	cmp	local19, local20 wcz
346b4     24 00 90 ED |  if_be	jmp	#LR__5070
346b8     04 4E 05 F1 | 	add	fp, #4
346bc     A7 2E 02 FB | 	rdlong	local05, fp
346c0     04 4E 85 F1 | 	sub	fp, #4
346c4     17 2B 02 F6 | 	mov	local03, local05
346c8     14 2A 06 F1 | 	add	local03, #20
346cc     15 2D 02 FB | 	rdlong	local04, local03
346d0     14 2A 86 F1 | 	sub	local03, #20
346d4     16 4F 02 F6 | 	mov	local21, local04
346d8     20 00 90 FD | 	jmp	#LR__5071
346dc                 | LR__5070
346dc     04 4E 05 F1 | 	add	fp, #4
346e0     A7 32 02 FB | 	rdlong	local07, fp
346e4     04 4E 85 F1 | 	sub	fp, #4
346e8     19 39 02 F6 | 	mov	local10, local07
346ec     0C 38 06 F1 | 	add	local10, #12
346f0     1C 35 02 FB | 	rdlong	local08, local10
346f4     0C 38 86 F1 | 	sub	local10, #12
346f8     1A 4F 02 F6 | 	mov	local21, local08
346fc                 | LR__5071
346fc     0C 3A 06 F1 | 	add	local11, #12
34700     1D 4F 62 FC | 	wrlong	local21, local11
34704     5C F9 9F FD | 	jmp	#LR__5053
34708                 | LR__5072
34708     04 4E 05 F1 | 	add	fp, #4
3470c     A7 3C 02 FB | 	rdlong	local12, fp
34710     1E 27 02 F6 | 	mov	local01, local12
34714     04 4E 85 F1 | 	sub	fp, #4
34718     10 3C 06 F1 | 	add	local12, #16
3471c     1E 3B C2 FA | 	rdbyte	local11, local12
34720     40 3A 46 F5 | 	or	local11, #64
34724     10 26 06 F1 | 	add	local01, #16
34728     13 3B 42 FC | 	wrbyte	local11, local01
3472c                 | ' 
3472c                 | ' 
3472c                 | ' 
3472c                 | ' 
3472c                 | ' 
3472c                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
3472c                 | ' 		fp->flag |=  0x80 ;
3472c                 | ' 
3472c                 | ' 	}
3472c                 | ' 
3472c                 | ' 	fp->flag |=  0x40 ;
3472c                 | ' 
3472c                 | ' 	return FR_OK ;
3472c     00 FA 05 F6 | 	mov	result1, #0
34730                 | LR__5073
34730     A7 F0 03 F6 | 	mov	ptra, fp
34734     B2 00 A0 FD | 	call	#popregs_
34738                 | _fatfs_cc_f_write_ret
34738     2D 00 64 FD | 	ret
3473c                 | 
3473c                 | _fatfs_cc_f_sync
3473c     00 4A 05 F6 | 	mov	COUNT_, #0
34740     A8 00 A0 FD | 	call	#pushregs_
34744     18 F0 07 F1 | 	add	ptra, #24
34748     04 4E 05 F1 | 	add	fp, #4
3474c     A7 12 62 FC | 	wrlong	arg01, fp
34750     08 4E 05 F1 | 	add	fp, #8
34754     A7 14 02 F6 | 	mov	arg02, fp
34758     0C 4E 85 F1 | 	sub	fp, #12
3475c     D0 E8 BF FD | 	call	#_fatfs_cc_validate
34760     08 4E 05 F1 | 	add	fp, #8
34764     A7 FA 61 FC | 	wrlong	result1, fp
34768     08 4E 85 F1 | 	sub	fp, #8
3476c     00 FA 0D F2 | 	cmp	result1, #0 wz
34770     C0 01 90 5D |  if_ne	jmp	#LR__5083
34774     04 4E 05 F1 | 	add	fp, #4
34778     A7 18 02 FB | 	rdlong	arg04, fp
3477c     04 4E 85 F1 | 	sub	fp, #4
34780     10 18 06 F1 | 	add	arg04, #16
34784     0C 19 C2 FA | 	rdbyte	arg04, arg04
34788     40 18 CE F7 | 	test	arg04, #64 wz
3478c     A4 01 90 AD |  if_e	jmp	#LR__5082
34790     04 4E 05 F1 | 	add	fp, #4
34794     A7 18 02 FB | 	rdlong	arg04, fp
34798     04 4E 85 F1 | 	sub	fp, #4
3479c     10 18 06 F1 | 	add	arg04, #16
347a0     0C 19 C2 FA | 	rdbyte	arg04, arg04
347a4     80 18 CE F7 | 	test	arg04, #128 wz
347a8     64 00 90 AD |  if_e	jmp	#LR__5080
347ac     0C 4E 05 F1 | 	add	fp, #12
347b0     A7 18 02 FB | 	rdlong	arg04, fp
347b4     01 18 06 F1 | 	add	arg04, #1
347b8     0C 13 C2 FA | 	rdbyte	arg01, arg04
347bc     08 4E 85 F1 | 	sub	fp, #8
347c0     A7 18 02 FB | 	rdlong	arg04, fp
347c4     0C 15 02 F6 | 	mov	arg02, arg04
347c8     28 14 06 F1 | 	add	arg02, #40
347cc     04 4E 85 F1 | 	sub	fp, #4
347d0     1C 18 06 F1 | 	add	arg04, #28
347d4     0C 17 02 FB | 	rdlong	arg03, arg04
347d8     01 18 06 F6 | 	mov	arg04, #1
347dc     0C AE BF FD | 	call	#_fatfs_cc_disk_write
347e0     00 FA 0D F2 | 	cmp	result1, #0 wz
347e4     01 FA 05 56 |  if_ne	mov	result1, #1
347e8     54 01 90 5D |  if_ne	jmp	#LR__5084
347ec     04 4E 05 F1 | 	add	fp, #4
347f0     A7 18 02 FB | 	rdlong	arg04, fp
347f4     0C 17 02 F6 | 	mov	arg03, arg04
347f8     04 4E 85 F1 | 	sub	fp, #4
347fc     10 18 06 F1 | 	add	arg04, #16
34800     0C 19 C2 FA | 	rdbyte	arg04, arg04
34804     7F 18 06 F5 | 	and	arg04, #127
34808     10 16 06 F1 | 	add	arg03, #16
3480c     0B 19 42 FC | 	wrbyte	arg04, arg03
34810                 | LR__5080
34810     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
34814     10 4E 05 F1 | 	add	fp, #16
34818     A7 FA 61 FC | 	wrlong	result1, fp
3481c     04 4E 85 F1 | 	sub	fp, #4
34820     A7 12 02 FB | 	rdlong	arg01, fp
34824     08 4E 85 F1 | 	sub	fp, #8
34828     A7 18 02 FB | 	rdlong	arg04, fp
3482c     04 4E 85 F1 | 	sub	fp, #4
34830     20 18 06 F1 | 	add	arg04, #32
34834     0C 15 02 FB | 	rdlong	arg02, arg04
34838     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
3483c     08 4E 05 F1 | 	add	fp, #8
34840     A7 FA 61 FC | 	wrlong	result1, fp
34844     08 4E 85 F1 | 	sub	fp, #8
34848     00 FA 0D F2 | 	cmp	result1, #0 wz
3484c     E4 00 90 5D |  if_ne	jmp	#LR__5081
34850     04 4E 05 F1 | 	add	fp, #4
34854     A7 18 02 FB | 	rdlong	arg04, fp
34858     24 18 06 F1 | 	add	arg04, #36
3485c     0C 19 02 FB | 	rdlong	arg04, arg04
34860     10 4E 05 F1 | 	add	fp, #16
34864     A7 18 62 FC | 	wrlong	arg04, fp
34868     0C 17 02 F6 | 	mov	arg03, arg04
3486c     0B 16 06 F1 | 	add	arg03, #11
34870     0B 17 C2 FA | 	rdbyte	arg03, arg03
34874     20 16 46 F5 | 	or	arg03, #32
34878     0B 18 06 F1 | 	add	arg04, #11
3487c     0C 17 42 FC | 	wrbyte	arg03, arg04
34880     10 4E 85 F1 | 	sub	fp, #16
34884     A7 18 02 FB | 	rdlong	arg04, fp
34888     0C 13 02 FB | 	rdlong	arg01, arg04
3488c     10 4E 05 F1 | 	add	fp, #16
34890     A7 14 02 FB | 	rdlong	arg02, fp
34894     14 4E 85 F1 | 	sub	fp, #20
34898     08 18 06 F1 | 	add	arg04, #8
3489c     0C 17 02 FB | 	rdlong	arg03, arg04
348a0     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
348a4     14 4E 05 F1 | 	add	fp, #20
348a8     A7 12 02 FB | 	rdlong	arg01, fp
348ac     1C 12 06 F1 | 	add	arg01, #28
348b0     10 4E 85 F1 | 	sub	fp, #16
348b4     A7 18 02 FB | 	rdlong	arg04, fp
348b8     0C 18 06 F1 | 	add	arg04, #12
348bc     0C 15 02 FB | 	rdlong	arg02, arg04
348c0     09 15 62 FC | 	wrlong	arg02, arg01
348c4     10 4E 05 F1 | 	add	fp, #16
348c8     A7 12 02 FB | 	rdlong	arg01, fp
348cc     16 12 06 F1 | 	add	arg01, #22
348d0     04 4E 85 F1 | 	sub	fp, #4
348d4     A7 14 02 FB | 	rdlong	arg02, fp
348d8     09 15 62 FC | 	wrlong	arg02, arg01
348dc     04 4E 05 F1 | 	add	fp, #4
348e0     A7 12 02 FB | 	rdlong	arg01, fp
348e4     12 12 06 F1 | 	add	arg01, #18
348e8     09 01 58 FC | 	wrword	#0, arg01
348ec     08 4E 85 F1 | 	sub	fp, #8
348f0     A7 18 02 FB | 	rdlong	arg04, fp
348f4     03 18 06 F1 | 	add	arg04, #3
348f8     0C 03 48 FC | 	wrbyte	#1, arg04
348fc     A7 12 02 FB | 	rdlong	arg01, fp
34900     0C 4E 85 F1 | 	sub	fp, #12
34904     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
34908     08 4E 05 F1 | 	add	fp, #8
3490c     A7 FA 61 FC | 	wrlong	result1, fp
34910     04 4E 85 F1 | 	sub	fp, #4
34914     A7 18 02 FB | 	rdlong	arg04, fp
34918     0C 17 02 F6 | 	mov	arg03, arg04
3491c     04 4E 85 F1 | 	sub	fp, #4
34920     10 18 06 F1 | 	add	arg04, #16
34924     0C 19 C2 FA | 	rdbyte	arg04, arg04
34928     BF 18 06 F5 | 	and	arg04, #191
3492c     10 16 06 F1 | 	add	arg03, #16
34930     0B 19 42 FC | 	wrbyte	arg04, arg03
34934                 | LR__5081
34934                 | LR__5082
34934                 | LR__5083
34934                 | ' 					dir = fp->dir_ptr;
34934                 | ' 					dir[ 11 ] |=  0x20 ;
34934                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
34934                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
34934                 | ' 					st_dword(dir +  22 , tm);
34934                 | ' 					st_word(dir +  18 , 0);
34934                 | ' 					fs->wflag = 1;
34934                 | ' 					res = sync_fs(fs);
34934                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
34934                 | ' 				}
34934                 | ' 			}
34934                 | ' 		}
34934                 | ' 	}
34934                 | ' 
34934                 | ' 	return res ;
34934     08 4E 05 F1 | 	add	fp, #8
34938     A7 FA 01 FB | 	rdlong	result1, fp
3493c     08 4E 85 F1 | 	sub	fp, #8
34940                 | LR__5084
34940     A7 F0 03 F6 | 	mov	ptra, fp
34944     B2 00 A0 FD | 	call	#popregs_
34948                 | _fatfs_cc_f_sync_ret
34948     2D 00 64 FD | 	ret
3494c                 | 
3494c                 | _fatfs_cc_f_close
3494c     01 4A 05 F6 | 	mov	COUNT_, #1
34950     A8 00 A0 FD | 	call	#pushregs_
34954     10 F0 07 F1 | 	add	ptra, #16
34958     04 4E 05 F1 | 	add	fp, #4
3495c     A7 12 62 FC | 	wrlong	arg01, fp
34960     04 4E 85 F1 | 	sub	fp, #4
34964     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
34968     08 4E 05 F1 | 	add	fp, #8
3496c     A7 FA 61 FC | 	wrlong	result1, fp
34970     08 4E 85 F1 | 	sub	fp, #8
34974     00 FA 0D F2 | 	cmp	result1, #0 wz
34978     38 00 90 5D |  if_ne	jmp	#LR__5090
3497c     04 4E 05 F1 | 	add	fp, #4
34980     A7 12 02 FB | 	rdlong	arg01, fp
34984     08 4E 05 F1 | 	add	fp, #8
34988     A7 14 02 F6 | 	mov	arg02, fp
3498c     0C 4E 85 F1 | 	sub	fp, #12
34990     9C E6 BF FD | 	call	#_fatfs_cc_validate
34994     08 4E 05 F1 | 	add	fp, #8
34998     A7 FA 61 FC | 	wrlong	result1, fp
3499c     08 4E 85 F1 | 	sub	fp, #8
349a0     00 FA 0D F2 | 	cmp	result1, #0 wz
349a4     04 4E 05 A1 |  if_e	add	fp, #4
349a8     A7 26 02 AB |  if_e	rdlong	local01, fp
349ac     04 4E 85 A1 |  if_e	sub	fp, #4
349b0     13 01 68 AC |  if_e	wrlong	#0, local01
349b4                 | LR__5090
349b4                 | ' 
349b4                 | ' 
349b4                 | ' 
349b4                 | ' 
349b4                 | ' 			fp->obj.fs = 0;
349b4                 | ' #line 4192 "ff.c"
349b4                 | ' 		}
349b4                 | ' 	}
349b4                 | ' 	return res;
349b4     08 4E 05 F1 | 	add	fp, #8
349b8     A7 FA 01 FB | 	rdlong	result1, fp
349bc     08 4E 85 F1 | 	sub	fp, #8
349c0     A7 F0 03 F6 | 	mov	ptra, fp
349c4     B2 00 A0 FD | 	call	#popregs_
349c8                 | _fatfs_cc_f_close_ret
349c8     2D 00 64 FD | 	ret
349cc                 | 
349cc                 | _fatfs_cc_f_lseek
349cc     00 4A 05 F6 | 	mov	COUNT_, #0
349d0     A8 00 A0 FD | 	call	#pushregs_
349d4     24 F0 07 F1 | 	add	ptra, #36
349d8     04 4E 05 F1 | 	add	fp, #4
349dc     A7 12 62 FC | 	wrlong	arg01, fp
349e0     04 4E 05 F1 | 	add	fp, #4
349e4     A7 14 62 FC | 	wrlong	arg02, fp
349e8     04 4E 85 F1 | 	sub	fp, #4
349ec     A7 12 02 FB | 	rdlong	arg01, fp
349f0     0C 4E 05 F1 | 	add	fp, #12
349f4     A7 14 02 F6 | 	mov	arg02, fp
349f8     10 4E 85 F1 | 	sub	fp, #16
349fc     30 E6 BF FD | 	call	#_fatfs_cc_validate
34a00     0C 4E 05 F1 | 	add	fp, #12
34a04     A7 FA 61 FC | 	wrlong	result1, fp
34a08     0C 4E 85 F1 | 	sub	fp, #12
34a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
34a10     1C 00 90 5D |  if_ne	jmp	#LR__5100
34a14     04 4E 05 F1 | 	add	fp, #4
34a18     A7 18 02 FB | 	rdlong	arg04, fp
34a1c     11 18 06 F1 | 	add	arg04, #17
34a20     0C 19 C2 FA | 	rdbyte	arg04, arg04
34a24     08 4E 05 F1 | 	add	fp, #8
34a28     A7 18 62 FC | 	wrlong	arg04, fp
34a2c     0C 4E 85 F1 | 	sub	fp, #12
34a30                 | LR__5100
34a30     0C 4E 05 F1 | 	add	fp, #12
34a34     A7 18 0A FB | 	rdlong	arg04, fp wz
34a38     0C 4E 85 F1 | 	sub	fp, #12
34a3c     0C 4E 05 51 |  if_ne	add	fp, #12
34a40     A7 FA 01 5B |  if_ne	rdlong	result1, fp
34a44     0C 4E 85 51 |  if_ne	sub	fp, #12
34a48     40 06 90 5D |  if_ne	jmp	#LR__5123
34a4c     04 4E 05 F1 | 	add	fp, #4
34a50     A7 18 02 FB | 	rdlong	arg04, fp
34a54     04 4E 05 F1 | 	add	fp, #4
34a58     A7 16 02 FB | 	rdlong	arg03, fp
34a5c     08 4E 85 F1 | 	sub	fp, #8
34a60     0C 18 06 F1 | 	add	arg04, #12
34a64     0C 19 02 FB | 	rdlong	arg04, arg04
34a68     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
34a6c     3C 00 90 ED |  if_be	jmp	#LR__5101
34a70     04 4E 05 F1 | 	add	fp, #4
34a74     A7 16 02 FB | 	rdlong	arg03, fp
34a78     04 4E 85 F1 | 	sub	fp, #4
34a7c     10 16 06 F1 | 	add	arg03, #16
34a80     0B 17 C2 FA | 	rdbyte	arg03, arg03
34a84     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
34a88     02 16 CE F7 | 	test	arg03, #2 wz
34a8c     1C 00 90 5D |  if_ne	jmp	#LR__5101
34a90     04 4E 05 F1 | 	add	fp, #4
34a94     A7 16 02 FB | 	rdlong	arg03, fp
34a98     0C 16 06 F1 | 	add	arg03, #12
34a9c     0B 17 02 FB | 	rdlong	arg03, arg03
34aa0     04 4E 05 F1 | 	add	fp, #4
34aa4     A7 16 62 FC | 	wrlong	arg03, fp
34aa8     08 4E 85 F1 | 	sub	fp, #8
34aac                 | LR__5101
34aac     04 4E 05 F1 | 	add	fp, #4
34ab0     A7 16 02 FB | 	rdlong	arg03, fp
34ab4     14 16 06 F1 | 	add	arg03, #20
34ab8     0B 17 02 FB | 	rdlong	arg03, arg03
34abc     1C 4E 05 F1 | 	add	fp, #28
34ac0     A7 16 62 FC | 	wrlong	arg03, fp
34ac4     1C 4E 85 F1 | 	sub	fp, #28
34ac8     A7 16 02 FB | 	rdlong	arg03, fp
34acc     18 4E 05 F1 | 	add	fp, #24
34ad0     A7 00 68 FC | 	wrlong	#0, fp
34ad4     14 16 06 F1 | 	add	arg03, #20
34ad8     0B 01 68 FC | 	wrlong	#0, arg03
34adc     14 4E 85 F1 | 	sub	fp, #20
34ae0     A7 16 02 FB | 	rdlong	arg03, fp
34ae4     08 4E 85 F1 | 	sub	fp, #8
34ae8     01 16 16 F2 | 	cmp	arg03, #1 wc
34aec     E4 03 90 CD |  if_b	jmp	#LR__5117
34af0     10 4E 05 F1 | 	add	fp, #16
34af4     A7 16 02 FB | 	rdlong	arg03, fp
34af8     0A 16 06 F1 | 	add	arg03, #10
34afc     0B 19 E2 FA | 	rdword	arg04, arg03
34b00     09 18 66 F0 | 	shl	arg04, #9
34b04     08 4E 05 F1 | 	add	fp, #8
34b08     A7 18 62 FC | 	wrlong	arg04, fp
34b0c     08 4E 05 F1 | 	add	fp, #8
34b10     A7 18 02 FB | 	rdlong	arg04, fp
34b14     20 4E 85 F1 | 	sub	fp, #32
34b18     01 18 16 F2 | 	cmp	arg04, #1 wc
34b1c     AC 00 90 CD |  if_b	jmp	#LR__5102
34b20     08 4E 05 F1 | 	add	fp, #8
34b24     A7 18 02 FB | 	rdlong	arg04, fp
34b28     01 18 86 F1 | 	sub	arg04, #1
34b2c     10 4E 05 F1 | 	add	fp, #16
34b30     A7 16 02 FB | 	rdlong	arg03, fp
34b34     0B 19 12 FD | 	qdiv	arg04, arg03
34b38     08 4E 05 F1 | 	add	fp, #8
34b3c     A7 FA 01 FB | 	rdlong	result1, fp
34b40     01 FA 85 F1 | 	sub	result1, #1
34b44     18 18 62 FD | 	getqx	arg04
34b48     0B FB 11 FD | 	qdiv	result1, arg03
34b4c     20 4E 85 F1 | 	sub	fp, #32
34b50     18 16 62 FD | 	getqx	arg03
34b54     0B 19 12 F2 | 	cmp	arg04, arg03 wc
34b58     70 00 90 CD |  if_b	jmp	#LR__5102
34b5c     04 4E 05 F1 | 	add	fp, #4
34b60     A7 16 02 FB | 	rdlong	arg03, fp
34b64     1C 4E 05 F1 | 	add	fp, #28
34b68     A7 FA 01 FB | 	rdlong	result1, fp
34b6c     01 FA 85 F1 | 	sub	result1, #1
34b70     08 4E 85 F1 | 	sub	fp, #8
34b74     A7 18 02 FB | 	rdlong	arg04, fp
34b78     01 18 86 F1 | 	sub	arg04, #1
34b7c     0C FB 21 F5 | 	andn	result1, arg04
34b80     14 16 06 F1 | 	add	arg03, #20
34b84     0B FB 61 FC | 	wrlong	result1, arg03
34b88     10 4E 85 F1 | 	sub	fp, #16
34b8c     A7 16 02 FB | 	rdlong	arg03, fp
34b90     04 4E 85 F1 | 	sub	fp, #4
34b94     A7 18 02 FB | 	rdlong	arg04, fp
34b98     14 18 06 F1 | 	add	arg04, #20
34b9c     0C 19 02 FB | 	rdlong	arg04, arg04
34ba0     0C 17 82 F1 | 	sub	arg03, arg04
34ba4     04 4E 05 F1 | 	add	fp, #4
34ba8     A7 16 62 FC | 	wrlong	arg03, fp
34bac     04 4E 85 F1 | 	sub	fp, #4
34bb0     A7 16 02 FB | 	rdlong	arg03, fp
34bb4     18 16 06 F1 | 	add	arg03, #24
34bb8     0B 17 02 FB | 	rdlong	arg03, arg03
34bbc     10 4E 05 F1 | 	add	fp, #16
34bc0     A7 16 62 FC | 	wrlong	arg03, fp
34bc4     14 4E 85 F1 | 	sub	fp, #20
34bc8     D0 00 90 FD | 	jmp	#LR__5106
34bcc                 | LR__5102
34bcc     04 4E 05 F1 | 	add	fp, #4
34bd0     A7 16 02 FB | 	rdlong	arg03, fp
34bd4     08 16 06 F1 | 	add	arg03, #8
34bd8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
34bdc     10 4E 05 F1 | 	add	fp, #16
34be0     A7 16 62 FC | 	wrlong	arg03, fp
34be4     14 4E 85 F1 | 	sub	fp, #20
34be8     94 00 90 5D |  if_ne	jmp	#LR__5105
34bec     04 4E 05 F1 | 	add	fp, #4
34bf0     A7 12 02 FB | 	rdlong	arg01, fp
34bf4     04 4E 85 F1 | 	sub	fp, #4
34bf8     00 14 06 F6 | 	mov	arg02, #0
34bfc     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
34c00     14 4E 05 F1 | 	add	fp, #20
34c04     A7 FA 61 FC | 	wrlong	result1, fp
34c08     14 4E 85 F1 | 	sub	fp, #20
34c0c     01 FA 0D F2 | 	cmp	result1, #1 wz
34c10     1C 00 90 5D |  if_ne	jmp	#LR__5103
34c14     04 4E 05 F1 | 	add	fp, #4
34c18     A7 16 02 FB | 	rdlong	arg03, fp
34c1c     04 4E 85 F1 | 	sub	fp, #4
34c20     11 16 06 F1 | 	add	arg03, #17
34c24     0B 05 48 FC | 	wrbyte	#2, arg03
34c28     02 FA 05 F6 | 	mov	result1, #2
34c2c     5C 04 90 FD | 	jmp	#LR__5123
34c30                 | LR__5103
34c30     14 4E 05 F1 | 	add	fp, #20
34c34     A7 FA 01 FB | 	rdlong	result1, fp
34c38     14 4E 85 F1 | 	sub	fp, #20
34c3c     FF FF 7F FF 
34c40     FF FB 0D F2 | 	cmp	result1, ##-1 wz
34c44     1C 00 90 5D |  if_ne	jmp	#LR__5104
34c48     04 4E 05 F1 | 	add	fp, #4
34c4c     A7 16 02 FB | 	rdlong	arg03, fp
34c50     04 4E 85 F1 | 	sub	fp, #4
34c54     11 16 06 F1 | 	add	arg03, #17
34c58     0B 03 48 FC | 	wrbyte	#1, arg03
34c5c     01 FA 05 F6 | 	mov	result1, #1
34c60     28 04 90 FD | 	jmp	#LR__5123
34c64                 | LR__5104
34c64     04 4E 05 F1 | 	add	fp, #4
34c68     A7 16 02 FB | 	rdlong	arg03, fp
34c6c     10 4E 05 F1 | 	add	fp, #16
34c70     A7 18 02 FB | 	rdlong	arg04, fp
34c74     14 4E 85 F1 | 	sub	fp, #20
34c78     08 16 06 F1 | 	add	arg03, #8
34c7c     0B 19 62 FC | 	wrlong	arg04, arg03
34c80                 | LR__5105
34c80     04 4E 05 F1 | 	add	fp, #4
34c84     A7 16 02 FB | 	rdlong	arg03, fp
34c88     10 4E 05 F1 | 	add	fp, #16
34c8c     A7 18 02 FB | 	rdlong	arg04, fp
34c90     14 4E 85 F1 | 	sub	fp, #20
34c94     18 16 06 F1 | 	add	arg03, #24
34c98     0B 19 62 FC | 	wrlong	arg04, arg03
34c9c                 | LR__5106
34c9c     14 4E 05 F1 | 	add	fp, #20
34ca0     A7 16 0A FB | 	rdlong	arg03, fp wz
34ca4     14 4E 85 F1 | 	sub	fp, #20
34ca8     28 02 90 AD |  if_e	jmp	#LR__5116
34cac                 | ' 				while (ofs > bcs) {
34cac                 | LR__5107
34cac     08 4E 05 F1 | 	add	fp, #8
34cb0     A7 18 02 FB | 	rdlong	arg04, fp
34cb4     10 4E 05 F1 | 	add	fp, #16
34cb8     A7 16 02 FB | 	rdlong	arg03, fp
34cbc     18 4E 85 F1 | 	sub	fp, #24
34cc0     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
34cc4     68 01 90 ED |  if_be	jmp	#LR__5113
34cc8     08 4E 05 F1 | 	add	fp, #8
34ccc     A7 18 02 FB | 	rdlong	arg04, fp
34cd0     10 4E 05 F1 | 	add	fp, #16
34cd4     A7 16 02 FB | 	rdlong	arg03, fp
34cd8     0B 19 82 F1 | 	sub	arg04, arg03
34cdc     10 4E 85 F1 | 	sub	fp, #16
34ce0     A7 18 62 FC | 	wrlong	arg04, fp
34ce4     04 4E 85 F1 | 	sub	fp, #4
34ce8     A7 18 02 FB | 	rdlong	arg04, fp
34cec     0C FB 01 F6 | 	mov	result1, arg04
34cf0     14 18 06 F1 | 	add	arg04, #20
34cf4     0C 19 02 FB | 	rdlong	arg04, arg04
34cf8     14 4E 05 F1 | 	add	fp, #20
34cfc     A7 16 02 FB | 	rdlong	arg03, fp
34d00     0B 19 02 F1 | 	add	arg04, arg03
34d04     14 FA 05 F1 | 	add	result1, #20
34d08     FD 18 62 FC | 	wrlong	arg04, result1
34d0c     14 4E 85 F1 | 	sub	fp, #20
34d10     A7 16 02 FB | 	rdlong	arg03, fp
34d14     04 4E 85 F1 | 	sub	fp, #4
34d18     10 16 06 F1 | 	add	arg03, #16
34d1c     0B 17 C2 FA | 	rdbyte	arg03, arg03
34d20     02 16 CE F7 | 	test	arg03, #2 wz
34d24     3C 00 90 AD |  if_e	jmp	#LR__5108
34d28     04 4E 05 F1 | 	add	fp, #4
34d2c     A7 12 02 FB | 	rdlong	arg01, fp
34d30     10 4E 05 F1 | 	add	fp, #16
34d34     A7 14 02 FB | 	rdlong	arg02, fp
34d38     14 4E 85 F1 | 	sub	fp, #20
34d3c     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
34d40     14 4E 05 F1 | 	add	fp, #20
34d44     A7 FA 61 FC | 	wrlong	result1, fp
34d48     00 FA 4D F2 | 	cmps	result1, #0 wz
34d4c     14 4E 85 F1 | 	sub	fp, #20
34d50     08 4E 05 A1 |  if_e	add	fp, #8
34d54     A7 00 68 AC |  if_e	wrlong	#0, fp
34d58     08 4E 85 A1 |  if_e	sub	fp, #8
34d5c                 | ' 							ofs = 0; break;
34d5c     D0 00 90 AD |  if_e	jmp	#LR__5113
34d60     24 00 90 FD | 	jmp	#LR__5109
34d64                 | LR__5108
34d64     04 4E 05 F1 | 	add	fp, #4
34d68     A7 12 02 FB | 	rdlong	arg01, fp
34d6c     10 4E 05 F1 | 	add	fp, #16
34d70     A7 14 02 FB | 	rdlong	arg02, fp
34d74     14 4E 85 F1 | 	sub	fp, #20
34d78     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
34d7c     14 4E 05 F1 | 	add	fp, #20
34d80     A7 FA 61 FC | 	wrlong	result1, fp
34d84     14 4E 85 F1 | 	sub	fp, #20
34d88                 | LR__5109
34d88     14 4E 05 F1 | 	add	fp, #20
34d8c     A7 16 02 FB | 	rdlong	arg03, fp
34d90     14 4E 85 F1 | 	sub	fp, #20
34d94     FF FF 7F FF 
34d98     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
34d9c     1C 00 90 5D |  if_ne	jmp	#LR__5110
34da0     04 4E 05 F1 | 	add	fp, #4
34da4     A7 16 02 FB | 	rdlong	arg03, fp
34da8     04 4E 85 F1 | 	sub	fp, #4
34dac     11 16 06 F1 | 	add	arg03, #17
34db0     0B 03 48 FC | 	wrbyte	#1, arg03
34db4     01 FA 05 F6 | 	mov	result1, #1
34db8     D0 02 90 FD | 	jmp	#LR__5123
34dbc                 | LR__5110
34dbc     14 4E 05 F1 | 	add	fp, #20
34dc0     A7 16 02 FB | 	rdlong	arg03, fp
34dc4     14 4E 85 F1 | 	sub	fp, #20
34dc8     02 16 16 F2 | 	cmp	arg03, #2 wc
34dcc     24 00 90 CD |  if_b	jmp	#LR__5111
34dd0     10 4E 05 F1 | 	add	fp, #16
34dd4     A7 18 02 FB | 	rdlong	arg04, fp
34dd8     04 4E 05 F1 | 	add	fp, #4
34ddc     A7 16 02 FB | 	rdlong	arg03, fp
34de0     14 4E 85 F1 | 	sub	fp, #20
34de4     18 18 06 F1 | 	add	arg04, #24
34de8     0C 19 02 FB | 	rdlong	arg04, arg04
34dec     0C 17 12 F2 | 	cmp	arg03, arg04 wc
34df0     1C 00 90 CD |  if_b	jmp	#LR__5112
34df4                 | LR__5111
34df4     04 4E 05 F1 | 	add	fp, #4
34df8     A7 16 02 FB | 	rdlong	arg03, fp
34dfc     04 4E 85 F1 | 	sub	fp, #4
34e00     11 16 06 F1 | 	add	arg03, #17
34e04     0B 05 48 FC | 	wrbyte	#2, arg03
34e08     02 FA 05 F6 | 	mov	result1, #2
34e0c     7C 02 90 FD | 	jmp	#LR__5123
34e10                 | LR__5112
34e10     04 4E 05 F1 | 	add	fp, #4
34e14     A7 18 02 FB | 	rdlong	arg04, fp
34e18     10 4E 05 F1 | 	add	fp, #16
34e1c     A7 16 02 FB | 	rdlong	arg03, fp
34e20     14 4E 85 F1 | 	sub	fp, #20
34e24     18 18 06 F1 | 	add	arg04, #24
34e28     0C 17 62 FC | 	wrlong	arg03, arg04
34e2c     7C FE 9F FD | 	jmp	#LR__5107
34e30                 | LR__5113
34e30     04 4E 05 F1 | 	add	fp, #4
34e34     A7 16 02 FB | 	rdlong	arg03, fp
34e38     0B 13 02 F6 | 	mov	arg01, arg03
34e3c     14 16 06 F1 | 	add	arg03, #20
34e40     0B 15 02 FB | 	rdlong	arg02, arg03
34e44     04 4E 05 F1 | 	add	fp, #4
34e48     A7 16 02 FB | 	rdlong	arg03, fp
34e4c     0B 15 02 F1 | 	add	arg02, arg03
34e50     14 12 06 F1 | 	add	arg01, #20
34e54     09 15 62 FC | 	wrlong	arg02, arg01
34e58     A7 16 02 FB | 	rdlong	arg03, fp
34e5c     08 4E 85 F1 | 	sub	fp, #8
34e60     FF 17 CE F7 | 	test	arg03, #511 wz
34e64     6C 00 90 AD |  if_e	jmp	#LR__5115
34e68     10 4E 05 F1 | 	add	fp, #16
34e6c     A7 12 02 FB | 	rdlong	arg01, fp
34e70     04 4E 05 F1 | 	add	fp, #4
34e74     A7 14 02 FB | 	rdlong	arg02, fp
34e78     14 4E 85 F1 | 	sub	fp, #20
34e7c     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
34e80     1C 4E 05 F1 | 	add	fp, #28
34e84     A7 FA 61 FC | 	wrlong	result1, fp
34e88     1C 4E 85 F1 | 	sub	fp, #28
34e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
34e90     1C 00 90 5D |  if_ne	jmp	#LR__5114
34e94     04 4E 05 F1 | 	add	fp, #4
34e98     A7 16 02 FB | 	rdlong	arg03, fp
34e9c     04 4E 85 F1 | 	sub	fp, #4
34ea0     11 16 06 F1 | 	add	arg03, #17
34ea4     0B 05 48 FC | 	wrbyte	#2, arg03
34ea8     02 FA 05 F6 | 	mov	result1, #2
34eac     DC 01 90 FD | 	jmp	#LR__5123
34eb0                 | LR__5114
34eb0     1C 4E 05 F1 | 	add	fp, #28
34eb4     A7 18 02 FB | 	rdlong	arg04, fp
34eb8     14 4E 85 F1 | 	sub	fp, #20
34ebc     A7 16 02 FB | 	rdlong	arg03, fp
34ec0     09 16 46 F0 | 	shr	arg03, #9
34ec4     0B 19 02 F1 | 	add	arg04, arg03
34ec8     14 4E 05 F1 | 	add	fp, #20
34ecc     A7 18 62 FC | 	wrlong	arg04, fp
34ed0     1C 4E 85 F1 | 	sub	fp, #28
34ed4                 | LR__5115
34ed4                 | LR__5116
34ed4                 | LR__5117
34ed4     04 4E 05 F1 | 	add	fp, #4
34ed8     A7 18 02 FB | 	rdlong	arg04, fp
34edc     0C 17 02 F6 | 	mov	arg03, arg04
34ee0     04 4E 85 F1 | 	sub	fp, #4
34ee4     14 16 06 F1 | 	add	arg03, #20
34ee8     0B 17 02 FB | 	rdlong	arg03, arg03
34eec     0C 18 06 F1 | 	add	arg04, #12
34ef0     0C 19 02 FB | 	rdlong	arg04, arg04
34ef4     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
34ef8     3C 00 90 ED |  if_be	jmp	#LR__5118
34efc     04 4E 05 F1 | 	add	fp, #4
34f00     A7 18 02 FB | 	rdlong	arg04, fp
34f04     0C 17 02 F6 | 	mov	arg03, arg04
34f08     14 18 06 F1 | 	add	arg04, #20
34f0c     0C 19 02 FB | 	rdlong	arg04, arg04
34f10     0C 16 06 F1 | 	add	arg03, #12
34f14     0B 19 62 FC | 	wrlong	arg04, arg03
34f18     A7 18 02 FB | 	rdlong	arg04, fp
34f1c     0C 17 02 F6 | 	mov	arg03, arg04
34f20     04 4E 85 F1 | 	sub	fp, #4
34f24     10 18 06 F1 | 	add	arg04, #16
34f28     0C 19 C2 FA | 	rdbyte	arg04, arg04
34f2c     40 18 46 F5 | 	or	arg04, #64
34f30     10 16 06 F1 | 	add	arg03, #16
34f34     0B 19 42 FC | 	wrbyte	arg04, arg03
34f38                 | LR__5118
34f38     04 4E 05 F1 | 	add	fp, #4
34f3c     A7 16 02 FB | 	rdlong	arg03, fp
34f40     04 4E 85 F1 | 	sub	fp, #4
34f44     14 16 06 F1 | 	add	arg03, #20
34f48     0B 17 02 FB | 	rdlong	arg03, arg03
34f4c     FF 17 CE F7 | 	test	arg03, #511 wz
34f50     2C 01 90 AD |  if_e	jmp	#LR__5122
34f54     04 4E 05 F1 | 	add	fp, #4
34f58     A7 18 02 FB | 	rdlong	arg04, fp
34f5c     18 4E 05 F1 | 	add	fp, #24
34f60     A7 16 02 FB | 	rdlong	arg03, fp
34f64     1C 4E 85 F1 | 	sub	fp, #28
34f68     1C 18 06 F1 | 	add	arg04, #28
34f6c     0C 19 02 FB | 	rdlong	arg04, arg04
34f70     0C 17 0A F2 | 	cmp	arg03, arg04 wz
34f74     08 01 90 AD |  if_e	jmp	#LR__5122
34f78     04 4E 05 F1 | 	add	fp, #4
34f7c     A7 16 02 FB | 	rdlong	arg03, fp
34f80     04 4E 85 F1 | 	sub	fp, #4
34f84     10 16 06 F1 | 	add	arg03, #16
34f88     0B 17 C2 FA | 	rdbyte	arg03, arg03
34f8c     80 16 CE F7 | 	test	arg03, #128 wz
34f90     7C 00 90 AD |  if_e	jmp	#LR__5120
34f94     10 4E 05 F1 | 	add	fp, #16
34f98     A7 16 02 FB | 	rdlong	arg03, fp
34f9c     01 16 06 F1 | 	add	arg03, #1
34fa0     0B 13 C2 FA | 	rdbyte	arg01, arg03
34fa4     0C 4E 85 F1 | 	sub	fp, #12
34fa8     A7 16 02 FB | 	rdlong	arg03, fp
34fac     0B 15 02 F6 | 	mov	arg02, arg03
34fb0     28 14 06 F1 | 	add	arg02, #40
34fb4     04 4E 85 F1 | 	sub	fp, #4
34fb8     1C 16 06 F1 | 	add	arg03, #28
34fbc     0B 17 02 FB | 	rdlong	arg03, arg03
34fc0     01 18 06 F6 | 	mov	arg04, #1
34fc4     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
34fc8     00 FA 0D F2 | 	cmp	result1, #0 wz
34fcc     1C 00 90 AD |  if_e	jmp	#LR__5119
34fd0     04 4E 05 F1 | 	add	fp, #4
34fd4     A7 16 02 FB | 	rdlong	arg03, fp
34fd8     04 4E 85 F1 | 	sub	fp, #4
34fdc     11 16 06 F1 | 	add	arg03, #17
34fe0     0B 03 48 FC | 	wrbyte	#1, arg03
34fe4     01 FA 05 F6 | 	mov	result1, #1
34fe8     A0 00 90 FD | 	jmp	#LR__5123
34fec                 | LR__5119
34fec     04 4E 05 F1 | 	add	fp, #4
34ff0     A7 18 02 FB | 	rdlong	arg04, fp
34ff4     0C 17 02 F6 | 	mov	arg03, arg04
34ff8     04 4E 85 F1 | 	sub	fp, #4
34ffc     10 18 06 F1 | 	add	arg04, #16
35000     0C 19 C2 FA | 	rdbyte	arg04, arg04
35004     7F 18 06 F5 | 	and	arg04, #127
35008     10 16 06 F1 | 	add	arg03, #16
3500c     0B 19 42 FC | 	wrbyte	arg04, arg03
35010                 | LR__5120
35010     10 4E 05 F1 | 	add	fp, #16
35014     A7 16 02 FB | 	rdlong	arg03, fp
35018     01 16 06 F1 | 	add	arg03, #1
3501c     0B 13 C2 FA | 	rdbyte	arg01, arg03
35020     0C 4E 85 F1 | 	sub	fp, #12
35024     A7 14 02 FB | 	rdlong	arg02, fp
35028     28 14 06 F1 | 	add	arg02, #40
3502c     18 4E 05 F1 | 	add	fp, #24
35030     A7 16 02 FB | 	rdlong	arg03, fp
35034     1C 4E 85 F1 | 	sub	fp, #28
35038     01 18 06 F6 | 	mov	arg04, #1
3503c     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
35040     00 FA 0D F2 | 	cmp	result1, #0 wz
35044     1C 00 90 AD |  if_e	jmp	#LR__5121
35048     04 4E 05 F1 | 	add	fp, #4
3504c     A7 16 02 FB | 	rdlong	arg03, fp
35050     04 4E 85 F1 | 	sub	fp, #4
35054     11 16 06 F1 | 	add	arg03, #17
35058     0B 03 48 FC | 	wrbyte	#1, arg03
3505c     01 FA 05 F6 | 	mov	result1, #1
35060     28 00 90 FD | 	jmp	#LR__5123
35064                 | LR__5121
35064     04 4E 05 F1 | 	add	fp, #4
35068     A7 18 02 FB | 	rdlong	arg04, fp
3506c     18 4E 05 F1 | 	add	fp, #24
35070     A7 16 02 FB | 	rdlong	arg03, fp
35074     1C 4E 85 F1 | 	sub	fp, #28
35078     1C 18 06 F1 | 	add	arg04, #28
3507c     0C 17 62 FC | 	wrlong	arg03, arg04
35080                 | LR__5122
35080                 | ' 
35080                 | ' 			fp->sect = nsect;
35080                 | ' 		}
35080                 | ' 	}
35080                 | ' 
35080                 | ' 	return res ;
35080     0C 4E 05 F1 | 	add	fp, #12
35084     A7 FA 01 FB | 	rdlong	result1, fp
35088     0C 4E 85 F1 | 	sub	fp, #12
3508c                 | LR__5123
3508c     A7 F0 03 F6 | 	mov	ptra, fp
35090     B2 00 A0 FD | 	call	#popregs_
35094                 | _fatfs_cc_f_lseek_ret
35094     2D 00 64 FD | 	ret
35098                 | 
35098                 | _fatfs_cc_f_opendir
35098     01 4A 05 F6 | 	mov	COUNT_, #1
3509c     A8 00 A0 FD | 	call	#pushregs_
350a0     14 F0 07 F1 | 	add	ptra, #20
350a4     04 4E 05 F1 | 	add	fp, #4
350a8     A7 12 62 FC | 	wrlong	arg01, fp
350ac     04 4E 05 F1 | 	add	fp, #4
350b0     A7 14 62 FC | 	wrlong	arg02, fp
350b4     04 4E 85 F1 | 	sub	fp, #4
350b8     A7 16 0A FB | 	rdlong	arg03, fp wz
350bc     04 4E 85 F1 | 	sub	fp, #4
350c0     09 FA 05 A6 |  if_e	mov	result1, #9
350c4     78 01 90 AD |  if_e	jmp	#LR__5136
350c8     08 4E 05 F1 | 	add	fp, #8
350cc     A7 12 02 F6 | 	mov	arg01, fp
350d0     08 4E 05 F1 | 	add	fp, #8
350d4     A7 14 02 F6 | 	mov	arg02, fp
350d8     10 4E 85 F1 | 	sub	fp, #16
350dc     00 16 06 F6 | 	mov	arg03, #0
350e0     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
350e4     0C 4E 05 F1 | 	add	fp, #12
350e8     A7 FA 61 FC | 	wrlong	result1, fp
350ec     0C 4E 85 F1 | 	sub	fp, #12
350f0     00 FA 0D F2 | 	cmp	result1, #0 wz
350f4     20 01 90 5D |  if_ne	jmp	#LR__5135
350f8     04 4E 05 F1 | 	add	fp, #4
350fc     A7 16 02 FB | 	rdlong	arg03, fp
35100     0C 4E 05 F1 | 	add	fp, #12
35104     A7 FA 01 FB | 	rdlong	result1, fp
35108     0B FB 61 FC | 	wrlong	result1, arg03
3510c     0C 4E 85 F1 | 	sub	fp, #12
35110     A7 12 02 FB | 	rdlong	arg01, fp
35114     04 4E 05 F1 | 	add	fp, #4
35118     A7 14 02 FB | 	rdlong	arg02, fp
3511c     08 4E 85 F1 | 	sub	fp, #8
35120     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
35124     0C 4E 05 F1 | 	add	fp, #12
35128     A7 FA 61 FC | 	wrlong	result1, fp
3512c     0C 4E 85 F1 | 	sub	fp, #12
35130     00 FA 0D F2 | 	cmp	result1, #0 wz
35134     C4 00 90 5D |  if_ne	jmp	#LR__5134
35138     04 4E 05 F1 | 	add	fp, #4
3513c     A7 16 02 FB | 	rdlong	arg03, fp
35140     04 4E 85 F1 | 	sub	fp, #4
35144     2B 16 06 F1 | 	add	arg03, #43
35148     0B 17 C2 FA | 	rdbyte	arg03, arg03
3514c     80 16 CE F7 | 	test	arg03, #128 wz
35150     58 00 90 5D |  if_ne	jmp	#LR__5132
35154     04 4E 05 F1 | 	add	fp, #4
35158     A7 16 02 FB | 	rdlong	arg03, fp
3515c     04 4E 85 F1 | 	sub	fp, #4
35160     06 16 06 F1 | 	add	arg03, #6
35164     0B 17 C2 FA | 	rdbyte	arg03, arg03
35168     10 16 CE F7 | 	test	arg03, #16 wz
3516c     30 00 90 AD |  if_e	jmp	#LR__5130
35170     04 4E 05 F1 | 	add	fp, #4
35174     A7 16 02 FB | 	rdlong	arg03, fp
35178     0B 27 02 F6 | 	mov	local01, arg03
3517c     0C 4E 05 F1 | 	add	fp, #12
35180     A7 12 02 FB | 	rdlong	arg01, fp
35184     10 4E 85 F1 | 	sub	fp, #16
35188     1C 16 06 F1 | 	add	arg03, #28
3518c     0B 15 02 FB | 	rdlong	arg02, arg03
35190     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
35194     08 26 06 F1 | 	add	local01, #8
35198     13 FB 61 FC | 	wrlong	result1, local01
3519c     0C 00 90 FD | 	jmp	#LR__5131
351a0                 | LR__5130
351a0     0C 4E 05 F1 | 	add	fp, #12
351a4     A7 0A 68 FC | 	wrlong	#5, fp
351a8     0C 4E 85 F1 | 	sub	fp, #12
351ac                 | LR__5131
351ac                 | LR__5132
351ac     0C 4E 05 F1 | 	add	fp, #12
351b0     A7 26 0A FB | 	rdlong	local01, fp wz
351b4     0C 4E 85 F1 | 	sub	fp, #12
351b8     40 00 90 5D |  if_ne	jmp	#LR__5133
351bc     04 4E 05 F1 | 	add	fp, #4
351c0     A7 26 02 FB | 	rdlong	local01, fp
351c4     0C 4E 05 F1 | 	add	fp, #12
351c8     A7 16 02 FB | 	rdlong	arg03, fp
351cc     06 16 06 F1 | 	add	arg03, #6
351d0     0B 17 E2 FA | 	rdword	arg03, arg03
351d4     04 26 06 F1 | 	add	local01, #4
351d8     13 17 52 FC | 	wrword	arg03, local01
351dc     0C 4E 85 F1 | 	sub	fp, #12
351e0     A7 12 02 FB | 	rdlong	arg01, fp
351e4     04 4E 85 F1 | 	sub	fp, #4
351e8     00 14 06 F6 | 	mov	arg02, #0
351ec     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
351f0     0C 4E 05 F1 | 	add	fp, #12
351f4     A7 FA 61 FC | 	wrlong	result1, fp
351f8     0C 4E 85 F1 | 	sub	fp, #12
351fc                 | LR__5133
351fc                 | LR__5134
351fc     0C 4E 05 F1 | 	add	fp, #12
35200     A7 26 02 FB | 	rdlong	local01, fp
35204     0C 4E 85 F1 | 	sub	fp, #12
35208     04 26 0E F2 | 	cmp	local01, #4 wz
3520c     0C 4E 05 A1 |  if_e	add	fp, #12
35210     A7 0A 68 AC |  if_e	wrlong	#5, fp
35214     0C 4E 85 A1 |  if_e	sub	fp, #12
35218                 | LR__5135
35218     0C 4E 05 F1 | 	add	fp, #12
3521c     A7 26 0A FB | 	rdlong	local01, fp wz
35220     0C 4E 85 F1 | 	sub	fp, #12
35224     04 4E 05 51 |  if_ne	add	fp, #4
35228     A7 26 02 5B |  if_ne	rdlong	local01, fp
3522c     04 4E 85 51 |  if_ne	sub	fp, #4
35230     13 01 68 5C |  if_ne	wrlong	#0, local01
35234                 | ' 
35234                 | ' 	return res ;
35234     0C 4E 05 F1 | 	add	fp, #12
35238     A7 FA 01 FB | 	rdlong	result1, fp
3523c     0C 4E 85 F1 | 	sub	fp, #12
35240                 | LR__5136
35240     A7 F0 03 F6 | 	mov	ptra, fp
35244     B2 00 A0 FD | 	call	#popregs_
35248                 | _fatfs_cc_f_opendir_ret
35248     2D 00 64 FD | 	ret
3524c                 | 
3524c                 | _fatfs_cc_f_closedir
3524c     00 4A 05 F6 | 	mov	COUNT_, #0
35250     A8 00 A0 FD | 	call	#pushregs_
35254     10 F0 07 F1 | 	add	ptra, #16
35258     04 4E 05 F1 | 	add	fp, #4
3525c     A7 12 62 FC | 	wrlong	arg01, fp
35260     08 4E 05 F1 | 	add	fp, #8
35264     A7 14 02 F6 | 	mov	arg02, fp
35268     0C 4E 85 F1 | 	sub	fp, #12
3526c     C0 DD BF FD | 	call	#_fatfs_cc_validate
35270     08 4E 05 F1 | 	add	fp, #8
35274     A7 FA 61 FC | 	wrlong	result1, fp
35278     08 4E 85 F1 | 	sub	fp, #8
3527c     00 FA 0D F2 | 	cmp	result1, #0 wz
35280     04 4E 05 A1 |  if_e	add	fp, #4
35284     A7 FA 01 AB |  if_e	rdlong	result1, fp
35288     04 4E 85 A1 |  if_e	sub	fp, #4
3528c     FD 00 68 AC |  if_e	wrlong	#0, result1
35290                 | ' 
35290                 | ' 
35290                 | ' 
35290                 | ' 
35290                 | ' 		dp->obj.fs = 0;
35290                 | ' #line 4633 "ff.c"
35290                 | ' 	}
35290                 | ' 	return res;
35290     08 4E 05 F1 | 	add	fp, #8
35294     A7 FA 01 FB | 	rdlong	result1, fp
35298     08 4E 85 F1 | 	sub	fp, #8
3529c     A7 F0 03 F6 | 	mov	ptra, fp
352a0     B2 00 A0 FD | 	call	#popregs_
352a4                 | _fatfs_cc_f_closedir_ret
352a4     2D 00 64 FD | 	ret
352a8                 | 
352a8                 | _fatfs_cc_f_readdir
352a8     00 4A 05 F6 | 	mov	COUNT_, #0
352ac     A8 00 A0 FD | 	call	#pushregs_
352b0     14 F0 07 F1 | 	add	ptra, #20
352b4     04 4E 05 F1 | 	add	fp, #4
352b8     A7 12 62 FC | 	wrlong	arg01, fp
352bc     04 4E 05 F1 | 	add	fp, #4
352c0     A7 14 62 FC | 	wrlong	arg02, fp
352c4     04 4E 85 F1 | 	sub	fp, #4
352c8     A7 12 02 FB | 	rdlong	arg01, fp
352cc     0C 4E 05 F1 | 	add	fp, #12
352d0     A7 14 02 F6 | 	mov	arg02, fp
352d4     10 4E 85 F1 | 	sub	fp, #16
352d8     54 DD BF FD | 	call	#_fatfs_cc_validate
352dc     0C 4E 05 F1 | 	add	fp, #12
352e0     A7 FA 61 FC | 	wrlong	result1, fp
352e4     0C 4E 85 F1 | 	sub	fp, #12
352e8     00 FA 0D F2 | 	cmp	result1, #0 wz
352ec     BC 00 90 5D |  if_ne	jmp	#LR__5143
352f0     08 4E 05 F1 | 	add	fp, #8
352f4     A7 FA 09 FB | 	rdlong	result1, fp wz
352f8     08 4E 85 F1 | 	sub	fp, #8
352fc     24 00 90 5D |  if_ne	jmp	#LR__5140
35300     04 4E 05 F1 | 	add	fp, #4
35304     A7 12 02 FB | 	rdlong	arg01, fp
35308     04 4E 85 F1 | 	sub	fp, #4
3530c     00 14 06 F6 | 	mov	arg02, #0
35310     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
35314     0C 4E 05 F1 | 	add	fp, #12
35318     A7 FA 61 FC | 	wrlong	result1, fp
3531c     0C 4E 85 F1 | 	sub	fp, #12
35320     88 00 90 FD | 	jmp	#LR__5142
35324                 | LR__5140
35324     04 4E 05 F1 | 	add	fp, #4
35328     A7 12 02 FB | 	rdlong	arg01, fp
3532c     04 4E 85 F1 | 	sub	fp, #4
35330     00 14 06 F6 | 	mov	arg02, #0
35334     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
35338     0C 4E 05 F1 | 	add	fp, #12
3533c     A7 FA 61 FC | 	wrlong	result1, fp
35340     0C 4E 85 F1 | 	sub	fp, #12
35344     04 FA 0D F2 | 	cmp	result1, #4 wz
35348     0C 4E 05 A1 |  if_e	add	fp, #12
3534c     A7 00 68 AC |  if_e	wrlong	#0, fp
35350     0C 4E 85 A1 |  if_e	sub	fp, #12
35354     0C 4E 05 F1 | 	add	fp, #12
35358     A7 FA 09 FB | 	rdlong	result1, fp wz
3535c     0C 4E 85 F1 | 	sub	fp, #12
35360     48 00 90 5D |  if_ne	jmp	#LR__5141
35364     04 4E 05 F1 | 	add	fp, #4
35368     A7 12 02 FB | 	rdlong	arg01, fp
3536c     04 4E 05 F1 | 	add	fp, #4
35370     A7 14 02 FB | 	rdlong	arg02, fp
35374     08 4E 85 F1 | 	sub	fp, #8
35378     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
3537c     04 4E 05 F1 | 	add	fp, #4
35380     A7 12 02 FB | 	rdlong	arg01, fp
35384     04 4E 85 F1 | 	sub	fp, #4
35388     00 14 06 F6 | 	mov	arg02, #0
3538c     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
35390     0C 4E 05 F1 | 	add	fp, #12
35394     A7 FA 61 FC | 	wrlong	result1, fp
35398     0C 4E 85 F1 | 	sub	fp, #12
3539c     04 FA 0D F2 | 	cmp	result1, #4 wz
353a0     0C 4E 05 A1 |  if_e	add	fp, #12
353a4     A7 00 68 AC |  if_e	wrlong	#0, fp
353a8     0C 4E 85 A1 |  if_e	sub	fp, #12
353ac                 | LR__5141
353ac                 | LR__5142
353ac                 | LR__5143
353ac                 | ' 			}
353ac                 | ' 			;
353ac                 | ' 		}
353ac                 | ' 	}
353ac                 | ' 	return res ;
353ac     0C 4E 05 F1 | 	add	fp, #12
353b0     A7 FA 01 FB | 	rdlong	result1, fp
353b4     0C 4E 85 F1 | 	sub	fp, #12
353b8     A7 F0 03 F6 | 	mov	ptra, fp
353bc     B2 00 A0 FD | 	call	#popregs_
353c0                 | _fatfs_cc_f_readdir_ret
353c0     2D 00 64 FD | 	ret
353c4                 | 
353c4                 | _fatfs_cc_f_stat
353c4     00 4A 05 F6 | 	mov	COUNT_, #0
353c8     A8 00 A0 FD | 	call	#pushregs_
353cc     40 F0 07 F1 | 	add	ptra, #64
353d0     04 4E 05 F1 | 	add	fp, #4
353d4     A7 12 62 FC | 	wrlong	arg01, fp
353d8     04 4E 05 F1 | 	add	fp, #4
353dc     A7 14 62 FC | 	wrlong	arg02, fp
353e0     04 4E 85 F1 | 	sub	fp, #4
353e4     A7 12 02 F6 | 	mov	arg01, fp
353e8     0C 4E 05 F1 | 	add	fp, #12
353ec     A7 14 02 F6 | 	mov	arg02, fp
353f0     10 4E 85 F1 | 	sub	fp, #16
353f4     00 16 06 F6 | 	mov	arg03, #0
353f8     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
353fc     0C 4E 05 F1 | 	add	fp, #12
35400     A7 FA 61 FC | 	wrlong	result1, fp
35404     0C 4E 85 F1 | 	sub	fp, #12
35408     00 FA 0D F2 | 	cmp	result1, #0 wz
3540c     74 00 90 5D |  if_ne	jmp	#LR__5153
35410     10 4E 05 F1 | 	add	fp, #16
35414     A7 12 02 F6 | 	mov	arg01, fp
35418     0C 4E 85 F1 | 	sub	fp, #12
3541c     A7 14 02 FB | 	rdlong	arg02, fp
35420     04 4E 85 F1 | 	sub	fp, #4
35424     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
35428     0C 4E 05 F1 | 	add	fp, #12
3542c     A7 FA 61 FC | 	wrlong	result1, fp
35430     0C 4E 85 F1 | 	sub	fp, #12
35434     00 FA 0D F2 | 	cmp	result1, #0 wz
35438     48 00 90 5D |  if_ne	jmp	#LR__5152
3543c     3B 4E 05 F1 | 	add	fp, #59
35440     A7 FA C1 FA | 	rdbyte	result1, fp
35444     3B 4E 85 F1 | 	sub	fp, #59
35448     80 FA CD F7 | 	test	result1, #128 wz
3544c     0C 4E 05 51 |  if_ne	add	fp, #12
35450     A7 0C 68 5C |  if_ne	wrlong	#6, fp
35454     0C 4E 85 51 |  if_ne	sub	fp, #12
35458     28 00 90 5D |  if_ne	jmp	#LR__5151
3545c     08 4E 05 F1 | 	add	fp, #8
35460     A7 FA 09 FB | 	rdlong	result1, fp wz
35464     08 4E 85 F1 | 	sub	fp, #8
35468     18 00 90 AD |  if_e	jmp	#LR__5150
3546c     10 4E 05 F1 | 	add	fp, #16
35470     A7 12 02 F6 | 	mov	arg01, fp
35474     08 4E 85 F1 | 	sub	fp, #8
35478     A7 14 02 FB | 	rdlong	arg02, fp
3547c     08 4E 85 F1 | 	sub	fp, #8
35480     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
35484                 | LR__5150
35484                 | LR__5151
35484                 | LR__5152
35484                 | LR__5153
35484                 | ' 			}
35484                 | ' 		}
35484                 | ' 		;
35484                 | ' 	}
35484                 | ' 
35484                 | ' 	return res ;
35484     0C 4E 05 F1 | 	add	fp, #12
35488     A7 FA 01 FB | 	rdlong	result1, fp
3548c     0C 4E 85 F1 | 	sub	fp, #12
35490     A7 F0 03 F6 | 	mov	ptra, fp
35494     B2 00 A0 FD | 	call	#popregs_
35498                 | _fatfs_cc_f_stat_ret
35498     2D 00 64 FD | 	ret
3549c                 | 
3549c                 | _fatfs_cc_f_unlink
3549c     00 4A 05 F6 | 	mov	COUNT_, #0
354a0     A8 00 A0 FD | 	call	#pushregs_
354a4     74 F0 07 F1 | 	add	ptra, #116
354a8     04 4E 05 F1 | 	add	fp, #4
354ac     A7 12 62 FC | 	wrlong	arg01, fp
354b0     68 4E 05 F1 | 	add	fp, #104
354b4     A7 00 68 FC | 	wrlong	#0, fp
354b8     68 4E 85 F1 | 	sub	fp, #104
354bc     A7 12 02 F6 | 	mov	arg01, fp
354c0     6C 4E 05 F1 | 	add	fp, #108
354c4     A7 14 02 F6 | 	mov	arg02, fp
354c8     70 4E 85 F1 | 	sub	fp, #112
354cc     02 16 06 F6 | 	mov	arg03, #2
354d0     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
354d4     08 4E 05 F1 | 	add	fp, #8
354d8     A7 FA 61 FC | 	wrlong	result1, fp
354dc     08 4E 85 F1 | 	sub	fp, #8
354e0     00 FA 0D F2 | 	cmp	result1, #0 wz
354e4     E4 01 90 5D |  if_ne	jmp	#LR__5168
354e8     70 4E 05 F1 | 	add	fp, #112
354ec     A7 16 02 FB | 	rdlong	arg03, fp
354f0     64 4E 85 F1 | 	sub	fp, #100
354f4     A7 16 62 FC | 	wrlong	arg03, fp
354f8     A7 12 02 F6 | 	mov	arg01, fp
354fc     08 4E 85 F1 | 	sub	fp, #8
35500     A7 14 02 FB | 	rdlong	arg02, fp
35504     04 4E 85 F1 | 	sub	fp, #4
35508     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
3550c     08 4E 05 F1 | 	add	fp, #8
35510     A7 FA 61 FC | 	wrlong	result1, fp
35514     00 FA 4D F2 | 	cmps	result1, #0 wz
35518     08 4E 85 F1 | 	sub	fp, #8
3551c     AC 01 90 5D |  if_ne	jmp	#LR__5167
35520     37 4E 05 F1 | 	add	fp, #55
35524     A7 FA C1 FA | 	rdbyte	result1, fp
35528     37 4E 85 F1 | 	sub	fp, #55
3552c     80 FA CD F7 | 	test	result1, #128 wz
35530     08 4E 05 51 |  if_ne	add	fp, #8
35534     A7 0C 68 5C |  if_ne	wrlong	#6, fp
35538     08 4E 85 51 |  if_ne	sub	fp, #8
3553c     1C 00 90 5D |  if_ne	jmp	#LR__5160
35540     12 4E 05 F1 | 	add	fp, #18
35544     A7 FA C1 FA | 	rdbyte	result1, fp
35548     12 4E 85 F1 | 	sub	fp, #18
3554c     01 FA CD F7 | 	test	result1, #1 wz
35550     08 4E 05 51 |  if_ne	add	fp, #8
35554     A7 0E 68 5C |  if_ne	wrlong	#7, fp
35558     08 4E 85 51 |  if_ne	sub	fp, #8
3555c                 | LR__5160
3555c     08 4E 05 F1 | 	add	fp, #8
35560     A7 FA 09 FB | 	rdlong	result1, fp wz
35564     08 4E 85 F1 | 	sub	fp, #8
35568     C8 00 90 5D |  if_ne	jmp	#LR__5163
3556c     70 4E 05 F1 | 	add	fp, #112
35570     A7 12 02 FB | 	rdlong	arg01, fp
35574     48 4E 85 F1 | 	sub	fp, #72
35578     A7 14 02 FB | 	rdlong	arg02, fp
3557c     28 4E 85 F1 | 	sub	fp, #40
35580     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
35584     6C 4E 05 F1 | 	add	fp, #108
35588     A7 FA 61 FC | 	wrlong	result1, fp
3558c     5A 4E 85 F1 | 	sub	fp, #90
35590     A7 FA C1 FA | 	rdbyte	result1, fp
35594     12 4E 85 F1 | 	sub	fp, #18
35598     10 FA CD F7 | 	test	result1, #16 wz
3559c     94 00 90 AD |  if_e	jmp	#LR__5162
355a0     70 4E 05 F1 | 	add	fp, #112
355a4     A7 FA 01 FB | 	rdlong	result1, fp
355a8     34 4E 85 F1 | 	sub	fp, #52
355ac     A7 FA 61 FC | 	wrlong	result1, fp
355b0     30 4E 05 F1 | 	add	fp, #48
355b4     A7 16 02 FB | 	rdlong	arg03, fp
355b8     28 4E 85 F1 | 	sub	fp, #40
355bc     A7 16 62 FC | 	wrlong	arg03, fp
355c0     08 4E 85 F1 | 	sub	fp, #8
355c4     A7 12 02 F6 | 	mov	arg01, fp
355c8     3C 4E 85 F1 | 	sub	fp, #60
355cc     00 14 06 F6 | 	mov	arg02, #0
355d0     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
355d4     08 4E 05 F1 | 	add	fp, #8
355d8     A7 FA 61 FC | 	wrlong	result1, fp
355dc     08 4E 85 F1 | 	sub	fp, #8
355e0     00 FA 0D F2 | 	cmp	result1, #0 wz
355e4     4C 00 90 5D |  if_ne	jmp	#LR__5161
355e8     3C 4E 05 F1 | 	add	fp, #60
355ec     A7 12 02 F6 | 	mov	arg01, fp
355f0     3C 4E 85 F1 | 	sub	fp, #60
355f4     00 14 06 F6 | 	mov	arg02, #0
355f8     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
355fc     08 4E 05 F1 | 	add	fp, #8
35600     A7 FA 61 FC | 	wrlong	result1, fp
35604     00 FA 4D F2 | 	cmps	result1, #0 wz
35608     08 4E 85 F1 | 	sub	fp, #8
3560c     08 4E 05 A1 |  if_e	add	fp, #8
35610     A7 0E 68 AC |  if_e	wrlong	#7, fp
35614     08 4E 85 A1 |  if_e	sub	fp, #8
35618     08 4E 05 F1 | 	add	fp, #8
3561c     A7 FA 01 FB | 	rdlong	result1, fp
35620     08 4E 85 F1 | 	sub	fp, #8
35624     04 FA 0D F2 | 	cmp	result1, #4 wz
35628     08 4E 05 A1 |  if_e	add	fp, #8
3562c     A7 00 68 AC |  if_e	wrlong	#0, fp
35630     08 4E 85 A1 |  if_e	sub	fp, #8
35634                 | LR__5161
35634                 | LR__5162
35634                 | LR__5163
35634     08 4E 05 F1 | 	add	fp, #8
35638     A7 FA 09 FB | 	rdlong	result1, fp wz
3563c     08 4E 85 F1 | 	sub	fp, #8
35640     88 00 90 5D |  if_ne	jmp	#LR__5166
35644     0C 4E 05 F1 | 	add	fp, #12
35648     A7 12 02 F6 | 	mov	arg01, fp
3564c     0C 4E 85 F1 | 	sub	fp, #12
35650     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
35654     08 4E 05 F1 | 	add	fp, #8
35658     A7 FA 61 FC | 	wrlong	result1, fp
3565c     08 4E 85 F1 | 	sub	fp, #8
35660     00 FA 0D F2 | 	cmp	result1, #0 wz
35664     38 00 90 5D |  if_ne	jmp	#LR__5164
35668     6C 4E 05 F1 | 	add	fp, #108
3566c     A7 FA 09 FB | 	rdlong	result1, fp wz
35670     6C 4E 85 F1 | 	sub	fp, #108
35674     28 00 90 AD |  if_e	jmp	#LR__5164
35678     0C 4E 05 F1 | 	add	fp, #12
3567c     A7 12 02 F6 | 	mov	arg01, fp
35680     60 4E 05 F1 | 	add	fp, #96
35684     A7 14 02 FB | 	rdlong	arg02, fp
35688     6C 4E 85 F1 | 	sub	fp, #108
3568c     00 16 06 F6 | 	mov	arg03, #0
35690     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
35694     08 4E 05 F1 | 	add	fp, #8
35698     A7 FA 61 FC | 	wrlong	result1, fp
3569c     08 4E 85 F1 | 	sub	fp, #8
356a0                 | LR__5164
356a0     08 4E 05 F1 | 	add	fp, #8
356a4     A7 FA 09 FB | 	rdlong	result1, fp wz
356a8     08 4E 85 F1 | 	sub	fp, #8
356ac     1C 00 90 5D |  if_ne	jmp	#LR__5165
356b0     70 4E 05 F1 | 	add	fp, #112
356b4     A7 12 02 FB | 	rdlong	arg01, fp
356b8     70 4E 85 F1 | 	sub	fp, #112
356bc     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
356c0     08 4E 05 F1 | 	add	fp, #8
356c4     A7 FA 61 FC | 	wrlong	result1, fp
356c8     08 4E 85 F1 | 	sub	fp, #8
356cc                 | LR__5165
356cc                 | LR__5166
356cc                 | LR__5167
356cc                 | LR__5168
356cc                 | ' 			}
356cc                 | ' 		}
356cc                 | ' 		;
356cc                 | ' 	}
356cc                 | ' 
356cc                 | ' 	return res ;
356cc     08 4E 05 F1 | 	add	fp, #8
356d0     A7 FA 01 FB | 	rdlong	result1, fp
356d4     08 4E 85 F1 | 	sub	fp, #8
356d8     A7 F0 03 F6 | 	mov	ptra, fp
356dc     B2 00 A0 FD | 	call	#popregs_
356e0                 | _fatfs_cc_f_unlink_ret
356e0     2D 00 64 FD | 	ret
356e4                 | 
356e4                 | _fatfs_cc_f_mkdir
356e4     00 4A 05 F6 | 	mov	COUNT_, #0
356e8     A8 00 A0 FD | 	call	#pushregs_
356ec     5C F0 07 F1 | 	add	ptra, #92
356f0     04 4E 05 F1 | 	add	fp, #4
356f4     A7 12 62 FC | 	wrlong	arg01, fp
356f8     A7 12 02 F6 | 	mov	arg01, fp
356fc     48 4E 05 F1 | 	add	fp, #72
35700     A7 14 02 F6 | 	mov	arg02, fp
35704     4C 4E 85 F1 | 	sub	fp, #76
35708     02 16 06 F6 | 	mov	arg03, #2
3570c     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
35710     08 4E 05 F1 | 	add	fp, #8
35714     A7 FA 61 FC | 	wrlong	result1, fp
35718     08 4E 85 F1 | 	sub	fp, #8
3571c     00 FA 0D F2 | 	cmp	result1, #0 wz
35720     C4 02 90 5D |  if_ne	jmp	#LR__5175
35724     4C 4E 05 F1 | 	add	fp, #76
35728     A7 16 02 FB | 	rdlong	arg03, fp
3572c     40 4E 85 F1 | 	sub	fp, #64
35730     A7 16 62 FC | 	wrlong	arg03, fp
35734     A7 12 02 F6 | 	mov	arg01, fp
35738     08 4E 85 F1 | 	sub	fp, #8
3573c     A7 14 02 FB | 	rdlong	arg02, fp
35740     04 4E 85 F1 | 	sub	fp, #4
35744     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
35748     08 4E 05 F1 | 	add	fp, #8
3574c     A7 FA 61 FC | 	wrlong	result1, fp
35750     00 FA 4D F2 | 	cmps	result1, #0 wz
35754     08 4E 85 F1 | 	sub	fp, #8
35758     08 4E 05 A1 |  if_e	add	fp, #8
3575c     A7 10 68 AC |  if_e	wrlong	#8, fp
35760     08 4E 85 A1 |  if_e	sub	fp, #8
35764     08 4E 05 F1 | 	add	fp, #8
35768     A7 FA 01 FB | 	rdlong	result1, fp
3576c     08 4E 85 F1 | 	sub	fp, #8
35770     04 FA 0D F2 | 	cmp	result1, #4 wz
35774     70 02 90 5D |  if_ne	jmp	#LR__5174
35778     4C 4E 05 F1 | 	add	fp, #76
3577c     A7 16 02 FB | 	rdlong	arg03, fp
35780     10 4E 85 F1 | 	sub	fp, #16
35784     A7 16 62 FC | 	wrlong	arg03, fp
35788     A7 12 02 F6 | 	mov	arg01, fp
3578c     3C 4E 85 F1 | 	sub	fp, #60
35790     00 14 06 F6 | 	mov	arg02, #0
35794     04 AC BF FD | 	call	#_fatfs_cc_create_chain
35798     50 4E 05 F1 | 	add	fp, #80
3579c     A7 FA 61 FC | 	wrlong	result1, fp
357a0     48 4E 85 F1 | 	sub	fp, #72
357a4     A7 00 68 FC | 	wrlong	#0, fp
357a8     48 4E 05 F1 | 	add	fp, #72
357ac     A7 FA 09 FB | 	rdlong	result1, fp wz
357b0     50 4E 85 F1 | 	sub	fp, #80
357b4     08 4E 05 A1 |  if_e	add	fp, #8
357b8     A7 0E 68 AC |  if_e	wrlong	#7, fp
357bc     08 4E 85 A1 |  if_e	sub	fp, #8
357c0     50 4E 05 F1 | 	add	fp, #80
357c4     A7 FA 01 FB | 	rdlong	result1, fp
357c8     50 4E 85 F1 | 	sub	fp, #80
357cc     01 FA 0D F2 | 	cmp	result1, #1 wz
357d0     08 4E 05 A1 |  if_e	add	fp, #8
357d4     A7 04 68 AC |  if_e	wrlong	#2, fp
357d8     08 4E 85 A1 |  if_e	sub	fp, #8
357dc     50 4E 05 F1 | 	add	fp, #80
357e0     A7 16 02 FB | 	rdlong	arg03, fp
357e4     50 4E 85 F1 | 	sub	fp, #80
357e8     FF FF 7F FF 
357ec     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
357f0     08 4E 05 A1 |  if_e	add	fp, #8
357f4     A7 02 68 AC |  if_e	wrlong	#1, fp
357f8     08 4E 85 A1 |  if_e	sub	fp, #8
357fc     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
35800     58 4E 05 F1 | 	add	fp, #88
35804     A7 FA 61 FC | 	wrlong	result1, fp
35808     50 4E 85 F1 | 	sub	fp, #80
3580c     A7 FA 09 FB | 	rdlong	result1, fp wz
35810     08 4E 85 F1 | 	sub	fp, #8
35814     1C 01 90 5D |  if_ne	jmp	#LR__5171
35818     4C 4E 05 F1 | 	add	fp, #76
3581c     A7 12 02 FB | 	rdlong	arg01, fp
35820     04 4E 05 F1 | 	add	fp, #4
35824     A7 14 02 FB | 	rdlong	arg02, fp
35828     50 4E 85 F1 | 	sub	fp, #80
3582c     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
35830     08 4E 05 F1 | 	add	fp, #8
35834     A7 FA 61 FC | 	wrlong	result1, fp
35838     00 FA 4D F2 | 	cmps	result1, #0 wz
3583c     08 4E 85 F1 | 	sub	fp, #8
35840     F0 00 90 5D |  if_ne	jmp	#LR__5170
35844     4C 4E 05 F1 | 	add	fp, #76
35848     A7 12 02 FB | 	rdlong	arg01, fp
3584c     4C 4E 85 F1 | 	sub	fp, #76
35850     34 12 06 F1 | 	add	arg01, #52
35854     20 14 06 F6 | 	mov	arg02, #32
35858     0B 16 06 F6 | 	mov	arg03, #11
3585c     98 00 A0 FD | 	call	#\builtin_bytefill_
35860     4C 4E 05 F1 | 	add	fp, #76
35864     A7 FA 01 FB | 	rdlong	result1, fp
35868     34 FA 05 F1 | 	add	result1, #52
3586c     FD 5C 48 FC | 	wrbyte	#46, result1
35870     A7 16 02 FB | 	rdlong	arg03, fp
35874     3F 16 06 F1 | 	add	arg03, #63
35878     0B 21 48 FC | 	wrbyte	#16, arg03
3587c     A7 12 02 FB | 	rdlong	arg01, fp
35880     4A 12 06 F1 | 	add	arg01, #74
35884     0C 4E 05 F1 | 	add	fp, #12
35888     A7 14 02 FB | 	rdlong	arg02, fp
3588c     09 15 62 FC | 	wrlong	arg02, arg01
35890     0C 4E 85 F1 | 	sub	fp, #12
35894     A7 14 02 FB | 	rdlong	arg02, fp
35898     0A 13 02 F6 | 	mov	arg01, arg02
3589c     34 14 06 F1 | 	add	arg02, #52
358a0     04 4E 05 F1 | 	add	fp, #4
358a4     A7 16 02 FB | 	rdlong	arg03, fp
358a8     50 4E 85 F1 | 	sub	fp, #80
358ac     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
358b0     4C 4E 05 F1 | 	add	fp, #76
358b4     A7 14 02 FB | 	rdlong	arg02, fp
358b8     0A 13 02 F6 | 	mov	arg01, arg02
358bc     54 12 06 F1 | 	add	arg01, #84
358c0     4C 4E 85 F1 | 	sub	fp, #76
358c4     34 14 06 F1 | 	add	arg02, #52
358c8     20 16 06 F6 | 	mov	arg03, #32
358cc     F4 26 BF FD | 	call	#__system____builtin_memmove
358d0     4C 4E 05 F1 | 	add	fp, #76
358d4     A7 16 02 FB | 	rdlong	arg03, fp
358d8     55 16 06 F1 | 	add	arg03, #85
358dc     0B 5D 48 FC | 	wrbyte	#46, arg03
358e0     38 4E 85 F1 | 	sub	fp, #56
358e4     A7 16 02 FB | 	rdlong	arg03, fp
358e8     40 4E 05 F1 | 	add	fp, #64
358ec     A7 16 62 FC | 	wrlong	arg03, fp
358f0     08 4E 85 F1 | 	sub	fp, #8
358f4     A7 14 02 FB | 	rdlong	arg02, fp
358f8     0A 13 02 F6 | 	mov	arg01, arg02
358fc     54 14 06 F1 | 	add	arg02, #84
35900     4C 4E 85 F1 | 	sub	fp, #76
35904     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
35908     4C 4E 05 F1 | 	add	fp, #76
3590c     A7 16 02 FB | 	rdlong	arg03, fp
35910     03 16 06 F1 | 	add	arg03, #3
35914     0B 03 48 FC | 	wrbyte	#1, arg03
35918     40 4E 85 F1 | 	sub	fp, #64
3591c     A7 12 02 F6 | 	mov	arg01, fp
35920     0C 4E 85 F1 | 	sub	fp, #12
35924     44 BA BF FD | 	call	#_fatfs_cc_dir_register
35928     08 4E 05 F1 | 	add	fp, #8
3592c     A7 FA 61 FC | 	wrlong	result1, fp
35930     08 4E 85 F1 | 	sub	fp, #8
35934                 | LR__5170
35934                 | LR__5171
35934     08 4E 05 F1 | 	add	fp, #8
35938     A7 FA 09 FB | 	rdlong	result1, fp wz
3593c     08 4E 85 F1 | 	sub	fp, #8
35940     88 00 90 5D |  if_ne	jmp	#LR__5172
35944     28 4E 05 F1 | 	add	fp, #40
35948     A7 12 02 FB | 	rdlong	arg01, fp
3594c     16 12 06 F1 | 	add	arg01, #22
35950     30 4E 05 F1 | 	add	fp, #48
35954     A7 14 02 FB | 	rdlong	arg02, fp
35958     09 15 62 FC | 	wrlong	arg02, arg01
3595c     0C 4E 85 F1 | 	sub	fp, #12
35960     A7 12 02 FB | 	rdlong	arg01, fp
35964     24 4E 85 F1 | 	sub	fp, #36
35968     A7 14 02 FB | 	rdlong	arg02, fp
3596c     28 4E 05 F1 | 	add	fp, #40
35970     A7 16 02 FB | 	rdlong	arg03, fp
35974     50 4E 85 F1 | 	sub	fp, #80
35978     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
3597c     28 4E 05 F1 | 	add	fp, #40
35980     A7 FA 01 FB | 	rdlong	result1, fp
35984     0B FA 05 F1 | 	add	result1, #11
35988     FD 20 48 FC | 	wrbyte	#16, result1
3598c     24 4E 05 F1 | 	add	fp, #36
35990     A7 FA 01 FB | 	rdlong	result1, fp
35994     03 FA 05 F1 | 	add	result1, #3
35998     FD 02 48 FC | 	wrbyte	#1, result1
3599c     44 4E 85 F1 | 	sub	fp, #68
359a0     A7 FA 09 FB | 	rdlong	result1, fp wz
359a4     08 4E 85 F1 | 	sub	fp, #8
359a8     3C 00 90 5D |  if_ne	jmp	#LR__5173
359ac     4C 4E 05 F1 | 	add	fp, #76
359b0     A7 12 02 FB | 	rdlong	arg01, fp
359b4     4C 4E 85 F1 | 	sub	fp, #76
359b8     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
359bc     08 4E 05 F1 | 	add	fp, #8
359c0     A7 FA 61 FC | 	wrlong	result1, fp
359c4     08 4E 85 F1 | 	sub	fp, #8
359c8     1C 00 90 FD | 	jmp	#LR__5173
359cc                 | LR__5172
359cc     3C 4E 05 F1 | 	add	fp, #60
359d0     A7 12 02 F6 | 	mov	arg01, fp
359d4     14 4E 05 F1 | 	add	fp, #20
359d8     A7 14 02 FB | 	rdlong	arg02, fp
359dc     50 4E 85 F1 | 	sub	fp, #80
359e0     00 16 06 F6 | 	mov	arg03, #0
359e4     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
359e8                 | LR__5173
359e8                 | LR__5174
359e8                 | LR__5175
359e8                 | ' 				remove_chain(&sobj, dcl, 0);
359e8                 | ' 			}
359e8                 | ' 		}
359e8                 | ' 		;
359e8                 | ' 	}
359e8                 | ' 
359e8                 | ' 	return res ;
359e8     08 4E 05 F1 | 	add	fp, #8
359ec     A7 FA 01 FB | 	rdlong	result1, fp
359f0     08 4E 85 F1 | 	sub	fp, #8
359f4     A7 F0 03 F6 | 	mov	ptra, fp
359f8     B2 00 A0 FD | 	call	#popregs_
359fc                 | _fatfs_cc_f_mkdir_ret
359fc     2D 00 64 FD | 	ret
35a00                 | 
35a00                 | _fatfs_cc_f_rename
35a00     01 4A 05 F6 | 	mov	COUNT_, #1
35a04     A8 00 A0 FD | 	call	#pushregs_
35a08     9C F0 07 F1 | 	add	ptra, #156
35a0c     04 4E 05 F1 | 	add	fp, #4
35a10     A7 12 62 FC | 	wrlong	arg01, fp
35a14     04 4E 05 F1 | 	add	fp, #4
35a18     A7 14 62 FC | 	wrlong	arg02, fp
35a1c     A7 12 02 F6 | 	mov	arg01, fp
35a20     08 4E 85 F1 | 	sub	fp, #8
35a24     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
35a28     04 4E 05 F1 | 	add	fp, #4
35a2c     A7 12 02 F6 | 	mov	arg01, fp
35a30     6C 4E 05 F1 | 	add	fp, #108
35a34     A7 14 02 F6 | 	mov	arg02, fp
35a38     70 4E 85 F1 | 	sub	fp, #112
35a3c     02 16 06 F6 | 	mov	arg03, #2
35a40     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
35a44     0C 4E 05 F1 | 	add	fp, #12
35a48     A7 FA 61 FC | 	wrlong	result1, fp
35a4c     0C 4E 85 F1 | 	sub	fp, #12
35a50     00 FA 0D F2 | 	cmp	result1, #0 wz
35a54     44 03 90 5D |  if_ne	jmp	#LR__5193
35a58     70 4E 05 F1 | 	add	fp, #112
35a5c     A7 16 02 FB | 	rdlong	arg03, fp
35a60     60 4E 85 F1 | 	sub	fp, #96
35a64     A7 16 62 FC | 	wrlong	arg03, fp
35a68     A7 12 02 F6 | 	mov	arg01, fp
35a6c     0C 4E 85 F1 | 	sub	fp, #12
35a70     A7 14 02 FB | 	rdlong	arg02, fp
35a74     04 4E 85 F1 | 	sub	fp, #4
35a78     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
35a7c     0C 4E 05 F1 | 	add	fp, #12
35a80     A7 FA 61 FC | 	wrlong	result1, fp
35a84     00 FA 4D F2 | 	cmps	result1, #0 wz
35a88     0C 4E 85 F1 | 	sub	fp, #12
35a8c     1C 00 90 5D |  if_ne	jmp	#LR__5180
35a90     3B 4E 05 F1 | 	add	fp, #59
35a94     A7 FA C1 FA | 	rdbyte	result1, fp
35a98     3B 4E 85 F1 | 	sub	fp, #59
35a9c     A0 FA CD F7 | 	test	result1, #160 wz
35aa0     0C 4E 05 51 |  if_ne	add	fp, #12
35aa4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
35aa8     0C 4E 85 51 |  if_ne	sub	fp, #12
35aac                 | LR__5180
35aac     0C 4E 05 F1 | 	add	fp, #12
35ab0     A7 26 0A FB | 	rdlong	local01, fp wz
35ab4     0C 4E 85 F1 | 	sub	fp, #12
35ab8     E0 02 90 5D |  if_ne	jmp	#LR__5192
35abc     74 4E 05 F1 | 	add	fp, #116
35ac0     A7 12 02 F6 | 	mov	arg01, fp
35ac4     48 4E 85 F1 | 	sub	fp, #72
35ac8     A7 14 02 FB | 	rdlong	arg02, fp
35acc     2C 4E 85 F1 | 	sub	fp, #44
35ad0     20 16 06 F6 | 	mov	arg03, #32
35ad4     EC 24 BF FD | 	call	#__system____builtin_memmove
35ad8     40 4E 05 F1 | 	add	fp, #64
35adc     A7 12 02 F6 | 	mov	arg01, fp
35ae0     30 4E 85 F1 | 	sub	fp, #48
35ae4     A7 14 02 F6 | 	mov	arg02, fp
35ae8     10 4E 85 F1 | 	sub	fp, #16
35aec     30 16 06 F6 | 	mov	arg03, #48
35af0     D0 24 BF FD | 	call	#__system____builtin_memmove
35af4     40 4E 05 F1 | 	add	fp, #64
35af8     A7 12 02 F6 | 	mov	arg01, fp
35afc     38 4E 85 F1 | 	sub	fp, #56
35b00     A7 14 02 FB | 	rdlong	arg02, fp
35b04     08 4E 85 F1 | 	sub	fp, #8
35b08     34 CA BF FD | 	call	#_fatfs_cc_follow_path
35b0c     0C 4E 05 F1 | 	add	fp, #12
35b10     A7 FA 61 FC | 	wrlong	result1, fp
35b14     0C 4E 85 F1 | 	sub	fp, #12
35b18     00 FA 0D F2 | 	cmp	result1, #0 wz
35b1c     4C 00 90 5D |  if_ne	jmp	#LR__5183
35b20     48 4E 05 F1 | 	add	fp, #72
35b24     A7 FA 01 FB | 	rdlong	result1, fp
35b28     30 4E 85 F1 | 	sub	fp, #48
35b2c     A7 16 02 FB | 	rdlong	arg03, fp
35b30     18 4E 85 F1 | 	sub	fp, #24
35b34     0B FB 09 F2 | 	cmp	result1, arg03 wz
35b38     20 00 90 5D |  if_ne	jmp	#LR__5181
35b3c     50 4E 05 F1 | 	add	fp, #80
35b40     A7 FA 01 FB | 	rdlong	result1, fp
35b44     30 4E 85 F1 | 	sub	fp, #48
35b48     A7 16 02 FB | 	rdlong	arg03, fp
35b4c     20 4E 85 F1 | 	sub	fp, #32
35b50     0B FB 09 F2 | 	cmp	result1, arg03 wz
35b54     04 26 06 A6 |  if_e	mov	local01, #4
35b58     04 00 90 AD |  if_e	jmp	#LR__5182
35b5c                 | LR__5181
35b5c     08 26 06 F6 | 	mov	local01, #8
35b60                 | LR__5182
35b60     0C 4E 05 F1 | 	add	fp, #12
35b64     A7 26 62 FC | 	wrlong	local01, fp
35b68     0C 4E 85 F1 | 	sub	fp, #12
35b6c                 | LR__5183
35b6c     0C 4E 05 F1 | 	add	fp, #12
35b70     A7 26 02 FB | 	rdlong	local01, fp
35b74     0C 4E 85 F1 | 	sub	fp, #12
35b78     04 26 0E F2 | 	cmp	local01, #4 wz
35b7c     CC 01 90 5D |  if_ne	jmp	#LR__5189
35b80     40 4E 05 F1 | 	add	fp, #64
35b84     A7 12 02 F6 | 	mov	arg01, fp
35b88     40 4E 85 F1 | 	sub	fp, #64
35b8c     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
35b90     0C 4E 05 F1 | 	add	fp, #12
35b94     A7 FA 61 FC | 	wrlong	result1, fp
35b98     0C 4E 85 F1 | 	sub	fp, #12
35b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
35ba0     A8 01 90 5D |  if_ne	jmp	#LR__5188
35ba4     5C 4E 05 F1 | 	add	fp, #92
35ba8     A7 12 02 FB | 	rdlong	arg01, fp
35bac     38 4E 05 F1 | 	add	fp, #56
35bb0     A7 12 62 FC | 	wrlong	arg01, fp
35bb4     0D 12 06 F1 | 	add	arg01, #13
35bb8     20 4E 85 F1 | 	sub	fp, #32
35bbc     A7 14 02 F6 | 	mov	arg02, fp
35bc0     74 4E 85 F1 | 	sub	fp, #116
35bc4     0D 14 06 F1 | 	add	arg02, #13
35bc8     13 16 06 F6 | 	mov	arg03, #19
35bcc     F4 23 BF FD | 	call	#__system____builtin_memmove
35bd0     94 4E 05 F1 | 	add	fp, #148
35bd4     A7 26 02 FB | 	rdlong	local01, fp
35bd8     15 4E 85 F1 | 	sub	fp, #21
35bdc     A7 FA C1 FA | 	rdbyte	result1, fp
35be0     0B 26 06 F1 | 	add	local01, #11
35be4     13 FB 41 FC | 	wrbyte	result1, local01
35be8     15 4E 05 F1 | 	add	fp, #21
35bec     A7 26 02 FB | 	rdlong	local01, fp
35bf0     94 4E 85 F1 | 	sub	fp, #148
35bf4     0B 26 06 F1 | 	add	local01, #11
35bf8     13 27 C2 FA | 	rdbyte	local01, local01
35bfc     10 26 CE F7 | 	test	local01, #16 wz
35c00     24 00 90 5D |  if_ne	jmp	#LR__5184
35c04     94 4E 05 F1 | 	add	fp, #148
35c08     A7 FA 01 FB | 	rdlong	result1, fp
35c0c     FD 26 02 F6 | 	mov	local01, result1
35c10     94 4E 85 F1 | 	sub	fp, #148
35c14     0B FA 05 F1 | 	add	result1, #11
35c18     FD FA C1 FA | 	rdbyte	result1, result1
35c1c     20 FA 45 F5 | 	or	result1, #32
35c20     0B 26 06 F1 | 	add	local01, #11
35c24     13 FB 41 FC | 	wrbyte	result1, local01
35c28                 | LR__5184
35c28     70 4E 05 F1 | 	add	fp, #112
35c2c     A7 26 02 FB | 	rdlong	local01, fp
35c30     03 26 06 F1 | 	add	local01, #3
35c34     13 03 48 FC | 	wrbyte	#1, local01
35c38     24 4E 05 F1 | 	add	fp, #36
35c3c     A7 26 02 FB | 	rdlong	local01, fp
35c40     94 4E 85 F1 | 	sub	fp, #148
35c44     0B 26 06 F1 | 	add	local01, #11
35c48     13 27 C2 FA | 	rdbyte	local01, local01
35c4c     10 26 CE F7 | 	test	local01, #16 wz
35c50     F8 00 90 AD |  if_e	jmp	#LR__5187
35c54     18 4E 05 F1 | 	add	fp, #24
35c58     A7 16 02 FB | 	rdlong	arg03, fp
35c5c     30 4E 05 F1 | 	add	fp, #48
35c60     A7 26 02 FB | 	rdlong	local01, fp
35c64     48 4E 85 F1 | 	sub	fp, #72
35c68     13 17 0A F2 | 	cmp	arg03, local01 wz
35c6c     DC 00 90 AD |  if_e	jmp	#LR__5187
35c70     70 4E 05 F1 | 	add	fp, #112
35c74     A7 12 02 FB | 	rdlong	arg01, fp
35c78     09 27 02 F6 | 	mov	local01, arg01
35c7c     24 4E 05 F1 | 	add	fp, #36
35c80     A7 14 02 FB | 	rdlong	arg02, fp
35c84     94 4E 85 F1 | 	sub	fp, #148
35c88     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
35c8c     FD 14 02 F6 | 	mov	arg02, result1
35c90     13 13 02 F6 | 	mov	arg01, local01
35c94     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
35c98     98 4E 05 F1 | 	add	fp, #152
35c9c     A7 FA 61 FC | 	wrlong	result1, fp
35ca0     00 FA 4D F2 | 	cmps	result1, #0 wz
35ca4     98 4E 85 F1 | 	sub	fp, #152
35ca8     0C 4E 05 A1 |  if_e	add	fp, #12
35cac     A7 04 68 AC |  if_e	wrlong	#2, fp
35cb0     0C 4E 85 A1 |  if_e	sub	fp, #12
35cb4     94 00 90 AD |  if_e	jmp	#LR__5186
35cb8     70 4E 05 F1 | 	add	fp, #112
35cbc     A7 12 02 FB | 	rdlong	arg01, fp
35cc0     28 4E 05 F1 | 	add	fp, #40
35cc4     A7 14 02 FB | 	rdlong	arg02, fp
35cc8     98 4E 85 F1 | 	sub	fp, #152
35ccc     4C A0 BF FD | 	call	#_fatfs_cc_move_window
35cd0     0C 4E 05 F1 | 	add	fp, #12
35cd4     A7 FA 61 FC | 	wrlong	result1, fp
35cd8     64 4E 05 F1 | 	add	fp, #100
35cdc     A7 26 02 FB | 	rdlong	local01, fp
35ce0     54 26 06 F1 | 	add	local01, #84
35ce4     24 4E 05 F1 | 	add	fp, #36
35ce8     A7 26 62 FC | 	wrlong	local01, fp
35cec     88 4E 85 F1 | 	sub	fp, #136
35cf0     A7 26 0A FB | 	rdlong	local01, fp wz
35cf4     0C 4E 85 F1 | 	sub	fp, #12
35cf8     50 00 90 5D |  if_ne	jmp	#LR__5185
35cfc     94 4E 05 F1 | 	add	fp, #148
35d00     A7 26 02 FB | 	rdlong	local01, fp
35d04     94 4E 85 F1 | 	sub	fp, #148
35d08     01 26 06 F1 | 	add	local01, #1
35d0c     13 27 C2 FA | 	rdbyte	local01, local01
35d10     2E 26 0E F2 | 	cmp	local01, #46 wz
35d14     34 00 90 5D |  if_ne	jmp	#LR__5185
35d18     70 4E 05 F1 | 	add	fp, #112
35d1c     A7 12 02 FB | 	rdlong	arg01, fp
35d20     24 4E 05 F1 | 	add	fp, #36
35d24     A7 14 02 FB | 	rdlong	arg02, fp
35d28     4C 4E 85 F1 | 	sub	fp, #76
35d2c     A7 16 02 FB | 	rdlong	arg03, fp
35d30     48 4E 85 F1 | 	sub	fp, #72
35d34     50 AD BF FD | 	call	#_fatfs_cc_st_clust
35d38     70 4E 05 F1 | 	add	fp, #112
35d3c     A7 26 02 FB | 	rdlong	local01, fp
35d40     70 4E 85 F1 | 	sub	fp, #112
35d44     03 26 06 F1 | 	add	local01, #3
35d48     13 03 48 FC | 	wrbyte	#1, local01
35d4c                 | LR__5185
35d4c                 | LR__5186
35d4c                 | LR__5187
35d4c                 | LR__5188
35d4c                 | LR__5189
35d4c     0C 4E 05 F1 | 	add	fp, #12
35d50     A7 26 0A FB | 	rdlong	local01, fp wz
35d54     0C 4E 85 F1 | 	sub	fp, #12
35d58     40 00 90 5D |  if_ne	jmp	#LR__5191
35d5c     10 4E 05 F1 | 	add	fp, #16
35d60     A7 12 02 F6 | 	mov	arg01, fp
35d64     10 4E 85 F1 | 	sub	fp, #16
35d68     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
35d6c     0C 4E 05 F1 | 	add	fp, #12
35d70     A7 FA 61 FC | 	wrlong	result1, fp
35d74     0C 4E 85 F1 | 	sub	fp, #12
35d78     00 FA 0D F2 | 	cmp	result1, #0 wz
35d7c     1C 00 90 5D |  if_ne	jmp	#LR__5190
35d80     70 4E 05 F1 | 	add	fp, #112
35d84     A7 12 02 FB | 	rdlong	arg01, fp
35d88     70 4E 85 F1 | 	sub	fp, #112
35d8c     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
35d90     0C 4E 05 F1 | 	add	fp, #12
35d94     A7 FA 61 FC | 	wrlong	result1, fp
35d98     0C 4E 85 F1 | 	sub	fp, #12
35d9c                 | LR__5190
35d9c                 | LR__5191
35d9c                 | LR__5192
35d9c                 | LR__5193
35d9c                 | ' 					res = sync_fs(fs);
35d9c                 | ' 				}
35d9c                 | ' 			}
35d9c                 | ' 
35d9c                 | ' 		}
35d9c                 | ' 		;
35d9c                 | ' 	}
35d9c                 | ' 
35d9c                 | ' 	return res ;
35d9c     0C 4E 05 F1 | 	add	fp, #12
35da0     A7 FA 01 FB | 	rdlong	result1, fp
35da4     0C 4E 85 F1 | 	sub	fp, #12
35da8     A7 F0 03 F6 | 	mov	ptra, fp
35dac     B2 00 A0 FD | 	call	#popregs_
35db0                 | _fatfs_cc_f_rename_ret
35db0     2D 00 64 FD | 	ret
35db4                 | 
35db4                 | _fatfs_cc_time
35db4     00 4A 05 F6 | 	mov	COUNT_, #0
35db8     A8 00 A0 FD | 	call	#pushregs_
35dbc     14 F0 07 F1 | 	add	ptra, #20
35dc0     04 4E 05 F1 | 	add	fp, #4
35dc4     A7 12 62 FC | 	wrlong	arg01, fp
35dc8     04 4E 05 F1 | 	add	fp, #4
35dcc     A7 12 02 F6 | 	mov	arg01, fp
35dd0     08 4E 85 F1 | 	sub	fp, #8
35dd4     00 14 06 F6 | 	mov	arg02, #0
35dd8     0C 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
35ddc     08 4E 05 F1 | 	add	fp, #8
35de0     A7 FA 01 FB | 	rdlong	result1, fp
35de4     08 4E 05 F1 | 	add	fp, #8
35de8     A7 FA 61 FC | 	wrlong	result1, fp
35dec     0C 4E 85 F1 | 	sub	fp, #12
35df0     A7 FA 09 FB | 	rdlong	result1, fp wz
35df4     04 4E 85 F1 | 	sub	fp, #4
35df8     18 00 90 AD |  if_e	jmp	#LR__5200
35dfc     04 4E 05 F1 | 	add	fp, #4
35e00     A7 FA 01 FB | 	rdlong	result1, fp
35e04     0C 4E 05 F1 | 	add	fp, #12
35e08     A7 14 02 FB | 	rdlong	arg02, fp
35e0c     10 4E 85 F1 | 	sub	fp, #16
35e10     FD 14 62 FC | 	wrlong	arg02, result1
35e14                 | LR__5200
35e14                 | '         *tp = now;
35e14                 | '     return now;
35e14     10 4E 05 F1 | 	add	fp, #16
35e18     A7 FA 01 FB | 	rdlong	result1, fp
35e1c     10 4E 85 F1 | 	sub	fp, #16
35e20     A7 F0 03 F6 | 	mov	ptra, fp
35e24     B2 00 A0 FD | 	call	#popregs_
35e28                 | _fatfs_cc_time_ret
35e28     2D 00 64 FD | 	ret
35e2c                 | 
35e2c                 | _fatfs_cc_mktime
35e2c     06 4A 05 F6 | 	mov	COUNT_, #6
35e30     A8 00 A0 FD | 	call	#pushregs_
35e34     09 27 02 F6 | 	mov	local01, arg01
35e38     14 26 06 F1 | 	add	local01, #20
35e3c     13 13 02 FB | 	rdlong	arg01, local01
35e40     14 26 86 F1 | 	sub	local01, #20
35e44     46 12 56 F2 | 	cmps	arg01, #70 wc
35e48                 | '                 return (time_t) -1;
35e48     01 FA 65 C6 |  if_b	neg	result1, #1
35e4c     7C 01 90 CD |  if_b	jmp	#LR__5214
35e50     03 00 00 FF 
35e54     6C 29 06 F6 | 	mov	local02, ##1900
35e58     14 26 06 F1 | 	add	local01, #20
35e5c     13 FB 01 FB | 	rdlong	result1, local01
35e60     FD 28 02 F1 | 	add	local02, result1
35e64     08 26 86 F1 | 	sub	local01, #8
35e68     13 2B 02 FB | 	rdlong	local03, local01
35e6c     01 2A 86 F1 | 	sub	local03, #1
35e70     04 26 06 F1 | 	add	local01, #4
35e74     13 13 02 FB | 	rdlong	arg01, local01
35e78     10 26 86 F1 | 	sub	local01, #16
35e7c     02 12 66 F0 | 	shl	arg01, #2
35e80     02 00 00 FF 
35e84     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
35e88     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35e8c     09 FB 01 FB | 	rdlong	result1, arg01
35e90     FD 2A 02 F1 | 	add	local03, result1
35e94     14 13 02 F6 | 	mov	arg01, local02
35e98     02 00 00 FF 
35e9c     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
35ea0     EC 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
35ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
35ea8     1C 00 90 AD |  if_e	jmp	#LR__5210
35eac     00 2C 06 F6 | 	mov	local04, #0
35eb0     10 26 06 F1 | 	add	local01, #16
35eb4     13 FB 01 FB | 	rdlong	result1, local01
35eb8     10 26 86 F1 | 	sub	local01, #16
35ebc     02 FA 55 F2 | 	cmps	result1, #2 wc
35ec0     01 2C 06 36 |  if_ae	mov	local04, #1
35ec4     04 00 90 FD | 	jmp	#LR__5211
35ec8                 | LR__5210
35ec8     00 2C 06 F6 | 	mov	local04, #0
35ecc                 | LR__5211
35ecc     04 26 06 F1 | 	add	local01, #4
35ed0     13 FB 01 FB | 	rdlong	result1, local01
35ed4     04 26 86 F1 | 	sub	local01, #4
35ed8     13 2F 02 FB | 	rdlong	local05, local01
35edc     08 26 06 F1 | 	add	local01, #8
35ee0     13 13 02 FB | 	rdlong	arg01, local01
35ee4     07 00 00 FF 
35ee8     10 12 06 FD | 	qmul	arg01, ##3600
35eec     16 2B 02 F1 | 	add	local03, local04
35ef0     FD 2C 02 F6 | 	mov	local04, result1
35ef4     04 2C 66 F0 | 	shl	local04, #4
35ef8     FD 2C 82 F1 | 	sub	local04, result1
35efc     02 2C 66 F0 | 	shl	local04, #2
35f00     16 2F 02 F1 | 	add	local05, local04
35f04     08 26 86 F1 | 	sub	local01, #8
35f08     18 2C 62 FD | 	getqx	local04
35f0c     A8 00 00 FF 
35f10     80 2B 06 FD | 	qmul	local03, ##86400
35f14     16 2F 02 F1 | 	add	local05, local04
35f18     14 2B 02 F6 | 	mov	local03, local02
35f1c     03 00 00 FF 
35f20     B2 2B 86 F1 | 	sub	local03, ##1970
35f24     18 2C 62 FD | 	getqx	local04
35f28     99 F0 00 FF 
35f2c     80 2B 06 FD | 	qmul	local03, ##31536000
35f30     16 2F 02 F1 | 	add	local05, local04
35f34     14 2B 02 F6 | 	mov	local03, local02
35f38     03 00 00 FF 
35f3c     B1 2B 86 F1 | 	sub	local03, ##1969
35f40     15 31 52 F6 | 	abs	local06, local03 wc
35f44     02 30 46 F0 | 	shr	local06, #2
35f48     18 31 82 F6 | 	negc	local06, local06
35f4c     03 00 00 FF 
35f50     D1 29 56 F2 | 	cmps	local02, ##2001 wc
35f54     18 2C 62 FD | 	getqx	local04
35f58     16 2F 02 F1 | 	add	local05, local04
35f5c     18 00 90 CD |  if_b	jmp	#LR__5212
35f60     03 00 00 FF 
35f64     D0 29 86 F1 | 	sub	local02, ##2000
35f68     14 2D 52 F6 | 	abs	local04, local02 wc
35f6c     64 2C 16 FD | 	qdiv	local04, #100
35f70     18 2C 62 FD | 	getqx	local04
35f74     16 31 A2 F3 | 	sumnc	local06, local04
35f78                 | LR__5212
35f78     A8 00 00 FF 
35f7c     80 31 06 FD | 	qmul	local06, ##86400
35f80     18 30 62 FD | 	getqx	local06
35f84     18 2F 02 F1 | 	add	local05, local06
35f88     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
35f8c     02 00 00 FF 
35f90     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
35f94     F6 30 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
35f98     18 2F 02 F1 | 	add	local05, local06
35f9c     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
35fa0     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
35fa4     02 00 00 FF 
35fa8     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
35fac     01 2A 0E F2 | 	cmp	local03, #1 wz
35fb0     14 00 90 5D |  if_ne	jmp	#LR__5213
35fb4     13 13 02 F6 | 	mov	arg01, local01
35fb8     D8 19 B0 FD | 	call	#_fatfs_cc___indst
35fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
35fc0     07 00 00 5F 
35fc4     10 2E 86 51 |  if_ne	sub	local05, ##3600
35fc8                 | LR__5213
35fc8                 | '                 s -=  (3600L) ;
35fc8                 | ' 
35fc8                 | '         return s;
35fc8     17 FB 01 F6 | 	mov	result1, local05
35fcc                 | LR__5214
35fcc     A7 F0 03 F6 | 	mov	ptra, fp
35fd0     B2 00 A0 FD | 	call	#popregs_
35fd4                 | _fatfs_cc_mktime_ret
35fd4     2D 00 64 FD | 	ret
35fd8                 | 
35fd8                 | _fatfs_cc__gmtime_r
35fd8     03 4A 05 F6 | 	mov	COUNT_, #3
35fdc     A8 00 A0 FD | 	call	#pushregs_
35fe0     09 27 02 FB | 	rdlong	local01, arg01
35fe4     A8 00 00 FF 
35fe8     80 27 16 FD | 	qdiv	local01, ##86400
35fec     18 FA 61 FD | 	getqx	result1
35ff0     04 FA 05 F1 | 	add	result1, #4
35ff4     07 FA 15 FD | 	qdiv	result1, #7
35ff8     18 14 06 F1 | 	add	arg02, #24
35ffc     D1 7F 27 FF 
36000     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
36004     D1 7F 27 3F 
36008     00 26 86 31 |  if_ae	sub	local01, ##1325376000
3600c     03 00 00 3F 
36010     DC 29 06 36 |  if_ae	mov	local02, ##2012
36014     03 00 00 CF 
36018     B2 29 06 C6 |  if_b	mov	local02, ##1970
3601c                 | ' 	  year = 1970;
3601c                 | ' 	}
3601c                 | ' 
3601c                 | ' 	for(;;) {
3601c     19 FA 61 FD | 	getqy	result1
36020     0A FB 61 FC | 	wrlong	result1, arg02
36024     18 14 86 F1 | 	sub	arg02, #24
36028                 | LR__5220
36028     14 13 02 F6 | 	mov	arg01, local02
3602c     60 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
36030     00 FA 0D F2 | 	cmp	result1, #0 wz
36034     42 F1 00 5F 
36038     00 2B 06 56 |  if_ne	mov	local03, ##31622400
3603c     99 F0 00 AF 
36040     80 2B 06 A6 |  if_e	mov	local03, ##31536000
36044     15 27 12 F2 | 	cmp	local01, local03 wc
36048                 | ' 	    break;
36048     01 28 06 31 |  if_ae	add	local02, #1
3604c     15 27 82 31 |  if_ae	sub	local01, local03
36050     D4 FF 9F 3D |  if_ae	jmp	#LR__5220
36054     A8 00 00 FF 
36058     80 27 16 FD | 	qdiv	local01, ##86400
3605c     14 2B 02 F6 | 	mov	local03, local02
36060     03 00 00 FF 
36064     6C 2B 86 F1 | 	sub	local03, ##1900
36068     14 14 06 F1 | 	add	arg02, #20
3606c     0A 2B 62 FC | 	wrlong	local03, arg02
36070     08 14 06 F1 | 	add	arg02, #8
36074     14 13 02 F6 | 	mov	arg01, local02
36078     18 28 62 FD | 	getqx	local02
3607c     0A 29 62 FC | 	wrlong	local02, arg02
36080     1C 14 86 F1 | 	sub	arg02, #28
36084     08 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
36088     00 FA 0D F2 | 	cmp	result1, #0 wz
3608c     1D 2A 06 56 |  if_ne	mov	local03, #29
36090     1C 2A 06 A6 |  if_e	mov	local03, #28
36094     02 00 00 FF 
36098     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
3609c     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
360a0     02 00 00 FF 
360a4     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
360a8                 | ' 
360a8                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
360a8                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
360a8     00 12 06 F6 | 	mov	arg01, #0
360ac     97 2A 48 FB | 	callpa	#(@LR__5222-@LR__5221)>>2,fcache_load_ptr_
360b0                 | LR__5221
360b0     09 2B 02 F6 | 	mov	local03, arg01
360b4     02 2A 66 F0 | 	shl	local03, #2
360b8     02 00 00 FF 
360bc     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
360c0     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
360c4     15 2B 02 FB | 	rdlong	local03, local03
360c8     15 29 52 F2 | 	cmps	local02, local03 wc
360cc     02 00 00 FF 
360d0     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
360d4     2C 00 90 CD |  if_b	jmp	#LR__5223
360d8     09 2B 02 F6 | 	mov	local03, arg01
360dc     02 2A 66 F0 | 	shl	local03, #2
360e0     02 00 00 FF 
360e4     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
360e8     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
360ec     15 2B 02 FB | 	rdlong	local03, local03
360f0     15 29 82 F1 | 	sub	local02, local03
360f4     01 12 06 F1 | 	add	arg01, #1
360f8     02 00 00 FF 
360fc     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
36100     AC FF 9F FD | 	jmp	#LR__5221
36104                 | LR__5222
36104                 | LR__5223
36104     A8 00 00 FF 
36108     80 27 16 FD | 	qdiv	local01, ##86400
3610c     10 14 06 F1 | 	add	arg02, #16
36110     0A 13 62 FC | 	wrlong	arg01, arg02
36114     01 28 06 F1 | 	add	local02, #1
36118     04 14 86 F1 | 	sub	arg02, #4
3611c     0A 29 62 FC | 	wrlong	local02, arg02
36120     19 26 62 FD | 	getqy	local01
36124     07 00 00 FF 
36128     10 26 16 FD | 	qdiv	local01, ##3600
3612c     18 2A 62 FD | 	getqx	local03
36130     07 00 00 FF 
36134     10 26 16 FD | 	qdiv	local01, ##3600
36138     04 14 86 F1 | 	sub	arg02, #4
3613c     0A 2B 62 FC | 	wrlong	local03, arg02
36140     19 26 62 FD | 	getqy	local01
36144     3C 26 16 FD | 	qdiv	local01, #60
36148     18 2A 62 FD | 	getqx	local03
3614c     3C 26 16 FD | 	qdiv	local01, #60
36150     04 14 86 F1 | 	sub	arg02, #4
36154     0A 2B 62 FC | 	wrlong	local03, arg02
36158     04 14 86 F1 | 	sub	arg02, #4
3615c                 | '         stm->tm_isdst = 0;
3615c                 | ' 
3615c                 | ' ;
3615c                 | '         return stm;
3615c     0A FB 01 F6 | 	mov	result1, arg02
36160     19 2A 62 FD | 	getqy	local03
36164     0A 2B 62 FC | 	wrlong	local03, arg02
36168     20 14 06 F1 | 	add	arg02, #32
3616c     0A 01 68 FC | 	wrlong	#0, arg02
36170     A7 F0 03 F6 | 	mov	ptra, fp
36174     B2 00 A0 FD | 	call	#popregs_
36178                 | _fatfs_cc__gmtime_r_ret
36178     2D 00 64 FD | 	ret
3617c                 | 
3617c                 | _fatfs_cc__tzset
3617c     BE 01 00 FF 
36180     BD 12 06 F6 | 	mov	arg01, ##@LR__5535
36184     34 00 B0 FD | 	call	#_fatfs_cc_getenv
36188     FD 12 02 F6 | 	mov	arg01, result1
3618c     02 00 00 FF 
36190     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
36194     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
36198     02 00 00 FF 
3619c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
361a0     3C 15 B0 FD | 	call	#_fatfs_cc___tzoffset
361a4     02 00 00 FF 
361a8     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
361ac     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
361b0     02 00 00 FF 
361b4     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
361b8                 | _fatfs_cc__tzset_ret
361b8     2D 00 64 FD | 	ret
361bc                 | 
361bc                 | _fatfs_cc_getenv
361bc     06 4A 05 F6 | 	mov	COUNT_, #6
361c0     A8 00 A0 FD | 	call	#pushregs_
361c4     09 27 02 F6 | 	mov	local01, arg01
361c8     09 29 02 F6 | 	mov	local02, arg01
361cc     97 06 48 FB | 	callpa	#(@LR__5231-@LR__5230)>>2,fcache_load_ptr_
361d0                 | LR__5230
361d0     14 FB C9 FA | 	rdbyte	result1, local02 wz
361d4     01 28 06 51 |  if_ne	add	local02, #1
361d8     F4 FF 9F 5D |  if_ne	jmp	#LR__5230
361dc                 | LR__5231
361dc     09 29 82 F1 | 	sub	local02, arg01
361e0     14 FB 01 F6 | 	mov	result1, local02
361e4     02 00 00 FF 
361e8     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
361ec     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
361f0     02 00 00 FF 
361f4     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
361f8                 | '             return 0;
361f8     00 FA 05 A6 |  if_e	mov	result1, #0
361fc     5C 00 90 AD |  if_e	jmp	#LR__5234
36200                 | ' 
36200                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
36200     02 00 00 FF 
36204     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
36208     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
3620c     02 00 00 FF 
36210     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
36214                 | LR__5232
36214     15 2D 0A FB | 	rdlong	local04, local03 wz
36218     3C 00 90 AD |  if_e	jmp	#LR__5233
3621c     16 13 02 F6 | 	mov	arg01, local04
36220     13 15 02 F6 | 	mov	arg02, local01
36224     14 17 02 F6 | 	mov	arg03, local02
36228     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
3622c     00 FA 0D F2 | 	cmp	result1, #0 wz
36230     14 2F 02 A6 |  if_e	mov	local05, local02
36234     16 2F 02 A1 |  if_e	add	local05, local04
36238     17 31 C2 AA |  if_e	rdbyte	local06, local05
3623c     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
36240                 | ' 			return name+len+1;
36240     14 2D 02 A1 |  if_e	add	local04, local02
36244     01 2C 06 A1 |  if_e	add	local04, #1
36248     16 FB 01 A6 |  if_e	mov	result1, local04
3624c     0C 00 90 AD |  if_e	jmp	#LR__5234
36250     04 2A 06 F1 | 	add	local03, #4
36254     BC FF 9F FD | 	jmp	#LR__5232
36258                 | LR__5233
36258                 | ' 	}
36258                 | ' 	return 0;
36258     00 FA 05 F6 | 	mov	result1, #0
3625c                 | LR__5234
3625c     A7 F0 03 F6 | 	mov	ptra, fp
36260     B2 00 A0 FD | 	call	#popregs_
36264                 | _fatfs_cc_getenv_ret
36264     2D 00 64 FD | 	ret
36268                 | 
36268                 | _fatfs_cc__get_fattime
36268     00 4A 05 F6 | 	mov	COUNT_, #0
3626c     A8 00 A0 FD | 	call	#pushregs_
36270     34 F0 07 F1 | 	add	ptra, #52
36274     00 12 06 F6 | 	mov	arg01, #0
36278     38 FB BF FD | 	call	#_fatfs_cc_time
3627c     04 4E 05 F1 | 	add	fp, #4
36280     A7 FA 61 FC | 	wrlong	result1, fp
36284     A7 12 02 F6 | 	mov	arg01, fp
36288     0C 4E 05 F1 | 	add	fp, #12
3628c     A7 14 02 F6 | 	mov	arg02, fp
36290     10 4E 85 F1 | 	sub	fp, #16
36294     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
36298     24 4E 05 F1 | 	add	fp, #36
3629c     A7 14 02 FB | 	rdlong	arg02, fp
362a0     50 14 86 F1 | 	sub	arg02, #80
362a4     09 14 66 F0 | 	shl	arg02, #9
362a8     04 4E 85 F1 | 	sub	fp, #4
362ac     A7 FA 01 FB | 	rdlong	result1, fp
362b0     01 FA 05 F1 | 	add	result1, #1
362b4     05 FA 65 F0 | 	shl	result1, #5
362b8     FD 14 42 F5 | 	or	arg02, result1
362bc     04 4E 85 F1 | 	sub	fp, #4
362c0     A7 FA 01 FB | 	rdlong	result1, fp
362c4     FD 14 42 F5 | 	or	arg02, result1
362c8     14 4E 85 F1 | 	sub	fp, #20
362cc     A7 14 62 FC | 	wrlong	arg02, fp
362d0     10 4E 05 F1 | 	add	fp, #16
362d4     A7 14 02 FB | 	rdlong	arg02, fp
362d8     0B 14 66 F0 | 	shl	arg02, #11
362dc     04 4E 85 F1 | 	sub	fp, #4
362e0     A7 FA 01 FB | 	rdlong	result1, fp
362e4     05 FA 65 F0 | 	shl	result1, #5
362e8     FD 14 42 F5 | 	or	arg02, result1
362ec     04 4E 85 F1 | 	sub	fp, #4
362f0     A7 FA 01 FB | 	rdlong	result1, fp
362f4     FD 14 42 F5 | 	or	arg02, result1
362f8     04 4E 85 F1 | 	sub	fp, #4
362fc     A7 14 62 FC | 	wrlong	arg02, fp
36300                 | ' 
36300                 | '     now = time(0);
36300                 | '     _gmtime_r (&now, &date);
36300                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
36300                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
36300                 | '     return (ffdate << 16) | fftime;
36300     04 4E 85 F1 | 	sub	fp, #4
36304     A7 FA 01 FB | 	rdlong	result1, fp
36308     10 FA 65 F0 | 	shl	result1, #16
3630c     08 4E 85 F1 | 	sub	fp, #8
36310     0A FB 41 F5 | 	or	result1, arg02
36314     A7 F0 03 F6 | 	mov	ptra, fp
36318     B2 00 A0 FD | 	call	#popregs_
3631c                 | _fatfs_cc__get_fattime_ret
3631c     2D 00 64 FD | 	ret
36320                 | 
36320                 | _fatfs_cc_unixtime_1050
36320     00 4A 05 F6 | 	mov	COUNT_, #0
36324     A8 00 A0 FD | 	call	#pushregs_
36328     34 F0 07 F1 | 	add	ptra, #52
3632c     04 4E 05 F1 | 	add	fp, #4
36330     A7 12 62 FC | 	wrlong	arg01, fp
36334     04 4E 05 F1 | 	add	fp, #4
36338     A7 14 62 FC | 	wrlong	arg02, fp
3633c     04 4E 85 F1 | 	sub	fp, #4
36340     A7 14 02 FB | 	rdlong	arg02, fp
36344     09 14 46 F0 | 	shr	arg02, #9
36348     7F 14 06 F5 | 	and	arg02, #127
3634c     50 FA 05 F6 | 	mov	result1, #80
36350     0A FB 01 F1 | 	add	result1, arg02
36354     20 4E 05 F1 | 	add	fp, #32
36358     A7 FA 61 FC | 	wrlong	result1, fp
3635c     20 4E 85 F1 | 	sub	fp, #32
36360     A7 FA 01 FB | 	rdlong	result1, fp
36364     05 FA 45 F0 | 	shr	result1, #5
36368     FD FA 41 F8 | 	getnib	result1, result1, #0
3636c     01 FA 85 F1 | 	sub	result1, #1
36370     1C 4E 05 F1 | 	add	fp, #28
36374     A7 FA 61 FC | 	wrlong	result1, fp
36378     1C 4E 85 F1 | 	sub	fp, #28
3637c     A7 FA 01 FB | 	rdlong	result1, fp
36380     1F FA 05 F5 | 	and	result1, #31
36384     18 4E 05 F1 | 	add	fp, #24
36388     A7 FA 61 FC | 	wrlong	result1, fp
3638c     14 4E 85 F1 | 	sub	fp, #20
36390     A7 FA 01 FB | 	rdlong	result1, fp
36394     0B FA 45 F0 | 	shr	result1, #11
36398     1F FA 05 F5 | 	and	result1, #31
3639c     10 4E 05 F1 | 	add	fp, #16
363a0     A7 FA 61 FC | 	wrlong	result1, fp
363a4     10 4E 85 F1 | 	sub	fp, #16
363a8     A7 FA 01 FB | 	rdlong	result1, fp
363ac     05 FA 45 F0 | 	shr	result1, #5
363b0     3F FA 05 F5 | 	and	result1, #63
363b4     0C 4E 05 F1 | 	add	fp, #12
363b8     A7 FA 61 FC | 	wrlong	result1, fp
363bc     0C 4E 85 F1 | 	sub	fp, #12
363c0     A7 14 02 FB | 	rdlong	arg02, fp
363c4     1F 14 06 F5 | 	and	arg02, #31
363c8     01 14 66 F0 | 	shl	arg02, #1
363cc     08 4E 05 F1 | 	add	fp, #8
363d0     A7 14 62 FC | 	wrlong	arg02, fp
363d4     A7 12 02 F6 | 	mov	arg01, fp
363d8     10 4E 85 F1 | 	sub	fp, #16
363dc     4C FA BF FD | 	call	#_fatfs_cc_mktime
363e0     0C 4E 05 F1 | 	add	fp, #12
363e4     A7 FA 61 FC | 	wrlong	result1, fp
363e8                 | ' 
363e8                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
363e8                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
363e8                 | '     date.tm_mday = (dosdate & 0x1f);
363e8                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
363e8                 | '     date.tm_min = (dostime >> 5) & 0x3f;
363e8                 | '     date.tm_sec = (dostime & 0x1f) << 1;
363e8                 | ' 
363e8                 | '     t = mktime(&date);
363e8                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
363e8                 | '     return t;
363e8     0C 4E 85 F1 | 	sub	fp, #12
363ec     A7 F0 03 F6 | 	mov	ptra, fp
363f0     B2 00 A0 FD | 	call	#popregs_
363f4                 | _fatfs_cc_unixtime_1050_ret
363f4     2D 00 64 FD | 	ret
363f8                 | 
363f8                 | _fatfs_cc__set_dos_error_1052
363f8     09 01 02 F6 | 	mov	_var01, arg01
363fc                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
363fc                 | '     switch (derr) {
363fc     14 00 26 F3 | 	fle	_var01, #20
36400     30 00 62 FD | 	jmprel	_var01
36404                 | LR__5240
36404     50 00 90 FD | 	jmp	#LR__5241
36408     84 00 90 FD | 	jmp	#LR__5255
3640c     80 00 90 FD | 	jmp	#LR__5256
36410     7C 00 90 FD | 	jmp	#LR__5257
36414     48 00 90 FD | 	jmp	#LR__5242
36418     44 00 90 FD | 	jmp	#LR__5243
3641c     40 00 90 FD | 	jmp	#LR__5244
36420     44 00 90 FD | 	jmp	#LR__5245
36424     48 00 90 FD | 	jmp	#LR__5247
36428     54 00 90 FD | 	jmp	#LR__5250
3642c     38 00 90 FD | 	jmp	#LR__5246
36430     4C 00 90 FD | 	jmp	#LR__5251
36434     48 00 90 FD | 	jmp	#LR__5252
36438     44 00 90 FD | 	jmp	#LR__5253
3643c     50 00 90 FD | 	jmp	#LR__5258
36440     4C 00 90 FD | 	jmp	#LR__5258
36444     48 00 90 FD | 	jmp	#LR__5258
36448     2C 00 90 FD | 	jmp	#LR__5248
3644c     38 00 90 FD | 	jmp	#LR__5254
36450     2C 00 90 FD | 	jmp	#LR__5249
36454     38 00 90 FD | 	jmp	#LR__5258
36458                 | LR__5241
36458     00 02 06 F6 | 	mov	_var02, #0
3645c                 | '         r = 0;
3645c                 | '         break;
3645c     34 00 90 FD | 	jmp	#LR__5259
36460                 | LR__5242
36460                 | LR__5243
36460                 | LR__5244
36460     04 02 06 F6 | 	mov	_var02, #4
36464                 | '         r =  4 ;
36464                 | '         break;
36464     2C 00 90 FD | 	jmp	#LR__5259
36468                 | LR__5245
36468                 | LR__5246
36468     06 02 06 F6 | 	mov	_var02, #6
3646c                 | '         r =  6 ;
3646c                 | '         break;
3646c     24 00 90 FD | 	jmp	#LR__5259
36470                 | LR__5247
36470     09 02 06 F6 | 	mov	_var02, #9
36474                 | '         r =  9 ;
36474                 | '         break;
36474     1C 00 90 FD | 	jmp	#LR__5259
36478                 | LR__5248
36478     07 02 06 F6 | 	mov	_var02, #7
3647c                 | '         r =  7 ;
3647c                 | '         break;
3647c     14 00 90 FD | 	jmp	#LR__5259
36480                 | LR__5249
36480                 | LR__5250
36480                 | LR__5251
36480                 | LR__5252
36480                 | LR__5253
36480     0A 02 06 F6 | 	mov	_var02, #10
36484                 | '         r =  10 ;
36484                 | '         break;
36484     0C 00 90 FD | 	jmp	#LR__5259
36488                 | LR__5254
36488     0B 02 06 F6 | 	mov	_var02, #11
3648c                 | '         r =  11 ;
3648c                 | '         break;
3648c     04 00 90 FD | 	jmp	#LR__5259
36490                 | LR__5255
36490                 | LR__5256
36490                 | LR__5257
36490                 | LR__5258
36490     0C 02 06 F6 | 	mov	_var02, #12
36494                 | '         r =  12 ;
36494                 | '         break;
36494                 | LR__5259
36494                 | '     }
36494                 | '     return _seterror(r);
36494     00 02 4E F2 | 	cmps	_var02, #0 wz
36498     20 E6 05 F1 | 	add	ptr___system__dat__, #32
3649c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
364a0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
364a4     01 FA 65 56 |  if_ne	neg	result1, #1
364a8     00 FA 05 A6 |  if_e	mov	result1, #0
364ac                 | _fatfs_cc__set_dos_error_1052_ret
364ac     2D 00 64 FD | 	ret
364b0                 | 
364b0                 | _fatfs_cc_v_creat
364b0     04 4A 05 F6 | 	mov	COUNT_, #4
364b4     A8 00 A0 FD | 	call	#pushregs_
364b8     09 27 02 F6 | 	mov	local01, arg01
364bc     0A 29 02 F6 | 	mov	local02, arg02
364c0     03 00 00 FF 
364c4     3C 12 06 F6 | 	mov	arg01, ##1596
364c8                 | '     return _gc_alloc(size);
364c8     10 14 06 F6 | 	mov	arg02, #16
364cc     1C 5E BF FD | 	call	#__system___gc_doalloc
364d0     FD 2A 0A F6 | 	mov	local03, result1 wz
364d4                 | '       return _seterror( 7 );
364d4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
364d8     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
364dc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
364e0     01 FA 65 A6 |  if_e	neg	result1, #1
364e4     58 00 90 AD |  if_e	jmp	#LR__5261
364e8     15 13 02 F6 | 	mov	arg01, local03
364ec     00 14 06 F6 | 	mov	arg02, #0
364f0     03 00 00 FF 
364f4     3C 16 06 F6 | 	mov	arg03, ##1596
364f8     98 00 A0 FD | 	call	#\builtin_bytefill_
364fc     02 00 00 FF 
36500     14 2A 06 F1 | 	add	local03, ##1044
36504     15 13 02 F6 | 	mov	arg01, local03
36508     02 00 00 FF 
3650c     14 2A 86 F1 | 	sub	local03, ##1044
36510     14 15 02 F6 | 	mov	arg02, local02
36514     07 16 06 F6 | 	mov	arg03, #7
36518     B4 CC BF FD | 	call	#_fatfs_cc_f_open
3651c     FD 2C 0A F6 | 	mov	local04, result1 wz
36520     14 00 90 AD |  if_e	jmp	#LR__5260
36524     15 13 02 F6 | 	mov	arg01, local03
36528                 | '     return _gc_free(ptr);
36528     CC 5E BF FD | 	call	#__system___gc_free
3652c                 | '     free(f);
3652c                 | '     return _set_dos_error(r);
3652c     16 13 02 F6 | 	mov	arg01, local04
36530     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1052
36534     08 00 90 FD | 	jmp	#LR__5261
36538                 | LR__5260
36538     13 2B 62 FC | 	wrlong	local03, local01
3653c                 | '   }
3653c                 | '   fil->vfsdata = f;
3653c                 | '   return 0;
3653c     00 FA 05 F6 | 	mov	result1, #0
36540                 | LR__5261
36540     A7 F0 03 F6 | 	mov	ptra, fp
36544     B2 00 A0 FD | 	call	#popregs_
36548                 | _fatfs_cc_v_creat_ret
36548     2D 00 64 FD | 	ret
3654c                 | 
3654c                 | _fatfs_cc_v_close
3654c     02 4A 05 F6 | 	mov	COUNT_, #2
36550     A8 00 A0 FD | 	call	#pushregs_
36554     09 27 02 FB | 	rdlong	local01, arg01
36558     02 00 00 FF 
3655c     14 26 06 F1 | 	add	local01, ##1044
36560     13 13 02 F6 | 	mov	arg01, local01
36564     02 00 00 FF 
36568     14 26 86 F1 | 	sub	local01, ##1044
3656c     DC E3 BF FD | 	call	#_fatfs_cc_f_close
36570     FD 28 02 F6 | 	mov	local02, result1
36574     13 13 02 F6 | 	mov	arg01, local01
36578                 | '     return _gc_free(ptr);
36578     7C 5E BF FD | 	call	#__system___gc_free
3657c                 | '     FAT_FIL *f = fil->vfsdata;
3657c                 | '     r=f_close(&f->fil);
3657c                 | '     free(f);
3657c                 | '     return _set_dos_error(r);
3657c     14 13 02 F6 | 	mov	arg01, local02
36580     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1052
36584     A7 F0 03 F6 | 	mov	ptra, fp
36588     B2 00 A0 FD | 	call	#popregs_
3658c                 | _fatfs_cc_v_close_ret
3658c     2D 00 64 FD | 	ret
36590                 | 
36590                 | _fatfs_cc_v_opendir
36590     04 4A 05 F6 | 	mov	COUNT_, #4
36594     A8 00 A0 FD | 	call	#pushregs_
36598     09 27 02 F6 | 	mov	local01, arg01
3659c     0A 29 02 F6 | 	mov	local02, arg02
365a0     30 12 06 F6 | 	mov	arg01, #48
365a4                 | '     return _gc_alloc(size);
365a4     10 14 06 F6 | 	mov	arg02, #16
365a8     40 5D BF FD | 	call	#__system___gc_doalloc
365ac     FD 2A 0A F6 | 	mov	local03, result1 wz
365b0                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
365b0                 | '       return _seterror( 7 );
365b0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
365b4     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
365b8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
365bc     01 FA 65 A6 |  if_e	neg	result1, #1
365c0     34 00 90 AD |  if_e	jmp	#LR__5271
365c4     14 15 02 F6 | 	mov	arg02, local02
365c8     15 13 02 F6 | 	mov	arg01, local03
365cc     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
365d0     FD 2C 0A F6 | 	mov	local04, result1 wz
365d4     14 00 90 AD |  if_e	jmp	#LR__5270
365d8     15 13 02 F6 | 	mov	arg01, local03
365dc                 | '     return _gc_free(ptr);
365dc     18 5E BF FD | 	call	#__system___gc_free
365e0                 | '         free(f);
365e0                 | '         return _set_dos_error(r);
365e0     16 13 02 F6 | 	mov	arg01, local04
365e4     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1052
365e8     0C 00 90 FD | 	jmp	#LR__5271
365ec                 | LR__5270
365ec     04 26 06 F1 | 	add	local01, #4
365f0     13 2B 62 FC | 	wrlong	local03, local01
365f4                 | '     }
365f4                 | '     dir->vfsdata = f;
365f4                 | '     return 0;
365f4     00 FA 05 F6 | 	mov	result1, #0
365f8                 | LR__5271
365f8     A7 F0 03 F6 | 	mov	ptra, fp
365fc     B2 00 A0 FD | 	call	#popregs_
36600                 | _fatfs_cc_v_opendir_ret
36600     2D 00 64 FD | 	ret
36604                 | 
36604                 | _fatfs_cc_v_closedir
36604     02 4A 05 F6 | 	mov	COUNT_, #2
36608     A8 00 A0 FD | 	call	#pushregs_
3660c     04 12 06 F1 | 	add	arg01, #4
36610     09 27 02 FB | 	rdlong	local01, arg01
36614     13 13 02 F6 | 	mov	arg01, local01
36618     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
3661c     FD 28 02 F6 | 	mov	local02, result1
36620     13 13 02 F6 | 	mov	arg01, local01
36624                 | '     return _gc_free(ptr);
36624     D0 5D BF FD | 	call	#__system___gc_free
36628     00 28 0E F2 | 	cmp	local02, #0 wz
3662c     14 13 02 56 |  if_ne	mov	arg01, local02
36630     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1052
36634                 | '     return r;
36634     14 FB 01 F6 | 	mov	result1, local02
36638     A7 F0 03 F6 | 	mov	ptra, fp
3663c     B2 00 A0 FD | 	call	#popregs_
36640                 | _fatfs_cc_v_closedir_ret
36640     2D 00 64 FD | 	ret
36644                 | 
36644                 | _fatfs_cc_v_readdir
36644     01 4A 05 F6 | 	mov	COUNT_, #1
36648     A8 00 A0 FD | 	call	#pushregs_
3664c     2C F1 07 F1 | 	add	ptra, #300
36650     04 4E 05 F1 | 	add	fp, #4
36654     A7 12 62 FC | 	wrlong	arg01, fp
36658     04 4E 05 F1 | 	add	fp, #4
3665c     A7 14 62 FC | 	wrlong	arg02, fp
36660     04 4E 85 F1 | 	sub	fp, #4
36664     A7 16 02 FB | 	rdlong	arg03, fp
36668     04 16 06 F1 | 	add	arg03, #4
3666c     0B 13 02 FB | 	rdlong	arg01, arg03
36670     08 4E 05 F1 | 	add	fp, #8
36674     A7 14 02 F6 | 	mov	arg02, fp
36678     0C 4E 85 F1 | 	sub	fp, #12
3667c     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
36680     28 4F 05 F1 | 	add	fp, #296
36684     A7 FA 61 FC | 	wrlong	result1, fp
36688     28 4F 85 F1 | 	sub	fp, #296
3668c     00 FA 0D F2 | 	cmp	result1, #0 wz
36690     14 00 90 AD |  if_e	jmp	#LR__5280
36694                 | '         return _set_dos_error(r);
36694     28 4F 05 F1 | 	add	fp, #296
36698     A7 12 02 FB | 	rdlong	arg01, fp
3669c     28 4F 85 F1 | 	sub	fp, #296
366a0     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1052
366a4     C4 00 90 FD | 	jmp	#LR__5283
366a8                 | LR__5280
366a8     28 4E 05 F1 | 	add	fp, #40
366ac     A7 16 CA FA | 	rdbyte	arg03, fp wz
366b0     28 4E 85 F1 | 	sub	fp, #40
366b4                 | '         return -1;
366b4     01 FA 65 A6 |  if_e	neg	result1, #1
366b8     B0 00 90 AD |  if_e	jmp	#LR__5283
366bc     08 4E 05 F1 | 	add	fp, #8
366c0     A7 12 02 FB | 	rdlong	arg01, fp
366c4     20 4E 05 F1 | 	add	fp, #32
366c8     A7 14 02 F6 | 	mov	arg02, fp
366cc     28 4E 85 F1 | 	sub	fp, #40
366d0     3F 16 06 F6 | 	mov	arg03, #63
366d4     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
366d8     08 4E 05 F1 | 	add	fp, #8
366dc     A7 16 02 FB | 	rdlong	arg03, fp
366e0     3F 16 06 F1 | 	add	arg03, #63
366e4     0B 01 48 FC | 	wrbyte	#0, arg03
366e8     0C 4E 05 F1 | 	add	fp, #12
366ec     A7 16 C2 FA | 	rdbyte	arg03, fp
366f0     14 4E 85 F1 | 	sub	fp, #20
366f4     10 16 CE F7 | 	test	arg03, #16 wz
366f8     18 00 90 AD |  if_e	jmp	#LR__5281
366fc     08 4E 05 F1 | 	add	fp, #8
36700     A7 16 02 FB | 	rdlong	arg03, fp
36704     08 4E 85 F1 | 	sub	fp, #8
36708     50 16 06 F1 | 	add	arg03, #80
3670c     0B 03 48 FC | 	wrbyte	#1, arg03
36710     14 00 90 FD | 	jmp	#LR__5282
36714                 | LR__5281
36714     08 4E 05 F1 | 	add	fp, #8
36718     A7 16 02 FB | 	rdlong	arg03, fp
3671c     08 4E 85 F1 | 	sub	fp, #8
36720     50 16 06 F1 | 	add	arg03, #80
36724     0B 01 48 FC | 	wrbyte	#0, arg03
36728                 | LR__5282
36728     08 4E 05 F1 | 	add	fp, #8
3672c     A7 16 02 FB | 	rdlong	arg03, fp
36730     04 4E 05 F1 | 	add	fp, #4
36734     A7 14 02 FB | 	rdlong	arg02, fp
36738     48 16 06 F1 | 	add	arg03, #72
3673c     0B 15 62 FC | 	wrlong	arg02, arg03
36740     04 4E 85 F1 | 	sub	fp, #4
36744     A7 26 02 FB | 	rdlong	local01, fp
36748     08 4E 05 F1 | 	add	fp, #8
3674c     A7 12 E2 FA | 	rdword	arg01, fp
36750     02 4E 05 F1 | 	add	fp, #2
36754     A7 14 E2 FA | 	rdword	arg02, fp
36758     12 4E 85 F1 | 	sub	fp, #18
3675c     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_1050
36760     4C 26 06 F1 | 	add	local01, #76
36764     13 FB 61 FC | 	wrlong	result1, local01
36768                 | '         ent->d_type =  (0) ;
36768                 | '     }
36768                 | '     ent->d_size = finfo.fsize;
36768                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
36768                 | '     return 0;
36768     00 FA 05 F6 | 	mov	result1, #0
3676c                 | LR__5283
3676c     A7 F0 03 F6 | 	mov	ptra, fp
36770     B2 00 A0 FD | 	call	#popregs_
36774                 | _fatfs_cc_v_readdir_ret
36774     2D 00 64 FD | 	ret
36778                 | 
36778                 | _fatfs_cc_v_stat
36778     03 4A 05 F6 | 	mov	COUNT_, #3
3677c     A8 00 A0 FD | 	call	#pushregs_
36780     30 F1 07 F1 | 	add	ptra, #304
36784     04 4E 05 F1 | 	add	fp, #4
36788     A7 12 62 FC | 	wrlong	arg01, fp
3678c     04 4E 05 F1 | 	add	fp, #4
36790     A7 14 62 FC | 	wrlong	arg02, fp
36794     08 4E 85 F1 | 	sub	fp, #8
36798     0A 13 02 F6 | 	mov	arg01, arg02
3679c     00 14 06 F6 | 	mov	arg02, #0
367a0     30 16 06 F6 | 	mov	arg03, #48
367a4     98 00 A0 FD | 	call	#\builtin_bytefill_
367a8     04 4E 05 F1 | 	add	fp, #4
367ac     A7 FA 01 FB | 	rdlong	result1, fp
367b0     04 4E 85 F1 | 	sub	fp, #4
367b4     FD FA C9 FA | 	rdbyte	result1, result1 wz
367b8     2C 00 90 AD |  if_e	jmp	#LR__5290
367bc     04 4E 05 F1 | 	add	fp, #4
367c0     A7 FA 01 FB | 	rdlong	result1, fp
367c4     04 4E 85 F1 | 	sub	fp, #4
367c8     FD FA C1 FA | 	rdbyte	result1, result1
367cc     2E FA 0D F2 | 	cmp	result1, #46 wz
367d0     04 4E 05 A1 |  if_e	add	fp, #4
367d4     A7 26 02 AB |  if_e	rdlong	local01, fp
367d8     04 4E 85 A1 |  if_e	sub	fp, #4
367dc     01 26 06 A1 |  if_e	add	local01, #1
367e0     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
367e4     18 00 90 5D |  if_ne	jmp	#LR__5291
367e8                 | LR__5290
367e8     18 4E 05 F1 | 	add	fp, #24
367ec     A7 20 48 FC | 	wrbyte	#16, fp
367f0     0C 4E 85 F1 | 	sub	fp, #12
367f4     A7 00 68 FC | 	wrlong	#0, fp
367f8     0C 4E 85 F1 | 	sub	fp, #12
367fc     24 00 90 FD | 	jmp	#LR__5292
36800                 | LR__5291
36800     04 4E 05 F1 | 	add	fp, #4
36804     A7 12 02 FB | 	rdlong	arg01, fp
36808     0C 4E 05 F1 | 	add	fp, #12
3680c     A7 14 02 F6 | 	mov	arg02, fp
36810     10 4E 85 F1 | 	sub	fp, #16
36814     AC EB BF FD | 	call	#_fatfs_cc_f_stat
36818     0C 4E 05 F1 | 	add	fp, #12
3681c     A7 FA 61 FC | 	wrlong	result1, fp
36820     0C 4E 85 F1 | 	sub	fp, #12
36824                 | LR__5292
36824     0C 4E 05 F1 | 	add	fp, #12
36828     A7 28 0A FB | 	rdlong	local02, fp wz
3682c     0C 4E 85 F1 | 	sub	fp, #12
36830     14 00 90 AD |  if_e	jmp	#LR__5293
36834                 | '         return _set_dos_error(r);
36834     0C 4E 05 F1 | 	add	fp, #12
36838     A7 12 02 FB | 	rdlong	arg01, fp
3683c     0C 4E 85 F1 | 	sub	fp, #12
36840     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1052
36844     14 01 90 FD | 	jmp	#LR__5294
36848                 | LR__5293
36848     2C 4F 05 F1 | 	add	fp, #300
3684c     A7 48 6A FC | 	wrlong	#292, fp
36850     14 4F 85 F1 | 	sub	fp, #276
36854     A7 2A C2 FA | 	rdbyte	local03, fp
36858     18 4E 85 F1 | 	sub	fp, #24
3685c     01 2A CE F7 | 	test	local03, #1 wz
36860     2C 4F 05 A1 |  if_e	add	fp, #300
36864     A7 2A 02 AB |  if_e	rdlong	local03, fp
36868     92 2A 46 A5 |  if_e	or	local03, #146
3686c     A7 2A 62 AC |  if_e	wrlong	local03, fp
36870     2C 4F 85 A1 |  if_e	sub	fp, #300
36874     18 4E 05 F1 | 	add	fp, #24
36878     A7 2A C2 FA | 	rdbyte	local03, fp
3687c     18 4E 85 F1 | 	sub	fp, #24
36880     10 2A CE F7 | 	test	local03, #16 wz
36884     2C 4F 05 51 |  if_ne	add	fp, #300
36888     A7 2A 02 5B |  if_ne	rdlong	local03, fp
3688c     08 00 00 5F 
36890     49 2A 46 55 |  if_ne	or	local03, ##4169
36894     A7 2A 62 5C |  if_ne	wrlong	local03, fp
36898     2C 4F 85 51 |  if_ne	sub	fp, #300
3689c     08 4E 05 F1 | 	add	fp, #8
368a0     A7 2A 02 FB | 	rdlong	local03, fp
368a4     24 4F 05 F1 | 	add	fp, #292
368a8     A7 28 02 FB | 	rdlong	local02, fp
368ac     08 2A 06 F1 | 	add	local03, #8
368b0     15 29 62 FC | 	wrlong	local02, local03
368b4     24 4F 85 F1 | 	sub	fp, #292
368b8     A7 2A 02 FB | 	rdlong	local03, fp
368bc     0C 2A 06 F1 | 	add	local03, #12
368c0     15 03 68 FC | 	wrlong	#1, local03
368c4     A7 2A 02 FB | 	rdlong	local03, fp
368c8     08 4E 05 F1 | 	add	fp, #8
368cc     A7 28 02 FB | 	rdlong	local02, fp
368d0     18 2A 06 F1 | 	add	local03, #24
368d4     15 29 62 FC | 	wrlong	local02, local03
368d8     08 4E 85 F1 | 	sub	fp, #8
368dc     A7 2A 02 FB | 	rdlong	local03, fp
368e0     1C 2A 06 F1 | 	add	local03, #28
368e4     01 00 80 FF 
368e8     15 01 68 FC | 	wrlong	##512, local03
368ec     A7 28 02 FB | 	rdlong	local02, fp
368f0     14 2B 02 F6 | 	mov	local03, local02
368f4     18 28 06 F1 | 	add	local02, #24
368f8     14 29 02 FB | 	rdlong	local02, local02
368fc     FF 29 06 F1 | 	add	local02, #511
36900     14 29 52 F6 | 	abs	local02, local02 wc
36904     09 28 46 F0 | 	shr	local02, #9
36908     14 29 82 F6 | 	negc	local02, local02
3690c     20 2A 06 F1 | 	add	local03, #32
36910     15 29 62 FC | 	wrlong	local02, local03
36914     A7 28 02 FB | 	rdlong	local02, fp
36918     14 2B 02 F6 | 	mov	local03, local02
3691c     14 27 02 F6 | 	mov	local01, local02
36920     0C 4E 05 F1 | 	add	fp, #12
36924     A7 12 E2 FA | 	rdword	arg01, fp
36928     02 4E 05 F1 | 	add	fp, #2
3692c     A7 14 E2 FA | 	rdword	arg02, fp
36930     16 4E 85 F1 | 	sub	fp, #22
36934     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_1050
36938     2C 26 06 F1 | 	add	local01, #44
3693c     13 FB 61 FC | 	wrlong	result1, local01
36940     28 28 06 F1 | 	add	local02, #40
36944     14 FB 61 FC | 	wrlong	result1, local02
36948     24 2A 06 F1 | 	add	local03, #36
3694c     15 FB 61 FC | 	wrlong	result1, local03
36950                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
36950                 | '     }
36950                 | '     buf->st_mode = mode;
36950                 | '     buf->st_nlink = 1;
36950                 | '     buf->st_size = finfo.fsize;
36950                 | '     buf->st_blksize = 512;
36950                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
36950                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
36950                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
36950                 | '     return r;
36950     0C 4E 05 F1 | 	add	fp, #12
36954     A7 FA 01 FB | 	rdlong	result1, fp
36958     0C 4E 85 F1 | 	sub	fp, #12
3695c                 | LR__5294
3695c     A7 F0 03 F6 | 	mov	ptra, fp
36960     B2 00 A0 FD | 	call	#popregs_
36964                 | _fatfs_cc_v_stat_ret
36964     2D 00 64 FD | 	ret
36968                 | 
36968                 | _fatfs_cc_v_read
36968     00 4A 05 F6 | 	mov	COUNT_, #0
3696c     A8 00 A0 FD | 	call	#pushregs_
36970     1C F0 07 F1 | 	add	ptra, #28
36974     04 4E 05 F1 | 	add	fp, #4
36978     A7 12 62 FC | 	wrlong	arg01, fp
3697c     04 4E 05 F1 | 	add	fp, #4
36980     A7 14 62 FC | 	wrlong	arg02, fp
36984     04 4E 05 F1 | 	add	fp, #4
36988     A7 16 62 FC | 	wrlong	arg03, fp
3698c     08 4E 85 F1 | 	sub	fp, #8
36990     A7 12 02 FB | 	rdlong	arg01, fp
36994     09 13 0A FB | 	rdlong	arg01, arg01 wz
36998     0C 4E 05 F1 | 	add	fp, #12
3699c     A7 12 62 FC | 	wrlong	arg01, fp
369a0     10 4E 85 F1 | 	sub	fp, #16
369a4                 | '         return _seterror( 5 );
369a4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
369a8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
369ac     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
369b0     01 FA 65 A6 |  if_e	neg	result1, #1
369b4     B8 00 90 AD |  if_e	jmp	#LR__5302
369b8     10 4E 05 F1 | 	add	fp, #16
369bc     A7 12 02 FB | 	rdlong	arg01, fp
369c0     02 00 00 FF 
369c4     14 12 06 F1 | 	add	arg01, ##1044
369c8     08 4E 85 F1 | 	sub	fp, #8
369cc     A7 14 02 FB | 	rdlong	arg02, fp
369d0     04 4E 05 F1 | 	add	fp, #4
369d4     A7 16 02 FB | 	rdlong	arg03, fp
369d8     0C 4E 05 F1 | 	add	fp, #12
369dc     A7 18 02 F6 | 	mov	arg04, fp
369e0     18 4E 85 F1 | 	sub	fp, #24
369e4     C4 CE BF FD | 	call	#_fatfs_cc_f_read
369e8     14 4E 05 F1 | 	add	fp, #20
369ec     A7 FA 61 FC | 	wrlong	result1, fp
369f0     14 4E 85 F1 | 	sub	fp, #20
369f4     00 FA 0D F2 | 	cmp	result1, #0 wz
369f8     34 00 90 AD |  if_e	jmp	#LR__5300
369fc     04 4E 05 F1 | 	add	fp, #4
36a00     A7 18 02 FB | 	rdlong	arg04, fp
36a04     0C 17 02 F6 | 	mov	arg03, arg04
36a08     08 18 06 F1 | 	add	arg04, #8
36a0c     0C 19 02 FB | 	rdlong	arg04, arg04
36a10     20 18 46 F5 | 	or	arg04, #32
36a14     08 16 06 F1 | 	add	arg03, #8
36a18     0B 19 62 FC | 	wrlong	arg04, arg03
36a1c                 | '         fil->state |=  (0x20) ;
36a1c                 | '         return _set_dos_error(r);
36a1c     10 4E 05 F1 | 	add	fp, #16
36a20     A7 12 02 FB | 	rdlong	arg01, fp
36a24     14 4E 85 F1 | 	sub	fp, #20
36a28     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1052
36a2c     40 00 90 FD | 	jmp	#LR__5302
36a30                 | LR__5300
36a30     18 4E 05 F1 | 	add	fp, #24
36a34     A7 FA 09 FB | 	rdlong	result1, fp wz
36a38     18 4E 85 F1 | 	sub	fp, #24
36a3c     24 00 90 5D |  if_ne	jmp	#LR__5301
36a40     04 4E 05 F1 | 	add	fp, #4
36a44     A7 FA 01 FB | 	rdlong	result1, fp
36a48     FD 18 02 F6 | 	mov	arg04, result1
36a4c     04 4E 85 F1 | 	sub	fp, #4
36a50     08 FA 05 F1 | 	add	result1, #8
36a54     FD FA 01 FB | 	rdlong	result1, result1
36a58     10 FA 45 F5 | 	or	result1, #16
36a5c     08 18 06 F1 | 	add	arg04, #8
36a60     0C FB 61 FC | 	wrlong	result1, arg04
36a64                 | LR__5301
36a64                 | '         fil->state |=  (0x10) ;
36a64                 | '     }
36a64                 | '     return x;
36a64     18 4E 05 F1 | 	add	fp, #24
36a68     A7 FA 01 FB | 	rdlong	result1, fp
36a6c     18 4E 85 F1 | 	sub	fp, #24
36a70                 | LR__5302
36a70     A7 F0 03 F6 | 	mov	ptra, fp
36a74     B2 00 A0 FD | 	call	#popregs_
36a78                 | _fatfs_cc_v_read_ret
36a78     2D 00 64 FD | 	ret
36a7c                 | 
36a7c                 | _fatfs_cc_v_write
36a7c     00 4A 05 F6 | 	mov	COUNT_, #0
36a80     A8 00 A0 FD | 	call	#pushregs_
36a84     1C F0 07 F1 | 	add	ptra, #28
36a88     04 4E 05 F1 | 	add	fp, #4
36a8c     A7 12 62 FC | 	wrlong	arg01, fp
36a90     04 4E 05 F1 | 	add	fp, #4
36a94     A7 14 62 FC | 	wrlong	arg02, fp
36a98     04 4E 05 F1 | 	add	fp, #4
36a9c     A7 16 62 FC | 	wrlong	arg03, fp
36aa0     08 4E 85 F1 | 	sub	fp, #8
36aa4     A7 12 02 FB | 	rdlong	arg01, fp
36aa8     09 13 0A FB | 	rdlong	arg01, arg01 wz
36aac     0C 4E 05 F1 | 	add	fp, #12
36ab0     A7 12 62 FC | 	wrlong	arg01, fp
36ab4     10 4E 85 F1 | 	sub	fp, #16
36ab8                 | '         return _seterror( 5 );
36ab8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
36abc     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
36ac0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
36ac4     01 FA 65 A6 |  if_e	neg	result1, #1
36ac8     84 00 90 AD |  if_e	jmp	#LR__5311
36acc     10 4E 05 F1 | 	add	fp, #16
36ad0     A7 12 02 FB | 	rdlong	arg01, fp
36ad4     02 00 00 FF 
36ad8     14 12 06 F1 | 	add	arg01, ##1044
36adc     08 4E 85 F1 | 	sub	fp, #8
36ae0     A7 14 02 FB | 	rdlong	arg02, fp
36ae4     04 4E 05 F1 | 	add	fp, #4
36ae8     A7 16 02 FB | 	rdlong	arg03, fp
36aec     0C 4E 05 F1 | 	add	fp, #12
36af0     A7 18 02 F6 | 	mov	arg04, fp
36af4     18 4E 85 F1 | 	sub	fp, #24
36af8     4C D4 BF FD | 	call	#_fatfs_cc_f_write
36afc     14 4E 05 F1 | 	add	fp, #20
36b00     A7 FA 61 FC | 	wrlong	result1, fp
36b04     14 4E 85 F1 | 	sub	fp, #20
36b08     00 FA 0D F2 | 	cmp	result1, #0 wz
36b0c     34 00 90 AD |  if_e	jmp	#LR__5310
36b10     04 4E 05 F1 | 	add	fp, #4
36b14     A7 18 02 FB | 	rdlong	arg04, fp
36b18     0C 17 02 F6 | 	mov	arg03, arg04
36b1c     08 18 06 F1 | 	add	arg04, #8
36b20     0C 19 02 FB | 	rdlong	arg04, arg04
36b24     20 18 46 F5 | 	or	arg04, #32
36b28     08 16 06 F1 | 	add	arg03, #8
36b2c     0B 19 62 FC | 	wrlong	arg04, arg03
36b30                 | '         fil->state |=  (0x20) ;
36b30                 | '         return _set_dos_error(r);
36b30     10 4E 05 F1 | 	add	fp, #16
36b34     A7 12 02 FB | 	rdlong	arg01, fp
36b38     14 4E 85 F1 | 	sub	fp, #20
36b3c     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1052
36b40     0C 00 90 FD | 	jmp	#LR__5311
36b44                 | LR__5310
36b44                 | '     }
36b44                 | '     return x;
36b44     18 4E 05 F1 | 	add	fp, #24
36b48     A7 FA 01 FB | 	rdlong	result1, fp
36b4c     18 4E 85 F1 | 	sub	fp, #24
36b50                 | LR__5311
36b50     A7 F0 03 F6 | 	mov	ptra, fp
36b54     B2 00 A0 FD | 	call	#popregs_
36b58                 | _fatfs_cc_v_write_ret
36b58     2D 00 64 FD | 	ret
36b5c                 | 
36b5c                 | _fatfs_cc_v_lseek
36b5c     04 4A 05 F6 | 	mov	COUNT_, #4
36b60     A8 00 A0 FD | 	call	#pushregs_
36b64     0A 27 02 F6 | 	mov	local01, arg02
36b68     0B 29 02 F6 | 	mov	local02, arg03
36b6c     09 2B 02 FB | 	rdlong	local03, arg01
36b70     02 00 00 FF 
36b74     14 2A 0E F1 | 	add	local03, ##1044 wz
36b78                 | '         return _seterror( 5 );
36b78     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
36b7c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
36b80     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
36b84     01 FA 65 A6 |  if_e	neg	result1, #1
36b88     4C 00 90 AD |  if_e	jmp	#LR__5322
36b8c     00 28 0E F2 | 	cmp	local02, #0 wz
36b90     24 00 90 AD |  if_e	jmp	#LR__5320
36b94     01 28 0E F2 | 	cmp	local02, #1 wz
36b98     14 2A 06 A1 |  if_e	add	local03, #20
36b9c     15 2D 02 AB |  if_e	rdlong	local04, local03
36ba0     14 2A 86 A1 |  if_e	sub	local03, #20
36ba4     16 27 02 A1 |  if_e	add	local01, local04
36ba8     0C 2A 06 51 |  if_ne	add	local03, #12
36bac     15 2D 02 5B |  if_ne	rdlong	local04, local03
36bb0     0C 2A 86 51 |  if_ne	sub	local03, #12
36bb4     16 27 02 51 |  if_ne	add	local01, local04
36bb8                 | LR__5320
36bb8     13 15 02 F6 | 	mov	arg02, local01
36bbc     15 13 02 F6 | 	mov	arg01, local03
36bc0     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
36bc4     FD 12 0A F6 | 	mov	arg01, result1 wz
36bc8     08 00 90 AD |  if_e	jmp	#LR__5321
36bcc                 | '         return _set_dos_error(result);
36bcc     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1052
36bd0     04 00 90 FD | 	jmp	#LR__5322
36bd4                 | LR__5321
36bd4                 | '     }
36bd4                 | '     return offset;
36bd4     13 FB 01 F6 | 	mov	result1, local01
36bd8                 | LR__5322
36bd8     A7 F0 03 F6 | 	mov	ptra, fp
36bdc     B2 00 A0 FD | 	call	#popregs_
36be0                 | _fatfs_cc_v_lseek_ret
36be0     2D 00 64 FD | 	ret
36be4                 | 
36be4                 | _fatfs_cc_v_ioctl
36be4                 | ' {
36be4                 | '     return _seterror( 10 );
36be4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
36be8     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
36bec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
36bf0     01 FA 65 F6 | 	neg	result1, #1
36bf4                 | _fatfs_cc_v_ioctl_ret
36bf4     2D 00 64 FD | 	ret
36bf8                 | 
36bf8                 | _fatfs_cc_v_mkdir
36bf8     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
36bfc     FD 12 02 F6 | 	mov	arg01, result1
36c00                 | ' 
36c00                 | '     r = f_mkdir(name);
36c00                 | '     return _set_dos_error(r);
36c00     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1052
36c04                 | _fatfs_cc_v_mkdir_ret
36c04     2D 00 64 FD | 	ret
36c08                 | 
36c08                 | _fatfs_cc_v_remove
36c08     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
36c0c     FD 12 02 F6 | 	mov	arg01, result1
36c10                 | ' 
36c10                 | '     r = f_unlink(name);
36c10                 | '     return _set_dos_error(r);
36c10     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1052
36c14                 | _fatfs_cc_v_remove_ret
36c14     2D 00 64 FD | 	ret
36c18                 | 
36c18                 | _fatfs_cc_v_rmdir
36c18     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
36c1c     FD 12 02 F6 | 	mov	arg01, result1
36c20                 | ' 
36c20                 | '     r = f_unlink(name);
36c20                 | '     return _set_dos_error(r);
36c20     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1052
36c24                 | _fatfs_cc_v_rmdir_ret
36c24     2D 00 64 FD | 	ret
36c28                 | 
36c28                 | _fatfs_cc_v_rename
36c28     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
36c2c     FD 12 02 F6 | 	mov	arg01, result1
36c30                 | '     return _set_dos_error(r);
36c30     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1052
36c34                 | _fatfs_cc_v_rename_ret
36c34     2D 00 64 FD | 	ret
36c38                 | 
36c38                 | _fatfs_cc_v_open
36c38     07 4A 05 F6 | 	mov	COUNT_, #7
36c3c     A8 00 A0 FD | 	call	#pushregs_
36c40     09 27 02 F6 | 	mov	local01, arg01
36c44     0A 29 02 F6 | 	mov	local02, arg02
36c48     0B 2B 02 F6 | 	mov	local03, arg03
36c4c     03 00 00 FF 
36c50     3C 12 06 F6 | 	mov	arg01, ##1596
36c54                 | '     return _gc_alloc(size);
36c54     10 14 06 F6 | 	mov	arg02, #16
36c58     90 56 BF FD | 	call	#__system___gc_doalloc
36c5c     FD 2C 0A F6 | 	mov	local04, result1 wz
36c60                 | '       return _seterror( 7 );
36c60     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
36c64     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
36c68     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
36c6c     01 FA 65 A6 |  if_e	neg	result1, #1
36c70     98 00 90 AD |  if_e	jmp	#LR__5336
36c74     16 13 02 F6 | 	mov	arg01, local04
36c78     00 14 06 F6 | 	mov	arg02, #0
36c7c     03 00 00 FF 
36c80     3C 16 06 F6 | 	mov	arg03, ##1596
36c84     98 00 A0 FD | 	call	#\builtin_bytefill_
36c88                 | '   switch (flags & 3) {
36c88     15 2F 02 F6 | 	mov	local05, local03
36c8c     03 2E 0E F5 | 	and	local05, #3 wz
36c90     0C 00 90 AD |  if_e	jmp	#LR__5330
36c94     01 2E 0E F2 | 	cmp	local05, #1 wz
36c98     0C 00 90 AD |  if_e	jmp	#LR__5331
36c9c     10 00 90 FD | 	jmp	#LR__5332
36ca0                 | LR__5330
36ca0     01 30 06 F6 | 	mov	local06, #1
36ca4                 | '       fs_flags =  0x01 ;
36ca4                 | '       break;
36ca4     0C 00 90 FD | 	jmp	#LR__5333
36ca8                 | LR__5331
36ca8     02 30 06 F6 | 	mov	local06, #2
36cac                 | '       fs_flags =  0x02 ;
36cac                 | '       break;
36cac     04 00 90 FD | 	jmp	#LR__5333
36cb0                 | LR__5332
36cb0     03 30 06 F6 | 	mov	local06, #3
36cb4                 | '       fs_flags =  0x01  |  0x02 ;
36cb4                 | '       break;
36cb4                 | LR__5333
36cb4     08 2A CE F7 | 	test	local03, #8 wz
36cb8     18 30 46 55 |  if_ne	or	local06, #24
36cbc     08 00 90 5D |  if_ne	jmp	#LR__5334
36cc0     20 2A CE F7 | 	test	local03, #32 wz
36cc4     30 30 46 55 |  if_ne	or	local06, #48
36cc8                 | LR__5334
36cc8     02 00 00 FF 
36ccc     14 2C 06 F1 | 	add	local04, ##1044
36cd0     16 13 02 F6 | 	mov	arg01, local04
36cd4     02 00 00 FF 
36cd8     14 2C 86 F1 | 	sub	local04, ##1044
36cdc     14 15 02 F6 | 	mov	arg02, local02
36ce0     18 17 02 F6 | 	mov	arg03, local06
36ce4     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
36ce8     FD 32 0A F6 | 	mov	local07, result1 wz
36cec     14 00 90 AD |  if_e	jmp	#LR__5335
36cf0     16 13 02 F6 | 	mov	arg01, local04
36cf4                 | '     return _gc_free(ptr);
36cf4     00 57 BF FD | 	call	#__system___gc_free
36cf8                 | '     free(f);
36cf8                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
36cf8                 | '     return _set_dos_error(r);
36cf8     19 13 02 F6 | 	mov	arg01, local07
36cfc     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1052
36d00     08 00 90 FD | 	jmp	#LR__5336
36d04                 | LR__5335
36d04     13 2D 62 FC | 	wrlong	local04, local01
36d08                 | '   }
36d08                 | '   fil->vfsdata = f;
36d08                 | '   return 0;
36d08     00 FA 05 F6 | 	mov	result1, #0
36d0c                 | LR__5336
36d0c     A7 F0 03 F6 | 	mov	ptra, fp
36d10     B2 00 A0 FD | 	call	#popregs_
36d14                 | _fatfs_cc_v_open_ret
36d14     2D 00 64 FD | 	ret
36d18                 | 
36d18                 | _fatfs_cc_v_flush
36d18     09 13 02 FB | 	rdlong	arg01, arg01
36d1c     02 00 00 FF 
36d20     14 12 0E F1 | 	add	arg01, ##1044 wz
36d24                 | '         return _seterror( 5 );
36d24     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
36d28     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
36d2c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
36d30     01 FA 65 A6 |  if_e	neg	result1, #1
36d34     0C 00 90 AD |  if_e	jmp	#LR__5340
36d38     00 DA BF FD | 	call	#_fatfs_cc_f_sync
36d3c     FD 12 02 F6 | 	mov	arg01, result1
36d40                 | '     }
36d40                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
36d40                 | '     result = f_sync(f);
36d40                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
36d40                 | '     return _set_dos_error(result);
36d40     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1052
36d44                 | LR__5340
36d44                 | _fatfs_cc_v_flush_ret
36d44     2D 00 64 FD | 	ret
36d48                 | 
36d48                 | _fatfs_cc_v_init
36d48                 | ' {
36d48                 | '     return 0;
36d48     00 FA 05 F6 | 	mov	result1, #0
36d4c                 | _fatfs_cc_v_init_ret
36d4c     2D 00 64 FD | 	ret
36d50                 | 
36d50                 | _fatfs_cc_v_deinit
36d50     BE 01 00 FF 
36d54     C0 14 06 F6 | 	mov	arg02, ##@LR__5536
36d58     00 12 06 F6 | 	mov	arg01, #0
36d5c     00 16 06 F6 | 	mov	arg03, #0
36d60     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
36d64     01 00 00 FF 
36d68     08 E4 05 F1 | 	add	objptr, ##520
36d6c     F2 12 02 FB | 	rdlong	arg01, objptr
36d70     04 E4 05 F1 | 	add	objptr, #4
36d74     F2 14 02 FB | 	rdlong	arg02, objptr
36d78     01 00 00 FF 
36d7c     0C E4 85 F1 | 	sub	objptr, ##524
36d80     E0 3D BF FD | 	call	#__system___freepins
36d84                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
36d84                 | '     _freepins(f_pinmask);
36d84                 | '     return 0;
36d84     00 FA 05 F6 | 	mov	result1, #0
36d88                 | _fatfs_cc_v_deinit_ret
36d88     2D 00 64 FD | 	ret
36d8c                 | 
36d8c                 | _fatfs_cc_get_vfs
36d8c     01 4A 05 F6 | 	mov	COUNT_, #1
36d90     A8 00 A0 FD | 	call	#pushregs_
36d94     09 27 02 F6 | 	mov	local01, arg01
36d98     50 12 06 F6 | 	mov	arg01, #80
36d9c     1C 55 BF FD | 	call	#__system___gc_alloc_managed
36da0     FD 12 02 F6 | 	mov	arg01, result1
36da4     F2 FA 01 F6 | 	mov	result1, objptr
36da8     00 C0 05 FF 
36dac     00 FA 45 F5 | 	or	result1, ##192937984
36db0     09 FB 61 FC | 	wrlong	result1, arg01
36db4     F2 FA 01 F6 | 	mov	result1, objptr
36db8     00 C8 05 FF 
36dbc     00 FA 45 F5 | 	or	result1, ##193986560
36dc0     04 12 06 F1 | 	add	arg01, #4
36dc4     09 FB 61 FC | 	wrlong	result1, arg01
36dc8     F2 FA 01 F6 | 	mov	result1, objptr
36dcc     00 D0 05 FF 
36dd0     00 FA 45 F5 | 	or	result1, ##195035136
36dd4     04 12 06 F1 | 	add	arg01, #4
36dd8     09 FB 61 FC | 	wrlong	result1, arg01
36ddc     F2 FA 01 F6 | 	mov	result1, objptr
36de0     00 D8 05 FF 
36de4     00 FA 45 F5 | 	or	result1, ##196083712
36de8     04 12 06 F1 | 	add	arg01, #4
36dec     09 FB 61 FC | 	wrlong	result1, arg01
36df0     F2 FA 01 F6 | 	mov	result1, objptr
36df4     00 E0 05 FF 
36df8     00 FA 45 F5 | 	or	result1, ##197132288
36dfc     04 12 06 F1 | 	add	arg01, #4
36e00     09 FB 61 FC | 	wrlong	result1, arg01
36e04     04 12 06 F1 | 	add	arg01, #4
36e08     09 01 68 FC | 	wrlong	#0, arg01
36e0c     04 12 06 F1 | 	add	arg01, #4
36e10     09 27 62 FC | 	wrlong	local01, arg01
36e14     04 12 06 F1 | 	add	arg01, #4
36e18     09 01 68 FC | 	wrlong	#0, arg01
36e1c     F2 FA 01 F6 | 	mov	result1, objptr
36e20     00 E8 05 FF 
36e24     00 FA 45 F5 | 	or	result1, ##198180864
36e28     04 12 06 F1 | 	add	arg01, #4
36e2c     09 FB 61 FC | 	wrlong	result1, arg01
36e30     F2 FA 01 F6 | 	mov	result1, objptr
36e34     00 F0 05 FF 
36e38     00 FA 45 F5 | 	or	result1, ##199229440
36e3c     04 12 06 F1 | 	add	arg01, #4
36e40     09 FB 61 FC | 	wrlong	result1, arg01
36e44     F2 FA 01 F6 | 	mov	result1, objptr
36e48     00 F8 05 FF 
36e4c     00 FA 45 F5 | 	or	result1, ##200278016
36e50     04 12 06 F1 | 	add	arg01, #4
36e54     09 FB 61 FC | 	wrlong	result1, arg01
36e58     F2 FA 01 F6 | 	mov	result1, objptr
36e5c     3A FA 25 F4 | 	bith	result1, #58
36e60     04 12 06 F1 | 	add	arg01, #4
36e64     09 FB 61 FC | 	wrlong	result1, arg01
36e68     F2 FA 01 F6 | 	mov	result1, objptr
36e6c     00 08 06 FF 
36e70     00 FA 45 F5 | 	or	result1, ##202375168
36e74     04 12 06 F1 | 	add	arg01, #4
36e78     09 FB 61 FC | 	wrlong	result1, arg01
36e7c     F2 FA 01 F6 | 	mov	result1, objptr
36e80     00 10 06 FF 
36e84     00 FA 45 F5 | 	or	result1, ##203423744
36e88     04 12 06 F1 | 	add	arg01, #4
36e8c     09 FB 61 FC | 	wrlong	result1, arg01
36e90     F2 FA 01 F6 | 	mov	result1, objptr
36e94     00 18 06 FF 
36e98     00 FA 45 F5 | 	or	result1, ##204472320
36e9c     04 12 06 F1 | 	add	arg01, #4
36ea0     09 FB 61 FC | 	wrlong	result1, arg01
36ea4     F2 FA 01 F6 | 	mov	result1, objptr
36ea8     00 20 06 FF 
36eac     00 FA 45 F5 | 	or	result1, ##205520896
36eb0     04 12 06 F1 | 	add	arg01, #4
36eb4     09 FB 61 FC | 	wrlong	result1, arg01
36eb8     F2 FA 01 F6 | 	mov	result1, objptr
36ebc     00 28 06 FF 
36ec0     00 FA 45 F5 | 	or	result1, ##206569472
36ec4     04 12 06 F1 | 	add	arg01, #4
36ec8     09 FB 61 FC | 	wrlong	result1, arg01
36ecc     F2 FA 01 F6 | 	mov	result1, objptr
36ed0     00 30 06 FF 
36ed4     00 FA 45 F5 | 	or	result1, ##207618048
36ed8     04 12 06 F1 | 	add	arg01, #4
36edc     09 FB 61 FC | 	wrlong	result1, arg01
36ee0     F2 FA 01 F6 | 	mov	result1, objptr
36ee4     00 38 06 FF 
36ee8     00 FA 45 F5 | 	or	result1, ##208666624
36eec     04 12 06 F1 | 	add	arg01, #4
36ef0     09 FB 61 FC | 	wrlong	result1, arg01
36ef4     F2 FA 01 F6 | 	mov	result1, objptr
36ef8     00 40 06 FF 
36efc     00 FA 45 F5 | 	or	result1, ##209715200
36f00     04 12 06 F1 | 	add	arg01, #4
36f04     09 FB 61 FC | 	wrlong	result1, arg01
36f08     4C 12 86 F1 | 	sub	arg01, #76
36f0c                 | ' 
36f0c                 | '     v->close = &v_close;
36f0c                 | '     v->read = &v_read;
36f0c                 | '     v->write = &v_write;
36f0c                 | '     v->lseek = &v_lseek;
36f0c                 | '     v->ioctl = &v_ioctl;
36f0c                 | '     v->flush = 0;
36f0c                 | '     v->vfs_data = ptr;
36f0c                 | '     v->reserved = 0;
36f0c                 | ' 
36f0c                 | '     v->open = &v_open;
36f0c                 | '     v->creat = &v_creat;
36f0c                 | '     v->opendir = &v_opendir;
36f0c                 | '     v->closedir = &v_closedir;
36f0c                 | '     v->readdir = &v_readdir;
36f0c                 | '     v->stat = &v_stat;
36f0c                 | ' 
36f0c                 | '     v->mkdir = &v_mkdir;
36f0c                 | '     v->rmdir = &v_rmdir;
36f0c                 | ' 
36f0c                 | '     v->remove = &v_remove;
36f0c                 | '     v->rename = &v_rename;
36f0c                 | ' 
36f0c                 | '     v->init = &v_init;
36f0c                 | '     v->deinit = &v_deinit;
36f0c                 | ' 
36f0c                 | '     return v;
36f0c     09 FB 01 F6 | 	mov	result1, arg01
36f10     A7 F0 03 F6 | 	mov	ptra, fp
36f14     B2 00 A0 FD | 	call	#popregs_
36f18                 | _fatfs_cc_get_vfs_ret
36f18     2D 00 64 FD | 	ret
36f1c                 | 
36f1c                 | _fatfs_cc_xmit_mmc_1203
36f1c     01 00 00 FF 
36f20     10 E4 05 F1 | 	add	objptr, ##528
36f24     F2 00 02 FB | 	rdlong	_var01, objptr
36f28     08 E4 05 F1 | 	add	objptr, #8
36f2c     F2 02 02 FB | 	rdlong	_var02, objptr
36f30     01 00 00 FF 
36f34     18 E4 85 F1 | 	sub	objptr, ##536
36f38     40 02 62 FD | 	dirl	_var02
36f3c     28 02 64 FD | 	setq	#1
36f40     09 05 02 FB | 	rdlong	_var03, arg01
36f44     69 04 62 FD | 	rev	_var03
36f48     1B 04 FE F9 | 	movbyts	_var03, #27
36f4c     01 05 22 FC | 	wypin	_var03, _var02
36f50     0A 05 02 F6 | 	mov	_var03, arg02
36f54     02 14 4E F0 | 	shr	arg02, #2 wz
36f58     03 04 66 F0 | 	shl	_var03, #3
36f5c     00 05 22 FC | 	wypin	_var03, _var01
36f60     41 02 62 FD | 	dirh	_var02
36f64     08 12 06 F1 | 	add	arg01, #8
36f68     69 06 62 FD | 	rev	_var04
36f6c     1B 06 FE F9 | 	movbyts	_var04, #27
36f70                 | LR__5350
36f70     01 07 22 5C |  if_ne	wypin	_var04, _var02
36f74     09 07 02 5B |  if_ne	rdlong	_var04, arg01
36f78     04 12 06 51 |  if_ne	add	arg01, #4
36f7c     69 06 62 5D |  if_ne	rev	_var04
36f80     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
36f84                 | LR__5351
36f84     40 02 72 5D |  if_ne	testp	_var02 wc
36f88     F8 FF 9F 1D |  if_a	jmp	#LR__5351
36f8c     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__5350
36f90                 | LR__5352
36f90     40 00 72 FD | 	testp	_var01 wc
36f94     F8 FF 9F 3D |  if_ae	jmp	#LR__5352
36f98     40 02 62 FD | 	dirl	_var02
36f9c     FF FF FF FF 
36fa0     01 FF 2B FC | 	wypin	##-1, _var02
36fa4     41 02 62 FD | 	dirh	_var02
36fa8                 | _fatfs_cc_xmit_mmc_1203_ret
36fa8     2D 00 64 FD | 	ret
36fac                 | 
36fac                 | _fatfs_cc_rcvr_mmc_1210
36fac     01 00 00 FF 
36fb0     10 E4 05 F1 | 	add	objptr, ##528
36fb4     F2 00 02 FB | 	rdlong	_var01, objptr
36fb8     0C E4 05 F1 | 	add	objptr, #12
36fbc     F2 02 02 FB | 	rdlong	_var02, objptr
36fc0     01 00 00 FF 
36fc4     1C E4 85 F1 | 	sub	objptr, ##540
36fc8     01 03 08 FC | 	akpin	_var02
36fcc     0A 05 0A F6 | 	mov	_var03, arg02 wz
36fd0     02 04 4E F0 | 	shr	_var03, #2 wz
36fd4     30 00 90 AD |  if_e	jmp	#LR__5362
36fd8     02 07 02 F6 | 	mov	_var04, _var03
36fdc     05 06 66 F0 | 	shl	_var04, #5
36fe0     00 07 22 FC | 	wypin	_var04, _var01
36fe4     01 7F 18 FC | 	wxpin	#63, _var02
36fe8                 | LR__5360
36fe8                 | LR__5361
36fe8     40 02 72 FD | 	testp	_var02 wc
36fec     F8 FF 9F 3D |  if_ae	jmp	#LR__5361
36ff0     01 07 8A FA | 	rdpin	_var04, _var02
36ff4     69 06 62 FD | 	rev	_var04
36ff8     1B 06 FE F9 | 	movbyts	_var04, #27
36ffc     09 07 62 FC | 	wrlong	_var04, arg01
37000     04 12 06 F1 | 	add	arg01, #4
37004     F8 05 6E FB | 	djnz	_var03, #LR__5360
37008                 | LR__5362
37008     03 14 0E F5 | 	and	arg02, #3 wz
3700c     24 00 90 AD |  if_e	jmp	#LR__5365
37010     01 4F 18 FC | 	wxpin	#39, _var02
37014                 | LR__5363
37014     00 11 28 FC | 	wypin	#8, _var01
37018                 | LR__5364
37018     40 02 72 FD | 	testp	_var02 wc
3701c     F8 FF 9F 3D |  if_ae	jmp	#LR__5364
37020     01 07 8A FA | 	rdpin	_var04, _var02
37024     69 06 62 FD | 	rev	_var04
37028     09 07 42 FC | 	wrbyte	_var04, arg01
3702c     01 12 06 F1 | 	add	arg01, #1
37030     F8 15 6E FB | 	djnz	arg02, #LR__5363
37034                 | LR__5365
37034                 | _fatfs_cc_rcvr_mmc_1210_ret
37034     2D 00 64 FD | 	ret
37038                 | 
37038                 | _fatfs_cc_wait_ready_1214
37038     01 4A 05 F6 | 	mov	COUNT_, #1
3703c     A8 00 A0 FD | 	call	#pushregs_
37040     10 F0 07 F1 | 	add	ptra, #16
37044     1A FA 61 FD | 	getct	result1
37048     08 4E 05 F1 | 	add	fp, #8
3704c     A7 FA 61 FC | 	wrlong	result1, fp
37050     14 26 06 FB | 	rdlong	local01, #20
37054     01 26 46 F0 | 	shr	local01, #1
37058     04 4E 05 F1 | 	add	fp, #4
3705c     A7 26 62 FC | 	wrlong	local01, fp
37060     0C 4E 85 F1 | 	sub	fp, #12
37064                 | ' {
37064                 | ' 	BYTE d;
37064                 | ' 	UINT tmr, tmout;
37064                 | ' 
37064                 | ' 	tmr = _cnt();
37064                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
37064                 | ' 	for(;;) {
37064                 | LR__5370
37064     04 4E 05 F1 | 	add	fp, #4
37068     A7 12 02 F6 | 	mov	arg01, fp
3706c     04 4E 85 F1 | 	sub	fp, #4
37070     01 14 06 F6 | 	mov	arg02, #1
37074     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1210
37078     04 4E 05 F1 | 	add	fp, #4
3707c     A7 26 C2 FA | 	rdbyte	local01, fp
37080     04 4E 85 F1 | 	sub	fp, #4
37084     FF 26 0E F2 | 	cmp	local01, #255 wz
37088     01 FA 05 A6 |  if_e	mov	result1, #1
3708c     28 00 90 AD |  if_e	jmp	#LR__5371
37090     1A FA 61 FD | 	getct	result1
37094     08 4E 05 F1 | 	add	fp, #8
37098     A7 26 02 FB | 	rdlong	local01, fp
3709c     13 FB 81 F1 | 	sub	result1, local01
370a0     04 4E 05 F1 | 	add	fp, #4
370a4     A7 26 02 FB | 	rdlong	local01, fp
370a8     0C 4E 85 F1 | 	sub	fp, #12
370ac     13 FB 11 F2 | 	cmp	result1, local01 wc
370b0     00 FA 05 36 |  if_ae	mov	result1, #0
370b4     AC FF 9F CD |  if_b	jmp	#LR__5370
370b8                 | LR__5371
370b8     A7 F0 03 F6 | 	mov	ptra, fp
370bc     B2 00 A0 FD | 	call	#popregs_
370c0                 | _fatfs_cc_wait_ready_1214_ret
370c0     2D 00 64 FD | 	ret
370c4                 | 
370c4                 | _fatfs_cc_deselect_1220
370c4     00 4A 05 F6 | 	mov	COUNT_, #0
370c8     A8 00 A0 FD | 	call	#pushregs_
370cc     14 F0 07 F1 | 	add	ptra, #20
370d0     01 00 00 FF 
370d4     14 E4 05 F1 | 	add	objptr, ##532
370d8     F2 14 02 FB | 	rdlong	arg02, objptr
370dc     04 4E 05 F1 | 	add	fp, #4
370e0     A7 14 62 FC | 	wrlong	arg02, fp
370e4     04 E4 85 F1 | 	sub	objptr, #4
370e8     F2 14 02 FB | 	rdlong	arg02, objptr
370ec     04 4E 05 F1 | 	add	fp, #4
370f0     A7 14 62 FC | 	wrlong	arg02, fp
370f4     08 E4 05 F1 | 	add	objptr, #8
370f8     F2 14 02 FB | 	rdlong	arg02, objptr
370fc     04 4E 05 F1 | 	add	fp, #4
37100     A7 14 62 FC | 	wrlong	arg02, fp
37104     04 E4 05 F1 | 	add	objptr, #4
37108     F2 14 02 FB | 	rdlong	arg02, objptr
3710c     01 00 00 FF 
37110     1C E4 85 F1 | 	sub	objptr, ##540
37114     04 4E 05 F1 | 	add	fp, #4
37118     A7 14 62 FC | 	wrlong	arg02, fp
3711c     0C 4E 85 F1 | 	sub	fp, #12
37120     A7 12 02 FB | 	rdlong	arg01, fp
37124     04 4E 85 F1 | 	sub	fp, #4
37128     59 12 62 FD | 	drvh	arg01
3712c     1F 20 64 FD | 	waitx	#16
37130     A7 12 02 F6 | 	mov	arg01, fp
37134     01 14 06 F6 | 	mov	arg02, #1
37138     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1210
3713c     A7 F0 03 F6 | 	mov	ptra, fp
37140     B2 00 A0 FD | 	call	#popregs_
37144                 | _fatfs_cc_deselect_1220_ret
37144     2D 00 64 FD | 	ret
37148                 | 
37148                 | _fatfs_cc_select_1224
37148     00 4A 05 F6 | 	mov	COUNT_, #0
3714c     A8 00 A0 FD | 	call	#pushregs_
37150     10 F0 07 F1 | 	add	ptra, #16
37154     01 00 00 FF 
37158     14 E4 05 F1 | 	add	objptr, ##532
3715c     F2 14 02 FB | 	rdlong	arg02, objptr
37160     08 4E 05 F1 | 	add	fp, #8
37164     A7 14 62 FC | 	wrlong	arg02, fp
37168     08 E4 05 F1 | 	add	objptr, #8
3716c     F2 12 02 FB | 	rdlong	arg01, objptr
37170     01 00 00 FF 
37174     1C E4 85 F1 | 	sub	objptr, ##540
37178     04 4E 05 F1 | 	add	fp, #4
3717c     A7 12 62 FC | 	wrlong	arg01, fp
37180     50 12 62 FD | 	fltl	arg01
37184     04 4E 85 F1 | 	sub	fp, #4
37188     A7 12 02 FB | 	rdlong	arg01, fp
3718c     58 12 62 FD | 	drvl	arg01
37190     1F 20 64 FD | 	waitx	#16
37194     04 4E 05 F1 | 	add	fp, #4
37198     A7 12 02 FB | 	rdlong	arg01, fp
3719c     41 12 62 FD | 	dirh	arg01
371a0     08 4E 85 F1 | 	sub	fp, #8
371a4     A7 12 02 F6 | 	mov	arg01, fp
371a8     04 4E 85 F1 | 	sub	fp, #4
371ac     01 14 06 F6 | 	mov	arg02, #1
371b0     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1210
371b4     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1214
371b8     00 FA 0D F2 | 	cmp	result1, #0 wz
371bc     01 FA 05 56 |  if_ne	mov	result1, #1
371c0     08 00 90 5D |  if_ne	jmp	#LR__5380
371c4     FC FE BF FD | 	call	#_fatfs_cc_deselect_1220
371c8                 | ' 
371c8                 | ' 	deselect();
371c8                 | ' 	return 0;
371c8     00 FA 05 F6 | 	mov	result1, #0
371cc                 | LR__5380
371cc     A7 F0 03 F6 | 	mov	ptra, fp
371d0     B2 00 A0 FD | 	call	#popregs_
371d4                 | _fatfs_cc_select_1224_ret
371d4     2D 00 64 FD | 	ret
371d8                 | 
371d8                 | _fatfs_cc_rcvr_datablock_1228
371d8     01 4A 05 F6 | 	mov	COUNT_, #1
371dc     A8 00 A0 FD | 	call	#pushregs_
371e0     18 F0 07 F1 | 	add	ptra, #24
371e4     04 4E 05 F1 | 	add	fp, #4
371e8     A7 12 62 FC | 	wrlong	arg01, fp
371ec     04 4E 05 F1 | 	add	fp, #4
371f0     A7 14 62 FC | 	wrlong	arg02, fp
371f4     1A FA 61 FD | 	getct	result1
371f8     08 4E 05 F1 | 	add	fp, #8
371fc     A7 FA 61 FC | 	wrlong	result1, fp
37200     14 26 06 FB | 	rdlong	local01, #20
37204     03 26 46 F0 | 	shr	local01, #3
37208     04 4E 05 F1 | 	add	fp, #4
3720c     A7 26 62 FC | 	wrlong	local01, fp
37210     14 4E 85 F1 | 	sub	fp, #20
37214                 | ' 	BYTE *buff,
37214                 | ' 	UINT btr
37214                 | ' )
37214                 | ' {
37214                 | ' 	BYTE d[2];
37214                 | ' 	UINT tmr, tmout;
37214                 | ' 
37214                 | ' 	tmr = _cnt();
37214                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
37214                 | ' 	for(;;) {
37214                 | LR__5390
37214     0C 4E 05 F1 | 	add	fp, #12
37218     A7 12 02 F6 | 	mov	arg01, fp
3721c     0C 4E 85 F1 | 	sub	fp, #12
37220     01 14 06 F6 | 	mov	arg02, #1
37224     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1210
37228     0C 4E 05 F1 | 	add	fp, #12
3722c     A7 26 C2 FA | 	rdbyte	local01, fp
37230     0C 4E 85 F1 | 	sub	fp, #12
37234     FF 26 0E F2 | 	cmp	local01, #255 wz
37238     28 00 90 5D |  if_ne	jmp	#LR__5391
3723c     1A FA 61 FD | 	getct	result1
37240     FD 26 02 F6 | 	mov	local01, result1
37244     10 4E 05 F1 | 	add	fp, #16
37248     A7 14 02 FB | 	rdlong	arg02, fp
3724c     0A 27 82 F1 | 	sub	local01, arg02
37250     04 4E 05 F1 | 	add	fp, #4
37254     A7 14 02 FB | 	rdlong	arg02, fp
37258     14 4E 85 F1 | 	sub	fp, #20
3725c     0A 27 12 F2 | 	cmp	local01, arg02 wc
37260     B0 FF 9F CD |  if_b	jmp	#LR__5390
37264                 | LR__5391
37264     0C 4E 05 F1 | 	add	fp, #12
37268     A7 26 C2 FA | 	rdbyte	local01, fp
3726c     0C 4E 85 F1 | 	sub	fp, #12
37270     FE 26 0E F2 | 	cmp	local01, #254 wz
37274     00 FA 05 56 |  if_ne	mov	result1, #0
37278     30 00 90 5D |  if_ne	jmp	#LR__5392
3727c     04 4E 05 F1 | 	add	fp, #4
37280     A7 12 02 FB | 	rdlong	arg01, fp
37284     04 4E 05 F1 | 	add	fp, #4
37288     A7 14 02 FB | 	rdlong	arg02, fp
3728c     08 4E 85 F1 | 	sub	fp, #8
37290     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1210
37294     0C 4E 05 F1 | 	add	fp, #12
37298     A7 12 02 F6 | 	mov	arg01, fp
3729c     0C 4E 85 F1 | 	sub	fp, #12
372a0     02 14 06 F6 | 	mov	arg02, #2
372a4     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1210
372a8                 | ' 
372a8                 | ' 	rcvr_mmc(buff, btr);
372a8                 | ' 	rcvr_mmc(d, 2);
372a8                 | ' 
372a8                 | ' 	return 1;
372a8     01 FA 05 F6 | 	mov	result1, #1
372ac                 | LR__5392
372ac     A7 F0 03 F6 | 	mov	ptra, fp
372b0     B2 00 A0 FD | 	call	#popregs_
372b4                 | _fatfs_cc_rcvr_datablock_1228_ret
372b4     2D 00 64 FD | 	ret
372b8                 | 
372b8                 | _fatfs_cc_xmit_datablock_1230
372b8     00 4A 05 F6 | 	mov	COUNT_, #0
372bc     A8 00 A0 FD | 	call	#pushregs_
372c0     10 F0 07 F1 | 	add	ptra, #16
372c4     04 4E 05 F1 | 	add	fp, #4
372c8     A7 12 62 FC | 	wrlong	arg01, fp
372cc     04 4E 05 F1 | 	add	fp, #4
372d0     A7 14 42 FC | 	wrbyte	arg02, fp
372d4     08 4E 85 F1 | 	sub	fp, #8
372d8     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1214
372dc     00 FA 0D F2 | 	cmp	result1, #0 wz
372e0     00 FA 05 A6 |  if_e	mov	result1, #0
372e4     90 00 90 AD |  if_e	jmp	#LR__5401
372e8     08 4E 05 F1 | 	add	fp, #8
372ec     A7 14 C2 FA | 	rdbyte	arg02, fp
372f0     04 4E 05 F1 | 	add	fp, #4
372f4     A7 14 42 FC | 	wrbyte	arg02, fp
372f8     A7 12 02 F6 | 	mov	arg01, fp
372fc     0C 4E 85 F1 | 	sub	fp, #12
37300     01 14 06 F6 | 	mov	arg02, #1
37304     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1203
37308     08 4E 05 F1 | 	add	fp, #8
3730c     A7 14 C2 FA | 	rdbyte	arg02, fp
37310     08 4E 85 F1 | 	sub	fp, #8
37314     FD 14 0E F2 | 	cmp	arg02, #253 wz
37318     58 00 90 AD |  if_e	jmp	#LR__5400
3731c     04 4E 05 F1 | 	add	fp, #4
37320     A7 12 02 FB | 	rdlong	arg01, fp
37324     04 4E 85 F1 | 	sub	fp, #4
37328     09 14 C6 F9 | 	decod	arg02, #9
3732c     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1203
37330     0C 4E 05 F1 | 	add	fp, #12
37334     A7 12 02 F6 | 	mov	arg01, fp
37338     0C 4E 85 F1 | 	sub	fp, #12
3733c     02 14 06 F6 | 	mov	arg02, #2
37340     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1210
37344     0C 4E 05 F1 | 	add	fp, #12
37348     A7 12 02 F6 | 	mov	arg01, fp
3734c     0C 4E 85 F1 | 	sub	fp, #12
37350     01 14 06 F6 | 	mov	arg02, #1
37354     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1210
37358     0C 4E 05 F1 | 	add	fp, #12
3735c     A7 14 C2 FA | 	rdbyte	arg02, fp
37360     0C 4E 85 F1 | 	sub	fp, #12
37364     1F 14 06 F5 | 	and	arg02, #31
37368     05 14 0E F2 | 	cmp	arg02, #5 wz
3736c                 | ' 			return 0;
3736c     00 FA 05 56 |  if_ne	mov	result1, #0
37370     04 00 90 5D |  if_ne	jmp	#LR__5401
37374                 | LR__5400
37374                 | ' 	}
37374                 | ' 
37374                 | ' 	return 1;
37374     01 FA 05 F6 | 	mov	result1, #1
37378                 | LR__5401
37378     A7 F0 03 F6 | 	mov	ptra, fp
3737c     B2 00 A0 FD | 	call	#popregs_
37380                 | _fatfs_cc_xmit_datablock_1230_ret
37380     2D 00 64 FD | 	ret
37384                 | 
37384                 | _fatfs_cc_send_cmd_1234
37384     01 4A 05 F6 | 	mov	COUNT_, #1
37388     A8 00 A0 FD | 	call	#pushregs_
3738c     1C F0 07 F1 | 	add	ptra, #28
37390                 | _fatfs_cc_send_cmd_1234_enter
37390     04 4E 05 F1 | 	add	fp, #4
37394     A7 12 42 FC | 	wrbyte	arg01, fp
37398     04 4E 05 F1 | 	add	fp, #4
3739c     A7 14 62 FC | 	wrlong	arg02, fp
373a0     04 4E 85 F1 | 	sub	fp, #4
373a4     A7 FA C1 FA | 	rdbyte	result1, fp
373a8     04 4E 85 F1 | 	sub	fp, #4
373ac     80 FA CD F7 | 	test	result1, #128 wz
373b0     44 00 90 AD |  if_e	jmp	#LR__5410
373b4     04 4E 05 F1 | 	add	fp, #4
373b8     A7 14 C2 FA | 	rdbyte	arg02, fp
373bc     7F 14 06 F5 | 	and	arg02, #127
373c0     A7 14 42 FC | 	wrbyte	arg02, fp
373c4     04 4E 85 F1 | 	sub	fp, #4
373c8     37 12 06 F6 | 	mov	arg01, #55
373cc     00 14 06 F6 | 	mov	arg02, #0
373d0     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1234
373d4     0C 4E 05 F1 | 	add	fp, #12
373d8     A7 FA 41 FC | 	wrbyte	result1, fp
373dc     A7 14 C2 FA | 	rdbyte	arg02, fp
373e0     0C 4E 85 F1 | 	sub	fp, #12
373e4     02 14 16 F2 | 	cmp	arg02, #2 wc
373e8     0C 4E 05 31 |  if_ae	add	fp, #12
373ec     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
373f0     0C 4E 85 31 |  if_ae	sub	fp, #12
373f4     6C 01 90 3D |  if_ae	jmp	#LR__5414
373f8                 | LR__5410
373f8     04 4E 05 F1 | 	add	fp, #4
373fc     A7 14 C2 FA | 	rdbyte	arg02, fp
37400     04 4E 85 F1 | 	sub	fp, #4
37404     0C 14 0E F2 | 	cmp	arg02, #12 wz
37408     14 00 90 AD |  if_e	jmp	#LR__5411
3740c     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1220
37410     34 FD BF FD | 	call	#_fatfs_cc_select_1224
37414     00 FA 0D F2 | 	cmp	result1, #0 wz
37418     FF FA 05 A6 |  if_e	mov	result1, #255
3741c     44 01 90 AD |  if_e	jmp	#LR__5414
37420                 | LR__5411
37420     04 4E 05 F1 | 	add	fp, #4
37424     A7 14 C2 FA | 	rdbyte	arg02, fp
37428     40 FA 05 F6 | 	mov	result1, #64
3742c     0A FB 41 F5 | 	or	result1, arg02
37430     10 4E 05 F1 | 	add	fp, #16
37434     A7 FA 41 FC | 	wrbyte	result1, fp
37438     0C 4E 85 F1 | 	sub	fp, #12
3743c     A7 FA 01 FB | 	rdlong	result1, fp
37440     18 FA 45 F0 | 	shr	result1, #24
37444     0D 4E 05 F1 | 	add	fp, #13
37448     A7 FA 41 FC | 	wrbyte	result1, fp
3744c     0D 4E 85 F1 | 	sub	fp, #13
37450     A7 FA 01 FB | 	rdlong	result1, fp
37454     10 FA 45 F0 | 	shr	result1, #16
37458     0E 4E 05 F1 | 	add	fp, #14
3745c     A7 FA 41 FC | 	wrbyte	result1, fp
37460     0E 4E 85 F1 | 	sub	fp, #14
37464     A7 FA 01 FB | 	rdlong	result1, fp
37468     08 FA 45 F0 | 	shr	result1, #8
3746c     0F 4E 05 F1 | 	add	fp, #15
37470     A7 FA 41 FC | 	wrbyte	result1, fp
37474     0F 4E 85 F1 | 	sub	fp, #15
37478     A7 FA 01 FB | 	rdlong	result1, fp
3747c     10 4E 05 F1 | 	add	fp, #16
37480     A7 FA 41 FC | 	wrbyte	result1, fp
37484     0C 4E 85 F1 | 	sub	fp, #12
37488     A7 02 48 FC | 	wrbyte	#1, fp
3748c     08 4E 85 F1 | 	sub	fp, #8
37490     A7 FA C9 FA | 	rdbyte	result1, fp wz
37494     04 4E 85 F1 | 	sub	fp, #4
37498     0C 4E 05 A1 |  if_e	add	fp, #12
3749c     A7 2A 49 AC |  if_e	wrbyte	#149, fp
374a0     0C 4E 85 A1 |  if_e	sub	fp, #12
374a4     04 4E 05 F1 | 	add	fp, #4
374a8     A7 FA C1 FA | 	rdbyte	result1, fp
374ac     04 4E 85 F1 | 	sub	fp, #4
374b0     08 FA 0D F2 | 	cmp	result1, #8 wz
374b4     0C 4E 05 A1 |  if_e	add	fp, #12
374b8     A7 0E 49 AC |  if_e	wrbyte	#135, fp
374bc     0C 4E 85 A1 |  if_e	sub	fp, #12
374c0     0C 4E 05 F1 | 	add	fp, #12
374c4     A7 14 C2 FA | 	rdbyte	arg02, fp
374c8     0D 4E 05 F1 | 	add	fp, #13
374cc     A7 14 42 FC | 	wrbyte	arg02, fp
374d0     05 4E 85 F1 | 	sub	fp, #5
374d4     A7 12 02 F6 | 	mov	arg01, fp
374d8     14 4E 85 F1 | 	sub	fp, #20
374dc     06 14 06 F6 | 	mov	arg02, #6
374e0     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1203
374e4     04 4E 05 F1 | 	add	fp, #4
374e8     A7 26 C2 FA | 	rdbyte	local01, fp
374ec     04 4E 85 F1 | 	sub	fp, #4
374f0     0C 26 0E F2 | 	cmp	local01, #12 wz
374f4     10 4E 05 A1 |  if_e	add	fp, #16
374f8     A7 12 02 A6 |  if_e	mov	arg01, fp
374fc     10 4E 85 A1 |  if_e	sub	fp, #16
37500     01 14 06 A6 |  if_e	mov	arg02, #1
37504     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1210
37508     0C 4E 05 F1 | 	add	fp, #12
3750c     A7 14 48 FC | 	wrbyte	#10, fp
37510     0C 4E 85 F1 | 	sub	fp, #12
37514                 | ' 	n = 10;
37514                 | ' 	do
37514                 | LR__5412
37514     10 4E 05 F1 | 	add	fp, #16
37518     A7 12 02 F6 | 	mov	arg01, fp
3751c     10 4E 85 F1 | 	sub	fp, #16
37520     01 14 06 F6 | 	mov	arg02, #1
37524     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1210
37528     10 4E 05 F1 | 	add	fp, #16
3752c     A7 26 C2 FA | 	rdbyte	local01, fp
37530     10 4E 85 F1 | 	sub	fp, #16
37534     80 26 CE F7 | 	test	local01, #128 wz
37538     1C 00 90 AD |  if_e	jmp	#LR__5413
3753c     0C 4E 05 F1 | 	add	fp, #12
37540     A7 26 C2 FA | 	rdbyte	local01, fp
37544     01 26 86 F1 | 	sub	local01, #1
37548     A7 26 42 FC | 	wrbyte	local01, fp
3754c     A7 26 CA FA | 	rdbyte	local01, fp wz
37550     0C 4E 85 F1 | 	sub	fp, #12
37554     BC FF 9F 5D |  if_ne	jmp	#LR__5412
37558                 | LR__5413
37558                 | ' 
37558                 | ' 	return d;
37558     10 4E 05 F1 | 	add	fp, #16
3755c     A7 FA C1 FA | 	rdbyte	result1, fp
37560     10 4E 85 F1 | 	sub	fp, #16
37564                 | LR__5414
37564     A7 F0 03 F6 | 	mov	ptra, fp
37568     B2 00 A0 FD | 	call	#popregs_
3756c                 | _fatfs_cc_send_cmd_1234_ret
3756c     2D 00 64 FD | 	ret
37570                 | 
37570                 | _fatfs_cc_disk_deinitialize
37570     03 4A 05 F6 | 	mov	COUNT_, #3
37574     A8 00 A0 FD | 	call	#pushregs_
37578     00 12 4E F2 | 	cmps	arg01, #0 wz
3757c     01 00 00 FF 
37580     14 E4 05 F1 | 	add	objptr, ##532
37584     F2 12 02 FB | 	rdlong	arg01, objptr
37588     04 E4 85 F1 | 	sub	objptr, #4
3758c     F2 26 02 FB | 	rdlong	local01, objptr
37590     08 E4 05 F1 | 	add	objptr, #8
37594     F2 28 02 FB | 	rdlong	local02, objptr
37598     04 E4 05 F1 | 	add	objptr, #4
3759c     F2 2A 02 FB | 	rdlong	local03, objptr
375a0     01 00 00 FF 
375a4     1C E4 85 F1 | 	sub	objptr, ##540
375a8                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/sdmm.cc"
375a8                 | '         return RES_NOTRDY;
375a8     03 FA 05 56 |  if_ne	mov	result1, #3
375ac     2C 00 90 5D |  if_ne	jmp	#LR__5420
375b0     50 12 62 FD | 	fltl	arg01
375b4     09 01 08 FC | 	wrpin	#0, arg01
375b8     50 26 62 FD | 	fltl	local01
375bc     13 01 08 FC | 	wrpin	#0, local01
375c0     50 28 62 FD | 	fltl	local02
375c4     14 01 08 FC | 	wrpin	#0, local02
375c8     50 2A 62 FD | 	fltl	local03
375cc     15 01 08 FC | 	wrpin	#0, local03
375d0     0A 12 06 F6 | 	mov	arg01, #10
375d4     30 0E BF FD | 	call	#__system___waitms
375d8                 | '     }
375d8                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/sdmm.cc"
375d8                 | '     _pinclear(PIN_SS);
375d8                 | '     _pinclear(PIN_CLK);
375d8                 | '     _pinclear(PIN_DI);
375d8                 | '     _pinclear(PIN_DO);
375d8                 | ' 
375d8                 | '     _waitms(10);
375d8                 | ' 
375d8                 | '     return 0;
375d8     00 FA 05 F6 | 	mov	result1, #0
375dc                 | LR__5420
375dc     A7 F0 03 F6 | 	mov	ptra, fp
375e0     B2 00 A0 FD | 	call	#popregs_
375e4                 | _fatfs_cc_disk_deinitialize_ret
375e4     2D 00 64 FD | 	ret
375e8                 | 
375e8                 | _fatfs_cc_gettimeofday
375e8     04 4A 05 F6 | 	mov	COUNT_, #4
375ec     A8 00 A0 FD | 	call	#pushregs_
375f0     09 27 02 F6 | 	mov	local01, arg01
375f4     7C 09 BF FD | 	call	#__system___getus
375f8     FD 12 02 F6 | 	mov	arg01, result1
375fc     02 00 00 FF 
37600     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
37604     F6 28 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
37608     09 FB 01 F6 | 	mov	result1, arg01
3760c     14 FB 81 F1 | 	sub	result1, local02
37610     A1 07 00 FF 
37614     40 FA 15 FD | 	qdiv	result1, ##1000000
37618     02 00 00 FF 
3761c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
37620     18 28 62 FD | 	getqx	local02
37624     A1 07 00 FF 
37628     40 FA 15 FD | 	qdiv	result1, ##1000000
3762c     00 28 0E F2 | 	cmp	local02, #0 wz
37630     19 2A 62 FD | 	getqy	local03
37634     28 00 90 AD |  if_e	jmp	#LR__5430
37638     02 00 00 FF 
3763c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
37640     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
37644     14 2D 02 F1 | 	add	local04, local02
37648     F6 2C 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
3764c     15 13 82 F1 | 	sub	arg01, local03
37650     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
37654     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
37658     02 00 00 FF 
3765c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
37660                 | LR__5430
37660     02 00 00 FF 
37664     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
37668     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
3766c     02 00 00 FF 
37670     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
37674     13 2D 62 FC | 	wrlong	local04, local01
37678     04 26 06 F1 | 	add	local01, #4
3767c     13 2B 62 FC | 	wrlong	local03, local01
37680                 | '         lastsec += secs;
37680                 | '         lastus = now - leftover;
37680                 | '     }
37680                 | '     tv->tv_sec = lastsec;
37680                 | '     tv->tv_usec = leftover;
37680                 | '     return 0;
37680     00 FA 05 F6 | 	mov	result1, #0
37684     A7 F0 03 F6 | 	mov	ptra, fp
37688     B2 00 A0 FD | 	call	#popregs_
3768c                 | _fatfs_cc_gettimeofday_ret
3768c     2D 00 64 FD | 	ret
37690                 | 
37690                 | _fatfs_cc__is_leap_year
37690     09 FB 51 F6 | 	abs	result1, arg01 wc
37694     03 FA 05 F5 | 	and	result1, #3
37698     FD FA 89 F6 | 	negc	result1, result1 wz
3769c     38 00 90 5D |  if_ne	jmp	#LR__5441
376a0     09 FB 51 F6 | 	abs	result1, arg01 wc
376a4     64 FA 15 FD | 	qdiv	result1, #100
376a8     19 FA 61 FD | 	getqy	result1
376ac     FD FA 89 F6 | 	negc	result1, result1 wz
376b0     1C 00 90 5D |  if_ne	jmp	#LR__5440
376b4     09 FB 51 F6 | 	abs	result1, arg01 wc
376b8     90 FB 15 FD | 	qdiv	result1, #400
376bc                 | '       return (0 == y % 400);
376bc     00 FA 05 F6 | 	mov	result1, #0
376c0     19 00 62 FD | 	getqy	_var01
376c4     00 01 8A F6 | 	negc	_var01, _var01 wz
376c8     01 FA 05 A6 |  if_e	mov	result1, #1
376cc     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
376d0                 | LR__5440
376d0                 | '     return 1;
376d0     01 FA 05 F6 | 	mov	result1, #1
376d4     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
376d8                 | LR__5441
376d8                 | '   }
376d8                 | '   return 0;
376d8     00 FA 05 F6 | 	mov	result1, #0
376dc                 | _fatfs_cc__is_leap_year_ret
376dc     2D 00 64 FD | 	ret
376e0                 | 
376e0                 | _fatfs_cc___tzoffset
376e0     09 01 0A F6 | 	mov	_var01, arg01 wz
376e4     FF FF FF FF 
376e8     0A FF 6B FC | 	wrlong	##-1, arg02
376ec     01 02 06 F6 | 	mov	_var02, #1
376f0     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
376f4                 | '                 return 0;
376f4     00 FA 05 A6 |  if_e	mov	result1, #0
376f8     94 02 90 AD |  if_e	jmp	#LR__5467
376fc     0A 01 68 FC | 	wrlong	#0, arg02
37700     02 00 00 FF 
37704     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
37708     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
3770c                 | ' 
3770c                 | '        *hasdst = 0;
3770c                 | ' 
3770c                 | ' 	n = stdname;
3770c                 | '         while (*s && isalpha(*s)) {
3770c     02 00 00 FF 
37710     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
37714     97 28 48 FB | 	callpa	#(@LR__5451-@LR__5450)>>2,fcache_load_ptr_
37718                 | LR__5450
37718     00 05 CA FA | 	rdbyte	_var03, _var01 wz
3771c     48 00 90 AD |  if_e	jmp	#LR__5452
37720     00 13 C2 FA | 	rdbyte	arg01, _var01
37724                 | ' {
37724                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
37724     80 12 36 F3 | 	fle	arg01, #128 wc
37728                 | '     return __ctype[c];
37728     02 00 00 FF 
3772c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
37730     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
37734     09 FB C1 FA | 	rdbyte	result1, arg01
37738     02 00 00 FF 
3773c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
37740     0C FA CD F7 | 	test	result1, #12 wz
37744     20 00 90 AD |  if_e	jmp	#LR__5452
37748     00 09 02 F6 | 	mov	_var05, _var01
3774c     00 0B 02 F6 | 	mov	_var06, _var01
37750     01 0A 06 F1 | 	add	_var06, #1
37754     04 0D C2 FA | 	rdbyte	_var07, _var05
37758     05 01 02 F6 | 	mov	_var01, _var06
3775c     03 0D 42 FC | 	wrbyte	_var07, _var04
37760     01 06 06 F1 | 	add	_var04, #1
37764     B0 FF 9F FD | 	jmp	#LR__5450
37768                 | LR__5451
37768                 | LR__5452
37768     03 01 48 FC | 	wrbyte	#0, _var04
3776c     00 0E 06 F6 | 	mov	_var08, #0
37770     00 05 C2 FA | 	rdbyte	_var03, _var01
37774     2D 04 0E F2 | 	cmp	_var03, #45 wz
37778     01 02 66 A6 |  if_e	neg	_var02, #1
3777c     01 00 06 A1 |  if_e	add	_var01, #1
37780     97 28 48 FB | 	callpa	#(@LR__5454-@LR__5453)>>2,fcache_load_ptr_
37784                 | '                 sgn = -1;
37784                 | '                 s++;
37784                 | '         }
37784                 | '         while (isdigit(*s)) {
37784                 | LR__5453
37784     00 13 C2 FA | 	rdbyte	arg01, _var01
37788                 | ' {
37788                 | '   return  (__ctype_get(c) & 0x02 ) ;
37788     80 12 36 F3 | 	fle	arg01, #128 wc
3778c                 | '     return __ctype[c];
3778c     02 00 00 FF 
37790     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
37794     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
37798     09 FB C1 FA | 	rdbyte	result1, arg01
3779c     02 00 00 FF 
377a0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
377a4     02 FA CD F7 | 	test	result1, #2 wz
377a8     28 00 90 AD |  if_e	jmp	#LR__5455
377ac     07 05 02 F6 | 	mov	_var03, _var08
377b0     02 04 66 F0 | 	shl	_var03, #2
377b4     07 05 02 F1 | 	add	_var03, _var08
377b8     01 04 66 F0 | 	shl	_var03, #1
377bc     00 09 C2 FA | 	rdbyte	_var05, _var01
377c0     30 08 86 F1 | 	sub	_var05, #48
377c4     04 05 02 F1 | 	add	_var03, _var05
377c8     02 0F 02 F6 | 	mov	_var08, _var03
377cc     01 00 06 F1 | 	add	_var01, #1
377d0     B0 FF 9F FD | 	jmp	#LR__5453
377d4                 | LR__5454
377d4                 | LR__5455
377d4     07 00 00 FF 
377d8     10 0E 06 FD | 	qmul	_var08, ##3600
377dc     00 05 C2 FA | 	rdbyte	_var03, _var01
377e0     3A 04 0E F2 | 	cmp	_var03, #58 wz
377e4     18 10 62 FD | 	getqx	_var09
377e8     70 00 90 5D |  if_ne	jmp	#LR__5459
377ec     00 0E 06 F6 | 	mov	_var08, #0
377f0     01 00 06 F1 | 	add	_var01, #1
377f4     97 28 48 FB | 	callpa	#(@LR__5457-@LR__5456)>>2,fcache_load_ptr_
377f8                 | '                 x = 0;
377f8                 | '                 s++;
377f8                 | '                 while (isdigit(*s)) {
377f8                 | LR__5456
377f8     00 13 C2 FA | 	rdbyte	arg01, _var01
377fc                 | ' {
377fc                 | '   return  (__ctype_get(c) & 0x02 ) ;
377fc     80 12 36 F3 | 	fle	arg01, #128 wc
37800                 | '     return __ctype[c];
37800     02 00 00 FF 
37804     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
37808     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
3780c     09 FB C1 FA | 	rdbyte	result1, arg01
37810     02 00 00 FF 
37814     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
37818     02 FA CD F7 | 	test	result1, #2 wz
3781c     28 00 90 AD |  if_e	jmp	#LR__5458
37820     07 05 02 F6 | 	mov	_var03, _var08
37824     02 04 66 F0 | 	shl	_var03, #2
37828     07 05 02 F1 | 	add	_var03, _var08
3782c     01 04 66 F0 | 	shl	_var03, #1
37830     00 09 C2 FA | 	rdbyte	_var05, _var01
37834     30 08 86 F1 | 	sub	_var05, #48
37838     04 05 02 F1 | 	add	_var03, _var05
3783c     02 0F 02 F6 | 	mov	_var08, _var03
37840     01 00 06 F1 | 	add	_var01, #1
37844     B0 FF 9F FD | 	jmp	#LR__5456
37848                 | LR__5457
37848                 | LR__5458
37848     07 0D 02 F6 | 	mov	_var07, _var08
3784c     04 0C 66 F0 | 	shl	_var07, #4
37850     07 0D 82 F1 | 	sub	_var07, _var08
37854     02 0C 66 F0 | 	shl	_var07, #2
37858     06 11 02 F1 | 	add	_var09, _var07
3785c                 | LR__5459
3785c     02 00 00 FF 
37860     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
37864     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
37868     00 13 C2 FA | 	rdbyte	arg01, _var01
3786c                 | ' {
3786c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
3786c     80 12 36 F3 | 	fle	arg01, #128 wc
37870                 | '     return __ctype[c];
37870     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
37874     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
37878     09 FB C1 FA | 	rdbyte	result1, arg01
3787c     02 00 00 FF 
37880     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
37884     0C FA CD F7 | 	test	result1, #12 wz
37888     50 00 90 AD |  if_e	jmp	#LR__5462
3788c     0A 03 68 FC | 	wrlong	#1, arg02
37890                 | '                 *hasdst = 1;
37890                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
37890                 | LR__5460
37890     00 05 CA FA | 	rdbyte	_var03, _var01 wz
37894     44 00 90 AD |  if_e	jmp	#LR__5461
37898     00 13 C2 FA | 	rdbyte	arg01, _var01
3789c                 | ' {
3789c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
3789c     80 12 36 F3 | 	fle	arg01, #128 wc
378a0                 | '     return __ctype[c];
378a0     02 00 00 FF 
378a4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
378a8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
378ac     09 FB C1 FA | 	rdbyte	result1, arg01
378b0     02 00 00 FF 
378b4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
378b8     0C FA CD F7 | 	test	result1, #12 wz
378bc     1C 00 90 AD |  if_e	jmp	#LR__5461
378c0     00 0B 02 F6 | 	mov	_var06, _var01
378c4     01 0A 06 F1 | 	add	_var06, #1
378c8     00 0D C2 FA | 	rdbyte	_var07, _var01
378cc     05 01 02 F6 | 	mov	_var01, _var06
378d0     03 0D 42 FC | 	wrbyte	_var07, _var04
378d4     01 06 06 F1 | 	add	_var04, #1
378d8     B4 FF 9F FD | 	jmp	#LR__5460
378dc                 | LR__5461
378dc                 | LR__5462
378dc     03 01 48 FC | 	wrbyte	#0, _var04
378e0     02 00 00 FF 
378e4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
378e8     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
378ec     02 00 00 FF 
378f0     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
378f4     20 00 90 AD |  if_e	jmp	#LR__5463
378f8     02 00 00 FF 
378fc     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
37900     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
37904     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
37908     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
3790c     02 00 00 FF 
37910     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
37914     1C 00 90 FD | 	jmp	#LR__5464
37918                 | LR__5463
37918     02 00 00 FF 
3791c     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
37920     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
37924     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
37928     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
3792c     02 00 00 FF 
37930     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
37934                 | LR__5464
37934     02 00 00 FF 
37938     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
3793c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
37940     02 00 00 FF 
37944     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
37948     20 00 90 AD |  if_e	jmp	#LR__5465
3794c     02 00 00 FF 
37950     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
37954     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
37958     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
3795c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
37960     02 00 00 FF 
37964     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
37968     1C 00 90 FD | 	jmp	#LR__5466
3796c                 | LR__5465
3796c     02 00 00 FF 
37970     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
37974     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
37978     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
3797c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
37980     02 00 00 FF 
37984     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
37988                 | LR__5466
37988     08 03 02 FD | 	qmul	_var02, _var09
3798c                 | ' 		_tzname[1] = stdname;
3798c                 | ' 
3798c                 | '         return sgn * off;
3798c     18 FA 61 FD | 	getqx	result1
37990                 | LR__5467
37990                 | _fatfs_cc___tzoffset_ret
37990     2D 00 64 FD | 	ret
37994                 | 
37994                 | _fatfs_cc___indst
37994     10 12 06 F1 | 	add	arg01, #16
37998     09 01 02 FB | 	rdlong	_var01, arg01
3799c     10 12 86 F1 | 	sub	arg01, #16
379a0     02 00 0E F2 | 	cmp	_var01, #2 wz
379a4     30 00 90 5D |  if_ne	jmp	#LR__5470
379a8     07 00 06 F6 | 	mov	_var01, #7
379ac     18 12 06 F1 | 	add	arg01, #24
379b0     09 03 02 FB | 	rdlong	_var02, arg01
379b4     01 01 02 F1 | 	add	_var01, _var02
379b8     0C 12 86 F1 | 	sub	arg01, #12
379bc     09 05 02 FB | 	rdlong	_var03, arg01
379c0     02 01 82 F1 | 	sub	_var01, _var03
379c4     00 00 56 F2 | 	cmps	_var01, #0 wc
379c8                 | '                         return 1;
379c8     01 FA 05 C6 |  if_b	mov	result1, #1
379cc     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
379d0                 | '                 return 0;
379d0     00 FA 05 F6 | 	mov	result1, #0
379d4     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
379d8                 | LR__5470
379d8     10 12 06 F1 | 	add	arg01, #16
379dc     09 01 02 FB | 	rdlong	_var01, arg01
379e0     10 12 86 F1 | 	sub	arg01, #16
379e4     0A 00 0E F2 | 	cmp	_var01, #10 wz
379e8     28 00 90 5D |  if_ne	jmp	#LR__5471
379ec     18 12 06 F1 | 	add	arg01, #24
379f0     09 01 02 FB | 	rdlong	_var01, arg01
379f4     0C 12 86 F1 | 	sub	arg01, #12
379f8     09 07 02 FB | 	rdlong	_var04, arg01
379fc     03 01 82 F1 | 	sub	_var01, _var04
37a00     00 00 56 F2 | 	cmps	_var01, #0 wc
37a04                 | '                         return 0;
37a04     00 FA 05 C6 |  if_b	mov	result1, #0
37a08     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
37a0c                 | '                 return 1;
37a0c     01 FA 05 F6 | 	mov	result1, #1
37a10     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
37a14                 | LR__5471
37a14                 | '         }
37a14                 | ' 
37a14                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
37a14     00 00 06 F6 | 	mov	_var01, #0
37a18     10 12 06 F1 | 	add	arg01, #16
37a1c     09 03 02 FB | 	rdlong	_var02, arg01
37a20     10 12 86 F1 | 	sub	arg01, #16
37a24     03 02 56 F2 | 	cmps	_var02, #3 wc
37a28     10 00 90 CD |  if_b	jmp	#LR__5472
37a2c     10 12 06 F1 | 	add	arg01, #16
37a30     09 05 02 FB | 	rdlong	_var03, arg01
37a34     0A 04 56 F2 | 	cmps	_var03, #10 wc
37a38     01 00 06 C6 |  if_b	mov	_var01, #1
37a3c                 | LR__5472
37a3c     00 FB 01 F6 | 	mov	result1, _var01
37a40                 | _fatfs_cc___indst_ret
37a40     2D 00 64 FD | 	ret
37a44                 | 
37a44                 | ' 	
37a44                 | ' 	FUNCTION pfunc(c as integer) as integer
37a44                 | __system____strs_cl_pfunc_
37a44                 | ' 		if (i < 16) then
37a44     04 E4 05 F1 | 	add	objptr, #4
37a48     F2 FA 01 FB | 	rdlong	result1, objptr
37a4c     04 E4 85 F1 | 	sub	objptr, #4
37a50     10 FA 55 F2 | 	cmps	result1, #16 wc
37a54     2C 00 90 3D |  if_ae	jmp	#LR__5480
37a58     F2 FA 01 FB | 	rdlong	result1, objptr
37a5c     04 E4 05 F1 | 	add	objptr, #4
37a60     F2 00 02 FB | 	rdlong	_var01, objptr
37a64     FD 00 02 F1 | 	add	_var01, result1
37a68     00 13 42 FC | 	wrbyte	arg01, _var01
37a6c     F2 FA 01 FB | 	rdlong	result1, objptr
37a70     01 FA 05 F1 | 	add	result1, #1
37a74     F2 FA 61 FC | 	wrlong	result1, objptr
37a78     04 E4 85 F1 | 	sub	objptr, #4
37a7c                 | ' 			p(i) = c
37a7c                 | ' 			i = i+1
37a7c                 | ' 			return 1
37a7c     01 FA 05 F6 | 	mov	result1, #1
37a80     04 00 90 FD | 	jmp	#__system____strs_cl_pfunc__ret
37a84                 | LR__5480
37a84                 | ' 			return -1
37a84     01 FA 65 F6 | 	neg	result1, #1
37a88                 | __system____strs_cl_pfunc__ret
37a88     2D 00 64 FD | 	ret
37a8c                 | 
37a8c                 | __system___struct__s_vfs_file_t_putchar_
37a8c     04 4A 05 F6 | 	mov	COUNT_, #4
37a90     A8 00 A0 FD | 	call	#pushregs_
37a94     1C E4 05 F1 | 	add	objptr, #28
37a98     F2 26 0A FB | 	rdlong	local01, objptr wz
37a9c     1C E4 85 F1 | 	sub	objptr, #28
37aa0     00 FA 05 A6 |  if_e	mov	result1, #0
37aa4     48 00 90 AD |  if_e	jmp	#LR__5490
37aa8     1C E4 05 F1 | 	add	objptr, #28
37aac     F2 28 02 FB | 	rdlong	local02, objptr
37ab0     14 2B 02 F6 | 	mov	local03, local02
37ab4     1C E4 85 F1 | 	sub	objptr, #28
37ab8     13 2A 46 F7 | 	zerox	local03, #19
37abc     14 28 46 F0 | 	shr	local02, #20
37ac0     02 28 66 F0 | 	shl	local02, #2
37ac4     ED 28 02 F1 | 	add	local02, __methods__
37ac8     14 29 02 FB | 	rdlong	local02, local02
37acc     F2 14 02 F6 | 	mov	arg02, objptr
37ad0     F2 2C 02 F6 | 	mov	local04, objptr
37ad4     15 E5 01 F6 | 	mov	objptr, local03
37ad8     2D 28 62 FD | 	call	local02
37adc     16 E5 01 F6 | 	mov	objptr, local04
37ae0                 | '     return (i < 0) ? 0 : 1;
37ae0     00 FA 55 F2 | 	cmps	result1, #0 wc
37ae4     00 26 06 C6 |  if_b	mov	local01, #0
37ae8     01 26 06 36 |  if_ae	mov	local01, #1
37aec     13 FB 01 F6 | 	mov	result1, local01
37af0                 | LR__5490
37af0     A7 F0 03 F6 | 	mov	ptra, fp
37af4     B2 00 A0 FD | 	call	#popregs_
37af8                 | __system___struct__s_vfs_file_t_putchar__ret
37af8     2D 00 64 FD | 	ret
37afc                 | 
37afc                 | __system___struct__s_vfs_file_t_getchar_
37afc     03 4A 05 F6 | 	mov	COUNT_, #3
37b00     A8 00 A0 FD | 	call	#pushregs_
37b04     20 E4 05 F1 | 	add	objptr, #32
37b08     F2 12 0A FB | 	rdlong	arg01, objptr wz
37b0c     20 E4 85 F1 | 	sub	objptr, #32
37b10     01 FA 65 A6 |  if_e	neg	result1, #1
37b14     38 00 90 AD |  if_e	jmp	#LR__5500
37b18                 | '     return getcf(__this);
37b18     20 E4 05 F1 | 	add	objptr, #32
37b1c     F2 26 02 FB | 	rdlong	local01, objptr
37b20     13 29 02 F6 | 	mov	local02, local01
37b24     20 E4 85 F1 | 	sub	objptr, #32
37b28     13 28 46 F7 | 	zerox	local02, #19
37b2c     14 26 46 F0 | 	shr	local01, #20
37b30     02 26 66 F0 | 	shl	local01, #2
37b34     ED 26 02 F1 | 	add	local01, __methods__
37b38     13 27 02 FB | 	rdlong	local01, local01
37b3c     F2 12 02 F6 | 	mov	arg01, objptr
37b40     F2 2A 02 F6 | 	mov	local03, objptr
37b44     14 E5 01 F6 | 	mov	objptr, local02
37b48     2D 26 62 FD | 	call	local01
37b4c     15 E5 01 F6 | 	mov	objptr, local03
37b50                 | LR__5500
37b50     A7 F0 03 F6 | 	mov	ptra, fp
37b54     B2 00 A0 FD | 	call	#popregs_
37b58                 | __system___struct__s_vfs_file_t_getchar__ret
37b58     2D 00 64 FD | 	ret
37b5c                 | 
37b5c                 | __system___struct___bas_wrap_sender_tx_
37b5c     03 4A 05 F6 | 	mov	COUNT_, #3
37b60     A8 00 A0 FD | 	call	#pushregs_
37b64     F2 26 02 FB | 	rdlong	local01, objptr
37b68     13 29 02 F6 | 	mov	local02, local01
37b6c     13 26 46 F7 | 	zerox	local01, #19
37b70     14 28 46 F0 | 	shr	local02, #20
37b74     02 28 66 F0 | 	shl	local02, #2
37b78     ED 28 02 F1 | 	add	local02, __methods__
37b7c     14 29 02 FB | 	rdlong	local02, local02
37b80     F2 2A 02 F6 | 	mov	local03, objptr
37b84     13 E5 01 F6 | 	mov	objptr, local01
37b88     2D 28 62 FD | 	call	local02
37b8c     15 E5 01 F6 | 	mov	objptr, local03
37b90     01 FA 05 F6 | 	mov	result1, #1
37b94     A7 F0 03 F6 | 	mov	ptra, fp
37b98     B2 00 A0 FD | 	call	#popregs_
37b9c                 | __system___struct___bas_wrap_sender_tx__ret
37b9c     2D 00 64 FD | 	ret
37ba0                 | 
37ba0                 | __system___struct___bas_wrap_sender_rx_
37ba0     03 4A 05 F6 | 	mov	COUNT_, #3
37ba4     A8 00 A0 FD | 	call	#pushregs_
37ba8     04 E4 05 F1 | 	add	objptr, #4
37bac     F2 26 02 FB | 	rdlong	local01, objptr
37bb0     13 29 02 F6 | 	mov	local02, local01
37bb4     04 E4 85 F1 | 	sub	objptr, #4
37bb8     13 28 46 F7 | 	zerox	local02, #19
37bbc     14 26 46 F0 | 	shr	local01, #20
37bc0     02 26 66 F0 | 	shl	local01, #2
37bc4     ED 26 02 F1 | 	add	local01, __methods__
37bc8     13 27 02 FB | 	rdlong	local01, local01
37bcc     F2 2A 02 F6 | 	mov	local03, objptr
37bd0     14 E5 01 F6 | 	mov	objptr, local02
37bd4     2D 26 62 FD | 	call	local01
37bd8     15 E5 01 F6 | 	mov	objptr, local03
37bdc     A7 F0 03 F6 | 	mov	ptra, fp
37be0     B2 00 A0 FD | 	call	#popregs_
37be4                 | __system___struct___bas_wrap_sender_rx__ret
37be4     2D 00 64 FD | 	ret
37be8                 | 
37be8                 | __system___struct___bas_wrap_sender_close_
37be8     03 4A 05 F6 | 	mov	COUNT_, #3
37bec     A8 00 A0 FD | 	call	#pushregs_
37bf0     08 E4 05 F1 | 	add	objptr, #8
37bf4     F2 26 02 FB | 	rdlong	local01, objptr
37bf8     13 29 02 F6 | 	mov	local02, local01
37bfc     08 E4 85 F1 | 	sub	objptr, #8
37c00     13 28 46 F7 | 	zerox	local02, #19
37c04     14 26 46 F0 | 	shr	local01, #20
37c08     02 26 66 F0 | 	shl	local01, #2
37c0c     ED 26 02 F1 | 	add	local01, __methods__
37c10     13 27 02 FB | 	rdlong	local01, local01
37c14     F2 2A 02 F6 | 	mov	local03, objptr
37c18     14 E5 01 F6 | 	mov	objptr, local02
37c1c     2D 26 62 FD | 	call	local01
37c20     15 E5 01 F6 | 	mov	objptr, local03
37c24     A7 F0 03 F6 | 	mov	ptra, fp
37c28     B2 00 A0 FD | 	call	#popregs_
37c2c                 | __system___struct___bas_wrap_sender_close__ret
37c2c     2D 00 64 FD | 	ret
37c30                 | 
37c30                 | LR__5510
37c30     2F          | 	byte	"/"
37c31     00          | 	byte	0
37c32                 | LR__5511
37c32     69 6E 66    | 	byte	"inf"
37c35     00          | 	byte	0
37c36                 | LR__5512
37c36     6E 61 6E    | 	byte	"nan"
37c39     00          | 	byte	0
37c3a                 | LR__5513
37c3a                 | 	byte	
37c3a     00          | 	byte	0
37c3b                 | LR__5514
37c3b                 | 	byte	
37c3b     00          | 	byte	0
37c3c                 | LR__5515
37c3c                 | 	byte	
37c3c     00          | 	byte	0
37c3d                 | LR__5516
37c3d                 | 	byte	
37c3d     00          | 	byte	0
37c3e                 | LR__5517
37c3e                 | 	byte	
37c3e     00          | 	byte	0
37c3f                 | LR__5518
37c3f                 | 	byte	
37c3f     00          | 	byte	0
37c40                 | LR__5519
37c40                 | 	byte	
37c40     00          | 	byte	0
37c41                 | LR__5520
37c41                 | 	byte	
37c41     00          | 	byte	0
37c42                 | LR__5521
37c42     00          | 	byte	0
37c43     00          | 	byte	0
37c44                 | LR__5522
37c44     00          | 	byte	0
37c45     00          | 	byte	0
37c46                 | LR__5523
37c46     00          | 	byte	0
37c47     00          | 	byte	0
37c48                 | LR__5524
37c48     20 21 21 21 
37c4c     20 63 6F 72 
37c50     72 75 70 74 
37c54     65 64 20 68 
37c58     65 61 70 3F 
37c5c     3F 3F 20 21 
37c60     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
37c63     00          | 	byte	0
37c64                 | LR__5525
37c64     20 21 21 21 
37c68     20 6F 75 74 
37c6c     20 6F 66 20 
37c70     68 65 61 70 
37c74     20 6D 65 6D 
37c78     6F 72 79 20 
37c7c     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
37c80     00          | 	byte	0
37c81                 | LR__5526
37c81     20 21 21 21 
37c85     20 63 6F 72 
37c89     72 75 70 74 
37c8d     65 64 20 68 
37c91     65 61 70 20 
37c95     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
37c99     00          | 	byte	0
37c9a                 | LR__5527
37c9a     00          | 	byte	0
37c9b     00          | 	byte	0
37c9c                 | LR__5528
37c9c     2E          | 	byte	"."
37c9d     00          | 	byte	0
37c9e                 | LR__5529
37c9e     00          | 	byte	0
37c9f     00          | 	byte	0
37ca0                 | LR__5530
37ca0     00          | 	byte	0
37ca1     00          | 	byte	0
37ca2                 | LR__5531
37ca2     00          | 	byte	0
37ca3     00          | 	byte	0
37ca4                 | LR__5532
37ca4     2A 3A 3C 3E 
37ca8     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
37cac     00          | 	byte	0
37cad                 | LR__5533
37cad     2B 2C 3B 3D 
37cb1     5B 5D       | 	byte	"+,;=[]"
37cb3     00          | 	byte	0
37cb4                 | LR__5534
37cb4     46 41 54 33 
37cb8     32 20 20 20 | 	byte	"FAT32   "
37cbc     00          | 	byte	0
37cbd                 | LR__5535
37cbd     54 5A       | 	byte	"TZ"
37cbf     00          | 	byte	0
37cc0                 | LR__5536
37cc0     00          | 	byte	0
37cc1     00          | 	byte	0
37cc2                 | LR__5537
37cc2                 | 	byte	
37cc2     00          | 	byte	0
37cc3                 | LR__5538
37cc3                 | 	byte	
37cc3     00          | 	byte	0
37cc4                 | LR__5539
37cc4                 | 	byte	
37cc4     00          | 	byte	0
37cc5                 | LR__5540
37cc5                 | 	byte	
37cc5     00          | 	byte	0
37cc6                 | LR__5541
37cc6     22          | 	byte	34
37cc7     00          | 	byte	0
37cc8                 | LR__5542
37cc8     22          | 	byte	34
37cc9     00          | 	byte	0
37cca                 | LR__5543
37cca     3A          | 	byte	":"
37ccb     00          | 	byte	0
37ccc                 | LR__5544
37ccc                 | 	byte	
37ccc     00          | 	byte	0
37ccd                 | LR__5545
37ccd                 | 	byte	
37ccd     00          | 	byte	0
37cce                 | LR__5546
37cce                 | 	byte	
37cce     00          | 	byte	0
37ccf                 | LR__5547
37ccf                 | 	byte	
37ccf     00          | 	byte	0
37cd0                 | LR__5548
37cd0                 | 	byte	
37cd0     00          | 	byte	0
37cd1                 | LR__5549
37cd1                 | 	byte	
37cd1     00          | 	byte	0
37cd2                 | LR__5550
37cd2                 | 	byte	
37cd2     00          | 	byte	0
37cd3                 | LR__5551
37cd3     30          | 	byte	"0"
37cd4     00          | 	byte	0
37cd5                 | LR__5552
37cd5     22          | 	byte	34
37cd6     00          | 	byte	0
37cd7                 | LR__5553
37cd7     22          | 	byte	34
37cd8     00          | 	byte	0
37cd9                 | LR__5554
37cd9     22          | 	byte	34
37cda     00          | 	byte	0
37cdb                 | LR__5555
37cdb     22          | 	byte	34
37cdc     00          | 	byte	0
37cdd                 | LR__5556
37cdd     22          | 	byte	34
37cde     00          | 	byte	0
37cdf                 | LR__5557
37cdf     3E          | 	byte	">"
37ce0     00          | 	byte	0
37ce1                 | LR__5558
37ce1     3C          | 	byte	"<"
37ce2     00          | 	byte	0
37ce3                 | LR__5559
37ce3     2B          | 	byte	"+"
37ce4     00          | 	byte	0
37ce5                 | LR__5560
37ce5     2D          | 	byte	"-"
37ce6     00          | 	byte	0
37ce7                 | LR__5561
37ce7     2A          | 	byte	"*"
37ce8     00          | 	byte	0
37ce9                 | LR__5562
37ce9     2F          | 	byte	"/"
37cea     00          | 	byte	0
37ceb                 | LR__5563
37ceb     5E          | 	byte	"^"
37cec     00          | 	byte	0
37ced                 | LR__5564
37ced     3D          | 	byte	"="
37cee     00          | 	byte	0
37cef                 | LR__5565
37cef     2B          | 	byte	"+"
37cf0     00          | 	byte	0
37cf1                 | LR__5566
37cf1     2B          | 	byte	"+"
37cf2     00          | 	byte	0
37cf3                 | LR__5567
37cf3     2D          | 	byte	"-"
37cf4     00          | 	byte	0
37cf5                 | LR__5568
37cf5     2D          | 	byte	"-"
37cf6     00          | 	byte	0
37cf7                 | LR__5569
37cf7     3C          | 	byte	"<"
37cf8     00          | 	byte	0
37cf9                 | LR__5570
37cf9     3E          | 	byte	">"
37cfa     00          | 	byte	0
37cfb                 | LR__5571
37cfb     22          | 	byte	34
37cfc     00          | 	byte	0
37cfd                 | LR__5572
37cfd     22          | 	byte	34
37cfe     00          | 	byte	0
37cff                 | LR__5573
37cff     65 6C 73 65 | 	byte	"else"
37d03     00          | 	byte	0
37d04                 | LR__5574
37d04     74 68 65 6E | 	byte	"then"
37d08     00          | 	byte	0
37d09                 | LR__5575
37d09     3F          | 	byte	"?"
37d0a     00          | 	byte	0
37d0b                 | LR__5576
37d0b     3F          | 	byte	"?"
37d0c     00          | 	byte	0
37d0d                 | LR__5577
37d0d     2E          | 	byte	"."
37d0e     00          | 	byte	0
37d0f                 | LR__5578
37d0f     6D 6F 75 73 
37d13     65          | 	byte	"mouse"
37d14     00          | 	byte	0
37d15                 | LR__5579
37d15     63 75 72 73 
37d19     6F 72       | 	byte	"cursor"
37d1b     00          | 	byte	0
37d1c                 | LR__5580
37d1c     63 6C 69 63 
37d20     6B          | 	byte	"click"
37d21     00          | 	byte	0
37d22                 | LR__5581
37d22     6F 6E       | 	byte	"on"
37d24     00          | 	byte	0
37d25                 | LR__5582
37d25     31          | 	byte	"1"
37d26     00          | 	byte	0
37d27                 | LR__5583
37d27     6F 66 66    | 	byte	"off"
37d2a     00          | 	byte	0
37d2b                 | LR__5584
37d2b     30          | 	byte	"0"
37d2c     00          | 	byte	0
37d2d                 | LR__5585
37d2d     6D 6F 64 65 | 	byte	"mode"
37d31     00          | 	byte	0
37d32                 | LR__5586
37d32     6D 2E       | 	byte	"m."
37d34     00          | 	byte	0
37d35                 | LR__5587
37d35     61 74 61 72 
37d39     69          | 	byte	"atari"
37d3a     00          | 	byte	0
37d3b                 | LR__5588
37d3b     30          | 	byte	"0"
37d3c     00          | 	byte	0
37d3d                 | LR__5589
37d3d     70 63 5F 61 
37d41     6D 62 65 72 | 	byte	"pc_amber"
37d45     00          | 	byte	0
37d46                 | LR__5590
37d46     31          | 	byte	"1"
37d47     00          | 	byte	0
37d48                 | LR__5591
37d48     70 63 5F 67 
37d4c     72 65 65 6E | 	byte	"pc_green"
37d50     00          | 	byte	0
37d51                 | LR__5592
37d51     32          | 	byte	"2"
37d52     00          | 	byte	0
37d53                 | LR__5593
37d53     70 63 5F 77 
37d57     68 69 74 65 | 	byte	"pc_white"
37d5b     00          | 	byte	0
37d5c                 | LR__5594
37d5c     33          | 	byte	"3"
37d5d     00          | 	byte	0
37d5e                 | LR__5595
37d5e     73 74       | 	byte	"st"
37d60     00          | 	byte	0
37d61                 | LR__5596
37d61     34          | 	byte	"4"
37d62     00          | 	byte	0
37d63                 | LR__5597
37d63     61 6D 69 67 
37d67     61          | 	byte	"amiga"
37d68     00          | 	byte	0
37d69                 | LR__5598
37d69     35          | 	byte	"5"
37d6a     00          | 	byte	0
37d6b                 | LR__5599
37d6b                 | 	byte	
37d6b     00          | 	byte	0
37d6c                 | LR__5600
37d6c     6C 6F 61 64 | 	byte	"load"
37d70     00          | 	byte	0
37d71                 | LR__5601
37d71     73 61 76 65 | 	byte	"save"
37d75     00          | 	byte	0
37d76                 | LR__5602
37d76     62 72 75 6E | 	byte	"brun"
37d7a     00          | 	byte	0
37d7b                 | LR__5603
37d7b     72 75 6E    | 	byte	"run"
37d7e     00          | 	byte	0
37d7f                 | LR__5604
37d7f     6C 6F 2E    | 	byte	"lo."
37d82     00          | 	byte	0
37d83                 | LR__5605
37d83     73 2E       | 	byte	"s."
37d85     00          | 	byte	0
37d86                 | LR__5606
37d86     62 72 2E    | 	byte	"br."
37d89     00          | 	byte	0
37d8a                 | LR__5607
37d8a     65 6E 74 65 
37d8e     72          | 	byte	"enter"
37d8f     00          | 	byte	0
37d90                 | LR__5608
37d90     65 2E       | 	byte	"e."
37d92     00          | 	byte	0
37d93                 | LR__5609
37d93     24          | 	byte	"$"
37d94     00          | 	byte	0
37d95                 | LR__5610
37d95     64 65 6C 65 
37d99     74 65       | 	byte	"delete"
37d9b     00          | 	byte	0
37d9c                 | LR__5611
37d9c     6D 6B 64 69 
37da0     72          | 	byte	"mkdir"
37da1     00          | 	byte	0
37da2                 | LR__5612
37da2     24          | 	byte	"$"
37da3     00          | 	byte	0
37da4                 | LR__5613
37da4     63 6F 70 79 | 	byte	"copy"
37da8     00          | 	byte	0
37da9                 | LR__5614
37da9     24          | 	byte	"$"
37daa     00          | 	byte	0
37dab                 | LR__5615
37dab     63 6F 70 79 | 	byte	"copy"
37daf     00          | 	byte	0
37db0                 | LR__5616
37db0     24          | 	byte	"$"
37db1     00          | 	byte	0
37db2                 | LR__5617
37db2     63 64       | 	byte	"cd"
37db4     00          | 	byte	0
37db5                 | LR__5618
37db5     63 64 2E    | 	byte	"cd."
37db8     00          | 	byte	0
37db9                 | LR__5619
37db9     2E          | 	byte	"."
37dba     00          | 	byte	0
37dbb                 | LR__5620
37dbb     2E 2E       | 	byte	".."
37dbd     00          | 	byte	0
37dbe                 | LR__5621
37dbe     63 64       | 	byte	"cd"
37dc0     00          | 	byte	0
37dc1                 | LR__5622
37dc1     2F          | 	byte	"/"
37dc2     00          | 	byte	0
37dc3                 | LR__5623
37dc3                 | 	byte	
37dc3     00          | 	byte	0
37dc4                 | LR__5624
37dc4                 | 	byte	
37dc4     00          | 	byte	0
37dc5                 | LR__5625
37dc5                 | 	byte	
37dc5     00          | 	byte	0
37dc6                 | LR__5626
37dc6                 | 	byte	
37dc6     00          | 	byte	0
37dc7                 | LR__5627
37dc7                 | 	byte	
37dc7     00          | 	byte	0
37dc8                 | LR__5628
37dc8     52 65 61 64 
37dcc     79          | 	byte	"Ready"
37dcd     00          | 	byte	0
37dce                 | LR__5629
37dce     2B          | 	byte	"+"
37dcf     00          | 	byte	0
37dd0                 | LR__5630
37dd0     2D          | 	byte	"-"
37dd1     00          | 	byte	0
37dd2                 | LR__5631
37dd2     6F 72       | 	byte	"or"
37dd4     00          | 	byte	0
37dd5                 | LR__5632
37dd5     78 6F 72    | 	byte	"xor"
37dd8     00          | 	byte	0
37dd9                 | LR__5633
37dd9     2A          | 	byte	"*"
37dda     00          | 	byte	0
37ddb                 | LR__5634
37ddb     2F          | 	byte	"/"
37ddc     00          | 	byte	0
37ddd                 | LR__5635
37ddd     61 6E 64    | 	byte	"and"
37de0     00          | 	byte	0
37de1                 | LR__5636
37de1     64 69 76    | 	byte	"div"
37de4     00          | 	byte	0
37de5                 | LR__5637
37de5     6D 6F 64    | 	byte	"mod"
37de8     00          | 	byte	0
37de9                 | LR__5638
37de9     73 68 6C    | 	byte	"shl"
37dec     00          | 	byte	0
37ded                 | LR__5639
37ded     73 68 72    | 	byte	"shr"
37df0     00          | 	byte	0
37df1                 | LR__5640
37df1     5E          | 	byte	"^"
37df2     00          | 	byte	0
37df3                 | LR__5641
37df3     6E 6F 74    | 	byte	"not"
37df6     00          | 	byte	0
37df7                 | LR__5642
37df7     40          | 	byte	"@"
37df8     00          | 	byte	0
37df9                 | LR__5643
37df9     3D          | 	byte	"="
37dfa     00          | 	byte	0
37dfb                 | LR__5644
37dfb     3E 3D       | 	byte	">="
37dfd     00          | 	byte	0
37dfe                 | LR__5645
37dfe     3C 3D       | 	byte	"<="
37e00     00          | 	byte	0
37e01                 | LR__5646
37e01     3C          | 	byte	"<"
37e02     00          | 	byte	0
37e03                 | LR__5647
37e03     3E          | 	byte	">"
37e04     00          | 	byte	0
37e05                 | LR__5648
37e05     3C 3E       | 	byte	"<>"
37e07     00          | 	byte	0
37e08                 | LR__5649
37e08     2B 2B       | 	byte	"++"
37e0a     00          | 	byte	0
37e0b                 | LR__5650
37e0b     2D 2D       | 	byte	"--"
37e0d     00          | 	byte	0
37e0e                 | LR__5651
37e0e     23          | 	byte	"#"
37e0f     00          | 	byte	0
37e10                 | LR__5652
37e10     30          | 	byte	"0"
37e11     00          | 	byte	0
37e12                 | LR__5653
37e12     39          | 	byte	"9"
37e13     00          | 	byte	0
37e14                 | LR__5654
37e14     23 72 65 61 
37e18     64          | 	byte	"#read"
37e19     00          | 	byte	0
37e1a                 | LR__5655
37e1a     23 77 72 69 
37e1e     74 65       | 	byte	"#write"
37e20     00          | 	byte	0
37e21                 | LR__5656
37e21     23 61 70 70 
37e25     65 6E 64    | 	byte	"#append"
37e28     00          | 	byte	0
37e29                 | LR__5657
37e29     23          | 	byte	"#"
37e2a     00          | 	byte	0
37e2b                 | LR__5658
37e2b     23          | 	byte	"#"
37e2c     00          | 	byte	0
37e2d                 | LR__5659
37e2d     2D          | 	byte	"-"
37e2e     00          | 	byte	0
37e2f                 | LR__5660
37e2f     30          | 	byte	"0"
37e30     00          | 	byte	0
37e31                 | LR__5661
37e31     63          | 	byte	"c"
37e32     00          | 	byte	0
37e33                 | LR__5662
37e33     63 23       | 	byte	"c#"
37e35     00          | 	byte	0
37e36                 | LR__5663
37e36     64          | 	byte	"d"
37e37     00          | 	byte	0
37e38                 | LR__5664
37e38     64 23       | 	byte	"d#"
37e3a     00          | 	byte	0
37e3b                 | LR__5665
37e3b     65          | 	byte	"e"
37e3c     00          | 	byte	0
37e3d                 | LR__5666
37e3d     66          | 	byte	"f"
37e3e     00          | 	byte	0
37e3f                 | LR__5667
37e3f     66 23       | 	byte	"f#"
37e41     00          | 	byte	0
37e42                 | LR__5668
37e42     67          | 	byte	"g"
37e43     00          | 	byte	0
37e44                 | LR__5669
37e44     67 23       | 	byte	"g#"
37e46     00          | 	byte	0
37e47                 | LR__5670
37e47     61          | 	byte	"a"
37e48     00          | 	byte	0
37e49                 | LR__5671
37e49     61 23       | 	byte	"a#"
37e4b     00          | 	byte	0
37e4c                 | LR__5672
37e4c     68          | 	byte	"h"
37e4d     00          | 	byte	0
37e4e                 | LR__5673
37e4e     62          | 	byte	"b"
37e4f     00          | 	byte	0
37e50                 | LR__5674
37e50     2B          | 	byte	"+"
37e51     00          | 	byte	0
37e52                 | LR__5675
37e52     2D          | 	byte	"-"
37e53     00          | 	byte	0
37e54                 | LR__5676
37e54     3D          | 	byte	"="
37e55     00          | 	byte	0
37e56                 | LR__5677
37e56     2C          | 	byte	","
37e57     00          | 	byte	0
37e58                 | LR__5678
37e58     2A          | 	byte	"*"
37e59     00          | 	byte	0
37e5a                 | LR__5679
37e5a     2F          | 	byte	"/"
37e5b     00          | 	byte	0
37e5c                 | LR__5680
37e5c     3B          | 	byte	";"
37e5d     00          | 	byte	0
37e5e                 | LR__5681
37e5e     22          | 	byte	34
37e5f     00          | 	byte	0
37e60                 | LR__5682
37e60     5E          | 	byte	"^"
37e61     00          | 	byte	0
37e62                 | LR__5683
37e62     29          | 	byte	")"
37e63     00          | 	byte	0
37e64                 | LR__5684
37e64     28          | 	byte	"("
37e65     00          | 	byte	0
37e66                 | LR__5685
37e66     3A          | 	byte	":"
37e67     00          | 	byte	0
37e68                 | LR__5686
37e68     20          | 	byte	" "
37e69     00          | 	byte	0
37e6a                 | LR__5687
37e6a     3E          | 	byte	">"
37e6b     00          | 	byte	0
37e6c                 | LR__5688
37e6c     3C          | 	byte	"<"
37e6d     00          | 	byte	0
37e6e                 | LR__5689
37e6e     3D          | 	byte	"="
37e6f     00          | 	byte	0
37e70                 | LR__5690
37e70     62 65 65 70 | 	byte	"beep"
37e74     00          | 	byte	0
37e75                 | LR__5691
37e75     62 2E       | 	byte	"b."
37e77     00          | 	byte	0
37e78                 | LR__5692
37e78     62 6C 69 74 | 	byte	"blit"
37e7c     00          | 	byte	0
37e7d                 | LR__5693
37e7d     62 6F 78    | 	byte	"box"
37e80     00          | 	byte	0
37e81                 | LR__5694
37e81     62 72 75 6E | 	byte	"brun"
37e85     00          | 	byte	0
37e86                 | LR__5695
37e86     62 72 2E    | 	byte	"br."
37e89     00          | 	byte	0
37e8a                 | LR__5696
37e8a     63 64       | 	byte	"cd"
37e8c     00          | 	byte	0
37e8d                 | LR__5697
37e8d     63 68 61 6E 
37e91     67 65 66 72 
37e95     65 71       | 	byte	"changefreq"
37e97     00          | 	byte	0
37e98                 | LR__5698
37e98     63 66 2E    | 	byte	"cf."
37e9b     00          | 	byte	0
37e9c                 | LR__5699
37e9c     63 68 61 6E 
37ea0     67 65 70 61 
37ea4     6E          | 	byte	"changepan"
37ea5     00          | 	byte	0
37ea6                 | LR__5700
37ea6     63 70 2E    | 	byte	"cp."
37ea9     00          | 	byte	0
37eaa                 | LR__5701
37eaa     63 68 61 6E 
37eae     67 65 76 6F 
37eb2     6C          | 	byte	"changevol"
37eb3     00          | 	byte	0
37eb4                 | LR__5702
37eb4     63 76 2E    | 	byte	"cv."
37eb7     00          | 	byte	0
37eb8                 | LR__5703
37eb8     63 68 61 6E 
37ebc     67 65 77 61 
37ec0     76 65       | 	byte	"changewave"
37ec2     00          | 	byte	0
37ec3                 | LR__5704
37ec3     63 77 2E    | 	byte	"cw."
37ec6     00          | 	byte	0
37ec7                 | LR__5705
37ec7     63 69 72 63 
37ecb     6C 65       | 	byte	"circle"
37ecd     00          | 	byte	0
37ece                 | LR__5706
37ece     63 69 2E    | 	byte	"ci."
37ed1     00          | 	byte	0
37ed2                 | LR__5707
37ed2     63 6C 69 63 
37ed6     6B          | 	byte	"click"
37ed7     00          | 	byte	0
37ed8                 | LR__5708
37ed8     63 6C 6F 73 
37edc     65          | 	byte	"close"
37edd     00          | 	byte	0
37ede                 | LR__5709
37ede     63 6C 73    | 	byte	"cls"
37ee1     00          | 	byte	0
37ee2                 | LR__5710
37ee2     63 6F 67 73 
37ee6     74 6F 70    | 	byte	"cogstop"
37ee9     00          | 	byte	0
37eea                 | LR__5711
37eea     63 6F 6C 6F 
37eee     72          | 	byte	"color"
37eef     00          | 	byte	0
37ef0                 | LR__5712
37ef0     63 2E       | 	byte	"c."
37ef2     00          | 	byte	0
37ef3                 | LR__5713
37ef3     63 6F 70 79 | 	byte	"copy"
37ef7     00          | 	byte	0
37ef8                 | LR__5714
37ef8     63 75 72 73 
37efc     6F 72       | 	byte	"cursor"
37efe     00          | 	byte	0
37eff                 | LR__5715
37eff     64 61 74 61 | 	byte	"data"
37f03     00          | 	byte	0
37f04                 | LR__5716
37f04     64 65 66 63 
37f08     68 61 72    | 	byte	"defchar"
37f0b     00          | 	byte	0
37f0c                 | LR__5717
37f0c     64 65 66 73 
37f10     6E 64       | 	byte	"defsnd"
37f12     00          | 	byte	0
37f13                 | LR__5718
37f13     64 65 66 65 
37f17     6E 76       | 	byte	"defenv"
37f19     00          | 	byte	0
37f1a                 | LR__5719
37f1a     64 65 66 73 
37f1e     70 72 69 74 
37f22     65          | 	byte	"defsprite"
37f23     00          | 	byte	0
37f24                 | LR__5720
37f24     64 73 2E    | 	byte	"ds."
37f27     00          | 	byte	0
37f28                 | LR__5721
37f28     64 65 67    | 	byte	"deg"
37f2b     00          | 	byte	0
37f2c                 | LR__5722
37f2c     64 65 6C 65 
37f30     74 65       | 	byte	"delete"
37f32     00          | 	byte	0
37f33                 | LR__5723
37f33     64 69 6D    | 	byte	"dim"
37f36     00          | 	byte	0
37f37                 | LR__5724
37f37     64 69 72    | 	byte	"dir"
37f3a     00          | 	byte	0
37f3b                 | LR__5725
37f3b     64 70 6F 6B 
37f3f     65          | 	byte	"dpoke"
37f40     00          | 	byte	0
37f41                 | LR__5726
37f41     64 72 61 77 | 	byte	"draw"
37f45     00          | 	byte	0
37f46                 | LR__5727
37f46     64 72 61 77 
37f4a     74 6F       | 	byte	"drawto"
37f4c     00          | 	byte	0
37f4d                 | LR__5728
37f4d     64 72 2E    | 	byte	"dr."
37f50     00          | 	byte	0
37f51                 | LR__5729
37f51     65 6C 73 65 | 	byte	"else"
37f55     00          | 	byte	0
37f56                 | LR__5730
37f56     65 6E 64    | 	byte	"end"
37f59     00          | 	byte	0
37f5a                 | LR__5731
37f5a     65 6E 74 65 
37f5e     72          | 	byte	"enter"
37f5f     00          | 	byte	0
37f60                 | LR__5732
37f60     65 2E       | 	byte	"e."
37f62     00          | 	byte	0
37f63                 | LR__5733
37f63     66 63 69 72 
37f67     63 6C 65    | 	byte	"fcircle"
37f6a     00          | 	byte	0
37f6b                 | LR__5734
37f6b     66 63 2E    | 	byte	"fc."
37f6e     00          | 	byte	0
37f6f                 | LR__5735
37f6f     66 69 6C 6C | 	byte	"fill"
37f73     00          | 	byte	0
37f74                 | LR__5736
37f74     66 69 2E    | 	byte	"fi."
37f77     00          | 	byte	0
37f78                 | LR__5737
37f78     66 6F 6E 74 | 	byte	"font"
37f7c     00          | 	byte	0
37f7d                 | LR__5738
37f7d     66 6F 72    | 	byte	"for"
37f80     00          | 	byte	0
37f81                 | LR__5739
37f81     66 2E       | 	byte	"f."
37f83     00          | 	byte	0
37f84                 | LR__5740
37f84     66 72 61 6D 
37f88     65          | 	byte	"frame"
37f89     00          | 	byte	0
37f8a                 | LR__5741
37f8a     66 72 2E    | 	byte	"fr."
37f8d     00          | 	byte	0
37f8e                 | LR__5742
37f8e     67 65 74    | 	byte	"get"
37f91     00          | 	byte	0
37f92                 | LR__5743
37f92     67 6F 73 75 
37f96     62          | 	byte	"gosub"
37f97     00          | 	byte	0
37f98                 | LR__5744
37f98     67 6F 74 6F | 	byte	"goto"
37f9c     00          | 	byte	0
37f9d                 | LR__5745
37f9d     67 2E       | 	byte	"g."
37f9f     00          | 	byte	0
37fa0                 | LR__5746
37fa0     69 66       | 	byte	"if"
37fa2     00          | 	byte	0
37fa3                 | LR__5747
37fa3     69 6E 6B    | 	byte	"ink"
37fa6     00          | 	byte	0
37fa7                 | LR__5748
37fa7     69 2E       | 	byte	"i."
37fa9     00          | 	byte	0
37faa                 | LR__5749
37faa     69 6E 70 75 
37fae     74          | 	byte	"input"
37faf     00          | 	byte	0
37fb0                 | LR__5750
37fb0     6C 69 73 74 | 	byte	"list"
37fb4     00          | 	byte	0
37fb5                 | LR__5751
37fb5     6C 2E       | 	byte	"l."
37fb7     00          | 	byte	0
37fb8                 | LR__5752
37fb8     6C 6F 61 64 | 	byte	"load"
37fbc     00          | 	byte	0
37fbd                 | LR__5753
37fbd     6C 6F 2E    | 	byte	"lo."
37fc0     00          | 	byte	0
37fc1                 | LR__5754
37fc1     6C 70 6F 6B 
37fc5     65          | 	byte	"lpoke"
37fc6     00          | 	byte	0
37fc7                 | LR__5755
37fc7     6D 6B 64 69 
37fcb     72          | 	byte	"mkdir"
37fcc     00          | 	byte	0
37fcd                 | LR__5756
37fcd     6D 6F 64 65 | 	byte	"mode"
37fd1     00          | 	byte	0
37fd2                 | LR__5757
37fd2     6D 2E       | 	byte	"m."
37fd4     00          | 	byte	0
37fd5                 | LR__5758
37fd5     6D 6F 75 73 
37fd9     65          | 	byte	"mouse"
37fda     00          | 	byte	0
37fdb                 | LR__5759
37fdb     6E 65 77    | 	byte	"new"
37fde     00          | 	byte	0
37fdf                 | LR__5760
37fdf     6E 65 78 74 | 	byte	"next"
37fe3     00          | 	byte	0
37fe4                 | LR__5761
37fe4     6E 2E       | 	byte	"n."
37fe6     00          | 	byte	0
37fe7                 | LR__5762
37fe7     6F 6E       | 	byte	"on"
37fe9     00          | 	byte	0
37fea                 | LR__5763
37fea     6F 70 65 6E | 	byte	"open"
37fee     00          | 	byte	0
37fef                 | LR__5764
37fef     70 61 70 65 
37ff3     72          | 	byte	"paper"
37ff4     00          | 	byte	0
37ff5                 | LR__5765
37ff5     70 61 2E    | 	byte	"pa."
37ff8     00          | 	byte	0
37ff9                 | LR__5766
37ff9     70 69 6E 66 
37ffd     6C 6F 61 74 | 	byte	"pinfloat"
38001     00          | 	byte	0
38002                 | LR__5767
38002     70 69 6E 68 
38006     69          | 	byte	"pinhi"
38007     00          | 	byte	0
38008                 | LR__5768
38008     70 69 6E 6C 
3800c     6F          | 	byte	"pinlo"
3800d     00          | 	byte	0
3800e                 | LR__5769
3800e     70 69 6E 73 
38012     74 61 72 74 | 	byte	"pinstart"
38016     00          | 	byte	0
38017                 | LR__5770
38017     70 69 6E 74 
3801b     6F 67 67 6C 
3801f     65          | 	byte	"pintoggle"
38020     00          | 	byte	0
38021                 | LR__5771
38021     70 69 6E 77 
38025     72 69 74 65 | 	byte	"pinwrite"
38029     00          | 	byte	0
3802a                 | LR__5772
3802a     70 6C 61 79 | 	byte	"play"
3802e     00          | 	byte	0
3802f                 | LR__5773
3802f     70 2E       | 	byte	"p."
38031     00          | 	byte	0
38032                 | LR__5774
38032     70 6C 6F 74 | 	byte	"plot"
38036     00          | 	byte	0
38037                 | LR__5775
38037     70 6C 2E    | 	byte	"pl."
3803a     00          | 	byte	0
3803b                 | LR__5776
3803b     70 6F 6B 65 | 	byte	"poke"
3803f     00          | 	byte	0
38040                 | LR__5777
38040     70 6F 70    | 	byte	"pop"
38043     00          | 	byte	0
38044                 | LR__5778
38044     70 6F 73 69 
38048     74 69 6F 6E | 	byte	"position"
3804c     00          | 	byte	0
3804d                 | LR__5779
3804d     70 6F 73 2E | 	byte	"pos."
38051     00          | 	byte	0
38052                 | LR__5780
38052     70 72 69 6E 
38056     74          | 	byte	"print"
38057     00          | 	byte	0
38058                 | LR__5781
38058     3F          | 	byte	"?"
38059     00          | 	byte	0
3805a                 | LR__5782
3805a     70 75 74    | 	byte	"put"
3805d     00          | 	byte	0
3805e                 | LR__5783
3805e     72 61 64    | 	byte	"rad"
38061     00          | 	byte	0
38062                 | LR__5784
38062     72 65 61 64 | 	byte	"read"
38066     00          | 	byte	0
38067                 | LR__5785
38067     72 65 6C 65 
3806b     61 73 65    | 	byte	"release"
3806e     00          | 	byte	0
3806f                 | LR__5786
3806f     72 65 6D    | 	byte	"rem"
38072     00          | 	byte	0
38073                 | LR__5787
38073     27          | 	byte	"'"
38074     00          | 	byte	0
38075                 | LR__5788
38075     72 65 73 74 
38079     6F 72 65    | 	byte	"restore"
3807c     00          | 	byte	0
3807d                 | LR__5789
3807d     72 65 73 74 
38081     6F 72 65 70 
38085     61 6C 65 74 
38089     74 65       | 	byte	"restorepalette"
3808b     00          | 	byte	0
3808c                 | LR__5790
3808c     72 70 2E    | 	byte	"rp."
3808f     00          | 	byte	0
38090                 | LR__5791
38090     72 65 74 75 
38094     72 6E       | 	byte	"return"
38096     00          | 	byte	0
38097                 | LR__5792
38097     72 75 6E    | 	byte	"run"
3809a     00          | 	byte	0
3809b                 | LR__5793
3809b     73 61 76 65 | 	byte	"save"
3809f     00          | 	byte	0
380a0                 | LR__5794
380a0     73 2E       | 	byte	"s."
380a2     00          | 	byte	0
380a3                 | LR__5795
380a3     73 65 74 63 
380a7     6F 6C 6F 72 | 	byte	"setcolor"
380ab     00          | 	byte	0
380ac                 | LR__5796
380ac     73 63 2E    | 	byte	"sc."
380af     00          | 	byte	0
380b0                 | LR__5797
380b0     73 65 74 64 
380b4     65 6C 61 79 | 	byte	"setdelay"
380b8     00          | 	byte	0
380b9                 | LR__5798
380b9     73 64 2E    | 	byte	"sd."
380bc     00          | 	byte	0
380bd                 | LR__5799
380bd     73 65 74 65 
380c1     6E 76       | 	byte	"setenv"
380c3     00          | 	byte	0
380c4                 | LR__5800
380c4     73 65 2E    | 	byte	"se."
380c7     00          | 	byte	0
380c8                 | LR__5801
380c8     73 65 74 6C 
380cc     65 6E       | 	byte	"setlen"
380ce     00          | 	byte	0
380cf                 | LR__5802
380cf     73 6C 2E    | 	byte	"sl."
380d2     00          | 	byte	0
380d3                 | LR__5803
380d3     73 65 74 70 
380d7     61 6E       | 	byte	"setpan"
380d9     00          | 	byte	0
380da                 | LR__5804
380da     73 70 2E    | 	byte	"sp."
380dd     00          | 	byte	0
380de                 | LR__5805
380de     73 65 74 73 
380e2     75 73 74 61 
380e6     69 6E       | 	byte	"setsustain"
380e8     00          | 	byte	0
380e9                 | LR__5806
380e9     73 73 2E    | 	byte	"ss."
380ec     00          | 	byte	0
380ed                 | LR__5807
380ed     73 65 74 76 
380f1     6F 6C       | 	byte	"setvol"
380f3     00          | 	byte	0
380f4                 | LR__5808
380f4     73 76 2E    | 	byte	"sv."
380f7     00          | 	byte	0
380f8                 | LR__5809
380f8     73 65 74 77 
380fc     61 76 65    | 	byte	"setwave"
380ff     00          | 	byte	0
38100                 | LR__5810
38100     73 77 2E    | 	byte	"sw."
38103     00          | 	byte	0
38104                 | LR__5811
38104     73 65 74 77 
38108     61 76       | 	byte	"setwav"
3810a     00          | 	byte	0
3810b                 | LR__5812
3810b     73 68 75 74 
3810f     75 70       | 	byte	"shutup"
38111     00          | 	byte	0
38112                 | LR__5813
38112     73 68 2E    | 	byte	"sh."
38115     00          | 	byte	0
38116                 | LR__5814
38116     73 6F 75 6E 
3811a     64          | 	byte	"sound"
3811b     00          | 	byte	0
3811c                 | LR__5815
3811c     73 6F 2E    | 	byte	"so."
3811f     00          | 	byte	0
38120                 | LR__5816
38120     73 70 72 69 
38124     74 65       | 	byte	"sprite"
38126     00          | 	byte	0
38127                 | LR__5817
38127     73 70 72 2E | 	byte	"spr."
3812b     00          | 	byte	0
3812c                 | LR__5818
3812c     74 68 65 6E | 	byte	"then"
38130     00          | 	byte	0
38131                 | LR__5819
38131     77 61 69 74 
38135     6D 73       | 	byte	"waitms"
38137     00          | 	byte	0
38138                 | LR__5820
38138     77 2E       | 	byte	"w."
3813a     00          | 	byte	0
3813b                 | LR__5821
3813b     77 61 69 74 
3813f     63 6C 6F 63 
38143     6B          | 	byte	"waitclock"
38144     00          | 	byte	0
38145                 | LR__5822
38145     77 63 2E    | 	byte	"wc."
38148     00          | 	byte	0
38149                 | LR__5823
38149     77 61 69 74 
3814d     76 62 6C    | 	byte	"waitvbl"
38150     00          | 	byte	0
38151                 | LR__5824
38151     77 76 2E    | 	byte	"wv."
38154     00          | 	byte	0
38155                 | LR__5825
38155     77 72 70 69 
38159     6E          | 	byte	"wrpin"
3815a     00          | 	byte	0
3815b                 | LR__5826
3815b     77 78 70 69 
3815f     6E          | 	byte	"wxpin"
38160     00          | 	byte	0
38161                 | LR__5827
38161     77 79 70 69 
38165     6E          | 	byte	"wypin"
38166     00          | 	byte	0
38167                 | LR__5828
38167     61 62 73    | 	byte	"abs"
3816a     00          | 	byte	0
3816b                 | LR__5829
3816b     61 63 6F 73 | 	byte	"acos"
3816f     00          | 	byte	0
38170                 | LR__5830
38170     61 64 72    | 	byte	"adr"
38173     00          | 	byte	0
38174                 | LR__5831
38174     61 64 64 72 | 	byte	"addr"
38178     00          | 	byte	0
38179                 | LR__5832
38179     61 73 63    | 	byte	"asc"
3817c     00          | 	byte	0
3817d                 | LR__5833
3817d     61 73 69 6E | 	byte	"asin"
38181     00          | 	byte	0
38182                 | LR__5834
38182     61 74 6E    | 	byte	"atn"
38185     00          | 	byte	0
38186                 | LR__5835
38186     62 69 6E 24 | 	byte	"bin$"
3818a     00          | 	byte	0
3818b                 | LR__5836
3818b     63 68 72 24 | 	byte	"chr$"
3818f     00          | 	byte	0
38190                 | LR__5837
38190     63 6F 67 69 
38194     6E 69 74    | 	byte	"coginit"
38197     00          | 	byte	0
38198                 | LR__5838
38198     63 6F 73    | 	byte	"cos"
3819b     00          | 	byte	0
3819c                 | LR__5839
3819c     64 70 65 65 
381a0     6B          | 	byte	"dpeek"
381a1     00          | 	byte	0
381a2                 | LR__5840
381a2     66 69 6E 64 
381a6     66 69 72 73 
381aa     74          | 	byte	"findfirst"
381ab     00          | 	byte	0
381ac                 | LR__5841
381ac     66 69 6E 64 
381b0     6E 65 78 74 | 	byte	"findnext"
381b4     00          | 	byte	0
381b5                 | LR__5842
381b5     66 72 61 6D 
381b9     65 62 75 66 | 	byte	"framebuf"
381bd     00          | 	byte	0
381be                 | LR__5843
381be     66 62 2E    | 	byte	"fb."
381c1     00          | 	byte	0
381c2                 | LR__5844
381c2     66 72 65    | 	byte	"fre"
381c5     00          | 	byte	0
381c6                 | LR__5845
381c6     67 63 2E    | 	byte	"gc."
381c9     00          | 	byte	0
381ca                 | LR__5846
381ca     67 65 74 63 
381ce     6F 6C 6F 72 | 	byte	"getcolor"
381d2     00          | 	byte	0
381d3                 | LR__5847
381d3     67 65 74 70 
381d7     69 78 65 6C | 	byte	"getpixel"
381db     00          | 	byte	0
381dc                 | LR__5848
381dc     67 65 2E    | 	byte	"ge."
381df     00          | 	byte	0
381e0                 | LR__5849
381e0     67 65 74 65 
381e4     6E 76 73 75 
381e8     73 74 61 69 
381ec     6E          | 	byte	"getenvsustain"
381ed     00          | 	byte	0
381ee                 | LR__5850
381ee     67 65 74 6E 
381f2     6F 74 65 76 
381f6     61 6C 75 65 | 	byte	"getnotevalue"
381fa     00          | 	byte	0
381fb                 | LR__5851
381fb     67 65 74 74 
381ff     69 6D 65    | 	byte	"gettime"
38202     00          | 	byte	0
38203                 | LR__5852
38203     67 74 2E    | 	byte	"gt."
38206     00          | 	byte	0
38207                 | LR__5853
38207     68 65 78 24 | 	byte	"hex$"
3820b     00          | 	byte	0
3820c                 | LR__5854
3820c     69 6E 6B 65 
38210     79 24       | 	byte	"inkey$"
38212     00          | 	byte	0
38213                 | LR__5855
38213     69 6E 74    | 	byte	"int"
38216     00          | 	byte	0
38217                 | LR__5856
38217     6C 65 66 74 
3821b     24          | 	byte	"left$"
3821c     00          | 	byte	0
3821d                 | LR__5857
3821d     6C 65 6E    | 	byte	"len"
38220     00          | 	byte	0
38221                 | LR__5858
38221     6C 6F 67    | 	byte	"log"
38224     00          | 	byte	0
38225                 | LR__5859
38225     6C 70 65 65 
38229     6B          | 	byte	"lpeek"
3822a     00          | 	byte	0
3822b                 | LR__5860
3822b     6D 65 6D 74 
3822f     6F 70       | 	byte	"memtop"
38231     00          | 	byte	0
38232                 | LR__5861
38232     6D 65 6D 6C 
38236     6F          | 	byte	"memlo"
38237     00          | 	byte	0
38238                 | LR__5862
38238     6D 69 64 24 | 	byte	"mid$"
3823c     00          | 	byte	0
3823d                 | LR__5863
3823d     6D 6F 75 73 
38241     65 6B       | 	byte	"mousek"
38243     00          | 	byte	0
38244                 | LR__5864
38244     6D 6F 75 73 
38248     65 77       | 	byte	"mousew"
3824a     00          | 	byte	0
3824b                 | LR__5865
3824b     6D 6F 75 73 
3824f     65 78       | 	byte	"mousex"
38251     00          | 	byte	0
38252                 | LR__5866
38252     6D 6F 75 73 
38256     65 79       | 	byte	"mousey"
38258     00          | 	byte	0
38259                 | LR__5867
38259     70 61 64 73 | 	byte	"pads"
3825d     00          | 	byte	0
3825e                 | LR__5868
3825e     70 61 64 77 | 	byte	"padw"
38262     00          | 	byte	0
38263                 | LR__5869
38263     70 61 64 78 | 	byte	"padx"
38267     00          | 	byte	0
38268                 | LR__5870
38268     70 61 64 79 | 	byte	"pady"
3826c     00          | 	byte	0
3826d                 | LR__5871
3826d     70 61 64 7A | 	byte	"padz"
38271     00          | 	byte	0
38272                 | LR__5872
38272     70 61 64 72 
38276     78          | 	byte	"padrx"
38277     00          | 	byte	0
38278                 | LR__5873
38278     70 61 64 72 
3827c     79          | 	byte	"padry"
3827d     00          | 	byte	0
3827e                 | LR__5874
3827e     70 61 64 72 
38282     7A          | 	byte	"padrz"
38283     00          | 	byte	0
38284                 | LR__5875
38284     70 61 64 68 | 	byte	"padh"
38288     00          | 	byte	0
38289                 | LR__5876
38289     70 65 65 6B | 	byte	"peek"
3828d     00          | 	byte	0
3828e                 | LR__5877
3828e     70 69 6E 72 
38292     65 61 64    | 	byte	"pinread"
38295     00          | 	byte	0
38296                 | LR__5878
38296     72 64 70 69 
3829a     6E          | 	byte	"rdpin"
3829b     00          | 	byte	0
3829c                 | LR__5879
3829c     72 69 67 68 
382a0     74 24       | 	byte	"right$"
382a2     00          | 	byte	0
382a3                 | LR__5880
382a3     72 71 70 69 
382a7     6E          | 	byte	"rqpin"
382a8     00          | 	byte	0
382a9                 | LR__5881
382a9     72 6F 75 6E 
382ad     64          | 	byte	"round"
382ae     00          | 	byte	0
382af                 | LR__5882
382af     72 6E 64    | 	byte	"rnd"
382b2     00          | 	byte	0
382b3                 | LR__5883
382b3     73 69 6E    | 	byte	"sin"
382b6     00          | 	byte	0
382b7                 | LR__5884
382b7     73 71 72    | 	byte	"sqr"
382ba     00          | 	byte	0
382bb                 | LR__5885
382bb     73 74 69 63 
382bf     6B          | 	byte	"stick"
382c0     00          | 	byte	0
382c1                 | LR__5886
382c1     73 74 72 69 
382c5     67          | 	byte	"strig"
382c6     00          | 	byte	0
382c7                 | LR__5887
382c7     73 74 72 24 | 	byte	"str$"
382cb     00          | 	byte	0
382cc                 | LR__5888
382cc     74 61 6E    | 	byte	"tan"
382cf     00          | 	byte	0
382d0                 | LR__5889
382d0     76 61 6C    | 	byte	"val"
382d3     00          | 	byte	0
382d4                 | LR__5890
382d4     76 61 72 70 
382d8     74 72       | 	byte	"varptr"
382da     00          | 	byte	0
382db                 | LR__5891
382db     61          | 	byte	"a"
382dc     00          | 	byte	0
382dd                 | LR__5892
382dd     7A          | 	byte	"z"
382de     00          | 	byte	0
382df                 | LR__5893
382df     5F          | 	byte	"_"
382e0     00          | 	byte	0
382e1                 | LR__5894
382e1     61          | 	byte	"a"
382e2     00          | 	byte	0
382e3                 | LR__5895
382e3     7A          | 	byte	"z"
382e4     00          | 	byte	0
382e5                 | LR__5896
382e5     30          | 	byte	"0"
382e6     00          | 	byte	0
382e7                 | LR__5897
382e7     39          | 	byte	"9"
382e8     00          | 	byte	0
382e9                 | LR__5898
382e9     5F          | 	byte	"_"
382ea     00          | 	byte	0
382eb                 | LR__5899
382eb     2E          | 	byte	"."
382ec     00          | 	byte	0
382ed                 | LR__5900
382ed     61          | 	byte	"a"
382ee     00          | 	byte	0
382ef                 | LR__5901
382ef     7A          | 	byte	"z"
382f0     00          | 	byte	0
382f1                 | LR__5902
382f1     30          | 	byte	"0"
382f2     00          | 	byte	0
382f3                 | LR__5903
382f3     39          | 	byte	"9"
382f4     00          | 	byte	0
382f5                 | LR__5904
382f5     5F          | 	byte	"_"
382f6     00          | 	byte	0
382f7                 | LR__5905
382f7     24          | 	byte	"$"
382f8     00          | 	byte	0
382f9                 | LR__5906
382f9     25          | 	byte	"%"
382fa     00          | 	byte	0
382fb                 | LR__5907
382fb     21          | 	byte	"!"
382fc     00          | 	byte	0
382fd                 | LR__5908
382fd     30          | 	byte	"0"
382fe     00          | 	byte	0
382ff                 | LR__5909
382ff     39          | 	byte	"9"
38300     00          | 	byte	0
38301                 | LR__5910
38301     2E          | 	byte	"."
38302     00          | 	byte	0
38303                 | LR__5911
38303     24          | 	byte	"$"
38304     00          | 	byte	0
38305                 | LR__5912
38305     25          | 	byte	"%"
38306     00          | 	byte	0
38307                 | LR__5913
38307     2D          | 	byte	"-"
38308     00          | 	byte	0
38309                 | LR__5914
38309     2E          | 	byte	"."
3830a     00          | 	byte	0
3830b                 | LR__5915
3830b     24          | 	byte	"$"
3830c     00          | 	byte	0
3830d                 | LR__5916
3830d     25          | 	byte	"%"
3830e     00          | 	byte	0
3830f                 | LR__5917
3830f     30          | 	byte	"0"
38310     00          | 	byte	0
38311                 | LR__5918
38311     39          | 	byte	"9"
38312     00          | 	byte	0
38313                 | LR__5919
38313     5F          | 	byte	"_"
38314     00          | 	byte	0
38315                 | LR__5920
38315     2E          | 	byte	"."
38316     00          | 	byte	0
38317                 | LR__5921
38317     45          | 	byte	"E"
38318     00          | 	byte	0
38319                 | LR__5922
38319     65          | 	byte	"e"
3831a     00          | 	byte	0
3831b                 | LR__5923
3831b     2D          | 	byte	"-"
3831c     00          | 	byte	0
3831d                 | LR__5924
3831d     61          | 	byte	"a"
3831e     00          | 	byte	0
3831f                 | LR__5925
3831f     66          | 	byte	"f"
38320     00          | 	byte	0
38321                 | LR__5926
38321     30          | 	byte	"0"
38322     00          | 	byte	0
38323                 | LR__5927
38323     31          | 	byte	"1"
38324     00          | 	byte	0
38325                 | LR__5928
38325     5F          | 	byte	"_"
38326     00          | 	byte	0
38327                 | LR__5929
38327     2D          | 	byte	"-"
38328     00          | 	byte	0
38329                 | LR__5930
38329     65          | 	byte	"e"
3832a     00          | 	byte	0
3832b                 | LR__5931
3832b     2E          | 	byte	"."
3832c     00          | 	byte	0
3832d                 | LR__5932
3832d     45          | 	byte	"E"
3832e     00          | 	byte	0
3832f                 | LR__5933
3832f     65          | 	byte	"e"
38330     00          | 	byte	0
38331                 | LR__5934
38331     30          | 	byte	"0"
38332     00          | 	byte	0
38333                 | LR__5935
38333     39          | 	byte	"9"
38334     00          | 	byte	0
38335                 | LR__5936
38335     24          | 	byte	"$"
38336     00          | 	byte	0
38337                 | LR__5937
38337     25          | 	byte	"%"
38338     00          | 	byte	0
38339                 | LR__5938
38339     2D          | 	byte	"-"
3833a     00          | 	byte	0
3833b                 | LR__5939
3833b     24          | 	byte	"$"
3833c     00          | 	byte	0
3833d                 | LR__5940
3833d     25          | 	byte	"%"
3833e     00          | 	byte	0
3833f                 | LR__5941
3833f     30          | 	byte	"0"
38340     00          | 	byte	0
38341                 | LR__5942
38341     39          | 	byte	"9"
38342     00          | 	byte	0
38343                 | LR__5943
38343     5F          | 	byte	"_"
38344     00          | 	byte	0
38345                 | LR__5944
38345     30          | 	byte	"0"
38346     00          | 	byte	0
38347                 | LR__5945
38347     39          | 	byte	"9"
38348     00          | 	byte	0
38349                 | LR__5946
38349     61          | 	byte	"a"
3834a     00          | 	byte	0
3834b                 | LR__5947
3834b     66          | 	byte	"f"
3834c     00          | 	byte	0
3834d                 | LR__5948
3834d     5F          | 	byte	"_"
3834e     00          | 	byte	0
3834f                 | LR__5949
3834f     30          | 	byte	"0"
38350     00          | 	byte	0
38351                 | LR__5950
38351     31          | 	byte	"1"
38352     00          | 	byte	0
38353                 | LR__5951
38353     5F          | 	byte	"_"
38354     00          | 	byte	0
38355                 | LR__5952
38355     30          | 	byte	"0"
38356     00          | 	byte	0
38357                 | LR__5953
38357     39          | 	byte	"9"
38358     00          | 	byte	0
38359                 | LR__5954
38359     5F          | 	byte	"_"
3835a     00          | 	byte	0
3835b                 | LR__5955
3835b     22          | 	byte	34
3835c     00          | 	byte	0
3835d                 | LR__5956
3835d     22          | 	byte	34
3835e     00          | 	byte	0
3835f                 | LR__5957
3835f     44 69 6D 3A 
38363     20 61 74 20 
38367     6C 69 6E 65 
3836b     20          | 	byte	"Dim: at line "
3836c     00          | 	byte	0
3836d                 | LR__5958
3836d     3A 20 77 61 
38371     72 6E 69 6E 
38375     67 3A 20 74 
38379     68 65 20 76 
3837d     61 72 69 61 
38381     62 6C 65 20 
38385     65 78 69 73 
38389     74 65 64 2E | 	byte	": warning: the variable existed."
3838d     00          | 	byte	0
3838e                 | LR__5959
3838e     28          | 	byte	"("
3838f     00          | 	byte	0
38390                 | LR__5960
38390     61 73       | 	byte	"as"
38392     00          | 	byte	0
38393                 | LR__5961
38393     61 73       | 	byte	"as"
38395     00          | 	byte	0
38396                 | LR__5962
38396     2C          | 	byte	","
38397     00          | 	byte	0
38398                 | LR__5963
38398     29          | 	byte	")"
38399     00          | 	byte	0
3839a                 | LR__5964
3839a     29          | 	byte	")"
3839b     00          | 	byte	0
3839c                 | LR__5965
3839c     61 73       | 	byte	"as"
3839e     00          | 	byte	0
3839f                 | LR__5966
3839f     62 79 74 65 | 	byte	"byte"
383a3     00          | 	byte	0
383a4                 | LR__5967
383a4     75 62 79 74 
383a8     65          | 	byte	"ubyte"
383a9     00          | 	byte	0
383aa                 | LR__5968
383aa     73 68 6F 72 
383ae     74          | 	byte	"short"
383af     00          | 	byte	0
383b0                 | LR__5969
383b0     75 73 68 6F 
383b4     72 74       | 	byte	"ushort"
383b6     00          | 	byte	0
383b7                 | LR__5970
383b7     6C 6F 6E 67 | 	byte	"long"
383bb     00          | 	byte	0
383bc                 | LR__5971
383bc     69 6E 74 65 
383c0     67 65 72    | 	byte	"integer"
383c3     00          | 	byte	0
383c4                 | LR__5972
383c4     75 6C 6F 6E 
383c8     67          | 	byte	"ulong"
383c9     00          | 	byte	0
383ca                 | LR__5973
383ca     69 6E 74 36 
383ce     34          | 	byte	"int64"
383cf     00          | 	byte	0
383d0                 | LR__5974
383d0     75 69 6E 74 
383d4     36 34       | 	byte	"uint64"
383d6     00          | 	byte	0
383d7                 | LR__5975
383d7     73 69 6E 67 
383db     6C 65       | 	byte	"single"
383dd     00          | 	byte	0
383de                 | LR__5976
383de     64 6F 75 62 
383e2     6C 65       | 	byte	"double"
383e4     00          | 	byte	0
383e5                 | LR__5977
383e5     73 74 72 69 
383e9     6E 67       | 	byte	"string"
383eb     00          | 	byte	0
383ec                 | LR__5978
383ec     74 6F       | 	byte	"to"
383ee     00          | 	byte	0
383ef                 | LR__5979
383ef     73 74 65 70 | 	byte	"step"
383f3     00          | 	byte	0
383f4                 | LR__5980
383f4     73 2E       | 	byte	"s."
383f6     00          | 	byte	0
383f7                 | LR__5981
383f7     73 2E       | 	byte	"s."
383f9     00          | 	byte	0
383fa                 | LR__5982
383fa     67 6F 74 6F | 	byte	"goto"
383fe     00          | 	byte	0
383ff                 | LR__5983
383ff     67 6F 73 75 
38403     62          | 	byte	"gosub"
38404     00          | 	byte	0
38405                 | LR__5984
38405     24          | 	byte	"$"
38406     00          | 	byte	0
38407                 | LR__5985
38407     26 68       | 	byte	"&h"
38409     00          | 	byte	0
3840a                 | LR__5986
3840a     25          | 	byte	"%"
3840b     00          | 	byte	0
3840c                 | LR__5987
3840c     26 62       | 	byte	"&b"
3840e     00          | 	byte	0
3840f                 | LR__5988
3840f                 | 	byte	
3840f     00          | 	byte	0
38410                 | LR__5989
38410     61 63 6F 73 
38414     3A 20       | 	byte	"acos: "
38416     00          | 	byte	0
38417                 | LR__5990
38417     61 73 63 3A 
3841b     20          | 	byte	"asc: "
3841c     00          | 	byte	0
3841d                 | LR__5991
3841d     61 73 63 3A 
38421     20          | 	byte	"asc: "
38422     00          | 	byte	0
38423                 | LR__5992
38423     61 73 69 6E 
38427     3A 20       | 	byte	"asin: "
38429     00          | 	byte	0
3842a                 | LR__5993
3842a     61 74 6E 3A 
3842e     20          | 	byte	"atn: "
3842f     00          | 	byte	0
38430                 | LR__5994
38430     62 6C 69 74 
38434     3A 20       | 	byte	"blit: "
38436     00          | 	byte	0
38437                 | LR__5995
38437     62 69 6E 24 
3843b     3A 20       | 	byte	"bin$: "
3843d     00          | 	byte	0
3843e                 | LR__5996
3843e     2F          | 	byte	"/"
3843f     00          | 	byte	0
38440                 | LR__5997
38440     2F 73 64 2F 
38444     62 69 6E 2F | 	byte	"/sd/bin/"
38448     00          | 	byte	0
38449                 | LR__5998
38449     53 79 73 74 
3844d     65 6D 20 65 
38451     72 72 6F 72 
38455     20          | 	byte	"System error "
38456     00          | 	byte	0
38457                 | LR__5999
38457     3A 20       | 	byte	": "
38459     00          | 	byte	0
3845a                 | LR__6000
3845a     2A          | 	byte	"*"
3845b     00          | 	byte	0
3845c                 | LR__6001
3845c     2E 2E       | 	byte	".."
3845e     00          | 	byte	0
3845f                 | LR__6002
3845f     2F          | 	byte	"/"
38460     00          | 	byte	0
38461                 | LR__6003
38461     2F          | 	byte	"/"
38462     00          | 	byte	0
38463                 | LR__6004
38463     53 79 73 74 
38467     65 6D 20 65 
3846b     72 72 6F 72 
3846f     20          | 	byte	"System error "
38470     00          | 	byte	0
38471                 | LR__6005
38471     3A 20       | 	byte	": "
38473     00          | 	byte	0
38474                 | LR__6006
38474     43 75 72 72 
38478     65 6E 74 20 
3847c     64 69 72 65 
38480     63 74 6F 72 
38484     79 3A 20    | 	byte	"Current directory: "
38487     00          | 	byte	0
38488                 | LR__6007
38488     2F          | 	byte	"/"
38489     00          | 	byte	0
3848a                 | LR__6008
3848a     53 79 73 74 
3848e     65 6D 20 65 
38492     72 72 6F 72 
38496     20          | 	byte	"System error "
38497     00          | 	byte	0
38498                 | LR__6009
38498     3A 20       | 	byte	": "
3849a     00          | 	byte	0
3849b                 | LR__6010
3849b     43 75 72 72 
3849f     65 6E 74 20 
384a3     64 69 72 65 
384a7     63 74 6F 72 
384ab     79 3A 20    | 	byte	"Current directory: "
384ae     00          | 	byte	0
384af                 | LR__6011
384af     2F          | 	byte	"/"
384b0     00          | 	byte	0
384b1                 | LR__6012
384b1     2F          | 	byte	"/"
384b2     00          | 	byte	0
384b3                 | LR__6013
384b3     2F          | 	byte	"/"
384b4     00          | 	byte	0
384b5                 | LR__6014
384b5     53 79 73 74 
384b9     65 6D 20 65 
384bd     72 72 6F 72 
384c1     20          | 	byte	"System error "
384c2     00          | 	byte	0
384c3                 | LR__6015
384c3     3A 20       | 	byte	": "
384c5     00          | 	byte	0
384c6                 | LR__6016
384c6     43 75 72 72 
384ca     65 6E 74 20 
384ce     64 69 72 65 
384d2     63 74 6F 72 
384d6     79 3A 20    | 	byte	"Current directory: "
384d9     00          | 	byte	0
384da                 | LR__6017
384da     63 68 72 24 
384de     3A 20       | 	byte	"chr$: "
384e0     00          | 	byte	0
384e1                 | LR__6018
384e1     63 68 61 6E 
384e5     6E 65 6C 23 
384e9     20 65 78 70 
384ed     65 63 74 65 
384f1     64          | 	byte	"channel# expected"
384f2     00          | 	byte	0
384f3                 | LR__6019
384f3     63 6F 67 69 
384f7     6E 69 74 3A 
384fb     20          | 	byte	"coginit: "
384fc     00          | 	byte	0
384fd                 | LR__6020
384fd     53 79 73 74 
38501     65 6D 20 65 
38505     72 72 6F 72 
38509     20 2D 20    | 	byte	"System error - "
3850c     00          | 	byte	0
3850d                 | LR__6021
3850d     20 69 6E 20 
38511     6C 69 6E 65 
38515     20          | 	byte	" in line "
38516     00          | 	byte	0
38517                 | LR__6022
38517     3A 20       | 	byte	": "
38519     00          | 	byte	0
3851a                 | LR__6023
3851a     2C 20 66 69 
3851e     6C 65 20 6E 
38522     61 6D 65 3A 
38526     20          | 	byte	", file name: "
38527     00          | 	byte	0
38528                 | LR__6024
38528     53 79 73 74 
3852c     65 6D 20 65 
38530     72 72 6F 72 
38534     20 2D 20    | 	byte	"System error - "
38537     00          | 	byte	0
38538                 | LR__6025
38538     20 69 6E 20 
3853c     6C 69 6E 65 
38540     20          | 	byte	" in line "
38541     00          | 	byte	0
38542                 | LR__6026
38542     3A 20       | 	byte	": "
38544     00          | 	byte	0
38545                 | LR__6027
38545     2C 20 66 69 
38549     6C 65 20 6E 
3854d     61 6D 65 3A 
38551     20          | 	byte	", file name: "
38552     00          | 	byte	0
38553                 | LR__6028
38553     63 6F 73 3A 
38557     20          | 	byte	"cos: "
38558     00          | 	byte	0
38559                 | LR__6029
38559                 | 	byte	
38559     00          | 	byte	0
3855a                 | LR__6030
3855a                 | 	byte	
3855a     00          | 	byte	0
3855b                 | LR__6031
3855b     2F 73 64 2F 
3855f     6D 65 64 69 
38563     61 2F 68 2F | 	byte	"/sd/media/h/"
38567     00          | 	byte	0
38568                 | LR__6032
38568     53 79 73 74 
3856c     65 6D 20 65 
38570     72 72 6F 72 
38574     20          | 	byte	"System error "
38575     00          | 	byte	0
38576                 | LR__6033
38576     3A 20       | 	byte	": "
38578     00          | 	byte	0
38579                 | LR__6034
38579                 | 	byte	
38579     00          | 	byte	0
3857a                 | LR__6035
3857a                 | 	byte	
3857a     00          | 	byte	0
3857b                 | LR__6036
3857b     2F 73 64 2F 
3857f     6D 65 64 69 
38583     61 2F 73 2F | 	byte	"/sd/media/s/"
38587     00          | 	byte	0
38588                 | LR__6037
38588     53 79 73 74 
3858c     65 6D 20 65 
38590     72 72 6F 72 
38594     20          | 	byte	"System error "
38595     00          | 	byte	0
38596                 | LR__6038
38596     3A 20       | 	byte	": "
38598     00          | 	byte	0
38599                 | LR__6039
38599     2F          | 	byte	"/"
3859a     00          | 	byte	0
3859b                 | LR__6040
3859b     2F          | 	byte	"/"
3859c     00          | 	byte	0
3859d                 | LR__6041
3859d     2F          | 	byte	"/"
3859e     00          | 	byte	0
3859f                 | LR__6042
3859f     43 61 6E 6E 
385a3     6F 74 20 64 
385a7     65 6C 65 74 
385ab     65 20 66 69 
385af     6C 65 20 6F 
385b3     72 20 66 69 
385b7     6C 65 20 64 
385bb     6F 65 73 6E 
385bf     27 74 20 65 
385c3     78 69 73 74 
385c7     3A 20 73 79 
385cb     73 74 65 6D 
385cf     20 65 72 72 
385d3     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
385d6     00          | 	byte	0
385d7                 | LR__6043
385d7     43 75 72 72 
385db     65 6E 74 20 
385df     64 69 72 65 
385e3     63 74 6F 72 
385e7     79 3A 20    | 	byte	"Current directory: "
385ea     00          | 	byte	0
385eb                 | LR__6044
385eb                 | 	byte	
385eb     00          | 	byte	0
385ec                 | LR__6045
385ec     2A          | 	byte	"*"
385ed     00          | 	byte	0
385ee                 | LR__6046
385ee                 | 	byte	
385ee     00          | 	byte	0
385ef                 | LR__6047
385ef     5B 64 69 72 
385f3     5D 20       | 	byte	"[dir] "
385f5     00          | 	byte	0
385f6                 | LR__6048
385f6     4D 6F 72 65 
385fa     20 74 68 61 
385fe     6E 20 31 32 
38602     38 20 65 6E 
38606     74 72 69 65 
3860a     73 20 66 6F 
3860e     75 6E 64 3A 
38612     20 63 6C 65 
38616     61 6E 20 79 
3861a     6F 75 72 20 
3861e     64 69 72 65 
38622     63 74 6F 72 
38626     79          | 	byte	"More than 128 entries found: clean your directory"
38627     00          | 	byte	0
38628                 | LR__6049
38628     2A          | 	byte	"*"
38629     00          | 	byte	0
3862a                 | LR__6050
3862a                 | 	byte	
3862a     00          | 	byte	0
3862b                 | LR__6051
3862b     4D 6F 72 65 
3862f     20 74 68 61 
38633     6E 20 31 32 
38637     38 20 65 6E 
3863b     74 72 69 65 
3863f     73 20 66 6F 
38643     75 6E 64 3A 
38647     20 63 6C 65 
3864b     61 6E 20 79 
3864f     6F 75 72 20 
38653     64 69 72 65 
38657     63 74 6F 72 
3865b     79          | 	byte	"More than 128 entries found: clean your directory"
3865c     00          | 	byte	0
3865d                 | LR__6052
3865d     45 72 72 6F 
38661     72 20       | 	byte	"Error "
38663     00          | 	byte	0
38664                 | LR__6053
38664     3A 20       | 	byte	": "
38666     00          | 	byte	0
38667                 | LR__6054
38667     66 69 6E 64 
3866b     66 69 72 73 
3866f     74 3A 20    | 	byte	"findfirst: "
38672     00          | 	byte	0
38673                 | LR__6055
38673     66 69 6E 64 
38677     66 69 72 73 
3867b     74 3A 20    | 	byte	"findfirst: "
3867e     00          | 	byte	0
3867f                 | LR__6056
3867f     66 69 6E 64 
38683     66 69 72 73 
38687     74 3A 20    | 	byte	"findfirst: "
3868a     00          | 	byte	0
3868b                 | LR__6057
3868b                 | 	byte	
3868b     00          | 	byte	0
3868c                 | LR__6058
3868c     66 69 6E 64 
38690     66 69 72 73 
38694     74 3A 20    | 	byte	"findfirst: "
38697     00          | 	byte	0
38698                 | LR__6059
38698                 | 	byte	
38698     00          | 	byte	0
38699                 | LR__6060
38699     64 69 72    | 	byte	"dir"
3869c     00          | 	byte	0
3869d                 | LR__6061
3869d     66 69 6E 64 
386a1     6E 65 78 74 
386a5     3A 20       | 	byte	"findnext: "
386a7     00          | 	byte	0
386a8                 | LR__6062
386a8     67 65 74 63 
386ac     6F 6C 6F 72 
386b0     20          | 	byte	"getcolor "
386b1     00          | 	byte	0
386b2                 | LR__6063
386b2     67 65 74 65 
386b6     6E 76 73 75 
386ba     73 74 61 69 
386be     6E 3A 20    | 	byte	"getenvsustain: "
386c1     00          | 	byte	0
386c2                 | LR__6064
386c2     67 65 74 70 
386c6     69 78 65 6C 
386ca     3A 20       | 	byte	"getpixel: "
386cc     00          | 	byte	0
386cd                 | LR__6065
386cd     68 65 78 24 
386d1     3A 20       | 	byte	"hex$: "
386d3     00          | 	byte	0
386d4                 | LR__6066
386d4                 | 	byte	
386d4     00          | 	byte	0
386d5                 | LR__6067
386d5     49 6E 20 69 
386d9     6E 70 75 74 
386dd     3A 20       | 	byte	"In input: "
386df     00          | 	byte	0
386e0                 | LR__6068
386e0     2C          | 	byte	","
386e1     00          | 	byte	0
386e2                 | LR__6069
386e2                 | 	byte	
386e2     00          | 	byte	0
386e3                 | LR__6070
386e3                 | 	byte	
386e3     00          | 	byte	0
386e4                 | LR__6071
386e4     6C 65 66 74 
386e8     24 3A 20    | 	byte	"left$: "
386eb     00          | 	byte	0
386ec                 | LR__6072
386ec     6C 65 66 74 
386f0     24 3A 20    | 	byte	"left$: "
386f3     00          | 	byte	0
386f4                 | LR__6073
386f4     6C 65 6E 3A 
386f8     20          | 	byte	"len: "
386f9     00          | 	byte	0
386fa                 | LR__6074
386fa     6C 65 6E 3A 
386fe     20          | 	byte	"len: "
386ff     00          | 	byte	0
38700                 | LR__6075
38700                 | 	byte	
38700     00          | 	byte	0
38701                 | LR__6076
38701     2F          | 	byte	"/"
38702     00          | 	byte	0
38703                 | LR__6077
38703     2F          | 	byte	"/"
38704     00          | 	byte	0
38705                 | LR__6078
38705     2E 62 61 73 | 	byte	".bas"
38709     00          | 	byte	0
3870a                 | LR__6079
3870a     53 79 73 74 
3870e     65 6D 20 65 
38712     72 72 6F 72 
38716     20          | 	byte	"System error "
38717     00          | 	byte	0
38718                 | LR__6080
38718     3A 20       | 	byte	": "
3871a     00          | 	byte	0
3871b                 | LR__6081
3871b     2E 62 61 73 | 	byte	".bas"
3871f     00          | 	byte	0
38720                 | LR__6082
38720     2F          | 	byte	"/"
38721     00          | 	byte	0
38722                 | LR__6083
38722                 | 	byte	
38722     00          | 	byte	0
38723                 | LR__6084
38723     4C 6F 61 64 
38727     65 64 20    | 	byte	"Loaded "
3872a     00          | 	byte	0
3872b                 | LR__6085
3872b     2F          | 	byte	"/"
3872c     00          | 	byte	0
3872d                 | LR__6086
3872d     6C 6F 67 3A 
38731     20          | 	byte	"log: "
38732     00          | 	byte	0
38733                 | LR__6087
38733     6D 69 64 24 
38737     3A 20       | 	byte	"mid$: "
38739     00          | 	byte	0
3873a                 | LR__6088
3873a     6D 69 64 24 
3873e     3A 20       | 	byte	"mid$: "
38740     00          | 	byte	0
38741                 | LR__6089
38741     43 61 6E 6E 
38745     6F 74 20 63 
38749     72 65 61 74 
3874d     65 20 61 20 
38751     64 69 72 65 
38755     63 74 6F 72 
38759     79 3A 20 73 
3875d     79 73 74 65 
38761     6D 20 65 72 
38765     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
38769     00          | 	byte	0
3876a                 | LR__6090
3876a     20 42 41 53 
3876e     49 43 20 62 
38772     79 74 65 73 
38776     20 66 72 65 
3877a     65          | 	byte	" BASIC bytes free"
3877b     00          | 	byte	0
3877c                 | LR__6091
3877c                 | 	byte	
3877c     00          | 	byte	0
3877d                 | LR__6092
3877d                 | 	byte	
3877d     00          | 	byte	0
3877e                 | LR__6093
3877e                 | 	byte	
3877e     00          | 	byte	0
3877f                 | LR__6094
3877f     6E 6F 6E 61 
38783     6D 65 2E 62 
38787     61 73       | 	byte	"noname.bas"
38789     00          | 	byte	0
3878a                 | LR__6095
3878a     66 69 6C 65 
3878e     6E 61 6D 65 
38792     20 65 78 70 
38796     65 63 74 65 
3879a     64          | 	byte	"filename expected"
3879b     00          | 	byte	0
3879c                 | LR__6096
3879c     72 65 61 64 | 	byte	"read"
387a0     00          | 	byte	0
387a1                 | LR__6097
387a1     77 72 69 74 
387a5     65          | 	byte	"write"
387a6     00          | 	byte	0
387a7                 | LR__6098
387a7     61 70 70 65 
387ab     6E 64       | 	byte	"append"
387ad     00          | 	byte	0
387ae                 | LR__6099
387ae     63 68 61 6E 
387b2     6E 65 6C 23 
387b6     20 65 78 70 
387ba     65 63 74 65 
387be     64          | 	byte	"channel# expected"
387bf     00          | 	byte	0
387c0                 | LR__6100
387c0     4F 70 65 6E 
387c4     3A 20 69 6E 
387c8     76 61 6C 69 
387cc     64 20 6D 6F 
387d0     64 65       | 	byte	"Open: invalid mode"
387d2     00          | 	byte	0
387d3                 | LR__6101
387d3     70 61 64 72 
387d7     78 3A 20    | 	byte	"padrx: "
387da     00          | 	byte	0
387db                 | LR__6102
387db     70 61 64 72 
387df     79 3A 20    | 	byte	"padry: "
387e2     00          | 	byte	0
387e3                 | LR__6103
387e3     70 61 64 72 
387e7     7A 3A 20    | 	byte	"padrz: "
387ea     00          | 	byte	0
387eb                 | LR__6104
387eb     70 61 64 73 
387ef     3A 20       | 	byte	"pads: "
387f1     00          | 	byte	0
387f2                 | LR__6105
387f2     70 61 64 77 
387f6     3A 20       | 	byte	"padw: "
387f8     00          | 	byte	0
387f9                 | LR__6106
387f9     70 61 64 78 
387fd     3A 20       | 	byte	"padx: "
387ff     00          | 	byte	0
38800                 | LR__6107
38800     70 61 64 79 
38804     3A 20       | 	byte	"pady: "
38806     00          | 	byte	0
38807                 | LR__6108
38807     70 61 64 7A 
3880b     3A 20       | 	byte	"padz: "
3880d     00          | 	byte	0
3880e                 | LR__6109
3880e     50 72 69 6E 
38812     74 20 74 6F 
38816     20 63 68 61 
3881a     6E 6E 65 6C 
3881e     20 28 6E 6F 
38822     74 20 79 65 
38826     74 20 69 6D 
3882a     70 6C 65 6D 
3882e     65 6E 74 65 
38832     64 29       | 	byte	"Print to channel (not yet implemented)"
38834     00          | 	byte	0
38835                 | LR__6110
38835                 | 	byte	
38835     00          | 	byte	0
38836                 | LR__6111
38836     64 61 74 61 | 	byte	"data"
3883a     00          | 	byte	0
3883b                 | LR__6112
3883b                 | 	byte	
3883b     00          | 	byte	0
3883c                 | LR__6113
3883c     49 6E 20 72 
38840     65 61 64 3A 
38844     20          | 	byte	"In read: "
38845     00          | 	byte	0
38846                 | LR__6114
38846                 | 	byte	
38846     00          | 	byte	0
38847                 | LR__6115
38847                 | 	byte	
38847     00          | 	byte	0
38848                 | LR__6116
38848     27          | 	byte	"'"
38849     00          | 	byte	0
3884a                 | LR__6117
3884a     2C          | 	byte	","
3884b     00          | 	byte	0
3884c                 | LR__6118
3884c                 | 	byte	
3884c     00          | 	byte	0
3884d                 | LR__6119
3884d                 | 	byte	
3884d     00          | 	byte	0
3884e                 | LR__6120
3884e                 | 	byte	
3884e     00          | 	byte	0
3884f                 | LR__6121
3884f                 | 	byte	
3884f     00          | 	byte	0
38850                 | LR__6122
38850                 | 	byte	
38850     00          | 	byte	0
38851                 | LR__6123
38851     72 69 67 68 
38855     74 24 3A 20 | 	byte	"right$: "
38859     00          | 	byte	0
3885a                 | LR__6124
3885a     72 69 67 68 
3885e     74 24 3A 20 | 	byte	"right$: "
38862     00          | 	byte	0
38863                 | LR__6125
38863     72 6E 64 3A 
38867     20          | 	byte	"rnd: "
38868     00          | 	byte	0
38869                 | LR__6126
38869     72 6E 64 3A 
3886d     20          | 	byte	"rnd: "
3886e     00          | 	byte	0
3886f                 | LR__6127
3886f                 | 	byte	
3886f     00          | 	byte	0
38870                 | LR__6128
38870     53 74 6F 70 
38874     70 65 64 20 
38878     61 74 20 6C 
3887c     69 6E 65 20 | 	byte	"Stopped at line "
38880     00          | 	byte	0
38881                 | LR__6129
38881                 | 	byte	
38881     00          | 	byte	0
38882                 | LR__6130
38882     2F          | 	byte	"/"
38883     00          | 	byte	0
38884                 | LR__6131
38884                 | 	byte	
38884     00          | 	byte	0
38885                 | LR__6132
38885     53 61 76 65 
38889     64 20 61 73 
3888d     20          | 	byte	"Saved as "
3888e     00          | 	byte	0
3888f                 | LR__6133
3888f     2F          | 	byte	"/"
38890     00          | 	byte	0
38891                 | LR__6134
38891     73 65 74 63 
38895     6F 6C 6F 72 
38899     3A 20       | 	byte	"setcolor: "
3889b     00          | 	byte	0
3889c                 | LR__6135
3889c     73 69 6E 3A 
388a0     20          | 	byte	"sin: "
388a1     00          | 	byte	0
388a2                 | LR__6136
388a2     73 71 72 3A 
388a6     20          | 	byte	"sqr: "
388a7     00          | 	byte	0
388a8                 | LR__6137
388a8     73 74 69 63 
388ac     6B 3A 20    | 	byte	"stick: "
388af     00          | 	byte	0
388b0                 | LR__6138
388b0     73 74 72 69 
388b4     67 3A 20    | 	byte	"strig: "
388b7     00          | 	byte	0
388b8                 | LR__6139
388b8     74 61 6E 3A 
388bc     20          | 	byte	"tan: "
388bd     00          | 	byte	0
388be                 | LR__6140
388be     76 61 6C 3A 
388c2     20          | 	byte	"val: "
388c3     00          | 	byte	0
388c4                 | LR__6141
388c4     76 61 6C 3A 
388c8     20          | 	byte	"val: "
388c9     00          | 	byte	0
388ca                 | LR__6142
388ca     24          | 	byte	"$"
388cb     00          | 	byte	0
388cc                 | LR__6143
388cc     26 68       | 	byte	"&h"
388ce     00          | 	byte	0
388cf                 | LR__6144
388cf     25          | 	byte	"%"
388d0     00          | 	byte	0
388d1                 | LR__6145
388d1     26 62       | 	byte	"&b"
388d3     00          | 	byte	0
388d4                 | LR__6146
388d4                 | 	byte	
388d4     00          | 	byte	0
388d5                 | LR__6147
388d5     45 78 70 65 
388d9     63 74 65 64 
388dd     20 6E 75 6D 
388e1     62 65 72 2C 
388e5     20 67 6F 74 
388e9     20 73 6F 6D 
388ed     65 74 68 69 
388f1     6E 67 20 65 
388f5     6C 73 65    | 	byte	"Expected number, got something else"
388f8     00          | 	byte	0
388f9                 | LR__6148
388f9     43 61 6E 6E 
388fd     6F 74 20 61 
38901     64 64 20 61 
38905     20 6E 75 6D 
38909     62 65 72 20 
3890d     74 6F 20 61 
38911     20 73 74 72 
38915     69 6E 67    | 	byte	"Cannot add a number to a string"
38918     00          | 	byte	0
38919                 | LR__6149
38919     43 61 6E 6E 
3891d     6F 74 20 73 
38921     75 62 73 74 
38925     72 61 63 74 
38929     20 73 74 72 
3892d     69 6E 67 73 | 	byte	"Cannot substract strings"
38931     00          | 	byte	0
38932                 | LR__6150
38932     55 6E 6B 6E 
38936     6F 77 6E 20 
3893a     65 72 72 6F 
3893e     72 20 77 68 
38942     69 6C 65 20 
38946     61 64 64 69 
3894a     6E 67       | 	byte	"Unknown error while adding"
3894c     00          | 	byte	0
3894d                 | LR__6151
3894d     55 6E 6B 6E 
38951     6F 77 6E 20 
38955     65 72 72 6F 
38959     72 20 77 68 
3895d     69 6C 65 20 
38961     73 75 62 73 
38965     74 72 61 63 
38969     74 69 6E 67 | 	byte	"Unknown error while substracting"
3896d     00          | 	byte	0
3896e                 | LR__6152
3896e     43 61 6E 6E 
38972     6F 74 20 64 
38976     6F 20 6C 6F 
3897a     67 69 63 20 
3897e     6F 70 65 72 
38982     61 74 69 6F 
38986     6E 20 6F 6E 
3898a     20 73 74 72 
3898e     69 6E 67 20 
38992     6F 72 20 66 
38996     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
3899a     00          | 	byte	0
3899b                 | LR__6153
3899b     55 6E 6B 6E 
3899f     6F 77 6E 20 
389a3     65 72 72 6F 
389a7     72 20 77 68 
389ab     69 6C 65 20 
389af     64 6F 69 6E 
389b3     67 20 6C 6F 
389b7     67 69 63 20 
389bb     6F 70 65 72 
389bf     61 74 69 6F 
389c3     6E          | 	byte	"Unknown error while doing logic operation"
389c4     00          | 	byte	0
389c5                 | LR__6154
389c5     43 61 6E 6E 
389c9     6F 74 20 6D 
389cd     75 6C 74 69 
389d1     70 6C 79 20 
389d5     73 74 72 69 
389d9     6E 67 73    | 	byte	"Cannot multiply strings"
389dc     00          | 	byte	0
389dd                 | LR__6155
389dd     55 6E 6B 6E 
389e1     6F 77 6E 20 
389e5     65 72 72 6F 
389e9     72 20 77 68 
389ed     69 6C 65 20 
389f1     6D 75 6C 74 
389f5     69 70 6C 79 
389f9     69 6E 67    | 	byte	"Unknown error while multiplying"
389fc     00          | 	byte	0
389fd                 | LR__6156
389fd     43 61 6E 6E 
38a01     6F 74 20 64 
38a05     69 76 69 64 
38a09     65 20 73 74 
38a0d     72 69 6E 67 
38a11     73          | 	byte	"Cannot divide strings"
38a12     00          | 	byte	0
38a13                 | LR__6157
38a13     55 6E 6B 6E 
38a17     6F 77 6E 20 
38a1b     65 72 72 6F 
38a1f     72 20 77 68 
38a23     69 6C 65 20 
38a27     64 69 76 69 
38a2b     64 69 6E 67 | 	byte	"Unknown error while dividing"
38a2f     00          | 	byte	0
38a30                 | LR__6158
38a30     43 61 6E 6E 
38a34     6F 74 20 63 
38a38     6F 6D 70 75 
38a3c     74 65 20 61 
38a40     20 70 6F 77 
38a44     65 72 20 6F 
38a48     66 20 61 20 
38a4c     73 74 72 69 
38a50     6E 67       | 	byte	"Cannot compute a power of a string"
38a52     00          | 	byte	0
38a53                 | LR__6159
38a53     55 6E 6B 6E 
38a57     6F 77 6E 20 
38a5b     65 72 72 6F 
38a5f     72 20 77 68 
38a63     69 6C 65 20 
38a67     63 6F 6D 70 
38a6b     75 74 69 6E 
38a6f     67 20 61 20 
38a73     70 6F 77 65 
38a77     72          | 	byte	"Unknown error while computing a power"
38a78     00          | 	byte	0
38a79                 | LR__6160
38a79     52 69 67 68 
38a7d     74 20 70 61 
38a81     72 65 6E 74 
38a85     68 65 73 69 
38a89     73 20 65 78 
38a8d     70 65 63 74 
38a91     65 64       | 	byte	"Right parenthesis expected"
38a93     00          | 	byte	0
38a94                 | LR__6161
38a94     45 78 70 65 
38a98     63 74 65 64 
38a9c     20 73 74 72 
38aa0     69 6E 67    | 	byte	"Expected string"
38aa3     00          | 	byte	0
38aa4                 | LR__6162
38aa4     45 78 70 65 
38aa8     63 74 65 64 
38aac     20 66 6C 6F 
38ab0     61 74       | 	byte	"Expected float"
38ab2     00          | 	byte	0
38ab3                 | LR__6163
38ab3     45 78 70 65 
38ab7     63 74 65 64 
38abb     20 75 6E 73 
38abf     69 67 6E 65 
38ac3     64 20 69 6E 
38ac7     74 65 67 65 
38acb     72          | 	byte	"Expected unsigned integer"
38acc     00          | 	byte	0
38acd                 | LR__6164
38acd     45 78 70 65 
38ad1     63 74 65 64 
38ad5     20 69 6E 74 
38ad9     65 67 65 72 | 	byte	"Expected integer"
38add     00          | 	byte	0
38ade                 | LR__6165
38ade     4E 6F 20 6D 
38ae2     6F 72 65 20 
38ae6     76 61 72 69 
38aea     61 62 6C 65 
38aee     20 73 6C 6F 
38af2     74 73       | 	byte	"No more variable slots"
38af4     00          | 	byte	0
38af5                 | LR__6166
38af5     56 61 72 69 
38af9     61 62 6C 65 
38afd     20 6E 6F 74 
38b01     20 66 6F 75 
38b05     6E 64       | 	byte	"Variable not found"
38b07     00          | 	byte	0
38b08                 | LR__6167
38b08     43 6F 6D 6D 
38b0c     61 20 65 78 
38b10     70 65 63 74 
38b14     65 64       | 	byte	"Comma expected"
38b16     00          | 	byte	0
38b17                 | LR__6168
38b17     43 6F 6D 6D 
38b1b     61 20 6F 72 
38b1f     20 73 65 6D 
38b23     69 63 6F 6C 
38b27     6F 6E 20 65 
38b2b     78 70 65 63 
38b2f     74 65 64    | 	byte	"Comma or semicolon expected"
38b32     00          | 	byte	0
38b33                 | LR__6169
38b33     55 6E 6B 6E 
38b37     6F 77 6E 20 
38b3b     63 6F 6D 6D 
38b3f     61 6E 64    | 	byte	"Unknown command"
38b42     00          | 	byte	0
38b43                 | LR__6170
38b43     53 74 61 63 
38b47     6B 20 75 6E 
38b4b     64 65 72 66 
38b4f     6C 6F 77    | 	byte	"Stack underflow"
38b52     00          | 	byte	0
38b53                 | LR__6171
38b53     43 61 6E 6E 
38b57     6F 74 20 65 
38b5b     78 65 63 75 
38b5f     74 65 20 67 
38b63     6F 74 6F 20 
38b67     6F 72 20 67 
38b6b     6F 73 75 62 
38b6f     20 69 6E 20 
38b73     74 68 65 20 
38b77     69 6D 6D 65 
38b7b     64 69 61 74 
38b7f     65 20 6D 6F 
38b83     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
38b85     00          | 	byte	0
38b86                 | LR__6172
38b86     43 61 6E 6E 
38b8a     6F 74 20 6C 
38b8e     6F 61 64 20 
38b92     66 72 6F 6D 
38b96     20 74 68 69 
38b9a     73 20 66 69 
38b9e     6C 65       | 	byte	"Cannot load from this file"
38ba0     00          | 	byte	0
38ba1                 | LR__6173
38ba1     54 68 65 20 
38ba5     70 72 6F 67 
38ba9     72 61 6D 20 
38bad     69 73 20 65 
38bb1     6D 70 74 79 | 	byte	"The program is empty"
38bb5     00          | 	byte	0
38bb6                 | LR__6174
38bb6     49 66 20 61 
38bba     66 74 65 72 
38bbe     20 69 66    | 	byte	"If after if"
38bc1     00          | 	byte	0
38bc2                 | LR__6175
38bc2     45 6D 70 74 
38bc6     79 20 65 78 
38bca     70 72 65 73 
38bce     73 69 6F 6E | 	byte	"Empty expression"
38bd2     00          | 	byte	0
38bd3                 | LR__6176
38bd3     53 74 72 69 
38bd7     6E 67 20 65 
38bdb     78 70 65 63 
38bdf     74 65 64    | 	byte	"String expected"
38be2     00          | 	byte	0
38be3                 | LR__6177
38be3     49 6E 74 65 
38be7     72 70 72 65 
38beb     74 65 72 20 
38bef     69 6E 74 65 
38bf3     72 6E 61 6C 
38bf7     20 65 72 72 
38bfb     6F 72       | 	byte	"Interpreter internal error"
38bfd     00          | 	byte	0
38bfe                 | LR__6178
38bfe     45 78 70 65 
38c02     63 74 65 64 
38c06     20 61 73 73 
38c0a     69 67 6E    | 	byte	"Expected assign"
38c0d     00          | 	byte	0
38c0e                 | LR__6179
38c0e     45 78 70 65 
38c12     63 74 65 64 
38c16     20 27 74 6F 
38c1a     27          | 	byte	"Expected 'to'"
38c1b     00          | 	byte	0
38c1c                 | LR__6180
38c1c     45 78 70 65 
38c20     63 74 65 64 
38c24     20 69 6E 74 
38c28     65 67 65 72 
38c2c     20 76 61 72 
38c30     69 61 62 6C 
38c34     65          | 	byte	"Expected integer variable"
38c35     00          | 	byte	0
38c36                 | LR__6181
38c36     55 6E 69 6E 
38c3a     69 74 69 61 
38c3e     6C 69 7A 65 
38c42     64 20 76 61 
38c46     72 69 61 62 
38c4a     6C 65 20 69 
38c4e     6E 20 27 6E 
38c52     65 78 74 27 
38c56     2C 20 75 73 
38c5a     65 20 27 66 
38c5e     6F 72 27 20 
38c62     62 65 66 6F 
38c66     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
38c68     00          | 	byte	0
38c69                 | LR__6182
38c69     4E 6F 20 6D 
38c6d     6F 72 65 20 
38c71     73 6C 6F 74 
38c75     73 20 66 6F 
38c79     72 20 27 66 
38c7d     6F 72 27    | 	byte	"No more slots for 'for'"
38c80     00          | 	byte	0
38c81                 | LR__6183
38c81     27 4E 65 78 
38c85     74 27 20 64 
38c89     6F 65 73 6E 
38c8d     27 74 20 6D 
38c91     61 74 63 68 
38c95     20 27 66 6F 
38c99     72 27       | 	byte	"'Next' doesn't match 'for'"
38c9b     00          | 	byte	0
38c9c                 | LR__6184
38c9c     27 47 6F 74 
38ca0     6F 27 20 74 
38ca4     61 72 67 65 
38ca8     74 20 6C 69 
38cac     6E 65 20 6E 
38cb0     6F 74 20 66 
38cb4     6F 75 6E 64 | 	byte	"'Goto' target line not found"
38cb8     00          | 	byte	0
38cb9                 | LR__6185
38cb9     42 61 64 20 
38cbd     6E 75 6D 62 
38cc1     65 72 20 6F 
38cc5     66 20 70 61 
38cc9     72 61 6D 65 
38ccd     74 65 72 73 | 	byte	"Bad number of parameters"
38cd1     00          | 	byte	0
38cd2                 | LR__6186
38cd2     46 75 6E 63 
38cd6     74 69 6F 6E 
38cda     20 75 6E 64 
38cde     65 66 69 6E 
38ce2     65 64 20 66 
38ce6     6F 72 20 73 
38cea     74 72 69 6E 
38cee     67 73       | 	byte	"Function undefined for strings"
38cf0     00          | 	byte	0
38cf1                 | LR__6187
38cf1     42 61 64 20 
38cf5     70 61 72 61 
38cf9     6D 65 74 65 
38cfd     72          | 	byte	"Bad parameter"
38cfe     00          | 	byte	0
38cff                 | LR__6188
38cff     43 61 6E 6E 
38d03     6F 74 20 64 
38d07     65 63 6C 61 
38d0b     72 65 20 61 
38d0f     6E 20 61 72 
38d13     72 61 79 3A 
38d17     20 74 68 65 
38d1b     20 76 61 72 
38d1f     69 61 62 6C 
38d23     65 20 65 78 
38d27     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
38d2b     00          | 	byte	0
38d2c                 | LR__6189
38d2c     45 78 70 65 
38d30     63 74 65 64 
38d34     20 27 28 27 | 	byte	"Expected '('"
38d38     00          | 	byte	0
38d39                 | LR__6190
38d39     45 78 70 65 
38d3d     63 74 65 64 
38d41     20 27 29 27 
38d45     20 6F 72 20 
38d49     27 2C 27    | 	byte	"Expected ')' or ','"
38d4c     00          | 	byte	0
38d4d                 | LR__6191
38d4d     4E 6F 20 6D 
38d51     6F 72 65 20 
38d55     74 68 61 6E 
38d59     20 33 20 64 
38d5d     69 6D 65 6E 
38d61     73 69 6F 6E 
38d65     73 20 73 75 
38d69     70 70 6F 72 
38d6d     74 65 64    | 	byte	"No more than 3 dimensions supported"
38d70     00          | 	byte	0
38d71                 | LR__6192
38d71     56 61 72 69 
38d75     61 62 6C 65 
38d79     20 6E 61 6D 
38d7d     65 20 65 78 
38d81     70 65 63 74 
38d85     65 64       | 	byte	"Variable name expected"
38d87     00          | 	byte	0
38d88                 | LR__6193
38d88     54 79 70 65 
38d8c     20 6E 61 6D 
38d90     65 20 65 78 
38d94     70 65 63 74 
38d98     65 64       | 	byte	"Type name expected"
38d9a     00          | 	byte	0
38d9b                 | LR__6194
38d9b     54 79 70 65 
38d9f     20 6E 6F 74 
38da3     20 73 75 70 
38da7     70 6F 72 74 
38dab     65 64 20 79 
38daf     65 74       | 	byte	"Type not supported yet"
38db1     00          | 	byte	0
38db2                 | LR__6195
38db2     41 72 72 61 
38db6     79 20 69 6E 
38dba     64 65 78 20 
38dbe     6F 75 74 20 
38dc2     6F 66 20 72 
38dc6     61 6E 67 65 | 	byte	"Array index out of range"
38dca     00          | 	byte	0
38dcb                 | LR__6196
38dcb     42 61 64 20 
38dcf     74 79 70 65 
38dd3     20 77 68 69 
38dd7     6C 65 20 61 
38ddb     73 73 69 67 
38ddf     6E 69 6E 67 
38de3     20 74 6F 20 
38de7     61 72 72 61 
38deb     79          | 	byte	"Bad type while assigning to array"
38dec     00          | 	byte	0
38ded                 | LR__6197
38ded     54 6F 6F 20 
38df1     6D 61 6E 79 
38df5     20 76 61 72 
38df9     69 61 62 6C 
38dfd     65 73       | 	byte	"Too many variables"
38dff     00          | 	byte	0
38e00                 | LR__6198
38e00     27 54 68 65 
38e04     6E 27 20 65 
38e08     78 70 65 63 
38e0c     74 65 64    | 	byte	"'Then' expected"
38e0f     00          | 	byte	0
38e10                 | LR__6199
38e10     44 69 72 65 
38e14     63 74 6F 72 
38e18     79 20 64 6F 
38e1c     65 73 6E 27 
38e20     74 20 65 78 
38e24     69 73 74    | 	byte	"Directory doesn't exist"
38e27     00          | 	byte	0
38e28                 | LR__6200
38e28     55 6E 65 78 
38e2c     70 65 63 74 
38e30     65 64 20 65 
38e34     6E 64 20 6F 
38e38     66 20 6C 69 
38e3c     6E 65       | 	byte	"Unexpected end of line"
38e3e     00          | 	byte	0
38e3f                 | LR__6201
38e3f     4E 6F 20 6D 
38e43     6F 72 65 20 
38e47     64 61 74 61 | 	byte	"No more data"
38e4b     00          | 	byte	0
38e4c                 | LR__6202
38e4c     45 72 72 6F 
38e50     72 20       | 	byte	"Error "
38e52     00          | 	byte	0
38e53                 | LR__6203
38e53     20 2D 20    | 	byte	" - "
38e56     00          | 	byte	0
38e57                 | LR__6204
38e57     20 69 6E 20 
38e5b     6C 69 6E 65 
38e5f     20          | 	byte	" in line "
38e60     00          | 	byte	0
38e61                 | LR__6205
38e61                 | 	byte	
38e61     00          | 	byte	0
38e62                 | LR__6206
38e62     2F 73 64    | 	byte	"/sd"
38e65     00          | 	byte	0
38e66                 | LR__6207
38e66     2F 73 64 2F 
38e6a     62 61 73    | 	byte	"/sd/bas"
38e6d     00          | 	byte	0
38e6e                 | LR__6208
38e6e     2F 73 64 2F 
38e72     62 61 73    | 	byte	"/sd/bas"
38e75     00          | 	byte	0
38e76                 | LR__6209
38e76     20 42 41 53 
38e7a     49 43 20 62 
38e7e     79 74 65 73 
38e82     20 66 72 65 
38e86     65          | 	byte	" BASIC bytes free"
38e87     00          | 	byte	0
38e88                 | LR__6210
38e88     52 65 61 64 
38e8c     79          | 	byte	"Ready"
38e8d     00          | 	byte	0
38e8e                 | LR__6211
38e8e     6E 6F 6E 61 
38e92     6D 65 2E 62 
38e96     61 73       | 	byte	"noname.bas"
38e98     00          | 	byte	0
38e99                 | LR__6212
38e99     2F 73 64 2F 
38e9d     62 61 73 2F 
38ea1     61 75 74 6F 
38ea5     72 75 6E 2E 
38ea9     62 61 73    | 	byte	"/sd/bas/autorun.bas"
38eac     00          | 	byte	0
38ead                 | LR__6213
38ead     72 75 6E 20 
38eb1     61 75 74 6F 
38eb5     72 75 6E 2E 
38eb9     62 61 73    | 	byte	"run autorun.bas"
38ebc     00          | 	byte	0
38ebd                 | LR__6214
38ebd                 | 	byte	
38ebd     00          | 	byte	0
38ebe     00 00       | 	alignl
38ec0                 | _dat_
38ec0     00 00 00 00 
38ec4     00 00 00 00 
38ec8     00 00 00 00 
38ecc     00 00 00 00 | 	byte	$00[16]
38ed0     61 41 17 0E 
38ed4     62 42 00 00 
38ed8     63 43 19 10 
38edc     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
38ee0     65 45 18 0F 
38ee4     66 46 00 00 
38ee8     67 47 00 00 
38eec     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
38ef0     69 49 00 00 
38ef4     6A 4A 00 00 
38ef8     6B 4B 00 00 
38efc     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
38f00     6D 4D 00 00 
38f04     6E 4E 1A 11 
38f08     6F 4F 1E 15 
38f0c     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
38f10     71 51 00 00 
38f14     72 52 00 00 
38f18     73 53 1B 12 
38f1c     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
38f20     75 55 00 00 
38f24     76 56 00 00 
38f28     77 57 00 00 
38f2c     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
38f30     79 59 00 00 
38f34     7A 5A 1D 14 
38f38     31 21 04 00 
38f3c     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
38f40     33 23 06 00 
38f44     34 24 07 00 
38f48     35 25 08 00 
38f4c     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
38f50     37 26 0A 00 
38f54     38 2A 0B 00 
38f58     39 28 0C 00 
38f5c     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
38f60     8D 8D 00 00 
38f64     9B 9B 00 00 
38f68     88 88 00 00 
38f6c     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
38f70     20 20 00 00 
38f74     2D 5F 00 00 
38f78     3D 2B 00 00 
38f7c     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
38f80     5D 7D 00 00 
38f84     5C 7C 00 00 
38f88     23 7E 00 00 
38f8c     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
38f90     27 22 00 00 
38f94     60 7E 03 00 
38f98     2C 3C 00 00 
38f9c     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
38fa0     2F 3F 00 00 
38fa4     B9 B9 00 00 
38fa8     BA 00 00 00 
38fac     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
38fb0     BC 00 00 00 
38fb4     BD 00 00 00 
38fb8     BE 00 00 00 
38fbc     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
38fc0     C0 00 00 00 
38fc4     C1 00 00 00 
38fc8     C2 00 00 00 
38fcc     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
38fd0     C4 00 00 00 
38fd4     C5 00 00 00 
38fd8     C6 00 00 00 
38fdc     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
38fe0     C8 00 00 00 
38fe4     C9 00 00 00 
38fe8     CA 00 00 00 
38fec     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
38ff0     7F 7F 00 00 
38ff4     CC 00 00 00 
38ff8     CD 00 00 00 
38ffc     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
39000     CF 00 00 00 
39004     D0 00 00 00 
39008     D1 00 00 00 
3900c     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
39010     2F 2F 00 00 
39014     2A 2A 00 00 
39018     2D 2D 00 00 
3901c     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
39020     8D 8D 00 00 
39024     31 31 00 00 
39028     32 32 00 00 
3902c     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
39030     34 34 00 00 
39034     35 35 00 00 
39038     36 36 00 00 
3903c     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
39040     38 38 00 00 
39044     39 39 00 00 
39048     30 30 00 00 
3904c     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
39050     5C 7C 00 00 
39054     00 00 00 00 
39058     00 00 00 00 
3905c     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
39060     00 00 00 00 
      ...             
390b8     00 00 00 00 
390bc     00 00 00 00 | 	byte	$00[96]
390c0     2B 00 A6 F2 
390c4     24 A7 09 80 
390c8     5B 88 4D 89 
390cc     80 88 A5 88 | atari_spl file "atari.spl"
390d0     6D 88 B8 88 
390d4     80 88 CB 88 
390d8     92 88 A5 88 
390dc     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
390e0     A5 88 CA 88 
390e4     A6 88 DD 88 
390e8     B8 88 AB 89 
390ec     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
390f0     C8 AD C6 F1 
390f4     91 06 B6 FF 
390f8     13 00 4A 00 
390fc     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
39100     5D 00 5E 00 
39104     5D 00 5E 00 
39108     5E 00 5D 00 
3910c     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
39110     38 00 83 00 
39114     25 00 83 00 
39118     C3 FE D1 04 
3911c     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
39120     48 88 38 85 
39124     41 8A CB 88 
39128     28 89 B8 88 
3912c     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
39130     15 89 03 89 
39134     02 89 15 89 
39138     16 89 15 89 
3913c     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
39140     15 89 3A 89 
39144     72 89 E3 89 
39148     52 83 AD 97 
3914c     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
39150     0C 02 B6 FF 
39154     E1 00 A8 00 
39158     F3 00 A8 00 
3915c     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
39160     CE 00 CD 00 
39164     CD 00 BA 00 
39168     E1 00 BB 00 
3916c     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
39170     DF 00 C9 FF 
39174     E6 01 B6 06 
39178     EE DD 8D 98 
3917c     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
39180     97 89 73 89 
39184     3B 89 60 89 
39188     60 89 60 89 
3918c     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
39190     73 89 72 89 
39194     85 89 73 89 
39198     AA 89 60 89 
3919c     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
391a0     E8 8A 18 86 
391a4     92 88 A5 C2 
391a8     E0 00 C3 05 
391ac     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
391b0     F2 00 64 01 
391b4     06 01 3E 01 
391b8     2B 01 2B 01 
391bc     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
391c0     2B 01 2A 01 
391c4     2B 01 2B 01 
391c8     2B 01 18 01 
391cc     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
391d0     39 07 61 F3 
391d4     C0 AF 37 85 
391d8     0F 88 8B 8A 
391dc     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
391e0     AB 89 D0 89 
391e4     AB 89 D0 89 
391e8     D0 89 CF 89 
391ec     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
391f0     D0 89 F5 89 
391f4     BD 89 08 8A 
391f8     CF 89 E8 8A 
391fc     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
39200     53 B3 0D F8 
39204     F4 07 38 00 
39208     63 01 63 01 
3920c     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
39210     88 01 88 01 
39214     76 01 88 01 
39218     88 01 89 01 
3921c     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
39220     75 01 AE 01 
39224     76 01 88 01 
39228     4A 00 46 06 
3922c     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
39230     08 8A 9A 86 
39234     33 8B 08 8A 
39238     2D 8A F5 89 
3923c     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
39240     2D 8A 2D 8A 
39244     2E 8A 1B 8A 
39248     40 8A 2D 8A 
3924c     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
39250     2E 8A 79 8A 
39254     66 8A C8 8B 
39258     72 82 2B 97 
3925c     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
39260     1D 02 05 01 
39264     F8 01 C0 01 
39268     0B 02 C0 01 
3926c     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
39270     F9 01 D3 01 
39274     F8 01 D3 01 
39278     F8 01 D2 01 
3927c     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
39280     E6 01 2B 01 
39284     8E 02 5F 07 
39288     F7 E2 ED 9C 
3928c     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
39290     E8 8A 78 8A 
39294     78 8A 65 8A 
39298     8B 8A 78 8A 
3929c     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
392a0     8B 8A 9D 8A 
392a4     9D 8A 8B 8A 
392a8     C2 8A 78 8A 
392ac     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
392b0     70 8C 18 86 
392b4     8B 8A 23 C9 
392b8     CB 03 C4 05 
392bc     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
392c0     0B 02 7B 02 
392c4     1E 02 55 02 
392c8     30 02 43 02 
392cc     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
392d0     43 02 44 02 
392d4     43 02 30 02 
392d8     68 02 31 02 
392dc     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
392e0     07 08 3F F7 
392e4     73 B2 13 85 
392e8     15 89 ED 8B 
392ec     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
392f0     B0 8A FB 8A 
392f4     D5 8A FA 8A 
392f8     E8 8A FB 8A 
392fc     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
39300     E8 8A 21 8B 
39304     E7 8A 33 8B 
39308     E8 8A 26 8C 
3930c     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
39310     8D B0 27 F6 
39314     9C 08 AD 01 
39318     7B 02 8D 02 
3931c     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
39320     A1 02 A0 02 
39324     A1 02 A0 02 
39328     A0 02 A0 02 
3932c     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
39330     7B 02 D8 02 
39334     7B 02 C6 02 
39338     3E 01 C3 05 
3933c     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
39340     00 8C 2A 86 
39344     E0 8C FA 8A 
39348     6A 8B FB 8A 
3934c     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
39350     45 8B 45 8B 
39354     45 8B 6B 8B 
39358     46 8B 59 8B 
3935c     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
39360     6B 8B 6B 8B 
39364     6B 8B 6B 8B 
39368     7D 8B 7D 8B 
3936c     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
39370     90 8B 91 8B 
39374     90 8B 90 8B 
39378     A3 8B A3 8B 
3937c     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
39380     B5 8B B6 8B 
39384     B5 8B B5 8B 
39388     B6 8B C8 8B 
3938c     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
39390     C8 8B DA 8B 
39394     DB 8B DB 8B 
39398     DB 8B DC 8B 
3939c     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
393a0     EE 8B EE 8B 
393a4     00 8C 01 8C 
393a8     00 8C 01 8C 
393ac     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
393b0     12 8C 13 8C 
393b4     13 8C 26 8C 
393b8     26 8C 26 8C 
393bc     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
393c0     38 8C 38 8C 
393c4     38 8C 38 8C 
393c8     4B 8C 4B 8C 
393cc     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
393d0     5E 8C 5E 8C 
393d4     5E 8C 5E 8C 
393d8     70 8C 70 8C 
393dc     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
393e0     70 8C 83 8C 
393e4     83 8C 83 8C 
393e8     83 8C 96 8C 
393ec     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
393f0     95 8C A9 8C 
393f4     A9 8C A8 8C 
393f8     A8 8C A8 8C 
393fc     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
39400     BB 8C BB 8C 
39404     BB 8C CE 8C 
39408     CE 8C CE 8C 
3940c     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
39410     E0 8C E1 8C 
39414     E1 8C E0 8C 
39418     F4 8C F2 8C 
3941c     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
39420     05 8D 05 8D 
39424     06 8D 06 8D 
39428     19 8D 19 8D 
3942c     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
39430     18 8D 2B 8D 
39434     2B 8D 2B 8D 
39438     2A 8D 3E 8D 
3943c     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
39440     3E 8D 51 8D 
39444     50 8D 50 8D 
39448     50 8D 51 8D 
3944c     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
39450     63 8D 64 8D 
39454     76 8D 75 8D 
39458     75 8D 76 8D 
3945c     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
39460     88 8D 88 8D 
39464     89 8D 9B 8D 
39468     9A 8D 9B 8D 
3946c     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
39470     AD 8D AE 8D 
39474     AD 8D AE 8D 
39478     C1 8D C1 8D 
3947c     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
39480     D3 8D D3 8D 
39484     D3 8D D3 8D 
39488     D3 8D E6 8D 
3948c     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
39490     E6 8D E6 8D 
39494     F9 8D F9 8D 
39498     F9 8D F8 8D 
3949c     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
394a0     0B 8E 0B 8E 
394a4     1D 8E 1D 8E 
394a8     1E 8E 1E 8E 
394ac     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
394b0     31 8E 31 8E 
394b4     31 8E 42 8E 
394b8     43 8E 43 8E 
394bc     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
394c0     56 8E 56 8E 
394c4     55 8E 56 8E 
394c8     68 8E 69 8E 
394cc     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
394d0     69 8E 7B 8E 
394d4     7C 8E 7B 8E 
394d8     7B 8E 8D 8E 
394dc     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
394e0     8D 8E A1 8E 
394e4     A0 8E A1 8E 
394e8     A1 8E A0 8E 
394ec     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
394f0     B3 8E B3 8E 
394f4     C6 8E C5 8E 
394f8     C6 8E C6 8E 
394fc     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
39500     D8 8E D9 8E 
39504     D8 8E EC 8E 
39508     EB 8E EC 8E 
3950c     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
39510     FE 8E FE 8E 
39514     FE 8E FE 8E 
39518     10 8F 10 8F 
3951c     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
39520     11 8F 23 8F 
39524     24 8F 23 8F 
39528     24 8F 37 8F 
3952c     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
39530     36 8F 36 8F 
39534     48 8F 49 8F 
39538     49 8F 49 8F 
3953c     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
39540     5B 8F 5C 8F 
39544     5B 8F 6E 8F 
39548     6E 8F 6E 8F 
3954c     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
39550     81 8F 81 8F 
39554     81 8F 81 8F 
39558     93 8F 93 8F 
3955c     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
39560     93 8F A6 8F 
39564     A6 8F A6 8F 
39568     A6 8F B9 8F 
3956c     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
39570     B9 8F B9 8F 
39574     CC 8F CB 8F 
39578     CB 8F CC 8F 
3957c     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
39580     DF 8F DE 8F 
39584     DE 8F F1 8F 
39588     F1 8F F1 8F 
3958c     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
39590     03 90 04 90 
39594     04 90 04 90 
39598     16 90 17 90 
3959c     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
395a0     29 90 28 90 
395a4     29 90 28 90 
395a8     29 90 3C 90 
395ac     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
395b0     3C 90 4F 90 
395b4     4E 90 4E 90 
395b8     4E 90 4E 90 
395bc     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
395c0     61 90 61 90 
395c4     73 90 74 90 
395c8     74 90 74 90 
395cc     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
395d0     87 90 86 90 
395d4     87 90 86 90 
395d8     99 90 99 90 
395dc     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
395e0     AB 90 AB 90 
395e4     AC 90 AB 90 
395e8     AB 90 BF 90 
395ec     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
395f0     BE 90 D1 90 
395f4     D0 90 D1 90 
395f8     D1 90 D1 90 
395fc     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
39600     E3 90 E4 90 
39604     F6 90 F6 90 
39608     F6 90 F6 90 
3960c     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
39610     09 91 0A 91 
39614     0A 91 1C 91 
39618     1C 91 1C 91 
3961c     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
39620     2F 91 2E 91 
39624     2F 91 2F 91 
39628     2E 91 41 91 
3962c     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
39630     41 91 53 91 
39634     54 91 54 91 
39638     53 91 54 91 
3963c     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
39640     67 91 67 91 
39644     79 91 7A 91 
39648     79 91 78 91 
3964c     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
39650     8C 91 8B 91 
39654     8C 91 8C 91 
39658     9E 91 9E 91 
3965c     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
39660     B1 91 B1 91 
39664     B2 91 B1 91 
39668     B1 91 C4 91 
3966c     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
39670     C4 91 D6 91 
39674     D7 91 D7 91 
39678     D7 91 D6 91 
3967c     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
39680     EA 91 EA 91 
39684     EA 91 FC 91 
39688     FC 91 FB 91 
3968c     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
39690     0E 92 0F 92 
39694     0F 92 0E 92 
39698     21 92 21 92 
3969c     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
396a0     21 92 34 92 
396a4     33 92 34 92 
396a8     34 92 47 92 
396ac     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
396b0     46 92 47 92 
396b4     59 92 59 92 
396b8     59 92 59 92 
396bc     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
396c0     6C 92 6C 92 
396c4     6B 92 7E 92 
396c8     7E 92 7E 92 
396cc     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
396d0     92 92 91 92 
396d4     91 92 90 92 
396d8     91 92 A4 92 
396dc     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
396e0     A3 92 B6 92 
396e4     B6 92 B7 92 
396e8     B7 92 B6 92 
396ec     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
396f0     CA 92 C9 92 
396f4     CA 92 DC 92 
396f8     DC 92 DC 92 
396fc     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
39700     EF 92 EF 92 
39704     EF 92 EF 92 
39708     01 93 01 93 
3970c     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
39710     15 93 14 93 
39714     14 93 14 93 
39718     14 93 27 93 
3971c     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
39720     27 93 39 93 
39724     3A 93 39 93 
39728     39 93 39 93 
3972c     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
39730     4B 93 4C 93 
39734     5F 93 5F 93 
39738     5F 93 5E 93 
3973c     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
39740     5F 93 84 93 
39744     4C 93 96 93 
39748     5F 93 AE 94 
3974c     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
39750     7B C1 00 00 
39754     00 00 00 00 
39758     00 00 00 00 
3975c     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39760     00 00 00 00 | 	byte	$00, $00, $00, $00
39764     7A D7 00 80 
39768     87 8A 48 8F 
3976c     EC 8C 76 8D 
39770     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
39774     3C 8D 82 8D 
39778     42 8D 88 8D 
3977c     8C 8D 8E 8D 
39780     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
39784     97 8D DE 8D 
39788     E1 8D F1 8E 
3978c     D8 8C A3 83 
39790     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
39794     65 71 C9 65 
39798     FC 64 C4 65 
3979c     C1 65 BF 65 
397a0     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
397a4     B6 65 B4 65 
397a8     B2 65 AE 65 
397ac     AC 65 ED 65 
397b0     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
397b4     5E 65 25 66 
397b8     FA 62 23 6B 
397bc     B5 6C 61 0A 
397c0     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
397c4     5D 90 BE 8D 
397c8     47 8E C3 8D 
397cc     09 8E C9 8D 
397d0     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
397d4     15 8E 19 8E 
397d8     1B 8E 62 8E 
397dc     64 8E 68 8E 
397e0     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
397e4     B5 8E 4C 90 
397e8     FA 84 3C 9D 
397ec     98 13 79 6D 
397f0     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
397f4     D9 66 50 66 
397f8     D4 66 4B 66 
397fc     8C 66 46 66 
39800     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
39804     81 66 3A 66 
39808     7C 66 36 66 
3980c     76 66 30 66 
39810     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
39814     6B 66 88 72 
39818     BF 37 E7 B7 
3981c     75 83 8B 8E 
39820     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
39824     94 8E 96 8E 
39828     DD 8E 9C 8E 
3982c     E2 8E A2 8E 
39830     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
39834     EE 8E AE 8E 
39838     38 8F B5 8E 
3983c     3F 8F FD 8E 
39840     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
39844     A5 87 1E E3 
39848     6D 5D FA 71 
3984c     41 64 25 67 
39850     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
39854     D9 66 1A 67 
39858     18 67 15 67 
3985c     12 67 0F 67 
39860     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
39864     07 67 C0 66 
39868     01 67 BC 66 
3986c     B8 66 DE 64 
39870     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
39874     43 E5 1F 8B 
39878     14 8A F1 90 
3987c     1C 8F 63 8F 
39880     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
39884     29 8F 6E 8F 
39888     72 8F 75 8F 
3988c     34 8F BE 8F 
39890     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
39894     84 8F 87 8F 
39898     CC 8F 56 90 
3989c     67 91 49 80 
398a0     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
398a4     46 77 A6 66 
398a8     E8 66 B0 67 
398ac     AD 67 ED 67 
398b0     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
398b4     A2 67 E3 67 
398b8     9D 67 9A 67 
398bc     98 67 94 67 
398c0     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
398c4     49 67 CD 67 
398c8     28 65 5F 6E 
398cc     82 67 3A 01 
398d0     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
398d4     C2 91 A9 8F 
398d8     EF 8F AE 8F 
398dc     F4 8F B5 8F 
398e0     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
398e4     01 90 03 90 
398e8     07 90 09 90 
398ec     0C 90 53 90 
398f0     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
398f4     18 90 44 93 
398f8     85 84 D6 9D 
398fc     87 1F 2F 75 
39900     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
39904     C4 68 F6 67 
39908     BE 68 F1 67 
3990c     76 68 2E 68 
39910     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
39914     27 68 24 68 
39918     64 68 1E 68 
3991c     5F 68 19 68 
39920     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
39924     DC 68 56 72 
39928     7E 36 C2 B8 
3992c     D7 84 73 90 
39930     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
39934     7B 90 7F 90 
39938     82 90 84 90 
3993c     CB 90 8B 90 
39940     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
39944     D7 90 96 90 
39948     20 91 59 90 
3994c     25 91 A2 90 
39950     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
39954     D0 89 40 EE 
39958     12 64 C4 71 
3995c     29 66 0C 69 
39960     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
39964     C0 68 02 69 
39968     FE 68 FB 68 
3996c     F9 68 F6 68 
39970     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
39974     EE 68 A8 68 
39978     2C 69 5F 68 
3997c     E2 68 81 66 
39980     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
39984     1E EB A6 8A 
39988     73 8B 5E 93 
3998c     7B 90 48 91 
39990     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
39994     0D 91 11 91 
39998     14 91 16 91 
3999c     5C 91 1C 91 
399a0     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
399a4     68 91 AF 91 
399a8     2A 91 B5 91 
399ac     75 91 1A 94 
399b0     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
399b4     70 0E CB 6C 
399b8     5D 6E C4 67 
399bc     99 69 54 69 
399c0     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
399c4     D2 69 49 69 
399c8     89 69 86 69 
399cc     40 69 C4 69 
399d0     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
399d4     35 69 76 69 
399d8     58 67 EB 6D 
399dc     E9 6D 89 0F 
399e0     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
399e4     33 94 94 91 
399e8     D9 91 56 91 
399ec     E0 91 9F 91 
399f0     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
399f4     EC 91 EE 91 
399f8     F1 91 F4 91 
399fc     F7 91 3D 92 
39a00     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
39a04     46 92 21 94 
39a08     11 89 A4 9D 
39a0c     FD 0E 8F 6C 
39a10     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
39a14     28 6A E1 69 
39a18     65 6A 1F 6A 
39a1c     5F 6A 1A 6A 
39a20     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
39a24     54 6A 0F 6A 
39a28     4F 6A 09 6A 
39a2c     06 6A 03 6A 
39a30     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
39a34     23 68 69 77 
39a38     3A 4D 38 CA 
39a3c     38 86 4E 91 
39a40     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
39a44     64 92 24 92 
39a48     6A 92 2A 92 
39a4c     70 92 30 92 
39a50     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
39a54     7B 92 7E 92 
39a58     C5 92 84 92 
39a5c     CB 92 8A 92 
39a60     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
39a64     4D 8D F9 E2 
39a68     97 59 FE 74 
39a6c     DB 68 6D 6A 
39a70     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
39a74     A8 6A A5 6A 
39a78     A3 6A 9F 6A 
39a7c     9D 6A 9B 6A 
39a80     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
39a84     D6 6A 8F 6A 
39a88     CF 6A 46 6A 
39a8c     CA 6A E1 67 
39a90     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
39a94     D3 F7 15 92 
39a98     90 8C BF 94 
39a9c     A6 92 EB 92 
39aa0     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
39aa4     B1 92 F7 92 
39aa8     FA 92 FD 92 
39aac     00 93 02 93 
39ab0     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
39ab4     4F 93 52 93 
39ab8     54 93 22 94 
39abc     5A 93 8F 88 
39ac0     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
39ac4     1C 77 07 6C 
39ac8     E8 69 7A 6B 
39acc     34 6B 75 6B 
39ad0     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
39ad4     29 6B 26 6B 
39ad8     24 6B 21 6B 
39adc     1D 6B 5E 6B 
39ae0     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
39ae4     12 6B 52 6B 
39ae8     34 69 34 6E 
39aec     BA 73 A4 24 
39af0     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
39af4     7A 94 B3 93 
39af8     72 93 31 93 
39afc     78 93 7A 93 
39b00     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
39b04     83 93 86 93 
39b08     89 93 D0 93 
39b0c     D2 93 D5 93 
39b10     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
39b14     DD 93 40 96 
39b18     30 8B 99 9C 
39b1c     52 10 94 71 
39b20     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
39b24     46 6C 79 6B 
39b28     40 6C B7 6B 
39b2c     F7 6B B1 6B 
39b30     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
39b34     EC 6B A5 6B 
39b38     A2 6B 9F 6B 
39b3c     9D 6B 9A 6B 
39b40     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
39b44     C8 6A E4 76 
39b48     20 4B F9 CE 
39b4c     2E 8A 1A 92 
39b50     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
39b54     FB 93 BA 93 
39b58     01 94 03 94 
39b5c     4A 94 09 94 
39b60     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
39b64     55 94 14 94 
39b68     9E 94 1A 94 
39b6c     61 94 20 94 
39b70     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
39b74     3E 87 E5 CD 
39b78     5F 50 6C 78 
39b7c     B5 6A 04 6C 
39b80     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
39b84     83 6C 7F 6C 
39b88     7C 6C 36 6C 
39b8c     76 6C 74 6C 
39b90     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
39b94     6B 6C 25 6C 
39b98     66 6C 1F 6C 
39b9c     1D 6C 41 6A 
39ba0     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
39ba4     BA FA FC 94 
39ba8     5B 8D 97 96 
39bac     3B 94 C5 94 
39bb0     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
39bb4     89 94 8C 94 
39bb8     8F 94 92 94 
39bbc     94 94 DB 94 
39bc0     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
39bc4     E4 94 E7 94 
39bc8     2D 95 74 95 
39bcc     C8 96 15 89 
39bd0     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
39bd4     CB 75 31 6F 
39bd8     7E 6B 10 6D 
39bdc     C9 6C 0A 6D 
39be0     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
39be4     BD 6C FF 6C 
39be8     FB 6C F9 6C 
39bec     B2 6C F3 6C 
39bf0     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
39bf4     A7 6C E8 6C 
39bf8     0D 6B 85 6F 
39bfc     C7 74 10 28 
39c00     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
39c04     96 96 47 95 
39c08     06 95 0A 95 
39c0c     0C 95 0F 95 
39c10     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
39c14     17 95 5E 95 
39c18     61 95 63 95 
39c1c     22 95 AC 95 
39c20     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
39c24     72 95 17 98 
39c28     59 8E 01 96 
39c2c     CF FC 5A 68 
39c30     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
39c34     96 6D 50 6D 
39c38     D5 6D 4A 6D 
39c3c     8C 6D 89 6D 
39c40     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
39c44     80 6D 3A 6D 
39c48     7A 6D 77 6D 
39c4c     75 6D 71 6D 
39c50     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
39c54     18 6C BC 78 
39c58     9A 4F 7E CF 
39c5c     1F 89 F1 93 
39c60     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
39c64     D2 95 4E 95 
39c68     D7 95 53 95 
39c6c     DD 95 E0 95 
39c70     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
39c74     A5 95 EB 95 
39c78     EE 95 F0 95 
39c7c     37 96 B3 95 
39c80     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
39c84     1A 98 D5 8D 
39c88     C5 9F CD 0F 
39c8c     0F 71 F3 73 
39c90     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
39c94     D9 6D 5E 6E 
39c98     D3 6D 58 6E 
39c9c     12 6E 0F 6E 
39ca0     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
39ca4     49 6E BF 6D 
39ca8     87 6E 76 6D 
39cac     81 6E 11 6B 
39cb0     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
39cb4     3F 09 44 95 
39cb8     E5 8D 3F 99 
39cbc     D4 95 A2 96 
39cc0     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
39cc4     23 96 69 96 
39cc8     6B 96 6E 96 
39ccc     71 96 74 96 
39cd0     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
39cd4     BF 96 3C 96 
39cd8     C6 96 C8 96 
39cdc     A3 98 51 8D 
39ce0     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
39ce4     CF 75 29 73 
39ce8     90 6C EC 6E 
39cec     62 6E E7 6E 
39cf0     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
39cf4     9A 6E 98 6E 
39cf8     95 6E 91 6E 
39cfc     8E 6E CF 6E 
39d00     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
39d04     40 6E C3 6E 
39d08     E8 6C 45 6F 
39d0c     A5 7B C9 35 
39d10     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
39d14     2D 98 23 97 
39d18     E1 96 A0 96 
39d1c     A4 96 EA 96 
39d20     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
39d24     AF 96 F4 96 
39d28     F8 96 3E 97 
39d2c     FD 96 43 97 
39d30     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
39d34     08 97 6B 99 
39d38     D6 92 88 91 
39d3c     D8 EE 84 66 
39d40     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
39d44     2E 6F E7 6E 
39d48     6C 6F 24 6F 
39d4c     21 6F 1F 6F 
39d50     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
39d54     17 6F 13 6F 
39d58     54 6F 0E 6F 
39d5c     0B 6F 4B 6F 
39d60     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
39d64     27 6D 1C 7B 
39d68     19 59 9F DB 
39d6c     66 8E BC 94 
39d70     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
39d74     67 97 26 97 
39d78     6D 97 2B 97 
39d7c     72 97 32 97 
39d80     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
39d84     C1 97 7F 97 
39d88     C6 97 85 97 
39d8c     CB 97 CE 97 
39d90     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
39d94     EC 8A C4 C6 
39d98     68 4C F4 7D 
39d9c     63 6E E8 6E 
39da0     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
39da4     ED 6F A7 6F 
39da8     E7 6F A0 6F 
39dac     E1 6F 9B 6F 
39db0     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
39db4     D5 6F 8F 6F 
39db8     CE 6F 45 6F 
39dbc     86 6F 68 6D 
39dc0     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
39dc4     C0 13 AD A2 
39dc8     A7 8E 79 99 
39dcc     E6 97 E8 97 
39dd0     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
39dd4     F1 97 F3 97 
39dd8     F6 97 F9 97 
39ddc     FB 97 FE 97 
39de0     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
39de4     4A 98 0A 98 
39de8     93 98 0F 98 
39dec     7F 9B BF 8C 
39df0     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
39df4     91 7B 62 73 
39df8     1A 6E B9 70 
39dfc     EB 6F B3 70 
39e00     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
39e04     25 70 20 70 
39e08     1E 70 1B 70 
39e0c     18 70 15 70 
39e10     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
39e14     0D 70 09 70 
39e18     07 70 03 70 
39e1c     01 70 FD 6F 
39e20     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
39e24     F6 6F F2 6F 
39e28     EF 6F EC 6F 
39e2c     2C 70 E6 6F 
39e30     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
39e34     DD 6F 97 6F 
39e38     D7 6F 84 6E 
39e3c     8F 6F 3F 7D 
39e40     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
39e42     FF FF FF FF 
39e46     FF FF       | atarist_spl file "atarist.spl" '512
39e48     00 00 00 00 
39e4c     00 00 00 00 
39e50     00 00       | 	byte	$00[10]
39e52     17 7F F2 7F 
39e56     B2 7F 72 7F 
39e5a     33 7F F4 7E 
39e5e     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
39e62     36 7E F5 7D 
39e66     E9 51 F2 0D 
39e6a     8E 00 F3 FD 
39e6e     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
39e72     57 FD 58 FD 
39e76     5B FD 5C FD 
39e7a     5C FD 60 7D 
39e7e     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
39e82     D6 7C 98 7C 
39e86     59 7C 1A 7C 
39e8a     DC 7B 9E 7B 
39e8e     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
39e92     F3 05 00 FD 
39e96     41 FB EA FA 
39e9a     D9 FA DB FA 
39e9e     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
39ea2     E4 FA 9B 36 
39ea6     F8 7A C0 7A 
39eaa     84 7A 45 7A 
39eae     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
39eb2     8E 79 51 79 
39eb6     15 79 D7 78 
39eba     3C 1F EB FF 
39ebe     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
39ec2     6D F8 65 F8 
39ec6     68 F8 6D F8 
39eca     70 F8 74 F8 
39ece     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
39ed2     AB 60 79 60 
39ed6     4B 60 1A 60 
39eda     E9 5F B9 5F 
39ede     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
39ee2     FB 59 B2 0B 
39ee6     92 FA 3A F7 
39eea     96 F6 79 F6 
39eee     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
39ef2     82 F6 86 F6 
39ef6     8C F6 DB 5D 
39efa     F1 5E C1 5E 
39efe     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
39f02     34 5E 04 5E 
39f06     D6 5D A6 5D 
39f0a     78 5D D4 3E 
39f0e     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
39f12     27 F5 BA F4 
39f16     AB F4 AD F4 
39f1a     B2 F4 B8 F4 
39f1e     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
39f22     26 5D 2B 5D 
39f26     FC 5C CD 5C 
39f2a     9F 5C 70 5C 
39f2e     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
39f32     E5 5B B8 5B 
39f36     DB 24 A7 FC 
39f3a     D1 F4 4D F3 
39f3e     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
39f42     04 F3 0B F3 
39f46     11 F3 16 F3 
39f4a     DE 18 98 5B 
39f4e     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
39f52     4E 4A 29 48 
39f56     A0 47 6A 47 
39f5a     43 47 20 47 
39f5e     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
39f62     E2 F6 98 F2 
39f66     C5 F1 A3 F1 
39f6a     A3 F1 A8 F1 
39f6e     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
39f72     BF F1 00 3D 
39f76     EF 46 CD 46 
39f7a     AA 46 86 46 
39f7e     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
39f82     1C 46 F9 45 
39f86     D7 45 EE 43 
39f8a     DE 02 E8 F3 
39f8e     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
39f92     61 F0 65 F0 
39f96     6D F0 74 F0 
39f9a     7C F0 84 F0 
39f9e     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
39fa2     8E 45 6D 45 
39fa6     49 45 27 45 
39faa     05 45 E1 44 
39fae     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
39fb2     F1 2F A9 FB 
39fb6     8B F1 9B EF 
39fba     40 EF 36 EF 
39fbe     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
39fc2     4D EF 56 EF 
39fc6     5E EF 7B 44 
39fca     8C 44 69 44 
39fce     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
39fd2     03 44 E1 43 
39fd6     C0 43 F5 37 
39fda     69 33 0F 11 
39fde     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
39fe2     66 EE 37 EE 
39fe6     38 EE 40 EE 
39fea     48 EE 51 EE 
39fee     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
39ff2     7D 32 6A 32 
39ff6     51 32 37 32 
39ffa     1F 32 05 32 
39ffe     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
3a002     B9 31 A1 31 
3a006     F1 04 F4 F1 
3a00a     50 EE A0 ED 
3a00e     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
3a012     93 ED 9A ED 
3a016     A4 ED AD ED 
3a01a     F4 27 C1 31 
3a01e     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
3a022     78 31 5F 31 
3a026     46 31 2E 31 
3a02a     15 31 FC 30 
3a02e     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
3a032     C4 EF 4A ED 
3a036     DC EC CB EC 
3a03a     D2 EC DA EC 
3a03e     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
3a042     F9 EC 64 2F 
3a046     0A 31 F1 30 
3a04a     D9 30 C0 30 
3a04e     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
3a052     78 30 5F 30 
3a056     46 30 38 23 
3a05a     A6 F6 19 EE 
3a05e     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
3a062     20 EC 28 EC 
3a066     32 EC 3C EC 
3a06a     47 EC 51 EC 
3a06e     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
3a072     A3 22 93 22 
3a076     7F 22 6E 22 
3a07a     5D 22 4C 22 
3a07e     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
3a082     77 09 76 F1 
3a086     CC EC F0 EB 
3a08a     CD EB CE EB 
3a08e     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
3a092     ED EB F5 EB 
3a096     3E F6 6B 22 
3a09a     5F 22 4E 22 
3a09e     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
3a0a2     1B 22 0B 22 
3a0a6     FA 21 E9 21 
3a0aa     D8 21 4D FF 
3a0ae     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
3a0b2     92 EB 7B EB 
3a0b6     82 EB 8C EB 
3a0ba     97 EB A1 EB 
3a0be     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
3a0c2     15 22 04 22 
3a0c6     F3 21 E3 21 
3a0ca     D2 21 C0 21 
3a0ce     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
3a0d2     8E 21 7D 21 
3a0d6     9A F8 A4 ED 
3a0da     8E EB 2F EB 
3a0de     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
3a0e2     37 EB 42 EB 
3a0e6     4C EB 57 EB 
3a0ea     B2 17 22 19 
3a0ee     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
3a0f2     FD 18 EF 18 
3a0f6     E3 18 D6 18 
3a0fa     CA 18 BD 18 
3a0fe     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
3a102     60 EC 35 EB 
3a106     01 EB 01 EB 
3a10a     0C EB 16 EB 
3a10e     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
3a112     34 EB D0 18 
3a116     00 19 F4 18 
3a11a     E8 18 DA 18 
3a11e     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
3a122     B6 18 A9 18 
3a126     9D 18 91 05 
3a12a     F0 EF CA EB 
3a12e     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
3a132     E8 EA F2 EA 
3a136     FE EA 07 EB 
3a13a     12 EB C2 EF 
3a13e     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
3a142     D9 18 CD 18 
3a146     C0 18 B3 18 
3a14a     A7 18 9B 18 
3a14e     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
3a152     B8 FC 30 EE 
3a156     61 EB DC EA 
3a15a     CD EA D2 EA 
3a15e     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
3a162     F3 EA FE EA 
3a166     D2 09 D1 18 
3a16a     C3 18 17 18 
3a16e     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
3a172     66 11 52 11 
3a176     49 11 41 11 
3a17a     38 11 E0 F4 
3a17e     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
3a182     C9 EA C5 EA 
3a186     CF EA DB EA 
3a18a     E6 EA EF EA 
3a18e     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
3a192     89 11 80 11 
3a196     78 11 6E 11 
3a19a     67 11 5D 11 
3a19e     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
3a1a2     43 11 32 0D 
3a1a6     9C F1 07 EC 
3a1aa     F8 EA CD EA 
3a1ae     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
3a1b2     E4 EA ED EA 
3a1b6     F8 EA 02 EB 
3a1ba     55 11 91 11 
3a1be     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
3a1c2     75 11 6E 11 
3a1c6     64 11 5E 11 
3a1ca     54 11 4A 11 
3a1ce     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
3a1d2     A8 EB F1 EA 
3a1d6     D9 EA DC EA 
3a1da     E8 EA F1 EA 
3a1de     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
3a1e2     A6 EB 9E 11 
3a1e6     A0 11 96 11 
3a1ea     8D 11 85 11 
3a1ee     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
3a1f2     6A 11 CA 0D 
3a1f6     36 0B 57 F8 
3a1fa     6C ED 57 EB 
3a1fe     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
3a202     F4 EA FF EA 
3a206     09 EB 15 EB 
3a20a     1E EB 1A FD 
3a20e     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
3a212     ED 0A E8 0A 
3a216     E2 0A DC 0A 
3a21a     D6 0A D1 0A 
3a21e     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
3a222     F8 F3 BC EC 
3a226     57 EB 1E EB 
3a22a     18 EB 24 EB 
3a22e     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
3a232     42 EB 4D EB 
3a236     08 09 20 0B 
3a23a     1A 0B 14 0B 
3a23e     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
3a242     04 0B FE 0A 
3a246     F9 0A F2 0A 
3a24a     84 08 3A F1 
3a24e     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
3a252     42 EB 42 EB 
3a256     4E EB 57 EB 
3a25a     62 EB 6B EB 
3a25e     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
3a262     48 0B 43 0B 
3a266     3C 0B 36 0B 
3a26a     31 0B 2C 0B 
3a26e     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
3a272     1B 0B 5C 00 
3a276     6A EF 1B EC 
3a27a     81 EB 6A EB 
3a27e     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
3a282     85 EB 8E EB 
3a286     99 EB A3 EB 
3a28a     DD 05 E5 05 
3a28e     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
3a292     DB 05 D8 05 
3a296     D5 05 D1 05 
3a29a     D0 05 CB 05 
3a29e     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
3a2a2     0C EC BB EB 
3a2a6     B3 EB BB EB 
3a2aa     C5 EB D0 EB 
3a2ae     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
3a2b2     E4 F7 2C 06 
3a2b6     28 06 24 06 
3a2ba     22 06 1F 06 
3a2be     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
3a2c2     16 06 14 06 
3a2c6     0F 06 D0 F3 
3a2ca     65 ED 2D EC 
3a2ce     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
3a2d2     01 EC 0A EC 
3a2d6     14 EC 1E EC 
3a2da     29 EC FB 03 
3a2de     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
3a2e2     63 06 60 06 
3a2e6     5E 06 59 06 
3a2ea     58 06 54 06 
3a2ee     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
3a2f2     69 F1 21 ED 
3a2f6     55 EC 33 EC 
3a2fa     36 EC 40 EC 
3a2fe     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
3a302     5C EC 68 EC 
3a306     92 02 D9 02 
3a30a     D7 02 D7 02 
3a30e     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
3a312     D1 02 D1 02 
3a316     CE 02 CD 02 
3a31a     5D FC 80 EF 
3a31e     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
3a322     83 EC 8A EC 
3a326     93 EC 9C EC 
3a32a     A5 EC B1 EC 
3a32e     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
3a332     2B 03 2A 03 
3a336     29 03 26 03 
3a33a     25 03 24 03 
3a33e     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
3a342     1F 03 70 F7 
3a346     D0 EE 27 ED 
3a34a     DB EC D4 EC 
3a34e     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
3a352     F0 EC FA EC 
3a356     02 ED F9 F4 
3a35a     7B 03 7C 03 
3a35e     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
3a362     75 03 73 03 
3a366     72 03 70 03 
3a36a     6D 03 6C 03 
3a36e     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
3a372     54 ED 22 ED 
3a376     22 ED 2C ED 
3a37a     35 ED 3F ED 
3a37e     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
3a382     14 01 C3 03 
3a386     C1 03 C0 03 
3a38a     5F 01 A5 00 
3a38e     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
3a392     7B 00 7C 00 
3a396     20 00 85 F1 
3a39a     2A EE 89 ED 
3a39e     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
3a3a2     80 ED 87 ED 
3a3a6     90 ED 9A ED 
3a3aa     A3 ED 73 00 
3a3ae     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
3a3b2     D0 00 D0 00 
3a3b6     D0 00 D0 00 
3a3ba     D0 00 CF 00 
3a3be     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
3a3c2     80 F0 3D EE 
3a3c6     D5 ED C7 ED 
3a3ca     CD ED D6 ED 
3a3ce     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
3a3d2     F2 ED FA ED 
3a3d6     1D 01 29 01 
3a3da     27 01 27 01 
3a3de     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
3a3e2     25 01 26 01 
3a3e6     26 01 23 01 
3a3ea     D0 F7 EC EF 
3a3ee     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
3a3f2     1C EE 24 EE 
3a3f6     2D EE 37 EE 
3a3fa     40 EE 47 EE 
3a3fe     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
3a402     7D 01 7B 01 
3a406     7A 01 7A 01 
3a40a     79 01 78 01 
3a40e     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
3a412     84 FE DE F3 
3a416     6C EF 93 EE 
3a41a     72 EE 72 EE 
3a41e     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
3a422     8B EE 95 EE 
3a426     9E EE 15 FC 
3a42a     67 FE 67 FE 
3a42e     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
3a432     6B FE 6B FE 
3a436     6D FE 6D FE 
3a43a     6D FE 6F FE 
3a43e     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
3a442     DF EE CC EE 
3a446     CF EE D9 EE 
3a44a     E1 EE EA EE 
3a44e     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
3a452     5A FE C4 FE 
3a456     C3 FE C5 FE 
3a45a     C6 FE C6 FE 
3a45e     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
3a462     C8 FE C7 FE 
3a466     DA FB 85 F1 
3a46a     8D EF 31 EF 
3a46e     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
3a472     34 EF 3E EF 
3a476     46 EF 4F EF 
3a47a     57 EF 0D FF 
3a47e     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
3a482     1F FF 1F FF 
3a486     21 FF 21 FF 
3a48a     21 FF 21 FF 
3a48e     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
3a492     15 F1 BE EF 
3a496     84 EF 7E EF 
3a49a     88 EF 8F EF 
3a49e     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
3a4a2     A9 EF 06 F2 
3a4a6     A6 FC AB FC 
3a4aa     AD FC AE FC 
3a4ae     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
3a4b2     B2 FC B4 FC 
3a4b6     B6 FC B7 FC 
3a4ba     8B F4 BD F0 
3a4be     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
3a4c2     E4 EF EE EF 
3a4c6     F6 EF FD EF 
3a4ca     04 F0 0E F0 
3a4ce     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
3a4d2     0B FD 0D FD 
3a4d6     0F FD 11 FD 
3a4da     11 FD 13 FD 
3a4de     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
3a4e2     17 FD 64 F3 
3a4e6     CD F0 52 F0 
3a4ea     41 F0 45 F0 
3a4ee     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
3a4f2     5B F0 64 F0 
3a4f6     6D F0 FB FC 
3a4fa     65 FD 68 FD 
3a4fe     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
3a502     6C FD 6D FD 
3a506     6F FD 70 FD 
3a50a     72 FD B3 FB 
3a50e     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
3a512     A4 F0 99 F0 
3a516     A0 F0 A8 F0 
3a51a     AE F0 B9 F0 
3a51e     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
3a522     CB FB DD FB 
3a526     DE FB E0 FB 
3a52a     E3 FB E3 FB 
3a52e     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
3a532     E9 FB EC FB 
3a536     62 F7 27 F2 
3a53a     2A F1 FF F0 
3a53e     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
3a542     0C F1 13 F1 
3a546     1B F1 23 F1 
3a54a     33 F2 3C FC 
3a54e     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
3a552     42 FC 45 FC 
3a556     47 FC 48 FC 
3a55a     4A FC 4C FC 
3a55e     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
3a562     20 F2 77 F1 
3a566     5C F1 5F F1 
3a56a     64 F1 6C F1 
3a56e     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
3a572     83 F1 DC F8 
3a576     9A FC 9A FC 
3a57a     9B FC 9E FC 
3a57e     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
3a582     A3 FC A4 FC 
3a586     A6 FC A9 FC 
3a58a     90 F4 33 F2 
3a58e     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
3a592     BA F1 BF F1 
3a596     C7 F1 CE F1 
3a59a     D6 F1 DC F1 
3a59e     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
3a5a2     F3 FC F5 FC 
3a5a6     FE FB 79 FB 
3a5aa     62 FB 5F FB 
3a5ae     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
3a5b2     6F FA AF F3 
3a5b6     53 F2 12 F2 
3a5ba     0F F2 15 F2 
3a5be     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
3a5c2     2A F2 32 F2 
3a5c6     38 F2 9A FB 
3a5ca     AF FB B1 FB 
3a5ce     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
3a5d2     B7 FB B8 FB 
3a5d6     BA FB BC FB 
3a5da     C1 FB 3B F8 
3a5de     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
3a5e2     6E F2 6C F2 
3a5e6     74 F2 7A F2 
3a5ea     81 F2 87 F2 
3a5ee     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
3a5f2     06 FC 09 FC 
3a5f6     0C FC 0E FC 
3a5fa     0F FC 12 FC 
3a5fe     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
3a602     17 FC 1A FC 
3a606     B2 F6 7B F3 
3a60a     DD F2 C5 F2 
3a60e     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
3a612     D4 F2 DB F2 
3a616     E0 F2 E8 F2 
3a61a     28 F8 60 FC 
3a61e     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
3a622     64 FC 66 FC 
3a626     68 FC 6A FC 
3a62a     6D FC 52 FC 
3a62e     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
3a632     78 F3 24 F3 
3a636     1A F3 1E F3 
3a63a     24 F3 2A F3 
3a63e     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
3a642     3D F3 80 FA 
3a646     0C FB 0F FB 
3a64a     10 FB 14 FB 
3a64e     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
3a652     1B FB 1D FB 
3a656     1F FB 92 FA 
3a65a     DE F4 AE F3 
3a65e     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
3a662     79 F3 7E F3 
3a666     84 F3 8C F3 
3a66a     92 F3 97 F3 
3a66e     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
3a672     67 FB 69 FB 
3a676     6B FB 6F FB 
3a67a     71 FB 72 FB 
3a67e     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
3a682     E3 F8 BA F4 
3a686     EE F3 CC F3 
3a68a     CA F3 CF F3 
3a68e     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
3a692     E2 F3 E8 F3 
3a696     ED F3 B7 FB 
3a69a     BC FB BE FB 
3a69e     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
3a6a2     C4 FB C6 FB 
3a6a6     C8 FB C9 FB 
3a6aa     CC FB 8F F7 
3a6ae     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
3a6b2     1E F4 1E F4 
3a6b6     24 F4 2A F4 
3a6ba     30 F4 38 F4 
3a6be     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
3a6c2     AD FA B1 FA 
3a6c6     B4 FA B6 FA 
3a6ca     BA FA BB FA 
3a6ce     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
3a6d2     C2 FA C6 FA 
3a6d6     55 F6 C6 F4 
3a6da     7D F4 72 F4 
3a6de     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
3a6e2     83 F4 89 F4 
3a6e6     8F F4 94 F4 
3a6ea     66 FA 03 FB 
3a6ee     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
3a6f2     0A FB 0E FB 
3a6f6     10 FB 11 FB 
3a6fa     16 FB 18 FB 
3a6fe     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
3a702     F9 F4 CA F4 
3a706     C5 F4 CB F4 
3a70a     D1 F4 D7 F4 
3a70e     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
3a712     E8 F4 3F FB 
3a716     56 FB 58 FB 
3a71a     5A FB 5E FB 
3a71e     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
3a722     64 FB 64 FB 
3a726     69 FB 99 F9 
3a72a     E9 F5 33 F5 
3a72e     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
3a732     1D F5 22 F5 
3a736     27 F5 2E F5 
3a73a     32 F5 37 F5 
3a73e     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
3a742     BC FA BC FA 
3a746     C1 FA C2 FA 
3a74a     C4 FA C8 FA 
3a74e     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
3a752     F9 F7 DB F5 
3a756     78 F5 69 F5 
3a75a     6A F5 70 F5 
3a75e     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
3a762     7F F5 85 F5 
3a766     6E F7 06 FB 
3a76a     0A FB 0B FB 
3a76e     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
3a772     14 FB 15 FB 
3a776     18 FB 1B FB 
3a77a     1D FB 70 F7 
3a77e     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
3a782     B6 F5 BB F5 
3a786     C0 F5 C6 F5 
3a78a     CA F5 CF F5 
3a78e     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
3a792     54 FB 56 FB 
3a796     5A FB 5B FB 
3a79a     5E FB 5F FB 
3a79e     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
3a7a2     67 FB 52 FB 
3a7a6     29 F7 33 F6 
3a7aa     06 F6 02 F6 
3a7ae     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
3a7b2     10 F6 16 F6 
3a7b6     1A F6 1F F6 
3a7ba     81 FB 9F FB 
3a7be     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
3a7c2     51 FB F2 FA 
3a7c6     E3 FA E3 FA 
3a7ca     E5 FA E9 FA 
3a7ce     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
3a7d2     64 F6 4D F6 
3a7d6     4D F6 53 F6 
3a7da     57 F6 5C F6 
3a7de     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
3a7e2     6A F6 19 FB 
3a7e6     1E FB 22 FB 
3a7ea     23 FB 24 FB 
3a7ee     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
3a7f2     2C FB 2E FB 
3a7f6     32 FB F0 F8 
3a7fa     01 F7 A5 F6 
3a7fe     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
3a802     9F F6 A3 F6 
3a806     A6 F6 AC F6 
3a80a     B0 F6 EB F7 
3a80e     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
3a812     68 FB 6C FB 
3a816     6E FB 71 FB 
3a81a     72 FB 74 FB 
3a81e     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
3a822     71 F8 21 F7 
3a826     E5 F6 DD F6 
3a82a     E1 F6 E6 F6 
3a82e     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
3a832     F5 F6 F7 F6 
3a836     F7 FA AB FB 
3a83a     AD FB AF FB 
3a83e     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
3a842     B6 FB B9 FB 
3a846     BB FB BC FB 
3a84a     21 FB 07 F8 
3a84e     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
3a852     22 F7 26 F7 
3a856     2B F7 2E F7 
3a85a     34 F7 38 F7 
3a85e     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
3a862     13 FB 16 FB 
3a866     17 FB 1B FB 
3a86a     1E FB 20 FB 
3a86e     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
3a872     26 FB 77 FA 
3a876     F3 F7 7C F7 
3a87a     67 F7 6A F7 
3a87e     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
3a882     74 F7 7A F7 
3a886     7E F7 82 F7 
3a88a     53 FB 5A FB 
3a88e     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
3a892     5F FB 63 FB 
3a896     65 FB 67 FB 
3a89a     69 FB 6A FB 
3a89e     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
3a8a2     B5 F7 A9 F7 
3a8a6     AD F7 B0 F7 
3a8aa     B5 F7 B8 F7 
3a8ae     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
3a8b2     6E F8 99 FB 
3a8b6     9C FB 9D FB 
3a8ba     9F FB A4 FB 
3a8be     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
3a8c2     A9 FB AB FB 
3a8c6     AD FB 46 F9 
3a8ca     26 F8 F0 F7 
3a8ce     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
3a8d2     F4 F7 F8 F7 
3a8d6     FB F7 FF F7 
3a8da     03 F8 65 FA 
3a8de     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
3a8e2     2B FB 2F FB 
3a8e6     30 FB 32 FB 
3a8ea     34 FB 38 FB 
3a8ee     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
3a8f2     E9 F8 4A F8 
3a8f6     2E F8 2C F8 
3a8fa     2F F8 36 F8 
3a8fe     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
3a902     41 F8 44 F8 
3a906     4A FB 67 FB 
3a90a     68 FB 6B FB 
3a90e     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
3a912     73 FB 74 FB 
3a916     78 FB 7A FB 
3a91a     14 FB E7 F8 
3a91e     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
3a922     6D F8 70 F8 
3a926     73 F8 78 F8 
3a92a     7C F8 80 F8 
3a92e     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
3a932     A6 FB A7 FB 
3a936     A9 FB AC FB 
3a93a     AF FB B1 FB 
3a93e     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
3a942     B7 FB 73 FA 
3a946     F8 F8 B4 F8 
3a94a     A9 F8 AB F8 
3a94e     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
3a952     B4 F8 B8 F8 
3a956     BB F8 FA F8 
3a95a     64 FB 65 FB 
3a95e     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
3a962     6D FB 6F FB 
3a966     70 FB 74 FB 
3a96a     77 FB 77 FB 
3a96e     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
3a972     E9 F8 E4 F8 
3a976     E8 F8 EB F8 
3a97a     EE F8 F2 F8 
3a97e     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
3a982     B5 FA 9F FB 
3a986     A1 FB A4 FB 
3a98a     A5 FB A9 FB 
3a98e     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
3a992     AE FB B1 FB 
3a996     B2 FB C7 F9 
3a99a     39 F9 22 F9 
3a99e     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
3a9a2     26 F9 2A F9 
3a9a6     2E F9 32 F9 
3a9aa     33 F9 BA FB 
3a9ae     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
3a9b2     DE FB E1 FB 
3a9b6     E2 FB E4 FB 
3a9ba     E5 FB E7 FB 
3a9be     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
3a9c2     C5 F9 67 F9 
3a9c6     57 F9 56 F9 
3a9ca     5B F9 5F F9 
3a9ce     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
3a9d2     68 F9 6C F9 
3a9d6     0B FC 11 FC 
3a9da     14 FC 15 FC 
3a9de     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
3a9e2     B5 FB B5 FB 
3a9e6     B6 FB B8 FB 
3a9ea     E9 FA C8 F9 
3a9ee     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
3a9f2     90 F9 94 F9 
3a9f6     95 F9 99 F9 
3a9fa     9D F9 9F F9 
3a9fe     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
3aa02     DE FB DF FB 
3aa06     E2 FB E4 FB 
3aa0a     E6 FB E8 FB 
3aa0e     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
3aa12     EF FB AC FA 
3aa16     E9 F9 C7 F9 
3aa1a     C3 F9 C8 F9 
3aa1e     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
3aa22     D0 F9 D4 F9 
3aa26     D6 F9 0E FB 
3aa2a     11 FC 13 FC 
3aa2e     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
3aa32     19 FC 1B FC 
3aa36     1D FC 1E FC 
3aa3a     21 FC 22 FC 
3aa3e     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
3aa42     F7 F9 F7 F9 
3aa46     FB F9 FE F9 
3aa4a     00 FA 03 FA 
3aa4e     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
3aa52     1B FC 45 FC 
3aa56     46 FC 48 FC 
3aa5a     4A FC 4B FC 
3aa5e     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
3aa62     52 FC 54 FC 
3aa66     F3 FB 82 FA 
3aa6a     35 FA 28 FA 
3aa6e     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
3aa72     31 FA 32 FA 
3aa76     37 FA 37 FA 
3aa7a     3C FA 00 FC 
3aa7e     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
3aa82     09 FC 0B FC 
3aa86     0F FC 12 FC 
3aa8a     12 FC 15 FC 
3aa8e     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
3aa92     8D FA 60 FA 
3aa96     5B FA 5C FA 
3aa9a     60 FA 61 FA 
3aa9e     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
3aaa2     6C FA 6D FA 
3aaa6     37 FC 3A FC 
3aaaa     3B FC 3D FC 
3aaae     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
3aab2     43 FC 44 FC 
3aab6     45 FC 47 FC 
3aaba     51 FB AB FA 
3aabe     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
3aac2     8E FA 91 FA 
3aac6     93 FA 95 FA 
3aaca     98 FA 9B FA 
3aace     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
3aad2     68 FC 6A FC 
3aad6     6C FC 6E FC 
3aada     70 FC 72 FC 
3aade     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
3aae2     76 FC 3B FB 
3aae6     D0 FA BB FA 
3aaea     B9 FA BD FA 
3aaee     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
3aaf2     C4 FA C6 FA 
3aaf6     CA FA 13 FC 
3aafa     3A FC 3A FC 
3aafe     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
3ab02     41 FC 43 FC 
3ab06     44 FC 47 FC 
3ab0a     48 FC 3C FC 
3ab0e     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
3ab12     E6 FA E8 FA 
3ab16     EB FA EE FA 
3ab1a     F0 FA F2 FA 
3ab1e     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
3ab22     61 FC 66 FC 
3ab26     68 FC 6B FC 
3ab2a     6C FC 6E FC 
3ab2e     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
3ab32     73 FC 75 FC 
3ab36     13 FC 3F FB 
3ab3a     17 FB 12 FB 
3ab3e     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
3ab42     1A FB 1D FB 
3ab46     1F FB 20 FB 
3ab4a     23 FB 92 FC 
3ab4e     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
3ab52     96 FC 97 FC 
3ab56     9A FC 9C FC 
3ab5a     9E FC 9F FC 
3ab5e     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
3ab62     5A FB 41 FB 
3ab66     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
3ab6a     73 32 00 04 
3ab6e     00 00 10 00 
3ab72     00 00 00 00 
3ab76     00 00 00 00 | atari2 file "atari2.s2"
3ab7a     43 87 43 87 
3ab7e     43 87 44 87 
3ab82     43 87 44 87 
3ab86     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3ab8a     43 87 43 87 
3ab8e     43 87 44 87 
3ab92     43 87 43 87 
3ab96     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3ab9a     44 87 43 87 
3ab9e     44 87 43 87 
3aba2     43 87 43 87 
3aba6     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3abaa     43 87 43 87 
3abae     44 87 43 87 
3abb2     44 87 44 87 
3abb6     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
3abba     43 87 43 87 
3abbe     44 87 43 87 
3abc2     43 87 42 87 
3abc6     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3abca     43 87 43 87 
3abce     43 87 43 87 
3abd2     44 87 43 87 
3abd6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3abda     44 87 44 87 
3abde     43 87 44 87 
3abe2     43 87 44 87 
3abe6     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
3abea     44 87 43 87 
3abee     44 87 44 87 
3abf2     43 87 43 87 
3abf6     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3abfa     43 87 44 87 
3abfe     44 87 43 87 
3ac02     43 87 44 87 
3ac06     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3ac0a     43 87 43 87 
3ac0e     43 87 43 87 
3ac12     43 87 43 87 
3ac16     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
3ac1a     42 87 43 87 
3ac1e     44 87 42 87 
3ac22     43 87 43 87 
3ac26     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
3ac2a     43 87 44 87 
3ac2e     44 87 43 87 
3ac32     43 87 43 87 
3ac36     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3ac3a     43 87 5C 87 
3ac3e     EE 86 AC 87 
3ac42     4C 7C A3 78 
3ac46     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
3ac4a     BC 78 BB 78 
3ac4e     BD 78 BC 78 
3ac52     BB 78 BD 78 
3ac56     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
3ac5a     BB 78 BB 78 
3ac5e     BC 78 BC 78 
3ac62     BC 78 BB 78 
3ac66     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3ac6a     BC 78 BC 78 
3ac6e     BC 78 BC 78 
3ac72     BC 78 BC 78 
3ac76     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3ac7a     BB 78 BC 78 
3ac7e     A0 78 4C 7C 
3ac82     11 7A 29 89 
3ac86     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
3ac8a     44 87 43 87 
3ac8e     44 87 43 87 
3ac92     43 87 42 87 
3ac96     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3ac9a     43 87 43 87 
3ac9e     44 87 ED 85 
3aca2     71 85 52 79 
3aca6     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
3acaa     BC 78 BC 78 
3acae     BC 78 BC 78 
3acb2     BC 78 BC 78 
3acb6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3acba     BC 78 BC 78 
3acbe     BC 78 A0 78 
3acc2     CF 7A B9 81 
3acc6     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
3acca     44 87 43 87 
3acce     43 87 44 87 
3acd2     43 87 44 87 
3acd6     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3acda     43 87 43 87 
3acde     43 87 43 87 
3ace2     44 87 43 87 
3ace6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3acea     43 87 43 87 
3acee     44 87 43 87 
3acf2     44 87 43 87 
3acf6     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3acfa     44 87 43 87 
3acfe     43 87 43 87 
3ad02     5A 87 39 81 
3ad06     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
3ad0a     A5 78 BC 78 
3ad0e     BB 78 BC 78 
3ad12     BB 78 BC 78 
3ad16     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
3ad1a     BC 78 BC 78 
3ad1e     BC 78 BC 78 
3ad22     BC 78 8F 79 
3ad26     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
3ad2a     09 85 47 87 
3ad2e     43 87 43 87 
3ad32     42 87 42 87 
3ad36     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
3ad3a     43 87 43 87 
3ad3e     43 87 43 87 
3ad42     43 87 44 87 
3ad46     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3ad4a     43 87 43 87 
3ad4e     44 87 43 87 
3ad52     42 87 43 87 
3ad56     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
3ad5a     44 87 43 87 
3ad5e     43 87 43 87 
3ad62     44 87 44 87 
3ad66     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
3ad6a     94 78 55 7A 
3ad6e     B9 78 BC 78 
3ad72     BC 78 BC 78 
3ad76     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3ad7a     BC 78 BB 78 
3ad7e     BC 78 BC 78 
3ad82     BC 78 BC 78 
3ad86     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3ad8a     BB 78 BC 78 
3ad8e     BC 78 BC 78 
3ad92     BB 78 BC 78 
3ad96     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3ad9a     BC 78 BC 78 
3ad9e     BD 78 BC 78 
3ada2     BC 78 BB 78 
3ada6     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
3adaa     94 78 B3 84 
3adae     36 84 4A 87 
3adb2     43 87 43 87 
3adb6     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
3adba     43 87 44 87 
3adbe     43 87 43 87 
3adc2     43 87 43 87 
3adc6     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3adca     43 87 44 87 
3adce     43 87 44 87 
3add2     43 87 43 87 
3add6     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3adda     43 87 43 87 
3adde     43 87 45 87 
3ade2     43 87 43 87 
3ade6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
3adea     43 87 44 87 
3adee     44 87 44 87 
3adf2     43 87 43 87 
3adf6     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3adfa     43 87 42 87 
3adfe     43 87 43 87 
3ae02     44 87 43 87 
3ae06     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3ae0a     54 87 3C 82 
3ae0e     36 83 52 79 
3ae12     C6 78 BC 78 
3ae16     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
3ae1a     BB 78 BB 78 
3ae1e     BC 78 BC 78 
3ae22     BC 78 BC 78 
3ae26     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3ae2a     BD 78 ED 78 
3ae2e     1B 79 F4 83 
3ae32     4D 83 4E 87 
3ae36     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
3ae3a     44 87 43 87 
3ae3e     42 87 44 87 
3ae42     43 87 42 87 
3ae46     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
3ae4a     43 87 54 87 
3ae4e     26 82 B3 84 
3ae52     D6 77 BB 78 
3ae56     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
3ae5a     BC 78 BB 78 
3ae5e     BB 78 BB 78 
3ae62     BB 78 BB 78 
3ae66     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
3ae6a     BC 78 BC 78 
3ae6e     26 79 18 75 
3ae72     36 83 1F 84 
3ae76     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
3ae7a     43 87 43 87 
3ae7e     43 87 43 87 
3ae82     43 87 44 87 
3ae86     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3ae8a     43 87 44 87 
3ae8e     44 87 43 87 
3ae92     43 87 43 87 
3ae96     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
3ae9a     43 87 43 87 
3ae9e     43 87 43 87 
3aea2     44 87 44 87 
3aea6     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
3aeaa     44 87 43 87 
3aeae     43 87 43 87 
3aeb2     43 87 44 87 
3aeb6     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3aeba     44 87 44 87 
3aebe     44 87 43 87 
3aec2     44 87 43 87 
3aec6     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3aeca     43 87 43 87 
3aece     43 87 44 87 
3aed2     44 87 43 87 
3aed6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
3aeda     43 87 43 87 
3aede     43 87 43 87 
3aee2     43 87 44 87 
3aee6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3aeea     43 87 44 87 
3aeee     43 87 44 87 
3aef2     19 87 7D 86 
3aef6     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
3aefa     B1 78 BC 78 
3aefe     BC 78 BC 78 
3af02     BC 78 BC 78 
3af06     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3af0a     BC 78 BC 78 
3af0e     BD 78 BC 78 
3af12     B7 78 3B 7B 
3af16     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
3af1a     96 86 44 87 
3af1e     43 87 43 87 
3af22     43 87 43 87 
3af26     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
3af2a     44 87 44 87 
3af2e     43 87 44 87 
3af32     43 87 44 87 
3af36     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
3af3a     43 87 44 87 
3af3e     43 87 44 87 
3af42     43 87 44 87 
3af46     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3af4a     43 87 44 87 
3af4e     43 87 43 87 
3af52     44 87 43 87 
3af56     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3af5a     44 87 44 87 
3af5e     43 87 43 87 
3af62     43 87 44 87 
3af66     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3af6a     43 87 43 87 
3af6e     43 87 43 87 
3af72     44 87 44 87 
3af76     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
3af7a     36 83 CF 7A 
3af7e     AB 78 BB 78 
3af82     BC 78 BC 78 
3af86     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
3af8a     BB 78 BC 78 
3af8e     BC 78 BC 78 
3af92     BC 78 BC 78 
3af96     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3af9a     BC 78 BC 78 
3af9e     BC 78 BB 78 
3afa2     BC 78 BC 78 
3afa6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3afaa     BB 78 BC 78 
3afae     BB 78 BC 78 
3afb2     BC 78 BD 78 
3afb6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
3afba     BC 78 BC 78 
3afbe     BC 78 BC 78 
3afc2     BC 78 BD 78 
3afc6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
3afca     BC 78 BB 78 
3afce     BC 78 BB 78 
3afd2     BB 78 BC 78 
3afd6     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
3afda     BC 78 BC 78 
3afde     BC 78 BC 78 
3afe2     BC 78 BB 78 
3afe6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
3afea     BC 78 BC 78 
3afee     BC 78 BD 78 
3aff2     BB 78 BC 78 
3aff6     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
3affa     BC 78 BC 78 
3affe     BC 78 BB 78 
3b002     BC 78 BB 78 
3b006     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
3b00a     BB 78 BC 78 
3b00e     BC 78 BC 78 
3b012     BC 78 BB 78 
3b016     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3b01a     BC 78 BC 78 
3b01e     BC 78 BB 78 
3b022     BC 78 BB 78 
3b026     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3b02a     BC 78 BC 78 
3b02e     BC 78 BC 78 
3b032     BB 78 BC 78 
3b036     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
3b03a     BC 78 9F 78 
3b03e     52 79 B3 84 
3b042     2F 86 60 87 
3b046     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
3b04a     44 87 43 87 
3b04e     43 87 43 87 
3b052     43 87 43 87 
3b056     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3b05a     43 87 43 87 
3b05e     43 87 44 87 
3b062     43 87 43 87 
3b066     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3b06a     43 87 43 87 
3b06e     43 87 43 87 
3b072     43 87 44 87 
3b076     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3b07a     44 87 44 87 
3b07e     5E 87 BC 80 
3b082     FB 80 94 78 
3b086     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
3b08a     BD 78 BC 78 
3b08e     BB 78 BC 78 
3b092     BB 78 BB 78 
3b096     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
3b09a     BC 78 BB 78 
3b09e     BB 78 6B 79 
3b0a2     D6 77 AC 87 
3b0a6     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
3b0aa     43 87 44 87 
3b0ae     43 87 43 87 
3b0b2     44 87 43 87 
3b0b6     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3b0ba     43 87 44 87 
3b0be     43 87 5C 87 
3b0c2     E7 80 00 80 
3b0c6     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
3b0ca     BC 78 BD 78 
3b0ce     BC 78 BC 78 
3b0d2     BC 78 BB 78 
3b0d6     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3b0da     BC 78 BC 78 
3b0de     BB 78 BC 78 
3b0e2     BB 78 BC 78 
3b0e6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3b0ea     BB 78 BC 78 
3b0ee     BC 78 BC 78 
3b0f2     BC 78 BC 78 
3b0f6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3b0fa     BC 78 BC 78 
3b0fe     BC 78 BC 78 
3b102     A0 78 8D 7B 
3b106     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
3b10a     60 87 43 87 
3b10e     44 87 44 87 
3b112     43 87 43 87 
3b116     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
3b11a     44 87 43 87 
3b11e     43 87 43 87 
3b122     44 87 73 86 
3b126     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
3b12a     51 7B B6 78 
3b12e     BC 78 BD 78 
3b132     BC 78 BC 78 
3b136     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3b13a     BB 78 BC 78 
3b13e     BD 78 BB 78 
3b142     BC 78 BB 78 
3b146     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3b14a     BC 78 BC 78 
3b14e     BC 78 BC 78 
3b152     BB 78 BC 78 
3b156     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3b15a     BC 78 BB 78 
3b15e     BB 78 BC 78 
3b162     BC 78 BB 78 
3b166     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
3b16a     22 8C AF 84 
3b16e     48 87 43 87 
3b172     44 87 43 87 
3b176     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
3b17a     43 87 42 87 
3b17e     43 87 43 87 
3b182     44 87 43 87 
3b186     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3b18a     43 87 43 87 
3b18e     44 87 44 87 
3b192     43 87 43 87 
3b196     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3b19a     43 87 43 87 
3b19e     43 87 43 87 
3b1a2     44 87 43 87 
3b1a6     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
3b1aa     9F 8B D6 77 
3b1ae     16 7C B3 78 
3b1b2     BC 78 BB 78 
3b1b6     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3b1ba     BB 78 BC 78 
3b1be     BB 78 BC 78 
3b1c2     BC 78 BC 78 
3b1c6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3b1ca     BC 78 BB 78 
3b1ce     BB 78 BC 78 
3b1d2     BB 78 BC 78 
3b1d6     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
3b1da     BB 78 BB 78 
3b1de     BC 78 BC 78 
3b1e2     BC 78 BB 78 
3b1e6     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
3b1ea     BC 78 BC 78 
3b1ee     BC 78 BD 78 
3b1f2     BB 78 BC 78 
3b1f6     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
3b1fa     BC 78 BC 78 
3b1fe     BC 78 BB 78 
3b202     BC 78 BC 78 
3b206     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3b20a     A8 78 54 7E 
3b20e     F4 83 17 82 
3b212     50 87 43 87 
3b216     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
3b21a     44 87 43 87 
3b21e     44 87 43 87 
3b222     43 87 44 87 
3b226     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3b22a     43 87 28 87 
3b22e     20 85 CF 7A 
3b232     70 7D AD 78 
3b236     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
3b23a     BB 78 BC 78 
3b23e     BC 78 BC 78 
3b242     BB 78 BB 78 
3b246     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
3b24a     BB 78 B2 78 
3b24e     9A 7C CF 7A 
3b252     4A 87 0D 87 
3b256     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
3b25a     43 87 44 87 
3b25e     43 87 44 87 
3b262     43 87 43 87 
3b266     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
3b26a     44 87 43 87 
3b26e     28 87 51 85 
3b272     11 7A 1E 7D 
3b276     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
3b27a     BC 78 BB 78 
3b27e     BC 78 BC 78 
3b282     BC 78 BC 78 
3b286     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3b28a     BB 78 BC 78 
3b28e     BB 78 BC 78 
3b292     BC 78 BC 78 
3b296     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3b29a     BB 78 BC 78 
3b29e     BC 78 BC 78 
3b2a2     BD 78 BB 78 
3b2a6     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
3b2aa     BC 78 BB 78 
3b2ae     BC 78 BC 78 
3b2b2     BC 78 BB 78 
3b2b6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3b2ba     BC 78 BC 78 
3b2be     BC 78 BC 78 
3b2c2     BB 78 BC 78 
3b2c6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3b2ca     BC 78 BD 78 
3b2ce     BC 78 BC 78 
3b2d2     BC 78 BB 78 
3b2d6     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3b2da     BC 78 BB 78 
3b2de     BB 78 BC 78 
3b2e2     BC 78 BB 78 
3b2e6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3b2ea     BB 78 BB 78 
3b2ee     BB 78 BC 78 
3b2f2     B6 78 48 7D 
3b2f6     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
3b2fa     56 87 43 87 
3b2fe     42 87 44 87 
3b302     44 87 43 87 
3b306     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
3b30a     43 87 44 87 
3b30e     43 87 44 87 
3b312     4C 87 7E 83 
3b316     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
3b31a     F7 78 BC 78 
3b31e     BC 78 BB 78 
3b322     BB 78 BC 78 
3b326     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3b32a     BC 78 BB 78 
3b32e     BC 78 BC 78 
3b332     BB 78 BC 78 
3b336     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
3b33a     BB 78 BC 78 
3b33e     BC 78 BC 78 
3b342     BC 78 BB 78 
3b346     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3b34a     BC 78 BC 78 
3b34e     BC 78 BC 78 
3b352     BC 78 BB 78 
3b356     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3b35a     BC 78 BB 78 
3b35e     BB 78 BC 78 
3b362     BC 78 BB 78 
3b366     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3b36a     BC 78 BC 78 
3b36e     BB 78 BC 78 
3b372     BC 78 BC 78 
3b376     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
3b37a     73 32 00 04 
3b37e     00 00 10 00 
3b382     00 00 00 00 
3b386     00 00 00 00 | atari12 file "atari12.s2"
3b38a     00 6D 00 6D 
3b38e     00 6D 00 6D 
3b392     00 6D 00 6D 
3b396     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b39a     00 6D 00 6D 
3b39e     00 6D 00 6D 
3b3a2     00 6D 00 6D 
3b3a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b3aa     00 6D 00 6D 
3b3ae     00 6D 00 6D 
3b3b2     00 6D 00 6D 
3b3b6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b3ba     00 6D 00 6D 
3b3be     00 6D 00 6D 
3b3c2     00 6D 00 6D 
3b3c6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b3ca     00 6D 00 6D 
3b3ce     00 6D 00 6D 
3b3d2     00 6D 00 6D 
3b3d6     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
3b3da     00 6C 00 6C 
3b3de     00 6C 00 6C 
3b3e2     00 6C 00 6C 
3b3e6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3b3ea     00 6C 00 6C 
3b3ee     00 6C 00 6C 
3b3f2     00 6C 00 6C 
3b3f6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3b3fa     00 6C 00 6C 
3b3fe     00 6C 00 6C 
3b402     00 6C 00 6C 
3b406     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3b40a     00 6C 00 6C 
3b40e     00 6C 00 6C 
3b412     00 6C 00 6C 
3b416     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3b41a     00 6C 00 6C 
3b41e     00 6C 00 6C 
3b422     00 6C 00 6C 
3b426     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3b42a     00 6C 00 6C 
3b42e     00 6C 00 6C 
3b432     00 6C 00 6C 
3b436     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3b43a     00 6C 00 6C 
3b43e     00 6C 00 6C 
3b442     00 6C 00 6C 
3b446     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3b44a     00 6C 00 6C 
3b44e     00 6C 00 6C 
3b452     00 6C 00 6C 
3b456     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3b45a     00 6C 00 6C 
3b45e     00 6C 00 6C 
3b462     00 6C 00 6C 
3b466     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3b46a     00 6C 00 6C 
3b46e     00 6C 00 6C 
3b472     00 6C 00 6C 
3b476     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3b47a     00 6C 00 6C 
3b47e     00 6C 00 6C 
3b482     00 6C 00 6C 
3b486     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3b48a     00 6C 00 6B 
3b48e     00 6B 00 6B 
3b492     00 6B 00 6B 
3b496     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3b49a     00 6B 00 6B 
3b49e     00 6B 00 6B 
3b4a2     00 6B 00 6B 
3b4a6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3b4aa     00 6B 00 6B 
3b4ae     00 6B 00 6B 
3b4b2     00 6B 00 6B 
3b4b6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3b4ba     00 6B 00 6B 
3b4be     00 6B 00 6B 
3b4c2     00 6B 00 6B 
3b4c6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3b4ca     00 6B 00 6B 
3b4ce     00 6B 00 6B 
3b4d2     00 6B 00 6B 
3b4d6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3b4da     00 6B 00 6B 
3b4de     00 6B 00 6B 
3b4e2     00 6B 00 6B 
3b4e6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3b4ea     00 6B 00 6B 
3b4ee     00 6B 00 6B 
3b4f2     00 6B 00 6B 
3b4f6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3b4fa     00 6B 00 6B 
3b4fe     00 6B 00 6B 
3b502     00 6B 00 6B 
3b506     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3b50a     00 6B 00 6B 
3b50e     00 6B 00 6B 
3b512     00 6B 00 6B 
3b516     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3b51a     00 6B 00 6B 
3b51e     00 6B 00 6B 
3b522     00 6A 00 9D 
3b526     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
3b52a     00 9E 00 9E 
3b52e     00 9E 00 9E 
3b532     00 9E 00 9E 
3b536     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3b53a     00 9E 00 9E 
3b53e     00 9E 00 9E 
3b542     00 9E 00 9E 
3b546     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3b54a     00 9E 00 9E 
3b54e     00 9E 00 9E 
3b552     00 9E 00 9E 
3b556     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3b55a     00 9E 00 9E 
3b55e     00 9E 00 9E 
3b562     00 9E 00 9E 
3b566     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3b56a     00 9E 00 9E 
3b56e     00 9E 00 9E 
3b572     00 9E 00 9E 
3b576     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3b57a     00 9E 00 9E 
3b57e     00 9E 00 9E 
3b582     00 9E 00 9E 
3b586     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3b58a     00 9E 00 9E 
3b58e     00 9E 00 9E 
3b592     00 9E 00 9E 
3b596     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3b59a     00 9E 00 9E 
3b59e     00 9E 00 9E 
3b5a2     00 9E 00 9E 
3b5a6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3b5aa     00 9E 00 9E 
3b5ae     00 9E 00 9E 
3b5b2     00 9E 00 9E 
3b5b6     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
3b5ba     00 9F 00 9F 
3b5be     00 9F 00 9F 
3b5c2     00 9F 00 9F 
3b5c6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b5ca     00 9F 00 9F 
3b5ce     00 9F 00 9F 
3b5d2     00 9F 00 9F 
3b5d6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b5da     00 9F 00 9F 
3b5de     00 9F 00 9F 
3b5e2     00 9F 00 9F 
3b5e6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b5ea     00 9F 00 9F 
3b5ee     00 9F 00 9F 
3b5f2     00 9F 00 9F 
3b5f6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b5fa     00 9F 00 9F 
3b5fe     00 9F 00 9F 
3b602     00 9F 00 9F 
3b606     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b60a     00 9F 00 9F 
3b60e     00 9F 00 9F 
3b612     00 9F 00 9F 
3b616     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b61a     00 9F 00 9F 
3b61e     00 9F 00 9F 
3b622     00 9F 00 9F 
3b626     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b62a     00 9F 00 9F 
3b62e     00 9F 00 9F 
3b632     00 9F 00 9F 
3b636     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b63a     00 9F 00 9F 
3b63e     00 9F 00 9F 
3b642     00 9F 00 9F 
3b646     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b64a     00 9F 00 9F 
3b64e     00 9F 00 9F 
3b652     00 9F 00 9F 
3b656     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b65a     00 9F 00 9F 
3b65e     00 9F 00 9F 
3b662     00 9F 00 9F 
3b666     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b66a     00 9F 00 9F 
3b66e     00 9F 00 9F 
3b672     00 9F 00 9F 
3b676     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b67a     00 9F 00 9F 
3b67e     00 9F 00 A0 
3b682     00 A0 00 A0 
3b686     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b68a     00 A0 00 A0 
3b68e     00 A0 00 A0 
3b692     00 A0 00 A0 
3b696     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b69a     00 A0 00 A0 
3b69e     00 A0 00 A0 
3b6a2     00 A0 00 A0 
3b6a6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b6aa     00 A0 00 A0 
3b6ae     00 A0 00 A0 
3b6b2     00 A0 00 A0 
3b6b6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b6ba     00 A0 00 A0 
3b6be     00 A0 00 A0 
3b6c2     00 A0 00 A0 
3b6c6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b6ca     00 A0 00 A0 
3b6ce     00 A0 00 A0 
3b6d2     00 A0 00 A0 
3b6d6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b6da     00 A0 00 A0 
3b6de     00 A0 00 A0 
3b6e2     00 A0 00 A0 
3b6e6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b6ea     00 A0 00 A0 
3b6ee     00 A0 00 A0 
3b6f2     00 A0 00 A0 
3b6f6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b6fa     00 A0 00 A0 
3b6fe     00 A0 00 A0 
3b702     00 A0 00 A0 
3b706     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b70a     00 A0 00 A0 
3b70e     00 A0 00 A0 
3b712     00 A0 00 A0 
3b716     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b71a     00 A0 00 A0 
3b71e     00 A0 00 A0 
3b722     00 A0 00 A0 
3b726     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b72a     00 A0 00 A0 
3b72e     00 A0 00 A0 
3b732     00 A0 00 A0 
3b736     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b73a     00 A0 00 A0 
3b73e     00 A0 00 A0 
3b742     00 A0 00 A0 
3b746     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
3b74a     00 6D 00 6D 
3b74e     00 6D 00 6D 
3b752     00 6D 00 6D 
3b756     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b75a     00 6D 00 6D 
3b75e     00 6D 00 6D 
3b762     00 6D 00 6D 
3b766     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b76a     00 6D 00 6D 
3b76e     00 6D 00 6D 
3b772     00 6D 00 6D 
3b776     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b77a     00 6D 00 6D 
3b77e     00 6D 00 6D 
3b782     00 6D 00 6D 
3b786     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b78a     00 6D 00 6D 
3b78e     00 6D 00 6D 
3b792     00 6D 00 6D 
3b796     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b79a     00 6D 00 6D 
3b79e     00 6D 00 6D 
3b7a2     00 6D 00 6D 
3b7a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b7aa     00 6D 00 6D 
3b7ae     00 6D 00 6D 
3b7b2     00 6D 00 6D 
3b7b6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b7ba     00 6D 00 6D 
3b7be     00 6D 00 6D 
3b7c2     00 6D 00 6D 
3b7c6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b7ca     00 6D 00 6D 
3b7ce     00 A0 00 A0 
3b7d2     00 A0 00 A0 
3b7d6     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b7da     00 A0 00 A0 
3b7de     00 A0 00 A0 
3b7e2     00 A0 00 A0 
3b7e6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b7ea     00 A0 00 A0 
3b7ee     00 A0 00 A0 
3b7f2     00 A0 00 A0 
3b7f6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b7fa     00 A0 00 A0 
3b7fe     00 A0 00 A0 
3b802     00 A0 00 A0 
3b806     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b80a     00 A0 00 A0 
3b80e     00 A0 00 A0 
3b812     00 A0 00 A0 
3b816     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b81a     00 A0 00 A0 
3b81e     00 A0 00 A0 
3b822     00 A0 00 A0 
3b826     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b82a     00 A0 00 A0 
3b82e     00 A0 00 A0 
3b832     00 A0 00 A0 
3b836     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b83a     00 A0 00 A0 
3b83e     00 A0 00 A0 
3b842     00 A0 00 A0 
3b846     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b84a     00 A0 00 A0 
3b84e     00 A0 00 A0 
3b852     00 A0 00 A0 
3b856     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
3b85a     00 6D 00 6D 
3b85e     00 6D 00 6D 
3b862     00 6D 00 6D 
3b866     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b86a     00 6D 00 6D 
3b86e     00 6D 00 6D 
3b872     00 6D 00 6D 
3b876     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b87a     00 6D 00 6D 
3b87e     00 6D 00 6D 
3b882     00 6D 00 6D 
3b886     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b88a     00 6D 00 6D 
3b88e     00 6D 00 6D 
3b892     00 6D 00 6D 
3b896     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b89a     00 6D 00 6D 
3b89e     00 6D 00 6D 
3b8a2     00 6D 00 6D 
3b8a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b8aa     00 6D 00 6D 
3b8ae     00 6D 00 6D 
3b8b2     00 6D 00 6D 
3b8b6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b8ba     00 6D 00 6D 
3b8be     00 6D 00 6D 
3b8c2     00 6D 00 6D 
3b8c6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b8ca     00 6D 00 6D 
3b8ce     00 6D 00 6D 
3b8d2     00 6D 00 6D 
3b8d6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b8da     00 6D 00 6D 
3b8de     00 6C 00 A0 
3b8e2     00 9F 00 A0 
3b8e6     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
3b8ea     00 A0 00 A0 
3b8ee     00 A0 00 A0 
3b8f2     00 A0 00 A0 
3b8f6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b8fa     00 A0 00 A0 
3b8fe     00 A0 00 A0 
3b902     00 A0 00 A0 
3b906     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b90a     00 A0 00 A0 
3b90e     00 A0 00 A0 
3b912     00 A0 00 A0 
3b916     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b91a     00 A0 00 A0 
3b91e     00 A0 00 A0 
3b922     00 A0 00 A0 
3b926     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b92a     00 A0 00 A0 
3b92e     00 A0 00 A0 
3b932     00 A0 00 A0 
3b936     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b93a     00 A0 00 A0 
3b93e     00 A0 00 A0 
3b942     00 A0 00 A0 
3b946     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b94a     00 A0 00 A0 
3b94e     00 A0 00 A0 
3b952     00 A0 00 A0 
3b956     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b95a     00 A0 00 A0 
3b95e     00 A0 00 A0 
3b962     00 A0 00 A0 
3b966     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b96a     00 A0 00 A0 
3b96e     00 A0 00 A0 
3b972     00 A0 00 A0 
3b976     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b97a     00 A0 00 A0 
3b97e     00 A0 00 A0 
3b982     00 A0 00 A0 
3b986     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b98a     00 A0 00 A0 
3b98e     00 A0 00 A0 
3b992     00 A0 00 A0 
3b996     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
3b99a     00 A1 00 A1 
3b99e     00 A1 00 A1 
3b9a2     00 A1 00 A1 
3b9a6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3b9aa     00 A1 00 A1 
3b9ae     00 A1 00 A1 
3b9b2     00 A1 00 A1 
3b9b6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3b9ba     00 A1 00 A1 
3b9be     00 A1 00 A1 
3b9c2     00 A1 00 A1 
3b9c6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3b9ca     00 A1 00 A1 
3b9ce     00 A1 00 A1 
3b9d2     00 A1 00 A1 
3b9d6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3b9da     00 A1 00 A1 
3b9de     00 A1 00 A1 
3b9e2     00 A1 00 A1 
3b9e6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3b9ea     00 A1 00 A1 
3b9ee     00 A1 00 A1 
3b9f2     00 6E 00 6E 
3b9f6     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3b9fa     00 6E 00 6E 
3b9fe     00 6E 00 6E 
3ba02     00 6E 00 6E 
3ba06     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3ba0a     00 6E 00 6E 
3ba0e     00 6E 00 6E 
3ba12     00 6E 00 6E 
3ba16     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3ba1a     00 6E 00 6E 
3ba1e     00 6E 00 6E 
3ba22     00 6E 00 6E 
3ba26     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3ba2a     00 6E 00 6D 
3ba2e     00 6D 00 6D 
3ba32     00 6D 00 6D 
3ba36     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3ba3a     00 6D 00 6D 
3ba3e     00 6D 00 6D 
3ba42     00 6D 00 6D 
3ba46     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3ba4a     00 6D 00 6D 
3ba4e     00 6D 00 6D 
3ba52     00 6D 00 6D 
3ba56     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3ba5a     00 6D 00 6D 
3ba5e     00 6D 00 6D 
3ba62     00 6D 00 6D 
3ba66     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3ba6a     00 6D 00 6D 
3ba6e     00 6D 00 6D 
3ba72     00 6D 00 6D 
3ba76     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3ba7a     00 6D 00 6D 
3ba7e     00 6D 00 6D 
3ba82     00 6D 00 6D 
3ba86     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3ba8a     00 6D 00 6D 
3ba8e     00 6D 00 6D 
3ba92     00 6D 00 6D 
3ba96     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3ba9a     00 6D 00 6D 
3ba9e     00 6D 00 6D 
3baa2     00 6D 00 6D 
3baa6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3baaa     00 6D 00 6D 
3baae     00 6D 00 6D 
3bab2     00 6D 00 6D 
3bab6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3baba     00 6D 00 6D 
3babe     00 6D 00 6D 
3bac2     00 6D 00 6D 
3bac6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3baca     00 6D 00 6D 
3bace     00 6D 00 6D 
3bad2     00 6D 00 6D 
3bad6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3bada     00 6D 00 6D 
3bade     00 6C 00 6C 
3bae2     00 6C 00 6C 
3bae6     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3baea     00 6C 00 6C 
3baee     00 6C 00 6C 
3baf2     00 6C 00 6C 
3baf6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3bafa     00 6C 00 6C 
3bafe     00 6C 00 6C 
3bb02     00 9D 00 9F 
3bb06     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
3bb0a     00 9F 00 9F 
3bb0e     00 9F 00 9F 
3bb12     00 A0 00 A0 
3bb16     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3bb1a     00 A0 00 A0 
3bb1e     00 A0 00 A0 
3bb22     00 A0 00 A0 
3bb26     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3bb2a     00 A0 00 A0 
3bb2e     00 A0 00 A0 
3bb32     00 A0 00 A0 
3bb36     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3bb3a     00 A0 00 A0 
3bb3e     00 A0 00 A0 
3bb42     00 A0 00 A0 
3bb46     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3bb4a     00 A0 00 A0 
3bb4e     00 A0 00 A0 
3bb52     00 A0 00 A0 
3bb56     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3bb5a     00 A0 00 A0 
3bb5e     00 A0 00 A0 
3bb62     00 A0 00 A0 
3bb66     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3bb6a     00 A0 00 A0 
3bb6e     00 A0 00 A0 
3bb72     00 A0 00 A0 
3bb76     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3bb7a     00 A0 00 A0 
3bb7e     00 A0 00 A0 
3bb82     00 A0 00 A0 
3bb86     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3bb8a     01 00 00 00 
3bb8e     00 00 00 00 
3bb92     00 00 00 00 
3bb96     00 00 00 00 | mouse  file "mouse2.def"
3bb9a     00 00 00 00 
3bb9e     00 00 00 00 
3bba2     00 00 00 00 
3bba6     00 00 00 00 | 	byte	$00[16]
3bbaa     01 01 00 00 
3bbae     00 00 00 00 
3bbb2     00 00 00 00 
3bbb6     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bbba     00 00 00 00 
3bbbe     00 00 00 00 
3bbc2     00 00 00 00 
3bbc6     00 00 00 00 | 	byte	$00[16]
3bbca     01 0D 01 00 
3bbce     00 00 00 00 
3bbd2     00 00 00 00 
3bbd6     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bbda     00 00 00 00 
3bbde     00 00 00 00 
3bbe2     00 00 00 00 
3bbe6     00 00 00 00 | 	byte	$00[16]
3bbea     01 0D 0D 01 
3bbee     00 00 00 00 
3bbf2     00 00 00 00 
3bbf6     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bbfa     00 00 00 00 
3bbfe     00 00 00 00 
3bc02     00 00 00 00 
3bc06     00 00 00 00 | 	byte	$00[16]
3bc0a     01 0D 0D 0D 
3bc0e     01 00 00 00 
3bc12     00 00 00 00 
3bc16     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bc1a     00 00 00 00 
3bc1e     00 00 00 00 
3bc22     00 00 00 00 
3bc26     00 00 00 00 | 	byte	$00[16]
3bc2a     01 0D 0D 0D 
3bc2e     0D 01 00 00 
3bc32     00 00 00 00 
3bc36     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bc3a     00 00 00 00 
3bc3e     00 00 00 00 
3bc42     00 00 00 00 
3bc46     00 00 00 00 | 	byte	$00[16]
3bc4a     01 0D 0D 0D 
3bc4e     0D 0D 01 00 
3bc52     00 00 00 00 
3bc56     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bc5a     00 00 00 00 
3bc5e     00 00 00 00 
3bc62     00 00 00 00 
3bc66     00 00 00 00 | 	byte	$00[16]
3bc6a     01 0D 0D 0D 
3bc6e     0D 0D 0D 01 
3bc72     00 00 00 00 
3bc76     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
3bc7a     00 00 00 00 
3bc7e     00 00 00 00 
3bc82     00 00 00 00 
3bc86     00 00 00 00 | 	byte	$00[16]
3bc8a     01 0D 0D 0D 
3bc8e     0D 0D 0D 0C 
3bc92     01 00 00 00 
3bc96     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
3bc9a     00 00 00 00 
3bc9e     00 00 00 00 
3bca2     00 00 00 00 
3bca6     00 00 00 00 | 	byte	$00[16]
3bcaa     01 0D 0D 0D 
3bcae     0D 0D 0D 0D 
3bcb2     0C 01 00 00 
3bcb6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
3bcba     00 00 00 00 
3bcbe     00 00 00 00 
3bcc2     00 00 00 00 
3bcc6     00 00 00 00 | 	byte	$00[16]
3bcca     01 0D 0D 0D 
3bcce     0D 0D 0D 0D 
3bcd2     0D 0C 01 00 
3bcd6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
3bcda     00 00 00 00 
3bcde     00 00 00 00 
3bce2     00 00 00 00 
3bce6     00 00 00 00 | 	byte	$00[16]
3bcea     01 0D 0D 0D 
3bcee     0D 0D 0D 0D 
3bcf2     0D 0D 0B 01 
3bcf6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
3bcfa     00 00 00 00 
3bcfe     00 00 00 00 
3bd02     00 00 00 00 
3bd06     00 00 00 00 | 	byte	$00[16]
3bd0a     01 0D 0D 0D 
3bd0e     0C 0D 0D 03 
3bd12     01 01 01 01 
3bd16     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
3bd1a     00 00 00 00 
3bd1e     00 00 00 00 
3bd22     00 00 00 00 
3bd26     00 00 00 00 | 	byte	$00[16]
3bd2a     01 0D 0D 0C 
3bd2e     01 09 0D 03 
3bd32     00 00 00 00 
3bd36     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
3bd3a     00 00 00 00 
3bd3e     00 00 00 00 
3bd42     00 00 00 00 
3bd46     00 00 00 00 | 	byte	$00[16]
3bd4a     01 0D 0C 01 
3bd4e     00 01 0D 0B 
3bd52     01 00 00 00 
3bd56     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
3bd5a     00 00 00 00 
3bd5e     00 00 00 00 
3bd62     00 00 00 00 
3bd66     00 00 00 00 | 	byte	$00[16]
3bd6a     01 0C 01 00 
3bd6e     00 01 0A 0D 
3bd72     01 00 00 00 
3bd76     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
3bd7a     00 00 00 00 
3bd7e     00 00 00 00 
3bd82     00 00 00 00 
3bd86     00 00 00 00 | 	byte	$00[16]
3bd8a     01 01 00 00 
3bd8e     00 00 01 0D 
3bd92     0B 01 00 00 
3bd96     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
3bd9a     00 00 00 00 
3bd9e     00 00 00 00 
3bda2     00 00 00 00 
3bda6     00 00 00 00 
3bdaa     00 00 00 00 
3bdae     00 00       | 	byte	$00[22]
3bdb0     01 0B 0D 01 
3bdb4     00 00 00 00 
3bdb8     00 00 00 00 
3bdbc     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bdc0     00 00 00 00 
3bdc4     00 00 00 00 
3bdc8     00 00 00 00 
3bdcc     00 00 00 00 
3bdd0     00          | 	byte	$00[17]
3bdd1     01 01 00 00 
3bdd5     00 00 00 00 
3bdd9     00 00 00 00 
3bddd     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bde1     00 00 00 00 
      ...             
3bf85     00 00 00 00 
3bf89     00          | 	byte	$00[425]
3bf8a                 | 
3bf8a     00 00       |              	org
3bf8c 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
3bf90 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
3bf94 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
3bf98 003             | 
3bf98 003 00 30 04 F6 |                 mov     psramaddr,#0
3bf9c 004             | 
3bf9c 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
3bfa0 005 20 00 00 FF 
3bfa4 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
3bfa8 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
3bfac 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
3bfb0 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
3bfb4 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
3bfb8 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
3bfbc 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
3bfc0 00d             | 
3bfc0 00d 20 00 00 FF 
3bfc4 00e 00 30 04 F1 |                 add 	psramaddr,##16384
3bfc8 00f E0 03 00 FF 
3bfcc 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
3bfd0 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
3bfd4 012             | 
3bfd4 012             |                 
3bfd4 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
3bfd8 013             |     
3bfd8 013 01 2C 60 FD |                 cogid 	t11				' get id
3bfdc 014 00 00 EC FC |                 coginit #0,#0				' start the new program
3bfe0 015 03 2C 60 FD |                 cogstop t11				' stop the loader
3bfe4 016             | 
3bfe4 016 00 00 00 00 | t11 		long 	0
3bfe8 017 00 FF 07 00 | mailbox 	long 	$7FF00
3bfec 018 00 00 00 00 | psramaddr 	long 	0
3bff0 019 00 00 00 00 | pslockval	long 	0
3bff4 01a 00 00 00 00 | cmd             long    0
3bff8 01b 00 00 00 00 | buf1            long    0
3bffc 01c 00 40 00 00 | buf2            long    16384
3c000 01d 04 C0 03 00 | 	long	@@@_dat_ + 12612
3c004 01e 50 32 20 52 
3c008 01f 65 74 72 6F 
3c00c 020 6D 61 63 68 
3c010 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
3c014 022 42 41 53 49 
3c018 023 43 20 76 65 
3c01c 024 72 73 69 6F 
3c020 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
3c024 026 34 39 20 62 
3c028 027 65 74 61 20 
3c02c 028 31 00 00 00 | 	byte	$34, $39, $20, $62, $65, $74, $61, $20, $31, $00, $00, $00
3c030 029             | 	alignl
3c030 029             | _hg010b_spin2_dat_
3c030 029             | 
3c030 029 00 00 00 00 
3c034 02a 00 00 00 00 
3c038 02b 00 00 00 00 
3c03c 02c 00 00 00 00 
3c040 02d 00 00 00    | vga_font       file "vgafont.def"
3c043 02d 7E 81 A5 81 
3c047 02e 81 BD 99 81 
3c04b 02f 81 7E 00 00 
3c04f 030 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
3c053 031 7E FF DB FF 
3c057 032 FF C3 E7 FF 
3c05b 033 FF 7E 00 00 
3c05f 034 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
3c063 035 00 36 7F 7F 
3c067 036 7F 7F 3E 1C 
3c06b 037 08 00 00 00 
3c06f 038 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
3c073 039 00 08 1C 3E 
3c077 03a 7F 3E 1C 08 
3c07b 03b 00 00 00 00 
3c07f 03c 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
3c083 03d 18 3C 3C E7 
3c087 03e E7 E7 18 18 
3c08b 03f 3C 00 00 00 
3c08f 040 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3c093 041 18 3C 7E FF 
3c097 042 FF 7E 18 18 
3c09b 043 3C 00 00 00 
3c09f 044 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3c0a3 045 00 00 00 18 
3c0a7 046 3C 3C 18 00 
3c0ab 047 00 00 00 00 
3c0af 048 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
3c0b3 049 FF FF FF E7 
3c0b7 04a C3 C3 E7 FF 
3c0bb 04b FF FF FF FF 
3c0bf 04c FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3c0c3 04d 00 00 3C 66 
3c0c7 04e 42 42 66 3C 
3c0cb 04f 00 00 00 00 
3c0cf 050 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
3c0d3 051 FF FF C3 99 
3c0d7 052 BD BD 99 C3 
3c0db 053 FF FF FF FF 
3c0df 054 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3c0e3 055 78 70 58 4C 
3c0e7 056 1E 33 33 33 
3c0eb 057 33 1E 00 00 
3c0ef 058 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
3c0f3 059 3C 66 66 66 
3c0f7 05a 66 3C 18 7E 
3c0fb 05b 18 18 00 00 
3c0ff 05c 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
3c103 05d FC CC FC 0C 
3c107 05e 0C 0C 0C 0E 
3c10b 05f 0F 07 00 00 
3c10f 060 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
3c113 061 FE C6 FE C6 
3c117 062 C6 C6 C6 E6 
3c11b 063 E7 67 03 00 
3c11f 064 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
3c123 065 18 18 DB 3C 
3c127 066 E7 3C DB 18 
3c12b 067 18 00 00 00 
3c12f 068 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
3c133 069 03 07 0F 1F 
3c137 06a 7F 1F 0F 07 
3c13b 06b 03 01 00 00 
3c13f 06c 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
3c143 06d 60 70 78 7C 
3c147 06e 7F 7C 78 70 
3c14b 06f 60 40 00 00 
3c14f 070 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
3c153 071 18 3C 7E 18 
3c157 072 18 18 7E 3C 
3c15b 073 18 00 00 00 
3c15f 074 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
3c163 075 66 66 66 66 
3c167 076 66 66 66    | 	byte	$66[7]
3c16a 077 00 66 66 00 
3c16e 078 00 00 00 00 
3c172 079 00 FE DB DB 
3c176 07a DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
3c17a 07b D8 D8 D8 00 
3c17e 07c 00 00 00 3E 
3c182 07d 63 06 1C 36 
3c186 07e 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
3c18a 07f 30 63 3E 00 
3c18e 080 00 00 00 00 
3c192 081 00 00 00 00 
3c196 082 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3c19a 083 7F 7F 7F 00 
3c19e 084 00 00 00 00 
3c1a2 085 00 18 3C 7E 
3c1a6 086 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
3c1aa 087 3C 18 7E 00 
3c1ae 088 00 00 00 00 
3c1b2 089 00 18 3C 7E 
3c1b6 08a 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
3c1ba 08b 18 18 18 00 
3c1be 08c 00 00 00 00 
3c1c2 08d 00 18 18 18 
3c1c6 08e 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3c1ca 08f 7E 3C 18 00 
3c1ce 090 00 00 00 00 
3c1d2 091 00 00 00 18 
3c1d6 092 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
3c1da 093 00 00 00 00 
3c1de 094 00 00 00 00 
3c1e2 095 00 00 00    | 	byte	$00[11]
3c1e5 096 0C 06 7F 06 
3c1e9 097 0C 00 00 00 
3c1ed 098 00 00 00 00 
3c1f1 099 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c1f5 09a 00 03 03 03 
3c1f9 09b 7F 00 00 00 
3c1fd 09c 00 00 00 00 
3c201 09d 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c205 09e 14 36 7F 36 
3c209 09f 14 00 00 00 
3c20d 0a0 00 00 00 00 
3c211 0a1 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
3c215 0a2 1C 1C 3E 3E 
3c219 0a3 7F 7F 00 00 
3c21d 0a4 00 00 00 00 
3c221 0a5 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3c225 0a6 7F 3E 3E 1C 
3c229 0a7 1C 08 00 00 
3c22d 0a8 00 00 00 00 
3c231 0a9 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c235 0aa 00 00 00 00 
3c239 0ab 00 00 00 00 
3c23d 0ac 00 00 00 00 
3c241 0ad 00 00       | 	byte	$00[14]
3c243 0ad 18 3C 3C 3C 
3c247 0ae 18 18 18 00 
3c24b 0af 18 18 00 00 
3c24f 0b0 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
3c253 0b1 66 24 00 00 
3c257 0b2 00 00 00 00 
3c25b 0b3 00 00 00 00 
3c25f 0b4 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c263 0b5 00 36 36 7F 
3c267 0b6 36 36 36 7F 
3c26b 0b7 36 36 00 00 
3c26f 0b8 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
3c273 0b9 3E 63 43 03 
3c277 0ba 3E 60 60 61 
3c27b 0bb 63 3E 18 18 
3c27f 0bc 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
3c283 0bd 00 00 43 63 
3c287 0be 30 18 0C 06 
3c28b 0bf 63 61 00 00 
3c28f 0c0 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
3c293 0c1 1C 36 36 1C 
3c297 0c2 6E 3B 33 33 
3c29b 0c3 33 6E 00 00 
3c29f 0c4 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
3c2a3 0c5 0C 0C 0C 06 
3c2a7 0c6 00 00 00 00 
3c2ab 0c7 00 00 00 00 
3c2af 0c8 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c2b3 0c9 30 18 0C 0C 
3c2b7 0ca 0C 0C 0C 0C 
3c2bb 0cb 18 30 00 00 
3c2bf 0cc 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
3c2c3 0cd 0C 18 30 30 
3c2c7 0ce 30 30 30 30 
3c2cb 0cf 18 0C 00 00 
3c2cf 0d0 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
3c2d3 0d1 00 00 00 66 
3c2d7 0d2 3C FF 3C 66 
3c2db 0d3 00 00 00 00 
3c2df 0d4 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
3c2e3 0d5 00 00 00 18 
3c2e7 0d6 18 7E 18 18 
3c2eb 0d7 00 00 00 00 
3c2ef 0d8 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3c2f3 0d9 00 00 00 00 
3c2f7 0da 00 00 00 00 | 	byte	$00[8]
3c2fb 0db 18 18 18 0C 
3c2ff 0dc 00 00 00 00 
3c303 0dd 00 00 00 00 
3c307 0de 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
3c30b 0df 00 00 00 00 
3c30f 0e0 00 00 00 00 
3c313 0e1 00 00 00 00 
3c317 0e2 00 00 00 00 | 	byte	$00[16]
3c31b 0e3 18 18 00 00 
3c31f 0e4 00 00 00 00 
3c323 0e5 00 00 40 60 
3c327 0e6 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3c32b 0e7 03 01 00 00 
3c32f 0e8 00 00 00 00 
3c333 0e9 1C 36 63 63 
3c337 0ea 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3c33b 0eb 36 1C 00 00 
3c33f 0ec 00 00 00 00 
3c343 0ed 18 1C 1E 18 
3c347 0ee 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3c34b 0ef 18 7E 00 00 
3c34f 0f0 00 00 00 00 
3c353 0f1 3E 63 60 30 
3c357 0f2 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3c35b 0f3 63 7F 00 00 
3c35f 0f4 00 00 00 00 
3c363 0f5 3E 63 60 60 
3c367 0f6 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
3c36b 0f7 63 3E 00 00 
3c36f 0f8 00 00 00 00 
3c373 0f9 30 38 3C 36 
3c377 0fa 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
3c37b 0fb 30 78 00 00 
3c37f 0fc 00 00 00 00 
3c383 0fd 7F 03 03 03 
3c387 0fe 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
3c38b 0ff 63 3E 00 00 
3c38f 100 00 00 00 00 
3c393 101 1C 06 03 03 
3c397 102 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
3c39b 103 63 3E 00 00 
3c39f 104 00 00 00 00 
3c3a3 105 7F 63 60 60 
3c3a7 106 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
3c3ab 107 0C 0C 00 00 
3c3af 108 00 00 00 00 
3c3b3 109 3E 63 63 63 
3c3b7 10a 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
3c3bb 10b 63 3E 00 00 
3c3bf 10c 00 00 00 00 
3c3c3 10d 3E 63 63 63 
3c3c7 10e 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
3c3cb 10f 30 1E 00 00 
3c3cf 110 00 00 00 00 
3c3d3 111 00 00 00 18 
3c3d7 112 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3c3db 113 18 18 00 00 
3c3df 114 00 00 00 00 
3c3e3 115 00 00 00 18 
3c3e7 116 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3c3eb 117 18 18 0C 00 
3c3ef 118 00 00 00 00 
3c3f3 119 00 60 30 18 
3c3f7 11a 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
3c3fb 11b 30 60 00 00 
3c3ff 11c 00 00 00 00 
3c403 11d 00 00 00 7E 
3c407 11e 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
3c40b 11f 00 00 00 00 
3c40f 120 00 00 00 00 
3c413 121 00          | 	byte	$00[9]
3c414 122 06 0C 18 30 
3c418 123 60 30 18 0C 
3c41c 124 06 00 00 00 
3c420 125 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
3c424 126 63 63 30 18 
3c428 127 18 18 00 18 
3c42c 128 18 00 00 00 
3c430 129 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
3c434 12a 3E 63 63 7B 
3c438 12b 7B 7B 3B 03 
3c43c 12c 3E 00 00 00 
3c440 12d 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
3c444 12e 1C 36 63 63 
3c448 12f 7F 63 63 63 
3c44c 130 63 00 00 00 
3c450 131 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
3c454 132 66 66 66 3E 
3c458 133 66 66 66 66 
3c45c 134 3F 00 00 00 
3c460 135 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
3c464 136 66 43 03 03 
3c468 137 03 03 43 66 
3c46c 138 3C 00 00 00 
3c470 139 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
3c474 13a 36 66 66 66 
3c478 13b 66 66 66 36 
3c47c 13c 1F 00 00 00 
3c480 13d 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
3c484 13e 66 46 16 1E 
3c488 13f 16 06 46 66 
3c48c 140 7F 00 00 00 
3c490 141 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
3c494 142 66 46 16 1E 
3c498 143 16 06 06 06 
3c49c 144 0F 00 00 00 
3c4a0 145 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
3c4a4 146 66 43 03 03 
3c4a8 147 7B 63 63 66 
3c4ac 148 5C 00 00 00 
3c4b0 149 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
3c4b4 14a 63 63 63 7F 
3c4b8 14b 63 63 63 63 
3c4bc 14c 63 00 00 00 
3c4c0 14d 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
3c4c4 14e 18 18 18 18 
3c4c8 14f 18 18 18 18 | 	byte	$18[8]
3c4cc 150 3C 00 00 00 
3c4d0 151 00 00 00 78 
3c4d4 152 30 30 30 30 
3c4d8 153 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
3c4dc 154 1E 00 00 00 
3c4e0 155 00 00 00 67 
3c4e4 156 66 66 36 1E 
3c4e8 157 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
3c4ec 158 67 00 00 00 
3c4f0 159 00 00 00 0F 
3c4f4 15a 06 06 06 06 
3c4f8 15b 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3c4fc 15c 7F 00 00 00 
3c500 15d 00 00 00 63 
3c504 15e 77 7F 7F 6B 
3c508 15f 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
3c50c 160 63 00 00 00 
3c510 161 00 00 00 63 
3c514 162 67 6F 7F 7B 
3c518 163 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
3c51c 164 63 00 00 00 
3c520 165 00 00 00 3E 
3c524 166 63 63 63 63 
3c528 167 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3c52c 168 3E 00 00 00 
3c530 169 00 00 00 3F 
3c534 16a 66 66 66 3E 
3c538 16b 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
3c53c 16c 0F 00 00 00 
3c540 16d 00 00 00 3E 
3c544 16e 63 63 63 63 
3c548 16f 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
3c54c 170 3E 30 70 00 
3c550 171 00 00 00 3F 
3c554 172 66 66 66 3E 
3c558 173 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
3c55c 174 67 00 00 00 
3c560 175 00 00 00 3E 
3c564 176 63 63 06 1C 
3c568 177 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3c56c 178 3E 00 00 00 
3c570 179 00 00 00 7E 
3c574 17a 7E 5A 18 18 
3c578 17b 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3c57c 17c 3C 00 00 00 
3c580 17d 00 00 00 63 
3c584 17e 63 63 63 63 
3c588 17f 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3c58c 180 3E 00 00 00 
3c590 181 00 00 00 63 
3c594 182 63 63 63 63 
3c598 183 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
3c59c 184 08 00 00 00 
3c5a0 185 00 00 00 63 
3c5a4 186 63 63 63 6B 
3c5a8 187 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
3c5ac 188 36 00 00 00 
3c5b0 189 00 00 00 63 
3c5b4 18a 63 36 3E 1C 
3c5b8 18b 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
3c5bc 18c 63 00 00 00 
3c5c0 18d 00 00 00 66 
3c5c4 18e 66 66 66 3C 
3c5c8 18f 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
3c5cc 190 3C 00 00 00 
3c5d0 191 00 00 00 7F 
3c5d4 192 63 61 30 18 
3c5d8 193 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3c5dc 194 7F 00 00 00 
3c5e0 195 00 00 00 3C 
3c5e4 196 0C 0C 0C 0C 
3c5e8 197 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3c5ec 198 3C 00 00 00 
3c5f0 199 00 00 00 00 
3c5f4 19a 01 03 07 0E 
3c5f8 19b 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
3c5fc 19c 40 00 00 00 
3c600 19d 00 00 00 3C 
3c604 19e 30 30 30 30 
3c608 19f 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
3c60c 1a0 3C 00 00 00 
3c610 1a1 1C 36 00 00 
3c614 1a2 00 00 00 00 
3c618 1a3 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c61c 1a4 00 00 00 00 
3c620 1a5 00 00 00 00 
3c624 1a6 00 00 00 00 
3c628 1a7 00 00 00 00 
3c62c 1a8 00          | 	byte	$00[17]
3c62d 1a8 FF 00 00 0C 
3c631 1a9 18 00 00 00 
3c635 1aa 00 00 00 00 
3c639 1ab 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c63d 1ac 00 00 00 00 
3c641 1ad 00 00 00 00 
3c645 1ae 00          | 	byte	$00[9]
3c646 1ae 1E 30 3E 33 
3c64a 1af 33 33 6E 00 
3c64e 1b0 00 00 00 00 
3c652 1b1 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3c656 1b2 1E 36 66 66 
3c65a 1b3 66 66 3E 00 
3c65e 1b4 00 00 00 00 
3c662 1b5 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c666 1b6 3E 63 03 03 
3c66a 1b7 03 63 3E 00 
3c66e 1b8 00 00 00 00 
3c672 1b9 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3c676 1ba 3C 36 33 33 
3c67a 1bb 33 33 6E 00 
3c67e 1bc 00 00 00 00 
3c682 1bd 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c686 1be 3E 63 7F 03 
3c68a 1bf 03 63 3E 00 
3c68e 1c0 00 00 00 00 
3c692 1c1 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3c696 1c2 0C 1E 0C 0C 
3c69a 1c3 0C 0C 1E 00 
3c69e 1c4 00 00 00 00 
3c6a2 1c5 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c6a6 1c6 6E 33 33 33 
3c6aa 1c7 33 33 3E 30 
3c6ae 1c8 33 1E 00 00 
3c6b2 1c9 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3c6b6 1ca 36 6E 66 66 
3c6ba 1cb 66 66 67 00 
3c6be 1cc 00 00 00 00 
3c6c2 1cd 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3c6c6 1ce 1C 18 18 18 
3c6ca 1cf 18 18 3C 00 
3c6ce 1d0 00 00 00 00 
3c6d2 1d1 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
3c6d6 1d2 70 60 60 60 
3c6da 1d3 60 60 60 66 
3c6de 1d4 66 3C 00 00 
3c6e2 1d5 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
3c6e6 1d6 66 36 1E 1E 
3c6ea 1d7 36 66 67 00 
3c6ee 1d8 00 00 00 00 
3c6f2 1d9 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
3c6f6 1da 18 18 18 18 
3c6fa 1db 18 18       | 	byte	$18[6]
3c6fc 1dc 3C 00 00 00 
3c700 1dd 00 00 00 00 
3c704 1de 00 00 37 7F 
3c708 1df 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
3c70c 1e0 63 00 00 00 
3c710 1e1 00 00 00 00 
3c714 1e2 00 00 3B 66 
3c718 1e3 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3c71c 1e4 66 00 00 00 
3c720 1e5 00 00 00 00 
3c724 1e6 00 00 3E 63 
3c728 1e7 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
3c72c 1e8 3E 00 00 00 
3c730 1e9 00 00 00 00 
3c734 1ea 00 00 3B 66 
3c738 1eb 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3c73c 1ec 3E 06 06 0F 
3c740 1ed 00 00 00 00 
3c744 1ee 00 00 6E 33 
3c748 1ef 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
3c74c 1f0 3E 30 30 78 
3c750 1f1 00 00 00 00 
3c754 1f2 00 00 3B 6E 
3c758 1f3 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
3c75c 1f4 0F 00 00 00 
3c760 1f5 00 00 00 00 
3c764 1f6 00 00 3E 63 
3c768 1f7 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
3c76c 1f8 3E 00 00 00 
3c770 1f9 00 00 00 08 
3c774 1fa 0C 0C 3F 0C 
3c778 1fb 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3c77c 1fc 38 00 00 00 
3c780 1fd 00 00 00 00 
3c784 1fe 00 00 33 33 
3c788 1ff 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
3c78c 200 6E 00 00 00 
3c790 201 00 00 00 00 
3c794 202 00 00 63 63 
3c798 203 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
3c79c 204 1C 00 00 00 
3c7a0 205 00 00 00 00 
3c7a4 206 00 00 63 63 
3c7a8 207 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
3c7ac 208 36 00 00 00 
3c7b0 209 00 00 00 00 
3c7b4 20a 00 00 63 36 
3c7b8 20b 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
3c7bc 20c 63 00 00 00 
3c7c0 20d 00 00 00 00 
3c7c4 20e 00 00 63 63 
3c7c8 20f 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
3c7cc 210 7E 60 30 1F 
3c7d0 211 00 00 00 00 
3c7d4 212 00 00 7F 33 
3c7d8 213 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
3c7dc 214 7F 00 00 00 
3c7e0 215 00 00 00 70 
3c7e4 216 18 18 18 0E 
3c7e8 217 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
3c7ec 218 70 00 00 00 
3c7f0 219 00 00 00 18 
3c7f4 21a 18 18 18 18 
3c7f8 21b 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
3c7fc 21c 18 00 00 00 
3c800 21d 00 00 00 0E 
3c804 21e 18 18 18 70 
3c808 21f 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
3c80c 220 0E 00 00 00 
3c810 221 6E 3B 00 00 
3c814 222 00 00 00 00 
3c818 223 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c81c 224 00 00 00 00 
3c820 225 00 00 00 00 
3c824 226 00 00       | 	byte	$00[10]
3c826 226 08 1C 36 63 
3c82a 227 63 63 7F 00 
3c82e 228 00 00 00 00 
3c832 229 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
3c836 22a 03 03 03 03 
3c83a 22b 43 66 3C 18 
3c83e 22c 30 1E 00 00 
3c842 22d 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
3c846 22e 33 33 33 33 
3c84a 22f 33 33       | 	byte	$33[6]
3c84c 230 6E 00 00 00 
3c850 231 00 00 60 30 
3c854 232 18 00 3E 63 
3c858 233 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
3c85c 234 3E 00 00 00 
3c860 235 00 00 08 1C 
3c864 236 36 00 1E 30 
3c868 237 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
3c86c 238 6E 00 00 00 
3c870 239 00 00 00 00 
3c874 23a 33 00 1E 30 
3c878 23b 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
3c87c 23c 6E 00 00 00 
3c880 23d 00 00 1C 36 
3c884 23e 1C 00 33 33 
3c888 23f 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
3c88c 240 6E 00 00 00 
3c890 241 00 00 60 30 
3c894 242 18 00 3E 63 
3c898 243 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
3c89c 244 3E 00 00 00 
3c8a0 245 00 00 00 00 
3c8a4 246 00 00 3E 63 
3c8a8 247 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
3c8ac 248 3E 18 30 1E 
3c8b0 249 00 00 00 1C 
3c8b4 24a 58 78 38 18 
3c8b8 24b 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
3c8bc 24c 3C 00 00 00 
3c8c0 24d 00 00 00 00 
3c8c4 24e 63 00 3E 63 
3c8c8 24f 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
3c8cc 250 3E 00 00 00 
3c8d0 251 66 33 00 3E 
3c8d4 252 63 63 63 63 
3c8d8 253 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3c8dc 254 3E 00 00 00 
3c8e0 255 00 00 CC 66 
3c8e4 256 33 00 3E 63 
3c8e8 257 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
3c8ec 258 3E 00 00 00 
3c8f0 259 00 00 18 3C 
3c8f4 25a 66 00 1C 18 
3c8f8 25b 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
3c8fc 25c 3C 00 00 00 
3c900 25d 30 18 00 7F 
3c904 25e 63 61 30 18 
3c908 25f 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3c90c 260 7F 00 00 00 
3c910 261 00 63 00 08 
3c914 262 1C 36 63 63 
3c918 263 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
3c91c 264 63 00 00 00 
3c920 265 30 18 00 3C 
3c924 266 66 43 03 03 
3c928 267 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
3c92c 268 3C 00 00 00 
3c930 269 30 18 00 7F 
3c934 26a 66 46 16 1E 
3c938 26b 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
3c93c 26c 7F 00 00 00 
3c940 26d 0C 06 00 0F 
3c944 26e 06 06 06 06 
3c948 26f 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3c94c 270 7F 00 00 00 
3c950 271 30 18 00 1C 
3c954 272 18 18 18 18 
3c958 273 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
3c95c 274 3C 00 00 00 
3c960 275 00 00 08 1C 
3c964 276 36 00 3E 63 
3c968 277 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
3c96c 278 3E 00 00 00 
3c970 279 00 00 00 00 
3c974 27a 63 00 3E 63 
3c978 27b 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
3c97c 27c 3E 00 00 00 
3c980 27d 00 00 00 6F 
3c984 27e 46 26 06 06 
3c988 27f 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
3c98c 280 7F 00 00 00 
3c990 281 00 00 00 6E 
3c994 282 4C 2C 0C 0C 
3c998 283 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
3c99c 284 1E 00 00 00 
3c9a0 285 30 18 00 3E 
3c9a4 286 63 63 06 1C 
3c9a8 287 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3c9ac 288 3E 00 00 00 
3c9b0 289 00 00 60 30 
3c9b4 28a 18 00 3E 63 
3c9b8 28b 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
3c9bc 28c 3E 00 00 00 
3c9c0 28d 00 63 00 3E 
3c9c4 28e 63 63 63 63 
3c9c8 28f 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3c9cc 290 3E 00 00 00 
3c9d0 291 00 63 00 63 
3c9d4 292 63 63 63 63 
3c9d8 293 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3c9dc 294 3E 00 00 00 
3c9e0 295 6C 38 00 7E 
3c9e4 296 7E 5A 18 18 
3c9e8 297 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3c9ec 298 3C 00 00 00 
3c9f0 299 00 00 60 48 
3c9f4 29a 2C 0C 3F 0C 
3c9f8 29b 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3c9fc 29c 38 00 00 00 
3ca00 29d 00 00 00 0F 
3ca04 29e 26 36 1E 0E 
3ca08 29f 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
3ca0c 2a0 7F 00 00 00 
3ca10 2a1 00 00 00 00 
3ca14 2a2 00 63 36 1C 
3ca18 2a3 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
3ca1c 2a4 00 00 00 00 
3ca20 2a5 00 00       | 	byte	$00[6]
3ca22 2a5 36 1C 08 00 
3ca26 2a6 3E 63 03 03 
3ca2a 2a7 03 63 3E 00 
3ca2e 2a8 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
3ca32 2a9 30 18 0C 00 
3ca36 2aa 1E 30 3E 33 
3ca3a 2ab 33 33 6E 00 
3ca3e 2ac 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3ca42 2ad 60 30 18 00 
3ca46 2ae 1C 18 18 18 
3ca4a 2af 18 18 3C 00 
3ca4e 2b0 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3ca52 2b1 60 30 18 00 
3ca56 2b2 3E 63 63 63 
3ca5a 2b3 63 63 3E 00 
3ca5e 2b4 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3ca62 2b5 30 18 0C 00 
3ca66 2b6 33 33 33 33 
3ca6a 2b7 33 33 6E 00 
3ca6e 2b8 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3ca72 2b9 00 08 1C 36 
3ca76 2ba 63 63 7F 63 
3ca7a 2bb 63 63 63 18 
3ca7e 2bc 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3ca82 2bd 00 00 00 00 
3ca86 2be 1E 30 3E 33 
3ca8a 2bf 33 33 6E 18 
3ca8e 2c0 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3ca92 2c1 00 7F 63 61 
3ca96 2c2 30 18 0C 06 
3ca9a 2c3 43 63 7F 00 
3ca9e 2c4 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3caa2 2c5 36 1C 08 00 
3caa6 2c6 7F 33 18 0C 
3caaa 2c7 06 63 7F 00 
3caae 2c8 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3cab2 2c9 00 7F 66 46 
3cab6 2ca 16 1E 16 06 
3caba 2cb 46 66 7F 18 
3cabe 2cc 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3cac2 2cd 00 00 00 00 
3cac6 2ce 3E 63 7F 03 
3caca 2cf 03 63 3E 18 
3cace 2d0 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
3cad2 2d1 00 3C 66 03 
3cad6 2d2 1F 03 0F 03 
3cada 2d3 03 66 3C 00 
3cade 2d4 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
3cae2 2d5 60 30 18 00 
3cae6 2d6 7F 33 18 0C 
3caea 2d7 06 63 7F 00 
3caee 2d8 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
3caf2 2d9 00 3C 66 43 
3caf6 2da 03 03 03 03 
3cafa 2db 43 66 3C 00 
3cafe 2dc 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
3cb02 2dd 00 00 00 00 
3cb06 2de 3E 63 06 1C 
3cb0a 2df 30 63 3E 18 
3cb0e 2e0 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
3cb12 2e1 00 00 00 00 
3cb16 2e2 00 00       | 	byte	$00[6]
3cb18 2e3 6C 36 1B 36 
3cb1c 2e4 6C 00 00 00 
3cb20 2e5 00 00 00 00 
3cb24 2e6 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cb28 2e7 1B 36 6C 36 
3cb2c 2e8 1B 00 00 00 
3cb30 2e9 88 22 88 22 
3cb34 2ea 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
3cb38 2eb 88 22 88 22 
3cb3c 2ec 88 22 88 22 
3cb40 2ed AA 55 AA 55 
3cb44 2ee AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
3cb48 2ef AA 55 AA 55 
3cb4c 2f0 AA 55 AA 55 
3cb50 2f1 BB EE BB EE 
3cb54 2f2 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
3cb58 2f3 BB EE BB EE 
3cb5c 2f4 BB EE BB EE 
3cb60 2f5 18 18 18 18 
3cb64 2f6 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
3cb68 2f7 18 18 18 18 
3cb6c 2f8 18 18 18 18 
3cb70 2f9 18 18 18 18 
3cb74 2fa 18 18 18    | 	byte	$18[15]
3cb77 2fa 1F 18 18 18 
3cb7b 2fb 18 18 18 18 
3cb7f 2fc 18 30 18 00 
3cb83 2fd 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3cb87 2fe 63 7F 63 63 
3cb8b 2ff 63 63 00 00 
3cb8f 300 00 1C 36 00 
3cb93 301 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3cb97 302 63 7F 63 63 
3cb9b 303 63 63 00 00 
3cb9f 304 00 36 1C 00 
3cba3 305 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3cba7 306 1E 16 06 46 
3cbab 307 66 7F 00 00 
3cbaf 308 00 00 00 00 
3cbb3 309 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
3cbb7 30a 1C 30 60 63 
3cbbb 30b 63 3E 18 30 
3cbbf 30c 1E 6C 6C 6C 
3cbc3 30d 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
3cbc7 30e 6F 6C 6C 6C 
3cbcb 30f 6C 6C 6C 6C 
3cbcf 310 6C 6C 6C 6C 
3cbd3 311 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3cbd7 312 6C 6C 6C 6C 
3cbdb 313 6C 6C 6C 6C 
3cbdf 314 6C          | 	byte	$6c[9]
3cbe0 315 00 00 00 00 
3cbe4 316 00          | 	byte	$00[5]
3cbe5 316 7F 60 6F 6C 
3cbe9 317 6C 6C 6C 6C 
3cbed 318 6C 6C 6C 6C 
3cbf1 319 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3cbf5 31a 6F 60 7F 00 
3cbf9 31b 00 00 00 00 
3cbfd 31c 00 00 00 18 
3cc01 31d 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
3cc05 31e 61 30 18 0C 
3cc09 31f 06 43 63 7F 
3cc0d 320 00 00 00 00 
3cc11 321 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
3cc15 322 00 7F 33 18 
3cc19 323 0C 06 63 7F 
3cc1d 324 00 00 00 00 
3cc21 325 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
3cc25 326 00 00 1F 18 
3cc29 327 18 18 18 18 
3cc2d 328 18 18 18 18 
3cc31 329 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3cc35 32a 18 18 F8 00 
3cc39 32b 00 00 00 00 
3cc3d 32c 00 00 00 18 
3cc41 32d 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3cc45 32e 18 18 FF 00 
3cc49 32f 00 00 00 00 
3cc4d 330 00 00 00 00 
3cc51 331 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cc55 332 00 00 FF 18 
3cc59 333 18 18 18 18 
3cc5d 334 18 18 18 18 
3cc61 335 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3cc65 336 18 18 F8 18 
3cc69 337 18 18 18 18 
3cc6d 338 18 18 18 00 
3cc71 339 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3cc75 33a 00 00 FF 00 
3cc79 33b 00 00 00 00 
3cc7d 33c 00 00 00 18 
3cc81 33d 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3cc85 33e 18 18 FF 18 
3cc89 33f 18 18 18 18 
3cc8d 340 18 18 18 63 
3cc91 341 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
3cc95 342 36 63 63 7F 
3cc99 343 63 63 63 63 
3cc9d 344 00 00 00 00 
3cca1 345 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
3cca5 346 00 1E 30 3E 
3cca9 347 33 33 33 6E 
3ccad 348 00 00 00 6C 
3ccb1 349 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3ccb5 34a EC 0C FC 00 
3ccb9 34b 00 00 00 00 
3ccbd 34c 00 00 00 00 
3ccc1 34d 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ccc5 34e FC 0C EC 6C 
3ccc9 34f 6C 6C 6C 6C 
3cccd 350 6C 6C 6C 6C 
3ccd1 351 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3ccd5 352 EF 00 FF 00 
3ccd9 353 00 00 00 00 
3ccdd 354 00 00 00 00 
3cce1 355 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cce5 356 FF 00 EF 6C 
3cce9 357 6C 6C 6C 6C 
3cced 358 6C 6C 6C 6C 
3ccf1 359 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3ccf5 35a EC 0C EC 6C 
3ccf9 35b 6C 6C 6C 6C 
3ccfd 35c 6C 6C 6C 00 
3cd01 35d 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3cd05 35e FF 00 FF 00 
3cd09 35f 00 00 00 00 
3cd0d 360 00 00 00 6C 
3cd11 361 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3cd15 362 EF 00 EF 6C 
3cd19 363 6C 6C 6C 6C 
3cd1d 364 6C 6C 6C 00 
3cd21 365 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3cd25 366 63 3E 63 63 
3cd29 367 63 63 3E 63 
3cd2d 368 00 00 00 00 
3cd31 369 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
3cd35 36a 30 3C 36 33 
3cd39 36b 33 33 33 6E 
3cd3d 36c 00 00 00 00 
3cd41 36d 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
3cd45 36e 66 66 6F 66 
3cd49 36f 66 66 36 1F 
3cd4d 370 00 00 00 36 
3cd51 371 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
3cd55 372 66 66 66 66 
3cd59 373 66 66       | 	byte	$66[6]
3cd5b 373 36 1F 00 00 
3cd5f 374 00 00 63 00 
3cd63 375 7F 66 46 16 
3cd67 376 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
3cd6b 377 66 7F 00 00 
3cd6f 378 00 6C 38 00 
3cd73 379 38 30 30 3C 
3cd77 37a 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
3cd7b 37b 33 6E 00 00 
3cd7f 37c 00 36 1C 00 
3cd83 37d 63 67 6F 7F 
3cd87 37e 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
3cd8b 37f 63 63 00 00 
3cd8f 380 00 30 18 00 
3cd93 381 3C 18 18 18 
3cd97 382 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3cd9b 383 18 3C 00 00 
3cd9f 384 00 3C 66 00 
3cda3 385 3C 18 18 18 
3cda7 386 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3cdab 387 18 3C 00 00 
3cdaf 388 00 00 00 36 
3cdb3 389 1C 08 00 3E 
3cdb7 38a 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
3cdbb 38b 63 3E 00 00 
3cdbf 38c 00 18 18 18 
3cdc3 38d 18 18 18 18 
3cdc7 38e 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
3cdcb 38f 00 00 00 00 
3cdcf 390 00 00 00 00 
3cdd3 391 00 00 00 00 | 	byte	$00[12]
3cdd7 392 F8 18 18 18 
3cddb 393 18 18 18 18 
3cddf 394 18 FF FF FF 
3cde3 395 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3cde7 396 FF FF FF FF 
3cdeb 397 FF FF FF FF 
3cdef 398 FF          | 	byte	$ff[9]
3cdf0 399 00 00 00 00 
3cdf4 39a 00 00 00    | 	byte	$00[7]
3cdf7 39a FF FF FF FF 
3cdfb 39b FF FF FF FF 
3cdff 39c FF          | 	byte	$ff[9]
3ce00 39d 00 00 00 7E 
3ce04 39e 7E 5A 18 18 
3ce08 39f 18 18 18 18 
3ce0c 3a0 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
3ce10 3a1 1C 36 1C 63 
3ce14 3a2 63 63 63 63 
3ce18 3a3 63 63 63 63 
3ce1c 3a4 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3ce20 3a5 FF FF FF FF 
3ce24 3a6 FF FF FF    | 	byte	$ff[7]
3ce27 3a6 00 00 00 00 
3ce2b 3a7 00 00 00 00 
3ce2f 3a8 00          | 	byte	$00[9]
3ce30 3a9 30 18 00 3E 
3ce34 3aa 63 63 63 63 
3ce38 3ab 63 63 63 63 
3ce3c 3ac 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3ce40 3ad 00 00 00 1E 
3ce44 3ae 33 33 33 1B 
3ce48 3af 33 63 63 63 
3ce4c 3b0 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
3ce50 3b1 1C 36 00 3E 
3ce54 3b2 63 63 63 63 
3ce58 3b3 63 63 63 63 
3ce5c 3b4 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3ce60 3b5 30 18 00 63 
3ce64 3b6 67 6F 7F 7B 
3ce68 3b7 73 63 63 63 
3ce6c 3b8 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
3ce70 3b9 00 00 60 30 
3ce74 3ba 18 00 3B 66 
3ce78 3bb 66 66 66 66 
3ce7c 3bc 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3ce80 3bd 00 00 36 1C 
3ce84 3be 08 00 3B 66 
3ce88 3bf 66 66 66 66 
3ce8c 3c0 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3ce90 3c1 36 1C 00 3E 
3ce94 3c2 63 63 06 1C 
3ce98 3c3 30 60 63 63 
3ce9c 3c4 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
3cea0 3c5 00 00 36 1C 
3cea4 3c6 08 00 3E 63 
3cea8 3c7 06 1C 30 63 
3ceac 3c8 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
3ceb0 3c9 30 18 00 3F 
3ceb4 3ca 66 66 66 3E 
3ceb8 3cb 36 66 66 66 
3cebc 3cc 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
3cec0 3cd 30 18 00 63 
3cec4 3ce 63 63 63 63 
3cec8 3cf 63 63 63 63 
3cecc 3d0 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3ced0 3d1 00 00 60 30 
3ced4 3d2 18 00 3B 6E 
3ced8 3d3 66 06 06 06 
3cedc 3d4 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
3cee0 3d5 66 33 00 63 
3cee4 3d6 63 63 63 63 
3cee8 3d7 63 63 63 63 
3ceec 3d8 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3cef0 3d9 00 00 60 30 
3cef4 3da 18 00 63 63 
3cef8 3db 63 63 63 63 
3cefc 3dc 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
3cf00 3dd 30 18 00 66 
3cf04 3de 66 66 66 3C 
3cf08 3df 18 18 18 18 
3cf0c 3e0 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
3cf10 3e1 00 00 00 08 
3cf14 3e2 0C 0C 3F 0C 
3cf18 3e3 0C 0C 0C 6C 
3cf1c 3e4 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
3cf20 3e5 30 18 00 00 
3cf24 3e6 00 00 00 00 
3cf28 3e7 00 00 00 00 
3cf2c 3e8 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cf30 3e9 00 00 00 00 
3cf34 3ea 00 00 00 00 | 	byte	$00[8]
3cf38 3eb 7F 00 00 00 
3cf3c 3ec 00 00 00 00 
3cf40 3ed 66 33 00 00 
3cf44 3ee 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
3cf48 3ef 00 00 00 00 
3cf4c 3f0 00 00 00 00 
3cf50 3f1 00 00 00 00 
3cf54 3f2 00 00 00 00 
3cf58 3f3 00 00 00 00 
3cf5c 3f4 00          | 	byte	$00[21]
3cf5d 3f4 0C 06 3C 36 
3cf61 3f5 1C 00 00 00 
3cf65 3f6 00 00 00 00 
3cf69 3f7 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cf6d 3f8 00 00 00 63 
3cf71 3f9 3E 00 00 00 
3cf75 3fa 00 00 00 00 
3cf79 3fb 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cf7d 3fc 00 00 00 00 
3cf81 3fd 3E 63 06 1C 
3cf85 3fe 36 63 63 36 
3cf89 3ff 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
3cf8d 400 00 00 00 00 
3cf91 401 00 00 00 00 | 	byte	$00[8]
3cf95 402 18 00 7E 00 
3cf99 403 18 00 00 00 
3cf9d 404 00 00 00 00 
3cfa1 405 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cfa5 406 00 00 00 00 
3cfa9 407 00 00 00 00 | 	byte	$00[8]
3cfad 408 18 30 1E 00 
3cfb1 409 00 00 1C 36 
3cfb5 40a 36 1C 00 00 
3cfb9 40b 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
3cfbd 40c 00 00 00 00 
3cfc1 40d 63 00 00 00 
3cfc5 40e 00 00 00 00 
3cfc9 40f 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cfcd 410 00 00 00 18 
3cfd1 411 18 00 00 00 
3cfd5 412 00 00 00 00 
3cfd9 413 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cfdd 414 00 00 00 00 
3cfe1 415 00          | 	byte	$00[5]
3cfe2 415 CC 66 33 00 
3cfe6 416 33 33 33 33 
3cfea 417 33 33 6E 00 
3cfee 418 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3cff2 419 00 3F 66 66 
3cff6 41a 66 3E 36 66 
3cffa 41b 66 66 6F 00 
3cffe 41c 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
3d002 41d 36 1C 08 00 
3d006 41e 3B 6E 66 06 
3d00a 41f 06 06 0F 00 
3d00e 420 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
3d012 421 00 00 00 7E 
3d016 422 7E 7E 7E 7E 
3d01a 423 7E 7E 00 00 
3d01e 424 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
3d022 425 00 00 00 00 
3d026 426 00 00 00 00 
3d02a 427 00 00 00 00 
3d02e 428 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d030 429 00 00 00 00 
      ...             
3d060 435 00 00 00 00 
3d064 436 00 00 00    | st_font        file "st4font.def"
3d067 436 FF FF 00 00 
3d06b 437 00 00 00 00 
3d06f 438 00 18 18 18 
3d073 439 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3d077 43a 18 18 18 18 
3d07b 43b 18 18 18 18 
3d07f 43c 18          | 	byte	$18[9]
3d080 43d 00 00 00 00 
3d084 43e 00 00 00    | 	byte	$00[7]
3d087 43e FF FF 18 18 
3d08b 43f 18 18 18 18 
3d08f 440 18 18 18 18 
3d093 441 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3d097 442 FF FF 00 00 
3d09b 443 00 00 00 00 
3d09f 444 00 18 18 18 
3d0a3 445 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3d0a7 446 1F 1F 18 18 
3d0ab 447 18 18 18 18 
3d0af 448 18 18 18 18 
3d0b3 449 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3d0b7 44a F8 F8 18 18 
3d0bb 44b 18 18 18 18 
3d0bf 44c 18 00 00 00 
3d0c3 44d 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3d0c7 44e 1F 1F 18 18 
3d0cb 44f 18 18 18 18 
3d0cf 450 18 00 00 00 
3d0d3 451 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3d0d7 452 F8 F8 18 18 
3d0db 453 18 18 18 18 
3d0df 454 18 18 18 18 
3d0e3 455 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3d0e7 456 1F 1F 00 00 
3d0eb 457 00 00 00 00 
3d0ef 458 00 18 18 18 
3d0f3 459 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3d0f7 45a F8 F8 00 00 
3d0fb 45b 00 00 00 00 
3d0ff 45c 00 18 18 18 
3d103 45d 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3d107 45e FF FF 18 18 
3d10b 45f 18 18 18 18 
3d10f 460 18 00 00 18 
3d113 461 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
3d117 462 66 7E 7E 66 
3d11b 463 66 66 66 30 
3d11f 464 18 00 00 7E 
3d123 465 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3d127 466 3E 06 06 06 
3d12b 467 06 7E 7E 18 
3d12f 468 0C 30 18 3C 
3d133 469 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3d137 46a 06 06 06 66 
3d13b 46b 66 7E 3C 00 
3d13f 46c 00 30 18 66 
3d143 46d 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3d147 46e 7E 7E 76 76 
3d14b 46f 66 66 66 00 
3d14f 470 00 30 18 7C 
3d153 471 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3d157 472 1C 38 70 60 
3d15b 473 60 7E 3E 00 
3d15f 474 00 30 18 7E 
3d163 475 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3d167 476 18 0C 0C 06 
3d16b 477 06 7E 7E 00 
3d16f 478 00 18 18 00 
3d173 479 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3d177 47a 18 18 0C 0C 
3d17b 47b 06 7E 7E 00 
3d17f 47c 00 30 18 3C 
3d183 47d 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3d187 47e 66 66 66 66 
3d18b 47f 66          | 	byte	$66[5]
3d18c 480 7E 3C 00 00 
3d190 481 00 00 06 06 
3d194 482 06 06 16 1E 
3d198 483 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
3d19c 484 7E 7E 00 00 
3d1a0 485 00 00 00 00 
3d1a4 486 00 3C 7C 60 
3d1a8 487 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
3d1ac 488 7E 7C 30 18 
3d1b0 489 00 00 00 00 
3d1b4 48a 00 3C 7E 66 
3d1b8 48b 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
3d1bc 48c 7E 7C 18 0C 
3d1c0 48d 00 00 30 18 
3d1c4 48e 00 3C 3E 06 
3d1c8 48f 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
3d1cc 490 7E 7C 00 00 
3d1d0 491 00 00 30 18 
3d1d4 492 00 3E 7E 66 
3d1d8 493 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
3d1dc 494 66 66 00 00 
3d1e0 495 00 00 30 18 
3d1e4 496 00 7C 7E 06 
3d1e8 497 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
3d1ec 498 7E 3E 00 00 
3d1f0 499 00 00 30 18 
3d1f4 49a 00 7E 7E 30 
3d1f8 49b 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3d1fc 49c 7E 7E 00 00 
3d200 49d 00 00 18 18 
3d204 49e 00 7E 7E 30 
3d208 49f 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3d20c 4a0 7E 7E 00 00 
3d210 4a1 00 00 30 18 
3d214 4a2 00 3C 7E 66 
3d218 4a3 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
3d21c 4a4 7E 3C 00 00 
3d220 4a5 00 00 1C 1C 
3d224 4a6 18 18 38 3C 
3d228 4a7 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
3d22c 4a8 3C 3C 00 00 
3d230 4a9 00 00 00 00 
3d234 4aa 00 00 00 00 
3d238 4ab 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d23c 4ac 00 00 00 00 
3d240 4ad 00 00       | 	byte	$00[6]
3d242 4ad 18 18 18 18 
3d246 4ae 18 18 18 18 | 	byte	$18[8]
3d24a 4af 00 00 18 18 
3d24e 4b0 00 00 00 00 
3d252 4b1 66 66 66 66 
3d256 4b2 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3d25a 4b3 00 00 00 00 
3d25e 4b4 00 00 00 00 
3d262 4b5 00          | 	byte	$00[9]
3d263 4b5 66 66 FF FF 
3d267 4b6 66 66 FF FF 
3d26b 4b7 66 66 00 00 
3d26f 4b8 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
3d273 4b9 7C 7E 06 06 
3d277 4ba 3E 7C 60 60 
3d27b 4bb 7E 3E 18 18 
3d27f 4bc 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
3d283 4bd 66 30 30 18 
3d287 4be 18 0C 0C 66 
3d28b 4bf 66 00 00 00 
3d28f 4c0 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
3d293 4c1 66 66 3C 1C 
3d297 4c2 1C FC FE 66 
3d29b 4c3 66 FE FC 00 
3d29f 4c4 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
3d2a3 4c5 18 18 18 18 
3d2a7 4c6 00 00 00 00 
3d2ab 4c7 00 00 00 00 
3d2af 4c8 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
3d2b3 4c9 18 1C 0C 0C 
3d2b7 4ca 0C 0C 0C 0C 
3d2bb 4cb 1C 18 30 00 
3d2bf 4cc 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
3d2c3 4cd 18 38 30 30 
3d2c7 4ce 30 30 30 30 
3d2cb 4cf 38 18 0C 00 
3d2cf 4d0 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
3d2d3 4d1 66 66 3C 3C 
3d2d7 4d2 FF FF 3C 3C 
3d2db 4d3 66 66 00 00 
3d2df 4d4 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
3d2e3 4d5 00 18 18 18 
3d2e7 4d6 7E 7E 18 18 
3d2eb 4d7 18 00 00 00 
3d2ef 4d8 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3d2f3 4d9 00 00 00 00 
3d2f7 4da 00 00       | 	byte	$00[6]
3d2f9 4db 18 18 18 18 
3d2fd 4dc 18          | 	byte	$18[5]
3d2fe 4dc 0C 04 00 00 
3d302 4dd 00 00 00 00 
3d306 4de 7E 7E 00 00 
3d30a 4df 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3d30e 4e0 00 00 00 00 
3d312 4e1 00 00 00 00 
3d316 4e2 00 00 00 00 
3d31a 4e3 00          | 	byte	$00[13]
3d31b 4e3 18 18 18 00 
3d31f 4e4 00 00 00 60 
3d323 4e5 60 60 30 30 
3d327 4e6 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3d32b 4e7 06 06 06 00 
3d32f 4e8 00 00 00 3C 
3d333 4e9 7E 66 66 66 
3d337 4ea 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3d33b 4eb 66 7E 3C 00 
3d33f 4ec 00 00 00 18 
3d343 4ed 18 1C 1C 18 
3d347 4ee 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3d34b 4ef 18 7E 7E 00 
3d34f 4f0 00 00 00 3C 
3d353 4f1 7E 66 66 30 
3d357 4f2 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3d35b 4f3 0C 7E 7E 00 
3d35f 4f4 00 00 00 7E 
3d363 4f5 7E 30 30 18 
3d367 4f6 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3d36b 4f7 66 7E 3C 00 
3d36f 4f8 00 00 00 30 
3d373 4f9 30 38 38 3C 
3d377 4fa 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
3d37b 4fb 7E 30 30 00 
3d37f 4fc 00 00 00 7E 
3d383 4fd 7E 06 06 3E 
3d387 4fe 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
3d38b 4ff 66 7E 3C 00 
3d38f 500 00 00 00 38 
3d393 501 3C 0E 06 06 
3d397 502 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
3d39b 503 66 7E 3C 00 
3d39f 504 00 00 00 7E 
3d3a3 505 7E 60 60 30 
3d3a7 506 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3d3ab 507 0C 0C 0C 00 
3d3af 508 00 00 00 3C 
3d3b3 509 7E 66 66 3C 
3d3b7 50a 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
3d3bb 50b 66 7E 3C 00 
3d3bf 50c 00 00 00 3C 
3d3c3 50d 7E 66 66 7E 
3d3c7 50e 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
3d3cb 50f 70 3C 1C 00 
3d3cf 510 00 00 00 00 
3d3d3 511 00 00 18 18 
3d3d7 512 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
3d3db 513 18 18 18 00 
3d3df 514 00 00 00 00 
3d3e3 515 00 00 18 18 
3d3e7 516 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
3d3eb 517 18 18 18 0C 
3d3ef 518 04 00 00 00 
3d3f3 519 70 38 1C 0E 
3d3f7 51a 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3d3fb 51b 70 00 00 00 
3d3ff 51c 00 00 00 00 
3d403 51d 00 00 7E 7E 
3d407 51e 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3d40b 51f 00 00 00 00 
3d40f 520 00 00 00 00 | 	byte	$00[8]
3d413 521 0E 1C 38 70 
3d417 522 E0 70 38 1C 
3d41b 523 0E 00 00 00 
3d41f 524 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
3d423 525 7E 66 66 30 
3d427 526 30 18 18 18 
3d42b 527 00 18 18 00 
3d42f 528 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3d433 529 7E 66 66 66 
3d437 52a 66 36 06 66 
3d43b 52b 66 7E 3C 00 
3d43f 52c 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3d443 52d 3C 7E 66 66 
3d447 52e 66 7E 7E 66 
3d44b 52f 66 66 66 00 
3d44f 530 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3d453 531 7E 66 66 7E 
3d457 532 3E 66 66 66 
3d45b 533 66 7E 3E 00 
3d45f 534 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3d463 535 7E 66 66 06 
3d467 536 06 06 06 66 
3d46b 537 66 7E 3C 00 
3d46f 538 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3d473 539 7E 66 66 66 
3d477 53a 66 66 66 66 
3d47b 53b 66 7E 3E 00 
3d47f 53c 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3d483 53d 7E 06 06 3E 
3d487 53e 3E 06 06 06 
3d48b 53f 06 7E 7E 00 
3d48f 540 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3d493 541 7E 06 06 3E 
3d497 542 3E 06 06 06 
3d49b 543 06 06 06 00 
3d49f 544 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3d4a3 545 7E 06 06 76 
3d4a7 546 76 66 66 66 
3d4ab 547 66 7E 3C 00 
3d4af 548 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3d4b3 549 66 66 66 7E 
3d4b7 54a 7E 66 66 66 
3d4bb 54b 66 66 66 00 
3d4bf 54c 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3d4c3 54d 7E 18 18 18 
3d4c7 54e 18 18 18 18 
3d4cb 54f 18 7E 7E 00 
3d4cf 550 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
3d4d3 551 60 60 60 60 
3d4d7 552 60 60 60    | 	byte	$60[7]
3d4da 553 66 66 7E 3C 
3d4de 554 00 00 00 00 
3d4e2 555 66 66 36 36 
3d4e6 556 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3d4ea 557 66 66 C6 C6 
3d4ee 558 00 00 00 00 
3d4f2 559 06 06 06 06 
3d4f6 55a 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3d4fa 55b 06 06 7E 7E 
3d4fe 55c 00 00 00 00 
3d502 55d C6 C6 EE EE 
3d506 55e FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3d50a 55f C6 C6 C6 C6 
3d50e 560 00 00 00 00 
3d512 561 66 66 66 6E 
3d516 562 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3d51a 563 76 66 66 66 
3d51e 564 00 00 00 00 
3d522 565 3C 7E 66 66 
3d526 566 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3d52a 567 66 66 7E 3C 
3d52e 568 00 00 00 00 
3d532 569 3E 7E 66 66 
3d536 56a 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3d53a 56b 06 06 06 06 
3d53e 56c 00 00 00 00 
3d542 56d 3C 7E 66 66 
3d546 56e 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3d54a 56f 66 56 3E 6C 
3d54e 570 00 00 00 00 
3d552 571 3E 7E 66 66 
3d556 572 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3d55a 573 66 66 C6 C6 
3d55e 574 00 00 00 00 
3d562 575 7C 7E 06 06 
3d566 576 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3d56a 577 60 60 7E 3E 
3d56e 578 00 00 00 00 
3d572 579 7E 7E 18 18 
3d576 57a 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3d57a 57b 18 18 18 18 
3d57e 57c 00 00 00 00 
3d582 57d 66 66 66 66 
3d586 57e 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3d58a 57f 66 66 7E 3C 
3d58e 580 00 00 00 00 
3d592 581 66 66 66 66 
3d596 582 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3d59a 583 3C 3C 18 18 
3d59e 584 00 00 00 00 
3d5a2 585 C6 C6 C6 C6 
3d5a6 586 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3d5aa 587 FE EE C6 82 
3d5ae 588 00 00 00 00 
3d5b2 589 66 66 66 3C 
3d5b6 58a 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3d5ba 58b 3C 66 66 66 
3d5be 58c 00 00 00 00 
3d5c2 58d 66 66 66 66 
3d5c6 58e 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3d5ca 58f 18 18 18 18 
3d5ce 590 00 00 00 00 
3d5d2 591 7E 7E 30 30 
3d5d6 592 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3d5da 593 06 06 7E 7E 
3d5de 594 00 00 00 00 
3d5e2 595 3C 3C 0C 0C 
3d5e6 596 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3d5ea 597 0C 0C 3C 3C 
3d5ee 598 00 00 00 00 
3d5f2 599 06 06 0C 0C 
3d5f6 59a 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3d5fa 59b 60 60 C0 C0 
3d5fe 59c 00 00 00 00 
3d602 59d 3C 3C 30 30 
3d606 59e 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3d60a 59f 30 30 3C 3C 
3d60e 5a0 00 00 00 00 
3d612 5a1 18 18 3C 3C 
3d616 5a2 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3d61a 5a3 00 00 00 00 
3d61e 5a4 00 00 00 00 
3d622 5a5 00 00 00 00 
3d626 5a6 00 00 00 00 
3d62a 5a7 00 00       | 	byte	$00[18]
3d62c 5a8 FE FE 00 00 
3d630 5a9 00 00 0C 0C 
3d634 5aa 18 18 00 00 
3d638 5ab 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3d63c 5ac 00 00 00 00 
3d640 5ad 00 00 00 00 
3d644 5ae 00          | 	byte	$00[9]
3d645 5ae 3C 7C 60 7C 
3d649 5af 7E 66 66 7E 
3d64d 5b0 7C 00 00 00 
3d651 5b1 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3d655 5b2 3E 7E 66 66 
3d659 5b3 66 66 66 7E 
3d65d 5b4 3E 00 00 00 
3d661 5b5 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3d665 5b6 3C 3E 06 06 
3d669 5b7 06 06 06 7E 
3d66d 5b8 7C 00 00 00 
3d671 5b9 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3d675 5ba 7C 7E 66 66 
3d679 5bb 66 66 66 7E 
3d67d 5bc 7C 00 00 00 
3d681 5bd 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3d685 5be 3C 7E 66 66 
3d689 5bf 7E 06 06 7E 
3d68d 5c0 7C 00 00 00 
3d691 5c1 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3d695 5c2 18 7E 7E 18 
3d699 5c3 18 18 18 18 
3d69d 5c4 18 00 00 00 
3d6a1 5c5 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3d6a5 5c6 7C 7E 66 66 
3d6a9 5c7 66 66 7E 7C 
3d6ad 5c8 60 7E 3E 00 
3d6b1 5c9 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
3d6b5 5ca 3E 7E 66 66 
3d6b9 5cb 66 66 66 66 
3d6bd 5cc 66 00 00 00 
3d6c1 5cd 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
3d6c5 5ce 1C 1C 18 18 
3d6c9 5cf 18 18 18 3C 
3d6cd 5d0 3C 00 00 00 
3d6d1 5d1 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
3d6d5 5d2 30 30 30 30 
3d6d9 5d3 30 30 30 30 
3d6dd 5d4 30          | 	byte	$30[9]
3d6de 5d4 3E 1E 00 00 
3d6e2 5d5 06 06 06 36 
3d6e6 5d6 36 1E 1E 1E 
3d6ea 5d7 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3d6ee 5d8 00 00 00 00 
3d6f2 5d9 1C 1C 18 18 
3d6f6 5da 18 18 18 18 
3d6fa 5db 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3d6fe 5dc 00 00 00 00 
3d702 5dd 00 00 00    | 	byte	$00[7]
3d705 5de 6C FE FE D6 
3d709 5df D6 C6 C6 C6 
3d70d 5e0 C6 00 00 00 
3d711 5e1 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
3d715 5e2 3E 7E 66 66 
3d719 5e3 66 66 66 66 
3d71d 5e4 66 00 00 00 
3d721 5e5 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3d725 5e6 3C 7E 66 66 
3d729 5e7 66 66 66 7E 
3d72d 5e8 3C 00 00 00 
3d731 5e9 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
3d735 5ea 3E 7E 66 66 
3d739 5eb 66 66 66 7E 
3d73d 5ec 3E 06 06 00 
3d741 5ed 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
3d745 5ee 7C 7E 66 66 
3d749 5ef 66 66 66 7E 
3d74d 5f0 7C 60 60 00 
3d751 5f1 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3d755 5f2 3E 7E 66 06 
3d759 5f3 06 06 06 06 
3d75d 5f4 06 00 00 00 
3d761 5f5 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3d765 5f6 7C 7E 06 0E 
3d769 5f7 3C 70 60 7E 
3d76d 5f8 3E 00 00 00 
3d771 5f9 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3d775 5fa 7E 7E 18 18 
3d779 5fb 18 18 18 78 
3d77d 5fc 70 00 00 00 
3d781 5fd 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3d785 5fe 66 66 66 66 
3d789 5ff 66 66 66    | 	byte	$66[7]
3d78c 600 7E 7C 00 00 
3d790 601 00 00 00 00 
3d794 602 00 66 66 66 
3d798 603 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
3d79c 604 18 18 00 00 
3d7a0 605 00 00 00 00 
3d7a4 606 00 C6 C6 D6 
3d7a8 607 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
3d7ac 608 C6 82 00 00 
3d7b0 609 00 00 00 00 
3d7b4 60a 00 66 66 3C 
3d7b8 60b 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
3d7bc 60c 66 66 00 00 
3d7c0 60d 00 00 00 00 
3d7c4 60e 00 66 66 66 
3d7c8 60f 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
3d7cc 610 7C 60 7E 3E 
3d7d0 611 00 00 00 00 
3d7d4 612 00 7E 7E 30 
3d7d8 613 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3d7dc 614 7E 7E 00 00 
3d7e0 615 00 00 30 18 
3d7e4 616 18 18 18 0C 
3d7e8 617 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
3d7ec 618 18 30 00 00 
3d7f0 619 00 00 18 18 
3d7f4 61a 18 18 18 18 
3d7f8 61b 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3d7fc 61c 18 18 00 00 
3d800 61d 00 00 0C 18 
3d804 61e 18 18 18 30 
3d808 61f 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
3d80c 620 18 0C 00 00 
3d810 621 00 00 6C 7E 
3d814 622 36 00 00 00 
3d818 623 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
3d81c 624 00 00 00 00 
3d820 625 00 00 00 00 
3d824 626 00          | 	byte	$00[9]
3d825 626 18 18 18 18 
3d829 627 18 18 00 00 
3d82d 628 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3d830 629 00 6C FE FE 
3d834 62a 7C 38 10 00 
3d838 62b 18 18 18 F8 
3d83c 62c F8 18 18 18 | a8_font        file "atari8.fnt"
3d840 62d C0 C0 C0 C0 
3d844 62e C0 C0 C0 C0 | 	byte	$c0[8]
3d848 62f 18 18 18 1F 
3d84c 630 1F 00 00 00 
3d850 631 18 18 18 1F 
3d854 632 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3d858 633 00 00 00 1F 
3d85c 634 1F 18 18 18 
3d860 635 C0 E0 70 38 
3d864 636 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3d868 637 03 07 0E 1C 
3d86c 638 38 70 E0 C0 
3d870 639 80 C0 E0 F0 
3d874 63a F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3d878 63b 00 00 00 00 
3d87c 63c F0 F0 F0 F0 
3d880 63d 01 03 07 0F 
3d884 63e 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3d888 63f F0 F0 F0 F0 
3d88c 640 00 00 00 00 
3d890 641 0F 0F 0F 0F 
3d894 642 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3d898 643 FF FF 00 00 
3d89c 644 00 00 00 00 
3d8a0 645 00 00 00 00 
3d8a4 646 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3d8a8 647 00 00 00 00 
3d8ac 648 0F 0F 0F 0F 
3d8b0 649 00 38 38 EE 
3d8b4 64a EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3d8b8 64b 00 00 00 F8 
3d8bc 64c F8 18 18 18 
3d8c0 64d 00 00 00 FF 
3d8c4 64e FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3d8c8 64f 18 18 18 FF 
3d8cc 650 FF 18 18 18 
3d8d0 651 00 00 3C 7E 
3d8d4 652 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3d8d8 653 00 00 00 00 
3d8dc 654 FF FF FF FF 
3d8e0 655 03 03 03 03 
3d8e4 656 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3d8e8 657 00 00 00 FF 
3d8ec 658 FF 18 18 18 
3d8f0 659 18 18 18 FF 
3d8f4 65a FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3d8f8 65b 0F 0F 0F 0F 
3d8fc 65c 0F 0F 0F 0F | 	byte	$0f[8]
3d900 65d 18 18 18 F8 
3d904 65e F8 00 00 00 
3d908 65f 1E 06 1E 06 
3d90c 660 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3d910 661 00 18 3C 7E 
3d914 662 18 18 18 00 
3d918 663 00 18 18 18 
3d91c 664 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3d920 665 00 18 0C 7E 
3d924 666 0C 18 00 00 
3d928 667 00 18 30 7E 
3d92c 668 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3d930 669 00 00 00 00 
3d934 66a 00 00 00 00 
3d938 66b 00          | 	byte	$00[9]
3d939 66b 18 18 18 18 
3d93d 66c 00 18 00 00 
3d941 66d 66 66 66 00 
3d945 66e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3d949 66f 66 FF 66 66 
3d94d 670 FF 66 00 18 
3d951 671 7C 06 3C 60 
3d955 672 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3d959 673 66 36 18 0C 
3d95d 674 66 62 00 38 
3d961 675 6C 38 1C F6 
3d965 676 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3d969 677 18 18 18 00 
3d96d 678 00 00 00 00 
3d971 679 70 38 18 18 
3d975 67a 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3d979 67b 0E 1C 18 18 
3d97d 67c 1C 0E 00 00 
3d981 67d 66 3C FF 3C 
3d985 67e 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3d989 67f 18 18 7E 18 
3d98d 680 18 00 00 00 
3d991 681 00 00 00 00 
3d995 682 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3d999 683 00 00 7E 00 
3d99d 684 00 00 00 00 
3d9a1 685 00 00 00 00 
3d9a5 686 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3d9a9 687 60 30 18 0C 
3d9ad 688 06 02 00 00 
3d9b1 689 3C 66 76 6E 
3d9b5 68a 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3d9b9 68b 18 1C 18 18 
3d9bd 68c 18 7E 00 00 
3d9c1 68d 3C 66 30 18 
3d9c5 68e 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3d9c9 68f 7E 30 18 30 
3d9cd 690 66 3C 00 00 
3d9d1 691 30 38 3C 36 
3d9d5 692 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3d9d9 693 7E 06 3E 60 
3d9dd 694 66 3C 00 00 
3d9e1 695 3C 06 3E 66 
3d9e5 696 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3d9e9 697 7E 60 30 18 
3d9ed 698 0C 0C 00 00 
3d9f1 699 3C 66 3C 66 
3d9f5 69a 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3d9f9 69b 3C 66 7C 60 
3d9fd 69c 30 1C 00 00 
3da01 69d 00 18 18 00 
3da05 69e 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3da09 69f 00 18 18 00 
3da0d 6a0 18 18 0C 60 
3da11 6a1 30 18 0C 18 
3da15 6a2 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3da19 6a3 00 7E 00 00 
3da1d 6a4 7E 00 00 06 
3da21 6a5 0C 18 30 18 
3da25 6a6 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3da29 6a7 3C 66 30 18 
3da2d 6a8 00 18 00 00 
3da31 6a9 3C 66 76 76 
3da35 6aa 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3da39 6ab 18 3C 66 66 
3da3d 6ac 7E 66 00 00 
3da41 6ad 3E 66 3E 66 
3da45 6ae 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3da49 6af 3C 66 06 06 
3da4d 6b0 66 3C 00 00 
3da51 6b1 1E 36 66 66 
3da55 6b2 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3da59 6b3 7E 06 3E 06 
3da5d 6b4 06 7E 00 00 
3da61 6b5 7E 06 3E 06 
3da65 6b6 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3da69 6b7 7C 06 06 76 
3da6d 6b8 66 7C 00 00 
3da71 6b9 66 66 7E 66 
3da75 6ba 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3da79 6bb 7E 18 18 18 
3da7d 6bc 18 7E 00 00 
3da81 6bd 60 60 60 60 
3da85 6be 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3da89 6bf 66 36 1E 1E 
3da8d 6c0 36 66 00 00 
3da91 6c1 06 06 06 06 
3da95 6c2 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3da99 6c3 C6 EE FE D6 
3da9d 6c4 C6 C6 00 00 
3daa1 6c5 66 6E 7E 7E 
3daa5 6c6 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3daa9 6c7 3C 66 66 66 
3daad 6c8 66 3C 00 00 
3dab1 6c9 3E 66 66 3E 
3dab5 6ca 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3dab9 6cb 3C 66 66 66 
3dabd 6cc 36 6C 00 00 
3dac1 6cd 3E 66 66 3E 
3dac5 6ce 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3dac9 6cf 3C 06 3C 60 
3dacd 6d0 60 3C 00 00 
3dad1 6d1 7E 18 18 18 
3dad5 6d2 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3dad9 6d3 66 66 66 66 
3dadd 6d4 66          | 	byte	$66[5]
3dade 6d4 7E 00 00 66 
3dae2 6d5 66 66 66 3C 
3dae6 6d6 18 00 00 C6 
3daea 6d7 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3daee 6d8 C6 00 00 66 
3daf2 6d9 66 3C 3C 66 
3daf6 6da 66 00 00 66 
3dafa 6db 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3dafe 6dc 18 00 00 7E 
3db02 6dd 30 18 0C 06 
3db06 6de 7E 00 00 78 
3db0a 6df 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3db0e 6e0 78 00 00 02 
3db12 6e1 06 0C 18 30 
3db16 6e2 60 00 00 1E 
3db1a 6e3 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3db1e 6e4 1E 00 00 10 
3db22 6e5 38 6C C6 00 
3db26 6e6 00 00 00 00 
3db2a 6e7 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3db2e 6e8 FF 00 00 18 
3db32 6e9 3C 7E 7E 3C 
3db36 6ea 18 00 00 00 
3db3a 6eb 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3db3e 6ec 7C 00 00 06 
3db42 6ed 06 3E 66 66 
3db46 6ee 3E 00 00 00 
3db4a 6ef 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3db4e 6f0 3C 00 00 60 
3db52 6f1 60 7C 66 66 
3db56 6f2 7C 00 00 00 
3db5a 6f3 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3db5e 6f4 3C 00 00 70 
3db62 6f5 18 7C 18 18 
3db66 6f6 18 00 00 00 
3db6a 6f7 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3db6e 6f8 60 3E 00 06 
3db72 6f9 06 3E 66 66 
3db76 6fa 66 00 00 18 
3db7a 6fb 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3db7e 6fc 3C 00 00 60 
3db82 6fd 00 60 60 60 
3db86 6fe 60 3C 00 06 
3db8a 6ff 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3db8e 700 66 00 00 1C 
3db92 701 18 18 18 18 
3db96 702 3C 00 00 00 
3db9a 703 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3db9e 704 C6 00 00 00 
3dba2 705 3E 66 66 66 
3dba6 706 66 00 00 00 
3dbaa 707 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3dbae 708 3C 00 00 00 
3dbb2 709 3E 66 66 3E 
3dbb6 70a 06 06 00 00 
3dbba 70b 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3dbbe 70c 60 60 00 00 
3dbc2 70d 3E 66 06 06 
3dbc6 70e 06 00 00 00 
3dbca 70f 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3dbce 710 3E 00 00 18 
3dbd2 711 7E 18 18 18 
3dbd6 712 70 00 00 00 
3dbda 713 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3dbde 714 7C 00 00 00 
3dbe2 715 66 66 66 3C 
3dbe6 716 18 00 00 00 
3dbea 717 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3dbee 718 6C 00 00 00 
3dbf2 719 66 3C 18 3C 
3dbf6 71a 66 00 00 00 
3dbfa 71b 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3dbfe 71c 30 1E 00 00 
3dc02 71d 7E 30 18 0C 
3dc06 71e 7E 00 00 18 
3dc0a 71f 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3dc0e 720 3C 00 18 18 
3dc12 721 18 18 18 18 
3dc16 722 18 18 00 7E 
3dc1a 723 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3dc1e 724 60 00 10 18 
3dc22 725 1C 1E 1C 18 
3dc26 726 10 00 08 18 
3dc2a 727 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3dc2e 728 08 00       | 	byte	$08, $00
3dc30 729 00 6C FE FE 
3dc34 72a 7C 38 10 00 
3dc38 72b 18 18 18 F8 
3dc3c 72c F8 18 18 18 | a8_font2       file "atari8.fnt"
3dc40 72d C0 C0 C0 C0 
3dc44 72e C0 C0 C0 C0 | 	byte	$c0[8]
3dc48 72f 18 18 18 1F 
3dc4c 730 1F 00 00 00 
3dc50 731 18 18 18 1F 
3dc54 732 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3dc58 733 00 00 00 1F 
3dc5c 734 1F 18 18 18 
3dc60 735 C0 E0 70 38 
3dc64 736 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3dc68 737 03 07 0E 1C 
3dc6c 738 38 70 E0 C0 
3dc70 739 80 C0 E0 F0 
3dc74 73a F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3dc78 73b 00 00 00 00 
3dc7c 73c F0 F0 F0 F0 
3dc80 73d 01 03 07 0F 
3dc84 73e 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3dc88 73f F0 F0 F0 F0 
3dc8c 740 00 00 00 00 
3dc90 741 0F 0F 0F 0F 
3dc94 742 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3dc98 743 FF FF 00 00 
3dc9c 744 00 00 00 00 
3dca0 745 00 00 00 00 
3dca4 746 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3dca8 747 00 00 00 00 
3dcac 748 0F 0F 0F 0F 
3dcb0 749 00 38 38 EE 
3dcb4 74a EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3dcb8 74b 00 00 00 F8 
3dcbc 74c F8 18 18 18 
3dcc0 74d 00 00 00 FF 
3dcc4 74e FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3dcc8 74f 18 18 18 FF 
3dccc 750 FF 18 18 18 
3dcd0 751 00 00 3C 7E 
3dcd4 752 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3dcd8 753 00 00 00 00 
3dcdc 754 FF FF FF FF 
3dce0 755 03 03 03 03 
3dce4 756 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3dce8 757 00 00 00 FF 
3dcec 758 FF 18 18 18 
3dcf0 759 18 18 18 FF 
3dcf4 75a FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3dcf8 75b 0F 0F 0F 0F 
3dcfc 75c 0F 0F 0F 0F | 	byte	$0f[8]
3dd00 75d 18 18 18 F8 
3dd04 75e F8 00 00 00 
3dd08 75f 1E 06 1E 06 
3dd0c 760 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3dd10 761 00 18 3C 7E 
3dd14 762 18 18 18 00 
3dd18 763 00 18 18 18 
3dd1c 764 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3dd20 765 00 18 0C 7E 
3dd24 766 0C 18 00 00 
3dd28 767 00 18 30 7E 
3dd2c 768 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3dd30 769 00 00 00 00 
3dd34 76a 00 00 00 00 
3dd38 76b 00          | 	byte	$00[9]
3dd39 76b 18 18 18 18 
3dd3d 76c 00 18 00 00 
3dd41 76d 66 66 66 00 
3dd45 76e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3dd49 76f 66 FF 66 66 
3dd4d 770 FF 66 00 18 
3dd51 771 7C 06 3C 60 
3dd55 772 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3dd59 773 66 36 18 0C 
3dd5d 774 66 62 00 38 
3dd61 775 6C 38 1C F6 
3dd65 776 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3dd69 777 18 18 18 00 
3dd6d 778 00 00 00 00 
3dd71 779 70 38 18 18 
3dd75 77a 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3dd79 77b 0E 1C 18 18 
3dd7d 77c 1C 0E 00 00 
3dd81 77d 66 3C FF 3C 
3dd85 77e 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3dd89 77f 18 18 7E 18 
3dd8d 780 18 00 00 00 
3dd91 781 00 00 00 00 
3dd95 782 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3dd99 783 00 00 7E 00 
3dd9d 784 00 00 00 00 
3dda1 785 00 00 00 00 
3dda5 786 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3dda9 787 60 30 18 0C 
3ddad 788 06 02 00 00 
3ddb1 789 3C 66 76 6E 
3ddb5 78a 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3ddb9 78b 18 1C 18 18 
3ddbd 78c 18 7E 00 00 
3ddc1 78d 3C 66 30 18 
3ddc5 78e 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3ddc9 78f 7E 30 18 30 
3ddcd 790 66 3C 00 00 
3ddd1 791 30 38 3C 36 
3ddd5 792 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3ddd9 793 7E 06 3E 60 
3dddd 794 66 3C 00 00 
3dde1 795 3C 06 3E 66 
3dde5 796 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3dde9 797 7E 60 30 18 
3dded 798 0C 0C 00 00 
3ddf1 799 3C 66 3C 66 
3ddf5 79a 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3ddf9 79b 3C 66 7C 60 
3ddfd 79c 30 1C 00 00 
3de01 79d 00 18 18 00 
3de05 79e 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3de09 79f 00 18 18 00 
3de0d 7a0 18 18 0C 60 
3de11 7a1 30 18 0C 18 
3de15 7a2 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3de19 7a3 00 7E 00 00 
3de1d 7a4 7E 00 00 06 
3de21 7a5 0C 18 30 18 
3de25 7a6 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3de29 7a7 3C 66 30 18 
3de2d 7a8 00 18 00 00 
3de31 7a9 3C 66 76 76 
3de35 7aa 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3de39 7ab 18 3C 66 66 
3de3d 7ac 7E 66 00 00 
3de41 7ad 3E 66 3E 66 
3de45 7ae 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3de49 7af 3C 66 06 06 
3de4d 7b0 66 3C 00 00 
3de51 7b1 1E 36 66 66 
3de55 7b2 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3de59 7b3 7E 06 3E 06 
3de5d 7b4 06 7E 00 00 
3de61 7b5 7E 06 3E 06 
3de65 7b6 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3de69 7b7 7C 06 06 76 
3de6d 7b8 66 7C 00 00 
3de71 7b9 66 66 7E 66 
3de75 7ba 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3de79 7bb 7E 18 18 18 
3de7d 7bc 18 7E 00 00 
3de81 7bd 60 60 60 60 
3de85 7be 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3de89 7bf 66 36 1E 1E 
3de8d 7c0 36 66 00 00 
3de91 7c1 06 06 06 06 
3de95 7c2 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3de99 7c3 C6 EE FE D6 
3de9d 7c4 C6 C6 00 00 
3dea1 7c5 66 6E 7E 7E 
3dea5 7c6 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3dea9 7c7 3C 66 66 66 
3dead 7c8 66 3C 00 00 
3deb1 7c9 3E 66 66 3E 
3deb5 7ca 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3deb9 7cb 3C 66 66 66 
3debd 7cc 36 6C 00 00 
3dec1 7cd 3E 66 66 3E 
3dec5 7ce 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3dec9 7cf 3C 06 3C 60 
3decd 7d0 60 3C 00 00 
3ded1 7d1 7E 18 18 18 
3ded5 7d2 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3ded9 7d3 66 66 66 66 
3dedd 7d4 66          | 	byte	$66[5]
3dede 7d4 7E 00 00 66 
3dee2 7d5 66 66 66 3C 
3dee6 7d6 18 00 00 C6 
3deea 7d7 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3deee 7d8 C6 00 00 66 
3def2 7d9 66 3C 3C 66 
3def6 7da 66 00 00 66 
3defa 7db 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3defe 7dc 18 00 00 7E 
3df02 7dd 30 18 0C 06 
3df06 7de 7E 00 00 78 
3df0a 7df 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3df0e 7e0 78 00 00 02 
3df12 7e1 06 0C 18 30 
3df16 7e2 60 00 00 1E 
3df1a 7e3 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3df1e 7e4 1E 00 00 10 
3df22 7e5 38 6C C6 00 
3df26 7e6 00 00 00 00 
3df2a 7e7 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3df2e 7e8 FF 00 00 18 
3df32 7e9 3C 7E 7E 3C 
3df36 7ea 18 00 00 00 
3df3a 7eb 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3df3e 7ec 7C 00 00 06 
3df42 7ed 06 3E 66 66 
3df46 7ee 3E 00 00 00 
3df4a 7ef 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3df4e 7f0 3C 00 00 60 
3df52 7f1 60 7C 66 66 
3df56 7f2 7C 00 00 00 
3df5a 7f3 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3df5e 7f4 3C 00 00 70 
3df62 7f5 18 7C 18 18 
3df66 7f6 18 00 00 00 
3df6a 7f7 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3df6e 7f8 60 3E 00 06 
3df72 7f9 06 3E 66 66 
3df76 7fa 66 00 00 18 
3df7a 7fb 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3df7e 7fc 3C 00 00 60 
3df82 7fd 00 60 60 60 
3df86 7fe 60 3C 00 06 
3df8a 7ff 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3df8e 800 66 00 00 1C 
3df92 801 18 18 18 18 
3df96 802 3C 00 00 00 
3df9a 803 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3df9e 804 C6 00 00 00 
3dfa2 805 3E 66 66 66 
3dfa6 806 66 00 00 00 
3dfaa 807 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3dfae 808 3C 00 00 00 
3dfb2 809 3E 66 66 3E 
3dfb6 80a 06 06 00 00 
3dfba 80b 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3dfbe 80c 60 60 00 00 
3dfc2 80d 3E 66 06 06 
3dfc6 80e 06 00 00 00 
3dfca 80f 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3dfce 810 3E 00 00 18 
3dfd2 811 7E 18 18 18 
3dfd6 812 70 00 00 00 
3dfda 813 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3dfde 814 7C 00 00 00 
3dfe2 815 66 66 66 3C 
3dfe6 816 18 00 00 00 
3dfea 817 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3dfee 818 6C 00 00 00 
3dff2 819 66 3C 18 3C 
3dff6 81a 66 00 00 00 
3dffa 81b 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3dffe 81c 30 1E 00 00 
3e002 81d 7E 30 18 0C 
3e006 81e 7E 00 00 18 
3e00a 81f 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3e00e 820 3C 00 18 18 
3e012 821 18 18 18 18 
3e016 822 18 18 00 7E 
3e01a 823 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3e01e 824 60 00 10 18 
3e022 825 1C 1E 1C 18 
3e026 826 10 00 08 18 
3e02a 827 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3e02e 828 08 00       | 	byte	$08, $00
3e030 829 00 00 00 00 
      ...             
3e23c 8ac 00 00 00 00 
3e240 8ad 00 00       | amiga_font     file "amigafont.def"
3e242 8ad 18 18 18 18 
3e246 8ae 18 18       | 	byte	$18[6]
3e248 8af 00 18 18 00 
3e24c 8b0 00 00 00 00 
3e250 8b1 00 00 66 66 
3e254 8b2 66 00 00 00 | 	byte	$00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $00, $00, $00
3e258 8b3 00 00 00 00 
3e25c 8b4 00 00 00 00 
3e260 8b5 00 00       | 	byte	$00[10]
3e262 8b5 36 36 7F 36 
3e266 8b6 36 36 7F 36 
3e26a 8b7 36 00 00 00 
3e26e 8b8 00 00 00 00 | 	byte	$36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $00, $00, $00
3e272 8b9 18 7C 06 06 
3e276 8ba 3C 60 60 3E 
3e27a 8bb 18 00 00 00 
3e27e 8bc 00 00 00 00 | 	byte	$18, $7c, $06, $06, $3c, $60, $60, $3e, $18, $00, $00, $00, $00, $00, $00, $00
3e282 8bd 00 00 C6 69 
3e286 8be 36 18 6C 96 
3e28a 8bf 63 00 00 00 
3e28e 8c0 00 00 00 00 | 	byte	$00, $00, $c6, $69, $36, $18, $6c, $96, $63, $00, $00, $00, $00, $00, $00, $00
3e292 8c1 1C 36 36 1E 
3e296 8c2 6E 3B 33 73 
3e29a 8c3 DE 00 00 00 
3e29e 8c4 00 00 00 00 | 	byte	$1c, $36, $36, $1e, $6e, $3b, $33, $73, $de, $00, $00, $00, $00, $00, $00, $00
3e2a2 8c5 18 18 0C 00 
3e2a6 8c6 00 00 00 00 
3e2aa 8c7 00 00 00 00 
3e2ae 8c8 00 00 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e2b2 8c9 30 18 0C 0C 
3e2b6 8ca 0C 0C 0C 18 
3e2ba 8cb 30 00 00 00 
3e2be 8cc 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00, $00
3e2c2 8cd 0C 18 30 30 
3e2c6 8ce 30 30 30 18 
3e2ca 8cf 0C 00 00 00 
3e2ce 8d0 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00, $00
3e2d2 8d1 00 66 66 3C 
3e2d6 8d2 FF 3C 66 66 
3e2da 8d3 00 00 00 00 
3e2de 8d4 00 00 00 00 | 	byte	$00, $66, $66, $3c, $ff, $3c, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00
3e2e2 8d5 00 18 18 18 
3e2e6 8d6 7E 18 18 18 
3e2ea 8d7 00 00 00 00 
3e2ee 8d8 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3e2f2 8d9 00 00 00 00 
3e2f6 8da 00 00 00    | 	byte	$00[7]
3e2f9 8db 18 18 0C 00 
3e2fd 8dc 00 00 00 00 
3e301 8dd 00 00 00 00 
3e305 8de 00 7E 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00
3e309 8df 00 00 00 00 
3e30d 8e0 00 00 00 00 
3e311 8e1 00 00 00 00 
3e315 8e2 00 00 00 00 | 	byte	$00[16]
3e319 8e3 18 18 00 00 
3e31d 8e4 00 00 00 00 
3e321 8e5 00 00 C0 60 
3e325 8e6 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $60, $30, $18, $0c, $06
3e329 8e7 03 00 00 00 
3e32d 8e8 00 00 00 00 
3e331 8e9 00 3C 66 66 
3e335 8ea 76 7E 6E 66 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $76, $7e, $6e, $66
3e339 8eb 66 3C 00 00 
3e33d 8ec 00 00 00 00 
3e341 8ed 00 18 1C 1E 
3e345 8ee 18 18 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18
3e349 8ef 18 18 00 00 
3e34d 8f0 00 00 00 00 
3e351 8f1 00 3C 66 60 
3e355 8f2 60 30 18 0C | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $30, $18, $0c
3e359 8f3 06 7E 00 00 
3e35d 8f4 00 00 00 00 
3e361 8f5 00 3C 66 60 
3e365 8f6 60 38 60 60 | 	byte	$06, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $38, $60, $60
3e369 8f7 66 3C 00 00 
3e36d 8f8 00 00 00 00 
3e371 8f9 00 30 38 3C 
3e375 8fa 36 33 7F 30 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30
3e379 8fb 30 30 00 00 
3e37d 8fc 00 00 00 00 
3e381 8fd 00 7E 06 06 
3e385 8fe 3E 60 60 60 | 	byte	$30, $30, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06, $3e, $60, $60, $60
3e389 8ff 66 3C 00 00 
3e38d 900 00 00 00 00 
3e391 901 00 38 0C 06 
3e395 902 06 3E 66 66 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $06, $06, $3e, $66, $66
3e399 903 66 3C 00 00 
3e39d 904 00 00 00 00 
3e3a1 905 00 7E 60 60 
3e3a5 906 60 30 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $7e, $60, $60, $60, $30, $18, $18
3e3a9 907 18 18 00 00 
3e3ad 908 00 00 00 00 
3e3b1 909 00 3C 66 66 
3e3b5 90a 66 3C 66 66 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $3c, $66, $66
3e3b9 90b 66 3C 00 00 
3e3bd 90c 00 00 00 00 
3e3c1 90d 00 3C 66 66 
3e3c5 90e 66 7C 60 60 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $7c, $60, $60
3e3c9 90f 30 1C 00 00 
3e3cd 910 00 00 00 00 
3e3d1 911 00 00 00 18 
3e3d5 912 18 00 00 18 | 	byte	$30, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $18
3e3d9 913 18 00 00 00 
3e3dd 914 00 00 00 00 
3e3e1 915 00 00 00 18 
3e3e5 916 18 00 00 00 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3e3e9 917 18 18 0C 00 
3e3ed 918 00 00 00 00 
3e3f1 919 00 00 00 60 
3e3f5 91a 18 06 18 60 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $60, $18, $06, $18, $60
3e3f9 91b 00 00 00 00 
3e3fd 91c 00 00 00 00 
3e401 91d 00 00 00 00 | 	byte	$00[12]
3e405 91e 7E 00 7E 00 
3e409 91f 00 00 00 00 
3e40d 920 00 00 00 00 
3e411 921 00 00 00 06 | 	byte	$7e, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06
3e415 922 18 60 18 06 
3e419 923 00 00 00 00 
3e41d 924 00 00 00 00 
3e421 925 00 3C 66 60 | 	byte	$18, $60, $18, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60
3e425 926 60 30 18 00 
3e429 927 18 18 00 00 
3e42d 928 00 00 00 00 
3e431 929 00 3E 63 63 | 	byte	$60, $30, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
3e435 92a 7B 6B 7B 03 
3e439 92b 03 1E 00 00 
3e43d 92c 00 00 00 00 
3e441 92d 00 3E 63 63 | 	byte	$7b, $6b, $7b, $03, $03, $1e, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
3e445 92e 63 7F 63 63 
3e449 92f 63 63 00 00 
3e44d 930 00 00 00 00 
3e451 931 00 3E 66 66 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66
3e455 932 66 3E 66 66 
3e459 933 66 3E 00 00 
3e45d 934 00 00 00 00 
3e461 935 00 78 0C 06 | 	byte	$66, $3e, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $78, $0c, $06
3e465 936 06 06 06 06 
3e469 937 0C 78 00 00 
3e46d 938 00 00 00 00 
3e471 939 00 1F 33 63 | 	byte	$06, $06, $06, $06, $0c, $78, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $63
3e475 93a 63 63 63 63 
3e479 93b 33 1F 00 00 
3e47d 93c 00 00 00 00 
3e481 93d 00 7E 06 06 | 	byte	$63, $63, $63, $63, $33, $1f, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
3e485 93e 06 1E 06 06 
3e489 93f 06 7E 00 00 
3e48d 940 00 00 00 00 
3e491 941 00 7E 06 06 | 	byte	$06, $1e, $06, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
3e495 942 06 1E 06 06 
3e499 943 06 06 00 00 
3e49d 944 00 00 00 00 
3e4a1 945 00 3C 66 06 | 	byte	$06, $1e, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06
3e4a5 946 06 76 66 66 
3e4a9 947 66 7C 00 00 
3e4ad 948 00 00 00 00 
3e4b1 949 00 63 63 63 | 	byte	$06, $76, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63
3e4b5 94a 63 7F 63 63 
3e4b9 94b 63 63 00 00 
3e4bd 94c 00 00 00 00 
3e4c1 94d 00 3C 18 18 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3c, $18, $18
3e4c5 94e 18 18 18 18 
3e4c9 94f 18          | 	byte	$18[5]
3e4ca 94f 3C 00 00 00 
3e4ce 950 00 00 00 00 
3e4d2 951 60 60 60 60 
3e4d6 952 60 60 60 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60, $60, $60, $60, $60, $63
3e4da 953 3E 00 00 00 
3e4de 954 00 00 00 00 
3e4e2 955 C3 63 33 1B 
3e4e6 956 0F 1B 33 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $c3, $63, $33, $1b, $0f, $1b, $33, $63
3e4ea 957 C3 00 00 00 
3e4ee 958 00 00 00 00 
3e4f2 959 03 03 03 03 
3e4f6 95a 03 03 03 03 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $03, $03, $03, $03, $03, $03, $03, $03
3e4fa 95b 7F 00 00 00 
3e4fe 95c 00 00 00 00 
3e502 95d 63 77 7F 6B 
3e506 95e 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $6b, $63, $63, $63, $63
3e50a 95f 63 00 00 00 
3e50e 960 00 00 00 00 
3e512 961 63 67 6F 7B 
3e516 962 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7b, $73, $63, $63, $63
3e51a 963 63 00 00 00 
3e51e 964 00 00 00 00 
3e522 965 3E 63 63 63 
3e526 966 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63
3e52a 967 3E 00 00 00 
3e52e 968 00 00 00 00 
3e532 969 3E 66 66 66 
3e536 96a 3E 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e, $06, $06, $06
3e53a 96b 06 00 00 00 
3e53e 96c 00 00 00 00 
3e542 96d 3E 63 63 63 
3e546 96e 63 63 63 7B | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $7b
3e54a 96f FE 00 00 00 
3e54e 970 00 00 00 00 
3e552 971 1F 33 33 33 
3e556 972 1F 1B 33 63 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $33, $33, $1f, $1b, $33, $63
3e55a 973 63 00 00 00 
3e55e 974 00 00 00 00 
3e562 975 3C 66 06 0C 
3e566 976 18 30 60 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06, $0c, $18, $30, $60, $66
3e56a 977 3C 00 00 00 
3e56e 978 00 00 00 00 
3e572 979 7E 18 18 18 
3e576 97a 18 18 18 18 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $7e, $18, $18, $18, $18, $18, $18, $18
3e57a 97b 18 00 00 00 
3e57e 97c 00 00 00 00 
3e582 97d 63 63 63 63 
3e586 97e 63 63 63 63 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63
3e58a 97f 3E 00 00 00 
3e58e 980 00 00 00 00 
3e592 981 63 63 63 63 
3e596 982 63 36 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36, $36, $1c
3e59a 983 08 00 00 00 
3e59e 984 00 00 00 00 
3e5a2 985 C3 C3 C3 C3 
3e5a6 986 C3 DB FF E7 | 	byte	$08, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $c3, $c3, $c3, $db, $ff, $e7
3e5aa 987 C3 00 00 00 
3e5ae 988 00 00 00 00 
3e5b2 989 C3 C3 66 3C 
3e5b6 98a 18 3C 66 C3 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $3c, $66, $c3
3e5ba 98b C3 00 00 00 
3e5be 98c 00 00 00 00 
3e5c2 98d C3 C3 66 3C 
3e5c6 98e 18 18 18 18 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $18, $18, $18
3e5ca 98f 18 00 00 00 
3e5ce 990 00 00 00 00 
3e5d2 991 7F 60 60 30 
3e5d6 992 18 0C 06 03 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $7f, $60, $60, $30, $18, $0c, $06, $03
3e5da 993 7F 00 00 00 
3e5de 994 00 00 00 00 
3e5e2 995 3C 0C 0C 0C 
3e5e6 996 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3e5ea 997 3C 00 00 00 
3e5ee 998 00 00 00 00 
3e5f2 999 00 03 06 0C 
3e5f6 99a 18 30 60 C0 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $03, $06, $0c, $18, $30, $60, $c0
3e5fa 99b 00 00 00 00 
3e5fe 99c 00 00 00 00 | 	byte	$00[8]
3e602 99d 3C 30 30 30 
3e606 99e 30 30 30 30 
3e60a 99f 3C 00 00 00 
3e60e 9a0 00 00 00 00 | 	byte	$3c, $30, $30, $30, $30, $30, $30, $30, $3c, $00, $00, $00, $00, $00, $00, $00
3e612 9a1 08 1C 36 63 
3e616 9a2 00 00 00 00 
3e61a 9a3 00 00 00 00 
3e61e 9a4 00 00 00 00 | 	byte	$08, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e622 9a5 00 00 00 00 
3e626 9a6 00 00 00 00 
3e62a 9a7 00          | 	byte	$00[9]
3e62b 9a7 7F 00 00 00 
3e62f 9a8 00 00 00 18 
3e633 9a9 18 30 00 00 
3e637 9aa 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $18, $18, $30, $00, $00, $00, $00, $00, $00
3e63b 9ab 00 00 00 00 
3e63f 9ac 00 00 00 00 
3e643 9ad 00 00       | 	byte	$00[10]
3e645 9ae 3C 60 7C 66 
3e649 9af 66 7C 00 00 
3e64d 9b0 00 00 00 00 
3e651 9b1 00 06 06 06 | 	byte	$3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $06, $06, $06
3e655 9b2 3E 66 66 66 
3e659 9b3 66 3E 00 00 
3e65d 9b4 00 00 00 00 
3e661 9b5 00 00 00 00 | 	byte	$3e, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e665 9b6 3C 06 06 06 
3e669 9b7 06 3C 00 00 
3e66d 9b8 00 00 00 00 
3e671 9b9 00 60 60 60 | 	byte	$3c, $06, $06, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60
3e675 9ba 7C 66 66 66 
3e679 9bb 66 7C 00 00 
3e67d 9bc 00 00 00 00 
3e681 9bd 00 00 00 00 | 	byte	$7c, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e685 9be 3C 66 7E 06 
3e689 9bf 06 3C 00 00 
3e68d 9c0 00 00 00 00 
3e691 9c1 00 38 0C 0C | 	byte	$3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $0c
3e695 9c2 3E 0C 0C 0C 
3e699 9c3 0C 0C 00 00 
3e69d 9c4 00 00 00 00 
3e6a1 9c5 00 00 00 00 | 	byte	$3e, $0c, $0c, $0c, $0c, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e6a5 9c6 7C 66 66 66 
3e6a9 9c7 7C 60 60 3C 
3e6ad 9c8 00 00 00 00 
3e6b1 9c9 00 06 06 06 | 	byte	$7c, $66, $66, $66, $7c, $60, $60, $3c, $00, $00, $00, $00, $00, $06, $06, $06
3e6b5 9ca 3E 66 66 66 
3e6b9 9cb 66 66 00 00 
3e6bd 9cc 00 00 00 00 
3e6c1 9cd 00 00 18 00 | 	byte	$3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00
3e6c5 9ce 18 18 18 18 
3e6c9 9cf 18          | 	byte	$18[5]
3e6ca 9cf 30 00 00 00 
3e6ce 9d0 00 00 00 00 
3e6d2 9d1 00 30 00 30 
3e6d6 9d2 30 30 30 30 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $30, $00, $30, $30, $30, $30, $30
3e6da 9d3 30 30 1E 00 
3e6de 9d4 00 00 00 00 
3e6e2 9d5 03 03 03 33 
3e6e6 9d6 1B 0F 1B 33 | 	byte	$30, $30, $1e, $00, $00, $00, $00, $00, $03, $03, $03, $33, $1b, $0f, $1b, $33
3e6ea 9d7 63 00 00 00 
3e6ee 9d8 00 00 00 00 
3e6f2 9d9 18 18 18 18 
3e6f6 9da 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
3e6fa 9db 30 00 00 00 
3e6fe 9dc 00 00 00 00 
3e702 9dd 00 00 00 37 
3e706 9de 7F 6B 63 63 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $63, $63
3e70a 9df 63 00 00 00 
3e70e 9e0 00 00 00 00 
3e712 9e1 00 00 00 3E 
3e716 9e2 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $66
3e71a 9e3 66 00 00 00 
3e71e 9e4 00 00 00 00 
3e722 9e5 00 00 00 3C 
3e726 9e6 66 66 66 66 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $66
3e72a 9e7 3C 00 00 00 
3e72e 9e8 00 00 00 00 
3e732 9e9 00 00 00 3E 
3e736 9ea 66 66 66 3E | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e
3e73a 9eb 06 06 06 00 
3e73e 9ec 00 00 00 00 
3e742 9ed 00 00 00 7C 
3e746 9ee 66 66 66 7C | 	byte	$06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7c, $66, $66, $66, $7c
3e74a 9ef 60 60 60 00 
3e74e 9f0 00 00 00 00 
3e752 9f1 00 00 00 3E 
3e756 9f2 66 06 06 06 | 	byte	$60, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $06, $06, $06
3e75a 9f3 06 00 00 00 
3e75e 9f4 00 00 00 00 
3e762 9f5 00 00 00 3C 
3e766 9f6 06 0C 30 60 | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $06, $0c, $30, $60
3e76a 9f7 3E 00 00 00 
3e76e 9f8 00 00 00 00 
3e772 9f9 00 0C 0C 3E 
3e776 9fa 0C 0C 0C 0C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $0c, $3e, $0c, $0c, $0c, $0c
3e77a 9fb 38 00 00 00 
3e77e 9fc 00 00 00 00 
3e782 9fd 00 00 00 66 
3e786 9fe 66 66 66 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66
3e78a 9ff 7C 00 00 00 
3e78e a00 00 00 00 00 
3e792 a01 00 00 00 66 
3e796 a02 66 66 66 3C | 	byte	$7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
3e79a a03 18 00 00 00 
3e79e a04 00 00 00 00 
3e7a2 a05 00 00 00 63 
3e7a6 a06 63 63 6B 3E | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $6b, $3e
3e7aa a07 36 00 00 00 
3e7ae a08 00 00 00 00 
3e7b2 a09 00 00 00 63 
3e7b6 a0a 36 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36
3e7ba a0b 63 00 00 00 
3e7be a0c 00 00 00 00 
3e7c2 a0d 00 00 00 66 
3e7c6 a0e 66 66 66 3C | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
3e7ca a0f 18 0C 06 00 
3e7ce a10 00 00 00 00 
3e7d2 a11 00 00 00 7E 
3e7d6 a12 30 18 0C 06 | 	byte	$18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $30, $18, $0c, $06
3e7da a13 7E 00 00 00 
3e7de a14 00 00 00 00 
3e7e2 a15 70 18 18 18 
3e7e6 a16 0E 18 18 18 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18
3e7ea a17 70 00 00 00 
3e7ee a18 00 00 00 00 
3e7f2 a19 18 18 18 18 
3e7f6 a1a 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
3e7fa a1b 18 00 00 00 
3e7fe a1c 00 00 00 00 
3e802 a1d 0E 18 18 18 
3e806 a1e 70 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18
3e80a a1f 0E 00 00 00 
3e80e a20 00 00 00 00 
3e812 a21 46 5D 31 00 
3e816 a22 00 00 00 00 | 	byte	$0e, $00, $00, $00, $00, $00, $00, $00, $46, $5d, $31, $00, $00, $00, $00, $00
3e81a a23 00 00 00 00 
3e81e a24 00 00 00 00 | 	byte	$00[8]
3e822 a25 C0 F0 3C 0F 
3e826 a26 C3 F0 3C 0F 
3e82a a27 03 00 00 00 
3e82e a28 00 00 00 00 | 	byte	$c0, $f0, $3c, $0f, $c3, $f0, $3c, $0f, $03, $00, $00, $00, $00, $00, $00, $00
3e832 a29 18 18 00 18 
3e836 a2a 18 18 18 18 
3e83a a2b 18 00 00 00 
3e83e a2c 00 00 00 00 | 	byte	$18, $18, $00, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3e842 a2d 18 18 7E 1B 
3e846 a2e 1B 7E 18 18 
3e84a a2f 00 00 00 00 
3e84e a30 00 00 00 00 | 	byte	$18, $18, $7e, $1b, $1b, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3e852 a31 78 CC 0C 0C 
3e856 a32 1E 0C 0C 06 
3e85a a33 7F 00 00 00 
3e85e a34 00 00 00 00 | 	byte	$78, $cc, $0c, $0c, $1e, $0c, $0c, $06, $7f, $00, $00, $00, $00, $00, $00, $00
3e862 a35 66 3C 66 66 
3e866 a36 3C 66 00 00 
3e86a a37 00 00 00 00 
3e86e a38 00 00 00 00 | 	byte	$66, $3c, $66, $66, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e872 a39 C3 C3 66 3C 
3e876 a3a 18 7E 18 18 
3e87a a3b 18 00 00 00 
3e87e a3c 00 00 00 00 | 	byte	$c3, $c3, $66, $3c, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3e882 a3d 18 18 18 18 
3e886 a3e 00 18 18 18 
3e88a a3f 18 00 00 00 
3e88e a40 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3e892 a41 3C 06 06 3C 
3e896 a42 66 66 66 3C 
3e89a a43 60 60 3C 00 
3e89e a44 00 00 00 00 | 	byte	$3c, $06, $06, $3c, $66, $66, $66, $3c, $60, $60, $3c, $00, $00, $00, $00, $00
3e8a2 a45 66 66 00 00 
3e8a6 a46 00 00 00 00 
3e8aa a47 00 00 00 00 
3e8ae a48 00 00 00 00 | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e8b2 a49 7E 81 B9 85 
3e8b6 a4a 85 B9 81 7E 
3e8ba a4b 00 00 00 00 
3e8be a4c 00 00 00 00 | 	byte	$7e, $81, $b9, $85, $85, $b9, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
3e8c2 a4d 3C 33 33 7E 
3e8c6 a4e 00 7F 00 00 
3e8ca a4f 00 00 00 00 
3e8ce a50 00 00 00 00 | 	byte	$3c, $33, $33, $7e, $00, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e8d2 a51 00 00 CC 66 
3e8d6 a52 33 66 CC 00 
3e8da a53 00 00 00 00 
3e8de a54 00 00 00 00 | 	byte	$00, $00, $cc, $66, $33, $66, $cc, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e8e2 a55 7E 60 60 00 
3e8e6 a56 00 00 00 00 
3e8ea a57 00 00 00 00 
3e8ee a58 00 00 00 00 | 	byte	$7e, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e8f2 a59 7E 81 9D A5 
3e8f6 a5a 9D A5 81 7E 
3e8fa a5b 00 00 00 00 
3e8fe a5c 00 00 00 00 | 	byte	$7e, $81, $9d, $a5, $9d, $a5, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
3e902 a5d 7E 00 00 00 
3e906 a5e 00 00 00 00 
3e90a a5f 00 00 00 00 
3e90e a60 00 00 00 00 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e912 a61 3C 66 66 3C 
3e916 a62 00 00 00 00 
3e91a a63 00 00 00 00 
3e91e a64 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e922 a65 18 18 18 7E 
3e926 a66 18 18 18 00 
3e92a a67 7E 00 00 00 
3e92e a68 00 00 00 00 | 	byte	$18, $18, $18, $7e, $18, $18, $18, $00, $7e, $00, $00, $00, $00, $00, $00, $00
3e932 a69 1E 30 30 18 
3e936 a6a 0C 06 3E 00 
3e93a a6b 00 00 00 00 
3e93e a6c 00 00 00 00 | 	byte	$1e, $30, $30, $18, $0c, $06, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e942 a6d 1E 30 30 1C 
3e946 a6e 30 30 1E 00 
3e94a a6f 00 00 00 00 
3e94e a70 00 00 00 00 | 	byte	$1e, $30, $30, $1c, $30, $30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e952 a71 30 18 0C 06 
3e956 a72 00 00 00 00 
3e95a a73 00 00 00 00 
3e95e a74 00 00 00 00 | 	byte	$30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e962 a75 00 00 00 66 
3e966 a76 66 66 66 66 
3e96a a77 FE 06 06 00 
3e96e a78 00 00 00 00 | 	byte	$00, $00, $00, $66, $66, $66, $66, $66, $fe, $06, $06, $00, $00, $00, $00, $00
3e972 a79 7C 5E 5E 5E 
3e976 a7a 5C 50 50 50 
3e97a a7b 50 50 00 00 
3e97e a7c 00 00 00 00 | 	byte	$7c, $5e, $5e, $5e, $5c, $50, $50, $50, $50, $50, $00, $00, $00, $00, $00, $00
3e982 a7d 00 00 00 18 
3e986 a7e 18 00 00 00 
3e98a a7f 00 00 00 00 
3e98e a80 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e992 a81 00 00 00 00 
3e996 a82 00 00 00 00 
3e99a a83 00          | 	byte	$00[9]
3e99b a83 30 18 00 00 
3e99f a84 00 00 00 18 
3e9a3 a85 1C 18 18 18 
3e9a7 a86 18 18 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $18, $1c, $18, $18, $18, $18, $18, $00, $00
3e9ab a87 00 00 00 00 
3e9af a88 00 00 00    | 	byte	$00[7]
3e9b2 a89 3C 66 66 3C 
3e9b6 a8a 00 7E 00 00 
3e9ba a8b 00 00 00 00 
3e9be a8c 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e9c2 a8d 00 00 33 66 
3e9c6 a8e CC 66 33 00 
3e9ca a8f 00 00 00 00 
3e9ce a90 00 00 00 00 | 	byte	$00, $00, $33, $66, $cc, $66, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e9d2 a91 02 63 32 1A 
3e9d6 a92 4E 66 F3 40 
3e9da a93 40 00 00 00 
3e9de a94 00 00 00 00 | 	byte	$02, $63, $32, $1a, $4e, $66, $f3, $40, $40, $00, $00, $00, $00, $00, $00, $00
3e9e2 a95 04 C6 64 34 
3e9e6 a96 7C 8C 46 23 
3e9ea a97 F0 00 00 00 
3e9ee a98 00 00 00 00 | 	byte	$04, $c6, $64, $34, $7c, $8c, $46, $23, $f0, $00, $00, $00, $00, $00, $00, $00
3e9f2 a99 03 C4 66 34 
3e9f6 a9a 5B 6C F6 43 
3e9fa a9b 40 00 00 00 
3e9fe a9c 00 00 00 00 | 	byte	$03, $c4, $66, $34, $5b, $6c, $f6, $43, $40, $00, $00, $00, $00, $00, $00, $00
3ea02 a9d 18 18 00 18 
3ea06 a9e 0C 06 06 66 
3ea0a a9f 3C 00 00 00 
3ea0e aa0 00 00 00 00 | 	byte	$18, $18, $00, $18, $0c, $06, $06, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3ea12 aa1 06 0C 3E 63 
3ea16 aa2 63 7F 63 63 
3ea1a aa3 63 00 00 00 
3ea1e aa4 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3ea22 aa5 30 18 3E 63 
3ea26 aa6 63 7F 63 63 
3ea2a aa7 63 00 00 00 
3ea2e aa8 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3ea32 aa9 0C 33 3E 63 
3ea36 aaa 63 63 7F 63 
3ea3a aab 63 00 00 00 
3ea3e aac 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
3ea42 aad 4E 39 3E 63 
3ea46 aae 63 7F 63 63 
3ea4a aaf 63 00 00 00 
3ea4e ab0 00 00 00 00 | 	byte	$4e, $39, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3ea52 ab1 63 00 3E 63 
3ea56 ab2 63 7F 63 63 
3ea5a ab3 63 00 00 00 
3ea5e ab4 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3ea62 ab5 1C 22 1C 36 
3ea66 ab6 63 63 7F 63 
3ea6a ab7 63 00 00 00 
3ea6e ab8 00 00 00 00 | 	byte	$1c, $22, $1c, $36, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
3ea72 ab9 F8 3C 3C 36 
3ea76 aba F6 3F 33 33 
3ea7a abb F3 00 00 00 
3ea7e abc 00 00 00 00 | 	byte	$f8, $3c, $3c, $36, $f6, $3f, $33, $33, $f3, $00, $00, $00, $00, $00, $00, $00
3ea82 abd 78 0C 06 06 
3ea86 abe 06 06 06 0C 
3ea8a abf 78 30 18 00 
3ea8e ac0 00 00 00 00 | 	byte	$78, $0c, $06, $06, $06, $06, $06, $0c, $78, $30, $18, $00, $00, $00, $00, $00
3ea92 ac1 0C 18 7E 06 
3ea96 ac2 06 3E 06 06 
3ea9a ac3 7E 00 00 00 
3ea9e ac4 00 00 00 00 | 	byte	$0c, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3eaa2 ac5 30 18 7E 06 
3eaa6 ac6 06 3E 06 06 
3eaaa ac7 7E 00 00 00 
3eaae ac8 00 00 00 00 | 	byte	$30, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3eab2 ac9 18 66 7E 06 
3eab6 aca 06 3E 06 06 
3eaba acb 7E 00 00 00 
3eabe acc 00 00 00 00 | 	byte	$18, $66, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3eac2 acd 66 00 7E 06 
3eac6 ace 06 3E 06 06 
3eaca acf 7E 00 00 00 
3eace ad0 00 00 00 00 | 	byte	$66, $00, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3ead2 ad1 0C 18 3C 18 
3ead6 ad2 18 18 18 18 
3eada ad3 3C 00 00 00 
3eade ad4 00 00 00 00 | 	byte	$0c, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3eae2 ad5 30 18 3C 18 
3eae6 ad6 18 18 18 18 
3eaea ad7 3C 00 00 00 
3eaee ad8 00 00 00 00 | 	byte	$30, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3eaf2 ad9 18 66 3C 18 
3eaf6 ada 18 18 18 18 
3eafa adb 3C 00 00 00 
3eafe adc 00 00 00 00 | 	byte	$18, $66, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3eb02 add 66 00 3C 18 
3eb06 ade 18 18 18 18 
3eb0a adf 3C 00 00 00 
3eb0e ae0 00 00 00 00 | 	byte	$66, $00, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3eb12 ae1 1E 36 66 66 
3eb16 ae2 6F 66 66 36 
3eb1a ae3 1E 00 00 00 
3eb1e ae4 00 00 00 00 | 	byte	$1e, $36, $66, $66, $6f, $66, $66, $36, $1e, $00, $00, $00, $00, $00, $00, $00
3eb22 ae5 8E 73 67 6F 
3eb26 ae6 7B 73 63 63 
3eb2a ae7 63 00 00 00 
3eb2e ae8 00 00 00 00 | 	byte	$8e, $73, $67, $6f, $7b, $73, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3eb32 ae9 06 0C 3E 63 
3eb36 aea 63 63 63 63 
3eb3a aeb 3E 00 00 00 
3eb3e aec 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3eb42 aed 30 18 3E 63 
3eb46 aee 63 63 63 63 
3eb4a aef 3E 00 00 00 
3eb4e af0 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3eb52 af1 0C 33 3E 63 
3eb56 af2 63 63 63 63 
3eb5a af3 3E 00 00 00 
3eb5e af4 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3eb62 af5 8E 71 3E 63 
3eb66 af6 63 63 63 63 
3eb6a af7 3E 00 00 00 
3eb6e af8 00 00 00 00 | 	byte	$8e, $71, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3eb72 af9 63 00 3E 63 
3eb76 afa 63 63 63 63 
3eb7a afb 3E 00 00 00 
3eb7e afc 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3eb82 afd 00 00 63 36 
3eb86 afe 1C 1C 36 63 
3eb8a aff 00 00 00 00 
3eb8e b00 00 00 00 00 | 	byte	$00, $00, $63, $36, $1c, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00
3eb92 b01 BE 63 73 7B 
3eb96 b02 6B 6F 67 63 
3eb9a b03 3F 00 00 00 
3eb9e b04 00 00 00 00 | 	byte	$be, $63, $73, $7b, $6b, $6f, $67, $63, $3f, $00, $00, $00, $00, $00, $00, $00
3eba2 b05 0C 18 63 63 
3eba6 b06 63 63 63 63 
3ebaa b07 3E 00 00 00 
3ebae b08 00 00 00 00 | 	byte	$0c, $18, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3ebb2 b09 18 0C 63 63 
3ebb6 b0a 63 63 63 63 
3ebba b0b 3E 00 00 00 
3ebbe b0c 00 00 00 00 | 	byte	$18, $0c, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3ebc2 b0d 08 36 63 63 
3ebc6 b0e 63 63 63 63 
3ebca b0f 3E 00 00 00 
3ebce b10 00 00 00 00 | 	byte	$08, $36, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3ebd2 b11 63 00 63 63 
3ebd6 b12 63 63 63 63 
3ebda b13 3E 00 00 00 
3ebde b14 00 00 00 00 | 	byte	$63, $00, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3ebe2 b15 30 18 C3 66 
3ebe6 b16 3C 18 18 18 
3ebea b17 18 00 00 00 
3ebee b18 00 00 00 00 | 	byte	$30, $18, $c3, $66, $3c, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3ebf2 b19 03 03 3F 63 
3ebf6 b1a 63 3F 03 03 
3ebfa b1b 03 00 00 00 
3ebfe b1c 00 00 00 00 | 	byte	$03, $03, $3f, $63, $63, $3f, $03, $03, $03, $00, $00, $00, $00, $00, $00, $00
3ec02 b1d 3C 66 66 66 
3ec06 b1e 36 66 66 66 
3ec0a b1f 36 06 06 00 
3ec0e b20 00 00 00 00 | 	byte	$3c, $66, $66, $66, $36, $66, $66, $66, $36, $06, $06, $00, $00, $00, $00, $00
3ec12 b21 06 0C 00 3C 
3ec16 b22 60 7C 66 66 
3ec1a b23 7C 00 00 00 
3ec1e b24 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3ec22 b25 60 30 00 3C 
3ec26 b26 60 7C 66 66 
3ec2a b27 7C 00 00 00 
3ec2e b28 00 00 00 00 | 	byte	$60, $30, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3ec32 b29 18 66 00 3C 
3ec36 b2a 60 7C 66 66 
3ec3a b2b 7C 00 00 00 
3ec3e b2c 00 00 00 00 | 	byte	$18, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3ec42 b2d 8E 71 00 3C 
3ec46 b2e 60 7C 66 66 
3ec4a b2f 7C 00 00 00 
3ec4e b30 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3ec52 b31 00 66 00 3C 
3ec56 b32 60 7C 66 66 
3ec5a b33 7C 00 00 00 
3ec5e b34 00 00 00 00 | 	byte	$00, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3ec62 b35 18 24 18 3C 
3ec66 b36 60 7C 66 66 
3ec6a b37 7C 00 00 00 
3ec6e b38 00 00 00 00 | 	byte	$18, $24, $18, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3ec72 b39 00 00 00 7E 
3ec76 b3a D8 FE 1B 1B 
3ec7a b3b EE 00 00 00 
3ec7e b3c 00 00 00 00 | 	byte	$00, $00, $00, $7e, $d8, $fe, $1b, $1b, $ee, $00, $00, $00, $00, $00, $00, $00
3ec82 b3d 00 00 00 3C 
3ec86 b3e 06 06 06 06 
3ec8a b3f 3C 18 0C 00 
3ec8e b40 00 00 00 00 | 	byte	$00, $00, $00, $3c, $06, $06, $06, $06, $3c, $18, $0c, $00, $00, $00, $00, $00
3ec92 b41 06 0C 00 3C 
3ec96 b42 66 7E 06 06 
3ec9a b43 3C 00 00 00 
3ec9e b44 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3eca2 b45 60 30 00 3C 
3eca6 b46 66 7E 06 06 
3ecaa b47 3C 00 00 00 
3ecae b48 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3ecb2 b49 18 66 00 3C 
3ecb6 b4a 66 7E 06 06 
3ecba b4b 3C 00 00 00 
3ecbe b4c 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3ecc2 b4d 00 66 00 3C 
3ecc6 b4e 66 7E 06 06 
3ecca b4f 3C 00 00 00 
3ecce b50 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3ecd2 b51 0C 18 00 18 
3ecd6 b52 18 18 18 18 
3ecda b53 30 00 00 00 
3ecde b54 00 00 00 00 | 	byte	$0c, $18, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3ece2 b55 18 0C 00 0C 
3ece6 b56 0C 0C 0C 0C 
3ecea b57 18 00 00 00 
3ecee b58 00 00 00 00 | 	byte	$18, $0c, $00, $0c, $0c, $0c, $0c, $0c, $18, $00, $00, $00, $00, $00, $00, $00
3ecf2 b59 18 66 00 18 
3ecf6 b5a 18 18 18 18 
3ecfa b5b 30 00 00 00 
3ecfe b5c 00 00 00 00 | 	byte	$18, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3ed02 b5d 00 66 00 18 
3ed06 b5e 18 18 18 18 
3ed0a b5f 30 00 00 00 
3ed0e b60 00 00 00 00 | 	byte	$00, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3ed12 b61 03 06 3F 18 
3ed16 b62 3C 66 66 66 
3ed1a b63 3C 00 00 00 
3ed1e b64 00 00 00 00 | 	byte	$03, $06, $3f, $18, $3c, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3ed22 b65 8E 71 00 3E 
3ed26 b66 66 66 66 66 
3ed2a b67 66 00 00 00 
3ed2e b68 00 00 00 00 | 	byte	$8e, $71, $00, $3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3ed32 b69 06 0C 00 3C 
3ed36 b6a 66 66 66 66 
3ed3a b6b 3C 00 00 00 
3ed3e b6c 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3ed42 b6d 60 30 00 3C 
3ed46 b6e 66 66 66 66 
3ed4a b6f 3C 00 00 00 
3ed4e b70 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3ed52 b71 18 66 00 3C 
3ed56 b72 66 66 66 66 
3ed5a b73 3C 00 00 00 
3ed5e b74 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3ed62 b75 8E 71 00 3C 
3ed66 b76 66 66 66 66 
3ed6a b77 3C 00 00 00 
3ed6e b78 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3ed72 b79 00 66 00 3C 
3ed76 b7a 66 66 66 66 
3ed7a b7b 3C 00 00 00 
3ed7e b7c 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3ed82 b7d 00 18 18 00 
3ed86 b7e 7E 00 18 18 
3ed8a b7f 00 00 00 00 
3ed8e b80 00 00 00 00 | 	byte	$00, $18, $18, $00, $7e, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3ed92 b81 00 00 00 7E 
3ed96 b82 73 7B 6F 67 
3ed9a b83 3F 00 00 00 
3ed9e b84 00 00 00 00 | 	byte	$00, $00, $00, $7e, $73, $7b, $6f, $67, $3f, $00, $00, $00, $00, $00, $00, $00
3eda2 b85 0C 18 00 66 
3eda6 b86 66 66 66 66 
3edaa b87 7C 00 00 00 
3edae b88 00 00 00 00 | 	byte	$0c, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3edb2 b89 30 18 00 66 
3edb6 b8a 66 66 66 66 
3edba b8b 7C 00 00 00 
3edbe b8c 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3edc2 b8d 18 66 00 66 
3edc6 b8e 66 66 66 66 
3edca b8f 7C 00 00 00 
3edce b90 00 00 00 00 | 	byte	$18, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3edd2 b91 00 66 00 66 
3edd6 b92 66 66 66 66 
3edda b93 7C 00 00 00 
3edde b94 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3ede2 b95 30 18 00 66 
3ede6 b96 66 66 66 3C 
3edea b97 18 0C 06 00 
3edee b98 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
3edf2 b99 06 06 06 3E 
3edf6 b9a 66 66 66 3E 
3edfa b9b 06 06 06 00 
3edfe b9c 00 00 00 00 | 	byte	$06, $06, $06, $3e, $66, $66, $66, $3e, $06, $06, $06, $00, $00, $00, $00, $00
3ee02 b9d 00 66 00 66 
3ee06 b9e 66 66 66 3C 
3ee0a b9f 18 0C 06 00 
3ee0e ba0 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
3ee12 ba1 00 7E 66 66 
3ee16 ba2 66 66 66 66 
3ee1a ba3 66 7E 00 00 
3ee1e ba4 00 00 00 00 | 	byte	$00, $7e, $66, $66, $66, $66, $66, $66, $66, $7e, $00, $00, $00, $00, $00, $00
3ee22 ba5 00 00 00 00 
      ...             
3f02a c27 00 00 00 00 
3f02e c28 00 00       | 	byte	$00[526]
3f030 c29 00 00 00 00 
3f034 c2a 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
3f035 c2a 80 00 00 00 
3f039 c2b 00 80 00 00 
3f03d c2c 80 80 00 00 
3f041 c2d 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
3f045 c2e 80 00 80 00 
3f049 c2f 00 40 80 00 
3f04d c30 AA AA AA 00 
3f051 c31 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
3f055 c32 FF 00 00 00 
3f059 c33 00 FF 00 00 
3f05d c34 FF FF 00 00 
3f061 c35 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
3f065 c36 FF 00 FF 00 
3f069 c37 00 FF FF 00 
3f06d c38 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3f070 c39 00 00 00 00 
3f074 c3a 00          | ataripalette   file "ataripalettep2.def"
3f075 c3a 11 11 11 00 
3f079 c3b 22 22 22 00 
3f07d c3c 33 33 33 00 
3f081 c3d 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3f085 c3e 55 55 55 00 
3f089 c3f 66 66 66 00 
3f08d c40 77 77 77 00 
3f091 c41 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3f095 c42 99 99 99 00 
3f099 c43 AA AA AA 00 
3f09d c44 BB BB BB 00 
3f0a1 c45 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3f0a5 c46 DD DD DD 00 
3f0a9 c47 EE EE EE 00 
3f0ad c48 FF FF FF 00 
3f0b1 c49 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3f0b5 c4a 00 14 40 00 
3f0b9 c4b 00 1E 60 00 
3f0bd c4c 00 28 80 00 
3f0c1 c4d 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3f0c5 c4e 00 3C BF 00 
3f0c9 c4f 00 46 DF 00 
3f0cd c50 00 50 FF 00 
3f0d1 c51 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3f0d5 c52 39 77 FF 00 
3f0d9 c53 55 8A FF 00 
3f0dd c54 71 9E FF 00 
3f0e1 c55 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3f0e5 c56 AA C5 FF 00 
3f0e9 c57 C6 D8 FF 00 
3f0ed c58 E3 EC FF 00 
3f0f1 c59 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3f0f5 c5a 00 00 40 00 
3f0f9 c5b 00 00 60 00 
3f0fd c5c 00 00 80 00 
3f101 c5d 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3f105 c5e 00 00 BF 00 
3f109 c5f 00 00 DF 00 
3f10d c60 00 00 FF 00 
3f111 c61 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3f115 c62 39 39 FF 00 
3f119 c63 55 55 FF 00 
3f11d c64 71 71 FF 00 
3f121 c65 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3f125 c66 AA AA FF 00 
3f129 c67 C6 C6 FF 00 
3f12d c68 E3 E3 FF 00 
3f131 c69 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3f135 c6a 20 00 40 00 
3f139 c6b 30 00 60 00 
3f13d c6c 40 00 80 00 
3f141 c6d 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3f145 c6e 60 00 BF 00 
3f149 c6f 70 00 DF 00 
3f14d c70 80 00 FF 00 
3f151 c71 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3f155 c72 9C 39 FF 00 
3f159 c73 AA 55 FF 00 
3f15d c74 B8 71 FF 00 
3f161 c75 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3f165 c76 D5 AA FF 00 
3f169 c77 E3 C6 FF 00 
3f16d c78 F1 E3 FF 00 
3f171 c79 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3f175 c7a 40 00 40 00 
3f179 c7b 60 00 60 00 
3f17d c7c 80 00 80 00 
3f181 c7d 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3f185 c7e BF 00 BF 00 
3f189 c7f DF 00 DF 00 
3f18d c80 FF 00 FF 00 
3f191 c81 FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3f195 c82 FF 39 FF 00 
3f199 c83 FF 55 FF 00 
3f19d c84 FF 71 FF 00 
3f1a1 c85 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3f1a5 c86 FF AA FF 00 
3f1a9 c87 FF C6 FF 00 
3f1ad c88 FF E3 FF 00 
3f1b1 c89 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3f1b5 c8a 40 00 20 00 
3f1b9 c8b 60 00 30 00 
3f1bd c8c 80 00 40 00 
3f1c1 c8d 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3f1c5 c8e BF 00 60 00 
3f1c9 c8f DF 00 70 00 
3f1cd c90 FF 00 80 00 
3f1d1 c91 FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3f1d5 c92 FF 39 9C 00 
3f1d9 c93 FF 55 AA 00 
3f1dd c94 FF 71 B8 00 
3f1e1 c95 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3f1e5 c96 FF AA D5 00 
3f1e9 c97 FF C6 E3 00 
3f1ed c98 FF E3 F1 00 
3f1f1 c99 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3f1f5 c9a 40 00 00 00 
3f1f9 c9b 60 00 00 00 
3f1fd c9c 80 00 00 00 
3f201 c9d 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3f205 c9e BF 00 00 00 
3f209 c9f DF 00 00 00 
3f20d ca0 FF 00 00 00 
3f211 ca1 FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3f215 ca2 FF 39 39 00 
3f219 ca3 FF 55 55 00 
3f21d ca4 FF 71 71 00 
3f221 ca5 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3f225 ca6 FF AA AA 00 
3f229 ca7 FF C6 C6 00 
3f22d ca8 FF E3 E3 00 
3f231 ca9 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3f235 caa 40 10 00 00 
3f239 cab 60 18 00 00 
3f23d cac 80 20 00 00 
3f241 cad 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3f245 cae BF 30 00 00 
3f249 caf DF 38 00 00 
3f24d cb0 FF 40 00 00 
3f251 cb1 FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3f255 cb2 FF 6A 39 00 
3f259 cb3 FF 80 55 00 
3f25d cb4 FF 95 71 00 
3f261 cb5 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3f265 cb6 FF BF AA 00 
3f269 cb7 FF D5 C6 00 
3f26d cb8 FF EA E3 00 
3f271 cb9 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3f275 cba 40 20 00 00 
3f279 cbb 60 30 00 00 
3f27d cbc 80 40 00 00 
3f281 cbd 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3f285 cbe BF 60 00 00 
3f289 cbf DF 70 00 00 
3f28d cc0 FF 80 00 00 
3f291 cc1 FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3f295 cc2 FF 9C 39 00 
3f299 cc3 FF AA 55 00 
3f29d cc4 FF B8 71 00 
3f2a1 cc5 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3f2a5 cc6 FF D5 AA 00 
3f2a9 cc7 FF E3 C6 00 
3f2ad cc8 FF F1 E3 00 
3f2b1 cc9 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3f2b5 cca 40 30 00 00 
3f2b9 ccb 60 48 00 00 
3f2bd ccc 80 60 00 00 
3f2c1 ccd 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3f2c5 cce BF 90 00 00 
3f2c9 ccf DF A8 00 00 
3f2cd cd0 FF C0 00 00 
3f2d1 cd1 FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3f2d5 cd2 FF CE 39 00 
3f2d9 cd3 FF D5 55 00 
3f2dd cd4 FF DC 71 00 
3f2e1 cd5 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3f2e5 cd6 FF EA AA 00 
3f2e9 cd7 FF F1 C6 00 
3f2ed cd8 FF F8 E3 00 
3f2f1 cd9 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3f2f5 cda 30 40 00 00 
3f2f9 cdb 48 60 00 00 
3f2fd cdc 60 80 00 00 
3f301 cdd 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3f305 cde 90 BF 00 00 
3f309 cdf A8 DF 00 00 
3f30d ce0 C0 FF 00 00 
3f311 ce1 C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3f315 ce2 CE FF 39 00 
3f319 ce3 D5 FF 55 00 
3f31d ce4 DC FF 71 00 
3f321 ce5 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3f325 ce6 EA FF AA 00 
3f329 ce7 F1 FF C6 00 
3f32d ce8 F8 FF E3 00 
3f331 ce9 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3f335 cea 00 40 00 00 
3f339 ceb 00 60 00 00 
3f33d cec 00 80 00 00 
3f341 ced 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3f345 cee 00 BF 00 00 
3f349 cef 00 DF 00 00 
3f34d cf0 00 FF 00 00 
3f351 cf1 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3f355 cf2 39 FF 39 00 
3f359 cf3 55 FF 55 00 
3f35d cf4 71 FF 71 00 
3f361 cf5 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3f365 cf6 AA FF AA 00 
3f369 cf7 C6 FF C6 00 
3f36d cf8 E3 FF E3 00 
3f371 cf9 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3f375 cfa 00 40 14 00 
3f379 cfb 00 60 1E 00 
3f37d cfc 00 80 28 00 
3f381 cfd 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3f385 cfe 00 BF 3C 00 
3f389 cff 00 DF 46 00 
3f38d d00 00 FF 50 00 
3f391 d01 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3f395 d02 39 FF 77 00 
3f399 d03 55 FF 8A 00 
3f39d d04 71 FF 9E 00 
3f3a1 d05 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3f3a5 d06 AA FF C5 00 
3f3a9 d07 C6 FF D8 00 
3f3ad d08 E3 FF EC 00 
3f3b1 d09 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3f3b5 d0a 00 40 28 00 
3f3b9 d0b 00 60 3C 00 
3f3bd d0c 00 80 50 00 
3f3c1 d0d 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3f3c5 d0e 00 BF 78 00 
3f3c9 d0f 00 DF 8C 00 
3f3cd d10 00 FF A0 00 
3f3d1 d11 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3f3d5 d12 39 FF B5 00 
3f3d9 d13 55 FF C0 00 
3f3dd d14 71 FF CA 00 
3f3e1 d15 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3f3e5 d16 AA FF DF 00 
3f3e9 d17 C6 FF EA 00 
3f3ed d18 E3 FF F4 00 
3f3f1 d19 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3f3f5 d1a 00 40 40 00 
3f3f9 d1b 00 60 60 00 
3f3fd d1c 00 80 80 00 
3f401 d1d 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3f405 d1e 00 BF BF 00 
3f409 d1f 00 DF DF 00 
3f40d d20 00 FF FF 00 
3f411 d21 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3f415 d22 39 FF FF 00 
3f419 d23 55 FF FF 00 
3f41d d24 71 FF FF 00 
3f421 d25 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3f425 d26 AA FF FF 00 
3f429 d27 C6 FF FF 00 
3f42d d28 E3 FF FF 00 
3f431 d29 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3f435 d2a 00 28 40 00 
3f439 d2b 00 3C 60 00 
3f43d d2c 00 50 80 00 
3f441 d2d 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3f445 d2e 00 78 BF 00 
3f449 d2f 00 8C DF 00 
3f44d d30 00 A0 FF 00 
3f451 d31 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3f455 d32 39 B5 FF 00 
3f459 d33 55 C0 FF 00 
3f45d d34 71 CA FF 00 
3f461 d35 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3f465 d36 AA DF FF 00 
3f469 d37 C6 EA FF 00 
3f46d d38 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3f470 d39 00 00 00 00 
3f474 d3a 00          | ataripalette2  file "ataripalettep2.def"
3f475 d3a 11 11 11 00 
3f479 d3b 22 22 22 00 
3f47d d3c 33 33 33 00 
3f481 d3d 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3f485 d3e 55 55 55 00 
3f489 d3f 66 66 66 00 
3f48d d40 77 77 77 00 
3f491 d41 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3f495 d42 99 99 99 00 
3f499 d43 AA AA AA 00 
3f49d d44 BB BB BB 00 
3f4a1 d45 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3f4a5 d46 DD DD DD 00 
3f4a9 d47 EE EE EE 00 
3f4ad d48 FF FF FF 00 
3f4b1 d49 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3f4b5 d4a 00 14 40 00 
3f4b9 d4b 00 1E 60 00 
3f4bd d4c 00 28 80 00 
3f4c1 d4d 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3f4c5 d4e 00 3C BF 00 
3f4c9 d4f 00 46 DF 00 
3f4cd d50 00 50 FF 00 
3f4d1 d51 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3f4d5 d52 39 77 FF 00 
3f4d9 d53 55 8A FF 00 
3f4dd d54 71 9E FF 00 
3f4e1 d55 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3f4e5 d56 AA C5 FF 00 
3f4e9 d57 C6 D8 FF 00 
3f4ed d58 E3 EC FF 00 
3f4f1 d59 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3f4f5 d5a 00 00 40 00 
3f4f9 d5b 00 00 60 00 
3f4fd d5c 00 00 80 00 
3f501 d5d 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3f505 d5e 00 00 BF 00 
3f509 d5f 00 00 DF 00 
3f50d d60 00 00 FF 00 
3f511 d61 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3f515 d62 39 39 FF 00 
3f519 d63 55 55 FF 00 
3f51d d64 71 71 FF 00 
3f521 d65 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3f525 d66 AA AA FF 00 
3f529 d67 C6 C6 FF 00 
3f52d d68 E3 E3 FF 00 
3f531 d69 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3f535 d6a 20 00 40 00 
3f539 d6b 30 00 60 00 
3f53d d6c 40 00 80 00 
3f541 d6d 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3f545 d6e 60 00 BF 00 
3f549 d6f 70 00 DF 00 
3f54d d70 80 00 FF 00 
3f551 d71 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3f555 d72 9C 39 FF 00 
3f559 d73 AA 55 FF 00 
3f55d d74 B8 71 FF 00 
3f561 d75 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3f565 d76 D5 AA FF 00 
3f569 d77 E3 C6 FF 00 
3f56d d78 F1 E3 FF 00 
3f571 d79 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3f575 d7a 40 00 40 00 
3f579 d7b 60 00 60 00 
3f57d d7c 80 00 80 00 
3f581 d7d 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3f585 d7e BF 00 BF 00 
3f589 d7f DF 00 DF 00 
3f58d d80 FF 00 FF 00 
3f591 d81 FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3f595 d82 FF 39 FF 00 
3f599 d83 FF 55 FF 00 
3f59d d84 FF 71 FF 00 
3f5a1 d85 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3f5a5 d86 FF AA FF 00 
3f5a9 d87 FF C6 FF 00 
3f5ad d88 FF E3 FF 00 
3f5b1 d89 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3f5b5 d8a 40 00 20 00 
3f5b9 d8b 60 00 30 00 
3f5bd d8c 80 00 40 00 
3f5c1 d8d 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3f5c5 d8e BF 00 60 00 
3f5c9 d8f DF 00 70 00 
3f5cd d90 FF 00 80 00 
3f5d1 d91 FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3f5d5 d92 FF 39 9C 00 
3f5d9 d93 FF 55 AA 00 
3f5dd d94 FF 71 B8 00 
3f5e1 d95 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3f5e5 d96 FF AA D5 00 
3f5e9 d97 FF C6 E3 00 
3f5ed d98 FF E3 F1 00 
3f5f1 d99 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3f5f5 d9a 40 00 00 00 
3f5f9 d9b 60 00 00 00 
3f5fd d9c 80 00 00 00 
3f601 d9d 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3f605 d9e BF 00 00 00 
3f609 d9f DF 00 00 00 
3f60d da0 FF 00 00 00 
3f611 da1 FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3f615 da2 FF 39 39 00 
3f619 da3 FF 55 55 00 
3f61d da4 FF 71 71 00 
3f621 da5 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3f625 da6 FF AA AA 00 
3f629 da7 FF C6 C6 00 
3f62d da8 FF E3 E3 00 
3f631 da9 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3f635 daa 40 10 00 00 
3f639 dab 60 18 00 00 
3f63d dac 80 20 00 00 
3f641 dad 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3f645 dae BF 30 00 00 
3f649 daf DF 38 00 00 
3f64d db0 FF 40 00 00 
3f651 db1 FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3f655 db2 FF 6A 39 00 
3f659 db3 FF 80 55 00 
3f65d db4 FF 95 71 00 
3f661 db5 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3f665 db6 FF BF AA 00 
3f669 db7 FF D5 C6 00 
3f66d db8 FF EA E3 00 
3f671 db9 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3f675 dba 40 20 00 00 
3f679 dbb 60 30 00 00 
3f67d dbc 80 40 00 00 
3f681 dbd 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3f685 dbe BF 60 00 00 
3f689 dbf DF 70 00 00 
3f68d dc0 FF 80 00 00 
3f691 dc1 FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3f695 dc2 FF 9C 39 00 
3f699 dc3 FF AA 55 00 
3f69d dc4 FF B8 71 00 
3f6a1 dc5 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3f6a5 dc6 FF D5 AA 00 
3f6a9 dc7 FF E3 C6 00 
3f6ad dc8 FF F1 E3 00 
3f6b1 dc9 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3f6b5 dca 40 30 00 00 
3f6b9 dcb 60 48 00 00 
3f6bd dcc 80 60 00 00 
3f6c1 dcd 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3f6c5 dce BF 90 00 00 
3f6c9 dcf DF A8 00 00 
3f6cd dd0 FF C0 00 00 
3f6d1 dd1 FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3f6d5 dd2 FF CE 39 00 
3f6d9 dd3 FF D5 55 00 
3f6dd dd4 FF DC 71 00 
3f6e1 dd5 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3f6e5 dd6 FF EA AA 00 
3f6e9 dd7 FF F1 C6 00 
3f6ed dd8 FF F8 E3 00 
3f6f1 dd9 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3f6f5 dda 30 40 00 00 
3f6f9 ddb 48 60 00 00 
3f6fd ddc 60 80 00 00 
3f701 ddd 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3f705 dde 90 BF 00 00 
3f709 ddf A8 DF 00 00 
3f70d de0 C0 FF 00 00 
3f711 de1 C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3f715 de2 CE FF 39 00 
3f719 de3 D5 FF 55 00 
3f71d de4 DC FF 71 00 
3f721 de5 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3f725 de6 EA FF AA 00 
3f729 de7 F1 FF C6 00 
3f72d de8 F8 FF E3 00 
3f731 de9 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3f735 dea 00 40 00 00 
3f739 deb 00 60 00 00 
3f73d dec 00 80 00 00 
3f741 ded 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3f745 dee 00 BF 00 00 
3f749 def 00 DF 00 00 
3f74d df0 00 FF 00 00 
3f751 df1 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3f755 df2 39 FF 39 00 
3f759 df3 55 FF 55 00 
3f75d df4 71 FF 71 00 
3f761 df5 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3f765 df6 AA FF AA 00 
3f769 df7 C6 FF C6 00 
3f76d df8 E3 FF E3 00 
3f771 df9 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3f775 dfa 00 40 14 00 
3f779 dfb 00 60 1E 00 
3f77d dfc 00 80 28 00 
3f781 dfd 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3f785 dfe 00 BF 3C 00 
3f789 dff 00 DF 46 00 
3f78d e00 00 FF 50 00 
3f791 e01 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3f795 e02 39 FF 77 00 
3f799 e03 55 FF 8A 00 
3f79d e04 71 FF 9E 00 
3f7a1 e05 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3f7a5 e06 AA FF C5 00 
3f7a9 e07 C6 FF D8 00 
3f7ad e08 E3 FF EC 00 
3f7b1 e09 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3f7b5 e0a 00 40 28 00 
3f7b9 e0b 00 60 3C 00 
3f7bd e0c 00 80 50 00 
3f7c1 e0d 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3f7c5 e0e 00 BF 78 00 
3f7c9 e0f 00 DF 8C 00 
3f7cd e10 00 FF A0 00 
3f7d1 e11 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3f7d5 e12 39 FF B5 00 
3f7d9 e13 55 FF C0 00 
3f7dd e14 71 FF CA 00 
3f7e1 e15 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3f7e5 e16 AA FF DF 00 
3f7e9 e17 C6 FF EA 00 
3f7ed e18 E3 FF F4 00 
3f7f1 e19 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3f7f5 e1a 00 40 40 00 
3f7f9 e1b 00 60 60 00 
3f7fd e1c 00 80 80 00 
3f801 e1d 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3f805 e1e 00 BF BF 00 
3f809 e1f 00 DF DF 00 
3f80d e20 00 FF FF 00 
3f811 e21 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3f815 e22 39 FF FF 00 
3f819 e23 55 FF FF 00 
3f81d e24 71 FF FF 00 
3f821 e25 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3f825 e26 AA FF FF 00 
3f829 e27 C6 FF FF 00 
3f82d e28 E3 FF FF 00 
3f831 e29 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3f835 e2a 00 28 40 00 
3f839 e2b 00 3C 60 00 
3f83d e2c 00 50 80 00 
3f841 e2d 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3f845 e2e 00 78 BF 00 
3f849 e2f 00 8C DF 00 
3f84d e30 00 A0 FF 00 
3f851 e31 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3f855 e32 39 B5 FF 00 
3f859 e33 55 C0 FF 00 
3f85d e34 71 CA FF 00 
3f861 e35 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3f865 e36 AA DF FF 00 
3f869 e37 C6 EA FF 00 
3f86d e38 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3f870 e39             | 
3f870 e39             | '**********************************************************************************
3f870 e39             | '
3f870 e39             | '        Timings and colors definitions
3f870 e39             | '
3f870 e39             | '**********************************************************************************
3f870 e39             | 
3f870 e39             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3f870 e39 08 00 00 00 
3f874 e3a 3C 00 00 00 
3f878 e3b 08 00 00 00 
3f87c e3c 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3f880 e3d 07 00 00 00 
3f884 e3e 04 00 00 00 
3f888 e3f 01 00 00 00 
3f88c e40 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3f890 e41 58 02 00 00 
3f894 e42 20 9E 4B 14 
3f898 e43 FB A8 9E 01 
3f89c e44 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3f8a0 e45 00 00 00 00 
3f8a4 e46 C0 00 00 00 
3f8a8 e47 00 00 00 00 
3f8ac e48 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3f8b0 e49             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3f8b0 e49 00 75 C7 97 
3f8b4 e4a 27 47 F6 0A 
3f8b8 e4b 05 79 CB 9B 
3f8bc e4c 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3f8c0 e4d             | 
3f8c0 e4d             | ''--------  Initialization  ----------------------------------------------------------------
3f8c0 e4d             | 
3f8c0 e4d 28 0C 64 FD | hdmi            setq    #6
3f8c4 e4e 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3f8c8 e4f 28 10 64 FD |                 setq    #8
3f8cc e50 D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3f8d0 e51             | 
3f8d0 e51 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3f8d4 e52 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3f8d8 e53 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3f8dc e54 D6 C6 01 F1 |                 add     t1,hbase
3f8e0 e55 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3f8e4 e56 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3f8e8 e57 7B 0B 80 5F 
3f8ec e58 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3f8f0 e59 66 66 86 FF 
3f8f4 e5a 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3f8f8 e5b             | '
3f8f8 e5b D6 C6 01 F6 |                 mov 	t1,hbase			   '
3f8fc e5c 11 C6 65 F0 |                 shl 	t1,#17                             '
3f900 e5d E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3f904 e5e 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3f908 e5f             | 
3f908 e5f 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3f90c e60 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3f910 e61 E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3f914 e62             | 
3f914 e62             | ''--------  frame rendering main loop  ---------------------------------------------------
3f914 e62             | 
3f914 e62 28 06 64 FD | p101            setq 	#3
3f918 e63 00 A5 05 FB | 		rdlong  vblankptr,ptra
3f91c e64 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3f920 e65 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3f924 e66 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3f928 e67 00 A0 05 F6 |                 mov     dlinum, #0
3f92c e68 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3f930 e69 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3f934 e6a             | 
3f934 e6a             | 
3f934 e6a 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3f938 e6b 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3f93c e6c ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3f940 e6d             |                 
3f940 e6d             | 
3f940 e6d             | 
3f940 e6d             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3f940 e6d             |   
3f940 e6d 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3f944 e6e 29 FE 65 3D |          if_nc  setq2   #255
3f948 e6f D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3f94c e70             | 
3f94c e70             | '' -----   up porch (before the picture)
3f94c e70             | 
3f94c e70 C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3f950 e71 C1 C4 01 F6 |                 mov     hsync1,sync_001	
3f954 e72 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3f958 e73 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3f95c e74             |  
3f95c e74             |    
3f95c e74             |  
3f95c e74 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3f960 e75 E2 8C B1 FC |                 xzero   m_sn,hsync1
3f964 e76 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3f968 e77 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3f96c e78 E1 90 C1 FC |                 xcont   m_vi,hsync0
3f970 e79 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3f974 e7a             | 
3f974 e7a E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3f978 e7b E2 8C B1 FC |                 xzero   m_sn,hsync1
3f97c e7c 48 00 B0 FD | 		call    #dli
3f980 e7d E1 8E C1 FC |                 xcont   m_bv,hsync0     
3f984 e7e E1 90 C1 FC |                 xcont   m_vi,hsync0
3f988 e7f 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3f98c e80             |                 	
3f98c e80             |                 
3f98c e80             | 
3f98c e80             |  
3f98c e80             | '' ------- the main screen drawing starts here
3f98c e80             | 
3f98c e80 E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3f990 e81 E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3f994 e82 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3f998 e83 E1 8E C1 FC |                 xcont   m_bv,hsync0
3f99c e84 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3f9a0 e85 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3f9a4 e86 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3f9a8 e87             |               
3f9a8 e87             | 
3f9a8 e87 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3f9ac e88 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3f9b0 e89             | 
3f9b0 e89             | ' ---------------- All visible lines displayed now, start vblank  
3f9b0 e89             | 
3f9b0 e89 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3f9b4 e8a 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3f9b8 e8b C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3f9bc e8c C3 C4 01 F6 |                 mov     hsync1,sync_223
3f9c0 e8d 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3f9c4 e8e 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3f9c8 e8f             | 
3f9c8 e8f             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3f9c8 e8f             | 
3f9c8 e8f             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3f9c8 e8f             | 
3f9c8 e8f 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3f9cc e90             | 
3f9cc e90 DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3f9d0 e91 04 B8 05 A1 |     if_z        add     dlptr2,#4
3f9d4 e92 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3f9d8 e93             | 
3f9d8 e93 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3f9dc e94 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3f9e0 e95 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3f9e4 e96 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3f9e8 e97 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3f9ec e98             | 
3f9ec e98 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3f9f0 e99 DD C6 41 F8 |                 getnib  t1,dl,#0
3f9f4 e9a 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3f9f8 e9b 70 00 90 AD |     if_z        jmp     #preload
3f9fc e9c 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3fa00 e9d 94 00 90 AD |     if_z        jmp     #preload2
3fa04 e9e 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3fa08 e9f 0C 00 90 AD |     if_z        jmp     #p390
3fa0c ea0 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3fa10 ea1 28 00 90 AD |     if_z        jmp     #p391  
3fa14 ea2             | 
3fa14 ea2 2D 00 64 FD | p308            ret
3fa18 ea3             |    
3fa18 ea3 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3fa1c ea4 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3fa20 ea5 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3fa24 ea6 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3fa28 ea7 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3fa2c ea8 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3fa30 ea9 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3fa34 eaa 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3fa38 eab 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3fa3c eac             |  
3fa3c eac             | '' --------  Reload palette. To do 
3fa3c eac             | 
3fa3c eac E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3fa40 ead 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3fa44 eae 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3fa48 eaf 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3fa4c eb0 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3fa50 eb1 E0 00 00 FB |         	rdlong  $000, framebuf2         	
3fa54 eb2 70 FF 9F FD |         	jmp     #dli                
3fa58 eb3             |       
3fa58 eb3             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3fa58 eb3             | 
3fa58 eb3             | 
3fa58 eb3             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3fa58 eb3             | 
3fa58 eb3 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3fa5c eb4 E2 8C B1 FC |                 xzero   m_sn,hsync1
3fa60 eb5 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3fa64 eb6 E1 90 C1 FC |                 xcont   m_vi,hsync0
3fa68 eb7 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3fa6c eb8             |         
3fa6c eb8             | '' -------------- Preload a line from PSRAM        
3fa6c eb8             |         
3fa6c eb8 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3fa70 eb9 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3fa74 eba DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3fa78 ebb DE B4 01 F6 |                 mov     buf1,buf1c
3fa7c ebc 03 A0 05 F7 |                 incmod  dlinum,#3
3fa80 ebd             | 
3fa80 ebd 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3fa84 ebe 32 B7 01 F6 |                 mov     buf2,a1024
3fa88 ebf E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3fa8c ec0 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3fa90 ec1 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3fa94 ec2 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3fa98 ec3             |  
3fa98 ec3             |  
3fa98 ec3             | preload2      '  incmod  dlinum,#3
3fa98 ec3 04 C0 45 F0 |                 shr 	framebuf2,#4
3fa9c ec4 ED B2 01 F6 |                 mov 	cmd,affffffff
3faa0 ec5 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3faa4 ec6 28 02 64 FD |                 setq	#1
3faa8 ec7 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3faac ec8             |                 
3faac ec8             | 
3faac ec8             | '' -------------- Draw sprites
3faac ec8             | 
3faac ec8 CF 5C 02 F6 | sprite          mov t8,frames
3fab0 ec9 10 5C 0E F5 | 		and t8,#16 wz
3fab4 eca 11 48 06 F6 |                 mov spritenum, #17			' 16 +2 sprites. Todo: this should be a parameter
3fab8 ecb 10 48 06 A6 | 	if_z    mov spritenum, #16	
3fabc ecc             | 		
3fabc ecc             | 
3fabc ecc 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3fac0 ecd 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3fac4 ece EF 56 96 F9 |                 alts    t5,#sprite1xy
3fac8 ecf 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3facc ed0 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3fad0 ed1 EF 56 96 F9 |                 alts    t5,#sprite1xy
3fad4 ed2 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3fad8 ed3 0F 4C 66 F7 |                 signx	sprite_x,#15
3fadc ed4 F0 56 96 F9 |                 alts    t5,#sprite1wh
3fae0 ed5 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3fae4 ed6 01 52 86 F1 |                 sub     sprite_h,#1
3fae8 ed7 F0 56 96 F9 |                 alts    t5,#sprite1wh
3faec ed8 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3faf0 ed9             | 
3faf0 ed9             | 
3faf0 ed9 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3faf4 eda BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3faf8 edb 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3fafc edc B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3fb00 edd 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3fb04 ede AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3fb08 edf 00 5E 06 F6 |                 mov 	t9,#0
3fb0c ee0 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3fb10 ee1 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3fb14 ee2 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3fb18 ee3             |      
3fb18 ee3 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3fb1c ee4 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3fb20 ee5 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3fb24 ee6 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3fb28 ee7 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3fb2c ee8             |                 
3fb2c ee8 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3fb30 ee9 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3fb34 eea DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3fb38 eeb             |   		
3fb38 eeb 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3fb3c eec 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3fb40 eed             | 
3fb40 eed 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3fb44 eee 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3fb48 eef 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3fb4c ef0             |  
3fb4c ef0 EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3fb50 ef1 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3fb54 ef2 10 00 90 CD |      if_c 	jmp     #p899		
3fb58 ef3             | 	
3fb58 ef3             | 	
3fb58 ef3 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3fb5c ef4 28 CD 01 F1 | 		add	t4,sprite_w
3fb60 ef5 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3fb64 ef6             | 
3fb64 ef6 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3fb68 ef7             | 
3fb68 ef7 28 59 02 F6 | p899		mov 	t6,sprite_w
3fb6c ef8 01 58 86 F1 | 	 	sub     t6,#1
3fb70 ef9 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3fb74 efa             | 
3fb74 efa 28 58 62 FD |                 setq   	t6
3fb78 efb E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3fb7c efc 28 5D 02 F6 |                 mov t8,sprite_w
3fb80 efd 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3fb84 efe 24 00 90 AD |         if_z    jmp #p898
3fb88 eff             |          
3fb88 eff             |         
3fb88 eff 70 5F 06 F6 |                 mov  t9,#368
3fb8c f00 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3fb90 f01             | 
3fb90 f01 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3fb94 f02 08 5C 06 FA |                 mul t8,#8				' bits to shr
3fb98 f03 FF FF 7F FF 
3fb9c f04 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3fba0 f05 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3fba4 f06 00 5E 8E F9 |                 altd t9,#0				' and mask 
3fba8 f07 2D 01 00 F5 |                 and 0-0, t7
3fbac f08             |                
3fbac f08             | 
3fbac f08 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3fbb0 f09 E5 E0 7A FA |                 wmlong 368,t3				
3fbb4 f0a             |                 
3fbb4 f0a C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3fbb8 f0b 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3fbbc f0c 2D 00 64 FD |                 ret
3fbc0 f0d             | 	
3fbc0 f0d             | 	
3fbc0 f0d             |                
3fbc0 f0d             |  
3fbc0 f0d             | '' -------------- Graphics line ------------------------------------------------------------
3fbc0 f0d             |  
3fbc0 f0d             | 
3fbc0 f0d             | '' consts and vars
3fbc0 f0d             | 
3fbc0 f0d 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3fbc4 f0e AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3fbc8 f0f 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3fbcc f10 AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3fbd0 f11             | 
3fbd0 f11 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3fbd4 f12             | 
3fbd4 f12             | '------ these longs will be set by setmode function
3fbd4 f12             | 
3fbd4 f12 00 00 00 00 | m_bs            long    0        'blanks before sync
3fbd8 f13 00 00 00 00 | m_sn            long    0        'sync
3fbdc f14 00 00 00 00 | m_bv            long    0        'blanks before visible
3fbe0 f15 00 00 00 00 | m_vi            long    0        'visible pixels #
3fbe4 f16             | 'm_border        long    0        'left/right borders
3fbe4 f16 00 00 00 00 | i_upporch       long    0        'up porch lines
3fbe8 f17 00 00 00 00 | i_vsync         long    0        'vsync lines
3fbec f18 00 00 00 00 | i_downporch     long    0        'down porch lines
3fbf0 f19 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3fbf4 f1a 00 00 00 00 | i_totalvis      long    0
3fbf8 f1b             | 
3fbf8 f1b             | '-------------------------------------
3fbf8 f1b             |  
3fbf8 f1b 00 00 00 00 | linenum         long    0
3fbfc f1c 00 00 00 00 | frames          long    0
3fc00 f1d 00 00 00 00 | dlinum long 0
3fc04 f1e 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3fc08 f1f             | 
3fc08 f1f 00 00 00 00 | vblankptr       long    0
3fc0c f20 00 00 00 00 | modeptr         long    0
3fc10 f21 00 00 00 00 | paletteptr      long    0
3fc14 f22 00 00 00 00 | dlptr           long    0
3fc18 f23 01 00 00 00 | hbase           long    1
3fc1c f24 00 00 00 00 | mailbox         long    0
3fc20 f25 00 00 00 00 | spriteptr          long 0
3fc24 f26             | 
3fc24 f26 00 00 00 00 | cmd             long    0
3fc28 f27 00 EC 07 00 | buf1            long    $80000-1024-4096
3fc2c f28 00 04 00 00 | buf2            long    1024
3fc30 f29 01 00 00 00 | dlptr2          long    1
3fc34 f2a 01 00 00 00 | dl              long    1
3fc38 f2b             | 
3fc38 f2b 00 00 00 00 | buf1c long 0
3fc3c f2c 00 EC 07 00 | buf1d            long    $80000-1024-4096
3fc40 f2d 01 00 00 00 | framebuf2       long    1
3fc44 f2e 01 00 00 00 | hsync0          long    1
3fc48 f2f 01 00 00 00 | hsync1          long    1
3fc4c f30             | 
3fc4c f30 01 00 00 00 | t1              long    1
3fc50 f31 00 00 00 00 | t2 long 0
3fc54 f32 00 00 00 00 | t3 long 0
3fc58 f33 00 00 00 00 | t4 long 0
3fc5c f34             | 
3fc5c f34 00 00 00 00 | rcnt            long    0  'dl repeat count
3fc60 f35 00 00 00 00 | rcnt2           long    0
3fc64 f36 00 00 00 00 | rcnt2a          long    0
3fc68 f37 00 00 00 00 | roffset         long    0
3fc6c f38 00 00 00 00 | rdl             long    0  'dl repeat line
3fc70 f39 00 00 00 00 | dlc             long    0  'dl command
3fc74 f3a             | 
3fc74 f3a FF FF FF FF | affffffff       long    $ffffffff
3fc78 f3b 00 00 00 00 | sprite1pointer long 0
3fc7c f3c 00 00 00 00 | sprite1xy      long 0
3fc80 f3d 00 00 00 00 | sprite1wh      long 0
3fc84 f3e 00 00 00 00 | sprite2pointer long 0
3fc88 f3f 00 00 00 00 | sprite2xy      long 0
3fc8c f40 00 00 00 00 | sprite2wh      long 0
3fc90 f41 00 00 00 00 | sprite3pointer long 0
3fc94 f42 00 00 00 00 | sprite3xy      long 0
3fc98 f43 00 00 00 00 | sprite3wh      long 0
3fc9c f44 00 00 00 00 | sprite4pointer long 0
3fca0 f45 00 00 00 00 | sprite4xy      long 0
3fca4 f46 00 00 00 00 | sprite4wh      long 0
3fca8 f47 00 00 00 00 | sprite5pointer long 0
3fcac f48 00 00 00 00 | sprite5xy      long 0
3fcb0 f49 00 00 00 00 | sprite5wh      long 0
3fcb4 f4a 00 00 00 00 | sprite6pointer long 0
3fcb8 f4b 00 00 00 00 | sprite6xy      long 0
3fcbc f4c 00 00 00 00 | sprite6wh      long 0
3fcc0 f4d 00 00 00 00 | sprite7pointer long 0
3fcc4 f4e 00 00 00 00 | sprite7xy      long 0
3fcc8 f4f 00 00 00 00 | sprite7wh      long 0
3fccc f50 00 00 00 00 | sprite8pointer long 0
3fcd0 f51 00 00 00 00 | sprite8xy      long 0
3fcd4 f52 00 00 00 00 | sprite8wh      long 0
3fcd8 f53 00 00 00 00 | sprite9pointer long 0
3fcdc f54 00 00 00 00 | sprite9xy      long 0
3fce0 f55 00 00 00 00 | sprite9wh      long 0
3fce4 f56 00 00 00 00 | sprite10pointer long 0
3fce8 f57 00 00 00 00 | sprite10xy      long 0
3fcec f58 00 00 00 00 | sprite10wh      long 0
3fcf0 f59 00 00 00 00 | sprite11pointer long 0
3fcf4 f5a 00 00 00 00 | sprite11xy      long 0
3fcf8 f5b 00 00 00 00 | sprite11wh      long 0
3fcfc f5c 00 00 00 00 | sprite12pointer long 0
3fd00 f5d 00 00 00 00 | sprite12xy      long 0
3fd04 f5e 00 00 00 00 | sprite12wh      long 0
3fd08 f5f 00 00 00 00 | sprite13pointer long 0
3fd0c f60 00 00 00 00 | sprite13xy      long 0
3fd10 f61 00 00 00 00 | sprite13wh      long 0
3fd14 f62 00 00 00 00 | sprite14pointer long 0
3fd18 f63 00 00 00 00 | sprite14xy      long 0
3fd1c f64 00 00 00 00 | sprite14wh      long 0
3fd20 f65 00 00 00 00 | sprite15pointer long 0
3fd24 f66 00 00 00 00 | sprite15xy      long 0
3fd28 f67 00 00 00 00 | sprite15wh      long 0
3fd2c f68 00 00 00 00 | sprite16pointer long 0
3fd30 f69 00 00 00 00 | sprite16xy      long 0
3fd34 f6a 00 00 00 00 | sprite16wh      long 0
3fd38 f6b 00 00 00 00 | sprite17pointer long 0
3fd3c f6c 00 00 00 00 | sprite17xy      long 0
3fd40 f6d 00 00 00 00 | sprite17wh      long 0
3fd44 f6e 00 00 00 00 | sprite18pointer long 0
3fd48 f6f 00 00 00 00 | sprite18xy      long 0
3fd4c f70 00 00 00 00 | sprite18wh      long 0
3fd50 f71 00 00 00 00 | spritenum long 0
3fd54 f72             | 
3fd54 f72 00 00 00 00 | spriteline long 0
3fd58 f73 84 03 00 00 | sprite_x long 900
3fd5c f74 00 00 00 00 | sprite_y long 0
3fd60 f75 10 00 00 00 | sprite_w long 16
3fd64 f76 40 00 00 00 | sprite_h long 64
3fd68 f77 00 00 00 00 | l2 long 0
3fd6c f78 00 00 00 00 | t5 long 0
3fd70 f79 00 00 00 00 | t6 long 0
3fd74 f7a 00 00 00 00 | t7 long 0
3fd78 f7b 00 00 00 00 | t8 long 0
3fd7c f7c 00 00 00 00 | t9 long 0
3fd80 f7d 00 00 00 00 | preloadaddr long 0
3fd84 f7e 00 00 00 00 | preloadlineaddr long 0
3fd88 f7f 00 04 00 00 | a1024 long 1024
3fd8c f80             | 
3fd8c f80 E0 03 00 00 | aa long 992
3fd90 f81 FF 03 00 00 | a1023 long 1023
3fd94 f82 00 10 00 00 | a4096 long 4096
3fd98 f83             |  fit 368
3fd98 f83             | _psram_spin2_dat_
3fd98 f83 00 00 00 00 
      ...             
3fe90 fc1 00 00 00 00 
3fe94 fc2 00 00 00 00 |     listdata long 0[8*8]
3fe98 fc3             |             orgh
3fe98                 | 
3fe98                 | ' driver state
3fe98     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3fe9c     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3fea0                 | 
3fea0                 | ' delay profile
3fea0     07 00 00 00 
3fea4     00 CF 7B 05 
3fea8     80 D1 F0 08 
3feac     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3feb0     80 C4 60 0F 
3feb4     80 39 7A 12 
3feb8     40 2D D9 13 
3febc     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3fec0                 | 
3fec0                 | ' data to be passed to driver when starting it
3fec0                 | startupData
3fec0     00 00 00 00 |     long    0           ' current frequency
3fec4     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3fec8     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3fecc     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3fed0     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3fed4     E0 FE 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3fed8     60 FF 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3fedc     80 FF 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3fee0                 | 
3fee0                 | ' data for memory
3fee0                 | deviceData
3fee0                 |     ' 16 bank parameters follow (16MB per bank)
3fee0     00 00 00 00 
      ...             
3ff18     00 00 00 00 
3ff1c     00 00 00 00 |     long    0[16]                               ' banks 0-15
3ff20                 |     ' 16 banks of pin parameters follow
3ff20     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3ff24     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3ff28     FF FF FF FF 
      ...             
3ff58     FF FF FF FF 
3ff5c     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3ff60                 | 
3ff60                 | ' data for COG polling
3ff60                 | qosData 
3ff60     00 00 FF FF 
3ff64     00 00 FF FF 
3ff68     00 00 FF FF 
3ff6c     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3ff70     00 00 FF FF 
3ff74     00 00 FF FF 
3ff78     00 00 FF FF 
3ff7c     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3ff80                 |     
3ff80                 | ' mailbox storage
3ff80                 | 
3ff80                 | mailboxes
3ff80     00 00 00 00 
      ...             
3ffd8     00 00 00 00 
3ffdc     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3ffe0                 | 	alignl
3ffe0                 | _psram16drv_spin2_dat_
3ffe0                 |                             orgh
3ffe0     00 00 00 00 
      ...             
3fff8     00 00 00 00 
3fffc     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
40000                 | 
40000                 | driver_start
40000                 |                             org
40000 000             | '..................................................................................................
40000 000             | ' Memory layout for COG RAM once operational:
40000 000             | '
40000 000             | '  COG RAM address      Usage
40000 000             | '  ---------------      ----
40000 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
40000 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
40000 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
40000 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
40000 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
40000 000             | '  ~$198-$1F3           State and register variables
40000 000             | '
40000 000             | ' Also during driver COG startup:
40000 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
40000 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
40000 000             | '..................................................................................................
40000 000             |                             
40000 000             | ' Mailbox storage after vector initialization
40000 000             | 
40000 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
40004 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
40008 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
4000c 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
40010 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
40014 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
40018 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
4001c 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
40020 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
40024 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
40028 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
4002c 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
40030 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
40034 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
40038 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
4003c 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
40040 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
40044 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
40048 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
4004c 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
40050 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
40054 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
40058 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
4005c 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
40060 018             | 
40060 018             | ' Mailbox parameter addresses per COG once patched
40060 018             |                             
40060 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
40064 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
40068 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
4006c 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
40070 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
40074 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
40078 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
4007c 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
40080 020             | 
40080 020             | '..................................................................................................
40080 020             | ' Per COG request and state setup and service branching
40080 020             |         
40080 020             | cog0                 
40080 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
40084 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
40088 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
4008c 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
40090 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
40094 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
40098 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
4009c 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
400a0 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
400a4 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
400a8 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
400ac 02b 33 CA 63 FD |                             execf   request-0               'jump to service
400b0 02c             | cog1                        
400b0 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
400b4 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
400b8 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
400bc 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
400c0 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
400c4 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
400c8 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
400cc 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
400d0 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
400d4 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
400d8 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
400dc 037 33 CA 63 FD |                             execf   request-0               'jump to service
400e0 038             | cog2                         
400e0 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
400e4 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
400e8 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
400ec 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
400f0 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
400f4 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
400f8 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
400fc 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
40100 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
40104 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
40108 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
4010c 043 33 CA 63 FD |                             execf   request-0               'jump to service
40110 044             | cog3                        
40110 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
40114 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
40118 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
4011c 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
40120 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
40124 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
40128 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
4012c 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
40130 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
40134 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
40138 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
4013c 04f 33 CA 63 FD |                             execf   request-0               'jump to service
40140 050             | cog4                        
40140 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
40144 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
40148 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
4014c 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
40150 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
40154 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
40158 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
4015c 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
40160 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
40164 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
40168 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
4016c 05b 33 CA 63 FD |                             execf   request-0               'jump to service
40170 05c             | cog5                        
40170 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
40174 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
40178 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
4017c 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
40180 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
40184 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
40188 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
4018c 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
40190 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
40194 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
40198 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
4019c 067 33 CA 63 FD |                             execf   request-0               'jump to service
401a0 068             | cog6                        
401a0 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
401a4 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
401a8 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
401ac 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
401b0 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
401b4 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
401b8 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
401bc 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
401c0 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
401c4 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
401c8 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
401cc 073 33 CA 63 FD |                             execf   request-0               'jump to service
401d0 074             | cog7                        
401d0 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
401d4 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
401d8 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
401dc 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
401e0 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
401e4 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
401e8 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
401ec 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
401f0 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
401f4 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
401f8 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
401fc 07f 33 CA 63 FD |                             execf   request-0               'jump to service
40200 080             |                             fit     128
40200 080             | 
40200 080             |                             fit     128
40200 080             | pad                         long    0[128-$]                'align init code to $80
40200 080             | 
40200 080             | '..................................................................................................
40200 080             | 
40200 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
40200 080             | 
40200 080             | init                        
40200 080             |                             ' get driver scratch long address in hub
40200 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
40204 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
40208 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
4020c 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
40210 084             |                     
40210 084             |                             ' read in the additional LUT RAM code
40210 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
40214 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
40218 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
4021c 087             | 
4021c 087             |                             ' read the startup parameters
4021c 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
40220 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
40224 089             | 
40224 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
40224 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
40228 08a             | 
40228 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
4022c 08b 01 00 00 5F 
40230 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
40234 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
40238 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
4023c 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
40240 090             | 
40240 090             |                             ' setup data pin modes and data bus pin group in streamer commands
40240 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
40244 091 01 00 00 FF 
40248 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
4024c 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
40250 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
40254 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
40258 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
4025c 097 08 DE 47 F5 |                             or      a, #8
40260 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
40264 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
40268 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
4026c 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
40270 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
40274 09d 01 DE 07 F1 |                             add     a, #1
40278 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
4027c 09f             |  
4027c 09f             |                             ' setup device control pin states
4027c 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
40280 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
40284 0a1 01 00 00 FF 
40288 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
4028c 0a3             | 
4028c 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
40290 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
40294 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
40298 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
4029c 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
402a0 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
402a4 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
402a8 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
402ac 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
402b0 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
402b4 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
402b8 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
402bc 0af             | pinloop
402bc 0af             |                             ' generate minimum CE high time before access
402bc 0af A1 07 00 FF 
402c0 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
402c4 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
402c8 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
402cc 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
402d0 0b4 1F DE 63 FD |                             waitx   a                       'delay
402d4 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
402d8 0b6             | 
402d8 0b6             |                             ' setup the COG mailboxes and addresses 
402d8 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
402dc 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
402e0 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
402e4 0b9             | 
402e4 0b9 28 2E 64 FD |                             setq    #24-1
402e8 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
402ec 0bb             | 
402ec 0bb             |                             ' setup the polling loop for active COGs 
402ec 0bb 01 C2 63 FD |                             cogid   id
402f0 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
402f4 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
402f8 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
402fc 0bf 0A F0 07 F6 |                             mov     ptra, #10
40300 0c0 E1 F1 03 FA |                             mul     ptra, id
40304 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
40308 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
4030c 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
40310 0c4 03 C2 07 FA |                             mul     id, #3
40314 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
40318 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
4031c 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
40320 0c8 D8 01 B0 FD |                             call    #reloadcogs
40324 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
40328 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
4032c 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
4032c 0cb D8 E5 B7 F9 |                             setd    d, #addr1
40330 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
40334 0cd 08 04 DC FC |                             rep     #2, #8
40338 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
4033c 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
40340 0d0             | 
40340 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
40340 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
40340 0d0 01 C2 63 FD |                             cogid   id
40344 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
40348 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
4034c 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
40350 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
40354 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
40358 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
4035c 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
40360 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
40364 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
40368 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
4036c 0db 3F E4 A7 F9 |                             alti    d, #%111_111
40370 0dc 00 00 00 F6 |                             mov     0-0, 0-0
40374 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
40378 0de A5 E5 03 F1 |                             add     d, const512
4037c 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
40380 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
40384 0e1 00 00 00 F6 |                             mov     0-0, 0-0
40388 0e2             |                             
40388 0e2             |                             ' setup register values for control vector loop setup after we return
40388 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
4038c 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
40390 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
40394 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
40398 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
4039c 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
403a0 0e8 D0 C3 8F F9 |                             altd    id, #id0
403a4 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
403a8 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
403ac 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
403b0 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
403b4 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
403b8 0ee             |  
403b8 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
403bc 0ef 07 CA 07 F5 |                             and     request, #7
403c0 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
403c4 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
403c8 0f2             |                             fit     $100                    'ensure all init code fits this space
403c8 0f2             | 
403c8 0f2             |                             fit     $100                    'ensure all init code fits this space
403c8 0f2             | 
403c8 0f2 00 00 00 00 
      ...             
403f8 0fe 00 00 00 00 
403fc 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
40400 100             | 
40400 100             | '..................................................................................................
40400 100             | ' Error result handling and COG notification of request completion
40400 100             | 
40400 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
40404 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
40408 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
4040c 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
40410 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
40414 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
40418 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
4041c 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
40420 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
40424 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
40428 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
4042c 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
40430 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
40434 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
40438 10e             | ' Poller re-starts here after a COG is serviced
40438 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
4043c 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
40440 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
40444 111             | ' Main dynamic polling loop repeats until a request arrives
40444 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
40448 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
4044c 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
40450 114             | 
40450 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
40454 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
40458 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
4045c 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
40460 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
40464 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
40468 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
4046c 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
40470 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
40474 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
40478 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
4047c 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
40480 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
40484 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
40488 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
4048c 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
40490 124             | 
40490 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
40494 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
40498 126             |  
40498 126             | '..................................................................................................
40498 126             | ' List handler                               
40498 126             | 
40498 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
4049c 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
404a0 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
404a4 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
404a8 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
404ac 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
404b0 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
404b4 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
404b8 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
404bc 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
404c0 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
404c4 131 33 00 60 FD |                             execf   0-0                     'process the request 
404c8 132             | 
404c8 132             | '..................................................................................................
404c8 132             | ' Restoring per COG state and resuming where we left off
404c8 132             | 
404c8 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
404cc 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
404d0 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
404d4 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
404d8 136 D8 CB FB F8 |                             getbyte request, addr1, #3
404dc 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
404e0 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
404e4 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
404e8 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
404ec 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
404f0 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
404f4 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
404f8 13e             |                    
404f8 13e             | '..................................................................................................
404f8 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
404f8 13e             | 
404f8 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
404fc 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
40500 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
40504 141 D0 DF B7 F9 |                             setd    a, #id0
40508 142 D8 DF BF F9 |                             sets    a, #addr1
4050c 143 FE FF FF FF 
40510 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
40514 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
40518 146 3F DE A7 F9 |                             alti    a, #%111_111 
4051c 147 00 00 F0 F9 |                             muxq    0-0, 0-0
40520 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
40524 149 01 E2 63 FD |                             cogid   c
40528 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
4052c 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
40530 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
40534 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
40538 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
4053c 14f 00 E0 03 F6 |                             mov     b, 0-0
40540 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
40544 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
40548 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
4054c 153 0C 00 90 AD |             if_z            jmp     #excluded               
40550 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
40554 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
40558 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
4055c 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
40560 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
40564 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
40568 15a             | 
40568 15a             | 'determine priority cogs and build instructions for the polling sequence
40568 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
4056c 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
40570 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
40574 15d             | 
40574 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
40578 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
4057c 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
40580 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
40584 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
40588 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
4058c 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
40590 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
40594 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
40598 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
4059c 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
405a0 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
405a4 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
405a8 16a             | endprioloop
405a8 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
405ac 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
405b0 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
405b4 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
405b8 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
405bc 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
405c0 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
405c4 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
405c8 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
405cc 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
405d0 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
405d4 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
405d8 176             | 
405d8 176             | ' populate the round robin COG polling instructions
405d8 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
405dc 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
405e0 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
405e4 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
405e8 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
405ec 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
405f0 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
405f4 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
405f8 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
405fc 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
40600 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
40604 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
40608 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
4060c 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
40610 184             | '..................................................................................................
40610 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
40610 184             | 
40610 184             | set_latency                                                 '            (a) set latency
40610 184             | get_latency                                                 '            (b) get latency
40610 184             | set_burst                                                   '            (c) set burst size of bank
40610 184             | get_burst                                                   '            (d) get burst size of bank
40610 184             |                                                             '            (e) dump state
40610 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
40614 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
40618 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
4061c 187             |                                                             ' | | | | e  account for following AUGS
4061c 187 04 00 00 FF 
40620 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
40624 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
40628 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
4062c 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
40630 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
40634 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
40638 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
4063c 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
40640 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
40644 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
40648 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
4064c 193             | 
4064c 193             | '..................................................................................................
4064c 193             | ' Misc EXECF code
4064c 193             | 
4064c 193 33 72 63 FD | start_read_exec             execf   newburstr
40650 194 33 7C 63 FD | start_write_exec            execf   resumewrites
40654 195 33 78 63 FD | continue_read_exec          execf   lockedreads
40658 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
4065c 197             | 
4065c 197             | '..................................................................................................
4065c 197             | ' Variables
4065c 197             | 
4065c 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
40660 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
40664 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
40668 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
4066c 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
40670 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
40674 19d             | 
40674 19d 00 00 00 80 | xfreq1          long    $80000000
40678 19e 00 00 00 40 | xfreq2          long    $40000000
4067c 19f 03 00 00 00 | delay           long    3
40680 1a0             | 
40680 1a0             | lutcodeaddr                 
40680 1a0             | startupparams
40680 1a0             | excludedcogs                                    'careful: shared register use!
40680 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
40684 1a1 00 00 00 00 | flags           long    0
40688 1a2             | mask                                            'careful: shared register use!
40688 1a2 00 00 00 00 | resetmaskA      long    0
4068c 1a3             | limit                                           'careful: shared register use!
4068c 1a3 00 00 00 00 | resetmaskB      long    0
40690 1a4 00 00 00 00 | datapins        long    0
40694 1a5             | const512                                        'careful: shared register use!
40694 1a5 00 00 00 00 | devicelist      long    0
40698 1a6 00 00 00 00 | coglist         long    0
4069c 1a7 00 00 00 00 | mbox            long    0 
406a0 1a8             | 
406a0 1a8             | clkpin                                          'shared with code patched during init
406a0 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
406a4 1a9             | cspin                                           'shared with code patched during init
406a4 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
406a8 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
406ac 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
406b0 1ac 01 00 00 00 | clkdelay        long    1
406b4 1ad 00 00 00 00 | regdatabus      long    0
406b8 1ae             | 
406b8 1ae 10 00 00 00 | deviceaddr      long    $10
406bc 1af             | rrcounter
406bc 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
406c0 1b0             | 
406c0 1b0             | ' jump addresses for the per COG handlers
406c0 1b0 20 00 00 00 | cog0_handler    long    cog0
406c4 1b1 2C 00 00 00 | cog1_handler    long    cog1
406c8 1b2 38 00 00 00 | cog2_handler    long    cog2
406cc 1b3 44 00 00 00 | cog3_handler    long    cog3
406d0 1b4 50 00 00 00 | cog4_handler    long    cog4
406d4 1b5 5C 00 00 00 | cog5_handler    long    cog5
406d8 1b6 68 00 00 00 | cog6_handler    long    cog6
406dc 1b7 74 00 00 00 | cog7_handler    long    cog7
406e0 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
406e4 1b9             | 
406e4 1b9             | ' EXECF sequences
406e4 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
406e8 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
406ec 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
406f0 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
406f4 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
406f8 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
406fc 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
40700 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
40700 1c0             | 
40700 1c0             | 
40700 1c0             | ' SKIPF sequences
40700 1c0             | skiptable
40700 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
40704 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
40708 1c2 00 00 00 00 |                 long    0                      ' read modify write long
4070c 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
40710 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
40714 1c5 00 00 00 00 | pattern2        long    0
40718 1c6 00 00 00 00 | pattern3        long    0
4071c 1c7 77 02 00 00 | singlelong      long    %1001110111  
40720 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
40724 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
40728 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
4072c 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
40730 1cc             | 
40730 1cc             | ' LUT RAM address values
40730 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
40734 1cd DD 02 00 00 | continue_read   long    continue_read_lut
40738 1ce DB 02 00 00 | continue_write  long    continue_write_lut
4073c 1cf F6 02 00 00 | noread          long    noread_lut
40740 1d0             | 
40740 1d0 00 00 00 00 | id0             long    0
40744 1d1 01 00 00 00 | id1             long    1
40748 1d2 02 00 00 00 | id2             long    2
4074c 1d3 03 00 00 00 | id3             long    3
40750 1d4 04 00 00 00 | id4             long    4
40754 1d5 05 00 00 00 | id5             long    5
40758 1d6 06 00 00 00 | id6             long    6
4075c 1d7 07 00 00 00 | id7             long    7
40760 1d8             | 
40760 1d8             | 'These next 10 request registers below are also temporarily reused during init 
40760 1d8             | 'and COG updates and need to follow immediately after id0-id7
40760 1d8 00 00 00 00 | addr1           long    0
40764 1d9 00 00 00 00 | hubdata         long    0
40768 1da 00 00 00 00 | count           long    0
4076c 1db 00 00 00 00 | addr2           long    0
40770 1dc 00 00 00 00 | total           long    0
40774 1dd 00 00 00 00 | offset1         long    0
40778 1de 00 00 00 00 | offset2         long    0
4077c 1df 00 00 00 00 | link            long    0
40780 1e0             | 
40780 1e0             | burstwrite                                      'note shared register use during init
40780 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
40784 1e1 00 00 00 00 | id              long    0
40788 1e2             | 
40788 1e2 00 00 00 00 | header          long    0
4078c 1e3 00 00 00 00 | trailer         long    0
40790 1e4 00 00 00 00 | cmdaddr         long    0
40794 1e5 00 00 00 00 | request         long    0
40798 1e6 00 00 00 00 | rrlimit         long    0
4079c 1e7 00 00 00 00 | pinconfig       long    0
407a0 1e8 00 00 00 00 | clks            long    0
407a4 1e9 00 00 00 00 | resume          long    0
407a8 1ea 00 00 00 00 | orighubsize     long    0
407ac 1eb 00 00 00 00 | wrclks          long    0
407b0 1ec             | 
407b0 1ec 00 00 00 00 | pattern         long    0
407b4 1ed 00 00 00 00 | hubscratch      long    0
407b8 1ee 00 10 00 00 | val4k           long    4096
407bc 1ef             | 
407bc 1ef             | ' temporary general purpose regs
407bc 1ef 00 00 00 00 | a               long    0
407c0 1f0 00 00 00 00 | b               long    0
407c4 1f1 00 00 00 00 | c               long    0
407c8 1f2 00 00 00 00 | d               long    0
407cc 1f3             |                 fit     502
407cc 1f3             | 
407cc 1f3             |                 fit     502
407cc 1f3             | 
407cc 1f3             | '..................................................................................................
407cc 1f3             | 
407cc 1f3             |             orgh
407cc                 | 
407cc                 | lut_code
407cc                 | 'HW init code up to 80 longs
407cc                 | 
407cc                 | '..................................................................................................
407cc                 | ' Memory layout for LUT RAM once operational:
407cc                 | '
407cc                 | '  LUT RAM address      Usage
407cc                 | '  ---------------      ----
407cc                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
407cc                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
407cc                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
407cc                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
407cc                 | '
407cc                 | ' Also during driver COG startup:
407cc                 | ' $230-$24F is used for HW init setup
407cc                 | ' $250-$26F is used as temporary vector storage 
407cc                 | '..................................................................................................
407cc                 | 
407cc                 |                 org $230    
407cc 230             | 
407cc 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
407cc 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
407d0 231 24 16 60 FD |                             pollxfi
407d4 232 FF AA 2A FF 
407d8 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
407dc 234 28 00 B0 FD |                             call    #sendqspi
407e0 235 07 F8 07 FF 
407e4 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
407e8 237 28 00 B0 FD |                             call    #sendspi
407ec 238 F8 07 78 FF 
407f0 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
407f4 23a 1C 00 B0 FD |                             call    #sendspi
407f8 23b 7F 78 78 FF 
407fc 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
40800 23d 10 00 B0 FD |                             call    #sendspi 
40804 23e 2D 00 64 FD |                             ret
40808 23f             | 
40808 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
4080c 240 32 0C 64 FD |                             skipf   #%110
40810 241 9C EF 03 F6 |                             mov     pb, xsendimm
40814 242             | 
40814 242 10 D0 07 F6 | sendspi                     mov     clks, #16
40818 243 97 EF 03 F6 |                             mov     pb, ximm8lut
4081c 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
40820 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
40824 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
40828 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
4082c 248 24 36 60 FD |                             waitxfi                         'wait for the completion
40830 249 50 48 63 FD |                             fltl    datapins                'float data bus
40834 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
40838 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
4083c 24c             | 
4083c 24c 00 00 00 00 
40840 24d 00 00 00 00 
40844 24e 00 00 00 00 
40848 24f 00 00 00 00 |                 long    0[$270-32-$]
4084c 250             |                 fit     $270-32  ' keep room for 32 vector longs
4084c 250             |     
4084c 250             |                 fit     $270-32  ' keep room for 32 vector longs
4084c 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
4084c 250             | rw_vect ' PSRAM jump vectors
4084c 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
40850 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
40854 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
40858 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
4085c 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
40860 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
40864 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
40868 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
4086c 258             | ro_vect ' R/O PSRAM jump vectors
4086c 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
40870 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
40874 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
40878 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
4087c 25c 00 01 00 00 |                 long    unsupported
40880 25d 00 01 00 00 |                 long    unsupported
40884 25e 00 01 00 00 |                 long    unsupported
40888 25f 00 01 00 00 |                 long    unsupported
4088c 260             | ctrl_vect ' Control jump vectors
4088c 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
40890 261 00 01 00 00 |                 long    unsupported
40894 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
40898 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
4089c 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
408a0 265 00 01 00 00 |                 long    unsupported
408a4 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
408a8 267 3E 01 00 00 |                 long    reconfig 
408ac 268             | no_vect ' Invalid bank jump vectors
408ac 268 01 01 00 00 |                 long    invalidbank
408b0 269 01 01 00 00 |                 long    invalidbank
408b4 26a 01 01 00 00 |                 long    invalidbank
408b8 26b 01 01 00 00 |                 long    invalidbank
408bc 26c 01 01 00 00 |                 long    invalidbank
408c0 26d 01 01 00 00 |                 long    invalidbank
408c4 26e 01 01 00 00 |                 long    invalidbank
408c8 26f 01 01 00 00 |                 long    invalidbank
408cc 270             |                 fit     $270
408cc 270             | 
408cc 270             |                 fit     $270
408cc 270             | '..................................................................................................
408cc 270             | ' PSRAM READS
408cc 270             |                                                             ' a b c d e f
408cc 270             |                                                             ' B W L B R L  (a) byte read
408cc 270             |                                                             ' Y O O U E O  (b) word read
408cc 270             |                                                             ' T R N R S C  (c) long read
408cc 270             |                                                             ' E D G S U K  (d) new burst read
408cc 270             |                                                             '       T M E  (e) resumed sub-burst
408cc 270             |                                                             '         E D  (f) locked sub-burst
408cc 270             | 
408cc 270             | 
408cc 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
408d0 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
408d4 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
408d8 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
408dc 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
408e0 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
408e4 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
408e8 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
408ec 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
408f0 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
408f4 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
408f8 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
408fc 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
40900 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
40904 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
40908 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
4090c 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
40910 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
40914 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
40918 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
4091c 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
40920 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
40924 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
40928 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
4092c 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
40930 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
40934 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
40938 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
4093c 28c             | 
4093c 28c             |                             ' fall through to read bursts
4093c 28c             |                         
4093c 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
4093c 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
40940 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
40944 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
40948 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
4094c 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
40950 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
40954 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
40958 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
4095c 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
40960 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
40964 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
40968 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
4096c 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
40970 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
40974 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
40978 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
4097c 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
40980 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
40984 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
40988 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
4098c 2a0 E8 D1 03 F1 |                             add     clks, clks
40990 2a1             | readcommon
40990 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
40994 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
40998 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
4099c 2a4             | 
4099c 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
409a0 2a5 69 C8 63 FD |                             rev     cmdaddr
409a4 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
409a8 2a7 61 C8 63 FD |                             mergeb  cmdaddr
409ac 2a8             | 
409ac 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
409b0 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
409b4 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
409b4 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
409b8 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
409bc 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
409c0 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
409c4 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
409c4 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
409c8 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
409cc 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
409d0 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
409d4 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
409d8 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
409dc 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
409dc 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
409e0 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
409e4 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
409e8 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
409ec 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
409f0 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
409f4 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
409f8 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
409fc 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
40a00 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
40a04 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
40a08 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
40a0c 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
40a10 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
40a14 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
40a14 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
40a18 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
40a1c 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
40a20 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
40a24 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
40a28 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
40a2c 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
40a30 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
40a34 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
40a38 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
40a3c 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
40a40 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
40a44 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
40a48 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
40a4c 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
40a50 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
40a54 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
40a58 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
40a5c 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
40a60 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
40a64 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
40a68 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
40a6c 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
40a70 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
40a74 2da 10 03 90 FD |                             jmp     #writecommon
40a78 2db             | 
40a78 2db             | '..................................................................................................
40a78 2db             | ' Burst continuation testing
40a78 2db             | 
40a78 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
40a7c 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
40a80 2dd             | continue_read_lut          
40a80 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
40a84 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
40a88 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
40a8c 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
40a90 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
40a94 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
40a98 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
40a9c 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
40aa0 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
40aa4 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
40aa8 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
40aac 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
40ab0 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
40ab4 2ea             | 
40ab4 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
40ab8 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
40abc 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
40ac0 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
40ac4 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
40ac8 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
40acc 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
40ad0 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
40ad4 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
40ad8 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
40adc 2f4 2A 1C 66 0D |             _ret_           push    #poller
40ae0 2f5             | 
40ae0 2f5             | 
40ae0 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
40ae4 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
40ae4 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
40ae8 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
40aec 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
40af0 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
40af4 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
40af8 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
40afc 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
40b00 2fd 2D 00 64 FD |                             ret                             ' | continue processing
40b04 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
40b08 2ff             | '..................................................................................................
40b08 2ff             | ' Completion of requests
40b08 2ff             | 
40b08 2ff             | complete_rw_lut             
40b08 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
40b0c 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
40b10 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
40b14 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
40b18 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
40b1c 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
40b20 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
40b24 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
40b28 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
40b2c 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
40b30 309 32 62 64 AD |             if_z            skipf   #%110001
40b34 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
40b38 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
40b3c 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
40b40 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
40b44 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
40b48 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
40b4c 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
40b50 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
40b54 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
40b58 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
40b5c 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
40b60 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
40b64 316             |                                                             ' skipcase (a) gfx copy to/from hub
40b64 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
40b64 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
40b64 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
40b68 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
40b6c 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
40b70 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
40b74 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
40b78 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
40b7c 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
40b80 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
40b84 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
40b88 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
40b8c 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
40b90 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
40b94 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
40b98 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
40b9c 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
40ba0 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
40ba4 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
40ba8 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
40bac 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
40bb0 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
40bb4 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
40bb8 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
40bbc 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
40bc0 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
40bc4 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
40bc8 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
40bcc 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
40bd0 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
40bd4 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
40bd8 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
40bdc 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
40be0 335 DF B7 03 A6 |             if_z            mov     addr2, link
40be4 336 34 FF 9F AD |             if_z            jmp     #checknext
40be8 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
40bec 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
40bf0 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
40bf4 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
40bf8 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
40bfc 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
40c00 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
40c04 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
40c08 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
40c0c 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
40c10 341             | 
40c10 341             | '..................................................................................................
40c10 341             | ' PSRAM WRITES
40c10 341             |                                                             '  a b c d e f g h
40c10 341             | 
40c10 341             |                                                             '  B W L F B R L L (a) byte write(s)
40c10 341             |                                                             '  Y O O I U E O O (b) word write(s)
40c10 341             |                                                             '  T R N L R S C C (c) long write(s)
40c10 341             |                                                             '  E D G L S U K K (d) resumed fill
40c10 341             |                                                             '          T M E E (e) new burst write
40c10 341             |                                                             '            E D D (f) resumed burst
40c10 341             |                                                             '              F B (g) locked fill
40c10 341             |                                                             '              I U (h) locked burst write
40c10 341             |                                                             '              L R 
40c10 341             |                                                             '              L S 
40c10 341             |                                                             '                T 
40c10 341             | 
40c10 341             | w_single                   
40c10 341             | w_fill_cont           
40c10 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
40c14 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
40c18 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
40c1c 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
40c20 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
40c24 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
40c28 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
40c2c 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
40c30 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
40c34 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
40c38 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
40c3c 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
40c40 34d             |                ' disable call to r_resume_burst for single longs when z=0
40c40 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
40c44 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
40c48 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
40c4c 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
40c50 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
40c54 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
40c58 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
40c5c 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
40c60 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
40c64 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
40c68 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
40c6c 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
40c70 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
40c74 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
40c78 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
40c7c 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
40c80 35d             |         
40c80 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
40c80 35d             |             '
40c80 35d             |             '  At least one of these 3 optional components will be sent
40c80 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
40c80 35d             |             '     body - N x full longs of data
40c80 35d             |             '     trailer - last partial long of data
40c80 35d             |             '
40c80 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
40c80 35d             |             '
40c80 35d             |             'Case    Type                           Sends
40c80 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
40c80 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
40c80 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
40c80 35d             |             ' 4)     Multiple long fill             body only
40c80 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
40c80 35d             | 
40c80 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
40c80 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
40c84 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
40c88 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
40c8c 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
40c90 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
40c94 362 13 8C 07 F6 |                             mov     pattern3, #%10011
40c98 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
40c9c 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
40ca0 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
40ca4 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
40ca8 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
40cac 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
40cb0 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
40cb4 36a             |                             
40cb4 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
40cb8 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
40cbc 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
40cc0 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
40cc4 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
40cc8 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
40ccc 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
40cd0 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
40cd4 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
40cd8 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
40cdc 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
40ce0 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
40ce4 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
40ce8 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
40cec 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
40cf0 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
40cf4 37a             | 
40cf4 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
40cf8 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
40cfc 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
40d00 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
40d04 37e             |                  
40d04 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
40d08 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
40d0c 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
40d10 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
40d14 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
40d18 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
40d1c 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
40d20 385             | 
40d20 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
40d24 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
40d28 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
40d2c 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
40d30 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
40d34 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
40d38 38b             | 
40d38 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
40d38 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
40d3c 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
40d40 38d 2A B0 63 FD |                             push    addr1                   'save address
40d44 38e             | 
40d44 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
40d44 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
40d48 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
40d4c 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
40d50 391             |             
40d50 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
40d54 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
40d58 393 2B B0 63 FD |                             pop     addr1                   'restore address
40d5c 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
40d60 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
40d64 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
40d68 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
40d6c 398             | 
40d6c 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
40d70 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
40d74 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
40d78 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
40d7c 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
40d80 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
40d84 39e             | 
40d84 39e             |                             'trailer is done
40d84 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
40d88 39f             | 
40d88 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
40d8c 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
40d90 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
40d94 3a2             | 
40d94 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
40d98 3a3 69 C8 63 FD |                             rev     cmdaddr                 
40d9c 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
40da0 3a5 61 C8 63 FD |                             mergeb  cmdaddr
40da4 3a6             |                             
40da4 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
40da8 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
40dac 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
40db0 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
40db4 3aa             |                                                          
40db4 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
40db8 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
40dbc 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
40dc0 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
40dc4 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
40dc8 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
40dcc 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
40dd0 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
40dd4 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
40dd8 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
40ddc 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
40de0 3b5             |  
40de0 3b5 59 52 63 FD |                             drvh    cspin
40de4 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
40de8 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
40dec 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
40df0 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
40df4 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
40df8 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
40dfc 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
40e00 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
40e04 3be EA E5 03 F6 |                             mov     d, orighubsize
40e08 3bf EF E5 63 F0 |                             shl     d, a
40e0c 3c0 F2 E3 83 F1 |                             sub     c, d
40e10 3c1 DD E3 03 F1 |                             add     c, offset1
40e14 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
40e18 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
40e1c 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
40e20 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
40e24 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
40e28 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
40e2c 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
40e30 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
40e34 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
40e38 3cb BB D3 03 F6 |                             mov     resume, restorefill
40e3c 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
40e40 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
40e44 3ce 6C FC BF CD |             if_c            call    #yield
40e48 3cf 2D 00 64 FD |                             ret
40e4c 3d0             |                            
40e4c 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
40e4c 3d0             |                       '     rczl    pa                      'rotate left into address offset
40e4c 3d0             |                       '     rczl    c wcz                   'restore count and flags
40e4c 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
40e50 3d1 02 EC 67 F0 |                             shl     pa, #2
40e54 3d2 28 06 64 AD |             if_z            setq    #3
40e58 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
40e5c 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
40e60 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
40e64 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
40e68 3d7             | 
40e68 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
40e6c 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
40e70 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
40e74 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
40e78 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
40e7c 3dc             |                 fit 1024-32
40e7c 3dc             |         
40e7c 3dc             | 
40e7c 3dc             | '..................................................................................................
40e7c 3dc             | 
40e7c 3dc             |                 fit 1024-32
40e7c 3dc 00 00 00 00 
40e80 3dd 00 00 00 00 
40e84 3de 00 00 00 00 
40e88 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
40e8c 3e0             |                 org 1024-32
40e8c 000             | 
40e8c 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
40e8c 000 00 00 00 00 |                 long $0000
40e90 001 11 11 00 00 |                 long $1111
40e94 002 22 22 00 00 |                 long $2222
40e98 003 33 33 00 00 |                 long $3333
40e9c 004 44 44 00 00 |                 long $4444
40ea0 005 55 55 00 00 |                 long $5555
40ea4 006 66 66 00 00 |                 long $6666
40ea8 007 77 77 00 00 |                 long $7777
40eac 008 88 88 00 00 |                 long $8888
40eb0 009 99 99 00 00 |                 long $9999
40eb4 00a AA AA 00 00 |                 long $aaaa
40eb8 00b BB BB 00 00 |                 long $bbbb
40ebc 00c CC CC 00 00 |                 long $cccc
40ec0 00d DD DD 00 00 |                 long $dddd
40ec4 00e EE EE 00 00 |                 long $eeee
40ec8 00f FF FF 00 00 |                 long $ffff
40ecc 010             | 
40ecc 010             | 'masks
40ecc 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
40ed0 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
40ed4 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
40ed8 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
40edc 014             | 
40edc 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
40ee0 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
40ee4 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
40ee8 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
40eec 018             | 
40eec 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
40ef0 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
40ef4 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
40ef8 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
40efc 01c             | 
40efc 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
40f00 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
40f04 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
40f08 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
40f0c 020             |         fit 1024
40f0c 020             | 
40f0c 020             |         fit 1024
40f0c 020             | 
40f0c 020             | '--------------------------------------------------------------------------------------------------
40f0c 020             |         orgh
40f0c                 | 
40f0c                 | gfxexpansion
40f0c                 |                             'simple line drawing graphics expansion of memory driver
40f0c                 |                             'jmp     #donerepeats                'just return for now
40f0c                 | 
40f0c     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
40f10     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
40f14     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
40f18     DD E1 03 F6 |                             mov     b, offset1              'get error term
40f1c     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
40f20     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
40f24     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
40f28     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
40f2c     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
40f30     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
40f34     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
40f38     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
40f3c     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
40f40     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
40f44     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
40f48     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
40f4c     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
40f50     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
40f54     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
40f58     DC E5 33 F9 |                             getword d, total, #0            'get line width
40f5c     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
40f60     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
40f64     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
40f68     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
40f6c     C3 03 80 FD |                             jmp     #readmask               'continue filling
40f70                 | 	alignl
40f70                 | _usbnew_spin2_dat_
40f70                 |                 org     $000
40f70 000             | 
40f70 000             | usb_host_start
40f70 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
40f74 001             | 
40f74 001 03 00 00 FF 
40f78 002 D0 72 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
40f7c 003 02 72 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
40f80 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
40f84 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
40f88 006 29 72 63 FD |                 setq2   htmp
40f8c 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
40f90 008             | 
40f90 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
40f94 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
40f98 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
40f9c 00b             | 
40f9c 00b             | '------------------------------------------------------------------------------
40f9c 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
40f9c 00b             | ' special because the receiving function must not respond with either STALL or
40f9c 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
40f9c 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
40f9c 00b             | ' corrupt packet, it must ignore the transaction
40f9c 00b             | '------------------------------------------------------------------------------
40f9c 00b             | ' On entry:
40f9c 00b             | '   PTRA - start address of the SETUP data struct.
40f9c 00b             | ' On exit:
40f9c 00b             | '   retval - PID_ACK on success, otherwise error code.
40f9c 00b             | '------------------------------------------------------------------------------
40f9c 00b             | txn_setup
40f9c 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
40fa0 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
40fa4 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
40fa8 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
40fac 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
40fb0 010             | .setup
40fb0 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
40fb4 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40fb8 012 2D 00 64 AD |         if_z    ret
40fbc 013 7C 0B B0 FD |                 call    #retry_wait
40fc0 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
40fc4 015 2D 00 64 AD |         if_z    ret
40fc8 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
40fcc 017 E0 FF 9F FD |                 jmp     #.setup
40fd0 018             | 
40fd0 018             | '------------------------------------------------------------------------------
40fd0 018             | ' IN/INTERRUPT transaction.
40fd0 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
40fd0 018             | '------------------------------------------------------------------------------
40fd0 018             | ' On entry:
40fd0 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
40fd0 018             | '     CRC(b19..23).
40fd0 018             | ' On exit:
40fd0 018             | '------------------------------------------------------------------------------
40fd0 018             | txn_in
40fd0 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
40fd4 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
40fd8 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
40fdc 01b             | 
40fdc 01b             |                 ' Fall through to urx_packet
40fdc 01b             | 
40fdc 01b             | '------------------------------------------------------------------------------
40fdc 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
40fdc 01b             | ' received are handshakes and IN DATAx.
40fdc 01b             | '------------------------------------------------------------------------------
40fdc 01b             | ' On entry:
40fdc 01b             | ' On exit:
40fdc 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
40fdc 01b             | '     returned.
40fdc 01b             | '------------------------------------------------------------------------------
40fdc 01b             | urx_packet
40fdc 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
40fe0 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
40fe4 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
40fe8 01e 1A 94 63 FD |                 getct   hct2
40fec 01f 4E 95 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
40ff0 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
40ff4 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
40ff8 022             | .wait_sop
40ff8 022 22 A7 8A FA |                 rdpin   urx, dm
40ffc 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
41000 024 08 00 90 CD |         if_c    jmp     #.get_pid
41004 025 FC 25 CC FB |                 jnct2   #.wait_sop
41008 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
4100c 027             | .get_pid
4100c 027 28 02 B0 FD |                 call    #urx_next
41010 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
41014 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
41018 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
4101c 02b             | .chk_pid
4101c 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41020 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
41024 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
41028 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
4102c 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
41030 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
41034 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
41038 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
4103c 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
41040 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
41044 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
41048 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
4104c 037             | .ack_resend
4104c 037 22 A7 82 FA |                 rqpin   urx, dm
41050 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
41054 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
41058 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
4105c 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
41060 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
41064 03d             | .chk_eop
41064 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
41068 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
4106c 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
41070 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
41074 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
41078 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
4107c 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
41080 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
41084 045 2D 00 64 FD |                 ret
41088 046             | .idle
41088 046 22 A7 82 FA |                 rqpin   urx, dm
4108c 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
41090 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
41094 049 2D 00 64 FD |                 ret
41098 04a             | 
41098 04a             | '------------------------------------------------------------------------------
41098 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
41098 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
41098 04a             | ' if one is required.
41098 04a             | '------------------------------------------------------------------------------
41098 04a             | ' On entry:
41098 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
41098 04a             | ' On exit:
41098 04a             | '------------------------------------------------------------------------------
41098 04a             | utx_token
41098 04a 22 A7 82 FA |                 rqpin   urx, dm
4109c 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
410a0 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
410a4 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
410a8 04e 34 0D B0 CD |         if_c    call    #utx_pre
410ac 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
410b0 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
410b4 051 5E 73 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
410b8 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
410bc 053             | .next_byte
410bc 053 B9 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
410c0 054 08 72 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
410c4 055             | .wait
410c4 055 40 46 72 FD |                 testp   dp                      wc
410c8 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
410cc 057 23 03 08 FC |                 akpin   dp
410d0 058 22 A5 22 FC |                 wypin   utx, dm
410d4 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
410d8 05a             | 
410d8 05a             | '------------------------------------------------------------------------------
410d8 05a             | ' SETUP/OUT/INTERRUPT transaction.
410d8 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
410d8 05a             | '------------------------------------------------------------------------------
410d8 05a             | ' On entry:
410d8 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
410d8 05a             | '     CRC(b19..23).
410d8 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
410d8 05a             | '   pkt_data - count of DATAx payload bytes to send.
410d8 05a             | ' On exit:
410d8 05a             | '------------------------------------------------------------------------------
410d8 05a             | txn_out
410d8 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
410dc 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
410e0 05c 00 00 C0 FF 
410e4 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
410e8 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
410ec 05f             | 
410ec 05f             |                 ' Fall through to utx_data
410ec 05f             | 
410ec 05f             | '------------------------------------------------------------------------------
410ec 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
410ec 05f             | ' calculated while the data byte is being shifted out. Since data stage
410ec 05f             | ' success/fail is not determined until the status stage of the transaction,
410ec 05f             | ' this routine is only concerned about the current DATAx packet.
410ec 05f             | '------------------------------------------------------------------------------
410ec 05f             | ' On entry:
410ec 05f             | '   PTRA - hub start address of the data to read.
410ec 05f             | '   pkt_cnt - data payload size.
410ec 05f             | ' On exit:
410ec 05f             | '------------------------------------------------------------------------------
410ec 05f             | utx_data
410ec 05f 22 A7 82 FA |                 rqpin   urx, dm
410f0 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
410f4 061 F4 FF 9F CD |         if_c    jmp     #utx_data
410f8 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
410fc 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
41100 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
41104 065 D8 0C B0 CD |         if_c    call    #utx_pre
41108 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
4110c 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
41110 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
41114 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
41118 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
4111c 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
41120 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
41124 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
41128 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
4112c 06f             | .read_byte
4112c 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
41130 070 F0 00 B0 FD |                 call    #utx_byte
41134 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
41138 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
4113c 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
41140 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
41144 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
41148 076             | .send_crc
41148 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
4114c 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
41150 078 D0 00 B0 FD |                 call    #utx_byte
41154 079 5D A5 EA F8 |                 getbyte utx, crc, #1
41158 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
4115c 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
41160 07c             | 
41160 07c             | '------------------------------------------------------------------------------
41160 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
41160 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
41160 07c             | ' expects that the packet includes at least the CRC word.
41160 07c             | '
41160 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
41160 07c             | ' was requested, which makes it difficult to determine where the data stops
41160 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
41160 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
41160 07c             | ' USB-16 expected residual value of 0xB001.
41160 07c             | '
41160 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
41160 07c             | ' so the caller can verify IN success before writing the data to its final
41160 07c             | ' destination.
41160 07c             | '------------------------------------------------------------------------------
41160 07c             | ' On entry:
41160 07c             | '   pkt_data - max byte count expected to be in the packet.
41160 07c             | '   newb_flg - signals new byte ready when toggled.
41160 07c             | ' On exit:
41160 07c             | '   pkt_cnt - actual number of bytes read.
41160 07c             | '------------------------------------------------------------------------------
41160 07c             | urx_data
41160 07c F7 77 03 F6 |                 mov     htmp2, pb
41164 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
41168 07e 00 00 C0 FF 
4116c 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
41170 080 BB EF 03 F6 |                 mov     pb, htmp2
41174 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
41178 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
4117c 083 58 85 03 F6 |                 mov     pkt_tmp, pkt_data
41180 084 02 84 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
41184 085             | .wait_byte
41184 085             | ' In-line rx for max speed
41184 085 22 A7 82 FA |                 rqpin   urx, dm
41188 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
4118c 087 53 A5 02 F5 |                 and     utx, urx
41190 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
41194 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
41198 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
4119c 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
411a0 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
411a4 08d DC FF 9F FD |                 jmp     #.wait_byte
411a8 08e             | .get_byte
411a8 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
411ac 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
411b0 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
411b4 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
411b8 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
411bc 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
411c0 094             | .end_crc
411c0 094 01 B8 06 F1 |                 add     pkt_cnt, #1
411c4 095 C2 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
411c8 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
411cc 097 2D 00 64 1D |         if_a    ret
411d0 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
411d0 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
411d0 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
411d0 098             | ' to miss it, so cheat a bit and look for SOP clear here.
411d0 098 22 A7 82 FA |                 rqpin   urx, dm
411d4 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
411d8 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
411dc 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
411dc 09b             | .chk_crc
411dc 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
411e0 09c 58 00 00 FF 
411e4 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
411e8 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
411ec 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
411f0 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
411f4 0a1 34 09 B0 FD |                 call    #poll_waitx
411f8 0a2             | 
411f8 0a2             |                 ' Fall through to utx_handshake
411f8 0a2             | 
411f8 0a2             | '------------------------------------------------------------------------------
411f8 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
411f8 0a2             | ' the appropriate IP delay has been inserted.
411f8 0a2             | '------------------------------------------------------------------------------
411f8 0a2             | ' On entry:
411f8 0a2             | '   retval - handshake PID to send.
411f8 0a2             | ' On exit:
411f8 0a2             | '   retval unchanged.
411f8 0a2             | '------------------------------------------------------------------------------
411f8 0a2             | utx_handshake
411f8 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
411fc 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
41200 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
41204 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
41208 0a6 5F A5 02 F6 |                 mov     utx, retval
4120c 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
41210 0a8             | .idle
41210 0a8 22 A7 82 FA |                 rqpin   urx, dm
41214 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
41218 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
4121c 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
41220 0ac 08 09 90 FD |                 jmp     #poll_waitx
41224 0ad             | 
41224 0ad             | '------------------------------------------------------------------------------
41224 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
41224 0ad             | '------------------------------------------------------------------------------
41224 0ad             | ' On entry:
41224 0ad             | '   utx - byte to transmit.
41224 0ad             | ' On exit:
41224 0ad             | '------------------------------------------------------------------------------
41224 0ad             | utx_byte
41224 0ad 40 46 72 FD |                 testp   dp                      wc
41228 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
4122c 0af 23 03 08 FC |                 akpin   dp
41230 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
41234 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
41238 0b2             | 
41238 0b2             | '------------------------------------------------------------------------------
41238 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
41238 0b2             | '------------------------------------------------------------------------------
41238 0b2             | ' On entry:
41238 0b2             | ' On exit:
41238 0b2             | '   retval - the byte read.
41238 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
41238 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
41238 0b2             | '     received.
41238 0b2             | '------------------------------------------------------------------------------
41238 0b2             | urx_next
41238 0b2 22 A7 8A FA |                 rdpin   urx, dm
4123c 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
41240 0b4 53 A5 02 F5 |                 and     utx, urx
41244 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
41248 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
4124c 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
41250 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
41254 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
41258 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
4125c 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
41260 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
41264 0bd 2D 00 64 FD |                 ret
41268 0be             | 
41268 0be             | '------------------------------------------------------------------------------
41268 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
41268 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
41268 0be             | ' length, and the PID is not included in the CRC calculation:
41268 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
41268 0be             | '  CRC5  ENDP ADDRESS PID
41268 0be             | ' %00000_1111_1111111_xxxxxxxx
41268 0be             | '------------------------------------------------------------------------------
41268 0be             | ' On entry:
41268 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
41268 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
41268 0be             | ' On exit:
41268 0be             | '   ep_addr_pid - CRC value appended to the packet.
41268 0be             | '------------------------------------------------------------------------------
41268 0be             | calc_crc5
41268 0be FF 03 00 FF 
4126c 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
41270 0c0 5E 73 03 F6 |                 mov     htmp, ep_addr_pid
41274 0c1 08 72 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
41278 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
4127c 0c3 69 72 63 FD |                 rev     htmp                            ' Input data reflected
41280 0c4 28 72 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
41284 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
41288 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
4128c 0c7 09 72 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
41290 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
41294 0c9 01 72 77 F0 |                 shl     htmp, #1                wc
41298 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
4129c 0cb 01 72 77 F0 |                 shl     htmp, #1                wc
412a0 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
412a4 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
412a8 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
412ac 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
412b0 0d0             | 
412b0 0d0             | '------------------------------------------------------------------------------
412b0 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
412b0 0d0             | '------------------------------------------------------------------------------
412b0 0d0             | isr1_fsframe
412b0 0d0 1A 92 62 FD |                 getct   iframe_ct_base
412b4 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
412b8 0d2 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
412bc 0d3 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
412c0 0d4             | .wait
412c0 0d4 40 46 72 FD |                 testp   dp                      wc
412c4 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
412c8 0d6 23 03 08 FC |                 akpin   dp
412cc 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
412d0 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
412d4 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
412d8 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
412dc 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
412e0 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
412e4 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
412e8 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
412ec 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
412f0 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
412f4 0e1 2C FF BF FD |                 call    #utx_byte
412f8 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
412fc 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
41300 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
41304 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
41308 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
4130c 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
41310 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
41314 0e9 5B A5 42 F5 |                 or      utx, icrc
41318 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
4131c 0eb A4 83 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
41320 0ec 20 00 90 FD |                 jmp     #isr1_wait
41324 0ed             | isr1_lsframe
41324 0ed 1A 92 62 FD |                 getct   iframe_ct_base
41328 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
4132c 0ef B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
41330 0f0             | .wait
41330 0f0 40 46 72 FD |                 testp   dp                      wc
41334 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
41338 0f2 23 03 08 FC |                 akpin   dp
4133c 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
41340 0f4 A3 83 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
41344 0f5             | isr1_wait
41344 0f5 22 A5 82 FA |                 rqpin   utx, dm
41348 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
4134c 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
41350 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
41354 0f9 03 00 00 FF 
41358 0fa FF B3 06 F5 |                 and     frame, ##$7ff
4135c 0fb 1F 82 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
41360 0fc F5 FF 3B FB |                 reti1
41364 0fd             | 
41364 0fd             | '------------------------------------------------------------------------------
41364 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
41364 0fd             | ' transaction will complete before the next frame is triggered.
41364 0fd             | '------------------------------------------------------------------------------
41364 0fd             | ' On entry:
41364 0fd             | ' On exit:
41364 0fd             | '------------------------------------------------------------------------------
41364 0fd             | wait_txn_ok
41364 0fd 1A 76 63 FD |                 getct   htmp2
41368 0fe 49 77 83 F1 |                 sub     htmp2, iframe_ct_base
4136c 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
41370 100 A1 77 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
41374 101 A2 77 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
41378 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
4137c 103 2D 00 64 FD |                 ret
41380 104             | 
41380 104             | '------------------------------------------------------------------------------
41380 104             | ' A device connection was detected, or a bus reset was requested by the USB
41380 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
41380 104             | ' and perform a reset sequence prior to device enumeration.
41380 104             | '------------------------------------------------------------------------------
41380 104             | dev_reset
41380 104 22 A7 82 FA |                 rqpin   urx, dm
41384 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
41388 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
4138c 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
41390 108             | reset
41390 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
41394 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
41398 10a 1F 5C 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
4139c 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
413a0 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
413a4 10d 1A 92 62 FD |                 getct   iframe_ct_base
413a8 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
413ac 10f B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
413b0 110 59 73 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
413b4 111 24 72 07 F1 |                 add     htmp, #36
413b8 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
413bc 113             | .framewait
413bc 113 B9 B3 1A F2 |                 cmp     frame, htmp             wcz
413c0 114 F8 FF 9F CD |         if_b    jmp     #.framewait
413c4 115 2D 00 64 FD |                 ret
413c8 116             | 
413c8 116             | '------------------------------------------------------------------------------
413c8 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
413c8 116             | '------------------------------------------------------------------------------
413c8 116             | ' On entry:
413c8 116             | '   PTRA - source address.
413c8 116             | '   PB - destination address.
413c8 116             | '   hr0 - length of copy, in bytes.
413c8 116             | ' On exit:
413c8 116             | '------------------------------------------------------------------------------
413c8 116             | hmemcpy
413c8 116 61 73 C7 FA |                 rdbyte  htmp, ptra++
413cc 117 F7 73 43 FC |                 wrbyte  htmp, pb
413d0 118 01 EE 07 F1 |                 add     pb, #1
413d4 119 FC 87 6F 0B |         _ret_   djnz    hr0, #hmemcpy
413d8 11a             | 
413d8 11a             | '------------------------------------------------------------------------------
413d8 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
413d8 11a             | ' loop until the errant device is disconnected.
413d8 11a             | '------------------------------------------------------------------------------
413d8 11a             | ' On entry:
413d8 11a             | ' On exit:
413d8 11a             | '------------------------------------------------------------------------------
413d8 11a             | host_error
413d8 11a             |           if ERROR_LED >= 0
413d8 11a             |           end
413d8 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
413dc 11b             | 
413dc 11b             | '------------------------------------------------------------------------------
413dc 11b             | ' Get HID descriptor buffer for current port
413dc 11b             | '------------------------------------------------------------------------------
413dc 11b             | ' On entry:
413dc 11b             | ' On exit:
413dc 11b             | '   PB - HID descriptor buffer pointer
413dc 11b             | '------------------------------------------------------------------------------
413dc 11b             | get_hid_descr_buffer
413dc 11b 2D EF 03 F6 |                 mov     pb, hdev_port
413e0 11c 01 EE E7 F2 |                 cmpsub  pb, #1
413e4 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
413e8 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
413ec 11f             | 
413ec 11f             | 
413ec 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
413f0 120             | 
413f0 120             | ' USB commands and error codes
413f0 120 00 00 00 00 | cmd_data        long    0
413f4 121 00 00 00 00 | usb_err_code    long    ERR_NONE
413f8 122             | 
413f8 122             | ' Parameters block assigned at cog startup
413f8 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
413fc 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
41400 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
41404 125             | if ACTIVITY_LED >= 0
41404 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
41404 125             | end
41404 125             | if ERROR_LED >= 0
41404 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
41404 125             | end
41404 125 00 00 00 00 | hid_descr_p     long    0
41408 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
41408 126             | 'hkbd_report_p   long    0
41408 126 00 00 00 00 | hub_descr_p     long    0
4140c 127 00 00 00 00 | urx_buff_p      long    0
41410 128 00 00 00 00 | dev_desc_buff_p long    0
41414 129 00 00 00 00 | con_desc_buff_p long    0
41418 12a 00 00 00 00 | cache_start_p   long    0
4141c 12b 00 00 00 00 | cache_end_p     long    0
41420 12c             | if EMUPAD_MAX_PLAYER > 0
41420 12c             | emupad_out_ptr  long    0
41420 12c             | end
41420 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
41424 12d             | 
41424 12d             | hdev_init_start
41424 12d             | hdev_port       res     1
41424 12d             | hdev_port       res     1
41424 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
41424 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
41424 12d             | kbm_next_datax  res     1
41424 12d             | kbm_next_datax  res     1
41424 12d             | hub_intf_num    res     1
41424 12d             | hub_intf_num    res     1
41424 12d             | hub_next_datax  res     1
41424 12d             | hub_next_datax  res     1
41424 12d             | hub_status_chg  res     1
41424 12d             | hub_status_chg  res     1
41424 12d             | hub_port_status res     1
41424 12d             | hub_port_status res     1
41424 12d             | if HAVE_MOUSE
41424 12d             | ms_intf_num     res     1
41424 12d             | ms_intf_num     res     1
41424 12d             | ms_in_max_pkt   res     1
41424 12d             | ms_in_max_pkt   res     1
41424 12d             | end
41424 12d             | kb_intf_num     res     1
41424 12d             | kb_intf_num     res     1
41424 12d             | kb_interval     res     1
41424 12d             | kb_interval     res     1
41424 12d             | kb_in_max_pkt   res     1
41424 12d             | kb_in_max_pkt   res     1
41424 12d             | kb_max_index    res     1
41424 12d             | kb_max_index    res     1
41424 12d             | kb_led_states   res     1
41424 12d             | kb_led_states   res     1
41424 12d             | gp_intf_num     res     1
41424 12d             | gp_intf_num     res     1
41424 12d             | gp_interval     res     1
41424 12d             | gp_interval     res     1
41424 12d             | gp_max_index    res     1
41424 12d             | gp_max_index    res     1
41424 12d             | gp_descr_len    res     1+MAX_DEVICES
41424 12d             | gp_descr_len    res     1+MAX_DEVICES
41424 12d             | hdev_init_end
41424 12d             | 
41424 12d             | ' Initialized at cog startup:
41424 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
41424 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
41424 12d             | iframe_ct_new   res     1
41424 12d             | iframe_ct_new   res     1
41424 12d             | iframe_ct_base  res     1
41424 12d             | iframe_ct_base  res     1
41424 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
41424 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
41424 12d             | 
41424 12d             | ' This register block is reset to zero when a USB device connects
41424 12d             | hreg_init_start
41424 12d             | hstatus         res     1         ' Host status flags
41424 12d             | hstatus         res     1         ' Host status flags
41424 12d             | hctwait         res     1         ' Poll-based wait clocks
41424 12d             | hctwait         res     1         ' Poll-based wait clocks
41424 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
41424 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
41424 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
41424 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
41424 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
41424 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
41424 12d             | xfer_retry      res     1         ' Control transfer retry count
41424 12d             | xfer_retry      res     1         ' Control transfer retry count
41424 12d             | retry           res     1         ' Transaction retry count
41424 12d             | retry           res     1         ' Transaction retry count
41424 12d             | utx             res     1         ' Byte to transmit on USB
41424 12d             | utx             res     1         ' Byte to transmit on USB
41424 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
41424 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
41424 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
41424 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
41424 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
41424 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
41424 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
41424 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
41424 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
41424 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
41424 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
41424 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
41424 12d             | frame           res     1         ' USB 1ms frame counter value
41424 12d             | frame           res     1         ' USB 1ms frame counter value
41424 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
41424 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
41424 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
41424 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
41424 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
41424 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
41424 12d             | crc             res     1         ' Used for CRC16 calculation
41424 12d             | crc             res     1         ' Used for CRC16 calculation
41424 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
41424 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
41424 12d             | retval          res     1         ' Global success/fail return parameter
41424 12d             | retval          res     1         ' Global success/fail return parameter
41424 12d             | context_retval  res     1         ' Operation contextual return parameter
41424 12d             | context_retval  res     1         ' Operation contextual return parameter
41424 12d             | ' Device stuff
41424 12d             | hdev_id         res     1+MAX_DEVICES
41424 12d             | hdev_id         res     1+MAX_DEVICES
41424 12d             | hdev_bcd        res     1
41424 12d             | hdev_bcd        res     1
41424 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
41424 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
41424 12d             | ' Keyboard/mouse stuff
41424 12d             | hctrl_ep_addr   res     1
41424 12d             | hctrl_ep_addr   res     1
41424 12d             | hctrl_max_pkt   res     1
41424 12d             | hctrl_max_pkt   res     1
41424 12d             | hconfig_base    res     1
41424 12d             | hconfig_base    res     1
41424 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
41424 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
41424 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
41424 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
41424 12d             | hdev_class      res     1
41424 12d             | hdev_class      res     1
41424 12d             | hdev_subclass   res     1
41424 12d             | hdev_subclass   res     1
41424 12d             | hdev_protocol   res     1
41424 12d             | hdev_protocol   res     1
41424 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
41424 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
41424 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
41424 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
41424 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
41424 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
41424 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
41424 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
41424 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
41424 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
41424 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
41424 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
41424 12d             | if HAVE_MOUSE
41424 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
41424 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
41424 12d             | end
41424 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
41424 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
41424 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
41424 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
41424 12d             | hdev_ep_addr    res     1+MAX_DEVICES
41424 12d             | hdev_ep_addr    res     1+MAX_DEVICES
41424 12d             | hdev_out_addr   res     1
41424 12d             | hdev_out_addr   res     1
41424 12d             | 
41424 12d             | if EMUPAD_MAX_PLAYER > 0
41424 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
41424 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
41424 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
41424 12d             | end
41424 12d             | 
41424 12d             | hreg_init_end
41424 12d             | 
41424 12d             | hidr_start
41424 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
41424 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
41424 12d             | hidr_flags      res     1
41424 12d             | hidr_flags      res     1
41424 12d             | hidr_axis       res     4
41424 12d             | hidr_axis       res     4
41424 12d             | hidr_buttons    res     1
41424 12d             | hidr_buttons    res     1
41424 12d             | hidr_hats       res     1
41424 12d             | hidr_hats       res     1
41424 12d             | '' Above are actually useful values, 6 longs
41424 12d             | hidr_type       res     1
41424 12d             | hidr_type       res     1
41424 12d             | hidr_id         res     1
41424 12d             | hidr_id         res     1
41424 12d             | hidr_offset     res     1
41424 12d             | hidr_offset     res     1
41424 12d             | hidr_usage_idx  res     1
41424 12d             | hidr_usage_idx  res     1
41424 12d             | ' below need to be push/pop'd
41424 12d             | hidr_state      res     1
41424 12d             | hidr_state      res     1
41424 12d             | hidr_size       res     1
41424 12d             | hidr_size       res     1
41424 12d             | hidr_count      res     1
41424 12d             | hidr_count      res     1
41424 12d             | hidr_lminmax    res     1
41424 12d             | hidr_lminmax    res     1
41424 12d             | hidr_pminmax    res     1
41424 12d             | hidr_pminmax    res     1
41424 12d             | hidr_end
41424 12d             | 
41424 12d             | ' Variables dependent on the system freqency
41424 12d             | _var_64_lower_  res     1
41424 12d             | _var_64_lower_  res     1
41424 12d             | _var_64_upper_  res     1
41424 12d             | _var_64_upper_  res     1
41424 12d             | _12Mbps_        res     1
41424 12d             | _12Mbps_        res     1
41424 12d             | _1_5Mbps_       res     1
41424 12d             | _1_5Mbps_       res     1
41424 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
41424 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
41424 12d             | _1us_           res     1         ' 1us
41424 12d             | _1us_           res     1         ' 1us
41424 12d             | _10us_          res     1         ' 10us
41424 12d             | _10us_          res     1         ' 10us
41424 12d             | _33us_          res     1         ' 33us
41424 12d             | _33us_          res     1         ' 33us
41424 12d             | _txn_err_       res     1         ' 250us
41424 12d             | _txn_err_       res     1         ' 250us
41424 12d             | _500us_         res     1         ' 500us
41424 12d             | _500us_         res     1         ' 500us
41424 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
41424 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
41424 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
41424 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
41424 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
41424 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
41424 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
41424 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
41424 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
41424 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
41424 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
41424 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
41424 12d             | _preamble_wait_ res     1
41424 12d             | _preamble_wait_ res     1
41424 12d             | _1ms_           res     1         ' 1ms
41424 12d             | _1ms_           res     1         ' 1ms
41424 12d             | _2ms_           res     1         ' 2ms
41424 12d             | _2ms_           res     1         ' 2ms
41424 12d             | _suspend_wait_  res     1         ' 3ms
41424 12d             | _suspend_wait_  res     1         ' 3ms
41424 12d             | _4ms_           res     1         ' 4ms
41424 12d             | _4ms_           res     1         ' 4ms
41424 12d             | _xfer_wait_     res     1         ' 5ms
41424 12d             | _xfer_wait_     res     1         ' 5ms
41424 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
41424 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
41424 12d             | _reset_hold_    res     1         ' 15ms
41424 12d             | _reset_hold_    res     1         ' 15ms
41424 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
41424 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
41424 12d             | _21ms_          res     1         ' 21ms
41424 12d             | _21ms_          res     1         ' 21ms
41424 12d             | _100ms_         res     1         ' 100ms
41424 12d             | _100ms_         res     1         ' 100ms
41424 12d             | _500ms_         res     1         ' 500ms
41424 12d             | _500ms_         res     1         ' 500ms
41424 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
41424 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
41424 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
41424 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
41424 12d             | '------------------------------------------------------------------------------
41424 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
41424 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
41424 12d             | _usb_d_ls_nco_  res     1
41424 12d             | _usb_d_ls_nco_  res     1
41424 12d             | _usb_h_fs_nco_  res     1
41424 12d             | _usb_h_fs_nco_  res     1
41424 12d             | _usb_d_fs_nco_  res     1
41424 12d             | _usb_d_fs_nco_  res     1
41424 12d             | '------------------------------------------------------------------------------
41424 12d             | ' Scratch registers
41424 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
41424 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
41424 12d             | htmp1           res     1
41424 12d             | htmp1           res     1
41424 12d             | htmp2           res     1
41424 12d             | htmp2           res     1
41424 12d             | htmp3           res     1
41424 12d             | htmp3           res     1
41424 12d             | hrep            res     1         ' Repeat count
41424 12d             | hrep            res     1         ' Repeat count
41424 12d             | hsave0          res     1         ' Subroutine parameter saves
41424 12d             | hsave0          res     1         ' Subroutine parameter saves
41424 12d             | hsave1          res     1
41424 12d             | hsave1          res     1
41424 12d             | hsave2          res     1
41424 12d             | hsave2          res     1
41424 12d             | isrtmp1         res     1
41424 12d             | isrtmp1         res     1
41424 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
41424 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
41424 12d             | hr0             res     1         ' Multi-purpose registers
41424 12d             | hr0             res     1         ' Multi-purpose registers
41424 12d             | hr1             res     1
41424 12d             | hr1             res     1
41424 12d             | hr2             res     1
41424 12d             | hr2             res     1
41424 12d             | hr3             res     1
41424 12d             | hr3             res     1
41424 12d             | hpar1           res     1         ' Routine entry/exit parameters
41424 12d             | hpar1           res     1         ' Routine entry/exit parameters
41424 12d             | hpar2           res     1
41424 12d             | hpar2           res     1
41424 12d             | hpar3           res     1
41424 12d             | hpar3           res     1
41424 12d             | hct2            res     1         ' Function response bus turn-around timer
41424 12d             | hct2            res     1         ' Function response bus turn-around timer
41424 12d             | hct3            res     1         ' Keyboard/mouse poll timer
41424 12d             | hct3            res     1         ' Keyboard/mouse poll timer
41424 12d             | mod_cnt         res     1         ' Used in idle loops
41424 12d             | mod_cnt         res     1         ' Used in idle loops
41424 12d             |                 fit     $1F0
41424 12d             |                 org     $200
41424 200             | hlut_start
41424 200             | 
41424 200             | '------------------------------------------------------------------------------
41424 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
41424 200             | ' settings to startup defaults.
41424 200             | '------------------------------------------------------------------------------
41424 200             | ' On entry:
41424 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
41424 200             | '------------------------------------------------------------------------------
41424 200             | set_speed_full
41424 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
41428 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
4142c 202 A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
41430 203 A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
41434 204             | '                ret                             wcz     ' Restore caller flags on exit
41434 204             | 
41434 204             | '------------------------------------------------------------------------------
41434 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
41434 204             | ' is a downstream hub connected (not yet implemented), the baud generator
41434 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
41434 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
41434 204             | ' putting the smart pins into reset.
41434 204             | '------------------------------------------------------------------------------
41434 204             | ' On entry:
41434 204             | ' On exit: CZ flags restored to caller states
41434 204             | '------------------------------------------------------------------------------
41434 204             | set_speed_low
41434 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
41438 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
4143c 206 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
41440 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
41444 208 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
41448 209 A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
4144c 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
41450 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
41454 20c             | 
41454 20c             | '------------------------------------------------------------------------------
41454 20c             | ' Perform configuration stuff required when a device intitially connects.
41454 20c             | '------------------------------------------------------------------------------
41454 20c             | ' On entry:
41454 20c             | ' On exit:
41454 20c             | '------------------------------------------------------------------------------
41454 20c             | on_connect
41454 20c 02 86 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
41458 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
4145c 20e             | .retry
4145c 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
41460 20f 01 8E 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
41464 210 02 8E 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
41468 211 00 08 00 FF 
4146c 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
41470 213 28 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
41474 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
41478 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
4147c 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
41480 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
41484 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41488 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
4148c 21a B2 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
41490 21b 4C 03 B0 FD |                 call    #poll_waitx
41494 21c 01 86 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
41498 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
4149c 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
414a0 21f B8 FF 9F FD |                 jmp     #.retry
414a4 220             | .get_dev_desc
414a4 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
414a8 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
414ac 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
414b0 223 A8 99 02 F6 |                 mov     hctwait, _1ms_
414b4 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
414b8 225 88 FB BF FD |                 call    #reset
414bc 226 40 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
414c0 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
414c4 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
414c8 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
414cc 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
414d0 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
414d4 22c AD 99 02 F6 |                 mov     hctwait, _8ms_
414d8 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
414dc 22e 04 00 00 FF 
414e0 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
414e4 230 34 FA BF FD |                 call    #calc_crc5
414e8 231 28 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
414ec 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
414f0 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
414f4 234 F7 AD C2 FA |                 rdbyte  total_data, pb
414f8 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
414fc 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
41500 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41504 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
41508 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
4150c 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
41510 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
41514 23c A0 99 02 F6 |                 mov     hctwait, _500us_
41518 23d C4 02 B0 FD |                 call    #poll_waitx
4151c 23e 30 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
41520 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
41524 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
41528 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
4152c 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
41530 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41534 244 2D 00 64 5D |         if_nz   ret
41538 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
4153c 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
41540 247 61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
41544 248 61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
41548 249 00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
4154c 24a 09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
41550 24b 02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
41554 24c 56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
41558 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
4155c 24e 2C FB 9F CD |         if_b    jmp     #host_error
41560 24f 10 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
41564 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
41568 251 2D EC 63 FD |                 call    pa
4156c 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
41570 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
41574 254 2C EC 63 FD |                 jmp     pa
41578 255             | 
41578 255             | '------------------------------------------------------------------------------
41578 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
41578 255             | ' Status reporting is always in the function-to-host direction.
41578 255             | '------------------------------------------------------------------------------
41578 255             | ' On entry:
41578 255             | '   PTRA - start address of the SETUP data in hub.
41578 255             | '   PB - start address of the buffer/struct to be written to during the IN data
41578 255             | '     stage.
41578 255             | '   ep_addr_pid - device address, endpoint and CRC5.
41578 255             | ' On exit:
41578 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
41578 255             | '     contains the count of data stage bytes actually received, which must
41578 255             | '     always be <= the count requested.
41578 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
41578 255             | '     more specific USB operation error code.
41578 255             | '------------------------------------------------------------------------------
41578 255             | control_read
41578 255 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
4157c 256 F8 91 03 F6 |                 mov     hpar2, ptra
41580 257 F7 93 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
41584 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
41588 259             | .xfer_start
41588 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
4158c 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
41590 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41594 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
41598 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
4159c 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
415a0 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
415a4 260 61 00 00 FF 
415a8 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
415ac 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
415b0 263             | .data
415b0 263 56 B1 02 F6 |                 mov     pkt_data, total_data
415b4 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
415b8 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
415bc 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
415c0 267             | .nak_retry
415c0 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
415c4 268             | .in_retry
415c4 268 BC F6 BF FD |                 call    #txn_in
415c8 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
415cc 26a 28 00 90 AD |         if_z    jmp     #.commit
415d0 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
415d4 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
415d8 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
415dc 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
415e0 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
415e4 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
415e8 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
415ec 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
415f0 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
415f4 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
415f8 275             | .commit
415f8 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
415fc 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
41600 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
41604 278 5C 87 03 F6 |                 mov     hr0, pkt_cnt
41608 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
4160c 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
41610 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
41614 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
41618 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
4161c 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
41620 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
41624 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
41628 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
4162c 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
41630 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
41634 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
41638 285             | .pre_status
41638 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
4163c 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
41640 287 00 B0 06 F6 |                 mov     pkt_data, #0
41644 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
41648 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
4164c 28a 61 00 00 FF 
41650 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
41654 28c             | .out_retry
41654 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
41658 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
4165c 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
41660 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
41664 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
41668 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
4166c 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
41670 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
41674 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
41678 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
4167c 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
41680 297             | ' I've encountered transfer STALL, even though the data looks correct, and
41680 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
41680 297             | ' ControlRead() transfer gets things unstuck most of the time...
41680 297             | .xfer_retry
41680 297 AC 99 02 F6 |                 mov     hctwait, _xfer_wait_
41684 298 58 01 B0 FD |                 call    #poll_waitx
41688 299 8C F9 BF FD |                 call    #wait_txn_ok
4168c 29a C7 BD 02 F6 |                 mov     ep_addr_pid, hpar1
41690 29b C8 F1 03 F6 |                 mov     ptra, hpar2
41694 29c C9 EF 03 F6 |                 mov     pb, hpar3
41698 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
4169c 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
416a0 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
416a4 2a0             | 
416a4 2a0             | '------------------------------------------------------------------------------
416a4 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
416a4 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
416a4 2a0             | ' the SETUP data struct is filled with the required values.
416a4 2a0             | '------------------------------------------------------------------------------
416a4 2a0             | ' On entry:
416a4 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
416a4 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
416a4 2a0             | '     stage.
416a4 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
416a4 2a0             | ' On exit:
416a4 2a0             | '   retval - used to convey the success/failure of each stage.
416a4 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
416a4 2a0             | '     more specific USB operation error code.
416a4 2a0             | '------------------------------------------------------------------------------
416a4 2a0             | control_write
416a4 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
416a8 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
416ac 2a2 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
416b0 2a3             | 
416b0 2a3 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
416b4 2a4 F8 91 03 F6 |                 mov     hpar2, ptra
416b8 2a5 F7 93 03 F6 |                 mov     hpar3, pb
416bc 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
416c0 2a7             | .xfer_start
416c0 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
416c4 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
416c8 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
416cc 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
416d0 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
416d4 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
416d8 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
416dc 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
416e0 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
416e4 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
416e8 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
416ec 2b2             | .data
416ec 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
416f0 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
416f4 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
416f8 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
416fc 2b6             | .out_retry
416fc 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
41700 2b7 88 F6 BF FD |                 call    #txn_out
41704 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41708 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
4170c 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
41710 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
41714 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
41718 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
4171c 2be             | .commit
4171c 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
41720 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
41724 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
41728 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
4172c 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
41730 2c3             | pre_status_in
41730 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
41734 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
41738 2c5             | .status_retry
41738 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
4173c 2c6 44 F5 BF FD |                 call    #txn_in
41740 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
41744 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
41748 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
4174c 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
41750 2cb 2D 00 64 AD |         if_z    ret
41754 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
41758 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
4175c 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
41760 2cf             | '               ret                                     ' Caller must handle transfer retirement
41760 2cf             | 
41760 2cf             | '------------------------------------------------------------------------------
41760 2cf             | ' Execute an IN interrupt transaction.
41760 2cf             | '------------------------------------------------------------------------------
41760 2cf             | ' On entry:
41760 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
41760 2cf             | '   hpar2 - Address of the IN data buffer
41760 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
41760 2cf             | ' On exit:
41760 2cf             | '   retval - the result of the operation.
41760 2cf             | '   hpar3 - the count of IN data bytes actually received.
41760 2cf             | '------------------------------------------------------------------------------
41760 2cf             | do_int_in
41760 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
41764 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
41768 2d1 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
4176c 2d2             | 
4176c 2d2 C9 73 33 F9 |                 getword htmp, hpar3, #0
41770 2d3 C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz
41774 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
41778 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
4177c 2d6             | .retry
4177c 2d6 C9 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
41780 2d7 00 F5 BF FD |                 call    #txn_in
41784 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
41788 2d9 1C 00 90 AD |         if_z    jmp     #.commit
4178c 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
41790 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
41794 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
41798 2dd 54 00 B0 FD |                 call    #retry_wait
4179c 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
417a0 2df 18 00 90 AD |         if_z    jmp     #.post_ret
417a4 2e0 D4 FF 9F FD |                 jmp     #.retry
417a8 2e1             | .commit
417a8 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
417ac 2e2 C8 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
417b0 2e3 5C 87 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
417b4 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
417b8 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
417bc 2e6             | .post_ret
417bc 2e6 5C 93 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
417c0 2e7             | 
417c0 2e7             | 
417c0 2e7             | '------------------------------------------------------------------------------
417c0 2e7             | ' Resets the downstream hub port to FS
417c0 2e7             | '------------------------------------------------------------------------------
417c0 2e7             | dwnstream_reset
417c0 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
417c4 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
417c8 2e9             | 
417c8 2e9 0E 6A 07 F4 |                 bitl    _usb_h_ls_nco_, #14
417cc 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
417d0 2eb 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
417d4 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
417d8 2ed A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
417dc 2ee A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
417e0 2ef             | 
417e0 2ef             | '------------------------------------------------------------------------------
417e0 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
417e0 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
417e0 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
417e0 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
417e0 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
417e0 2ef             | '------------------------------------------------------------------------------
417e0 2ef             | ' On entry:
417e0 2ef             | '   hctwait - wait interval in sysclocks.
417e0 2ef             | ' On exit:
417e0 2ef             | '------------------------------------------------------------------------------
417e0 2ef             | poll_waitx
417e0 2ef 1A 94 63 FD |                 getct   hct2
417e4 2f0 4C 95 6B FA |                 addct2  hct2, hctwait
417e8 2f1             | .wait
417e8 2f1 FF 25 CC FB |                 jnct2   #.wait
417ec 2f2 2D 00 64 FD |                 ret
417f0 2f3             | 
417f0 2f3             | '------------------------------------------------------------------------------
417f0 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
417f0 2f3             | '------------------------------------------------------------------------------
417f0 2f3             | ' On entry:
417f0 2f3             | '   retval - transaction response PID or error code.
417f0 2f3             | ' On exit:
417f0 2f3             | '------------------------------------------------------------------------------
417f0 2f3             | retry_wait
417f0 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
417f4 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
417f8 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
417fc 2f6 14 00 90 AD |         if_z    jmp     #.nak
41800 2f7 9F 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
41804 2f8 D8 FF BF FD |                 call    #poll_waitx
41808 2f9             | .dec
41808 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
4180c 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
41810 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
41814 2fc             | .nak
41814 2fc 9E 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
41818 2fd C4 FF BF FD |                 call    #poll_waitx
4181c 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
41820 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
41824 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
41828 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
4182c 302 2D 00 64 FD |                 ret
41830 303             | 
41830 303             | host_reset
41830 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
41834 304 14 72 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
41838 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
41838 305 BD 01 05 FF 
4183c 306 00 72 1F F2 |                 cmp     htmp, ##168_000_000     wcz
41840 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
41844 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
41848 309             | ' Check to see if the system clock has been changed.
41848 309 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
4184c 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
41850 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
41854 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
41858 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
4185c 30e 40 46 62 FD |                 dirl    dp
41860 30f             | 
41860 30f 28 02 64 FD |                 setq    #1
41864 310 80 00 80 FF 
41868 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
4186c 312 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
41870 313             | .enable
41870 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
41874 314 41 46 62 FD |                 dirh    dp
41878 315 1F 38 63 FD |                 waitx   _1us_
4187c 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
41880 317             | 
41880 317             |                 ' Handle Port protection enable and startup delay
41880 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
41884 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
41888 319 1F 60 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
4188c 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
41890 31b 1F 60 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
41894 31c             | 
41894 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
41898 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
4189c 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
418a0 31f 00 00 04 F6 |                 mov     0-0, #0
418a4 320             | .regloop
418a4 320             | 
418a4 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
418a4 320             | 
418a4 320             | discon_entry
418a4 320 03 98 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
418a8 321             | 
418a8 321             |               
418a8 321             |         if HAVE_HIDPAD
418a8 321 F8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
418ac 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
418b0 323 28 6E 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
418b4 324 F7 01 68 FC |                 wrlong  #0,pb
418b8 325             |         end
418b8 325             |         if EMUPAD_MAX_PLAYER > 0
418b8 325             |         end
418b8 325             | 
418b8 325             |                 ' Fall through to disconnected loop
418b8 325             | 
418b8 325             | '-----------------------------------------------------------------------------------------------------------------
418b8 325             | ' Device connect handling (Section 7.1.7.3).
418b8 325             | '-----------------------------------------------------------------------------------------------------------------
418b8 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
418b8 325             | ' device to connect (Section 7.1.7.3).
418b8 325             | '-----------------------------------------------------------------------------------------------------------------
418b8 325             | disconnected
418b8 325 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
418bc 326 2C 89 0B F2 |                 cmp     hr1, save_sysclk        wz
418c0 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
418c4 328 03 88 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
418c8 329 1F 88 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
418cc 32a             |         if ACTIVITY_LED >= 0
418cc 32a             |         end
418cc 32a 22 A7 82 FA |                 rqpin   urx, dm
418d0 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
418d4 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
418d8 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
418dc 32e             | .se1_test
418dc 32e B1 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
418e0 32f FC FE BF FD |                 call    #poll_waitx
418e4 330 22 A7 82 FA |                 rqpin   urx, dm
418e8 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
418ec 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
418f0 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
418f4 334             | .se1            'SE1 is a fatal error condition
418f4 334 B1 99 02 F6 |                 mov     hctwait, _100ms_
418f8 335 E4 FE BF FD |                 call    #poll_waitx
418fc 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
41900 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
41904 338             | .connect_test                                           ' Test lines until stable J/K state seen
41904 338 1F 62 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
41908 339 22 A7 82 FA |                 rqpin   urx, dm
4190c 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
41910 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
41914 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
41918 33d             | connected
41918 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
4191c 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
41920 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
41924 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
41928 341             | .set_pulse
41928 341 1A 66 63 FD |                 getct   _pulse_time_
4192c 342 B2 67 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
41930 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
41930 343             | ' of 1ms and make a correction, if necessary.
41930 343             | '                mov     htmp, _1ms_
41930 343             | '                subs    htmp, iframe_delta
41930 343             | '                adds    _frame1ms_clks_, htmp
41930 343             | '                debug(udec(_frame1ms_clks_))
41930 343             | 
41930 343             |                 ' Fall through to idle/processing loop
41930 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
41934 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
41938 345             | 
41938 345             | hidle
41938 345 22 A7 82 FA |                 rqpin   urx, dm
4193c 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
41940 347 98 00 90 CD |         if_c    jmp     #.se0_test
41944 348 24 06 70 FD |                 pollct3                         wc
41948 349 68 00 90 3D |         if_nc   jmp     #.nopoll
4194c 34a 1A 96 63 FD |                 getct   hct3
41950 34b A8 97 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
41954 34c             | 
41954 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
41958 34d 00 72 E3 F8 |                 getbyte htmp
4195c 34e             | 
4195c 34e 09 72 0F F2 |                 cmp     htmp, #HUB_READY        wz
41960 34f 94 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
41964 350 40 00 90 AD |         if_z    jmp     #.poll
41968 351             | 
41968 351             |         if _HAVE_GAMEPAD
41968 351 06 72 0F F2 |                 cmp     htmp, #HID_READY        wz
4196c 352 08 72 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
41970 353 07 72 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
41974 354 0C 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
41978 355 2C 00 90 AD |         if_z    jmp     #.poll
4197c 356             |         end
4197c 356             | 
4197c 356             |         if HAVE_MOUSE
4197c 356 04 72 0F F2 |                 cmp     htmp, #M_READY          wz
41980 357 30 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
41984 358 20 00 90 AD |         if_z    jmp     #.poll
41988 359             |         end
41988 359             | 
41988 359 03 72 0F F2 |                 cmp     htmp, #KB_READY         wz
4198c 35a 98 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
41990 35b 14 00 90 AD |         if_z    jmp     #.poll
41994 35c             | 
41994 35c 05 72 0F F2 |                 cmp     htmp, #KBM_READY        wz
41998 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
4199c 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
419a0 35f 98 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
419a4 360             |         if HAVE_MOUSE
419a4 360 30 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
419a8 361             |         else
419a8 361             |         end
419a8 361             | 
419a8 361             | .poll
419a8 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
419ac 362 2D EC 63 FD |                 call    pa
419b0 363             | .skip_poll
419b0 363             | 
419b0 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
419b4 364             | 
419b4 364             | .nopoll
419b4 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
419b8 365 44 00 90 AD |         if_z    jmp     #hsuspend
419bc 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
419c0 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
419c4 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
419c8 369 1A 86 63 FD |                 getct   hr0
419cc 36a B3 87 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
419d0 36b             |         if ACTIVITY_LED >= 0
419d0 36b             |         end
419d0 36b 1A 66 63 3D |         if_ae   getct   _pulse_time_
419d4 36c B2 67 03 31 |         if_ae   add     _pulse_time_, _500ms_
419d8 36d 5C FF 9F FD |                 jmp     #hidle
419dc 36e             | ' Check for extended SE0 state on the bus
419dc 36e             | .se0_test
419dc 36e A8 99 02 F6 |                 mov     hctwait, _1ms_
419e0 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
419e4 370 22 A7 82 FA |                 rqpin   urx, dm
419e8 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
419ec 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
419f0 373 24 F6 BF FD |                 call    #wait_txn_ok
419f4 374 00 00 80 FF 
419f8 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
419fc 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
419fc 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
41a00 377             | 
41a00 377             | hsuspend
41a00 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
41a04 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
41a08 379 1F 54 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
41a0c 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
41a10 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
41a14 37c 00 98 07 F6 |                 mov     mod_cnt, #0
41a18 37d             | 
41a18 37d             |                 ' Fall through to resume wait loop
41a18 37d             | 
41a18 37d             | hwait_resume
41a18 37d 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
41a1c 37e 02 88 47 F0 |                 shr     hr1, #2
41a20 37f 1F 88 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
41a24 380             |         if ACTIVITY_LED >= 0
41a24 380             |         end
41a24 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
41a28 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
41a2c 382 14 72 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
41a30 383 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
41a34 384 18 00 90 AD |         if_z    jmp     #.resume
41a38 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
41a3c 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
41a40 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
41a44 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
41a48 389 22 6F 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
41a4c 38a 22 6B 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
41a50 38b             | .resume
41a50 38b 22 05 28 FC |                 wypin   #OUT_K, dm
41a54 38c 1F 5E 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
41a58 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
41a5c 38e A3 73 03 F6 |                 mov     htmp, _ip_delay_ls_
41a60 38f 01 72 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
41a64 390 1F 72 63 FD |                 waitx   htmp
41a68 391 22 07 28 FC |                 wypin   #OUT_J, dm
41a6c 392 01 72 47 F0 |                 shr     htmp, #1
41a70 393 1F 72 63 FD |                 waitx   htmp
41a74 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
41a78 395 1A 92 62 FD |                 getct   iframe_ct_base
41a7c 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
41a80 397 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
41a84 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
41a88 399 AB 99 02 F6 |                 mov     hctwait, _4ms_
41a8c 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
41a90 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
41a94 39c             | 
41a94 39c             | '------------------------------------------------------------------------------
41a94 39c             | ' Send preamble to enable low-speed HUB ports
41a94 39c             | '------------------------------------------------------------------------------
41a94 39c             | ' On entry:
41a94 39c             | ' On exit:
41a94 39c             | '   USB baud rate set to low-speed
41a94 39c             | '------------------------------------------------------------------------------
41a94 39c             | utx_pre
41a94 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
41a98 39d 40 46 62 FD |                 dirl    dp
41a9c 39e 28 02 64 FD |                 setq    #1
41aa0 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
41aa4 3a0 58 44 62 FD |                 drvl    dm
41aa8 3a1 59 46 62 FD |                 drvh    dp
41aac 3a2             | 
41aac 3a2 1E 00 00 FF 
41ab0 3a3 80 72 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
41ab4 3a4             | 
41ab4 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
41ab8 3a5 01 72 57 F0 |                 shr     htmp, #1        wc
41abc 3a6 28 02 64 3D |         if_nc   setq    #1
41ac0 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
41ac4 3a8 1F 4E 63 FD |                 waitx   _preamble_wait_
41ac8 3a9             | .l1
41ac8 3a9             | 
41ac8 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
41acc 3aa 40 46 62 FD |                 dirl    dp
41ad0 3ab 28 02 64 FD |                 setq    #1
41ad4 3ac 80 00 80 FF 
41ad8 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
41adc 3ae 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
41ae0 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
41ae4 3b0 41 46 62 FD |                 dirh    dp
41ae8 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
41aec 3b2             | 
41aec 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
41af0 3b3 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
41af4 3b4 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
41af8 3b5             | 
41af8 3b5             | hlut_end
41af8 3b5             |                 fit     $400
41af8 3b5             |                 orgh
41af8                 | if OVERLAP_MEMORY
41af8                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
41af8                 | end
41af8                 | '------------------------------------------------------------------------------
41af8                 | ' Routines called from cog space.
41af8                 | '------------------------------------------------------------------------------
41af8                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
41af8                 | '------------------------------------------------------------------------------
41af8                 | 
41af8                 | '------------------------------------------------------------------------------
41af8                 | ' USB host cog initialization.
41af8                 | '------------------------------------------------------------------------------
41af8                 | usb_host_init
41af8                 |                 ' Initialize buffer pointers
41af8                 |         if OVERLAP_MEMORY
41af8                 |         else
41af8     4C 15 B0 FE |                 loc     pb, #hid_descr
41afc                 |         end
41afc     F7 4B 02 F6 |                 mov     hid_descr_p, pb
41b00                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
41b00                 |                 {
41b00                 |                 }
41b00                 |         
41b00                 |                 {
41b00                 |                 }
41b00                 |                 'loc     pb,#hkbd_report
41b00                 |                 'mov     hkbd_report_p,pb
41b00                 | 
41b00     44 1D B0 FE |                 loc     pb, #hub_descr
41b04     F7 4D 02 F6 |                 mov     hub_descr_p, pb
41b08     59 1D B0 FE |                 loc     pb, #urx_buff
41b0c     F7 4F 02 F6 |                 mov     urx_buff_p, pb
41b10     D1 1D B0 FE |                 loc     pb, #dev_desc_buff
41b14     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
41b18     DB 1D B0 FE |                 loc     pb, #con_desc_buff
41b1c     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
41b20     24 15 B0 FE |                 loc     pb, #usb_cache_start
41b24     F7 55 02 F6 |                 mov     cache_start_p, pb
41b28     25 1D B0 FE |                 loc     pb, #usb_cache_end
41b2c     F7 57 02 F6 |                 mov     cache_end_p, pb
41b30                 | 
41b30                 |         if ERROR_LED >= 0
41b30                 |         end
41b30                 | 
41b30                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
41b30                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
41b30                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
41b30                 | ' Configure and enable the Serial Host USB port.
41b30     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
41b34                 | 
41b34                 | '------------------------------------------------------------------------------
41b34                 | ' Timing calculations happen before any interrupt(s) are enabled.
41b34                 | '------------------------------------------------------------------------------
41b34                 | ' On entry:
41b34                 | '   htmp - current CLKFREQ value.
41b34                 | '------------------------------------------------------------------------------
41b34                 | hinit_usb_timings
41b34                 | '                getct   htmp2
41b34     B9 59 02 F6 |                 mov     save_sysclk, htmp
41b38     8D 5B 80 FF 
41b3c     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
41b40     18 32 63 FD |                 getqx   _12Mbps_
41b44     10 32 57 F0 |                 shr     _12Mbps_, #16           wc
41b48     00 32 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
41b4c     03 6E 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
41b50     0E 6E 67 F0 |                 shl     _usb_h_fs_nco_, #14
41b54     99 6F 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
41b58     01 70 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
41b5c     0E 70 67 F0 |                 shl     _usb_d_fs_nco_, #14
41b60     99 71 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
41b64     99 35 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
41b68     03 34 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
41b6c     02 6A 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
41b70     0E 6A 67 F0 |                 shl     _usb_h_ls_nco_, #14
41b74     9A 6B 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
41b78     9A 6D 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
41b7c     80 00 00 FF 
41b80     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
41b84     18 2E 63 FD |                 getqx   _var_64_lower_
41b88     19 30 63 FD |                 getqy   _var_64_upper_
41b8c     28 2E 63 FD |                 setq    _var_64_lower_
41b90     65 CD 1D FF 
41b94     00 30 27 FD |                 qfrac   _var_64_upper_, ##_1b
41b98     18 36 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
41b9c     01 00 00 FF 
41ba0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
41ba4     18 2E 63 FD |                 getqx   _var_64_lower_
41ba8     19 30 63 FD |                 getqy   _var_64_upper_
41bac     28 2E 63 FD |                 setq    _var_64_lower_
41bb0     A1 07 00 FF 
41bb4     40 30 27 FD |                 qfrac   _var_64_upper_, ##_1m
41bb8     18 38 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
41bbc     9C 7D 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
41bc0     09 38 57 F0 |                 shr     _1us_, #9               wc
41bc4     00 38 27 F1 |                 addx    _1us_, #0                       ' Round to final value
41bc8     0A 7C 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
41bcc     18 3A 63 FD |                 getqx   _10us_
41bd0     09 3A 57 F0 |                 shr     _10us_, #9              wc
41bd4     00 3A 27 F1 |                 addx    _10us_, #0                      ' 10us
41bd8     21 7C 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
41bdc     18 3C 63 FD |                 getqx   _33us_
41be0     09 3C 57 F0 |                 shr     _33us_, #9              wc
41be4     00 3C 27 F1 |                 addx    _33us_, #0                      ' 33us
41be8     FA 7C 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
41bec     18 3E 63 FD |                 getqx   _txn_err_
41bf0     09 3E 57 F0 |                 shr     _txn_err_, #9           wc
41bf4     00 3E 27 F1 |                 addx    _txn_err_, #0                   ' 250us
41bf8     F4 7D 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
41bfc     18 40 63 FD |                 getqx   _500us_
41c00     09 40 57 F0 |                 shr     _500us_, #9             wc
41c04     00 40 27 F1 |                 addx    _500us_, #0                     ' 500us
41c08     01 00 00 FF 
41c0c     9A 7C 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
41c10     18 42 63 FD |                 getqx   _txn_ok_ls_
41c14     09 42 57 F0 |                 shr     _txn_ok_ls_, #9         wc
41c18     00 42 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
41c1c     01 00 00 FF 
41c20     52 7D 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
41c24     18 44 63 FD |                 getqx   _txn_ok_fs_
41c28     09 44 57 F0 |                 shr     _txn_ok_fs_, #9         wc
41c2c     00 44 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
41c30     9B 47 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
41c34     05 00 00 FF 
41c38     80 46 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
41c3c     10 46 57 F0 |                 shr     _ip_delay_ls_, #16      wc
41c40     00 46 27 F1 |                 addx    _ip_delay_ls_, #0
41c44     9B 4B 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
41c48     1C 00 00 FF 
41c4c     C0 4B 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
41c50     10 4A 57 F0 |                 shr     _tat_wait_ls_, #16      wc
41c54     00 4A 27 F1 |                 addx    _tat_wait_ls_, #0
41c58     9B 49 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
41c5c     00 00 00 FF 
41c60     4E 49 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
41c64     10 48 57 F0 |                 shr     _ip_delay_fs_, #16      wc
41c68     00 48 27 F1 |                 addx    _ip_delay_fs_, #0
41c6c     9B 4D 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
41c70     04 00 00 FF 
41c74     23 4D 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
41c78     10 4C 57 F0 |                 shr     _tat_wait_fs_, #16      wc
41c7c     00 4C 27 F1 |                 addx    _tat_wait_fs_, #0
41c80     8D 5B 00 FF 
41c84     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
41c88     18 4E 63 FD |                 getqx   _preamble_wait_
41c8c     08 4E 87 F1 |                 sub     _preamble_wait_,# 9 - 1
41c90     01 00 00 FF 
41c94     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
41c98     18 2E 63 FD |                 getqx   _var_64_lower_
41c9c     19 30 63 FD |                 getqy   _var_64_upper_
41ca0     28 2E 63 FD |                 setq    _var_64_lower_
41ca4     01 00 00 FF 
41ca8     E8 31 27 FD |                 qfrac   _var_64_upper_, ##_1thou
41cac     18 50 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
41cb0     09 50 57 F0 |                 shr     _1ms_, #9               wc
41cb4     00 50 27 F1 |                 addx    _1ms_, #0                       ' 1ms
41cb8     FF FF 7F FF 
41cbc     F2 69 07 F6 |                 mov     _frame1ms_clks_, ##-14
41cc0     A8 69 43 F1 |                 adds    _frame1ms_clks_, _1ms_
41cc4     A8 53 03 F6 |                 mov     _2ms_, _1ms_
41cc8     01 52 67 F0 |                 shl     _2ms_, #1                       ' 2ms
41ccc     A8 55 03 F6 |                 mov     _suspend_wait_, _1ms_
41cd0     A8 55 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
41cd4     A8 57 03 F6 |                 mov     _4ms_, _1ms_
41cd8     02 56 67 F0 |                 shl     _4ms_, #2                       ' 4ms
41cdc     AB 59 03 F6 |                 mov     _xfer_wait_, _4ms_
41ce0     A8 59 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
41ce4     AC 5D 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
41ce8     AE 5F 03 F6 |                 mov     _resume_hold_, _reset_hold_
41cec     02 5E 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
41cf0     AF 63 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
41cf4     01 62 67 F0 |                 shl     _100ms_, #1                     ' 40ms
41cf8     A8 5B 03 F6 |                 mov     _8ms_, _1ms_
41cfc     03 5A 67 F0 |                 shl     _8ms_, #3                       ' 8ms
41d00     01 5C 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
41d04     AE 63 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
41d08     AC 5D 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
41d0c     AC 61 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
41d10     02 60 67 F0 |                 shl     _21ms_, #2                      ' 20ms
41d14     A8 61 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
41d18     B1 65 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
41d1c     01 62 67 F0 |                 shl     _100ms_, #1                     ' 100ms
41d20     03 64 67 F0 |                 shl     _500ms_, #3                     ' 400ms
41d24     B1 65 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
41d28                 | '        _ret_   mov     _1sec_, save_sysclk
41d28                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
41d28                 | '                ret
41d28                 | {
41d28                 | }
41d28                 | 
41d28                 | '------------------------------------------------------------------------------
41d28                 | ' Parse a configuration descriptor chain to see if the device is a recognized
41d28                 | ' one. If it is, start the task progression that will configure the device for
41d28                 | ' use.
41d28                 | '------------------------------------------------------------------------------
41d28                 | ' On entry:
41d28                 | '   hconfig_base - start address of the cached config descriptor chain.
41d28                 | ' On exit:
41d28                 | '------------------------------------------------------------------------------
41d28                 | hparse_con_desc
41d28     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
41d2c     82 73 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
41d30     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
41d34     4E 72 FF F9 |                 movbyts htmp,#%%1032
41d38     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
41d3c                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
41d3c                 | 
41d3c     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
41d40     6E ED 03 F1 |                 add     pa, hconfig_base
41d44     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
41d48                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
41d48                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
41d48                 | ' that defines a keyboard and/or mouse.
41d48     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
41d4c                 | .next_intf
41d4c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
41d50     B8 01 90 3D |         if_ae   jmp     #hset_config
41d54     6E F3 03 F6 |                 mov     ptrb, hconfig_base
41d58     75 F3 03 F1 |                 add     ptrb, hnext_desc
41d5c     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
41d60     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
41d64     0C 00 90 AD |         if_z    jmp     #.intf
41d68     80 73 C7 FA |                 rdbyte  htmp, ptrb
41d6c     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
41d70     D8 FF 9F FD |                 jmp     #.next_intf
41d74                 | .intf
41d74     00 90 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
41d78     00 92 07 F6 |                 mov     hpar3, #0
41d7c     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
41d80     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
41d84     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
41d88     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
41d8c                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
41d8c                 | 
41d8c                 | .endp
41d8c     80 73 C7 FA |                 rdbyte  htmp, ptrb
41d90     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
41d94     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
41d98     78 00 90 3D |         if_ae   jmp     #.get_device
41d9c     6E F3 03 F6 |                 mov     ptrb, hconfig_base
41da0     75 F3 03 F1 |                 add     ptrb, hnext_desc
41da4     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
41da8     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
41dac     64 00 90 AD |         if_z    jmp     #.get_device
41db0     05 72 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
41db4     04 00 90 AD |         if_z    jmp     #.get_ep
41db8     D0 FF 9F FD |                 jmp     #.endp
41dbc                 | .get_ep
41dbc     82 89 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
41dc0     07 88 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
41dc4     0F 88 67 F0 |                 shl     hr1, #8 + 7
41dc8     6C 73 03 F6 |                 mov     htmp, hctrl_ep_addr
41dcc     3F 00 00 FF 
41dd0     00 73 07 F5 |                 and     htmp, ##ADDR_MASK
41dd4     C4 73 43 F5 |                 or      htmp, hr1                       ' endpoint address
41dd8     00 90 0F F2 |                 cmp     hpar2, #0               wz
41ddc     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
41de0     00 92 0F F2 |                 cmp     hpar3, #0               wz
41de4     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
41de8     A0 FF 9F FD |                 jmp     #.endp
41dec                 | .in_ep
41dec     B9 91 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
41df0     84 8B C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
41df4                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
41df4     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
41df8     C3 8B DB F8 |                 setbyte hr2, hr0, #3
41dfc     8C FF 9F FD |                 jmp     #.endp
41e00                 | .out_ep
41e00     B9 93 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
41e04     84 8D C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
41e08                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
41e08     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
41e0c     C3 8D DB F8 |                 setbyte hr3, hr0, #3
41e10     78 FF 9F FD |                 jmp     #.endp
41e14                 | 
41e14                 | .get_device
41e14     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
41e18     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
41e1c     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
41e20     64 00 90 AD |         if_z    jmp     #.gamepad
41e24     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
41e28     A8 00 90 AD |         if_z    jmp     #.hub
41e2c     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
41e30     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
41e34     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
41e38     4C 00 90 AD |         if_z    jmp     #.gamepad
41e3c     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
41e40     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
41e44                 | .keyboard
41e44     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
41e48                 |         if HAVE_MOUSE
41e48     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
41e4c                 |         else
41e4c                 |         end
41e4c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
41e50     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
41e54     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
41e58     C5 71 FA F8 |                 getbyte kb_interval, hr2, #3
41e5c     C5 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
41e60     C8 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
41e64                 |                 'debug(udec(kb_intf_num))
41e64                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
41e64     E4 FE 9F FD |                 jmp     #.next_intf
41e68                 | if HAVE_MOUSE
41e68                 | .mouse
41e68     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
41e6c     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
41e70     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
41e74     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
41e78     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
41e7c                 |                 'getbyte ms_interval, hr2, #3
41e7c     C5 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
41e80     C8 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
41e84                 |                 'debug(udec(kb_intf_num))
41e84                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
41e84     C4 FE 9F FD |                 jmp     #.next_intf
41e88                 | end
41e88                 | .gamepad
41e88     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
41e8c     C8 73 63 F5 |                 xor     htmp, hpar2
41e90     3F 00 00 FF 
41e94     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
41e98     B0 FE 9F AD |         if_z    jmp     #.next_intf
41e9c                 |         if HAVE_MOUSE
41e9c     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
41ea0     C8 73 63 F5 |                 xor     htmp, hpar2
41ea4     3F 00 00 FF 
41ea8     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
41eac     9C FE 9F AD |         if_z    jmp     #.next_intf
41eb0                 |         end
41eb0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
41eb4     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
41eb8     90 FE 9F 5D |         if_nz   jmp     #.next_intf
41ebc                 | 
41ebc     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
41ec0     C5 7B FA F8 |                 getbyte gp_interval, hr2, #3
41ec4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
41ec8     C8 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
41ecc     C9 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
41ed0                 |                 'debug(udec(gp_intf_num))
41ed0                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
41ed0     78 FE 9F FD |                 jmp     #.next_intf
41ed4                 | .hub
41ed4     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
41ed8     70 FE 9F 5D |         if_nz   jmp     #.next_intf
41edc     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
41ee0     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
41ee4     64 FE 9F 5D |         if_nz   jmp     #.next_intf
41ee8     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
41eec     5C FE 9F 5D |         if_nz   jmp     #.next_intf
41ef0     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
41ef4     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
41ef8     C8 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
41efc     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
41f00     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
41f04     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
41f08                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
41f08     40 FE 9F FD |                 jmp     #.next_intf
41f0c                 | 
41f0c                 | '------------------------------------------------------------------------------
41f0c                 | ' If a newly-connected device is recognized, do whatever is needed to configure
41f0c                 | ' it according to its function, or functions. In the case of this boot protocol
41f0c                 | ' keyboard/mouse class driver:
41f0c                 | ' - SetConfiguration(config_num)
41f0c                 | ' - SetProtocol(boot)
41f0c                 | ' - SetIdle(indefinite)
41f0c                 | ' - Enter the device interrupt IN polling task stage.
41f0c                 | '------------------------------------------------------------------------------
41f0c                 | ' On entry:
41f0c                 | ' On exit:
41f0c                 | '------------------------------------------------------------------------------
41f0c                 | hset_config
41f0c                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
41f0c                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
41f0c     02 76 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
41f10     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
41f14     00 00 0C F2 |                 cmp     0-0, #0                 wz
41f18     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
41f1c                 |         if HAVE_MOUSE
41f1c     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
41f20                 |         end
41f20     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
41f24     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
41f28                 | .set_config
41f28     7C 0E D0 FE |                 loc     ptra, #set_config
41f2c     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
41f30     6E ED 03 F1 |                 add     pa, hconfig_base
41f34     F6 8F C3 FA |                 rdbyte  hpar1, pa
41f38     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
41f3c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
41f40     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
41f44     A0 02 A0 FD |                 call    #control_write
41f48     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41f4c     2D 00 64 5D |         if_nz   ret
41f50                 | .kbd_config
41f50     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
41f54     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
41f58                 | 
41f58     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
41f5c     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
41f60     3F 00 00 FF 
41f64     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
41f68     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
41f6c                 | 
41f6c     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
41f70     44 0E D0 FE |                 loc     ptra, #set_protocol
41f74     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
41f78     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
41f7c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
41f80     A0 02 A0 FD |                 call    #control_write
41f84     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41f88     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
41f8c     E4 02 90 5D |         if_nz   jmp     #.notify_client
41f90     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
41f94     37 91 E3 F8 |                 getbyte hpar2, kb_intf_num, #0
41f98     30 03 B0 FD |                 call    #hset_idle
41f9c                 |                 'cmp     retval, #PID_ACK        wz
41f9c                 |         'if_nz   mov     hkbd_ep_addr, #0
41f9c                 |         'if_nz   jmp     #.notify_client
41f9c     A9 99 02 F6 |                 mov     hctwait, _2ms_
41fa0     EF 02 A0 FD |                 call    #poll_waitx
41fa4     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
41fa8     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
41fac     A0 17 90 FE |                 loc     pa, #hkbd_led_rep
41fb0     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
41fb4     2C 03 B0 FD |                 call    #hset_kbdled_report
41fb8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41fbc     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
41fc0     B0 02 90 5D |         if_nz   jmp     #.notify_client
41fc4     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
41fc8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
41fcc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
41fd0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
41fd4     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
41fd8     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
41fdc     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
41fe0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
41fe4     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
41fe8     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
41fec     03 76 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
41ff0                 |         if !!HAVE_MOUSE
41ff0                 |         end
41ff0                 | 
41ff0                 | .mouse_config
41ff0                 | if HAVE_MOUSE
41ff0     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
41ff4     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
41ff8     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
41ffc     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
42000     3F 00 00 FF 
42004     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
42008     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
4200c                 | 
4200c                 |                 debug("mouse passed addr check")
4200c                 | 
4200c     C0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
42010     00 00 80 FF 
42014     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
42018     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
4201c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
42020     55 02 A0 FD |                 call    #control_read
42024     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
42028     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
4202c     44 02 90 5D |         if_nz   jmp     #.notify_client
42030     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
42034     56 01 00 F6 |                 mov     0-0, total_data
42038     1B 01 A0 FD |                 call    #get_hid_descr_buffer
4203c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
4203c                 | 
4203c     35 73 E3 F8 |                 getbyte htmp, ms_intf_num, #0
42040     74 0D D0 FE |                 loc     ptra, #set_protocol
42044     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
42048     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
4204c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
42050     A0 02 A0 FD |                 call    #control_write
42054     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
42058     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
4205c     14 02 90 5D |         if_nz   jmp     #.notify_client
42060                 |                 debug("mouse passed SetProtocol")
42060     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
42064     35 91 E3 F8 |                 getbyte hpar2, ms_intf_num, #0
42068     60 02 B0 FD |                 call    #hset_idle
4206c                 |                 'cmp     retval, #PID_ACK        wz
4206c                 |         'if_nz   mov     hmouse_ep_addr, #0
4206c                 |         'if_nz   jmp     #.notify_client
4206c                 |                 debug("mouse passed SetIdle")
4206c     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
42070     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
42074     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
42078     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
4207c     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
42080     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
42084     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
42088     79 77 03 F6 |                 mov     htmp2, hkbd_ep_addr
4208c     7A 77 63 F5 |                 xor     htmp2, hmouse_ep_addr
42090     3F 00 00 FF 
42094     00 77 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
42098     05 76 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
4209c     04 76 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
420a0     D0 01 90 FD |                 jmp     #.notify_client
420a4                 | end
420a4                 | .gamepad_config
420a4                 | if _HAVE_GAMEPAD
420a4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
420a8     00 00 0C F2 |                 cmp     0-0, #0                 wz
420ac     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
420b0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
420b4     00 72 03 F6 |                 mov     htmp, 0-0
420b8     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
420bc     3F 00 00 FF 
420c0     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
420c4     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
420c8                 | 
420c8     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
420cc     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
420d0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
420d4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
420d8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
420dc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
420e0     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
420e4     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
420e8     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
420ec     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
420f0     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
420f4     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
420f8     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
420fc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
42100                 | 
42100                 |                 if EMUPAD_MAX_PLAYER > 0
42100                 |                 
42100                 | .rule_loop           
42100                 |                 end
42100                 | 
42100     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
42104     5C 00 90 AD |         if_e    jmp     #.xinput
42108     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
4210c     00 72 03 F6 |                 mov     htmp,0-0
42110     01 A6 02 FF 
42114     68 72 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
42118     7C 00 90 AD |         if_e    jmp     #.ps3
4211c                 | 
4211c     B0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
42120     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
42124     00 00 80 5F 
42128     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
4212c     03 00 80 AF 
42130     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
42134     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
42138     1B 01 A0 FD |                 call    #get_hid_descr_buffer
4213c     55 02 A0 FD |                 call    #control_read
42140     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
42144     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
42148     00 00 04 56 |         if_nz   mov     0-0, #0
4214c     24 01 90 5D |         if_nz   jmp     #.notify_client
42150     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
42154     56 01 00 F6 |                 mov     0-0, total_data
42158     1B 01 A0 FD |                 call    #get_hid_descr_buffer
4215c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
4215c                 | 
4215c     06 76 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
42160     10 01 90 FD |                 jmp     #.notify_client
42164                 | .xinput
42164     C4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
42168     2D EF 03 F6 |                 mov     pb,hdev_port
4216c     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
42170     03 EE 27 F3 |                 fle     pb,#3
42174     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
42178     02 EF 47 FC |                 wrbyte  pb, ptra[2]
4217c                 | 
4217c     03 B0 06 F6 |                 mov     pkt_data, #3
42180     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
42184     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
42188     5A 00 A0 FD |                 call    #txn_out
4218c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
42190                 | 
42190     07 76 07 F6 |                 mov     htmp2, #XINPUT_READY
42194     DC 00 90 FD |                 jmp     #.notify_client
42198                 | .ps3
42198     60 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
4219c     2D EF 03 F6 |                 mov     pb,hdev_port
421a0     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
421a4     04 EE 27 F3 |                 fle     pb,#4
421a8     F7 EF C3 F9 |                 decod   pb
421ac     09 EF 47 FC |                 wrbyte  pb, ptra[9]
421b0                 | 
421b0     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
421b4     10 0C D0 FE |                 loc     ptra, #set_report
421b8     01 00 80 FF 
421bc     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
421c0     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
421c4     03 61 5C FC |                 wrword  #48, ptra[wLength]
421c8     30 0C B0 FE |                 loc     pb, #ps3_command_buff
421cc     A0 02 A0 FD |                 call    #control_write
421d0                 | 
421d0     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
421d4     F0 0B D0 FE |                 loc     ptra, #set_report
421d8     01 00 80 FF 
421dc     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
421e0     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
421e4     03 09 5C FC |                 wrword  #4, ptra[wLength]
421e8     0C 0C B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
421ec     A0 02 A0 FD |                 call    #control_write
421f0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
421f4     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
421f8     00 00 04 56 |         if_nz   mov     0-0, #0
421fc     74 00 90 5D |         if_nz   jmp     #.notify_client
42200                 | 
42200     08 76 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
42204     6C 00 90 FD |                 jmp     #.notify_client
42208                 | end
42208                 | 
42208                 | .hub_config
42208     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
4220c     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
42210     77 73 03 F6 |                 mov     htmp, hhub_ep_addr
42214     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
42218     3F 00 00 FF 
4221c     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
42220     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
42224                 | 
42224     B0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
42228     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
4222c     26 EF 03 F6 |                 mov     pb, hub_descr_p
42230     55 02 A0 FD |                 call    #control_read
42234     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
42238     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
4223c     34 00 90 5D |         if_nz   jmp     #.notify_client
42240                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
42240                 | 
42240     26 F1 03 F6 |                 mov     ptra, hub_descr_p
42244     02 79 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
42248     07 78 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
4224c                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
4224c                 | .pwr_loop
4224c     90 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
42250     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
42254     02 79 57 FC |                 wrword  htmp3, ptra[wIndex]
42258     A0 02 A0 FD |                 call    #control_write
4225c     FB 79 6F FB |                 djnz    htmp3, #.pwr_loop
42260                 | 
42260     B2 99 02 F6 |                 mov     hctwait, _500ms_
42264     B1 99 02 F1 |                 add     hctwait, _100ms_
42268     EF 02 A0 FD |                 call    #poll_waitx
4226c                 | 
4226c     09 76 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
42270     00 00 90 FD |                 jmp     #.notify_client
42274                 | 
42274                 | .notify_client
42274     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
42278     BB 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
4227c                 |                 debug(uhex_long(hdev_type,hdev_type+1))
4227c                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
4227c     2D 00 64 FD |                 ret
42280                 | 
42280                 | '------------------------------------------------------------------------------
42280                 | ' Initialize the keyboard/mouse data area to start-up values.
42280                 | '------------------------------------------------------------------------------
42280                 | ' On entry:
42280                 | ' On exit:
42280                 | '------------------------------------------------------------------------------
42280                 | init_kbdm_data
42280     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
42284     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
42288                 | 
42288     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
4228c     2B ED 03 F6 |                 mov     pa, cache_end_p
42290                 | .loop
42290     61 01 4C FC |                 wrbyte  #0, ptra++
42294     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
42298     F4 FF 9F CD |         if_b    jmp     #.loop
4229c                 |         
4229c                 |         if EMUPAD_MAX_PLAYER > 0
4229c                 |         end
4229c                 | 
4229c                 | 
4229c     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
422a0                 | .regloop
422a0     00 EC 8F F9 |                 altd    pa
422a4     00 00 04 F6 |                 mov     0-0, #0
422a8     01 EC 07 F1 |                 add     pa, #1
422ac     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
422b0     EC FF 9F 5D |         if_nz   jmp     #.regloop
422b4                 | 
422b4     E1 E1 61 FF 
422b8     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
422bc     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
422c0     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
422c4     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
422c8                 | 
422c8     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
422cc                 | 
422cc                 | '------------------------------------------------------------------------------
422cc                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
422cc                 | ' function.
422cc                 | '------------------------------------------------------------------------------
422cc                 | ' On entry:
422cc                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
422cc                 | '   hpar2 - index number of the target interface.
422cc                 | ' On exit:
422cc                 | '------------------------------------------------------------------------------
422cc                 | hset_idle
422cc     A9 99 02 F6 |                 mov     hctwait, _2ms_
422d0     EF 02 A0 FD |                 call    #poll_waitx
422d4     E8 0A D0 FE |                 loc     ptra, #set_idle
422d8     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]
422dc     02 91 57 FC |                 wrword  hpar2, ptra[wIndex]
422e0     A0 02 80 FD |                 jmp     #control_write
422e4                 | 
422e4                 | '------------------------------------------------------------------------------
422e4                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
422e4                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
422e4                 | '------------------------------------------------------------------------------
422e4                 | ' On entry:
422e4                 | '   ep_addr_pid - device address and enpoint for the request.
422e4                 | ' On exit:
422e4                 | '   retval - transaction result.
422e4                 | '------------------------------------------------------------------------------
422e4                 | hset_kbdled_report
422e4     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
422e8     DC 0A D0 FE |                 loc     ptra, #set_report
422ec     01 00 80 FF 
422f0     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
422f4     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
422f8     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
422fc     27 EF 03 F6 |                 mov     pb, urx_buff_p
42300     F7 77 42 FC |                 wrbyte  kb_led_states, pb
42304     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
42308                 | 
42308                 | '------------------------------------------------------------------------------
42308                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
42308                 | '------------------------------------------------------------------------------
42308                 | ' On entry:
42308                 | ' On exit:
42308                 | '------------------------------------------------------------------------------
42308                 | hget_kbd_in_report
42308     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
4230c     27 91 03 F6 |                 mov     hpar2, urx_buff_p
42310     30 93 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
42314     39 93 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
42318     CF 02 A0 FD |                 call    #do_int_in
4231c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
42320     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
42324                 | 
42324     00 92 0F F2 |                 cmp     hpar3, #0               wz
42328     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
4232c                 | 
4232c     30 73 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
42330     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
42334     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
42338     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
4233c                 | 
4233c     C9 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
42340     18 00 B0 FD |                 call    #hkbd_compare
42344                 |         if EMUPAD_MAX_PLAYER > 0
42344                 |         end
42344                 | 
42344                 | .led_check
42344     3B 73 03 F6 |                 mov     htmp, kb_led_states
42348     B9 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
4234c     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
42350     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
42354     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
42358     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
4235c                 | 
4235c                 | '------------------------------------------------------------------------------
4235c                 | ' Compare current and previous keyboard data buffers for keypress changes.
4235c                 | '------------------------------------------------------------------------------
4235c                 | hkbd_compare
4235c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
42360     E4 13 F0 FE |                 loc     ptrb, #hkbd_report
42364     61 75 07 FB |                 rdlong  htmp1, ptra++
42368     E1 77 07 FB |                 rdlong  htmp2, ptrb++
4236c     BB 75 0B F2 |                 cmp     htmp1, htmp2    wz
42370     61 75 07 FB |                 rdlong  htmp1, ptra++
42374     E1 77 07 FB |                 rdlong  htmp2, ptrb++
42378     BB 75 0B A2 |         if_z    cmp     htmp1, htmp2    wz
4237c     2D 00 64 AD |         if_z    ret
42380                 | 
42380     C4 13 D0 FE |                 loc     ptra, #hkbd_report
42384                 | 
42384                 |                 ' Handle modifiers
42384     27 91 C3 FA |                 rdbyte  hpar2, urx_buff_p
42388     00 89 C7 FA |                 rdbyte  hr1, ptra
4238c     C8 89 43 F9 |                 rolword hr1,hpar2,#0
42390     63 88 63 FD |                 mergew  hr1
42394     08 EC 07 F6 |                 mov     pa,#8
42398                 | .modloop
42398     6A 88 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
4239c     E8 8E 07 F6 |                 mov     hpar1,#$E8
423a0     F6 8F 83 F1 |                 sub     hpar1,pa
423a4     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
423a8     FB ED 6F FB |                 djnz    pa,#.modloop
423ac                 | 
423ac     6F E0 75 FD | .release        modc    _set    wc
423b0                 |                 'alts    hdev_port, #hid_report_p
423b0                 |                 'mov     ptra, hid_report_p
423b0     02 F0 07 F1 |                 add     ptra, #2
423b4     06 EC 07 F6 |                 mov     pa, #6
423b8     61 8F CF FA | .rl1            rdbyte  hpar1, ptra++   wz
423bc     20 00 90 AD |         if_z    jmp     #.rl3
423c0     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
423c4     02 F2 07 F1 |                 add     ptrb, #2
423c8     06 EE 07 F6 |                 mov     pb, #6
423cc     E1 73 C7 FA | .rl2            rdbyte  htmp, ptrb++
423d0     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
423d4     08 00 90 AD |         if_z    jmp     #.rl3
423d8     FC EF 6F FB |                 djnz    pb, #.rl2
423dc     68 00 B0 FD |                 call    #hkbd_translate
423e0     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
423e4                 | 
423e4     00 92 07 F6 |                 mov     hpar3, #0
423e8     1F 92 27 F4 |                 bith    hpar3, #31
423ec                 | 
423ec     6F 00 74 FD | .press          modc    _clr    wc
423f0     27 F1 03 F6 |                 mov     ptra, urx_buff_p
423f4     02 F0 07 F1 |                 add     ptra, #2
423f8     06 EC 07 F6 |                 mov     pa, #6
423fc     61 8F CF FA | .pl1            rdbyte  hpar1, ptra++   wz
42400     20 00 90 AD |         if_z    jmp     #.pl3
42404     40 13 F0 FE |                 loc     ptrb, #hkbd_report
42408     02 F2 07 F1 |                 add     ptrb, #2
4240c     06 EE 07 F6 |                 mov     pb, #6
42410     E1 73 C7 FA | .pl2            rdbyte  htmp, ptrb++
42414     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
42418     08 00 90 AD |         if_z    jmp     #.pl3
4241c     FC EF 6F FB |                 djnz    pb, #.pl2
42420     24 00 B0 FD |                 call    #hkbd_translate
42424     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
42428                 | 
42428     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
4242c     18 13 F0 FE |                 loc     ptrb, #hkbd_report
42430     28 02 64 FD |                 setq #1
42434     61 75 07 FB |                 rdlong  htmp1, ptra++
42438     28 02 64 FD |                 setq #1
4243c     E1 75 67 FC |                 wrlong  htmp1, ptrb++
42440     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
42444                 | 
42444     2D 00 64 FD |                 ret
42448                 | 
42448                 | '------------------------------------------------------------------------------
42448                 | ' Translate keyboard scancode to ASCII
42448                 | '------------------------------------------------------------------------------
42448                 | ' On entry:
42448                 | '   hpar1 - scancode
42448                 | '   hpar2 - key modifiers state
42448                 | '       c - pressed (0) or released (1) flag
42448                 | ' On exit:
42448                 | '   hpar1 - bit     31 = 0 pressed, 1 released
42448                 | '               30..17 = unused
42448                 | '                   18 = scroll-lock state 
42448                 | '                   17 = caps-lock state
42448                 | '                   16 = num-lock state 
42448                 | '                15..8 = key modifiers state
42448                 | '                 7..0 = scancode
42448                 | '------------------------------------------------------------------------------
42448                 | hkbd_translate
42448     39 8E 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
4244c     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
42450     53 8E 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
42454     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
42458     47 8E 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
4245c     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
42460                 | 
42460                 |         if EMUPAD_MAX_PLAYER > 0
42460                 | 
42460                 |         if EMUPAD_BT0_BIT >= 0
42460                 |         end
42460                 |         if EMUPAD_BT1_BIT >= 0
42460                 |         end
42460                 |         if EMUPAD_BT2_BIT >= 0
42460                 |         end
42460                 |         if EMUPAD_BT3_BIT >= 0
42460                 |         end
42460                 |         if EMUPAD_BT4_BIT >= 0
42460                 |         end
42460                 |         if EMUPAD_BT5_BIT >= 0
42460                 |         end
42460                 |         if EMUPAD_BT6_BIT >= 0
42460                 |         end
42460                 |         if EMUPAD_BT7_BIT >= 0
42460                 |         end
42460                 |         if EMUPAD_BT8_BIT >= 0
42460                 |         end
42460                 |         if EMUPAD_BT9_BIT >= 0
42460                 |         end
42460                 | 
42460                 |         end
42460     C8 8F CB F8 |                 setbyte hpar1, hpar2, #1
42464     7C 8F D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
42468     1F 8E 47 F4 |                 bitc    hpar1, #31
4246c                 |         if KEYQUEUE_SIZE > 0
4246c     D4 09 B0 FE |                 loc pb,#keyq_head
42470     F7 73 E3 FA |                 rdword htmp,pb
42474     B9 75 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
42478     B9 73 E3 F8 |                 getbyte htmp,htmp,#0 ' head
4247c     B9 77 03 F6 |                 mov htmp2,htmp
42480     04 76 07 FA |                 mul htmp2,#4
42484     F7 77 03 F1 |                 add htmp2,pb
42488     02 76 07 F1 |                 add htmp2,#2
4248c     7F 72 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
42490     B9 75 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
42494     BB 8F 63 5C |         if_nz   wrlong hpar1,htmp2
42498     F7 73 43 5C |         if_nz   wrbyte htmp,pb
4249c                 |         end
4249c     2D 00 7C FD |                 ret wcz
424a0                 | 
424a0                 | if HAVE_MOUSE
424a0                 | '------------------------------------------------------------------------------
424a0                 | ' Execute an IN interrupt transaction to poll for mouse activity.
424a0                 | '------------------------------------------------------------------------------
424a0                 | ' On entry:
424a0                 | ' On exit:
424a0                 | '------------------------------------------------------------------------------
424a0                 | hget_mouse_in_report
424a0     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
424a4     27 91 03 F6 |                 mov     hpar2, urx_buff_p
424a8     30 93 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
424ac     36 93 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
424b0     CF 02 A0 FD |                 call    #do_int_in
424b4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
424b8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
424bc                 | 
424bc     00 92 0F F2 |                 cmp     hpar3, #0               wz
424c0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
424c4                 | 
424c4     30 73 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
424c8     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
424cc     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
424d0     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
424d4                 | 
424d4     27 F1 03 F6 |                 mov     ptra, urx_buff_p
424d8     05 92 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
424dc     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
424e0     01 92 87 31 |         if_ae   sub     hpar3, #1
424e4                 | 
424e4     50 09 90 FE |                 loc     pa, #mouse_limits
424e8     65 13 F0 FE |                 loc     ptrb, #mouse_xacc
424ec                 | 
424ec                 |                 ' load xacc,yacc,zacc
424ec     28 04 64 FD |                 setq    #3-1
424f0     80 89 07 FB |                 rdlong  hr1,ptrb
424f4                 |                 ' load limits and outptr
424f4     28 04 64 FD |                 setq    #3-1
424f8     F6 75 03 FB |                 rdlong  htmp1,pa
424fc                 | 
424fc     61 73 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
42500     8C 73 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
42504     00 72 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
42508     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
4250c     01 72 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
42510     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
42514     02 72 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
42518     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
4251c                 |               
4251c                 | 
4251c     61 73 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
42520     07 72 67 F7 |                 signx   htmp, #7
42524     B9 89 03 F1 |                 add     hr1,htmp
42528     00 74 0F F2 |                 cmp     htmp1,#0 wz
4252c     BA 89 63 53 |         if_ne   fles    hr1,htmp1
42530     00 88 47 53 |         if_ne   fges    hr1,#0
42534                 | 
42534     61 73 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
42538     07 72 67 F7 |                 signx   htmp, #7
4253c     B9 8B 03 F1 |                 add     hr2,htmp
42540     00 76 0F F2 |                 cmp     htmp2,#0 wz
42544     BB 8B 63 53 |         if_ne   fles    hr2,htmp2
42548     00 8A 47 53 |         if_ne   fges    hr2,#0
4254c                 |                 
4254c                 | 
4254c     04 92 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
42550     00 73 C7 AA |         if_z    rdbyte  htmp, ptra
42554     07 72 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
42558     B9 8D 03 A1 |         if_z    add     hr3,htmp
4255c                 | 
4255c     90 73 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
42560     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
42564                 | 
42564                 |                 ' write back accumulators
42564     28 04 64 FD |                 setq    #3-1
42568     80 89 67 FC |                 wrlong  hr1,ptrb
4256c                 |                 ' if outptr set, write X/Y words
4256c     00 78 0F F2 |                 cmp htmp3,#0                    wz
42570     C5 89 2B 59 |         if_nz   setword hr1,hr2,#1
42574     BC 89 63 5C |         if_nz   wrlong hr1,htmp3
42578     2D 00 64 FD |                 ret
4257c                 | end
4257c                 | 
4257c                 | '------------------------------------------------------------------------------
4257c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
4257c                 | '------------------------------------------------------------------------------
4257c                 | ' On entry:
4257c                 | ' On exit:
4257c                 | '------------------------------------------------------------------------------
4257c                 | if _HAVE_GAMEPAD
4257c                 | hget_gp_in_report
4257c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
42580     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
42584                 | 
42584     27 91 03 F6 |                 mov     hpar2, urx_buff_p
42588     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
4258c     00 92 E3 F8 |                 getbyte hpar3
42590     FF 92 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
42594     CF 02 A0 FD |                 call    #do_int_in
42598     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
4259c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
425a0                 | 
425a0     00 92 0F F2 |                 cmp     hpar3, #0               wz
425a4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
425a8                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
425a8                 | 
425a8     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
425ac     00 72 E3 F8 |                 getbyte htmp                            ' |
425b0     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
425b4     4B 72 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
425b8     C3 72 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
425bc     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
425c0     B9 01 C0 F8 |                 setbyte htmp                            ' |
425c4                 | 
425c4                 | ' Note: the following code compares the current and previous reports
425c4                 | ' and process the data if there are changes to ease the debug output.
425c4                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
425c4                 | ' gpPreReport buffer.
425c4                 | 
425c4                 |                 ' ----- start of block to remove
425c4                 |                 {
425c4                 |                 }
425c4                 |                 ' ----- end of block to remove
425c4     04 05 90 FE |                 loc pa,#hpad_translate
425c8     2A EC 63 FD |                 push pa
425cc                 | 
425cc                 |                 ' FALL THROUGH !!!!
425cc                 | 
425cc                 | '------------------------------------------------------------------------------
425cc                 | ' Decode controller report
425cc                 | '------------------------------------------------------------------------------
425cc                 | hid_decode
425cc                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
425cc     28 20 64 FD |                 setq #(hidr_end-hidr_start)-1
425d0     00 04 00 FF 
425d4     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
425d8                 | 
425d8     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
425dc                 | 
425dc     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
425e0     00 1C E3 F8 |                 getbyte hidr_type
425e4     07 1C 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
425e8     44 02 90 AD |         if_z    jmp     #hpad_xinput
425ec     08 1C 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
425f0     2C 03 90 AD |         if_z    jmp     #hpad_ps3
425f4     05 1C 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
425f8     04 1C 07 A6 |         if_z    mov     hidr_type,#M_READY
425fc     04 1C 0F F2 |                 cmp     hidr_type, #M_READY             wz
42600                 |                 
42600                 | 
42600                 | '------------------------------------------------------------------------------
42600                 | ' Handle HID controller (or mouse now
42600                 | ' On entry:
42600                 | '   ptrb - controller report
42600                 | '------------------------------------------------------------------------------
42600                 | hpad_hid
42600     1B 01 A0 FD |                 call    #get_hid_descr_buffer
42604     F7 F1 03 F6 |                 mov     ptra, pb
42608     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
4260c     00 EC 03 F6 |                 mov     pa, 0-0
42610                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
42610     19 2A 3B FF 
42614     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
42618                 | 
42618                 | .next
42618     00 EC 5F F2 |                 cmps    pa, #0      wcz
4261c     2D 00 7C ED |         if_be   ret     wcz
42620                 | 
42620     61 8F C7 FA |                 rdbyte  hpar1, ptra++
42624     01 EC 87 F1 |                 sub     pa, #1
42628     00 90 07 F6 |                 mov     hpar2, #0
4262c                 | 
4262c     C7 73 03 F6 |                 mov     htmp, hpar1
42630     03 72 07 F5 |                 and     htmp, #$03
42634     01 72 0F F2 |                 cmp     htmp, #1    wz
42638     61 91 C7 AA |         if_z    rdbyte  hpar2, ptra++
4263c     07 90 67 A7 |         if_z    signx   hpar2,#7
42640     01 EC 87 A1 |         if_z    sub     pa, #1
42644     02 72 0F F2 |                 cmp     htmp, #2    wz
42648     61 91 E7 AA |         if_z    rdword  hpar2, ptra++
4264c     0F 90 67 A7 |         if_z    signx   hpar2,#15
42650     02 EC 87 A1 |         if_z    sub     pa, #2
42654     03 72 0F F2 |                 cmp     htmp, #3    wz
42658     61 91 07 AB |         if_z    rdlong  hpar2, ptra++
4265c     04 EC 87 A1 |         if_z    sub     pa, #4
42660                 | 
42660     FC 8E 07 F5 |                 and     hpar1, #$FC
42664                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
42664                 | 
42664     84 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
42668     18 01 90 AD |         if_z    jmp     #.report_id
4266c     04 8E 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
42670     30 01 90 AD |         if_z    jmp     #.usage_page
42674     08 8E 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
42678     38 01 90 AD |         if_z    jmp     #.usage
4267c     14 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
42680     C8 2B 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
42684     24 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
42688     C8 2B 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
4268c     34 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
42690     C8 2D 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
42694     44 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
42698     C8 2D 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
4269c     74 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
426a0     C8 27 03 A6 |         if_z    mov     hidr_size, hpar2
426a4     94 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
426a8     C8 29 03 A6 |         if_z    mov     hidr_count, hpar2
426ac     B4 8E 1F F2 |                 cmp     hpar1, #HID_POP wcz
426b0     A4 8E 0F 52 |         if_nz   cmp     hpar1, #HID_PUSH wz
426b4     60 01 90 AD |         if_z    jmp     #.pushpop ' Entering with C set if PUSH  
426b8     80 8E 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
426bc     58 FF 9F 5D |         if_nz   jmp     #.next
426c0                 | 
426c0     D5 25 A7 FB |                 tjf     hidr_state,#.next
426c4                 | 
426c4     03 90 07 F5 |                 and     hpar2, #$03
426c8     02 90 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
426cc     18 00 90 5D |         if_nz   jmp     #.skip
426d0                 | 
426d0     02 24 0F F2 |                 cmp     hidr_state, #2  wz
426d4     20 00 90 AD |         if_z    jmp     #.axes
426d8     03 24 0F F2 |                 cmp     hidr_state, #3  wz
426dc     5C 00 90 AD |         if_z    jmp     #.hats
426e0     04 24 0F F2 |                 cmp     hidr_state, #4  wz
426e4     70 00 90 AD |         if_z    jmp     #.buttons
426e8                 | .skip
426e8     93 73 03 F6 |                 mov     htmp, hidr_size
426ec     94 73 03 FA |                 mul     htmp, hidr_count
426f0     B9 21 03 F1 |                 add     hidr_offset, htmp
426f4     20 FF 9F FD |                 jmp     #.next
426f8                 | .axes
426f8                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
426f8     87 87 53 F8 |                 getnib  hr0, hidr_flags, #2
426fc     94 89 03 F6 |                 mov     hr1, hidr_count
42700                 | .l1
42700     90 8F 03 F6 |                 mov     hpar1, hidr_offset
42704     93 91 03 F6 |                 mov     hpar2, hidr_size
42708     08 03 B0 FD |                 call    #hpad_getbits
4270c     68 03 B0 FD |                 call    #hpad_normalize
42710     08 86 1F F2 |                 cmp     hr0, #8         wcz
42714     86 87 5F C9 |         if_b    altgn   hr0, #hidr_usage
42718     00 8A 43 C8 |         if_b    getnib  hr2
4271c     88 8B 77 C9 |         if_b    altsw   hr2, #hidr_axis
42720     5F 01 20 C9 |         if_b    setword retval
42724     01 86 07 C1 |         if_b    add     hr0, #1
42728     93 21 03 F1 |                 add     hidr_offset, hidr_size
4272c     F4 89 6F FB |                 djnz    hr1, #.l1
42730                 | 
42730     C3 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
42734     01 24 07 F6 |                 mov     hidr_state, #1
42738     DC FE 9F FD |                 jmp     #.next
4273c                 | .hats
4273c                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
4273c     90 8F 03 F6 |                 mov     hpar1, hidr_offset
42740     93 91 03 F6 |                 mov     hpar2, hidr_size
42744     CC 02 B0 FD |                 call    #hpad_getbits
42748     5F 1B C3 F8 |                 setbyte hidr_hats, retval, #0
4274c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
42750     01 24 07 F6 |                 mov     hidr_state, #1
42754     90 FF 9F FD |                 jmp     #.skip
42758                 | .buttons
42758                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
42758     90 8F 03 F6 |                 mov     hpar1, hidr_offset
4275c     93 91 03 F6 |                 mov     hpar2, hidr_size
42760     94 91 03 FA |                 mul     hpar2, hidr_count
42764     AC 02 B0 FD |                 call    #hpad_getbits
42768     87 73 E3 F8 |                 getbyte htmp, hidr_flags, #0
4276c     B9 BF 62 F0 |                 shl     retval, htmp
42770     5F 19 43 F5 |                 or      hidr_buttons, retval
42774     94 73 03 F1 |                 add     htmp, hidr_count
42778     B9 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
4277c     01 24 07 F6 |                 mov     hidr_state, #1
42780     64 FF 9F FD |                 jmp     #.skip
42784                 | .report_id
42784     00 1E 0F F2 |                 cmp     hidr_id, #0     wz
42788     2D 00 7C 5D |         if_nz   ret     wcz
4278c     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
42790     C8 73 0B F2 |                 cmp     htmp, hpar2     wz
42794     B9 1F 03 A6 |         if_z    mov     hidr_id, htmp
42798     01 24 67 56 |         if_nz   neg     hidr_state,#1
4279c     01 F2 87 51 |         if_nz   sub     ptrb,#1
427a0     74 FE 9F FD |                 jmp     #.next
427a4                 | .usage_page
427a4     09 90 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
427a8     01 24 0F A2 |         if_z    cmp     hidr_state, #1  wz
427ac     04 24 07 A6 |         if_z    mov     hidr_state, #4
427b0     64 FE 9F FD |                 jmp     #.next
427b4                 | .usage
427b4     04 90 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
427b8     05 90 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
427bc     06 1C 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
427c0     01 24 07 A6 |         if_z    mov     hidr_state, #1
427c4     50 FE 9F AD |         if_z    jmp     #.next
427c8     02 90 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
427cc     04 1C 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
427d0     01 24 07 A6 |         if_z    mov     hidr_state, #1
427d4     40 FE 9F AD |         if_z    jmp     #.next
427d8     30 90 17 F2 |                 cmp     hpar2, #HID_USAGE_X     wc
427dc     38 90 97 32 |         if_nc   cmpr    hpar2, #HID_USAGE_WHEEL wc   
427e0     10 00 90 3D |         if_nc   jmp     #.usage_axis
427e4     39 90 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
427e8     01 24 0F A2 |         if_z    cmp     hidr_state, #1      wz
427ec     03 24 07 A6 |         if_z    mov     hidr_state, #3
427f0     24 FE 9F FD |                 jmp     #.next
427f4                 | .usage_axis
427f4     01 24 57 F2 |                 cmps    hidr_state, #1          wc
427f8     1C FE 9F CD |         if_b    jmp     #.next
427fc     86 23 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
42800     C8 01 00 F8 |                 setnib  hpar2
42804                 | 
42804     20 90 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
42808     C8 0F 23 F4 |                 bith    hidr_flags, hpar2
4280c                 | 
4280c     01 22 07 F1 |                 add     hidr_usage_idx, #1
42810     02 24 07 F6 |                 mov     hidr_state, #2
42814     00 FE 9F FD |                 jmp     #.next
42818                 | .pushpop
42818                 |                 ' Entering with C set if PUSH  
42818     38 0F B0 FE |                 loc     pb, #hid_stack
4281c     28 08 64 CD |         if_c    setq    #(hidr_end-hidr_state)-1
42820     F7 25 63 CC |         if_c    wrlong  hidr_state, pb
42824     28 08 64 3D |         if_nc   setq    #(hidr_end-hidr_state)-1
42828     F7 25 03 3B |         if_nc   rdlong  hidr_state, pb
4282c     E8 FD 9F FD |                 jmp     #.next
42830                 |         
42830                 | 
42830                 | '------------------------------------------------------------------------------
42830                 | ' Handle XInput controller
42830                 | ' On entry:
42830                 | '   ptrb - controller report
42830                 | '------------------------------------------------------------------------------
42830                 | '   Default implementation translates the report to a pseudo-defacto hid
42830                 | '   standard and jumps to hpad_translate for actions.
42830                 | '   Implementors may take specific actions for this kind of controller.
42830                 | '------------------------------------------------------------------------------
42830                 | hpad_xinput
42830     80 73 CF FA |                 rdbyte  htmp, ptrb      wz
42834     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
42838     81 73 C7 FA |                 rdbyte  htmp, ptrb[1]
4283c     14 72 0F F2 |                 cmp     htmp, #$14      wz
42840     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
42844                 | 
42844                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
42844                 | 
42844     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
42848     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
4284c                 | 
4284c     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
42850     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
42854     5F BF 22 F6 |                 not     retval
42858     5F 11 2B F9 |                 setword hidr_axis, retval, #1
4285c     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
42860     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
42864     5F BF 22 F6 |                 not     retval
42868     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
4286c                 | 
4286c     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
42870     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
42874     C0 BE 1E F2 |                 cmp     retval, #192    wcz
42878     06 18 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
4287c     F8 01 B0 FD |                 call    #hpad_normalize
42880     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
42884     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
42888     C0 BE 1E F2 |                 cmp     retval, #192    wcz
4288c     07 18 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
42890     E4 01 B0 FD |                 call    #hpad_normalize
42894     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
42898                 | 
42898     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
4289c     81 BF E6 FA |                 rdword  retval, ptrb[1]
428a0     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
428a4     00 18 47 F4 |                 bitc    hidr_buttons, #0
428a8     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
428ac     01 18 47 F4 |                 bitc    hidr_buttons, #1
428b0     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
428b4     02 18 47 F4 |                 bitc    hidr_buttons, #2
428b8     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
428bc     03 18 47 F4 |                 bitc    hidr_buttons, #3
428c0     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
428c4     04 18 47 F4 |                 bitc    hidr_buttons, #4
428c8     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
428cc     05 18 47 F4 |                 bitc    hidr_buttons, #5
428d0     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
428d4     08 18 47 F4 |                 bitc    hidr_buttons, #8
428d8     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
428dc     09 18 47 F4 |                 bitc    hidr_buttons, #9
428e0     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
428e4     0A 18 47 F4 |                 bitc    hidr_buttons, #10
428e8     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
428ec     0B 18 47 F4 |                 bitc    hidr_buttons, #11
428f0     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
428f4     0C 18 47 F4 |                 bitc    hidr_buttons, #12
428f8                 | 
428f8     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
428fc     5F 73 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
42900     7A BB 7A FF 
42904     0F 74 07 F6 |                 mov     htmp1, ##$F576_F40F
42908     F9 FF 7F FF 
4290c     12 77 07 F6 |                 mov     htmp2, ##$FFFF_F312
42910     BA 73 5F F9 |                 altgn   htmp, #htmp1
42914     00 72 43 F8 |                 getnib  htmp
42918     B9 1B C3 F8 |                 setbyte hidr_hats, htmp, #0
4291c                 | 
4291c     AC 01 90 FD |                 jmp     #hpad_translate
42920                 | 
42920                 | '------------------------------------------------------------------------------
42920                 | ' Handle PS3 controller
42920                 | ' On entry:
42920                 | '   ptrb - controller report
42920                 | '------------------------------------------------------------------------------
42920                 | '   Default implementation translates the report to a pseudo-defacto hid
42920                 | '   standard and jumps to hpad_translate for actions.
42920                 | '   Implementors may take specific actions for this kind of controller.
42920                 | '------------------------------------------------------------------------------
42920                 | hpad_ps3
42920     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
42924     01 72 0F F2 |                 cmp     htmp, #$01      wz
42928     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
4292c                 | 
4292c                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
4292c                 | 
4292c     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
42930     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
42934     40 01 B0 FD |                 call    #hpad_normalize
42938     5F 11 23 F9 |                 setword hidr_axis, retval, #0
4293c     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
42940     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
42944     30 01 B0 FD |                 call    #hpad_normalize
42948     5F 11 2B F9 |                 setword hidr_axis, retval, #1
4294c     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
42950     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
42954     20 01 B0 FD |                 call    #hpad_normalize
42958     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
4295c     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
42960     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
42964     10 01 B0 FD |                 call    #hpad_normalize
42968     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
4296c     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
42970     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
42974                 | 
42974     08 8E 07 F6 |                 mov     hpar1, #8
42978     13 90 07 F6 |                 mov     hpar2, #19
4297c     94 00 B0 FD |                 call    #hpad_getbits
42980                 | 
42980     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
42984     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
42988     00 18 47 F4 |                 bitc    hidr_buttons, #0
4298c     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
42990     01 18 47 F4 |                 bitc    hidr_buttons, #1
42994     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
42998     02 18 47 F4 |                 bitc    hidr_buttons, #2
4299c     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
429a0     03 18 47 F4 |                 bitc    hidr_buttons, #3
429a4     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
429a8     04 18 47 F4 |                 bitc    hidr_buttons, #4
429ac     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
429b0     05 18 47 F4 |                 bitc    hidr_buttons, #5
429b4     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
429b8     06 18 47 F4 |                 bitc    hidr_buttons, #6
429bc     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
429c0     07 18 47 F4 |                 bitc    hidr_buttons, #7
429c4     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
429c8     08 18 47 F4 |                 bitc    hidr_buttons, #8
429cc     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
429d0     09 18 47 F4 |                 bitc    hidr_buttons, #9
429d4     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
429d8     0A 18 47 F4 |                 bitc    hidr_buttons, #10
429dc     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
429e0     0B 18 47 F4 |                 bitc    hidr_buttons, #11
429e4     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
429e8     0C 18 47 F4 |                 bitc    hidr_buttons, #12
429ec                 | 
429ec     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
429f0     5F 73 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
429f4     09 FA 79 FF 
429f8     0F 74 07 F6 |                 mov     htmp1, ##$F3F4_120F
429fc     FF FA 7F FF 
42a00     76 77 07 F6 |                 mov     htmp2, ##$FFF5_FF76
42a04     BA 73 5F F9 |                 altgn   htmp, #htmp1
42a08     00 72 43 F8 |                 getnib  htmp
42a0c     B9 1B C3 F8 |                 setbyte hidr_hats, htmp, #0
42a10                 | 
42a10     B8 00 90 FD |                 jmp     #hpad_translate
42a14                 | 
42a14                 | '------------------------------------------------------------------------------
42a14                 | ' Read bits from report data buffer
42a14                 | '------------------------------------------------------------------------------
42a14                 | ' On entry:
42a14                 | '   PTRB - report buffer
42a14                 | '   hpar1 - start bit
42a14                 | '   hpar2 - number of bits
42a14                 | ' On exit:
42a14                 | '   retval - bits
42a14                 | '------------------------------------------------------------------------------
42a14                 | hpad_getbits
42a14     C7 73 03 F6 |                 mov     htmp, hpar1
42a18     03 72 47 F0 |                 shr     htmp, #3        ' byte offset
42a1c     F9 73 03 F1 |                 add     htmp, ptrb
42a20     B9 BF 02 FB |                 rdlong  retval, htmp
42a24                 | 
42a24     C7 75 03 F6 |                 mov     htmp1, hpar1
42a28     07 74 07 F5 |                 and     htmp1, #$07     ' shift
42a2c     BA BF 42 F0 |                 shr     retval, htmp1
42a30                 | 
42a30     18 90 1F F2 |                 cmp     hpar2, #24      wcz
42a34     10 00 90 1D |         if_a    jmp     #.l1
42a38                 | 
42a38     C8 91 C3 F9 |                 decod   hpar2
42a3c     01 90 87 F1 |                 sub     hpar2, #1
42a40     C8 BF 02 F5 |                 and     retval, hpar2
42a44     2D 00 64 FD |                 ret
42a48                 | .l1
42a48     FF 7F 00 FF 
42a4c     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
42a50     03 72 07 F1 |                 add     htmp, #3
42a54     B9 77 03 FB |                 rdlong  htmp2, htmp
42a58     18 90 87 F1 |                 sub     hpar2, #24
42a5c     C8 91 C3 F9 |                 decod   hpar2
42a60     01 90 87 F1 |                 sub     hpar2, #1
42a64     BA 77 43 F0 |                 shr     htmp2, htmp1
42a68     C8 77 03 F5 |                 and     htmp2, hpar2
42a6c     18 76 67 F0 |                 shl     htmp2, #24
42a70     BB BF 42 F5 |                 or      retval, htmp2
42a74     2D 00 64 FD |                 ret
42a78                 | 
42a78                 | '------------------------------------------------------------------------------
42a78                 | ' Normalize value to signed word (-32768 / 32767)
42a78                 | '------------------------------------------------------------------------------
42a78                 | ' On entry:
42a78                 | '   retval - value to normalize
42a78                 | '   hidr_lminmax - min (word 1) max (word 0) value range
42a78                 | '   - or -
42a78                 | '   hidr_pminmax - min (word 1) max (word 0) value range
42a78                 | '   hidr_size - value bits length
42a78                 | ' On exit:
42a78                 | '   retval - normalized value
42a78                 | '------------------------------------------------------------------------------
42a78                 | hpad_normalize
42a78     95 73 0B F6 |                 mov     htmp, hidr_lminmax  wz
42a7c     96 73 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
42a80     2D 00 64 AD |         if_z    ret
42a84     B9 75 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
42a88     B9 73 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
42a8c     0F 74 77 F7 |                 signx   htmp1, #15      wc
42a90     FF 27 97 C9 |         if_c    alts    hidr_size, #511
42a94     00 BE 66 C7 |         if_c    signx   retval, #0-0
42a98     BA 73 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
42a9c     BA BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
42aa0     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
42aa4     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
42aa8     B9 73 53 F6 |                 abs     htmp            wc
42aac     1F BE 0E F4 |                 testb   retval, #31     wz
42ab0     5F BF 42 F6 |                 abs     retval
42ab4     B9 BF 12 FD |                 qdiv    retval, htmp
42ab8     18 BE 62 FD |                 getqx   retval
42abc     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
42ac0     C0 FF 7F FF 
42ac4     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
42ac8     2D 00 64 FD |                 ret
42acc                 | 
42acc                 | '------------------------------------------------------------------------------
42acc                 | ' Perform controller actions
42acc                 | ' On entry:
42acc                 | '    hidr_id        report id
42acc                 | '    hidr_axis      axis value (signed word, 2 axes per long)
42acc                 | '                      X = hidr_axis+0, #0
42acc                 | '                      Y = hidr_axis+0, #1
42acc                 | '                      Z = hidr_axis+1, #0
42acc                 | '                     RX = hidr_axis+1, #1
42acc                 | '                     RY = hidr_axis+2, #0
42acc                 | '                     RZ = hidr_axis+2, #1
42acc                 | '                     Sl = hidr_axis+3, #0
42acc                 | '                     Wh = hidr_axis+3, #1
42acc                 | '    hidr_buttons   buttons state (bits 0 to 31)
42acc                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
42acc                 | '
42acc                 | '                     -------3 -------2 -------1 -------0 byte
42acc                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
42acc                 | '    hidr_flags       xxxxxxxx_wsrrrzyx_hhhhaaaa_bbbbbbbb
42acc                 | '                              hlzyx||| |||||||| ++++++++ n. buttons
42acc                 | '                              |||||||| ||||++++--------- n. axes
42acc                 | '                              |||||||| ++++------------- n. hats
42acc                 | '                              ++++++++------------------ valid axes
42acc                 | '------------------------------------------------------------------------------
42acc                 | hpad_translate
42acc                 | 
42acc                 | 
42acc                 |         if HAVE_HIDPAD
42acc     98 0C F0 FE |                 loc     ptrb,#hidpad_report
42ad0     2D 73 0B F6 |                 mov     htmp,hdev_port          wz
42ad4     8F 73 03 A6 |         if_z    mov     htmp,hidr_id
42ad8     01 72 E7 F2 |                 cmpsub  htmp,#1
42adc     07 1E 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
42ae0     02 1E 17 52 |         if_nz   cmp     hidr_id, #2             wc
42ae4     2D 00 7C 3D |         if_ae   ret     wcz
42ae8     20 72 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
42aec     B9 F3 03 F1 |                 add     ptrb,htmp
42af0     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
42af4     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
42af8     28 0E 64 FD |                 setq    #8-1
42afc     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
42b00                 |         end
42b00                 | 
42b00                 | 
42b00                 |         if EMUPAD_MAX_PLAYER > 0
42b00                 | .emupad_no_hat
42b00                 |         if EMUPAD_BT0_BIT >= 0
42b00                 |         end
42b00                 |         if EMUPAD_BT1_BIT >= 0
42b00                 |         end
42b00                 |         if EMUPAD_BT2_BIT >= 0
42b00                 |         end
42b00                 |         if EMUPAD_BT3_BIT >= 0
42b00                 |         end
42b00                 |         if EMUPAD_BT4_BIT >= 0
42b00                 |         end
42b00                 |         if EMUPAD_BT5_BIT >= 0
42b00                 |         end
42b00                 |         if EMUPAD_BT6_BIT >= 0
42b00                 |         end
42b00                 |         if EMUPAD_BT7_BIT >= 0
42b00                 |         end
42b00                 |         if EMUPAD_BT8_BIT >= 0
42b00                 |         end
42b00                 |         if EMUPAD_BT9_BIT >= 0
42b00                 |         end
42b00                 | .emupad_slot_over
42b00                 |         end
42b00                 | 
42b00                 |         if 0
42b00                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
42b00                 | 
42b00                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
42b00                 | 
42b00                 |         end
42b00     2D 00 64 FD |                 ret
42b04                 | end
42b04                 | 
42b04                 | if EMUPAD_MAX_PLAYER > 0
42b04                 | '------------------------------------------------------------------------------
42b04                 | ' Clear EmuPad state
42b04                 | '------------------------------------------------------------------------------
42b04                 | emupad_reset
42b04                 | 
42b04                 | '------------------------------------------------------------------------------
42b04                 | ' Get EmuPad Player number for current device (into retval)
42b04                 | ' Z flag is also set if current device is valid
42b04                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
42b04                 | '------------------------------------------------------------------------------
42b04                 | emupad_getnum
42b04                 | .loop
42b04                 | '------------------------------------------------------------------------------
42b04                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
42b04                 | '------------------------------------------------------------------------------
42b04                 | emupad_discon
42b04                 | .loop         
42b04                 |         
42b04                 |         ' FALL THROUGH!!!
42b04                 | 
42b04                 | '------------------------------------------------------------------------------
42b04                 | ' Update EmuPad reports (all of them...)
42b04                 | '------------------------------------------------------------------------------
42b04                 | emupad_write_reports
42b04                 | .devloop
42b04                 | 
42b04                 | end
42b04                 | 
42b04                 | 
42b04                 | '------------------------------------------------------------------------------
42b04                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
42b04                 | '------------------------------------------------------------------------------
42b04                 | ' On entry:
42b04                 | ' On exit:
42b04                 | '------------------------------------------------------------------------------
42b04                 | hget_hub_status
42b04     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
42b08     27 91 03 F6 |                 mov     hpar2, urx_buff_p
42b0c     32 93 23 F9 |                 setword hpar3, hub_next_datax, #0
42b10     01 92 2F F9 |                 setword hpar3, #1, #1
42b14     CF 02 A0 FD |                 call    #do_int_in
42b18     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
42b1c     0C 00 90 AD |         if_z    jmp     #.data
42b20     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
42b24     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
42b28     2D 00 64 FD |                 ret
42b2c                 | .data
42b2c     00 92 0F F2 |                 cmp     hpar3, #0               wz
42b30     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
42b34                 | 
42b34     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
42b38     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
42b3c     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
42b40     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
42b44                 |                 debug(ubin_long(hub_status_chg))
42b44                 | 
42b44     01 5A 06 F6 |                 mov     hdev_port, #1
42b48                 | .loop
42b48     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
42b4c     0C 00 B0 AD |         if_x1   call    #hub_port_handler
42b50     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
42b54     F0 FF 9F 3D |         if_nc   jmp     #.loop
42b58     2D 00 64 FD |                 ret
42b5c                 | 
42b5c                 | hub_port_handler
42b5c     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
42b60     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
42b64     27 EF 03 F6 |                 mov     pb, urx_buff_p
42b68     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
42b6c     55 02 A0 FD |                 call    #control_read
42b70     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
42b74                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
42b74                 | 
42b74     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
42b78     50 01 90 5D |         if_x0   jmp     #.other
42b7c     68 02 D0 FE |                 loc     ptra, #clr_port_feat
42b80     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
42b84     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
42b88     A0 02 A0 FD |                 call    #control_write
42b8c     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
42b90     7C 01 90 5D |         if_x0   jmp     #.disconnect
42b94     B1 99 02 F6 |                 mov     hctwait, _100ms_
42b98     EF 02 A0 FD |                 call    #poll_waitx
42b9c                 | 
42b9c     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
42ba0     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
42ba4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
42ba8     A0 02 A0 FD |                 call    #control_write
42bac                 | 
42bac     02 78 07 F6 |                 mov     htmp3, #2
42bb0                 | .wait_reset
42bb0     AD 99 02 F6 |                 mov     hctwait, _8ms_
42bb4     EF 02 A0 FD |                 call    #poll_waitx
42bb8     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
42bbc     27 EF 03 F6 |                 mov     pb, urx_buff_p
42bc0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
42bc4     55 02 A0 FD |                 call    #control_read
42bc8     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
42bcc     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
42bd0     F7 79 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
42bd4                 | 
42bd4     10 02 D0 FE |                 loc     ptra, #clr_port_feat
42bd8     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
42bdc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
42be0     A0 02 A0 FD |                 call    #control_write
42be4                 | 
42be4     24 72 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
42be8                 | .wait_recover
42be8     A8 99 02 F6 |                 mov     hctwait, _1ms_
42bec     EF 02 A0 FD |                 call    #poll_waitx
42bf0     FD 73 6F FB |                 djnz    htmp,#.wait_recover
42bf4                 | 
42bf4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
42bf8     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
42bfc     0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
42c00                 | 
42c00     00 08 00 FF 
42c04     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
42c08     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
42c0c     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
42c10     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
42c14     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
42c18     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
42c1c     48 01 90 5D |         if_nz   jmp     #.done
42c20                 | .get_dev_desc
42c20     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
42c24     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
42c28     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
42c2c     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
42c30     2D 73 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
42c34     01 73 57 FC |                 wrword  htmp, ptra[wValue]
42c38     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
42c3c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
42c40     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
42c44     AD 99 02 F6 |                 mov     hctwait, _8ms_
42c48     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
42c4c     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
42c50     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
42c54     BE 00 A0 FD |                 call    #calc_crc5
42c58     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
42c5c     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
42c60     F7 AD C2 FA |                 rdbyte  total_data, pb
42c64     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
42c68     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
42c6c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
42c70     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
42c74     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
42c78     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
42c7c                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
42c7c     A0 99 02 F6 |                 mov     hctwait, _500us_
42c80     EF 02 A0 FD |                 call    #poll_waitx
42c84     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
42c88     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
42c8c     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
42c90     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
42c94     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
42c98     CC 00 90 5D |         if_nz   jmp     #.done
42c9c     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
42ca0     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
42ca4     61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
42ca8     61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
42cac     00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
42cb0     09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
42cb4     02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
42cb8     56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
42cbc     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
42cc0     A4 00 90 CD |         if_b    jmp     #.done
42cc4     60 F0 BF FD |                 call    #hparse_con_desc
42cc8     9C 00 90 FD |                 jmp     #.done
42ccc                 | 
42ccc                 | .other
42ccc     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
42cd0     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
42cd4     28 00 90 AD |         if_x1   jmp     #.reset_feature
42cd8     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
42cdc     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
42ce0     1C 00 90 AD |         if_x1   jmp     #.reset_feature
42ce4     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
42ce8     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
42cec     10 00 90 AD |         if_x1   jmp     #.reset_feature
42cf0     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
42cf4     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
42cf8     04 00 90 AD |         if_x1   jmp     #.reset_feature
42cfc     68 00 90 FD |                 jmp     #.done
42d00                 | .reset_feature
42d00     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
42d04     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
42d08     A0 02 A0 FD |                 call    #control_write
42d0c     58 00 90 FD |                 jmp     #.done
42d10                 | .disconnect
42d10                 | 
42d10     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
42d14     00 72 E3 F8 |                 getbyte htmp
42d18     03 72 0F F2 |                 cmp     htmp,#KB_READY wz
42d1c     05 72 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
42d20     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
42d24     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
42d28     00 76 06 A6 |         if_z    mov     kb_led_states, #0
42d2c     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
42d30                 |         if EMUPAD_MAX_PLAYER > 0
42d30                 |         end
42d30                 |         if HAVE_MOUSE
42d30     04 72 0F F2 |                 cmp     htmp, #M_READY          wz
42d34     05 72 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
42d38     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
42d3c                 |         end
42d3c                 |         if HAVE_HIDPAD
42d3c     28 0A F0 FE |                 loc ptrb,#hidpad_report
42d40     2D 73 03 F6 |                 mov htmp,hdev_port
42d44     01 72 E7 F2 |                 cmpsub htmp,#1
42d48     20 72 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
42d4c     B9 F3 03 F1 |                 add ptrb,htmp
42d50     28 0E 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
42d54     80 01 6C FC |                 wrlong #0,ptrb
42d58                 |         end
42d58                 | 
42d58     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
42d5c     00 00 C4 F8 |                 setbyte #0
42d60     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
42d64     00 00 04 F6 |                 mov     0-0, #0
42d68                 | 
42d68                 | .done
42d68     0E 6A 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
42d6c     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
42d70     22 6F 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
42d74     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
42d78     A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
42d7c     A4 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
42d80                 | 
42d80     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
42d84     27 EF 03 F6 |                 mov     pb, urx_buff_p
42d88     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
42d8c     55 02 A0 FD |                 call    #control_read
42d90     00 69 06 FB |                 rdlong  hub_port_status, ptra
42d94                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
42d94     2D 00 64 FD |                 ret
42d98                 | 
42d98                 | '------------------------------------------------------------------------------
42d98                 | ' Partially populated SETUP packets
42d98                 | '------------------------------------------------------------------------------
42d98     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
42d99     06          |                 byte    REQ_GET_DESC
42d9a     00 01       |                 word    TYPE_DEVICE << 8
42d9c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
42d9e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
42da0     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
42da1     06          |                 byte    REQ_GET_DESC
42da2     00 02       |                 word    TYPE_CONFIG << 8
42da4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
42da6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
42da8     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
42da9     09          |                 byte    REQ_SET_CONFIG
42daa     00 00       |                 word    0       ' Configuration value
42dac     00 00       |                 word    0       ' Zero
42dae     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
42db0     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
42db1     05          |                 byte    REQ_SET_ADDR
42db2     00 00       |                 word    0       ' Zero
42db4     00 00       |                 word    0       ' Zero
42db6     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
42db8                 | '------------------------------------------------------------------------------
42db8                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
42db8                 | ' wValue field dictates which protocol should be used.
42db8                 | '
42db8                 | ' When initialized, all devices default to report protocol. However the host
42db8                 | ' should not make any assumptions about the device state and should set the
42db8                 | ' desired protocol whenever initializing a device.
42db8                 | '------------------------------------------------------------------------------
42db8     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
42db9     0B          |                 byte    HID_SET_PROTO
42dba     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
42dbc                 |                                                 ' (HID 1.11 Section 7.2.6).
42dbc     00 00       |                 word    0               ' Interface index number.
42dbe     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
42dc0                 | '------------------------------------------------------------------------------
42dc0     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
42dc1     0A          |                 byte    HID_SET_IDLE
42dc2     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
42dc4                 |                                         ' reporting until a change is detected in the report data
42dc4                 | 
42dc4                 |                                         ' (HID 1.11 Section 7.2.4).
42dc4     00 00       |                 word    0       ' Interface index number.
42dc6     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
42dc8     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
42dc9     09          |                 byte    HID_SET_REPORT
42dca     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
42dcc                 |                                         ' (HID 1.11 Section 7.2.2).
42dcc     00 00       |                 word    0       ' Interface index number.
42dce     00 00       |                 word    0       ' Size of the report, in bytes.
42dd0     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
42dd1     06          |                 byte    REQ_GET_DESC
42dd2     00 22       |                 word    TYPE_REPORT << 8
42dd4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
42dd6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
42dd8                 | '------------------------------------------------------------------------------
42dd8     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
42dd9     06          |                 byte    REQ_GET_DESC
42dda     00 29       |                 word    TYPE_HUB << 8
42ddc     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
42dde     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
42de0     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
42de1     03          |                 byte    REQ_SET_FEATURE
42de2     00 00       |                 word    0       ' port power
42de4     01 00       |                 word    1       ' Port index number (1+)
42de6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
42de8     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
42de9     01          |                 byte    REQ_CLEAR_FEATURE
42dea     00 00       |                 word    0       ' port power
42dec     01 00       |                 word    1       ' Port index number (1+)
42dee     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
42df0     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
42df1     00          |                 byte    REQ_GET_STATUS
42df2     00 00       |                 word    0
42df4     01 00       |                 word    1       ' Port index number (1+)
42df6     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
42df8                 | '------------------------------------------------------------------------------
42df8                 | if _HAVE_GAMEPAD
42df8     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
42dfc                 | ps3_command_buff
42dfc     00 00 00 00 
42e00     00          |                 byte    $00, $00, $00, $00, $00
42e01     00 00 00 00 
42e05     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
42e06     FF 27 10 00 
42e0a     32          |                 byte    $FF, $27, $10, $00, $32
42e0b     FF 27 10 00 
42e0f     32          |                 byte    $FF, $27, $10, $00, $32
42e10     FF 27 10 00 
42e14     32          |                 byte    $FF, $27, $10, $00, $32
42e15     FF 27 10 00 
42e19     32          |                 byte    $FF, $27, $10, $00, $32
42e1a     00 00 00 00 
42e1e     00          |                 byte    $00, $00, $00, $00, $00
42e1f     00 00 00 00 
42e23     00          |                 byte    $00, $00, $00, $00, $00
42e24     00 00 00 00 
42e28     00          |                 byte    $00, $00, $00, $00, $00
42e29     00 00 00    |                 byte    $00, $00, $00
42e2c                 | '------------------------------------------------------------------------------
42e2c     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
42e2f                 |                                         ' 0x01 All blinking
42e2f                 |                                         ' 0x02 1 flashes, then on
42e2f                 |                                         ' 0x03 2 flashes, then on
42e2f                 |                                         ' 0x04 3 flashes, then on
42e2f                 |                                         ' 0x05 4 flashes, then on
42e2f                 |                                         ' 0x06 1 on
42e2f                 |                                         ' 0x07 2 on
42e2f                 |                                         ' 0x08 3 on
42e2f                 |                                         ' 0x09 4 on
42e2f                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
42e2f                 |                                         ' 0x0B Blinking*
42e2f                 |                                         ' 0x0C Slow blinking*
42e2f                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
42e2f     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
42e32     00          |                 byte    $00             ' Left rumble
42e33     00          |                 byte    $00             ' Right rumble
42e34     00 00 00    |                 byte    $00, $00, $00
42e37     00          | end
42e38                 | alignl
42e38                 | 
42e38                 | if HAVE_MOUSE
42e38     00 00 00 00 
42e3c     00 00 00 00 | mouse_limits long 0[2]
42e40     00 00 00 00 | mouse_outptr long 0
42e44                 | end
42e44                 | 
42e44                 | if KEYQUEUE_SIZE > 0
42e44     00          | keyq_head byte 0
42e45     00          | keyq_tail byte 0
42e46     00 00 00 00 
      ...             
43042     00 00 00 00 
43046     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
43048                 | alignl
43048                 | end
43048                 | 
43048                 | if EMUPAD_MAX_PLAYER > 0
43048                 | emupad_rule_buffer
43048                 | if EMUPAD_BUILTIN_RULES
43048                 | file "padmap_builtin.dat"
43048                 | end
43048                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
43048                 | '' Default rule directly follows!
43048                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
43048                 | end
43048                 | 
43048                 | '------------------------------------------------------------------------------
43048                 | ' The USB data cache area gets zero-filled at every device disconnect
43048                 | '------------------------------------------------------------------------------
43048                 | usb_cache_start
43048                 | 
43048                 | ' HID descriptor and report buffers
43048                 | if !!OVERLAP_MEMORY
43048     00 00 00 00 
      ...             
43740     00 00 00 00 
43744     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
43748                 | end
43748     00 00 00 00 
4374c     00 00 00 00 | hkbd_report     byte    0[8]
43750     00 00 00 00 | hkbd_led_rep    byte    0
43754                 | alignl
43754                 | 
43754     00 00 00 00 
43758     00 00 00 00 
4375c     00 00 00 00 
43760     00 00 00 00 
43764     00 00 00 00 | hid_stack       long 0[(hidr_end - hidr_state) * 1]
43768                 | 
43768                 | if HAVE_HIDPAD
43768     00 00 00 00 
      ...             
43840     00 00 00 00 
43844     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
43848                 | end
43848                 | 
43848                 | ' HUB descriptor
43848     00          | hub_descr       byte    0   ' bDescLength
43849     00          |                 byte    0   ' bDescriptorType
4384a     00          |                 byte    0   ' bNbrPorts
4384b     00 00       |                 word    0   ' wHubCharacteristics
4384d     00          |                 byte    0   ' bPwrOn2PwrGood
4384e     00          |                 byte    0   ' bHubContrCurrent
4384f     00          |                 byte    0   ' DeviceRemoveable
43850     00          |                 byte    0   ' PortPwrCtrlMask
43851                 | 
43851                 | usb_cache_end
43851                 | 
43851                 | if HAVE_MOUSE
43851     00 00 00 00 | mouse_xacc      long 0
43855     00 00 00 00 | mouse_yacc      long 0
43859     00 00 00 00 | mouse_zacc      long 0
4385d     00          | mouse_bstate    byte 0
4385e     00          | mouse_lpending  byte 0
4385f     00          | mouse_rpending  byte 0
43860     00          | mouse_mpending  byte 0
43861     00          | mouse_lock      byte 0
43862     00 00 00    |                 byte 0[3] ' padding
43865                 | end
43865                 | 
43865     00 00 00 00 
      ...             
438dd     00 00 00 00 
438e1     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
438e5     00 00 00 00 
438e9     00 00 00 00 
438ed     00 00 00 00 
438f1     00 00 00 00 
438f5     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
438f7     00 00 00 00 
      ...             
439ef     00 00 00 00 
439f3     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
439f7                 | 
439f7     00          | driver_cog      byte    0                       ' Current driver cog + 1
439f8                 | 	alignl
439f8                 | _audio096_spin2_dat_
439f8                 | 
439f8                 | audio       org     0
439f8                 | 
439f8     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
439fc     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
43a00     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
43a04                 |  
43a04     01 EC 63 FD |             cogid   pa                   ' compute cogid
43a08     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
43a0c     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
43a10     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
43a14                 | 
43a14     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
43a18     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
43a1c     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
43a20     0F 24 06 FC |             wrpin   dac2,#right
43a24     0F 00 1E FC |             wxpin   #256,#right    
43a28     41 9C 64 FD |             dirh    #left addpins 1
43a2c     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
43a30     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
43a34     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
43a38                 |             
43a38                 | '---------------------------------------------------------------------------------        
43a38                 | '----------------- The main loop -------------------------------------------------
43a38                 | '---------------------------------------------------------------------------------
43a38                 | 
43a38     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
43a3c     10 00 90 CD |       if_c  jmp     #loop1
43a40                 |   
43a40     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
43a44     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
43a48     D5 00 80 F1 |             sub     0-0,a40000000
43a4c     FD 01 6E FB |             djnz    cn,#p402
43a50                 |     
43a50     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
43a54     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
43a58     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
43a5c     01 00 06 C6 |     if_c    mov     cn,#1
43a60     DA 02 3A F3 |             fle     ct,time3 wcz
43a64     02 00 06 C6 |     if_c    mov     cn,#2     
43a68     DB 02 3A F3 |             fle     ct,time4 wcz
43a6c     03 00 06 C6 |     if_c    mov     cn,#3
43a70     DC 02 3A F3 |             fle     ct,time5 wcz
43a74     04 00 06 C6 |     if_c    mov     cn,#4
43a78     DD 02 3A F3 |             fle     ct,time6 wcz
43a7c     05 00 06 C6 |     if_c    mov     cn,#5
43a80     DE 02 3A F3 |             fle     ct,time7 wcz
43a84     06 00 06 C6 |     if_c    mov     cn,#6
43a88     DF 02 3A F3 |             fle     ct,time8 wcz
43a8c     07 00 06 C6 |     if_c    mov     cn,#7
43a90                 | 
43a90                 | 
43a90                 | '----------------------------------------------------------------------------------
43a90                 | '------------- Compute channel samples --------------------------------------------
43a90                 | '----------------------------------------------------------------------------------
43a90                 | 
43a90                 | 
43a90     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
43a94     06 C0 65 F0 |             shl     channeladd,#6
43a98     E0 F0 03 F1 |             add     ptra,channeladd
43a9c                 | 
43a9c     28 16 64 FD |             setq    #11                        	' read parameters
43aa0     00 D7 05 FB |             rdlong  pointer0,ptra
43aa4                 |     	    
43aa4     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
43aa8     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
43aac     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
43ab0     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
43ab4     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
43ab8     00 C4 0D F2 |             cmp     qq,#0 wz                         
43abc     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
43ac0     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
43ac4                 |             
43ac4     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
43ac8     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
43acc     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
43ad0                 | 
43ad0     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
43ad4     EC 08 3A F9 |             getword oldrs,sample0,#1
43ad8     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
43adc     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
43ae0     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
43ae4     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
43ae8                 | 
43ae8     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
43aec     00 04 02 F6 |             mov     dt0,0-0    
43af0     D7 04 82 F1 |             sub     dt0,time0
43af4                 |             
43af4     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
43af8     FB 00 00 F1 |             add     0-0,afreq0  	
43afc                 |             
43afc                 | '---- envelopes
43afc                 |             
43afc     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
43b00     20 00 00 AF 
43b04     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
43b08     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
43b0c                 | 
43b0c     FB 48 02 F6 |             mov     envs1,afreq0
43b10     F5 48 02 FA |             mul     envs1,envspd0
43b14     24 E7 01 F1 |             add     envph0,envs1 
43b18                 | 
43b18     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
43b1c     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
43b20     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
43b24     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
43b28     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
43b2c     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
43b30     00 46 06 36 |     if_ge   mov     envlo,#0
43b34     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
43b38     16 E6 65 30 |     if_ge   shl     envph0,#22
43b3c                 | 
43b3c     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
43b40     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
43b44     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
43b48     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
43b4c     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
43b50     24 49 32 F9 |             getword envs1,envs1,#0		' current value
43b54     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
43b58     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
43b5c     23 49 02 FA |             mul     envs1,envlo
43b60     25 49 02 F1 |             add     envs1,envs2
43b64     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
43b68                 |             
43b68     1B DA 0D F4 | p410        testb   sstart0, #27 wz
43b6c     1B C6 61 AD |     if_z    getrnd  spl
43b70     58 00 90 AD |     if_z    jmp     #p406
43b74                 |  
43b74     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
43b78     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
43b7c     08 D6 45 F0 |             shr     pointer0,#8
43b80                 |          
43b80     1F DA 0D F4 |             testb   sstart0,#31 wz            
43b84     01 D6 65 A0 |     if_z    shl     pointer0,#1        
43b88     1C DA 0D F4 |             testb   sstart0,#28 wz            
43b8c     01 D6 65 A0 |     if_z    shl     pointer0,#1        
43b90                 |         
43b90     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
43b94     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
43b98     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
43b9c                 |             
43b9c     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
43ba0     ED C4 01 F1 |             add     qq,sstart0            
43ba4                 | 
43ba4     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
43ba8     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
43bac     1C 01 B0 1D |     if_gt   call    #cache_read
43bb0                 |          
43bb0     1F DA 0D F4 |             testb   sstart0,#31 wz 
43bb4     08 C6 65 50 |     if_nz   shl     spl,#8
43bb8     08 D6 65 50 |     if_nz   shl     pointer0,#8
43bbc     07 D6 65 A0 |     if_z    shl     pointer0,#7
43bc0     1C DA 0D F4 |             testb   sstart0,#28 wz            
43bc4     01 D6 45 A0 |     if_z    shr     pointer0,#1    
43bc8     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
43bcc                 | 
43bcc                 | 
43bcc     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
43bd0     00 C6 01 F6 |             mov     spl,0-0
43bd4     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
43bd8     00 C6 01 F6 |             mov     spl,0-0
43bdc                 | 
43bdc     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
43be0     00 0A 02 F6 |             mov     ls0,0-0
43be4     20 00 00 FF 
43be8     00 C4 05 F6 |             mov     qq,##16384
43bec     FE C4 81 F1 |             sub     qq,apan0
43bf0     E2 C6 31 FA |             scas    spl,qq
43bf4     00 0C 02 F6 |             mov     rs0, 0-0
43bf8                 | 
43bf8     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
43bfc     06 11 02 F1 |             add     rs,rs0
43c00     03 0F 82 F1 |             sub     ls,oldls
43c04     05 0F 02 F1 |             add     ls,ls0
43c08                 |    
43c08     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
43c0c     05 D9 21 F9 |             setword sample0,ls0,#0
43c10                 |             
43c10     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
43c14     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
43c18     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
43c1c                 |   '  if_z    mov     sample0,#0
43c1c     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
43c20     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
43c24     04 00 00 AF 
43c28     00 B0 05 A1 |     if_z    add     time1,##2048
43c2c     D8 B2 01 A6 |     if_z    mov     time2,time1
43c30     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
43c34                 | 
43c34     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
43c38     00 D7 65 FC |             wrlong  pointer0,ptra
43c3c     08 E7 65 FC |             wrlong  envph0,ptra[8]
43c40     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
43c44                 |                       
43c44     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
43c48     FF C3 25 A7 |     if_z    decmod  front, #511          
43c4c                 |          
43c4c     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
43c50     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
43c54     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
43c58     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
43c5c                 | 	    
43c5c                 | 		    
43c5c     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
43c60     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
43c64     04 15 02 F6 |             mov     newsample, oldrs       
43c68                 | 
43c68     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
43c6c     02 AF 01 F1 |             add     time0,dt0    
43c70                 |                                      
43c70     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
43c74     D8 FD 9F AD |     if_z    jmp     #loop1
43c78     02 C5 01 F6 |             mov     qq,dt0
43c7c                 | 
43c7c                 |     
43c7c                 |             
43c7c     01 4E 36 F0 | p301        rol     dropper,#1 wc
43c80     40 00 90 3D |     if_nc   jmp     #p399
43c84     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
43c88     00 C2 9D F2 |             cmpr    front, #0-0 wcz
43c8c     F4 FF 9F AD |     if_e    jmp     #p398   
43c90                 | 		
43c90     00 1A 0E F2 | 	    cmp     scbase,#0 wz
43c94     20 00 90 AD |     if_z    jmp     #p302	   
43c98                 |   
43c98     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
43c9c     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
43ca0     02 1E 66 C0 |     if_c    shl     scptr2,#2
43ca4     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
43ca8     60 1E 66 FC |             wrlong  scptr2,#$60
43cac     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
43cb0     01 00 00 CF 
43cb4     7F 1C 06 C7 |     if_c    incmod  scptr,##639
43cb8                 | 			    
43cb8     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
43cbc     00 00 00 FF 
43cc0     FF C3 05 F7 |             incmod  front, ##511
43cc4     ED C5 6D FB | p399        djnz    qq,#p301
43cc8                 |             
43cc8     6C FD 9F FD |             jmp     #loop            'loop
43ccc                 | 
43ccc                 | '----------------------------------------------------------------------------------
43ccc                 | '------------- This is the end of the main loop -----------------------------------
43ccc                 | '----------------------------------------------------------------------------------
43ccc                 | 
43ccc                 | '----------------------------------------------------------------------------------
43ccc                 | '------------- PSRAM cache ----------- --------------------------------------------
43ccc                 | '----------------------------------------------------------------------------------
43ccc                 | 
43ccc                 | ' There are 8 cache pointers for 8 channels
43ccc                 | ' if 24 higher bits of address=cache, then get a word from the cache
43ccc                 | ' else load the cache from PSRAM, update the pointer, then read a sample
43ccc                 | 
43ccc                 | 
43ccc     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
43cd0                 |             
43cd0     E2 40 02 F6 | 	    mov     addrhi,qq		
43cd4     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
43cd8     14 01 96 F9 | 	    alts    cn,#cache1            
43cdc     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
43ce0     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
43ce4                 | 	
43ce4     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
43ce8     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
43cec     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
43cf0     08 38 66 F0 | 	    shl     cmd,#8
43cf4     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
43cf8     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
43cfc     08 3A 66 F0 |             shl     hubaddr,#8                  '
43d00     13 3B 02 F1 |             add     hubaddr,hubptr 
43d04     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
43d08     28 04 64 FD |             setq    #2                          ' write 3 longs
43d0c     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
43d10     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
43d14     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
43d18                 |             
43d18                 | 	
43d18     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
43d1c     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
43d20     13 C5 01 F1 | 	    add     qq,hubptr
43d24     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
43d28     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
43d2c                 |           
43d2c                 | 
43d2c                 | '--------------------------------------------------------------------------
43d2c                 | '------ Interrupt service -------------------------------------------------
43d2c                 | '------ Output the sample, get the next one if exists ---------------------
43d2c                 | '--------------------------------------------------------------------------
43d2c                 | 
43d2c     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
43d30     0F D0 25 FC |             wypin   rsample,#right       '4
43d34     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
43d38     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
43d3c     FF F3 07 57 |     if_ne   incmod  ptrb,#511
43d40     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
43d44     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
43d48                 |     
43d48     F5 FF 3B FB |             reti1                        '17/19 
43d4c                 |           
43d4c                 | '---------------------------------------------------------------------------
43d4c                 | '-------- End of interrupt -------------------------------------------------
43d4c                 | '---------------------------------------------------------------------------    
43d4c                 | 
43d4c                 | 
43d4c                 | '---------------------------------------------------------------------------
43d4c                 | '------- Variables ---------------------------------------------------------
43d4c                 | '---------------------------------------------------------------------------
43d4c                 | 
43d4c                 | ' constants
43d4c                 | 
43d4c     00 00 00 40 | a40000000   long $40000000
43d50     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
43d54                 | 
43d54                 | ' Time variables
43d54                 | 
43d54     00 00 00 00 | time0       long 0    ' Global sample computing time
43d58     01 00 00 00 | time1       long 1    ' Local channels time
43d5c     02 00 00 00 | time2       long 2
43d60     03 00 00 00 | time3       long 3
43d64     04 00 00 00 | time4       long 4
43d68     05 00 00 00 | time5       long 5
43d6c     06 00 00 00 | time6       long 6
43d70     07 00 00 00 | time7       long 7
43d74     08 00 00 00 | time8       long 8
43d78                 | 
43d78     00 00 00 00 | channeladd long 0
43d7c                 | 
43d7c     00 00 00 00 | front       long 0
43d80                 | 
43d80                 | ' temporary variables 
43d80     00 00 00 00 | qq          long 0
43d84     00 00 00 00 | spl         long 0
43d88     00 00 00 00 | zero        long 0
43d8c     00 00 00 00 | mailbox     long 0
43d90     00 00 00 00 | mailbox2 long 0
43d94                 | 
43d94                 | ' Interrupt ISR variables
43d94                 | 
43d94     00 00 00 00 | lsample     long 0
43d98     00 00 00 00 | rsample     long 0
43d9c     00 00 00 00 | lsnext      long 0
43da0     00 00 00 00 | rsnext      long 0 
43da4                 | 
43da4                 | ' channel parameter block
43da4                 | 
43da4     00 00 00 00 | pointer0    long 0     
43da8     00 00 00 00 | sample0     long 0
43dac     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
43db0     00 00 00 00 | lstart0     long 0
43db4     00 00 00 00 | lend0       long 0
43db8     00 00 00 00 | volpan0     long 0
43dbc     00 00 00 00 | freqskip0   long 0
43dc0     00 00 00 00 | command0    long 0
43dc4     00 00 00 00 | envph0	    long 0
43dc8     00 00 00 00 | envptr0	    long 0
43dcc     00 00 00 00 | envspd0	    long 0
43dd0     00 00 00 00 | envlen0	    long 0
43dd4     00 00 00 00 | res5	    long 0
43dd8     00 00 00 00 | res6	    long 0
43ddc     00 00 00 00 | res7	    long 0
43de0     00 00 00 00 | res8	    long 0
43de4                 | 
43de4     00 00 00 00 | afreq0      long 0
43de8     00 00 00 00 | askip0      long 0
43dec     00 00 00 00 | avol0       long 0
43df0     00 00 00 00 | apan0       long 0
43df4                 | 
43df4     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
43df8     00 00 00 00 | cn          long 0
43dfc     00 00 00 00 | ct          long 0
43e00     00 00 00 00 | dt0         long 0
43e04                 | 
43e04                 | ' Samples
43e04     00 00 00 00 | oldls       long 0
43e08     00 00 00 00 | oldrs       long 0
43e0c                 | 
43e0c     00 00 00 00 | ls0         long 0
43e10     00 00 00 00 | rs0         long 0
43e14                 | 
43e14     00 00 00 00 | ls          long 0    
43e18     00 00 00 00 | rs          long 0
43e1c                 | 
43e1c     00 00 00 00 | oldsample   long 0
43e20     00 00 00 00 | newsample   long 0
43e24                 | 
43e24     00 00 00 00 | nrsample    long 0
43e28     00 00 00 00 | nlsample    long 0
43e2c                 | 
43e2c     00 00 00 00 | scbase long 0
43e30     00 00 00 00 | scptr long 0
43e34     00 00 00 00 | scptr2 long 0
43e38     00 00 00 00 | scope long 0
43e3c                 | 
43e3c     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
43e40     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
43e44                 | 
43e44     00 18 07 00 | hubptr      long $71800
43e48     00 00 00 00 | cache1      long 0
43e4c     00 00 00 00 | cache2      long 0
43e50     00 00 00 00 | cache3      long 0
43e54     00 00 00 00 | cache4      long 0
43e58     00 00 00 00 | cache5      long 0
43e5c     00 00 00 00 | cache6      long 0
43e60     00 00 00 00 | cache7      long 0
43e64     00 00 00 00 | cache8      long 0
43e68                 | 
43e68                 | 
43e68     00 00 00 00 | cmd         long 0
43e6c     00 00 00 00 | hubaddr     long 0
43e70     00 01 00 00 | count       long 256
43e74     00 00 00 00 | addrlo long 0
43e78     00 00 00 00 | addrhi long 0
43e7c     00 00 00 00 | pointer00 long 0
43e80     00 00 00 00 | envhi long 0
43e84     00 00 00 00 | envlo long 0
43e88     00 00 00 00 | envs1 long 0
43e8c     00 00 00 00 | envs2 long 0
43e90     00 00 00 00 | noise0 long 0
43e94     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
43e98     00 00 00 00 
43e9c     00 00 00 00 | null  			long 	0,0           ' for channel reset
43ea0                 | 	alignl
43ea0                 | __system__dat_
43ea0     00 00 00 00 
43ea4     00 00 00 00 | 	byte	$00[8]
43ea8     03 00 00 00 
43eac     00 00 00 00 
43eb0     00 00 00 00 
43eb4     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
43eb8     00 00 00 00 
      ...             
44144     00 00 00 00 
44148     00 00 00 00 | 	byte	$00[660]
4414c     00 00 10 0B | 	long	(177 {__system____root_opendir})<<20
44150     00 00 20 0B | 	long	(178 {__system____root_closedir})<<20
44154     00 00 30 0B | 	long	(179 {__system____root_readdir})<<20
44158     00 00 40 0B | 	long	(180 {__system____root_stat})<<20
4415c     00 00 00 00 
44160     00 00 00 00 
44164     00 00 00 00 
44168     00 00 00 00 
4416c     00 00 00 00 
44170     00 00 00 00 
44174     00 00 00 00 | 	byte	$00[28]
44178     E0 41 04 00 | 	long	@@@__system__dat_ + 832
4417c     E3 41 04 00 | 	long	@@@__system__dat_ + 835
44180     04 42 04 00 | 	long	@@@__system__dat_ + 868
44184     1D 42 04 00 | 	long	@@@__system__dat_ + 893
44188     38 42 04 00 | 	long	@@@__system__dat_ + 920
4418c     52 42 04 00 | 	long	@@@__system__dat_ + 946
44190     62 42 04 00 | 	long	@@@__system__dat_ + 962
44194     74 42 04 00 | 	long	@@@__system__dat_ + 980
44198     86 42 04 00 | 	long	@@@__system__dat_ + 998
4419c     98 42 04 00 | 	long	@@@__system__dat_ + 1016
441a0     A4 42 04 00 | 	long	@@@__system__dat_ + 1028
441a4     B5 42 04 00 | 	long	@@@__system__dat_ + 1045
441a8     C9 42 04 00 | 	long	@@@__system__dat_ + 1065
441ac     D3 42 04 00 | 	long	@@@__system__dat_ + 1075
441b0     E3 42 04 00 | 	long	@@@__system__dat_ + 1091
441b4     F2 42 04 00 | 	long	@@@__system__dat_ + 1106
441b8     08 43 04 00 | 	long	@@@__system__dat_ + 1128
441bc     21 43 04 00 | 	long	@@@__system__dat_ + 1153
441c0     35 43 04 00 | 	long	@@@__system__dat_ + 1173
441c4     43 43 04 00 | 	long	@@@__system__dat_ + 1187
441c8     57 43 04 00 | 	long	@@@__system__dat_ + 1207
441cc     63 43 04 00 | 	long	@@@__system__dat_ + 1219
441d0     75 43 04 00 | 	long	@@@__system__dat_ + 1237
441d4     8D 43 04 00 | 	long	@@@__system__dat_ + 1261
441d8     9F 43 04 00 | 	long	@@@__system__dat_ + 1279
441dc     B2 43 04 00 | 	long	@@@__system__dat_ + 1298
441e0     4F 4B 00 4E 
441e4     75 6D 65 72 
441e8     69 63 61 6C 
441ec     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
441f0     75 6D 65 6E 
441f4     74 20 6F 75 
441f8     74 20 6F 66 
441fc     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
44200     61 69 6E 00 
44204     52 65 73 75 
44208     6C 74 20 6E 
4420c     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
44210     65 70 72 65 
44214     73 65 6E 74 
44218     61 62 6C 65 
4421c     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
44220     65 67 61 6C 
44224     20 6D 75 6C 
44228     74 69 62 79 
4422c     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
44230     65 71 75 65 
44234     6E 63 65 00 
44238     4E 6F 20 73 
4423c     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
44240     66 69 6C 65 
44244     20 6F 72 20 
44248     64 69 72 65 
4424c     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
44250     79 00 42 61 
44254     64 20 66 69 
44258     6C 65 20 6E 
4425c     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
44260     72 00 50 65 
44264     72 6D 69 73 
44268     73 69 6F 6E 
4426c     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
44270     69 65 64 00 
44274     4E 6F 74 20 
44278     65 6E 6F 75 
4427c     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
44280     65 6D 6F 72 
44284     79 00 54 65 
44288     6D 70 6F 72 
4428c     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
44290     66 61 69 6C 
44294     75 72 65 00 
44298     46 69 6C 65 
4429c     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
442a0     73 74 73 00 
442a4     49 6E 76 61 
442a8     6C 69 64 20 
442ac     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
442b0     6D 65 6E 74 
442b4     00 54 6F 6F 
442b8     20 6D 61 6E 
442bc     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
442c0     65 6E 20 66 
442c4     69 6C 65 73 
442c8     00 49 2F 4F 
442cc     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
442d0     6F 72 00 4E 
442d4     6F 74 20 61 
442d8     20 64 69 72 
442dc     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
442e0     72 79 00 49 
442e4     73 20 61 20 
442e8     64 69 72 65 
442ec     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
442f0     79 00 52 65 
442f4     61 64 20 6F 
442f8     6E 6C 79 20 
442fc     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
44300     20 73 79 73 
44304     74 65 6D 00 
44308     46 75 6E 63 
4430c     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
44310     20 6E 6F 74 
44314     20 69 6D 70 
44318     6C 65 6D 65 
4431c     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
44320     00 44 69 72 
44324     65 63 74 6F 
44328     72 79 20 6E 
4432c     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
44330     6D 70 74 79 
44334     00 4E 61 6D 
44338     65 20 74 6F 
4433c     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
44340     6E 67 00 44 
44344     65 76 69 63 
44348     65 20 6E 6F 
4434c     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
44350     65 6B 61 62 
44354     6C 65 00 42 
44358     61 64 20 61 
4435c     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
44360     73 73 00 42 
44364     72 6F 6B 65 
44368     6E 20 63 6F 
4436c     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
44370     74 69 6F 6E 
44374     00 44 65 76 
44378     69 63 65 20 
4437c     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
44380     65 73 6F 75 
44384     72 63 65 20 
44388     62 75 73 79 
4438c     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
44390     73 73 20 64 
44394     65 76 69 63 
44398     65 20 6C 69 
4439c     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
443a0     6F 20 73 70 
443a4     61 63 65 20 
443a8     6F 6E 20 64 
443ac     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
443b0     65 00 55 6E 
443b4     6B 6E 6F 77 
443b8     6E 20 65 72 
443bc     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
443c0     00 00 00 00 
443c4     00 00 00 00 
443c8     00 00 00 00 | 	byte	$00[12]
443cc     05 00 00 00 
443d0     00 00 00 00 
443d4     00 00 00 00 
443d8     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
443dc     00 00 00 00 | 	byte	$00, $00, $00, $00
443e0     00 00 90 0C | 	long	(201 {__system___tx})<<20
443e4     00 00 A0 0C | 	long	(202 {__system___rx})<<20
443e8     00 00 00 00 | 	byte	$00, $00, $00, $00
443ec     00 00 B0 0C | 	long	(203 {__system___rxtxioctl_0786})<<20
443f0     00 00 C0 0C | 	long	(204 {__system____dummy_flush_0787})<<20
443f4     00 00 00 00 
443f8     00 00 00 00 | 	byte	$00[8]
443fc     01 00 00 00 
44400     06 00 00 00 
44404     00 00 00 00 
44408     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
4440c     00 00 00 00 
44410     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
44414     00 00 90 0C | 	long	(201 {__system___tx})<<20
44418     00 00 A0 0C | 	long	(202 {__system___rx})<<20
4441c     00 00 00 00 | 	byte	$00, $00, $00, $00
44420     00 00 B0 0C | 	long	(203 {__system___rxtxioctl_0786})<<20
44424     00 00 C0 0C | 	long	(204 {__system____dummy_flush_0787})<<20
44428     00 00 00 00 
4442c     00 00 00 00 | 	byte	$00[8]
44430     01 00 00 00 
44434     06 00 00 00 
44438     00 00 00 00 
4443c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
44440     00 00 00 00 
44444     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
44448     00 00 90 0C | 	long	(201 {__system___tx})<<20
4444c     00 00 A0 0C | 	long	(202 {__system___rx})<<20
44450     00 00 00 00 | 	byte	$00, $00, $00, $00
44454     00 00 B0 0C | 	long	(203 {__system___rxtxioctl_0786})<<20
44458     00 00 C0 0C | 	long	(204 {__system____dummy_flush_0787})<<20
4445c     00 00 00 00 
      ...             
445cc     00 00 00 00 
445d0     00 00 00 00 | 	byte	$00[376]
445d4     D8 45 04 00 | 	long	@@@__system__dat_ + 1848
445d8     00 00 00 00 
445dc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
445e0                 | 	alignl
445e0                 | _fatfs_cc_dat_
445e0     C7 00 FC 00 
445e4     E9 00 E2 00 
445e8     E4 00 E0 00 
445ec     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
445f0     EA 00 EB 00 
445f4     E8 00 EF 00 
445f8     EE 00 EC 00 
445fc     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
44600     C9 00 E6 00 
44604     C6 00 F4 00 
44608     F6 00 F2 00 
4460c     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
44610     FF 00 D6 00 
44614     DC 00 F8 00 
44618     A3 00 D8 00 
4461c     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
44620     E1 00 ED 00 
44624     F3 00 FA 00 
44628     F1 00 D1 00 
4462c     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
44630     BF 00 AE 00 
44634     AC 00 BD 00 
44638     BC 00 A1 00 
4463c     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
44640     91 25 92 25 
44644     93 25 02 25 
44648     24 25 C1 00 
4464c     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
44650     A9 00 63 25 
44654     51 25 57 25 
44658     5D 25 A2 00 
4465c     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
44660     14 25 34 25 
44664     2C 25 1C 25 
44668     00 25 3C 25 
4466c     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
44670     5A 25 54 25 
44674     69 25 66 25 
44678     60 25 50 25 
4467c     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
44680     F0 00 D0 00 
44684     CA 00 CB 00 
44688     C8 00 31 01 
4468c     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
44690     CF 00 18 25 
44694     0C 25 88 25 
44698     84 25 A6 00 
4469c     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
446a0     D3 00 DF 00 
446a4     D4 00 D2 00 
446a8     F5 00 D5 00 
446ac     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
446b0     DE 00 DA 00 
446b4     DB 00 D9 00 
446b8     FD 00 DD 00 
446bc     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
446c0     AD 00 B1 00 
446c4     17 20 BE 00 
446c8     B6 00 A7 00 
446cc     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
446d0     B0 00 A8 00 
446d4     B7 00 B9 00 
446d8     B3 00 B2 00 
446dc     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
446e0     61 00 1A 03 
446e4     E0 00 17 03 
446e8     F8 00 07 03 
446ec     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
446f0     78 01 00 01 
446f4     30 01 32 01 
446f8     06 01 39 01 
446fc     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
44700     2E 01 79 01 
44704     06 01 80 01 
44708     4D 00 43 02 
4470c     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
44710     82 01 84 01 
44714     84 01 86 01 
44718     87 01 87 01 
4471c     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
44720     8B 01 8B 01 
44724     8D 01 8E 01 
44728     8F 01 90 01 
4472c     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
44730     93 01 94 01 
44734     F6 01 96 01 
44738     97 01 98 01 
4473c     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
44740     9B 01 9C 01 
44744     9D 01 20 02 
44748     9F 01 A0 01 
4474c     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
44750     A2 01 A4 01 
44754     A4 01 A6 01 
44758     A7 01 A7 01 
4475c     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
44760     AB 01 AC 01 
44764     AC 01 AE 01 
44768     AF 01 AF 01 
4476c     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
44770     B3 01 B3 01 
44774     B5 01 B5 01 
44778     B7 01 B8 01 
4477c     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
44780     BB 01 BC 01 
44784     BC 01 BE 01 
44788     F7 01 C0 01 
4478c     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
44790     C3 01 C4 01 
44794     C5 01 C4 01 
44798     C7 01 C8 01 
4479c     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
447a0     CB 01 CA 01 
447a4     CD 01 10 01 
447a8     DD 01 01 00 
447ac     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
447b0     12 01 F3 01 
447b4     03 00 F1 01 
447b8     F4 01 F4 01 
447bc     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
447c0     22 02 12 01 
447c4     3A 02 09 00 
447c8     65 2C 3B 02 
447cc     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
447d0     66 2C 3F 02 
447d4     40 02 41 02 
447d8     41 02 46 02 
447dc     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
447e0     40 00 81 01 
447e4     86 01 55 02 
447e8     89 01 8A 01 
447ec     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
447f0     5A 02 90 01 
447f4     5C 02 5D 02 
447f8     5E 02 5F 02 
447fc     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
44800     62 02 94 01 
44804     64 02 65 02 
44808     66 02 67 02 
4480c     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
44810     6A 02 62 2C 
44814     6C 02 6D 02 
44818     6E 02 9C 01 
4481c     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
44820     9D 01 73 02 
44824     74 02 9F 01 
44828     76 02 77 02 
4482c     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
44830     7A 02 7B 02 
44834     7C 02 64 2C 
44838     7E 02 7F 02 
4483c     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
44840     82 02 A9 01 
44844     84 02 85 02 
44848     86 02 87 02 
4484c     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
44850     B1 01 B2 01 
44854     45 02 8D 02 
44858     8E 02 8F 02 
4485c     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
44860     B7 01 7B 03 
44864     03 00 FD 03 
44868     FE 03 FF 03 
4486c     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
44870     86 03 88 03 
44874     89 03 8A 03 
44878     B1 03 11 03 
4487c     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
44880     A3 03 A3 03 
44884     C4 03 08 03 
44888     CC 03 03 00 
4488c     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
44890     8F 03 D8 03 
44894     18 01 F2 03 
44898     0A 00 F9 03 
4489c     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
448a0     F5 03 F6 03 
448a4     F7 03 F7 03 
448a8     F9 03 FA 03 
448ac     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
448b0     20 03 50 04 
448b4     10 07 60 04 
448b8     22 01 8A 04 
448bc     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
448c0     0E 01 CF 04 
448c4     01 00 C0 04 
448c8     D0 04 44 01 
448cc     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
448d0     00 00 7D 1D 
448d4     01 00 63 2C 
448d8     00 1E 96 01 
448dc     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
448e0     00 1F 08 06 
448e4     10 1F 06 06 
448e8     20 1F 08 06 
448ec     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
448f0     40 1F 06 06 
448f4     51 1F 07 00 
448f8     59 1F 52 1F 
448fc     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
44900     5D 1F 56 1F 
44904     5F 1F 60 1F 
44908     08 06 70 1F 
4490c     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
44910     BB 1F C8 1F 
44914     C9 1F CA 1F 
44918     CB 1F DA 1F 
4491c     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
44920     F9 1F EA 1F 
44924     EB 1F FA 1F 
44928     FB 1F 80 1F 
4492c     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
44930     08 06 A0 1F 
44934     08 06 B0 1F 
44938     04 00 B8 1F 
4493c     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
44940     BC 1F CC 1F 
44944     01 00 C3 1F 
44948     D0 1F 02 06 
4494c     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
44950     E5 1F 01 00 
44954     EC 1F F3 1F 
44958     01 00 FC 1F 
4495c     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
44960     32 21 70 21 
44964     10 02 84 21 
44968     01 00 83 21 
4496c     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
44970     30 2C 2F 04 
44974     60 2C 02 01 
44978     67 2C 06 01 
4497c     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
44980     80 2C 64 01 
44984     00 2D 26 08 
44988     41 FF 1A 03 
4498c     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
44990     05 07 09 0E 
44994     10 12 14 16 
44998     18 1C 1E 43 
4499c     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
449a0     41 41 43 45 
449a4     45 45 49 49 
449a8     49 41 41 45 
449ac     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
449b0     4F 55 55 59 
449b4     4F 55 4F 9C 
449b8     4F 9E 9F 41 
449bc     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
449c0     A5 A6 A7 A8 
449c4     A9 AA AB AC 
449c8     AD AE AF B0 
449cc     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
449d0     41 41 41 B8 
449d4     B9 BA BB BC 
449d8     BD BE BF C0 
449dc     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
449e0     C5 41 41 C8 
449e4     C9 CA CB CC 
449e8     CD CE CF D1 
449ec     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
449f0     49 49 49 49 
449f4     D9 DA DB DC 
449f8     DD 49 DF 4F 
449fc     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
44a00     4F E6 E8 E8 
44a04     55 55 55 59 
44a08     59 EE EF F0 
44a0c     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
44a10     F5 F6 F7 F8 
44a14     F9 FA FB FC 
44a18     FD FE FF 00 
44a1c     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
44a20     00 00 00 00 | 	byte	$00, $00, $00, $00
44a24     00 00 80 0B | 	long	(184 {_fatfs_cc_v_close})<<20
44a28     00 00 90 0B | 	long	(185 {_fatfs_cc_v_read})<<20
44a2c     00 00 A0 0B | 	long	(186 {_fatfs_cc_v_write})<<20
44a30     00 00 B0 0B | 	long	(187 {_fatfs_cc_v_lseek})<<20
44a34     00 00 C0 0B | 	long	(188 {_fatfs_cc_v_ioctl})<<20
44a38     00 00 D0 0C | 	long	(205 {_fatfs_cc_v_flush})<<20
44a3c     00 00 00 00 
44a40     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
44a44     00 00 D0 0B | 	long	(189 {_fatfs_cc_v_open})<<20
44a48     00 00 E0 0B | 	long	(190 {_fatfs_cc_v_creat})<<20
44a4c     00 00 F0 0B | 	long	(191 {_fatfs_cc_v_opendir})<<20
44a50     00 00 00 0C | 	long	(192 {_fatfs_cc_v_closedir})<<20
44a54     00 00 10 0C | 	long	(193 {_fatfs_cc_v_readdir})<<20
44a58     00 00 20 0C | 	long	(194 {_fatfs_cc_v_stat})<<20
44a5c     00 00 30 0C | 	long	(195 {_fatfs_cc_v_mkdir})<<20
44a60     00 00 40 0C | 	long	(196 {_fatfs_cc_v_rmdir})<<20
44a64     00 00 50 0C | 	long	(197 {_fatfs_cc_v_remove})<<20
44a68     00 00 60 0C | 	long	(198 {_fatfs_cc_v_rename})<<20
44a6c     00 00 70 0C | 	long	(199 {_fatfs_cc_v_init})<<20
44a70     00 00 80 0C | 	long	(200 {_fatfs_cc_v_deinit})<<20
44a74     FF FF FF FF 
44a78     1F 00 00 00 
44a7c     1C 00 00 00 
44a80     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
44a84     1E 00 00 00 
44a88     1F 00 00 00 
44a8c     1E 00 00 00 
44a90     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
44a94     1F 00 00 00 
44a98     1E 00 00 00 
44a9c     1F 00 00 00 
44aa0     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
44aa4     1F 00 00 00 
44aa8     00 00 00 00 
44aac     1F 00 00 00 
44ab0     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
44ab4     5A 00 00 00 
44ab8     78 00 00 00 
44abc     97 00 00 00 
44ac0     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
44ac4     D4 00 00 00 
44ac8     F3 00 00 00 
44acc     11 01 00 00 
44ad0     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
44ad4     4E 01 00 00 
44ad8     6D 01 00 00 
44adc     FF FF FF FF 
44ae0     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
44ae4     00 00 00 00 
      ...             
44afc     00 00 00 00 
44b00     00 00 00 00 | 	byte	$00[32]
44b04     22 4B 04 00 | 	long	@@@_fatfs_cc_dat_ + 1346
44b08     26 4B 04 00 | 	long	@@@_fatfs_cc_dat_ + 1350
44b0c     00 00 00 00 
44b10     00 00 00 00 
44b14     00 00 00 00 
44b18     00 00 00 00 
44b1c     00 00       | 	byte	$00[18]
44b1e     3F 3F 3F 00 
44b22     55 43 54 00 
44b26     55 43 54 00 
44b2a     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
44b2e     00 00 00 00 
44b32     00 00 00    | 	byte	$00[7]
44b35     CA 9A 3B 00 
44b39     00 00 00 01 
44b3d     01 01 01 01 
44b41     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
44b45     91 11 11 11 
44b49     11 01 01 01 
44b4d     01 01 01 01 
44b51     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
44b55     01 01 01 01 
44b59     01 01 01    | 	byte	$01[7]
44b5c     90 20 20 20 
44b60     20 20 20 20 
44b64     20 20 20 20 
44b68     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
44b6c     42 42 42 42 
44b70     42 42 42 42 
44b74     42 42       | 	byte	$42[10]
44b76     20 20 20 20 
44b7a     20 20 20    | 	byte	$20[7]
44b7d     44 44 44 44 
44b81     44 44       | 	byte	$44[6]
44b83     04 04 04 04 
44b87     04 04 04 04 
44b8b     04 04 04 04 
44b8f     04 04 04 04 
44b93     04 04 04 04 | 	byte	$04[20]
44b97     20 20 20 20 
44b9b     20 20       | 	byte	$20[6]
44b9d     48 48 48 48 
44ba1     48 48       | 	byte	$48[6]
44ba3     08 08 08 08 
44ba7     08 08 08 08 
44bab     08 08 08 08 
44baf     08 08 08 08 
44bb3     08 08 08 08 | 	byte	$08[20]
44bb7     20 20 20 20 
44bbb     01 00 00 00 
44bbf     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
44bc0                 | __methodtable__
44bc0     80 6F 01 00 | 	long	@_do_no_command
44bc4     34 1B 02 00 | 	long	@_do_plus
44bc8     54 0B 02 00 | 	long	@_do_minus
44bcc     1C 1A 02 00 | 	long	@_do_or
44bd0     D4 11 02 00 | 	long	@_do_mul
44bd4     18 F6 01 00 | 	long	@_do_fdiv
44bd8     04 EE 01 00 | 	long	@_do_and
44bdc     1C EF 01 00 | 	long	@_do_div
44be0     B4 0F 02 00 | 	long	@_do_mod
44be4     E8 21 02 00 | 	long	@_do_shl
44be8     00 23 02 00 | 	long	@_do_shr
44bec     20 20 02 00 | 	long	@_do_power
44bf0     BC E3 01 00 | 	long	@_do_getvar
44bf4     64 A4 01 00 | 	long	@_do_push
44bf8     B4 DD 01 00 | 	long	@_do_assign
44bfc     20 FA 00 00 | 	long	@_do_cls
44c00     4C 69 01 00 | 	long	@_do_new
44c04     A8 9C 01 00 | 	long	@_do_plot
44c08     9C 23 01 00 | 	long	@_do_draw
44c0c     10 9F 01 00 | 	long	@_do_print
44c10     00 F8 00 00 | 	long	@_do_circle
44c14     D0 25 01 00 | 	long	@_do_fcircle
44c18     F8 E4 00 00 | 	long	@_do_box
44c1c     08 2F 01 00 | 	long	@_do_frame
44c20     DC FC 00 00 | 	long	@_do_color
44c24     98 2C 01 00 | 	long	@_do_for
44c28     B8 6B 01 00 | 	long	@_do_next
44c2c     58 56 01 00 | 	long	@_do_list
44c30     88 C0 01 00 | 	long	@_do_run
44c34     F8 24 01 00 | 	long	@_do_error
44c38     60 3C 01 00 | 	long	@_do_fast_goto
44c3c     50 3D 01 00 | 	long	@_do_find_goto
44c40     64 3F 01 00 | 	long	@_do_slow_goto
44c44     A0 6F 01 00 | 	long	@_do_nothing
44c48     A4 C4 01 00 | 	long	@_do_save
44c4c     F4 58 01 00 | 	long	@_do_load
44c50     AC 8B 01 00 | 	long	@_do_pinwrite
44c54     F4 DA 01 00 | 	long	@_do_waitms
44c58     28 DC 01 00 | 	long	@_do_waitvbl
44c5c     58 42 01 00 | 	long	@_do_if
44c60     90 24 01 00 | 	long	@_do_else
44c64     3C F1 01 00 | 	long	@_do_eq
44c68     E0 F7 01 00 | 	long	@_do_ge
44c6c     AC 01 02 00 | 	long	@_do_le
44c70     C8 FC 01 00 | 	long	@_do_gt
44c74     88 06 02 00 | 	long	@_do_lt
44c78     40 15 02 00 | 	long	@_do_ne
44c7c     F0 BD 01 00 | 	long	@_do_rnd
44c80     E0 E6 00 00 | 	long	@_do_brun
44c84     7C E0 00 00 | 	long	@_do_beep
44c88     2C 1C 01 00 | 	long	@_do_dir
44c8c     E0 87 01 00 | 	long	@_do_paper
44c90     14 46 01 00 | 	long	@_do_ink
44c94     1C 2C 01 00 | 	long	@_do_font
44c98     C0 63 01 00 | 	long	@_do_mode
44c9c     08 68 01 00 | 	long	@_do_mouse
44ca0     E0 3A 01 00 | 	long	@_do_gettime
44ca4     18 02 01 00 | 	long	@_do_cursor
44ca8     78 F9 00 00 | 	long	@_do_click
44cac     C4 68 01 00 | 	long	@_do_mousex
44cb0     08 69 01 00 | 	long	@_do_mousey
44cb4     3C 68 01 00 | 	long	@_do_mousek
44cb8     80 68 01 00 | 	long	@_do_mousew
44cbc     5C D0 01 00 | 	long	@_do_sin
44cc0     94 D3 01 00 | 	long	@_do_stick
44cc4     24 D5 01 00 | 	long	@_do_strig
44cc8     B4 D1 01 00 | 	long	@_do_sprite
44ccc     50 17 01 00 | 	long	@_do_defsprite
44cd0     8C 39 01 00 | 	long	@_do_getpixel
44cd4     D0 DA 01 00 | 	long	@_do_waitclock
44cd8     04 0F 02 00 | 	long	@_do_negative
44cdc     E8 AA 01 00 | 	long	@_do_rdpin
44ce0     14 C0 01 00 | 	long	@_do_rqpin
44ce4     D8 89 01 00 | 	long	@_do_pinread
44ce8     34 DC 01 00 | 	long	@_do_wrpin
44cec     B4 DC 01 00 | 	long	@_do_wxpin
44cf0     34 DD 01 00 | 	long	@_do_wypin
44cf4     18 89 01 00 | 	long	@_do_pinfloat
44cf8     98 89 01 00 | 	long	@_do_pinlo
44cfc     58 89 01 00 | 	long	@_do_pinhi
44d00     5C 8A 01 00 | 	long	@_do_pinstart
44d04     6C 8B 01 00 | 	long	@_do_pintoggle
44d08     88 9E 01 00 | 	long	@_do_position
44d0c     F4 00 01 00 | 	long	@_do_cos
44d10     B4 D6 01 00 | 	long	@_do_tan
44d14     64 DF 00 00 | 	long	@_do_atn
44d18     54 DE 00 00 | 	long	@_do_asin
44d1c     E4 DB 00 00 | 	long	@_do_acos
44d20     A0 D2 01 00 | 	long	@_do_sqr
44d24     B4 26 01 00 | 	long	@_do_fill
44d28     60 0E 01 00 | 	long	@_do_defsnd
44d2c     60 03 01 00 | 	long	@_do_defenv
44d30     C0 AA 01 00 | 	long	@_do_rad
44d34     C4 1A 01 00 | 	long	@_do_deg
44d38     94 46 01 00 | 	long	@_do_int
44d3c     34 8C 01 00 | 	long	@_do_play
44d40     B4 CA 01 00 | 	long	@_do_setdelay
44d44     5C CB 01 00 | 	long	@_do_setenv
44d48     04 CC 01 00 | 	long	@_do_setlen
44d4c     AC CC 01 00 | 	long	@_do_setpan
44d50     FC CD 01 00 | 	long	@_do_setvol
44d54     A4 CE 01 00 | 	long	@_do_setwave
44d58     54 CD 01 00 | 	long	@_do_setsustain
44d5c     E0 BA 01 00 | 	long	@_do_release
44d60     78 37 01 00 | 	long	@_do_getenvsustain
44d64     78 9D 01 00 | 	long	@_do_poke
44d68     C4 22 01 00 | 	long	@_do_dpoke
44d6c     D4 5F 01 00 | 	long	@_do_lpoke
44d70     68 88 01 00 | 	long	@_do_peek
44d74     18 22 01 00 | 	long	@_do_dpeek
44d78     28 5F 01 00 | 	long	@_do_lpeek
44d7c     64 30 01 00 | 	long	@_do_fre
44d80     88 38 01 00 | 	long	@_do_getnotevalue
44d84     74 E9 01 00 | 	long	@_do_getaddr
44d88     3C 43 01 00 | 	long	@_do_inkey
44d8c     64 DB 00 00 | 	long	@_do_abs
44d90     F4 40 01 00 | 	long	@_do_hex
44d94     94 E3 00 00 | 	long	@_do_bin
44d98     C4 D7 01 00 | 	long	@_do_val
44d9c     00 F7 00 00 | 	long	@_do_chr
44da0     F4 DC 00 00 | 	long	@_do_asc
44da4     58 53 01 00 | 	long	@_do_left
44da8     64 BC 01 00 | 	long	@_do_right
44dac     34 61 01 00 | 	long	@_do_mid
44db0     E4 54 01 00 | 	long	@_do_len
44db4     48 3B 01 00 | 	long	@_do_gosub
44db8     B8 BB 01 00 | 	long	@_do_return
44dbc     B4 24 01 00 | 	long	@_do_end
44dc0     50 9E 01 00 | 	long	@_do_pop
44dc4     AC 5D 01 00 | 	long	@_do_log
44dc8     F4 F4 00 00 | 	long	@_do_changevol
44dcc     D4 F5 00 00 | 	long	@_do_changewav
44dd0     E4 F3 00 00 | 	long	@_do_changepan
44dd4     DC EE 00 00 | 	long	@_do_changefreq
44dd8     4C CF 01 00 | 	long	@_do_shutup
44ddc     C0 BF 01 00 | 	long	@_do_round
44de0     E8 24 01 00 | 	long	@_do_enter
44de4     C8 70 01 00 | 	long	@_do_open
44de8     A4 F9 00 00 | 	long	@_do_close
44dec     C8 30 01 00 | 	long	@_do_get
44df0     80 A5 01 00 | 	long	@_do_put
44df4     1C E9 00 00 | 	long	@_do_cd
44df8     EC 1A 01 00 | 	long	@_do_delete
44dfc     00 63 01 00 | 	long	@_do_mkdir
44e00     90 E1 00 00 | 	long	@_do_blit
44e04     30 30 01 00 | 	long	@_do_framebuf
44e08     A4 6F 01 00 | 	long	@_do_on
44e0c     6C D1 01 00 | 	long	@_do_skip
44e10     50 47 01 00 | 	long	@_do_input
44e14     4C AD 01 00 | 	long	@_do_read
44e18     78 BB 01 00 | 	long	@_do_restore
44e1c     60 80 01 00 | 	long	@_do_padx
44e20     E0 82 01 00 | 	long	@_do_pady
44e24     60 85 01 00 | 	long	@_do_padz
44e28     E0 73 01 00 | 	long	@_do_padrx
44e2c     60 76 01 00 | 	long	@_do_padry
44e30     E0 78 01 00 | 	long	@_do_padrz
44e34     E0 7D 01 00 | 	long	@_do_padw
44e38     60 7B 01 00 | 	long	@_do_pads
44e3c     14 FD 00 00 | 	long	@_do_copy
44e40     60 FA 00 00 | 	long	@_do_coginit
44e44     9C FC 00 00 | 	long	@_do_cogstop
44e48     AC 60 01 00 | 	long	@_do_memlo
44e4c     F0 60 01 00 | 	long	@_do_memtop
44e50     48 C8 01 00 | 	long	@_do_setcolor
44e54     6C 36 01 00 | 	long	@_do_getcolor
44e58     4C 02 01 00 | 	long	@_do_defchar
44e5c     B0 BB 01 00 | 	long	@_do_restorepalette
44e60     C8 27 01 00 | 	long	@_do_findfirst
44e64     54 2B 01 00 | 	long	@_do_findnext
44e68     8C 65 02 00 | 	long	@_hg010b_spin2_putchar
44e6c     5C 7B 03 00 | 	long	@__system___struct___bas_wrap_sender_tx_
44e70     A0 7B 03 00 | 	long	@__system___struct___bas_wrap_sender_rx_
44e74     E8 7B 03 00 | 	long	@__system___struct___bas_wrap_sender_close_
44e78     8C 7A 03 00 | 	long	@__system___struct__s_vfs_file_t_putchar_
44e7c     FC 7A 03 00 | 	long	@__system___struct__s_vfs_file_t_getchar_
44e80     44 7A 03 00 | 	long	@__system____strs_cl_pfunc_
44e84     D4 D7 02 00 | 	long	@__system____root_opendir
44e88     70 D8 02 00 | 	long	@__system____root_closedir
44e8c     EC D7 02 00 | 	long	@__system____root_readdir
44e90     78 D8 02 00 | 	long	@__system____root_stat
44e94     C0 D0 02 00 | 	long	@__system____default_putc
44e98     44 D0 02 00 | 	long	@__system____default_getc
44e9c     68 D1 02 00 | 	long	@__system____default_flush
44ea0     4C 65 03 00 | 	long	@_fatfs_cc_v_close
44ea4     68 69 03 00 | 	long	@_fatfs_cc_v_read
44ea8     7C 6A 03 00 | 	long	@_fatfs_cc_v_write
44eac     5C 6B 03 00 | 	long	@_fatfs_cc_v_lseek
44eb0     E4 6B 03 00 | 	long	@_fatfs_cc_v_ioctl
44eb4     38 6C 03 00 | 	long	@_fatfs_cc_v_open
44eb8     B0 64 03 00 | 	long	@_fatfs_cc_v_creat
44ebc     90 65 03 00 | 	long	@_fatfs_cc_v_opendir
44ec0     04 66 03 00 | 	long	@_fatfs_cc_v_closedir
44ec4     44 66 03 00 | 	long	@_fatfs_cc_v_readdir
44ec8     78 67 03 00 | 	long	@_fatfs_cc_v_stat
44ecc     F8 6B 03 00 | 	long	@_fatfs_cc_v_mkdir
44ed0     18 6C 03 00 | 	long	@_fatfs_cc_v_rmdir
44ed4     08 6C 03 00 | 	long	@_fatfs_cc_v_remove
44ed8     28 6C 03 00 | 	long	@_fatfs_cc_v_rename
44edc     48 6D 03 00 | 	long	@_fatfs_cc_v_init
44ee0     50 6D 03 00 | 	long	@_fatfs_cc_v_deinit
44ee4     0C 82 02 00 | 	long	@__system___tx
44ee8     4C 82 02 00 | 	long	@__system___rx
44eec     E8 E3 02 00 | 	long	@__system___rxtxioctl_0786
44ef0     40 E4 02 00 | 	long	@__system____dummy_flush_0787
44ef4     18 6D 03 00 | 	long	@_fatfs_cc_v_flush
44ef8                 | __heap_base
44ef8     00 00 00 00 
      ...             
5c5f8     00 00 00 00 
5c5fc     00 00 00 00 | 	long	0[24002]
5c600                 | objmem
5c600     00 00 00 00 
      ...             
66b70     00 00 00 00 
66b74     00 00 00 00 | 	long	0[10590]
66b78                 | stackspace
66b78     00 00 00 00 | 	long	0[1]
66b7c 100             | 	org	COG_BSS_START
66b7c 100             | _var01
66b7c 100             | 	res	1
66b7c 101             | _var02
66b7c 101             | 	res	1
66b7c 102             | _var03
66b7c 102             | 	res	1
66b7c 103             | _var04
66b7c 103             | 	res	1
66b7c 104             | _var05
66b7c 104             | 	res	1
66b7c 105             | _var06
66b7c 105             | 	res	1
66b7c 106             | _var07
66b7c 106             | 	res	1
66b7c 107             | _var08
66b7c 107             | 	res	1
66b7c 108             | _var09
66b7c 108             | 	res	1
66b7c 109             | arg01
66b7c 109             | 	res	1
66b7c 10a             | arg02
66b7c 10a             | 	res	1
66b7c 10b             | arg03
66b7c 10b             | 	res	1
66b7c 10c             | arg04
66b7c 10c             | 	res	1
66b7c 10d             | arg05
66b7c 10d             | 	res	1
66b7c 10e             | arg06
66b7c 10e             | 	res	1
66b7c 10f             | arg07
66b7c 10f             | 	res	1
66b7c 110             | arg08
66b7c 110             | 	res	1
66b7c 111             | arg09
66b7c 111             | 	res	1
66b7c 112             | arg10
66b7c 112             | 	res	1
66b7c 113             | local01
66b7c 113             | 	res	1
66b7c 114             | local02
66b7c 114             | 	res	1
66b7c 115             | local03
66b7c 115             | 	res	1
66b7c 116             | local04
66b7c 116             | 	res	1
66b7c 117             | local05
66b7c 117             | 	res	1
66b7c 118             | local06
66b7c 118             | 	res	1
66b7c 119             | local07
66b7c 119             | 	res	1
66b7c 11a             | local08
66b7c 11a             | 	res	1
66b7c 11b             | local09
66b7c 11b             | 	res	1
66b7c 11c             | local10
66b7c 11c             | 	res	1
66b7c 11d             | local11
66b7c 11d             | 	res	1
66b7c 11e             | local12
66b7c 11e             | 	res	1
66b7c 11f             | local13
66b7c 11f             | 	res	1
66b7c 120             | local14
66b7c 120             | 	res	1
66b7c 121             | local15
66b7c 121             | 	res	1
66b7c 122             | local16
66b7c 122             | 	res	1
66b7c 123             | local17
66b7c 123             | 	res	1
66b7c 124             | local18
66b7c 124             | 	res	1
66b7c 125             | local19
66b7c 125             | 	res	1
66b7c 126             | local20
66b7c 126             | 	res	1
66b7c 127             | local21
66b7c 127             | 	res	1
66b7c 128             | local22
66b7c 128             | 	res	1
66b7c 129             | local23
66b7c 129             | 	res	1
66b7c 12a             | local24
66b7c 12a             | 	res	1
66b7c 12b             | local25
66b7c 12b             | 	res	1
66b7c 12c             | local26
66b7c 12c             | 	res	1
66b7c 12d             | local27
66b7c 12d             | 	res	1
66b7c 12e             | local28
66b7c 12e             | 	res	1
66b7c 12f             | local29
66b7c 12f             | 	res	1
66b7c 130             | local30
66b7c 130             | 	res	1
66b7c 131             | local31
66b7c 131             | 	res	1
66b7c 132             | local32
66b7c 132             | 	res	1
66b7c 133             | local33
66b7c 133             | 	res	1
66b7c 134             | local34
66b7c 134             | 	res	1
66b7c 135             | local35
66b7c 135             | 	res	1
66b7c 136             | local36
66b7c 136             | 	res	1
66b7c 137             | local37
66b7c 137             | 	res	1
66b7c 138             | local38
66b7c 138             | 	res	1
66b7c 139             | local39
66b7c 139             | 	res	1
66b7c 13a             | local40
66b7c 13a             | 	res	1
66b7c 13b             | local41
66b7c 13b             | 	res	1
66b7c 13c             | local42
66b7c 13c             | 	res	1
66b7c 13d             | local43
66b7c 13d             | 	res	1
66b7c 13e             | local44
66b7c 13e             | 	res	1
66b7c 13f             | local45
66b7c 13f             | 	res	1
66b7c 140             | local46
66b7c 140             | 	res	1
66b7c 141             | local47
66b7c 141             | 	res	1
66b7c 142             | local48
66b7c 142             | 	res	1
66b7c 143             | local49
66b7c 143             | 	res	1
66b7c 144             | local50
66b7c 144             | 	res	1
66b7c 145             | local51
66b7c 145             | 	res	1
66b7c 146             | local52
66b7c 146             | 	res	1
66b7c 147             | local53
66b7c 147             | 	res	1
66b7c 148             | muldiva_
66b7c 148             | 	res	1
66b7c 149             | muldivb_
66b7c 149             | 	res	1
66b7c 14a             | 	fit	480
66b7c 14a             | 
