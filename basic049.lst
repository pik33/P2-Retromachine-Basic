00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic049.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 49
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_blit = 185
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_padx = 200
00000                 | 	token_pady = 201
00000                 | 	token_padz = 202
00000                 | 	token_padh = 203
00000                 | 	token_padrx = 204
00000                 | 	token_padry = 205
00000                 | 	token_padrz = 206
00000                 | 	token_cogstop = 207
00000                 | 	token_memlo = 208
00000                 | 	token_memtop = 209
00000                 | 	token_setcolor = 210
00000                 | 	token_getcolor = 211
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 78 39 A2 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 49 93 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 48 91 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 49 91 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 92 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 90 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 48 91 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 49 93 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 6C 3C 04 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 48 39 04 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 74 B3 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 28 2C 04 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 80 27 04 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 88 7C 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 68 33 04 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 F8 AD 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 A8 ED 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 60 EB 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 38 FD 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 94 58 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     28 4A B2 FD | 	call	#_hg010b_spin2_waitvbl
00824     EC 5E B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D0 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10192
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D0 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10192
00840     52 00 00 FF 
00844     E0 E4 05 F1 | 	add	objptr, ##42208
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     52 00 00 FF 
00850     E0 E4 85 F1 | 	sub	objptr, ##42208
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     3C E5 05 F1 | 	add	objptr, ##41276
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     3C E5 85 F1 | 	sub	objptr, ##41276
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 32 06 F6 | 	mov	local07, ##44100
00890     0C 34 C6 F9 | 	decod	local08, #12
00894     00 36 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 38 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     2C 62 B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     80 69 B2 FD | 	call	#__system___waitms
008e4     07 30 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     78 63 B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 2E 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     17 31 02 C6 |  if_b	mov	local06, local05
00914     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
0091c     17 2B 02 C6 |  if_b	mov	local03, local05
00920     01 26 06 C6 |  if_b	mov	local01, #1
00924     15 2D 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 28 06 36 |  if_ae	mov	local02, #0
00934     00 26 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 2E 0E F2 | 	cmp	local05, #0 wz
0093c     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 28 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00950     15 2D 02 86 |  if_c_and_z	mov	local04, local03
00954     15 28 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 2C 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     3C E5 05 F1 | 	add	objptr, ##41276
00968     F2 30 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     3C E5 85 F1 | 	sub	objptr, ##41276
00974     01 30 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     52 00 00 FF 
00980     A4 E4 05 F1 | 	add	objptr, ##42148
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 32 06 F6 | 	mov	local07, ##44100
00990     0C 34 C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 36 02 FB | 	rdlong	local09, objptr
0099c     01 38 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     1B 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     D4 E5 85 F1 | 	sub	objptr, ##36308
009c0     3C 61 B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     16 13 02 F6 | 	mov	arg01, local04
009d0     00 2F B2 FD | 	call	#_scantochar
009d4     FD 3A 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     52 00 00 FF 
009dc     E0 E4 05 F1 | 	add	objptr, ##42208
009e0     F2 3C 02 FB | 	rdlong	local12, objptr
009e4     52 00 00 FF 
009e8     E0 E4 85 F1 | 	sub	objptr, ##42208
009ec     1E 31 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 3A 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 3A 16 F2 | 	cmp	local11, #123 wc
00a00     20 3A 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 3A 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a14     20 3A 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 3A 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 3A 16 F2 | 	cmp	local11, #32 wc
00a28     09 3A 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 3A 16 F2 | 	cmp	local11, #23 wc
00a3c     27 3A 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 3A 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     52 00 00 FF 
00a64     C8 E4 05 F1 | 	add	objptr, ##42184
00a68     F2 30 0A FB | 	rdlong	local06, objptr wz
00a6c     52 00 00 FF 
00a70     C8 E4 85 F1 | 	sub	objptr, ##42184
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 32 C2 FA | 	rdbyte	local07, objptr
00a80     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a84     80 34 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 3E 02 FB | 	rdlong	local13, objptr
00a90     1F 41 02 F6 | 	mov	local14, local13
00a94     1A 41 02 F1 | 	add	local14, local08
00a98     7F 40 06 F1 | 	add	local14, #127
00a9c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 32 06 FA | 	mul	local07, #128
00aa4     19 3F 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 36 E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     1B 43 52 F6 | 	abs	local15, local09 wc
00ab8     01 42 46 F0 | 	shr	local15, #1
00abc     21 3F 82 F3 | 	sumc	local13, local15
00ac0     01 3E 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     20 45 02 F6 | 	mov	local16, local14
00ac8     01 44 86 F1 | 	sub	local16, #1
00acc     22 13 02 F6 | 	mov	arg01, local16
00ad0     F8 2C B2 FD | 	call	#_pspeek
00ad4     FD 46 02 F6 | 	mov	local17, result1
00ad8     23 49 E2 F8 | 	getbyte	local18, local17, #0
00adc     24 4B 02 F6 | 	mov	local19, local18
00ae0     20 13 02 F6 | 	mov	arg01, local14
00ae4     25 15 02 F6 | 	mov	arg02, local19
00ae8     98 2C B2 FD | 	call	#_pspoke
00aec     01 40 86 F1 | 	sub	local14, #1
00af0     1F 41 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     52 00 00 FF 
00afc     E8 E4 05 F1 | 	add	objptr, ##42216
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     52 00 00 FF 
00b08     AA E4 85 F1 | 	sub	objptr, ##42154
00b0c     F2 32 C2 FA | 	rdbyte	local07, objptr
00b10     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b14     80 34 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 36 02 FB | 	rdlong	local09, objptr
00b20     1B 41 02 F6 | 	mov	local14, local09
00b24     1A 41 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 42 E2 FA | 	rdword	local15, objptr
00b30     21 39 32 F9 | 	getword	local10, local15, #0
00b34     1C 4D 52 F6 | 	abs	local20, local10 wc
00b38     01 4C 46 F0 | 	shr	local20, #1
00b3c     26 4D 82 F6 | 	negc	local20, local20
00b40     26 41 02 F1 | 	add	local14, local20
00b44     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b48     80 32 06 FA | 	mul	local07, #128
00b4c     1B 35 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     1A 4F 02 F6 | 	mov	local21, local08
00b58     19 4F 02 F1 | 	add	local21, local07
00b5c     80 4E 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     27 41 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 30 E2 FA | 	rdword	local06, objptr
00b70     52 00 00 FF 
00b74     AC E4 05 F1 | 	add	objptr, ##42156
00b78     F2 34 02 FB | 	rdlong	local08, objptr
00b7c     01 34 66 F0 | 	shl	local08, #1
00b80     1A 31 02 F1 | 	add	local06, local08
00b84     52 00 00 FF 
00b88     AA E4 85 F1 | 	sub	objptr, ##42154
00b8c     F2 3C C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 3C 06 FA | 	mul	local12, #16
00b98     04 3C 06 F1 | 	add	local12, #4
00b9c     20 13 02 F6 | 	mov	arg01, local14
00ba0     28 2C B2 FD | 	call	#_pspeek
00ba4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 34 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 38 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     1C 37 02 F6 | 	mov	local09, local10
00bc0     18 13 02 F6 | 	mov	arg01, local06
00bc4     1E 15 02 F6 | 	mov	arg02, local12
00bc8     19 17 02 F6 | 	mov	arg03, local07
00bcc     1A 19 02 F6 | 	mov	arg04, local08
00bd0     1B 1B 02 F6 | 	mov	arg05, local09
00bd4     70 44 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     52 00 00 FF 
00bdc     E8 E4 05 F1 | 	add	objptr, ##42216
00be0     F2 30 02 FB | 	rdlong	local06, objptr
00be4     01 30 06 F1 | 	add	local06, #1
00be8     F2 30 62 FC | 	wrlong	local06, objptr
00bec     52 00 00 FF 
00bf0     E8 E4 85 F1 | 	sub	objptr, ##42216
00bf4     01 40 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     1D 13 02 F6 | 	mov	arg01, local11
00c00     BC 47 B2 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 3A 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 30 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 30 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     3C E5 05 A1 |  if_e	add	objptr, ##41276
00c2c     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     3C E5 85 A1 |  if_e	sub	objptr, ##41276
00c38     1A 33 02 A6 |  if_e	mov	local07, local08
00c3c     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 32 06 F6 | 	mov	local07, ##44100
00c60     0C 34 C6 F9 | 	decod	local08, #12
00c64     00 36 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 38 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     68 5E B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     BC 65 B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     B8 5F B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     B5 01 00 FF 
00ccc     0A 51 06 F6 | 	mov	local22, ##@LR__5427
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 40 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 40 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 42 C2 FA | 	rdbyte	local15, objptr
00cf4     80 42 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     21 13 02 F1 | 	add	arg01, local15
00d08     20 13 02 F1 | 	add	arg01, local14
00d0c     BC 2A B2 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     98 84 B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     28 13 02 F6 | 	mov	arg01, local22
00d20     A8 62 B2 FD | 	call	#__system___string_concat
00d24     FD 50 02 F6 | 	mov	local22, result1
00d28     01 40 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     52 00 00 FF 
00d34     C8 E4 05 F1 | 	add	objptr, ##42184
00d38     F2 30 0A FB | 	rdlong	local06, objptr wz
00d3c     52 00 00 FF 
00d40     C8 E4 85 F1 | 	sub	objptr, ##42184
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 32 C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 32 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     0C 4C B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     3C 4E B2 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     28 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 30 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 30 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     3C E5 05 F1 | 	add	objptr, ##41276
00da0     F2 34 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     3C E5 85 F1 | 	sub	objptr, ##41276
00dac     1A 33 02 F6 | 	mov	local07, local08
00db0     01 32 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 32 06 F6 | 	mov	local07, ##44100
00dd4     0E 34 C6 F9 | 	decod	local08, #14
00dd8     00 36 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 38 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     F4 5C B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     48 64 B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     44 5E B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 40 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 36 C2 FA | 	rdbyte	local09, objptr
00e48     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e4c     1A 39 02 F6 | 	mov	local10, local08
00e50     80 38 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 42 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     21 33 02 F6 | 	mov	local07, local15
00e64     1C 33 02 F1 | 	add	local07, local10
00e68     20 33 02 F1 | 	add	local07, local14
00e6c     19 13 02 F6 | 	mov	arg01, local07
00e70     58 29 B2 FD | 	call	#_pspeek
00e74     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 30 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 40 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     20 33 02 F6 | 	mov	local07, local14
00e8c     01 32 66 F0 | 	shl	local07, #1
00e90     19 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     4C 43 B2 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     40 43 B2 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 40 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 30 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 3C 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1E 31 02 F6 | 	mov	local06, local12
00ee4     18 41 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 34 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     1A 33 02 F6 | 	mov	local07, local08
00f04     19 3D 02 F6 | 	mov	local12, local07
00f08     01 3C 66 F0 | 	shl	local12, #1
00f0c     1E 31 02 F6 | 	mov	local06, local12
00f10     18 13 02 F6 | 	mov	arg01, local06
00f14     D0 42 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 3A 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 34 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     1A 33 02 F6 | 	mov	local07, local08
00f38     19 3D 02 F6 | 	mov	local12, local07
00f3c     01 3C 66 F0 | 	shl	local12, #1
00f40     1E 31 02 F6 | 	mov	local06, local12
00f44     18 13 02 F6 | 	mov	arg01, local06
00f48     9C 42 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f50     00 30 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     BC 42 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f60     24 30 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     AC 42 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 32 C2 FA | 	rdbyte	local07, objptr
00f7c     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f80     80 34 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 52 02 FB | 	rdlong	local23, objptr
00f8c     29 41 02 F6 | 	mov	local14, local23
00f90     1A 41 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 38 E2 FA | 	rdword	local10, objptr
00f9c     1C 4D 52 F6 | 	abs	local20, local10 wc
00fa0     01 4C 46 F0 | 	shr	local20, #1
00fa4     26 41 82 F3 | 	sumc	local14, local20
00fa8     19 33 E2 F8 | 	getbyte	local07, local07, #0
00fac     80 32 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     19 53 02 F1 | 	add	local23, local07
00fb8     80 52 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     29 41 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     20 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     FC 27 B2 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     20 13 02 F6 | 	mov	arg01, local14
00fd8     A8 27 B2 FD | 	call	#_pspoke
00fdc     01 40 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 36 C2 FA | 	rdbyte	local09, objptr
00fec     80 36 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     1B 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     78 27 B2 FD | 	call	#_pspoke
0100c     52 00 00 FF 
01010     E8 E4 05 F1 | 	add	objptr, ##42216
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     52 00 00 FF 
0101c     AA E4 85 F1 | 	sub	objptr, ##42154
01020     F2 3C C2 FA | 	rdbyte	local12, objptr
01024     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01028     80 34 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 36 02 FB | 	rdlong	local09, objptr
01034     1B 41 02 F6 | 	mov	local14, local09
01038     1A 41 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 42 E2 FA | 	rdword	local15, objptr
01044     21 39 32 F9 | 	getword	local10, local15, #0
01048     1C 4D 52 F6 | 	abs	local20, local10 wc
0104c     01 4C 46 F0 | 	shr	local20, #1
01050     26 4D 82 F6 | 	negc	local20, local20
01054     26 41 02 F1 | 	add	local14, local20
01058     1E 31 E2 F8 | 	getbyte	local06, local12, #0
0105c     18 33 02 F6 | 	mov	local07, local06
01060     80 32 06 FA | 	mul	local07, #128
01064     1B 35 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     1A 55 02 F6 | 	mov	local24, local08
01070     19 55 02 F1 | 	add	local24, local07
01074     80 54 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     2A 41 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 30 E2 FA | 	rdword	local06, objptr
01088     52 00 00 FF 
0108c     AC E4 05 F1 | 	add	objptr, ##42156
01090     F2 34 02 FB | 	rdlong	local08, objptr
01094     01 34 66 F0 | 	shl	local08, #1
01098     1A 31 02 F1 | 	add	local06, local08
0109c     52 00 00 FF 
010a0     AA E4 85 F1 | 	sub	objptr, ##42154
010a4     F2 3C C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 3C 06 FA | 	mul	local12, #16
010b0     04 3C 06 F1 | 	add	local12, #4
010b4     20 13 02 F6 | 	mov	arg01, local14
010b8     10 27 B2 FD | 	call	#_pspeek
010bc     FD 32 E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 34 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 38 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     1C 37 02 F6 | 	mov	local09, local10
010d8     18 13 02 F6 | 	mov	arg01, local06
010dc     1E 15 02 F6 | 	mov	arg02, local12
010e0     19 17 02 F6 | 	mov	arg03, local07
010e4     1A 19 02 F6 | 	mov	arg04, local08
010e8     1B 1B 02 F6 | 	mov	arg05, local09
010ec     58 3F B2 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     52 00 00 FF 
010f4     E8 E4 05 F1 | 	add	objptr, ##42216
010f8     F2 30 02 FB | 	rdlong	local06, objptr
010fc     01 30 06 F1 | 	add	local06, #1
01100     F2 30 62 FC | 	wrlong	local06, objptr
01104     52 00 00 FF 
01108     E8 E4 85 F1 | 	sub	objptr, ##42216
0110c     20 31 02 F6 | 	mov	local06, local14
01110     20 3D 02 F6 | 	mov	local12, local14
01114     01 3C 06 F1 | 	add	local12, #1
01118     1E 41 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 3A 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 3C E2 FA | 	rdword	local12, objptr
01130     1E 31 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 36 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     1B 35 02 F6 | 	mov	local08, local09
0114c     1A 33 02 F6 | 	mov	local07, local08
01150     01 32 66 F0 | 	shl	local07, #1
01154     19 31 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     34 40 B2 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 32 C2 FA | 	rdbyte	local07, objptr
01180     19 35 E2 F8 | 	getbyte	local08, local07, #0
01184     80 34 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 56 02 FB | 	rdlong	local25, objptr
01190     2B 41 02 F6 | 	mov	local14, local25
01194     1A 41 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 38 E2 FA | 	rdword	local10, objptr
011a0     1C 4D 52 F6 | 	abs	local20, local10 wc
011a4     01 4C 46 F0 | 	shr	local20, #1
011a8     26 41 82 F3 | 	sumc	local14, local20
011ac     19 33 E2 F8 | 	getbyte	local07, local07, #0
011b0     80 32 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     19 57 02 F1 | 	add	local25, local07
011bc     80 56 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     2B 41 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     20 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     F8 25 B2 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     20 13 02 F6 | 	mov	arg01, local14
011dc     A4 25 B2 FD | 	call	#_pspoke
011e0     01 40 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 36 C2 FA | 	rdbyte	local09, objptr
011f0     80 36 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     1B 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     74 25 B2 FD | 	call	#_pspoke
01210     52 00 00 FF 
01214     E8 E4 05 F1 | 	add	objptr, ##42216
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     52 00 00 FF 
01220     AA E4 85 F1 | 	sub	objptr, ##42154
01224     F2 3C C2 FA | 	rdbyte	local12, objptr
01228     1E 35 E2 F8 | 	getbyte	local08, local12, #0
0122c     80 34 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 36 02 FB | 	rdlong	local09, objptr
01238     1B 41 02 F6 | 	mov	local14, local09
0123c     1A 41 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 42 E2 FA | 	rdword	local15, objptr
01248     21 39 32 F9 | 	getword	local10, local15, #0
0124c     1C 4D 52 F6 | 	abs	local20, local10 wc
01250     01 4C 46 F0 | 	shr	local20, #1
01254     26 4D 82 F6 | 	negc	local20, local20
01258     26 41 02 F1 | 	add	local14, local20
0125c     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01260     18 33 02 F6 | 	mov	local07, local06
01264     80 32 06 FA | 	mul	local07, #128
01268     1B 35 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     1A 59 02 F6 | 	mov	local26, local08
01274     19 59 02 F1 | 	add	local26, local07
01278     80 58 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     2C 41 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 30 E2 FA | 	rdword	local06, objptr
0128c     52 00 00 FF 
01290     AC E4 05 F1 | 	add	objptr, ##42156
01294     F2 34 02 FB | 	rdlong	local08, objptr
01298     01 34 66 F0 | 	shl	local08, #1
0129c     1A 31 02 F1 | 	add	local06, local08
012a0     52 00 00 FF 
012a4     AA E4 85 F1 | 	sub	objptr, ##42154
012a8     F2 3C C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 3C 06 FA | 	mul	local12, #16
012b4     04 3C 06 F1 | 	add	local12, #4
012b8     20 13 02 F6 | 	mov	arg01, local14
012bc     0C 25 B2 FD | 	call	#_pspeek
012c0     FD 32 E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 34 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 38 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     1C 37 02 F6 | 	mov	local09, local10
012dc     18 13 02 F6 | 	mov	arg01, local06
012e0     1E 15 02 F6 | 	mov	arg02, local12
012e4     19 17 02 F6 | 	mov	arg03, local07
012e8     1A 19 02 F6 | 	mov	arg04, local08
012ec     1B 1B 02 F6 | 	mov	arg05, local09
012f0     54 3D B2 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     52 00 00 FF 
012f8     E8 E4 05 F1 | 	add	objptr, ##42216
012fc     F2 30 02 FB | 	rdlong	local06, objptr
01300     01 30 06 F1 | 	add	local06, #1
01304     F2 30 62 FC | 	wrlong	local06, objptr
01308     52 00 00 FF 
0130c     E8 E4 85 F1 | 	sub	objptr, ##42216
01310     20 31 02 F6 | 	mov	local06, local14
01314     20 3D 02 F6 | 	mov	local12, local14
01318     01 3C 06 F1 | 	add	local12, #1
0131c     1E 41 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     B5 01 00 FF 
01328     0B 51 06 F6 | 	mov	local22, ##@LR__5428
0132c     04 30 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 3A 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     52 00 00 FF 
01354     8E E4 05 F1 | 	add	objptr, ##42126
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     52 00 00 FF 
01360     CC E4 85 F1 | 	sub	objptr, ##42188
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     52 00 00 CF 
0136c     CC E4 05 C1 |  if_b	add	objptr, ##42188
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     52 00 00 CF 
01378     CC E4 85 C1 |  if_b	sub	objptr, ##42188
0137c     52 00 00 FF 
01380     CC E4 05 F1 | 	add	objptr, ##42188
01384     F2 3C 02 FB | 	rdlong	local12, objptr
01388     52 00 00 FF 
0138c     CC E4 85 F1 | 	sub	objptr, ##42188
01390     1E 31 02 F6 | 	mov	local06, local12
01394     18 13 02 F6 | 	mov	arg01, local06
01398     7C 3E B2 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 3A 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     52 00 00 FF 
013b4     8E E4 05 F1 | 	add	objptr, ##42126
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     52 00 00 FF 
013c0     CC E4 85 F1 | 	sub	objptr, ##42188
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     52 00 00 3F 
013cc     CC E4 05 31 |  if_ae	add	objptr, ##42188
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     52 00 00 3F 
013d8     CC E4 85 31 |  if_ae	sub	objptr, ##42188
013dc     52 00 00 FF 
013e0     CC E4 05 F1 | 	add	objptr, ##42188
013e4     F2 3C 02 FB | 	rdlong	local12, objptr
013e8     52 00 00 FF 
013ec     CC E4 85 F1 | 	sub	objptr, ##42188
013f0     1E 31 02 F6 | 	mov	local06, local12
013f4     18 13 02 F6 | 	mov	arg01, local06
013f8     1C 3E B2 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 3A 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 30 E2 FA | 	rdword	local06, objptr
0140c     02 30 86 F1 | 	sub	local06, #2
01410     52 00 00 FF 
01414     94 E4 05 F1 | 	add	objptr, ##42132
01418     F2 30 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1B 00 00 FF 
01420     9C E4 85 F1 | 	sub	objptr, ##13980
01424     F2 34 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     1A 33 02 F6 | 	mov	local07, local08
01434     19 31 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 30 02 CB |  if_b	rdlong	local06, objptr
01444     1B 00 00 CF 
01448     9C E4 05 C1 |  if_b	add	objptr, ##13980
0144c     F2 30 62 CC |  if_b	wrlong	local06, objptr
01450     52 00 00 CF 
01454     D0 E4 85 C1 |  if_b	sub	objptr, ##42192
01458     52 00 00 FF 
0145c     D0 E4 05 F1 | 	add	objptr, ##42192
01460     F2 3C 02 FB | 	rdlong	local12, objptr
01464     52 00 00 FF 
01468     D0 E4 85 F1 | 	sub	objptr, ##42192
0146c     1E 31 02 F6 | 	mov	local06, local12
01470     18 13 02 F6 | 	mov	arg01, local06
01474     70 3D B2 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 3A 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     52 00 00 FF 
01490     94 E4 05 F1 | 	add	objptr, ##42132
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     52 00 00 FF 
0149c     D0 E4 85 F1 | 	sub	objptr, ##42192
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     52 00 00 3F 
014a8     D0 E4 05 31 |  if_ae	add	objptr, ##42192
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     52 00 00 3F 
014b4     D0 E4 85 31 |  if_ae	sub	objptr, ##42192
014b8     52 00 00 FF 
014bc     D0 E4 05 F1 | 	add	objptr, ##42192
014c0     F2 30 02 FB | 	rdlong	local06, objptr
014c4     52 00 00 FF 
014c8     D0 E4 85 F1 | 	sub	objptr, ##42192
014cc     18 13 02 F6 | 	mov	arg01, local06
014d0     14 3D B2 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 3A 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     52 00 00 FF 
014e0     C8 E4 05 F1 | 	add	objptr, ##42184
014e4     F2 30 02 FB | 	rdlong	local06, objptr
014e8     18 3D 22 F6 | 	not	local12, local06
014ec     F2 3C 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     52 00 00 FF 
014f4     C8 E4 85 F1 | 	sub	objptr, ##42184
014f8     00 3C 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 30 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     60 2B B2 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 30 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     50 2B B2 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 2C 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     52 00 00 FF 
01544     4B E4 05 F1 | 	add	objptr, ##42059
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     52 00 00 FF 
01558     94 E4 85 F1 | 	sub	objptr, ##42132
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     FC 5C B2 FD | 	call	#__system___waitms
01568     52 00 00 FF 
0156c     94 E4 05 F1 | 	add	objptr, ##42132
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     52 00 00 FF 
01580     94 E4 85 F1 | 	sub	objptr, ##42132
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     D4 5C B2 FD | 	call	#__system___waitms
01590     52 00 00 FF 
01594     94 E4 05 F1 | 	add	objptr, ##42132
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     52 00 00 FF 
015a8     94 E4 85 F1 | 	sub	objptr, ##42132
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     AC 5C B2 FD | 	call	#__system___waitms
015b8     52 00 00 FF 
015bc     94 E4 05 F1 | 	add	objptr, ##42132
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     52 00 00 FF 
015d0     94 E4 85 F1 | 	sub	objptr, ##42132
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     08 4A 05 F6 | 	mov	COUNT_, #8
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10401
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     48 E5 05 F1 | 	add	objptr, ##41800
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     AD F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10413
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     50 E5 85 F1 | 	sub	objptr, ##41808
01644     00 26 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0
01648                 | ' for j=0 to 6
01648     00 28 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     14 13 02 F6 | 	mov	arg01, local02
01650     BC 51 B2 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     6C 01 90 CD |  if_b	jmp	#LR__0061
0165c     14 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     0C 52 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 2A 02 F6 | 	mov	local03, result1
0166c     14 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     FC 51 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     FD 2C 02 F6 | 	mov	local04, result1
0167c     14 13 02 F6 | 	mov	arg01, local02
01680     02 14 06 F6 | 	mov	arg02, #2
01684     EC 51 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01688     FD 2E 02 F6 | 	mov	local05, result1
0168c     14 13 02 F6 | 	mov	arg01, local02
01690     00 14 06 F6 | 	mov	arg02, #0
01694     2C 52 B2 FD | 	call	#_usbnew_spin2_hidpad_hat
01698     FD 30 02 F6 | 	mov	local06, result1
0169c     14 13 02 F6 | 	mov	arg01, local02
016a0     03 14 06 F6 | 	mov	arg02, #3
016a4     CC 51 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016a8     FD 32 02 F6 | 	mov	local07, result1
016ac     14 13 02 F6 | 	mov	arg01, local02
016b0     04 14 06 F6 | 	mov	arg02, #4
016b4     BC 51 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016b8     FD 34 02 F6 | 	mov	local08, result1
016bc     14 13 02 F6 | 	mov	arg01, local02
016c0     05 14 06 F6 | 	mov	arg02, #5
016c4     AC 51 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016c8     FD 14 02 F6 | 	mov	arg02, result1
016cc     13 FB 01 F6 | 	mov	result1, local01
016d0     02 FA 65 F0 | 	shl	result1, #2
016d4     51 00 00 FF 
016d8     58 E5 05 F1 | 	add	objptr, ##41816
016dc     F2 FA 01 F1 | 	add	result1, objptr
016e0     FD 2A 62 FC | 	wrlong	local03, result1
016e4     13 FB 01 F6 | 	mov	result1, local01
016e8     02 FA 65 F0 | 	shl	result1, #2
016ec     1C E4 05 F1 | 	add	objptr, #28
016f0     F2 FA 01 F1 | 	add	result1, objptr
016f4     FD 2C 62 FC | 	wrlong	local04, result1
016f8     13 FB 01 F6 | 	mov	result1, local01
016fc     02 FA 65 F0 | 	shl	result1, #2
01700     1C E4 05 F1 | 	add	objptr, #28
01704     F2 FA 01 F1 | 	add	result1, objptr
01708     FD 2E 62 FC | 	wrlong	local05, result1
0170c     13 2F 02 F6 | 	mov	local05, local01
01710     02 2E 66 F0 | 	shl	local05, #2
01714     1C E4 05 F1 | 	add	objptr, #28
01718     F2 2E 02 F1 | 	add	local05, objptr
0171c     17 31 62 FC | 	wrlong	local06, local05
01720     13 31 02 F6 | 	mov	local06, local01
01724     02 30 66 F0 | 	shl	local06, #2
01728     1C E4 05 F1 | 	add	objptr, #28
0172c     F2 30 02 F1 | 	add	local06, objptr
01730     18 33 62 FC | 	wrlong	local07, local06
01734     13 33 02 F6 | 	mov	local07, local01
01738     02 32 66 F0 | 	shl	local07, #2
0173c     1C E4 05 F1 | 	add	objptr, #28
01740     F2 32 02 F1 | 	add	local07, objptr
01744     19 35 62 FC | 	wrlong	local08, local07
01748     13 35 02 F6 | 	mov	local08, local01
0174c     02 34 66 F0 | 	shl	local08, #2
01750     1C E4 05 F1 | 	add	objptr, #28
01754     F2 34 02 F1 | 	add	local08, objptr
01758     1A 15 62 FC | 	wrlong	arg02, local08
0175c     60 00 00 FF 
01760     00 2A 06 F1 | 	add	local03, ##49152
01764     0F 2A 46 F0 | 	shr	local03, #15
01768     01 34 06 F6 | 	mov	local08, #1
0176c     15 35 02 F1 | 	add	local08, local03
01770     60 00 00 FF 
01774     00 2C 06 F1 | 	add	local04, ##49152
01778     0F 2C 46 F0 | 	shr	local04, #15
0177c     01 32 06 F6 | 	mov	local07, #1
01780     16 33 02 F1 | 	add	local07, local04
01784     13 31 02 F6 | 	mov	local06, local01
01788     02 30 66 F0 | 	shl	local06, #2
0178c     1C E4 05 F1 | 	add	objptr, #28
01790     F2 30 02 F1 | 	add	local06, objptr
01794     02 32 66 F0 | 	shl	local07, #2
01798     19 35 02 F1 | 	add	local08, local07
0179c     18 35 62 FC | 	wrlong	local08, local06
017a0     13 35 02 F6 | 	mov	local08, local01
017a4     02 34 66 F0 | 	shl	local08, #2
017a8     1C E4 05 F1 | 	add	objptr, #28
017ac     F2 34 02 F1 | 	add	local08, objptr
017b0     14 13 02 F6 | 	mov	arg01, local02
017b4     52 00 00 FF 
017b8     38 E4 85 F1 | 	sub	objptr, ##42040
017bc     80 50 B2 FD | 	call	#_usbnew_spin2_hidpad_buttons
017c0     1A FB 61 FC | 	wrlong	result1, local08
017c4     01 26 06 F1 | 	add	local01, #1
017c8                 | LR__0061
017c8     01 28 06 F1 | 	add	local02, #1
017cc     07 28 16 F2 | 	cmp	local02, #7 wc
017d0     78 FE 9F CD |  if_b	jmp	#LR__0060
017d4     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
017d8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
017d8                 | LR__0062
017d8     07 26 16 F2 | 	cmp	local01, #7 wc
017dc     3C 00 90 3D |  if_ae	jmp	#LR__0064
017e0     13 35 02 F6 | 	mov	local08, local01
017e4     02 34 66 F0 | 	shl	local08, #2
017e8     52 00 00 FF 
017ec     1C E4 05 F1 | 	add	objptr, ##42012
017f0     F2 34 02 F1 | 	add	local08, objptr
017f4     1A 01 68 FC | 	wrlong	#0, local08
017f8     13 35 02 F6 | 	mov	local08, local01
017fc     02 34 66 F0 | 	shl	local08, #2
01800     1C E4 05 F1 | 	add	objptr, #28
01804     F2 34 02 F1 | 	add	local08, objptr
01808     1A 01 68 FC | 	wrlong	#0, local08
0180c     01 26 06 F1 | 	add	local01, #1
01810     52 00 00 FF 
01814     38 E4 85 F1 | 	sub	objptr, ##42040
01818     BC FF 9F FD | 	jmp	#LR__0062
0181c                 | LR__0063
0181c                 | LR__0064
0181c     A7 F0 03 F6 | 	mov	ptra, fp
01820     B2 00 A0 FD | 	call	#popregs_
01824                 | _gethdi_ret
01824     2D 00 64 FD | 	ret
01828                 | 
01828                 | ' 
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' 
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' '
01828                 | ' '                                     LINE INTERPRETER/TOKENIZER
01828                 | ' '
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' 
01828                 | ' 
01828                 | ' sub interpret
01828                 | _interpret
01828     35 4A 05 F6 | 	mov	COUNT_, #53
0182c     A8 00 A0 FD | 	call	#pushregs_
01830     01 00 00 FF 
01834     84 F0 07 F1 | 	add	ptra, ##644
01838     37 00 00 FF 
0183c     1C E4 05 F1 | 	add	objptr, ##28188
01840     F2 12 02 FB | 	rdlong	arg01, objptr
01844     37 00 00 FF 
01848     1C E4 85 F1 | 	sub	objptr, ##28188
0184c     2C 7C B2 FD | 	call	#__system__RTrim_S
01850     FD 12 02 F6 | 	mov	arg01, result1
01854     64 7B B2 FD | 	call	#__system__LTrim_S
01858     37 00 00 FF 
0185c     20 E4 05 F1 | 	add	objptr, ##28192
01860     F2 FA 61 FC | 	wrlong	result1, objptr
01864     04 E4 05 F1 | 	add	objptr, #4
01868     FF FF FF FF 
0186c     F2 FE 6B FC | 	wrlong	##-1, objptr
01870     1B 00 00 FF 
01874     8C E4 05 F1 | 	add	objptr, ##13964
01878     F2 00 68 FC | 	wrlong	#0, objptr
0187c     08 00 00 FF 
01880     34 E4 85 F1 | 	sub	objptr, ##4148
01884     F2 00 68 FC | 	wrlong	#0, objptr
01888     4A 00 00 FF 
0188c     7C E4 85 F1 | 	sub	objptr, ##38012
01890     00 26 06 F6 | 	mov	local01, #0
01894                 | LR__0070
01894                 | ' 
01894                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
01894                 | ' 
01894                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
01894                 | ' 
01894                 | ' 108 
01894                 | ' for i=0 to 125: separators(i)=0 :next i
01894     00 28 06 F6 | 	mov	local02, #0
01898     38 4E 05 F1 | 	add	fp, #56
0189c     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
018a0                 | LR__0071
018a0     14 2B 02 F6 | 	mov	local03, local02
018a4     02 2A 66 F0 | 	shl	local03, #2
018a8     A7 2A 02 F1 | 	add	local03, fp
018ac     15 01 68 FC | 	wrlong	#0, local03
018b0     01 28 06 F1 | 	add	local02, #1
018b4     7E 28 56 F2 | 	cmps	local02, #126 wc
018b8     E4 FF 9F CD |  if_b	jmp	#LR__0071
018bc                 | LR__0072
018bc     38 4E 85 F1 | 	sub	fp, #56
018c0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
018c0     00 28 06 F6 | 	mov	local02, #0
018c4     35 00 00 FF 
018c8     0C E4 05 F1 | 	add	objptr, ##27148
018cc     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
018d0                 | LR__0073
018d0     14 2D 02 F6 | 	mov	local04, local02
018d4     03 2C 66 F0 | 	shl	local04, #3
018d8     F2 2C 02 F1 | 	add	local04, objptr
018dc     B5 01 00 FF 
018e0     0C 17 06 F6 | 	mov	arg03, ##@LR__5429
018e4     16 17 62 FC | 	wrlong	arg03, local04
018e8     14 2D 02 F6 | 	mov	local04, local02
018ec     03 2C 66 F0 | 	shl	local04, #3
018f0     F2 2E 02 F6 | 	mov	local05, objptr
018f4     F2 2C 02 F1 | 	add	local04, objptr
018f8     00 30 06 F6 | 	mov	local06, #0
018fc     04 2C 06 F1 | 	add	local04, #4
01900     16 01 68 FC | 	wrlong	#0, local04
01904     01 28 06 F1 | 	add	local02, #1
01908     7E 28 56 F2 | 	cmps	local02, #126 wc
0190c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01910                 | LR__0074
01910     02 00 00 FF 
01914     10 E4 05 F1 | 	add	objptr, ##1040
01918     F2 12 02 FB | 	rdlong	arg01, objptr
0191c     37 00 00 FF 
01920     1C E4 85 F1 | 	sub	objptr, ##28188
01924     54 7B B2 FD | 	call	#__system__RTrim_S
01928     FD 12 02 F6 | 	mov	arg01, result1
0192c     8C 7A B2 FD | 	call	#__system__LTrim_S
01930     37 00 00 FF 
01934     1C E4 05 F1 | 	add	objptr, ##28188
01938     F2 FA 61 FC | 	wrlong	result1, objptr
0193c     B5 01 00 FF 
01940     0D 2D 06 F6 | 	mov	local04, ##@LR__5430
01944     1B 00 00 FF 
01948     D0 E4 05 F1 | 	add	objptr, ##14032
0194c     F2 2C 62 FC | 	wrlong	local04, objptr
01950     1B 00 00 FF 
01954     D0 E4 85 F1 | 	sub	objptr, ##14032
01958     F2 12 02 FB | 	rdlong	arg01, objptr
0195c     37 00 00 FF 
01960     1C E4 85 F1 | 	sub	objptr, ##28188
01964     09 33 02 F6 | 	mov	local07, arg01
01968     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
0196c                 | LR__0075
0196c     19 FB C9 FA | 	rdbyte	result1, local07 wz
01970     01 32 06 51 |  if_ne	add	local07, #1
01974     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01978                 | LR__0076
01978     09 33 8A F1 | 	sub	local07, arg01 wz
0197c     52 00 00 FF 
01980     F0 E4 05 F1 | 	add	objptr, ##42224
01984     F2 32 62 FC | 	wrlong	local07, objptr
01988                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
01988     52 00 00 FF 
0198c     F0 E4 85 F1 | 	sub	objptr, ##42224
01990     40 2A 90 AD |  if_e	jmp	#LR__0210
01994     00 34 06 F6 | 	mov	local08, #0
01998                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
01998                 | ' for i=1 to len(line$)
01998     01 28 06 F6 | 	mov	local02, #1
0199c     37 00 00 FF 
019a0     1C E4 05 F1 | 	add	objptr, ##28188
019a4     F2 12 02 FB | 	rdlong	arg01, objptr
019a8     37 00 00 FF 
019ac     1C E4 85 F1 | 	sub	objptr, ##28188
019b0     09 33 02 F6 | 	mov	local07, arg01
019b4     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
019b8                 | LR__0077
019b8     19 FB C9 FA | 	rdbyte	result1, local07 wz
019bc     01 32 06 51 |  if_ne	add	local07, #1
019c0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
019c4                 | LR__0078
019c4     09 33 82 F1 | 	sub	local07, arg01
019c8     19 37 02 F6 | 	mov	local09, local07
019cc     01 36 06 F1 | 	add	local09, #1
019d0                 | LR__0079
019d0     1B 29 52 F2 | 	cmps	local02, local09 wc
019d4     AC 00 90 3D |  if_ae	jmp	#LR__0081
019d8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
019d8     37 00 00 FF 
019dc     1C E4 05 F1 | 	add	objptr, ##28188
019e0     F2 12 02 FB | 	rdlong	arg01, objptr
019e4     37 00 00 FF 
019e8     1C E4 85 F1 | 	sub	objptr, ##28188
019ec     14 15 02 F6 | 	mov	arg02, local02
019f0     01 16 06 F6 | 	mov	arg03, #1
019f4     0C 77 B2 FD | 	call	#__system__Mid_S
019f8     FD 12 02 F6 | 	mov	arg01, result1
019fc     B5 01 00 FF 
01a00     0E 15 06 F6 | 	mov	arg02, ##@LR__5431
01a04     90 55 B2 FD | 	call	#__system___string_cmp
01a08     00 FA 0D F2 | 	cmp	result1, #0 wz
01a0c     00 34 0E A2 |  if_e	cmp	local08, #0 wz
01a10     01 34 06 A6 |  if_e	mov	local08, #1
01a14     3C 00 90 AD |  if_e	jmp	#LR__0080
01a18     37 00 00 FF 
01a1c     1C E4 05 F1 | 	add	objptr, ##28188
01a20     F2 12 02 FB | 	rdlong	arg01, objptr
01a24     37 00 00 FF 
01a28     1C E4 85 F1 | 	sub	objptr, ##28188
01a2c     14 15 02 F6 | 	mov	arg02, local02
01a30     01 16 06 F6 | 	mov	arg03, #1
01a34     CC 76 B2 FD | 	call	#__system__Mid_S
01a38     FD 12 02 F6 | 	mov	arg01, result1
01a3c     B5 01 00 FF 
01a40     10 15 06 F6 | 	mov	arg02, ##@LR__5432
01a44     50 55 B2 FD | 	call	#__system___string_cmp
01a48     00 FA 0D F2 | 	cmp	result1, #0 wz
01a4c     01 34 0E A2 |  if_e	cmp	local08, #1 wz
01a50     00 34 06 A6 |  if_e	mov	local08, #0
01a54                 | LR__0080
01a54     14 2D 02 F6 | 	mov	local04, local02
01a58     03 2C 66 F0 | 	shl	local04, #3
01a5c     35 00 00 FF 
01a60     0C E4 05 F1 | 	add	objptr, ##27148
01a64     F2 2E 02 F6 | 	mov	local05, objptr
01a68     F2 2C 02 F1 | 	add	local04, objptr
01a6c     04 2C 06 F1 | 	add	local04, #4
01a70     16 35 62 FC | 	wrlong	local08, local04
01a74     01 28 06 F1 | 	add	local02, #1
01a78     35 00 00 FF 
01a7c     0C E4 85 F1 | 	sub	objptr, ##27148
01a80     4C FF 9F FD | 	jmp	#LR__0079
01a84                 | LR__0081
01a84     01 28 06 F6 | 	mov	local02, #1
01a88                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
01a88                 | LR__0082
01a88     37 00 00 FF 
01a8c     1C E4 05 F1 | 	add	objptr, ##28188
01a90     F2 12 02 FB | 	rdlong	arg01, objptr
01a94     37 00 00 FF 
01a98     1C E4 85 F1 | 	sub	objptr, ##28188
01a9c     14 15 02 F6 | 	mov	arg02, local02
01aa0     01 16 06 F6 | 	mov	arg03, #1
01aa4     5C 76 B2 FD | 	call	#__system__Mid_S
01aa8     FD 12 02 F6 | 	mov	arg01, result1
01aac     B5 01 00 FF 
01ab0     12 39 06 F6 | 	mov	local10, ##@LR__5433
01ab4     1C 15 02 F6 | 	mov	arg02, local10
01ab8     DC 54 B2 FD | 	call	#__system___string_cmp
01abc     00 FA 0D F2 | 	cmp	result1, #0 wz
01ac0     34 00 90 5D |  if_ne	jmp	#LR__0083
01ac4     14 2F 02 F6 | 	mov	local05, local02
01ac8     03 2E 66 F0 | 	shl	local05, #3
01acc     35 00 00 FF 
01ad0     0C E4 05 F1 | 	add	objptr, ##27148
01ad4     F2 30 02 F6 | 	mov	local06, objptr
01ad8     F2 2E 02 F1 | 	add	local05, objptr
01adc     04 2E 06 F1 | 	add	local05, #4
01ae0     17 3B 02 FB | 	rdlong	local11, local05
01ae4     04 2E 86 F1 | 	sub	local05, #4
01ae8     1D 3D 0A F6 | 	mov	local12, local11 wz
01aec     35 00 00 FF 
01af0     0C E4 85 F1 | 	sub	objptr, ##27148
01af4     24 00 90 AD |  if_e	jmp	#LR__0084
01af8                 | LR__0083
01af8     52 00 00 FF 
01afc     F0 E4 05 F1 | 	add	objptr, ##42224
01b00     F2 3E 02 FB | 	rdlong	local13, objptr
01b04     52 00 00 FF 
01b08     F0 E4 85 F1 | 	sub	objptr, ##42224
01b0c     1F 41 02 F6 | 	mov	local14, local13
01b10     20 29 52 F2 | 	cmps	local02, local14 wc
01b14     01 28 06 C1 |  if_b	add	local02, #1
01b18     6C FF 9F CD |  if_b	jmp	#LR__0082
01b1c                 | LR__0084
01b1c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01b1c     52 00 00 FF 
01b20     F0 E4 05 F1 | 	add	objptr, ##42224
01b24     F2 2C 02 FB | 	rdlong	local04, objptr
01b28     52 00 00 FF 
01b2c     F0 E4 85 F1 | 	sub	objptr, ##42224
01b30     16 29 52 F2 | 	cmps	local02, local04 wc
01b34     A8 00 90 3D |  if_ae	jmp	#LR__0087
01b38     37 00 00 FF 
01b3c     1C E4 05 F1 | 	add	objptr, ##28188
01b40     F2 30 02 FB | 	rdlong	local06, objptr
01b44     37 00 00 FF 
01b48     1C E4 85 F1 | 	sub	objptr, ##28188
01b4c     18 13 02 F6 | 	mov	arg01, local06
01b50     09 33 02 F6 | 	mov	local07, arg01
01b54     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01b58                 | LR__0085
01b58     19 FB C9 FA | 	rdbyte	result1, local07 wz
01b5c     01 32 06 51 |  if_ne	add	local07, #1
01b60     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01b64                 | LR__0086
01b64     09 33 82 F1 | 	sub	local07, arg01
01b68     19 2F 02 F6 | 	mov	local05, local07
01b6c     17 15 02 F6 | 	mov	arg02, local05
01b70     14 15 82 F1 | 	sub	arg02, local02
01b74     18 13 02 F6 | 	mov	arg01, local06
01b78     F8 74 B2 FD | 	call	#__system__Right_S
01b7c     FD 12 02 F6 | 	mov	arg01, result1
01b80     F8 78 B2 FD | 	call	#__system__RTrim_S
01b84     FD 12 02 F6 | 	mov	arg01, result1
01b88     30 78 B2 FD | 	call	#__system__LTrim_S
01b8c     52 00 00 FF 
01b90     F4 E4 05 F1 | 	add	objptr, ##42228
01b94     F2 FA 61 FC | 	wrlong	result1, objptr
01b98     1B 00 00 FF 
01b9c     D8 E4 85 F1 | 	sub	objptr, ##14040
01ba0     F2 12 02 FB | 	rdlong	arg01, objptr
01ba4     37 00 00 FF 
01ba8     1C E4 85 F1 | 	sub	objptr, ##28188
01bac     01 28 86 F1 | 	sub	local02, #1
01bb0     14 15 02 F6 | 	mov	arg02, local02
01bb4     34 74 B2 FD | 	call	#__system__Left_S
01bb8     FD 12 02 F6 | 	mov	arg01, result1
01bbc     BC 78 B2 FD | 	call	#__system__RTrim_S
01bc0     FD 12 02 F6 | 	mov	arg01, result1
01bc4     F4 77 B2 FD | 	call	#__system__LTrim_S
01bc8     37 00 00 FF 
01bcc     1C E4 05 F1 | 	add	objptr, ##28188
01bd0     F2 FA 61 FC | 	wrlong	result1, objptr
01bd4     37 00 00 FF 
01bd8     1C E4 85 F1 | 	sub	objptr, ##28188
01bdc     1C 00 90 FD | 	jmp	#LR__0088
01be0                 | LR__0087
01be0     B5 01 00 FF 
01be4     14 2D 06 F6 | 	mov	local04, ##@LR__5434
01be8     52 00 00 FF 
01bec     F4 E4 05 F1 | 	add	objptr, ##42228
01bf0     F2 2C 62 FC | 	wrlong	local04, objptr
01bf4     52 00 00 FF 
01bf8     F4 E4 85 F1 | 	sub	objptr, ##42228
01bfc                 | LR__0088
01bfc                 | ' 
01bfc                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01bfc     37 00 00 FF 
01c00     24 E4 05 F1 | 	add	objptr, ##28196
01c04     F2 2C 02 FB | 	rdlong	local04, objptr
01c08     37 00 00 FF 
01c0c     24 E4 85 F1 | 	sub	objptr, ##28196
01c10     FF FF 7F FF 
01c14     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c18     40 00 90 5D |  if_ne	jmp	#LR__0089
01c1c     52 00 00 FF 
01c20     F4 E4 05 F1 | 	add	objptr, ##42228
01c24     F2 12 02 FB | 	rdlong	arg01, objptr
01c28     52 00 00 FF 
01c2c     F4 E4 85 F1 | 	sub	objptr, ##42228
01c30     B5 01 00 FF 
01c34     15 31 06 F6 | 	mov	local06, ##@LR__5435
01c38     18 15 02 F6 | 	mov	arg02, local06
01c3c     58 53 B2 FD | 	call	#__system___string_cmp
01c40     00 FA 0D F2 | 	cmp	result1, #0 wz
01c44     37 00 00 5F 
01c48     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c4c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01c50     37 00 00 5F 
01c54     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01c58     08 01 90 5D |  if_ne	jmp	#LR__0093
01c5c                 | LR__0089
01c5c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01c5c     37 00 00 FF 
01c60     24 E4 05 F1 | 	add	objptr, ##28196
01c64     F2 2C 02 FB | 	rdlong	local04, objptr
01c68     37 00 00 FF 
01c6c     24 E4 85 F1 | 	sub	objptr, ##28196
01c70     FF FF 7F FF 
01c74     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c78     3C 00 90 5D |  if_ne	jmp	#LR__0090
01c7c     52 00 00 FF 
01c80     F4 E4 05 F1 | 	add	objptr, ##42228
01c84     F2 12 02 FB | 	rdlong	arg01, objptr
01c88     52 00 00 FF 
01c8c     F4 E4 85 F1 | 	sub	objptr, ##42228
01c90     B5 01 00 FF 
01c94     16 15 06 F6 | 	mov	arg02, ##@LR__5436
01c98     FC 52 B2 FD | 	call	#__system___string_cmp
01c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
01ca0     37 00 00 AF 
01ca4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01ca8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01cac     37 00 00 AF 
01cb0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01cb4     AC 00 90 AD |  if_e	jmp	#LR__0093
01cb8                 | LR__0090
01cb8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01cb8     37 00 00 FF 
01cbc     24 E4 05 F1 | 	add	objptr, ##28196
01cc0     F2 2C 02 FB | 	rdlong	local04, objptr
01cc4     37 00 00 FF 
01cc8     24 E4 85 F1 | 	sub	objptr, ##28196
01ccc     04 2C 0E F2 | 	cmp	local04, #4 wz
01cd0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01cd4     52 00 00 FF 
01cd8     F4 E4 05 F1 | 	add	objptr, ##42228
01cdc     F2 12 02 FB | 	rdlong	arg01, objptr
01ce0     52 00 00 FF 
01ce4     F4 E4 85 F1 | 	sub	objptr, ##42228
01ce8     B5 01 00 FF 
01cec     17 15 06 F6 | 	mov	arg02, ##@LR__5437
01cf0     A4 52 B2 FD | 	call	#__system___string_cmp
01cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
01cf8     37 00 00 5F 
01cfc     24 E4 05 51 |  if_ne	add	objptr, ##28196
01d00     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01d04     37 00 00 5F 
01d08     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01d0c     54 00 90 5D |  if_ne	jmp	#LR__0093
01d10                 | LR__0091
01d10                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01d10     37 00 00 FF 
01d14     24 E4 05 F1 | 	add	objptr, ##28196
01d18     F2 2C 02 FB | 	rdlong	local04, objptr
01d1c     37 00 00 FF 
01d20     24 E4 85 F1 | 	sub	objptr, ##28196
01d24     04 2C 0E F2 | 	cmp	local04, #4 wz
01d28     38 00 90 5D |  if_ne	jmp	#LR__0092
01d2c     52 00 00 FF 
01d30     F4 E4 05 F1 | 	add	objptr, ##42228
01d34     F2 12 02 FB | 	rdlong	arg01, objptr
01d38     52 00 00 FF 
01d3c     F4 E4 85 F1 | 	sub	objptr, ##42228
01d40     B5 01 00 FF 
01d44     18 15 06 F6 | 	mov	arg02, ##@LR__5438
01d48     4C 52 B2 FD | 	call	#__system___string_cmp
01d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
01d50     37 00 00 AF 
01d54     24 E4 05 A1 |  if_e	add	objptr, ##28196
01d58     F2 04 68 AC |  if_e	wrlong	#2, objptr
01d5c     37 00 00 AF 
01d60     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01d64                 | LR__0092
01d64                 | LR__0093
01d64     38 4E 05 F1 | 	add	fp, #56
01d68     A7 00 68 FC | 	wrlong	#0, fp
01d6c     38 4E 85 F1 | 	sub	fp, #56
01d70     00 28 06 F6 | 	mov	local02, #0
01d74     01 42 06 F6 | 	mov	local15, #1
01d78                 | ' 
01d78                 | ' ' 1b: find separators
01d78                 | ' 
01d78                 | ' 107
01d78                 | ' separators(0)=0
01d78                 | ' i=0: j=1
01d78                 | ' do: 
01d78                 | LR__0094
01d78     01 28 06 F1 | 	add	local02, #1
01d7c     37 00 00 FF 
01d80     1C E4 05 F1 | 	add	objptr, ##28188
01d84     F2 12 02 FB | 	rdlong	arg01, objptr
01d88     37 00 00 FF 
01d8c     1C E4 85 F1 | 	sub	objptr, ##28188
01d90     14 15 02 F6 | 	mov	arg02, local02
01d94     01 16 06 F6 | 	mov	arg03, #1
01d98     68 73 B2 FD | 	call	#__system__Mid_S
01d9c     FD 44 02 F6 | 	mov	local16, result1
01da0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01da0     22 13 02 F6 | 	mov	arg01, local16
01da4     94 2E B0 FD | 	call	#_isseparator
01da8     00 FA 0D F2 | 	cmp	result1, #0 wz
01dac     1C 00 90 AD |  if_e	jmp	#LR__0095
01db0     21 2B 02 F6 | 	mov	local03, local15
01db4     02 2A 66 F0 | 	shl	local03, #2
01db8     38 4E 05 F1 | 	add	fp, #56
01dbc     A7 2A 02 F1 | 	add	local03, fp
01dc0     15 29 62 FC | 	wrlong	local02, local03
01dc4     01 42 06 F1 | 	add	local15, #1
01dc8     38 4E 85 F1 | 	sub	fp, #56
01dcc                 | LR__0095
01dcc     52 00 00 FF 
01dd0     F0 E4 05 F1 | 	add	objptr, ##42224
01dd4     F2 2C 02 FB | 	rdlong	local04, objptr
01dd8     52 00 00 FF 
01ddc     F0 E4 85 F1 | 	sub	objptr, ##42224
01de0     16 29 5A F2 | 	cmps	local02, local04 wcz
01de4     90 FF 9F ED |  if_be	jmp	#LR__0094
01de8     21 2B 02 F6 | 	mov	local03, local15
01dec     02 2A 66 F0 | 	shl	local03, #2
01df0     38 4E 05 F1 | 	add	fp, #56
01df4     A7 38 02 F6 | 	mov	local10, fp
01df8     A7 2A 02 F1 | 	add	local03, fp
01dfc     15 29 62 FC | 	wrlong	local02, local03
01e00     00 46 06 F6 | 	mov	local17, #0
01e04                 | ' for i=0 to j-1 
01e04     00 28 06 F6 | 	mov	local02, #0
01e08     21 49 02 F6 | 	mov	local18, local15
01e0c     38 4E 85 F1 | 	sub	fp, #56
01e10                 | LR__0096
01e10     24 29 52 F2 | 	cmps	local02, local18 wc
01e14     50 01 90 3D |  if_ae	jmp	#LR__0100
01e18     14 2B 02 F6 | 	mov	local03, local02
01e1c     02 2A 66 F0 | 	shl	local03, #2
01e20     38 4E 05 F1 | 	add	fp, #56
01e24     A7 2A 02 F1 | 	add	local03, fp
01e28     15 2F 02 FB | 	rdlong	local05, local03
01e2c     52 00 00 FF 
01e30     FC E4 05 F1 | 	add	objptr, ##42236
01e34     F2 2E 62 FC | 	wrlong	local05, objptr
01e38     14 2B 02 F6 | 	mov	local03, local02
01e3c     01 2A 06 F1 | 	add	local03, #1
01e40     02 2A 66 F0 | 	shl	local03, #2
01e44     A7 38 02 F6 | 	mov	local10, fp
01e48     A7 2A 02 F1 | 	add	local03, fp
01e4c     15 2F 02 FB | 	rdlong	local05, local03
01e50     04 E4 05 F1 | 	add	objptr, #4
01e54     F2 2E 62 FC | 	wrlong	local05, objptr
01e58                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01e58     04 E4 85 F1 | 	sub	objptr, #4
01e5c     F2 2C 02 FB | 	rdlong	local04, objptr
01e60     52 00 00 FF 
01e64     FC E4 85 F1 | 	sub	objptr, ##42236
01e68     01 2C 56 F2 | 	cmps	local04, #1 wc
01e6c     38 4E 85 F1 | 	sub	fp, #56
01e70     68 00 90 CD |  if_b	jmp	#LR__0098
01e74     37 00 00 FF 
01e78     1C E4 05 F1 | 	add	objptr, ##28188
01e7c     F2 12 02 FB | 	rdlong	arg01, objptr
01e80     1B 00 00 FF 
01e84     E0 E4 05 F1 | 	add	objptr, ##14048
01e88     F2 14 02 FB | 	rdlong	arg02, objptr
01e8c     52 00 00 FF 
01e90     FC E4 85 F1 | 	sub	objptr, ##42236
01e94     01 16 06 F6 | 	mov	arg03, #1
01e98     68 72 B2 FD | 	call	#__system__Mid_S
01e9c     FD 4A 02 F6 | 	mov	local19, result1
01ea0     B5 01 00 FF 
01ea4     19 15 06 F6 | 	mov	arg02, ##@LR__5439
01ea8     25 13 02 F6 | 	mov	arg01, local19
01eac     E8 50 B2 FD | 	call	#__system___string_cmp
01eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
01eb4     24 00 90 AD |  if_e	jmp	#LR__0097
01eb8     23 39 02 F6 | 	mov	local10, local17
01ebc     03 38 66 F0 | 	shl	local10, #3
01ec0     35 00 00 FF 
01ec4     0C E4 05 F1 | 	add	objptr, ##27148
01ec8     F2 38 02 F1 | 	add	local10, objptr
01ecc     1C 4B 62 FC | 	wrlong	local19, local10
01ed0     01 46 06 F1 | 	add	local17, #1
01ed4     35 00 00 FF 
01ed8     0C E4 85 F1 | 	sub	objptr, ##27148
01edc                 | LR__0097
01edc                 | LR__0098
01edc     37 00 00 FF 
01ee0     1C E4 05 F1 | 	add	objptr, ##28188
01ee4     F2 12 02 FB | 	rdlong	arg01, objptr
01ee8     1B 00 00 FF 
01eec     E0 E4 05 F1 | 	add	objptr, ##14048
01ef0     F2 14 02 FB | 	rdlong	arg02, objptr
01ef4     01 14 06 F1 | 	add	arg02, #1
01ef8     04 E4 05 F1 | 	add	objptr, #4
01efc     F2 16 02 FB | 	rdlong	arg03, objptr
01f00     04 E4 85 F1 | 	sub	objptr, #4
01f04     F2 3A 02 FB | 	rdlong	local11, objptr
01f08     52 00 00 FF 
01f0c     FC E4 85 F1 | 	sub	objptr, ##42236
01f10     1D 3D 02 F6 | 	mov	local12, local11
01f14     1E 17 82 F1 | 	sub	arg03, local12
01f18     01 16 86 F1 | 	sub	arg03, #1
01f1c     E4 71 B2 FD | 	call	#__system__Mid_S
01f20     FD 4A 02 F6 | 	mov	local19, result1
01f24                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01f24     B5 01 00 FF 
01f28     1A 15 06 F6 | 	mov	arg02, ##@LR__5440
01f2c     25 13 02 F6 | 	mov	arg01, local19
01f30     64 50 B2 FD | 	call	#__system___string_cmp
01f34     00 FA 0D F2 | 	cmp	result1, #0 wz
01f38     24 00 90 AD |  if_e	jmp	#LR__0099
01f3c     23 39 02 F6 | 	mov	local10, local17
01f40     03 38 66 F0 | 	shl	local10, #3
01f44     35 00 00 FF 
01f48     0C E4 05 F1 | 	add	objptr, ##27148
01f4c     F2 38 02 F1 | 	add	local10, objptr
01f50     1C 4B 62 FC | 	wrlong	local19, local10
01f54     01 46 06 F1 | 	add	local17, #1
01f58     35 00 00 FF 
01f5c     0C E4 85 F1 | 	sub	objptr, ##27148
01f60                 | LR__0099
01f60     01 28 06 F1 | 	add	local02, #1
01f64     A8 FE 9F FD | 	jmp	#LR__0096
01f68                 | LR__0100
01f68                 | ' 
01f68                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01f68                 | ' 
01f68                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01f68     37 00 00 FF 
01f6c     24 E4 05 F1 | 	add	objptr, ##28196
01f70     F2 2C 0A FB | 	rdlong	local04, objptr wz
01f74     37 00 00 FF 
01f78     24 E4 85 F1 | 	sub	objptr, ##28196
01f7c     37 00 00 5F 
01f80     24 E4 05 51 |  if_ne	add	objptr, ##28196
01f84     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01f88     37 00 00 5F 
01f8c     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01f90     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01f94     B8 00 90 5D |  if_ne	jmp	#LR__0103
01f98     35 00 00 FF 
01f9c     0C E4 05 F1 | 	add	objptr, ##27148
01fa0     F2 3A 02 FB | 	rdlong	local11, objptr
01fa4     35 00 00 FF 
01fa8     0C E4 85 F1 | 	sub	objptr, ##27148
01fac     1D 13 02 F6 | 	mov	arg01, local11
01fb0     0C 50 B0 FD | 	call	#_isdec
01fb4     FD 3C 02 F6 | 	mov	local12, result1
01fb8     1E 31 22 F6 | 	not	local06, local12
01fbc     00 30 0E F2 | 	cmp	local06, #0 wz
01fc0     8C 00 90 AD |  if_e	jmp	#LR__0103
01fc4     23 29 02 F6 | 	mov	local02, local17
01fc8     35 00 00 FF 
01fcc     0C E4 05 F1 | 	add	objptr, ##27148
01fd0     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01fd4                 | LR__0101
01fd4     14 2F 02 F6 | 	mov	local05, local02
01fd8     01 2E 86 F1 | 	sub	local05, #1
01fdc     03 2E 66 F0 | 	shl	local05, #3
01fe0     F2 2E 02 F1 | 	add	local05, objptr
01fe4     17 2D 02 FB | 	rdlong	local04, local05
01fe8     14 31 02 F6 | 	mov	local06, local02
01fec     01 30 86 F1 | 	sub	local06, #1
01ff0     03 30 66 F0 | 	shl	local06, #3
01ff4     F2 30 02 F1 | 	add	local06, objptr
01ff8     04 30 06 F1 | 	add	local06, #4
01ffc     18 2B 02 FB | 	rdlong	local03, local06
02000     14 31 02 F6 | 	mov	local06, local02
02004     03 30 66 F0 | 	shl	local06, #3
02008     F2 3C 02 F6 | 	mov	local12, objptr
0200c     F2 30 02 F1 | 	add	local06, objptr
02010     18 2D 62 FC | 	wrlong	local04, local06
02014     14 3B 02 F6 | 	mov	local11, local02
02018     1D 3F 02 F6 | 	mov	local13, local11
0201c     03 3E 66 F0 | 	shl	local13, #3
02020     F2 3E 02 F1 | 	add	local13, objptr
02024     04 3E 06 F1 | 	add	local13, #4
02028     1F 2B 62 FC | 	wrlong	local03, local13
0202c     01 28 86 F1 | 	sub	local02, #1
02030     01 28 56 F2 | 	cmps	local02, #1 wc
02034     9C FF 9F 3D |  if_ae	jmp	#LR__0101
02038                 | LR__0102
02038     B5 01 00 FF 
0203c     1B 2D 06 F6 | 	mov	local04, ##@LR__5441
02040     F2 2C 62 FC | 	wrlong	local04, objptr
02044     35 00 00 FF 
02048     0C E4 85 F1 | 	sub	objptr, ##27148
0204c     01 46 06 F1 | 	add	local17, #1
02050                 | LR__0103
02050     00 28 06 F6 | 	mov	local02, #0
02054                 | ' 
02054                 | ' ' 1e : find strings
02054                 | ' 
02054                 | ' i=0
02054                 | ' do
02054                 | LR__0104
02054                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
02054     14 2F 02 F6 | 	mov	local05, local02
02058     03 2E 66 F0 | 	shl	local05, #3
0205c     35 00 00 FF 
02060     0C E4 05 F1 | 	add	objptr, ##27148
02064     F2 2E 02 F1 | 	add	local05, objptr
02068     17 13 02 FB | 	rdlong	arg01, local05
0206c     B5 01 00 FF 
02070     1D 15 06 F6 | 	mov	arg02, ##@LR__5442
02074     35 00 00 FF 
02078     0C E4 85 F1 | 	sub	objptr, ##27148
0207c     18 4F B2 FD | 	call	#__system___string_cmp
02080     00 FA 0D F2 | 	cmp	result1, #0 wz
02084     01 28 06 51 |  if_ne	add	local02, #1
02088     20 01 90 5D |  if_ne	jmp	#LR__0109
0208c     14 4D 02 F6 | 	mov	local20, local02
02090                 | LR__0105
02090     14 39 02 F6 | 	mov	local10, local02
02094     01 38 06 F1 | 	add	local10, #1
02098     03 38 66 F0 | 	shl	local10, #3
0209c     35 00 00 FF 
020a0     0C E4 05 F1 | 	add	objptr, ##27148
020a4     F2 38 02 F1 | 	add	local10, objptr
020a8     1C 4B 02 FB | 	rdlong	local19, local10
020ac     26 39 02 F6 | 	mov	local10, local20
020b0     03 38 66 F0 | 	shl	local10, #3
020b4     F2 38 02 F1 | 	add	local10, objptr
020b8     26 3B 02 F6 | 	mov	local11, local20
020bc     1D 41 02 F6 | 	mov	local14, local11
020c0     03 40 66 F0 | 	shl	local14, #3
020c4     F2 40 02 F1 | 	add	local14, objptr
020c8     20 13 02 FB | 	rdlong	arg01, local14
020cc     25 3D 02 F6 | 	mov	local12, local19
020d0     1E 15 02 F6 | 	mov	arg02, local12
020d4     35 00 00 FF 
020d8     0C E4 85 F1 | 	sub	objptr, ##27148
020dc     EC 4E B2 FD | 	call	#__system___string_concat
020e0     1C FB 61 FC | 	wrlong	result1, local10
020e4     14 43 02 F6 | 	mov	local15, local02
020e8     01 42 06 F1 | 	add	local15, #1
020ec     23 4F 02 F6 | 	mov	local21, local17
020f0     01 4E 06 F1 | 	add	local21, #1
020f4     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
020f8                 | LR__0106
020f8     27 43 52 F2 | 	cmps	local15, local21 wc
020fc     70 00 90 3D |  if_ae	jmp	#LR__0108
02100     21 2F 02 F6 | 	mov	local05, local15
02104     01 2E 06 F1 | 	add	local05, #1
02108     03 2E 66 F0 | 	shl	local05, #3
0210c     35 00 00 FF 
02110     0C E4 05 F1 | 	add	objptr, ##27148
02114     F2 2E 02 F1 | 	add	local05, objptr
02118     17 2D 02 FB | 	rdlong	local04, local05
0211c     21 31 02 F6 | 	mov	local06, local15
02120     01 30 06 F1 | 	add	local06, #1
02124     03 30 66 F0 | 	shl	local06, #3
02128     F2 30 02 F1 | 	add	local06, objptr
0212c     04 30 06 F1 | 	add	local06, #4
02130     18 2B 02 FB | 	rdlong	local03, local06
02134     21 31 02 F6 | 	mov	local06, local15
02138     03 30 66 F0 | 	shl	local06, #3
0213c     F2 3C 02 F6 | 	mov	local12, objptr
02140     F2 30 02 F1 | 	add	local06, objptr
02144     18 2D 62 FC | 	wrlong	local04, local06
02148     21 3B 02 F6 | 	mov	local11, local15
0214c     1D 3F 02 F6 | 	mov	local13, local11
02150     03 3E 66 F0 | 	shl	local13, #3
02154     F2 3E 02 F1 | 	add	local13, objptr
02158     04 3E 06 F1 | 	add	local13, #4
0215c     1F 2B 62 FC | 	wrlong	local03, local13
02160     01 42 06 F1 | 	add	local15, #1
02164     35 00 00 FF 
02168     0C E4 85 F1 | 	sub	objptr, ##27148
0216c     88 FF 9F FD | 	jmp	#LR__0106
02170                 | LR__0107
02170                 | LR__0108
02170     01 46 86 F1 | 	sub	local17, #1
02174     B5 01 00 FF 
02178     1F 15 06 F6 | 	mov	arg02, ##@LR__5443
0217c     25 13 02 F6 | 	mov	arg01, local19
02180     14 4E B2 FD | 	call	#__system___string_cmp
02184     00 FA 0D F2 | 	cmp	result1, #0 wz
02188     23 29 52 52 |  if_ne	cmps	local02, local17 wc
0218c     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
02190                 | '   if p$<>"""" then k+=1:i+=1
02190     B5 01 00 FF 
02194     21 15 06 F6 | 	mov	arg02, ##@LR__5444
02198     25 13 02 F6 | 	mov	arg01, local19
0219c     F8 4D B2 FD | 	call	#__system___string_cmp
021a0     00 FA 0D F2 | 	cmp	result1, #0 wz
021a4     01 46 06 51 |  if_ne	add	local17, #1
021a8     01 28 06 51 |  if_ne	add	local02, #1
021ac                 | LR__0109
021ac     23 29 52 F2 | 	cmps	local02, local17 wc
021b0     A0 FE 9F CD |  if_b	jmp	#LR__0104
021b4     00 28 06 F6 | 	mov	local02, #0
021b8                 | ' 
021b8                 | ' ' 1f : concatenate strings if "" detected between
021b8                 | '  
021b8                 | ' i=0
021b8                 | ' do
021b8                 | LR__0110
021b8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
021b8     14 2F 02 F6 | 	mov	local05, local02
021bc     03 2E 66 F0 | 	shl	local05, #3
021c0     35 00 00 FF 
021c4     0C E4 05 F1 | 	add	objptr, ##27148
021c8     F2 30 02 F6 | 	mov	local06, objptr
021cc     F2 2E 02 F1 | 	add	local05, objptr
021d0     17 13 02 FB | 	rdlong	arg01, local05
021d4     01 14 06 F6 | 	mov	arg02, #1
021d8     35 00 00 FF 
021dc     0C E4 85 F1 | 	sub	objptr, ##27148
021e0     90 6E B2 FD | 	call	#__system__Right_S
021e4     FD 12 02 F6 | 	mov	arg01, result1
021e8     B5 01 00 FF 
021ec     23 15 06 F6 | 	mov	arg02, ##@LR__5445
021f0     A4 4D B2 FD | 	call	#__system___string_cmp
021f4     00 FA 0D F2 | 	cmp	result1, #0 wz
021f8     7C 01 90 5D |  if_ne	jmp	#LR__0116
021fc     14 31 02 F6 | 	mov	local06, local02
02200     01 30 06 F1 | 	add	local06, #1
02204     03 30 66 F0 | 	shl	local06, #3
02208     35 00 00 FF 
0220c     0C E4 05 F1 | 	add	objptr, ##27148
02210     F2 3C 02 F6 | 	mov	local12, objptr
02214     F2 30 02 F1 | 	add	local06, objptr
02218     18 13 02 FB | 	rdlong	arg01, local06
0221c     01 14 06 F6 | 	mov	arg02, #1
02220     35 00 00 FF 
02224     0C E4 85 F1 | 	sub	objptr, ##27148
02228     C0 6D B2 FD | 	call	#__system__Left_S
0222c     FD 12 02 F6 | 	mov	arg01, result1
02230     B5 01 00 FF 
02234     25 15 06 F6 | 	mov	arg02, ##@LR__5446
02238     5C 4D B2 FD | 	call	#__system___string_cmp
0223c     00 FA 0D F2 | 	cmp	result1, #0 wz
02240     34 01 90 5D |  if_ne	jmp	#LR__0116
02244     14 39 02 F6 | 	mov	local10, local02
02248     03 38 66 F0 | 	shl	local10, #3
0224c     35 00 00 FF 
02250     0C E4 05 F1 | 	add	objptr, ##27148
02254     F2 38 02 F1 | 	add	local10, objptr
02258     14 41 02 F6 | 	mov	local14, local02
0225c     03 40 66 F0 | 	shl	local14, #3
02260     F2 40 02 F1 | 	add	local14, objptr
02264     20 31 02 FB | 	rdlong	local06, local14
02268     14 3F 02 F6 | 	mov	local13, local02
0226c     01 3E 06 F1 | 	add	local13, #1
02270     03 3E 66 F0 | 	shl	local13, #3
02274     F2 3E 02 F1 | 	add	local13, objptr
02278     1F 3D 02 FB | 	rdlong	local12, local13
0227c     14 51 02 F6 | 	mov	local22, local02
02280     01 50 06 F1 | 	add	local22, #1
02284     28 53 02 F6 | 	mov	local23, local22
02288     03 52 66 F0 | 	shl	local23, #3
0228c     F2 54 02 F6 | 	mov	local24, objptr
02290     F2 52 02 F1 | 	add	local23, objptr
02294     29 13 02 FB | 	rdlong	arg01, local23
02298     35 00 00 FF 
0229c     0C E4 85 F1 | 	sub	objptr, ##27148
022a0     09 33 02 F6 | 	mov	local07, arg01
022a4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
022a8                 | LR__0111
022a8     19 FB C9 FA | 	rdbyte	result1, local07 wz
022ac     01 32 06 51 |  if_ne	add	local07, #1
022b0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
022b4                 | LR__0112
022b4     09 33 82 F1 | 	sub	local07, arg01
022b8     19 3B 02 F6 | 	mov	local11, local07
022bc     01 3A 86 F1 | 	sub	local11, #1
022c0     1E 13 02 F6 | 	mov	arg01, local12
022c4     1D 15 02 F6 | 	mov	arg02, local11
022c8     A8 6D B2 FD | 	call	#__system__Right_S
022cc     FD 3C 02 F6 | 	mov	local12, result1
022d0     18 13 02 F6 | 	mov	arg01, local06
022d4     1E 15 02 F6 | 	mov	arg02, local12
022d8     F0 4C B2 FD | 	call	#__system___string_concat
022dc     FD 30 02 F6 | 	mov	local06, result1
022e0     1C 31 62 FC | 	wrlong	local06, local10
022e4                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
022e4     14 43 02 F6 | 	mov	local15, local02
022e8     01 42 06 F1 | 	add	local15, #1
022ec     23 57 02 F6 | 	mov	local25, local17
022f0     01 56 06 F1 | 	add	local25, #1
022f4     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
022f8                 | LR__0113
022f8     2B 43 52 F2 | 	cmps	local15, local25 wc
022fc     70 00 90 3D |  if_ae	jmp	#LR__0115
02300     21 2F 02 F6 | 	mov	local05, local15
02304     01 2E 06 F1 | 	add	local05, #1
02308     03 2E 66 F0 | 	shl	local05, #3
0230c     35 00 00 FF 
02310     0C E4 05 F1 | 	add	objptr, ##27148
02314     F2 2E 02 F1 | 	add	local05, objptr
02318     17 2D 02 FB | 	rdlong	local04, local05
0231c     21 31 02 F6 | 	mov	local06, local15
02320     01 30 06 F1 | 	add	local06, #1
02324     03 30 66 F0 | 	shl	local06, #3
02328     F2 30 02 F1 | 	add	local06, objptr
0232c     04 30 06 F1 | 	add	local06, #4
02330     18 2B 02 FB | 	rdlong	local03, local06
02334     21 31 02 F6 | 	mov	local06, local15
02338     03 30 66 F0 | 	shl	local06, #3
0233c     F2 3C 02 F6 | 	mov	local12, objptr
02340     F2 30 02 F1 | 	add	local06, objptr
02344     18 2D 62 FC | 	wrlong	local04, local06
02348     21 3B 02 F6 | 	mov	local11, local15
0234c     1D 3F 02 F6 | 	mov	local13, local11
02350     03 3E 66 F0 | 	shl	local13, #3
02354     F2 3E 02 F1 | 	add	local13, objptr
02358     04 3E 06 F1 | 	add	local13, #4
0235c     1F 2B 62 FC | 	wrlong	local03, local13
02360     01 42 06 F1 | 	add	local15, #1
02364     35 00 00 FF 
02368     0C E4 85 F1 | 	sub	objptr, ##27148
0236c     88 FF 9F FD | 	jmp	#LR__0113
02370                 | LR__0114
02370                 | LR__0115
02370     01 28 86 F1 | 	sub	local02, #1
02374     01 46 86 F1 | 	sub	local17, #1
02378                 | LR__0116
02378     01 28 06 F1 | 	add	local02, #1
0237c     23 29 52 F2 | 	cmps	local02, local17 wc
02380     34 FE 9F CD |  if_b	jmp	#LR__0110
02384     00 28 06 F6 | 	mov	local02, #0
02388                 | '  
02388                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
02388                 | '  
02388                 | ' i=0 
02388                 | ' do
02388                 | LR__0117
02388     14 39 02 F6 | 	mov	local10, local02
0238c     03 38 66 F0 | 	shl	local10, #3
02390     35 00 00 FF 
02394     0C E4 05 F1 | 	add	objptr, ##27148
02398     F2 38 02 F1 | 	add	local10, objptr
0239c     1C 59 02 FB | 	rdlong	local26, local10
023a0     14 39 02 F6 | 	mov	local10, local02
023a4     01 38 06 F1 | 	add	local10, #1
023a8     03 38 66 F0 | 	shl	local10, #3
023ac     F2 38 02 F1 | 	add	local10, objptr
023b0     1C 5B 02 FB | 	rdlong	local27, local10
023b4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
023b4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
023b4     B5 01 00 FF 
023b8     27 15 06 F6 | 	mov	arg02, ##@LR__5447
023bc     2C 13 02 F6 | 	mov	arg01, local26
023c0     35 00 00 FF 
023c4     0C E4 85 F1 | 	sub	objptr, ##27148
023c8     CC 4B B2 FD | 	call	#__system___string_cmp
023cc     00 FA 0D F2 | 	cmp	result1, #0 wz
023d0     A8 00 90 AD |  if_e	jmp	#LR__0118
023d4     B5 01 00 FF 
023d8     29 15 06 F6 | 	mov	arg02, ##@LR__5448
023dc     2C 13 02 F6 | 	mov	arg01, local26
023e0     B4 4B B2 FD | 	call	#__system___string_cmp
023e4     FD 2A 0A F6 | 	mov	local03, result1 wz
023e8     90 00 90 AD |  if_e	jmp	#LR__0118
023ec     B5 01 00 FF 
023f0     2B 31 06 F6 | 	mov	local06, ##@LR__5449
023f4     2C 13 02 F6 | 	mov	arg01, local26
023f8     18 15 02 F6 | 	mov	arg02, local06
023fc     98 4B B2 FD | 	call	#__system___string_cmp
02400     00 FA 0D F2 | 	cmp	result1, #0 wz
02404     74 00 90 AD |  if_e	jmp	#LR__0118
02408     B5 01 00 FF 
0240c     2D 3D 06 F6 | 	mov	local12, ##@LR__5450
02410     2C 13 02 F6 | 	mov	arg01, local26
02414     1E 15 02 F6 | 	mov	arg02, local12
02418     7C 4B B2 FD | 	call	#__system___string_cmp
0241c     00 FA 0D F2 | 	cmp	result1, #0 wz
02420     58 00 90 AD |  if_e	jmp	#LR__0118
02424     B5 01 00 FF 
02428     2F 3B 06 F6 | 	mov	local11, ##@LR__5451
0242c     1D 3D 02 F6 | 	mov	local12, local11
02430     2C 13 02 F6 | 	mov	arg01, local26
02434     1E 15 02 F6 | 	mov	arg02, local12
02438     5C 4B B2 FD | 	call	#__system___string_cmp
0243c     FD 30 0A F6 | 	mov	local06, result1 wz
02440     38 00 90 AD |  if_e	jmp	#LR__0118
02444     B5 01 00 FF 
02448     31 3B 06 F6 | 	mov	local11, ##@LR__5452
0244c     2C 13 02 F6 | 	mov	arg01, local26
02450     1D 15 02 F6 | 	mov	arg02, local11
02454     40 4B B2 FD | 	call	#__system___string_cmp
02458     FD 3C 0A F6 | 	mov	local12, result1 wz
0245c     1C 00 90 AD |  if_e	jmp	#LR__0118
02460     B5 01 00 FF 
02464     33 41 06 F6 | 	mov	local14, ##@LR__5453
02468     2C 13 02 F6 | 	mov	arg01, local26
0246c     20 15 02 F6 | 	mov	arg02, local14
02470     24 4B B2 FD | 	call	#__system___string_cmp
02474     FD 3A 0A F6 | 	mov	local11, result1 wz
02478     20 00 90 5D |  if_ne	jmp	#LR__0119
0247c                 | LR__0118
0247c     B5 01 00 FF 
02480     35 5D 06 F6 | 	mov	local28, ##@LR__5454
02484     2E 3F 02 F6 | 	mov	local13, local28
02488     2D 13 02 F6 | 	mov	arg01, local27
0248c     1F 15 02 F6 | 	mov	arg02, local13
02490     04 4B B2 FD | 	call	#__system___string_cmp
02494     FD 40 0A F6 | 	mov	local14, result1 wz
02498     B8 00 90 AD |  if_e	jmp	#LR__0122
0249c                 | LR__0119
0249c     B5 01 00 FF 
024a0     37 5D 06 F6 | 	mov	local28, ##@LR__5455
024a4     2C 13 02 F6 | 	mov	arg01, local26
024a8     2E 15 02 F6 | 	mov	arg02, local28
024ac     E8 4A B2 FD | 	call	#__system___string_cmp
024b0     FD 3E 0A F6 | 	mov	local13, result1 wz
024b4     20 00 90 5D |  if_ne	jmp	#LR__0120
024b8     B5 01 00 FF 
024bc     39 53 06 F6 | 	mov	local23, ##@LR__5456
024c0     29 51 02 F6 | 	mov	local22, local23
024c4     2D 13 02 F6 | 	mov	arg01, local27
024c8     28 15 02 F6 | 	mov	arg02, local22
024cc     C8 4A B2 FD | 	call	#__system___string_cmp
024d0     FD 5C 0A F6 | 	mov	local28, result1 wz
024d4     7C 00 90 AD |  if_e	jmp	#LR__0122
024d8                 | LR__0120
024d8     B5 01 00 FF 
024dc     3B 53 06 F6 | 	mov	local23, ##@LR__5457
024e0     2C 13 02 F6 | 	mov	arg01, local26
024e4     29 15 02 F6 | 	mov	arg02, local23
024e8     AC 4A B2 FD | 	call	#__system___string_cmp
024ec     FD 50 0A F6 | 	mov	local22, result1 wz
024f0     20 00 90 5D |  if_ne	jmp	#LR__0121
024f4     B5 01 00 FF 
024f8     3D 5F 06 F6 | 	mov	local29, ##@LR__5458
024fc     2F 55 02 F6 | 	mov	local24, local29
02500     2D 13 02 F6 | 	mov	arg01, local27
02504     2A 15 02 F6 | 	mov	arg02, local24
02508     8C 4A B2 FD | 	call	#__system___string_cmp
0250c     FD 52 0A F6 | 	mov	local23, result1 wz
02510     40 00 90 AD |  if_e	jmp	#LR__0122
02514                 | LR__0121
02514     B5 01 00 FF 
02518     3F 61 06 F6 | 	mov	local30, ##@LR__5459
0251c     30 5F 02 F6 | 	mov	local29, local30
02520     2C 13 02 F6 | 	mov	arg01, local26
02524     2F 15 02 F6 | 	mov	arg02, local29
02528     6C 4A B2 FD | 	call	#__system___string_cmp
0252c     FD 54 0A F6 | 	mov	local24, result1 wz
02530     F0 00 90 5D |  if_ne	jmp	#LR__0126
02534     B5 01 00 FF 
02538     41 63 06 F6 | 	mov	local31, ##@LR__5460
0253c     31 61 02 F6 | 	mov	local30, local31
02540     2D 13 02 F6 | 	mov	arg01, local27
02544     30 15 02 F6 | 	mov	arg02, local30
02548     4C 4A B2 FD | 	call	#__system___string_cmp
0254c     FD 5E 0A F6 | 	mov	local29, result1 wz
02550     D0 00 90 5D |  if_ne	jmp	#LR__0126
02554                 | LR__0122
02554     14 39 02 F6 | 	mov	local10, local02
02558     03 38 66 F0 | 	shl	local10, #3
0255c     35 00 00 FF 
02560     0C E4 05 F1 | 	add	objptr, ##27148
02564     F2 38 02 F1 | 	add	local10, objptr
02568     2D 3D 02 F6 | 	mov	local12, local27
0256c     2C 13 02 F6 | 	mov	arg01, local26
02570     1E 15 02 F6 | 	mov	arg02, local12
02574     35 00 00 FF 
02578     0C E4 85 F1 | 	sub	objptr, ##27148
0257c     4C 4A B2 FD | 	call	#__system___string_concat
02580     1C FB 61 FC | 	wrlong	result1, local10
02584                 | '     lparts(i).part$=s1$+s2$
02584                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
02584     14 43 02 F6 | 	mov	local15, local02
02588     01 42 06 F1 | 	add	local15, #1
0258c     23 65 02 F6 | 	mov	local32, local17
02590     01 64 06 F1 | 	add	local32, #1
02594     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
02598                 | LR__0123
02598     32 43 52 F2 | 	cmps	local15, local32 wc
0259c     7C 00 90 3D |  if_ae	jmp	#LR__0125
025a0     21 2F 02 F6 | 	mov	local05, local15
025a4     01 2E 06 F1 | 	add	local05, #1
025a8     03 2E 66 F0 | 	shl	local05, #3
025ac     35 00 00 FF 
025b0     0C E4 05 F1 | 	add	objptr, ##27148
025b4     F2 2E 02 F1 | 	add	local05, objptr
025b8     17 2D 02 FB | 	rdlong	local04, local05
025bc     21 31 02 F6 | 	mov	local06, local15
025c0     01 30 06 F1 | 	add	local06, #1
025c4     03 30 66 F0 | 	shl	local06, #3
025c8     F2 30 02 F1 | 	add	local06, objptr
025cc     04 30 06 F1 | 	add	local06, #4
025d0     18 2B 02 FB | 	rdlong	local03, local06
025d4     21 31 02 F6 | 	mov	local06, local15
025d8     03 30 66 F0 | 	shl	local06, #3
025dc     F2 3C 02 F6 | 	mov	local12, objptr
025e0     F2 30 02 F1 | 	add	local06, objptr
025e4     18 2D 62 FC | 	wrlong	local04, local06
025e8     21 3B 02 F6 | 	mov	local11, local15
025ec     1D 41 02 F6 | 	mov	local14, local11
025f0     20 3F 02 F6 | 	mov	local13, local14
025f4     03 3E 66 F0 | 	shl	local13, #3
025f8     F2 5C 02 F6 | 	mov	local28, objptr
025fc     F2 3E 02 F1 | 	add	local13, objptr
02600     04 3E 06 F1 | 	add	local13, #4
02604     1F 2B 62 FC | 	wrlong	local03, local13
02608     04 3E 86 F1 | 	sub	local13, #4
0260c     01 42 06 F1 | 	add	local15, #1
02610     35 00 00 FF 
02614     0C E4 85 F1 | 	sub	objptr, ##27148
02618     7C FF 9F FD | 	jmp	#LR__0123
0261c                 | LR__0124
0261c                 | LR__0125
0261c     01 28 86 F1 | 	sub	local02, #1
02620     01 46 86 F1 | 	sub	local17, #1
02624                 | LR__0126
02624     01 28 06 F1 | 	add	local02, #1
02628     23 29 52 F2 | 	cmps	local02, local17 wc
0262c     58 FD 9F CD |  if_b	jmp	#LR__0117
02630                 | '  
02630                 | ' ' 1h : now remove parts that are spaces
02630                 | ' 
02630                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02630     00 28 06 F6 | 	mov	local02, #0
02634     23 67 02 F6 | 	mov	local33, local17
02638     01 66 06 F1 | 	add	local33, #1
0263c                 | LR__0127
0263c     33 29 52 F2 | 	cmps	local02, local33 wc
02640     50 00 90 3D |  if_ae	jmp	#LR__0128
02644     14 39 02 F6 | 	mov	local10, local02
02648     03 38 66 F0 | 	shl	local10, #3
0264c     35 00 00 FF 
02650     0C E4 05 F1 | 	add	objptr, ##27148
02654     F2 38 02 F1 | 	add	local10, objptr
02658     14 3D 02 F6 | 	mov	local12, local02
0265c     1E 3B 02 F6 | 	mov	local11, local12
02660     1D 41 02 F6 | 	mov	local14, local11
02664     03 40 66 F0 | 	shl	local14, #3
02668     F2 3E 02 F6 | 	mov	local13, objptr
0266c     F2 40 02 F1 | 	add	local14, objptr
02670     20 13 02 FB | 	rdlong	arg01, local14
02674     35 00 00 FF 
02678     0C E4 85 F1 | 	sub	objptr, ##27148
0267c     FC 6D B2 FD | 	call	#__system__RTrim_S
02680     FD 12 02 F6 | 	mov	arg01, result1
02684     34 6D B2 FD | 	call	#__system__LTrim_S
02688     1C FB 61 FC | 	wrlong	result1, local10
0268c     01 28 06 F1 | 	add	local02, #1
02690     A8 FF 9F FD | 	jmp	#LR__0127
02694                 | LR__0128
02694     00 28 06 F6 | 	mov	local02, #0
02698     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
0269c                 | ' i=0
0269c                 | ' do 
0269c                 | LR__0129
0269c                 | '   if len(lparts(i).part$)=0 then 
0269c     14 2F 02 F6 | 	mov	local05, local02
026a0     03 2E 66 F0 | 	shl	local05, #3
026a4     35 00 00 FF 
026a8     0C E4 05 F1 | 	add	objptr, ##27148
026ac     F2 2E 02 F1 | 	add	local05, objptr
026b0     17 13 02 FB | 	rdlong	arg01, local05
026b4     35 00 00 FF 
026b8     0C E4 85 F1 | 	sub	objptr, ##27148
026bc     09 33 02 F6 | 	mov	local07, arg01
026c0                 | LR__0130
026c0     19 FB C9 FA | 	rdbyte	result1, local07 wz
026c4     01 32 06 51 |  if_ne	add	local07, #1
026c8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
026cc     09 33 8A F1 | 	sub	local07, arg01 wz
026d0     C4 00 90 5D |  if_ne	jmp	#LR__0134
026d4                 | '     if i=k-1 then k-=1  :  exit
026d4     23 2D 02 F6 | 	mov	local04, local17
026d8     01 2C 86 F1 | 	sub	local04, #1
026dc     16 29 0A F2 | 	cmp	local02, local04 wz
026e0     01 46 86 A1 |  if_e	sub	local17, #1
026e4     C4 00 90 AD |  if_e	jmp	#LR__0136
026e8                 | '     if i<k-1 then 
026e8     23 2D 02 F6 | 	mov	local04, local17
026ec     01 2C 86 F1 | 	sub	local04, #1
026f0     16 29 52 F2 | 	cmps	local02, local04 wc
026f4     A0 00 90 3D |  if_ae	jmp	#LR__0133
026f8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
026f8     14 43 02 F6 | 	mov	local15, local02
026fc     23 69 02 F6 | 	mov	local34, local17
02700     01 68 86 F1 | 	sub	local34, #1
02704                 | LR__0131
02704     34 43 52 F2 | 	cmps	local15, local34 wc
02708     80 00 90 3D |  if_ae	jmp	#LR__0132
0270c     21 2F 02 F6 | 	mov	local05, local15
02710     01 2E 06 F1 | 	add	local05, #1
02714     03 2E 66 F0 | 	shl	local05, #3
02718     35 00 00 FF 
0271c     0C E4 05 F1 | 	add	objptr, ##27148
02720     F2 2E 02 F1 | 	add	local05, objptr
02724     17 2D 02 FB | 	rdlong	local04, local05
02728     21 31 02 F6 | 	mov	local06, local15
0272c     01 30 06 F1 | 	add	local06, #1
02730     03 30 66 F0 | 	shl	local06, #3
02734     F2 30 02 F1 | 	add	local06, objptr
02738     04 30 06 F1 | 	add	local06, #4
0273c     18 2B 02 FB | 	rdlong	local03, local06
02740     21 39 02 F6 | 	mov	local10, local15
02744     1C 31 02 F6 | 	mov	local06, local10
02748     03 30 66 F0 | 	shl	local06, #3
0274c     F2 3C 02 F6 | 	mov	local12, objptr
02750     F2 30 02 F1 | 	add	local06, objptr
02754     18 2D 62 FC | 	wrlong	local04, local06
02758     21 3B 02 F6 | 	mov	local11, local15
0275c     1D 41 02 F6 | 	mov	local14, local11
02760     20 3F 02 F6 | 	mov	local13, local14
02764     03 3E 66 F0 | 	shl	local13, #3
02768     F2 5C 02 F6 | 	mov	local28, objptr
0276c     F2 3E 02 F1 | 	add	local13, objptr
02770     04 3E 06 F1 | 	add	local13, #4
02774     1F 2B 62 FC | 	wrlong	local03, local13
02778     04 3E 86 F1 | 	sub	local13, #4
0277c     01 42 06 F1 | 	add	local15, #1
02780     35 00 00 FF 
02784     0C E4 85 F1 | 	sub	objptr, ##27148
02788     78 FF 9F FD | 	jmp	#LR__0131
0278c                 | LR__0132
0278c     01 46 86 F1 | 	sub	local17, #1
02790                 | '       if i>0 then i-=1 
02790     01 28 56 F2 | 	cmps	local02, #1 wc
02794     01 28 86 31 |  if_ae	sub	local02, #1
02798                 | LR__0133
02798                 | LR__0134
02798     01 28 06 F1 | 	add	local02, #1
0279c     23 2D 02 F6 | 	mov	local04, local17
027a0     01 2C 86 F1 | 	sub	local04, #1
027a4     16 29 5A F2 | 	cmps	local02, local04 wcz
027a8     F0 FE 9F ED |  if_be	jmp	#LR__0129
027ac                 | LR__0135
027ac                 | LR__0136
027ac                 | ' 
027ac                 | ' ' 1i: lowercase all that is not a string
027ac                 | ' 
027ac                 | ' for j=0 to k-1
027ac     00 42 06 F6 | 	mov	local15, #0
027b0     23 6B 02 F6 | 	mov	local35, local17
027b4                 | LR__0137
027b4     35 43 52 F2 | 	cmps	local15, local35 wc
027b8     CC 00 90 3D |  if_ae	jmp	#LR__0140
027bc                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
027bc     21 2F 02 F6 | 	mov	local05, local15
027c0     03 2E 66 F0 | 	shl	local05, #3
027c4     35 00 00 FF 
027c8     0C E4 05 F1 | 	add	objptr, ##27148
027cc     F2 2E 02 F1 | 	add	local05, objptr
027d0     17 13 02 FB | 	rdlong	arg01, local05
027d4     01 14 06 F6 | 	mov	arg02, #1
027d8     35 00 00 FF 
027dc     0C E4 85 F1 | 	sub	objptr, ##27148
027e0     08 68 B2 FD | 	call	#__system__Left_S
027e4     FD 12 02 F6 | 	mov	arg01, result1
027e8     B5 01 00 FF 
027ec     43 15 06 F6 | 	mov	arg02, ##@LR__5461
027f0     A4 47 B2 FD | 	call	#__system___string_cmp
027f4     00 FA 0D F2 | 	cmp	result1, #0 wz
027f8     44 00 90 5D |  if_ne	jmp	#LR__0138
027fc     21 31 02 F6 | 	mov	local06, local15
02800     03 30 66 F0 | 	shl	local06, #3
02804     35 00 00 FF 
02808     0C E4 05 F1 | 	add	objptr, ##27148
0280c     F2 3C 02 F6 | 	mov	local12, objptr
02810     F2 30 02 F1 | 	add	local06, objptr
02814     18 13 02 FB | 	rdlong	arg01, local06
02818     01 14 06 F6 | 	mov	arg02, #1
0281c     35 00 00 FF 
02820     0C E4 85 F1 | 	sub	objptr, ##27148
02824     4C 68 B2 FD | 	call	#__system__Right_S
02828     FD 12 02 F6 | 	mov	arg01, result1
0282c     B5 01 00 FF 
02830     45 15 06 F6 | 	mov	arg02, ##@LR__5462
02834     60 47 B2 FD | 	call	#__system___string_cmp
02838     00 FA 0D F2 | 	cmp	result1, #0 wz
0283c     40 00 90 AD |  if_e	jmp	#LR__0139
02840                 | LR__0138
02840     21 39 02 F6 | 	mov	local10, local15
02844     03 38 66 F0 | 	shl	local10, #3
02848     35 00 00 FF 
0284c     0C E4 05 F1 | 	add	objptr, ##27148
02850     F2 38 02 F1 | 	add	local10, objptr
02854     21 3D 02 F6 | 	mov	local12, local15
02858     1E 3B 02 F6 | 	mov	local11, local12
0285c     1D 41 02 F6 | 	mov	local14, local11
02860     03 40 66 F0 | 	shl	local14, #3
02864     F2 3E 02 F6 | 	mov	local13, objptr
02868     F2 40 02 F1 | 	add	local14, objptr
0286c     20 13 02 FB | 	rdlong	arg01, local14
02870     35 00 00 FF 
02874     0C E4 85 F1 | 	sub	objptr, ##27148
02878     80 6A B2 FD | 	call	#__system__LCase_S
0287c     1C FB 61 FC | 	wrlong	result1, local10
02880                 | LR__0139
02880     01 42 06 F1 | 	add	local15, #1
02884     2C FF 9F FD | 	jmp	#LR__0137
02888                 | LR__0140
02888                 | ' 
02888                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
02888                 | ' 
02888                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
02888     00 28 06 F6 | 	mov	local02, #0
0288c     23 6D 02 F6 | 	mov	local36, local17
02890     01 6C 06 F1 | 	add	local36, #1
02894     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
02898                 | LR__0141
02898     36 29 52 F2 | 	cmps	local02, local36 wc
0289c     30 00 90 3D |  if_ae	jmp	#LR__0143
028a0     14 39 02 F6 | 	mov	local10, local02
028a4     03 38 66 F0 | 	shl	local10, #3
028a8     35 00 00 FF 
028ac     0C E4 05 F1 | 	add	objptr, ##27148
028b0     F2 38 02 F1 | 	add	local10, objptr
028b4     04 38 06 F1 | 	add	local10, #4
028b8     FF FF FF FF 
028bc     1C FF 6B FC | 	wrlong	##-1, local10
028c0     01 28 06 F1 | 	add	local02, #1
028c4     35 00 00 FF 
028c8     0C E4 85 F1 | 	sub	objptr, ##27148
028cc     C8 FF 9F FD | 	jmp	#LR__0141
028d0                 | LR__0142
028d0                 | LR__0143
028d0                 | ' 
028d0                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
028d0     35 00 00 FF 
028d4     0C E4 05 F1 | 	add	objptr, ##27148
028d8     F2 12 02 FB | 	rdlong	arg01, objptr
028dc     35 00 00 FF 
028e0     0C E4 85 F1 | 	sub	objptr, ##27148
028e4     D8 46 B0 FD | 	call	#_isdec
028e8     00 FA 0D F2 | 	cmp	result1, #0 wz
028ec     01 6E 06 56 |  if_ne	mov	local37, #1
028f0     00 6E 06 A6 |  if_e	mov	local37, #0
028f4                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
028f4     35 00 00 FF 
028f8     0C E4 05 F1 | 	add	objptr, ##27148
028fc     F2 12 02 FB | 	rdlong	arg01, objptr
02900     35 00 00 FF 
02904     0C E4 85 F1 | 	sub	objptr, ##27148
02908     B5 01 00 FF 
0290c     47 15 06 F6 | 	mov	arg02, ##@LR__5463
02910     84 46 B2 FD | 	call	#__system___string_cmp
02914     00 FA 0D F2 | 	cmp	result1, #0 wz
02918     01 6E 06 A6 |  if_e	mov	local37, #1
0291c     00 28 06 F6 | 	mov	local02, #0
02920                 | ' i=0 : do 
02920                 | LR__0144
02920                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
02920     14 2F 02 F6 | 	mov	local05, local02
02924     03 2E 66 F0 | 	shl	local05, #3
02928     35 00 00 FF 
0292c     0C E4 05 F1 | 	add	objptr, ##27148
02930     F2 2E 02 F1 | 	add	local05, objptr
02934     17 13 02 FB | 	rdlong	arg01, local05
02938     B5 01 00 FF 
0293c     4C 15 06 F6 | 	mov	arg02, ##@LR__5464
02940     35 00 00 FF 
02944     0C E4 85 F1 | 	sub	objptr, ##27148
02948     4C 46 B2 FD | 	call	#__system___string_cmp
0294c     00 FA 0D F2 | 	cmp	result1, #0 wz
02950     0C 00 90 AD |  if_e	jmp	#LR__0145
02954     01 28 06 F1 | 	add	local02, #1
02958     23 29 5A F2 | 	cmps	local02, local17 wcz
0295c     C0 FF 9F ED |  if_be	jmp	#LR__0144
02960                 | LR__0145
02960                 | ' if i<k then addptr=i+1	 							' then found
02960     23 29 52 F2 | 	cmps	local02, local17 wc
02964     14 6F 02 C6 |  if_b	mov	local37, local02
02968     01 6E 06 C1 |  if_b	add	local37, #1
0296c     35 00 00 FF 
02970     0C E4 05 F1 | 	add	objptr, ##27148
02974                 | ' lp$=lparts(addptr).part$ 
02974                 | ' 
02974                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02974     37 2F 02 F6 | 	mov	local05, local37
02978     03 2E 66 F0 | 	shl	local05, #3
0297c     F2 2E 02 F1 | 	add	local05, objptr
02980     17 13 02 FB | 	rdlong	arg01, local05
02984     01 14 06 F6 | 	mov	arg02, #1
02988     35 00 00 FF 
0298c     0C E4 85 F1 | 	sub	objptr, ##27148
02990     58 66 B2 FD | 	call	#__system__Left_S
02994     FD 12 02 F6 | 	mov	arg01, result1
02998     B5 01 00 FF 
0299c     51 15 06 F6 | 	mov	arg02, ##@LR__5465
029a0     F4 45 B2 FD | 	call	#__system___string_cmp
029a4     00 FA 0D F2 | 	cmp	result1, #0 wz
029a8     60 01 90 5D |  if_ne	jmp	#LR__0152
029ac     37 31 02 F6 | 	mov	local06, local37
029b0     03 30 66 F0 | 	shl	local06, #3
029b4     35 00 00 FF 
029b8     0C E4 05 F1 | 	add	objptr, ##27148
029bc     F2 30 02 F1 | 	add	local06, objptr
029c0     18 13 02 FB | 	rdlong	arg01, local06
029c4     35 00 00 FF 
029c8     0C E4 85 F1 | 	sub	objptr, ##27148
029cc     09 33 02 F6 | 	mov	local07, arg01
029d0     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
029d4                 | LR__0146
029d4     19 FB C9 FA | 	rdbyte	result1, local07 wz
029d8     01 32 06 51 |  if_ne	add	local07, #1
029dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
029e0                 | LR__0147
029e0     09 33 82 F1 | 	sub	local07, arg01
029e4     02 32 56 F2 | 	cmps	local07, #2 wc
029e8     20 01 90 CD |  if_b	jmp	#LR__0152
029ec     01 46 06 F1 | 	add	local17, #1
029f0                 | '   k+=1
029f0                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
029f0     23 29 02 F6 | 	mov	local02, local17
029f4     37 71 02 F6 | 	mov	local38, local37
029f8     01 70 06 F1 | 	add	local38, #1
029fc     35 00 00 FF 
02a00     0C E4 05 F1 | 	add	objptr, ##27148
02a04     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02a08                 | LR__0148
02a08     14 2F 02 F6 | 	mov	local05, local02
02a0c     01 2E 86 F1 | 	sub	local05, #1
02a10     03 2E 66 F0 | 	shl	local05, #3
02a14     F2 2E 02 F1 | 	add	local05, objptr
02a18     17 2D 02 FB | 	rdlong	local04, local05
02a1c     14 31 02 F6 | 	mov	local06, local02
02a20     01 30 86 F1 | 	sub	local06, #1
02a24     03 30 66 F0 | 	shl	local06, #3
02a28     F2 30 02 F1 | 	add	local06, objptr
02a2c     04 30 06 F1 | 	add	local06, #4
02a30     18 2B 02 FB | 	rdlong	local03, local06
02a34     14 31 02 F6 | 	mov	local06, local02
02a38     03 30 66 F0 | 	shl	local06, #3
02a3c     F2 30 02 F1 | 	add	local06, objptr
02a40     18 2D 62 FC | 	wrlong	local04, local06
02a44     14 3F 02 F6 | 	mov	local13, local02
02a48     03 3E 66 F0 | 	shl	local13, #3
02a4c     F2 3E 02 F1 | 	add	local13, objptr
02a50     04 3E 06 F1 | 	add	local13, #4
02a54     1F 2B 62 FC | 	wrlong	local03, local13
02a58     01 28 86 F1 | 	sub	local02, #1
02a5c     38 29 52 F2 | 	cmps	local02, local38 wc
02a60     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02a64                 | LR__0149
02a64     37 39 02 F6 | 	mov	local10, local37
02a68     01 38 06 F1 | 	add	local10, #1
02a6c     03 38 66 F0 | 	shl	local10, #3
02a70     F2 38 02 F1 | 	add	local10, objptr
02a74     37 41 02 F6 | 	mov	local14, local37
02a78     03 40 66 F0 | 	shl	local14, #3
02a7c     F2 40 02 F1 | 	add	local14, objptr
02a80     20 31 02 FB | 	rdlong	local06, local14
02a84     37 3F 02 F6 | 	mov	local13, local37
02a88     1F 5D 02 F6 | 	mov	local28, local13
02a8c     2E 51 02 F6 | 	mov	local22, local28
02a90     03 50 66 F0 | 	shl	local22, #3
02a94     F2 52 02 F6 | 	mov	local23, objptr
02a98     F2 50 02 F1 | 	add	local22, objptr
02a9c     28 13 02 FB | 	rdlong	arg01, local22
02aa0     35 00 00 FF 
02aa4     0C E4 85 F1 | 	sub	objptr, ##27148
02aa8     09 33 02 F6 | 	mov	local07, arg01
02aac     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
02ab0                 | LR__0150
02ab0     19 FB C9 FA | 	rdbyte	result1, local07 wz
02ab4     01 32 06 51 |  if_ne	add	local07, #1
02ab8     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02abc                 | LR__0151
02abc     09 33 82 F1 | 	sub	local07, arg01
02ac0     19 41 02 F6 | 	mov	local14, local07
02ac4     20 3B 02 F6 | 	mov	local11, local14
02ac8     01 3A 86 F1 | 	sub	local11, #1
02acc     1D 3D 02 F6 | 	mov	local12, local11
02ad0     18 13 02 F6 | 	mov	arg01, local06
02ad4     1E 15 02 F6 | 	mov	arg02, local12
02ad8     98 65 B2 FD | 	call	#__system__Right_S
02adc     1C FB 61 FC | 	wrlong	result1, local10
02ae0     37 39 02 F6 | 	mov	local10, local37
02ae4     03 38 66 F0 | 	shl	local10, #3
02ae8     35 00 00 FF 
02aec     0C E4 05 F1 | 	add	objptr, ##27148
02af0     F2 38 02 F1 | 	add	local10, objptr
02af4     B5 01 00 FF 
02af8     53 31 06 F6 | 	mov	local06, ##@LR__5466
02afc     1C 31 62 FC | 	wrlong	local06, local10
02b00     35 00 00 FF 
02b04     0C E4 85 F1 | 	sub	objptr, ##27148
02b08     A8 01 90 FD | 	jmp	#LR__0160
02b0c                 | LR__0152
02b0c     37 31 02 F6 | 	mov	local06, local37
02b10     03 30 66 F0 | 	shl	local06, #3
02b14     35 00 00 FF 
02b18     0C E4 05 F1 | 	add	objptr, ##27148
02b1c     F2 3C 02 F6 | 	mov	local12, objptr
02b20     F2 30 02 F1 | 	add	local06, objptr
02b24     18 15 02 FB | 	rdlong	arg02, local06
02b28     B5 01 00 FF 
02b2c     55 17 06 F6 | 	mov	arg03, ##@LR__5467
02b30     01 12 06 F6 | 	mov	arg01, #1
02b34     35 00 00 FF 
02b38     0C E4 85 F1 | 	sub	objptr, ##27148
02b3c     F4 69 B2 FD | 	call	#__system__Instr
02b40     FD 72 02 F6 | 	mov	local39, result1
02b44                 | ' 
02b44                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
02b44                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
02b44     01 72 56 F2 | 	cmps	local39, #1 wc
02b48     68 01 90 CD |  if_b	jmp	#LR__0159
02b4c     37 2F 02 F6 | 	mov	local05, local37
02b50     03 2E 66 F0 | 	shl	local05, #3
02b54     35 00 00 FF 
02b58     0C E4 05 F1 | 	add	objptr, ##27148
02b5c     F2 2E 02 F1 | 	add	local05, objptr
02b60     17 13 02 FB | 	rdlong	arg01, local05
02b64     35 00 00 FF 
02b68     0C E4 85 F1 | 	sub	objptr, ##27148
02b6c     09 33 02 F6 | 	mov	local07, arg01
02b70     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02b74                 | LR__0153
02b74     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b78     01 32 06 51 |  if_ne	add	local07, #1
02b7c     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02b80                 | LR__0154
02b80     09 33 82 F1 | 	sub	local07, arg01
02b84     19 73 52 F2 | 	cmps	local39, local07 wc
02b88     28 01 90 3D |  if_ae	jmp	#LR__0159
02b8c     01 46 06 F1 | 	add	local17, #1
02b90                 | '   k+=1
02b90                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02b90     23 29 02 F6 | 	mov	local02, local17
02b94     37 75 02 F6 | 	mov	local40, local37
02b98     01 74 06 F1 | 	add	local40, #1
02b9c     35 00 00 FF 
02ba0     0C E4 05 F1 | 	add	objptr, ##27148
02ba4     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02ba8                 | LR__0155
02ba8     14 2F 02 F6 | 	mov	local05, local02
02bac     01 2E 86 F1 | 	sub	local05, #1
02bb0     03 2E 66 F0 | 	shl	local05, #3
02bb4     F2 2E 02 F1 | 	add	local05, objptr
02bb8     17 2D 02 FB | 	rdlong	local04, local05
02bbc     14 31 02 F6 | 	mov	local06, local02
02bc0     01 30 86 F1 | 	sub	local06, #1
02bc4     03 30 66 F0 | 	shl	local06, #3
02bc8     F2 30 02 F1 | 	add	local06, objptr
02bcc     04 30 06 F1 | 	add	local06, #4
02bd0     18 2B 02 FB | 	rdlong	local03, local06
02bd4     14 31 02 F6 | 	mov	local06, local02
02bd8     03 30 66 F0 | 	shl	local06, #3
02bdc     F2 30 02 F1 | 	add	local06, objptr
02be0     18 2D 62 FC | 	wrlong	local04, local06
02be4     14 3F 02 F6 | 	mov	local13, local02
02be8     03 3E 66 F0 | 	shl	local13, #3
02bec     F2 3E 02 F1 | 	add	local13, objptr
02bf0     04 3E 06 F1 | 	add	local13, #4
02bf4     1F 2B 62 FC | 	wrlong	local03, local13
02bf8     01 28 86 F1 | 	sub	local02, #1
02bfc     3A 29 52 F2 | 	cmps	local02, local40 wc
02c00     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02c04                 | LR__0156
02c04     37 39 02 F6 | 	mov	local10, local37
02c08     01 38 06 F1 | 	add	local10, #1
02c0c     03 38 66 F0 | 	shl	local10, #3
02c10     F2 38 02 F1 | 	add	local10, objptr
02c14     37 41 02 F6 | 	mov	local14, local37
02c18     03 40 66 F0 | 	shl	local14, #3
02c1c     F2 40 02 F1 | 	add	local14, objptr
02c20     20 31 02 FB | 	rdlong	local06, local14
02c24     37 5D 02 F6 | 	mov	local28, local37
02c28     2E 51 02 F6 | 	mov	local22, local28
02c2c     03 50 66 F0 | 	shl	local22, #3
02c30     F2 52 02 F6 | 	mov	local23, objptr
02c34     F2 50 02 F1 | 	add	local22, objptr
02c38     28 13 02 FB | 	rdlong	arg01, local22
02c3c     35 00 00 FF 
02c40     0C E4 85 F1 | 	sub	objptr, ##27148
02c44     09 33 02 F6 | 	mov	local07, arg01
02c48     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02c4c                 | LR__0157
02c4c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02c50     01 32 06 51 |  if_ne	add	local07, #1
02c54     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02c58                 | LR__0158
02c58     09 33 82 F1 | 	sub	local07, arg01
02c5c     19 15 02 F6 | 	mov	arg02, local07
02c60     39 15 82 F1 | 	sub	arg02, local39
02c64     18 13 02 F6 | 	mov	arg01, local06
02c68     08 64 B2 FD | 	call	#__system__Right_S
02c6c     1C FB 61 FC | 	wrlong	result1, local10
02c70     37 39 02 F6 | 	mov	local10, local37
02c74     03 38 66 F0 | 	shl	local10, #3
02c78     35 00 00 FF 
02c7c     0C E4 05 F1 | 	add	objptr, ##27148
02c80     F2 38 02 F1 | 	add	local10, objptr
02c84     37 3B 02 F6 | 	mov	local11, local37
02c88     1D 41 02 F6 | 	mov	local14, local11
02c8c     03 40 66 F0 | 	shl	local14, #3
02c90     F2 3E 02 F6 | 	mov	local13, objptr
02c94     F2 40 02 F1 | 	add	local14, objptr
02c98     20 13 02 FB | 	rdlong	arg01, local14
02c9c     39 3D 02 F6 | 	mov	local12, local39
02ca0     1E 15 02 F6 | 	mov	arg02, local12
02ca4     35 00 00 FF 
02ca8     0C E4 85 F1 | 	sub	objptr, ##27148
02cac     3C 63 B2 FD | 	call	#__system__Left_S
02cb0     1C FB 61 FC | 	wrlong	result1, local10
02cb4                 | LR__0159
02cb4                 | LR__0160
02cb4     37 39 02 F6 | 	mov	local10, local37
02cb8     03 38 66 F0 | 	shl	local10, #3
02cbc     35 00 00 FF 
02cc0     0C E4 05 F1 | 	add	objptr, ##27148
02cc4     F2 38 02 F1 | 	add	local10, objptr
02cc8     1C 77 02 FB | 	rdlong	local41, local10
02ccc                 | ' 
02ccc                 | ' 825
02ccc                 | ' lp$=lparts(addptr).part$ 
02ccc                 | ' 
02ccc                 | ' ' process mouse/cursor/click on/off
02ccc                 | ' 
02ccc                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02ccc     B5 01 00 FF 
02cd0     57 15 06 F6 | 	mov	arg02, ##@LR__5468
02cd4     3B 13 02 F6 | 	mov	arg01, local41
02cd8     35 00 00 FF 
02cdc     0C E4 85 F1 | 	sub	objptr, ##27148
02ce0     B4 42 B2 FD | 	call	#__system___string_cmp
02ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ce8     30 00 90 AD |  if_e	jmp	#LR__0161
02cec     B5 01 00 FF 
02cf0     5D 15 06 F6 | 	mov	arg02, ##@LR__5469
02cf4     3B 13 02 F6 | 	mov	arg01, local41
02cf8     9C 42 B2 FD | 	call	#__system___string_cmp
02cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02d00     18 00 90 AD |  if_e	jmp	#LR__0161
02d04     B5 01 00 FF 
02d08     64 15 06 F6 | 	mov	arg02, ##@LR__5470
02d0c     3B 13 02 F6 | 	mov	arg01, local41
02d10     84 42 B2 FD | 	call	#__system___string_cmp
02d14     00 FA 0D F2 | 	cmp	result1, #0 wz
02d18     E0 00 90 5D |  if_ne	jmp	#LR__0164
02d1c                 | LR__0161
02d1c                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02d1c     37 2F 02 F6 | 	mov	local05, local37
02d20     01 2E 06 F1 | 	add	local05, #1
02d24     03 2E 66 F0 | 	shl	local05, #3
02d28     35 00 00 FF 
02d2c     0C E4 05 F1 | 	add	objptr, ##27148
02d30     F2 2E 02 F1 | 	add	local05, objptr
02d34     17 13 02 FB | 	rdlong	arg01, local05
02d38     B5 01 00 FF 
02d3c     6A 15 06 F6 | 	mov	arg02, ##@LR__5471
02d40     35 00 00 FF 
02d44     0C E4 85 F1 | 	sub	objptr, ##27148
02d48     4C 42 B2 FD | 	call	#__system___string_cmp
02d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d50     38 00 90 5D |  if_ne	jmp	#LR__0162
02d54     37 39 02 F6 | 	mov	local10, local37
02d58     01 38 06 F1 | 	add	local10, #1
02d5c     03 38 66 F0 | 	shl	local10, #3
02d60     35 00 00 FF 
02d64     0C E4 05 F1 | 	add	objptr, ##27148
02d68     F2 38 02 F1 | 	add	local10, objptr
02d6c     B5 01 00 FF 
02d70     6D 31 06 F6 | 	mov	local06, ##@LR__5472
02d74     1C 31 62 FC | 	wrlong	local06, local10
02d78     14 E4 05 F1 | 	add	objptr, #20
02d7c     01 00 80 FF 
02d80     F2 00 68 FC | 	wrlong	##512, objptr
02d84     35 00 00 FF 
02d88     20 E4 85 F1 | 	sub	objptr, ##27168
02d8c                 | LR__0162
02d8c                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02d8c     37 2F 02 F6 | 	mov	local05, local37
02d90     01 2E 06 F1 | 	add	local05, #1
02d94     03 2E 66 F0 | 	shl	local05, #3
02d98     35 00 00 FF 
02d9c     0C E4 05 F1 | 	add	objptr, ##27148
02da0     F2 2E 02 F1 | 	add	local05, objptr
02da4     17 13 02 FB | 	rdlong	arg01, local05
02da8     B5 01 00 FF 
02dac     6F 15 06 F6 | 	mov	arg02, ##@LR__5473
02db0     35 00 00 FF 
02db4     0C E4 85 F1 | 	sub	objptr, ##27148
02db8     DC 41 B2 FD | 	call	#__system___string_cmp
02dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
02dc0     38 00 90 5D |  if_ne	jmp	#LR__0163
02dc4     37 39 02 F6 | 	mov	local10, local37
02dc8     01 38 06 F1 | 	add	local10, #1
02dcc     03 38 66 F0 | 	shl	local10, #3
02dd0     35 00 00 FF 
02dd4     0C E4 05 F1 | 	add	objptr, ##27148
02dd8     F2 38 02 F1 | 	add	local10, objptr
02ddc     B5 01 00 FF 
02de0     73 31 06 F6 | 	mov	local06, ##@LR__5474
02de4     1C 31 62 FC | 	wrlong	local06, local10
02de8     14 E4 05 F1 | 	add	objptr, #20
02dec     01 00 80 FF 
02df0     F2 00 68 FC | 	wrlong	##512, objptr
02df4     35 00 00 FF 
02df8     20 E4 85 F1 | 	sub	objptr, ##27168
02dfc                 | LR__0163
02dfc                 | LR__0164
02dfc                 | ' 		
02dfc                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02dfc                 | ' 
02dfc                 | ' if (lp$="mode" orelse lp$="m.") then 
02dfc     B5 01 00 FF 
02e00     75 15 06 F6 | 	mov	arg02, ##@LR__5475
02e04     3B 13 02 F6 | 	mov	arg01, local41
02e08     8C 41 B2 FD | 	call	#__system___string_cmp
02e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e10     18 00 90 AD |  if_e	jmp	#LR__0165
02e14     B5 01 00 FF 
02e18     7A 15 06 F6 | 	mov	arg02, ##@LR__5476
02e1c     3B 13 02 F6 | 	mov	arg01, local41
02e20     74 41 B2 FD | 	call	#__system___string_cmp
02e24     00 FA 0D F2 | 	cmp	result1, #0 wz
02e28     58 02 90 5D |  if_ne	jmp	#LR__0172
02e2c                 | LR__0165
02e2c                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02e2c     37 2F 02 F6 | 	mov	local05, local37
02e30     01 2E 06 F1 | 	add	local05, #1
02e34     03 2E 66 F0 | 	shl	local05, #3
02e38     35 00 00 FF 
02e3c     0C E4 05 F1 | 	add	objptr, ##27148
02e40     F2 2E 02 F1 | 	add	local05, objptr
02e44     17 13 02 FB | 	rdlong	arg01, local05
02e48     B5 01 00 FF 
02e4c     7D 15 06 F6 | 	mov	arg02, ##@LR__5477
02e50     35 00 00 FF 
02e54     0C E4 85 F1 | 	sub	objptr, ##27148
02e58     3C 41 B2 FD | 	call	#__system___string_cmp
02e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e60     2C 00 90 5D |  if_ne	jmp	#LR__0166
02e64     37 39 02 F6 | 	mov	local10, local37
02e68     01 38 06 F1 | 	add	local10, #1
02e6c     03 38 66 F0 | 	shl	local10, #3
02e70     35 00 00 FF 
02e74     0C E4 05 F1 | 	add	objptr, ##27148
02e78     F2 38 02 F1 | 	add	local10, objptr
02e7c     B5 01 00 FF 
02e80     83 31 06 F6 | 	mov	local06, ##@LR__5478
02e84     1C 31 62 FC | 	wrlong	local06, local10
02e88     35 00 00 FF 
02e8c     0C E4 85 F1 | 	sub	objptr, ##27148
02e90                 | LR__0166
02e90                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02e90     37 2F 02 F6 | 	mov	local05, local37
02e94     01 2E 06 F1 | 	add	local05, #1
02e98     03 2E 66 F0 | 	shl	local05, #3
02e9c     35 00 00 FF 
02ea0     0C E4 05 F1 | 	add	objptr, ##27148
02ea4     F2 2E 02 F1 | 	add	local05, objptr
02ea8     17 13 02 FB | 	rdlong	arg01, local05
02eac     B5 01 00 FF 
02eb0     85 15 06 F6 | 	mov	arg02, ##@LR__5479
02eb4     35 00 00 FF 
02eb8     0C E4 85 F1 | 	sub	objptr, ##27148
02ebc     D8 40 B2 FD | 	call	#__system___string_cmp
02ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec4     2C 00 90 5D |  if_ne	jmp	#LR__0167
02ec8     37 39 02 F6 | 	mov	local10, local37
02ecc     01 38 06 F1 | 	add	local10, #1
02ed0     03 38 66 F0 | 	shl	local10, #3
02ed4     35 00 00 FF 
02ed8     0C E4 05 F1 | 	add	objptr, ##27148
02edc     F2 38 02 F1 | 	add	local10, objptr
02ee0     B5 01 00 FF 
02ee4     8E 31 06 F6 | 	mov	local06, ##@LR__5480
02ee8     1C 31 62 FC | 	wrlong	local06, local10
02eec     35 00 00 FF 
02ef0     0C E4 85 F1 | 	sub	objptr, ##27148
02ef4                 | LR__0167
02ef4                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02ef4     37 2F 02 F6 | 	mov	local05, local37
02ef8     01 2E 06 F1 | 	add	local05, #1
02efc     03 2E 66 F0 | 	shl	local05, #3
02f00     35 00 00 FF 
02f04     0C E4 05 F1 | 	add	objptr, ##27148
02f08     F2 2E 02 F1 | 	add	local05, objptr
02f0c     17 13 02 FB | 	rdlong	arg01, local05
02f10     B5 01 00 FF 
02f14     90 15 06 F6 | 	mov	arg02, ##@LR__5481
02f18     35 00 00 FF 
02f1c     0C E4 85 F1 | 	sub	objptr, ##27148
02f20     74 40 B2 FD | 	call	#__system___string_cmp
02f24     00 FA 0D F2 | 	cmp	result1, #0 wz
02f28     2C 00 90 5D |  if_ne	jmp	#LR__0168
02f2c     37 39 02 F6 | 	mov	local10, local37
02f30     01 38 06 F1 | 	add	local10, #1
02f34     03 38 66 F0 | 	shl	local10, #3
02f38     35 00 00 FF 
02f3c     0C E4 05 F1 | 	add	objptr, ##27148
02f40     F2 38 02 F1 | 	add	local10, objptr
02f44     B5 01 00 FF 
02f48     99 31 06 F6 | 	mov	local06, ##@LR__5482
02f4c     1C 31 62 FC | 	wrlong	local06, local10
02f50     35 00 00 FF 
02f54     0C E4 85 F1 | 	sub	objptr, ##27148
02f58                 | LR__0168
02f58                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02f58     37 2F 02 F6 | 	mov	local05, local37
02f5c     01 2E 06 F1 | 	add	local05, #1
02f60     03 2E 66 F0 | 	shl	local05, #3
02f64     35 00 00 FF 
02f68     0C E4 05 F1 | 	add	objptr, ##27148
02f6c     F2 2E 02 F1 | 	add	local05, objptr
02f70     17 13 02 FB | 	rdlong	arg01, local05
02f74     B5 01 00 FF 
02f78     9B 15 06 F6 | 	mov	arg02, ##@LR__5483
02f7c     35 00 00 FF 
02f80     0C E4 85 F1 | 	sub	objptr, ##27148
02f84     10 40 B2 FD | 	call	#__system___string_cmp
02f88     00 FA 0D F2 | 	cmp	result1, #0 wz
02f8c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f90     37 39 02 F6 | 	mov	local10, local37
02f94     01 38 06 F1 | 	add	local10, #1
02f98     03 38 66 F0 | 	shl	local10, #3
02f9c     35 00 00 FF 
02fa0     0C E4 05 F1 | 	add	objptr, ##27148
02fa4     F2 38 02 F1 | 	add	local10, objptr
02fa8     B5 01 00 FF 
02fac     A4 31 06 F6 | 	mov	local06, ##@LR__5484
02fb0     1C 31 62 FC | 	wrlong	local06, local10
02fb4     35 00 00 FF 
02fb8     0C E4 85 F1 | 	sub	objptr, ##27148
02fbc                 | LR__0169
02fbc                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02fbc     37 2F 02 F6 | 	mov	local05, local37
02fc0     01 2E 06 F1 | 	add	local05, #1
02fc4     03 2E 66 F0 | 	shl	local05, #3
02fc8     35 00 00 FF 
02fcc     0C E4 05 F1 | 	add	objptr, ##27148
02fd0     F2 2E 02 F1 | 	add	local05, objptr
02fd4     17 13 02 FB | 	rdlong	arg01, local05
02fd8     B5 01 00 FF 
02fdc     A6 15 06 F6 | 	mov	arg02, ##@LR__5485
02fe0     35 00 00 FF 
02fe4     0C E4 85 F1 | 	sub	objptr, ##27148
02fe8     AC 3F B2 FD | 	call	#__system___string_cmp
02fec     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff0     2C 00 90 5D |  if_ne	jmp	#LR__0170
02ff4     37 39 02 F6 | 	mov	local10, local37
02ff8     01 38 06 F1 | 	add	local10, #1
02ffc     03 38 66 F0 | 	shl	local10, #3
03000     35 00 00 FF 
03004     0C E4 05 F1 | 	add	objptr, ##27148
03008     F2 38 02 F1 | 	add	local10, objptr
0300c     B5 01 00 FF 
03010     A9 31 06 F6 | 	mov	local06, ##@LR__5486
03014     1C 31 62 FC | 	wrlong	local06, local10
03018     35 00 00 FF 
0301c     0C E4 85 F1 | 	sub	objptr, ##27148
03020                 | LR__0170
03020                 | '   if lparts(addptr+1).part$="amiga" then lparts(addptr+1).part$="5"  
03020     37 2F 02 F6 | 	mov	local05, local37
03024     01 2E 06 F1 | 	add	local05, #1
03028     03 2E 66 F0 | 	shl	local05, #3
0302c     35 00 00 FF 
03030     0C E4 05 F1 | 	add	objptr, ##27148
03034     F2 2E 02 F1 | 	add	local05, objptr
03038     17 13 02 FB | 	rdlong	arg01, local05
0303c     B5 01 00 FF 
03040     AB 15 06 F6 | 	mov	arg02, ##@LR__5487
03044     35 00 00 FF 
03048     0C E4 85 F1 | 	sub	objptr, ##27148
0304c     48 3F B2 FD | 	call	#__system___string_cmp
03050     00 FA 0D F2 | 	cmp	result1, #0 wz
03054     2C 00 90 5D |  if_ne	jmp	#LR__0171
03058     37 39 02 F6 | 	mov	local10, local37
0305c     01 38 06 F1 | 	add	local10, #1
03060     03 38 66 F0 | 	shl	local10, #3
03064     35 00 00 FF 
03068     0C E4 05 F1 | 	add	objptr, ##27148
0306c     F2 38 02 F1 | 	add	local10, objptr
03070     B5 01 00 FF 
03074     B1 31 06 F6 | 	mov	local06, ##@LR__5488
03078     1C 31 62 FC | 	wrlong	local06, local10
0307c     35 00 00 FF 
03080     0C E4 85 F1 | 	sub	objptr, ##27148
03084                 | LR__0171
03084                 | LR__0172
03084                 | ' 
03084                 | ' ' find part types 
03084                 | ' 
03084                 | ' for i=0 to k-1
03084     00 28 06 F6 | 	mov	local02, #0
03088     23 79 02 F6 | 	mov	local42, local17
0308c                 | LR__0173
0308c     3C 29 52 F2 | 	cmps	local02, local42 wc
03090     A4 07 90 3D |  if_ae	jmp	#LR__0185
03094     14 39 02 F6 | 	mov	local10, local02
03098     03 38 66 F0 | 	shl	local10, #3
0309c     35 00 00 FF 
030a0     0C E4 05 F1 | 	add	objptr, ##27148
030a4     F2 38 02 F1 | 	add	local10, objptr
030a8     14 3B 02 F6 | 	mov	local11, local02
030ac     1D 41 02 F6 | 	mov	local14, local11
030b0     20 3F 02 F6 | 	mov	local13, local14
030b4     03 3E 66 F0 | 	shl	local13, #3
030b8     F2 3E 02 F1 | 	add	local13, objptr
030bc     1F 13 02 FB | 	rdlong	arg01, local13
030c0     35 00 00 FF 
030c4     0C E4 85 F1 | 	sub	objptr, ##27148
030c8     70 1B B0 FD | 	call	#_isseparator
030cc     FD FA E1 F8 | 	getbyte	result1, result1, #0
030d0     04 38 06 F1 | 	add	local10, #4
030d4     1C FB 61 FC | 	wrlong	result1, local10
030d8                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
030d8     14 39 02 F6 | 	mov	local10, local02
030dc     03 38 66 F0 | 	shl	local10, #3
030e0     35 00 00 FF 
030e4     0C E4 05 F1 | 	add	objptr, ##27148
030e8     F2 38 02 F1 | 	add	local10, objptr
030ec     04 38 06 F1 | 	add	local10, #4
030f0     1C 3D 02 FB | 	rdlong	local12, local10
030f4     01 3C 56 F2 | 	cmps	local12, #1 wc
030f8     35 00 00 FF 
030fc     0C E4 85 F1 | 	sub	objptr, ##27148
03100     2C 07 90 3D |  if_ae	jmp	#LR__0184
03104     14 39 02 F6 | 	mov	local10, local02
03108     03 38 66 F0 | 	shl	local10, #3
0310c     35 00 00 FF 
03110     0C E4 05 F1 | 	add	objptr, ##27148
03114     F2 38 02 F1 | 	add	local10, objptr
03118     14 3B 02 F6 | 	mov	local11, local02
0311c     1D 41 02 F6 | 	mov	local14, local11
03120     20 3F 02 F6 | 	mov	local13, local14
03124     03 3E 66 F0 | 	shl	local13, #3
03128     F2 3E 02 F1 | 	add	local13, objptr
0312c     1F 13 02 FB | 	rdlong	arg01, local13
03130     35 00 00 FF 
03134     0C E4 85 F1 | 	sub	objptr, ##27148
03138     4C 13 B0 FD | 	call	#_isoperator
0313c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03140     04 38 06 F1 | 	add	local10, #4
03144     1C FB 61 FC | 	wrlong	result1, local10
03148                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03148     14 39 02 F6 | 	mov	local10, local02
0314c     03 38 66 F0 | 	shl	local10, #3
03150     35 00 00 FF 
03154     0C E4 05 F1 | 	add	objptr, ##27148
03158     F2 38 02 F1 | 	add	local10, objptr
0315c     04 38 06 F1 | 	add	local10, #4
03160     1C 3D 02 FB | 	rdlong	local12, local10
03164     01 3C 56 F2 | 	cmps	local12, #1 wc
03168     35 00 00 FF 
0316c     0C E4 85 F1 | 	sub	objptr, ##27148
03170     BC 06 90 3D |  if_ae	jmp	#LR__0184
03174     14 39 02 F6 | 	mov	local10, local02
03178     03 38 66 F0 | 	shl	local10, #3
0317c     35 00 00 FF 
03180     0C E4 05 F1 | 	add	objptr, ##27148
03184     F2 38 02 F1 | 	add	local10, objptr
03188     14 3B 02 F6 | 	mov	local11, local02
0318c     1D 41 02 F6 | 	mov	local14, local11
03190     20 3F 02 F6 | 	mov	local13, local14
03194     03 3E 66 F0 | 	shl	local13, #3
03198     F2 3E 02 F1 | 	add	local13, objptr
0319c     1F 13 02 FB | 	rdlong	arg01, local13
031a0     35 00 00 FF 
031a4     0C E4 85 F1 | 	sub	objptr, ##27148
031a8                 | ' 
031a8                 | ' select case s
031a8     B6 01 00 FF 
031ac     B6 14 06 F6 | 	mov	arg02, ##@LR__5579
031b0     E4 3D B2 FD | 	call	#__system___string_cmp
031b4     00 FA 0D F2 | 	cmp	result1, #0 wz
031b8     1B FA 05 A6 |  if_e	mov	result1, #27
031bc     00 FA 05 56 |  if_ne	mov	result1, #0
031c0     FD FA E1 F8 | 	getbyte	result1, result1, #0
031c4     04 38 06 F1 | 	add	local10, #4
031c8     1C FB 61 FC | 	wrlong	result1, local10
031cc                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
031cc     14 39 02 F6 | 	mov	local10, local02
031d0     03 38 66 F0 | 	shl	local10, #3
031d4     35 00 00 FF 
031d8     0C E4 05 F1 | 	add	objptr, ##27148
031dc     F2 38 02 F1 | 	add	local10, objptr
031e0     04 38 06 F1 | 	add	local10, #4
031e4     1C 3D 02 FB | 	rdlong	local12, local10
031e8     01 3C 56 F2 | 	cmps	local12, #1 wc
031ec     35 00 00 FF 
031f0     0C E4 85 F1 | 	sub	objptr, ##27148
031f4     38 06 90 3D |  if_ae	jmp	#LR__0184
031f8     14 39 02 F6 | 	mov	local10, local02
031fc     03 38 66 F0 | 	shl	local10, #3
03200     35 00 00 FF 
03204     0C E4 05 F1 | 	add	objptr, ##27148
03208     F2 38 02 F1 | 	add	local10, objptr
0320c     14 3B 02 F6 | 	mov	local11, local02
03210     1D 41 02 F6 | 	mov	local14, local11
03214     20 3F 02 F6 | 	mov	local13, local14
03218     03 3E 66 F0 | 	shl	local13, #3
0321c     F2 3E 02 F1 | 	add	local13, objptr
03220     1F 13 02 FB | 	rdlong	arg01, local13
03224     35 00 00 FF 
03228     0C E4 85 F1 | 	sub	objptr, ##27148
0322c     0C 1C B0 FD | 	call	#_iscommand
03230     FD FA E1 F8 | 	getbyte	result1, result1, #0
03234     04 38 06 F1 | 	add	local10, #4
03238     1C FB 61 FC | 	wrlong	result1, local10
0323c                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
0323c     14 39 02 F6 | 	mov	local10, local02
03240     03 38 66 F0 | 	shl	local10, #3
03244     35 00 00 FF 
03248     0C E4 05 F1 | 	add	objptr, ##27148
0324c     F2 38 02 F1 | 	add	local10, objptr
03250     04 38 06 F1 | 	add	local10, #4
03254     1C 3D 02 FB | 	rdlong	local12, local10
03258     01 3C 56 F2 | 	cmps	local12, #1 wc
0325c     35 00 00 FF 
03260     0C E4 85 F1 | 	sub	objptr, ##27148
03264     C8 05 90 3D |  if_ae	jmp	#LR__0184
03268     14 39 02 F6 | 	mov	local10, local02
0326c     03 38 66 F0 | 	shl	local10, #3
03270     35 00 00 FF 
03274     0C E4 05 F1 | 	add	objptr, ##27148
03278     F2 38 02 F1 | 	add	local10, objptr
0327c     14 3B 02 F6 | 	mov	local11, local02
03280     1D 41 02 F6 | 	mov	local14, local11
03284     20 3F 02 F6 | 	mov	local13, local14
03288     03 3E 66 F0 | 	shl	local13, #3
0328c     F2 5C 02 F6 | 	mov	local28, objptr
03290     F2 3E 02 F1 | 	add	local13, objptr
03294     1F 13 02 FB | 	rdlong	arg01, local13
03298     35 00 00 FF 
0329c     0C E4 85 F1 | 	sub	objptr, ##27148
032a0     98 2C B0 FD | 	call	#_isfunction
032a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
032a8     04 38 06 F1 | 	add	local10, #4
032ac     1C FB 61 FC | 	wrlong	result1, local10
032b0                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
032b0     14 39 02 F6 | 	mov	local10, local02
032b4     03 38 66 F0 | 	shl	local10, #3
032b8     35 00 00 FF 
032bc     0C E4 05 F1 | 	add	objptr, ##27148
032c0     F2 38 02 F1 | 	add	local10, objptr
032c4     04 38 06 F1 | 	add	local10, #4
032c8     1C 3D 02 FB | 	rdlong	local12, local10
032cc     01 3C 56 F2 | 	cmps	local12, #1 wc
032d0     35 00 00 FF 
032d4     0C E4 85 F1 | 	sub	objptr, ##27148
032d8     54 05 90 3D |  if_ae	jmp	#LR__0184
032dc     14 39 02 F6 | 	mov	local10, local02
032e0     03 38 66 F0 | 	shl	local10, #3
032e4     35 00 00 FF 
032e8     0C E4 05 F1 | 	add	objptr, ##27148
032ec     F2 38 02 F1 | 	add	local10, objptr
032f0     14 3B 02 F6 | 	mov	local11, local02
032f4     1D 41 02 F6 | 	mov	local14, local11
032f8     03 40 66 F0 | 	shl	local14, #3
032fc     F2 3E 02 F6 | 	mov	local13, objptr
03300     F2 40 02 F1 | 	add	local14, objptr
03304     20 13 02 FB | 	rdlong	arg01, local14
03308     35 00 00 FF 
0330c     0C E4 85 F1 | 	sub	objptr, ##27148
03310     BC 15 B0 FD | 	call	#_isnotename
03314     04 38 06 F1 | 	add	local10, #4
03318     1C FB 61 FC | 	wrlong	result1, local10
0331c                 | ' lparts(i).token=isnotename(lparts(i).part$) 
0331c                 | ' if lparts(i).token>0 then 
0331c     14 39 02 F6 | 	mov	local10, local02
03320     03 38 66 F0 | 	shl	local10, #3
03324     35 00 00 FF 
03328     0C E4 05 F1 | 	add	objptr, ##27148
0332c     F2 38 02 F1 | 	add	local10, objptr
03330     04 38 06 F1 | 	add	local10, #4
03334     1C 31 02 FB | 	rdlong	local06, local10
03338     01 30 56 F2 | 	cmps	local06, #1 wc
0333c     35 00 00 FF 
03340     0C E4 85 F1 | 	sub	objptr, ##27148
03344     8C 00 90 CD |  if_b	jmp	#LR__0174
03348     14 2F 02 F6 | 	mov	local05, local02
0334c     03 2E 66 F0 | 	shl	local05, #3
03350     35 00 00 FF 
03354     0C E4 05 F1 | 	add	objptr, ##27148
03358     F2 2E 02 F1 | 	add	local05, objptr
0335c     04 2E 06 F1 | 	add	local05, #4
03360     17 3D 02 FB | 	rdlong	local12, local05
03364     1E 13 02 F6 | 	mov	arg01, local12
03368     35 00 00 FF 
0336c     0C E4 85 F1 | 	sub	objptr, ##27148
03370     70 3D B0 FD | 	call	#_getnoteval
03374     FD 7A 02 F6 | 	mov	local43, result1
03378     14 39 02 F6 | 	mov	local10, local02
0337c     03 38 66 F0 | 	shl	local10, #3
03380     35 00 00 FF 
03384     0C E4 05 F1 | 	add	objptr, ##27148
03388     F2 38 02 F1 | 	add	local10, objptr
0338c     3D 13 02 F6 | 	mov	arg01, local43
03390     35 00 00 FF 
03394     0C E4 85 F1 | 	sub	objptr, ##27148
03398     48 5E B2 FD | 	call	#__system__str_S
0339c     1C FB 61 FC | 	wrlong	result1, local10
033a0     14 2D 02 F6 | 	mov	local04, local02
033a4     16 2B 02 F6 | 	mov	local03, local04
033a8     15 39 02 F6 | 	mov	local10, local03
033ac     03 38 66 F0 | 	shl	local10, #3
033b0     35 00 00 FF 
033b4     0C E4 05 F1 | 	add	objptr, ##27148
033b8     F2 38 02 F1 | 	add	local10, objptr
033bc     04 38 06 F1 | 	add	local10, #4
033c0     01 00 80 FF 
033c4     1C 05 68 FC | 	wrlong	##514, local10
033c8     35 00 00 FF 
033cc     0C E4 85 F1 | 	sub	objptr, ##27148
033d0     5C 04 90 FD | 	jmp	#LR__0184
033d4                 | LR__0174
033d4     14 39 02 F6 | 	mov	local10, local02
033d8     03 38 66 F0 | 	shl	local10, #3
033dc     35 00 00 FF 
033e0     0C E4 05 F1 | 	add	objptr, ##27148
033e4     F2 38 02 F1 | 	add	local10, objptr
033e8     14 41 02 F6 | 	mov	local14, local02
033ec     03 40 66 F0 | 	shl	local14, #3
033f0     F2 40 02 F1 | 	add	local14, objptr
033f4     20 13 02 FB | 	rdlong	arg01, local14
033f8     35 00 00 FF 
033fc     0C E4 85 F1 | 	sub	objptr, ##27148
03400     64 13 B0 FD | 	call	#_ischannel
03404     04 38 06 F1 | 	add	local10, #4
03408     1C FB 61 FC | 	wrlong	result1, local10
0340c                 | ' 
0340c                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
0340c                 | ' 
0340c                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
0340c     14 39 02 F6 | 	mov	local10, local02
03410     03 38 66 F0 | 	shl	local10, #3
03414     35 00 00 FF 
03418     0C E4 05 F1 | 	add	objptr, ##27148
0341c     F2 38 02 F1 | 	add	local10, objptr
03420     04 38 06 F1 | 	add	local10, #4
03424     1C 31 02 FB | 	rdlong	local06, local10
03428     01 30 56 F2 | 	cmps	local06, #1 wc
0342c     35 00 00 FF 
03430     0C E4 85 F1 | 	sub	objptr, ##27148
03434     74 00 90 CD |  if_b	jmp	#LR__0175
03438     14 39 02 F6 | 	mov	local10, local02
0343c     03 38 66 F0 | 	shl	local10, #3
03440     35 00 00 FF 
03444     0C E4 05 F1 | 	add	objptr, ##27148
03448     F2 38 02 F1 | 	add	local10, objptr
0344c     14 3B 02 F6 | 	mov	local11, local02
03450     1D 41 02 F6 | 	mov	local14, local11
03454     03 40 66 F0 | 	shl	local14, #3
03458     F2 3E 02 F6 | 	mov	local13, objptr
0345c     F2 40 02 F1 | 	add	local14, objptr
03460     20 13 02 FB | 	rdlong	arg01, local14
03464     01 3C 06 F6 | 	mov	local12, #1
03468     01 14 06 F6 | 	mov	arg02, #1
0346c     35 00 00 FF 
03470     0C E4 85 F1 | 	sub	objptr, ##27148
03474     FC 5B B2 FD | 	call	#__system__Right_S
03478     1C FB 61 FC | 	wrlong	result1, local10
0347c     14 2D 02 F6 | 	mov	local04, local02
03480     16 2B 02 F6 | 	mov	local03, local04
03484     15 39 02 F6 | 	mov	local10, local03
03488     03 38 66 F0 | 	shl	local10, #3
0348c     35 00 00 FF 
03490     0C E4 05 F1 | 	add	objptr, ##27148
03494     F2 38 02 F1 | 	add	local10, objptr
03498     04 38 06 F1 | 	add	local10, #4
0349c     1C 59 68 FC | 	wrlong	#44, local10
034a0     35 00 00 FF 
034a4     0C E4 85 F1 | 	sub	objptr, ##27148
034a8     84 03 90 FD | 	jmp	#LR__0184
034ac                 | LR__0175
034ac     14 39 02 F6 | 	mov	local10, local02
034b0     03 38 66 F0 | 	shl	local10, #3
034b4     35 00 00 FF 
034b8     0C E4 05 F1 | 	add	objptr, ##27148
034bc     F2 38 02 F1 | 	add	local10, objptr
034c0     14 3B 02 F6 | 	mov	local11, local02
034c4     1D 41 02 F6 | 	mov	local14, local11
034c8     03 40 66 F0 | 	shl	local14, #3
034cc     F2 3E 02 F6 | 	mov	local13, objptr
034d0     F2 40 02 F1 | 	add	local14, objptr
034d4     20 13 02 FB | 	rdlong	arg01, local14
034d8     35 00 00 FF 
034dc     0C E4 85 F1 | 	sub	objptr, ##27148
034e0     6C 13 B0 FD | 	call	#_isconstant
034e4     04 38 06 F1 | 	add	local10, #4
034e8     1C FB 61 FC | 	wrlong	result1, local10
034ec                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
034ec     14 39 02 F6 | 	mov	local10, local02
034f0     03 38 66 F0 | 	shl	local10, #3
034f4     35 00 00 FF 
034f8     0C E4 05 F1 | 	add	objptr, ##27148
034fc     F2 38 02 F1 | 	add	local10, objptr
03500     04 38 06 F1 | 	add	local10, #4
03504     1C 3D 02 FB | 	rdlong	local12, local10
03508     01 3C 56 F2 | 	cmps	local12, #1 wc
0350c     35 00 00 FF 
03510     0C E4 85 F1 | 	sub	objptr, ##27148
03514     94 00 90 CD |  if_b	jmp	#LR__0176
03518     14 39 02 F6 | 	mov	local10, local02
0351c     03 38 66 F0 | 	shl	local10, #3
03520     35 00 00 FF 
03524     0C E4 05 F1 | 	add	objptr, ##27148
03528     F2 38 02 F1 | 	add	local10, objptr
0352c     14 3D 02 F6 | 	mov	local12, local02
03530     1E 3B 02 F6 | 	mov	local11, local12
03534     1D 41 02 F6 | 	mov	local14, local11
03538     03 40 66 F0 | 	shl	local14, #3
0353c     F2 3E 02 F6 | 	mov	local13, objptr
03540     F2 40 02 F1 | 	add	local14, objptr
03544     04 40 06 F1 | 	add	local14, #4
03548     20 13 02 FB | 	rdlong	arg01, local14
0354c     04 40 86 F1 | 	sub	local14, #4
03550     35 00 00 FF 
03554     0C E4 85 F1 | 	sub	objptr, ##27148
03558     09 13 52 F6 | 	abs	arg01, arg01 wc
0355c     1F 7C C6 C9 |  if_b	decod	local44, #31
03560     00 7C 06 36 |  if_ae	mov	local44, #0
03564     7C 64 B2 FD | 	call	#__system___float_fromuns
03568     3E FB 61 F5 | 	xor	result1, local44
0356c     FD 12 02 F6 | 	mov	arg01, result1
03570     70 5C B2 FD | 	call	#__system__str_S
03574     1C FB 61 FC | 	wrlong	result1, local10
03578     14 2D 02 F6 | 	mov	local04, local02
0357c     16 2B 02 F6 | 	mov	local03, local04
03580     15 39 02 F6 | 	mov	local10, local03
03584     03 38 66 F0 | 	shl	local10, #3
03588     35 00 00 FF 
0358c     0C E4 05 F1 | 	add	objptr, ##27148
03590     F2 38 02 F1 | 	add	local10, objptr
03594     04 38 06 F1 | 	add	local10, #4
03598     01 00 80 FF 
0359c     1C 03 68 FC | 	wrlong	##513, local10
035a0     35 00 00 FF 
035a4     0C E4 85 F1 | 	sub	objptr, ##27148
035a8     84 02 90 FD | 	jmp	#LR__0184
035ac                 | LR__0176
035ac     14 2F 02 F6 | 	mov	local05, local02
035b0     03 2E 66 F0 | 	shl	local05, #3
035b4     35 00 00 FF 
035b8     0C E4 05 F1 | 	add	objptr, ##27148
035bc     F2 2E 02 F1 | 	add	local05, objptr
035c0     17 13 02 FB | 	rdlong	arg01, local05
035c4     35 00 00 FF 
035c8     0C E4 85 F1 | 	sub	objptr, ##27148
035cc     60 33 B0 FD | 	call	#_isnum
035d0     FD 7E 02 F6 | 	mov	local45, result1
035d4     14 2F 02 F6 | 	mov	local05, local02
035d8     03 2E 66 F0 | 	shl	local05, #3
035dc     35 00 00 FF 
035e0     0C E4 05 F1 | 	add	objptr, ##27148
035e4     F2 2E 02 F1 | 	add	local05, objptr
035e8     17 13 02 FB | 	rdlong	arg01, local05
035ec     35 00 00 FF 
035f0     0C E4 85 F1 | 	sub	objptr, ##27148
035f4     24 37 B0 FD | 	call	#_isint
035f8     FD 80 02 F6 | 	mov	local46, result1
035fc     14 2F 02 F6 | 	mov	local05, local02
03600     03 2E 66 F0 | 	shl	local05, #3
03604     35 00 00 FF 
03608     0C E4 05 F1 | 	add	objptr, ##27148
0360c     F2 2E 02 F1 | 	add	local05, objptr
03610     17 13 02 FB | 	rdlong	arg01, local05
03614     35 00 00 FF 
03618     0C E4 85 F1 | 	sub	objptr, ##27148
0361c     A0 39 B0 FD | 	call	#_isdec
03620     FD 82 02 F6 | 	mov	local47, result1
03624                 | ' 
03624                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
03624                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
03624     00 7E 0E F2 | 	cmp	local45, #0 wz
03628     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
0362c     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
03630     34 00 90 AD |  if_e	jmp	#LR__0177
03634     14 2D 02 F6 | 	mov	local04, local02
03638     16 2B 02 F6 | 	mov	local03, local04
0363c     15 39 02 F6 | 	mov	local10, local03
03640     03 38 66 F0 | 	shl	local10, #3
03644     35 00 00 FF 
03648     0C E4 05 F1 | 	add	objptr, ##27148
0364c     F2 38 02 F1 | 	add	local10, objptr
03650     04 38 06 F1 | 	add	local10, #4
03654     01 00 80 FF 
03658     1C 01 68 FC | 	wrlong	##512, local10
0365c     35 00 00 FF 
03660     0C E4 85 F1 | 	sub	objptr, ##27148
03664     C8 01 90 FD | 	jmp	#LR__0184
03668                 | LR__0177
03668                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03668     00 7E 0E F2 | 	cmp	local45, #0 wz
0366c     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
03670     41 2D 22 56 |  if_ne	not	local04, local47
03674     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03678     34 00 90 AD |  if_e	jmp	#LR__0178
0367c     14 2D 02 F6 | 	mov	local04, local02
03680     16 2B 02 F6 | 	mov	local03, local04
03684     15 39 02 F6 | 	mov	local10, local03
03688     03 38 66 F0 | 	shl	local10, #3
0368c     35 00 00 FF 
03690     0C E4 05 F1 | 	add	objptr, ##27148
03694     F2 38 02 F1 | 	add	local10, objptr
03698     04 38 06 F1 | 	add	local10, #4
0369c     01 00 80 FF 
036a0     1C 03 68 FC | 	wrlong	##513, local10
036a4     35 00 00 FF 
036a8     0C E4 85 F1 | 	sub	objptr, ##27148
036ac     80 01 90 FD | 	jmp	#LR__0184
036b0                 | LR__0178
036b0                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
036b0     00 7E 0E F2 | 	cmp	local45, #0 wz
036b4     40 2D 22 56 |  if_ne	not	local04, local46
036b8     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
036bc     41 2B 22 56 |  if_ne	not	local03, local47
036c0     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
036c4     34 00 90 AD |  if_e	jmp	#LR__0179
036c8     14 2D 02 F6 | 	mov	local04, local02
036cc     16 2B 02 F6 | 	mov	local03, local04
036d0     15 39 02 F6 | 	mov	local10, local03
036d4     03 38 66 F0 | 	shl	local10, #3
036d8     35 00 00 FF 
036dc     0C E4 05 F1 | 	add	objptr, ##27148
036e0     F2 38 02 F1 | 	add	local10, objptr
036e4     04 38 06 F1 | 	add	local10, #4
036e8     01 00 80 FF 
036ec     1C 05 68 FC | 	wrlong	##514, local10
036f0     35 00 00 FF 
036f4     0C E4 85 F1 | 	sub	objptr, ##27148
036f8     34 01 90 FD | 	jmp	#LR__0184
036fc                 | LR__0179
036fc                 | ' 
036fc                 | ' if isstring(lparts(i).part$) then 
036fc     14 2F 02 F6 | 	mov	local05, local02
03700     03 2E 66 F0 | 	shl	local05, #3
03704     35 00 00 FF 
03708     0C E4 05 F1 | 	add	objptr, ##27148
0370c     F2 2E 02 F1 | 	add	local05, objptr
03710     17 13 02 FB | 	rdlong	arg01, local05
03714     35 00 00 FF 
03718     0C E4 85 F1 | 	sub	objptr, ##27148
0371c     60 39 B0 FD | 	call	#_isstring
03720     00 FA 0D F2 | 	cmp	result1, #0 wz
03724     A8 00 90 AD |  if_e	jmp	#LR__0182
03728     14 39 02 F6 | 	mov	local10, local02
0372c     03 38 66 F0 | 	shl	local10, #3
03730     35 00 00 FF 
03734     0C E4 05 F1 | 	add	objptr, ##27148
03738     F2 38 02 F1 | 	add	local10, objptr
0373c     04 38 06 F1 | 	add	local10, #4
03740     01 00 80 FF 
03744     1C 07 68 FC | 	wrlong	##515, local10
03748     14 2D 02 F6 | 	mov	local04, local02
0374c     16 2B 02 F6 | 	mov	local03, local04
03750     15 39 02 F6 | 	mov	local10, local03
03754     03 38 66 F0 | 	shl	local10, #3
03758     F2 38 02 F1 | 	add	local10, objptr
0375c     14 41 02 F6 | 	mov	local14, local02
03760     03 40 66 F0 | 	shl	local14, #3
03764     F2 40 02 F1 | 	add	local14, objptr
03768     20 31 02 FB | 	rdlong	local06, local14
0376c     02 3C 06 F6 | 	mov	local12, #2
03770     14 51 02 F6 | 	mov	local22, local02
03774     28 53 02 F6 | 	mov	local23, local22
03778     03 52 66 F0 | 	shl	local23, #3
0377c     F2 54 02 F6 | 	mov	local24, objptr
03780     F2 52 02 F1 | 	add	local23, objptr
03784     29 13 02 FB | 	rdlong	arg01, local23
03788     35 00 00 FF 
0378c     0C E4 85 F1 | 	sub	objptr, ##27148
03790     09 33 02 F6 | 	mov	local07, arg01
03794     97 06 48 FB | 	callpa	#(@LR__0181-@LR__0180)>>2,fcache_load_ptr_
03798                 | LR__0180
03798     19 FB C9 FA | 	rdbyte	result1, local07 wz
0379c     01 32 06 51 |  if_ne	add	local07, #1
037a0     F4 FF 9F 5D |  if_ne	jmp	#LR__0180
037a4                 | LR__0181
037a4     09 33 82 F1 | 	sub	local07, arg01
037a8     19 3F 02 F6 | 	mov	local13, local07
037ac     1F 41 02 F6 | 	mov	local14, local13
037b0     02 40 86 F1 | 	sub	local14, #2
037b4     20 3B 02 F6 | 	mov	local11, local14
037b8     18 13 02 F6 | 	mov	arg01, local06
037bc     1E 15 02 F6 | 	mov	arg02, local12
037c0     1D 17 02 F6 | 	mov	arg03, local11
037c4     3C 59 B2 FD | 	call	#__system__Mid_S
037c8     1C FB 61 FC | 	wrlong	result1, local10
037cc     60 00 90 FD | 	jmp	#LR__0184
037d0                 | LR__0182
037d0                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
037d0     14 2B 02 F6 | 	mov	local03, local02
037d4     15 2F 02 F6 | 	mov	local05, local03
037d8     03 2E 66 F0 | 	shl	local05, #3
037dc     35 00 00 FF 
037e0     0C E4 05 F1 | 	add	objptr, ##27148
037e4     F2 2E 02 F1 | 	add	local05, objptr
037e8     17 13 02 FB | 	rdlong	arg01, local05
037ec     35 00 00 FF 
037f0     0C E4 85 F1 | 	sub	objptr, ##27148
037f4     C4 2E B0 FD | 	call	#_isname
037f8     FD 2C 0A F6 | 	mov	local04, result1 wz
037fc     30 00 90 AD |  if_e	jmp	#LR__0183
03800     14 2D 02 F6 | 	mov	local04, local02
03804     16 2B 02 F6 | 	mov	local03, local04
03808     15 39 02 F6 | 	mov	local10, local03
0380c     03 38 66 F0 | 	shl	local10, #3
03810     35 00 00 FF 
03814     0C E4 05 F1 | 	add	objptr, ##27148
03818     F2 38 02 F1 | 	add	local10, objptr
0381c     04 38 06 F1 | 	add	local10, #4
03820     01 00 80 FF 
03824     1C 09 68 FC | 	wrlong	##516, local10
03828     35 00 00 FF 
0382c     0C E4 85 F1 | 	sub	objptr, ##27148
03830                 | LR__0183
03830                 | LR__0184
03830     01 28 06 F1 | 	add	local02, #1
03834     54 F8 9F FD | 	jmp	#LR__0173
03838                 | LR__0185
03838     23 39 02 F6 | 	mov	local10, local17
0383c     03 38 66 F0 | 	shl	local10, #3
03840     35 00 00 FF 
03844     0C E4 05 F1 | 	add	objptr, ##27148
03848     F2 38 02 F1 | 	add	local10, objptr
0384c     04 38 06 F1 | 	add	local10, #4
03850     1C FD 6B FC | 	wrlong	#510, local10
03854     23 39 02 F6 | 	mov	local10, local17
03858     03 38 66 F0 | 	shl	local10, #3
0385c     F2 38 02 F1 | 	add	local10, objptr
03860     B5 01 00 FF 
03864     B3 31 06 F6 | 	mov	local06, ##@LR__5489
03868     1C 31 62 FC | 	wrlong	local06, local10
0386c     10 00 00 FF 
03870     54 E4 05 F1 | 	add	objptr, ##8276
03874     F2 46 62 FC | 	wrlong	local17, objptr
03878     45 00 00 FF 
0387c     60 E4 85 F1 | 	sub	objptr, ##35424
03880                 | ' 
03880                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
03880                 | ' 
03880                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
03880                 | '  
03880                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03880     B5 01 00 FF 
03884     B4 15 06 F6 | 	mov	arg02, ##@LR__5490
03888     3B 13 02 F6 | 	mov	arg01, local41
0388c     08 37 B2 FD | 	call	#__system___string_cmp
03890     00 FA 0D F2 | 	cmp	result1, #0 wz
03894     F0 00 90 AD |  if_e	jmp	#LR__0186
03898     B5 01 00 FF 
0389c     B9 15 06 F6 | 	mov	arg02, ##@LR__5491
038a0     3B 13 02 F6 | 	mov	arg01, local41
038a4     F0 36 B2 FD | 	call	#__system___string_cmp
038a8     00 FA 0D F2 | 	cmp	result1, #0 wz
038ac     D8 00 90 AD |  if_e	jmp	#LR__0186
038b0     B5 01 00 FF 
038b4     BE 31 06 F6 | 	mov	local06, ##@LR__5492
038b8     3B 13 02 F6 | 	mov	arg01, local41
038bc     18 15 02 F6 | 	mov	arg02, local06
038c0     D4 36 B2 FD | 	call	#__system___string_cmp
038c4     00 FA 0D F2 | 	cmp	result1, #0 wz
038c8     BC 00 90 AD |  if_e	jmp	#LR__0186
038cc     B5 01 00 FF 
038d0     C3 3D 06 F6 | 	mov	local12, ##@LR__5493
038d4     1E 31 02 F6 | 	mov	local06, local12
038d8     3B 13 02 F6 | 	mov	arg01, local41
038dc     18 15 02 F6 | 	mov	arg02, local06
038e0     B4 36 B2 FD | 	call	#__system___string_cmp
038e4     00 FA 0D F2 | 	cmp	result1, #0 wz
038e8     9C 00 90 AD |  if_e	jmp	#LR__0186
038ec     B5 01 00 FF 
038f0     C7 3B 06 F6 | 	mov	local11, ##@LR__5494
038f4     1D 3D 02 F6 | 	mov	local12, local11
038f8     3B 13 02 F6 | 	mov	arg01, local41
038fc     1E 15 02 F6 | 	mov	arg02, local12
03900     94 36 B2 FD | 	call	#__system___string_cmp
03904     FD 30 0A F6 | 	mov	local06, result1 wz
03908     7C 00 90 AD |  if_e	jmp	#LR__0186
0390c     B5 01 00 FF 
03910     CB 41 06 F6 | 	mov	local14, ##@LR__5495
03914     20 3B 02 F6 | 	mov	local11, local14
03918     3B 13 02 F6 | 	mov	arg01, local41
0391c     1D 15 02 F6 | 	mov	arg02, local11
03920     74 36 B2 FD | 	call	#__system___string_cmp
03924     FD 3C 0A F6 | 	mov	local12, result1 wz
03928     5C 00 90 AD |  if_e	jmp	#LR__0186
0392c     B5 01 00 FF 
03930     CE 3F 06 F6 | 	mov	local13, ##@LR__5496
03934     1F 41 02 F6 | 	mov	local14, local13
03938     3B 13 02 F6 | 	mov	arg01, local41
0393c     20 15 02 F6 | 	mov	arg02, local14
03940     54 36 B2 FD | 	call	#__system___string_cmp
03944     FD 3A 0A F6 | 	mov	local11, result1 wz
03948     3C 00 90 AD |  if_e	jmp	#LR__0186
0394c     B5 01 00 FF 
03950     D2 3F 06 F6 | 	mov	local13, ##@LR__5497
03954     3B 13 02 F6 | 	mov	arg01, local41
03958     1F 15 02 F6 | 	mov	arg02, local13
0395c     38 36 B2 FD | 	call	#__system___string_cmp
03960     FD 40 0A F6 | 	mov	local14, result1 wz
03964     20 00 90 AD |  if_e	jmp	#LR__0186
03968     B5 01 00 FF 
0396c     D8 51 06 F6 | 	mov	local22, ##@LR__5498
03970     28 5D 02 F6 | 	mov	local28, local22
03974     3B 13 02 F6 | 	mov	arg01, local41
03978     2E 15 02 F6 | 	mov	arg02, local28
0397c     18 36 B2 FD | 	call	#__system___string_cmp
03980     FD 3E 0A F6 | 	mov	local13, result1 wz
03984     CC 00 90 5D |  if_ne	jmp	#LR__0187
03988                 | LR__0186
03988     37 5D 02 F6 | 	mov	local28, local37
0398c     01 5C 06 F1 | 	add	local28, #1
03990     2E 51 02 F6 | 	mov	local22, local28
03994     28 53 02 F6 | 	mov	local23, local22
03998     03 52 66 F0 | 	shl	local23, #3
0399c     35 00 00 FF 
039a0     0C E4 05 F1 | 	add	objptr, ##27148
039a4     F2 54 02 F6 | 	mov	local24, objptr
039a8     F2 52 02 F1 | 	add	local23, objptr
039ac     04 52 06 F1 | 	add	local23, #4
039b0     29 61 02 FB | 	rdlong	local30, local23
039b4     04 52 86 F1 | 	sub	local23, #4
039b8     30 5F 02 F6 | 	mov	local29, local30
039bc     01 00 00 FF 
039c0     04 5E 0E F2 | 	cmp	local29, ##516 wz
039c4     35 00 00 FF 
039c8     0C E4 85 F1 | 	sub	objptr, ##27148
039cc     84 00 90 5D |  if_ne	jmp	#LR__0187
039d0     37 85 02 F6 | 	mov	local48, local37
039d4     01 84 06 F1 | 	add	local48, #1
039d8     03 84 66 F0 | 	shl	local48, #3
039dc     35 00 00 FF 
039e0     0C E4 05 F1 | 	add	objptr, ##27148
039e4     F2 86 02 F6 | 	mov	local49, objptr
039e8     F2 84 02 F1 | 	add	local48, objptr
039ec     42 13 02 FB | 	rdlong	arg01, local48
039f0     01 14 06 F6 | 	mov	arg02, #1
039f4     35 00 00 FF 
039f8     0C E4 85 F1 | 	sub	objptr, ##27148
039fc     74 56 B2 FD | 	call	#__system__Right_S
03a00     FD 12 02 F6 | 	mov	arg01, result1
03a04     B5 01 00 FF 
03a08     DB 89 06 F6 | 	mov	local50, ##@LR__5499
03a0c     44 8B 02 F6 | 	mov	local51, local50
03a10     45 15 02 F6 | 	mov	arg02, local51
03a14     80 35 B2 FD | 	call	#__system___string_cmp
03a18     FD 62 0A F6 | 	mov	local31, result1 wz
03a1c     34 00 90 AD |  if_e	jmp	#LR__0187
03a20     37 39 02 F6 | 	mov	local10, local37
03a24     01 38 06 F1 | 	add	local10, #1
03a28     03 38 66 F0 | 	shl	local10, #3
03a2c     35 00 00 FF 
03a30     0C E4 05 F1 | 	add	objptr, ##27148
03a34     F2 38 02 F1 | 	add	local10, objptr
03a38     01 00 00 FF 
03a3c     03 30 06 F6 | 	mov	local06, ##515
03a40     04 38 06 F1 | 	add	local10, #4
03a44     01 00 80 FF 
03a48     1C 07 68 FC | 	wrlong	##515, local10
03a4c     35 00 00 FF 
03a50     0C E4 85 F1 | 	sub	objptr, ##27148
03a54                 | LR__0187
03a54                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03a54     B5 01 00 FF 
03a58     DD 15 06 F6 | 	mov	arg02, ##@LR__5500
03a5c     3B 13 02 F6 | 	mov	arg01, local41
03a60     34 35 B2 FD | 	call	#__system___string_cmp
03a64     00 FA 0D F2 | 	cmp	result1, #0 wz
03a68     1C 00 90 AD |  if_e	jmp	#LR__0188
03a6c     B5 01 00 FF 
03a70     E4 2F 06 F6 | 	mov	local05, ##@LR__5501
03a74     3B 13 02 F6 | 	mov	arg01, local41
03a78     17 15 02 F6 | 	mov	arg02, local05
03a7c     18 35 B2 FD | 	call	#__system___string_cmp
03a80     00 FA 0D F2 | 	cmp	result1, #0 wz
03a84     CC 00 90 5D |  if_ne	jmp	#LR__0189
03a88                 | LR__0188
03a88     37 2F 02 F6 | 	mov	local05, local37
03a8c     01 2E 06 F1 | 	add	local05, #1
03a90     17 31 02 F6 | 	mov	local06, local05
03a94     03 30 66 F0 | 	shl	local06, #3
03a98     35 00 00 FF 
03a9c     0C E4 05 F1 | 	add	objptr, ##27148
03aa0     F2 3C 02 F6 | 	mov	local12, objptr
03aa4     F2 30 02 F1 | 	add	local06, objptr
03aa8     04 30 06 F1 | 	add	local06, #4
03aac     18 41 02 FB | 	rdlong	local14, local06
03ab0     04 30 86 F1 | 	sub	local06, #4
03ab4     20 3B 02 F6 | 	mov	local11, local14
03ab8     01 00 00 FF 
03abc     04 3A 0E F2 | 	cmp	local11, ##516 wz
03ac0     35 00 00 FF 
03ac4     0C E4 85 F1 | 	sub	objptr, ##27148
03ac8     88 00 90 5D |  if_ne	jmp	#LR__0189
03acc     37 53 02 F6 | 	mov	local23, local37
03ad0     01 52 06 F1 | 	add	local23, #1
03ad4     03 52 66 F0 | 	shl	local23, #3
03ad8     35 00 00 FF 
03adc     0C E4 05 F1 | 	add	objptr, ##27148
03ae0     F2 54 02 F6 | 	mov	local24, objptr
03ae4     F2 52 02 F1 | 	add	local23, objptr
03ae8     29 13 02 FB | 	rdlong	arg01, local23
03aec     01 14 06 F6 | 	mov	arg02, #1
03af0     35 00 00 FF 
03af4     0C E4 85 F1 | 	sub	objptr, ##27148
03af8     78 55 B2 FD | 	call	#__system__Right_S
03afc     FD 12 02 F6 | 	mov	arg01, result1
03b00     B5 01 00 FF 
03b04     EA 51 06 F6 | 	mov	local22, ##@LR__5502
03b08     28 5D 02 F6 | 	mov	local28, local22
03b0c     2E 15 02 F6 | 	mov	arg02, local28
03b10     84 34 B2 FD | 	call	#__system___string_cmp
03b14     FD 3E 0A F6 | 	mov	local13, result1 wz
03b18     38 00 90 AD |  if_e	jmp	#LR__0189
03b1c     37 39 02 F6 | 	mov	local10, local37
03b20     01 38 06 F1 | 	add	local10, #1
03b24     03 38 66 F0 | 	shl	local10, #3
03b28     35 00 00 FF 
03b2c     0C E4 05 F1 | 	add	objptr, ##27148
03b30     F2 2E 02 F6 | 	mov	local05, objptr
03b34     F2 38 02 F1 | 	add	local10, objptr
03b38     01 00 00 FF 
03b3c     03 30 06 F6 | 	mov	local06, ##515
03b40     04 38 06 F1 | 	add	local10, #4
03b44     01 00 80 FF 
03b48     1C 07 68 FC | 	wrlong	##515, local10
03b4c     35 00 00 FF 
03b50     0C E4 85 F1 | 	sub	objptr, ##27148
03b54                 | LR__0189
03b54                 | ' if (lp$="copy") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03b54     B5 01 00 FF 
03b58     EC 15 06 F6 | 	mov	arg02, ##@LR__5503
03b5c     3B 13 02 F6 | 	mov	arg01, local41
03b60     34 34 B2 FD | 	call	#__system___string_cmp
03b64     00 FA 0D F2 | 	cmp	result1, #0 wz
03b68     C8 00 90 5D |  if_ne	jmp	#LR__0190
03b6c     37 2F 02 F6 | 	mov	local05, local37
03b70     01 2E 06 F1 | 	add	local05, #1
03b74     03 2E 66 F0 | 	shl	local05, #3
03b78     35 00 00 FF 
03b7c     0C E4 05 F1 | 	add	objptr, ##27148
03b80     F2 30 02 F6 | 	mov	local06, objptr
03b84     F2 2E 02 F1 | 	add	local05, objptr
03b88     04 2E 06 F1 | 	add	local05, #4
03b8c     17 3B 02 FB | 	rdlong	local11, local05
03b90     04 2E 86 F1 | 	sub	local05, #4
03b94     1D 3D 02 F6 | 	mov	local12, local11
03b98     01 00 00 FF 
03b9c     04 3C 0E F2 | 	cmp	local12, ##516 wz
03ba0     35 00 00 FF 
03ba4     0C E4 85 F1 | 	sub	objptr, ##27148
03ba8     88 00 90 5D |  if_ne	jmp	#LR__0190
03bac     37 51 02 F6 | 	mov	local22, local37
03bb0     01 50 06 F1 | 	add	local22, #1
03bb4     03 50 66 F0 | 	shl	local22, #3
03bb8     35 00 00 FF 
03bbc     0C E4 05 F1 | 	add	objptr, ##27148
03bc0     F2 52 02 F6 | 	mov	local23, objptr
03bc4     F2 50 02 F1 | 	add	local22, objptr
03bc8     28 13 02 FB | 	rdlong	arg01, local22
03bcc     01 14 06 F6 | 	mov	arg02, #1
03bd0     35 00 00 FF 
03bd4     0C E4 85 F1 | 	sub	objptr, ##27148
03bd8     98 54 B2 FD | 	call	#__system__Right_S
03bdc     FD 12 02 F6 | 	mov	arg01, result1
03be0     B5 01 00 FF 
03be4     F1 5D 06 F6 | 	mov	local28, ##@LR__5504
03be8     2E 3F 02 F6 | 	mov	local13, local28
03bec     1F 15 02 F6 | 	mov	arg02, local13
03bf0     A4 33 B2 FD | 	call	#__system___string_cmp
03bf4     FD 40 0A F6 | 	mov	local14, result1 wz
03bf8     38 00 90 AD |  if_e	jmp	#LR__0190
03bfc     37 39 02 F6 | 	mov	local10, local37
03c00     01 38 06 F1 | 	add	local10, #1
03c04     03 38 66 F0 | 	shl	local10, #3
03c08     35 00 00 FF 
03c0c     0C E4 05 F1 | 	add	objptr, ##27148
03c10     F2 2E 02 F6 | 	mov	local05, objptr
03c14     F2 38 02 F1 | 	add	local10, objptr
03c18     01 00 00 FF 
03c1c     03 30 06 F6 | 	mov	local06, ##515
03c20     04 38 06 F1 | 	add	local10, #4
03c24     01 00 80 FF 
03c28     1C 07 68 FC | 	wrlong	##515, local10
03c2c     35 00 00 FF 
03c30     0C E4 85 F1 | 	sub	objptr, ##27148
03c34                 | LR__0190
03c34                 | ' if (lp$="copy") andalso lparts(addptr+3).token=token_name andalso right$(lparts(addptr+3).part$,1)<>"$" then lparts(addptr+3).token=token_string
03c34     B5 01 00 FF 
03c38     F3 15 06 F6 | 	mov	arg02, ##@LR__5505
03c3c     3B 13 02 F6 | 	mov	arg01, local41
03c40     54 33 B2 FD | 	call	#__system___string_cmp
03c44     00 FA 0D F2 | 	cmp	result1, #0 wz
03c48     C8 00 90 5D |  if_ne	jmp	#LR__0191
03c4c     37 2F 02 F6 | 	mov	local05, local37
03c50     03 2E 06 F1 | 	add	local05, #3
03c54     03 2E 66 F0 | 	shl	local05, #3
03c58     35 00 00 FF 
03c5c     0C E4 05 F1 | 	add	objptr, ##27148
03c60     F2 30 02 F6 | 	mov	local06, objptr
03c64     F2 2E 02 F1 | 	add	local05, objptr
03c68     04 2E 06 F1 | 	add	local05, #4
03c6c     17 3B 02 FB | 	rdlong	local11, local05
03c70     04 2E 86 F1 | 	sub	local05, #4
03c74     1D 3D 02 F6 | 	mov	local12, local11
03c78     01 00 00 FF 
03c7c     04 3C 0E F2 | 	cmp	local12, ##516 wz
03c80     35 00 00 FF 
03c84     0C E4 85 F1 | 	sub	objptr, ##27148
03c88     88 00 90 5D |  if_ne	jmp	#LR__0191
03c8c     37 51 02 F6 | 	mov	local22, local37
03c90     03 50 06 F1 | 	add	local22, #3
03c94     03 50 66 F0 | 	shl	local22, #3
03c98     35 00 00 FF 
03c9c     0C E4 05 F1 | 	add	objptr, ##27148
03ca0     F2 52 02 F6 | 	mov	local23, objptr
03ca4     F2 50 02 F1 | 	add	local22, objptr
03ca8     28 13 02 FB | 	rdlong	arg01, local22
03cac     01 14 06 F6 | 	mov	arg02, #1
03cb0     35 00 00 FF 
03cb4     0C E4 85 F1 | 	sub	objptr, ##27148
03cb8     B8 53 B2 FD | 	call	#__system__Right_S
03cbc     FD 12 02 F6 | 	mov	arg01, result1
03cc0     B5 01 00 FF 
03cc4     F8 5D 06 F6 | 	mov	local28, ##@LR__5506
03cc8     2E 3F 02 F6 | 	mov	local13, local28
03ccc     1F 15 02 F6 | 	mov	arg02, local13
03cd0     C4 32 B2 FD | 	call	#__system___string_cmp
03cd4     FD 40 0A F6 | 	mov	local14, result1 wz
03cd8     38 00 90 AD |  if_e	jmp	#LR__0191
03cdc     37 39 02 F6 | 	mov	local10, local37
03ce0     03 38 06 F1 | 	add	local10, #3
03ce4     03 38 66 F0 | 	shl	local10, #3
03ce8     35 00 00 FF 
03cec     0C E4 05 F1 | 	add	objptr, ##27148
03cf0     F2 2E 02 F6 | 	mov	local05, objptr
03cf4     F2 38 02 F1 | 	add	local10, objptr
03cf8     01 00 00 FF 
03cfc     03 30 06 F6 | 	mov	local06, ##515
03d00     04 38 06 F1 | 	add	local10, #4
03d04     01 00 80 FF 
03d08     1C 07 68 FC | 	wrlong	##515, local10
03d0c     35 00 00 FF 
03d10     0C E4 85 F1 | 	sub	objptr, ##27148
03d14                 | LR__0191
03d14                 | ' 
03d14                 | ' ' cd needs special treatment..
03d14                 | ' 
03d14                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
03d14     B5 01 00 FF 
03d18     FA 15 06 F6 | 	mov	arg02, ##@LR__5507
03d1c     3B 13 02 F6 | 	mov	arg01, local41
03d20     74 32 B2 FD | 	call	#__system___string_cmp
03d24     00 FA 0D F2 | 	cmp	result1, #0 wz
03d28     38 00 90 5D |  if_ne	jmp	#LR__0192
03d2c     37 39 02 F6 | 	mov	local10, local37
03d30     01 38 06 F1 | 	add	local10, #1
03d34     03 38 66 F0 | 	shl	local10, #3
03d38     35 00 00 FF 
03d3c     0C E4 05 F1 | 	add	objptr, ##27148
03d40     F2 2E 02 F6 | 	mov	local05, objptr
03d44     F2 38 02 F1 | 	add	local10, objptr
03d48     01 00 00 FF 
03d4c     03 30 06 F6 | 	mov	local06, ##515
03d50     04 38 06 F1 | 	add	local10, #4
03d54     01 00 80 FF 
03d58     1C 07 68 FC | 	wrlong	##515, local10
03d5c     35 00 00 FF 
03d60     0C E4 85 F1 | 	sub	objptr, ##27148
03d64                 | LR__0192
03d64                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
03d64     B5 01 00 FF 
03d68     FD 15 06 F6 | 	mov	arg02, ##@LR__5508
03d6c     3B 13 02 F6 | 	mov	arg01, local41
03d70     24 32 B2 FD | 	call	#__system___string_cmp
03d74     00 FA 0D F2 | 	cmp	result1, #0 wz
03d78     A4 00 90 5D |  if_ne	jmp	#LR__0193
03d7c     37 31 02 F6 | 	mov	local06, local37
03d80     01 30 06 F1 | 	add	local06, #1
03d84     03 30 66 F0 | 	shl	local06, #3
03d88     35 00 00 FF 
03d8c     0C E4 05 F1 | 	add	objptr, ##27148
03d90     F2 3C 02 F6 | 	mov	local12, objptr
03d94     F2 30 02 F1 | 	add	local06, objptr
03d98     18 13 02 FB | 	rdlong	arg01, local06
03d9c     B6 01 00 FF 
03da0     01 2E 06 F6 | 	mov	local05, ##@LR__5509
03da4     17 15 02 F6 | 	mov	arg02, local05
03da8     35 00 00 FF 
03dac     0C E4 85 F1 | 	sub	objptr, ##27148
03db0     E4 31 B2 FD | 	call	#__system___string_cmp
03db4     00 FA 0D F2 | 	cmp	result1, #0 wz
03db8     64 00 90 5D |  if_ne	jmp	#LR__0193
03dbc     37 39 02 F6 | 	mov	local10, local37
03dc0     01 38 06 F1 | 	add	local10, #1
03dc4     03 38 66 F0 | 	shl	local10, #3
03dc8     35 00 00 FF 
03dcc     0C E4 05 F1 | 	add	objptr, ##27148
03dd0     F2 38 02 F1 | 	add	local10, objptr
03dd4     04 38 06 F1 | 	add	local10, #4
03dd8     01 00 80 FF 
03ddc     1C 07 68 FC | 	wrlong	##515, local10
03de0     37 39 02 F6 | 	mov	local10, local37
03de4     01 38 06 F1 | 	add	local10, #1
03de8     03 38 66 F0 | 	shl	local10, #3
03dec     F2 38 02 F1 | 	add	local10, objptr
03df0     B6 01 00 FF 
03df4     03 30 06 F6 | 	mov	local06, ##@LR__5510
03df8     1C 31 62 FC | 	wrlong	local06, local10
03dfc     37 39 02 F6 | 	mov	local10, local37
03e00     03 38 66 F0 | 	shl	local10, #3
03e04     F2 2E 02 F6 | 	mov	local05, objptr
03e08     F2 38 02 F1 | 	add	local10, objptr
03e0c     C3 30 06 F6 | 	mov	local06, #195
03e10     04 38 06 F1 | 	add	local10, #4
03e14     1C 87 69 FC | 	wrlong	#195, local10
03e18     35 00 00 FF 
03e1c     0C E4 85 F1 | 	sub	objptr, ##27148
03e20                 | LR__0193
03e20                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03e20     B6 01 00 FF 
03e24     06 38 06 F6 | 	mov	local10, ##@LR__5511
03e28     3B 13 02 F6 | 	mov	arg01, local41
03e2c     1C 15 02 F6 | 	mov	arg02, local10
03e30     64 31 B2 FD | 	call	#__system___string_cmp
03e34     00 FA 0D F2 | 	cmp	result1, #0 wz
03e38     04 01 90 5D |  if_ne	jmp	#LR__0196
03e3c     37 31 02 F6 | 	mov	local06, local37
03e40     01 30 06 F1 | 	add	local06, #1
03e44     03 30 66 F0 | 	shl	local06, #3
03e48     35 00 00 FF 
03e4c     0C E4 05 F1 | 	add	objptr, ##27148
03e50     F2 3C 02 F6 | 	mov	local12, objptr
03e54     F2 30 02 F1 | 	add	local06, objptr
03e58     18 13 02 FB | 	rdlong	arg01, local06
03e5c     B6 01 00 FF 
03e60     09 2E 06 F6 | 	mov	local05, ##@LR__5512
03e64     17 39 02 F6 | 	mov	local10, local05
03e68     1C 15 02 F6 | 	mov	arg02, local10
03e6c     35 00 00 FF 
03e70     0C E4 85 F1 | 	sub	objptr, ##27148
03e74     20 31 B2 FD | 	call	#__system___string_cmp
03e78     00 FA 0D F2 | 	cmp	result1, #0 wz
03e7c     C0 00 90 5D |  if_ne	jmp	#LR__0196
03e80     37 39 02 F6 | 	mov	local10, local37
03e84     01 38 06 F1 | 	add	local10, #1
03e88     03 38 66 F0 | 	shl	local10, #3
03e8c     35 00 00 FF 
03e90     0C E4 05 F1 | 	add	objptr, ##27148
03e94     F2 2E 02 F6 | 	mov	local05, objptr
03e98     F2 38 02 F1 | 	add	local10, objptr
03e9c     01 00 00 FF 
03ea0     03 30 06 F6 | 	mov	local06, ##515
03ea4     04 38 06 F1 | 	add	local10, #4
03ea8     01 00 80 FF 
03eac     1C 07 68 FC | 	wrlong	##515, local10
03eb0     04 38 86 F1 | 	sub	local10, #4
03eb4     37 29 02 F6 | 	mov	local02, local37
03eb8     02 28 06 F1 | 	add	local02, #2
03ebc     23 8D 02 F6 | 	mov	local52, local17
03ec0     01 8C 06 F1 | 	add	local52, #1
03ec4     35 00 00 FF 
03ec8     0C E4 85 F1 | 	sub	objptr, ##27148
03ecc                 | LR__0194
03ecc     46 29 52 F2 | 	cmps	local02, local52 wc
03ed0     6C 00 90 3D |  if_ae	jmp	#LR__0195
03ed4     14 39 02 F6 | 	mov	local10, local02
03ed8     03 38 66 F0 | 	shl	local10, #3
03edc     35 00 00 FF 
03ee0     0C E4 05 F1 | 	add	objptr, ##27148
03ee4     F2 38 02 F1 | 	add	local10, objptr
03ee8     1C 8F 02 FB | 	rdlong	local53, local10
03eec     37 39 02 F6 | 	mov	local10, local37
03ef0     01 38 06 F1 | 	add	local10, #1
03ef4     03 38 66 F0 | 	shl	local10, #3
03ef8     F2 2E 02 F6 | 	mov	local05, objptr
03efc     F2 38 02 F1 | 	add	local10, objptr
03f00     37 3B 02 F6 | 	mov	local11, local37
03f04     01 3A 06 F1 | 	add	local11, #1
03f08     1D 41 02 F6 | 	mov	local14, local11
03f0c     03 40 66 F0 | 	shl	local14, #3
03f10     F2 3E 02 F6 | 	mov	local13, objptr
03f14     F2 40 02 F1 | 	add	local14, objptr
03f18     20 13 02 FB | 	rdlong	arg01, local14
03f1c     47 3D 02 F6 | 	mov	local12, local53
03f20     1E 15 02 F6 | 	mov	arg02, local12
03f24     35 00 00 FF 
03f28     0C E4 85 F1 | 	sub	objptr, ##27148
03f2c     9C 30 B2 FD | 	call	#__system___string_concat
03f30     FD 30 02 F6 | 	mov	local06, result1
03f34     1C 31 62 FC | 	wrlong	local06, local10
03f38     01 28 06 F1 | 	add	local02, #1
03f3c     8C FF 9F FD | 	jmp	#LR__0194
03f40                 | LR__0195
03f40                 | LR__0196
03f40                 | ' 
03f40                 | ' ' determine a type of the line and compile it
03f40                 | ' 
03f40                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03f40     35 00 00 FF 
03f44     0C E4 05 F1 | 	add	objptr, ##27148
03f48     F2 12 02 FB | 	rdlong	arg01, objptr
03f4c     35 00 00 FF 
03f50     0C E4 85 F1 | 	sub	objptr, ##27148
03f54     68 30 B0 FD | 	call	#_isdec
03f58     00 FA 0D F2 | 	cmp	result1, #0 wz
03f5c     30 00 90 AD |  if_e	jmp	#LR__0197
03f60     35 00 00 FF 
03f64     0C E4 05 F1 | 	add	objptr, ##27148
03f68     F2 12 02 FB | 	rdlong	arg01, objptr
03f6c     35 00 00 FF 
03f70     0C E4 85 F1 | 	sub	objptr, ##27148
03f74     00 14 06 F6 | 	mov	arg02, #0
03f78     E4 64 B2 FD | 	call	#__system____builtin_atoi
03f7c     52 00 00 FF 
03f80     B0 E4 05 F1 | 	add	objptr, ##42160
03f84     F2 FA 61 FC | 	wrlong	result1, objptr
03f88     52 00 00 FF 
03f8c     B0 E4 85 F1 | 	sub	objptr, ##42160
03f90                 | LR__0197
03f90                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03f90     52 00 00 FF 
03f94     B0 E4 05 F1 | 	add	objptr, ##42160
03f98     F2 2C 02 FB | 	rdlong	local04, objptr
03f9c     52 00 00 FF 
03fa0     B0 E4 85 F1 | 	sub	objptr, ##42160
03fa4     01 2C 16 F2 | 	cmp	local04, #1 wc
03fa8     40 00 90 CD |  if_b	jmp	#LR__0198
03fac     01 46 0E F2 | 	cmp	local17, #1 wz
03fb0     37 00 00 AF 
03fb4     24 E4 05 A1 |  if_e	add	objptr, ##28196
03fb8     F2 2E 02 AB |  if_e	rdlong	local05, objptr
03fbc     37 00 00 AF 
03fc0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03fc4     17 39 02 A6 |  if_e	mov	local10, local05
03fc8     03 38 0E A2 |  if_e	cmp	local10, #3 wz
03fcc     1C 00 90 5D |  if_ne	jmp	#LR__0198
03fd0     52 00 00 FF 
03fd4     B0 E4 05 F1 | 	add	objptr, ##42160
03fd8     F2 12 02 FB | 	rdlong	arg01, objptr
03fdc     52 00 00 FF 
03fe0     B0 E4 85 F1 | 	sub	objptr, ##42160
03fe4     84 31 B0 FD | 	call	#_deleteline
03fe8     C8 03 90 FD | 	jmp	#LR__0209
03fec                 | LR__0198
03fec                 | ' 
03fec                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03fec     37 00 00 FF 
03ff0     24 E4 05 F1 | 	add	objptr, ##28196
03ff4     F2 2C 0A FB | 	rdlong	local04, objptr wz
03ff8     37 00 00 FF 
03ffc     24 E4 85 F1 | 	sub	objptr, ##28196
04000     20 00 90 AD |  if_e	jmp	#LR__0199
04004     37 00 00 FF 
04008     24 E4 05 F1 | 	add	objptr, ##28196
0400c     F2 2E 02 FB | 	rdlong	local05, objptr
04010     37 00 00 FF 
04014     24 E4 85 F1 | 	sub	objptr, ##28196
04018     17 39 02 F6 | 	mov	local10, local05
0401c     03 38 0E F2 | 	cmp	local10, #3 wz
04020     C0 00 90 5D |  if_ne	jmp	#LR__0201
04024                 | LR__0199
04024     35 00 00 FF 
04028     20 E4 05 F1 | 	add	objptr, ##27168
0402c     F2 3C 02 FB | 	rdlong	local12, objptr
04030     35 00 00 FF 
04034     20 E4 85 F1 | 	sub	objptr, ##27168
04038     1B 3C 0E F2 | 	cmp	local12, #27 wz
0403c     A4 00 90 AD |  if_e	jmp	#LR__0201
04040     52 00 00 FF 
04044     B0 E4 05 F1 | 	add	objptr, ##42160
04048     F2 12 02 FB | 	rdlong	arg01, objptr
0404c     1B 00 00 FF 
04050     8C E4 85 F1 | 	sub	objptr, ##13964
04054     F2 16 02 FB | 	rdlong	arg03, objptr
04058     37 00 00 FF 
0405c     24 E4 85 F1 | 	sub	objptr, ##28196
04060     00 14 06 F6 | 	mov	arg02, #0
04064     7C 45 B0 FD | 	call	#_compile
04068     FD 26 0A F6 | 	mov	local01, result1 wz
0406c                 | '   err=compile(linenum,0,cont) 
0406c                 | '   if err<>0 then printerror(err,linenum): goto 101
0406c     20 00 90 AD |  if_e	jmp	#LR__0200
04070     52 00 00 FF 
04074     B0 E4 05 F1 | 	add	objptr, ##42160
04078     F2 14 02 FB | 	rdlong	arg02, objptr
0407c     52 00 00 FF 
04080     B0 E4 85 F1 | 	sub	objptr, ##42160
04084     13 13 02 F6 | 	mov	arg01, local01
04088     C8 F4 B1 FD | 	call	#_printerror
0408c     44 03 90 FD | 	jmp	#LR__0210
04090                 | LR__0200
04090                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
04090     52 00 00 FF 
04094     F4 E4 05 F1 | 	add	objptr, ##42228
04098     F2 12 02 FB | 	rdlong	arg01, objptr
0409c     52 00 00 FF 
040a0     F4 E4 85 F1 | 	sub	objptr, ##42228
040a4     B6 01 00 FF 
040a8     0B 14 06 F6 | 	mov	arg02, ##@LR__5513
040ac     E8 2E B2 FD | 	call	#__system___string_cmp
040b0     00 FA 0D F2 | 	cmp	result1, #0 wz
040b4     FC 02 90 AD |  if_e	jmp	#LR__0209
040b8     52 00 00 FF 
040bc     F4 E4 05 F1 | 	add	objptr, ##42228
040c0     F2 2C 02 FB | 	rdlong	local04, objptr
040c4     1B 00 00 FF 
040c8     D8 E4 85 F1 | 	sub	objptr, ##14040
040cc     F2 2C 62 FC | 	wrlong	local04, objptr
040d0     08 E4 05 F1 | 	add	objptr, #8
040d4     F2 08 68 FC | 	wrlong	#4, objptr
040d8     37 00 00 FF 
040dc     24 E4 85 F1 | 	sub	objptr, ##28196
040e0     B0 D7 9F FD | 	jmp	#LR__0070
040e4                 | LR__0201
040e4                 | '       							
040e4                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
040e4     37 00 00 FF 
040e8     24 E4 05 F1 | 	add	objptr, ##28196
040ec     F2 2C 02 FB | 	rdlong	local04, objptr
040f0     37 00 00 FF 
040f4     24 E4 85 F1 | 	sub	objptr, ##28196
040f8     01 2C 0E F2 | 	cmp	local04, #1 wz
040fc     37 00 00 5F 
04100     24 E4 05 51 |  if_ne	add	objptr, ##28196
04104     F2 38 02 5B |  if_ne	rdlong	local10, objptr
04108     37 00 00 5F 
0410c     24 E4 85 51 |  if_ne	sub	objptr, ##28196
04110     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
04114     C0 00 90 5D |  if_ne	jmp	#LR__0203
04118     35 00 00 FF 
0411c     18 E4 05 F1 | 	add	objptr, ##27160
04120     F2 3C 02 FB | 	rdlong	local12, objptr
04124     35 00 00 FF 
04128     18 E4 85 F1 | 	sub	objptr, ##27160
0412c     1B 3C 0E F2 | 	cmp	local12, #27 wz
04130     A4 00 90 AD |  if_e	jmp	#LR__0203
04134     52 00 00 FF 
04138     B0 E4 05 F1 | 	add	objptr, ##42160
0413c     F2 12 02 FB | 	rdlong	arg01, objptr
04140     1B 00 00 FF 
04144     8C E4 85 F1 | 	sub	objptr, ##13964
04148     F2 16 02 FB | 	rdlong	arg03, objptr
0414c     37 00 00 FF 
04150     24 E4 85 F1 | 	sub	objptr, ##28196
04154     00 14 06 F6 | 	mov	arg02, #0
04158     88 44 B0 FD | 	call	#_compile
0415c     FD 26 0A F6 | 	mov	local01, result1 wz
04160                 | '   err=compile(linenum,0,cont) 
04160                 | '   if err<>0 then printerror(err,linenum): goto 101
04160     20 00 90 AD |  if_e	jmp	#LR__0202
04164     52 00 00 FF 
04168     B0 E4 05 F1 | 	add	objptr, ##42160
0416c     F2 14 02 FB | 	rdlong	arg02, objptr
04170     52 00 00 FF 
04174     B0 E4 85 F1 | 	sub	objptr, ##42160
04178     13 13 02 F6 | 	mov	arg01, local01
0417c     D4 F3 B1 FD | 	call	#_printerror
04180     50 02 90 FD | 	jmp	#LR__0210
04184                 | LR__0202
04184                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
04184     52 00 00 FF 
04188     F4 E4 05 F1 | 	add	objptr, ##42228
0418c     F2 12 02 FB | 	rdlong	arg01, objptr
04190     52 00 00 FF 
04194     F4 E4 85 F1 | 	sub	objptr, ##42228
04198     B6 01 00 FF 
0419c     0C 14 06 F6 | 	mov	arg02, ##@LR__5514
041a0     F4 2D B2 FD | 	call	#__system___string_cmp
041a4     00 FA 0D F2 | 	cmp	result1, #0 wz
041a8     08 02 90 AD |  if_e	jmp	#LR__0209
041ac     52 00 00 FF 
041b0     F4 E4 05 F1 | 	add	objptr, ##42228
041b4     F2 2C 02 FB | 	rdlong	local04, objptr
041b8     1B 00 00 FF 
041bc     D8 E4 85 F1 | 	sub	objptr, ##14040
041c0     F2 2C 62 FC | 	wrlong	local04, objptr
041c4     08 E4 05 F1 | 	add	objptr, #8
041c8     F2 08 68 FC | 	wrlong	#4, objptr
041cc     37 00 00 FF 
041d0     24 E4 85 F1 | 	sub	objptr, ##28196
041d4     BC D6 9F FD | 	jmp	#LR__0070
041d8                 | LR__0203
041d8                 | ' 							 
041d8                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
041d8     37 00 00 FF 
041dc     24 E4 05 F1 | 	add	objptr, ##28196
041e0     F2 2C 0A FB | 	rdlong	local04, objptr wz
041e4     37 00 00 FF 
041e8     24 E4 85 F1 | 	sub	objptr, ##28196
041ec     37 00 00 5F 
041f0     24 E4 05 51 |  if_ne	add	objptr, ##28196
041f4     F2 38 02 5B |  if_ne	rdlong	local10, objptr
041f8     37 00 00 5F 
041fc     24 E4 85 51 |  if_ne	sub	objptr, ##28196
04200     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
04204     35 00 00 AF 
04208     20 E4 05 A1 |  if_e	add	objptr, ##27168
0420c     F2 3C 02 AB |  if_e	rdlong	local12, objptr
04210     35 00 00 AF 
04214     20 E4 85 A1 |  if_e	sub	objptr, ##27168
04218     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
0421c     A4 00 90 5D |  if_ne	jmp	#LR__0205
04220     52 00 00 FF 
04224     B0 E4 05 F1 | 	add	objptr, ##42160
04228     F2 12 02 FB | 	rdlong	arg01, objptr
0422c     1B 00 00 FF 
04230     8C E4 85 F1 | 	sub	objptr, ##13964
04234     F2 16 02 FB | 	rdlong	arg03, objptr
04238     37 00 00 FF 
0423c     24 E4 85 F1 | 	sub	objptr, ##28196
04240     00 14 06 F6 | 	mov	arg02, #0
04244     64 44 B0 FD | 	call	#_compile_assign
04248     FD 26 0A F6 | 	mov	local01, result1 wz
0424c                 | '   err=compile_assign(linenum,0,cont)
0424c                 | '   if err<>0 then printerror(err,linenum): goto 101
0424c     20 00 90 AD |  if_e	jmp	#LR__0204
04250     52 00 00 FF 
04254     B0 E4 05 F1 | 	add	objptr, ##42160
04258     F2 14 02 FB | 	rdlong	arg02, objptr
0425c     52 00 00 FF 
04260     B0 E4 85 F1 | 	sub	objptr, ##42160
04264     13 13 02 F6 | 	mov	arg01, local01
04268     E8 F2 B1 FD | 	call	#_printerror
0426c     64 01 90 FD | 	jmp	#LR__0210
04270                 | LR__0204
04270                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
04270     52 00 00 FF 
04274     F4 E4 05 F1 | 	add	objptr, ##42228
04278     F2 12 02 FB | 	rdlong	arg01, objptr
0427c     52 00 00 FF 
04280     F4 E4 85 F1 | 	sub	objptr, ##42228
04284     B6 01 00 FF 
04288     0D 14 06 F6 | 	mov	arg02, ##@LR__5515
0428c     08 2D B2 FD | 	call	#__system___string_cmp
04290     00 FA 0D F2 | 	cmp	result1, #0 wz
04294     1C 01 90 AD |  if_e	jmp	#LR__0209
04298     52 00 00 FF 
0429c     F4 E4 05 F1 | 	add	objptr, ##42228
042a0     F2 2C 02 FB | 	rdlong	local04, objptr
042a4     1B 00 00 FF 
042a8     D8 E4 85 F1 | 	sub	objptr, ##14040
042ac     F2 2C 62 FC | 	wrlong	local04, objptr
042b0     08 E4 05 F1 | 	add	objptr, #8
042b4     F2 08 68 FC | 	wrlong	#4, objptr
042b8     37 00 00 FF 
042bc     24 E4 85 F1 | 	sub	objptr, ##28196
042c0     D0 D5 9F FD | 	jmp	#LR__0070
042c4                 | LR__0205
042c4                 | '     							 
042c4                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
042c4     37 00 00 FF 
042c8     24 E4 05 F1 | 	add	objptr, ##28196
042cc     F2 2C 02 FB | 	rdlong	local04, objptr
042d0     37 00 00 FF 
042d4     24 E4 85 F1 | 	sub	objptr, ##28196
042d8     01 2C 0E F2 | 	cmp	local04, #1 wz
042dc     37 00 00 5F 
042e0     24 E4 05 51 |  if_ne	add	objptr, ##28196
042e4     F2 38 02 5B |  if_ne	rdlong	local10, objptr
042e8     37 00 00 5F 
042ec     24 E4 85 51 |  if_ne	sub	objptr, ##28196
042f0     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
042f4     35 00 00 AF 
042f8     18 E4 05 A1 |  if_e	add	objptr, ##27160
042fc     F2 3C 02 AB |  if_e	rdlong	local12, objptr
04300     35 00 00 AF 
04304     18 E4 85 A1 |  if_e	sub	objptr, ##27160
04308     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
0430c     A4 00 90 5D |  if_ne	jmp	#LR__0208
04310     52 00 00 FF 
04314     B0 E4 05 F1 | 	add	objptr, ##42160
04318     F2 12 02 FB | 	rdlong	arg01, objptr
0431c     1B 00 00 FF 
04320     8C E4 85 F1 | 	sub	objptr, ##13964
04324     F2 16 02 FB | 	rdlong	arg03, objptr
04328     37 00 00 FF 
0432c     24 E4 85 F1 | 	sub	objptr, ##28196
04330     00 14 06 F6 | 	mov	arg02, #0
04334     74 43 B0 FD | 	call	#_compile_assign
04338     FD 26 0A F6 | 	mov	local01, result1 wz
0433c                 | '   err=compile_assign(linenum,0,cont) 
0433c                 | '   if err<>0 then printerror(err,linenum): goto 101
0433c     20 00 90 AD |  if_e	jmp	#LR__0206
04340     52 00 00 FF 
04344     B0 E4 05 F1 | 	add	objptr, ##42160
04348     F2 14 02 FB | 	rdlong	arg02, objptr
0434c     52 00 00 FF 
04350     B0 E4 85 F1 | 	sub	objptr, ##42160
04354     13 13 02 F6 | 	mov	arg01, local01
04358     F8 F1 B1 FD | 	call	#_printerror
0435c     74 00 90 FD | 	jmp	#LR__0210
04360                 | LR__0206
04360                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
04360     52 00 00 FF 
04364     F4 E4 05 F1 | 	add	objptr, ##42228
04368     F2 12 02 FB | 	rdlong	arg01, objptr
0436c     52 00 00 FF 
04370     F4 E4 85 F1 | 	sub	objptr, ##42228
04374     B6 01 00 FF 
04378     0E 14 06 F6 | 	mov	arg02, ##@LR__5516
0437c     18 2C B2 FD | 	call	#__system___string_cmp
04380     00 FA 4D F2 | 	cmps	result1, #0 wz
04384     2C 00 90 AD |  if_e	jmp	#LR__0207
04388     52 00 00 FF 
0438c     F4 E4 05 F1 | 	add	objptr, ##42228
04390     F2 2C 02 FB | 	rdlong	local04, objptr
04394     1B 00 00 FF 
04398     D8 E4 85 F1 | 	sub	objptr, ##14040
0439c     F2 2C 62 FC | 	wrlong	local04, objptr
043a0     08 E4 05 F1 | 	add	objptr, #8
043a4     F2 08 68 FC | 	wrlong	#4, objptr
043a8     37 00 00 FF 
043ac     24 E4 85 F1 | 	sub	objptr, ##28196
043b0     E0 D4 9F FD | 	jmp	#LR__0070
043b4                 | LR__0207
043b4                 | LR__0208
043b4                 | LR__0209
043b4                 | ' 
043b4                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
043b4     52 00 00 FF 
043b8     B0 E4 05 F1 | 	add	objptr, ##42160
043bc     F2 2C 0A FB | 	rdlong	local04, objptr wz
043c0     52 00 00 FF 
043c4     B0 E4 85 F1 | 	sub	objptr, ##42160
043c8     B0 00 90 5D |  if_ne	jmp	#LR__0213
043cc     02 12 06 F6 | 	mov	arg01, #2
043d0     EC 91 B0 FD | 	call	#_execute_line
043d4                 | LR__0210
043d4                 | '   execute_line(2)
043d4                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
043d4     52 00 00 FF 
043d8     D4 E4 05 F1 | 	add	objptr, ##42196
043dc     F2 2C 0A FB | 	rdlong	local04, objptr wz
043e0     52 00 00 FF 
043e4     D4 E4 85 F1 | 	sub	objptr, ##42196
043e8     20 00 90 5D |  if_ne	jmp	#LR__0211
043ec     B6 01 00 FF 
043f0     0F 12 06 F6 | 	mov	arg01, ##@LR__5517
043f4                 | ' 
043f4                 | ' write(text)
043f4     B4 12 B2 FD | 	call	#_hg010b_spin2_write
043f8                 | ' crlf
043f8     B0 17 B2 FD | 	call	#_hg010b_spin2_crlf
043fc     B6 01 00 FF 
04400     10 12 06 F6 | 	mov	arg01, ##@LR__5518
04404                 | ' 
04404                 | ' write(text)
04404     A4 12 B2 FD | 	call	#_hg010b_spin2_write
04408                 | ' crlf
04408     A0 17 B2 FD | 	call	#_hg010b_spin2_crlf
0440c                 | LR__0211
0440c                 | '     if inload=1 andalso err>0 then print fullline$
0440c     52 00 00 FF 
04410     D4 E4 05 F1 | 	add	objptr, ##42196
04414     F2 2C 02 FB | 	rdlong	local04, objptr
04418     52 00 00 FF 
0441c     D4 E4 85 F1 | 	sub	objptr, ##42196
04420     01 2C 0E F2 | 	cmp	local04, #1 wz
04424     54 00 90 5D |  if_ne	jmp	#LR__0212
04428     01 26 56 F2 | 	cmps	local01, #1 wc
0442c     4C 00 90 CD |  if_b	jmp	#LR__0212
04430     00 12 06 F6 | 	mov	arg01, #0
04434     60 88 B2 FD | 	call	#__system___getiolock_0613
04438     FD 12 02 F6 | 	mov	arg01, result1
0443c     30 2B B2 FD | 	call	#__system___lockmem
04440     37 00 00 FF 
04444     20 E4 05 F1 | 	add	objptr, ##28192
04448     F2 14 02 FB | 	rdlong	arg02, objptr
0444c     37 00 00 FF 
04450     20 E4 85 F1 | 	sub	objptr, ##28192
04454     00 12 06 F6 | 	mov	arg01, #0
04458     00 16 06 F6 | 	mov	arg03, #0
0445c     04 38 B2 FD | 	call	#__system___basic_print_string
04460     00 12 06 F6 | 	mov	arg01, #0
04464     0A 14 06 F6 | 	mov	arg02, #10
04468     00 16 06 F6 | 	mov	arg03, #0
0446c     9C 37 B2 FD | 	call	#__system___basic_print_char
04470     00 12 06 F6 | 	mov	arg01, #0
04474     20 88 B2 FD | 	call	#__system___getiolock_0613
04478     FD 00 68 FC | 	wrlong	#0, result1
0447c                 | LR__0212
0447c                 | LR__0213
0447c     A7 F0 03 F6 | 	mov	ptra, fp
04480     B2 00 A0 FD | 	call	#popregs_
04484                 | _interpret_ret
04484     2D 00 64 FD | 	ret
04488                 | 
04488                 | ' 
04488                 | ' '---------------------------------------------------------------------------------------------------------------------
04488                 | ' '
04488                 | ' '                          END OF TOKENIZER MAIN CODE
04488                 | ' '
04488                 | ' '---------------------------------------------------------------------------------------------------------------------
04488                 | ' 
04488                 | ' '---------------------------------------------------------------------------------------------------------------------
04488                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
04488                 | ' '---------------------------------------------------------------------------------------------------------------------
04488                 | ' 
04488                 | ' ' Check if the part is an operator, return a token or 0 if not found
04488                 | ' 
04488                 | ' function isoperator(s as string) as ubyte
04488                 | _isoperator
04488     01 4A 05 F6 | 	mov	COUNT_, #1
0448c     A8 00 A0 FD | 	call	#pushregs_
04490                 | ' 
04490                 | ' select case s
04490     09 27 02 F6 | 	mov	local01, arg01
04494     B6 01 00 FF 
04498     16 14 06 F6 | 	mov	arg02, ##@LR__5519
0449c     13 13 02 F6 | 	mov	arg01, local01
044a0     F4 2A B2 FD | 	call	#__system___string_cmp
044a4     00 FA 0D F2 | 	cmp	result1, #0 wz
044a8     FC 01 90 AD |  if_e	jmp	#LR__0220
044ac     B6 01 00 FF 
044b0     18 14 06 F6 | 	mov	arg02, ##@LR__5520
044b4     13 13 02 F6 | 	mov	arg01, local01
044b8     DC 2A B2 FD | 	call	#__system___string_cmp
044bc     00 FA 0D F2 | 	cmp	result1, #0 wz
044c0     EC 01 90 AD |  if_e	jmp	#LR__0221
044c4     B6 01 00 FF 
044c8     1A 14 06 F6 | 	mov	arg02, ##@LR__5521
044cc     13 13 02 F6 | 	mov	arg01, local01
044d0     C4 2A B2 FD | 	call	#__system___string_cmp
044d4     00 FA 0D F2 | 	cmp	result1, #0 wz
044d8     DC 01 90 AD |  if_e	jmp	#LR__0222
044dc     B6 01 00 FF 
044e0     1D 14 06 F6 | 	mov	arg02, ##@LR__5522
044e4     13 13 02 F6 | 	mov	arg01, local01
044e8     AC 2A B2 FD | 	call	#__system___string_cmp
044ec     00 FA 0D F2 | 	cmp	result1, #0 wz
044f0     CC 01 90 AD |  if_e	jmp	#LR__0223
044f4     B6 01 00 FF 
044f8     21 14 06 F6 | 	mov	arg02, ##@LR__5523
044fc     13 13 02 F6 | 	mov	arg01, local01
04500     94 2A B2 FD | 	call	#__system___string_cmp
04504     00 FA 0D F2 | 	cmp	result1, #0 wz
04508     BC 01 90 AD |  if_e	jmp	#LR__0224
0450c     B6 01 00 FF 
04510     23 14 06 F6 | 	mov	arg02, ##@LR__5524
04514     13 13 02 F6 | 	mov	arg01, local01
04518     7C 2A B2 FD | 	call	#__system___string_cmp
0451c     00 FA 0D F2 | 	cmp	result1, #0 wz
04520     AC 01 90 AD |  if_e	jmp	#LR__0225
04524     B6 01 00 FF 
04528     25 14 06 F6 | 	mov	arg02, ##@LR__5525
0452c     13 13 02 F6 | 	mov	arg01, local01
04530     64 2A B2 FD | 	call	#__system___string_cmp
04534     00 FA 0D F2 | 	cmp	result1, #0 wz
04538     9C 01 90 AD |  if_e	jmp	#LR__0226
0453c     B6 01 00 FF 
04540     29 14 06 F6 | 	mov	arg02, ##@LR__5526
04544     13 13 02 F6 | 	mov	arg01, local01
04548     4C 2A B2 FD | 	call	#__system___string_cmp
0454c     00 FA 0D F2 | 	cmp	result1, #0 wz
04550     8C 01 90 AD |  if_e	jmp	#LR__0227
04554     B6 01 00 FF 
04558     2D 14 06 F6 | 	mov	arg02, ##@LR__5527
0455c     13 13 02 F6 | 	mov	arg01, local01
04560     34 2A B2 FD | 	call	#__system___string_cmp
04564     00 FA 0D F2 | 	cmp	result1, #0 wz
04568     7C 01 90 AD |  if_e	jmp	#LR__0228
0456c     B6 01 00 FF 
04570     31 14 06 F6 | 	mov	arg02, ##@LR__5528
04574     13 13 02 F6 | 	mov	arg01, local01
04578     1C 2A B2 FD | 	call	#__system___string_cmp
0457c     00 FA 0D F2 | 	cmp	result1, #0 wz
04580     6C 01 90 AD |  if_e	jmp	#LR__0229
04584     B6 01 00 FF 
04588     35 14 06 F6 | 	mov	arg02, ##@LR__5529
0458c     13 13 02 F6 | 	mov	arg01, local01
04590     04 2A B2 FD | 	call	#__system___string_cmp
04594     00 FA 0D F2 | 	cmp	result1, #0 wz
04598     5C 01 90 AD |  if_e	jmp	#LR__0230
0459c     B6 01 00 FF 
045a0     39 14 06 F6 | 	mov	arg02, ##@LR__5530
045a4     13 13 02 F6 | 	mov	arg01, local01
045a8     EC 29 B2 FD | 	call	#__system___string_cmp
045ac     00 FA 0D F2 | 	cmp	result1, #0 wz
045b0     4C 01 90 AD |  if_e	jmp	#LR__0231
045b4     B6 01 00 FF 
045b8     3B 14 06 F6 | 	mov	arg02, ##@LR__5531
045bc     13 13 02 F6 | 	mov	arg01, local01
045c0     D4 29 B2 FD | 	call	#__system___string_cmp
045c4     00 FA 0D F2 | 	cmp	result1, #0 wz
045c8     3C 01 90 AD |  if_e	jmp	#LR__0232
045cc     B6 01 00 FF 
045d0     3F 14 06 F6 | 	mov	arg02, ##@LR__5532
045d4     13 13 02 F6 | 	mov	arg01, local01
045d8     BC 29 B2 FD | 	call	#__system___string_cmp
045dc     00 FA 0D F2 | 	cmp	result1, #0 wz
045e0     2C 01 90 AD |  if_e	jmp	#LR__0233
045e4     B6 01 00 FF 
045e8     41 14 06 F6 | 	mov	arg02, ##@LR__5533
045ec     13 13 02 F6 | 	mov	arg01, local01
045f0     A4 29 B2 FD | 	call	#__system___string_cmp
045f4     00 FA 0D F2 | 	cmp	result1, #0 wz
045f8     1C 01 90 AD |  if_e	jmp	#LR__0234
045fc     B6 01 00 FF 
04600     43 14 06 F6 | 	mov	arg02, ##@LR__5534
04604     13 13 02 F6 | 	mov	arg01, local01
04608     8C 29 B2 FD | 	call	#__system___string_cmp
0460c     00 FA 0D F2 | 	cmp	result1, #0 wz
04610     0C 01 90 AD |  if_e	jmp	#LR__0235
04614     B6 01 00 FF 
04618     46 14 06 F6 | 	mov	arg02, ##@LR__5535
0461c     13 13 02 F6 | 	mov	arg01, local01
04620     74 29 B2 FD | 	call	#__system___string_cmp
04624     00 FA 0D F2 | 	cmp	result1, #0 wz
04628     FC 00 90 AD |  if_e	jmp	#LR__0236
0462c     B6 01 00 FF 
04630     49 14 06 F6 | 	mov	arg02, ##@LR__5536
04634     13 13 02 F6 | 	mov	arg01, local01
04638     5C 29 B2 FD | 	call	#__system___string_cmp
0463c     00 FA 0D F2 | 	cmp	result1, #0 wz
04640     EC 00 90 AD |  if_e	jmp	#LR__0237
04644     B6 01 00 FF 
04648     4B 14 06 F6 | 	mov	arg02, ##@LR__5537
0464c     13 13 02 F6 | 	mov	arg01, local01
04650     44 29 B2 FD | 	call	#__system___string_cmp
04654     00 FA 0D F2 | 	cmp	result1, #0 wz
04658     DC 00 90 AD |  if_e	jmp	#LR__0238
0465c     B6 01 00 FF 
04660     4D 14 06 F6 | 	mov	arg02, ##@LR__5538
04664     13 13 02 F6 | 	mov	arg01, local01
04668     2C 29 B2 FD | 	call	#__system___string_cmp
0466c     00 FA 0D F2 | 	cmp	result1, #0 wz
04670     CC 00 90 AD |  if_e	jmp	#LR__0239
04674     B6 01 00 FF 
04678     50 14 06 F6 | 	mov	arg02, ##@LR__5539
0467c     13 13 02 F6 | 	mov	arg01, local01
04680     14 29 B2 FD | 	call	#__system___string_cmp
04684     00 FA 0D F2 | 	cmp	result1, #0 wz
04688     BC 00 90 AD |  if_e	jmp	#LR__0240
0468c     B6 01 00 FF 
04690     53 14 06 F6 | 	mov	arg02, ##@LR__5540
04694     13 13 02 F6 | 	mov	arg01, local01
04698     FC 28 B2 FD | 	call	#__system___string_cmp
0469c     00 FA 0D F2 | 	cmp	result1, #0 wz
046a0     AC 00 90 AD |  if_e	jmp	#LR__0241
046a4     B0 00 90 FD | 	jmp	#LR__0242
046a8                 | LR__0220
046a8     01 FA 05 F6 | 	mov	result1, #1
046ac     AC 00 90 FD | 	jmp	#LR__0243
046b0                 | LR__0221
046b0     02 FA 05 F6 | 	mov	result1, #2
046b4     A4 00 90 FD | 	jmp	#LR__0243
046b8                 | LR__0222
046b8     03 FA 05 F6 | 	mov	result1, #3
046bc     9C 00 90 FD | 	jmp	#LR__0243
046c0                 | LR__0223
046c0     04 FA 05 F6 | 	mov	result1, #4
046c4     94 00 90 FD | 	jmp	#LR__0243
046c8                 | LR__0224
046c8     05 FA 05 F6 | 	mov	result1, #5
046cc     8C 00 90 FD | 	jmp	#LR__0243
046d0                 | LR__0225
046d0     06 FA 05 F6 | 	mov	result1, #6
046d4     84 00 90 FD | 	jmp	#LR__0243
046d8                 | LR__0226
046d8     07 FA 05 F6 | 	mov	result1, #7
046dc     7C 00 90 FD | 	jmp	#LR__0243
046e0                 | LR__0227
046e0     08 FA 05 F6 | 	mov	result1, #8
046e4     74 00 90 FD | 	jmp	#LR__0243
046e8                 | LR__0228
046e8     09 FA 05 F6 | 	mov	result1, #9
046ec     6C 00 90 FD | 	jmp	#LR__0243
046f0                 | LR__0229
046f0     0A FA 05 F6 | 	mov	result1, #10
046f4     64 00 90 FD | 	jmp	#LR__0243
046f8                 | LR__0230
046f8     0B FA 05 F6 | 	mov	result1, #11
046fc     5C 00 90 FD | 	jmp	#LR__0243
04700                 | LR__0231
04700     0C FA 05 F6 | 	mov	result1, #12
04704     54 00 90 FD | 	jmp	#LR__0243
04708                 | LR__0232
04708     0D FA 05 F6 | 	mov	result1, #13
0470c     4C 00 90 FD | 	jmp	#LR__0243
04710                 | LR__0233
04710     0E FA 05 F6 | 	mov	result1, #14
04714     44 00 90 FD | 	jmp	#LR__0243
04718                 | LR__0234
04718     1B FA 05 F6 | 	mov	result1, #27
0471c     3C 00 90 FD | 	jmp	#LR__0243
04720                 | LR__0235
04720     27 FA 05 F6 | 	mov	result1, #39
04724     34 00 90 FD | 	jmp	#LR__0243
04728                 | LR__0236
04728     26 FA 05 F6 | 	mov	result1, #38
0472c     2C 00 90 FD | 	jmp	#LR__0243
04730                 | LR__0237
04730     10 FA 05 F6 | 	mov	result1, #16
04734     24 00 90 FD | 	jmp	#LR__0243
04738                 | LR__0238
04738     0F FA 05 F6 | 	mov	result1, #15
0473c     1C 00 90 FD | 	jmp	#LR__0243
04740                 | LR__0239
04740     2A FA 05 F6 | 	mov	result1, #42
04744     14 00 90 FD | 	jmp	#LR__0243
04748                 | LR__0240
04748     28 FA 05 F6 | 	mov	result1, #40
0474c     0C 00 90 FD | 	jmp	#LR__0243
04750                 | LR__0241
04750     29 FA 05 F6 | 	mov	result1, #41
04754     04 00 90 FD | 	jmp	#LR__0243
04758                 | LR__0242
04758     00 FA 05 F6 | 	mov	result1, #0
0475c                 | LR__0243
0475c     A7 F0 03 F6 | 	mov	ptra, fp
04760     B2 00 A0 FD | 	call	#popregs_
04764                 | _isoperator_ret
04764     2D 00 64 FD | 	ret
04768                 | 
04768                 | ' 
04768                 | ' ' Check if the part is a channel#, return a token or 0 if not found
04768                 | ' 
04768                 | ' function ischannel(s as string) as ulong
04768                 | _ischannel
04768     02 4A 05 F6 | 	mov	COUNT_, #2
0476c     A8 00 A0 FD | 	call	#pushregs_
04770                 | ' if left$(s,1)<>"#" then return 0
04770     09 27 02 F6 | 	mov	local01, arg01
04774     01 14 06 F6 | 	mov	arg02, #1
04778     70 48 B2 FD | 	call	#__system__Left_S
0477c     FD 12 02 F6 | 	mov	arg01, result1
04780     B6 01 00 FF 
04784     56 14 06 F6 | 	mov	arg02, ##@LR__5541
04788     0C 28 B2 FD | 	call	#__system___string_cmp
0478c     00 FA 0D F2 | 	cmp	result1, #0 wz
04790     00 FA 05 56 |  if_ne	mov	result1, #0
04794     AC 00 90 5D |  if_ne	jmp	#LR__0254
04798                 | ' if len(s)<>2 then return 0
04798     13 13 02 F6 | 	mov	arg01, local01
0479c     09 29 02 F6 | 	mov	local02, arg01
047a0     97 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
047a4                 | LR__0250
047a4     14 FB C9 FA | 	rdbyte	result1, local02 wz
047a8     01 28 06 51 |  if_ne	add	local02, #1
047ac     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
047b0                 | LR__0251
047b0     09 29 82 F1 | 	sub	local02, arg01
047b4     14 FB 01 F6 | 	mov	result1, local02
047b8     02 FA 0D F2 | 	cmp	result1, #2 wz
047bc     00 FA 05 56 |  if_ne	mov	result1, #0
047c0     80 00 90 5D |  if_ne	jmp	#LR__0254
047c4                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
047c4     13 13 02 F6 | 	mov	arg01, local01
047c8     01 14 06 F6 | 	mov	arg02, #1
047cc     A4 48 B2 FD | 	call	#__system__Right_S
047d0     FD 12 02 F6 | 	mov	arg01, result1
047d4     B6 01 00 FF 
047d8     58 14 06 F6 | 	mov	arg02, ##@LR__5542
047dc     B8 27 B2 FD | 	call	#__system___string_cmp
047e0     00 FA 55 F2 | 	cmps	result1, #0 wc
047e4     24 00 90 CD |  if_b	jmp	#LR__0252
047e8     13 13 02 F6 | 	mov	arg01, local01
047ec     01 14 06 F6 | 	mov	arg02, #1
047f0     80 48 B2 FD | 	call	#__system__Right_S
047f4     FD 12 02 F6 | 	mov	arg01, result1
047f8     B6 01 00 FF 
047fc     5A 14 06 F6 | 	mov	arg02, ##@LR__5543
04800     94 27 B2 FD | 	call	#__system___string_cmp
04804     01 FA 55 F2 | 	cmps	result1, #1 wc
04808     08 00 90 CD |  if_b	jmp	#LR__0253
0480c                 | LR__0252
0480c     00 FA 05 F6 | 	mov	result1, #0
04810     30 00 90 FD | 	jmp	#LR__0254
04814                 | LR__0253
04814                 | ' return token_channel+val(right$(s,1))
04814     13 13 02 F6 | 	mov	arg01, local01
04818     01 14 06 F6 | 	mov	arg02, #1
0481c     54 48 B2 FD | 	call	#__system__Right_S
04820     FD 12 02 F6 | 	mov	arg01, result1
04824     CC 5D B2 FD | 	call	#__system____builtin_atof
04828     FD 14 02 F6 | 	mov	arg02, result1
0482c     00 18 21 FF 
04830     00 12 06 F6 | 	mov	arg01, ##1110441984
04834     E0 51 B2 FD | 	call	#__system___float_add
04838     FD 12 02 F6 | 	mov	arg01, result1
0483c     00 14 06 F6 | 	mov	arg02, #0
04840     6C 5A B2 FD | 	call	#__system___float_tointeger
04844                 | LR__0254
04844     A7 F0 03 F6 | 	mov	ptra, fp
04848     B2 00 A0 FD | 	call	#popregs_
0484c                 | _ischannel_ret
0484c     2D 00 64 FD | 	ret
04850                 | 
04850                 | ' 
04850                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
04850                 | ' ' todo: add spin2/pasm constants for pin control
04850                 | ' 
04850                 | ' function isconstant(s as string) as integer
04850                 | _isconstant
04850     01 4A 05 F6 | 	mov	COUNT_, #1
04854     A8 00 A0 FD | 	call	#pushregs_
04858                 | ' 
04858                 | ' select case s
04858     09 27 02 F6 | 	mov	local01, arg01
0485c     B6 01 00 FF 
04860     5C 14 06 F6 | 	mov	arg02, ##@LR__5544
04864     13 13 02 F6 | 	mov	arg01, local01
04868     2C 27 B2 FD | 	call	#__system___string_cmp
0486c     00 FA 0D F2 | 	cmp	result1, #0 wz
04870     34 00 90 AD |  if_e	jmp	#LR__0260
04874     B6 01 00 FF 
04878     62 14 06 F6 | 	mov	arg02, ##@LR__5545
0487c     13 13 02 F6 | 	mov	arg01, local01
04880     14 27 B2 FD | 	call	#__system___string_cmp
04884     00 FA 0D F2 | 	cmp	result1, #0 wz
04888     24 00 90 AD |  if_e	jmp	#LR__0261
0488c     B6 01 00 FF 
04890     69 14 06 F6 | 	mov	arg02, ##@LR__5546
04894     13 13 02 F6 | 	mov	arg01, local01
04898     FC 26 B2 FD | 	call	#__system___string_cmp
0489c     00 FA 0D F2 | 	cmp	result1, #0 wz
048a0     14 00 90 AD |  if_e	jmp	#LR__0262
048a4     18 00 90 FD | 	jmp	#LR__0263
048a8                 | LR__0260
048a8     01 FA 05 F6 | 	mov	result1, #1
048ac     14 00 90 FD | 	jmp	#LR__0264
048b0                 | LR__0261
048b0     02 FA 05 F6 | 	mov	result1, #2
048b4     0C 00 90 FD | 	jmp	#LR__0264
048b8                 | LR__0262
048b8     04 FA 05 F6 | 	mov	result1, #4
048bc     04 00 90 FD | 	jmp	#LR__0264
048c0                 | LR__0263
048c0     00 FA 05 F6 | 	mov	result1, #0
048c4                 | LR__0264
048c4     A7 F0 03 F6 | 	mov	ptra, fp
048c8     B2 00 A0 FD | 	call	#popregs_
048cc                 | _isconstant_ret
048cc     2D 00 64 FD | 	ret
048d0                 | 
048d0                 | ' 
048d0                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
048d0                 | ' 
048d0                 | ' function isnotename(s as string) as ulong
048d0                 | _isnotename
048d0     07 4A 05 F6 | 	mov	COUNT_, #7
048d4     A8 00 A0 FD | 	call	#pushregs_
048d8                 | ' if left$(s,1)<>"#" then return 0
048d8     09 27 02 F6 | 	mov	local01, arg01
048dc     01 14 06 F6 | 	mov	arg02, #1
048e0     08 47 B2 FD | 	call	#__system__Left_S
048e4     FD 12 02 F6 | 	mov	arg01, result1
048e8     B6 01 00 FF 
048ec     71 14 06 F6 | 	mov	arg02, ##@LR__5547
048f0     A4 26 B2 FD | 	call	#__system___string_cmp
048f4     00 FA 0D F2 | 	cmp	result1, #0 wz
048f8     00 FA 05 56 |  if_ne	mov	result1, #0
048fc     30 03 90 5D |  if_ne	jmp	#LR__0293
04900                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
04900     13 13 02 F6 | 	mov	arg01, local01
04904     03 14 06 F6 | 	mov	arg02, #3
04908     01 16 06 F6 | 	mov	arg03, #1
0490c     F4 47 B2 FD | 	call	#__system__Mid_S
04910     FD 12 02 F6 | 	mov	arg01, result1
04914     B6 01 00 FF 
04918     73 14 06 F6 | 	mov	arg02, ##@LR__5548
0491c     78 26 B2 FD | 	call	#__system___string_cmp
04920     00 FA 0D F2 | 	cmp	result1, #0 wz
04924     18 00 90 5D |  if_ne	jmp	#LR__0270
04928     13 13 02 F6 | 	mov	arg01, local01
0492c     02 14 06 F6 | 	mov	arg02, #2
04930     02 16 06 F6 | 	mov	arg03, #2
04934     CC 47 B2 FD | 	call	#__system__Mid_S
04938     FD 28 02 F6 | 	mov	local02, result1
0493c     14 00 90 FD | 	jmp	#LR__0271
04940                 | LR__0270
04940     13 13 02 F6 | 	mov	arg01, local01
04944     02 14 06 F6 | 	mov	arg02, #2
04948     01 16 06 F6 | 	mov	arg03, #1
0494c     B4 47 B2 FD | 	call	#__system__Mid_S
04950     FD 28 02 F6 | 	mov	local02, result1
04954                 | LR__0271
04954                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
04954     13 13 02 F6 | 	mov	arg01, local01
04958     09 2B 02 F6 | 	mov	local03, arg01
0495c     97 06 48 FB | 	callpa	#(@LR__0273-@LR__0272)>>2,fcache_load_ptr_
04960                 | LR__0272
04960     15 FB C9 FA | 	rdbyte	result1, local03 wz
04964     01 2A 06 51 |  if_ne	add	local03, #1
04968     F4 FF 9F 5D |  if_ne	jmp	#LR__0272
0496c                 | LR__0273
0496c     09 2B 82 F1 | 	sub	local03, arg01
04970     15 15 02 F6 | 	mov	arg02, local03
04974     01 14 86 F1 | 	sub	arg02, #1
04978     13 13 02 F6 | 	mov	arg01, local01
0497c     01 16 06 F6 | 	mov	arg03, #1
04980     80 47 B2 FD | 	call	#__system__Mid_S
04984     FD 12 02 F6 | 	mov	arg01, result1
04988     B6 01 00 FF 
0498c     75 14 06 F6 | 	mov	arg02, ##@LR__5549
04990     04 26 B2 FD | 	call	#__system___string_cmp
04994     00 FA 0D F2 | 	cmp	result1, #0 wz
04998     28 00 90 AD |  if_e	jmp	#LR__0274
0499c     13 13 02 F6 | 	mov	arg01, local01
049a0     01 14 06 F6 | 	mov	arg02, #1
049a4     CC 46 B2 FD | 	call	#__system__Right_S
049a8     FD 12 02 F6 | 	mov	arg01, result1
049ac     44 5C B2 FD | 	call	#__system____builtin_atof
049b0     FD 12 02 F6 | 	mov	arg01, result1
049b4     00 14 06 F6 | 	mov	arg02, #0
049b8     F4 58 B2 FD | 	call	#__system___float_tointeger
049bc     FD 2C 02 F6 | 	mov	local04, result1
049c0     34 00 90 FD | 	jmp	#LR__0275
049c4                 | LR__0274
049c4     13 13 02 F6 | 	mov	arg01, local01
049c8     01 14 06 F6 | 	mov	arg02, #1
049cc     A4 46 B2 FD | 	call	#__system__Right_S
049d0     FD 12 02 F6 | 	mov	arg01, result1
049d4     1C 5C B2 FD | 	call	#__system____builtin_atof
049d8     FD 14 02 F6 | 	mov	arg02, result1
049dc     00 C0 5F FF 
049e0     00 12 06 F6 | 	mov	arg01, ##-1082130432
049e4     00 54 B2 FD | 	call	#__system___float_mul
049e8     FD 12 02 F6 | 	mov	arg01, result1
049ec     00 14 06 F6 | 	mov	arg02, #0
049f0     BC 58 B2 FD | 	call	#__system___float_tointeger
049f4     FD 2C 02 F6 | 	mov	local04, result1
049f8                 | LR__0275
049f8                 | ' 
049f8                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
049f8     00 2C 0E F2 | 	cmp	local04, #0 wz
049fc     24 00 90 5D |  if_ne	jmp	#LR__0276
04a00     13 13 02 F6 | 	mov	arg01, local01
04a04     01 14 06 F6 | 	mov	arg02, #1
04a08     68 46 B2 FD | 	call	#__system__Right_S
04a0c     FD 12 02 F6 | 	mov	arg01, result1
04a10     B6 01 00 FF 
04a14     77 14 06 F6 | 	mov	arg02, ##@LR__5550
04a18     7C 25 B2 FD | 	call	#__system___string_cmp
04a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a20     04 2C 06 56 |  if_ne	mov	local04, #4
04a24                 | LR__0276
04a24                 | ' 
04a24                 | ' select case s1
04a24     14 2F 02 F6 | 	mov	local05, local02
04a28     B6 01 00 FF 
04a2c     79 14 06 F6 | 	mov	arg02, ##@LR__5551
04a30     17 13 02 F6 | 	mov	arg01, local05
04a34     60 25 B2 FD | 	call	#__system___string_cmp
04a38     00 FA 0D F2 | 	cmp	result1, #0 wz
04a3c     24 01 90 AD |  if_e	jmp	#LR__0277
04a40     B6 01 00 FF 
04a44     7B 14 06 F6 | 	mov	arg02, ##@LR__5552
04a48     17 13 02 F6 | 	mov	arg01, local05
04a4c     48 25 B2 FD | 	call	#__system___string_cmp
04a50     00 FA 0D F2 | 	cmp	result1, #0 wz
04a54     18 01 90 AD |  if_e	jmp	#LR__0278
04a58     B6 01 00 FF 
04a5c     7E 14 06 F6 | 	mov	arg02, ##@LR__5553
04a60     17 13 02 F6 | 	mov	arg01, local05
04a64     30 25 B2 FD | 	call	#__system___string_cmp
04a68     00 FA 0D F2 | 	cmp	result1, #0 wz
04a6c     0C 01 90 AD |  if_e	jmp	#LR__0279
04a70     B6 01 00 FF 
04a74     80 14 06 F6 | 	mov	arg02, ##@LR__5554
04a78     17 13 02 F6 | 	mov	arg01, local05
04a7c     18 25 B2 FD | 	call	#__system___string_cmp
04a80     00 FA 0D F2 | 	cmp	result1, #0 wz
04a84     00 01 90 AD |  if_e	jmp	#LR__0280
04a88     B6 01 00 FF 
04a8c     83 14 06 F6 | 	mov	arg02, ##@LR__5555
04a90     17 13 02 F6 | 	mov	arg01, local05
04a94     00 25 B2 FD | 	call	#__system___string_cmp
04a98     00 FA 0D F2 | 	cmp	result1, #0 wz
04a9c     F4 00 90 AD |  if_e	jmp	#LR__0281
04aa0     B6 01 00 FF 
04aa4     85 14 06 F6 | 	mov	arg02, ##@LR__5556
04aa8     17 13 02 F6 | 	mov	arg01, local05
04aac     E8 24 B2 FD | 	call	#__system___string_cmp
04ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab4     E8 00 90 AD |  if_e	jmp	#LR__0282
04ab8     B6 01 00 FF 
04abc     87 14 06 F6 | 	mov	arg02, ##@LR__5557
04ac0     17 13 02 F6 | 	mov	arg01, local05
04ac4     D0 24 B2 FD | 	call	#__system___string_cmp
04ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
04acc     DC 00 90 AD |  if_e	jmp	#LR__0283
04ad0     B6 01 00 FF 
04ad4     8A 14 06 F6 | 	mov	arg02, ##@LR__5558
04ad8     17 13 02 F6 | 	mov	arg01, local05
04adc     B8 24 B2 FD | 	call	#__system___string_cmp
04ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae4     D0 00 90 AD |  if_e	jmp	#LR__0284
04ae8     B6 01 00 FF 
04aec     8C 14 06 F6 | 	mov	arg02, ##@LR__5559
04af0     17 13 02 F6 | 	mov	arg01, local05
04af4     A0 24 B2 FD | 	call	#__system___string_cmp
04af8     00 FA 0D F2 | 	cmp	result1, #0 wz
04afc     C4 00 90 AD |  if_e	jmp	#LR__0285
04b00     B6 01 00 FF 
04b04     8F 14 06 F6 | 	mov	arg02, ##@LR__5560
04b08     17 13 02 F6 | 	mov	arg01, local05
04b0c     88 24 B2 FD | 	call	#__system___string_cmp
04b10     00 FA 0D F2 | 	cmp	result1, #0 wz
04b14     B8 00 90 AD |  if_e	jmp	#LR__0286
04b18     B6 01 00 FF 
04b1c     91 14 06 F6 | 	mov	arg02, ##@LR__5561
04b20     17 13 02 F6 | 	mov	arg01, local05
04b24     70 24 B2 FD | 	call	#__system___string_cmp
04b28     00 FA 0D F2 | 	cmp	result1, #0 wz
04b2c     AC 00 90 AD |  if_e	jmp	#LR__0287
04b30     B6 01 00 FF 
04b34     94 14 06 F6 | 	mov	arg02, ##@LR__5562
04b38     17 13 02 F6 | 	mov	arg01, local05
04b3c     58 24 B2 FD | 	call	#__system___string_cmp
04b40     00 FA 0D F2 | 	cmp	result1, #0 wz
04b44     A0 00 90 AD |  if_e	jmp	#LR__0288
04b48     B6 01 00 FF 
04b4c     96 14 06 F6 | 	mov	arg02, ##@LR__5563
04b50     17 13 02 F6 | 	mov	arg01, local05
04b54     40 24 B2 FD | 	call	#__system___string_cmp
04b58     00 FA 0D F2 | 	cmp	result1, #0 wz
04b5c     94 00 90 AD |  if_e	jmp	#LR__0289
04b60     9C 00 90 FD | 	jmp	#LR__0290
04b64                 | LR__0277
04b64     01 00 00 FF 
04b68     00 31 06 F6 | 	mov	local06, ##768
04b6c     98 00 90 FD | 	jmp	#LR__0291
04b70                 | LR__0278
04b70     01 00 00 FF 
04b74     01 31 06 F6 | 	mov	local06, ##769
04b78     8C 00 90 FD | 	jmp	#LR__0291
04b7c                 | LR__0279
04b7c     01 00 00 FF 
04b80     02 31 06 F6 | 	mov	local06, ##770
04b84     80 00 90 FD | 	jmp	#LR__0291
04b88                 | LR__0280
04b88     01 00 00 FF 
04b8c     03 31 06 F6 | 	mov	local06, ##771
04b90     74 00 90 FD | 	jmp	#LR__0291
04b94                 | LR__0281
04b94     01 00 00 FF 
04b98     04 31 06 F6 | 	mov	local06, ##772
04b9c     68 00 90 FD | 	jmp	#LR__0291
04ba0                 | LR__0282
04ba0     01 00 00 FF 
04ba4     05 31 06 F6 | 	mov	local06, ##773
04ba8     5C 00 90 FD | 	jmp	#LR__0291
04bac                 | LR__0283
04bac     01 00 00 FF 
04bb0     06 31 06 F6 | 	mov	local06, ##774
04bb4     50 00 90 FD | 	jmp	#LR__0291
04bb8                 | LR__0284
04bb8     01 00 00 FF 
04bbc     07 31 06 F6 | 	mov	local06, ##775
04bc0     44 00 90 FD | 	jmp	#LR__0291
04bc4                 | LR__0285
04bc4     01 00 00 FF 
04bc8     08 31 06 F6 | 	mov	local06, ##776
04bcc     38 00 90 FD | 	jmp	#LR__0291
04bd0                 | LR__0286
04bd0     01 00 00 FF 
04bd4     09 31 06 F6 | 	mov	local06, ##777
04bd8     2C 00 90 FD | 	jmp	#LR__0291
04bdc                 | LR__0287
04bdc     01 00 00 FF 
04be0     0A 31 06 F6 | 	mov	local06, ##778
04be4     20 00 90 FD | 	jmp	#LR__0291
04be8                 | LR__0288
04be8     01 00 00 FF 
04bec     0B 31 06 F6 | 	mov	local06, ##779
04bf0     14 00 90 FD | 	jmp	#LR__0291
04bf4                 | LR__0289
04bf4     01 00 00 FF 
04bf8     0B 31 06 F6 | 	mov	local06, ##779
04bfc     08 00 90 FD | 	jmp	#LR__0291
04c00                 | LR__0290
04c00     00 FA 05 F6 | 	mov	result1, #0
04c04     28 00 90 FD | 	jmp	#LR__0293
04c08                 | LR__0291
04c08                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04c08     FF FF 7F FF 
04c0c     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
04c10     18 00 90 CD |  if_b	jmp	#LR__0292
04c14     0A 2C 56 F2 | 	cmps	local04, #10 wc
04c18     16 33 02 C6 |  if_b	mov	local07, local04
04c1c     01 32 66 C0 |  if_b	shl	local07, #1
04c20     16 33 02 C1 |  if_b	add	local07, local04
04c24     02 32 66 C0 |  if_b	shl	local07, #2
04c28     19 31 02 C1 |  if_b	add	local06, local07
04c2c                 | LR__0292
04c2c                 | ' return token
04c2c     18 FB 01 F6 | 	mov	result1, local06
04c30                 | LR__0293
04c30     A7 F0 03 F6 | 	mov	ptra, fp
04c34     B2 00 A0 FD | 	call	#popregs_
04c38                 | _isnotename_ret
04c38     2D 00 64 FD | 	ret
04c3c                 | 
04c3c                 | ' 
04c3c                 | ' ' Check if the part is a separator, return a token or 0 if not found
04c3c                 | ' 
04c3c                 | ' function isseparator(s as string) as ubyte
04c3c                 | _isseparator
04c3c     01 4A 05 F6 | 	mov	COUNT_, #1
04c40     A8 00 A0 FD | 	call	#pushregs_
04c44                 | ' 
04c44                 | ' select case s
04c44     09 27 02 F6 | 	mov	local01, arg01
04c48     B6 01 00 FF 
04c4c     98 14 06 F6 | 	mov	arg02, ##@LR__5564
04c50     13 13 02 F6 | 	mov	arg01, local01
04c54     40 23 B2 FD | 	call	#__system___string_cmp
04c58     00 FA 0D F2 | 	cmp	result1, #0 wz
04c5c     54 01 90 AD |  if_e	jmp	#LR__0300
04c60     B6 01 00 FF 
04c64     9A 14 06 F6 | 	mov	arg02, ##@LR__5565
04c68     13 13 02 F6 | 	mov	arg01, local01
04c6c     28 23 B2 FD | 	call	#__system___string_cmp
04c70     00 FA 0D F2 | 	cmp	result1, #0 wz
04c74     44 01 90 AD |  if_e	jmp	#LR__0301
04c78     B6 01 00 FF 
04c7c     9C 14 06 F6 | 	mov	arg02, ##@LR__5566
04c80     13 13 02 F6 | 	mov	arg01, local01
04c84     10 23 B2 FD | 	call	#__system___string_cmp
04c88     00 FA 0D F2 | 	cmp	result1, #0 wz
04c8c     34 01 90 AD |  if_e	jmp	#LR__0302
04c90     B6 01 00 FF 
04c94     9E 14 06 F6 | 	mov	arg02, ##@LR__5567
04c98     13 13 02 F6 | 	mov	arg01, local01
04c9c     F8 22 B2 FD | 	call	#__system___string_cmp
04ca0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ca4     24 01 90 AD |  if_e	jmp	#LR__0303
04ca8     B6 01 00 FF 
04cac     A0 14 06 F6 | 	mov	arg02, ##@LR__5568
04cb0     13 13 02 F6 | 	mov	arg01, local01
04cb4     E0 22 B2 FD | 	call	#__system___string_cmp
04cb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cbc     14 01 90 AD |  if_e	jmp	#LR__0304
04cc0     B6 01 00 FF 
04cc4     A2 14 06 F6 | 	mov	arg02, ##@LR__5569
04cc8     13 13 02 F6 | 	mov	arg01, local01
04ccc     C8 22 B2 FD | 	call	#__system___string_cmp
04cd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cd4     04 01 90 AD |  if_e	jmp	#LR__0305
04cd8     B6 01 00 FF 
04cdc     A4 14 06 F6 | 	mov	arg02, ##@LR__5570
04ce0     13 13 02 F6 | 	mov	arg01, local01
04ce4     B0 22 B2 FD | 	call	#__system___string_cmp
04ce8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cec     F4 00 90 AD |  if_e	jmp	#LR__0306
04cf0     B6 01 00 FF 
04cf4     A6 14 06 F6 | 	mov	arg02, ##@LR__5571
04cf8     13 13 02 F6 | 	mov	arg01, local01
04cfc     98 22 B2 FD | 	call	#__system___string_cmp
04d00     00 FA 0D F2 | 	cmp	result1, #0 wz
04d04     E4 00 90 AD |  if_e	jmp	#LR__0307
04d08     B6 01 00 FF 
04d0c     A8 14 06 F6 | 	mov	arg02, ##@LR__5572
04d10     13 13 02 F6 | 	mov	arg01, local01
04d14     80 22 B2 FD | 	call	#__system___string_cmp
04d18     00 FA 0D F2 | 	cmp	result1, #0 wz
04d1c     D4 00 90 AD |  if_e	jmp	#LR__0308
04d20     B6 01 00 FF 
04d24     AA 14 06 F6 | 	mov	arg02, ##@LR__5573
04d28     13 13 02 F6 | 	mov	arg01, local01
04d2c     68 22 B2 FD | 	call	#__system___string_cmp
04d30     00 FA 0D F2 | 	cmp	result1, #0 wz
04d34     C4 00 90 AD |  if_e	jmp	#LR__0309
04d38     B6 01 00 FF 
04d3c     AC 14 06 F6 | 	mov	arg02, ##@LR__5574
04d40     13 13 02 F6 | 	mov	arg01, local01
04d44     50 22 B2 FD | 	call	#__system___string_cmp
04d48     00 FA 0D F2 | 	cmp	result1, #0 wz
04d4c     B4 00 90 AD |  if_e	jmp	#LR__0310
04d50     B6 01 00 FF 
04d54     AE 14 06 F6 | 	mov	arg02, ##@LR__5575
04d58     13 13 02 F6 | 	mov	arg01, local01
04d5c     38 22 B2 FD | 	call	#__system___string_cmp
04d60     00 FA 0D F2 | 	cmp	result1, #0 wz
04d64     A4 00 90 AD |  if_e	jmp	#LR__0311
04d68     B6 01 00 FF 
04d6c     B0 14 06 F6 | 	mov	arg02, ##@LR__5576
04d70     13 13 02 F6 | 	mov	arg01, local01
04d74     20 22 B2 FD | 	call	#__system___string_cmp
04d78     00 FA 0D F2 | 	cmp	result1, #0 wz
04d7c     94 00 90 AD |  if_e	jmp	#LR__0312
04d80     B6 01 00 FF 
04d84     B2 14 06 F6 | 	mov	arg02, ##@LR__5577
04d88     13 13 02 F6 | 	mov	arg01, local01
04d8c     08 22 B2 FD | 	call	#__system___string_cmp
04d90     00 FA 0D F2 | 	cmp	result1, #0 wz
04d94     84 00 90 AD |  if_e	jmp	#LR__0313
04d98     B6 01 00 FF 
04d9c     B4 14 06 F6 | 	mov	arg02, ##@LR__5578
04da0     13 13 02 F6 | 	mov	arg01, local01
04da4     F0 21 B2 FD | 	call	#__system___string_cmp
04da8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dac     74 00 90 AD |  if_e	jmp	#LR__0314
04db0     78 00 90 FD | 	jmp	#LR__0315
04db4                 | LR__0300
04db4     01 FA 05 F6 | 	mov	result1, #1
04db8     74 00 90 FD | 	jmp	#LR__0316
04dbc                 | LR__0301
04dbc     02 FA 05 F6 | 	mov	result1, #2
04dc0     6C 00 90 FD | 	jmp	#LR__0316
04dc4                 | LR__0302
04dc4     1B FA 05 F6 | 	mov	result1, #27
04dc8     64 00 90 FD | 	jmp	#LR__0316
04dcc                 | LR__0303
04dcc     11 FA 05 F6 | 	mov	result1, #17
04dd0     5C 00 90 FD | 	jmp	#LR__0316
04dd4                 | LR__0304
04dd4     05 FA 05 F6 | 	mov	result1, #5
04dd8     54 00 90 FD | 	jmp	#LR__0316
04ddc                 | LR__0305
04ddc     06 FA 05 F6 | 	mov	result1, #6
04de0     4C 00 90 FD | 	jmp	#LR__0316
04de4                 | LR__0306
04de4     12 FA 05 F6 | 	mov	result1, #18
04de8     44 00 90 FD | 	jmp	#LR__0316
04dec                 | LR__0307
04dec     13 FA 05 F6 | 	mov	result1, #19
04df0     3C 00 90 FD | 	jmp	#LR__0316
04df4                 | LR__0308
04df4     0C FA 05 F6 | 	mov	result1, #12
04df8     34 00 90 FD | 	jmp	#LR__0316
04dfc                 | LR__0309
04dfc     14 FA 05 F6 | 	mov	result1, #20
04e00     2C 00 90 FD | 	jmp	#LR__0316
04e04                 | LR__0310
04e04     15 FA 05 F6 | 	mov	result1, #21
04e08     24 00 90 FD | 	jmp	#LR__0316
04e0c                 | LR__0311
04e0c     16 FA 05 F6 | 	mov	result1, #22
04e10     1C 00 90 FD | 	jmp	#LR__0316
04e14                 | LR__0312
04e14     FF FB 05 F6 | 	mov	result1, #511
04e18     14 00 90 FD | 	jmp	#LR__0316
04e1c                 | LR__0313
04e1c     0F FA 05 F6 | 	mov	result1, #15
04e20     0C 00 90 FD | 	jmp	#LR__0316
04e24                 | LR__0314
04e24     10 FA 05 F6 | 	mov	result1, #16
04e28     04 00 90 FD | 	jmp	#LR__0316
04e2c                 | LR__0315
04e2c     00 FA 05 F6 | 	mov	result1, #0
04e30                 | LR__0316
04e30     A7 F0 03 F6 | 	mov	ptra, fp
04e34     B2 00 A0 FD | 	call	#popregs_
04e38                 | _isseparator_ret
04e38     2D 00 64 FD | 	ret
04e3c                 | 
04e3c                 | ' 
04e3c                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04e3c                 | ' 
04e3c                 | ' function iscommand(s as string) as ubyte
04e3c                 | _iscommand
04e3c     01 4A 05 F6 | 	mov	COUNT_, #1
04e40     A8 00 A0 FD | 	call	#pushregs_
04e44                 | ' 
04e44                 | ' select case s
04e44     09 27 02 F6 | 	mov	local01, arg01
04e48     B6 01 00 FF 
04e4c     B8 14 06 F6 | 	mov	arg02, ##@LR__5580
04e50     13 13 02 F6 | 	mov	arg01, local01
04e54     40 21 B2 FD | 	call	#__system___string_cmp
04e58     00 FA 0D F2 | 	cmp	result1, #0 wz
04e5c     94 0C 90 AD |  if_e	jmp	#LR__0320
04e60     B6 01 00 FF 
04e64     BD 14 06 F6 | 	mov	arg02, ##@LR__5581
04e68     13 13 02 F6 | 	mov	arg01, local01
04e6c     28 21 B2 FD | 	call	#__system___string_cmp
04e70     00 FA 0D F2 | 	cmp	result1, #0 wz
04e74     84 0C 90 AD |  if_e	jmp	#LR__0321
04e78     B6 01 00 FF 
04e7c     C0 14 06 F6 | 	mov	arg02, ##@LR__5582
04e80     13 13 02 F6 | 	mov	arg01, local01
04e84     10 21 B2 FD | 	call	#__system___string_cmp
04e88     00 FA 0D F2 | 	cmp	result1, #0 wz
04e8c     74 0C 90 AD |  if_e	jmp	#LR__0322
04e90     B6 01 00 FF 
04e94     C5 14 06 F6 | 	mov	arg02, ##@LR__5583
04e98     13 13 02 F6 | 	mov	arg01, local01
04e9c     F8 20 B2 FD | 	call	#__system___string_cmp
04ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ea4     64 0C 90 AD |  if_e	jmp	#LR__0323
04ea8     B6 01 00 FF 
04eac     C9 14 06 F6 | 	mov	arg02, ##@LR__5584
04eb0     13 13 02 F6 | 	mov	arg01, local01
04eb4     E0 20 B2 FD | 	call	#__system___string_cmp
04eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ebc     54 0C 90 AD |  if_e	jmp	#LR__0324
04ec0     B6 01 00 FF 
04ec4     CE 14 06 F6 | 	mov	arg02, ##@LR__5585
04ec8     13 13 02 F6 | 	mov	arg01, local01
04ecc     C8 20 B2 FD | 	call	#__system___string_cmp
04ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed4     44 0C 90 AD |  if_e	jmp	#LR__0325
04ed8     B6 01 00 FF 
04edc     D2 14 06 F6 | 	mov	arg02, ##@LR__5586
04ee0     13 13 02 F6 | 	mov	arg01, local01
04ee4     B0 20 B2 FD | 	call	#__system___string_cmp
04ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
04eec     34 0C 90 AD |  if_e	jmp	#LR__0326
04ef0     B6 01 00 FF 
04ef4     D5 14 06 F6 | 	mov	arg02, ##@LR__5587
04ef8     13 13 02 F6 | 	mov	arg01, local01
04efc     98 20 B2 FD | 	call	#__system___string_cmp
04f00     00 FA 0D F2 | 	cmp	result1, #0 wz
04f04     24 0C 90 AD |  if_e	jmp	#LR__0327
04f08     B6 01 00 FF 
04f0c     E0 14 06 F6 | 	mov	arg02, ##@LR__5588
04f10     13 13 02 F6 | 	mov	arg01, local01
04f14     80 20 B2 FD | 	call	#__system___string_cmp
04f18     00 FA 0D F2 | 	cmp	result1, #0 wz
04f1c     14 0C 90 AD |  if_e	jmp	#LR__0328
04f20     B6 01 00 FF 
04f24     E4 14 06 F6 | 	mov	arg02, ##@LR__5589
04f28     13 13 02 F6 | 	mov	arg01, local01
04f2c     68 20 B2 FD | 	call	#__system___string_cmp
04f30     00 FA 0D F2 | 	cmp	result1, #0 wz
04f34     04 0C 90 AD |  if_e	jmp	#LR__0329
04f38     B6 01 00 FF 
04f3c     EE 14 06 F6 | 	mov	arg02, ##@LR__5590
04f40     13 13 02 F6 | 	mov	arg01, local01
04f44     50 20 B2 FD | 	call	#__system___string_cmp
04f48     00 FA 0D F2 | 	cmp	result1, #0 wz
04f4c     F4 0B 90 AD |  if_e	jmp	#LR__0330
04f50     B6 01 00 FF 
04f54     F2 14 06 F6 | 	mov	arg02, ##@LR__5591
04f58     13 13 02 F6 | 	mov	arg01, local01
04f5c     38 20 B2 FD | 	call	#__system___string_cmp
04f60     00 FA 0D F2 | 	cmp	result1, #0 wz
04f64     E4 0B 90 AD |  if_e	jmp	#LR__0331
04f68     B6 01 00 FF 
04f6c     FC 14 06 F6 | 	mov	arg02, ##@LR__5592
04f70     13 13 02 F6 | 	mov	arg01, local01
04f74     20 20 B2 FD | 	call	#__system___string_cmp
04f78     00 FA 0D F2 | 	cmp	result1, #0 wz
04f7c     D4 0B 90 AD |  if_e	jmp	#LR__0332
04f80     B6 01 00 FF 
04f84     00 15 06 F6 | 	mov	arg02, ##@LR__5593
04f88     13 13 02 F6 | 	mov	arg01, local01
04f8c     08 20 B2 FD | 	call	#__system___string_cmp
04f90     00 FA 0D F2 | 	cmp	result1, #0 wz
04f94     C4 0B 90 AD |  if_e	jmp	#LR__0333
04f98     B6 01 00 FF 
04f9c     0B 15 06 F6 | 	mov	arg02, ##@LR__5594
04fa0     13 13 02 F6 | 	mov	arg01, local01
04fa4     F0 1F B2 FD | 	call	#__system___string_cmp
04fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fac     B4 0B 90 AD |  if_e	jmp	#LR__0334
04fb0     B6 01 00 FF 
04fb4     0F 15 06 F6 | 	mov	arg02, ##@LR__5595
04fb8     13 13 02 F6 | 	mov	arg01, local01
04fbc     D8 1F B2 FD | 	call	#__system___string_cmp
04fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc4     A4 0B 90 AD |  if_e	jmp	#LR__0335
04fc8     B6 01 00 FF 
04fcc     16 15 06 F6 | 	mov	arg02, ##@LR__5596
04fd0     13 13 02 F6 | 	mov	arg01, local01
04fd4     C0 1F B2 FD | 	call	#__system___string_cmp
04fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fdc     94 0B 90 AD |  if_e	jmp	#LR__0336
04fe0     B6 01 00 FF 
04fe4     1A 15 06 F6 | 	mov	arg02, ##@LR__5597
04fe8     13 13 02 F6 | 	mov	arg01, local01
04fec     A8 1F B2 FD | 	call	#__system___string_cmp
04ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff4     84 0B 90 AD |  if_e	jmp	#LR__0337
04ff8     B6 01 00 FF 
04ffc     20 15 06 F6 | 	mov	arg02, ##@LR__5598
05000     13 13 02 F6 | 	mov	arg01, local01
05004     90 1F B2 FD | 	call	#__system___string_cmp
05008     00 FA 0D F2 | 	cmp	result1, #0 wz
0500c     74 0B 90 AD |  if_e	jmp	#LR__0338
05010     B6 01 00 FF 
05014     26 15 06 F6 | 	mov	arg02, ##@LR__5599
05018     13 13 02 F6 | 	mov	arg01, local01
0501c     78 1F B2 FD | 	call	#__system___string_cmp
05020     00 FA 0D F2 | 	cmp	result1, #0 wz
05024     64 0B 90 AD |  if_e	jmp	#LR__0339
05028     B6 01 00 FF 
0502c     2A 15 06 F6 | 	mov	arg02, ##@LR__5600
05030     13 13 02 F6 | 	mov	arg01, local01
05034     60 1F B2 FD | 	call	#__system___string_cmp
05038     00 FA 0D F2 | 	cmp	result1, #0 wz
0503c     54 0B 90 AD |  if_e	jmp	#LR__0340
05040     B6 01 00 FF 
05044     32 15 06 F6 | 	mov	arg02, ##@LR__5601
05048     13 13 02 F6 | 	mov	arg01, local01
0504c     48 1F B2 FD | 	call	#__system___string_cmp
05050     00 FA 0D F2 | 	cmp	result1, #0 wz
05054     44 0B 90 AD |  if_e	jmp	#LR__0341
05058     B6 01 00 FF 
0505c     38 15 06 F6 | 	mov	arg02, ##@LR__5602
05060     13 13 02 F6 | 	mov	arg01, local01
05064     30 1F B2 FD | 	call	#__system___string_cmp
05068     00 FA 0D F2 | 	cmp	result1, #0 wz
0506c     34 0B 90 AD |  if_e	jmp	#LR__0342
05070     B6 01 00 FF 
05074     3B 15 06 F6 | 	mov	arg02, ##@LR__5603
05078     13 13 02 F6 | 	mov	arg01, local01
0507c     18 1F B2 FD | 	call	#__system___string_cmp
05080     00 FA 0D F2 | 	cmp	result1, #0 wz
05084     24 0B 90 AD |  if_e	jmp	#LR__0343
05088     B6 01 00 FF 
0508c     40 15 06 F6 | 	mov	arg02, ##@LR__5604
05090     13 13 02 F6 | 	mov	arg01, local01
05094     00 1F B2 FD | 	call	#__system___string_cmp
05098     00 FA 0D F2 | 	cmp	result1, #0 wz
0509c     14 0B 90 AD |  if_e	jmp	#LR__0344
050a0     B6 01 00 FF 
050a4     47 15 06 F6 | 	mov	arg02, ##@LR__5605
050a8     13 13 02 F6 | 	mov	arg01, local01
050ac     E8 1E B2 FD | 	call	#__system___string_cmp
050b0     00 FA 0D F2 | 	cmp	result1, #0 wz
050b4     04 0B 90 AD |  if_e	jmp	#LR__0345
050b8     B6 01 00 FF 
050bc     4C 15 06 F6 | 	mov	arg02, ##@LR__5606
050c0     13 13 02 F6 | 	mov	arg01, local01
050c4     D0 1E B2 FD | 	call	#__system___string_cmp
050c8     00 FA 0D F2 | 	cmp	result1, #0 wz
050cc     F4 0A 90 AD |  if_e	jmp	#LR__0346
050d0     B6 01 00 FF 
050d4     53 15 06 F6 | 	mov	arg02, ##@LR__5607
050d8     13 13 02 F6 | 	mov	arg01, local01
050dc     B8 1E B2 FD | 	call	#__system___string_cmp
050e0     00 FA 0D F2 | 	cmp	result1, #0 wz
050e4     E4 0A 90 AD |  if_e	jmp	#LR__0347
050e8     B6 01 00 FF 
050ec     5A 15 06 F6 | 	mov	arg02, ##@LR__5608
050f0     13 13 02 F6 | 	mov	arg01, local01
050f4     A0 1E B2 FD | 	call	#__system___string_cmp
050f8     00 FA 0D F2 | 	cmp	result1, #0 wz
050fc     D4 0A 90 AD |  if_e	jmp	#LR__0348
05100     B6 01 00 FF 
05104     64 15 06 F6 | 	mov	arg02, ##@LR__5609
05108     13 13 02 F6 | 	mov	arg01, local01
0510c     88 1E B2 FD | 	call	#__system___string_cmp
05110     00 FA 0D F2 | 	cmp	result1, #0 wz
05114     C4 0A 90 AD |  if_e	jmp	#LR__0349
05118     B6 01 00 FF 
0511c     68 15 06 F6 | 	mov	arg02, ##@LR__5610
05120     13 13 02 F6 | 	mov	arg01, local01
05124     70 1E B2 FD | 	call	#__system___string_cmp
05128     00 FA 0D F2 | 	cmp	result1, #0 wz
0512c     B4 0A 90 AD |  if_e	jmp	#LR__0350
05130     B6 01 00 FF 
05134     6C 15 06 F6 | 	mov	arg02, ##@LR__5611
05138     13 13 02 F6 | 	mov	arg01, local01
0513c     58 1E B2 FD | 	call	#__system___string_cmp
05140     00 FA 0D F2 | 	cmp	result1, #0 wz
05144     A4 0A 90 AD |  if_e	jmp	#LR__0351
05148     B6 01 00 FF 
0514c     73 15 06 F6 | 	mov	arg02, ##@LR__5612
05150     13 13 02 F6 | 	mov	arg01, local01
05154     40 1E B2 FD | 	call	#__system___string_cmp
05158     00 FA 0D F2 | 	cmp	result1, #0 wz
0515c     94 0A 90 AD |  if_e	jmp	#LR__0352
05160     B6 01 00 FF 
05164     77 15 06 F6 | 	mov	arg02, ##@LR__5613
05168     13 13 02 F6 | 	mov	arg01, local01
0516c     28 1E B2 FD | 	call	#__system___string_cmp
05170     00 FA 0D F2 | 	cmp	result1, #0 wz
05174     84 0A 90 AD |  if_e	jmp	#LR__0353
05178     B6 01 00 FF 
0517c     7B 15 06 F6 | 	mov	arg02, ##@LR__5614
05180     13 13 02 F6 | 	mov	arg01, local01
05184     10 1E B2 FD | 	call	#__system___string_cmp
05188     00 FA 0D F2 | 	cmp	result1, #0 wz
0518c     74 0A 90 AD |  if_e	jmp	#LR__0354
05190     B6 01 00 FF 
05194     81 15 06 F6 | 	mov	arg02, ##@LR__5615
05198     13 13 02 F6 | 	mov	arg01, local01
0519c     F8 1D B2 FD | 	call	#__system___string_cmp
051a0     00 FA 0D F2 | 	cmp	result1, #0 wz
051a4     64 0A 90 AD |  if_e	jmp	#LR__0355
051a8     B6 01 00 FF 
051ac     86 15 06 F6 | 	mov	arg02, ##@LR__5616
051b0     13 13 02 F6 | 	mov	arg01, local01
051b4     E0 1D B2 FD | 	call	#__system___string_cmp
051b8     00 FA 0D F2 | 	cmp	result1, #0 wz
051bc     54 0A 90 AD |  if_e	jmp	#LR__0356
051c0     B6 01 00 FF 
051c4     8D 15 06 F6 | 	mov	arg02, ##@LR__5617
051c8     13 13 02 F6 | 	mov	arg01, local01
051cc     C8 1D B2 FD | 	call	#__system___string_cmp
051d0     00 FA 0D F2 | 	cmp	result1, #0 wz
051d4     44 0A 90 AD |  if_e	jmp	#LR__0357
051d8     B6 01 00 FF 
051dc     91 15 06 F6 | 	mov	arg02, ##@LR__5618
051e0     13 13 02 F6 | 	mov	arg01, local01
051e4     B0 1D B2 FD | 	call	#__system___string_cmp
051e8     00 FA 0D F2 | 	cmp	result1, #0 wz
051ec     34 0A 90 AD |  if_e	jmp	#LR__0358
051f0     B6 01 00 FF 
051f4     96 15 06 F6 | 	mov	arg02, ##@LR__5619
051f8     13 13 02 F6 | 	mov	arg01, local01
051fc     98 1D B2 FD | 	call	#__system___string_cmp
05200     00 FA 0D F2 | 	cmp	result1, #0 wz
05204     24 0A 90 AD |  if_e	jmp	#LR__0359
05208     B6 01 00 FF 
0520c     9A 15 06 F6 | 	mov	arg02, ##@LR__5620
05210     13 13 02 F6 | 	mov	arg01, local01
05214     80 1D B2 FD | 	call	#__system___string_cmp
05218     00 FA 0D F2 | 	cmp	result1, #0 wz
0521c     14 0A 90 AD |  if_e	jmp	#LR__0360
05220     B6 01 00 FF 
05224     A0 15 06 F6 | 	mov	arg02, ##@LR__5621
05228     13 13 02 F6 | 	mov	arg01, local01
0522c     68 1D B2 FD | 	call	#__system___string_cmp
05230     00 FA 0D F2 | 	cmp	result1, #0 wz
05234     04 0A 90 AD |  if_e	jmp	#LR__0361
05238     B6 01 00 FF 
0523c     A3 15 06 F6 | 	mov	arg02, ##@LR__5622
05240     13 13 02 F6 | 	mov	arg01, local01
05244     50 1D B2 FD | 	call	#__system___string_cmp
05248     00 FA 0D F2 | 	cmp	result1, #0 wz
0524c     F4 09 90 AD |  if_e	jmp	#LR__0362
05250     B6 01 00 FF 
05254     AB 15 06 F6 | 	mov	arg02, ##@LR__5623
05258     13 13 02 F6 | 	mov	arg01, local01
0525c     38 1D B2 FD | 	call	#__system___string_cmp
05260     00 FA 0D F2 | 	cmp	result1, #0 wz
05264     E4 09 90 AD |  if_e	jmp	#LR__0363
05268     B6 01 00 FF 
0526c     AF 15 06 F6 | 	mov	arg02, ##@LR__5624
05270     13 13 02 F6 | 	mov	arg01, local01
05274     20 1D B2 FD | 	call	#__system___string_cmp
05278     00 FA 0D F2 | 	cmp	result1, #0 wz
0527c     D4 09 90 AD |  if_e	jmp	#LR__0364
05280     B6 01 00 FF 
05284     B4 15 06 F6 | 	mov	arg02, ##@LR__5625
05288     13 13 02 F6 | 	mov	arg01, local01
0528c     08 1D B2 FD | 	call	#__system___string_cmp
05290     00 FA 0D F2 | 	cmp	result1, #0 wz
05294     C4 09 90 AD |  if_e	jmp	#LR__0365
05298     B6 01 00 FF 
0529c     B8 15 06 F6 | 	mov	arg02, ##@LR__5626
052a0     13 13 02 F6 | 	mov	arg01, local01
052a4     F0 1C B2 FD | 	call	#__system___string_cmp
052a8     00 FA 0D F2 | 	cmp	result1, #0 wz
052ac     B4 09 90 AD |  if_e	jmp	#LR__0366
052b0     B6 01 00 FF 
052b4     BD 15 06 F6 | 	mov	arg02, ##@LR__5627
052b8     13 13 02 F6 | 	mov	arg01, local01
052bc     D8 1C B2 FD | 	call	#__system___string_cmp
052c0     00 FA 0D F2 | 	cmp	result1, #0 wz
052c4     A4 09 90 AD |  if_e	jmp	#LR__0367
052c8     B6 01 00 FF 
052cc     C1 15 06 F6 | 	mov	arg02, ##@LR__5628
052d0     13 13 02 F6 | 	mov	arg01, local01
052d4     C0 1C B2 FD | 	call	#__system___string_cmp
052d8     00 FA 0D F2 | 	cmp	result1, #0 wz
052dc     94 09 90 AD |  if_e	jmp	#LR__0368
052e0     B6 01 00 FF 
052e4     C4 15 06 F6 | 	mov	arg02, ##@LR__5629
052e8     13 13 02 F6 | 	mov	arg01, local01
052ec     A8 1C B2 FD | 	call	#__system___string_cmp
052f0     00 FA 0D F2 | 	cmp	result1, #0 wz
052f4     84 09 90 AD |  if_e	jmp	#LR__0369
052f8     B6 01 00 FF 
052fc     CA 15 06 F6 | 	mov	arg02, ##@LR__5630
05300     13 13 02 F6 | 	mov	arg01, local01
05304     90 1C B2 FD | 	call	#__system___string_cmp
05308     00 FA 0D F2 | 	cmp	result1, #0 wz
0530c     74 09 90 AD |  if_e	jmp	#LR__0370
05310     B6 01 00 FF 
05314     CE 15 06 F6 | 	mov	arg02, ##@LR__5631
05318     13 13 02 F6 | 	mov	arg01, local01
0531c     78 1C B2 FD | 	call	#__system___string_cmp
05320     00 FA 0D F2 | 	cmp	result1, #0 wz
05324     64 09 90 AD |  if_e	jmp	#LR__0371
05328     B6 01 00 FF 
0532c     D2 15 06 F6 | 	mov	arg02, ##@LR__5632
05330     13 13 02 F6 | 	mov	arg01, local01
05334     60 1C B2 FD | 	call	#__system___string_cmp
05338     00 FA 0D F2 | 	cmp	result1, #0 wz
0533c     54 09 90 AD |  if_e	jmp	#LR__0372
05340     B6 01 00 FF 
05344     D8 15 06 F6 | 	mov	arg02, ##@LR__5633
05348     13 13 02 F6 | 	mov	arg01, local01
0534c     48 1C B2 FD | 	call	#__system___string_cmp
05350     00 FA 0D F2 | 	cmp	result1, #0 wz
05354     44 09 90 AD |  if_e	jmp	#LR__0373
05358     B6 01 00 FF 
0535c     DD 15 06 F6 | 	mov	arg02, ##@LR__5634
05360     13 13 02 F6 | 	mov	arg01, local01
05364     30 1C B2 FD | 	call	#__system___string_cmp
05368     00 FA 0D F2 | 	cmp	result1, #0 wz
0536c     34 09 90 AD |  if_e	jmp	#LR__0374
05370     B6 01 00 FF 
05374     E0 15 06 F6 | 	mov	arg02, ##@LR__5635
05378     13 13 02 F6 | 	mov	arg01, local01
0537c     18 1C B2 FD | 	call	#__system___string_cmp
05380     00 FA 0D F2 | 	cmp	result1, #0 wz
05384     24 09 90 AD |  if_e	jmp	#LR__0375
05388     B6 01 00 FF 
0538c     E3 15 06 F6 | 	mov	arg02, ##@LR__5636
05390     13 13 02 F6 | 	mov	arg01, local01
05394     00 1C B2 FD | 	call	#__system___string_cmp
05398     00 FA 0D F2 | 	cmp	result1, #0 wz
0539c     14 09 90 AD |  if_e	jmp	#LR__0376
053a0     B6 01 00 FF 
053a4     E7 15 06 F6 | 	mov	arg02, ##@LR__5637
053a8     13 13 02 F6 | 	mov	arg01, local01
053ac     E8 1B B2 FD | 	call	#__system___string_cmp
053b0     00 FA 0D F2 | 	cmp	result1, #0 wz
053b4     04 09 90 AD |  if_e	jmp	#LR__0377
053b8     B6 01 00 FF 
053bc     EA 15 06 F6 | 	mov	arg02, ##@LR__5638
053c0     13 13 02 F6 | 	mov	arg01, local01
053c4     D0 1B B2 FD | 	call	#__system___string_cmp
053c8     00 FA 0D F2 | 	cmp	result1, #0 wz
053cc     F4 08 90 AD |  if_e	jmp	#LR__0378
053d0     B6 01 00 FF 
053d4     F0 15 06 F6 | 	mov	arg02, ##@LR__5639
053d8     13 13 02 F6 | 	mov	arg01, local01
053dc     B8 1B B2 FD | 	call	#__system___string_cmp
053e0     00 FA 0D F2 | 	cmp	result1, #0 wz
053e4     E4 08 90 AD |  if_e	jmp	#LR__0379
053e8     B6 01 00 FF 
053ec     F5 15 06 F6 | 	mov	arg02, ##@LR__5640
053f0     13 13 02 F6 | 	mov	arg01, local01
053f4     A0 1B B2 FD | 	call	#__system___string_cmp
053f8     00 FA 0D F2 | 	cmp	result1, #0 wz
053fc     D4 08 90 AD |  if_e	jmp	#LR__0380
05400     B6 01 00 FF 
05404     F8 15 06 F6 | 	mov	arg02, ##@LR__5641
05408     13 13 02 F6 | 	mov	arg01, local01
0540c     88 1B B2 FD | 	call	#__system___string_cmp
05410     00 FA 0D F2 | 	cmp	result1, #0 wz
05414     C4 08 90 AD |  if_e	jmp	#LR__0381
05418     B6 01 00 FF 
0541c     FD 15 06 F6 | 	mov	arg02, ##@LR__5642
05420     13 13 02 F6 | 	mov	arg01, local01
05424     70 1B B2 FD | 	call	#__system___string_cmp
05428     00 FA 0D F2 | 	cmp	result1, #0 wz
0542c     B4 08 90 AD |  if_e	jmp	#LR__0382
05430     B7 01 00 FF 
05434     01 14 06 F6 | 	mov	arg02, ##@LR__5643
05438     13 13 02 F6 | 	mov	arg01, local01
0543c     58 1B B2 FD | 	call	#__system___string_cmp
05440     00 FA 0D F2 | 	cmp	result1, #0 wz
05444     A4 08 90 AD |  if_e	jmp	#LR__0383
05448     B7 01 00 FF 
0544c     07 14 06 F6 | 	mov	arg02, ##@LR__5644
05450     13 13 02 F6 | 	mov	arg01, local01
05454     40 1B B2 FD | 	call	#__system___string_cmp
05458     00 FA 0D F2 | 	cmp	result1, #0 wz
0545c     94 08 90 AD |  if_e	jmp	#LR__0384
05460     B7 01 00 FF 
05464     0D 14 06 F6 | 	mov	arg02, ##@LR__5645
05468     13 13 02 F6 | 	mov	arg01, local01
0546c     28 1B B2 FD | 	call	#__system___string_cmp
05470     00 FA 0D F2 | 	cmp	result1, #0 wz
05474     84 08 90 AD |  if_e	jmp	#LR__0385
05478     B7 01 00 FF 
0547c     12 14 06 F6 | 	mov	arg02, ##@LR__5646
05480     13 13 02 F6 | 	mov	arg01, local01
05484     10 1B B2 FD | 	call	#__system___string_cmp
05488     00 FA 0D F2 | 	cmp	result1, #0 wz
0548c     74 08 90 AD |  if_e	jmp	#LR__0386
05490     B7 01 00 FF 
05494     15 14 06 F6 | 	mov	arg02, ##@LR__5647
05498     13 13 02 F6 | 	mov	arg01, local01
0549c     F8 1A B2 FD | 	call	#__system___string_cmp
054a0     00 FA 0D F2 | 	cmp	result1, #0 wz
054a4     64 08 90 AD |  if_e	jmp	#LR__0387
054a8     B7 01 00 FF 
054ac     1B 14 06 F6 | 	mov	arg02, ##@LR__5648
054b0     13 13 02 F6 | 	mov	arg01, local01
054b4     E0 1A B2 FD | 	call	#__system___string_cmp
054b8     00 FA 0D F2 | 	cmp	result1, #0 wz
054bc     54 08 90 AD |  if_e	jmp	#LR__0388
054c0     B7 01 00 FF 
054c4     1F 14 06 F6 | 	mov	arg02, ##@LR__5649
054c8     13 13 02 F6 | 	mov	arg01, local01
054cc     C8 1A B2 FD | 	call	#__system___string_cmp
054d0     00 FA 0D F2 | 	cmp	result1, #0 wz
054d4     44 08 90 AD |  if_e	jmp	#LR__0389
054d8     B7 01 00 FF 
054dc     24 14 06 F6 | 	mov	arg02, ##@LR__5650
054e0     13 13 02 F6 | 	mov	arg01, local01
054e4     B0 1A B2 FD | 	call	#__system___string_cmp
054e8     00 FA 0D F2 | 	cmp	result1, #0 wz
054ec     34 08 90 AD |  if_e	jmp	#LR__0390
054f0     B7 01 00 FF 
054f4     27 14 06 F6 | 	mov	arg02, ##@LR__5651
054f8     13 13 02 F6 | 	mov	arg01, local01
054fc     98 1A B2 FD | 	call	#__system___string_cmp
05500     00 FA 0D F2 | 	cmp	result1, #0 wz
05504     24 08 90 AD |  if_e	jmp	#LR__0391
05508     B7 01 00 FF 
0550c     2A 14 06 F6 | 	mov	arg02, ##@LR__5652
05510     13 13 02 F6 | 	mov	arg01, local01
05514     80 1A B2 FD | 	call	#__system___string_cmp
05518     00 FA 0D F2 | 	cmp	result1, #0 wz
0551c     14 08 90 AD |  if_e	jmp	#LR__0392
05520     B7 01 00 FF 
05524     2F 14 06 F6 | 	mov	arg02, ##@LR__5653
05528     13 13 02 F6 | 	mov	arg01, local01
0552c     68 1A B2 FD | 	call	#__system___string_cmp
05530     00 FA 0D F2 | 	cmp	result1, #0 wz
05534     04 08 90 AD |  if_e	jmp	#LR__0393
05538     B7 01 00 FF 
0553c     35 14 06 F6 | 	mov	arg02, ##@LR__5654
05540     13 13 02 F6 | 	mov	arg01, local01
05544     50 1A B2 FD | 	call	#__system___string_cmp
05548     00 FA 0D F2 | 	cmp	result1, #0 wz
0554c     F4 07 90 AD |  if_e	jmp	#LR__0394
05550     B7 01 00 FF 
05554     39 14 06 F6 | 	mov	arg02, ##@LR__5655
05558     13 13 02 F6 | 	mov	arg01, local01
0555c     38 1A B2 FD | 	call	#__system___string_cmp
05560     00 FA 0D F2 | 	cmp	result1, #0 wz
05564     E4 07 90 AD |  if_e	jmp	#LR__0395
05568     B7 01 00 FF 
0556c     42 14 06 F6 | 	mov	arg02, ##@LR__5656
05570     13 13 02 F6 | 	mov	arg01, local01
05574     20 1A B2 FD | 	call	#__system___string_cmp
05578     00 FA 0D F2 | 	cmp	result1, #0 wz
0557c     D4 07 90 AD |  if_e	jmp	#LR__0396
05580     B7 01 00 FF 
05584     48 14 06 F6 | 	mov	arg02, ##@LR__5657
05588     13 13 02 F6 | 	mov	arg01, local01
0558c     08 1A B2 FD | 	call	#__system___string_cmp
05590     00 FA 0D F2 | 	cmp	result1, #0 wz
05594     C4 07 90 AD |  if_e	jmp	#LR__0397
05598     B7 01 00 FF 
0559c     4E 14 06 F6 | 	mov	arg02, ##@LR__5658
055a0     13 13 02 F6 | 	mov	arg01, local01
055a4     F0 19 B2 FD | 	call	#__system___string_cmp
055a8     00 FA 0D F2 | 	cmp	result1, #0 wz
055ac     B4 07 90 AD |  if_e	jmp	#LR__0398
055b0     B7 01 00 FF 
055b4     57 14 06 F6 | 	mov	arg02, ##@LR__5659
055b8     13 13 02 F6 | 	mov	arg01, local01
055bc     D8 19 B2 FD | 	call	#__system___string_cmp
055c0     00 FA 0D F2 | 	cmp	result1, #0 wz
055c4     A4 07 90 AD |  if_e	jmp	#LR__0399
055c8     B7 01 00 FF 
055cc     61 14 06 F6 | 	mov	arg02, ##@LR__5660
055d0     13 13 02 F6 | 	mov	arg01, local01
055d4     C0 19 B2 FD | 	call	#__system___string_cmp
055d8     00 FA 0D F2 | 	cmp	result1, #0 wz
055dc     94 07 90 AD |  if_e	jmp	#LR__0400
055e0     B7 01 00 FF 
055e4     6A 14 06 F6 | 	mov	arg02, ##@LR__5661
055e8     13 13 02 F6 | 	mov	arg01, local01
055ec     A8 19 B2 FD | 	call	#__system___string_cmp
055f0     00 FA 0D F2 | 	cmp	result1, #0 wz
055f4     84 07 90 AD |  if_e	jmp	#LR__0401
055f8     B7 01 00 FF 
055fc     6F 14 06 F6 | 	mov	arg02, ##@LR__5662
05600     13 13 02 F6 | 	mov	arg01, local01
05604     90 19 B2 FD | 	call	#__system___string_cmp
05608     00 FA 0D F2 | 	cmp	result1, #0 wz
0560c     74 07 90 AD |  if_e	jmp	#LR__0402
05610     B7 01 00 FF 
05614     72 14 06 F6 | 	mov	arg02, ##@LR__5663
05618     13 13 02 F6 | 	mov	arg01, local01
0561c     78 19 B2 FD | 	call	#__system___string_cmp
05620     00 FA 0D F2 | 	cmp	result1, #0 wz
05624     64 07 90 AD |  if_e	jmp	#LR__0403
05628     B7 01 00 FF 
0562c     77 14 06 F6 | 	mov	arg02, ##@LR__5664
05630     13 13 02 F6 | 	mov	arg01, local01
05634     60 19 B2 FD | 	call	#__system___string_cmp
05638     00 FA 0D F2 | 	cmp	result1, #0 wz
0563c     54 07 90 AD |  if_e	jmp	#LR__0404
05640     B7 01 00 FF 
05644     7B 14 06 F6 | 	mov	arg02, ##@LR__5665
05648     13 13 02 F6 | 	mov	arg01, local01
0564c     48 19 B2 FD | 	call	#__system___string_cmp
05650     00 FA 0D F2 | 	cmp	result1, #0 wz
05654     44 07 90 AD |  if_e	jmp	#LR__0405
05658     B7 01 00 FF 
0565c     80 14 06 F6 | 	mov	arg02, ##@LR__5666
05660     13 13 02 F6 | 	mov	arg01, local01
05664     30 19 B2 FD | 	call	#__system___string_cmp
05668     00 FA 0D F2 | 	cmp	result1, #0 wz
0566c     34 07 90 AD |  if_e	jmp	#LR__0406
05670     B7 01 00 FF 
05674     84 14 06 F6 | 	mov	arg02, ##@LR__5667
05678     13 13 02 F6 | 	mov	arg01, local01
0567c     18 19 B2 FD | 	call	#__system___string_cmp
05680     00 FA 0D F2 | 	cmp	result1, #0 wz
05684     24 07 90 AD |  if_e	jmp	#LR__0407
05688     B7 01 00 FF 
0568c     8D 14 06 F6 | 	mov	arg02, ##@LR__5668
05690     13 13 02 F6 | 	mov	arg01, local01
05694     00 19 B2 FD | 	call	#__system___string_cmp
05698     00 FA 0D F2 | 	cmp	result1, #0 wz
0569c     14 07 90 AD |  if_e	jmp	#LR__0408
056a0     B7 01 00 FF 
056a4     92 14 06 F6 | 	mov	arg02, ##@LR__5669
056a8     13 13 02 F6 | 	mov	arg01, local01
056ac     E8 18 B2 FD | 	call	#__system___string_cmp
056b0     00 FA 0D F2 | 	cmp	result1, #0 wz
056b4     04 07 90 AD |  if_e	jmp	#LR__0409
056b8     B7 01 00 FF 
056bc     98 14 06 F6 | 	mov	arg02, ##@LR__5670
056c0     13 13 02 F6 | 	mov	arg01, local01
056c4     D0 18 B2 FD | 	call	#__system___string_cmp
056c8     00 FA 0D F2 | 	cmp	result1, #0 wz
056cc     F4 06 90 AD |  if_e	jmp	#LR__0410
056d0     B7 01 00 FF 
056d4     9A 14 06 F6 | 	mov	arg02, ##@LR__5671
056d8     13 13 02 F6 | 	mov	arg01, local01
056dc     B8 18 B2 FD | 	call	#__system___string_cmp
056e0     00 FA 0D F2 | 	cmp	result1, #0 wz
056e4     E4 06 90 AD |  if_e	jmp	#LR__0411
056e8     B7 01 00 FF 
056ec     9E 14 06 F6 | 	mov	arg02, ##@LR__5672
056f0     13 13 02 F6 | 	mov	arg01, local01
056f4     A0 18 B2 FD | 	call	#__system___string_cmp
056f8     00 FA 0D F2 | 	cmp	result1, #0 wz
056fc     D4 06 90 AD |  if_e	jmp	#LR__0412
05700     B7 01 00 FF 
05704     A2 14 06 F6 | 	mov	arg02, ##@LR__5673
05708     13 13 02 F6 | 	mov	arg01, local01
0570c     88 18 B2 FD | 	call	#__system___string_cmp
05710     00 FA 0D F2 | 	cmp	result1, #0 wz
05714     C4 06 90 AD |  if_e	jmp	#LR__0413
05718     B7 01 00 FF 
0571c     A7 14 06 F6 | 	mov	arg02, ##@LR__5674
05720     13 13 02 F6 | 	mov	arg01, local01
05724     70 18 B2 FD | 	call	#__system___string_cmp
05728     00 FA 0D F2 | 	cmp	result1, #0 wz
0572c     B4 06 90 AD |  if_e	jmp	#LR__0414
05730     B7 01 00 FF 
05734     AF 14 06 F6 | 	mov	arg02, ##@LR__5675
05738     13 13 02 F6 | 	mov	arg01, local01
0573c     58 18 B2 FD | 	call	#__system___string_cmp
05740     00 FA 0D F2 | 	cmp	result1, #0 wz
05744     A4 06 90 AD |  if_e	jmp	#LR__0415
05748     B7 01 00 FF 
0574c     B3 14 06 F6 | 	mov	arg02, ##@LR__5676
05750     13 13 02 F6 | 	mov	arg01, local01
05754     40 18 B2 FD | 	call	#__system___string_cmp
05758     00 FA 0D F2 | 	cmp	result1, #0 wz
0575c     94 06 90 AD |  if_e	jmp	#LR__0416
05760     B7 01 00 FF 
05764     B5 14 06 F6 | 	mov	arg02, ##@LR__5677
05768     13 13 02 F6 | 	mov	arg01, local01
0576c     28 18 B2 FD | 	call	#__system___string_cmp
05770     00 FA 0D F2 | 	cmp	result1, #0 wz
05774     84 06 90 AD |  if_e	jmp	#LR__0417
05778     B7 01 00 FF 
0577c     BD 14 06 F6 | 	mov	arg02, ##@LR__5678
05780     13 13 02 F6 | 	mov	arg01, local01
05784     10 18 B2 FD | 	call	#__system___string_cmp
05788     00 FA 0D F2 | 	cmp	result1, #0 wz
0578c     74 06 90 AD |  if_e	jmp	#LR__0418
05790     B7 01 00 FF 
05794     C4 14 06 F6 | 	mov	arg02, ##@LR__5679
05798     13 13 02 F6 | 	mov	arg01, local01
0579c     F8 17 B2 FD | 	call	#__system___string_cmp
057a0     00 FA 0D F2 | 	cmp	result1, #0 wz
057a4     64 06 90 AD |  if_e	jmp	#LR__0419
057a8     B7 01 00 FF 
057ac     C8 14 06 F6 | 	mov	arg02, ##@LR__5680
057b0     13 13 02 F6 | 	mov	arg01, local01
057b4     E0 17 B2 FD | 	call	#__system___string_cmp
057b8     00 FA 0D F2 | 	cmp	result1, #0 wz
057bc     54 06 90 AD |  if_e	jmp	#LR__0420
057c0     B7 01 00 FF 
057c4     CD 14 06 F6 | 	mov	arg02, ##@LR__5681
057c8     13 13 02 F6 | 	mov	arg01, local01
057cc     C8 17 B2 FD | 	call	#__system___string_cmp
057d0     00 FA 0D F2 | 	cmp	result1, #0 wz
057d4     44 06 90 AD |  if_e	jmp	#LR__0421
057d8     B7 01 00 FF 
057dc     D0 14 06 F6 | 	mov	arg02, ##@LR__5682
057e0     13 13 02 F6 | 	mov	arg01, local01
057e4     B0 17 B2 FD | 	call	#__system___string_cmp
057e8     00 FA 0D F2 | 	cmp	result1, #0 wz
057ec     34 06 90 AD |  if_e	jmp	#LR__0422
057f0     B7 01 00 FF 
057f4     D9 14 06 F6 | 	mov	arg02, ##@LR__5683
057f8     13 13 02 F6 | 	mov	arg01, local01
057fc     98 17 B2 FD | 	call	#__system___string_cmp
05800     00 FA 0D F2 | 	cmp	result1, #0 wz
05804     24 06 90 AD |  if_e	jmp	#LR__0423
05808     B7 01 00 FF 
0580c     DD 14 06 F6 | 	mov	arg02, ##@LR__5684
05810     13 13 02 F6 | 	mov	arg01, local01
05814     80 17 B2 FD | 	call	#__system___string_cmp
05818     00 FA 0D F2 | 	cmp	result1, #0 wz
0581c     14 06 90 AD |  if_e	jmp	#LR__0424
05820     B7 01 00 FF 
05824     E6 14 06 F6 | 	mov	arg02, ##@LR__5685
05828     13 13 02 F6 | 	mov	arg01, local01
0582c     68 17 B2 FD | 	call	#__system___string_cmp
05830     00 FA 0D F2 | 	cmp	result1, #0 wz
05834     04 06 90 AD |  if_e	jmp	#LR__0425
05838     B7 01 00 FF 
0583c     EA 14 06 F6 | 	mov	arg02, ##@LR__5686
05840     13 13 02 F6 | 	mov	arg01, local01
05844     50 17 B2 FD | 	call	#__system___string_cmp
05848     00 FA 0D F2 | 	cmp	result1, #0 wz
0584c     F4 05 90 AD |  if_e	jmp	#LR__0426
05850     B7 01 00 FF 
05854     F1 14 06 F6 | 	mov	arg02, ##@LR__5687
05858     13 13 02 F6 | 	mov	arg01, local01
0585c     38 17 B2 FD | 	call	#__system___string_cmp
05860     00 FA 0D F2 | 	cmp	result1, #0 wz
05864     E4 05 90 AD |  if_e	jmp	#LR__0427
05868     B7 01 00 FF 
0586c     F5 14 06 F6 | 	mov	arg02, ##@LR__5688
05870     13 13 02 F6 | 	mov	arg01, local01
05874     20 17 B2 FD | 	call	#__system___string_cmp
05878     00 FA 0D F2 | 	cmp	result1, #0 wz
0587c     D4 05 90 AD |  if_e	jmp	#LR__0428
05880     B7 01 00 FF 
05884     FC 14 06 F6 | 	mov	arg02, ##@LR__5689
05888     13 13 02 F6 | 	mov	arg01, local01
0588c     08 17 B2 FD | 	call	#__system___string_cmp
05890     00 FA 0D F2 | 	cmp	result1, #0 wz
05894     C4 05 90 AD |  if_e	jmp	#LR__0429
05898     B7 01 00 FF 
0589c     00 15 06 F6 | 	mov	arg02, ##@LR__5690
058a0     13 13 02 F6 | 	mov	arg01, local01
058a4     F0 16 B2 FD | 	call	#__system___string_cmp
058a8     00 FA 0D F2 | 	cmp	result1, #0 wz
058ac     B4 05 90 AD |  if_e	jmp	#LR__0430
058b0     B7 01 00 FF 
058b4     07 15 06 F6 | 	mov	arg02, ##@LR__5691
058b8     13 13 02 F6 | 	mov	arg01, local01
058bc     D8 16 B2 FD | 	call	#__system___string_cmp
058c0     00 FA 0D F2 | 	cmp	result1, #0 wz
058c4     A4 05 90 AD |  if_e	jmp	#LR__0431
058c8     B7 01 00 FF 
058cc     0B 15 06 F6 | 	mov	arg02, ##@LR__5692
058d0     13 13 02 F6 | 	mov	arg01, local01
058d4     C0 16 B2 FD | 	call	#__system___string_cmp
058d8     00 FA 0D F2 | 	cmp	result1, #0 wz
058dc     94 05 90 AD |  if_e	jmp	#LR__0432
058e0     B7 01 00 FF 
058e4     16 15 06 F6 | 	mov	arg02, ##@LR__5693
058e8     13 13 02 F6 | 	mov	arg01, local01
058ec     A8 16 B2 FD | 	call	#__system___string_cmp
058f0     00 FA 0D F2 | 	cmp	result1, #0 wz
058f4     84 05 90 AD |  if_e	jmp	#LR__0433
058f8     B7 01 00 FF 
058fc     1A 15 06 F6 | 	mov	arg02, ##@LR__5694
05900     13 13 02 F6 | 	mov	arg01, local01
05904     90 16 B2 FD | 	call	#__system___string_cmp
05908     00 FA 0D F2 | 	cmp	result1, #0 wz
0590c     74 05 90 AD |  if_e	jmp	#LR__0434
05910     B7 01 00 FF 
05914     21 15 06 F6 | 	mov	arg02, ##@LR__5695
05918     13 13 02 F6 | 	mov	arg01, local01
0591c     78 16 B2 FD | 	call	#__system___string_cmp
05920     00 FA 0D F2 | 	cmp	result1, #0 wz
05924     64 05 90 AD |  if_e	jmp	#LR__0435
05928     B7 01 00 FF 
0592c     25 15 06 F6 | 	mov	arg02, ##@LR__5696
05930     13 13 02 F6 | 	mov	arg01, local01
05934     60 16 B2 FD | 	call	#__system___string_cmp
05938     00 FA 0D F2 | 	cmp	result1, #0 wz
0593c     54 05 90 AD |  if_e	jmp	#LR__0436
05940     B7 01 00 FF 
05944     2D 15 06 F6 | 	mov	arg02, ##@LR__5697
05948     13 13 02 F6 | 	mov	arg01, local01
0594c     48 16 B2 FD | 	call	#__system___string_cmp
05950     00 FA 0D F2 | 	cmp	result1, #0 wz
05954     44 05 90 AD |  if_e	jmp	#LR__0437
05958     B7 01 00 FF 
0595c     31 15 06 F6 | 	mov	arg02, ##@LR__5698
05960     13 13 02 F6 | 	mov	arg01, local01
05964     30 16 B2 FD | 	call	#__system___string_cmp
05968     00 FA 0D F2 | 	cmp	result1, #0 wz
0596c     34 05 90 AD |  if_e	jmp	#LR__0438
05970     B7 01 00 FF 
05974     38 15 06 F6 | 	mov	arg02, ##@LR__5699
05978     13 13 02 F6 | 	mov	arg01, local01
0597c     18 16 B2 FD | 	call	#__system___string_cmp
05980     00 FA 0D F2 | 	cmp	result1, #0 wz
05984     24 05 90 AD |  if_e	jmp	#LR__0439
05988     B7 01 00 FF 
0598c     3F 15 06 F6 | 	mov	arg02, ##@LR__5700
05990     13 13 02 F6 | 	mov	arg01, local01
05994     00 16 B2 FD | 	call	#__system___string_cmp
05998     00 FA 0D F2 | 	cmp	result1, #0 wz
0599c     14 05 90 AD |  if_e	jmp	#LR__0440
059a0     B7 01 00 FF 
059a4     43 15 06 F6 | 	mov	arg02, ##@LR__5701
059a8     13 13 02 F6 | 	mov	arg01, local01
059ac     E8 15 B2 FD | 	call	#__system___string_cmp
059b0     00 FA 0D F2 | 	cmp	result1, #0 wz
059b4     04 05 90 AD |  if_e	jmp	#LR__0441
059b8     B7 01 00 FF 
059bc     49 15 06 F6 | 	mov	arg02, ##@LR__5702
059c0     13 13 02 F6 | 	mov	arg01, local01
059c4     D0 15 B2 FD | 	call	#__system___string_cmp
059c8     00 FA 0D F2 | 	cmp	result1, #0 wz
059cc     F4 04 90 AD |  if_e	jmp	#LR__0442
059d0     B7 01 00 FF 
059d4     4D 15 06 F6 | 	mov	arg02, ##@LR__5703
059d8     13 13 02 F6 | 	mov	arg01, local01
059dc     B8 15 B2 FD | 	call	#__system___string_cmp
059e0     00 FA 0D F2 | 	cmp	result1, #0 wz
059e4     E4 04 90 AD |  if_e	jmp	#LR__0443
059e8     B7 01 00 FF 
059ec     54 15 06 F6 | 	mov	arg02, ##@LR__5704
059f0     13 13 02 F6 | 	mov	arg01, local01
059f4     A0 15 B2 FD | 	call	#__system___string_cmp
059f8     00 FA 0D F2 | 	cmp	result1, #0 wz
059fc     D4 04 90 AD |  if_e	jmp	#LR__0444
05a00     B7 01 00 FF 
05a04     59 15 06 F6 | 	mov	arg02, ##@LR__5705
05a08     13 13 02 F6 | 	mov	arg01, local01
05a0c     88 15 B2 FD | 	call	#__system___string_cmp
05a10     00 FA 0D F2 | 	cmp	result1, #0 wz
05a14     C4 04 90 AD |  if_e	jmp	#LR__0445
05a18     B7 01 00 FF 
05a1c     5E 15 06 F6 | 	mov	arg02, ##@LR__5706
05a20     13 13 02 F6 | 	mov	arg01, local01
05a24     70 15 B2 FD | 	call	#__system___string_cmp
05a28     00 FA 0D F2 | 	cmp	result1, #0 wz
05a2c     B4 04 90 AD |  if_e	jmp	#LR__0446
05a30     B7 01 00 FF 
05a34     65 15 06 F6 | 	mov	arg02, ##@LR__5707
05a38     13 13 02 F6 | 	mov	arg01, local01
05a3c     58 15 B2 FD | 	call	#__system___string_cmp
05a40     00 FA 0D F2 | 	cmp	result1, #0 wz
05a44     A4 04 90 AD |  if_e	jmp	#LR__0447
05a48     B7 01 00 FF 
05a4c     68 15 06 F6 | 	mov	arg02, ##@LR__5708
05a50     13 13 02 F6 | 	mov	arg01, local01
05a54     40 15 B2 FD | 	call	#__system___string_cmp
05a58     00 FA 0D F2 | 	cmp	result1, #0 wz
05a5c     94 04 90 AD |  if_e	jmp	#LR__0448
05a60     B7 01 00 FF 
05a64     72 15 06 F6 | 	mov	arg02, ##@LR__5709
05a68     13 13 02 F6 | 	mov	arg01, local01
05a6c     28 15 B2 FD | 	call	#__system___string_cmp
05a70     00 FA 0D F2 | 	cmp	result1, #0 wz
05a74     84 04 90 AD |  if_e	jmp	#LR__0449
05a78     B7 01 00 FF 
05a7c     76 15 06 F6 | 	mov	arg02, ##@LR__5710
05a80     13 13 02 F6 | 	mov	arg01, local01
05a84     10 15 B2 FD | 	call	#__system___string_cmp
05a88     00 FA 0D F2 | 	cmp	result1, #0 wz
05a8c     74 04 90 AD |  if_e	jmp	#LR__0450
05a90     B7 01 00 FF 
05a94     7E 15 06 F6 | 	mov	arg02, ##@LR__5711
05a98     13 13 02 F6 | 	mov	arg01, local01
05a9c     F8 14 B2 FD | 	call	#__system___string_cmp
05aa0     00 FA 0D F2 | 	cmp	result1, #0 wz
05aa4     64 04 90 AD |  if_e	jmp	#LR__0451
05aa8     B7 01 00 FF 
05aac     82 15 06 F6 | 	mov	arg02, ##@LR__5712
05ab0     13 13 02 F6 | 	mov	arg01, local01
05ab4     E0 14 B2 FD | 	call	#__system___string_cmp
05ab8     00 FA 0D F2 | 	cmp	result1, #0 wz
05abc     54 04 90 AD |  if_e	jmp	#LR__0452
05ac0     B7 01 00 FF 
05ac4     88 15 06 F6 | 	mov	arg02, ##@LR__5713
05ac8     13 13 02 F6 | 	mov	arg01, local01
05acc     C8 14 B2 FD | 	call	#__system___string_cmp
05ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ad4     44 04 90 AD |  if_e	jmp	#LR__0453
05ad8     B7 01 00 FF 
05adc     8E 15 06 F6 | 	mov	arg02, ##@LR__5714
05ae0     13 13 02 F6 | 	mov	arg01, local01
05ae4     B0 14 B2 FD | 	call	#__system___string_cmp
05ae8     00 FA 0D F2 | 	cmp	result1, #0 wz
05aec     34 04 90 AD |  if_e	jmp	#LR__0454
05af0     38 04 90 FD | 	jmp	#LR__0455
05af4                 | LR__0320
05af4     5C FA 05 F6 | 	mov	result1, #92
05af8     34 04 90 FD | 	jmp	#LR__0456
05afc                 | LR__0321
05afc     5C FA 05 F6 | 	mov	result1, #92
05b00     2C 04 90 FD | 	jmp	#LR__0456
05b04                 | LR__0322
05b04     B9 FA 05 F6 | 	mov	result1, #185
05b08     24 04 90 FD | 	jmp	#LR__0456
05b0c                 | LR__0323
05b0c     47 FA 05 F6 | 	mov	result1, #71
05b10     1C 04 90 FD | 	jmp	#LR__0456
05b14                 | LR__0324
05b14     59 FA 05 F6 | 	mov	result1, #89
05b18     14 04 90 FD | 	jmp	#LR__0456
05b1c                 | LR__0325
05b1c     59 FA 05 F6 | 	mov	result1, #89
05b20     0C 04 90 FD | 	jmp	#LR__0456
05b24                 | LR__0326
05b24     C3 FA 05 F6 | 	mov	result1, #195
05b28     04 04 90 FD | 	jmp	#LR__0456
05b2c                 | LR__0327
05b2c     AE FA 05 F6 | 	mov	result1, #174
05b30     FC 03 90 FD | 	jmp	#LR__0456
05b34                 | LR__0328
05b34     AE FA 05 F6 | 	mov	result1, #174
05b38     F4 03 90 FD | 	jmp	#LR__0456
05b3c                 | LR__0329
05b3c     B1 FA 05 F6 | 	mov	result1, #177
05b40     EC 03 90 FD | 	jmp	#LR__0456
05b44                 | LR__0330
05b44     B1 FA 05 F6 | 	mov	result1, #177
05b48     E4 03 90 FD | 	jmp	#LR__0456
05b4c                 | LR__0331
05b4c     AF FA 05 F6 | 	mov	result1, #175
05b50     DC 03 90 FD | 	jmp	#LR__0456
05b54                 | LR__0332
05b54     AF FA 05 F6 | 	mov	result1, #175
05b58     D4 03 90 FD | 	jmp	#LR__0456
05b5c                 | LR__0333
05b5c     B0 FA 05 F6 | 	mov	result1, #176
05b60     CC 03 90 FD | 	jmp	#LR__0456
05b64                 | LR__0334
05b64     B0 FA 05 F6 | 	mov	result1, #176
05b68     C4 03 90 FD | 	jmp	#LR__0456
05b6c                 | LR__0335
05b6c     45 FA 05 F6 | 	mov	result1, #69
05b70     BC 03 90 FD | 	jmp	#LR__0456
05b74                 | LR__0336
05b74     45 FA 05 F6 | 	mov	result1, #69
05b78     B4 03 90 FD | 	jmp	#LR__0456
05b7c                 | LR__0337
05b7c     69 FA 05 F6 | 	mov	result1, #105
05b80     AC 03 90 FD | 	jmp	#LR__0456
05b84                 | LR__0338
05b84     B4 FA 05 F6 | 	mov	result1, #180
05b88     A4 03 90 FD | 	jmp	#LR__0456
05b8c                 | LR__0339
05b8c     40 FA 05 F6 | 	mov	result1, #64
05b90     9C 03 90 FD | 	jmp	#LR__0456
05b94                 | LR__0340
05b94     CF FA 05 F6 | 	mov	result1, #207
05b98     94 03 90 FD | 	jmp	#LR__0456
05b9c                 | LR__0341
05b9c     49 FA 05 F6 | 	mov	result1, #73
05ba0     8C 03 90 FD | 	jmp	#LR__0456
05ba4                 | LR__0342
05ba4     49 FA 05 F6 | 	mov	result1, #73
05ba8     84 03 90 FD | 	jmp	#LR__0456
05bac                 | LR__0343
05bac     C4 FA 05 F6 | 	mov	result1, #196
05bb0     7C 03 90 FD | 	jmp	#LR__0456
05bb4                 | LR__0344
05bb4     68 FA 05 F6 | 	mov	result1, #104
05bb8     74 03 90 FD | 	jmp	#LR__0456
05bbc                 | LR__0345
05bbc     B7 FA 05 F6 | 	mov	result1, #183
05bc0     6C 03 90 FD | 	jmp	#LR__0456
05bc4                 | LR__0346
05bc4     73 FA 05 F6 | 	mov	result1, #115
05bc8     64 03 90 FD | 	jmp	#LR__0456
05bcc                 | LR__0347
05bcc     74 FA 05 F6 | 	mov	result1, #116
05bd0     5C 03 90 FD | 	jmp	#LR__0456
05bd4                 | LR__0348
05bd4     6C FA 05 F6 | 	mov	result1, #108
05bd8     54 03 90 FD | 	jmp	#LR__0456
05bdc                 | LR__0349
05bdc     6C FA 05 F6 | 	mov	result1, #108
05be0     4C 03 90 FD | 	jmp	#LR__0456
05be4                 | LR__0350
05be4     89 FA 05 F6 | 	mov	result1, #137
05be8     44 03 90 FD | 	jmp	#LR__0456
05bec                 | LR__0351
05bec     C2 FA 05 F6 | 	mov	result1, #194
05bf0     3C 03 90 FD | 	jmp	#LR__0456
05bf4                 | LR__0352
05bf4     72 FA 05 F6 | 	mov	result1, #114
05bf8     34 03 90 FD | 	jmp	#LR__0456
05bfc                 | LR__0353
05bfc     5D FA 05 F6 | 	mov	result1, #93
05c00     2C 03 90 FD | 	jmp	#LR__0456
05c04                 | LR__0354
05c04     96 FA 05 F6 | 	mov	result1, #150
05c08     24 03 90 FD | 	jmp	#LR__0456
05c0c                 | LR__0355
05c0c     43 FA 05 F6 | 	mov	result1, #67
05c10     1C 03 90 FD | 	jmp	#LR__0456
05c14                 | LR__0356
05c14     43 FA 05 F6 | 	mov	result1, #67
05c18     14 03 90 FD | 	jmp	#LR__0456
05c1c                 | LR__0357
05c1c     43 FA 05 F6 | 	mov	result1, #67
05c20     0C 03 90 FD | 	jmp	#LR__0456
05c24                 | LR__0358
05c24     5A FA 05 F6 | 	mov	result1, #90
05c28     04 03 90 FD | 	jmp	#LR__0456
05c2c                 | LR__0359
05c2c     AB FA 05 F6 | 	mov	result1, #171
05c30     FC 02 90 FD | 	jmp	#LR__0456
05c34                 | LR__0360
05c34     BD FA 05 F6 | 	mov	result1, #189
05c38     F4 02 90 FD | 	jmp	#LR__0456
05c3c                 | LR__0361
05c3c     BD FA 05 F6 | 	mov	result1, #189
05c40     EC 02 90 FD | 	jmp	#LR__0456
05c44                 | LR__0362
05c44     46 FA 05 F6 | 	mov	result1, #70
05c48     E4 02 90 FD | 	jmp	#LR__0456
05c4c                 | LR__0363
05c4c     46 FA 05 F6 | 	mov	result1, #70
05c50     DC 02 90 FD | 	jmp	#LR__0456
05c54                 | LR__0364
05c54     71 FA 05 F6 | 	mov	result1, #113
05c58     D4 02 90 FD | 	jmp	#LR__0456
05c5c                 | LR__0365
05c5c     71 FA 05 F6 | 	mov	result1, #113
05c60     CC 02 90 FD | 	jmp	#LR__0456
05c64                 | LR__0366
05c64     60 FA 05 F6 | 	mov	result1, #96
05c68     C4 02 90 FD | 	jmp	#LR__0456
05c6c                 | LR__0367
05c6c     4A FA 05 F6 | 	mov	result1, #74
05c70     BC 02 90 FD | 	jmp	#LR__0456
05c74                 | LR__0368
05c74     4A FA 05 F6 | 	mov	result1, #74
05c78     B4 02 90 FD | 	jmp	#LR__0456
05c7c                 | LR__0369
05c7c     48 FA 05 F6 | 	mov	result1, #72
05c80     AC 02 90 FD | 	jmp	#LR__0456
05c84                 | LR__0370
05c84     48 FA 05 F6 | 	mov	result1, #72
05c88     A4 02 90 FD | 	jmp	#LR__0456
05c8c                 | LR__0371
05c8c     BB FA 05 F6 | 	mov	result1, #187
05c90     9C 02 90 FD | 	jmp	#LR__0456
05c94                 | LR__0372
05c94     A9 FA 05 F6 | 	mov	result1, #169
05c98     94 02 90 FD | 	jmp	#LR__0456
05c9c                 | LR__0373
05c9c     4E FA 05 F6 | 	mov	result1, #78
05ca0     8C 02 90 FD | 	jmp	#LR__0456
05ca4                 | LR__0374
05ca4     4E FA 05 F6 | 	mov	result1, #78
05ca8     84 02 90 FD | 	jmp	#LR__0456
05cac                 | LR__0375
05cac     58 FA 05 F6 | 	mov	result1, #88
05cb0     7C 02 90 FD | 	jmp	#LR__0456
05cb4                 | LR__0376
05cb4     5F FA 05 F6 | 	mov	result1, #95
05cb8     74 02 90 FD | 	jmp	#LR__0456
05cbc                 | LR__0377
05cbc     5F FA 05 F6 | 	mov	result1, #95
05cc0     6C 02 90 FD | 	jmp	#LR__0456
05cc4                 | LR__0378
05cc4     B5 FA 05 F6 | 	mov	result1, #181
05cc8     64 02 90 FD | 	jmp	#LR__0456
05ccc                 | LR__0379
05ccc     4C FA 05 F6 | 	mov	result1, #76
05cd0     5C 02 90 FD | 	jmp	#LR__0456
05cd4                 | LR__0380
05cd4     4C FA 05 F6 | 	mov	result1, #76
05cd8     54 02 90 FD | 	jmp	#LR__0456
05cdc                 | LR__0381
05cdc     52 FA 05 F6 | 	mov	result1, #82
05ce0     4C 02 90 FD | 	jmp	#LR__0456
05ce4                 | LR__0382
05ce4     52 FA 05 F6 | 	mov	result1, #82
05ce8     44 02 90 FD | 	jmp	#LR__0456
05cec                 | LR__0383
05cec     97 FA 05 F6 | 	mov	result1, #151
05cf0     3C 02 90 FD | 	jmp	#LR__0456
05cf4                 | LR__0384
05cf4     C6 FA 05 F6 | 	mov	result1, #198
05cf8     34 02 90 FD | 	jmp	#LR__0456
05cfc                 | LR__0385
05cfc     61 FA 05 F6 | 	mov	result1, #97
05d00     2C 02 90 FD | 	jmp	#LR__0456
05d04                 | LR__0386
05d04     61 FA 05 F6 | 	mov	result1, #97
05d08     24 02 90 FD | 	jmp	#LR__0456
05d0c                 | LR__0387
05d0c     63 FA 05 F6 | 	mov	result1, #99
05d10     1C 02 90 FD | 	jmp	#LR__0456
05d14                 | LR__0388
05d14     41 FA 05 F6 | 	mov	result1, #65
05d18     14 02 90 FD | 	jmp	#LR__0456
05d1c                 | LR__0389
05d1c     4B FA 05 F6 | 	mov	result1, #75
05d20     0C 02 90 FD | 	jmp	#LR__0456
05d24                 | LR__0390
05d24     4B FA 05 F6 | 	mov	result1, #75
05d28     04 02 90 FD | 	jmp	#LR__0456
05d2c                 | LR__0391
05d2c     C1 FA 05 F6 | 	mov	result1, #193
05d30     FC 01 90 FD | 	jmp	#LR__0456
05d34                 | LR__0392
05d34     B3 FA 05 F6 | 	mov	result1, #179
05d38     F4 01 90 FD | 	jmp	#LR__0456
05d3c                 | LR__0393
05d3c     5E FA 05 F6 | 	mov	result1, #94
05d40     EC 01 90 FD | 	jmp	#LR__0456
05d44                 | LR__0394
05d44     5E FA 05 F6 | 	mov	result1, #94
05d48     E4 01 90 FD | 	jmp	#LR__0456
05d4c                 | LR__0395
05d4c     7C FA 05 F6 | 	mov	result1, #124
05d50     DC 01 90 FD | 	jmp	#LR__0456
05d54                 | LR__0396
05d54     7E FA 05 F6 | 	mov	result1, #126
05d58     D4 01 90 FD | 	jmp	#LR__0456
05d5c                 | LR__0397
05d5c     7D FA 05 F6 | 	mov	result1, #125
05d60     CC 01 90 FD | 	jmp	#LR__0456
05d64                 | LR__0398
05d64     7F FA 05 F6 | 	mov	result1, #127
05d68     C4 01 90 FD | 	jmp	#LR__0456
05d6c                 | LR__0399
05d6c     80 FA 05 F6 | 	mov	result1, #128
05d70     BC 01 90 FD | 	jmp	#LR__0456
05d74                 | LR__0400
05d74     55 FA 05 F6 | 	mov	result1, #85
05d78     B4 01 90 FD | 	jmp	#LR__0456
05d7c                 | LR__0401
05d7c     75 FA 05 F6 | 	mov	result1, #117
05d80     AC 01 90 FD | 	jmp	#LR__0456
05d84                 | LR__0402
05d84     75 FA 05 F6 | 	mov	result1, #117
05d88     A4 01 90 FD | 	jmp	#LR__0456
05d8c                 | LR__0403
05d8c     42 FA 05 F6 | 	mov	result1, #66
05d90     9C 01 90 FD | 	jmp	#LR__0456
05d94                 | LR__0404
05d94     42 FA 05 F6 | 	mov	result1, #66
05d98     94 01 90 FD | 	jmp	#LR__0456
05d9c                 | LR__0405
05d9c     95 FA 05 F6 | 	mov	result1, #149
05da0     8C 01 90 FD | 	jmp	#LR__0456
05da4                 | LR__0406
05da4     AC FA 05 F6 | 	mov	result1, #172
05da8     84 01 90 FD | 	jmp	#LR__0456
05dac                 | LR__0407
05dac     81 FA 05 F6 | 	mov	result1, #129
05db0     7C 01 90 FD | 	jmp	#LR__0456
05db4                 | LR__0408
05db4     81 FA 05 F6 | 	mov	result1, #129
05db8     74 01 90 FD | 	jmp	#LR__0456
05dbc                 | LR__0409
05dbc     44 FA 05 F6 | 	mov	result1, #68
05dc0     6C 01 90 FD | 	jmp	#LR__0456
05dc4                 | LR__0410
05dc4     44 FA 05 F6 | 	mov	result1, #68
05dc8     64 01 90 FD | 	jmp	#LR__0456
05dcc                 | LR__0411
05dcc     BC FA 05 F6 | 	mov	result1, #188
05dd0     5C 01 90 FD | 	jmp	#LR__0456
05dd4                 | LR__0412
05dd4     88 FA 05 F6 | 	mov	result1, #136
05dd8     54 01 90 FD | 	jmp	#LR__0456
05ddc                 | LR__0413
05ddc     B6 FA 05 F6 | 	mov	result1, #182
05de0     4C 01 90 FD | 	jmp	#LR__0456
05de4                 | LR__0414
05de4     92 FA 05 F6 | 	mov	result1, #146
05de8     44 01 90 FD | 	jmp	#LR__0456
05dec                 | LR__0415
05dec     BE FA 05 F6 | 	mov	result1, #190
05df0     3C 01 90 FD | 	jmp	#LR__0456
05df4                 | LR__0416
05df4     BE FA 05 F6 | 	mov	result1, #190
05df8     34 01 90 FD | 	jmp	#LR__0456
05dfc                 | LR__0417
05dfc     C7 FA 05 F6 | 	mov	result1, #199
05e00     2C 01 90 FD | 	jmp	#LR__0456
05e04                 | LR__0418
05e04     AA FA 05 F6 | 	mov	result1, #170
05e08     24 01 90 FD | 	jmp	#LR__0456
05e0c                 | LR__0419
05e0c     4D FA 05 F6 | 	mov	result1, #77
05e10     1C 01 90 FD | 	jmp	#LR__0456
05e14                 | LR__0420
05e14     51 FA 05 F6 | 	mov	result1, #81
05e18     14 01 90 FD | 	jmp	#LR__0456
05e1c                 | LR__0421
05e1c     51 FA 05 F6 | 	mov	result1, #81
05e20     0C 01 90 FD | 	jmp	#LR__0456
05e24                 | LR__0422
05e24     D2 FA 05 F6 | 	mov	result1, #210
05e28     04 01 90 FD | 	jmp	#LR__0456
05e2c                 | LR__0423
05e2c     D2 FA 05 F6 | 	mov	result1, #210
05e30     FC 00 90 FD | 	jmp	#LR__0456
05e34                 | LR__0424
05e34     8E FA 05 F6 | 	mov	result1, #142
05e38     F4 00 90 FD | 	jmp	#LR__0456
05e3c                 | LR__0425
05e3c     8E FA 05 F6 | 	mov	result1, #142
05e40     EC 00 90 FD | 	jmp	#LR__0456
05e44                 | LR__0426
05e44     90 FA 05 F6 | 	mov	result1, #144
05e48     E4 00 90 FD | 	jmp	#LR__0456
05e4c                 | LR__0427
05e4c     90 FA 05 F6 | 	mov	result1, #144
05e50     DC 00 90 FD | 	jmp	#LR__0456
05e54                 | LR__0428
05e54     8D FA 05 F6 | 	mov	result1, #141
05e58     D4 00 90 FD | 	jmp	#LR__0456
05e5c                 | LR__0429
05e5c     8D FA 05 F6 | 	mov	result1, #141
05e60     CC 00 90 FD | 	jmp	#LR__0456
05e64                 | LR__0430
05e64     8C FA 05 F6 | 	mov	result1, #140
05e68     C4 00 90 FD | 	jmp	#LR__0456
05e6c                 | LR__0431
05e6c     8C FA 05 F6 | 	mov	result1, #140
05e70     BC 00 90 FD | 	jmp	#LR__0456
05e74                 | LR__0432
05e74     91 FA 05 F6 | 	mov	result1, #145
05e78     B4 00 90 FD | 	jmp	#LR__0456
05e7c                 | LR__0433
05e7c     91 FA 05 F6 | 	mov	result1, #145
05e80     AC 00 90 FD | 	jmp	#LR__0456
05e84                 | LR__0434
05e84     8B FA 05 F6 | 	mov	result1, #139
05e88     A4 00 90 FD | 	jmp	#LR__0456
05e8c                 | LR__0435
05e8c     8B FA 05 F6 | 	mov	result1, #139
05e90     9C 00 90 FD | 	jmp	#LR__0456
05e94                 | LR__0436
05e94     8F FA 05 F6 | 	mov	result1, #143
05e98     94 00 90 FD | 	jmp	#LR__0456
05e9c                 | LR__0437
05e9c     8F FA 05 F6 | 	mov	result1, #143
05ea0     8C 00 90 FD | 	jmp	#LR__0456
05ea4                 | LR__0438
05ea4     8F FA 05 F6 | 	mov	result1, #143
05ea8     84 00 90 FD | 	jmp	#LR__0456
05eac                 | LR__0439
05eac     B2 FA 05 F6 | 	mov	result1, #178
05eb0     7C 00 90 FD | 	jmp	#LR__0456
05eb4                 | LR__0440
05eb4     B2 FA 05 F6 | 	mov	result1, #178
05eb8     74 00 90 FD | 	jmp	#LR__0456
05ebc                 | LR__0441
05ebc     75 FA 05 F6 | 	mov	result1, #117
05ec0     6C 00 90 FD | 	jmp	#LR__0456
05ec4                 | LR__0442
05ec4     75 FA 05 F6 | 	mov	result1, #117
05ec8     64 00 90 FD | 	jmp	#LR__0456
05ecc                 | LR__0443
05ecc     6D FA 05 F6 | 	mov	result1, #109
05ed0     5C 00 90 FD | 	jmp	#LR__0456
05ed4                 | LR__0444
05ed4     6D FA 05 F6 | 	mov	result1, #109
05ed8     54 00 90 FD | 	jmp	#LR__0456
05edc                 | LR__0445
05edc     5B FA 05 F6 | 	mov	result1, #91
05ee0     4C 00 90 FD | 	jmp	#LR__0456
05ee4                 | LR__0446
05ee4     56 FA 05 F6 | 	mov	result1, #86
05ee8     44 00 90 FD | 	jmp	#LR__0456
05eec                 | LR__0447
05eec     56 FA 05 F6 | 	mov	result1, #86
05ef0     3C 00 90 FD | 	jmp	#LR__0456
05ef4                 | LR__0448
05ef4     70 FA 05 F6 | 	mov	result1, #112
05ef8     34 00 90 FD | 	jmp	#LR__0456
05efc                 | LR__0449
05efc     70 FA 05 F6 | 	mov	result1, #112
05f00     2C 00 90 FD | 	jmp	#LR__0456
05f04                 | LR__0450
05f04     57 FA 05 F6 | 	mov	result1, #87
05f08     24 00 90 FD | 	jmp	#LR__0456
05f0c                 | LR__0451
05f0c     57 FA 05 F6 | 	mov	result1, #87
05f10     1C 00 90 FD | 	jmp	#LR__0456
05f14                 | LR__0452
05f14     79 FA 05 F6 | 	mov	result1, #121
05f18     14 00 90 FD | 	jmp	#LR__0456
05f1c                 | LR__0453
05f1c     77 FA 05 F6 | 	mov	result1, #119
05f20     0C 00 90 FD | 	jmp	#LR__0456
05f24                 | LR__0454
05f24     78 FA 05 F6 | 	mov	result1, #120
05f28     04 00 90 FD | 	jmp	#LR__0456
05f2c                 | LR__0455
05f2c     00 FA 05 F6 | 	mov	result1, #0
05f30                 | LR__0456
05f30     A7 F0 03 F6 | 	mov	ptra, fp
05f34     B2 00 A0 FD | 	call	#popregs_
05f38                 | _iscommand_ret
05f38     2D 00 64 FD | 	ret
05f3c                 | 
05f3c                 | ' 
05f3c                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05f3c                 | ' 
05f3c                 | ' function isfunction(s as string) as ubyte
05f3c                 | _isfunction
05f3c     01 4A 05 F6 | 	mov	COUNT_, #1
05f40     A8 00 A0 FD | 	call	#pushregs_
05f44                 | ' 
05f44                 | ' select case s
05f44     09 27 02 F6 | 	mov	local01, arg01
05f48     B7 01 00 FF 
05f4c     94 15 06 F6 | 	mov	arg02, ##@LR__5715
05f50     13 13 02 F6 | 	mov	arg01, local01
05f54     40 10 B2 FD | 	call	#__system___string_cmp
05f58     00 FA 0D F2 | 	cmp	result1, #0 wz
05f5c     74 05 90 AD |  if_e	jmp	#LR__0460
05f60     B7 01 00 FF 
05f64     98 15 06 F6 | 	mov	arg02, ##@LR__5716
05f68     13 13 02 F6 | 	mov	arg01, local01
05f6c     28 10 B2 FD | 	call	#__system___string_cmp
05f70     00 FA 0D F2 | 	cmp	result1, #0 wz
05f74     64 05 90 AD |  if_e	jmp	#LR__0461
05f78     B7 01 00 FF 
05f7c     9D 15 06 F6 | 	mov	arg02, ##@LR__5717
05f80     13 13 02 F6 | 	mov	arg01, local01
05f84     10 10 B2 FD | 	call	#__system___string_cmp
05f88     00 FA 0D F2 | 	cmp	result1, #0 wz
05f8c     54 05 90 AD |  if_e	jmp	#LR__0462
05f90     B7 01 00 FF 
05f94     A1 15 06 F6 | 	mov	arg02, ##@LR__5718
05f98     13 13 02 F6 | 	mov	arg01, local01
05f9c     F8 0F B2 FD | 	call	#__system___string_cmp
05fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
05fa4     44 05 90 AD |  if_e	jmp	#LR__0463
05fa8     B7 01 00 FF 
05fac     A6 15 06 F6 | 	mov	arg02, ##@LR__5719
05fb0     13 13 02 F6 | 	mov	arg01, local01
05fb4     E0 0F B2 FD | 	call	#__system___string_cmp
05fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
05fbc     34 05 90 AD |  if_e	jmp	#LR__0464
05fc0     B7 01 00 FF 
05fc4     AA 15 06 F6 | 	mov	arg02, ##@LR__5720
05fc8     13 13 02 F6 | 	mov	arg01, local01
05fcc     C8 0F B2 FD | 	call	#__system___string_cmp
05fd0     00 FA 0D F2 | 	cmp	result1, #0 wz
05fd4     24 05 90 AD |  if_e	jmp	#LR__0465
05fd8     B7 01 00 FF 
05fdc     AF 15 06 F6 | 	mov	arg02, ##@LR__5721
05fe0     13 13 02 F6 | 	mov	arg01, local01
05fe4     B0 0F B2 FD | 	call	#__system___string_cmp
05fe8     00 FA 0D F2 | 	cmp	result1, #0 wz
05fec     14 05 90 AD |  if_e	jmp	#LR__0466
05ff0     B7 01 00 FF 
05ff4     B3 15 06 F6 | 	mov	arg02, ##@LR__5722
05ff8     13 13 02 F6 | 	mov	arg01, local01
05ffc     98 0F B2 FD | 	call	#__system___string_cmp
06000     00 FA 0D F2 | 	cmp	result1, #0 wz
06004     04 05 90 AD |  if_e	jmp	#LR__0467
06008     B7 01 00 FF 
0600c     B8 15 06 F6 | 	mov	arg02, ##@LR__5723
06010     13 13 02 F6 | 	mov	arg01, local01
06014     80 0F B2 FD | 	call	#__system___string_cmp
06018     00 FA 0D F2 | 	cmp	result1, #0 wz
0601c     F4 04 90 AD |  if_e	jmp	#LR__0468
06020     B7 01 00 FF 
06024     BD 15 06 F6 | 	mov	arg02, ##@LR__5724
06028     13 13 02 F6 | 	mov	arg01, local01
0602c     68 0F B2 FD | 	call	#__system___string_cmp
06030     00 FA 0D F2 | 	cmp	result1, #0 wz
06034     E4 04 90 AD |  if_e	jmp	#LR__0469
06038     B7 01 00 FF 
0603c     C5 15 06 F6 | 	mov	arg02, ##@LR__5725
06040     13 13 02 F6 | 	mov	arg01, local01
06044     50 0F B2 FD | 	call	#__system___string_cmp
06048     00 FA 0D F2 | 	cmp	result1, #0 wz
0604c     D4 04 90 AD |  if_e	jmp	#LR__0470
06050     B7 01 00 FF 
06054     C9 15 06 F6 | 	mov	arg02, ##@LR__5726
06058     13 13 02 F6 | 	mov	arg01, local01
0605c     38 0F B2 FD | 	call	#__system___string_cmp
06060     00 FA 0D F2 | 	cmp	result1, #0 wz
06064     C4 04 90 AD |  if_e	jmp	#LR__0471
06068     B7 01 00 FF 
0606c     CF 15 06 F6 | 	mov	arg02, ##@LR__5727
06070     13 13 02 F6 | 	mov	arg01, local01
06074     20 0F B2 FD | 	call	#__system___string_cmp
06078     00 FA 0D F2 | 	cmp	result1, #0 wz
0607c     B4 04 90 AD |  if_e	jmp	#LR__0472
06080     B7 01 00 FF 
06084     D8 15 06 F6 | 	mov	arg02, ##@LR__5728
06088     13 13 02 F6 | 	mov	arg01, local01
0608c     08 0F B2 FD | 	call	#__system___string_cmp
06090     00 FA 0D F2 | 	cmp	result1, #0 wz
06094     A4 04 90 AD |  if_e	jmp	#LR__0473
06098     B7 01 00 FF 
0609c     DC 15 06 F6 | 	mov	arg02, ##@LR__5729
060a0     13 13 02 F6 | 	mov	arg01, local01
060a4     F0 0E B2 FD | 	call	#__system___string_cmp
060a8     00 FA 0D F2 | 	cmp	result1, #0 wz
060ac     94 04 90 AD |  if_e	jmp	#LR__0474
060b0     B7 01 00 FF 
060b4     E0 15 06 F6 | 	mov	arg02, ##@LR__5730
060b8     13 13 02 F6 | 	mov	arg01, local01
060bc     D8 0E B2 FD | 	call	#__system___string_cmp
060c0     00 FA 0D F2 | 	cmp	result1, #0 wz
060c4     84 04 90 AD |  if_e	jmp	#LR__0475
060c8     B7 01 00 FF 
060cc     E4 15 06 F6 | 	mov	arg02, ##@LR__5731
060d0     13 13 02 F6 | 	mov	arg01, local01
060d4     C0 0E B2 FD | 	call	#__system___string_cmp
060d8     00 FA 0D F2 | 	cmp	result1, #0 wz
060dc     74 04 90 AD |  if_e	jmp	#LR__0476
060e0     B7 01 00 FF 
060e4     ED 15 06 F6 | 	mov	arg02, ##@LR__5732
060e8     13 13 02 F6 | 	mov	arg01, local01
060ec     A8 0E B2 FD | 	call	#__system___string_cmp
060f0     00 FA 0D F2 | 	cmp	result1, #0 wz
060f4     64 04 90 AD |  if_e	jmp	#LR__0477
060f8     B7 01 00 FF 
060fc     F6 15 06 F6 | 	mov	arg02, ##@LR__5733
06100     13 13 02 F6 | 	mov	arg01, local01
06104     90 0E B2 FD | 	call	#__system___string_cmp
06108     00 FA 0D F2 | 	cmp	result1, #0 wz
0610c     54 04 90 AD |  if_e	jmp	#LR__0478
06110     B7 01 00 FF 
06114     FA 15 06 F6 | 	mov	arg02, ##@LR__5734
06118     13 13 02 F6 | 	mov	arg01, local01
0611c     78 0E B2 FD | 	call	#__system___string_cmp
06120     00 FA 0D F2 | 	cmp	result1, #0 wz
06124     44 04 90 AD |  if_e	jmp	#LR__0479
06128     B8 01 00 FF 
0612c     08 14 06 F6 | 	mov	arg02, ##@LR__5735
06130     13 13 02 F6 | 	mov	arg01, local01
06134     60 0E B2 FD | 	call	#__system___string_cmp
06138     00 FA 0D F2 | 	cmp	result1, #0 wz
0613c     34 04 90 AD |  if_e	jmp	#LR__0480
06140     B8 01 00 FF 
06144     15 14 06 F6 | 	mov	arg02, ##@LR__5736
06148     13 13 02 F6 | 	mov	arg01, local01
0614c     48 0E B2 FD | 	call	#__system___string_cmp
06150     00 FA 0D F2 | 	cmp	result1, #0 wz
06154     24 04 90 AD |  if_e	jmp	#LR__0481
06158     B8 01 00 FF 
0615c     1D 14 06 F6 | 	mov	arg02, ##@LR__5737
06160     13 13 02 F6 | 	mov	arg01, local01
06164     30 0E B2 FD | 	call	#__system___string_cmp
06168     00 FA 0D F2 | 	cmp	result1, #0 wz
0616c     14 04 90 AD |  if_e	jmp	#LR__0482
06170     B8 01 00 FF 
06174     21 14 06 F6 | 	mov	arg02, ##@LR__5738
06178     13 13 02 F6 | 	mov	arg01, local01
0617c     18 0E B2 FD | 	call	#__system___string_cmp
06180     00 FA 0D F2 | 	cmp	result1, #0 wz
06184     04 04 90 AD |  if_e	jmp	#LR__0483
06188     B8 01 00 FF 
0618c     26 14 06 F6 | 	mov	arg02, ##@LR__5739
06190     13 13 02 F6 | 	mov	arg01, local01
06194     00 0E B2 FD | 	call	#__system___string_cmp
06198     00 FA 0D F2 | 	cmp	result1, #0 wz
0619c     F4 03 90 AD |  if_e	jmp	#LR__0484
061a0     B8 01 00 FF 
061a4     2D 14 06 F6 | 	mov	arg02, ##@LR__5740
061a8     13 13 02 F6 | 	mov	arg01, local01
061ac     E8 0D B2 FD | 	call	#__system___string_cmp
061b0     00 FA 0D F2 | 	cmp	result1, #0 wz
061b4     E4 03 90 AD |  if_e	jmp	#LR__0485
061b8     B8 01 00 FF 
061bc     31 14 06 F6 | 	mov	arg02, ##@LR__5741
061c0     13 13 02 F6 | 	mov	arg01, local01
061c4     D0 0D B2 FD | 	call	#__system___string_cmp
061c8     00 FA 0D F2 | 	cmp	result1, #0 wz
061cc     D4 03 90 AD |  if_e	jmp	#LR__0486
061d0     B8 01 00 FF 
061d4     37 14 06 F6 | 	mov	arg02, ##@LR__5742
061d8     13 13 02 F6 | 	mov	arg01, local01
061dc     B8 0D B2 FD | 	call	#__system___string_cmp
061e0     00 FA 0D F2 | 	cmp	result1, #0 wz
061e4     C4 03 90 AD |  if_e	jmp	#LR__0487
061e8     B8 01 00 FF 
061ec     3B 14 06 F6 | 	mov	arg02, ##@LR__5743
061f0     13 13 02 F6 | 	mov	arg01, local01
061f4     A0 0D B2 FD | 	call	#__system___string_cmp
061f8     00 FA 0D F2 | 	cmp	result1, #0 wz
061fc     B4 03 90 AD |  if_e	jmp	#LR__0488
06200     B8 01 00 FF 
06204     3F 14 06 F6 | 	mov	arg02, ##@LR__5744
06208     13 13 02 F6 | 	mov	arg01, local01
0620c     88 0D B2 FD | 	call	#__system___string_cmp
06210     00 FA 0D F2 | 	cmp	result1, #0 wz
06214     A4 03 90 AD |  if_e	jmp	#LR__0489
06218     B8 01 00 FF 
0621c     45 14 06 F6 | 	mov	arg02, ##@LR__5745
06220     13 13 02 F6 | 	mov	arg01, local01
06224     70 0D B2 FD | 	call	#__system___string_cmp
06228     00 FA 0D F2 | 	cmp	result1, #0 wz
0622c     94 03 90 AD |  if_e	jmp	#LR__0490
06230     B8 01 00 FF 
06234     4C 14 06 F6 | 	mov	arg02, ##@LR__5746
06238     13 13 02 F6 | 	mov	arg01, local01
0623c     58 0D B2 FD | 	call	#__system___string_cmp
06240     00 FA 0D F2 | 	cmp	result1, #0 wz
06244     84 03 90 AD |  if_e	jmp	#LR__0491
06248     B8 01 00 FF 
0624c     52 14 06 F6 | 	mov	arg02, ##@LR__5747
06250     13 13 02 F6 | 	mov	arg01, local01
06254     40 0D B2 FD | 	call	#__system___string_cmp
06258     00 FA 0D F2 | 	cmp	result1, #0 wz
0625c     74 03 90 AD |  if_e	jmp	#LR__0492
06260     B8 01 00 FF 
06264     57 14 06 F6 | 	mov	arg02, ##@LR__5748
06268     13 13 02 F6 | 	mov	arg01, local01
0626c     28 0D B2 FD | 	call	#__system___string_cmp
06270     00 FA 0D F2 | 	cmp	result1, #0 wz
06274     64 03 90 AD |  if_e	jmp	#LR__0493
06278     B8 01 00 FF 
0627c     5E 14 06 F6 | 	mov	arg02, ##@LR__5749
06280     13 13 02 F6 | 	mov	arg01, local01
06284     10 0D B2 FD | 	call	#__system___string_cmp
06288     00 FA 0D F2 | 	cmp	result1, #0 wz
0628c     54 03 90 AD |  if_e	jmp	#LR__0494
06290     B8 01 00 FF 
06294     65 14 06 F6 | 	mov	arg02, ##@LR__5750
06298     13 13 02 F6 | 	mov	arg01, local01
0629c     F8 0C B2 FD | 	call	#__system___string_cmp
062a0     00 FA 0D F2 | 	cmp	result1, #0 wz
062a4     44 03 90 AD |  if_e	jmp	#LR__0495
062a8     B8 01 00 FF 
062ac     6C 14 06 F6 | 	mov	arg02, ##@LR__5751
062b0     13 13 02 F6 | 	mov	arg01, local01
062b4     E0 0C B2 FD | 	call	#__system___string_cmp
062b8     00 FA 0D F2 | 	cmp	result1, #0 wz
062bc     34 03 90 AD |  if_e	jmp	#LR__0496
062c0     B8 01 00 FF 
062c4     73 14 06 F6 | 	mov	arg02, ##@LR__5752
062c8     13 13 02 F6 | 	mov	arg01, local01
062cc     C8 0C B2 FD | 	call	#__system___string_cmp
062d0     00 FA 0D F2 | 	cmp	result1, #0 wz
062d4     24 03 90 AD |  if_e	jmp	#LR__0497
062d8     B8 01 00 FF 
062dc     78 14 06 F6 | 	mov	arg02, ##@LR__5753
062e0     13 13 02 F6 | 	mov	arg01, local01
062e4     B0 0C B2 FD | 	call	#__system___string_cmp
062e8     00 FA 0D F2 | 	cmp	result1, #0 wz
062ec     14 03 90 AD |  if_e	jmp	#LR__0498
062f0     B8 01 00 FF 
062f4     7D 14 06 F6 | 	mov	arg02, ##@LR__5754
062f8     13 13 02 F6 | 	mov	arg01, local01
062fc     98 0C B2 FD | 	call	#__system___string_cmp
06300     00 FA 0D F2 | 	cmp	result1, #0 wz
06304     04 03 90 AD |  if_e	jmp	#LR__0499
06308     B8 01 00 FF 
0630c     82 14 06 F6 | 	mov	arg02, ##@LR__5755
06310     13 13 02 F6 | 	mov	arg01, local01
06314     80 0C B2 FD | 	call	#__system___string_cmp
06318     00 FA 0D F2 | 	cmp	result1, #0 wz
0631c     F4 02 90 AD |  if_e	jmp	#LR__0500
06320     B8 01 00 FF 
06324     88 14 06 F6 | 	mov	arg02, ##@LR__5756
06328     13 13 02 F6 | 	mov	arg01, local01
0632c     68 0C B2 FD | 	call	#__system___string_cmp
06330     00 FA 0D F2 | 	cmp	result1, #0 wz
06334     E4 02 90 AD |  if_e	jmp	#LR__0501
06338     B8 01 00 FF 
0633c     8E 14 06 F6 | 	mov	arg02, ##@LR__5757
06340     13 13 02 F6 | 	mov	arg01, local01
06344     50 0C B2 FD | 	call	#__system___string_cmp
06348     00 FA 0D F2 | 	cmp	result1, #0 wz
0634c     D4 02 90 AD |  if_e	jmp	#LR__0502
06350     B8 01 00 FF 
06354     94 14 06 F6 | 	mov	arg02, ##@LR__5758
06358     13 13 02 F6 | 	mov	arg01, local01
0635c     38 0C B2 FD | 	call	#__system___string_cmp
06360     00 FA 0D F2 | 	cmp	result1, #0 wz
06364     C4 02 90 AD |  if_e	jmp	#LR__0503
06368     B8 01 00 FF 
0636c     99 14 06 F6 | 	mov	arg02, ##@LR__5759
06370     13 13 02 F6 | 	mov	arg01, local01
06374     20 0C B2 FD | 	call	#__system___string_cmp
06378     00 FA 0D F2 | 	cmp	result1, #0 wz
0637c     B4 02 90 AD |  if_e	jmp	#LR__0504
06380     B8 01 00 FF 
06384     9E 14 06 F6 | 	mov	arg02, ##@LR__5760
06388     13 13 02 F6 | 	mov	arg01, local01
0638c     08 0C B2 FD | 	call	#__system___string_cmp
06390     00 FA 0D F2 | 	cmp	result1, #0 wz
06394     A4 02 90 AD |  if_e	jmp	#LR__0505
06398     B8 01 00 FF 
0639c     A6 14 06 F6 | 	mov	arg02, ##@LR__5761
063a0     13 13 02 F6 | 	mov	arg01, local01
063a4     F0 0B B2 FD | 	call	#__system___string_cmp
063a8     00 FA 0D F2 | 	cmp	result1, #0 wz
063ac     94 02 90 AD |  if_e	jmp	#LR__0506
063b0     B8 01 00 FF 
063b4     AC 14 06 F6 | 	mov	arg02, ##@LR__5762
063b8     13 13 02 F6 | 	mov	arg01, local01
063bc     D8 0B B2 FD | 	call	#__system___string_cmp
063c0     00 FA 0D F2 | 	cmp	result1, #0 wz
063c4     84 02 90 AD |  if_e	jmp	#LR__0507
063c8     B8 01 00 FF 
063cc     B3 14 06 F6 | 	mov	arg02, ##@LR__5763
063d0     13 13 02 F6 | 	mov	arg01, local01
063d4     C0 0B B2 FD | 	call	#__system___string_cmp
063d8     00 FA 0D F2 | 	cmp	result1, #0 wz
063dc     74 02 90 AD |  if_e	jmp	#LR__0508
063e0     B8 01 00 FF 
063e4     B9 14 06 F6 | 	mov	arg02, ##@LR__5764
063e8     13 13 02 F6 | 	mov	arg01, local01
063ec     A8 0B B2 FD | 	call	#__system___string_cmp
063f0     00 FA 0D F2 | 	cmp	result1, #0 wz
063f4     64 02 90 AD |  if_e	jmp	#LR__0509
063f8     B8 01 00 FF 
063fc     BF 14 06 F6 | 	mov	arg02, ##@LR__5765
06400     13 13 02 F6 | 	mov	arg01, local01
06404     90 0B B2 FD | 	call	#__system___string_cmp
06408     00 FA 0D F2 | 	cmp	result1, #0 wz
0640c     54 02 90 AD |  if_e	jmp	#LR__0510
06410     B8 01 00 FF 
06414     C3 14 06 F6 | 	mov	arg02, ##@LR__5766
06418     13 13 02 F6 | 	mov	arg01, local01
0641c     78 0B B2 FD | 	call	#__system___string_cmp
06420     00 FA 0D F2 | 	cmp	result1, #0 wz
06424     44 02 90 AD |  if_e	jmp	#LR__0511
06428     B8 01 00 FF 
0642c     C7 14 06 F6 | 	mov	arg02, ##@LR__5767
06430     13 13 02 F6 | 	mov	arg01, local01
06434     60 0B B2 FD | 	call	#__system___string_cmp
06438     00 FA 0D F2 | 	cmp	result1, #0 wz
0643c     34 02 90 AD |  if_e	jmp	#LR__0512
06440     B8 01 00 FF 
06444     CB 14 06 F6 | 	mov	arg02, ##@LR__5768
06448     13 13 02 F6 | 	mov	arg01, local01
0644c     48 0B B2 FD | 	call	#__system___string_cmp
06450     00 FA 0D F2 | 	cmp	result1, #0 wz
06454     24 02 90 AD |  if_e	jmp	#LR__0513
06458     B8 01 00 FF 
0645c     D1 14 06 F6 | 	mov	arg02, ##@LR__5769
06460     13 13 02 F6 | 	mov	arg01, local01
06464     30 0B B2 FD | 	call	#__system___string_cmp
06468     00 FA 0D F2 | 	cmp	result1, #0 wz
0646c     14 02 90 AD |  if_e	jmp	#LR__0514
06470     B8 01 00 FF 
06474     D7 14 06 F6 | 	mov	arg02, ##@LR__5770
06478     13 13 02 F6 | 	mov	arg01, local01
0647c     18 0B B2 FD | 	call	#__system___string_cmp
06480     00 FA 0D F2 | 	cmp	result1, #0 wz
06484     04 02 90 AD |  if_e	jmp	#LR__0515
06488     B8 01 00 FF 
0648c     DC 14 06 F6 | 	mov	arg02, ##@LR__5771
06490     13 13 02 F6 | 	mov	arg01, local01
06494     00 0B B2 FD | 	call	#__system___string_cmp
06498     00 FA 0D F2 | 	cmp	result1, #0 wz
0649c     F4 01 90 AD |  if_e	jmp	#LR__0516
064a0     B8 01 00 FF 
064a4     E0 14 06 F6 | 	mov	arg02, ##@LR__5772
064a8     13 13 02 F6 | 	mov	arg01, local01
064ac     E8 0A B2 FD | 	call	#__system___string_cmp
064b0     00 FA 0D F2 | 	cmp	result1, #0 wz
064b4     E4 01 90 AD |  if_e	jmp	#LR__0517
064b8     B8 01 00 FF 
064bc     E4 14 06 F6 | 	mov	arg02, ##@LR__5773
064c0     13 13 02 F6 | 	mov	arg01, local01
064c4     D0 0A B2 FD | 	call	#__system___string_cmp
064c8     00 FA 0D F2 | 	cmp	result1, #0 wz
064cc     D4 01 90 AD |  if_e	jmp	#LR__0518
064d0     D8 01 90 FD | 	jmp	#LR__0519
064d4                 | LR__0460
064d4     9E FA 05 F6 | 	mov	result1, #158
064d8     D4 01 90 FD | 	jmp	#LR__0520
064dc                 | LR__0461
064dc     85 FA 05 F6 | 	mov	result1, #133
064e0     CC 01 90 FD | 	jmp	#LR__0520
064e4                 | LR__0462
064e4     9B FA 05 F6 | 	mov	result1, #155
064e8     C4 01 90 FD | 	jmp	#LR__0520
064ec                 | LR__0463
064ec     9B FA 05 F6 | 	mov	result1, #155
064f0     BC 01 90 FD | 	jmp	#LR__0520
064f4                 | LR__0464
064f4     A7 FA 05 F6 | 	mov	result1, #167
064f8     B4 01 90 FD | 	jmp	#LR__0520
064fc                 | LR__0465
064fc     84 FA 05 F6 | 	mov	result1, #132
06500     AC 01 90 FD | 	jmp	#LR__0520
06504                 | LR__0466
06504     86 FA 05 F6 | 	mov	result1, #134
06508     A4 01 90 FD | 	jmp	#LR__0520
0650c                 | LR__0467
0650c     A2 FA 05 F6 | 	mov	result1, #162
06510     9C 01 90 FD | 	jmp	#LR__0520
06514                 | LR__0468
06514     9F FA 05 F6 | 	mov	result1, #159
06518     94 01 90 FD | 	jmp	#LR__0520
0651c                 | LR__0469
0651c     C0 FA 05 F6 | 	mov	result1, #192
06520     8C 01 90 FD | 	jmp	#LR__0520
06524                 | LR__0470
06524     82 FA 05 F6 | 	mov	result1, #130
06528     84 01 90 FD | 	jmp	#LR__0520
0652c                 | LR__0471
0652c     99 FA 05 F6 | 	mov	result1, #153
06530     7C 01 90 FD | 	jmp	#LR__0520
06534                 | LR__0472
06534     C5 FA 05 F6 | 	mov	result1, #197
06538     74 01 90 FD | 	jmp	#LR__0520
0653c                 | LR__0473
0653c     C5 FA 05 F6 | 	mov	result1, #197
06540     6C 01 90 FD | 	jmp	#LR__0520
06544                 | LR__0474
06544     9C FA 05 F6 | 	mov	result1, #156
06548     64 01 90 FD | 	jmp	#LR__0520
0654c                 | LR__0475
0654c     D3 FA 05 F6 | 	mov	result1, #211
06550     5C 01 90 FD | 	jmp	#LR__0520
06554                 | LR__0476
06554     D3 FA 05 F6 | 	mov	result1, #211
06558     54 01 90 FD | 	jmp	#LR__0520
0655c                 | LR__0477
0655c     6F FA 05 F6 | 	mov	result1, #111
06560     4C 01 90 FD | 	jmp	#LR__0520
06564                 | LR__0478
06564     6F FA 05 F6 | 	mov	result1, #111
06568     44 01 90 FD | 	jmp	#LR__0520
0656c                 | LR__0479
0656c     93 FA 05 F6 | 	mov	result1, #147
06570     3C 01 90 FD | 	jmp	#LR__0520
06574                 | LR__0480
06574     94 FA 05 F6 | 	mov	result1, #148
06578     34 01 90 FD | 	jmp	#LR__0520
0657c                 | LR__0481
0657c     62 FA 05 F6 | 	mov	result1, #98
06580     2C 01 90 FD | 	jmp	#LR__0520
06584                 | LR__0482
06584     62 FA 05 F6 | 	mov	result1, #98
06588     24 01 90 FD | 	jmp	#LR__0520
0658c                 | LR__0483
0658c     A3 FA 05 F6 | 	mov	result1, #163
06590     1C 01 90 FD | 	jmp	#LR__0520
06594                 | LR__0484
06594     9D FA 05 F6 | 	mov	result1, #157
06598     14 01 90 FD | 	jmp	#LR__0520
0659c                 | LR__0485
0659c     8A FA 05 F6 | 	mov	result1, #138
065a0     0C 01 90 FD | 	jmp	#LR__0520
065a4                 | LR__0486
065a4     A4 FA 05 F6 | 	mov	result1, #164
065a8     04 01 90 FD | 	jmp	#LR__0520
065ac                 | LR__0487
065ac     A8 FA 05 F6 | 	mov	result1, #168
065b0     FC 00 90 FD | 	jmp	#LR__0520
065b4                 | LR__0488
065b4     AD FA 05 F6 | 	mov	result1, #173
065b8     F4 00 90 FD | 	jmp	#LR__0520
065bc                 | LR__0489
065bc     9A FA 05 F6 | 	mov	result1, #154
065c0     EC 00 90 FD | 	jmp	#LR__0520
065c4                 | LR__0490
065c4     D1 FA 05 F6 | 	mov	result1, #209
065c8     E4 00 90 FD | 	jmp	#LR__0520
065cc                 | LR__0491
065cc     D0 FA 05 F6 | 	mov	result1, #208
065d0     DC 00 90 FD | 	jmp	#LR__0520
065d4                 | LR__0492
065d4     A6 FA 05 F6 | 	mov	result1, #166
065d8     D4 00 90 FD | 	jmp	#LR__0520
065dc                 | LR__0493
065dc     66 FA 05 F6 | 	mov	result1, #102
065e0     CC 00 90 FD | 	jmp	#LR__0520
065e4                 | LR__0494
065e4     67 FA 05 F6 | 	mov	result1, #103
065e8     C4 00 90 FD | 	jmp	#LR__0520
065ec                 | LR__0495
065ec     64 FA 05 F6 | 	mov	result1, #100
065f0     BC 00 90 FD | 	jmp	#LR__0520
065f4                 | LR__0496
065f4     65 FA 05 F6 | 	mov	result1, #101
065f8     B4 00 90 FD | 	jmp	#LR__0520
065fc                 | LR__0497
065fc     C8 FA 05 F6 | 	mov	result1, #200
06600     AC 00 90 FD | 	jmp	#LR__0520
06604                 | LR__0498
06604     C9 FA 05 F6 | 	mov	result1, #201
06608     A4 00 90 FD | 	jmp	#LR__0520
0660c                 | LR__0499
0660c     CA FA 05 F6 | 	mov	result1, #202
06610     9C 00 90 FD | 	jmp	#LR__0520
06614                 | LR__0500
06614     CC FA 05 F6 | 	mov	result1, #204
06618     94 00 90 FD | 	jmp	#LR__0520
0661c                 | LR__0501
0661c     CD FA 05 F6 | 	mov	result1, #205
06620     8C 00 90 FD | 	jmp	#LR__0520
06624                 | LR__0502
06624     CE FA 05 F6 | 	mov	result1, #206
06628     84 00 90 FD | 	jmp	#LR__0520
0662c                 | LR__0503
0662c     CB FA 05 F6 | 	mov	result1, #203
06630     7C 00 90 FD | 	jmp	#LR__0520
06634                 | LR__0504
06634     98 FA 05 F6 | 	mov	result1, #152
06638     74 00 90 FD | 	jmp	#LR__0520
0663c                 | LR__0505
0663c     7B FA 05 F6 | 	mov	result1, #123
06640     6C 00 90 FD | 	jmp	#LR__0520
06644                 | LR__0506
06644     76 FA 05 F6 | 	mov	result1, #118
06648     64 00 90 FD | 	jmp	#LR__0520
0664c                 | LR__0507
0664c     A5 FA 05 F6 | 	mov	result1, #165
06650     5C 00 90 FD | 	jmp	#LR__0520
06654                 | LR__0508
06654     7A FA 05 F6 | 	mov	result1, #122
06658     54 00 90 FD | 	jmp	#LR__0520
0665c                 | LR__0509
0665c     BF FA 05 F6 | 	mov	result1, #191
06660     4C 00 90 FD | 	jmp	#LR__0520
06664                 | LR__0510
06664     54 FA 05 F6 | 	mov	result1, #84
06668     44 00 90 FD | 	jmp	#LR__0520
0666c                 | LR__0511
0666c     6B FA 05 F6 | 	mov	result1, #107
06670     3C 00 90 FD | 	jmp	#LR__0520
06674                 | LR__0512
06674     87 FA 05 F6 | 	mov	result1, #135
06678     34 00 90 FD | 	jmp	#LR__0520
0667c                 | LR__0513
0667c     6A FA 05 F6 | 	mov	result1, #106
06680     2C 00 90 FD | 	jmp	#LR__0520
06684                 | LR__0514
06684     6E FA 05 F6 | 	mov	result1, #110
06688     24 00 90 FD | 	jmp	#LR__0520
0668c                 | LR__0515
0668c     A1 FA 05 F6 | 	mov	result1, #161
06690     1C 00 90 FD | 	jmp	#LR__0520
06694                 | LR__0516
06694     83 FA 05 F6 | 	mov	result1, #131
06698     14 00 90 FD | 	jmp	#LR__0520
0669c                 | LR__0517
0669c     A0 FA 05 F6 | 	mov	result1, #160
066a0     0C 00 90 FD | 	jmp	#LR__0520
066a4                 | LR__0518
066a4     9B FA 05 F6 | 	mov	result1, #155
066a8     04 00 90 FD | 	jmp	#LR__0520
066ac                 | LR__0519
066ac     00 FA 05 F6 | 	mov	result1, #0
066b0                 | LR__0520
066b0     A7 F0 03 F6 | 	mov	ptra, fp
066b4     B2 00 A0 FD | 	call	#popregs_
066b8                 | _isfunction_ret
066b8     2D 00 64 FD | 	ret
066bc                 | 
066bc                 | ' 
066bc                 | ' ' Check if the part is a name
066bc                 | ' 
066bc                 | ' function isname(s as string) as boolean
066bc                 | _isname
066bc     0D 4A 05 F6 | 	mov	COUNT_, #13
066c0     A8 00 A0 FD | 	call	#pushregs_
066c4     09 27 02 F6 | 	mov	local01, arg01
066c8     09 29 02 F6 | 	mov	local02, arg01
066cc     97 06 48 FB | 	callpa	#(@LR__0531-@LR__0530)>>2,fcache_load_ptr_
066d0                 | LR__0530
066d0     14 FB C9 FA | 	rdbyte	result1, local02 wz
066d4     01 28 06 51 |  if_ne	add	local02, #1
066d8     F4 FF 9F 5D |  if_ne	jmp	#LR__0530
066dc                 | LR__0531
066dc     09 29 82 F1 | 	sub	local02, arg01
066e0     14 FB 01 F6 | 	mov	result1, local02
066e4     FD 2A 0A F6 | 	mov	local03, result1 wz
066e8     00 FA 05 A6 |  if_e	mov	result1, #0
066ec     34 02 90 AD |  if_e	jmp	#LR__0543
066f0     13 13 02 F6 | 	mov	arg01, local01
066f4     01 14 06 F6 | 	mov	arg02, #1
066f8     01 16 06 F6 | 	mov	arg03, #1
066fc     04 2A B2 FD | 	call	#__system__Mid_S
06700     FD 2C 02 F6 | 	mov	local04, result1
06704                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
06704     B8 01 00 FF 
06708     EB 14 06 F6 | 	mov	arg02, ##@LR__5774
0670c     16 13 02 F6 | 	mov	arg01, local04
06710     84 08 B2 FD | 	call	#__system___string_cmp
06714     00 FA 55 F2 | 	cmps	result1, #0 wc
06718     18 00 90 CD |  if_b	jmp	#LR__0532
0671c     B8 01 00 FF 
06720     ED 14 06 F6 | 	mov	arg02, ##@LR__5775
06724     16 13 02 F6 | 	mov	arg01, local04
06728     6C 08 B2 FD | 	call	#__system___string_cmp
0672c     01 FA 55 F2 | 	cmps	result1, #1 wc
06730     1C 00 90 CD |  if_b	jmp	#LR__0533
06734                 | LR__0532
06734     B8 01 00 FF 
06738     EF 14 06 F6 | 	mov	arg02, ##@LR__5776
0673c     16 13 02 F6 | 	mov	arg01, local04
06740     54 08 B2 FD | 	call	#__system___string_cmp
06744     00 FA 0D F2 | 	cmp	result1, #0 wz
06748     00 FA 05 56 |  if_ne	mov	result1, #0
0674c     D4 01 90 5D |  if_ne	jmp	#LR__0543
06750                 | LR__0533
06750                 | ' if l>2 then 
06750     03 2A 56 F2 | 	cmps	local03, #3 wc
06754     C8 01 90 CD |  if_b	jmp	#LR__0542
06758                 | '   for i=2 to l
06758     02 2E 06 F6 | 	mov	local05, #2
0675c     15 31 02 F6 | 	mov	local06, local03
06760     01 30 06 F1 | 	add	local06, #1
06764                 | LR__0534
06764     18 2F 52 F2 | 	cmps	local05, local06 wc
06768     B4 01 90 3D |  if_ae	jmp	#LR__0541
0676c     13 13 02 F6 | 	mov	arg01, local01
06770     17 15 02 F6 | 	mov	arg02, local05
06774     01 16 06 F6 | 	mov	arg03, #1
06778     88 29 B2 FD | 	call	#__system__Mid_S
0677c     FD 2C 02 F6 | 	mov	local04, result1
06780                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
06780     15 2F 52 F2 | 	cmps	local05, local03 wc
06784     9C 00 90 3D |  if_ae	jmp	#LR__0537
06788     B8 01 00 FF 
0678c     F1 14 06 F6 | 	mov	arg02, ##@LR__5777
06790     16 13 02 F6 | 	mov	arg01, local04
06794     00 08 B2 FD | 	call	#__system___string_cmp
06798     00 FA 55 F2 | 	cmps	result1, #0 wc
0679c     18 00 90 CD |  if_b	jmp	#LR__0535
067a0     B8 01 00 FF 
067a4     F3 14 06 F6 | 	mov	arg02, ##@LR__5778
067a8     16 13 02 F6 | 	mov	arg01, local04
067ac     E8 07 B2 FD | 	call	#__system___string_cmp
067b0     01 FA 55 F2 | 	cmps	result1, #1 wc
067b4     6C 00 90 CD |  if_b	jmp	#LR__0537
067b8                 | LR__0535
067b8     B8 01 00 FF 
067bc     F5 14 06 F6 | 	mov	arg02, ##@LR__5779
067c0     16 13 02 F6 | 	mov	arg01, local04
067c4     D0 07 B2 FD | 	call	#__system___string_cmp
067c8     00 FA 55 F2 | 	cmps	result1, #0 wc
067cc     18 00 90 CD |  if_b	jmp	#LR__0536
067d0     B8 01 00 FF 
067d4     F7 14 06 F6 | 	mov	arg02, ##@LR__5780
067d8     16 13 02 F6 | 	mov	arg01, local04
067dc     B8 07 B2 FD | 	call	#__system___string_cmp
067e0     01 FA 55 F2 | 	cmps	result1, #1 wc
067e4     3C 00 90 CD |  if_b	jmp	#LR__0537
067e8                 | LR__0536
067e8     B8 01 00 FF 
067ec     F9 32 06 F6 | 	mov	local07, ##@LR__5781
067f0     16 13 02 F6 | 	mov	arg01, local04
067f4     19 15 02 F6 | 	mov	arg02, local07
067f8     9C 07 B2 FD | 	call	#__system___string_cmp
067fc     00 FA 0D F2 | 	cmp	result1, #0 wz
06800     20 00 90 AD |  if_e	jmp	#LR__0537
06804     B8 01 00 FF 
06808     FB 34 06 F6 | 	mov	local08, ##@LR__5782
0680c     16 13 02 F6 | 	mov	arg01, local04
06810     1A 15 02 F6 | 	mov	arg02, local08
06814     80 07 B2 FD | 	call	#__system___string_cmp
06818     FD 36 0A F6 | 	mov	local09, result1 wz
0681c     00 FA 05 56 |  if_ne	mov	result1, #0
06820     00 01 90 5D |  if_ne	jmp	#LR__0543
06824                 | LR__0537
06824                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
06824     15 2F 0A F2 | 	cmp	local05, local03 wz
06828     EC 00 90 5D |  if_ne	jmp	#LR__0540
0682c     B8 01 00 FF 
06830     FD 38 06 F6 | 	mov	local10, ##@LR__5783
06834     16 13 02 F6 | 	mov	arg01, local04
06838     1C 15 02 F6 | 	mov	arg02, local10
0683c     58 07 B2 FD | 	call	#__system___string_cmp
06840     FD 3A 02 F6 | 	mov	local11, result1
06844     00 3A 56 F2 | 	cmps	local11, #0 wc
06848     1C 00 90 CD |  if_b	jmp	#LR__0538
0684c     B8 01 00 FF 
06850     FF 14 06 F6 | 	mov	arg02, ##@LR__5784
06854     16 13 02 F6 | 	mov	arg01, local04
06858     3C 07 B2 FD | 	call	#__system___string_cmp
0685c     FD 38 02 F6 | 	mov	local10, result1
06860     01 38 56 F2 | 	cmps	local10, #1 wc
06864     B0 00 90 CD |  if_b	jmp	#LR__0540
06868                 | LR__0538
06868     B8 01 00 FF 
0686c     01 15 06 F6 | 	mov	arg02, ##@LR__5785
06870     16 13 02 F6 | 	mov	arg01, local04
06874     20 07 B2 FD | 	call	#__system___string_cmp
06878     00 FA 55 F2 | 	cmps	result1, #0 wc
0687c     1C 00 90 CD |  if_b	jmp	#LR__0539
06880     B8 01 00 FF 
06884     03 37 06 F6 | 	mov	local09, ##@LR__5786
06888     16 13 02 F6 | 	mov	arg01, local04
0688c     1B 15 02 F6 | 	mov	arg02, local09
06890     04 07 B2 FD | 	call	#__system___string_cmp
06894     01 FA 55 F2 | 	cmps	result1, #1 wc
06898     7C 00 90 CD |  if_b	jmp	#LR__0540
0689c                 | LR__0539
0689c     B8 01 00 FF 
068a0     05 37 06 F6 | 	mov	local09, ##@LR__5787
068a4     16 13 02 F6 | 	mov	arg01, local04
068a8     1B 15 02 F6 | 	mov	arg02, local09
068ac     E8 06 B2 FD | 	call	#__system___string_cmp
068b0     00 FA 4D F2 | 	cmps	result1, #0 wz
068b4     60 00 90 AD |  if_e	jmp	#LR__0540
068b8     B8 01 00 FF 
068bc     07 35 06 F6 | 	mov	local08, ##@LR__5788
068c0     16 13 02 F6 | 	mov	arg01, local04
068c4     1A 15 02 F6 | 	mov	arg02, local08
068c8     CC 06 B2 FD | 	call	#__system___string_cmp
068cc     FD 36 0A F6 | 	mov	local09, result1 wz
068d0     44 00 90 AD |  if_e	jmp	#LR__0540
068d4     B8 01 00 FF 
068d8     09 3D 06 F6 | 	mov	local12, ##@LR__5789
068dc     1E 35 02 F6 | 	mov	local08, local12
068e0     16 13 02 F6 | 	mov	arg01, local04
068e4     1A 15 02 F6 | 	mov	arg02, local08
068e8     AC 06 B2 FD | 	call	#__system___string_cmp
068ec     FD 32 0A F6 | 	mov	local07, result1 wz
068f0     24 00 90 AD |  if_e	jmp	#LR__0540
068f4     B8 01 00 FF 
068f8     0B 3F 06 F6 | 	mov	local13, ##@LR__5790
068fc     1F 3D 02 F6 | 	mov	local12, local13
06900     16 13 02 F6 | 	mov	arg01, local04
06904     1E 15 02 F6 | 	mov	arg02, local12
06908     8C 06 B2 FD | 	call	#__system___string_cmp
0690c     FD 34 0A F6 | 	mov	local08, result1 wz
06910     00 FA 05 56 |  if_ne	mov	result1, #0
06914     0C 00 90 5D |  if_ne	jmp	#LR__0543
06918                 | LR__0540
06918     01 2E 06 F1 | 	add	local05, #1
0691c     44 FE 9F FD | 	jmp	#LR__0534
06920                 | LR__0541
06920                 | LR__0542
06920                 | ' return true
06920     01 FA 65 F6 | 	neg	result1, #1
06924                 | LR__0543
06924     A7 F0 03 F6 | 	mov	ptra, fp
06928     B2 00 A0 FD | 	call	#popregs_
0692c                 | _isname_ret
0692c     2D 00 64 FD | 	ret
06930                 | 
06930                 | ' 
06930                 | ' ' Check if the part is a number.  
06930                 | ' 
06930                 | ' function isnum(s as string) as boolean 
06930                 | _isnum
06930     13 4A 05 F6 | 	mov	COUNT_, #19
06934     A8 00 A0 FD | 	call	#pushregs_
06938     09 27 02 F6 | 	mov	local01, arg01
0693c     00 28 06 F6 | 	mov	local02, #0
06940     00 2A 06 F6 | 	mov	local03, #0
06944     13 13 02 F6 | 	mov	arg01, local01
06948     09 2D 02 F6 | 	mov	local04, arg01
0694c     97 06 48 FB | 	callpa	#(@LR__0551-@LR__0550)>>2,fcache_load_ptr_
06950                 | LR__0550
06950     16 FB C9 FA | 	rdbyte	result1, local04 wz
06954     01 2C 06 51 |  if_ne	add	local04, #1
06958     F4 FF 9F 5D |  if_ne	jmp	#LR__0550
0695c                 | LR__0551
0695c     09 2D 82 F1 | 	sub	local04, arg01
06960     16 FB 01 F6 | 	mov	result1, local04
06964     FD 2E 0A F6 | 	mov	local05, result1 wz
06968     00 FA 05 A6 |  if_e	mov	result1, #0
0696c     A0 03 90 AD |  if_e	jmp	#LR__0566
06970     13 13 02 F6 | 	mov	arg01, local01
06974     01 14 06 F6 | 	mov	arg02, #1
06978     01 16 06 F6 | 	mov	arg03, #1
0697c     84 27 B2 FD | 	call	#__system__Mid_S
06980     FD 30 02 F6 | 	mov	local06, result1
06984                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06984     B8 01 00 FF 
06988     0D 15 06 F6 | 	mov	arg02, ##@LR__5791
0698c     18 13 02 F6 | 	mov	arg01, local06
06990     04 06 B2 FD | 	call	#__system___string_cmp
06994     00 FA 55 F2 | 	cmps	result1, #0 wc
06998     1C 00 90 CD |  if_b	jmp	#LR__0552
0699c     B8 01 00 FF 
069a0     0F 33 06 F6 | 	mov	local07, ##@LR__5792
069a4     18 13 02 F6 | 	mov	arg01, local06
069a8     19 15 02 F6 | 	mov	arg02, local07
069ac     E8 05 B2 FD | 	call	#__system___string_cmp
069b0     01 FA 55 F2 | 	cmps	result1, #1 wc
069b4     84 00 90 CD |  if_b	jmp	#LR__0553
069b8                 | LR__0552
069b8     B8 01 00 FF 
069bc     11 35 06 F6 | 	mov	local08, ##@LR__5793
069c0     1A 33 02 F6 | 	mov	local07, local08
069c4     18 13 02 F6 | 	mov	arg01, local06
069c8     19 15 02 F6 | 	mov	arg02, local07
069cc     C8 05 B2 FD | 	call	#__system___string_cmp
069d0     00 FA 0D F2 | 	cmp	result1, #0 wz
069d4     64 00 90 AD |  if_e	jmp	#LR__0553
069d8     B8 01 00 FF 
069dc     13 37 06 F6 | 	mov	local09, ##@LR__5794
069e0     1B 35 02 F6 | 	mov	local08, local09
069e4     18 13 02 F6 | 	mov	arg01, local06
069e8     1A 15 02 F6 | 	mov	arg02, local08
069ec     A8 05 B2 FD | 	call	#__system___string_cmp
069f0     FD 32 0A F6 | 	mov	local07, result1 wz
069f4     44 00 90 AD |  if_e	jmp	#LR__0553
069f8     B8 01 00 FF 
069fc     15 39 06 F6 | 	mov	local10, ##@LR__5795
06a00     1C 37 02 F6 | 	mov	local09, local10
06a04     18 13 02 F6 | 	mov	arg01, local06
06a08     1B 15 02 F6 | 	mov	arg02, local09
06a0c     88 05 B2 FD | 	call	#__system___string_cmp
06a10     FD 34 0A F6 | 	mov	local08, result1 wz
06a14     24 00 90 AD |  if_e	jmp	#LR__0553
06a18     B8 01 00 FF 
06a1c     17 3B 06 F6 | 	mov	local11, ##@LR__5796
06a20     1D 39 02 F6 | 	mov	local10, local11
06a24     18 13 02 F6 | 	mov	arg01, local06
06a28     1C 15 02 F6 | 	mov	arg02, local10
06a2c     68 05 B2 FD | 	call	#__system___string_cmp
06a30     FD 36 0A F6 | 	mov	local09, result1 wz
06a34     00 FA 05 56 |  if_ne	mov	result1, #0
06a38     D4 02 90 5D |  if_ne	jmp	#LR__0566
06a3c                 | LR__0553
06a3c                 | ' if m$="." then ds=1
06a3c     B8 01 00 FF 
06a40     19 15 06 F6 | 	mov	arg02, ##@LR__5797
06a44     18 13 02 F6 | 	mov	arg01, local06
06a48     4C 05 B2 FD | 	call	#__system___string_cmp
06a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
06a50     01 28 06 A6 |  if_e	mov	local02, #1
06a54                 | ' if m$="$" then hex=1 else hex=0
06a54     B8 01 00 FF 
06a58     1B 15 06 F6 | 	mov	arg02, ##@LR__5798
06a5c     18 13 02 F6 | 	mov	arg01, local06
06a60     34 05 B2 FD | 	call	#__system___string_cmp
06a64     00 FA 0D F2 | 	cmp	result1, #0 wz
06a68     01 3C 06 A6 |  if_e	mov	local12, #1
06a6c     00 3C 06 56 |  if_ne	mov	local12, #0
06a70                 | ' if m$="%" then bin=1 else bin=0
06a70     B8 01 00 FF 
06a74     1D 15 06 F6 | 	mov	arg02, ##@LR__5799
06a78     18 13 02 F6 | 	mov	arg01, local06
06a7c     18 05 B2 FD | 	call	#__system___string_cmp
06a80     00 FA 0D F2 | 	cmp	result1, #0 wz
06a84     01 3E 06 A6 |  if_e	mov	local13, #1
06a88     00 3E 06 56 |  if_ne	mov	local13, #0
06a8c                 | ' if l>1 then 
06a8c     02 2E 56 F2 | 	cmps	local05, #2 wc
06a90     78 02 90 CD |  if_b	jmp	#LR__0565
06a94                 | '   for i=2 to l
06a94     02 40 06 F6 | 	mov	local14, #2
06a98     17 43 02 F6 | 	mov	local15, local05
06a9c     01 42 06 F1 | 	add	local15, #1
06aa0                 | LR__0554
06aa0     21 41 52 F2 | 	cmps	local14, local15 wc
06aa4     64 02 90 3D |  if_ae	jmp	#LR__0564
06aa8     13 13 02 F6 | 	mov	arg01, local01
06aac     20 15 02 F6 | 	mov	arg02, local14
06ab0     01 16 06 F6 | 	mov	arg03, #1
06ab4     4C 26 B2 FD | 	call	#__system__Mid_S
06ab8     FD 30 02 F6 | 	mov	local06, result1
06abc     00 44 06 F6 | 	mov	local16, #0
06ac0                 | '     m$=mid$(s,i,1) : b=false
06ac0                 | '     if m$>="0" andalso m$<="9" then b=true  
06ac0     B8 01 00 FF 
06ac4     1F 15 06 F6 | 	mov	arg02, ##@LR__5800
06ac8     18 13 02 F6 | 	mov	arg01, local06
06acc     C8 04 B2 FD | 	call	#__system___string_cmp
06ad0     00 FA 55 F2 | 	cmps	result1, #0 wc
06ad4     1C 00 90 CD |  if_b	jmp	#LR__0555
06ad8     B8 01 00 FF 
06adc     21 33 06 F6 | 	mov	local07, ##@LR__5801
06ae0     18 13 02 F6 | 	mov	arg01, local06
06ae4     19 15 02 F6 | 	mov	arg02, local07
06ae8     AC 04 B2 FD | 	call	#__system___string_cmp
06aec     01 FA 55 F2 | 	cmps	result1, #1 wc
06af0     01 44 66 C6 |  if_b	neg	local16, #1
06af4                 | LR__0555
06af4                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
06af4     B8 01 00 FF 
06af8     23 15 06 F6 | 	mov	arg02, ##@LR__5802
06afc     18 13 02 F6 | 	mov	arg01, local06
06b00     94 04 B2 FD | 	call	#__system___string_cmp
06b04     00 FA 0D F2 | 	cmp	result1, #0 wz
06b08     7C 00 90 AD |  if_e	jmp	#LR__0556
06b0c     B8 01 00 FF 
06b10     25 33 06 F6 | 	mov	local07, ##@LR__5803
06b14     18 13 02 F6 | 	mov	arg01, local06
06b18     19 15 02 F6 | 	mov	arg02, local07
06b1c     78 04 B2 FD | 	call	#__system___string_cmp
06b20     00 FA 0D F2 | 	cmp	result1, #0 wz
06b24     60 00 90 AD |  if_e	jmp	#LR__0556
06b28     B8 01 00 FF 
06b2c     27 35 06 F6 | 	mov	local08, ##@LR__5804
06b30     1A 33 02 F6 | 	mov	local07, local08
06b34     18 13 02 F6 | 	mov	arg01, local06
06b38     19 15 02 F6 | 	mov	arg02, local07
06b3c     58 04 B2 FD | 	call	#__system___string_cmp
06b40     00 FA 0D F2 | 	cmp	result1, #0 wz
06b44     40 00 90 AD |  if_e	jmp	#LR__0556
06b48     B8 01 00 FF 
06b4c     29 37 06 F6 | 	mov	local09, ##@LR__5805
06b50     1B 35 02 F6 | 	mov	local08, local09
06b54     18 13 02 F6 | 	mov	arg01, local06
06b58     1A 15 02 F6 | 	mov	arg02, local08
06b5c     38 04 B2 FD | 	call	#__system___string_cmp
06b60     FD 32 0A F6 | 	mov	local07, result1 wz
06b64     20 00 90 AD |  if_e	jmp	#LR__0556
06b68     B8 01 00 FF 
06b6c     2B 39 06 F6 | 	mov	local10, ##@LR__5806
06b70     1C 37 02 F6 | 	mov	local09, local10
06b74     18 13 02 F6 | 	mov	arg01, local06
06b78     1B 15 02 F6 | 	mov	arg02, local09
06b7c     18 04 B2 FD | 	call	#__system___string_cmp
06b80     FD 34 0A F6 | 	mov	local08, result1 wz
06b84     04 00 90 5D |  if_ne	jmp	#LR__0557
06b88                 | LR__0556
06b88     01 44 66 F6 | 	neg	local16, #1
06b8c                 | LR__0557
06b8c                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06b8c     01 3C 0E F2 | 	cmp	local12, #1 wz
06b90     34 00 90 5D |  if_ne	jmp	#LR__0558
06b94     B8 01 00 FF 
06b98     2D 15 06 F6 | 	mov	arg02, ##@LR__5807
06b9c     18 13 02 F6 | 	mov	arg01, local06
06ba0     F4 03 B2 FD | 	call	#__system___string_cmp
06ba4     00 FA 55 F2 | 	cmps	result1, #0 wc
06ba8     1C 00 90 CD |  if_b	jmp	#LR__0558
06bac     B8 01 00 FF 
06bb0     2F 33 06 F6 | 	mov	local07, ##@LR__5808
06bb4     18 13 02 F6 | 	mov	arg01, local06
06bb8     19 15 02 F6 | 	mov	arg02, local07
06bbc     D8 03 B2 FD | 	call	#__system___string_cmp
06bc0     01 FA 55 F2 | 	cmps	result1, #1 wc
06bc4     01 44 66 C6 |  if_b	neg	local16, #1
06bc8                 | LR__0558
06bc8                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06bc8     01 3E 0E F2 | 	cmp	local13, #1 wz
06bcc     58 00 90 5D |  if_ne	jmp	#LR__0560
06bd0     B8 01 00 FF 
06bd4     31 15 06 F6 | 	mov	arg02, ##@LR__5809
06bd8     18 13 02 F6 | 	mov	arg01, local06
06bdc     B8 03 B2 FD | 	call	#__system___string_cmp
06be0     00 FA 55 F2 | 	cmps	result1, #0 wc
06be4     1C 00 90 CD |  if_b	jmp	#LR__0559
06be8     B8 01 00 FF 
06bec     33 33 06 F6 | 	mov	local07, ##@LR__5810
06bf0     18 13 02 F6 | 	mov	arg01, local06
06bf4     19 15 02 F6 | 	mov	arg02, local07
06bf8     9C 03 B2 FD | 	call	#__system___string_cmp
06bfc     01 FA 55 F2 | 	cmps	result1, #1 wc
06c00     24 00 90 CD |  if_b	jmp	#LR__0560
06c04                 | LR__0559
06c04     B8 01 00 FF 
06c08     35 35 06 F6 | 	mov	local08, ##@LR__5811
06c0c     1A 33 02 F6 | 	mov	local07, local08
06c10     18 13 02 F6 | 	mov	arg01, local06
06c14     19 15 02 F6 | 	mov	arg02, local07
06c18     7C 03 B2 FD | 	call	#__system___string_cmp
06c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
06c20     00 FA 05 56 |  if_ne	mov	result1, #0
06c24     E8 00 90 5D |  if_ne	jmp	#LR__0566
06c28                 | LR__0560
06c28                 | '     if not b then return false
06c28     22 45 22 F6 | 	not	local16, local16
06c2c     00 44 0E F2 | 	cmp	local16, #0 wz
06c30     00 FA 05 56 |  if_ne	mov	result1, #0
06c34     D8 00 90 5D |  if_ne	jmp	#LR__0566
06c38                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06c38     B8 01 00 FF 
06c3c     37 15 06 F6 | 	mov	arg02, ##@LR__5812
06c40     18 13 02 F6 | 	mov	arg01, local06
06c44     50 03 B2 FD | 	call	#__system___string_cmp
06c48     00 FA 0D F2 | 	cmp	result1, #0 wz
06c4c     3C 00 90 5D |  if_ne	jmp	#LR__0561
06c50     20 15 02 F6 | 	mov	arg02, local14
06c54     01 14 86 F1 | 	sub	arg02, #1
06c58     13 13 02 F6 | 	mov	arg01, local01
06c5c     01 16 06 F6 | 	mov	arg03, #1
06c60     A0 24 B2 FD | 	call	#__system__Mid_S
06c64     FD 12 02 F6 | 	mov	arg01, result1
06c68     90 26 B2 FD | 	call	#__system__LCase_S
06c6c     FD 12 02 F6 | 	mov	arg01, result1
06c70     B8 01 00 FF 
06c74     39 33 06 F6 | 	mov	local07, ##@LR__5813
06c78     19 15 02 F6 | 	mov	arg02, local07
06c7c     18 03 B2 FD | 	call	#__system___string_cmp
06c80     00 FA 0D F2 | 	cmp	result1, #0 wz
06c84     00 FA 05 56 |  if_ne	mov	result1, #0
06c88     84 00 90 5D |  if_ne	jmp	#LR__0566
06c8c                 | LR__0561
06c8c                 | '     if m$="." then ds+=1: if ds>1 then return false
06c8c     B8 01 00 FF 
06c90     3B 15 06 F6 | 	mov	arg02, ##@LR__5814
06c94     18 13 02 F6 | 	mov	arg01, local06
06c98     FC 02 B2 FD | 	call	#__system___string_cmp
06c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
06ca0     01 28 06 A1 |  if_e	add	local02, #1
06ca4     02 28 56 A2 |  if_e	cmps	local02, #2 wc
06ca8     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06cac     60 00 90 2D |  if_nc_and_z	jmp	#LR__0566
06cb0                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06cb0     B8 01 00 FF 
06cb4     3D 47 06 F6 | 	mov	local17, ##@LR__5815
06cb8     23 49 02 F6 | 	mov	local18, local17
06cbc     18 13 02 F6 | 	mov	arg01, local06
06cc0     24 15 02 F6 | 	mov	arg02, local18
06cc4     D0 02 B2 FD | 	call	#__system___string_cmp
06cc8     FD 4A 0A F6 | 	mov	local19, result1 wz
06ccc     20 00 90 AD |  if_e	jmp	#LR__0562
06cd0     B8 01 00 FF 
06cd4     3F 33 06 F6 | 	mov	local07, ##@LR__5816
06cd8     19 47 02 F6 | 	mov	local17, local07
06cdc     18 13 02 F6 | 	mov	arg01, local06
06ce0     23 15 02 F6 | 	mov	arg02, local17
06ce4     B0 02 B2 FD | 	call	#__system___string_cmp
06ce8     FD 48 0A F6 | 	mov	local18, result1 wz
06cec     14 00 90 5D |  if_ne	jmp	#LR__0563
06cf0                 | LR__0562
06cf0     01 2A 06 F1 | 	add	local03, #1
06cf4     00 3C 0E F2 | 	cmp	local12, #0 wz
06cf8     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
06cfc     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06d00     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0566
06d04                 | LR__0563
06d04     01 40 06 F1 | 	add	local14, #1
06d08     94 FD 9F FD | 	jmp	#LR__0554
06d0c                 | LR__0564
06d0c                 | LR__0565
06d0c                 | ' return true
06d0c     01 FA 65 F6 | 	neg	result1, #1
06d10                 | LR__0566
06d10     A7 F0 03 F6 | 	mov	ptra, fp
06d14     B2 00 A0 FD | 	call	#popregs_
06d18                 | _isnum_ret
06d18     2D 00 64 FD | 	ret
06d1c                 | 
06d1c                 | '   
06d1c                 | ' ' Check if the part is an integer number.    
06d1c                 | '   
06d1c                 | ' function isint(s as string) as boolean
06d1c                 | _isint
06d1c     0E 4A 05 F6 | 	mov	COUNT_, #14
06d20     A8 00 A0 FD | 	call	#pushregs_
06d24     09 27 02 F6 | 	mov	local01, arg01
06d28     09 29 02 F6 | 	mov	local02, arg01
06d2c     97 06 48 FB | 	callpa	#(@LR__0571-@LR__0570)>>2,fcache_load_ptr_
06d30                 | LR__0570
06d30     14 FB C9 FA | 	rdbyte	result1, local02 wz
06d34     01 28 06 51 |  if_ne	add	local02, #1
06d38     F4 FF 9F 5D |  if_ne	jmp	#LR__0570
06d3c                 | LR__0571
06d3c     09 29 82 F1 | 	sub	local02, arg01
06d40     14 FB 01 F6 | 	mov	result1, local02
06d44     FD 2A 0A F6 | 	mov	local03, result1 wz
06d48     00 FA 05 A6 |  if_e	mov	result1, #0
06d4c     64 02 90 AD |  if_e	jmp	#LR__0584
06d50     13 13 02 F6 | 	mov	arg01, local01
06d54     01 14 06 F6 | 	mov	arg02, #1
06d58     01 16 06 F6 | 	mov	arg03, #1
06d5c     A4 23 B2 FD | 	call	#__system__Mid_S
06d60     FD 2C 02 F6 | 	mov	local04, result1
06d64                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06d64     B8 01 00 FF 
06d68     41 15 06 F6 | 	mov	arg02, ##@LR__5817
06d6c     16 13 02 F6 | 	mov	arg01, local04
06d70     24 02 B2 FD | 	call	#__system___string_cmp
06d74     00 FA 55 F2 | 	cmps	result1, #0 wc
06d78     1C 00 90 CD |  if_b	jmp	#LR__0572
06d7c     B8 01 00 FF 
06d80     43 2F 06 F6 | 	mov	local05, ##@LR__5818
06d84     16 13 02 F6 | 	mov	arg01, local04
06d88     17 15 02 F6 | 	mov	arg02, local05
06d8c     08 02 B2 FD | 	call	#__system___string_cmp
06d90     01 FA 55 F2 | 	cmps	result1, #1 wc
06d94     64 00 90 CD |  if_b	jmp	#LR__0573
06d98                 | LR__0572
06d98     B8 01 00 FF 
06d9c     45 31 06 F6 | 	mov	local06, ##@LR__5819
06da0     18 2F 02 F6 | 	mov	local05, local06
06da4     16 13 02 F6 | 	mov	arg01, local04
06da8     17 15 02 F6 | 	mov	arg02, local05
06dac     E8 01 B2 FD | 	call	#__system___string_cmp
06db0     00 FA 0D F2 | 	cmp	result1, #0 wz
06db4     44 00 90 AD |  if_e	jmp	#LR__0573
06db8     B8 01 00 FF 
06dbc     47 33 06 F6 | 	mov	local07, ##@LR__5820
06dc0     19 31 02 F6 | 	mov	local06, local07
06dc4     16 13 02 F6 | 	mov	arg01, local04
06dc8     18 15 02 F6 | 	mov	arg02, local06
06dcc     C8 01 B2 FD | 	call	#__system___string_cmp
06dd0     FD 2E 0A F6 | 	mov	local05, result1 wz
06dd4     24 00 90 AD |  if_e	jmp	#LR__0573
06dd8     B8 01 00 FF 
06ddc     49 35 06 F6 | 	mov	local08, ##@LR__5821
06de0     1A 33 02 F6 | 	mov	local07, local08
06de4     16 13 02 F6 | 	mov	arg01, local04
06de8     19 15 02 F6 | 	mov	arg02, local07
06dec     A8 01 B2 FD | 	call	#__system___string_cmp
06df0     FD 30 0A F6 | 	mov	local06, result1 wz
06df4     00 FA 05 56 |  if_ne	mov	result1, #0
06df8     B8 01 90 5D |  if_ne	jmp	#LR__0584
06dfc                 | LR__0573
06dfc                 | ' if m$="$" then hex=1 else hex=0
06dfc     B8 01 00 FF 
06e00     4B 15 06 F6 | 	mov	arg02, ##@LR__5822
06e04     16 13 02 F6 | 	mov	arg01, local04
06e08     8C 01 B2 FD | 	call	#__system___string_cmp
06e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
06e10     01 36 06 A6 |  if_e	mov	local09, #1
06e14     00 36 06 56 |  if_ne	mov	local09, #0
06e18                 | ' if m$="%" then bin=1 else bin=0
06e18     B8 01 00 FF 
06e1c     4D 15 06 F6 | 	mov	arg02, ##@LR__5823
06e20     16 13 02 F6 | 	mov	arg01, local04
06e24     70 01 B2 FD | 	call	#__system___string_cmp
06e28     00 FA 0D F2 | 	cmp	result1, #0 wz
06e2c     01 38 06 A6 |  if_e	mov	local10, #1
06e30     00 38 06 56 |  if_ne	mov	local10, #0
06e34                 | ' if l>1 then 
06e34     02 2A 56 F2 | 	cmps	local03, #2 wc
06e38     74 01 90 CD |  if_b	jmp	#LR__0583
06e3c                 | '   for i=2 to l
06e3c     02 3A 06 F6 | 	mov	local11, #2
06e40     15 3D 02 F6 | 	mov	local12, local03
06e44     01 3C 06 F1 | 	add	local12, #1
06e48                 | LR__0574
06e48     1E 3B 52 F2 | 	cmps	local11, local12 wc
06e4c     60 01 90 3D |  if_ae	jmp	#LR__0582
06e50     13 13 02 F6 | 	mov	arg01, local01
06e54     1D 15 02 F6 | 	mov	arg02, local11
06e58     01 16 06 F6 | 	mov	arg03, #1
06e5c     A4 22 B2 FD | 	call	#__system__Mid_S
06e60     FD 2C 02 F6 | 	mov	local04, result1
06e64                 | '     m$=mid$(s,i,1) 
06e64                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06e64     00 36 0E F2 | 	cmp	local09, #0 wz
06e68     50 00 90 5D |  if_ne	jmp	#LR__0576
06e6c     B8 01 00 FF 
06e70     4F 15 06 F6 | 	mov	arg02, ##@LR__5824
06e74     16 13 02 F6 | 	mov	arg01, local04
06e78     1C 01 B2 FD | 	call	#__system___string_cmp
06e7c     00 FA 55 F2 | 	cmps	result1, #0 wc
06e80     18 00 90 CD |  if_b	jmp	#LR__0575
06e84     B8 01 00 FF 
06e88     51 15 06 F6 | 	mov	arg02, ##@LR__5825
06e8c     16 13 02 F6 | 	mov	arg01, local04
06e90     04 01 B2 FD | 	call	#__system___string_cmp
06e94     01 FA 55 F2 | 	cmps	result1, #1 wc
06e98     20 00 90 CD |  if_b	jmp	#LR__0576
06e9c                 | LR__0575
06e9c     B8 01 00 FF 
06ea0     53 31 06 F6 | 	mov	local06, ##@LR__5826
06ea4     16 13 02 F6 | 	mov	arg01, local04
06ea8     18 15 02 F6 | 	mov	arg02, local06
06eac     E8 00 B2 FD | 	call	#__system___string_cmp
06eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
06eb4     00 FA 05 56 |  if_ne	mov	result1, #0
06eb8     F8 00 90 5D |  if_ne	jmp	#LR__0584
06ebc                 | LR__0576
06ebc                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06ebc     01 36 0E F2 | 	cmp	local09, #1 wz
06ec0     90 00 90 5D |  if_ne	jmp	#LR__0579
06ec4     B8 01 00 FF 
06ec8     55 15 06 F6 | 	mov	arg02, ##@LR__5827
06ecc     16 13 02 F6 | 	mov	arg01, local04
06ed0     C4 00 B2 FD | 	call	#__system___string_cmp
06ed4     00 FA 55 F2 | 	cmps	result1, #0 wc
06ed8     1C 00 90 CD |  if_b	jmp	#LR__0577
06edc     B8 01 00 FF 
06ee0     57 15 06 F6 | 	mov	arg02, ##@LR__5828
06ee4     16 13 02 F6 | 	mov	arg01, local04
06ee8     AC 00 B2 FD | 	call	#__system___string_cmp
06eec     FD 3E 02 F6 | 	mov	local13, result1
06ef0     01 3E 56 F2 | 	cmps	local13, #1 wc
06ef4     5C 00 90 CD |  if_b	jmp	#LR__0579
06ef8                 | LR__0577
06ef8     B8 01 00 FF 
06efc     59 2F 06 F6 | 	mov	local05, ##@LR__5829
06f00     16 13 02 F6 | 	mov	arg01, local04
06f04     17 15 02 F6 | 	mov	arg02, local05
06f08     8C 00 B2 FD | 	call	#__system___string_cmp
06f0c     FD 40 02 F6 | 	mov	local14, result1
06f10     00 40 56 F2 | 	cmps	local14, #0 wc
06f14     1C 00 90 CD |  if_b	jmp	#LR__0578
06f18     B8 01 00 FF 
06f1c     5B 33 06 F6 | 	mov	local07, ##@LR__5830
06f20     16 13 02 F6 | 	mov	arg01, local04
06f24     19 15 02 F6 | 	mov	arg02, local07
06f28     6C 00 B2 FD | 	call	#__system___string_cmp
06f2c     01 FA 55 F2 | 	cmps	result1, #1 wc
06f30     20 00 90 CD |  if_b	jmp	#LR__0579
06f34                 | LR__0578
06f34     B8 01 00 FF 
06f38     5D 35 06 F6 | 	mov	local08, ##@LR__5831
06f3c     16 13 02 F6 | 	mov	arg01, local04
06f40     1A 15 02 F6 | 	mov	arg02, local08
06f44     50 00 B2 FD | 	call	#__system___string_cmp
06f48     00 FA 0D F2 | 	cmp	result1, #0 wz
06f4c     00 FA 05 56 |  if_ne	mov	result1, #0
06f50     60 00 90 5D |  if_ne	jmp	#LR__0584
06f54                 | LR__0579
06f54                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
06f54     01 38 0E F2 | 	cmp	local10, #1 wz
06f58     4C 00 90 5D |  if_ne	jmp	#LR__0581
06f5c     B8 01 00 FF 
06f60     5F 15 06 F6 | 	mov	arg02, ##@LR__5832
06f64     16 13 02 F6 | 	mov	arg01, local04
06f68     2C 00 B2 FD | 	call	#__system___string_cmp
06f6c     00 FA 55 F2 | 	cmps	result1, #0 wc
06f70     18 00 90 CD |  if_b	jmp	#LR__0580
06f74     B8 01 00 FF 
06f78     61 15 06 F6 | 	mov	arg02, ##@LR__5833
06f7c     16 13 02 F6 | 	mov	arg01, local04
06f80     14 00 B2 FD | 	call	#__system___string_cmp
06f84     01 FA 55 F2 | 	cmps	result1, #1 wc
06f88     1C 00 90 CD |  if_b	jmp	#LR__0581
06f8c                 | LR__0580
06f8c     B8 01 00 FF 
06f90     63 15 06 F6 | 	mov	arg02, ##@LR__5834
06f94     16 13 02 F6 | 	mov	arg01, local04
06f98     FC FF B1 FD | 	call	#__system___string_cmp
06f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
06fa0     00 FA 05 56 |  if_ne	mov	result1, #0
06fa4     0C 00 90 5D |  if_ne	jmp	#LR__0584
06fa8                 | LR__0581
06fa8     01 3A 06 F1 | 	add	local11, #1
06fac     98 FE 9F FD | 	jmp	#LR__0574
06fb0                 | LR__0582
06fb0                 | LR__0583
06fb0                 | ' return true
06fb0     01 FA 65 F6 | 	neg	result1, #1
06fb4                 | LR__0584
06fb4     A7 F0 03 F6 | 	mov	ptra, fp
06fb8     B2 00 A0 FD | 	call	#popregs_
06fbc                 | _isint_ret
06fbc     2D 00 64 FD | 	ret
06fc0                 | 
06fc0                 | ' 
06fc0                 | ' ' Check if the part is a positive decimal number.  
06fc0                 | ' 
06fc0                 | ' function isdec(s as string) as boolean
06fc0                 | _isdec
06fc0     05 4A 05 F6 | 	mov	COUNT_, #5
06fc4     A8 00 A0 FD | 	call	#pushregs_
06fc8     09 27 02 F6 | 	mov	local01, arg01
06fcc     09 29 02 F6 | 	mov	local02, arg01
06fd0     97 06 48 FB | 	callpa	#(@LR__0591-@LR__0590)>>2,fcache_load_ptr_
06fd4                 | LR__0590
06fd4     14 FB C9 FA | 	rdbyte	result1, local02 wz
06fd8     01 28 06 51 |  if_ne	add	local02, #1
06fdc     F4 FF 9F 5D |  if_ne	jmp	#LR__0590
06fe0                 | LR__0591
06fe0     09 29 82 F1 | 	sub	local02, arg01
06fe4     14 FB 01 F6 | 	mov	result1, local02
06fe8     FD 28 0A F6 | 	mov	local02, result1 wz
06fec     00 FA 05 A6 |  if_e	mov	result1, #0
06ff0     80 00 90 AD |  if_e	jmp	#LR__0596
06ff4                 | ' for i=1 to l
06ff4     01 2A 06 F6 | 	mov	local03, #1
06ff8     14 2D 02 F6 | 	mov	local04, local02
06ffc     01 2C 06 F1 | 	add	local04, #1
07000                 | LR__0592
07000     16 2B 52 F2 | 	cmps	local03, local04 wc
07004     68 00 90 3D |  if_ae	jmp	#LR__0595
07008     13 13 02 F6 | 	mov	arg01, local01
0700c     15 15 02 F6 | 	mov	arg02, local03
07010     01 16 06 F6 | 	mov	arg03, #1
07014     EC 20 B2 FD | 	call	#__system__Mid_S
07018     FD 2E 02 F6 | 	mov	local05, result1
0701c                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
0701c     B8 01 00 FF 
07020     65 15 06 F6 | 	mov	arg02, ##@LR__5835
07024     17 13 02 F6 | 	mov	arg01, local05
07028     6C FF B1 FD | 	call	#__system___string_cmp
0702c     00 FA 55 F2 | 	cmps	result1, #0 wc
07030     18 00 90 CD |  if_b	jmp	#LR__0593
07034     B8 01 00 FF 
07038     67 15 06 F6 | 	mov	arg02, ##@LR__5836
0703c     17 13 02 F6 | 	mov	arg01, local05
07040     54 FF B1 FD | 	call	#__system___string_cmp
07044     01 FA 55 F2 | 	cmps	result1, #1 wc
07048     1C 00 90 CD |  if_b	jmp	#LR__0594
0704c                 | LR__0593
0704c     B8 01 00 FF 
07050     69 15 06 F6 | 	mov	arg02, ##@LR__5837
07054     17 13 02 F6 | 	mov	arg01, local05
07058     3C FF B1 FD | 	call	#__system___string_cmp
0705c     00 FA 0D F2 | 	cmp	result1, #0 wz
07060     00 FA 05 56 |  if_ne	mov	result1, #0
07064     0C 00 90 5D |  if_ne	jmp	#LR__0596
07068                 | LR__0594
07068     01 2A 06 F1 | 	add	local03, #1
0706c     90 FF 9F FD | 	jmp	#LR__0592
07070                 | LR__0595
07070                 | ' return true
07070     01 FA 65 F6 | 	neg	result1, #1
07074                 | LR__0596
07074     A7 F0 03 F6 | 	mov	ptra, fp
07078     B2 00 A0 FD | 	call	#popregs_
0707c                 | _isdec_ret
0707c     2D 00 64 FD | 	ret
07080                 | 
07080                 | ' 
07080                 | ' ' Check if the part is a string.  
07080                 | ' 
07080                 | ' function isstring(s as string) as boolean
07080                 | _isstring
07080     01 4A 05 F6 | 	mov	COUNT_, #1
07084     A8 00 A0 FD | 	call	#pushregs_
07088                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
07088     09 27 02 F6 | 	mov	local01, arg01
0708c     01 14 06 F6 | 	mov	arg02, #1
07090     58 1F B2 FD | 	call	#__system__Left_S
07094     FD 12 02 F6 | 	mov	arg01, result1
07098     B8 01 00 FF 
0709c     6B 15 06 F6 | 	mov	arg02, ##@LR__5838
070a0     F4 FE B1 FD | 	call	#__system___string_cmp
070a4     00 FA 4D F2 | 	cmps	result1, #0 wz
070a8     28 00 90 5D |  if_ne	jmp	#LR__0600
070ac     13 13 02 F6 | 	mov	arg01, local01
070b0     01 14 06 F6 | 	mov	arg02, #1
070b4     BC 1F B2 FD | 	call	#__system__Right_S
070b8     FD 12 02 F6 | 	mov	arg01, result1
070bc     B8 01 00 FF 
070c0     6D 15 06 F6 | 	mov	arg02, ##@LR__5839
070c4     D0 FE B1 FD | 	call	#__system___string_cmp
070c8     00 FA 4D F2 | 	cmps	result1, #0 wz
070cc     01 FA 65 A6 |  if_e	neg	result1, #1
070d0     04 00 90 AD |  if_e	jmp	#LR__0601
070d4                 | LR__0600
070d4     00 FA 05 F6 | 	mov	result1, #0
070d8                 | LR__0601
070d8     A7 F0 03 F6 | 	mov	ptra, fp
070dc     B2 00 A0 FD | 	call	#popregs_
070e0                 | _isstring_ret
070e0     2D 00 64 FD | 	ret
070e4                 | 
070e4                 | ' 
070e4                 | ' ' getnoteval. Returns the frequency of note token
070e4                 | ' 
070e4                 | ' function getnoteval(token) as single
070e4                 | _getnoteval
070e4     02 4A 05 F6 | 	mov	COUNT_, #2
070e8     A8 00 A0 FD | 	call	#pushregs_
070ec     01 00 00 FF 
070f0     00 13 86 F1 | 	sub	arg01, ##768
070f4     09 15 52 F6 | 	abs	arg02, arg01 wc
070f8     0C 14 16 FD | 	qdiv	arg02, #12
070fc     14 00 00 FF 
07100     D8 E4 05 F1 | 	add	objptr, ##10456
07104     19 14 62 FD | 	getqy	arg02
07108     0A 15 82 F6 | 	negc	arg02, arg02
0710c     02 14 66 F0 | 	shl	arg02, #2
07110     F2 14 02 F1 | 	add	arg02, objptr
07114     0A 27 02 FB | 	rdlong	local01, arg02
07118     09 15 52 F6 | 	abs	arg02, arg01 wc
0711c     0C 14 16 FD | 	qdiv	arg02, #12
07120     14 00 00 FF 
07124     D8 E4 85 F1 | 	sub	objptr, ##10456
07128     01 12 06 F6 | 	mov	arg01, #1
0712c                 | ' noteexp=1+(note/12) 
0712c                 | ' return (2.0^noteexp)*notebase
0712c     18 14 62 FD | 	getqx	arg02
07130     0A 13 82 F3 | 	sumc	arg01, arg02
07134     09 13 52 F6 | 	abs	arg01, arg01 wc
07138     1F 28 C6 C9 |  if_b	decod	local02, #31
0713c     00 28 06 36 |  if_ae	mov	local02, #0
07140     A0 28 B2 FD | 	call	#__system___float_fromuns
07144     14 FB 61 F5 | 	xor	result1, local02
07148     FD 14 02 F6 | 	mov	arg02, result1
0714c     1E 12 C6 F9 | 	decod	arg01, #30
07150     9C 3B B2 FD | 	call	#__system____builtin_powf
07154     FD 12 02 F6 | 	mov	arg01, result1
07158     13 15 02 F6 | 	mov	arg02, local01
0715c     88 2C B2 FD | 	call	#__system___float_mul
07160     A7 F0 03 F6 | 	mov	ptra, fp
07164     B2 00 A0 FD | 	call	#popregs_
07168                 | _getnoteval_ret
07168     2D 00 64 FD | 	ret
0716c                 | 
0716c                 | ' 
0716c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0716c                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
0716c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0716c                 | ' 
0716c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0716c                 | ' '
0716c                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
0716c                 | ' '
0716c                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
0716c                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
0716c                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
0716c                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
0716c                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
0716c                 | ' ' 
0716c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0716c                 | ' 
0716c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0716c                 | ' ' Helper functions to manage program lines
0716c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0716c                 | ' 
0716c                 | ' '----- delete a line from a program
0716c                 | ' 
0716c                 | ' function deleteline(aline as ulong) as integer
0716c                 | _deleteline
0716c     02 4A 05 F6 | 	mov	COUNT_, #2
07170     A8 00 A0 FD | 	call	#pushregs_
07174     2C F0 07 F1 | 	add	ptra, #44
07178     04 4E 05 F1 | 	add	fp, #4
0717c     A7 12 62 FC | 	wrlong	arg01, fp
07180     4A 00 00 FF 
07184     88 E4 05 F1 | 	add	objptr, ##38024
07188     F2 26 02 FB | 	rdlong	local01, objptr
0718c     0C 4E 05 F1 | 	add	fp, #12
07190     A7 26 62 FC | 	wrlong	local01, fp
07194     10 4E 85 F1 | 	sub	fp, #16
07198                 | ' 
07198                 | ' searchptr=programstart
07198                 | ' do
07198     3E 00 00 FF 
0719c     BC E5 85 F1 | 	sub	objptr, ##32188
071a0                 | LR__0610
071a0     14 4E 05 F1 | 	add	fp, #20
071a4     A7 12 02 F6 | 	mov	arg01, fp
071a8     04 4E 85 F1 | 	sub	fp, #4
071ac     A7 14 02 FB | 	rdlong	arg02, fp
071b0     10 4E 85 F1 | 	sub	fp, #16
071b4     18 16 06 F6 | 	mov	arg03, #24
071b8     2C F1 B1 FD | 	call	#_psram_spin2_read1
071bc     10 4E 05 F1 | 	add	fp, #16
071c0     A7 26 02 FB | 	rdlong	local01, fp
071c4     08 4E 85 F1 | 	sub	fp, #8
071c8     A7 26 62 FC | 	wrlong	local01, fp
071cc     20 4E 05 F1 | 	add	fp, #32
071d0     A7 26 02 FB | 	rdlong	local01, fp
071d4     18 4E 85 F1 | 	sub	fp, #24
071d8     A7 26 62 FC | 	wrlong	local01, fp
071dc     04 4E 05 F1 | 	add	fp, #4
071e0     A7 26 02 FB | 	rdlong	local01, fp
071e4     10 4E 85 F1 | 	sub	fp, #16
071e8     A7 16 02 FB | 	rdlong	arg03, fp
071ec     04 4E 85 F1 | 	sub	fp, #4
071f0     0B 27 12 F2 | 	cmp	local01, arg03 wc
071f4     28 4E 05 C1 |  if_b	add	fp, #40
071f8     A7 28 02 CB |  if_b	rdlong	local02, fp
071fc     28 4E 85 C1 |  if_b	sub	fp, #40
07200     FF FF 3F CF 
07204     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
07208     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0610
0720c     0B 00 00 FF 
07210     CC E4 85 F1 | 	sub	objptr, ##5836
07214                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
07214     14 4E 05 F1 | 	add	fp, #20
07218     A7 26 02 FB | 	rdlong	local01, fp
0721c     10 4E 85 F1 | 	sub	fp, #16
07220     A7 28 02 FB | 	rdlong	local02, fp
07224     04 4E 85 F1 | 	sub	fp, #4
07228     14 27 0A F2 | 	cmp	local01, local02 wz
0722c     01 FA 65 56 |  if_ne	neg	result1, #1
07230     34 02 90 5D |  if_ne	jmp	#LR__0615
07234     08 4E 05 F1 | 	add	fp, #8
07238     A7 12 02 FB | 	rdlong	arg01, fp
0723c     08 4E 85 F1 | 	sub	fp, #8
07240     01 14 66 F6 | 	neg	arg02, #1
07244     AC C4 B1 FD | 	call	#_pslpoke
07248                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
07248                 | ' 
07248                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
07248     28 4E 05 F1 | 	add	fp, #40
0724c     A7 26 02 FB | 	rdlong	local01, fp
07250     28 4E 85 F1 | 	sub	fp, #40
07254     FF FF 3F FF 
07258     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
0725c     24 4E 05 A1 |  if_e	add	fp, #36
07260     A7 28 02 AB |  if_e	rdlong	local02, fp
07264     24 4E 85 A1 |  if_e	sub	fp, #36
07268     FF FF 7F AF 
0726c     FF 29 0E A2 |  if_e	cmp	local02, ##-1 wz
07270     88 00 90 5D |  if_ne	jmp	#LR__0611
07274     4A 00 00 FF 
07278     88 E4 05 F1 | 	add	objptr, ##38024
0727c     00 04 80 FF 
07280     F2 00 68 FC | 	wrlong	##524288, objptr
07284     07 00 00 FF 
07288     2C E4 85 F1 | 	sub	objptr, ##3628
0728c     00 04 80 FF 
07290     F2 00 68 FC | 	wrlong	##524288, objptr
07294     07 00 00 FF 
07298     30 E4 05 F1 | 	add	objptr, ##3632
0729c     F2 00 68 FC | 	wrlong	#0, objptr
072a0     04 E4 05 F1 | 	add	objptr, #4
072a4     FF FF FF FF 
072a8     F2 FE 6B FC | 	wrlong	##-1, objptr
072ac     4A 00 00 FF 
072b0     90 E4 85 F1 | 	sub	objptr, ##38032
072b4     00 12 06 F6 | 	mov	arg01, #0
072b8     01 14 66 F6 | 	neg	arg02, #1
072bc     34 C4 B1 FD | 	call	#_pslpoke
072c0     10 12 06 F6 | 	mov	arg01, #16
072c4     01 14 66 F6 | 	neg	arg02, #1
072c8     28 C4 B1 FD | 	call	#_pslpoke
072cc     14 12 06 F6 | 	mov	arg01, #20
072d0     1E 14 CE F9 | 	bmask	arg02, #30
072d4     1C C4 B1 FD | 	call	#_pslpoke
072d8     50 00 00 FF 
072dc     B8 E4 05 F1 | 	add	objptr, ##41144
072e0     00 04 80 FF 
072e4     F2 00 68 FC | 	wrlong	##524288, objptr
072e8     04 E4 05 F1 | 	add	objptr, #4
072ec     00 04 80 FF 
072f0     F2 00 68 FC | 	wrlong	##524288, objptr
072f4     50 00 00 FF 
072f8     BC E4 85 F1 | 	sub	objptr, ##41148
072fc                 | LR__0611
072fc                 | ' 
072fc                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
072fc     28 4E 05 F1 | 	add	fp, #40
07300     A7 26 02 FB | 	rdlong	local01, fp
07304     28 4E 85 F1 | 	sub	fp, #40
07308     FF FF 3F FF 
0730c     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
07310     74 00 90 5D |  if_ne	jmp	#LR__0612
07314     24 4E 05 F1 | 	add	fp, #36
07318     A7 28 02 FB | 	rdlong	local02, fp
0731c     24 4E 85 F1 | 	sub	fp, #36
07320     FF FF 7F FF 
07324     FF 29 0E F2 | 	cmp	local02, ##-1 wz
07328     5C 00 90 AD |  if_e	jmp	#LR__0612
0732c     24 4E 05 F1 | 	add	fp, #36
07330     A7 12 02 FB | 	rdlong	arg01, fp
07334     24 4E 85 F1 | 	sub	fp, #36
07338     14 12 06 F1 | 	add	arg01, #20
0733c     1E 14 CE F9 | 	bmask	arg02, #30
07340     B0 C3 B1 FD | 	call	#_pslpoke
07344     24 4E 05 F1 | 	add	fp, #36
07348     A7 26 02 FB | 	rdlong	local01, fp
0734c     4A 00 00 FF 
07350     90 E4 05 F1 | 	add	objptr, ##38032
07354     F2 26 62 FC | 	wrlong	local01, objptr
07358     4A 00 00 FF 
0735c     90 E4 85 F1 | 	sub	objptr, ##38032
07360     A7 12 02 FB | 	rdlong	arg01, fp
07364     24 4E 85 F1 | 	sub	fp, #36
07368     B8 C4 B1 FD | 	call	#_pslpeek
0736c     4A 00 00 FF 
07370     8C E4 05 F1 | 	add	objptr, ##38028
07374     F2 FA 61 FC | 	wrlong	result1, objptr
07378     4A 00 00 FF 
0737c     8C E4 85 F1 | 	sub	objptr, ##38028
07380                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
07380                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
07380                 | '   lastline=pslpeek(header(4))
07380                 | '   return 0
07380     00 FA 05 F6 | 	mov	result1, #0
07384     E0 00 90 FD | 	jmp	#LR__0615
07388                 | LR__0612
07388                 | ' 
07388                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
07388     28 4E 05 F1 | 	add	fp, #40
0738c     A7 26 02 FB | 	rdlong	local01, fp
07390     28 4E 85 F1 | 	sub	fp, #40
07394     FF FF 3F FF 
07398     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
0739c     58 00 90 AD |  if_e	jmp	#LR__0613
073a0     24 4E 05 F1 | 	add	fp, #36
073a4     A7 28 02 FB | 	rdlong	local02, fp
073a8     24 4E 85 F1 | 	sub	fp, #36
073ac     FF FF 7F FF 
073b0     FF 29 0E F2 | 	cmp	local02, ##-1 wz
073b4     40 00 90 5D |  if_ne	jmp	#LR__0613
073b8     28 4E 05 F1 | 	add	fp, #40
073bc     A7 12 02 FB | 	rdlong	arg01, fp
073c0     28 4E 85 F1 | 	sub	fp, #40
073c4     10 12 06 F1 | 	add	arg01, #16
073c8     01 14 66 F6 | 	neg	arg02, #1
073cc     24 C3 B1 FD | 	call	#_pslpoke
073d0     28 4E 05 F1 | 	add	fp, #40
073d4     A7 26 02 FB | 	rdlong	local01, fp
073d8     28 4E 85 F1 | 	sub	fp, #40
073dc     4A 00 00 FF 
073e0     88 E4 05 F1 | 	add	objptr, ##38024
073e4     F2 26 62 FC | 	wrlong	local01, objptr
073e8     4A 00 00 FF 
073ec     88 E4 85 F1 | 	sub	objptr, ##38024
073f0                 | ' '   print "deleted first line"
073f0                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
073f0                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
073f0                 | '   return 0
073f0     00 FA 05 F6 | 	mov	result1, #0
073f4     70 00 90 FD | 	jmp	#LR__0615
073f8                 | LR__0613
073f8                 | ' 
073f8                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
073f8     28 4E 05 F1 | 	add	fp, #40
073fc     A7 26 02 FB | 	rdlong	local01, fp
07400     28 4E 85 F1 | 	sub	fp, #40
07404     FF FF 3F FF 
07408     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
0740c     24 4E 05 51 |  if_ne	add	fp, #36
07410     A7 28 02 5B |  if_ne	rdlong	local02, fp
07414     24 4E 85 51 |  if_ne	sub	fp, #36
07418     FF FF 7F 5F 
0741c     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
07420     40 00 90 AD |  if_e	jmp	#LR__0614
07424     28 4E 05 F1 | 	add	fp, #40
07428     A7 12 02 FB | 	rdlong	arg01, fp
0742c     10 12 06 F1 | 	add	arg01, #16
07430     04 4E 85 F1 | 	sub	fp, #4
07434     A7 14 02 FB | 	rdlong	arg02, fp
07438     24 4E 85 F1 | 	sub	fp, #36
0743c     B4 C2 B1 FD | 	call	#_pslpoke
07440     24 4E 05 F1 | 	add	fp, #36
07444     A7 12 02 FB | 	rdlong	arg01, fp
07448     14 12 06 F1 | 	add	arg01, #20
0744c     04 4E 05 F1 | 	add	fp, #4
07450     A7 14 02 FB | 	rdlong	arg02, fp
07454     28 4E 85 F1 | 	sub	fp, #40
07458     98 C2 B1 FD | 	call	#_pslpoke
0745c                 | '    pslpoke(header(5)+16,header(4))  
0745c                 | '    pslpoke(header(4)+20, header(5))
0745c                 | '    return 0
0745c     00 FA 05 F6 | 	mov	result1, #0
07460     04 00 90 FD | 	jmp	#LR__0615
07464                 | LR__0614
07464     00 FA 05 F6 | 	mov	result1, #0
07468                 | LR__0615
07468     A7 F0 03 F6 | 	mov	ptra, fp
0746c     B2 00 A0 FD | 	call	#popregs_
07470                 | _deleteline_ret
07470     2D 00 64 FD | 	ret
07474                 | 
07474                 | ' 
07474                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
07474                 | ' 
07474                 | ' sub save_line
07474                 | _save_line
07474     03 4A 05 F6 | 	mov	COUNT_, #3
07478     A8 00 A0 FD | 	call	#pushregs_
0747c     4A 00 00 FF 
07480     7C E4 05 F1 | 	add	objptr, ##38012
07484     F2 16 02 FB | 	rdlong	arg03, objptr
07488     01 16 06 F1 | 	add	arg03, #1
0748c     05 00 00 FF 
07490     18 E4 85 F1 | 	sub	objptr, ##2584
07494     F2 14 02 FB | 	rdlong	arg02, objptr
07498     0B 15 02 FD | 	qmul	arg02, arg03
0749c     0E 00 00 FF 
074a0     44 E4 85 F1 | 	sub	objptr, ##7236
074a4     F2 12 02 FB | 	rdlong	arg01, objptr
074a8     37 00 00 FF 
074ac     20 E4 85 F1 | 	sub	objptr, ##28192
074b0     09 27 02 F6 | 	mov	local01, arg01
074b4     18 28 62 FD | 	getqx	local02
074b8     97 06 48 FB | 	callpa	#(@LR__0621-@LR__0620)>>2,fcache_load_ptr_
074bc                 | LR__0620
074bc     13 FB C9 FA | 	rdbyte	result1, local01 wz
074c0     01 26 06 51 |  if_ne	add	local01, #1
074c4     F4 FF 9F 5D |  if_ne	jmp	#LR__0620
074c8                 | LR__0621
074c8     09 27 82 F1 | 	sub	local01, arg01
074cc     03 26 CE F7 | 	test	local01, #3 wz
074d0     02 26 46 50 |  if_ne	shr	local01, #2
074d4     01 26 06 51 |  if_ne	add	local01, #1
074d8     02 26 66 50 |  if_ne	shl	local01, #2
074dc     14 2B 02 F6 | 	mov	local03, local02
074e0     13 2B 02 F1 | 	add	local03, local01
074e4     43 00 00 FF 
074e8     5C E4 05 F1 | 	add	objptr, ##34396
074ec     F2 16 02 FB | 	rdlong	arg03, objptr
074f0     14 17 02 F1 | 	add	arg03, local02
074f4     04 00 00 FF 
074f8     28 E4 05 F1 | 	add	objptr, ##2088
074fc     F2 16 62 FC | 	wrlong	arg03, objptr
07500     04 E4 05 F1 | 	add	objptr, #4
07504     F2 26 62 FC | 	wrlong	local01, objptr
07508     0C E4 85 F1 | 	sub	objptr, #12
0750c     F2 12 02 F6 | 	mov	arg01, objptr
07510     04 00 00 FF 
07514     20 E4 85 F1 | 	sub	objptr, ##2080
07518     F2 14 02 FB | 	rdlong	arg02, objptr
0751c     14 17 02 F6 | 	mov	arg03, local02
07520     37 00 00 FF 
07524     90 E5 85 F1 | 	sub	objptr, ##28560
07528     58 EE B1 FD | 	call	#_psram_spin2_write
0752c     2B 00 00 FF 
07530     54 E5 05 F1 | 	add	objptr, ##22356
07534     F2 12 02 FB | 	rdlong	arg01, objptr
07538     0C 00 00 FF 
0753c     3C E4 05 F1 | 	add	objptr, ##6204
07540     F2 14 02 FB | 	rdlong	arg02, objptr
07544     14 15 02 F1 | 	add	arg02, local02
07548     13 17 02 F6 | 	mov	arg03, local01
0754c     37 00 00 FF 
07550     90 E5 85 F1 | 	sub	objptr, ##28560
07554     2C EE B1 FD | 	call	#_psram_spin2_write
07558     37 00 00 FF 
0755c     90 E5 05 F1 | 	add	objptr, ##28560
07560     F2 26 02 FB | 	rdlong	local01, objptr
07564     15 27 02 F1 | 	add	local01, local03
07568     F2 26 62 FC | 	wrlong	local01, objptr
0756c     43 00 00 FF 
07570     5C E4 85 F1 | 	sub	objptr, ##34396
07574     A7 F0 03 F6 | 	mov	ptra, fp
07578     B2 00 A0 FD | 	call	#popregs_
0757c                 | _save_line_ret
0757c     2D 00 64 FD | 	ret
07580                 | 
07580                 | ' 
07580                 | ' '----- Insert a new line into the middle of the program
07580                 | ' 
07580                 | ' function insertline(aline as ulong) as integer
07580                 | _insertline
07580     02 4A 05 F6 | 	mov	COUNT_, #2
07584     A8 00 A0 FD | 	call	#pushregs_
07588     28 F0 07 F1 | 	add	ptra, #40
0758c     04 4E 05 F1 | 	add	fp, #4
07590     A7 12 62 FC | 	wrlong	arg01, fp
07594     4A 00 00 FF 
07598     88 E4 05 F1 | 	add	objptr, ##38024
0759c     F2 26 02 FB | 	rdlong	local01, objptr
075a0     04 4E 05 F1 | 	add	fp, #4
075a4     A7 26 62 FC | 	wrlong	local01, fp
075a8     08 4E 85 F1 | 	sub	fp, #8
075ac                 | ' 
075ac                 | ' do
075ac     3E 00 00 FF 
075b0     BC E5 85 F1 | 	sub	objptr, ##32188
075b4                 | LR__0630
075b4     10 4E 05 F1 | 	add	fp, #16
075b8     A7 12 02 F6 | 	mov	arg01, fp
075bc     08 4E 85 F1 | 	sub	fp, #8
075c0     A7 14 02 FB | 	rdlong	arg02, fp
075c4     08 4E 85 F1 | 	sub	fp, #8
075c8     18 16 06 F6 | 	mov	arg03, #24
075cc     18 ED B1 FD | 	call	#_psram_spin2_read1
075d0     08 4E 05 F1 | 	add	fp, #8
075d4     A7 26 02 FB | 	rdlong	local01, fp
075d8     04 4E 05 F1 | 	add	fp, #4
075dc     A7 26 62 FC | 	wrlong	local01, fp
075e0     18 4E 05 F1 | 	add	fp, #24
075e4     A7 26 02 FB | 	rdlong	local01, fp
075e8     1C 4E 85 F1 | 	sub	fp, #28
075ec     A7 26 62 FC | 	wrlong	local01, fp
075f0     08 4E 05 F1 | 	add	fp, #8
075f4     A7 26 02 FB | 	rdlong	local01, fp
075f8     0C 4E 85 F1 | 	sub	fp, #12
075fc     A7 16 02 FB | 	rdlong	arg03, fp
07600     04 4E 85 F1 | 	sub	fp, #4
07604     0B 27 12 F2 | 	cmp	local01, arg03 wc
07608     24 4E 05 C1 |  if_b	add	fp, #36
0760c     A7 28 02 CB |  if_b	rdlong	local02, fp
07610     24 4E 85 C1 |  if_b	sub	fp, #36
07614     FF FF 3F CF 
07618     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
0761c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0630
07620     0B 00 00 FF 
07624     CC E4 85 F1 | 	sub	objptr, ##5836
07628                 | ' 
07628                 | ' if header(0)=aline then return -1 				' delete it first
07628     10 4E 05 F1 | 	add	fp, #16
0762c     A7 26 02 FB | 	rdlong	local01, fp
07630     0C 4E 85 F1 | 	sub	fp, #12
07634     A7 28 02 FB | 	rdlong	local02, fp
07638     04 4E 85 F1 | 	sub	fp, #4
0763c     14 27 0A F2 | 	cmp	local01, local02 wz
07640     01 FA 65 A6 |  if_e	neg	result1, #1
07644     48 01 90 AD |  if_e	jmp	#LR__0633
07648                 | ' if header(0)<aline then return -2 				' end of program reached
07648     10 4E 05 F1 | 	add	fp, #16
0764c     A7 26 02 FB | 	rdlong	local01, fp
07650     0C 4E 85 F1 | 	sub	fp, #12
07654     A7 16 02 FB | 	rdlong	arg03, fp
07658     04 4E 85 F1 | 	sub	fp, #4
0765c     0B 27 12 F2 | 	cmp	local01, arg03 wc
07660     02 FA 65 C6 |  if_b	neg	result1, #2
07664     28 01 90 CD |  if_b	jmp	#LR__0633
07668                 | ' 
07668                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
07668     20 4E 05 F1 | 	add	fp, #32
0766c     A7 26 02 FB | 	rdlong	local01, fp
07670     20 4E 85 F1 | 	sub	fp, #32
07674     FF FF 7F FF 
07678     FF 27 0E F2 | 	cmp	local01, ##-1 wz
0767c     78 00 90 5D |  if_ne	jmp	#LR__0631
07680     43 00 00 FF 
07684     5C E4 05 F1 | 	add	objptr, ##34396
07688     F2 26 02 FB | 	rdlong	local01, objptr
0768c     07 00 00 FF 
07690     2C E4 05 F1 | 	add	objptr, ##3628
07694     F2 26 62 FC | 	wrlong	local01, objptr
07698     0C 4E 05 F1 | 	add	fp, #12
0769c     A7 12 02 FB | 	rdlong	arg01, fp
076a0     0C 4E 85 F1 | 	sub	fp, #12
076a4     10 12 06 F1 | 	add	arg01, #16
076a8     07 00 00 FF 
076ac     2C E4 85 F1 | 	sub	objptr, ##3628
076b0     F2 14 02 FB | 	rdlong	arg02, objptr
076b4     43 00 00 FF 
076b8     5C E4 85 F1 | 	sub	objptr, ##34396
076bc     34 C0 B1 FD | 	call	#_pslpoke
076c0     47 00 00 FF 
076c4     8C E4 05 F1 | 	add	objptr, ##36492
076c8     FF FF FF FF 
076cc     F2 FE 6B FC | 	wrlong	##-1, objptr
076d0     0C 4E 05 F1 | 	add	fp, #12
076d4     A7 26 02 FB | 	rdlong	local01, fp
076d8     0C 4E 85 F1 | 	sub	fp, #12
076dc     04 E4 05 F1 | 	add	objptr, #4
076e0     F2 26 62 FC | 	wrlong	local01, objptr
076e4     47 00 00 FF 
076e8     90 E4 85 F1 | 	sub	objptr, ##36496
076ec     84 FD BF FD | 	call	#_save_line
076f0                 | '   programstart=programptr
076f0                 | '   pslpoke(lineptr2+16,programptr)
076f0                 | '   ucompiledline(4)=$FFFF_FFFF
076f0                 | '   ucompiledline(5)=lineptr2
076f0                 | '   save_line
076f0                 | '   return 0
076f0     00 FA 05 F6 | 	mov	result1, #0
076f4     98 00 90 FD | 	jmp	#LR__0633
076f8                 | LR__0631
076f8                 | ' 
076f8                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
076f8     20 4E 05 F1 | 	add	fp, #32
076fc     A7 26 02 FB | 	rdlong	local01, fp
07700     20 4E 85 F1 | 	sub	fp, #32
07704     FF FF 7F FF 
07708     FF 27 0E F2 | 	cmp	local01, ##-1 wz
0770c     7C 00 90 AD |  if_e	jmp	#LR__0632
07710     20 4E 05 F1 | 	add	fp, #32
07714     A7 26 02 FB | 	rdlong	local01, fp
07718     47 00 00 FF 
0771c     8C E4 05 F1 | 	add	objptr, ##36492
07720     F2 26 62 FC | 	wrlong	local01, objptr
07724     14 4E 85 F1 | 	sub	fp, #20
07728     A7 26 02 FB | 	rdlong	local01, fp
0772c     04 E4 05 F1 | 	add	objptr, #4
07730     F2 26 62 FC | 	wrlong	local01, objptr
07734     A7 12 02 FB | 	rdlong	arg01, fp
07738     0C 4E 85 F1 | 	sub	fp, #12
0773c     10 12 06 F1 | 	add	arg01, #16
07740     04 00 00 FF 
07744     34 E4 85 F1 | 	sub	objptr, ##2100
07748     F2 14 02 FB | 	rdlong	arg02, objptr
0774c     43 00 00 FF 
07750     5C E4 85 F1 | 	sub	objptr, ##34396
07754     9C BF B1 FD | 	call	#_pslpoke
07758     20 4E 05 F1 | 	add	fp, #32
0775c     A7 12 02 FB | 	rdlong	arg01, fp
07760     20 4E 85 F1 | 	sub	fp, #32
07764     14 12 06 F1 | 	add	arg01, #20
07768     43 00 00 FF 
0776c     5C E4 05 F1 | 	add	objptr, ##34396
07770     F2 14 02 FB | 	rdlong	arg02, objptr
07774     43 00 00 FF 
07778     5C E4 85 F1 | 	sub	objptr, ##34396
0777c     74 BF B1 FD | 	call	#_pslpoke
07780     F0 FC BF FD | 	call	#_save_line
07784                 | '   ucompiledline(4)=header(4)
07784                 | '   ucompiledline(5)=lineptr2
07784                 | '   pslpoke(lineptr2+16,programptr)
07784                 | '   pslpoke(header(4)+20,programptr)
07784                 | '   save_line
07784                 | '   return 0
07784     00 FA 05 F6 | 	mov	result1, #0
07788     04 00 90 FD | 	jmp	#LR__0633
0778c                 | LR__0632
0778c     00 FA 05 F6 | 	mov	result1, #0
07790                 | LR__0633
07790     A7 F0 03 F6 | 	mov	ptra, fp
07794     B2 00 A0 FD | 	call	#popregs_
07798                 | _insertline_ret
07798     2D 00 64 FD | 	ret
0779c                 | 
0779c                 | ' 
0779c                 | ' '----- Adds a new line at the end of the program
0779c                 | ' 
0779c                 | ' sub add_line_at_end(aline) 
0779c                 | _add_line_at_end
0779c     4A 00 00 FF 
077a0     8C E4 05 F1 | 	add	objptr, ##38028
077a4     F2 12 62 FC | 	wrlong	arg01, objptr
077a8     04 E4 05 F1 | 	add	objptr, #4
077ac     F2 14 02 FB | 	rdlong	arg02, objptr
077b0     03 00 00 FF 
077b4     04 E4 85 F1 | 	sub	objptr, ##1540
077b8     F2 14 62 FC | 	wrlong	arg02, objptr
077bc     03 00 00 FF 
077c0     04 E4 05 F1 | 	add	objptr, ##1540
077c4     F2 12 02 FB | 	rdlong	arg01, objptr
077c8     14 12 06 F1 | 	add	arg01, #20
077cc     07 00 00 FF 
077d0     34 E4 85 F1 | 	sub	objptr, ##3636
077d4     F2 14 02 FB | 	rdlong	arg02, objptr
077d8     43 00 00 FF 
077dc     5C E4 85 F1 | 	sub	objptr, ##34396
077e0     10 BF B1 FD | 	call	#_pslpoke
077e4     43 00 00 FF 
077e8     5C E4 05 F1 | 	add	objptr, ##34396
077ec     F2 14 02 FB | 	rdlong	arg02, objptr
077f0     07 00 00 FF 
077f4     34 E4 05 F1 | 	add	objptr, ##3636
077f8     F2 14 62 FC | 	wrlong	arg02, objptr
077fc     03 00 00 FF 
07800     00 E4 85 F1 | 	sub	objptr, ##1536
07804     FF FF BF FF 
07808     F2 FE 6B FC | 	wrlong	##2147483647, objptr
0780c                 | ' 
0780c                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
0780c                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
0780c     04 00 00 FF 
07810     34 E4 85 F1 | 	sub	objptr, ##2100
07814     F2 14 02 FB | 	rdlong	arg02, objptr
07818     43 00 00 FF 
0781c     5C E4 85 F1 | 	sub	objptr, ##34396
07820     00 04 00 FF 
07824     00 14 0E F2 | 	cmp	arg02, ##524288 wz
07828     47 00 00 AF 
0782c     8C E4 05 A1 |  if_e	add	objptr, ##36492
07830     FF FF FF AF 
07834     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
07838     47 00 00 AF 
0783c     8C E4 85 A1 |  if_e	sub	objptr, ##36492
07840     30 FC BF FD | 	call	#_save_line
07844     43 00 00 FF 
07848     5C E4 05 F1 | 	add	objptr, ##34396
0784c     F2 12 02 FB | 	rdlong	arg01, objptr
07850     43 00 00 FF 
07854     5C E4 85 F1 | 	sub	objptr, ##34396
07858     01 14 66 F6 | 	neg	arg02, #1
0785c     94 BE B1 FD | 	call	#_pslpoke
07860                 | _add_line_at_end_ret
07860     2D 00 64 FD | 	ret
07864                 | 
07864                 | ' 
07864                 | ' '--------------------------------------------------------------------------------------------------------------------------
07864                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
07864                 | ' '--------------------------------------------------------------------------------------------------------------------------
07864                 | ' 
07864                 | ' '--------------------------------------------------------------------------------------------------------------------------
07864                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
07864                 | ' '--------------------------------------------------------------------------------------------------------------------------
07864                 | ' 
07864                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
07864                 | ' 
07864                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
07864                 | _compile_immediate
07864     0A 4A 05 F6 | 	mov	COUNT_, #10
07868     A8 00 A0 FD | 	call	#pushregs_
0786c                 | _compile_immediate_enter
0786c     09 2D 02 F6 | 	mov	local04, arg01
07870     0A 2F 02 F6 | 	mov	local05, arg02
07874     00 30 06 F6 | 	mov	local06, #0
07878     00 32 06 F6 | 	mov	local07, #0
0787c     00 34 06 F6 | 	mov	local08, #0
07880                 | ' 
07880                 | ' ' linetype=cont+1
07880                 | ' ' 1 : this is the first part of the line that will continue
07880                 | ' ' 2 - this is the continuation of the line
07880                 | ' ' 3 - this is the last continued line
07880                 | ' ' 4 - this is the one and only part
07880                 | ' ' 5 - continued after if/else
07880                 | ' 
07880                 | ' err=0
07880                 | ' cmd=0
07880                 | ' vars=0
07880                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
07880     02 2C 0E F2 | 	cmp	local04, #2 wz
07884     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
07888     24 00 90 5D |  if_ne	jmp	#LR__0640
0788c     35 00 00 FF 
07890     10 E4 05 F1 | 	add	objptr, ##27152
07894     F2 32 02 FB | 	rdlong	local07, objptr
07898     01 36 06 F6 | 	mov	local09, #1
0789c     02 00 00 FF 
078a0     34 E4 05 F1 | 	add	objptr, ##1076
078a4     F2 02 68 FC | 	wrlong	#1, objptr
078a8     37 00 00 FF 
078ac     44 E4 85 F1 | 	sub	objptr, ##28228
078b0                 | LR__0640
078b0                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
078b0     04 2C 0E F2 | 	cmp	local04, #4 wz
078b4     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
078b8     30 00 90 5D |  if_ne	jmp	#LR__0641
078bc     35 00 00 FF 
078c0     18 E4 05 F1 | 	add	objptr, ##27160
078c4     F2 32 02 FB | 	rdlong	local07, objptr
078c8     02 36 06 F6 | 	mov	local09, #2
078cc     02 00 00 FF 
078d0     2C E4 05 F1 | 	add	objptr, ##1068
078d4     F2 04 68 FC | 	wrlong	#2, objptr
078d8     13 00 00 FF 
078dc     38 E4 05 F1 | 	add	objptr, ##9784
078e0     F2 04 68 FC | 	wrlong	#2, objptr
078e4     4A 00 00 FF 
078e8     7C E4 85 F1 | 	sub	objptr, ##38012
078ec                 | LR__0641
078ec                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
078ec     05 2C 0E F2 | 	cmp	local04, #5 wz
078f0     40 00 90 5D |  if_ne	jmp	#LR__0642
078f4     37 00 00 FF 
078f8     44 E4 05 F1 | 	add	objptr, ##28228
078fc     F2 FC 01 FB | 	rdlong	result2, objptr
07900     FE 36 02 F6 | 	mov	local09, result2
07904     03 36 66 F0 | 	shl	local09, #3
07908     02 00 00 FF 
0790c     38 E4 85 F1 | 	sub	objptr, ##1080
07910     F2 36 02 F1 | 	add	local09, objptr
07914     04 36 06 F1 | 	add	local09, #4
07918     1B 33 02 FB | 	rdlong	local07, local09
0791c     01 FC 05 F1 | 	add	result2, #1
07920     02 00 00 FF 
07924     38 E4 05 F1 | 	add	objptr, ##1080
07928     F2 FC 61 FC | 	wrlong	result2, objptr
0792c     37 00 00 FF 
07930     44 E4 85 F1 | 	sub	objptr, ##28228
07934                 | LR__0642
07934                 | ' 
07934                 | ' 'print  "In compile_immediate cmd=:", cmd
07934                 | ' 451 select case cmd
07934     5C 32 0E F2 | 	cmp	local07, #92 wz
07938     D4 02 90 AD |  if_e	jmp	#LR__0643
0793c     B9 32 0E F2 | 	cmp	local07, #185 wz
07940     D8 02 90 AD |  if_e	jmp	#LR__0644
07944     47 32 0E F2 | 	cmp	local07, #71 wz
07948     E0 02 90 AD |  if_e	jmp	#LR__0645
0794c     59 32 0E F2 | 	cmp	local07, #89 wz
07950     E8 02 90 AD |  if_e	jmp	#LR__0646
07954     C3 32 0E F2 | 	cmp	local07, #195 wz
07958     F0 02 90 AD |  if_e	jmp	#LR__0647
0795c     45 32 0E F2 | 	cmp	local07, #69 wz
07960     F4 02 90 AD |  if_e	jmp	#LR__0648
07964     69 32 0E F2 | 	cmp	local07, #105 wz
07968     FC 02 90 AD |  if_e	jmp	#LR__0649
0796c     40 32 0E F2 | 	cmp	local07, #64 wz
07970     EC 06 90 AD |  if_e	jmp	#LR__0724
07974     B4 32 0E F2 | 	cmp	local07, #180 wz
07978     F8 02 90 AD |  if_e	jmp	#LR__0650
0797c     49 32 0E F2 | 	cmp	local07, #73 wz
07980     FC 02 90 AD |  if_e	jmp	#LR__0651
07984     C4 32 0E F2 | 	cmp	local07, #196 wz
07988     00 03 90 AD |  if_e	jmp	#LR__0652
0798c     AE 32 0E F2 | 	cmp	local07, #174 wz
07990     04 03 90 AD |  if_e	jmp	#LR__0653
07994     B0 32 0E F2 | 	cmp	local07, #176 wz
07998     08 03 90 AD |  if_e	jmp	#LR__0654
0799c     AF 32 0E F2 | 	cmp	local07, #175 wz
079a0     0C 03 90 AD |  if_e	jmp	#LR__0655
079a4     B1 32 0E F2 | 	cmp	local07, #177 wz
079a8     10 03 90 AD |  if_e	jmp	#LR__0656
079ac     CF 32 0E F2 | 	cmp	local07, #207 wz
079b0     14 03 90 AD |  if_e	jmp	#LR__0657
079b4     68 32 0E F2 | 	cmp	local07, #104 wz
079b8     18 03 90 AD |  if_e	jmp	#LR__0658
079bc     B7 32 0E F2 | 	cmp	local07, #183 wz
079c0     9C 06 90 AD |  if_e	jmp	#LR__0724
079c4     74 32 0E F2 | 	cmp	local07, #116 wz
079c8     14 03 90 AD |  if_e	jmp	#LR__0659
079cc     73 32 0E F2 | 	cmp	local07, #115 wz
079d0     1C 03 90 AD |  if_e	jmp	#LR__0660
079d4     6C 32 0E F2 | 	cmp	local07, #108 wz
079d8     24 03 90 AD |  if_e	jmp	#LR__0661
079dc     89 32 0E F2 | 	cmp	local07, #137 wz
079e0     7C 06 90 AD |  if_e	jmp	#LR__0724
079e4     C2 32 0E F2 | 	cmp	local07, #194 wz
079e8     24 03 90 AD |  if_e	jmp	#LR__0662
079ec     72 32 0E F2 | 	cmp	local07, #114 wz
079f0     28 03 90 AD |  if_e	jmp	#LR__0663
079f4     5D 32 0E F2 | 	cmp	local07, #93 wz
079f8     2C 03 90 AD |  if_e	jmp	#LR__0664
079fc     96 32 0E F2 | 	cmp	local07, #150 wz
07a00     34 03 90 AD |  if_e	jmp	#LR__0665
07a04     43 32 0E F2 | 	cmp	local07, #67 wz
07a08     38 03 90 AD |  if_e	jmp	#LR__0666
07a0c     5A 32 0E F2 | 	cmp	local07, #90 wz
07a10     40 03 90 AD |  if_e	jmp	#LR__0667
07a14     AB 32 0E F2 | 	cmp	local07, #171 wz
07a18     44 06 90 AD |  if_e	jmp	#LR__0724
07a1c     BD 32 0E F2 | 	cmp	local07, #189 wz
07a20     40 03 90 AD |  if_e	jmp	#LR__0668
07a24     BB 32 0E F2 | 	cmp	local07, #187 wz
07a28     48 03 90 AD |  if_e	jmp	#LR__0669
07a2c     4E 32 0E F2 | 	cmp	local07, #78 wz
07a30     50 03 90 AD |  if_e	jmp	#LR__0670
07a34     A9 32 0E F2 | 	cmp	local07, #169 wz
07a38     68 03 90 AD |  if_e	jmp	#LR__0672
07a3c     46 32 0E F2 | 	cmp	local07, #70 wz
07a40     80 03 90 AD |  if_e	jmp	#LR__0674
07a44     71 32 0E F2 | 	cmp	local07, #113 wz
07a48     88 03 90 AD |  if_e	jmp	#LR__0675
07a4c     60 32 0E F2 | 	cmp	local07, #96 wz
07a50     8C 03 90 AD |  if_e	jmp	#LR__0676
07a54     4A 32 0E F2 | 	cmp	local07, #74 wz
07a58     90 03 90 AD |  if_e	jmp	#LR__0677
07a5c     48 32 0E F2 | 	cmp	local07, #72 wz
07a60     94 03 90 AD |  if_e	jmp	#LR__0678
07a64     58 32 0E F2 | 	cmp	local07, #88 wz
07a68     9C 03 90 AD |  if_e	jmp	#LR__0679
07a6c     5F 32 0E F2 | 	cmp	local07, #95 wz
07a70     A4 03 90 AD |  if_e	jmp	#LR__0680
07a74     B5 32 0E F2 | 	cmp	local07, #181 wz
07a78     A8 03 90 AD |  if_e	jmp	#LR__0681
07a7c     8A 32 0E F2 | 	cmp	local07, #138 wz
07a80     B0 03 90 AD |  if_e	jmp	#LR__0682
07a84     4C 32 0E F2 | 	cmp	local07, #76 wz
07a88     B4 03 90 AD |  if_e	jmp	#LR__0683
07a8c     52 32 0E F2 | 	cmp	local07, #82 wz
07a90     BC 03 90 AD |  if_e	jmp	#LR__0684
07a94     97 32 0E F2 | 	cmp	local07, #151 wz
07a98     C4 03 90 AD |  if_e	jmp	#LR__0685
07a9c     C6 32 0E F2 | 	cmp	local07, #198 wz
07aa0     C8 03 90 AD |  if_e	jmp	#LR__0686
07aa4     61 32 0E F2 | 	cmp	local07, #97 wz
07aa8     CC 03 90 AD |  if_e	jmp	#LR__0687
07aac     63 32 0E F2 | 	cmp	local07, #99 wz
07ab0     D0 03 90 AD |  if_e	jmp	#LR__0688
07ab4     41 32 0E F2 | 	cmp	local07, #65 wz
07ab8     A4 05 90 AD |  if_e	jmp	#LR__0724
07abc     4B 32 0E F2 | 	cmp	local07, #75 wz
07ac0     CC 03 90 AD |  if_e	jmp	#LR__0689
07ac4     C1 32 0E F2 | 	cmp	local07, #193 wz
07ac8     D0 03 90 AD |  if_e	jmp	#LR__0690
07acc     B3 32 0E F2 | 	cmp	local07, #179 wz
07ad0     D4 03 90 AD |  if_e	jmp	#LR__0691
07ad4     5E 32 0E F2 | 	cmp	local07, #94 wz
07ad8     D8 03 90 AD |  if_e	jmp	#LR__0692
07adc     7C 32 0E F2 | 	cmp	local07, #124 wz
07ae0     DC 03 90 AD |  if_e	jmp	#LR__0693
07ae4     7D 32 0E F2 | 	cmp	local07, #125 wz
07ae8     E0 03 90 AD |  if_e	jmp	#LR__0694
07aec     7E 32 0E F2 | 	cmp	local07, #126 wz
07af0     E4 03 90 AD |  if_e	jmp	#LR__0695
07af4     7F 32 0E F2 | 	cmp	local07, #127 wz
07af8     E8 03 90 AD |  if_e	jmp	#LR__0696
07afc     80 32 0E F2 | 	cmp	local07, #128 wz
07b00     EC 03 90 AD |  if_e	jmp	#LR__0697
07b04     55 32 0E F2 | 	cmp	local07, #85 wz
07b08     F0 03 90 AD |  if_e	jmp	#LR__0698
07b0c     75 32 0E F2 | 	cmp	local07, #117 wz
07b10     F4 03 90 AD |  if_e	jmp	#LR__0699
07b14     42 32 0E F2 | 	cmp	local07, #66 wz
07b18     FC 03 90 AD |  if_e	jmp	#LR__0700
07b1c     95 32 0E F2 | 	cmp	local07, #149 wz
07b20     04 04 90 AD |  if_e	jmp	#LR__0701
07b24     AC 32 0E F2 | 	cmp	local07, #172 wz
07b28     34 05 90 AD |  if_e	jmp	#LR__0724
07b2c     81 32 0E F2 | 	cmp	local07, #129 wz
07b30     00 04 90 AD |  if_e	jmp	#LR__0702
07b34     44 32 0E F2 | 	cmp	local07, #68 wz
07b38     04 04 90 AD |  if_e	jmp	#LR__0703
07b3c     BC 32 0E F2 | 	cmp	local07, #188 wz
07b40     08 04 90 AD |  if_e	jmp	#LR__0704
07b44     88 32 0E F2 | 	cmp	local07, #136 wz
07b48     14 05 90 AD |  if_e	jmp	#LR__0724
07b4c     B6 32 0E F2 | 	cmp	local07, #182 wz
07b50     08 04 90 AD |  if_e	jmp	#LR__0705
07b54     92 32 0E F2 | 	cmp	local07, #146 wz
07b58     10 04 90 AD |  if_e	jmp	#LR__0706
07b5c     BE 32 0E F2 | 	cmp	local07, #190 wz
07b60     B8 05 90 AD |  if_e	jmp	#LR__0725
07b64     C7 32 0E F2 | 	cmp	local07, #199 wz
07b68     AA 32 0E 52 |  if_ne	cmp	local07, #170 wz
07b6c     F0 04 90 AD |  if_e	jmp	#LR__0724
07b70     4D 32 0E F2 | 	cmp	local07, #77 wz
07b74     00 04 90 AD |  if_e	jmp	#LR__0707
07b78     51 32 0E F2 | 	cmp	local07, #81 wz
07b7c     08 04 90 AD |  if_e	jmp	#LR__0708
07b80     D2 32 0E F2 | 	cmp	local07, #210 wz
07b84     10 04 90 AD |  if_e	jmp	#LR__0709
07b88     8E 32 0E F2 | 	cmp	local07, #142 wz
07b8c     18 04 90 AD |  if_e	jmp	#LR__0710
07b90     90 32 0E F2 | 	cmp	local07, #144 wz
07b94     1C 04 90 AD |  if_e	jmp	#LR__0711
07b98     8D 32 0E F2 | 	cmp	local07, #141 wz
07b9c     20 04 90 AD |  if_e	jmp	#LR__0712
07ba0     8C 32 0E F2 | 	cmp	local07, #140 wz
07ba4     24 04 90 AD |  if_e	jmp	#LR__0713
07ba8     91 32 0E F2 | 	cmp	local07, #145 wz
07bac     28 04 90 AD |  if_e	jmp	#LR__0714
07bb0     8B 32 0E F2 | 	cmp	local07, #139 wz
07bb4     2C 04 90 AD |  if_e	jmp	#LR__0715
07bb8     8F 32 0E F2 | 	cmp	local07, #143 wz
07bbc     30 04 90 AD |  if_e	jmp	#LR__0716
07bc0     B2 32 0E F2 | 	cmp	local07, #178 wz
07bc4     34 04 90 AD |  if_e	jmp	#LR__0717
07bc8     6D 32 0E F2 | 	cmp	local07, #109 wz
07bcc     3C 04 90 AD |  if_e	jmp	#LR__0718
07bd0     70 32 0E F2 | 	cmp	local07, #112 wz
07bd4     88 04 90 AD |  if_e	jmp	#LR__0724
07bd8     56 32 0E F2 | 	cmp	local07, #86 wz
07bdc     38 04 90 AD |  if_e	jmp	#LR__0719
07be0     57 32 0E F2 | 	cmp	local07, #87 wz
07be4     78 04 90 AD |  if_e	jmp	#LR__0724
07be8     79 32 0E F2 | 	cmp	local07, #121 wz
07bec     34 04 90 AD |  if_e	jmp	#LR__0720
07bf0     77 32 0E F2 | 	cmp	local07, #119 wz
07bf4     38 04 90 AD |  if_e	jmp	#LR__0721
07bf8     78 32 0E F2 | 	cmp	local07, #120 wz
07bfc     3C 04 90 AD |  if_e	jmp	#LR__0722
07c00     01 00 00 FF 
07c04     04 32 0E F2 | 	cmp	local07, ##516 wz
07c08     3C 04 90 AD |  if_e	jmp	#LR__0723
07c0c     0C 05 90 FD | 	jmp	#LR__0725
07c10                 | LR__0643
07c10     58 0B B0 FD | 	call	#_compile_fun_2p
07c14     FD 30 02 F6 | 	mov	local06, result1
07c18     44 04 90 FD | 	jmp	#LR__0724
07c1c                 | LR__0644
07c1c     1C 0E B0 FD | 	call	#_compile_fun_varp
07c20     FD 34 02 F6 | 	mov	local08, result1
07c24     FE 30 02 F6 | 	mov	local06, result2
07c28     34 04 90 FD | 	jmp	#LR__0724
07c2c                 | LR__0645
07c2c     0C 0E B0 FD | 	call	#_compile_fun_varp
07c30     FD 34 02 F6 | 	mov	local08, result1
07c34     FE 30 02 F6 | 	mov	local06, result2
07c38     24 04 90 FD | 	jmp	#LR__0724
07c3c                 | LR__0646
07c3c     FC 0D B0 FD | 	call	#_compile_fun_varp
07c40     FD 34 02 F6 | 	mov	local08, result1
07c44     FE 30 02 F6 | 	mov	local06, result2
07c48     14 04 90 FD | 	jmp	#LR__0724
07c4c                 | LR__0647
07c4c                 | ' return expr()
07c4c     58 42 B0 FD | 	call	#_expr
07c50     FD 30 02 F6 | 	mov	local06, result1
07c54     08 04 90 FD | 	jmp	#LR__0724
07c58                 | LR__0648
07c58     E0 0D B0 FD | 	call	#_compile_fun_varp
07c5c     FD 34 02 F6 | 	mov	local08, result1
07c60     FE 30 02 F6 | 	mov	local06, result2
07c64     F8 03 90 FD | 	jmp	#LR__0724
07c68                 | LR__0649
07c68                 | ' return expr()
07c68     3C 42 B0 FD | 	call	#_expr
07c6c     FD 30 02 F6 | 	mov	local06, result1
07c70     EC 03 90 FD | 	jmp	#LR__0724
07c74                 | LR__0650
07c74                 | ' return expr()
07c74     30 42 B0 FD | 	call	#_expr
07c78     FD 30 02 F6 | 	mov	local06, result1
07c7c     E0 03 90 FD | 	jmp	#LR__0724
07c80                 | LR__0651
07c80                 | ' return expr()
07c80     24 42 B0 FD | 	call	#_expr
07c84     FD 30 02 F6 | 	mov	local06, result1
07c88     D4 03 90 FD | 	jmp	#LR__0724
07c8c                 | LR__0652
07c8c     DC 0A B0 FD | 	call	#_compile_fun_2p
07c90     FD 30 02 F6 | 	mov	local06, result1
07c94     C8 03 90 FD | 	jmp	#LR__0724
07c98                 | LR__0653
07c98     D0 0A B0 FD | 	call	#_compile_fun_2p
07c9c     FD 30 02 F6 | 	mov	local06, result1
07ca0     BC 03 90 FD | 	jmp	#LR__0724
07ca4                 | LR__0654
07ca4     C4 0A B0 FD | 	call	#_compile_fun_2p
07ca8     FD 30 02 F6 | 	mov	local06, result1
07cac     B0 03 90 FD | 	jmp	#LR__0724
07cb0                 | LR__0655
07cb0     B8 0A B0 FD | 	call	#_compile_fun_2p
07cb4     FD 30 02 F6 | 	mov	local06, result1
07cb8     A4 03 90 FD | 	jmp	#LR__0724
07cbc                 | LR__0656
07cbc     AC 0A B0 FD | 	call	#_compile_fun_2p
07cc0     FD 30 02 F6 | 	mov	local06, result1
07cc4     98 03 90 FD | 	jmp	#LR__0724
07cc8                 | LR__0657
07cc8                 | ' return expr()
07cc8     DC 41 B0 FD | 	call	#_expr
07ccc     FD 30 02 F6 | 	mov	local06, result1
07cd0     8C 03 90 FD | 	jmp	#LR__0724
07cd4                 | LR__0658
07cd4                 | ' return expr()
07cd4     D0 41 B0 FD | 	call	#_expr
07cd8     FD 30 02 F6 | 	mov	local06, result1
07cdc     80 03 90 FD | 	jmp	#LR__0724
07ce0                 | LR__0659
07ce0     58 0D B0 FD | 	call	#_compile_fun_varp
07ce4     FD 34 02 F6 | 	mov	local08, result1
07ce8     FE 30 02 F6 | 	mov	local06, result2
07cec     70 03 90 FD | 	jmp	#LR__0724
07cf0                 | LR__0660
07cf0     48 0D B0 FD | 	call	#_compile_fun_varp
07cf4     FD 34 02 F6 | 	mov	local08, result1
07cf8     FE 30 02 F6 | 	mov	local06, result2
07cfc     60 03 90 FD | 	jmp	#LR__0724
07d00                 | LR__0661
07d00     38 0D B0 FD | 	call	#_compile_fun_varp
07d04     FD 34 02 F6 | 	mov	local08, result1
07d08     FE 30 02 F6 | 	mov	local06, result2
07d0c     50 03 90 FD | 	jmp	#LR__0724
07d10                 | LR__0662
07d10                 | ' return expr()
07d10     94 41 B0 FD | 	call	#_expr
07d14     FD 30 02 F6 | 	mov	local06, result1
07d18     44 03 90 FD | 	jmp	#LR__0724
07d1c                 | LR__0663
07d1c     40 22 B0 FD | 	call	#_compile_dim
07d20     FD 30 02 F6 | 	mov	local06, result1
07d24     F4 03 90 FD | 	jmp	#LR__0725
07d28                 | LR__0664
07d28     10 0D B0 FD | 	call	#_compile_fun_varp
07d2c     FD 34 02 F6 | 	mov	local08, result1
07d30     FE 30 02 F6 | 	mov	local06, result2
07d34     28 03 90 FD | 	jmp	#LR__0724
07d38                 | LR__0665
07d38     30 0A B0 FD | 	call	#_compile_fun_2p
07d3c     FD 30 02 F6 | 	mov	local06, result1
07d40     1C 03 90 FD | 	jmp	#LR__0724
07d44                 | LR__0666
07d44     F4 0C B0 FD | 	call	#_compile_fun_varp
07d48     FD 34 02 F6 | 	mov	local08, result1
07d4c     FE 30 02 F6 | 	mov	local06, result2
07d50     0C 03 90 FD | 	jmp	#LR__0724
07d54                 | LR__0667
07d54     17 13 02 F6 | 	mov	arg01, local05
07d58     CC 20 B0 FD | 	call	#_compile_else
07d5c     FD 30 02 F6 | 	mov	local06, result1
07d60     B8 03 90 FD | 	jmp	#LR__0725
07d64                 | LR__0668
07d64     D4 0C B0 FD | 	call	#_compile_fun_varp
07d68     FD 34 02 F6 | 	mov	local08, result1
07d6c     FE 30 02 F6 | 	mov	local06, result2
07d70     EC 02 90 FD | 	jmp	#LR__0724
07d74                 | LR__0669
07d74     C4 0C B0 FD | 	call	#_compile_fun_varp
07d78     FD 34 02 F6 | 	mov	local08, result1
07d7c     FE 30 02 F6 | 	mov	local06, result2
07d80     DC 02 90 FD | 	jmp	#LR__0724
07d84                 | LR__0670
07d84     01 2E 16 F2 | 	cmp	local05, #1 wc
07d88     08 00 90 CD |  if_b	jmp	#LR__0671
07d8c     6C 33 B0 FD | 	call	#_compile_goto
07d90     88 03 90 FD | 	jmp	#LR__0725
07d94                 | LR__0671
07d94     19 12 06 F6 | 	mov	arg01, #25
07d98     00 14 06 F6 | 	mov	arg02, #0
07d9c     B4 B7 B1 FD | 	call	#_printerror
07da0     78 03 90 FD | 	jmp	#LR__0725
07da4                 | LR__0672
07da4     01 2E 16 F2 | 	cmp	local05, #1 wc
07da8     08 00 90 CD |  if_b	jmp	#LR__0673
07dac     E8 32 B0 FD | 	call	#_compile_gosub
07db0     68 03 90 FD | 	jmp	#LR__0725
07db4                 | LR__0673
07db4     19 12 06 F6 | 	mov	arg01, #25
07db8     00 14 06 F6 | 	mov	arg02, #0
07dbc     94 B7 B1 FD | 	call	#_printerror
07dc0     58 03 90 FD | 	jmp	#LR__0725
07dc4                 | LR__0674
07dc4     74 0C B0 FD | 	call	#_compile_fun_varp
07dc8     FD 34 02 F6 | 	mov	local08, result1
07dcc     FE 30 02 F6 | 	mov	local06, result2
07dd0     8C 02 90 FD | 	jmp	#LR__0724
07dd4                 | LR__0675
07dd4     0C 0B B0 FD | 	call	#_compile_fun_4p
07dd8     FD 30 02 F6 | 	mov	local06, result1
07ddc     80 02 90 FD | 	jmp	#LR__0724
07de0                 | LR__0676
07de0                 | ' return expr()
07de0     C4 40 B0 FD | 	call	#_expr
07de4     FD 30 02 F6 | 	mov	local06, result1
07de8     74 02 90 FD | 	jmp	#LR__0724
07dec                 | LR__0677
07dec     44 28 B0 FD | 	call	#_compile_for
07df0     FD 30 02 F6 | 	mov	local06, result1
07df4     24 03 90 FD | 	jmp	#LR__0725
07df8                 | LR__0678
07df8     40 0C B0 FD | 	call	#_compile_fun_varp
07dfc     FD 34 02 F6 | 	mov	local08, result1
07e00     FE 30 02 F6 | 	mov	local06, result2
07e04     58 02 90 FD | 	jmp	#LR__0724
07e08                 | LR__0679
07e08     17 13 02 F6 | 	mov	arg01, local05
07e0c     90 1E B0 FD | 	call	#_compile_if
07e10     FD 30 02 F6 | 	mov	local06, result1
07e14     04 03 90 FD | 	jmp	#LR__0725
07e18                 | LR__0680
07e18                 | ' return expr()
07e18     8C 40 B0 FD | 	call	#_expr
07e1c     FD 30 02 F6 | 	mov	local06, result1
07e20     3C 02 90 FD | 	jmp	#LR__0724
07e24                 | LR__0681
07e24     E0 0D B0 FD | 	call	#_compile_input
07e28     FD 34 02 F6 | 	mov	local08, result1
07e2c     FE 30 02 F6 | 	mov	local06, result2
07e30     2C 02 90 FD | 	jmp	#LR__0724
07e34                 | LR__0682
07e34                 | ' return expr()
07e34     70 40 B0 FD | 	call	#_expr
07e38     FD 30 02 F6 | 	mov	local06, result1
07e3c     20 02 90 FD | 	jmp	#LR__0724
07e40                 | LR__0683
07e40     F8 0B B0 FD | 	call	#_compile_fun_varp
07e44     FD 34 02 F6 | 	mov	local08, result1
07e48     FE 30 02 F6 | 	mov	local06, result2
07e4c     10 02 90 FD | 	jmp	#LR__0724
07e50                 | LR__0684
07e50     E8 0B B0 FD | 	call	#_compile_fun_varp
07e54     FD 34 02 F6 | 	mov	local08, result1
07e58     FE 30 02 F6 | 	mov	local06, result2
07e5c     00 02 90 FD | 	jmp	#LR__0724
07e60                 | LR__0685
07e60     08 09 B0 FD | 	call	#_compile_fun_2p
07e64     FD 30 02 F6 | 	mov	local06, result1
07e68     F4 01 90 FD | 	jmp	#LR__0724
07e6c                 | LR__0686
07e6c                 | ' return expr()
07e6c     38 40 B0 FD | 	call	#_expr
07e70     FD 30 02 F6 | 	mov	local06, result1
07e74     E8 01 90 FD | 	jmp	#LR__0724
07e78                 | LR__0687
07e78                 | ' return expr()
07e78     2C 40 B0 FD | 	call	#_expr
07e7c     FD 30 02 F6 | 	mov	local06, result1
07e80     DC 01 90 FD | 	jmp	#LR__0724
07e84                 | LR__0688
07e84                 | ' return expr()
07e84     20 40 B0 FD | 	call	#_expr
07e88     FD 30 02 F6 | 	mov	local06, result1
07e8c     D0 01 90 FD | 	jmp	#LR__0724
07e90                 | LR__0689
07e90     6C 30 B0 FD | 	call	#_compile_next
07e94     FD 30 02 F6 | 	mov	local06, result1
07e98     80 02 90 FD | 	jmp	#LR__0725
07e9c                 | LR__0690
07e9c     4C 36 B0 FD | 	call	#_compile_on
07ea0     FD 30 02 F6 | 	mov	local06, result1
07ea4     74 02 90 FD | 	jmp	#LR__0725
07ea8                 | LR__0691
07ea8     48 09 B0 FD | 	call	#_compile_fun_3p
07eac     FD 30 02 F6 | 	mov	local06, result1
07eb0     AC 01 90 FD | 	jmp	#LR__0724
07eb4                 | LR__0692
07eb4                 | ' return expr()
07eb4     F0 3F B0 FD | 	call	#_expr
07eb8     FD 30 02 F6 | 	mov	local06, result1
07ebc     A0 01 90 FD | 	jmp	#LR__0724
07ec0                 | LR__0693
07ec0                 | ' return expr()
07ec0     E4 3F B0 FD | 	call	#_expr
07ec4     FD 30 02 F6 | 	mov	local06, result1
07ec8     94 01 90 FD | 	jmp	#LR__0724
07ecc                 | LR__0694
07ecc                 | ' return expr()
07ecc     D8 3F B0 FD | 	call	#_expr
07ed0     FD 30 02 F6 | 	mov	local06, result1
07ed4     88 01 90 FD | 	jmp	#LR__0724
07ed8                 | LR__0695
07ed8                 | ' return expr()
07ed8     CC 3F B0 FD | 	call	#_expr
07edc     FD 30 02 F6 | 	mov	local06, result1
07ee0     7C 01 90 FD | 	jmp	#LR__0724
07ee4                 | LR__0696
07ee4     FC 09 B0 FD | 	call	#_compile_fun_4p
07ee8     FD 30 02 F6 | 	mov	local06, result1
07eec     70 01 90 FD | 	jmp	#LR__0724
07ef0                 | LR__0697
07ef0                 | ' return expr()
07ef0     B4 3F B0 FD | 	call	#_expr
07ef4     FD 30 02 F6 | 	mov	local06, result1
07ef8     64 01 90 FD | 	jmp	#LR__0724
07efc                 | LR__0698
07efc     6C 08 B0 FD | 	call	#_compile_fun_2p
07f00     FD 30 02 F6 | 	mov	local06, result1
07f04     58 01 90 FD | 	jmp	#LR__0724
07f08                 | LR__0699
07f08     30 0B B0 FD | 	call	#_compile_fun_varp
07f0c     FD 34 02 F6 | 	mov	local08, result1
07f10     FE 30 02 F6 | 	mov	local06, result2
07f14     48 01 90 FD | 	jmp	#LR__0724
07f18                 | LR__0700
07f18     20 0B B0 FD | 	call	#_compile_fun_varp
07f1c     FD 34 02 F6 | 	mov	local08, result1
07f20     FE 30 02 F6 | 	mov	local06, result2
07f24     38 01 90 FD | 	jmp	#LR__0724
07f28                 | LR__0701
07f28     40 08 B0 FD | 	call	#_compile_fun_2p
07f2c     FD 30 02 F6 | 	mov	local06, result1
07f30     2C 01 90 FD | 	jmp	#LR__0724
07f34                 | LR__0702
07f34     34 08 B0 FD | 	call	#_compile_fun_2p
07f38     FD 30 02 F6 | 	mov	local06, result1
07f3c     20 01 90 FD | 	jmp	#LR__0724
07f40                 | LR__0703
07f40     84 16 B0 FD | 	call	#_compile_print
07f44     FD 30 02 F6 | 	mov	local06, result1
07f48     D0 01 90 FD | 	jmp	#LR__0725
07f4c                 | LR__0704
07f4c     EC 0A B0 FD | 	call	#_compile_fun_varp
07f50     FD 34 02 F6 | 	mov	local08, result1
07f54     FE 30 02 F6 | 	mov	local06, result2
07f58     04 01 90 FD | 	jmp	#LR__0724
07f5c                 | LR__0705
07f5c     B8 0B B0 FD | 	call	#_compile_read
07f60     FD 34 02 F6 | 	mov	local08, result1
07f64     FE 30 02 F6 | 	mov	local06, result2
07f68     F4 00 90 FD | 	jmp	#LR__0724
07f6c                 | LR__0706
07f6c                 | ' return expr()
07f6c     38 3F B0 FD | 	call	#_expr
07f70     FD 30 02 F6 | 	mov	local06, result1
07f74     E8 00 90 FD | 	jmp	#LR__0724
07f78                 | LR__0707
07f78     C0 0A B0 FD | 	call	#_compile_fun_varp
07f7c     FD 34 02 F6 | 	mov	local08, result1
07f80     FE 30 02 F6 | 	mov	local06, result2
07f84     D8 00 90 FD | 	jmp	#LR__0724
07f88                 | LR__0708
07f88     B0 0A B0 FD | 	call	#_compile_fun_varp
07f8c     FD 34 02 F6 | 	mov	local08, result1
07f90     FE 30 02 F6 | 	mov	local06, result2
07f94     C8 00 90 FD | 	jmp	#LR__0724
07f98                 | LR__0709
07f98     A0 0A B0 FD | 	call	#_compile_fun_varp
07f9c     FD 34 02 F6 | 	mov	local08, result1
07fa0     FE 30 02 F6 | 	mov	local06, result2
07fa4     B8 00 90 FD | 	jmp	#LR__0724
07fa8                 | LR__0710
07fa8     C0 07 B0 FD | 	call	#_compile_fun_2p
07fac     FD 30 02 F6 | 	mov	local06, result1
07fb0     AC 00 90 FD | 	jmp	#LR__0724
07fb4                 | LR__0711
07fb4     B4 07 B0 FD | 	call	#_compile_fun_2p
07fb8     FD 30 02 F6 | 	mov	local06, result1
07fbc     A0 00 90 FD | 	jmp	#LR__0724
07fc0                 | LR__0712
07fc0     A8 07 B0 FD | 	call	#_compile_fun_2p
07fc4     FD 30 02 F6 | 	mov	local06, result1
07fc8     94 00 90 FD | 	jmp	#LR__0724
07fcc                 | LR__0713
07fcc     9C 07 B0 FD | 	call	#_compile_fun_2p
07fd0     FD 30 02 F6 | 	mov	local06, result1
07fd4     88 00 90 FD | 	jmp	#LR__0724
07fd8                 | LR__0714
07fd8     90 07 B0 FD | 	call	#_compile_fun_2p
07fdc     FD 30 02 F6 | 	mov	local06, result1
07fe0     7C 00 90 FD | 	jmp	#LR__0724
07fe4                 | LR__0715
07fe4     84 07 B0 FD | 	call	#_compile_fun_2p
07fe8     FD 30 02 F6 | 	mov	local06, result1
07fec     70 00 90 FD | 	jmp	#LR__0724
07ff0                 | LR__0716
07ff0     78 07 B0 FD | 	call	#_compile_fun_2p
07ff4     FD 30 02 F6 | 	mov	local06, result1
07ff8     64 00 90 FD | 	jmp	#LR__0724
07ffc                 | LR__0717
07ffc     3C 0A B0 FD | 	call	#_compile_fun_varp
08000     FD 34 02 F6 | 	mov	local08, result1
08004     FE 30 02 F6 | 	mov	local06, result2
08008     54 00 90 FD | 	jmp	#LR__0724
0800c                 | LR__0718
0800c     E4 07 B0 FD | 	call	#_compile_fun_3p
08010     FD 30 02 F6 | 	mov	local06, result1
08014     48 00 90 FD | 	jmp	#LR__0724
08018                 | LR__0719
08018                 | ' return expr()
08018     8C 3E B0 FD | 	call	#_expr
0801c     FD 30 02 F6 | 	mov	local06, result1
08020     3C 00 90 FD | 	jmp	#LR__0724
08024                 | LR__0720
08024     44 07 B0 FD | 	call	#_compile_fun_2p
08028     FD 30 02 F6 | 	mov	local06, result1
0802c     30 00 90 FD | 	jmp	#LR__0724
08030                 | LR__0721
08030     38 07 B0 FD | 	call	#_compile_fun_2p
08034     FD 30 02 F6 | 	mov	local06, result1
08038     24 00 90 FD | 	jmp	#LR__0724
0803c                 | LR__0722
0803c     2C 07 B0 FD | 	call	#_compile_fun_2p
08040     FD 30 02 F6 | 	mov	local06, result1
08044     18 00 90 FD | 	jmp	#LR__0724
08048                 | LR__0723
08048     1C 13 B0 FD | 	call	#_compile_array_assign
0804c     FD 30 02 F6 | 	mov	local06, result1
08050     0E 30 0E F2 | 	cmp	local06, #14 wz
08054     C4 00 90 5D |  if_ne	jmp	#LR__0725
08058                 | ' return 23
08058     17 30 06 F6 | 	mov	local06, #23
0805c     BC 00 90 FD | 	jmp	#LR__0725
08060                 | ' return 23
08060                 | LR__0724
08060     19 2B 02 F6 | 	mov	local03, local07
08064     1A 27 02 F6 | 	mov	local01, local08
08068     13 37 02 F6 | 	mov	local09, local01
0806c     14 39 02 F6 | 	mov	local10, local02
08070     15 33 02 F6 | 	mov	local07, local03
08074     4A 00 00 FF 
08078     7C E4 05 F1 | 	add	objptr, ##38012
0807c     F2 26 02 FB | 	rdlong	local01, objptr
08080     13 35 02 F6 | 	mov	local08, local01
08084     01 34 66 F0 | 	shl	local08, #1
08088     13 35 02 F1 | 	add	local08, local01
0808c     02 34 66 F0 | 	shl	local08, #2
08090     03 00 00 FF 
08094     00 E4 85 F1 | 	sub	objptr, ##1536
08098     F2 34 02 F1 | 	add	local08, objptr
0809c     1A 37 62 FC | 	wrlong	local09, local08
080a0     03 00 00 FF 
080a4     00 E4 05 F1 | 	add	objptr, ##1536
080a8     F2 26 02 FB | 	rdlong	local01, objptr
080ac     13 37 02 F6 | 	mov	local09, local01
080b0     01 36 66 F0 | 	shl	local09, #1
080b4     13 37 02 F1 | 	add	local09, local01
080b8     02 36 66 F0 | 	shl	local09, #2
080bc     03 00 00 FF 
080c0     00 E4 85 F1 | 	sub	objptr, ##1536
080c4     F2 36 02 F1 | 	add	local09, objptr
080c8     04 36 06 F1 | 	add	local09, #4
080cc     1B 39 62 FC | 	wrlong	local10, local09
080d0     03 00 00 FF 
080d4     00 E4 05 F1 | 	add	objptr, ##1536
080d8     F2 26 02 FB | 	rdlong	local01, objptr
080dc     13 39 02 F6 | 	mov	local10, local01
080e0     01 38 66 F0 | 	shl	local10, #1
080e4     13 39 02 F1 | 	add	local10, local01
080e8     02 38 66 F0 | 	shl	local10, #2
080ec     03 00 00 FF 
080f0     00 E4 85 F1 | 	sub	objptr, ##1536
080f4     F2 38 02 F1 | 	add	local10, objptr
080f8     08 38 06 F1 | 	add	local10, #8
080fc     1C 33 62 FC | 	wrlong	local07, local10
08100     03 00 00 FF 
08104     00 E4 05 F1 | 	add	objptr, ##1536
08108     F2 36 02 FB | 	rdlong	local09, objptr
0810c     01 36 06 F1 | 	add	local09, #1
08110     F2 36 62 FC | 	wrlong	local09, objptr
08114     4A 00 00 FF 
08118     7C E4 85 F1 | 	sub	objptr, ##38012
0811c                 | LR__0725
0811c                 | ' 
0811c                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
0811c                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
0811c     03 2C 0E F2 | 	cmp	local04, #3 wz
08120     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
08124     38 00 90 5D |  if_ne	jmp	#LR__0726
08128     4A 00 00 FF 
0812c     7C E4 05 F1 | 	add	objptr, ##38012
08130     F2 38 02 FB | 	rdlong	local10, objptr
08134     1C 27 02 F6 | 	mov	local01, local10
08138     01 26 66 F0 | 	shl	local01, #1
0813c     1C 27 02 F1 | 	add	local01, local10
08140     02 26 66 F0 | 	shl	local01, #2
08144     03 00 00 FF 
08148     00 E4 85 F1 | 	sub	objptr, ##1536
0814c     F2 26 02 F1 | 	add	local01, objptr
08150     08 26 06 F1 | 	add	local01, #8
08154     13 FD 6B FC | 	wrlong	#510, local01
08158     47 00 00 FF 
0815c     7C E4 85 F1 | 	sub	objptr, ##36476
08160                 | LR__0726
08160                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
08160                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
08160     4A 00 00 FF 
08164     7C E4 05 F1 | 	add	objptr, ##38012
08168     F2 26 02 FB | 	rdlong	local01, objptr
0816c     4A 00 00 FF 
08170     7C E4 85 F1 | 	sub	objptr, ##38012
08174     97 58 48 FB | 	callpa	#(@LR__0729-@LR__0727)>>2,fcache_load_ptr_
08178                 | LR__0727
08178     13 39 02 F6 | 	mov	local10, local01
0817c     01 38 66 F0 | 	shl	local10, #1
08180     13 39 02 F1 | 	add	local10, local01
08184     02 38 66 F0 | 	shl	local10, #2
08188     47 00 00 FF 
0818c     7C E4 05 F1 | 	add	objptr, ##36476
08190     F2 38 02 F1 | 	add	local10, objptr
08194     08 38 06 F1 | 	add	local10, #8
08198     1C 39 02 FB | 	rdlong	local10, local10
0819c     9B 38 0E F2 | 	cmp	local10, #155 wz
081a0     47 00 00 FF 
081a4     7C E4 85 F1 | 	sub	objptr, ##36476
081a8     70 00 90 5D |  if_ne	jmp	#LR__0728
081ac     13 37 02 F6 | 	mov	local09, local01
081b0     01 36 86 F1 | 	sub	local09, #1
081b4     1B 39 02 F6 | 	mov	local10, local09
081b8     01 38 66 F0 | 	shl	local10, #1
081bc     1B 39 02 F1 | 	add	local10, local09
081c0     02 38 66 F0 | 	shl	local10, #2
081c4     47 00 00 FF 
081c8     7C E4 05 F1 | 	add	objptr, ##36476
081cc     F2 38 02 F1 | 	add	local10, objptr
081d0     08 38 06 F1 | 	add	local10, #8
081d4     1C 39 02 FB | 	rdlong	local10, local10
081d8     11 38 0E F2 | 	cmp	local10, #17 wz
081dc     47 00 00 FF 
081e0     7C E4 85 F1 | 	sub	objptr, ##36476
081e4     34 00 90 5D |  if_ne	jmp	#LR__0728
081e8     13 37 02 F6 | 	mov	local09, local01
081ec     01 36 86 F1 | 	sub	local09, #1
081f0     1B 39 02 F6 | 	mov	local10, local09
081f4     01 38 66 F0 | 	shl	local10, #1
081f8     1B 39 02 F1 | 	add	local10, local09
081fc     02 38 66 F0 | 	shl	local10, #2
08200     47 00 00 FF 
08204     7C E4 05 F1 | 	add	objptr, ##36476
08208     F2 38 02 F1 | 	add	local10, objptr
0820c     08 38 06 F1 | 	add	local10, #8
08210     1C 25 68 FC | 	wrlong	#18, local10
08214     47 00 00 FF 
08218     7C E4 85 F1 | 	sub	objptr, ##36476
0821c                 | LR__0728
0821c     01 26 86 F1 | 	sub	local01, #1
08220     01 26 56 F2 | 	cmps	local01, #1 wc
08224     50 FF 9F 3D |  if_ae	jmp	#LR__0727
08228                 | LR__0729
08228                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
08228                 | ' return err
08228     18 FB 01 F6 | 	mov	result1, local06
0822c     A7 F0 03 F6 | 	mov	ptra, fp
08230     B2 00 A0 FD | 	call	#popregs_
08234                 | _compile_immediate_ret
08234     2D 00 64 FD | 	ret
08238                 | 
08238                 | ' 
08238                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
08238                 | ' 
08238                 | ' function compile_immediate_assign(linetype as ulong) as ulong
08238                 | _compile_immediate_assign
08238     0C 4A 05 F6 | 	mov	COUNT_, #12
0823c     A8 00 A0 FD | 	call	#pushregs_
08240     09 2D 02 F6 | 	mov	local04, arg01
08244     FF 2A 06 F6 | 	mov	local03, #255
08248     01 2E 66 F6 | 	neg	local05, #1
0824c     00 30 06 F6 | 	mov	local06, #0
08250                 | ' 
08250                 | ' t1.result_type=result_error : t1.result.uresult=0
08250                 | ' i=-1: j=-1 : err=0
08250                 | ' 
08250                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
08250     02 2C 0E F2 | 	cmp	local04, #2 wz
08254     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
08258     35 00 00 AF 
0825c     0C E4 05 A1 |  if_e	add	objptr, ##27148
08260     F2 32 02 AB |  if_e	rdlong	local07, objptr
08264     02 00 00 AF 
08268     38 E4 05 A1 |  if_e	add	objptr, ##1080
0826c     F2 04 68 AC |  if_e	wrlong	#2, objptr
08270     37 00 00 AF 
08274     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08278                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
08278     04 2C 0E F2 | 	cmp	local04, #4 wz
0827c     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
08280     2C 00 90 5D |  if_ne	jmp	#LR__0730
08284     35 00 00 FF 
08288     14 E4 05 F1 | 	add	objptr, ##27156
0828c     F2 32 02 FB | 	rdlong	local07, objptr
08290     02 00 00 FF 
08294     30 E4 05 F1 | 	add	objptr, ##1072
08298     F2 06 68 FC | 	wrlong	#3, objptr
0829c     13 00 00 FF 
082a0     38 E4 05 F1 | 	add	objptr, ##9784
082a4     F2 04 68 FC | 	wrlong	#2, objptr
082a8     4A 00 00 FF 
082ac     7C E4 85 F1 | 	sub	objptr, ##38012
082b0                 | LR__0730
082b0                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
082b0     05 2C 0E F2 | 	cmp	local04, #5 wz
082b4     3C 00 90 5D |  if_ne	jmp	#LR__0731
082b8     37 00 00 FF 
082bc     44 E4 05 F1 | 	add	objptr, ##28228
082c0     F2 FA 01 FB | 	rdlong	result1, objptr
082c4     FD 32 02 F6 | 	mov	local07, result1
082c8     03 32 66 F0 | 	shl	local07, #3
082cc     02 00 00 FF 
082d0     38 E4 85 F1 | 	sub	objptr, ##1080
082d4     F2 32 02 F1 | 	add	local07, objptr
082d8     19 33 02 FB | 	rdlong	local07, local07
082dc     02 FA 05 F1 | 	add	result1, #2
082e0     02 00 00 FF 
082e4     38 E4 05 F1 | 	add	objptr, ##1080
082e8     F2 FA 61 FC | 	wrlong	result1, objptr
082ec     37 00 00 FF 
082f0     44 E4 85 F1 | 	sub	objptr, ##28228
082f4                 | LR__0731
082f4     19 13 02 F6 | 	mov	arg01, local07
082f8     01 14 06 F6 | 	mov	arg02, #1
082fc     74 0D B2 FD | 	call	#__system__Right_S
08300     FD 34 02 F6 | 	mov	local08, result1
08304     A0 3B B0 FD | 	call	#_expr
08308                 | ' 
08308                 | ' suffix2$=right$(varname2$,1)
08308                 | ' expr()
08308                 | ' if varnum>0 then					' try to find a variable
08308     35 00 00 FF 
0830c     08 E4 05 F1 | 	add	objptr, ##27144
08310     F2 36 02 FB | 	rdlong	local09, objptr
08314     35 00 00 FF 
08318     08 E4 85 F1 | 	sub	objptr, ##27144
0831c     01 36 56 F2 | 	cmps	local09, #1 wc
08320     58 00 90 CD |  if_b	jmp	#LR__0734
08324                 | '   for i=0 to varnum-1
08324     00 38 06 F6 | 	mov	local10, #0
08328     35 00 00 FF 
0832c     08 E4 05 F1 | 	add	objptr, ##27144
08330     F2 3A 02 FB | 	rdlong	local11, objptr
08334     35 00 00 FF 
08338     08 E4 85 F1 | 	sub	objptr, ##27144
0833c                 | LR__0732
0833c     1D 39 52 F2 | 	cmps	local10, local11 wc
08340     38 00 90 3D |  if_ae	jmp	#LR__0733
08344                 | '     if variables(i).name=varname2$ then j=i : exit
08344     1C 37 02 F6 | 	mov	local09, local10
08348     04 36 66 F0 | 	shl	local09, #4
0834c     14 00 00 FF 
08350     F8 E5 05 F1 | 	add	objptr, ##10744
08354     F2 36 02 F1 | 	add	local09, objptr
08358     1B 13 02 FB | 	rdlong	arg01, local09
0835c     19 15 02 F6 | 	mov	arg02, local07
08360     14 00 00 FF 
08364     F8 E5 85 F1 | 	sub	objptr, ##10744
08368     2C EC B1 FD | 	call	#__system___string_cmp
0836c     00 FA 0D F2 | 	cmp	result1, #0 wz
08370     1C 2F 02 A6 |  if_e	mov	local05, local10
08374     01 38 06 51 |  if_ne	add	local10, #1
08378     C0 FF 9F 5D |  if_ne	jmp	#LR__0732
0837c                 | LR__0733
0837c                 | LR__0734
0837c                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
0837c     FF FF 7F FF 
08380     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
08384     60 00 90 5D |  if_ne	jmp	#LR__0735
08388     35 00 00 FF 
0838c     08 E4 05 F1 | 	add	objptr, ##27144
08390     F2 36 02 FB | 	rdlong	local09, objptr
08394     35 00 00 FF 
08398     08 E4 85 F1 | 	sub	objptr, ##27144
0839c     02 00 00 FF 
083a0     00 36 56 F2 | 	cmps	local09, ##1024 wc
083a4     40 00 90 3D |  if_ae	jmp	#LR__0735
083a8     35 00 00 FF 
083ac     08 E4 05 F1 | 	add	objptr, ##27144
083b0     F2 3A 02 FB | 	rdlong	local11, objptr
083b4     04 3A 66 F0 | 	shl	local11, #4
083b8     20 00 00 FF 
083bc     10 E4 85 F1 | 	sub	objptr, ##16400
083c0     F2 3A 02 F1 | 	add	local11, objptr
083c4     1D 33 62 FC | 	wrlong	local07, local11
083c8     20 00 00 FF 
083cc     10 E4 05 F1 | 	add	objptr, ##16400
083d0     F2 36 02 FB | 	rdlong	local09, objptr
083d4     1B 2F 02 F6 | 	mov	local05, local09
083d8     01 36 06 F1 | 	add	local09, #1
083dc     F2 36 62 FC | 	wrlong	local09, objptr
083e0     35 00 00 FF 
083e4     08 E4 85 F1 | 	sub	objptr, ##27144
083e8                 | LR__0735
083e8                 | ' if varnum>=maxvars then
083e8     35 00 00 FF 
083ec     08 E4 05 F1 | 	add	objptr, ##27144
083f0     F2 36 02 FB | 	rdlong	local09, objptr
083f4     35 00 00 FF 
083f8     08 E4 85 F1 | 	sub	objptr, ##27144
083fc     02 00 00 FF 
08400     00 36 56 F2 | 	cmps	local09, ##1024 wc
08404     2D 30 06 36 |  if_ae	mov	local06, #45
08408     C8 01 90 3D |  if_ae	jmp	#LR__0740
0840c     17 27 02 F6 | 	mov	local01, local05
08410     17 2A 06 F6 | 	mov	local03, #23
08414     13 37 02 F6 | 	mov	local09, local01
08418     14 3D 02 F6 | 	mov	local12, local02
0841c     15 27 02 F6 | 	mov	local01, local03
08420     4A 00 00 FF 
08424     7C E4 05 F1 | 	add	objptr, ##38012
08428     F2 3A 02 FB | 	rdlong	local11, objptr
0842c     1D 39 02 F6 | 	mov	local10, local11
08430     01 38 66 F0 | 	shl	local10, #1
08434     1D 39 02 F1 | 	add	local10, local11
08438     02 38 66 F0 | 	shl	local10, #2
0843c     03 00 00 FF 
08440     00 E4 85 F1 | 	sub	objptr, ##1536
08444     F2 38 02 F1 | 	add	local10, objptr
08448     1C 37 62 FC | 	wrlong	local09, local10
0844c     03 00 00 FF 
08450     00 E4 05 F1 | 	add	objptr, ##1536
08454     F2 36 02 FB | 	rdlong	local09, objptr
08458     1B 3B 02 F6 | 	mov	local11, local09
0845c     01 3A 66 F0 | 	shl	local11, #1
08460     1B 3B 02 F1 | 	add	local11, local09
08464     02 3A 66 F0 | 	shl	local11, #2
08468     03 00 00 FF 
0846c     00 E4 85 F1 | 	sub	objptr, ##1536
08470     F2 3A 02 F1 | 	add	local11, objptr
08474     04 3A 06 F1 | 	add	local11, #4
08478     1D 3D 62 FC | 	wrlong	local12, local11
0847c     03 00 00 FF 
08480     00 E4 05 F1 | 	add	objptr, ##1536
08484     F2 36 02 FB | 	rdlong	local09, objptr
08488     1B 3D 02 F6 | 	mov	local12, local09
0848c     01 3C 66 F0 | 	shl	local12, #1
08490     1B 3D 02 F1 | 	add	local12, local09
08494     02 3C 66 F0 | 	shl	local12, #2
08498     03 00 00 FF 
0849c     00 E4 85 F1 | 	sub	objptr, ##1536
084a0     F2 3C 02 F1 | 	add	local12, objptr
084a4     08 3C 06 F1 | 	add	local12, #8
084a8     1E 27 62 FC | 	wrlong	local01, local12
084ac     03 00 00 FF 
084b0     00 E4 05 F1 | 	add	objptr, ##1536
084b4     F2 36 02 FB | 	rdlong	local09, objptr
084b8     01 36 06 F1 | 	add	local09, #1
084bc     F2 36 62 FC | 	wrlong	local09, objptr
084c0     4A 00 00 FF 
084c4     7C E4 85 F1 | 	sub	objptr, ##38012
084c8                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
084c8                 | '   compiledline(lineptr)=t1:  lineptr+=1 
084c8                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
084c8     03 2C 0E F2 | 	cmp	local04, #3 wz
084cc     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
084d0     38 00 90 5D |  if_ne	jmp	#LR__0736
084d4     4A 00 00 FF 
084d8     7C E4 05 F1 | 	add	objptr, ##38012
084dc     F2 3C 02 FB | 	rdlong	local12, objptr
084e0     1E 27 02 F6 | 	mov	local01, local12
084e4     01 26 66 F0 | 	shl	local01, #1
084e8     1E 27 02 F1 | 	add	local01, local12
084ec     02 26 66 F0 | 	shl	local01, #2
084f0     03 00 00 FF 
084f4     00 E4 85 F1 | 	sub	objptr, ##1536
084f8     F2 26 02 F1 | 	add	local01, objptr
084fc     08 26 06 F1 | 	add	local01, #8
08500     13 FD 6B FC | 	wrlong	#510, local01
08504     47 00 00 FF 
08508     7C E4 85 F1 | 	sub	objptr, ##36476
0850c                 | LR__0736
0850c                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
0850c     4A 00 00 FF 
08510     7C E4 05 F1 | 	add	objptr, ##38012
08514     F2 38 02 FB | 	rdlong	local10, objptr
08518     4A 00 00 FF 
0851c     7C E4 85 F1 | 	sub	objptr, ##38012
08520     97 58 48 FB | 	callpa	#(@LR__0739-@LR__0737)>>2,fcache_load_ptr_
08524                 | LR__0737
08524     1C 3D 02 F6 | 	mov	local12, local10
08528     01 3C 66 F0 | 	shl	local12, #1
0852c     1C 3D 02 F1 | 	add	local12, local10
08530     02 3C 66 F0 | 	shl	local12, #2
08534     47 00 00 FF 
08538     7C E4 05 F1 | 	add	objptr, ##36476
0853c     F2 3C 02 F1 | 	add	local12, objptr
08540     08 3C 06 F1 | 	add	local12, #8
08544     1E 3D 02 FB | 	rdlong	local12, local12
08548     9B 3C 0E F2 | 	cmp	local12, #155 wz
0854c     47 00 00 FF 
08550     7C E4 85 F1 | 	sub	objptr, ##36476
08554     70 00 90 5D |  if_ne	jmp	#LR__0738
08558     1C 3D 02 F6 | 	mov	local12, local10
0855c     01 3C 86 F1 | 	sub	local12, #1
08560     1E 27 02 F6 | 	mov	local01, local12
08564     01 26 66 F0 | 	shl	local01, #1
08568     1E 27 02 F1 | 	add	local01, local12
0856c     02 26 66 F0 | 	shl	local01, #2
08570     47 00 00 FF 
08574     7C E4 05 F1 | 	add	objptr, ##36476
08578     F2 26 02 F1 | 	add	local01, objptr
0857c     08 26 06 F1 | 	add	local01, #8
08580     13 27 02 FB | 	rdlong	local01, local01
08584     11 26 0E F2 | 	cmp	local01, #17 wz
08588     47 00 00 FF 
0858c     7C E4 85 F1 | 	sub	objptr, ##36476
08590     34 00 90 5D |  if_ne	jmp	#LR__0738
08594     1C 3D 02 F6 | 	mov	local12, local10
08598     01 3C 86 F1 | 	sub	local12, #1
0859c     1E 27 02 F6 | 	mov	local01, local12
085a0     01 26 66 F0 | 	shl	local01, #1
085a4     1E 27 02 F1 | 	add	local01, local12
085a8     02 26 66 F0 | 	shl	local01, #2
085ac     47 00 00 FF 
085b0     7C E4 05 F1 | 	add	objptr, ##36476
085b4     F2 26 02 F1 | 	add	local01, objptr
085b8     08 26 06 F1 | 	add	local01, #8
085bc     13 25 68 FC | 	wrlong	#18, local01
085c0     47 00 00 FF 
085c4     7C E4 85 F1 | 	sub	objptr, ##36476
085c8                 | LR__0738
085c8     01 38 86 F1 | 	sub	local10, #1
085cc     01 38 56 F2 | 	cmps	local10, #1 wc
085d0     50 FF 9F 3D |  if_ae	jmp	#LR__0737
085d4                 | LR__0739
085d4                 | LR__0740
085d4                 | ' return err
085d4     18 FB 01 F6 | 	mov	result1, local06
085d8     A7 F0 03 F6 | 	mov	ptra, fp
085dc     B2 00 A0 FD | 	call	#popregs_
085e0                 | _compile_immediate_assign_ret
085e0     2D 00 64 FD | 	ret
085e4                 | 
085e4                 | ' 
085e4                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
085e4                 | ' 
085e4                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
085e4                 | _compile
085e4     03 4A 05 F6 | 	mov	COUNT_, #3
085e8     A8 00 A0 FD | 	call	#pushregs_
085ec     09 27 02 F6 | 	mov	local01, arg01
085f0     0B 29 02 F6 | 	mov	local02, arg03
085f4     47 00 00 FF 
085f8     7C E4 05 F1 | 	add	objptr, ##36476
085fc     F2 26 62 FC | 	wrlong	local01, objptr
08600     04 E4 05 F1 | 	add	objptr, #4
08604     F2 14 62 FC | 	wrlong	arg02, objptr
08608     47 00 00 FF 
0860c     80 E4 85 F1 | 	sub	objptr, ##36480
08610     14 13 02 F6 | 	mov	arg01, local02
08614     01 12 06 F1 | 	add	arg01, #1
08618     13 15 02 F6 | 	mov	arg02, local01
0861c     44 F2 BF FD | 	call	#_compile_immediate
08620     FD 2A 0A F6 | 	mov	local03, result1 wz
08624                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
08624                 | ' ucompiledline(0)=alinemajor
08624                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
08624                 | ' 
08624                 | ' ' cont: 
08624                 | ' ' 0 - this is the first part of the line that will continue
08624                 | ' ' 1 - this is the continuation of the line
08624                 | ' ' 2 - this is the last continued line
08624                 | ' ' 3 - this is the one and only part
08624                 | ' 
08624                 | ' err=compile_immediate(cont+1,alinemajor) 
08624                 | ' if err=0 andalso alinemajor>0 then
08624     74 00 90 5D |  if_ne	jmp	#LR__0755
08628     01 26 16 F2 | 	cmp	local01, #1 wc
0862c     6C 00 90 CD |  if_b	jmp	#LR__0755
08630                 | '   if cont=3 orelse cont=2 then 
08630     03 28 0E F2 | 	cmp	local02, #3 wz
08634     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08638     60 00 90 5D |  if_ne	jmp	#LR__0754
0863c                 | '     if alinemajor >lastline then 
0863c     4A 00 00 FF 
08640     8C E4 05 F1 | 	add	objptr, ##38028
08644     F2 14 02 FB | 	rdlong	arg02, objptr
08648     4A 00 00 FF 
0864c     8C E4 85 F1 | 	sub	objptr, ##38028
08650     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08654     0C 00 90 ED |  if_be	jmp	#LR__0750
08658     13 13 02 F6 | 	mov	arg01, local01
0865c     3C F1 BF FD | 	call	#_add_line_at_end
08660     38 00 90 FD | 	jmp	#LR__0753
08664                 | LR__0750
08664     13 13 02 F6 | 	mov	arg01, local01
08668     00 EB BF FD | 	call	#_deleteline
0866c                 | '       deleteline(alinemajor)  
0866c                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
0866c     4A 00 00 FF 
08670     8C E4 05 F1 | 	add	objptr, ##38028
08674     F2 14 02 FB | 	rdlong	arg02, objptr
08678     4A 00 00 FF 
0867c     8C E4 85 F1 | 	sub	objptr, ##38028
08680     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08684     0C 00 90 ED |  if_be	jmp	#LR__0751
08688     13 13 02 F6 | 	mov	arg01, local01
0868c     0C F1 BF FD | 	call	#_add_line_at_end
08690     08 00 90 FD | 	jmp	#LR__0752
08694                 | LR__0751
08694     13 13 02 F6 | 	mov	arg01, local01
08698     E4 EE BF FD | 	call	#_insertline
0869c                 | LR__0752
0869c                 | LR__0753
0869c                 | LR__0754
0869c                 | LR__0755
0869c                 | ' return err
0869c     15 FB 01 F6 | 	mov	result1, local03
086a0     A7 F0 03 F6 | 	mov	ptra, fp
086a4     B2 00 A0 FD | 	call	#popregs_
086a8                 | _compile_ret
086a8     2D 00 64 FD | 	ret
086ac                 | 
086ac                 | ' 
086ac                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
086ac                 | ' 
086ac                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
086ac                 | _compile_assign
086ac     03 4A 05 F6 | 	mov	COUNT_, #3
086b0     A8 00 A0 FD | 	call	#pushregs_
086b4     09 27 02 F6 | 	mov	local01, arg01
086b8     0B 29 02 F6 | 	mov	local02, arg03
086bc     47 00 00 FF 
086c0     7C E4 05 F1 | 	add	objptr, ##36476
086c4     F2 26 62 FC | 	wrlong	local01, objptr
086c8     04 E4 05 F1 | 	add	objptr, #4
086cc     F2 14 62 FC | 	wrlong	arg02, objptr
086d0     47 00 00 FF 
086d4     80 E4 85 F1 | 	sub	objptr, ##36480
086d8     14 13 02 F6 | 	mov	arg01, local02
086dc     01 12 06 F1 | 	add	arg01, #1
086e0     54 FB BF FD | 	call	#_compile_immediate_assign
086e4     FD 2A 02 F6 | 	mov	local03, result1
086e8                 | ' 
086e8                 | ' ucompiledline(0)=alinemajor
086e8                 | ' ucompiledline(1)=alineminor
086e8                 | ' 
086e8                 | ' err=compile_immediate_assign(cont+1) 
086e8                 | ' if alinemajor>0 then
086e8     01 26 16 F2 | 	cmp	local01, #1 wc
086ec     6C 00 90 CD |  if_b	jmp	#LR__0765
086f0                 | '   if cont=3 orelse cont=2 then 
086f0     03 28 0E F2 | 	cmp	local02, #3 wz
086f4     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
086f8     60 00 90 5D |  if_ne	jmp	#LR__0764
086fc                 | '     if alinemajor >lastline then 
086fc     4A 00 00 FF 
08700     8C E4 05 F1 | 	add	objptr, ##38028
08704     F2 14 02 FB | 	rdlong	arg02, objptr
08708     4A 00 00 FF 
0870c     8C E4 85 F1 | 	sub	objptr, ##38028
08710     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08714     0C 00 90 ED |  if_be	jmp	#LR__0760
08718     13 13 02 F6 | 	mov	arg01, local01
0871c     7C F0 BF FD | 	call	#_add_line_at_end
08720     38 00 90 FD | 	jmp	#LR__0763
08724                 | LR__0760
08724     13 13 02 F6 | 	mov	arg01, local01
08728     40 EA BF FD | 	call	#_deleteline
0872c                 | '       deleteline(alinemajor)  
0872c                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
0872c     4A 00 00 FF 
08730     8C E4 05 F1 | 	add	objptr, ##38028
08734     F2 14 02 FB | 	rdlong	arg02, objptr
08738     4A 00 00 FF 
0873c     8C E4 85 F1 | 	sub	objptr, ##38028
08740     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08744     0C 00 90 ED |  if_be	jmp	#LR__0761
08748     13 13 02 F6 | 	mov	arg01, local01
0874c     4C F0 BF FD | 	call	#_add_line_at_end
08750     08 00 90 FD | 	jmp	#LR__0762
08754                 | LR__0761
08754     13 13 02 F6 | 	mov	arg01, local01
08758     24 EE BF FD | 	call	#_insertline
0875c                 | LR__0762
0875c                 | LR__0763
0875c                 | LR__0764
0875c                 | LR__0765
0875c                 | ' return err
0875c     15 FB 01 F6 | 	mov	result1, local03
08760     A7 F0 03 F6 | 	mov	ptra, fp
08764     B2 00 A0 FD | 	call	#popregs_
08768                 | _compile_assign_ret
08768     2D 00 64 FD | 	ret
0876c                 | 
0876c                 | ' 
0876c                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
0876c                 | ' 
0876c                 | ' function compile_fun_2p() as ulong
0876c                 | _compile_fun_2p
0876c     01 4A 05 F6 | 	mov	COUNT_, #1
08770     A8 00 A0 FD | 	call	#pushregs_
08774     30 37 B0 FD | 	call	#_expr
08778     FD 26 02 F6 | 	mov	local01, result1
0877c                 | ' err=expr() : if err>0 then return err
0877c     01 26 16 F2 | 	cmp	local01, #1 wc
08780     13 FB 01 36 |  if_ae	mov	result1, local01
08784     60 00 90 3D |  if_ae	jmp	#LR__0770
08788                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08788     37 00 00 FF 
0878c     44 E4 05 F1 | 	add	objptr, ##28228
08790     F2 26 02 FB | 	rdlong	local01, objptr
08794     03 26 66 F0 | 	shl	local01, #3
08798     02 00 00 FF 
0879c     38 E4 85 F1 | 	sub	objptr, ##1080
087a0     F2 26 02 F1 | 	add	local01, objptr
087a4     04 26 06 F1 | 	add	local01, #4
087a8     13 27 02 FB | 	rdlong	local01, local01
087ac     11 26 0E F2 | 	cmp	local01, #17 wz
087b0     35 00 00 FF 
087b4     0C E4 85 F1 | 	sub	objptr, ##27148
087b8     15 FA 05 56 |  if_ne	mov	result1, #21
087bc     28 00 90 5D |  if_ne	jmp	#LR__0770
087c0     37 00 00 FF 
087c4     44 E4 05 F1 | 	add	objptr, ##28228
087c8     F2 26 02 FB | 	rdlong	local01, objptr
087cc     01 26 06 F1 | 	add	local01, #1
087d0     F2 26 62 FC | 	wrlong	local01, objptr
087d4     37 00 00 FF 
087d8     44 E4 85 F1 | 	sub	objptr, ##28228
087dc     C8 36 B0 FD | 	call	#_expr
087e0                 | ' err=expr() : if err>0 then return err
087e0     01 FA 15 F2 | 	cmp	result1, #1 wc
087e4                 | ' return 0
087e4     00 FA 05 C6 |  if_b	mov	result1, #0
087e8                 | LR__0770
087e8     A7 F0 03 F6 | 	mov	ptra, fp
087ec     B2 00 A0 FD | 	call	#popregs_
087f0                 | _compile_fun_2p_ret
087f0     2D 00 64 FD | 	ret
087f4                 | 
087f4                 | ' 
087f4                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
087f4                 | ' 
087f4                 | ' function compile_fun_3p() as ulong
087f4                 | _compile_fun_3p
087f4     01 4A 05 F6 | 	mov	COUNT_, #1
087f8     A8 00 A0 FD | 	call	#pushregs_
087fc     A8 36 B0 FD | 	call	#_expr
08800     FD 26 02 F6 | 	mov	local01, result1
08804                 | ' err=expr() : if err>0 then return err
08804     01 26 16 F2 | 	cmp	local01, #1 wc
08808     13 FB 01 36 |  if_ae	mov	result1, local01
0880c     C8 00 90 3D |  if_ae	jmp	#LR__0780
08810                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08810     37 00 00 FF 
08814     44 E4 05 F1 | 	add	objptr, ##28228
08818     F2 26 02 FB | 	rdlong	local01, objptr
0881c     03 26 66 F0 | 	shl	local01, #3
08820     02 00 00 FF 
08824     38 E4 85 F1 | 	sub	objptr, ##1080
08828     F2 26 02 F1 | 	add	local01, objptr
0882c     04 26 06 F1 | 	add	local01, #4
08830     13 27 02 FB | 	rdlong	local01, local01
08834     11 26 0E F2 | 	cmp	local01, #17 wz
08838     35 00 00 FF 
0883c     0C E4 85 F1 | 	sub	objptr, ##27148
08840     15 FA 05 56 |  if_ne	mov	result1, #21
08844     90 00 90 5D |  if_ne	jmp	#LR__0780
08848     37 00 00 FF 
0884c     44 E4 05 F1 | 	add	objptr, ##28228
08850     F2 26 02 FB | 	rdlong	local01, objptr
08854     01 26 06 F1 | 	add	local01, #1
08858     F2 26 62 FC | 	wrlong	local01, objptr
0885c     37 00 00 FF 
08860     44 E4 85 F1 | 	sub	objptr, ##28228
08864     40 36 B0 FD | 	call	#_expr
08868     FD 26 02 F6 | 	mov	local01, result1
0886c                 | ' err=expr() : if err>0 then return err
0886c     01 26 16 F2 | 	cmp	local01, #1 wc
08870     13 FB 01 36 |  if_ae	mov	result1, local01
08874     60 00 90 3D |  if_ae	jmp	#LR__0780
08878                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08878     37 00 00 FF 
0887c     44 E4 05 F1 | 	add	objptr, ##28228
08880     F2 26 02 FB | 	rdlong	local01, objptr
08884     03 26 66 F0 | 	shl	local01, #3
08888     02 00 00 FF 
0888c     38 E4 85 F1 | 	sub	objptr, ##1080
08890     F2 26 02 F1 | 	add	local01, objptr
08894     04 26 06 F1 | 	add	local01, #4
08898     13 27 02 FB | 	rdlong	local01, local01
0889c     11 26 0E F2 | 	cmp	local01, #17 wz
088a0     35 00 00 FF 
088a4     0C E4 85 F1 | 	sub	objptr, ##27148
088a8     15 FA 05 56 |  if_ne	mov	result1, #21
088ac     28 00 90 5D |  if_ne	jmp	#LR__0780
088b0     37 00 00 FF 
088b4     44 E4 05 F1 | 	add	objptr, ##28228
088b8     F2 26 02 FB | 	rdlong	local01, objptr
088bc     01 26 06 F1 | 	add	local01, #1
088c0     F2 26 62 FC | 	wrlong	local01, objptr
088c4     37 00 00 FF 
088c8     44 E4 85 F1 | 	sub	objptr, ##28228
088cc     D8 35 B0 FD | 	call	#_expr
088d0                 | ' err=expr() : if err>0 then return err
088d0     01 FA 15 F2 | 	cmp	result1, #1 wc
088d4                 | ' return 0
088d4     00 FA 05 C6 |  if_b	mov	result1, #0
088d8                 | LR__0780
088d8     A7 F0 03 F6 | 	mov	ptra, fp
088dc     B2 00 A0 FD | 	call	#popregs_
088e0                 | _compile_fun_3p_ret
088e0     2D 00 64 FD | 	ret
088e4                 | 
088e4                 | ' 
088e4                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
088e4                 | ' 
088e4                 | ' function compile_fun_4p() as ulong
088e4                 | _compile_fun_4p
088e4     01 4A 05 F6 | 	mov	COUNT_, #1
088e8     A8 00 A0 FD | 	call	#pushregs_
088ec     B8 35 B0 FD | 	call	#_expr
088f0     FD 26 02 F6 | 	mov	local01, result1
088f4                 | ' err=expr() : if err>0 then return err
088f4     01 26 16 F2 | 	cmp	local01, #1 wc
088f8     13 FB 01 36 |  if_ae	mov	result1, local01
088fc     30 01 90 3D |  if_ae	jmp	#LR__0790
08900                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08900     37 00 00 FF 
08904     44 E4 05 F1 | 	add	objptr, ##28228
08908     F2 26 02 FB | 	rdlong	local01, objptr
0890c     03 26 66 F0 | 	shl	local01, #3
08910     02 00 00 FF 
08914     38 E4 85 F1 | 	sub	objptr, ##1080
08918     F2 26 02 F1 | 	add	local01, objptr
0891c     04 26 06 F1 | 	add	local01, #4
08920     13 27 02 FB | 	rdlong	local01, local01
08924     11 26 0E F2 | 	cmp	local01, #17 wz
08928     35 00 00 FF 
0892c     0C E4 85 F1 | 	sub	objptr, ##27148
08930     15 FA 05 56 |  if_ne	mov	result1, #21
08934     F8 00 90 5D |  if_ne	jmp	#LR__0790
08938     37 00 00 FF 
0893c     44 E4 05 F1 | 	add	objptr, ##28228
08940     F2 26 02 FB | 	rdlong	local01, objptr
08944     01 26 06 F1 | 	add	local01, #1
08948     F2 26 62 FC | 	wrlong	local01, objptr
0894c     37 00 00 FF 
08950     44 E4 85 F1 | 	sub	objptr, ##28228
08954     50 35 B0 FD | 	call	#_expr
08958     FD 26 02 F6 | 	mov	local01, result1
0895c                 | ' err=expr() : if err>0 then return err
0895c     01 26 16 F2 | 	cmp	local01, #1 wc
08960     13 FB 01 36 |  if_ae	mov	result1, local01
08964     C8 00 90 3D |  if_ae	jmp	#LR__0790
08968                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08968     37 00 00 FF 
0896c     44 E4 05 F1 | 	add	objptr, ##28228
08970     F2 26 02 FB | 	rdlong	local01, objptr
08974     03 26 66 F0 | 	shl	local01, #3
08978     02 00 00 FF 
0897c     38 E4 85 F1 | 	sub	objptr, ##1080
08980     F2 26 02 F1 | 	add	local01, objptr
08984     04 26 06 F1 | 	add	local01, #4
08988     13 27 02 FB | 	rdlong	local01, local01
0898c     11 26 0E F2 | 	cmp	local01, #17 wz
08990     35 00 00 FF 
08994     0C E4 85 F1 | 	sub	objptr, ##27148
08998     15 FA 05 56 |  if_ne	mov	result1, #21
0899c     90 00 90 5D |  if_ne	jmp	#LR__0790
089a0     37 00 00 FF 
089a4     44 E4 05 F1 | 	add	objptr, ##28228
089a8     F2 26 02 FB | 	rdlong	local01, objptr
089ac     01 26 06 F1 | 	add	local01, #1
089b0     F2 26 62 FC | 	wrlong	local01, objptr
089b4     37 00 00 FF 
089b8     44 E4 85 F1 | 	sub	objptr, ##28228
089bc     E8 34 B0 FD | 	call	#_expr
089c0     FD 26 02 F6 | 	mov	local01, result1
089c4                 | ' err=expr() : if err>0 then return err
089c4     01 26 16 F2 | 	cmp	local01, #1 wc
089c8     13 FB 01 36 |  if_ae	mov	result1, local01
089cc     60 00 90 3D |  if_ae	jmp	#LR__0790
089d0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
089d0     37 00 00 FF 
089d4     44 E4 05 F1 | 	add	objptr, ##28228
089d8     F2 26 02 FB | 	rdlong	local01, objptr
089dc     03 26 66 F0 | 	shl	local01, #3
089e0     02 00 00 FF 
089e4     38 E4 85 F1 | 	sub	objptr, ##1080
089e8     F2 26 02 F1 | 	add	local01, objptr
089ec     04 26 06 F1 | 	add	local01, #4
089f0     13 27 02 FB | 	rdlong	local01, local01
089f4     11 26 0E F2 | 	cmp	local01, #17 wz
089f8     35 00 00 FF 
089fc     0C E4 85 F1 | 	sub	objptr, ##27148
08a00     15 FA 05 56 |  if_ne	mov	result1, #21
08a04     28 00 90 5D |  if_ne	jmp	#LR__0790
08a08     37 00 00 FF 
08a0c     44 E4 05 F1 | 	add	objptr, ##28228
08a10     F2 26 02 FB | 	rdlong	local01, objptr
08a14     01 26 06 F1 | 	add	local01, #1
08a18     F2 26 62 FC | 	wrlong	local01, objptr
08a1c     37 00 00 FF 
08a20     44 E4 85 F1 | 	sub	objptr, ##28228
08a24     80 34 B0 FD | 	call	#_expr
08a28                 | ' err=expr() : if err>0 then return err
08a28     01 FA 15 F2 | 	cmp	result1, #1 wc
08a2c                 | ' return 0
08a2c     00 FA 05 C6 |  if_b	mov	result1, #0
08a30                 | LR__0790
08a30     A7 F0 03 F6 | 	mov	ptra, fp
08a34     B2 00 A0 FD | 	call	#popregs_
08a38                 | _compile_fun_4p_ret
08a38     2D 00 64 FD | 	ret
08a3c                 | 
08a3c                 | ' 
08a3c                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
08a3c                 | ' 
08a3c                 | ' function compile_fun_varp() as ulong,ulong 
08a3c                 | _compile_fun_varp
08a3c     03 4A 05 F6 | 	mov	COUNT_, #3
08a40     A8 00 A0 FD | 	call	#pushregs_
08a44     00 26 06 F6 | 	mov	local01, #0
08a48                 | ' 
08a48                 | ' i=0 : err=0
08a48                 | ' if lparts(ct).token<>token_end then
08a48     37 00 00 FF 
08a4c     44 E4 05 F1 | 	add	objptr, ##28228
08a50     F2 28 02 FB | 	rdlong	local02, objptr
08a54     03 28 66 F0 | 	shl	local02, #3
08a58     02 00 00 FF 
08a5c     38 E4 85 F1 | 	sub	objptr, ##1080
08a60     F2 28 02 F1 | 	add	local02, objptr
08a64     04 28 06 F1 | 	add	local02, #4
08a68     14 29 02 FB | 	rdlong	local02, local02
08a6c     FE 29 0E F2 | 	cmp	local02, #510 wz
08a70     35 00 00 FF 
08a74     0C E4 85 F1 | 	sub	objptr, ##27148
08a78     88 00 90 AD |  if_e	jmp	#LR__0801
08a7c                 | '   do
08a7c                 | LR__0800
08a7c     28 34 B0 FD | 	call	#_expr
08a80     01 26 06 F1 | 	add	local01, #1
08a84                 | '     expr()
08a84                 | '     i+=1
08a84                 | '     if lparts(ct).token=token_comma then ct+=1
08a84     37 00 00 FF 
08a88     44 E4 05 F1 | 	add	objptr, ##28228
08a8c     F2 28 02 FB | 	rdlong	local02, objptr
08a90     03 28 66 F0 | 	shl	local02, #3
08a94     02 00 00 FF 
08a98     38 E4 85 F1 | 	sub	objptr, ##1080
08a9c     F2 28 02 F1 | 	add	local02, objptr
08aa0     04 28 06 F1 | 	add	local02, #4
08aa4     14 29 02 FB | 	rdlong	local02, local02
08aa8     11 28 0E F2 | 	cmp	local02, #17 wz
08aac     35 00 00 FF 
08ab0     0C E4 85 F1 | 	sub	objptr, ##27148
08ab4     37 00 00 AF 
08ab8     44 E4 05 A1 |  if_e	add	objptr, ##28228
08abc     F2 2A 02 AB |  if_e	rdlong	local03, objptr
08ac0     01 2A 06 A1 |  if_e	add	local03, #1
08ac4     F2 2A 62 AC |  if_e	wrlong	local03, objptr
08ac8     37 00 00 AF 
08acc     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08ad0                 | '     if lparts(ct).token=token_end then exit loop
08ad0     37 00 00 FF 
08ad4     44 E4 05 F1 | 	add	objptr, ##28228
08ad8     F2 28 02 FB | 	rdlong	local02, objptr
08adc     03 28 66 F0 | 	shl	local02, #3
08ae0     02 00 00 FF 
08ae4     38 E4 85 F1 | 	sub	objptr, ##1080
08ae8     F2 28 02 F1 | 	add	local02, objptr
08aec     04 28 06 F1 | 	add	local02, #4
08af0     14 29 02 FB | 	rdlong	local02, local02
08af4     FE 29 0E F2 | 	cmp	local02, #510 wz
08af8     35 00 00 FF 
08afc     0C E4 85 F1 | 	sub	objptr, ##27148
08b00     78 FF 9F 5D |  if_ne	jmp	#LR__0800
08b04                 | LR__0801
08b04                 | ' return i,err
08b04     13 FB 01 F6 | 	mov	result1, local01
08b08     00 FC 05 F6 | 	mov	result2, #0
08b0c     A7 F0 03 F6 | 	mov	ptra, fp
08b10     B2 00 A0 FD | 	call	#popregs_
08b14                 | _compile_fun_varp_ret
08b14     2D 00 64 FD | 	ret
08b18                 | 
08b18                 | ' 
08b18                 | ' '----  Compile read. The same as compile_input() except printing a prompt
08b18                 | ' 
08b18                 | ' function compile_read() as ulong,ulong 
08b18                 | _compile_read
08b18     04 4A 05 F6 | 	mov	COUNT_, #4
08b1c     A8 00 A0 FD | 	call	#pushregs_
08b20     00 26 06 F6 | 	mov	local01, #0
08b24                 | ' 
08b24                 | ' i=0 : err=0
08b24                 | ' if lparts(ct).token<>token_end then
08b24     37 00 00 FF 
08b28     44 E4 05 F1 | 	add	objptr, ##28228
08b2c     F2 28 02 FB | 	rdlong	local02, objptr
08b30     03 28 66 F0 | 	shl	local02, #3
08b34     02 00 00 FF 
08b38     38 E4 85 F1 | 	sub	objptr, ##1080
08b3c     F2 28 02 F1 | 	add	local02, objptr
08b40     04 28 06 F1 | 	add	local02, #4
08b44     14 29 02 FB | 	rdlong	local02, local02
08b48     FE 29 0E F2 | 	cmp	local02, #510 wz
08b4c     35 00 00 FF 
08b50     0C E4 85 F1 | 	sub	objptr, ##27148
08b54     98 00 90 AD |  if_e	jmp	#LR__0811
08b58                 | '   do
08b58                 | LR__0810
08b58     B8 2F B0 FD | 	call	#_getaddr
08b5c     FD 2A 02 F6 | 	mov	local03, result1
08b60     37 00 00 FF 
08b64     44 E4 05 F1 | 	add	objptr, ##28228
08b68     F2 28 02 FB | 	rdlong	local02, objptr
08b6c     01 28 06 F1 | 	add	local02, #1
08b70     F2 28 62 FC | 	wrlong	local02, objptr
08b74     01 26 06 F1 | 	add	local01, #1
08b78                 | '     err=getaddr() :ct+=1
08b78                 | '     i+=1 
08b78                 | '     if lparts(ct).token=token_comma then ct+=1 
08b78     03 28 66 F0 | 	shl	local02, #3
08b7c     02 00 00 FF 
08b80     38 E4 85 F1 | 	sub	objptr, ##1080
08b84     F2 28 02 F1 | 	add	local02, objptr
08b88     04 28 06 F1 | 	add	local02, #4
08b8c     14 29 02 FB | 	rdlong	local02, local02
08b90     11 28 0E F2 | 	cmp	local02, #17 wz
08b94     35 00 00 FF 
08b98     0C E4 85 F1 | 	sub	objptr, ##27148
08b9c     37 00 00 AF 
08ba0     44 E4 05 A1 |  if_e	add	objptr, ##28228
08ba4     F2 2C 02 AB |  if_e	rdlong	local04, objptr
08ba8     01 2C 06 A1 |  if_e	add	local04, #1
08bac     F2 2C 62 AC |  if_e	wrlong	local04, objptr
08bb0     37 00 00 AF 
08bb4     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08bb8                 | '     if lparts(ct).token=token_end then exit loop
08bb8     37 00 00 FF 
08bbc     44 E4 05 F1 | 	add	objptr, ##28228
08bc0     F2 28 02 FB | 	rdlong	local02, objptr
08bc4     03 28 66 F0 | 	shl	local02, #3
08bc8     02 00 00 FF 
08bcc     38 E4 85 F1 | 	sub	objptr, ##1080
08bd0     F2 28 02 F1 | 	add	local02, objptr
08bd4     04 28 06 F1 | 	add	local02, #4
08bd8     14 29 02 FB | 	rdlong	local02, local02
08bdc     FE 29 0E F2 | 	cmp	local02, #510 wz
08be0     35 00 00 FF 
08be4     0C E4 85 F1 | 	sub	objptr, ##27148
08be8     08 00 90 AD |  if_e	jmp	#LR__0812
08bec     68 FF 9F FD | 	jmp	#LR__0810
08bf0                 | LR__0811
08bf0     36 2A 06 F6 | 	mov	local03, #54
08bf4                 | LR__0812
08bf4                 | ' return i,err
08bf4     13 FB 01 F6 | 	mov	result1, local01
08bf8     15 FD 01 F6 | 	mov	result2, local03
08bfc     A7 F0 03 F6 | 	mov	ptra, fp
08c00     B2 00 A0 FD | 	call	#popregs_
08c04                 | _compile_read_ret
08c04     2D 00 64 FD | 	ret
08c08                 | 
08c08                 | ' 
08c08                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08c08                 | ' 
08c08                 | ' function compile_input() as ulong,ulong 
08c08                 | _compile_input
08c08     0F 4A 05 F6 | 	mov	COUNT_, #15
08c0c     A8 00 A0 FD | 	call	#pushregs_
08c10                 | ' 
08c10                 | ' if lparts(ct).token=token_string then
08c10     37 00 00 FF 
08c14     44 E4 05 F1 | 	add	objptr, ##28228
08c18     F2 16 02 FB | 	rdlong	arg03, objptr
08c1c     03 16 66 F0 | 	shl	arg03, #3
08c20     02 00 00 FF 
08c24     38 E4 85 F1 | 	sub	objptr, ##1080
08c28     F2 16 02 F1 | 	add	arg03, objptr
08c2c     04 16 06 F1 | 	add	arg03, #4
08c30     0B FD 01 FB | 	rdlong	result2, arg03
08c34     01 00 00 FF 
08c38     03 FC 0D F2 | 	cmp	result2, ##515 wz
08c3c     35 00 00 FF 
08c40     0C E4 85 F1 | 	sub	objptr, ##27148
08c44     38 06 90 5D |  if_ne	jmp	#LR__0827
08c48     37 00 00 FF 
08c4c     44 E4 05 F1 | 	add	objptr, ##28228
08c50     F2 14 02 FB | 	rdlong	arg02, objptr
08c54     03 14 66 F0 | 	shl	arg02, #3
08c58     02 00 00 FF 
08c5c     38 E4 85 F1 | 	sub	objptr, ##1080
08c60     F2 14 02 F1 | 	add	arg02, objptr
08c64     0A 13 02 FB | 	rdlong	arg01, arg02
08c68     35 00 00 FF 
08c6c     0C E4 85 F1 | 	sub	objptr, ##27148
08c70     09 2D 02 F6 | 	mov	local04, arg01
08c74     97 06 48 FB | 	callpa	#(@LR__0821-@LR__0820)>>2,fcache_load_ptr_
08c78                 | LR__0820
08c78     16 FB C9 FA | 	rdbyte	result1, local04 wz
08c7c     01 2C 06 51 |  if_ne	add	local04, #1
08c80     F4 FF 9F 5D |  if_ne	jmp	#LR__0820
08c84                 | LR__0821
08c84     09 2D 82 F1 | 	sub	local04, arg01
08c88     16 FB 01 F6 | 	mov	result1, local04
08c8c     52 00 00 FF 
08c90     F0 E4 05 F1 | 	add	objptr, ##42224
08c94     F2 FA 61 FC | 	wrlong	result1, objptr
08c98     58 E4 85 F1 | 	sub	objptr, #88
08c9c     F2 12 02 FB | 	rdlong	arg01, objptr
08ca0     FD 12 82 F1 | 	sub	arg01, result1
08ca4     04 12 86 F1 | 	sub	arg01, #4
08ca8     03 12 26 F5 | 	andn	arg01, #3
08cac     F2 12 62 FC | 	wrlong	arg01, objptr
08cb0     58 E4 05 F1 | 	add	objptr, #88
08cb4     F2 14 02 FB | 	rdlong	arg02, objptr
08cb8     52 00 00 FF 
08cbc     F0 E4 85 F1 | 	sub	objptr, ##42224
08cc0     30 AA B1 FD | 	call	#_pslpoke
08cc4                 | '   pslpoke memtop,l
08cc4                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08cc4     01 2E 06 F6 | 	mov	local05, #1
08cc8     52 00 00 FF 
08ccc     F0 E4 05 F1 | 	add	objptr, ##42224
08cd0     F2 30 02 FB | 	rdlong	local06, objptr
08cd4     52 00 00 FF 
08cd8     F0 E4 85 F1 | 	sub	objptr, ##42224
08cdc     01 30 06 F1 | 	add	local06, #1
08ce0                 | LR__0822
08ce0     18 2F 52 F2 | 	cmps	local05, local06 wc
08ce4     5C 00 90 3D |  if_ae	jmp	#LR__0823
08ce8     52 00 00 FF 
08cec     98 E4 05 F1 | 	add	objptr, ##42136
08cf0     F2 32 02 FB | 	rdlong	local07, objptr
08cf4     03 32 06 F1 | 	add	local07, #3
08cf8     17 33 02 F1 | 	add	local07, local05
08cfc     1B 00 00 FF 
08d00     54 E4 85 F1 | 	sub	objptr, ##13908
08d04     F2 14 02 FB | 	rdlong	arg02, objptr
08d08     03 14 66 F0 | 	shl	arg02, #3
08d0c     02 00 00 FF 
08d10     38 E4 85 F1 | 	sub	objptr, ##1080
08d14     F2 14 02 F1 | 	add	arg02, objptr
08d18     0A 13 02 FB | 	rdlong	arg01, arg02
08d1c     17 15 02 F6 | 	mov	arg02, local05
08d20     01 16 06 F6 | 	mov	arg03, #1
08d24     35 00 00 FF 
08d28     0C E4 85 F1 | 	sub	objptr, ##27148
08d2c     D4 03 B2 FD | 	call	#__system__Mid_S
08d30     FD 14 C2 FA | 	rdbyte	arg02, result1
08d34     19 13 02 F6 | 	mov	arg01, local07
08d38     48 AA B1 FD | 	call	#_pspoke
08d3c     01 2E 06 F1 | 	add	local05, #1
08d40     9C FF 9F FD | 	jmp	#LR__0822
08d44                 | LR__0823
08d44     52 00 00 FF 
08d48     98 E4 05 F1 | 	add	objptr, ##42136
08d4c     F2 26 02 FB | 	rdlong	local01, objptr
08d50     2B 2A 06 F6 | 	mov	local03, #43
08d54     13 35 02 F6 | 	mov	local08, local01
08d58     14 33 02 F6 | 	mov	local07, local02
08d5c     15 37 02 F6 | 	mov	local09, local03
08d60     08 00 00 FF 
08d64     1C E4 85 F1 | 	sub	objptr, ##4124
08d68     F2 30 02 FB | 	rdlong	local06, objptr
08d6c     18 2F 02 F6 | 	mov	local05, local06
08d70     01 2E 66 F0 | 	shl	local05, #1
08d74     18 2F 02 F1 | 	add	local05, local06
08d78     02 2E 66 F0 | 	shl	local05, #2
08d7c     03 00 00 FF 
08d80     00 E4 85 F1 | 	sub	objptr, ##1536
08d84     F2 2E 02 F1 | 	add	local05, objptr
08d88     17 35 62 FC | 	wrlong	local08, local05
08d8c     03 00 00 FF 
08d90     00 E4 05 F1 | 	add	objptr, ##1536
08d94     F2 34 02 FB | 	rdlong	local08, objptr
08d98     1A 31 02 F6 | 	mov	local06, local08
08d9c     01 30 66 F0 | 	shl	local06, #1
08da0     1A 31 02 F1 | 	add	local06, local08
08da4     02 30 66 F0 | 	shl	local06, #2
08da8     03 00 00 FF 
08dac     00 E4 85 F1 | 	sub	objptr, ##1536
08db0     F2 30 02 F1 | 	add	local06, objptr
08db4     04 30 06 F1 | 	add	local06, #4
08db8     18 33 62 FC | 	wrlong	local07, local06
08dbc     03 00 00 FF 
08dc0     00 E4 05 F1 | 	add	objptr, ##1536
08dc4     F2 34 02 FB | 	rdlong	local08, objptr
08dc8     1A 33 02 F6 | 	mov	local07, local08
08dcc     01 32 66 F0 | 	shl	local07, #1
08dd0     1A 33 02 F1 | 	add	local07, local08
08dd4     02 32 66 F0 | 	shl	local07, #2
08dd8     03 00 00 FF 
08ddc     00 E4 85 F1 | 	sub	objptr, ##1536
08de0     F2 32 02 F1 | 	add	local07, objptr
08de4     08 32 06 F1 | 	add	local07, #8
08de8     19 37 62 FC | 	wrlong	local09, local07
08dec     03 00 00 FF 
08df0     00 E4 05 F1 | 	add	objptr, ##1536
08df4     F2 34 02 FB | 	rdlong	local08, objptr
08df8     01 34 06 F1 | 	add	local08, #1
08dfc     F2 34 62 FC | 	wrlong	local08, objptr
08e00     13 00 00 FF 
08e04     38 E4 85 F1 | 	sub	objptr, ##9784
08e08     F2 34 02 FB | 	rdlong	local08, objptr
08e0c     01 34 06 F1 | 	add	local08, #1
08e10     F2 34 62 FC | 	wrlong	local08, objptr
08e14                 | '   t1.result.uresult=memtop
08e14                 | '   t1.result_type=result_string2  
08e14                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08e14                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08e14     03 34 66 F0 | 	shl	local08, #3
08e18     02 00 00 FF 
08e1c     38 E4 85 F1 | 	sub	objptr, ##1080
08e20     F2 34 02 F1 | 	add	local08, objptr
08e24     04 34 06 F1 | 	add	local08, #4
08e28     1A 35 02 FB | 	rdlong	local08, local08
08e2c     11 34 0E F2 | 	cmp	local08, #17 wz
08e30     35 00 00 FF 
08e34     0C E4 85 F1 | 	sub	objptr, ##27148
08e38     60 01 90 5D |  if_ne	jmp	#LR__0824
08e3c     21 2A 06 F6 | 	mov	local03, #33
08e40     13 35 02 F6 | 	mov	local08, local01
08e44     14 33 02 F6 | 	mov	local07, local02
08e48     15 39 02 F6 | 	mov	local10, local03
08e4c     4A 00 00 FF 
08e50     7C E4 05 F1 | 	add	objptr, ##38012
08e54     F2 3A 02 FB | 	rdlong	local11, objptr
08e58     1D 3D 02 F6 | 	mov	local12, local11
08e5c     01 3C 66 F0 | 	shl	local12, #1
08e60     1D 3D 02 F1 | 	add	local12, local11
08e64     02 3C 66 F0 | 	shl	local12, #2
08e68     03 00 00 FF 
08e6c     00 E4 85 F1 | 	sub	objptr, ##1536
08e70     F2 3C 02 F1 | 	add	local12, objptr
08e74     1E 35 62 FC | 	wrlong	local08, local12
08e78     03 00 00 FF 
08e7c     00 E4 05 F1 | 	add	objptr, ##1536
08e80     F2 3E 02 FB | 	rdlong	local13, objptr
08e84     1F 35 02 F6 | 	mov	local08, local13
08e88     01 34 66 F0 | 	shl	local08, #1
08e8c     1F 35 02 F1 | 	add	local08, local13
08e90     02 34 66 F0 | 	shl	local08, #2
08e94     03 00 00 FF 
08e98     00 E4 85 F1 | 	sub	objptr, ##1536
08e9c     F2 34 02 F1 | 	add	local08, objptr
08ea0     04 34 06 F1 | 	add	local08, #4
08ea4     1A 33 62 FC | 	wrlong	local07, local08
08ea8     03 00 00 FF 
08eac     00 E4 05 F1 | 	add	objptr, ##1536
08eb0     F2 34 02 FB | 	rdlong	local08, objptr
08eb4     1A 41 02 F6 | 	mov	local14, local08
08eb8     01 40 66 F0 | 	shl	local14, #1
08ebc     1A 41 02 F1 | 	add	local14, local08
08ec0     02 40 66 F0 | 	shl	local14, #2
08ec4     03 00 00 FF 
08ec8     00 E4 85 F1 | 	sub	objptr, ##1536
08ecc     F2 40 02 F1 | 	add	local14, objptr
08ed0     08 40 06 F1 | 	add	local14, #8
08ed4     20 39 62 FC | 	wrlong	local10, local14
08ed8     03 00 00 FF 
08edc     00 E4 05 F1 | 	add	objptr, ##1536
08ee0     F2 34 02 FB | 	rdlong	local08, objptr
08ee4     01 34 06 F1 | 	add	local08, #1
08ee8     F2 34 62 FC | 	wrlong	local08, objptr
08eec     44 2A 06 F6 | 	mov	local03, #68
08ef0     13 35 02 F6 | 	mov	local08, local01
08ef4     14 33 02 F6 | 	mov	local07, local02
08ef8     15 39 02 F6 | 	mov	local10, local03
08efc     F2 40 02 FB | 	rdlong	local14, objptr
08f00     20 3F 02 F6 | 	mov	local13, local14
08f04     01 3E 66 F0 | 	shl	local13, #1
08f08     20 3F 02 F1 | 	add	local13, local14
08f0c     02 3E 66 F0 | 	shl	local13, #2
08f10     03 00 00 FF 
08f14     00 E4 85 F1 | 	sub	objptr, ##1536
08f18     F2 3E 02 F1 | 	add	local13, objptr
08f1c     1F 35 62 FC | 	wrlong	local08, local13
08f20     03 00 00 FF 
08f24     00 E4 05 F1 | 	add	objptr, ##1536
08f28     F2 40 02 FB | 	rdlong	local14, objptr
08f2c     20 3F 02 F6 | 	mov	local13, local14
08f30     01 3E 66 F0 | 	shl	local13, #1
08f34     20 3F 02 F1 | 	add	local13, local14
08f38     02 3E 66 F0 | 	shl	local13, #2
08f3c     03 00 00 FF 
08f40     00 E4 85 F1 | 	sub	objptr, ##1536
08f44     F2 3E 02 F1 | 	add	local13, objptr
08f48     04 3E 06 F1 | 	add	local13, #4
08f4c     1F 33 62 FC | 	wrlong	local07, local13
08f50     03 00 00 FF 
08f54     00 E4 05 F1 | 	add	objptr, ##1536
08f58     F2 3E 02 FB | 	rdlong	local13, objptr
08f5c     1F 41 02 F6 | 	mov	local14, local13
08f60     01 40 66 F0 | 	shl	local14, #1
08f64     1F 41 02 F1 | 	add	local14, local13
08f68     02 40 66 F0 | 	shl	local14, #2
08f6c     03 00 00 FF 
08f70     00 E4 85 F1 | 	sub	objptr, ##1536
08f74     F2 40 02 F1 | 	add	local14, objptr
08f78     08 40 06 F1 | 	add	local14, #8
08f7c     20 39 62 FC | 	wrlong	local10, local14
08f80     03 00 00 FF 
08f84     00 E4 05 F1 | 	add	objptr, ##1536
08f88     F2 34 02 FB | 	rdlong	local08, objptr
08f8c     01 34 06 F1 | 	add	local08, #1
08f90     F2 34 62 FC | 	wrlong	local08, objptr
08f94     4A 00 00 FF 
08f98     7C E4 85 F1 | 	sub	objptr, ##38012
08f9c                 | LR__0824
08f9c                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08f9c     37 00 00 FF 
08fa0     44 E4 05 F1 | 	add	objptr, ##28228
08fa4     F2 34 02 FB | 	rdlong	local08, objptr
08fa8     03 34 66 F0 | 	shl	local08, #3
08fac     02 00 00 FF 
08fb0     38 E4 85 F1 | 	sub	objptr, ##1080
08fb4     F2 34 02 F1 | 	add	local08, objptr
08fb8     04 34 06 F1 | 	add	local08, #4
08fbc     1A 41 02 FB | 	rdlong	local14, local08
08fc0     12 40 0E F2 | 	cmp	local14, #18 wz
08fc4     35 00 00 FF 
08fc8     0C E4 85 F1 | 	sub	objptr, ##27148
08fcc     60 01 90 5D |  if_ne	jmp	#LR__0825
08fd0     22 2A 06 F6 | 	mov	local03, #34
08fd4     13 35 02 F6 | 	mov	local08, local01
08fd8     14 33 02 F6 | 	mov	local07, local02
08fdc     15 39 02 F6 | 	mov	local10, local03
08fe0     4A 00 00 FF 
08fe4     7C E4 05 F1 | 	add	objptr, ##38012
08fe8     F2 40 02 FB | 	rdlong	local14, objptr
08fec     20 3F 02 F6 | 	mov	local13, local14
08ff0     01 3E 66 F0 | 	shl	local13, #1
08ff4     20 3F 02 F1 | 	add	local13, local14
08ff8     02 3E 66 F0 | 	shl	local13, #2
08ffc     03 00 00 FF 
09000     00 E4 85 F1 | 	sub	objptr, ##1536
09004     F2 3E 02 F1 | 	add	local13, objptr
09008     1F 35 62 FC | 	wrlong	local08, local13
0900c     03 00 00 FF 
09010     00 E4 05 F1 | 	add	objptr, ##1536
09014     F2 40 02 FB | 	rdlong	local14, objptr
09018     20 35 02 F6 | 	mov	local08, local14
0901c     01 34 66 F0 | 	shl	local08, #1
09020     20 35 02 F1 | 	add	local08, local14
09024     02 34 66 F0 | 	shl	local08, #2
09028     03 00 00 FF 
0902c     00 E4 85 F1 | 	sub	objptr, ##1536
09030     F2 34 02 F1 | 	add	local08, objptr
09034     04 34 06 F1 | 	add	local08, #4
09038     1A 33 62 FC | 	wrlong	local07, local08
0903c     03 00 00 FF 
09040     00 E4 05 F1 | 	add	objptr, ##1536
09044     F2 34 02 FB | 	rdlong	local08, objptr
09048     1A 41 02 F6 | 	mov	local14, local08
0904c     01 40 66 F0 | 	shl	local14, #1
09050     1A 41 02 F1 | 	add	local14, local08
09054     02 40 66 F0 | 	shl	local14, #2
09058     03 00 00 FF 
0905c     00 E4 85 F1 | 	sub	objptr, ##1536
09060     F2 40 02 F1 | 	add	local14, objptr
09064     08 40 06 F1 | 	add	local14, #8
09068     20 39 62 FC | 	wrlong	local10, local14
0906c     03 00 00 FF 
09070     00 E4 05 F1 | 	add	objptr, ##1536
09074     F2 34 02 FB | 	rdlong	local08, objptr
09078     01 34 06 F1 | 	add	local08, #1
0907c     F2 34 62 FC | 	wrlong	local08, objptr
09080     44 2A 06 F6 | 	mov	local03, #68
09084     13 35 02 F6 | 	mov	local08, local01
09088     14 33 02 F6 | 	mov	local07, local02
0908c     15 39 02 F6 | 	mov	local10, local03
09090     F2 40 02 FB | 	rdlong	local14, objptr
09094     20 3F 02 F6 | 	mov	local13, local14
09098     01 3E 66 F0 | 	shl	local13, #1
0909c     20 3F 02 F1 | 	add	local13, local14
090a0     02 3E 66 F0 | 	shl	local13, #2
090a4     03 00 00 FF 
090a8     00 E4 85 F1 | 	sub	objptr, ##1536
090ac     F2 3E 02 F1 | 	add	local13, objptr
090b0     1F 35 62 FC | 	wrlong	local08, local13
090b4     03 00 00 FF 
090b8     00 E4 05 F1 | 	add	objptr, ##1536
090bc     F2 40 02 FB | 	rdlong	local14, objptr
090c0     20 3F 02 F6 | 	mov	local13, local14
090c4     01 3E 66 F0 | 	shl	local13, #1
090c8     20 3F 02 F1 | 	add	local13, local14
090cc     02 3E 66 F0 | 	shl	local13, #2
090d0     03 00 00 FF 
090d4     00 E4 85 F1 | 	sub	objptr, ##1536
090d8     F2 3E 02 F1 | 	add	local13, objptr
090dc     04 3E 06 F1 | 	add	local13, #4
090e0     1F 33 62 FC | 	wrlong	local07, local13
090e4     03 00 00 FF 
090e8     00 E4 05 F1 | 	add	objptr, ##1536
090ec     F2 3E 02 FB | 	rdlong	local13, objptr
090f0     1F 41 02 F6 | 	mov	local14, local13
090f4     01 40 66 F0 | 	shl	local14, #1
090f8     1F 41 02 F1 | 	add	local14, local13
090fc     02 40 66 F0 | 	shl	local14, #2
09100     03 00 00 FF 
09104     00 E4 85 F1 | 	sub	objptr, ##1536
09108     F2 40 02 F1 | 	add	local14, objptr
0910c     08 40 06 F1 | 	add	local14, #8
09110     20 39 62 FC | 	wrlong	local10, local14
09114     03 00 00 FF 
09118     00 E4 05 F1 | 	add	objptr, ##1536
0911c     F2 34 02 FB | 	rdlong	local08, objptr
09120     01 34 06 F1 | 	add	local08, #1
09124     F2 34 62 FC | 	wrlong	local08, objptr
09128     4A 00 00 FF 
0912c     7C E4 85 F1 | 	sub	objptr, ##38012
09130                 | LR__0825
09130                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
09130     37 00 00 FF 
09134     44 E4 05 F1 | 	add	objptr, ##28228
09138     F2 34 02 FB | 	rdlong	local08, objptr
0913c     03 34 66 F0 | 	shl	local08, #3
09140     02 00 00 FF 
09144     38 E4 85 F1 | 	sub	objptr, ##1080
09148     F2 34 02 F1 | 	add	local08, objptr
0914c     04 34 06 F1 | 	add	local08, #4
09150     1A 41 02 FB | 	rdlong	local14, local08
09154     12 40 0E F2 | 	cmp	local14, #18 wz
09158     35 00 00 FF 
0915c     0C E4 85 F1 | 	sub	objptr, ##27148
09160     00 01 90 AD |  if_e	jmp	#LR__0826
09164     37 00 00 FF 
09168     44 E4 05 F1 | 	add	objptr, ##28228
0916c     F2 34 02 FB | 	rdlong	local08, objptr
09170     03 34 66 F0 | 	shl	local08, #3
09174     02 00 00 FF 
09178     38 E4 85 F1 | 	sub	objptr, ##1080
0917c     F2 34 02 F1 | 	add	local08, objptr
09180     04 34 06 F1 | 	add	local08, #4
09184     1A 41 02 FB | 	rdlong	local14, local08
09188     11 40 0E F2 | 	cmp	local14, #17 wz
0918c     35 00 00 FF 
09190     0C E4 85 F1 | 	sub	objptr, ##27148
09194     CC 00 90 AD |  if_e	jmp	#LR__0826
09198     44 2A 06 F6 | 	mov	local03, #68
0919c     13 35 02 F6 | 	mov	local08, local01
091a0     14 33 02 F6 | 	mov	local07, local02
091a4     15 39 02 F6 | 	mov	local10, local03
091a8     4A 00 00 FF 
091ac     7C E4 05 F1 | 	add	objptr, ##38012
091b0     F2 40 02 FB | 	rdlong	local14, objptr
091b4     20 3F 02 F6 | 	mov	local13, local14
091b8     01 3E 66 F0 | 	shl	local13, #1
091bc     20 3F 02 F1 | 	add	local13, local14
091c0     02 3E 66 F0 | 	shl	local13, #2
091c4     03 00 00 FF 
091c8     00 E4 85 F1 | 	sub	objptr, ##1536
091cc     F2 3E 02 F1 | 	add	local13, objptr
091d0     1F 35 62 FC | 	wrlong	local08, local13
091d4     03 00 00 FF 
091d8     00 E4 05 F1 | 	add	objptr, ##1536
091dc     F2 40 02 FB | 	rdlong	local14, objptr
091e0     20 3F 02 F6 | 	mov	local13, local14
091e4     01 3E 66 F0 | 	shl	local13, #1
091e8     20 3F 02 F1 | 	add	local13, local14
091ec     02 3E 66 F0 | 	shl	local13, #2
091f0     03 00 00 FF 
091f4     00 E4 85 F1 | 	sub	objptr, ##1536
091f8     F2 3E 02 F1 | 	add	local13, objptr
091fc     04 3E 06 F1 | 	add	local13, #4
09200     1F 33 62 FC | 	wrlong	local07, local13
09204     03 00 00 FF 
09208     00 E4 05 F1 | 	add	objptr, ##1536
0920c     F2 3E 02 FB | 	rdlong	local13, objptr
09210     1F 41 02 F6 | 	mov	local14, local13
09214     01 40 66 F0 | 	shl	local14, #1
09218     1F 41 02 F1 | 	add	local14, local13
0921c     02 40 66 F0 | 	shl	local14, #2
09220     03 00 00 FF 
09224     00 E4 85 F1 | 	sub	objptr, ##1536
09228     F2 40 02 F1 | 	add	local14, objptr
0922c     08 40 06 F1 | 	add	local14, #8
09230     20 39 62 FC | 	wrlong	local10, local14
09234     03 00 00 FF 
09238     00 E4 05 F1 | 	add	objptr, ##1536
0923c     F2 34 02 FB | 	rdlong	local08, objptr
09240     01 34 06 F1 | 	add	local08, #1
09244     F2 34 62 FC | 	wrlong	local08, objptr
09248     13 00 00 FF 
0924c     38 E4 85 F1 | 	sub	objptr, ##9784
09250     F2 34 02 FB | 	rdlong	local08, objptr
09254     01 34 86 F1 | 	sub	local08, #1
09258     F2 34 62 FC | 	wrlong	local08, objptr
0925c     37 00 00 FF 
09260     44 E4 85 F1 | 	sub	objptr, ##28228
09264                 | LR__0826
09264     37 00 00 FF 
09268     44 E4 05 F1 | 	add	objptr, ##28228
0926c     F2 34 02 FB | 	rdlong	local08, objptr
09270     01 34 06 F1 | 	add	local08, #1
09274     F2 34 62 FC | 	wrlong	local08, objptr
09278     37 00 00 FF 
0927c     44 E4 85 F1 | 	sub	objptr, ##28228
09280                 | LR__0827
09280     00 2E 06 F6 | 	mov	local05, #0
09284                 | ' i=0 : err=0
09284                 | ' if lparts(ct).token<>token_end then
09284     37 00 00 FF 
09288     44 E4 05 F1 | 	add	objptr, ##28228
0928c     F2 40 02 FB | 	rdlong	local14, objptr
09290     03 40 66 F0 | 	shl	local14, #3
09294     02 00 00 FF 
09298     38 E4 85 F1 | 	sub	objptr, ##1080
0929c     F2 40 02 F1 | 	add	local14, objptr
092a0     04 40 06 F1 | 	add	local14, #4
092a4     20 41 02 FB | 	rdlong	local14, local14
092a8     FE 41 0E F2 | 	cmp	local14, #510 wz
092ac     35 00 00 FF 
092b0     0C E4 85 F1 | 	sub	objptr, ##27148
092b4     98 00 90 AD |  if_e	jmp	#LR__0829
092b8                 | '   do
092b8                 | LR__0828
092b8     58 28 B0 FD | 	call	#_getaddr
092bc     FD 42 02 F6 | 	mov	local15, result1
092c0     37 00 00 FF 
092c4     44 E4 05 F1 | 	add	objptr, ##28228
092c8     F2 40 02 FB | 	rdlong	local14, objptr
092cc     01 40 06 F1 | 	add	local14, #1
092d0     F2 40 62 FC | 	wrlong	local14, objptr
092d4     01 2E 06 F1 | 	add	local05, #1
092d8                 | '     err=getaddr() :ct+=1
092d8                 | '     i+=1 
092d8                 | '     if lparts(ct).token=token_comma then ct+=1 
092d8     03 40 66 F0 | 	shl	local14, #3
092dc     02 00 00 FF 
092e0     38 E4 85 F1 | 	sub	objptr, ##1080
092e4     F2 40 02 F1 | 	add	local14, objptr
092e8     04 40 06 F1 | 	add	local14, #4
092ec     20 41 02 FB | 	rdlong	local14, local14
092f0     11 40 0E F2 | 	cmp	local14, #17 wz
092f4     35 00 00 FF 
092f8     0C E4 85 F1 | 	sub	objptr, ##27148
092fc     37 00 00 AF 
09300     44 E4 05 A1 |  if_e	add	objptr, ##28228
09304     F2 34 02 AB |  if_e	rdlong	local08, objptr
09308     01 34 06 A1 |  if_e	add	local08, #1
0930c     F2 34 62 AC |  if_e	wrlong	local08, objptr
09310     37 00 00 AF 
09314     44 E4 85 A1 |  if_e	sub	objptr, ##28228
09318                 | '     if lparts(ct).token=token_end then exit loop
09318     37 00 00 FF 
0931c     44 E4 05 F1 | 	add	objptr, ##28228
09320     F2 40 02 FB | 	rdlong	local14, objptr
09324     03 40 66 F0 | 	shl	local14, #3
09328     02 00 00 FF 
0932c     38 E4 85 F1 | 	sub	objptr, ##1080
09330     F2 40 02 F1 | 	add	local14, objptr
09334     04 40 06 F1 | 	add	local14, #4
09338     20 41 02 FB | 	rdlong	local14, local14
0933c     FE 41 0E F2 | 	cmp	local14, #510 wz
09340     35 00 00 FF 
09344     0C E4 85 F1 | 	sub	objptr, ##27148
09348     08 00 90 AD |  if_e	jmp	#LR__0830
0934c     68 FF 9F FD | 	jmp	#LR__0828
09350                 | LR__0829
09350     36 42 06 F6 | 	mov	local15, #54
09354                 | LR__0830
09354                 | ' return i,err
09354     17 FB 01 F6 | 	mov	result1, local05
09358     21 FD 01 F6 | 	mov	result2, local15
0935c     A7 F0 03 F6 | 	mov	ptra, fp
09360     B2 00 A0 FD | 	call	#popregs_
09364                 | _compile_input_ret
09364     2D 00 64 FD | 	ret
09368                 | 
09368                 | ' 
09368                 | ' '----- compile assign to an array element
09368                 | ' 
09368                 | ' function compile_array_assign() as ulong 
09368                 | _compile_array_assign
09368     0B 4A 05 F6 | 	mov	COUNT_, #11
0936c     A8 00 A0 FD | 	call	#pushregs_
09370     00 2C 06 F6 | 	mov	local04, #0
09374     00 2E 06 F6 | 	mov	local05, #0
09378     37 00 00 FF 
0937c     44 E4 05 F1 | 	add	objptr, ##28228
09380     F2 30 02 FB | 	rdlong	local06, objptr
09384     18 FB 01 F6 | 	mov	result1, local06
09388     01 FA 85 F1 | 	sub	result1, #1
0938c     03 FA 65 F0 | 	shl	result1, #3
09390     02 00 00 FF 
09394     38 E4 85 F1 | 	sub	objptr, ##1080
09398     F2 FA 01 F1 | 	add	result1, objptr
0939c     FD 32 02 FB | 	rdlong	local07, result1
093a0                 | ' numpar=0 : err=0
093a0                 | ' varname$=lparts(ct-1).part$
093a0                 | ' if lparts(ct).token=token_lpar then
093a0     03 30 66 F0 | 	shl	local06, #3
093a4     F2 30 02 F1 | 	add	local06, objptr
093a8     04 30 06 F1 | 	add	local06, #4
093ac     18 31 02 FB | 	rdlong	local06, local06
093b0     15 30 0E F2 | 	cmp	local06, #21 wz
093b4     35 00 00 FF 
093b8     0C E4 85 F1 | 	sub	objptr, ##27148
093bc     F4 01 90 5D |  if_ne	jmp	#LR__0844
093c0     37 00 00 FF 
093c4     44 E4 05 F1 | 	add	objptr, ##28228
093c8     F2 34 02 FB | 	rdlong	local08, objptr
093cc     01 34 06 F1 | 	add	local08, #1
093d0     F2 34 62 FC | 	wrlong	local08, objptr
093d4     37 00 00 FF 
093d8     44 E4 85 F1 | 	sub	objptr, ##28228
093dc                 | '   ct+=1 											' omit this lpar, this is for expr list
093dc                 | '   do
093dc                 | LR__0840
093dc     C8 2A B0 FD | 	call	#_expr
093e0     37 00 00 FF 
093e4     44 E4 05 F1 | 	add	objptr, ##28228
093e8     F2 30 02 FB | 	rdlong	local06, objptr
093ec     01 30 06 F1 | 	add	local06, #1
093f0     F2 30 62 FC | 	wrlong	local06, objptr
093f4     01 2C 06 F1 | 	add	local04, #1
093f8     01 30 86 F1 | 	sub	local06, #1
093fc     03 30 66 F0 | 	shl	local06, #3
09400     02 00 00 FF 
09404     38 E4 85 F1 | 	sub	objptr, ##1080
09408     F2 30 02 F1 | 	add	local06, objptr
0940c     04 30 06 F1 | 	add	local06, #4
09410     18 35 02 FB | 	rdlong	local08, local06
09414     14 34 0E F2 | 	cmp	local08, #20 wz
09418     35 00 00 FF 
0941c     0C E4 85 F1 | 	sub	objptr, ##27148
09420     34 00 90 AD |  if_e	jmp	#LR__0841
09424     37 00 00 FF 
09428     44 E4 05 F1 | 	add	objptr, ##28228
0942c     F2 34 02 FB | 	rdlong	local08, objptr
09430     03 34 66 F0 | 	shl	local08, #3
09434     02 00 00 FF 
09438     38 E4 85 F1 | 	sub	objptr, ##1080
0943c     F2 34 02 F1 | 	add	local08, objptr
09440     04 34 06 F1 | 	add	local08, #4
09444     1A 35 02 FB | 	rdlong	local08, local08
09448     FE 35 0E F2 | 	cmp	local08, #510 wz
0944c     35 00 00 FF 
09450     0C E4 85 F1 | 	sub	objptr, ##27148
09454     84 FF 9F 5D |  if_ne	jmp	#LR__0840
09458                 | LR__0841
09458     37 00 00 FF 
0945c     44 E4 05 F1 | 	add	objptr, ##28228
09460     F2 34 02 FB | 	rdlong	local08, objptr
09464     01 34 06 F1 | 	add	local08, #1
09468     F2 34 62 FC | 	wrlong	local08, objptr
0946c     37 00 00 FF 
09470     44 E4 85 F1 | 	sub	objptr, ##28228
09474     30 2A B0 FD | 	call	#_expr
09478     01 36 66 F6 | 	neg	local09, #1
0947c     00 38 06 F6 | 	mov	local10, #0
09480                 | '   ct+=1 : expr()
09480                 | '   j=-1 : i=0 
09480                 | '   do 
09480                 | LR__0842
09480                 | '     if variables(i).name=varname$ then j=i: exit loop
09480     1C 31 02 F6 | 	mov	local06, local10
09484     04 30 66 F0 | 	shl	local06, #4
09488     14 00 00 FF 
0948c     F8 E5 05 F1 | 	add	objptr, ##10744
09490     F2 30 02 F1 | 	add	local06, objptr
09494     18 13 02 FB | 	rdlong	arg01, local06
09498     19 15 02 F6 | 	mov	arg02, local07
0949c     14 00 00 FF 
094a0     F8 E5 85 F1 | 	sub	objptr, ##10744
094a4     F0 DA B1 FD | 	call	#__system___string_cmp
094a8     00 FA 0D F2 | 	cmp	result1, #0 wz
094ac     1C 37 02 A6 |  if_e	mov	local09, local10
094b0     20 00 90 AD |  if_e	jmp	#LR__0843
094b4     01 38 06 F1 | 	add	local10, #1
094b8     35 00 00 FF 
094bc     08 E4 05 F1 | 	add	objptr, ##27144
094c0     F2 34 02 FB | 	rdlong	local08, objptr
094c4     35 00 00 FF 
094c8     08 E4 85 F1 | 	sub	objptr, ##27144
094cc     1A 39 5A F2 | 	cmps	local10, local08 wcz
094d0     AC FF 9F ED |  if_be	jmp	#LR__0842
094d4                 | LR__0843
094d4     1B 27 02 F6 | 	mov	local01, local09
094d8     16 29 02 F6 | 	mov	local02, local04
094dc     17 2A 06 F6 | 	mov	local03, #23
094e0     13 35 02 F6 | 	mov	local08, local01
094e4     14 3B 02 F6 | 	mov	local11, local02
094e8     15 33 02 F6 | 	mov	local07, local03
094ec     4A 00 00 FF 
094f0     7C E4 05 F1 | 	add	objptr, ##38012
094f4     F2 26 02 FB | 	rdlong	local01, objptr
094f8     13 37 02 F6 | 	mov	local09, local01
094fc     01 36 66 F0 | 	shl	local09, #1
09500     13 37 02 F1 | 	add	local09, local01
09504     02 36 66 F0 | 	shl	local09, #2
09508     03 00 00 FF 
0950c     00 E4 85 F1 | 	sub	objptr, ##1536
09510     F2 36 02 F1 | 	add	local09, objptr
09514     1B 35 62 FC | 	wrlong	local08, local09
09518     03 00 00 FF 
0951c     00 E4 05 F1 | 	add	objptr, ##1536
09520     F2 26 02 FB | 	rdlong	local01, objptr
09524     13 37 02 F6 | 	mov	local09, local01
09528     01 36 66 F0 | 	shl	local09, #1
0952c     13 37 02 F1 | 	add	local09, local01
09530     02 36 66 F0 | 	shl	local09, #2
09534     03 00 00 FF 
09538     00 E4 85 F1 | 	sub	objptr, ##1536
0953c     F2 36 02 F1 | 	add	local09, objptr
09540     04 36 06 F1 | 	add	local09, #4
09544     1B 3B 62 FC | 	wrlong	local11, local09
09548     03 00 00 FF 
0954c     00 E4 05 F1 | 	add	objptr, ##1536
09550     F2 3A 02 FB | 	rdlong	local11, objptr
09554     1D 27 02 F6 | 	mov	local01, local11
09558     01 26 66 F0 | 	shl	local01, #1
0955c     1D 27 02 F1 | 	add	local01, local11
09560     02 26 66 F0 | 	shl	local01, #2
09564     03 00 00 FF 
09568     00 E4 85 F1 | 	sub	objptr, ##1536
0956c     F2 26 02 F1 | 	add	local01, objptr
09570     08 26 06 F1 | 	add	local01, #8
09574     13 33 62 FC | 	wrlong	local07, local01
09578     03 00 00 FF 
0957c     00 E4 05 F1 | 	add	objptr, ##1536
09580     F2 34 02 FB | 	rdlong	local08, objptr
09584     01 34 06 F1 | 	add	local08, #1
09588     F2 34 62 FC | 	wrlong	local08, objptr
0958c                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
0958c                 | '   if numpar>3 then err=45
0958c     04 2C 16 F2 | 	cmp	local04, #4 wc
09590     2D 2E 06 36 |  if_ae	mov	local05, #45
09594                 | '   if i>varnum then err=20
09594     15 00 00 FF 
09598     74 E4 85 F1 | 	sub	objptr, ##10868
0959c     F2 34 02 FB | 	rdlong	local08, objptr
095a0     35 00 00 FF 
095a4     08 E4 85 F1 | 	sub	objptr, ##27144
095a8     1A 39 5A F2 | 	cmps	local10, local08 wcz
095ac     14 2E 06 16 |  if_a	mov	local05, #20
095b0     04 00 90 FD | 	jmp	#LR__0845
095b4                 | LR__0844
095b4     0E 2E 06 F6 | 	mov	local05, #14
095b8                 | LR__0845
095b8                 | ' return err
095b8     17 FB 01 F6 | 	mov	result1, local05
095bc     A7 F0 03 F6 | 	mov	ptra, fp
095c0     B2 00 A0 FD | 	call	#popregs_
095c4                 | _compile_array_assign_ret
095c4     2D 00 64 FD | 	ret
095c8                 | 
095c8                 | ' 
095c8                 | ' '----- compile print command with its ";" and "," modifiers
095c8                 | ' 
095c8                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
095c8                 | _compile_print
095c8     0B 4A 05 F6 | 	mov	COUNT_, #11
095cc     A8 00 A0 FD | 	call	#pushregs_
095d0     00 26 06 F6 | 	mov	local01, #0
095d4     1D 2A 06 F6 | 	mov	local03, #29
095d8                 | ' t1.result.uresult=0 : t1.result_type=result_uint
095d8                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
095d8     37 00 00 FF 
095dc     44 E4 05 F1 | 	add	objptr, ##28228
095e0     F2 2C 02 FB | 	rdlong	local04, objptr
095e4     03 2C 66 F0 | 	shl	local04, #3
095e8     02 00 00 FF 
095ec     38 E4 85 F1 | 	sub	objptr, ##1080
095f0     F2 2C 02 F1 | 	add	local04, objptr
095f4     04 2C 06 F1 | 	add	local04, #4
095f8     16 2D 02 FB | 	rdlong	local04, local04
095fc     FE 2D 0E F2 | 	cmp	local04, #510 wz
09600     35 00 00 FF 
09604     0C E4 85 F1 | 	sub	objptr, ##27148
09608     68 01 90 5D |  if_ne	jmp	#LR__0850
0960c     20 2A 06 F6 | 	mov	local03, #32
09610     13 2F 02 F6 | 	mov	local05, local01
09614     14 31 02 F6 | 	mov	local06, local02
09618     15 33 02 F6 | 	mov	local07, local03
0961c     4A 00 00 FF 
09620     7C E4 05 F1 | 	add	objptr, ##38012
09624     F2 34 02 FB | 	rdlong	local08, objptr
09628     1A 37 02 F6 | 	mov	local09, local08
0962c     01 36 66 F0 | 	shl	local09, #1
09630     1A 37 02 F1 | 	add	local09, local08
09634     02 36 66 F0 | 	shl	local09, #2
09638     03 00 00 FF 
0963c     00 E4 85 F1 | 	sub	objptr, ##1536
09640     F2 36 02 F1 | 	add	local09, objptr
09644     1B 2F 62 FC | 	wrlong	local05, local09
09648     03 00 00 FF 
0964c     00 E4 05 F1 | 	add	objptr, ##1536
09650     F2 2E 02 FB | 	rdlong	local05, objptr
09654     17 39 02 F6 | 	mov	local10, local05
09658     01 38 66 F0 | 	shl	local10, #1
0965c     17 39 02 F1 | 	add	local10, local05
09660     02 38 66 F0 | 	shl	local10, #2
09664     03 00 00 FF 
09668     00 E4 85 F1 | 	sub	objptr, ##1536
0966c     F2 38 02 F1 | 	add	local10, objptr
09670     04 38 06 F1 | 	add	local10, #4
09674     1C 31 62 FC | 	wrlong	local06, local10
09678     03 00 00 FF 
0967c     00 E4 05 F1 | 	add	objptr, ##1536
09680     F2 2E 02 FB | 	rdlong	local05, objptr
09684     17 3B 02 F6 | 	mov	local11, local05
09688     01 3A 66 F0 | 	shl	local11, #1
0968c     17 3B 02 F1 | 	add	local11, local05
09690     02 3A 66 F0 | 	shl	local11, #2
09694     03 00 00 FF 
09698     00 E4 85 F1 | 	sub	objptr, ##1536
0969c     F2 3A 02 F1 | 	add	local11, objptr
096a0     08 3A 06 F1 | 	add	local11, #8
096a4     1D 33 62 FC | 	wrlong	local07, local11
096a8     03 00 00 FF 
096ac     00 E4 05 F1 | 	add	objptr, ##1536
096b0     F2 2E 02 FB | 	rdlong	local05, objptr
096b4     01 2E 06 F1 | 	add	local05, #1
096b8     F2 2E 62 FC | 	wrlong	local05, objptr
096bc     44 2A 06 F6 | 	mov	local03, #68
096c0     13 2F 02 F6 | 	mov	local05, local01
096c4     14 31 02 F6 | 	mov	local06, local02
096c8     15 33 02 F6 | 	mov	local07, local03
096cc     F2 34 02 FB | 	rdlong	local08, objptr
096d0     1A 37 02 F6 | 	mov	local09, local08
096d4     01 36 66 F0 | 	shl	local09, #1
096d8     1A 37 02 F1 | 	add	local09, local08
096dc     02 36 66 F0 | 	shl	local09, #2
096e0     03 00 00 FF 
096e4     00 E4 85 F1 | 	sub	objptr, ##1536
096e8     F2 36 02 F1 | 	add	local09, objptr
096ec     1B 2F 62 FC | 	wrlong	local05, local09
096f0     03 00 00 FF 
096f4     00 E4 05 F1 | 	add	objptr, ##1536
096f8     F2 3A 02 FB | 	rdlong	local11, objptr
096fc     1D 39 02 F6 | 	mov	local10, local11
09700     01 38 66 F0 | 	shl	local10, #1
09704     1D 39 02 F1 | 	add	local10, local11
09708     02 38 66 F0 | 	shl	local10, #2
0970c     03 00 00 FF 
09710     00 E4 85 F1 | 	sub	objptr, ##1536
09714     F2 38 02 F1 | 	add	local10, objptr
09718     04 38 06 F1 | 	add	local10, #4
0971c     1C 31 62 FC | 	wrlong	local06, local10
09720     03 00 00 FF 
09724     00 E4 05 F1 | 	add	objptr, ##1536
09728     F2 38 02 FB | 	rdlong	local10, objptr
0972c     1C 3B 02 F6 | 	mov	local11, local10
09730     01 3A 66 F0 | 	shl	local11, #1
09734     1C 3B 02 F1 | 	add	local11, local10
09738     02 3A 66 F0 | 	shl	local11, #2
0973c     03 00 00 FF 
09740     00 E4 85 F1 | 	sub	objptr, ##1536
09744     F2 3A 02 F1 | 	add	local11, objptr
09748     08 3A 06 F1 | 	add	local11, #8
0974c     1D 33 62 FC | 	wrlong	local07, local11
09750     03 00 00 FF 
09754     00 E4 05 F1 | 	add	objptr, ##1536
09758     F2 2E 02 FB | 	rdlong	local05, objptr
0975c     01 2E 06 F1 | 	add	local05, #1
09760     F2 2E 62 FC | 	wrlong	local05, objptr
09764     4A 00 00 FF 
09768     7C E4 85 F1 | 	sub	objptr, ##38012
0976c     00 FA 05 F6 | 	mov	result1, #0
09770     20 05 90 FD | 	jmp	#LR__0857
09774                 | LR__0850
09774                 | ' do
09774                 | LR__0851
09774     30 27 B0 FD | 	call	#_expr
09778                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
09778                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09778     37 00 00 FF 
0977c     44 E4 05 F1 | 	add	objptr, ##28228
09780     F2 2C 02 FB | 	rdlong	local04, objptr
09784     03 2C 66 F0 | 	shl	local04, #3
09788     02 00 00 FF 
0978c     38 E4 85 F1 | 	sub	objptr, ##1080
09790     F2 2C 02 F1 | 	add	local04, objptr
09794     04 2C 06 F1 | 	add	local04, #4
09798     16 35 02 FB | 	rdlong	local08, local04
0979c     11 34 0E F2 | 	cmp	local08, #17 wz
097a0     35 00 00 FF 
097a4     0C E4 85 F1 | 	sub	objptr, ##27148
097a8     60 01 90 5D |  if_ne	jmp	#LR__0852
097ac     21 2A 06 F6 | 	mov	local03, #33
097b0     13 2F 02 F6 | 	mov	local05, local01
097b4     14 31 02 F6 | 	mov	local06, local02
097b8     15 33 02 F6 | 	mov	local07, local03
097bc     4A 00 00 FF 
097c0     7C E4 05 F1 | 	add	objptr, ##38012
097c4     F2 34 02 FB | 	rdlong	local08, objptr
097c8     1A 37 02 F6 | 	mov	local09, local08
097cc     01 36 66 F0 | 	shl	local09, #1
097d0     1A 37 02 F1 | 	add	local09, local08
097d4     02 36 66 F0 | 	shl	local09, #2
097d8     03 00 00 FF 
097dc     00 E4 85 F1 | 	sub	objptr, ##1536
097e0     F2 36 02 F1 | 	add	local09, objptr
097e4     1B 2F 62 FC | 	wrlong	local05, local09
097e8     03 00 00 FF 
097ec     00 E4 05 F1 | 	add	objptr, ##1536
097f0     F2 3A 02 FB | 	rdlong	local11, objptr
097f4     1D 39 02 F6 | 	mov	local10, local11
097f8     01 38 66 F0 | 	shl	local10, #1
097fc     1D 39 02 F1 | 	add	local10, local11
09800     02 38 66 F0 | 	shl	local10, #2
09804     03 00 00 FF 
09808     00 E4 85 F1 | 	sub	objptr, ##1536
0980c     F2 38 02 F1 | 	add	local10, objptr
09810     04 38 06 F1 | 	add	local10, #4
09814     1C 31 62 FC | 	wrlong	local06, local10
09818     03 00 00 FF 
0981c     00 E4 05 F1 | 	add	objptr, ##1536
09820     F2 2E 02 FB | 	rdlong	local05, objptr
09824     17 3B 02 F6 | 	mov	local11, local05
09828     01 3A 66 F0 | 	shl	local11, #1
0982c     17 3B 02 F1 | 	add	local11, local05
09830     02 3A 66 F0 | 	shl	local11, #2
09834     03 00 00 FF 
09838     00 E4 85 F1 | 	sub	objptr, ##1536
0983c     F2 3A 02 F1 | 	add	local11, objptr
09840     08 3A 06 F1 | 	add	local11, #8
09844     1D 33 62 FC | 	wrlong	local07, local11
09848     03 00 00 FF 
0984c     00 E4 05 F1 | 	add	objptr, ##1536
09850     F2 2E 02 FB | 	rdlong	local05, objptr
09854     01 2E 06 F1 | 	add	local05, #1
09858     F2 2E 62 FC | 	wrlong	local05, objptr
0985c     44 2A 06 F6 | 	mov	local03, #68
09860     13 2F 02 F6 | 	mov	local05, local01
09864     14 31 02 F6 | 	mov	local06, local02
09868     15 33 02 F6 | 	mov	local07, local03
0986c     F2 34 02 FB | 	rdlong	local08, objptr
09870     1A 37 02 F6 | 	mov	local09, local08
09874     01 36 66 F0 | 	shl	local09, #1
09878     1A 37 02 F1 | 	add	local09, local08
0987c     02 36 66 F0 | 	shl	local09, #2
09880     03 00 00 FF 
09884     00 E4 85 F1 | 	sub	objptr, ##1536
09888     F2 36 02 F1 | 	add	local09, objptr
0988c     1B 2F 62 FC | 	wrlong	local05, local09
09890     03 00 00 FF 
09894     00 E4 05 F1 | 	add	objptr, ##1536
09898     F2 3A 02 FB | 	rdlong	local11, objptr
0989c     1D 39 02 F6 | 	mov	local10, local11
098a0     01 38 66 F0 | 	shl	local10, #1
098a4     1D 39 02 F1 | 	add	local10, local11
098a8     02 38 66 F0 | 	shl	local10, #2
098ac     03 00 00 FF 
098b0     00 E4 85 F1 | 	sub	objptr, ##1536
098b4     F2 38 02 F1 | 	add	local10, objptr
098b8     04 38 06 F1 | 	add	local10, #4
098bc     1C 31 62 FC | 	wrlong	local06, local10
098c0     03 00 00 FF 
098c4     00 E4 05 F1 | 	add	objptr, ##1536
098c8     F2 38 02 FB | 	rdlong	local10, objptr
098cc     1C 3B 02 F6 | 	mov	local11, local10
098d0     01 3A 66 F0 | 	shl	local11, #1
098d4     1C 3B 02 F1 | 	add	local11, local10
098d8     02 3A 66 F0 | 	shl	local11, #2
098dc     03 00 00 FF 
098e0     00 E4 85 F1 | 	sub	objptr, ##1536
098e4     F2 3A 02 F1 | 	add	local11, objptr
098e8     08 3A 06 F1 | 	add	local11, #8
098ec     1D 33 62 FC | 	wrlong	local07, local11
098f0     03 00 00 FF 
098f4     00 E4 05 F1 | 	add	objptr, ##1536
098f8     F2 2E 02 FB | 	rdlong	local05, objptr
098fc     01 2E 06 F1 | 	add	local05, #1
09900     F2 2E 62 FC | 	wrlong	local05, objptr
09904     4A 00 00 FF 
09908     7C E4 85 F1 | 	sub	objptr, ##38012
0990c                 | LR__0852
0990c                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0990c     37 00 00 FF 
09910     44 E4 05 F1 | 	add	objptr, ##28228
09914     F2 2C 02 FB | 	rdlong	local04, objptr
09918     03 2C 66 F0 | 	shl	local04, #3
0991c     02 00 00 FF 
09920     38 E4 85 F1 | 	sub	objptr, ##1080
09924     F2 2C 02 F1 | 	add	local04, objptr
09928     04 2C 06 F1 | 	add	local04, #4
0992c     16 35 02 FB | 	rdlong	local08, local04
09930     12 34 0E F2 | 	cmp	local08, #18 wz
09934     35 00 00 FF 
09938     0C E4 85 F1 | 	sub	objptr, ##27148
0993c     60 01 90 5D |  if_ne	jmp	#LR__0853
09940     22 2A 06 F6 | 	mov	local03, #34
09944     13 2F 02 F6 | 	mov	local05, local01
09948     14 31 02 F6 | 	mov	local06, local02
0994c     15 33 02 F6 | 	mov	local07, local03
09950     4A 00 00 FF 
09954     7C E4 05 F1 | 	add	objptr, ##38012
09958     F2 34 02 FB | 	rdlong	local08, objptr
0995c     1A 37 02 F6 | 	mov	local09, local08
09960     01 36 66 F0 | 	shl	local09, #1
09964     1A 37 02 F1 | 	add	local09, local08
09968     02 36 66 F0 | 	shl	local09, #2
0996c     03 00 00 FF 
09970     00 E4 85 F1 | 	sub	objptr, ##1536
09974     F2 36 02 F1 | 	add	local09, objptr
09978     1B 2F 62 FC | 	wrlong	local05, local09
0997c     03 00 00 FF 
09980     00 E4 05 F1 | 	add	objptr, ##1536
09984     F2 3A 02 FB | 	rdlong	local11, objptr
09988     1D 39 02 F6 | 	mov	local10, local11
0998c     01 38 66 F0 | 	shl	local10, #1
09990     1D 39 02 F1 | 	add	local10, local11
09994     02 38 66 F0 | 	shl	local10, #2
09998     03 00 00 FF 
0999c     00 E4 85 F1 | 	sub	objptr, ##1536
099a0     F2 38 02 F1 | 	add	local10, objptr
099a4     04 38 06 F1 | 	add	local10, #4
099a8     1C 31 62 FC | 	wrlong	local06, local10
099ac     03 00 00 FF 
099b0     00 E4 05 F1 | 	add	objptr, ##1536
099b4     F2 2E 02 FB | 	rdlong	local05, objptr
099b8     17 3B 02 F6 | 	mov	local11, local05
099bc     01 3A 66 F0 | 	shl	local11, #1
099c0     17 3B 02 F1 | 	add	local11, local05
099c4     02 3A 66 F0 | 	shl	local11, #2
099c8     03 00 00 FF 
099cc     00 E4 85 F1 | 	sub	objptr, ##1536
099d0     F2 3A 02 F1 | 	add	local11, objptr
099d4     08 3A 06 F1 | 	add	local11, #8
099d8     1D 33 62 FC | 	wrlong	local07, local11
099dc     03 00 00 FF 
099e0     00 E4 05 F1 | 	add	objptr, ##1536
099e4     F2 2E 02 FB | 	rdlong	local05, objptr
099e8     01 2E 06 F1 | 	add	local05, #1
099ec     F2 2E 62 FC | 	wrlong	local05, objptr
099f0     44 2A 06 F6 | 	mov	local03, #68
099f4     13 2F 02 F6 | 	mov	local05, local01
099f8     14 31 02 F6 | 	mov	local06, local02
099fc     15 33 02 F6 | 	mov	local07, local03
09a00     F2 34 02 FB | 	rdlong	local08, objptr
09a04     1A 37 02 F6 | 	mov	local09, local08
09a08     01 36 66 F0 | 	shl	local09, #1
09a0c     1A 37 02 F1 | 	add	local09, local08
09a10     02 36 66 F0 | 	shl	local09, #2
09a14     03 00 00 FF 
09a18     00 E4 85 F1 | 	sub	objptr, ##1536
09a1c     F2 36 02 F1 | 	add	local09, objptr
09a20     1B 2F 62 FC | 	wrlong	local05, local09
09a24     03 00 00 FF 
09a28     00 E4 05 F1 | 	add	objptr, ##1536
09a2c     F2 3A 02 FB | 	rdlong	local11, objptr
09a30     1D 39 02 F6 | 	mov	local10, local11
09a34     01 38 66 F0 | 	shl	local10, #1
09a38     1D 39 02 F1 | 	add	local10, local11
09a3c     02 38 66 F0 | 	shl	local10, #2
09a40     03 00 00 FF 
09a44     00 E4 85 F1 | 	sub	objptr, ##1536
09a48     F2 38 02 F1 | 	add	local10, objptr
09a4c     04 38 06 F1 | 	add	local10, #4
09a50     1C 31 62 FC | 	wrlong	local06, local10
09a54     03 00 00 FF 
09a58     00 E4 05 F1 | 	add	objptr, ##1536
09a5c     F2 38 02 FB | 	rdlong	local10, objptr
09a60     1C 3B 02 F6 | 	mov	local11, local10
09a64     01 3A 66 F0 | 	shl	local11, #1
09a68     1C 3B 02 F1 | 	add	local11, local10
09a6c     02 3A 66 F0 | 	shl	local11, #2
09a70     03 00 00 FF 
09a74     00 E4 85 F1 | 	sub	objptr, ##1536
09a78     F2 3A 02 F1 | 	add	local11, objptr
09a7c     08 3A 06 F1 | 	add	local11, #8
09a80     1D 33 62 FC | 	wrlong	local07, local11
09a84     03 00 00 FF 
09a88     00 E4 05 F1 | 	add	objptr, ##1536
09a8c     F2 2E 02 FB | 	rdlong	local05, objptr
09a90     01 2E 06 F1 | 	add	local05, #1
09a94     F2 2E 62 FC | 	wrlong	local05, objptr
09a98     4A 00 00 FF 
09a9c     7C E4 85 F1 | 	sub	objptr, ##38012
09aa0                 | LR__0853
09aa0                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09aa0     37 00 00 FF 
09aa4     44 E4 05 F1 | 	add	objptr, ##28228
09aa8     F2 2C 02 FB | 	rdlong	local04, objptr
09aac     03 2C 66 F0 | 	shl	local04, #3
09ab0     02 00 00 FF 
09ab4     38 E4 85 F1 | 	sub	objptr, ##1080
09ab8     F2 2C 02 F1 | 	add	local04, objptr
09abc     04 2C 06 F1 | 	add	local04, #4
09ac0     16 35 02 FB | 	rdlong	local08, local04
09ac4     FE 35 0E F2 | 	cmp	local08, #510 wz
09ac8     35 00 00 FF 
09acc     0C E4 85 F1 | 	sub	objptr, ##27148
09ad0     B8 00 90 5D |  if_ne	jmp	#LR__0854
09ad4     44 2A 06 F6 | 	mov	local03, #68
09ad8     13 2F 02 F6 | 	mov	local05, local01
09adc     14 31 02 F6 | 	mov	local06, local02
09ae0     15 33 02 F6 | 	mov	local07, local03
09ae4     4A 00 00 FF 
09ae8     7C E4 05 F1 | 	add	objptr, ##38012
09aec     F2 34 02 FB | 	rdlong	local08, objptr
09af0     1A 37 02 F6 | 	mov	local09, local08
09af4     01 36 66 F0 | 	shl	local09, #1
09af8     1A 37 02 F1 | 	add	local09, local08
09afc     02 36 66 F0 | 	shl	local09, #2
09b00     03 00 00 FF 
09b04     00 E4 85 F1 | 	sub	objptr, ##1536
09b08     F2 36 02 F1 | 	add	local09, objptr
09b0c     1B 2F 62 FC | 	wrlong	local05, local09
09b10     03 00 00 FF 
09b14     00 E4 05 F1 | 	add	objptr, ##1536
09b18     F2 3A 02 FB | 	rdlong	local11, objptr
09b1c     1D 39 02 F6 | 	mov	local10, local11
09b20     01 38 66 F0 | 	shl	local10, #1
09b24     1D 39 02 F1 | 	add	local10, local11
09b28     02 38 66 F0 | 	shl	local10, #2
09b2c     03 00 00 FF 
09b30     00 E4 85 F1 | 	sub	objptr, ##1536
09b34     F2 38 02 F1 | 	add	local10, objptr
09b38     04 38 06 F1 | 	add	local10, #4
09b3c     1C 31 62 FC | 	wrlong	local06, local10
09b40     03 00 00 FF 
09b44     00 E4 05 F1 | 	add	objptr, ##1536
09b48     F2 38 02 FB | 	rdlong	local10, objptr
09b4c     1C 3B 02 F6 | 	mov	local11, local10
09b50     01 3A 66 F0 | 	shl	local11, #1
09b54     1C 3B 02 F1 | 	add	local11, local10
09b58     02 3A 66 F0 | 	shl	local11, #2
09b5c     03 00 00 FF 
09b60     00 E4 85 F1 | 	sub	objptr, ##1536
09b64     F2 3A 02 F1 | 	add	local11, objptr
09b68     08 3A 06 F1 | 	add	local11, #8
09b6c     1D 33 62 FC | 	wrlong	local07, local11
09b70     03 00 00 FF 
09b74     00 E4 05 F1 | 	add	objptr, ##1536
09b78     F2 2E 02 FB | 	rdlong	local05, objptr
09b7c     01 2E 06 F1 | 	add	local05, #1
09b80     F2 2E 62 FC | 	wrlong	local05, objptr
09b84     4A 00 00 FF 
09b88     7C E4 85 F1 | 	sub	objptr, ##38012
09b8c                 | LR__0854
09b8c                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
09b8c     37 00 00 FF 
09b90     44 E4 05 F1 | 	add	objptr, ##28228
09b94     F2 2C 02 FB | 	rdlong	local04, objptr
09b98     03 2C 66 F0 | 	shl	local04, #3
09b9c     02 00 00 FF 
09ba0     38 E4 85 F1 | 	sub	objptr, ##1080
09ba4     F2 2C 02 F1 | 	add	local04, objptr
09ba8     04 2C 06 F1 | 	add	local04, #4
09bac     16 35 02 FB | 	rdlong	local08, local04
09bb0     11 34 0E F2 | 	cmp	local08, #17 wz
09bb4     35 00 00 FF 
09bb8     0C E4 85 F1 | 	sub	objptr, ##27148
09bbc     6C 00 90 AD |  if_e	jmp	#LR__0855
09bc0     37 00 00 FF 
09bc4     44 E4 05 F1 | 	add	objptr, ##28228
09bc8     F2 34 02 FB | 	rdlong	local08, objptr
09bcc     03 34 66 F0 | 	shl	local08, #3
09bd0     02 00 00 FF 
09bd4     38 E4 85 F1 | 	sub	objptr, ##1080
09bd8     F2 34 02 F1 | 	add	local08, objptr
09bdc     04 34 06 F1 | 	add	local08, #4
09be0     1A 35 02 FB | 	rdlong	local08, local08
09be4     12 34 0E F2 | 	cmp	local08, #18 wz
09be8     35 00 00 FF 
09bec     0C E4 85 F1 | 	sub	objptr, ##27148
09bf0     38 00 90 AD |  if_e	jmp	#LR__0855
09bf4     37 00 00 FF 
09bf8     44 E4 05 F1 | 	add	objptr, ##28228
09bfc     F2 3A 02 FB | 	rdlong	local11, objptr
09c00     03 3A 66 F0 | 	shl	local11, #3
09c04     02 00 00 FF 
09c08     38 E4 85 F1 | 	sub	objptr, ##1080
09c0c     F2 3A 02 F1 | 	add	local11, objptr
09c10     04 3A 06 F1 | 	add	local11, #4
09c14     1D 3B 02 FB | 	rdlong	local11, local11
09c18     FE 3B 0E F2 | 	cmp	local11, #510 wz
09c1c     35 00 00 FF 
09c20     0C E4 85 F1 | 	sub	objptr, ##27148
09c24     16 FA 05 56 |  if_ne	mov	result1, #22
09c28     68 00 90 5D |  if_ne	jmp	#LR__0857
09c2c                 | LR__0855
09c2c     37 00 00 FF 
09c30     44 E4 05 F1 | 	add	objptr, ##28228
09c34     F2 2C 02 FB | 	rdlong	local04, objptr
09c38     01 2C 06 F1 | 	add	local04, #1
09c3c     F2 2C 62 FC | 	wrlong	local04, objptr
09c40     03 2C 66 F0 | 	shl	local04, #3
09c44     02 00 00 FF 
09c48     38 E4 85 F1 | 	sub	objptr, ##1080
09c4c     F2 2C 02 F1 | 	add	local04, objptr
09c50     04 2C 06 F1 | 	add	local04, #4
09c54     16 35 02 FB | 	rdlong	local08, local04
09c58     FE 35 0E F2 | 	cmp	local08, #510 wz
09c5c     35 00 00 FF 
09c60     0C E4 85 F1 | 	sub	objptr, ##27148
09c64     28 00 90 AD |  if_e	jmp	#LR__0856
09c68     37 00 00 FF 
09c6c     44 E4 05 F1 | 	add	objptr, ##28228
09c70     F2 3A 02 FB | 	rdlong	local11, objptr
09c74     0E 00 00 FF 
09c78     1C E4 05 F1 | 	add	objptr, ##7196
09c7c     F2 38 02 FB | 	rdlong	local10, objptr
09c80     45 00 00 FF 
09c84     60 E4 85 F1 | 	sub	objptr, ##35424
09c88     1C 3B 52 F2 | 	cmps	local11, local10 wc
09c8c     E4 FA 9F CD |  if_b	jmp	#LR__0851
09c90                 | LR__0856
09c90                 | ' return 0
09c90     00 FA 05 F6 | 	mov	result1, #0
09c94                 | LR__0857
09c94     A7 F0 03 F6 | 	mov	ptra, fp
09c98     B2 00 A0 FD | 	call	#popregs_
09c9c                 | _compile_print_ret
09c9c     2D 00 64 FD | 	ret
09ca0                 | 
09ca0                 | ' 
09ca0                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09ca0                 | ' 
09ca0                 | ' function compile_if(aline as ulong) as ulong  
09ca0                 | _compile_if
09ca0     09 4A 05 F6 | 	mov	COUNT_, #9
09ca4     A8 00 A0 FD | 	call	#pushregs_
09ca8                 | _compile_if_enter
09ca8     09 2D 02 F6 | 	mov	local04, arg01
09cac                 | ' return expr()
09cac     F8 21 B0 FD | 	call	#_expr
09cb0     37 00 00 FF 
09cb4     44 E4 05 F1 | 	add	objptr, ##28228
09cb8     F2 14 02 FB | 	rdlong	arg02, objptr
09cbc     0A 2F 02 F6 | 	mov	local05, arg02
09cc0     03 2E 66 F0 | 	shl	local05, #3
09cc4     02 00 00 FF 
09cc8     38 E4 85 F1 | 	sub	objptr, ##1080
09ccc     F2 2E 02 F1 | 	add	local05, objptr
09cd0     04 2E 06 F1 | 	add	local05, #4
09cd4     17 2F 02 FB | 	rdlong	local05, local05
09cd8     01 14 06 F1 | 	add	arg02, #1
09cdc     02 00 00 FF 
09ce0     38 E4 05 F1 | 	add	objptr, ##1080
09ce4     F2 14 62 FC | 	wrlong	arg02, objptr
09ce8     37 00 00 FF 
09cec     44 E4 85 F1 | 	sub	objptr, ##28228
09cf0                 | ' 
09cf0                 | ' err=compile_fun_1p()
09cf0                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09cf0     5B 2E 0E F2 | 	cmp	local05, #91 wz
09cf4     34 FA 05 56 |  if_ne	mov	result1, #52
09cf8     20 01 90 5D |  if_ne	jmp	#LR__0862
09cfc     58 2A 06 F6 | 	mov	local03, #88
09d00     13 31 02 F6 | 	mov	local06, local01
09d04     14 33 02 F6 | 	mov	local07, local02
09d08     15 15 02 F6 | 	mov	arg02, local03
09d0c     4A 00 00 FF 
09d10     7C E4 05 F1 | 	add	objptr, ##38012
09d14     F2 12 02 FB | 	rdlong	arg01, objptr
09d18     09 35 02 F6 | 	mov	local08, arg01
09d1c     01 34 66 F0 | 	shl	local08, #1
09d20     09 35 02 F1 | 	add	local08, arg01
09d24     02 34 66 F0 | 	shl	local08, #2
09d28     03 00 00 FF 
09d2c     00 E4 85 F1 | 	sub	objptr, ##1536
09d30     F2 34 02 F1 | 	add	local08, objptr
09d34     1A 31 62 FC | 	wrlong	local06, local08
09d38     03 00 00 FF 
09d3c     00 E4 05 F1 | 	add	objptr, ##1536
09d40     F2 30 02 FB | 	rdlong	local06, objptr
09d44     18 13 02 F6 | 	mov	arg01, local06
09d48     01 12 66 F0 | 	shl	arg01, #1
09d4c     18 13 02 F1 | 	add	arg01, local06
09d50     02 12 66 F0 | 	shl	arg01, #2
09d54     03 00 00 FF 
09d58     00 E4 85 F1 | 	sub	objptr, ##1536
09d5c     F2 12 02 F1 | 	add	arg01, objptr
09d60     04 12 06 F1 | 	add	arg01, #4
09d64     09 33 62 FC | 	wrlong	local07, arg01
09d68     03 00 00 FF 
09d6c     00 E4 05 F1 | 	add	objptr, ##1536
09d70     F2 30 02 FB | 	rdlong	local06, objptr
09d74     18 13 02 F6 | 	mov	arg01, local06
09d78     01 12 66 F0 | 	shl	arg01, #1
09d7c     18 13 02 F1 | 	add	arg01, local06
09d80     02 12 66 F0 | 	shl	arg01, #2
09d84     03 00 00 FF 
09d88     00 E4 85 F1 | 	sub	objptr, ##1536
09d8c     F2 12 02 F1 | 	add	arg01, objptr
09d90     08 12 06 F1 | 	add	arg01, #8
09d94     09 15 62 FC | 	wrlong	arg02, arg01
09d98     03 00 00 FF 
09d9c     00 E4 05 F1 | 	add	objptr, ##1536
09da0     F2 30 02 FB | 	rdlong	local06, objptr
09da4     01 30 06 F1 | 	add	local06, #1
09da8     F2 30 62 FC | 	wrlong	local06, objptr
09dac                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
09dac                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09dac     13 00 00 FF 
09db0     38 E4 85 F1 | 	sub	objptr, ##9784
09db4     F2 14 02 FB | 	rdlong	arg02, objptr
09db8     01 14 06 F1 | 	add	arg02, #1
09dbc     03 14 66 F0 | 	shl	arg02, #3
09dc0     02 00 00 FF 
09dc4     38 E4 85 F1 | 	sub	objptr, ##1080
09dc8     F2 14 02 F1 | 	add	arg02, objptr
09dcc     0A 13 02 FB | 	rdlong	arg01, arg02
09dd0     35 00 00 FF 
09dd4     0C E4 85 F1 | 	sub	objptr, ##27148
09dd8                 | ' 
09dd8                 | ' select case s
09dd8     B6 01 00 FF 
09ddc     B6 14 06 F6 | 	mov	arg02, ##@LR__5579
09de0     B4 D1 B1 FD | 	call	#__system___string_cmp
09de4     00 FA 0D F2 | 	cmp	result1, #0 wz
09de8     1B FA 05 A6 |  if_e	mov	result1, #27
09dec     00 FA 05 56 |  if_ne	mov	result1, #0
09df0     00 FA 0D F2 | 	cmp	result1, #0 wz
09df4     10 00 90 AD |  if_e	jmp	#LR__0860
09df8     05 12 06 F6 | 	mov	arg01, #5
09dfc     38 E4 BF FD | 	call	#_compile_immediate_assign
09e00     FD 36 02 F6 | 	mov	local09, result1
09e04     10 00 90 FD | 	jmp	#LR__0861
09e08                 | LR__0860
09e08     05 12 06 F6 | 	mov	arg01, #5
09e0c     16 15 02 F6 | 	mov	arg02, local04
09e10     50 DA BF FD | 	call	#_compile_immediate
09e14     FD 36 02 F6 | 	mov	local09, result1
09e18                 | LR__0861
09e18                 | ' return err
09e18     1B FB 01 F6 | 	mov	result1, local09
09e1c                 | LR__0862
09e1c     A7 F0 03 F6 | 	mov	ptra, fp
09e20     B2 00 A0 FD | 	call	#popregs_
09e24                 | _compile_if_ret
09e24     2D 00 64 FD | 	ret
09e28                 | 
09e28                 | ' 
09e28                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09e28                 | ' 
09e28                 | ' function compile_else(aline as ulong) as ulong  
09e28                 | _compile_else
09e28     07 4A 05 F6 | 	mov	COUNT_, #7
09e2c     A8 00 A0 FD | 	call	#pushregs_
09e30                 | _compile_else_enter
09e30     09 2D 02 F6 | 	mov	local04, arg01
09e34     5A 2A 06 F6 | 	mov	local03, #90
09e38     13 2F 02 F6 | 	mov	local05, local01
09e3c     14 31 02 F6 | 	mov	local06, local02
09e40     15 27 02 F6 | 	mov	local01, local03
09e44     4A 00 00 FF 
09e48     7C E4 05 F1 | 	add	objptr, ##38012
09e4c     F2 14 02 FB | 	rdlong	arg02, objptr
09e50     0A 13 02 F6 | 	mov	arg01, arg02
09e54     01 12 66 F0 | 	shl	arg01, #1
09e58     0A 13 02 F1 | 	add	arg01, arg02
09e5c     02 12 66 F0 | 	shl	arg01, #2
09e60     03 00 00 FF 
09e64     00 E4 85 F1 | 	sub	objptr, ##1536
09e68     F2 12 02 F1 | 	add	arg01, objptr
09e6c     09 2F 62 FC | 	wrlong	local05, arg01
09e70     03 00 00 FF 
09e74     00 E4 05 F1 | 	add	objptr, ##1536
09e78     F2 2E 02 FB | 	rdlong	local05, objptr
09e7c     17 15 02 F6 | 	mov	arg02, local05
09e80     01 14 66 F0 | 	shl	arg02, #1
09e84     17 15 02 F1 | 	add	arg02, local05
09e88     02 14 66 F0 | 	shl	arg02, #2
09e8c     03 00 00 FF 
09e90     00 E4 85 F1 | 	sub	objptr, ##1536
09e94     F2 14 02 F1 | 	add	arg02, objptr
09e98     04 14 06 F1 | 	add	arg02, #4
09e9c     0A 31 62 FC | 	wrlong	local06, arg02
09ea0     03 00 00 FF 
09ea4     00 E4 05 F1 | 	add	objptr, ##1536
09ea8     F2 30 02 FB | 	rdlong	local06, objptr
09eac     18 2F 02 F6 | 	mov	local05, local06
09eb0     01 2E 66 F0 | 	shl	local05, #1
09eb4     18 2F 02 F1 | 	add	local05, local06
09eb8     02 2E 66 F0 | 	shl	local05, #2
09ebc     03 00 00 FF 
09ec0     00 E4 85 F1 | 	sub	objptr, ##1536
09ec4     F2 2E 02 F1 | 	add	local05, objptr
09ec8     08 2E 06 F1 | 	add	local05, #8
09ecc     17 27 62 FC | 	wrlong	local01, local05
09ed0     03 00 00 FF 
09ed4     00 E4 05 F1 | 	add	objptr, ##1536
09ed8     F2 2E 02 FB | 	rdlong	local05, objptr
09edc     01 2E 06 F1 | 	add	local05, #1
09ee0     F2 2E 62 FC | 	wrlong	local05, objptr
09ee4                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09ee4                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09ee4     13 00 00 FF 
09ee8     38 E4 85 F1 | 	sub	objptr, ##9784
09eec     F2 30 02 FB | 	rdlong	local06, objptr
09ef0     01 30 06 F1 | 	add	local06, #1
09ef4     03 30 66 F0 | 	shl	local06, #3
09ef8     02 00 00 FF 
09efc     38 E4 85 F1 | 	sub	objptr, ##1080
09f00     F2 30 02 F1 | 	add	local06, objptr
09f04     18 13 02 FB | 	rdlong	arg01, local06
09f08     35 00 00 FF 
09f0c     0C E4 85 F1 | 	sub	objptr, ##27148
09f10                 | ' 
09f10                 | ' select case s
09f10     B6 01 00 FF 
09f14     B6 14 06 F6 | 	mov	arg02, ##@LR__5579
09f18     7C D0 B1 FD | 	call	#__system___string_cmp
09f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
09f20     1B FA 05 A6 |  if_e	mov	result1, #27
09f24     00 FA 05 56 |  if_ne	mov	result1, #0
09f28     00 FA 0D F2 | 	cmp	result1, #0 wz
09f2c     10 00 90 AD |  if_e	jmp	#LR__0870
09f30     05 12 06 F6 | 	mov	arg01, #5
09f34     00 E3 BF FD | 	call	#_compile_immediate_assign
09f38     FD 32 02 F6 | 	mov	local07, result1
09f3c     10 00 90 FD | 	jmp	#LR__0871
09f40                 | LR__0870
09f40     05 12 06 F6 | 	mov	arg01, #5
09f44     16 15 02 F6 | 	mov	arg02, local04
09f48     18 D9 BF FD | 	call	#_compile_immediate
09f4c     FD 32 02 F6 | 	mov	local07, result1
09f50                 | LR__0871
09f50                 | ' return err
09f50     19 FB 01 F6 | 	mov	result1, local07
09f54     A7 F0 03 F6 | 	mov	ptra, fp
09f58     B2 00 A0 FD | 	call	#popregs_
09f5c                 | _compile_else_ret
09f5c     2D 00 64 FD | 	ret
09f60                 | 
09f60                 | ' 
09f60                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
09f60                 | ' 
09f60                 | ' function compile_dim() as ulong  
09f60                 | _compile_dim
09f60     11 4A 05 F6 | 	mov	COUNT_, #17
09f64     A8 00 A0 FD | 	call	#pushregs_
09f68     01 26 06 F6 | 	mov	local01, #1
09f6c     01 28 06 F6 | 	mov	local02, #1
09f70     01 2A 06 F6 | 	mov	local03, #1
09f74                 | ' 
09f74                 | ' dims(0)=1: dims(1)=1: dims(2)=1
09f74                 | ' if isname(lparts(ct).part$) then 
09f74     37 00 00 FF 
09f78     44 E4 05 F1 | 	add	objptr, ##28228
09f7c     F2 18 02 FB | 	rdlong	arg04, objptr
09f80     03 18 66 F0 | 	shl	arg04, #3
09f84     02 00 00 FF 
09f88     38 E4 85 F1 | 	sub	objptr, ##1080
09f8c     F2 18 02 F1 | 	add	arg04, objptr
09f90     0C 13 02 FB | 	rdlong	arg01, arg04
09f94     35 00 00 FF 
09f98     0C E4 85 F1 | 	sub	objptr, ##27148
09f9c     1C C7 BF FD | 	call	#_isname
09fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
09fa4     78 05 90 AD |  if_e	jmp	#LR__0903
09fa8     37 00 00 FF 
09fac     44 E4 05 F1 | 	add	objptr, ##28228
09fb0     F2 2C 02 FB | 	rdlong	local04, objptr
09fb4     03 2C 66 F0 | 	shl	local04, #3
09fb8     02 00 00 FF 
09fbc     38 E4 85 F1 | 	sub	objptr, ##1080
09fc0     F2 2C 02 F1 | 	add	local04, objptr
09fc4     16 2F 02 FB | 	rdlong	local05, local04
09fc8     01 30 66 F6 | 	neg	local06, #1
09fcc                 | '   varname2$=lparts(ct).part$ 
09fcc                 | '   j=-1
09fcc                 | '   if varnum>0 then
09fcc     04 E4 85 F1 | 	sub	objptr, #4
09fd0     F2 32 02 FB | 	rdlong	local07, objptr
09fd4     35 00 00 FF 
09fd8     08 E4 85 F1 | 	sub	objptr, ##27144
09fdc     01 32 56 F2 | 	cmps	local07, #1 wc
09fe0     58 00 90 CD |  if_b	jmp	#LR__0882
09fe4                 | '     for i=0 to varnum-1
09fe4     00 34 06 F6 | 	mov	local08, #0
09fe8     35 00 00 FF 
09fec     08 E4 05 F1 | 	add	objptr, ##27144
09ff0     F2 36 02 FB | 	rdlong	local09, objptr
09ff4     35 00 00 FF 
09ff8     08 E4 85 F1 | 	sub	objptr, ##27144
09ffc                 | LR__0880
09ffc     1B 35 52 F2 | 	cmps	local08, local09 wc
0a000     38 00 90 3D |  if_ae	jmp	#LR__0881
0a004                 | '       if variables(i).name=varname2$ then j=i : exit
0a004     1A 2D 02 F6 | 	mov	local04, local08
0a008     04 2C 66 F0 | 	shl	local04, #4
0a00c     14 00 00 FF 
0a010     F8 E5 05 F1 | 	add	objptr, ##10744
0a014     F2 2C 02 F1 | 	add	local04, objptr
0a018     16 13 02 FB | 	rdlong	arg01, local04
0a01c     17 15 02 F6 | 	mov	arg02, local05
0a020     14 00 00 FF 
0a024     F8 E5 85 F1 | 	sub	objptr, ##10744
0a028     6C CF B1 FD | 	call	#__system___string_cmp
0a02c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a030     1A 31 02 A6 |  if_e	mov	local06, local08
0a034     01 34 06 51 |  if_ne	add	local08, #1
0a038     C0 FF 9F 5D |  if_ne	jmp	#LR__0880
0a03c                 | LR__0881
0a03c                 | LR__0882
0a03c                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
0a03c     FF FF 7F FF 
0a040     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0a044     35 00 00 AF 
0a048     08 E4 05 A1 |  if_e	add	objptr, ##27144
0a04c     F2 30 02 AB |  if_e	rdlong	local06, objptr
0a050     35 00 00 AF 
0a054     08 E4 85 A1 |  if_e	sub	objptr, ##27144
0a058     78 00 90 AD |  if_e	jmp	#LR__0883
0a05c     00 12 06 F6 | 	mov	arg01, #0
0a060     34 2C B2 FD | 	call	#__system___getiolock_0613
0a064     FD 12 02 F6 | 	mov	arg01, result1
0a068     04 CF B1 FD | 	call	#__system___lockmem
0a06c     B8 01 00 FF 
0a070     6F 15 06 F6 | 	mov	arg02, ##@LR__5840
0a074     00 12 06 F6 | 	mov	arg01, #0
0a078     00 16 06 F6 | 	mov	arg03, #0
0a07c     E4 DB B1 FD | 	call	#__system___basic_print_string
0a080     52 00 00 FF 
0a084     B0 E4 05 F1 | 	add	objptr, ##42160
0a088     F2 14 02 FB | 	rdlong	arg02, objptr
0a08c     52 00 00 FF 
0a090     B0 E4 85 F1 | 	sub	objptr, ##42160
0a094     00 12 06 F6 | 	mov	arg01, #0
0a098     00 16 06 F6 | 	mov	arg03, #0
0a09c     0A 18 06 F6 | 	mov	arg04, #10
0a0a0     44 DC B1 FD | 	call	#__system___basic_print_unsigned
0a0a4     B8 01 00 FF 
0a0a8     7D 15 06 F6 | 	mov	arg02, ##@LR__5841
0a0ac     00 12 06 F6 | 	mov	arg01, #0
0a0b0     00 16 06 F6 | 	mov	arg03, #0
0a0b4     AC DB B1 FD | 	call	#__system___basic_print_string
0a0b8     00 12 06 F6 | 	mov	arg01, #0
0a0bc     0A 14 06 F6 | 	mov	arg02, #10
0a0c0     00 16 06 F6 | 	mov	arg03, #0
0a0c4     44 DB B1 FD | 	call	#__system___basic_print_char
0a0c8     00 12 06 F6 | 	mov	arg01, #0
0a0cc     C8 2B B2 FD | 	call	#__system___getiolock_0613
0a0d0     FD 00 68 FC | 	wrlong	#0, result1
0a0d4                 | LR__0883
0a0d4                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
0a0d4     37 00 00 FF 
0a0d8     44 E4 05 F1 | 	add	objptr, ##28228
0a0dc     F2 14 02 FB | 	rdlong	arg02, objptr
0a0e0     01 14 06 F1 | 	add	arg02, #1
0a0e4     03 14 66 F0 | 	shl	arg02, #3
0a0e8     02 00 00 FF 
0a0ec     38 E4 85 F1 | 	sub	objptr, ##1080
0a0f0     F2 14 02 F1 | 	add	arg02, objptr
0a0f4     0A 13 02 FB | 	rdlong	arg01, arg02
0a0f8     B8 01 00 FF 
0a0fc     9E 15 06 F6 | 	mov	arg02, ##@LR__5842
0a100     35 00 00 FF 
0a104     0C E4 85 F1 | 	sub	objptr, ##27148
0a108     8C CE B1 FD | 	call	#__system___string_cmp
0a10c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a110     44 00 90 AD |  if_e	jmp	#LR__0884
0a114     37 00 00 FF 
0a118     44 E4 05 F1 | 	add	objptr, ##28228
0a11c     F2 36 02 FB | 	rdlong	local09, objptr
0a120     01 36 06 F1 | 	add	local09, #1
0a124     03 36 66 F0 | 	shl	local09, #3
0a128     02 00 00 FF 
0a12c     38 E4 85 F1 | 	sub	objptr, ##1080
0a130     F2 36 02 F1 | 	add	local09, objptr
0a134     1B 13 02 FB | 	rdlong	arg01, local09
0a138     B8 01 00 FF 
0a13c     A0 15 06 F6 | 	mov	arg02, ##@LR__5843
0a140     35 00 00 FF 
0a144     0C E4 85 F1 | 	sub	objptr, ##27148
0a148     4C CE B1 FD | 	call	#__system___string_cmp
0a14c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a150     2B FA 05 56 |  if_ne	mov	result1, #43
0a154     D0 04 90 5D |  if_ne	jmp	#LR__0905
0a158                 | LR__0884
0a158                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
0a158     37 00 00 FF 
0a15c     44 E4 05 F1 | 	add	objptr, ##28228
0a160     F2 14 02 FB | 	rdlong	arg02, objptr
0a164     01 14 06 F1 | 	add	arg02, #1
0a168     03 14 66 F0 | 	shl	arg02, #3
0a16c     02 00 00 FF 
0a170     38 E4 85 F1 | 	sub	objptr, ##1080
0a174     F2 14 02 F1 | 	add	arg02, objptr
0a178     0A 13 02 FB | 	rdlong	arg01, arg02
0a17c     B8 01 00 FF 
0a180     A3 15 06 F6 | 	mov	arg02, ##@LR__5844
0a184     35 00 00 FF 
0a188     0C E4 85 F1 | 	sub	objptr, ##27148
0a18c     08 CE B1 FD | 	call	#__system___string_cmp
0a190     00 FA 0D F2 | 	cmp	result1, #0 wz
0a194     37 00 00 AF 
0a198     44 E4 05 A1 |  if_e	add	objptr, ##28228
0a19c     F2 38 02 AB |  if_e	rdlong	local10, objptr
0a1a0     37 00 00 AF 
0a1a4     44 E4 85 A1 |  if_e	sub	objptr, ##28228
0a1a8     01 38 06 A1 |  if_e	add	local10, #1
0a1ac     5C 01 90 AD |  if_e	jmp	#LR__0889
0a1b0     37 00 00 FF 
0a1b4     44 E4 05 F1 | 	add	objptr, ##28228
0a1b8     F2 38 02 FB | 	rdlong	local10, objptr
0a1bc     37 00 00 FF 
0a1c0     44 E4 85 F1 | 	sub	objptr, ##28228
0a1c4     02 38 06 F1 | 	add	local10, #2
0a1c8     00 3A 06 F6 | 	mov	local11, #0
0a1cc                 | '   l=ct+2 : m=0 : do
0a1cc                 | LR__0885
0a1cc                 | '   if isdec(lparts(l).part$) then 
0a1cc     1C 2D 02 F6 | 	mov	local04, local10
0a1d0     03 2C 66 F0 | 	shl	local04, #3
0a1d4     35 00 00 FF 
0a1d8     0C E4 05 F1 | 	add	objptr, ##27148
0a1dc     F2 2C 02 F1 | 	add	local04, objptr
0a1e0     16 13 02 FB | 	rdlong	arg01, local04
0a1e4     35 00 00 FF 
0a1e8     0C E4 85 F1 | 	sub	objptr, ##27148
0a1ec     D0 CD BF FD | 	call	#_isdec
0a1f0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a1f4     44 00 90 AD |  if_e	jmp	#LR__0886
0a1f8     1D 3D 02 F6 | 	mov	local12, local11
0a1fc     13 3D 06 F1 | 	add	local12, #local01
0a200     1C 37 02 F6 | 	mov	local09, local10
0a204     03 36 66 F0 | 	shl	local09, #3
0a208     35 00 00 FF 
0a20c     0C E4 05 F1 | 	add	objptr, ##27148
0a210     F2 36 02 F1 | 	add	local09, objptr
0a214     1B 13 02 FB | 	rdlong	arg01, local09
0a218     00 14 06 F6 | 	mov	arg02, #0
0a21c     35 00 00 FF 
0a220     0C E4 85 F1 | 	sub	objptr, ##27148
0a224     38 02 B2 FD | 	call	#__system____builtin_atoi
0a228     FD 3E 02 F6 | 	mov	local13, result1
0a22c                 | 	'.live	local13
0a22c                 | 	'.live	local12
0a22c     00 3C 8E F9 | 	altd	local12, #0
0a230     1F 3D 02 F6 | 	mov	local12, local13
0a234     01 3A 06 F1 | 	add	local11, #1
0a238     08 00 90 FD | 	jmp	#LR__0887
0a23c                 | LR__0886
0a23c                 | '     return(17)
0a23c     11 FA 05 F6 | 	mov	result1, #17
0a240     E4 03 90 FD | 	jmp	#LR__0905
0a244                 | LR__0887
0a244                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
0a244     1C 2D 02 F6 | 	mov	local04, local10
0a248     01 2C 06 F1 | 	add	local04, #1
0a24c     03 2C 66 F0 | 	shl	local04, #3
0a250     35 00 00 FF 
0a254     0C E4 05 F1 | 	add	objptr, ##27148
0a258     F2 2C 02 F1 | 	add	local04, objptr
0a25c     16 13 02 FB | 	rdlong	arg01, local04
0a260     B8 01 00 FF 
0a264     A6 15 06 F6 | 	mov	arg02, ##@LR__5845
0a268     35 00 00 FF 
0a26c     0C E4 85 F1 | 	sub	objptr, ##27148
0a270     24 CD B1 FD | 	call	#__system___string_cmp
0a274     00 FA 0D F2 | 	cmp	result1, #0 wz
0a278     3C 00 90 AD |  if_e	jmp	#LR__0888
0a27c     1C 3F 02 F6 | 	mov	local13, local10
0a280     01 3E 06 F1 | 	add	local13, #1
0a284     03 3E 66 F0 | 	shl	local13, #3
0a288     35 00 00 FF 
0a28c     0C E4 05 F1 | 	add	objptr, ##27148
0a290     F2 3E 02 F1 | 	add	local13, objptr
0a294     1F 13 02 FB | 	rdlong	arg01, local13
0a298     B8 01 00 FF 
0a29c     A8 15 06 F6 | 	mov	arg02, ##@LR__5846
0a2a0     35 00 00 FF 
0a2a4     0C E4 85 F1 | 	sub	objptr, ##27148
0a2a8     EC CC B1 FD | 	call	#__system___string_cmp
0a2ac     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2b0     2C FA 05 56 |  if_ne	mov	result1, #44
0a2b4     70 03 90 5D |  if_ne	jmp	#LR__0905
0a2b8                 | LR__0888
0a2b8     02 38 06 F1 | 	add	local10, #2
0a2bc     1C 2D 02 F6 | 	mov	local04, local10
0a2c0     01 2C 86 F1 | 	sub	local04, #1
0a2c4     03 2C 66 F0 | 	shl	local04, #3
0a2c8     35 00 00 FF 
0a2cc     0C E4 05 F1 | 	add	objptr, ##27148
0a2d0     F2 2C 02 F1 | 	add	local04, objptr
0a2d4     16 13 02 FB | 	rdlong	arg01, local04
0a2d8     B8 01 00 FF 
0a2dc     AA 15 06 F6 | 	mov	arg02, ##@LR__5847
0a2e0     35 00 00 FF 
0a2e4     0C E4 85 F1 | 	sub	objptr, ##27148
0a2e8     AC CC B1 FD | 	call	#__system___string_cmp
0a2ec     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2f0     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
0a2f4     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0885
0a2f8                 | '   if m>3 then return 45
0a2f8     04 3A 56 F2 | 	cmps	local11, #4 wc
0a2fc     2D FA 05 36 |  if_ae	mov	result1, #45
0a300     24 03 90 3D |  if_ae	jmp	#LR__0905
0a304     00 41 06 F6 | 	mov	local14, #256
0a308     0C 42 06 F6 | 	mov	local15, #12
0a30c                 | LR__0889
0a30c                 | '   arraytype=array_no_type : esize=12
0a30c                 | ' 1350 
0a30c                 | '   if lparts(l).part$="as" then
0a30c     1C 2D 02 F6 | 	mov	local04, local10
0a310     03 2C 66 F0 | 	shl	local04, #3
0a314     35 00 00 FF 
0a318     0C E4 05 F1 | 	add	objptr, ##27148
0a31c     F2 2C 02 F1 | 	add	local04, objptr
0a320     16 13 02 FB | 	rdlong	arg01, local04
0a324     B8 01 00 FF 
0a328     AC 15 06 F6 | 	mov	arg02, ##@LR__5848
0a32c     35 00 00 FF 
0a330     0C E4 85 F1 | 	sub	objptr, ##27148
0a334     60 CC B1 FD | 	call	#__system___string_cmp
0a338     00 FA 0D F2 | 	cmp	result1, #0 wz
0a33c     E8 01 90 5D |  if_ne	jmp	#LR__0904
0a340                 | '     select case lparts(l+1).part$
0a340     1C 3D 02 F6 | 	mov	local12, local10
0a344     01 3C 06 F1 | 	add	local12, #1
0a348     03 3C 66 F0 | 	shl	local12, #3
0a34c     35 00 00 FF 
0a350     0C E4 05 F1 | 	add	objptr, ##27148
0a354     F2 3C 02 F1 | 	add	local12, objptr
0a358     1E 45 02 FB | 	rdlong	local16, local12
0a35c     B8 01 00 FF 
0a360     AF 15 06 F6 | 	mov	arg02, ##@LR__5849
0a364     22 13 02 F6 | 	mov	arg01, local16
0a368     35 00 00 FF 
0a36c     0C E4 85 F1 | 	sub	objptr, ##27148
0a370     24 CC B1 FD | 	call	#__system___string_cmp
0a374     00 FA 0D F2 | 	cmp	result1, #0 wz
0a378     0C 01 90 AD |  if_e	jmp	#LR__0890
0a37c     B8 01 00 FF 
0a380     B4 15 06 F6 | 	mov	arg02, ##@LR__5850
0a384     22 13 02 F6 | 	mov	arg01, local16
0a388     0C CC B1 FD | 	call	#__system___string_cmp
0a38c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a390     00 01 90 AD |  if_e	jmp	#LR__0891
0a394     B8 01 00 FF 
0a398     BA 15 06 F6 | 	mov	arg02, ##@LR__5851
0a39c     22 13 02 F6 | 	mov	arg01, local16
0a3a0     F4 CB B1 FD | 	call	#__system___string_cmp
0a3a4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3a8     F4 00 90 AD |  if_e	jmp	#LR__0892
0a3ac     B8 01 00 FF 
0a3b0     C0 15 06 F6 | 	mov	arg02, ##@LR__5852
0a3b4     22 13 02 F6 | 	mov	arg01, local16
0a3b8     DC CB B1 FD | 	call	#__system___string_cmp
0a3bc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3c0     E8 00 90 AD |  if_e	jmp	#LR__0893
0a3c4     B8 01 00 FF 
0a3c8     C7 15 06 F6 | 	mov	arg02, ##@LR__5853
0a3cc     22 13 02 F6 | 	mov	arg01, local16
0a3d0     C4 CB B1 FD | 	call	#__system___string_cmp
0a3d4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3d8     DC 00 90 AD |  if_e	jmp	#LR__0894
0a3dc     B8 01 00 FF 
0a3e0     CC 15 06 F6 | 	mov	arg02, ##@LR__5854
0a3e4     22 13 02 F6 | 	mov	arg01, local16
0a3e8     AC CB B1 FD | 	call	#__system___string_cmp
0a3ec     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3f0     D0 00 90 AD |  if_e	jmp	#LR__0895
0a3f4     B8 01 00 FF 
0a3f8     D4 15 06 F6 | 	mov	arg02, ##@LR__5855
0a3fc     22 13 02 F6 | 	mov	arg01, local16
0a400     94 CB B1 FD | 	call	#__system___string_cmp
0a404     00 FA 0D F2 | 	cmp	result1, #0 wz
0a408     C4 00 90 AD |  if_e	jmp	#LR__0896
0a40c     B8 01 00 FF 
0a410     DA 15 06 F6 | 	mov	arg02, ##@LR__5856
0a414     22 13 02 F6 | 	mov	arg01, local16
0a418     7C CB B1 FD | 	call	#__system___string_cmp
0a41c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a420     B8 00 90 AD |  if_e	jmp	#LR__0897
0a424     B8 01 00 FF 
0a428     E0 15 06 F6 | 	mov	arg02, ##@LR__5857
0a42c     22 13 02 F6 | 	mov	arg01, local16
0a430     64 CB B1 FD | 	call	#__system___string_cmp
0a434     00 FA 0D F2 | 	cmp	result1, #0 wz
0a438     AC 00 90 AD |  if_e	jmp	#LR__0898
0a43c     B8 01 00 FF 
0a440     E7 15 06 F6 | 	mov	arg02, ##@LR__5858
0a444     22 13 02 F6 | 	mov	arg01, local16
0a448     4C CB B1 FD | 	call	#__system___string_cmp
0a44c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a450     A0 00 90 AD |  if_e	jmp	#LR__0899
0a454     B8 01 00 FF 
0a458     EE 15 06 F6 | 	mov	arg02, ##@LR__5859
0a45c     22 13 02 F6 | 	mov	arg01, local16
0a460     34 CB B1 FD | 	call	#__system___string_cmp
0a464     00 FA 0D F2 | 	cmp	result1, #0 wz
0a468     94 00 90 AD |  if_e	jmp	#LR__0900
0a46c     B8 01 00 FF 
0a470     F5 15 06 F6 | 	mov	arg02, ##@LR__5860
0a474     22 13 02 F6 | 	mov	arg01, local16
0a478     1C CB B1 FD | 	call	#__system___string_cmp
0a47c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a480     88 00 90 AD |  if_e	jmp	#LR__0901
0a484     90 00 90 FD | 	jmp	#LR__0902
0a488                 | LR__0890
0a488     01 41 06 F6 | 	mov	local14, #257
0a48c     01 42 06 F6 | 	mov	local15, #1
0a490     94 00 90 FD | 	jmp	#LR__0904
0a494                 | LR__0891
0a494     02 41 06 F6 | 	mov	local14, #258
0a498     01 42 06 F6 | 	mov	local15, #1
0a49c     88 00 90 FD | 	jmp	#LR__0904
0a4a0                 | LR__0892
0a4a0     03 41 06 F6 | 	mov	local14, #259
0a4a4     02 42 06 F6 | 	mov	local15, #2
0a4a8     7C 00 90 FD | 	jmp	#LR__0904
0a4ac                 | LR__0893
0a4ac     04 41 06 F6 | 	mov	local14, #260
0a4b0     02 42 06 F6 | 	mov	local15, #2
0a4b4     70 00 90 FD | 	jmp	#LR__0904
0a4b8                 | LR__0894
0a4b8     05 41 06 F6 | 	mov	local14, #261
0a4bc     04 42 06 F6 | 	mov	local15, #4
0a4c0     64 00 90 FD | 	jmp	#LR__0904
0a4c4                 | LR__0895
0a4c4     05 41 06 F6 | 	mov	local14, #261
0a4c8     04 42 06 F6 | 	mov	local15, #4
0a4cc     58 00 90 FD | 	jmp	#LR__0904
0a4d0                 | LR__0896
0a4d0     06 41 06 F6 | 	mov	local14, #262
0a4d4     04 42 06 F6 | 	mov	local15, #4
0a4d8     4C 00 90 FD | 	jmp	#LR__0904
0a4dc                 | LR__0897
0a4dc     07 41 06 F6 | 	mov	local14, #263
0a4e0     08 42 06 F6 | 	mov	local15, #8
0a4e4     40 00 90 FD | 	jmp	#LR__0904
0a4e8                 | LR__0898
0a4e8     08 41 06 F6 | 	mov	local14, #264
0a4ec     08 42 06 F6 | 	mov	local15, #8
0a4f0     34 00 90 FD | 	jmp	#LR__0904
0a4f4                 | LR__0899
0a4f4     09 41 06 F6 | 	mov	local14, #265
0a4f8     04 42 06 F6 | 	mov	local15, #4
0a4fc     28 00 90 FD | 	jmp	#LR__0904
0a500                 | LR__0900
0a500     0A 41 06 F6 | 	mov	local14, #266
0a504     08 42 06 F6 | 	mov	local15, #8
0a508     1C 00 90 FD | 	jmp	#LR__0904
0a50c                 | LR__0901
0a50c     0B 41 06 F6 | 	mov	local14, #267
0a510     04 42 06 F6 | 	mov	local15, #4
0a514     10 00 90 FD | 	jmp	#LR__0904
0a518                 | LR__0902
0a518     2F FA 05 F6 | 	mov	result1, #47
0a51c     08 01 90 FD | 	jmp	#LR__0905
0a520                 | LR__0903
0a520                 | '   return 46
0a520     2E FA 05 F6 | 	mov	result1, #46
0a524     00 01 90 FD | 	jmp	#LR__0905
0a528                 | LR__0904
0a528     13 43 02 FD | 	qmul	local15, local01
0a52c     18 32 62 FD | 	getqx	local07
0a530     14 33 02 FD | 	qmul	local07, local02
0a534     18 44 62 FD | 	getqx	local16
0a538     15 45 02 FD | 	qmul	local16, local03
0a53c     52 00 00 FF 
0a540     98 E4 05 F1 | 	add	objptr, ##42136
0a544     F2 46 02 FB | 	rdlong	local17, objptr
0a548     20 15 02 F6 | 	mov	arg02, local14
0a54c     18 44 62 FD | 	getqx	local16
0a550     22 47 82 F1 | 	sub	local17, local16
0a554     10 46 86 F1 | 	sub	local17, #16
0a558     0F 46 26 F5 | 	andn	local17, #15
0a55c     F2 46 62 FC | 	wrlong	local17, objptr
0a560     52 00 00 FF 
0a564     98 E4 85 F1 | 	sub	objptr, ##42136
0a568     23 13 02 F6 | 	mov	arg01, local17
0a56c     CC 91 B1 FD | 	call	#_psdpoke
0a570     23 13 02 F6 | 	mov	arg01, local17
0a574     02 12 06 F1 | 	add	arg01, #2
0a578     21 15 02 F6 | 	mov	arg02, local15
0a57c     BC 91 B1 FD | 	call	#_psdpoke
0a580     23 13 02 F6 | 	mov	arg01, local17
0a584     04 12 06 F1 | 	add	arg01, #4
0a588     13 15 02 F6 | 	mov	arg02, local01
0a58c     64 91 B1 FD | 	call	#_pslpoke
0a590     23 13 02 F6 | 	mov	arg01, local17
0a594     08 12 06 F1 | 	add	arg01, #8
0a598     14 15 02 F6 | 	mov	arg02, local02
0a59c     54 91 B1 FD | 	call	#_pslpoke
0a5a0     23 13 02 F6 | 	mov	arg01, local17
0a5a4     0C 12 06 F1 | 	add	arg01, #12
0a5a8     15 15 02 F6 | 	mov	arg02, local03
0a5ac     44 91 B1 FD | 	call	#_pslpoke
0a5b0     18 3D 02 F6 | 	mov	local12, local06
0a5b4     04 3C 66 F0 | 	shl	local12, #4
0a5b8     14 00 00 FF 
0a5bc     F8 E5 05 F1 | 	add	objptr, ##10744
0a5c0     F2 3C 02 F1 | 	add	local12, objptr
0a5c4     1E 2F 62 FC | 	wrlong	local05, local12
0a5c8     18 3D 02 F6 | 	mov	local12, local06
0a5cc     04 3C 66 F0 | 	shl	local12, #4
0a5d0     F2 3C 02 F1 | 	add	local12, objptr
0a5d4     04 3C 06 F1 | 	add	local12, #4
0a5d8     1E 47 62 FC | 	wrlong	local17, local12
0a5dc     18 3D 02 F6 | 	mov	local12, local06
0a5e0     04 3C 66 F0 | 	shl	local12, #4
0a5e4     F2 3C 02 F1 | 	add	local12, objptr
0a5e8     0C 3C 06 F1 | 	add	local12, #12
0a5ec     1E 41 62 FC | 	wrlong	local14, local12
0a5f0                 | ' memtop=arrayptr
0a5f0                 | ' psdpoke arrayptr,arraytype 
0a5f0                 | ' psdpoke arrayptr+2,esize 
0a5f0                 | ' pslpoke arrayptr+4,dims(0)
0a5f0                 | ' pslpoke arrayptr+8,dims(1)
0a5f0                 | ' pslpoke arrayptr+12,dims(2)
0a5f0                 | ' variables(j).name=varname2$
0a5f0                 | ' variables(j).value.uresult=arrayptr
0a5f0                 | ' variables(j).vartype=arraytype
0a5f0                 | ' if j=varnum then varnum+=1
0a5f0     20 00 00 FF 
0a5f4     10 E4 05 F1 | 	add	objptr, ##16400
0a5f8     F2 32 02 FB | 	rdlong	local07, objptr
0a5fc     35 00 00 FF 
0a600     08 E4 85 F1 | 	sub	objptr, ##27144
0a604     19 31 0A F2 | 	cmp	local06, local07 wz
0a608     35 00 00 AF 
0a60c     08 E4 05 A1 |  if_e	add	objptr, ##27144
0a610     F2 32 02 AB |  if_e	rdlong	local07, objptr
0a614     01 32 06 A1 |  if_e	add	local07, #1
0a618     F2 32 62 AC |  if_e	wrlong	local07, objptr
0a61c     35 00 00 AF 
0a620     08 E4 85 A1 |  if_e	sub	objptr, ##27144
0a624                 | ' return 0
0a624     00 FA 05 F6 | 	mov	result1, #0
0a628                 | LR__0905
0a628     A7 F0 03 F6 | 	mov	ptra, fp
0a62c     B2 00 A0 FD | 	call	#popregs_
0a630                 | _compile_dim_ret
0a630     2D 00 64 FD | 	ret
0a634                 | 
0a634                 | ' 
0a634                 | ' '----- compile 'for' command. 
0a634                 | ' 
0a634                 | ' function compile_for() as ulong  
0a634                 | _compile_for
0a634     0E 4A 05 F6 | 	mov	COUNT_, #14
0a638     A8 00 A0 FD | 	call	#pushregs_
0a63c                 | ' 
0a63c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a63c     37 00 00 FF 
0a640     44 E4 05 F1 | 	add	objptr, ##28228
0a644     F2 14 02 FB | 	rdlong	arg02, objptr
0a648     01 14 06 F1 | 	add	arg02, #1
0a64c     03 14 66 F0 | 	shl	arg02, #3
0a650     02 00 00 FF 
0a654     38 E4 85 F1 | 	sub	objptr, ##1080
0a658     F2 14 02 F1 | 	add	arg02, objptr
0a65c     0A 13 02 FB | 	rdlong	arg01, arg02
0a660     35 00 00 FF 
0a664     0C E4 85 F1 | 	sub	objptr, ##27148
0a668                 | ' 
0a668                 | ' select case s
0a668     B6 01 00 FF 
0a66c     B6 14 06 F6 | 	mov	arg02, ##@LR__5579
0a670     24 C9 B1 FD | 	call	#__system___string_cmp
0a674     00 FA 0D F2 | 	cmp	result1, #0 wz
0a678     1B FA 05 A6 |  if_e	mov	result1, #27
0a67c     00 FA 05 56 |  if_ne	mov	result1, #0
0a680     00 FA 0D F2 | 	cmp	result1, #0 wz
0a684     0C 00 90 AD |  if_e	jmp	#LR__0910
0a688     05 12 06 F6 | 	mov	arg01, #5
0a68c     A8 DB BF FD | 	call	#_compile_immediate_assign
0a690     08 00 90 FD | 	jmp	#LR__0911
0a694                 | LR__0910
0a694     20 FA 05 F6 | 	mov	result1, #32
0a698     58 08 90 FD | 	jmp	#LR__0927
0a69c                 | LR__0911
0a69c     4A 00 00 FF 
0a6a0     7C E4 05 F1 | 	add	objptr, ##38012
0a6a4     F2 14 02 FB | 	rdlong	arg02, objptr
0a6a8     0A 13 02 F6 | 	mov	arg01, arg02
0a6ac     01 12 86 F1 | 	sub	arg01, #1
0a6b0     09 2D 02 F6 | 	mov	local04, arg01
0a6b4     01 2C 66 F0 | 	shl	local04, #1
0a6b8     09 2D 02 F1 | 	add	local04, arg01
0a6bc     02 2C 66 F0 | 	shl	local04, #2
0a6c0     03 00 00 FF 
0a6c4     00 E4 85 F1 | 	sub	objptr, ##1536
0a6c8     F2 2C 02 F1 | 	add	local04, objptr
0a6cc     16 27 02 FB | 	rdlong	local01, local04
0a6d0     04 2C 06 F1 | 	add	local04, #4
0a6d4     16 2F 02 FB | 	rdlong	local05, local04
0a6d8     01 14 86 F1 | 	sub	arg02, #1
0a6dc     0A 2D 02 F6 | 	mov	local04, arg02
0a6e0     01 2C 66 F0 | 	shl	local04, #1
0a6e4     0A 2D 02 F1 | 	add	local04, arg02
0a6e8     02 2C 66 F0 | 	shl	local04, #2
0a6ec     F2 30 02 F6 | 	mov	local06, objptr
0a6f0     F2 2C 02 F1 | 	add	local04, objptr
0a6f4     08 2C 06 F1 | 	add	local04, #8
0a6f8     16 2D 02 FB | 	rdlong	local04, local04
0a6fc     17 29 02 F6 | 	mov	local02, local05
0a700     16 2B 02 F6 | 	mov	local03, local04
0a704                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a704     17 2A 0E F2 | 	cmp	local03, #23 wz
0a708     47 00 00 FF 
0a70c     7C E4 85 F1 | 	sub	objptr, ##36476
0a710     22 FA 05 56 |  if_ne	mov	result1, #34
0a714     DC 07 90 5D |  if_ne	jmp	#LR__0927
0a718     13 33 02 F6 | 	mov	local07, local01
0a71c                 | ' varnum=t1.result.uresult
0a71c                 | ' if lparts(ct).part$<>"to" then return 33
0a71c     37 00 00 FF 
0a720     44 E4 05 F1 | 	add	objptr, ##28228
0a724     F2 2C 02 FB | 	rdlong	local04, objptr
0a728     03 2C 66 F0 | 	shl	local04, #3
0a72c     02 00 00 FF 
0a730     38 E4 85 F1 | 	sub	objptr, ##1080
0a734     F2 2C 02 F1 | 	add	local04, objptr
0a738     16 13 02 FB | 	rdlong	arg01, local04
0a73c     B8 01 00 FF 
0a740     FC 15 06 F6 | 	mov	arg02, ##@LR__5861
0a744     35 00 00 FF 
0a748     0C E4 85 F1 | 	sub	objptr, ##27148
0a74c     48 C8 B1 FD | 	call	#__system___string_cmp
0a750     00 FA 0D F2 | 	cmp	result1, #0 wz
0a754     21 FA 05 56 |  if_ne	mov	result1, #33
0a758     98 07 90 5D |  if_ne	jmp	#LR__0927
0a75c     37 00 00 FF 
0a760     44 E4 05 F1 | 	add	objptr, ##28228
0a764     F2 34 02 FB | 	rdlong	local08, objptr
0a768     01 34 06 F1 | 	add	local08, #1
0a76c     F2 34 62 FC | 	wrlong	local08, objptr
0a770     37 00 00 FF 
0a774     44 E4 85 F1 | 	sub	objptr, ##28228
0a778     2C 17 B0 FD | 	call	#_expr
0a77c                 | ' ct+=1
0a77c                 | ' expr()  										' there is "to" value pushed on the stack
0a77c                 | ' if lparts(ct).part$="step" orelse left$(lparts(ct).part$,2)="s." then
0a77c     37 00 00 FF 
0a780     44 E4 05 F1 | 	add	objptr, ##28228
0a784     F2 2C 02 FB | 	rdlong	local04, objptr
0a788     03 2C 66 F0 | 	shl	local04, #3
0a78c     02 00 00 FF 
0a790     38 E4 85 F1 | 	sub	objptr, ##1080
0a794     F2 2C 02 F1 | 	add	local04, objptr
0a798     16 13 02 FB | 	rdlong	arg01, local04
0a79c     B8 01 00 FF 
0a7a0     FF 15 06 F6 | 	mov	arg02, ##@LR__5862
0a7a4     35 00 00 FF 
0a7a8     0C E4 85 F1 | 	sub	objptr, ##27148
0a7ac     E8 C7 B1 FD | 	call	#__system___string_cmp
0a7b0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a7b4     48 00 90 AD |  if_e	jmp	#LR__0912
0a7b8     37 00 00 FF 
0a7bc     44 E4 05 F1 | 	add	objptr, ##28228
0a7c0     F2 2C 02 FB | 	rdlong	local04, objptr
0a7c4     03 2C 66 F0 | 	shl	local04, #3
0a7c8     02 00 00 FF 
0a7cc     38 E4 85 F1 | 	sub	objptr, ##1080
0a7d0     F2 2C 02 F1 | 	add	local04, objptr
0a7d4     16 13 02 FB | 	rdlong	arg01, local04
0a7d8     02 14 06 F6 | 	mov	arg02, #2
0a7dc     35 00 00 FF 
0a7e0     0C E4 85 F1 | 	sub	objptr, ##27148
0a7e4     04 E8 B1 FD | 	call	#__system__Left_S
0a7e8     FD 12 02 F6 | 	mov	arg01, result1
0a7ec     B9 01 00 FF 
0a7f0     04 14 06 F6 | 	mov	arg02, ##@LR__5863
0a7f4     A0 C7 B1 FD | 	call	#__system___string_cmp
0a7f8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a7fc     9C 05 90 5D |  if_ne	jmp	#LR__0925
0a800                 | LR__0912
0a800                 | '   if left$(lparts(ct).part$,2)="s." andalso len(lparts(ct).part$)>2 then ' correct the part
0a800     37 00 00 FF 
0a804     44 E4 05 F1 | 	add	objptr, ##28228
0a808     F2 2C 02 FB | 	rdlong	local04, objptr
0a80c     03 2C 66 F0 | 	shl	local04, #3
0a810     02 00 00 FF 
0a814     38 E4 85 F1 | 	sub	objptr, ##1080
0a818     F2 2C 02 F1 | 	add	local04, objptr
0a81c     16 13 02 FB | 	rdlong	arg01, local04
0a820     02 14 06 F6 | 	mov	arg02, #2
0a824     35 00 00 FF 
0a828     0C E4 85 F1 | 	sub	objptr, ##27148
0a82c     BC E7 B1 FD | 	call	#__system__Left_S
0a830     FD 12 02 F6 | 	mov	arg01, result1
0a834     B9 01 00 FF 
0a838     07 14 06 F6 | 	mov	arg02, ##@LR__5864
0a83c     58 C7 B1 FD | 	call	#__system___string_cmp
0a840     00 FA 0D F2 | 	cmp	result1, #0 wz
0a844     30 05 90 5D |  if_ne	jmp	#LR__0924
0a848     37 00 00 FF 
0a84c     44 E4 05 F1 | 	add	objptr, ##28228
0a850     F2 2C 02 FB | 	rdlong	local04, objptr
0a854     03 2C 66 F0 | 	shl	local04, #3
0a858     02 00 00 FF 
0a85c     38 E4 85 F1 | 	sub	objptr, ##1080
0a860     F2 2C 02 F1 | 	add	local04, objptr
0a864     16 13 02 FB | 	rdlong	arg01, local04
0a868     35 00 00 FF 
0a86c     0C E4 85 F1 | 	sub	objptr, ##27148
0a870     09 37 02 F6 | 	mov	local09, arg01
0a874     97 06 48 FB | 	callpa	#(@LR__0914-@LR__0913)>>2,fcache_load_ptr_
0a878                 | LR__0913
0a878     1B FB C9 FA | 	rdbyte	result1, local09 wz
0a87c     01 36 06 51 |  if_ne	add	local09, #1
0a880     F4 FF 9F 5D |  if_ne	jmp	#LR__0913
0a884                 | LR__0914
0a884     09 37 82 F1 | 	sub	local09, arg01
0a888     03 36 56 F2 | 	cmps	local09, #3 wc
0a88c     E8 04 90 CD |  if_b	jmp	#LR__0924
0a890     37 00 00 FF 
0a894     44 E4 05 F1 | 	add	objptr, ##28228
0a898     F2 2C 02 FB | 	rdlong	local04, objptr
0a89c     16 39 02 F6 | 	mov	local10, local04
0a8a0     03 38 66 F0 | 	shl	local10, #3
0a8a4     02 00 00 FF 
0a8a8     38 E4 85 F1 | 	sub	objptr, ##1080
0a8ac     F2 38 02 F1 | 	add	local10, objptr
0a8b0     03 2C 66 F0 | 	shl	local04, #3
0a8b4     F2 2C 02 F1 | 	add	local04, objptr
0a8b8     16 2D 02 FB | 	rdlong	local04, local04
0a8bc     02 00 00 FF 
0a8c0     38 E4 05 F1 | 	add	objptr, ##1080
0a8c4     F2 12 02 FB | 	rdlong	arg01, objptr
0a8c8     03 12 66 F0 | 	shl	arg01, #3
0a8cc     02 00 00 FF 
0a8d0     38 E4 85 F1 | 	sub	objptr, ##1080
0a8d4     F2 12 02 F1 | 	add	arg01, objptr
0a8d8     09 13 02 FB | 	rdlong	arg01, arg01
0a8dc     35 00 00 FF 
0a8e0     0C E4 85 F1 | 	sub	objptr, ##27148
0a8e4     09 37 02 F6 | 	mov	local09, arg01
0a8e8     97 06 48 FB | 	callpa	#(@LR__0916-@LR__0915)>>2,fcache_load_ptr_
0a8ec                 | LR__0915
0a8ec     1B FB C9 FA | 	rdbyte	result1, local09 wz
0a8f0     01 36 06 51 |  if_ne	add	local09, #1
0a8f4     F4 FF 9F 5D |  if_ne	jmp	#LR__0915
0a8f8                 | LR__0916
0a8f8     09 37 82 F1 | 	sub	local09, arg01
0a8fc     1B 15 02 F6 | 	mov	arg02, local09
0a900     02 14 86 F1 | 	sub	arg02, #2
0a904     16 13 02 F6 | 	mov	arg01, local04
0a908     68 E7 B1 FD | 	call	#__system__Right_S
0a90c     1C FB 61 FC | 	wrlong	result1, local10
0a910     37 00 00 FF 
0a914     44 E4 05 F1 | 	add	objptr, ##28228
0a918     F2 2C 02 FB | 	rdlong	local04, objptr
0a91c     16 39 02 F6 | 	mov	local10, local04
0a920     03 38 66 F0 | 	shl	local10, #3
0a924     02 00 00 FF 
0a928     38 E4 85 F1 | 	sub	objptr, ##1080
0a92c     F2 38 02 F1 | 	add	local10, objptr
0a930     03 2C 66 F0 | 	shl	local04, #3
0a934     F2 2C 02 F1 | 	add	local04, objptr
0a938     16 13 02 FB | 	rdlong	arg01, local04
0a93c     35 00 00 FF 
0a940     0C E4 85 F1 | 	sub	objptr, ##27148
0a944     F4 B5 BF FD | 	call	#_isfunction
0a948     FD FA E1 F8 | 	getbyte	result1, result1, #0
0a94c     04 38 06 F1 | 	add	local10, #4
0a950     1C FB 61 FC | 	wrlong	result1, local10
0a954                 | '     lparts(ct).token=isfunction(lparts(ct).part$) : if lparts(ct).token>0 then goto 2102
0a954     37 00 00 FF 
0a958     44 E4 05 F1 | 	add	objptr, ##28228
0a95c     F2 38 02 FB | 	rdlong	local10, objptr
0a960     03 38 66 F0 | 	shl	local10, #3
0a964     02 00 00 FF 
0a968     38 E4 85 F1 | 	sub	objptr, ##1080
0a96c     F2 38 02 F1 | 	add	local10, objptr
0a970     04 38 06 F1 | 	add	local10, #4
0a974     1C 2D 02 FB | 	rdlong	local04, local10
0a978     01 2C 56 F2 | 	cmps	local04, #1 wc
0a97c     35 00 00 FF 
0a980     0C E4 85 F1 | 	sub	objptr, ##27148
0a984     D4 03 90 3D |  if_ae	jmp	#LR__0923
0a988     37 00 00 FF 
0a98c     44 E4 05 F1 | 	add	objptr, ##28228
0a990     F2 2C 02 FB | 	rdlong	local04, objptr
0a994     16 39 02 F6 | 	mov	local10, local04
0a998     03 38 66 F0 | 	shl	local10, #3
0a99c     02 00 00 FF 
0a9a0     38 E4 85 F1 | 	sub	objptr, ##1080
0a9a4     F2 38 02 F1 | 	add	local10, objptr
0a9a8     03 2C 66 F0 | 	shl	local04, #3
0a9ac     F2 2C 02 F1 | 	add	local04, objptr
0a9b0     16 13 02 FB | 	rdlong	arg01, local04
0a9b4     35 00 00 FF 
0a9b8     0C E4 85 F1 | 	sub	objptr, ##27148
0a9bc     10 9F BF FD | 	call	#_isnotename
0a9c0     04 38 06 F1 | 	add	local10, #4
0a9c4     1C FB 61 FC | 	wrlong	result1, local10
0a9c8                 | '     lparts(ct).token=isnotename(lparts(ct).part$) :
0a9c8                 | '     if lparts(ct).token>0 then 
0a9c8     37 00 00 FF 
0a9cc     44 E4 05 F1 | 	add	objptr, ##28228
0a9d0     F2 38 02 FB | 	rdlong	local10, objptr
0a9d4     03 38 66 F0 | 	shl	local10, #3
0a9d8     02 00 00 FF 
0a9dc     38 E4 85 F1 | 	sub	objptr, ##1080
0a9e0     F2 38 02 F1 | 	add	local10, objptr
0a9e4     04 38 06 F1 | 	add	local10, #4
0a9e8     1C 2D 02 FB | 	rdlong	local04, local10
0a9ec     01 2C 56 F2 | 	cmps	local04, #1 wc
0a9f0     35 00 00 FF 
0a9f4     0C E4 85 F1 | 	sub	objptr, ##27148
0a9f8     94 00 90 CD |  if_b	jmp	#LR__0917
0a9fc     37 00 00 FF 
0aa00     44 E4 05 F1 | 	add	objptr, ##28228
0aa04     F2 38 02 FB | 	rdlong	local10, objptr
0aa08     03 38 66 F0 | 	shl	local10, #3
0aa0c     02 00 00 FF 
0aa10     38 E4 85 F1 | 	sub	objptr, ##1080
0aa14     F2 38 02 F1 | 	add	local10, objptr
0aa18     04 38 06 F1 | 	add	local10, #4
0aa1c     1C 13 02 FB | 	rdlong	arg01, local10
0aa20     35 00 00 FF 
0aa24     0C E4 85 F1 | 	sub	objptr, ##27148
0aa28     B8 C6 BF FD | 	call	#_getnoteval
0aa2c     FD 12 02 F6 | 	mov	arg01, result1
0aa30     37 00 00 FF 
0aa34     44 E4 05 F1 | 	add	objptr, ##28228
0aa38     F2 38 02 FB | 	rdlong	local10, objptr
0aa3c     03 38 66 F0 | 	shl	local10, #3
0aa40     02 00 00 FF 
0aa44     38 E4 85 F1 | 	sub	objptr, ##1080
0aa48     F2 38 02 F1 | 	add	local10, objptr
0aa4c     35 00 00 FF 
0aa50     0C E4 85 F1 | 	sub	objptr, ##27148
0aa54     8C E7 B1 FD | 	call	#__system__str_S
0aa58     1C FB 61 FC | 	wrlong	result1, local10
0aa5c     37 00 00 FF 
0aa60     44 E4 05 F1 | 	add	objptr, ##28228
0aa64     F2 38 02 FB | 	rdlong	local10, objptr
0aa68     03 38 66 F0 | 	shl	local10, #3
0aa6c     02 00 00 FF 
0aa70     38 E4 85 F1 | 	sub	objptr, ##1080
0aa74     F2 38 02 F1 | 	add	local10, objptr
0aa78     04 38 06 F1 | 	add	local10, #4
0aa7c     01 00 80 FF 
0aa80     1C 05 68 FC | 	wrlong	##514, local10
0aa84     35 00 00 FF 
0aa88     0C E4 85 F1 | 	sub	objptr, ##27148
0aa8c     CC 02 90 FD | 	jmp	#LR__0923
0aa90                 | LR__0917
0aa90     37 00 00 FF 
0aa94     44 E4 05 F1 | 	add	objptr, ##28228
0aa98     F2 2C 02 FB | 	rdlong	local04, objptr
0aa9c     16 39 02 F6 | 	mov	local10, local04
0aaa0     03 38 66 F0 | 	shl	local10, #3
0aaa4     02 00 00 FF 
0aaa8     38 E4 85 F1 | 	sub	objptr, ##1080
0aaac     F2 38 02 F1 | 	add	local10, objptr
0aab0     03 2C 66 F0 | 	shl	local04, #3
0aab4     F2 2C 02 F1 | 	add	local04, objptr
0aab8     16 13 02 FB | 	rdlong	arg01, local04
0aabc     35 00 00 FF 
0aac0     0C E4 85 F1 | 	sub	objptr, ##27148
0aac4     88 9D BF FD | 	call	#_isconstant
0aac8     04 38 06 F1 | 	add	local10, #4
0aacc     1C FB 61 FC | 	wrlong	result1, local10
0aad0                 | '     lparts(ct).token=isconstant(lparts(ct).part$) : if lparts(ct).token>0 then lparts(ct).part$=str$(lparts(ct).token) : lparts(ct).token=token_integer : goto 2102
0aad0     37 00 00 FF 
0aad4     44 E4 05 F1 | 	add	objptr, ##28228
0aad8     F2 38 02 FB | 	rdlong	local10, objptr
0aadc     03 38 66 F0 | 	shl	local10, #3
0aae0     02 00 00 FF 
0aae4     38 E4 85 F1 | 	sub	objptr, ##1080
0aae8     F2 38 02 F1 | 	add	local10, objptr
0aaec     04 38 06 F1 | 	add	local10, #4
0aaf0     1C 2D 02 FB | 	rdlong	local04, local10
0aaf4     01 2C 56 F2 | 	cmps	local04, #1 wc
0aaf8     35 00 00 FF 
0aafc     0C E4 85 F1 | 	sub	objptr, ##27148
0ab00     8C 00 90 CD |  if_b	jmp	#LR__0918
0ab04     37 00 00 FF 
0ab08     44 E4 05 F1 | 	add	objptr, ##28228
0ab0c     F2 34 02 FB | 	rdlong	local08, objptr
0ab10     1A 39 02 F6 | 	mov	local10, local08
0ab14     03 38 66 F0 | 	shl	local10, #3
0ab18     02 00 00 FF 
0ab1c     38 E4 85 F1 | 	sub	objptr, ##1080
0ab20     F2 38 02 F1 | 	add	local10, objptr
0ab24     03 34 66 F0 | 	shl	local08, #3
0ab28     F2 34 02 F1 | 	add	local08, objptr
0ab2c     04 34 06 F1 | 	add	local08, #4
0ab30     1A 13 02 FB | 	rdlong	arg01, local08
0ab34     35 00 00 FF 
0ab38     0C E4 85 F1 | 	sub	objptr, ##27148
0ab3c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ab40     1F 3A C6 C9 |  if_b	decod	local11, #31
0ab44     00 3A 06 36 |  if_ae	mov	local11, #0
0ab48     98 EE B1 FD | 	call	#__system___float_fromuns
0ab4c     1D FB 61 F5 | 	xor	result1, local11
0ab50     FD 12 02 F6 | 	mov	arg01, result1
0ab54     8C E6 B1 FD | 	call	#__system__str_S
0ab58     1C FB 61 FC | 	wrlong	result1, local10
0ab5c     37 00 00 FF 
0ab60     44 E4 05 F1 | 	add	objptr, ##28228
0ab64     F2 38 02 FB | 	rdlong	local10, objptr
0ab68     03 38 66 F0 | 	shl	local10, #3
0ab6c     02 00 00 FF 
0ab70     38 E4 85 F1 | 	sub	objptr, ##1080
0ab74     F2 38 02 F1 | 	add	local10, objptr
0ab78     04 38 06 F1 | 	add	local10, #4
0ab7c     01 00 80 FF 
0ab80     1C 03 68 FC | 	wrlong	##513, local10
0ab84     35 00 00 FF 
0ab88     0C E4 85 F1 | 	sub	objptr, ##27148
0ab8c     CC 01 90 FD | 	jmp	#LR__0923
0ab90                 | LR__0918
0ab90     37 00 00 FF 
0ab94     44 E4 05 F1 | 	add	objptr, ##28228
0ab98     F2 38 02 FB | 	rdlong	local10, objptr
0ab9c     03 38 66 F0 | 	shl	local10, #3
0aba0     02 00 00 FF 
0aba4     38 E4 85 F1 | 	sub	objptr, ##1080
0aba8     F2 38 02 F1 | 	add	local10, objptr
0abac     1C 13 02 FB | 	rdlong	arg01, local10
0abb0     35 00 00 FF 
0abb4     0C E4 85 F1 | 	sub	objptr, ##27148
0abb8     74 BD BF FD | 	call	#_isnum
0abbc     FD 3C 02 F6 | 	mov	local12, result1
0abc0     37 00 00 FF 
0abc4     44 E4 05 F1 | 	add	objptr, ##28228
0abc8     F2 38 02 FB | 	rdlong	local10, objptr
0abcc     03 38 66 F0 | 	shl	local10, #3
0abd0     02 00 00 FF 
0abd4     38 E4 85 F1 | 	sub	objptr, ##1080
0abd8     F2 38 02 F1 | 	add	local10, objptr
0abdc     1C 13 02 FB | 	rdlong	arg01, local10
0abe0     35 00 00 FF 
0abe4     0C E4 85 F1 | 	sub	objptr, ##27148
0abe8     30 C1 BF FD | 	call	#_isint
0abec     FD 3E 02 F6 | 	mov	local13, result1
0abf0     37 00 00 FF 
0abf4     44 E4 05 F1 | 	add	objptr, ##28228
0abf8     F2 38 02 FB | 	rdlong	local10, objptr
0abfc     03 38 66 F0 | 	shl	local10, #3
0ac00     02 00 00 FF 
0ac04     38 E4 85 F1 | 	sub	objptr, ##1080
0ac08     F2 38 02 F1 | 	add	local10, objptr
0ac0c     1C 13 02 FB | 	rdlong	arg01, local10
0ac10     35 00 00 FF 
0ac14     0C E4 85 F1 | 	sub	objptr, ##27148
0ac18     A4 C3 BF FD | 	call	#_isdec
0ac1c     FD 40 02 F6 | 	mov	local14, result1
0ac20                 | '     b1=isnum(lparts(ct).part$) : b2=isint(lparts(ct).part$) : b3=isdec(lparts(ct).part$)
0ac20                 | '     if b1 andalso b2 andalso b3 then lparts(ct).token=token_decimal 			: goto 2102 	' pure decimal for line num
0ac20     00 3C 0E F2 | 	cmp	local12, #0 wz
0ac24     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0ac28     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0ac2c     34 00 90 AD |  if_e	jmp	#LR__0919
0ac30     37 00 00 FF 
0ac34     44 E4 05 F1 | 	add	objptr, ##28228
0ac38     F2 38 02 FB | 	rdlong	local10, objptr
0ac3c     03 38 66 F0 | 	shl	local10, #3
0ac40     02 00 00 FF 
0ac44     38 E4 85 F1 | 	sub	objptr, ##1080
0ac48     F2 38 02 F1 | 	add	local10, objptr
0ac4c     04 38 06 F1 | 	add	local10, #4
0ac50     01 00 80 FF 
0ac54     1C 01 68 FC | 	wrlong	##512, local10
0ac58     35 00 00 FF 
0ac5c     0C E4 85 F1 | 	sub	objptr, ##27148
0ac60     F8 00 90 FD | 	jmp	#LR__0923
0ac64                 | LR__0919
0ac64                 | '     if b1 andalso b2 andalso (not b3) then lparts(ct).token=token_integer 		: goto 2102 	' integer
0ac64     00 3C 0E F2 | 	cmp	local12, #0 wz
0ac68     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0ac6c     20 35 22 56 |  if_ne	not	local08, local14
0ac70     00 34 0E 52 |  if_ne	cmp	local08, #0 wz
0ac74     34 00 90 AD |  if_e	jmp	#LR__0920
0ac78     37 00 00 FF 
0ac7c     44 E4 05 F1 | 	add	objptr, ##28228
0ac80     F2 38 02 FB | 	rdlong	local10, objptr
0ac84     03 38 66 F0 | 	shl	local10, #3
0ac88     02 00 00 FF 
0ac8c     38 E4 85 F1 | 	sub	objptr, ##1080
0ac90     F2 38 02 F1 | 	add	local10, objptr
0ac94     04 38 06 F1 | 	add	local10, #4
0ac98     01 00 80 FF 
0ac9c     1C 03 68 FC | 	wrlong	##513, local10
0aca0     35 00 00 FF 
0aca4     0C E4 85 F1 | 	sub	objptr, ##27148
0aca8     B0 00 90 FD | 	jmp	#LR__0923
0acac                 | LR__0920
0acac                 | '     if b1 andalso (not b2) andalso (not b3) then lparts(ct).token=token_float 		: goto 2102 	' float
0acac     00 3C 0E F2 | 	cmp	local12, #0 wz
0acb0     1F 3F 22 56 |  if_ne	not	local13, local13
0acb4     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0acb8     20 41 22 56 |  if_ne	not	local14, local14
0acbc     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0acc0     34 00 90 AD |  if_e	jmp	#LR__0921
0acc4     37 00 00 FF 
0acc8     44 E4 05 F1 | 	add	objptr, ##28228
0accc     F2 38 02 FB | 	rdlong	local10, objptr
0acd0     03 38 66 F0 | 	shl	local10, #3
0acd4     02 00 00 FF 
0acd8     38 E4 85 F1 | 	sub	objptr, ##1080
0acdc     F2 38 02 F1 | 	add	local10, objptr
0ace0     04 38 06 F1 | 	add	local10, #4
0ace4     01 00 80 FF 
0ace8     1C 05 68 FC | 	wrlong	##514, local10
0acec     35 00 00 FF 
0acf0     0C E4 85 F1 | 	sub	objptr, ##27148
0acf4     64 00 90 FD | 	jmp	#LR__0923
0acf8                 | LR__0921
0acf8                 | '     if isname(lparts(ct).part$) then lparts(ct).token=token_name : goto 2102	
0acf8     37 00 00 FF 
0acfc     44 E4 05 F1 | 	add	objptr, ##28228
0ad00     F2 38 02 FB | 	rdlong	local10, objptr
0ad04     03 38 66 F0 | 	shl	local10, #3
0ad08     02 00 00 FF 
0ad0c     38 E4 85 F1 | 	sub	objptr, ##1080
0ad10     F2 38 02 F1 | 	add	local10, objptr
0ad14     1C 13 02 FB | 	rdlong	arg01, local10
0ad18     35 00 00 FF 
0ad1c     0C E4 85 F1 | 	sub	objptr, ##27148
0ad20     98 B9 BF FD | 	call	#_isname
0ad24     00 FA 0D F2 | 	cmp	result1, #0 wz
0ad28     30 00 90 AD |  if_e	jmp	#LR__0922
0ad2c     37 00 00 FF 
0ad30     44 E4 05 F1 | 	add	objptr, ##28228
0ad34     F2 38 02 FB | 	rdlong	local10, objptr
0ad38     03 38 66 F0 | 	shl	local10, #3
0ad3c     02 00 00 FF 
0ad40     38 E4 85 F1 | 	sub	objptr, ##1080
0ad44     F2 38 02 F1 | 	add	local10, objptr
0ad48     04 38 06 F1 | 	add	local10, #4
0ad4c     01 00 80 FF 
0ad50     1C 09 68 FC | 	wrlong	##516, local10
0ad54     35 00 00 FF 
0ad58     0C E4 85 F1 | 	sub	objptr, ##27148
0ad5c                 | LR__0922
0ad5c                 | LR__0923
0ad5c     37 00 00 FF 
0ad60     44 E4 05 F1 | 	add	objptr, ##28228
0ad64     F2 34 02 FB | 	rdlong	local08, objptr
0ad68     01 34 86 F1 | 	sub	local08, #1
0ad6c     F2 34 62 FC | 	wrlong	local08, objptr
0ad70     37 00 00 FF 
0ad74     44 E4 85 F1 | 	sub	objptr, ##28228
0ad78                 | LR__0924
0ad78     37 00 00 FF 
0ad7c     44 E4 05 F1 | 	add	objptr, ##28228
0ad80     F2 34 02 FB | 	rdlong	local08, objptr
0ad84     01 34 06 F1 | 	add	local08, #1
0ad88     F2 34 62 FC | 	wrlong	local08, objptr
0ad8c     37 00 00 FF 
0ad90     44 E4 85 F1 | 	sub	objptr, ##28228
0ad94     10 11 B0 FD | 	call	#_expr
0ad98     78 00 90 FD | 	jmp	#LR__0926
0ad9c                 | LR__0925
0ad9c     4A 00 00 FF 
0ada0     7C E4 05 F1 | 	add	objptr, ##38012
0ada4     F2 40 02 FB | 	rdlong	local14, objptr
0ada8     20 39 02 F6 | 	mov	local10, local14
0adac     01 38 66 F0 | 	shl	local10, #1
0adb0     20 39 02 F1 | 	add	local10, local14
0adb4     02 38 66 F0 | 	shl	local10, #2
0adb8     03 00 00 FF 
0adbc     00 E4 85 F1 | 	sub	objptr, ##1536
0adc0     F2 38 02 F1 | 	add	local10, objptr
0adc4     08 38 06 F1 | 	add	local10, #8
0adc8     1C 39 68 FC | 	wrlong	#28, local10
0adcc     03 00 00 FF 
0add0     00 E4 05 F1 | 	add	objptr, ##1536
0add4     F2 40 02 FB | 	rdlong	local14, objptr
0add8     20 39 02 F6 | 	mov	local10, local14
0addc     01 38 66 F0 | 	shl	local10, #1
0ade0     20 39 02 F1 | 	add	local10, local14
0ade4     02 38 66 F0 | 	shl	local10, #2
0ade8     03 00 00 FF 
0adec     00 E4 85 F1 | 	sub	objptr, ##1536
0adf0     F2 38 02 F1 | 	add	local10, objptr
0adf4     1C 03 68 FC | 	wrlong	#1, local10
0adf8     03 00 00 FF 
0adfc     00 E4 05 F1 | 	add	objptr, ##1536
0ae00     F2 34 02 FB | 	rdlong	local08, objptr
0ae04     01 34 06 F1 | 	add	local08, #1
0ae08     F2 34 62 FC | 	wrlong	local08, objptr
0ae0c     4A 00 00 FF 
0ae10     7C E4 85 F1 | 	sub	objptr, ##38012
0ae14                 | LR__0926
0ae14     4A 00 00 FF 
0ae18     7C E4 05 F1 | 	add	objptr, ##38012
0ae1c     F2 40 02 FB | 	rdlong	local14, objptr
0ae20     20 39 02 F6 | 	mov	local10, local14
0ae24     01 38 66 F0 | 	shl	local10, #1
0ae28     20 39 02 F1 | 	add	local10, local14
0ae2c     02 38 66 F0 | 	shl	local10, #2
0ae30     03 00 00 FF 
0ae34     00 E4 85 F1 | 	sub	objptr, ##1536
0ae38     F2 38 02 F1 | 	add	local10, objptr
0ae3c     08 38 06 F1 | 	add	local10, #8
0ae40     1C 39 68 FC | 	wrlong	#28, local10
0ae44     03 00 00 FF 
0ae48     00 E4 05 F1 | 	add	objptr, ##1536
0ae4c     F2 40 02 FB | 	rdlong	local14, objptr
0ae50     20 39 02 F6 | 	mov	local10, local14
0ae54     01 38 66 F0 | 	shl	local10, #1
0ae58     20 39 02 F1 | 	add	local10, local14
0ae5c     02 38 66 F0 | 	shl	local10, #2
0ae60     03 00 00 FF 
0ae64     00 E4 85 F1 | 	sub	objptr, ##1536
0ae68     F2 38 02 F1 | 	add	local10, objptr
0ae6c     1C 33 62 FC | 	wrlong	local07, local10
0ae70     03 00 00 FF 
0ae74     00 E4 05 F1 | 	add	objptr, ##1536
0ae78     F2 40 02 FB | 	rdlong	local14, objptr
0ae7c     01 40 06 F1 | 	add	local14, #1
0ae80     F2 40 62 FC | 	wrlong	local14, objptr
0ae84     20 39 02 F6 | 	mov	local10, local14
0ae88     01 38 66 F0 | 	shl	local10, #1
0ae8c     20 39 02 F1 | 	add	local10, local14
0ae90     02 38 66 F0 | 	shl	local10, #2
0ae94     03 00 00 FF 
0ae98     00 E4 85 F1 | 	sub	objptr, ##1536
0ae9c     F2 38 02 F1 | 	add	local10, objptr
0aea0     08 38 06 F1 | 	add	local10, #8
0aea4     1C 95 68 FC | 	wrlong	#74, local10
0aea8     03 00 00 FF 
0aeac     00 E4 05 F1 | 	add	objptr, ##1536
0aeb0     F2 40 02 FB | 	rdlong	local14, objptr
0aeb4     20 39 02 F6 | 	mov	local10, local14
0aeb8     01 38 66 F0 | 	shl	local10, #1
0aebc     20 39 02 F1 | 	add	local10, local14
0aec0     02 38 66 F0 | 	shl	local10, #2
0aec4     03 00 00 FF 
0aec8     00 E4 85 F1 | 	sub	objptr, ##1536
0aecc     F2 38 02 F1 | 	add	local10, objptr
0aed0     1C 01 68 FC | 	wrlong	#0, local10
0aed4     03 00 00 FF 
0aed8     00 E4 05 F1 | 	add	objptr, ##1536
0aedc     F2 34 02 FB | 	rdlong	local08, objptr
0aee0     01 34 06 F1 | 	add	local08, #1
0aee4     F2 34 62 FC | 	wrlong	local08, objptr
0aee8     4A 00 00 FF 
0aeec     7C E4 85 F1 | 	sub	objptr, ##38012
0aef0                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0aef0                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0aef0                 | ' return 0
0aef0     00 FA 05 F6 | 	mov	result1, #0
0aef4                 | LR__0927
0aef4     A7 F0 03 F6 | 	mov	ptra, fp
0aef8     B2 00 A0 FD | 	call	#popregs_
0aefc                 | _compile_for_ret
0aefc     2D 00 64 FD | 	ret
0af00                 | 
0af00                 | ' 
0af00                 | ' '----- compile 'next' command. 
0af00                 | ' 
0af00                 | ' function compile_next() as ulong
0af00                 | _compile_next
0af00     04 4A 05 F6 | 	mov	COUNT_, #4
0af04     A8 00 A0 FD | 	call	#pushregs_
0af08     37 00 00 FF 
0af0c     44 E4 05 F1 | 	add	objptr, ##28228
0af10     F2 14 02 FB | 	rdlong	arg02, objptr
0af14     03 14 66 F0 | 	shl	arg02, #3
0af18     02 00 00 FF 
0af1c     38 E4 85 F1 | 	sub	objptr, ##1080
0af20     F2 14 02 F1 | 	add	arg02, objptr
0af24     0A 27 02 FB | 	rdlong	local01, arg02
0af28                 | ' 
0af28                 | ' varname$=lparts(ct).part$ 
0af28                 | ' if varnum=0 then return 35
0af28     04 E4 85 F1 | 	sub	objptr, #4
0af2c     F2 14 0A FB | 	rdlong	arg02, objptr wz
0af30     35 00 00 FF 
0af34     08 E4 85 F1 | 	sub	objptr, ##27144
0af38     23 FA 05 A6 |  if_e	mov	result1, #35
0af3c     4C 01 90 AD |  if_e	jmp	#LR__0932
0af40     01 28 66 F6 | 	neg	local02, #1
0af44                 | ' j=-1
0af44                 | ' for i=0 to varnum-1
0af44     00 2A 06 F6 | 	mov	local03, #0
0af48     35 00 00 FF 
0af4c     08 E4 05 F1 | 	add	objptr, ##27144
0af50     F2 2C 02 FB | 	rdlong	local04, objptr
0af54     35 00 00 FF 
0af58     08 E4 85 F1 | 	sub	objptr, ##27144
0af5c                 | LR__0930
0af5c     16 2B 12 F2 | 	cmp	local03, local04 wc
0af60     38 00 90 3D |  if_ae	jmp	#LR__0931
0af64                 | '   if variables(i).name=varname$ then j=i : exit
0af64     15 15 02 F6 | 	mov	arg02, local03
0af68     04 14 66 F0 | 	shl	arg02, #4
0af6c     14 00 00 FF 
0af70     F8 E5 05 F1 | 	add	objptr, ##10744
0af74     F2 14 02 F1 | 	add	arg02, objptr
0af78     0A 13 02 FB | 	rdlong	arg01, arg02
0af7c     13 15 02 F6 | 	mov	arg02, local01
0af80     14 00 00 FF 
0af84     F8 E5 85 F1 | 	sub	objptr, ##10744
0af88     0C C0 B1 FD | 	call	#__system___string_cmp
0af8c     00 FA 0D F2 | 	cmp	result1, #0 wz
0af90     15 29 02 A6 |  if_e	mov	local02, local03
0af94     01 2A 06 51 |  if_ne	add	local03, #1
0af98     C0 FF 9F 5D |  if_ne	jmp	#LR__0930
0af9c                 | LR__0931
0af9c                 | ' if j=-1 then return 35
0af9c     FF FF 7F FF 
0afa0     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0afa4     23 FA 05 A6 |  if_e	mov	result1, #35
0afa8     E0 00 90 AD |  if_e	jmp	#LR__0932
0afac     4A 00 00 FF 
0afb0     7C E4 05 F1 | 	add	objptr, ##38012
0afb4     F2 2C 02 FB | 	rdlong	local04, objptr
0afb8     16 2B 02 F6 | 	mov	local03, local04
0afbc     01 2A 66 F0 | 	shl	local03, #1
0afc0     16 2B 02 F1 | 	add	local03, local04
0afc4     02 2A 66 F0 | 	shl	local03, #2
0afc8     03 00 00 FF 
0afcc     00 E4 85 F1 | 	sub	objptr, ##1536
0afd0     F2 2A 02 F1 | 	add	local03, objptr
0afd4     08 2A 06 F1 | 	add	local03, #8
0afd8     15 39 68 FC | 	wrlong	#28, local03
0afdc     03 00 00 FF 
0afe0     00 E4 05 F1 | 	add	objptr, ##1536
0afe4     F2 2C 02 FB | 	rdlong	local04, objptr
0afe8     16 2B 02 F6 | 	mov	local03, local04
0afec     01 2A 66 F0 | 	shl	local03, #1
0aff0     16 2B 02 F1 | 	add	local03, local04
0aff4     02 2A 66 F0 | 	shl	local03, #2
0aff8     03 00 00 FF 
0affc     00 E4 85 F1 | 	sub	objptr, ##1536
0b000     F2 2A 02 F1 | 	add	local03, objptr
0b004     15 29 62 FC | 	wrlong	local02, local03
0b008     03 00 00 FF 
0b00c     00 E4 05 F1 | 	add	objptr, ##1536
0b010     F2 2C 02 FB | 	rdlong	local04, objptr
0b014     01 2C 06 F1 | 	add	local04, #1
0b018     F2 2C 62 FC | 	wrlong	local04, objptr
0b01c     16 2B 02 F6 | 	mov	local03, local04
0b020     01 2A 66 F0 | 	shl	local03, #1
0b024     16 2B 02 F1 | 	add	local03, local04
0b028     02 2A 66 F0 | 	shl	local03, #2
0b02c     03 00 00 FF 
0b030     00 E4 85 F1 | 	sub	objptr, ##1536
0b034     F2 2A 02 F1 | 	add	local03, objptr
0b038     08 2A 06 F1 | 	add	local03, #8
0b03c     15 97 68 FC | 	wrlong	#75, local03
0b040     03 00 00 FF 
0b044     00 E4 05 F1 | 	add	objptr, ##1536
0b048     F2 2C 02 FB | 	rdlong	local04, objptr
0b04c     16 2B 02 F6 | 	mov	local03, local04
0b050     01 2A 66 F0 | 	shl	local03, #1
0b054     16 2B 02 F1 | 	add	local03, local04
0b058     02 2A 66 F0 | 	shl	local03, #2
0b05c     03 00 00 FF 
0b060     00 E4 85 F1 | 	sub	objptr, ##1536
0b064     F2 2A 02 F1 | 	add	local03, objptr
0b068     15 01 68 FC | 	wrlong	#0, local03
0b06c     03 00 00 FF 
0b070     00 E4 05 F1 | 	add	objptr, ##1536
0b074     F2 2C 02 FB | 	rdlong	local04, objptr
0b078     01 2C 06 F1 | 	add	local04, #1
0b07c     F2 2C 62 FC | 	wrlong	local04, objptr
0b080     4A 00 00 FF 
0b084     7C E4 85 F1 | 	sub	objptr, ##38012
0b088                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0b088                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0b088                 | ' return 0
0b088     00 FA 05 F6 | 	mov	result1, #0
0b08c                 | LR__0932
0b08c     A7 F0 03 F6 | 	mov	ptra, fp
0b090     B2 00 A0 FD | 	call	#popregs_
0b094                 | _compile_next_ret
0b094     2D 00 64 FD | 	ret
0b098                 | 
0b098                 | ' 
0b098                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0b098                 | ' 
0b098                 | ' function compile_gosub() as ulong
0b098                 | _compile_gosub
0b098     02 4A 05 F6 | 	mov	COUNT_, #2
0b09c     A8 00 A0 FD | 	call	#pushregs_
0b0a0     4A 00 00 FF 
0b0a4     7C E4 05 F1 | 	add	objptr, ##38012
0b0a8     F2 26 02 FB | 	rdlong	local01, objptr
0b0ac     13 29 02 F6 | 	mov	local02, local01
0b0b0     01 28 66 F0 | 	shl	local02, #1
0b0b4     13 29 02 F1 | 	add	local02, local01
0b0b8     02 28 66 F0 | 	shl	local02, #2
0b0bc     03 00 00 FF 
0b0c0     00 E4 85 F1 | 	sub	objptr, ##1536
0b0c4     F2 28 02 F1 | 	add	local02, objptr
0b0c8     08 28 06 F1 | 	add	local02, #8
0b0cc     14 53 69 FC | 	wrlong	#169, local02
0b0d0     03 00 00 FF 
0b0d4     00 E4 05 F1 | 	add	objptr, ##1536
0b0d8     F2 28 02 FB | 	rdlong	local02, objptr
0b0dc     01 28 06 F1 | 	add	local02, #1
0b0e0     F2 28 62 FC | 	wrlong	local02, objptr
0b0e4     4A 00 00 FF 
0b0e8     7C E4 85 F1 | 	sub	objptr, ##38012
0b0ec     0C 00 B0 FD | 	call	#_compile_goto
0b0f0                 | ' compiledline(lineptr).result_type=token_gosub
0b0f0                 | ' lineptr+=1
0b0f0                 | ' err=compile_goto()
0b0f0                 | ' return err
0b0f0     A7 F0 03 F6 | 	mov	ptra, fp
0b0f4     B2 00 A0 FD | 	call	#popregs_
0b0f8                 | _compile_gosub_ret
0b0f8     2D 00 64 FD | 	ret
0b0fc                 | 
0b0fc                 | ' 
0b0fc                 | ' '----- compile 'goto' 
0b0fc                 | ' 
0b0fc                 | ' function compile_goto() as ulong
0b0fc                 | _compile_goto
0b0fc     03 4A 05 F6 | 	mov	COUNT_, #3
0b100     A8 00 A0 FD | 	call	#pushregs_
0b104     34 F0 07 F1 | 	add	ptra, #52
0b108                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0b108     37 00 00 FF 
0b10c     44 E4 05 F1 | 	add	objptr, ##28228
0b110     F2 16 02 FB | 	rdlong	arg03, objptr
0b114     03 16 66 F0 | 	shl	arg03, #3
0b118     02 00 00 FF 
0b11c     38 E4 85 F1 | 	sub	objptr, ##1080
0b120     F2 16 02 F1 | 	add	arg03, objptr
0b124     04 16 06 F1 | 	add	arg03, #4
0b128     0B 17 02 FB | 	rdlong	arg03, arg03
0b12c     01 00 00 FF 
0b130     00 16 0E F2 | 	cmp	arg03, ##512 wz
0b134     35 00 00 FF 
0b138     0C E4 85 F1 | 	sub	objptr, ##27148
0b13c     CC 02 90 5D |  if_ne	jmp	#LR__0945
0b140     37 00 00 FF 
0b144     44 E4 05 F1 | 	add	objptr, ##28228
0b148     F2 16 02 FB | 	rdlong	arg03, objptr
0b14c     01 16 06 F1 | 	add	arg03, #1
0b150     03 16 66 F0 | 	shl	arg03, #3
0b154     02 00 00 FF 
0b158     38 E4 85 F1 | 	sub	objptr, ##1080
0b15c     F2 16 02 F1 | 	add	arg03, objptr
0b160     04 16 06 F1 | 	add	arg03, #4
0b164     0B 17 02 FB | 	rdlong	arg03, arg03
0b168     FE 17 0E F2 | 	cmp	arg03, #510 wz
0b16c     35 00 00 FF 
0b170     0C E4 85 F1 | 	sub	objptr, ##27148
0b174     94 02 90 5D |  if_ne	jmp	#LR__0945
0b178     37 00 00 FF 
0b17c     44 E4 05 F1 | 	add	objptr, ##28228
0b180     F2 16 02 FB | 	rdlong	arg03, objptr
0b184     03 16 66 F0 | 	shl	arg03, #3
0b188     02 00 00 FF 
0b18c     38 E4 85 F1 | 	sub	objptr, ##1080
0b190     F2 16 02 F1 | 	add	arg03, objptr
0b194     0B 13 02 FB | 	rdlong	arg01, arg03
0b198     00 14 06 F6 | 	mov	arg02, #0
0b19c     35 00 00 FF 
0b1a0     0C E4 85 F1 | 	sub	objptr, ##27148
0b1a4     B8 F2 B1 FD | 	call	#__system____builtin_atoi
0b1a8     04 4E 05 F1 | 	add	fp, #4
0b1ac     A7 FA 61 FC | 	wrlong	result1, fp
0b1b0     4A 00 00 FF 
0b1b4     7C E4 05 F1 | 	add	objptr, ##38012
0b1b8     F2 26 02 FB | 	rdlong	local01, objptr
0b1bc     13 29 02 F6 | 	mov	local02, local01
0b1c0     01 28 66 F0 | 	shl	local02, #1
0b1c4     13 29 02 F1 | 	add	local02, local01
0b1c8     02 28 66 F0 | 	shl	local02, #2
0b1cc     03 00 00 FF 
0b1d0     00 E4 85 F1 | 	sub	objptr, ##1536
0b1d4     F2 28 02 F1 | 	add	local02, objptr
0b1d8     08 28 06 F1 | 	add	local02, #8
0b1dc     14 9D 68 FC | 	wrlong	#78, local02
0b1e0     03 00 00 FF 
0b1e4     0C E4 05 F1 | 	add	objptr, ##1548
0b1e8     F2 2A 02 FB | 	rdlong	local03, objptr
0b1ec     4A 00 00 FF 
0b1f0     88 E4 85 F1 | 	sub	objptr, ##38024
0b1f4     04 4E 05 F1 | 	add	fp, #4
0b1f8     A7 2A 62 FC | 	wrlong	local03, fp
0b1fc     08 4E 85 F1 | 	sub	fp, #8
0b200                 | '   gotoline=val%(lparts(ct).part$) 
0b200                 | '   compiledline(lineptr).result_type=token_fast_goto
0b200                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0b200                 | '   do
0b200                 | LR__0940
0b200     10 4E 05 F1 | 	add	fp, #16
0b204     A7 12 02 F6 | 	mov	arg01, fp
0b208     08 4E 85 F1 | 	sub	fp, #8
0b20c     A7 14 02 FB | 	rdlong	arg02, fp
0b210     08 4E 85 F1 | 	sub	fp, #8
0b214     18 16 06 F6 | 	mov	arg03, #24
0b218     0B 00 00 FF 
0b21c     CC E4 05 F1 | 	add	objptr, ##5836
0b220     C4 B0 B1 FD | 	call	#_psram_spin2_read1
0b224     0B 00 00 FF 
0b228     CC E4 85 F1 | 	sub	objptr, ##5836
0b22c                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0b22c                 | '     if gotoheader(0)<>$FFFFFFFF then
0b22c     10 4E 05 F1 | 	add	fp, #16
0b230     A7 2A 02 FB | 	rdlong	local03, fp
0b234     10 4E 85 F1 | 	sub	fp, #16
0b238     FF FF 7F FF 
0b23c     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
0b240     24 00 90 AD |  if_e	jmp	#LR__0941
0b244     08 4E 05 F1 | 	add	fp, #8
0b248     A7 2A 02 FB | 	rdlong	local03, fp
0b24c     04 4E 05 F1 | 	add	fp, #4
0b250     A7 2A 62 FC | 	wrlong	local03, fp
0b254     18 4E 05 F1 | 	add	fp, #24
0b258     A7 2A 02 FB | 	rdlong	local03, fp
0b25c     1C 4E 85 F1 | 	sub	fp, #28
0b260     A7 2A 62 FC | 	wrlong	local03, fp
0b264     08 4E 85 F1 | 	sub	fp, #8
0b268                 | LR__0941
0b268     24 4E 05 F1 | 	add	fp, #36
0b26c     A7 2A 02 FB | 	rdlong	local03, fp
0b270     24 4E 85 F1 | 	sub	fp, #36
0b274     FF FF 3F FF 
0b278     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0b27c     10 4E 05 51 |  if_ne	add	fp, #16
0b280     A7 26 02 5B |  if_ne	rdlong	local01, fp
0b284     10 4E 85 51 |  if_ne	sub	fp, #16
0b288     FF FF 7F 5F 
0b28c     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
0b290     1C 00 90 AD |  if_e	jmp	#LR__0942
0b294     10 4E 05 F1 | 	add	fp, #16
0b298     A7 2A 02 FB | 	rdlong	local03, fp
0b29c     0C 4E 85 F1 | 	sub	fp, #12
0b2a0     A7 28 02 FB | 	rdlong	local02, fp
0b2a4     04 4E 85 F1 | 	sub	fp, #4
0b2a8     14 2B 0A F2 | 	cmp	local03, local02 wz
0b2ac     50 FF 9F 5D |  if_ne	jmp	#LR__0940
0b2b0                 | LR__0942
0b2b0                 | '   if gotoheader(0)=gotoline then
0b2b0     10 4E 05 F1 | 	add	fp, #16
0b2b4     A7 2A 02 FB | 	rdlong	local03, fp
0b2b8     0C 4E 85 F1 | 	sub	fp, #12
0b2bc     A7 26 02 FB | 	rdlong	local01, fp
0b2c0     04 4E 85 F1 | 	sub	fp, #4
0b2c4     13 2B 0A F2 | 	cmp	local03, local01 wz
0b2c8     7C 00 90 5D |  if_ne	jmp	#LR__0943
0b2cc     4A 00 00 FF 
0b2d0     7C E4 05 F1 | 	add	objptr, ##38012
0b2d4     F2 26 02 FB | 	rdlong	local01, objptr
0b2d8     13 29 02 F6 | 	mov	local02, local01
0b2dc     01 28 66 F0 | 	shl	local02, #1
0b2e0     13 29 02 F1 | 	add	local02, local01
0b2e4     02 28 66 F0 | 	shl	local02, #2
0b2e8     03 00 00 FF 
0b2ec     00 E4 85 F1 | 	sub	objptr, ##1536
0b2f0     F2 28 02 F1 | 	add	local02, objptr
0b2f4     0C 4E 05 F1 | 	add	fp, #12
0b2f8     A7 2A 02 FB | 	rdlong	local03, fp
0b2fc     14 2B 62 FC | 	wrlong	local03, local02
0b300     03 00 00 FF 
0b304     00 E4 05 F1 | 	add	objptr, ##1536
0b308     F2 26 02 FB | 	rdlong	local01, objptr
0b30c     13 29 02 F6 | 	mov	local02, local01
0b310     01 28 66 F0 | 	shl	local02, #1
0b314     13 29 02 F1 | 	add	local02, local01
0b318     02 28 66 F0 | 	shl	local02, #2
0b31c     03 00 00 FF 
0b320     00 E4 85 F1 | 	sub	objptr, ##1536
0b324     F2 28 02 F1 | 	add	local02, objptr
0b328     08 4E 85 F1 | 	sub	fp, #8
0b32c     A7 2A 02 FB | 	rdlong	local03, fp
0b330     04 4E 85 F1 | 	sub	fp, #4
0b334     04 28 06 F1 | 	add	local02, #4
0b338     14 2B 62 FC | 	wrlong	local03, local02
0b33c     47 00 00 FF 
0b340     7C E4 85 F1 | 	sub	objptr, ##36476
0b344     A4 00 90 FD | 	jmp	#LR__0944
0b348                 | LR__0943
0b348     4A 00 00 FF 
0b34c     7C E4 05 F1 | 	add	objptr, ##38012
0b350     F2 26 02 FB | 	rdlong	local01, objptr
0b354     13 29 02 F6 | 	mov	local02, local01
0b358     01 28 66 F0 | 	shl	local02, #1
0b35c     13 29 02 F1 | 	add	local02, local01
0b360     02 28 66 F0 | 	shl	local02, #2
0b364     03 00 00 FF 
0b368     00 E4 85 F1 | 	sub	objptr, ##1536
0b36c     F2 28 02 F1 | 	add	local02, objptr
0b370     00 00 C0 FF 
0b374     14 01 68 FC | 	wrlong	##-2147483648, local02
0b378     03 00 00 FF 
0b37c     00 E4 05 F1 | 	add	objptr, ##1536
0b380     F2 26 02 FB | 	rdlong	local01, objptr
0b384     13 29 02 F6 | 	mov	local02, local01
0b388     01 28 66 F0 | 	shl	local02, #1
0b38c     13 29 02 F1 | 	add	local02, local01
0b390     02 28 66 F0 | 	shl	local02, #2
0b394     03 00 00 FF 
0b398     00 E4 85 F1 | 	sub	objptr, ##1536
0b39c     F2 28 02 F1 | 	add	local02, objptr
0b3a0     04 4E 05 F1 | 	add	fp, #4
0b3a4     A7 2A 02 FB | 	rdlong	local03, fp
0b3a8     04 4E 85 F1 | 	sub	fp, #4
0b3ac     04 28 06 F1 | 	add	local02, #4
0b3b0     14 2B 62 FC | 	wrlong	local03, local02
0b3b4     03 00 00 FF 
0b3b8     00 E4 05 F1 | 	add	objptr, ##1536
0b3bc     F2 26 02 FB | 	rdlong	local01, objptr
0b3c0     13 29 02 F6 | 	mov	local02, local01
0b3c4     01 28 66 F0 | 	shl	local02, #1
0b3c8     13 29 02 F1 | 	add	local02, local01
0b3cc     02 28 66 F0 | 	shl	local02, #2
0b3d0     03 00 00 FF 
0b3d4     00 E4 85 F1 | 	sub	objptr, ##1536
0b3d8     F2 28 02 F1 | 	add	local02, objptr
0b3dc     08 28 06 F1 | 	add	local02, #8
0b3e0     14 A7 68 FC | 	wrlong	#83, local02
0b3e4     47 00 00 FF 
0b3e8     7C E4 85 F1 | 	sub	objptr, ##36476
0b3ec                 | LR__0944
0b3ec     4A 00 00 FF 
0b3f0     7C E4 05 F1 | 	add	objptr, ##38012
0b3f4     F2 2A 02 FB | 	rdlong	local03, objptr
0b3f8     01 2A 06 F1 | 	add	local03, #1
0b3fc     F2 2A 62 FC | 	wrlong	local03, objptr
0b400     4A 00 00 FF 
0b404     7C E4 85 F1 | 	sub	objptr, ##38012
0b408     D0 00 90 FD | 	jmp	#LR__0946
0b40c                 | LR__0945
0b40c     98 0A B0 FD | 	call	#_expr
0b410     30 4E 05 F1 | 	add	fp, #48
0b414     A7 9E 68 FC | 	wrlong	#79, fp
0b418     08 4E 85 F1 | 	sub	fp, #8
0b41c     A7 00 68 FC | 	wrlong	#0, fp
0b420     04 4E 05 F1 | 	add	fp, #4
0b424     A7 2A 02 FB | 	rdlong	local03, fp
0b428     04 4E 05 F1 | 	add	fp, #4
0b42c     A7 26 02 FB | 	rdlong	local01, fp
0b430     30 4E 85 F1 | 	sub	fp, #48
0b434     4A 00 00 FF 
0b438     7C E4 05 F1 | 	add	objptr, ##38012
0b43c     F2 28 02 FB | 	rdlong	local02, objptr
0b440     14 17 02 F6 | 	mov	arg03, local02
0b444     01 16 66 F0 | 	shl	arg03, #1
0b448     14 17 02 F1 | 	add	arg03, local02
0b44c     02 16 66 F0 | 	shl	arg03, #2
0b450     03 00 00 FF 
0b454     00 E4 85 F1 | 	sub	objptr, ##1536
0b458     F2 16 02 F1 | 	add	arg03, objptr
0b45c     0B 01 68 FC | 	wrlong	#0, arg03
0b460     03 00 00 FF 
0b464     00 E4 05 F1 | 	add	objptr, ##1536
0b468     F2 28 02 FB | 	rdlong	local02, objptr
0b46c     14 17 02 F6 | 	mov	arg03, local02
0b470     01 16 66 F0 | 	shl	arg03, #1
0b474     14 17 02 F1 | 	add	arg03, local02
0b478     02 16 66 F0 | 	shl	arg03, #2
0b47c     03 00 00 FF 
0b480     00 E4 85 F1 | 	sub	objptr, ##1536
0b484     F2 16 02 F1 | 	add	arg03, objptr
0b488     04 16 06 F1 | 	add	arg03, #4
0b48c     0B 2B 62 FC | 	wrlong	local03, arg03
0b490     03 00 00 FF 
0b494     00 E4 05 F1 | 	add	objptr, ##1536
0b498     F2 2A 02 FB | 	rdlong	local03, objptr
0b49c     15 29 02 F6 | 	mov	local02, local03
0b4a0     01 28 66 F0 | 	shl	local02, #1
0b4a4     15 29 02 F1 | 	add	local02, local03
0b4a8     02 28 66 F0 | 	shl	local02, #2
0b4ac     03 00 00 FF 
0b4b0     00 E4 85 F1 | 	sub	objptr, ##1536
0b4b4     F2 28 02 F1 | 	add	local02, objptr
0b4b8     08 28 06 F1 | 	add	local02, #8
0b4bc     14 27 62 FC | 	wrlong	local01, local02
0b4c0     03 00 00 FF 
0b4c4     00 E4 05 F1 | 	add	objptr, ##1536
0b4c8     F2 2A 02 FB | 	rdlong	local03, objptr
0b4cc     01 2A 06 F1 | 	add	local03, #1
0b4d0     F2 2A 62 FC | 	wrlong	local03, objptr
0b4d4     4A 00 00 FF 
0b4d8     7C E4 85 F1 | 	sub	objptr, ##38012
0b4dc                 | LR__0946
0b4dc                 | ' return 0
0b4dc     00 FA 05 F6 | 	mov	result1, #0
0b4e0     A7 F0 03 F6 | 	mov	ptra, fp
0b4e4     B2 00 A0 FD | 	call	#popregs_
0b4e8                 | _compile_goto_ret
0b4e8     2D 00 64 FD | 	ret
0b4ec                 | 
0b4ec                 | ' 
0b4ec                 | ' '----- compile 'on' (on..goto, on..gosub) 
0b4ec                 | ' 
0b4ec                 | ' function compile_on() as ulong
0b4ec                 | _compile_on
0b4ec     04 4A 05 F6 | 	mov	COUNT_, #4
0b4f0     A8 00 A0 FD | 	call	#pushregs_
0b4f4     B0 09 B0 FD | 	call	#_expr
0b4f8     00 26 06 F6 | 	mov	local01, #0
0b4fc     4A 00 00 FF 
0b500     7C E4 05 F1 | 	add	objptr, ##38012
0b504     F2 14 02 FB | 	rdlong	arg02, objptr
0b508     0A 13 02 F6 | 	mov	arg01, arg02
0b50c     01 12 66 F0 | 	shl	arg01, #1
0b510     0A 13 02 F1 | 	add	arg01, arg02
0b514     02 12 66 F0 | 	shl	arg01, #2
0b518     03 00 00 FF 
0b51c     00 E4 85 F1 | 	sub	objptr, ##1536
0b520     F2 12 02 F1 | 	add	arg01, objptr
0b524     08 12 06 F1 | 	add	arg01, #8
0b528     09 83 69 FC | 	wrlong	#193, arg01
0b52c     03 00 00 FF 
0b530     00 E4 05 F1 | 	add	objptr, ##1536
0b534     F2 14 02 FB | 	rdlong	arg02, objptr
0b538     0A 29 02 F6 | 	mov	local02, arg02
0b53c     01 14 06 F1 | 	add	arg02, #1
0b540     F2 14 62 FC | 	wrlong	arg02, objptr
0b544                 | ' expr()
0b544                 | ' 'print lparts(ct).part$ 'ok
0b544                 | ' numpar=0
0b544                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0b544                 | ' if lparts(ct).part$="goto" then
0b544     13 00 00 FF 
0b548     38 E4 85 F1 | 	sub	objptr, ##9784
0b54c     F2 14 02 FB | 	rdlong	arg02, objptr
0b550     03 14 66 F0 | 	shl	arg02, #3
0b554     02 00 00 FF 
0b558     38 E4 85 F1 | 	sub	objptr, ##1080
0b55c     F2 14 02 F1 | 	add	arg02, objptr
0b560     0A 13 02 FB | 	rdlong	arg01, arg02
0b564     B9 01 00 FF 
0b568     0A 14 06 F6 | 	mov	arg02, ##@LR__5865
0b56c     35 00 00 FF 
0b570     0C E4 85 F1 | 	sub	objptr, ##27148
0b574     20 BA B1 FD | 	call	#__system___string_cmp
0b578     00 FA 0D F2 | 	cmp	result1, #0 wz
0b57c     14 02 90 5D |  if_ne	jmp	#LR__0955
0b580     37 00 00 FF 
0b584     44 E4 05 F1 | 	add	objptr, ##28228
0b588     F2 2A 02 FB | 	rdlong	local03, objptr
0b58c     37 00 00 FF 
0b590     44 E4 85 F1 | 	sub	objptr, ##28228
0b594     01 2A 06 F1 | 	add	local03, #1
0b598                 | '   i=ct+1
0b598                 | '   do
0b598                 | LR__0950
0b598                 | '     if lparts(i).token=token_decimal then
0b598     15 FB 01 F6 | 	mov	result1, local03
0b59c     03 FA 65 F0 | 	shl	result1, #3
0b5a0     35 00 00 FF 
0b5a4     0C E4 05 F1 | 	add	objptr, ##27148
0b5a8     F2 FA 01 F1 | 	add	result1, objptr
0b5ac     04 FA 05 F1 | 	add	result1, #4
0b5b0     FD FA 01 FB | 	rdlong	result1, result1
0b5b4     01 00 00 FF 
0b5b8     00 FA 0D F2 | 	cmp	result1, ##512 wz
0b5bc     35 00 00 FF 
0b5c0     0C E4 85 F1 | 	sub	objptr, ##27148
0b5c4     DC 00 90 5D |  if_ne	jmp	#LR__0951
0b5c8     4A 00 00 FF 
0b5cc     7C E4 05 F1 | 	add	objptr, ##38012
0b5d0     F2 FA 01 FB | 	rdlong	result1, objptr
0b5d4     FD 14 02 F6 | 	mov	arg02, result1
0b5d8     01 14 66 F0 | 	shl	arg02, #1
0b5dc     FD 14 02 F1 | 	add	arg02, result1
0b5e0     02 14 66 F0 | 	shl	arg02, #2
0b5e4     03 00 00 FF 
0b5e8     00 E4 85 F1 | 	sub	objptr, ##1536
0b5ec     F2 14 02 F1 | 	add	arg02, objptr
0b5f0     00 00 C0 FF 
0b5f4     0A 01 68 FC | 	wrlong	##-2147483648, arg02
0b5f8     03 00 00 FF 
0b5fc     00 E4 05 F1 | 	add	objptr, ##1536
0b600     F2 14 02 FB | 	rdlong	arg02, objptr
0b604     0A 2D 02 F6 | 	mov	local04, arg02
0b608     01 2C 66 F0 | 	shl	local04, #1
0b60c     0A 2D 02 F1 | 	add	local04, arg02
0b610     02 2C 66 F0 | 	shl	local04, #2
0b614     03 00 00 FF 
0b618     00 E4 85 F1 | 	sub	objptr, ##1536
0b61c     F2 2C 02 F1 | 	add	local04, objptr
0b620     15 15 02 F6 | 	mov	arg02, local03
0b624     03 14 66 F0 | 	shl	arg02, #3
0b628     12 00 00 FF 
0b62c     70 E4 85 F1 | 	sub	objptr, ##9328
0b630     F2 14 02 F1 | 	add	arg02, objptr
0b634     0A 13 02 FB | 	rdlong	arg01, arg02
0b638     00 14 06 F6 | 	mov	arg02, #0
0b63c     35 00 00 FF 
0b640     0C E4 85 F1 | 	sub	objptr, ##27148
0b644     18 EE B1 FD | 	call	#__system____builtin_atoi
0b648     04 2C 06 F1 | 	add	local04, #4
0b64c     16 FB 61 FC | 	wrlong	result1, local04
0b650     4A 00 00 FF 
0b654     7C E4 05 F1 | 	add	objptr, ##38012
0b658     F2 14 02 FB | 	rdlong	arg02, objptr
0b65c     0A 2D 02 F6 | 	mov	local04, arg02
0b660     01 2C 66 F0 | 	shl	local04, #1
0b664     0A 2D 02 F1 | 	add	local04, arg02
0b668     02 2C 66 F0 | 	shl	local04, #2
0b66c     03 00 00 FF 
0b670     00 E4 85 F1 | 	sub	objptr, ##1536
0b674     F2 2C 02 F1 | 	add	local04, objptr
0b678     08 2C 06 F1 | 	add	local04, #8
0b67c     16 A7 68 FC | 	wrlong	#83, local04
0b680     03 00 00 FF 
0b684     00 E4 05 F1 | 	add	objptr, ##1536
0b688     F2 2C 02 FB | 	rdlong	local04, objptr
0b68c     01 2C 06 F1 | 	add	local04, #1
0b690     F2 2C 62 FC | 	wrlong	local04, objptr
0b694     4A 00 00 FF 
0b698     7C E4 85 F1 | 	sub	objptr, ##38012
0b69c     01 26 06 F1 | 	add	local01, #1
0b6a0     08 00 90 FD | 	jmp	#LR__0952
0b6a4                 | LR__0951
0b6a4                 | '       return 17
0b6a4     11 FA 05 F6 | 	mov	result1, #17
0b6a8     5C 04 90 FD | 	jmp	#LR__0965
0b6ac                 | LR__0952
0b6ac     01 2A 06 F1 | 	add	local03, #1
0b6b0                 | '     i+=1
0b6b0                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b6b0     15 2D 02 F6 | 	mov	local04, local03
0b6b4     03 2C 66 F0 | 	shl	local04, #3
0b6b8     35 00 00 FF 
0b6bc     0C E4 05 F1 | 	add	objptr, ##27148
0b6c0     F2 2C 02 F1 | 	add	local04, objptr
0b6c4     04 2C 06 F1 | 	add	local04, #4
0b6c8     16 2D 02 FB | 	rdlong	local04, local04
0b6cc     11 2C 0E F2 | 	cmp	local04, #17 wz
0b6d0     35 00 00 FF 
0b6d4     0C E4 85 F1 | 	sub	objptr, ##27148
0b6d8     30 00 90 AD |  if_e	jmp	#LR__0953
0b6dc     15 2D 02 F6 | 	mov	local04, local03
0b6e0     03 2C 66 F0 | 	shl	local04, #3
0b6e4     35 00 00 FF 
0b6e8     0C E4 05 F1 | 	add	objptr, ##27148
0b6ec     F2 2C 02 F1 | 	add	local04, objptr
0b6f0     04 2C 06 F1 | 	add	local04, #4
0b6f4     16 2D 02 FB | 	rdlong	local04, local04
0b6f8     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b6fc     35 00 00 FF 
0b700     0C E4 85 F1 | 	sub	objptr, ##27148
0b704     15 FA 05 56 |  if_ne	mov	result1, #21
0b708     FC 03 90 5D |  if_ne	jmp	#LR__0965
0b70c                 | LR__0953
0b70c                 | '     if lparts(i).token=token_end then exit loop
0b70c     15 2D 02 F6 | 	mov	local04, local03
0b710     03 2C 66 F0 | 	shl	local04, #3
0b714     35 00 00 FF 
0b718     0C E4 05 F1 | 	add	objptr, ##27148
0b71c     F2 2C 02 F1 | 	add	local04, objptr
0b720     04 2C 06 F1 | 	add	local04, #4
0b724     16 2D 02 FB | 	rdlong	local04, local04
0b728     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b72c     35 00 00 FF 
0b730     0C E4 85 F1 | 	sub	objptr, ##27148
0b734     30 00 90 AD |  if_e	jmp	#LR__0954
0b738     01 2A 06 F1 | 	add	local03, #1
0b73c     15 2D 02 F6 | 	mov	local04, local03
0b740     03 2C 66 F0 | 	shl	local04, #3
0b744     35 00 00 FF 
0b748     0C E4 05 F1 | 	add	objptr, ##27148
0b74c     F2 2C 02 F1 | 	add	local04, objptr
0b750     04 2C 06 F1 | 	add	local04, #4
0b754     16 2D 02 FB | 	rdlong	local04, local04
0b758     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b75c     35 00 00 FF 
0b760     0C E4 85 F1 | 	sub	objptr, ##27148
0b764     30 FE 9F 5D |  if_ne	jmp	#LR__0950
0b768                 | LR__0954
0b768     14 2D 02 F6 | 	mov	local04, local02
0b76c     01 2C 66 F0 | 	shl	local04, #1
0b770     14 2D 02 F1 | 	add	local04, local02
0b774     02 2C 66 F0 | 	shl	local04, #2
0b778     47 00 00 FF 
0b77c     7C E4 05 F1 | 	add	objptr, ##36476
0b780     F2 2C 02 F1 | 	add	local04, objptr
0b784     04 2C 06 F1 | 	add	local04, #4
0b788     16 03 68 FC | 	wrlong	#1, local04
0b78c     47 00 00 FF 
0b790     7C E4 85 F1 | 	sub	objptr, ##36476
0b794                 | LR__0955
0b794                 | ' 
0b794                 | ' if lparts(ct).part$="gosub" then
0b794     37 00 00 FF 
0b798     44 E4 05 F1 | 	add	objptr, ##28228
0b79c     F2 2A 02 FB | 	rdlong	local03, objptr
0b7a0     03 2A 66 F0 | 	shl	local03, #3
0b7a4     02 00 00 FF 
0b7a8     38 E4 85 F1 | 	sub	objptr, ##1080
0b7ac     F2 2A 02 F1 | 	add	local03, objptr
0b7b0     15 13 02 FB | 	rdlong	arg01, local03
0b7b4     B9 01 00 FF 
0b7b8     0F 14 06 F6 | 	mov	arg02, ##@LR__5866
0b7bc     35 00 00 FF 
0b7c0     0C E4 85 F1 | 	sub	objptr, ##27148
0b7c4     D0 B7 B1 FD | 	call	#__system___string_cmp
0b7c8     00 FA 0D F2 | 	cmp	result1, #0 wz
0b7cc     84 02 90 5D |  if_ne	jmp	#LR__0961
0b7d0     37 00 00 FF 
0b7d4     44 E4 05 F1 | 	add	objptr, ##28228
0b7d8     F2 2A 02 FB | 	rdlong	local03, objptr
0b7dc     37 00 00 FF 
0b7e0     44 E4 85 F1 | 	sub	objptr, ##28228
0b7e4     01 2A 06 F1 | 	add	local03, #1
0b7e8                 | '   i=ct+1
0b7e8                 | '   do
0b7e8                 | LR__0956
0b7e8                 | '     if lparts(i).token=token_decimal then
0b7e8     15 2D 02 F6 | 	mov	local04, local03
0b7ec     03 2C 66 F0 | 	shl	local04, #3
0b7f0     35 00 00 FF 
0b7f4     0C E4 05 F1 | 	add	objptr, ##27148
0b7f8     F2 2C 02 F1 | 	add	local04, objptr
0b7fc     04 2C 06 F1 | 	add	local04, #4
0b800     16 2D 02 FB | 	rdlong	local04, local04
0b804     01 00 00 FF 
0b808     00 2C 0E F2 | 	cmp	local04, ##512 wz
0b80c     35 00 00 FF 
0b810     0C E4 85 F1 | 	sub	objptr, ##27148
0b814     4C 01 90 5D |  if_ne	jmp	#LR__0957
0b818     4A 00 00 FF 
0b81c     7C E4 05 F1 | 	add	objptr, ##38012
0b820     F2 FA 01 FB | 	rdlong	result1, objptr
0b824     FD 2C 02 F6 | 	mov	local04, result1
0b828     01 2C 66 F0 | 	shl	local04, #1
0b82c     FD 2C 02 F1 | 	add	local04, result1
0b830     02 2C 66 F0 | 	shl	local04, #2
0b834     03 00 00 FF 
0b838     00 E4 85 F1 | 	sub	objptr, ##1536
0b83c     F2 2C 02 F1 | 	add	local04, objptr
0b840     08 2C 06 F1 | 	add	local04, #8
0b844     16 53 69 FC | 	wrlong	#169, local04
0b848     03 00 00 FF 
0b84c     00 E4 05 F1 | 	add	objptr, ##1536
0b850     F2 FA 01 FB | 	rdlong	result1, objptr
0b854     01 FA 05 F1 | 	add	result1, #1
0b858     F2 FA 61 FC | 	wrlong	result1, objptr
0b85c     FD 2C 02 F6 | 	mov	local04, result1
0b860     01 2C 66 F0 | 	shl	local04, #1
0b864     FD 2C 02 F1 | 	add	local04, result1
0b868     02 2C 66 F0 | 	shl	local04, #2
0b86c     03 00 00 FF 
0b870     00 E4 85 F1 | 	sub	objptr, ##1536
0b874     F2 2C 02 F1 | 	add	local04, objptr
0b878     00 00 C0 FF 
0b87c     16 01 68 FC | 	wrlong	##-2147483648, local04
0b880     03 00 00 FF 
0b884     00 E4 05 F1 | 	add	objptr, ##1536
0b888     F2 FA 01 FB | 	rdlong	result1, objptr
0b88c     FD 2C 02 F6 | 	mov	local04, result1
0b890     01 2C 66 F0 | 	shl	local04, #1
0b894     FD 2C 02 F1 | 	add	local04, result1
0b898     02 2C 66 F0 | 	shl	local04, #2
0b89c     03 00 00 FF 
0b8a0     00 E4 85 F1 | 	sub	objptr, ##1536
0b8a4     F2 2C 02 F1 | 	add	local04, objptr
0b8a8     15 13 02 F6 | 	mov	arg01, local03
0b8ac     03 12 66 F0 | 	shl	arg01, #3
0b8b0     12 00 00 FF 
0b8b4     70 E4 85 F1 | 	sub	objptr, ##9328
0b8b8     F2 12 02 F1 | 	add	arg01, objptr
0b8bc     09 13 02 FB | 	rdlong	arg01, arg01
0b8c0     00 14 06 F6 | 	mov	arg02, #0
0b8c4     35 00 00 FF 
0b8c8     0C E4 85 F1 | 	sub	objptr, ##27148
0b8cc     90 EB B1 FD | 	call	#__system____builtin_atoi
0b8d0     04 2C 06 F1 | 	add	local04, #4
0b8d4     16 FB 61 FC | 	wrlong	result1, local04
0b8d8     4A 00 00 FF 
0b8dc     7C E4 05 F1 | 	add	objptr, ##38012
0b8e0     F2 12 02 FB | 	rdlong	arg01, objptr
0b8e4     09 2D 02 F6 | 	mov	local04, arg01
0b8e8     01 2C 66 F0 | 	shl	local04, #1
0b8ec     09 2D 02 F1 | 	add	local04, arg01
0b8f0     02 2C 66 F0 | 	shl	local04, #2
0b8f4     03 00 00 FF 
0b8f8     00 E4 85 F1 | 	sub	objptr, ##1536
0b8fc     F2 2C 02 F1 | 	add	local04, objptr
0b900     08 2C 06 F1 | 	add	local04, #8
0b904     16 A7 68 FC | 	wrlong	#83, local04
0b908     03 00 00 FF 
0b90c     00 E4 05 F1 | 	add	objptr, ##1536
0b910     F2 12 02 FB | 	rdlong	arg01, objptr
0b914     01 12 06 F1 | 	add	arg01, #1
0b918     F2 12 62 FC | 	wrlong	arg01, objptr
0b91c     01 26 06 F1 | 	add	local01, #1
0b920     09 2D 02 F6 | 	mov	local04, arg01
0b924     01 2C 66 F0 | 	shl	local04, #1
0b928     09 2D 02 F1 | 	add	local04, arg01
0b92c     02 2C 66 F0 | 	shl	local04, #2
0b930     03 00 00 FF 
0b934     00 E4 85 F1 | 	sub	objptr, ##1536
0b938     F2 2C 02 F1 | 	add	local04, objptr
0b93c     08 2C 06 F1 | 	add	local04, #8
0b940     16 5B 68 FC | 	wrlong	#45, local04
0b944     03 00 00 FF 
0b948     00 E4 05 F1 | 	add	objptr, ##1536
0b94c     F2 2C 02 FB | 	rdlong	local04, objptr
0b950     01 2C 06 F1 | 	add	local04, #1
0b954     F2 2C 62 FC | 	wrlong	local04, objptr
0b958     4A 00 00 FF 
0b95c     7C E4 85 F1 | 	sub	objptr, ##38012
0b960     08 00 90 FD | 	jmp	#LR__0958
0b964                 | LR__0957
0b964                 | '       return 17
0b964     11 FA 05 F6 | 	mov	result1, #17
0b968     9C 01 90 FD | 	jmp	#LR__0965
0b96c                 | LR__0958
0b96c     01 2A 06 F1 | 	add	local03, #1
0b970                 | '     i+=1
0b970                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b970     15 2D 02 F6 | 	mov	local04, local03
0b974     03 2C 66 F0 | 	shl	local04, #3
0b978     35 00 00 FF 
0b97c     0C E4 05 F1 | 	add	objptr, ##27148
0b980     F2 2C 02 F1 | 	add	local04, objptr
0b984     04 2C 06 F1 | 	add	local04, #4
0b988     16 2D 02 FB | 	rdlong	local04, local04
0b98c     11 2C 0E F2 | 	cmp	local04, #17 wz
0b990     35 00 00 FF 
0b994     0C E4 85 F1 | 	sub	objptr, ##27148
0b998     30 00 90 AD |  if_e	jmp	#LR__0959
0b99c     15 2D 02 F6 | 	mov	local04, local03
0b9a0     03 2C 66 F0 | 	shl	local04, #3
0b9a4     35 00 00 FF 
0b9a8     0C E4 05 F1 | 	add	objptr, ##27148
0b9ac     F2 2C 02 F1 | 	add	local04, objptr
0b9b0     04 2C 06 F1 | 	add	local04, #4
0b9b4     16 2D 02 FB | 	rdlong	local04, local04
0b9b8     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b9bc     35 00 00 FF 
0b9c0     0C E4 85 F1 | 	sub	objptr, ##27148
0b9c4     15 FA 05 56 |  if_ne	mov	result1, #21
0b9c8     3C 01 90 5D |  if_ne	jmp	#LR__0965
0b9cc                 | LR__0959
0b9cc                 | '     if lparts(i).token=token_end then exit loop
0b9cc     15 2D 02 F6 | 	mov	local04, local03
0b9d0     03 2C 66 F0 | 	shl	local04, #3
0b9d4     35 00 00 FF 
0b9d8     0C E4 05 F1 | 	add	objptr, ##27148
0b9dc     F2 2C 02 F1 | 	add	local04, objptr
0b9e0     04 2C 06 F1 | 	add	local04, #4
0b9e4     16 2D 02 FB | 	rdlong	local04, local04
0b9e8     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b9ec     35 00 00 FF 
0b9f0     0C E4 85 F1 | 	sub	objptr, ##27148
0b9f4     30 00 90 AD |  if_e	jmp	#LR__0960
0b9f8     01 2A 06 F1 | 	add	local03, #1
0b9fc     15 2D 02 F6 | 	mov	local04, local03
0ba00     03 2C 66 F0 | 	shl	local04, #3
0ba04     35 00 00 FF 
0ba08     0C E4 05 F1 | 	add	objptr, ##27148
0ba0c     F2 2C 02 F1 | 	add	local04, objptr
0ba10     04 2C 06 F1 | 	add	local04, #4
0ba14     16 2D 02 FB | 	rdlong	local04, local04
0ba18     FE 2D 0E F2 | 	cmp	local04, #510 wz
0ba1c     35 00 00 FF 
0ba20     0C E4 85 F1 | 	sub	objptr, ##27148
0ba24     C0 FD 9F 5D |  if_ne	jmp	#LR__0956
0ba28                 | LR__0960
0ba28     14 2D 02 F6 | 	mov	local04, local02
0ba2c     01 2C 66 F0 | 	shl	local04, #1
0ba30     14 2D 02 F1 | 	add	local04, local02
0ba34     02 2C 66 F0 | 	shl	local04, #2
0ba38     47 00 00 FF 
0ba3c     7C E4 05 F1 | 	add	objptr, ##36476
0ba40     F2 2C 02 F1 | 	add	local04, objptr
0ba44     04 2C 06 F1 | 	add	local04, #4
0ba48     16 07 68 FC | 	wrlong	#3, local04
0ba4c     47 00 00 FF 
0ba50     7C E4 85 F1 | 	sub	objptr, ##36476
0ba54                 | LR__0961
0ba54     14 2B 02 F6 | 	mov	local03, local02
0ba58     01 2A 66 F0 | 	shl	local03, #1
0ba5c     14 2B 02 F1 | 	add	local03, local02
0ba60     02 2A 66 F0 | 	shl	local03, #2
0ba64     47 00 00 FF 
0ba68     7C E4 05 F1 | 	add	objptr, ##36476
0ba6c     F2 2A 02 F1 | 	add	local03, objptr
0ba70     15 27 62 FC | 	wrlong	local01, local03
0ba74                 | ' compiledline(onlineptr).result.uresult=numpar
0ba74                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0ba74     03 00 00 FF 
0ba78     00 E4 05 F1 | 	add	objptr, ##1536
0ba7c     F2 2A 02 FB | 	rdlong	local03, objptr
0ba80     4A 00 00 FF 
0ba84     7C E4 85 F1 | 	sub	objptr, ##38012
0ba88     97 3C 48 FB | 	callpa	#(@LR__0964-@LR__0962)>>2,fcache_load_ptr_
0ba8c                 | LR__0962
0ba8c     15 2D 02 F6 | 	mov	local04, local03
0ba90     01 2C 66 F0 | 	shl	local04, #1
0ba94     15 2D 02 F1 | 	add	local04, local03
0ba98     02 2C 66 F0 | 	shl	local04, #2
0ba9c     47 00 00 FF 
0baa0     7C E4 05 F1 | 	add	objptr, ##36476
0baa4     F2 2C 02 F1 | 	add	local04, objptr
0baa8     08 2C 06 F1 | 	add	local04, #8
0baac     16 2D 02 FB | 	rdlong	local04, local04
0bab0     2D 2C 0E F2 | 	cmp	local04, #45 wz
0bab4     47 00 00 FF 
0bab8     7C E4 85 F1 | 	sub	objptr, ##36476
0babc     38 00 90 5D |  if_ne	jmp	#LR__0963
0bac0     15 2D 02 F6 | 	mov	local04, local03
0bac4     01 2C 66 F0 | 	shl	local04, #1
0bac8     15 2D 02 F1 | 	add	local04, local03
0bacc     02 2C 66 F0 | 	shl	local04, #2
0bad0     47 00 00 FF 
0bad4     7C E4 05 F1 | 	add	objptr, ##36476
0bad8     F2 2C 02 F1 | 	add	local04, objptr
0badc     03 00 00 FF 
0bae0     00 E4 05 F1 | 	add	objptr, ##1536
0bae4     F2 26 02 FB | 	rdlong	local01, objptr
0bae8     4A 00 00 FF 
0baec     7C E4 85 F1 | 	sub	objptr, ##38012
0baf0     02 26 86 F1 | 	sub	local01, #2
0baf4     16 27 62 FC | 	wrlong	local01, local04
0baf8                 | LR__0963
0baf8     01 2A 86 F1 | 	sub	local03, #1
0bafc     14 2B 52 F2 | 	cmps	local03, local02 wc
0bb00     88 FF 9F 3D |  if_ae	jmp	#LR__0962
0bb04                 | LR__0964
0bb04                 | ' return 0
0bb04     00 FA 05 F6 | 	mov	result1, #0
0bb08                 | LR__0965
0bb08     A7 F0 03 F6 | 	mov	ptra, fp
0bb0c     B2 00 A0 FD | 	call	#popregs_
0bb10                 | _compile_on_ret
0bb10     2D 00 64 FD | 	ret
0bb14                 | 
0bb14                 | ' 
0bb14                 | ' '----- A helper for compile_input and compile_read
0bb14                 | '  
0bb14                 | ' function getaddr() as ulong
0bb14                 | _getaddr
0bb14     0B 4A 05 F6 | 	mov	COUNT_, #11
0bb18     A8 00 A0 FD | 	call	#pushregs_
0bb1c     37 00 00 FF 
0bb20     44 E4 05 F1 | 	add	objptr, ##28228
0bb24     F2 2C 02 FB | 	rdlong	local04, objptr
0bb28     03 2C 66 F0 | 	shl	local04, #3
0bb2c     02 00 00 FF 
0bb30     38 E4 85 F1 | 	sub	objptr, ##1080
0bb34     F2 2C 02 F1 | 	add	local04, objptr
0bb38     16 2F 02 FB | 	rdlong	local05, local04
0bb3c     01 30 66 F6 | 	neg	local06, #1
0bb40                 | ' 
0bb40                 | ' varname$=lparts(ct).part$
0bb40                 | ' j=-1
0bb40                 | ' 
0bb40                 | ' for i=0 to varnum-1
0bb40     00 32 06 F6 | 	mov	local07, #0
0bb44     04 E4 85 F1 | 	sub	objptr, #4
0bb48     F2 34 02 FB | 	rdlong	local08, objptr
0bb4c     35 00 00 FF 
0bb50     08 E4 85 F1 | 	sub	objptr, ##27144
0bb54                 | LR__0970
0bb54     1A 33 52 F2 | 	cmps	local07, local08 wc
0bb58     38 00 90 3D |  if_ae	jmp	#LR__0971
0bb5c                 | '   if variables(i).name=varname$ then j=i : exit
0bb5c     19 2D 02 F6 | 	mov	local04, local07
0bb60     04 2C 66 F0 | 	shl	local04, #4
0bb64     14 00 00 FF 
0bb68     F8 E5 05 F1 | 	add	objptr, ##10744
0bb6c     F2 2C 02 F1 | 	add	local04, objptr
0bb70     16 13 02 FB | 	rdlong	arg01, local04
0bb74     17 15 02 F6 | 	mov	arg02, local05
0bb78     14 00 00 FF 
0bb7c     F8 E5 85 F1 | 	sub	objptr, ##10744
0bb80     14 B4 B1 FD | 	call	#__system___string_cmp
0bb84     00 FA 0D F2 | 	cmp	result1, #0 wz
0bb88     19 31 02 A6 |  if_e	mov	local06, local07
0bb8c     01 32 06 51 |  if_ne	add	local07, #1
0bb90     C0 FF 9F 5D |  if_ne	jmp	#LR__0970
0bb94                 | LR__0971
0bb94                 | ' if  j=-1 andalso varnum<maxvars then   
0bb94     FF FF 7F FF 
0bb98     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0bb9c     A8 00 90 5D |  if_ne	jmp	#LR__0972
0bba0     35 00 00 FF 
0bba4     08 E4 05 F1 | 	add	objptr, ##27144
0bba8     F2 34 02 FB | 	rdlong	local08, objptr
0bbac     35 00 00 FF 
0bbb0     08 E4 85 F1 | 	sub	objptr, ##27144
0bbb4     02 00 00 FF 
0bbb8     00 34 56 F2 | 	cmps	local08, ##1024 wc
0bbbc     88 00 90 3D |  if_ae	jmp	#LR__0972
0bbc0     35 00 00 FF 
0bbc4     08 E4 05 F1 | 	add	objptr, ##27144
0bbc8     F2 2C 02 FB | 	rdlong	local04, objptr
0bbcc     04 2C 66 F0 | 	shl	local04, #4
0bbd0     20 00 00 FF 
0bbd4     10 E4 85 F1 | 	sub	objptr, ##16400
0bbd8     F2 2C 02 F1 | 	add	local04, objptr
0bbdc     16 2F 62 FC | 	wrlong	local05, local04
0bbe0     20 00 00 FF 
0bbe4     10 E4 05 F1 | 	add	objptr, ##16400
0bbe8     F2 2C 02 FB | 	rdlong	local04, objptr
0bbec     04 2C 66 F0 | 	shl	local04, #4
0bbf0     20 00 00 FF 
0bbf4     10 E4 85 F1 | 	sub	objptr, ##16400
0bbf8     F2 2C 02 F1 | 	add	local04, objptr
0bbfc     04 2C 06 F1 | 	add	local04, #4
0bc00     16 01 68 FC | 	wrlong	#0, local04
0bc04     20 00 00 FF 
0bc08     10 E4 05 F1 | 	add	objptr, ##16400
0bc0c     F2 2C 02 FB | 	rdlong	local04, objptr
0bc10     04 2C 66 F0 | 	shl	local04, #4
0bc14     20 00 00 FF 
0bc18     10 E4 85 F1 | 	sub	objptr, ##16400
0bc1c     F2 2C 02 F1 | 	add	local04, objptr
0bc20     0C 2C 06 F1 | 	add	local04, #12
0bc24     16 39 68 FC | 	wrlong	#28, local04
0bc28     20 00 00 FF 
0bc2c     10 E4 05 F1 | 	add	objptr, ##16400
0bc30     F2 34 02 FB | 	rdlong	local08, objptr
0bc34     1A 31 02 F6 | 	mov	local06, local08
0bc38     01 34 06 F1 | 	add	local08, #1
0bc3c     F2 34 62 FC | 	wrlong	local08, objptr
0bc40     35 00 00 FF 
0bc44     08 E4 85 F1 | 	sub	objptr, ##27144
0bc48                 | LR__0972
0bc48     00 34 06 F6 | 	mov	local08, #0
0bc4c                 | ' numpar=0
0bc4c                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0bc4c     37 00 00 FF 
0bc50     44 E4 05 F1 | 	add	objptr, ##28228
0bc54     F2 2C 02 FB | 	rdlong	local04, objptr
0bc58     01 2C 06 F1 | 	add	local04, #1
0bc5c     03 2C 66 F0 | 	shl	local04, #3
0bc60     02 00 00 FF 
0bc64     38 E4 85 F1 | 	sub	objptr, ##1080
0bc68     F2 2C 02 F1 | 	add	local04, objptr
0bc6c     04 2C 06 F1 | 	add	local04, #4
0bc70     16 33 02 FB | 	rdlong	local07, local04
0bc74     15 32 0E F2 | 	cmp	local07, #21 wz
0bc78     35 00 00 FF 
0bc7c     0C E4 85 F1 | 	sub	objptr, ##27148
0bc80     54 01 90 5D |  if_ne	jmp	#LR__0977
0bc84     37 00 00 FF 
0bc88     44 E4 05 F1 | 	add	objptr, ##28228
0bc8c     F2 36 02 FB | 	rdlong	local09, objptr
0bc90     01 36 06 F1 | 	add	local09, #1
0bc94     F2 36 62 FC | 	wrlong	local09, objptr
0bc98     37 00 00 FF 
0bc9c     44 E4 85 F1 | 	sub	objptr, ##28228
0bca0                 | '   ct+=1 											' omit this lpar, this is for expr list
0bca0                 | '   do
0bca0                 | LR__0973
0bca0     37 00 00 FF 
0bca4     44 E4 05 F1 | 	add	objptr, ##28228
0bca8     F2 2C 02 FB | 	rdlong	local04, objptr
0bcac     01 2C 06 F1 | 	add	local04, #1
0bcb0     F2 2C 62 FC | 	wrlong	local04, objptr
0bcb4                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0bcb4                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0bcb4     03 2C 66 F0 | 	shl	local04, #3
0bcb8     02 00 00 FF 
0bcbc     38 E4 85 F1 | 	sub	objptr, ##1080
0bcc0     F2 2C 02 F1 | 	add	local04, objptr
0bcc4     04 2C 06 F1 | 	add	local04, #4
0bcc8     16 37 02 FB | 	rdlong	local09, local04
0bccc     15 36 0E F2 | 	cmp	local09, #21 wz
0bcd0     35 00 00 FF 
0bcd4     0C E4 85 F1 | 	sub	objptr, ##27148
0bcd8     44 00 90 5D |  if_ne	jmp	#LR__0974
0bcdc     37 00 00 FF 
0bce0     44 E4 05 F1 | 	add	objptr, ##28228
0bce4     F2 36 02 FB | 	rdlong	local09, objptr
0bce8     01 36 06 F1 | 	add	local09, #1
0bcec     F2 36 62 FC | 	wrlong	local09, objptr
0bcf0     37 00 00 FF 
0bcf4     44 E4 85 F1 | 	sub	objptr, ##28228
0bcf8     AC 01 B0 FD | 	call	#_expr
0bcfc     FD 38 02 F6 | 	mov	local10, result1
0bd00     37 00 00 FF 
0bd04     44 E4 05 F1 | 	add	objptr, ##28228
0bd08     F2 36 02 FB | 	rdlong	local09, objptr
0bd0c     01 36 06 F1 | 	add	local09, #1
0bd10     F2 36 62 FC | 	wrlong	local09, objptr
0bd14     37 00 00 FF 
0bd18     44 E4 85 F1 | 	sub	objptr, ##28228
0bd1c     08 00 90 FD | 	jmp	#LR__0975
0bd20                 | LR__0974
0bd20     84 01 B0 FD | 	call	#_expr
0bd24     FD 38 02 F6 | 	mov	local10, result1
0bd28                 | LR__0975
0bd28                 | '     if err>0 then return err
0bd28     01 38 56 F2 | 	cmps	local10, #1 wc
0bd2c     1C FB 01 36 |  if_ae	mov	result1, local10
0bd30     68 01 90 3D |  if_ae	jmp	#LR__0978
0bd34     01 34 06 F1 | 	add	local08, #1
0bd38     37 00 00 FF 
0bd3c     44 E4 05 F1 | 	add	objptr, ##28228
0bd40     F2 2C 02 FB | 	rdlong	local04, objptr
0bd44     03 2C 66 F0 | 	shl	local04, #3
0bd48     02 00 00 FF 
0bd4c     38 E4 85 F1 | 	sub	objptr, ##1080
0bd50     F2 2C 02 F1 | 	add	local04, objptr
0bd54     04 2C 06 F1 | 	add	local04, #4
0bd58     16 39 02 FB | 	rdlong	local10, local04
0bd5c     14 38 0E F2 | 	cmp	local10, #20 wz
0bd60     35 00 00 FF 
0bd64     0C E4 85 F1 | 	sub	objptr, ##27148
0bd68     34 00 90 AD |  if_e	jmp	#LR__0976
0bd6c     37 00 00 FF 
0bd70     44 E4 05 F1 | 	add	objptr, ##28228
0bd74     F2 38 02 FB | 	rdlong	local10, objptr
0bd78     03 38 66 F0 | 	shl	local10, #3
0bd7c     02 00 00 FF 
0bd80     38 E4 85 F1 | 	sub	objptr, ##1080
0bd84     F2 38 02 F1 | 	add	local10, objptr
0bd88     04 38 06 F1 | 	add	local10, #4
0bd8c     1C 39 02 FB | 	rdlong	local10, local10
0bd90     FE 39 0E F2 | 	cmp	local10, #510 wz
0bd94     35 00 00 FF 
0bd98     0C E4 85 F1 | 	sub	objptr, ##27148
0bd9c     00 FF 9F 5D |  if_ne	jmp	#LR__0973
0bda0                 | LR__0976
0bda0                 | '     if lparts(ct).token=token_end then return 14
0bda0     37 00 00 FF 
0bda4     44 E4 05 F1 | 	add	objptr, ##28228
0bda8     F2 2C 02 FB | 	rdlong	local04, objptr
0bdac     03 2C 66 F0 | 	shl	local04, #3
0bdb0     02 00 00 FF 
0bdb4     38 E4 85 F1 | 	sub	objptr, ##1080
0bdb8     F2 2C 02 F1 | 	add	local04, objptr
0bdbc     04 2C 06 F1 | 	add	local04, #4
0bdc0     16 39 02 FB | 	rdlong	local10, local04
0bdc4     FE 39 0E F2 | 	cmp	local10, #510 wz
0bdc8     35 00 00 FF 
0bdcc     0C E4 85 F1 | 	sub	objptr, ##27148
0bdd0     0E FA 05 A6 |  if_e	mov	result1, #14
0bdd4     C4 00 90 AD |  if_e	jmp	#LR__0978
0bdd8                 | LR__0977
0bdd8     1A 29 02 F6 | 	mov	local02, local08
0bddc     12 2A 06 F6 | 	mov	local03, #18
0bde0     18 27 02 F6 | 	mov	local01, local06
0bde4     13 37 02 F6 | 	mov	local09, local01
0bde8     14 3B 02 F6 | 	mov	local11, local02
0bdec     15 27 02 F6 | 	mov	local01, local03
0bdf0     4A 00 00 FF 
0bdf4     7C E4 05 F1 | 	add	objptr, ##38012
0bdf8     F2 38 02 FB | 	rdlong	local10, objptr
0bdfc     1C 35 02 F6 | 	mov	local08, local10
0be00     01 34 66 F0 | 	shl	local08, #1
0be04     1C 35 02 F1 | 	add	local08, local10
0be08     02 34 66 F0 | 	shl	local08, #2
0be0c     03 00 00 FF 
0be10     00 E4 85 F1 | 	sub	objptr, ##1536
0be14     F2 34 02 F1 | 	add	local08, objptr
0be18     1A 37 62 FC | 	wrlong	local09, local08
0be1c     03 00 00 FF 
0be20     00 E4 05 F1 | 	add	objptr, ##1536
0be24     F2 38 02 FB | 	rdlong	local10, objptr
0be28     1C 37 02 F6 | 	mov	local09, local10
0be2c     01 36 66 F0 | 	shl	local09, #1
0be30     1C 37 02 F1 | 	add	local09, local10
0be34     02 36 66 F0 | 	shl	local09, #2
0be38     03 00 00 FF 
0be3c     00 E4 85 F1 | 	sub	objptr, ##1536
0be40     F2 36 02 F1 | 	add	local09, objptr
0be44     04 36 06 F1 | 	add	local09, #4
0be48     1B 3B 62 FC | 	wrlong	local11, local09
0be4c     03 00 00 FF 
0be50     00 E4 05 F1 | 	add	objptr, ##1536
0be54     F2 3A 02 FB | 	rdlong	local11, objptr
0be58     1D 39 02 F6 | 	mov	local10, local11
0be5c     01 38 66 F0 | 	shl	local10, #1
0be60     1D 39 02 F1 | 	add	local10, local11
0be64     02 38 66 F0 | 	shl	local10, #2
0be68     03 00 00 FF 
0be6c     00 E4 85 F1 | 	sub	objptr, ##1536
0be70     F2 38 02 F1 | 	add	local10, objptr
0be74     08 38 06 F1 | 	add	local10, #8
0be78     1C 27 62 FC | 	wrlong	local01, local10
0be7c     03 00 00 FF 
0be80     00 E4 05 F1 | 	add	objptr, ##1536
0be84     F2 36 02 FB | 	rdlong	local09, objptr
0be88     01 36 06 F1 | 	add	local09, #1
0be8c     F2 36 62 FC | 	wrlong	local09, objptr
0be90     4A 00 00 FF 
0be94     7C E4 85 F1 | 	sub	objptr, ##38012
0be98                 | ' t2.result.twowords(1)=numpar
0be98                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0be98                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0be98                 | ' return 0
0be98     00 FA 05 F6 | 	mov	result1, #0
0be9c                 | LR__0978
0be9c     A7 F0 03 F6 | 	mov	ptra, fp
0bea0     B2 00 A0 FD | 	call	#popregs_
0bea4                 | _getaddr_ret
0bea4     2D 00 64 FD | 	ret
0bea8                 | 
0bea8                 | ' 
0bea8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bea8                 | ' '--------------------------------------------- 
0bea8                 | ' 
0bea8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bea8                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0bea8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bea8                 | ' 
0bea8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bea8                 | ' '
0bea8                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0bea8                 | ' '
0bea8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bea8                 | ' 
0bea8                 | ' function expr() as ulong 
0bea8                 | _expr
0bea8     07 4A 05 F6 | 	mov	COUNT_, #7
0beac     A8 00 A0 FD | 	call	#pushregs_
0beb0                 | _expr_enter
0beb0     37 00 00 FF 
0beb4     44 E4 05 F1 | 	add	objptr, ##28228
0beb8     F2 2C 02 FB | 	rdlong	local04, objptr
0bebc     03 2C 66 F0 | 	shl	local04, #3
0bec0     02 00 00 FF 
0bec4     38 E4 85 F1 | 	sub	objptr, ##1080
0bec8     F2 2C 02 F1 | 	add	local04, objptr
0becc     04 2C 06 F1 | 	add	local04, #4
0bed0     16 2F 02 FB | 	rdlong	local05, local04
0bed4                 | ' 
0bed4                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0bed4     FE 2F 0E F2 | 	cmp	local05, #510 wz
0bed8     35 00 00 FF 
0bedc     0C E4 85 F1 | 	sub	objptr, ##27148
0bee0     C4 00 90 5D |  if_ne	jmp	#LR__0980
0bee4     1D 26 06 F6 | 	mov	local01, #29
0bee8     FF 2A 06 F6 | 	mov	local03, #255
0beec     13 31 02 F6 | 	mov	local06, local01
0bef0     14 33 02 F6 | 	mov	local07, local02
0bef4     15 27 02 F6 | 	mov	local01, local03
0bef8     4A 00 00 FF 
0befc     7C E4 05 F1 | 	add	objptr, ##38012
0bf00     F2 2E 02 FB | 	rdlong	local05, objptr
0bf04     17 2D 02 F6 | 	mov	local04, local05
0bf08     01 2C 66 F0 | 	shl	local04, #1
0bf0c     17 2D 02 F1 | 	add	local04, local05
0bf10     02 2C 66 F0 | 	shl	local04, #2
0bf14     03 00 00 FF 
0bf18     00 E4 85 F1 | 	sub	objptr, ##1536
0bf1c     F2 2C 02 F1 | 	add	local04, objptr
0bf20     16 31 62 FC | 	wrlong	local06, local04
0bf24     03 00 00 FF 
0bf28     00 E4 05 F1 | 	add	objptr, ##1536
0bf2c     F2 30 02 FB | 	rdlong	local06, objptr
0bf30     18 2F 02 F6 | 	mov	local05, local06
0bf34     01 2E 66 F0 | 	shl	local05, #1
0bf38     18 2F 02 F1 | 	add	local05, local06
0bf3c     02 2E 66 F0 | 	shl	local05, #2
0bf40     03 00 00 FF 
0bf44     00 E4 85 F1 | 	sub	objptr, ##1536
0bf48     F2 2E 02 F1 | 	add	local05, objptr
0bf4c     04 2E 06 F1 | 	add	local05, #4
0bf50     17 33 62 FC | 	wrlong	local07, local05
0bf54     03 00 00 FF 
0bf58     00 E4 05 F1 | 	add	objptr, ##1536
0bf5c     F2 32 02 FB | 	rdlong	local07, objptr
0bf60     19 31 02 F6 | 	mov	local06, local07
0bf64     01 30 66 F0 | 	shl	local06, #1
0bf68     19 31 02 F1 | 	add	local06, local07
0bf6c     02 30 66 F0 | 	shl	local06, #2
0bf70     03 00 00 FF 
0bf74     00 E4 85 F1 | 	sub	objptr, ##1536
0bf78     F2 30 02 F1 | 	add	local06, objptr
0bf7c     08 30 06 F1 | 	add	local06, #8
0bf80     18 27 62 FC | 	wrlong	local01, local06
0bf84     03 00 00 FF 
0bf88     00 E4 05 F1 | 	add	objptr, ##1536
0bf8c     F2 30 02 FB | 	rdlong	local06, objptr
0bf90     01 30 06 F1 | 	add	local06, #1
0bf94     F2 30 62 FC | 	wrlong	local06, objptr
0bf98     4A 00 00 FF 
0bf9c     7C E4 85 F1 | 	sub	objptr, ##38012
0bfa0     1D FA 05 F6 | 	mov	result1, #29
0bfa4     64 01 90 FD | 	jmp	#LR__0983
0bfa8                 | LR__0980
0bfa8     00 26 06 F6 | 	mov	local01, #0
0bfac     68 01 B0 FD | 	call	#_addsub
0bfb0                 | ' t3.result.uresult=0
0bfb0                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0bfb0                 | ' if err>0 then return err
0bfb0     01 FA 15 F2 | 	cmp	result1, #1 wc
0bfb4     54 01 90 3D |  if_ae	jmp	#LR__0983
0bfb8     37 00 00 FF 
0bfbc     44 E4 05 F1 | 	add	objptr, ##28228
0bfc0     F2 2C 02 FB | 	rdlong	local04, objptr
0bfc4     03 2C 66 F0 | 	shl	local04, #3
0bfc8     02 00 00 FF 
0bfcc     38 E4 85 F1 | 	sub	objptr, ##1080
0bfd0     F2 2C 02 F1 | 	add	local04, objptr
0bfd4     04 2C 06 F1 | 	add	local04, #4
0bfd8     16 2F 02 FB | 	rdlong	local05, local04
0bfdc                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0bfdc                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0bfdc     35 00 00 FF 
0bfe0     0C E4 85 F1 | 	sub	objptr, ##27148
0bfe4                 | LR__0981
0bfe4     1B 2E 0E F2 | 	cmp	local05, #27 wz
0bfe8     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0bfec     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0bff0     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0bff4     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0bff8     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0bffc     08 01 90 5D |  if_ne	jmp	#LR__0982
0c000     37 00 00 FF 
0c004     44 E4 05 F1 | 	add	objptr, ##28228
0c008     F2 30 02 FB | 	rdlong	local06, objptr
0c00c     01 30 06 F1 | 	add	local06, #1
0c010     F2 30 62 FC | 	wrlong	local06, objptr
0c014     37 00 00 FF 
0c018     44 E4 85 F1 | 	sub	objptr, ##28228
0c01c     F8 00 B0 FD | 	call	#_addsub
0c020                 | '   ct+=1
0c020                 | '   err=addsub() : if err>0 then return err
0c020     01 FA 15 F2 | 	cmp	result1, #1 wc
0c024     E4 00 90 3D |  if_ae	jmp	#LR__0983
0c028     17 2B 02 F6 | 	mov	local03, local05
0c02c     13 31 02 F6 | 	mov	local06, local01
0c030     14 33 02 F6 | 	mov	local07, local02
0c034     15 2F 02 F6 | 	mov	local05, local03
0c038     4A 00 00 FF 
0c03c     7C E4 05 F1 | 	add	objptr, ##38012
0c040     F2 2C 02 FB | 	rdlong	local04, objptr
0c044     16 FB 01 F6 | 	mov	result1, local04
0c048     01 FA 65 F0 | 	shl	result1, #1
0c04c     16 FB 01 F1 | 	add	result1, local04
0c050     02 FA 65 F0 | 	shl	result1, #2
0c054     03 00 00 FF 
0c058     00 E4 85 F1 | 	sub	objptr, ##1536
0c05c     F2 FA 01 F1 | 	add	result1, objptr
0c060     FD 30 62 FC | 	wrlong	local06, result1
0c064     03 00 00 FF 
0c068     00 E4 05 F1 | 	add	objptr, ##1536
0c06c     F2 30 02 FB | 	rdlong	local06, objptr
0c070     18 2D 02 F6 | 	mov	local04, local06
0c074     01 2C 66 F0 | 	shl	local04, #1
0c078     18 2D 02 F1 | 	add	local04, local06
0c07c     02 2C 66 F0 | 	shl	local04, #2
0c080     03 00 00 FF 
0c084     00 E4 85 F1 | 	sub	objptr, ##1536
0c088     F2 2C 02 F1 | 	add	local04, objptr
0c08c     04 2C 06 F1 | 	add	local04, #4
0c090     16 33 62 FC | 	wrlong	local07, local04
0c094     03 00 00 FF 
0c098     00 E4 05 F1 | 	add	objptr, ##1536
0c09c     F2 32 02 FB | 	rdlong	local07, objptr
0c0a0     19 31 02 F6 | 	mov	local06, local07
0c0a4     01 30 66 F0 | 	shl	local06, #1
0c0a8     19 31 02 F1 | 	add	local06, local07
0c0ac     02 30 66 F0 | 	shl	local06, #2
0c0b0     03 00 00 FF 
0c0b4     00 E4 85 F1 | 	sub	objptr, ##1536
0c0b8     F2 30 02 F1 | 	add	local06, objptr
0c0bc     08 30 06 F1 | 	add	local06, #8
0c0c0     18 2F 62 FC | 	wrlong	local05, local06
0c0c4     03 00 00 FF 
0c0c8     00 E4 05 F1 | 	add	objptr, ##1536
0c0cc     F2 30 02 FB | 	rdlong	local06, objptr
0c0d0     01 30 06 F1 | 	add	local06, #1
0c0d4     F2 30 62 FC | 	wrlong	local06, objptr
0c0d8     13 00 00 FF 
0c0dc     38 E4 85 F1 | 	sub	objptr, ##9784
0c0e0     F2 2C 02 FB | 	rdlong	local04, objptr
0c0e4     03 2C 66 F0 | 	shl	local04, #3
0c0e8     02 00 00 FF 
0c0ec     38 E4 85 F1 | 	sub	objptr, ##1080
0c0f0     F2 2C 02 F1 | 	add	local04, objptr
0c0f4     04 2C 06 F1 | 	add	local04, #4
0c0f8     16 2F 02 FB | 	rdlong	local05, local04
0c0fc     35 00 00 FF 
0c100     0C E4 85 F1 | 	sub	objptr, ##27148
0c104     DC FE 9F FD | 	jmp	#LR__0981
0c108                 | LR__0982
0c108                 | ' return 0  
0c108     00 FA 05 F6 | 	mov	result1, #0
0c10c                 | LR__0983
0c10c     A7 F0 03 F6 | 	mov	ptra, fp
0c110     B2 00 A0 FD | 	call	#popregs_
0c114                 | _expr_ret
0c114     2D 00 64 FD | 	ret
0c118                 | 
0c118                 | ' 
0c118                 | ' ' Second level operators : add, sub, logic
0c118                 | ' 
0c118                 | ' function addsub() as ulong
0c118                 | _addsub
0c118     07 4A 05 F6 | 	mov	COUNT_, #7
0c11c     A8 00 A0 FD | 	call	#pushregs_
0c120                 | _addsub_enter
0c120     00 26 06 F6 | 	mov	local01, #0
0c124     60 01 B0 FD | 	call	#_muldiv
0c128                 | ' 
0c128                 | ' t3.result.uresult=0
0c128                 | ' err=muldiv() : if err>0 then return err           			 
0c128     01 FA 15 F2 | 	cmp	result1, #1 wc
0c12c     4C 01 90 3D |  if_ae	jmp	#LR__0992
0c130     37 00 00 FF 
0c134     44 E4 05 F1 | 	add	objptr, ##28228
0c138     F2 2C 02 FB | 	rdlong	local04, objptr
0c13c     03 2C 66 F0 | 	shl	local04, #3
0c140     02 00 00 FF 
0c144     38 E4 85 F1 | 	sub	objptr, ##1080
0c148     F2 2C 02 F1 | 	add	local04, objptr
0c14c     04 2C 06 F1 | 	add	local04, #4
0c150     16 2F 02 FB | 	rdlong	local05, local04
0c154                 | ' op = lparts(ct).token				 
0c154                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0c154     35 00 00 FF 
0c158     0C E4 85 F1 | 	sub	objptr, ##27148
0c15c                 | LR__0990
0c15c     01 2E 0E F2 | 	cmp	local05, #1 wz
0c160     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0c164     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0c168     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0c16c     08 01 90 5D |  if_ne	jmp	#LR__0991
0c170     37 00 00 FF 
0c174     44 E4 05 F1 | 	add	objptr, ##28228
0c178     F2 2C 02 FB | 	rdlong	local04, objptr
0c17c     01 2C 06 F1 | 	add	local04, #1
0c180     F2 2C 62 FC | 	wrlong	local04, objptr
0c184     37 00 00 FF 
0c188     44 E4 85 F1 | 	sub	objptr, ##28228
0c18c     F8 00 B0 FD | 	call	#_muldiv
0c190                 | '   ct+=1
0c190                 | '   err=muldiv() : if err>0 then return err   
0c190     01 FA 15 F2 | 	cmp	result1, #1 wc
0c194     E4 00 90 3D |  if_ae	jmp	#LR__0992
0c198     17 2B 02 F6 | 	mov	local03, local05
0c19c     13 31 02 F6 | 	mov	local06, local01
0c1a0     14 33 02 F6 | 	mov	local07, local02
0c1a4     15 2F 02 F6 | 	mov	local05, local03
0c1a8     4A 00 00 FF 
0c1ac     7C E4 05 F1 | 	add	objptr, ##38012
0c1b0     F2 2C 02 FB | 	rdlong	local04, objptr
0c1b4     16 FB 01 F6 | 	mov	result1, local04
0c1b8     01 FA 65 F0 | 	shl	result1, #1
0c1bc     16 FB 01 F1 | 	add	result1, local04
0c1c0     02 FA 65 F0 | 	shl	result1, #2
0c1c4     03 00 00 FF 
0c1c8     00 E4 85 F1 | 	sub	objptr, ##1536
0c1cc     F2 FA 01 F1 | 	add	result1, objptr
0c1d0     FD 30 62 FC | 	wrlong	local06, result1
0c1d4     03 00 00 FF 
0c1d8     00 E4 05 F1 | 	add	objptr, ##1536
0c1dc     F2 30 02 FB | 	rdlong	local06, objptr
0c1e0     18 2D 02 F6 | 	mov	local04, local06
0c1e4     01 2C 66 F0 | 	shl	local04, #1
0c1e8     18 2D 02 F1 | 	add	local04, local06
0c1ec     02 2C 66 F0 | 	shl	local04, #2
0c1f0     03 00 00 FF 
0c1f4     00 E4 85 F1 | 	sub	objptr, ##1536
0c1f8     F2 2C 02 F1 | 	add	local04, objptr
0c1fc     04 2C 06 F1 | 	add	local04, #4
0c200     16 33 62 FC | 	wrlong	local07, local04
0c204     03 00 00 FF 
0c208     00 E4 05 F1 | 	add	objptr, ##1536
0c20c     F2 32 02 FB | 	rdlong	local07, objptr
0c210     19 31 02 F6 | 	mov	local06, local07
0c214     01 30 66 F0 | 	shl	local06, #1
0c218     19 31 02 F1 | 	add	local06, local07
0c21c     02 30 66 F0 | 	shl	local06, #2
0c220     03 00 00 FF 
0c224     00 E4 85 F1 | 	sub	objptr, ##1536
0c228     F2 30 02 F1 | 	add	local06, objptr
0c22c     08 30 06 F1 | 	add	local06, #8
0c230     18 2F 62 FC | 	wrlong	local05, local06
0c234     03 00 00 FF 
0c238     00 E4 05 F1 | 	add	objptr, ##1536
0c23c     F2 30 02 FB | 	rdlong	local06, objptr
0c240     01 30 06 F1 | 	add	local06, #1
0c244     F2 30 62 FC | 	wrlong	local06, objptr
0c248     13 00 00 FF 
0c24c     38 E4 85 F1 | 	sub	objptr, ##9784
0c250     F2 2C 02 FB | 	rdlong	local04, objptr
0c254     03 2C 66 F0 | 	shl	local04, #3
0c258     02 00 00 FF 
0c25c     38 E4 85 F1 | 	sub	objptr, ##1080
0c260     F2 2C 02 F1 | 	add	local04, objptr
0c264     04 2C 06 F1 | 	add	local04, #4
0c268     16 2F 02 FB | 	rdlong	local05, local04
0c26c     35 00 00 FF 
0c270     0C E4 85 F1 | 	sub	objptr, ##27148
0c274     E4 FE 9F FD | 	jmp	#LR__0990
0c278                 | LR__0991
0c278                 | ' return 0
0c278     00 FA 05 F6 | 	mov	result1, #0
0c27c                 | LR__0992
0c27c     A7 F0 03 F6 | 	mov	ptra, fp
0c280     B2 00 A0 FD | 	call	#popregs_
0c284                 | _addsub_ret
0c284     2D 00 64 FD | 	ret
0c288                 | 
0c288                 | ' 
0c288                 | ' ' Third level operators : mul,div,shift,power
0c288                 | ' 
0c288                 | ' function muldiv() as ulong
0c288                 | _muldiv
0c288     07 4A 05 F6 | 	mov	COUNT_, #7
0c28c     A8 00 A0 FD | 	call	#pushregs_
0c290                 | _muldiv_enter
0c290     00 26 06 F6 | 	mov	local01, #0
0c294     6C 01 B0 FD | 	call	#_getvalue
0c298                 | ' 
0c298                 | ' t3.result.uresult=0
0c298                 | ' err=getvalue() : if err>0 then return err     
0c298     01 FA 15 F2 | 	cmp	result1, #1 wc
0c29c     58 01 90 3D |  if_ae	jmp	#LR__1002
0c2a0     37 00 00 FF 
0c2a4     44 E4 05 F1 | 	add	objptr, ##28228
0c2a8     F2 2C 02 FB | 	rdlong	local04, objptr
0c2ac     03 2C 66 F0 | 	shl	local04, #3
0c2b0     02 00 00 FF 
0c2b4     38 E4 85 F1 | 	sub	objptr, ##1080
0c2b8     F2 2C 02 F1 | 	add	local04, objptr
0c2bc     04 2C 06 F1 | 	add	local04, #4
0c2c0     16 2F 02 FB | 	rdlong	local05, local04
0c2c4                 | ' op = lparts(ct).token
0c2c4                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0c2c4     35 00 00 FF 
0c2c8     0C E4 85 F1 | 	sub	objptr, ##27148
0c2cc                 | LR__1000
0c2cc     05 2E 0E F2 | 	cmp	local05, #5 wz
0c2d0     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0c2d4     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0c2d8     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0c2dc     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0c2e0     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0c2e4     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0c2e8     08 01 90 5D |  if_ne	jmp	#LR__1001
0c2ec     37 00 00 FF 
0c2f0     44 E4 05 F1 | 	add	objptr, ##28228
0c2f4     F2 2C 02 FB | 	rdlong	local04, objptr
0c2f8     01 2C 06 F1 | 	add	local04, #1
0c2fc     F2 2C 62 FC | 	wrlong	local04, objptr
0c300     37 00 00 FF 
0c304     44 E4 85 F1 | 	sub	objptr, ##28228
0c308     F8 00 B0 FD | 	call	#_getvalue
0c30c                 | '   ct+=1
0c30c                 | '   err=getvalue() :if err>0 then return err   
0c30c     01 FA 15 F2 | 	cmp	result1, #1 wc
0c310     E4 00 90 3D |  if_ae	jmp	#LR__1002
0c314     17 2B 02 F6 | 	mov	local03, local05
0c318     13 31 02 F6 | 	mov	local06, local01
0c31c     14 33 02 F6 | 	mov	local07, local02
0c320     15 2F 02 F6 | 	mov	local05, local03
0c324     4A 00 00 FF 
0c328     7C E4 05 F1 | 	add	objptr, ##38012
0c32c     F2 2C 02 FB | 	rdlong	local04, objptr
0c330     16 FB 01 F6 | 	mov	result1, local04
0c334     01 FA 65 F0 | 	shl	result1, #1
0c338     16 FB 01 F1 | 	add	result1, local04
0c33c     02 FA 65 F0 | 	shl	result1, #2
0c340     03 00 00 FF 
0c344     00 E4 85 F1 | 	sub	objptr, ##1536
0c348     F2 FA 01 F1 | 	add	result1, objptr
0c34c     FD 30 62 FC | 	wrlong	local06, result1
0c350     03 00 00 FF 
0c354     00 E4 05 F1 | 	add	objptr, ##1536
0c358     F2 30 02 FB | 	rdlong	local06, objptr
0c35c     18 2D 02 F6 | 	mov	local04, local06
0c360     01 2C 66 F0 | 	shl	local04, #1
0c364     18 2D 02 F1 | 	add	local04, local06
0c368     02 2C 66 F0 | 	shl	local04, #2
0c36c     03 00 00 FF 
0c370     00 E4 85 F1 | 	sub	objptr, ##1536
0c374     F2 2C 02 F1 | 	add	local04, objptr
0c378     04 2C 06 F1 | 	add	local04, #4
0c37c     16 33 62 FC | 	wrlong	local07, local04
0c380     03 00 00 FF 
0c384     00 E4 05 F1 | 	add	objptr, ##1536
0c388     F2 32 02 FB | 	rdlong	local07, objptr
0c38c     19 31 02 F6 | 	mov	local06, local07
0c390     01 30 66 F0 | 	shl	local06, #1
0c394     19 31 02 F1 | 	add	local06, local07
0c398     02 30 66 F0 | 	shl	local06, #2
0c39c     03 00 00 FF 
0c3a0     00 E4 85 F1 | 	sub	objptr, ##1536
0c3a4     F2 30 02 F1 | 	add	local06, objptr
0c3a8     08 30 06 F1 | 	add	local06, #8
0c3ac     18 2F 62 FC | 	wrlong	local05, local06
0c3b0     03 00 00 FF 
0c3b4     00 E4 05 F1 | 	add	objptr, ##1536
0c3b8     F2 30 02 FB | 	rdlong	local06, objptr
0c3bc     01 30 06 F1 | 	add	local06, #1
0c3c0     F2 30 62 FC | 	wrlong	local06, objptr
0c3c4     13 00 00 FF 
0c3c8     38 E4 85 F1 | 	sub	objptr, ##9784
0c3cc     F2 2C 02 FB | 	rdlong	local04, objptr
0c3d0     03 2C 66 F0 | 	shl	local04, #3
0c3d4     02 00 00 FF 
0c3d8     38 E4 85 F1 | 	sub	objptr, ##1080
0c3dc     F2 2C 02 F1 | 	add	local04, objptr
0c3e0     04 2C 06 F1 | 	add	local04, #4
0c3e4     16 2F 02 FB | 	rdlong	local05, local04
0c3e8     35 00 00 FF 
0c3ec     0C E4 85 F1 | 	sub	objptr, ##27148
0c3f0     D8 FE 9F FD | 	jmp	#LR__1000
0c3f4                 | LR__1001
0c3f4                 | ' return 0
0c3f4     00 FA 05 F6 | 	mov	result1, #0
0c3f8                 | LR__1002
0c3f8     A7 F0 03 F6 | 	mov	ptra, fp
0c3fc     B2 00 A0 FD | 	call	#popregs_
0c400                 | _muldiv_ret
0c400     2D 00 64 FD | 	ret
0c404                 | 
0c404                 | ' 
0c404                 | ' ' Get a value for operations
0c404                 | ' 
0c404                 | ' function getvalue()  as ulong
0c404                 | _getvalue
0c404     0B 4A 05 F6 | 	mov	COUNT_, #11
0c408     A8 00 A0 FD | 	call	#pushregs_
0c40c                 | _getvalue_enter
0c40c     01 2C 06 F6 | 	mov	local04, #1
0c410     00 26 06 F6 | 	mov	local01, #0
0c414     1D 2A 06 F6 | 	mov	local03, #29
0c418     37 00 00 FF 
0c41c     44 E4 05 F1 | 	add	objptr, ##28228
0c420     F2 16 02 FB | 	rdlong	arg03, objptr
0c424     03 16 66 F0 | 	shl	arg03, #3
0c428     02 00 00 FF 
0c42c     38 E4 85 F1 | 	sub	objptr, ##1080
0c430     F2 16 02 F1 | 	add	arg03, objptr
0c434     04 16 06 F1 | 	add	arg03, #4
0c438     0B 2F 02 FB | 	rdlong	local05, arg03
0c43c                 | ' 
0c43c                 | ' m=1											' for negative numbers
0c43c                 | ' t1.result.uresult=0: t1.result_type=result_uint
0c43c                 | ' op=lparts(ct).token
0c43c                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0c43c     02 2E 0E F2 | 	cmp	local05, #2 wz
0c440     35 00 00 FF 
0c444     0C E4 85 F1 | 	sub	objptr, ##27148
0c448     38 00 90 5D |  if_ne	jmp	#LR__1010
0c44c     01 2C 66 F6 | 	neg	local04, #1
0c450     37 00 00 FF 
0c454     44 E4 05 F1 | 	add	objptr, ##28228
0c458     F2 2E 02 FB | 	rdlong	local05, objptr
0c45c     01 2E 06 F1 | 	add	local05, #1
0c460     F2 2E 62 FC | 	wrlong	local05, objptr
0c464     03 2E 66 F0 | 	shl	local05, #3
0c468     02 00 00 FF 
0c46c     38 E4 85 F1 | 	sub	objptr, ##1080
0c470     F2 2E 02 F1 | 	add	local05, objptr
0c474     04 2E 06 F1 | 	add	local05, #4
0c478     17 2F 02 FB | 	rdlong	local05, local05
0c47c     35 00 00 FF 
0c480     0C E4 85 F1 | 	sub	objptr, ##27148
0c484                 | LR__1010
0c484                 | ' select case op
0c484     01 00 00 FF 
0c488     00 2E 0E F2 | 	cmp	local05, ##512 wz
0c48c     44 00 90 AD |  if_e	jmp	#LR__1011
0c490     01 00 00 FF 
0c494     01 2E 0E F2 | 	cmp	local05, ##513 wz
0c498     90 01 90 AD |  if_e	jmp	#LR__1014
0c49c     01 00 00 FF 
0c4a0     02 2E 0E F2 | 	cmp	local05, ##514 wz
0c4a4     44 04 90 AD |  if_e	jmp	#LR__1021
0c4a8     01 00 00 FF 
0c4ac     03 2E 0E F2 | 	cmp	local05, ##515 wz
0c4b0     A8 05 90 AD |  if_e	jmp	#LR__1024
0c4b4     2C 2E 0E F2 | 	cmp	local05, #44 wz
0c4b8     78 07 90 AD |  if_e	jmp	#LR__1029
0c4bc     01 00 00 FF 
0c4c0     04 2E 0E F2 | 	cmp	local05, ##516 wz
0c4c4     70 08 90 AD |  if_e	jmp	#LR__1030
0c4c8     15 2E 0E F2 | 	cmp	local05, #21 wz
0c4cc     98 08 90 AD |  if_e	jmp	#LR__1031
0c4d0     10 09 90 FD | 	jmp	#LR__1032
0c4d4                 | LR__1011
0c4d4                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0c4d4     01 2C 0E F2 | 	cmp	local04, #1 wz
0c4d8     3C 00 90 5D |  if_ne	jmp	#LR__1012
0c4dc     37 00 00 FF 
0c4e0     44 E4 05 F1 | 	add	objptr, ##28228
0c4e4     F2 2E 02 FB | 	rdlong	local05, objptr
0c4e8     03 2E 66 F0 | 	shl	local05, #3
0c4ec     02 00 00 FF 
0c4f0     38 E4 85 F1 | 	sub	objptr, ##1080
0c4f4     F2 2E 02 F1 | 	add	local05, objptr
0c4f8     17 13 02 FB | 	rdlong	arg01, local05
0c4fc     00 14 06 F6 | 	mov	arg02, #0
0c500     35 00 00 FF 
0c504     0C E4 85 F1 | 	sub	objptr, ##27148
0c508     54 DF B1 FD | 	call	#__system____builtin_atoi
0c50c     FD 2C 02 FD | 	qmul	local04, result1
0c510     18 26 62 FD | 	getqx	local01
0c514     1C 2A 06 F6 | 	mov	local03, #28
0c518                 | LR__1012
0c518                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0c518     FF FF 7F FF 
0c51c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c520     3C 00 90 5D |  if_ne	jmp	#LR__1013
0c524     37 00 00 FF 
0c528     44 E4 05 F1 | 	add	objptr, ##28228
0c52c     F2 2E 02 FB | 	rdlong	local05, objptr
0c530     03 2E 66 F0 | 	shl	local05, #3
0c534     02 00 00 FF 
0c538     38 E4 85 F1 | 	sub	objptr, ##1080
0c53c     F2 2E 02 F1 | 	add	local05, objptr
0c540     17 13 02 FB | 	rdlong	arg01, local05
0c544     00 14 06 F6 | 	mov	arg02, #0
0c548     35 00 00 FF 
0c54c     0C E4 85 F1 | 	sub	objptr, ##27148
0c550     0C DF B1 FD | 	call	#__system____builtin_atoi
0c554     FD 2C 02 FD | 	qmul	local04, result1
0c558     18 26 62 FD | 	getqx	local01
0c55c     1C 2A 06 F6 | 	mov	local03, #28
0c560                 | LR__1013
0c560     13 31 02 F6 | 	mov	local06, local01
0c564     14 33 02 F6 | 	mov	local07, local02
0c568     15 2F 02 F6 | 	mov	local05, local03
0c56c     4A 00 00 FF 
0c570     7C E4 05 F1 | 	add	objptr, ##38012
0c574     F2 26 02 FB | 	rdlong	local01, objptr
0c578     13 2D 02 F6 | 	mov	local04, local01
0c57c     01 2C 66 F0 | 	shl	local04, #1
0c580     13 2D 02 F1 | 	add	local04, local01
0c584     02 2C 66 F0 | 	shl	local04, #2
0c588     03 00 00 FF 
0c58c     00 E4 85 F1 | 	sub	objptr, ##1536
0c590     F2 2C 02 F1 | 	add	local04, objptr
0c594     16 31 62 FC | 	wrlong	local06, local04
0c598     03 00 00 FF 
0c59c     00 E4 05 F1 | 	add	objptr, ##1536
0c5a0     F2 30 02 FB | 	rdlong	local06, objptr
0c5a4     18 27 02 F6 | 	mov	local01, local06
0c5a8     01 26 66 F0 | 	shl	local01, #1
0c5ac     18 27 02 F1 | 	add	local01, local06
0c5b0     02 26 66 F0 | 	shl	local01, #2
0c5b4     03 00 00 FF 
0c5b8     00 E4 85 F1 | 	sub	objptr, ##1536
0c5bc     F2 26 02 F1 | 	add	local01, objptr
0c5c0     04 26 06 F1 | 	add	local01, #4
0c5c4     13 33 62 FC | 	wrlong	local07, local01
0c5c8     03 00 00 FF 
0c5cc     00 E4 05 F1 | 	add	objptr, ##1536
0c5d0     F2 32 02 FB | 	rdlong	local07, objptr
0c5d4     19 31 02 F6 | 	mov	local06, local07
0c5d8     01 30 66 F0 | 	shl	local06, #1
0c5dc     19 31 02 F1 | 	add	local06, local07
0c5e0     02 30 66 F0 | 	shl	local06, #2
0c5e4     03 00 00 FF 
0c5e8     00 E4 85 F1 | 	sub	objptr, ##1536
0c5ec     F2 30 02 F1 | 	add	local06, objptr
0c5f0     08 30 06 F1 | 	add	local06, #8
0c5f4     18 2F 62 FC | 	wrlong	local05, local06
0c5f8     03 00 00 FF 
0c5fc     00 E4 05 F1 | 	add	objptr, ##1536
0c600     F2 30 02 FB | 	rdlong	local06, objptr
0c604     01 30 06 F1 | 	add	local06, #1
0c608     F2 30 62 FC | 	wrlong	local06, objptr
0c60c     13 00 00 FF 
0c610     38 E4 85 F1 | 	sub	objptr, ##9784
0c614     F2 30 02 FB | 	rdlong	local06, objptr
0c618     01 30 06 F1 | 	add	local06, #1
0c61c     F2 30 62 FC | 	wrlong	local06, objptr
0c620     37 00 00 FF 
0c624     44 E4 85 F1 | 	sub	objptr, ##28228
0c628     E4 07 90 FD | 	jmp	#LR__1033
0c62c                 | LR__1014
0c62c                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c62c     37 00 00 FF 
0c630     44 E4 05 F1 | 	add	objptr, ##28228
0c634     F2 16 02 FB | 	rdlong	arg03, objptr
0c638     03 16 66 F0 | 	shl	arg03, #3
0c63c     02 00 00 FF 
0c640     38 E4 85 F1 | 	sub	objptr, ##1080
0c644     F2 16 02 F1 | 	add	arg03, objptr
0c648     0B 13 02 FB | 	rdlong	arg01, arg03
0c64c     01 14 06 F6 | 	mov	arg02, #1
0c650     35 00 00 FF 
0c654     0C E4 85 F1 | 	sub	objptr, ##27148
0c658     90 C9 B1 FD | 	call	#__system__Left_S
0c65c     FD 12 02 F6 | 	mov	arg01, result1
0c660     B9 01 00 FF 
0c664     15 14 06 F6 | 	mov	arg02, ##@LR__5867
0c668     2C A9 B1 FD | 	call	#__system___string_cmp
0c66c     00 FA 0D F2 | 	cmp	result1, #0 wz
0c670     94 00 90 5D |  if_ne	jmp	#LR__1017
0c674     37 00 00 FF 
0c678     44 E4 05 F1 | 	add	objptr, ##28228
0c67c     F2 32 02 FB | 	rdlong	local07, objptr
0c680     19 31 02 F6 | 	mov	local06, local07
0c684     03 30 66 F0 | 	shl	local06, #3
0c688     02 00 00 FF 
0c68c     38 E4 85 F1 | 	sub	objptr, ##1080
0c690     F2 30 02 F1 | 	add	local06, objptr
0c694     B9 01 00 FF 
0c698     17 2E 06 F6 | 	mov	local05, ##@LR__5868
0c69c     03 32 66 F0 | 	shl	local07, #3
0c6a0     F2 32 02 F1 | 	add	local07, objptr
0c6a4     19 33 02 FB | 	rdlong	local07, local07
0c6a8     02 00 00 FF 
0c6ac     38 E4 05 F1 | 	add	objptr, ##1080
0c6b0     F2 26 02 FB | 	rdlong	local01, objptr
0c6b4     03 26 66 F0 | 	shl	local01, #3
0c6b8     02 00 00 FF 
0c6bc     38 E4 85 F1 | 	sub	objptr, ##1080
0c6c0     F2 26 02 F1 | 	add	local01, objptr
0c6c4     13 13 02 FB | 	rdlong	arg01, local01
0c6c8     35 00 00 FF 
0c6cc     0C E4 85 F1 | 	sub	objptr, ##27148
0c6d0     09 35 02 F6 | 	mov	local08, arg01
0c6d4     97 06 48 FB | 	callpa	#(@LR__1016-@LR__1015)>>2,fcache_load_ptr_
0c6d8                 | LR__1015
0c6d8     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c6dc     01 34 06 51 |  if_ne	add	local08, #1
0c6e0     F4 FF 9F 5D |  if_ne	jmp	#LR__1015
0c6e4                 | LR__1016
0c6e4     09 35 82 F1 | 	sub	local08, arg01
0c6e8     1A 15 02 F6 | 	mov	arg02, local08
0c6ec     01 14 86 F1 | 	sub	arg02, #1
0c6f0     19 13 02 F6 | 	mov	arg01, local07
0c6f4     7C C9 B1 FD | 	call	#__system__Right_S
0c6f8     FD 14 02 F6 | 	mov	arg02, result1
0c6fc     17 13 02 F6 | 	mov	arg01, local05
0c700     C8 A8 B1 FD | 	call	#__system___string_concat
0c704     18 FB 61 FC | 	wrlong	result1, local06
0c708                 | LR__1017
0c708                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c708     37 00 00 FF 
0c70c     44 E4 05 F1 | 	add	objptr, ##28228
0c710     F2 16 02 FB | 	rdlong	arg03, objptr
0c714     03 16 66 F0 | 	shl	arg03, #3
0c718     02 00 00 FF 
0c71c     38 E4 85 F1 | 	sub	objptr, ##1080
0c720     F2 16 02 F1 | 	add	arg03, objptr
0c724     0B 13 02 FB | 	rdlong	arg01, arg03
0c728     01 14 06 F6 | 	mov	arg02, #1
0c72c     35 00 00 FF 
0c730     0C E4 85 F1 | 	sub	objptr, ##27148
0c734     B4 C8 B1 FD | 	call	#__system__Left_S
0c738     FD 12 02 F6 | 	mov	arg01, result1
0c73c     B9 01 00 FF 
0c740     1A 14 06 F6 | 	mov	arg02, ##@LR__5869
0c744     50 A8 B1 FD | 	call	#__system___string_cmp
0c748     00 FA 0D F2 | 	cmp	result1, #0 wz
0c74c     94 00 90 5D |  if_ne	jmp	#LR__1020
0c750     37 00 00 FF 
0c754     44 E4 05 F1 | 	add	objptr, ##28228
0c758     F2 32 02 FB | 	rdlong	local07, objptr
0c75c     19 31 02 F6 | 	mov	local06, local07
0c760     03 30 66 F0 | 	shl	local06, #3
0c764     02 00 00 FF 
0c768     38 E4 85 F1 | 	sub	objptr, ##1080
0c76c     F2 30 02 F1 | 	add	local06, objptr
0c770     B9 01 00 FF 
0c774     1C 2E 06 F6 | 	mov	local05, ##@LR__5870
0c778     03 32 66 F0 | 	shl	local07, #3
0c77c     F2 32 02 F1 | 	add	local07, objptr
0c780     19 33 02 FB | 	rdlong	local07, local07
0c784     02 00 00 FF 
0c788     38 E4 05 F1 | 	add	objptr, ##1080
0c78c     F2 26 02 FB | 	rdlong	local01, objptr
0c790     03 26 66 F0 | 	shl	local01, #3
0c794     02 00 00 FF 
0c798     38 E4 85 F1 | 	sub	objptr, ##1080
0c79c     F2 26 02 F1 | 	add	local01, objptr
0c7a0     13 13 02 FB | 	rdlong	arg01, local01
0c7a4     35 00 00 FF 
0c7a8     0C E4 85 F1 | 	sub	objptr, ##27148
0c7ac     09 35 02 F6 | 	mov	local08, arg01
0c7b0     97 06 48 FB | 	callpa	#(@LR__1019-@LR__1018)>>2,fcache_load_ptr_
0c7b4                 | LR__1018
0c7b4     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c7b8     01 34 06 51 |  if_ne	add	local08, #1
0c7bc     F4 FF 9F 5D |  if_ne	jmp	#LR__1018
0c7c0                 | LR__1019
0c7c0     09 35 82 F1 | 	sub	local08, arg01
0c7c4     1A 15 02 F6 | 	mov	arg02, local08
0c7c8     01 14 86 F1 | 	sub	arg02, #1
0c7cc     19 13 02 F6 | 	mov	arg01, local07
0c7d0     A0 C8 B1 FD | 	call	#__system__Right_S
0c7d4     FD 14 02 F6 | 	mov	arg02, result1
0c7d8     17 13 02 F6 | 	mov	arg01, local05
0c7dc     EC A7 B1 FD | 	call	#__system___string_concat
0c7e0     18 FB 61 FC | 	wrlong	result1, local06
0c7e4                 | LR__1020
0c7e4     37 00 00 FF 
0c7e8     44 E4 05 F1 | 	add	objptr, ##28228
0c7ec     F2 30 02 FB | 	rdlong	local06, objptr
0c7f0     03 30 66 F0 | 	shl	local06, #3
0c7f4     02 00 00 FF 
0c7f8     38 E4 85 F1 | 	sub	objptr, ##1080
0c7fc     F2 30 02 F1 | 	add	local06, objptr
0c800     18 13 02 FB | 	rdlong	arg01, local06
0c804     00 14 06 F6 | 	mov	arg02, #0
0c808     35 00 00 FF 
0c80c     0C E4 85 F1 | 	sub	objptr, ##27148
0c810     4C DC B1 FD | 	call	#__system____builtin_atoi
0c814     FD 2C 02 FD | 	qmul	local04, result1
0c818     4A 00 00 FF 
0c81c     7C E4 05 F1 | 	add	objptr, ##38012
0c820     F2 30 02 FB | 	rdlong	local06, objptr
0c824     18 37 02 F6 | 	mov	local09, local06
0c828     01 36 66 F0 | 	shl	local09, #1
0c82c     18 37 02 F1 | 	add	local09, local06
0c830     02 36 66 F0 | 	shl	local09, #2
0c834     03 00 00 FF 
0c838     00 E4 85 F1 | 	sub	objptr, ##1536
0c83c     F2 36 02 F1 | 	add	local09, objptr
0c840     03 00 00 FF 
0c844     00 E4 05 F1 | 	add	objptr, ##1536
0c848     18 26 62 FD | 	getqx	local01
0c84c     1C 2A 06 F6 | 	mov	local03, #28
0c850     13 31 02 F6 | 	mov	local06, local01
0c854     14 33 02 F6 | 	mov	local07, local02
0c858     1B 31 62 FC | 	wrlong	local06, local09
0c85c     15 37 02 F6 | 	mov	local09, local03
0c860     F2 30 02 FB | 	rdlong	local06, objptr
0c864     18 2F 02 F6 | 	mov	local05, local06
0c868     01 2E 66 F0 | 	shl	local05, #1
0c86c     18 2F 02 F1 | 	add	local05, local06
0c870     02 2E 66 F0 | 	shl	local05, #2
0c874     03 00 00 FF 
0c878     00 E4 85 F1 | 	sub	objptr, ##1536
0c87c     F2 2E 02 F1 | 	add	local05, objptr
0c880     04 2E 06 F1 | 	add	local05, #4
0c884     17 33 62 FC | 	wrlong	local07, local05
0c888     03 00 00 FF 
0c88c     00 E4 05 F1 | 	add	objptr, ##1536
0c890     F2 32 02 FB | 	rdlong	local07, objptr
0c894     19 31 02 F6 | 	mov	local06, local07
0c898     01 30 66 F0 | 	shl	local06, #1
0c89c     19 31 02 F1 | 	add	local06, local07
0c8a0     02 30 66 F0 | 	shl	local06, #2
0c8a4     03 00 00 FF 
0c8a8     00 E4 85 F1 | 	sub	objptr, ##1536
0c8ac     F2 30 02 F1 | 	add	local06, objptr
0c8b0     08 30 06 F1 | 	add	local06, #8
0c8b4     18 37 62 FC | 	wrlong	local09, local06
0c8b8     03 00 00 FF 
0c8bc     00 E4 05 F1 | 	add	objptr, ##1536
0c8c0     F2 30 02 FB | 	rdlong	local06, objptr
0c8c4     01 30 06 F1 | 	add	local06, #1
0c8c8     F2 30 62 FC | 	wrlong	local06, objptr
0c8cc     13 00 00 FF 
0c8d0     38 E4 85 F1 | 	sub	objptr, ##9784
0c8d4     F2 30 02 FB | 	rdlong	local06, objptr
0c8d8     01 30 06 F1 | 	add	local06, #1
0c8dc     F2 30 62 FC | 	wrlong	local06, objptr
0c8e0     37 00 00 FF 
0c8e4     44 E4 85 F1 | 	sub	objptr, ##28228
0c8e8     24 05 90 FD | 	jmp	#LR__1033
0c8ec                 | LR__1021
0c8ec                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0c8ec     01 2C 0E F2 | 	cmp	local04, #1 wz
0c8f0     48 00 90 5D |  if_ne	jmp	#LR__1022
0c8f4     00 C0 1F FF 
0c8f8     00 30 06 F6 | 	mov	local06, ##1065353216
0c8fc     37 00 00 FF 
0c900     44 E4 05 F1 | 	add	objptr, ##28228
0c904     F2 36 02 FB | 	rdlong	local09, objptr
0c908     03 36 66 F0 | 	shl	local09, #3
0c90c     02 00 00 FF 
0c910     38 E4 85 F1 | 	sub	objptr, ##1080
0c914     F2 36 02 F1 | 	add	local09, objptr
0c918     1B 13 02 FB | 	rdlong	arg01, local09
0c91c     35 00 00 FF 
0c920     0C E4 85 F1 | 	sub	objptr, ##27148
0c924     CC DC B1 FD | 	call	#__system____builtin_atof
0c928     FD 14 02 F6 | 	mov	arg02, result1
0c92c     18 13 02 F6 | 	mov	arg01, local06
0c930     B4 D4 B1 FD | 	call	#__system___float_mul
0c934     FD 26 02 F6 | 	mov	local01, result1
0c938     1E 2A 06 F6 | 	mov	local03, #30
0c93c                 | LR__1022
0c93c                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0c93c     FF FF 7F FF 
0c940     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c944     48 00 90 5D |  if_ne	jmp	#LR__1023
0c948     00 C0 5F FF 
0c94c     00 30 06 F6 | 	mov	local06, ##-1082130432
0c950     37 00 00 FF 
0c954     44 E4 05 F1 | 	add	objptr, ##28228
0c958     F2 36 02 FB | 	rdlong	local09, objptr
0c95c     03 36 66 F0 | 	shl	local09, #3
0c960     02 00 00 FF 
0c964     38 E4 85 F1 | 	sub	objptr, ##1080
0c968     F2 36 02 F1 | 	add	local09, objptr
0c96c     1B 13 02 FB | 	rdlong	arg01, local09
0c970     35 00 00 FF 
0c974     0C E4 85 F1 | 	sub	objptr, ##27148
0c978     78 DC B1 FD | 	call	#__system____builtin_atof
0c97c     FD 14 02 F6 | 	mov	arg02, result1
0c980     18 13 02 F6 | 	mov	arg01, local06
0c984     60 D4 B1 FD | 	call	#__system___float_mul
0c988     FD 26 02 F6 | 	mov	local01, result1
0c98c     1E 2A 06 F6 | 	mov	local03, #30
0c990                 | LR__1023
0c990     13 31 02 F6 | 	mov	local06, local01
0c994     14 33 02 F6 | 	mov	local07, local02
0c998     15 2F 02 F6 | 	mov	local05, local03
0c99c     4A 00 00 FF 
0c9a0     7C E4 05 F1 | 	add	objptr, ##38012
0c9a4     F2 26 02 FB | 	rdlong	local01, objptr
0c9a8     13 37 02 F6 | 	mov	local09, local01
0c9ac     01 36 66 F0 | 	shl	local09, #1
0c9b0     13 37 02 F1 | 	add	local09, local01
0c9b4     02 36 66 F0 | 	shl	local09, #2
0c9b8     03 00 00 FF 
0c9bc     00 E4 85 F1 | 	sub	objptr, ##1536
0c9c0     F2 36 02 F1 | 	add	local09, objptr
0c9c4     1B 31 62 FC | 	wrlong	local06, local09
0c9c8     03 00 00 FF 
0c9cc     00 E4 05 F1 | 	add	objptr, ##1536
0c9d0     F2 36 02 FB | 	rdlong	local09, objptr
0c9d4     1B 31 02 F6 | 	mov	local06, local09
0c9d8     01 30 66 F0 | 	shl	local06, #1
0c9dc     1B 31 02 F1 | 	add	local06, local09
0c9e0     02 30 66 F0 | 	shl	local06, #2
0c9e4     03 00 00 FF 
0c9e8     00 E4 85 F1 | 	sub	objptr, ##1536
0c9ec     F2 30 02 F1 | 	add	local06, objptr
0c9f0     04 30 06 F1 | 	add	local06, #4
0c9f4     18 33 62 FC | 	wrlong	local07, local06
0c9f8     03 00 00 FF 
0c9fc     00 E4 05 F1 | 	add	objptr, ##1536
0ca00     F2 36 02 FB | 	rdlong	local09, objptr
0ca04     1B 33 02 F6 | 	mov	local07, local09
0ca08     01 32 66 F0 | 	shl	local07, #1
0ca0c     1B 33 02 F1 | 	add	local07, local09
0ca10     02 32 66 F0 | 	shl	local07, #2
0ca14     03 00 00 FF 
0ca18     00 E4 85 F1 | 	sub	objptr, ##1536
0ca1c     F2 32 02 F1 | 	add	local07, objptr
0ca20     08 32 06 F1 | 	add	local07, #8
0ca24     19 2F 62 FC | 	wrlong	local05, local07
0ca28     03 00 00 FF 
0ca2c     00 E4 05 F1 | 	add	objptr, ##1536
0ca30     F2 30 02 FB | 	rdlong	local06, objptr
0ca34     01 30 06 F1 | 	add	local06, #1
0ca38     F2 30 62 FC | 	wrlong	local06, objptr
0ca3c     13 00 00 FF 
0ca40     38 E4 85 F1 | 	sub	objptr, ##9784
0ca44     F2 30 02 FB | 	rdlong	local06, objptr
0ca48     01 30 06 F1 | 	add	local06, #1
0ca4c     F2 30 62 FC | 	wrlong	local06, objptr
0ca50     37 00 00 FF 
0ca54     44 E4 85 F1 | 	sub	objptr, ##28228
0ca58     B4 03 90 FD | 	jmp	#LR__1033
0ca5c                 | LR__1024
0ca5c     37 00 00 FF 
0ca60     44 E4 05 F1 | 	add	objptr, ##28228
0ca64     F2 16 02 FB | 	rdlong	arg03, objptr
0ca68     03 16 66 F0 | 	shl	arg03, #3
0ca6c     02 00 00 FF 
0ca70     38 E4 85 F1 | 	sub	objptr, ##1080
0ca74     F2 16 02 F1 | 	add	arg03, objptr
0ca78     0B 13 02 FB | 	rdlong	arg01, arg03
0ca7c     35 00 00 FF 
0ca80     0C E4 85 F1 | 	sub	objptr, ##27148
0ca84     09 35 02 F6 | 	mov	local08, arg01
0ca88     97 06 48 FB | 	callpa	#(@LR__1026-@LR__1025)>>2,fcache_load_ptr_
0ca8c                 | LR__1025
0ca8c     1A FB C9 FA | 	rdbyte	result1, local08 wz
0ca90     01 34 06 51 |  if_ne	add	local08, #1
0ca94     F4 FF 9F 5D |  if_ne	jmp	#LR__1025
0ca98                 | LR__1026
0ca98     09 35 82 F1 | 	sub	local08, arg01
0ca9c     1A FB 01 F6 | 	mov	result1, local08
0caa0     52 00 00 FF 
0caa4     F0 E4 05 F1 | 	add	objptr, ##42224
0caa8     F2 FA 61 FC | 	wrlong	result1, objptr
0caac     58 E4 85 F1 | 	sub	objptr, #88
0cab0     F2 12 02 FB | 	rdlong	arg01, objptr
0cab4     FD 12 82 F1 | 	sub	arg01, result1
0cab8     04 12 86 F1 | 	sub	arg01, #4
0cabc     03 12 26 F5 | 	andn	arg01, #3
0cac0     F2 12 62 FC | 	wrlong	arg01, objptr
0cac4     58 E4 05 F1 | 	add	objptr, #88
0cac8     F2 14 02 FB | 	rdlong	arg02, objptr
0cacc     52 00 00 FF 
0cad0     F0 E4 85 F1 | 	sub	objptr, ##42224
0cad4     1C 6C B1 FD | 	call	#_pslpoke
0cad8                 | '     pslpoke memtop,l
0cad8                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0cad8     01 38 06 F6 | 	mov	local10, #1
0cadc     52 00 00 FF 
0cae0     F0 E4 05 F1 | 	add	objptr, ##42224
0cae4     F2 3A 02 FB | 	rdlong	local11, objptr
0cae8     52 00 00 FF 
0caec     F0 E4 85 F1 | 	sub	objptr, ##42224
0caf0     01 3A 06 F1 | 	add	local11, #1
0caf4                 | LR__1027
0caf4     1D 39 52 F2 | 	cmps	local10, local11 wc
0caf8     5C 00 90 3D |  if_ae	jmp	#LR__1028
0cafc     52 00 00 FF 
0cb00     98 E4 05 F1 | 	add	objptr, ##42136
0cb04     F2 32 02 FB | 	rdlong	local07, objptr
0cb08     03 32 06 F1 | 	add	local07, #3
0cb0c     1C 33 02 F1 | 	add	local07, local10
0cb10     1B 00 00 FF 
0cb14     54 E4 85 F1 | 	sub	objptr, ##13908
0cb18     F2 36 02 FB | 	rdlong	local09, objptr
0cb1c     03 36 66 F0 | 	shl	local09, #3
0cb20     02 00 00 FF 
0cb24     38 E4 85 F1 | 	sub	objptr, ##1080
0cb28     F2 36 02 F1 | 	add	local09, objptr
0cb2c     1B 13 02 FB | 	rdlong	arg01, local09
0cb30     1C 15 02 F6 | 	mov	arg02, local10
0cb34     01 16 06 F6 | 	mov	arg03, #1
0cb38     35 00 00 FF 
0cb3c     0C E4 85 F1 | 	sub	objptr, ##27148
0cb40     C0 C5 B1 FD | 	call	#__system__Mid_S
0cb44     FD 14 C2 FA | 	rdbyte	arg02, result1
0cb48     19 13 02 F6 | 	mov	arg01, local07
0cb4c     34 6C B1 FD | 	call	#_pspoke
0cb50     01 38 06 F1 | 	add	local10, #1
0cb54     9C FF 9F FD | 	jmp	#LR__1027
0cb58                 | LR__1028
0cb58     52 00 00 FF 
0cb5c     98 E4 05 F1 | 	add	objptr, ##42136
0cb60     F2 26 02 FB | 	rdlong	local01, objptr
0cb64     2B 2A 06 F6 | 	mov	local03, #43
0cb68     13 31 02 F6 | 	mov	local06, local01
0cb6c     14 33 02 F6 | 	mov	local07, local02
0cb70     15 3B 02 F6 | 	mov	local11, local03
0cb74     08 00 00 FF 
0cb78     1C E4 85 F1 | 	sub	objptr, ##4124
0cb7c     F2 38 02 FB | 	rdlong	local10, objptr
0cb80     1C 37 02 F6 | 	mov	local09, local10
0cb84     01 36 66 F0 | 	shl	local09, #1
0cb88     1C 37 02 F1 | 	add	local09, local10
0cb8c     02 36 66 F0 | 	shl	local09, #2
0cb90     03 00 00 FF 
0cb94     00 E4 85 F1 | 	sub	objptr, ##1536
0cb98     F2 36 02 F1 | 	add	local09, objptr
0cb9c     1B 31 62 FC | 	wrlong	local06, local09
0cba0     03 00 00 FF 
0cba4     00 E4 05 F1 | 	add	objptr, ##1536
0cba8     F2 38 02 FB | 	rdlong	local10, objptr
0cbac     1C 37 02 F6 | 	mov	local09, local10
0cbb0     01 36 66 F0 | 	shl	local09, #1
0cbb4     1C 37 02 F1 | 	add	local09, local10
0cbb8     02 36 66 F0 | 	shl	local09, #2
0cbbc     03 00 00 FF 
0cbc0     00 E4 85 F1 | 	sub	objptr, ##1536
0cbc4     F2 36 02 F1 | 	add	local09, objptr
0cbc8     04 36 06 F1 | 	add	local09, #4
0cbcc     1B 33 62 FC | 	wrlong	local07, local09
0cbd0     03 00 00 FF 
0cbd4     00 E4 05 F1 | 	add	objptr, ##1536
0cbd8     F2 38 02 FB | 	rdlong	local10, objptr
0cbdc     1C 37 02 F6 | 	mov	local09, local10
0cbe0     01 36 66 F0 | 	shl	local09, #1
0cbe4     1C 37 02 F1 | 	add	local09, local10
0cbe8     02 36 66 F0 | 	shl	local09, #2
0cbec     03 00 00 FF 
0cbf0     00 E4 85 F1 | 	sub	objptr, ##1536
0cbf4     F2 36 02 F1 | 	add	local09, objptr
0cbf8     08 36 06 F1 | 	add	local09, #8
0cbfc     1B 3B 62 FC | 	wrlong	local11, local09
0cc00     03 00 00 FF 
0cc04     00 E4 05 F1 | 	add	objptr, ##1536
0cc08     F2 30 02 FB | 	rdlong	local06, objptr
0cc0c     01 30 06 F1 | 	add	local06, #1
0cc10     F2 30 62 FC | 	wrlong	local06, objptr
0cc14     13 00 00 FF 
0cc18     38 E4 85 F1 | 	sub	objptr, ##9784
0cc1c     F2 30 02 FB | 	rdlong	local06, objptr
0cc20     01 30 06 F1 | 	add	local06, #1
0cc24     F2 30 62 FC | 	wrlong	local06, objptr
0cc28     37 00 00 FF 
0cc2c     44 E4 85 F1 | 	sub	objptr, ##28228
0cc30     DC 01 90 FD | 	jmp	#LR__1033
0cc34                 | LR__1029
0cc34     2C 2A 06 F6 | 	mov	local03, #44
0cc38     37 00 00 FF 
0cc3c     44 E4 05 F1 | 	add	objptr, ##28228
0cc40     F2 30 02 FB | 	rdlong	local06, objptr
0cc44     03 30 66 F0 | 	shl	local06, #3
0cc48     02 00 00 FF 
0cc4c     38 E4 85 F1 | 	sub	objptr, ##1080
0cc50     F2 30 02 F1 | 	add	local06, objptr
0cc54     18 13 02 FB | 	rdlong	arg01, local06
0cc58     00 14 06 F6 | 	mov	arg02, #0
0cc5c     35 00 00 FF 
0cc60     0C E4 85 F1 | 	sub	objptr, ##27148
0cc64     F8 D7 B1 FD | 	call	#__system____builtin_atoi
0cc68     FD 26 02 F6 | 	mov	local01, result1
0cc6c     13 31 02 F6 | 	mov	local06, local01
0cc70     14 33 02 F6 | 	mov	local07, local02
0cc74     15 3B 02 F6 | 	mov	local11, local03
0cc78     4A 00 00 FF 
0cc7c     7C E4 05 F1 | 	add	objptr, ##38012
0cc80     F2 38 02 FB | 	rdlong	local10, objptr
0cc84     1C 37 02 F6 | 	mov	local09, local10
0cc88     01 36 66 F0 | 	shl	local09, #1
0cc8c     1C 37 02 F1 | 	add	local09, local10
0cc90     02 36 66 F0 | 	shl	local09, #2
0cc94     03 00 00 FF 
0cc98     00 E4 85 F1 | 	sub	objptr, ##1536
0cc9c     F2 36 02 F1 | 	add	local09, objptr
0cca0     1B 31 62 FC | 	wrlong	local06, local09
0cca4     03 00 00 FF 
0cca8     00 E4 05 F1 | 	add	objptr, ##1536
0ccac     F2 38 02 FB | 	rdlong	local10, objptr
0ccb0     1C 37 02 F6 | 	mov	local09, local10
0ccb4     01 36 66 F0 | 	shl	local09, #1
0ccb8     1C 37 02 F1 | 	add	local09, local10
0ccbc     02 36 66 F0 | 	shl	local09, #2
0ccc0     03 00 00 FF 
0ccc4     00 E4 85 F1 | 	sub	objptr, ##1536
0ccc8     F2 36 02 F1 | 	add	local09, objptr
0cccc     04 36 06 F1 | 	add	local09, #4
0ccd0     1B 33 62 FC | 	wrlong	local07, local09
0ccd4     03 00 00 FF 
0ccd8     00 E4 05 F1 | 	add	objptr, ##1536
0ccdc     F2 38 02 FB | 	rdlong	local10, objptr
0cce0     1C 37 02 F6 | 	mov	local09, local10
0cce4     01 36 66 F0 | 	shl	local09, #1
0cce8     1C 37 02 F1 | 	add	local09, local10
0ccec     02 36 66 F0 | 	shl	local09, #2
0ccf0     03 00 00 FF 
0ccf4     00 E4 85 F1 | 	sub	objptr, ##1536
0ccf8     F2 36 02 F1 | 	add	local09, objptr
0ccfc     08 36 06 F1 | 	add	local09, #8
0cd00     1B 3B 62 FC | 	wrlong	local11, local09
0cd04     03 00 00 FF 
0cd08     00 E4 05 F1 | 	add	objptr, ##1536
0cd0c     F2 30 02 FB | 	rdlong	local06, objptr
0cd10     01 30 06 F1 | 	add	local06, #1
0cd14     F2 30 62 FC | 	wrlong	local06, objptr
0cd18     13 00 00 FF 
0cd1c     38 E4 85 F1 | 	sub	objptr, ##9784
0cd20     F2 30 02 FB | 	rdlong	local06, objptr
0cd24     01 30 06 F1 | 	add	local06, #1
0cd28     F2 30 62 FC | 	wrlong	local06, objptr
0cd2c     37 00 00 FF 
0cd30     44 E4 85 F1 | 	sub	objptr, ##28228
0cd34     D8 00 90 FD | 	jmp	#LR__1033
0cd38                 | LR__1030
0cd38     16 13 02 F6 | 	mov	arg01, local04
0cd3c     24 04 B0 FD | 	call	#_getvar
0cd40     37 00 00 FF 
0cd44     44 E4 05 F1 | 	add	objptr, ##28228
0cd48     F2 30 02 FB | 	rdlong	local06, objptr
0cd4c     01 30 06 F1 | 	add	local06, #1
0cd50     F2 30 62 FC | 	wrlong	local06, objptr
0cd54     37 00 00 FF 
0cd58     44 E4 85 F1 | 	sub	objptr, ##28228
0cd5c                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0cd5c     01 FA 55 F2 | 	cmps	result1, #1 wc
0cd60     B0 00 90 3D |  if_ae	jmp	#LR__1034
0cd64     A8 00 90 FD | 	jmp	#LR__1033
0cd68                 | LR__1031
0cd68     37 00 00 FF 
0cd6c     44 E4 05 F1 | 	add	objptr, ##28228
0cd70     F2 30 02 FB | 	rdlong	local06, objptr
0cd74     01 30 06 F1 | 	add	local06, #1
0cd78     F2 30 62 FC | 	wrlong	local06, objptr
0cd7c     37 00 00 FF 
0cd80     44 E4 85 F1 | 	sub	objptr, ##28228
0cd84     20 F1 BF FD | 	call	#_expr
0cd88                 | '     ct+=1
0cd88                 | '     err=expr() : if err>0 then return err 
0cd88     01 FA 55 F2 | 	cmps	result1, #1 wc
0cd8c     84 00 90 3D |  if_ae	jmp	#LR__1034
0cd90                 | '     if lparts(ct).token=token_rpar then ct+=1
0cd90     37 00 00 FF 
0cd94     44 E4 05 F1 | 	add	objptr, ##28228
0cd98     F2 3A 02 FB | 	rdlong	local11, objptr
0cd9c     03 3A 66 F0 | 	shl	local11, #3
0cda0     02 00 00 FF 
0cda4     38 E4 85 F1 | 	sub	objptr, ##1080
0cda8     F2 3A 02 F1 | 	add	local11, objptr
0cdac     04 3A 06 F1 | 	add	local11, #4
0cdb0     1D 3B 02 FB | 	rdlong	local11, local11
0cdb4     14 3A 0E F2 | 	cmp	local11, #20 wz
0cdb8     35 00 00 FF 
0cdbc     0C E4 85 F1 | 	sub	objptr, ##27148
0cdc0     4C 00 90 5D |  if_ne	jmp	#LR__1033
0cdc4     37 00 00 FF 
0cdc8     44 E4 05 F1 | 	add	objptr, ##28228
0cdcc     F2 30 02 FB | 	rdlong	local06, objptr
0cdd0     01 30 06 F1 | 	add	local06, #1
0cdd4     F2 30 62 FC | 	wrlong	local06, objptr
0cdd8     37 00 00 FF 
0cddc     44 E4 85 F1 | 	sub	objptr, ##28228
0cde0     2C 00 90 FD | 	jmp	#LR__1033
0cde4                 | LR__1032
0cde4     16 13 02 F6 | 	mov	arg01, local04
0cde8     34 00 B0 FD | 	call	#_getfun
0cdec     37 00 00 FF 
0cdf0     44 E4 05 F1 | 	add	objptr, ##28228
0cdf4     F2 30 02 FB | 	rdlong	local06, objptr
0cdf8     01 30 06 F1 | 	add	local06, #1
0cdfc     F2 30 62 FC | 	wrlong	local06, objptr
0ce00     37 00 00 FF 
0ce04     44 E4 85 F1 | 	sub	objptr, ##28228
0ce08                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0ce08     01 FA 55 F2 | 	cmps	result1, #1 wc
0ce0c     04 00 90 3D |  if_ae	jmp	#LR__1034
0ce10                 | LR__1033
0ce10                 | ' return 0  
0ce10     00 FA 05 F6 | 	mov	result1, #0
0ce14                 | LR__1034
0ce14     A7 F0 03 F6 | 	mov	ptra, fp
0ce18     B2 00 A0 FD | 	call	#popregs_
0ce1c                 | _getvalue_ret
0ce1c     2D 00 64 FD | 	ret
0ce20                 | 
0ce20                 | ' 
0ce20                 | ' ' Get a function result 
0ce20                 | ' 
0ce20                 | ' function getfun(m as integer) as ulong
0ce20                 | _getfun
0ce20     0F 4A 05 F6 | 	mov	COUNT_, #15
0ce24     A8 00 A0 FD | 	call	#pushregs_
0ce28                 | _getfun_enter
0ce28     09 2D 02 F6 | 	mov	local04, arg01
0ce2c     37 00 00 FF 
0ce30     44 E4 05 F1 | 	add	objptr, ##28228
0ce34     F2 2E 02 FB | 	rdlong	local05, objptr
0ce38     17 31 02 F6 | 	mov	local06, local05
0ce3c     00 32 06 F6 | 	mov	local07, #0
0ce40                 | ' oldct=ct
0ce40                 | ' numpar=0
0ce40                 | ' if lparts(ct+1).token=token_lpar then
0ce40     01 2E 06 F1 | 	add	local05, #1
0ce44     03 2E 66 F0 | 	shl	local05, #3
0ce48     02 00 00 FF 
0ce4c     38 E4 85 F1 | 	sub	objptr, ##1080
0ce50     F2 2E 02 F1 | 	add	local05, objptr
0ce54     04 2E 06 F1 | 	add	local05, #4
0ce58     17 2F 02 FB | 	rdlong	local05, local05
0ce5c     15 2E 0E F2 | 	cmp	local05, #21 wz
0ce60     35 00 00 FF 
0ce64     0C E4 85 F1 | 	sub	objptr, ##27148
0ce68     54 01 90 5D |  if_ne	jmp	#LR__1044
0ce6c     37 00 00 FF 
0ce70     44 E4 05 F1 | 	add	objptr, ##28228
0ce74     F2 34 02 FB | 	rdlong	local08, objptr
0ce78     01 34 06 F1 | 	add	local08, #1
0ce7c     F2 34 62 FC | 	wrlong	local08, objptr
0ce80     37 00 00 FF 
0ce84     44 E4 85 F1 | 	sub	objptr, ##28228
0ce88                 | '   ct+=1 											' omit this lpar, this is for expr list
0ce88                 | '   do
0ce88                 | LR__1040
0ce88     37 00 00 FF 
0ce8c     44 E4 05 F1 | 	add	objptr, ##28228
0ce90     F2 2E 02 FB | 	rdlong	local05, objptr
0ce94     01 2E 06 F1 | 	add	local05, #1
0ce98     F2 2E 62 FC | 	wrlong	local05, objptr
0ce9c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0ce9c                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0ce9c     03 2E 66 F0 | 	shl	local05, #3
0cea0     02 00 00 FF 
0cea4     38 E4 85 F1 | 	sub	objptr, ##1080
0cea8     F2 2E 02 F1 | 	add	local05, objptr
0ceac     04 2E 06 F1 | 	add	local05, #4
0ceb0     17 35 02 FB | 	rdlong	local08, local05
0ceb4     15 34 0E F2 | 	cmp	local08, #21 wz
0ceb8     35 00 00 FF 
0cebc     0C E4 85 F1 | 	sub	objptr, ##27148
0cec0     44 00 90 5D |  if_ne	jmp	#LR__1041
0cec4     37 00 00 FF 
0cec8     44 E4 05 F1 | 	add	objptr, ##28228
0cecc     F2 34 02 FB | 	rdlong	local08, objptr
0ced0     01 34 06 F1 | 	add	local08, #1
0ced4     F2 34 62 FC | 	wrlong	local08, objptr
0ced8     37 00 00 FF 
0cedc     44 E4 85 F1 | 	sub	objptr, ##28228
0cee0     C4 EF BF FD | 	call	#_expr
0cee4     FD 36 02 F6 | 	mov	local09, result1
0cee8     37 00 00 FF 
0ceec     44 E4 05 F1 | 	add	objptr, ##28228
0cef0     F2 34 02 FB | 	rdlong	local08, objptr
0cef4     01 34 06 F1 | 	add	local08, #1
0cef8     F2 34 62 FC | 	wrlong	local08, objptr
0cefc     37 00 00 FF 
0cf00     44 E4 85 F1 | 	sub	objptr, ##28228
0cf04     08 00 90 FD | 	jmp	#LR__1042
0cf08                 | LR__1041
0cf08     9C EF BF FD | 	call	#_expr
0cf0c     FD 36 02 F6 | 	mov	local09, result1
0cf10                 | LR__1042
0cf10                 | '     if err>0 then return err
0cf10     01 36 16 F2 | 	cmp	local09, #1 wc
0cf14     1B FB 01 36 |  if_ae	mov	result1, local09
0cf18     3C 02 90 3D |  if_ae	jmp	#LR__1046
0cf1c     01 32 06 F1 | 	add	local07, #1
0cf20     37 00 00 FF 
0cf24     44 E4 05 F1 | 	add	objptr, ##28228
0cf28     F2 2E 02 FB | 	rdlong	local05, objptr
0cf2c     03 2E 66 F0 | 	shl	local05, #3
0cf30     02 00 00 FF 
0cf34     38 E4 85 F1 | 	sub	objptr, ##1080
0cf38     F2 2E 02 F1 | 	add	local05, objptr
0cf3c     04 2E 06 F1 | 	add	local05, #4
0cf40     17 37 02 FB | 	rdlong	local09, local05
0cf44     14 36 0E F2 | 	cmp	local09, #20 wz
0cf48     35 00 00 FF 
0cf4c     0C E4 85 F1 | 	sub	objptr, ##27148
0cf50     34 00 90 AD |  if_e	jmp	#LR__1043
0cf54     37 00 00 FF 
0cf58     44 E4 05 F1 | 	add	objptr, ##28228
0cf5c     F2 36 02 FB | 	rdlong	local09, objptr
0cf60     03 36 66 F0 | 	shl	local09, #3
0cf64     02 00 00 FF 
0cf68     38 E4 85 F1 | 	sub	objptr, ##1080
0cf6c     F2 36 02 F1 | 	add	local09, objptr
0cf70     04 36 06 F1 | 	add	local09, #4
0cf74     1B 37 02 FB | 	rdlong	local09, local09
0cf78     FE 37 0E F2 | 	cmp	local09, #510 wz
0cf7c     35 00 00 FF 
0cf80     0C E4 85 F1 | 	sub	objptr, ##27148
0cf84     00 FF 9F 5D |  if_ne	jmp	#LR__1040
0cf88                 | LR__1043
0cf88                 | '   if lparts(ct).token=token_end then return 14
0cf88     37 00 00 FF 
0cf8c     44 E4 05 F1 | 	add	objptr, ##28228
0cf90     F2 2E 02 FB | 	rdlong	local05, objptr
0cf94     03 2E 66 F0 | 	shl	local05, #3
0cf98     02 00 00 FF 
0cf9c     38 E4 85 F1 | 	sub	objptr, ##1080
0cfa0     F2 2E 02 F1 | 	add	local05, objptr
0cfa4     04 2E 06 F1 | 	add	local05, #4
0cfa8     17 37 02 FB | 	rdlong	local09, local05
0cfac     FE 37 0E F2 | 	cmp	local09, #510 wz
0cfb0     35 00 00 FF 
0cfb4     0C E4 85 F1 | 	sub	objptr, ##27148
0cfb8     0E FA 05 A6 |  if_e	mov	result1, #14
0cfbc     98 01 90 AD |  if_e	jmp	#LR__1046
0cfc0                 | LR__1044
0cfc0     19 27 02 F6 | 	mov	local01, local07
0cfc4     03 30 66 F0 | 	shl	local06, #3
0cfc8     35 00 00 FF 
0cfcc     0C E4 05 F1 | 	add	objptr, ##27148
0cfd0     F2 30 02 F1 | 	add	local06, objptr
0cfd4     04 30 06 F1 | 	add	local06, #4
0cfd8     18 2B 02 FB | 	rdlong	local03, local06
0cfdc     13 35 02 F6 | 	mov	local08, local01
0cfe0     14 39 02 F6 | 	mov	local10, local02
0cfe4     15 3B 02 F6 | 	mov	local11, local03
0cfe8     15 00 00 FF 
0cfec     70 E4 05 F1 | 	add	objptr, ##10864
0cff0     F2 3C 02 FB | 	rdlong	local12, objptr
0cff4     1E 3F 02 F6 | 	mov	local13, local12
0cff8     01 3E 66 F0 | 	shl	local13, #1
0cffc     1E 3F 02 F1 | 	add	local13, local12
0d000     02 3E 66 F0 | 	shl	local13, #2
0d004     03 00 00 FF 
0d008     00 E4 85 F1 | 	sub	objptr, ##1536
0d00c     F2 3E 02 F1 | 	add	local13, objptr
0d010     1F 35 62 FC | 	wrlong	local08, local13
0d014     03 00 00 FF 
0d018     00 E4 05 F1 | 	add	objptr, ##1536
0d01c     F2 34 02 FB | 	rdlong	local08, objptr
0d020     1A 41 02 F6 | 	mov	local14, local08
0d024     01 40 66 F0 | 	shl	local14, #1
0d028     1A 41 02 F1 | 	add	local14, local08
0d02c     02 40 66 F0 | 	shl	local14, #2
0d030     03 00 00 FF 
0d034     00 E4 85 F1 | 	sub	objptr, ##1536
0d038     F2 40 02 F1 | 	add	local14, objptr
0d03c     04 40 06 F1 | 	add	local14, #4
0d040     20 39 62 FC | 	wrlong	local10, local14
0d044     03 00 00 FF 
0d048     00 E4 05 F1 | 	add	objptr, ##1536
0d04c     F2 34 02 FB | 	rdlong	local08, objptr
0d050     1A 43 02 F6 | 	mov	local15, local08
0d054     01 42 66 F0 | 	shl	local15, #1
0d058     1A 43 02 F1 | 	add	local15, local08
0d05c     02 42 66 F0 | 	shl	local15, #2
0d060     03 00 00 FF 
0d064     00 E4 85 F1 | 	sub	objptr, ##1536
0d068     F2 42 02 F1 | 	add	local15, objptr
0d06c     08 42 06 F1 | 	add	local15, #8
0d070     21 3B 62 FC | 	wrlong	local11, local15
0d074     03 00 00 FF 
0d078     00 E4 05 F1 | 	add	objptr, ##1536
0d07c     F2 34 02 FB | 	rdlong	local08, objptr
0d080     01 34 06 F1 | 	add	local08, #1
0d084     F2 34 62 FC | 	wrlong	local08, objptr
0d088     4A 00 00 FF 
0d08c     7C E4 85 F1 | 	sub	objptr, ##38012
0d090                 | ' t2.result.uresult=numpar
0d090                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0d090                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d090                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d090     FF FF 7F FF 
0d094     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0d098     B8 00 90 5D |  if_ne	jmp	#LR__1045
0d09c     15 2A 06 F6 | 	mov	local03, #21
0d0a0     13 35 02 F6 | 	mov	local08, local01
0d0a4     14 39 02 F6 | 	mov	local10, local02
0d0a8     15 3B 02 F6 | 	mov	local11, local03
0d0ac     4A 00 00 FF 
0d0b0     7C E4 05 F1 | 	add	objptr, ##38012
0d0b4     F2 3C 02 FB | 	rdlong	local12, objptr
0d0b8     1E 3F 02 F6 | 	mov	local13, local12
0d0bc     01 3E 66 F0 | 	shl	local13, #1
0d0c0     1E 3F 02 F1 | 	add	local13, local12
0d0c4     02 3E 66 F0 | 	shl	local13, #2
0d0c8     03 00 00 FF 
0d0cc     00 E4 85 F1 | 	sub	objptr, ##1536
0d0d0     F2 3E 02 F1 | 	add	local13, objptr
0d0d4     1F 35 62 FC | 	wrlong	local08, local13
0d0d8     03 00 00 FF 
0d0dc     00 E4 05 F1 | 	add	objptr, ##1536
0d0e0     F2 42 02 FB | 	rdlong	local15, objptr
0d0e4     21 41 02 F6 | 	mov	local14, local15
0d0e8     01 40 66 F0 | 	shl	local14, #1
0d0ec     21 41 02 F1 | 	add	local14, local15
0d0f0     02 40 66 F0 | 	shl	local14, #2
0d0f4     03 00 00 FF 
0d0f8     00 E4 85 F1 | 	sub	objptr, ##1536
0d0fc     F2 40 02 F1 | 	add	local14, objptr
0d100     04 40 06 F1 | 	add	local14, #4
0d104     20 39 62 FC | 	wrlong	local10, local14
0d108     03 00 00 FF 
0d10c     00 E4 05 F1 | 	add	objptr, ##1536
0d110     F2 40 02 FB | 	rdlong	local14, objptr
0d114     20 43 02 F6 | 	mov	local15, local14
0d118     01 42 66 F0 | 	shl	local15, #1
0d11c     20 43 02 F1 | 	add	local15, local14
0d120     02 42 66 F0 | 	shl	local15, #2
0d124     03 00 00 FF 
0d128     00 E4 85 F1 | 	sub	objptr, ##1536
0d12c     F2 42 02 F1 | 	add	local15, objptr
0d130     08 42 06 F1 | 	add	local15, #8
0d134     21 3B 62 FC | 	wrlong	local11, local15
0d138     03 00 00 FF 
0d13c     00 E4 05 F1 | 	add	objptr, ##1536
0d140     F2 34 02 FB | 	rdlong	local08, objptr
0d144     01 34 06 F1 | 	add	local08, #1
0d148     F2 34 62 FC | 	wrlong	local08, objptr
0d14c     4A 00 00 FF 
0d150     7C E4 85 F1 | 	sub	objptr, ##38012
0d154                 | LR__1045
0d154                 | ' return 0
0d154     00 FA 05 F6 | 	mov	result1, #0
0d158                 | LR__1046
0d158     A7 F0 03 F6 | 	mov	ptra, fp
0d15c     B2 00 A0 FD | 	call	#popregs_
0d160                 | _getfun_ret
0d160     2D 00 64 FD | 	ret
0d164                 | 
0d164                 | '   
0d164                 | '   
0d164                 | ' function getvar(m as integer) as ulong
0d164                 | _getvar
0d164     11 4A 05 F6 | 	mov	COUNT_, #17
0d168     A8 00 A0 FD | 	call	#pushregs_
0d16c                 | _getvar_enter
0d16c     09 2D 02 F6 | 	mov	local04, arg01
0d170     37 00 00 FF 
0d174     44 E4 05 F1 | 	add	objptr, ##28228
0d178     F2 2E 02 FB | 	rdlong	local05, objptr
0d17c     03 2E 66 F0 | 	shl	local05, #3
0d180     02 00 00 FF 
0d184     38 E4 85 F1 | 	sub	objptr, ##1080
0d188     F2 2E 02 F1 | 	add	local05, objptr
0d18c     17 31 02 FB | 	rdlong	local06, local05
0d190     01 32 66 F6 | 	neg	local07, #1
0d194                 | ' 
0d194                 | ' varname$=lparts(ct).part$
0d194                 | ' j=-1
0d194                 | ' 
0d194                 | ' for i=0 to varnum-1
0d194     00 34 06 F6 | 	mov	local08, #0
0d198     04 E4 85 F1 | 	sub	objptr, #4
0d19c     F2 36 02 FB | 	rdlong	local09, objptr
0d1a0     35 00 00 FF 
0d1a4     08 E4 85 F1 | 	sub	objptr, ##27144
0d1a8                 | LR__1050
0d1a8     1B 35 52 F2 | 	cmps	local08, local09 wc
0d1ac     38 00 90 3D |  if_ae	jmp	#LR__1051
0d1b0                 | '   if variables(i).name=varname$ then j=i : exit
0d1b0     1A 2F 02 F6 | 	mov	local05, local08
0d1b4     04 2E 66 F0 | 	shl	local05, #4
0d1b8     14 00 00 FF 
0d1bc     F8 E5 05 F1 | 	add	objptr, ##10744
0d1c0     F2 2E 02 F1 | 	add	local05, objptr
0d1c4     17 13 02 FB | 	rdlong	arg01, local05
0d1c8     18 15 02 F6 | 	mov	arg02, local06
0d1cc     14 00 00 FF 
0d1d0     F8 E5 85 F1 | 	sub	objptr, ##10744
0d1d4     C0 9D B1 FD | 	call	#__system___string_cmp
0d1d8     00 FA 0D F2 | 	cmp	result1, #0 wz
0d1dc     1A 33 02 A6 |  if_e	mov	local07, local08
0d1e0     01 34 06 51 |  if_ne	add	local08, #1
0d1e4     C0 FF 9F 5D |  if_ne	jmp	#LR__1050
0d1e8                 | LR__1051
0d1e8                 | ' if  j=-1 andalso varnum<maxvars then   
0d1e8     FF FF 7F FF 
0d1ec     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0d1f0     A8 00 90 5D |  if_ne	jmp	#LR__1052
0d1f4     35 00 00 FF 
0d1f8     08 E4 05 F1 | 	add	objptr, ##27144
0d1fc     F2 36 02 FB | 	rdlong	local09, objptr
0d200     35 00 00 FF 
0d204     08 E4 85 F1 | 	sub	objptr, ##27144
0d208     02 00 00 FF 
0d20c     00 36 56 F2 | 	cmps	local09, ##1024 wc
0d210     88 00 90 3D |  if_ae	jmp	#LR__1052
0d214     35 00 00 FF 
0d218     08 E4 05 F1 | 	add	objptr, ##27144
0d21c     F2 2E 02 FB | 	rdlong	local05, objptr
0d220     04 2E 66 F0 | 	shl	local05, #4
0d224     20 00 00 FF 
0d228     10 E4 85 F1 | 	sub	objptr, ##16400
0d22c     F2 2E 02 F1 | 	add	local05, objptr
0d230     17 31 62 FC | 	wrlong	local06, local05
0d234     20 00 00 FF 
0d238     10 E4 05 F1 | 	add	objptr, ##16400
0d23c     F2 2E 02 FB | 	rdlong	local05, objptr
0d240     04 2E 66 F0 | 	shl	local05, #4
0d244     20 00 00 FF 
0d248     10 E4 85 F1 | 	sub	objptr, ##16400
0d24c     F2 2E 02 F1 | 	add	local05, objptr
0d250     04 2E 06 F1 | 	add	local05, #4
0d254     17 01 68 FC | 	wrlong	#0, local05
0d258     20 00 00 FF 
0d25c     10 E4 05 F1 | 	add	objptr, ##16400
0d260     F2 2E 02 FB | 	rdlong	local05, objptr
0d264     04 2E 66 F0 | 	shl	local05, #4
0d268     20 00 00 FF 
0d26c     10 E4 85 F1 | 	sub	objptr, ##16400
0d270     F2 2E 02 F1 | 	add	local05, objptr
0d274     0C 2E 06 F1 | 	add	local05, #12
0d278     17 39 68 FC | 	wrlong	#28, local05
0d27c     20 00 00 FF 
0d280     10 E4 05 F1 | 	add	objptr, ##16400
0d284     F2 36 02 FB | 	rdlong	local09, objptr
0d288     1B 33 02 F6 | 	mov	local07, local09
0d28c     01 36 06 F1 | 	add	local09, #1
0d290     F2 36 62 FC | 	wrlong	local09, objptr
0d294     35 00 00 FF 
0d298     08 E4 85 F1 | 	sub	objptr, ##27144
0d29c                 | LR__1052
0d29c     00 36 06 F6 | 	mov	local09, #0
0d2a0                 | ' numpar=0
0d2a0                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0d2a0     37 00 00 FF 
0d2a4     44 E4 05 F1 | 	add	objptr, ##28228
0d2a8     F2 2E 02 FB | 	rdlong	local05, objptr
0d2ac     01 2E 06 F1 | 	add	local05, #1
0d2b0     03 2E 66 F0 | 	shl	local05, #3
0d2b4     02 00 00 FF 
0d2b8     38 E4 85 F1 | 	sub	objptr, ##1080
0d2bc     F2 2E 02 F1 | 	add	local05, objptr
0d2c0     04 2E 06 F1 | 	add	local05, #4
0d2c4     17 35 02 FB | 	rdlong	local08, local05
0d2c8     15 34 0E F2 | 	cmp	local08, #21 wz
0d2cc     35 00 00 FF 
0d2d0     0C E4 85 F1 | 	sub	objptr, ##27148
0d2d4     54 01 90 5D |  if_ne	jmp	#LR__1057
0d2d8     37 00 00 FF 
0d2dc     44 E4 05 F1 | 	add	objptr, ##28228
0d2e0     F2 38 02 FB | 	rdlong	local10, objptr
0d2e4     01 38 06 F1 | 	add	local10, #1
0d2e8     F2 38 62 FC | 	wrlong	local10, objptr
0d2ec     37 00 00 FF 
0d2f0     44 E4 85 F1 | 	sub	objptr, ##28228
0d2f4                 | '   ct+=1 											' omit this lpar, this is for expr list
0d2f4                 | '   do
0d2f4                 | LR__1053
0d2f4     37 00 00 FF 
0d2f8     44 E4 05 F1 | 	add	objptr, ##28228
0d2fc     F2 2E 02 FB | 	rdlong	local05, objptr
0d300     01 2E 06 F1 | 	add	local05, #1
0d304     F2 2E 62 FC | 	wrlong	local05, objptr
0d308                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0d308                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0d308     03 2E 66 F0 | 	shl	local05, #3
0d30c     02 00 00 FF 
0d310     38 E4 85 F1 | 	sub	objptr, ##1080
0d314     F2 2E 02 F1 | 	add	local05, objptr
0d318     04 2E 06 F1 | 	add	local05, #4
0d31c     17 39 02 FB | 	rdlong	local10, local05
0d320     15 38 0E F2 | 	cmp	local10, #21 wz
0d324     35 00 00 FF 
0d328     0C E4 85 F1 | 	sub	objptr, ##27148
0d32c     44 00 90 5D |  if_ne	jmp	#LR__1054
0d330     37 00 00 FF 
0d334     44 E4 05 F1 | 	add	objptr, ##28228
0d338     F2 38 02 FB | 	rdlong	local10, objptr
0d33c     01 38 06 F1 | 	add	local10, #1
0d340     F2 38 62 FC | 	wrlong	local10, objptr
0d344     37 00 00 FF 
0d348     44 E4 85 F1 | 	sub	objptr, ##28228
0d34c     58 EB BF FD | 	call	#_expr
0d350     FD 3A 02 F6 | 	mov	local11, result1
0d354     37 00 00 FF 
0d358     44 E4 05 F1 | 	add	objptr, ##28228
0d35c     F2 38 02 FB | 	rdlong	local10, objptr
0d360     01 38 06 F1 | 	add	local10, #1
0d364     F2 38 62 FC | 	wrlong	local10, objptr
0d368     37 00 00 FF 
0d36c     44 E4 85 F1 | 	sub	objptr, ##28228
0d370     08 00 90 FD | 	jmp	#LR__1055
0d374                 | LR__1054
0d374     30 EB BF FD | 	call	#_expr
0d378     FD 3A 02 F6 | 	mov	local11, result1
0d37c                 | LR__1055
0d37c                 | '     if err>0 then return err
0d37c     01 3A 56 F2 | 	cmps	local11, #1 wc
0d380     1D FB 01 36 |  if_ae	mov	result1, local11
0d384     2C 02 90 3D |  if_ae	jmp	#LR__1059
0d388     01 36 06 F1 | 	add	local09, #1
0d38c     37 00 00 FF 
0d390     44 E4 05 F1 | 	add	objptr, ##28228
0d394     F2 2E 02 FB | 	rdlong	local05, objptr
0d398     03 2E 66 F0 | 	shl	local05, #3
0d39c     02 00 00 FF 
0d3a0     38 E4 85 F1 | 	sub	objptr, ##1080
0d3a4     F2 2E 02 F1 | 	add	local05, objptr
0d3a8     04 2E 06 F1 | 	add	local05, #4
0d3ac     17 3B 02 FB | 	rdlong	local11, local05
0d3b0     14 3A 0E F2 | 	cmp	local11, #20 wz
0d3b4     35 00 00 FF 
0d3b8     0C E4 85 F1 | 	sub	objptr, ##27148
0d3bc     34 00 90 AD |  if_e	jmp	#LR__1056
0d3c0     37 00 00 FF 
0d3c4     44 E4 05 F1 | 	add	objptr, ##28228
0d3c8     F2 3A 02 FB | 	rdlong	local11, objptr
0d3cc     03 3A 66 F0 | 	shl	local11, #3
0d3d0     02 00 00 FF 
0d3d4     38 E4 85 F1 | 	sub	objptr, ##1080
0d3d8     F2 3A 02 F1 | 	add	local11, objptr
0d3dc     04 3A 06 F1 | 	add	local11, #4
0d3e0     1D 3B 02 FB | 	rdlong	local11, local11
0d3e4     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d3e8     35 00 00 FF 
0d3ec     0C E4 85 F1 | 	sub	objptr, ##27148
0d3f0     00 FF 9F 5D |  if_ne	jmp	#LR__1053
0d3f4                 | LR__1056
0d3f4                 | '     if lparts(ct).token=token_end then return 14
0d3f4     37 00 00 FF 
0d3f8     44 E4 05 F1 | 	add	objptr, ##28228
0d3fc     F2 2E 02 FB | 	rdlong	local05, objptr
0d400     03 2E 66 F0 | 	shl	local05, #3
0d404     02 00 00 FF 
0d408     38 E4 85 F1 | 	sub	objptr, ##1080
0d40c     F2 2E 02 F1 | 	add	local05, objptr
0d410     04 2E 06 F1 | 	add	local05, #4
0d414     17 3B 02 FB | 	rdlong	local11, local05
0d418     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d41c     35 00 00 FF 
0d420     0C E4 85 F1 | 	sub	objptr, ##27148
0d424     0E FA 05 A6 |  if_e	mov	result1, #14
0d428     88 01 90 AD |  if_e	jmp	#LR__1059
0d42c                 | LR__1057
0d42c     1B 29 02 F6 | 	mov	local02, local09
0d430     11 2A 06 F6 | 	mov	local03, #17
0d434     19 27 02 F6 | 	mov	local01, local07
0d438     13 39 02 F6 | 	mov	local10, local01
0d43c     14 3D 02 F6 | 	mov	local12, local02
0d440     15 3F 02 F6 | 	mov	local13, local03
0d444     4A 00 00 FF 
0d448     7C E4 05 F1 | 	add	objptr, ##38012
0d44c     F2 40 02 FB | 	rdlong	local14, objptr
0d450     20 43 02 F6 | 	mov	local15, local14
0d454     01 42 66 F0 | 	shl	local15, #1
0d458     20 43 02 F1 | 	add	local15, local14
0d45c     02 42 66 F0 | 	shl	local15, #2
0d460     03 00 00 FF 
0d464     00 E4 85 F1 | 	sub	objptr, ##1536
0d468     F2 42 02 F1 | 	add	local15, objptr
0d46c     21 39 62 FC | 	wrlong	local10, local15
0d470     03 00 00 FF 
0d474     00 E4 05 F1 | 	add	objptr, ##1536
0d478     F2 38 02 FB | 	rdlong	local10, objptr
0d47c     1C 45 02 F6 | 	mov	local16, local10
0d480     01 44 66 F0 | 	shl	local16, #1
0d484     1C 45 02 F1 | 	add	local16, local10
0d488     02 44 66 F0 | 	shl	local16, #2
0d48c     03 00 00 FF 
0d490     00 E4 85 F1 | 	sub	objptr, ##1536
0d494     F2 44 02 F1 | 	add	local16, objptr
0d498     04 44 06 F1 | 	add	local16, #4
0d49c     22 3D 62 FC | 	wrlong	local12, local16
0d4a0     03 00 00 FF 
0d4a4     00 E4 05 F1 | 	add	objptr, ##1536
0d4a8     F2 38 02 FB | 	rdlong	local10, objptr
0d4ac     1C 47 02 F6 | 	mov	local17, local10
0d4b0     01 46 66 F0 | 	shl	local17, #1
0d4b4     1C 47 02 F1 | 	add	local17, local10
0d4b8     02 46 66 F0 | 	shl	local17, #2
0d4bc     03 00 00 FF 
0d4c0     00 E4 85 F1 | 	sub	objptr, ##1536
0d4c4     F2 46 02 F1 | 	add	local17, objptr
0d4c8     08 46 06 F1 | 	add	local17, #8
0d4cc     23 3F 62 FC | 	wrlong	local13, local17
0d4d0     03 00 00 FF 
0d4d4     00 E4 05 F1 | 	add	objptr, ##1536
0d4d8     F2 38 02 FB | 	rdlong	local10, objptr
0d4dc     01 38 06 F1 | 	add	local10, #1
0d4e0     F2 38 62 FC | 	wrlong	local10, objptr
0d4e4     4A 00 00 FF 
0d4e8     7C E4 85 F1 | 	sub	objptr, ##38012
0d4ec                 | ' t2.result.twowords(1)=numpar
0d4ec                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0d4ec                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d4ec                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d4ec     FF FF 7F FF 
0d4f0     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0d4f4     B8 00 90 5D |  if_ne	jmp	#LR__1058
0d4f8     15 2A 06 F6 | 	mov	local03, #21
0d4fc     13 39 02 F6 | 	mov	local10, local01
0d500     14 3D 02 F6 | 	mov	local12, local02
0d504     15 3F 02 F6 | 	mov	local13, local03
0d508     4A 00 00 FF 
0d50c     7C E4 05 F1 | 	add	objptr, ##38012
0d510     F2 40 02 FB | 	rdlong	local14, objptr
0d514     20 43 02 F6 | 	mov	local15, local14
0d518     01 42 66 F0 | 	shl	local15, #1
0d51c     20 43 02 F1 | 	add	local15, local14
0d520     02 42 66 F0 | 	shl	local15, #2
0d524     03 00 00 FF 
0d528     00 E4 85 F1 | 	sub	objptr, ##1536
0d52c     F2 42 02 F1 | 	add	local15, objptr
0d530     21 39 62 FC | 	wrlong	local10, local15
0d534     03 00 00 FF 
0d538     00 E4 05 F1 | 	add	objptr, ##1536
0d53c     F2 46 02 FB | 	rdlong	local17, objptr
0d540     23 45 02 F6 | 	mov	local16, local17
0d544     01 44 66 F0 | 	shl	local16, #1
0d548     23 45 02 F1 | 	add	local16, local17
0d54c     02 44 66 F0 | 	shl	local16, #2
0d550     03 00 00 FF 
0d554     00 E4 85 F1 | 	sub	objptr, ##1536
0d558     F2 44 02 F1 | 	add	local16, objptr
0d55c     04 44 06 F1 | 	add	local16, #4
0d560     22 3D 62 FC | 	wrlong	local12, local16
0d564     03 00 00 FF 
0d568     00 E4 05 F1 | 	add	objptr, ##1536
0d56c     F2 44 02 FB | 	rdlong	local16, objptr
0d570     22 47 02 F6 | 	mov	local17, local16
0d574     01 46 66 F0 | 	shl	local17, #1
0d578     22 47 02 F1 | 	add	local17, local16
0d57c     02 46 66 F0 | 	shl	local17, #2
0d580     03 00 00 FF 
0d584     00 E4 85 F1 | 	sub	objptr, ##1536
0d588     F2 46 02 F1 | 	add	local17, objptr
0d58c     08 46 06 F1 | 	add	local17, #8
0d590     23 3F 62 FC | 	wrlong	local13, local17
0d594     03 00 00 FF 
0d598     00 E4 05 F1 | 	add	objptr, ##1536
0d59c     F2 38 02 FB | 	rdlong	local10, objptr
0d5a0     01 38 06 F1 | 	add	local10, #1
0d5a4     F2 38 62 FC | 	wrlong	local10, objptr
0d5a8     4A 00 00 FF 
0d5ac     7C E4 85 F1 | 	sub	objptr, ##38012
0d5b0                 | LR__1058
0d5b0                 | ' return 0
0d5b0     00 FA 05 F6 | 	mov	result1, #0
0d5b4                 | LR__1059
0d5b4     A7 F0 03 F6 | 	mov	ptra, fp
0d5b8     B2 00 A0 FD | 	call	#popregs_
0d5bc                 | _getvar_ret
0d5bc     2D 00 64 FD | 	ret
0d5c0                 | 
0d5c0                 | ' 
0d5c0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d5c0                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0d5c0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d5c0                 | ' 
0d5c0                 | ' 
0d5c0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d5c0                 | ' '                                                                                                                                       -
0d5c0                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0d5c0                 | ' '                                                                                                                                       -
0d5c0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d5c0                 | ' 
0d5c0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d5c0                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0d5c0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d5c0                 | ' 
0d5c0                 | ' function execute_line (astart=0 as integer) as integer
0d5c0                 | _execute_line
0d5c0     04 4A 05 F6 | 	mov	COUNT_, #4
0d5c4     A8 00 A0 FD | 	call	#pushregs_
0d5c8     50 00 00 FF 
0d5cc     BC E4 05 F1 | 	add	objptr, ##41148
0d5d0     F2 00 68 FC | 	wrlong	#0, objptr
0d5d4                 | ' 
0d5d4                 | ' runptr2=0
0d5d4                 | ' for lineptr_e=astart to lineptr-1
0d5d4     06 00 00 FF 
0d5d8     3C E4 85 F1 | 	sub	objptr, ##3132
0d5dc     F2 12 62 FC | 	wrlong	arg01, objptr
0d5e0     04 E4 85 F1 | 	sub	objptr, #4
0d5e4     F2 26 02 FB | 	rdlong	local01, objptr
0d5e8     4A 00 00 FF 
0d5ec     7C E4 85 F1 | 	sub	objptr, ##38012
0d5f0                 | LR__1060
0d5f0     4A 00 00 FF 
0d5f4     80 E4 05 F1 | 	add	objptr, ##38016
0d5f8     F2 FA 01 FB | 	rdlong	result1, objptr
0d5fc     4A 00 00 FF 
0d600     80 E4 85 F1 | 	sub	objptr, ##38016
0d604     13 FB 51 F2 | 	cmps	result1, local01 wc
0d608     98 00 90 3D |  if_ae	jmp	#LR__1061
0d60c     4A 00 00 FF 
0d610     80 E4 05 F1 | 	add	objptr, ##38016
0d614     F2 FA 01 FB | 	rdlong	result1, objptr
0d618     FD 28 02 F6 | 	mov	local02, result1
0d61c     01 28 66 F0 | 	shl	local02, #1
0d620     FD 28 02 F1 | 	add	local02, result1
0d624     02 28 66 F0 | 	shl	local02, #2
0d628     03 00 00 FF 
0d62c     04 E4 85 F1 | 	sub	objptr, ##1540
0d630     F2 28 02 F1 | 	add	local02, objptr
0d634     08 28 06 F1 | 	add	local02, #8
0d638     14 29 02 FB | 	rdlong	local02, local02
0d63c     14 29 E2 F8 | 	getbyte	local02, local02, #0
0d640     02 28 66 F0 | 	shl	local02, #2
0d644     04 00 00 FF 
0d648     1C E4 85 F1 | 	sub	objptr, ##2076
0d64c     F2 28 02 F1 | 	add	local02, objptr
0d650     14 29 02 FB | 	rdlong	local02, local02
0d654     14 2B 02 F6 | 	mov	local03, local02
0d658     13 28 46 F7 | 	zerox	local02, #19
0d65c     14 2A 46 F0 | 	shr	local03, #20
0d660     02 2A 66 F0 | 	shl	local03, #2
0d664     ED 2A 02 F1 | 	add	local03, __methods__
0d668     15 2B 02 FB | 	rdlong	local03, local03
0d66c     43 00 00 FF 
0d670     60 E4 85 F1 | 	sub	objptr, ##34400
0d674     F2 2C 02 F6 | 	mov	local04, objptr
0d678     14 E5 01 F6 | 	mov	objptr, local02
0d67c     2D 2A 62 FD | 	call	local03
0d680     16 E5 01 F6 | 	mov	objptr, local04
0d684     4A 00 00 FF 
0d688     80 E4 05 F1 | 	add	objptr, ##38016
0d68c     F2 2C 02 FB | 	rdlong	local04, objptr
0d690     01 2C 06 F1 | 	add	local04, #1
0d694     F2 2C 62 FC | 	wrlong	local04, objptr
0d698     4A 00 00 FF 
0d69c     80 E4 85 F1 | 	sub	objptr, ##38016
0d6a0     4C FF 9F FD | 	jmp	#LR__1060
0d6a4                 | LR__1061
0d6a4                 | ' return runptr2
0d6a4     50 00 00 FF 
0d6a8     BC E4 05 F1 | 	add	objptr, ##41148
0d6ac     F2 FA 01 FB | 	rdlong	result1, objptr
0d6b0     50 00 00 FF 
0d6b4     BC E4 85 F1 | 	sub	objptr, ##41148
0d6b8     A7 F0 03 F6 | 	mov	ptra, fp
0d6bc     B2 00 A0 FD | 	call	#popregs_
0d6c0                 | _execute_line_ret
0d6c0     2D 00 64 FD | 	ret
0d6c4                 | 
0d6c4                 | ' 
0d6c4                 | ' 
0d6c4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d6c4                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0d6c4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d6c4                 | ' 
0d6c4                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0d6c4                 | ' 
0d6c4                 | ' function pop() as expr_result
0d6c4                 | _pop
0d6c4                 | ' if stackpointer=0 then
0d6c4     43 00 00 FF 
0d6c8     58 E4 05 F1 | 	add	objptr, ##34392
0d6cc     F2 FA 09 FB | 	rdlong	result1, objptr wz
0d6d0     43 00 00 FF 
0d6d4     58 E4 85 F1 | 	sub	objptr, ##34392
0d6d8     FF 04 06 A6 |  if_e	mov	_var03, #255
0d6dc     18 00 06 A6 |  if_e	mov	_var01, #24
0d6e0     68 00 90 AD |  if_e	jmp	#LR__1070
0d6e4     43 00 00 FF 
0d6e8     58 E4 05 F1 | 	add	objptr, ##34392
0d6ec     F2 FA 01 FB | 	rdlong	result1, objptr
0d6f0     01 FA 85 F1 | 	sub	result1, #1
0d6f4     F2 FA 61 FC | 	wrlong	result1, objptr
0d6f8     FD FE 01 F6 | 	mov	result3, result1
0d6fc     01 FE 65 F0 | 	shl	result3, #1
0d700     FD FE 01 F1 | 	add	result3, result1
0d704     02 FE 65 F0 | 	shl	result3, #2
0d708     0C 00 00 FF 
0d70c     0C E4 85 F1 | 	sub	objptr, ##6156
0d710     F2 FE 01 F1 | 	add	result3, objptr
0d714     FF 00 02 FB | 	rdlong	_var01, result3
0d718     04 FE 05 F1 | 	add	result3, #4
0d71c     FF FE 01 FB | 	rdlong	result3, result3
0d720     FD FC 01 F6 | 	mov	result2, result1
0d724     01 FC 65 F0 | 	shl	result2, #1
0d728     FD FC 01 F1 | 	add	result2, result1
0d72c     02 FC 65 F0 | 	shl	result2, #2
0d730     F2 FC 01 F1 | 	add	result2, objptr
0d734     08 FC 05 F1 | 	add	result2, #8
0d738     FE FA 01 FB | 	rdlong	result1, result2
0d73c     FF 02 02 F6 | 	mov	_var02, result3
0d740     FD 04 02 F6 | 	mov	_var03, result1
0d744     37 00 00 FF 
0d748     4C E4 85 F1 | 	sub	objptr, ##28236
0d74c                 | LR__1070
0d74c                 | ' return t1
0d74c     01 FD 01 F6 | 	mov	result2, _var02
0d750     02 FF 01 F6 | 	mov	result3, _var03
0d754     00 FB 01 F6 | 	mov	result1, _var01
0d758                 | _pop_ret
0d758     2D 00 64 FD | 	ret
0d75c                 | 
0d75c                 | ' 
0d75c                 | ' sub push(t1 as expr_result )
0d75c                 | _push
0d75c                 | ' if stackpointer<maxstack then 
0d75c     43 00 00 FF 
0d760     58 E4 05 F1 | 	add	objptr, ##34392
0d764     F2 00 02 FB | 	rdlong	_var01, objptr
0d768     43 00 00 FF 
0d76c     58 E4 85 F1 | 	sub	objptr, ##34392
0d770     01 00 00 FF 
0d774     00 00 56 F2 | 	cmps	_var01, ##512 wc
0d778     BC 00 90 3D |  if_ae	jmp	#LR__1080
0d77c     09 01 02 FB | 	rdlong	_var01, arg01
0d780     04 12 06 F1 | 	add	arg01, #4
0d784     09 03 02 FB | 	rdlong	_var02, arg01
0d788     04 12 06 F1 | 	add	arg01, #4
0d78c     09 13 02 FB | 	rdlong	arg01, arg01
0d790     43 00 00 FF 
0d794     58 E4 05 F1 | 	add	objptr, ##34392
0d798     F2 04 02 FB | 	rdlong	_var03, objptr
0d79c     02 07 02 F6 | 	mov	_var04, _var03
0d7a0     01 06 66 F0 | 	shl	_var04, #1
0d7a4     02 07 02 F1 | 	add	_var04, _var03
0d7a8     02 06 66 F0 | 	shl	_var04, #2
0d7ac     0C 00 00 FF 
0d7b0     0C E4 85 F1 | 	sub	objptr, ##6156
0d7b4     F2 06 02 F1 | 	add	_var04, objptr
0d7b8     03 01 62 FC | 	wrlong	_var01, _var04
0d7bc     0C 00 00 FF 
0d7c0     0C E4 05 F1 | 	add	objptr, ##6156
0d7c4     F2 06 02 FB | 	rdlong	_var04, objptr
0d7c8     03 05 02 F6 | 	mov	_var03, _var04
0d7cc     01 04 66 F0 | 	shl	_var03, #1
0d7d0     03 05 02 F1 | 	add	_var03, _var04
0d7d4     02 04 66 F0 | 	shl	_var03, #2
0d7d8     0C 00 00 FF 
0d7dc     0C E4 85 F1 | 	sub	objptr, ##6156
0d7e0     F2 04 02 F1 | 	add	_var03, objptr
0d7e4     04 04 06 F1 | 	add	_var03, #4
0d7e8     02 03 62 FC | 	wrlong	_var02, _var03
0d7ec     0C 00 00 FF 
0d7f0     0C E4 05 F1 | 	add	objptr, ##6156
0d7f4     F2 06 02 FB | 	rdlong	_var04, objptr
0d7f8     03 05 02 F6 | 	mov	_var03, _var04
0d7fc     01 04 66 F0 | 	shl	_var03, #1
0d800     03 05 02 F1 | 	add	_var03, _var04
0d804     02 04 66 F0 | 	shl	_var03, #2
0d808     0C 00 00 FF 
0d80c     0C E4 85 F1 | 	sub	objptr, ##6156
0d810     F2 04 02 F1 | 	add	_var03, objptr
0d814     08 04 06 F1 | 	add	_var03, #8
0d818     02 13 62 FC | 	wrlong	arg01, _var03
0d81c     0C 00 00 FF 
0d820     0C E4 05 F1 | 	add	objptr, ##6156
0d824     F2 00 02 FB | 	rdlong	_var01, objptr
0d828     01 00 06 F1 | 	add	_var01, #1
0d82c     F2 00 62 FC | 	wrlong	_var01, objptr
0d830     43 00 00 FF 
0d834     58 E4 85 F1 | 	sub	objptr, ##34392
0d838                 | LR__1080
0d838                 | _push_ret
0d838     2D 00 64 FD | 	ret
0d83c                 | 
0d83c                 | ' 
0d83c                 | ' ' -------------------------------- Runtime converting functions
0d83c                 | ' 
0d83c                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0d83c                 | ' 
0d83c                 | ' function  convertstring(psaddr as ulong) as string
0d83c                 | _convertstring
0d83c     04 4A 05 F6 | 	mov	COUNT_, #4
0d840     A8 00 A0 FD | 	call	#pushregs_
0d844     09 27 02 F6 | 	mov	local01, arg01
0d848     D8 5F B1 FD | 	call	#_pslpeek
0d84c     FD 28 02 F6 | 	mov	local02, result1
0d850     B9 01 00 FF 
0d854     1F 2A 06 F6 | 	mov	local03, ##@LR__5871
0d858                 | ' l=pslpeek(psaddr) 
0d858                 | ' s="" 
0d858                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0d858     01 2C 06 F6 | 	mov	local04, #1
0d85c     01 28 06 F1 | 	add	local02, #1
0d860                 | LR__1090
0d860     14 2D 52 F2 | 	cmps	local04, local02 wc
0d864     30 00 90 3D |  if_ae	jmp	#LR__1091
0d868     13 13 02 F6 | 	mov	arg01, local01
0d86c     03 12 06 F1 | 	add	arg01, #3
0d870     16 13 02 F1 | 	add	arg01, local04
0d874     54 5F B1 FD | 	call	#_pspeek
0d878     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0d87c     30 B9 B1 FD | 	call	#__system__Chr_S
0d880     FD 14 02 F6 | 	mov	arg02, result1
0d884     15 13 02 F6 | 	mov	arg01, local03
0d888     40 97 B1 FD | 	call	#__system___string_concat
0d88c     FD 2A 02 F6 | 	mov	local03, result1
0d890     01 2C 06 F1 | 	add	local04, #1
0d894     C8 FF 9F FD | 	jmp	#LR__1090
0d898                 | LR__1091
0d898                 | ' return s
0d898     15 FB 01 F6 | 	mov	result1, local03
0d89c     A7 F0 03 F6 | 	mov	ptra, fp
0d8a0     B2 00 A0 FD | 	call	#popregs_
0d8a4                 | _convertstring_ret
0d8a4     2D 00 64 FD | 	ret
0d8a8                 | 
0d8a8                 | ' 
0d8a8                 | ' ' converts a variable to an integer
0d8a8                 | ' 
0d8a8                 | ' function converttoint (t1 as expr_result) as integer 
0d8a8                 | _converttoint
0d8a8     02 4A 05 F6 | 	mov	COUNT_, #2
0d8ac     A8 00 A0 FD | 	call	#pushregs_
0d8b0     09 27 02 F6 | 	mov	local01, arg01
0d8b4                 | ' 
0d8b4                 | ' select case t1.result_type
0d8b4     08 26 06 F1 | 	add	local01, #8
0d8b8     13 29 02 FB | 	rdlong	local02, local01
0d8bc     08 26 86 F1 | 	sub	local01, #8
0d8c0     1C 28 0E F2 | 	cmp	local02, #28 wz
0d8c4     2C 00 90 AD |  if_e	jmp	#LR__1100
0d8c8     1D 28 0E F2 | 	cmp	local02, #29 wz
0d8cc     2C 00 90 AD |  if_e	jmp	#LR__1101
0d8d0     1E 28 0E F2 | 	cmp	local02, #30 wz
0d8d4     2C 00 90 AD |  if_e	jmp	#LR__1102
0d8d8     1F 28 0E F2 | 	cmp	local02, #31 wz
0d8dc     34 00 90 AD |  if_e	jmp	#LR__1103
0d8e0     2B 28 0E F2 | 	cmp	local02, #43 wz
0d8e4     44 00 90 AD |  if_e	jmp	#LR__1104
0d8e8     2C 28 0E F2 | 	cmp	local02, #44 wz
0d8ec     5C 00 90 AD |  if_e	jmp	#LR__1105
0d8f0     60 00 90 FD | 	jmp	#LR__1106
0d8f4                 | LR__1100
0d8f4     13 FB 01 FB | 	rdlong	result1, local01
0d8f8     5C 00 90 FD | 	jmp	#LR__1107
0d8fc                 | LR__1101
0d8fc     13 FB 01 FB | 	rdlong	result1, local01
0d900     54 00 90 FD | 	jmp	#LR__1107
0d904                 | LR__1102
0d904     13 13 02 FB | 	rdlong	arg01, local01
0d908     01 14 06 F6 | 	mov	arg02, #1
0d90c     A0 C9 B1 FD | 	call	#__system___float_tointeger
0d910     44 00 90 FD | 	jmp	#LR__1107
0d914                 | LR__1103
0d914     13 13 02 FB | 	rdlong	arg01, local01
0d918     D8 CC B1 FD | 	call	#__system____builtin_atof
0d91c     FD 12 02 F6 | 	mov	arg01, result1
0d920     01 14 06 F6 | 	mov	arg02, #1
0d924     88 C9 B1 FD | 	call	#__system___float_tointeger
0d928     2C 00 90 FD | 	jmp	#LR__1107
0d92c                 | LR__1104
0d92c     13 13 02 FB | 	rdlong	arg01, local01
0d930     08 FF BF FD | 	call	#_convertstring
0d934     FD 12 02 F6 | 	mov	arg01, result1
0d938     B8 CC B1 FD | 	call	#__system____builtin_atof
0d93c     FD 12 02 F6 | 	mov	arg01, result1
0d940     01 14 06 F6 | 	mov	arg02, #1
0d944     68 C9 B1 FD | 	call	#__system___float_tointeger
0d948     0C 00 90 FD | 	jmp	#LR__1107
0d94c                 | LR__1105
0d94c     13 FB 01 FB | 	rdlong	result1, local01
0d950     04 00 90 FD | 	jmp	#LR__1107
0d954                 | LR__1106
0d954     00 FA 05 F6 | 	mov	result1, #0
0d958                 | LR__1107
0d958     A7 F0 03 F6 | 	mov	ptra, fp
0d95c     B2 00 A0 FD | 	call	#popregs_
0d960                 | _converttoint_ret
0d960     2D 00 64 FD | 	ret
0d964                 | 
0d964                 | ' 
0d964                 | ' ' converts a variable to float
0d964                 | ' 
0d964                 | ' function converttofloat (t1 as expr_result) as single
0d964                 | _converttofloat
0d964     03 4A 05 F6 | 	mov	COUNT_, #3
0d968     A8 00 A0 FD | 	call	#pushregs_
0d96c     09 27 02 F6 | 	mov	local01, arg01
0d970                 | ' 
0d970                 | ' select case t1.result_type
0d970     08 26 06 F1 | 	add	local01, #8
0d974     13 29 02 FB | 	rdlong	local02, local01
0d978     08 26 86 F1 | 	sub	local01, #8
0d97c     1C 28 0E F2 | 	cmp	local02, #28 wz
0d980     24 00 90 AD |  if_e	jmp	#LR__1110
0d984     1D 28 0E F2 | 	cmp	local02, #29 wz
0d988     38 00 90 AD |  if_e	jmp	#LR__1111
0d98c     1E 28 0E F2 | 	cmp	local02, #30 wz
0d990     3C 00 90 AD |  if_e	jmp	#LR__1112
0d994     1F 28 0E F2 | 	cmp	local02, #31 wz
0d998     3C 00 90 AD |  if_e	jmp	#LR__1113
0d99c     2B 28 0E F2 | 	cmp	local02, #43 wz
0d9a0     40 00 90 AD |  if_e	jmp	#LR__1114
0d9a4     50 00 90 FD | 	jmp	#LR__1115
0d9a8                 | LR__1110
0d9a8     13 13 02 FB | 	rdlong	arg01, local01
0d9ac     09 13 52 F6 | 	abs	arg01, arg01 wc
0d9b0     1F 2A C6 C9 |  if_b	decod	local03, #31
0d9b4     00 2A 06 36 |  if_ae	mov	local03, #0
0d9b8     28 C0 B1 FD | 	call	#__system___float_fromuns
0d9bc     15 FB 61 F5 | 	xor	result1, local03
0d9c0     38 00 90 FD | 	jmp	#LR__1116
0d9c4                 | LR__1111
0d9c4     13 13 02 FB | 	rdlong	arg01, local01
0d9c8     18 C0 B1 FD | 	call	#__system___float_fromuns
0d9cc     2C 00 90 FD | 	jmp	#LR__1116
0d9d0                 | LR__1112
0d9d0     13 FB 01 FB | 	rdlong	result1, local01
0d9d4     24 00 90 FD | 	jmp	#LR__1116
0d9d8                 | LR__1113
0d9d8     13 13 02 FB | 	rdlong	arg01, local01
0d9dc     14 CC B1 FD | 	call	#__system____builtin_atof
0d9e0     18 00 90 FD | 	jmp	#LR__1116
0d9e4                 | LR__1114
0d9e4     13 13 02 FB | 	rdlong	arg01, local01
0d9e8     50 FE BF FD | 	call	#_convertstring
0d9ec     FD 12 02 F6 | 	mov	arg01, result1
0d9f0     00 CC B1 FD | 	call	#__system____builtin_atof
0d9f4     04 00 90 FD | 	jmp	#LR__1116
0d9f8                 | LR__1115
0d9f8     00 FA 05 F6 | 	mov	result1, #0
0d9fc                 | LR__1116
0d9fc     A7 F0 03 F6 | 	mov	ptra, fp
0da00     B2 00 A0 FD | 	call	#popregs_
0da04                 | _converttofloat_ret
0da04     2D 00 64 FD | 	ret
0da08                 | 
0da08                 | ' 
0da08                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0da08                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0da08                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0da08                 | ' 
0da08                 | ' 
0da08                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0da08                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0da08                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0da08                 | ' 
0da08                 | ' '-------------------- abs
0da08                 | ' 
0da08                 | ' sub do_abs
0da08                 | _do_abs
0da08     01 4A 05 F6 | 	mov	COUNT_, #1
0da0c     A8 00 A0 FD | 	call	#pushregs_
0da10     0C F0 07 F1 | 	add	ptra, #12
0da14     AC FC BF FD | 	call	#_pop
0da18     FF 26 02 F6 | 	mov	local01, result3
0da1c     A7 FA 61 FC | 	wrlong	result1, fp
0da20     04 4E 05 F1 | 	add	fp, #4
0da24     A7 FC 61 FC | 	wrlong	result2, fp
0da28     04 4E 05 F1 | 	add	fp, #4
0da2c     A7 26 62 FC | 	wrlong	local01, fp
0da30                 | ' 
0da30                 | ' t1=pop()
0da30                 | ' if t1.result_type=result_int then 
0da30     08 4E 85 F1 | 	sub	fp, #8
0da34     1C 26 0E F2 | 	cmp	local01, #28 wz
0da38     A7 12 02 AB |  if_e	rdlong	arg01, fp
0da3c     09 27 42 A6 |  if_e	abs	local01, arg01
0da40     A7 26 62 AC |  if_e	wrlong	local01, fp
0da44     2C 00 90 AD |  if_e	jmp	#LR__1120
0da48     08 4E 05 F1 | 	add	fp, #8
0da4c     A7 26 02 FB | 	rdlong	local01, fp
0da50     08 4E 85 F1 | 	sub	fp, #8
0da54     1E 26 0E F2 | 	cmp	local01, #30 wz
0da58     A7 FA 01 AB |  if_e	rdlong	result1, fp
0da5c     1F FA 05 A4 |  if_e	bitl	result1, #31
0da60     A7 FA 61 AC |  if_e	wrlong	result1, fp
0da64     08 4E 05 51 |  if_ne	add	fp, #8
0da68     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0da6c     08 4E 85 51 |  if_ne	sub	fp, #8
0da70     A7 50 68 5C |  if_ne	wrlong	#40, fp
0da74                 | LR__1120
0da74     A7 12 02 F6 | 	mov	arg01, fp
0da78     E0 FC BF FD | 	call	#_push
0da7c     A7 F0 03 F6 | 	mov	ptra, fp
0da80     B2 00 A0 FD | 	call	#popregs_
0da84                 | _do_abs_ret
0da84     2D 00 64 FD | 	ret
0da88                 | 
0da88                 | ' 
0da88                 | ' '-------------------- acos
0da88                 | ' 
0da88                 | ' sub do_acos
0da88                 | _do_acos
0da88     01 4A 05 F6 | 	mov	COUNT_, #1
0da8c     A8 00 A0 FD | 	call	#pushregs_
0da90     10 F0 07 F1 | 	add	ptra, #16
0da94     4A 00 00 FF 
0da98     80 E4 05 F1 | 	add	objptr, ##38016
0da9c     F2 26 02 FB | 	rdlong	local01, objptr
0daa0     13 17 02 F6 | 	mov	arg03, local01
0daa4     01 16 66 F0 | 	shl	arg03, #1
0daa8     13 17 02 F1 | 	add	arg03, local01
0daac     02 16 66 F0 | 	shl	arg03, #2
0dab0     03 00 00 FF 
0dab4     04 E4 85 F1 | 	sub	objptr, ##1540
0dab8     F2 16 02 F1 | 	add	arg03, objptr
0dabc     0B 17 02 FB | 	rdlong	arg03, arg03
0dac0     0C 4E 05 F1 | 	add	fp, #12
0dac4     A7 16 62 FC | 	wrlong	arg03, fp
0dac8                 | ' 
0dac8                 | ' numpar=compiledline(lineptr_e).result.uresult
0dac8                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0dac8     0C 4E 85 F1 | 	sub	fp, #12
0dacc     02 16 16 F2 | 	cmp	arg03, #2 wc
0dad0     47 00 00 FF 
0dad4     7C E4 85 F1 | 	sub	objptr, ##36476
0dad8     0C 4E 05 C1 |  if_b	add	fp, #12
0dadc     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dae0     0C 4E 85 C1 |  if_b	sub	fp, #12
0dae4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1130
0dae8     00 12 06 F6 | 	mov	arg01, #0
0daec     A8 F1 B1 FD | 	call	#__system___getiolock_0613
0daf0     FD 12 02 F6 | 	mov	arg01, result1
0daf4     78 94 B1 FD | 	call	#__system___lockmem
0daf8     B9 01 00 FF 
0dafc     20 14 06 F6 | 	mov	arg02, ##@LR__5872
0db00     00 12 06 F6 | 	mov	arg01, #0
0db04     00 16 06 F6 | 	mov	arg03, #0
0db08     58 A1 B1 FD | 	call	#__system___basic_print_string
0db0c     00 12 06 F6 | 	mov	arg01, #0
0db10     84 F1 B1 FD | 	call	#__system___getiolock_0613
0db14     FD 00 68 FC | 	wrlong	#0, result1
0db18     27 12 06 F6 | 	mov	arg01, #39
0db1c     00 14 06 F6 | 	mov	arg02, #0
0db20     30 5A B1 FD | 	call	#_printerror
0db24     64 00 90 FD | 	jmp	#LR__1131
0db28                 | LR__1130
0db28     98 FB BF FD | 	call	#_pop
0db2c     FF 26 02 F6 | 	mov	local01, result3
0db30     A7 FA 61 FC | 	wrlong	result1, fp
0db34     04 4E 05 F1 | 	add	fp, #4
0db38     A7 FC 61 FC | 	wrlong	result2, fp
0db3c     04 4E 05 F1 | 	add	fp, #4
0db40     A7 26 62 FC | 	wrlong	local01, fp
0db44     08 4E 85 F1 | 	sub	fp, #8
0db48     A7 12 02 F6 | 	mov	arg01, fp
0db4c     14 FE BF FD | 	call	#_converttofloat
0db50     FD 12 02 F6 | 	mov	arg01, result1
0db54     D0 CD B1 FD | 	call	#__system____builtin_acosf
0db58     FD 12 02 F6 | 	mov	arg01, result1
0db5c     52 00 00 FF 
0db60     AC E4 05 F1 | 	add	objptr, ##42156
0db64     F2 14 02 FB | 	rdlong	arg02, objptr
0db68     52 00 00 FF 
0db6c     AC E4 85 F1 | 	sub	objptr, ##42156
0db70     74 C2 B1 FD | 	call	#__system___float_mul
0db74     A7 FA 61 FC | 	wrlong	result1, fp
0db78     08 4E 05 F1 | 	add	fp, #8
0db7c     A7 3C 68 FC | 	wrlong	#30, fp
0db80     08 4E 85 F1 | 	sub	fp, #8
0db84     A7 12 02 F6 | 	mov	arg01, fp
0db88     D0 FB BF FD | 	call	#_push
0db8c                 | LR__1131
0db8c     A7 F0 03 F6 | 	mov	ptra, fp
0db90     B2 00 A0 FD | 	call	#popregs_
0db94                 | _do_acos_ret
0db94     2D 00 64 FD | 	ret
0db98                 | 
0db98                 | ' 
0db98                 | ' '-------------------- asc
0db98                 | ' 
0db98                 | ' sub do_asc
0db98                 | _do_asc
0db98     01 4A 05 F6 | 	mov	COUNT_, #1
0db9c     A8 00 A0 FD | 	call	#pushregs_
0dba0     14 F0 07 F1 | 	add	ptra, #20
0dba4     4A 00 00 FF 
0dba8     80 E4 05 F1 | 	add	objptr, ##38016
0dbac     F2 26 02 FB | 	rdlong	local01, objptr
0dbb0     13 17 02 F6 | 	mov	arg03, local01
0dbb4     01 16 66 F0 | 	shl	arg03, #1
0dbb8     13 17 02 F1 | 	add	arg03, local01
0dbbc     02 16 66 F0 | 	shl	arg03, #2
0dbc0     03 00 00 FF 
0dbc4     04 E4 85 F1 | 	sub	objptr, ##1540
0dbc8     F2 16 02 F1 | 	add	arg03, objptr
0dbcc     0B 17 02 FB | 	rdlong	arg03, arg03
0dbd0     0C 4E 05 F1 | 	add	fp, #12
0dbd4     A7 16 62 FC | 	wrlong	arg03, fp
0dbd8                 | ' 
0dbd8                 | ' numpar=compiledline(lineptr_e).result.uresult
0dbd8                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0dbd8     0C 4E 85 F1 | 	sub	fp, #12
0dbdc     02 16 16 F2 | 	cmp	arg03, #2 wc
0dbe0     47 00 00 FF 
0dbe4     7C E4 85 F1 | 	sub	objptr, ##36476
0dbe8     0C 4E 05 C1 |  if_b	add	fp, #12
0dbec     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dbf0     0C 4E 85 C1 |  if_b	sub	fp, #12
0dbf4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1140
0dbf8     00 12 06 F6 | 	mov	arg01, #0
0dbfc     98 F0 B1 FD | 	call	#__system___getiolock_0613
0dc00     FD 12 02 F6 | 	mov	arg01, result1
0dc04     68 93 B1 FD | 	call	#__system___lockmem
0dc08     B9 01 00 FF 
0dc0c     27 14 06 F6 | 	mov	arg02, ##@LR__5873
0dc10     00 12 06 F6 | 	mov	arg01, #0
0dc14     00 16 06 F6 | 	mov	arg03, #0
0dc18     48 A0 B1 FD | 	call	#__system___basic_print_string
0dc1c     00 12 06 F6 | 	mov	arg01, #0
0dc20     74 F0 B1 FD | 	call	#__system___getiolock_0613
0dc24     FD 00 68 FC | 	wrlong	#0, result1
0dc28     27 12 06 F6 | 	mov	arg01, #39
0dc2c     00 14 06 F6 | 	mov	arg02, #0
0dc30     20 59 B1 FD | 	call	#_printerror
0dc34     B4 00 90 FD | 	jmp	#LR__1143
0dc38                 | LR__1140
0dc38     88 FA BF FD | 	call	#_pop
0dc3c     FF 16 02 F6 | 	mov	arg03, result3
0dc40     A7 FA 61 FC | 	wrlong	result1, fp
0dc44     04 4E 05 F1 | 	add	fp, #4
0dc48     A7 FC 61 FC | 	wrlong	result2, fp
0dc4c     04 4E 05 F1 | 	add	fp, #4
0dc50     A7 16 62 FC | 	wrlong	arg03, fp
0dc54                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0dc54     08 4E 85 F1 | 	sub	fp, #8
0dc58     2B 16 0E F2 | 	cmp	arg03, #43 wz
0dc5c     18 00 90 5D |  if_ne	jmp	#LR__1141
0dc60     A7 12 02 FB | 	rdlong	arg01, fp
0dc64     D4 FB BF FD | 	call	#_convertstring
0dc68     A7 FA 61 FC | 	wrlong	result1, fp
0dc6c     08 4E 05 F1 | 	add	fp, #8
0dc70     A7 3E 68 FC | 	wrlong	#31, fp
0dc74     08 4E 85 F1 | 	sub	fp, #8
0dc78                 | LR__1141
0dc78                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0dc78     08 4E 05 F1 | 	add	fp, #8
0dc7c     A7 16 02 FB | 	rdlong	arg03, fp
0dc80     08 4E 85 F1 | 	sub	fp, #8
0dc84     1F 16 0E F2 | 	cmp	arg03, #31 wz
0dc88     40 00 90 AD |  if_e	jmp	#LR__1142
0dc8c     00 12 06 F6 | 	mov	arg01, #0
0dc90     04 F0 B1 FD | 	call	#__system___getiolock_0613
0dc94     FD 12 02 F6 | 	mov	arg01, result1
0dc98     D4 92 B1 FD | 	call	#__system___lockmem
0dc9c     B9 01 00 FF 
0dca0     2D 14 06 F6 | 	mov	arg02, ##@LR__5874
0dca4     00 12 06 F6 | 	mov	arg01, #0
0dca8     00 16 06 F6 | 	mov	arg03, #0
0dcac     B4 9F B1 FD | 	call	#__system___basic_print_string
0dcb0     00 12 06 F6 | 	mov	arg01, #0
0dcb4     E0 EF B1 FD | 	call	#__system___getiolock_0613
0dcb8     FD 00 68 FC | 	wrlong	#0, result1
0dcbc     0F 12 06 F6 | 	mov	arg01, #15
0dcc0     00 14 06 F6 | 	mov	arg02, #0
0dcc4     8C 58 B1 FD | 	call	#_printerror
0dcc8     20 00 90 FD | 	jmp	#LR__1143
0dccc                 | LR__1142
0dccc     A7 26 02 FB | 	rdlong	local01, fp
0dcd0     13 27 C2 FA | 	rdbyte	local01, local01
0dcd4     A7 26 62 FC | 	wrlong	local01, fp
0dcd8     08 4E 05 F1 | 	add	fp, #8
0dcdc     A7 38 68 FC | 	wrlong	#28, fp
0dce0     08 4E 85 F1 | 	sub	fp, #8
0dce4     A7 12 02 F6 | 	mov	arg01, fp
0dce8     70 FA BF FD | 	call	#_push
0dcec                 | LR__1143
0dcec     A7 F0 03 F6 | 	mov	ptra, fp
0dcf0     B2 00 A0 FD | 	call	#popregs_
0dcf4                 | _do_asc_ret
0dcf4     2D 00 64 FD | 	ret
0dcf8                 | 
0dcf8                 | ' 
0dcf8                 | ' '-------------------- asin
0dcf8                 | ' 
0dcf8                 | ' sub do_asin
0dcf8                 | _do_asin
0dcf8     01 4A 05 F6 | 	mov	COUNT_, #1
0dcfc     A8 00 A0 FD | 	call	#pushregs_
0dd00     10 F0 07 F1 | 	add	ptra, #16
0dd04     4A 00 00 FF 
0dd08     80 E4 05 F1 | 	add	objptr, ##38016
0dd0c     F2 26 02 FB | 	rdlong	local01, objptr
0dd10     13 17 02 F6 | 	mov	arg03, local01
0dd14     01 16 66 F0 | 	shl	arg03, #1
0dd18     13 17 02 F1 | 	add	arg03, local01
0dd1c     02 16 66 F0 | 	shl	arg03, #2
0dd20     03 00 00 FF 
0dd24     04 E4 85 F1 | 	sub	objptr, ##1540
0dd28     F2 16 02 F1 | 	add	arg03, objptr
0dd2c     0B 17 02 FB | 	rdlong	arg03, arg03
0dd30     0C 4E 05 F1 | 	add	fp, #12
0dd34     A7 16 62 FC | 	wrlong	arg03, fp
0dd38                 | ' 
0dd38                 | ' numpar=compiledline(lineptr_e).result.uresult
0dd38                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0dd38     0C 4E 85 F1 | 	sub	fp, #12
0dd3c     02 16 16 F2 | 	cmp	arg03, #2 wc
0dd40     47 00 00 FF 
0dd44     7C E4 85 F1 | 	sub	objptr, ##36476
0dd48     0C 4E 05 C1 |  if_b	add	fp, #12
0dd4c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dd50     0C 4E 85 C1 |  if_b	sub	fp, #12
0dd54     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0dd58     00 12 06 F6 | 	mov	arg01, #0
0dd5c     38 EF B1 FD | 	call	#__system___getiolock_0613
0dd60     FD 12 02 F6 | 	mov	arg01, result1
0dd64     08 92 B1 FD | 	call	#__system___lockmem
0dd68     B9 01 00 FF 
0dd6c     33 14 06 F6 | 	mov	arg02, ##@LR__5875
0dd70     00 12 06 F6 | 	mov	arg01, #0
0dd74     00 16 06 F6 | 	mov	arg03, #0
0dd78     E8 9E B1 FD | 	call	#__system___basic_print_string
0dd7c     00 12 06 F6 | 	mov	arg01, #0
0dd80     14 EF B1 FD | 	call	#__system___getiolock_0613
0dd84     FD 00 68 FC | 	wrlong	#0, result1
0dd88     27 12 06 F6 | 	mov	arg01, #39
0dd8c     00 14 06 F6 | 	mov	arg02, #0
0dd90     C0 57 B1 FD | 	call	#_printerror
0dd94     64 00 90 FD | 	jmp	#LR__1151
0dd98                 | LR__1150
0dd98     28 F9 BF FD | 	call	#_pop
0dd9c     FF 26 02 F6 | 	mov	local01, result3
0dda0     A7 FA 61 FC | 	wrlong	result1, fp
0dda4     04 4E 05 F1 | 	add	fp, #4
0dda8     A7 FC 61 FC | 	wrlong	result2, fp
0ddac     04 4E 05 F1 | 	add	fp, #4
0ddb0     A7 26 62 FC | 	wrlong	local01, fp
0ddb4     08 4E 85 F1 | 	sub	fp, #8
0ddb8     A7 12 02 F6 | 	mov	arg01, fp
0ddbc     A4 FB BF FD | 	call	#_converttofloat
0ddc0     FD 12 02 F6 | 	mov	arg01, result1
0ddc4     14 CB B1 FD | 	call	#__system____builtin_asinf
0ddc8     FD 12 02 F6 | 	mov	arg01, result1
0ddcc     52 00 00 FF 
0ddd0     AC E4 05 F1 | 	add	objptr, ##42156
0ddd4     F2 14 02 FB | 	rdlong	arg02, objptr
0ddd8     52 00 00 FF 
0dddc     AC E4 85 F1 | 	sub	objptr, ##42156
0dde0     04 C0 B1 FD | 	call	#__system___float_mul
0dde4     A7 FA 61 FC | 	wrlong	result1, fp
0dde8     08 4E 05 F1 | 	add	fp, #8
0ddec     A7 3C 68 FC | 	wrlong	#30, fp
0ddf0     08 4E 85 F1 | 	sub	fp, #8
0ddf4     A7 12 02 F6 | 	mov	arg01, fp
0ddf8     60 F9 BF FD | 	call	#_push
0ddfc                 | LR__1151
0ddfc     A7 F0 03 F6 | 	mov	ptra, fp
0de00     B2 00 A0 FD | 	call	#popregs_
0de04                 | _do_asin_ret
0de04     2D 00 64 FD | 	ret
0de08                 | 
0de08                 | ' 
0de08                 | ' '-------------------- atn
0de08                 | ' 
0de08                 | ' sub do_atn
0de08                 | _do_atn
0de08     01 4A 05 F6 | 	mov	COUNT_, #1
0de0c     A8 00 A0 FD | 	call	#pushregs_
0de10     10 F0 07 F1 | 	add	ptra, #16
0de14     4A 00 00 FF 
0de18     80 E4 05 F1 | 	add	objptr, ##38016
0de1c     F2 26 02 FB | 	rdlong	local01, objptr
0de20     13 17 02 F6 | 	mov	arg03, local01
0de24     01 16 66 F0 | 	shl	arg03, #1
0de28     13 17 02 F1 | 	add	arg03, local01
0de2c     02 16 66 F0 | 	shl	arg03, #2
0de30     03 00 00 FF 
0de34     04 E4 85 F1 | 	sub	objptr, ##1540
0de38     F2 16 02 F1 | 	add	arg03, objptr
0de3c     0B 17 02 FB | 	rdlong	arg03, arg03
0de40     0C 4E 05 F1 | 	add	fp, #12
0de44     A7 16 62 FC | 	wrlong	arg03, fp
0de48                 | ' 
0de48                 | ' numpar=compiledline(lineptr_e).result.uresult
0de48                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0de48     0C 4E 85 F1 | 	sub	fp, #12
0de4c     02 16 16 F2 | 	cmp	arg03, #2 wc
0de50     47 00 00 FF 
0de54     7C E4 85 F1 | 	sub	objptr, ##36476
0de58     0C 4E 05 C1 |  if_b	add	fp, #12
0de5c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0de60     0C 4E 85 C1 |  if_b	sub	fp, #12
0de64     40 00 90 4D |  if_c_and_nz	jmp	#LR__1160
0de68     00 12 06 F6 | 	mov	arg01, #0
0de6c     28 EE B1 FD | 	call	#__system___getiolock_0613
0de70     FD 12 02 F6 | 	mov	arg01, result1
0de74     F8 90 B1 FD | 	call	#__system___lockmem
0de78     B9 01 00 FF 
0de7c     3A 14 06 F6 | 	mov	arg02, ##@LR__5876
0de80     00 12 06 F6 | 	mov	arg01, #0
0de84     00 16 06 F6 | 	mov	arg03, #0
0de88     D8 9D B1 FD | 	call	#__system___basic_print_string
0de8c     00 12 06 F6 | 	mov	arg01, #0
0de90     04 EE B1 FD | 	call	#__system___getiolock_0613
0de94     FD 00 68 FC | 	wrlong	#0, result1
0de98     27 12 06 F6 | 	mov	arg01, #39
0de9c     00 14 06 F6 | 	mov	arg02, #0
0dea0     B0 56 B1 FD | 	call	#_printerror
0dea4     6C 00 90 FD | 	jmp	#LR__1161
0dea8                 | LR__1160
0dea8     18 F8 BF FD | 	call	#_pop
0deac     FF 26 02 F6 | 	mov	local01, result3
0deb0     A7 FA 61 FC | 	wrlong	result1, fp
0deb4     04 4E 05 F1 | 	add	fp, #4
0deb8     A7 FC 61 FC | 	wrlong	result2, fp
0debc     04 4E 05 F1 | 	add	fp, #4
0dec0     A7 26 62 FC | 	wrlong	local01, fp
0dec4     08 4E 85 F1 | 	sub	fp, #8
0dec8     A7 12 02 F6 | 	mov	arg01, fp
0decc     94 FA BF FD | 	call	#_converttofloat
0ded0     FD 12 02 F6 | 	mov	arg01, result1
0ded4     00 C0 1F FF 
0ded8     00 14 06 F6 | 	mov	arg02, ##1065353216
0dedc     94 CA B1 FD | 	call	#__system____builtin_atan2f
0dee0     FD 12 02 F6 | 	mov	arg01, result1
0dee4     52 00 00 FF 
0dee8     AC E4 05 F1 | 	add	objptr, ##42156
0deec     F2 14 02 FB | 	rdlong	arg02, objptr
0def0     52 00 00 FF 
0def4     AC E4 85 F1 | 	sub	objptr, ##42156
0def8     EC BE B1 FD | 	call	#__system___float_mul
0defc     A7 FA 61 FC | 	wrlong	result1, fp
0df00     08 4E 05 F1 | 	add	fp, #8
0df04     A7 3C 68 FC | 	wrlong	#30, fp
0df08     08 4E 85 F1 | 	sub	fp, #8
0df0c     A7 12 02 F6 | 	mov	arg01, fp
0df10     48 F8 BF FD | 	call	#_push
0df14                 | LR__1161
0df14     A7 F0 03 F6 | 	mov	ptra, fp
0df18     B2 00 A0 FD | 	call	#popregs_
0df1c                 | _do_atn_ret
0df1c     2D 00 64 FD | 	ret
0df20                 | 
0df20                 | ' 
0df20                 | ' '-------------------- beep
0df20                 | ' 
0df20                 | ' sub do_beep
0df20                 | _do_beep
0df20     02 4A 05 F6 | 	mov	COUNT_, #2
0df24     A8 00 A0 FD | 	call	#pushregs_
0df28     20 F0 07 F1 | 	add	ptra, #32
0df2c     94 F7 BF FD | 	call	#_pop
0df30     FD 26 02 F6 | 	mov	local01, result1
0df34     FE 1C 02 F6 | 	mov	arg06, result2
0df38     FF 28 02 F6 | 	mov	local02, result3
0df3c     0C 4E 05 F1 | 	add	fp, #12
0df40     A7 26 62 FC | 	wrlong	local01, fp
0df44     04 4E 05 F1 | 	add	fp, #4
0df48     A7 1C 62 FC | 	wrlong	arg06, fp
0df4c     04 4E 05 F1 | 	add	fp, #4
0df50     A7 28 62 FC | 	wrlong	local02, fp
0df54     14 4E 85 F1 | 	sub	fp, #20
0df58     68 F7 BF FD | 	call	#_pop
0df5c     A7 FA 61 FC | 	wrlong	result1, fp
0df60     04 4E 05 F1 | 	add	fp, #4
0df64     A7 FC 61 FC | 	wrlong	result2, fp
0df68     04 4E 05 F1 | 	add	fp, #4
0df6c     A7 FE 61 FC | 	wrlong	result3, fp
0df70                 | ' 
0df70                 | ' t2=pop()
0df70                 | ' t1=pop()
0df70                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0df70     08 4E 85 F1 | 	sub	fp, #8
0df74     1C FE 0D F2 | 	cmp	result3, #28 wz
0df78     08 4E 05 51 |  if_ne	add	fp, #8
0df7c     A7 28 02 5B |  if_ne	rdlong	local02, fp
0df80     08 4E 85 51 |  if_ne	sub	fp, #8
0df84     1D 28 0E 52 |  if_ne	cmp	local02, #29 wz
0df88     A7 26 02 AB |  if_e	rdlong	local01, fp
0df8c     18 4E 05 A1 |  if_e	add	fp, #24
0df90     A7 26 62 AC |  if_e	wrlong	local01, fp
0df94     18 4E 85 A1 |  if_e	sub	fp, #24
0df98     14 00 90 AD |  if_e	jmp	#LR__1170
0df9c     A7 12 02 F6 | 	mov	arg01, fp
0dfa0     04 F9 BF FD | 	call	#_converttoint
0dfa4     18 4E 05 F1 | 	add	fp, #24
0dfa8     A7 FA 61 FC | 	wrlong	result1, fp
0dfac     18 4E 85 F1 | 	sub	fp, #24
0dfb0                 | LR__1170
0dfb0     1C 4E 05 F1 | 	add	fp, #28
0dfb4     A7 FE 48 FC | 	wrbyte	#127, fp
0dfb8     01 4E 05 F1 | 	add	fp, #1
0dfbc     A7 00 49 FC | 	wrbyte	#128, fp
0dfc0     01 4E 85 F1 | 	sub	fp, #1
0dfc4     A7 14 02 F6 | 	mov	arg02, fp
0dfc8     04 4E 85 F1 | 	sub	fp, #4
0dfcc     A7 16 02 FB | 	rdlong	arg03, fp
0dfd0     18 4E 85 F1 | 	sub	fp, #24
0dfd4     01 16 66 F0 | 	shl	arg03, #1
0dfd8     07 12 06 F6 | 	mov	arg01, #7
0dfdc     0E 18 C6 F9 | 	decod	arg04, #14
0dfe0     02 1A 06 F6 | 	mov	arg05, #2
0dfe4     00 1C 06 F6 | 	mov	arg06, #0
0dfe8     0B 00 00 FF 
0dfec     CC E4 05 F1 | 	add	objptr, ##5836
0dff0     D8 8B B1 FD | 	call	#_audio096_spin2_play8
0dff4     0B 00 00 FF 
0dff8     CC E4 85 F1 | 	sub	objptr, ##5836
0dffc     0C 4E 05 F1 | 	add	fp, #12
0e000     A7 12 02 F6 | 	mov	arg01, fp
0e004     0C 4E 85 F1 | 	sub	fp, #12
0e008     50 F7 BF FD | 	call	#_push
0e00c     58 EA B0 FD | 	call	#_do_waitms
0e010     07 12 06 F6 | 	mov	arg01, #7
0e014     0B 00 00 FF 
0e018     CC E4 05 F1 | 	add	objptr, ##5836
0e01c     50 8C B1 FD | 	call	#_audio096_spin2_stop
0e020     0B 00 00 FF 
0e024     CC E4 85 F1 | 	sub	objptr, ##5836
0e028     A7 F0 03 F6 | 	mov	ptra, fp
0e02c     B2 00 A0 FD | 	call	#popregs_
0e030                 | _do_beep_ret
0e030     2D 00 64 FD | 	ret
0e034                 | 
0e034                 | ' 
0e034                 | ' '-------------------- blit
0e034                 | ' 
0e034                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0e034                 | ' sub do_blit
0e034                 | _do_blit
0e034     02 4A 05 F6 | 	mov	COUNT_, #2
0e038     A8 00 A0 FD | 	call	#pushregs_
0e03c     3C F0 07 F1 | 	add	ptra, #60
0e040     4A 00 00 FF 
0e044     80 E4 05 F1 | 	add	objptr, ##38016
0e048     F2 26 02 FB | 	rdlong	local01, objptr
0e04c     13 25 02 F6 | 	mov	arg10, local01
0e050     01 24 66 F0 | 	shl	arg10, #1
0e054     13 25 02 F1 | 	add	arg10, local01
0e058     02 24 66 F0 | 	shl	arg10, #2
0e05c     03 00 00 FF 
0e060     04 E4 85 F1 | 	sub	objptr, ##1540
0e064     F2 24 02 F1 | 	add	arg10, objptr
0e068     12 25 02 FB | 	rdlong	arg10, arg10
0e06c     38 4E 05 F1 | 	add	fp, #56
0e070     A7 24 62 FC | 	wrlong	arg10, fp
0e074                 | ' 
0e074                 | ' numpar=compiledline(lineptr_e).result.uresult
0e074                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0e074     38 4E 85 F1 | 	sub	fp, #56
0e078     0A 24 0E F2 | 	cmp	arg10, #10 wz
0e07c     47 00 00 FF 
0e080     7C E4 85 F1 | 	sub	objptr, ##36476
0e084     38 4E 05 51 |  if_ne	add	fp, #56
0e088     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e08c     38 4E 85 51 |  if_ne	sub	fp, #56
0e090     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0e094     50 00 90 AD |  if_e	jmp	#LR__1180
0e098     00 12 06 F6 | 	mov	arg01, #0
0e09c     F8 EB B1 FD | 	call	#__system___getiolock_0613
0e0a0     FD 12 02 F6 | 	mov	arg01, result1
0e0a4     C8 8E B1 FD | 	call	#__system___lockmem
0e0a8     B9 01 00 FF 
0e0ac     40 14 06 F6 | 	mov	arg02, ##@LR__5877
0e0b0     00 12 06 F6 | 	mov	arg01, #0
0e0b4     00 16 06 F6 | 	mov	arg03, #0
0e0b8     A8 9B B1 FD | 	call	#__system___basic_print_string
0e0bc     00 12 06 F6 | 	mov	arg01, #0
0e0c0     D4 EB B1 FD | 	call	#__system___getiolock_0613
0e0c4     FD 00 68 FC | 	wrlong	#0, result1
0e0c8     50 00 00 FF 
0e0cc     F0 E4 05 F1 | 	add	objptr, ##41200
0e0d0     F2 14 02 FB | 	rdlong	arg02, objptr
0e0d4     50 00 00 FF 
0e0d8     F0 E4 85 F1 | 	sub	objptr, ##41200
0e0dc     27 12 06 F6 | 	mov	arg01, #39
0e0e0     70 54 B1 FD | 	call	#_printerror
0e0e4     44 01 90 FD | 	jmp	#LR__1185
0e0e8                 | LR__1180
0e0e8                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0e0e8     38 4E 05 F1 | 	add	fp, #56
0e0ec     A7 28 02 FB | 	rdlong	local02, fp
0e0f0     01 28 86 F1 | 	sub	local02, #1
0e0f4     04 4E 85 F1 | 	sub	fp, #4
0e0f8     A7 28 62 FC | 	wrlong	local02, fp
0e0fc     34 4E 85 F1 | 	sub	fp, #52
0e100                 | LR__1181
0e100     38 4E 05 F1 | 	add	fp, #56
0e104     A7 26 02 FB | 	rdlong	local01, fp
0e108     01 26 86 F1 | 	sub	local01, #1
0e10c     04 4E 85 F1 | 	sub	fp, #4
0e110     A7 24 02 FB | 	rdlong	arg10, fp
0e114     34 4E 85 F1 | 	sub	fp, #52
0e118     13 25 1A F2 | 	cmp	arg10, local01 wcz
0e11c     54 00 90 1D |  if_a	jmp	#LR__1182
0e120     A0 F5 BF FD | 	call	#_pop
0e124     A7 FA 61 FC | 	wrlong	result1, fp
0e128     04 4E 05 F1 | 	add	fp, #4
0e12c     A7 FC 61 FC | 	wrlong	result2, fp
0e130     04 4E 05 F1 | 	add	fp, #4
0e134     A7 FE 61 FC | 	wrlong	result3, fp
0e138     2C 4E 05 F1 | 	add	fp, #44
0e13c     A7 28 02 FB | 	rdlong	local02, fp
0e140     02 28 66 F0 | 	shl	local02, #2
0e144     28 4E 85 F1 | 	sub	fp, #40
0e148     A7 28 02 F1 | 	add	local02, fp
0e14c     0C 4E 85 F1 | 	sub	fp, #12
0e150     A7 12 02 F6 | 	mov	arg01, fp
0e154     50 F7 BF FD | 	call	#_converttoint
0e158     14 FB 61 FC | 	wrlong	result1, local02
0e15c     34 4E 05 F1 | 	add	fp, #52
0e160     A7 28 02 FB | 	rdlong	local02, fp
0e164     01 28 86 F1 | 	sub	local02, #1
0e168     A7 28 62 FC | 	wrlong	local02, fp
0e16c     34 4E 85 F1 | 	sub	fp, #52
0e170     8C FF 9F FD | 	jmp	#LR__1181
0e174                 | LR__1182
0e174                 | ' if numpar=10 then 
0e174     38 4E 05 F1 | 	add	fp, #56
0e178     A7 28 02 FB | 	rdlong	local02, fp
0e17c     38 4E 85 F1 | 	sub	fp, #56
0e180     0A 28 0E F2 | 	cmp	local02, #10 wz
0e184     5C 00 90 5D |  if_ne	jmp	#LR__1183
0e188     0C 4E 05 F1 | 	add	fp, #12
0e18c     A7 12 02 FB | 	rdlong	arg01, fp
0e190     04 4E 05 F1 | 	add	fp, #4
0e194     A7 14 02 FB | 	rdlong	arg02, fp
0e198     04 4E 05 F1 | 	add	fp, #4
0e19c     A7 16 02 FB | 	rdlong	arg03, fp
0e1a0     04 4E 05 F1 | 	add	fp, #4
0e1a4     A7 18 02 FB | 	rdlong	arg04, fp
0e1a8     04 4E 05 F1 | 	add	fp, #4
0e1ac     A7 1A 02 FB | 	rdlong	arg05, fp
0e1b0     04 4E 05 F1 | 	add	fp, #4
0e1b4     A7 1C 02 FB | 	rdlong	arg06, fp
0e1b8     04 4E 05 F1 | 	add	fp, #4
0e1bc     A7 1E 02 FB | 	rdlong	arg07, fp
0e1c0     04 4E 05 F1 | 	add	fp, #4
0e1c4     A7 20 02 FB | 	rdlong	arg08, fp
0e1c8     04 4E 05 F1 | 	add	fp, #4
0e1cc     A7 22 02 FB | 	rdlong	arg09, fp
0e1d0     04 4E 05 F1 | 	add	fp, #4
0e1d4     A7 24 02 FB | 	rdlong	arg10, fp
0e1d8     30 4E 85 F1 | 	sub	fp, #48
0e1dc     7C 7B B1 FD | 	call	#_hg010b_spin2_blit
0e1e0     48 00 90 FD | 	jmp	#LR__1184
0e1e4                 | LR__1183
0e1e4     F2 1E 02 FB | 	rdlong	arg07, objptr
0e1e8     0C 4E 05 F1 | 	add	fp, #12
0e1ec     A7 14 02 FB | 	rdlong	arg02, fp
0e1f0     04 4E 05 F1 | 	add	fp, #4
0e1f4     A7 16 02 FB | 	rdlong	arg03, fp
0e1f8     04 4E 05 F1 | 	add	fp, #4
0e1fc     A7 18 02 FB | 	rdlong	arg04, fp
0e200     04 4E 05 F1 | 	add	fp, #4
0e204     A7 1A 02 FB | 	rdlong	arg05, fp
0e208     04 4E 05 F1 | 	add	fp, #4
0e20c     A7 20 02 FB | 	rdlong	arg08, fp
0e210     04 4E 05 F1 | 	add	fp, #4
0e214     A7 22 02 FB | 	rdlong	arg09, fp
0e218     20 4E 85 F1 | 	sub	fp, #32
0e21c     0F 13 02 F6 | 	mov	arg01, arg07
0e220     0A 1C C6 F9 | 	decod	arg06, #10
0e224     0A 24 C6 F9 | 	decod	arg10, #10
0e228     30 7B B1 FD | 	call	#_hg010b_spin2_blit
0e22c                 | LR__1184
0e22c                 | LR__1185
0e22c     A7 F0 03 F6 | 	mov	ptra, fp
0e230     B2 00 A0 FD | 	call	#popregs_
0e234                 | _do_blit_ret
0e234     2D 00 64 FD | 	ret
0e238                 | 
0e238                 | ' 
0e238                 | ' 
0e238                 | ' '-------------------- bin$
0e238                 | ' 
0e238                 | ' sub do_bin
0e238                 | _do_bin
0e238     01 4A 05 F6 | 	mov	COUNT_, #1
0e23c     A8 00 A0 FD | 	call	#pushregs_
0e240     18 F0 07 F1 | 	add	ptra, #24
0e244     4A 00 00 FF 
0e248     80 E4 05 F1 | 	add	objptr, ##38016
0e24c     F2 26 02 FB | 	rdlong	local01, objptr
0e250     13 17 02 F6 | 	mov	arg03, local01
0e254     01 16 66 F0 | 	shl	arg03, #1
0e258     13 17 02 F1 | 	add	arg03, local01
0e25c     02 16 66 F0 | 	shl	arg03, #2
0e260     03 00 00 FF 
0e264     04 E4 85 F1 | 	sub	objptr, ##1540
0e268     F2 16 02 F1 | 	add	arg03, objptr
0e26c     0B 17 02 FB | 	rdlong	arg03, arg03
0e270     0C 4E 05 F1 | 	add	fp, #12
0e274     A7 16 62 FC | 	wrlong	arg03, fp
0e278                 | ' 
0e278                 | ' numpar=compiledline(lineptr_e).result.uresult
0e278                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0e278     0C 4E 85 F1 | 	sub	fp, #12
0e27c     03 16 16 F2 | 	cmp	arg03, #3 wc
0e280     47 00 00 FF 
0e284     7C E4 85 F1 | 	sub	objptr, ##36476
0e288     0C 4E 05 C1 |  if_b	add	fp, #12
0e28c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0e290     0C 4E 85 C1 |  if_b	sub	fp, #12
0e294     40 00 90 4D |  if_c_and_nz	jmp	#LR__1190
0e298     00 12 06 F6 | 	mov	arg01, #0
0e29c     F8 E9 B1 FD | 	call	#__system___getiolock_0613
0e2a0     FD 12 02 F6 | 	mov	arg01, result1
0e2a4     C8 8C B1 FD | 	call	#__system___lockmem
0e2a8     B9 01 00 FF 
0e2ac     47 14 06 F6 | 	mov	arg02, ##@LR__5878
0e2b0     00 12 06 F6 | 	mov	arg01, #0
0e2b4     00 16 06 F6 | 	mov	arg03, #0
0e2b8     A8 99 B1 FD | 	call	#__system___basic_print_string
0e2bc     00 12 06 F6 | 	mov	arg01, #0
0e2c0     D4 E9 B1 FD | 	call	#__system___getiolock_0613
0e2c4     FD 00 68 FC | 	wrlong	#0, result1
0e2c8     27 12 06 F6 | 	mov	arg01, #39
0e2cc     00 14 06 F6 | 	mov	arg02, #0
0e2d0     80 52 B1 FD | 	call	#_printerror
0e2d4     B8 00 90 FD | 	jmp	#LR__1193
0e2d8                 | LR__1190
0e2d8                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e2d8     0C 4E 05 F1 | 	add	fp, #12
0e2dc     A7 26 02 FB | 	rdlong	local01, fp
0e2e0     0C 4E 85 F1 | 	sub	fp, #12
0e2e4     02 26 0E F2 | 	cmp	local01, #2 wz
0e2e8     38 00 90 5D |  if_ne	jmp	#LR__1191
0e2ec     D4 F3 BF FD | 	call	#_pop
0e2f0     FF 26 02 F6 | 	mov	local01, result3
0e2f4     A7 FA 61 FC | 	wrlong	result1, fp
0e2f8     04 4E 05 F1 | 	add	fp, #4
0e2fc     A7 FC 61 FC | 	wrlong	result2, fp
0e300     04 4E 05 F1 | 	add	fp, #4
0e304     A7 26 62 FC | 	wrlong	local01, fp
0e308     08 4E 85 F1 | 	sub	fp, #8
0e30c     A7 12 02 F6 | 	mov	arg01, fp
0e310     94 F5 BF FD | 	call	#_converttoint
0e314     14 4E 05 F1 | 	add	fp, #20
0e318     A7 FA 61 FC | 	wrlong	result1, fp
0e31c     14 4E 85 F1 | 	sub	fp, #20
0e320     0C 00 90 FD | 	jmp	#LR__1192
0e324                 | LR__1191
0e324     14 4E 05 F1 | 	add	fp, #20
0e328     A7 00 68 FC | 	wrlong	#0, fp
0e32c     14 4E 85 F1 | 	sub	fp, #20
0e330                 | LR__1192
0e330     90 F3 BF FD | 	call	#_pop
0e334     FF 26 02 F6 | 	mov	local01, result3
0e338     A7 FA 61 FC | 	wrlong	result1, fp
0e33c     04 4E 05 F1 | 	add	fp, #4
0e340     A7 FC 61 FC | 	wrlong	result2, fp
0e344     04 4E 05 F1 | 	add	fp, #4
0e348     A7 26 62 FC | 	wrlong	local01, fp
0e34c     08 4E 85 F1 | 	sub	fp, #8
0e350     A7 12 02 F6 | 	mov	arg01, fp
0e354     50 F5 BF FD | 	call	#_converttoint
0e358     10 4E 05 F1 | 	add	fp, #16
0e35c     A7 FA 61 FC | 	wrlong	result1, fp
0e360     FD 12 02 F6 | 	mov	arg01, result1
0e364     04 4E 05 F1 | 	add	fp, #4
0e368     A7 14 02 FB | 	rdlong	arg02, fp
0e36c     14 4E 85 F1 | 	sub	fp, #20
0e370     02 16 06 F6 | 	mov	arg03, #2
0e374     C8 AE B1 FD | 	call	#__system__Number_S
0e378     A7 FA 61 FC | 	wrlong	result1, fp
0e37c     08 4E 05 F1 | 	add	fp, #8
0e380     A7 3E 68 FC | 	wrlong	#31, fp
0e384     08 4E 85 F1 | 	sub	fp, #8
0e388     A7 12 02 F6 | 	mov	arg01, fp
0e38c     CC F3 BF FD | 	call	#_push
0e390                 | LR__1193
0e390     A7 F0 03 F6 | 	mov	ptra, fp
0e394     B2 00 A0 FD | 	call	#popregs_
0e398                 | _do_bin_ret
0e398     2D 00 64 FD | 	ret
0e39c                 | 
0e39c                 | ' 
0e39c                 | ' '-------------------- box
0e39c                 | ' 
0e39c                 | ' sub do_box
0e39c                 | _do_box
0e39c     03 4A 05 F6 | 	mov	COUNT_, #3
0e3a0     A8 00 A0 FD | 	call	#pushregs_
0e3a4     30 F0 07 F1 | 	add	ptra, #48
0e3a8     18 F3 BF FD | 	call	#_pop
0e3ac     FD 1A 02 F6 | 	mov	arg05, result1
0e3b0     FE 18 02 F6 | 	mov	arg04, result2
0e3b4     FF 16 02 F6 | 	mov	arg03, result3
0e3b8     24 4E 05 F1 | 	add	fp, #36
0e3bc     A7 1A 62 FC | 	wrlong	arg05, fp
0e3c0     04 4E 05 F1 | 	add	fp, #4
0e3c4     A7 18 62 FC | 	wrlong	arg04, fp
0e3c8     04 4E 05 F1 | 	add	fp, #4
0e3cc     A7 16 62 FC | 	wrlong	arg03, fp
0e3d0     2C 4E 85 F1 | 	sub	fp, #44
0e3d4     EC F2 BF FD | 	call	#_pop
0e3d8     FD 1A 02 F6 | 	mov	arg05, result1
0e3dc     FE 18 02 F6 | 	mov	arg04, result2
0e3e0     FF 16 02 F6 | 	mov	arg03, result3
0e3e4     18 4E 05 F1 | 	add	fp, #24
0e3e8     A7 1A 62 FC | 	wrlong	arg05, fp
0e3ec     04 4E 05 F1 | 	add	fp, #4
0e3f0     A7 18 62 FC | 	wrlong	arg04, fp
0e3f4     04 4E 05 F1 | 	add	fp, #4
0e3f8     A7 16 62 FC | 	wrlong	arg03, fp
0e3fc     20 4E 85 F1 | 	sub	fp, #32
0e400     C0 F2 BF FD | 	call	#_pop
0e404     FD 1A 02 F6 | 	mov	arg05, result1
0e408     FE 18 02 F6 | 	mov	arg04, result2
0e40c     FF 26 02 F6 | 	mov	local01, result3
0e410     0C 4E 05 F1 | 	add	fp, #12
0e414     A7 1A 62 FC | 	wrlong	arg05, fp
0e418     04 4E 05 F1 | 	add	fp, #4
0e41c     A7 18 62 FC | 	wrlong	arg04, fp
0e420     04 4E 05 F1 | 	add	fp, #4
0e424     A7 26 62 FC | 	wrlong	local01, fp
0e428     14 4E 85 F1 | 	sub	fp, #20
0e42c     94 F2 BF FD | 	call	#_pop
0e430     A7 FA 61 FC | 	wrlong	result1, fp
0e434     04 4E 05 F1 | 	add	fp, #4
0e438     A7 FC 61 FC | 	wrlong	result2, fp
0e43c     04 4E 05 F1 | 	add	fp, #4
0e440     A7 FE 61 FC | 	wrlong	result3, fp
0e444                 | ' 
0e444                 | ' t4=pop()
0e444                 | ' t3=pop()
0e444                 | ' t2=pop()
0e444                 | ' t1=pop()
0e444                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e444     FF 1A 02 F6 | 	mov	arg05, result3
0e448     08 4E 85 F1 | 	sub	fp, #8
0e44c     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e450     08 4E 05 51 |  if_ne	add	fp, #8
0e454     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e458     08 4E 85 51 |  if_ne	sub	fp, #8
0e45c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0e460     A8 00 90 5D |  if_ne	jmp	#LR__1200
0e464     14 4E 05 F1 | 	add	fp, #20
0e468     A7 26 02 FB | 	rdlong	local01, fp
0e46c     14 4E 85 F1 | 	sub	fp, #20
0e470     1C 26 0E F2 | 	cmp	local01, #28 wz
0e474     14 4E 05 51 |  if_ne	add	fp, #20
0e478     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e47c     14 4E 85 51 |  if_ne	sub	fp, #20
0e480     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e484     84 00 90 5D |  if_ne	jmp	#LR__1200
0e488     20 4E 05 F1 | 	add	fp, #32
0e48c     A7 26 02 FB | 	rdlong	local01, fp
0e490     20 4E 85 F1 | 	sub	fp, #32
0e494     1C 26 0E F2 | 	cmp	local01, #28 wz
0e498     20 4E 05 51 |  if_ne	add	fp, #32
0e49c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e4a0     20 4E 85 51 |  if_ne	sub	fp, #32
0e4a4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e4a8     60 00 90 5D |  if_ne	jmp	#LR__1200
0e4ac     2C 4E 05 F1 | 	add	fp, #44
0e4b0     A7 26 02 FB | 	rdlong	local01, fp
0e4b4     2C 4E 85 F1 | 	sub	fp, #44
0e4b8     1C 26 0E F2 | 	cmp	local01, #28 wz
0e4bc     2C 4E 05 51 |  if_ne	add	fp, #44
0e4c0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e4c4     2C 4E 85 51 |  if_ne	sub	fp, #44
0e4c8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e4cc     3C 00 90 5D |  if_ne	jmp	#LR__1200
0e4d0     A7 12 02 FB | 	rdlong	arg01, fp
0e4d4     0C 4E 05 F1 | 	add	fp, #12
0e4d8     A7 14 02 FB | 	rdlong	arg02, fp
0e4dc     0C 4E 05 F1 | 	add	fp, #12
0e4e0     A7 16 02 FB | 	rdlong	arg03, fp
0e4e4     0C 4E 05 F1 | 	add	fp, #12
0e4e8     A7 18 02 FB | 	rdlong	arg04, fp
0e4ec     24 4E 85 F1 | 	sub	fp, #36
0e4f0     37 00 00 FF 
0e4f4     28 E4 05 F1 | 	add	objptr, ##28200
0e4f8     F2 1A 02 FB | 	rdlong	arg05, objptr
0e4fc     37 00 00 FF 
0e500     28 E4 85 F1 | 	sub	objptr, ##28200
0e504     EC 6A B1 FD | 	call	#_hg010b_spin2_box
0e508                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e508     6C 00 90 FD | 	jmp	#LR__1201
0e50c                 | LR__1200
0e50c     A7 12 02 F6 | 	mov	arg01, fp
0e510     94 F3 BF FD | 	call	#_converttoint
0e514     FD 28 02 F6 | 	mov	local02, result1
0e518     0C 4E 05 F1 | 	add	fp, #12
0e51c     A7 12 02 F6 | 	mov	arg01, fp
0e520     0C 4E 85 F1 | 	sub	fp, #12
0e524     80 F3 BF FD | 	call	#_converttoint
0e528     FD 2A 02 F6 | 	mov	local03, result1
0e52c     18 4E 05 F1 | 	add	fp, #24
0e530     A7 12 02 F6 | 	mov	arg01, fp
0e534     18 4E 85 F1 | 	sub	fp, #24
0e538     6C F3 BF FD | 	call	#_converttoint
0e53c     FD 26 02 F6 | 	mov	local01, result1
0e540     24 4E 05 F1 | 	add	fp, #36
0e544     A7 12 02 F6 | 	mov	arg01, fp
0e548     24 4E 85 F1 | 	sub	fp, #36
0e54c     58 F3 BF FD | 	call	#_converttoint
0e550     FD 18 02 F6 | 	mov	arg04, result1
0e554     37 00 00 FF 
0e558     28 E4 05 F1 | 	add	objptr, ##28200
0e55c     F2 1A 02 FB | 	rdlong	arg05, objptr
0e560     37 00 00 FF 
0e564     28 E4 85 F1 | 	sub	objptr, ##28200
0e568     14 13 02 F6 | 	mov	arg01, local02
0e56c     15 15 02 F6 | 	mov	arg02, local03
0e570     13 17 02 F6 | 	mov	arg03, local01
0e574     7C 6A B1 FD | 	call	#_hg010b_spin2_box
0e578                 | LR__1201
0e578     A7 F0 03 F6 | 	mov	ptra, fp
0e57c     B2 00 A0 FD | 	call	#popregs_
0e580                 | _do_box_ret
0e580     2D 00 64 FD | 	ret
0e584                 | 
0e584                 | ' 
0e584                 | ' '-------------------- brun
0e584                 | ' 
0e584                 | ' sub do_brun
0e584                 | _do_brun
0e584     08 4A 05 F6 | 	mov	COUNT_, #8
0e588     A8 00 A0 FD | 	call	#pushregs_
0e58c     34 F1 BF FD | 	call	#_pop
0e590     FE 1A 02 F6 | 	mov	arg05, result2
0e594     FF 18 02 F6 | 	mov	arg04, result3
0e598     FD 26 02 F6 | 	mov	local01, result1
0e59c     0D 29 02 F6 | 	mov	local02, arg05
0e5a0     0C 2B 02 F6 | 	mov	local03, arg04
0e5a4                 | ' 
0e5a4                 | ' t1=pop() 
0e5a4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e5a4     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e5a8     10 00 90 5D |  if_ne	jmp	#LR__1210
0e5ac     13 13 02 F6 | 	mov	arg01, local01
0e5b0     88 F2 BF FD | 	call	#_convertstring
0e5b4     FD 26 02 F6 | 	mov	local01, result1
0e5b8     1F 2A 06 F6 | 	mov	local03, #31
0e5bc                 | LR__1210
0e5bc                 | ' if t1.result_type=result_string then
0e5bc     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e5c0     EC 01 90 5D |  if_ne	jmp	#LR__1214
0e5c4     13 2D 02 F6 | 	mov	local04, local01
0e5c8                 | '   filename=t1.result.sresult
0e5c8                 | '   if left$(filename,1)="/" then 
0e5c8     16 13 02 F6 | 	mov	arg01, local04
0e5cc     01 14 06 F6 | 	mov	arg02, #1
0e5d0     18 AA B1 FD | 	call	#__system__Left_S
0e5d4     FD 12 02 F6 | 	mov	arg01, result1
0e5d8     B9 01 00 FF 
0e5dc     4E 14 06 F6 | 	mov	arg02, ##@LR__5879
0e5e0     B4 89 B1 FD | 	call	#__system___string_cmp
0e5e4     00 FA 0D F2 | 	cmp	result1, #0 wz
0e5e8     16 2F 02 A6 |  if_e	mov	local05, local04
0e5ec     14 00 90 AD |  if_e	jmp	#LR__1211
0e5f0     B9 01 00 FF 
0e5f4     50 12 06 F6 | 	mov	arg01, ##@LR__5880
0e5f8     16 15 02 F6 | 	mov	arg02, local04
0e5fc     CC 89 B1 FD | 	call	#__system___string_concat
0e600     FD 2E 02 F6 | 	mov	local05, result1
0e604                 | LR__1211
0e604                 | '   open fullfilename for input as #9
0e604     09 12 06 F6 | 	mov	arg01, #9
0e608     17 15 02 F6 | 	mov	arg02, local05
0e60c     00 16 06 F6 | 	mov	arg03, #0
0e610     60 95 B1 FD | 	call	#__system___basic_open_string
0e614     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e618     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e61c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e620     FD 30 0A F6 | 	mov	local06, result1 wz
0e624                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e624     8C 00 90 AD |  if_e	jmp	#LR__1212
0e628     00 12 06 F6 | 	mov	arg01, #0
0e62c     68 E6 B1 FD | 	call	#__system___getiolock_0613
0e630     FD 12 02 F6 | 	mov	arg01, result1
0e634     38 89 B1 FD | 	call	#__system___lockmem
0e638     B9 01 00 FF 
0e63c     59 14 06 F6 | 	mov	arg02, ##@LR__5881
0e640     00 12 06 F6 | 	mov	arg01, #0
0e644     00 16 06 F6 | 	mov	arg03, #0
0e648     18 96 B1 FD | 	call	#__system___basic_print_string
0e64c     00 12 06 F6 | 	mov	arg01, #0
0e650     18 15 02 F6 | 	mov	arg02, local06
0e654     00 16 06 F6 | 	mov	arg03, #0
0e658     0A 18 06 F6 | 	mov	arg04, #10
0e65c     48 96 B1 FD | 	call	#__system___basic_print_integer
0e660     B9 01 00 FF 
0e664     67 14 06 F6 | 	mov	arg02, ##@LR__5882
0e668     00 12 06 F6 | 	mov	arg01, #0
0e66c     00 16 06 F6 | 	mov	arg03, #0
0e670     F0 95 B1 FD | 	call	#__system___basic_print_string
0e674     18 13 02 F6 | 	mov	arg01, local06
0e678     80 B2 B1 FD | 	call	#__system___strerror
0e67c     FD 14 02 F6 | 	mov	arg02, result1
0e680     00 12 06 F6 | 	mov	arg01, #0
0e684     00 16 06 F6 | 	mov	arg03, #0
0e688     D8 95 B1 FD | 	call	#__system___basic_print_string
0e68c     00 12 06 F6 | 	mov	arg01, #0
0e690     0A 14 06 F6 | 	mov	arg02, #10
0e694     00 16 06 F6 | 	mov	arg03, #0
0e698     70 95 B1 FD | 	call	#__system___basic_print_char
0e69c     00 12 06 F6 | 	mov	arg01, #0
0e6a0     F4 E5 B1 FD | 	call	#__system___getiolock_0613
0e6a4     FD 00 68 FC | 	wrlong	#0, result1
0e6a8     09 12 06 F6 | 	mov	arg01, #9
0e6ac     18 DC B1 FD | 	call	#__system__close
0e6b0     FC 00 90 FD | 	jmp	#LR__1215
0e6b4                 | LR__1212
0e6b4     01 32 06 F6 | 	mov	local07, #1
0e6b8     00 34 06 F6 | 	mov	local08, #0
0e6bc                 | '   do
0e6bc                 | LR__1213
0e6bc                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e6bc     4E 00 00 FF 
0e6c0     B4 E4 05 F1 | 	add	objptr, ##40116
0e6c4     F2 16 02 F6 | 	mov	arg03, objptr
0e6c8     4E 00 00 FF 
0e6cc     B4 E4 85 F1 | 	sub	objptr, ##40116
0e6d0     09 12 06 F6 | 	mov	arg01, #9
0e6d4     19 15 02 F6 | 	mov	arg02, local07
0e6d8     0A 18 C6 F9 | 	decod	arg04, #10
0e6dc     01 1A 06 F6 | 	mov	arg05, #1
0e6e0     FC 96 B1 FD | 	call	#__system___basic_get
0e6e4     FD 30 02 F6 | 	mov	local06, result1
0e6e8     FD 32 02 F1 | 	add	local07, result1
0e6ec     4E 00 00 FF 
0e6f0     B4 E4 05 F1 | 	add	objptr, ##40116
0e6f4     F2 12 02 F6 | 	mov	arg01, objptr
0e6f8     1A 15 02 F6 | 	mov	arg02, local08
0e6fc     0A 16 C6 F9 | 	decod	arg03, #10
0e700     42 00 00 FF 
0e704     E8 E5 85 F1 | 	sub	objptr, ##34280
0e708     78 7C B1 FD | 	call	#_psram_spin2_write
0e70c     0B 00 00 FF 
0e710     CC E4 85 F1 | 	sub	objptr, ##5836
0e714     18 35 02 F1 | 	add	local08, local06
0e718     02 00 00 FF 
0e71c     00 30 0E F2 | 	cmp	local06, ##1024 wz
0e720     E0 03 00 AF 
0e724     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0e728     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1213
0e72c     36 00 00 FF 
0e730     FC E5 05 F1 | 	add	objptr, ##28156
0e734     F2 12 02 FB | 	rdlong	arg01, objptr
0e738     03 12 62 FD | 	cogstop	arg01
0e73c     04 E4 05 F1 | 	add	objptr, #4
0e740     F2 12 02 FB | 	rdlong	arg01, objptr
0e744     03 12 62 FD | 	cogstop	arg01
0e748     04 E4 05 F1 | 	add	objptr, #4
0e74c     F2 12 02 FB | 	rdlong	arg01, objptr
0e750     03 12 62 FD | 	cogstop	arg01
0e754     19 00 00 FF 
0e758     3C E5 05 F1 | 	add	objptr, ##13116
0e75c     F2 12 02 FB | 	rdlong	arg01, objptr
0e760     03 12 62 FD | 	cogstop	arg01
0e764     18 00 00 FF 
0e768     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0e76c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0e770     18 00 00 FF 
0e774     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0e778     19 00 00 FF 
0e77c     34 E5 85 F1 | 	sub	objptr, ##13108
0e780     1E 34 06 F6 | 	mov	local08, #30
0e784     28 E4 61 FD | 	setq	objptr
0e788     0A 35 F2 FC | 	coginit	local08, arg02 wc
0e78c     01 34 66 C6 |  if_b	neg	local08, #1
0e790     1B 00 00 FF 
0e794     0C E5 05 F1 | 	add	objptr, ##14092
0e798     F2 34 62 FC | 	wrlong	local08, objptr
0e79c     52 00 00 FF 
0e7a0     18 E5 85 F1 | 	sub	objptr, ##42264
0e7a4     00 12 06 F6 | 	mov	arg01, #0
0e7a8     01 12 62 FD | 	cogid	arg01
0e7ac     03 12 62 FD | 	cogstop	arg01
0e7b0                 | LR__1214
0e7b0                 | LR__1215
0e7b0     A7 F0 03 F6 | 	mov	ptra, fp
0e7b4     B2 00 A0 FD | 	call	#popregs_
0e7b8                 | _do_brun_ret
0e7b8     2D 00 64 FD | 	ret
0e7bc                 | 
0e7bc                 | ' 
0e7bc                 | ' '-------------------- cd
0e7bc                 | ' 
0e7bc                 | ' sub do_cd
0e7bc                 | _do_cd
0e7bc     06 4A 05 F6 | 	mov	COUNT_, #6
0e7c0     A8 00 A0 FD | 	call	#pushregs_
0e7c4     B9 01 00 FF 
0e7c8     6A 12 06 F6 | 	mov	arg01, ##@LR__5883
0e7cc     31 14 06 F6 | 	mov	arg02, #49
0e7d0     FC E5 B1 FD | 	call	#__system___basic_dir
0e7d4     EC EE BF FD | 	call	#_pop
0e7d8     FE 18 02 F6 | 	mov	arg04, result2
0e7dc     FF 16 02 F6 | 	mov	arg03, result3
0e7e0     FD 26 02 F6 | 	mov	local01, result1
0e7e4     0C 29 02 F6 | 	mov	local02, arg04
0e7e8     0B 2B 02 F6 | 	mov	local03, arg03
0e7ec                 | ' t1=pop()
0e7ec                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e7ec     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e7f0     10 00 90 5D |  if_ne	jmp	#LR__1220
0e7f4     13 13 02 F6 | 	mov	arg01, local01
0e7f8     40 F0 BF FD | 	call	#_convertstring
0e7fc     FD 26 02 F6 | 	mov	local01, result1
0e800     1F 2A 06 F6 | 	mov	local03, #31
0e804                 | LR__1220
0e804                 | ' if t1.result_type<>result_string then printerror(15): return
0e804     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e808     10 00 90 AD |  if_e	jmp	#LR__1221
0e80c     0F 12 06 F6 | 	mov	arg01, #15
0e810     00 14 06 F6 | 	mov	arg02, #0
0e814     3C 4D B1 FD | 	call	#_printerror
0e818     48 05 90 FD | 	jmp	#LR__1239
0e81c                 | LR__1221
0e81c     13 2D 02 F6 | 	mov	local04, local01
0e820                 | ' newdir$=t1.result.sresult
0e820                 | ' if newdir$=".." then 
0e820     B9 01 00 FF 
0e824     6C 14 06 F6 | 	mov	arg02, ##@LR__5884
0e828     16 13 02 F6 | 	mov	arg01, local04
0e82c     68 87 B1 FD | 	call	#__system___string_cmp
0e830     00 FA 0D F2 | 	cmp	result1, #0 wz
0e834     C4 01 90 5D |  if_ne	jmp	#LR__1228
0e838     4A 00 00 FF 
0e83c     94 E4 05 F1 | 	add	objptr, ##38036
0e840     F2 12 02 FB | 	rdlong	arg01, objptr
0e844     4A 00 00 FF 
0e848     94 E4 85 F1 | 	sub	objptr, ##38036
0e84c     09 2F 02 F6 | 	mov	local05, arg01
0e850     97 06 48 FB | 	callpa	#(@LR__1223-@LR__1222)>>2,fcache_load_ptr_
0e854                 | LR__1222
0e854     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e858     01 2E 06 51 |  if_ne	add	local05, #1
0e85c     F4 FF 9F 5D |  if_ne	jmp	#LR__1222
0e860                 | LR__1223
0e860     17 13 C2 F2 | 	subr	arg01, local05
0e864     4A 00 00 FF 
0e868     94 E4 05 F1 | 	add	objptr, ##38036
0e86c     F2 14 02 FB | 	rdlong	arg02, objptr
0e870     4A 00 00 FF 
0e874     94 E4 85 F1 | 	sub	objptr, ##38036
0e878     B9 01 00 FF 
0e87c     6F 16 06 F6 | 	mov	arg03, ##@LR__5885
0e880     B4 AD B1 FD | 	call	#__system__InstrRev
0e884     FD 2C 02 F6 | 	mov	local04, result1
0e888                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e888     02 2C 56 F2 | 	cmps	local04, #2 wc
0e88c     28 00 90 CD |  if_b	jmp	#LR__1224
0e890     4A 00 00 FF 
0e894     94 E4 05 F1 | 	add	objptr, ##38036
0e898     F2 12 02 FB | 	rdlong	arg01, objptr
0e89c     4A 00 00 FF 
0e8a0     94 E4 85 F1 | 	sub	objptr, ##38036
0e8a4     01 2C 86 F1 | 	sub	local04, #1
0e8a8     16 15 02 F6 | 	mov	arg02, local04
0e8ac     3C A7 B1 FD | 	call	#__system__Left_S
0e8b0     FD 2C 02 F6 | 	mov	local04, result1
0e8b4     08 00 90 FD | 	jmp	#LR__1225
0e8b8                 | LR__1224
0e8b8     B9 01 00 FF 
0e8bc     71 2C 06 F6 | 	mov	local04, ##@LR__5886
0e8c0                 | LR__1225
0e8c0     16 13 02 F6 | 	mov	arg01, local04
0e8c4     34 8D B1 FD | 	call	#__system___chdir
0e8c8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e8cc     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e8d0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e8d4     FD 30 0A F6 | 	mov	local06, result1 wz
0e8d8                 | '   chdir newdir$
0e8d8                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e8d8     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e8dc     A4 00 90 AD |  if_e	jmp	#LR__1226
0e8e0     00 12 06 F6 | 	mov	arg01, #0
0e8e4     B0 E3 B1 FD | 	call	#__system___getiolock_0613
0e8e8     FD 12 02 F6 | 	mov	arg01, result1
0e8ec     80 86 B1 FD | 	call	#__system___lockmem
0e8f0     B9 01 00 FF 
0e8f4     73 14 06 F6 | 	mov	arg02, ##@LR__5887
0e8f8     00 12 06 F6 | 	mov	arg01, #0
0e8fc     00 16 06 F6 | 	mov	arg03, #0
0e900     60 93 B1 FD | 	call	#__system___basic_print_string
0e904     00 12 06 F6 | 	mov	arg01, #0
0e908     18 15 02 F6 | 	mov	arg02, local06
0e90c     00 16 06 F6 | 	mov	arg03, #0
0e910     0A 18 06 F6 | 	mov	arg04, #10
0e914     90 93 B1 FD | 	call	#__system___basic_print_integer
0e918     B9 01 00 FF 
0e91c     81 14 06 F6 | 	mov	arg02, ##@LR__5888
0e920     00 12 06 F6 | 	mov	arg01, #0
0e924     00 16 06 F6 | 	mov	arg03, #0
0e928     38 93 B1 FD | 	call	#__system___basic_print_string
0e92c     45 00 00 FF 
0e930     50 E5 05 F1 | 	add	objptr, ##35664
0e934     F2 14 02 FB | 	rdlong	arg02, objptr
0e938     45 00 00 FF 
0e93c     50 E5 85 F1 | 	sub	objptr, ##35664
0e940     00 12 06 F6 | 	mov	arg01, #0
0e944     00 16 06 F6 | 	mov	arg03, #0
0e948     18 93 B1 FD | 	call	#__system___basic_print_string
0e94c     00 12 06 F6 | 	mov	arg01, #0
0e950     0A 14 06 F6 | 	mov	arg02, #10
0e954     00 16 06 F6 | 	mov	arg03, #0
0e958     B0 92 B1 FD | 	call	#__system___basic_print_char
0e95c     00 12 06 F6 | 	mov	arg01, #0
0e960     34 E3 B1 FD | 	call	#__system___getiolock_0613
0e964     FD 00 68 FC | 	wrlong	#0, result1
0e968     4A 00 00 FF 
0e96c     94 E4 05 F1 | 	add	objptr, ##38036
0e970     F2 12 02 FB | 	rdlong	arg01, objptr
0e974     4A 00 00 FF 
0e978     94 E4 85 F1 | 	sub	objptr, ##38036
0e97c     7C 8C B1 FD | 	call	#__system___chdir
0e980     14 00 90 FD | 	jmp	#LR__1227
0e984                 | LR__1226
0e984     4A 00 00 FF 
0e988     94 E4 05 F1 | 	add	objptr, ##38036
0e98c     F2 2C 62 FC | 	wrlong	local04, objptr
0e990     4A 00 00 FF 
0e994     94 E4 85 F1 | 	sub	objptr, ##38036
0e998                 | LR__1227
0e998                 | '   print "Current directory: ";currentdir$
0e998     00 12 06 F6 | 	mov	arg01, #0
0e99c     F8 E2 B1 FD | 	call	#__system___getiolock_0613
0e9a0     FD 12 02 F6 | 	mov	arg01, result1
0e9a4     C8 85 B1 FD | 	call	#__system___lockmem
0e9a8     B9 01 00 FF 
0e9ac     84 14 06 F6 | 	mov	arg02, ##@LR__5889
0e9b0     00 12 06 F6 | 	mov	arg01, #0
0e9b4     00 16 06 F6 | 	mov	arg03, #0
0e9b8     A8 92 B1 FD | 	call	#__system___basic_print_string
0e9bc     4A 00 00 FF 
0e9c0     94 E4 05 F1 | 	add	objptr, ##38036
0e9c4     F2 14 02 FB | 	rdlong	arg02, objptr
0e9c8     4A 00 00 FF 
0e9cc     94 E4 85 F1 | 	sub	objptr, ##38036
0e9d0     00 12 06 F6 | 	mov	arg01, #0
0e9d4     00 16 06 F6 | 	mov	arg03, #0
0e9d8     88 92 B1 FD | 	call	#__system___basic_print_string
0e9dc     00 12 06 F6 | 	mov	arg01, #0
0e9e0     0A 14 06 F6 | 	mov	arg02, #10
0e9e4     00 16 06 F6 | 	mov	arg03, #0
0e9e8     20 92 B1 FD | 	call	#__system___basic_print_char
0e9ec     00 12 06 F6 | 	mov	arg01, #0
0e9f0     A4 E2 B1 FD | 	call	#__system___getiolock_0613
0e9f4     FD 00 68 FC | 	wrlong	#0, result1
0e9f8                 | '   return
0e9f8     68 03 90 FD | 	jmp	#LR__1239
0e9fc                 | LR__1228
0e9fc                 | ' if left$(newdir$,1)="/" then 
0e9fc     16 13 02 F6 | 	mov	arg01, local04
0ea00     01 14 06 F6 | 	mov	arg02, #1
0ea04     E4 A5 B1 FD | 	call	#__system__Left_S
0ea08     FD 12 02 F6 | 	mov	arg01, result1
0ea0c     B9 01 00 FF 
0ea10     98 14 06 F6 | 	mov	arg02, ##@LR__5890
0ea14     80 85 B1 FD | 	call	#__system___string_cmp
0ea18     00 FA 0D F2 | 	cmp	result1, #0 wz
0ea1c     3C 01 90 5D |  if_ne	jmp	#LR__1231
0ea20     16 13 02 F6 | 	mov	arg01, local04
0ea24     D4 8B B1 FD | 	call	#__system___chdir
0ea28     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ea2c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0ea30     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ea34     FD 30 0A F6 | 	mov	local06, result1 wz
0ea38                 | '   chdir(newdir$)
0ea38                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0ea38     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0ea3c     A4 00 90 AD |  if_e	jmp	#LR__1229
0ea40     00 12 06 F6 | 	mov	arg01, #0
0ea44     50 E2 B1 FD | 	call	#__system___getiolock_0613
0ea48     FD 12 02 F6 | 	mov	arg01, result1
0ea4c     20 85 B1 FD | 	call	#__system___lockmem
0ea50     B9 01 00 FF 
0ea54     9A 14 06 F6 | 	mov	arg02, ##@LR__5891
0ea58     00 12 06 F6 | 	mov	arg01, #0
0ea5c     00 16 06 F6 | 	mov	arg03, #0
0ea60     00 92 B1 FD | 	call	#__system___basic_print_string
0ea64     00 12 06 F6 | 	mov	arg01, #0
0ea68     18 15 02 F6 | 	mov	arg02, local06
0ea6c     00 16 06 F6 | 	mov	arg03, #0
0ea70     0A 18 06 F6 | 	mov	arg04, #10
0ea74     30 92 B1 FD | 	call	#__system___basic_print_integer
0ea78     B9 01 00 FF 
0ea7c     A8 14 06 F6 | 	mov	arg02, ##@LR__5892
0ea80     00 12 06 F6 | 	mov	arg01, #0
0ea84     00 16 06 F6 | 	mov	arg03, #0
0ea88     D8 91 B1 FD | 	call	#__system___basic_print_string
0ea8c     45 00 00 FF 
0ea90     50 E5 05 F1 | 	add	objptr, ##35664
0ea94     F2 14 02 FB | 	rdlong	arg02, objptr
0ea98     45 00 00 FF 
0ea9c     50 E5 85 F1 | 	sub	objptr, ##35664
0eaa0     00 12 06 F6 | 	mov	arg01, #0
0eaa4     00 16 06 F6 | 	mov	arg03, #0
0eaa8     B8 91 B1 FD | 	call	#__system___basic_print_string
0eaac     00 12 06 F6 | 	mov	arg01, #0
0eab0     0A 14 06 F6 | 	mov	arg02, #10
0eab4     00 16 06 F6 | 	mov	arg03, #0
0eab8     50 91 B1 FD | 	call	#__system___basic_print_char
0eabc     00 12 06 F6 | 	mov	arg01, #0
0eac0     D4 E1 B1 FD | 	call	#__system___getiolock_0613
0eac4     FD 00 68 FC | 	wrlong	#0, result1
0eac8     4A 00 00 FF 
0eacc     94 E4 05 F1 | 	add	objptr, ##38036
0ead0     F2 12 02 FB | 	rdlong	arg01, objptr
0ead4     4A 00 00 FF 
0ead8     94 E4 85 F1 | 	sub	objptr, ##38036
0eadc     1C 8B B1 FD | 	call	#__system___chdir
0eae0     14 00 90 FD | 	jmp	#LR__1230
0eae4                 | LR__1229
0eae4     4A 00 00 FF 
0eae8     94 E4 05 F1 | 	add	objptr, ##38036
0eaec     F2 2C 62 FC | 	wrlong	local04, objptr
0eaf0     4A 00 00 FF 
0eaf4     94 E4 85 F1 | 	sub	objptr, ##38036
0eaf8                 | LR__1230
0eaf8                 | '   print "Current directory: ";currentdir$
0eaf8     00 12 06 F6 | 	mov	arg01, #0
0eafc     98 E1 B1 FD | 	call	#__system___getiolock_0613
0eb00     FD 12 02 F6 | 	mov	arg01, result1
0eb04     68 84 B1 FD | 	call	#__system___lockmem
0eb08     B9 01 00 FF 
0eb0c     AB 14 06 F6 | 	mov	arg02, ##@LR__5893
0eb10     00 12 06 F6 | 	mov	arg01, #0
0eb14     00 16 06 F6 | 	mov	arg03, #0
0eb18     48 91 B1 FD | 	call	#__system___basic_print_string
0eb1c     4A 00 00 FF 
0eb20     94 E4 05 F1 | 	add	objptr, ##38036
0eb24     F2 14 02 FB | 	rdlong	arg02, objptr
0eb28     4A 00 00 FF 
0eb2c     94 E4 85 F1 | 	sub	objptr, ##38036
0eb30     00 12 06 F6 | 	mov	arg01, #0
0eb34     00 16 06 F6 | 	mov	arg03, #0
0eb38     28 91 B1 FD | 	call	#__system___basic_print_string
0eb3c     00 12 06 F6 | 	mov	arg01, #0
0eb40     0A 14 06 F6 | 	mov	arg02, #10
0eb44     00 16 06 F6 | 	mov	arg03, #0
0eb48     C0 90 B1 FD | 	call	#__system___basic_print_char
0eb4c     00 12 06 F6 | 	mov	arg01, #0
0eb50     44 E1 B1 FD | 	call	#__system___getiolock_0613
0eb54     FD 00 68 FC | 	wrlong	#0, result1
0eb58                 | '   return
0eb58     08 02 90 FD | 	jmp	#LR__1239
0eb5c                 | LR__1231
0eb5c                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0eb5c     4A 00 00 FF 
0eb60     94 E4 05 F1 | 	add	objptr, ##38036
0eb64     F2 12 02 FB | 	rdlong	arg01, objptr
0eb68     4A 00 00 FF 
0eb6c     94 E4 85 F1 | 	sub	objptr, ##38036
0eb70     B9 01 00 FF 
0eb74     BF 14 06 F6 | 	mov	arg02, ##@LR__5894
0eb78     1C 84 B1 FD | 	call	#__system___string_cmp
0eb7c     00 FA 0D F2 | 	cmp	result1, #0 wz
0eb80     34 00 90 AD |  if_e	jmp	#LR__1232
0eb84     4A 00 00 FF 
0eb88     94 E4 05 F1 | 	add	objptr, ##38036
0eb8c     F2 12 02 FB | 	rdlong	arg01, objptr
0eb90     4A 00 00 FF 
0eb94     94 E4 85 F1 | 	sub	objptr, ##38036
0eb98     B9 01 00 FF 
0eb9c     C1 14 06 F6 | 	mov	arg02, ##@LR__5895
0eba0     28 84 B1 FD | 	call	#__system___string_concat
0eba4     FD 12 02 F6 | 	mov	arg01, result1
0eba8     16 15 02 F6 | 	mov	arg02, local04
0ebac     1C 84 B1 FD | 	call	#__system___string_concat
0ebb0     FD 2C 02 F6 | 	mov	local04, result1
0ebb4     20 00 90 FD | 	jmp	#LR__1233
0ebb8                 | LR__1232
0ebb8     4A 00 00 FF 
0ebbc     94 E4 05 F1 | 	add	objptr, ##38036
0ebc0     F2 12 02 FB | 	rdlong	arg01, objptr
0ebc4     4A 00 00 FF 
0ebc8     94 E4 85 F1 | 	sub	objptr, ##38036
0ebcc     16 15 02 F6 | 	mov	arg02, local04
0ebd0     F8 83 B1 FD | 	call	#__system___string_concat
0ebd4     FD 2C 02 F6 | 	mov	local04, result1
0ebd8                 | LR__1233
0ebd8                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0ebd8     16 13 02 F6 | 	mov	arg01, local04
0ebdc     01 14 06 F6 | 	mov	arg02, #1
0ebe0     90 A4 B1 FD | 	call	#__system__Right_S
0ebe4     FD 12 02 F6 | 	mov	arg01, result1
0ebe8     B9 01 00 FF 
0ebec     C3 14 06 F6 | 	mov	arg02, ##@LR__5896
0ebf0     A4 83 B1 FD | 	call	#__system___string_cmp
0ebf4     00 FA 0D F2 | 	cmp	result1, #0 wz
0ebf8     30 00 90 5D |  if_ne	jmp	#LR__1236
0ebfc     16 13 02 F6 | 	mov	arg01, local04
0ec00     09 2F 02 F6 | 	mov	local05, arg01
0ec04     97 06 48 FB | 	callpa	#(@LR__1235-@LR__1234)>>2,fcache_load_ptr_
0ec08                 | LR__1234
0ec08     17 FB C9 FA | 	rdbyte	result1, local05 wz
0ec0c     01 2E 06 51 |  if_ne	add	local05, #1
0ec10     F4 FF 9F 5D |  if_ne	jmp	#LR__1234
0ec14                 | LR__1235
0ec14     09 2F 82 F1 | 	sub	local05, arg01
0ec18     17 15 02 F6 | 	mov	arg02, local05
0ec1c     01 14 86 F1 | 	sub	arg02, #1
0ec20     16 13 02 F6 | 	mov	arg01, local04
0ec24     C4 A3 B1 FD | 	call	#__system__Left_S
0ec28     FD 2C 02 F6 | 	mov	local04, result1
0ec2c                 | LR__1236
0ec2c     16 13 02 F6 | 	mov	arg01, local04
0ec30     C8 89 B1 FD | 	call	#__system___chdir
0ec34     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ec38     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0ec3c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ec40     FD 30 0A F6 | 	mov	local06, result1 wz
0ec44                 | '   chdir(newdir$)
0ec44                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0ec44     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0ec48     A4 00 90 AD |  if_e	jmp	#LR__1237
0ec4c     00 12 06 F6 | 	mov	arg01, #0
0ec50     44 E0 B1 FD | 	call	#__system___getiolock_0613
0ec54     FD 12 02 F6 | 	mov	arg01, result1
0ec58     14 83 B1 FD | 	call	#__system___lockmem
0ec5c     B9 01 00 FF 
0ec60     C5 14 06 F6 | 	mov	arg02, ##@LR__5897
0ec64     00 12 06 F6 | 	mov	arg01, #0
0ec68     00 16 06 F6 | 	mov	arg03, #0
0ec6c     F4 8F B1 FD | 	call	#__system___basic_print_string
0ec70     00 12 06 F6 | 	mov	arg01, #0
0ec74     18 15 02 F6 | 	mov	arg02, local06
0ec78     00 16 06 F6 | 	mov	arg03, #0
0ec7c     0A 18 06 F6 | 	mov	arg04, #10
0ec80     24 90 B1 FD | 	call	#__system___basic_print_integer
0ec84     B9 01 00 FF 
0ec88     D3 14 06 F6 | 	mov	arg02, ##@LR__5898
0ec8c     00 12 06 F6 | 	mov	arg01, #0
0ec90     00 16 06 F6 | 	mov	arg03, #0
0ec94     CC 8F B1 FD | 	call	#__system___basic_print_string
0ec98     45 00 00 FF 
0ec9c     50 E5 05 F1 | 	add	objptr, ##35664
0eca0     F2 14 02 FB | 	rdlong	arg02, objptr
0eca4     45 00 00 FF 
0eca8     50 E5 85 F1 | 	sub	objptr, ##35664
0ecac     00 12 06 F6 | 	mov	arg01, #0
0ecb0     00 16 06 F6 | 	mov	arg03, #0
0ecb4     AC 8F B1 FD | 	call	#__system___basic_print_string
0ecb8     00 12 06 F6 | 	mov	arg01, #0
0ecbc     0A 14 06 F6 | 	mov	arg02, #10
0ecc0     00 16 06 F6 | 	mov	arg03, #0
0ecc4     44 8F B1 FD | 	call	#__system___basic_print_char
0ecc8     00 12 06 F6 | 	mov	arg01, #0
0eccc     C8 DF B1 FD | 	call	#__system___getiolock_0613
0ecd0     FD 00 68 FC | 	wrlong	#0, result1
0ecd4     4A 00 00 FF 
0ecd8     94 E4 05 F1 | 	add	objptr, ##38036
0ecdc     F2 12 02 FB | 	rdlong	arg01, objptr
0ece0     4A 00 00 FF 
0ece4     94 E4 85 F1 | 	sub	objptr, ##38036
0ece8     10 89 B1 FD | 	call	#__system___chdir
0ecec     14 00 90 FD | 	jmp	#LR__1238
0ecf0                 | LR__1237
0ecf0     4A 00 00 FF 
0ecf4     94 E4 05 F1 | 	add	objptr, ##38036
0ecf8     F2 2C 62 FC | 	wrlong	local04, objptr
0ecfc     4A 00 00 FF 
0ed00     94 E4 85 F1 | 	sub	objptr, ##38036
0ed04                 | LR__1238
0ed04                 | '   print "Current directory: ";currentdir$
0ed04     00 12 06 F6 | 	mov	arg01, #0
0ed08     8C DF B1 FD | 	call	#__system___getiolock_0613
0ed0c     FD 12 02 F6 | 	mov	arg01, result1
0ed10     5C 82 B1 FD | 	call	#__system___lockmem
0ed14     B9 01 00 FF 
0ed18     D6 14 06 F6 | 	mov	arg02, ##@LR__5899
0ed1c     00 12 06 F6 | 	mov	arg01, #0
0ed20     00 16 06 F6 | 	mov	arg03, #0
0ed24     3C 8F B1 FD | 	call	#__system___basic_print_string
0ed28     4A 00 00 FF 
0ed2c     94 E4 05 F1 | 	add	objptr, ##38036
0ed30     F2 14 02 FB | 	rdlong	arg02, objptr
0ed34     4A 00 00 FF 
0ed38     94 E4 85 F1 | 	sub	objptr, ##38036
0ed3c     00 12 06 F6 | 	mov	arg01, #0
0ed40     00 16 06 F6 | 	mov	arg03, #0
0ed44     1C 8F B1 FD | 	call	#__system___basic_print_string
0ed48     00 12 06 F6 | 	mov	arg01, #0
0ed4c     0A 14 06 F6 | 	mov	arg02, #10
0ed50     00 16 06 F6 | 	mov	arg03, #0
0ed54     B4 8E B1 FD | 	call	#__system___basic_print_char
0ed58     00 12 06 F6 | 	mov	arg01, #0
0ed5c     38 DF B1 FD | 	call	#__system___getiolock_0613
0ed60     FD 00 68 FC | 	wrlong	#0, result1
0ed64                 | LR__1239
0ed64     A7 F0 03 F6 | 	mov	ptra, fp
0ed68     B2 00 A0 FD | 	call	#popregs_
0ed6c                 | _do_cd_ret
0ed6c     2D 00 64 FD | 	ret
0ed70                 | 
0ed70                 | ' 
0ed70                 | ' '-------------------- changefreq
0ed70                 | ' 
0ed70                 | ' sub do_changefreq
0ed70                 | _do_changefreq
0ed70     04 4A 05 F6 | 	mov	COUNT_, #4
0ed74     A8 00 A0 FD | 	call	#pushregs_
0ed78     28 F0 07 F1 | 	add	ptra, #40
0ed7c     44 E9 BF FD | 	call	#_pop
0ed80     FF 14 02 F6 | 	mov	arg02, result3
0ed84     A7 FA 61 FC | 	wrlong	result1, fp
0ed88     04 4E 05 F1 | 	add	fp, #4
0ed8c     A7 FC 61 FC | 	wrlong	result2, fp
0ed90     04 4E 05 F1 | 	add	fp, #4
0ed94     A7 14 62 FC | 	wrlong	arg02, fp
0ed98     08 4E 85 F1 | 	sub	fp, #8
0ed9c     A7 12 02 F6 | 	mov	arg01, fp
0eda0     C0 EB BF FD | 	call	#_converttofloat
0eda4     24 4E 05 F1 | 	add	fp, #36
0eda8     A7 FA 61 FC | 	wrlong	result1, fp
0edac     24 4E 85 F1 | 	sub	fp, #36
0edb0     FD 14 02 F6 | 	mov	arg02, result1
0edb4     FC 16 20 FF 
0edb8     54 12 06 F6 | 	mov	arg01, ##1076754516
0edbc     F8 BF B1 FD | 	call	#__system____builtin_logbase
0edc0     FD 26 02 F6 | 	mov	local01, result1
0edc4     1E 14 C6 F9 | 	decod	arg02, #30
0edc8     FC 16 20 FF 
0edcc     54 12 06 F6 | 	mov	arg01, ##1076754516
0edd0     E4 BF B1 FD | 	call	#__system____builtin_logbase
0edd4     FD 14 02 F6 | 	mov	arg02, result1
0edd8     13 13 02 F6 | 	mov	arg01, local01
0eddc     0C B2 B1 FD | 	call	#__system___float_div
0ede0     FD 12 02 F6 | 	mov	arg01, result1
0ede4     00 14 06 F6 | 	mov	arg02, #0
0ede8     C4 B4 B1 FD | 	call	#__system___float_tointeger
0edec     10 4E 05 F1 | 	add	fp, #16
0edf0     A7 FA 61 FC | 	wrlong	result1, fp
0edf4     1E 26 C6 F9 | 	decod	local01, #30
0edf8     FD 12 02 F6 | 	mov	arg01, result1
0edfc     10 4E 85 F1 | 	sub	fp, #16
0ee00     05 12 06 F1 | 	add	arg01, #5
0ee04     09 13 52 F6 | 	abs	arg01, arg01 wc
0ee08     1F 28 C6 C9 |  if_b	decod	local02, #31
0ee0c     00 28 06 36 |  if_ae	mov	local02, #0
0ee10     D0 AB B1 FD | 	call	#__system___float_fromuns
0ee14     14 FB 61 F5 | 	xor	result1, local02
0ee18     FD 14 02 F6 | 	mov	arg02, result1
0ee1c     13 13 02 F6 | 	mov	arg01, local01
0ee20     CC BE B1 FD | 	call	#__system____builtin_powf
0ee24     FD 12 02 F6 | 	mov	arg01, result1
0ee28     01 14 06 F6 | 	mov	arg02, #1
0ee2c     80 B4 B1 FD | 	call	#__system___float_tointeger
0ee30     14 4E 05 F1 | 	add	fp, #20
0ee34     A7 FA 61 FC | 	wrlong	result1, fp
0ee38                 | ' skip=round(2^(lfreq+5))
0ee38                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0ee38     14 4E 85 F1 | 	sub	fp, #20
0ee3c     40 00 00 FF 
0ee40     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ee44     30 00 90 CD |  if_b	jmp	#LR__1240
0ee48     14 4E 05 F1 | 	add	fp, #20
0ee4c     A7 26 02 FB | 	rdlong	local01, fp
0ee50     13 27 52 F6 | 	abs	local01, local01 wc
0ee54     0F 26 46 F0 | 	shr	local01, #15
0ee58     13 27 82 F6 | 	negc	local01, local01
0ee5c     04 4E 05 F1 | 	add	fp, #4
0ee60     A7 26 62 FC | 	wrlong	local01, fp
0ee64     04 4E 85 F1 | 	sub	fp, #4
0ee68     40 00 80 FF 
0ee6c     A7 00 68 FC | 	wrlong	##32768, fp
0ee70     14 4E 85 F1 | 	sub	fp, #20
0ee74     0C 00 90 FD | 	jmp	#LR__1241
0ee78                 | LR__1240
0ee78     18 4E 05 F1 | 	add	fp, #24
0ee7c     A7 02 68 FC | 	wrlong	#1, fp
0ee80     18 4E 85 F1 | 	sub	fp, #24
0ee84                 | LR__1241
0ee84     24 4E 05 F1 | 	add	fp, #36
0ee88     A7 14 02 FB | 	rdlong	arg02, fp
0ee8c     24 4E 85 F1 | 	sub	fp, #36
0ee90     3E 2C 25 FF 
0ee94     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ee98     50 B1 B1 FD | 	call	#__system___float_div
0ee9c     FD 26 02 F6 | 	mov	local01, result1
0eea0     18 4E 05 F1 | 	add	fp, #24
0eea4     A7 12 02 FB | 	rdlong	arg01, fp
0eea8     18 4E 85 F1 | 	sub	fp, #24
0eeac     09 13 52 F6 | 	abs	arg01, arg01 wc
0eeb0     1F 28 C6 C9 |  if_b	decod	local02, #31
0eeb4     00 28 06 36 |  if_ae	mov	local02, #0
0eeb8     28 AB B1 FD | 	call	#__system___float_fromuns
0eebc     14 FB 61 F5 | 	xor	result1, local02
0eec0     FD 2A 02 F6 | 	mov	local03, result1
0eec4     1E 2C C6 F9 | 	decod	local04, #30
0eec8     0D 12 06 F6 | 	mov	arg01, #13
0eecc     10 4E 05 F1 | 	add	fp, #16
0eed0     A7 14 02 FB | 	rdlong	arg02, fp
0eed4     10 4E 85 F1 | 	sub	fp, #16
0eed8     0A 13 82 F1 | 	sub	arg01, arg02
0eedc     09 13 52 F6 | 	abs	arg01, arg01 wc
0eee0     1F 28 C6 C9 |  if_b	decod	local02, #31
0eee4     00 28 06 36 |  if_ae	mov	local02, #0
0eee8     F8 AA B1 FD | 	call	#__system___float_fromuns
0eeec     14 FB 61 F5 | 	xor	result1, local02
0eef0     FD 14 02 F6 | 	mov	arg02, result1
0eef4     16 13 02 F6 | 	mov	arg01, local04
0eef8     F4 BD B1 FD | 	call	#__system____builtin_powf
0eefc     FD 14 02 F6 | 	mov	arg02, result1
0ef00     15 13 02 F6 | 	mov	arg01, local03
0ef04     E0 AE B1 FD | 	call	#__system___float_mul
0ef08     FD 14 02 F6 | 	mov	arg02, result1
0ef0c     13 13 02 F6 | 	mov	arg01, local01
0ef10     D8 B0 B1 FD | 	call	#__system___float_div
0ef14     FD 12 02 F6 | 	mov	arg01, result1
0ef18     01 14 06 F6 | 	mov	arg02, #1
0ef1c     90 B3 B1 FD | 	call	#__system___float_tointeger
0ef20     FD 26 02 F6 | 	mov	local01, result1
0ef24     1C 4E 05 F1 | 	add	fp, #28
0ef28     A7 26 62 FC | 	wrlong	local01, fp
0ef2c     1C 4E 85 F1 | 	sub	fp, #28
0ef30     90 E7 BF FD | 	call	#_pop
0ef34     FF 2C 02 F6 | 	mov	local04, result3
0ef38     A7 FA 61 FC | 	wrlong	result1, fp
0ef3c     04 4E 05 F1 | 	add	fp, #4
0ef40     A7 FC 61 FC | 	wrlong	result2, fp
0ef44     04 4E 05 F1 | 	add	fp, #4
0ef48     A7 2C 62 FC | 	wrlong	local04, fp
0ef4c     08 4E 85 F1 | 	sub	fp, #8
0ef50     A7 12 02 F6 | 	mov	arg01, fp
0ef54     50 E9 BF FD | 	call	#_converttoint
0ef58     FD 2A 52 F6 | 	abs	local03, result1 wc
0ef5c     07 2A 06 F5 | 	and	local03, #7
0ef60     15 2B 82 F6 | 	negc	local03, local03
0ef64     0C 4E 05 F1 | 	add	fp, #12
0ef68     A7 2A 62 FC | 	wrlong	local03, fp
0ef6c     08 4E 05 F1 | 	add	fp, #8
0ef70     A7 26 02 FB | 	rdlong	local01, fp
0ef74     10 26 66 F0 | 	shl	local01, #16
0ef78     08 4E 05 F1 | 	add	fp, #8
0ef7c     A7 2C 02 FB | 	rdlong	local04, fp
0ef80     16 27 02 F1 | 	add	local01, local04
0ef84     04 4E 05 F1 | 	add	fp, #4
0ef88     A7 26 62 FC | 	wrlong	local01, fp
0ef8c                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0ef8c     37 00 00 FF 
0ef90     10 E4 05 F1 | 	add	objptr, ##28176
0ef94     F2 12 02 FB | 	rdlong	arg01, objptr
0ef98     37 00 00 FF 
0ef9c     10 E4 85 F1 | 	sub	objptr, ##28176
0efa0     14 4E 85 F1 | 	sub	fp, #20
0efa4     A7 2C 02 FB | 	rdlong	local04, fp
0efa8     0C 4E 85 F1 | 	sub	fp, #12
0efac     06 2C 66 F0 | 	shl	local04, #6
0efb0     16 13 02 F1 | 	add	arg01, local04
0efb4     08 12 06 F1 | 	add	arg01, #8
0efb8     09 FB 01 FB | 	rdlong	result1, arg01
0efbc     1B FA 2D F4 | 	testbn	result1, #27 wz
0efc0     3C 00 90 5D |  if_ne	jmp	#LR__1242
0efc4     37 00 00 FF 
0efc8     10 E4 05 F1 | 	add	objptr, ##28176
0efcc     F2 12 02 FB | 	rdlong	arg01, objptr
0efd0     37 00 00 FF 
0efd4     10 E4 85 F1 | 	sub	objptr, ##28176
0efd8     0C 4E 05 F1 | 	add	fp, #12
0efdc     A7 2C 02 FB | 	rdlong	local04, fp
0efe0     06 2C 66 F0 | 	shl	local04, #6
0efe4     16 13 02 F1 | 	add	arg01, local04
0efe8     18 12 06 F1 | 	add	arg01, #24
0efec     14 4E 05 F1 | 	add	fp, #20
0eff0     A7 14 02 FB | 	rdlong	arg02, fp
0eff4     20 4E 85 F1 | 	sub	fp, #32
0eff8     09 15 62 FC | 	wrlong	arg02, arg01
0effc     80 00 90 FD | 	jmp	#LR__1243
0f000                 | LR__1242
0f000     37 00 00 FF 
0f004     10 E4 05 F1 | 	add	objptr, ##28176
0f008     F2 26 02 FB | 	rdlong	local01, objptr
0f00c     37 00 00 FF 
0f010     10 E4 85 F1 | 	sub	objptr, ##28176
0f014     0C 4E 05 F1 | 	add	fp, #12
0f018     A7 2C 02 FB | 	rdlong	local04, fp
0f01c     06 2C 66 F0 | 	shl	local04, #6
0f020     16 27 02 F1 | 	add	local01, local04
0f024     18 26 06 F1 | 	add	local01, #24
0f028     18 4E 05 F1 | 	add	fp, #24
0f02c     A7 14 02 FB | 	rdlong	arg02, fp
0f030     24 4E 85 F1 | 	sub	fp, #36
0f034     3E 2C 25 FF 
0f038     3C 12 06 F6 | 	mov	arg01, ##1247312956
0f03c     AC AF B1 FD | 	call	#__system___float_div
0f040     FD 12 02 F6 | 	mov	arg01, result1
0f044     01 14 06 F6 | 	mov	arg02, #1
0f048     64 B2 B1 FD | 	call	#__system___float_tointeger
0f04c     13 FB 51 FC | 	wrword	result1, local01
0f050     37 00 00 FF 
0f054     10 E4 05 F1 | 	add	objptr, ##28176
0f058     F2 12 02 FB | 	rdlong	arg01, objptr
0f05c     37 00 00 FF 
0f060     10 E4 85 F1 | 	sub	objptr, ##28176
0f064     0C 4E 05 F1 | 	add	fp, #12
0f068     A7 2C 02 FB | 	rdlong	local04, fp
0f06c     0C 4E 85 F1 | 	sub	fp, #12
0f070     06 2C 66 F0 | 	shl	local04, #6
0f074     16 13 02 F1 | 	add	arg01, local04
0f078     1A 12 06 F1 | 	add	arg01, #26
0f07c     09 01 5A FC | 	wrword	#256, arg01
0f080                 | LR__1243
0f080     A7 F0 03 F6 | 	mov	ptra, fp
0f084     B2 00 A0 FD | 	call	#popregs_
0f088                 | _do_changefreq_ret
0f088     2D 00 64 FD | 	ret
0f08c                 | 
0f08c                 | ' 
0f08c                 | ' '-------------------- changepan
0f08c                 | ' 
0f08c                 | ' sub do_changepan
0f08c                 | _do_changepan
0f08c     01 4A 05 F6 | 	mov	COUNT_, #1
0f090     A8 00 A0 FD | 	call	#pushregs_
0f094     14 F0 07 F1 | 	add	ptra, #20
0f098     28 E6 BF FD | 	call	#_pop
0f09c     A7 FA 61 FC | 	wrlong	result1, fp
0f0a0     04 4E 05 F1 | 	add	fp, #4
0f0a4     A7 FC 61 FC | 	wrlong	result2, fp
0f0a8     04 4E 05 F1 | 	add	fp, #4
0f0ac     A7 FE 61 FC | 	wrlong	result3, fp
0f0b0     08 4E 85 F1 | 	sub	fp, #8
0f0b4     00 00 23 FF 
0f0b8     00 26 06 F6 | 	mov	local01, ##1174405120
0f0bc     A7 12 02 F6 | 	mov	arg01, fp
0f0c0     A0 E8 BF FD | 	call	#_converttofloat
0f0c4     FD 14 02 F6 | 	mov	arg02, result1
0f0c8     13 13 02 F6 | 	mov	arg01, local01
0f0cc     18 AD B1 FD | 	call	#__system___float_mul
0f0d0     FD 12 02 F6 | 	mov	arg01, result1
0f0d4     01 14 06 F6 | 	mov	arg02, #1
0f0d8     D4 B1 B1 FD | 	call	#__system___float_tointeger
0f0dc     0D 26 C6 F9 | 	decod	local01, #13
0f0e0     FD 26 02 F1 | 	add	local01, result1
0f0e4     10 4E 05 F1 | 	add	fp, #16
0f0e8     A7 26 62 FC | 	wrlong	local01, fp
0f0ec                 | ' 
0f0ec                 | ' t1=pop()
0f0ec                 | ' pan=8192+round(8192*converttofloat(t1)) 
0f0ec                 | ' if pan<0 then pan=0
0f0ec     10 4E 85 F1 | 	sub	fp, #16
0f0f0     00 26 56 F2 | 	cmps	local01, #0 wc
0f0f4     10 4E 05 C1 |  if_b	add	fp, #16
0f0f8     A7 00 68 CC |  if_b	wrlong	#0, fp
0f0fc     10 4E 85 C1 |  if_b	sub	fp, #16
0f100                 | ' if pan>16384 then pan=16384
0f100     10 4E 05 F1 | 	add	fp, #16
0f104     A7 26 02 FB | 	rdlong	local01, fp
0f108     10 4E 85 F1 | 	sub	fp, #16
0f10c     20 00 00 FF 
0f110     01 26 56 F2 | 	cmps	local01, ##16385 wc
0f114     10 4E 05 31 |  if_ae	add	fp, #16
0f118     20 00 80 3F 
0f11c     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0f120     10 4E 85 31 |  if_ae	sub	fp, #16
0f124     9C E5 BF FD | 	call	#_pop
0f128     FF 26 02 F6 | 	mov	local01, result3
0f12c     A7 FA 61 FC | 	wrlong	result1, fp
0f130     04 4E 05 F1 | 	add	fp, #4
0f134     A7 FC 61 FC | 	wrlong	result2, fp
0f138     04 4E 05 F1 | 	add	fp, #4
0f13c     A7 26 62 FC | 	wrlong	local01, fp
0f140     08 4E 85 F1 | 	sub	fp, #8
0f144     A7 12 02 F6 | 	mov	arg01, fp
0f148     5C E7 BF FD | 	call	#_converttoint
0f14c     FD 26 52 F6 | 	abs	local01, result1 wc
0f150     07 26 06 F5 | 	and	local01, #7
0f154     13 27 82 F6 | 	negc	local01, local01
0f158     0C 4E 05 F1 | 	add	fp, #12
0f15c     A7 26 62 FC | 	wrlong	local01, fp
0f160     37 00 00 FF 
0f164     10 E4 05 F1 | 	add	objptr, ##28176
0f168     F2 12 02 FB | 	rdlong	arg01, objptr
0f16c     37 00 00 FF 
0f170     10 E4 85 F1 | 	sub	objptr, ##28176
0f174     06 26 66 F0 | 	shl	local01, #6
0f178     13 13 02 F1 | 	add	arg01, local01
0f17c     16 12 06 F1 | 	add	arg01, #22
0f180     04 4E 05 F1 | 	add	fp, #4
0f184     A7 14 02 FB | 	rdlong	arg02, fp
0f188     10 4E 85 F1 | 	sub	fp, #16
0f18c     09 15 52 FC | 	wrword	arg02, arg01
0f190     A7 F0 03 F6 | 	mov	ptra, fp
0f194     B2 00 A0 FD | 	call	#popregs_
0f198                 | _do_changepan_ret
0f198     2D 00 64 FD | 	ret
0f19c                 | 
0f19c                 | ' 
0f19c                 | ' '-------------------- changevol
0f19c                 | ' 
0f19c                 | ' sub do_changevol
0f19c                 | _do_changevol
0f19c     00 4A 05 F6 | 	mov	COUNT_, #0
0f1a0     A8 00 A0 FD | 	call	#pushregs_
0f1a4     14 F0 07 F1 | 	add	ptra, #20
0f1a8     18 E5 BF FD | 	call	#_pop
0f1ac     FF 14 02 F6 | 	mov	arg02, result3
0f1b0     A7 FA 61 FC | 	wrlong	result1, fp
0f1b4     04 4E 05 F1 | 	add	fp, #4
0f1b8     A7 FC 61 FC | 	wrlong	result2, fp
0f1bc     04 4E 05 F1 | 	add	fp, #4
0f1c0     A7 14 62 FC | 	wrlong	arg02, fp
0f1c4     08 4E 85 F1 | 	sub	fp, #8
0f1c8     A7 12 02 F6 | 	mov	arg01, fp
0f1cc     94 E7 BF FD | 	call	#_converttofloat
0f1d0     FD 12 02 F6 | 	mov	arg01, result1
0f1d4     00 3D 22 FF 
0f1d8     00 14 06 F6 | 	mov	arg02, ##1148846080
0f1dc     08 AC B1 FD | 	call	#__system___float_mul
0f1e0     FD 12 02 F6 | 	mov	arg01, result1
0f1e4     01 14 06 F6 | 	mov	arg02, #1
0f1e8     C4 B0 B1 FD | 	call	#__system___float_tointeger
0f1ec     FD 14 52 F6 | 	abs	arg02, result1 wc
0f1f0     0D 14 46 F7 | 	zerox	arg02, #13
0f1f4     0A 15 82 F6 | 	negc	arg02, arg02
0f1f8     10 4E 05 F1 | 	add	fp, #16
0f1fc     A7 14 62 FC | 	wrlong	arg02, fp
0f200     10 4E 85 F1 | 	sub	fp, #16
0f204     BC E4 BF FD | 	call	#_pop
0f208     FF 14 02 F6 | 	mov	arg02, result3
0f20c     A7 FA 61 FC | 	wrlong	result1, fp
0f210     04 4E 05 F1 | 	add	fp, #4
0f214     A7 FC 61 FC | 	wrlong	result2, fp
0f218     04 4E 05 F1 | 	add	fp, #4
0f21c     A7 14 62 FC | 	wrlong	arg02, fp
0f220     08 4E 85 F1 | 	sub	fp, #8
0f224     A7 12 02 F6 | 	mov	arg01, fp
0f228     7C E6 BF FD | 	call	#_converttoint
0f22c     FD 14 52 F6 | 	abs	arg02, result1 wc
0f230     07 14 06 F5 | 	and	arg02, #7
0f234     0A 15 82 F6 | 	negc	arg02, arg02
0f238     0C 4E 05 F1 | 	add	fp, #12
0f23c     A7 14 62 FC | 	wrlong	arg02, fp
0f240     37 00 00 FF 
0f244     10 E4 05 F1 | 	add	objptr, ##28176
0f248     F2 12 02 FB | 	rdlong	arg01, objptr
0f24c     37 00 00 FF 
0f250     10 E4 85 F1 | 	sub	objptr, ##28176
0f254     06 14 66 F0 | 	shl	arg02, #6
0f258     0A 13 02 F1 | 	add	arg01, arg02
0f25c     14 12 06 F1 | 	add	arg01, #20
0f260     04 4E 05 F1 | 	add	fp, #4
0f264     A7 14 02 FB | 	rdlong	arg02, fp
0f268     10 4E 85 F1 | 	sub	fp, #16
0f26c     09 15 52 FC | 	wrword	arg02, arg01
0f270     A7 F0 03 F6 | 	mov	ptra, fp
0f274     B2 00 A0 FD | 	call	#popregs_
0f278                 | _do_changevol_ret
0f278     2D 00 64 FD | 	ret
0f27c                 | 
0f27c                 | ' 
0f27c                 | ' '-------------------- changewav
0f27c                 | ' 
0f27c                 | ' sub do_changewav
0f27c                 | _do_changewav
0f27c     00 4A 05 F6 | 	mov	COUNT_, #0
0f280     A8 00 A0 FD | 	call	#pushregs_
0f284     14 F0 07 F1 | 	add	ptra, #20
0f288     38 E4 BF FD | 	call	#_pop
0f28c     FF 14 02 F6 | 	mov	arg02, result3
0f290     A7 FA 61 FC | 	wrlong	result1, fp
0f294     04 4E 05 F1 | 	add	fp, #4
0f298     A7 FC 61 FC | 	wrlong	result2, fp
0f29c     04 4E 05 F1 | 	add	fp, #4
0f2a0     A7 14 62 FC | 	wrlong	arg02, fp
0f2a4     08 4E 85 F1 | 	sub	fp, #8
0f2a8     A7 12 02 F6 | 	mov	arg01, fp
0f2ac     F8 E5 BF FD | 	call	#_converttoint
0f2b0     10 4E 05 F1 | 	add	fp, #16
0f2b4     A7 FA 61 FC | 	wrlong	result1, fp
0f2b8                 | ' 
0f2b8                 | ' t1=pop()
0f2b8                 | ' wave=converttoint(t1)
0f2b8                 | ' if wave<0 then wave=0
0f2b8     FD 14 02 F6 | 	mov	arg02, result1
0f2bc     10 4E 85 F1 | 	sub	fp, #16
0f2c0     00 14 56 F2 | 	cmps	arg02, #0 wc
0f2c4     10 4E 05 C1 |  if_b	add	fp, #16
0f2c8     A7 00 68 CC |  if_b	wrlong	#0, fp
0f2cc     10 4E 85 C1 |  if_b	sub	fp, #16
0f2d0     F0 E3 BF FD | 	call	#_pop
0f2d4     FF 14 02 F6 | 	mov	arg02, result3
0f2d8     A7 FA 61 FC | 	wrlong	result1, fp
0f2dc     04 4E 05 F1 | 	add	fp, #4
0f2e0     A7 FC 61 FC | 	wrlong	result2, fp
0f2e4     04 4E 05 F1 | 	add	fp, #4
0f2e8     A7 14 62 FC | 	wrlong	arg02, fp
0f2ec     08 4E 85 F1 | 	sub	fp, #8
0f2f0     A7 12 02 F6 | 	mov	arg01, fp
0f2f4     B0 E5 BF FD | 	call	#_converttoint
0f2f8     FD 14 52 F6 | 	abs	arg02, result1 wc
0f2fc     07 14 06 F5 | 	and	arg02, #7
0f300     0A 15 82 F6 | 	negc	arg02, arg02
0f304     0C 4E 05 F1 | 	add	fp, #12
0f308     A7 14 62 FC | 	wrlong	arg02, fp
0f30c                 | ' if wave <32 then 
0f30c     04 4E 05 F1 | 	add	fp, #4
0f310     A7 14 02 FB | 	rdlong	arg02, fp
0f314     10 4E 85 F1 | 	sub	fp, #16
0f318     20 14 56 F2 | 	cmps	arg02, #32 wc
0f31c     48 00 90 3D |  if_ae	jmp	#LR__1250
0f320     37 00 00 FF 
0f324     10 E4 05 F1 | 	add	objptr, ##28176
0f328     F2 12 02 FB | 	rdlong	arg01, objptr
0f32c     37 00 00 FF 
0f330     10 E4 85 F1 | 	sub	objptr, ##28176
0f334     0C 4E 05 F1 | 	add	fp, #12
0f338     A7 14 02 FB | 	rdlong	arg02, fp
0f33c     06 14 66 F0 | 	shl	arg02, #6
0f340     0A 13 02 F1 | 	add	arg01, arg02
0f344     08 12 06 F1 | 	add	arg01, #8
0f348     04 4E 05 F1 | 	add	fp, #4
0f34c     A7 14 02 FB | 	rdlong	arg02, fp
0f350     10 4E 85 F1 | 	sub	fp, #16
0f354     0B 14 66 F0 | 	shl	arg02, #11
0f358     00 00 40 FF 
0f35c     00 14 06 F1 | 	add	arg02, ##-2147483648
0f360     09 15 62 FC | 	wrlong	arg02, arg01
0f364     34 00 90 FD | 	jmp	#LR__1251
0f368                 | LR__1250
0f368     37 00 00 FF 
0f36c     10 E4 05 F1 | 	add	objptr, ##28176
0f370     F2 12 02 FB | 	rdlong	arg01, objptr
0f374     37 00 00 FF 
0f378     10 E4 85 F1 | 	sub	objptr, ##28176
0f37c     0C 4E 05 F1 | 	add	fp, #12
0f380     A7 14 02 FB | 	rdlong	arg02, fp
0f384     0C 4E 85 F1 | 	sub	fp, #12
0f388     06 14 66 F0 | 	shl	arg02, #6
0f38c     0A 13 02 F1 | 	add	arg01, arg02
0f390     08 12 06 F1 | 	add	arg01, #8
0f394     00 00 C4 FF 
0f398     09 01 68 FC | 	wrlong	##-2013265920, arg01
0f39c                 | LR__1251
0f39c     A7 F0 03 F6 | 	mov	ptra, fp
0f3a0     B2 00 A0 FD | 	call	#popregs_
0f3a4                 | _do_changewav_ret
0f3a4     2D 00 64 FD | 	ret
0f3a8                 | 
0f3a8                 | ' 
0f3a8                 | ' '-------------------- chr$
0f3a8                 | ' 
0f3a8                 | ' sub do_chr
0f3a8                 | _do_chr
0f3a8     01 4A 05 F6 | 	mov	COUNT_, #1
0f3ac     A8 00 A0 FD | 	call	#pushregs_
0f3b0     14 F0 07 F1 | 	add	ptra, #20
0f3b4     4A 00 00 FF 
0f3b8     80 E4 05 F1 | 	add	objptr, ##38016
0f3bc     F2 26 02 FB | 	rdlong	local01, objptr
0f3c0     13 17 02 F6 | 	mov	arg03, local01
0f3c4     01 16 66 F0 | 	shl	arg03, #1
0f3c8     13 17 02 F1 | 	add	arg03, local01
0f3cc     02 16 66 F0 | 	shl	arg03, #2
0f3d0     03 00 00 FF 
0f3d4     04 E4 85 F1 | 	sub	objptr, ##1540
0f3d8     F2 16 02 F1 | 	add	arg03, objptr
0f3dc     0B 17 02 FB | 	rdlong	arg03, arg03
0f3e0     0C 4E 05 F1 | 	add	fp, #12
0f3e4     A7 16 62 FC | 	wrlong	arg03, fp
0f3e8                 | ' 
0f3e8                 | ' numpar=compiledline(lineptr_e).result.uresult
0f3e8                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f3e8     0C 4E 85 F1 | 	sub	fp, #12
0f3ec     02 16 16 F2 | 	cmp	arg03, #2 wc
0f3f0     47 00 00 FF 
0f3f4     7C E4 85 F1 | 	sub	objptr, ##36476
0f3f8     0C 4E 05 C1 |  if_b	add	fp, #12
0f3fc     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f400     0C 4E 85 C1 |  if_b	sub	fp, #12
0f404     40 00 90 4D |  if_c_and_nz	jmp	#LR__1260
0f408     00 12 06 F6 | 	mov	arg01, #0
0f40c     88 D8 B1 FD | 	call	#__system___getiolock_0613
0f410     FD 12 02 F6 | 	mov	arg01, result1
0f414     58 7B B1 FD | 	call	#__system___lockmem
0f418     B9 01 00 FF 
0f41c     EA 14 06 F6 | 	mov	arg02, ##@LR__5900
0f420     00 12 06 F6 | 	mov	arg01, #0
0f424     00 16 06 F6 | 	mov	arg03, #0
0f428     38 88 B1 FD | 	call	#__system___basic_print_string
0f42c     00 12 06 F6 | 	mov	arg01, #0
0f430     64 D8 B1 FD | 	call	#__system___getiolock_0613
0f434     FD 00 68 FC | 	wrlong	#0, result1
0f438     27 12 06 F6 | 	mov	arg01, #39
0f43c     00 14 06 F6 | 	mov	arg02, #0
0f440     10 41 B1 FD | 	call	#_printerror
0f444     54 00 90 FD | 	jmp	#LR__1261
0f448                 | LR__1260
0f448     78 E2 BF FD | 	call	#_pop
0f44c     FF 26 02 F6 | 	mov	local01, result3
0f450     A7 FA 61 FC | 	wrlong	result1, fp
0f454     04 4E 05 F1 | 	add	fp, #4
0f458     A7 FC 61 FC | 	wrlong	result2, fp
0f45c     04 4E 05 F1 | 	add	fp, #4
0f460     A7 26 62 FC | 	wrlong	local01, fp
0f464     08 4E 85 F1 | 	sub	fp, #8
0f468     A7 12 02 F6 | 	mov	arg01, fp
0f46c     38 E4 BF FD | 	call	#_converttoint
0f470     10 4E 05 F1 | 	add	fp, #16
0f474     A7 FA 61 FC | 	wrlong	result1, fp
0f478     FD 12 02 F6 | 	mov	arg01, result1
0f47c     10 4E 85 F1 | 	sub	fp, #16
0f480     2C 9D B1 FD | 	call	#__system__Chr_S
0f484     A7 FA 61 FC | 	wrlong	result1, fp
0f488     08 4E 05 F1 | 	add	fp, #8
0f48c     A7 3E 68 FC | 	wrlong	#31, fp
0f490     08 4E 85 F1 | 	sub	fp, #8
0f494     A7 12 02 F6 | 	mov	arg01, fp
0f498     C0 E2 BF FD | 	call	#_push
0f49c                 | LR__1261
0f49c     A7 F0 03 F6 | 	mov	ptra, fp
0f4a0     B2 00 A0 FD | 	call	#popregs_
0f4a4                 | _do_chr_ret
0f4a4     2D 00 64 FD | 	ret
0f4a8                 | 
0f4a8                 | ' 
0f4a8                 | ' '-------------------- circle
0f4a8                 | ' 
0f4a8                 | ' sub do_circle
0f4a8                 | _do_circle
0f4a8     02 4A 05 F6 | 	mov	COUNT_, #2
0f4ac     A8 00 A0 FD | 	call	#pushregs_
0f4b0     24 F0 07 F1 | 	add	ptra, #36
0f4b4     0C E2 BF FD | 	call	#_pop
0f4b8     FD 18 02 F6 | 	mov	arg04, result1
0f4bc     FE 16 02 F6 | 	mov	arg03, result2
0f4c0     FF 14 02 F6 | 	mov	arg02, result3
0f4c4     18 4E 05 F1 | 	add	fp, #24
0f4c8     A7 18 62 FC | 	wrlong	arg04, fp
0f4cc     04 4E 05 F1 | 	add	fp, #4
0f4d0     A7 16 62 FC | 	wrlong	arg03, fp
0f4d4     04 4E 05 F1 | 	add	fp, #4
0f4d8     A7 14 62 FC | 	wrlong	arg02, fp
0f4dc     20 4E 85 F1 | 	sub	fp, #32
0f4e0     E0 E1 BF FD | 	call	#_pop
0f4e4     FD 18 02 F6 | 	mov	arg04, result1
0f4e8     FE 16 02 F6 | 	mov	arg03, result2
0f4ec     FF 26 02 F6 | 	mov	local01, result3
0f4f0     0C 4E 05 F1 | 	add	fp, #12
0f4f4     A7 18 62 FC | 	wrlong	arg04, fp
0f4f8     04 4E 05 F1 | 	add	fp, #4
0f4fc     A7 16 62 FC | 	wrlong	arg03, fp
0f500     04 4E 05 F1 | 	add	fp, #4
0f504     A7 26 62 FC | 	wrlong	local01, fp
0f508     14 4E 85 F1 | 	sub	fp, #20
0f50c     B4 E1 BF FD | 	call	#_pop
0f510     A7 FA 61 FC | 	wrlong	result1, fp
0f514     04 4E 05 F1 | 	add	fp, #4
0f518     A7 FC 61 FC | 	wrlong	result2, fp
0f51c     04 4E 05 F1 | 	add	fp, #4
0f520     A7 FE 61 FC | 	wrlong	result3, fp
0f524                 | ' 
0f524                 | ' t3=pop()
0f524                 | ' t2=pop()
0f524                 | ' t1=pop()
0f524                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f524     FF 18 02 F6 | 	mov	arg04, result3
0f528     08 4E 85 F1 | 	sub	fp, #8
0f52c     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f530     08 4E 05 51 |  if_ne	add	fp, #8
0f534     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f538     08 4E 85 51 |  if_ne	sub	fp, #8
0f53c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0f540     7C 00 90 5D |  if_ne	jmp	#LR__1270
0f544     14 4E 05 F1 | 	add	fp, #20
0f548     A7 26 02 FB | 	rdlong	local01, fp
0f54c     14 4E 85 F1 | 	sub	fp, #20
0f550     1C 26 0E F2 | 	cmp	local01, #28 wz
0f554     14 4E 05 51 |  if_ne	add	fp, #20
0f558     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f55c     14 4E 85 51 |  if_ne	sub	fp, #20
0f560     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f564     58 00 90 5D |  if_ne	jmp	#LR__1270
0f568     20 4E 05 F1 | 	add	fp, #32
0f56c     A7 26 02 FB | 	rdlong	local01, fp
0f570     20 4E 85 F1 | 	sub	fp, #32
0f574     1C 26 0E F2 | 	cmp	local01, #28 wz
0f578     20 4E 05 51 |  if_ne	add	fp, #32
0f57c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f580     20 4E 85 51 |  if_ne	sub	fp, #32
0f584     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f588     34 00 90 5D |  if_ne	jmp	#LR__1270
0f58c     A7 12 02 FB | 	rdlong	arg01, fp
0f590     0C 4E 05 F1 | 	add	fp, #12
0f594     A7 14 02 FB | 	rdlong	arg02, fp
0f598     0C 4E 05 F1 | 	add	fp, #12
0f59c     A7 16 02 FB | 	rdlong	arg03, fp
0f5a0     18 4E 85 F1 | 	sub	fp, #24
0f5a4     37 00 00 FF 
0f5a8     28 E4 05 F1 | 	add	objptr, ##28200
0f5ac     F2 18 02 FB | 	rdlong	arg04, objptr
0f5b0     37 00 00 FF 
0f5b4     28 E4 85 F1 | 	sub	objptr, ##28200
0f5b8     6C 58 B1 FD | 	call	#_hg010b_spin2_circle
0f5bc                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f5bc     54 00 90 FD | 	jmp	#LR__1271
0f5c0                 | LR__1270
0f5c0     A7 12 02 F6 | 	mov	arg01, fp
0f5c4     E0 E2 BF FD | 	call	#_converttoint
0f5c8     FD 26 02 F6 | 	mov	local01, result1
0f5cc     0C 4E 05 F1 | 	add	fp, #12
0f5d0     A7 12 02 F6 | 	mov	arg01, fp
0f5d4     0C 4E 85 F1 | 	sub	fp, #12
0f5d8     CC E2 BF FD | 	call	#_converttoint
0f5dc     FD 28 02 F6 | 	mov	local02, result1
0f5e0     18 4E 05 F1 | 	add	fp, #24
0f5e4     A7 12 02 F6 | 	mov	arg01, fp
0f5e8     18 4E 85 F1 | 	sub	fp, #24
0f5ec     B8 E2 BF FD | 	call	#_converttoint
0f5f0     FD 16 02 F6 | 	mov	arg03, result1
0f5f4     37 00 00 FF 
0f5f8     28 E4 05 F1 | 	add	objptr, ##28200
0f5fc     F2 18 02 FB | 	rdlong	arg04, objptr
0f600     37 00 00 FF 
0f604     28 E4 85 F1 | 	sub	objptr, ##28200
0f608     13 13 02 F6 | 	mov	arg01, local01
0f60c     14 15 02 F6 | 	mov	arg02, local02
0f610     14 58 B1 FD | 	call	#_hg010b_spin2_circle
0f614                 | LR__1271
0f614     A7 F0 03 F6 | 	mov	ptra, fp
0f618     B2 00 A0 FD | 	call	#popregs_
0f61c                 | _do_circle_ret
0f61c     2D 00 64 FD | 	ret
0f620                 | 
0f620                 | ' 
0f620                 | ' '-------------------- click
0f620                 | ' 
0f620                 | ' sub do_click
0f620                 | _do_click
0f620     A0 E0 BF FD | 	call	#_pop
0f624     00 FA 4D F2 | 	cmps	result1, #0 wz
0f628                 | ' 
0f628                 | ' t1=pop()
0f628                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f628     50 00 00 AF 
0f62c     3C E5 05 A1 |  if_e	add	objptr, ##41276
0f630     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f634     50 00 00 FF 
0f638     3C E5 C5 F3 | 	sumz	objptr, ##41276
0f63c     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0f640     50 00 00 5F 
0f644     3C E5 85 51 |  if_ne	sub	objptr, ##41276
0f648                 | _do_click_ret
0f648     2D 00 64 FD | 	ret
0f64c                 | 
0f64c                 | ' 
0f64c                 | ' '-------------------- close
0f64c                 | ' 
0f64c                 | ' sub do_close
0f64c                 | _do_close
0f64c     03 4A 05 F6 | 	mov	COUNT_, #3
0f650     A8 00 A0 FD | 	call	#pushregs_
0f654     6C E0 BF FD | 	call	#_pop
0f658     FD 26 02 F6 | 	mov	local01, result1
0f65c     FF 16 02 F6 | 	mov	arg03, result3
0f660     FE 28 02 F6 | 	mov	local02, result2
0f664     0B 2B 02 F6 | 	mov	local03, arg03
0f668                 | ' 
0f668                 | ' numpar=compiledline(lineptr_e).result.uresult
0f668                 | ' t1=pop()
0f668                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f668     2C 2A 0E F2 | 	cmp	local03, #44 wz
0f66c     44 00 90 AD |  if_e	jmp	#LR__1280
0f670     00 12 06 F6 | 	mov	arg01, #0
0f674     20 D6 B1 FD | 	call	#__system___getiolock_0613
0f678     FD 12 02 F6 | 	mov	arg01, result1
0f67c     F0 78 B1 FD | 	call	#__system___lockmem
0f680     B9 01 00 FF 
0f684     F1 14 06 F6 | 	mov	arg02, ##@LR__5901
0f688     00 12 06 F6 | 	mov	arg01, #0
0f68c     00 16 06 F6 | 	mov	arg03, #0
0f690     D0 85 B1 FD | 	call	#__system___basic_print_string
0f694     00 12 06 F6 | 	mov	arg01, #0
0f698     0A 14 06 F6 | 	mov	arg02, #10
0f69c     00 16 06 F6 | 	mov	arg03, #0
0f6a0     68 85 B1 FD | 	call	#__system___basic_print_char
0f6a4     00 12 06 F6 | 	mov	arg01, #0
0f6a8     EC D5 B1 FD | 	call	#__system___getiolock_0613
0f6ac     FD 00 68 FC | 	wrlong	#0, result1
0f6b0     08 00 90 FD | 	jmp	#LR__1281
0f6b4                 | LR__1280
0f6b4                 | ' channel  = t1.result.iresult
0f6b4                 | ' close #channel
0f6b4     13 13 02 F6 | 	mov	arg01, local01
0f6b8     0C CC B1 FD | 	call	#__system__close
0f6bc                 | LR__1281
0f6bc     A7 F0 03 F6 | 	mov	ptra, fp
0f6c0     B2 00 A0 FD | 	call	#popregs_
0f6c4                 | _do_close_ret
0f6c4     2D 00 64 FD | 	ret
0f6c8                 | 
0f6c8                 | ' 
0f6c8                 | ' '-------------------- cls
0f6c8                 | ' 
0f6c8                 | ' sub do_cls
0f6c8                 | _do_cls
0f6c8     37 00 00 FF 
0f6cc     3C E4 05 F1 | 	add	objptr, ##28220
0f6d0     F2 12 02 FB | 	rdlong	arg01, objptr
0f6d4     04 E4 85 F1 | 	sub	objptr, #4
0f6d8     F2 14 02 FB | 	rdlong	arg02, objptr
0f6dc     37 00 00 FF 
0f6e0     38 E4 85 F1 | 	sub	objptr, ##28216
0f6e4     04 5C B1 FD | 	call	#_hg010b_spin2_cls
0f6e8     37 00 00 FF 
0f6ec     3C E4 05 F1 | 	add	objptr, ##28220
0f6f0     F2 14 02 FB | 	rdlong	arg02, objptr
0f6f4     14 E4 85 F1 | 	sub	objptr, #20
0f6f8     F2 14 62 FC | 	wrlong	arg02, objptr
0f6fc     37 00 00 FF 
0f700     28 E4 85 F1 | 	sub	objptr, ##28200
0f704                 | _do_cls_ret
0f704     2D 00 64 FD | 	ret
0f708                 | 
0f708                 | ' 
0f708                 | ' sub do_coginit
0f708                 | _do_coginit
0f708     00 4A 05 F6 | 	mov	COUNT_, #0
0f70c     A8 00 A0 FD | 	call	#pushregs_
0f710     08 00 00 FF 
0f714     1C F0 07 F1 | 	add	ptra, ##4124
0f718     4A 00 00 FF 
0f71c     80 E4 05 F1 | 	add	objptr, ##38016
0f720     F2 FA 01 FB | 	rdlong	result1, objptr
0f724     FD FC 01 F6 | 	mov	result2, result1
0f728     01 FC 65 F0 | 	shl	result2, #1
0f72c     FD FC 01 F1 | 	add	result2, result1
0f730     02 FC 65 F0 | 	shl	result2, #2
0f734     03 00 00 FF 
0f738     04 E4 85 F1 | 	sub	objptr, ##1540
0f73c     F2 FC 01 F1 | 	add	result2, objptr
0f740     FE FC 01 FB | 	rdlong	result2, result2
0f744     A7 FC 61 FC | 	wrlong	result2, fp
0f748                 | ' numpar=compiledline(lineptr_e).result.uresult
0f748                 | ' if numpar<2 orelse numpar>3 then print "coginit: "; : printerror(39) : return
0f748     02 FC 55 F2 | 	cmps	result2, #2 wc
0f74c     47 00 00 FF 
0f750     7C E4 85 F1 | 	sub	objptr, ##36476
0f754     0C 00 90 CD |  if_b	jmp	#LR__1290
0f758     A7 FA 01 FB | 	rdlong	result1, fp
0f75c     04 FA 55 F2 | 	cmps	result1, #4 wc
0f760     40 00 90 CD |  if_b	jmp	#LR__1291
0f764                 | LR__1290
0f764     00 12 06 F6 | 	mov	arg01, #0
0f768     2C D5 B1 FD | 	call	#__system___getiolock_0613
0f76c     FD 12 02 F6 | 	mov	arg01, result1
0f770     FC 77 B1 FD | 	call	#__system___lockmem
0f774     B9 01 00 FF 
0f778     03 15 06 F6 | 	mov	arg02, ##@LR__5902
0f77c     00 12 06 F6 | 	mov	arg01, #0
0f780     00 16 06 F6 | 	mov	arg03, #0
0f784     DC 84 B1 FD | 	call	#__system___basic_print_string
0f788     00 12 06 F6 | 	mov	arg01, #0
0f78c     08 D5 B1 FD | 	call	#__system___getiolock_0613
0f790     FD 00 68 FC | 	wrlong	#0, result1
0f794     27 12 06 F6 | 	mov	arg01, #39
0f798     00 14 06 F6 | 	mov	arg02, #0
0f79c     B4 3D B1 FD | 	call	#_printerror
0f7a0     94 01 90 FD | 	jmp	#LR__1295
0f7a4                 | LR__1291
0f7a4     1C DF BF FD | 	call	#_pop
0f7a8     FF 16 02 F6 | 	mov	arg03, result3
0f7ac     08 00 00 FF 
0f7b0     10 4E 05 F1 | 	add	fp, ##4112
0f7b4     A7 FA 61 FC | 	wrlong	result1, fp
0f7b8     04 4E 05 F1 | 	add	fp, #4
0f7bc     A7 FC 61 FC | 	wrlong	result2, fp
0f7c0     04 4E 05 F1 | 	add	fp, #4
0f7c4     A7 16 62 FC | 	wrlong	arg03, fp
0f7c8     08 4E 85 F1 | 	sub	fp, #8
0f7cc     A7 12 02 F6 | 	mov	arg01, fp
0f7d0     08 00 00 FF 
0f7d4     10 4E 85 F1 | 	sub	fp, ##4112
0f7d8     CC E0 BF FD | 	call	#_converttoint
0f7dc     FD 16 02 F6 | 	mov	arg03, result1
0f7e0     04 4E 05 F1 | 	add	fp, #4
0f7e4     A7 16 62 FC | 	wrlong	arg03, fp
0f7e8     04 4E 85 F1 | 	sub	fp, #4
0f7ec     D4 DE BF FD | 	call	#_pop
0f7f0     FF 16 02 F6 | 	mov	arg03, result3
0f7f4     08 00 00 FF 
0f7f8     10 4E 05 F1 | 	add	fp, ##4112
0f7fc     A7 FA 61 FC | 	wrlong	result1, fp
0f800     04 4E 05 F1 | 	add	fp, #4
0f804     A7 FC 61 FC | 	wrlong	result2, fp
0f808     04 4E 05 F1 | 	add	fp, #4
0f80c     A7 16 62 FC | 	wrlong	arg03, fp
0f810     08 4E 85 F1 | 	sub	fp, #8
0f814     A7 12 02 F6 | 	mov	arg01, fp
0f818     08 00 00 FF 
0f81c     10 4E 85 F1 | 	sub	fp, ##4112
0f820     84 E0 BF FD | 	call	#_converttoint
0f824     08 4E 05 F1 | 	add	fp, #8
0f828     A7 FA 61 FC | 	wrlong	result1, fp
0f82c     08 4E 85 F1 | 	sub	fp, #8
0f830                 | ' t1=pop()
0f830                 | ' ptra_val=converttoint(t1)
0f830                 | ' t1=pop()
0f830                 | ' addrval=converttoint(t1)
0f830                 | ' if numpar=3 then 
0f830     A7 FA 01 FB | 	rdlong	result1, fp
0f834     03 FA 0D F2 | 	cmp	result1, #3 wz
0f838     48 00 90 5D |  if_ne	jmp	#LR__1292
0f83c     84 DE BF FD | 	call	#_pop
0f840     FF 16 02 F6 | 	mov	arg03, result3
0f844     08 00 00 FF 
0f848     10 4E 05 F1 | 	add	fp, ##4112
0f84c     A7 FA 61 FC | 	wrlong	result1, fp
0f850     04 4E 05 F1 | 	add	fp, #4
0f854     A7 FC 61 FC | 	wrlong	result2, fp
0f858     04 4E 05 F1 | 	add	fp, #4
0f85c     A7 16 62 FC | 	wrlong	arg03, fp
0f860     08 4E 85 F1 | 	sub	fp, #8
0f864     A7 12 02 F6 | 	mov	arg01, fp
0f868     08 00 00 FF 
0f86c     10 4E 85 F1 | 	sub	fp, ##4112
0f870     34 E0 BF FD | 	call	#_converttoint
0f874     0C 4E 05 F1 | 	add	fp, #12
0f878     A7 FA 61 FC | 	wrlong	result1, fp
0f87c     0C 4E 85 F1 | 	sub	fp, #12
0f880     0C 00 90 FD | 	jmp	#LR__1293
0f884                 | LR__1292
0f884     0C 4E 05 F1 | 	add	fp, #12
0f888     A7 20 68 FC | 	wrlong	#16, fp
0f88c     0C 4E 85 F1 | 	sub	fp, #12
0f890                 | LR__1293
0f890                 | '     
0f890                 | ' if addrval>$80000 then psram.read1(varptr(tempbuf(0)),addrval,4096) : addrval=varptr(tempbuf(0))
0f890     08 4E 05 F1 | 	add	fp, #8
0f894     A7 16 02 FB | 	rdlong	arg03, fp
0f898     08 4E 85 F1 | 	sub	fp, #8
0f89c     00 04 00 FF 
0f8a0     01 16 56 F2 | 	cmps	arg03, ##524289 wc
0f8a4     40 00 90 CD |  if_b	jmp	#LR__1294
0f8a8     10 4E 05 F1 | 	add	fp, #16
0f8ac     A7 12 02 F6 | 	mov	arg01, fp
0f8b0     08 4E 85 F1 | 	sub	fp, #8
0f8b4     A7 14 02 FB | 	rdlong	arg02, fp
0f8b8     08 4E 85 F1 | 	sub	fp, #8
0f8bc     0C 16 C6 F9 | 	decod	arg03, #12
0f8c0     0B 00 00 FF 
0f8c4     CC E4 05 F1 | 	add	objptr, ##5836
0f8c8     1C 6A B1 FD | 	call	#_psram_spin2_read1
0f8cc     0B 00 00 FF 
0f8d0     CC E4 85 F1 | 	sub	objptr, ##5836
0f8d4     10 4E 05 F1 | 	add	fp, #16
0f8d8     A7 FA 01 F6 | 	mov	result1, fp
0f8dc     08 4E 85 F1 | 	sub	fp, #8
0f8e0     A7 FA 61 FC | 	wrlong	result1, fp
0f8e4     08 4E 85 F1 | 	sub	fp, #8
0f8e8                 | LR__1294
0f8e8     0C 4E 05 F1 | 	add	fp, #12
0f8ec     A7 FA 01 FB | 	rdlong	result1, fp
0f8f0     04 4E 85 F1 | 	sub	fp, #4
0f8f4     A7 14 02 FB | 	rdlong	arg02, fp
0f8f8     04 4E 85 F1 | 	sub	fp, #4
0f8fc     A7 16 02 FB | 	rdlong	arg03, fp
0f900                 | ' 
0f900                 | '  asm
0f900     28 16 62 FD | 	setq	arg03
0f904     0A FB F1 FC | 	coginit	result1, arg02 wc
0f908                 | '  
0f908                 | ' return cog 
0f908     08 4E 05 F1 | 	add	fp, #8
0f90c     A7 FA 61 FC | 	wrlong	result1, fp
0f910     08 00 00 FF 
0f914     04 4E 05 F1 | 	add	fp, ##4100
0f918     A7 FA 61 FC | 	wrlong	result1, fp
0f91c     08 4E 05 F1 | 	add	fp, #8
0f920     A7 38 68 FC | 	wrlong	#28, fp
0f924     08 4E 85 F1 | 	sub	fp, #8
0f928     A7 12 02 F6 | 	mov	arg01, fp
0f92c     08 00 00 FF 
0f930     10 4E 85 F1 | 	sub	fp, ##4112
0f934     24 DE BF FD | 	call	#_push
0f938                 | LR__1295
0f938     A7 F0 03 F6 | 	mov	ptra, fp
0f93c     B2 00 A0 FD | 	call	#popregs_
0f940                 | _do_coginit_ret
0f940     2D 00 64 FD | 	ret
0f944                 | 
0f944                 | ' 
0f944                 | ' '-------------------- cogstop
0f944                 | ' 
0f944                 | ' sub do_cogstop
0f944                 | _do_cogstop
0f944     00 4A 05 F6 | 	mov	COUNT_, #0
0f948     A8 00 A0 FD | 	call	#pushregs_
0f94c     0C F0 07 F1 | 	add	ptra, #12
0f950     70 DD BF FD | 	call	#_pop
0f954     A7 FA 61 FC | 	wrlong	result1, fp
0f958     04 4E 05 F1 | 	add	fp, #4
0f95c     A7 FC 61 FC | 	wrlong	result2, fp
0f960     04 4E 05 F1 | 	add	fp, #4
0f964     A7 FE 61 FC | 	wrlong	result3, fp
0f968     08 4E 85 F1 | 	sub	fp, #8
0f96c     A7 12 02 F6 | 	mov	arg01, fp
0f970     34 DF BF FD | 	call	#_converttoint
0f974     03 FA 61 FD | 	cogstop	result1
0f978     A7 F0 03 F6 | 	mov	ptra, fp
0f97c     B2 00 A0 FD | 	call	#popregs_
0f980                 | _do_cogstop_ret
0f980     2D 00 64 FD | 	ret
0f984                 | 
0f984                 | ' 
0f984                 | ' '-------------------- color
0f984                 | ' 
0f984                 | ' sub do_color
0f984                 | _do_color
0f984     03 4A 05 F6 | 	mov	COUNT_, #3
0f988     A8 00 A0 FD | 	call	#pushregs_
0f98c     34 DD BF FD | 	call	#_pop
0f990     FD 26 02 F6 | 	mov	local01, result1
0f994     FE 28 02 F6 | 	mov	local02, result2
0f998     FF 2A 02 F6 | 	mov	local03, result3
0f99c     37 00 00 FF 
0f9a0     28 E4 05 F1 | 	add	objptr, ##28200
0f9a4     F2 26 62 FC | 	wrlong	local01, objptr
0f9a8     37 00 00 FF 
0f9ac     28 E4 85 F1 | 	sub	objptr, ##28200
0f9b0     A7 F0 03 F6 | 	mov	ptra, fp
0f9b4     B2 00 A0 FD | 	call	#popregs_
0f9b8                 | _do_color_ret
0f9b8     2D 00 64 FD | 	ret
0f9bc                 | 
0f9bc                 | ' 
0f9bc                 | ' '-------------------- copy
0f9bc                 | ' 
0f9bc                 | ' sub do_copy
0f9bc                 | _do_copy
0f9bc     08 4A 05 F6 | 	mov	COUNT_, #8
0f9c0     A8 00 A0 FD | 	call	#pushregs_
0f9c4     FC DC BF FD | 	call	#_pop
0f9c8     FD 26 02 F6 | 	mov	local01, result1
0f9cc     FE 1A 02 F6 | 	mov	arg05, result2
0f9d0     FF 18 02 F6 | 	mov	arg04, result3
0f9d4     0D 29 02 F6 | 	mov	local02, arg05
0f9d8     0C 2B 02 F6 | 	mov	local03, arg04
0f9dc     E4 DC BF FD | 	call	#_pop
0f9e0     FE 1A 02 F6 | 	mov	arg05, result2
0f9e4     FF 18 02 F6 | 	mov	arg04, result3
0f9e8     FD 2C 02 F6 | 	mov	local04, result1
0f9ec     0D 2F 02 F6 | 	mov	local05, arg05
0f9f0     0C 31 02 F6 | 	mov	local06, arg04
0f9f4                 | ' 
0f9f4                 | ' t1=pop()
0f9f4                 | ' t2=pop()
0f9f4                 | ' if t2.result_type=result_string2 then 
0f9f4     2B 30 0E F2 | 	cmp	local06, #43 wz
0f9f8     10 00 90 5D |  if_ne	jmp	#LR__1300
0f9fc     16 13 02 F6 | 	mov	arg01, local04
0fa00     38 DE BF FD | 	call	#_convertstring
0fa04     FD 32 02 F6 | 	mov	local07, result1
0fa08     2C 00 90 FD | 	jmp	#LR__1302
0fa0c                 | LR__1300
0fa0c     1F 30 0E F2 | 	cmp	local06, #31 wz
0fa10     16 33 02 A6 |  if_e	mov	local07, local04
0fa14     20 00 90 AD |  if_e	jmp	#LR__1301
0fa18     50 00 00 FF 
0fa1c     F0 E4 05 F1 | 	add	objptr, ##41200
0fa20     F2 14 02 FB | 	rdlong	arg02, objptr
0fa24     50 00 00 FF 
0fa28     F0 E4 85 F1 | 	sub	objptr, ##41200
0fa2c     0F 12 06 F6 | 	mov	arg01, #15
0fa30     20 3B B1 FD | 	call	#_printerror
0fa34                 | '   printerror(15,runheader(0)) : return
0fa34     50 03 90 FD | 	jmp	#LR__1309
0fa38                 | LR__1301
0fa38                 | LR__1302
0fa38                 | ' if t1.result_type=result_string2 then 
0fa38     2B 2A 0E F2 | 	cmp	local03, #43 wz
0fa3c     10 00 90 5D |  if_ne	jmp	#LR__1303
0fa40     13 13 02 F6 | 	mov	arg01, local01
0fa44     F4 DD BF FD | 	call	#_convertstring
0fa48     FD 34 02 F6 | 	mov	local08, result1
0fa4c     2C 00 90 FD | 	jmp	#LR__1305
0fa50                 | LR__1303
0fa50     1F 2A 0E F2 | 	cmp	local03, #31 wz
0fa54     13 35 02 A6 |  if_e	mov	local08, local01
0fa58     20 00 90 AD |  if_e	jmp	#LR__1304
0fa5c     50 00 00 FF 
0fa60     F0 E4 05 F1 | 	add	objptr, ##41200
0fa64     F2 14 02 FB | 	rdlong	arg02, objptr
0fa68     50 00 00 FF 
0fa6c     F0 E4 85 F1 | 	sub	objptr, ##41200
0fa70     0F 12 06 F6 | 	mov	arg01, #15
0fa74     DC 3A B1 FD | 	call	#_printerror
0fa78                 | '   printerror(15,runheader(0)) : return
0fa78     0C 03 90 FD | 	jmp	#LR__1309
0fa7c                 | LR__1304
0fa7c                 | LR__1305
0fa7c                 | ' 
0fa7c                 | ' open filename_1 for input as #9 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_1 : close #9 : return
0fa7c     09 12 06 F6 | 	mov	arg01, #9
0fa80     19 15 02 F6 | 	mov	arg02, local07
0fa84     00 16 06 F6 | 	mov	arg03, #0
0fa88     E8 80 B1 FD | 	call	#__system___basic_open_string
0fa8c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0fa90     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0fa94     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0fa98     52 00 00 FF 
0fa9c     D8 E4 05 F1 | 	add	objptr, ##42200
0faa0     F2 FA 61 FC | 	wrlong	result1, objptr
0faa4     52 00 00 FF 
0faa8     D8 E4 85 F1 | 	sub	objptr, ##42200
0faac     0C 01 90 AD |  if_e	jmp	#LR__1306
0fab0     00 12 06 F6 | 	mov	arg01, #0
0fab4     E0 D1 B1 FD | 	call	#__system___getiolock_0613
0fab8     FD 12 02 F6 | 	mov	arg01, result1
0fabc     B0 74 B1 FD | 	call	#__system___lockmem
0fac0     B9 01 00 FF 
0fac4     0D 15 06 F6 | 	mov	arg02, ##@LR__5903
0fac8     00 12 06 F6 | 	mov	arg01, #0
0facc     00 16 06 F6 | 	mov	arg03, #0
0fad0     90 81 B1 FD | 	call	#__system___basic_print_string
0fad4     52 00 00 FF 
0fad8     D8 E4 05 F1 | 	add	objptr, ##42200
0fadc     F2 14 02 FB | 	rdlong	arg02, objptr
0fae0     52 00 00 FF 
0fae4     D8 E4 85 F1 | 	sub	objptr, ##42200
0fae8     00 12 06 F6 | 	mov	arg01, #0
0faec     00 16 06 F6 | 	mov	arg03, #0
0faf0     0A 18 06 F6 | 	mov	arg04, #10
0faf4     B0 81 B1 FD | 	call	#__system___basic_print_integer
0faf8     B9 01 00 FF 
0fafc     1D 15 06 F6 | 	mov	arg02, ##@LR__5904
0fb00     00 12 06 F6 | 	mov	arg01, #0
0fb04     00 16 06 F6 | 	mov	arg03, #0
0fb08     58 81 B1 FD | 	call	#__system___basic_print_string
0fb0c     50 00 00 FF 
0fb10     F0 E4 05 F1 | 	add	objptr, ##41200
0fb14     F2 14 02 FB | 	rdlong	arg02, objptr
0fb18     50 00 00 FF 
0fb1c     F0 E4 85 F1 | 	sub	objptr, ##41200
0fb20     00 12 06 F6 | 	mov	arg01, #0
0fb24     00 16 06 F6 | 	mov	arg03, #0
0fb28     0A 18 06 F6 | 	mov	arg04, #10
0fb2c     B8 81 B1 FD | 	call	#__system___basic_print_unsigned
0fb30     B9 01 00 FF 
0fb34     27 15 06 F6 | 	mov	arg02, ##@LR__5905
0fb38     00 12 06 F6 | 	mov	arg01, #0
0fb3c     00 16 06 F6 | 	mov	arg03, #0
0fb40     20 81 B1 FD | 	call	#__system___basic_print_string
0fb44     00 34 06 F6 | 	mov	local08, #0
0fb48     52 00 00 FF 
0fb4c     D8 E4 05 F1 | 	add	objptr, ##42200
0fb50     F2 12 02 FB | 	rdlong	arg01, objptr
0fb54     52 00 00 FF 
0fb58     D8 E4 85 F1 | 	sub	objptr, ##42200
0fb5c     9C 9D B1 FD | 	call	#__system___strerror
0fb60     FD 14 02 F6 | 	mov	arg02, result1
0fb64     1A 13 02 F6 | 	mov	arg01, local08
0fb68     00 16 06 F6 | 	mov	arg03, #0
0fb6c     F4 80 B1 FD | 	call	#__system___basic_print_string
0fb70     B9 01 00 FF 
0fb74     2A 15 06 F6 | 	mov	arg02, ##@LR__5906
0fb78     00 12 06 F6 | 	mov	arg01, #0
0fb7c     00 16 06 F6 | 	mov	arg03, #0
0fb80     E0 80 B1 FD | 	call	#__system___basic_print_string
0fb84     00 12 06 F6 | 	mov	arg01, #0
0fb88     19 15 02 F6 | 	mov	arg02, local07
0fb8c     00 16 06 F6 | 	mov	arg03, #0
0fb90     D0 80 B1 FD | 	call	#__system___basic_print_string
0fb94     00 12 06 F6 | 	mov	arg01, #0
0fb98     0A 14 06 F6 | 	mov	arg02, #10
0fb9c     00 16 06 F6 | 	mov	arg03, #0
0fba0     68 80 B1 FD | 	call	#__system___basic_print_char
0fba4     00 12 06 F6 | 	mov	arg01, #0
0fba8     EC D0 B1 FD | 	call	#__system___getiolock_0613
0fbac     FD 00 68 FC | 	wrlong	#0, result1
0fbb0     09 12 06 F6 | 	mov	arg01, #9
0fbb4     10 C7 B1 FD | 	call	#__system__close
0fbb8     CC 01 90 FD | 	jmp	#LR__1309
0fbbc                 | LR__1306
0fbbc                 | ' open filename_2 for output as #8 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_2  : close #8 : return
0fbbc     08 12 06 F6 | 	mov	arg01, #8
0fbc0     1A 15 02 F6 | 	mov	arg02, local08
0fbc4     0D 16 06 F6 | 	mov	arg03, #13
0fbc8     A8 7F B1 FD | 	call	#__system___basic_open_string
0fbcc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0fbd0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0fbd4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0fbd8     52 00 00 FF 
0fbdc     D8 E4 05 F1 | 	add	objptr, ##42200
0fbe0     F2 FA 61 FC | 	wrlong	result1, objptr
0fbe4     52 00 00 FF 
0fbe8     D8 E4 85 F1 | 	sub	objptr, ##42200
0fbec     0C 01 90 AD |  if_e	jmp	#LR__1307
0fbf0     00 12 06 F6 | 	mov	arg01, #0
0fbf4     A0 D0 B1 FD | 	call	#__system___getiolock_0613
0fbf8     FD 12 02 F6 | 	mov	arg01, result1
0fbfc     70 73 B1 FD | 	call	#__system___lockmem
0fc00     B9 01 00 FF 
0fc04     38 15 06 F6 | 	mov	arg02, ##@LR__5907
0fc08     00 12 06 F6 | 	mov	arg01, #0
0fc0c     00 16 06 F6 | 	mov	arg03, #0
0fc10     50 80 B1 FD | 	call	#__system___basic_print_string
0fc14     52 00 00 FF 
0fc18     D8 E4 05 F1 | 	add	objptr, ##42200
0fc1c     F2 14 02 FB | 	rdlong	arg02, objptr
0fc20     52 00 00 FF 
0fc24     D8 E4 85 F1 | 	sub	objptr, ##42200
0fc28     00 12 06 F6 | 	mov	arg01, #0
0fc2c     00 16 06 F6 | 	mov	arg03, #0
0fc30     0A 18 06 F6 | 	mov	arg04, #10
0fc34     70 80 B1 FD | 	call	#__system___basic_print_integer
0fc38     B9 01 00 FF 
0fc3c     48 15 06 F6 | 	mov	arg02, ##@LR__5908
0fc40     00 12 06 F6 | 	mov	arg01, #0
0fc44     00 16 06 F6 | 	mov	arg03, #0
0fc48     18 80 B1 FD | 	call	#__system___basic_print_string
0fc4c     50 00 00 FF 
0fc50     F0 E4 05 F1 | 	add	objptr, ##41200
0fc54     F2 14 02 FB | 	rdlong	arg02, objptr
0fc58     50 00 00 FF 
0fc5c     F0 E4 85 F1 | 	sub	objptr, ##41200
0fc60     00 12 06 F6 | 	mov	arg01, #0
0fc64     00 16 06 F6 | 	mov	arg03, #0
0fc68     0A 18 06 F6 | 	mov	arg04, #10
0fc6c     78 80 B1 FD | 	call	#__system___basic_print_unsigned
0fc70     B9 01 00 FF 
0fc74     52 15 06 F6 | 	mov	arg02, ##@LR__5909
0fc78     00 12 06 F6 | 	mov	arg01, #0
0fc7c     00 16 06 F6 | 	mov	arg03, #0
0fc80     E0 7F B1 FD | 	call	#__system___basic_print_string
0fc84     00 32 06 F6 | 	mov	local07, #0
0fc88     52 00 00 FF 
0fc8c     D8 E4 05 F1 | 	add	objptr, ##42200
0fc90     F2 12 02 FB | 	rdlong	arg01, objptr
0fc94     52 00 00 FF 
0fc98     D8 E4 85 F1 | 	sub	objptr, ##42200
0fc9c     5C 9C B1 FD | 	call	#__system___strerror
0fca0     FD 14 02 F6 | 	mov	arg02, result1
0fca4     19 13 02 F6 | 	mov	arg01, local07
0fca8     00 16 06 F6 | 	mov	arg03, #0
0fcac     B4 7F B1 FD | 	call	#__system___basic_print_string
0fcb0     B9 01 00 FF 
0fcb4     55 15 06 F6 | 	mov	arg02, ##@LR__5910
0fcb8     00 12 06 F6 | 	mov	arg01, #0
0fcbc     00 16 06 F6 | 	mov	arg03, #0
0fcc0     A0 7F B1 FD | 	call	#__system___basic_print_string
0fcc4     00 12 06 F6 | 	mov	arg01, #0
0fcc8     1A 15 02 F6 | 	mov	arg02, local08
0fccc     00 16 06 F6 | 	mov	arg03, #0
0fcd0     90 7F B1 FD | 	call	#__system___basic_print_string
0fcd4     00 12 06 F6 | 	mov	arg01, #0
0fcd8     0A 14 06 F6 | 	mov	arg02, #10
0fcdc     00 16 06 F6 | 	mov	arg03, #0
0fce0     28 7F B1 FD | 	call	#__system___basic_print_char
0fce4     00 12 06 F6 | 	mov	arg01, #0
0fce8     AC CF B1 FD | 	call	#__system___getiolock_0613
0fcec     FD 00 68 FC | 	wrlong	#0, result1
0fcf0     08 12 06 F6 | 	mov	arg01, #8
0fcf4     D0 C5 B1 FD | 	call	#__system__close
0fcf8     8C 00 90 FD | 	jmp	#LR__1309
0fcfc                 | LR__1307
0fcfc                 | ' 
0fcfc                 | ' do
0fcfc                 | LR__1308
0fcfc                 | '   get #9,,block(0),1024,r
0fcfc     4E 00 00 FF 
0fd00     B4 E4 05 F1 | 	add	objptr, ##40116
0fd04     F2 16 02 F6 | 	mov	arg03, objptr
0fd08     4E 00 00 FF 
0fd0c     B4 E4 85 F1 | 	sub	objptr, ##40116
0fd10     09 12 06 F6 | 	mov	arg01, #9
0fd14     00 14 06 F6 | 	mov	arg02, #0
0fd18     0A 18 C6 F9 | 	decod	arg04, #10
0fd1c     01 1A 06 F6 | 	mov	arg05, #1
0fd20     BC 80 B1 FD | 	call	#__system___basic_get
0fd24     52 00 00 FF 
0fd28     10 E5 05 F1 | 	add	objptr, ##42256
0fd2c     F2 FA 61 FC | 	wrlong	result1, objptr
0fd30                 | '   put #8,,block(0),r
0fd30     04 00 00 FF 
0fd34     5C E4 85 F1 | 	sub	objptr, ##2140
0fd38     F2 16 02 F6 | 	mov	arg03, objptr
0fd3c     FD 18 02 F6 | 	mov	arg04, result1
0fd40     4E 00 00 FF 
0fd44     B4 E4 85 F1 | 	sub	objptr, ##40116
0fd48     08 12 06 F6 | 	mov	arg01, #8
0fd4c     00 14 06 F6 | 	mov	arg02, #0
0fd50     01 1A 06 F6 | 	mov	arg05, #1
0fd54     1C 80 B1 FD | 	call	#__system___basic_put
0fd58     52 00 00 FF 
0fd5c     10 E5 05 F1 | 	add	objptr, ##42256
0fd60     F2 34 02 FB | 	rdlong	local08, objptr
0fd64     52 00 00 FF 
0fd68     10 E5 85 F1 | 	sub	objptr, ##42256
0fd6c     02 00 00 FF 
0fd70     00 34 0E F2 | 	cmp	local08, ##1024 wz
0fd74     84 FF 9F AD |  if_e	jmp	#LR__1308
0fd78                 | ' close #8
0fd78     08 12 06 F6 | 	mov	arg01, #8
0fd7c     48 C5 B1 FD | 	call	#__system__close
0fd80                 | ' close #9
0fd80     09 12 06 F6 | 	mov	arg01, #9
0fd84     40 C5 B1 FD | 	call	#__system__close
0fd88                 | LR__1309
0fd88     A7 F0 03 F6 | 	mov	ptra, fp
0fd8c     B2 00 A0 FD | 	call	#popregs_
0fd90                 | _do_copy_ret
0fd90     2D 00 64 FD | 	ret
0fd94                 | 
0fd94                 | ' 
0fd94                 | ' '-------------------- cos
0fd94                 | ' 
0fd94                 | ' sub do_cos
0fd94                 | _do_cos
0fd94     01 4A 05 F6 | 	mov	COUNT_, #1
0fd98     A8 00 A0 FD | 	call	#pushregs_
0fd9c     10 F0 07 F1 | 	add	ptra, #16
0fda0     4A 00 00 FF 
0fda4     80 E4 05 F1 | 	add	objptr, ##38016
0fda8     F2 26 02 FB | 	rdlong	local01, objptr
0fdac     13 17 02 F6 | 	mov	arg03, local01
0fdb0     01 16 66 F0 | 	shl	arg03, #1
0fdb4     13 17 02 F1 | 	add	arg03, local01
0fdb8     02 16 66 F0 | 	shl	arg03, #2
0fdbc     03 00 00 FF 
0fdc0     04 E4 85 F1 | 	sub	objptr, ##1540
0fdc4     F2 16 02 F1 | 	add	arg03, objptr
0fdc8     0B 17 02 FB | 	rdlong	arg03, arg03
0fdcc     0C 4E 05 F1 | 	add	fp, #12
0fdd0     A7 16 62 FC | 	wrlong	arg03, fp
0fdd4                 | ' 
0fdd4                 | ' numpar=compiledline(lineptr_e).result.uresult
0fdd4                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0fdd4     0C 4E 85 F1 | 	sub	fp, #12
0fdd8     02 16 16 F2 | 	cmp	arg03, #2 wc
0fddc     47 00 00 FF 
0fde0     7C E4 85 F1 | 	sub	objptr, ##36476
0fde4     0C 4E 05 C1 |  if_b	add	fp, #12
0fde8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0fdec     0C 4E 85 C1 |  if_b	sub	fp, #12
0fdf0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1310
0fdf4     00 12 06 F6 | 	mov	arg01, #0
0fdf8     9C CE B1 FD | 	call	#__system___getiolock_0613
0fdfc     FD 12 02 F6 | 	mov	arg01, result1
0fe00     6C 71 B1 FD | 	call	#__system___lockmem
0fe04     B9 01 00 FF 
0fe08     63 15 06 F6 | 	mov	arg02, ##@LR__5911
0fe0c     00 12 06 F6 | 	mov	arg01, #0
0fe10     00 16 06 F6 | 	mov	arg03, #0
0fe14     4C 7E B1 FD | 	call	#__system___basic_print_string
0fe18     00 12 06 F6 | 	mov	arg01, #0
0fe1c     78 CE B1 FD | 	call	#__system___getiolock_0613
0fe20     FD 00 68 FC | 	wrlong	#0, result1
0fe24     27 12 06 F6 | 	mov	arg01, #39
0fe28     00 14 06 F6 | 	mov	arg02, #0
0fe2c     24 37 B1 FD | 	call	#_printerror
0fe30     78 00 90 FD | 	jmp	#LR__1311
0fe34                 | LR__1310
0fe34     8C D8 BF FD | 	call	#_pop
0fe38     A7 FA 61 FC | 	wrlong	result1, fp
0fe3c     04 4E 05 F1 | 	add	fp, #4
0fe40     A7 FC 61 FC | 	wrlong	result2, fp
0fe44     04 4E 05 F1 | 	add	fp, #4
0fe48     A7 FE 61 FC | 	wrlong	result3, fp
0fe4c     08 4E 85 F1 | 	sub	fp, #8
0fe50     52 00 00 FF 
0fe54     A8 E4 05 F1 | 	add	objptr, ##42152
0fe58     F2 26 02 FB | 	rdlong	local01, objptr
0fe5c     52 00 00 FF 
0fe60     A8 E4 85 F1 | 	sub	objptr, ##42152
0fe64     A7 12 02 F6 | 	mov	arg01, fp
0fe68     F8 DA BF FD | 	call	#_converttofloat
0fe6c     FD 14 02 F6 | 	mov	arg02, result1
0fe70     13 13 02 F6 | 	mov	arg01, local01
0fe74     70 9F B1 FD | 	call	#__system___float_mul
0fe78     FD 14 02 F6 | 	mov	arg02, result1
0fe7c     87 E4 1F FF 
0fe80     DB 13 06 F6 | 	mov	arg01, ##1070141403
0fe84     1F 14 E6 F4 | 	bitnot	arg02, #31
0fe88     8C 9B B1 FD | 	call	#__system___float_add
0fe8c     FD 12 02 F6 | 	mov	arg01, result1
0fe90     B4 A8 B1 FD | 	call	#__system____builtin_sinf
0fe94     A7 FA 61 FC | 	wrlong	result1, fp
0fe98     08 4E 05 F1 | 	add	fp, #8
0fe9c     A7 3C 68 FC | 	wrlong	#30, fp
0fea0     08 4E 85 F1 | 	sub	fp, #8
0fea4     A7 12 02 F6 | 	mov	arg01, fp
0fea8     B0 D8 BF FD | 	call	#_push
0feac                 | LR__1311
0feac     A7 F0 03 F6 | 	mov	ptra, fp
0feb0     B2 00 A0 FD | 	call	#popregs_
0feb4                 | _do_cos_ret
0feb4     2D 00 64 FD | 	ret
0feb8                 | 
0feb8                 | ' 
0feb8                 | ' '-------------------- cursor
0feb8                 | ' 
0feb8                 | ' sub do_cursor
0feb8                 | _do_cursor
0feb8     08 D8 BF FD | 	call	#_pop
0febc     00 FA 4D F2 | 	cmps	result1, #0 wz
0fec0                 | ' t1=pop()
0fec0                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0fec0     14 00 90 5D |  if_ne	jmp	#LR__1320
0fec4     11 12 06 F6 | 	mov	arg01, #17
0fec8     00 14 06 F6 | 	mov	arg02, #0
0fecc     00 16 06 F6 | 	mov	arg03, #0
0fed0     C8 46 B1 FD | 	call	#_hg010b_spin2_setspritesize
0fed4     10 00 90 FD | 	jmp	#LR__1321
0fed8                 | LR__1320
0fed8     11 12 06 F6 | 	mov	arg01, #17
0fedc     08 14 06 F6 | 	mov	arg02, #8
0fee0     10 16 06 F6 | 	mov	arg03, #16
0fee4     B4 46 B1 FD | 	call	#_hg010b_spin2_setspritesize
0fee8                 | LR__1321
0fee8                 | _do_cursor_ret
0fee8     2D 00 64 FD | 	ret
0feec                 | 
0feec                 | ' 
0feec                 | ' '-------------------- defenv
0feec                 | ' 
0feec                 | ' sub do_defenv
0feec                 | _do_defenv
0feec     08 4A 05 F6 | 	mov	COUNT_, #8
0fef0     A8 00 A0 FD | 	call	#pushregs_
0fef4     58 F0 07 F1 | 	add	ptra, #88
0fef8     4A 00 00 FF 
0fefc     80 E4 05 F1 | 	add	objptr, ##38016
0ff00     F2 26 02 FB | 	rdlong	local01, objptr
0ff04     13 1B 02 F6 | 	mov	arg05, local01
0ff08     01 1A 66 F0 | 	shl	arg05, #1
0ff0c     13 1B 02 F1 | 	add	arg05, local01
0ff10     02 1A 66 F0 | 	shl	arg05, #2
0ff14     03 00 00 FF 
0ff18     04 E4 85 F1 | 	sub	objptr, ##1540
0ff1c     F2 1A 02 F1 | 	add	arg05, objptr
0ff20     0D 1B 02 FB | 	rdlong	arg05, arg05
0ff24     10 4E 05 F1 | 	add	fp, #16
0ff28     A7 1A 62 FC | 	wrlong	arg05, fp
0ff2c                 | ' 
0ff2c                 | ' numpar=compiledline(lineptr_e).result.uresult
0ff2c                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0ff2c     10 4E 85 F1 | 	sub	fp, #16
0ff30     02 1A 0E F2 | 	cmp	arg05, #2 wz
0ff34     47 00 00 FF 
0ff38     7C E4 85 F1 | 	sub	objptr, ##36476
0ff3c     10 4E 05 51 |  if_ne	add	fp, #16
0ff40     A7 26 02 5B |  if_ne	rdlong	local01, fp
0ff44     10 4E 85 51 |  if_ne	sub	fp, #16
0ff48     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
0ff4c     8C 0A 90 5D |  if_ne	jmp	#LR__1351
0ff50                 | ' 
0ff50                 | ' if numpar=2 then						' env from .h2 or from a pointer
0ff50     10 4E 05 F1 | 	add	fp, #16
0ff54     A7 26 02 FB | 	rdlong	local01, fp
0ff58     10 4E 85 F1 | 	sub	fp, #16
0ff5c     02 26 0E F2 | 	cmp	local01, #2 wz
0ff60     24 04 90 5D |  if_ne	jmp	#LR__1343
0ff64     5C D7 BF FD | 	call	#_pop
0ff68     FF 1A 02 F6 | 	mov	arg05, result3
0ff6c     40 4E 05 F1 | 	add	fp, #64
0ff70     A7 FA 61 FC | 	wrlong	result1, fp
0ff74     04 4E 05 F1 | 	add	fp, #4
0ff78     A7 FC 61 FC | 	wrlong	result2, fp
0ff7c     04 4E 05 F1 | 	add	fp, #4
0ff80     A7 1A 62 FC | 	wrlong	arg05, fp
0ff84                 | '   t1=pop()
0ff84                 | '   if t1.result_type=result_string2 then 
0ff84     48 4E 85 F1 | 	sub	fp, #72
0ff88     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0ff8c     20 00 90 5D |  if_ne	jmp	#LR__1330
0ff90     40 4E 05 F1 | 	add	fp, #64
0ff94     A7 12 02 FB | 	rdlong	arg01, fp
0ff98     40 4E 85 F1 | 	sub	fp, #64
0ff9c     9C D8 BF FD | 	call	#_convertstring
0ffa0     4C 4E 05 F1 | 	add	fp, #76
0ffa4     A7 FA 61 FC | 	wrlong	result1, fp
0ffa8     4C 4E 85 F1 | 	sub	fp, #76
0ffac     58 00 90 FD | 	jmp	#LR__1333
0ffb0                 | LR__1330
0ffb0     48 4E 05 F1 | 	add	fp, #72
0ffb4     A7 26 02 FB | 	rdlong	local01, fp
0ffb8     48 4E 85 F1 | 	sub	fp, #72
0ffbc     1F 26 0E F2 | 	cmp	local01, #31 wz
0ffc0     18 00 90 5D |  if_ne	jmp	#LR__1331
0ffc4     40 4E 05 F1 | 	add	fp, #64
0ffc8     A7 26 02 FB | 	rdlong	local01, fp
0ffcc     0C 4E 05 F1 | 	add	fp, #12
0ffd0     A7 26 62 FC | 	wrlong	local01, fp
0ffd4     4C 4E 85 F1 | 	sub	fp, #76
0ffd8     2C 00 90 FD | 	jmp	#LR__1332
0ffdc                 | LR__1331
0ffdc     B9 01 00 FF 
0ffe0     69 27 06 F6 | 	mov	local01, ##@LR__5912
0ffe4     4C 4E 05 F1 | 	add	fp, #76
0ffe8     A7 26 62 FC | 	wrlong	local01, fp
0ffec     0C 4E 85 F1 | 	sub	fp, #12
0fff0     A7 12 02 F6 | 	mov	arg01, fp
0fff4     40 4E 85 F1 | 	sub	fp, #64
0fff8     AC D8 BF FD | 	call	#_converttoint
0fffc     1C 4E 05 F1 | 	add	fp, #28
10000     A7 FA 61 FC | 	wrlong	result1, fp
10004     1C 4E 85 F1 | 	sub	fp, #28
10008                 | LR__1332
10008                 | LR__1333
10008                 | '   if s1<>"" then 
10008     4C 4E 05 F1 | 	add	fp, #76
1000c     A7 12 02 FB | 	rdlong	arg01, fp
10010     4C 4E 85 F1 | 	sub	fp, #76
10014     B9 01 00 FF 
10018     6A 15 06 F6 | 	mov	arg02, ##@LR__5913
1001c     78 6F B1 FD | 	call	#__system___string_cmp
10020     00 FA 0D F2 | 	cmp	result1, #0 wz
10024     24 02 90 AD |  if_e	jmp	#LR__1337
10028     98 D6 BF FD | 	call	#_pop
1002c     FF 26 02 F6 | 	mov	local01, result3
10030     40 4E 05 F1 | 	add	fp, #64
10034     A7 FA 61 FC | 	wrlong	result1, fp
10038     04 4E 05 F1 | 	add	fp, #4
1003c     A7 FC 61 FC | 	wrlong	result2, fp
10040     04 4E 05 F1 | 	add	fp, #4
10044     A7 26 62 FC | 	wrlong	local01, fp
10048     08 4E 85 F1 | 	sub	fp, #8
1004c     A7 12 02 F6 | 	mov	arg01, fp
10050     40 4E 85 F1 | 	sub	fp, #64
10054     50 D8 BF FD | 	call	#_converttoint
10058     18 4E 05 F1 | 	add	fp, #24
1005c     A7 FA 61 FC | 	wrlong	result1, fp
10060     18 4E 85 F1 | 	sub	fp, #24
10064                 | '     t1=pop()
10064                 | '     channel=converttoint(t1) 
10064                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
10064     09 12 06 F6 | 	mov	arg01, #9
10068     5C C2 B1 FD | 	call	#__system__close
1006c     09 26 06 F6 | 	mov	local01, #9
10070     B9 01 00 FF 
10074     6B 13 06 F6 | 	mov	arg01, ##@LR__5914
10078     4C 4E 05 F1 | 	add	fp, #76
1007c     A7 14 02 FB | 	rdlong	arg02, fp
10080     4C 4E 85 F1 | 	sub	fp, #76
10084     44 6F B1 FD | 	call	#__system___string_concat
10088     FD 14 02 F6 | 	mov	arg02, result1
1008c     13 13 02 F6 | 	mov	arg01, local01
10090     00 16 06 F6 | 	mov	arg03, #0
10094     DC 7A B1 FD | 	call	#__system___basic_open_string
10098     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1009c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
100a0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
100a4     0C 4E 05 F1 | 	add	fp, #12
100a8     A7 FA 61 FC | 	wrlong	result1, fp
100ac                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
100ac     0C 4E 85 F1 | 	sub	fp, #12
100b0     A0 00 90 AD |  if_e	jmp	#LR__1334
100b4     00 12 06 F6 | 	mov	arg01, #0
100b8     DC CB B1 FD | 	call	#__system___getiolock_0613
100bc     FD 12 02 F6 | 	mov	arg01, result1
100c0     AC 6E B1 FD | 	call	#__system___lockmem
100c4     B9 01 00 FF 
100c8     78 15 06 F6 | 	mov	arg02, ##@LR__5915
100cc     00 12 06 F6 | 	mov	arg01, #0
100d0     00 16 06 F6 | 	mov	arg03, #0
100d4     8C 7B B1 FD | 	call	#__system___basic_print_string
100d8     0C 4E 05 F1 | 	add	fp, #12
100dc     A7 14 02 FB | 	rdlong	arg02, fp
100e0     0C 4E 85 F1 | 	sub	fp, #12
100e4     00 12 06 F6 | 	mov	arg01, #0
100e8     00 16 06 F6 | 	mov	arg03, #0
100ec     0A 18 06 F6 | 	mov	arg04, #10
100f0     B4 7B B1 FD | 	call	#__system___basic_print_integer
100f4     B9 01 00 FF 
100f8     86 15 06 F6 | 	mov	arg02, ##@LR__5916
100fc     00 12 06 F6 | 	mov	arg01, #0
10100     00 16 06 F6 | 	mov	arg03, #0
10104     5C 7B B1 FD | 	call	#__system___basic_print_string
10108     00 26 06 F6 | 	mov	local01, #0
1010c     0C 4E 05 F1 | 	add	fp, #12
10110     A7 12 02 FB | 	rdlong	arg01, fp
10114     0C 4E 85 F1 | 	sub	fp, #12
10118     E0 97 B1 FD | 	call	#__system___strerror
1011c     FD 14 02 F6 | 	mov	arg02, result1
10120     13 13 02 F6 | 	mov	arg01, local01
10124     00 16 06 F6 | 	mov	arg03, #0
10128     38 7B B1 FD | 	call	#__system___basic_print_string
1012c     00 12 06 F6 | 	mov	arg01, #0
10130     0A 14 06 F6 | 	mov	arg02, #10
10134     00 16 06 F6 | 	mov	arg03, #0
10138     D0 7A B1 FD | 	call	#__system___basic_print_char
1013c     00 12 06 F6 | 	mov	arg01, #0
10140     54 CB B1 FD | 	call	#__system___getiolock_0613
10144     FD 00 68 FC | 	wrlong	#0, result1
10148     09 12 06 F6 | 	mov	arg01, #9
1014c     78 C1 B1 FD | 	call	#__system__close
10150     88 08 90 FD | 	jmp	#LR__1351
10154                 | LR__1334
10154                 | '     get #9,17,envbuf8(channel,0),256
10154     18 4E 05 F1 | 	add	fp, #24
10158     A7 1A 02 FB | 	rdlong	arg05, fp
1015c     18 4E 85 F1 | 	sub	fp, #24
10160     0D 17 02 F6 | 	mov	arg03, arg05
10164     09 16 66 F0 | 	shl	arg03, #9
10168     0D 17 02 F1 | 	add	arg03, arg05
1016c     0C 00 00 FF 
10170     D8 E4 05 F1 | 	add	objptr, ##6360
10174     F2 16 02 F1 | 	add	arg03, objptr
10178     09 12 06 F6 | 	mov	arg01, #9
1017c     11 14 06 F6 | 	mov	arg02, #17
10180     00 19 06 F6 | 	mov	arg04, #256
10184     01 1A 06 F6 | 	mov	arg05, #1
10188     0C 00 00 FF 
1018c     D8 E4 85 F1 | 	sub	objptr, ##6360
10190     4C 7C B1 FD | 	call	#__system___basic_get
10194                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
10194     14 4E 05 F1 | 	add	fp, #20
10198     A7 FE 69 FC | 	wrlong	#255, fp
1019c     14 4E 85 F1 | 	sub	fp, #20
101a0     0C 00 00 FF 
101a4     D8 E4 05 F1 | 	add	objptr, ##6360
101a8     97 30 48 FB | 	callpa	#(@LR__1336-@LR__1335)>>2,fcache_load_ptr_
101ac                 | LR__1335
101ac     18 4E 05 F1 | 	add	fp, #24
101b0     A7 16 02 FB | 	rdlong	arg03, fp
101b4     0B 27 02 F6 | 	mov	local01, arg03
101b8     09 26 66 F0 | 	shl	local01, #9
101bc     F2 26 02 F1 | 	add	local01, objptr
101c0     04 4E 85 F1 | 	sub	fp, #4
101c4     A7 1A 02 FB | 	rdlong	arg05, fp
101c8     0D 19 02 F6 | 	mov	arg04, arg05
101cc     01 18 66 F0 | 	shl	arg04, #1
101d0     13 19 02 F1 | 	add	arg04, local01
101d4     0B 27 02 F6 | 	mov	local01, arg03
101d8     09 26 66 F0 | 	shl	local01, #9
101dc     0B 27 02 F1 | 	add	local01, arg03
101e0     F2 26 02 F1 | 	add	local01, objptr
101e4     13 1B 02 F1 | 	add	arg05, local01
101e8     0D 27 C2 FA | 	rdbyte	local01, arg05
101ec     00 27 06 FA | 	mul	local01, #256
101f0     0C 27 52 FC | 	wrword	local01, arg04
101f4     A7 26 02 FB | 	rdlong	local01, fp
101f8     01 26 86 F1 | 	sub	local01, #1
101fc     A7 26 62 FC | 	wrlong	local01, fp
10200     14 4E 85 F1 | 	sub	fp, #20
10204     00 26 56 F2 | 	cmps	local01, #0 wc
10208     A0 FF 9F 3D |  if_ae	jmp	#LR__1335
1020c                 | LR__1336
1020c     0C 00 00 FF 
10210     D8 E4 85 F1 | 	sub	objptr, ##6360
10214                 | '     close #9
10214     09 12 06 F6 | 	mov	arg01, #9
10218     AC C0 B1 FD | 	call	#__system__close
1021c     18 4E 05 F1 | 	add	fp, #24
10220     A7 26 02 FB | 	rdlong	local01, fp
10224     18 4E 85 F1 | 	sub	fp, #24
10228     09 26 66 F0 | 	shl	local01, #9
1022c     0C 00 00 FF 
10230     D8 E4 05 F1 | 	add	objptr, ##6360
10234     F2 26 02 F1 | 	add	local01, objptr
10238     FE 27 06 F1 | 	add	local01, #510
1023c     13 01 58 FC | 	wrword	#0, local01
10240                 | '     envbuf(channel,255)=0                                                              
10240                 | '     return
10240     0C 00 00 FF 
10244     D8 E4 85 F1 | 	sub	objptr, ##6360
10248     90 07 90 FD | 	jmp	#LR__1351
1024c                 | LR__1337
1024c                 | '     if wptr < $80000 then 
1024c     1C 4E 05 F1 | 	add	fp, #28
10250     A7 28 02 FB | 	rdlong	local02, fp
10254     1C 4E 85 F1 | 	sub	fp, #28
10258     00 04 00 FF 
1025c     00 28 56 F2 | 	cmps	local02, ##524288 wc
10260     7C 00 90 3D |  if_ae	jmp	#LR__1340
10264                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
10264     14 4E 05 F1 | 	add	fp, #20
10268     A7 00 68 FC | 	wrlong	#0, fp
1026c     14 4E 85 F1 | 	sub	fp, #20
10270     0C 00 00 FF 
10274     D8 E4 05 F1 | 	add	objptr, ##6360
10278     97 2C 48 FB | 	callpa	#(@LR__1339-@LR__1338)>>2,fcache_load_ptr_
1027c                 | LR__1338
1027c     18 4E 05 F1 | 	add	fp, #24
10280     A7 28 02 FB | 	rdlong	local02, fp
10284     09 28 66 F0 | 	shl	local02, #9
10288     F2 28 02 F1 | 	add	local02, objptr
1028c     04 4E 85 F1 | 	sub	fp, #4
10290     A7 26 02 FB | 	rdlong	local01, fp
10294     13 1B 02 F6 | 	mov	arg05, local01
10298     01 1A 66 F0 | 	shl	arg05, #1
1029c     14 1B 02 F1 | 	add	arg05, local02
102a0     08 4E 05 F1 | 	add	fp, #8
102a4     A7 12 02 FB | 	rdlong	arg01, fp
102a8     01 26 66 F0 | 	shl	local01, #1
102ac     13 13 02 F1 | 	add	arg01, local01
102b0     09 FB E1 FA | 	rdword	result1, arg01
102b4     0D FB 51 FC | 	wrword	result1, arg05
102b8     08 4E 85 F1 | 	sub	fp, #8
102bc     A7 28 02 FB | 	rdlong	local02, fp
102c0     01 28 06 F1 | 	add	local02, #1
102c4     A7 28 62 FC | 	wrlong	local02, fp
102c8     14 4E 85 F1 | 	sub	fp, #20
102cc     00 29 56 F2 | 	cmps	local02, #256 wc
102d0     A8 FF 9F CD |  if_b	jmp	#LR__1338
102d4                 | LR__1339
102d4     0C 00 00 FF 
102d8     D8 E4 85 F1 | 	sub	objptr, ##6360
102dc     78 00 90 FD | 	jmp	#LR__1342
102e0                 | LR__1340
102e0                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
102e0     14 4E 05 F1 | 	add	fp, #20
102e4     A7 00 68 FC | 	wrlong	#0, fp
102e8     14 4E 85 F1 | 	sub	fp, #20
102ec                 | LR__1341
102ec     18 4E 05 F1 | 	add	fp, #24
102f0     A7 28 02 FB | 	rdlong	local02, fp
102f4     09 28 66 F0 | 	shl	local02, #9
102f8     0C 00 00 FF 
102fc     D8 E4 05 F1 | 	add	objptr, ##6360
10300     F2 28 02 F1 | 	add	local02, objptr
10304     04 4E 85 F1 | 	sub	fp, #4
10308     A7 26 02 FB | 	rdlong	local01, fp
1030c     13 2B 02 F6 | 	mov	local03, local01
10310     01 2A 66 F0 | 	shl	local03, #1
10314     14 2B 02 F1 | 	add	local03, local02
10318     08 4E 05 F1 | 	add	fp, #8
1031c     A7 12 02 FB | 	rdlong	arg01, fp
10320     1C 4E 85 F1 | 	sub	fp, #28
10324     01 26 66 F0 | 	shl	local01, #1
10328     13 13 02 F1 | 	add	arg01, local01
1032c     0C 00 00 FF 
10330     D8 E4 85 F1 | 	sub	objptr, ##6360
10334     44 35 B1 FD | 	call	#_psdpeek
10338     15 FB 51 FC | 	wrword	result1, local03
1033c     14 4E 05 F1 | 	add	fp, #20
10340     A7 2A 02 FB | 	rdlong	local03, fp
10344     01 2A 06 F1 | 	add	local03, #1
10348     A7 2A 62 FC | 	wrlong	local03, fp
1034c     14 4E 85 F1 | 	sub	fp, #20
10350     00 2B 56 F2 | 	cmps	local03, #256 wc
10354     94 FF 9F CD |  if_b	jmp	#LR__1341
10358                 | LR__1342
10358     18 4E 05 F1 | 	add	fp, #24
1035c     A7 2A 02 FB | 	rdlong	local03, fp
10360     18 4E 85 F1 | 	sub	fp, #24
10364     09 2A 66 F0 | 	shl	local03, #9
10368     0C 00 00 FF 
1036c     D8 E4 05 F1 | 	add	objptr, ##6360
10370     F2 2A 02 F1 | 	add	local03, objptr
10374     FE 2B 06 F1 | 	add	local03, #510
10378     15 01 58 FC | 	wrword	#0, local03
1037c                 | '     envbuf(channel,255)=0
1037c                 | '     return   
1037c     0C 00 00 FF 
10380     D8 E4 85 F1 | 	sub	objptr, ##6360
10384     54 06 90 FD | 	jmp	#LR__1351
10388                 | LR__1343
10388                 | ' 
10388                 | ' if numpar=5 then   						 'simple adsr
10388     10 4E 05 F1 | 	add	fp, #16
1038c     A7 28 02 FB | 	rdlong	local02, fp
10390     10 4E 85 F1 | 	sub	fp, #16
10394     05 28 0E F2 | 	cmp	local02, #5 wz
10398     14 06 90 5D |  if_ne	jmp	#LR__1350
1039c     24 D3 BF FD | 	call	#_pop
103a0     FF 26 02 F6 | 	mov	local01, result3
103a4     40 4E 05 F1 | 	add	fp, #64
103a8     A7 FA 61 FC | 	wrlong	result1, fp
103ac     04 4E 05 F1 | 	add	fp, #4
103b0     A7 FC 61 FC | 	wrlong	result2, fp
103b4     04 4E 05 F1 | 	add	fp, #4
103b8     A7 26 62 FC | 	wrlong	local01, fp
103bc     08 4E 85 F1 | 	sub	fp, #8
103c0     A7 12 02 F6 | 	mov	arg01, fp
103c4     40 4E 85 F1 | 	sub	fp, #64
103c8     98 D5 BF FD | 	call	#_converttofloat
103cc     FD 28 02 F6 | 	mov	local02, result1
103d0     2C 4E 05 F1 | 	add	fp, #44
103d4     A7 28 62 FC | 	wrlong	local02, fp
103d8     2C 4E 85 F1 | 	sub	fp, #44
103dc     E4 D2 BF FD | 	call	#_pop
103e0     FF 26 02 F6 | 	mov	local01, result3
103e4     40 4E 05 F1 | 	add	fp, #64
103e8     A7 FA 61 FC | 	wrlong	result1, fp
103ec     04 4E 05 F1 | 	add	fp, #4
103f0     A7 FC 61 FC | 	wrlong	result2, fp
103f4     04 4E 05 F1 | 	add	fp, #4
103f8     A7 26 62 FC | 	wrlong	local01, fp
103fc     08 4E 85 F1 | 	sub	fp, #8
10400     A7 12 02 F6 | 	mov	arg01, fp
10404     40 4E 85 F1 | 	sub	fp, #64
10408     58 D5 BF FD | 	call	#_converttofloat
1040c     FD 28 02 F6 | 	mov	local02, result1
10410     28 4E 05 F1 | 	add	fp, #40
10414     A7 28 62 FC | 	wrlong	local02, fp
10418     28 4E 85 F1 | 	sub	fp, #40
1041c     A4 D2 BF FD | 	call	#_pop
10420     FF 26 02 F6 | 	mov	local01, result3
10424     40 4E 05 F1 | 	add	fp, #64
10428     A7 FA 61 FC | 	wrlong	result1, fp
1042c     04 4E 05 F1 | 	add	fp, #4
10430     A7 FC 61 FC | 	wrlong	result2, fp
10434     04 4E 05 F1 | 	add	fp, #4
10438     A7 26 62 FC | 	wrlong	local01, fp
1043c     08 4E 85 F1 | 	sub	fp, #8
10440     A7 12 02 F6 | 	mov	arg01, fp
10444     40 4E 85 F1 | 	sub	fp, #64
10448     18 D5 BF FD | 	call	#_converttofloat
1044c     FD 28 02 F6 | 	mov	local02, result1
10450     24 4E 05 F1 | 	add	fp, #36
10454     A7 28 62 FC | 	wrlong	local02, fp
10458     24 4E 85 F1 | 	sub	fp, #36
1045c     64 D2 BF FD | 	call	#_pop
10460     FF 26 02 F6 | 	mov	local01, result3
10464     40 4E 05 F1 | 	add	fp, #64
10468     A7 FA 61 FC | 	wrlong	result1, fp
1046c     04 4E 05 F1 | 	add	fp, #4
10470     A7 FC 61 FC | 	wrlong	result2, fp
10474     04 4E 05 F1 | 	add	fp, #4
10478     A7 26 62 FC | 	wrlong	local01, fp
1047c     08 4E 85 F1 | 	sub	fp, #8
10480     A7 12 02 F6 | 	mov	arg01, fp
10484     40 4E 85 F1 | 	sub	fp, #64
10488     D8 D4 BF FD | 	call	#_converttofloat
1048c     FD 28 02 F6 | 	mov	local02, result1
10490     20 4E 05 F1 | 	add	fp, #32
10494     A7 28 62 FC | 	wrlong	local02, fp
10498     20 4E 85 F1 | 	sub	fp, #32
1049c     24 D2 BF FD | 	call	#_pop
104a0     FF 26 02 F6 | 	mov	local01, result3
104a4     40 4E 05 F1 | 	add	fp, #64
104a8     A7 FA 61 FC | 	wrlong	result1, fp
104ac     04 4E 05 F1 | 	add	fp, #4
104b0     A7 FC 61 FC | 	wrlong	result2, fp
104b4     04 4E 05 F1 | 	add	fp, #4
104b8     A7 26 62 FC | 	wrlong	local01, fp
104bc     08 4E 85 F1 | 	sub	fp, #8
104c0     A7 12 02 F6 | 	mov	arg01, fp
104c4     40 4E 85 F1 | 	sub	fp, #64
104c8     DC D3 BF FD | 	call	#_converttoint
104cc     18 4E 05 F1 | 	add	fp, #24
104d0     A7 FA 61 FC | 	wrlong	result1, fp
104d4                 | '   t1=pop() : rr=converttofloat(t1)
104d4                 | '   t1=pop() : ss=converttofloat(t1) 
104d4                 | '   t1=pop() : dd=converttofloat(t1)
104d4                 | '   t1=pop() : aa=converttofloat(t1)
104d4                 | '   t1=pop() : channel=converttoint(t1)
104d4                 | '   if ss<0.0 then ss=0.0 
104d4     10 4E 05 F1 | 	add	fp, #16
104d8     A7 12 02 FB | 	rdlong	arg01, fp
104dc     28 4E 85 F1 | 	sub	fp, #40
104e0     00 14 06 F6 | 	mov	arg02, #0
104e4     01 16 06 F6 | 	mov	arg03, #1
104e8     30 9D B1 FD | 	call	#__system___float_cmp
104ec     00 FA 55 F2 | 	cmps	result1, #0 wc
104f0     28 4E 05 C1 |  if_b	add	fp, #40
104f4     A7 00 68 CC |  if_b	wrlong	#0, fp
104f8     28 4E 85 C1 |  if_b	sub	fp, #40
104fc                 | '   if ss>1.0 then ss=1.0
104fc     28 4E 05 F1 | 	add	fp, #40
10500     A7 12 02 FB | 	rdlong	arg01, fp
10504     28 4E 85 F1 | 	sub	fp, #40
10508     00 C0 1F FF 
1050c     00 14 06 F6 | 	mov	arg02, ##1065353216
10510     01 16 66 F6 | 	neg	arg03, #1
10514     04 9D B1 FD | 	call	#__system___float_cmp
10518     01 FA 55 F2 | 	cmps	result1, #1 wc
1051c     28 4E 05 31 |  if_ae	add	fp, #40
10520     00 C0 9F 3F 
10524     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
10528     28 4E 85 31 |  if_ae	sub	fp, #40
1052c     20 4E 05 F1 | 	add	fp, #32
10530     A7 12 02 FB | 	rdlong	arg01, fp
10534     04 4E 05 F1 | 	add	fp, #4
10538     A7 14 02 FB | 	rdlong	arg02, fp
1053c     24 4E 85 F1 | 	sub	fp, #36
10540     D4 94 B1 FD | 	call	#__system___float_add
10544     FD 12 02 F6 | 	mov	arg01, result1
10548     2C 4E 05 F1 | 	add	fp, #44
1054c     A7 14 02 FB | 	rdlong	arg02, fp
10550     2C 4E 85 F1 | 	sub	fp, #44
10554     C0 94 B1 FD | 	call	#__system___float_add
10558     30 4E 05 F1 | 	add	fp, #48
1055c     A7 FA 61 FC | 	wrlong	result1, fp
10560     FD 14 02 F6 | 	mov	arg02, result1
10564     30 4E 85 F1 | 	sub	fp, #48
10568     00 C0 21 FF 
1056c     00 12 06 F6 | 	mov	arg01, ##1132462080
10570     78 9A B1 FD | 	call	#__system___float_div
10574     34 4E 05 F1 | 	add	fp, #52
10578     A7 FA 61 FC | 	wrlong	result1, fp
1057c     14 4E 85 F1 | 	sub	fp, #20
10580     A7 12 02 FB | 	rdlong	arg01, fp
10584     FD 14 02 F6 | 	mov	arg02, result1
10588     20 4E 85 F1 | 	sub	fp, #32
1058c     58 98 B1 FD | 	call	#__system___float_mul
10590     FD 12 02 F6 | 	mov	arg01, result1
10594     01 14 06 F6 | 	mov	arg02, #1
10598     14 9D B1 FD | 	call	#__system___float_tointeger
1059c     A7 FA 61 FC | 	wrlong	result1, fp
105a0     24 4E 05 F1 | 	add	fp, #36
105a4     A7 12 02 FB | 	rdlong	arg01, fp
105a8     10 4E 05 F1 | 	add	fp, #16
105ac     A7 14 02 FB | 	rdlong	arg02, fp
105b0     34 4E 85 F1 | 	sub	fp, #52
105b4     30 98 B1 FD | 	call	#__system___float_mul
105b8     FD 12 02 F6 | 	mov	arg01, result1
105bc     01 14 06 F6 | 	mov	arg02, #1
105c0     EC 9C B1 FD | 	call	#__system___float_tointeger
105c4     04 4E 05 F1 | 	add	fp, #4
105c8     A7 FA 61 FC | 	wrlong	result1, fp
105cc     28 4E 05 F1 | 	add	fp, #40
105d0     A7 12 02 FB | 	rdlong	arg01, fp
105d4     08 4E 05 F1 | 	add	fp, #8
105d8     A7 14 02 FB | 	rdlong	arg02, fp
105dc     34 4E 85 F1 | 	sub	fp, #52
105e0     04 98 B1 FD | 	call	#__system___float_mul
105e4     FD 12 02 F6 | 	mov	arg01, result1
105e8     01 14 06 F6 | 	mov	arg02, #1
105ec     C0 9C B1 FD | 	call	#__system___float_tointeger
105f0     0C 4E 05 F1 | 	add	fp, #12
105f4     A7 FA 61 FC | 	wrlong	result1, fp
105f8     0C 4E 85 F1 | 	sub	fp, #12
105fc     F8 BF 23 FF 
10600     00 28 06 F6 | 	mov	local02, ##1199566848
10604     A7 12 02 FB | 	rdlong	arg01, fp
10608     09 13 52 F6 | 	abs	arg01, arg01 wc
1060c     1F 2C C6 C9 |  if_b	decod	local04, #31
10610     00 2C 06 36 |  if_ae	mov	local04, #0
10614     CC 93 B1 FD | 	call	#__system___float_fromuns
10618     16 FB 61 F5 | 	xor	result1, local04
1061c     FD 14 02 F6 | 	mov	arg02, result1
10620     14 13 02 F6 | 	mov	arg01, local02
10624     C4 99 B1 FD | 	call	#__system___float_div
10628     38 4E 05 F1 | 	add	fp, #56
1062c     A7 FA 61 FC | 	wrlong	result1, fp
10630     F8 BF 23 FF 
10634     00 28 06 F6 | 	mov	local02, ##1199566848
10638     10 4E 85 F1 | 	sub	fp, #16
1063c     A7 14 02 FB | 	rdlong	arg02, fp
10640     28 4E 85 F1 | 	sub	fp, #40
10644     F8 BF 23 FF 
10648     00 12 06 F6 | 	mov	arg01, ##1199566848
1064c     98 97 B1 FD | 	call	#__system___float_mul
10650     FD 14 02 F6 | 	mov	arg02, result1
10654     14 13 02 F6 | 	mov	arg01, local02
10658     1F 14 E6 F4 | 	bitnot	arg02, #31
1065c     B8 93 B1 FD | 	call	#__system___float_add
10660     FD 28 02 F6 | 	mov	local02, result1
10664     04 4E 05 F1 | 	add	fp, #4
10668     A7 12 02 FB | 	rdlong	arg01, fp
1066c     04 4E 85 F1 | 	sub	fp, #4
10670     09 13 52 F6 | 	abs	arg01, arg01 wc
10674     1F 2C C6 C9 |  if_b	decod	local04, #31
10678     00 2C 06 36 |  if_ae	mov	local04, #0
1067c     64 93 B1 FD | 	call	#__system___float_fromuns
10680     16 FB 61 F5 | 	xor	result1, local04
10684     FD 14 02 F6 | 	mov	arg02, result1
10688     14 13 02 F6 | 	mov	arg01, local02
1068c     5C 99 B1 FD | 	call	#__system___float_div
10690     24 4E 05 F1 | 	add	fp, #36
10694     A7 FA 61 FC | 	wrlong	result1, fp
10698     04 4E 05 F1 | 	add	fp, #4
1069c     A7 14 02 FB | 	rdlong	arg02, fp
106a0     28 4E 85 F1 | 	sub	fp, #40
106a4     F8 BF 23 FF 
106a8     00 12 06 F6 | 	mov	arg01, ##1199566848
106ac     38 97 B1 FD | 	call	#__system___float_mul
106b0     FD 28 02 F6 | 	mov	local02, result1
106b4     0C 4E 05 F1 | 	add	fp, #12
106b8     A7 12 02 FB | 	rdlong	arg01, fp
106bc     0C 4E 85 F1 | 	sub	fp, #12
106c0     09 13 52 F6 | 	abs	arg01, arg01 wc
106c4     1F 2C C6 C9 |  if_b	decod	local04, #31
106c8     00 2C 06 36 |  if_ae	mov	local04, #0
106cc     14 93 B1 FD | 	call	#__system___float_fromuns
106d0     16 FB 61 F5 | 	xor	result1, local04
106d4     FD 14 02 F6 | 	mov	arg02, result1
106d8     14 13 02 F6 | 	mov	arg01, local02
106dc     0C 99 B1 FD | 	call	#__system___float_div
106e0     3C 4E 05 F1 | 	add	fp, #60
106e4     A7 FA 61 FC | 	wrlong	result1, fp
106e8     24 4E 85 F1 | 	sub	fp, #36
106ec     A7 2E 02 FB | 	rdlong	local05, fp
106f0     18 4E 85 F1 | 	sub	fp, #24
106f4     01 2E 66 F0 | 	shl	local05, #1
106f8     52 00 00 FF 
106fc     B4 E4 05 F1 | 	add	objptr, ##42164
10700     F2 2E 02 F1 | 	add	local05, objptr
10704     A7 30 02 FB | 	rdlong	local06, fp
10708     04 4E 05 F1 | 	add	fp, #4
1070c     A7 2A 02 FB | 	rdlong	local03, fp
10710     15 31 02 F1 | 	add	local06, local03
10714     17 31 52 FC | 	wrword	local06, local05
10718     1C 4E 05 F1 | 	add	fp, #28
1071c     A7 00 68 FC | 	wrlong	#0, fp
10720                 | '   fulltime=aa+dd+rr
10720                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
10720                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
10720                 | '   suspoints(channel)=a+d
10720                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
10720     0C 4E 85 F1 | 	sub	fp, #12
10724     A7 00 68 FC | 	wrlong	#0, fp
10728     14 4E 85 F1 | 	sub	fp, #20
1072c     A7 32 02 FB | 	rdlong	local07, fp
10730     52 00 00 FF 
10734     B4 E4 85 F1 | 	sub	objptr, ##42164
10738                 | LR__1344
10738     14 4E 05 F1 | 	add	fp, #20
1073c     A7 28 02 FB | 	rdlong	local02, fp
10740     14 4E 85 F1 | 	sub	fp, #20
10744     19 29 52 F2 | 	cmps	local02, local07 wc
10748     80 00 90 3D |  if_ae	jmp	#LR__1345
1074c     18 4E 05 F1 | 	add	fp, #24
10750     A7 30 02 FB | 	rdlong	local06, fp
10754     09 30 66 F0 | 	shl	local06, #9
10758     0C 00 00 FF 
1075c     D8 E4 05 F1 | 	add	objptr, ##6360
10760     F2 30 02 F1 | 	add	local06, objptr
10764     04 4E 85 F1 | 	sub	fp, #4
10768     A7 2E 02 FB | 	rdlong	local05, fp
1076c     01 2E 66 F0 | 	shl	local05, #1
10770     18 2F 02 F1 | 	add	local05, local06
10774     0C 4E 05 F1 | 	add	fp, #12
10778     A7 12 02 FB | 	rdlong	arg01, fp
1077c     20 4E 85 F1 | 	sub	fp, #32
10780     0C 00 00 FF 
10784     D8 E4 85 F1 | 	sub	objptr, ##6360
10788     01 14 06 F6 | 	mov	arg02, #1
1078c     20 9B B1 FD | 	call	#__system___float_tointeger
10790     17 FB 51 FC | 	wrword	result1, local05
10794     20 4E 05 F1 | 	add	fp, #32
10798     A7 12 02 FB | 	rdlong	arg01, fp
1079c     18 4E 05 F1 | 	add	fp, #24
107a0     A7 14 02 FB | 	rdlong	arg02, fp
107a4     38 4E 85 F1 | 	sub	fp, #56
107a8     6C 92 B1 FD | 	call	#__system___float_add
107ac     20 4E 05 F1 | 	add	fp, #32
107b0     A7 FA 61 FC | 	wrlong	result1, fp
107b4     0C 4E 85 F1 | 	sub	fp, #12
107b8     A7 30 02 FB | 	rdlong	local06, fp
107bc     01 30 06 F1 | 	add	local06, #1
107c0     A7 30 62 FC | 	wrlong	local06, fp
107c4     14 4E 85 F1 | 	sub	fp, #20
107c8     6C FF 9F FD | 	jmp	#LR__1344
107cc                 | LR__1345
107cc                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
107cc     A7 28 02 FB | 	rdlong	local02, fp
107d0     14 4E 05 F1 | 	add	fp, #20
107d4     A7 28 62 FC | 	wrlong	local02, fp
107d8     14 4E 85 F1 | 	sub	fp, #20
107dc     A7 34 02 FB | 	rdlong	local08, fp
107e0     04 4E 05 F1 | 	add	fp, #4
107e4     A7 28 02 FB | 	rdlong	local02, fp
107e8     04 4E 85 F1 | 	sub	fp, #4
107ec     14 35 02 F1 | 	add	local08, local02
107f0                 | LR__1346
107f0     14 4E 05 F1 | 	add	fp, #20
107f4     A7 28 02 FB | 	rdlong	local02, fp
107f8     14 4E 85 F1 | 	sub	fp, #20
107fc     1A 29 52 F2 | 	cmps	local02, local08 wc
10800     A8 00 90 3D |  if_ae	jmp	#LR__1347
10804     18 4E 05 F1 | 	add	fp, #24
10808     A7 32 02 FB | 	rdlong	local07, fp
1080c     09 32 66 F0 | 	shl	local07, #9
10810     0C 00 00 FF 
10814     D8 E4 05 F1 | 	add	objptr, ##6360
10818     F2 32 02 F1 | 	add	local07, objptr
1081c     04 4E 85 F1 | 	sub	fp, #4
10820     A7 30 02 FB | 	rdlong	local06, fp
10824     01 30 66 F0 | 	shl	local06, #1
10828     19 31 02 F1 | 	add	local06, local07
1082c     0C 4E 05 F1 | 	add	fp, #12
10830     A7 12 02 FB | 	rdlong	arg01, fp
10834     20 4E 85 F1 | 	sub	fp, #32
10838     0C 00 00 FF 
1083c     D8 E4 85 F1 | 	sub	objptr, ##6360
10840     01 14 06 F6 | 	mov	arg02, #1
10844     68 9A B1 FD | 	call	#__system___float_tointeger
10848     18 FB 51 FC | 	wrword	result1, local06
1084c     20 4E 05 F1 | 	add	fp, #32
10850     A7 12 02 FB | 	rdlong	arg01, fp
10854     04 4E 05 F1 | 	add	fp, #4
10858     A7 14 02 FB | 	rdlong	arg02, fp
1085c     24 4E 85 F1 | 	sub	fp, #36
10860     1F 14 E6 F4 | 	bitnot	arg02, #31
10864     B0 91 B1 FD | 	call	#__system___float_add
10868     20 4E 05 F1 | 	add	fp, #32
1086c     A7 FA 61 FC | 	wrlong	result1, fp
10870     20 4E 85 F1 | 	sub	fp, #32
10874     FD 12 02 F6 | 	mov	arg01, result1
10878     00 14 06 F6 | 	mov	arg02, #0
1087c     01 16 06 F6 | 	mov	arg03, #1
10880     98 99 B1 FD | 	call	#__system___float_cmp
10884     00 FA 55 F2 | 	cmps	result1, #0 wc
10888     20 4E 05 C1 |  if_b	add	fp, #32
1088c     A7 00 68 CC |  if_b	wrlong	#0, fp
10890     20 4E 85 C1 |  if_b	sub	fp, #32
10894     14 4E 05 F1 | 	add	fp, #20
10898     A7 32 02 FB | 	rdlong	local07, fp
1089c     01 32 06 F1 | 	add	local07, #1
108a0     A7 32 62 FC | 	wrlong	local07, fp
108a4     14 4E 85 F1 | 	sub	fp, #20
108a8     44 FF 9F FD | 	jmp	#LR__1346
108ac                 | LR__1347
108ac                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
108ac     A7 28 02 FB | 	rdlong	local02, fp
108b0     04 4E 05 F1 | 	add	fp, #4
108b4     A7 34 02 FB | 	rdlong	local08, fp
108b8     1A 29 02 F1 | 	add	local02, local08
108bc     10 4E 05 F1 | 	add	fp, #16
108c0     A7 28 62 FC | 	wrlong	local02, fp
108c4     14 4E 85 F1 | 	sub	fp, #20
108c8                 | LR__1348
108c8     14 4E 05 F1 | 	add	fp, #20
108cc     A7 2E 02 FB | 	rdlong	local05, fp
108d0     14 4E 85 F1 | 	sub	fp, #20
108d4     00 2F 56 F2 | 	cmps	local05, #256 wc
108d8     A8 00 90 3D |  if_ae	jmp	#LR__1349
108dc     18 4E 05 F1 | 	add	fp, #24
108e0     A7 34 02 FB | 	rdlong	local08, fp
108e4     09 34 66 F0 | 	shl	local08, #9
108e8     0C 00 00 FF 
108ec     D8 E4 05 F1 | 	add	objptr, ##6360
108f0     F2 34 02 F1 | 	add	local08, objptr
108f4     04 4E 85 F1 | 	sub	fp, #4
108f8     A7 32 02 FB | 	rdlong	local07, fp
108fc     01 32 66 F0 | 	shl	local07, #1
10900     1A 33 02 F1 | 	add	local07, local08
10904     0C 4E 05 F1 | 	add	fp, #12
10908     A7 12 02 FB | 	rdlong	arg01, fp
1090c     20 4E 85 F1 | 	sub	fp, #32
10910     0C 00 00 FF 
10914     D8 E4 85 F1 | 	sub	objptr, ##6360
10918     01 14 06 F6 | 	mov	arg02, #1
1091c     90 99 B1 FD | 	call	#__system___float_tointeger
10920     19 FB 51 FC | 	wrword	result1, local07
10924     20 4E 05 F1 | 	add	fp, #32
10928     A7 12 02 FB | 	rdlong	arg01, fp
1092c     1C 4E 05 F1 | 	add	fp, #28
10930     A7 14 02 FB | 	rdlong	arg02, fp
10934     3C 4E 85 F1 | 	sub	fp, #60
10938     1F 14 E6 F4 | 	bitnot	arg02, #31
1093c     D8 90 B1 FD | 	call	#__system___float_add
10940     20 4E 05 F1 | 	add	fp, #32
10944     A7 FA 61 FC | 	wrlong	result1, fp
10948     20 4E 85 F1 | 	sub	fp, #32
1094c     FD 12 02 F6 | 	mov	arg01, result1
10950     00 14 06 F6 | 	mov	arg02, #0
10954     01 16 06 F6 | 	mov	arg03, #1
10958     C0 98 B1 FD | 	call	#__system___float_cmp
1095c     00 FA 55 F2 | 	cmps	result1, #0 wc
10960     20 4E 05 C1 |  if_b	add	fp, #32
10964     A7 00 68 CC |  if_b	wrlong	#0, fp
10968     20 4E 85 C1 |  if_b	sub	fp, #32
1096c     14 4E 05 F1 | 	add	fp, #20
10970     A7 34 02 FB | 	rdlong	local08, fp
10974     01 34 06 F1 | 	add	local08, #1
10978     A7 34 62 FC | 	wrlong	local08, fp
1097c     14 4E 85 F1 | 	sub	fp, #20
10980     44 FF 9F FD | 	jmp	#LR__1348
10984                 | LR__1349
10984     18 4E 05 F1 | 	add	fp, #24
10988     A7 2E 02 FB | 	rdlong	local05, fp
1098c     18 4E 85 F1 | 	sub	fp, #24
10990     09 2E 66 F0 | 	shl	local05, #9
10994     0C 00 00 FF 
10998     D8 E4 05 F1 | 	add	objptr, ##6360
1099c     F2 2E 02 F1 | 	add	local05, objptr
109a0     FE 2F 06 F1 | 	add	local05, #510
109a4     17 01 58 FC | 	wrword	#0, local05
109a8     0C 00 00 FF 
109ac     D8 E4 85 F1 | 	sub	objptr, ##6360
109b0                 | LR__1350
109b0     18 4E 05 F1 | 	add	fp, #24
109b4     A7 2E 02 FB | 	rdlong	local05, fp
109b8     18 4E 85 F1 | 	sub	fp, #24
109bc     09 2E 66 F0 | 	shl	local05, #9
109c0     0C 00 00 FF 
109c4     D8 E4 05 F1 | 	add	objptr, ##6360
109c8     F2 2E 02 F1 | 	add	local05, objptr
109cc     FE 2F 06 F1 | 	add	local05, #510
109d0     17 01 58 FC | 	wrword	#0, local05
109d4     0C 00 00 FF 
109d8     D8 E4 85 F1 | 	sub	objptr, ##6360
109dc                 | LR__1351
109dc     A7 F0 03 F6 | 	mov	ptra, fp
109e0     B2 00 A0 FD | 	call	#popregs_
109e4                 | _do_defenv_ret
109e4     2D 00 64 FD | 	ret
109e8                 | 
109e8                 | ' 
109e8                 | ' '-------------------- defsnd
109e8                 | ' 
109e8                 | ' sub do_defsnd
109e8                 | _do_defsnd
109e8     04 4A 05 F6 | 	mov	COUNT_, #4
109ec     A8 00 A0 FD | 	call	#pushregs_
109f0     88 F0 07 F1 | 	add	ptra, #136
109f4     4A 00 00 FF 
109f8     80 E4 05 F1 | 	add	objptr, ##38016
109fc     F2 1A 02 FB | 	rdlong	arg05, objptr
10a00     0D 19 02 F6 | 	mov	arg04, arg05
10a04     01 18 66 F0 | 	shl	arg04, #1
10a08     0D 19 02 F1 | 	add	arg04, arg05
10a0c     02 18 66 F0 | 	shl	arg04, #2
10a10     03 00 00 FF 
10a14     04 E4 85 F1 | 	sub	objptr, ##1540
10a18     F2 18 02 F1 | 	add	arg04, objptr
10a1c     0C 1B 02 FB | 	rdlong	arg05, arg04
10a20     A7 1A 62 FC | 	wrlong	arg05, fp
10a24                 | ' 
10a24                 | ' numpar=compiledline(lineptr_e).result.uresult
10a24                 | ' 
10a24                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
10a24                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
10a24                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
10a24                 | ' ' defsnd channel, oneint - loads the wave from the pointer
10a24                 | ' 
10a24                 | ' if numpar<2 then return
10a24     02 1A 56 F2 | 	cmps	arg05, #2 wc
10a28     47 00 00 FF 
10a2c     7C E4 85 F1 | 	sub	objptr, ##36476
10a30     94 08 90 CD |  if_b	jmp	#LR__1383
10a34                 | '  
10a34                 | ' if numpar=2 then
10a34     A7 1A 02 FB | 	rdlong	arg05, fp
10a38     02 1A 0E F2 | 	cmp	arg05, #2 wz
10a3c     A0 03 90 5D |  if_ne	jmp	#LR__1370
10a40     80 CC BF FD | 	call	#_pop
10a44     FF 1A 02 F6 | 	mov	arg05, result3
10a48     2C 4E 05 F1 | 	add	fp, #44
10a4c     A7 FA 61 FC | 	wrlong	result1, fp
10a50     04 4E 05 F1 | 	add	fp, #4
10a54     A7 FC 61 FC | 	wrlong	result2, fp
10a58     04 4E 05 F1 | 	add	fp, #4
10a5c     A7 1A 62 FC | 	wrlong	arg05, fp
10a60                 | '   t1=pop()
10a60                 | '   if t1.result_type=result_string2 then 
10a60     34 4E 85 F1 | 	sub	fp, #52
10a64     2B 1A 0E F2 | 	cmp	arg05, #43 wz
10a68     20 00 90 5D |  if_ne	jmp	#LR__1360
10a6c     2C 4E 05 F1 | 	add	fp, #44
10a70     A7 12 02 FB | 	rdlong	arg01, fp
10a74     2C 4E 85 F1 | 	sub	fp, #44
10a78     C0 CD BF FD | 	call	#_convertstring
10a7c     38 4E 05 F1 | 	add	fp, #56
10a80     A7 FA 61 FC | 	wrlong	result1, fp
10a84     38 4E 85 F1 | 	sub	fp, #56
10a88     58 00 90 FD | 	jmp	#LR__1363
10a8c                 | LR__1360
10a8c     34 4E 05 F1 | 	add	fp, #52
10a90     A7 1A 02 FB | 	rdlong	arg05, fp
10a94     34 4E 85 F1 | 	sub	fp, #52
10a98     1F 1A 0E F2 | 	cmp	arg05, #31 wz
10a9c     18 00 90 5D |  if_ne	jmp	#LR__1361
10aa0     2C 4E 05 F1 | 	add	fp, #44
10aa4     A7 1A 02 FB | 	rdlong	arg05, fp
10aa8     0C 4E 05 F1 | 	add	fp, #12
10aac     A7 1A 62 FC | 	wrlong	arg05, fp
10ab0     38 4E 85 F1 | 	sub	fp, #56
10ab4     2C 00 90 FD | 	jmp	#LR__1362
10ab8                 | LR__1361
10ab8     B9 01 00 FF 
10abc     89 1B 06 F6 | 	mov	arg05, ##@LR__5917
10ac0     38 4E 05 F1 | 	add	fp, #56
10ac4     A7 1A 62 FC | 	wrlong	arg05, fp
10ac8     0C 4E 85 F1 | 	sub	fp, #12
10acc     A7 12 02 F6 | 	mov	arg01, fp
10ad0     2C 4E 85 F1 | 	sub	fp, #44
10ad4     D0 CD BF FD | 	call	#_converttoint
10ad8     14 4E 05 F1 | 	add	fp, #20
10adc     A7 FA 61 FC | 	wrlong	result1, fp
10ae0     14 4E 85 F1 | 	sub	fp, #20
10ae4                 | LR__1362
10ae4                 | LR__1363
10ae4                 | '   if s<>"" then 
10ae4     38 4E 05 F1 | 	add	fp, #56
10ae8     A7 12 02 FB | 	rdlong	arg01, fp
10aec     38 4E 85 F1 | 	sub	fp, #56
10af0     B9 01 00 FF 
10af4     8A 15 06 F6 | 	mov	arg02, ##@LR__5918
10af8     9C 64 B1 FD | 	call	#__system___string_cmp
10afc     00 FA 0D F2 | 	cmp	result1, #0 wz
10b00     E0 01 90 AD |  if_e	jmp	#LR__1366
10b04     BC CB BF FD | 	call	#_pop
10b08     FF 1A 02 F6 | 	mov	arg05, result3
10b0c     2C 4E 05 F1 | 	add	fp, #44
10b10     A7 FA 61 FC | 	wrlong	result1, fp
10b14     04 4E 05 F1 | 	add	fp, #4
10b18     A7 FC 61 FC | 	wrlong	result2, fp
10b1c     04 4E 05 F1 | 	add	fp, #4
10b20     A7 1A 62 FC | 	wrlong	arg05, fp
10b24     08 4E 85 F1 | 	sub	fp, #8
10b28     A7 12 02 F6 | 	mov	arg01, fp
10b2c     2C 4E 85 F1 | 	sub	fp, #44
10b30     74 CD BF FD | 	call	#_converttoint
10b34     10 4E 05 F1 | 	add	fp, #16
10b38     A7 FA 61 FC | 	wrlong	result1, fp
10b3c                 | '     t1=pop()
10b3c                 | '     channel=converttoint(t1) : if channel>31 then return
10b3c     FD 1A 02 F6 | 	mov	arg05, result1
10b40     10 4E 85 F1 | 	sub	fp, #16
10b44     20 1A 56 F2 | 	cmps	arg05, #32 wc
10b48     7C 07 90 3D |  if_ae	jmp	#LR__1383
10b4c                 | '     close #9 : open "/sd/media/s/"+s for input as #9
10b4c     09 12 06 F6 | 	mov	arg01, #9
10b50     74 B7 B1 FD | 	call	#__system__close
10b54     09 26 06 F6 | 	mov	local01, #9
10b58     B9 01 00 FF 
10b5c     8B 13 06 F6 | 	mov	arg01, ##@LR__5919
10b60     38 4E 05 F1 | 	add	fp, #56
10b64     A7 14 02 FB | 	rdlong	arg02, fp
10b68     38 4E 85 F1 | 	sub	fp, #56
10b6c     5C 64 B1 FD | 	call	#__system___string_concat
10b70     FD 14 02 F6 | 	mov	arg02, result1
10b74     13 13 02 F6 | 	mov	arg01, local01
10b78     00 16 06 F6 | 	mov	arg03, #0
10b7c     F4 6F B1 FD | 	call	#__system___basic_open_string
10b80     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10b84     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
10b88     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10b8c     52 00 00 FF 
10b90     10 E5 05 F1 | 	add	objptr, ##42256
10b94     F2 FA 61 FC | 	wrlong	result1, objptr
10b98                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
10b98     52 00 00 FF 
10b9c     10 E5 85 F1 | 	sub	objptr, ##42256
10ba0     B0 00 90 AD |  if_e	jmp	#LR__1364
10ba4     00 12 06 F6 | 	mov	arg01, #0
10ba8     EC C0 B1 FD | 	call	#__system___getiolock_0613
10bac     FD 12 02 F6 | 	mov	arg01, result1
10bb0     BC 63 B1 FD | 	call	#__system___lockmem
10bb4     B9 01 00 FF 
10bb8     98 15 06 F6 | 	mov	arg02, ##@LR__5920
10bbc     00 12 06 F6 | 	mov	arg01, #0
10bc0     00 16 06 F6 | 	mov	arg03, #0
10bc4     9C 70 B1 FD | 	call	#__system___basic_print_string
10bc8     52 00 00 FF 
10bcc     10 E5 05 F1 | 	add	objptr, ##42256
10bd0     F2 14 02 FB | 	rdlong	arg02, objptr
10bd4     52 00 00 FF 
10bd8     10 E5 85 F1 | 	sub	objptr, ##42256
10bdc     00 12 06 F6 | 	mov	arg01, #0
10be0     00 16 06 F6 | 	mov	arg03, #0
10be4     0A 18 06 F6 | 	mov	arg04, #10
10be8     BC 70 B1 FD | 	call	#__system___basic_print_integer
10bec     B9 01 00 FF 
10bf0     A6 15 06 F6 | 	mov	arg02, ##@LR__5921
10bf4     00 12 06 F6 | 	mov	arg01, #0
10bf8     00 16 06 F6 | 	mov	arg03, #0
10bfc     64 70 B1 FD | 	call	#__system___basic_print_string
10c00     00 26 06 F6 | 	mov	local01, #0
10c04     52 00 00 FF 
10c08     10 E5 05 F1 | 	add	objptr, ##42256
10c0c     F2 12 02 FB | 	rdlong	arg01, objptr
10c10     52 00 00 FF 
10c14     10 E5 85 F1 | 	sub	objptr, ##42256
10c18     E0 8C B1 FD | 	call	#__system___strerror
10c1c     FD 14 02 F6 | 	mov	arg02, result1
10c20     13 13 02 F6 | 	mov	arg01, local01
10c24     00 16 06 F6 | 	mov	arg03, #0
10c28     38 70 B1 FD | 	call	#__system___basic_print_string
10c2c     00 12 06 F6 | 	mov	arg01, #0
10c30     0A 14 06 F6 | 	mov	arg02, #10
10c34     00 16 06 F6 | 	mov	arg03, #0
10c38     D0 6F B1 FD | 	call	#__system___basic_print_char
10c3c     00 12 06 F6 | 	mov	arg01, #0
10c40     54 C0 B1 FD | 	call	#__system___getiolock_0613
10c44     FD 00 68 FC | 	wrlong	#0, result1
10c48     09 12 06 F6 | 	mov	arg01, #9
10c4c     78 B6 B1 FD | 	call	#__system__close
10c50     74 06 90 FD | 	jmp	#LR__1383
10c54                 | LR__1364
10c54                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
10c54     04 4E 05 F1 | 	add	fp, #4
10c58     A7 00 68 FC | 	wrlong	#0, fp
10c5c                 | LR__1365
10c5c     A7 26 02 FB | 	rdlong	local01, fp
10c60     01 26 66 F0 | 	shl	local01, #1
10c64     11 14 06 F6 | 	mov	arg02, #17
10c68     13 15 02 F1 | 	add	arg02, local01
10c6c     78 4E 05 F1 | 	add	fp, #120
10c70     A7 16 02 F6 | 	mov	arg03, fp
10c74     7C 4E 85 F1 | 	sub	fp, #124
10c78     09 12 06 F6 | 	mov	arg01, #9
10c7c     01 18 06 F6 | 	mov	arg04, #1
10c80     02 1A 06 F6 | 	mov	arg05, #2
10c84     58 71 B1 FD | 	call	#__system___basic_get
10c88     10 4E 05 F1 | 	add	fp, #16
10c8c     A7 12 02 FB | 	rdlong	arg01, fp
10c90     0B 12 66 F0 | 	shl	arg01, #11
10c94     0C 4E 85 F1 | 	sub	fp, #12
10c98     A7 26 02 FB | 	rdlong	local01, fp
10c9c     01 26 66 F0 | 	shl	local01, #1
10ca0     13 13 02 F1 | 	add	arg01, local01
10ca4     78 4E 05 F1 | 	add	fp, #120
10ca8     A7 14 E2 FA | 	rdword	arg02, fp
10cac     7C 4E 85 F1 | 	sub	fp, #124
10cb0     0F 14 66 F7 | 	signx	arg02, #15
10cb4     84 2A B1 FD | 	call	#_psdpoke
10cb8     04 4E 05 F1 | 	add	fp, #4
10cbc     A7 26 02 FB | 	rdlong	local01, fp
10cc0     01 26 06 F1 | 	add	local01, #1
10cc4     A7 26 62 FC | 	wrlong	local01, fp
10cc8     02 00 00 FF 
10ccc     01 26 56 F2 | 	cmps	local01, ##1025 wc
10cd0     88 FF 9F CD |  if_b	jmp	#LR__1365
10cd4     04 4E 85 F1 | 	sub	fp, #4
10cd8                 | '     close #9
10cd8     09 12 06 F6 | 	mov	arg01, #9
10cdc     E8 B5 B1 FD | 	call	#__system__close
10ce0                 | '     return
10ce0     E4 05 90 FD | 	jmp	#LR__1383
10ce4                 | LR__1366
10ce4                 | '     if wptr < ($80000 - 2048) then 
10ce4     14 4E 05 F1 | 	add	fp, #20
10ce8     A7 26 02 FB | 	rdlong	local01, fp
10cec     14 4E 85 F1 | 	sub	fp, #20
10cf0     FC 03 00 FF 
10cf4     00 26 56 F2 | 	cmps	local01, ##522240 wc
10cf8     70 00 90 3D |  if_ae	jmp	#LR__1368
10cfc                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
10cfc     04 4E 05 F1 | 	add	fp, #4
10d00     A7 00 68 FC | 	wrlong	#0, fp
10d04     04 4E 85 F1 | 	sub	fp, #4
10d08                 | LR__1367
10d08     10 4E 05 F1 | 	add	fp, #16
10d0c     A7 26 02 FB | 	rdlong	local01, fp
10d10     0B 26 66 F0 | 	shl	local01, #11
10d14     0C 4E 85 F1 | 	sub	fp, #12
10d18     A7 1A 02 FB | 	rdlong	arg05, fp
10d1c     0D 19 02 F6 | 	mov	arg04, arg05
10d20     01 18 66 F0 | 	shl	arg04, #1
10d24     0C 27 02 F1 | 	add	local01, arg04
10d28     10 4E 05 F1 | 	add	fp, #16
10d2c     A7 12 02 FB | 	rdlong	arg01, fp
10d30     14 4E 85 F1 | 	sub	fp, #20
10d34     01 1A 66 F0 | 	shl	arg05, #1
10d38     0D 13 02 F1 | 	add	arg01, arg05
10d3c     09 15 E2 FA | 	rdword	arg02, arg01
10d40     13 13 02 F6 | 	mov	arg01, local01
10d44     F4 29 B1 FD | 	call	#_psdpoke
10d48     04 4E 05 F1 | 	add	fp, #4
10d4c     A7 26 02 FB | 	rdlong	local01, fp
10d50     01 26 06 F1 | 	add	local01, #1
10d54     A7 26 62 FC | 	wrlong	local01, fp
10d58     04 4E 85 F1 | 	sub	fp, #4
10d5c     02 00 00 FF 
10d60     00 26 56 F2 | 	cmps	local01, ##1024 wc
10d64     A0 FF 9F CD |  if_b	jmp	#LR__1367
10d68     5C 05 90 FD | 	jmp	#LR__1383
10d6c                 | LR__1368
10d6c                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
10d6c     04 4E 05 F1 | 	add	fp, #4
10d70     A7 00 68 FC | 	wrlong	#0, fp
10d74     04 4E 85 F1 | 	sub	fp, #4
10d78                 | LR__1369
10d78     10 4E 05 F1 | 	add	fp, #16
10d7c     A7 26 02 FB | 	rdlong	local01, fp
10d80     0B 26 66 F0 | 	shl	local01, #11
10d84     0C 4E 85 F1 | 	sub	fp, #12
10d88     A7 1A 02 FB | 	rdlong	arg05, fp
10d8c     0D 19 02 F6 | 	mov	arg04, arg05
10d90     01 18 66 F0 | 	shl	arg04, #1
10d94     0C 27 02 F1 | 	add	local01, arg04
10d98     10 4E 05 F1 | 	add	fp, #16
10d9c     A7 12 02 FB | 	rdlong	arg01, fp
10da0     14 4E 85 F1 | 	sub	fp, #20
10da4     01 1A 66 F0 | 	shl	arg05, #1
10da8     0D 13 02 F1 | 	add	arg01, arg05
10dac     CC 2A B1 FD | 	call	#_psdpeek
10db0     FD 14 02 F6 | 	mov	arg02, result1
10db4     13 13 02 F6 | 	mov	arg01, local01
10db8     80 29 B1 FD | 	call	#_psdpoke
10dbc     04 4E 05 F1 | 	add	fp, #4
10dc0     A7 26 02 FB | 	rdlong	local01, fp
10dc4     01 26 06 F1 | 	add	local01, #1
10dc8     A7 26 62 FC | 	wrlong	local01, fp
10dcc     04 4E 85 F1 | 	sub	fp, #4
10dd0     02 00 00 FF 
10dd4     00 26 56 F2 | 	cmps	local01, ##1024 wc
10dd8     9C FF 9F CD |  if_b	jmp	#LR__1369
10ddc                 | '     return 
10ddc     E8 04 90 FD | 	jmp	#LR__1383
10de0                 | '   return
10de0                 | LR__1370
10de0                 | ' for i=0 to 15 : harm(i)=0: next i  
10de0     04 4E 05 F1 | 	add	fp, #4
10de4     A7 00 68 FC | 	wrlong	#0, fp
10de8     97 16 48 FB | 	callpa	#(@LR__1372-@LR__1371)>>2,fcache_load_ptr_
10dec                 | LR__1371
10dec     A7 26 02 FB | 	rdlong	local01, fp
10df0     02 26 66 F0 | 	shl	local01, #2
10df4     38 4E 05 F1 | 	add	fp, #56
10df8     A7 26 02 F1 | 	add	local01, fp
10dfc     13 01 68 FC | 	wrlong	#0, local01
10e00     38 4E 85 F1 | 	sub	fp, #56
10e04     A7 26 02 FB | 	rdlong	local01, fp
10e08     01 26 06 F1 | 	add	local01, #1
10e0c     A7 26 62 FC | 	wrlong	local01, fp
10e10     10 26 56 F2 | 	cmps	local01, #16 wc
10e14     D4 FF 9F CD |  if_b	jmp	#LR__1371
10e18                 | LR__1372
10e18     04 4E 85 F1 | 	sub	fp, #4
10e1c                 | ' for i=numpar to 2 step -1 
10e1c     A7 26 02 FB | 	rdlong	local01, fp
10e20     04 4E 05 F1 | 	add	fp, #4
10e24     A7 26 62 FC | 	wrlong	local01, fp
10e28     04 4E 85 F1 | 	sub	fp, #4
10e2c                 | LR__1373
10e2c     94 C8 BF FD | 	call	#_pop
10e30     2C 4E 05 F1 | 	add	fp, #44
10e34     A7 FA 61 FC | 	wrlong	result1, fp
10e38     04 4E 05 F1 | 	add	fp, #4
10e3c     A7 FC 61 FC | 	wrlong	result2, fp
10e40     04 4E 05 F1 | 	add	fp, #4
10e44     A7 FE 61 FC | 	wrlong	result3, fp
10e48     30 4E 85 F1 | 	sub	fp, #48
10e4c     A7 26 02 FB | 	rdlong	local01, fp
10e50     02 26 86 F1 | 	sub	local01, #2
10e54     02 26 66 F0 | 	shl	local01, #2
10e58     38 4E 05 F1 | 	add	fp, #56
10e5c     A7 26 02 F1 | 	add	local01, fp
10e60     10 4E 85 F1 | 	sub	fp, #16
10e64     A7 12 02 F6 | 	mov	arg01, fp
10e68     2C 4E 85 F1 | 	sub	fp, #44
10e6c     F4 CA BF FD | 	call	#_converttofloat
10e70     13 FB 61 FC | 	wrlong	result1, local01
10e74     04 4E 05 F1 | 	add	fp, #4
10e78     A7 26 02 FB | 	rdlong	local01, fp
10e7c     01 26 86 F1 | 	sub	local01, #1
10e80     A7 26 62 FC | 	wrlong	local01, fp
10e84     04 4E 85 F1 | 	sub	fp, #4
10e88     02 26 56 F2 | 	cmps	local01, #2 wc
10e8c     9C FF 9F 3D |  if_ae	jmp	#LR__1373
10e90     30 C8 BF FD | 	call	#_pop
10e94     FF 26 02 F6 | 	mov	local01, result3
10e98     2C 4E 05 F1 | 	add	fp, #44
10e9c     A7 FA 61 FC | 	wrlong	result1, fp
10ea0     04 4E 05 F1 | 	add	fp, #4
10ea4     A7 FC 61 FC | 	wrlong	result2, fp
10ea8     04 4E 05 F1 | 	add	fp, #4
10eac     A7 26 62 FC | 	wrlong	local01, fp
10eb0     08 4E 85 F1 | 	sub	fp, #8
10eb4     A7 12 02 F6 | 	mov	arg01, fp
10eb8     2C 4E 85 F1 | 	sub	fp, #44
10ebc     E8 C9 BF FD | 	call	#_converttoint
10ec0     10 4E 05 F1 | 	add	fp, #16
10ec4     A7 FA 61 FC | 	wrlong	result1, fp
10ec8                 | ' t1=pop()
10ec8                 | ' channel=converttoint(t1) : : if channel>31 then return
10ec8     FD 26 02 F6 | 	mov	local01, result1
10ecc     10 4E 85 F1 | 	sub	fp, #16
10ed0     20 26 56 F2 | 	cmps	local01, #32 wc
10ed4     F0 03 90 3D |  if_ae	jmp	#LR__1383
10ed8     20 4E 05 F1 | 	add	fp, #32
10edc     A7 00 68 FC | 	wrlong	#0, fp
10ee0                 | ' max=0
10ee0                 | ' if harm(0)<0 then
10ee0     1C 4E 05 F1 | 	add	fp, #28
10ee4     A7 12 02 FB | 	rdlong	arg01, fp
10ee8     3C 4E 85 F1 | 	sub	fp, #60
10eec     00 14 06 F6 | 	mov	arg02, #0
10ef0     01 16 06 F6 | 	mov	arg03, #1
10ef4     24 93 B1 FD | 	call	#__system___float_cmp
10ef8     00 FA 55 F2 | 	cmps	result1, #0 wc
10efc     04 01 90 3D |  if_ae	jmp	#LR__1376
10f00     3C 4E 05 F1 | 	add	fp, #60
10f04     A7 FA 01 FB | 	rdlong	result1, fp
10f08     1F FA 05 F4 | 	bitl	result1, #31
10f0c     24 4E 85 F1 | 	sub	fp, #36
10f10     A7 FA 61 FC | 	wrlong	result1, fp
10f14     28 4E 05 F1 | 	add	fp, #40
10f18     A7 FA 01 FB | 	rdlong	result1, fp
10f1c     1F FA 05 F4 | 	bitl	result1, #31
10f20     24 4E 85 F1 | 	sub	fp, #36
10f24     A7 FA 61 FC | 	wrlong	result1, fp
10f28     20 4E 05 F1 | 	add	fp, #32
10f2c     00 C0 9F FF 
10f30     A7 00 68 FC | 	wrlong	##1065353216, fp
10f34     24 4E 85 F1 | 	sub	fp, #36
10f38     A7 26 02 FB | 	rdlong	local01, fp
10f3c     28 4E 05 F1 | 	add	fp, #40
10f40     A7 26 62 FC | 	wrlong	local01, fp
10f44     24 4E 85 F1 | 	sub	fp, #36
10f48     A7 26 02 FB | 	rdlong	local01, fp
10f4c     28 4E 05 F1 | 	add	fp, #40
10f50     A7 26 62 FC | 	wrlong	local01, fp
10f54                 | '   harm(0)=1
10f54                 | '   harm(1)=even
10f54                 | '   harm(2)=odd
10f54                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
10f54     40 4E 85 F1 | 	sub	fp, #64
10f58     A7 06 68 FC | 	wrlong	#3, fp
10f5c                 | LR__1374
10f5c     A7 1A 02 FB | 	rdlong	arg05, fp
10f60     0D 29 02 F6 | 	mov	local02, arg05
10f64     02 28 66 F0 | 	shl	local02, #2
10f68     38 4E 05 F1 | 	add	fp, #56
10f6c     A7 28 02 F1 | 	add	local02, fp
10f70     02 1A 86 F1 | 	sub	arg05, #2
10f74     02 1A 66 F0 | 	shl	arg05, #2
10f78     A7 1A 02 F1 | 	add	arg05, fp
10f7c     0D 13 02 FB | 	rdlong	arg01, arg05
10f80     24 4E 85 F1 | 	sub	fp, #36
10f84     A7 14 02 FB | 	rdlong	arg02, fp
10f88     18 4E 85 F1 | 	sub	fp, #24
10f8c     58 8E B1 FD | 	call	#__system___float_mul
10f90     14 FB 61 FC | 	wrlong	result1, local02
10f94     04 4E 05 F1 | 	add	fp, #4
10f98     A7 2A 02 FB | 	rdlong	local03, fp
10f9c     02 2A 06 F1 | 	add	local03, #2
10fa0     A7 2A 62 FC | 	wrlong	local03, fp
10fa4     10 2A 56 F2 | 	cmps	local03, #16 wc
10fa8     B0 FF 9F CD |  if_b	jmp	#LR__1374
10fac                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
10fac     A7 08 68 FC | 	wrlong	#4, fp
10fb0                 | LR__1375
10fb0     A7 2A 02 FB | 	rdlong	local03, fp
10fb4     15 29 02 F6 | 	mov	local02, local03
10fb8     02 28 66 F0 | 	shl	local02, #2
10fbc     38 4E 05 F1 | 	add	fp, #56
10fc0     A7 28 02 F1 | 	add	local02, fp
10fc4     02 2A 86 F1 | 	sub	local03, #2
10fc8     02 2A 66 F0 | 	shl	local03, #2
10fcc     A7 2A 02 F1 | 	add	local03, fp
10fd0     15 13 02 FB | 	rdlong	arg01, local03
10fd4     20 4E 85 F1 | 	sub	fp, #32
10fd8     A7 14 02 FB | 	rdlong	arg02, fp
10fdc     1C 4E 85 F1 | 	sub	fp, #28
10fe0     04 8E B1 FD | 	call	#__system___float_mul
10fe4     14 FB 61 FC | 	wrlong	result1, local02
10fe8     04 4E 05 F1 | 	add	fp, #4
10fec     A7 2A 02 FB | 	rdlong	local03, fp
10ff0     02 2A 06 F1 | 	add	local03, #2
10ff4     A7 2A 62 FC | 	wrlong	local03, fp
10ff8     0F 2A 56 F2 | 	cmps	local03, #15 wc
10ffc     B0 FF 9F CD |  if_b	jmp	#LR__1375
11000     04 4E 85 F1 | 	sub	fp, #4
11004                 | LR__1376
11004                 | ' if harm(0)>=0 then ' synthesize with harmonics
11004     3C 4E 05 F1 | 	add	fp, #60
11008     A7 12 02 FB | 	rdlong	arg01, fp
1100c     3C 4E 85 F1 | 	sub	fp, #60
11010     00 14 06 F6 | 	mov	arg02, #0
11014     01 16 66 F6 | 	neg	arg03, #1
11018     00 92 B1 FD | 	call	#__system___float_cmp
1101c     00 FA 55 F2 | 	cmps	result1, #0 wc
11020     A4 02 90 CD |  if_b	jmp	#LR__1382
11024                 | '   for i=0 to 1023
11024     04 4E 05 F1 | 	add	fp, #4
11028     A7 00 68 FC | 	wrlong	#0, fp
1102c     04 4E 85 F1 | 	sub	fp, #4
11030                 | LR__1377
11030     24 4E 05 F1 | 	add	fp, #36
11034     A7 00 68 FC | 	wrlong	#0, fp
11038                 | '     spl=0
11038                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
11038     1C 4E 85 F1 | 	sub	fp, #28
1103c     A7 00 68 FC | 	wrlong	#0, fp
11040                 | LR__1378
11040     A7 28 02 FB | 	rdlong	local02, fp
11044     02 28 66 F0 | 	shl	local02, #2
11048     34 4E 05 F1 | 	add	fp, #52
1104c     A7 28 02 F1 | 	add	local02, fp
11050     14 2B 02 FB | 	rdlong	local03, local02
11054     87 E4 1D FF 
11058     DB 29 06 F6 | 	mov	local02, ##1003032539
1105c     38 4E 85 F1 | 	sub	fp, #56
11060     A7 12 02 FB | 	rdlong	arg01, fp
11064     04 4E 85 F1 | 	sub	fp, #4
11068     09 13 52 F6 | 	abs	arg01, arg01 wc
1106c     1F 2C C6 C9 |  if_b	decod	local04, #31
11070     00 2C 06 36 |  if_ae	mov	local04, #0
11074     6C 89 B1 FD | 	call	#__system___float_fromuns
11078     16 FB 61 F5 | 	xor	result1, local04
1107c     FD 14 02 F6 | 	mov	arg02, result1
11080     14 13 02 F6 | 	mov	arg01, local02
11084     60 8D B1 FD | 	call	#__system___float_mul
11088     FD 28 02 F6 | 	mov	local02, result1
1108c     08 4E 05 F1 | 	add	fp, #8
11090     A7 12 02 FB | 	rdlong	arg01, fp
11094     08 4E 85 F1 | 	sub	fp, #8
11098     01 12 06 F1 | 	add	arg01, #1
1109c     09 13 52 F6 | 	abs	arg01, arg01 wc
110a0     1F 2C C6 C9 |  if_b	decod	local04, #31
110a4     00 2C 06 36 |  if_ae	mov	local04, #0
110a8     38 89 B1 FD | 	call	#__system___float_fromuns
110ac     16 FB 61 F5 | 	xor	result1, local04
110b0     FD 14 02 F6 | 	mov	arg02, result1
110b4     14 13 02 F6 | 	mov	arg01, local02
110b8     2C 8D B1 FD | 	call	#__system___float_mul
110bc     FD 12 02 F6 | 	mov	arg01, result1
110c0     84 96 B1 FD | 	call	#__system____builtin_sinf
110c4     FD 14 02 F6 | 	mov	arg02, result1
110c8     15 13 02 F6 | 	mov	arg01, local03
110cc     18 8D B1 FD | 	call	#__system___float_mul
110d0     FD 14 02 F6 | 	mov	arg02, result1
110d4     24 4E 05 F1 | 	add	fp, #36
110d8     A7 12 02 FB | 	rdlong	arg01, fp
110dc     24 4E 85 F1 | 	sub	fp, #36
110e0     34 89 B1 FD | 	call	#__system___float_add
110e4     24 4E 05 F1 | 	add	fp, #36
110e8     A7 FA 61 FC | 	wrlong	result1, fp
110ec     1C 4E 85 F1 | 	sub	fp, #28
110f0     A7 16 02 FB | 	rdlong	arg03, fp
110f4     01 16 06 F1 | 	add	arg03, #1
110f8     A7 16 62 FC | 	wrlong	arg03, fp
110fc     10 16 56 F2 | 	cmps	arg03, #16 wc
11100     3C FF 9F CD |  if_b	jmp	#LR__1378
11104                 | '     if abs(spl)>max then max=abs(spl)  
11104     1C 4E 05 F1 | 	add	fp, #28
11108     A7 12 02 FB | 	rdlong	arg01, fp
1110c     1F 12 06 F4 | 	bitl	arg01, #31
11110     04 4E 85 F1 | 	sub	fp, #4
11114     A7 14 02 FB | 	rdlong	arg02, fp
11118     20 4E 85 F1 | 	sub	fp, #32
1111c     01 16 66 F6 | 	neg	arg03, #1
11120     F8 90 B1 FD | 	call	#__system___float_cmp
11124     01 FA 55 F2 | 	cmps	result1, #1 wc
11128     18 00 90 CD |  if_b	jmp	#LR__1379
1112c     24 4E 05 F1 | 	add	fp, #36
11130     A7 FA 01 FB | 	rdlong	result1, fp
11134     1F FA 05 F4 | 	bitl	result1, #31
11138     04 4E 85 F1 | 	sub	fp, #4
1113c     A7 FA 61 FC | 	wrlong	result1, fp
11140     20 4E 85 F1 | 	sub	fp, #32
11144                 | LR__1379
11144     04 4E 05 F1 | 	add	fp, #4
11148     A7 2A 02 FB | 	rdlong	local03, fp
1114c     01 2A 06 F1 | 	add	local03, #1
11150     A7 2A 62 FC | 	wrlong	local03, fp
11154     04 4E 85 F1 | 	sub	fp, #4
11158     02 00 00 FF 
1115c     00 2A 56 F2 | 	cmps	local03, ##1024 wc
11160     CC FE 9F CD |  if_b	jmp	#LR__1377
11164                 | '   for i=0 to 1023
11164     04 4E 05 F1 | 	add	fp, #4
11168     A7 00 68 FC | 	wrlong	#0, fp
1116c     04 4E 85 F1 | 	sub	fp, #4
11170                 | LR__1380
11170     24 4E 05 F1 | 	add	fp, #36
11174     A7 00 68 FC | 	wrlong	#0, fp
11178                 | '     spl=0
11178                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
11178     1C 4E 85 F1 | 	sub	fp, #28
1117c     A7 00 68 FC | 	wrlong	#0, fp
11180                 | LR__1381
11180     A7 2A 02 FB | 	rdlong	local03, fp
11184     02 2A 66 F0 | 	shl	local03, #2
11188     34 4E 05 F1 | 	add	fp, #52
1118c     A7 2A 02 F1 | 	add	local03, fp
11190     15 2B 02 FB | 	rdlong	local03, local03
11194     1C 4E 85 F1 | 	sub	fp, #28
11198     A7 14 02 FB | 	rdlong	arg02, fp
1119c     20 4E 85 F1 | 	sub	fp, #32
111a0     58 7F 23 FF 
111a4     00 12 06 F6 | 	mov	arg01, ##1191096320
111a8     40 8E B1 FD | 	call	#__system___float_div
111ac     FD 14 02 F6 | 	mov	arg02, result1
111b0     15 13 02 F6 | 	mov	arg01, local03
111b4     30 8C B1 FD | 	call	#__system___float_mul
111b8     FD 2A 02 F6 | 	mov	local03, result1
111bc     87 E4 1D FF 
111c0     DB 29 06 F6 | 	mov	local02, ##1003032539
111c4     04 4E 05 F1 | 	add	fp, #4
111c8     A7 12 02 FB | 	rdlong	arg01, fp
111cc     04 4E 85 F1 | 	sub	fp, #4
111d0     09 13 52 F6 | 	abs	arg01, arg01 wc
111d4     1F 2C C6 C9 |  if_b	decod	local04, #31
111d8     00 2C 06 36 |  if_ae	mov	local04, #0
111dc     04 88 B1 FD | 	call	#__system___float_fromuns
111e0     16 FB 61 F5 | 	xor	result1, local04
111e4     FD 14 02 F6 | 	mov	arg02, result1
111e8     14 13 02 F6 | 	mov	arg01, local02
111ec     F8 8B B1 FD | 	call	#__system___float_mul
111f0     FD 28 02 F6 | 	mov	local02, result1
111f4     08 4E 05 F1 | 	add	fp, #8
111f8     A7 12 02 FB | 	rdlong	arg01, fp
111fc     08 4E 85 F1 | 	sub	fp, #8
11200     01 12 06 F1 | 	add	arg01, #1
11204     09 13 52 F6 | 	abs	arg01, arg01 wc
11208     1F 2C C6 C9 |  if_b	decod	local04, #31
1120c     00 2C 06 36 |  if_ae	mov	local04, #0
11210     D0 87 B1 FD | 	call	#__system___float_fromuns
11214     16 FB 61 F5 | 	xor	result1, local04
11218     FD 14 02 F6 | 	mov	arg02, result1
1121c     14 13 02 F6 | 	mov	arg01, local02
11220     C4 8B B1 FD | 	call	#__system___float_mul
11224     FD 12 02 F6 | 	mov	arg01, result1
11228     1C 95 B1 FD | 	call	#__system____builtin_sinf
1122c     FD 14 02 F6 | 	mov	arg02, result1
11230     15 13 02 F6 | 	mov	arg01, local03
11234     B0 8B B1 FD | 	call	#__system___float_mul
11238     FD 14 02 F6 | 	mov	arg02, result1
1123c     24 4E 05 F1 | 	add	fp, #36
11240     A7 12 02 FB | 	rdlong	arg01, fp
11244     24 4E 85 F1 | 	sub	fp, #36
11248     CC 87 B1 FD | 	call	#__system___float_add
1124c     24 4E 05 F1 | 	add	fp, #36
11250     A7 FA 61 FC | 	wrlong	result1, fp
11254     1C 4E 85 F1 | 	sub	fp, #28
11258     A7 2A 02 FB | 	rdlong	local03, fp
1125c     01 2A 06 F1 | 	add	local03, #1
11260     A7 2A 62 FC | 	wrlong	local03, fp
11264     10 2A 56 F2 | 	cmps	local03, #16 wc
11268     14 FF 9F CD |  if_b	jmp	#LR__1381
1126c     08 4E 05 F1 | 	add	fp, #8
11270     A7 2A 02 FB | 	rdlong	local03, fp
11274     0B 2A 66 F0 | 	shl	local03, #11
11278     0C 4E 85 F1 | 	sub	fp, #12
1127c     A7 28 02 FB | 	rdlong	local02, fp
11280     01 28 66 F0 | 	shl	local02, #1
11284     14 2B 02 F1 | 	add	local03, local02
11288     20 4E 05 F1 | 	add	fp, #32
1128c     A7 12 02 FB | 	rdlong	arg01, fp
11290     24 4E 85 F1 | 	sub	fp, #36
11294     01 14 06 F6 | 	mov	arg02, #1
11298     14 90 B1 FD | 	call	#__system___float_tointeger
1129c     FD 14 02 F6 | 	mov	arg02, result1
112a0     15 13 02 F6 | 	mov	arg01, local03
112a4     94 24 B1 FD | 	call	#_psdpoke
112a8     04 4E 05 F1 | 	add	fp, #4
112ac     A7 2A 02 FB | 	rdlong	local03, fp
112b0     01 2A 06 F1 | 	add	local03, #1
112b4     A7 2A 62 FC | 	wrlong	local03, fp
112b8     04 4E 85 F1 | 	sub	fp, #4
112bc     02 00 00 FF 
112c0     00 2A 56 F2 | 	cmps	local03, ##1024 wc
112c4     A8 FE 9F CD |  if_b	jmp	#LR__1380
112c8                 | LR__1382
112c8                 | LR__1383
112c8     A7 F0 03 F6 | 	mov	ptra, fp
112cc     B2 00 A0 FD | 	call	#popregs_
112d0                 | _do_defsnd_ret
112d0     2D 00 64 FD | 	ret
112d4                 | 
112d4                 | ' 
112d4                 | ' '-------------------- defsprite
112d4                 | ' 
112d4                 | ' sub do_defsprite
112d4                 | _do_defsprite
112d4     07 4A 05 F6 | 	mov	COUNT_, #7
112d8     A8 00 A0 FD | 	call	#pushregs_
112dc     60 F0 07 F1 | 	add	ptra, #96
112e0     E0 C3 BF FD | 	call	#_pop
112e4     FD 16 02 F6 | 	mov	arg03, result1
112e8     FE 14 02 F6 | 	mov	arg02, result2
112ec     FF 12 02 F6 | 	mov	arg01, result3
112f0     30 4E 05 F1 | 	add	fp, #48
112f4     A7 16 62 FC | 	wrlong	arg03, fp
112f8     04 4E 05 F1 | 	add	fp, #4
112fc     A7 14 62 FC | 	wrlong	arg02, fp
11300     04 4E 05 F1 | 	add	fp, #4
11304     A7 12 62 FC | 	wrlong	arg01, fp
11308     38 4E 85 F1 | 	sub	fp, #56
1130c     B4 C3 BF FD | 	call	#_pop
11310     FD 16 02 F6 | 	mov	arg03, result1
11314     FE 14 02 F6 | 	mov	arg02, result2
11318     FF 12 02 F6 | 	mov	arg01, result3
1131c     24 4E 05 F1 | 	add	fp, #36
11320     A7 16 62 FC | 	wrlong	arg03, fp
11324     04 4E 05 F1 | 	add	fp, #4
11328     A7 14 62 FC | 	wrlong	arg02, fp
1132c     04 4E 05 F1 | 	add	fp, #4
11330     A7 12 62 FC | 	wrlong	arg01, fp
11334     2C 4E 85 F1 | 	sub	fp, #44
11338     88 C3 BF FD | 	call	#_pop
1133c     FD 16 02 F6 | 	mov	arg03, result1
11340     FE 14 02 F6 | 	mov	arg02, result2
11344     FF 12 02 F6 | 	mov	arg01, result3
11348     18 4E 05 F1 | 	add	fp, #24
1134c     A7 16 62 FC | 	wrlong	arg03, fp
11350     04 4E 05 F1 | 	add	fp, #4
11354     A7 14 62 FC | 	wrlong	arg02, fp
11358     04 4E 05 F1 | 	add	fp, #4
1135c     A7 12 62 FC | 	wrlong	arg01, fp
11360     20 4E 85 F1 | 	sub	fp, #32
11364     5C C3 BF FD | 	call	#_pop
11368     FD 16 02 F6 | 	mov	arg03, result1
1136c     FE 14 02 F6 | 	mov	arg02, result2
11370     FF 12 02 F6 | 	mov	arg01, result3
11374     0C 4E 05 F1 | 	add	fp, #12
11378     A7 16 62 FC | 	wrlong	arg03, fp
1137c     04 4E 05 F1 | 	add	fp, #4
11380     A7 14 62 FC | 	wrlong	arg02, fp
11384     04 4E 05 F1 | 	add	fp, #4
11388     A7 12 62 FC | 	wrlong	arg01, fp
1138c     14 4E 85 F1 | 	sub	fp, #20
11390     30 C3 BF FD | 	call	#_pop
11394     FF 16 02 F6 | 	mov	arg03, result3
11398     A7 FA 61 FC | 	wrlong	result1, fp
1139c     04 4E 05 F1 | 	add	fp, #4
113a0     A7 FC 61 FC | 	wrlong	result2, fp
113a4     04 4E 05 F1 | 	add	fp, #4
113a8     A7 16 62 FC | 	wrlong	arg03, fp
113ac     08 4E 85 F1 | 	sub	fp, #8
113b0     A7 12 02 F6 | 	mov	arg01, fp
113b4     F0 C4 BF FD | 	call	#_converttoint
113b8     3C 4E 05 F1 | 	add	fp, #60
113bc     A7 FA 61 FC | 	wrlong	result1, fp
113c0     30 4E 85 F1 | 	sub	fp, #48
113c4     A7 12 02 F6 | 	mov	arg01, fp
113c8     0C 4E 85 F1 | 	sub	fp, #12
113cc     D8 C4 BF FD | 	call	#_converttoint
113d0     40 4E 05 F1 | 	add	fp, #64
113d4     A7 FA 61 FC | 	wrlong	result1, fp
113d8     28 4E 85 F1 | 	sub	fp, #40
113dc     A7 12 02 F6 | 	mov	arg01, fp
113e0     18 4E 85 F1 | 	sub	fp, #24
113e4     C0 C4 BF FD | 	call	#_converttoint
113e8     44 4E 05 F1 | 	add	fp, #68
113ec     A7 FA 61 FC | 	wrlong	result1, fp
113f0     20 4E 85 F1 | 	sub	fp, #32
113f4     A7 12 02 F6 | 	mov	arg01, fp
113f8     24 4E 85 F1 | 	sub	fp, #36
113fc     A8 C4 BF FD | 	call	#_converttoint
11400     48 4E 05 F1 | 	add	fp, #72
11404     A7 FA 61 FC | 	wrlong	result1, fp
11408     18 4E 85 F1 | 	sub	fp, #24
1140c     A7 12 02 F6 | 	mov	arg01, fp
11410     30 4E 85 F1 | 	sub	fp, #48
11414     90 C4 BF FD | 	call	#_converttoint
11418     4C 4E 05 F1 | 	add	fp, #76
1141c     A7 FA 61 FC | 	wrlong	result1, fp
11420                 | ' 
11420                 | ' t5=pop()
11420                 | ' t4=pop()
11420                 | ' t3=pop()
11420                 | ' t2=pop()
11420                 | ' t1=pop()
11420                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
11420                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
11420     10 4E 85 F1 | 	sub	fp, #16
11424     A7 16 02 FB | 	rdlong	arg03, fp
11428     3C 4E 85 F1 | 	sub	fp, #60
1142c     02 16 66 F0 | 	shl	arg03, #2
11430     52 00 00 FF 
11434     54 E4 05 F1 | 	add	objptr, ##42068
11438     F2 16 02 F1 | 	add	arg03, objptr
1143c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
11440     52 00 00 FF 
11444     54 E4 85 F1 | 	sub	objptr, ##42068
11448     2C 00 90 AD |  if_e	jmp	#LR__1390
1144c     3C 4E 05 F1 | 	add	fp, #60
11450     A7 16 02 FB | 	rdlong	arg03, fp
11454     3C 4E 85 F1 | 	sub	fp, #60
11458     02 16 66 F0 | 	shl	arg03, #2
1145c     52 00 00 FF 
11460     54 E4 05 F1 | 	add	objptr, ##42068
11464     F2 16 02 F1 | 	add	arg03, objptr
11468     0B 13 02 FB | 	rdlong	arg01, arg03
1146c     52 00 00 FF 
11470     54 E4 85 F1 | 	sub	objptr, ##42068
11474     D4 9D B1 FD | 	call	#__system___gc_free
11478                 | LR__1390
11478     3C 4E 05 F1 | 	add	fp, #60
1147c     A7 26 02 FB | 	rdlong	local01, fp
11480     0C 4E 05 F1 | 	add	fp, #12
11484     A7 16 02 FB | 	rdlong	arg03, fp
11488     04 4E 05 F1 | 	add	fp, #4
1148c     A7 14 02 FB | 	rdlong	arg02, fp
11490     0A 17 02 FD | 	qmul	arg03, arg02
11494     02 26 66 F0 | 	shl	local01, #2
11498     52 00 00 FF 
1149c     54 E4 05 F1 | 	add	objptr, ##42068
114a0     F2 26 02 F1 | 	add	local01, objptr
114a4     4C 4E 85 F1 | 	sub	fp, #76
114a8     52 00 00 FF 
114ac     54 E4 85 F1 | 	sub	objptr, ##42068
114b0     18 12 62 FD | 	getqx	arg01
114b4     58 9C B1 FD | 	call	#__system___gc_alloc_managed
114b8     13 FB 61 FC | 	wrlong	result1, local01
114bc                 | ' for y=a3 to a3+a5-1
114bc     44 4E 05 F1 | 	add	fp, #68
114c0     A7 28 02 FB | 	rdlong	local02, fp
114c4     0C 4E 05 F1 | 	add	fp, #12
114c8     A7 28 62 FC | 	wrlong	local02, fp
114cc     0C 4E 85 F1 | 	sub	fp, #12
114d0     A7 2A 02 FB | 	rdlong	local03, fp
114d4     08 4E 05 F1 | 	add	fp, #8
114d8     A7 2C 02 FB | 	rdlong	local04, fp
114dc     4C 4E 85 F1 | 	sub	fp, #76
114e0     16 2B 02 F1 | 	add	local03, local04
114e4                 | LR__1391
114e4     50 4E 05 F1 | 	add	fp, #80
114e8     A7 28 02 FB | 	rdlong	local02, fp
114ec     50 4E 85 F1 | 	sub	fp, #80
114f0     15 29 52 F2 | 	cmps	local02, local03 wc
114f4     F4 00 90 3D |  if_ae	jmp	#LR__1394
114f8                 | '   for x=a2 to a4+a2-1
114f8     40 4E 05 F1 | 	add	fp, #64
114fc     A7 26 02 FB | 	rdlong	local01, fp
11500     14 4E 05 F1 | 	add	fp, #20
11504     A7 26 62 FC | 	wrlong	local01, fp
11508     0C 4E 85 F1 | 	sub	fp, #12
1150c     A7 2E 02 FB | 	rdlong	local05, fp
11510     08 4E 85 F1 | 	sub	fp, #8
11514     A7 30 02 FB | 	rdlong	local06, fp
11518     40 4E 85 F1 | 	sub	fp, #64
1151c     18 2F 02 F1 | 	add	local05, local06
11520                 | LR__1392
11520     54 4E 05 F1 | 	add	fp, #84
11524     A7 26 02 FB | 	rdlong	local01, fp
11528     54 4E 85 F1 | 	sub	fp, #84
1152c     17 27 52 F2 | 	cmps	local01, local05 wc
11530     A0 00 90 3D |  if_ae	jmp	#LR__1393
11534     3C 4E 05 F1 | 	add	fp, #60
11538     A7 30 02 FB | 	rdlong	local06, fp
1153c     18 4E 05 F1 | 	add	fp, #24
11540     A7 2C 02 FB | 	rdlong	local04, fp
11544     14 4E 85 F1 | 	sub	fp, #20
11548     A7 28 02 FB | 	rdlong	local02, fp
1154c     10 4E 05 F1 | 	add	fp, #16
11550     A7 26 02 FB | 	rdlong	local01, fp
11554     13 17 02 F6 | 	mov	arg03, local01
11558     0C 4E 85 F1 | 	sub	fp, #12
1155c     A7 14 02 FB | 	rdlong	arg02, fp
11560     0A 17 82 F1 | 	sub	arg03, arg02
11564     04 4E 05 F1 | 	add	fp, #4
11568     A7 14 02 FB | 	rdlong	arg02, fp
1156c     0A 17 02 FD | 	qmul	arg03, arg02
11570     02 30 66 F0 | 	shl	local06, #2
11574     52 00 00 FF 
11578     54 E4 05 F1 | 	add	objptr, ##42068
1157c     F2 30 02 F1 | 	add	local06, objptr
11580     18 31 02 FB | 	rdlong	local06, local06
11584     16 33 02 F6 | 	mov	local07, local04
11588     14 33 82 F1 | 	sub	local07, local02
1158c     52 00 00 FF 
11590     54 E4 85 F1 | 	sub	objptr, ##42068
11594     F2 12 02 FB | 	rdlong	arg01, objptr
11598     16 13 02 F1 | 	add	arg01, local04
1159c     48 4E 85 F1 | 	sub	fp, #72
115a0     0A 26 66 F0 | 	shl	local01, #10
115a4     13 13 02 F1 | 	add	arg01, local01
115a8     18 2C 62 FD | 	getqx	local04
115ac     16 33 02 F1 | 	add	local07, local04
115b0     18 33 02 F1 | 	add	local07, local06
115b4     14 22 B1 FD | 	call	#_pspeek
115b8     19 FB 41 FC | 	wrbyte	result1, local07
115bc     54 4E 05 F1 | 	add	fp, #84
115c0     A7 32 02 FB | 	rdlong	local07, fp
115c4     01 32 06 F1 | 	add	local07, #1
115c8     A7 32 62 FC | 	wrlong	local07, fp
115cc     54 4E 85 F1 | 	sub	fp, #84
115d0     4C FF 9F FD | 	jmp	#LR__1392
115d4                 | LR__1393
115d4     50 4E 05 F1 | 	add	fp, #80
115d8     A7 32 02 FB | 	rdlong	local07, fp
115dc     01 32 06 F1 | 	add	local07, #1
115e0     A7 32 62 FC | 	wrlong	local07, fp
115e4     50 4E 85 F1 | 	sub	fp, #80
115e8     F8 FE 9F FD | 	jmp	#LR__1391
115ec                 | LR__1394
115ec     3C 4E 05 F1 | 	add	fp, #60
115f0     A7 32 02 FB | 	rdlong	local07, fp
115f4     19 13 02 F6 | 	mov	arg01, local07
115f8     3C 4E 85 F1 | 	sub	fp, #60
115fc     02 32 66 F0 | 	shl	local07, #2
11600     52 00 00 FF 
11604     54 E4 05 F1 | 	add	objptr, ##42068
11608     F2 32 02 F1 | 	add	local07, objptr
1160c     19 15 02 FB | 	rdlong	arg02, local07
11610     52 00 00 FF 
11614     54 E4 85 F1 | 	sub	objptr, ##42068
11618     F0 2E B1 FD | 	call	#_hg010b_spin2_setspriteptr
1161c     3C 4E 05 F1 | 	add	fp, #60
11620     A7 12 02 FB | 	rdlong	arg01, fp
11624     0C 4E 05 F1 | 	add	fp, #12
11628     A7 14 02 FB | 	rdlong	arg02, fp
1162c     04 4E 05 F1 | 	add	fp, #4
11630     A7 16 02 FB | 	rdlong	arg03, fp
11634     4C 4E 85 F1 | 	sub	fp, #76
11638     60 2F B1 FD | 	call	#_hg010b_spin2_setspritesize
1163c     A7 F0 03 F6 | 	mov	ptra, fp
11640     B2 00 A0 FD | 	call	#popregs_
11644                 | _do_defsprite_ret
11644     2D 00 64 FD | 	ret
11648                 | 
11648                 | ' 
11648                 | ' '-------------------- deg
11648                 | ' 
11648                 | ' sub do_deg
11648                 | _do_deg
11648     52 00 00 FF 
1164c     A8 E4 05 F1 | 	add	objptr, ##42152
11650     7D 47 9E FF 
11654     F2 6A 68 FC | 	wrlong	##1016003125, objptr
11658     04 E4 05 F1 | 	add	objptr, #4
1165c     97 32 A1 FF 
11660     F2 C2 69 FC | 	wrlong	##1113927393, objptr
11664     52 00 00 FF 
11668     AC E4 85 F1 | 	sub	objptr, ##42156
1166c                 | _do_deg_ret
1166c     2D 00 64 FD | 	ret
11670                 | 
11670                 | ' 
11670                 | ' '-------------------- delete
11670                 | ' 
11670                 | ' sub do_delete
11670                 | _do_delete
11670     05 4A 05 F6 | 	mov	COUNT_, #5
11674     A8 00 A0 FD | 	call	#pushregs_
11678     48 C0 BF FD | 	call	#_pop
1167c     FE 18 02 F6 | 	mov	arg04, result2
11680     FF 16 02 F6 | 	mov	arg03, result3
11684     FD 26 02 F6 | 	mov	local01, result1
11688     0C 29 02 F6 | 	mov	local02, arg04
1168c     0B 2B 02 F6 | 	mov	local03, arg03
11690                 | ' 
11690                 | ' t1=pop()
11690                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
11690     2B 2A 0E F2 | 	cmp	local03, #43 wz
11694     10 00 90 5D |  if_ne	jmp	#LR__1400
11698     13 13 02 F6 | 	mov	arg01, local01
1169c     9C C1 BF FD | 	call	#_convertstring
116a0     FD 26 02 F6 | 	mov	local01, result1
116a4     1F 2A 06 F6 | 	mov	local03, #31
116a8                 | LR__1400
116a8                 | ' if t1.result_type<>result_string then printerror(15): return
116a8     1F 2A 0E F2 | 	cmp	local03, #31 wz
116ac     10 00 90 AD |  if_e	jmp	#LR__1401
116b0     0F 12 06 F6 | 	mov	arg01, #15
116b4     00 14 06 F6 | 	mov	arg02, #0
116b8     98 1E B1 FD | 	call	#_printerror
116bc     E0 00 90 FD | 	jmp	#LR__1405
116c0                 | LR__1401
116c0                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
116c0     4A 00 00 FF 
116c4     94 E4 05 F1 | 	add	objptr, ##38036
116c8     F2 12 02 FB | 	rdlong	arg01, objptr
116cc     4A 00 00 FF 
116d0     94 E4 85 F1 | 	sub	objptr, ##38036
116d4     B9 01 00 FF 
116d8     A9 15 06 F6 | 	mov	arg02, ##@LR__5922
116dc     B8 58 B1 FD | 	call	#__system___string_cmp
116e0     00 FA 0D F2 | 	cmp	result1, #0 wz
116e4     34 00 90 AD |  if_e	jmp	#LR__1402
116e8     4A 00 00 FF 
116ec     94 E4 05 F1 | 	add	objptr, ##38036
116f0     F2 12 02 FB | 	rdlong	arg01, objptr
116f4     4A 00 00 FF 
116f8     94 E4 85 F1 | 	sub	objptr, ##38036
116fc     B9 01 00 FF 
11700     AB 15 06 F6 | 	mov	arg02, ##@LR__5923
11704     C4 58 B1 FD | 	call	#__system___string_concat
11708     FD 12 02 F6 | 	mov	arg01, result1
1170c     13 15 02 F6 | 	mov	arg02, local01
11710     B8 58 B1 FD | 	call	#__system___string_concat
11714     FD 2C 02 F6 | 	mov	local04, result1
11718     14 00 90 FD | 	jmp	#LR__1403
1171c                 | LR__1402
1171c     B9 01 00 FF 
11720     AD 13 06 F6 | 	mov	arg01, ##@LR__5924
11724     13 15 02 F6 | 	mov	arg02, local01
11728     A0 58 B1 FD | 	call	#__system___string_concat
1172c     FD 2C 02 F6 | 	mov	local04, result1
11730                 | LR__1403
11730     16 13 02 F6 | 	mov	arg01, local04
11734     04 80 B1 FD | 	call	#__system___remove
11738     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1173c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
11740     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
11744     FD 2E 0A F6 | 	mov	local05, result1 wz
11748                 | ' kill filename$
11748                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
11748     54 00 90 AD |  if_e	jmp	#LR__1404
1174c     00 12 06 F6 | 	mov	arg01, #0
11750     44 B5 B1 FD | 	call	#__system___getiolock_0613
11754     FD 12 02 F6 | 	mov	arg01, result1
11758     14 58 B1 FD | 	call	#__system___lockmem
1175c     B9 01 00 FF 
11760     AF 15 06 F6 | 	mov	arg02, ##@LR__5925
11764     00 12 06 F6 | 	mov	arg01, #0
11768     00 16 06 F6 | 	mov	arg03, #0
1176c     F4 64 B1 FD | 	call	#__system___basic_print_string
11770     00 12 06 F6 | 	mov	arg01, #0
11774     17 15 02 F6 | 	mov	arg02, local05
11778     00 16 06 F6 | 	mov	arg03, #0
1177c     0A 18 06 F6 | 	mov	arg04, #10
11780     24 65 B1 FD | 	call	#__system___basic_print_integer
11784     00 12 06 F6 | 	mov	arg01, #0
11788     0A 14 06 F6 | 	mov	arg02, #10
1178c     00 16 06 F6 | 	mov	arg03, #0
11790     78 64 B1 FD | 	call	#__system___basic_print_char
11794     00 12 06 F6 | 	mov	arg01, #0
11798     FC B4 B1 FD | 	call	#__system___getiolock_0613
1179c     FD 00 68 FC | 	wrlong	#0, result1
117a0                 | LR__1404
117a0                 | LR__1405
117a0     A7 F0 03 F6 | 	mov	ptra, fp
117a4     B2 00 A0 FD | 	call	#popregs_
117a8                 | _do_delete_ret
117a8     2D 00 64 FD | 	ret
117ac                 | 
117ac                 | ' 
117ac                 | ' '-------------------- dir
117ac                 | ' 
117ac                 | ' sub do_dir
117ac                 | _do_dir
117ac     13 4A 05 F6 | 	mov	COUNT_, #19
117b0     A8 00 A0 FD | 	call	#pushregs_
117b4     01 00 00 FF 
117b8     38 F0 07 F1 | 	add	ptra, ##568
117bc                 | ' 
117bc                 | ' print "Current directory: "; currentdir$ 
117bc     00 12 06 F6 | 	mov	arg01, #0
117c0     D4 B4 B1 FD | 	call	#__system___getiolock_0613
117c4     FD 12 02 F6 | 	mov	arg01, result1
117c8     A4 57 B1 FD | 	call	#__system___lockmem
117cc     B9 01 00 FF 
117d0     E7 15 06 F6 | 	mov	arg02, ##@LR__5926
117d4     00 12 06 F6 | 	mov	arg01, #0
117d8     00 16 06 F6 | 	mov	arg03, #0
117dc     84 64 B1 FD | 	call	#__system___basic_print_string
117e0     4A 00 00 FF 
117e4     94 E4 05 F1 | 	add	objptr, ##38036
117e8     F2 14 02 FB | 	rdlong	arg02, objptr
117ec     4A 00 00 FF 
117f0     94 E4 85 F1 | 	sub	objptr, ##38036
117f4     00 12 06 F6 | 	mov	arg01, #0
117f8     00 16 06 F6 | 	mov	arg03, #0
117fc     64 64 B1 FD | 	call	#__system___basic_print_string
11800     00 12 06 F6 | 	mov	arg01, #0
11804     0A 14 06 F6 | 	mov	arg02, #10
11808     00 16 06 F6 | 	mov	arg03, #0
1180c     FC 63 B1 FD | 	call	#__system___basic_print_char
11810     01 26 06 F6 | 	mov	local01, #1
11814     00 12 06 F6 | 	mov	arg01, #0
11818     7C B4 B1 FD | 	call	#__system___getiolock_0613
1181c     FD 00 68 FC | 	wrlong	#0, result1
11820     00 28 06 F6 | 	mov	local02, #0
11824     00 2A 06 F6 | 	mov	local03, #0
11828                 | ' px=0
11828                 | ' for i=0 to 127: filelist(i)="" : next i
11828     00 2C 06 F6 | 	mov	local04, #0
1182c     1C 4E 05 F1 | 	add	fp, #28
11830     97 12 48 FB | 	callpa	#(@LR__1411-@LR__1410)>>2,fcache_load_ptr_
11834                 | LR__1410
11834     16 2F 02 F6 | 	mov	local05, local04
11838     02 2E 66 F0 | 	shl	local05, #2
1183c     A7 2E 02 F1 | 	add	local05, fp
11840     B9 01 00 FF 
11844     FB 31 06 F6 | 	mov	local06, ##@LR__5927
11848     17 31 62 FC | 	wrlong	local06, local05
1184c     01 2C 06 F1 | 	add	local04, #1
11850     80 2C 56 F2 | 	cmps	local04, #128 wc
11854     DC FF 9F CD |  if_b	jmp	#LR__1410
11858                 | LR__1411
11858     1C 4E 85 F1 | 	sub	fp, #28
1185c     B9 01 00 FF 
11860     FC 13 06 F6 | 	mov	arg01, ##@LR__5928
11864     10 14 06 F6 | 	mov	arg02, #16
11868     64 B5 B1 FD | 	call	#__system___basic_dir
1186c     FD 32 02 F6 | 	mov	local07, result1
11870     00 34 06 F6 | 	mov	local08, #0
11874                 | ' filename=dir$("*", fbDirectory)
11874                 | ' n=0
11874                 | ' while filename <> "" andalso filename <> nil andalso n<128
11874                 | LR__1412
11874     B9 01 00 FF 
11878     FE 37 06 F6 | 	mov	local09, ##@LR__5929
1187c     19 13 02 F6 | 	mov	arg01, local07
11880     1B 15 02 F6 | 	mov	arg02, local09
11884     10 57 B1 FD | 	call	#__system___string_cmp
11888     00 FA 0D F2 | 	cmp	result1, #0 wz
1188c     68 00 90 AD |  if_e	jmp	#LR__1413
11890     00 36 06 F6 | 	mov	local09, #0
11894     19 13 02 F6 | 	mov	arg01, local07
11898     00 14 06 F6 | 	mov	arg02, #0
1189c     F8 56 B1 FD | 	call	#__system___string_cmp
118a0     00 FA 0D F2 | 	cmp	result1, #0 wz
118a4     50 00 90 AD |  if_e	jmp	#LR__1413
118a8     80 34 56 F2 | 	cmps	local08, #128 wc
118ac     48 00 90 3D |  if_ae	jmp	#LR__1413
118b0     B9 01 00 FF 
118b4     FF 13 06 F6 | 	mov	arg01, ##@LR__5930
118b8     19 15 02 F6 | 	mov	arg02, local07
118bc     0C 57 B1 FD | 	call	#__system___string_concat
118c0     FD 32 02 F6 | 	mov	local07, result1
118c4     1A 2F 02 F6 | 	mov	local05, local08
118c8     02 2E 66 F0 | 	shl	local05, #2
118cc     1C 4E 05 F1 | 	add	fp, #28
118d0     A7 2E 02 F1 | 	add	local05, fp
118d4     17 33 62 FC | 	wrlong	local07, local05
118d8     01 34 06 F1 | 	add	local08, #1
118dc     00 2E 06 F6 | 	mov	local05, #0
118e0     00 12 06 F6 | 	mov	arg01, #0
118e4     00 14 06 F6 | 	mov	arg02, #0
118e8     1C 4E 85 F1 | 	sub	fp, #28
118ec     E0 B4 B1 FD | 	call	#__system___basic_dir
118f0     FD 32 02 F6 | 	mov	local07, result1
118f4     7C FF 9F FD | 	jmp	#LR__1412
118f8                 | LR__1413
118f8                 | ' for i=0 to n-1			' now sort this
118f8     00 2C 06 F6 | 	mov	local04, #0
118fc     1A 39 02 F6 | 	mov	local10, local08
11900                 | LR__1414
11900     1C 2D 52 F2 | 	cmps	local04, local10 wc
11904     DC 00 90 3D |  if_ae	jmp	#LR__1418
11908     00 3A 06 F6 | 	mov	local11, #0
1190c                 | '   swapped=false
1190c                 | '   for j=0 to n-i-2
1190c     00 3C 06 F6 | 	mov	local12, #0
11910     1A 3F 02 F6 | 	mov	local13, local08
11914     16 3F 82 F1 | 	sub	local13, local04
11918     01 3E 86 F1 | 	sub	local13, #1
1191c                 | LR__1415
1191c     1F 3D 52 F2 | 	cmps	local12, local13 wc
11920     B0 00 90 3D |  if_ae	jmp	#LR__1417
11924                 | '     if filelist(j) > filelist(j+1) then
11924     1E 37 02 F6 | 	mov	local09, local12
11928     02 36 66 F0 | 	shl	local09, #2
1192c     1C 4E 05 F1 | 	add	fp, #28
11930     A7 36 02 F1 | 	add	local09, fp
11934     1B 13 02 FB | 	rdlong	arg01, local09
11938     1E 37 02 F6 | 	mov	local09, local12
1193c     01 36 06 F1 | 	add	local09, #1
11940     1B 31 02 F6 | 	mov	local06, local09
11944     02 30 66 F0 | 	shl	local06, #2
11948     A7 26 02 F6 | 	mov	local01, fp
1194c     A7 30 02 F1 | 	add	local06, fp
11950     18 2F 02 FB | 	rdlong	local05, local06
11954     17 15 02 F6 | 	mov	arg02, local05
11958     1C 4E 85 F1 | 	sub	fp, #28
1195c     38 56 B1 FD | 	call	#__system___string_cmp
11960     01 FA 55 F2 | 	cmps	result1, #1 wc
11964     64 00 90 CD |  if_b	jmp	#LR__1416
11968     1E 37 02 F6 | 	mov	local09, local12
1196c     01 36 06 F1 | 	add	local09, #1
11970     02 36 66 F0 | 	shl	local09, #2
11974     1C 4E 05 F1 | 	add	fp, #28
11978     A7 36 02 F1 | 	add	local09, fp
1197c     1B 3B 02 FB | 	rdlong	local11, local09
11980     1E 31 02 F6 | 	mov	local06, local12
11984     02 30 66 F0 | 	shl	local06, #2
11988     A7 30 02 F1 | 	add	local06, fp
1198c     18 2F 02 FB | 	rdlong	local05, local06
11990     1E 37 02 F6 | 	mov	local09, local12
11994     1B 31 02 F6 | 	mov	local06, local09
11998     02 30 66 F0 | 	shl	local06, #2
1199c     A7 26 02 F6 | 	mov	local01, fp
119a0     A7 30 02 F1 | 	add	local06, fp
119a4     18 3B 62 FC | 	wrlong	local11, local06
119a8     1E 29 02 F6 | 	mov	local02, local12
119ac     01 28 06 F1 | 	add	local02, #1
119b0     14 41 02 F6 | 	mov	local14, local02
119b4     02 40 66 F0 | 	shl	local14, #2
119b8     A7 42 02 F6 | 	mov	local15, fp
119bc     A7 40 02 F1 | 	add	local14, fp
119c0     20 2F 62 FC | 	wrlong	local05, local14
119c4     01 3A 66 F6 | 	neg	local11, #1
119c8     1C 4E 85 F1 | 	sub	fp, #28
119cc                 | LR__1416
119cc     01 3C 06 F1 | 	add	local12, #1
119d0     48 FF 9F FD | 	jmp	#LR__1415
119d4                 | LR__1417
119d4                 | ' if not swapped then exit for
119d4     1D 45 22 F6 | 	not	local16, local11
119d8     00 44 0E F2 | 	cmp	local16, #0 wz
119dc     01 2C 06 A1 |  if_e	add	local04, #1
119e0     1C FF 9F AD |  if_e	jmp	#LR__1414
119e4                 | LR__1418
119e4                 | ' for i=0 to n-1
119e4     00 2C 06 F6 | 	mov	local04, #0
119e8     1A 47 02 F6 | 	mov	local17, local08
119ec                 | LR__1419
119ec     23 2D 52 F2 | 	cmps	local04, local17 wc
119f0     94 00 90 3D |  if_ae	jmp	#LR__1421
119f4                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
119f4     00 12 06 F6 | 	mov	arg01, #0
119f8     9C B2 B1 FD | 	call	#__system___getiolock_0613
119fc     FD 12 02 F6 | 	mov	arg01, result1
11a00     6C 55 B1 FD | 	call	#__system___lockmem
11a04     16 29 02 F6 | 	mov	local02, local04
11a08     02 28 66 F0 | 	shl	local02, #2
11a0c     1C 4E 05 F1 | 	add	fp, #28
11a10     A7 40 02 F6 | 	mov	local14, fp
11a14     A7 28 02 F1 | 	add	local02, fp
11a18     14 15 02 FB | 	rdlong	arg02, local02
11a1c     00 26 06 F6 | 	mov	local01, #0
11a20     00 12 06 F6 | 	mov	arg01, #0
11a24     00 16 06 F6 | 	mov	arg03, #0
11a28     1C 4E 85 F1 | 	sub	fp, #28
11a2c     34 62 B1 FD | 	call	#__system___basic_print_string
11a30     00 12 06 F6 | 	mov	arg01, #0
11a34     60 B2 B1 FD | 	call	#__system___getiolock_0613
11a38     FD 00 68 FC | 	wrlong	#0, result1
11a3c     40 2A 06 F1 | 	add	local03, #64
11a40     15 13 02 F6 | 	mov	arg01, local03
11a44     A0 37 B1 FD | 	call	#_hg010b_spin2_setcursorx
11a48     00 2B 56 F2 | 	cmps	local03, #256 wc
11a4c     30 00 90 CD |  if_b	jmp	#LR__1420
11a50     00 2A 06 F6 | 	mov	local03, #0
11a54     00 12 06 F6 | 	mov	arg01, #0
11a58     3C B2 B1 FD | 	call	#__system___getiolock_0613
11a5c     FD 12 02 F6 | 	mov	arg01, result1
11a60     0C 55 B1 FD | 	call	#__system___lockmem
11a64     00 12 06 F6 | 	mov	arg01, #0
11a68     0A 14 06 F6 | 	mov	arg02, #10
11a6c     00 16 06 F6 | 	mov	arg03, #0
11a70     98 61 B1 FD | 	call	#__system___basic_print_char
11a74     00 12 06 F6 | 	mov	arg01, #0
11a78     1C B2 B1 FD | 	call	#__system___getiolock_0613
11a7c     FD 00 68 FC | 	wrlong	#0, result1
11a80                 | LR__1420
11a80     01 2C 06 F1 | 	add	local04, #1
11a84     64 FF 9F FD | 	jmp	#LR__1419
11a88                 | LR__1421
11a88                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11a88     80 34 56 F2 | 	cmps	local08, #128 wc
11a8c     44 00 90 CD |  if_b	jmp	#LR__1422
11a90     00 12 06 F6 | 	mov	arg01, #0
11a94     00 B2 B1 FD | 	call	#__system___getiolock_0613
11a98     FD 12 02 F6 | 	mov	arg01, result1
11a9c     D0 54 B1 FD | 	call	#__system___lockmem
11aa0     BA 01 00 FF 
11aa4     06 14 06 F6 | 	mov	arg02, ##@LR__5931
11aa8     00 12 06 F6 | 	mov	arg01, #0
11aac     00 16 06 F6 | 	mov	arg03, #0
11ab0     B0 61 B1 FD | 	call	#__system___basic_print_string
11ab4     00 12 06 F6 | 	mov	arg01, #0
11ab8     0A 14 06 F6 | 	mov	arg02, #10
11abc     00 16 06 F6 | 	mov	arg03, #0
11ac0     48 61 B1 FD | 	call	#__system___basic_print_char
11ac4     00 12 06 F6 | 	mov	arg01, #0
11ac8     CC B1 B1 FD | 	call	#__system___getiolock_0613
11acc     FD 00 68 FC | 	wrlong	#0, result1
11ad0     00 26 06 F6 | 	mov	local01, #0
11ad4                 | LR__1422
11ad4                 | ' print
11ad4     00 12 06 F6 | 	mov	arg01, #0
11ad8     BC B1 B1 FD | 	call	#__system___getiolock_0613
11adc     FD 12 02 F6 | 	mov	arg01, result1
11ae0     8C 54 B1 FD | 	call	#__system___lockmem
11ae4     00 12 06 F6 | 	mov	arg01, #0
11ae8     0A 14 06 F6 | 	mov	arg02, #10
11aec     00 16 06 F6 | 	mov	arg03, #0
11af0     18 61 B1 FD | 	call	#__system___basic_print_char
11af4     00 12 06 F6 | 	mov	arg01, #0
11af8     9C B1 B1 FD | 	call	#__system___getiolock_0613
11afc     FD 00 68 FC | 	wrlong	#0, result1
11b00     00 30 06 F6 | 	mov	local06, #0
11b04     00 34 06 F6 | 	mov	local08, #0
11b08     00 2A 06 F6 | 	mov	local03, #0
11b0c                 | ' return cursor_y
11b0c     3E E4 05 F1 | 	add	objptr, #62
11b10     F2 48 C2 FA | 	rdbyte	local18, objptr
11b14     3E E4 85 F1 | 	sub	objptr, #62
11b18     BA 01 00 FF 
11b1c     38 12 06 F6 | 	mov	arg01, ##@LR__5932
11b20     21 14 06 F6 | 	mov	arg02, #33
11b24     A8 B2 B1 FD | 	call	#__system___basic_dir
11b28     FD 32 02 F6 | 	mov	local07, result1
11b2c                 | ' n=0
11b2c                 | ' px=0: py=v.getcursory()
11b2c                 | ' filename = dir$("*", fbNormal )   
11b2c                 | ' do while filename <> "" andalso filename <> nil andalso n<128
11b2c                 | LR__1423
11b2c     BA 01 00 FF 
11b30     3A 36 06 F6 | 	mov	local09, ##@LR__5933
11b34     19 13 02 F6 | 	mov	arg01, local07
11b38     1B 15 02 F6 | 	mov	arg02, local09
11b3c     58 54 B1 FD | 	call	#__system___string_cmp
11b40     00 FA 0D F2 | 	cmp	result1, #0 wz
11b44     54 00 90 AD |  if_e	jmp	#LR__1424
11b48     00 36 06 F6 | 	mov	local09, #0
11b4c     19 13 02 F6 | 	mov	arg01, local07
11b50     00 14 06 F6 | 	mov	arg02, #0
11b54     40 54 B1 FD | 	call	#__system___string_cmp
11b58     00 FA 0D F2 | 	cmp	result1, #0 wz
11b5c     3C 00 90 AD |  if_e	jmp	#LR__1424
11b60     80 34 56 F2 | 	cmps	local08, #128 wc
11b64     34 00 90 3D |  if_ae	jmp	#LR__1424
11b68     1A 2F 02 F6 | 	mov	local05, local08
11b6c     02 2E 66 F0 | 	shl	local05, #2
11b70     1C 4E 05 F1 | 	add	fp, #28
11b74     A7 2E 02 F1 | 	add	local05, fp
11b78     17 33 62 FC | 	wrlong	local07, local05
11b7c     01 34 06 F1 | 	add	local08, #1
11b80     00 2E 06 F6 | 	mov	local05, #0
11b84     00 12 06 F6 | 	mov	arg01, #0
11b88     00 14 06 F6 | 	mov	arg02, #0
11b8c     1C 4E 85 F1 | 	sub	fp, #28
11b90     3C B2 B1 FD | 	call	#__system___basic_dir
11b94     FD 32 02 F6 | 	mov	local07, result1
11b98     90 FF 9F FD | 	jmp	#LR__1423
11b9c                 | LR__1424
11b9c                 | ' for i =0 to n-1
11b9c     00 2C 06 F6 | 	mov	local04, #0
11ba0                 | LR__1425
11ba0     1A 2D 52 F2 | 	cmps	local04, local08 wc
11ba4     D8 00 90 3D |  if_ae	jmp	#LR__1429
11ba8     00 3A 06 F6 | 	mov	local11, #0
11bac                 | '   swapped=false
11bac                 | '   for j=0 to n-i-2
11bac     00 3C 06 F6 | 	mov	local12, #0
11bb0     1A 4B 02 F6 | 	mov	local19, local08
11bb4     16 4B 82 F1 | 	sub	local19, local04
11bb8     01 4A 86 F1 | 	sub	local19, #1
11bbc                 | LR__1426
11bbc     25 3D 52 F2 | 	cmps	local12, local19 wc
11bc0     AC 00 90 3D |  if_ae	jmp	#LR__1428
11bc4                 | '     if filelist(j) > filelist(j+1) then
11bc4     1E 37 02 F6 | 	mov	local09, local12
11bc8     02 36 66 F0 | 	shl	local09, #2
11bcc     1C 4E 05 F1 | 	add	fp, #28
11bd0     A7 36 02 F1 | 	add	local09, fp
11bd4     1B 13 02 FB | 	rdlong	arg01, local09
11bd8     1E 37 02 F6 | 	mov	local09, local12
11bdc     01 36 06 F1 | 	add	local09, #1
11be0     1B 31 02 F6 | 	mov	local06, local09
11be4     02 30 66 F0 | 	shl	local06, #2
11be8     A7 26 02 F6 | 	mov	local01, fp
11bec     A7 30 02 F1 | 	add	local06, fp
11bf0     18 2F 02 FB | 	rdlong	local05, local06
11bf4     17 15 02 F6 | 	mov	arg02, local05
11bf8     1C 4E 85 F1 | 	sub	fp, #28
11bfc     98 53 B1 FD | 	call	#__system___string_cmp
11c00     01 FA 55 F2 | 	cmps	result1, #1 wc
11c04     60 00 90 CD |  if_b	jmp	#LR__1427
11c08     1E 37 02 F6 | 	mov	local09, local12
11c0c     01 36 06 F1 | 	add	local09, #1
11c10     02 36 66 F0 | 	shl	local09, #2
11c14     1C 4E 05 F1 | 	add	fp, #28
11c18     A7 36 02 F1 | 	add	local09, fp
11c1c     1B 45 02 FB | 	rdlong	local16, local09
11c20     1E 31 02 F6 | 	mov	local06, local12
11c24     02 30 66 F0 | 	shl	local06, #2
11c28     A7 30 02 F1 | 	add	local06, fp
11c2c     18 2F 02 FB | 	rdlong	local05, local06
11c30     1E 37 02 F6 | 	mov	local09, local12
11c34     1B 31 02 F6 | 	mov	local06, local09
11c38     02 30 66 F0 | 	shl	local06, #2
11c3c     A7 26 02 F6 | 	mov	local01, fp
11c40     A7 30 02 F1 | 	add	local06, fp
11c44     18 45 62 FC | 	wrlong	local16, local06
11c48     1E 41 02 F6 | 	mov	local14, local12
11c4c     01 40 06 F1 | 	add	local14, #1
11c50     02 40 66 F0 | 	shl	local14, #2
11c54     A7 42 02 F6 | 	mov	local15, fp
11c58     A7 40 02 F1 | 	add	local14, fp
11c5c     20 2F 62 FC | 	wrlong	local05, local14
11c60     01 3A 66 F6 | 	neg	local11, #1
11c64     1C 4E 85 F1 | 	sub	fp, #28
11c68                 | LR__1427
11c68     01 3C 06 F1 | 	add	local12, #1
11c6c     4C FF 9F FD | 	jmp	#LR__1426
11c70                 | LR__1428
11c70                 | ' if not swapped then exit for
11c70     1D 45 22 F6 | 	not	local16, local11
11c74     00 44 0E F2 | 	cmp	local16, #0 wz
11c78     01 2C 06 A1 |  if_e	add	local04, #1
11c7c     20 FF 9F AD |  if_e	jmp	#LR__1425
11c80                 | LR__1429
11c80                 | ' for i=0 to n-1
11c80     00 2C 06 F6 | 	mov	local04, #0
11c84                 | LR__1430
11c84     1A 2D 52 F2 | 	cmps	local04, local08 wc
11c88     8C 00 90 3D |  if_ae	jmp	#LR__1432
11c8c                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11c8c     00 12 06 F6 | 	mov	arg01, #0
11c90     04 B0 B1 FD | 	call	#__system___getiolock_0613
11c94     FD 12 02 F6 | 	mov	arg01, result1
11c98     D4 52 B1 FD | 	call	#__system___lockmem
11c9c     16 29 02 F6 | 	mov	local02, local04
11ca0     02 28 66 F0 | 	shl	local02, #2
11ca4     1C 4E 05 F1 | 	add	fp, #28
11ca8     A7 28 02 F1 | 	add	local02, fp
11cac     14 15 02 FB | 	rdlong	arg02, local02
11cb0     00 12 06 F6 | 	mov	arg01, #0
11cb4     00 16 06 F6 | 	mov	arg03, #0
11cb8     1C 4E 85 F1 | 	sub	fp, #28
11cbc     A4 5F B1 FD | 	call	#__system___basic_print_string
11cc0     00 12 06 F6 | 	mov	arg01, #0
11cc4     D0 AF B1 FD | 	call	#__system___getiolock_0613
11cc8     FD 00 68 FC | 	wrlong	#0, result1
11ccc     40 2A 06 F1 | 	add	local03, #64
11cd0     15 13 02 F6 | 	mov	arg01, local03
11cd4     10 35 B1 FD | 	call	#_hg010b_spin2_setcursorx
11cd8     00 2B 56 F2 | 	cmps	local03, #256 wc
11cdc     30 00 90 CD |  if_b	jmp	#LR__1431
11ce0     00 2A 06 F6 | 	mov	local03, #0
11ce4     00 12 06 F6 | 	mov	arg01, #0
11ce8     AC AF B1 FD | 	call	#__system___getiolock_0613
11cec     FD 12 02 F6 | 	mov	arg01, result1
11cf0     7C 52 B1 FD | 	call	#__system___lockmem
11cf4     00 12 06 F6 | 	mov	arg01, #0
11cf8     0A 14 06 F6 | 	mov	arg02, #10
11cfc     00 16 06 F6 | 	mov	arg03, #0
11d00     08 5F B1 FD | 	call	#__system___basic_print_char
11d04     00 12 06 F6 | 	mov	arg01, #0
11d08     8C AF B1 FD | 	call	#__system___getiolock_0613
11d0c     FD 00 68 FC | 	wrlong	#0, result1
11d10                 | LR__1431
11d10     01 2C 06 F1 | 	add	local04, #1
11d14     6C FF 9F FD | 	jmp	#LR__1430
11d18                 | LR__1432
11d18                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11d18     80 34 56 F2 | 	cmps	local08, #128 wc
11d1c     40 00 90 CD |  if_b	jmp	#LR__1433
11d20     00 12 06 F6 | 	mov	arg01, #0
11d24     70 AF B1 FD | 	call	#__system___getiolock_0613
11d28     FD 12 02 F6 | 	mov	arg01, result1
11d2c     40 52 B1 FD | 	call	#__system___lockmem
11d30     BA 01 00 FF 
11d34     3B 14 06 F6 | 	mov	arg02, ##@LR__5934
11d38     00 12 06 F6 | 	mov	arg01, #0
11d3c     00 16 06 F6 | 	mov	arg03, #0
11d40     20 5F B1 FD | 	call	#__system___basic_print_string
11d44     00 12 06 F6 | 	mov	arg01, #0
11d48     0A 14 06 F6 | 	mov	arg02, #10
11d4c     00 16 06 F6 | 	mov	arg03, #0
11d50     B8 5E B1 FD | 	call	#__system___basic_print_char
11d54     00 12 06 F6 | 	mov	arg01, #0
11d58     3C AF B1 FD | 	call	#__system___getiolock_0613
11d5c     FD 00 68 FC | 	wrlong	#0, result1
11d60                 | LR__1433
11d60                 | ' print
11d60     00 12 06 F6 | 	mov	arg01, #0
11d64     30 AF B1 FD | 	call	#__system___getiolock_0613
11d68     FD 12 02 F6 | 	mov	arg01, result1
11d6c     00 52 B1 FD | 	call	#__system___lockmem
11d70     00 12 06 F6 | 	mov	arg01, #0
11d74     0A 14 06 F6 | 	mov	arg02, #10
11d78     00 16 06 F6 | 	mov	arg03, #0
11d7c     8C 5E B1 FD | 	call	#__system___basic_print_char
11d80     00 12 06 F6 | 	mov	arg01, #0
11d84     10 AF B1 FD | 	call	#__system___getiolock_0613
11d88     FD 00 68 FC | 	wrlong	#0, result1
11d8c     A7 F0 03 F6 | 	mov	ptra, fp
11d90     B2 00 A0 FD | 	call	#popregs_
11d94                 | _do_dir_ret
11d94     2D 00 64 FD | 	ret
11d98                 | 
11d98                 | ' 
11d98                 | ' '-------------------- dpeek
11d98                 | ' 
11d98                 | ' sub do_dpeek
11d98                 | _do_dpeek
11d98     00 4A 05 F6 | 	mov	COUNT_, #0
11d9c     A8 00 A0 FD | 	call	#pushregs_
11da0     14 F0 07 F1 | 	add	ptra, #20
11da4     1C B9 BF FD | 	call	#_pop
11da8     A7 FA 61 FC | 	wrlong	result1, fp
11dac     04 4E 05 F1 | 	add	fp, #4
11db0     A7 FC 61 FC | 	wrlong	result2, fp
11db4     04 4E 05 F1 | 	add	fp, #4
11db8     A7 FE 61 FC | 	wrlong	result3, fp
11dbc     08 4E 85 F1 | 	sub	fp, #8
11dc0     A7 12 02 F6 | 	mov	arg01, fp
11dc4     E0 BA BF FD | 	call	#_converttoint
11dc8     0C 4E 05 F1 | 	add	fp, #12
11dcc     A7 FA 61 FC | 	wrlong	result1, fp
11dd0                 | ' 
11dd0                 | ' t1=pop()
11dd0                 | ' a=converttoint(t1)
11dd0                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
11dd0     0C 4E 85 F1 | 	sub	fp, #12
11dd4     00 04 00 FF 
11dd8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
11ddc     1C 00 90 3D |  if_ae	jmp	#LR__1440
11de0     0C 4E 05 F1 | 	add	fp, #12
11de4     A7 12 02 FB | 	rdlong	arg01, fp
11de8     09 FB E1 FA | 	rdword	result1, arg01
11dec     04 4E 05 F1 | 	add	fp, #4
11df0     A7 FA 61 FC | 	wrlong	result1, fp
11df4     10 4E 85 F1 | 	sub	fp, #16
11df8     1C 00 90 FD | 	jmp	#LR__1441
11dfc                 | LR__1440
11dfc     0C 4E 05 F1 | 	add	fp, #12
11e00     A7 12 02 FB | 	rdlong	arg01, fp
11e04     0C 4E 85 F1 | 	sub	fp, #12
11e08     70 1A B1 FD | 	call	#_psdpeek
11e0c     10 4E 05 F1 | 	add	fp, #16
11e10     A7 FA 61 FC | 	wrlong	result1, fp
11e14     10 4E 85 F1 | 	sub	fp, #16
11e18                 | LR__1441
11e18     08 4E 05 F1 | 	add	fp, #8
11e1c     A7 3A 68 FC | 	wrlong	#29, fp
11e20     08 4E 05 F1 | 	add	fp, #8
11e24     A7 12 02 FB | 	rdlong	arg01, fp
11e28     10 4E 85 F1 | 	sub	fp, #16
11e2c     A7 12 62 FC | 	wrlong	arg01, fp
11e30     A7 12 02 F6 | 	mov	arg01, fp
11e34     24 B9 BF FD | 	call	#_push
11e38     A7 F0 03 F6 | 	mov	ptra, fp
11e3c     B2 00 A0 FD | 	call	#popregs_
11e40                 | _do_dpeek_ret
11e40     2D 00 64 FD | 	ret
11e44                 | 
11e44                 | ' 
11e44                 | ' '-------------------- dpoke
11e44                 | ' 
11e44                 | ' sub do_dpoke
11e44                 | _do_dpoke
11e44     01 4A 05 F6 | 	mov	COUNT_, #1
11e48     A8 00 A0 FD | 	call	#pushregs_
11e4c     20 F0 07 F1 | 	add	ptra, #32
11e50     70 B8 BF FD | 	call	#_pop
11e54     FD 14 02 F6 | 	mov	arg02, result1
11e58     FE 12 02 F6 | 	mov	arg01, result2
11e5c     FF 26 02 F6 | 	mov	local01, result3
11e60     A7 14 62 FC | 	wrlong	arg02, fp
11e64     04 4E 05 F1 | 	add	fp, #4
11e68     A7 12 62 FC | 	wrlong	arg01, fp
11e6c     04 4E 05 F1 | 	add	fp, #4
11e70     A7 26 62 FC | 	wrlong	local01, fp
11e74     08 4E 85 F1 | 	sub	fp, #8
11e78     48 B8 BF FD | 	call	#_pop
11e7c     FF 26 02 F6 | 	mov	local01, result3
11e80     0C 4E 05 F1 | 	add	fp, #12
11e84     A7 FA 61 FC | 	wrlong	result1, fp
11e88     04 4E 05 F1 | 	add	fp, #4
11e8c     A7 FC 61 FC | 	wrlong	result2, fp
11e90     04 4E 05 F1 | 	add	fp, #4
11e94     A7 26 62 FC | 	wrlong	local01, fp
11e98     08 4E 85 F1 | 	sub	fp, #8
11e9c     A7 12 02 F6 | 	mov	arg01, fp
11ea0     0C 4E 85 F1 | 	sub	fp, #12
11ea4     00 BA BF FD | 	call	#_converttoint
11ea8     18 4E 05 F1 | 	add	fp, #24
11eac     A7 FA 61 FC | 	wrlong	result1, fp
11eb0     18 4E 85 F1 | 	sub	fp, #24
11eb4     A7 12 02 F6 | 	mov	arg01, fp
11eb8     EC B9 BF FD | 	call	#_converttoint
11ebc     1C 4E 05 F1 | 	add	fp, #28
11ec0     A7 FA 61 FC | 	wrlong	result1, fp
11ec4                 | ' 
11ec4                 | ' t1=pop() 'value
11ec4                 | ' t2=pop() 
11ec4                 | ' a=converttoint(t2) : v=converttoint(t1)
11ec4                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
11ec4     04 4E 85 F1 | 	sub	fp, #4
11ec8     A7 26 02 FB | 	rdlong	local01, fp
11ecc     18 4E 85 F1 | 	sub	fp, #24
11ed0     00 04 00 FF 
11ed4     00 26 16 F2 | 	cmp	local01, ##524288 wc
11ed8     1C 00 90 3D |  if_ae	jmp	#LR__1450
11edc     18 4E 05 F1 | 	add	fp, #24
11ee0     A7 12 02 FB | 	rdlong	arg01, fp
11ee4     04 4E 05 F1 | 	add	fp, #4
11ee8     A7 14 02 FB | 	rdlong	arg02, fp
11eec     1C 4E 85 F1 | 	sub	fp, #28
11ef0     09 15 52 FC | 	wrword	arg02, arg01
11ef4     18 00 90 FD | 	jmp	#LR__1451
11ef8                 | LR__1450
11ef8     18 4E 05 F1 | 	add	fp, #24
11efc     A7 12 02 FB | 	rdlong	arg01, fp
11f00     04 4E 05 F1 | 	add	fp, #4
11f04     A7 14 02 FB | 	rdlong	arg02, fp
11f08     1C 4E 85 F1 | 	sub	fp, #28
11f0c     2C 18 B1 FD | 	call	#_psdpoke
11f10                 | LR__1451
11f10     A7 F0 03 F6 | 	mov	ptra, fp
11f14     B2 00 A0 FD | 	call	#popregs_
11f18                 | _do_dpoke_ret
11f18     2D 00 64 FD | 	ret
11f1c                 | 
11f1c                 | ' '-------------------- draw
11f1c                 | ' 
11f1c                 | ' sub do_draw
11f1c                 | _do_draw
11f1c     00 4A 05 F6 | 	mov	COUNT_, #0
11f20     A8 00 A0 FD | 	call	#pushregs_
11f24     20 F0 07 F1 | 	add	ptra, #32
11f28     98 B7 BF FD | 	call	#_pop
11f2c     FD 1A 02 F6 | 	mov	arg05, result1
11f30     FE 18 02 F6 | 	mov	arg04, result2
11f34     FF 16 02 F6 | 	mov	arg03, result3
11f38     0C 4E 05 F1 | 	add	fp, #12
11f3c     A7 1A 62 FC | 	wrlong	arg05, fp
11f40     04 4E 05 F1 | 	add	fp, #4
11f44     A7 18 62 FC | 	wrlong	arg04, fp
11f48     04 4E 05 F1 | 	add	fp, #4
11f4c     A7 16 62 FC | 	wrlong	arg03, fp
11f50     14 4E 85 F1 | 	sub	fp, #20
11f54     6C B7 BF FD | 	call	#_pop
11f58     FF 1A 02 F6 | 	mov	arg05, result3
11f5c     A7 FA 61 FC | 	wrlong	result1, fp
11f60     04 4E 05 F1 | 	add	fp, #4
11f64     A7 FC 61 FC | 	wrlong	result2, fp
11f68     04 4E 05 F1 | 	add	fp, #4
11f6c     A7 1A 62 FC | 	wrlong	arg05, fp
11f70     08 4E 85 F1 | 	sub	fp, #8
11f74     A7 12 02 F6 | 	mov	arg01, fp
11f78     2C B9 BF FD | 	call	#_converttoint
11f7c     18 4E 05 F1 | 	add	fp, #24
11f80     A7 FA 61 FC | 	wrlong	result1, fp
11f84     0C 4E 85 F1 | 	sub	fp, #12
11f88     A7 12 02 F6 | 	mov	arg01, fp
11f8c     0C 4E 85 F1 | 	sub	fp, #12
11f90     14 B9 BF FD | 	call	#_converttoint
11f94     1C 4E 05 F1 | 	add	fp, #28
11f98     A7 FA 61 FC | 	wrlong	result1, fp
11f9c     37 00 00 FF 
11fa0     2C E4 05 F1 | 	add	objptr, ##28204
11fa4     F2 12 02 FB | 	rdlong	arg01, objptr
11fa8     04 E4 05 F1 | 	add	objptr, #4
11fac     F2 14 02 FB | 	rdlong	arg02, objptr
11fb0     04 4E 85 F1 | 	sub	fp, #4
11fb4     A7 16 02 FB | 	rdlong	arg03, fp
11fb8     FD 18 02 F6 | 	mov	arg04, result1
11fbc     18 4E 85 F1 | 	sub	fp, #24
11fc0     08 E4 85 F1 | 	sub	objptr, #8
11fc4     F2 1A 02 FB | 	rdlong	arg05, objptr
11fc8     37 00 00 FF 
11fcc     28 E4 85 F1 | 	sub	objptr, ##28200
11fd0     C4 28 B1 FD | 	call	#_hg010b_spin2_draw
11fd4     18 4E 05 F1 | 	add	fp, #24
11fd8     A7 1A 02 FB | 	rdlong	arg05, fp
11fdc     37 00 00 FF 
11fe0     2C E4 05 F1 | 	add	objptr, ##28204
11fe4     F2 1A 62 FC | 	wrlong	arg05, objptr
11fe8     04 4E 05 F1 | 	add	fp, #4
11fec     A7 1A 02 FB | 	rdlong	arg05, fp
11ff0     1C 4E 85 F1 | 	sub	fp, #28
11ff4     04 E4 05 F1 | 	add	objptr, #4
11ff8     F2 1A 62 FC | 	wrlong	arg05, objptr
11ffc     37 00 00 FF 
12000     30 E4 85 F1 | 	sub	objptr, ##28208
12004     A7 F0 03 F6 | 	mov	ptra, fp
12008     B2 00 A0 FD | 	call	#popregs_
1200c                 | _do_draw_ret
1200c     2D 00 64 FD | 	ret
12010                 | 
12010                 | ' 
12010                 | ' '-------------------- else
12010                 | ' 
12010                 | ' sub do_else
12010                 | _do_else
12010     4A 00 00 FF 
12014     7C E4 05 F1 | 	add	objptr, ##38012
12018     F2 00 02 FB | 	rdlong	_var01, objptr
1201c     01 00 86 F1 | 	sub	_var01, #1
12020     04 E4 05 F1 | 	add	objptr, #4
12024     F2 00 62 FC | 	wrlong	_var01, objptr
12028     4A 00 00 FF 
1202c     80 E4 85 F1 | 	sub	objptr, ##38016
12030                 | _do_else_ret
12030     2D 00 64 FD | 	ret
12034                 | 
12034                 | ' 
12034                 | ' '-------------------- end
12034                 | ' 
12034                 | ' sub do_end
12034                 | _do_end
12034     4A 00 00 FF 
12038     7C E4 05 F1 | 	add	objptr, ##38012
1203c     F2 00 02 FB | 	rdlong	_var01, objptr
12040     01 00 86 F1 | 	sub	_var01, #1
12044     04 E4 05 F1 | 	add	objptr, #4
12048     F2 00 62 FC | 	wrlong	_var01, objptr
1204c     06 00 00 FF 
12050     38 E4 05 F1 | 	add	objptr, ##3128
12054     FF FF BF FF 
12058     F2 FE 6B FC | 	wrlong	##2147483647, objptr
1205c     50 00 00 FF 
12060     B8 E4 85 F1 | 	sub	objptr, ##41144
12064                 | _do_end_ret
12064     2D 00 64 FD | 	ret
12068                 | 
12068                 | ' 
12068                 | ' '-------------------- enter
12068                 | ' 
12068                 | ' sub do_enter
12068                 | _do_enter
12068     02 00 00 FF 
1206c     D2 12 06 F6 | 	mov	arg01, ##1234
12070     AC 2F B0 FD | 	call	#_do_load
12074                 | _do_enter_ret
12074     2D 00 64 FD | 	ret
12078                 | 
12078                 | ' 
12078                 | ' '------------------- error processing
12078                 | ' 
12078                 | ' sub do_error
12078                 | _do_error
12078     01 4A 05 F6 | 	mov	COUNT_, #1
1207c     A8 00 A0 FD | 	call	#pushregs_
12080     4A 00 00 FF 
12084     80 E4 05 F1 | 	add	objptr, ##38016
12088     F2 18 02 FB | 	rdlong	arg04, objptr
1208c     0C 17 02 F6 | 	mov	arg03, arg04
12090     01 16 66 F0 | 	shl	arg03, #1
12094     0C 17 02 F1 | 	add	arg03, arg04
12098     02 16 66 F0 | 	shl	arg03, #2
1209c     03 00 00 FF 
120a0     04 E4 85 F1 | 	sub	objptr, ##1540
120a4     F2 16 02 F1 | 	add	arg03, objptr
120a8     0B 27 02 FB | 	rdlong	local01, arg03
120ac                 | ' r=compiledline(lineptr_e).result.uresult
120ac                 | ' print "Error ";r;": ";errors$(r)
120ac     00 12 06 F6 | 	mov	arg01, #0
120b0     47 00 00 FF 
120b4     7C E4 85 F1 | 	sub	objptr, ##36476
120b8     DC AB B1 FD | 	call	#__system___getiolock_0613
120bc     FD 12 02 F6 | 	mov	arg01, result1
120c0     AC 4E B1 FD | 	call	#__system___lockmem
120c4     BA 01 00 FF 
120c8     6D 14 06 F6 | 	mov	arg02, ##@LR__5935
120cc     00 12 06 F6 | 	mov	arg01, #0
120d0     00 16 06 F6 | 	mov	arg03, #0
120d4     8C 5B B1 FD | 	call	#__system___basic_print_string
120d8     00 12 06 F6 | 	mov	arg01, #0
120dc     13 15 02 F6 | 	mov	arg02, local01
120e0     00 16 06 F6 | 	mov	arg03, #0
120e4     0A 18 06 F6 | 	mov	arg04, #10
120e8     FC 5B B1 FD | 	call	#__system___basic_print_unsigned
120ec     BA 01 00 FF 
120f0     74 14 06 F6 | 	mov	arg02, ##@LR__5936
120f4     00 12 06 F6 | 	mov	arg01, #0
120f8     00 16 06 F6 | 	mov	arg03, #0
120fc     64 5B B1 FD | 	call	#__system___basic_print_string
12100     02 26 66 F0 | 	shl	local01, #2
12104     45 00 00 FF 
12108     7C E4 05 F1 | 	add	objptr, ##35452
1210c     F2 26 02 F1 | 	add	local01, objptr
12110     13 15 02 FB | 	rdlong	arg02, local01
12114     00 12 06 F6 | 	mov	arg01, #0
12118     00 16 06 F6 | 	mov	arg03, #0
1211c     45 00 00 FF 
12120     7C E4 85 F1 | 	sub	objptr, ##35452
12124     3C 5B B1 FD | 	call	#__system___basic_print_string
12128     00 12 06 F6 | 	mov	arg01, #0
1212c     0A 14 06 F6 | 	mov	arg02, #10
12130     00 16 06 F6 | 	mov	arg03, #0
12134     D4 5A B1 FD | 	call	#__system___basic_print_char
12138     00 12 06 F6 | 	mov	arg01, #0
1213c     58 AB B1 FD | 	call	#__system___getiolock_0613
12140     FD 00 68 FC | 	wrlong	#0, result1
12144     A7 F0 03 F6 | 	mov	ptra, fp
12148     B2 00 A0 FD | 	call	#popregs_
1214c                 | _do_error_ret
1214c     2D 00 64 FD | 	ret
12150                 | 
12150                 | ' 
12150                 | ' '-------------------- fcircle
12150                 | ' 
12150                 | ' sub do_fcircle
12150                 | _do_fcircle
12150     02 4A 05 F6 | 	mov	COUNT_, #2
12154     A8 00 A0 FD | 	call	#pushregs_
12158     24 F0 07 F1 | 	add	ptra, #36
1215c     64 B5 BF FD | 	call	#_pop
12160     FD 14 02 F6 | 	mov	arg02, result1
12164     FE 18 02 F6 | 	mov	arg04, result2
12168     FF 16 02 F6 | 	mov	arg03, result3
1216c     18 4E 05 F1 | 	add	fp, #24
12170     A7 14 62 FC | 	wrlong	arg02, fp
12174     04 4E 05 F1 | 	add	fp, #4
12178     A7 18 62 FC | 	wrlong	arg04, fp
1217c     04 4E 05 F1 | 	add	fp, #4
12180     A7 16 62 FC | 	wrlong	arg03, fp
12184     20 4E 85 F1 | 	sub	fp, #32
12188     38 B5 BF FD | 	call	#_pop
1218c     FD 14 02 F6 | 	mov	arg02, result1
12190     FE 18 02 F6 | 	mov	arg04, result2
12194     FF 16 02 F6 | 	mov	arg03, result3
12198     0C 4E 05 F1 | 	add	fp, #12
1219c     A7 14 62 FC | 	wrlong	arg02, fp
121a0     04 4E 05 F1 | 	add	fp, #4
121a4     A7 18 62 FC | 	wrlong	arg04, fp
121a8     04 4E 05 F1 | 	add	fp, #4
121ac     A7 16 62 FC | 	wrlong	arg03, fp
121b0     14 4E 85 F1 | 	sub	fp, #20
121b4     0C B5 BF FD | 	call	#_pop
121b8     FF 14 02 F6 | 	mov	arg02, result3
121bc     A7 FA 61 FC | 	wrlong	result1, fp
121c0     04 4E 05 F1 | 	add	fp, #4
121c4     A7 FC 61 FC | 	wrlong	result2, fp
121c8     04 4E 05 F1 | 	add	fp, #4
121cc     A7 14 62 FC | 	wrlong	arg02, fp
121d0     08 4E 85 F1 | 	sub	fp, #8
121d4     A7 12 02 F6 | 	mov	arg01, fp
121d8     CC B6 BF FD | 	call	#_converttoint
121dc     FD 26 02 F6 | 	mov	local01, result1
121e0     0C 4E 05 F1 | 	add	fp, #12
121e4     A7 12 02 F6 | 	mov	arg01, fp
121e8     0C 4E 85 F1 | 	sub	fp, #12
121ec     B8 B6 BF FD | 	call	#_converttoint
121f0     FD 28 02 F6 | 	mov	local02, result1
121f4     18 4E 05 F1 | 	add	fp, #24
121f8     A7 12 02 F6 | 	mov	arg01, fp
121fc     18 4E 85 F1 | 	sub	fp, #24
12200     A4 B6 BF FD | 	call	#_converttoint
12204     FD 16 02 F6 | 	mov	arg03, result1
12208     37 00 00 FF 
1220c     28 E4 05 F1 | 	add	objptr, ##28200
12210     F2 18 02 FB | 	rdlong	arg04, objptr
12214     37 00 00 FF 
12218     28 E4 85 F1 | 	sub	objptr, ##28200
1221c     13 13 02 F6 | 	mov	arg01, local01
12220     14 15 02 F6 | 	mov	arg02, local02
12224     F4 2A B1 FD | 	call	#_hg010b_spin2_fcircle
12228     A7 F0 03 F6 | 	mov	ptra, fp
1222c     B2 00 A0 FD | 	call	#popregs_
12230                 | _do_fcircle_ret
12230     2D 00 64 FD | 	ret
12234                 | 
12234                 | ' 
12234                 | ' '-------------------- fill
12234                 | ' 
12234                 | ' sub do_fill
12234                 | _do_fill
12234     03 4A 05 F6 | 	mov	COUNT_, #3
12238     A8 00 A0 FD | 	call	#pushregs_
1223c     30 F0 07 F1 | 	add	ptra, #48
12240     80 B4 BF FD | 	call	#_pop
12244     FD 16 02 F6 | 	mov	arg03, result1
12248     FE 14 02 F6 | 	mov	arg02, result2
1224c     FF 18 02 F6 | 	mov	arg04, result3
12250     24 4E 05 F1 | 	add	fp, #36
12254     A7 16 62 FC | 	wrlong	arg03, fp
12258     04 4E 05 F1 | 	add	fp, #4
1225c     A7 14 62 FC | 	wrlong	arg02, fp
12260     04 4E 05 F1 | 	add	fp, #4
12264     A7 18 62 FC | 	wrlong	arg04, fp
12268     2C 4E 85 F1 | 	sub	fp, #44
1226c     54 B4 BF FD | 	call	#_pop
12270     FD 16 02 F6 | 	mov	arg03, result1
12274     FE 14 02 F6 | 	mov	arg02, result2
12278     FF 18 02 F6 | 	mov	arg04, result3
1227c     18 4E 05 F1 | 	add	fp, #24
12280     A7 16 62 FC | 	wrlong	arg03, fp
12284     04 4E 05 F1 | 	add	fp, #4
12288     A7 14 62 FC | 	wrlong	arg02, fp
1228c     04 4E 05 F1 | 	add	fp, #4
12290     A7 18 62 FC | 	wrlong	arg04, fp
12294     20 4E 85 F1 | 	sub	fp, #32
12298     28 B4 BF FD | 	call	#_pop
1229c     FD 16 02 F6 | 	mov	arg03, result1
122a0     FE 14 02 F6 | 	mov	arg02, result2
122a4     FF 18 02 F6 | 	mov	arg04, result3
122a8     0C 4E 05 F1 | 	add	fp, #12
122ac     A7 16 62 FC | 	wrlong	arg03, fp
122b0     04 4E 05 F1 | 	add	fp, #4
122b4     A7 14 62 FC | 	wrlong	arg02, fp
122b8     04 4E 05 F1 | 	add	fp, #4
122bc     A7 18 62 FC | 	wrlong	arg04, fp
122c0     14 4E 85 F1 | 	sub	fp, #20
122c4     FC B3 BF FD | 	call	#_pop
122c8     FF 16 02 F6 | 	mov	arg03, result3
122cc     A7 FA 61 FC | 	wrlong	result1, fp
122d0     04 4E 05 F1 | 	add	fp, #4
122d4     A7 FC 61 FC | 	wrlong	result2, fp
122d8     04 4E 05 F1 | 	add	fp, #4
122dc     A7 16 62 FC | 	wrlong	arg03, fp
122e0     08 4E 85 F1 | 	sub	fp, #8
122e4     A7 12 02 F6 | 	mov	arg01, fp
122e8     BC B5 BF FD | 	call	#_converttoint
122ec     FD 26 02 F6 | 	mov	local01, result1
122f0     0C 4E 05 F1 | 	add	fp, #12
122f4     A7 12 02 F6 | 	mov	arg01, fp
122f8     0C 4E 85 F1 | 	sub	fp, #12
122fc     A8 B5 BF FD | 	call	#_converttoint
12300     FD 28 02 F6 | 	mov	local02, result1
12304     18 4E 05 F1 | 	add	fp, #24
12308     A7 12 02 F6 | 	mov	arg01, fp
1230c     18 4E 85 F1 | 	sub	fp, #24
12310     94 B5 BF FD | 	call	#_converttoint
12314     FD 2A 02 F6 | 	mov	local03, result1
12318     24 4E 05 F1 | 	add	fp, #36
1231c     A7 12 02 F6 | 	mov	arg01, fp
12320     24 4E 85 F1 | 	sub	fp, #36
12324     80 B5 BF FD | 	call	#_converttoint
12328     FD 18 02 F6 | 	mov	arg04, result1
1232c     13 13 02 F6 | 	mov	arg01, local01
12330     14 15 02 F6 | 	mov	arg02, local02
12334     15 17 02 F6 | 	mov	arg03, local03
12338     4C 27 B1 FD | 	call	#_hg010b_spin2_fill
1233c     A7 F0 03 F6 | 	mov	ptra, fp
12340     B2 00 A0 FD | 	call	#popregs_
12344                 | _do_fill_ret
12344     2D 00 64 FD | 	ret
12348                 | 
12348                 | ' 
12348                 | ' '-------------------- font
12348                 | ' 
12348                 | ' sub do_font
12348                 | _do_font
12348     03 4A 05 F6 | 	mov	COUNT_, #3
1234c     A8 00 A0 FD | 	call	#pushregs_
12350     70 B3 BF FD | 	call	#_pop
12354     FD 26 02 F6 | 	mov	local01, result1
12358     FE 28 02 F6 | 	mov	local02, result2
1235c     FF 2A 02 F6 | 	mov	local03, result3
12360                 | ' 
12360                 | ' t1=pop() 
12360                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
12360     1E 2A 0E F2 | 	cmp	local03, #30 wz
12364     10 00 90 5D |  if_ne	jmp	#LR__1460
12368     13 13 02 F6 | 	mov	arg01, local01
1236c     00 14 06 F6 | 	mov	arg02, #0
12370     3C 7F B1 FD | 	call	#__system___float_tointeger
12374     FD 26 02 F6 | 	mov	local01, result1
12378                 | LR__1460
12378                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
12378     1F 2A 0E F2 | 	cmp	local03, #31 wz
1237c     18 00 90 5D |  if_ne	jmp	#LR__1461
12380     13 13 02 F6 | 	mov	arg01, local01
12384     6C 82 B1 FD | 	call	#__system____builtin_atof
12388     FD 12 02 F6 | 	mov	arg01, result1
1238c     00 14 06 F6 | 	mov	arg02, #0
12390     1C 7F B1 FD | 	call	#__system___float_tointeger
12394     FD 26 02 F6 | 	mov	local01, result1
12398                 | LR__1461
12398     37 00 00 FF 
1239c     40 E4 05 F1 | 	add	objptr, ##28224
123a0     F2 26 62 FC | 	wrlong	local01, objptr
123a4     37 00 00 FF 
123a8     40 E4 85 F1 | 	sub	objptr, ##28224
123ac     02 26 66 F0 | 	shl	local01, #2
123b0     13 13 02 F6 | 	mov	arg01, local01
123b4     B4 2D B1 FD | 	call	#_hg010b_spin2_setfontfamily
123b8     A7 F0 03 F6 | 	mov	ptra, fp
123bc     B2 00 A0 FD | 	call	#popregs_
123c0                 | _do_font_ret
123c0     2D 00 64 FD | 	ret
123c4                 | 
123c4                 | ' 
123c4                 | ' '-------------------- for
123c4                 | ' 
123c4                 | ' sub do_for()
123c4                 | _do_for
123c4     01 4A 05 F6 | 	mov	COUNT_, #1
123c8     A8 00 A0 FD | 	call	#pushregs_
123cc     10 F0 07 F1 | 	add	ptra, #16
123d0     50 00 00 FF 
123d4     30 E5 05 F1 | 	add	objptr, ##41264
123d8     F2 12 02 FB | 	rdlong	arg01, objptr
123dc     01 12 06 F1 | 	add	arg01, #1
123e0     F2 12 62 FC | 	wrlong	arg01, objptr
123e4     50 00 00 FF 
123e8     30 E5 85 F1 | 	sub	objptr, ##41264
123ec     D4 B2 BF FD | 	call	#_pop
123f0     A7 FA 61 FC | 	wrlong	result1, fp
123f4     04 4E 05 F1 | 	add	fp, #4
123f8     A7 FC 61 FC | 	wrlong	result2, fp
123fc     04 4E 05 F1 | 	add	fp, #4
12400     A7 FE 61 FC | 	wrlong	result3, fp
12404     08 4E 85 F1 | 	sub	fp, #8
12408     50 00 00 FF 
1240c     30 E5 05 F1 | 	add	objptr, ##41264
12410     F2 12 02 FB | 	rdlong	arg01, objptr
12414     09 27 02 F6 | 	mov	local01, arg01
12418     02 26 66 F0 | 	shl	local01, #2
1241c     09 27 02 F1 | 	add	local01, arg01
12420     02 26 66 F0 | 	shl	local01, #2
12424     06 00 00 FF 
12428     98 E4 85 F1 | 	sub	objptr, ##3224
1242c     F2 26 02 F1 | 	add	local01, objptr
12430     A7 12 02 FB | 	rdlong	arg01, fp
12434     08 26 06 F1 | 	add	local01, #8
12438     13 13 62 FC | 	wrlong	arg01, local01
1243c     4A 00 00 FF 
12440     98 E4 85 F1 | 	sub	objptr, ##38040
12444     7C B2 BF FD | 	call	#_pop
12448     A7 FA 61 FC | 	wrlong	result1, fp
1244c     04 4E 05 F1 | 	add	fp, #4
12450     A7 FC 61 FC | 	wrlong	result2, fp
12454     04 4E 05 F1 | 	add	fp, #4
12458     A7 FE 61 FC | 	wrlong	result3, fp
1245c     08 4E 85 F1 | 	sub	fp, #8
12460     50 00 00 FF 
12464     30 E5 05 F1 | 	add	objptr, ##41264
12468     F2 12 02 FB | 	rdlong	arg01, objptr
1246c     09 27 02 F6 | 	mov	local01, arg01
12470     02 26 66 F0 | 	shl	local01, #2
12474     09 27 02 F1 | 	add	local01, arg01
12478     02 26 66 F0 | 	shl	local01, #2
1247c     06 00 00 FF 
12480     98 E4 85 F1 | 	sub	objptr, ##3224
12484     F2 26 02 F1 | 	add	local01, objptr
12488     A7 12 02 F6 | 	mov	arg01, fp
1248c     4A 00 00 FF 
12490     98 E4 85 F1 | 	sub	objptr, ##38040
12494     10 B4 BF FD | 	call	#_converttoint
12498     FD 12 02 F6 | 	mov	arg01, result1
1249c     0C 26 06 F1 | 	add	local01, #12
124a0     13 13 62 FC | 	wrlong	arg01, local01
124a4     1C B2 BF FD | 	call	#_pop
124a8     A7 FA 61 FC | 	wrlong	result1, fp
124ac     04 4E 05 F1 | 	add	fp, #4
124b0     A7 FC 61 FC | 	wrlong	result2, fp
124b4     04 4E 05 F1 | 	add	fp, #4
124b8     A7 FE 61 FC | 	wrlong	result3, fp
124bc     08 4E 85 F1 | 	sub	fp, #8
124c0     50 00 00 FF 
124c4     30 E5 05 F1 | 	add	objptr, ##41264
124c8     F2 12 02 FB | 	rdlong	arg01, objptr
124cc     09 27 02 F6 | 	mov	local01, arg01
124d0     02 26 66 F0 | 	shl	local01, #2
124d4     09 27 02 F1 | 	add	local01, arg01
124d8     02 26 66 F0 | 	shl	local01, #2
124dc     06 00 00 FF 
124e0     98 E4 85 F1 | 	sub	objptr, ##3224
124e4     F2 26 02 F1 | 	add	local01, objptr
124e8     A7 12 02 F6 | 	mov	arg01, fp
124ec     4A 00 00 FF 
124f0     98 E4 85 F1 | 	sub	objptr, ##38040
124f4     B0 B3 BF FD | 	call	#_converttoint
124f8     10 26 06 F1 | 	add	local01, #16
124fc     13 FB 61 FC | 	wrlong	result1, local01
12500                 | ' fortop+=1
12500                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
12500                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
12500                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
12500                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
12500     4A 00 00 FF 
12504     80 E4 05 F1 | 	add	objptr, ##38016
12508     F2 12 02 FB | 	rdlong	arg01, objptr
1250c     09 27 02 F6 | 	mov	local01, arg01
12510     01 26 66 F0 | 	shl	local01, #1
12514     09 27 02 F1 | 	add	local01, arg01
12518     02 26 66 F0 | 	shl	local01, #2
1251c     03 00 00 FF 
12520     04 E4 85 F1 | 	sub	objptr, ##1540
12524     F2 26 02 F1 | 	add	local01, objptr
12528     08 26 06 F1 | 	add	local01, #8
1252c     13 27 02 FB | 	rdlong	local01, local01
12530     FE 27 0E F2 | 	cmp	local01, #510 wz
12534     47 00 00 FF 
12538     7C E4 85 F1 | 	sub	objptr, ##36476
1253c     70 00 90 5D |  if_ne	jmp	#LR__1470
12540     50 00 00 FF 
12544     30 E5 05 F1 | 	add	objptr, ##41264
12548     F2 12 02 FB | 	rdlong	arg01, objptr
1254c     09 27 02 F6 | 	mov	local01, arg01
12550     02 26 66 F0 | 	shl	local01, #2
12554     09 27 02 F1 | 	add	local01, arg01
12558     02 26 66 F0 | 	shl	local01, #2
1255c     06 00 00 FF 
12560     98 E4 85 F1 | 	sub	objptr, ##3224
12564     F2 26 02 F1 | 	add	local01, objptr
12568     06 00 00 FF 
1256c     20 E4 05 F1 | 	add	objptr, ##3104
12570     F2 12 02 FB | 	rdlong	arg01, objptr
12574     13 13 62 FC | 	wrlong	arg01, local01
12578     78 E4 05 F1 | 	add	objptr, #120
1257c     F2 12 02 FB | 	rdlong	arg01, objptr
12580     09 27 02 F6 | 	mov	local01, arg01
12584     02 26 66 F0 | 	shl	local01, #2
12588     09 27 02 F1 | 	add	local01, arg01
1258c     02 26 66 F0 | 	shl	local01, #2
12590     06 00 00 FF 
12594     98 E4 85 F1 | 	sub	objptr, ##3224
12598     F2 26 02 F1 | 	add	local01, objptr
1259c     04 26 06 F1 | 	add	local01, #4
125a0     13 01 68 FC | 	wrlong	#0, local01
125a4     4A 00 00 FF 
125a8     98 E4 85 F1 | 	sub	objptr, ##38040
125ac     78 00 90 FD | 	jmp	#LR__1471
125b0                 | LR__1470
125b0     50 00 00 FF 
125b4     30 E5 05 F1 | 	add	objptr, ##41264
125b8     F2 12 02 FB | 	rdlong	arg01, objptr
125bc     09 27 02 F6 | 	mov	local01, arg01
125c0     02 26 66 F0 | 	shl	local01, #2
125c4     09 27 02 F1 | 	add	local01, arg01
125c8     02 26 66 F0 | 	shl	local01, #2
125cc     06 00 00 FF 
125d0     98 E4 85 F1 | 	sub	objptr, ##3224
125d4     F2 26 02 F1 | 	add	local01, objptr
125d8     06 00 00 FF 
125dc     28 E4 05 F1 | 	add	objptr, ##3112
125e0     F2 12 02 FB | 	rdlong	arg01, objptr
125e4     13 13 62 FC | 	wrlong	arg01, local01
125e8     70 E4 05 F1 | 	add	objptr, #112
125ec     F2 12 02 FB | 	rdlong	arg01, objptr
125f0     09 27 02 F6 | 	mov	local01, arg01
125f4     02 26 66 F0 | 	shl	local01, #2
125f8     09 27 02 F1 | 	add	local01, arg01
125fc     02 26 66 F0 | 	shl	local01, #2
12600     06 00 00 FF 
12604     98 E4 85 F1 | 	sub	objptr, ##3224
12608     F2 26 02 F1 | 	add	local01, objptr
1260c     18 E4 85 F1 | 	sub	objptr, #24
12610     F2 12 02 FB | 	rdlong	arg01, objptr
12614     4A 00 00 FF 
12618     80 E4 85 F1 | 	sub	objptr, ##38016
1261c     01 12 06 F1 | 	add	arg01, #1
12620     04 26 06 F1 | 	add	local01, #4
12624     13 13 62 FC | 	wrlong	arg01, local01
12628                 | LR__1471
12628     A7 F0 03 F6 | 	mov	ptra, fp
1262c     B2 00 A0 FD | 	call	#popregs_
12630                 | _do_for_ret
12630     2D 00 64 FD | 	ret
12634                 | 
12634                 | ' 
12634                 | ' '-------------------- frame
12634                 | ' 
12634                 | ' sub do_frame
12634                 | _do_frame
12634     03 4A 05 F6 | 	mov	COUNT_, #3
12638     A8 00 A0 FD | 	call	#pushregs_
1263c     30 F0 07 F1 | 	add	ptra, #48
12640     80 B0 BF FD | 	call	#_pop
12644     FD 16 02 F6 | 	mov	arg03, result1
12648     FE 14 02 F6 | 	mov	arg02, result2
1264c     FF 1A 02 F6 | 	mov	arg05, result3
12650     24 4E 05 F1 | 	add	fp, #36
12654     A7 16 62 FC | 	wrlong	arg03, fp
12658     04 4E 05 F1 | 	add	fp, #4
1265c     A7 14 62 FC | 	wrlong	arg02, fp
12660     04 4E 05 F1 | 	add	fp, #4
12664     A7 1A 62 FC | 	wrlong	arg05, fp
12668     2C 4E 85 F1 | 	sub	fp, #44
1266c     54 B0 BF FD | 	call	#_pop
12670     FD 16 02 F6 | 	mov	arg03, result1
12674     FE 14 02 F6 | 	mov	arg02, result2
12678     FF 1A 02 F6 | 	mov	arg05, result3
1267c     18 4E 05 F1 | 	add	fp, #24
12680     A7 16 62 FC | 	wrlong	arg03, fp
12684     04 4E 05 F1 | 	add	fp, #4
12688     A7 14 62 FC | 	wrlong	arg02, fp
1268c     04 4E 05 F1 | 	add	fp, #4
12690     A7 1A 62 FC | 	wrlong	arg05, fp
12694     20 4E 85 F1 | 	sub	fp, #32
12698     28 B0 BF FD | 	call	#_pop
1269c     FD 16 02 F6 | 	mov	arg03, result1
126a0     FE 14 02 F6 | 	mov	arg02, result2
126a4     FF 1A 02 F6 | 	mov	arg05, result3
126a8     0C 4E 05 F1 | 	add	fp, #12
126ac     A7 16 62 FC | 	wrlong	arg03, fp
126b0     04 4E 05 F1 | 	add	fp, #4
126b4     A7 14 62 FC | 	wrlong	arg02, fp
126b8     04 4E 05 F1 | 	add	fp, #4
126bc     A7 1A 62 FC | 	wrlong	arg05, fp
126c0     14 4E 85 F1 | 	sub	fp, #20
126c4     FC AF BF FD | 	call	#_pop
126c8     FF 16 02 F6 | 	mov	arg03, result3
126cc     A7 FA 61 FC | 	wrlong	result1, fp
126d0     04 4E 05 F1 | 	add	fp, #4
126d4     A7 FC 61 FC | 	wrlong	result2, fp
126d8     04 4E 05 F1 | 	add	fp, #4
126dc     A7 16 62 FC | 	wrlong	arg03, fp
126e0     08 4E 85 F1 | 	sub	fp, #8
126e4     A7 12 02 F6 | 	mov	arg01, fp
126e8     BC B1 BF FD | 	call	#_converttoint
126ec     FD 26 02 F6 | 	mov	local01, result1
126f0     0C 4E 05 F1 | 	add	fp, #12
126f4     A7 12 02 F6 | 	mov	arg01, fp
126f8     0C 4E 85 F1 | 	sub	fp, #12
126fc     A8 B1 BF FD | 	call	#_converttoint
12700     FD 28 02 F6 | 	mov	local02, result1
12704     18 4E 05 F1 | 	add	fp, #24
12708     A7 12 02 F6 | 	mov	arg01, fp
1270c     18 4E 85 F1 | 	sub	fp, #24
12710     94 B1 BF FD | 	call	#_converttoint
12714     FD 2A 02 F6 | 	mov	local03, result1
12718     24 4E 05 F1 | 	add	fp, #36
1271c     A7 12 02 F6 | 	mov	arg01, fp
12720     24 4E 85 F1 | 	sub	fp, #36
12724     80 B1 BF FD | 	call	#_converttoint
12728     FD 18 02 F6 | 	mov	arg04, result1
1272c     37 00 00 FF 
12730     28 E4 05 F1 | 	add	objptr, ##28200
12734     F2 1A 02 FB | 	rdlong	arg05, objptr
12738     37 00 00 FF 
1273c     28 E4 85 F1 | 	sub	objptr, ##28200
12740     13 13 02 F6 | 	mov	arg01, local01
12744     14 15 02 F6 | 	mov	arg02, local02
12748     15 17 02 F6 | 	mov	arg03, local03
1274c     24 28 B1 FD | 	call	#_hg010b_spin2_frame
12750     A7 F0 03 F6 | 	mov	ptra, fp
12754     B2 00 A0 FD | 	call	#popregs_
12758                 | _do_frame_ret
12758     2D 00 64 FD | 	ret
1275c                 | 
1275c                 | ' 
1275c                 | ' '-------------------- framebuf
1275c                 | ' 
1275c                 | ' sub do_framebuf
1275c                 | _do_framebuf
1275c     00 4A 05 F6 | 	mov	COUNT_, #0
12760     A8 00 A0 FD | 	call	#pushregs_
12764     0C F0 07 F1 | 	add	ptra, #12
12768     08 4E 05 F1 | 	add	fp, #8
1276c     A7 3A 68 FC | 	wrlong	#29, fp
12770     F2 12 02 FB | 	rdlong	arg01, objptr
12774     08 4E 85 F1 | 	sub	fp, #8
12778     A7 12 62 FC | 	wrlong	arg01, fp
1277c     A7 12 02 F6 | 	mov	arg01, fp
12780     D8 AF BF FD | 	call	#_push
12784     A7 F0 03 F6 | 	mov	ptra, fp
12788     B2 00 A0 FD | 	call	#popregs_
1278c                 | _do_framebuf_ret
1278c     2D 00 64 FD | 	ret
12790                 | 
12790                 | ' '-------------------- fre
12790                 | ' 
12790                 | ' sub do_fre
12790                 | _do_fre
12790     01 4A 05 F6 | 	mov	COUNT_, #1
12794     A8 00 A0 FD | 	call	#pushregs_
12798     0C F0 07 F1 | 	add	ptra, #12
1279c     52 00 00 FF 
127a0     98 E4 05 F1 | 	add	objptr, ##42136
127a4     F2 12 02 FB | 	rdlong	arg01, objptr
127a8     0F 00 00 FF 
127ac     3C E4 85 F1 | 	sub	objptr, ##7740
127b0     F2 26 02 FB | 	rdlong	local01, objptr
127b4     13 13 82 F1 | 	sub	arg01, local01
127b8     0F 00 00 FF 
127bc     B4 E4 05 F1 | 	add	objptr, ##7860
127c0     F2 12 62 FC | 	wrlong	arg01, objptr
127c4     08 4E 05 F1 | 	add	fp, #8
127c8     A7 3A 68 FC | 	wrlong	#29, fp
127cc     08 4E 85 F1 | 	sub	fp, #8
127d0     F2 26 02 FB | 	rdlong	local01, objptr
127d4     52 00 00 FF 
127d8     10 E5 85 F1 | 	sub	objptr, ##42256
127dc     A7 26 62 FC | 	wrlong	local01, fp
127e0     A7 12 02 F6 | 	mov	arg01, fp
127e4     74 AF BF FD | 	call	#_push
127e8     A7 F0 03 F6 | 	mov	ptra, fp
127ec     B2 00 A0 FD | 	call	#popregs_
127f0                 | _do_fre_ret
127f0     2D 00 64 FD | 	ret
127f4                 | 
127f4                 | ' 
127f4                 | ' '-------------------- get
127f4                 | ' 
127f4                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
127f4                 | _do_get
127f4     09 4A 05 F6 | 	mov	COUNT_, #9
127f8     A8 00 A0 FD | 	call	#pushregs_
127fc     40 F0 07 F1 | 	add	ptra, #64
12800     4A 00 00 FF 
12804     80 E4 05 F1 | 	add	objptr, ##38016
12808     F2 1A 02 FB | 	rdlong	arg05, objptr
1280c     0D 19 02 F6 | 	mov	arg04, arg05
12810     01 18 66 F0 | 	shl	arg04, #1
12814     0D 19 02 F1 | 	add	arg04, arg05
12818     02 18 66 F0 | 	shl	arg04, #2
1281c     03 00 00 FF 
12820     04 E4 85 F1 | 	sub	objptr, ##1540
12824     F2 18 02 F1 | 	add	arg04, objptr
12828     0C 1B 02 FB | 	rdlong	arg05, arg04
1282c     A7 1A 62 FC | 	wrlong	arg05, fp
12830                 | ' 
12830                 | ' numpar=compiledline(lineptr_e).result.uresult
12830                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
12830     04 1A 0E F2 | 	cmp	arg05, #4 wz
12834     47 00 00 FF 
12838     7C E4 85 F1 | 	sub	objptr, ##36476
1283c     48 00 90 5D |  if_ne	jmp	#LR__1480
12840     80 AE BF FD | 	call	#_pop
12844     FF 1A 02 F6 | 	mov	arg05, result3
12848     1C 4E 05 F1 | 	add	fp, #28
1284c     A7 FA 61 FC | 	wrlong	result1, fp
12850     04 4E 05 F1 | 	add	fp, #4
12854     A7 FC 61 FC | 	wrlong	result2, fp
12858     04 4E 05 F1 | 	add	fp, #4
1285c     A7 1A 62 FC | 	wrlong	arg05, fp
12860     08 4E 85 F1 | 	sub	fp, #8
12864     A7 12 02 F6 | 	mov	arg01, fp
12868     1C 4E 85 F1 | 	sub	fp, #28
1286c     38 B0 BF FD | 	call	#_converttoint
12870     52 00 00 FF 
12874     0C E5 05 F1 | 	add	objptr, ##42252
12878     F2 FA 61 FC | 	wrlong	result1, objptr
1287c     52 00 00 FF 
12880     0C E5 85 F1 | 	sub	objptr, ##42252
12884     18 00 90 FD | 	jmp	#LR__1481
12888                 | LR__1480
12888     52 00 00 FF 
1288c     0C E5 05 F1 | 	add	objptr, ##42252
12890     FF FF FF FF 
12894     F2 FE 6B FC | 	wrlong	##-1, objptr
12898     52 00 00 FF 
1289c     0C E5 85 F1 | 	sub	objptr, ##42252
128a0                 | LR__1481
128a0                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
128a0     A7 16 02 FB | 	rdlong	arg03, fp
128a4     03 16 56 F2 | 	cmps	arg03, #3 wc
128a8     40 00 90 CD |  if_b	jmp	#LR__1482
128ac     14 AE BF FD | 	call	#_pop
128b0     FF 16 02 F6 | 	mov	arg03, result3
128b4     1C 4E 05 F1 | 	add	fp, #28
128b8     A7 FA 61 FC | 	wrlong	result1, fp
128bc     04 4E 05 F1 | 	add	fp, #4
128c0     A7 FC 61 FC | 	wrlong	result2, fp
128c4     04 4E 05 F1 | 	add	fp, #4
128c8     A7 16 62 FC | 	wrlong	arg03, fp
128cc     08 4E 85 F1 | 	sub	fp, #8
128d0     A7 12 02 F6 | 	mov	arg01, fp
128d4     1C 4E 85 F1 | 	sub	fp, #28
128d8     CC AF BF FD | 	call	#_converttoint
128dc     08 4E 05 F1 | 	add	fp, #8
128e0     A7 FA 61 FC | 	wrlong	result1, fp
128e4     08 4E 85 F1 | 	sub	fp, #8
128e8     0C 00 90 FD | 	jmp	#LR__1483
128ec                 | LR__1482
128ec     08 4E 05 F1 | 	add	fp, #8
128f0     A7 02 68 FC | 	wrlong	#1, fp
128f4     08 4E 85 F1 | 	sub	fp, #8
128f8                 | LR__1483
128f8                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
128f8     A7 16 02 FB | 	rdlong	arg03, fp
128fc     02 16 56 F2 | 	cmps	arg03, #2 wc
12900     3C 00 90 CD |  if_b	jmp	#LR__1484
12904     BC AD BF FD | 	call	#_pop
12908     FF 16 02 F6 | 	mov	arg03, result3
1290c     1C 4E 05 F1 | 	add	fp, #28
12910     A7 FA 61 FC | 	wrlong	result1, fp
12914     04 4E 05 F1 | 	add	fp, #4
12918     A7 FC 61 FC | 	wrlong	result2, fp
1291c     04 4E 05 F1 | 	add	fp, #4
12920     A7 16 62 FC | 	wrlong	arg03, fp
12924     08 4E 85 F1 | 	sub	fp, #8
12928     A7 12 02 F6 | 	mov	arg01, fp
1292c     1C 4E 85 F1 | 	sub	fp, #28
12930     74 AF BF FD | 	call	#_converttoint
12934     0C 4E 05 F1 | 	add	fp, #12
12938     A7 FA 61 FC | 	wrlong	result1, fp
1293c     0C 4E 85 F1 | 	sub	fp, #12
12940                 | LR__1484
12940     80 AD BF FD | 	call	#_pop
12944     FF 16 02 F6 | 	mov	arg03, result3
12948     1C 4E 05 F1 | 	add	fp, #28
1294c     A7 FA 61 FC | 	wrlong	result1, fp
12950     04 4E 05 F1 | 	add	fp, #4
12954     A7 FC 61 FC | 	wrlong	result2, fp
12958     04 4E 05 F1 | 	add	fp, #4
1295c     A7 16 62 FC | 	wrlong	arg03, fp
12960     08 4E 85 F1 | 	sub	fp, #8
12964     A7 12 02 F6 | 	mov	arg01, fp
12968     1C 4E 85 F1 | 	sub	fp, #28
1296c     38 AF BF FD | 	call	#_converttoint
12970     04 4E 05 F1 | 	add	fp, #4
12974     A7 FA 61 FC | 	wrlong	result1, fp
12978     10 4E 05 F1 | 	add	fp, #16
1297c     A7 16 02 FB | 	rdlong	arg03, fp
12980     14 4E 85 F1 | 	sub	fp, #20
12984     02 16 66 F0 | 	shl	arg03, #2
12988     50 00 00 FF 
1298c     C4 E4 05 F1 | 	add	objptr, ##41156
12990     F2 26 02 F6 | 	mov	local01, objptr
12994     F2 16 02 F1 | 	add	arg03, objptr
12998     0B 01 68 FC | 	wrlong	#0, arg03
1299c                 | ' t1=pop() : channel=converttoint(t1)
1299c                 | ' getres(j)=0
1299c                 | ' if pos>=0 then
1299c     02 00 00 FF 
129a0     48 E4 05 F1 | 	add	objptr, ##1096
129a4     F2 28 02 FB | 	rdlong	local02, objptr
129a8     52 00 00 FF 
129ac     0C E5 85 F1 | 	sub	objptr, ##42252
129b0     00 28 56 F2 | 	cmps	local02, #0 wc
129b4     F0 01 90 CD |  if_b	jmp	#LR__1491
129b8                 | '   for i=0 to  amount/1024
129b8     10 4E 05 F1 | 	add	fp, #16
129bc     A7 00 68 FC | 	wrlong	#0, fp
129c0     08 4E 85 F1 | 	sub	fp, #8
129c4     A7 2A 02 FB | 	rdlong	local03, fp
129c8     08 4E 85 F1 | 	sub	fp, #8
129cc     15 2D 52 F6 | 	abs	local04, local03 wc
129d0     0A 2C 46 F0 | 	shr	local04, #10
129d4     16 2D 82 F6 | 	negc	local04, local04
129d8     01 2C 06 F1 | 	add	local04, #1
129dc                 | LR__1485
129dc     10 4E 05 F1 | 	add	fp, #16
129e0     A7 2A 02 FB | 	rdlong	local03, fp
129e4     10 4E 85 F1 | 	sub	fp, #16
129e8     16 2B 52 F2 | 	cmps	local03, local04 wc
129ec     9C 03 90 3D |  if_ae	jmp	#LR__1499
129f0                 | '     get #channel,pos+1,block(0),amount,r
129f0     04 4E 05 F1 | 	add	fp, #4
129f4     A7 12 02 FB | 	rdlong	arg01, fp
129f8     52 00 00 FF 
129fc     0C E5 05 F1 | 	add	objptr, ##42252
12a00     F2 14 02 FB | 	rdlong	arg02, objptr
12a04     01 14 06 F1 | 	add	arg02, #1
12a08     04 00 00 FF 
12a0c     58 E4 85 F1 | 	sub	objptr, ##2136
12a10     F2 16 02 F6 | 	mov	arg03, objptr
12a14     4E 00 00 FF 
12a18     B4 E4 85 F1 | 	sub	objptr, ##40116
12a1c     04 4E 05 F1 | 	add	fp, #4
12a20     A7 18 02 FB | 	rdlong	arg04, fp
12a24     08 4E 85 F1 | 	sub	fp, #8
12a28     01 1A 06 F6 | 	mov	arg05, #1
12a2c     B0 53 B1 FD | 	call	#__system___basic_get
12a30     18 4E 05 F1 | 	add	fp, #24
12a34     A7 FA 61 FC | 	wrlong	result1, fp
12a38                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12a38     0C 4E 85 F1 | 	sub	fp, #12
12a3c     A7 28 02 FB | 	rdlong	local02, fp
12a40     0C 4E 85 F1 | 	sub	fp, #12
12a44     00 04 00 FF 
12a48     00 28 56 F2 | 	cmps	local02, ##524288 wc
12a4c     7C 00 90 3D |  if_ae	jmp	#LR__1487
12a50     14 4E 05 F1 | 	add	fp, #20
12a54     A7 00 68 FC | 	wrlong	#0, fp
12a58     04 4E 05 F1 | 	add	fp, #4
12a5c     A7 2E 02 FB | 	rdlong	local05, fp
12a60     18 4E 85 F1 | 	sub	fp, #24
12a64                 | LR__1486
12a64     14 4E 05 F1 | 	add	fp, #20
12a68     A7 28 02 FB | 	rdlong	local02, fp
12a6c     14 4E 85 F1 | 	sub	fp, #20
12a70     17 29 52 F2 | 	cmps	local02, local05 wc
12a74     D8 00 90 3D |  if_ae	jmp	#LR__1490
12a78     0C 4E 05 F1 | 	add	fp, #12
12a7c     A7 12 02 FB | 	rdlong	arg01, fp
12a80     04 4E 05 F1 | 	add	fp, #4
12a84     A7 2A 02 FB | 	rdlong	local03, fp
12a88     0A 2A 66 F0 | 	shl	local03, #10
12a8c     15 13 02 F1 | 	add	arg01, local03
12a90     04 4E 05 F1 | 	add	fp, #4
12a94     A7 2A 02 FB | 	rdlong	local03, fp
12a98     15 13 02 F1 | 	add	arg01, local03
12a9c     4E 00 00 FF 
12aa0     B4 E4 05 F1 | 	add	objptr, ##40116
12aa4     F2 2A 02 F1 | 	add	local03, objptr
12aa8     15 15 C2 FA | 	rdbyte	arg02, local03
12aac     09 15 42 FC | 	wrbyte	arg02, arg01
12ab0     4E 00 00 FF 
12ab4     B4 E4 85 F1 | 	sub	objptr, ##40116
12ab8     A7 2A 02 FB | 	rdlong	local03, fp
12abc     01 2A 06 F1 | 	add	local03, #1
12ac0     A7 2A 62 FC | 	wrlong	local03, fp
12ac4     14 4E 85 F1 | 	sub	fp, #20
12ac8     98 FF 9F FD | 	jmp	#LR__1486
12acc                 | LR__1487
12acc     14 4E 05 F1 | 	add	fp, #20
12ad0     A7 00 68 FC | 	wrlong	#0, fp
12ad4     04 4E 05 F1 | 	add	fp, #4
12ad8     A7 30 02 FB | 	rdlong	local06, fp
12adc     18 4E 85 F1 | 	sub	fp, #24
12ae0                 | LR__1488
12ae0     14 4E 05 F1 | 	add	fp, #20
12ae4     A7 28 02 FB | 	rdlong	local02, fp
12ae8     14 4E 85 F1 | 	sub	fp, #20
12aec     18 29 52 F2 | 	cmps	local02, local06 wc
12af0     5C 00 90 3D |  if_ae	jmp	#LR__1489
12af4     0C 4E 05 F1 | 	add	fp, #12
12af8     A7 12 02 FB | 	rdlong	arg01, fp
12afc     04 4E 05 F1 | 	add	fp, #4
12b00     A7 2E 02 FB | 	rdlong	local05, fp
12b04     0A 2E 66 F0 | 	shl	local05, #10
12b08     17 13 02 F1 | 	add	arg01, local05
12b0c     04 4E 05 F1 | 	add	fp, #4
12b10     A7 2E 02 FB | 	rdlong	local05, fp
12b14     17 13 02 F1 | 	add	arg01, local05
12b18     14 4E 85 F1 | 	sub	fp, #20
12b1c     4E 00 00 FF 
12b20     B4 E4 05 F1 | 	add	objptr, ##40116
12b24     F2 2E 02 F1 | 	add	local05, objptr
12b28     17 15 C2 FA | 	rdbyte	arg02, local05
12b2c     4E 00 00 FF 
12b30     B4 E4 85 F1 | 	sub	objptr, ##40116
12b34     4C 0C B1 FD | 	call	#_pspoke
12b38     14 4E 05 F1 | 	add	fp, #20
12b3c     A7 2E 02 FB | 	rdlong	local05, fp
12b40     01 2E 06 F1 | 	add	local05, #1
12b44     A7 2E 62 FC | 	wrlong	local05, fp
12b48     14 4E 85 F1 | 	sub	fp, #20
12b4c     90 FF 9F FD | 	jmp	#LR__1488
12b50                 | LR__1489
12b50                 | LR__1490
12b50     14 4E 05 F1 | 	add	fp, #20
12b54     A7 30 02 FB | 	rdlong	local06, fp
12b58     18 2B 02 F6 | 	mov	local03, local06
12b5c     02 2A 66 F0 | 	shl	local03, #2
12b60     50 00 00 FF 
12b64     C4 E4 05 F1 | 	add	objptr, ##41156
12b68     F2 2A 02 F1 | 	add	local03, objptr
12b6c     02 30 66 F0 | 	shl	local06, #2
12b70     F2 30 02 F1 | 	add	local06, objptr
12b74     18 31 02 FB | 	rdlong	local06, local06
12b78     04 4E 05 F1 | 	add	fp, #4
12b7c     A7 2E 02 FB | 	rdlong	local05, fp
12b80     17 31 02 F1 | 	add	local06, local05
12b84     15 31 62 FC | 	wrlong	local06, local03
12b88     08 4E 85 F1 | 	sub	fp, #8
12b8c     A7 30 02 FB | 	rdlong	local06, fp
12b90     01 30 06 F1 | 	add	local06, #1
12b94     A7 30 62 FC | 	wrlong	local06, fp
12b98     10 4E 85 F1 | 	sub	fp, #16
12b9c     50 00 00 FF 
12ba0     C4 E4 85 F1 | 	sub	objptr, ##41156
12ba4     34 FE 9F FD | 	jmp	#LR__1485
12ba8                 | LR__1491
12ba8                 | '   for i=0 to  amount/1024
12ba8     10 4E 05 F1 | 	add	fp, #16
12bac     A7 00 68 FC | 	wrlong	#0, fp
12bb0     08 4E 85 F1 | 	sub	fp, #8
12bb4     A7 2A 02 FB | 	rdlong	local03, fp
12bb8     08 4E 85 F1 | 	sub	fp, #8
12bbc     15 33 52 F6 | 	abs	local07, local03 wc
12bc0     0A 32 46 F0 | 	shr	local07, #10
12bc4     19 33 82 F6 | 	negc	local07, local07
12bc8     01 32 06 F1 | 	add	local07, #1
12bcc                 | LR__1492
12bcc     10 4E 05 F1 | 	add	fp, #16
12bd0     A7 2A 02 FB | 	rdlong	local03, fp
12bd4     10 4E 85 F1 | 	sub	fp, #16
12bd8     19 2B 52 F2 | 	cmps	local03, local07 wc
12bdc     AC 01 90 3D |  if_ae	jmp	#LR__1498
12be0                 | '     get #channel,,block(0),amount,r
12be0     04 4E 05 F1 | 	add	fp, #4
12be4     A7 12 02 FB | 	rdlong	arg01, fp
12be8     4E 00 00 FF 
12bec     B4 E4 05 F1 | 	add	objptr, ##40116
12bf0     F2 16 02 F6 | 	mov	arg03, objptr
12bf4     4E 00 00 FF 
12bf8     B4 E4 85 F1 | 	sub	objptr, ##40116
12bfc     04 4E 05 F1 | 	add	fp, #4
12c00     A7 18 02 FB | 	rdlong	arg04, fp
12c04     08 4E 85 F1 | 	sub	fp, #8
12c08     00 14 06 F6 | 	mov	arg02, #0
12c0c     01 1A 06 F6 | 	mov	arg05, #1
12c10     CC 51 B1 FD | 	call	#__system___basic_get
12c14     18 4E 05 F1 | 	add	fp, #24
12c18     A7 FA 61 FC | 	wrlong	result1, fp
12c1c                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12c1c     0C 4E 85 F1 | 	sub	fp, #12
12c20     A7 28 02 FB | 	rdlong	local02, fp
12c24     0C 4E 85 F1 | 	sub	fp, #12
12c28     00 04 00 FF 
12c2c     00 28 56 F2 | 	cmps	local02, ##524288 wc
12c30     7C 00 90 3D |  if_ae	jmp	#LR__1494
12c34     14 4E 05 F1 | 	add	fp, #20
12c38     A7 00 68 FC | 	wrlong	#0, fp
12c3c     04 4E 05 F1 | 	add	fp, #4
12c40     A7 34 02 FB | 	rdlong	local08, fp
12c44     18 4E 85 F1 | 	sub	fp, #24
12c48                 | LR__1493
12c48     14 4E 05 F1 | 	add	fp, #20
12c4c     A7 28 02 FB | 	rdlong	local02, fp
12c50     14 4E 85 F1 | 	sub	fp, #20
12c54     1A 29 52 F2 | 	cmps	local02, local08 wc
12c58     D8 00 90 3D |  if_ae	jmp	#LR__1497
12c5c     0C 4E 05 F1 | 	add	fp, #12
12c60     A7 12 02 FB | 	rdlong	arg01, fp
12c64     04 4E 05 F1 | 	add	fp, #4
12c68     A7 30 02 FB | 	rdlong	local06, fp
12c6c     0A 30 66 F0 | 	shl	local06, #10
12c70     18 13 02 F1 | 	add	arg01, local06
12c74     04 4E 05 F1 | 	add	fp, #4
12c78     A7 30 02 FB | 	rdlong	local06, fp
12c7c     18 13 02 F1 | 	add	arg01, local06
12c80     4E 00 00 FF 
12c84     B4 E4 05 F1 | 	add	objptr, ##40116
12c88     F2 30 02 F1 | 	add	local06, objptr
12c8c     18 15 C2 FA | 	rdbyte	arg02, local06
12c90     09 15 42 FC | 	wrbyte	arg02, arg01
12c94     4E 00 00 FF 
12c98     B4 E4 85 F1 | 	sub	objptr, ##40116
12c9c     A7 30 02 FB | 	rdlong	local06, fp
12ca0     01 30 06 F1 | 	add	local06, #1
12ca4     A7 30 62 FC | 	wrlong	local06, fp
12ca8     14 4E 85 F1 | 	sub	fp, #20
12cac     98 FF 9F FD | 	jmp	#LR__1493
12cb0                 | LR__1494
12cb0     14 4E 05 F1 | 	add	fp, #20
12cb4     A7 00 68 FC | 	wrlong	#0, fp
12cb8     04 4E 05 F1 | 	add	fp, #4
12cbc     A7 36 02 FB | 	rdlong	local09, fp
12cc0     18 4E 85 F1 | 	sub	fp, #24
12cc4                 | LR__1495
12cc4     14 4E 05 F1 | 	add	fp, #20
12cc8     A7 28 02 FB | 	rdlong	local02, fp
12ccc     14 4E 85 F1 | 	sub	fp, #20
12cd0     1B 29 52 F2 | 	cmps	local02, local09 wc
12cd4     5C 00 90 3D |  if_ae	jmp	#LR__1496
12cd8     0C 4E 05 F1 | 	add	fp, #12
12cdc     A7 12 02 FB | 	rdlong	arg01, fp
12ce0     04 4E 05 F1 | 	add	fp, #4
12ce4     A7 34 02 FB | 	rdlong	local08, fp
12ce8     0A 34 66 F0 | 	shl	local08, #10
12cec     1A 13 02 F1 | 	add	arg01, local08
12cf0     04 4E 05 F1 | 	add	fp, #4
12cf4     A7 34 02 FB | 	rdlong	local08, fp
12cf8     1A 13 02 F1 | 	add	arg01, local08
12cfc     14 4E 85 F1 | 	sub	fp, #20
12d00     4E 00 00 FF 
12d04     B4 E4 05 F1 | 	add	objptr, ##40116
12d08     F2 34 02 F1 | 	add	local08, objptr
12d0c     1A 15 C2 FA | 	rdbyte	arg02, local08
12d10     4E 00 00 FF 
12d14     B4 E4 85 F1 | 	sub	objptr, ##40116
12d18     68 0A B1 FD | 	call	#_pspoke
12d1c     14 4E 05 F1 | 	add	fp, #20
12d20     A7 34 02 FB | 	rdlong	local08, fp
12d24     01 34 06 F1 | 	add	local08, #1
12d28     A7 34 62 FC | 	wrlong	local08, fp
12d2c     14 4E 85 F1 | 	sub	fp, #20
12d30     90 FF 9F FD | 	jmp	#LR__1495
12d34                 | LR__1496
12d34                 | LR__1497
12d34     14 4E 05 F1 | 	add	fp, #20
12d38     A7 36 02 FB | 	rdlong	local09, fp
12d3c     1B 31 02 F6 | 	mov	local06, local09
12d40     02 30 66 F0 | 	shl	local06, #2
12d44     50 00 00 FF 
12d48     C4 E4 05 F1 | 	add	objptr, ##41156
12d4c     F2 30 02 F1 | 	add	local06, objptr
12d50     02 36 66 F0 | 	shl	local09, #2
12d54     F2 36 02 F1 | 	add	local09, objptr
12d58     1B 37 02 FB | 	rdlong	local09, local09
12d5c     04 4E 05 F1 | 	add	fp, #4
12d60     A7 34 02 FB | 	rdlong	local08, fp
12d64     1A 37 02 F1 | 	add	local09, local08
12d68     18 37 62 FC | 	wrlong	local09, local06
12d6c     08 4E 85 F1 | 	sub	fp, #8
12d70     A7 36 02 FB | 	rdlong	local09, fp
12d74     01 36 06 F1 | 	add	local09, #1
12d78     A7 36 62 FC | 	wrlong	local09, fp
12d7c     10 4E 85 F1 | 	sub	fp, #16
12d80     50 00 00 FF 
12d84     C4 E4 85 F1 | 	sub	objptr, ##41156
12d88     40 FE 9F FD | 	jmp	#LR__1492
12d8c                 | LR__1498
12d8c                 | LR__1499
12d8c     A7 F0 03 F6 | 	mov	ptra, fp
12d90     B2 00 A0 FD | 	call	#popregs_
12d94                 | _do_get_ret
12d94     2D 00 64 FD | 	ret
12d98                 | 
12d98                 | ' 
12d98                 | ' '-------------------- getcolor
12d98                 | ' 
12d98                 | ' sub do_getcolor
12d98                 | _do_getcolor
12d98     01 4A 05 F6 | 	mov	COUNT_, #1
12d9c     A8 00 A0 FD | 	call	#pushregs_
12da0     10 F0 07 F1 | 	add	ptra, #16
12da4     4A 00 00 FF 
12da8     80 E4 05 F1 | 	add	objptr, ##38016
12dac     F2 26 02 FB | 	rdlong	local01, objptr
12db0     13 17 02 F6 | 	mov	arg03, local01
12db4     01 16 66 F0 | 	shl	arg03, #1
12db8     13 17 02 F1 | 	add	arg03, local01
12dbc     02 16 66 F0 | 	shl	arg03, #2
12dc0     03 00 00 FF 
12dc4     04 E4 85 F1 | 	sub	objptr, ##1540
12dc8     F2 16 02 F1 | 	add	arg03, objptr
12dcc     0B 17 02 FB | 	rdlong	arg03, arg03
12dd0     0C 4E 05 F1 | 	add	fp, #12
12dd4     A7 16 62 FC | 	wrlong	arg03, fp
12dd8                 | ' 
12dd8                 | ' numpar=compiledline(lineptr_e).result.uresult
12dd8                 | ' if numpar>1 orelse numpar=0 then print "getcolor "; : printerror(39) : return
12dd8     0C 4E 85 F1 | 	sub	fp, #12
12ddc     02 16 16 F2 | 	cmp	arg03, #2 wc
12de0     47 00 00 FF 
12de4     7C E4 85 F1 | 	sub	objptr, ##36476
12de8     0C 4E 05 C1 |  if_b	add	fp, #12
12dec     A7 26 0A CB |  if_b	rdlong	local01, fp wz
12df0     0C 4E 85 C1 |  if_b	sub	fp, #12
12df4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1500
12df8     00 12 06 F6 | 	mov	arg01, #0
12dfc     98 9E B1 FD | 	call	#__system___getiolock_0613
12e00     FD 12 02 F6 | 	mov	arg01, result1
12e04     68 41 B1 FD | 	call	#__system___lockmem
12e08     BA 01 00 FF 
12e0c     77 14 06 F6 | 	mov	arg02, ##@LR__5937
12e10     00 12 06 F6 | 	mov	arg01, #0
12e14     00 16 06 F6 | 	mov	arg03, #0
12e18     48 4E B1 FD | 	call	#__system___basic_print_string
12e1c     00 12 06 F6 | 	mov	arg01, #0
12e20     74 9E B1 FD | 	call	#__system___getiolock_0613
12e24     FD 00 68 FC | 	wrlong	#0, result1
12e28     27 12 06 F6 | 	mov	arg01, #39
12e2c     00 14 06 F6 | 	mov	arg02, #0
12e30     20 07 B1 FD | 	call	#_printerror
12e34     60 00 90 FD | 	jmp	#LR__1501
12e38                 | LR__1500
12e38     88 A8 BF FD | 	call	#_pop
12e3c     A7 FA 61 FC | 	wrlong	result1, fp
12e40     04 4E 05 F1 | 	add	fp, #4
12e44     A7 FC 61 FC | 	wrlong	result2, fp
12e48     04 4E 05 F1 | 	add	fp, #4
12e4c     A7 FE 61 FC | 	wrlong	result3, fp
12e50     08 4E 85 F1 | 	sub	fp, #8
12e54     A7 12 02 F6 | 	mov	arg01, fp
12e58     4C AA BF FD | 	call	#_converttoint
12e5c     FD 12 02 F6 | 	mov	arg01, result1
12e60                 | ' 
12e60                 | ' return long[palette_ptr+4*color]
12e60     1C E4 05 F1 | 	add	objptr, #28
12e64     F2 FA 01 FB | 	rdlong	result1, objptr
12e68     1C E4 85 F1 | 	sub	objptr, #28
12e6c     02 12 66 F0 | 	shl	arg01, #2
12e70     09 FB 01 F1 | 	add	result1, arg01
12e74     FD FA 01 FB | 	rdlong	result1, result1
12e78     08 FA C5 F0 | 	sar	result1, #8
12e7c     F8 FA 05 F4 | 	bitl	result1, #248
12e80     A7 FA 61 FC | 	wrlong	result1, fp
12e84     08 4E 05 F1 | 	add	fp, #8
12e88     A7 3A 68 FC | 	wrlong	#29, fp
12e8c     08 4E 85 F1 | 	sub	fp, #8
12e90     A7 12 02 F6 | 	mov	arg01, fp
12e94     C4 A8 BF FD | 	call	#_push
12e98                 | LR__1501
12e98     A7 F0 03 F6 | 	mov	ptra, fp
12e9c     B2 00 A0 FD | 	call	#popregs_
12ea0                 | _do_getcolor_ret
12ea0     2D 00 64 FD | 	ret
12ea4                 | 
12ea4                 | ' 
12ea4                 | ' '-------------------- getenvsustain
12ea4                 | ' 
12ea4                 | ' sub do_getenvsustain
12ea4                 | _do_getenvsustain
12ea4     01 4A 05 F6 | 	mov	COUNT_, #1
12ea8     A8 00 A0 FD | 	call	#pushregs_
12eac     10 F0 07 F1 | 	add	ptra, #16
12eb0     4A 00 00 FF 
12eb4     80 E4 05 F1 | 	add	objptr, ##38016
12eb8     F2 26 02 FB | 	rdlong	local01, objptr
12ebc     13 17 02 F6 | 	mov	arg03, local01
12ec0     01 16 66 F0 | 	shl	arg03, #1
12ec4     13 17 02 F1 | 	add	arg03, local01
12ec8     02 16 66 F0 | 	shl	arg03, #2
12ecc     03 00 00 FF 
12ed0     04 E4 85 F1 | 	sub	objptr, ##1540
12ed4     F2 16 02 F1 | 	add	arg03, objptr
12ed8     0B 17 02 FB | 	rdlong	arg03, arg03
12edc     0C 4E 05 F1 | 	add	fp, #12
12ee0     A7 16 62 FC | 	wrlong	arg03, fp
12ee4                 | ' 
12ee4                 | ' numpar=compiledline(lineptr_e).result.uresult
12ee4                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
12ee4     0C 4E 85 F1 | 	sub	fp, #12
12ee8     02 16 16 F2 | 	cmp	arg03, #2 wc
12eec     47 00 00 FF 
12ef0     7C E4 85 F1 | 	sub	objptr, ##36476
12ef4     0C 4E 05 C1 |  if_b	add	fp, #12
12ef8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
12efc     0C 4E 85 C1 |  if_b	sub	fp, #12
12f00     40 00 90 4D |  if_c_and_nz	jmp	#LR__1510
12f04     00 12 06 F6 | 	mov	arg01, #0
12f08     8C 9D B1 FD | 	call	#__system___getiolock_0613
12f0c     FD 12 02 F6 | 	mov	arg01, result1
12f10     5C 40 B1 FD | 	call	#__system___lockmem
12f14     BA 01 00 FF 
12f18     81 14 06 F6 | 	mov	arg02, ##@LR__5938
12f1c     00 12 06 F6 | 	mov	arg01, #0
12f20     00 16 06 F6 | 	mov	arg03, #0
12f24     3C 4D B1 FD | 	call	#__system___basic_print_string
12f28     00 12 06 F6 | 	mov	arg01, #0
12f2c     68 9D B1 FD | 	call	#__system___getiolock_0613
12f30     FD 00 68 FC | 	wrlong	#0, result1
12f34     27 12 06 F6 | 	mov	arg01, #39
12f38     00 14 06 F6 | 	mov	arg02, #0
12f3c     14 06 B1 FD | 	call	#_printerror
12f40     64 00 90 FD | 	jmp	#LR__1511
12f44                 | LR__1510
12f44     7C A7 BF FD | 	call	#_pop
12f48     FD 26 02 F6 | 	mov	local01, result1
12f4c     FE 16 02 F6 | 	mov	arg03, result2
12f50     A7 26 62 FC | 	wrlong	local01, fp
12f54     04 4E 05 F1 | 	add	fp, #4
12f58     A7 16 62 FC | 	wrlong	arg03, fp
12f5c     04 4E 05 F1 | 	add	fp, #4
12f60     A7 FE 61 FC | 	wrlong	result3, fp
12f64     08 4E 85 F1 | 	sub	fp, #8
12f68     A7 12 02 F6 | 	mov	arg01, fp
12f6c     38 A9 BF FD | 	call	#_converttoint
12f70     FD 26 02 F6 | 	mov	local01, result1
12f74     01 26 66 F0 | 	shl	local01, #1
12f78     52 00 00 FF 
12f7c     B4 E4 05 F1 | 	add	objptr, ##42164
12f80     F2 26 02 F1 | 	add	local01, objptr
12f84     13 27 E2 FA | 	rdword	local01, local01
12f88     A7 26 62 FC | 	wrlong	local01, fp
12f8c     08 4E 05 F1 | 	add	fp, #8
12f90     A7 38 68 FC | 	wrlong	#28, fp
12f94     08 4E 85 F1 | 	sub	fp, #8
12f98     A7 12 02 F6 | 	mov	arg01, fp
12f9c     52 00 00 FF 
12fa0     B4 E4 85 F1 | 	sub	objptr, ##42164
12fa4     B4 A7 BF FD | 	call	#_push
12fa8                 | LR__1511
12fa8     A7 F0 03 F6 | 	mov	ptra, fp
12fac     B2 00 A0 FD | 	call	#popregs_
12fb0                 | _do_getenvsustain_ret
12fb0     2D 00 64 FD | 	ret
12fb4                 | 
12fb4                 | ' 
12fb4                 | ' '-------------------- getnotevalue
12fb4                 | ' 
12fb4                 | ' sub do_getnotevalue
12fb4                 | _do_getnotevalue
12fb4     01 4A 05 F6 | 	mov	COUNT_, #1
12fb8     A8 00 A0 FD | 	call	#pushregs_
12fbc     1C F0 07 F1 | 	add	ptra, #28
12fc0     00 A7 BF FD | 	call	#_pop
12fc4     FF 14 02 F6 | 	mov	arg02, result3
12fc8     10 4E 05 F1 | 	add	fp, #16
12fcc     A7 FA 61 FC | 	wrlong	result1, fp
12fd0     04 4E 05 F1 | 	add	fp, #4
12fd4     A7 FC 61 FC | 	wrlong	result2, fp
12fd8     04 4E 05 F1 | 	add	fp, #4
12fdc     A7 14 62 FC | 	wrlong	arg02, fp
12fe0     08 4E 85 F1 | 	sub	fp, #8
12fe4     A7 12 02 F6 | 	mov	arg01, fp
12fe8     10 4E 85 F1 | 	sub	fp, #16
12fec     B8 A8 BF FD | 	call	#_converttoint
12ff0     FD 14 52 F6 | 	abs	arg02, result1 wc
12ff4     0C 14 16 FD | 	qdiv	arg02, #12
12ff8     0C 4E 05 F1 | 	add	fp, #12
12ffc     A7 FA 61 FC | 	wrlong	result1, fp
13000     14 00 00 FF 
13004     D8 E4 05 F1 | 	add	objptr, ##10456
13008     08 4E 85 F1 | 	sub	fp, #8
1300c     19 14 62 FD | 	getqy	arg02
13010     0A 15 82 F6 | 	negc	arg02, arg02
13014     02 14 66 F0 | 	shl	arg02, #2
13018     F2 14 02 F1 | 	add	arg02, objptr
1301c     0A 15 02 FB | 	rdlong	arg02, arg02
13020     A7 14 62 FC | 	wrlong	arg02, fp
13024     08 4E 05 F1 | 	add	fp, #8
13028     A7 14 02 FB | 	rdlong	arg02, fp
1302c     0A 15 52 F6 | 	abs	arg02, arg02 wc
13030     0C 14 16 FD | 	qdiv	arg02, #12
13034     0C 4E 85 F1 | 	sub	fp, #12
13038     14 00 00 FF 
1303c     D8 E4 85 F1 | 	sub	objptr, ##10456
13040     18 14 62 FD | 	getqx	arg02
13044     0A 13 82 F6 | 	negc	arg01, arg02
13048     09 13 52 F6 | 	abs	arg01, arg01 wc
1304c     1F 26 C6 C9 |  if_b	decod	local01, #31
13050     00 26 06 36 |  if_ae	mov	local01, #0
13054     8C 69 B1 FD | 	call	#__system___float_fromuns
13058     13 FB 61 F5 | 	xor	result1, local01
1305c     08 4E 05 F1 | 	add	fp, #8
13060     A7 FA 61 FC | 	wrlong	result1, fp
13064     FD 14 02 F6 | 	mov	arg02, result1
13068     08 4E 85 F1 | 	sub	fp, #8
1306c     1E 12 C6 F9 | 	decod	arg01, #30
13070     7C 7C B1 FD | 	call	#__system____builtin_powf
13074     FD 12 02 F6 | 	mov	arg01, result1
13078     04 4E 05 F1 | 	add	fp, #4
1307c     A7 14 02 FB | 	rdlong	arg02, fp
13080     04 4E 85 F1 | 	sub	fp, #4
13084     60 6D B1 FD | 	call	#__system___float_mul
13088     A7 FA 61 FC | 	wrlong	result1, fp
1308c     10 4E 05 F1 | 	add	fp, #16
13090     A7 FA 61 FC | 	wrlong	result1, fp
13094     08 4E 05 F1 | 	add	fp, #8
13098     A7 3C 68 FC | 	wrlong	#30, fp
1309c     08 4E 85 F1 | 	sub	fp, #8
130a0     A7 12 02 F6 | 	mov	arg01, fp
130a4     10 4E 85 F1 | 	sub	fp, #16
130a8     B0 A6 BF FD | 	call	#_push
130ac     A7 F0 03 F6 | 	mov	ptra, fp
130b0     B2 00 A0 FD | 	call	#popregs_
130b4                 | _do_getnotevalue_ret
130b4     2D 00 64 FD | 	ret
130b8                 | 
130b8                 | ' 
130b8                 | ' '-------------------- getpixel
130b8                 | ' 
130b8                 | ' sub do_getpixel
130b8                 | _do_getpixel
130b8     00 4A 05 F6 | 	mov	COUNT_, #0
130bc     A8 00 A0 FD | 	call	#pushregs_
130c0     24 F0 07 F1 | 	add	ptra, #36
130c4     4A 00 00 FF 
130c8     80 E4 05 F1 | 	add	objptr, ##38016
130cc     F2 16 02 FB | 	rdlong	arg03, objptr
130d0     0B 15 02 F6 | 	mov	arg02, arg03
130d4     01 14 66 F0 | 	shl	arg02, #1
130d8     0B 15 02 F1 | 	add	arg02, arg03
130dc     02 14 66 F0 | 	shl	arg02, #2
130e0     03 00 00 FF 
130e4     04 E4 85 F1 | 	sub	objptr, ##1540
130e8     F2 14 02 F1 | 	add	arg02, objptr
130ec     0A 17 02 FB | 	rdlong	arg03, arg02
130f0     18 4E 05 F1 | 	add	fp, #24
130f4     A7 16 62 FC | 	wrlong	arg03, fp
130f8                 | ' 
130f8                 | ' numpar=compiledline(lineptr_e).result.uresult
130f8                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
130f8     18 4E 85 F1 | 	sub	fp, #24
130fc     02 16 0E F2 | 	cmp	arg03, #2 wz
13100     47 00 00 FF 
13104     7C E4 85 F1 | 	sub	objptr, ##36476
13108     40 00 90 AD |  if_e	jmp	#LR__1520
1310c     00 12 06 F6 | 	mov	arg01, #0
13110     84 9B B1 FD | 	call	#__system___getiolock_0613
13114     FD 12 02 F6 | 	mov	arg01, result1
13118     54 3E B1 FD | 	call	#__system___lockmem
1311c     BA 01 00 FF 
13120     91 14 06 F6 | 	mov	arg02, ##@LR__5939
13124     00 12 06 F6 | 	mov	arg01, #0
13128     00 16 06 F6 | 	mov	arg03, #0
1312c     34 4B B1 FD | 	call	#__system___basic_print_string
13130     00 12 06 F6 | 	mov	arg01, #0
13134     60 9B B1 FD | 	call	#__system___getiolock_0613
13138     FD 00 68 FC | 	wrlong	#0, result1
1313c     27 12 06 F6 | 	mov	arg01, #39
13140     00 14 06 F6 | 	mov	arg02, #0
13144     0C 04 B1 FD | 	call	#_printerror
13148     B4 00 90 FD | 	jmp	#LR__1521
1314c                 | LR__1520
1314c     74 A5 BF FD | 	call	#_pop
13150     FD 16 02 F6 | 	mov	arg03, result1
13154     FE 14 02 F6 | 	mov	arg02, result2
13158     FF 12 02 F6 | 	mov	arg01, result3
1315c     0C 4E 05 F1 | 	add	fp, #12
13160     A7 16 62 FC | 	wrlong	arg03, fp
13164     04 4E 05 F1 | 	add	fp, #4
13168     A7 14 62 FC | 	wrlong	arg02, fp
1316c     04 4E 05 F1 | 	add	fp, #4
13170     A7 12 62 FC | 	wrlong	arg01, fp
13174     14 4E 85 F1 | 	sub	fp, #20
13178     48 A5 BF FD | 	call	#_pop
1317c     FF 16 02 F6 | 	mov	arg03, result3
13180     A7 FA 61 FC | 	wrlong	result1, fp
13184     04 4E 05 F1 | 	add	fp, #4
13188     A7 FC 61 FC | 	wrlong	result2, fp
1318c     04 4E 05 F1 | 	add	fp, #4
13190     A7 16 62 FC | 	wrlong	arg03, fp
13194     08 4E 85 F1 | 	sub	fp, #8
13198     A7 12 02 F6 | 	mov	arg01, fp
1319c     08 A7 BF FD | 	call	#_converttoint
131a0     1C 4E 05 F1 | 	add	fp, #28
131a4     A7 FA 61 FC | 	wrlong	result1, fp
131a8     10 4E 85 F1 | 	sub	fp, #16
131ac     A7 12 02 F6 | 	mov	arg01, fp
131b0     0C 4E 85 F1 | 	sub	fp, #12
131b4     F0 A6 BF FD | 	call	#_converttoint
131b8     FD 16 02 F6 | 	mov	arg03, result1
131bc     20 4E 05 F1 | 	add	fp, #32
131c0     A7 16 62 FC | 	wrlong	arg03, fp
131c4     F2 12 02 FB | 	rdlong	arg01, objptr
131c8     04 4E 85 F1 | 	sub	fp, #4
131cc     A7 FE 01 FB | 	rdlong	result3, fp
131d0     FF 12 02 F1 | 	add	arg01, result3
131d4     1C 4E 85 F1 | 	sub	fp, #28
131d8     0A 16 66 F0 | 	shl	arg03, #10
131dc     0B 13 02 F1 | 	add	arg01, arg03
131e0     E8 05 B1 FD | 	call	#_pspeek
131e4     FD FA E1 F8 | 	getbyte	result1, result1, #0
131e8     A7 FA 61 FC | 	wrlong	result1, fp
131ec     08 4E 05 F1 | 	add	fp, #8
131f0     A7 3A 68 FC | 	wrlong	#29, fp
131f4     08 4E 85 F1 | 	sub	fp, #8
131f8     A7 12 02 F6 | 	mov	arg01, fp
131fc     5C A5 BF FD | 	call	#_push
13200                 | LR__1521
13200     A7 F0 03 F6 | 	mov	ptra, fp
13204     B2 00 A0 FD | 	call	#popregs_
13208                 | _do_getpixel_ret
13208     2D 00 64 FD | 	ret
1320c                 | 
1320c                 | ' 
1320c                 | ' '-------------------- gettime
1320c                 | ' 
1320c                 | ' sub do_gettime
1320c                 | _do_gettime
1320c     02 4A 05 F6 | 	mov	COUNT_, #2
13210     A8 00 A0 FD | 	call	#pushregs_
13214     14 F0 07 F1 | 	add	ptra, #20
13218                 | ' 
13218                 | ' const asm 
13218     1A 26 72 FD | 	getct	local01 wc
1321c     1A 28 62 FD | 	getct	local02
13220                 | ' return hi1, lo1
13220     14 FD 01 F6 | 	mov	result2, local02
13224     A7 26 62 FC | 	wrlong	local01, fp
13228     04 4E 05 F1 | 	add	fp, #4
1322c     A7 FC 61 FC | 	wrlong	result2, fp
13230     0C 4E 05 F1 | 	add	fp, #12
13234     A7 3A 68 FC | 	wrlong	#29, fp
13238     0C 4E 85 F1 | 	sub	fp, #12
1323c     A7 12 02 FB | 	rdlong	arg01, fp
13240     04 4E 05 F1 | 	add	fp, #4
13244     A7 12 62 FC | 	wrlong	arg01, fp
13248     08 4E 85 F1 | 	sub	fp, #8
1324c     A7 12 02 FB | 	rdlong	arg01, fp
13250     0C 4E 05 F1 | 	add	fp, #12
13254     A7 12 62 FC | 	wrlong	arg01, fp
13258     04 4E 85 F1 | 	sub	fp, #4
1325c     A7 12 02 F6 | 	mov	arg01, fp
13260     08 4E 85 F1 | 	sub	fp, #8
13264     F4 A4 BF FD | 	call	#_push
13268     A7 F0 03 F6 | 	mov	ptra, fp
1326c     B2 00 A0 FD | 	call	#popregs_
13270                 | _do_gettime_ret
13270     2D 00 64 FD | 	ret
13274                 | 
13274                 | ' 
13274                 | ' '-------------------- gosub
13274                 | ' 
13274                 | ' sub do_gosub()
13274                 | _do_gosub
13274     50 00 00 FF 
13278     34 E5 05 F1 | 	add	objptr, ##41268
1327c     F2 00 02 FB | 	rdlong	_var01, objptr
13280     01 00 06 F1 | 	add	_var01, #1
13284     F2 00 62 FC | 	wrlong	_var01, objptr
13288                 | ' gosubtop+=1
13288                 | ' if compiledline(lineptr_e+1).result_type=token_end then
13288     06 00 00 FF 
1328c     B4 E4 85 F1 | 	sub	objptr, ##3252
13290     F2 00 02 FB | 	rdlong	_var01, objptr
13294     01 00 06 F1 | 	add	_var01, #1
13298     00 03 02 F6 | 	mov	_var02, _var01
1329c     01 02 66 F0 | 	shl	_var02, #1
132a0     00 03 02 F1 | 	add	_var02, _var01
132a4     02 02 66 F0 | 	shl	_var02, #2
132a8     03 00 00 FF 
132ac     04 E4 85 F1 | 	sub	objptr, ##1540
132b0     F2 02 02 F1 | 	add	_var02, objptr
132b4     08 02 06 F1 | 	add	_var02, #8
132b8     01 03 02 FB | 	rdlong	_var02, _var02
132bc     FE 03 0E F2 | 	cmp	_var02, #510 wz
132c0     47 00 00 FF 
132c4     7C E4 85 F1 | 	sub	objptr, ##36476
132c8     58 00 90 5D |  if_ne	jmp	#LR__1530
132cc     50 00 00 FF 
132d0     34 E5 05 F1 | 	add	objptr, ##41268
132d4     F2 02 02 FB | 	rdlong	_var02, objptr
132d8     03 02 66 F0 | 	shl	_var02, #3
132dc     03 00 00 FF 
132e0     88 E5 85 F1 | 	sub	objptr, ##1928
132e4     F2 02 02 F1 | 	add	_var02, objptr
132e8     03 00 00 FF 
132ec     0C E5 05 F1 | 	add	objptr, ##1804
132f0     F2 00 02 FB | 	rdlong	_var01, objptr
132f4     01 01 62 FC | 	wrlong	_var01, _var02
132f8     7C E4 05 F1 | 	add	objptr, #124
132fc     F2 02 02 FB | 	rdlong	_var02, objptr
13300     03 02 66 F0 | 	shl	_var02, #3
13304     03 00 00 FF 
13308     88 E5 85 F1 | 	sub	objptr, ##1928
1330c     F2 02 02 F1 | 	add	_var02, objptr
13310     04 02 06 F1 | 	add	_var02, #4
13314     01 01 68 FC | 	wrlong	#0, _var02
13318     4C 00 00 FF 
1331c     AC E5 85 F1 | 	sub	objptr, ##39340
13320     64 00 90 FD | 	jmp	#LR__1531
13324                 | LR__1530
13324     50 00 00 FF 
13328     34 E5 05 F1 | 	add	objptr, ##41268
1332c     F2 02 02 FB | 	rdlong	_var02, objptr
13330     03 02 66 F0 | 	shl	_var02, #3
13334     03 00 00 FF 
13338     88 E5 85 F1 | 	sub	objptr, ##1928
1333c     F2 02 02 F1 | 	add	_var02, objptr
13340     03 00 00 FF 
13344     14 E5 05 F1 | 	add	objptr, ##1812
13348     F2 00 02 FB | 	rdlong	_var01, objptr
1334c     01 01 62 FC | 	wrlong	_var01, _var02
13350     74 E4 05 F1 | 	add	objptr, #116
13354     F2 02 02 FB | 	rdlong	_var02, objptr
13358     03 02 66 F0 | 	shl	_var02, #3
1335c     03 00 00 FF 
13360     88 E5 85 F1 | 	sub	objptr, ##1928
13364     F2 02 02 F1 | 	add	_var02, objptr
13368     02 00 00 FF 
1336c     2C E5 85 F1 | 	sub	objptr, ##1324
13370     F2 00 02 FB | 	rdlong	_var01, objptr
13374     4A 00 00 FF 
13378     80 E4 85 F1 | 	sub	objptr, ##38016
1337c     02 00 06 F1 | 	add	_var01, #2
13380     04 02 06 F1 | 	add	_var02, #4
13384     01 01 62 FC | 	wrlong	_var01, _var02
13388                 | LR__1531
13388                 | _do_gosub_ret
13388     2D 00 64 FD | 	ret
1338c                 | 
1338c                 | ' 
1338c                 | ' '--------------------- goto
1338c                 | ' 
1338c                 | ' '------- fast goto
1338c                 | ' 
1338c                 | ' sub do_fast_goto
1338c                 | _do_fast_goto
1338c     02 4A 05 F6 | 	mov	COUNT_, #2
13390     A8 00 A0 FD | 	call	#pushregs_
13394                 | _do_fast_goto_enter
13394     4A 00 00 FF 
13398     80 E4 05 F1 | 	add	objptr, ##38016
1339c     F2 12 02 FB | 	rdlong	arg01, objptr
133a0     09 27 02 F6 | 	mov	local01, arg01
133a4     01 26 66 F0 | 	shl	local01, #1
133a8     09 27 02 F1 | 	add	local01, arg01
133ac     02 26 66 F0 | 	shl	local01, #2
133b0     03 00 00 FF 
133b4     04 E4 85 F1 | 	sub	objptr, ##1540
133b8     F2 26 02 F1 | 	add	local01, objptr
133bc     13 29 02 FB | 	rdlong	local02, local01
133c0     14 13 02 F6 | 	mov	arg01, local02
133c4     47 00 00 FF 
133c8     7C E4 85 F1 | 	sub	objptr, ##36476
133cc     54 04 B1 FD | 	call	#_pslpeek
133d0     FD 12 02 F6 | 	mov	arg01, result1
133d4                 | ' 
133d4                 | ' testptr=compiledline(lineptr_e).result.uresult
133d4                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
133d4                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
133d4     4A 00 00 FF 
133d8     80 E4 05 F1 | 	add	objptr, ##38016
133dc     F2 FA 01 FB | 	rdlong	result1, objptr
133e0     FD 26 02 F6 | 	mov	local01, result1
133e4     01 26 66 F0 | 	shl	local01, #1
133e8     FD 26 02 F1 | 	add	local01, result1
133ec     02 26 66 F0 | 	shl	local01, #2
133f0     03 00 00 FF 
133f4     04 E4 85 F1 | 	sub	objptr, ##1540
133f8     F2 26 02 F1 | 	add	local01, objptr
133fc     04 26 06 F1 | 	add	local01, #4
13400     13 27 02 FB | 	rdlong	local01, local01
13404     13 13 0A F2 | 	cmp	arg01, local01 wz
13408     47 00 00 FF 
1340c     7C E4 85 F1 | 	sub	objptr, ##36476
13410     58 00 90 5D |  if_ne	jmp	#LR__1540
13414     50 00 00 FF 
13418     B8 E4 05 F1 | 	add	objptr, ##41144
1341c     F2 28 62 FC | 	wrlong	local02, objptr
13420     06 00 00 FF 
13424     3C E4 85 F1 | 	sub	objptr, ##3132
13428     F2 28 02 FB | 	rdlong	local02, objptr
1342c     01 28 86 F1 | 	sub	local02, #1
13430     04 E4 05 F1 | 	add	objptr, #4
13434     F2 28 62 FC | 	wrlong	local02, objptr
13438                 | '   runptr=testptr
13438                 | '   lineptr_e=lineptr-1
13438                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
13438     06 00 00 FF 
1343c     84 E4 05 F1 | 	add	objptr, ##3204
13440     F2 28 02 FB | 	rdlong	local02, objptr
13444     50 00 00 FF 
13448     04 E5 85 F1 | 	sub	objptr, ##41220
1344c     FF FF 3F FF 
13450     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
13454     50 00 00 AF 
13458     04 E5 05 A1 |  if_e	add	objptr, ##41220
1345c     F2 00 68 AC |  if_e	wrlong	#0, objptr
13460     50 00 00 AF 
13464     04 E5 85 A1 |  if_e	sub	objptr, ##41220
13468     04 00 90 FD | 	jmp	#LR__1541
1346c                 | LR__1540
1346c     0C 00 B0 FD | 	call	#_do_find_goto
13470                 | LR__1541
13470     A7 F0 03 F6 | 	mov	ptra, fp
13474     B2 00 A0 FD | 	call	#popregs_
13478                 | _do_fast_goto_ret
13478     2D 00 64 FD | 	ret
1347c                 | 
1347c                 | ' 
1347c                 | ' '------- find goto  
1347c                 | ' 
1347c                 | ' sub do_find_goto
1347c                 | _do_find_goto
1347c     03 4A 05 F6 | 	mov	COUNT_, #3
13480     A8 00 A0 FD | 	call	#pushregs_
13484     24 F0 07 F1 | 	add	ptra, #36
13488                 | _do_find_goto_enter
13488     4A 00 00 FF 
1348c     80 E4 05 F1 | 	add	objptr, ##38016
13490     F2 26 02 FB | 	rdlong	local01, objptr
13494     13 29 02 F6 | 	mov	local02, local01
13498     01 28 66 F0 | 	shl	local02, #1
1349c     13 29 02 F1 | 	add	local02, local01
134a0     02 28 66 F0 | 	shl	local02, #2
134a4     03 00 00 FF 
134a8     04 E4 85 F1 | 	sub	objptr, ##1540
134ac     F2 28 02 F1 | 	add	local02, objptr
134b0     04 28 06 F1 | 	add	local02, #4
134b4     14 29 02 FB | 	rdlong	local02, local02
134b8     A7 28 62 FC | 	wrlong	local02, fp
134bc     03 00 00 FF 
134c0     0C E4 05 F1 | 	add	objptr, ##1548
134c4     F2 2A 02 FB | 	rdlong	local03, objptr
134c8     4A 00 00 FF 
134cc     88 E4 85 F1 | 	sub	objptr, ##38024
134d0     04 4E 05 F1 | 	add	fp, #4
134d4     A7 2A 62 FC | 	wrlong	local03, fp
134d8     04 4E 85 F1 | 	sub	fp, #4
134dc                 | ' 
134dc                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
134dc                 | ' gotoptr=programstart
134dc                 | ' do
134dc                 | LR__1550
134dc     0C 4E 05 F1 | 	add	fp, #12
134e0     A7 12 02 F6 | 	mov	arg01, fp
134e4     08 4E 85 F1 | 	sub	fp, #8
134e8     A7 14 02 FB | 	rdlong	arg02, fp
134ec     04 4E 85 F1 | 	sub	fp, #4
134f0     18 16 06 F6 | 	mov	arg03, #24
134f4     0B 00 00 FF 
134f8     CC E4 05 F1 | 	add	objptr, ##5836
134fc     E8 2D B1 FD | 	call	#_psram_spin2_read1
13500     0B 00 00 FF 
13504     CC E4 85 F1 | 	sub	objptr, ##5836
13508                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
13508                 | '   if gotoheader(0)<>$FFFFFFFF then
13508     0C 4E 05 F1 | 	add	fp, #12
1350c     A7 2A 02 FB | 	rdlong	local03, fp
13510     0C 4E 85 F1 | 	sub	fp, #12
13514     FF FF 7F FF 
13518     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
1351c     24 00 90 AD |  if_e	jmp	#LR__1551
13520     04 4E 05 F1 | 	add	fp, #4
13524     A7 2A 02 FB | 	rdlong	local03, fp
13528     04 4E 05 F1 | 	add	fp, #4
1352c     A7 2A 62 FC | 	wrlong	local03, fp
13530     18 4E 05 F1 | 	add	fp, #24
13534     A7 2A 02 FB | 	rdlong	local03, fp
13538     1C 4E 85 F1 | 	sub	fp, #28
1353c     A7 2A 62 FC | 	wrlong	local03, fp
13540     04 4E 85 F1 | 	sub	fp, #4
13544                 | LR__1551
13544     20 4E 05 F1 | 	add	fp, #32
13548     A7 2A 02 FB | 	rdlong	local03, fp
1354c     20 4E 85 F1 | 	sub	fp, #32
13550     FF FF 3F FF 
13554     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
13558     0C 4E 05 51 |  if_ne	add	fp, #12
1355c     A7 26 02 5B |  if_ne	rdlong	local01, fp
13560     0C 4E 85 51 |  if_ne	sub	fp, #12
13564     FF FF 7F 5F 
13568     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
1356c     18 00 90 AD |  if_e	jmp	#LR__1552
13570     0C 4E 05 F1 | 	add	fp, #12
13574     A7 2A 02 FB | 	rdlong	local03, fp
13578     0C 4E 85 F1 | 	sub	fp, #12
1357c     A7 28 02 FB | 	rdlong	local02, fp
13580     14 2B 0A F2 | 	cmp	local03, local02 wz
13584     54 FF 9F 5D |  if_ne	jmp	#LR__1550
13588                 | LR__1552
13588                 | ' 
13588                 | ' if gotoheader(0)=gotoline then
13588     0C 4E 05 F1 | 	add	fp, #12
1358c     A7 2A 02 FB | 	rdlong	local03, fp
13590     0C 4E 85 F1 | 	sub	fp, #12
13594     A7 26 02 FB | 	rdlong	local01, fp
13598     13 2B 0A F2 | 	cmp	local03, local01 wz
1359c     D8 00 90 5D |  if_ne	jmp	#LR__1553
135a0     4A 00 00 FF 
135a4     80 E4 05 F1 | 	add	objptr, ##38016
135a8     F2 26 02 FB | 	rdlong	local01, objptr
135ac     13 29 02 F6 | 	mov	local02, local01
135b0     01 28 66 F0 | 	shl	local02, #1
135b4     13 29 02 F1 | 	add	local02, local01
135b8     02 28 66 F0 | 	shl	local02, #2
135bc     03 00 00 FF 
135c0     04 E4 85 F1 | 	sub	objptr, ##1540
135c4     F2 28 02 F1 | 	add	local02, objptr
135c8     08 4E 05 F1 | 	add	fp, #8
135cc     A7 2A 02 FB | 	rdlong	local03, fp
135d0     14 2B 62 FC | 	wrlong	local03, local02
135d4     03 00 00 FF 
135d8     04 E4 05 F1 | 	add	objptr, ##1540
135dc     F2 26 02 FB | 	rdlong	local01, objptr
135e0     13 29 02 F6 | 	mov	local02, local01
135e4     01 28 66 F0 | 	shl	local02, #1
135e8     13 29 02 F1 | 	add	local02, local01
135ec     02 28 66 F0 | 	shl	local02, #2
135f0     03 00 00 FF 
135f4     04 E4 85 F1 | 	sub	objptr, ##1540
135f8     F2 28 02 F1 | 	add	local02, objptr
135fc     08 28 06 F1 | 	add	local02, #8
13600     14 9D 68 FC | 	wrlong	#78, local02
13604     03 00 00 FF 
13608     04 E4 05 F1 | 	add	objptr, ##1540
1360c     F2 28 02 FB | 	rdlong	local02, objptr
13610     14 13 02 F6 | 	mov	arg01, local02
13614     01 12 66 F0 | 	shl	arg01, #1
13618     14 13 02 F1 | 	add	arg01, local02
1361c     02 12 66 F0 | 	shl	arg01, #2
13620     03 00 00 FF 
13624     04 E4 85 F1 | 	sub	objptr, ##1540
13628     F2 12 02 F1 | 	add	arg01, objptr
1362c     09 00 00 FF 
13630     44 E4 05 F1 | 	add	objptr, ##4676
13634     F2 14 02 FB | 	rdlong	arg02, objptr
13638     02 2A 06 F6 | 	mov	local03, #2
1363c     14 2B 02 F1 | 	add	local03, local02
13640     0B 00 00 FF 
13644     5C E4 85 F1 | 	sub	objptr, ##5724
13648     F2 16 02 FB | 	rdlong	arg03, objptr
1364c     0B 2B 02 FD | 	qmul	local03, arg03
13650     08 4E 85 F1 | 	sub	fp, #8
13654     39 00 00 FF 
13658     98 E5 85 F1 | 	sub	objptr, ##29592
1365c     18 2A 62 FD | 	getqx	local03
13660     15 15 02 F1 | 	add	arg02, local03
13664     1C 2D B1 FD | 	call	#_psram_spin2_write
13668     0B 00 00 FF 
1366c     CC E4 85 F1 | 	sub	objptr, ##5836
13670     18 FD BF FD | 	call	#_do_fast_goto
13674     0C 00 90 FD | 	jmp	#LR__1554
13678                 | LR__1553
13678     26 12 06 F6 | 	mov	arg01, #38
1367c     00 14 06 F6 | 	mov	arg02, #0
13680     D0 FE B0 FD | 	call	#_printerror
13684                 | LR__1554
13684     A7 F0 03 F6 | 	mov	ptra, fp
13688     B2 00 A0 FD | 	call	#popregs_
1368c                 | _do_find_goto_ret
1368c     2D 00 64 FD | 	ret
13690                 | 
13690                 | ' 
13690                 | ' '------- slow goto  
13690                 | ' 
13690                 | ' sub do_slow_goto
13690                 | _do_slow_goto
13690     02 4A 05 F6 | 	mov	COUNT_, #2
13694     A8 00 A0 FD | 	call	#pushregs_
13698     30 F0 07 F1 | 	add	ptra, #48
1369c     24 A0 BF FD | 	call	#_pop
136a0     FF 26 02 F6 | 	mov	local01, result3
136a4     24 4E 05 F1 | 	add	fp, #36
136a8     A7 FA 61 FC | 	wrlong	result1, fp
136ac     04 4E 05 F1 | 	add	fp, #4
136b0     A7 FC 61 FC | 	wrlong	result2, fp
136b4     04 4E 05 F1 | 	add	fp, #4
136b8     A7 26 62 FC | 	wrlong	local01, fp
136bc     08 4E 85 F1 | 	sub	fp, #8
136c0     A7 12 02 F6 | 	mov	arg01, fp
136c4     24 4E 85 F1 | 	sub	fp, #36
136c8     DC A1 BF FD | 	call	#_converttoint
136cc     A7 FA 61 FC | 	wrlong	result1, fp
136d0     4A 00 00 FF 
136d4     88 E4 05 F1 | 	add	objptr, ##38024
136d8     F2 28 02 FB | 	rdlong	local02, objptr
136dc     4A 00 00 FF 
136e0     88 E4 85 F1 | 	sub	objptr, ##38024
136e4     04 4E 05 F1 | 	add	fp, #4
136e8     A7 28 62 FC | 	wrlong	local02, fp
136ec     04 4E 85 F1 | 	sub	fp, #4
136f0                 | ' 
136f0                 | ' t1=pop() : gotoline=converttoint(t1)
136f0                 | ' gotoptr=programstart
136f0                 | ' do
136f0                 | LR__1560
136f0     0C 4E 05 F1 | 	add	fp, #12
136f4     A7 12 02 F6 | 	mov	arg01, fp
136f8     08 4E 85 F1 | 	sub	fp, #8
136fc     A7 14 02 FB | 	rdlong	arg02, fp
13700     04 4E 85 F1 | 	sub	fp, #4
13704     18 16 06 F6 | 	mov	arg03, #24
13708     0B 00 00 FF 
1370c     CC E4 05 F1 | 	add	objptr, ##5836
13710     D4 2B B1 FD | 	call	#_psram_spin2_read1
13714     0B 00 00 FF 
13718     CC E4 85 F1 | 	sub	objptr, ##5836
1371c                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
1371c                 | '   if gotoheader(0)<>$FFFFFFFF then
1371c     0C 4E 05 F1 | 	add	fp, #12
13720     A7 28 02 FB | 	rdlong	local02, fp
13724     0C 4E 85 F1 | 	sub	fp, #12
13728     FF FF 7F FF 
1372c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
13730     24 00 90 AD |  if_e	jmp	#LR__1561
13734     04 4E 05 F1 | 	add	fp, #4
13738     A7 28 02 FB | 	rdlong	local02, fp
1373c     04 4E 05 F1 | 	add	fp, #4
13740     A7 28 62 FC | 	wrlong	local02, fp
13744     18 4E 05 F1 | 	add	fp, #24
13748     A7 28 02 FB | 	rdlong	local02, fp
1374c     1C 4E 85 F1 | 	sub	fp, #28
13750     A7 28 62 FC | 	wrlong	local02, fp
13754     04 4E 85 F1 | 	sub	fp, #4
13758                 | LR__1561
13758     20 4E 05 F1 | 	add	fp, #32
1375c     A7 28 02 FB | 	rdlong	local02, fp
13760     20 4E 85 F1 | 	sub	fp, #32
13764     FF FF 3F FF 
13768     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
1376c     0C 4E 05 51 |  if_ne	add	fp, #12
13770     A7 26 02 5B |  if_ne	rdlong	local01, fp
13774     0C 4E 85 51 |  if_ne	sub	fp, #12
13778     FF FF 7F 5F 
1377c     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
13780     18 00 90 AD |  if_e	jmp	#LR__1562
13784     0C 4E 05 F1 | 	add	fp, #12
13788     A7 28 02 FB | 	rdlong	local02, fp
1378c     0C 4E 85 F1 | 	sub	fp, #12
13790     A7 16 02 FB | 	rdlong	arg03, fp
13794     0B 29 0A F2 | 	cmp	local02, arg03 wz
13798     54 FF 9F 5D |  if_ne	jmp	#LR__1560
1379c                 | LR__1562
1379c                 | ' if gotoheader(0)=gotoline then  
1379c     0C 4E 05 F1 | 	add	fp, #12
137a0     A7 28 02 FB | 	rdlong	local02, fp
137a4     0C 4E 85 F1 | 	sub	fp, #12
137a8     A7 26 02 FB | 	rdlong	local01, fp
137ac     13 29 0A F2 | 	cmp	local02, local01 wz
137b0     60 00 90 5D |  if_ne	jmp	#LR__1563
137b4     08 4E 05 F1 | 	add	fp, #8
137b8     A7 28 02 FB | 	rdlong	local02, fp
137bc     08 4E 85 F1 | 	sub	fp, #8
137c0     50 00 00 FF 
137c4     B8 E4 05 F1 | 	add	objptr, ##41144
137c8     F2 28 62 FC | 	wrlong	local02, objptr
137cc     06 00 00 FF 
137d0     3C E4 85 F1 | 	sub	objptr, ##3132
137d4     F2 28 02 FB | 	rdlong	local02, objptr
137d8     01 28 86 F1 | 	sub	local02, #1
137dc     04 E4 05 F1 | 	add	objptr, #4
137e0     F2 28 62 FC | 	wrlong	local02, objptr
137e4                 | '    runptr=oldgotoptr
137e4                 | '    lineptr_e=lineptr-1
137e4                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
137e4     06 00 00 FF 
137e8     84 E4 05 F1 | 	add	objptr, ##3204
137ec     F2 28 02 FB | 	rdlong	local02, objptr
137f0     50 00 00 FF 
137f4     04 E5 85 F1 | 	sub	objptr, ##41220
137f8     FF FF 3F FF 
137fc     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
13800     50 00 00 AF 
13804     04 E5 05 A1 |  if_e	add	objptr, ##41220
13808     F2 00 68 AC |  if_e	wrlong	#0, objptr
1380c     50 00 00 AF 
13810     04 E5 85 A1 |  if_e	sub	objptr, ##41220
13814                 | LR__1563
13814     A7 F0 03 F6 | 	mov	ptra, fp
13818     B2 00 A0 FD | 	call	#popregs_
1381c                 | _do_slow_goto_ret
1381c     2D 00 64 FD | 	ret
13820                 | 
13820                 | ' 
13820                 | ' ' ----------------  hex$
13820                 | ' 
13820                 | ' sub do_hex
13820                 | _do_hex
13820     01 4A 05 F6 | 	mov	COUNT_, #1
13824     A8 00 A0 FD | 	call	#pushregs_
13828     18 F0 07 F1 | 	add	ptra, #24
1382c     4A 00 00 FF 
13830     80 E4 05 F1 | 	add	objptr, ##38016
13834     F2 26 02 FB | 	rdlong	local01, objptr
13838     13 17 02 F6 | 	mov	arg03, local01
1383c     01 16 66 F0 | 	shl	arg03, #1
13840     13 17 02 F1 | 	add	arg03, local01
13844     02 16 66 F0 | 	shl	arg03, #2
13848     03 00 00 FF 
1384c     04 E4 85 F1 | 	sub	objptr, ##1540
13850     F2 16 02 F1 | 	add	arg03, objptr
13854     0B 17 02 FB | 	rdlong	arg03, arg03
13858     0C 4E 05 F1 | 	add	fp, #12
1385c     A7 16 62 FC | 	wrlong	arg03, fp
13860                 | ' 
13860                 | ' numpar=compiledline(lineptr_e).result.uresult
13860                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
13860     0C 4E 85 F1 | 	sub	fp, #12
13864     03 16 16 F2 | 	cmp	arg03, #3 wc
13868     47 00 00 FF 
1386c     7C E4 85 F1 | 	sub	objptr, ##36476
13870     0C 4E 05 C1 |  if_b	add	fp, #12
13874     A7 26 0A CB |  if_b	rdlong	local01, fp wz
13878     0C 4E 85 C1 |  if_b	sub	fp, #12
1387c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1570
13880     00 12 06 F6 | 	mov	arg01, #0
13884     10 94 B1 FD | 	call	#__system___getiolock_0613
13888     FD 12 02 F6 | 	mov	arg01, result1
1388c     E0 36 B1 FD | 	call	#__system___lockmem
13890     BA 01 00 FF 
13894     9C 14 06 F6 | 	mov	arg02, ##@LR__5940
13898     00 12 06 F6 | 	mov	arg01, #0
1389c     00 16 06 F6 | 	mov	arg03, #0
138a0     C0 43 B1 FD | 	call	#__system___basic_print_string
138a4     00 12 06 F6 | 	mov	arg01, #0
138a8     EC 93 B1 FD | 	call	#__system___getiolock_0613
138ac     FD 00 68 FC | 	wrlong	#0, result1
138b0     27 12 06 F6 | 	mov	arg01, #39
138b4     00 14 06 F6 | 	mov	arg02, #0
138b8     98 FC B0 FD | 	call	#_printerror
138bc     B8 00 90 FD | 	jmp	#LR__1573
138c0                 | LR__1570
138c0                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
138c0     0C 4E 05 F1 | 	add	fp, #12
138c4     A7 26 02 FB | 	rdlong	local01, fp
138c8     0C 4E 85 F1 | 	sub	fp, #12
138cc     02 26 0E F2 | 	cmp	local01, #2 wz
138d0     38 00 90 5D |  if_ne	jmp	#LR__1571
138d4     EC 9D BF FD | 	call	#_pop
138d8     FF 26 02 F6 | 	mov	local01, result3
138dc     A7 FA 61 FC | 	wrlong	result1, fp
138e0     04 4E 05 F1 | 	add	fp, #4
138e4     A7 FC 61 FC | 	wrlong	result2, fp
138e8     04 4E 05 F1 | 	add	fp, #4
138ec     A7 26 62 FC | 	wrlong	local01, fp
138f0     08 4E 85 F1 | 	sub	fp, #8
138f4     A7 12 02 F6 | 	mov	arg01, fp
138f8     AC 9F BF FD | 	call	#_converttoint
138fc     14 4E 05 F1 | 	add	fp, #20
13900     A7 FA 61 FC | 	wrlong	result1, fp
13904     14 4E 85 F1 | 	sub	fp, #20
13908     0C 00 90 FD | 	jmp	#LR__1572
1390c                 | LR__1571
1390c     14 4E 05 F1 | 	add	fp, #20
13910     A7 10 68 FC | 	wrlong	#8, fp
13914     14 4E 85 F1 | 	sub	fp, #20
13918                 | LR__1572
13918     A8 9D BF FD | 	call	#_pop
1391c     FF 26 02 F6 | 	mov	local01, result3
13920     A7 FA 61 FC | 	wrlong	result1, fp
13924     04 4E 05 F1 | 	add	fp, #4
13928     A7 FC 61 FC | 	wrlong	result2, fp
1392c     04 4E 05 F1 | 	add	fp, #4
13930     A7 26 62 FC | 	wrlong	local01, fp
13934     08 4E 85 F1 | 	sub	fp, #8
13938     A7 12 02 F6 | 	mov	arg01, fp
1393c     68 9F BF FD | 	call	#_converttoint
13940     10 4E 05 F1 | 	add	fp, #16
13944     A7 FA 61 FC | 	wrlong	result1, fp
13948     FD 12 02 F6 | 	mov	arg01, result1
1394c     04 4E 05 F1 | 	add	fp, #4
13950     A7 14 02 FB | 	rdlong	arg02, fp
13954     14 4E 85 F1 | 	sub	fp, #20
13958     10 16 06 F6 | 	mov	arg03, #16
1395c     E0 58 B1 FD | 	call	#__system__Number_S
13960     A7 FA 61 FC | 	wrlong	result1, fp
13964     08 4E 05 F1 | 	add	fp, #8
13968     A7 3E 68 FC | 	wrlong	#31, fp
1396c     08 4E 85 F1 | 	sub	fp, #8
13970     A7 12 02 F6 | 	mov	arg01, fp
13974     E4 9D BF FD | 	call	#_push
13978                 | LR__1573
13978     A7 F0 03 F6 | 	mov	ptra, fp
1397c     B2 00 A0 FD | 	call	#popregs_
13980                 | _do_hex_ret
13980     2D 00 64 FD | 	ret
13984                 | 
13984                 | ' 
13984                 | ' ' ----------------  if
13984                 | ' 
13984                 | ' sub do_if
13984                 | _do_if
13984     05 4A 05 F6 | 	mov	COUNT_, #5
13988     A8 00 A0 FD | 	call	#pushregs_
1398c     34 9D BF FD | 	call	#_pop
13990     FD 26 0A F6 | 	mov	local01, result1 wz
13994     FE 28 02 F6 | 	mov	local02, result2
13998     FF 2A 02 F6 | 	mov	local03, result3
1399c                 | ' t1=pop()
1399c                 | ' ' if uresult=0, jump over else
1399c                 | ' if t1.result.uresult = 0 then 
1399c     BC 00 90 5D |  if_ne	jmp	#LR__1582
139a0                 | '   for i=lineptr_e to lineptr-1
139a0     4A 00 00 FF 
139a4     80 E4 05 F1 | 	add	objptr, ##38016
139a8     F2 2C 02 FB | 	rdlong	local04, objptr
139ac     04 E4 85 F1 | 	sub	objptr, #4
139b0     F2 2E 02 FB | 	rdlong	local05, objptr
139b4     4A 00 00 FF 
139b8     7C E4 85 F1 | 	sub	objptr, ##38012
139bc                 | LR__1580
139bc     17 2D 52 F2 | 	cmps	local04, local05 wc
139c0     78 00 90 3D |  if_ae	jmp	#LR__1581
139c4     16 FF 01 F6 | 	mov	result3, local04
139c8     01 FE 65 F0 | 	shl	result3, #1
139cc     16 FF 01 F1 | 	add	result3, local04
139d0     02 FE 65 F0 | 	shl	result3, #2
139d4     47 00 00 FF 
139d8     7C E4 05 F1 | 	add	objptr, ##36476
139dc     F2 FE 01 F1 | 	add	result3, objptr
139e0     FF 26 02 FB | 	rdlong	local01, result3
139e4     04 FE 05 F1 | 	add	result3, #4
139e8     FF FC 01 FB | 	rdlong	result2, result3
139ec     16 FF 01 F6 | 	mov	result3, local04
139f0     01 FE 65 F0 | 	shl	result3, #1
139f4     16 FF 01 F1 | 	add	result3, local04
139f8     02 FE 65 F0 | 	shl	result3, #2
139fc     F2 FE 01 F1 | 	add	result3, objptr
13a00     08 FE 05 F1 | 	add	result3, #8
13a04     FF FE 01 FB | 	rdlong	result3, result3
13a08     FE 28 02 F6 | 	mov	local02, result2
13a0c     FF 2A 02 F6 | 	mov	local03, result3
13a10                 | '     t1=compiledline(i)
13a10                 | '     if t1.result_type=token_else then lineptr_e=i : return
13a10     5A 2A 0E F2 | 	cmp	local03, #90 wz
13a14     47 00 00 FF 
13a18     7C E4 85 F1 | 	sub	objptr, ##36476
13a1c     4A 00 00 AF 
13a20     80 E4 05 A1 |  if_e	add	objptr, ##38016
13a24     F2 2C 62 AC |  if_e	wrlong	local04, objptr
13a28     4A 00 00 AF 
13a2c     80 E4 85 A1 |  if_e	sub	objptr, ##38016
13a30     28 00 90 AD |  if_e	jmp	#LR__1583
13a34     01 2C 06 F1 | 	add	local04, #1
13a38     80 FF 9F FD | 	jmp	#LR__1580
13a3c                 | LR__1581
13a3c     4A 00 00 FF 
13a40     7C E4 05 F1 | 	add	objptr, ##38012
13a44     F2 2E 02 FB | 	rdlong	local05, objptr
13a48     01 2E 86 F1 | 	sub	local05, #1
13a4c     04 E4 05 F1 | 	add	objptr, #4
13a50     F2 2E 62 FC | 	wrlong	local05, objptr
13a54     4A 00 00 FF 
13a58     80 E4 85 F1 | 	sub	objptr, ##38016
13a5c                 | LR__1582
13a5c                 | LR__1583
13a5c     A7 F0 03 F6 | 	mov	ptra, fp
13a60     B2 00 A0 FD | 	call	#popregs_
13a64                 | _do_if_ret
13a64     2D 00 64 FD | 	ret
13a68                 | 
13a68                 | ' 
13a68                 | ' ' ----------------  inkey$
13a68                 | ' 
13a68                 | ' sub do_inkey
13a68                 | _do_inkey
13a68     02 4A 05 F6 | 	mov	COUNT_, #2
13a6c     A8 00 A0 FD | 	call	#pushregs_
13a70     0C F0 07 F1 | 	add	ptra, #12
13a74     9C 2C B1 FD | 	call	#_usbnew_spin2_get_key
13a78     45 00 00 FF 
13a7c     74 E4 05 F1 | 	add	objptr, ##35444
13a80     F2 FA 61 FC | 	wrlong	result1, objptr
13a84                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
13a84     45 00 00 FF 
13a88     74 E4 85 F1 | 	sub	objptr, ##35444
13a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
13a90     94 00 90 AD |  if_e	jmp	#LR__1591
13a94     45 00 00 FF 
13a98     74 E4 05 F1 | 	add	objptr, ##35444
13a9c     F2 1C 02 FB | 	rdlong	arg06, objptr
13aa0     45 00 00 FF 
13aa4     74 E4 85 F1 | 	sub	objptr, ##35444
13aa8     00 00 40 FF 
13aac     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
13ab0     45 00 00 CF 
13ab4     74 E4 05 C1 |  if_b	add	objptr, ##35444
13ab8     F2 26 02 CB |  if_b	rdlong	local01, objptr
13abc     45 00 00 CF 
13ac0     74 E4 85 C1 |  if_b	sub	objptr, ##35444
13ac4     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
13ac8     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
13acc     58 00 90 3D |  if_ae	jmp	#LR__1591
13ad0                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
13ad0     50 00 00 FF 
13ad4     3C E5 05 F1 | 	add	objptr, ##41276
13ad8     F2 1C 02 FB | 	rdlong	arg06, objptr
13adc     50 00 00 FF 
13ae0     3C E5 85 F1 | 	sub	objptr, ##41276
13ae4     01 1C 0E F2 | 	cmp	arg06, #1 wz
13ae8     3C 00 90 5D |  if_ne	jmp	#LR__1590
13aec     52 00 00 FF 
13af0     A4 E4 05 F1 | 	add	objptr, ##42148
13af4     F2 14 02 FB | 	rdlong	arg02, objptr
13af8     04 E4 85 F1 | 	sub	objptr, #4
13afc     F2 1A 02 FB | 	rdlong	arg05, objptr
13b00     07 12 06 F6 | 	mov	arg01, #7
13b04     56 00 00 FF 
13b08     44 16 06 F6 | 	mov	arg03, ##44100
13b0c     0C 18 C6 F9 | 	decod	arg04, #12
13b10     01 1C 66 F6 | 	neg	arg06, #1
13b14     46 00 00 FF 
13b18     D4 E5 85 F1 | 	sub	objptr, ##36308
13b1c     E0 2F B1 FD | 	call	#_audio096_spin2_play
13b20     0B 00 00 FF 
13b24     CC E4 85 F1 | 	sub	objptr, ##5836
13b28                 | LR__1590
13b28                 | LR__1591
13b28                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
13b28     45 00 00 FF 
13b2c     74 E4 05 F1 | 	add	objptr, ##35444
13b30     F2 1C 0A FB | 	rdlong	arg06, objptr wz
13b34     45 00 00 FF 
13b38     74 E4 85 F1 | 	sub	objptr, ##35444
13b3c     D4 01 90 AD |  if_e	jmp	#LR__1600
13b40     45 00 00 FF 
13b44     74 E4 05 F1 | 	add	objptr, ##35444
13b48     F2 1C 02 FB | 	rdlong	arg06, objptr
13b4c     45 00 00 FF 
13b50     74 E4 85 F1 | 	sub	objptr, ##35444
13b54     00 00 40 FF 
13b58     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
13b5c     45 00 00 CF 
13b60     74 E4 05 C1 |  if_b	add	objptr, ##35444
13b64     F2 26 02 CB |  if_b	rdlong	local01, objptr
13b68     45 00 00 CF 
13b6c     74 E4 85 C1 |  if_b	sub	objptr, ##35444
13b70     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
13b74     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
13b78     98 01 90 3D |  if_ae	jmp	#LR__1600
13b7c                 | '   if leds and 2 = 2 then 
13b7c     52 00 00 FF 
13b80     E0 E4 05 F1 | 	add	objptr, ##42208
13b84     F2 26 0A FB | 	rdlong	local01, objptr wz
13b88     52 00 00 FF 
13b8c     E0 E4 85 F1 | 	sub	objptr, ##42208
13b90     58 01 90 AD |  if_e	jmp	#LR__1599
13b94                 | '     if key>96 andalso key<123 then
13b94     45 00 00 FF 
13b98     74 E4 05 F1 | 	add	objptr, ##35444
13b9c     F2 26 02 FB | 	rdlong	local01, objptr
13ba0     45 00 00 FF 
13ba4     74 E4 85 F1 | 	sub	objptr, ##35444
13ba8     61 26 16 F2 | 	cmp	local01, #97 wc
13bac     3C 00 90 CD |  if_b	jmp	#LR__1592
13bb0     45 00 00 FF 
13bb4     74 E4 05 F1 | 	add	objptr, ##35444
13bb8     F2 26 02 FB | 	rdlong	local01, objptr
13bbc     45 00 00 FF 
13bc0     74 E4 85 F1 | 	sub	objptr, ##35444
13bc4     7B 26 16 F2 | 	cmp	local01, #123 wc
13bc8     20 00 90 3D |  if_ae	jmp	#LR__1592
13bcc     45 00 00 FF 
13bd0     74 E4 05 F1 | 	add	objptr, ##35444
13bd4     F2 26 02 FB | 	rdlong	local01, objptr
13bd8     20 26 86 F1 | 	sub	local01, #32
13bdc     F2 26 62 FC | 	wrlong	local01, objptr
13be0     45 00 00 FF 
13be4     74 E4 85 F1 | 	sub	objptr, ##35444
13be8     00 01 90 FD | 	jmp	#LR__1598
13bec                 | LR__1592
13bec     45 00 00 FF 
13bf0     74 E4 05 F1 | 	add	objptr, ##35444
13bf4     F2 26 02 FB | 	rdlong	local01, objptr
13bf8     45 00 00 FF 
13bfc     74 E4 85 F1 | 	sub	objptr, ##35444
13c00     41 26 16 F2 | 	cmp	local01, #65 wc
13c04     3C 00 90 CD |  if_b	jmp	#LR__1593
13c08     45 00 00 FF 
13c0c     74 E4 05 F1 | 	add	objptr, ##35444
13c10     F2 26 02 FB | 	rdlong	local01, objptr
13c14     45 00 00 FF 
13c18     74 E4 85 F1 | 	sub	objptr, ##35444
13c1c     5B 26 16 F2 | 	cmp	local01, #91 wc
13c20     20 00 90 3D |  if_ae	jmp	#LR__1593
13c24     45 00 00 FF 
13c28     74 E4 05 F1 | 	add	objptr, ##35444
13c2c     F2 26 02 FB | 	rdlong	local01, objptr
13c30     20 26 06 F1 | 	add	local01, #32
13c34     F2 26 62 FC | 	wrlong	local01, objptr
13c38     45 00 00 FF 
13c3c     74 E4 85 F1 | 	sub	objptr, ##35444
13c40     A8 00 90 FD | 	jmp	#LR__1597
13c44                 | LR__1593
13c44     45 00 00 FF 
13c48     74 E4 05 F1 | 	add	objptr, ##35444
13c4c     F2 26 02 FB | 	rdlong	local01, objptr
13c50     45 00 00 FF 
13c54     74 E4 85 F1 | 	sub	objptr, ##35444
13c58     17 26 16 F2 | 	cmp	local01, #23 wc
13c5c     3C 00 90 CD |  if_b	jmp	#LR__1594
13c60     45 00 00 FF 
13c64     74 E4 05 F1 | 	add	objptr, ##35444
13c68     F2 26 02 FB | 	rdlong	local01, objptr
13c6c     45 00 00 FF 
13c70     74 E4 85 F1 | 	sub	objptr, ##35444
13c74     20 26 16 F2 | 	cmp	local01, #32 wc
13c78     20 00 90 3D |  if_ae	jmp	#LR__1594
13c7c     45 00 00 FF 
13c80     74 E4 05 F1 | 	add	objptr, ##35444
13c84     F2 26 02 FB | 	rdlong	local01, objptr
13c88     09 26 86 F1 | 	sub	local01, #9
13c8c     F2 26 62 FC | 	wrlong	local01, objptr
13c90     45 00 00 FF 
13c94     74 E4 85 F1 | 	sub	objptr, ##35444
13c98     50 00 90 FD | 	jmp	#LR__1596
13c9c                 | LR__1594
13c9c     45 00 00 FF 
13ca0     74 E4 05 F1 | 	add	objptr, ##35444
13ca4     F2 28 02 FB | 	rdlong	local02, objptr
13ca8     45 00 00 FF 
13cac     74 E4 85 F1 | 	sub	objptr, ##35444
13cb0     0E 28 16 F2 | 	cmp	local02, #14 wc
13cb4     34 00 90 CD |  if_b	jmp	#LR__1595
13cb8     45 00 00 FF 
13cbc     74 E4 05 F1 | 	add	objptr, ##35444
13cc0     F2 26 02 FB | 	rdlong	local01, objptr
13cc4     45 00 00 FF 
13cc8     74 E4 85 F1 | 	sub	objptr, ##35444
13ccc     17 26 16 F2 | 	cmp	local01, #23 wc
13cd0     52 00 00 CF 
13cd4     E4 E4 05 C1 |  if_b	add	objptr, ##42212
13cd8     F2 28 02 CB |  if_b	rdlong	local02, objptr
13cdc     27 28 06 C1 |  if_b	add	local02, #39
13ce0     F2 28 62 CC |  if_b	wrlong	local02, objptr
13ce4     52 00 00 CF 
13ce8     E4 E4 85 C1 |  if_b	sub	objptr, ##42212
13cec                 | LR__1595
13cec                 | LR__1596
13cec                 | LR__1597
13cec                 | LR__1598
13cec                 | LR__1599
13cec     45 00 00 FF 
13cf0     74 E4 05 F1 | 	add	objptr, ##35444
13cf4     F2 12 02 FB | 	rdlong	arg01, objptr
13cf8     45 00 00 FF 
13cfc     74 E4 85 F1 | 	sub	objptr, ##35444
13d00     D0 FB B0 FD | 	call	#_scantochar
13d04     FD 12 02 F6 | 	mov	arg01, result1
13d08     A4 54 B1 FD | 	call	#__system__Chr_S
13d0c     A7 FA 61 FC | 	wrlong	result1, fp
13d10     0C 00 90 FD | 	jmp	#LR__1601
13d14                 | LR__1600
13d14     BA 01 00 FF 
13d18     A3 28 06 F6 | 	mov	local02, ##@LR__5941
13d1c     A7 28 62 FC | 	wrlong	local02, fp
13d20                 | LR__1601
13d20     08 4E 05 F1 | 	add	fp, #8
13d24     A7 3E 68 FC | 	wrlong	#31, fp
13d28     08 4E 85 F1 | 	sub	fp, #8
13d2c     A7 12 02 F6 | 	mov	arg01, fp
13d30     28 9A BF FD | 	call	#_push
13d34     A7 F0 03 F6 | 	mov	ptra, fp
13d38     B2 00 A0 FD | 	call	#popregs_
13d3c                 | _do_inkey_ret
13d3c     2D 00 64 FD | 	ret
13d40                 | 
13d40                 | ' 
13d40                 | ' ' ----------------  ink
13d40                 | ' 
13d40                 | ' sub do_ink
13d40                 | _do_ink
13d40     00 4A 05 F6 | 	mov	COUNT_, #0
13d44     A8 00 A0 FD | 	call	#pushregs_
13d48     0C F0 07 F1 | 	add	ptra, #12
13d4c     74 99 BF FD | 	call	#_pop
13d50     FF 14 02 F6 | 	mov	arg02, result3
13d54     A7 FA 61 FC | 	wrlong	result1, fp
13d58     04 4E 05 F1 | 	add	fp, #4
13d5c     A7 FC 61 FC | 	wrlong	result2, fp
13d60     04 4E 05 F1 | 	add	fp, #4
13d64     A7 14 62 FC | 	wrlong	arg02, fp
13d68     08 4E 85 F1 | 	sub	fp, #8
13d6c     A7 12 02 F6 | 	mov	arg01, fp
13d70     34 9B BF FD | 	call	#_converttoint
13d74     37 00 00 FF 
13d78     3C E4 05 F1 | 	add	objptr, ##28220
13d7c     F2 FA 61 FC | 	wrlong	result1, objptr
13d80     04 E4 85 F1 | 	sub	objptr, #4
13d84     F2 14 02 FB | 	rdlong	arg02, objptr
13d88                 | ' 
13d88                 | ' write_color:=ff
13d88     36 00 00 FF 
13d8c     F7 E5 85 F1 | 	sub	objptr, ##28151
13d90     F2 FA 61 FC | 	wrlong	result1, objptr
13d94                 | ' write_background:=bb
13d94     04 E4 05 F1 | 	add	objptr, #4
13d98     F2 14 62 FC | 	wrlong	arg02, objptr
13d9c     36 00 00 FF 
13da0     F7 E5 05 F1 | 	add	objptr, ##28151
13da4     F2 12 02 FB | 	rdlong	arg01, objptr
13da8     37 00 00 FF 
13dac     3C E4 85 F1 | 	sub	objptr, ##28220
13db0     74 03 B1 FD | 	call	#_hg010b_spin2_setcursorcolor
13db4     A7 F0 03 F6 | 	mov	ptra, fp
13db8     B2 00 A0 FD | 	call	#popregs_
13dbc                 | _do_ink_ret
13dbc     2D 00 64 FD | 	ret
13dc0                 | 
13dc0                 | ' 
13dc0                 | ' ' ----------------  int
13dc0                 | ' 
13dc0                 | ' sub do_int
13dc0                 | _do_int
13dc0     02 4A 05 F6 | 	mov	COUNT_, #2
13dc4     A8 00 A0 FD | 	call	#pushregs_
13dc8     10 F0 07 F1 | 	add	ptra, #16
13dcc     F4 98 BF FD | 	call	#_pop
13dd0     FE 26 02 F6 | 	mov	local01, result2
13dd4     FF 28 02 F6 | 	mov	local02, result3
13dd8     A7 FA 61 FC | 	wrlong	result1, fp
13ddc     04 4E 05 F1 | 	add	fp, #4
13de0     A7 26 62 FC | 	wrlong	local01, fp
13de4     04 4E 05 F1 | 	add	fp, #4
13de8     A7 28 62 FC | 	wrlong	local02, fp
13dec                 | ' 
13dec                 | ' t1=pop()
13dec                 | ' select case t1.result_type
13dec     08 4E 85 F1 | 	sub	fp, #8
13df0     1E 28 0E F2 | 	cmp	local02, #30 wz
13df4     14 00 90 AD |  if_e	jmp	#LR__1610
13df8     1F 28 0E F2 | 	cmp	local02, #31 wz
13dfc     20 00 90 AD |  if_e	jmp	#LR__1611
13e00     2B 28 0E F2 | 	cmp	local02, #43 wz
13e04     34 00 90 AD |  if_e	jmp	#LR__1612
13e08     50 00 90 FD | 	jmp	#LR__1613
13e0c                 | LR__1610
13e0c     A7 12 02 FB | 	rdlong	arg01, fp
13e10     00 14 06 F6 | 	mov	arg02, #0
13e14     98 64 B1 FD | 	call	#__system___float_tointeger
13e18     A7 FA 61 FC | 	wrlong	result1, fp
13e1c     3C 00 90 FD | 	jmp	#LR__1613
13e20                 | LR__1611
13e20     A7 12 02 FB | 	rdlong	arg01, fp
13e24     CC 67 B1 FD | 	call	#__system____builtin_atof
13e28     FD 12 02 F6 | 	mov	arg01, result1
13e2c     00 14 06 F6 | 	mov	arg02, #0
13e30     7C 64 B1 FD | 	call	#__system___float_tointeger
13e34     A7 FA 61 FC | 	wrlong	result1, fp
13e38     20 00 90 FD | 	jmp	#LR__1613
13e3c                 | LR__1612
13e3c     A7 12 02 FB | 	rdlong	arg01, fp
13e40     F8 99 BF FD | 	call	#_convertstring
13e44     FD 12 02 F6 | 	mov	arg01, result1
13e48     A8 67 B1 FD | 	call	#__system____builtin_atof
13e4c     FD 12 02 F6 | 	mov	arg01, result1
13e50     00 14 06 F6 | 	mov	arg02, #0
13e54     58 64 B1 FD | 	call	#__system___float_tointeger
13e58     A7 FA 61 FC | 	wrlong	result1, fp
13e5c                 | LR__1613
13e5c     08 4E 05 F1 | 	add	fp, #8
13e60     A7 38 68 FC | 	wrlong	#28, fp
13e64     08 4E 85 F1 | 	sub	fp, #8
13e68     A7 12 02 F6 | 	mov	arg01, fp
13e6c     EC 98 BF FD | 	call	#_push
13e70     A7 F0 03 F6 | 	mov	ptra, fp
13e74     B2 00 A0 FD | 	call	#popregs_
13e78                 | _do_int_ret
13e78     2D 00 64 FD | 	ret
13e7c                 | 
13e7c                 | ' 
13e7c                 | ' ' ----------------  input
13e7c                 | ' 
13e7c                 | ' sub do_input
13e7c                 | _do_input
13e7c     11 4A 05 F6 | 	mov	COUNT_, #17
13e80     A8 00 A0 FD | 	call	#pushregs_
13e84     50 F1 07 F1 | 	add	ptra, #336
13e88     4A 00 00 FF 
13e8c     80 E4 05 F1 | 	add	objptr, ##38016
13e90     F2 FE 01 FB | 	rdlong	result3, objptr
13e94     FF FC 01 F6 | 	mov	result2, result3
13e98     01 FC 65 F0 | 	shl	result2, #1
13e9c     FF FC 01 F1 | 	add	result2, result3
13ea0     02 FC 65 F0 | 	shl	result2, #2
13ea4     03 00 00 FF 
13ea8     04 E4 85 F1 | 	sub	objptr, ##1540
13eac     F2 FC 01 F1 | 	add	result2, objptr
13eb0     FE FC 01 FB | 	rdlong	result2, result2
13eb4     08 4E 05 F1 | 	add	fp, #8
13eb8     A7 FC 61 FC | 	wrlong	result2, fp
13ebc                 | ' 
13ebc                 | ' numpar=compiledline(lineptr_e).result.uresult
13ebc                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
13ebc     08 4E 85 F1 | 	sub	fp, #8
13ec0     01 FC 15 F2 | 	cmp	result2, #1 wc
13ec4     47 00 00 FF 
13ec8     7C E4 85 F1 | 	sub	objptr, ##36476
13ecc     14 00 90 CD |  if_b	jmp	#LR__1620
13ed0     08 4E 05 F1 | 	add	fp, #8
13ed4     A7 FC 01 FB | 	rdlong	result2, fp
13ed8     08 4E 85 F1 | 	sub	fp, #8
13edc     41 FC 15 F2 | 	cmp	result2, #65 wc
13ee0     50 00 90 CD |  if_b	jmp	#LR__1621
13ee4                 | LR__1620
13ee4     00 12 06 F6 | 	mov	arg01, #0
13ee8     AC 8D B1 FD | 	call	#__system___getiolock_0613
13eec     FD 12 02 F6 | 	mov	arg01, result1
13ef0     7C 30 B1 FD | 	call	#__system___lockmem
13ef4     BA 01 00 FF 
13ef8     A4 14 06 F6 | 	mov	arg02, ##@LR__5942
13efc     00 12 06 F6 | 	mov	arg01, #0
13f00     00 16 06 F6 | 	mov	arg03, #0
13f04     5C 3D B1 FD | 	call	#__system___basic_print_string
13f08     00 12 06 F6 | 	mov	arg01, #0
13f0c     88 8D B1 FD | 	call	#__system___getiolock_0613
13f10     FD 00 68 FC | 	wrlong	#0, result1
13f14     50 00 00 FF 
13f18     F0 E4 05 F1 | 	add	objptr, ##41200
13f1c     F2 14 02 FB | 	rdlong	arg02, objptr
13f20     50 00 00 FF 
13f24     F0 E4 85 F1 | 	sub	objptr, ##41200
13f28     27 12 06 F6 | 	mov	arg01, #39
13f2c     24 F6 B0 FD | 	call	#_printerror
13f30     44 0B 90 FD | 	jmp	#LR__1670
13f34                 | LR__1621
13f34     08 4E 05 F1 | 	add	fp, #8
13f38     A7 FC 01 FB | 	rdlong	result2, fp
13f3c     01 FC 85 F1 | 	sub	result2, #1
13f40     28 4F 05 F1 | 	add	fp, #296
13f44     A7 FC 61 FC | 	wrlong	result2, fp
13f48     3C E4 05 F1 | 	add	objptr, #60
13f4c     F2 FC E1 FA | 	rdword	result2, objptr
13f50     FE FC 51 F6 | 	abs	result2, result2 wc
13f54     01 FC 45 F0 | 	shr	result2, #1
13f58     FE FC 81 F6 | 	negc	result2, result2
13f5c     0C 4E 05 F1 | 	add	fp, #12
13f60     A7 FC 61 FC | 	wrlong	result2, fp
13f64     02 E4 05 F1 | 	add	objptr, #2
13f68     F2 26 C2 FA | 	rdbyte	local01, objptr
13f6c     3E E4 85 F1 | 	sub	objptr, #62
13f70     04 4E 05 F1 | 	add	fp, #4
13f74     A7 26 62 FC | 	wrlong	local01, fp
13f78     40 4F 85 F1 | 	sub	fp, #320
13f7c                 | ' i=numpar-1
13f7c                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
13f7c                 | ' do
13f7c                 | LR__1622
13f7c     84 C8 BE FD | 	call	#_edit
13f80     A7 FA 61 FC | 	wrlong	result1, fp
13f84                 | ' 
13f84                 | '   line$=edit()
13f84                 | ' 
13f84                 | '   if v.cursor_y=cpy+1 then
13f84     3E E4 05 F1 | 	add	objptr, #62
13f88     F2 26 C2 FA | 	rdbyte	local01, objptr
13f8c     3E E4 85 F1 | 	sub	objptr, #62
13f90     40 4F 05 F1 | 	add	fp, #320
13f94     A7 16 02 FB | 	rdlong	arg03, fp
13f98     40 4F 85 F1 | 	sub	fp, #320
13f9c     01 16 06 F1 | 	add	arg03, #1
13fa0     0B 27 0A F2 | 	cmp	local01, arg03 wz
13fa4     6C 00 90 5D |  if_ne	jmp	#LR__1625
13fa8     A7 26 02 FB | 	rdlong	local01, fp
13fac     13 13 02 F6 | 	mov	arg01, local01
13fb0     09 29 02 F6 | 	mov	local02, arg01
13fb4     97 06 48 FB | 	callpa	#(@LR__1624-@LR__1623)>>2,fcache_load_ptr_
13fb8                 | LR__1623
13fb8     14 FB C9 FA | 	rdbyte	result1, local02 wz
13fbc     01 28 06 51 |  if_ne	add	local02, #1
13fc0     F4 FF 9F 5D |  if_ne	jmp	#LR__1623
13fc4                 | LR__1624
13fc4     09 29 82 F1 | 	sub	local02, arg01
13fc8     14 15 02 F6 | 	mov	arg02, local02
13fcc     3C 4F 05 F1 | 	add	fp, #316
13fd0     A7 16 02 FB | 	rdlong	arg03, fp
13fd4     3C 4F 85 F1 | 	sub	fp, #316
13fd8     0B 15 82 F1 | 	sub	arg02, arg03
13fdc     37 00 00 FF 
13fe0     34 E4 05 F1 | 	add	objptr, ##28212
13fe4     F2 16 02 FB | 	rdlong	arg03, objptr
13fe8     37 00 00 FF 
13fec     34 E4 85 F1 | 	sub	objptr, ##28212
13ff0     0B 15 02 F1 | 	add	arg02, arg03
13ff4     13 13 02 F6 | 	mov	arg01, local01
13ff8     78 50 B1 FD | 	call	#__system__Right_S
13ffc     FD 12 02 F6 | 	mov	arg01, result1
14000     78 54 B1 FD | 	call	#__system__RTrim_S
14004     FD 12 02 F6 | 	mov	arg01, result1
14008     B0 53 B1 FD | 	call	#__system__LTrim_S
1400c     A7 FA 61 FC | 	wrlong	result1, fp
14010     14 00 90 FD | 	jmp	#LR__1626
14014                 | LR__1625
14014     A7 12 02 FB | 	rdlong	arg01, fp
14018     60 54 B1 FD | 	call	#__system__RTrim_S
1401c     FD 12 02 F6 | 	mov	arg01, result1
14020     98 53 B1 FD | 	call	#__system__LTrim_S
14024     A7 FA 61 FC | 	wrlong	result1, fp
14028                 | LR__1626
14028                 | '   do
14028                 | LR__1627
14028     A7 14 02 FB | 	rdlong	arg02, fp
1402c     BA 01 00 FF 
14030     AF 16 06 F6 | 	mov	arg03, ##@LR__5943
14034     01 12 06 F6 | 	mov	arg01, #1
14038     F8 54 B1 FD | 	call	#__system__Instr
1403c     0C 4E 05 F1 | 	add	fp, #12
14040     A7 FA 61 FC | 	wrlong	result1, fp
14044                 | '    comma=instr(1,line$,",")  
14044                 | '    if comma>0  then 
14044     0C 4E 85 F1 | 	sub	fp, #12
14048     01 FA 15 F2 | 	cmp	result1, #1 wc
1404c     68 00 90 CD |  if_b	jmp	#LR__1630
14050     A7 12 02 FB | 	rdlong	arg01, fp
14054     0C 4E 05 F1 | 	add	fp, #12
14058     A7 14 02 FB | 	rdlong	arg02, fp
1405c     0C 4E 85 F1 | 	sub	fp, #12
14060     01 14 86 F1 | 	sub	arg02, #1
14064     84 4F B1 FD | 	call	#__system__Left_S
14068     04 4E 05 F1 | 	add	fp, #4
1406c     A7 FA 61 FC | 	wrlong	result1, fp
14070     04 4E 85 F1 | 	sub	fp, #4
14074     A7 26 02 FB | 	rdlong	local01, fp
14078     13 13 02 F6 | 	mov	arg01, local01
1407c     09 29 02 F6 | 	mov	local02, arg01
14080     97 06 48 FB | 	callpa	#(@LR__1629-@LR__1628)>>2,fcache_load_ptr_
14084                 | LR__1628
14084     14 FB C9 FA | 	rdbyte	result1, local02 wz
14088     01 28 06 51 |  if_ne	add	local02, #1
1408c     F4 FF 9F 5D |  if_ne	jmp	#LR__1628
14090                 | LR__1629
14090     09 29 82 F1 | 	sub	local02, arg01
14094     14 15 02 F6 | 	mov	arg02, local02
14098     0C 4E 05 F1 | 	add	fp, #12
1409c     A7 16 02 FB | 	rdlong	arg03, fp
140a0     0C 4E 85 F1 | 	sub	fp, #12
140a4     0B 15 82 F1 | 	sub	arg02, arg03
140a8     13 13 02 F6 | 	mov	arg01, local01
140ac     C4 4F B1 FD | 	call	#__system__Right_S
140b0     A7 FA 61 FC | 	wrlong	result1, fp
140b4     28 00 90 FD | 	jmp	#LR__1631
140b8                 | LR__1630
140b8     A7 12 02 FB | 	rdlong	arg01, fp
140bc     BC 53 B1 FD | 	call	#__system__RTrim_S
140c0     FD 12 02 F6 | 	mov	arg01, result1
140c4     F4 52 B1 FD | 	call	#__system__LTrim_S
140c8     04 4E 05 F1 | 	add	fp, #4
140cc     A7 FA 61 FC | 	wrlong	result1, fp
140d0     04 4E 85 F1 | 	sub	fp, #4
140d4     BA 01 00 FF 
140d8     B1 26 06 F6 | 	mov	local01, ##@LR__5944
140dc     A7 26 62 FC | 	wrlong	local01, fp
140e0                 | LR__1631
140e0     30 4F 05 F1 | 	add	fp, #304
140e4     A7 26 02 FB | 	rdlong	local01, fp
140e8     02 26 66 F0 | 	shl	local01, #2
140ec     04 4F 85 F1 | 	sub	fp, #260
140f0     A7 26 02 F1 | 	add	local01, fp
140f4     28 4E 85 F1 | 	sub	fp, #40
140f8     A7 FA 01 FB | 	rdlong	result1, fp
140fc     13 FB 61 FC | 	wrlong	result1, local01
14100     2C 4F 05 F1 | 	add	fp, #300
14104     A7 26 02 FB | 	rdlong	local01, fp
14108     01 26 86 F1 | 	sub	local01, #1
1410c     A7 26 62 FC | 	wrlong	local01, fp
14110     30 4F 85 F1 | 	sub	fp, #304
14114     00 26 56 F2 | 	cmps	local01, #0 wc
14118     18 00 90 CD |  if_b	jmp	#LR__1632
1411c     A7 12 02 FB | 	rdlong	arg01, fp
14120     BA 01 00 FF 
14124     B2 14 06 F6 | 	mov	arg02, ##@LR__5945
14128     6C 2E B1 FD | 	call	#__system___string_cmp
1412c     00 FA 0D F2 | 	cmp	result1, #0 wz
14130     F4 FE 9F 5D |  if_ne	jmp	#LR__1627
14134                 | LR__1632
14134     30 4F 05 F1 | 	add	fp, #304
14138     A7 26 02 FB | 	rdlong	local01, fp
1413c     30 4F 85 F1 | 	sub	fp, #304
14140     00 26 56 F2 | 	cmps	local01, #0 wc
14144     34 FE 9F 3D |  if_ae	jmp	#LR__1622
14148                 | ' 
14148                 | ' for i=0 to numpar-1
14148     30 4F 05 F1 | 	add	fp, #304
1414c     A7 00 68 FC | 	wrlong	#0, fp
14150     28 4F 85 F1 | 	sub	fp, #296
14154     A7 2A 02 FB | 	rdlong	local03, fp
14158     08 4E 85 F1 | 	sub	fp, #8
1415c                 | LR__1633
1415c     30 4F 05 F1 | 	add	fp, #304
14160     A7 2C 02 FB | 	rdlong	local04, fp
14164     30 4F 85 F1 | 	sub	fp, #304
14168     16 27 02 F6 | 	mov	local01, local04
1416c     15 27 52 F2 | 	cmps	local01, local03 wc
14170     04 09 90 3D |  if_ae	jmp	#LR__1669
14174                 | ' 
14174                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
14174     30 4F 05 F1 | 	add	fp, #304
14178     A7 16 02 FB | 	rdlong	arg03, fp
1417c     02 16 66 F0 | 	shl	arg03, #2
14180     04 4F 85 F1 | 	sub	fp, #260
14184     A7 16 02 F1 | 	add	arg03, fp
14188     0B 13 02 FB | 	rdlong	arg01, arg03
1418c     2C 4E 85 F1 | 	sub	fp, #44
14190     9C 27 BF FD | 	call	#_isnum
14194     FD 2E 02 F6 | 	mov	local05, result1
14198     30 4F 05 F1 | 	add	fp, #304
1419c     A7 16 02 FB | 	rdlong	arg03, fp
141a0     02 16 66 F0 | 	shl	arg03, #2
141a4     04 4F 85 F1 | 	sub	fp, #260
141a8     A7 30 02 F6 | 	mov	local06, fp
141ac     A7 16 02 F1 | 	add	arg03, fp
141b0     0B 13 02 FB | 	rdlong	arg01, arg03
141b4     2C 4E 85 F1 | 	sub	fp, #44
141b8     60 2B BF FD | 	call	#_isint
141bc     FD 2E 2A F5 | 	andn	local05, result1 wz
141c0     52 00 00 5F 
141c4     10 E5 05 51 |  if_ne	add	objptr, ##42256
141c8     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
141cc     52 00 00 5F 
141d0     10 E5 85 51 |  if_ne	sub	objptr, ##42256
141d4                 | '   if isint(args(i)) then r=result_int 
141d4     30 4F 05 F1 | 	add	fp, #304
141d8     A7 2E 02 FB | 	rdlong	local05, fp
141dc     02 2E 66 F0 | 	shl	local05, #2
141e0     04 4F 85 F1 | 	sub	fp, #260
141e4     A7 2E 02 F1 | 	add	local05, fp
141e8     17 13 02 FB | 	rdlong	arg01, local05
141ec     2C 4E 85 F1 | 	sub	fp, #44
141f0     28 2B BF FD | 	call	#_isint
141f4     00 FA 0D F2 | 	cmp	result1, #0 wz
141f8     52 00 00 5F 
141fc     10 E5 05 51 |  if_ne	add	objptr, ##42256
14200     F2 38 68 5C |  if_ne	wrlong	#28, objptr
14204     52 00 00 5F 
14208     10 E5 85 51 |  if_ne	sub	objptr, ##42256
1420c                 | '   if isdec(args(i)) then r=result_uint 
1420c     30 4F 05 F1 | 	add	fp, #304
14210     A7 2E 02 FB | 	rdlong	local05, fp
14214     02 2E 66 F0 | 	shl	local05, #2
14218     04 4F 85 F1 | 	sub	fp, #260
1421c     A7 2E 02 F1 | 	add	local05, fp
14220     17 13 02 FB | 	rdlong	arg01, local05
14224     2C 4E 85 F1 | 	sub	fp, #44
14228     94 2D BF FD | 	call	#_isdec
1422c     00 FA 0D F2 | 	cmp	result1, #0 wz
14230     52 00 00 5F 
14234     10 E5 05 51 |  if_ne	add	objptr, ##42256
14238     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
1423c     52 00 00 5F 
14240     10 E5 85 51 |  if_ne	sub	objptr, ##42256
14244                 | '   if not isnum(args(i)) then 
14244     30 4F 05 F1 | 	add	fp, #304
14248     A7 32 02 FB | 	rdlong	local07, fp
1424c     19 35 02 F6 | 	mov	local08, local07
14250     02 34 66 F0 | 	shl	local08, #2
14254     04 4F 85 F1 | 	sub	fp, #260
14258     A7 36 02 F6 | 	mov	local09, fp
1425c     A7 34 02 F1 | 	add	local08, fp
14260     1A 13 02 FB | 	rdlong	arg01, local08
14264     2C 4E 85 F1 | 	sub	fp, #44
14268     C4 26 BF FD | 	call	#_isnum
1426c     FD 2E 22 F6 | 	not	local05, result1
14270     00 2E 0E F2 | 	cmp	local05, #0 wz
14274     44 01 90 AD |  if_e	jmp	#LR__1638
14278     52 00 00 FF 
1427c     10 E5 05 F1 | 	add	objptr, ##42256
14280     F2 56 68 FC | 	wrlong	#43, objptr
14284     52 00 00 FF 
14288     10 E5 85 F1 | 	sub	objptr, ##42256
1428c     04 4E 05 F1 | 	add	fp, #4
14290     A7 12 02 FB | 	rdlong	arg01, fp
14294     04 4E 85 F1 | 	sub	fp, #4
14298     09 29 02 F6 | 	mov	local02, arg01
1429c     97 06 48 FB | 	callpa	#(@LR__1635-@LR__1634)>>2,fcache_load_ptr_
142a0                 | LR__1634
142a0     14 FB C9 FA | 	rdbyte	result1, local02 wz
142a4     01 28 06 51 |  if_ne	add	local02, #1
142a8     F4 FF 9F 5D |  if_ne	jmp	#LR__1634
142ac                 | LR__1635
142ac     09 29 82 F1 | 	sub	local02, arg01
142b0     14 33 02 F6 | 	mov	local07, local02
142b4     38 4F 05 F1 | 	add	fp, #312
142b8     A7 32 62 FC | 	wrlong	local07, fp
142bc     52 00 00 FF 
142c0     98 E4 05 F1 | 	add	objptr, ##42136
142c4     F2 12 02 FB | 	rdlong	arg01, objptr
142c8     19 13 82 F1 | 	sub	arg01, local07
142cc     04 12 86 F1 | 	sub	arg01, #4
142d0     03 12 26 F5 | 	andn	arg01, #3
142d4     F2 12 62 FC | 	wrlong	arg01, objptr
142d8     52 00 00 FF 
142dc     98 E4 85 F1 | 	sub	objptr, ##42136
142e0     A7 14 02 FB | 	rdlong	arg02, fp
142e4     38 4F 85 F1 | 	sub	fp, #312
142e8     08 F4 B0 FD | 	call	#_pslpoke
142ec                 | '     pslpoke memtop,l
142ec                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
142ec     34 4F 05 F1 | 	add	fp, #308
142f0     A7 02 68 FC | 	wrlong	#1, fp
142f4     04 4E 05 F1 | 	add	fp, #4
142f8     A7 38 02 FB | 	rdlong	local10, fp
142fc     38 4F 85 F1 | 	sub	fp, #312
14300     01 38 06 F1 | 	add	local10, #1
14304                 | LR__1636
14304     34 4F 05 F1 | 	add	fp, #308
14308     A7 2E 02 FB | 	rdlong	local05, fp
1430c     34 4F 85 F1 | 	sub	fp, #308
14310     1C 2F 52 F2 | 	cmps	local05, local10 wc
14314     84 00 90 3D |  if_ae	jmp	#LR__1637
14318     52 00 00 FF 
1431c     98 E4 05 F1 | 	add	objptr, ##42136
14320     F2 32 02 FB | 	rdlong	local07, objptr
14324     52 00 00 FF 
14328     98 E4 85 F1 | 	sub	objptr, ##42136
1432c     03 32 06 F1 | 	add	local07, #3
14330     34 4F 05 F1 | 	add	fp, #308
14334     A7 3A 02 FB | 	rdlong	local11, fp
14338     1D 33 02 F1 | 	add	local07, local11
1433c     04 4E 85 F1 | 	sub	fp, #4
14340     A7 3C 02 FB | 	rdlong	local12, fp
14344     02 3C 66 F0 | 	shl	local12, #2
14348     04 4F 85 F1 | 	sub	fp, #260
1434c     A7 3E 02 F6 | 	mov	local13, fp
14350     A7 3C 02 F1 | 	add	local12, fp
14354     1E 13 02 FB | 	rdlong	arg01, local12
14358     2C 4E 85 F1 | 	sub	fp, #44
1435c     01 40 06 F6 | 	mov	local14, #1
14360     1D 15 02 F6 | 	mov	arg02, local11
14364     01 16 06 F6 | 	mov	arg03, #1
14368     98 4D B1 FD | 	call	#__system__Mid_S
1436c     FD 14 C2 FA | 	rdbyte	arg02, result1
14370     19 13 02 F6 | 	mov	arg01, local07
14374     0C F4 B0 FD | 	call	#_pspoke
14378     34 4F 05 F1 | 	add	fp, #308
1437c     A7 34 02 FB | 	rdlong	local08, fp
14380     1A 33 02 F6 | 	mov	local07, local08
14384     1A 31 02 F6 | 	mov	local06, local08
14388     18 37 02 F6 | 	mov	local09, local06
1438c     01 36 06 F1 | 	add	local09, #1
14390     A7 36 62 FC | 	wrlong	local09, fp
14394     34 4F 85 F1 | 	sub	fp, #308
14398     68 FF 9F FD | 	jmp	#LR__1636
1439c                 | LR__1637
1439c     52 00 00 FF 
143a0     98 E4 05 F1 | 	add	objptr, ##42136
143a4     F2 2E 02 FB | 	rdlong	local05, objptr
143a8     52 00 00 FF 
143ac     98 E4 85 F1 | 	sub	objptr, ##42136
143b0     10 4E 05 F1 | 	add	fp, #16
143b4     A7 2E 62 FC | 	wrlong	local05, fp
143b8     10 4E 85 F1 | 	sub	fp, #16
143bc                 | LR__1638
143bc     04 93 BF FD | 	call	#_pop
143c0     FE 2E 02 F6 | 	mov	local05, result2
143c4     FF 42 02 F6 | 	mov	local15, result3
143c8     1C 4E 05 F1 | 	add	fp, #28
143cc     A7 FA 61 FC | 	wrlong	result1, fp
143d0     04 4E 05 F1 | 	add	fp, #4
143d4     A7 2E 62 FC | 	wrlong	local05, fp
143d8     04 4E 05 F1 | 	add	fp, #4
143dc     A7 42 62 FC | 	wrlong	local15, fp
143e0     04 4E 85 F1 | 	sub	fp, #4
143e4     A7 44 02 FB | 	rdlong	local16, fp
143e8     0C 4E 85 F1 | 	sub	fp, #12
143ec     A7 44 62 FC | 	wrlong	local16, fp
143f0                 | '   t1=pop() : vartype=t1.result.twowords(1)
143f0                 | '   select case vartype
143f0     14 4E 85 F1 | 	sub	fp, #20
143f4     22 47 0A F6 | 	mov	local17, local16 wz
143f8     64 00 90 AD |  if_e	jmp	#LR__1639
143fc     00 47 0E F2 | 	cmp	local17, #256 wz
14400     6C 00 90 AD |  if_e	jmp	#LR__1640
14404     01 47 0E F2 | 	cmp	local17, #257 wz
14408     74 00 90 AD |  if_e	jmp	#LR__1641
1440c     02 47 0E F2 | 	cmp	local17, #258 wz
14410     7C 00 90 AD |  if_e	jmp	#LR__1642
14414     03 47 0E F2 | 	cmp	local17, #259 wz
14418     84 00 90 AD |  if_e	jmp	#LR__1643
1441c     04 47 0E F2 | 	cmp	local17, #260 wz
14420     8C 00 90 AD |  if_e	jmp	#LR__1644
14424     05 47 0E F2 | 	cmp	local17, #261 wz
14428     94 00 90 AD |  if_e	jmp	#LR__1645
1442c     06 47 0E F2 | 	cmp	local17, #262 wz
14430     9C 00 90 AD |  if_e	jmp	#LR__1646
14434     07 47 0E F2 | 	cmp	local17, #263 wz
14438     A4 00 90 AD |  if_e	jmp	#LR__1647
1443c     08 47 0E F2 | 	cmp	local17, #264 wz
14440     AC 00 90 AD |  if_e	jmp	#LR__1648
14444     09 47 0E F2 | 	cmp	local17, #265 wz
14448     B4 00 90 AD |  if_e	jmp	#LR__1649
1444c     0A 47 0E F2 | 	cmp	local17, #266 wz
14450     BC 00 90 AD |  if_e	jmp	#LR__1650
14454     0B 47 0E F2 | 	cmp	local17, #267 wz
14458     C4 00 90 AD |  if_e	jmp	#LR__1651
1445c     D0 00 90 FD | 	jmp	#LR__1652
14460                 | LR__1639
14460     18 4E 05 F1 | 	add	fp, #24
14464     A7 18 68 FC | 	wrlong	#12, fp
14468     18 4E 85 F1 | 	sub	fp, #24
1446c     CC 00 90 FD | 	jmp	#LR__1653
14470                 | LR__1640
14470     18 4E 05 F1 | 	add	fp, #24
14474     A7 18 68 FC | 	wrlong	#12, fp
14478     18 4E 85 F1 | 	sub	fp, #24
1447c     BC 00 90 FD | 	jmp	#LR__1653
14480                 | LR__1641
14480     18 4E 05 F1 | 	add	fp, #24
14484     A7 02 68 FC | 	wrlong	#1, fp
14488     18 4E 85 F1 | 	sub	fp, #24
1448c     AC 00 90 FD | 	jmp	#LR__1653
14490                 | LR__1642
14490     18 4E 05 F1 | 	add	fp, #24
14494     A7 02 68 FC | 	wrlong	#1, fp
14498     18 4E 85 F1 | 	sub	fp, #24
1449c     9C 00 90 FD | 	jmp	#LR__1653
144a0                 | LR__1643
144a0     18 4E 05 F1 | 	add	fp, #24
144a4     A7 04 68 FC | 	wrlong	#2, fp
144a8     18 4E 85 F1 | 	sub	fp, #24
144ac     8C 00 90 FD | 	jmp	#LR__1653
144b0                 | LR__1644
144b0     18 4E 05 F1 | 	add	fp, #24
144b4     A7 04 68 FC | 	wrlong	#2, fp
144b8     18 4E 85 F1 | 	sub	fp, #24
144bc     7C 00 90 FD | 	jmp	#LR__1653
144c0                 | LR__1645
144c0     18 4E 05 F1 | 	add	fp, #24
144c4     A7 08 68 FC | 	wrlong	#4, fp
144c8     18 4E 85 F1 | 	sub	fp, #24
144cc     6C 00 90 FD | 	jmp	#LR__1653
144d0                 | LR__1646
144d0     18 4E 05 F1 | 	add	fp, #24
144d4     A7 08 68 FC | 	wrlong	#4, fp
144d8     18 4E 85 F1 | 	sub	fp, #24
144dc     5C 00 90 FD | 	jmp	#LR__1653
144e0                 | LR__1647
144e0     18 4E 05 F1 | 	add	fp, #24
144e4     A7 10 68 FC | 	wrlong	#8, fp
144e8     18 4E 85 F1 | 	sub	fp, #24
144ec     4C 00 90 FD | 	jmp	#LR__1653
144f0                 | LR__1648
144f0     18 4E 05 F1 | 	add	fp, #24
144f4     A7 10 68 FC | 	wrlong	#8, fp
144f8     18 4E 85 F1 | 	sub	fp, #24
144fc     3C 00 90 FD | 	jmp	#LR__1653
14500                 | LR__1649
14500     18 4E 05 F1 | 	add	fp, #24
14504     A7 0C 68 FC | 	wrlong	#6, fp
14508     18 4E 85 F1 | 	sub	fp, #24
1450c     2C 00 90 FD | 	jmp	#LR__1653
14510                 | LR__1650
14510     18 4E 05 F1 | 	add	fp, #24
14514     A7 10 68 FC | 	wrlong	#8, fp
14518     18 4E 85 F1 | 	sub	fp, #24
1451c     1C 00 90 FD | 	jmp	#LR__1653
14520                 | LR__1651
14520     18 4E 05 F1 | 	add	fp, #24
14524     A7 0A 68 FC | 	wrlong	#5, fp
14528     18 4E 85 F1 | 	sub	fp, #24
1452c     0C 00 90 FD | 	jmp	#LR__1653
14530                 | LR__1652
14530     18 4E 05 F1 | 	add	fp, #24
14534     A7 18 68 FC | 	wrlong	#12, fp
14538     18 4E 85 F1 | 	sub	fp, #24
1453c                 | LR__1653
1453c                 | '   if esize=12 andalso t1.result.uresult<$80000 then
1453c     18 4E 05 F1 | 	add	fp, #24
14540     A7 44 02 FB | 	rdlong	local16, fp
14544     18 4E 85 F1 | 	sub	fp, #24
14548     0C 44 0E F2 | 	cmp	local16, #12 wz
1454c     74 01 90 5D |  if_ne	jmp	#LR__1658
14550     1C 4E 05 F1 | 	add	fp, #28
14554     A7 32 02 FB | 	rdlong	local07, fp
14558     1C 4E 85 F1 | 	sub	fp, #28
1455c     00 04 00 FF 
14560     00 32 16 F2 | 	cmp	local07, ##524288 wc
14564     5C 01 90 3D |  if_ae	jmp	#LR__1658
14568                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
14568     52 00 00 FF 
1456c     10 E5 05 F1 | 	add	objptr, ##42256
14570     F2 44 02 FB | 	rdlong	local16, objptr
14574     52 00 00 FF 
14578     10 E5 85 F1 | 	sub	objptr, ##42256
1457c     1C 44 0E F2 | 	cmp	local16, #28 wz
14580     38 00 90 5D |  if_ne	jmp	#LR__1654
14584     1C 4E 05 F1 | 	add	fp, #28
14588     A7 44 02 FB | 	rdlong	local16, fp
1458c     14 4F 05 F1 | 	add	fp, #276
14590     A7 32 02 FB | 	rdlong	local07, fp
14594     19 35 02 F6 | 	mov	local08, local07
14598     02 34 66 F0 | 	shl	local08, #2
1459c     04 4F 85 F1 | 	sub	fp, #260
145a0     A7 36 02 F6 | 	mov	local09, fp
145a4     A7 34 02 F1 | 	add	local08, fp
145a8     1A 13 02 FB | 	rdlong	arg01, local08
145ac     00 14 06 F6 | 	mov	arg02, #0
145b0     2C 4E 85 F1 | 	sub	fp, #44
145b4     A8 5E B1 FD | 	call	#__system____builtin_atoi
145b8     22 FB 61 FC | 	wrlong	result1, local16
145bc                 | LR__1654
145bc                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
145bc     52 00 00 FF 
145c0     10 E5 05 F1 | 	add	objptr, ##42256
145c4     F2 44 02 FB | 	rdlong	local16, objptr
145c8     52 00 00 FF 
145cc     10 E5 85 F1 | 	sub	objptr, ##42256
145d0     1D 44 0E F2 | 	cmp	local16, #29 wz
145d4     38 00 90 5D |  if_ne	jmp	#LR__1655
145d8     1C 4E 05 F1 | 	add	fp, #28
145dc     A7 44 02 FB | 	rdlong	local16, fp
145e0     14 4F 05 F1 | 	add	fp, #276
145e4     A7 32 02 FB | 	rdlong	local07, fp
145e8     19 35 02 F6 | 	mov	local08, local07
145ec     02 34 66 F0 | 	shl	local08, #2
145f0     04 4F 85 F1 | 	sub	fp, #260
145f4     A7 36 02 F6 | 	mov	local09, fp
145f8     A7 34 02 F1 | 	add	local08, fp
145fc     1A 13 02 FB | 	rdlong	arg01, local08
14600     00 14 06 F6 | 	mov	arg02, #0
14604     2C 4E 85 F1 | 	sub	fp, #44
14608     54 5E B1 FD | 	call	#__system____builtin_atoi
1460c     22 FB 61 FC | 	wrlong	result1, local16
14610                 | LR__1655
14610                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
14610     52 00 00 FF 
14614     10 E5 05 F1 | 	add	objptr, ##42256
14618     F2 44 02 FB | 	rdlong	local16, objptr
1461c     52 00 00 FF 
14620     10 E5 85 F1 | 	sub	objptr, ##42256
14624     1E 44 0E F2 | 	cmp	local16, #30 wz
14628     3C 00 90 5D |  if_ne	jmp	#LR__1656
1462c     30 4F 05 F1 | 	add	fp, #304
14630     A7 32 02 FB | 	rdlong	local07, fp
14634     02 32 66 F0 | 	shl	local07, #2
14638     04 4F 85 F1 | 	sub	fp, #260
1463c     A7 34 02 F6 | 	mov	local08, fp
14640     A7 32 02 F1 | 	add	local07, fp
14644     19 13 02 FB | 	rdlong	arg01, local07
14648     2C 4E 85 F1 | 	sub	fp, #44
1464c     A4 5F B1 FD | 	call	#__system____builtin_atof
14650     28 4E 05 F1 | 	add	fp, #40
14654     A7 FA 61 FC | 	wrlong	result1, fp
14658     0C 4E 85 F1 | 	sub	fp, #12
1465c     A7 44 02 FB | 	rdlong	local16, fp
14660     1C 4E 85 F1 | 	sub	fp, #28
14664     22 FB 61 FC | 	wrlong	result1, local16
14668                 | LR__1656
14668                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
14668     52 00 00 FF 
1466c     10 E5 05 F1 | 	add	objptr, ##42256
14670     F2 44 02 FB | 	rdlong	local16, objptr
14674     52 00 00 FF 
14678     10 E5 85 F1 | 	sub	objptr, ##42256
1467c     2B 44 0E F2 | 	cmp	local16, #43 wz
14680     18 00 90 5D |  if_ne	jmp	#LR__1657
14684     1C 4E 05 F1 | 	add	fp, #28
14688     A7 12 02 FB | 	rdlong	arg01, fp
1468c     0C 4E 85 F1 | 	sub	fp, #12
14690     A7 14 02 FB | 	rdlong	arg02, fp
14694     10 4E 85 F1 | 	sub	fp, #16
14698     09 15 62 FC | 	wrlong	arg02, arg01
1469c                 | LR__1657
1469c     1C 4E 05 F1 | 	add	fp, #28
146a0     A7 12 02 FB | 	rdlong	arg01, fp
146a4     1C 4E 85 F1 | 	sub	fp, #28
146a8     08 12 06 F1 | 	add	arg01, #8
146ac     52 00 00 FF 
146b0     10 E5 05 F1 | 	add	objptr, ##42256
146b4     F2 14 02 FB | 	rdlong	arg02, objptr
146b8     52 00 00 FF 
146bc     10 E5 85 F1 | 	sub	objptr, ##42256
146c0     09 15 62 FC | 	wrlong	arg02, arg01
146c4                 | LR__1658
146c4                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
146c4     18 4E 05 F1 | 	add	fp, #24
146c8     A7 44 02 FB | 	rdlong	local16, fp
146cc     18 4E 85 F1 | 	sub	fp, #24
146d0     0C 44 0E F2 | 	cmp	local16, #12 wz
146d4     94 01 90 5D |  if_ne	jmp	#LR__1663
146d8     1C 4E 05 F1 | 	add	fp, #28
146dc     A7 32 02 FB | 	rdlong	local07, fp
146e0     1C 4E 85 F1 | 	sub	fp, #28
146e4     00 04 00 FF 
146e8     00 32 16 F2 | 	cmp	local07, ##524288 wc
146ec     7C 01 90 CD |  if_b	jmp	#LR__1663
146f0                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
146f0     52 00 00 FF 
146f4     10 E5 05 F1 | 	add	objptr, ##42256
146f8     F2 44 02 FB | 	rdlong	local16, objptr
146fc     52 00 00 FF 
14700     10 E5 85 F1 | 	sub	objptr, ##42256
14704     1C 44 0E F2 | 	cmp	local16, #28 wz
14708     40 00 90 5D |  if_ne	jmp	#LR__1659
1470c     1C 4E 05 F1 | 	add	fp, #28
14710     A7 44 02 FB | 	rdlong	local16, fp
14714     14 4F 05 F1 | 	add	fp, #276
14718     A7 32 02 FB | 	rdlong	local07, fp
1471c     19 35 02 F6 | 	mov	local08, local07
14720     02 34 66 F0 | 	shl	local08, #2
14724     04 4F 85 F1 | 	sub	fp, #260
14728     A7 36 02 F6 | 	mov	local09, fp
1472c     A7 34 02 F1 | 	add	local08, fp
14730     1A 13 02 FB | 	rdlong	arg01, local08
14734     00 14 06 F6 | 	mov	arg02, #0
14738     2C 4E 85 F1 | 	sub	fp, #44
1473c     20 5D B1 FD | 	call	#__system____builtin_atoi
14740     FD 14 02 F6 | 	mov	arg02, result1
14744     22 13 02 F6 | 	mov	arg01, local16
14748     A8 EF B0 FD | 	call	#_pslpoke
1474c                 | LR__1659
1474c                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
1474c     52 00 00 FF 
14750     10 E5 05 F1 | 	add	objptr, ##42256
14754     F2 44 02 FB | 	rdlong	local16, objptr
14758     52 00 00 FF 
1475c     10 E5 85 F1 | 	sub	objptr, ##42256
14760     1D 44 0E F2 | 	cmp	local16, #29 wz
14764     40 00 90 5D |  if_ne	jmp	#LR__1660
14768     1C 4E 05 F1 | 	add	fp, #28
1476c     A7 44 02 FB | 	rdlong	local16, fp
14770     14 4F 05 F1 | 	add	fp, #276
14774     A7 32 02 FB | 	rdlong	local07, fp
14778     19 35 02 F6 | 	mov	local08, local07
1477c     02 34 66 F0 | 	shl	local08, #2
14780     04 4F 85 F1 | 	sub	fp, #260
14784     A7 36 02 F6 | 	mov	local09, fp
14788     A7 34 02 F1 | 	add	local08, fp
1478c     1A 13 02 FB | 	rdlong	arg01, local08
14790     00 14 06 F6 | 	mov	arg02, #0
14794     2C 4E 85 F1 | 	sub	fp, #44
14798     C4 5C B1 FD | 	call	#__system____builtin_atoi
1479c     FD 14 02 F6 | 	mov	arg02, result1
147a0     22 13 02 F6 | 	mov	arg01, local16
147a4     4C EF B0 FD | 	call	#_pslpoke
147a8                 | LR__1660
147a8                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
147a8     52 00 00 FF 
147ac     10 E5 05 F1 | 	add	objptr, ##42256
147b0     F2 44 02 FB | 	rdlong	local16, objptr
147b4     52 00 00 FF 
147b8     10 E5 85 F1 | 	sub	objptr, ##42256
147bc     1E 44 0E F2 | 	cmp	local16, #30 wz
147c0     4C 00 90 5D |  if_ne	jmp	#LR__1661
147c4     30 4F 05 F1 | 	add	fp, #304
147c8     A7 32 02 FB | 	rdlong	local07, fp
147cc     02 32 66 F0 | 	shl	local07, #2
147d0     04 4F 85 F1 | 	sub	fp, #260
147d4     A7 34 02 F6 | 	mov	local08, fp
147d8     A7 32 02 F1 | 	add	local07, fp
147dc     19 13 02 FB | 	rdlong	arg01, local07
147e0     2C 4E 85 F1 | 	sub	fp, #44
147e4     0C 5E B1 FD | 	call	#__system____builtin_atof
147e8     28 4E 05 F1 | 	add	fp, #40
147ec     A7 FA 61 FC | 	wrlong	result1, fp
147f0     0C 4E 85 F1 | 	sub	fp, #12
147f4     A7 44 02 FB | 	rdlong	local16, fp
147f8     0C 4E 05 F1 | 	add	fp, #12
147fc     A7 12 02 F6 | 	mov	arg01, fp
14800     28 4E 85 F1 | 	sub	fp, #40
14804     09 15 02 FB | 	rdlong	arg02, arg01
14808     22 13 02 F6 | 	mov	arg01, local16
1480c     E4 EE B0 FD | 	call	#_pslpoke
14810                 | LR__1661
14810                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
14810     52 00 00 FF 
14814     10 E5 05 F1 | 	add	objptr, ##42256
14818     F2 44 02 FB | 	rdlong	local16, objptr
1481c     52 00 00 FF 
14820     10 E5 85 F1 | 	sub	objptr, ##42256
14824     2B 44 0E F2 | 	cmp	local16, #43 wz
14828     18 00 90 5D |  if_ne	jmp	#LR__1662
1482c     1C 4E 05 F1 | 	add	fp, #28
14830     A7 12 02 FB | 	rdlong	arg01, fp
14834     0C 4E 85 F1 | 	sub	fp, #12
14838     A7 14 02 FB | 	rdlong	arg02, fp
1483c     10 4E 85 F1 | 	sub	fp, #16
14840     B0 EE B0 FD | 	call	#_pslpoke
14844                 | LR__1662
14844     1C 4E 05 F1 | 	add	fp, #28
14848     A7 12 02 FB | 	rdlong	arg01, fp
1484c     1C 4E 85 F1 | 	sub	fp, #28
14850     08 12 06 F1 | 	add	arg01, #8
14854     52 00 00 FF 
14858     10 E5 05 F1 | 	add	objptr, ##42256
1485c     F2 14 02 FB | 	rdlong	arg02, objptr
14860     52 00 00 FF 
14864     10 E5 85 F1 | 	sub	objptr, ##42256
14868     88 EE B0 FD | 	call	#_pslpoke
1486c                 | LR__1663
1486c                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
1486c     18 4E 05 F1 | 	add	fp, #24
14870     A7 44 02 FB | 	rdlong	local16, fp
14874     18 4E 85 F1 | 	sub	fp, #24
14878     05 44 0E F2 | 	cmp	local16, #5 wz
1487c     52 00 00 AF 
14880     10 E5 05 A1 |  if_e	add	objptr, ##42256
14884     F2 42 02 AB |  if_e	rdlong	local15, objptr
14888     52 00 00 AF 
1488c     10 E5 85 A1 |  if_e	sub	objptr, ##42256
14890     2B 42 0E A2 |  if_e	cmp	local15, #43 wz
14894     18 00 90 5D |  if_ne	jmp	#LR__1664
14898     1C 4E 05 F1 | 	add	fp, #28
1489c     A7 12 02 FB | 	rdlong	arg01, fp
148a0     0C 4E 85 F1 | 	sub	fp, #12
148a4     A7 14 02 FB | 	rdlong	arg02, fp
148a8     10 4E 85 F1 | 	sub	fp, #16
148ac     44 EE B0 FD | 	call	#_pslpoke
148b0                 | LR__1664
148b0                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
148b0     18 4E 05 F1 | 	add	fp, #24
148b4     A7 44 02 FB | 	rdlong	local16, fp
148b8     18 4E 85 F1 | 	sub	fp, #24
148bc     04 44 0E F2 | 	cmp	local16, #4 wz
148c0     54 00 90 5D |  if_ne	jmp	#LR__1665
148c4     52 00 00 FF 
148c8     10 E5 05 F1 | 	add	objptr, ##42256
148cc     F2 42 02 FB | 	rdlong	local15, objptr
148d0     52 00 00 FF 
148d4     10 E5 85 F1 | 	sub	objptr, ##42256
148d8     2B 42 0E F2 | 	cmp	local15, #43 wz
148dc     38 00 90 AD |  if_e	jmp	#LR__1665
148e0     1C 4E 05 F1 | 	add	fp, #28
148e4     A7 44 02 FB | 	rdlong	local16, fp
148e8     14 4F 05 F1 | 	add	fp, #276
148ec     A7 34 02 FB | 	rdlong	local08, fp
148f0     02 34 66 F0 | 	shl	local08, #2
148f4     04 4F 85 F1 | 	sub	fp, #260
148f8     A7 34 02 F1 | 	add	local08, fp
148fc     1A 13 02 FB | 	rdlong	arg01, local08
14900     00 14 06 F6 | 	mov	arg02, #0
14904     2C 4E 85 F1 | 	sub	fp, #44
14908     54 5B B1 FD | 	call	#__system____builtin_atoi
1490c     FD 14 02 F6 | 	mov	arg02, result1
14910     22 13 02 F6 | 	mov	arg01, local16
14914     DC ED B0 FD | 	call	#_pslpoke
14918                 | LR__1665
14918                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
14918     18 4E 05 F1 | 	add	fp, #24
1491c     A7 44 02 FB | 	rdlong	local16, fp
14920     18 4E 85 F1 | 	sub	fp, #24
14924     02 44 0E F2 | 	cmp	local16, #2 wz
14928     54 00 90 5D |  if_ne	jmp	#LR__1666
1492c     52 00 00 FF 
14930     10 E5 05 F1 | 	add	objptr, ##42256
14934     F2 42 02 FB | 	rdlong	local15, objptr
14938     52 00 00 FF 
1493c     10 E5 85 F1 | 	sub	objptr, ##42256
14940     2B 42 0E F2 | 	cmp	local15, #43 wz
14944     38 00 90 AD |  if_e	jmp	#LR__1666
14948     1C 4E 05 F1 | 	add	fp, #28
1494c     A7 44 02 FB | 	rdlong	local16, fp
14950     14 4F 05 F1 | 	add	fp, #276
14954     A7 34 02 FB | 	rdlong	local08, fp
14958     02 34 66 F0 | 	shl	local08, #2
1495c     04 4F 85 F1 | 	sub	fp, #260
14960     A7 34 02 F1 | 	add	local08, fp
14964     1A 13 02 FB | 	rdlong	arg01, local08
14968     00 14 06 F6 | 	mov	arg02, #0
1496c     2C 4E 85 F1 | 	sub	fp, #44
14970     EC 5A B1 FD | 	call	#__system____builtin_atoi
14974     FD 14 02 F6 | 	mov	arg02, result1
14978     22 13 02 F6 | 	mov	arg01, local16
1497c     BC ED B0 FD | 	call	#_psdpoke
14980                 | LR__1666
14980                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
14980     18 4E 05 F1 | 	add	fp, #24
14984     A7 44 02 FB | 	rdlong	local16, fp
14988     18 4E 85 F1 | 	sub	fp, #24
1498c     01 44 0E F2 | 	cmp	local16, #1 wz
14990     54 00 90 5D |  if_ne	jmp	#LR__1667
14994     52 00 00 FF 
14998     10 E5 05 F1 | 	add	objptr, ##42256
1499c     F2 42 02 FB | 	rdlong	local15, objptr
149a0     52 00 00 FF 
149a4     10 E5 85 F1 | 	sub	objptr, ##42256
149a8     2B 42 0E F2 | 	cmp	local15, #43 wz
149ac     38 00 90 AD |  if_e	jmp	#LR__1667
149b0     1C 4E 05 F1 | 	add	fp, #28
149b4     A7 44 02 FB | 	rdlong	local16, fp
149b8     14 4F 05 F1 | 	add	fp, #276
149bc     A7 34 02 FB | 	rdlong	local08, fp
149c0     02 34 66 F0 | 	shl	local08, #2
149c4     04 4F 85 F1 | 	sub	fp, #260
149c8     A7 34 02 F1 | 	add	local08, fp
149cc     1A 13 02 FB | 	rdlong	arg01, local08
149d0     00 14 06 F6 | 	mov	arg02, #0
149d4     2C 4E 85 F1 | 	sub	fp, #44
149d8     84 5A B1 FD | 	call	#__system____builtin_atoi
149dc     FD 14 02 F6 | 	mov	arg02, result1
149e0     22 13 02 F6 | 	mov	arg01, local16
149e4     9C ED B0 FD | 	call	#_pspoke
149e8                 | LR__1667
149e8                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
149e8     18 4E 05 F1 | 	add	fp, #24
149ec     A7 44 02 FB | 	rdlong	local16, fp
149f0     18 4E 85 F1 | 	sub	fp, #24
149f4     06 44 0E F2 | 	cmp	local16, #6 wz
149f8     64 00 90 5D |  if_ne	jmp	#LR__1668
149fc     52 00 00 FF 
14a00     10 E5 05 F1 | 	add	objptr, ##42256
14a04     F2 42 02 FB | 	rdlong	local15, objptr
14a08     52 00 00 FF 
14a0c     10 E5 85 F1 | 	sub	objptr, ##42256
14a10     2B 42 0E F2 | 	cmp	local15, #43 wz
14a14     48 00 90 AD |  if_e	jmp	#LR__1668
14a18     30 4F 05 F1 | 	add	fp, #304
14a1c     A7 32 02 FB | 	rdlong	local07, fp
14a20     02 32 66 F0 | 	shl	local07, #2
14a24     04 4F 85 F1 | 	sub	fp, #260
14a28     A7 32 02 F1 | 	add	local07, fp
14a2c     19 13 02 FB | 	rdlong	arg01, local07
14a30     2C 4E 85 F1 | 	sub	fp, #44
14a34     BC 5B B1 FD | 	call	#__system____builtin_atof
14a38     28 4E 05 F1 | 	add	fp, #40
14a3c     A7 FA 61 FC | 	wrlong	result1, fp
14a40     0C 4E 85 F1 | 	sub	fp, #12
14a44     A7 44 02 FB | 	rdlong	local16, fp
14a48     0C 4E 05 F1 | 	add	fp, #12
14a4c     A7 12 02 F6 | 	mov	arg01, fp
14a50     28 4E 85 F1 | 	sub	fp, #40
14a54     09 15 02 FB | 	rdlong	arg02, arg01
14a58     22 13 02 F6 | 	mov	arg01, local16
14a5c     94 EC B0 FD | 	call	#_pslpoke
14a60                 | LR__1668
14a60     30 4F 05 F1 | 	add	fp, #304
14a64     A7 42 02 FB | 	rdlong	local15, fp
14a68     01 42 06 F1 | 	add	local15, #1
14a6c     A7 42 62 FC | 	wrlong	local15, fp
14a70     30 4F 85 F1 | 	sub	fp, #304
14a74     E4 F6 9F FD | 	jmp	#LR__1633
14a78                 | LR__1669
14a78                 | LR__1670
14a78     A7 F0 03 F6 | 	mov	ptra, fp
14a7c     B2 00 A0 FD | 	call	#popregs_
14a80                 | _do_input_ret
14a80     2D 00 64 FD | 	ret
14a84                 | 
14a84                 | ' 
14a84                 | ' ' ----------------  left$
14a84                 | ' 
14a84                 | ' sub do_left
14a84                 | _do_left
14a84     00 4A 05 F6 | 	mov	COUNT_, #0
14a88     A8 00 A0 FD | 	call	#pushregs_
14a8c     14 F0 07 F1 | 	add	ptra, #20
14a90     4A 00 00 FF 
14a94     80 E4 05 F1 | 	add	objptr, ##38016
14a98     F2 16 02 FB | 	rdlong	arg03, objptr
14a9c     0B 15 02 F6 | 	mov	arg02, arg03
14aa0     01 14 66 F0 | 	shl	arg02, #1
14aa4     0B 15 02 F1 | 	add	arg02, arg03
14aa8     02 14 66 F0 | 	shl	arg02, #2
14aac     03 00 00 FF 
14ab0     04 E4 85 F1 | 	sub	objptr, ##1540
14ab4     F2 14 02 F1 | 	add	arg02, objptr
14ab8     0A 17 02 FB | 	rdlong	arg03, arg02
14abc     0C 4E 05 F1 | 	add	fp, #12
14ac0     A7 16 62 FC | 	wrlong	arg03, fp
14ac4                 | ' 
14ac4                 | ' numpar=compiledline(lineptr_e).result.uresult
14ac4                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
14ac4     0C 4E 85 F1 | 	sub	fp, #12
14ac8     02 16 0E F2 | 	cmp	arg03, #2 wz
14acc     47 00 00 FF 
14ad0     7C E4 85 F1 | 	sub	objptr, ##36476
14ad4     40 00 90 AD |  if_e	jmp	#LR__1680
14ad8     00 12 06 F6 | 	mov	arg01, #0
14adc     B8 81 B1 FD | 	call	#__system___getiolock_0613
14ae0     FD 12 02 F6 | 	mov	arg01, result1
14ae4     88 24 B1 FD | 	call	#__system___lockmem
14ae8     BA 01 00 FF 
14aec     B3 14 06 F6 | 	mov	arg02, ##@LR__5946
14af0     00 12 06 F6 | 	mov	arg01, #0
14af4     00 16 06 F6 | 	mov	arg03, #0
14af8     68 31 B1 FD | 	call	#__system___basic_print_string
14afc     00 12 06 F6 | 	mov	arg01, #0
14b00     94 81 B1 FD | 	call	#__system___getiolock_0613
14b04     FD 00 68 FC | 	wrlong	#0, result1
14b08     27 12 06 F6 | 	mov	arg01, #39
14b0c     00 14 06 F6 | 	mov	arg02, #0
14b10     40 EA B0 FD | 	call	#_printerror
14b14     EC 00 90 FD | 	jmp	#LR__1683
14b18                 | LR__1680
14b18     A8 8B BF FD | 	call	#_pop
14b1c     FF 16 02 F6 | 	mov	arg03, result3
14b20     A7 FA 61 FC | 	wrlong	result1, fp
14b24     04 4E 05 F1 | 	add	fp, #4
14b28     A7 FC 61 FC | 	wrlong	result2, fp
14b2c     04 4E 05 F1 | 	add	fp, #4
14b30     A7 16 62 FC | 	wrlong	arg03, fp
14b34     08 4E 85 F1 | 	sub	fp, #8
14b38     A7 12 02 F6 | 	mov	arg01, fp
14b3c     68 8D BF FD | 	call	#_converttoint
14b40     FD 16 02 F6 | 	mov	arg03, result1
14b44     10 4E 05 F1 | 	add	fp, #16
14b48     A7 16 62 FC | 	wrlong	arg03, fp
14b4c     10 4E 85 F1 | 	sub	fp, #16
14b50     70 8B BF FD | 	call	#_pop
14b54     FF 16 02 F6 | 	mov	arg03, result3
14b58     A7 FA 61 FC | 	wrlong	result1, fp
14b5c     04 4E 05 F1 | 	add	fp, #4
14b60     A7 FC 61 FC | 	wrlong	result2, fp
14b64     04 4E 05 F1 | 	add	fp, #4
14b68     A7 16 62 FC | 	wrlong	arg03, fp
14b6c                 | ' t1=pop() : arg=converttoint(t1)
14b6c                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14b6c     08 4E 85 F1 | 	sub	fp, #8
14b70     2B 16 0E F2 | 	cmp	arg03, #43 wz
14b74     18 00 90 5D |  if_ne	jmp	#LR__1681
14b78     A7 12 02 FB | 	rdlong	arg01, fp
14b7c     BC 8C BF FD | 	call	#_convertstring
14b80     A7 FA 61 FC | 	wrlong	result1, fp
14b84     08 4E 05 F1 | 	add	fp, #8
14b88     A7 3E 68 FC | 	wrlong	#31, fp
14b8c     08 4E 85 F1 | 	sub	fp, #8
14b90                 | LR__1681
14b90                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
14b90     08 4E 05 F1 | 	add	fp, #8
14b94     A7 16 02 FB | 	rdlong	arg03, fp
14b98     08 4E 85 F1 | 	sub	fp, #8
14b9c     1F 16 0E F2 | 	cmp	arg03, #31 wz
14ba0     40 00 90 AD |  if_e	jmp	#LR__1682
14ba4     00 12 06 F6 | 	mov	arg01, #0
14ba8     EC 80 B1 FD | 	call	#__system___getiolock_0613
14bac     FD 12 02 F6 | 	mov	arg01, result1
14bb0     BC 23 B1 FD | 	call	#__system___lockmem
14bb4     BA 01 00 FF 
14bb8     BB 14 06 F6 | 	mov	arg02, ##@LR__5947
14bbc     00 12 06 F6 | 	mov	arg01, #0
14bc0     00 16 06 F6 | 	mov	arg03, #0
14bc4     9C 30 B1 FD | 	call	#__system___basic_print_string
14bc8     00 12 06 F6 | 	mov	arg01, #0
14bcc     C8 80 B1 FD | 	call	#__system___getiolock_0613
14bd0     FD 00 68 FC | 	wrlong	#0, result1
14bd4     0F 12 06 F6 | 	mov	arg01, #15
14bd8     00 14 06 F6 | 	mov	arg02, #0
14bdc     74 E9 B0 FD | 	call	#_printerror
14be0     20 00 90 FD | 	jmp	#LR__1683
14be4                 | LR__1682
14be4     A7 12 02 FB | 	rdlong	arg01, fp
14be8     10 4E 05 F1 | 	add	fp, #16
14bec     A7 14 02 FB | 	rdlong	arg02, fp
14bf0     10 4E 85 F1 | 	sub	fp, #16
14bf4     F4 43 B1 FD | 	call	#__system__Left_S
14bf8     A7 FA 61 FC | 	wrlong	result1, fp
14bfc     A7 12 02 F6 | 	mov	arg01, fp
14c00     58 8B BF FD | 	call	#_push
14c04                 | LR__1683
14c04     A7 F0 03 F6 | 	mov	ptra, fp
14c08     B2 00 A0 FD | 	call	#popregs_
14c0c                 | _do_left_ret
14c0c     2D 00 64 FD | 	ret
14c10                 | 
14c10                 | ' 
14c10                 | ' ' ----------------  len
14c10                 | ' 
14c10                 | ' sub do_len
14c10                 | _do_len
14c10     02 4A 05 F6 | 	mov	COUNT_, #2
14c14     A8 00 A0 FD | 	call	#pushregs_
14c18     14 F0 07 F1 | 	add	ptra, #20
14c1c     4A 00 00 FF 
14c20     80 E4 05 F1 | 	add	objptr, ##38016
14c24     F2 26 02 FB | 	rdlong	local01, objptr
14c28     13 17 02 F6 | 	mov	arg03, local01
14c2c     01 16 66 F0 | 	shl	arg03, #1
14c30     13 17 02 F1 | 	add	arg03, local01
14c34     02 16 66 F0 | 	shl	arg03, #2
14c38     03 00 00 FF 
14c3c     04 E4 85 F1 | 	sub	objptr, ##1540
14c40     F2 16 02 F1 | 	add	arg03, objptr
14c44     0B 17 02 FB | 	rdlong	arg03, arg03
14c48     0C 4E 05 F1 | 	add	fp, #12
14c4c     A7 16 62 FC | 	wrlong	arg03, fp
14c50                 | ' 
14c50                 | ' numpar=compiledline(lineptr_e).result.uresult
14c50                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
14c50     0C 4E 85 F1 | 	sub	fp, #12
14c54     02 16 16 F2 | 	cmp	arg03, #2 wc
14c58     47 00 00 FF 
14c5c     7C E4 85 F1 | 	sub	objptr, ##36476
14c60     0C 4E 05 C1 |  if_b	add	fp, #12
14c64     A7 26 0A CB |  if_b	rdlong	local01, fp wz
14c68     0C 4E 85 C1 |  if_b	sub	fp, #12
14c6c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1690
14c70     00 12 06 F6 | 	mov	arg01, #0
14c74     20 80 B1 FD | 	call	#__system___getiolock_0613
14c78     FD 12 02 F6 | 	mov	arg01, result1
14c7c     F0 22 B1 FD | 	call	#__system___lockmem
14c80     BA 01 00 FF 
14c84     C3 14 06 F6 | 	mov	arg02, ##@LR__5948
14c88     00 12 06 F6 | 	mov	arg01, #0
14c8c     00 16 06 F6 | 	mov	arg03, #0
14c90     D0 2F B1 FD | 	call	#__system___basic_print_string
14c94     00 12 06 F6 | 	mov	arg01, #0
14c98     FC 7F B1 FD | 	call	#__system___getiolock_0613
14c9c     FD 00 68 FC | 	wrlong	#0, result1
14ca0     27 12 06 F6 | 	mov	arg01, #39
14ca4     00 14 06 F6 | 	mov	arg02, #0
14ca8     A8 E8 B0 FD | 	call	#_printerror
14cac     C8 00 90 FD | 	jmp	#LR__1695
14cb0                 | LR__1690
14cb0     10 8A BF FD | 	call	#_pop
14cb4     FF 16 02 F6 | 	mov	arg03, result3
14cb8     A7 FA 61 FC | 	wrlong	result1, fp
14cbc     04 4E 05 F1 | 	add	fp, #4
14cc0     A7 FC 61 FC | 	wrlong	result2, fp
14cc4     04 4E 05 F1 | 	add	fp, #4
14cc8     A7 16 62 FC | 	wrlong	arg03, fp
14ccc                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14ccc     08 4E 85 F1 | 	sub	fp, #8
14cd0     2B 16 0E F2 | 	cmp	arg03, #43 wz
14cd4     18 00 90 5D |  if_ne	jmp	#LR__1691
14cd8     A7 12 02 FB | 	rdlong	arg01, fp
14cdc     5C 8B BF FD | 	call	#_convertstring
14ce0     A7 FA 61 FC | 	wrlong	result1, fp
14ce4     08 4E 05 F1 | 	add	fp, #8
14ce8     A7 3E 68 FC | 	wrlong	#31, fp
14cec     08 4E 85 F1 | 	sub	fp, #8
14cf0                 | LR__1691
14cf0                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
14cf0     08 4E 05 F1 | 	add	fp, #8
14cf4     A7 16 02 FB | 	rdlong	arg03, fp
14cf8     08 4E 85 F1 | 	sub	fp, #8
14cfc     1F 16 0E F2 | 	cmp	arg03, #31 wz
14d00     40 00 90 AD |  if_e	jmp	#LR__1692
14d04     00 12 06 F6 | 	mov	arg01, #0
14d08     8C 7F B1 FD | 	call	#__system___getiolock_0613
14d0c     FD 12 02 F6 | 	mov	arg01, result1
14d10     5C 22 B1 FD | 	call	#__system___lockmem
14d14     BA 01 00 FF 
14d18     C9 14 06 F6 | 	mov	arg02, ##@LR__5949
14d1c     00 12 06 F6 | 	mov	arg01, #0
14d20     00 16 06 F6 | 	mov	arg03, #0
14d24     3C 2F B1 FD | 	call	#__system___basic_print_string
14d28     00 12 06 F6 | 	mov	arg01, #0
14d2c     68 7F B1 FD | 	call	#__system___getiolock_0613
14d30     FD 00 68 FC | 	wrlong	#0, result1
14d34     0F 12 06 F6 | 	mov	arg01, #15
14d38     00 14 06 F6 | 	mov	arg02, #0
14d3c     14 E8 B0 FD | 	call	#_printerror
14d40     34 00 90 FD | 	jmp	#LR__1695
14d44                 | LR__1692
14d44     A7 12 02 FB | 	rdlong	arg01, fp
14d48     09 29 02 F6 | 	mov	local02, arg01
14d4c     97 06 48 FB | 	callpa	#(@LR__1694-@LR__1693)>>2,fcache_load_ptr_
14d50                 | LR__1693
14d50     14 FB C9 FA | 	rdbyte	result1, local02 wz
14d54     01 28 06 51 |  if_ne	add	local02, #1
14d58     F4 FF 9F 5D |  if_ne	jmp	#LR__1693
14d5c                 | LR__1694
14d5c     09 29 82 F1 | 	sub	local02, arg01
14d60     A7 28 62 FC | 	wrlong	local02, fp
14d64     08 4E 05 F1 | 	add	fp, #8
14d68     A7 38 68 FC | 	wrlong	#28, fp
14d6c     08 4E 85 F1 | 	sub	fp, #8
14d70     A7 12 02 F6 | 	mov	arg01, fp
14d74     E4 89 BF FD | 	call	#_push
14d78                 | LR__1695
14d78     A7 F0 03 F6 | 	mov	ptra, fp
14d7c     B2 00 A0 FD | 	call	#popregs_
14d80                 | _do_len_ret
14d80     2D 00 64 FD | 	ret
14d84                 | 
14d84                 | ' 
14d84                 | ' ' ----------------  list
14d84                 | ' 
14d84                 | ' sub do_list
14d84                 | _do_list
14d84     02 4A 05 F6 | 	mov	COUNT_, #2
14d88     A8 00 A0 FD | 	call	#pushregs_
14d8c     B8 F0 07 F1 | 	add	ptra, #184
14d90     04 4E 05 F1 | 	add	fp, #4
14d94     A7 00 68 FC | 	wrlong	#0, fp
14d98     04 4E 05 F1 | 	add	fp, #4
14d9c     FF FF BF FF 
14da0     A7 FE 6B FC | 	wrlong	##2147483647, fp
14da4     08 4E 85 F1 | 	sub	fp, #8
14da8     4A 00 00 FF 
14dac     80 E4 05 F1 | 	add	objptr, ##38016
14db0     F2 26 02 FB | 	rdlong	local01, objptr
14db4     13 17 02 F6 | 	mov	arg03, local01
14db8     01 16 66 F0 | 	shl	arg03, #1
14dbc     13 17 02 F1 | 	add	arg03, local01
14dc0     02 16 66 F0 | 	shl	arg03, #2
14dc4     03 00 00 FF 
14dc8     04 E4 85 F1 | 	sub	objptr, ##1540
14dcc     F2 16 02 F1 | 	add	arg03, objptr
14dd0     0B 17 02 FB | 	rdlong	arg03, arg03
14dd4     A7 16 62 FC | 	wrlong	arg03, fp
14dd8                 | ' 
14dd8                 | ' startline=0 : endline=$7FFFFFFF
14dd8                 | ' numpar=compiledline(lineptr_e).result.uresult
14dd8                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
14dd8     01 16 0E F2 | 	cmp	arg03, #1 wz
14ddc     47 00 00 FF 
14de0     7C E4 85 F1 | 	sub	objptr, ##36476
14de4     3C 00 90 5D |  if_ne	jmp	#LR__1700
14de8     D8 88 BF FD | 	call	#_pop
14dec     FF 26 02 F6 | 	mov	local01, result3
14df0     0C 4E 05 F1 | 	add	fp, #12
14df4     A7 FA 61 FC | 	wrlong	result1, fp
14df8     04 4E 05 F1 | 	add	fp, #4
14dfc     A7 FC 61 FC | 	wrlong	result2, fp
14e00     04 4E 05 F1 | 	add	fp, #4
14e04     A7 26 62 FC | 	wrlong	local01, fp
14e08     08 4E 85 F1 | 	sub	fp, #8
14e0c     A7 12 02 F6 | 	mov	arg01, fp
14e10     0C 4E 85 F1 | 	sub	fp, #12
14e14     90 8A BF FD | 	call	#_converttoint
14e18     04 4E 05 F1 | 	add	fp, #4
14e1c     A7 FA 61 FC | 	wrlong	result1, fp
14e20     04 4E 85 F1 | 	sub	fp, #4
14e24                 | LR__1700
14e24                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
14e24     A7 16 02 FB | 	rdlong	arg03, fp
14e28     02 16 0E F2 | 	cmp	arg03, #2 wz
14e2c     7C 00 90 5D |  if_ne	jmp	#LR__1701
14e30     90 88 BF FD | 	call	#_pop
14e34     FF 26 02 F6 | 	mov	local01, result3
14e38     0C 4E 05 F1 | 	add	fp, #12
14e3c     A7 FA 61 FC | 	wrlong	result1, fp
14e40     04 4E 05 F1 | 	add	fp, #4
14e44     A7 FC 61 FC | 	wrlong	result2, fp
14e48     04 4E 05 F1 | 	add	fp, #4
14e4c     A7 26 62 FC | 	wrlong	local01, fp
14e50     08 4E 85 F1 | 	sub	fp, #8
14e54     A7 12 02 F6 | 	mov	arg01, fp
14e58     0C 4E 85 F1 | 	sub	fp, #12
14e5c     48 8A BF FD | 	call	#_converttoint
14e60     FD 26 02 F6 | 	mov	local01, result1
14e64     08 4E 05 F1 | 	add	fp, #8
14e68     A7 26 62 FC | 	wrlong	local01, fp
14e6c     08 4E 85 F1 | 	sub	fp, #8
14e70     50 88 BF FD | 	call	#_pop
14e74     FF 26 02 F6 | 	mov	local01, result3
14e78     0C 4E 05 F1 | 	add	fp, #12
14e7c     A7 FA 61 FC | 	wrlong	result1, fp
14e80     04 4E 05 F1 | 	add	fp, #4
14e84     A7 FC 61 FC | 	wrlong	result2, fp
14e88     04 4E 05 F1 | 	add	fp, #4
14e8c     A7 26 62 FC | 	wrlong	local01, fp
14e90     08 4E 85 F1 | 	sub	fp, #8
14e94     A7 12 02 F6 | 	mov	arg01, fp
14e98     0C 4E 85 F1 | 	sub	fp, #12
14e9c     08 8A BF FD | 	call	#_converttoint
14ea0     04 4E 05 F1 | 	add	fp, #4
14ea4     A7 FA 61 FC | 	wrlong	result1, fp
14ea8     04 4E 85 F1 | 	sub	fp, #4
14eac                 | LR__1701
14eac                 | ' 
14eac                 | ' 
14eac                 | ' print
14eac     00 12 06 F6 | 	mov	arg01, #0
14eb0     E4 7D B1 FD | 	call	#__system___getiolock_0613
14eb4     FD 12 02 F6 | 	mov	arg01, result1
14eb8     B4 20 B1 FD | 	call	#__system___lockmem
14ebc     00 12 06 F6 | 	mov	arg01, #0
14ec0     0A 14 06 F6 | 	mov	arg02, #10
14ec4     00 16 06 F6 | 	mov	arg03, #0
14ec8     40 2D B1 FD | 	call	#__system___basic_print_char
14ecc     00 12 06 F6 | 	mov	arg01, #0
14ed0     C4 7D B1 FD | 	call	#__system___getiolock_0613
14ed4     FD 00 68 FC | 	wrlong	#0, result1
14ed8     4A 00 00 FF 
14edc     88 E4 05 F1 | 	add	objptr, ##38024
14ee0     F2 28 02 FB | 	rdlong	local02, objptr
14ee4     08 00 00 FF 
14ee8     94 E4 05 F1 | 	add	objptr, ##4244
14eec     F2 28 62 FC | 	wrlong	local02, objptr
14ef0     52 00 00 FF 
14ef4     1C E5 85 F1 | 	sub	objptr, ##42268
14ef8                 | ' do 
14ef8                 | LR__1702
14ef8     20 4E 05 F1 | 	add	fp, #32
14efc     A7 12 02 F6 | 	mov	arg01, fp
14f00     20 4E 85 F1 | 	sub	fp, #32
14f04     52 00 00 FF 
14f08     1C E5 05 F1 | 	add	objptr, ##42268
14f0c     F2 14 02 FB | 	rdlong	arg02, objptr
14f10     18 16 06 F6 | 	mov	arg03, #24
14f14     47 00 00 FF 
14f18     50 E4 85 F1 | 	sub	objptr, ##36432
14f1c     C8 13 B1 FD | 	call	#_psram_spin2_read1
14f20     0B 00 00 FF 
14f24     CC E4 85 F1 | 	sub	objptr, ##5836
14f28                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
14f28                 | '   
14f28                 | '   if header(0)<> $FFFFFFFF then
14f28     20 4E 05 F1 | 	add	fp, #32
14f2c     A7 28 02 FB | 	rdlong	local02, fp
14f30     20 4E 85 F1 | 	sub	fp, #32
14f34     FF FF 7F FF 
14f38     FF 29 0E F2 | 	cmp	local02, ##-1 wz
14f3c     A8 00 90 AD |  if_e	jmp	#LR__1704
14f40     38 4E 05 F1 | 	add	fp, #56
14f44     3F 16 06 F6 | 	mov	arg03, #63
14f48     28 16 62 FD | 	setq	arg03
14f4c     A7 00 68 FC | 	wrlong	#0, fp
14f50     A7 12 02 F6 | 	mov	arg01, fp
14f54     10 4E 85 F1 | 	sub	fp, #16
14f58     A7 14 02 FB | 	rdlong	arg02, fp
14f5c     04 4E 05 F1 | 	add	fp, #4
14f60     A7 16 02 FB | 	rdlong	arg03, fp
14f64     2C 4E 85 F1 | 	sub	fp, #44
14f68     0B 00 00 FF 
14f6c     CC E4 05 F1 | 	add	objptr, ##5836
14f70     74 13 B1 FD | 	call	#_psram_spin2_read1
14f74     0B 00 00 FF 
14f78     CC E4 85 F1 | 	sub	objptr, ##5836
14f7c                 | '     longfill(linebuf,0,64)
14f7c                 | '     psram.read1(varptr(linebuf),header(2),header(3))
14f7c                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
14f7c     20 4E 05 F1 | 	add	fp, #32
14f80     A7 28 02 FB | 	rdlong	local02, fp
14f84     1C 4E 85 F1 | 	sub	fp, #28
14f88     A7 26 02 FB | 	rdlong	local01, fp
14f8c     04 4E 85 F1 | 	sub	fp, #4
14f90     13 29 52 F2 | 	cmps	local02, local01 wc
14f94     30 00 90 CD |  if_b	jmp	#LR__1703
14f98     20 4E 05 F1 | 	add	fp, #32
14f9c     A7 28 02 FB | 	rdlong	local02, fp
14fa0     18 4E 85 F1 | 	sub	fp, #24
14fa4     A7 16 02 FB | 	rdlong	arg03, fp
14fa8     08 4E 85 F1 | 	sub	fp, #8
14fac     0B 29 5A F2 | 	cmps	local02, arg03 wcz
14fb0     14 00 90 1D |  if_a	jmp	#LR__1703
14fb4     38 4E 05 F1 | 	add	fp, #56
14fb8     A7 12 02 F6 | 	mov	arg01, fp
14fbc     38 4E 85 F1 | 	sub	fp, #56
14fc0                 | ' 
14fc0                 | ' write(text)
14fc0     E8 06 B1 FD | 	call	#_hg010b_spin2_write
14fc4                 | ' crlf
14fc4     E4 0B B1 FD | 	call	#_hg010b_spin2_crlf
14fc8                 | LR__1703
14fc8     34 4E 05 F1 | 	add	fp, #52
14fcc     A7 28 02 FB | 	rdlong	local02, fp
14fd0     34 4E 85 F1 | 	sub	fp, #52
14fd4     52 00 00 FF 
14fd8     1C E5 05 F1 | 	add	objptr, ##42268
14fdc     F2 28 62 FC | 	wrlong	local02, objptr
14fe0     52 00 00 FF 
14fe4     1C E5 85 F1 | 	sub	objptr, ##42268
14fe8                 | LR__1704
14fe8     34 4E 05 F1 | 	add	fp, #52
14fec     A7 28 02 FB | 	rdlong	local02, fp
14ff0     34 4E 85 F1 | 	sub	fp, #52
14ff4     FF FF 3F FF 
14ff8     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
14ffc     20 4E 05 51 |  if_ne	add	fp, #32
15000     A7 26 02 5B |  if_ne	rdlong	local01, fp
15004     20 4E 85 51 |  if_ne	sub	fp, #32
15008     FF FF 7F 5F 
1500c     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
15010     E4 FE 9F 5D |  if_ne	jmp	#LR__1702
15014     A7 F0 03 F6 | 	mov	ptra, fp
15018     B2 00 A0 FD | 	call	#popregs_
1501c                 | _do_list_ret
1501c     2D 00 64 FD | 	ret
15020                 | 
15020                 | ' 
15020                 | ' '-------------------- load
15020                 | ' 
15020                 | ' sub do_load(amode=0 as integer)  
15020                 | _do_load
15020     01 4A 05 F6 | 	mov	COUNT_, #1
15024     A8 00 A0 FD | 	call	#pushregs_
15028     AC F0 07 F1 | 	add	ptra, #172
1502c     A7 12 62 FC | 	wrlong	arg01, fp
15030     52 00 00 FF 
15034     D4 E4 05 F1 | 	add	objptr, ##42196
15038     F2 02 68 FC | 	wrlong	#1, objptr
1503c     08 00 00 FF 
15040     54 E4 85 F1 | 	sub	objptr, ##4180
15044     F2 14 02 FB | 	rdlong	arg02, objptr
15048     0A 13 02 F6 | 	mov	arg01, arg02
1504c     01 12 66 F0 | 	shl	arg01, #1
15050     0A 13 02 F1 | 	add	arg01, arg02
15054     02 12 66 F0 | 	shl	arg01, #2
15058     03 00 00 FF 
1505c     04 E4 85 F1 | 	sub	objptr, ##1540
15060     F2 12 02 F1 | 	add	arg01, objptr
15064     09 15 02 FB | 	rdlong	arg02, arg01
15068     1C 4E 05 F1 | 	add	fp, #28
1506c     A7 14 62 FC | 	wrlong	arg02, fp
15070     8C 4E 05 F1 | 	add	fp, #140
15074     A7 12 02 F6 | 	mov	arg01, fp
15078     47 00 00 FF 
1507c     7C E4 85 F1 | 	sub	objptr, ##36476
15080     80 4E 85 F1 | 	sub	fp, #128
15084     09 4F 61 FC | 	wrlong	fp, arg01
15088                 | ' 
15088                 | ' inload=1
15088                 | ' numpar=compiledline(lineptr_e).result.uresult
15088                 | ' lpoke varptr(line2$),varptr(line2)
15088                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
15088     0C 4E 85 F1 | 	sub	fp, #12
1508c     A7 26 02 FB | 	rdlong	local01, fp
15090     1C 4E 85 F1 | 	sub	fp, #28
15094     01 26 56 F2 | 	cmps	local01, #1 wc
15098     24 00 90 CD |  if_b	jmp	#LR__1710
1509c     24 86 BF FD | 	call	#_pop
150a0     04 4E 05 F1 | 	add	fp, #4
150a4     A7 FA 61 FC | 	wrlong	result1, fp
150a8     04 4E 05 F1 | 	add	fp, #4
150ac     A7 FC 61 FC | 	wrlong	result2, fp
150b0     04 4E 05 F1 | 	add	fp, #4
150b4     A7 FE 61 FC | 	wrlong	result3, fp
150b8     0C 4E 85 F1 | 	sub	fp, #12
150bc     28 00 90 FD | 	jmp	#LR__1711
150c0                 | LR__1710
150c0     52 00 00 FF 
150c4     C4 E4 05 F1 | 	add	objptr, ##42180
150c8     F2 26 02 FB | 	rdlong	local01, objptr
150cc     52 00 00 FF 
150d0     C4 E4 85 F1 | 	sub	objptr, ##42180
150d4     04 4E 05 F1 | 	add	fp, #4
150d8     A7 26 62 FC | 	wrlong	local01, fp
150dc     08 4E 05 F1 | 	add	fp, #8
150e0     A7 3E 68 FC | 	wrlong	#31, fp
150e4     0C 4E 85 F1 | 	sub	fp, #12
150e8                 | LR__1711
150e8                 | ' 'print "popped "; t1.result.uresult, t1.result_type
150e8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
150e8     0C 4E 05 F1 | 	add	fp, #12
150ec     A7 26 02 FB | 	rdlong	local01, fp
150f0     0C 4E 85 F1 | 	sub	fp, #12
150f4     2B 26 0E F2 | 	cmp	local01, #43 wz
150f8     24 00 90 5D |  if_ne	jmp	#LR__1712
150fc     04 4E 05 F1 | 	add	fp, #4
15100     A7 12 02 FB | 	rdlong	arg01, fp
15104     04 4E 85 F1 | 	sub	fp, #4
15108     30 87 BF FD | 	call	#_convertstring
1510c     04 4E 05 F1 | 	add	fp, #4
15110     A7 FA 61 FC | 	wrlong	result1, fp
15114     08 4E 05 F1 | 	add	fp, #8
15118     A7 3E 68 FC | 	wrlong	#31, fp
1511c     0C 4E 85 F1 | 	sub	fp, #12
15120                 | LR__1712
15120                 | ' if t1.result_type=result_string then
15120     0C 4E 05 F1 | 	add	fp, #12
15124     A7 26 02 FB | 	rdlong	local01, fp
15128     0C 4E 85 F1 | 	sub	fp, #12
1512c     1F 26 0E F2 | 	cmp	local01, #31 wz
15130     E0 02 90 5D |  if_ne	jmp	#LR__1718
15134                 | '   if amode<>1234 then do_new
15134     A7 26 02 FB | 	rdlong	local01, fp
15138     02 00 00 FF 
1513c     D2 26 0E F2 | 	cmp	local01, ##1234 wz
15140     2C 0F B0 5D |  if_ne	call	#_do_new
15144                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
15144     04 4E 05 F1 | 	add	fp, #4
15148     A7 12 02 FB | 	rdlong	arg01, fp
1514c     04 4E 85 F1 | 	sub	fp, #4
15150     BA 01 00 FF 
15154     CF 14 06 F6 | 	mov	arg02, ##@LR__5950
15158     3C 1E B1 FD | 	call	#__system___string_cmp
1515c     00 FA 0D F2 | 	cmp	result1, #0 wz
15160     24 00 90 5D |  if_ne	jmp	#LR__1713
15164     52 00 00 FF 
15168     C4 E4 05 F1 | 	add	objptr, ##42180
1516c     F2 26 02 FB | 	rdlong	local01, objptr
15170     52 00 00 FF 
15174     C4 E4 85 F1 | 	sub	objptr, ##42180
15178     04 4E 05 F1 | 	add	fp, #4
1517c     A7 26 62 FC | 	wrlong	local01, fp
15180     04 4E 85 F1 | 	sub	fp, #4
15184     20 00 90 FD | 	jmp	#LR__1714
15188                 | LR__1713
15188     04 4E 05 F1 | 	add	fp, #4
1518c     A7 26 02 FB | 	rdlong	local01, fp
15190     04 4E 85 F1 | 	sub	fp, #4
15194     52 00 00 FF 
15198     C4 E4 05 F1 | 	add	objptr, ##42180
1519c     F2 26 62 FC | 	wrlong	local01, objptr
151a0     52 00 00 FF 
151a4     C4 E4 85 F1 | 	sub	objptr, ##42180
151a8                 | LR__1714
151a8                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
151a8     09 12 06 F6 | 	mov	arg01, #9
151ac     18 71 B1 FD | 	call	#__system__close
151b0     09 26 06 F6 | 	mov	local01, #9
151b4     4A 00 00 FF 
151b8     94 E4 05 F1 | 	add	objptr, ##38036
151bc     F2 12 02 FB | 	rdlong	arg01, objptr
151c0     4A 00 00 FF 
151c4     94 E4 85 F1 | 	sub	objptr, ##38036
151c8     BA 01 00 FF 
151cc     D0 14 06 F6 | 	mov	arg02, ##@LR__5951
151d0     F8 1D B1 FD | 	call	#__system___string_concat
151d4     FD 12 02 F6 | 	mov	arg01, result1
151d8     04 4E 05 F1 | 	add	fp, #4
151dc     A7 14 02 FB | 	rdlong	arg02, fp
151e0     04 4E 85 F1 | 	sub	fp, #4
151e4     E4 1D B1 FD | 	call	#__system___string_concat
151e8     FD 14 02 F6 | 	mov	arg02, result1
151ec     13 13 02 F6 | 	mov	arg01, local01
151f0     00 16 06 F6 | 	mov	arg03, #0
151f4     7C 29 B1 FD | 	call	#__system___basic_open_string
151f8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
151fc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
15200     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
15204     14 4E 05 F1 | 	add	fp, #20
15208     A7 FA 61 FC | 	wrlong	result1, fp
1520c                 | '   r=geterr() 
1520c                 | '   if r then 
1520c     14 4E 85 F1 | 	sub	fp, #20
15210     50 01 90 AD |  if_e	jmp	#LR__1716
15214                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
15214     09 12 06 F6 | 	mov	arg01, #9
15218     AC 70 B1 FD | 	call	#__system__close
1521c     09 26 06 F6 | 	mov	local01, #9
15220     4A 00 00 FF 
15224     94 E4 05 F1 | 	add	objptr, ##38036
15228     F2 12 02 FB | 	rdlong	arg01, objptr
1522c     4A 00 00 FF 
15230     94 E4 85 F1 | 	sub	objptr, ##38036
15234     BA 01 00 FF 
15238     D2 14 06 F6 | 	mov	arg02, ##@LR__5952
1523c     8C 1D B1 FD | 	call	#__system___string_concat
15240     FD 12 02 F6 | 	mov	arg01, result1
15244     04 4E 05 F1 | 	add	fp, #4
15248     A7 14 02 FB | 	rdlong	arg02, fp
1524c     04 4E 85 F1 | 	sub	fp, #4
15250     78 1D B1 FD | 	call	#__system___string_concat
15254     FD 12 02 F6 | 	mov	arg01, result1
15258     BA 01 00 FF 
1525c     D4 14 06 F6 | 	mov	arg02, ##@LR__5953
15260     68 1D B1 FD | 	call	#__system___string_concat
15264     FD 14 02 F6 | 	mov	arg02, result1
15268     13 13 02 F6 | 	mov	arg01, local01
1526c     00 16 06 F6 | 	mov	arg03, #0
15270     00 29 B1 FD | 	call	#__system___basic_open_string
15274     20 E6 05 F1 | 	add	ptr___system__dat__, #32
15278     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1527c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
15280     14 4E 05 F1 | 	add	fp, #20
15284     A7 FA 61 FC | 	wrlong	result1, fp
15288                 | '     r=geterr() 
15288                 | '     if r then 
15288     14 4E 85 F1 | 	sub	fp, #20
1528c     A0 00 90 AD |  if_e	jmp	#LR__1715
15290                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
15290     00 12 06 F6 | 	mov	arg01, #0
15294     00 7A B1 FD | 	call	#__system___getiolock_0613
15298     FD 12 02 F6 | 	mov	arg01, result1
1529c     D0 1C B1 FD | 	call	#__system___lockmem
152a0     BA 01 00 FF 
152a4     D9 14 06 F6 | 	mov	arg02, ##@LR__5954
152a8     00 12 06 F6 | 	mov	arg01, #0
152ac     00 16 06 F6 | 	mov	arg03, #0
152b0     B0 29 B1 FD | 	call	#__system___basic_print_string
152b4     14 4E 05 F1 | 	add	fp, #20
152b8     A7 14 02 FB | 	rdlong	arg02, fp
152bc     14 4E 85 F1 | 	sub	fp, #20
152c0     00 12 06 F6 | 	mov	arg01, #0
152c4     00 16 06 F6 | 	mov	arg03, #0
152c8     0A 18 06 F6 | 	mov	arg04, #10
152cc     D8 29 B1 FD | 	call	#__system___basic_print_integer
152d0     BA 01 00 FF 
152d4     E7 14 06 F6 | 	mov	arg02, ##@LR__5955
152d8     00 12 06 F6 | 	mov	arg01, #0
152dc     00 16 06 F6 | 	mov	arg03, #0
152e0     80 29 B1 FD | 	call	#__system___basic_print_string
152e4     00 26 06 F6 | 	mov	local01, #0
152e8     14 4E 05 F1 | 	add	fp, #20
152ec     A7 12 02 FB | 	rdlong	arg01, fp
152f0     14 4E 85 F1 | 	sub	fp, #20
152f4     04 46 B1 FD | 	call	#__system___strerror
152f8     FD 14 02 F6 | 	mov	arg02, result1
152fc     13 13 02 F6 | 	mov	arg01, local01
15300     00 16 06 F6 | 	mov	arg03, #0
15304     5C 29 B1 FD | 	call	#__system___basic_print_string
15308     00 12 06 F6 | 	mov	arg01, #0
1530c     0A 14 06 F6 | 	mov	arg02, #10
15310     00 16 06 F6 | 	mov	arg03, #0
15314     F4 28 B1 FD | 	call	#__system___basic_print_char
15318     00 12 06 F6 | 	mov	arg01, #0
1531c     78 79 B1 FD | 	call	#__system___getiolock_0613
15320     FD 00 68 FC | 	wrlong	#0, result1
15324     09 12 06 F6 | 	mov	arg01, #9
15328     9C 6F B1 FD | 	call	#__system__close
1532c     94 01 90 FD | 	jmp	#LR__1720
15330                 | LR__1715
15330     52 00 00 FF 
15334     C4 E4 05 F1 | 	add	objptr, ##42180
15338     F2 12 02 FB | 	rdlong	arg01, objptr
1533c     52 00 00 FF 
15340     C4 E4 85 F1 | 	sub	objptr, ##42180
15344     BA 01 00 FF 
15348     EA 14 06 F6 | 	mov	arg02, ##@LR__5956
1534c     7C 1C B1 FD | 	call	#__system___string_concat
15350     52 00 00 FF 
15354     C4 E4 05 F1 | 	add	objptr, ##42180
15358     F2 FA 61 FC | 	wrlong	result1, objptr
1535c     52 00 00 FF 
15360     C4 E4 85 F1 | 	sub	objptr, ##42180
15364                 | LR__1716
15364                 | '   close #9: open currentdir$+"/"+loadname for input as #9
15364     09 12 06 F6 | 	mov	arg01, #9
15368     5C 6F B1 FD | 	call	#__system__close
1536c     09 26 06 F6 | 	mov	local01, #9
15370     4A 00 00 FF 
15374     94 E4 05 F1 | 	add	objptr, ##38036
15378     F2 12 02 FB | 	rdlong	arg01, objptr
1537c     4A 00 00 FF 
15380     94 E4 85 F1 | 	sub	objptr, ##38036
15384     BA 01 00 FF 
15388     EF 14 06 F6 | 	mov	arg02, ##@LR__5957
1538c     3C 1C B1 FD | 	call	#__system___string_concat
15390     FD 12 02 F6 | 	mov	arg01, result1
15394     52 00 00 FF 
15398     C4 E4 05 F1 | 	add	objptr, ##42180
1539c     F2 14 02 FB | 	rdlong	arg02, objptr
153a0     52 00 00 FF 
153a4     C4 E4 85 F1 | 	sub	objptr, ##42180
153a8     20 1C B1 FD | 	call	#__system___string_concat
153ac     FD 14 02 F6 | 	mov	arg02, result1
153b0     13 13 02 F6 | 	mov	arg01, local01
153b4     00 16 06 F6 | 	mov	arg03, #0
153b8     B8 27 B1 FD | 	call	#__system___basic_open_string
153bc                 | '   do
153bc                 | LR__1717
153bc     09 12 06 F6 | 	mov	arg01, #9
153c0     B8 1D B1 FD | 	call	#__system___basic_read_line
153c4     FD 26 02 F6 | 	mov	local01, result1
153c8     37 00 00 FF 
153cc     1C E4 05 F1 | 	add	objptr, ##28188
153d0     F2 26 62 FC | 	wrlong	local01, objptr
153d4     37 00 00 FF 
153d8     1C E4 85 F1 | 	sub	objptr, ##28188
153dc     48 C4 BE FD | 	call	#_interpret
153e0     37 00 00 FF 
153e4     1C E4 05 F1 | 	add	objptr, ##28188
153e8     F2 12 02 FB | 	rdlong	arg01, objptr
153ec     37 00 00 FF 
153f0     1C E4 85 F1 | 	sub	objptr, ##28188
153f4     BA 01 00 FF 
153f8     F1 14 06 F6 | 	mov	arg02, ##@LR__5958
153fc     98 1B B1 FD | 	call	#__system___string_cmp
15400     00 FA 0D F2 | 	cmp	result1, #0 wz
15404     B4 FF 9F 5D |  if_ne	jmp	#LR__1717
15408                 | '   close #9   
15408     09 12 06 F6 | 	mov	arg01, #9
1540c     B8 6E B1 FD | 	call	#__system__close
15410     0C 00 90 FD | 	jmp	#LR__1719
15414                 | LR__1718
15414     1E 12 06 F6 | 	mov	arg01, #30
15418     00 14 06 F6 | 	mov	arg02, #0
1541c     34 E1 B0 FD | 	call	#_printerror
15420                 | LR__1719
15420                 | ' print "Loaded ";currentdir$+"/"+loadname
15420     00 12 06 F6 | 	mov	arg01, #0
15424     70 78 B1 FD | 	call	#__system___getiolock_0613
15428     FD 12 02 F6 | 	mov	arg01, result1
1542c     40 1B B1 FD | 	call	#__system___lockmem
15430     BA 01 00 FF 
15434     F2 14 06 F6 | 	mov	arg02, ##@LR__5959
15438     00 12 06 F6 | 	mov	arg01, #0
1543c     00 16 06 F6 | 	mov	arg03, #0
15440     20 28 B1 FD | 	call	#__system___basic_print_string
15444     00 26 06 F6 | 	mov	local01, #0
15448     4A 00 00 FF 
1544c     94 E4 05 F1 | 	add	objptr, ##38036
15450     F2 12 02 FB | 	rdlong	arg01, objptr
15454     4A 00 00 FF 
15458     94 E4 85 F1 | 	sub	objptr, ##38036
1545c     BA 01 00 FF 
15460     FA 14 06 F6 | 	mov	arg02, ##@LR__5960
15464     64 1B B1 FD | 	call	#__system___string_concat
15468     FD 12 02 F6 | 	mov	arg01, result1
1546c     52 00 00 FF 
15470     C4 E4 05 F1 | 	add	objptr, ##42180
15474     F2 14 02 FB | 	rdlong	arg02, objptr
15478     52 00 00 FF 
1547c     C4 E4 85 F1 | 	sub	objptr, ##42180
15480     48 1B B1 FD | 	call	#__system___string_concat
15484     FD 14 02 F6 | 	mov	arg02, result1
15488     13 13 02 F6 | 	mov	arg01, local01
1548c     00 16 06 F6 | 	mov	arg03, #0
15490     D0 27 B1 FD | 	call	#__system___basic_print_string
15494     00 12 06 F6 | 	mov	arg01, #0
15498     0A 14 06 F6 | 	mov	arg02, #10
1549c     00 16 06 F6 | 	mov	arg03, #0
154a0     68 27 B1 FD | 	call	#__system___basic_print_char
154a4     00 12 06 F6 | 	mov	arg01, #0
154a8     EC 77 B1 FD | 	call	#__system___getiolock_0613
154ac     FD 00 68 FC | 	wrlong	#0, result1
154b0     52 00 00 FF 
154b4     D4 E4 05 F1 | 	add	objptr, ##42196
154b8     F2 00 68 FC | 	wrlong	#0, objptr
154bc     52 00 00 FF 
154c0     D4 E4 85 F1 | 	sub	objptr, ##42196
154c4                 | LR__1720
154c4     A7 F0 03 F6 | 	mov	ptra, fp
154c8     B2 00 A0 FD | 	call	#popregs_
154cc                 | _do_load_ret
154cc     2D 00 64 FD | 	ret
154d0                 | 
154d0                 | ' 
154d0                 | ' '-------------------- log
154d0                 | ' 
154d0                 | ' sub do_log
154d0                 | _do_log
154d0     01 4A 05 F6 | 	mov	COUNT_, #1
154d4     A8 00 A0 FD | 	call	#pushregs_
154d8     14 F0 07 F1 | 	add	ptra, #20
154dc     4A 00 00 FF 
154e0     80 E4 05 F1 | 	add	objptr, ##38016
154e4     F2 26 02 FB | 	rdlong	local01, objptr
154e8     13 17 02 F6 | 	mov	arg03, local01
154ec     01 16 66 F0 | 	shl	arg03, #1
154f0     13 17 02 F1 | 	add	arg03, local01
154f4     02 16 66 F0 | 	shl	arg03, #2
154f8     03 00 00 FF 
154fc     04 E4 85 F1 | 	sub	objptr, ##1540
15500     F2 16 02 F1 | 	add	arg03, objptr
15504     0B 17 0A FB | 	rdlong	arg03, arg03 wz
15508     0C 4E 05 F1 | 	add	fp, #12
1550c     A7 16 62 FC | 	wrlong	arg03, fp
15510                 | ' 
15510                 | ' numpar=compiledline(lineptr_e).result.uresult
15510                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
15510     0C 4E 85 F1 | 	sub	fp, #12
15514     47 00 00 FF 
15518     7C E4 85 F1 | 	sub	objptr, ##36476
1551c     0C 4E 05 51 |  if_ne	add	fp, #12
15520     A7 26 02 5B |  if_ne	rdlong	local01, fp
15524     0C 4E 85 51 |  if_ne	sub	fp, #12
15528     03 26 16 52 |  if_ne	cmp	local01, #3 wc
1552c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1730
15530     00 12 06 F6 | 	mov	arg01, #0
15534     60 77 B1 FD | 	call	#__system___getiolock_0613
15538     FD 12 02 F6 | 	mov	arg01, result1
1553c     30 1A B1 FD | 	call	#__system___lockmem
15540     BA 01 00 FF 
15544     FC 14 06 F6 | 	mov	arg02, ##@LR__5961
15548     00 12 06 F6 | 	mov	arg01, #0
1554c     00 16 06 F6 | 	mov	arg03, #0
15550     10 27 B1 FD | 	call	#__system___basic_print_string
15554     00 12 06 F6 | 	mov	arg01, #0
15558     3C 77 B1 FD | 	call	#__system___getiolock_0613
1555c     FD 00 68 FC | 	wrlong	#0, result1
15560     27 12 06 F6 | 	mov	arg01, #39
15564     00 14 06 F6 | 	mov	arg02, #0
15568     E8 DF B0 FD | 	call	#_printerror
1556c     D0 00 90 FD | 	jmp	#LR__1733
15570                 | LR__1730
15570                 | ' if numpar=2 then 
15570     0C 4E 05 F1 | 	add	fp, #12
15574     A7 26 02 FB | 	rdlong	local01, fp
15578     0C 4E 85 F1 | 	sub	fp, #12
1557c     02 26 0E F2 | 	cmp	local01, #2 wz
15580     48 00 90 5D |  if_ne	jmp	#LR__1731
15584     3C 81 BF FD | 	call	#_pop
15588     FF 26 02 F6 | 	mov	local01, result3
1558c     A7 FA 61 FC | 	wrlong	result1, fp
15590     04 4E 05 F1 | 	add	fp, #4
15594     A7 FC 61 FC | 	wrlong	result2, fp
15598     04 4E 05 F1 | 	add	fp, #4
1559c     A7 26 62 FC | 	wrlong	local01, fp
155a0     08 4E 85 F1 | 	sub	fp, #8
155a4     A7 12 02 F6 | 	mov	arg01, fp
155a8     B8 83 BF FD | 	call	#_converttofloat
155ac     FD 14 02 F6 | 	mov	arg02, result1
155b0     FC 16 20 FF 
155b4     54 12 06 F6 | 	mov	arg01, ##1076754516
155b8     FC 57 B1 FD | 	call	#__system____builtin_logbase
155bc     10 4E 05 F1 | 	add	fp, #16
155c0     A7 FA 61 FC | 	wrlong	result1, fp
155c4     10 4E 85 F1 | 	sub	fp, #16
155c8     10 00 90 FD | 	jmp	#LR__1732
155cc                 | LR__1731
155cc     10 4E 05 F1 | 	add	fp, #16
155d0     00 C0 9F FF 
155d4     A7 00 68 FC | 	wrlong	##1065353216, fp
155d8     10 4E 85 F1 | 	sub	fp, #16
155dc                 | LR__1732
155dc     E4 80 BF FD | 	call	#_pop
155e0     FF 26 02 F6 | 	mov	local01, result3
155e4     A7 FA 61 FC | 	wrlong	result1, fp
155e8     04 4E 05 F1 | 	add	fp, #4
155ec     A7 FC 61 FC | 	wrlong	result2, fp
155f0     04 4E 05 F1 | 	add	fp, #4
155f4     A7 26 62 FC | 	wrlong	local01, fp
155f8     08 4E 85 F1 | 	sub	fp, #8
155fc     A7 12 02 F6 | 	mov	arg01, fp
15600     60 83 BF FD | 	call	#_converttofloat
15604     FD 14 02 F6 | 	mov	arg02, result1
15608     FC 16 20 FF 
1560c     54 12 06 F6 | 	mov	arg01, ##1076754516
15610     A4 57 B1 FD | 	call	#__system____builtin_logbase
15614     FD 12 02 F6 | 	mov	arg01, result1
15618     10 4E 05 F1 | 	add	fp, #16
1561c     A7 14 02 FB | 	rdlong	arg02, fp
15620     10 4E 85 F1 | 	sub	fp, #16
15624     C4 49 B1 FD | 	call	#__system___float_div
15628     A7 FA 61 FC | 	wrlong	result1, fp
1562c     08 4E 05 F1 | 	add	fp, #8
15630     A7 3C 68 FC | 	wrlong	#30, fp
15634     08 4E 85 F1 | 	sub	fp, #8
15638     A7 12 02 F6 | 	mov	arg01, fp
1563c     1C 81 BF FD | 	call	#_push
15640                 | LR__1733
15640     A7 F0 03 F6 | 	mov	ptra, fp
15644     B2 00 A0 FD | 	call	#popregs_
15648                 | _do_log_ret
15648     2D 00 64 FD | 	ret
1564c                 | 
1564c                 | ' 
1564c                 | ' '-------------------- lpeek
1564c                 | ' 
1564c                 | ' sub do_lpeek
1564c                 | _do_lpeek
1564c     00 4A 05 F6 | 	mov	COUNT_, #0
15650     A8 00 A0 FD | 	call	#pushregs_
15654     14 F0 07 F1 | 	add	ptra, #20
15658     68 80 BF FD | 	call	#_pop
1565c     A7 FA 61 FC | 	wrlong	result1, fp
15660     04 4E 05 F1 | 	add	fp, #4
15664     A7 FC 61 FC | 	wrlong	result2, fp
15668     04 4E 05 F1 | 	add	fp, #4
1566c     A7 FE 61 FC | 	wrlong	result3, fp
15670     08 4E 85 F1 | 	sub	fp, #8
15674     A7 12 02 F6 | 	mov	arg01, fp
15678     2C 82 BF FD | 	call	#_converttoint
1567c     0C 4E 05 F1 | 	add	fp, #12
15680     A7 FA 61 FC | 	wrlong	result1, fp
15684                 | ' 
15684                 | ' t1=pop()
15684                 | ' a=converttoint(t1)
15684                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
15684     0C 4E 85 F1 | 	sub	fp, #12
15688     00 04 00 FF 
1568c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
15690     1C 00 90 3D |  if_ae	jmp	#LR__1740
15694     0C 4E 05 F1 | 	add	fp, #12
15698     A7 12 02 FB | 	rdlong	arg01, fp
1569c     09 FB 01 FB | 	rdlong	result1, arg01
156a0     04 4E 05 F1 | 	add	fp, #4
156a4     A7 FA 61 FC | 	wrlong	result1, fp
156a8     10 4E 85 F1 | 	sub	fp, #16
156ac     1C 00 90 FD | 	jmp	#LR__1741
156b0                 | LR__1740
156b0     0C 4E 05 F1 | 	add	fp, #12
156b4     A7 12 02 FB | 	rdlong	arg01, fp
156b8     0C 4E 85 F1 | 	sub	fp, #12
156bc     64 E1 B0 FD | 	call	#_pslpeek
156c0     10 4E 05 F1 | 	add	fp, #16
156c4     A7 FA 61 FC | 	wrlong	result1, fp
156c8     10 4E 85 F1 | 	sub	fp, #16
156cc                 | LR__1741
156cc     08 4E 05 F1 | 	add	fp, #8
156d0     A7 3A 68 FC | 	wrlong	#29, fp
156d4     08 4E 05 F1 | 	add	fp, #8
156d8     A7 12 02 FB | 	rdlong	arg01, fp
156dc     10 4E 85 F1 | 	sub	fp, #16
156e0     A7 12 62 FC | 	wrlong	arg01, fp
156e4     A7 12 02 F6 | 	mov	arg01, fp
156e8     70 80 BF FD | 	call	#_push
156ec     A7 F0 03 F6 | 	mov	ptra, fp
156f0     B2 00 A0 FD | 	call	#popregs_
156f4                 | _do_lpeek_ret
156f4     2D 00 64 FD | 	ret
156f8                 | 
156f8                 | ' 
156f8                 | ' '-------------------- lpoke
156f8                 | ' 
156f8                 | ' sub do_lpoke
156f8                 | _do_lpoke
156f8     01 4A 05 F6 | 	mov	COUNT_, #1
156fc     A8 00 A0 FD | 	call	#pushregs_
15700     20 F0 07 F1 | 	add	ptra, #32
15704     BC 7F BF FD | 	call	#_pop
15708     FD 14 02 F6 | 	mov	arg02, result1
1570c     FE 12 02 F6 | 	mov	arg01, result2
15710     FF 26 02 F6 | 	mov	local01, result3
15714     A7 14 62 FC | 	wrlong	arg02, fp
15718     04 4E 05 F1 | 	add	fp, #4
1571c     A7 12 62 FC | 	wrlong	arg01, fp
15720     04 4E 05 F1 | 	add	fp, #4
15724     A7 26 62 FC | 	wrlong	local01, fp
15728     08 4E 85 F1 | 	sub	fp, #8
1572c     94 7F BF FD | 	call	#_pop
15730     FF 26 02 F6 | 	mov	local01, result3
15734     0C 4E 05 F1 | 	add	fp, #12
15738     A7 FA 61 FC | 	wrlong	result1, fp
1573c     04 4E 05 F1 | 	add	fp, #4
15740     A7 FC 61 FC | 	wrlong	result2, fp
15744     04 4E 05 F1 | 	add	fp, #4
15748     A7 26 62 FC | 	wrlong	local01, fp
1574c     08 4E 85 F1 | 	sub	fp, #8
15750     A7 12 02 F6 | 	mov	arg01, fp
15754     0C 4E 85 F1 | 	sub	fp, #12
15758     4C 81 BF FD | 	call	#_converttoint
1575c     18 4E 05 F1 | 	add	fp, #24
15760     A7 FA 61 FC | 	wrlong	result1, fp
15764     18 4E 85 F1 | 	sub	fp, #24
15768     A7 12 02 F6 | 	mov	arg01, fp
1576c     38 81 BF FD | 	call	#_converttoint
15770     1C 4E 05 F1 | 	add	fp, #28
15774     A7 FA 61 FC | 	wrlong	result1, fp
15778                 | ' 
15778                 | ' t1=pop() 'value
15778                 | ' t2=pop() 
15778                 | ' a=converttoint(t2) : v=converttoint(t1)
15778                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
15778     04 4E 85 F1 | 	sub	fp, #4
1577c     A7 26 02 FB | 	rdlong	local01, fp
15780     18 4E 85 F1 | 	sub	fp, #24
15784     00 04 00 FF 
15788     00 26 16 F2 | 	cmp	local01, ##524288 wc
1578c     1C 00 90 3D |  if_ae	jmp	#LR__1750
15790     18 4E 05 F1 | 	add	fp, #24
15794     A7 12 02 FB | 	rdlong	arg01, fp
15798     04 4E 05 F1 | 	add	fp, #4
1579c     A7 14 02 FB | 	rdlong	arg02, fp
157a0     1C 4E 85 F1 | 	sub	fp, #28
157a4     09 15 62 FC | 	wrlong	arg02, arg01
157a8     18 00 90 FD | 	jmp	#LR__1751
157ac                 | LR__1750
157ac     18 4E 05 F1 | 	add	fp, #24
157b0     A7 12 02 FB | 	rdlong	arg01, fp
157b4     04 4E 05 F1 | 	add	fp, #4
157b8     A7 14 02 FB | 	rdlong	arg02, fp
157bc     1C 4E 85 F1 | 	sub	fp, #28
157c0     30 DF B0 FD | 	call	#_pslpoke
157c4                 | LR__1751
157c4     A7 F0 03 F6 | 	mov	ptra, fp
157c8     B2 00 A0 FD | 	call	#popregs_
157cc                 | _do_lpoke_ret
157cc     2D 00 64 FD | 	ret
157d0                 | 
157d0                 | ' 
157d0                 | ' '-------------------- memlo
157d0                 | ' 
157d0                 | ' sub do_memlo
157d0                 | _do_memlo
157d0     00 4A 05 F6 | 	mov	COUNT_, #0
157d4     A8 00 A0 FD | 	call	#pushregs_
157d8     0C F0 07 F1 | 	add	ptra, #12
157dc     43 00 00 FF 
157e0     5C E4 05 F1 | 	add	objptr, ##34396
157e4     F2 12 02 FB | 	rdlong	arg01, objptr
157e8     43 00 00 FF 
157ec     5C E4 85 F1 | 	sub	objptr, ##34396
157f0     A7 12 62 FC | 	wrlong	arg01, fp
157f4     08 4E 05 F1 | 	add	fp, #8
157f8     A7 3A 68 FC | 	wrlong	#29, fp
157fc     08 4E 85 F1 | 	sub	fp, #8
15800     A7 12 02 F6 | 	mov	arg01, fp
15804     54 7F BF FD | 	call	#_push
15808     A7 F0 03 F6 | 	mov	ptra, fp
1580c     B2 00 A0 FD | 	call	#popregs_
15810                 | _do_memlo_ret
15810     2D 00 64 FD | 	ret
15814                 | 
15814                 | ' 
15814                 | ' '-------------------- memtop
15814                 | ' 
15814                 | ' sub do_memtop
15814                 | _do_memtop
15814     00 4A 05 F6 | 	mov	COUNT_, #0
15818     A8 00 A0 FD | 	call	#pushregs_
1581c     0C F0 07 F1 | 	add	ptra, #12
15820     52 00 00 FF 
15824     98 E4 05 F1 | 	add	objptr, ##42136
15828     F2 12 02 FB | 	rdlong	arg01, objptr
1582c     52 00 00 FF 
15830     98 E4 85 F1 | 	sub	objptr, ##42136
15834     A7 12 62 FC | 	wrlong	arg01, fp
15838     08 4E 05 F1 | 	add	fp, #8
1583c     A7 3A 68 FC | 	wrlong	#29, fp
15840     08 4E 85 F1 | 	sub	fp, #8
15844     A7 12 02 F6 | 	mov	arg01, fp
15848     10 7F BF FD | 	call	#_push
1584c     A7 F0 03 F6 | 	mov	ptra, fp
15850     B2 00 A0 FD | 	call	#popregs_
15854                 | _do_memtop_ret
15854     2D 00 64 FD | 	ret
15858                 | 
15858                 | ' 
15858                 | ' '-------------------- mid$
15858                 | ' 
15858                 | ' sub do_mid
15858                 | _do_mid
15858     00 4A 05 F6 | 	mov	COUNT_, #0
1585c     A8 00 A0 FD | 	call	#pushregs_
15860     18 F0 07 F1 | 	add	ptra, #24
15864     4A 00 00 FF 
15868     80 E4 05 F1 | 	add	objptr, ##38016
1586c     F2 16 02 FB | 	rdlong	arg03, objptr
15870     0B 15 02 F6 | 	mov	arg02, arg03
15874     01 14 66 F0 | 	shl	arg02, #1
15878     0B 15 02 F1 | 	add	arg02, arg03
1587c     02 14 66 F0 | 	shl	arg02, #2
15880     03 00 00 FF 
15884     04 E4 85 F1 | 	sub	objptr, ##1540
15888     F2 14 02 F1 | 	add	arg02, objptr
1588c     0A 17 02 FB | 	rdlong	arg03, arg02
15890     0C 4E 05 F1 | 	add	fp, #12
15894     A7 16 62 FC | 	wrlong	arg03, fp
15898                 | ' 
15898                 | ' numpar=compiledline(lineptr_e).result.uresult
15898                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
15898     0C 4E 85 F1 | 	sub	fp, #12
1589c     03 16 0E F2 | 	cmp	arg03, #3 wz
158a0     47 00 00 FF 
158a4     7C E4 85 F1 | 	sub	objptr, ##36476
158a8     40 00 90 AD |  if_e	jmp	#LR__1760
158ac     00 12 06 F6 | 	mov	arg01, #0
158b0     E4 73 B1 FD | 	call	#__system___getiolock_0613
158b4     FD 12 02 F6 | 	mov	arg01, result1
158b8     B4 16 B1 FD | 	call	#__system___lockmem
158bc     BA 01 00 FF 
158c0     02 15 06 F6 | 	mov	arg02, ##@LR__5962
158c4     00 12 06 F6 | 	mov	arg01, #0
158c8     00 16 06 F6 | 	mov	arg03, #0
158cc     94 23 B1 FD | 	call	#__system___basic_print_string
158d0     00 12 06 F6 | 	mov	arg01, #0
158d4     C0 73 B1 FD | 	call	#__system___getiolock_0613
158d8     FD 00 68 FC | 	wrlong	#0, result1
158dc     27 12 06 F6 | 	mov	arg01, #39
158e0     00 14 06 F6 | 	mov	arg02, #0
158e4     6C DC B0 FD | 	call	#_printerror
158e8     2C 01 90 FD | 	jmp	#LR__1763
158ec                 | LR__1760
158ec     D4 7D BF FD | 	call	#_pop
158f0     FF 16 02 F6 | 	mov	arg03, result3
158f4     A7 FA 61 FC | 	wrlong	result1, fp
158f8     04 4E 05 F1 | 	add	fp, #4
158fc     A7 FC 61 FC | 	wrlong	result2, fp
15900     04 4E 05 F1 | 	add	fp, #4
15904     A7 16 62 FC | 	wrlong	arg03, fp
15908     08 4E 85 F1 | 	sub	fp, #8
1590c     A7 12 02 F6 | 	mov	arg01, fp
15910     94 7F BF FD | 	call	#_converttoint
15914     FD 16 02 F6 | 	mov	arg03, result1
15918     14 4E 05 F1 | 	add	fp, #20
1591c     A7 16 62 FC | 	wrlong	arg03, fp
15920     14 4E 85 F1 | 	sub	fp, #20
15924     9C 7D BF FD | 	call	#_pop
15928     FF 16 02 F6 | 	mov	arg03, result3
1592c     A7 FA 61 FC | 	wrlong	result1, fp
15930     04 4E 05 F1 | 	add	fp, #4
15934     A7 FC 61 FC | 	wrlong	result2, fp
15938     04 4E 05 F1 | 	add	fp, #4
1593c     A7 16 62 FC | 	wrlong	arg03, fp
15940     08 4E 85 F1 | 	sub	fp, #8
15944     A7 12 02 F6 | 	mov	arg01, fp
15948     5C 7F BF FD | 	call	#_converttoint
1594c     FD 16 02 F6 | 	mov	arg03, result1
15950     10 4E 05 F1 | 	add	fp, #16
15954     A7 16 62 FC | 	wrlong	arg03, fp
15958     10 4E 85 F1 | 	sub	fp, #16
1595c     64 7D BF FD | 	call	#_pop
15960     FF 16 02 F6 | 	mov	arg03, result3
15964     A7 FA 61 FC | 	wrlong	result1, fp
15968     04 4E 05 F1 | 	add	fp, #4
1596c     A7 FC 61 FC | 	wrlong	result2, fp
15970     04 4E 05 F1 | 	add	fp, #4
15974     A7 16 62 FC | 	wrlong	arg03, fp
15978                 | ' t1=pop() : arg2=converttoint(t1)
15978                 | ' t1=pop() : arg1=converttoint(t1)
15978                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15978     08 4E 85 F1 | 	sub	fp, #8
1597c     2B 16 0E F2 | 	cmp	arg03, #43 wz
15980     18 00 90 5D |  if_ne	jmp	#LR__1761
15984     A7 12 02 FB | 	rdlong	arg01, fp
15988     B0 7E BF FD | 	call	#_convertstring
1598c     A7 FA 61 FC | 	wrlong	result1, fp
15990     08 4E 05 F1 | 	add	fp, #8
15994     A7 3E 68 FC | 	wrlong	#31, fp
15998     08 4E 85 F1 | 	sub	fp, #8
1599c                 | LR__1761
1599c                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
1599c     08 4E 05 F1 | 	add	fp, #8
159a0     A7 16 02 FB | 	rdlong	arg03, fp
159a4     08 4E 85 F1 | 	sub	fp, #8
159a8     1F 16 0E F2 | 	cmp	arg03, #31 wz
159ac     40 00 90 AD |  if_e	jmp	#LR__1762
159b0     00 12 06 F6 | 	mov	arg01, #0
159b4     E0 72 B1 FD | 	call	#__system___getiolock_0613
159b8     FD 12 02 F6 | 	mov	arg01, result1
159bc     B0 15 B1 FD | 	call	#__system___lockmem
159c0     BA 01 00 FF 
159c4     09 15 06 F6 | 	mov	arg02, ##@LR__5963
159c8     00 12 06 F6 | 	mov	arg01, #0
159cc     00 16 06 F6 | 	mov	arg03, #0
159d0     90 22 B1 FD | 	call	#__system___basic_print_string
159d4     00 12 06 F6 | 	mov	arg01, #0
159d8     BC 72 B1 FD | 	call	#__system___getiolock_0613
159dc     FD 00 68 FC | 	wrlong	#0, result1
159e0     0F 12 06 F6 | 	mov	arg01, #15
159e4     00 14 06 F6 | 	mov	arg02, #0
159e8     68 DB B0 FD | 	call	#_printerror
159ec     28 00 90 FD | 	jmp	#LR__1763
159f0                 | LR__1762
159f0     A7 12 02 FB | 	rdlong	arg01, fp
159f4     10 4E 05 F1 | 	add	fp, #16
159f8     A7 14 02 FB | 	rdlong	arg02, fp
159fc     04 4E 05 F1 | 	add	fp, #4
15a00     A7 16 02 FB | 	rdlong	arg03, fp
15a04     14 4E 85 F1 | 	sub	fp, #20
15a08     F8 36 B1 FD | 	call	#__system__Mid_S
15a0c     A7 FA 61 FC | 	wrlong	result1, fp
15a10     A7 12 02 F6 | 	mov	arg01, fp
15a14     44 7D BF FD | 	call	#_push
15a18                 | LR__1763
15a18     A7 F0 03 F6 | 	mov	ptra, fp
15a1c     B2 00 A0 FD | 	call	#popregs_
15a20                 | _do_mid_ret
15a20     2D 00 64 FD | 	ret
15a24                 | 
15a24                 | ' 
15a24                 | ' '-------------------- mkdir
15a24                 | ' 
15a24                 | ' sub do_mkdir
15a24                 | _do_mkdir
15a24     04 4A 05 F6 | 	mov	COUNT_, #4
15a28     A8 00 A0 FD | 	call	#pushregs_
15a2c     94 7C BF FD | 	call	#_pop
15a30     FE 18 02 F6 | 	mov	arg04, result2
15a34     FF 16 02 F6 | 	mov	arg03, result3
15a38     FD 26 02 F6 | 	mov	local01, result1
15a3c     0C 29 02 F6 | 	mov	local02, arg04
15a40     0B 2B 02 F6 | 	mov	local03, arg03
15a44                 | ' 
15a44                 | ' t1=pop()
15a44                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15a44     2B 2A 0E F2 | 	cmp	local03, #43 wz
15a48     10 00 90 5D |  if_ne	jmp	#LR__1770
15a4c     13 13 02 F6 | 	mov	arg01, local01
15a50     E8 7D BF FD | 	call	#_convertstring
15a54     FD 26 02 F6 | 	mov	local01, result1
15a58     1F 2A 06 F6 | 	mov	local03, #31
15a5c                 | LR__1770
15a5c                 | ' if t1.result_type<>result_string then printerror(15): return
15a5c     1F 2A 0E F2 | 	cmp	local03, #31 wz
15a60     10 00 90 AD |  if_e	jmp	#LR__1771
15a64     0F 12 06 F6 | 	mov	arg01, #15
15a68     00 14 06 F6 | 	mov	arg02, #0
15a6c     E4 DA B0 FD | 	call	#_printerror
15a70     64 00 90 FD | 	jmp	#LR__1773
15a74                 | LR__1771
15a74     13 13 02 F6 | 	mov	arg01, local01
15a78     C4 3D B1 FD | 	call	#__system___mkdir
15a7c     FD 2C 0A F6 | 	mov	local04, result1 wz
15a80                 | ' filename$=t1.result.sresult
15a80                 | ' err=mkdir(filename$)
15a80                 | ' 'err=geterr() : 
15a80                 | ' if err<>0 then print "Cannot create a directory: system error "; err
15a80     54 00 90 AD |  if_e	jmp	#LR__1772
15a84     00 12 06 F6 | 	mov	arg01, #0
15a88     0C 72 B1 FD | 	call	#__system___getiolock_0613
15a8c     FD 12 02 F6 | 	mov	arg01, result1
15a90     DC 14 B1 FD | 	call	#__system___lockmem
15a94     BA 01 00 FF 
15a98     10 15 06 F6 | 	mov	arg02, ##@LR__5964
15a9c     00 12 06 F6 | 	mov	arg01, #0
15aa0     00 16 06 F6 | 	mov	arg03, #0
15aa4     BC 21 B1 FD | 	call	#__system___basic_print_string
15aa8     00 12 06 F6 | 	mov	arg01, #0
15aac     16 15 02 F6 | 	mov	arg02, local04
15ab0     00 16 06 F6 | 	mov	arg03, #0
15ab4     0A 18 06 F6 | 	mov	arg04, #10
15ab8     EC 21 B1 FD | 	call	#__system___basic_print_integer
15abc     00 12 06 F6 | 	mov	arg01, #0
15ac0     0A 14 06 F6 | 	mov	arg02, #10
15ac4     00 16 06 F6 | 	mov	arg03, #0
15ac8     40 21 B1 FD | 	call	#__system___basic_print_char
15acc     00 12 06 F6 | 	mov	arg01, #0
15ad0     C4 71 B1 FD | 	call	#__system___getiolock_0613
15ad4     FD 00 68 FC | 	wrlong	#0, result1
15ad8                 | LR__1772
15ad8                 | LR__1773
15ad8     A7 F0 03 F6 | 	mov	ptra, fp
15adc     B2 00 A0 FD | 	call	#popregs_
15ae0                 | _do_mkdir_ret
15ae0     2D 00 64 FD | 	ret
15ae4                 | 
15ae4                 | ' 
15ae4                 | ' '-------------------- mode
15ae4                 | ' 
15ae4                 | ' sub do_mode
15ae4                 | _do_mode
15ae4     05 4A 05 F6 | 	mov	COUNT_, #5
15ae8     A8 00 A0 FD | 	call	#pushregs_
15aec     D4 7B BF FD | 	call	#_pop
15af0     FD 26 02 F6 | 	mov	local01, result1
15af4     FE 28 02 F6 | 	mov	local02, result2
15af8     FF 2A 02 F6 | 	mov	local03, result3
15afc                 | ' t1=pop() 
15afc                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15afc     1E 2A 0E F2 | 	cmp	local03, #30 wz
15b00     10 00 90 5D |  if_ne	jmp	#LR__1780
15b04     13 13 02 F6 | 	mov	arg01, local01
15b08     00 14 06 F6 | 	mov	arg02, #0
15b0c     A0 47 B1 FD | 	call	#__system___float_tointeger
15b10     FD 26 02 F6 | 	mov	local01, result1
15b14                 | LR__1780
15b14                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15b14     1F 2A 0E F2 | 	cmp	local03, #31 wz
15b18     18 00 90 5D |  if_ne	jmp	#LR__1781
15b1c     13 13 02 F6 | 	mov	arg01, local01
15b20     D0 4A B1 FD | 	call	#__system____builtin_atof
15b24     FD 12 02 F6 | 	mov	arg01, result1
15b28     00 14 06 F6 | 	mov	arg02, #0
15b2c     80 47 B1 FD | 	call	#__system___float_tointeger
15b30     FD 26 02 F6 | 	mov	local01, result1
15b34                 | LR__1781
15b34                 | ' select case t1.result.iresult
15b34     13 2D 02 F6 | 	mov	local04, local01
15b38     06 2C 26 F3 | 	fle	local04, #6
15b3c     30 2C 62 FD | 	jmprel	local04
15b40                 | LR__1782
15b40     18 00 90 FD | 	jmp	#LR__1783
15b44     AC 00 90 FD | 	jmp	#LR__1784
15b48     14 01 90 FD | 	jmp	#LR__1785
15b4c     7C 01 90 FD | 	jmp	#LR__1786
15b50     E4 01 90 FD | 	jmp	#LR__1787
15b54     78 02 90 FD | 	jmp	#LR__1788
15b58     08 03 90 FD | 	jmp	#LR__1789
15b5c                 | LR__1783
15b5c     37 00 00 FF 
15b60     40 E4 05 F1 | 	add	objptr, ##28224
15b64     F2 02 68 FC | 	wrlong	#1, objptr
15b68     04 E4 85 F1 | 	sub	objptr, #4
15b6c     F2 34 69 FC | 	wrlong	#154, objptr
15b70     19 00 00 FF 
15b74     00 E5 05 F1 | 	add	objptr, ##13056
15b78     F2 02 68 FC | 	wrlong	#1, objptr
15b7c     19 00 00 FF 
15b80     04 E5 85 F1 | 	sub	objptr, ##13060
15b84     F2 26 69 FC | 	wrlong	#147, objptr
15b88     37 00 00 FF 
15b8c     38 E4 85 F1 | 	sub	objptr, ##28216
15b90     04 12 06 F6 | 	mov	arg01, #4
15b94     D4 F5 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15b98     37 00 00 FF 
15b9c     3C E4 05 F1 | 	add	objptr, ##28220
15ba0     F2 12 02 FB | 	rdlong	arg01, objptr
15ba4     04 E4 85 F1 | 	sub	objptr, #4
15ba8     F2 14 02 FB | 	rdlong	arg02, objptr
15bac                 | ' 
15bac                 | ' write_color:=ff
15bac     36 00 00 FF 
15bb0     F7 E5 85 F1 | 	sub	objptr, ##28151
15bb4     F2 12 62 FC | 	wrlong	arg01, objptr
15bb8                 | ' write_background:=bb
15bb8     04 E4 05 F1 | 	add	objptr, #4
15bbc     F2 14 62 FC | 	wrlong	arg02, objptr
15bc0     01 00 00 FF 
15bc4     00 EA 05 F1 | 	add	ptr__dat__, ##512
15bc8     52 00 00 FF 
15bcc     5F E4 05 F1 | 	add	objptr, ##42079
15bd0     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15bd4     04 E4 85 F1 | 	sub	objptr, #4
15bd8     03 00 80 FF 
15bdc     F2 30 69 FC | 	wrlong	##1688, objptr
15be0     52 00 00 FF 
15be4     A0 E4 85 F1 | 	sub	objptr, ##42144
15be8     01 00 00 FF 
15bec     00 EA 85 F1 | 	sub	ptr__dat__, ##512
15bf0     70 02 90 FD | 	jmp	#LR__1789
15bf4                 | LR__1784
15bf4     37 00 00 FF 
15bf8     40 E4 05 F1 | 	add	objptr, ##28224
15bfc     F2 00 68 FC | 	wrlong	#0, objptr
15c00     04 E4 85 F1 | 	sub	objptr, #4
15c04     F2 2E 68 FC | 	wrlong	#23, objptr
15c08     19 00 00 FF 
15c0c     00 E5 05 F1 | 	add	objptr, ##13056
15c10     F2 00 68 FC | 	wrlong	#0, objptr
15c14     19 00 00 FF 
15c18     04 E5 85 F1 | 	sub	objptr, ##13060
15c1c     F2 00 68 FC | 	wrlong	#0, objptr
15c20     37 00 00 FF 
15c24     38 E4 85 F1 | 	sub	objptr, ##28216
15c28     00 12 06 F6 | 	mov	arg01, #0
15c2c     3C F5 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15c30     37 00 00 FF 
15c34     3C E4 05 F1 | 	add	objptr, ##28220
15c38     F2 12 02 FB | 	rdlong	arg01, objptr
15c3c     04 E4 85 F1 | 	sub	objptr, #4
15c40     F2 14 02 FB | 	rdlong	arg02, objptr
15c44                 | ' 
15c44                 | ' write_color:=ff
15c44     36 00 00 FF 
15c48     F7 E5 85 F1 | 	sub	objptr, ##28151
15c4c     F2 12 62 FC | 	wrlong	arg01, objptr
15c50                 | ' write_background:=bb
15c50     04 E4 05 F1 | 	add	objptr, #4
15c54     F2 14 62 FC | 	wrlong	arg02, objptr
15c58     45 E4 85 F1 | 	sub	objptr, #69
15c5c     04 02 90 FD | 	jmp	#LR__1789
15c60                 | LR__1785
15c60     37 00 00 FF 
15c64     40 E4 05 F1 | 	add	objptr, ##28224
15c68     F2 00 68 FC | 	wrlong	#0, objptr
15c6c     04 E4 85 F1 | 	sub	objptr, #4
15c70     F2 6A 69 FC | 	wrlong	#181, objptr
15c74     19 00 00 FF 
15c78     00 E5 05 F1 | 	add	objptr, ##13056
15c7c     F2 00 68 FC | 	wrlong	#0, objptr
15c80     19 00 00 FF 
15c84     04 E5 85 F1 | 	sub	objptr, ##13060
15c88     F2 00 68 FC | 	wrlong	#0, objptr
15c8c     37 00 00 FF 
15c90     38 E4 85 F1 | 	sub	objptr, ##28216
15c94     00 12 06 F6 | 	mov	arg01, #0
15c98     D0 F4 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15c9c     37 00 00 FF 
15ca0     3C E4 05 F1 | 	add	objptr, ##28220
15ca4     F2 12 02 FB | 	rdlong	arg01, objptr
15ca8     04 E4 85 F1 | 	sub	objptr, #4
15cac     F2 14 02 FB | 	rdlong	arg02, objptr
15cb0                 | ' 
15cb0                 | ' write_color:=ff
15cb0     36 00 00 FF 
15cb4     F7 E5 85 F1 | 	sub	objptr, ##28151
15cb8     F2 12 62 FC | 	wrlong	arg01, objptr
15cbc                 | ' write_background:=bb
15cbc     04 E4 05 F1 | 	add	objptr, #4
15cc0     F2 14 62 FC | 	wrlong	arg02, objptr
15cc4     45 E4 85 F1 | 	sub	objptr, #69
15cc8     98 01 90 FD | 	jmp	#LR__1789
15ccc                 | LR__1786
15ccc     37 00 00 FF 
15cd0     40 E4 05 F1 | 	add	objptr, ##28224
15cd4     F2 00 68 FC | 	wrlong	#0, objptr
15cd8     04 E4 85 F1 | 	sub	objptr, #4
15cdc     F2 1E 68 FC | 	wrlong	#15, objptr
15ce0     19 00 00 FF 
15ce4     00 E5 05 F1 | 	add	objptr, ##13056
15ce8     F2 00 68 FC | 	wrlong	#0, objptr
15cec     19 00 00 FF 
15cf0     04 E5 85 F1 | 	sub	objptr, ##13060
15cf4     F2 00 68 FC | 	wrlong	#0, objptr
15cf8     37 00 00 FF 
15cfc     38 E4 85 F1 | 	sub	objptr, ##28216
15d00     00 12 06 F6 | 	mov	arg01, #0
15d04     64 F4 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15d08     37 00 00 FF 
15d0c     3C E4 05 F1 | 	add	objptr, ##28220
15d10     F2 12 02 FB | 	rdlong	arg01, objptr
15d14     04 E4 85 F1 | 	sub	objptr, #4
15d18     F2 14 02 FB | 	rdlong	arg02, objptr
15d1c                 | ' 
15d1c                 | ' write_color:=ff
15d1c     36 00 00 FF 
15d20     F7 E5 85 F1 | 	sub	objptr, ##28151
15d24     F2 12 62 FC | 	wrlong	arg01, objptr
15d28                 | ' write_background:=bb
15d28     04 E4 05 F1 | 	add	objptr, #4
15d2c     F2 14 62 FC | 	wrlong	arg02, objptr
15d30     45 E4 85 F1 | 	sub	objptr, #69
15d34     2C 01 90 FD | 	jmp	#LR__1789
15d38                 | LR__1787
15d38     37 00 00 FF 
15d3c     40 E4 05 F1 | 	add	objptr, ##28224
15d40     F2 02 68 FC | 	wrlong	#1, objptr
15d44     04 E4 85 F1 | 	sub	objptr, #4
15d48     F2 02 68 FC | 	wrlong	#1, objptr
15d4c     19 00 00 FF 
15d50     00 E5 05 F1 | 	add	objptr, ##13056
15d54     F2 02 68 FC | 	wrlong	#1, objptr
15d58     19 00 00 FF 
15d5c     04 E5 85 F1 | 	sub	objptr, ##13060
15d60     F2 1C 68 FC | 	wrlong	#14, objptr
15d64     37 00 00 FF 
15d68     38 E4 85 F1 | 	sub	objptr, ##28216
15d6c     04 12 06 F6 | 	mov	arg01, #4
15d70     F8 F3 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15d74     37 00 00 FF 
15d78     3C E4 05 F1 | 	add	objptr, ##28220
15d7c     F2 12 02 FB | 	rdlong	arg01, objptr
15d80     04 E4 85 F1 | 	sub	objptr, #4
15d84     F2 14 02 FB | 	rdlong	arg02, objptr
15d88                 | ' 
15d88                 | ' write_color:=ff
15d88     36 00 00 FF 
15d8c     F7 E5 85 F1 | 	sub	objptr, ##28151
15d90     F2 12 62 FC | 	wrlong	arg01, objptr
15d94                 | ' write_background:=bb
15d94     04 E4 05 F1 | 	add	objptr, #4
15d98     F2 14 62 FC | 	wrlong	arg02, objptr
15d9c     07 00 00 FF 
15da0     82 EB 05 F1 | 	add	ptr__dat__, ##3970
15da4     52 00 00 FF 
15da8     5F E4 05 F1 | 	add	objptr, ##42079
15dac     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15db0     04 E4 85 F1 | 	sub	objptr, #4
15db4     03 00 80 FF 
15db8     F2 30 69 FC | 	wrlong	##1688, objptr
15dbc     52 00 00 FF 
15dc0     A0 E4 85 F1 | 	sub	objptr, ##42144
15dc4     07 00 00 FF 
15dc8     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
15dcc     94 00 90 FD | 	jmp	#LR__1789
15dd0                 | LR__1788
15dd0     37 00 00 FF 
15dd4     40 E4 05 F1 | 	add	objptr, ##28224
15dd8     F2 04 68 FC | 	wrlong	#2, objptr
15ddc     04 E4 85 F1 | 	sub	objptr, #4
15de0     F2 02 68 FC | 	wrlong	#1, objptr
15de4     19 00 00 FF 
15de8     00 E5 05 F1 | 	add	objptr, ##13056
15dec     F2 02 68 FC | 	wrlong	#1, objptr
15df0     19 00 00 FF 
15df4     04 E5 85 F1 | 	sub	objptr, ##13060
15df8     F2 0E 68 FC | 	wrlong	#7, objptr
15dfc     37 00 00 FF 
15e00     38 E4 85 F1 | 	sub	objptr, ##28216
15e04     08 12 06 F6 | 	mov	arg01, #8
15e08     60 F3 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15e0c     37 00 00 FF 
15e10     3C E4 05 F1 | 	add	objptr, ##28220
15e14     F2 12 02 FB | 	rdlong	arg01, objptr
15e18     04 E4 85 F1 | 	sub	objptr, #4
15e1c     F2 14 02 FB | 	rdlong	arg02, objptr
15e20                 | ' 
15e20                 | ' write_color:=ff
15e20     36 00 00 FF 
15e24     F7 E5 85 F1 | 	sub	objptr, ##28151
15e28     F2 12 62 FC | 	wrlong	arg01, objptr
15e2c                 | ' write_background:=bb
15e2c     04 E4 05 F1 | 	add	objptr, #4
15e30     F2 14 62 FC | 	wrlong	arg02, objptr
15e34     07 00 00 FF 
15e38     82 EB 05 F1 | 	add	ptr__dat__, ##3970
15e3c     52 00 00 FF 
15e40     5F E4 05 F1 | 	add	objptr, ##42079
15e44     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15e48     04 E4 85 F1 | 	sub	objptr, #4
15e4c     03 00 80 FF 
15e50     F2 30 69 FC | 	wrlong	##1688, objptr
15e54     52 00 00 FF 
15e58     A0 E4 85 F1 | 	sub	objptr, ##42144
15e5c     07 00 00 FF 
15e60     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
15e64                 | LR__1789
15e64     52 00 00 FF 
15e68     9C E4 05 F1 | 	add	objptr, ##42140
15e6c     F2 26 62 FC | 	wrlong	local01, objptr
15e70     04 E4 85 F1 | 	sub	objptr, #4
15e74     F2 12 02 FB | 	rdlong	arg01, objptr
15e78     0F 00 00 FF 
15e7c     3C E4 85 F1 | 	sub	objptr, ##7740
15e80     F2 2E 02 FB | 	rdlong	local05, objptr
15e84     43 00 00 FF 
15e88     5C E4 85 F1 | 	sub	objptr, ##34396
15e8c     17 13 82 F1 | 	sub	arg01, local05
15e90     00 14 06 F6 | 	mov	arg02, #0
15e94     0A 16 06 F6 | 	mov	arg03, #10
15e98     A4 33 B1 FD | 	call	#__system__Number_S
15e9c     FD 12 02 F6 | 	mov	arg01, result1
15ea0     BA 01 00 FF 
15ea4     39 15 06 F6 | 	mov	arg02, ##@LR__5965
15ea8     20 11 B1 FD | 	call	#__system___string_concat
15eac     50 00 00 FF 
15eb0     38 E5 05 F1 | 	add	objptr, ##41272
15eb4     F2 FA 61 FC | 	wrlong	result1, objptr
15eb8     19 00 00 FF 
15ebc     FC E4 85 F1 | 	sub	objptr, ##13052
15ec0     F2 12 02 FB | 	rdlong	arg01, objptr
15ec4     04 E4 85 F1 | 	sub	objptr, #4
15ec8     F2 14 02 FB | 	rdlong	arg02, objptr
15ecc     37 00 00 FF 
15ed0     38 E4 85 F1 | 	sub	objptr, ##28216
15ed4     14 F4 B0 FD | 	call	#_hg010b_spin2_cls
15ed8     BA 01 00 FF 
15edc     4B 13 06 F6 | 	mov	arg01, ##@LR__5966
15ee0                 | ' 
15ee0                 | ' write(text)
15ee0     C8 F7 B0 FD | 	call	#_hg010b_spin2_write
15ee4                 | ' crlf
15ee4     C4 FC B0 FD | 	call	#_hg010b_spin2_crlf
15ee8     18 00 00 FF 
15eec     40 EB 05 F1 | 	add	ptr__dat__, ##12608
15ef0     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
15ef4     18 00 00 FF 
15ef8     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
15efc                 | ' 
15efc                 | ' write(text)
15efc     AC F7 B0 FD | 	call	#_hg010b_spin2_write
15f00                 | ' crlf
15f00     A8 FC B0 FD | 	call	#_hg010b_spin2_crlf
15f04     50 00 00 FF 
15f08     38 E5 05 F1 | 	add	objptr, ##41272
15f0c     F2 12 02 FB | 	rdlong	arg01, objptr
15f10     50 00 00 FF 
15f14     38 E5 85 F1 | 	sub	objptr, ##41272
15f18                 | ' 
15f18                 | ' write(text)
15f18     90 F7 B0 FD | 	call	#_hg010b_spin2_write
15f1c                 | ' crlf
15f1c     8C FC B0 FD | 	call	#_hg010b_spin2_crlf
15f20     A7 F0 03 F6 | 	mov	ptra, fp
15f24     B2 00 A0 FD | 	call	#popregs_
15f28                 | _do_mode_ret
15f28     2D 00 64 FD | 	ret
15f2c                 | 
15f2c                 | ' 
15f2c                 | ' '-------------------- mouse
15f2c                 | ' 
15f2c                 | ' sub do_mouse
15f2c                 | _do_mouse
15f2c     94 77 BF FD | 	call	#_pop
15f30     00 FA 4D F2 | 	cmps	result1, #0 wz
15f34                 | ' 
15f34                 | ' t1=pop()
15f34                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
15f34     14 00 90 5D |  if_ne	jmp	#LR__1790
15f38     10 12 06 F6 | 	mov	arg01, #16
15f3c     00 14 06 F6 | 	mov	arg02, #0
15f40     00 16 06 F6 | 	mov	arg03, #0
15f44     54 E6 B0 FD | 	call	#_hg010b_spin2_setspritesize
15f48     10 00 90 FD | 	jmp	#LR__1791
15f4c                 | LR__1790
15f4c     10 12 06 F6 | 	mov	arg01, #16
15f50     20 14 06 F6 | 	mov	arg02, #32
15f54     20 16 06 F6 | 	mov	arg03, #32
15f58     40 E6 B0 FD | 	call	#_hg010b_spin2_setspritesize
15f5c                 | LR__1791
15f5c                 | _do_mouse_ret
15f5c     2D 00 64 FD | 	ret
15f60                 | 
15f60                 | ' 
15f60                 | ' '-------------------- mousek
15f60                 | ' 
15f60                 | ' sub do_mousek
15f60                 | _do_mousek
15f60     00 4A 05 F6 | 	mov	COUNT_, #0
15f64     A8 00 A0 FD | 	call	#pushregs_
15f68     0C F0 07 F1 | 	add	ptra, #12
15f6c     08 4E 05 F1 | 	add	fp, #8
15f70     A7 3A 68 FC | 	wrlong	#29, fp
15f74     08 4E 85 F1 | 	sub	fp, #8
15f78     51 00 00 FF 
15f7c     50 E5 05 F1 | 	add	objptr, ##41808
15f80     F2 12 02 FB | 	rdlong	arg01, objptr
15f84     51 00 00 FF 
15f88     50 E5 85 F1 | 	sub	objptr, ##41808
15f8c     A7 12 62 FC | 	wrlong	arg01, fp
15f90     A7 12 02 F6 | 	mov	arg01, fp
15f94     C4 77 BF FD | 	call	#_push
15f98     A7 F0 03 F6 | 	mov	ptra, fp
15f9c     B2 00 A0 FD | 	call	#popregs_
15fa0                 | _do_mousek_ret
15fa0     2D 00 64 FD | 	ret
15fa4                 | 
15fa4                 | ' 
15fa4                 | ' '-------------------- mousew
15fa4                 | ' 
15fa4                 | ' sub do_mousew
15fa4                 | _do_mousew
15fa4     00 4A 05 F6 | 	mov	COUNT_, #0
15fa8     A8 00 A0 FD | 	call	#pushregs_
15fac     0C F0 07 F1 | 	add	ptra, #12
15fb0     08 4E 05 F1 | 	add	fp, #8
15fb4     A7 38 68 FC | 	wrlong	#28, fp
15fb8     08 4E 85 F1 | 	sub	fp, #8
15fbc     51 00 00 FF 
15fc0     54 E5 05 F1 | 	add	objptr, ##41812
15fc4     F2 12 02 FB | 	rdlong	arg01, objptr
15fc8     51 00 00 FF 
15fcc     54 E5 85 F1 | 	sub	objptr, ##41812
15fd0     A7 12 62 FC | 	wrlong	arg01, fp
15fd4     A7 12 02 F6 | 	mov	arg01, fp
15fd8     80 77 BF FD | 	call	#_push
15fdc     A7 F0 03 F6 | 	mov	ptra, fp
15fe0     B2 00 A0 FD | 	call	#popregs_
15fe4                 | _do_mousew_ret
15fe4     2D 00 64 FD | 	ret
15fe8                 | 
15fe8                 | ' 
15fe8                 | ' '-------------------- mousex
15fe8                 | ' 
15fe8                 | ' sub do_mousex
15fe8                 | _do_mousex
15fe8     00 4A 05 F6 | 	mov	COUNT_, #0
15fec     A8 00 A0 FD | 	call	#pushregs_
15ff0     0C F0 07 F1 | 	add	ptra, #12
15ff4     08 4E 05 F1 | 	add	fp, #8
15ff8     A7 3A 68 FC | 	wrlong	#29, fp
15ffc     08 4E 85 F1 | 	sub	fp, #8
16000     51 00 00 FF 
16004     48 E5 05 F1 | 	add	objptr, ##41800
16008     F2 12 02 FB | 	rdlong	arg01, objptr
1600c     51 00 00 FF 
16010     48 E5 85 F1 | 	sub	objptr, ##41800
16014     A7 12 62 FC | 	wrlong	arg01, fp
16018     A7 12 02 F6 | 	mov	arg01, fp
1601c     3C 77 BF FD | 	call	#_push
16020     A7 F0 03 F6 | 	mov	ptra, fp
16024     B2 00 A0 FD | 	call	#popregs_
16028                 | _do_mousex_ret
16028     2D 00 64 FD | 	ret
1602c                 | 
1602c                 | ' 
1602c                 | ' '-------------------- mousey
1602c                 | ' 
1602c                 | ' sub do_mousey
1602c                 | _do_mousey
1602c     00 4A 05 F6 | 	mov	COUNT_, #0
16030     A8 00 A0 FD | 	call	#pushregs_
16034     0C F0 07 F1 | 	add	ptra, #12
16038     08 4E 05 F1 | 	add	fp, #8
1603c     A7 3A 68 FC | 	wrlong	#29, fp
16040     08 4E 85 F1 | 	sub	fp, #8
16044     51 00 00 FF 
16048     4C E5 05 F1 | 	add	objptr, ##41804
1604c     F2 12 02 FB | 	rdlong	arg01, objptr
16050     51 00 00 FF 
16054     4C E5 85 F1 | 	sub	objptr, ##41804
16058     A7 12 62 FC | 	wrlong	arg01, fp
1605c     A7 12 02 F6 | 	mov	arg01, fp
16060     F8 76 BF FD | 	call	#_push
16064     A7 F0 03 F6 | 	mov	ptra, fp
16068     B2 00 A0 FD | 	call	#popregs_
1606c                 | _do_mousey_ret
1606c     2D 00 64 FD | 	ret
16070                 | 
16070                 | ' 
16070                 | ' '------------------ new
16070                 | ' 
16070                 | ' sub do_new
16070                 | _do_new
16070     03 4A 05 F6 | 	mov	COUNT_, #3
16074     A8 00 A0 FD | 	call	#pushregs_
16078                 | ' 
16078                 | ' if inrun=1 then inrun=2
16078     50 00 00 FF 
1607c     EC E4 05 F1 | 	add	objptr, ##41196
16080     F2 16 02 FB | 	rdlong	arg03, objptr
16084     50 00 00 FF 
16088     EC E4 85 F1 | 	sub	objptr, ##41196
1608c     01 16 0E F2 | 	cmp	arg03, #1 wz
16090     50 00 00 AF 
16094     EC E4 05 A1 |  if_e	add	objptr, ##41196
16098     F2 04 68 AC |  if_e	wrlong	#2, objptr
1609c     50 00 00 AF 
160a0     EC E4 85 A1 |  if_e	sub	objptr, ##41196
160a4     13 12 C6 F9 | 	decod	arg01, #19
160a8     01 14 66 F6 | 	neg	arg02, #1
160ac     44 D6 B0 FD | 	call	#_pslpoke
160b0     35 00 00 FF 
160b4     08 E4 05 F1 | 	add	objptr, ##27144
160b8     F2 00 68 FC | 	wrlong	#0, objptr
160bc                 | ' pslpoke(memlo,$FFFFFFFF)
160bc                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
160bc     00 26 06 F6 | 	mov	local01, #0
160c0     20 00 00 FF 
160c4     10 E4 85 F1 | 	sub	objptr, ##16400
160c8     97 1E 48 FB | 	callpa	#(@LR__1801-@LR__1800)>>2,fcache_load_ptr_
160cc                 | LR__1800
160cc     13 17 02 F6 | 	mov	arg03, local01
160d0     04 16 66 F0 | 	shl	arg03, #4
160d4     F2 16 02 F1 | 	add	arg03, objptr
160d8     BA 01 00 FF 
160dc     4C 15 06 F6 | 	mov	arg02, ##@LR__5967
160e0     0B 15 62 FC | 	wrlong	arg02, arg03
160e4     13 29 02 F6 | 	mov	local02, local01
160e8     04 28 66 F0 | 	shl	local02, #4
160ec     F2 28 02 F1 | 	add	local02, objptr
160f0     0C 28 06 F1 | 	add	local02, #12
160f4     14 01 68 FC | 	wrlong	#0, local02
160f8     01 26 06 F1 | 	add	local01, #1
160fc     02 00 00 FF 
16100     01 26 56 F2 | 	cmps	local01, ##1025 wc
16104     C4 FF 9F CD |  if_b	jmp	#LR__1800
16108                 | LR__1801
16108     35 00 00 FF 
1610c     90 E4 05 F1 | 	add	objptr, ##27280
16110     00 04 80 FF 
16114     F2 00 68 FC | 	wrlong	##524288, objptr
16118     06 00 00 FF 
1611c     30 E4 05 F1 | 	add	objptr, ##3120
16120     00 04 80 FF 
16124     F2 00 68 FC | 	wrlong	##524288, objptr
16128     04 E4 05 F1 | 	add	objptr, #4
1612c     00 04 80 FF 
16130     F2 00 68 FC | 	wrlong	##524288, objptr
16134     0D 00 00 FF 
16138     64 E4 85 F1 | 	sub	objptr, ##6756
1613c     F2 00 68 FC | 	wrlong	#0, objptr
16140     07 00 00 FF 
16144     24 E4 05 F1 | 	add	objptr, ##3620
16148     F2 00 68 FC | 	wrlong	#0, objptr
1614c     07 00 00 FF 
16150     20 E4 85 F1 | 	sub	objptr, ##3616
16154     00 04 80 FF 
16158     F2 00 68 FC | 	wrlong	##524288, objptr
1615c     0D 00 00 FF 
16160     D0 E4 05 F1 | 	add	objptr, ##6864
16164     F2 00 68 FC | 	wrlong	#0, objptr
16168     BA 01 00 FF 
1616c     4D 2B 06 F6 | 	mov	local03, ##@LR__5968
16170     01 00 00 FF 
16174     B0 E5 05 F1 | 	add	objptr, ##944
16178     F2 2A 62 FC | 	wrlong	local03, objptr
1617c     08 00 00 FF 
16180     50 E4 85 F1 | 	sub	objptr, ##4176
16184     F2 00 68 FC | 	wrlong	#0, objptr
16188     04 E4 05 F1 | 	add	objptr, #4
1618c     FF FF FF FF 
16190     F2 FE 6B FC | 	wrlong	##-1, objptr
16194     06 00 00 FF 
16198     A0 E4 05 F1 | 	add	objptr, ##3232
1619c     F2 00 68 FC | 	wrlong	#0, objptr
161a0     04 E4 05 F1 | 	add	objptr, #4
161a4     F2 00 68 FC | 	wrlong	#0, objptr
161a8                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
161a8                 | ' stackpointer=0
161a8                 | ' lineptr=0 
161a8                 | ' programptr=memlo ': stringptr=0
161a8                 | ' dataptr=0 : readline=""
161a8                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
161a8                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
161a8     00 26 06 F6 | 	mov	local01, #0
161ac     06 00 00 FF 
161b0     9C E4 85 F1 | 	sub	objptr, ##3228
161b4     97 16 48 FB | 	callpa	#(@LR__1803-@LR__1802)>>2,fcache_load_ptr_
161b8                 | LR__1802
161b8     13 29 02 F6 | 	mov	local02, local01
161bc     02 28 66 F0 | 	shl	local02, #2
161c0     13 29 02 F1 | 	add	local02, local01
161c4     02 28 66 F0 | 	shl	local02, #2
161c8     F2 28 02 F1 | 	add	local02, objptr
161cc     08 28 06 F1 | 	add	local02, #8
161d0     FF FF FF FF 
161d4     14 FF 6B FC | 	wrlong	##-1, local02
161d8     01 26 06 F1 | 	add	local01, #1
161dc     41 26 56 F2 | 	cmps	local01, #65 wc
161e0     D4 FF 9F CD |  if_b	jmp	#LR__1802
161e4                 | LR__1803
161e4     4A 00 00 FF 
161e8     98 E4 85 F1 | 	sub	objptr, ##38040
161ec                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
161ec     00 26 06 F6 | 	mov	local01, #0
161f0                 | LR__1804
161f0     13 29 02 F6 | 	mov	local02, local01
161f4     02 28 66 F0 | 	shl	local02, #2
161f8     52 00 00 FF 
161fc     54 E4 05 F1 | 	add	objptr, ##42068
16200     F2 28 02 F1 | 	add	local02, objptr
16204     14 2B 0A FB | 	rdlong	local03, local02 wz
16208     52 00 00 FF 
1620c     54 E4 85 F1 | 	sub	objptr, ##42068
16210     34 00 90 AD |  if_e	jmp	#LR__1805
16214     13 13 02 F6 | 	mov	arg01, local01
16218     00 14 06 F6 | 	mov	arg02, #0
1621c     00 16 06 F6 | 	mov	arg03, #0
16220     78 E3 B0 FD | 	call	#_hg010b_spin2_setspritesize
16224     13 29 02 F6 | 	mov	local02, local01
16228     02 28 66 F0 | 	shl	local02, #2
1622c     52 00 00 FF 
16230     54 E4 05 F1 | 	add	objptr, ##42068
16234     F2 28 02 F1 | 	add	local02, objptr
16238     14 13 02 FB | 	rdlong	arg01, local02
1623c     52 00 00 FF 
16240     54 E4 85 F1 | 	sub	objptr, ##42068
16244     04 50 B1 FD | 	call	#__system___gc_free
16248                 | LR__1805
16248     01 26 06 F1 | 	add	local01, #1
1624c     10 26 56 F2 | 	cmps	local01, #16 wc
16250     9C FF 9F CD |  if_b	jmp	#LR__1804
16254     52 00 00 FF 
16258     A8 E4 05 F1 | 	add	objptr, ##42152
1625c     00 C0 9F FF 
16260     F2 00 68 FC | 	wrlong	##1065353216, objptr
16264     04 E4 05 F1 | 	add	objptr, #4
16268     00 C0 9F FF 
1626c     F2 00 68 FC | 	wrlong	##1065353216, objptr
16270     52 00 00 FF 
16274     A8 E4 85 F1 | 	sub	objptr, ##42152
16278     F2 2A 02 FB | 	rdlong	local03, objptr
1627c     52 00 00 FF 
16280     94 E4 05 F1 | 	add	objptr, ##42132
16284     F2 2A 62 FC | 	wrlong	local03, objptr
16288     52 00 00 FF 
1628c     98 E4 85 F1 | 	sub	objptr, ##42136
16290     11 12 06 F6 | 	mov	arg01, #17
16294     08 14 06 F6 | 	mov	arg02, #8
16298     10 16 06 F6 | 	mov	arg03, #16
1629c     FC E2 B0 FD | 	call	#_hg010b_spin2_setspritesize
162a0     10 12 06 F6 | 	mov	arg01, #16
162a4     20 14 06 F6 | 	mov	arg02, #32
162a8     20 16 06 F6 | 	mov	arg03, #32
162ac     EC E2 B0 FD | 	call	#_hg010b_spin2_setspritesize
162b0     BA 01 00 FF 
162b4     4E 2B 06 F6 | 	mov	local03, ##@LR__5969
162b8     52 00 00 FF 
162bc     C4 E4 05 F1 | 	add	objptr, ##42180
162c0     F2 2A 62 FC | 	wrlong	local03, objptr
162c4     52 00 00 FF 
162c8     C4 E4 85 F1 | 	sub	objptr, ##42180
162cc     7C C6 B0 FD | 	call	#_init_audio
162d0     A7 F0 03 F6 | 	mov	ptra, fp
162d4     B2 00 A0 FD | 	call	#popregs_
162d8                 | _do_new_ret
162d8     2D 00 64 FD | 	ret
162dc                 | 
162dc                 | ' 
162dc                 | ' '-------------------- next
162dc                 | ' 
162dc                 | ' sub do_next()
162dc                 | _do_next
162dc     04 4A 05 F6 | 	mov	COUNT_, #4
162e0     A8 00 A0 FD | 	call	#pushregs_
162e4     DC 73 BF FD | 	call	#_pop
162e8     FD 26 02 F6 | 	mov	local01, result1
162ec     FE 28 02 F6 | 	mov	local02, result2
162f0     FF 2A 02 F6 | 	mov	local03, result3
162f4                 | ' t1=pop() :varnum=t1.result.uresult
162f4                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
162f4     50 00 00 FF 
162f8     30 E5 05 F1 | 	add	objptr, ##41264
162fc     F2 14 02 FB | 	rdlong	arg02, objptr
16300     0A 13 02 F6 | 	mov	arg01, arg02
16304     02 12 66 F0 | 	shl	arg01, #2
16308     0A 13 02 F1 | 	add	arg01, arg02
1630c     02 12 66 F0 | 	shl	arg01, #2
16310     06 00 00 FF 
16314     98 E4 85 F1 | 	sub	objptr, ##3224
16318     F2 12 02 F1 | 	add	arg01, objptr
1631c     08 12 06 F1 | 	add	arg01, #8
16320     09 15 02 FB | 	rdlong	arg02, arg01
16324     13 15 0A F2 | 	cmp	arg02, local01 wz
16328     4A 00 00 FF 
1632c     98 E4 85 F1 | 	sub	objptr, ##38040
16330     10 00 90 AD |  if_e	jmp	#LR__1810
16334     25 12 06 F6 | 	mov	arg01, #37
16338     00 14 06 F6 | 	mov	arg02, #0
1633c     14 D2 B0 FD | 	call	#_printerror
16340     54 03 90 FD | 	jmp	#LR__1817
16344                 | LR__1810
16344                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
16344     13 15 02 F6 | 	mov	arg02, local01
16348     04 14 66 F0 | 	shl	arg02, #4
1634c     14 00 00 FF 
16350     F8 E5 05 F1 | 	add	objptr, ##10744
16354     F2 14 02 F1 | 	add	arg02, objptr
16358     0C 14 06 F1 | 	add	arg02, #12
1635c     0A 15 02 FB | 	rdlong	arg02, arg02
16360     1E 14 0E F2 | 	cmp	arg02, #30 wz
16364     14 00 00 FF 
16368     F8 E5 85 F1 | 	sub	objptr, ##10744
1636c     54 00 90 5D |  if_ne	jmp	#LR__1811
16370     13 15 02 F6 | 	mov	arg02, local01
16374     04 14 66 F0 | 	shl	arg02, #4
16378     14 00 00 FF 
1637c     F8 E5 05 F1 | 	add	objptr, ##10744
16380     F2 14 02 F1 | 	add	arg02, objptr
16384     0C 14 06 F1 | 	add	arg02, #12
16388     0A 39 68 FC | 	wrlong	#28, arg02
1638c     13 2D 02 F6 | 	mov	local04, local01
16390     04 2C 66 F0 | 	shl	local04, #4
16394     F2 2C 02 F1 | 	add	local04, objptr
16398     13 15 02 F6 | 	mov	arg02, local01
1639c     04 14 66 F0 | 	shl	arg02, #4
163a0     F2 14 02 F1 | 	add	arg02, objptr
163a4     04 14 06 F1 | 	add	arg02, #4
163a8     0A 13 02 FB | 	rdlong	arg01, arg02
163ac     14 00 00 FF 
163b0     F8 E5 85 F1 | 	sub	objptr, ##10744
163b4     01 14 06 F6 | 	mov	arg02, #1
163b8     F4 3E B1 FD | 	call	#__system___float_tointeger
163bc     04 2C 06 F1 | 	add	local04, #4
163c0     16 FB 61 FC | 	wrlong	result1, local04
163c4                 | LR__1811
163c4     50 00 00 FF 
163c8     30 E5 05 F1 | 	add	objptr, ##41264
163cc     F2 2C 02 FB | 	rdlong	local04, objptr
163d0     16 15 02 F6 | 	mov	arg02, local04
163d4     02 14 66 F0 | 	shl	arg02, #2
163d8     16 15 02 F1 | 	add	arg02, local04
163dc     02 14 66 F0 | 	shl	arg02, #2
163e0     06 00 00 FF 
163e4     98 E4 85 F1 | 	sub	objptr, ##3224
163e8     F2 14 02 F1 | 	add	arg02, objptr
163ec     0C 14 06 F1 | 	add	arg02, #12
163f0     0A FF 01 FB | 	rdlong	result3, arg02
163f4     13 2D 02 F6 | 	mov	local04, local01
163f8     04 2C 66 F0 | 	shl	local04, #4
163fc     35 00 00 FF 
16400     A0 E4 85 F1 | 	sub	objptr, ##27296
16404     F2 2C 02 F1 | 	add	local04, objptr
16408     13 15 02 F6 | 	mov	arg02, local01
1640c     04 14 66 F0 | 	shl	arg02, #4
16410     F2 14 02 F1 | 	add	arg02, objptr
16414     04 14 06 F1 | 	add	arg02, #4
16418     0A 13 02 FB | 	rdlong	arg01, arg02
1641c     FF 12 02 F1 | 	add	arg01, result3
16420     04 2C 06 F1 | 	add	local04, #4
16424     16 13 62 FC | 	wrlong	arg01, local04
16428                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
16428                 | ' if fortable(fortop).stepval>=0 then
16428     3B 00 00 FF 
1642c     38 E5 05 F1 | 	add	objptr, ##30520
16430     F2 2C 02 FB | 	rdlong	local04, objptr
16434     16 13 02 F6 | 	mov	arg01, local04
16438     02 12 66 F0 | 	shl	arg01, #2
1643c     16 13 02 F1 | 	add	arg01, local04
16440     02 12 66 F0 | 	shl	arg01, #2
16444     06 00 00 FF 
16448     98 E4 85 F1 | 	sub	objptr, ##3224
1644c     F2 12 02 F1 | 	add	arg01, objptr
16450     0C 12 06 F1 | 	add	arg01, #12
16454     09 13 02 FB | 	rdlong	arg01, arg01
16458     00 12 56 F2 | 	cmps	arg01, #0 wc
1645c     4A 00 00 FF 
16460     98 E4 85 F1 | 	sub	objptr, ##38040
16464     78 00 90 CD |  if_b	jmp	#LR__1812
16468                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
16468     04 26 66 F0 | 	shl	local01, #4
1646c     14 00 00 FF 
16470     F8 E5 05 F1 | 	add	objptr, ##10744
16474     F2 26 02 F1 | 	add	local01, objptr
16478     3B 00 00 FF 
1647c     38 E5 05 F1 | 	add	objptr, ##30520
16480     F2 12 02 FB | 	rdlong	arg01, objptr
16484     09 2D 02 F6 | 	mov	local04, arg01
16488     02 2C 66 F0 | 	shl	local04, #2
1648c     09 2D 02 F1 | 	add	local04, arg01
16490     02 2C 66 F0 | 	shl	local04, #2
16494     06 00 00 FF 
16498     98 E4 85 F1 | 	sub	objptr, ##3224
1649c     F2 2C 02 F1 | 	add	local04, objptr
164a0     04 26 06 F1 | 	add	local01, #4
164a4     13 27 02 FB | 	rdlong	local01, local01
164a8     10 2C 06 F1 | 	add	local04, #16
164ac     16 2D 02 FB | 	rdlong	local04, local04
164b0     16 27 5A F2 | 	cmps	local01, local04 wcz
164b4     4A 00 00 FF 
164b8     98 E4 85 F1 | 	sub	objptr, ##38040
164bc     9C 00 90 ED |  if_be	jmp	#LR__1814
164c0     50 00 00 FF 
164c4     30 E5 05 F1 | 	add	objptr, ##41264
164c8     F2 2C 02 FB | 	rdlong	local04, objptr
164cc     01 2C 86 F1 | 	sub	local04, #1
164d0     F2 2C 62 FC | 	wrlong	local04, objptr
164d4     50 00 00 FF 
164d8     30 E5 85 F1 | 	sub	objptr, ##41264
164dc     B8 01 90 FD | 	jmp	#LR__1817
164e0                 | LR__1812
164e0                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
164e0     13 2D 02 F6 | 	mov	local04, local01
164e4     04 2C 66 F0 | 	shl	local04, #4
164e8     14 00 00 FF 
164ec     F8 E5 05 F1 | 	add	objptr, ##10744
164f0     F2 2C 02 F1 | 	add	local04, objptr
164f4     3B 00 00 FF 
164f8     38 E5 05 F1 | 	add	objptr, ##30520
164fc     F2 26 02 FB | 	rdlong	local01, objptr
16500     13 13 02 F6 | 	mov	arg01, local01
16504     02 12 66 F0 | 	shl	arg01, #2
16508     13 13 02 F1 | 	add	arg01, local01
1650c     02 12 66 F0 | 	shl	arg01, #2
16510     06 00 00 FF 
16514     98 E4 85 F1 | 	sub	objptr, ##3224
16518     F2 12 02 F1 | 	add	arg01, objptr
1651c     04 2C 06 F1 | 	add	local04, #4
16520     16 2D 02 FB | 	rdlong	local04, local04
16524     10 12 06 F1 | 	add	arg01, #16
16528     09 13 02 FB | 	rdlong	arg01, arg01
1652c     09 2D 52 F2 | 	cmps	local04, arg01 wc
16530     4A 00 00 FF 
16534     98 E4 85 F1 | 	sub	objptr, ##38040
16538     20 00 90 3D |  if_ae	jmp	#LR__1813
1653c     50 00 00 FF 
16540     30 E5 05 F1 | 	add	objptr, ##41264
16544     F2 2C 02 FB | 	rdlong	local04, objptr
16548     01 2C 86 F1 | 	sub	local04, #1
1654c     F2 2C 62 FC | 	wrlong	local04, objptr
16550     50 00 00 FF 
16554     30 E5 85 F1 | 	sub	objptr, ##41264
16558     3C 01 90 FD | 	jmp	#LR__1817
1655c                 | LR__1813
1655c                 | LR__1814
1655c                 | ' ' if not returned, goto pointer 
1655c                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
1655c     50 00 00 FF 
16560     EC E4 05 F1 | 	add	objptr, ##41196
16564     F2 2C 02 FB | 	rdlong	local04, objptr
16568     50 00 00 FF 
1656c     EC E4 85 F1 | 	sub	objptr, ##41196
16570     01 2C 16 F2 | 	cmp	local04, #1 wc
16574     DC 00 90 CD |  if_b	jmp	#LR__1815
16578     50 00 00 FF 
1657c     30 E5 05 F1 | 	add	objptr, ##41264
16580     F2 2C 02 FB | 	rdlong	local04, objptr
16584     16 27 02 F6 | 	mov	local01, local04
16588     02 26 66 F0 | 	shl	local01, #2
1658c     16 27 02 F1 | 	add	local01, local04
16590     02 26 66 F0 | 	shl	local01, #2
16594     06 00 00 FF 
16598     98 E4 85 F1 | 	sub	objptr, ##3224
1659c     F2 26 02 F1 | 	add	local01, objptr
165a0     06 00 00 FF 
165a4     20 E4 05 F1 | 	add	objptr, ##3104
165a8     F2 2C 02 FB | 	rdlong	local04, objptr
165ac     50 00 00 FF 
165b0     B8 E4 85 F1 | 	sub	objptr, ##41144
165b4     13 27 02 FB | 	rdlong	local01, local01
165b8     13 2D 0A F2 | 	cmp	local04, local01 wz
165bc     94 00 90 AD |  if_e	jmp	#LR__1815
165c0     50 00 00 FF 
165c4     30 E5 05 F1 | 	add	objptr, ##41264
165c8     F2 2C 02 FB | 	rdlong	local04, objptr
165cc     16 27 02 F6 | 	mov	local01, local04
165d0     02 26 66 F0 | 	shl	local01, #2
165d4     16 27 02 F1 | 	add	local01, local04
165d8     02 26 66 F0 | 	shl	local01, #2
165dc     06 00 00 FF 
165e0     98 E4 85 F1 | 	sub	objptr, ##3224
165e4     F2 26 02 F1 | 	add	local01, objptr
165e8     13 27 02 FB | 	rdlong	local01, local01
165ec     06 00 00 FF 
165f0     20 E4 05 F1 | 	add	objptr, ##3104
165f4     F2 26 62 FC | 	wrlong	local01, objptr
165f8     78 E4 05 F1 | 	add	objptr, #120
165fc     F2 2C 02 FB | 	rdlong	local04, objptr
16600     16 27 02 F6 | 	mov	local01, local04
16604     02 26 66 F0 | 	shl	local01, #2
16608     16 27 02 F1 | 	add	local01, local04
1660c     02 26 66 F0 | 	shl	local01, #2
16610     06 00 00 FF 
16614     98 E4 85 F1 | 	sub	objptr, ##3224
16618     F2 26 02 F1 | 	add	local01, objptr
1661c     04 26 06 F1 | 	add	local01, #4
16620     13 27 02 FB | 	rdlong	local01, local01
16624     06 00 00 FF 
16628     24 E4 05 F1 | 	add	objptr, ##3108
1662c     F2 26 62 FC | 	wrlong	local01, objptr
16630     06 00 00 FF 
16634     40 E4 85 F1 | 	sub	objptr, ##3136
16638     F2 2C 02 FB | 	rdlong	local04, objptr
1663c     01 2C 86 F1 | 	sub	local04, #1
16640     04 E4 05 F1 | 	add	objptr, #4
16644     F2 2C 62 FC | 	wrlong	local04, objptr
16648     4A 00 00 FF 
1664c     80 E4 85 F1 | 	sub	objptr, ##38016
16650     44 00 90 FD | 	jmp	#LR__1816
16654                 | LR__1815
16654     50 00 00 FF 
16658     30 E5 05 F1 | 	add	objptr, ##41264
1665c     F2 2C 02 FB | 	rdlong	local04, objptr
16660     16 27 02 F6 | 	mov	local01, local04
16664     02 26 66 F0 | 	shl	local01, #2
16668     16 27 02 F1 | 	add	local01, local04
1666c     02 26 66 F0 | 	shl	local01, #2
16670     06 00 00 FF 
16674     98 E4 85 F1 | 	sub	objptr, ##3224
16678     F2 26 02 F1 | 	add	local01, objptr
1667c     04 26 06 F1 | 	add	local01, #4
16680     13 27 02 FB | 	rdlong	local01, local01
16684     01 26 86 F1 | 	sub	local01, #1
16688     18 E4 85 F1 | 	sub	objptr, #24
1668c     F2 26 62 FC | 	wrlong	local01, objptr
16690     4A 00 00 FF 
16694     80 E4 85 F1 | 	sub	objptr, ##38016
16698                 | LR__1816
16698                 | LR__1817
16698     A7 F0 03 F6 | 	mov	ptra, fp
1669c     B2 00 A0 FD | 	call	#popregs_
166a0                 | _do_next_ret
166a0     2D 00 64 FD | 	ret
166a4                 | 
166a4                 | ' 
166a4                 | ' '-------------------- no command (print "Unknown command")
166a4                 | ' 
166a4                 | ' sub do_no_command
166a4                 | _do_no_command
166a4     50 00 00 FF 
166a8     F0 E4 05 F1 | 	add	objptr, ##41200
166ac     F2 14 02 FB | 	rdlong	arg02, objptr
166b0     50 00 00 FF 
166b4     F0 E4 85 F1 | 	sub	objptr, ##41200
166b8     17 12 06 F6 | 	mov	arg01, #23
166bc     94 CE B0 FD | 	call	#_printerror
166c0                 | _do_no_command_ret
166c0     2D 00 64 FD | 	ret
166c4                 | 
166c4                 | ' 
166c4                 | ' '-------------------- nothing
166c4                 | ' 
166c4                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
166c4                 | _do_nothing
166c4                 | _do_nothing_ret
166c4     2D 00 64 FD | 	ret
166c8                 | 
166c8                 | ' 
166c8                 | ' '-------------------- on
166c8                 | ' 
166c8                 | ' sub do_on
166c8                 | _do_on
166c8     01 4A 05 F6 | 	mov	COUNT_, #1
166cc     A8 00 A0 FD | 	call	#pushregs_
166d0     18 F0 07 F1 | 	add	ptra, #24
166d4     4A 00 00 FF 
166d8     80 E4 05 F1 | 	add	objptr, ##38016
166dc     F2 12 02 FB | 	rdlong	arg01, objptr
166e0     09 FD 01 F6 | 	mov	result2, arg01
166e4     01 FC 65 F0 | 	shl	result2, #1
166e8     09 FD 01 F1 | 	add	result2, arg01
166ec     02 FC 65 F0 | 	shl	result2, #2
166f0     03 00 00 FF 
166f4     04 E4 85 F1 | 	sub	objptr, ##1540
166f8     F2 FC 01 F1 | 	add	result2, objptr
166fc     FE 12 02 FB | 	rdlong	arg01, result2
16700     14 4E 05 F1 | 	add	fp, #20
16704     A7 12 62 FC | 	wrlong	arg01, fp
16708     03 00 00 FF 
1670c     04 E4 05 F1 | 	add	objptr, ##1540
16710     F2 12 02 FB | 	rdlong	arg01, objptr
16714     09 27 02 F6 | 	mov	local01, arg01
16718     01 26 66 F0 | 	shl	local01, #1
1671c     09 27 02 F1 | 	add	local01, arg01
16720     02 26 66 F0 | 	shl	local01, #2
16724     03 00 00 FF 
16728     04 E4 85 F1 | 	sub	objptr, ##1540
1672c     F2 26 02 F1 | 	add	local01, objptr
16730     04 26 06 F1 | 	add	local01, #4
16734     13 27 02 FB | 	rdlong	local01, local01
16738     08 4E 85 F1 | 	sub	fp, #8
1673c     A7 26 62 FC | 	wrlong	local01, fp
16740     0C 4E 85 F1 | 	sub	fp, #12
16744     47 00 00 FF 
16748     7C E4 85 F1 | 	sub	objptr, ##36476
1674c     74 6F BF FD | 	call	#_pop
16750     FF 26 02 F6 | 	mov	local01, result3
16754     A7 FA 61 FC | 	wrlong	result1, fp
16758     04 4E 05 F1 | 	add	fp, #4
1675c     A7 FC 61 FC | 	wrlong	result2, fp
16760     04 4E 05 F1 | 	add	fp, #4
16764     A7 26 62 FC | 	wrlong	local01, fp
16768     08 4E 85 F1 | 	sub	fp, #8
1676c     A7 12 02 F6 | 	mov	arg01, fp
16770     34 71 BF FD | 	call	#_converttoint
16774     10 4E 05 F1 | 	add	fp, #16
16778     A7 FA 61 FC | 	wrlong	result1, fp
1677c                 | ' 
1677c                 | ' numpar=compiledline(lineptr_e).result.uresult
1677c                 | ' skip=compiledline(lineptr_e).result.twowords(1)
1677c                 | ' t1=pop()
1677c                 | ' t=converttoint(t1)
1677c                 | ' if t<1 orelse t>numpar then return
1677c     10 4E 85 F1 | 	sub	fp, #16
16780     01 FA 55 F2 | 	cmps	result1, #1 wc
16784     58 00 90 CD |  if_b	jmp	#LR__1820
16788     10 4E 05 F1 | 	add	fp, #16
1678c     A7 26 02 FB | 	rdlong	local01, fp
16790     04 4E 05 F1 | 	add	fp, #4
16794     A7 12 02 FB | 	rdlong	arg01, fp
16798     14 4E 85 F1 | 	sub	fp, #20
1679c     09 27 5A F2 | 	cmps	local01, arg01 wcz
167a0     3C 00 90 1D |  if_a	jmp	#LR__1820
167a4     10 4E 05 F1 | 	add	fp, #16
167a8     A7 26 02 FB | 	rdlong	local01, fp
167ac     01 26 86 F1 | 	sub	local01, #1
167b0     04 4E 85 F1 | 	sub	fp, #4
167b4     A7 12 02 FB | 	rdlong	arg01, fp
167b8     13 13 02 FD | 	qmul	arg01, local01
167bc     4A 00 00 FF 
167c0     80 E4 05 F1 | 	add	objptr, ##38016
167c4     F2 26 02 FB | 	rdlong	local01, objptr
167c8     0C 4E 85 F1 | 	sub	fp, #12
167cc     18 12 62 FD | 	getqx	arg01
167d0     09 27 02 F1 | 	add	local01, arg01
167d4     F2 26 62 FC | 	wrlong	local01, objptr
167d8     4A 00 00 FF 
167dc     80 E4 85 F1 | 	sub	objptr, ##38016
167e0                 | LR__1820
167e0     A7 F0 03 F6 | 	mov	ptra, fp
167e4     B2 00 A0 FD | 	call	#popregs_
167e8                 | _do_on_ret
167e8     2D 00 64 FD | 	ret
167ec                 | 
167ec                 | ' 
167ec                 | ' '-------------------- open
167ec                 | ' 
167ec                 | ' sub do_open
167ec                 | _do_open
167ec     02 4A 05 F6 | 	mov	COUNT_, #2
167f0     A8 00 A0 FD | 	call	#pushregs_
167f4     20 F0 07 F1 | 	add	ptra, #32
167f8     4A 00 00 FF 
167fc     80 E4 05 F1 | 	add	objptr, ##38016
16800     F2 16 02 FB | 	rdlong	arg03, objptr
16804     0B 15 02 F6 | 	mov	arg02, arg03
16808     01 14 66 F0 | 	shl	arg02, #1
1680c     0B 15 02 F1 | 	add	arg02, arg03
16810     02 14 66 F0 | 	shl	arg02, #2
16814     03 00 00 FF 
16818     04 E4 85 F1 | 	sub	objptr, ##1540
1681c     F2 14 02 F1 | 	add	arg02, objptr
16820     0A 17 02 FB | 	rdlong	arg03, arg02
16824     10 4E 05 F1 | 	add	fp, #16
16828     A7 16 62 FC | 	wrlong	arg03, fp
1682c     10 4E 85 F1 | 	sub	fp, #16
16830     47 00 00 FF 
16834     7C E4 85 F1 | 	sub	objptr, ##36476
16838     88 6E BF FD | 	call	#_pop
1683c     FF 16 02 F6 | 	mov	arg03, result3
16840     A7 FA 61 FC | 	wrlong	result1, fp
16844     04 4E 05 F1 | 	add	fp, #4
16848     A7 FC 61 FC | 	wrlong	result2, fp
1684c     04 4E 05 F1 | 	add	fp, #4
16850     A7 16 62 FC | 	wrlong	arg03, fp
16854                 | ' 
16854                 | ' numpar=compiledline(lineptr_e).result.uresult
16854                 | ' 
16854                 | ' t1=pop()
16854                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16854     08 4E 85 F1 | 	sub	fp, #8
16858     2B 16 0E F2 | 	cmp	arg03, #43 wz
1685c     18 00 90 5D |  if_ne	jmp	#LR__1830
16860     A7 12 02 FB | 	rdlong	arg01, fp
16864     D4 6F BF FD | 	call	#_convertstring
16868     A7 FA 61 FC | 	wrlong	result1, fp
1686c     08 4E 05 F1 | 	add	fp, #8
16870     A7 3E 68 FC | 	wrlong	#31, fp
16874     08 4E 85 F1 | 	sub	fp, #8
16878                 | LR__1830
16878                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
16878     08 4E 05 F1 | 	add	fp, #8
1687c     A7 16 02 FB | 	rdlong	arg03, fp
16880     08 4E 85 F1 | 	sub	fp, #8
16884     1F 16 0E F2 | 	cmp	arg03, #31 wz
16888     44 00 90 AD |  if_e	jmp	#LR__1831
1688c     00 12 06 F6 | 	mov	arg01, #0
16890     04 64 B1 FD | 	call	#__system___getiolock_0613
16894     FD 12 02 F6 | 	mov	arg01, result1
16898     D4 06 B1 FD | 	call	#__system___lockmem
1689c     BA 01 00 FF 
168a0     59 15 06 F6 | 	mov	arg02, ##@LR__5970
168a4     00 12 06 F6 | 	mov	arg01, #0
168a8     00 16 06 F6 | 	mov	arg03, #0
168ac     B4 13 B1 FD | 	call	#__system___basic_print_string
168b0     00 12 06 F6 | 	mov	arg01, #0
168b4     0A 14 06 F6 | 	mov	arg02, #10
168b8     00 16 06 F6 | 	mov	arg03, #0
168bc     4C 13 B1 FD | 	call	#__system___basic_print_char
168c0     00 12 06 F6 | 	mov	arg01, #0
168c4     D0 63 B1 FD | 	call	#__system___getiolock_0613
168c8     FD 00 68 FC | 	wrlong	#0, result1
168cc     28 02 90 FD | 	jmp	#LR__1842
168d0                 | LR__1831
168d0     A7 16 02 FB | 	rdlong	arg03, fp
168d4     0C 4E 05 F1 | 	add	fp, #12
168d8     A7 16 62 FC | 	wrlong	arg03, fp
168dc     0C 4E 85 F1 | 	sub	fp, #12
168e0     E0 6D BF FD | 	call	#_pop
168e4     FF 16 02 F6 | 	mov	arg03, result3
168e8     A7 FA 61 FC | 	wrlong	result1, fp
168ec     04 4E 05 F1 | 	add	fp, #4
168f0     A7 FC 61 FC | 	wrlong	result2, fp
168f4     04 4E 05 F1 | 	add	fp, #4
168f8     A7 16 62 FC | 	wrlong	arg03, fp
168fc                 | ' filename=t1.result.sresult
168fc                 | ' t1=pop()
168fc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
168fc     08 4E 85 F1 | 	sub	fp, #8
16900     2B 16 0E F2 | 	cmp	arg03, #43 wz
16904     18 00 90 5D |  if_ne	jmp	#LR__1832
16908     A7 12 02 FB | 	rdlong	arg01, fp
1690c     2C 6F BF FD | 	call	#_convertstring
16910     A7 FA 61 FC | 	wrlong	result1, fp
16914     08 4E 05 F1 | 	add	fp, #8
16918     A7 3E 68 FC | 	wrlong	#31, fp
1691c     08 4E 85 F1 | 	sub	fp, #8
16920                 | LR__1832
16920     14 4E 05 F1 | 	add	fp, #20
16924     A7 00 68 FC | 	wrlong	#0, fp
16928                 | ' mode=0
16928                 | ' if t1.result_type=result_string then
16928     0C 4E 85 F1 | 	sub	fp, #12
1692c     A7 14 02 FB | 	rdlong	arg02, fp
16930     08 4E 85 F1 | 	sub	fp, #8
16934     1F 14 0E F2 | 	cmp	arg02, #31 wz
16938     64 00 90 5D |  if_ne	jmp	#LR__1833
1693c                 | '   if t1.result.sresult="read" then mode=1
1693c     A7 12 02 FB | 	rdlong	arg01, fp
16940     BA 01 00 FF 
16944     6B 15 06 F6 | 	mov	arg02, ##@LR__5971
16948     4C 06 B1 FD | 	call	#__system___string_cmp
1694c     00 FA 0D F2 | 	cmp	result1, #0 wz
16950     14 4E 05 A1 |  if_e	add	fp, #20
16954     A7 02 68 AC |  if_e	wrlong	#1, fp
16958     14 4E 85 A1 |  if_e	sub	fp, #20
1695c                 | '   if t1.result.sresult="write" then mode=2
1695c     A7 12 02 FB | 	rdlong	arg01, fp
16960     BA 01 00 FF 
16964     70 15 06 F6 | 	mov	arg02, ##@LR__5972
16968     2C 06 B1 FD | 	call	#__system___string_cmp
1696c     00 FA 0D F2 | 	cmp	result1, #0 wz
16970     14 4E 05 A1 |  if_e	add	fp, #20
16974     A7 04 68 AC |  if_e	wrlong	#2, fp
16978     14 4E 85 A1 |  if_e	sub	fp, #20
1697c                 | '   if t1.result.sresult="append" then mode=4
1697c     A7 12 02 FB | 	rdlong	arg01, fp
16980     BA 01 00 FF 
16984     76 15 06 F6 | 	mov	arg02, ##@LR__5973
16988     0C 06 B1 FD | 	call	#__system___string_cmp
1698c     00 FA 0D F2 | 	cmp	result1, #0 wz
16990     14 4E 05 A1 |  if_e	add	fp, #20
16994     A7 08 68 AC |  if_e	wrlong	#4, fp
16998     14 4E 85 A1 |  if_e	sub	fp, #20
1699c     14 00 90 FD | 	jmp	#LR__1834
169a0                 | LR__1833
169a0     A7 12 02 F6 | 	mov	arg01, fp
169a4     00 6F BF FD | 	call	#_converttoint
169a8     14 4E 05 F1 | 	add	fp, #20
169ac     A7 FA 61 FC | 	wrlong	result1, fp
169b0     14 4E 85 F1 | 	sub	fp, #20
169b4                 | LR__1834
169b4     0C 6D BF FD | 	call	#_pop
169b8     FF 16 02 F6 | 	mov	arg03, result3
169bc     A7 FA 61 FC | 	wrlong	result1, fp
169c0     04 4E 05 F1 | 	add	fp, #4
169c4     A7 FC 61 FC | 	wrlong	result2, fp
169c8     04 4E 05 F1 | 	add	fp, #4
169cc     A7 16 62 FC | 	wrlong	arg03, fp
169d0                 | ' t1=pop()
169d0                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
169d0     08 4E 85 F1 | 	sub	fp, #8
169d4     2C 16 0E F2 | 	cmp	arg03, #44 wz
169d8     44 00 90 AD |  if_e	jmp	#LR__1835
169dc     00 12 06 F6 | 	mov	arg01, #0
169e0     B4 62 B1 FD | 	call	#__system___getiolock_0613
169e4     FD 12 02 F6 | 	mov	arg01, result1
169e8     84 05 B1 FD | 	call	#__system___lockmem
169ec     BA 01 00 FF 
169f0     7D 15 06 F6 | 	mov	arg02, ##@LR__5974
169f4     00 12 06 F6 | 	mov	arg01, #0
169f8     00 16 06 F6 | 	mov	arg03, #0
169fc     64 12 B1 FD | 	call	#__system___basic_print_string
16a00     00 12 06 F6 | 	mov	arg01, #0
16a04     0A 14 06 F6 | 	mov	arg02, #10
16a08     00 16 06 F6 | 	mov	arg03, #0
16a0c     FC 11 B1 FD | 	call	#__system___basic_print_char
16a10     00 12 06 F6 | 	mov	arg01, #0
16a14     80 62 B1 FD | 	call	#__system___getiolock_0613
16a18     FD 00 68 FC | 	wrlong	#0, result1
16a1c     D8 00 90 FD | 	jmp	#LR__1842
16a20                 | LR__1835
16a20     A7 26 02 FB | 	rdlong	local01, fp
16a24     18 4E 05 F1 | 	add	fp, #24
16a28     A7 26 62 FC | 	wrlong	local01, fp
16a2c                 | ' channel  = t1.result.iresult
16a2c                 | ' select case  mode
16a2c     04 4E 85 F1 | 	sub	fp, #4
16a30     A7 28 02 FB | 	rdlong	local02, fp
16a34     14 4E 85 F1 | 	sub	fp, #20
16a38     01 28 86 F1 | 	sub	local02, #1
16a3c     04 28 26 F3 | 	fle	local02, #4
16a40     30 28 62 FD | 	jmprel	local02
16a44                 | LR__1836
16a44     10 00 90 FD | 	jmp	#LR__1837
16a48     2C 00 90 FD | 	jmp	#LR__1838
16a4c     68 00 90 FD | 	jmp	#LR__1840
16a50     44 00 90 FD | 	jmp	#LR__1839
16a54     60 00 90 FD | 	jmp	#LR__1840
16a58                 | LR__1837
16a58     18 4E 05 F1 | 	add	fp, #24
16a5c     A7 12 02 FB | 	rdlong	arg01, fp
16a60     0C 4E 85 F1 | 	sub	fp, #12
16a64     A7 14 02 FB | 	rdlong	arg02, fp
16a68     0C 4E 85 F1 | 	sub	fp, #12
16a6c     00 16 06 F6 | 	mov	arg03, #0
16a70     00 11 B1 FD | 	call	#__system___basic_open_string
16a74     80 00 90 FD | 	jmp	#LR__1841
16a78                 | LR__1838
16a78     18 4E 05 F1 | 	add	fp, #24
16a7c     A7 12 02 FB | 	rdlong	arg01, fp
16a80     0C 4E 85 F1 | 	sub	fp, #12
16a84     A7 14 02 FB | 	rdlong	arg02, fp
16a88     0C 4E 85 F1 | 	sub	fp, #12
16a8c     0D 16 06 F6 | 	mov	arg03, #13
16a90     E0 10 B1 FD | 	call	#__system___basic_open_string
16a94     60 00 90 FD | 	jmp	#LR__1841
16a98                 | LR__1839
16a98     18 4E 05 F1 | 	add	fp, #24
16a9c     A7 12 02 FB | 	rdlong	arg01, fp
16aa0     0C 4E 85 F1 | 	sub	fp, #12
16aa4     A7 14 02 FB | 	rdlong	arg02, fp
16aa8     0C 4E 85 F1 | 	sub	fp, #12
16aac     25 16 06 F6 | 	mov	arg03, #37
16ab0     C0 10 B1 FD | 	call	#__system___basic_open_string
16ab4     40 00 90 FD | 	jmp	#LR__1841
16ab8                 | LR__1840
16ab8     00 12 06 F6 | 	mov	arg01, #0
16abc     D8 61 B1 FD | 	call	#__system___getiolock_0613
16ac0     FD 12 02 F6 | 	mov	arg01, result1
16ac4     A8 04 B1 FD | 	call	#__system___lockmem
16ac8     BA 01 00 FF 
16acc     8F 15 06 F6 | 	mov	arg02, ##@LR__5975
16ad0     00 12 06 F6 | 	mov	arg01, #0
16ad4     00 16 06 F6 | 	mov	arg03, #0
16ad8     88 11 B1 FD | 	call	#__system___basic_print_string
16adc     00 12 06 F6 | 	mov	arg01, #0
16ae0     0A 14 06 F6 | 	mov	arg02, #10
16ae4     00 16 06 F6 | 	mov	arg03, #0
16ae8     20 11 B1 FD | 	call	#__system___basic_print_char
16aec     00 12 06 F6 | 	mov	arg01, #0
16af0     A4 61 B1 FD | 	call	#__system___getiolock_0613
16af4     FD 00 68 FC | 	wrlong	#0, result1
16af8                 | LR__1841
16af8                 | LR__1842
16af8     A7 F0 03 F6 | 	mov	ptra, fp
16afc     B2 00 A0 FD | 	call	#popregs_
16b00                 | _do_open_ret
16b00     2D 00 64 FD | 	ret
16b04                 | 
16b04                 | ' 
16b04                 | ' ' ------------------ padh
16b04                 | ' 
16b04                 | ' sub do_padh
16b04                 | _do_padh
16b04     01 4A 05 F6 | 	mov	COUNT_, #1
16b08     A8 00 A0 FD | 	call	#pushregs_
16b0c     14 F0 07 F1 | 	add	ptra, #20
16b10     4A 00 00 FF 
16b14     80 E4 05 F1 | 	add	objptr, ##38016
16b18     F2 26 02 FB | 	rdlong	local01, objptr
16b1c     13 17 02 F6 | 	mov	arg03, local01
16b20     01 16 66 F0 | 	shl	arg03, #1
16b24     13 17 02 F1 | 	add	arg03, local01
16b28     02 16 66 F0 | 	shl	arg03, #2
16b2c     03 00 00 FF 
16b30     04 E4 85 F1 | 	sub	objptr, ##1540
16b34     F2 16 02 F1 | 	add	arg03, objptr
16b38     0B 17 02 FB | 	rdlong	arg03, arg03
16b3c     0C 4E 05 F1 | 	add	fp, #12
16b40     A7 16 62 FC | 	wrlong	arg03, fp
16b44                 | ' 
16b44                 | ' numpar=compiledline(lineptr_e).result.uresult
16b44                 | ' if numpar>1 then print "padh: "; : printerror(39) : return
16b44     0C 4E 85 F1 | 	sub	fp, #12
16b48     02 16 16 F2 | 	cmp	arg03, #2 wc
16b4c     47 00 00 FF 
16b50     7C E4 85 F1 | 	sub	objptr, ##36476
16b54     40 00 90 CD |  if_b	jmp	#LR__1850
16b58     00 12 06 F6 | 	mov	arg01, #0
16b5c     38 61 B1 FD | 	call	#__system___getiolock_0613
16b60     FD 12 02 F6 | 	mov	arg01, result1
16b64     08 04 B1 FD | 	call	#__system___lockmem
16b68     BA 01 00 FF 
16b6c     A2 15 06 F6 | 	mov	arg02, ##@LR__5976
16b70     00 12 06 F6 | 	mov	arg01, #0
16b74     00 16 06 F6 | 	mov	arg03, #0
16b78     E8 10 B1 FD | 	call	#__system___basic_print_string
16b7c     00 12 06 F6 | 	mov	arg01, #0
16b80     14 61 B1 FD | 	call	#__system___getiolock_0613
16b84     FD 00 68 FC | 	wrlong	#0, result1
16b88     27 12 06 F6 | 	mov	arg01, #39
16b8c     00 14 06 F6 | 	mov	arg02, #0
16b90     C0 C9 B0 FD | 	call	#_printerror
16b94     F0 00 90 FD | 	jmp	#LR__1854
16b98                 | LR__1850
16b98                 | ' if numpar=0 then 
16b98     0C 4E 05 F1 | 	add	fp, #12
16b9c     A7 FE 09 FB | 	rdlong	result3, fp wz
16ba0     0C 4E 85 F1 | 	sub	fp, #12
16ba4     30 00 90 5D |  if_ne	jmp	#LR__1851
16ba8     51 00 00 FF 
16bac     AC E5 05 F1 | 	add	objptr, ##41900
16bb0     F2 26 02 FB | 	rdlong	local01, objptr
16bb4     51 00 00 FF 
16bb8     AC E5 85 F1 | 	sub	objptr, ##41900
16bbc     A7 26 62 FC | 	wrlong	local01, fp
16bc0     08 4E 05 F1 | 	add	fp, #8
16bc4     A7 38 68 FC | 	wrlong	#28, fp
16bc8     08 4E 85 F1 | 	sub	fp, #8
16bcc     A7 12 02 F6 | 	mov	arg01, fp
16bd0     88 6B BF FD | 	call	#_push
16bd4                 | '   t1.result.uresult=padh(0): t1.result_type=result_int : push t1 : return
16bd4     B0 00 90 FD | 	jmp	#LR__1854
16bd8                 | LR__1851
16bd8     E8 6A BF FD | 	call	#_pop
16bdc     A7 FA 61 FC | 	wrlong	result1, fp
16be0     04 4E 05 F1 | 	add	fp, #4
16be4     A7 FC 61 FC | 	wrlong	result2, fp
16be8     04 4E 05 F1 | 	add	fp, #4
16bec     A7 FE 61 FC | 	wrlong	result3, fp
16bf0                 | ' t1=pop()
16bf0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16bf0     08 4E 85 F1 | 	sub	fp, #8
16bf4     1C FE 0D F2 | 	cmp	result3, #28 wz
16bf8     08 4E 05 51 |  if_ne	add	fp, #8
16bfc     A7 26 02 5B |  if_ne	rdlong	local01, fp
16c00     08 4E 85 51 |  if_ne	sub	fp, #8
16c04     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16c08     70 00 90 5D |  if_ne	jmp	#LR__1853
16c0c     A7 26 02 FB | 	rdlong	local01, fp
16c10     52 00 00 FF 
16c14     08 E5 05 F1 | 	add	objptr, ##42248
16c18     F2 26 62 FC | 	wrlong	local01, objptr
16c1c                 | '   q=t1.result.uresult
16c1c                 | '   if q<7 then 
16c1c     52 00 00 FF 
16c20     08 E5 85 F1 | 	sub	objptr, ##42248
16c24     07 26 56 F2 | 	cmps	local01, #7 wc
16c28     40 00 90 3D |  if_ae	jmp	#LR__1852
16c2c     52 00 00 FF 
16c30     08 E5 05 F1 | 	add	objptr, ##42248
16c34     F2 26 02 FB | 	rdlong	local01, objptr
16c38     02 26 66 F0 | 	shl	local01, #2
16c3c     5C E5 85 F1 | 	sub	objptr, #348
16c40     F2 26 02 F1 | 	add	local01, objptr
16c44     13 27 02 FB | 	rdlong	local01, local01
16c48     A7 26 62 FC | 	wrlong	local01, fp
16c4c     08 4E 05 F1 | 	add	fp, #8
16c50     A7 38 68 FC | 	wrlong	#28, fp
16c54     08 4E 85 F1 | 	sub	fp, #8
16c58     A7 12 02 F6 | 	mov	arg01, fp
16c5c     51 00 00 FF 
16c60     AC E5 85 F1 | 	sub	objptr, ##41900
16c64     F4 6A BF FD | 	call	#_push
16c68                 | '     t1.result.uresult=padh(q): t1.result_type=result_int : push t1 : return 
16c68     1C 00 90 FD | 	jmp	#LR__1854
16c6c                 | LR__1852
16c6c     29 12 06 F6 | 	mov	arg01, #41
16c70     00 14 06 F6 | 	mov	arg02, #0
16c74     DC C8 B0 FD | 	call	#_printerror
16c78                 | '      printerror(41) : return
16c78     0C 00 90 FD | 	jmp	#LR__1854
16c7c                 | LR__1853
16c7c     29 12 06 F6 | 	mov	arg01, #41
16c80     00 14 06 F6 | 	mov	arg02, #0
16c84     CC C8 B0 FD | 	call	#_printerror
16c88                 | LR__1854
16c88     A7 F0 03 F6 | 	mov	ptra, fp
16c8c     B2 00 A0 FD | 	call	#popregs_
16c90                 | _do_padh_ret
16c90     2D 00 64 FD | 	ret
16c94                 | 
16c94                 | ' 
16c94                 | ' ' ------------------ padrx
16c94                 | ' 
16c94                 | ' sub do_padrx
16c94                 | _do_padrx
16c94     02 4A 05 F6 | 	mov	COUNT_, #2
16c98     A8 00 A0 FD | 	call	#pushregs_
16c9c     14 F0 07 F1 | 	add	ptra, #20
16ca0     4A 00 00 FF 
16ca4     80 E4 05 F1 | 	add	objptr, ##38016
16ca8     F2 26 02 FB | 	rdlong	local01, objptr
16cac     13 17 02 F6 | 	mov	arg03, local01
16cb0     01 16 66 F0 | 	shl	arg03, #1
16cb4     13 17 02 F1 | 	add	arg03, local01
16cb8     02 16 66 F0 | 	shl	arg03, #2
16cbc     03 00 00 FF 
16cc0     04 E4 85 F1 | 	sub	objptr, ##1540
16cc4     F2 16 02 F1 | 	add	arg03, objptr
16cc8     0B 17 02 FB | 	rdlong	arg03, arg03
16ccc     0C 4E 05 F1 | 	add	fp, #12
16cd0     A7 16 62 FC | 	wrlong	arg03, fp
16cd4                 | ' 
16cd4                 | ' numpar=compiledline(lineptr_e).result.uresult
16cd4                 | ' if numpar>1 then print "padrx: "; : printerror(39) : return
16cd4     0C 4E 85 F1 | 	sub	fp, #12
16cd8     02 16 16 F2 | 	cmp	arg03, #2 wc
16cdc     47 00 00 FF 
16ce0     7C E4 85 F1 | 	sub	objptr, ##36476
16ce4     40 00 90 CD |  if_b	jmp	#LR__1860
16ce8     00 12 06 F6 | 	mov	arg01, #0
16cec     A8 5F B1 FD | 	call	#__system___getiolock_0613
16cf0     FD 12 02 F6 | 	mov	arg01, result1
16cf4     78 02 B1 FD | 	call	#__system___lockmem
16cf8     BA 01 00 FF 
16cfc     A9 15 06 F6 | 	mov	arg02, ##@LR__5977
16d00     00 12 06 F6 | 	mov	arg01, #0
16d04     00 16 06 F6 | 	mov	arg03, #0
16d08     58 0F B1 FD | 	call	#__system___basic_print_string
16d0c     00 12 06 F6 | 	mov	arg01, #0
16d10     84 5F B1 FD | 	call	#__system___getiolock_0613
16d14     FD 00 68 FC | 	wrlong	#0, result1
16d18     27 12 06 F6 | 	mov	arg01, #39
16d1c     00 14 06 F6 | 	mov	arg02, #0
16d20     30 C8 B0 FD | 	call	#_printerror
16d24     E0 01 90 FD | 	jmp	#LR__1864
16d28                 | LR__1860
16d28                 | ' if numpar=0 then 
16d28     0C 4E 05 F1 | 	add	fp, #12
16d2c     A7 FE 09 FB | 	rdlong	result3, fp wz
16d30     0C 4E 85 F1 | 	sub	fp, #12
16d34     A8 00 90 5D |  if_ne	jmp	#LR__1861
16d38     00 C0 1B FF 
16d3c     00 26 06 F6 | 	mov	local01, ##931135488
16d40     51 00 00 FF 
16d44     C8 E5 05 F1 | 	add	objptr, ##41928
16d48     F2 12 02 FB | 	rdlong	arg01, objptr
16d4c     51 00 00 FF 
16d50     C8 E5 85 F1 | 	sub	objptr, ##41928
16d54     09 13 52 F6 | 	abs	arg01, arg01 wc
16d58     1F 28 C6 C9 |  if_b	decod	local02, #31
16d5c     00 28 06 36 |  if_ae	mov	local02, #0
16d60     80 2C B1 FD | 	call	#__system___float_fromuns
16d64     14 FB 61 F5 | 	xor	result1, local02
16d68     FD 12 02 F6 | 	mov	arg01, result1
16d6c     FF 7F 23 FF 
16d70     00 14 06 F6 | 	mov	arg02, ##1191181824
16d74     74 32 B1 FD | 	call	#__system___float_div
16d78     FD 14 02 F6 | 	mov	arg02, result1
16d7c     13 13 02 F6 | 	mov	arg01, local01
16d80     94 2C B1 FD | 	call	#__system___float_add
16d84     10 4E 05 F1 | 	add	fp, #16
16d88     A7 FA 61 FC | 	wrlong	result1, fp
16d8c                 | '   fpad=(1.0/65536.0)+padrx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16d8c     10 4E 85 F1 | 	sub	fp, #16
16d90     1F FA 05 F4 | 	bitl	result1, #31
16d94     FD 12 02 F6 | 	mov	arg01, result1
16d98     89 41 1D FF 
16d9c     6F 14 06 F6 | 	mov	arg02, ##981668463
16da0     01 16 06 F6 | 	mov	arg03, #1
16da4     74 34 B1 FD | 	call	#__system___float_cmp
16da8     00 FA 55 F2 | 	cmps	result1, #0 wc
16dac     10 4E 05 C1 |  if_b	add	fp, #16
16db0     A7 00 68 CC |  if_b	wrlong	#0, fp
16db4     10 4E 85 C1 |  if_b	sub	fp, #16
16db8     10 4E 05 F1 | 	add	fp, #16
16dbc     A7 26 02 FB | 	rdlong	local01, fp
16dc0     10 4E 85 F1 | 	sub	fp, #16
16dc4     A7 26 62 FC | 	wrlong	local01, fp
16dc8     08 4E 05 F1 | 	add	fp, #8
16dcc     A7 3C 68 FC | 	wrlong	#30, fp
16dd0     08 4E 85 F1 | 	sub	fp, #8
16dd4     A7 12 02 F6 | 	mov	arg01, fp
16dd8     80 69 BF FD | 	call	#_push
16ddc                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16ddc     28 01 90 FD | 	jmp	#LR__1864
16de0                 | LR__1861
16de0     E0 68 BF FD | 	call	#_pop
16de4     A7 FA 61 FC | 	wrlong	result1, fp
16de8     04 4E 05 F1 | 	add	fp, #4
16dec     A7 FC 61 FC | 	wrlong	result2, fp
16df0     04 4E 05 F1 | 	add	fp, #4
16df4     A7 FE 61 FC | 	wrlong	result3, fp
16df8                 | ' t1=pop()
16df8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16df8     08 4E 85 F1 | 	sub	fp, #8
16dfc     1C FE 0D F2 | 	cmp	result3, #28 wz
16e00     08 4E 05 51 |  if_ne	add	fp, #8
16e04     A7 26 02 5B |  if_ne	rdlong	local01, fp
16e08     08 4E 85 51 |  if_ne	sub	fp, #8
16e0c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16e10     E8 00 90 5D |  if_ne	jmp	#LR__1863
16e14     A7 26 02 FB | 	rdlong	local01, fp
16e18     52 00 00 FF 
16e1c     08 E5 05 F1 | 	add	objptr, ##42248
16e20     F2 26 62 FC | 	wrlong	local01, objptr
16e24                 | '   q=t1.result.uresult
16e24                 | '   if q<7 then 
16e24     52 00 00 FF 
16e28     08 E5 85 F1 | 	sub	objptr, ##42248
16e2c     07 26 56 F2 | 	cmps	local01, #7 wc
16e30     B8 00 90 3D |  if_ae	jmp	#LR__1862
16e34     00 C0 1B FF 
16e38     00 26 06 F6 | 	mov	local01, ##931135488
16e3c     52 00 00 FF 
16e40     08 E5 05 F1 | 	add	objptr, ##42248
16e44     F2 16 02 FB | 	rdlong	arg03, objptr
16e48     02 16 66 F0 | 	shl	arg03, #2
16e4c     40 E5 85 F1 | 	sub	objptr, #320
16e50     F2 16 02 F1 | 	add	arg03, objptr
16e54     0B 13 02 FB | 	rdlong	arg01, arg03
16e58     51 00 00 FF 
16e5c     C8 E5 85 F1 | 	sub	objptr, ##41928
16e60     09 13 52 F6 | 	abs	arg01, arg01 wc
16e64     1F 28 C6 C9 |  if_b	decod	local02, #31
16e68     00 28 06 36 |  if_ae	mov	local02, #0
16e6c     74 2B B1 FD | 	call	#__system___float_fromuns
16e70     14 FB 61 F5 | 	xor	result1, local02
16e74     FD 12 02 F6 | 	mov	arg01, result1
16e78     FF 7F 23 FF 
16e7c     00 14 06 F6 | 	mov	arg02, ##1191181824
16e80     68 31 B1 FD | 	call	#__system___float_div
16e84     FD 14 02 F6 | 	mov	arg02, result1
16e88     13 13 02 F6 | 	mov	arg01, local01
16e8c     88 2B B1 FD | 	call	#__system___float_add
16e90     10 4E 05 F1 | 	add	fp, #16
16e94     A7 FA 61 FC | 	wrlong	result1, fp
16e98                 | '     fpad=(1.0/65536.0)+padrx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16e98     10 4E 85 F1 | 	sub	fp, #16
16e9c     1F FA 05 F4 | 	bitl	result1, #31
16ea0     FD 12 02 F6 | 	mov	arg01, result1
16ea4     89 41 1D FF 
16ea8     6F 14 06 F6 | 	mov	arg02, ##981668463
16eac     01 16 06 F6 | 	mov	arg03, #1
16eb0     68 33 B1 FD | 	call	#__system___float_cmp
16eb4     00 FA 55 F2 | 	cmps	result1, #0 wc
16eb8     10 4E 05 C1 |  if_b	add	fp, #16
16ebc     A7 00 68 CC |  if_b	wrlong	#0, fp
16ec0     10 4E 85 C1 |  if_b	sub	fp, #16
16ec4     10 4E 05 F1 | 	add	fp, #16
16ec8     A7 26 02 FB | 	rdlong	local01, fp
16ecc     10 4E 85 F1 | 	sub	fp, #16
16ed0     A7 26 62 FC | 	wrlong	local01, fp
16ed4     08 4E 05 F1 | 	add	fp, #8
16ed8     A7 3C 68 FC | 	wrlong	#30, fp
16edc     08 4E 85 F1 | 	sub	fp, #8
16ee0     A7 12 02 F6 | 	mov	arg01, fp
16ee4     74 68 BF FD | 	call	#_push
16ee8                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16ee8     1C 00 90 FD | 	jmp	#LR__1864
16eec                 | LR__1862
16eec     29 12 06 F6 | 	mov	arg01, #41
16ef0     00 14 06 F6 | 	mov	arg02, #0
16ef4     5C C6 B0 FD | 	call	#_printerror
16ef8                 | '      printerror(41) : return
16ef8     0C 00 90 FD | 	jmp	#LR__1864
16efc                 | LR__1863
16efc     29 12 06 F6 | 	mov	arg01, #41
16f00     00 14 06 F6 | 	mov	arg02, #0
16f04     4C C6 B0 FD | 	call	#_printerror
16f08                 | LR__1864
16f08     A7 F0 03 F6 | 	mov	ptra, fp
16f0c     B2 00 A0 FD | 	call	#popregs_
16f10                 | _do_padrx_ret
16f10     2D 00 64 FD | 	ret
16f14                 | 
16f14                 | ' 
16f14                 | ' ' ------------------ padry
16f14                 | ' 
16f14                 | ' sub do_padry
16f14                 | _do_padry
16f14     02 4A 05 F6 | 	mov	COUNT_, #2
16f18     A8 00 A0 FD | 	call	#pushregs_
16f1c     14 F0 07 F1 | 	add	ptra, #20
16f20     4A 00 00 FF 
16f24     80 E4 05 F1 | 	add	objptr, ##38016
16f28     F2 26 02 FB | 	rdlong	local01, objptr
16f2c     13 17 02 F6 | 	mov	arg03, local01
16f30     01 16 66 F0 | 	shl	arg03, #1
16f34     13 17 02 F1 | 	add	arg03, local01
16f38     02 16 66 F0 | 	shl	arg03, #2
16f3c     03 00 00 FF 
16f40     04 E4 85 F1 | 	sub	objptr, ##1540
16f44     F2 16 02 F1 | 	add	arg03, objptr
16f48     0B 17 02 FB | 	rdlong	arg03, arg03
16f4c     0C 4E 05 F1 | 	add	fp, #12
16f50     A7 16 62 FC | 	wrlong	arg03, fp
16f54                 | ' 
16f54                 | ' numpar=compiledline(lineptr_e).result.uresult
16f54                 | ' if numpar>1 then print "padry: "; : printerror(39) : return
16f54     0C 4E 85 F1 | 	sub	fp, #12
16f58     02 16 16 F2 | 	cmp	arg03, #2 wc
16f5c     47 00 00 FF 
16f60     7C E4 85 F1 | 	sub	objptr, ##36476
16f64     40 00 90 CD |  if_b	jmp	#LR__1870
16f68     00 12 06 F6 | 	mov	arg01, #0
16f6c     28 5D B1 FD | 	call	#__system___getiolock_0613
16f70     FD 12 02 F6 | 	mov	arg01, result1
16f74     F8 FF B0 FD | 	call	#__system___lockmem
16f78     BA 01 00 FF 
16f7c     B1 15 06 F6 | 	mov	arg02, ##@LR__5978
16f80     00 12 06 F6 | 	mov	arg01, #0
16f84     00 16 06 F6 | 	mov	arg03, #0
16f88     D8 0C B1 FD | 	call	#__system___basic_print_string
16f8c     00 12 06 F6 | 	mov	arg01, #0
16f90     04 5D B1 FD | 	call	#__system___getiolock_0613
16f94     FD 00 68 FC | 	wrlong	#0, result1
16f98     27 12 06 F6 | 	mov	arg01, #39
16f9c     00 14 06 F6 | 	mov	arg02, #0
16fa0     B0 C5 B0 FD | 	call	#_printerror
16fa4     E0 01 90 FD | 	jmp	#LR__1874
16fa8                 | LR__1870
16fa8                 | ' if numpar=0 then 
16fa8     0C 4E 05 F1 | 	add	fp, #12
16fac     A7 FE 09 FB | 	rdlong	result3, fp wz
16fb0     0C 4E 85 F1 | 	sub	fp, #12
16fb4     A8 00 90 5D |  if_ne	jmp	#LR__1871
16fb8     00 C0 1B FF 
16fbc     00 26 06 F6 | 	mov	local01, ##931135488
16fc0     51 00 00 FF 
16fc4     E4 E5 05 F1 | 	add	objptr, ##41956
16fc8     F2 12 02 FB | 	rdlong	arg01, objptr
16fcc     51 00 00 FF 
16fd0     E4 E5 85 F1 | 	sub	objptr, ##41956
16fd4     09 13 52 F6 | 	abs	arg01, arg01 wc
16fd8     1F 28 C6 C9 |  if_b	decod	local02, #31
16fdc     00 28 06 36 |  if_ae	mov	local02, #0
16fe0     00 2A B1 FD | 	call	#__system___float_fromuns
16fe4     14 FB 61 F5 | 	xor	result1, local02
16fe8     FD 12 02 F6 | 	mov	arg01, result1
16fec     FF 7F 23 FF 
16ff0     00 14 06 F6 | 	mov	arg02, ##1191181824
16ff4     F4 2F B1 FD | 	call	#__system___float_div
16ff8     FD 14 02 F6 | 	mov	arg02, result1
16ffc     13 13 02 F6 | 	mov	arg01, local01
17000     14 2A B1 FD | 	call	#__system___float_add
17004     10 4E 05 F1 | 	add	fp, #16
17008     A7 FA 61 FC | 	wrlong	result1, fp
1700c                 | '   fpad=(1.0/65536.0)+padry(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1700c     10 4E 85 F1 | 	sub	fp, #16
17010     1F FA 05 F4 | 	bitl	result1, #31
17014     FD 12 02 F6 | 	mov	arg01, result1
17018     89 41 1D FF 
1701c     6F 14 06 F6 | 	mov	arg02, ##981668463
17020     01 16 06 F6 | 	mov	arg03, #1
17024     F4 31 B1 FD | 	call	#__system___float_cmp
17028     00 FA 55 F2 | 	cmps	result1, #0 wc
1702c     10 4E 05 C1 |  if_b	add	fp, #16
17030     A7 00 68 CC |  if_b	wrlong	#0, fp
17034     10 4E 85 C1 |  if_b	sub	fp, #16
17038     10 4E 05 F1 | 	add	fp, #16
1703c     A7 26 02 FB | 	rdlong	local01, fp
17040     10 4E 85 F1 | 	sub	fp, #16
17044     A7 26 62 FC | 	wrlong	local01, fp
17048     08 4E 05 F1 | 	add	fp, #8
1704c     A7 3C 68 FC | 	wrlong	#30, fp
17050     08 4E 85 F1 | 	sub	fp, #8
17054     A7 12 02 F6 | 	mov	arg01, fp
17058     00 67 BF FD | 	call	#_push
1705c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
1705c     28 01 90 FD | 	jmp	#LR__1874
17060                 | LR__1871
17060     60 66 BF FD | 	call	#_pop
17064     A7 FA 61 FC | 	wrlong	result1, fp
17068     04 4E 05 F1 | 	add	fp, #4
1706c     A7 FC 61 FC | 	wrlong	result2, fp
17070     04 4E 05 F1 | 	add	fp, #4
17074     A7 FE 61 FC | 	wrlong	result3, fp
17078                 | ' t1=pop()
17078                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17078     08 4E 85 F1 | 	sub	fp, #8
1707c     1C FE 0D F2 | 	cmp	result3, #28 wz
17080     08 4E 05 51 |  if_ne	add	fp, #8
17084     A7 26 02 5B |  if_ne	rdlong	local01, fp
17088     08 4E 85 51 |  if_ne	sub	fp, #8
1708c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17090     E8 00 90 5D |  if_ne	jmp	#LR__1873
17094     A7 26 02 FB | 	rdlong	local01, fp
17098     52 00 00 FF 
1709c     08 E5 05 F1 | 	add	objptr, ##42248
170a0     F2 26 62 FC | 	wrlong	local01, objptr
170a4                 | '   q=t1.result.uresult
170a4                 | '   if q<7 then 
170a4     52 00 00 FF 
170a8     08 E5 85 F1 | 	sub	objptr, ##42248
170ac     07 26 56 F2 | 	cmps	local01, #7 wc
170b0     B8 00 90 3D |  if_ae	jmp	#LR__1872
170b4     00 C0 1B FF 
170b8     00 26 06 F6 | 	mov	local01, ##931135488
170bc     52 00 00 FF 
170c0     08 E5 05 F1 | 	add	objptr, ##42248
170c4     F2 16 02 FB | 	rdlong	arg03, objptr
170c8     02 16 66 F0 | 	shl	arg03, #2
170cc     24 E5 85 F1 | 	sub	objptr, #292
170d0     F2 16 02 F1 | 	add	arg03, objptr
170d4     0B 13 02 FB | 	rdlong	arg01, arg03
170d8     51 00 00 FF 
170dc     E4 E5 85 F1 | 	sub	objptr, ##41956
170e0     09 13 52 F6 | 	abs	arg01, arg01 wc
170e4     1F 28 C6 C9 |  if_b	decod	local02, #31
170e8     00 28 06 36 |  if_ae	mov	local02, #0
170ec     F4 28 B1 FD | 	call	#__system___float_fromuns
170f0     14 FB 61 F5 | 	xor	result1, local02
170f4     FD 12 02 F6 | 	mov	arg01, result1
170f8     FF 7F 23 FF 
170fc     00 14 06 F6 | 	mov	arg02, ##1191181824
17100     E8 2E B1 FD | 	call	#__system___float_div
17104     FD 14 02 F6 | 	mov	arg02, result1
17108     13 13 02 F6 | 	mov	arg01, local01
1710c     08 29 B1 FD | 	call	#__system___float_add
17110     10 4E 05 F1 | 	add	fp, #16
17114     A7 FA 61 FC | 	wrlong	result1, fp
17118                 | '     fpad=(1.0/65536.0)+padry(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17118     10 4E 85 F1 | 	sub	fp, #16
1711c     1F FA 05 F4 | 	bitl	result1, #31
17120     FD 12 02 F6 | 	mov	arg01, result1
17124     89 41 1D FF 
17128     6F 14 06 F6 | 	mov	arg02, ##981668463
1712c     01 16 06 F6 | 	mov	arg03, #1
17130     E8 30 B1 FD | 	call	#__system___float_cmp
17134     00 FA 55 F2 | 	cmps	result1, #0 wc
17138     10 4E 05 C1 |  if_b	add	fp, #16
1713c     A7 00 68 CC |  if_b	wrlong	#0, fp
17140     10 4E 85 C1 |  if_b	sub	fp, #16
17144     10 4E 05 F1 | 	add	fp, #16
17148     A7 26 02 FB | 	rdlong	local01, fp
1714c     10 4E 85 F1 | 	sub	fp, #16
17150     A7 26 62 FC | 	wrlong	local01, fp
17154     08 4E 05 F1 | 	add	fp, #8
17158     A7 3C 68 FC | 	wrlong	#30, fp
1715c     08 4E 85 F1 | 	sub	fp, #8
17160     A7 12 02 F6 | 	mov	arg01, fp
17164     F4 65 BF FD | 	call	#_push
17168                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17168     1C 00 90 FD | 	jmp	#LR__1874
1716c                 | LR__1872
1716c     29 12 06 F6 | 	mov	arg01, #41
17170     00 14 06 F6 | 	mov	arg02, #0
17174     DC C3 B0 FD | 	call	#_printerror
17178                 | '      printerror(41) : return
17178     0C 00 90 FD | 	jmp	#LR__1874
1717c                 | LR__1873
1717c     29 12 06 F6 | 	mov	arg01, #41
17180     00 14 06 F6 | 	mov	arg02, #0
17184     CC C3 B0 FD | 	call	#_printerror
17188                 | LR__1874
17188     A7 F0 03 F6 | 	mov	ptra, fp
1718c     B2 00 A0 FD | 	call	#popregs_
17190                 | _do_padry_ret
17190     2D 00 64 FD | 	ret
17194                 | 
17194                 | ' 
17194                 | ' ' ------------------ padrz
17194                 | ' 
17194                 | ' sub do_padrz
17194                 | _do_padrz
17194     02 4A 05 F6 | 	mov	COUNT_, #2
17198     A8 00 A0 FD | 	call	#pushregs_
1719c     14 F0 07 F1 | 	add	ptra, #20
171a0     4A 00 00 FF 
171a4     80 E4 05 F1 | 	add	objptr, ##38016
171a8     F2 26 02 FB | 	rdlong	local01, objptr
171ac     13 17 02 F6 | 	mov	arg03, local01
171b0     01 16 66 F0 | 	shl	arg03, #1
171b4     13 17 02 F1 | 	add	arg03, local01
171b8     02 16 66 F0 | 	shl	arg03, #2
171bc     03 00 00 FF 
171c0     04 E4 85 F1 | 	sub	objptr, ##1540
171c4     F2 16 02 F1 | 	add	arg03, objptr
171c8     0B 17 02 FB | 	rdlong	arg03, arg03
171cc     0C 4E 05 F1 | 	add	fp, #12
171d0     A7 16 62 FC | 	wrlong	arg03, fp
171d4                 | ' 
171d4                 | ' numpar=compiledline(lineptr_e).result.uresult
171d4                 | ' if numpar>1 then print "padrz: "; : printerror(39) : return
171d4     0C 4E 85 F1 | 	sub	fp, #12
171d8     02 16 16 F2 | 	cmp	arg03, #2 wc
171dc     47 00 00 FF 
171e0     7C E4 85 F1 | 	sub	objptr, ##36476
171e4     40 00 90 CD |  if_b	jmp	#LR__1880
171e8     00 12 06 F6 | 	mov	arg01, #0
171ec     A8 5A B1 FD | 	call	#__system___getiolock_0613
171f0     FD 12 02 F6 | 	mov	arg01, result1
171f4     78 FD B0 FD | 	call	#__system___lockmem
171f8     BA 01 00 FF 
171fc     B9 15 06 F6 | 	mov	arg02, ##@LR__5979
17200     00 12 06 F6 | 	mov	arg01, #0
17204     00 16 06 F6 | 	mov	arg03, #0
17208     58 0A B1 FD | 	call	#__system___basic_print_string
1720c     00 12 06 F6 | 	mov	arg01, #0
17210     84 5A B1 FD | 	call	#__system___getiolock_0613
17214     FD 00 68 FC | 	wrlong	#0, result1
17218     27 12 06 F6 | 	mov	arg01, #39
1721c     00 14 06 F6 | 	mov	arg02, #0
17220     30 C3 B0 FD | 	call	#_printerror
17224     E0 01 90 FD | 	jmp	#LR__1884
17228                 | LR__1880
17228                 | ' if numpar=0 then 
17228     0C 4E 05 F1 | 	add	fp, #12
1722c     A7 FE 09 FB | 	rdlong	result3, fp wz
17230     0C 4E 85 F1 | 	sub	fp, #12
17234     A8 00 90 5D |  if_ne	jmp	#LR__1881
17238     00 C0 1B FF 
1723c     00 26 06 F6 | 	mov	local01, ##931135488
17240     52 00 00 FF 
17244     00 E4 05 F1 | 	add	objptr, ##41984
17248     F2 12 02 FB | 	rdlong	arg01, objptr
1724c     52 00 00 FF 
17250     00 E4 85 F1 | 	sub	objptr, ##41984
17254     09 13 52 F6 | 	abs	arg01, arg01 wc
17258     1F 28 C6 C9 |  if_b	decod	local02, #31
1725c     00 28 06 36 |  if_ae	mov	local02, #0
17260     80 27 B1 FD | 	call	#__system___float_fromuns
17264     14 FB 61 F5 | 	xor	result1, local02
17268     FD 12 02 F6 | 	mov	arg01, result1
1726c     FF 7F 23 FF 
17270     00 14 06 F6 | 	mov	arg02, ##1191181824
17274     74 2D B1 FD | 	call	#__system___float_div
17278     FD 14 02 F6 | 	mov	arg02, result1
1727c     13 13 02 F6 | 	mov	arg01, local01
17280     94 27 B1 FD | 	call	#__system___float_add
17284     10 4E 05 F1 | 	add	fp, #16
17288     A7 FA 61 FC | 	wrlong	result1, fp
1728c                 | '   fpad=(1.0/65536.0)+padrz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1728c     10 4E 85 F1 | 	sub	fp, #16
17290     1F FA 05 F4 | 	bitl	result1, #31
17294     FD 12 02 F6 | 	mov	arg01, result1
17298     89 41 1D FF 
1729c     6F 14 06 F6 | 	mov	arg02, ##981668463
172a0     01 16 06 F6 | 	mov	arg03, #1
172a4     74 2F B1 FD | 	call	#__system___float_cmp
172a8     00 FA 55 F2 | 	cmps	result1, #0 wc
172ac     10 4E 05 C1 |  if_b	add	fp, #16
172b0     A7 00 68 CC |  if_b	wrlong	#0, fp
172b4     10 4E 85 C1 |  if_b	sub	fp, #16
172b8     10 4E 05 F1 | 	add	fp, #16
172bc     A7 26 02 FB | 	rdlong	local01, fp
172c0     10 4E 85 F1 | 	sub	fp, #16
172c4     A7 26 62 FC | 	wrlong	local01, fp
172c8     08 4E 05 F1 | 	add	fp, #8
172cc     A7 3C 68 FC | 	wrlong	#30, fp
172d0     08 4E 85 F1 | 	sub	fp, #8
172d4     A7 12 02 F6 | 	mov	arg01, fp
172d8     80 64 BF FD | 	call	#_push
172dc                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
172dc     28 01 90 FD | 	jmp	#LR__1884
172e0                 | LR__1881
172e0     E0 63 BF FD | 	call	#_pop
172e4     A7 FA 61 FC | 	wrlong	result1, fp
172e8     04 4E 05 F1 | 	add	fp, #4
172ec     A7 FC 61 FC | 	wrlong	result2, fp
172f0     04 4E 05 F1 | 	add	fp, #4
172f4     A7 FE 61 FC | 	wrlong	result3, fp
172f8                 | ' t1=pop()
172f8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
172f8     08 4E 85 F1 | 	sub	fp, #8
172fc     1C FE 0D F2 | 	cmp	result3, #28 wz
17300     08 4E 05 51 |  if_ne	add	fp, #8
17304     A7 26 02 5B |  if_ne	rdlong	local01, fp
17308     08 4E 85 51 |  if_ne	sub	fp, #8
1730c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17310     E8 00 90 5D |  if_ne	jmp	#LR__1883
17314     A7 26 02 FB | 	rdlong	local01, fp
17318     52 00 00 FF 
1731c     08 E5 05 F1 | 	add	objptr, ##42248
17320     F2 26 62 FC | 	wrlong	local01, objptr
17324                 | '   q=t1.result.uresult
17324                 | '   if q<7 then 
17324     52 00 00 FF 
17328     08 E5 85 F1 | 	sub	objptr, ##42248
1732c     07 26 56 F2 | 	cmps	local01, #7 wc
17330     B8 00 90 3D |  if_ae	jmp	#LR__1882
17334     00 C0 1B FF 
17338     00 26 06 F6 | 	mov	local01, ##931135488
1733c     52 00 00 FF 
17340     08 E5 05 F1 | 	add	objptr, ##42248
17344     F2 16 02 FB | 	rdlong	arg03, objptr
17348     02 16 66 F0 | 	shl	arg03, #2
1734c     08 E5 85 F1 | 	sub	objptr, #264
17350     F2 16 02 F1 | 	add	arg03, objptr
17354     0B 13 02 FB | 	rdlong	arg01, arg03
17358     52 00 00 FF 
1735c     00 E4 85 F1 | 	sub	objptr, ##41984
17360     09 13 52 F6 | 	abs	arg01, arg01 wc
17364     1F 28 C6 C9 |  if_b	decod	local02, #31
17368     00 28 06 36 |  if_ae	mov	local02, #0
1736c     74 26 B1 FD | 	call	#__system___float_fromuns
17370     14 FB 61 F5 | 	xor	result1, local02
17374     FD 12 02 F6 | 	mov	arg01, result1
17378     FF 7F 23 FF 
1737c     00 14 06 F6 | 	mov	arg02, ##1191181824
17380     68 2C B1 FD | 	call	#__system___float_div
17384     FD 14 02 F6 | 	mov	arg02, result1
17388     13 13 02 F6 | 	mov	arg01, local01
1738c     88 26 B1 FD | 	call	#__system___float_add
17390     10 4E 05 F1 | 	add	fp, #16
17394     A7 FA 61 FC | 	wrlong	result1, fp
17398                 | '     fpad=(1.0/65536.0)+padrz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17398     10 4E 85 F1 | 	sub	fp, #16
1739c     1F FA 05 F4 | 	bitl	result1, #31
173a0     FD 12 02 F6 | 	mov	arg01, result1
173a4     89 41 1D FF 
173a8     6F 14 06 F6 | 	mov	arg02, ##981668463
173ac     01 16 06 F6 | 	mov	arg03, #1
173b0     68 2E B1 FD | 	call	#__system___float_cmp
173b4     00 FA 55 F2 | 	cmps	result1, #0 wc
173b8     10 4E 05 C1 |  if_b	add	fp, #16
173bc     A7 00 68 CC |  if_b	wrlong	#0, fp
173c0     10 4E 85 C1 |  if_b	sub	fp, #16
173c4     10 4E 05 F1 | 	add	fp, #16
173c8     A7 26 02 FB | 	rdlong	local01, fp
173cc     10 4E 85 F1 | 	sub	fp, #16
173d0     A7 26 62 FC | 	wrlong	local01, fp
173d4     08 4E 05 F1 | 	add	fp, #8
173d8     A7 3C 68 FC | 	wrlong	#30, fp
173dc     08 4E 85 F1 | 	sub	fp, #8
173e0     A7 12 02 F6 | 	mov	arg01, fp
173e4     74 63 BF FD | 	call	#_push
173e8                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
173e8     1C 00 90 FD | 	jmp	#LR__1884
173ec                 | LR__1882
173ec     29 12 06 F6 | 	mov	arg01, #41
173f0     00 14 06 F6 | 	mov	arg02, #0
173f4     5C C1 B0 FD | 	call	#_printerror
173f8                 | '      printerror(41) : return
173f8     0C 00 90 FD | 	jmp	#LR__1884
173fc                 | LR__1883
173fc     29 12 06 F6 | 	mov	arg01, #41
17400     00 14 06 F6 | 	mov	arg02, #0
17404     4C C1 B0 FD | 	call	#_printerror
17408                 | LR__1884
17408     A7 F0 03 F6 | 	mov	ptra, fp
1740c     B2 00 A0 FD | 	call	#popregs_
17410                 | _do_padrz_ret
17410     2D 00 64 FD | 	ret
17414                 | 
17414                 | ' ' ------------------ padx
17414                 | ' 
17414                 | ' sub do_padx
17414                 | _do_padx
17414     02 4A 05 F6 | 	mov	COUNT_, #2
17418     A8 00 A0 FD | 	call	#pushregs_
1741c     14 F0 07 F1 | 	add	ptra, #20
17420     4A 00 00 FF 
17424     80 E4 05 F1 | 	add	objptr, ##38016
17428     F2 26 02 FB | 	rdlong	local01, objptr
1742c     13 17 02 F6 | 	mov	arg03, local01
17430     01 16 66 F0 | 	shl	arg03, #1
17434     13 17 02 F1 | 	add	arg03, local01
17438     02 16 66 F0 | 	shl	arg03, #2
1743c     03 00 00 FF 
17440     04 E4 85 F1 | 	sub	objptr, ##1540
17444     F2 16 02 F1 | 	add	arg03, objptr
17448     0B 17 02 FB | 	rdlong	arg03, arg03
1744c     0C 4E 05 F1 | 	add	fp, #12
17450     A7 16 62 FC | 	wrlong	arg03, fp
17454                 | ' 
17454                 | ' numpar=compiledline(lineptr_e).result.uresult
17454                 | ' if numpar>1 then print "padx: "; : printerror(39) : return
17454     0C 4E 85 F1 | 	sub	fp, #12
17458     02 16 16 F2 | 	cmp	arg03, #2 wc
1745c     47 00 00 FF 
17460     7C E4 85 F1 | 	sub	objptr, ##36476
17464     40 00 90 CD |  if_b	jmp	#LR__1890
17468     00 12 06 F6 | 	mov	arg01, #0
1746c     28 58 B1 FD | 	call	#__system___getiolock_0613
17470     FD 12 02 F6 | 	mov	arg01, result1
17474     F8 FA B0 FD | 	call	#__system___lockmem
17478     BA 01 00 FF 
1747c     C1 15 06 F6 | 	mov	arg02, ##@LR__5980
17480     00 12 06 F6 | 	mov	arg01, #0
17484     00 16 06 F6 | 	mov	arg03, #0
17488     D8 07 B1 FD | 	call	#__system___basic_print_string
1748c     00 12 06 F6 | 	mov	arg01, #0
17490     04 58 B1 FD | 	call	#__system___getiolock_0613
17494     FD 00 68 FC | 	wrlong	#0, result1
17498     27 12 06 F6 | 	mov	arg01, #39
1749c     00 14 06 F6 | 	mov	arg02, #0
174a0     B0 C0 B0 FD | 	call	#_printerror
174a4     E0 01 90 FD | 	jmp	#LR__1894
174a8                 | LR__1890
174a8                 | ' if numpar=0 then 
174a8     0C 4E 05 F1 | 	add	fp, #12
174ac     A7 FE 09 FB | 	rdlong	result3, fp wz
174b0     0C 4E 85 F1 | 	sub	fp, #12
174b4     A8 00 90 5D |  if_ne	jmp	#LR__1891
174b8     00 C0 1B FF 
174bc     00 26 06 F6 | 	mov	local01, ##931135488
174c0     51 00 00 FF 
174c4     58 E5 05 F1 | 	add	objptr, ##41816
174c8     F2 12 02 FB | 	rdlong	arg01, objptr
174cc     51 00 00 FF 
174d0     58 E5 85 F1 | 	sub	objptr, ##41816
174d4     09 13 52 F6 | 	abs	arg01, arg01 wc
174d8     1F 28 C6 C9 |  if_b	decod	local02, #31
174dc     00 28 06 36 |  if_ae	mov	local02, #0
174e0     00 25 B1 FD | 	call	#__system___float_fromuns
174e4     14 FB 61 F5 | 	xor	result1, local02
174e8     FD 12 02 F6 | 	mov	arg01, result1
174ec     FF 7F 23 FF 
174f0     00 14 06 F6 | 	mov	arg02, ##1191181824
174f4     F4 2A B1 FD | 	call	#__system___float_div
174f8     FD 14 02 F6 | 	mov	arg02, result1
174fc     13 13 02 F6 | 	mov	arg01, local01
17500     14 25 B1 FD | 	call	#__system___float_add
17504     10 4E 05 F1 | 	add	fp, #16
17508     A7 FA 61 FC | 	wrlong	result1, fp
1750c                 | '   fpad=(1.0/65536.0)+padx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1750c     10 4E 85 F1 | 	sub	fp, #16
17510     1F FA 05 F4 | 	bitl	result1, #31
17514     FD 12 02 F6 | 	mov	arg01, result1
17518     89 41 1D FF 
1751c     6F 14 06 F6 | 	mov	arg02, ##981668463
17520     01 16 06 F6 | 	mov	arg03, #1
17524     F4 2C B1 FD | 	call	#__system___float_cmp
17528     00 FA 55 F2 | 	cmps	result1, #0 wc
1752c     10 4E 05 C1 |  if_b	add	fp, #16
17530     A7 00 68 CC |  if_b	wrlong	#0, fp
17534     10 4E 85 C1 |  if_b	sub	fp, #16
17538     10 4E 05 F1 | 	add	fp, #16
1753c     A7 26 02 FB | 	rdlong	local01, fp
17540     10 4E 85 F1 | 	sub	fp, #16
17544     A7 26 62 FC | 	wrlong	local01, fp
17548     08 4E 05 F1 | 	add	fp, #8
1754c     A7 3C 68 FC | 	wrlong	#30, fp
17550     08 4E 85 F1 | 	sub	fp, #8
17554     A7 12 02 F6 | 	mov	arg01, fp
17558     00 62 BF FD | 	call	#_push
1755c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
1755c     28 01 90 FD | 	jmp	#LR__1894
17560                 | LR__1891
17560     60 61 BF FD | 	call	#_pop
17564     A7 FA 61 FC | 	wrlong	result1, fp
17568     04 4E 05 F1 | 	add	fp, #4
1756c     A7 FC 61 FC | 	wrlong	result2, fp
17570     04 4E 05 F1 | 	add	fp, #4
17574     A7 FE 61 FC | 	wrlong	result3, fp
17578                 | ' t1=pop()
17578                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17578     08 4E 85 F1 | 	sub	fp, #8
1757c     1C FE 0D F2 | 	cmp	result3, #28 wz
17580     08 4E 05 51 |  if_ne	add	fp, #8
17584     A7 26 02 5B |  if_ne	rdlong	local01, fp
17588     08 4E 85 51 |  if_ne	sub	fp, #8
1758c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17590     E8 00 90 5D |  if_ne	jmp	#LR__1893
17594     A7 26 02 FB | 	rdlong	local01, fp
17598     52 00 00 FF 
1759c     08 E5 05 F1 | 	add	objptr, ##42248
175a0     F2 26 62 FC | 	wrlong	local01, objptr
175a4                 | '   q=t1.result.uresult
175a4                 | '   if q<7 then 
175a4     52 00 00 FF 
175a8     08 E5 85 F1 | 	sub	objptr, ##42248
175ac     07 26 56 F2 | 	cmps	local01, #7 wc
175b0     B8 00 90 3D |  if_ae	jmp	#LR__1892
175b4     00 C0 1B FF 
175b8     00 26 06 F6 | 	mov	local01, ##931135488
175bc     52 00 00 FF 
175c0     08 E5 05 F1 | 	add	objptr, ##42248
175c4     F2 16 02 FB | 	rdlong	arg03, objptr
175c8     02 16 66 F0 | 	shl	arg03, #2
175cc     B0 E5 85 F1 | 	sub	objptr, #432
175d0     F2 16 02 F1 | 	add	arg03, objptr
175d4     0B 13 02 FB | 	rdlong	arg01, arg03
175d8     51 00 00 FF 
175dc     58 E5 85 F1 | 	sub	objptr, ##41816
175e0     09 13 52 F6 | 	abs	arg01, arg01 wc
175e4     1F 28 C6 C9 |  if_b	decod	local02, #31
175e8     00 28 06 36 |  if_ae	mov	local02, #0
175ec     F4 23 B1 FD | 	call	#__system___float_fromuns
175f0     14 FB 61 F5 | 	xor	result1, local02
175f4     FD 12 02 F6 | 	mov	arg01, result1
175f8     FF 7F 23 FF 
175fc     00 14 06 F6 | 	mov	arg02, ##1191181824
17600     E8 29 B1 FD | 	call	#__system___float_div
17604     FD 14 02 F6 | 	mov	arg02, result1
17608     13 13 02 F6 | 	mov	arg01, local01
1760c     08 24 B1 FD | 	call	#__system___float_add
17610     10 4E 05 F1 | 	add	fp, #16
17614     A7 FA 61 FC | 	wrlong	result1, fp
17618                 | '     fpad=(1.0/65536.0)+padx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17618     10 4E 85 F1 | 	sub	fp, #16
1761c     1F FA 05 F4 | 	bitl	result1, #31
17620     FD 12 02 F6 | 	mov	arg01, result1
17624     89 41 1D FF 
17628     6F 14 06 F6 | 	mov	arg02, ##981668463
1762c     01 16 06 F6 | 	mov	arg03, #1
17630     E8 2B B1 FD | 	call	#__system___float_cmp
17634     00 FA 55 F2 | 	cmps	result1, #0 wc
17638     10 4E 05 C1 |  if_b	add	fp, #16
1763c     A7 00 68 CC |  if_b	wrlong	#0, fp
17640     10 4E 85 C1 |  if_b	sub	fp, #16
17644     10 4E 05 F1 | 	add	fp, #16
17648     A7 26 02 FB | 	rdlong	local01, fp
1764c     10 4E 85 F1 | 	sub	fp, #16
17650     A7 26 62 FC | 	wrlong	local01, fp
17654     08 4E 05 F1 | 	add	fp, #8
17658     A7 3C 68 FC | 	wrlong	#30, fp
1765c     08 4E 85 F1 | 	sub	fp, #8
17660     A7 12 02 F6 | 	mov	arg01, fp
17664     F4 60 BF FD | 	call	#_push
17668                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17668     1C 00 90 FD | 	jmp	#LR__1894
1766c                 | LR__1892
1766c     29 12 06 F6 | 	mov	arg01, #41
17670     00 14 06 F6 | 	mov	arg02, #0
17674     DC BE B0 FD | 	call	#_printerror
17678                 | '      printerror(41) : return
17678     0C 00 90 FD | 	jmp	#LR__1894
1767c                 | LR__1893
1767c     29 12 06 F6 | 	mov	arg01, #41
17680     00 14 06 F6 | 	mov	arg02, #0
17684     CC BE B0 FD | 	call	#_printerror
17688                 | LR__1894
17688     A7 F0 03 F6 | 	mov	ptra, fp
1768c     B2 00 A0 FD | 	call	#popregs_
17690                 | _do_padx_ret
17690     2D 00 64 FD | 	ret
17694                 | 
17694                 | ' 
17694                 | ' ' ------------------ pady
17694                 | ' 
17694                 | ' sub do_pady
17694                 | _do_pady
17694     02 4A 05 F6 | 	mov	COUNT_, #2
17698     A8 00 A0 FD | 	call	#pushregs_
1769c     14 F0 07 F1 | 	add	ptra, #20
176a0     4A 00 00 FF 
176a4     80 E4 05 F1 | 	add	objptr, ##38016
176a8     F2 26 02 FB | 	rdlong	local01, objptr
176ac     13 17 02 F6 | 	mov	arg03, local01
176b0     01 16 66 F0 | 	shl	arg03, #1
176b4     13 17 02 F1 | 	add	arg03, local01
176b8     02 16 66 F0 | 	shl	arg03, #2
176bc     03 00 00 FF 
176c0     04 E4 85 F1 | 	sub	objptr, ##1540
176c4     F2 16 02 F1 | 	add	arg03, objptr
176c8     0B 17 02 FB | 	rdlong	arg03, arg03
176cc     0C 4E 05 F1 | 	add	fp, #12
176d0     A7 16 62 FC | 	wrlong	arg03, fp
176d4                 | ' 
176d4                 | ' numpar=compiledline(lineptr_e).result.uresult
176d4                 | ' if numpar>1 then print "pady: "; : printerror(39) : return
176d4     0C 4E 85 F1 | 	sub	fp, #12
176d8     02 16 16 F2 | 	cmp	arg03, #2 wc
176dc     47 00 00 FF 
176e0     7C E4 85 F1 | 	sub	objptr, ##36476
176e4     40 00 90 CD |  if_b	jmp	#LR__1900
176e8     00 12 06 F6 | 	mov	arg01, #0
176ec     A8 55 B1 FD | 	call	#__system___getiolock_0613
176f0     FD 12 02 F6 | 	mov	arg01, result1
176f4     78 F8 B0 FD | 	call	#__system___lockmem
176f8     BA 01 00 FF 
176fc     C8 15 06 F6 | 	mov	arg02, ##@LR__5981
17700     00 12 06 F6 | 	mov	arg01, #0
17704     00 16 06 F6 | 	mov	arg03, #0
17708     58 05 B1 FD | 	call	#__system___basic_print_string
1770c     00 12 06 F6 | 	mov	arg01, #0
17710     84 55 B1 FD | 	call	#__system___getiolock_0613
17714     FD 00 68 FC | 	wrlong	#0, result1
17718     27 12 06 F6 | 	mov	arg01, #39
1771c     00 14 06 F6 | 	mov	arg02, #0
17720     30 BE B0 FD | 	call	#_printerror
17724     E0 01 90 FD | 	jmp	#LR__1904
17728                 | LR__1900
17728                 | ' if numpar=0 then 
17728     0C 4E 05 F1 | 	add	fp, #12
1772c     A7 FE 09 FB | 	rdlong	result3, fp wz
17730     0C 4E 85 F1 | 	sub	fp, #12
17734     A8 00 90 5D |  if_ne	jmp	#LR__1901
17738     00 C0 1B FF 
1773c     00 26 06 F6 | 	mov	local01, ##931135488
17740     51 00 00 FF 
17744     74 E5 05 F1 | 	add	objptr, ##41844
17748     F2 12 02 FB | 	rdlong	arg01, objptr
1774c     51 00 00 FF 
17750     74 E5 85 F1 | 	sub	objptr, ##41844
17754     09 13 52 F6 | 	abs	arg01, arg01 wc
17758     1F 28 C6 C9 |  if_b	decod	local02, #31
1775c     00 28 06 36 |  if_ae	mov	local02, #0
17760     80 22 B1 FD | 	call	#__system___float_fromuns
17764     14 FB 61 F5 | 	xor	result1, local02
17768     FD 12 02 F6 | 	mov	arg01, result1
1776c     FF 7F 23 FF 
17770     00 14 06 F6 | 	mov	arg02, ##1191181824
17774     74 28 B1 FD | 	call	#__system___float_div
17778     FD 14 02 F6 | 	mov	arg02, result1
1777c     13 13 02 F6 | 	mov	arg01, local01
17780     94 22 B1 FD | 	call	#__system___float_add
17784     10 4E 05 F1 | 	add	fp, #16
17788     A7 FA 61 FC | 	wrlong	result1, fp
1778c                 | '   fpad=(1.0/65536.0)+pady(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1778c     10 4E 85 F1 | 	sub	fp, #16
17790     1F FA 05 F4 | 	bitl	result1, #31
17794     FD 12 02 F6 | 	mov	arg01, result1
17798     89 41 1D FF 
1779c     6F 14 06 F6 | 	mov	arg02, ##981668463
177a0     01 16 06 F6 | 	mov	arg03, #1
177a4     74 2A B1 FD | 	call	#__system___float_cmp
177a8     00 FA 55 F2 | 	cmps	result1, #0 wc
177ac     10 4E 05 C1 |  if_b	add	fp, #16
177b0     A7 00 68 CC |  if_b	wrlong	#0, fp
177b4     10 4E 85 C1 |  if_b	sub	fp, #16
177b8     10 4E 05 F1 | 	add	fp, #16
177bc     A7 26 02 FB | 	rdlong	local01, fp
177c0     10 4E 85 F1 | 	sub	fp, #16
177c4     A7 26 62 FC | 	wrlong	local01, fp
177c8     08 4E 05 F1 | 	add	fp, #8
177cc     A7 3C 68 FC | 	wrlong	#30, fp
177d0     08 4E 85 F1 | 	sub	fp, #8
177d4     A7 12 02 F6 | 	mov	arg01, fp
177d8     80 5F BF FD | 	call	#_push
177dc                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
177dc     28 01 90 FD | 	jmp	#LR__1904
177e0                 | LR__1901
177e0     E0 5E BF FD | 	call	#_pop
177e4     A7 FA 61 FC | 	wrlong	result1, fp
177e8     04 4E 05 F1 | 	add	fp, #4
177ec     A7 FC 61 FC | 	wrlong	result2, fp
177f0     04 4E 05 F1 | 	add	fp, #4
177f4     A7 FE 61 FC | 	wrlong	result3, fp
177f8                 | ' t1=pop()
177f8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
177f8     08 4E 85 F1 | 	sub	fp, #8
177fc     1C FE 0D F2 | 	cmp	result3, #28 wz
17800     08 4E 05 51 |  if_ne	add	fp, #8
17804     A7 26 02 5B |  if_ne	rdlong	local01, fp
17808     08 4E 85 51 |  if_ne	sub	fp, #8
1780c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17810     E8 00 90 5D |  if_ne	jmp	#LR__1903
17814     A7 26 02 FB | 	rdlong	local01, fp
17818     52 00 00 FF 
1781c     08 E5 05 F1 | 	add	objptr, ##42248
17820     F2 26 62 FC | 	wrlong	local01, objptr
17824                 | '   q=t1.result.uresult
17824                 | '   if q<7 then 
17824     52 00 00 FF 
17828     08 E5 85 F1 | 	sub	objptr, ##42248
1782c     07 26 56 F2 | 	cmps	local01, #7 wc
17830     B8 00 90 3D |  if_ae	jmp	#LR__1902
17834     00 C0 1B FF 
17838     00 26 06 F6 | 	mov	local01, ##931135488
1783c     52 00 00 FF 
17840     08 E5 05 F1 | 	add	objptr, ##42248
17844     F2 16 02 FB | 	rdlong	arg03, objptr
17848     02 16 66 F0 | 	shl	arg03, #2
1784c     94 E5 85 F1 | 	sub	objptr, #404
17850     F2 16 02 F1 | 	add	arg03, objptr
17854     0B 13 02 FB | 	rdlong	arg01, arg03
17858     51 00 00 FF 
1785c     74 E5 85 F1 | 	sub	objptr, ##41844
17860     09 13 52 F6 | 	abs	arg01, arg01 wc
17864     1F 28 C6 C9 |  if_b	decod	local02, #31
17868     00 28 06 36 |  if_ae	mov	local02, #0
1786c     74 21 B1 FD | 	call	#__system___float_fromuns
17870     14 FB 61 F5 | 	xor	result1, local02
17874     FD 12 02 F6 | 	mov	arg01, result1
17878     FF 7F 23 FF 
1787c     00 14 06 F6 | 	mov	arg02, ##1191181824
17880     68 27 B1 FD | 	call	#__system___float_div
17884     FD 14 02 F6 | 	mov	arg02, result1
17888     13 13 02 F6 | 	mov	arg01, local01
1788c     88 21 B1 FD | 	call	#__system___float_add
17890     10 4E 05 F1 | 	add	fp, #16
17894     A7 FA 61 FC | 	wrlong	result1, fp
17898                 | '     fpad=(1.0/65536.0)+pady(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17898     10 4E 85 F1 | 	sub	fp, #16
1789c     1F FA 05 F4 | 	bitl	result1, #31
178a0     FD 12 02 F6 | 	mov	arg01, result1
178a4     89 41 1D FF 
178a8     6F 14 06 F6 | 	mov	arg02, ##981668463
178ac     01 16 06 F6 | 	mov	arg03, #1
178b0     68 29 B1 FD | 	call	#__system___float_cmp
178b4     00 FA 55 F2 | 	cmps	result1, #0 wc
178b8     10 4E 05 C1 |  if_b	add	fp, #16
178bc     A7 00 68 CC |  if_b	wrlong	#0, fp
178c0     10 4E 85 C1 |  if_b	sub	fp, #16
178c4     10 4E 05 F1 | 	add	fp, #16
178c8     A7 26 02 FB | 	rdlong	local01, fp
178cc     10 4E 85 F1 | 	sub	fp, #16
178d0     A7 26 62 FC | 	wrlong	local01, fp
178d4     08 4E 05 F1 | 	add	fp, #8
178d8     A7 3C 68 FC | 	wrlong	#30, fp
178dc     08 4E 85 F1 | 	sub	fp, #8
178e0     A7 12 02 F6 | 	mov	arg01, fp
178e4     74 5E BF FD | 	call	#_push
178e8                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
178e8     1C 00 90 FD | 	jmp	#LR__1904
178ec                 | LR__1902
178ec     29 12 06 F6 | 	mov	arg01, #41
178f0     00 14 06 F6 | 	mov	arg02, #0
178f4     5C BC B0 FD | 	call	#_printerror
178f8                 | '      printerror(41) : return
178f8     0C 00 90 FD | 	jmp	#LR__1904
178fc                 | LR__1903
178fc     29 12 06 F6 | 	mov	arg01, #41
17900     00 14 06 F6 | 	mov	arg02, #0
17904     4C BC B0 FD | 	call	#_printerror
17908                 | LR__1904
17908     A7 F0 03 F6 | 	mov	ptra, fp
1790c     B2 00 A0 FD | 	call	#popregs_
17910                 | _do_pady_ret
17910     2D 00 64 FD | 	ret
17914                 | 
17914                 | ' 
17914                 | ' ' ------------------ padz
17914                 | ' 
17914                 | ' sub do_padz
17914                 | _do_padz
17914     02 4A 05 F6 | 	mov	COUNT_, #2
17918     A8 00 A0 FD | 	call	#pushregs_
1791c     14 F0 07 F1 | 	add	ptra, #20
17920     4A 00 00 FF 
17924     80 E4 05 F1 | 	add	objptr, ##38016
17928     F2 26 02 FB | 	rdlong	local01, objptr
1792c     13 17 02 F6 | 	mov	arg03, local01
17930     01 16 66 F0 | 	shl	arg03, #1
17934     13 17 02 F1 | 	add	arg03, local01
17938     02 16 66 F0 | 	shl	arg03, #2
1793c     03 00 00 FF 
17940     04 E4 85 F1 | 	sub	objptr, ##1540
17944     F2 16 02 F1 | 	add	arg03, objptr
17948     0B 17 02 FB | 	rdlong	arg03, arg03
1794c     0C 4E 05 F1 | 	add	fp, #12
17950     A7 16 62 FC | 	wrlong	arg03, fp
17954                 | ' 
17954                 | ' numpar=compiledline(lineptr_e).result.uresult
17954                 | ' if numpar>1 then print "padz: "; : printerror(39) : return
17954     0C 4E 85 F1 | 	sub	fp, #12
17958     02 16 16 F2 | 	cmp	arg03, #2 wc
1795c     47 00 00 FF 
17960     7C E4 85 F1 | 	sub	objptr, ##36476
17964     40 00 90 CD |  if_b	jmp	#LR__1910
17968     00 12 06 F6 | 	mov	arg01, #0
1796c     28 53 B1 FD | 	call	#__system___getiolock_0613
17970     FD 12 02 F6 | 	mov	arg01, result1
17974     F8 F5 B0 FD | 	call	#__system___lockmem
17978     BA 01 00 FF 
1797c     CF 15 06 F6 | 	mov	arg02, ##@LR__5982
17980     00 12 06 F6 | 	mov	arg01, #0
17984     00 16 06 F6 | 	mov	arg03, #0
17988     D8 02 B1 FD | 	call	#__system___basic_print_string
1798c     00 12 06 F6 | 	mov	arg01, #0
17990     04 53 B1 FD | 	call	#__system___getiolock_0613
17994     FD 00 68 FC | 	wrlong	#0, result1
17998     27 12 06 F6 | 	mov	arg01, #39
1799c     00 14 06 F6 | 	mov	arg02, #0
179a0     B0 BB B0 FD | 	call	#_printerror
179a4     E0 01 90 FD | 	jmp	#LR__1914
179a8                 | LR__1910
179a8                 | ' if numpar=0 then 
179a8     0C 4E 05 F1 | 	add	fp, #12
179ac     A7 FE 09 FB | 	rdlong	result3, fp wz
179b0     0C 4E 85 F1 | 	sub	fp, #12
179b4     A8 00 90 5D |  if_ne	jmp	#LR__1911
179b8     00 C0 1B FF 
179bc     00 26 06 F6 | 	mov	local01, ##931135488
179c0     51 00 00 FF 
179c4     90 E5 05 F1 | 	add	objptr, ##41872
179c8     F2 12 02 FB | 	rdlong	arg01, objptr
179cc     51 00 00 FF 
179d0     90 E5 85 F1 | 	sub	objptr, ##41872
179d4     09 13 52 F6 | 	abs	arg01, arg01 wc
179d8     1F 28 C6 C9 |  if_b	decod	local02, #31
179dc     00 28 06 36 |  if_ae	mov	local02, #0
179e0     00 20 B1 FD | 	call	#__system___float_fromuns
179e4     14 FB 61 F5 | 	xor	result1, local02
179e8     FD 12 02 F6 | 	mov	arg01, result1
179ec     FF 7F 23 FF 
179f0     00 14 06 F6 | 	mov	arg02, ##1191181824
179f4     F4 25 B1 FD | 	call	#__system___float_div
179f8     FD 14 02 F6 | 	mov	arg02, result1
179fc     13 13 02 F6 | 	mov	arg01, local01
17a00     14 20 B1 FD | 	call	#__system___float_add
17a04     10 4E 05 F1 | 	add	fp, #16
17a08     A7 FA 61 FC | 	wrlong	result1, fp
17a0c                 | '   fpad=(1.0/65536.0)+padz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17a0c     10 4E 85 F1 | 	sub	fp, #16
17a10     1F FA 05 F4 | 	bitl	result1, #31
17a14     FD 12 02 F6 | 	mov	arg01, result1
17a18     89 41 1D FF 
17a1c     6F 14 06 F6 | 	mov	arg02, ##981668463
17a20     01 16 06 F6 | 	mov	arg03, #1
17a24     F4 27 B1 FD | 	call	#__system___float_cmp
17a28     00 FA 55 F2 | 	cmps	result1, #0 wc
17a2c     10 4E 05 C1 |  if_b	add	fp, #16
17a30     A7 00 68 CC |  if_b	wrlong	#0, fp
17a34     10 4E 85 C1 |  if_b	sub	fp, #16
17a38     10 4E 05 F1 | 	add	fp, #16
17a3c     A7 26 02 FB | 	rdlong	local01, fp
17a40     10 4E 85 F1 | 	sub	fp, #16
17a44     A7 26 62 FC | 	wrlong	local01, fp
17a48     08 4E 05 F1 | 	add	fp, #8
17a4c     A7 3C 68 FC | 	wrlong	#30, fp
17a50     08 4E 85 F1 | 	sub	fp, #8
17a54     A7 12 02 F6 | 	mov	arg01, fp
17a58     00 5D BF FD | 	call	#_push
17a5c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17a5c     28 01 90 FD | 	jmp	#LR__1914
17a60                 | LR__1911
17a60     60 5C BF FD | 	call	#_pop
17a64     A7 FA 61 FC | 	wrlong	result1, fp
17a68     04 4E 05 F1 | 	add	fp, #4
17a6c     A7 FC 61 FC | 	wrlong	result2, fp
17a70     04 4E 05 F1 | 	add	fp, #4
17a74     A7 FE 61 FC | 	wrlong	result3, fp
17a78                 | ' t1=pop()
17a78                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17a78     08 4E 85 F1 | 	sub	fp, #8
17a7c     1C FE 0D F2 | 	cmp	result3, #28 wz
17a80     08 4E 05 51 |  if_ne	add	fp, #8
17a84     A7 26 02 5B |  if_ne	rdlong	local01, fp
17a88     08 4E 85 51 |  if_ne	sub	fp, #8
17a8c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17a90     E8 00 90 5D |  if_ne	jmp	#LR__1913
17a94     A7 26 02 FB | 	rdlong	local01, fp
17a98     52 00 00 FF 
17a9c     08 E5 05 F1 | 	add	objptr, ##42248
17aa0     F2 26 62 FC | 	wrlong	local01, objptr
17aa4                 | '   q=t1.result.uresult
17aa4                 | '   if q<7 then 
17aa4     52 00 00 FF 
17aa8     08 E5 85 F1 | 	sub	objptr, ##42248
17aac     07 26 56 F2 | 	cmps	local01, #7 wc
17ab0     B8 00 90 3D |  if_ae	jmp	#LR__1912
17ab4     00 C0 1B FF 
17ab8     00 26 06 F6 | 	mov	local01, ##931135488
17abc     52 00 00 FF 
17ac0     08 E5 05 F1 | 	add	objptr, ##42248
17ac4     F2 16 02 FB | 	rdlong	arg03, objptr
17ac8     02 16 66 F0 | 	shl	arg03, #2
17acc     78 E5 85 F1 | 	sub	objptr, #376
17ad0     F2 16 02 F1 | 	add	arg03, objptr
17ad4     0B 13 02 FB | 	rdlong	arg01, arg03
17ad8     51 00 00 FF 
17adc     90 E5 85 F1 | 	sub	objptr, ##41872
17ae0     09 13 52 F6 | 	abs	arg01, arg01 wc
17ae4     1F 28 C6 C9 |  if_b	decod	local02, #31
17ae8     00 28 06 36 |  if_ae	mov	local02, #0
17aec     F4 1E B1 FD | 	call	#__system___float_fromuns
17af0     14 FB 61 F5 | 	xor	result1, local02
17af4     FD 12 02 F6 | 	mov	arg01, result1
17af8     FF 7F 23 FF 
17afc     00 14 06 F6 | 	mov	arg02, ##1191181824
17b00     E8 24 B1 FD | 	call	#__system___float_div
17b04     FD 14 02 F6 | 	mov	arg02, result1
17b08     13 13 02 F6 | 	mov	arg01, local01
17b0c     08 1F B1 FD | 	call	#__system___float_add
17b10     10 4E 05 F1 | 	add	fp, #16
17b14     A7 FA 61 FC | 	wrlong	result1, fp
17b18                 | '     fpad=(1.0/65536.0)+padz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17b18     10 4E 85 F1 | 	sub	fp, #16
17b1c     1F FA 05 F4 | 	bitl	result1, #31
17b20     FD 12 02 F6 | 	mov	arg01, result1
17b24     89 41 1D FF 
17b28     6F 14 06 F6 | 	mov	arg02, ##981668463
17b2c     01 16 06 F6 | 	mov	arg03, #1
17b30     E8 26 B1 FD | 	call	#__system___float_cmp
17b34     00 FA 55 F2 | 	cmps	result1, #0 wc
17b38     10 4E 05 C1 |  if_b	add	fp, #16
17b3c     A7 00 68 CC |  if_b	wrlong	#0, fp
17b40     10 4E 85 C1 |  if_b	sub	fp, #16
17b44     10 4E 05 F1 | 	add	fp, #16
17b48     A7 26 02 FB | 	rdlong	local01, fp
17b4c     10 4E 85 F1 | 	sub	fp, #16
17b50     A7 26 62 FC | 	wrlong	local01, fp
17b54     08 4E 05 F1 | 	add	fp, #8
17b58     A7 3C 68 FC | 	wrlong	#30, fp
17b5c     08 4E 85 F1 | 	sub	fp, #8
17b60     A7 12 02 F6 | 	mov	arg01, fp
17b64     F4 5B BF FD | 	call	#_push
17b68                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17b68     1C 00 90 FD | 	jmp	#LR__1914
17b6c                 | LR__1912
17b6c     29 12 06 F6 | 	mov	arg01, #41
17b70     00 14 06 F6 | 	mov	arg02, #0
17b74     DC B9 B0 FD | 	call	#_printerror
17b78                 | '      printerror(41) : return
17b78     0C 00 90 FD | 	jmp	#LR__1914
17b7c                 | LR__1913
17b7c     29 12 06 F6 | 	mov	arg01, #41
17b80     00 14 06 F6 | 	mov	arg02, #0
17b84     CC B9 B0 FD | 	call	#_printerror
17b88                 | LR__1914
17b88     A7 F0 03 F6 | 	mov	ptra, fp
17b8c     B2 00 A0 FD | 	call	#popregs_
17b90                 | _do_padz_ret
17b90     2D 00 64 FD | 	ret
17b94                 | 
17b94                 | ' 
17b94                 | ' '-------------------- paper
17b94                 | ' 
17b94                 | ' sub do_paper
17b94                 | _do_paper
17b94     03 4A 05 F6 | 	mov	COUNT_, #3
17b98     A8 00 A0 FD | 	call	#pushregs_
17b9c     24 5B BF FD | 	call	#_pop
17ba0     FD 26 02 F6 | 	mov	local01, result1
17ba4     FE 28 02 F6 | 	mov	local02, result2
17ba8     FF 2A 02 F6 | 	mov	local03, result3
17bac                 | ' t1=pop() 
17bac                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
17bac     1E 2A 0E F2 | 	cmp	local03, #30 wz
17bb0     10 00 90 5D |  if_ne	jmp	#LR__1920
17bb4     13 13 02 F6 | 	mov	arg01, local01
17bb8     00 14 06 F6 | 	mov	arg02, #0
17bbc     F0 26 B1 FD | 	call	#__system___float_tointeger
17bc0     FD 26 02 F6 | 	mov	local01, result1
17bc4                 | LR__1920
17bc4                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
17bc4     1F 2A 0E F2 | 	cmp	local03, #31 wz
17bc8     18 00 90 5D |  if_ne	jmp	#LR__1921
17bcc     13 13 02 F6 | 	mov	arg01, local01
17bd0     20 2A B1 FD | 	call	#__system____builtin_atof
17bd4     FD 12 02 F6 | 	mov	arg01, result1
17bd8     00 14 06 F6 | 	mov	arg02, #0
17bdc     D0 26 B1 FD | 	call	#__system___float_tointeger
17be0     FD 26 02 F6 | 	mov	local01, result1
17be4                 | LR__1921
17be4     37 00 00 FF 
17be8     38 E4 05 F1 | 	add	objptr, ##28216
17bec     F2 26 62 FC | 	wrlong	local01, objptr
17bf0     04 E4 05 F1 | 	add	objptr, #4
17bf4     F2 12 02 FB | 	rdlong	arg01, objptr
17bf8                 | ' 
17bf8                 | ' write_color:=ff
17bf8     36 00 00 FF 
17bfc     FB E5 85 F1 | 	sub	objptr, ##28155
17c00     F2 12 62 FC | 	wrlong	arg01, objptr
17c04                 | ' write_background:=bb
17c04     04 E4 05 F1 | 	add	objptr, #4
17c08     F2 26 62 FC | 	wrlong	local01, objptr
17c0c     45 E4 85 F1 | 	sub	objptr, #69
17c10     A7 F0 03 F6 | 	mov	ptra, fp
17c14     B2 00 A0 FD | 	call	#popregs_
17c18                 | _do_paper_ret
17c18     2D 00 64 FD | 	ret
17c1c                 | 
17c1c                 | ' 
17c1c                 | ' '-------------------- peek
17c1c                 | ' 
17c1c                 | ' sub do_peek
17c1c                 | _do_peek
17c1c     00 4A 05 F6 | 	mov	COUNT_, #0
17c20     A8 00 A0 FD | 	call	#pushregs_
17c24     14 F0 07 F1 | 	add	ptra, #20
17c28     98 5A BF FD | 	call	#_pop
17c2c     A7 FA 61 FC | 	wrlong	result1, fp
17c30     04 4E 05 F1 | 	add	fp, #4
17c34     A7 FC 61 FC | 	wrlong	result2, fp
17c38     04 4E 05 F1 | 	add	fp, #4
17c3c     A7 FE 61 FC | 	wrlong	result3, fp
17c40     08 4E 85 F1 | 	sub	fp, #8
17c44     A7 12 02 F6 | 	mov	arg01, fp
17c48     5C 5C BF FD | 	call	#_converttoint
17c4c     0C 4E 05 F1 | 	add	fp, #12
17c50     A7 FA 61 FC | 	wrlong	result1, fp
17c54                 | ' 
17c54                 | ' t1=pop()
17c54                 | ' a=converttoint(t1)
17c54                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
17c54     0C 4E 85 F1 | 	sub	fp, #12
17c58     00 04 00 FF 
17c5c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
17c60     1C 00 90 3D |  if_ae	jmp	#LR__1930
17c64     0C 4E 05 F1 | 	add	fp, #12
17c68     A7 12 02 FB | 	rdlong	arg01, fp
17c6c     09 FB C1 FA | 	rdbyte	result1, arg01
17c70     04 4E 05 F1 | 	add	fp, #4
17c74     A7 FA 61 FC | 	wrlong	result1, fp
17c78     10 4E 85 F1 | 	sub	fp, #16
17c7c     20 00 90 FD | 	jmp	#LR__1931
17c80                 | LR__1930
17c80     0C 4E 05 F1 | 	add	fp, #12
17c84     A7 12 02 FB | 	rdlong	arg01, fp
17c88     0C 4E 85 F1 | 	sub	fp, #12
17c8c     3C BB B0 FD | 	call	#_pspeek
17c90     FD FA E1 F8 | 	getbyte	result1, result1, #0
17c94     10 4E 05 F1 | 	add	fp, #16
17c98     A7 FA 61 FC | 	wrlong	result1, fp
17c9c     10 4E 85 F1 | 	sub	fp, #16
17ca0                 | LR__1931
17ca0     08 4E 05 F1 | 	add	fp, #8
17ca4     A7 3A 68 FC | 	wrlong	#29, fp
17ca8     08 4E 05 F1 | 	add	fp, #8
17cac     A7 12 02 FB | 	rdlong	arg01, fp
17cb0     10 4E 85 F1 | 	sub	fp, #16
17cb4     A7 12 62 FC | 	wrlong	arg01, fp
17cb8     A7 12 02 F6 | 	mov	arg01, fp
17cbc     9C 5A BF FD | 	call	#_push
17cc0     A7 F0 03 F6 | 	mov	ptra, fp
17cc4     B2 00 A0 FD | 	call	#popregs_
17cc8                 | _do_peek_ret
17cc8     2D 00 64 FD | 	ret
17ccc                 | 
17ccc                 | ' 
17ccc                 | ' '-------------------- pinfloat
17ccc                 | ' 
17ccc                 | ' sub do_pinfloat
17ccc                 | _do_pinfloat
17ccc     00 4A 05 F6 | 	mov	COUNT_, #0
17cd0     A8 00 A0 FD | 	call	#pushregs_
17cd4     0C F0 07 F1 | 	add	ptra, #12
17cd8     E8 59 BF FD | 	call	#_pop
17cdc     A7 FA 61 FC | 	wrlong	result1, fp
17ce0     04 4E 05 F1 | 	add	fp, #4
17ce4     A7 FC 61 FC | 	wrlong	result2, fp
17ce8     04 4E 05 F1 | 	add	fp, #4
17cec     A7 FE 61 FC | 	wrlong	result3, fp
17cf0     08 4E 85 F1 | 	sub	fp, #8
17cf4     A7 12 02 F6 | 	mov	arg01, fp
17cf8     AC 5B BF FD | 	call	#_converttoint
17cfc     50 FA 61 FD | 	fltl	result1
17d00     A7 F0 03 F6 | 	mov	ptra, fp
17d04     B2 00 A0 FD | 	call	#popregs_
17d08                 | _do_pinfloat_ret
17d08     2D 00 64 FD | 	ret
17d0c                 | 
17d0c                 | ' 
17d0c                 | ' '-------------------- pinhi
17d0c                 | ' 
17d0c                 | ' sub do_pinhi
17d0c                 | _do_pinhi
17d0c     00 4A 05 F6 | 	mov	COUNT_, #0
17d10     A8 00 A0 FD | 	call	#pushregs_
17d14     0C F0 07 F1 | 	add	ptra, #12
17d18     A8 59 BF FD | 	call	#_pop
17d1c     A7 FA 61 FC | 	wrlong	result1, fp
17d20     04 4E 05 F1 | 	add	fp, #4
17d24     A7 FC 61 FC | 	wrlong	result2, fp
17d28     04 4E 05 F1 | 	add	fp, #4
17d2c     A7 FE 61 FC | 	wrlong	result3, fp
17d30     08 4E 85 F1 | 	sub	fp, #8
17d34     A7 12 02 F6 | 	mov	arg01, fp
17d38     6C 5B BF FD | 	call	#_converttoint
17d3c     59 FA 61 FD | 	drvh	result1
17d40     A7 F0 03 F6 | 	mov	ptra, fp
17d44     B2 00 A0 FD | 	call	#popregs_
17d48                 | _do_pinhi_ret
17d48     2D 00 64 FD | 	ret
17d4c                 | 
17d4c                 | ' 
17d4c                 | ' '-------------------- pinlo
17d4c                 | ' 
17d4c                 | ' sub do_pinlo
17d4c                 | _do_pinlo
17d4c     00 4A 05 F6 | 	mov	COUNT_, #0
17d50     A8 00 A0 FD | 	call	#pushregs_
17d54     0C F0 07 F1 | 	add	ptra, #12
17d58     68 59 BF FD | 	call	#_pop
17d5c     A7 FA 61 FC | 	wrlong	result1, fp
17d60     04 4E 05 F1 | 	add	fp, #4
17d64     A7 FC 61 FC | 	wrlong	result2, fp
17d68     04 4E 05 F1 | 	add	fp, #4
17d6c     A7 FE 61 FC | 	wrlong	result3, fp
17d70     08 4E 85 F1 | 	sub	fp, #8
17d74     A7 12 02 F6 | 	mov	arg01, fp
17d78     2C 5B BF FD | 	call	#_converttoint
17d7c     58 FA 61 FD | 	drvl	result1
17d80     A7 F0 03 F6 | 	mov	ptra, fp
17d84     B2 00 A0 FD | 	call	#popregs_
17d88                 | _do_pinlo_ret
17d88     2D 00 64 FD | 	ret
17d8c                 | 
17d8c                 | ' 
17d8c                 | ' '-------------------- pinread
17d8c                 | ' 
17d8c                 | ' sub do_pinread
17d8c                 | _do_pinread
17d8c     00 4A 05 F6 | 	mov	COUNT_, #0
17d90     A8 00 A0 FD | 	call	#pushregs_
17d94     0C F0 07 F1 | 	add	ptra, #12
17d98     28 59 BF FD | 	call	#_pop
17d9c     A7 FA 61 FC | 	wrlong	result1, fp
17da0     04 4E 05 F1 | 	add	fp, #4
17da4     A7 FC 61 FC | 	wrlong	result2, fp
17da8     04 4E 05 F1 | 	add	fp, #4
17dac     A7 FE 61 FC | 	wrlong	result3, fp
17db0     08 4E 85 F1 | 	sub	fp, #8
17db4     A7 12 02 F6 | 	mov	arg01, fp
17db8     EC 5A BF FD | 	call	#_converttoint
17dbc     FD 12 02 F6 | 	mov	arg01, result1
17dc0     20 12 CE F7 | 	test	arg01, #32 wz
17dc4     FF FB 01 56 |  if_ne	mov	result1, inb
17dc8     FE FB 01 A6 |  if_e	mov	result1, ina
17dcc     09 FB 41 F0 | 	shr	result1, arg01
17dd0     06 12 46 F0 | 	shr	arg01, #6
17dd4     09 FB 41 F7 | 	zerox	result1, arg01
17dd8     52 00 00 FF 
17ddc     10 E5 05 F1 | 	add	objptr, ##42256
17de0     F2 FA 61 FC | 	wrlong	result1, objptr
17de4     52 00 00 FF 
17de8     10 E5 85 F1 | 	sub	objptr, ##42256
17dec     08 4E 05 F1 | 	add	fp, #8
17df0     A7 3A 68 FC | 	wrlong	#29, fp
17df4     08 4E 85 F1 | 	sub	fp, #8
17df8     A7 08 68 FC | 	wrlong	#4, fp
17dfc     A7 12 02 F6 | 	mov	arg01, fp
17e00     58 59 BF FD | 	call	#_push
17e04     A7 F0 03 F6 | 	mov	ptra, fp
17e08     B2 00 A0 FD | 	call	#popregs_
17e0c                 | _do_pinread_ret
17e0c     2D 00 64 FD | 	ret
17e10                 | 
17e10                 | ' 
17e10                 | ' '-------------------- pinstart
17e10                 | ' 
17e10                 | ' sub do_pinstart
17e10                 | _do_pinstart
17e10     03 4A 05 F6 | 	mov	COUNT_, #3
17e14     A8 00 A0 FD | 	call	#pushregs_
17e18     30 F0 07 F1 | 	add	ptra, #48
17e1c     A4 58 BF FD | 	call	#_pop
17e20     FD 16 02 F6 | 	mov	arg03, result1
17e24     FE 14 02 F6 | 	mov	arg02, result2
17e28     FF 18 02 F6 | 	mov	arg04, result3
17e2c     A7 16 62 FC | 	wrlong	arg03, fp
17e30     04 4E 05 F1 | 	add	fp, #4
17e34     A7 14 62 FC | 	wrlong	arg02, fp
17e38     04 4E 05 F1 | 	add	fp, #4
17e3c     A7 18 62 FC | 	wrlong	arg04, fp
17e40     08 4E 85 F1 | 	sub	fp, #8
17e44     7C 58 BF FD | 	call	#_pop
17e48     FD 16 02 F6 | 	mov	arg03, result1
17e4c     FE 14 02 F6 | 	mov	arg02, result2
17e50     FF 18 02 F6 | 	mov	arg04, result3
17e54     0C 4E 05 F1 | 	add	fp, #12
17e58     A7 16 62 FC | 	wrlong	arg03, fp
17e5c     04 4E 05 F1 | 	add	fp, #4
17e60     A7 14 62 FC | 	wrlong	arg02, fp
17e64     04 4E 05 F1 | 	add	fp, #4
17e68     A7 18 62 FC | 	wrlong	arg04, fp
17e6c     14 4E 85 F1 | 	sub	fp, #20
17e70     50 58 BF FD | 	call	#_pop
17e74     FD 16 02 F6 | 	mov	arg03, result1
17e78     FE 14 02 F6 | 	mov	arg02, result2
17e7c     FF 18 02 F6 | 	mov	arg04, result3
17e80     18 4E 05 F1 | 	add	fp, #24
17e84     A7 16 62 FC | 	wrlong	arg03, fp
17e88     04 4E 05 F1 | 	add	fp, #4
17e8c     A7 14 62 FC | 	wrlong	arg02, fp
17e90     04 4E 05 F1 | 	add	fp, #4
17e94     A7 18 62 FC | 	wrlong	arg04, fp
17e98     20 4E 85 F1 | 	sub	fp, #32
17e9c     24 58 BF FD | 	call	#_pop
17ea0     FF 16 02 F6 | 	mov	arg03, result3
17ea4     24 4E 05 F1 | 	add	fp, #36
17ea8     A7 FA 61 FC | 	wrlong	result1, fp
17eac     04 4E 05 F1 | 	add	fp, #4
17eb0     A7 FC 61 FC | 	wrlong	result2, fp
17eb4     04 4E 05 F1 | 	add	fp, #4
17eb8     A7 16 62 FC | 	wrlong	arg03, fp
17ebc     08 4E 85 F1 | 	sub	fp, #8
17ec0     A7 12 02 F6 | 	mov	arg01, fp
17ec4     24 4E 85 F1 | 	sub	fp, #36
17ec8     DC 59 BF FD | 	call	#_converttoint
17ecc     FD 26 02 F6 | 	mov	local01, result1
17ed0     18 4E 05 F1 | 	add	fp, #24
17ed4     A7 12 02 F6 | 	mov	arg01, fp
17ed8     18 4E 85 F1 | 	sub	fp, #24
17edc     C8 59 BF FD | 	call	#_converttoint
17ee0     FD 28 02 F6 | 	mov	local02, result1
17ee4     0C 4E 05 F1 | 	add	fp, #12
17ee8     A7 12 02 F6 | 	mov	arg01, fp
17eec     0C 4E 85 F1 | 	sub	fp, #12
17ef0     B4 59 BF FD | 	call	#_converttoint
17ef4     FD 2A 02 F6 | 	mov	local03, result1
17ef8     A7 12 02 F6 | 	mov	arg01, fp
17efc     A8 59 BF FD | 	call	#_converttoint
17f00     40 26 62 FD | 	dirl	local01
17f04     13 29 02 FC | 	wrpin	local02, local01
17f08     13 2B 12 FC | 	wxpin	local03, local01
17f0c     13 FB 21 FC | 	wypin	result1, local01
17f10     41 26 62 FD | 	dirh	local01
17f14     A7 F0 03 F6 | 	mov	ptra, fp
17f18     B2 00 A0 FD | 	call	#popregs_
17f1c                 | _do_pinstart_ret
17f1c     2D 00 64 FD | 	ret
17f20                 | 
17f20                 | ' 
17f20                 | ' '-------------------- pintoggle
17f20                 | ' 
17f20                 | ' sub do_pintoggle
17f20                 | _do_pintoggle
17f20     00 4A 05 F6 | 	mov	COUNT_, #0
17f24     A8 00 A0 FD | 	call	#pushregs_
17f28     0C F0 07 F1 | 	add	ptra, #12
17f2c     94 57 BF FD | 	call	#_pop
17f30     A7 FA 61 FC | 	wrlong	result1, fp
17f34     04 4E 05 F1 | 	add	fp, #4
17f38     A7 FC 61 FC | 	wrlong	result2, fp
17f3c     04 4E 05 F1 | 	add	fp, #4
17f40     A7 FE 61 FC | 	wrlong	result3, fp
17f44     08 4E 85 F1 | 	sub	fp, #8
17f48     A7 12 02 F6 | 	mov	arg01, fp
17f4c     58 59 BF FD | 	call	#_converttoint
17f50     5F FA 61 FD | 	drvnot	result1
17f54     A7 F0 03 F6 | 	mov	ptra, fp
17f58     B2 00 A0 FD | 	call	#popregs_
17f5c                 | _do_pintoggle_ret
17f5c     2D 00 64 FD | 	ret
17f60                 | 
17f60                 | ' 
17f60                 | ' '-------------------- pinwrite
17f60                 | ' 
17f60                 | ' sub do_pinwrite
17f60                 | _do_pinwrite
17f60     01 4A 05 F6 | 	mov	COUNT_, #1
17f64     A8 00 A0 FD | 	call	#pushregs_
17f68     18 F0 07 F1 | 	add	ptra, #24
17f6c     54 57 BF FD | 	call	#_pop
17f70     FD 14 02 F6 | 	mov	arg02, result1
17f74     FE 12 02 F6 | 	mov	arg01, result2
17f78     FF 26 02 F6 | 	mov	local01, result3
17f7c     A7 14 62 FC | 	wrlong	arg02, fp
17f80     04 4E 05 F1 | 	add	fp, #4
17f84     A7 12 62 FC | 	wrlong	arg01, fp
17f88     04 4E 05 F1 | 	add	fp, #4
17f8c     A7 26 62 FC | 	wrlong	local01, fp
17f90     08 4E 85 F1 | 	sub	fp, #8
17f94     2C 57 BF FD | 	call	#_pop
17f98     FF 26 02 F6 | 	mov	local01, result3
17f9c     0C 4E 05 F1 | 	add	fp, #12
17fa0     A7 FA 61 FC | 	wrlong	result1, fp
17fa4     04 4E 05 F1 | 	add	fp, #4
17fa8     A7 FC 61 FC | 	wrlong	result2, fp
17fac     04 4E 05 F1 | 	add	fp, #4
17fb0     A7 26 62 FC | 	wrlong	local01, fp
17fb4     08 4E 85 F1 | 	sub	fp, #8
17fb8     A7 12 02 F6 | 	mov	arg01, fp
17fbc     0C 4E 85 F1 | 	sub	fp, #12
17fc0     E4 58 BF FD | 	call	#_converttoint
17fc4     FD 26 02 F6 | 	mov	local01, result1
17fc8     A7 12 02 F6 | 	mov	arg01, fp
17fcc     D8 58 BF FD | 	call	#_converttoint
17fd0     FD 14 02 F6 | 	mov	arg02, result1
17fd4     13 13 02 F6 | 	mov	arg01, local01
17fd8     48 F1 B0 FD | 	call	#__system___pinwrite
17fdc     A7 F0 03 F6 | 	mov	ptra, fp
17fe0     B2 00 A0 FD | 	call	#popregs_
17fe4                 | _do_pinwrite_ret
17fe4     2D 00 64 FD | 	ret
17fe8                 | 
17fe8                 | ' 
17fe8                 | ' '-------------------- play
17fe8                 | ' 
17fe8                 | ' sub do_play
17fe8                 | _do_play
17fe8     08 4A 05 F6 | 	mov	COUNT_, #8
17fec     A8 00 A0 FD | 	call	#pushregs_
17ff0     7C F0 07 F1 | 	add	ptra, #124
17ff4     68 4E 05 F1 | 	add	fp, #104
17ff8     77 CC A1 FF 
17ffc     A7 7C 6B FC | 	wrlong	##1134096318, fp
18000                 | ' speed_coeff=305.873
18000                 | ' 
18000                 | ' for i=0 to 8 : params(i)=-2.0 : next i
18000     64 4E 85 F1 | 	sub	fp, #100
18004     A7 00 68 FC | 	wrlong	#0, fp
18008     97 18 48 FB | 	callpa	#(@LR__1941-@LR__1940)>>2,fcache_load_ptr_
1800c                 | LR__1940
1800c     A7 16 02 FB | 	rdlong	arg03, fp
18010     02 16 66 F0 | 	shl	arg03, #2
18014     34 4E 05 F1 | 	add	fp, #52
18018     A7 16 02 F1 | 	add	arg03, fp
1801c     00 00 E0 FF 
18020     0B 01 68 FC | 	wrlong	##-1073741824, arg03
18024     34 4E 85 F1 | 	sub	fp, #52
18028     A7 26 02 FB | 	rdlong	local01, fp
1802c     01 26 06 F1 | 	add	local01, #1
18030     A7 26 62 FC | 	wrlong	local01, fp
18034     09 26 56 F2 | 	cmps	local01, #9 wc
18038     D0 FF 9F CD |  if_b	jmp	#LR__1940
1803c                 | LR__1941
1803c     04 4E 85 F1 | 	sub	fp, #4
18040     4A 00 00 FF 
18044     80 E4 05 F1 | 	add	objptr, ##38016
18048     F2 28 02 FB | 	rdlong	local02, objptr
1804c     14 2B 02 F6 | 	mov	local03, local02
18050     01 2A 66 F0 | 	shl	local03, #1
18054     14 2B 02 F1 | 	add	local03, local02
18058     02 2A 66 F0 | 	shl	local03, #2
1805c     03 00 00 FF 
18060     04 E4 85 F1 | 	sub	objptr, ##1540
18064     F2 2A 02 F1 | 	add	local03, objptr
18068     15 2D 02 FB | 	rdlong	local04, local03
1806c     A7 2C 62 FC | 	wrlong	local04, fp
18070                 | ' numpar=compiledline(lineptr_e).result.uresult
18070                 | ' for i=numpar to 1 step -1 
18070     04 4E 05 F1 | 	add	fp, #4
18074     A7 2C 62 FC | 	wrlong	local04, fp
18078     04 4E 85 F1 | 	sub	fp, #4
1807c     47 00 00 FF 
18080     7C E4 85 F1 | 	sub	objptr, ##36476
18084                 | LR__1942
18084     3C 56 BF FD | 	call	#_pop
18088     5C 4E 05 F1 | 	add	fp, #92
1808c     A7 FA 61 FC | 	wrlong	result1, fp
18090     04 4E 05 F1 | 	add	fp, #4
18094     A7 FC 61 FC | 	wrlong	result2, fp
18098     04 4E 05 F1 | 	add	fp, #4
1809c     A7 FE 61 FC | 	wrlong	result3, fp
180a0     60 4E 85 F1 | 	sub	fp, #96
180a4     A7 2A 02 FB | 	rdlong	local03, fp
180a8     01 2A 86 F1 | 	sub	local03, #1
180ac     02 2A 66 F0 | 	shl	local03, #2
180b0     34 4E 05 F1 | 	add	fp, #52
180b4     A7 2A 02 F1 | 	add	local03, fp
180b8     24 4E 05 F1 | 	add	fp, #36
180bc     A7 2E 02 F6 | 	mov	local05, fp
180c0     17 13 02 F6 | 	mov	arg01, local05
180c4     5C 4E 85 F1 | 	sub	fp, #92
180c8     98 58 BF FD | 	call	#_converttofloat
180cc     15 FB 61 FC | 	wrlong	result1, local03
180d0     04 4E 05 F1 | 	add	fp, #4
180d4     A7 26 02 FB | 	rdlong	local01, fp
180d8     01 26 86 F1 | 	sub	local01, #1
180dc     A7 26 62 FC | 	wrlong	local01, fp
180e0     04 4E 85 F1 | 	sub	fp, #4
180e4     01 26 56 F2 | 	cmps	local01, #1 wc
180e8     98 FF 9F 3D |  if_ae	jmp	#LR__1942
180ec                 | ' 
180ec                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
180ec     38 4E 05 F1 | 	add	fp, #56
180f0     A7 12 02 FB | 	rdlong	arg01, fp
180f4     38 4E 85 F1 | 	sub	fp, #56
180f8     00 14 06 F6 | 	mov	arg02, #0
180fc     01 16 06 F6 | 	mov	arg03, #1
18100     18 21 B1 FD | 	call	#__system___float_cmp
18104     00 FA 55 F2 | 	cmps	result1, #0 wc
18108     0C 4E 05 C1 |  if_b	add	fp, #12
1810c     A7 00 68 CC |  if_b	wrlong	#0, fp
18110     0C 4E 85 C1 |  if_b	sub	fp, #12
18114     2C 00 90 CD |  if_b	jmp	#LR__1943
18118     38 4E 05 F1 | 	add	fp, #56
1811c     A7 12 02 FB | 	rdlong	arg01, fp
18120     38 4E 85 F1 | 	sub	fp, #56
18124     01 14 06 F6 | 	mov	arg02, #1
18128     84 21 B1 FD | 	call	#__system___float_tointeger
1812c     FD 26 52 F6 | 	abs	local01, result1 wc
18130     07 26 06 F5 | 	and	local01, #7
18134     13 27 82 F6 | 	negc	local01, local01
18138     0C 4E 05 F1 | 	add	fp, #12
1813c     A7 26 62 FC | 	wrlong	local01, fp
18140     0C 4E 85 F1 | 	sub	fp, #12
18144                 | LR__1943
18144                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
18144     3C 4E 05 F1 | 	add	fp, #60
18148     A7 12 02 FB | 	rdlong	arg01, fp
1814c     3C 4E 85 F1 | 	sub	fp, #60
18150     00 14 06 F6 | 	mov	arg02, #0
18154     01 16 06 F6 | 	mov	arg03, #1
18158     C0 20 B1 FD | 	call	#__system___float_cmp
1815c     00 FA 55 F2 | 	cmps	result1, #0 wc
18160     40 00 90 3D |  if_ae	jmp	#LR__1944
18164     0C 4E 05 F1 | 	add	fp, #12
18168     A7 28 02 FB | 	rdlong	local02, fp
1816c     14 2B 02 F6 | 	mov	local03, local02
18170     01 2A 66 F0 | 	shl	local03, #1
18174     14 2B 02 F1 | 	add	local03, local02
18178     03 2A 66 F0 | 	shl	local03, #3
1817c     14 00 00 FF 
18180     38 E5 05 F1 | 	add	objptr, ##10552
18184     F2 2A 02 F1 | 	add	local03, objptr
18188     15 31 02 FB | 	rdlong	local06, local03
1818c     60 4E 05 F1 | 	add	fp, #96
18190     A7 30 62 FC | 	wrlong	local06, fp
18194     6C 4E 85 F1 | 	sub	fp, #108
18198     14 00 00 FF 
1819c     38 E5 85 F1 | 	sub	objptr, ##10552
181a0     44 00 90 FD | 	jmp	#LR__1945
181a4                 | LR__1944
181a4     3C 4E 05 F1 | 	add	fp, #60
181a8     A7 2C 02 FB | 	rdlong	local04, fp
181ac     30 4E 05 F1 | 	add	fp, #48
181b0     A7 2C 62 FC | 	wrlong	local04, fp
181b4     60 4E 85 F1 | 	sub	fp, #96
181b8     A7 28 02 FB | 	rdlong	local02, fp
181bc     14 2B 02 F6 | 	mov	local03, local02
181c0     01 2A 66 F0 | 	shl	local03, #1
181c4     14 2B 02 F1 | 	add	local03, local02
181c8     03 2A 66 F0 | 	shl	local03, #3
181cc     14 00 00 FF 
181d0     38 E5 05 F1 | 	add	objptr, ##10552
181d4     F2 2A 02 F1 | 	add	local03, objptr
181d8     0C 4E 85 F1 | 	sub	fp, #12
181dc     15 2D 62 FC | 	wrlong	local04, local03
181e0     14 00 00 FF 
181e4     38 E5 85 F1 | 	sub	objptr, ##10552
181e8                 | LR__1945
181e8                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
181e8     40 4E 05 F1 | 	add	fp, #64
181ec     A7 12 02 FB | 	rdlong	arg01, fp
181f0     40 4E 85 F1 | 	sub	fp, #64
181f4     00 14 06 F6 | 	mov	arg02, #0
181f8     01 16 06 F6 | 	mov	arg03, #1
181fc     1C 20 B1 FD | 	call	#__system___float_cmp
18200     00 FA 55 F2 | 	cmps	result1, #0 wc
18204     24 00 90 CD |  if_b	jmp	#LR__1946
18208     40 4E 05 F1 | 	add	fp, #64
1820c     A7 12 02 FB | 	rdlong	arg01, fp
18210     40 4E 85 F1 | 	sub	fp, #64
18214     20 0E 23 FF 
18218     00 14 06 F6 | 	mov	arg02, ##1176256512
1821c     01 16 66 F6 | 	neg	arg03, #1
18220     F8 1F B1 FD | 	call	#__system___float_cmp
18224     01 FA 55 F2 | 	cmps	result1, #1 wc
18228     48 00 90 CD |  if_b	jmp	#LR__1947
1822c                 | LR__1946
1822c     0C 4E 05 F1 | 	add	fp, #12
18230     A7 2A 02 FB | 	rdlong	local03, fp
18234     15 33 02 F6 | 	mov	local07, local03
18238     01 32 66 F0 | 	shl	local07, #1
1823c     15 33 02 F1 | 	add	local07, local03
18240     03 32 66 F0 | 	shl	local07, #3
18244     14 00 00 FF 
18248     38 E5 05 F1 | 	add	objptr, ##10552
1824c     F2 32 02 F1 | 	add	local07, objptr
18250     06 32 06 F1 | 	add	local07, #6
18254     19 2F E2 FA | 	rdword	local05, local07
18258     17 2D 32 F9 | 	getword	local04, local05, #0
1825c     1C 4E 05 F1 | 	add	fp, #28
18260     A7 2C 62 FC | 	wrlong	local04, fp
18264     28 4E 85 F1 | 	sub	fp, #40
18268     14 00 00 FF 
1826c     38 E5 85 F1 | 	sub	objptr, ##10552
18270     54 00 90 FD | 	jmp	#LR__1948
18274                 | LR__1947
18274     40 4E 05 F1 | 	add	fp, #64
18278     A7 12 02 FB | 	rdlong	arg01, fp
1827c     40 4E 85 F1 | 	sub	fp, #64
18280     01 14 06 F6 | 	mov	arg02, #1
18284     28 20 B1 FD | 	call	#__system___float_tointeger
18288     28 4E 05 F1 | 	add	fp, #40
1828c     A7 FA 61 FC | 	wrlong	result1, fp
18290     1C 4E 85 F1 | 	sub	fp, #28
18294     A7 28 02 FB | 	rdlong	local02, fp
18298     14 2B 02 F6 | 	mov	local03, local02
1829c     01 2A 66 F0 | 	shl	local03, #1
182a0     14 2B 02 F1 | 	add	local03, local02
182a4     03 2A 66 F0 | 	shl	local03, #3
182a8     14 00 00 FF 
182ac     38 E5 05 F1 | 	add	objptr, ##10552
182b0     F2 2A 02 F1 | 	add	local03, objptr
182b4     0C 4E 85 F1 | 	sub	fp, #12
182b8     06 2A 06 F1 | 	add	local03, #6
182bc     15 FB 51 FC | 	wrword	result1, local03
182c0     14 00 00 FF 
182c4     38 E5 85 F1 | 	sub	objptr, ##10552
182c8                 | LR__1948
182c8                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
182c8     44 4E 05 F1 | 	add	fp, #68
182cc     A7 12 02 FB | 	rdlong	arg01, fp
182d0     44 4E 85 F1 | 	sub	fp, #68
182d4     00 14 06 F6 | 	mov	arg02, #0
182d8     01 16 06 F6 | 	mov	arg03, #1
182dc     3C 1F B1 FD | 	call	#__system___float_cmp
182e0     00 FA 55 F2 | 	cmps	result1, #0 wc
182e4     24 00 90 CD |  if_b	jmp	#LR__1949
182e8     44 4E 05 F1 | 	add	fp, #68
182ec     A7 12 02 FB | 	rdlong	arg01, fp
182f0     44 4E 85 F1 | 	sub	fp, #68
182f4     89 C1 20 FF 
182f8     6F 14 06 F6 | 	mov	arg02, ##1099108975
182fc     01 16 66 F6 | 	neg	arg03, #1
18300     18 1F B1 FD | 	call	#__system___float_cmp
18304     01 FA 55 F2 | 	cmps	result1, #1 wc
18308     44 00 90 CD |  if_b	jmp	#LR__1950
1830c                 | LR__1949
1830c     0C 4E 05 F1 | 	add	fp, #12
18310     A7 28 02 FB | 	rdlong	local02, fp
18314     14 2B 02 F6 | 	mov	local03, local02
18318     01 2A 66 F0 | 	shl	local03, #1
1831c     14 2B 02 F1 | 	add	local03, local02
18320     03 2A 66 F0 | 	shl	local03, #3
18324     14 00 00 FF 
18328     38 E5 05 F1 | 	add	objptr, ##10552
1832c     F2 2A 02 F1 | 	add	local03, objptr
18330     0C 2A 06 F1 | 	add	local03, #12
18334     15 31 02 FB | 	rdlong	local06, local03
18338     68 4E 05 F1 | 	add	fp, #104
1833c     A7 30 62 FC | 	wrlong	local06, fp
18340     74 4E 85 F1 | 	sub	fp, #116
18344     14 00 00 FF 
18348     38 E5 85 F1 | 	sub	objptr, ##10552
1834c     48 00 90 FD | 	jmp	#LR__1951
18350                 | LR__1950
18350     44 4E 05 F1 | 	add	fp, #68
18354     A7 2C 02 FB | 	rdlong	local04, fp
18358     30 4E 05 F1 | 	add	fp, #48
1835c     A7 2C 62 FC | 	wrlong	local04, fp
18360     68 4E 85 F1 | 	sub	fp, #104
18364     A7 28 02 FB | 	rdlong	local02, fp
18368     14 2B 02 F6 | 	mov	local03, local02
1836c     01 2A 66 F0 | 	shl	local03, #1
18370     14 2B 02 F1 | 	add	local03, local02
18374     03 2A 66 F0 | 	shl	local03, #3
18378     14 00 00 FF 
1837c     38 E5 05 F1 | 	add	objptr, ##10552
18380     F2 2A 02 F1 | 	add	local03, objptr
18384     0C 4E 85 F1 | 	sub	fp, #12
18388     0C 2A 06 F1 | 	add	local03, #12
1838c     15 2D 62 FC | 	wrlong	local04, local03
18390     14 00 00 FF 
18394     38 E5 85 F1 | 	sub	objptr, ##10552
18398                 | LR__1951
18398                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
18398     48 4E 05 F1 | 	add	fp, #72
1839c     A7 12 02 FB | 	rdlong	arg01, fp
183a0     48 4E 85 F1 | 	sub	fp, #72
183a4     00 14 06 F6 | 	mov	arg02, #0
183a8     01 16 06 F6 | 	mov	arg03, #1
183ac     6C 1E B1 FD | 	call	#__system___float_cmp
183b0     00 FA 55 F2 | 	cmps	result1, #0 wc
183b4     24 00 90 CD |  if_b	jmp	#LR__1952
183b8     48 4E 05 F1 | 	add	fp, #72
183bc     A7 12 02 FB | 	rdlong	arg01, fp
183c0     48 4E 85 F1 | 	sub	fp, #72
183c4     00 00 21 FF 
183c8     00 14 06 F6 | 	mov	arg02, ##1107296256
183cc     01 16 66 F6 | 	neg	arg03, #1
183d0     48 1E B1 FD | 	call	#__system___float_cmp
183d4     01 FA 55 F2 | 	cmps	result1, #1 wc
183d8     48 00 90 CD |  if_b	jmp	#LR__1953
183dc                 | LR__1952
183dc     0C 4E 05 F1 | 	add	fp, #12
183e0     A7 2A 02 FB | 	rdlong	local03, fp
183e4     15 33 02 F6 | 	mov	local07, local03
183e8     01 32 66 F0 | 	shl	local07, #1
183ec     15 33 02 F1 | 	add	local07, local03
183f0     03 32 66 F0 | 	shl	local07, #3
183f4     14 00 00 FF 
183f8     38 E5 05 F1 | 	add	objptr, ##10552
183fc     F2 32 02 F1 | 	add	local07, objptr
18400     04 32 06 F1 | 	add	local07, #4
18404     19 2F C2 FA | 	rdbyte	local05, local07
18408     17 2D E2 F8 | 	getbyte	local04, local05, #0
1840c     14 4E 05 F1 | 	add	fp, #20
18410     A7 2C 62 FC | 	wrlong	local04, fp
18414     20 4E 85 F1 | 	sub	fp, #32
18418     14 00 00 FF 
1841c     38 E5 85 F1 | 	sub	objptr, ##10552
18420     54 00 90 FD | 	jmp	#LR__1954
18424                 | LR__1953
18424     48 4E 05 F1 | 	add	fp, #72
18428     A7 12 02 FB | 	rdlong	arg01, fp
1842c     48 4E 85 F1 | 	sub	fp, #72
18430     01 14 06 F6 | 	mov	arg02, #1
18434     78 1E B1 FD | 	call	#__system___float_tointeger
18438     20 4E 05 F1 | 	add	fp, #32
1843c     A7 FA 61 FC | 	wrlong	result1, fp
18440     14 4E 85 F1 | 	sub	fp, #20
18444     A7 28 02 FB | 	rdlong	local02, fp
18448     14 2B 02 F6 | 	mov	local03, local02
1844c     01 2A 66 F0 | 	shl	local03, #1
18450     14 2B 02 F1 | 	add	local03, local02
18454     03 2A 66 F0 | 	shl	local03, #3
18458     14 00 00 FF 
1845c     38 E5 05 F1 | 	add	objptr, ##10552
18460     F2 2A 02 F1 | 	add	local03, objptr
18464     0C 4E 85 F1 | 	sub	fp, #12
18468     04 2A 06 F1 | 	add	local03, #4
1846c     15 FB 41 FC | 	wrbyte	result1, local03
18470     14 00 00 FF 
18474     38 E5 85 F1 | 	sub	objptr, ##10552
18478                 | LR__1954
18478                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
18478     4C 4E 05 F1 | 	add	fp, #76
1847c     A7 12 02 FB | 	rdlong	arg01, fp
18480     4C 4E 85 F1 | 	sub	fp, #76
18484     00 14 06 F6 | 	mov	arg02, #0
18488     01 16 06 F6 | 	mov	arg03, #1
1848c     8C 1D B1 FD | 	call	#__system___float_cmp
18490     00 FA 55 F2 | 	cmps	result1, #0 wc
18494     24 00 90 CD |  if_b	jmp	#LR__1955
18498     4C 4E 05 F1 | 	add	fp, #76
1849c     A7 12 02 FB | 	rdlong	arg01, fp
184a0     4C 4E 85 F1 | 	sub	fp, #76
184a4     00 80 20 FF 
184a8     00 14 06 F6 | 	mov	arg02, ##1090519040
184ac     01 16 66 F6 | 	neg	arg03, #1
184b0     68 1D B1 FD | 	call	#__system___float_cmp
184b4     01 FA 55 F2 | 	cmps	result1, #1 wc
184b8     48 00 90 CD |  if_b	jmp	#LR__1956
184bc                 | LR__1955
184bc     0C 4E 05 F1 | 	add	fp, #12
184c0     A7 2A 02 FB | 	rdlong	local03, fp
184c4     15 33 02 F6 | 	mov	local07, local03
184c8     01 32 66 F0 | 	shl	local07, #1
184cc     15 33 02 F1 | 	add	local07, local03
184d0     03 32 66 F0 | 	shl	local07, #3
184d4     14 00 00 FF 
184d8     38 E5 05 F1 | 	add	objptr, ##10552
184dc     F2 32 02 F1 | 	add	local07, objptr
184e0     05 32 06 F1 | 	add	local07, #5
184e4     19 2F C2 FA | 	rdbyte	local05, local07
184e8     17 2D E2 F8 | 	getbyte	local04, local05, #0
184ec     18 4E 05 F1 | 	add	fp, #24
184f0     A7 2C 62 FC | 	wrlong	local04, fp
184f4     24 4E 85 F1 | 	sub	fp, #36
184f8     14 00 00 FF 
184fc     38 E5 85 F1 | 	sub	objptr, ##10552
18500     54 00 90 FD | 	jmp	#LR__1957
18504                 | LR__1956
18504     4C 4E 05 F1 | 	add	fp, #76
18508     A7 12 02 FB | 	rdlong	arg01, fp
1850c     4C 4E 85 F1 | 	sub	fp, #76
18510     01 14 06 F6 | 	mov	arg02, #1
18514     98 1D B1 FD | 	call	#__system___float_tointeger
18518     24 4E 05 F1 | 	add	fp, #36
1851c     A7 FA 61 FC | 	wrlong	result1, fp
18520     18 4E 85 F1 | 	sub	fp, #24
18524     A7 28 02 FB | 	rdlong	local02, fp
18528     14 2B 02 F6 | 	mov	local03, local02
1852c     01 2A 66 F0 | 	shl	local03, #1
18530     14 2B 02 F1 | 	add	local03, local02
18534     03 2A 66 F0 | 	shl	local03, #3
18538     14 00 00 FF 
1853c     38 E5 05 F1 | 	add	objptr, ##10552
18540     F2 2A 02 F1 | 	add	local03, objptr
18544     0C 4E 85 F1 | 	sub	fp, #12
18548     05 2A 06 F1 | 	add	local03, #5
1854c     15 FB 41 FC | 	wrbyte	result1, local03
18550     14 00 00 FF 
18554     38 E5 85 F1 | 	sub	objptr, ##10552
18558                 | LR__1957
18558                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
18558     50 4E 05 F1 | 	add	fp, #80
1855c     A7 12 02 FB | 	rdlong	arg01, fp
18560     50 4E 85 F1 | 	sub	fp, #80
18564     00 14 06 F6 | 	mov	arg02, #0
18568     01 16 06 F6 | 	mov	arg03, #1
1856c     AC 1C B1 FD | 	call	#__system___float_cmp
18570     00 FA 55 F2 | 	cmps	result1, #0 wc
18574     24 00 90 CD |  if_b	jmp	#LR__1958
18578     50 4E 05 F1 | 	add	fp, #80
1857c     A7 12 02 FB | 	rdlong	arg01, fp
18580     50 4E 85 F1 | 	sub	fp, #80
18584     00 3D 22 FF 
18588     00 14 06 F6 | 	mov	arg02, ##1148846080
1858c     01 16 66 F6 | 	neg	arg03, #1
18590     88 1C B1 FD | 	call	#__system___float_cmp
18594     01 FA 55 F2 | 	cmps	result1, #1 wc
18598     44 00 90 CD |  if_b	jmp	#LR__1959
1859c                 | LR__1958
1859c     0C 4E 05 F1 | 	add	fp, #12
185a0     A7 28 02 FB | 	rdlong	local02, fp
185a4     14 2B 02 F6 | 	mov	local03, local02
185a8     01 2A 66 F0 | 	shl	local03, #1
185ac     14 2B 02 F1 | 	add	local03, local02
185b0     03 2A 66 F0 | 	shl	local03, #3
185b4     14 00 00 FF 
185b8     38 E5 05 F1 | 	add	objptr, ##10552
185bc     F2 2A 02 F1 | 	add	local03, objptr
185c0     08 2A 06 F1 | 	add	local03, #8
185c4     15 31 02 FB | 	rdlong	local06, local03
185c8     6C 4E 05 F1 | 	add	fp, #108
185cc     A7 30 62 FC | 	wrlong	local06, fp
185d0     78 4E 85 F1 | 	sub	fp, #120
185d4     14 00 00 FF 
185d8     38 E5 85 F1 | 	sub	objptr, ##10552
185dc     48 00 90 FD | 	jmp	#LR__1960
185e0                 | LR__1959
185e0     50 4E 05 F1 | 	add	fp, #80
185e4     A7 30 02 FB | 	rdlong	local06, fp
185e8     28 4E 05 F1 | 	add	fp, #40
185ec     A7 30 62 FC | 	wrlong	local06, fp
185f0     6C 4E 85 F1 | 	sub	fp, #108
185f4     A7 28 02 FB | 	rdlong	local02, fp
185f8     14 2B 02 F6 | 	mov	local03, local02
185fc     01 2A 66 F0 | 	shl	local03, #1
18600     14 2B 02 F1 | 	add	local03, local02
18604     03 2A 66 F0 | 	shl	local03, #3
18608     14 00 00 FF 
1860c     38 E5 05 F1 | 	add	objptr, ##10552
18610     F2 2A 02 F1 | 	add	local03, objptr
18614     0C 4E 85 F1 | 	sub	fp, #12
18618     08 2A 06 F1 | 	add	local03, #8
1861c     15 31 62 FC | 	wrlong	local06, local03
18620     14 00 00 FF 
18624     38 E5 85 F1 | 	sub	objptr, ##10552
18628                 | LR__1960
18628                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
18628     54 4E 05 F1 | 	add	fp, #84
1862c     A7 12 02 FB | 	rdlong	arg01, fp
18630     54 4E 85 F1 | 	sub	fp, #84
18634     00 C0 5F FF 
18638     00 14 06 F6 | 	mov	arg02, ##-1082130432
1863c     01 16 06 F6 | 	mov	arg03, #1
18640     D8 1B B1 FD | 	call	#__system___float_cmp
18644     00 FA 55 F2 | 	cmps	result1, #0 wc
18648     24 00 90 CD |  if_b	jmp	#LR__1961
1864c     54 4E 05 F1 | 	add	fp, #84
18650     A7 12 02 FB | 	rdlong	arg01, fp
18654     54 4E 85 F1 | 	sub	fp, #84
18658     00 C0 1F FF 
1865c     00 14 06 F6 | 	mov	arg02, ##1065353216
18660     01 16 66 F6 | 	neg	arg03, #1
18664     B4 1B B1 FD | 	call	#__system___float_cmp
18668     01 FA 55 F2 | 	cmps	result1, #1 wc
1866c     44 00 90 CD |  if_b	jmp	#LR__1962
18670                 | LR__1961
18670     0C 4E 05 F1 | 	add	fp, #12
18674     A7 28 02 FB | 	rdlong	local02, fp
18678     14 2B 02 F6 | 	mov	local03, local02
1867c     01 2A 66 F0 | 	shl	local03, #1
18680     14 2B 02 F1 | 	add	local03, local02
18684     03 2A 66 F0 | 	shl	local03, #3
18688     14 00 00 FF 
1868c     38 E5 05 F1 | 	add	objptr, ##10552
18690     F2 2A 02 F1 | 	add	local03, objptr
18694     10 2A 06 F1 | 	add	local03, #16
18698     15 31 02 FB | 	rdlong	local06, local03
1869c     64 4E 05 F1 | 	add	fp, #100
186a0     A7 30 62 FC | 	wrlong	local06, fp
186a4     70 4E 85 F1 | 	sub	fp, #112
186a8     14 00 00 FF 
186ac     38 E5 85 F1 | 	sub	objptr, ##10552
186b0     48 00 90 FD | 	jmp	#LR__1963
186b4                 | LR__1962
186b4     54 4E 05 F1 | 	add	fp, #84
186b8     A7 30 02 FB | 	rdlong	local06, fp
186bc     1C 4E 05 F1 | 	add	fp, #28
186c0     A7 30 62 FC | 	wrlong	local06, fp
186c4     64 4E 85 F1 | 	sub	fp, #100
186c8     A7 28 02 FB | 	rdlong	local02, fp
186cc     14 2B 02 F6 | 	mov	local03, local02
186d0     01 2A 66 F0 | 	shl	local03, #1
186d4     14 2B 02 F1 | 	add	local03, local02
186d8     03 2A 66 F0 | 	shl	local03, #3
186dc     14 00 00 FF 
186e0     38 E5 05 F1 | 	add	objptr, ##10552
186e4     F2 2A 02 F1 | 	add	local03, objptr
186e8     0C 4E 85 F1 | 	sub	fp, #12
186ec     10 2A 06 F1 | 	add	local03, #16
186f0     15 31 62 FC | 	wrlong	local06, local03
186f4     14 00 00 FF 
186f8     38 E5 85 F1 | 	sub	objptr, ##10552
186fc                 | LR__1963
186fc                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
186fc     58 4E 05 F1 | 	add	fp, #88
18700     A7 12 02 FB | 	rdlong	arg01, fp
18704     58 4E 85 F1 | 	sub	fp, #88
18708     00 14 06 F6 | 	mov	arg02, #0
1870c     01 16 06 F6 | 	mov	arg03, #1
18710     08 1B B1 FD | 	call	#__system___float_cmp
18714     00 FA 55 F2 | 	cmps	result1, #0 wc
18718     24 00 90 CD |  if_b	jmp	#LR__1964
1871c     58 4E 05 F1 | 	add	fp, #88
18720     A7 12 02 FB | 	rdlong	arg01, fp
18724     58 4E 85 F1 | 	sub	fp, #88
18728     80 BF 21 FF 
1872c     00 14 06 F6 | 	mov	arg02, ##1132396544
18730     01 16 66 F6 | 	neg	arg03, #1
18734     E4 1A B1 FD | 	call	#__system___float_cmp
18738     01 FA 55 F2 | 	cmps	result1, #1 wc
1873c     44 00 90 CD |  if_b	jmp	#LR__1965
18740                 | LR__1964
18740     0C 4E 05 F1 | 	add	fp, #12
18744     A7 2A 02 FB | 	rdlong	local03, fp
18748     15 33 02 F6 | 	mov	local07, local03
1874c     01 32 66 F0 | 	shl	local07, #1
18750     15 33 02 F1 | 	add	local07, local03
18754     03 32 66 F0 | 	shl	local07, #3
18758     14 00 00 FF 
1875c     38 E5 05 F1 | 	add	objptr, ##10552
18760     F2 32 02 F1 | 	add	local07, objptr
18764     14 32 06 F1 | 	add	local07, #20
18768     19 2D E2 FA | 	rdword	local04, local07
1876c     20 4E 05 F1 | 	add	fp, #32
18770     A7 2C 62 FC | 	wrlong	local04, fp
18774     2C 4E 85 F1 | 	sub	fp, #44
18778     14 00 00 FF 
1877c     38 E5 85 F1 | 	sub	objptr, ##10552
18780     54 00 90 FD | 	jmp	#LR__1966
18784                 | LR__1965
18784     58 4E 05 F1 | 	add	fp, #88
18788     A7 12 02 FB | 	rdlong	arg01, fp
1878c     58 4E 85 F1 | 	sub	fp, #88
18790     01 14 06 F6 | 	mov	arg02, #1
18794     18 1B B1 FD | 	call	#__system___float_tointeger
18798     2C 4E 05 F1 | 	add	fp, #44
1879c     A7 FA 61 FC | 	wrlong	result1, fp
187a0     20 4E 85 F1 | 	sub	fp, #32
187a4     A7 28 02 FB | 	rdlong	local02, fp
187a8     14 2B 02 F6 | 	mov	local03, local02
187ac     01 2A 66 F0 | 	shl	local03, #1
187b0     14 2B 02 F1 | 	add	local03, local02
187b4     03 2A 66 F0 | 	shl	local03, #3
187b8     14 00 00 FF 
187bc     38 E5 05 F1 | 	add	objptr, ##10552
187c0     F2 2A 02 F1 | 	add	local03, objptr
187c4     0C 4E 85 F1 | 	sub	fp, #12
187c8     14 2A 06 F1 | 	add	local03, #20
187cc     15 FB 51 FC | 	wrword	result1, local03
187d0     14 00 00 FF 
187d4     38 E5 85 F1 | 	sub	objptr, ##10552
187d8                 | LR__1966
187d8     6C 4E 05 F1 | 	add	fp, #108
187dc     A7 14 02 FB | 	rdlong	arg02, fp
187e0     6C 4E 85 F1 | 	sub	fp, #108
187e4     FC 16 20 FF 
187e8     54 12 06 F6 | 	mov	arg01, ##1076754516
187ec     C8 25 B1 FD | 	call	#__system____builtin_logbase
187f0     FD 2C 02 F6 | 	mov	local04, result1
187f4     1E 14 C6 F9 | 	decod	arg02, #30
187f8     FC 16 20 FF 
187fc     54 12 06 F6 | 	mov	arg01, ##1076754516
18800     B4 25 B1 FD | 	call	#__system____builtin_logbase
18804     FD 14 02 F6 | 	mov	arg02, result1
18808     16 13 02 F6 | 	mov	arg01, local04
1880c     DC 17 B1 FD | 	call	#__system___float_div
18810     FD 12 02 F6 | 	mov	arg01, result1
18814     00 14 06 F6 | 	mov	arg02, #0
18818     94 1A B1 FD | 	call	#__system___float_tointeger
1881c     30 4E 05 F1 | 	add	fp, #48
18820     A7 FA 61 FC | 	wrlong	result1, fp
18824     1E 2C C6 F9 | 	decod	local04, #30
18828     FD 12 02 F6 | 	mov	arg01, result1
1882c     30 4E 85 F1 | 	sub	fp, #48
18830     05 12 06 F1 | 	add	arg01, #5
18834     09 13 52 F6 | 	abs	arg01, arg01 wc
18838     1F 34 C6 C9 |  if_b	decod	local08, #31
1883c     00 34 06 36 |  if_ae	mov	local08, #0
18840     A0 11 B1 FD | 	call	#__system___float_fromuns
18844     1A FB 61 F5 | 	xor	result1, local08
18848     FD 14 02 F6 | 	mov	arg02, result1
1884c     16 13 02 F6 | 	mov	arg01, local04
18850     9C 24 B1 FD | 	call	#__system____builtin_powf
18854     FD 12 02 F6 | 	mov	arg01, result1
18858     01 14 06 F6 | 	mov	arg02, #1
1885c     50 1A B1 FD | 	call	#__system___float_tointeger
18860     10 4E 05 F1 | 	add	fp, #16
18864     A7 FA 61 FC | 	wrlong	result1, fp
18868                 | ' skip=round(2^(lfreq+5))
18868                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
18868     10 4E 85 F1 | 	sub	fp, #16
1886c     40 00 00 FF 
18870     01 FA 55 F2 | 	cmps	result1, ##32769 wc
18874     30 00 90 CD |  if_b	jmp	#LR__1967
18878     10 4E 05 F1 | 	add	fp, #16
1887c     A7 26 02 FB | 	rdlong	local01, fp
18880     13 2D 52 F6 | 	abs	local04, local01 wc
18884     0F 2C 46 F0 | 	shr	local04, #15
18888     16 2D 82 F6 | 	negc	local04, local04
1888c     0C 4E 85 F1 | 	sub	fp, #12
18890     A7 2C 62 FC | 	wrlong	local04, fp
18894     0C 4E 05 F1 | 	add	fp, #12
18898     40 00 80 FF 
1889c     A7 00 68 FC | 	wrlong	##32768, fp
188a0     10 4E 85 F1 | 	sub	fp, #16
188a4     0C 00 90 FD | 	jmp	#LR__1968
188a8                 | LR__1967
188a8     04 4E 05 F1 | 	add	fp, #4
188ac     A7 02 68 FC | 	wrlong	#1, fp
188b0     04 4E 85 F1 | 	sub	fp, #4
188b4                 | LR__1968
188b4     6C 4E 05 F1 | 	add	fp, #108
188b8     A7 14 02 FB | 	rdlong	arg02, fp
188bc     6C 4E 85 F1 | 	sub	fp, #108
188c0     3E 2C 25 FF 
188c4     3C 12 06 F6 | 	mov	arg01, ##1247312956
188c8     20 17 B1 FD | 	call	#__system___float_div
188cc     FD 2C 02 F6 | 	mov	local04, result1
188d0     04 4E 05 F1 | 	add	fp, #4
188d4     A7 12 02 FB | 	rdlong	arg01, fp
188d8     04 4E 85 F1 | 	sub	fp, #4
188dc     09 13 52 F6 | 	abs	arg01, arg01 wc
188e0     1F 34 C6 C9 |  if_b	decod	local08, #31
188e4     00 34 06 36 |  if_ae	mov	local08, #0
188e8     F8 10 B1 FD | 	call	#__system___float_fromuns
188ec     1A FB 61 F5 | 	xor	result1, local08
188f0     FD 26 02 F6 | 	mov	local01, result1
188f4     1E 28 C6 F9 | 	decod	local02, #30
188f8     0D 12 06 F6 | 	mov	arg01, #13
188fc     30 4E 05 F1 | 	add	fp, #48
18900     A7 30 02 FB | 	rdlong	local06, fp
18904     30 4E 85 F1 | 	sub	fp, #48
18908     18 13 82 F1 | 	sub	arg01, local06
1890c     09 13 52 F6 | 	abs	arg01, arg01 wc
18910     1F 34 C6 C9 |  if_b	decod	local08, #31
18914     00 34 06 36 |  if_ae	mov	local08, #0
18918     C8 10 B1 FD | 	call	#__system___float_fromuns
1891c     1A FB 61 F5 | 	xor	result1, local08
18920     FD 14 02 F6 | 	mov	arg02, result1
18924     14 13 02 F6 | 	mov	arg01, local02
18928     C4 23 B1 FD | 	call	#__system____builtin_powf
1892c     FD 14 02 F6 | 	mov	arg02, result1
18930     13 13 02 F6 | 	mov	arg01, local01
18934     B0 14 B1 FD | 	call	#__system___float_mul
18938     FD 14 02 F6 | 	mov	arg02, result1
1893c     16 13 02 F6 | 	mov	arg01, local04
18940     A8 16 B1 FD | 	call	#__system___float_div
18944     FD 12 02 F6 | 	mov	arg01, result1
18948     01 14 06 F6 | 	mov	arg02, #1
1894c     60 19 B1 FD | 	call	#__system___float_tointeger
18950     34 4E 05 F1 | 	add	fp, #52
18954     A7 FA 61 FC | 	wrlong	result1, fp
18958     34 4E 05 F1 | 	add	fp, #52
1895c     A7 12 02 FB | 	rdlong	arg01, fp
18960     10 4E 05 F1 | 	add	fp, #16
18964     A7 14 02 FB | 	rdlong	arg02, fp
18968     78 4E 85 F1 | 	sub	fp, #120
1896c     7C 16 B1 FD | 	call	#__system___float_div
18970     FD 12 02 F6 | 	mov	arg01, result1
18974     01 14 06 F6 | 	mov	arg02, #1
18978     34 19 B1 FD | 	call	#__system___float_tointeger
1897c     FD 2C 02 F6 | 	mov	local04, result1
18980     14 4E 05 F1 | 	add	fp, #20
18984     A7 2C 62 FC | 	wrlong	local04, fp
18988     5C 4E 05 F1 | 	add	fp, #92
1898c     A7 14 02 FB | 	rdlong	arg02, fp
18990     70 4E 85 F1 | 	sub	fp, #112
18994     00 00 23 FF 
18998     00 12 06 F6 | 	mov	arg01, ##1174405120
1899c     48 14 B1 FD | 	call	#__system___float_mul
189a0     FD 12 02 F6 | 	mov	arg01, result1
189a4     01 14 06 F6 | 	mov	arg02, #1
189a8     04 19 B1 FD | 	call	#__system___float_tointeger
189ac     0D 2C C6 F9 | 	decod	local04, #13
189b0     FD 2C 02 F1 | 	add	local04, result1
189b4     18 4E 05 F1 | 	add	fp, #24
189b8     A7 2C 62 FC | 	wrlong	local04, fp
189bc     5C 4E 05 F1 | 	add	fp, #92
189c0     A7 14 02 FB | 	rdlong	arg02, fp
189c4     74 4E 85 F1 | 	sub	fp, #116
189c8     00 3D 22 FF 
189cc     00 12 06 F6 | 	mov	arg01, ##1148846080
189d0     14 14 B1 FD | 	call	#__system___float_mul
189d4     FD 12 02 F6 | 	mov	arg01, result1
189d8     01 14 06 F6 | 	mov	arg02, #1
189dc     D0 18 B1 FD | 	call	#__system___float_tointeger
189e0     1C 4E 05 F1 | 	add	fp, #28
189e4     A7 FA 61 FC | 	wrlong	result1, fp
189e8     37 00 00 FF 
189ec     10 E4 05 F1 | 	add	objptr, ##28176
189f0     F2 2C 02 FB | 	rdlong	local04, objptr
189f4     37 00 00 FF 
189f8     10 E4 85 F1 | 	sub	objptr, ##28176
189fc     10 4E 85 F1 | 	sub	fp, #16
18a00     A7 28 02 FB | 	rdlong	local02, fp
18a04     06 28 66 F0 | 	shl	local02, #6
18a08     14 2D 02 F1 | 	add	local04, local02
18a0c     04 4E 85 F1 | 	sub	fp, #4
18a10     A7 2C 62 FC | 	wrlong	local04, fp
18a14                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
18a14                 | ' speed=round(speed_coeff/slen)
18a14                 | ' ipan=8192+round(8192*pan)
18a14                 | ' ivol=round(1000.0*vol)
18a14                 | ' base2=base+64*channel
18a14                 | ' if wave <32 then 
18a14     18 4E 05 F1 | 	add	fp, #24
18a18     A7 2C 02 FB | 	rdlong	local04, fp
18a1c     20 4E 85 F1 | 	sub	fp, #32
18a20     20 2C 56 F2 | 	cmps	local04, #32 wc
18a24     2C 00 90 3D |  if_ae	jmp	#LR__1969
18a28     08 4E 05 F1 | 	add	fp, #8
18a2c     A7 12 02 FB | 	rdlong	arg01, fp
18a30     08 12 06 F1 | 	add	arg01, #8
18a34     18 4E 05 F1 | 	add	fp, #24
18a38     A7 14 02 FB | 	rdlong	arg02, fp
18a3c     20 4E 85 F1 | 	sub	fp, #32
18a40     0B 14 66 F0 | 	shl	arg02, #11
18a44     00 00 60 FF 
18a48     00 14 06 F1 | 	add	arg02, ##-1073741824
18a4c     09 15 62 FC | 	wrlong	arg02, arg01
18a50     18 00 90 FD | 	jmp	#LR__1970
18a54                 | LR__1969
18a54     08 4E 05 F1 | 	add	fp, #8
18a58     A7 12 02 FB | 	rdlong	arg01, fp
18a5c     08 4E 85 F1 | 	sub	fp, #8
18a60     08 12 06 F1 | 	add	arg01, #8
18a64     00 00 E4 FF 
18a68     09 01 68 FC | 	wrlong	##-939524096, arg01
18a6c                 | LR__1970
18a6c     08 4E 05 F1 | 	add	fp, #8
18a70     A7 12 02 FB | 	rdlong	arg01, fp
18a74     10 12 06 F1 | 	add	arg01, #16
18a78     04 00 80 FF 
18a7c     09 01 68 FC | 	wrlong	##2048, arg01
18a80     A7 12 02 FB | 	rdlong	arg01, fp
18a84     0C 12 06 F1 | 	add	arg01, #12
18a88     09 01 68 FC | 	wrlong	#0, arg01
18a8c     A7 12 02 FB | 	rdlong	arg01, fp
18a90     14 12 06 F1 | 	add	arg01, #20
18a94     14 4E 05 F1 | 	add	fp, #20
18a98     A7 14 02 FB | 	rdlong	arg02, fp
18a9c     09 15 52 FC | 	wrword	arg02, arg01
18aa0     14 4E 85 F1 | 	sub	fp, #20
18aa4     A7 12 02 FB | 	rdlong	arg01, fp
18aa8     16 12 06 F1 | 	add	arg01, #22
18aac     10 4E 05 F1 | 	add	fp, #16
18ab0     A7 14 02 FB | 	rdlong	arg02, fp
18ab4     09 15 52 FC | 	wrword	arg02, arg01
18ab8                 | ' lpoke base2+16,2048
18ab8                 | ' lpoke base2+12,0
18ab8                 | ' dpoke base2+20,ivol 
18ab8                 | ' dpoke base2+22,ipan 
18ab8                 | ' if wave<32 then
18ab8     08 4E 05 F1 | 	add	fp, #8
18abc     A7 2C 02 FB | 	rdlong	local04, fp
18ac0     20 4E 85 F1 | 	sub	fp, #32
18ac4     20 2C 56 F2 | 	cmps	local04, #32 wc
18ac8     38 00 90 3D |  if_ae	jmp	#LR__1971
18acc     08 4E 05 F1 | 	add	fp, #8
18ad0     A7 12 02 FB | 	rdlong	arg01, fp
18ad4     18 12 06 F1 | 	add	arg01, #24
18ad8     2C 4E 05 F1 | 	add	fp, #44
18adc     A7 14 02 FB | 	rdlong	arg02, fp
18ae0     09 15 52 FC | 	wrword	arg02, arg01
18ae4     2C 4E 85 F1 | 	sub	fp, #44
18ae8     A7 12 02 FB | 	rdlong	arg01, fp
18aec     1A 12 06 F1 | 	add	arg01, #26
18af0     08 4E 05 F1 | 	add	fp, #8
18af4     A7 14 02 FB | 	rdlong	arg02, fp
18af8     10 4E 85 F1 | 	sub	fp, #16
18afc     09 15 52 FC | 	wrword	arg02, arg01
18b00     48 00 90 FD | 	jmp	#LR__1972
18b04                 | LR__1971
18b04     08 4E 05 F1 | 	add	fp, #8
18b08     A7 2C 02 FB | 	rdlong	local04, fp
18b0c     18 2C 06 F1 | 	add	local04, #24
18b10     64 4E 05 F1 | 	add	fp, #100
18b14     A7 14 02 FB | 	rdlong	arg02, fp
18b18     6C 4E 85 F1 | 	sub	fp, #108
18b1c     3E 2C 25 FF 
18b20     3C 12 06 F6 | 	mov	arg01, ##1247312956
18b24     C4 14 B1 FD | 	call	#__system___float_div
18b28     FD 12 02 F6 | 	mov	arg01, result1
18b2c     01 14 06 F6 | 	mov	arg02, #1
18b30     7C 17 B1 FD | 	call	#__system___float_tointeger
18b34     16 FB 51 FC | 	wrword	result1, local04
18b38     08 4E 05 F1 | 	add	fp, #8
18b3c     A7 12 02 FB | 	rdlong	arg01, fp
18b40     08 4E 85 F1 | 	sub	fp, #8
18b44     1A 12 06 F1 | 	add	arg01, #26
18b48     09 01 5A FC | 	wrword	#256, arg01
18b4c                 | LR__1972
18b4c     08 4E 05 F1 | 	add	fp, #8
18b50     A7 12 02 FB | 	rdlong	arg01, fp
18b54     1C 12 06 F1 | 	add	arg01, #28
18b58     09 01 68 FC | 	wrlong	#0, arg01
18b5c     A7 12 02 FB | 	rdlong	arg01, fp
18b60     20 12 06 F1 | 	add	arg01, #32
18b64     09 01 68 FC | 	wrlong	#0, arg01
18b68                 | ' lpoke base2+28,$0000_0000
18b68                 | ' lpoke base2+32,0 
18b68                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
18b68     1C 4E 05 F1 | 	add	fp, #28
18b6c     A7 2C 02 FB | 	rdlong	local04, fp
18b70     24 4E 85 F1 | 	sub	fp, #36
18b74     08 2C 0E F2 | 	cmp	local04, #8 wz
18b78     18 00 90 5D |  if_ne	jmp	#LR__1973
18b7c     08 4E 05 F1 | 	add	fp, #8
18b80     A7 12 02 FB | 	rdlong	arg01, fp
18b84     08 4E 85 F1 | 	sub	fp, #8
18b88     24 12 06 F1 | 	add	arg01, #36
18b8c     09 01 68 FC | 	wrlong	#0, arg01
18b90     34 00 90 FD | 	jmp	#LR__1974
18b94                 | LR__1973
18b94     08 4E 05 F1 | 	add	fp, #8
18b98     A7 12 02 FB | 	rdlong	arg01, fp
18b9c     24 12 06 F1 | 	add	arg01, #36
18ba0     1C 4E 05 F1 | 	add	fp, #28
18ba4     A7 14 02 FB | 	rdlong	arg02, fp
18ba8     24 4E 85 F1 | 	sub	fp, #36
18bac     09 14 66 F0 | 	shl	arg02, #9
18bb0     0C 00 00 FF 
18bb4     D8 E4 05 F1 | 	add	objptr, ##6360
18bb8     F2 14 02 F1 | 	add	arg02, objptr
18bbc     0C 00 00 FF 
18bc0     D8 E4 85 F1 | 	sub	objptr, ##6360
18bc4     09 15 62 FC | 	wrlong	arg02, arg01
18bc8                 | LR__1974
18bc8     08 4E 05 F1 | 	add	fp, #8
18bcc     A7 12 02 FB | 	rdlong	arg01, fp
18bd0     28 12 06 F1 | 	add	arg01, #40
18bd4     0C 4E 05 F1 | 	add	fp, #12
18bd8     A7 14 02 FB | 	rdlong	arg02, fp
18bdc     09 15 62 FC | 	wrlong	arg02, arg01
18be0     0C 4E 85 F1 | 	sub	fp, #12
18be4     A7 12 02 FB | 	rdlong	arg01, fp
18be8     2C 12 06 F1 | 	add	arg01, #44
18bec     24 4E 05 F1 | 	add	fp, #36
18bf0     A7 14 02 FB | 	rdlong	arg02, fp
18bf4     09 15 62 FC | 	wrlong	arg02, arg01
18bf8                 | ' lpoke base2+40,speed 
18bf8                 | ' lpoke base2+44,sus 
18bf8                 | ' if delay>0 then waitms(delay) 
18bf8     04 4E 85 F1 | 	sub	fp, #4
18bfc     A7 2C 02 FB | 	rdlong	local04, fp
18c00     28 4E 85 F1 | 	sub	fp, #40
18c04     01 2C 56 F2 | 	cmps	local04, #1 wc
18c08     28 4E 05 31 |  if_ae	add	fp, #40
18c0c     A7 12 02 3B |  if_ae	rdlong	arg01, fp
18c10     28 4E 85 31 |  if_ae	sub	fp, #40
18c14     4C E6 B0 3D |  if_ae	call	#__system___waitms
18c18     A7 F0 03 F6 | 	mov	ptra, fp
18c1c     B2 00 A0 FD | 	call	#popregs_
18c20                 | _do_play_ret
18c20     2D 00 64 FD | 	ret
18c24                 | 
18c24                 | ' 
18c24                 | ' '-------------------- plot
18c24                 | ' 
18c24                 | ' sub do_plot
18c24                 | _do_plot
18c24     00 4A 05 F6 | 	mov	COUNT_, #0
18c28     A8 00 A0 FD | 	call	#pushregs_
18c2c     20 F0 07 F1 | 	add	ptra, #32
18c30     90 4A BF FD | 	call	#_pop
18c34     FD 16 02 F6 | 	mov	arg03, result1
18c38     FE 14 02 F6 | 	mov	arg02, result2
18c3c     FF 12 02 F6 | 	mov	arg01, result3
18c40     0C 4E 05 F1 | 	add	fp, #12
18c44     A7 16 62 FC | 	wrlong	arg03, fp
18c48     04 4E 05 F1 | 	add	fp, #4
18c4c     A7 14 62 FC | 	wrlong	arg02, fp
18c50     04 4E 05 F1 | 	add	fp, #4
18c54     A7 12 62 FC | 	wrlong	arg01, fp
18c58     14 4E 85 F1 | 	sub	fp, #20
18c5c     64 4A BF FD | 	call	#_pop
18c60     FF 16 02 F6 | 	mov	arg03, result3
18c64     A7 FA 61 FC | 	wrlong	result1, fp
18c68     04 4E 05 F1 | 	add	fp, #4
18c6c     A7 FC 61 FC | 	wrlong	result2, fp
18c70     04 4E 05 F1 | 	add	fp, #4
18c74     A7 16 62 FC | 	wrlong	arg03, fp
18c78     08 4E 85 F1 | 	sub	fp, #8
18c7c     A7 12 02 F6 | 	mov	arg01, fp
18c80     24 4C BF FD | 	call	#_converttoint
18c84     18 4E 05 F1 | 	add	fp, #24
18c88     A7 FA 61 FC | 	wrlong	result1, fp
18c8c     0C 4E 85 F1 | 	sub	fp, #12
18c90     A7 12 02 F6 | 	mov	arg01, fp
18c94     0C 4E 85 F1 | 	sub	fp, #12
18c98     0C 4C BF FD | 	call	#_converttoint
18c9c     1C 4E 05 F1 | 	add	fp, #28
18ca0     A7 FA 61 FC | 	wrlong	result1, fp
18ca4     04 4E 85 F1 | 	sub	fp, #4
18ca8     A7 16 02 FB | 	rdlong	arg03, fp
18cac     37 00 00 FF 
18cb0     2C E4 05 F1 | 	add	objptr, ##28204
18cb4     F2 16 62 FC | 	wrlong	arg03, objptr
18cb8     04 4E 05 F1 | 	add	fp, #4
18cbc     A7 14 02 FB | 	rdlong	arg02, fp
18cc0     1C 4E 85 F1 | 	sub	fp, #28
18cc4     04 E4 05 F1 | 	add	objptr, #4
18cc8     F2 14 62 FC | 	wrlong	arg02, objptr
18ccc     04 E4 85 F1 | 	sub	objptr, #4
18cd0     F2 12 02 FB | 	rdlong	arg01, objptr
18cd4     04 E4 85 F1 | 	sub	objptr, #4
18cd8     F2 16 02 FB | 	rdlong	arg03, objptr
18cdc     37 00 00 FF 
18ce0     28 E4 85 F1 | 	sub	objptr, ##28200
18ce4     00 B9 B0 FD | 	call	#_hg010b_spin2_putpixel
18ce8     A7 F0 03 F6 | 	mov	ptra, fp
18cec     B2 00 A0 FD | 	call	#popregs_
18cf0                 | _do_plot_ret
18cf0     2D 00 64 FD | 	ret
18cf4                 | 
18cf4                 | ' 
18cf4                 | ' '-------------------- poke
18cf4                 | ' 
18cf4                 | ' sub do_poke
18cf4                 | _do_poke
18cf4     01 4A 05 F6 | 	mov	COUNT_, #1
18cf8     A8 00 A0 FD | 	call	#pushregs_
18cfc     20 F0 07 F1 | 	add	ptra, #32
18d00     C0 49 BF FD | 	call	#_pop
18d04     FD 14 02 F6 | 	mov	arg02, result1
18d08     FE 12 02 F6 | 	mov	arg01, result2
18d0c     FF 26 02 F6 | 	mov	local01, result3
18d10     A7 14 62 FC | 	wrlong	arg02, fp
18d14     04 4E 05 F1 | 	add	fp, #4
18d18     A7 12 62 FC | 	wrlong	arg01, fp
18d1c     04 4E 05 F1 | 	add	fp, #4
18d20     A7 26 62 FC | 	wrlong	local01, fp
18d24     08 4E 85 F1 | 	sub	fp, #8
18d28     98 49 BF FD | 	call	#_pop
18d2c     FF 26 02 F6 | 	mov	local01, result3
18d30     0C 4E 05 F1 | 	add	fp, #12
18d34     A7 FA 61 FC | 	wrlong	result1, fp
18d38     04 4E 05 F1 | 	add	fp, #4
18d3c     A7 FC 61 FC | 	wrlong	result2, fp
18d40     04 4E 05 F1 | 	add	fp, #4
18d44     A7 26 62 FC | 	wrlong	local01, fp
18d48     08 4E 85 F1 | 	sub	fp, #8
18d4c     A7 12 02 F6 | 	mov	arg01, fp
18d50     0C 4E 85 F1 | 	sub	fp, #12
18d54     50 4B BF FD | 	call	#_converttoint
18d58     18 4E 05 F1 | 	add	fp, #24
18d5c     A7 FA 61 FC | 	wrlong	result1, fp
18d60     18 4E 85 F1 | 	sub	fp, #24
18d64     A7 12 02 F6 | 	mov	arg01, fp
18d68     3C 4B BF FD | 	call	#_converttoint
18d6c     1C 4E 05 F1 | 	add	fp, #28
18d70     A7 FA 61 FC | 	wrlong	result1, fp
18d74                 | ' t1=pop() 'value
18d74                 | ' t2=pop() 
18d74                 | ' a=converttoint(t2) : v=converttoint(t1)
18d74                 | ' if a<$80000 then poke a,v else pspoke a,v
18d74     04 4E 85 F1 | 	sub	fp, #4
18d78     A7 26 02 FB | 	rdlong	local01, fp
18d7c     18 4E 85 F1 | 	sub	fp, #24
18d80     00 04 00 FF 
18d84     00 26 16 F2 | 	cmp	local01, ##524288 wc
18d88     1C 00 90 3D |  if_ae	jmp	#LR__1980
18d8c     18 4E 05 F1 | 	add	fp, #24
18d90     A7 12 02 FB | 	rdlong	arg01, fp
18d94     04 4E 05 F1 | 	add	fp, #4
18d98     A7 14 02 FB | 	rdlong	arg02, fp
18d9c     1C 4E 85 F1 | 	sub	fp, #28
18da0     09 15 42 FC | 	wrbyte	arg02, arg01
18da4     18 00 90 FD | 	jmp	#LR__1981
18da8                 | LR__1980
18da8     18 4E 05 F1 | 	add	fp, #24
18dac     A7 12 02 FB | 	rdlong	arg01, fp
18db0     04 4E 05 F1 | 	add	fp, #4
18db4     A7 14 02 FB | 	rdlong	arg02, fp
18db8     1C 4E 85 F1 | 	sub	fp, #28
18dbc     C4 A9 B0 FD | 	call	#_pspoke
18dc0                 | LR__1981
18dc0     A7 F0 03 F6 | 	mov	ptra, fp
18dc4     B2 00 A0 FD | 	call	#popregs_
18dc8                 | _do_poke_ret
18dc8     2D 00 64 FD | 	ret
18dcc                 | 
18dcc                 | ' 
18dcc                 | ' '-------------------- pop
18dcc                 | ' 
18dcc                 | ' sub do_pop()
18dcc                 | _do_pop
18dcc                 | ' if gosubtop>0 then  gosubtop -=1 
18dcc     50 00 00 FF 
18dd0     34 E5 05 F1 | 	add	objptr, ##41268
18dd4     F2 00 02 FB | 	rdlong	_var01, objptr
18dd8     50 00 00 FF 
18ddc     34 E5 85 F1 | 	sub	objptr, ##41268
18de0     01 00 56 F2 | 	cmps	_var01, #1 wc
18de4     50 00 00 3F 
18de8     34 E5 05 31 |  if_ae	add	objptr, ##41268
18dec     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
18df0     01 00 86 31 |  if_ae	sub	_var01, #1
18df4     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
18df8     50 00 00 3F 
18dfc     34 E5 85 31 |  if_ae	sub	objptr, ##41268
18e00                 | _do_pop_ret
18e00     2D 00 64 FD | 	ret
18e04                 | 
18e04                 | ' 
18e04                 | ' '-------------------- position
18e04                 | ' 
18e04                 | ' sub do_position
18e04                 | _do_position
18e04     01 4A 05 F6 | 	mov	COUNT_, #1
18e08     A8 00 A0 FD | 	call	#pushregs_
18e0c     18 F0 07 F1 | 	add	ptra, #24
18e10     B0 48 BF FD | 	call	#_pop
18e14     FD 14 02 F6 | 	mov	arg02, result1
18e18     FE 12 02 F6 | 	mov	arg01, result2
18e1c     FF 26 02 F6 | 	mov	local01, result3
18e20     A7 14 62 FC | 	wrlong	arg02, fp
18e24     04 4E 05 F1 | 	add	fp, #4
18e28     A7 12 62 FC | 	wrlong	arg01, fp
18e2c     04 4E 05 F1 | 	add	fp, #4
18e30     A7 26 62 FC | 	wrlong	local01, fp
18e34     08 4E 85 F1 | 	sub	fp, #8
18e38     88 48 BF FD | 	call	#_pop
18e3c     FF 26 02 F6 | 	mov	local01, result3
18e40     0C 4E 05 F1 | 	add	fp, #12
18e44     A7 FA 61 FC | 	wrlong	result1, fp
18e48     04 4E 05 F1 | 	add	fp, #4
18e4c     A7 FC 61 FC | 	wrlong	result2, fp
18e50     04 4E 05 F1 | 	add	fp, #4
18e54     A7 26 62 FC | 	wrlong	local01, fp
18e58     08 4E 85 F1 | 	sub	fp, #8
18e5c     A7 12 02 F6 | 	mov	arg01, fp
18e60     0C 4E 85 F1 | 	sub	fp, #12
18e64     40 4A BF FD | 	call	#_converttoint
18e68     FD 26 02 F6 | 	mov	local01, result1
18e6c     A7 12 02 F6 | 	mov	arg01, fp
18e70     34 4A BF FD | 	call	#_converttoint
18e74     FD 14 02 F6 | 	mov	arg02, result1
18e78     13 13 02 F6 | 	mov	arg01, local01
18e7c     2C C3 B0 FD | 	call	#_hg010b_spin2_setcursorpos
18e80     A7 F0 03 F6 | 	mov	ptra, fp
18e84     B2 00 A0 FD | 	call	#popregs_
18e88                 | _do_position_ret
18e88     2D 00 64 FD | 	ret
18e8c                 | 
18e8c                 | ' 
18e8c                 | ' '-------------------- print
18e8c                 | ' 
18e8c                 | ' sub do_print  
18e8c                 | _do_print
18e8c     0B 4A 05 F6 | 	mov	COUNT_, #11
18e90     A8 00 A0 FD | 	call	#pushregs_
18e94     00 2C 06 F6 | 	mov	local04, #0
18e98     28 48 BF FD | 	call	#_pop
18e9c     FD 2E 02 F6 | 	mov	local05, result1
18ea0     FE 30 02 F6 | 	mov	local06, result2
18ea4     FF 32 02 F6 | 	mov	local07, result3
18ea8     17 27 02 F6 | 	mov	local01, local05
18eac     18 29 02 F6 | 	mov	local02, local06
18eb0     19 2B 02 F6 | 	mov	local03, local07
18eb4                 | '  
18eb4                 | ' r=0
18eb4                 | ' t1=pop() 
18eb4                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
18eb4     21 2A 0E F2 | 	cmp	local03, #33 wz
18eb8     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
18ebc     20 00 90 5D |  if_ne	jmp	#LR__1990
18ec0     15 2D 02 F6 | 	mov	local04, local03
18ec4     FC 47 BF FD | 	call	#_pop
18ec8     FD 2E 02 F6 | 	mov	local05, result1
18ecc     FE 30 02 F6 | 	mov	local06, result2
18ed0     FF 32 02 F6 | 	mov	local07, result3
18ed4     17 27 02 F6 | 	mov	local01, local05
18ed8     18 29 02 F6 | 	mov	local02, local06
18edc     19 2B 02 F6 | 	mov	local03, local07
18ee0                 | LR__1990
18ee0                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
18ee0     20 2A 0E F2 | 	cmp	local03, #32 wz
18ee4     15 2D 02 A6 |  if_e	mov	local04, local03
18ee8                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
18ee8     FF 2A 0E F2 | 	cmp	local03, #255 wz
18eec     10 00 90 5D |  if_ne	jmp	#LR__1991
18ef0     13 13 02 F6 | 	mov	arg01, local01
18ef4     00 14 06 F6 | 	mov	arg02, #0
18ef8     58 A6 B0 FD | 	call	#_printerror
18efc     D4 04 90 FD | 	jmp	#LR__2010
18f00                 | LR__1991
18f00                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
18f00     2B 2A 0E F2 | 	cmp	local03, #43 wz
18f04     14 00 90 5D |  if_ne	jmp	#LR__1992
18f08     13 13 02 F6 | 	mov	arg01, local01
18f0c     2C 49 BF FD | 	call	#_convertstring
18f10     FD 2E 02 F6 | 	mov	local05, result1
18f14     17 27 02 F6 | 	mov	local01, local05
18f18     1F 2A 06 F6 | 	mov	local03, #31
18f1c                 | LR__1992
18f1c                 | ' 
18f1c                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
18f1c     2C 2A 0E F2 | 	cmp	local03, #44 wz
18f20     80 00 90 5D |  if_ne	jmp	#LR__1993
18f24     00 12 06 F6 | 	mov	arg01, #0
18f28     6C 3D B1 FD | 	call	#__system___getiolock_0613
18f2c     FD 12 02 F6 | 	mov	arg01, result1
18f30     3C E0 B0 FD | 	call	#__system___lockmem
18f34     BA 01 00 FF 
18f38     D6 15 06 F6 | 	mov	arg02, ##@LR__5983
18f3c     00 12 06 F6 | 	mov	arg01, #0
18f40     00 16 06 F6 | 	mov	arg03, #0
18f44     1C ED B0 FD | 	call	#__system___basic_print_string
18f48     0A 34 06 F6 | 	mov	local08, #10
18f4c     00 12 06 F6 | 	mov	arg01, #0
18f50     13 15 02 F6 | 	mov	arg02, local01
18f54     00 16 06 F6 | 	mov	arg03, #0
18f58     0A 18 06 F6 | 	mov	arg04, #10
18f5c     48 ED B0 FD | 	call	#__system___basic_print_integer
18f60     FD 36 02 F6 | 	mov	local09, result1
18f64     00 12 06 F6 | 	mov	arg01, #0
18f68     0A 14 06 F6 | 	mov	arg02, #10
18f6c     00 16 06 F6 | 	mov	arg03, #0
18f70     98 EC B0 FD | 	call	#__system___basic_print_char
18f74     01 38 06 F6 | 	mov	local10, #1
18f78     00 12 06 F6 | 	mov	arg01, #0
18f7c     18 3D B1 FD | 	call	#__system___getiolock_0613
18f80     FD 00 68 FC | 	wrlong	#0, result1
18f84     00 3A 06 F6 | 	mov	local11, #0
18f88     38 47 BF FD | 	call	#_pop
18f8c     FD 2E 02 F6 | 	mov	local05, result1
18f90     FE 30 02 F6 | 	mov	local06, result2
18f94     FF 32 02 F6 | 	mov	local07, result3
18f98     17 27 02 F6 | 	mov	local01, local05
18f9c     18 29 02 F6 | 	mov	local02, local06
18fa0     19 2B 02 F6 | 	mov	local03, local07
18fa4                 | LR__1993
18fa4                 | ' 
18fa4                 | ' if r=print_mod_comma  then
18fa4     21 2C 0E F2 | 	cmp	local04, #33 wz
18fa8     AC 01 90 5D |  if_ne	jmp	#LR__1998
18fac                 | '   if t1.result_type=result_int then print t1.result.iresult,
18fac     1C 2A 0E F2 | 	cmp	local03, #28 wz
18fb0     64 00 90 5D |  if_ne	jmp	#LR__1994
18fb4     00 12 06 F6 | 	mov	arg01, #0
18fb8     DC 3C B1 FD | 	call	#__system___getiolock_0613
18fbc     FD 12 02 F6 | 	mov	arg01, result1
18fc0     AC DF B0 FD | 	call	#__system___lockmem
18fc4     00 30 06 F6 | 	mov	local06, #0
18fc8     00 12 06 F6 | 	mov	arg01, #0
18fcc     13 15 02 F6 | 	mov	arg02, local01
18fd0     00 16 06 F6 | 	mov	arg03, #0
18fd4     0A 18 06 F6 | 	mov	arg04, #10
18fd8     CC EC B0 FD | 	call	#__system___basic_print_integer
18fdc     FD 32 02 F6 | 	mov	local07, result1
18fe0     18 2F 02 F6 | 	mov	local05, local06
18fe4     19 2F 02 F1 | 	add	local05, local07
18fe8     00 3A 06 F6 | 	mov	local11, #0
18fec     00 12 06 F6 | 	mov	arg01, #0
18ff0     09 14 06 F6 | 	mov	arg02, #9
18ff4     00 16 06 F6 | 	mov	arg03, #0
18ff8     10 EC B0 FD | 	call	#__system___basic_print_char
18ffc     FD 36 02 F6 | 	mov	local09, result1
19000     FD 2E 02 F1 | 	add	local05, result1
19004     00 12 06 F6 | 	mov	arg01, #0
19008     8C 3C B1 FD | 	call	#__system___getiolock_0613
1900c     FD 00 68 FC | 	wrlong	#0, result1
19010     00 FA 05 F6 | 	mov	result1, #0
19014     00 38 06 F6 | 	mov	local10, #0
19018                 | LR__1994
19018                 | '   if t1.result_type=result_uint then print t1.result.uresult,
19018     1D 2A 0E F2 | 	cmp	local03, #29 wz
1901c     64 00 90 5D |  if_ne	jmp	#LR__1995
19020     00 12 06 F6 | 	mov	arg01, #0
19024     70 3C B1 FD | 	call	#__system___getiolock_0613
19028     FD 12 02 F6 | 	mov	arg01, result1
1902c     40 DF B0 FD | 	call	#__system___lockmem
19030     00 30 06 F6 | 	mov	local06, #0
19034     00 12 06 F6 | 	mov	arg01, #0
19038     13 15 02 F6 | 	mov	arg02, local01
1903c     00 16 06 F6 | 	mov	arg03, #0
19040     0A 18 06 F6 | 	mov	arg04, #10
19044     A0 EC B0 FD | 	call	#__system___basic_print_unsigned
19048     FD 32 02 F6 | 	mov	local07, result1
1904c     18 2F 02 F6 | 	mov	local05, local06
19050     19 2F 02 F1 | 	add	local05, local07
19054     00 3A 06 F6 | 	mov	local11, #0
19058     00 12 06 F6 | 	mov	arg01, #0
1905c     09 14 06 F6 | 	mov	arg02, #9
19060     00 16 06 F6 | 	mov	arg03, #0
19064     A4 EB B0 FD | 	call	#__system___basic_print_char
19068     FD 36 02 F6 | 	mov	local09, result1
1906c     FD 2E 02 F1 | 	add	local05, result1
19070     00 12 06 F6 | 	mov	arg01, #0
19074     20 3C B1 FD | 	call	#__system___getiolock_0613
19078     FD 00 68 FC | 	wrlong	#0, result1
1907c     00 FA 05 F6 | 	mov	result1, #0
19080     00 38 06 F6 | 	mov	local10, #0
19084                 | LR__1995
19084                 | '   if t1.result_type=result_float then print t1.result.fresult,
19084     1E 2A 0E F2 | 	cmp	local03, #30 wz
19088     64 00 90 5D |  if_ne	jmp	#LR__1996
1908c     00 12 06 F6 | 	mov	arg01, #0
19090     04 3C B1 FD | 	call	#__system___getiolock_0613
19094     FD 12 02 F6 | 	mov	arg01, result1
19098     D4 DE B0 FD | 	call	#__system___lockmem
1909c     00 30 06 F6 | 	mov	local06, #0
190a0     00 12 06 F6 | 	mov	arg01, #0
190a4     13 15 02 F6 | 	mov	arg02, local01
190a8     00 16 06 F6 | 	mov	arg03, #0
190ac     23 18 06 F6 | 	mov	arg04, #35
190b0     4C 13 B1 FD | 	call	#__system___basic_print_float
190b4     FD 32 02 F6 | 	mov	local07, result1
190b8     18 2F 02 F6 | 	mov	local05, local06
190bc     19 2F 02 F1 | 	add	local05, local07
190c0     00 3A 06 F6 | 	mov	local11, #0
190c4     00 12 06 F6 | 	mov	arg01, #0
190c8     09 14 06 F6 | 	mov	arg02, #9
190cc     00 16 06 F6 | 	mov	arg03, #0
190d0     38 EB B0 FD | 	call	#__system___basic_print_char
190d4     FD 36 02 F6 | 	mov	local09, result1
190d8     FD 2E 02 F1 | 	add	local05, result1
190dc     00 12 06 F6 | 	mov	arg01, #0
190e0     B4 3B B1 FD | 	call	#__system___getiolock_0613
190e4     FD 00 68 FC | 	wrlong	#0, result1
190e8     00 FA 05 F6 | 	mov	result1, #0
190ec     00 38 06 F6 | 	mov	local10, #0
190f0                 | LR__1996
190f0                 | '   if t1.result_type=result_string then print t1.result.sresult,
190f0     1F 2A 0E F2 | 	cmp	local03, #31 wz
190f4     60 00 90 5D |  if_ne	jmp	#LR__1997
190f8     00 12 06 F6 | 	mov	arg01, #0
190fc     98 3B B1 FD | 	call	#__system___getiolock_0613
19100     FD 12 02 F6 | 	mov	arg01, result1
19104     68 DE B0 FD | 	call	#__system___lockmem
19108     00 30 06 F6 | 	mov	local06, #0
1910c     00 12 06 F6 | 	mov	arg01, #0
19110     13 15 02 F6 | 	mov	arg02, local01
19114     00 16 06 F6 | 	mov	arg03, #0
19118     48 EB B0 FD | 	call	#__system___basic_print_string
1911c     FD 32 02 F6 | 	mov	local07, result1
19120     18 2F 02 F6 | 	mov	local05, local06
19124     19 2F 02 F1 | 	add	local05, local07
19128     00 3A 06 F6 | 	mov	local11, #0
1912c     00 12 06 F6 | 	mov	arg01, #0
19130     09 14 06 F6 | 	mov	arg02, #9
19134     00 16 06 F6 | 	mov	arg03, #0
19138     D0 EA B0 FD | 	call	#__system___basic_print_char
1913c     FD 36 02 F6 | 	mov	local09, result1
19140     FD 2E 02 F1 | 	add	local05, result1
19144     00 12 06 F6 | 	mov	arg01, #0
19148     4C 3B B1 FD | 	call	#__system___getiolock_0613
1914c     FD 00 68 FC | 	wrlong	#0, result1
19150     00 FA 05 F6 | 	mov	result1, #0
19154     00 38 06 F6 | 	mov	local10, #0
19158                 | LR__1997
19158                 | LR__1998
19158                 | ' if r=print_mod_semicolon then 
19158     22 2C 0E F2 | 	cmp	local04, #34 wz
1915c     1C 01 90 5D |  if_ne	jmp	#LR__2003
19160                 | '   if t1.result_type=result_int then print t1.result.iresult;
19160     1C 2A 0E F2 | 	cmp	local03, #28 wz
19164     50 00 90 5D |  if_ne	jmp	#LR__1999
19168     00 12 06 F6 | 	mov	arg01, #0
1916c     28 3B B1 FD | 	call	#__system___getiolock_0613
19170     FD 12 02 F6 | 	mov	arg01, result1
19174     F8 DD B0 FD | 	call	#__system___lockmem
19178     00 30 06 F6 | 	mov	local06, #0
1917c     00 38 06 F6 | 	mov	local10, #0
19180     0A 3A 06 F6 | 	mov	local11, #10
19184     00 12 06 F6 | 	mov	arg01, #0
19188     13 15 02 F6 | 	mov	arg02, local01
1918c     00 16 06 F6 | 	mov	arg03, #0
19190     0A 18 06 F6 | 	mov	arg04, #10
19194     10 EB B0 FD | 	call	#__system___basic_print_integer
19198     FD 32 02 F6 | 	mov	local07, result1
1919c     18 2F 02 F6 | 	mov	local05, local06
191a0     19 2F 02 F1 | 	add	local05, local07
191a4     00 12 06 F6 | 	mov	arg01, #0
191a8     EC 3A B1 FD | 	call	#__system___getiolock_0613
191ac     FD 00 68 FC | 	wrlong	#0, result1
191b0     00 FA 05 F6 | 	mov	result1, #0
191b4     00 36 06 F6 | 	mov	local09, #0
191b8                 | LR__1999
191b8                 | '   if t1.result_type=result_uint then print t1.result.uresult;
191b8     1D 2A 0E F2 | 	cmp	local03, #29 wz
191bc     50 00 90 5D |  if_ne	jmp	#LR__2000
191c0     00 12 06 F6 | 	mov	arg01, #0
191c4     D0 3A B1 FD | 	call	#__system___getiolock_0613
191c8     FD 12 02 F6 | 	mov	arg01, result1
191cc     A0 DD B0 FD | 	call	#__system___lockmem
191d0     00 30 06 F6 | 	mov	local06, #0
191d4     00 38 06 F6 | 	mov	local10, #0
191d8     0A 3A 06 F6 | 	mov	local11, #10
191dc     00 12 06 F6 | 	mov	arg01, #0
191e0     13 15 02 F6 | 	mov	arg02, local01
191e4     00 16 06 F6 | 	mov	arg03, #0
191e8     0A 18 06 F6 | 	mov	arg04, #10
191ec     F8 EA B0 FD | 	call	#__system___basic_print_unsigned
191f0     FD 32 02 F6 | 	mov	local07, result1
191f4     18 2F 02 F6 | 	mov	local05, local06
191f8     19 2F 02 F1 | 	add	local05, local07
191fc     00 12 06 F6 | 	mov	arg01, #0
19200     94 3A B1 FD | 	call	#__system___getiolock_0613
19204     FD 00 68 FC | 	wrlong	#0, result1
19208     00 FA 05 F6 | 	mov	result1, #0
1920c     00 36 06 F6 | 	mov	local09, #0
19210                 | LR__2000
19210                 | '   if t1.result_type=result_float then print t1.result.fresult;
19210     1E 2A 0E F2 | 	cmp	local03, #30 wz
19214     30 00 90 5D |  if_ne	jmp	#LR__2001
19218     00 12 06 F6 | 	mov	arg01, #0
1921c     78 3A B1 FD | 	call	#__system___getiolock_0613
19220     FD 12 02 F6 | 	mov	arg01, result1
19224     48 DD B0 FD | 	call	#__system___lockmem
19228     00 12 06 F6 | 	mov	arg01, #0
1922c     13 15 02 F6 | 	mov	arg02, local01
19230     00 16 06 F6 | 	mov	arg03, #0
19234     23 18 06 F6 | 	mov	arg04, #35
19238     C4 11 B1 FD | 	call	#__system___basic_print_float
1923c     00 12 06 F6 | 	mov	arg01, #0
19240     54 3A B1 FD | 	call	#__system___getiolock_0613
19244     FD 00 68 FC | 	wrlong	#0, result1
19248                 | LR__2001
19248                 | '   if t1.result_type=result_string then print t1.result.sresult;
19248     1F 2A 0E F2 | 	cmp	local03, #31 wz
1924c     2C 00 90 5D |  if_ne	jmp	#LR__2002
19250     00 12 06 F6 | 	mov	arg01, #0
19254     40 3A B1 FD | 	call	#__system___getiolock_0613
19258     FD 12 02 F6 | 	mov	arg01, result1
1925c     10 DD B0 FD | 	call	#__system___lockmem
19260     00 12 06 F6 | 	mov	arg01, #0
19264     13 15 02 F6 | 	mov	arg02, local01
19268     00 16 06 F6 | 	mov	arg03, #0
1926c     F4 E9 B0 FD | 	call	#__system___basic_print_string
19270     00 12 06 F6 | 	mov	arg01, #0
19274     20 3A B1 FD | 	call	#__system___getiolock_0613
19278     FD 00 68 FC | 	wrlong	#0, result1
1927c                 | LR__2002
1927c                 | LR__2003
1927c                 | ' if r=0 then 
1927c     00 2C 0E F2 | 	cmp	local04, #0 wz
19280     1C 01 90 5D |  if_ne	jmp	#LR__2008
19284                 | '   if t1.result_type=result_int then print t1.result.iresult
19284     1C 2A 0E F2 | 	cmp	local03, #28 wz
19288     40 00 90 5D |  if_ne	jmp	#LR__2004
1928c     00 12 06 F6 | 	mov	arg01, #0
19290     04 3A B1 FD | 	call	#__system___getiolock_0613
19294     FD 12 02 F6 | 	mov	arg01, result1
19298     D4 DC B0 FD | 	call	#__system___lockmem
1929c     00 12 06 F6 | 	mov	arg01, #0
192a0     13 15 02 F6 | 	mov	arg02, local01
192a4     00 16 06 F6 | 	mov	arg03, #0
192a8     0A 18 06 F6 | 	mov	arg04, #10
192ac     F8 E9 B0 FD | 	call	#__system___basic_print_integer
192b0     00 12 06 F6 | 	mov	arg01, #0
192b4     0A 14 06 F6 | 	mov	arg02, #10
192b8     00 16 06 F6 | 	mov	arg03, #0
192bc     4C E9 B0 FD | 	call	#__system___basic_print_char
192c0     00 12 06 F6 | 	mov	arg01, #0
192c4     D0 39 B1 FD | 	call	#__system___getiolock_0613
192c8     FD 00 68 FC | 	wrlong	#0, result1
192cc                 | LR__2004
192cc                 | '   if t1.result_type=result_uint then print t1.result.uresult
192cc     1D 2A 0E F2 | 	cmp	local03, #29 wz
192d0     40 00 90 5D |  if_ne	jmp	#LR__2005
192d4     00 12 06 F6 | 	mov	arg01, #0
192d8     BC 39 B1 FD | 	call	#__system___getiolock_0613
192dc     FD 12 02 F6 | 	mov	arg01, result1
192e0     8C DC B0 FD | 	call	#__system___lockmem
192e4     00 12 06 F6 | 	mov	arg01, #0
192e8     13 15 02 F6 | 	mov	arg02, local01
192ec     00 16 06 F6 | 	mov	arg03, #0
192f0     0A 18 06 F6 | 	mov	arg04, #10
192f4     F0 E9 B0 FD | 	call	#__system___basic_print_unsigned
192f8     00 12 06 F6 | 	mov	arg01, #0
192fc     0A 14 06 F6 | 	mov	arg02, #10
19300     00 16 06 F6 | 	mov	arg03, #0
19304     04 E9 B0 FD | 	call	#__system___basic_print_char
19308     00 12 06 F6 | 	mov	arg01, #0
1930c     88 39 B1 FD | 	call	#__system___getiolock_0613
19310     FD 00 68 FC | 	wrlong	#0, result1
19314                 | LR__2005
19314                 | '   if t1.result_type=result_float then print t1.result.fresult
19314     1E 2A 0E F2 | 	cmp	local03, #30 wz
19318     40 00 90 5D |  if_ne	jmp	#LR__2006
1931c     00 12 06 F6 | 	mov	arg01, #0
19320     74 39 B1 FD | 	call	#__system___getiolock_0613
19324     FD 12 02 F6 | 	mov	arg01, result1
19328     44 DC B0 FD | 	call	#__system___lockmem
1932c     00 12 06 F6 | 	mov	arg01, #0
19330     13 15 02 F6 | 	mov	arg02, local01
19334     00 16 06 F6 | 	mov	arg03, #0
19338     23 18 06 F6 | 	mov	arg04, #35
1933c     C0 10 B1 FD | 	call	#__system___basic_print_float
19340     00 12 06 F6 | 	mov	arg01, #0
19344     0A 14 06 F6 | 	mov	arg02, #10
19348     00 16 06 F6 | 	mov	arg03, #0
1934c     BC E8 B0 FD | 	call	#__system___basic_print_char
19350     00 12 06 F6 | 	mov	arg01, #0
19354     40 39 B1 FD | 	call	#__system___getiolock_0613
19358     FD 00 68 FC | 	wrlong	#0, result1
1935c                 | LR__2006
1935c                 | '   if t1.result_type=result_string then print t1.result.sresult
1935c     1F 2A 0E F2 | 	cmp	local03, #31 wz
19360     3C 00 90 5D |  if_ne	jmp	#LR__2007
19364     00 12 06 F6 | 	mov	arg01, #0
19368     2C 39 B1 FD | 	call	#__system___getiolock_0613
1936c     FD 12 02 F6 | 	mov	arg01, result1
19370     FC DB B0 FD | 	call	#__system___lockmem
19374     00 12 06 F6 | 	mov	arg01, #0
19378     13 15 02 F6 | 	mov	arg02, local01
1937c     00 16 06 F6 | 	mov	arg03, #0
19380     E0 E8 B0 FD | 	call	#__system___basic_print_string
19384     00 12 06 F6 | 	mov	arg01, #0
19388     0A 14 06 F6 | 	mov	arg02, #10
1938c     00 16 06 F6 | 	mov	arg03, #0
19390     78 E8 B0 FD | 	call	#__system___basic_print_char
19394     00 12 06 F6 | 	mov	arg01, #0
19398     FC 38 B1 FD | 	call	#__system___getiolock_0613
1939c     FD 00 68 FC | 	wrlong	#0, result1
193a0                 | LR__2007
193a0                 | LR__2008
193a0                 | ' if r=print_mod_empty then print
193a0     20 2C 0E F2 | 	cmp	local04, #32 wz
193a4     2C 00 90 5D |  if_ne	jmp	#LR__2009
193a8     00 12 06 F6 | 	mov	arg01, #0
193ac     E8 38 B1 FD | 	call	#__system___getiolock_0613
193b0     FD 12 02 F6 | 	mov	arg01, result1
193b4     B8 DB B0 FD | 	call	#__system___lockmem
193b8     00 12 06 F6 | 	mov	arg01, #0
193bc     0A 14 06 F6 | 	mov	arg02, #10
193c0     00 16 06 F6 | 	mov	arg03, #0
193c4     44 E8 B0 FD | 	call	#__system___basic_print_char
193c8     00 12 06 F6 | 	mov	arg01, #0
193cc     C8 38 B1 FD | 	call	#__system___getiolock_0613
193d0     FD 00 68 FC | 	wrlong	#0, result1
193d4                 | LR__2009
193d4                 | LR__2010
193d4     A7 F0 03 F6 | 	mov	ptra, fp
193d8     B2 00 A0 FD | 	call	#popregs_
193dc                 | _do_print_ret
193dc     2D 00 64 FD | 	ret
193e0                 | 
193e0                 | ' 
193e0                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
193e0                 | ' 
193e0                 | ' sub do_push
193e0                 | _do_push
193e0                 | ' if stackpointer<maxstack then 
193e0     43 00 00 FF 
193e4     58 E4 05 F1 | 	add	objptr, ##34392
193e8     F2 00 02 FB | 	rdlong	_var01, objptr
193ec     43 00 00 FF 
193f0     58 E4 85 F1 | 	sub	objptr, ##34392
193f4     01 00 00 FF 
193f8     00 00 56 F2 | 	cmps	_var01, ##512 wc
193fc     F8 00 90 3D |  if_ae	jmp	#LR__2020
19400     4A 00 00 FF 
19404     80 E4 05 F1 | 	add	objptr, ##38016
19408     F2 02 02 FB | 	rdlong	_var02, objptr
1940c     01 05 02 F6 | 	mov	_var03, _var02
19410     01 04 66 F0 | 	shl	_var03, #1
19414     01 05 02 F1 | 	add	_var03, _var02
19418     02 04 66 F0 | 	shl	_var03, #2
1941c     03 00 00 FF 
19420     04 E4 85 F1 | 	sub	objptr, ##1540
19424     F2 04 02 F1 | 	add	_var03, objptr
19428     02 01 02 FB | 	rdlong	_var01, _var03
1942c     04 04 06 F1 | 	add	_var03, #4
19430     02 07 02 FB | 	rdlong	_var04, _var03
19434     01 05 02 F6 | 	mov	_var03, _var02
19438     01 04 66 F0 | 	shl	_var03, #1
1943c     01 05 02 F1 | 	add	_var03, _var02
19440     02 04 66 F0 | 	shl	_var03, #2
19444     F2 04 02 F1 | 	add	_var03, objptr
19448     08 04 06 F1 | 	add	_var03, #8
1944c     02 03 02 FB | 	rdlong	_var02, _var03
19450     04 00 00 FF 
19454     24 E4 85 F1 | 	sub	objptr, ##2084
19458     F2 04 02 FB | 	rdlong	_var03, objptr
1945c     02 09 02 F6 | 	mov	_var05, _var03
19460     01 08 66 F0 | 	shl	_var05, #1
19464     02 09 02 F1 | 	add	_var05, _var03
19468     02 08 66 F0 | 	shl	_var05, #2
1946c     0C 00 00 FF 
19470     0C E4 85 F1 | 	sub	objptr, ##6156
19474     F2 08 02 F1 | 	add	_var05, objptr
19478     04 01 62 FC | 	wrlong	_var01, _var05
1947c     0C 00 00 FF 
19480     0C E4 05 F1 | 	add	objptr, ##6156
19484     F2 08 02 FB | 	rdlong	_var05, objptr
19488     04 05 02 F6 | 	mov	_var03, _var05
1948c     01 04 66 F0 | 	shl	_var03, #1
19490     04 05 02 F1 | 	add	_var03, _var05
19494     02 04 66 F0 | 	shl	_var03, #2
19498     0C 00 00 FF 
1949c     0C E4 85 F1 | 	sub	objptr, ##6156
194a0     F2 04 02 F1 | 	add	_var03, objptr
194a4     04 04 06 F1 | 	add	_var03, #4
194a8     02 07 62 FC | 	wrlong	_var04, _var03
194ac     0C 00 00 FF 
194b0     0C E4 05 F1 | 	add	objptr, ##6156
194b4     F2 08 02 FB | 	rdlong	_var05, objptr
194b8     04 07 02 F6 | 	mov	_var04, _var05
194bc     01 06 66 F0 | 	shl	_var04, #1
194c0     04 07 02 F1 | 	add	_var04, _var05
194c4     02 06 66 F0 | 	shl	_var04, #2
194c8     0C 00 00 FF 
194cc     0C E4 85 F1 | 	sub	objptr, ##6156
194d0     F2 06 02 F1 | 	add	_var04, objptr
194d4     08 06 06 F1 | 	add	_var04, #8
194d8     03 03 62 FC | 	wrlong	_var02, _var04
194dc     0C 00 00 FF 
194e0     0C E4 05 F1 | 	add	objptr, ##6156
194e4     F2 00 02 FB | 	rdlong	_var01, objptr
194e8     01 00 06 F1 | 	add	_var01, #1
194ec     F2 00 62 FC | 	wrlong	_var01, objptr
194f0     43 00 00 FF 
194f4     58 E4 85 F1 | 	sub	objptr, ##34392
194f8                 | LR__2020
194f8                 | _do_push_ret
194f8     2D 00 64 FD | 	ret
194fc                 | 
194fc                 | ' 
194fc                 | ' '-------------------- put
194fc                 | ' 
194fc                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
194fc                 | _do_put
194fc     03 4A 05 F6 | 	mov	COUNT_, #3
19500     A8 00 A0 FD | 	call	#pushregs_
19504     28 F0 07 F1 | 	add	ptra, #40
19508     4A 00 00 FF 
1950c     80 E4 05 F1 | 	add	objptr, ##38016
19510     F2 1A 02 FB | 	rdlong	arg05, objptr
19514     0D 19 02 F6 | 	mov	arg04, arg05
19518     01 18 66 F0 | 	shl	arg04, #1
1951c     0D 19 02 F1 | 	add	arg04, arg05
19520     02 18 66 F0 | 	shl	arg04, #2
19524     03 00 00 FF 
19528     04 E4 85 F1 | 	sub	objptr, ##1540
1952c     F2 18 02 F1 | 	add	arg04, objptr
19530     0C 1B 02 FB | 	rdlong	arg05, arg04
19534     A7 1A 62 FC | 	wrlong	arg05, fp
19538                 | ' 
19538                 | ' numpar=compiledline(lineptr_e).result.uresult
19538                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
19538     04 1A 0E F2 | 	cmp	arg05, #4 wz
1953c     47 00 00 FF 
19540     7C E4 85 F1 | 	sub	objptr, ##36476
19544     48 00 90 5D |  if_ne	jmp	#LR__2030
19548     78 41 BF FD | 	call	#_pop
1954c     FF 1A 02 F6 | 	mov	arg05, result3
19550     1C 4E 05 F1 | 	add	fp, #28
19554     A7 FA 61 FC | 	wrlong	result1, fp
19558     04 4E 05 F1 | 	add	fp, #4
1955c     A7 FC 61 FC | 	wrlong	result2, fp
19560     04 4E 05 F1 | 	add	fp, #4
19564     A7 1A 62 FC | 	wrlong	arg05, fp
19568     08 4E 85 F1 | 	sub	fp, #8
1956c     A7 12 02 F6 | 	mov	arg01, fp
19570     1C 4E 85 F1 | 	sub	fp, #28
19574     30 43 BF FD | 	call	#_converttoint
19578     52 00 00 FF 
1957c     0C E5 05 F1 | 	add	objptr, ##42252
19580     F2 FA 61 FC | 	wrlong	result1, objptr
19584     52 00 00 FF 
19588     0C E5 85 F1 | 	sub	objptr, ##42252
1958c     18 00 90 FD | 	jmp	#LR__2031
19590                 | LR__2030
19590     52 00 00 FF 
19594     0C E5 05 F1 | 	add	objptr, ##42252
19598     FF FF FF FF 
1959c     F2 FE 6B FC | 	wrlong	##-1, objptr
195a0     52 00 00 FF 
195a4     0C E5 85 F1 | 	sub	objptr, ##42252
195a8                 | LR__2031
195a8                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
195a8     A7 1A 02 FB | 	rdlong	arg05, fp
195ac     03 1A 56 F2 | 	cmps	arg05, #3 wc
195b0     40 00 90 CD |  if_b	jmp	#LR__2032
195b4     0C 41 BF FD | 	call	#_pop
195b8     FF 1A 02 F6 | 	mov	arg05, result3
195bc     1C 4E 05 F1 | 	add	fp, #28
195c0     A7 FA 61 FC | 	wrlong	result1, fp
195c4     04 4E 05 F1 | 	add	fp, #4
195c8     A7 FC 61 FC | 	wrlong	result2, fp
195cc     04 4E 05 F1 | 	add	fp, #4
195d0     A7 1A 62 FC | 	wrlong	arg05, fp
195d4     08 4E 85 F1 | 	sub	fp, #8
195d8     A7 12 02 F6 | 	mov	arg01, fp
195dc     1C 4E 85 F1 | 	sub	fp, #28
195e0     C4 42 BF FD | 	call	#_converttoint
195e4     08 4E 05 F1 | 	add	fp, #8
195e8     A7 FA 61 FC | 	wrlong	result1, fp
195ec     08 4E 85 F1 | 	sub	fp, #8
195f0     0C 00 90 FD | 	jmp	#LR__2033
195f4                 | LR__2032
195f4     08 4E 05 F1 | 	add	fp, #8
195f8     A7 02 68 FC | 	wrlong	#1, fp
195fc     08 4E 85 F1 | 	sub	fp, #8
19600                 | LR__2033
19600                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
19600     A7 18 02 FB | 	rdlong	arg04, fp
19604     02 18 56 F2 | 	cmps	arg04, #2 wc
19608     3C 00 90 CD |  if_b	jmp	#LR__2034
1960c     B4 40 BF FD | 	call	#_pop
19610     FF 18 02 F6 | 	mov	arg04, result3
19614     1C 4E 05 F1 | 	add	fp, #28
19618     A7 FA 61 FC | 	wrlong	result1, fp
1961c     04 4E 05 F1 | 	add	fp, #4
19620     A7 FC 61 FC | 	wrlong	result2, fp
19624     04 4E 05 F1 | 	add	fp, #4
19628     A7 18 62 FC | 	wrlong	arg04, fp
1962c     08 4E 85 F1 | 	sub	fp, #8
19630     A7 12 02 F6 | 	mov	arg01, fp
19634     1C 4E 85 F1 | 	sub	fp, #28
19638     6C 42 BF FD | 	call	#_converttoint
1963c     0C 4E 05 F1 | 	add	fp, #12
19640     A7 FA 61 FC | 	wrlong	result1, fp
19644     0C 4E 85 F1 | 	sub	fp, #12
19648                 | LR__2034
19648     78 40 BF FD | 	call	#_pop
1964c     FF 18 02 F6 | 	mov	arg04, result3
19650     1C 4E 05 F1 | 	add	fp, #28
19654     A7 FA 61 FC | 	wrlong	result1, fp
19658     04 4E 05 F1 | 	add	fp, #4
1965c     A7 FC 61 FC | 	wrlong	result2, fp
19660     04 4E 05 F1 | 	add	fp, #4
19664     A7 18 62 FC | 	wrlong	arg04, fp
19668     08 4E 85 F1 | 	sub	fp, #8
1966c     A7 12 02 F6 | 	mov	arg01, fp
19670     1C 4E 85 F1 | 	sub	fp, #28
19674     30 42 BF FD | 	call	#_converttoint
19678     04 4E 05 F1 | 	add	fp, #4
1967c     A7 FA 61 FC | 	wrlong	result1, fp
19680     10 4E 05 F1 | 	add	fp, #16
19684     A7 26 02 FB | 	rdlong	local01, fp
19688     14 4E 85 F1 | 	sub	fp, #20
1968c     02 26 66 F0 | 	shl	local01, #2
19690     50 00 00 FF 
19694     C4 E4 05 F1 | 	add	objptr, ##41156
19698     F2 26 02 F1 | 	add	local01, objptr
1969c     13 01 68 FC | 	wrlong	#0, local01
196a0                 | ' t1=pop() : channel=converttoint(t1)
196a0                 | ' getres(j)=0
196a0                 | ' if pos>=0 then
196a0     02 00 00 FF 
196a4     48 E4 05 F1 | 	add	objptr, ##1096
196a8     F2 28 02 FB | 	rdlong	local02, objptr
196ac     52 00 00 FF 
196b0     0C E5 85 F1 | 	sub	objptr, ##42252
196b4     00 28 56 F2 | 	cmps	local02, #0 wc
196b8     C0 01 90 CD |  if_b	jmp	#LR__2040
196bc     10 4E 05 F1 | 	add	fp, #16
196c0     A7 00 68 FC | 	wrlong	#0, fp
196c4     10 4E 85 F1 | 	sub	fp, #16
196c8                 | '    i=0: do
196c8                 | LR__2035
196c8     14 4E 05 F1 | 	add	fp, #20
196cc     A7 00 68 FC | 	wrlong	#0, fp
196d0     14 4E 85 F1 | 	sub	fp, #20
196d4                 | '    j=0: do    
196d4                 | LR__2036
196d4                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
196d4     0C 4E 05 F1 | 	add	fp, #12
196d8     A7 28 02 FB | 	rdlong	local02, fp
196dc     0C 4E 85 F1 | 	sub	fp, #12
196e0     00 04 00 FF 
196e4     00 28 56 F2 | 	cmps	local02, ##524288 wc
196e8     4C 00 90 3D |  if_ae	jmp	#LR__2037
196ec     14 4E 05 F1 | 	add	fp, #20
196f0     A7 28 02 FB | 	rdlong	local02, fp
196f4     14 27 02 F6 | 	mov	local01, local02
196f8     4E 00 00 FF 
196fc     B4 E4 05 F1 | 	add	objptr, ##40116
19700     F2 26 02 F1 | 	add	local01, objptr
19704     08 4E 85 F1 | 	sub	fp, #8
19708     A7 12 02 FB | 	rdlong	arg01, fp
1970c     04 4E 05 F1 | 	add	fp, #4
19710     A7 18 02 FB | 	rdlong	arg04, fp
19714     0A 18 66 F0 | 	shl	arg04, #10
19718     0C 13 02 F1 | 	add	arg01, arg04
1971c     10 4E 85 F1 | 	sub	fp, #16
19720     14 13 02 F1 | 	add	arg01, local02
19724     09 FB C1 FA | 	rdbyte	result1, arg01
19728     4E 00 00 FF 
1972c     B4 E4 85 F1 | 	sub	objptr, ##40116
19730     13 FB 41 FC | 	wrbyte	result1, local01
19734     48 00 90 FD | 	jmp	#LR__2038
19738                 | LR__2037
19738     14 4E 05 F1 | 	add	fp, #20
1973c     A7 28 02 FB | 	rdlong	local02, fp
19740     14 27 02 F6 | 	mov	local01, local02
19744     4E 00 00 FF 
19748     B4 E4 05 F1 | 	add	objptr, ##40116
1974c     F2 26 02 F1 | 	add	local01, objptr
19750     08 4E 85 F1 | 	sub	fp, #8
19754     A7 12 02 FB | 	rdlong	arg01, fp
19758     04 4E 05 F1 | 	add	fp, #4
1975c     A7 18 02 FB | 	rdlong	arg04, fp
19760     0A 18 66 F0 | 	shl	arg04, #10
19764     0C 13 02 F1 | 	add	arg01, arg04
19768     10 4E 85 F1 | 	sub	fp, #16
1976c     14 13 02 F1 | 	add	arg01, local02
19770     4E 00 00 FF 
19774     B4 E4 85 F1 | 	sub	objptr, ##40116
19778     50 A0 B0 FD | 	call	#_pspeek
1977c     13 FB 41 FC | 	wrbyte	result1, local01
19780                 | LR__2038
19780     14 4E 05 F1 | 	add	fp, #20
19784     A7 28 02 FB | 	rdlong	local02, fp
19788     01 28 06 F1 | 	add	local02, #1
1978c     A7 28 62 FC | 	wrlong	local02, fp
19790     14 4E 85 F1 | 	sub	fp, #20
19794     02 00 00 FF 
19798     00 28 56 F2 | 	cmps	local02, ##1024 wc
1979c     2C 00 90 3D |  if_ae	jmp	#LR__2039
197a0     10 4E 05 F1 | 	add	fp, #16
197a4     A7 26 02 FB | 	rdlong	local01, fp
197a8     0A 26 66 F0 | 	shl	local01, #10
197ac     04 4E 05 F1 | 	add	fp, #4
197b0     A7 28 02 FB | 	rdlong	local02, fp
197b4     14 27 02 F1 | 	add	local01, local02
197b8     0C 4E 85 F1 | 	sub	fp, #12
197bc     A7 28 02 FB | 	rdlong	local02, fp
197c0     08 4E 85 F1 | 	sub	fp, #8
197c4     14 27 5A F2 | 	cmps	local01, local02 wcz
197c8     08 FF 9F ED |  if_be	jmp	#LR__2036
197cc                 | LR__2039
197cc                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
197cc     04 4E 05 F1 | 	add	fp, #4
197d0     A7 12 02 FB | 	rdlong	arg01, fp
197d4     52 00 00 FF 
197d8     0C E5 05 F1 | 	add	objptr, ##42252
197dc     F2 14 02 FB | 	rdlong	arg02, objptr
197e0     01 14 06 F1 | 	add	arg02, #1
197e4     04 00 00 FF 
197e8     58 E4 85 F1 | 	sub	objptr, ##2136
197ec     F2 16 02 F6 | 	mov	arg03, objptr
197f0     4E 00 00 FF 
197f4     B4 E4 85 F1 | 	sub	objptr, ##40116
197f8     04 4E 05 F1 | 	add	fp, #4
197fc     A7 18 02 FB | 	rdlong	arg04, fp
19800     08 4E 85 F1 | 	sub	fp, #8
19804     01 1A 06 F6 | 	mov	arg05, #1
19808     68 E5 B0 FD | 	call	#__system___basic_put
1980c     18 4E 05 F1 | 	add	fp, #24
19810     A7 FA 61 FC | 	wrlong	result1, fp
19814     14 4E 85 F1 | 	sub	fp, #20
19818     A7 26 02 FB | 	rdlong	local01, fp
1981c     02 26 66 F0 | 	shl	local01, #2
19820     50 00 00 FF 
19824     C4 E4 05 F1 | 	add	objptr, ##41156
19828     F2 26 02 F1 | 	add	local01, objptr
1982c     13 FB 61 FC | 	wrlong	result1, local01
19830                 | '    if 1024*i+j>amount then exit loop
19830     0C 4E 05 F1 | 	add	fp, #12
19834     A7 28 02 FB | 	rdlong	local02, fp
19838     0A 28 66 F0 | 	shl	local02, #10
1983c     04 4E 05 F1 | 	add	fp, #4
19840     A7 26 02 FB | 	rdlong	local01, fp
19844     13 29 02 F1 | 	add	local02, local01
19848     0C 4E 85 F1 | 	sub	fp, #12
1984c     A7 26 02 FB | 	rdlong	local01, fp
19850     08 4E 85 F1 | 	sub	fp, #8
19854     13 29 5A F2 | 	cmps	local02, local01 wcz
19858     50 00 00 FF 
1985c     C4 E4 85 F1 | 	sub	objptr, ##41156
19860     CC 01 90 1D |  if_a	jmp	#LR__2047
19864     10 4E 05 F1 | 	add	fp, #16
19868     A7 28 02 FB | 	rdlong	local02, fp
1986c     01 28 06 F1 | 	add	local02, #1
19870     A7 28 62 FC | 	wrlong	local02, fp
19874     10 4E 85 F1 | 	sub	fp, #16
19878     4C FE 9F FD | 	jmp	#LR__2035
1987c                 | LR__2040
1987c     10 4E 05 F1 | 	add	fp, #16
19880     A7 00 68 FC | 	wrlong	#0, fp
19884     10 4E 85 F1 | 	sub	fp, #16
19888                 | '    i=0: do
19888                 | LR__2041
19888     14 4E 05 F1 | 	add	fp, #20
1988c     A7 00 68 FC | 	wrlong	#0, fp
19890     14 4E 85 F1 | 	sub	fp, #20
19894                 | '    j=0: do  
19894                 | LR__2042
19894                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
19894     0C 4E 05 F1 | 	add	fp, #12
19898     A7 28 02 FB | 	rdlong	local02, fp
1989c     0C 4E 85 F1 | 	sub	fp, #12
198a0     00 04 00 FF 
198a4     00 28 56 F2 | 	cmps	local02, ##524288 wc
198a8     4C 00 90 3D |  if_ae	jmp	#LR__2043
198ac     14 4E 05 F1 | 	add	fp, #20
198b0     A7 28 02 FB | 	rdlong	local02, fp
198b4     14 27 02 F6 | 	mov	local01, local02
198b8     4E 00 00 FF 
198bc     B4 E4 05 F1 | 	add	objptr, ##40116
198c0     F2 26 02 F1 | 	add	local01, objptr
198c4     08 4E 85 F1 | 	sub	fp, #8
198c8     A7 12 02 FB | 	rdlong	arg01, fp
198cc     04 4E 05 F1 | 	add	fp, #4
198d0     A7 18 02 FB | 	rdlong	arg04, fp
198d4     0A 18 66 F0 | 	shl	arg04, #10
198d8     0C 13 02 F1 | 	add	arg01, arg04
198dc     10 4E 85 F1 | 	sub	fp, #16
198e0     14 13 02 F1 | 	add	arg01, local02
198e4     09 FB C1 FA | 	rdbyte	result1, arg01
198e8     4E 00 00 FF 
198ec     B4 E4 85 F1 | 	sub	objptr, ##40116
198f0     13 FB 41 FC | 	wrbyte	result1, local01
198f4     48 00 90 FD | 	jmp	#LR__2044
198f8                 | LR__2043
198f8     14 4E 05 F1 | 	add	fp, #20
198fc     A7 28 02 FB | 	rdlong	local02, fp
19900     14 27 02 F6 | 	mov	local01, local02
19904     4E 00 00 FF 
19908     B4 E4 05 F1 | 	add	objptr, ##40116
1990c     F2 26 02 F1 | 	add	local01, objptr
19910     08 4E 85 F1 | 	sub	fp, #8
19914     A7 12 02 FB | 	rdlong	arg01, fp
19918     04 4E 05 F1 | 	add	fp, #4
1991c     A7 18 02 FB | 	rdlong	arg04, fp
19920     0A 18 66 F0 | 	shl	arg04, #10
19924     0C 13 02 F1 | 	add	arg01, arg04
19928     10 4E 85 F1 | 	sub	fp, #16
1992c     14 13 02 F1 | 	add	arg01, local02
19930     4E 00 00 FF 
19934     B4 E4 85 F1 | 	sub	objptr, ##40116
19938     90 9E B0 FD | 	call	#_pspeek
1993c     13 FB 41 FC | 	wrbyte	result1, local01
19940                 | LR__2044
19940     14 4E 05 F1 | 	add	fp, #20
19944     A7 28 02 FB | 	rdlong	local02, fp
19948     01 28 06 F1 | 	add	local02, #1
1994c     A7 28 62 FC | 	wrlong	local02, fp
19950     14 4E 85 F1 | 	sub	fp, #20
19954     02 00 00 FF 
19958     00 28 56 F2 | 	cmps	local02, ##1024 wc
1995c     2C 00 90 3D |  if_ae	jmp	#LR__2045
19960     10 4E 05 F1 | 	add	fp, #16
19964     A7 26 02 FB | 	rdlong	local01, fp
19968     0A 26 66 F0 | 	shl	local01, #10
1996c     04 4E 05 F1 | 	add	fp, #4
19970     A7 28 02 FB | 	rdlong	local02, fp
19974     14 27 02 F1 | 	add	local01, local02
19978     0C 4E 85 F1 | 	sub	fp, #12
1997c     A7 28 02 FB | 	rdlong	local02, fp
19980     08 4E 85 F1 | 	sub	fp, #8
19984     14 27 5A F2 | 	cmps	local01, local02 wcz
19988     08 FF 9F ED |  if_be	jmp	#LR__2042
1998c                 | LR__2045
1998c                 | '    put #channel,,block(0),amount, r : getres(channel)=r
1998c     04 4E 05 F1 | 	add	fp, #4
19990     A7 12 02 FB | 	rdlong	arg01, fp
19994     4E 00 00 FF 
19998     B4 E4 05 F1 | 	add	objptr, ##40116
1999c     F2 16 02 F6 | 	mov	arg03, objptr
199a0     4E 00 00 FF 
199a4     B4 E4 85 F1 | 	sub	objptr, ##40116
199a8     04 4E 05 F1 | 	add	fp, #4
199ac     A7 18 02 FB | 	rdlong	arg04, fp
199b0     08 4E 85 F1 | 	sub	fp, #8
199b4     00 14 06 F6 | 	mov	arg02, #0
199b8     01 1A 06 F6 | 	mov	arg05, #1
199bc     B4 E3 B0 FD | 	call	#__system___basic_put
199c0     18 4E 05 F1 | 	add	fp, #24
199c4     A7 FA 61 FC | 	wrlong	result1, fp
199c8     14 4E 85 F1 | 	sub	fp, #20
199cc     A7 26 02 FB | 	rdlong	local01, fp
199d0     02 26 66 F0 | 	shl	local01, #2
199d4     50 00 00 FF 
199d8     C4 E4 05 F1 | 	add	objptr, ##41156
199dc     F2 26 02 F1 | 	add	local01, objptr
199e0     13 FB 61 FC | 	wrlong	result1, local01
199e4                 | '    if 1024*i+j>amount then exit loop
199e4     0C 4E 05 F1 | 	add	fp, #12
199e8     A7 28 02 FB | 	rdlong	local02, fp
199ec     0A 28 66 F0 | 	shl	local02, #10
199f0     04 4E 05 F1 | 	add	fp, #4
199f4     A7 26 02 FB | 	rdlong	local01, fp
199f8     13 29 02 F1 | 	add	local02, local01
199fc     0C 4E 85 F1 | 	sub	fp, #12
19a00     A7 2A 02 FB | 	rdlong	local03, fp
19a04     08 4E 85 F1 | 	sub	fp, #8
19a08     15 29 5A F2 | 	cmps	local02, local03 wcz
19a0c     50 00 00 FF 
19a10     C4 E4 85 F1 | 	sub	objptr, ##41156
19a14     18 00 90 1D |  if_a	jmp	#LR__2046
19a18     10 4E 05 F1 | 	add	fp, #16
19a1c     A7 28 02 FB | 	rdlong	local02, fp
19a20     01 28 06 F1 | 	add	local02, #1
19a24     A7 28 62 FC | 	wrlong	local02, fp
19a28     10 4E 85 F1 | 	sub	fp, #16
19a2c     58 FE 9F FD | 	jmp	#LR__2041
19a30                 | LR__2046
19a30                 | LR__2047
19a30     A7 F0 03 F6 | 	mov	ptra, fp
19a34     B2 00 A0 FD | 	call	#popregs_
19a38                 | _do_put_ret
19a38     2D 00 64 FD | 	ret
19a3c                 | 
19a3c                 | ' 
19a3c                 | ' '-------------------- rad
19a3c                 | ' 
19a3c                 | ' sub do_rad
19a3c                 | _do_rad
19a3c     52 00 00 FF 
19a40     A8 E4 05 F1 | 	add	objptr, ##42152
19a44     00 C0 9F FF 
19a48     F2 00 68 FC | 	wrlong	##1065353216, objptr
19a4c     04 E4 05 F1 | 	add	objptr, #4
19a50     00 C0 9F FF 
19a54     F2 00 68 FC | 	wrlong	##1065353216, objptr
19a58     52 00 00 FF 
19a5c     AC E4 85 F1 | 	sub	objptr, ##42156
19a60                 | _do_rad_ret
19a60     2D 00 64 FD | 	ret
19a64                 | 
19a64                 | ' 
19a64                 | ' '-------------------- rdpin
19a64                 | ' 
19a64                 | ' sub do_rdpin
19a64                 | _do_rdpin
19a64     00 4A 05 F6 | 	mov	COUNT_, #0
19a68     A8 00 A0 FD | 	call	#pushregs_
19a6c     0C F0 07 F1 | 	add	ptra, #12
19a70     50 3C BF FD | 	call	#_pop
19a74     A7 FA 61 FC | 	wrlong	result1, fp
19a78     04 4E 05 F1 | 	add	fp, #4
19a7c     A7 FC 61 FC | 	wrlong	result2, fp
19a80     04 4E 05 F1 | 	add	fp, #4
19a84     A7 FE 61 FC | 	wrlong	result3, fp
19a88     08 4E 85 F1 | 	sub	fp, #8
19a8c     A7 12 02 F6 | 	mov	arg01, fp
19a90     14 3E BF FD | 	call	#_converttoint
19a94     FD FA 89 FA | 	rdpin	result1, result1
19a98     52 00 00 FF 
19a9c     10 E5 05 F1 | 	add	objptr, ##42256
19aa0     F2 FA 61 FC | 	wrlong	result1, objptr
19aa4     52 00 00 FF 
19aa8     10 E5 85 F1 | 	sub	objptr, ##42256
19aac     08 4E 05 F1 | 	add	fp, #8
19ab0     A7 3A 68 FC | 	wrlong	#29, fp
19ab4     08 4E 85 F1 | 	sub	fp, #8
19ab8     A7 08 68 FC | 	wrlong	#4, fp
19abc     A7 12 02 F6 | 	mov	arg01, fp
19ac0     98 3C BF FD | 	call	#_push
19ac4     A7 F0 03 F6 | 	mov	ptra, fp
19ac8     B2 00 A0 FD | 	call	#popregs_
19acc                 | _do_rdpin_ret
19acc     2D 00 64 FD | 	ret
19ad0                 | 
19ad0                 | ' 
19ad0                 | ' ' ----------------  read
19ad0                 | ' 
19ad0                 | ' function read_next_line() as string
19ad0                 | _read_next_line
19ad0     07 4A 05 F6 | 	mov	COUNT_, #7
19ad4     A8 00 A0 FD | 	call	#pushregs_
19ad8                 | ' if dataptr=$7FFFFFFF then return("")
19ad8     50 00 00 FF 
19adc     2C E5 05 F1 | 	add	objptr, ##41260
19ae0     F2 26 02 FB | 	rdlong	local01, objptr
19ae4     50 00 00 FF 
19ae8     2C E5 85 F1 | 	sub	objptr, ##41260
19aec     FF FF 3F FF 
19af0     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
19af4     BA 01 00 AF 
19af8     FD FB 05 A6 |  if_e	mov	result1, ##@LR__5984
19afc     BC 01 90 AD |  if_e	jmp	#LR__2057
19b00                 | ' do
19b00                 | LR__2050
19b00     50 00 00 FF 
19b04     08 E5 05 F1 | 	add	objptr, ##41224
19b08     F2 12 02 F6 | 	mov	arg01, objptr
19b0c     24 E4 05 F1 | 	add	objptr, #36
19b10     F2 14 02 FB | 	rdlong	arg02, objptr
19b14     24 16 06 F6 | 	mov	arg03, #36
19b18     45 00 00 FF 
19b1c     60 E4 85 F1 | 	sub	objptr, ##35424
19b20     C4 C7 B0 FD | 	call	#_psram_spin2_read1
19b24                 | '  ' print dataptr
19b24                 | '   psram.read1(varptr(dataheader),dataptr,36) 
19b24                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
19b24     45 00 00 FF 
19b28     3C E4 05 F1 | 	add	objptr, ##35388
19b2c     F2 26 02 FB | 	rdlong	local01, objptr
19b30     50 00 00 FF 
19b34     08 E5 85 F1 | 	sub	objptr, ##41224
19b38     FF FF 7F FF 
19b3c     FF 27 0E F2 | 	cmp	local01, ##-1 wz
19b40     50 00 00 5F 
19b44     1C E5 05 51 |  if_ne	add	objptr, ##41244
19b48     F2 26 02 5B |  if_ne	rdlong	local01, objptr
19b4c     10 E4 05 51 |  if_ne	add	objptr, #16
19b50     F2 26 62 5C |  if_ne	wrlong	local01, objptr
19b54     50 00 00 5F 
19b58     2C E5 85 51 |  if_ne	sub	objptr, ##41260
19b5c     50 00 00 FF 
19b60     1C E5 05 F1 | 	add	objptr, ##41244
19b64     F2 26 02 FB | 	rdlong	local01, objptr
19b68     50 00 00 FF 
19b6c     1C E5 85 F1 | 	sub	objptr, ##41244
19b70     FF FF 3F FF 
19b74     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
19b78     50 00 00 5F 
19b7c     08 E5 05 51 |  if_ne	add	objptr, ##41224
19b80     F2 28 02 5B |  if_ne	rdlong	local02, objptr
19b84     50 00 00 5F 
19b88     08 E5 85 51 |  if_ne	sub	objptr, ##41224
19b8c     FF FF 7F 5F 
19b90     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
19b94     50 00 00 5F 
19b98     28 E5 05 51 |  if_ne	add	objptr, ##41256
19b9c     F2 2A 02 5B |  if_ne	rdlong	local03, objptr
19ba0     50 00 00 5F 
19ba4     28 E5 85 51 |  if_ne	sub	objptr, ##41256
19ba8     B7 2A 0E 52 |  if_ne	cmp	local03, #183 wz
19bac     50 FF 9F 5D |  if_ne	jmp	#LR__2050
19bb0                 | ' if dataheader(8)=token_data then 
19bb0     50 00 00 FF 
19bb4     28 E5 05 F1 | 	add	objptr, ##41256
19bb8     F2 26 02 FB | 	rdlong	local01, objptr
19bbc     50 00 00 FF 
19bc0     28 E5 85 F1 | 	sub	objptr, ##41256
19bc4     B7 26 0E F2 | 	cmp	local01, #183 wz
19bc8     E0 00 90 5D |  if_ne	jmp	#LR__2055
19bcc     50 00 00 FF 
19bd0     10 E5 05 F1 | 	add	objptr, ##41232
19bd4     F2 26 02 FB | 	rdlong	local01, objptr
19bd8     01 00 00 FF 
19bdc     E0 E5 05 F1 | 	add	objptr, ##992
19be0     F2 26 62 FC | 	wrlong	local01, objptr
19be4     01 00 00 FF 
19be8     DC E5 85 F1 | 	sub	objptr, ##988
19bec     F2 2C 02 FB | 	rdlong	local04, objptr
19bf0     01 00 00 FF 
19bf4     D4 E5 05 F1 | 	add	objptr, ##980
19bf8     F2 2C 62 FC | 	wrlong	local04, objptr
19bfc                 | '  'print "data found at line "; dataheader(0)
19bfc                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
19bfc     00 2E 06 F6 | 	mov	local05, #0
19c00     52 00 00 FF 
19c04     E8 E4 85 F1 | 	sub	objptr, ##42216
19c08                 | LR__2051
19c08     16 2F 52 F2 | 	cmps	local05, local04 wc
19c0c     3C 00 90 3D |  if_ae	jmp	#LR__2052
19c10     52 00 00 FF 
19c14     F0 E4 05 F1 | 	add	objptr, ##42224
19c18     F2 12 02 FB | 	rdlong	arg01, objptr
19c1c     52 00 00 FF 
19c20     F0 E4 85 F1 | 	sub	objptr, ##42224
19c24     17 13 02 F1 | 	add	arg01, local05
19c28     A0 9B B0 FD | 	call	#_pspeek
19c2c     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
19c30     7C F5 B0 FD | 	call	#__system__Chr_S
19c34     FD 14 02 F6 | 	mov	arg02, result1
19c38     18 13 02 F6 | 	mov	arg01, local06
19c3c     8C D3 B0 FD | 	call	#__system___string_concat
19c40     FD 30 02 F6 | 	mov	local06, result1
19c44     01 2E 06 F1 | 	add	local05, #1
19c48     BC FF 9F FD | 	jmp	#LR__2051
19c4c                 | LR__2052
19c4c     BA 01 00 FF 
19c50     FE 17 06 F6 | 	mov	arg03, ##@LR__5985
19c54     01 12 06 F6 | 	mov	arg01, #1
19c58     18 15 02 F6 | 	mov	arg02, local06
19c5c     D4 F8 B0 FD | 	call	#__system__Instr
19c60     FD 2E 02 F6 | 	mov	local05, result1
19c64     18 13 02 F6 | 	mov	arg01, local06
19c68     09 33 02 F6 | 	mov	local07, arg01
19c6c     97 06 48 FB | 	callpa	#(@LR__2054-@LR__2053)>>2,fcache_load_ptr_
19c70                 | LR__2053
19c70     19 FB C9 FA | 	rdbyte	result1, local07 wz
19c74     01 32 06 51 |  if_ne	add	local07, #1
19c78     F4 FF 9F 5D |  if_ne	jmp	#LR__2053
19c7c                 | LR__2054
19c7c     09 33 82 F1 | 	sub	local07, arg01
19c80     19 15 02 F6 | 	mov	arg02, local07
19c84     17 15 82 F1 | 	sub	arg02, local05
19c88     04 14 86 F1 | 	sub	arg02, #4
19c8c     18 13 02 F6 | 	mov	arg01, local06
19c90     E0 F3 B0 FD | 	call	#__system__Right_S
19c94     FD 12 02 F6 | 	mov	arg01, result1
19c98     E0 F7 B0 FD | 	call	#__system__RTrim_S
19c9c     FD 12 02 F6 | 	mov	arg01, result1
19ca0     18 F7 B0 FD | 	call	#__system__LTrim_S
19ca4     FD 30 02 F6 | 	mov	local06, result1
19ca8     0C 00 90 FD | 	jmp	#LR__2056
19cac                 | LR__2055
19cac                 | '   return ("") 'todo proper err
19cac     BB 01 00 FF 
19cb0     03 FA 05 F6 | 	mov	result1, ##@LR__5986
19cb4     04 00 90 FD | 	jmp	#LR__2057
19cb8                 | LR__2056
19cb8                 | ' return readline
19cb8     18 FB 01 F6 | 	mov	result1, local06
19cbc                 | LR__2057
19cbc     A7 F0 03 F6 | 	mov	ptra, fp
19cc0     B2 00 A0 FD | 	call	#popregs_
19cc4                 | _read_next_line_ret
19cc4     2D 00 64 FD | 	ret
19cc8                 | 
19cc8                 | ' 
19cc8                 | ' sub do_read
19cc8                 | _do_read
19cc8     11 4A 05 F6 | 	mov	COUNT_, #17
19ccc     A8 00 A0 FD | 	call	#pushregs_
19cd0     58 F1 07 F1 | 	add	ptra, #344
19cd4     4A 00 00 FF 
19cd8     80 E4 05 F1 | 	add	objptr, ##38016
19cdc     F2 FE 01 FB | 	rdlong	result3, objptr
19ce0     FF FC 01 F6 | 	mov	result2, result3
19ce4     01 FC 65 F0 | 	shl	result2, #1
19ce8     FF FC 01 F1 | 	add	result2, result3
19cec     02 FC 65 F0 | 	shl	result2, #2
19cf0     03 00 00 FF 
19cf4     04 E4 85 F1 | 	sub	objptr, ##1540
19cf8     F2 FC 01 F1 | 	add	result2, objptr
19cfc     FE FC 01 FB | 	rdlong	result2, result2
19d00     08 4E 05 F1 | 	add	fp, #8
19d04     A7 FC 61 FC | 	wrlong	result2, fp
19d08                 | ' 
19d08                 | ' 
19d08                 | ' numpar=compiledline(lineptr_e).result.uresult
19d08                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
19d08     08 4E 85 F1 | 	sub	fp, #8
19d0c     01 FC 15 F2 | 	cmp	result2, #1 wc
19d10     47 00 00 FF 
19d14     7C E4 85 F1 | 	sub	objptr, ##36476
19d18     14 00 90 CD |  if_b	jmp	#LR__2060
19d1c     08 4E 05 F1 | 	add	fp, #8
19d20     A7 FC 01 FB | 	rdlong	result2, fp
19d24     08 4E 85 F1 | 	sub	fp, #8
19d28     41 FC 15 F2 | 	cmp	result2, #65 wc
19d2c     50 00 90 CD |  if_b	jmp	#LR__2061
19d30                 | LR__2060
19d30     00 12 06 F6 | 	mov	arg01, #0
19d34     60 2F B1 FD | 	call	#__system___getiolock_0613
19d38     FD 12 02 F6 | 	mov	arg01, result1
19d3c     30 D2 B0 FD | 	call	#__system___lockmem
19d40     BB 01 00 FF 
19d44     04 14 06 F6 | 	mov	arg02, ##@LR__5987
19d48     00 12 06 F6 | 	mov	arg01, #0
19d4c     00 16 06 F6 | 	mov	arg03, #0
19d50     10 DF B0 FD | 	call	#__system___basic_print_string
19d54     00 12 06 F6 | 	mov	arg01, #0
19d58     3C 2F B1 FD | 	call	#__system___getiolock_0613
19d5c     FD 00 68 FC | 	wrlong	#0, result1
19d60     50 00 00 FF 
19d64     F0 E4 05 F1 | 	add	objptr, ##41200
19d68     F2 14 02 FB | 	rdlong	arg02, objptr
19d6c     50 00 00 FF 
19d70     F0 E4 85 F1 | 	sub	objptr, ##41200
19d74     27 12 06 F6 | 	mov	arg01, #39
19d78     D8 97 B0 FD | 	call	#_printerror
19d7c     D0 0C 90 FD | 	jmp	#LR__2111
19d80                 | LR__2061
19d80     08 4E 05 F1 | 	add	fp, #8
19d84     A7 16 02 FB | 	rdlong	arg03, fp
19d88     01 16 86 F1 | 	sub	arg03, #1
19d8c     28 4F 05 F1 | 	add	fp, #296
19d90     A7 16 62 FC | 	wrlong	arg03, fp
19d94     30 4F 85 F1 | 	sub	fp, #304
19d98                 | ' i=numpar-1
19d98                 | ' if readline="" then readline=read_next_line() ': print readline
19d98     52 00 00 FF 
19d9c     DC E4 05 F1 | 	add	objptr, ##42204
19da0     F2 12 02 FB | 	rdlong	arg01, objptr
19da4     52 00 00 FF 
19da8     DC E4 85 F1 | 	sub	objptr, ##42204
19dac     BB 01 00 FF 
19db0     0E 14 06 F6 | 	mov	arg02, ##@LR__5988
19db4     E0 D1 B0 FD | 	call	#__system___string_cmp
19db8     00 FA 0D F2 | 	cmp	result1, #0 wz
19dbc     18 00 90 5D |  if_ne	jmp	#LR__2062
19dc0     0C FD BF FD | 	call	#_read_next_line
19dc4     52 00 00 FF 
19dc8     DC E4 05 F1 | 	add	objptr, ##42204
19dcc     F2 FA 61 FC | 	wrlong	result1, objptr
19dd0     52 00 00 FF 
19dd4     DC E4 85 F1 | 	sub	objptr, ##42204
19dd8                 | LR__2062
19dd8                 | ' if readline="" then printerror(55,runheader(0)) :return
19dd8     52 00 00 FF 
19ddc     DC E4 05 F1 | 	add	objptr, ##42204
19de0     F2 12 02 FB | 	rdlong	arg01, objptr
19de4     52 00 00 FF 
19de8     DC E4 85 F1 | 	sub	objptr, ##42204
19dec     BB 01 00 FF 
19df0     0F 14 06 F6 | 	mov	arg02, ##@LR__5989
19df4     A0 D1 B0 FD | 	call	#__system___string_cmp
19df8     00 FA 0D F2 | 	cmp	result1, #0 wz
19dfc     20 00 90 5D |  if_ne	jmp	#LR__2063
19e00     50 00 00 FF 
19e04     F0 E4 05 F1 | 	add	objptr, ##41200
19e08     F2 14 02 FB | 	rdlong	arg02, objptr
19e0c     50 00 00 FF 
19e10     F0 E4 85 F1 | 	sub	objptr, ##41200
19e14     37 12 06 F6 | 	mov	arg01, #55
19e18     38 97 B0 FD | 	call	#_printerror
19e1c     30 0C 90 FD | 	jmp	#LR__2111
19e20                 | LR__2063
19e20     34 4F 05 F1 | 	add	fp, #308
19e24     A7 00 68 FC | 	wrlong	#0, fp
19e28     2C 4F 85 F1 | 	sub	fp, #300
19e2c     A7 26 02 FB | 	rdlong	local01, fp
19e30     01 26 86 F1 | 	sub	local01, #1
19e34     28 4F 05 F1 | 	add	fp, #296
19e38     A7 26 62 FC | 	wrlong	local01, fp
19e3c     30 4F 85 F1 | 	sub	fp, #304
19e40                 | ' j=0
19e40                 | ' i=numpar-1
19e40                 | ' do
19e40                 | LR__2064
19e40                 | '   do
19e40                 | LR__2065
19e40     52 00 00 FF 
19e44     DC E4 05 F1 | 	add	objptr, ##42204
19e48     F2 14 02 FB | 	rdlong	arg02, objptr
19e4c     52 00 00 FF 
19e50     DC E4 85 F1 | 	sub	objptr, ##42204
19e54     BB 01 00 FF 
19e58     10 16 06 F6 | 	mov	arg03, ##@LR__5990
19e5c     01 12 06 F6 | 	mov	arg01, #1
19e60     D0 F6 B0 FD | 	call	#__system__Instr
19e64     0C 4E 05 F1 | 	add	fp, #12
19e68     A7 FA 61 FC | 	wrlong	result1, fp
19e6c                 | '     comma=instr(1,readline,"'") : if comma>0 then readline=left$(readline,comma-1) ' allows comments in data
19e6c     0C 4E 85 F1 | 	sub	fp, #12
19e70     01 FA 15 F2 | 	cmp	result1, #1 wc
19e74     3C 00 90 CD |  if_b	jmp	#LR__2066
19e78     52 00 00 FF 
19e7c     DC E4 05 F1 | 	add	objptr, ##42204
19e80     F2 12 02 FB | 	rdlong	arg01, objptr
19e84     52 00 00 FF 
19e88     DC E4 85 F1 | 	sub	objptr, ##42204
19e8c     0C 4E 05 F1 | 	add	fp, #12
19e90     A7 14 02 FB | 	rdlong	arg02, fp
19e94     0C 4E 85 F1 | 	sub	fp, #12
19e98     01 14 86 F1 | 	sub	arg02, #1
19e9c     4C F1 B0 FD | 	call	#__system__Left_S
19ea0     52 00 00 FF 
19ea4     DC E4 05 F1 | 	add	objptr, ##42204
19ea8     F2 FA 61 FC | 	wrlong	result1, objptr
19eac     52 00 00 FF 
19eb0     DC E4 85 F1 | 	sub	objptr, ##42204
19eb4                 | LR__2066
19eb4     52 00 00 FF 
19eb8     DC E4 05 F1 | 	add	objptr, ##42204
19ebc     F2 14 02 FB | 	rdlong	arg02, objptr
19ec0     52 00 00 FF 
19ec4     DC E4 85 F1 | 	sub	objptr, ##42204
19ec8     BB 01 00 FF 
19ecc     12 16 06 F6 | 	mov	arg03, ##@LR__5991
19ed0     01 12 06 F6 | 	mov	arg01, #1
19ed4     5C F6 B0 FD | 	call	#__system__Instr
19ed8     0C 4E 05 F1 | 	add	fp, #12
19edc     A7 FA 61 FC | 	wrlong	result1, fp
19ee0                 | '     comma=instr(1,readline,",")  
19ee0                 | '       if comma>0  then 
19ee0     0C 4E 85 F1 | 	sub	fp, #12
19ee4     01 FA 15 F2 | 	cmp	result1, #1 wc
19ee8     98 00 90 CD |  if_b	jmp	#LR__2069
19eec     52 00 00 FF 
19ef0     DC E4 05 F1 | 	add	objptr, ##42204
19ef4     F2 12 02 FB | 	rdlong	arg01, objptr
19ef8     52 00 00 FF 
19efc     DC E4 85 F1 | 	sub	objptr, ##42204
19f00     0C 4E 05 F1 | 	add	fp, #12
19f04     A7 14 02 FB | 	rdlong	arg02, fp
19f08     0C 4E 85 F1 | 	sub	fp, #12
19f0c     01 14 86 F1 | 	sub	arg02, #1
19f10     D8 F0 B0 FD | 	call	#__system__Left_S
19f14     04 4E 05 F1 | 	add	fp, #4
19f18     A7 FA 61 FC | 	wrlong	result1, fp
19f1c     04 4E 85 F1 | 	sub	fp, #4
19f20     52 00 00 FF 
19f24     DC E4 05 F1 | 	add	objptr, ##42204
19f28     F2 12 02 FB | 	rdlong	arg01, objptr
19f2c     09 27 02 F6 | 	mov	local01, arg01
19f30     52 00 00 FF 
19f34     DC E4 85 F1 | 	sub	objptr, ##42204
19f38     09 29 02 F6 | 	mov	local02, arg01
19f3c     97 06 48 FB | 	callpa	#(@LR__2068-@LR__2067)>>2,fcache_load_ptr_
19f40                 | LR__2067
19f40     14 FB C9 FA | 	rdbyte	result1, local02 wz
19f44     01 28 06 51 |  if_ne	add	local02, #1
19f48     F4 FF 9F 5D |  if_ne	jmp	#LR__2067
19f4c                 | LR__2068
19f4c     09 29 82 F1 | 	sub	local02, arg01
19f50     14 15 02 F6 | 	mov	arg02, local02
19f54     0C 4E 05 F1 | 	add	fp, #12
19f58     A7 16 02 FB | 	rdlong	arg03, fp
19f5c     0C 4E 85 F1 | 	sub	fp, #12
19f60     0B 15 82 F1 | 	sub	arg02, arg03
19f64     13 13 02 F6 | 	mov	arg01, local01
19f68     08 F1 B0 FD | 	call	#__system__Right_S
19f6c     52 00 00 FF 
19f70     DC E4 05 F1 | 	add	objptr, ##42204
19f74     F2 FA 61 FC | 	wrlong	result1, objptr
19f78     52 00 00 FF 
19f7c     DC E4 85 F1 | 	sub	objptr, ##42204
19f80     48 00 90 FD | 	jmp	#LR__2070
19f84                 | LR__2069
19f84     52 00 00 FF 
19f88     DC E4 05 F1 | 	add	objptr, ##42204
19f8c     F2 12 02 FB | 	rdlong	arg01, objptr
19f90     52 00 00 FF 
19f94     DC E4 85 F1 | 	sub	objptr, ##42204
19f98     E0 F4 B0 FD | 	call	#__system__RTrim_S
19f9c     FD 12 02 F6 | 	mov	arg01, result1
19fa0     18 F4 B0 FD | 	call	#__system__LTrim_S
19fa4     04 4E 05 F1 | 	add	fp, #4
19fa8     A7 FA 61 FC | 	wrlong	result1, fp
19fac     04 4E 85 F1 | 	sub	fp, #4
19fb0     BB 01 00 FF 
19fb4     14 26 06 F6 | 	mov	local01, ##@LR__5992
19fb8     52 00 00 FF 
19fbc     DC E4 05 F1 | 	add	objptr, ##42204
19fc0     F2 26 62 FC | 	wrlong	local01, objptr
19fc4     52 00 00 FF 
19fc8     DC E4 85 F1 | 	sub	objptr, ##42204
19fcc                 | LR__2070
19fcc                 | '      
19fcc                 | '      if part$<>"" then j=j+1
19fcc     04 4E 05 F1 | 	add	fp, #4
19fd0     A7 12 02 FB | 	rdlong	arg01, fp
19fd4     04 4E 85 F1 | 	sub	fp, #4
19fd8     BB 01 00 FF 
19fdc     15 14 06 F6 | 	mov	arg02, ##@LR__5993
19fe0     B4 CF B0 FD | 	call	#__system___string_cmp
19fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
19fe8     34 4F 05 51 |  if_ne	add	fp, #308
19fec     A7 26 02 5B |  if_ne	rdlong	local01, fp
19ff0     01 26 06 51 |  if_ne	add	local01, #1
19ff4     A7 26 62 5C |  if_ne	wrlong	local01, fp
19ff8     34 4F 85 51 |  if_ne	sub	fp, #308
19ffc     30 4F 05 F1 | 	add	fp, #304
1a000     A7 26 02 FB | 	rdlong	local01, fp
1a004     02 26 66 F0 | 	shl	local01, #2
1a008     04 4F 85 F1 | 	sub	fp, #260
1a00c     A7 26 02 F1 | 	add	local01, fp
1a010     28 4E 85 F1 | 	sub	fp, #40
1a014     A7 FA 01 FB | 	rdlong	result1, fp
1a018     13 FB 61 FC | 	wrlong	result1, local01
1a01c     2C 4F 05 F1 | 	add	fp, #300
1a020     A7 26 02 FB | 	rdlong	local01, fp
1a024     01 26 86 F1 | 	sub	local01, #1
1a028     A7 26 62 FC | 	wrlong	local01, fp
1a02c     30 4F 85 F1 | 	sub	fp, #304
1a030                 | '      args(i)=part$  
1a030                 | '      i=i-1
1a030                 | '     if readline="" then readline=read_next_line() 
1a030     52 00 00 FF 
1a034     DC E4 05 F1 | 	add	objptr, ##42204
1a038     F2 12 02 FB | 	rdlong	arg01, objptr
1a03c     52 00 00 FF 
1a040     DC E4 85 F1 | 	sub	objptr, ##42204
1a044     BB 01 00 FF 
1a048     16 14 06 F6 | 	mov	arg02, ##@LR__5994
1a04c     48 CF B0 FD | 	call	#__system___string_cmp
1a050     00 FA 0D F2 | 	cmp	result1, #0 wz
1a054     18 00 90 5D |  if_ne	jmp	#LR__2071
1a058     74 FA BF FD | 	call	#_read_next_line
1a05c     52 00 00 FF 
1a060     DC E4 05 F1 | 	add	objptr, ##42204
1a064     F2 FA 61 FC | 	wrlong	result1, objptr
1a068     52 00 00 FF 
1a06c     DC E4 85 F1 | 	sub	objptr, ##42204
1a070                 | LR__2071
1a070     30 4F 05 F1 | 	add	fp, #304
1a074     A7 26 02 FB | 	rdlong	local01, fp
1a078     30 4F 85 F1 | 	sub	fp, #304
1a07c     00 26 56 F2 | 	cmps	local01, #0 wc
1a080     28 00 90 CD |  if_b	jmp	#LR__2072
1a084     52 00 00 FF 
1a088     DC E4 05 F1 | 	add	objptr, ##42204
1a08c     F2 12 02 FB | 	rdlong	arg01, objptr
1a090     52 00 00 FF 
1a094     DC E4 85 F1 | 	sub	objptr, ##42204
1a098     BB 01 00 FF 
1a09c     17 14 06 F6 | 	mov	arg02, ##@LR__5995
1a0a0     F4 CE B0 FD | 	call	#__system___string_cmp
1a0a4     00 FA 0D F2 | 	cmp	result1, #0 wz
1a0a8     94 FD 9F 5D |  if_ne	jmp	#LR__2065
1a0ac                 | LR__2072
1a0ac     30 4F 05 F1 | 	add	fp, #304
1a0b0     A7 26 02 FB | 	rdlong	local01, fp
1a0b4     30 4F 85 F1 | 	sub	fp, #304
1a0b8     00 26 56 F2 | 	cmps	local01, #0 wc
1a0bc     80 FD 9F 3D |  if_ae	jmp	#LR__2064
1a0c0                 | ' if j<numpar then printerror(55,runheader(0))
1a0c0     34 4F 05 F1 | 	add	fp, #308
1a0c4     A7 26 02 FB | 	rdlong	local01, fp
1a0c8     2C 4F 85 F1 | 	sub	fp, #300
1a0cc     A7 16 02 FB | 	rdlong	arg03, fp
1a0d0     08 4E 85 F1 | 	sub	fp, #8
1a0d4     0B 27 52 F2 | 	cmps	local01, arg03 wc
1a0d8     50 00 00 CF 
1a0dc     F0 E4 05 C1 |  if_b	add	objptr, ##41200
1a0e0     F2 14 02 CB |  if_b	rdlong	arg02, objptr
1a0e4     50 00 00 CF 
1a0e8     F0 E4 85 C1 |  if_b	sub	objptr, ##41200
1a0ec     37 12 06 C6 |  if_b	mov	arg01, #55
1a0f0     60 94 B0 CD |  if_b	call	#_printerror
1a0f4                 | ' 
1a0f4                 | ' for i=0 to numpar-1
1a0f4     30 4F 05 F1 | 	add	fp, #304
1a0f8     A7 00 68 FC | 	wrlong	#0, fp
1a0fc     28 4F 85 F1 | 	sub	fp, #296
1a100     A7 2A 02 FB | 	rdlong	local03, fp
1a104     08 4E 85 F1 | 	sub	fp, #8
1a108                 | LR__2073
1a108     30 4F 05 F1 | 	add	fp, #304
1a10c     A7 2C 02 FB | 	rdlong	local04, fp
1a110     30 4F 85 F1 | 	sub	fp, #304
1a114     16 27 02 F6 | 	mov	local01, local04
1a118     15 27 52 F2 | 	cmps	local01, local03 wc
1a11c     30 09 90 3D |  if_ae	jmp	#LR__2110
1a120                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
1a120     30 4F 05 F1 | 	add	fp, #304
1a124     A7 16 02 FB | 	rdlong	arg03, fp
1a128     02 16 66 F0 | 	shl	arg03, #2
1a12c     04 4F 85 F1 | 	sub	fp, #260
1a130     A7 16 02 F1 | 	add	arg03, fp
1a134     0B 13 02 FB | 	rdlong	arg01, arg03
1a138     2C 4E 85 F1 | 	sub	fp, #44
1a13c     F0 C7 BE FD | 	call	#_isnum
1a140     FD 2E 02 F6 | 	mov	local05, result1
1a144     30 4F 05 F1 | 	add	fp, #304
1a148     A7 16 02 FB | 	rdlong	arg03, fp
1a14c     02 16 66 F0 | 	shl	arg03, #2
1a150     04 4F 85 F1 | 	sub	fp, #260
1a154     A7 30 02 F6 | 	mov	local06, fp
1a158     A7 16 02 F1 | 	add	arg03, fp
1a15c     0B 13 02 FB | 	rdlong	arg01, arg03
1a160     2C 4E 85 F1 | 	sub	fp, #44
1a164     B4 CB BE FD | 	call	#_isint
1a168     FD 2E 2A F5 | 	andn	local05, result1 wz
1a16c     52 00 00 5F 
1a170     10 E5 05 51 |  if_ne	add	objptr, ##42256
1a174     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
1a178     52 00 00 5F 
1a17c     10 E5 85 51 |  if_ne	sub	objptr, ##42256
1a180                 | '   if isint(args(i)) then r=result_int 
1a180     30 4F 05 F1 | 	add	fp, #304
1a184     A7 2E 02 FB | 	rdlong	local05, fp
1a188     02 2E 66 F0 | 	shl	local05, #2
1a18c     04 4F 85 F1 | 	sub	fp, #260
1a190     A7 2E 02 F1 | 	add	local05, fp
1a194     17 13 02 FB | 	rdlong	arg01, local05
1a198     2C 4E 85 F1 | 	sub	fp, #44
1a19c     7C CB BE FD | 	call	#_isint
1a1a0     00 FA 0D F2 | 	cmp	result1, #0 wz
1a1a4     52 00 00 5F 
1a1a8     10 E5 05 51 |  if_ne	add	objptr, ##42256
1a1ac     F2 38 68 5C |  if_ne	wrlong	#28, objptr
1a1b0     52 00 00 5F 
1a1b4     10 E5 85 51 |  if_ne	sub	objptr, ##42256
1a1b8                 | '   if isdec(args(i)) then r=result_uint 
1a1b8     30 4F 05 F1 | 	add	fp, #304
1a1bc     A7 2E 02 FB | 	rdlong	local05, fp
1a1c0     02 2E 66 F0 | 	shl	local05, #2
1a1c4     04 4F 85 F1 | 	sub	fp, #260
1a1c8     A7 2E 02 F1 | 	add	local05, fp
1a1cc     17 13 02 FB | 	rdlong	arg01, local05
1a1d0     2C 4E 85 F1 | 	sub	fp, #44
1a1d4     E8 CD BE FD | 	call	#_isdec
1a1d8     00 FA 0D F2 | 	cmp	result1, #0 wz
1a1dc     52 00 00 5F 
1a1e0     10 E5 05 51 |  if_ne	add	objptr, ##42256
1a1e4     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
1a1e8     52 00 00 5F 
1a1ec     10 E5 85 51 |  if_ne	sub	objptr, ##42256
1a1f0                 | '   if not isnum(args(i)) then 
1a1f0     30 4F 05 F1 | 	add	fp, #304
1a1f4     A7 2E 02 FB | 	rdlong	local05, fp
1a1f8     02 2E 66 F0 | 	shl	local05, #2
1a1fc     04 4F 85 F1 | 	sub	fp, #260
1a200     A7 2E 02 F1 | 	add	local05, fp
1a204     17 13 02 FB | 	rdlong	arg01, local05
1a208     2C 4E 85 F1 | 	sub	fp, #44
1a20c     20 C7 BE FD | 	call	#_isnum
1a210     FD 2E 22 F6 | 	not	local05, result1
1a214     00 2E 0E F2 | 	cmp	local05, #0 wz
1a218     4C 01 90 AD |  if_e	jmp	#LR__2078
1a21c     52 00 00 FF 
1a220     10 E5 05 F1 | 	add	objptr, ##42256
1a224     F2 56 68 FC | 	wrlong	#43, objptr
1a228     52 00 00 FF 
1a22c     10 E5 85 F1 | 	sub	objptr, ##42256
1a230     30 4F 05 F1 | 	add	fp, #304
1a234     A7 16 02 FB | 	rdlong	arg03, fp
1a238     02 16 66 F0 | 	shl	arg03, #2
1a23c     04 4F 85 F1 | 	sub	fp, #260
1a240     A7 16 02 F1 | 	add	arg03, fp
1a244     0B 13 02 FB | 	rdlong	arg01, arg03
1a248     2C 4E 85 F1 | 	sub	fp, #44
1a24c     09 29 02 F6 | 	mov	local02, arg01
1a250     97 06 48 FB | 	callpa	#(@LR__2075-@LR__2074)>>2,fcache_load_ptr_
1a254                 | LR__2074
1a254     14 FB C9 FA | 	rdbyte	result1, local02 wz
1a258     01 28 06 51 |  if_ne	add	local02, #1
1a25c     F4 FF 9F 5D |  if_ne	jmp	#LR__2074
1a260                 | LR__2075
1a260     09 29 82 F1 | 	sub	local02, arg01
1a264     14 FB 01 F6 | 	mov	result1, local02
1a268     38 4F 05 F1 | 	add	fp, #312
1a26c     A7 FA 61 FC | 	wrlong	result1, fp
1a270     52 00 00 FF 
1a274     98 E4 05 F1 | 	add	objptr, ##42136
1a278     F2 12 02 FB | 	rdlong	arg01, objptr
1a27c     FD 12 82 F1 | 	sub	arg01, result1
1a280     04 12 86 F1 | 	sub	arg01, #4
1a284     03 12 26 F5 | 	andn	arg01, #3
1a288     F2 12 62 FC | 	wrlong	arg01, objptr
1a28c     52 00 00 FF 
1a290     98 E4 85 F1 | 	sub	objptr, ##42136
1a294     A7 14 02 FB | 	rdlong	arg02, fp
1a298     38 4F 85 F1 | 	sub	fp, #312
1a29c     54 94 B0 FD | 	call	#_pslpoke
1a2a0                 | '     pslpoke memtop,l
1a2a0                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
1a2a0     34 4F 05 F1 | 	add	fp, #308
1a2a4     A7 02 68 FC | 	wrlong	#1, fp
1a2a8     04 4E 05 F1 | 	add	fp, #4
1a2ac     A7 32 02 FB | 	rdlong	local07, fp
1a2b0     38 4F 85 F1 | 	sub	fp, #312
1a2b4     01 32 06 F1 | 	add	local07, #1
1a2b8                 | LR__2076
1a2b8     34 4F 05 F1 | 	add	fp, #308
1a2bc     A7 2E 02 FB | 	rdlong	local05, fp
1a2c0     34 4F 85 F1 | 	sub	fp, #308
1a2c4     19 2F 52 F2 | 	cmps	local05, local07 wc
1a2c8     7C 00 90 3D |  if_ae	jmp	#LR__2077
1a2cc     52 00 00 FF 
1a2d0     98 E4 05 F1 | 	add	objptr, ##42136
1a2d4     F2 30 02 FB | 	rdlong	local06, objptr
1a2d8     52 00 00 FF 
1a2dc     98 E4 85 F1 | 	sub	objptr, ##42136
1a2e0     03 30 06 F1 | 	add	local06, #3
1a2e4     34 4F 05 F1 | 	add	fp, #308
1a2e8     A7 34 02 FB | 	rdlong	local08, fp
1a2ec     1A 31 02 F1 | 	add	local06, local08
1a2f0     04 4E 85 F1 | 	sub	fp, #4
1a2f4     A7 36 02 FB | 	rdlong	local09, fp
1a2f8     02 36 66 F0 | 	shl	local09, #2
1a2fc     04 4F 85 F1 | 	sub	fp, #260
1a300     A7 38 02 F6 | 	mov	local10, fp
1a304     A7 36 02 F1 | 	add	local09, fp
1a308     1B 13 02 FB | 	rdlong	arg01, local09
1a30c     2C 4E 85 F1 | 	sub	fp, #44
1a310     01 3A 06 F6 | 	mov	local11, #1
1a314     1A 15 02 F6 | 	mov	arg02, local08
1a318     01 16 06 F6 | 	mov	arg03, #1
1a31c     E4 ED B0 FD | 	call	#__system__Mid_S
1a320     FD 14 C2 FA | 	rdbyte	arg02, result1
1a324     18 13 02 F6 | 	mov	arg01, local06
1a328     58 94 B0 FD | 	call	#_pspoke
1a32c     34 4F 05 F1 | 	add	fp, #308
1a330     A7 30 02 FB | 	rdlong	local06, fp
1a334     18 2F 02 F6 | 	mov	local05, local06
1a338     01 2E 06 F1 | 	add	local05, #1
1a33c     A7 2E 62 FC | 	wrlong	local05, fp
1a340     34 4F 85 F1 | 	sub	fp, #308
1a344     70 FF 9F FD | 	jmp	#LR__2076
1a348                 | LR__2077
1a348     52 00 00 FF 
1a34c     98 E4 05 F1 | 	add	objptr, ##42136
1a350     F2 2E 02 FB | 	rdlong	local05, objptr
1a354     52 00 00 FF 
1a358     98 E4 85 F1 | 	sub	objptr, ##42136
1a35c     10 4E 05 F1 | 	add	fp, #16
1a360     A7 2E 62 FC | 	wrlong	local05, fp
1a364     10 4E 85 F1 | 	sub	fp, #16
1a368                 | LR__2078
1a368     58 33 BF FD | 	call	#_pop
1a36c     1C 4E 05 F1 | 	add	fp, #28
1a370     A7 FA 61 FC | 	wrlong	result1, fp
1a374     04 4E 05 F1 | 	add	fp, #4
1a378     A7 FC 61 FC | 	wrlong	result2, fp
1a37c     04 4E 05 F1 | 	add	fp, #4
1a380     A7 FE 61 FC | 	wrlong	result3, fp
1a384                 | '   t1=pop() 
1a384                 | '   if i>=numpar-j then
1a384     1C 4E 85 F1 | 	sub	fp, #28
1a388     A7 2E 02 FB | 	rdlong	local05, fp
1a38c     17 3D 02 F6 | 	mov	local12, local05
1a390     2C 4F 05 F1 | 	add	fp, #300
1a394     A7 3E 02 FB | 	rdlong	local13, fp
1a398     1F 41 02 F6 | 	mov	local14, local13
1a39c     20 3D 82 F1 | 	sub	local12, local14
1a3a0     04 4E 85 F1 | 	sub	fp, #4
1a3a4     A7 42 02 FB | 	rdlong	local15, fp
1a3a8     30 4F 85 F1 | 	sub	fp, #304
1a3ac     21 45 02 F6 | 	mov	local16, local15
1a3b0     1E 45 52 F2 | 	cmps	local16, local12 wc
1a3b4     80 06 90 CD |  if_b	jmp	#LR__2109
1a3b8     20 4E 05 F1 | 	add	fp, #32
1a3bc     A7 3C 02 FB | 	rdlong	local12, fp
1a3c0     0C 4E 85 F1 | 	sub	fp, #12
1a3c4     A7 3C 62 FC | 	wrlong	local12, fp
1a3c8                 | '     vartype=t1.result.twowords(1)
1a3c8                 | '     select case vartype
1a3c8     14 4E 85 F1 | 	sub	fp, #20
1a3cc     1E 47 0A F6 | 	mov	local17, local12 wz
1a3d0     64 00 90 AD |  if_e	jmp	#LR__2079
1a3d4     00 47 0E F2 | 	cmp	local17, #256 wz
1a3d8     6C 00 90 AD |  if_e	jmp	#LR__2080
1a3dc     01 47 0E F2 | 	cmp	local17, #257 wz
1a3e0     74 00 90 AD |  if_e	jmp	#LR__2081
1a3e4     02 47 0E F2 | 	cmp	local17, #258 wz
1a3e8     7C 00 90 AD |  if_e	jmp	#LR__2082
1a3ec     03 47 0E F2 | 	cmp	local17, #259 wz
1a3f0     84 00 90 AD |  if_e	jmp	#LR__2083
1a3f4     04 47 0E F2 | 	cmp	local17, #260 wz
1a3f8     8C 00 90 AD |  if_e	jmp	#LR__2084
1a3fc     05 47 0E F2 | 	cmp	local17, #261 wz
1a400     94 00 90 AD |  if_e	jmp	#LR__2085
1a404     06 47 0E F2 | 	cmp	local17, #262 wz
1a408     9C 00 90 AD |  if_e	jmp	#LR__2086
1a40c     07 47 0E F2 | 	cmp	local17, #263 wz
1a410     A4 00 90 AD |  if_e	jmp	#LR__2087
1a414     08 47 0E F2 | 	cmp	local17, #264 wz
1a418     AC 00 90 AD |  if_e	jmp	#LR__2088
1a41c     09 47 0E F2 | 	cmp	local17, #265 wz
1a420     B4 00 90 AD |  if_e	jmp	#LR__2089
1a424     0A 47 0E F2 | 	cmp	local17, #266 wz
1a428     BC 00 90 AD |  if_e	jmp	#LR__2090
1a42c     0B 47 0E F2 | 	cmp	local17, #267 wz
1a430     C4 00 90 AD |  if_e	jmp	#LR__2091
1a434     D0 00 90 FD | 	jmp	#LR__2092
1a438                 | LR__2079
1a438     18 4E 05 F1 | 	add	fp, #24
1a43c     A7 18 68 FC | 	wrlong	#12, fp
1a440     18 4E 85 F1 | 	sub	fp, #24
1a444     CC 00 90 FD | 	jmp	#LR__2093
1a448                 | LR__2080
1a448     18 4E 05 F1 | 	add	fp, #24
1a44c     A7 18 68 FC | 	wrlong	#12, fp
1a450     18 4E 85 F1 | 	sub	fp, #24
1a454     BC 00 90 FD | 	jmp	#LR__2093
1a458                 | LR__2081
1a458     18 4E 05 F1 | 	add	fp, #24
1a45c     A7 02 68 FC | 	wrlong	#1, fp
1a460     18 4E 85 F1 | 	sub	fp, #24
1a464     AC 00 90 FD | 	jmp	#LR__2093
1a468                 | LR__2082
1a468     18 4E 05 F1 | 	add	fp, #24
1a46c     A7 02 68 FC | 	wrlong	#1, fp
1a470     18 4E 85 F1 | 	sub	fp, #24
1a474     9C 00 90 FD | 	jmp	#LR__2093
1a478                 | LR__2083
1a478     18 4E 05 F1 | 	add	fp, #24
1a47c     A7 04 68 FC | 	wrlong	#2, fp
1a480     18 4E 85 F1 | 	sub	fp, #24
1a484     8C 00 90 FD | 	jmp	#LR__2093
1a488                 | LR__2084
1a488     18 4E 05 F1 | 	add	fp, #24
1a48c     A7 04 68 FC | 	wrlong	#2, fp
1a490     18 4E 85 F1 | 	sub	fp, #24
1a494     7C 00 90 FD | 	jmp	#LR__2093
1a498                 | LR__2085
1a498     18 4E 05 F1 | 	add	fp, #24
1a49c     A7 08 68 FC | 	wrlong	#4, fp
1a4a0     18 4E 85 F1 | 	sub	fp, #24
1a4a4     6C 00 90 FD | 	jmp	#LR__2093
1a4a8                 | LR__2086
1a4a8     18 4E 05 F1 | 	add	fp, #24
1a4ac     A7 08 68 FC | 	wrlong	#4, fp
1a4b0     18 4E 85 F1 | 	sub	fp, #24
1a4b4     5C 00 90 FD | 	jmp	#LR__2093
1a4b8                 | LR__2087
1a4b8     18 4E 05 F1 | 	add	fp, #24
1a4bc     A7 10 68 FC | 	wrlong	#8, fp
1a4c0     18 4E 85 F1 | 	sub	fp, #24
1a4c4     4C 00 90 FD | 	jmp	#LR__2093
1a4c8                 | LR__2088
1a4c8     18 4E 05 F1 | 	add	fp, #24
1a4cc     A7 10 68 FC | 	wrlong	#8, fp
1a4d0     18 4E 85 F1 | 	sub	fp, #24
1a4d4     3C 00 90 FD | 	jmp	#LR__2093
1a4d8                 | LR__2089
1a4d8     18 4E 05 F1 | 	add	fp, #24
1a4dc     A7 0C 68 FC | 	wrlong	#6, fp
1a4e0     18 4E 85 F1 | 	sub	fp, #24
1a4e4     2C 00 90 FD | 	jmp	#LR__2093
1a4e8                 | LR__2090
1a4e8     18 4E 05 F1 | 	add	fp, #24
1a4ec     A7 10 68 FC | 	wrlong	#8, fp
1a4f0     18 4E 85 F1 | 	sub	fp, #24
1a4f4     1C 00 90 FD | 	jmp	#LR__2093
1a4f8                 | LR__2091
1a4f8     18 4E 05 F1 | 	add	fp, #24
1a4fc     A7 0A 68 FC | 	wrlong	#5, fp
1a500     18 4E 85 F1 | 	sub	fp, #24
1a504     0C 00 90 FD | 	jmp	#LR__2093
1a508                 | LR__2092
1a508     18 4E 05 F1 | 	add	fp, #24
1a50c     A7 18 68 FC | 	wrlong	#12, fp
1a510     18 4E 85 F1 | 	sub	fp, #24
1a514                 | LR__2093
1a514                 | '     if esize=12 andalso t1.result.uresult<$80000 then
1a514     18 4E 05 F1 | 	add	fp, #24
1a518     A7 3C 02 FB | 	rdlong	local12, fp
1a51c     18 4E 85 F1 | 	sub	fp, #24
1a520     0C 3C 0E F2 | 	cmp	local12, #12 wz
1a524     74 01 90 5D |  if_ne	jmp	#LR__2098
1a528     1C 4E 05 F1 | 	add	fp, #28
1a52c     A7 3E 02 FB | 	rdlong	local13, fp
1a530     1C 4E 85 F1 | 	sub	fp, #28
1a534     00 04 00 FF 
1a538     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1a53c     5C 01 90 3D |  if_ae	jmp	#LR__2098
1a540                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
1a540     52 00 00 FF 
1a544     10 E5 05 F1 | 	add	objptr, ##42256
1a548     F2 3C 02 FB | 	rdlong	local12, objptr
1a54c     52 00 00 FF 
1a550     10 E5 85 F1 | 	sub	objptr, ##42256
1a554     1C 3C 0E F2 | 	cmp	local12, #28 wz
1a558     38 00 90 5D |  if_ne	jmp	#LR__2094
1a55c     1C 4E 05 F1 | 	add	fp, #28
1a560     A7 3C 02 FB | 	rdlong	local12, fp
1a564     14 4F 05 F1 | 	add	fp, #276
1a568     A7 3E 02 FB | 	rdlong	local13, fp
1a56c     1F 45 02 F6 | 	mov	local16, local13
1a570     02 44 66 F0 | 	shl	local16, #2
1a574     04 4F 85 F1 | 	sub	fp, #260
1a578     A7 42 02 F6 | 	mov	local15, fp
1a57c     A7 44 02 F1 | 	add	local16, fp
1a580     22 13 02 FB | 	rdlong	arg01, local16
1a584     00 14 06 F6 | 	mov	arg02, #0
1a588     2C 4E 85 F1 | 	sub	fp, #44
1a58c     D0 FE B0 FD | 	call	#__system____builtin_atoi
1a590     1E FB 61 FC | 	wrlong	result1, local12
1a594                 | LR__2094
1a594                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
1a594     52 00 00 FF 
1a598     10 E5 05 F1 | 	add	objptr, ##42256
1a59c     F2 3C 02 FB | 	rdlong	local12, objptr
1a5a0     52 00 00 FF 
1a5a4     10 E5 85 F1 | 	sub	objptr, ##42256
1a5a8     1D 3C 0E F2 | 	cmp	local12, #29 wz
1a5ac     38 00 90 5D |  if_ne	jmp	#LR__2095
1a5b0     1C 4E 05 F1 | 	add	fp, #28
1a5b4     A7 3C 02 FB | 	rdlong	local12, fp
1a5b8     14 4F 05 F1 | 	add	fp, #276
1a5bc     A7 3E 02 FB | 	rdlong	local13, fp
1a5c0     1F 45 02 F6 | 	mov	local16, local13
1a5c4     02 44 66 F0 | 	shl	local16, #2
1a5c8     04 4F 85 F1 | 	sub	fp, #260
1a5cc     A7 42 02 F6 | 	mov	local15, fp
1a5d0     A7 44 02 F1 | 	add	local16, fp
1a5d4     22 13 02 FB | 	rdlong	arg01, local16
1a5d8     00 14 06 F6 | 	mov	arg02, #0
1a5dc     2C 4E 85 F1 | 	sub	fp, #44
1a5e0     7C FE B0 FD | 	call	#__system____builtin_atoi
1a5e4     1E FB 61 FC | 	wrlong	result1, local12
1a5e8                 | LR__2095
1a5e8                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
1a5e8     52 00 00 FF 
1a5ec     10 E5 05 F1 | 	add	objptr, ##42256
1a5f0     F2 3C 02 FB | 	rdlong	local12, objptr
1a5f4     52 00 00 FF 
1a5f8     10 E5 85 F1 | 	sub	objptr, ##42256
1a5fc     1E 3C 0E F2 | 	cmp	local12, #30 wz
1a600     3C 00 90 5D |  if_ne	jmp	#LR__2096
1a604     30 4F 05 F1 | 	add	fp, #304
1a608     A7 3E 02 FB | 	rdlong	local13, fp
1a60c     02 3E 66 F0 | 	shl	local13, #2
1a610     04 4F 85 F1 | 	sub	fp, #260
1a614     A7 44 02 F6 | 	mov	local16, fp
1a618     A7 3E 02 F1 | 	add	local13, fp
1a61c     1F 13 02 FB | 	rdlong	arg01, local13
1a620     2C 4E 85 F1 | 	sub	fp, #44
1a624     CC FF B0 FD | 	call	#__system____builtin_atof
1a628     28 4E 05 F1 | 	add	fp, #40
1a62c     A7 FA 61 FC | 	wrlong	result1, fp
1a630     0C 4E 85 F1 | 	sub	fp, #12
1a634     A7 3C 02 FB | 	rdlong	local12, fp
1a638     1C 4E 85 F1 | 	sub	fp, #28
1a63c     1E FB 61 FC | 	wrlong	result1, local12
1a640                 | LR__2096
1a640                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
1a640     52 00 00 FF 
1a644     10 E5 05 F1 | 	add	objptr, ##42256
1a648     F2 3C 02 FB | 	rdlong	local12, objptr
1a64c     52 00 00 FF 
1a650     10 E5 85 F1 | 	sub	objptr, ##42256
1a654     2B 3C 0E F2 | 	cmp	local12, #43 wz
1a658     18 00 90 5D |  if_ne	jmp	#LR__2097
1a65c     1C 4E 05 F1 | 	add	fp, #28
1a660     A7 12 02 FB | 	rdlong	arg01, fp
1a664     0C 4E 85 F1 | 	sub	fp, #12
1a668     A7 14 02 FB | 	rdlong	arg02, fp
1a66c     10 4E 85 F1 | 	sub	fp, #16
1a670     09 15 62 FC | 	wrlong	arg02, arg01
1a674                 | LR__2097
1a674     1C 4E 05 F1 | 	add	fp, #28
1a678     A7 12 02 FB | 	rdlong	arg01, fp
1a67c     1C 4E 85 F1 | 	sub	fp, #28
1a680     08 12 06 F1 | 	add	arg01, #8
1a684     52 00 00 FF 
1a688     10 E5 05 F1 | 	add	objptr, ##42256
1a68c     F2 14 02 FB | 	rdlong	arg02, objptr
1a690     52 00 00 FF 
1a694     10 E5 85 F1 | 	sub	objptr, ##42256
1a698     09 15 62 FC | 	wrlong	arg02, arg01
1a69c                 | LR__2098
1a69c                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
1a69c     18 4E 05 F1 | 	add	fp, #24
1a6a0     A7 3C 02 FB | 	rdlong	local12, fp
1a6a4     18 4E 85 F1 | 	sub	fp, #24
1a6a8     0C 3C 0E F2 | 	cmp	local12, #12 wz
1a6ac     94 01 90 5D |  if_ne	jmp	#LR__2103
1a6b0     1C 4E 05 F1 | 	add	fp, #28
1a6b4     A7 3E 02 FB | 	rdlong	local13, fp
1a6b8     1C 4E 85 F1 | 	sub	fp, #28
1a6bc     00 04 00 FF 
1a6c0     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1a6c4     7C 01 90 CD |  if_b	jmp	#LR__2103
1a6c8                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
1a6c8     52 00 00 FF 
1a6cc     10 E5 05 F1 | 	add	objptr, ##42256
1a6d0     F2 3C 02 FB | 	rdlong	local12, objptr
1a6d4     52 00 00 FF 
1a6d8     10 E5 85 F1 | 	sub	objptr, ##42256
1a6dc     1C 3C 0E F2 | 	cmp	local12, #28 wz
1a6e0     40 00 90 5D |  if_ne	jmp	#LR__2099
1a6e4     1C 4E 05 F1 | 	add	fp, #28
1a6e8     A7 3C 02 FB | 	rdlong	local12, fp
1a6ec     14 4F 05 F1 | 	add	fp, #276
1a6f0     A7 3E 02 FB | 	rdlong	local13, fp
1a6f4     1F 45 02 F6 | 	mov	local16, local13
1a6f8     02 44 66 F0 | 	shl	local16, #2
1a6fc     04 4F 85 F1 | 	sub	fp, #260
1a700     A7 42 02 F6 | 	mov	local15, fp
1a704     A7 44 02 F1 | 	add	local16, fp
1a708     22 13 02 FB | 	rdlong	arg01, local16
1a70c     00 14 06 F6 | 	mov	arg02, #0
1a710     2C 4E 85 F1 | 	sub	fp, #44
1a714     48 FD B0 FD | 	call	#__system____builtin_atoi
1a718     FD 14 02 F6 | 	mov	arg02, result1
1a71c     1E 13 02 F6 | 	mov	arg01, local12
1a720     D0 8F B0 FD | 	call	#_pslpoke
1a724                 | LR__2099
1a724                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
1a724     52 00 00 FF 
1a728     10 E5 05 F1 | 	add	objptr, ##42256
1a72c     F2 3C 02 FB | 	rdlong	local12, objptr
1a730     52 00 00 FF 
1a734     10 E5 85 F1 | 	sub	objptr, ##42256
1a738     1D 3C 0E F2 | 	cmp	local12, #29 wz
1a73c     40 00 90 5D |  if_ne	jmp	#LR__2100
1a740     1C 4E 05 F1 | 	add	fp, #28
1a744     A7 3C 02 FB | 	rdlong	local12, fp
1a748     14 4F 05 F1 | 	add	fp, #276
1a74c     A7 3E 02 FB | 	rdlong	local13, fp
1a750     1F 45 02 F6 | 	mov	local16, local13
1a754     02 44 66 F0 | 	shl	local16, #2
1a758     04 4F 85 F1 | 	sub	fp, #260
1a75c     A7 42 02 F6 | 	mov	local15, fp
1a760     A7 44 02 F1 | 	add	local16, fp
1a764     22 13 02 FB | 	rdlong	arg01, local16
1a768     00 14 06 F6 | 	mov	arg02, #0
1a76c     2C 4E 85 F1 | 	sub	fp, #44
1a770     EC FC B0 FD | 	call	#__system____builtin_atoi
1a774     FD 14 02 F6 | 	mov	arg02, result1
1a778     1E 13 02 F6 | 	mov	arg01, local12
1a77c     74 8F B0 FD | 	call	#_pslpoke
1a780                 | LR__2100
1a780                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1a780     52 00 00 FF 
1a784     10 E5 05 F1 | 	add	objptr, ##42256
1a788     F2 3C 02 FB | 	rdlong	local12, objptr
1a78c     52 00 00 FF 
1a790     10 E5 85 F1 | 	sub	objptr, ##42256
1a794     1E 3C 0E F2 | 	cmp	local12, #30 wz
1a798     4C 00 90 5D |  if_ne	jmp	#LR__2101
1a79c     30 4F 05 F1 | 	add	fp, #304
1a7a0     A7 3E 02 FB | 	rdlong	local13, fp
1a7a4     02 3E 66 F0 | 	shl	local13, #2
1a7a8     04 4F 85 F1 | 	sub	fp, #260
1a7ac     A7 44 02 F6 | 	mov	local16, fp
1a7b0     A7 3E 02 F1 | 	add	local13, fp
1a7b4     1F 13 02 FB | 	rdlong	arg01, local13
1a7b8     2C 4E 85 F1 | 	sub	fp, #44
1a7bc     34 FE B0 FD | 	call	#__system____builtin_atof
1a7c0     28 4E 05 F1 | 	add	fp, #40
1a7c4     A7 FA 61 FC | 	wrlong	result1, fp
1a7c8     0C 4E 85 F1 | 	sub	fp, #12
1a7cc     A7 3C 02 FB | 	rdlong	local12, fp
1a7d0     0C 4E 05 F1 | 	add	fp, #12
1a7d4     A7 12 02 F6 | 	mov	arg01, fp
1a7d8     28 4E 85 F1 | 	sub	fp, #40
1a7dc     09 15 02 FB | 	rdlong	arg02, arg01
1a7e0     1E 13 02 F6 | 	mov	arg01, local12
1a7e4     0C 8F B0 FD | 	call	#_pslpoke
1a7e8                 | LR__2101
1a7e8                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
1a7e8     52 00 00 FF 
1a7ec     10 E5 05 F1 | 	add	objptr, ##42256
1a7f0     F2 3C 02 FB | 	rdlong	local12, objptr
1a7f4     52 00 00 FF 
1a7f8     10 E5 85 F1 | 	sub	objptr, ##42256
1a7fc     2B 3C 0E F2 | 	cmp	local12, #43 wz
1a800     18 00 90 5D |  if_ne	jmp	#LR__2102
1a804     1C 4E 05 F1 | 	add	fp, #28
1a808     A7 12 02 FB | 	rdlong	arg01, fp
1a80c     0C 4E 85 F1 | 	sub	fp, #12
1a810     A7 14 02 FB | 	rdlong	arg02, fp
1a814     10 4E 85 F1 | 	sub	fp, #16
1a818     D8 8E B0 FD | 	call	#_pslpoke
1a81c                 | LR__2102
1a81c     1C 4E 05 F1 | 	add	fp, #28
1a820     A7 12 02 FB | 	rdlong	arg01, fp
1a824     1C 4E 85 F1 | 	sub	fp, #28
1a828     08 12 06 F1 | 	add	arg01, #8
1a82c     52 00 00 FF 
1a830     10 E5 05 F1 | 	add	objptr, ##42256
1a834     F2 14 02 FB | 	rdlong	arg02, objptr
1a838     52 00 00 FF 
1a83c     10 E5 85 F1 | 	sub	objptr, ##42256
1a840     B0 8E B0 FD | 	call	#_pslpoke
1a844                 | LR__2103
1a844                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
1a844     18 4E 05 F1 | 	add	fp, #24
1a848     A7 3C 02 FB | 	rdlong	local12, fp
1a84c     18 4E 85 F1 | 	sub	fp, #24
1a850     05 3C 0E F2 | 	cmp	local12, #5 wz
1a854     52 00 00 AF 
1a858     10 E5 05 A1 |  if_e	add	objptr, ##42256
1a85c     F2 40 02 AB |  if_e	rdlong	local14, objptr
1a860     52 00 00 AF 
1a864     10 E5 85 A1 |  if_e	sub	objptr, ##42256
1a868     2B 40 0E A2 |  if_e	cmp	local14, #43 wz
1a86c     18 00 90 5D |  if_ne	jmp	#LR__2104
1a870     1C 4E 05 F1 | 	add	fp, #28
1a874     A7 12 02 FB | 	rdlong	arg01, fp
1a878     0C 4E 85 F1 | 	sub	fp, #12
1a87c     A7 14 02 FB | 	rdlong	arg02, fp
1a880     10 4E 85 F1 | 	sub	fp, #16
1a884     6C 8E B0 FD | 	call	#_pslpoke
1a888                 | LR__2104
1a888                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
1a888     18 4E 05 F1 | 	add	fp, #24
1a88c     A7 3C 02 FB | 	rdlong	local12, fp
1a890     18 4E 85 F1 | 	sub	fp, #24
1a894     04 3C 0E F2 | 	cmp	local12, #4 wz
1a898     54 00 90 5D |  if_ne	jmp	#LR__2105
1a89c     52 00 00 FF 
1a8a0     10 E5 05 F1 | 	add	objptr, ##42256
1a8a4     F2 40 02 FB | 	rdlong	local14, objptr
1a8a8     52 00 00 FF 
1a8ac     10 E5 85 F1 | 	sub	objptr, ##42256
1a8b0     2B 40 0E F2 | 	cmp	local14, #43 wz
1a8b4     38 00 90 AD |  if_e	jmp	#LR__2105
1a8b8     1C 4E 05 F1 | 	add	fp, #28
1a8bc     A7 3C 02 FB | 	rdlong	local12, fp
1a8c0     14 4F 05 F1 | 	add	fp, #276
1a8c4     A7 44 02 FB | 	rdlong	local16, fp
1a8c8     02 44 66 F0 | 	shl	local16, #2
1a8cc     04 4F 85 F1 | 	sub	fp, #260
1a8d0     A7 44 02 F1 | 	add	local16, fp
1a8d4     22 13 02 FB | 	rdlong	arg01, local16
1a8d8     00 14 06 F6 | 	mov	arg02, #0
1a8dc     2C 4E 85 F1 | 	sub	fp, #44
1a8e0     7C FB B0 FD | 	call	#__system____builtin_atoi
1a8e4     FD 14 02 F6 | 	mov	arg02, result1
1a8e8     1E 13 02 F6 | 	mov	arg01, local12
1a8ec     04 8E B0 FD | 	call	#_pslpoke
1a8f0                 | LR__2105
1a8f0                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
1a8f0     18 4E 05 F1 | 	add	fp, #24
1a8f4     A7 3C 02 FB | 	rdlong	local12, fp
1a8f8     18 4E 85 F1 | 	sub	fp, #24
1a8fc     02 3C 0E F2 | 	cmp	local12, #2 wz
1a900     54 00 90 5D |  if_ne	jmp	#LR__2106
1a904     52 00 00 FF 
1a908     10 E5 05 F1 | 	add	objptr, ##42256
1a90c     F2 40 02 FB | 	rdlong	local14, objptr
1a910     52 00 00 FF 
1a914     10 E5 85 F1 | 	sub	objptr, ##42256
1a918     2B 40 0E F2 | 	cmp	local14, #43 wz
1a91c     38 00 90 AD |  if_e	jmp	#LR__2106
1a920     1C 4E 05 F1 | 	add	fp, #28
1a924     A7 3C 02 FB | 	rdlong	local12, fp
1a928     14 4F 05 F1 | 	add	fp, #276
1a92c     A7 44 02 FB | 	rdlong	local16, fp
1a930     02 44 66 F0 | 	shl	local16, #2
1a934     04 4F 85 F1 | 	sub	fp, #260
1a938     A7 44 02 F1 | 	add	local16, fp
1a93c     22 13 02 FB | 	rdlong	arg01, local16
1a940     00 14 06 F6 | 	mov	arg02, #0
1a944     2C 4E 85 F1 | 	sub	fp, #44
1a948     14 FB B0 FD | 	call	#__system____builtin_atoi
1a94c     FD 14 02 F6 | 	mov	arg02, result1
1a950     1E 13 02 F6 | 	mov	arg01, local12
1a954     E4 8D B0 FD | 	call	#_psdpoke
1a958                 | LR__2106
1a958                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
1a958     18 4E 05 F1 | 	add	fp, #24
1a95c     A7 3C 02 FB | 	rdlong	local12, fp
1a960     18 4E 85 F1 | 	sub	fp, #24
1a964     01 3C 0E F2 | 	cmp	local12, #1 wz
1a968     54 00 90 5D |  if_ne	jmp	#LR__2107
1a96c     52 00 00 FF 
1a970     10 E5 05 F1 | 	add	objptr, ##42256
1a974     F2 40 02 FB | 	rdlong	local14, objptr
1a978     52 00 00 FF 
1a97c     10 E5 85 F1 | 	sub	objptr, ##42256
1a980     2B 40 0E F2 | 	cmp	local14, #43 wz
1a984     38 00 90 AD |  if_e	jmp	#LR__2107
1a988     1C 4E 05 F1 | 	add	fp, #28
1a98c     A7 3C 02 FB | 	rdlong	local12, fp
1a990     14 4F 05 F1 | 	add	fp, #276
1a994     A7 44 02 FB | 	rdlong	local16, fp
1a998     02 44 66 F0 | 	shl	local16, #2
1a99c     04 4F 85 F1 | 	sub	fp, #260
1a9a0     A7 44 02 F1 | 	add	local16, fp
1a9a4     22 13 02 FB | 	rdlong	arg01, local16
1a9a8     00 14 06 F6 | 	mov	arg02, #0
1a9ac     2C 4E 85 F1 | 	sub	fp, #44
1a9b0     AC FA B0 FD | 	call	#__system____builtin_atoi
1a9b4     FD 14 02 F6 | 	mov	arg02, result1
1a9b8     1E 13 02 F6 | 	mov	arg01, local12
1a9bc     C4 8D B0 FD | 	call	#_pspoke
1a9c0                 | LR__2107
1a9c0                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1a9c0     18 4E 05 F1 | 	add	fp, #24
1a9c4     A7 3C 02 FB | 	rdlong	local12, fp
1a9c8     18 4E 85 F1 | 	sub	fp, #24
1a9cc     06 3C 0E F2 | 	cmp	local12, #6 wz
1a9d0     64 00 90 5D |  if_ne	jmp	#LR__2108
1a9d4     52 00 00 FF 
1a9d8     10 E5 05 F1 | 	add	objptr, ##42256
1a9dc     F2 40 02 FB | 	rdlong	local14, objptr
1a9e0     52 00 00 FF 
1a9e4     10 E5 85 F1 | 	sub	objptr, ##42256
1a9e8     2B 40 0E F2 | 	cmp	local14, #43 wz
1a9ec     48 00 90 AD |  if_e	jmp	#LR__2108
1a9f0     30 4F 05 F1 | 	add	fp, #304
1a9f4     A7 3E 02 FB | 	rdlong	local13, fp
1a9f8     02 3E 66 F0 | 	shl	local13, #2
1a9fc     04 4F 85 F1 | 	sub	fp, #260
1aa00     A7 3E 02 F1 | 	add	local13, fp
1aa04     1F 13 02 FB | 	rdlong	arg01, local13
1aa08     2C 4E 85 F1 | 	sub	fp, #44
1aa0c     E4 FB B0 FD | 	call	#__system____builtin_atof
1aa10     28 4E 05 F1 | 	add	fp, #40
1aa14     A7 FA 61 FC | 	wrlong	result1, fp
1aa18     0C 4E 85 F1 | 	sub	fp, #12
1aa1c     A7 3C 02 FB | 	rdlong	local12, fp
1aa20     0C 4E 05 F1 | 	add	fp, #12
1aa24     A7 12 02 F6 | 	mov	arg01, fp
1aa28     28 4E 85 F1 | 	sub	fp, #40
1aa2c     09 15 02 FB | 	rdlong	arg02, arg01
1aa30     1E 13 02 F6 | 	mov	arg01, local12
1aa34     BC 8C B0 FD | 	call	#_pslpoke
1aa38                 | LR__2108
1aa38                 | LR__2109
1aa38     30 4F 05 F1 | 	add	fp, #304
1aa3c     A7 40 02 FB | 	rdlong	local14, fp
1aa40     01 40 06 F1 | 	add	local14, #1
1aa44     A7 40 62 FC | 	wrlong	local14, fp
1aa48     30 4F 85 F1 | 	sub	fp, #304
1aa4c     B8 F6 9F FD | 	jmp	#LR__2073
1aa50                 | LR__2110
1aa50                 | LR__2111
1aa50     A7 F0 03 F6 | 	mov	ptra, fp
1aa54     B2 00 A0 FD | 	call	#popregs_
1aa58                 | _do_read_ret
1aa58     2D 00 64 FD | 	ret
1aa5c                 | 
1aa5c                 | ' 
1aa5c                 | ' '------------------- release
1aa5c                 | ' 
1aa5c                 | ' sub do_release
1aa5c                 | _do_release
1aa5c     00 4A 05 F6 | 	mov	COUNT_, #0
1aa60     A8 00 A0 FD | 	call	#pushregs_
1aa64     10 F0 07 F1 | 	add	ptra, #16
1aa68     58 2C BF FD | 	call	#_pop
1aa6c     FF 14 02 F6 | 	mov	arg02, result3
1aa70     A7 FA 61 FC | 	wrlong	result1, fp
1aa74     04 4E 05 F1 | 	add	fp, #4
1aa78     A7 FC 61 FC | 	wrlong	result2, fp
1aa7c     04 4E 05 F1 | 	add	fp, #4
1aa80     A7 14 62 FC | 	wrlong	arg02, fp
1aa84     08 4E 85 F1 | 	sub	fp, #8
1aa88     A7 12 02 F6 | 	mov	arg01, fp
1aa8c     18 2E BF FD | 	call	#_converttoint
1aa90     0C 4E 05 F1 | 	add	fp, #12
1aa94     A7 FA 61 FC | 	wrlong	result1, fp
1aa98                 | ' 
1aa98                 | ' t1=pop()
1aa98                 | ' channel=converttoint(t1)
1aa98                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
1aa98     0C 4E 85 F1 | 	sub	fp, #12
1aa9c     00 FA 55 F2 | 	cmps	result1, #0 wc
1aaa0     44 00 90 CD |  if_b	jmp	#LR__2120
1aaa4     0C 4E 05 F1 | 	add	fp, #12
1aaa8     A7 14 02 FB | 	rdlong	arg02, fp
1aaac     0C 4E 85 F1 | 	sub	fp, #12
1aab0     08 14 56 F2 | 	cmps	arg02, #8 wc
1aab4     30 00 90 3D |  if_ae	jmp	#LR__2120
1aab8     37 00 00 FF 
1aabc     10 E4 05 F1 | 	add	objptr, ##28176
1aac0     F2 12 02 FB | 	rdlong	arg01, objptr
1aac4     37 00 00 FF 
1aac8     10 E4 85 F1 | 	sub	objptr, ##28176
1aacc     0C 4E 05 F1 | 	add	fp, #12
1aad0     A7 14 02 FB | 	rdlong	arg02, fp
1aad4     0C 4E 85 F1 | 	sub	fp, #12
1aad8     06 14 66 F0 | 	shl	arg02, #6
1aadc     0A 13 02 F1 | 	add	arg01, arg02
1aae0     2C 12 06 F1 | 	add	arg01, #44
1aae4     09 FF 69 FC | 	wrlong	#255, arg01
1aae8                 | LR__2120
1aae8     A7 F0 03 F6 | 	mov	ptra, fp
1aaec     B2 00 A0 FD | 	call	#popregs_
1aaf0                 | _do_release_ret
1aaf0     2D 00 64 FD | 	ret
1aaf4                 | 
1aaf4                 | ' 
1aaf4                 | ' '------------------- restore
1aaf4                 | ' 
1aaf4                 | ' sub do_restore()
1aaf4                 | _do_restore
1aaf4     4A 00 00 FF 
1aaf8     88 E4 05 F1 | 	add	objptr, ##38024
1aafc     F2 00 02 FB | 	rdlong	_var01, objptr
1ab00     06 00 00 FF 
1ab04     A4 E4 05 F1 | 	add	objptr, ##3236
1ab08     F2 00 62 FC | 	wrlong	_var01, objptr
1ab0c     BB 01 00 FF 
1ab10     18 00 06 F6 | 	mov	_var01, ##@LR__5996
1ab14     01 00 00 FF 
1ab18     B0 E5 05 F1 | 	add	objptr, ##944
1ab1c     F2 00 62 FC | 	wrlong	_var01, objptr
1ab20     52 00 00 FF 
1ab24     DC E4 85 F1 | 	sub	objptr, ##42204
1ab28                 | _do_restore_ret
1ab28     2D 00 64 FD | 	ret
1ab2c                 | 
1ab2c                 | ' 
1ab2c                 | ' '------------------- return
1ab2c                 | ' 
1ab2c                 | ' sub do_return()
1ab2c                 | _do_return
1ab2c                 | ' if gosubtop>0 then
1ab2c     50 00 00 FF 
1ab30     34 E5 05 F1 | 	add	objptr, ##41268
1ab34     F2 00 02 FB | 	rdlong	_var01, objptr
1ab38     50 00 00 FF 
1ab3c     34 E5 85 F1 | 	sub	objptr, ##41268
1ab40     01 00 56 F2 | 	cmps	_var01, #1 wc
1ab44     8C 00 90 CD |  if_b	jmp	#LR__2130
1ab48     50 00 00 FF 
1ab4c     34 E5 05 F1 | 	add	objptr, ##41268
1ab50     F2 00 02 FB | 	rdlong	_var01, objptr
1ab54     03 00 66 F0 | 	shl	_var01, #3
1ab58     03 00 00 FF 
1ab5c     88 E5 85 F1 | 	sub	objptr, ##1928
1ab60     F2 00 02 F1 | 	add	_var01, objptr
1ab64     00 01 02 FB | 	rdlong	_var01, _var01
1ab68     03 00 00 FF 
1ab6c     0C E5 05 F1 | 	add	objptr, ##1804
1ab70     F2 00 62 FC | 	wrlong	_var01, objptr
1ab74     7C E4 05 F1 | 	add	objptr, #124
1ab78     F2 00 02 FB | 	rdlong	_var01, objptr
1ab7c     03 00 66 F0 | 	shl	_var01, #3
1ab80     03 00 00 FF 
1ab84     88 E5 85 F1 | 	sub	objptr, ##1928
1ab88     F2 00 02 F1 | 	add	_var01, objptr
1ab8c     04 00 06 F1 | 	add	_var01, #4
1ab90     00 01 02 FB | 	rdlong	_var01, _var01
1ab94     03 00 00 FF 
1ab98     10 E5 05 F1 | 	add	objptr, ##1808
1ab9c     F2 00 62 FC | 	wrlong	_var01, objptr
1aba0     06 00 00 FF 
1aba4     40 E4 85 F1 | 	sub	objptr, ##3136
1aba8     F2 00 02 FB | 	rdlong	_var01, objptr
1abac     01 00 86 F1 | 	sub	_var01, #1
1abb0     04 E4 05 F1 | 	add	objptr, #4
1abb4     F2 00 62 FC | 	wrlong	_var01, objptr
1abb8     06 00 00 FF 
1abbc     B4 E4 05 F1 | 	add	objptr, ##3252
1abc0     F2 00 02 FB | 	rdlong	_var01, objptr
1abc4     01 00 86 F1 | 	sub	_var01, #1
1abc8     F2 00 62 FC | 	wrlong	_var01, objptr
1abcc     50 00 00 FF 
1abd0     34 E5 85 F1 | 	sub	objptr, ##41268
1abd4                 | LR__2130
1abd4                 | _do_return_ret
1abd4     2D 00 64 FD | 	ret
1abd8                 | 
1abd8                 | ' 
1abd8                 | ' '------------------- right$
1abd8                 | ' 
1abd8                 | ' sub do_right
1abd8                 | _do_right
1abd8     00 4A 05 F6 | 	mov	COUNT_, #0
1abdc     A8 00 A0 FD | 	call	#pushregs_
1abe0     14 F0 07 F1 | 	add	ptra, #20
1abe4     4A 00 00 FF 
1abe8     80 E4 05 F1 | 	add	objptr, ##38016
1abec     F2 16 02 FB | 	rdlong	arg03, objptr
1abf0     0B 15 02 F6 | 	mov	arg02, arg03
1abf4     01 14 66 F0 | 	shl	arg02, #1
1abf8     0B 15 02 F1 | 	add	arg02, arg03
1abfc     02 14 66 F0 | 	shl	arg02, #2
1ac00     03 00 00 FF 
1ac04     04 E4 85 F1 | 	sub	objptr, ##1540
1ac08     F2 14 02 F1 | 	add	arg02, objptr
1ac0c     0A 17 02 FB | 	rdlong	arg03, arg02
1ac10     0C 4E 05 F1 | 	add	fp, #12
1ac14     A7 16 62 FC | 	wrlong	arg03, fp
1ac18                 | ' 
1ac18                 | ' numpar=compiledline(lineptr_e).result.uresult
1ac18                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
1ac18     0C 4E 85 F1 | 	sub	fp, #12
1ac1c     02 16 0E F2 | 	cmp	arg03, #2 wz
1ac20     47 00 00 FF 
1ac24     7C E4 85 F1 | 	sub	objptr, ##36476
1ac28     40 00 90 AD |  if_e	jmp	#LR__2140
1ac2c     00 12 06 F6 | 	mov	arg01, #0
1ac30     64 20 B1 FD | 	call	#__system___getiolock_0613
1ac34     FD 12 02 F6 | 	mov	arg01, result1
1ac38     34 C3 B0 FD | 	call	#__system___lockmem
1ac3c     BB 01 00 FF 
1ac40     19 14 06 F6 | 	mov	arg02, ##@LR__5997
1ac44     00 12 06 F6 | 	mov	arg01, #0
1ac48     00 16 06 F6 | 	mov	arg03, #0
1ac4c     14 D0 B0 FD | 	call	#__system___basic_print_string
1ac50     00 12 06 F6 | 	mov	arg01, #0
1ac54     40 20 B1 FD | 	call	#__system___getiolock_0613
1ac58     FD 00 68 FC | 	wrlong	#0, result1
1ac5c     27 12 06 F6 | 	mov	arg01, #39
1ac60     00 14 06 F6 | 	mov	arg02, #0
1ac64     EC 88 B0 FD | 	call	#_printerror
1ac68     EC 00 90 FD | 	jmp	#LR__2143
1ac6c                 | LR__2140
1ac6c     54 2A BF FD | 	call	#_pop
1ac70     FF 16 02 F6 | 	mov	arg03, result3
1ac74     A7 FA 61 FC | 	wrlong	result1, fp
1ac78     04 4E 05 F1 | 	add	fp, #4
1ac7c     A7 FC 61 FC | 	wrlong	result2, fp
1ac80     04 4E 05 F1 | 	add	fp, #4
1ac84     A7 16 62 FC | 	wrlong	arg03, fp
1ac88     08 4E 85 F1 | 	sub	fp, #8
1ac8c     A7 12 02 F6 | 	mov	arg01, fp
1ac90     14 2C BF FD | 	call	#_converttoint
1ac94     FD 16 02 F6 | 	mov	arg03, result1
1ac98     10 4E 05 F1 | 	add	fp, #16
1ac9c     A7 16 62 FC | 	wrlong	arg03, fp
1aca0     10 4E 85 F1 | 	sub	fp, #16
1aca4     1C 2A BF FD | 	call	#_pop
1aca8     FF 16 02 F6 | 	mov	arg03, result3
1acac     A7 FA 61 FC | 	wrlong	result1, fp
1acb0     04 4E 05 F1 | 	add	fp, #4
1acb4     A7 FC 61 FC | 	wrlong	result2, fp
1acb8     04 4E 05 F1 | 	add	fp, #4
1acbc     A7 16 62 FC | 	wrlong	arg03, fp
1acc0                 | ' t1=pop() : arg=converttoint(t1)
1acc0                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1acc0     08 4E 85 F1 | 	sub	fp, #8
1acc4     2B 16 0E F2 | 	cmp	arg03, #43 wz
1acc8     18 00 90 5D |  if_ne	jmp	#LR__2141
1accc     A7 12 02 FB | 	rdlong	arg01, fp
1acd0     68 2B BF FD | 	call	#_convertstring
1acd4     A7 FA 61 FC | 	wrlong	result1, fp
1acd8     08 4E 05 F1 | 	add	fp, #8
1acdc     A7 3E 68 FC | 	wrlong	#31, fp
1ace0     08 4E 85 F1 | 	sub	fp, #8
1ace4                 | LR__2141
1ace4                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
1ace4     08 4E 05 F1 | 	add	fp, #8
1ace8     A7 16 02 FB | 	rdlong	arg03, fp
1acec     08 4E 85 F1 | 	sub	fp, #8
1acf0     1F 16 0E F2 | 	cmp	arg03, #31 wz
1acf4     40 00 90 AD |  if_e	jmp	#LR__2142
1acf8     00 12 06 F6 | 	mov	arg01, #0
1acfc     98 1F B1 FD | 	call	#__system___getiolock_0613
1ad00     FD 12 02 F6 | 	mov	arg01, result1
1ad04     68 C2 B0 FD | 	call	#__system___lockmem
1ad08     BB 01 00 FF 
1ad0c     22 14 06 F6 | 	mov	arg02, ##@LR__5998
1ad10     00 12 06 F6 | 	mov	arg01, #0
1ad14     00 16 06 F6 | 	mov	arg03, #0
1ad18     48 CF B0 FD | 	call	#__system___basic_print_string
1ad1c     00 12 06 F6 | 	mov	arg01, #0
1ad20     74 1F B1 FD | 	call	#__system___getiolock_0613
1ad24     FD 00 68 FC | 	wrlong	#0, result1
1ad28     0F 12 06 F6 | 	mov	arg01, #15
1ad2c     00 14 06 F6 | 	mov	arg02, #0
1ad30     20 88 B0 FD | 	call	#_printerror
1ad34     20 00 90 FD | 	jmp	#LR__2143
1ad38                 | LR__2142
1ad38     A7 12 02 FB | 	rdlong	arg01, fp
1ad3c     10 4E 05 F1 | 	add	fp, #16
1ad40     A7 14 02 FB | 	rdlong	arg02, fp
1ad44     10 4E 85 F1 | 	sub	fp, #16
1ad48     28 E3 B0 FD | 	call	#__system__Right_S
1ad4c     A7 FA 61 FC | 	wrlong	result1, fp
1ad50     A7 12 02 F6 | 	mov	arg01, fp
1ad54     04 2A BF FD | 	call	#_push
1ad58                 | LR__2143
1ad58     A7 F0 03 F6 | 	mov	ptra, fp
1ad5c     B2 00 A0 FD | 	call	#popregs_
1ad60                 | _do_right_ret
1ad60     2D 00 64 FD | 	ret
1ad64                 | 
1ad64                 | ' 
1ad64                 | ' '------------------- rnd
1ad64                 | ' 
1ad64                 | ' sub do_rnd
1ad64                 | _do_rnd
1ad64     01 4A 05 F6 | 	mov	COUNT_, #1
1ad68     A8 00 A0 FD | 	call	#pushregs_
1ad6c     10 F0 07 F1 | 	add	ptra, #16
1ad70     4A 00 00 FF 
1ad74     80 E4 05 F1 | 	add	objptr, ##38016
1ad78     F2 26 02 FB | 	rdlong	local01, objptr
1ad7c     13 17 02 F6 | 	mov	arg03, local01
1ad80     01 16 66 F0 | 	shl	arg03, #1
1ad84     13 17 02 F1 | 	add	arg03, local01
1ad88     02 16 66 F0 | 	shl	arg03, #2
1ad8c     03 00 00 FF 
1ad90     04 E4 85 F1 | 	sub	objptr, ##1540
1ad94     F2 16 02 F1 | 	add	arg03, objptr
1ad98     0B 17 02 FB | 	rdlong	arg03, arg03
1ad9c     0C 4E 05 F1 | 	add	fp, #12
1ada0     A7 16 62 FC | 	wrlong	arg03, fp
1ada4                 | ' 
1ada4                 | ' numpar=compiledline(lineptr_e).result.uresult
1ada4                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
1ada4     0C 4E 85 F1 | 	sub	fp, #12
1ada8     02 16 16 F2 | 	cmp	arg03, #2 wc
1adac     47 00 00 FF 
1adb0     7C E4 85 F1 | 	sub	objptr, ##36476
1adb4     40 00 90 CD |  if_b	jmp	#LR__2150
1adb8     00 12 06 F6 | 	mov	arg01, #0
1adbc     D8 1E B1 FD | 	call	#__system___getiolock_0613
1adc0     FD 12 02 F6 | 	mov	arg01, result1
1adc4     A8 C1 B0 FD | 	call	#__system___lockmem
1adc8     BB 01 00 FF 
1adcc     2B 14 06 F6 | 	mov	arg02, ##@LR__5999
1add0     00 12 06 F6 | 	mov	arg01, #0
1add4     00 16 06 F6 | 	mov	arg03, #0
1add8     88 CE B0 FD | 	call	#__system___basic_print_string
1addc     00 12 06 F6 | 	mov	arg01, #0
1ade0     B4 1E B1 FD | 	call	#__system___getiolock_0613
1ade4     FD 00 68 FC | 	wrlong	#0, result1
1ade8     27 12 06 F6 | 	mov	arg01, #39
1adec     00 14 06 F6 | 	mov	arg02, #0
1adf0     60 87 B0 FD | 	call	#_printerror
1adf4     30 01 90 FD | 	jmp	#LR__2157
1adf8                 | LR__2150
1adf8                 | ' if numpar=0 then
1adf8     0C 4E 05 F1 | 	add	fp, #12
1adfc     A7 FE 09 FB | 	rdlong	result3, fp wz
1ae00     0C 4E 85 F1 | 	sub	fp, #12
1ae04     20 00 90 5D |  if_ne	jmp	#LR__2151
1ae08     08 4E 05 F1 | 	add	fp, #8
1ae0c     A7 3A 68 FC | 	wrlong	#29, fp
1ae10     08 4E 85 F1 | 	sub	fp, #8
1ae14     1B FA 61 FD | 	getrnd	result1
1ae18     A7 FA 61 FC | 	wrlong	result1, fp
1ae1c     A7 12 02 F6 | 	mov	arg01, fp
1ae20     38 29 BF FD | 	call	#_push
1ae24     00 01 90 FD | 	jmp	#LR__2156
1ae28                 | LR__2151
1ae28     98 28 BF FD | 	call	#_pop
1ae2c     A7 FA 61 FC | 	wrlong	result1, fp
1ae30     04 4E 05 F1 | 	add	fp, #4
1ae34     A7 FC 61 FC | 	wrlong	result2, fp
1ae38     04 4E 05 F1 | 	add	fp, #4
1ae3c     A7 FE 61 FC | 	wrlong	result3, fp
1ae40                 | '   t1=pop()
1ae40                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
1ae40     08 4E 85 F1 | 	sub	fp, #8
1ae44     1C FE 0D F2 | 	cmp	result3, #28 wz
1ae48     08 4E 05 51 |  if_ne	add	fp, #8
1ae4c     A7 26 02 5B |  if_ne	rdlong	local01, fp
1ae50     08 4E 85 51 |  if_ne	sub	fp, #8
1ae54     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1ae58     2C 00 90 5D |  if_ne	jmp	#LR__2152
1ae5c     1B FA 61 FD | 	getrnd	result1
1ae60     A7 26 02 FB | 	rdlong	local01, fp
1ae64     13 FB 11 FD | 	qdiv	result1, local01
1ae68     A7 12 02 F6 | 	mov	arg01, fp
1ae6c     19 26 62 FD | 	getqy	local01
1ae70     A7 26 62 FC | 	wrlong	local01, fp
1ae74     08 4E 05 F1 | 	add	fp, #8
1ae78     A7 3A 68 FC | 	wrlong	#29, fp
1ae7c     08 4E 85 F1 | 	sub	fp, #8
1ae80     D8 28 BF FD | 	call	#_push
1ae84     A0 00 90 FD | 	jmp	#LR__2155
1ae88                 | LR__2152
1ae88     08 4E 05 F1 | 	add	fp, #8
1ae8c     A7 26 02 FB | 	rdlong	local01, fp
1ae90     08 4E 85 F1 | 	sub	fp, #8
1ae94     1E 26 0E F2 | 	cmp	local01, #30 wz
1ae98     48 00 90 5D |  if_ne	jmp	#LR__2153
1ae9c     A7 12 02 FB | 	rdlong	arg01, fp
1aea0     00 C0 24 FF 
1aea4     00 14 06 F6 | 	mov	arg02, ##1233125376
1aea8     40 F1 B0 FD | 	call	#__system___float_div
1aeac     FD 26 02 F6 | 	mov	local01, result1
1aeb0     1B 12 62 FD | 	getrnd	arg01
1aeb4     74 13 06 F4 | 	bitl	arg01, #372
1aeb8     28 EB B0 FD | 	call	#__system___float_fromuns
1aebc     FD 14 02 F6 | 	mov	arg02, result1
1aec0     13 13 02 F6 | 	mov	arg01, local01
1aec4     20 EF B0 FD | 	call	#__system___float_mul
1aec8     A7 FA 61 FC | 	wrlong	result1, fp
1aecc     08 4E 05 F1 | 	add	fp, #8
1aed0     A7 3C 68 FC | 	wrlong	#30, fp
1aed4     08 4E 85 F1 | 	sub	fp, #8
1aed8     A7 12 02 F6 | 	mov	arg01, fp
1aedc     7C 28 BF FD | 	call	#_push
1aee0     44 00 90 FD | 	jmp	#LR__2154
1aee4                 | LR__2153
1aee4                 | '     print "rnd: "; : printerror(40) 
1aee4     00 12 06 F6 | 	mov	arg01, #0
1aee8     AC 1D B1 FD | 	call	#__system___getiolock_0613
1aeec     FD 12 02 F6 | 	mov	arg01, result1
1aef0     7C C0 B0 FD | 	call	#__system___lockmem
1aef4     BB 01 00 FF 
1aef8     31 14 06 F6 | 	mov	arg02, ##@LR__6000
1aefc     00 12 06 F6 | 	mov	arg01, #0
1af00     00 16 06 F6 | 	mov	arg03, #0
1af04     5C CD B0 FD | 	call	#__system___basic_print_string
1af08     00 12 06 F6 | 	mov	arg01, #0
1af0c     88 1D B1 FD | 	call	#__system___getiolock_0613
1af10     FD 00 68 FC | 	wrlong	#0, result1
1af14     28 12 06 F6 | 	mov	arg01, #40
1af18     00 14 06 F6 | 	mov	arg02, #0
1af1c     34 86 B0 FD | 	call	#_printerror
1af20     A7 12 02 F6 | 	mov	arg01, fp
1af24     34 28 BF FD | 	call	#_push
1af28                 | LR__2154
1af28                 | LR__2155
1af28                 | LR__2156
1af28                 | LR__2157
1af28     A7 F0 03 F6 | 	mov	ptra, fp
1af2c     B2 00 A0 FD | 	call	#popregs_
1af30                 | _do_rnd_ret
1af30     2D 00 64 FD | 	ret
1af34                 | 
1af34                 | ' 
1af34                 | ' '-------------------- round
1af34                 | ' 
1af34                 | ' sub do_round
1af34                 | _do_round
1af34     00 4A 05 F6 | 	mov	COUNT_, #0
1af38     A8 00 A0 FD | 	call	#pushregs_
1af3c     0C F0 07 F1 | 	add	ptra, #12
1af40     80 27 BF FD | 	call	#_pop
1af44     A7 FA 61 FC | 	wrlong	result1, fp
1af48     04 4E 05 F1 | 	add	fp, #4
1af4c     A7 FC 61 FC | 	wrlong	result2, fp
1af50     04 4E 05 F1 | 	add	fp, #4
1af54     A7 FE 61 FC | 	wrlong	result3, fp
1af58     08 4E 85 F1 | 	sub	fp, #8
1af5c     A7 12 02 F6 | 	mov	arg01, fp
1af60     44 29 BF FD | 	call	#_converttoint
1af64     A7 FA 61 FC | 	wrlong	result1, fp
1af68     08 4E 05 F1 | 	add	fp, #8
1af6c     A7 38 68 FC | 	wrlong	#28, fp
1af70     08 4E 85 F1 | 	sub	fp, #8
1af74     A7 12 02 F6 | 	mov	arg01, fp
1af78     E0 27 BF FD | 	call	#_push
1af7c     A7 F0 03 F6 | 	mov	ptra, fp
1af80     B2 00 A0 FD | 	call	#popregs_
1af84                 | _do_round_ret
1af84     2D 00 64 FD | 	ret
1af88                 | 
1af88                 | ' 
1af88                 | ' '-------------------- rqpin
1af88                 | ' 
1af88                 | ' sub do_rqpin
1af88                 | _do_rqpin
1af88     00 4A 05 F6 | 	mov	COUNT_, #0
1af8c     A8 00 A0 FD | 	call	#pushregs_
1af90     0C F0 07 F1 | 	add	ptra, #12
1af94     2C 27 BF FD | 	call	#_pop
1af98     A7 FA 61 FC | 	wrlong	result1, fp
1af9c     04 4E 05 F1 | 	add	fp, #4
1afa0     A7 FC 61 FC | 	wrlong	result2, fp
1afa4     04 4E 05 F1 | 	add	fp, #4
1afa8     A7 FE 61 FC | 	wrlong	result3, fp
1afac     08 4E 85 F1 | 	sub	fp, #8
1afb0     A7 12 02 F6 | 	mov	arg01, fp
1afb4     F0 28 BF FD | 	call	#_converttoint
1afb8     FD 12 02 F6 | 	mov	arg01, result1
1afbc     00 FA 05 F6 | 	mov	result1, #0
1afc0     09 FB 81 FA | 	rqpin	result1, arg01
1afc4     52 00 00 FF 
1afc8     10 E5 05 F1 | 	add	objptr, ##42256
1afcc     F2 FA 61 FC | 	wrlong	result1, objptr
1afd0     52 00 00 FF 
1afd4     10 E5 85 F1 | 	sub	objptr, ##42256
1afd8     08 4E 05 F1 | 	add	fp, #8
1afdc     A7 3A 68 FC | 	wrlong	#29, fp
1afe0     08 4E 85 F1 | 	sub	fp, #8
1afe4     A7 08 68 FC | 	wrlong	#4, fp
1afe8     A7 12 02 F6 | 	mov	arg01, fp
1afec     6C 27 BF FD | 	call	#_push
1aff0     A7 F0 03 F6 | 	mov	ptra, fp
1aff4     B2 00 A0 FD | 	call	#popregs_
1aff8                 | _do_rqpin_ret
1aff8     2D 00 64 FD | 	ret
1affc                 | 
1affc                 | ' 
1affc                 | ' ' ------------------ run
1affc                 | ' 
1affc                 | ' sub do_run
1affc                 | _do_run
1affc     04 4A 05 F6 | 	mov	COUNT_, #4
1b000     A8 00 A0 FD | 	call	#pushregs_
1b004     4A 00 00 FF 
1b008     80 E4 05 F1 | 	add	objptr, ##38016
1b00c     F2 26 02 FB | 	rdlong	local01, objptr
1b010     06 00 00 FF 
1b014     38 E4 05 F1 | 	add	objptr, ##3128
1b018     F2 28 02 FB | 	rdlong	local02, objptr
1b01c     04 E4 05 F1 | 	add	objptr, #4
1b020     F2 2A 02 FB | 	rdlong	local03, objptr
1b024     13 19 02 F6 | 	mov	arg04, local01
1b028     0C 17 02 F6 | 	mov	arg03, arg04
1b02c     01 16 66 F0 | 	shl	arg03, #1
1b030     0C 17 02 F1 | 	add	arg03, arg04
1b034     02 16 66 F0 | 	shl	arg03, #2
1b038     09 00 00 FF 
1b03c     40 E4 85 F1 | 	sub	objptr, ##4672
1b040     F2 16 02 F1 | 	add	arg03, objptr
1b044     0B 15 02 FB | 	rdlong	arg02, arg03
1b048                 | ' 
1b048                 | ' r_lineptr_e=lineptr_e
1b048                 | ' r_runptr=runptr
1b048                 | ' r_runptr2=runptr2
1b048                 | ' 
1b048                 | ' numpar=compiledline(lineptr_e).result.uresult
1b048                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
1b048     01 14 0E F2 | 	cmp	arg02, #1 wz
1b04c     47 00 00 FF 
1b050     7C E4 85 F1 | 	sub	objptr, ##36476
1b054     00 12 06 A6 |  if_e	mov	arg01, #0
1b058     C4 9F BF AD |  if_e	call	#_do_load
1b05c     4A 00 00 FF 
1b060     88 E4 05 F1 | 	add	objptr, ##38024
1b064     F2 18 02 FB | 	rdlong	arg04, objptr
1b068     06 00 00 FF 
1b06c     30 E4 05 F1 | 	add	objptr, ##3120
1b070     F2 18 62 FC | 	wrlong	arg04, objptr
1b074     04 E4 05 F1 | 	add	objptr, #4
1b078     F2 00 68 FC | 	wrlong	#0, objptr
1b07c     04 E4 05 F1 | 	add	objptr, #4
1b080     FF FF FF FF 
1b084     F2 FE 6B FC | 	wrlong	##-1, objptr
1b088     06 00 00 FF 
1b08c     38 E4 85 F1 | 	sub	objptr, ##3128
1b090     F2 18 02 FB | 	rdlong	arg04, objptr
1b094     06 00 00 FF 
1b098     A4 E4 05 F1 | 	add	objptr, ##3236
1b09c     F2 18 62 FC | 	wrlong	arg04, objptr
1b0a0     BB 01 00 FF 
1b0a4     37 18 06 F6 | 	mov	arg04, ##@LR__6001
1b0a8     01 00 00 FF 
1b0ac     B0 E5 05 F1 | 	add	objptr, ##944
1b0b0     F2 18 62 FC | 	wrlong	arg04, objptr
1b0b4                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
1b0b4                 | ' dataptr=programstart : readline="" ' reset the data pointer
1b0b4                 | ' if inrun>0 then 
1b0b4     01 00 00 FF 
1b0b8     F0 E5 85 F1 | 	sub	objptr, ##1008
1b0bc     F2 18 02 FB | 	rdlong	arg04, objptr
1b0c0     50 00 00 FF 
1b0c4     EC E4 85 F1 | 	sub	objptr, ##41196
1b0c8     01 18 16 F2 | 	cmp	arg04, #1 wc
1b0cc     30 00 90 CD |  if_b	jmp	#LR__2160
1b0d0     50 00 00 FF 
1b0d4     F0 E4 05 F1 | 	add	objptr, ##41200
1b0d8     F2 12 02 F6 | 	mov	arg01, objptr
1b0dc     38 E4 85 F1 | 	sub	objptr, #56
1b0e0     F2 14 02 FB | 	rdlong	arg02, objptr
1b0e4     18 16 06 F6 | 	mov	arg03, #24
1b0e8     44 00 00 FF 
1b0ec     EC E5 85 F1 | 	sub	objptr, ##35308
1b0f0     F4 B1 B0 FD | 	call	#_psram_spin2_read1
1b0f4     0B 00 00 FF 
1b0f8     CC E4 85 F1 | 	sub	objptr, ##5836
1b0fc                 | '   psram.read1(varptr(runheader),runptr,24)  
1b0fc                 | '   return
1b0fc     0C 03 90 FD | 	jmp	#LR__2167
1b100                 | LR__2160
1b100     50 00 00 FF 
1b104     EC E4 05 F1 | 	add	objptr, ##41196
1b108     F2 02 68 FC | 	wrlong	#1, objptr
1b10c     04 E4 05 F1 | 	add	objptr, #4
1b110     F2 12 02 F6 | 	mov	arg01, objptr
1b114     38 E4 85 F1 | 	sub	objptr, #56
1b118     F2 14 02 FB | 	rdlong	arg02, objptr
1b11c     18 16 06 F6 | 	mov	arg03, #24
1b120     44 00 00 FF 
1b124     EC E5 85 F1 | 	sub	objptr, ##35308
1b128     BC B1 B0 FD | 	call	#_psram_spin2_read1
1b12c                 | ' inrun=1
1b12c                 | ' psram.read1(varptr(runheader),runptr,24) 
1b12c                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
1b12c     45 00 00 FF 
1b130     24 E4 05 F1 | 	add	objptr, ##35364
1b134     F2 2C 02 FB | 	rdlong	local04, objptr
1b138     50 00 00 FF 
1b13c     F0 E4 85 F1 | 	sub	objptr, ##41200
1b140     FF FF 7F FF 
1b144     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
1b148     50 00 00 AF 
1b14c     EC E4 05 A1 |  if_e	add	objptr, ##41196
1b150     F2 00 68 AC |  if_e	wrlong	#0, objptr
1b154     50 00 00 AF 
1b158     EC E4 85 A1 |  if_e	sub	objptr, ##41196
1b15c     AC 02 90 AD |  if_e	jmp	#LR__2167
1b160                 | ' do 
1b160                 | LR__2161
1b160                 | '   if runptr<>oldrunptr then
1b160     50 00 00 FF 
1b164     B8 E4 05 F1 | 	add	objptr, ##41144
1b168     F2 2C 02 FB | 	rdlong	local04, objptr
1b16c     08 E4 05 F1 | 	add	objptr, #8
1b170     F2 18 02 FB | 	rdlong	arg04, objptr
1b174     50 00 00 FF 
1b178     C0 E4 85 F1 | 	sub	objptr, ##41152
1b17c     0C 2D 0A F2 | 	cmp	local04, arg04 wz
1b180     CC 00 90 AD |  if_e	jmp	#LR__2162
1b184     50 00 00 FF 
1b188     F0 E4 05 F1 | 	add	objptr, ##41200
1b18c     F2 12 02 F6 | 	mov	arg01, objptr
1b190     38 E4 85 F1 | 	sub	objptr, #56
1b194     F2 14 02 FB | 	rdlong	arg02, objptr
1b198     18 16 06 F6 | 	mov	arg03, #24
1b19c     44 00 00 FF 
1b1a0     EC E5 85 F1 | 	sub	objptr, ##35308
1b1a4     40 B1 B0 FD | 	call	#_psram_spin2_read1
1b1a8     3B 00 00 FF 
1b1ac     B0 E5 05 F1 | 	add	objptr, ##30640
1b1b0     F2 12 02 F6 | 	mov	arg01, objptr
1b1b4     09 00 00 FF 
1b1b8     3C E4 05 F1 | 	add	objptr, ##4668
1b1bc     F2 14 02 FB | 	rdlong	arg02, objptr
1b1c0     0B 00 00 FF 
1b1c4     54 E4 85 F1 | 	sub	objptr, ##5716
1b1c8     F2 2C 02 FB | 	rdlong	local04, objptr
1b1cc     01 2C 66 F0 | 	shl	local04, #1
1b1d0     16 15 02 F1 | 	add	arg02, local04
1b1d4     0B 00 00 FF 
1b1d8     94 E4 05 F1 | 	add	objptr, ##5780
1b1dc     F2 16 02 FB | 	rdlong	arg03, objptr
1b1e0     40 E4 85 F1 | 	sub	objptr, #64
1b1e4     F2 2C 02 FB | 	rdlong	local04, objptr
1b1e8     16 17 82 F1 | 	sub	arg03, local04
1b1ec     44 00 00 FF 
1b1f0     EC E5 85 F1 | 	sub	objptr, ##35308
1b1f4     F0 B0 B0 FD | 	call	#_psram_spin2_read1
1b1f8     45 00 00 FF 
1b1fc     2C E4 05 F1 | 	add	objptr, ##35372
1b200     F2 2C 02 FB | 	rdlong	local04, objptr
1b204     40 E4 85 F1 | 	sub	objptr, #64
1b208     F2 14 02 FB | 	rdlong	arg02, objptr
1b20c     0A 2D 82 F1 | 	sub	local04, arg02
1b210     0B 00 00 FF 
1b214     54 E4 85 F1 | 	sub	objptr, ##5716
1b218     F2 14 02 FB | 	rdlong	arg02, objptr
1b21c     0A 2D 12 FD | 	qdiv	local04, arg02
1b220     05 00 00 FF 
1b224     18 E4 05 F1 | 	add	objptr, ##2584
1b228     18 2C 62 FD | 	getqx	local04
1b22c     03 2C 86 F1 | 	sub	local04, #3
1b230     F2 2C 62 FC | 	wrlong	local04, objptr
1b234     06 00 00 FF 
1b238     3C E4 05 F1 | 	add	objptr, ##3132
1b23c     F2 2C 02 FB | 	rdlong	local04, objptr
1b240     08 E4 05 F1 | 	add	objptr, #8
1b244     F2 2C 62 FC | 	wrlong	local04, objptr
1b248     50 00 00 FF 
1b24c     C0 E4 85 F1 | 	sub	objptr, ##41152
1b250                 | LR__2162
1b250     50 00 00 FF 
1b254     04 E5 05 F1 | 	add	objptr, ##41220
1b258     F2 2C 02 FB | 	rdlong	local04, objptr
1b25c     4C E4 85 F1 | 	sub	objptr, #76
1b260     F2 2C 62 FC | 	wrlong	local04, objptr
1b264     04 E4 05 F1 | 	add	objptr, #4
1b268     F2 12 02 FB | 	rdlong	arg01, objptr
1b26c     50 00 00 FF 
1b270     BC E4 85 F1 | 	sub	objptr, ##41148
1b274     48 23 BF FD | 	call	#_execute_line
1b278     50 00 00 FF 
1b27c     BC E4 05 F1 | 	add	objptr, ##41148
1b280     F2 FA 61 FC | 	wrlong	result1, objptr
1b284     04 E4 85 F1 | 	sub	objptr, #4
1b288     F2 2C 02 FB | 	rdlong	local04, objptr
1b28c     50 00 00 FF 
1b290     B8 E4 85 F1 | 	sub	objptr, ##41144
1b294     FF FF 3F FF 
1b298     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1b29c     4C 00 90 AD |  if_e	jmp	#LR__2165
1b2a0     E0 12 06 F6 | 	mov	arg01, #224
1b2a4     D0 B3 B0 FD | 	call	#_usbnew_spin2_keystate
1b2a8     00 FA 0D F2 | 	cmp	result1, #0 wz
1b2ac     10 00 90 5D |  if_ne	jmp	#LR__2163
1b2b0     E4 12 06 F6 | 	mov	arg01, #228
1b2b4     C0 B3 B0 FD | 	call	#_usbnew_spin2_keystate
1b2b8     00 FA 0D F2 | 	cmp	result1, #0 wz
1b2bc     10 00 90 AD |  if_e	jmp	#LR__2164
1b2c0                 | LR__2163
1b2c0     06 12 06 F6 | 	mov	arg01, #6
1b2c4     B0 B3 B0 FD | 	call	#_usbnew_spin2_keystate
1b2c8     00 FA 0D F2 | 	cmp	result1, #0 wz
1b2cc     1C 00 90 5D |  if_ne	jmp	#LR__2165
1b2d0                 | LR__2164
1b2d0     50 00 00 FF 
1b2d4     EC E4 05 F1 | 	add	objptr, ##41196
1b2d8     F2 2C 02 FB | 	rdlong	local04, objptr
1b2dc     50 00 00 FF 
1b2e0     EC E4 85 F1 | 	sub	objptr, ##41196
1b2e4     02 2C 0E F2 | 	cmp	local04, #2 wz
1b2e8     74 FE 9F 5D |  if_ne	jmp	#LR__2161
1b2ec                 | LR__2165
1b2ec                 | '   ''do whatever kbm.peek_latest_key()=$106 
1b2ec                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
1b2ec     50 00 00 FF 
1b2f0     B8 E4 05 F1 | 	add	objptr, ##41144
1b2f4     F2 2C 02 FB | 	rdlong	local04, objptr
1b2f8     50 00 00 FF 
1b2fc     B8 E4 85 F1 | 	sub	objptr, ##41144
1b300     FF FF 3F FF 
1b304     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1b308     AC 00 90 AD |  if_e	jmp	#LR__2166
1b30c     50 00 00 FF 
1b310     EC E4 05 F1 | 	add	objptr, ##41196
1b314     F2 2C 02 FB | 	rdlong	local04, objptr
1b318     50 00 00 FF 
1b31c     EC E4 85 F1 | 	sub	objptr, ##41196
1b320     01 2C 0E F2 | 	cmp	local04, #1 wz
1b324     90 00 90 5D |  if_ne	jmp	#LR__2166
1b328                 | '   print: print "Stopped at line ";runheader(0) 
1b328     00 12 06 F6 | 	mov	arg01, #0
1b32c     68 19 B1 FD | 	call	#__system___getiolock_0613
1b330     FD 12 02 F6 | 	mov	arg01, result1
1b334     38 BC B0 FD | 	call	#__system___lockmem
1b338     00 12 06 F6 | 	mov	arg01, #0
1b33c     0A 14 06 F6 | 	mov	arg02, #10
1b340     00 16 06 F6 | 	mov	arg03, #0
1b344     C4 C8 B0 FD | 	call	#__system___basic_print_char
1b348     00 12 06 F6 | 	mov	arg01, #0
1b34c     48 19 B1 FD | 	call	#__system___getiolock_0613
1b350     FD 00 68 FC | 	wrlong	#0, result1
1b354     00 12 06 F6 | 	mov	arg01, #0
1b358     3C 19 B1 FD | 	call	#__system___getiolock_0613
1b35c     FD 12 02 F6 | 	mov	arg01, result1
1b360     0C BC B0 FD | 	call	#__system___lockmem
1b364     BB 01 00 FF 
1b368     38 14 06 F6 | 	mov	arg02, ##@LR__6002
1b36c     00 12 06 F6 | 	mov	arg01, #0
1b370     00 16 06 F6 | 	mov	arg03, #0
1b374     EC C8 B0 FD | 	call	#__system___basic_print_string
1b378     50 00 00 FF 
1b37c     F0 E4 05 F1 | 	add	objptr, ##41200
1b380     F2 14 02 FB | 	rdlong	arg02, objptr
1b384     50 00 00 FF 
1b388     F0 E4 85 F1 | 	sub	objptr, ##41200
1b38c     00 12 06 F6 | 	mov	arg01, #0
1b390     00 16 06 F6 | 	mov	arg03, #0
1b394     0A 18 06 F6 | 	mov	arg04, #10
1b398     4C C9 B0 FD | 	call	#__system___basic_print_unsigned
1b39c     00 12 06 F6 | 	mov	arg01, #0
1b3a0     0A 14 06 F6 | 	mov	arg02, #10
1b3a4     00 16 06 F6 | 	mov	arg03, #0
1b3a8     60 C8 B0 FD | 	call	#__system___basic_print_char
1b3ac     00 12 06 F6 | 	mov	arg01, #0
1b3b0     E4 18 B1 FD | 	call	#__system___getiolock_0613
1b3b4     FD 00 68 FC | 	wrlong	#0, result1
1b3b8                 | LR__2166
1b3b8     50 00 00 FF 
1b3bc     EC E4 05 F1 | 	add	objptr, ##41196
1b3c0     F2 00 68 FC | 	wrlong	#0, objptr
1b3c4     06 00 00 FF 
1b3c8     6C E4 85 F1 | 	sub	objptr, ##3180
1b3cc     F2 26 62 FC | 	wrlong	local01, objptr
1b3d0     06 00 00 FF 
1b3d4     38 E4 05 F1 | 	add	objptr, ##3128
1b3d8     F2 28 62 FC | 	wrlong	local02, objptr
1b3dc     04 E4 05 F1 | 	add	objptr, #4
1b3e0     F2 2A 62 FC | 	wrlong	local03, objptr
1b3e4     50 00 00 FF 
1b3e8     BC E4 85 F1 | 	sub	objptr, ##41148
1b3ec     11 12 06 F6 | 	mov	arg01, #17
1b3f0     08 14 06 F6 | 	mov	arg02, #8
1b3f4     10 16 06 F6 | 	mov	arg03, #16
1b3f8     A0 91 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b3fc     10 12 06 F6 | 	mov	arg01, #16
1b400     20 14 06 F6 | 	mov	arg02, #32
1b404     20 16 06 F6 | 	mov	arg03, #32
1b408     90 91 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b40c                 | LR__2167
1b40c     A7 F0 03 F6 | 	mov	ptra, fp
1b410     B2 00 A0 FD | 	call	#popregs_
1b414                 | _do_run_ret
1b414     2D 00 64 FD | 	ret
1b418                 | 
1b418                 | ' 
1b418                 | ' ' ------------------ save
1b418                 | ' 
1b418                 | ' sub do_save                        
1b418                 | _do_save
1b418     04 4A 05 F6 | 	mov	COUNT_, #4
1b41c     A8 00 A0 FD | 	call	#pushregs_
1b420     B8 F0 07 F1 | 	add	ptra, #184
1b424     4A 00 00 FF 
1b428     80 E4 05 F1 | 	add	objptr, ##38016
1b42c     F2 26 02 FB | 	rdlong	local01, objptr
1b430     13 29 02 F6 | 	mov	local02, local01
1b434     01 28 66 F0 | 	shl	local02, #1
1b438     13 29 02 F1 | 	add	local02, local01
1b43c     02 28 66 F0 | 	shl	local02, #2
1b440     03 00 00 FF 
1b444     04 E4 85 F1 | 	sub	objptr, ##1540
1b448     F2 28 02 F1 | 	add	local02, objptr
1b44c     14 2B 02 FB | 	rdlong	local03, local02
1b450     10 4E 05 F1 | 	add	fp, #16
1b454     A7 2A 62 FC | 	wrlong	local03, fp
1b458                 | ' 
1b458                 | ' numpar=compiledline(lineptr_e).result.uresult
1b458                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1b458     10 4E 85 F1 | 	sub	fp, #16
1b45c     01 2A 56 F2 | 	cmps	local03, #1 wc
1b460     47 00 00 FF 
1b464     7C E4 85 F1 | 	sub	objptr, ##36476
1b468     20 00 90 CD |  if_b	jmp	#LR__2170
1b46c     54 22 BF FD | 	call	#_pop
1b470     A7 FA 61 FC | 	wrlong	result1, fp
1b474     04 4E 05 F1 | 	add	fp, #4
1b478     A7 FC 61 FC | 	wrlong	result2, fp
1b47c     04 4E 05 F1 | 	add	fp, #4
1b480     A7 FE 61 FC | 	wrlong	result3, fp
1b484     08 4E 85 F1 | 	sub	fp, #8
1b488     24 00 90 FD | 	jmp	#LR__2171
1b48c                 | LR__2170
1b48c     52 00 00 FF 
1b490     C4 E4 05 F1 | 	add	objptr, ##42180
1b494     F2 2A 02 FB | 	rdlong	local03, objptr
1b498     52 00 00 FF 
1b49c     C4 E4 85 F1 | 	sub	objptr, ##42180
1b4a0     A7 2A 62 FC | 	wrlong	local03, fp
1b4a4     08 4E 05 F1 | 	add	fp, #8
1b4a8     A7 3E 68 FC | 	wrlong	#31, fp
1b4ac     08 4E 85 F1 | 	sub	fp, #8
1b4b0                 | LR__2171
1b4b0                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
1b4b0     4A 00 00 FF 
1b4b4     88 E4 05 F1 | 	add	objptr, ##38024
1b4b8     F2 12 02 FB | 	rdlong	arg01, objptr
1b4bc     4A 00 00 FF 
1b4c0     88 E4 85 F1 | 	sub	objptr, ##38024
1b4c4     5C 83 B0 FD | 	call	#_pslpeek
1b4c8     FF FF 7F FF 
1b4cc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1b4d0     10 00 90 5D |  if_ne	jmp	#LR__2172
1b4d4     1B 12 06 F6 | 	mov	arg01, #27
1b4d8     00 14 06 F6 | 	mov	arg02, #0
1b4dc     74 80 B0 FD | 	call	#_printerror
1b4e0     CC 02 90 FD | 	jmp	#LR__2178
1b4e4                 | LR__2172
1b4e4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1b4e4     08 4E 05 F1 | 	add	fp, #8
1b4e8     A7 2A 02 FB | 	rdlong	local03, fp
1b4ec     08 4E 85 F1 | 	sub	fp, #8
1b4f0     2B 2A 0E F2 | 	cmp	local03, #43 wz
1b4f4     18 00 90 5D |  if_ne	jmp	#LR__2173
1b4f8     A7 12 02 FB | 	rdlong	arg01, fp
1b4fc     3C 23 BF FD | 	call	#_convertstring
1b500     A7 FA 61 FC | 	wrlong	result1, fp
1b504     08 4E 05 F1 | 	add	fp, #8
1b508     A7 3E 68 FC | 	wrlong	#31, fp
1b50c     08 4E 85 F1 | 	sub	fp, #8
1b510                 | LR__2173
1b510                 | ' if t1.result_type=result_string then
1b510     08 4E 05 F1 | 	add	fp, #8
1b514     A7 2A 02 FB | 	rdlong	local03, fp
1b518     08 4E 85 F1 | 	sub	fp, #8
1b51c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1b520     8C 02 90 5D |  if_ne	jmp	#LR__2177
1b524                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1b524     A7 12 02 FB | 	rdlong	arg01, fp
1b528     BB 01 00 FF 
1b52c     49 14 06 F6 | 	mov	arg02, ##@LR__6003
1b530     64 BA B0 FD | 	call	#__system___string_cmp
1b534     00 FA 0D F2 | 	cmp	result1, #0 wz
1b538     52 00 00 AF 
1b53c     C4 E4 05 A1 |  if_e	add	objptr, ##42180
1b540     F2 2A 02 AB |  if_e	rdlong	local03, objptr
1b544     A7 2A 62 AC |  if_e	wrlong	local03, fp
1b548     52 00 00 AF 
1b54c     C4 E4 85 A1 |  if_e	sub	objptr, ##42180
1b550     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1b554     52 00 00 5F 
1b558     C4 E4 05 51 |  if_ne	add	objptr, ##42180
1b55c     F2 2A 62 5C |  if_ne	wrlong	local03, objptr
1b560     52 00 00 5F 
1b564     C4 E4 85 51 |  if_ne	sub	objptr, ##42180
1b568                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
1b568     09 12 06 F6 | 	mov	arg01, #9
1b56c     58 0D B1 FD | 	call	#__system__close
1b570     09 2A 06 F6 | 	mov	local03, #9
1b574     4A 00 00 FF 
1b578     94 E4 05 F1 | 	add	objptr, ##38036
1b57c     F2 12 02 FB | 	rdlong	arg01, objptr
1b580     4A 00 00 FF 
1b584     94 E4 85 F1 | 	sub	objptr, ##38036
1b588     BB 01 00 FF 
1b58c     4A 14 06 F6 | 	mov	arg02, ##@LR__6004
1b590     38 BA B0 FD | 	call	#__system___string_concat
1b594     FD 12 02 F6 | 	mov	arg01, result1
1b598     A7 14 02 FB | 	rdlong	arg02, fp
1b59c     2C BA B0 FD | 	call	#__system___string_concat
1b5a0     FD 14 02 F6 | 	mov	arg02, result1
1b5a4     15 13 02 F6 | 	mov	arg01, local03
1b5a8     0D 16 06 F6 | 	mov	arg03, #13
1b5ac     C4 C5 B0 FD | 	call	#__system___basic_open_string
1b5b0     4A 00 00 FF 
1b5b4     88 E4 05 F1 | 	add	objptr, ##38024
1b5b8     F2 2A 02 FB | 	rdlong	local03, objptr
1b5bc     4A 00 00 FF 
1b5c0     88 E4 85 F1 | 	sub	objptr, ##38024
1b5c4     B0 4E 05 F1 | 	add	fp, #176
1b5c8     A7 2A 62 FC | 	wrlong	local03, fp
1b5cc     B0 4E 85 F1 | 	sub	fp, #176
1b5d0                 | '   saveptr=programstart
1b5d0                 | '   do
1b5d0                 | LR__2174
1b5d0     14 4E 05 F1 | 	add	fp, #20
1b5d4     A7 12 02 F6 | 	mov	arg01, fp
1b5d8     9C 4E 05 F1 | 	add	fp, #156
1b5dc     A7 14 02 FB | 	rdlong	arg02, fp
1b5e0     B0 4E 85 F1 | 	sub	fp, #176
1b5e4     18 16 06 F6 | 	mov	arg03, #24
1b5e8     0B 00 00 FF 
1b5ec     CC E4 05 F1 | 	add	objptr, ##5836
1b5f0     F4 AC B0 FD | 	call	#_psram_spin2_read1
1b5f4     2C 4E 05 F1 | 	add	fp, #44
1b5f8     A7 12 02 F6 | 	mov	arg01, fp
1b5fc     10 4E 85 F1 | 	sub	fp, #16
1b600     A7 14 02 FB | 	rdlong	arg02, fp
1b604     04 4E 05 F1 | 	add	fp, #4
1b608     A7 16 02 FB | 	rdlong	arg03, fp
1b60c     20 4E 85 F1 | 	sub	fp, #32
1b610     D4 AC B0 FD | 	call	#_psram_spin2_read1
1b614     0B 00 00 FF 
1b618     CC E4 85 F1 | 	sub	objptr, ##5836
1b61c     BB 01 00 FF 
1b620     4C 2A 06 F6 | 	mov	local03, ##@LR__6005
1b624     AC 4E 05 F1 | 	add	fp, #172
1b628     A7 2A 62 FC | 	wrlong	local03, fp
1b62c                 | '     psram.read1(varptr(header(0)),saveptr,24)
1b62c                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
1b62c                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
1b62c     A0 4E 85 F1 | 	sub	fp, #160
1b630     A7 02 68 FC | 	wrlong	#1, fp
1b634     14 4E 05 F1 | 	add	fp, #20
1b638     A7 2C 02 FB | 	rdlong	local04, fp
1b63c     20 4E 85 F1 | 	sub	fp, #32
1b640     01 2C 06 F1 | 	add	local04, #1
1b644                 | LR__2175
1b644     0C 4E 05 F1 | 	add	fp, #12
1b648     A7 2A 02 FB | 	rdlong	local03, fp
1b64c     0C 4E 85 F1 | 	sub	fp, #12
1b650     16 2B 52 F2 | 	cmps	local03, local04 wc
1b654     54 00 90 3D |  if_ae	jmp	#LR__2176
1b658     AC 4E 05 F1 | 	add	fp, #172
1b65c     A7 26 02 FB | 	rdlong	local01, fp
1b660     A0 4E 85 F1 | 	sub	fp, #160
1b664     A7 2A 02 FB | 	rdlong	local03, fp
1b668     01 2A 86 F1 | 	sub	local03, #1
1b66c     20 4E 05 F1 | 	add	fp, #32
1b670     A7 2A 02 F1 | 	add	local03, fp
1b674     15 13 C2 FA | 	rdbyte	arg01, local03
1b678     2C 4E 85 F1 | 	sub	fp, #44
1b67c     30 DB B0 FD | 	call	#__system__Chr_S
1b680     FD 14 02 F6 | 	mov	arg02, result1
1b684     13 13 02 F6 | 	mov	arg01, local01
1b688     40 B9 B0 FD | 	call	#__system___string_concat
1b68c     AC 4E 05 F1 | 	add	fp, #172
1b690     A7 FA 61 FC | 	wrlong	result1, fp
1b694     A0 4E 85 F1 | 	sub	fp, #160
1b698     A7 2A 02 FB | 	rdlong	local03, fp
1b69c     01 2A 06 F1 | 	add	local03, #1
1b6a0     A7 2A 62 FC | 	wrlong	local03, fp
1b6a4     0C 4E 85 F1 | 	sub	fp, #12
1b6a8     98 FF 9F FD | 	jmp	#LR__2175
1b6ac                 | LR__2176
1b6ac                 | '     print #9, saveline$
1b6ac     09 12 06 F6 | 	mov	arg01, #9
1b6b0     E4 15 B1 FD | 	call	#__system___getiolock_0613
1b6b4     FD 12 02 F6 | 	mov	arg01, result1
1b6b8     B4 B8 B0 FD | 	call	#__system___lockmem
1b6bc     AC 4E 05 F1 | 	add	fp, #172
1b6c0     A7 14 02 FB | 	rdlong	arg02, fp
1b6c4     AC 4E 85 F1 | 	sub	fp, #172
1b6c8     09 12 06 F6 | 	mov	arg01, #9
1b6cc     00 16 06 F6 | 	mov	arg03, #0
1b6d0     90 C5 B0 FD | 	call	#__system___basic_print_string
1b6d4     09 12 06 F6 | 	mov	arg01, #9
1b6d8     0A 14 06 F6 | 	mov	arg02, #10
1b6dc     00 16 06 F6 | 	mov	arg03, #0
1b6e0     28 C5 B0 FD | 	call	#__system___basic_print_char
1b6e4     09 12 06 F6 | 	mov	arg01, #9
1b6e8     AC 15 B1 FD | 	call	#__system___getiolock_0613
1b6ec     FD 00 68 FC | 	wrlong	#0, result1
1b6f0     28 4E 05 F1 | 	add	fp, #40
1b6f4     A7 2A 02 FB | 	rdlong	local03, fp
1b6f8     88 4E 05 F1 | 	add	fp, #136
1b6fc     A7 2A 62 FC | 	wrlong	local03, fp
1b700     88 4E 85 F1 | 	sub	fp, #136
1b704     A7 2A 02 FB | 	rdlong	local03, fp
1b708     28 4E 85 F1 | 	sub	fp, #40
1b70c     FF FF 3F FF 
1b710     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
1b714     B8 FE 9F 5D |  if_ne	jmp	#LR__2174
1b718                 | '   close #9  
1b718     09 12 06 F6 | 	mov	arg01, #9
1b71c     A8 0B B1 FD | 	call	#__system__close
1b720                 | '   print "Saved as ";currentdir$+"/"+loadname
1b720     00 12 06 F6 | 	mov	arg01, #0
1b724     70 15 B1 FD | 	call	#__system___getiolock_0613
1b728     FD 12 02 F6 | 	mov	arg01, result1
1b72c     40 B8 B0 FD | 	call	#__system___lockmem
1b730     BB 01 00 FF 
1b734     4D 14 06 F6 | 	mov	arg02, ##@LR__6006
1b738     00 12 06 F6 | 	mov	arg01, #0
1b73c     00 16 06 F6 | 	mov	arg03, #0
1b740     20 C5 B0 FD | 	call	#__system___basic_print_string
1b744     00 28 06 F6 | 	mov	local02, #0
1b748     4A 00 00 FF 
1b74c     94 E4 05 F1 | 	add	objptr, ##38036
1b750     F2 12 02 FB | 	rdlong	arg01, objptr
1b754     4A 00 00 FF 
1b758     94 E4 85 F1 | 	sub	objptr, ##38036
1b75c     BB 01 00 FF 
1b760     57 14 06 F6 | 	mov	arg02, ##@LR__6007
1b764     64 B8 B0 FD | 	call	#__system___string_concat
1b768     FD 12 02 F6 | 	mov	arg01, result1
1b76c     52 00 00 FF 
1b770     C4 E4 05 F1 | 	add	objptr, ##42180
1b774     F2 14 02 FB | 	rdlong	arg02, objptr
1b778     52 00 00 FF 
1b77c     C4 E4 85 F1 | 	sub	objptr, ##42180
1b780     48 B8 B0 FD | 	call	#__system___string_concat
1b784     FD 14 02 F6 | 	mov	arg02, result1
1b788     14 13 02 F6 | 	mov	arg01, local02
1b78c     00 16 06 F6 | 	mov	arg03, #0
1b790     D0 C4 B0 FD | 	call	#__system___basic_print_string
1b794     00 12 06 F6 | 	mov	arg01, #0
1b798     0A 14 06 F6 | 	mov	arg02, #10
1b79c     00 16 06 F6 | 	mov	arg03, #0
1b7a0     68 C4 B0 FD | 	call	#__system___basic_print_char
1b7a4     00 12 06 F6 | 	mov	arg01, #0
1b7a8     EC 14 B1 FD | 	call	#__system___getiolock_0613
1b7ac     FD 00 68 FC | 	wrlong	#0, result1
1b7b0                 | LR__2177
1b7b0                 | LR__2178
1b7b0     A7 F0 03 F6 | 	mov	ptra, fp
1b7b4     B2 00 A0 FD | 	call	#popregs_
1b7b8                 | _do_save_ret
1b7b8     2D 00 64 FD | 	ret
1b7bc                 | 
1b7bc                 | ' 
1b7bc                 | ' ' ------------------ setcolor
1b7bc                 | ' 
1b7bc                 | ' sub do_setcolor
1b7bc                 | _do_setcolor
1b7bc     00 4A 05 F6 | 	mov	COUNT_, #0
1b7c0     A8 00 A0 FD | 	call	#pushregs_
1b7c4     20 F0 07 F1 | 	add	ptra, #32
1b7c8     4A 00 00 FF 
1b7cc     80 E4 05 F1 | 	add	objptr, ##38016
1b7d0     F2 18 02 FB | 	rdlong	arg04, objptr
1b7d4     0C 17 02 F6 | 	mov	arg03, arg04
1b7d8     01 16 66 F0 | 	shl	arg03, #1
1b7dc     0C 17 02 F1 | 	add	arg03, arg04
1b7e0     02 16 66 F0 | 	shl	arg03, #2
1b7e4     03 00 00 FF 
1b7e8     04 E4 85 F1 | 	sub	objptr, ##1540
1b7ec     F2 16 02 F1 | 	add	arg03, objptr
1b7f0     0B 19 02 FB | 	rdlong	arg04, arg03
1b7f4     1C 4E 05 F1 | 	add	fp, #28
1b7f8     A7 18 62 FC | 	wrlong	arg04, fp
1b7fc                 | ' 
1b7fc                 | ' numpar=compiledline(lineptr_e).result.uresult
1b7fc                 | ' 
1b7fc                 | ' if numpar=4 then
1b7fc     1C 4E 85 F1 | 	sub	fp, #28
1b800     04 18 0E F2 | 	cmp	arg04, #4 wz
1b804     47 00 00 FF 
1b808     7C E4 85 F1 | 	sub	objptr, ##36476
1b80c     E0 00 90 5D |  if_ne	jmp	#LR__2180
1b810     B0 1E BF FD | 	call	#_pop
1b814     FF 18 02 F6 | 	mov	arg04, result3
1b818     A7 FA 61 FC | 	wrlong	result1, fp
1b81c     04 4E 05 F1 | 	add	fp, #4
1b820     A7 FC 61 FC | 	wrlong	result2, fp
1b824     04 4E 05 F1 | 	add	fp, #4
1b828     A7 18 62 FC | 	wrlong	arg04, fp
1b82c     08 4E 85 F1 | 	sub	fp, #8
1b830     A7 12 02 F6 | 	mov	arg01, fp
1b834     70 20 BF FD | 	call	#_converttoint
1b838     FD 18 02 F6 | 	mov	arg04, result1
1b83c     14 4E 05 F1 | 	add	fp, #20
1b840     A7 18 62 FC | 	wrlong	arg04, fp
1b844     14 4E 85 F1 | 	sub	fp, #20
1b848     78 1E BF FD | 	call	#_pop
1b84c     FF 18 02 F6 | 	mov	arg04, result3
1b850     A7 FA 61 FC | 	wrlong	result1, fp
1b854     04 4E 05 F1 | 	add	fp, #4
1b858     A7 FC 61 FC | 	wrlong	result2, fp
1b85c     04 4E 05 F1 | 	add	fp, #4
1b860     A7 18 62 FC | 	wrlong	arg04, fp
1b864     08 4E 85 F1 | 	sub	fp, #8
1b868     A7 12 02 F6 | 	mov	arg01, fp
1b86c     38 20 BF FD | 	call	#_converttoint
1b870     FD 18 02 F6 | 	mov	arg04, result1
1b874     10 4E 05 F1 | 	add	fp, #16
1b878     A7 18 62 FC | 	wrlong	arg04, fp
1b87c     10 4E 85 F1 | 	sub	fp, #16
1b880     40 1E BF FD | 	call	#_pop
1b884     FF 18 02 F6 | 	mov	arg04, result3
1b888     A7 FA 61 FC | 	wrlong	result1, fp
1b88c     04 4E 05 F1 | 	add	fp, #4
1b890     A7 FC 61 FC | 	wrlong	result2, fp
1b894     04 4E 05 F1 | 	add	fp, #4
1b898     A7 18 62 FC | 	wrlong	arg04, fp
1b89c     08 4E 85 F1 | 	sub	fp, #8
1b8a0     A7 12 02 F6 | 	mov	arg01, fp
1b8a4     00 20 BF FD | 	call	#_converttoint
1b8a8     FD 18 02 F6 | 	mov	arg04, result1
1b8ac     0C 4E 05 F1 | 	add	fp, #12
1b8b0     A7 18 62 FC | 	wrlong	arg04, fp
1b8b4     0C 4E 85 F1 | 	sub	fp, #12
1b8b8     08 1E BF FD | 	call	#_pop
1b8bc     FF 18 02 F6 | 	mov	arg04, result3
1b8c0     A7 FA 61 FC | 	wrlong	result1, fp
1b8c4     04 4E 05 F1 | 	add	fp, #4
1b8c8     A7 FC 61 FC | 	wrlong	result2, fp
1b8cc     04 4E 05 F1 | 	add	fp, #4
1b8d0     A7 18 62 FC | 	wrlong	arg04, fp
1b8d4     08 4E 85 F1 | 	sub	fp, #8
1b8d8     A7 12 02 F6 | 	mov	arg01, fp
1b8dc     C8 1F BF FD | 	call	#_converttoint
1b8e0     18 4E 05 F1 | 	add	fp, #24
1b8e4     A7 FA 61 FC | 	wrlong	result1, fp
1b8e8     18 4E 85 F1 | 	sub	fp, #24
1b8ec     04 01 90 FD | 	jmp	#LR__2183
1b8f0                 | LR__2180
1b8f0     1C 4E 05 F1 | 	add	fp, #28
1b8f4     A7 18 02 FB | 	rdlong	arg04, fp
1b8f8     1C 4E 85 F1 | 	sub	fp, #28
1b8fc     02 18 0E F2 | 	cmp	arg04, #2 wz
1b900     A0 00 90 5D |  if_ne	jmp	#LR__2181
1b904     BC 1D BF FD | 	call	#_pop
1b908     FF 18 02 F6 | 	mov	arg04, result3
1b90c     A7 FA 61 FC | 	wrlong	result1, fp
1b910     04 4E 05 F1 | 	add	fp, #4
1b914     A7 FC 61 FC | 	wrlong	result2, fp
1b918     04 4E 05 F1 | 	add	fp, #4
1b91c     A7 18 62 FC | 	wrlong	arg04, fp
1b920     08 4E 85 F1 | 	sub	fp, #8
1b924     A7 12 02 F6 | 	mov	arg01, fp
1b928     7C 1F BF FD | 	call	#_converttoint
1b92c     18 4E 05 F1 | 	add	fp, #24
1b930     A7 FA 61 FC | 	wrlong	result1, fp
1b934     FD FA E1 F8 | 	getbyte	result1, result1, #0
1b938     04 4E 85 F1 | 	sub	fp, #4
1b93c     A7 FA 61 FC | 	wrlong	result1, fp
1b940     04 4E 05 F1 | 	add	fp, #4
1b944     A7 18 02 FB | 	rdlong	arg04, fp
1b948     0C 19 EA F8 | 	getbyte	arg04, arg04, #1
1b94c     08 4E 85 F1 | 	sub	fp, #8
1b950     A7 18 62 FC | 	wrlong	arg04, fp
1b954     08 4E 05 F1 | 	add	fp, #8
1b958     A7 18 02 FB | 	rdlong	arg04, fp
1b95c     0C 19 F2 F8 | 	getbyte	arg04, arg04, #2
1b960     0C 4E 85 F1 | 	sub	fp, #12
1b964     A7 18 62 FC | 	wrlong	arg04, fp
1b968     0C 4E 85 F1 | 	sub	fp, #12
1b96c     54 1D BF FD | 	call	#_pop
1b970     FF 18 02 F6 | 	mov	arg04, result3
1b974     A7 FA 61 FC | 	wrlong	result1, fp
1b978     04 4E 05 F1 | 	add	fp, #4
1b97c     A7 FC 61 FC | 	wrlong	result2, fp
1b980     04 4E 05 F1 | 	add	fp, #4
1b984     A7 18 62 FC | 	wrlong	arg04, fp
1b988     08 4E 85 F1 | 	sub	fp, #8
1b98c     A7 12 02 F6 | 	mov	arg01, fp
1b990     14 1F BF FD | 	call	#_converttoint
1b994     18 4E 05 F1 | 	add	fp, #24
1b998     A7 FA 61 FC | 	wrlong	result1, fp
1b99c     18 4E 85 F1 | 	sub	fp, #24
1b9a0     50 00 90 FD | 	jmp	#LR__2182
1b9a4                 | LR__2181
1b9a4                 | '   print "setcolor: "; : printerror(39,runheader(0)) : return  
1b9a4     00 12 06 F6 | 	mov	arg01, #0
1b9a8     EC 12 B1 FD | 	call	#__system___getiolock_0613
1b9ac     FD 12 02 F6 | 	mov	arg01, result1
1b9b0     BC B5 B0 FD | 	call	#__system___lockmem
1b9b4     BB 01 00 FF 
1b9b8     59 14 06 F6 | 	mov	arg02, ##@LR__6008
1b9bc     00 12 06 F6 | 	mov	arg01, #0
1b9c0     00 16 06 F6 | 	mov	arg03, #0
1b9c4     9C C2 B0 FD | 	call	#__system___basic_print_string
1b9c8     00 12 06 F6 | 	mov	arg01, #0
1b9cc     C8 12 B1 FD | 	call	#__system___getiolock_0613
1b9d0     FD 00 68 FC | 	wrlong	#0, result1
1b9d4     50 00 00 FF 
1b9d8     F0 E4 05 F1 | 	add	objptr, ##41200
1b9dc     F2 14 02 FB | 	rdlong	arg02, objptr
1b9e0     50 00 00 FF 
1b9e4     F0 E4 85 F1 | 	sub	objptr, ##41200
1b9e8     27 12 06 F6 | 	mov	arg01, #39
1b9ec     64 7B B0 FD | 	call	#_printerror
1b9f0     28 00 90 FD | 	jmp	#LR__2184
1b9f4                 | LR__2182
1b9f4                 | LR__2183
1b9f4     18 4E 05 F1 | 	add	fp, #24
1b9f8     A7 12 02 FB | 	rdlong	arg01, fp
1b9fc     0C 4E 85 F1 | 	sub	fp, #12
1ba00     A7 14 02 FB | 	rdlong	arg02, fp
1ba04     04 4E 05 F1 | 	add	fp, #4
1ba08     A7 16 02 FB | 	rdlong	arg03, fp
1ba0c     04 4E 05 F1 | 	add	fp, #4
1ba10     A7 18 02 FB | 	rdlong	arg04, fp
1ba14     14 4E 85 F1 | 	sub	fp, #20
1ba18     A0 98 B0 FD | 	call	#_hg010b_spin2_setcolor
1ba1c                 | LR__2184
1ba1c     A7 F0 03 F6 | 	mov	ptra, fp
1ba20     B2 00 A0 FD | 	call	#popregs_
1ba24                 | _do_setcolor_ret
1ba24     2D 00 64 FD | 	ret
1ba28                 | 
1ba28                 | ' 
1ba28                 | ' ' ------------------ setdelay
1ba28                 | ' 
1ba28                 | ' sub do_setdelay
1ba28                 | _do_setdelay
1ba28     02 4A 05 F6 | 	mov	COUNT_, #2
1ba2c     A8 00 A0 FD | 	call	#pushregs_
1ba30     18 F0 07 F1 | 	add	ptra, #24
1ba34     8C 1C BF FD | 	call	#_pop
1ba38     FD 12 02 F6 | 	mov	arg01, result1
1ba3c     FE 26 02 F6 | 	mov	local01, result2
1ba40     FF 28 02 F6 | 	mov	local02, result3
1ba44     A7 12 62 FC | 	wrlong	arg01, fp
1ba48     04 4E 05 F1 | 	add	fp, #4
1ba4c     A7 26 62 FC | 	wrlong	local01, fp
1ba50     04 4E 05 F1 | 	add	fp, #4
1ba54     A7 28 62 FC | 	wrlong	local02, fp
1ba58     08 4E 85 F1 | 	sub	fp, #8
1ba5c     64 1C BF FD | 	call	#_pop
1ba60     FD 28 02 F6 | 	mov	local02, result1
1ba64     0C 4E 05 F1 | 	add	fp, #12
1ba68     A7 28 62 FC | 	wrlong	local02, fp
1ba6c     04 4E 05 F1 | 	add	fp, #4
1ba70     A7 FC 61 FC | 	wrlong	result2, fp
1ba74     04 4E 05 F1 | 	add	fp, #4
1ba78     A7 FE 61 FC | 	wrlong	result3, fp
1ba7c     08 4E 85 F1 | 	sub	fp, #8
1ba80     A7 12 02 F6 | 	mov	arg01, fp
1ba84     0C 4E 85 F1 | 	sub	fp, #12
1ba88     1C 1E BF FD | 	call	#_converttoint
1ba8c     FD 28 02 F6 | 	mov	local02, result1
1ba90     14 27 02 F6 | 	mov	local01, local02
1ba94     01 26 66 F0 | 	shl	local01, #1
1ba98     14 27 02 F1 | 	add	local01, local02
1ba9c     03 26 66 F0 | 	shl	local01, #3
1baa0     14 00 00 FF 
1baa4     38 E5 05 F1 | 	add	objptr, ##10552
1baa8     F2 26 02 F1 | 	add	local01, objptr
1baac     A7 12 02 F6 | 	mov	arg01, fp
1bab0     14 00 00 FF 
1bab4     38 E5 85 F1 | 	sub	objptr, ##10552
1bab8     EC 1D BF FD | 	call	#_converttoint
1babc     06 26 06 F1 | 	add	local01, #6
1bac0     13 FB 51 FC | 	wrword	result1, local01
1bac4     A7 F0 03 F6 | 	mov	ptra, fp
1bac8     B2 00 A0 FD | 	call	#popregs_
1bacc                 | _do_setdelay_ret
1bacc     2D 00 64 FD | 	ret
1bad0                 | 
1bad0                 | ' 
1bad0                 | ' ' ------------------ setenv
1bad0                 | ' 
1bad0                 | ' sub do_setenv
1bad0                 | _do_setenv
1bad0     02 4A 05 F6 | 	mov	COUNT_, #2
1bad4     A8 00 A0 FD | 	call	#pushregs_
1bad8     18 F0 07 F1 | 	add	ptra, #24
1badc     E4 1B BF FD | 	call	#_pop
1bae0     FD 12 02 F6 | 	mov	arg01, result1
1bae4     FE 26 02 F6 | 	mov	local01, result2
1bae8     FF 28 02 F6 | 	mov	local02, result3
1baec     A7 12 62 FC | 	wrlong	arg01, fp
1baf0     04 4E 05 F1 | 	add	fp, #4
1baf4     A7 26 62 FC | 	wrlong	local01, fp
1baf8     04 4E 05 F1 | 	add	fp, #4
1bafc     A7 28 62 FC | 	wrlong	local02, fp
1bb00     08 4E 85 F1 | 	sub	fp, #8
1bb04     BC 1B BF FD | 	call	#_pop
1bb08     FD 28 02 F6 | 	mov	local02, result1
1bb0c     0C 4E 05 F1 | 	add	fp, #12
1bb10     A7 28 62 FC | 	wrlong	local02, fp
1bb14     04 4E 05 F1 | 	add	fp, #4
1bb18     A7 FC 61 FC | 	wrlong	result2, fp
1bb1c     04 4E 05 F1 | 	add	fp, #4
1bb20     A7 FE 61 FC | 	wrlong	result3, fp
1bb24     08 4E 85 F1 | 	sub	fp, #8
1bb28     A7 12 02 F6 | 	mov	arg01, fp
1bb2c     0C 4E 85 F1 | 	sub	fp, #12
1bb30     74 1D BF FD | 	call	#_converttoint
1bb34     FD 28 02 F6 | 	mov	local02, result1
1bb38     14 27 02 F6 | 	mov	local01, local02
1bb3c     01 26 66 F0 | 	shl	local01, #1
1bb40     14 27 02 F1 | 	add	local01, local02
1bb44     03 26 66 F0 | 	shl	local01, #3
1bb48     14 00 00 FF 
1bb4c     38 E5 05 F1 | 	add	objptr, ##10552
1bb50     F2 26 02 F1 | 	add	local01, objptr
1bb54     A7 12 02 F6 | 	mov	arg01, fp
1bb58     14 00 00 FF 
1bb5c     38 E5 85 F1 | 	sub	objptr, ##10552
1bb60     44 1D BF FD | 	call	#_converttoint
1bb64     05 26 06 F1 | 	add	local01, #5
1bb68     13 FB 41 FC | 	wrbyte	result1, local01
1bb6c     A7 F0 03 F6 | 	mov	ptra, fp
1bb70     B2 00 A0 FD | 	call	#popregs_
1bb74                 | _do_setenv_ret
1bb74     2D 00 64 FD | 	ret
1bb78                 | 
1bb78                 | ' 
1bb78                 | ' ' ------------------ setlen
1bb78                 | ' 
1bb78                 | ' sub do_setlen
1bb78                 | _do_setlen
1bb78     02 4A 05 F6 | 	mov	COUNT_, #2
1bb7c     A8 00 A0 FD | 	call	#pushregs_
1bb80     18 F0 07 F1 | 	add	ptra, #24
1bb84     3C 1B BF FD | 	call	#_pop
1bb88     FD 12 02 F6 | 	mov	arg01, result1
1bb8c     FE 26 02 F6 | 	mov	local01, result2
1bb90     FF 28 02 F6 | 	mov	local02, result3
1bb94     A7 12 62 FC | 	wrlong	arg01, fp
1bb98     04 4E 05 F1 | 	add	fp, #4
1bb9c     A7 26 62 FC | 	wrlong	local01, fp
1bba0     04 4E 05 F1 | 	add	fp, #4
1bba4     A7 28 62 FC | 	wrlong	local02, fp
1bba8     08 4E 85 F1 | 	sub	fp, #8
1bbac     14 1B BF FD | 	call	#_pop
1bbb0     FD 28 02 F6 | 	mov	local02, result1
1bbb4     0C 4E 05 F1 | 	add	fp, #12
1bbb8     A7 28 62 FC | 	wrlong	local02, fp
1bbbc     04 4E 05 F1 | 	add	fp, #4
1bbc0     A7 FC 61 FC | 	wrlong	result2, fp
1bbc4     04 4E 05 F1 | 	add	fp, #4
1bbc8     A7 FE 61 FC | 	wrlong	result3, fp
1bbcc     08 4E 85 F1 | 	sub	fp, #8
1bbd0     A7 12 02 F6 | 	mov	arg01, fp
1bbd4     0C 4E 85 F1 | 	sub	fp, #12
1bbd8     CC 1C BF FD | 	call	#_converttoint
1bbdc     FD 28 02 F6 | 	mov	local02, result1
1bbe0     14 27 02 F6 | 	mov	local01, local02
1bbe4     01 26 66 F0 | 	shl	local01, #1
1bbe8     14 27 02 F1 | 	add	local01, local02
1bbec     03 26 66 F0 | 	shl	local01, #3
1bbf0     14 00 00 FF 
1bbf4     38 E5 05 F1 | 	add	objptr, ##10552
1bbf8     F2 26 02 F1 | 	add	local01, objptr
1bbfc     A7 12 02 F6 | 	mov	arg01, fp
1bc00     14 00 00 FF 
1bc04     38 E5 85 F1 | 	sub	objptr, ##10552
1bc08     58 1D BF FD | 	call	#_converttofloat
1bc0c     08 26 06 F1 | 	add	local01, #8
1bc10     13 FB 61 FC | 	wrlong	result1, local01
1bc14     A7 F0 03 F6 | 	mov	ptra, fp
1bc18     B2 00 A0 FD | 	call	#popregs_
1bc1c                 | _do_setlen_ret
1bc1c     2D 00 64 FD | 	ret
1bc20                 | 
1bc20                 | ' 
1bc20                 | ' ' ------------------ setpan
1bc20                 | ' 
1bc20                 | ' sub do_setpan
1bc20                 | _do_setpan
1bc20     02 4A 05 F6 | 	mov	COUNT_, #2
1bc24     A8 00 A0 FD | 	call	#pushregs_
1bc28     18 F0 07 F1 | 	add	ptra, #24
1bc2c     94 1A BF FD | 	call	#_pop
1bc30     FD 12 02 F6 | 	mov	arg01, result1
1bc34     FE 26 02 F6 | 	mov	local01, result2
1bc38     FF 28 02 F6 | 	mov	local02, result3
1bc3c     A7 12 62 FC | 	wrlong	arg01, fp
1bc40     04 4E 05 F1 | 	add	fp, #4
1bc44     A7 26 62 FC | 	wrlong	local01, fp
1bc48     04 4E 05 F1 | 	add	fp, #4
1bc4c     A7 28 62 FC | 	wrlong	local02, fp
1bc50     08 4E 85 F1 | 	sub	fp, #8
1bc54     6C 1A BF FD | 	call	#_pop
1bc58     FD 28 02 F6 | 	mov	local02, result1
1bc5c     0C 4E 05 F1 | 	add	fp, #12
1bc60     A7 28 62 FC | 	wrlong	local02, fp
1bc64     04 4E 05 F1 | 	add	fp, #4
1bc68     A7 FC 61 FC | 	wrlong	result2, fp
1bc6c     04 4E 05 F1 | 	add	fp, #4
1bc70     A7 FE 61 FC | 	wrlong	result3, fp
1bc74     08 4E 85 F1 | 	sub	fp, #8
1bc78     A7 12 02 F6 | 	mov	arg01, fp
1bc7c     0C 4E 85 F1 | 	sub	fp, #12
1bc80     24 1C BF FD | 	call	#_converttoint
1bc84     FD 28 02 F6 | 	mov	local02, result1
1bc88     14 27 02 F6 | 	mov	local01, local02
1bc8c     01 26 66 F0 | 	shl	local01, #1
1bc90     14 27 02 F1 | 	add	local01, local02
1bc94     03 26 66 F0 | 	shl	local01, #3
1bc98     14 00 00 FF 
1bc9c     38 E5 05 F1 | 	add	objptr, ##10552
1bca0     F2 26 02 F1 | 	add	local01, objptr
1bca4     A7 12 02 F6 | 	mov	arg01, fp
1bca8     14 00 00 FF 
1bcac     38 E5 85 F1 | 	sub	objptr, ##10552
1bcb0     B0 1C BF FD | 	call	#_converttofloat
1bcb4     10 26 06 F1 | 	add	local01, #16
1bcb8     13 FB 61 FC | 	wrlong	result1, local01
1bcbc     A7 F0 03 F6 | 	mov	ptra, fp
1bcc0     B2 00 A0 FD | 	call	#popregs_
1bcc4                 | _do_setpan_ret
1bcc4     2D 00 64 FD | 	ret
1bcc8                 | 
1bcc8                 | ' 
1bcc8                 | ' ' ------------------ setsustain
1bcc8                 | ' 
1bcc8                 | ' sub do_setsustain
1bcc8                 | _do_setsustain
1bcc8     02 4A 05 F6 | 	mov	COUNT_, #2
1bccc     A8 00 A0 FD | 	call	#pushregs_
1bcd0     18 F0 07 F1 | 	add	ptra, #24
1bcd4     EC 19 BF FD | 	call	#_pop
1bcd8     FD 12 02 F6 | 	mov	arg01, result1
1bcdc     FE 26 02 F6 | 	mov	local01, result2
1bce0     FF 28 02 F6 | 	mov	local02, result3
1bce4     A7 12 62 FC | 	wrlong	arg01, fp
1bce8     04 4E 05 F1 | 	add	fp, #4
1bcec     A7 26 62 FC | 	wrlong	local01, fp
1bcf0     04 4E 05 F1 | 	add	fp, #4
1bcf4     A7 28 62 FC | 	wrlong	local02, fp
1bcf8     08 4E 85 F1 | 	sub	fp, #8
1bcfc     C4 19 BF FD | 	call	#_pop
1bd00     FD 28 02 F6 | 	mov	local02, result1
1bd04     0C 4E 05 F1 | 	add	fp, #12
1bd08     A7 28 62 FC | 	wrlong	local02, fp
1bd0c     04 4E 05 F1 | 	add	fp, #4
1bd10     A7 FC 61 FC | 	wrlong	result2, fp
1bd14     04 4E 05 F1 | 	add	fp, #4
1bd18     A7 FE 61 FC | 	wrlong	result3, fp
1bd1c     08 4E 85 F1 | 	sub	fp, #8
1bd20     A7 12 02 F6 | 	mov	arg01, fp
1bd24     0C 4E 85 F1 | 	sub	fp, #12
1bd28     7C 1B BF FD | 	call	#_converttoint
1bd2c     FD 28 02 F6 | 	mov	local02, result1
1bd30     14 27 02 F6 | 	mov	local01, local02
1bd34     01 26 66 F0 | 	shl	local01, #1
1bd38     14 27 02 F1 | 	add	local01, local02
1bd3c     03 26 66 F0 | 	shl	local01, #3
1bd40     14 00 00 FF 
1bd44     38 E5 05 F1 | 	add	objptr, ##10552
1bd48     F2 26 02 F1 | 	add	local01, objptr
1bd4c     A7 12 02 F6 | 	mov	arg01, fp
1bd50     14 00 00 FF 
1bd54     38 E5 85 F1 | 	sub	objptr, ##10552
1bd58     4C 1B BF FD | 	call	#_converttoint
1bd5c     14 26 06 F1 | 	add	local01, #20
1bd60     13 FB 51 FC | 	wrword	result1, local01
1bd64     A7 F0 03 F6 | 	mov	ptra, fp
1bd68     B2 00 A0 FD | 	call	#popregs_
1bd6c                 | _do_setsustain_ret
1bd6c     2D 00 64 FD | 	ret
1bd70                 | 
1bd70                 | ' 
1bd70                 | ' ' ------------------ setvol
1bd70                 | ' 
1bd70                 | ' sub do_setvol
1bd70                 | _do_setvol
1bd70     02 4A 05 F6 | 	mov	COUNT_, #2
1bd74     A8 00 A0 FD | 	call	#pushregs_
1bd78     18 F0 07 F1 | 	add	ptra, #24
1bd7c     44 19 BF FD | 	call	#_pop
1bd80     FD 12 02 F6 | 	mov	arg01, result1
1bd84     FE 26 02 F6 | 	mov	local01, result2
1bd88     FF 28 02 F6 | 	mov	local02, result3
1bd8c     A7 12 62 FC | 	wrlong	arg01, fp
1bd90     04 4E 05 F1 | 	add	fp, #4
1bd94     A7 26 62 FC | 	wrlong	local01, fp
1bd98     04 4E 05 F1 | 	add	fp, #4
1bd9c     A7 28 62 FC | 	wrlong	local02, fp
1bda0     08 4E 85 F1 | 	sub	fp, #8
1bda4     1C 19 BF FD | 	call	#_pop
1bda8     FD 28 02 F6 | 	mov	local02, result1
1bdac     0C 4E 05 F1 | 	add	fp, #12
1bdb0     A7 28 62 FC | 	wrlong	local02, fp
1bdb4     04 4E 05 F1 | 	add	fp, #4
1bdb8     A7 FC 61 FC | 	wrlong	result2, fp
1bdbc     04 4E 05 F1 | 	add	fp, #4
1bdc0     A7 FE 61 FC | 	wrlong	result3, fp
1bdc4     08 4E 85 F1 | 	sub	fp, #8
1bdc8     A7 12 02 F6 | 	mov	arg01, fp
1bdcc     0C 4E 85 F1 | 	sub	fp, #12
1bdd0     D4 1A BF FD | 	call	#_converttoint
1bdd4     FD 28 02 F6 | 	mov	local02, result1
1bdd8     14 27 02 F6 | 	mov	local01, local02
1bddc     01 26 66 F0 | 	shl	local01, #1
1bde0     14 27 02 F1 | 	add	local01, local02
1bde4     03 26 66 F0 | 	shl	local01, #3
1bde8     14 00 00 FF 
1bdec     38 E5 05 F1 | 	add	objptr, ##10552
1bdf0     F2 26 02 F1 | 	add	local01, objptr
1bdf4     A7 12 02 F6 | 	mov	arg01, fp
1bdf8     14 00 00 FF 
1bdfc     38 E5 85 F1 | 	sub	objptr, ##10552
1be00     60 1B BF FD | 	call	#_converttofloat
1be04     0C 26 06 F1 | 	add	local01, #12
1be08     13 FB 61 FC | 	wrlong	result1, local01
1be0c     A7 F0 03 F6 | 	mov	ptra, fp
1be10     B2 00 A0 FD | 	call	#popregs_
1be14                 | _do_setvol_ret
1be14     2D 00 64 FD | 	ret
1be18                 | 
1be18                 | ' 
1be18                 | ' ' ------------------ setwave
1be18                 | ' 
1be18                 | ' sub do_setwave
1be18                 | _do_setwave
1be18     02 4A 05 F6 | 	mov	COUNT_, #2
1be1c     A8 00 A0 FD | 	call	#pushregs_
1be20     18 F0 07 F1 | 	add	ptra, #24
1be24     9C 18 BF FD | 	call	#_pop
1be28     FD 12 02 F6 | 	mov	arg01, result1
1be2c     FE 26 02 F6 | 	mov	local01, result2
1be30     FF 28 02 F6 | 	mov	local02, result3
1be34     A7 12 62 FC | 	wrlong	arg01, fp
1be38     04 4E 05 F1 | 	add	fp, #4
1be3c     A7 26 62 FC | 	wrlong	local01, fp
1be40     04 4E 05 F1 | 	add	fp, #4
1be44     A7 28 62 FC | 	wrlong	local02, fp
1be48     08 4E 85 F1 | 	sub	fp, #8
1be4c     74 18 BF FD | 	call	#_pop
1be50     FD 28 02 F6 | 	mov	local02, result1
1be54     0C 4E 05 F1 | 	add	fp, #12
1be58     A7 28 62 FC | 	wrlong	local02, fp
1be5c     04 4E 05 F1 | 	add	fp, #4
1be60     A7 FC 61 FC | 	wrlong	result2, fp
1be64     04 4E 05 F1 | 	add	fp, #4
1be68     A7 FE 61 FC | 	wrlong	result3, fp
1be6c     08 4E 85 F1 | 	sub	fp, #8
1be70     A7 12 02 F6 | 	mov	arg01, fp
1be74     0C 4E 85 F1 | 	sub	fp, #12
1be78     2C 1A BF FD | 	call	#_converttoint
1be7c     FD 28 02 F6 | 	mov	local02, result1
1be80     14 27 02 F6 | 	mov	local01, local02
1be84     01 26 66 F0 | 	shl	local01, #1
1be88     14 27 02 F1 | 	add	local01, local02
1be8c     03 26 66 F0 | 	shl	local01, #3
1be90     14 00 00 FF 
1be94     38 E5 05 F1 | 	add	objptr, ##10552
1be98     F2 26 02 F1 | 	add	local01, objptr
1be9c     A7 12 02 F6 | 	mov	arg01, fp
1bea0     14 00 00 FF 
1bea4     38 E5 85 F1 | 	sub	objptr, ##10552
1bea8     FC 19 BF FD | 	call	#_converttoint
1beac     04 26 06 F1 | 	add	local01, #4
1beb0     13 FB 41 FC | 	wrbyte	result1, local01
1beb4     A7 F0 03 F6 | 	mov	ptra, fp
1beb8     B2 00 A0 FD | 	call	#popregs_
1bebc                 | _do_setwave_ret
1bebc     2D 00 64 FD | 	ret
1bec0                 | 
1bec0                 | ' 
1bec0                 | ' ' ------------------ shutup
1bec0                 | ' 
1bec0                 | ' sub do_shutup
1bec0                 | _do_shutup
1bec0     03 4A 05 F6 | 	mov	COUNT_, #3
1bec4     A8 00 A0 FD | 	call	#pushregs_
1bec8     18 F0 07 F1 | 	add	ptra, #24
1becc     4A 00 00 FF 
1bed0     80 E4 05 F1 | 	add	objptr, ##38016
1bed4     F2 26 02 FB | 	rdlong	local01, objptr
1bed8     13 29 02 F6 | 	mov	local02, local01
1bedc     01 28 66 F0 | 	shl	local02, #1
1bee0     13 29 02 F1 | 	add	local02, local01
1bee4     02 28 66 F0 | 	shl	local02, #2
1bee8     03 00 00 FF 
1beec     04 E4 85 F1 | 	sub	objptr, ##1540
1bef0     F2 28 02 F1 | 	add	local02, objptr
1bef4     14 2B 0A FB | 	rdlong	local03, local02 wz
1bef8     14 4E 05 F1 | 	add	fp, #20
1befc     A7 2A 62 FC | 	wrlong	local03, fp
1bf00                 | ' 
1bf00                 | ' numpar=compiledline(lineptr_e).result.uresult
1bf00                 | ' if numpar=0 then
1bf00     14 4E 85 F1 | 	sub	fp, #20
1bf04     47 00 00 FF 
1bf08     7C E4 85 F1 | 	sub	objptr, ##36476
1bf0c     50 00 90 5D |  if_ne	jmp	#LR__2192
1bf10                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1bf10     10 4E 05 F1 | 	add	fp, #16
1bf14     A7 00 68 FC | 	wrlong	#0, fp
1bf18     37 00 00 FF 
1bf1c     10 E4 05 F1 | 	add	objptr, ##28176
1bf20     97 16 48 FB | 	callpa	#(@LR__2191-@LR__2190)>>2,fcache_load_ptr_
1bf24                 | LR__2190
1bf24     F2 12 02 FB | 	rdlong	arg01, objptr
1bf28     A7 2A 02 FB | 	rdlong	local03, fp
1bf2c     06 2A 66 F0 | 	shl	local03, #6
1bf30     15 13 02 F1 | 	add	arg01, local03
1bf34     14 12 06 F1 | 	add	arg01, #20
1bf38     09 01 58 FC | 	wrword	#0, arg01
1bf3c     A7 2A 02 FB | 	rdlong	local03, fp
1bf40     01 2A 06 F1 | 	add	local03, #1
1bf44     A7 2A 62 FC | 	wrlong	local03, fp
1bf48     08 2A 56 F2 | 	cmps	local03, #8 wc
1bf4c     D4 FF 9F CD |  if_b	jmp	#LR__2190
1bf50                 | LR__2191
1bf50     37 00 00 FF 
1bf54     10 E4 85 F1 | 	sub	objptr, ##28176
1bf58     10 4E 85 F1 | 	sub	fp, #16
1bf5c     64 00 90 FD | 	jmp	#LR__2193
1bf60                 | LR__2192
1bf60     60 17 BF FD | 	call	#_pop
1bf64     FF 26 02 F6 | 	mov	local01, result3
1bf68     A7 FA 61 FC | 	wrlong	result1, fp
1bf6c     04 4E 05 F1 | 	add	fp, #4
1bf70     A7 FC 61 FC | 	wrlong	result2, fp
1bf74     04 4E 05 F1 | 	add	fp, #4
1bf78     A7 26 62 FC | 	wrlong	local01, fp
1bf7c     08 4E 85 F1 | 	sub	fp, #8
1bf80     A7 12 02 F6 | 	mov	arg01, fp
1bf84     20 19 BF FD | 	call	#_converttoint
1bf88     FD 2A 52 F6 | 	abs	local03, result1 wc
1bf8c     07 2A 06 F5 | 	and	local03, #7
1bf90     15 29 82 F6 | 	negc	local02, local03
1bf94     0C 4E 05 F1 | 	add	fp, #12
1bf98     A7 28 62 FC | 	wrlong	local02, fp
1bf9c     37 00 00 FF 
1bfa0     10 E4 05 F1 | 	add	objptr, ##28176
1bfa4     F2 12 02 FB | 	rdlong	arg01, objptr
1bfa8     37 00 00 FF 
1bfac     10 E4 85 F1 | 	sub	objptr, ##28176
1bfb0     0C 4E 85 F1 | 	sub	fp, #12
1bfb4     06 28 66 F0 | 	shl	local02, #6
1bfb8     14 13 02 F1 | 	add	arg01, local02
1bfbc     14 12 06 F1 | 	add	arg01, #20
1bfc0     09 01 58 FC | 	wrword	#0, arg01
1bfc4                 | LR__2193
1bfc4     A7 F0 03 F6 | 	mov	ptra, fp
1bfc8     B2 00 A0 FD | 	call	#popregs_
1bfcc                 | _do_shutup_ret
1bfcc     2D 00 64 FD | 	ret
1bfd0                 | 
1bfd0                 | ' 
1bfd0                 | ' ' ------------------ sin
1bfd0                 | ' 
1bfd0                 | ' sub do_sin
1bfd0                 | _do_sin
1bfd0     01 4A 05 F6 | 	mov	COUNT_, #1
1bfd4     A8 00 A0 FD | 	call	#pushregs_
1bfd8     10 F0 07 F1 | 	add	ptra, #16
1bfdc     4A 00 00 FF 
1bfe0     80 E4 05 F1 | 	add	objptr, ##38016
1bfe4     F2 26 02 FB | 	rdlong	local01, objptr
1bfe8     13 17 02 F6 | 	mov	arg03, local01
1bfec     01 16 66 F0 | 	shl	arg03, #1
1bff0     13 17 02 F1 | 	add	arg03, local01
1bff4     02 16 66 F0 | 	shl	arg03, #2
1bff8     03 00 00 FF 
1bffc     04 E4 85 F1 | 	sub	objptr, ##1540
1c000     F2 16 02 F1 | 	add	arg03, objptr
1c004     0B 17 02 FB | 	rdlong	arg03, arg03
1c008     0C 4E 05 F1 | 	add	fp, #12
1c00c     A7 16 62 FC | 	wrlong	arg03, fp
1c010                 | ' 
1c010                 | ' numpar=compiledline(lineptr_e).result.uresult
1c010                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1c010     0C 4E 85 F1 | 	sub	fp, #12
1c014     02 16 16 F2 | 	cmp	arg03, #2 wc
1c018     47 00 00 FF 
1c01c     7C E4 85 F1 | 	sub	objptr, ##36476
1c020     0C 4E 05 C1 |  if_b	add	fp, #12
1c024     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1c028     0C 4E 85 C1 |  if_b	sub	fp, #12
1c02c     40 00 90 4D |  if_c_and_nz	jmp	#LR__2200
1c030     00 12 06 F6 | 	mov	arg01, #0
1c034     60 0C B1 FD | 	call	#__system___getiolock_0613
1c038     FD 12 02 F6 | 	mov	arg01, result1
1c03c     30 AF B0 FD | 	call	#__system___lockmem
1c040     BB 01 00 FF 
1c044     64 14 06 F6 | 	mov	arg02, ##@LR__6009
1c048     00 12 06 F6 | 	mov	arg01, #0
1c04c     00 16 06 F6 | 	mov	arg03, #0
1c050     10 BC B0 FD | 	call	#__system___basic_print_string
1c054     00 12 06 F6 | 	mov	arg01, #0
1c058     3C 0C B1 FD | 	call	#__system___getiolock_0613
1c05c     FD 00 68 FC | 	wrlong	#0, result1
1c060     27 12 06 F6 | 	mov	arg01, #39
1c064     00 14 06 F6 | 	mov	arg02, #0
1c068     E8 74 B0 FD | 	call	#_printerror
1c06c     64 00 90 FD | 	jmp	#LR__2201
1c070                 | LR__2200
1c070     50 16 BF FD | 	call	#_pop
1c074     A7 FA 61 FC | 	wrlong	result1, fp
1c078     04 4E 05 F1 | 	add	fp, #4
1c07c     A7 FC 61 FC | 	wrlong	result2, fp
1c080     04 4E 05 F1 | 	add	fp, #4
1c084     A7 FE 61 FC | 	wrlong	result3, fp
1c088     08 4E 85 F1 | 	sub	fp, #8
1c08c     52 00 00 FF 
1c090     A8 E4 05 F1 | 	add	objptr, ##42152
1c094     F2 26 02 FB | 	rdlong	local01, objptr
1c098     52 00 00 FF 
1c09c     A8 E4 85 F1 | 	sub	objptr, ##42152
1c0a0     A7 12 02 F6 | 	mov	arg01, fp
1c0a4     BC 18 BF FD | 	call	#_converttofloat
1c0a8     FD 14 02 F6 | 	mov	arg02, result1
1c0ac     13 13 02 F6 | 	mov	arg01, local01
1c0b0     34 DD B0 FD | 	call	#__system___float_mul
1c0b4     FD 12 02 F6 | 	mov	arg01, result1
1c0b8     8C E6 B0 FD | 	call	#__system____builtin_sinf
1c0bc     A7 FA 61 FC | 	wrlong	result1, fp
1c0c0     08 4E 05 F1 | 	add	fp, #8
1c0c4     A7 3C 68 FC | 	wrlong	#30, fp
1c0c8     08 4E 85 F1 | 	sub	fp, #8
1c0cc     A7 12 02 F6 | 	mov	arg01, fp
1c0d0     88 16 BF FD | 	call	#_push
1c0d4                 | LR__2201
1c0d4     A7 F0 03 F6 | 	mov	ptra, fp
1c0d8     B2 00 A0 FD | 	call	#popregs_
1c0dc                 | _do_sin_ret
1c0dc     2D 00 64 FD | 	ret
1c0e0                 | 
1c0e0                 | ' 
1c0e0                 | ' ' ------------------ skip
1c0e0                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1c0e0                 | ' 
1c0e0                 | ' sub do_skip
1c0e0                 | _do_skip
1c0e0     4A 00 00 FF 
1c0e4     80 E4 05 F1 | 	add	objptr, ##38016
1c0e8     F2 00 02 FB | 	rdlong	_var01, objptr
1c0ec     00 03 02 F6 | 	mov	_var02, _var01
1c0f0     01 02 66 F0 | 	shl	_var02, #1
1c0f4     00 03 02 F1 | 	add	_var02, _var01
1c0f8     02 02 66 F0 | 	shl	_var02, #2
1c0fc     03 00 00 FF 
1c100     04 E4 85 F1 | 	sub	objptr, ##1540
1c104     F2 02 02 F1 | 	add	_var02, objptr
1c108     01 03 02 FB | 	rdlong	_var02, _var02
1c10c     01 02 86 F1 | 	sub	_var02, #1
1c110     03 00 00 FF 
1c114     04 E4 05 F1 | 	add	objptr, ##1540
1c118     F2 02 62 FC | 	wrlong	_var02, objptr
1c11c     4A 00 00 FF 
1c120     80 E4 85 F1 | 	sub	objptr, ##38016
1c124                 | _do_skip_ret
1c124     2D 00 64 FD | 	ret
1c128                 | 
1c128                 | ' 
1c128                 | ' ' ------------------ sprite
1c128                 | ' 
1c128                 | ' sub do_sprite
1c128                 | _do_sprite
1c128     00 4A 05 F6 | 	mov	COUNT_, #0
1c12c     A8 00 A0 FD | 	call	#pushregs_
1c130     30 F0 07 F1 | 	add	ptra, #48
1c134     8C 15 BF FD | 	call	#_pop
1c138     FD 16 02 F6 | 	mov	arg03, result1
1c13c     FE 14 02 F6 | 	mov	arg02, result2
1c140     FF 12 02 F6 | 	mov	arg01, result3
1c144     18 4E 05 F1 | 	add	fp, #24
1c148     A7 16 62 FC | 	wrlong	arg03, fp
1c14c     04 4E 05 F1 | 	add	fp, #4
1c150     A7 14 62 FC | 	wrlong	arg02, fp
1c154     04 4E 05 F1 | 	add	fp, #4
1c158     A7 12 62 FC | 	wrlong	arg01, fp
1c15c     20 4E 85 F1 | 	sub	fp, #32
1c160     60 15 BF FD | 	call	#_pop
1c164     FD 16 02 F6 | 	mov	arg03, result1
1c168     FE 14 02 F6 | 	mov	arg02, result2
1c16c     FF 12 02 F6 | 	mov	arg01, result3
1c170     0C 4E 05 F1 | 	add	fp, #12
1c174     A7 16 62 FC | 	wrlong	arg03, fp
1c178     04 4E 05 F1 | 	add	fp, #4
1c17c     A7 14 62 FC | 	wrlong	arg02, fp
1c180     04 4E 05 F1 | 	add	fp, #4
1c184     A7 12 62 FC | 	wrlong	arg01, fp
1c188     14 4E 85 F1 | 	sub	fp, #20
1c18c     34 15 BF FD | 	call	#_pop
1c190     FF 16 02 F6 | 	mov	arg03, result3
1c194     A7 FA 61 FC | 	wrlong	result1, fp
1c198     04 4E 05 F1 | 	add	fp, #4
1c19c     A7 FC 61 FC | 	wrlong	result2, fp
1c1a0     04 4E 05 F1 | 	add	fp, #4
1c1a4     A7 16 62 FC | 	wrlong	arg03, fp
1c1a8     08 4E 85 F1 | 	sub	fp, #8
1c1ac     A7 12 02 F6 | 	mov	arg01, fp
1c1b0     F4 16 BF FD | 	call	#_converttoint
1c1b4     24 4E 05 F1 | 	add	fp, #36
1c1b8     A7 FA 61 FC | 	wrlong	result1, fp
1c1bc     18 4E 85 F1 | 	sub	fp, #24
1c1c0     A7 12 02 F6 | 	mov	arg01, fp
1c1c4     0C 4E 85 F1 | 	sub	fp, #12
1c1c8     DC 16 BF FD | 	call	#_converttoint
1c1cc     28 4E 05 F1 | 	add	fp, #40
1c1d0     A7 FA 61 FC | 	wrlong	result1, fp
1c1d4     10 4E 85 F1 | 	sub	fp, #16
1c1d8     A7 12 02 F6 | 	mov	arg01, fp
1c1dc     18 4E 85 F1 | 	sub	fp, #24
1c1e0     C4 16 BF FD | 	call	#_converttoint
1c1e4     2C 4E 05 F1 | 	add	fp, #44
1c1e8     A7 FA 61 FC | 	wrlong	result1, fp
1c1ec     08 4E 85 F1 | 	sub	fp, #8
1c1f0     A7 12 02 FB | 	rdlong	arg01, fp
1c1f4     04 4E 05 F1 | 	add	fp, #4
1c1f8     A7 14 02 FB | 	rdlong	arg02, fp
1c1fc     FD 16 02 F6 | 	mov	arg03, result1
1c200     28 4E 85 F1 | 	sub	fp, #40
1c204     2C 83 B0 FD | 	call	#_hg010b_spin2_setspritepos
1c208     A7 F0 03 F6 | 	mov	ptra, fp
1c20c     B2 00 A0 FD | 	call	#popregs_
1c210                 | _do_sprite_ret
1c210     2D 00 64 FD | 	ret
1c214                 | 
1c214                 | ' 
1c214                 | ' ' ------------------ sqr
1c214                 | ' 
1c214                 | ' sub do_sqr
1c214                 | _do_sqr
1c214     01 4A 05 F6 | 	mov	COUNT_, #1
1c218     A8 00 A0 FD | 	call	#pushregs_
1c21c     10 F0 07 F1 | 	add	ptra, #16
1c220     4A 00 00 FF 
1c224     80 E4 05 F1 | 	add	objptr, ##38016
1c228     F2 26 02 FB | 	rdlong	local01, objptr
1c22c     13 17 02 F6 | 	mov	arg03, local01
1c230     01 16 66 F0 | 	shl	arg03, #1
1c234     13 17 02 F1 | 	add	arg03, local01
1c238     02 16 66 F0 | 	shl	arg03, #2
1c23c     03 00 00 FF 
1c240     04 E4 85 F1 | 	sub	objptr, ##1540
1c244     F2 16 02 F1 | 	add	arg03, objptr
1c248     0B 17 02 FB | 	rdlong	arg03, arg03
1c24c     0C 4E 05 F1 | 	add	fp, #12
1c250     A7 16 62 FC | 	wrlong	arg03, fp
1c254                 | ' 
1c254                 | ' numpar=compiledline(lineptr_e).result.uresult
1c254                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1c254     0C 4E 85 F1 | 	sub	fp, #12
1c258     02 16 16 F2 | 	cmp	arg03, #2 wc
1c25c     47 00 00 FF 
1c260     7C E4 85 F1 | 	sub	objptr, ##36476
1c264     0C 4E 05 C1 |  if_b	add	fp, #12
1c268     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1c26c     0C 4E 85 C1 |  if_b	sub	fp, #12
1c270     40 00 90 4D |  if_c_and_nz	jmp	#LR__2210
1c274     00 12 06 F6 | 	mov	arg01, #0
1c278     1C 0A B1 FD | 	call	#__system___getiolock_0613
1c27c     FD 12 02 F6 | 	mov	arg01, result1
1c280     EC AC B0 FD | 	call	#__system___lockmem
1c284     BB 01 00 FF 
1c288     6A 14 06 F6 | 	mov	arg02, ##@LR__6010
1c28c     00 12 06 F6 | 	mov	arg01, #0
1c290     00 16 06 F6 | 	mov	arg03, #0
1c294     CC B9 B0 FD | 	call	#__system___basic_print_string
1c298     00 12 06 F6 | 	mov	arg01, #0
1c29c     F8 09 B1 FD | 	call	#__system___getiolock_0613
1c2a0     FD 00 68 FC | 	wrlong	#0, result1
1c2a4     27 12 06 F6 | 	mov	arg01, #39
1c2a8     00 14 06 F6 | 	mov	arg02, #0
1c2ac     A4 72 B0 FD | 	call	#_printerror
1c2b0     48 00 90 FD | 	jmp	#LR__2211
1c2b4                 | LR__2210
1c2b4     0C 14 BF FD | 	call	#_pop
1c2b8     FF 26 02 F6 | 	mov	local01, result3
1c2bc     A7 FA 61 FC | 	wrlong	result1, fp
1c2c0     04 4E 05 F1 | 	add	fp, #4
1c2c4     A7 FC 61 FC | 	wrlong	result2, fp
1c2c8     04 4E 05 F1 | 	add	fp, #4
1c2cc     A7 26 62 FC | 	wrlong	local01, fp
1c2d0     08 4E 85 F1 | 	sub	fp, #8
1c2d4     A7 12 02 F6 | 	mov	arg01, fp
1c2d8     88 16 BF FD | 	call	#_converttofloat
1c2dc     FD 12 02 F6 | 	mov	arg01, result1
1c2e0     2C DA B0 FD | 	call	#__system___float_sqrt
1c2e4     A7 FA 61 FC | 	wrlong	result1, fp
1c2e8     08 4E 05 F1 | 	add	fp, #8
1c2ec     A7 3C 68 FC | 	wrlong	#30, fp
1c2f0     08 4E 85 F1 | 	sub	fp, #8
1c2f4     A7 12 02 F6 | 	mov	arg01, fp
1c2f8     60 14 BF FD | 	call	#_push
1c2fc                 | LR__2211
1c2fc     A7 F0 03 F6 | 	mov	ptra, fp
1c300     B2 00 A0 FD | 	call	#popregs_
1c304                 | _do_sqr_ret
1c304     2D 00 64 FD | 	ret
1c308                 | 
1c308                 | ' 
1c308                 | ' ' ------------------ stick
1c308                 | ' 
1c308                 | ' sub do_stick
1c308                 | _do_stick
1c308     01 4A 05 F6 | 	mov	COUNT_, #1
1c30c     A8 00 A0 FD | 	call	#pushregs_
1c310     10 F0 07 F1 | 	add	ptra, #16
1c314     4A 00 00 FF 
1c318     80 E4 05 F1 | 	add	objptr, ##38016
1c31c     F2 26 02 FB | 	rdlong	local01, objptr
1c320     13 17 02 F6 | 	mov	arg03, local01
1c324     01 16 66 F0 | 	shl	arg03, #1
1c328     13 17 02 F1 | 	add	arg03, local01
1c32c     02 16 66 F0 | 	shl	arg03, #2
1c330     03 00 00 FF 
1c334     04 E4 85 F1 | 	sub	objptr, ##1540
1c338     F2 16 02 F1 | 	add	arg03, objptr
1c33c     0B 17 02 FB | 	rdlong	arg03, arg03
1c340     0C 4E 05 F1 | 	add	fp, #12
1c344     A7 16 62 FC | 	wrlong	arg03, fp
1c348                 | ' 
1c348                 | ' numpar=compiledline(lineptr_e).result.uresult
1c348                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1c348     0C 4E 85 F1 | 	sub	fp, #12
1c34c     02 16 16 F2 | 	cmp	arg03, #2 wc
1c350     47 00 00 FF 
1c354     7C E4 85 F1 | 	sub	objptr, ##36476
1c358     40 00 90 CD |  if_b	jmp	#LR__2220
1c35c     00 12 06 F6 | 	mov	arg01, #0
1c360     34 09 B1 FD | 	call	#__system___getiolock_0613
1c364     FD 12 02 F6 | 	mov	arg01, result1
1c368     04 AC B0 FD | 	call	#__system___lockmem
1c36c     BB 01 00 FF 
1c370     70 14 06 F6 | 	mov	arg02, ##@LR__6011
1c374     00 12 06 F6 | 	mov	arg01, #0
1c378     00 16 06 F6 | 	mov	arg03, #0
1c37c     E4 B8 B0 FD | 	call	#__system___basic_print_string
1c380     00 12 06 F6 | 	mov	arg01, #0
1c384     10 09 B1 FD | 	call	#__system___getiolock_0613
1c388     FD 00 68 FC | 	wrlong	#0, result1
1c38c     27 12 06 F6 | 	mov	arg01, #39
1c390     00 14 06 F6 | 	mov	arg02, #0
1c394     BC 71 B0 FD | 	call	#_printerror
1c398     F0 00 90 FD | 	jmp	#LR__2224
1c39c                 | LR__2220
1c39c                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1c39c     0C 4E 05 F1 | 	add	fp, #12
1c3a0     A7 FE 09 FB | 	rdlong	result3, fp wz
1c3a4     0C 4E 85 F1 | 	sub	fp, #12
1c3a8     30 00 90 5D |  if_ne	jmp	#LR__2221
1c3ac     52 00 00 FF 
1c3b0     1C E4 05 F1 | 	add	objptr, ##42012
1c3b4     F2 26 02 FB | 	rdlong	local01, objptr
1c3b8     52 00 00 FF 
1c3bc     1C E4 85 F1 | 	sub	objptr, ##42012
1c3c0     A7 26 62 FC | 	wrlong	local01, fp
1c3c4     08 4E 05 F1 | 	add	fp, #8
1c3c8     A7 3A 68 FC | 	wrlong	#29, fp
1c3cc     08 4E 85 F1 | 	sub	fp, #8
1c3d0     A7 12 02 F6 | 	mov	arg01, fp
1c3d4     84 13 BF FD | 	call	#_push
1c3d8     B0 00 90 FD | 	jmp	#LR__2224
1c3dc                 | LR__2221
1c3dc     E4 12 BF FD | 	call	#_pop
1c3e0     A7 FA 61 FC | 	wrlong	result1, fp
1c3e4     04 4E 05 F1 | 	add	fp, #4
1c3e8     A7 FC 61 FC | 	wrlong	result2, fp
1c3ec     04 4E 05 F1 | 	add	fp, #4
1c3f0     A7 FE 61 FC | 	wrlong	result3, fp
1c3f4                 | ' t1=pop()
1c3f4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1c3f4     08 4E 85 F1 | 	sub	fp, #8
1c3f8     1C FE 0D F2 | 	cmp	result3, #28 wz
1c3fc     08 4E 05 51 |  if_ne	add	fp, #8
1c400     A7 26 02 5B |  if_ne	rdlong	local01, fp
1c404     08 4E 85 51 |  if_ne	sub	fp, #8
1c408     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1c40c     70 00 90 5D |  if_ne	jmp	#LR__2223
1c410     A7 26 02 FB | 	rdlong	local01, fp
1c414     52 00 00 FF 
1c418     08 E5 05 F1 | 	add	objptr, ##42248
1c41c     F2 26 62 FC | 	wrlong	local01, objptr
1c420                 | '   q=t1.result.uresult
1c420                 | '   if q<7 then 
1c420     52 00 00 FF 
1c424     08 E5 85 F1 | 	sub	objptr, ##42248
1c428     07 26 56 F2 | 	cmps	local01, #7 wc
1c42c     40 00 90 3D |  if_ae	jmp	#LR__2222
1c430     52 00 00 FF 
1c434     08 E5 05 F1 | 	add	objptr, ##42248
1c438     F2 26 02 FB | 	rdlong	local01, objptr
1c43c     02 26 66 F0 | 	shl	local01, #2
1c440     EC E4 85 F1 | 	sub	objptr, #236
1c444     F2 26 02 F1 | 	add	local01, objptr
1c448     13 27 02 FB | 	rdlong	local01, local01
1c44c     A7 26 62 FC | 	wrlong	local01, fp
1c450     08 4E 05 F1 | 	add	fp, #8
1c454     A7 3A 68 FC | 	wrlong	#29, fp
1c458     08 4E 85 F1 | 	sub	fp, #8
1c45c     A7 12 02 F6 | 	mov	arg01, fp
1c460     52 00 00 FF 
1c464     1C E4 85 F1 | 	sub	objptr, ##42012
1c468     F0 12 BF FD | 	call	#_push
1c46c                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1c46c     1C 00 90 FD | 	jmp	#LR__2224
1c470                 | LR__2222
1c470     29 12 06 F6 | 	mov	arg01, #41
1c474     00 14 06 F6 | 	mov	arg02, #0
1c478     D8 70 B0 FD | 	call	#_printerror
1c47c                 | '      printerror(41) : return
1c47c     0C 00 90 FD | 	jmp	#LR__2224
1c480                 | LR__2223
1c480     29 12 06 F6 | 	mov	arg01, #41
1c484     00 14 06 F6 | 	mov	arg02, #0
1c488     C8 70 B0 FD | 	call	#_printerror
1c48c                 | LR__2224
1c48c     A7 F0 03 F6 | 	mov	ptra, fp
1c490     B2 00 A0 FD | 	call	#popregs_
1c494                 | _do_stick_ret
1c494     2D 00 64 FD | 	ret
1c498                 | 
1c498                 | ' 
1c498                 | ' ' ------------------ strig
1c498                 | ' 
1c498                 | ' sub do_strig
1c498                 | _do_strig
1c498     01 4A 05 F6 | 	mov	COUNT_, #1
1c49c     A8 00 A0 FD | 	call	#pushregs_
1c4a0     10 F0 07 F1 | 	add	ptra, #16
1c4a4     4A 00 00 FF 
1c4a8     80 E4 05 F1 | 	add	objptr, ##38016
1c4ac     F2 26 02 FB | 	rdlong	local01, objptr
1c4b0     13 17 02 F6 | 	mov	arg03, local01
1c4b4     01 16 66 F0 | 	shl	arg03, #1
1c4b8     13 17 02 F1 | 	add	arg03, local01
1c4bc     02 16 66 F0 | 	shl	arg03, #2
1c4c0     03 00 00 FF 
1c4c4     04 E4 85 F1 | 	sub	objptr, ##1540
1c4c8     F2 16 02 F1 | 	add	arg03, objptr
1c4cc     0B 17 02 FB | 	rdlong	arg03, arg03
1c4d0     0C 4E 05 F1 | 	add	fp, #12
1c4d4     A7 16 62 FC | 	wrlong	arg03, fp
1c4d8                 | ' 
1c4d8                 | ' numpar=compiledline(lineptr_e).result.uresult
1c4d8                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1c4d8     0C 4E 85 F1 | 	sub	fp, #12
1c4dc     02 16 16 F2 | 	cmp	arg03, #2 wc
1c4e0     47 00 00 FF 
1c4e4     7C E4 85 F1 | 	sub	objptr, ##36476
1c4e8     40 00 90 CD |  if_b	jmp	#LR__2230
1c4ec     00 12 06 F6 | 	mov	arg01, #0
1c4f0     A4 07 B1 FD | 	call	#__system___getiolock_0613
1c4f4     FD 12 02 F6 | 	mov	arg01, result1
1c4f8     74 AA B0 FD | 	call	#__system___lockmem
1c4fc     BB 01 00 FF 
1c500     78 14 06 F6 | 	mov	arg02, ##@LR__6012
1c504     00 12 06 F6 | 	mov	arg01, #0
1c508     00 16 06 F6 | 	mov	arg03, #0
1c50c     54 B7 B0 FD | 	call	#__system___basic_print_string
1c510     00 12 06 F6 | 	mov	arg01, #0
1c514     80 07 B1 FD | 	call	#__system___getiolock_0613
1c518     FD 00 68 FC | 	wrlong	#0, result1
1c51c     27 12 06 F6 | 	mov	arg01, #39
1c520     00 14 06 F6 | 	mov	arg02, #0
1c524     2C 70 B0 FD | 	call	#_printerror
1c528     F0 00 90 FD | 	jmp	#LR__2234
1c52c                 | LR__2230
1c52c                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1c52c     0C 4E 05 F1 | 	add	fp, #12
1c530     A7 FE 09 FB | 	rdlong	result3, fp wz
1c534     0C 4E 85 F1 | 	sub	fp, #12
1c538     30 00 90 5D |  if_ne	jmp	#LR__2231
1c53c     52 00 00 FF 
1c540     38 E4 05 F1 | 	add	objptr, ##42040
1c544     F2 26 02 FB | 	rdlong	local01, objptr
1c548     52 00 00 FF 
1c54c     38 E4 85 F1 | 	sub	objptr, ##42040
1c550     A7 26 62 FC | 	wrlong	local01, fp
1c554     08 4E 05 F1 | 	add	fp, #8
1c558     A7 3A 68 FC | 	wrlong	#29, fp
1c55c     08 4E 85 F1 | 	sub	fp, #8
1c560     A7 12 02 F6 | 	mov	arg01, fp
1c564     F4 11 BF FD | 	call	#_push
1c568     B0 00 90 FD | 	jmp	#LR__2234
1c56c                 | LR__2231
1c56c     54 11 BF FD | 	call	#_pop
1c570     A7 FA 61 FC | 	wrlong	result1, fp
1c574     04 4E 05 F1 | 	add	fp, #4
1c578     A7 FC 61 FC | 	wrlong	result2, fp
1c57c     04 4E 05 F1 | 	add	fp, #4
1c580     A7 FE 61 FC | 	wrlong	result3, fp
1c584                 | ' t1=pop()
1c584                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1c584     08 4E 85 F1 | 	sub	fp, #8
1c588     1C FE 0D F2 | 	cmp	result3, #28 wz
1c58c     08 4E 05 51 |  if_ne	add	fp, #8
1c590     A7 26 02 5B |  if_ne	rdlong	local01, fp
1c594     08 4E 85 51 |  if_ne	sub	fp, #8
1c598     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1c59c     70 00 90 5D |  if_ne	jmp	#LR__2233
1c5a0     A7 26 02 FB | 	rdlong	local01, fp
1c5a4     52 00 00 FF 
1c5a8     08 E5 05 F1 | 	add	objptr, ##42248
1c5ac     F2 26 62 FC | 	wrlong	local01, objptr
1c5b0                 | '   q=t1.result.uresult
1c5b0                 | '   if q<7 then 
1c5b0     52 00 00 FF 
1c5b4     08 E5 85 F1 | 	sub	objptr, ##42248
1c5b8     07 26 56 F2 | 	cmps	local01, #7 wc
1c5bc     40 00 90 3D |  if_ae	jmp	#LR__2232
1c5c0     52 00 00 FF 
1c5c4     08 E5 05 F1 | 	add	objptr, ##42248
1c5c8     F2 26 02 FB | 	rdlong	local01, objptr
1c5cc     02 26 66 F0 | 	shl	local01, #2
1c5d0     D0 E4 85 F1 | 	sub	objptr, #208
1c5d4     F2 26 02 F1 | 	add	local01, objptr
1c5d8     13 27 02 FB | 	rdlong	local01, local01
1c5dc     A7 26 62 FC | 	wrlong	local01, fp
1c5e0     08 4E 05 F1 | 	add	fp, #8
1c5e4     A7 3A 68 FC | 	wrlong	#29, fp
1c5e8     08 4E 85 F1 | 	sub	fp, #8
1c5ec     A7 12 02 F6 | 	mov	arg01, fp
1c5f0     52 00 00 FF 
1c5f4     38 E4 85 F1 | 	sub	objptr, ##42040
1c5f8     60 11 BF FD | 	call	#_push
1c5fc                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1c5fc     1C 00 90 FD | 	jmp	#LR__2234
1c600                 | LR__2232
1c600     29 12 06 F6 | 	mov	arg01, #41
1c604     00 14 06 F6 | 	mov	arg02, #0
1c608     48 6F B0 FD | 	call	#_printerror
1c60c                 | '      printerror(41) : return
1c60c     0C 00 90 FD | 	jmp	#LR__2234
1c610                 | LR__2233
1c610     29 12 06 F6 | 	mov	arg01, #41
1c614     00 14 06 F6 | 	mov	arg02, #0
1c618     38 6F B0 FD | 	call	#_printerror
1c61c                 | LR__2234
1c61c     A7 F0 03 F6 | 	mov	ptra, fp
1c620     B2 00 A0 FD | 	call	#popregs_
1c624                 | _do_strig_ret
1c624     2D 00 64 FD | 	ret
1c628                 | 
1c628                 | ' 
1c628                 | ' ' ------------------ tan
1c628                 | ' 
1c628                 | ' sub do_tan
1c628                 | _do_tan
1c628     01 4A 05 F6 | 	mov	COUNT_, #1
1c62c     A8 00 A0 FD | 	call	#pushregs_
1c630     10 F0 07 F1 | 	add	ptra, #16
1c634     4A 00 00 FF 
1c638     80 E4 05 F1 | 	add	objptr, ##38016
1c63c     F2 26 02 FB | 	rdlong	local01, objptr
1c640     13 17 02 F6 | 	mov	arg03, local01
1c644     01 16 66 F0 | 	shl	arg03, #1
1c648     13 17 02 F1 | 	add	arg03, local01
1c64c     02 16 66 F0 | 	shl	arg03, #2
1c650     03 00 00 FF 
1c654     04 E4 85 F1 | 	sub	objptr, ##1540
1c658     F2 16 02 F1 | 	add	arg03, objptr
1c65c     0B 17 02 FB | 	rdlong	arg03, arg03
1c660     0C 4E 05 F1 | 	add	fp, #12
1c664     A7 16 62 FC | 	wrlong	arg03, fp
1c668                 | ' 
1c668                 | ' numpar=compiledline(lineptr_e).result.uresult
1c668                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1c668     0C 4E 85 F1 | 	sub	fp, #12
1c66c     02 16 16 F2 | 	cmp	arg03, #2 wc
1c670     47 00 00 FF 
1c674     7C E4 85 F1 | 	sub	objptr, ##36476
1c678     0C 4E 05 C1 |  if_b	add	fp, #12
1c67c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1c680     0C 4E 85 C1 |  if_b	sub	fp, #12
1c684     40 00 90 4D |  if_c_and_nz	jmp	#LR__2240
1c688     00 12 06 F6 | 	mov	arg01, #0
1c68c     08 06 B1 FD | 	call	#__system___getiolock_0613
1c690     FD 12 02 F6 | 	mov	arg01, result1
1c694     D8 A8 B0 FD | 	call	#__system___lockmem
1c698     BB 01 00 FF 
1c69c     80 14 06 F6 | 	mov	arg02, ##@LR__6013
1c6a0     00 12 06 F6 | 	mov	arg01, #0
1c6a4     00 16 06 F6 | 	mov	arg03, #0
1c6a8     B8 B5 B0 FD | 	call	#__system___basic_print_string
1c6ac     00 12 06 F6 | 	mov	arg01, #0
1c6b0     E4 05 B1 FD | 	call	#__system___getiolock_0613
1c6b4     FD 00 68 FC | 	wrlong	#0, result1
1c6b8     27 12 06 F6 | 	mov	arg01, #39
1c6bc     00 14 06 F6 | 	mov	arg02, #0
1c6c0     90 6E B0 FD | 	call	#_printerror
1c6c4     64 00 90 FD | 	jmp	#LR__2241
1c6c8                 | LR__2240
1c6c8     F8 0F BF FD | 	call	#_pop
1c6cc     A7 FA 61 FC | 	wrlong	result1, fp
1c6d0     04 4E 05 F1 | 	add	fp, #4
1c6d4     A7 FC 61 FC | 	wrlong	result2, fp
1c6d8     04 4E 05 F1 | 	add	fp, #4
1c6dc     A7 FE 61 FC | 	wrlong	result3, fp
1c6e0     08 4E 85 F1 | 	sub	fp, #8
1c6e4     52 00 00 FF 
1c6e8     A8 E4 05 F1 | 	add	objptr, ##42152
1c6ec     F2 26 02 FB | 	rdlong	local01, objptr
1c6f0     52 00 00 FF 
1c6f4     A8 E4 85 F1 | 	sub	objptr, ##42152
1c6f8     A7 12 02 F6 | 	mov	arg01, fp
1c6fc     64 12 BF FD | 	call	#_converttofloat
1c700     FD 14 02 F6 | 	mov	arg02, result1
1c704     13 13 02 F6 | 	mov	arg01, local01
1c708     DC D6 B0 FD | 	call	#__system___float_mul
1c70c     FD 12 02 F6 | 	mov	arg01, result1
1c710     80 E1 B0 FD | 	call	#__system____builtin_tanf
1c714     A7 FA 61 FC | 	wrlong	result1, fp
1c718     08 4E 05 F1 | 	add	fp, #8
1c71c     A7 3C 68 FC | 	wrlong	#30, fp
1c720     08 4E 85 F1 | 	sub	fp, #8
1c724     A7 12 02 F6 | 	mov	arg01, fp
1c728     30 10 BF FD | 	call	#_push
1c72c                 | LR__2241
1c72c     A7 F0 03 F6 | 	mov	ptra, fp
1c730     B2 00 A0 FD | 	call	#popregs_
1c734                 | _do_tan_ret
1c734     2D 00 64 FD | 	ret
1c738                 | 
1c738                 | ' 
1c738                 | ' ' ------------------ val
1c738                 | ' 
1c738                 | ' sub do_val
1c738                 | _do_val
1c738     03 4A 05 F6 | 	mov	COUNT_, #3
1c73c     A8 00 A0 FD | 	call	#pushregs_
1c740     20 F0 07 F1 | 	add	ptra, #32
1c744     4A 00 00 FF 
1c748     80 E4 05 F1 | 	add	objptr, ##38016
1c74c     F2 16 02 FB | 	rdlong	arg03, objptr
1c750     0B 27 02 F6 | 	mov	local01, arg03
1c754     01 26 66 F0 | 	shl	local01, #1
1c758     0B 27 02 F1 | 	add	local01, arg03
1c75c     02 26 66 F0 | 	shl	local01, #2
1c760     03 00 00 FF 
1c764     04 E4 85 F1 | 	sub	objptr, ##1540
1c768     F2 26 02 F1 | 	add	local01, objptr
1c76c     13 17 02 FB | 	rdlong	arg03, local01
1c770     0C 4E 05 F1 | 	add	fp, #12
1c774     A7 16 62 FC | 	wrlong	arg03, fp
1c778                 | ' 
1c778                 | ' numpar=compiledline(lineptr_e).result.uresult
1c778                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1c778     0C 4E 85 F1 | 	sub	fp, #12
1c77c     02 16 16 F2 | 	cmp	arg03, #2 wc
1c780     47 00 00 FF 
1c784     7C E4 85 F1 | 	sub	objptr, ##36476
1c788     0C 4E 05 C1 |  if_b	add	fp, #12
1c78c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1c790     0C 4E 85 C1 |  if_b	sub	fp, #12
1c794     40 00 90 4D |  if_c_and_nz	jmp	#LR__2250
1c798     00 12 06 F6 | 	mov	arg01, #0
1c79c     F8 04 B1 FD | 	call	#__system___getiolock_0613
1c7a0     FD 12 02 F6 | 	mov	arg01, result1
1c7a4     C8 A7 B0 FD | 	call	#__system___lockmem
1c7a8     BB 01 00 FF 
1c7ac     86 14 06 F6 | 	mov	arg02, ##@LR__6014
1c7b0     00 12 06 F6 | 	mov	arg01, #0
1c7b4     00 16 06 F6 | 	mov	arg03, #0
1c7b8     A8 B4 B0 FD | 	call	#__system___basic_print_string
1c7bc     00 12 06 F6 | 	mov	arg01, #0
1c7c0     D4 04 B1 FD | 	call	#__system___getiolock_0613
1c7c4     FD 00 68 FC | 	wrlong	#0, result1
1c7c8     27 12 06 F6 | 	mov	arg01, #39
1c7cc     00 14 06 F6 | 	mov	arg02, #0
1c7d0     80 6D B0 FD | 	call	#_printerror
1c7d4     60 02 90 FD | 	jmp	#LR__2263
1c7d8                 | LR__2250
1c7d8     E8 0E BF FD | 	call	#_pop
1c7dc     FF 16 02 F6 | 	mov	arg03, result3
1c7e0     A7 FA 61 FC | 	wrlong	result1, fp
1c7e4     04 4E 05 F1 | 	add	fp, #4
1c7e8     A7 FC 61 FC | 	wrlong	result2, fp
1c7ec     04 4E 05 F1 | 	add	fp, #4
1c7f0     A7 16 62 FC | 	wrlong	arg03, fp
1c7f4                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1c7f4     08 4E 85 F1 | 	sub	fp, #8
1c7f8     2B 16 0E F2 | 	cmp	arg03, #43 wz
1c7fc     18 00 90 5D |  if_ne	jmp	#LR__2251
1c800     A7 12 02 FB | 	rdlong	arg01, fp
1c804     34 10 BF FD | 	call	#_convertstring
1c808     A7 FA 61 FC | 	wrlong	result1, fp
1c80c     08 4E 05 F1 | 	add	fp, #8
1c810     A7 3E 68 FC | 	wrlong	#31, fp
1c814     08 4E 85 F1 | 	sub	fp, #8
1c818                 | LR__2251
1c818                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1c818     08 4E 05 F1 | 	add	fp, #8
1c81c     A7 16 02 FB | 	rdlong	arg03, fp
1c820     08 4E 85 F1 | 	sub	fp, #8
1c824     1F 16 0E F2 | 	cmp	arg03, #31 wz
1c828     40 00 90 AD |  if_e	jmp	#LR__2252
1c82c     00 12 06 F6 | 	mov	arg01, #0
1c830     64 04 B1 FD | 	call	#__system___getiolock_0613
1c834     FD 12 02 F6 | 	mov	arg01, result1
1c838     34 A7 B0 FD | 	call	#__system___lockmem
1c83c     BB 01 00 FF 
1c840     8C 14 06 F6 | 	mov	arg02, ##@LR__6015
1c844     00 12 06 F6 | 	mov	arg01, #0
1c848     00 16 06 F6 | 	mov	arg03, #0
1c84c     14 B4 B0 FD | 	call	#__system___basic_print_string
1c850     00 12 06 F6 | 	mov	arg01, #0
1c854     40 04 B1 FD | 	call	#__system___getiolock_0613
1c858     FD 00 68 FC | 	wrlong	#0, result1
1c85c     0F 12 06 F6 | 	mov	arg01, #15
1c860     00 14 06 F6 | 	mov	arg02, #0
1c864     EC 6C B0 FD | 	call	#_printerror
1c868     CC 01 90 FD | 	jmp	#LR__2263
1c86c                 | LR__2252
1c86c                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1c86c     A7 12 02 FB | 	rdlong	arg01, fp
1c870     01 14 06 F6 | 	mov	arg02, #1
1c874     74 C7 B0 FD | 	call	#__system__Left_S
1c878     FD 12 02 F6 | 	mov	arg01, result1
1c87c     BB 01 00 FF 
1c880     92 14 06 F6 | 	mov	arg02, ##@LR__6016
1c884     10 A7 B0 FD | 	call	#__system___string_cmp
1c888     00 FA 0D F2 | 	cmp	result1, #0 wz
1c88c     48 00 90 5D |  if_ne	jmp	#LR__2255
1c890     BB 01 00 FF 
1c894     94 26 06 F6 | 	mov	local01, ##@LR__6017
1c898     A7 16 02 FB | 	rdlong	arg03, fp
1c89c     0B 13 02 F6 | 	mov	arg01, arg03
1c8a0     09 29 02 F6 | 	mov	local02, arg01
1c8a4     97 06 48 FB | 	callpa	#(@LR__2254-@LR__2253)>>2,fcache_load_ptr_
1c8a8                 | LR__2253
1c8a8     14 FB C9 FA | 	rdbyte	result1, local02 wz
1c8ac     01 28 06 51 |  if_ne	add	local02, #1
1c8b0     F4 FF 9F 5D |  if_ne	jmp	#LR__2253
1c8b4                 | LR__2254
1c8b4     09 29 82 F1 | 	sub	local02, arg01
1c8b8     14 15 02 F6 | 	mov	arg02, local02
1c8bc     01 14 86 F1 | 	sub	arg02, #1
1c8c0     0B 13 02 F6 | 	mov	arg01, arg03
1c8c4     AC C7 B0 FD | 	call	#__system__Right_S
1c8c8     FD 14 02 F6 | 	mov	arg02, result1
1c8cc     13 13 02 F6 | 	mov	arg01, local01
1c8d0     F8 A6 B0 FD | 	call	#__system___string_concat
1c8d4     A7 FA 61 FC | 	wrlong	result1, fp
1c8d8                 | LR__2255
1c8d8                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1c8d8     A7 12 02 FB | 	rdlong	arg01, fp
1c8dc     01 14 06 F6 | 	mov	arg02, #1
1c8e0     08 C7 B0 FD | 	call	#__system__Left_S
1c8e4     FD 12 02 F6 | 	mov	arg01, result1
1c8e8     BB 01 00 FF 
1c8ec     97 14 06 F6 | 	mov	arg02, ##@LR__6018
1c8f0     A4 A6 B0 FD | 	call	#__system___string_cmp
1c8f4     00 FA 0D F2 | 	cmp	result1, #0 wz
1c8f8     48 00 90 5D |  if_ne	jmp	#LR__2258
1c8fc     BB 01 00 FF 
1c900     99 26 06 F6 | 	mov	local01, ##@LR__6019
1c904     A7 16 02 FB | 	rdlong	arg03, fp
1c908     0B 13 02 F6 | 	mov	arg01, arg03
1c90c     09 29 02 F6 | 	mov	local02, arg01
1c910     97 06 48 FB | 	callpa	#(@LR__2257-@LR__2256)>>2,fcache_load_ptr_
1c914                 | LR__2256
1c914     14 FB C9 FA | 	rdbyte	result1, local02 wz
1c918     01 28 06 51 |  if_ne	add	local02, #1
1c91c     F4 FF 9F 5D |  if_ne	jmp	#LR__2256
1c920                 | LR__2257
1c920     09 29 82 F1 | 	sub	local02, arg01
1c924     14 15 02 F6 | 	mov	arg02, local02
1c928     01 14 86 F1 | 	sub	arg02, #1
1c92c     0B 13 02 F6 | 	mov	arg01, arg03
1c930     40 C7 B0 FD | 	call	#__system__Right_S
1c934     FD 14 02 F6 | 	mov	arg02, result1
1c938     13 13 02 F6 | 	mov	arg01, local01
1c93c     8C A6 B0 FD | 	call	#__system___string_concat
1c940     A7 FA 61 FC | 	wrlong	result1, fp
1c944                 | LR__2258
1c944     A7 12 02 FB | 	rdlong	arg01, fp
1c948     A8 DC B0 FD | 	call	#__system____builtin_atof
1c94c     1C 4E 05 F1 | 	add	fp, #28
1c950     A7 FA 61 FC | 	wrlong	result1, fp
1c954     1C 4E 85 F1 | 	sub	fp, #28
1c958     A7 12 02 FB | 	rdlong	arg01, fp
1c95c     00 14 06 F6 | 	mov	arg02, #0
1c960     FC DA B0 FD | 	call	#__system____builtin_atoi
1c964     18 4E 05 F1 | 	add	fp, #24
1c968     A7 FA 61 FC | 	wrlong	result1, fp
1c96c                 | ' fval=val(t1.result.sresult)
1c96c                 | ' ival=val%(t1.result.sresult)
1c96c                 | ' if fval=ival then
1c96c     04 4E 05 F1 | 	add	fp, #4
1c970     A7 26 02 FB | 	rdlong	local01, fp
1c974     1C 4E 85 F1 | 	sub	fp, #28
1c978     FD 12 52 F6 | 	abs	arg01, result1 wc
1c97c     1F 2A C6 C9 |  if_b	decod	local03, #31
1c980     00 2A 06 36 |  if_ae	mov	local03, #0
1c984     5C D0 B0 FD | 	call	#__system___float_fromuns
1c988     15 FB 61 F5 | 	xor	result1, local03
1c98c     FD 14 02 F6 | 	mov	arg02, result1
1c990     13 13 02 F6 | 	mov	arg01, local01
1c994     01 16 06 F6 | 	mov	arg03, #1
1c998     80 D8 B0 FD | 	call	#__system___float_cmp
1c99c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c9a0     20 00 90 5D |  if_ne	jmp	#LR__2259
1c9a4     18 4E 05 F1 | 	add	fp, #24
1c9a8     A7 26 02 FB | 	rdlong	local01, fp
1c9ac     18 4E 85 F1 | 	sub	fp, #24
1c9b0     A7 26 62 FC | 	wrlong	local01, fp
1c9b4     08 4E 05 F1 | 	add	fp, #8
1c9b8     A7 38 68 FC | 	wrlong	#28, fp
1c9bc     08 4E 85 F1 | 	sub	fp, #8
1c9c0     6C 00 90 FD | 	jmp	#LR__2262
1c9c4                 | LR__2259
1c9c4                 | '   if fval=0 andalso ival<>0 then
1c9c4     1C 4E 05 F1 | 	add	fp, #28
1c9c8     A7 12 02 FB | 	rdlong	arg01, fp
1c9cc     1C 4E 85 F1 | 	sub	fp, #28
1c9d0     00 14 06 F6 | 	mov	arg02, #0
1c9d4     01 16 06 F6 | 	mov	arg03, #1
1c9d8     40 D8 B0 FD | 	call	#__system___float_cmp
1c9dc     00 FA 0D F2 | 	cmp	result1, #0 wz
1c9e0     30 00 90 5D |  if_ne	jmp	#LR__2260
1c9e4     18 4E 05 F1 | 	add	fp, #24
1c9e8     A7 26 0A FB | 	rdlong	local01, fp wz
1c9ec     18 4E 85 F1 | 	sub	fp, #24
1c9f0     20 00 90 AD |  if_e	jmp	#LR__2260
1c9f4     18 4E 05 F1 | 	add	fp, #24
1c9f8     A7 26 02 FB | 	rdlong	local01, fp
1c9fc     18 4E 85 F1 | 	sub	fp, #24
1ca00     A7 26 62 FC | 	wrlong	local01, fp
1ca04     08 4E 05 F1 | 	add	fp, #8
1ca08     A7 38 68 FC | 	wrlong	#28, fp
1ca0c     08 4E 85 F1 | 	sub	fp, #8
1ca10     1C 00 90 FD | 	jmp	#LR__2261
1ca14                 | LR__2260
1ca14     1C 4E 05 F1 | 	add	fp, #28
1ca18     A7 26 02 FB | 	rdlong	local01, fp
1ca1c     1C 4E 85 F1 | 	sub	fp, #28
1ca20     A7 26 62 FC | 	wrlong	local01, fp
1ca24     08 4E 05 F1 | 	add	fp, #8
1ca28     A7 3C 68 FC | 	wrlong	#30, fp
1ca2c     08 4E 85 F1 | 	sub	fp, #8
1ca30                 | LR__2261
1ca30                 | LR__2262
1ca30     A7 12 02 F6 | 	mov	arg01, fp
1ca34     24 0D BF FD | 	call	#_push
1ca38                 | LR__2263
1ca38     A7 F0 03 F6 | 	mov	ptra, fp
1ca3c     B2 00 A0 FD | 	call	#popregs_
1ca40                 | _do_val_ret
1ca40     2D 00 64 FD | 	ret
1ca44                 | 
1ca44                 | ' 
1ca44                 | ' ' ------------------ waitclock
1ca44                 | ' 
1ca44                 | ' sub do_waitclock
1ca44                 | _do_waitclock
1ca44     52 00 00 FF 
1ca48     94 E4 05 F1 | 	add	objptr, ##42132
1ca4c     F2 00 02 FB | 	rdlong	_var01, objptr
1ca50                 | ' c=hkcnt
1ca50                 | ' do: loop until hkcnt<>c
1ca50                 | LR__2270
1ca50     F2 02 02 FB | 	rdlong	_var02, objptr
1ca54     00 03 0A F2 | 	cmp	_var02, _var01 wz
1ca58     F4 FF 9F AD |  if_e	jmp	#LR__2270
1ca5c     52 00 00 FF 
1ca60     94 E4 85 F1 | 	sub	objptr, ##42132
1ca64                 | _do_waitclock_ret
1ca64     2D 00 64 FD | 	ret
1ca68                 | 
1ca68                 | ' 
1ca68                 | ' ' ------------------ waitms
1ca68                 | ' 
1ca68                 | ' sub do_waitms
1ca68                 | _do_waitms
1ca68     01 4A 05 F6 | 	mov	COUNT_, #1
1ca6c     A8 00 A0 FD | 	call	#pushregs_
1ca70     18 F0 07 F1 | 	add	ptra, #24
1ca74     4C 0C BF FD | 	call	#_pop
1ca78     A7 FA 61 FC | 	wrlong	result1, fp
1ca7c     04 4E 05 F1 | 	add	fp, #4
1ca80     A7 FC 61 FC | 	wrlong	result2, fp
1ca84     04 4E 05 F1 | 	add	fp, #4
1ca88     A7 FE 61 FC | 	wrlong	result3, fp
1ca8c     08 4E 85 F1 | 	sub	fp, #8
1ca90     A7 12 02 F6 | 	mov	arg01, fp
1ca94     10 0E BF FD | 	call	#_converttoint
1ca98     0C 4E 05 F1 | 	add	fp, #12
1ca9c     A7 FA 61 FC | 	wrlong	result1, fp
1caa0                 | ' 
1caa0                 | ' t1=pop()  
1caa0                 | ' t=converttoint(t1)
1caa0                 | ' if t<0 then return
1caa0     0C 4E 85 F1 | 	sub	fp, #12
1caa4     00 FA 55 F2 | 	cmps	result1, #0 wc
1caa8     E4 00 90 CD |  if_b	jmp	#LR__2286
1caac                 | ' if t < 1000 then 
1caac     0C 4E 05 F1 | 	add	fp, #12
1cab0     A7 12 02 FB | 	rdlong	arg01, fp
1cab4     0C 4E 85 F1 | 	sub	fp, #12
1cab8     01 00 00 FF 
1cabc     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
1cac0     14 00 90 3D |  if_ae	jmp	#LR__2280
1cac4     0C 4E 05 F1 | 	add	fp, #12
1cac8     A7 12 02 FB | 	rdlong	arg01, fp
1cacc     0C 4E 85 F1 | 	sub	fp, #12
1cad0     90 A7 B0 FD | 	call	#__system___waitms
1cad4     B8 00 90 FD | 	jmp	#LR__2285
1cad8                 | LR__2280
1cad8     10 4E 05 F1 | 	add	fp, #16
1cadc     A7 02 68 FC | 	wrlong	#1, fp
1cae0     04 4E 85 F1 | 	sub	fp, #4
1cae4     A7 12 02 FB | 	rdlong	arg01, fp
1cae8     09 13 52 F6 | 	abs	arg01, arg01 wc
1caec     01 00 00 FF 
1caf0     E8 13 16 FD | 	qdiv	arg01, ##1000
1caf4                 | '   for i=1 to t/1000
1caf4     0C 4E 85 F1 | 	sub	fp, #12
1caf8     18 26 62 FD | 	getqx	local01
1cafc     13 27 82 F6 | 	negc	local01, local01
1cb00     01 26 06 F1 | 	add	local01, #1
1cb04                 | LR__2281
1cb04     10 4E 05 F1 | 	add	fp, #16
1cb08     A7 12 02 FB | 	rdlong	arg01, fp
1cb0c     10 4E 85 F1 | 	sub	fp, #16
1cb10     13 13 52 F2 | 	cmps	arg01, local01 wc
1cb14     54 00 90 3D |  if_ae	jmp	#LR__2284
1cb18     01 00 00 FF 
1cb1c     E8 13 06 F6 | 	mov	arg01, ##1000
1cb20     40 A7 B0 FD | 	call	#__system___waitms
1cb24                 | '     waitms(1000)
1cb24                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1cb24     E0 12 06 F6 | 	mov	arg01, #224
1cb28     4C 9B B0 FD | 	call	#_usbnew_spin2_keystate
1cb2c     00 FA 0D F2 | 	cmp	result1, #0 wz
1cb30     10 00 90 5D |  if_ne	jmp	#LR__2282
1cb34     E4 12 06 F6 | 	mov	arg01, #228
1cb38     3C 9B B0 FD | 	call	#_usbnew_spin2_keystate
1cb3c     00 FA 0D F2 | 	cmp	result1, #0 wz
1cb40     10 00 90 AD |  if_e	jmp	#LR__2283
1cb44                 | LR__2282
1cb44     06 12 06 F6 | 	mov	arg01, #6
1cb48     2C 9B B0 FD | 	call	#_usbnew_spin2_keystate
1cb4c     00 FA 0D F2 | 	cmp	result1, #0 wz
1cb50     3C 00 90 5D |  if_ne	jmp	#LR__2286
1cb54                 | LR__2283
1cb54     10 4E 05 F1 | 	add	fp, #16
1cb58     A7 12 02 FB | 	rdlong	arg01, fp
1cb5c     01 12 06 F1 | 	add	arg01, #1
1cb60     A7 12 62 FC | 	wrlong	arg01, fp
1cb64     10 4E 85 F1 | 	sub	fp, #16
1cb68     98 FF 9F FD | 	jmp	#LR__2281
1cb6c                 | LR__2284
1cb6c     0C 4E 05 F1 | 	add	fp, #12
1cb70     A7 26 02 FB | 	rdlong	local01, fp
1cb74     13 27 52 F6 | 	abs	local01, local01 wc
1cb78     01 00 00 FF 
1cb7c     E8 27 16 FD | 	qdiv	local01, ##1000
1cb80     0C 4E 85 F1 | 	sub	fp, #12
1cb84     19 26 62 FD | 	getqy	local01
1cb88     13 13 82 F6 | 	negc	arg01, local01
1cb8c     D4 A6 B0 FD | 	call	#__system___waitms
1cb90                 | LR__2285
1cb90                 | LR__2286
1cb90     A7 F0 03 F6 | 	mov	ptra, fp
1cb94     B2 00 A0 FD | 	call	#popregs_
1cb98                 | _do_waitms_ret
1cb98     2D 00 64 FD | 	ret
1cb9c                 | 
1cb9c                 | ' 
1cb9c                 | ' ' ------------------ waitvbl
1cb9c                 | ' 
1cb9c                 | ' sub do_waitvbl
1cb9c                 | _do_waitvbl
1cb9c     01 12 06 F6 | 	mov	arg01, #1
1cba0     A8 86 B0 FD | 	call	#_hg010b_spin2_waitvbl
1cba4                 | _do_waitvbl_ret
1cba4     2D 00 64 FD | 	ret
1cba8                 | 
1cba8                 | ' 
1cba8                 | ' ' ------------------ wrpin
1cba8                 | ' 
1cba8                 | ' sub do_wrpin
1cba8                 | _do_wrpin
1cba8     01 4A 05 F6 | 	mov	COUNT_, #1
1cbac     A8 00 A0 FD | 	call	#pushregs_
1cbb0     18 F0 07 F1 | 	add	ptra, #24
1cbb4     0C 0B BF FD | 	call	#_pop
1cbb8     FD 14 02 F6 | 	mov	arg02, result1
1cbbc     FE 12 02 F6 | 	mov	arg01, result2
1cbc0     FF 26 02 F6 | 	mov	local01, result3
1cbc4     A7 14 62 FC | 	wrlong	arg02, fp
1cbc8     04 4E 05 F1 | 	add	fp, #4
1cbcc     A7 12 62 FC | 	wrlong	arg01, fp
1cbd0     04 4E 05 F1 | 	add	fp, #4
1cbd4     A7 26 62 FC | 	wrlong	local01, fp
1cbd8     08 4E 85 F1 | 	sub	fp, #8
1cbdc     E4 0A BF FD | 	call	#_pop
1cbe0     FF 26 02 F6 | 	mov	local01, result3
1cbe4     0C 4E 05 F1 | 	add	fp, #12
1cbe8     A7 FA 61 FC | 	wrlong	result1, fp
1cbec     04 4E 05 F1 | 	add	fp, #4
1cbf0     A7 FC 61 FC | 	wrlong	result2, fp
1cbf4     04 4E 05 F1 | 	add	fp, #4
1cbf8     A7 26 62 FC | 	wrlong	local01, fp
1cbfc     08 4E 85 F1 | 	sub	fp, #8
1cc00     A7 12 02 F6 | 	mov	arg01, fp
1cc04     0C 4E 85 F1 | 	sub	fp, #12
1cc08     9C 0C BF FD | 	call	#_converttoint
1cc0c     FD 26 02 F6 | 	mov	local01, result1
1cc10     A7 12 02 F6 | 	mov	arg01, fp
1cc14     90 0C BF FD | 	call	#_converttoint
1cc18     13 FB 01 FC | 	wrpin	result1, local01
1cc1c     A7 F0 03 F6 | 	mov	ptra, fp
1cc20     B2 00 A0 FD | 	call	#popregs_
1cc24                 | _do_wrpin_ret
1cc24     2D 00 64 FD | 	ret
1cc28                 | 
1cc28                 | ' 
1cc28                 | ' ' ------------------ wxpin
1cc28                 | ' 
1cc28                 | ' sub do_wxpin
1cc28                 | _do_wxpin
1cc28     01 4A 05 F6 | 	mov	COUNT_, #1
1cc2c     A8 00 A0 FD | 	call	#pushregs_
1cc30     18 F0 07 F1 | 	add	ptra, #24
1cc34     8C 0A BF FD | 	call	#_pop
1cc38     FD 14 02 F6 | 	mov	arg02, result1
1cc3c     FE 12 02 F6 | 	mov	arg01, result2
1cc40     FF 26 02 F6 | 	mov	local01, result3
1cc44     A7 14 62 FC | 	wrlong	arg02, fp
1cc48     04 4E 05 F1 | 	add	fp, #4
1cc4c     A7 12 62 FC | 	wrlong	arg01, fp
1cc50     04 4E 05 F1 | 	add	fp, #4
1cc54     A7 26 62 FC | 	wrlong	local01, fp
1cc58     08 4E 85 F1 | 	sub	fp, #8
1cc5c     64 0A BF FD | 	call	#_pop
1cc60     FF 26 02 F6 | 	mov	local01, result3
1cc64     0C 4E 05 F1 | 	add	fp, #12
1cc68     A7 FA 61 FC | 	wrlong	result1, fp
1cc6c     04 4E 05 F1 | 	add	fp, #4
1cc70     A7 FC 61 FC | 	wrlong	result2, fp
1cc74     04 4E 05 F1 | 	add	fp, #4
1cc78     A7 26 62 FC | 	wrlong	local01, fp
1cc7c     08 4E 85 F1 | 	sub	fp, #8
1cc80     A7 12 02 F6 | 	mov	arg01, fp
1cc84     0C 4E 85 F1 | 	sub	fp, #12
1cc88     1C 0C BF FD | 	call	#_converttoint
1cc8c     FD 26 02 F6 | 	mov	local01, result1
1cc90     A7 12 02 F6 | 	mov	arg01, fp
1cc94     10 0C BF FD | 	call	#_converttoint
1cc98     13 FB 11 FC | 	wxpin	result1, local01
1cc9c     A7 F0 03 F6 | 	mov	ptra, fp
1cca0     B2 00 A0 FD | 	call	#popregs_
1cca4                 | _do_wxpin_ret
1cca4     2D 00 64 FD | 	ret
1cca8                 | 
1cca8                 | ' 
1cca8                 | ' ' ------------------ wypin
1cca8                 | ' 
1cca8                 | ' sub do_wypin
1cca8                 | _do_wypin
1cca8     01 4A 05 F6 | 	mov	COUNT_, #1
1ccac     A8 00 A0 FD | 	call	#pushregs_
1ccb0     18 F0 07 F1 | 	add	ptra, #24
1ccb4     0C 0A BF FD | 	call	#_pop
1ccb8     FD 14 02 F6 | 	mov	arg02, result1
1ccbc     FE 12 02 F6 | 	mov	arg01, result2
1ccc0     FF 26 02 F6 | 	mov	local01, result3
1ccc4     A7 14 62 FC | 	wrlong	arg02, fp
1ccc8     04 4E 05 F1 | 	add	fp, #4
1cccc     A7 12 62 FC | 	wrlong	arg01, fp
1ccd0     04 4E 05 F1 | 	add	fp, #4
1ccd4     A7 26 62 FC | 	wrlong	local01, fp
1ccd8     08 4E 85 F1 | 	sub	fp, #8
1ccdc     E4 09 BF FD | 	call	#_pop
1cce0     FF 26 02 F6 | 	mov	local01, result3
1cce4     0C 4E 05 F1 | 	add	fp, #12
1cce8     A7 FA 61 FC | 	wrlong	result1, fp
1ccec     04 4E 05 F1 | 	add	fp, #4
1ccf0     A7 FC 61 FC | 	wrlong	result2, fp
1ccf4     04 4E 05 F1 | 	add	fp, #4
1ccf8     A7 26 62 FC | 	wrlong	local01, fp
1ccfc     08 4E 85 F1 | 	sub	fp, #8
1cd00     A7 12 02 F6 | 	mov	arg01, fp
1cd04     0C 4E 85 F1 | 	sub	fp, #12
1cd08     9C 0B BF FD | 	call	#_converttoint
1cd0c     FD 26 02 F6 | 	mov	local01, result1
1cd10     A7 12 02 F6 | 	mov	arg01, fp
1cd14     90 0B BF FD | 	call	#_converttoint
1cd18     13 FB 21 FC | 	wypin	result1, local01
1cd1c     A7 F0 03 F6 | 	mov	ptra, fp
1cd20     B2 00 A0 FD | 	call	#popregs_
1cd24                 | _do_wypin_ret
1cd24     2D 00 64 FD | 	ret
1cd28                 | 
1cd28                 | ' 
1cd28                 | ' 
1cd28                 | ' 
1cd28                 | ' 
1cd28                 | ' 
1cd28                 | ' 
1cd28                 | ' 
1cd28                 | ' 
1cd28                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1cd28                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1cd28                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1cd28                 | ' 
1cd28                 | ' 
1cd28                 | ' '------------------ Assign
1cd28                 | ' 
1cd28                 | ' sub do_assign
1cd28                 | _do_assign
1cd28     05 4A 05 F6 | 	mov	COUNT_, #5
1cd2c     A8 00 A0 FD | 	call	#pushregs_
1cd30     44 F0 07 F1 | 	add	ptra, #68
1cd34     4A 00 00 FF 
1cd38     80 E4 05 F1 | 	add	objptr, ##38016
1cd3c     F2 16 02 FB | 	rdlong	arg03, objptr
1cd40     0B 15 02 F6 | 	mov	arg02, arg03
1cd44     01 14 66 F0 | 	shl	arg02, #1
1cd48     0B 15 02 F1 | 	add	arg02, arg03
1cd4c     02 14 66 F0 | 	shl	arg02, #2
1cd50     03 00 00 FF 
1cd54     04 E4 85 F1 | 	sub	objptr, ##1540
1cd58     F2 14 02 F1 | 	add	arg02, objptr
1cd5c     0A 15 02 FB | 	rdlong	arg02, arg02
1cd60     18 4E 05 F1 | 	add	fp, #24
1cd64     A7 14 62 FC | 	wrlong	arg02, fp
1cd68                 | ' 
1cd68                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1cd68                 | ' if variables(varnum).vartype<array_no_type then 
1cd68     18 4E 85 F1 | 	sub	fp, #24
1cd6c     04 14 66 F0 | 	shl	arg02, #4
1cd70     32 00 00 FF 
1cd74     84 E4 85 F1 | 	sub	objptr, ##25732
1cd78     F2 14 02 F1 | 	add	arg02, objptr
1cd7c     0C 14 06 F1 | 	add	arg02, #12
1cd80     0A 17 02 FB | 	rdlong	arg03, arg02
1cd84     00 17 16 F2 | 	cmp	arg03, #256 wc
1cd88     14 00 00 FF 
1cd8c     F8 E5 85 F1 | 	sub	objptr, ##10744
1cd90     18 01 90 3D |  if_ae	jmp	#LR__2290
1cd94     2C 09 BF FD | 	call	#_pop
1cd98     A7 FA 61 FC | 	wrlong	result1, fp
1cd9c     04 4E 05 F1 | 	add	fp, #4
1cda0     A7 FC 61 FC | 	wrlong	result2, fp
1cda4     04 4E 05 F1 | 	add	fp, #4
1cda8     A7 FE 61 FC | 	wrlong	result3, fp
1cdac     08 4E 85 F1 | 	sub	fp, #8
1cdb0     A7 16 02 FB | 	rdlong	arg03, fp
1cdb4     04 4E 05 F1 | 	add	fp, #4
1cdb8     A7 14 02 FB | 	rdlong	arg02, fp
1cdbc     14 4E 05 F1 | 	add	fp, #20
1cdc0     A7 12 02 FB | 	rdlong	arg01, fp
1cdc4     04 12 66 F0 | 	shl	arg01, #4
1cdc8     14 00 00 FF 
1cdcc     F8 E5 05 F1 | 	add	objptr, ##10744
1cdd0     F2 12 02 F1 | 	add	arg01, objptr
1cdd4     04 12 06 F1 | 	add	arg01, #4
1cdd8     09 17 62 FC | 	wrlong	arg03, arg01
1cddc     A7 16 02 FB | 	rdlong	arg03, fp
1cde0     04 16 66 F0 | 	shl	arg03, #4
1cde4     F2 16 02 F1 | 	add	arg03, objptr
1cde8     08 16 06 F1 | 	add	arg03, #8
1cdec     0B 15 62 FC | 	wrlong	arg02, arg03
1cdf0     A7 16 02 FB | 	rdlong	arg03, fp
1cdf4     04 16 66 F0 | 	shl	arg03, #4
1cdf8     F2 16 02 F1 | 	add	arg03, objptr
1cdfc     10 4E 85 F1 | 	sub	fp, #16
1ce00     A7 14 02 FB | 	rdlong	arg02, fp
1ce04     0C 16 06 F1 | 	add	arg03, #12
1ce08     0B 15 62 FC | 	wrlong	arg02, arg03
1ce0c                 | '   t1=pop() 
1ce0c                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1ce0c                 | '   if variables(varnum).vartype<>result_string2 then return
1ce0c     10 4E 05 F1 | 	add	fp, #16
1ce10     A7 16 02 FB | 	rdlong	arg03, fp
1ce14     18 4E 85 F1 | 	sub	fp, #24
1ce18     04 16 66 F0 | 	shl	arg03, #4
1ce1c     F2 16 02 F1 | 	add	arg03, objptr
1ce20     0C 16 06 F1 | 	add	arg03, #12
1ce24     0B 17 02 FB | 	rdlong	arg03, arg03
1ce28     2B 16 0E F2 | 	cmp	arg03, #43 wz
1ce2c     14 00 00 FF 
1ce30     F8 E5 85 F1 | 	sub	objptr, ##10744
1ce34     EC 04 90 5D |  if_ne	jmp	#LR__2313
1ce38     18 4E 05 F1 | 	add	fp, #24
1ce3c     A7 16 02 FB | 	rdlong	arg03, fp
1ce40     0B 27 02 F6 | 	mov	local01, arg03
1ce44     04 26 66 F0 | 	shl	local01, #4
1ce48     14 00 00 FF 
1ce4c     F8 E5 05 F1 | 	add	objptr, ##10744
1ce50     F2 26 02 F1 | 	add	local01, objptr
1ce54     18 4E 85 F1 | 	sub	fp, #24
1ce58     04 16 66 F0 | 	shl	arg03, #4
1ce5c     F2 16 02 F1 | 	add	arg03, objptr
1ce60     04 16 06 F1 | 	add	arg03, #4
1ce64     0B 13 02 FB | 	rdlong	arg01, arg03
1ce68     14 00 00 FF 
1ce6c     F8 E5 85 F1 | 	sub	objptr, ##10744
1ce70     C8 09 BF FD | 	call	#_convertstring
1ce74     04 26 06 F1 | 	add	local01, #4
1ce78     13 FB 61 FC | 	wrlong	result1, local01
1ce7c     18 4E 05 F1 | 	add	fp, #24
1ce80     A7 26 02 FB | 	rdlong	local01, fp
1ce84     18 4E 85 F1 | 	sub	fp, #24
1ce88     04 26 66 F0 | 	shl	local01, #4
1ce8c     14 00 00 FF 
1ce90     F8 E5 05 F1 | 	add	objptr, ##10744
1ce94     F2 26 02 F1 | 	add	local01, objptr
1ce98     0C 26 06 F1 | 	add	local01, #12
1ce9c     13 3F 68 FC | 	wrlong	#31, local01
1cea0                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1cea0                 | '   variables(varnum).vartype=result_string
1cea0                 | '   return
1cea0     14 00 00 FF 
1cea4     F8 E5 85 F1 | 	sub	objptr, ##10744
1cea8     78 04 90 FD | 	jmp	#LR__2313
1ceac                 | LR__2290
1ceac                 | ' for i=0 to 2 : arrid(i)=0 : next i
1ceac     1C 4E 05 F1 | 	add	fp, #28
1ceb0     A7 00 68 FC | 	wrlong	#0, fp
1ceb4     97 16 48 FB | 	callpa	#(@LR__2292-@LR__2291)>>2,fcache_load_ptr_
1ceb8                 | LR__2291
1ceb8     A7 26 02 FB | 	rdlong	local01, fp
1cebc     02 26 66 F0 | 	shl	local01, #2
1cec0     18 4E 05 F1 | 	add	fp, #24
1cec4     A7 26 02 F1 | 	add	local01, fp
1cec8     13 01 68 FC | 	wrlong	#0, local01
1cecc     18 4E 85 F1 | 	sub	fp, #24
1ced0     A7 26 02 FB | 	rdlong	local01, fp
1ced4     01 26 06 F1 | 	add	local01, #1
1ced8     A7 26 62 FC | 	wrlong	local01, fp
1cedc     03 26 16 F2 | 	cmp	local01, #3 wc
1cee0     D4 FF 9F CD |  if_b	jmp	#LR__2291
1cee4                 | LR__2292
1cee4     4A 00 00 FF 
1cee8     80 E4 05 F1 | 	add	objptr, ##38016
1ceec     F2 16 02 FB | 	rdlong	arg03, objptr
1cef0     0B 27 02 F6 | 	mov	local01, arg03
1cef4     01 26 66 F0 | 	shl	local01, #1
1cef8     0B 27 02 F1 | 	add	local01, arg03
1cefc     02 26 66 F0 | 	shl	local01, #2
1cf00     03 00 00 FF 
1cf04     04 E4 85 F1 | 	sub	objptr, ##1540
1cf08     F2 26 02 F1 | 	add	local01, objptr
1cf0c     04 26 06 F1 | 	add	local01, #4
1cf10     13 29 02 FB | 	rdlong	local02, local01
1cf14     04 4E 05 F1 | 	add	fp, #4
1cf18     A7 28 62 FC | 	wrlong	local02, fp
1cf1c     20 4E 85 F1 | 	sub	fp, #32
1cf20     47 00 00 FF 
1cf24     7C E4 85 F1 | 	sub	objptr, ##36476
1cf28     98 07 BF FD | 	call	#_pop
1cf2c     A7 FA 61 FC | 	wrlong	result1, fp
1cf30     04 4E 05 F1 | 	add	fp, #4
1cf34     A7 FC 61 FC | 	wrlong	result2, fp
1cf38     04 4E 05 F1 | 	add	fp, #4
1cf3c     A7 FE 61 FC | 	wrlong	result3, fp
1cf40                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1cf40                 | ' t1=pop() ' var value
1cf40                 | ' if numpar>0 then
1cf40     18 4E 05 F1 | 	add	fp, #24
1cf44     A7 2A 02 FB | 	rdlong	local03, fp
1cf48     20 4E 85 F1 | 	sub	fp, #32
1cf4c     01 2A 16 F2 | 	cmp	local03, #1 wc
1cf50     78 00 90 CD |  if_b	jmp	#LR__2295
1cf54                 | '   for i=numpar to 1 step -1
1cf54     20 4E 05 F1 | 	add	fp, #32
1cf58     A7 2C 0A FB | 	rdlong	local04, fp wz
1cf5c     04 4E 85 F1 | 	sub	fp, #4
1cf60     A7 2C 62 FC | 	wrlong	local04, fp
1cf64     1C 4E 85 F1 | 	sub	fp, #28
1cf68     60 00 90 AD |  if_e	jmp	#LR__2294
1cf6c                 | LR__2293
1cf6c     54 07 BF FD | 	call	#_pop
1cf70     0C 4E 05 F1 | 	add	fp, #12
1cf74     A7 FA 61 FC | 	wrlong	result1, fp
1cf78     04 4E 05 F1 | 	add	fp, #4
1cf7c     A7 FC 61 FC | 	wrlong	result2, fp
1cf80     04 4E 05 F1 | 	add	fp, #4
1cf84     A7 FE 61 FC | 	wrlong	result3, fp
1cf88     08 4E 05 F1 | 	add	fp, #8
1cf8c     A7 2A 02 FB | 	rdlong	local03, fp
1cf90     01 2A 86 F1 | 	sub	local03, #1
1cf94     02 2A 66 F0 | 	shl	local03, #2
1cf98     18 4E 05 F1 | 	add	fp, #24
1cf9c     A7 2A 02 F1 | 	add	local03, fp
1cfa0     28 4E 85 F1 | 	sub	fp, #40
1cfa4     A7 12 02 F6 | 	mov	arg01, fp
1cfa8     0C 4E 85 F1 | 	sub	fp, #12
1cfac     F8 08 BF FD | 	call	#_converttoint
1cfb0     15 FB 61 FC | 	wrlong	result1, local03
1cfb4     1C 4E 05 F1 | 	add	fp, #28
1cfb8     A7 2C 02 FB | 	rdlong	local04, fp
1cfbc     01 2C 8E F1 | 	sub	local04, #1 wz
1cfc0     A7 2C 62 FC | 	wrlong	local04, fp
1cfc4     1C 4E 85 F1 | 	sub	fp, #28
1cfc8     A0 FF 9F 5D |  if_ne	jmp	#LR__2293
1cfcc                 | LR__2294
1cfcc                 | LR__2295
1cfcc     18 4E 05 F1 | 	add	fp, #24
1cfd0     A7 26 02 FB | 	rdlong	local01, fp
1cfd4     04 26 66 F0 | 	shl	local01, #4
1cfd8     14 00 00 FF 
1cfdc     F8 E5 05 F1 | 	add	objptr, ##10744
1cfe0     F2 26 02 F1 | 	add	local01, objptr
1cfe4     04 26 06 F1 | 	add	local01, #4
1cfe8     13 13 02 FB | 	rdlong	arg01, local01
1cfec     0C 4E 05 F1 | 	add	fp, #12
1cff0     A7 12 62 FC | 	wrlong	arg01, fp
1cff4     24 4E 85 F1 | 	sub	fp, #36
1cff8     14 00 00 FF 
1cffc     F8 E5 85 F1 | 	sub	objptr, ##10744
1d000     20 68 B0 FD | 	call	#_pslpeek
1d004     FD 2C 32 F9 | 	getword	local04, result1, #0
1d008     28 4E 05 F1 | 	add	fp, #40
1d00c     A7 2C 62 FC | 	wrlong	local04, fp
1d010     04 4E 85 F1 | 	sub	fp, #4
1d014     A7 12 02 FB | 	rdlong	arg01, fp
1d018     24 4E 85 F1 | 	sub	fp, #36
1d01c     02 12 06 F1 | 	add	arg01, #2
1d020     A8 67 B0 FD | 	call	#_pspeek
1d024     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d028     2C 4E 05 F1 | 	add	fp, #44
1d02c     A7 FA 61 FC | 	wrlong	result1, fp
1d030                 | ' esize=pspeek(arrptr+2)
1d030                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1d030     08 4E 85 F1 | 	sub	fp, #8
1d034     A7 12 02 FB | 	rdlong	arg01, fp
1d038     24 4E 85 F1 | 	sub	fp, #36
1d03c     04 12 06 F1 | 	add	arg01, #4
1d040     E0 67 B0 FD | 	call	#_pslpeek
1d044     FD 2C 02 F6 | 	mov	local04, result1
1d048     34 4E 05 F1 | 	add	fp, #52
1d04c     A7 26 02 FB | 	rdlong	local01, fp
1d050     34 4E 85 F1 | 	sub	fp, #52
1d054     16 27 12 F2 | 	cmp	local01, local04 wc
1d058     54 00 90 3D |  if_ae	jmp	#LR__2296
1d05c     24 4E 05 F1 | 	add	fp, #36
1d060     A7 12 02 FB | 	rdlong	arg01, fp
1d064     24 4E 85 F1 | 	sub	fp, #36
1d068     08 12 06 F1 | 	add	arg01, #8
1d06c     B4 67 B0 FD | 	call	#_pslpeek
1d070     FD 26 02 F6 | 	mov	local01, result1
1d074     38 4E 05 F1 | 	add	fp, #56
1d078     A7 2C 02 FB | 	rdlong	local04, fp
1d07c     38 4E 85 F1 | 	sub	fp, #56
1d080     13 2D 12 F2 | 	cmp	local04, local01 wc
1d084     28 00 90 3D |  if_ae	jmp	#LR__2296
1d088     24 4E 05 F1 | 	add	fp, #36
1d08c     A7 12 02 FB | 	rdlong	arg01, fp
1d090     24 4E 85 F1 | 	sub	fp, #36
1d094     0C 12 06 F1 | 	add	arg01, #12
1d098     88 67 B0 FD | 	call	#_pslpeek
1d09c     3C 4E 05 F1 | 	add	fp, #60
1d0a0     A7 2C 02 FB | 	rdlong	local04, fp
1d0a4     3C 4E 85 F1 | 	sub	fp, #60
1d0a8     FD 2C 12 F2 | 	cmp	local04, result1 wc
1d0ac     10 00 90 CD |  if_b	jmp	#LR__2297
1d0b0                 | LR__2296
1d0b0     31 12 06 F6 | 	mov	arg01, #49
1d0b4     00 14 06 F6 | 	mov	arg02, #0
1d0b8     98 64 B0 FD | 	call	#_printerror
1d0bc     64 02 90 FD | 	jmp	#LR__2313
1d0c0                 | LR__2297
1d0c0     24 4E 05 F1 | 	add	fp, #36
1d0c4     A7 12 02 FB | 	rdlong	arg01, fp
1d0c8     09 2D 02 F6 | 	mov	local04, arg01
1d0cc     10 2C 06 F1 | 	add	local04, #16
1d0d0     24 4E 85 F1 | 	sub	fp, #36
1d0d4     04 12 06 F1 | 	add	arg01, #4
1d0d8     48 67 B0 FD | 	call	#_pslpeek
1d0dc     FD 26 02 F6 | 	mov	local01, result1
1d0e0     38 4E 05 F1 | 	add	fp, #56
1d0e4     A7 28 02 FB | 	rdlong	local02, fp
1d0e8     14 27 02 FD | 	qmul	local01, local02
1d0ec     04 4E 85 F1 | 	sub	fp, #4
1d0f0     A7 2A 02 FB | 	rdlong	local03, fp
1d0f4     10 4E 85 F1 | 	sub	fp, #16
1d0f8     A7 12 02 FB | 	rdlong	arg01, fp
1d0fc     24 4E 85 F1 | 	sub	fp, #36
1d100     08 12 06 F1 | 	add	arg01, #8
1d104     18 28 62 FD | 	getqx	local02
1d108     14 2B 02 F1 | 	add	local03, local02
1d10c     14 67 B0 FD | 	call	#_pslpeek
1d110     FD 28 02 F6 | 	mov	local02, result1
1d114     24 4E 05 F1 | 	add	fp, #36
1d118     A7 12 02 FB | 	rdlong	arg01, fp
1d11c     24 4E 85 F1 | 	sub	fp, #36
1d120     04 12 06 F1 | 	add	arg01, #4
1d124     FC 66 B0 FD | 	call	#_pslpeek
1d128     FD 28 02 FD | 	qmul	local02, result1
1d12c     3C 4E 05 F1 | 	add	fp, #60
1d130     A7 28 02 FB | 	rdlong	local02, fp
1d134     18 26 62 FD | 	getqx	local01
1d138     14 27 02 FD | 	qmul	local01, local02
1d13c     10 4E 85 F1 | 	sub	fp, #16
1d140     A7 28 02 FB | 	rdlong	local02, fp
1d144     18 26 62 FD | 	getqx	local01
1d148     13 2B 02 F1 | 	add	local03, local01
1d14c     15 29 02 FD | 	qmul	local02, local03
1d150     04 4E 05 F1 | 	add	fp, #4
1d154                 | ' 
1d154                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1d154                 | ' select case arrtype
1d154     18 2A 62 FD | 	getqx	local03
1d158     15 2D 02 F1 | 	add	local04, local03
1d15c     A7 2C 62 FC | 	wrlong	local04, fp
1d160     08 4E 85 F1 | 	sub	fp, #8
1d164     A7 2E 02 FB | 	rdlong	local05, fp
1d168     28 4E 85 F1 | 	sub	fp, #40
1d16c     00 2F 86 F1 | 	sub	local05, #256
1d170     0C 2E 26 F3 | 	fle	local05, #12
1d174     30 2E 62 FD | 	jmprel	local05
1d178                 | LR__2298
1d178     30 00 90 FD | 	jmp	#LR__2299
1d17c     58 00 90 FD | 	jmp	#LR__2300
1d180     6C 00 90 FD | 	jmp	#LR__2301
1d184     80 00 90 FD | 	jmp	#LR__2302
1d188     B0 00 90 FD | 	jmp	#LR__2303
1d18c     E0 00 90 FD | 	jmp	#LR__2304
1d190     F4 00 90 FD | 	jmp	#LR__2305
1d194     08 01 90 FD | 	jmp	#LR__2306
1d198     1C 01 90 FD | 	jmp	#LR__2307
1d19c     30 01 90 FD | 	jmp	#LR__2308
1d1a0     44 01 90 FD | 	jmp	#LR__2309
1d1a4     58 01 90 FD | 	jmp	#LR__2310
1d1a8     6C 01 90 FD | 	jmp	#LR__2311
1d1ac                 | LR__2299
1d1ac     A7 12 02 F6 | 	mov	arg01, fp
1d1b0     30 4E 05 F1 | 	add	fp, #48
1d1b4     A7 14 02 FB | 	rdlong	arg02, fp
1d1b8     30 4E 85 F1 | 	sub	fp, #48
1d1bc     0C 16 06 F6 | 	mov	arg03, #12
1d1c0     0B 00 00 FF 
1d1c4     CC E4 05 F1 | 	add	objptr, ##5836
1d1c8     B8 91 B0 FD | 	call	#_psram_spin2_write
1d1cc     0B 00 00 FF 
1d1d0     CC E4 85 F1 | 	sub	objptr, ##5836
1d1d4     4C 01 90 FD | 	jmp	#LR__2312
1d1d8                 | LR__2300
1d1d8     30 4E 05 F1 | 	add	fp, #48
1d1dc     A7 12 02 FB | 	rdlong	arg01, fp
1d1e0     30 4E 85 F1 | 	sub	fp, #48
1d1e4     A7 14 02 FB | 	rdlong	arg02, fp
1d1e8     98 65 B0 FD | 	call	#_pspoke
1d1ec     34 01 90 FD | 	jmp	#LR__2312
1d1f0                 | LR__2301
1d1f0     30 4E 05 F1 | 	add	fp, #48
1d1f4     A7 12 02 FB | 	rdlong	arg01, fp
1d1f8     30 4E 85 F1 | 	sub	fp, #48
1d1fc     A7 14 02 FB | 	rdlong	arg02, fp
1d200     80 65 B0 FD | 	call	#_pspoke
1d204     1C 01 90 FD | 	jmp	#LR__2312
1d208                 | LR__2302
1d208     30 4E 05 F1 | 	add	fp, #48
1d20c     A7 12 02 FB | 	rdlong	arg01, fp
1d210     30 4E 85 F1 | 	sub	fp, #48
1d214     A7 14 02 FB | 	rdlong	arg02, fp
1d218     68 65 B0 FD | 	call	#_pspoke
1d21c     30 4E 05 F1 | 	add	fp, #48
1d220     A7 12 02 FB | 	rdlong	arg01, fp
1d224     30 4E 85 F1 | 	sub	fp, #48
1d228     01 12 06 F1 | 	add	arg01, #1
1d22c     A7 14 02 FB | 	rdlong	arg02, fp
1d230     08 14 46 F0 | 	shr	arg02, #8
1d234     4C 65 B0 FD | 	call	#_pspoke
1d238     E8 00 90 FD | 	jmp	#LR__2312
1d23c                 | LR__2303
1d23c     30 4E 05 F1 | 	add	fp, #48
1d240     A7 12 02 FB | 	rdlong	arg01, fp
1d244     30 4E 85 F1 | 	sub	fp, #48
1d248     A7 14 02 FB | 	rdlong	arg02, fp
1d24c     34 65 B0 FD | 	call	#_pspoke
1d250     30 4E 05 F1 | 	add	fp, #48
1d254     A7 12 02 FB | 	rdlong	arg01, fp
1d258     30 4E 85 F1 | 	sub	fp, #48
1d25c     01 12 06 F1 | 	add	arg01, #1
1d260     A7 14 02 FB | 	rdlong	arg02, fp
1d264     08 14 46 F0 | 	shr	arg02, #8
1d268     18 65 B0 FD | 	call	#_pspoke
1d26c     B4 00 90 FD | 	jmp	#LR__2312
1d270                 | LR__2304
1d270     30 4E 05 F1 | 	add	fp, #48
1d274     A7 12 02 FB | 	rdlong	arg01, fp
1d278     30 4E 85 F1 | 	sub	fp, #48
1d27c     A7 14 02 FB | 	rdlong	arg02, fp
1d280     70 64 B0 FD | 	call	#_pslpoke
1d284     9C 00 90 FD | 	jmp	#LR__2312
1d288                 | LR__2305
1d288     30 4E 05 F1 | 	add	fp, #48
1d28c     A7 12 02 FB | 	rdlong	arg01, fp
1d290     30 4E 85 F1 | 	sub	fp, #48
1d294     A7 14 02 FB | 	rdlong	arg02, fp
1d298     58 64 B0 FD | 	call	#_pslpoke
1d29c     84 00 90 FD | 	jmp	#LR__2312
1d2a0                 | LR__2306
1d2a0     30 4E 05 F1 | 	add	fp, #48
1d2a4     A7 12 02 FB | 	rdlong	arg01, fp
1d2a8     30 4E 85 F1 | 	sub	fp, #48
1d2ac     A7 14 02 FB | 	rdlong	arg02, fp
1d2b0     40 64 B0 FD | 	call	#_pslpoke
1d2b4     6C 00 90 FD | 	jmp	#LR__2312
1d2b8                 | LR__2307
1d2b8     30 4E 05 F1 | 	add	fp, #48
1d2bc     A7 12 02 FB | 	rdlong	arg01, fp
1d2c0     30 4E 85 F1 | 	sub	fp, #48
1d2c4     A7 14 02 FB | 	rdlong	arg02, fp
1d2c8     28 64 B0 FD | 	call	#_pslpoke
1d2cc     54 00 90 FD | 	jmp	#LR__2312
1d2d0                 | LR__2308
1d2d0     30 4E 05 F1 | 	add	fp, #48
1d2d4     A7 12 02 FB | 	rdlong	arg01, fp
1d2d8     30 4E 85 F1 | 	sub	fp, #48
1d2dc     A7 14 02 FB | 	rdlong	arg02, fp
1d2e0     10 64 B0 FD | 	call	#_pslpoke
1d2e4     3C 00 90 FD | 	jmp	#LR__2312
1d2e8                 | LR__2309
1d2e8     30 4E 05 F1 | 	add	fp, #48
1d2ec     A7 12 02 FB | 	rdlong	arg01, fp
1d2f0     30 4E 85 F1 | 	sub	fp, #48
1d2f4     A7 14 02 FB | 	rdlong	arg02, fp
1d2f8     F8 63 B0 FD | 	call	#_pslpoke
1d2fc     24 00 90 FD | 	jmp	#LR__2312
1d300                 | LR__2310
1d300     30 4E 05 F1 | 	add	fp, #48
1d304     A7 12 02 FB | 	rdlong	arg01, fp
1d308     30 4E 85 F1 | 	sub	fp, #48
1d30c     A7 14 02 FB | 	rdlong	arg02, fp
1d310     E0 63 B0 FD | 	call	#_pslpoke
1d314     0C 00 90 FD | 	jmp	#LR__2312
1d318                 | LR__2311
1d318     32 12 06 F6 | 	mov	arg01, #50
1d31c     00 14 06 F6 | 	mov	arg02, #0
1d320     30 62 B0 FD | 	call	#_printerror
1d324                 | LR__2312
1d324                 | LR__2313
1d324     A7 F0 03 F6 | 	mov	ptra, fp
1d328     B2 00 A0 FD | 	call	#popregs_
1d32c                 | _do_assign_ret
1d32c     2D 00 64 FD | 	ret
1d330                 | 
1d330                 | ' 
1d330                 | ' 
1d330                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1d330                 | ' 
1d330                 | ' sub do_getvar
1d330                 | _do_getvar
1d330     04 4A 05 F6 | 	mov	COUNT_, #4
1d334     A8 00 A0 FD | 	call	#pushregs_
1d338     3C F0 07 F1 | 	add	ptra, #60
1d33c                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1d33c     4A 00 00 FF 
1d340     80 E4 05 F1 | 	add	objptr, ##38016
1d344     F2 26 02 FB | 	rdlong	local01, objptr
1d348     13 17 02 F6 | 	mov	arg03, local01
1d34c     01 16 66 F0 | 	shl	arg03, #1
1d350     13 17 02 F1 | 	add	arg03, local01
1d354     02 16 66 F0 | 	shl	arg03, #2
1d358     03 00 00 FF 
1d35c     04 E4 85 F1 | 	sub	objptr, ##1540
1d360     F2 16 02 F1 | 	add	arg03, objptr
1d364     04 16 06 F1 | 	add	arg03, #4
1d368     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1d36c     47 00 00 FF 
1d370     7C E4 85 F1 | 	sub	objptr, ##36476
1d374     C4 00 90 5D |  if_ne	jmp	#LR__2321
1d378     4A 00 00 FF 
1d37c     80 E4 05 F1 | 	add	objptr, ##38016
1d380     F2 26 02 FB | 	rdlong	local01, objptr
1d384     13 13 02 F6 | 	mov	arg01, local01
1d388     01 12 66 F0 | 	shl	arg01, #1
1d38c     13 13 02 F1 | 	add	arg01, local01
1d390     02 12 66 F0 | 	shl	arg01, #2
1d394     03 00 00 FF 
1d398     04 E4 85 F1 | 	sub	objptr, ##1540
1d39c     F2 12 02 F1 | 	add	arg01, objptr
1d3a0     09 27 02 FB | 	rdlong	local01, arg01
1d3a4     04 26 66 F0 | 	shl	local01, #4
1d3a8     32 00 00 FF 
1d3ac     84 E4 85 F1 | 	sub	objptr, ##25732
1d3b0     F2 26 02 F1 | 	add	local01, objptr
1d3b4     04 26 06 F1 | 	add	local01, #4
1d3b8     13 13 02 FB | 	rdlong	arg01, local01
1d3bc     04 26 06 F1 | 	add	local01, #4
1d3c0     13 27 02 FB | 	rdlong	local01, local01
1d3c4     A7 12 62 FC | 	wrlong	arg01, fp
1d3c8     04 4E 05 F1 | 	add	fp, #4
1d3cc     A7 26 62 FC | 	wrlong	local01, fp
1d3d0     35 00 00 FF 
1d3d4     88 E4 05 F1 | 	add	objptr, ##27272
1d3d8     F2 26 02 FB | 	rdlong	local01, objptr
1d3dc     13 13 02 F6 | 	mov	arg01, local01
1d3e0     01 12 66 F0 | 	shl	arg01, #1
1d3e4     13 13 02 F1 | 	add	arg01, local01
1d3e8     02 12 66 F0 | 	shl	arg01, #2
1d3ec     03 00 00 FF 
1d3f0     04 E4 85 F1 | 	sub	objptr, ##1540
1d3f4     F2 12 02 F1 | 	add	arg01, objptr
1d3f8     09 27 02 FB | 	rdlong	local01, arg01
1d3fc     04 26 66 F0 | 	shl	local01, #4
1d400     32 00 00 FF 
1d404     84 E4 85 F1 | 	sub	objptr, ##25732
1d408     F2 26 02 F1 | 	add	local01, objptr
1d40c     0C 26 06 F1 | 	add	local01, #12
1d410     13 27 02 FB | 	rdlong	local01, local01
1d414     04 4E 05 F1 | 	add	fp, #4
1d418     A7 26 62 FC | 	wrlong	local01, fp
1d41c                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1d41c                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1d41c                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1d41c     08 4E 85 F1 | 	sub	fp, #8
1d420     00 27 16 F2 | 	cmp	local01, #256 wc
1d424     14 00 00 FF 
1d428     F8 E5 85 F1 | 	sub	objptr, ##10744
1d42c     0C 00 90 3D |  if_ae	jmp	#LR__2320
1d430     A7 12 02 F6 | 	mov	arg01, fp
1d434     24 03 BF FD | 	call	#_push
1d438     A0 04 90 FD | 	jmp	#LR__2342
1d43c                 | LR__2320
1d43c                 | LR__2321
1d43c     4A 00 00 FF 
1d440     80 E4 05 F1 | 	add	objptr, ##38016
1d444     F2 16 02 FB | 	rdlong	arg03, objptr
1d448     0B 15 02 F6 | 	mov	arg02, arg03
1d44c     01 14 66 F0 | 	shl	arg02, #1
1d450     0B 15 02 F1 | 	add	arg02, arg03
1d454     02 14 66 F0 | 	shl	arg02, #2
1d458     03 00 00 FF 
1d45c     04 E4 85 F1 | 	sub	objptr, ##1540
1d460     F2 14 02 F1 | 	add	arg02, objptr
1d464     0A 17 02 FB | 	rdlong	arg03, arg02
1d468     04 16 66 F0 | 	shl	arg03, #4
1d46c     32 00 00 FF 
1d470     84 E4 85 F1 | 	sub	objptr, ##25732
1d474     F2 16 02 F1 | 	add	arg03, objptr
1d478     04 16 06 F1 | 	add	arg03, #4
1d47c     0B 13 02 FB | 	rdlong	arg01, arg03
1d480     0C 4E 05 F1 | 	add	fp, #12
1d484     A7 12 62 FC | 	wrlong	arg01, fp
1d488     0C 4E 85 F1 | 	sub	fp, #12
1d48c     14 00 00 FF 
1d490     F8 E5 85 F1 | 	sub	objptr, ##10744
1d494     8C 63 B0 FD | 	call	#_pslpeek
1d498     FD FA 31 F9 | 	getword	result1, result1, #0
1d49c     10 4E 05 F1 | 	add	fp, #16
1d4a0     A7 FA 61 FC | 	wrlong	result1, fp
1d4a4     4A 00 00 FF 
1d4a8     80 E4 05 F1 | 	add	objptr, ##38016
1d4ac     F2 16 02 FB | 	rdlong	arg03, objptr
1d4b0     0B 15 02 F6 | 	mov	arg02, arg03
1d4b4     01 14 66 F0 | 	shl	arg02, #1
1d4b8     0B 15 02 F1 | 	add	arg02, arg03
1d4bc     02 14 66 F0 | 	shl	arg02, #2
1d4c0     03 00 00 FF 
1d4c4     04 E4 85 F1 | 	sub	objptr, ##1540
1d4c8     F2 14 02 F1 | 	add	arg02, objptr
1d4cc     04 14 06 F1 | 	add	arg02, #4
1d4d0     0A 17 02 FB | 	rdlong	arg03, arg02
1d4d4     04 4E 05 F1 | 	add	fp, #4
1d4d8     A7 16 62 FC | 	wrlong	arg03, fp
1d4dc     08 4E 85 F1 | 	sub	fp, #8
1d4e0     A7 12 02 FB | 	rdlong	arg01, fp
1d4e4     0C 4E 85 F1 | 	sub	fp, #12
1d4e8     02 12 06 F1 | 	add	arg01, #2
1d4ec     47 00 00 FF 
1d4f0     7C E4 85 F1 | 	sub	objptr, ##36476
1d4f4     D4 62 B0 FD | 	call	#_pspeek
1d4f8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d4fc     18 4E 05 F1 | 	add	fp, #24
1d500     A7 FA 61 FC | 	wrlong	result1, fp
1d504     0C 4E 85 F1 | 	sub	fp, #12
1d508     A7 12 02 FB | 	rdlong	arg01, fp
1d50c     0C 4E 85 F1 | 	sub	fp, #12
1d510     04 12 06 F1 | 	add	arg01, #4
1d514     0C 63 B0 FD | 	call	#_pslpeek
1d518     1C 4E 05 F1 | 	add	fp, #28
1d51c     A7 FA 61 FC | 	wrlong	result1, fp
1d520     10 4E 85 F1 | 	sub	fp, #16
1d524     A7 12 02 FB | 	rdlong	arg01, fp
1d528     0C 4E 85 F1 | 	sub	fp, #12
1d52c     08 12 06 F1 | 	add	arg01, #8
1d530     F0 62 B0 FD | 	call	#_pslpeek
1d534     20 4E 05 F1 | 	add	fp, #32
1d538     A7 FA 61 FC | 	wrlong	result1, fp
1d53c     14 4E 85 F1 | 	sub	fp, #20
1d540     A7 12 02 FB | 	rdlong	arg01, fp
1d544     0C 4E 85 F1 | 	sub	fp, #12
1d548     0C 12 06 F1 | 	add	arg01, #12
1d54c     D4 62 B0 FD | 	call	#_pslpeek
1d550     24 4E 05 F1 | 	add	fp, #36
1d554     A7 FA 61 FC | 	wrlong	result1, fp
1d558                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1d558                 | ' esize=pspeek(arrptr+2)
1d558                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1d558                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1d558                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1d558                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1d558     10 4E 85 F1 | 	sub	fp, #16
1d55c     A7 16 02 FB | 	rdlong	arg03, fp
1d560     14 4E 85 F1 | 	sub	fp, #20
1d564     03 16 16 F2 | 	cmp	arg03, #3 wc
1d568     38 00 90 CD |  if_b	jmp	#LR__2322
1d56c     54 01 BF FD | 	call	#_pop
1d570     FF 16 02 F6 | 	mov	arg03, result3
1d574     A7 FA 61 FC | 	wrlong	result1, fp
1d578     04 4E 05 F1 | 	add	fp, #4
1d57c     A7 FC 61 FC | 	wrlong	result2, fp
1d580     04 4E 05 F1 | 	add	fp, #4
1d584     A7 16 62 FC | 	wrlong	arg03, fp
1d588     08 4E 85 F1 | 	sub	fp, #8
1d58c     A7 12 02 F6 | 	mov	arg01, fp
1d590     14 03 BF FD | 	call	#_converttoint
1d594     30 4E 05 F1 | 	add	fp, #48
1d598     A7 FA 61 FC | 	wrlong	result1, fp
1d59c     30 4E 85 F1 | 	sub	fp, #48
1d5a0     0C 00 90 FD | 	jmp	#LR__2323
1d5a4                 | LR__2322
1d5a4     30 4E 05 F1 | 	add	fp, #48
1d5a8     A7 00 68 FC | 	wrlong	#0, fp
1d5ac     30 4E 85 F1 | 	sub	fp, #48
1d5b0                 | LR__2323
1d5b0                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1d5b0     14 4E 05 F1 | 	add	fp, #20
1d5b4     A7 16 02 FB | 	rdlong	arg03, fp
1d5b8     14 4E 85 F1 | 	sub	fp, #20
1d5bc     02 16 16 F2 | 	cmp	arg03, #2 wc
1d5c0     38 00 90 CD |  if_b	jmp	#LR__2324
1d5c4     FC 00 BF FD | 	call	#_pop
1d5c8     FF 16 02 F6 | 	mov	arg03, result3
1d5cc     A7 FA 61 FC | 	wrlong	result1, fp
1d5d0     04 4E 05 F1 | 	add	fp, #4
1d5d4     A7 FC 61 FC | 	wrlong	result2, fp
1d5d8     04 4E 05 F1 | 	add	fp, #4
1d5dc     A7 16 62 FC | 	wrlong	arg03, fp
1d5e0     08 4E 85 F1 | 	sub	fp, #8
1d5e4     A7 12 02 F6 | 	mov	arg01, fp
1d5e8     BC 02 BF FD | 	call	#_converttoint
1d5ec     2C 4E 05 F1 | 	add	fp, #44
1d5f0     A7 FA 61 FC | 	wrlong	result1, fp
1d5f4     2C 4E 85 F1 | 	sub	fp, #44
1d5f8     0C 00 90 FD | 	jmp	#LR__2325
1d5fc                 | LR__2324
1d5fc     2C 4E 05 F1 | 	add	fp, #44
1d600     A7 00 68 FC | 	wrlong	#0, fp
1d604     2C 4E 85 F1 | 	sub	fp, #44
1d608                 | LR__2325
1d608                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1d608     14 4E 05 F1 | 	add	fp, #20
1d60c     A7 16 02 FB | 	rdlong	arg03, fp
1d610     14 4E 85 F1 | 	sub	fp, #20
1d614     01 16 16 F2 | 	cmp	arg03, #1 wc
1d618     38 00 90 CD |  if_b	jmp	#LR__2326
1d61c     A4 00 BF FD | 	call	#_pop
1d620     FF 16 02 F6 | 	mov	arg03, result3
1d624     A7 FA 61 FC | 	wrlong	result1, fp
1d628     04 4E 05 F1 | 	add	fp, #4
1d62c     A7 FC 61 FC | 	wrlong	result2, fp
1d630     04 4E 05 F1 | 	add	fp, #4
1d634     A7 16 62 FC | 	wrlong	arg03, fp
1d638     08 4E 85 F1 | 	sub	fp, #8
1d63c     A7 12 02 F6 | 	mov	arg01, fp
1d640     64 02 BF FD | 	call	#_converttoint
1d644     28 4E 05 F1 | 	add	fp, #40
1d648     A7 FA 61 FC | 	wrlong	result1, fp
1d64c     28 4E 85 F1 | 	sub	fp, #40
1d650     0C 00 90 FD | 	jmp	#LR__2327
1d654                 | LR__2326
1d654     28 4E 05 F1 | 	add	fp, #40
1d658     A7 00 68 FC | 	wrlong	#0, fp
1d65c     28 4E 85 F1 | 	sub	fp, #40
1d660                 | LR__2327
1d660     0C 4E 05 F1 | 	add	fp, #12
1d664     A7 28 02 FB | 	rdlong	local02, fp
1d668     1C 4E 05 F1 | 	add	fp, #28
1d66c     A7 2A 02 FB | 	rdlong	local03, fp
1d670     04 4E 05 F1 | 	add	fp, #4
1d674     A7 FC 01 FB | 	rdlong	result2, fp
1d678     10 4E 85 F1 | 	sub	fp, #16
1d67c     A7 FE 01 FB | 	rdlong	result3, fp
1d680     FF FC 01 FD | 	qmul	result2, result3
1d684     10 28 06 F1 | 	add	local02, #16
1d688     14 4E 05 F1 | 	add	fp, #20
1d68c     A7 FC 01 FB | 	rdlong	result2, fp
1d690     18 FA 61 FD | 	getqx	result1
1d694     FF FC 01 FD | 	qmul	result2, result3
1d698     FD 2A 02 F1 | 	add	local03, result1
1d69c     10 4E 85 F1 | 	sub	fp, #16
1d6a0     A7 FE 01 FB | 	rdlong	result3, fp
1d6a4     18 FC 61 FD | 	getqx	result2
1d6a8     FF FC 01 FD | 	qmul	result2, result3
1d6ac     08 4E 85 F1 | 	sub	fp, #8
1d6b0     A7 FE 01 FB | 	rdlong	result3, fp
1d6b4     18 FC 61 FD | 	getqx	result2
1d6b8     FE 2A 02 F1 | 	add	local03, result2
1d6bc     FF 2A 02 FD | 	qmul	local03, result3
1d6c0     1C 4E 05 F1 | 	add	fp, #28
1d6c4                 | ' 
1d6c4                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1d6c4                 | ' 
1d6c4                 | ' select case vartype
1d6c4     18 FC 61 FD | 	getqx	result2
1d6c8     FE 28 02 F1 | 	add	local02, result2
1d6cc     A7 28 62 FC | 	wrlong	local02, fp
1d6d0     24 4E 85 F1 | 	sub	fp, #36
1d6d4     A7 2C 02 FB | 	rdlong	local04, fp
1d6d8     10 4E 85 F1 | 	sub	fp, #16
1d6dc     00 2D 86 F1 | 	sub	local04, #256
1d6e0     0C 2C 26 F3 | 	fle	local04, #12
1d6e4     30 2C 62 FD | 	jmprel	local04
1d6e8                 | LR__2328
1d6e8     30 00 90 FD | 	jmp	#LR__2329
1d6ec     58 00 90 FD | 	jmp	#LR__2330
1d6f0     8C 00 90 FD | 	jmp	#LR__2331
1d6f4     AC 00 90 FD | 	jmp	#LR__2332
1d6f8     E8 00 90 FD | 	jmp	#LR__2333
1d6fc     08 01 90 FD | 	jmp	#LR__2334
1d700     24 01 90 FD | 	jmp	#LR__2335
1d704     40 01 90 FD | 	jmp	#LR__2336
1d708     50 01 90 FD | 	jmp	#LR__2337
1d70c     60 01 90 FD | 	jmp	#LR__2338
1d710     7C 01 90 FD | 	jmp	#LR__2339
1d714     8C 01 90 FD | 	jmp	#LR__2340
1d718     B8 01 90 FD | 	jmp	#LR__2341
1d71c                 | LR__2329
1d71c     A7 12 02 F6 | 	mov	arg01, fp
1d720     34 4E 05 F1 | 	add	fp, #52
1d724     A7 14 02 FB | 	rdlong	arg02, fp
1d728     34 4E 85 F1 | 	sub	fp, #52
1d72c     0C 16 06 F6 | 	mov	arg03, #12
1d730     0B 00 00 FF 
1d734     CC E4 05 F1 | 	add	objptr, ##5836
1d738     AC 8B B0 FD | 	call	#_psram_spin2_read1
1d73c     0B 00 00 FF 
1d740     CC E4 85 F1 | 	sub	objptr, ##5836
1d744     8C 01 90 FD | 	jmp	#LR__2341
1d748                 | LR__2330
1d748     08 4E 05 F1 | 	add	fp, #8
1d74c     A7 38 68 FC | 	wrlong	#28, fp
1d750     2C 4E 05 F1 | 	add	fp, #44
1d754     A7 12 02 FB | 	rdlong	arg01, fp
1d758     34 4E 85 F1 | 	sub	fp, #52
1d75c     6C 60 B0 FD | 	call	#_pspeek
1d760     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d764     A7 FA 61 FC | 	wrlong	result1, fp
1d768     80 FA 15 F2 | 	cmp	result1, #128 wc
1d76c     00 27 66 36 |  if_ae	neg	local01, #256
1d770     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1d774     15 27 42 35 |  if_ae	or	local01, local03
1d778     A7 26 62 3C |  if_ae	wrlong	local01, fp
1d77c     54 01 90 FD | 	jmp	#LR__2341
1d780                 | LR__2331
1d780     08 4E 05 F1 | 	add	fp, #8
1d784     A7 3A 68 FC | 	wrlong	#29, fp
1d788     2C 4E 05 F1 | 	add	fp, #44
1d78c     A7 12 02 FB | 	rdlong	arg01, fp
1d790     34 4E 85 F1 | 	sub	fp, #52
1d794     34 60 B0 FD | 	call	#_pspeek
1d798     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d79c     A7 FA 61 FC | 	wrlong	result1, fp
1d7a0     30 01 90 FD | 	jmp	#LR__2341
1d7a4                 | LR__2332
1d7a4     08 4E 05 F1 | 	add	fp, #8
1d7a8     A7 38 68 FC | 	wrlong	#28, fp
1d7ac     2C 4E 05 F1 | 	add	fp, #44
1d7b0     A7 12 02 FB | 	rdlong	arg01, fp
1d7b4     34 4E 85 F1 | 	sub	fp, #52
1d7b8     68 60 B0 FD | 	call	#_pslpeek
1d7bc     FD FA 31 F9 | 	getword	result1, result1, #0
1d7c0     A7 FA 61 FC | 	wrlong	result1, fp
1d7c4     40 00 00 FF 
1d7c8     00 FA 15 F2 | 	cmp	result1, ##32768 wc
1d7cc     FF 7F 00 3F 
1d7d0     00 27 06 36 |  if_ae	mov	local01, ##16776960
1d7d4     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1d7d8     15 27 42 35 |  if_ae	or	local01, local03
1d7dc     A7 26 62 3C |  if_ae	wrlong	local01, fp
1d7e0     F0 00 90 FD | 	jmp	#LR__2341
1d7e4                 | LR__2333
1d7e4     08 4E 05 F1 | 	add	fp, #8
1d7e8     A7 3A 68 FC | 	wrlong	#29, fp
1d7ec     2C 4E 05 F1 | 	add	fp, #44
1d7f0     A7 12 02 FB | 	rdlong	arg01, fp
1d7f4     34 4E 85 F1 | 	sub	fp, #52
1d7f8     28 60 B0 FD | 	call	#_pslpeek
1d7fc     FD FA 31 F9 | 	getword	result1, result1, #0
1d800     A7 FA 61 FC | 	wrlong	result1, fp
1d804     CC 00 90 FD | 	jmp	#LR__2341
1d808                 | LR__2334
1d808     08 4E 05 F1 | 	add	fp, #8
1d80c     A7 38 68 FC | 	wrlong	#28, fp
1d810     2C 4E 05 F1 | 	add	fp, #44
1d814     A7 12 02 FB | 	rdlong	arg01, fp
1d818     34 4E 85 F1 | 	sub	fp, #52
1d81c     04 60 B0 FD | 	call	#_pslpeek
1d820     A7 FA 61 FC | 	wrlong	result1, fp
1d824     AC 00 90 FD | 	jmp	#LR__2341
1d828                 | LR__2335
1d828     08 4E 05 F1 | 	add	fp, #8
1d82c     A7 3A 68 FC | 	wrlong	#29, fp
1d830     2C 4E 05 F1 | 	add	fp, #44
1d834     A7 12 02 FB | 	rdlong	arg01, fp
1d838     34 4E 85 F1 | 	sub	fp, #52
1d83c     E4 5F B0 FD | 	call	#_pslpeek
1d840     A7 FA 61 FC | 	wrlong	result1, fp
1d844     8C 00 90 FD | 	jmp	#LR__2341
1d848                 | LR__2336
1d848     08 4E 05 F1 | 	add	fp, #8
1d84c     A7 FE 69 FC | 	wrlong	#255, fp
1d850     08 4E 85 F1 | 	sub	fp, #8
1d854     A7 60 68 FC | 	wrlong	#48, fp
1d858     78 00 90 FD | 	jmp	#LR__2341
1d85c                 | LR__2337
1d85c     08 4E 05 F1 | 	add	fp, #8
1d860     A7 FE 69 FC | 	wrlong	#255, fp
1d864     08 4E 85 F1 | 	sub	fp, #8
1d868     A7 60 68 FC | 	wrlong	#48, fp
1d86c     64 00 90 FD | 	jmp	#LR__2341
1d870                 | LR__2338
1d870     08 4E 05 F1 | 	add	fp, #8
1d874     A7 3C 68 FC | 	wrlong	#30, fp
1d878     2C 4E 05 F1 | 	add	fp, #44
1d87c     A7 12 02 FB | 	rdlong	arg01, fp
1d880     34 4E 85 F1 | 	sub	fp, #52
1d884     9C 5F B0 FD | 	call	#_pslpeek
1d888     A7 FA 61 FC | 	wrlong	result1, fp
1d88c     44 00 90 FD | 	jmp	#LR__2341
1d890                 | LR__2339
1d890     08 4E 05 F1 | 	add	fp, #8
1d894     A7 FE 69 FC | 	wrlong	#255, fp
1d898     08 4E 85 F1 | 	sub	fp, #8
1d89c     A7 60 68 FC | 	wrlong	#48, fp
1d8a0     30 00 90 FD | 	jmp	#LR__2341
1d8a4                 | LR__2340
1d8a4     08 4E 05 F1 | 	add	fp, #8
1d8a8     A7 3E 68 FC | 	wrlong	#31, fp
1d8ac     2C 4E 05 F1 | 	add	fp, #44
1d8b0     A7 12 02 FB | 	rdlong	arg01, fp
1d8b4     34 4E 85 F1 | 	sub	fp, #52
1d8b8     68 5F B0 FD | 	call	#_pslpeek
1d8bc     A7 FA 61 FC | 	wrlong	result1, fp
1d8c0     00 04 00 FF 
1d8c4     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1d8c8     08 4E 05 31 |  if_ae	add	fp, #8
1d8cc     A7 56 68 3C |  if_ae	wrlong	#43, fp
1d8d0     08 4E 85 31 |  if_ae	sub	fp, #8
1d8d4                 | LR__2341
1d8d4     A7 12 02 F6 | 	mov	arg01, fp
1d8d8     80 FE BE FD | 	call	#_push
1d8dc                 | LR__2342
1d8dc     A7 F0 03 F6 | 	mov	ptra, fp
1d8e0     B2 00 A0 FD | 	call	#popregs_
1d8e4                 | _do_getvar_ret
1d8e4     2D 00 64 FD | 	ret
1d8e8                 | 
1d8e8                 | ' 
1d8e8                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1d8e8                 | ' 
1d8e8                 | ' sub do_getaddr
1d8e8                 | _do_getaddr
1d8e8     01 4A 05 F6 | 	mov	COUNT_, #1
1d8ec     A8 00 A0 FD | 	call	#pushregs_
1d8f0     38 F0 07 F1 | 	add	ptra, #56
1d8f4                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1d8f4                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1d8f4     4A 00 00 FF 
1d8f8     80 E4 05 F1 | 	add	objptr, ##38016
1d8fc     F2 12 02 FB | 	rdlong	arg01, objptr
1d900     09 FD 01 F6 | 	mov	result2, arg01
1d904     01 FC 65 F0 | 	shl	result2, #1
1d908     09 FD 01 F1 | 	add	result2, arg01
1d90c     02 FC 65 F0 | 	shl	result2, #2
1d910     03 00 00 FF 
1d914     04 E4 85 F1 | 	sub	objptr, ##1540
1d918     F2 FC 01 F1 | 	add	result2, objptr
1d91c     04 FC 05 F1 | 	add	result2, #4
1d920     FE FC 09 FB | 	rdlong	result2, result2 wz
1d924     47 00 00 FF 
1d928     7C E4 85 F1 | 	sub	objptr, ##36476
1d92c     10 01 90 5D |  if_ne	jmp	#LR__2350
1d930     4A 00 00 FF 
1d934     80 E4 05 F1 | 	add	objptr, ##38016
1d938     F2 12 02 FB | 	rdlong	arg01, objptr
1d93c     09 FD 01 F6 | 	mov	result2, arg01
1d940     01 FC 65 F0 | 	shl	result2, #1
1d944     09 FD 01 F1 | 	add	result2, arg01
1d948     02 FC 65 F0 | 	shl	result2, #2
1d94c     03 00 00 FF 
1d950     04 E4 85 F1 | 	sub	objptr, ##1540
1d954     F2 FC 01 F1 | 	add	result2, objptr
1d958     FE 12 02 FB | 	rdlong	arg01, result2
1d95c     04 12 66 F0 | 	shl	arg01, #4
1d960     32 00 00 FF 
1d964     84 E4 85 F1 | 	sub	objptr, ##25732
1d968     F2 12 02 F1 | 	add	arg01, objptr
1d96c     0C 12 06 F1 | 	add	arg01, #12
1d970     09 13 02 FB | 	rdlong	arg01, arg01
1d974     08 4E 05 F1 | 	add	fp, #8
1d978     A7 12 62 FC | 	wrlong	arg01, fp
1d97c                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1d97c                 | '    if t1.result_type>=array_no_type then goto 2200
1d97c     08 4E 85 F1 | 	sub	fp, #8
1d980     00 13 16 F2 | 	cmp	arg01, #256 wc
1d984     14 00 00 FF 
1d988     F8 E5 85 F1 | 	sub	objptr, ##10744
1d98c     B0 00 90 3D |  if_ae	jmp	#LR__2351
1d990     4A 00 00 FF 
1d994     80 E4 05 F1 | 	add	objptr, ##38016
1d998     F2 12 02 FB | 	rdlong	arg01, objptr
1d99c     09 FF 01 F6 | 	mov	result3, arg01
1d9a0     01 FE 65 F0 | 	shl	result3, #1
1d9a4     09 FF 01 F1 | 	add	result3, arg01
1d9a8     02 FE 65 F0 | 	shl	result3, #2
1d9ac     03 00 00 FF 
1d9b0     04 E4 85 F1 | 	sub	objptr, ##1540
1d9b4     F2 FE 01 F1 | 	add	result3, objptr
1d9b8     FF FA 01 FB | 	rdlong	result1, result3
1d9bc     04 FA 65 F0 | 	shl	result1, #4
1d9c0     32 00 00 FF 
1d9c4     84 E4 85 F1 | 	sub	objptr, ##25732
1d9c8     F2 FA 01 F1 | 	add	result1, objptr
1d9cc     04 FA 05 F1 | 	add	result1, #4
1d9d0     A7 FA 61 FC | 	wrlong	result1, fp
1d9d4     35 00 00 FF 
1d9d8     88 E4 05 F1 | 	add	objptr, ##27272
1d9dc     F2 FE 01 FB | 	rdlong	result3, objptr
1d9e0     FF 12 02 F6 | 	mov	arg01, result3
1d9e4     01 12 66 F0 | 	shl	arg01, #1
1d9e8     FF 12 02 F1 | 	add	arg01, result3
1d9ec     02 12 66 F0 | 	shl	arg01, #2
1d9f0     03 00 00 FF 
1d9f4     04 E4 85 F1 | 	sub	objptr, ##1540
1d9f8     F2 12 02 F1 | 	add	arg01, objptr
1d9fc     09 13 02 FB | 	rdlong	arg01, arg01
1da00     04 12 66 F0 | 	shl	arg01, #4
1da04     32 00 00 FF 
1da08     84 E4 85 F1 | 	sub	objptr, ##25732
1da0c     F2 12 02 F1 | 	add	arg01, objptr
1da10     0C 12 06 F1 | 	add	arg01, #12
1da14     09 13 02 FB | 	rdlong	arg01, arg01
1da18     04 4E 05 F1 | 	add	fp, #4
1da1c     A7 12 62 FC | 	wrlong	arg01, fp
1da20     04 4E 05 F1 | 	add	fp, #4
1da24     A7 3A 68 FC | 	wrlong	#29, fp
1da28     08 4E 85 F1 | 	sub	fp, #8
1da2c     A7 12 02 F6 | 	mov	arg01, fp
1da30     14 00 00 FF 
1da34     F8 E5 85 F1 | 	sub	objptr, ##10744
1da38     20 FD BE FD | 	call	#_push
1da3c                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1da3c                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1da3c                 | '   t1.result_type=result_uint
1da3c                 | '   push t1 : return
1da3c     2C 03 90 FD | 	jmp	#LR__2360
1da40                 | LR__2350
1da40                 | LR__2351
1da40     4A 00 00 FF 
1da44     80 E4 05 F1 | 	add	objptr, ##38016
1da48     F2 FE 01 FB | 	rdlong	result3, objptr
1da4c     FF FC 01 F6 | 	mov	result2, result3
1da50     01 FC 65 F0 | 	shl	result2, #1
1da54     FF FC 01 F1 | 	add	result2, result3
1da58     02 FC 65 F0 | 	shl	result2, #2
1da5c     03 00 00 FF 
1da60     04 E4 85 F1 | 	sub	objptr, ##1540
1da64     F2 FC 01 F1 | 	add	result2, objptr
1da68     FE FE 01 FB | 	rdlong	result3, result2
1da6c     04 FE 65 F0 | 	shl	result3, #4
1da70     32 00 00 FF 
1da74     84 E4 85 F1 | 	sub	objptr, ##25732
1da78     F2 FE 01 F1 | 	add	result3, objptr
1da7c     04 FE 05 F1 | 	add	result3, #4
1da80     FF FE 01 FB | 	rdlong	result3, result3
1da84     0C 4E 05 F1 | 	add	fp, #12
1da88     A7 FE 61 FC | 	wrlong	result3, fp
1da8c     35 00 00 FF 
1da90     88 E4 05 F1 | 	add	objptr, ##27272
1da94     F2 FE 01 FB | 	rdlong	result3, objptr
1da98     FF 12 02 F6 | 	mov	arg01, result3
1da9c     01 12 66 F0 | 	shl	arg01, #1
1daa0     FF 12 02 F1 | 	add	arg01, result3
1daa4     02 12 66 F0 | 	shl	arg01, #2
1daa8     03 00 00 FF 
1daac     04 E4 85 F1 | 	sub	objptr, ##1540
1dab0     F2 12 02 F1 | 	add	arg01, objptr
1dab4     09 13 02 FB | 	rdlong	arg01, arg01
1dab8     04 12 66 F0 | 	shl	arg01, #4
1dabc     32 00 00 FF 
1dac0     84 E4 85 F1 | 	sub	objptr, ##25732
1dac4     F2 12 02 F1 | 	add	arg01, objptr
1dac8     0C 12 06 F1 | 	add	arg01, #12
1dacc     09 13 02 FB | 	rdlong	arg01, arg01
1dad0     08 4E 85 F1 | 	sub	fp, #8
1dad4     A7 12 62 FC | 	wrlong	arg01, fp
1dad8     08 4E 05 F1 | 	add	fp, #8
1dadc     A7 12 02 FB | 	rdlong	arg01, fp
1dae0     0C 4E 85 F1 | 	sub	fp, #12
1dae4     14 00 00 FF 
1dae8     F8 E5 85 F1 | 	sub	objptr, ##10744
1daec     34 5D B0 FD | 	call	#_pslpeek
1daf0     FD FA 31 F9 | 	getword	result1, result1, #0
1daf4     10 4E 05 F1 | 	add	fp, #16
1daf8     A7 FA 61 FC | 	wrlong	result1, fp
1dafc     4A 00 00 FF 
1db00     80 E4 05 F1 | 	add	objptr, ##38016
1db04     F2 FE 01 FB | 	rdlong	result3, objptr
1db08     FF 12 02 F6 | 	mov	arg01, result3
1db0c     01 12 66 F0 | 	shl	arg01, #1
1db10     FF 12 02 F1 | 	add	arg01, result3
1db14     02 12 66 F0 | 	shl	arg01, #2
1db18     03 00 00 FF 
1db1c     04 E4 85 F1 | 	sub	objptr, ##1540
1db20     F2 12 02 F1 | 	add	arg01, objptr
1db24     04 12 06 F1 | 	add	arg01, #4
1db28     09 13 02 FB | 	rdlong	arg01, arg01
1db2c     04 4E 05 F1 | 	add	fp, #4
1db30     A7 12 62 FC | 	wrlong	arg01, fp
1db34     08 4E 85 F1 | 	sub	fp, #8
1db38     A7 12 02 FB | 	rdlong	arg01, fp
1db3c     0C 4E 85 F1 | 	sub	fp, #12
1db40     02 12 06 F1 | 	add	arg01, #2
1db44     47 00 00 FF 
1db48     7C E4 85 F1 | 	sub	objptr, ##36476
1db4c     7C 5C B0 FD | 	call	#_pspeek
1db50     FD FA E1 F8 | 	getbyte	result1, result1, #0
1db54     18 4E 05 F1 | 	add	fp, #24
1db58     A7 FA 61 FC | 	wrlong	result1, fp
1db5c     0C 4E 85 F1 | 	sub	fp, #12
1db60     A7 12 02 FB | 	rdlong	arg01, fp
1db64     0C 4E 85 F1 | 	sub	fp, #12
1db68     04 12 06 F1 | 	add	arg01, #4
1db6c     B4 5C B0 FD | 	call	#_pslpeek
1db70     1C 4E 05 F1 | 	add	fp, #28
1db74     A7 FA 61 FC | 	wrlong	result1, fp
1db78     10 4E 85 F1 | 	sub	fp, #16
1db7c     A7 12 02 FB | 	rdlong	arg01, fp
1db80     0C 4E 85 F1 | 	sub	fp, #12
1db84     08 12 06 F1 | 	add	arg01, #8
1db88     98 5C B0 FD | 	call	#_pslpeek
1db8c     20 4E 05 F1 | 	add	fp, #32
1db90     A7 FA 61 FC | 	wrlong	result1, fp
1db94     14 4E 85 F1 | 	sub	fp, #20
1db98     A7 12 02 FB | 	rdlong	arg01, fp
1db9c     0C 4E 85 F1 | 	sub	fp, #12
1dba0     0C 12 06 F1 | 	add	arg01, #12
1dba4     7C 5C B0 FD | 	call	#_pslpeek
1dba8     24 4E 05 F1 | 	add	fp, #36
1dbac     A7 FA 61 FC | 	wrlong	result1, fp
1dbb0                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1dbb0                 | ' esize=pspeek(arrptr+2)
1dbb0                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1dbb0                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1dbb0                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1dbb0                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1dbb0     10 4E 85 F1 | 	sub	fp, #16
1dbb4     A7 12 02 FB | 	rdlong	arg01, fp
1dbb8     14 4E 85 F1 | 	sub	fp, #20
1dbbc     03 12 16 F2 | 	cmp	arg01, #3 wc
1dbc0     34 00 90 CD |  if_b	jmp	#LR__2352
1dbc4     FC FA BE FD | 	call	#_pop
1dbc8     A7 FA 61 FC | 	wrlong	result1, fp
1dbcc     04 4E 05 F1 | 	add	fp, #4
1dbd0     A7 FC 61 FC | 	wrlong	result2, fp
1dbd4     04 4E 05 F1 | 	add	fp, #4
1dbd8     A7 FE 61 FC | 	wrlong	result3, fp
1dbdc     08 4E 85 F1 | 	sub	fp, #8
1dbe0     A7 12 02 F6 | 	mov	arg01, fp
1dbe4     C0 FC BE FD | 	call	#_converttoint
1dbe8     30 4E 05 F1 | 	add	fp, #48
1dbec     A7 FA 61 FC | 	wrlong	result1, fp
1dbf0     30 4E 85 F1 | 	sub	fp, #48
1dbf4     0C 00 90 FD | 	jmp	#LR__2353
1dbf8                 | LR__2352
1dbf8     30 4E 05 F1 | 	add	fp, #48
1dbfc     A7 00 68 FC | 	wrlong	#0, fp
1dc00     30 4E 85 F1 | 	sub	fp, #48
1dc04                 | LR__2353
1dc04                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1dc04     14 4E 05 F1 | 	add	fp, #20
1dc08     A7 12 02 FB | 	rdlong	arg01, fp
1dc0c     14 4E 85 F1 | 	sub	fp, #20
1dc10     02 12 16 F2 | 	cmp	arg01, #2 wc
1dc14     34 00 90 CD |  if_b	jmp	#LR__2354
1dc18     A8 FA BE FD | 	call	#_pop
1dc1c     A7 FA 61 FC | 	wrlong	result1, fp
1dc20     04 4E 05 F1 | 	add	fp, #4
1dc24     A7 FC 61 FC | 	wrlong	result2, fp
1dc28     04 4E 05 F1 | 	add	fp, #4
1dc2c     A7 FE 61 FC | 	wrlong	result3, fp
1dc30     08 4E 85 F1 | 	sub	fp, #8
1dc34     A7 12 02 F6 | 	mov	arg01, fp
1dc38     6C FC BE FD | 	call	#_converttoint
1dc3c     2C 4E 05 F1 | 	add	fp, #44
1dc40     A7 FA 61 FC | 	wrlong	result1, fp
1dc44     2C 4E 85 F1 | 	sub	fp, #44
1dc48     0C 00 90 FD | 	jmp	#LR__2355
1dc4c                 | LR__2354
1dc4c     2C 4E 05 F1 | 	add	fp, #44
1dc50     A7 00 68 FC | 	wrlong	#0, fp
1dc54     2C 4E 85 F1 | 	sub	fp, #44
1dc58                 | LR__2355
1dc58                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1dc58     14 4E 05 F1 | 	add	fp, #20
1dc5c     A7 12 02 FB | 	rdlong	arg01, fp
1dc60     14 4E 85 F1 | 	sub	fp, #20
1dc64     01 12 16 F2 | 	cmp	arg01, #1 wc
1dc68     34 00 90 CD |  if_b	jmp	#LR__2356
1dc6c     54 FA BE FD | 	call	#_pop
1dc70     A7 FA 61 FC | 	wrlong	result1, fp
1dc74     04 4E 05 F1 | 	add	fp, #4
1dc78     A7 FC 61 FC | 	wrlong	result2, fp
1dc7c     04 4E 05 F1 | 	add	fp, #4
1dc80     A7 FE 61 FC | 	wrlong	result3, fp
1dc84     08 4E 85 F1 | 	sub	fp, #8
1dc88     A7 12 02 F6 | 	mov	arg01, fp
1dc8c     18 FC BE FD | 	call	#_converttoint
1dc90     28 4E 05 F1 | 	add	fp, #40
1dc94     A7 FA 61 FC | 	wrlong	result1, fp
1dc98     28 4E 85 F1 | 	sub	fp, #40
1dc9c     0C 00 90 FD | 	jmp	#LR__2357
1dca0                 | LR__2356
1dca0     28 4E 05 F1 | 	add	fp, #40
1dca4     A7 00 68 FC | 	wrlong	#0, fp
1dca8     28 4E 85 F1 | 	sub	fp, #40
1dcac                 | LR__2357
1dcac                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1dcac                 | ' if numpar>0 then
1dcac     14 4E 05 F1 | 	add	fp, #20
1dcb0     A7 FE 01 FB | 	rdlong	result3, fp
1dcb4     14 4E 85 F1 | 	sub	fp, #20
1dcb8     01 FE 15 F2 | 	cmp	result3, #1 wc
1dcbc     8C 00 90 CD |  if_b	jmp	#LR__2358
1dcc0     0C 4E 05 F1 | 	add	fp, #12
1dcc4     A7 FC 01 FB | 	rdlong	result2, fp
1dcc8     1C 4E 05 F1 | 	add	fp, #28
1dccc     A7 FE 01 FB | 	rdlong	result3, fp
1dcd0     04 4E 05 F1 | 	add	fp, #4
1dcd4     A7 12 02 FB | 	rdlong	arg01, fp
1dcd8     10 4E 85 F1 | 	sub	fp, #16
1dcdc     A7 FA 01 FB | 	rdlong	result1, fp
1dce0     FD 12 02 FD | 	qmul	arg01, result1
1dce4     10 FC 05 F1 | 	add	result2, #16
1dce8     14 4E 05 F1 | 	add	fp, #20
1dcec     A7 26 02 FB | 	rdlong	local01, fp
1dcf0     18 12 62 FD | 	getqx	arg01
1dcf4     FD 26 02 FD | 	qmul	local01, result1
1dcf8     09 FF 01 F1 | 	add	result3, arg01
1dcfc     10 4E 85 F1 | 	sub	fp, #16
1dd00     A7 26 02 FB | 	rdlong	local01, fp
1dd04     18 FA 61 FD | 	getqx	result1
1dd08     13 FB 01 FD | 	qmul	result1, local01
1dd0c     08 4E 85 F1 | 	sub	fp, #8
1dd10     A7 26 02 FB | 	rdlong	local01, fp
1dd14     18 FA 61 FD | 	getqx	result1
1dd18     FD FE 01 F1 | 	add	result3, result1
1dd1c     13 FF 01 FD | 	qmul	result3, local01
1dd20     1C 4E 05 F1 | 	add	fp, #28
1dd24     18 26 62 FD | 	getqx	local01
1dd28     13 FD 01 F1 | 	add	result2, local01
1dd2c     A7 FC 61 FC | 	wrlong	result2, fp
1dd30     2C 4E 85 F1 | 	sub	fp, #44
1dd34     A7 3A 68 FC | 	wrlong	#29, fp
1dd38     2C 4E 05 F1 | 	add	fp, #44
1dd3c     A7 26 02 FB | 	rdlong	local01, fp
1dd40     34 4E 85 F1 | 	sub	fp, #52
1dd44     A7 26 62 FC | 	wrlong	local01, fp
1dd48     18 00 90 FD | 	jmp	#LR__2359
1dd4c                 | LR__2358
1dd4c     08 4E 05 F1 | 	add	fp, #8
1dd50     A7 3A 68 FC | 	wrlong	#29, fp
1dd54     04 4E 05 F1 | 	add	fp, #4
1dd58     A7 26 02 FB | 	rdlong	local01, fp
1dd5c     0C 4E 85 F1 | 	sub	fp, #12
1dd60     A7 26 62 FC | 	wrlong	local01, fp
1dd64                 | LR__2359
1dd64     A7 12 02 F6 | 	mov	arg01, fp
1dd68     F0 F9 BE FD | 	call	#_push
1dd6c                 | LR__2360
1dd6c     A7 F0 03 F6 | 	mov	ptra, fp
1dd70     B2 00 A0 FD | 	call	#popregs_
1dd74                 | _do_getaddr_ret
1dd74     2D 00 64 FD | 	ret
1dd78                 | 
1dd78                 | ' 
1dd78                 | ' 
1dd78                 | ' 
1dd78                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1dd78                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1dd78                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1dd78                 | ' 
1dd78                 | ' '--------------------------------- AND 
1dd78                 | ' 
1dd78                 | ' sub do_and 
1dd78                 | _do_and
1dd78     03 4A 05 F6 | 	mov	COUNT_, #3
1dd7c     A8 00 A0 FD | 	call	#pushregs_
1dd80     18 F0 07 F1 | 	add	ptra, #24
1dd84     3C F9 BE FD | 	call	#_pop
1dd88     FD 12 02 F6 | 	mov	arg01, result1
1dd8c     FE 26 02 F6 | 	mov	local01, result2
1dd90     FF 28 02 F6 | 	mov	local02, result3
1dd94     0C 4E 05 F1 | 	add	fp, #12
1dd98     A7 12 62 FC | 	wrlong	arg01, fp
1dd9c     04 4E 05 F1 | 	add	fp, #4
1dda0     A7 26 62 FC | 	wrlong	local01, fp
1dda4     04 4E 05 F1 | 	add	fp, #4
1dda8     A7 28 62 FC | 	wrlong	local02, fp
1ddac     14 4E 85 F1 | 	sub	fp, #20
1ddb0     10 F9 BE FD | 	call	#_pop
1ddb4     FF 2A 02 F6 | 	mov	local03, result3
1ddb8     A7 FA 61 FC | 	wrlong	result1, fp
1ddbc     04 4E 05 F1 | 	add	fp, #4
1ddc0     A7 FC 61 FC | 	wrlong	result2, fp
1ddc4     04 4E 05 F1 | 	add	fp, #4
1ddc8     A7 2A 62 FC | 	wrlong	local03, fp
1ddcc                 | ' 
1ddcc                 | ' t2=pop()
1ddcc                 | ' t1=pop()
1ddcc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1ddcc     08 4E 85 F1 | 	sub	fp, #8
1ddd0     1C 2A 0E F2 | 	cmp	local03, #28 wz
1ddd4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ddd8     A7 2A 62 AC |  if_e	wrlong	local03, fp
1dddc     08 4E 05 A1 |  if_e	add	fp, #8
1dde0     A7 3A 68 AC |  if_e	wrlong	#29, fp
1dde4     08 4E 85 A1 |  if_e	sub	fp, #8
1dde8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1dde8     14 4E 05 F1 | 	add	fp, #20
1ddec     A7 2A 02 FB | 	rdlong	local03, fp
1ddf0     14 4E 85 F1 | 	sub	fp, #20
1ddf4     1C 2A 0E F2 | 	cmp	local03, #28 wz
1ddf8     18 00 90 5D |  if_ne	jmp	#LR__2370
1ddfc     0C 4E 05 F1 | 	add	fp, #12
1de00     A7 2A 02 FB | 	rdlong	local03, fp
1de04     A7 2A 62 FC | 	wrlong	local03, fp
1de08     08 4E 05 F1 | 	add	fp, #8
1de0c     A7 3A 68 FC | 	wrlong	#29, fp
1de10     14 4E 85 F1 | 	sub	fp, #20
1de14                 | LR__2370
1de14                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1de14     08 4E 05 F1 | 	add	fp, #8
1de18     A7 2A 02 FB | 	rdlong	local03, fp
1de1c     08 4E 85 F1 | 	sub	fp, #8
1de20     1F 2A 0E F2 | 	cmp	local03, #31 wz
1de24     14 4E 05 51 |  if_ne	add	fp, #20
1de28     A7 28 02 5B |  if_ne	rdlong	local02, fp
1de2c     14 4E 85 51 |  if_ne	sub	fp, #20
1de30     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1de34     08 4E 05 51 |  if_ne	add	fp, #8
1de38     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1de3c     08 4E 85 51 |  if_ne	sub	fp, #8
1de40     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1de44     14 4E 05 51 |  if_ne	add	fp, #20
1de48     14 4E 85 51 |  if_ne	sub	fp, #20
1de4c     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1de50     A7 0C 68 AC |  if_e	wrlong	#6, fp
1de54     08 4E 05 A1 |  if_e	add	fp, #8
1de58     A7 FE 69 AC |  if_e	wrlong	#255, fp
1de5c     08 4E 85 A1 |  if_e	sub	fp, #8
1de60     18 00 90 AD |  if_e	jmp	#LR__2371
1de64     A7 2A 02 FB | 	rdlong	local03, fp
1de68     0C 4E 05 F1 | 	add	fp, #12
1de6c     A7 26 02 FB | 	rdlong	local01, fp
1de70     0C 4E 85 F1 | 	sub	fp, #12
1de74     13 2B 02 F5 | 	and	local03, local01
1de78     A7 2A 62 FC | 	wrlong	local03, fp
1de7c                 | LR__2371
1de7c     A7 12 02 F6 | 	mov	arg01, fp
1de80     D8 F8 BE FD | 	call	#_push
1de84     A7 F0 03 F6 | 	mov	ptra, fp
1de88     B2 00 A0 FD | 	call	#popregs_
1de8c                 | _do_and_ret
1de8c     2D 00 64 FD | 	ret
1de90                 | 
1de90                 | ' 
1de90                 | ' '--------------------------------- DIV (integer divide)
1de90                 | ' 
1de90                 | ' sub do_div 
1de90                 | _do_div
1de90     01 4A 05 F6 | 	mov	COUNT_, #1
1de94     A8 00 A0 FD | 	call	#pushregs_
1de98     18 F0 07 F1 | 	add	ptra, #24
1de9c     24 F8 BE FD | 	call	#_pop
1dea0     FD 92 02 F6 | 	mov	muldivb_, result1
1dea4     FE 90 02 F6 | 	mov	muldiva_, result2
1dea8     FF 26 02 F6 | 	mov	local01, result3
1deac     0C 4E 05 F1 | 	add	fp, #12
1deb0     A7 92 62 FC | 	wrlong	muldivb_, fp
1deb4     04 4E 05 F1 | 	add	fp, #4
1deb8     A7 90 62 FC | 	wrlong	muldiva_, fp
1debc     04 4E 05 F1 | 	add	fp, #4
1dec0     A7 26 62 FC | 	wrlong	local01, fp
1dec4     14 4E 85 F1 | 	sub	fp, #20
1dec8     F8 F7 BE FD | 	call	#_pop
1decc     A7 FA 61 FC | 	wrlong	result1, fp
1ded0     04 4E 05 F1 | 	add	fp, #4
1ded4     A7 FC 61 FC | 	wrlong	result2, fp
1ded8     04 4E 05 F1 | 	add	fp, #4
1dedc     A7 FE 61 FC | 	wrlong	result3, fp
1dee0                 | ' 
1dee0                 | ' t2=pop()
1dee0                 | ' t1=pop()
1dee0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1dee0     08 4E 85 F1 | 	sub	fp, #8
1dee4     1F FE 0D F2 | 	cmp	result3, #31 wz
1dee8     14 4E 05 51 |  if_ne	add	fp, #20
1deec     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1def0     14 4E 85 51 |  if_ne	sub	fp, #20
1def4     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1def8     A7 14 68 AC |  if_e	wrlong	#10, fp
1defc     08 4E 05 A1 |  if_e	add	fp, #8
1df00     A7 FE 69 AC |  if_e	wrlong	#255, fp
1df04     08 4E 85 A1 |  if_e	sub	fp, #8
1df08     90 01 90 AD |  if_e	jmp	#LR__2386
1df0c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1df0c     08 4E 05 F1 | 	add	fp, #8
1df10     A7 92 02 FB | 	rdlong	muldivb_, fp
1df14     08 4E 85 F1 | 	sub	fp, #8
1df18     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1df1c     1C 00 90 5D |  if_ne	jmp	#LR__2380
1df20     08 4E 05 F1 | 	add	fp, #8
1df24     A7 38 68 FC | 	wrlong	#28, fp
1df28     08 4E 85 F1 | 	sub	fp, #8
1df2c     A7 12 02 FB | 	rdlong	arg01, fp
1df30     00 14 06 F6 | 	mov	arg02, #0
1df34     78 C3 B0 FD | 	call	#__system___float_tointeger
1df38     A7 FA 61 FC | 	wrlong	result1, fp
1df3c                 | LR__2380
1df3c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1df3c     14 4E 05 F1 | 	add	fp, #20
1df40     A7 92 02 FB | 	rdlong	muldivb_, fp
1df44     14 4E 85 F1 | 	sub	fp, #20
1df48     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1df4c     28 00 90 5D |  if_ne	jmp	#LR__2381
1df50     14 4E 05 F1 | 	add	fp, #20
1df54     A7 38 68 FC | 	wrlong	#28, fp
1df58     08 4E 85 F1 | 	sub	fp, #8
1df5c     A7 12 02 FB | 	rdlong	arg01, fp
1df60     0C 4E 85 F1 | 	sub	fp, #12
1df64     00 14 06 F6 | 	mov	arg02, #0
1df68     44 C3 B0 FD | 	call	#__system___float_tointeger
1df6c     0C 4E 05 F1 | 	add	fp, #12
1df70     A7 FA 61 FC | 	wrlong	result1, fp
1df74     0C 4E 85 F1 | 	sub	fp, #12
1df78                 | LR__2381
1df78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1df78     08 4E 05 F1 | 	add	fp, #8
1df7c     A7 92 02 FB | 	rdlong	muldivb_, fp
1df80     08 4E 85 F1 | 	sub	fp, #8
1df84     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1df88     14 4E 05 A1 |  if_e	add	fp, #20
1df8c     A7 26 02 AB |  if_e	rdlong	local01, fp
1df90     14 4E 85 A1 |  if_e	sub	fp, #20
1df94     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1df98     20 00 90 5D |  if_ne	jmp	#LR__2382
1df9c     0C 4E 05 F1 | 	add	fp, #12
1dfa0     A7 26 02 FB | 	rdlong	local01, fp
1dfa4     0C 4E 85 F1 | 	sub	fp, #12
1dfa8     A7 92 02 FB | 	rdlong	muldivb_, fp
1dfac     13 93 12 FD | 	qdiv	muldivb_, local01
1dfb0     18 26 62 FD | 	getqx	local01
1dfb4     A7 26 62 FC | 	wrlong	local01, fp
1dfb8     E0 00 90 FD | 	jmp	#LR__2386
1dfbc                 | LR__2382
1dfbc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1dfbc     08 4E 05 F1 | 	add	fp, #8
1dfc0     A7 92 02 FB | 	rdlong	muldivb_, fp
1dfc4     08 4E 85 F1 | 	sub	fp, #8
1dfc8     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1dfcc     14 4E 05 A1 |  if_e	add	fp, #20
1dfd0     A7 26 02 AB |  if_e	rdlong	local01, fp
1dfd4     14 4E 85 A1 |  if_e	sub	fp, #20
1dfd8     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1dfdc     2C 00 90 5D |  if_ne	jmp	#LR__2383
1dfe0     0C 4E 05 F1 | 	add	fp, #12
1dfe4     A7 26 02 FB | 	rdlong	local01, fp
1dfe8     0C 4E 85 F1 | 	sub	fp, #12
1dfec     A7 92 02 FB | 	rdlong	muldivb_, fp
1dff0     13 93 12 FD | 	qdiv	muldivb_, local01
1dff4     18 26 62 FD | 	getqx	local01
1dff8     A7 26 62 FC | 	wrlong	local01, fp
1dffc     08 4E 05 F1 | 	add	fp, #8
1e000     A7 38 68 FC | 	wrlong	#28, fp
1e004     08 4E 85 F1 | 	sub	fp, #8
1e008     90 00 90 FD | 	jmp	#LR__2386
1e00c                 | LR__2383
1e00c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1e00c     08 4E 05 F1 | 	add	fp, #8
1e010     A7 92 02 FB | 	rdlong	muldivb_, fp
1e014     08 4E 85 F1 | 	sub	fp, #8
1e018     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1e01c     14 4E 05 A1 |  if_e	add	fp, #20
1e020     A7 26 02 AB |  if_e	rdlong	local01, fp
1e024     14 4E 85 A1 |  if_e	sub	fp, #20
1e028     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1e02c     1C 00 90 5D |  if_ne	jmp	#LR__2384
1e030     A7 90 02 FB | 	rdlong	muldiva_, fp
1e034     0C 4E 05 F1 | 	add	fp, #12
1e038     A7 92 02 FB | 	rdlong	muldivb_, fp
1e03c     0C 4E 85 F1 | 	sub	fp, #12
1e040     BA 00 A0 FD | 	call	#divide_
1e044     A7 92 62 FC | 	wrlong	muldivb_, fp
1e048     50 00 90 FD | 	jmp	#LR__2386
1e04c                 | LR__2384
1e04c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1e04c     08 4E 05 F1 | 	add	fp, #8
1e050     A7 92 02 FB | 	rdlong	muldivb_, fp
1e054     08 4E 85 F1 | 	sub	fp, #8
1e058     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1e05c     14 4E 05 A1 |  if_e	add	fp, #20
1e060     A7 26 02 AB |  if_e	rdlong	local01, fp
1e064     14 4E 85 A1 |  if_e	sub	fp, #20
1e068     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1e06c     1C 00 90 5D |  if_ne	jmp	#LR__2385
1e070     A7 90 02 FB | 	rdlong	muldiva_, fp
1e074     0C 4E 05 F1 | 	add	fp, #12
1e078     A7 92 02 FB | 	rdlong	muldivb_, fp
1e07c     0C 4E 85 F1 | 	sub	fp, #12
1e080     BA 00 A0 FD | 	call	#divide_
1e084     A7 92 62 FC | 	wrlong	muldivb_, fp
1e088     10 00 90 FD | 	jmp	#LR__2386
1e08c                 | LR__2385
1e08c     A7 16 68 FC | 	wrlong	#11, fp
1e090     08 4E 05 F1 | 	add	fp, #8
1e094     A7 FE 69 FC | 	wrlong	#255, fp
1e098     08 4E 85 F1 | 	sub	fp, #8
1e09c                 | LR__2386
1e09c     A7 12 02 F6 | 	mov	arg01, fp
1e0a0     B8 F6 BE FD | 	call	#_push
1e0a4     A7 F0 03 F6 | 	mov	ptra, fp
1e0a8     B2 00 A0 FD | 	call	#popregs_
1e0ac                 | _do_div_ret
1e0ac     2D 00 64 FD | 	ret
1e0b0                 | 
1e0b0                 | ' 
1e0b0                 | ' '--------------------------------- equal (=)
1e0b0                 | ' 
1e0b0                 | ' sub do_eq
1e0b0                 | _do_eq
1e0b0     05 4A 05 F6 | 	mov	COUNT_, #5
1e0b4     A8 00 A0 FD | 	call	#pushregs_
1e0b8     18 F0 07 F1 | 	add	ptra, #24
1e0bc     04 F6 BE FD | 	call	#_pop
1e0c0     FD 26 02 F6 | 	mov	local01, result1
1e0c4     FE 28 02 F6 | 	mov	local02, result2
1e0c8     FF 2A 02 F6 | 	mov	local03, result3
1e0cc     0C 4E 05 F1 | 	add	fp, #12
1e0d0     A7 26 62 FC | 	wrlong	local01, fp
1e0d4     04 4E 05 F1 | 	add	fp, #4
1e0d8     A7 28 62 FC | 	wrlong	local02, fp
1e0dc     04 4E 05 F1 | 	add	fp, #4
1e0e0     A7 2A 62 FC | 	wrlong	local03, fp
1e0e4     14 4E 85 F1 | 	sub	fp, #20
1e0e8     D8 F5 BE FD | 	call	#_pop
1e0ec     FF 2A 02 F6 | 	mov	local03, result3
1e0f0     A7 FA 61 FC | 	wrlong	result1, fp
1e0f4     04 4E 05 F1 | 	add	fp, #4
1e0f8     A7 FC 61 FC | 	wrlong	result2, fp
1e0fc     04 4E 05 F1 | 	add	fp, #4
1e100     A7 2A 62 FC | 	wrlong	local03, fp
1e104                 | ' 
1e104                 | ' t2=pop()
1e104                 | ' t1=pop()
1e104                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1e104     08 4E 85 F1 | 	sub	fp, #8
1e108     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e10c     14 4E 05 A1 |  if_e	add	fp, #20
1e110     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e114     14 4E 85 A1 |  if_e	sub	fp, #20
1e118     16 2B 02 A6 |  if_e	mov	local03, local04
1e11c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e120     28 00 90 5D |  if_ne	jmp	#LR__2390
1e124     00 26 06 F6 | 	mov	local01, #0
1e128     A7 12 02 FB | 	rdlong	arg01, fp
1e12c     0C 4E 05 F1 | 	add	fp, #12
1e130     A7 14 02 FB | 	rdlong	arg02, fp
1e134     0C 4E 85 F1 | 	sub	fp, #12
1e138     5C 8E B0 FD | 	call	#__system___string_cmp
1e13c     00 FA 0D F2 | 	cmp	result1, #0 wz
1e140     00 26 26 A6 |  if_e	not	local01, #0
1e144     A7 26 62 FC | 	wrlong	local01, fp
1e148     20 04 90 FD | 	jmp	#LR__2403
1e14c                 | LR__2390
1e14c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1e14c     08 4E 05 F1 | 	add	fp, #8
1e150     A7 26 02 FB | 	rdlong	local01, fp
1e154     08 4E 85 F1 | 	sub	fp, #8
1e158     1E 26 0E F2 | 	cmp	local01, #30 wz
1e15c     14 4E 05 A1 |  if_e	add	fp, #20
1e160     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e164     14 4E 85 A1 |  if_e	sub	fp, #20
1e168     16 2B 02 A6 |  if_e	mov	local03, local04
1e16c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e170     2C 00 90 5D |  if_ne	jmp	#LR__2391
1e174     00 26 06 F6 | 	mov	local01, #0
1e178     A7 12 02 FB | 	rdlong	arg01, fp
1e17c     0C 4E 05 F1 | 	add	fp, #12
1e180     A7 14 02 FB | 	rdlong	arg02, fp
1e184     0C 4E 85 F1 | 	sub	fp, #12
1e188     01 16 06 F6 | 	mov	arg03, #1
1e18c     8C C0 B0 FD | 	call	#__system___float_cmp
1e190     00 FA 0D F2 | 	cmp	result1, #0 wz
1e194     00 26 26 A6 |  if_e	not	local01, #0
1e198     A7 26 62 FC | 	wrlong	local01, fp
1e19c     CC 03 90 FD | 	jmp	#LR__2403
1e1a0                 | LR__2391
1e1a0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1e1a0     08 4E 05 F1 | 	add	fp, #8
1e1a4     A7 26 02 FB | 	rdlong	local01, fp
1e1a8     08 4E 85 F1 | 	sub	fp, #8
1e1ac     1E 26 0E F2 | 	cmp	local01, #30 wz
1e1b0     14 4E 05 A1 |  if_e	add	fp, #20
1e1b4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e1b8     14 4E 85 A1 |  if_e	sub	fp, #20
1e1bc     16 2B 02 A6 |  if_e	mov	local03, local04
1e1c0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e1c4     48 00 90 5D |  if_ne	jmp	#LR__2392
1e1c8     00 26 06 F6 | 	mov	local01, #0
1e1cc     A7 28 02 FB | 	rdlong	local02, fp
1e1d0     0C 4E 05 F1 | 	add	fp, #12
1e1d4     A7 12 02 FB | 	rdlong	arg01, fp
1e1d8     0C 4E 85 F1 | 	sub	fp, #12
1e1dc     09 13 52 F6 | 	abs	arg01, arg01 wc
1e1e0     1F 2E C6 C9 |  if_b	decod	local05, #31
1e1e4     00 2E 06 36 |  if_ae	mov	local05, #0
1e1e8     F8 B7 B0 FD | 	call	#__system___float_fromuns
1e1ec     17 FB 61 F5 | 	xor	result1, local05
1e1f0     FD 14 02 F6 | 	mov	arg02, result1
1e1f4     14 13 02 F6 | 	mov	arg01, local02
1e1f8     01 16 06 F6 | 	mov	arg03, #1
1e1fc     1C C0 B0 FD | 	call	#__system___float_cmp
1e200     00 FA 0D F2 | 	cmp	result1, #0 wz
1e204     00 26 26 A6 |  if_e	not	local01, #0
1e208     A7 26 62 FC | 	wrlong	local01, fp
1e20c     5C 03 90 FD | 	jmp	#LR__2403
1e210                 | LR__2392
1e210                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1e210     08 4E 05 F1 | 	add	fp, #8
1e214     A7 26 02 FB | 	rdlong	local01, fp
1e218     08 4E 85 F1 | 	sub	fp, #8
1e21c     1E 26 0E F2 | 	cmp	local01, #30 wz
1e220     14 4E 05 A1 |  if_e	add	fp, #20
1e224     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e228     14 4E 85 A1 |  if_e	sub	fp, #20
1e22c     16 2B 02 A6 |  if_e	mov	local03, local04
1e230     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e234     38 00 90 5D |  if_ne	jmp	#LR__2393
1e238     00 26 06 F6 | 	mov	local01, #0
1e23c     A7 28 02 FB | 	rdlong	local02, fp
1e240     0C 4E 05 F1 | 	add	fp, #12
1e244     A7 12 02 FB | 	rdlong	arg01, fp
1e248     0C 4E 85 F1 | 	sub	fp, #12
1e24c     94 B7 B0 FD | 	call	#__system___float_fromuns
1e250     FD 14 02 F6 | 	mov	arg02, result1
1e254     14 13 02 F6 | 	mov	arg01, local02
1e258     01 16 06 F6 | 	mov	arg03, #1
1e25c     BC BF B0 FD | 	call	#__system___float_cmp
1e260     00 FA 0D F2 | 	cmp	result1, #0 wz
1e264     00 26 26 A6 |  if_e	not	local01, #0
1e268     A7 26 62 FC | 	wrlong	local01, fp
1e26c     FC 02 90 FD | 	jmp	#LR__2403
1e270                 | LR__2393
1e270                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1e270     08 4E 05 F1 | 	add	fp, #8
1e274     A7 26 02 FB | 	rdlong	local01, fp
1e278     08 4E 85 F1 | 	sub	fp, #8
1e27c     1C 26 0E F2 | 	cmp	local01, #28 wz
1e280     14 4E 05 A1 |  if_e	add	fp, #20
1e284     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e288     14 4E 85 A1 |  if_e	sub	fp, #20
1e28c     16 2B 02 A6 |  if_e	mov	local03, local04
1e290     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e294     44 00 90 5D |  if_ne	jmp	#LR__2394
1e298     00 26 06 F6 | 	mov	local01, #0
1e29c     A7 12 02 FB | 	rdlong	arg01, fp
1e2a0     09 13 52 F6 | 	abs	arg01, arg01 wc
1e2a4     1F 2E C6 C9 |  if_b	decod	local05, #31
1e2a8     00 2E 06 36 |  if_ae	mov	local05, #0
1e2ac     34 B7 B0 FD | 	call	#__system___float_fromuns
1e2b0     17 FB 61 F5 | 	xor	result1, local05
1e2b4     FD 12 02 F6 | 	mov	arg01, result1
1e2b8     0C 4E 05 F1 | 	add	fp, #12
1e2bc     A7 14 02 FB | 	rdlong	arg02, fp
1e2c0     0C 4E 85 F1 | 	sub	fp, #12
1e2c4     01 16 06 F6 | 	mov	arg03, #1
1e2c8     50 BF B0 FD | 	call	#__system___float_cmp
1e2cc     00 FA 0D F2 | 	cmp	result1, #0 wz
1e2d0     00 26 26 A6 |  if_e	not	local01, #0
1e2d4     A7 26 62 FC | 	wrlong	local01, fp
1e2d8     90 02 90 FD | 	jmp	#LR__2403
1e2dc                 | LR__2394
1e2dc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1e2dc     08 4E 05 F1 | 	add	fp, #8
1e2e0     A7 26 02 FB | 	rdlong	local01, fp
1e2e4     08 4E 85 F1 | 	sub	fp, #8
1e2e8     1C 26 0E F2 | 	cmp	local01, #28 wz
1e2ec     14 4E 05 A1 |  if_e	add	fp, #20
1e2f0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e2f4     14 4E 85 A1 |  if_e	sub	fp, #20
1e2f8     16 2B 02 A6 |  if_e	mov	local03, local04
1e2fc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e300     24 00 90 5D |  if_ne	jmp	#LR__2395
1e304     00 26 06 F6 | 	mov	local01, #0
1e308     A7 28 02 FB | 	rdlong	local02, fp
1e30c     0C 4E 05 F1 | 	add	fp, #12
1e310     A7 2A 02 FB | 	rdlong	local03, fp
1e314     0C 4E 85 F1 | 	sub	fp, #12
1e318     15 29 0A F2 | 	cmp	local02, local03 wz
1e31c     01 26 66 A6 |  if_e	neg	local01, #1
1e320     A7 26 62 FC | 	wrlong	local01, fp
1e324     44 02 90 FD | 	jmp	#LR__2403
1e328                 | LR__2395
1e328                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1e328     08 4E 05 F1 | 	add	fp, #8
1e32c     A7 26 02 FB | 	rdlong	local01, fp
1e330     08 4E 85 F1 | 	sub	fp, #8
1e334     1C 26 0E F2 | 	cmp	local01, #28 wz
1e338     14 4E 05 A1 |  if_e	add	fp, #20
1e33c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e340     14 4E 85 A1 |  if_e	sub	fp, #20
1e344     16 2B 02 A6 |  if_e	mov	local03, local04
1e348     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e34c     24 00 90 5D |  if_ne	jmp	#LR__2396
1e350     00 26 06 F6 | 	mov	local01, #0
1e354     A7 28 02 FB | 	rdlong	local02, fp
1e358     0C 4E 05 F1 | 	add	fp, #12
1e35c     A7 2A 02 FB | 	rdlong	local03, fp
1e360     0C 4E 85 F1 | 	sub	fp, #12
1e364     15 29 0A F2 | 	cmp	local02, local03 wz
1e368     01 26 66 A6 |  if_e	neg	local01, #1
1e36c     A7 26 62 FC | 	wrlong	local01, fp
1e370     F8 01 90 FD | 	jmp	#LR__2403
1e374                 | LR__2396
1e374                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1e374     08 4E 05 F1 | 	add	fp, #8
1e378     A7 26 02 FB | 	rdlong	local01, fp
1e37c     08 4E 85 F1 | 	sub	fp, #8
1e380     1D 26 0E F2 | 	cmp	local01, #29 wz
1e384     14 4E 05 A1 |  if_e	add	fp, #20
1e388     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e38c     14 4E 85 A1 |  if_e	sub	fp, #20
1e390     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1e394     34 00 90 5D |  if_ne	jmp	#LR__2397
1e398     00 26 06 F6 | 	mov	local01, #0
1e39c     A7 12 02 FB | 	rdlong	arg01, fp
1e3a0     40 B6 B0 FD | 	call	#__system___float_fromuns
1e3a4     FD 12 02 F6 | 	mov	arg01, result1
1e3a8     0C 4E 05 F1 | 	add	fp, #12
1e3ac     A7 14 02 FB | 	rdlong	arg02, fp
1e3b0     0C 4E 85 F1 | 	sub	fp, #12
1e3b4     01 16 06 F6 | 	mov	arg03, #1
1e3b8     60 BE B0 FD | 	call	#__system___float_cmp
1e3bc     00 FA 0D F2 | 	cmp	result1, #0 wz
1e3c0     00 26 26 A6 |  if_e	not	local01, #0
1e3c4     A7 26 62 FC | 	wrlong	local01, fp
1e3c8     A0 01 90 FD | 	jmp	#LR__2403
1e3cc                 | LR__2397
1e3cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1e3cc     08 4E 05 F1 | 	add	fp, #8
1e3d0     A7 26 02 FB | 	rdlong	local01, fp
1e3d4     08 4E 85 F1 | 	sub	fp, #8
1e3d8     1D 26 0E F2 | 	cmp	local01, #29 wz
1e3dc     14 4E 05 A1 |  if_e	add	fp, #20
1e3e0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e3e4     14 4E 85 A1 |  if_e	sub	fp, #20
1e3e8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e3ec     24 00 90 5D |  if_ne	jmp	#LR__2398
1e3f0     00 26 06 F6 | 	mov	local01, #0
1e3f4     A7 28 02 FB | 	rdlong	local02, fp
1e3f8     0C 4E 05 F1 | 	add	fp, #12
1e3fc     A7 2A 02 FB | 	rdlong	local03, fp
1e400     0C 4E 85 F1 | 	sub	fp, #12
1e404     15 29 0A F2 | 	cmp	local02, local03 wz
1e408     01 26 66 A6 |  if_e	neg	local01, #1
1e40c     A7 26 62 FC | 	wrlong	local01, fp
1e410     58 01 90 FD | 	jmp	#LR__2403
1e414                 | LR__2398
1e414                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1e414     08 4E 05 F1 | 	add	fp, #8
1e418     A7 26 02 FB | 	rdlong	local01, fp
1e41c     08 4E 85 F1 | 	sub	fp, #8
1e420     1D 26 0E F2 | 	cmp	local01, #29 wz
1e424     14 4E 05 A1 |  if_e	add	fp, #20
1e428     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e42c     14 4E 85 A1 |  if_e	sub	fp, #20
1e430     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e434     24 00 90 5D |  if_ne	jmp	#LR__2399
1e438     00 26 06 F6 | 	mov	local01, #0
1e43c     A7 28 02 FB | 	rdlong	local02, fp
1e440     0C 4E 05 F1 | 	add	fp, #12
1e444     A7 2A 02 FB | 	rdlong	local03, fp
1e448     0C 4E 85 F1 | 	sub	fp, #12
1e44c     15 29 0A F2 | 	cmp	local02, local03 wz
1e450     01 26 66 A6 |  if_e	neg	local01, #1
1e454     A7 26 62 FC | 	wrlong	local01, fp
1e458     10 01 90 FD | 	jmp	#LR__2403
1e45c                 | LR__2399
1e45c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1e45c     08 4E 05 F1 | 	add	fp, #8
1e460     A7 26 02 FB | 	rdlong	local01, fp
1e464     08 4E 85 F1 | 	sub	fp, #8
1e468     2B 26 0E F2 | 	cmp	local01, #43 wz
1e46c     14 4E 05 A1 |  if_e	add	fp, #20
1e470     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e474     14 4E 85 A1 |  if_e	sub	fp, #20
1e478     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e47c     30 00 90 5D |  if_ne	jmp	#LR__2400
1e480     00 26 06 F6 | 	mov	local01, #0
1e484     A7 12 02 FB | 	rdlong	arg01, fp
1e488     B0 F3 BE FD | 	call	#_convertstring
1e48c     FD 12 02 F6 | 	mov	arg01, result1
1e490     0C 4E 05 F1 | 	add	fp, #12
1e494     A7 14 02 FB | 	rdlong	arg02, fp
1e498     0C 4E 85 F1 | 	sub	fp, #12
1e49c     F8 8A B0 FD | 	call	#__system___string_cmp
1e4a0     00 FA 0D F2 | 	cmp	result1, #0 wz
1e4a4     00 26 26 A6 |  if_e	not	local01, #0
1e4a8     A7 26 62 FC | 	wrlong	local01, fp
1e4ac     BC 00 90 FD | 	jmp	#LR__2403
1e4b0                 | LR__2400
1e4b0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1e4b0     08 4E 05 F1 | 	add	fp, #8
1e4b4     A7 26 02 FB | 	rdlong	local01, fp
1e4b8     08 4E 85 F1 | 	sub	fp, #8
1e4bc     1F 26 0E F2 | 	cmp	local01, #31 wz
1e4c0     14 4E 05 A1 |  if_e	add	fp, #20
1e4c4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e4c8     14 4E 85 A1 |  if_e	sub	fp, #20
1e4cc     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e4d0     34 00 90 5D |  if_ne	jmp	#LR__2401
1e4d4     00 26 06 F6 | 	mov	local01, #0
1e4d8     A7 28 02 FB | 	rdlong	local02, fp
1e4dc     0C 4E 05 F1 | 	add	fp, #12
1e4e0     A7 12 02 FB | 	rdlong	arg01, fp
1e4e4     0C 4E 85 F1 | 	sub	fp, #12
1e4e8     50 F3 BE FD | 	call	#_convertstring
1e4ec     FD 14 02 F6 | 	mov	arg02, result1
1e4f0     14 13 02 F6 | 	mov	arg01, local02
1e4f4     A0 8A B0 FD | 	call	#__system___string_cmp
1e4f8     00 FA 0D F2 | 	cmp	result1, #0 wz
1e4fc     00 26 26 A6 |  if_e	not	local01, #0
1e500     A7 26 62 FC | 	wrlong	local01, fp
1e504     64 00 90 FD | 	jmp	#LR__2403
1e508                 | LR__2401
1e508                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1e508     08 4E 05 F1 | 	add	fp, #8
1e50c     A7 26 02 FB | 	rdlong	local01, fp
1e510     08 4E 85 F1 | 	sub	fp, #8
1e514     2B 26 0E F2 | 	cmp	local01, #43 wz
1e518     14 4E 05 A1 |  if_e	add	fp, #20
1e51c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e520     14 4E 85 A1 |  if_e	sub	fp, #20
1e524     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e528     3C 00 90 5D |  if_ne	jmp	#LR__2402
1e52c     00 26 06 F6 | 	mov	local01, #0
1e530     A7 12 02 FB | 	rdlong	arg01, fp
1e534     04 F3 BE FD | 	call	#_convertstring
1e538     FD 28 02 F6 | 	mov	local02, result1
1e53c     0C 4E 05 F1 | 	add	fp, #12
1e540     A7 12 02 FB | 	rdlong	arg01, fp
1e544     0C 4E 85 F1 | 	sub	fp, #12
1e548     F0 F2 BE FD | 	call	#_convertstring
1e54c     FD 14 02 F6 | 	mov	arg02, result1
1e550     14 13 02 F6 | 	mov	arg01, local02
1e554     40 8A B0 FD | 	call	#__system___string_cmp
1e558     00 FA 0D F2 | 	cmp	result1, #0 wz
1e55c     00 26 26 A6 |  if_e	not	local01, #0
1e560     A7 26 62 FC | 	wrlong	local01, fp
1e564     04 00 90 FD | 	jmp	#LR__2403
1e568                 | LR__2402
1e568     A7 00 68 FC | 	wrlong	#0, fp
1e56c                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e56c                 | LR__2403
1e56c     08 4E 05 F1 | 	add	fp, #8
1e570     A7 38 68 FC | 	wrlong	#28, fp
1e574     08 4E 85 F1 | 	sub	fp, #8
1e578     A7 12 02 F6 | 	mov	arg01, fp
1e57c     DC F1 BE FD | 	call	#_push
1e580     A7 F0 03 F6 | 	mov	ptra, fp
1e584     B2 00 A0 FD | 	call	#popregs_
1e588                 | _do_eq_ret
1e588     2D 00 64 FD | 	ret
1e58c                 | 
1e58c                 | ' 
1e58c                 | ' '--------------------------------- fdiv (/) - float divide
1e58c                 | ' 
1e58c                 | ' sub do_fdiv 
1e58c                 | _do_fdiv
1e58c     02 4A 05 F6 | 	mov	COUNT_, #2
1e590     A8 00 A0 FD | 	call	#pushregs_
1e594     18 F0 07 F1 | 	add	ptra, #24
1e598     28 F1 BE FD | 	call	#_pop
1e59c     FD 14 02 F6 | 	mov	arg02, result1
1e5a0     FE 12 02 F6 | 	mov	arg01, result2
1e5a4     FF 26 02 F6 | 	mov	local01, result3
1e5a8     0C 4E 05 F1 | 	add	fp, #12
1e5ac     A7 14 62 FC | 	wrlong	arg02, fp
1e5b0     04 4E 05 F1 | 	add	fp, #4
1e5b4     A7 12 62 FC | 	wrlong	arg01, fp
1e5b8     04 4E 05 F1 | 	add	fp, #4
1e5bc     A7 26 62 FC | 	wrlong	local01, fp
1e5c0     14 4E 85 F1 | 	sub	fp, #20
1e5c4     FC F0 BE FD | 	call	#_pop
1e5c8     A7 FA 61 FC | 	wrlong	result1, fp
1e5cc     04 4E 05 F1 | 	add	fp, #4
1e5d0     A7 FC 61 FC | 	wrlong	result2, fp
1e5d4     04 4E 05 F1 | 	add	fp, #4
1e5d8     A7 FE 61 FC | 	wrlong	result3, fp
1e5dc                 | ' 
1e5dc                 | ' t2=pop()
1e5dc                 | ' t1=pop()
1e5dc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1e5dc     08 4E 85 F1 | 	sub	fp, #8
1e5e0     1F FE 0D F2 | 	cmp	result3, #31 wz
1e5e4     14 4E 05 51 |  if_ne	add	fp, #20
1e5e8     A7 26 02 5B |  if_ne	rdlong	local01, fp
1e5ec     14 4E 85 51 |  if_ne	sub	fp, #20
1e5f0     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1e5f4     A7 14 68 AC |  if_e	wrlong	#10, fp
1e5f8     08 4E 05 A1 |  if_e	add	fp, #8
1e5fc     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e600     08 4E 85 A1 |  if_e	sub	fp, #8
1e604     38 01 90 AD |  if_e	jmp	#LR__2415
1e608                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1e608     08 4E 05 F1 | 	add	fp, #8
1e60c     A7 14 02 FB | 	rdlong	arg02, fp
1e610     08 4E 85 F1 | 	sub	fp, #8
1e614     1C 14 0E F2 | 	cmp	arg02, #28 wz
1e618     28 00 90 5D |  if_ne	jmp	#LR__2410
1e61c     08 4E 05 F1 | 	add	fp, #8
1e620     A7 3C 68 FC | 	wrlong	#30, fp
1e624     08 4E 85 F1 | 	sub	fp, #8
1e628     A7 12 02 FB | 	rdlong	arg01, fp
1e62c     09 13 52 F6 | 	abs	arg01, arg01 wc
1e630     1F 28 C6 C9 |  if_b	decod	local02, #31
1e634     00 28 06 36 |  if_ae	mov	local02, #0
1e638     A8 B3 B0 FD | 	call	#__system___float_fromuns
1e63c     14 FB 61 F5 | 	xor	result1, local02
1e640     A7 FA 61 FC | 	wrlong	result1, fp
1e644                 | LR__2410
1e644                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1e644     08 4E 05 F1 | 	add	fp, #8
1e648     A7 14 02 FB | 	rdlong	arg02, fp
1e64c     08 4E 85 F1 | 	sub	fp, #8
1e650     1D 14 0E F2 | 	cmp	arg02, #29 wz
1e654     18 00 90 5D |  if_ne	jmp	#LR__2411
1e658     08 4E 05 F1 | 	add	fp, #8
1e65c     A7 3C 68 FC | 	wrlong	#30, fp
1e660     08 4E 85 F1 | 	sub	fp, #8
1e664     A7 12 02 FB | 	rdlong	arg01, fp
1e668     78 B3 B0 FD | 	call	#__system___float_fromuns
1e66c     A7 FA 61 FC | 	wrlong	result1, fp
1e670                 | LR__2411
1e670                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1e670     14 4E 05 F1 | 	add	fp, #20
1e674     A7 14 02 FB | 	rdlong	arg02, fp
1e678     14 4E 85 F1 | 	sub	fp, #20
1e67c     1C 14 0E F2 | 	cmp	arg02, #28 wz
1e680     34 00 90 5D |  if_ne	jmp	#LR__2412
1e684     14 4E 05 F1 | 	add	fp, #20
1e688     A7 3C 68 FC | 	wrlong	#30, fp
1e68c     08 4E 85 F1 | 	sub	fp, #8
1e690     A7 12 02 FB | 	rdlong	arg01, fp
1e694     0C 4E 85 F1 | 	sub	fp, #12
1e698     09 13 52 F6 | 	abs	arg01, arg01 wc
1e69c     1F 28 C6 C9 |  if_b	decod	local02, #31
1e6a0     00 28 06 36 |  if_ae	mov	local02, #0
1e6a4     3C B3 B0 FD | 	call	#__system___float_fromuns
1e6a8     14 FB 61 F5 | 	xor	result1, local02
1e6ac     0C 4E 05 F1 | 	add	fp, #12
1e6b0     A7 FA 61 FC | 	wrlong	result1, fp
1e6b4     0C 4E 85 F1 | 	sub	fp, #12
1e6b8                 | LR__2412
1e6b8                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1e6b8     14 4E 05 F1 | 	add	fp, #20
1e6bc     A7 14 02 FB | 	rdlong	arg02, fp
1e6c0     14 4E 85 F1 | 	sub	fp, #20
1e6c4     1D 14 0E F2 | 	cmp	arg02, #29 wz
1e6c8     24 00 90 5D |  if_ne	jmp	#LR__2413
1e6cc     14 4E 05 F1 | 	add	fp, #20
1e6d0     A7 3C 68 FC | 	wrlong	#30, fp
1e6d4     08 4E 85 F1 | 	sub	fp, #8
1e6d8     A7 12 02 FB | 	rdlong	arg01, fp
1e6dc     0C 4E 85 F1 | 	sub	fp, #12
1e6e0     00 B3 B0 FD | 	call	#__system___float_fromuns
1e6e4     0C 4E 05 F1 | 	add	fp, #12
1e6e8     A7 FA 61 FC | 	wrlong	result1, fp
1e6ec     0C 4E 85 F1 | 	sub	fp, #12
1e6f0                 | LR__2413
1e6f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1e6f0     08 4E 05 F1 | 	add	fp, #8
1e6f4     A7 14 02 FB | 	rdlong	arg02, fp
1e6f8     08 4E 85 F1 | 	sub	fp, #8
1e6fc     1E 14 0E F2 | 	cmp	arg02, #30 wz
1e700     14 4E 05 A1 |  if_e	add	fp, #20
1e704     A7 26 02 AB |  if_e	rdlong	local01, fp
1e708     14 4E 85 A1 |  if_e	sub	fp, #20
1e70c     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1e710     1C 00 90 5D |  if_ne	jmp	#LR__2414
1e714     A7 12 02 FB | 	rdlong	arg01, fp
1e718     0C 4E 05 F1 | 	add	fp, #12
1e71c     A7 14 02 FB | 	rdlong	arg02, fp
1e720     0C 4E 85 F1 | 	sub	fp, #12
1e724     C4 B8 B0 FD | 	call	#__system___float_div
1e728     A7 FA 61 FC | 	wrlong	result1, fp
1e72c     10 00 90 FD | 	jmp	#LR__2415
1e730                 | LR__2414
1e730     A7 16 68 FC | 	wrlong	#11, fp
1e734     08 4E 05 F1 | 	add	fp, #8
1e738     A7 FE 69 FC | 	wrlong	#255, fp
1e73c     08 4E 85 F1 | 	sub	fp, #8
1e740                 | LR__2415
1e740     A7 12 02 F6 | 	mov	arg01, fp
1e744     14 F0 BE FD | 	call	#_push
1e748     A7 F0 03 F6 | 	mov	ptra, fp
1e74c     B2 00 A0 FD | 	call	#popregs_
1e750                 | _do_fdiv_ret
1e750     2D 00 64 FD | 	ret
1e754                 | 
1e754                 | ' 
1e754                 | ' '--------------------------------- greater or equal (>=)
1e754                 | ' 
1e754                 | ' sub do_ge
1e754                 | _do_ge
1e754     05 4A 05 F6 | 	mov	COUNT_, #5
1e758     A8 00 A0 FD | 	call	#pushregs_
1e75c     18 F0 07 F1 | 	add	ptra, #24
1e760     60 EF BE FD | 	call	#_pop
1e764     FD 26 02 F6 | 	mov	local01, result1
1e768     FE 28 02 F6 | 	mov	local02, result2
1e76c     FF 2A 02 F6 | 	mov	local03, result3
1e770     0C 4E 05 F1 | 	add	fp, #12
1e774     A7 26 62 FC | 	wrlong	local01, fp
1e778     04 4E 05 F1 | 	add	fp, #4
1e77c     A7 28 62 FC | 	wrlong	local02, fp
1e780     04 4E 05 F1 | 	add	fp, #4
1e784     A7 2A 62 FC | 	wrlong	local03, fp
1e788     14 4E 85 F1 | 	sub	fp, #20
1e78c     34 EF BE FD | 	call	#_pop
1e790     FF 2A 02 F6 | 	mov	local03, result3
1e794     A7 FA 61 FC | 	wrlong	result1, fp
1e798     04 4E 05 F1 | 	add	fp, #4
1e79c     A7 FC 61 FC | 	wrlong	result2, fp
1e7a0     04 4E 05 F1 | 	add	fp, #4
1e7a4     A7 2A 62 FC | 	wrlong	local03, fp
1e7a8                 | ' 
1e7a8                 | ' t2=pop()
1e7a8                 | ' t1=pop()
1e7a8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1e7a8     08 4E 85 F1 | 	sub	fp, #8
1e7ac     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e7b0     14 4E 05 A1 |  if_e	add	fp, #20
1e7b4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e7b8     14 4E 85 A1 |  if_e	sub	fp, #20
1e7bc     16 2B 02 A6 |  if_e	mov	local03, local04
1e7c0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e7c4     28 00 90 5D |  if_ne	jmp	#LR__2420
1e7c8     00 26 06 F6 | 	mov	local01, #0
1e7cc     A7 12 02 FB | 	rdlong	arg01, fp
1e7d0     0C 4E 05 F1 | 	add	fp, #12
1e7d4     A7 14 02 FB | 	rdlong	arg02, fp
1e7d8     0C 4E 85 F1 | 	sub	fp, #12
1e7dc     B8 87 B0 FD | 	call	#__system___string_cmp
1e7e0     00 FA 55 F2 | 	cmps	result1, #0 wc
1e7e4     00 26 26 36 |  if_ae	not	local01, #0
1e7e8     A7 26 62 FC | 	wrlong	local01, fp
1e7ec     24 04 90 FD | 	jmp	#LR__2433
1e7f0                 | LR__2420
1e7f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1e7f0     08 4E 05 F1 | 	add	fp, #8
1e7f4     A7 26 02 FB | 	rdlong	local01, fp
1e7f8     08 4E 85 F1 | 	sub	fp, #8
1e7fc     1E 26 0E F2 | 	cmp	local01, #30 wz
1e800     14 4E 05 A1 |  if_e	add	fp, #20
1e804     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e808     14 4E 85 A1 |  if_e	sub	fp, #20
1e80c     16 2B 02 A6 |  if_e	mov	local03, local04
1e810     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e814     2C 00 90 5D |  if_ne	jmp	#LR__2421
1e818     00 26 06 F6 | 	mov	local01, #0
1e81c     A7 12 02 FB | 	rdlong	arg01, fp
1e820     0C 4E 05 F1 | 	add	fp, #12
1e824     A7 14 02 FB | 	rdlong	arg02, fp
1e828     0C 4E 85 F1 | 	sub	fp, #12
1e82c     01 16 66 F6 | 	neg	arg03, #1
1e830     E8 B9 B0 FD | 	call	#__system___float_cmp
1e834     00 FA 55 F2 | 	cmps	result1, #0 wc
1e838     00 26 26 36 |  if_ae	not	local01, #0
1e83c     A7 26 62 FC | 	wrlong	local01, fp
1e840     D0 03 90 FD | 	jmp	#LR__2433
1e844                 | LR__2421
1e844                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1e844     08 4E 05 F1 | 	add	fp, #8
1e848     A7 26 02 FB | 	rdlong	local01, fp
1e84c     08 4E 85 F1 | 	sub	fp, #8
1e850     1E 26 0E F2 | 	cmp	local01, #30 wz
1e854     14 4E 05 A1 |  if_e	add	fp, #20
1e858     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e85c     14 4E 85 A1 |  if_e	sub	fp, #20
1e860     16 2B 02 A6 |  if_e	mov	local03, local04
1e864     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e868     48 00 90 5D |  if_ne	jmp	#LR__2422
1e86c     00 26 06 F6 | 	mov	local01, #0
1e870     A7 28 02 FB | 	rdlong	local02, fp
1e874     0C 4E 05 F1 | 	add	fp, #12
1e878     A7 12 02 FB | 	rdlong	arg01, fp
1e87c     0C 4E 85 F1 | 	sub	fp, #12
1e880     09 13 52 F6 | 	abs	arg01, arg01 wc
1e884     1F 2E C6 C9 |  if_b	decod	local05, #31
1e888     00 2E 06 36 |  if_ae	mov	local05, #0
1e88c     54 B1 B0 FD | 	call	#__system___float_fromuns
1e890     17 FB 61 F5 | 	xor	result1, local05
1e894     FD 14 02 F6 | 	mov	arg02, result1
1e898     14 13 02 F6 | 	mov	arg01, local02
1e89c     01 16 66 F6 | 	neg	arg03, #1
1e8a0     78 B9 B0 FD | 	call	#__system___float_cmp
1e8a4     00 FA 55 F2 | 	cmps	result1, #0 wc
1e8a8     00 26 26 36 |  if_ae	not	local01, #0
1e8ac     A7 26 62 FC | 	wrlong	local01, fp
1e8b0     60 03 90 FD | 	jmp	#LR__2433
1e8b4                 | LR__2422
1e8b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1e8b4     08 4E 05 F1 | 	add	fp, #8
1e8b8     A7 26 02 FB | 	rdlong	local01, fp
1e8bc     08 4E 85 F1 | 	sub	fp, #8
1e8c0     1E 26 0E F2 | 	cmp	local01, #30 wz
1e8c4     14 4E 05 A1 |  if_e	add	fp, #20
1e8c8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e8cc     14 4E 85 A1 |  if_e	sub	fp, #20
1e8d0     16 2B 02 A6 |  if_e	mov	local03, local04
1e8d4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e8d8     38 00 90 5D |  if_ne	jmp	#LR__2423
1e8dc     00 26 06 F6 | 	mov	local01, #0
1e8e0     A7 28 02 FB | 	rdlong	local02, fp
1e8e4     0C 4E 05 F1 | 	add	fp, #12
1e8e8     A7 12 02 FB | 	rdlong	arg01, fp
1e8ec     0C 4E 85 F1 | 	sub	fp, #12
1e8f0     F0 B0 B0 FD | 	call	#__system___float_fromuns
1e8f4     FD 14 02 F6 | 	mov	arg02, result1
1e8f8     14 13 02 F6 | 	mov	arg01, local02
1e8fc     01 16 66 F6 | 	neg	arg03, #1
1e900     18 B9 B0 FD | 	call	#__system___float_cmp
1e904     00 FA 55 F2 | 	cmps	result1, #0 wc
1e908     00 26 26 36 |  if_ae	not	local01, #0
1e90c     A7 26 62 FC | 	wrlong	local01, fp
1e910     00 03 90 FD | 	jmp	#LR__2433
1e914                 | LR__2423
1e914                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1e914     08 4E 05 F1 | 	add	fp, #8
1e918     A7 26 02 FB | 	rdlong	local01, fp
1e91c     08 4E 85 F1 | 	sub	fp, #8
1e920     1C 26 0E F2 | 	cmp	local01, #28 wz
1e924     14 4E 05 A1 |  if_e	add	fp, #20
1e928     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e92c     14 4E 85 A1 |  if_e	sub	fp, #20
1e930     16 2B 02 A6 |  if_e	mov	local03, local04
1e934     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e938     44 00 90 5D |  if_ne	jmp	#LR__2424
1e93c     00 26 06 F6 | 	mov	local01, #0
1e940     A7 12 02 FB | 	rdlong	arg01, fp
1e944     09 13 52 F6 | 	abs	arg01, arg01 wc
1e948     1F 2E C6 C9 |  if_b	decod	local05, #31
1e94c     00 2E 06 36 |  if_ae	mov	local05, #0
1e950     90 B0 B0 FD | 	call	#__system___float_fromuns
1e954     17 FB 61 F5 | 	xor	result1, local05
1e958     FD 12 02 F6 | 	mov	arg01, result1
1e95c     0C 4E 05 F1 | 	add	fp, #12
1e960     A7 14 02 FB | 	rdlong	arg02, fp
1e964     0C 4E 85 F1 | 	sub	fp, #12
1e968     01 16 66 F6 | 	neg	arg03, #1
1e96c     AC B8 B0 FD | 	call	#__system___float_cmp
1e970     00 FA 55 F2 | 	cmps	result1, #0 wc
1e974     00 26 26 36 |  if_ae	not	local01, #0
1e978     A7 26 62 FC | 	wrlong	local01, fp
1e97c     94 02 90 FD | 	jmp	#LR__2433
1e980                 | LR__2424
1e980                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1e980     08 4E 05 F1 | 	add	fp, #8
1e984     A7 26 02 FB | 	rdlong	local01, fp
1e988     08 4E 85 F1 | 	sub	fp, #8
1e98c     1C 26 0E F2 | 	cmp	local01, #28 wz
1e990     14 4E 05 A1 |  if_e	add	fp, #20
1e994     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e998     14 4E 85 A1 |  if_e	sub	fp, #20
1e99c     16 2B 02 A6 |  if_e	mov	local03, local04
1e9a0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e9a4     24 00 90 5D |  if_ne	jmp	#LR__2425
1e9a8     00 26 06 F6 | 	mov	local01, #0
1e9ac     A7 28 02 FB | 	rdlong	local02, fp
1e9b0     0C 4E 05 F1 | 	add	fp, #12
1e9b4     A7 2A 02 FB | 	rdlong	local03, fp
1e9b8     0C 4E 85 F1 | 	sub	fp, #12
1e9bc     15 29 52 F2 | 	cmps	local02, local03 wc
1e9c0     01 26 66 36 |  if_ae	neg	local01, #1
1e9c4     A7 26 62 FC | 	wrlong	local01, fp
1e9c8     48 02 90 FD | 	jmp	#LR__2433
1e9cc                 | LR__2425
1e9cc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1e9cc     08 4E 05 F1 | 	add	fp, #8
1e9d0     A7 26 02 FB | 	rdlong	local01, fp
1e9d4     08 4E 85 F1 | 	sub	fp, #8
1e9d8     1C 26 0E F2 | 	cmp	local01, #28 wz
1e9dc     14 4E 05 A1 |  if_e	add	fp, #20
1e9e0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e9e4     14 4E 85 A1 |  if_e	sub	fp, #20
1e9e8     16 2B 02 A6 |  if_e	mov	local03, local04
1e9ec     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e9f0     24 00 90 5D |  if_ne	jmp	#LR__2426
1e9f4     00 26 06 F6 | 	mov	local01, #0
1e9f8     A7 28 02 FB | 	rdlong	local02, fp
1e9fc     0C 4E 05 F1 | 	add	fp, #12
1ea00     A7 2A 02 FB | 	rdlong	local03, fp
1ea04     0C 4E 85 F1 | 	sub	fp, #12
1ea08     15 29 52 F2 | 	cmps	local02, local03 wc
1ea0c     01 26 66 36 |  if_ae	neg	local01, #1
1ea10     A7 26 62 FC | 	wrlong	local01, fp
1ea14     FC 01 90 FD | 	jmp	#LR__2433
1ea18                 | LR__2426
1ea18                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1ea18     08 4E 05 F1 | 	add	fp, #8
1ea1c     A7 26 02 FB | 	rdlong	local01, fp
1ea20     08 4E 85 F1 | 	sub	fp, #8
1ea24     1D 26 0E F2 | 	cmp	local01, #29 wz
1ea28     14 4E 05 A1 |  if_e	add	fp, #20
1ea2c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ea30     14 4E 85 A1 |  if_e	sub	fp, #20
1ea34     16 2B 02 A6 |  if_e	mov	local03, local04
1ea38     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ea3c     34 00 90 5D |  if_ne	jmp	#LR__2427
1ea40     00 26 06 F6 | 	mov	local01, #0
1ea44     A7 12 02 FB | 	rdlong	arg01, fp
1ea48     98 AF B0 FD | 	call	#__system___float_fromuns
1ea4c     FD 12 02 F6 | 	mov	arg01, result1
1ea50     0C 4E 05 F1 | 	add	fp, #12
1ea54     A7 14 02 FB | 	rdlong	arg02, fp
1ea58     0C 4E 85 F1 | 	sub	fp, #12
1ea5c     01 16 66 F6 | 	neg	arg03, #1
1ea60     B8 B7 B0 FD | 	call	#__system___float_cmp
1ea64     00 FA 55 F2 | 	cmps	result1, #0 wc
1ea68     00 26 26 36 |  if_ae	not	local01, #0
1ea6c     A7 26 62 FC | 	wrlong	local01, fp
1ea70     A0 01 90 FD | 	jmp	#LR__2433
1ea74                 | LR__2427
1ea74                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1ea74     08 4E 05 F1 | 	add	fp, #8
1ea78     A7 26 02 FB | 	rdlong	local01, fp
1ea7c     08 4E 85 F1 | 	sub	fp, #8
1ea80     1D 26 0E F2 | 	cmp	local01, #29 wz
1ea84     14 4E 05 A1 |  if_e	add	fp, #20
1ea88     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ea8c     14 4E 85 A1 |  if_e	sub	fp, #20
1ea90     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1ea94     24 00 90 5D |  if_ne	jmp	#LR__2428
1ea98     00 26 06 F6 | 	mov	local01, #0
1ea9c     A7 28 02 FB | 	rdlong	local02, fp
1eaa0     0C 4E 05 F1 | 	add	fp, #12
1eaa4     A7 2A 02 FB | 	rdlong	local03, fp
1eaa8     0C 4E 85 F1 | 	sub	fp, #12
1eaac     15 29 52 F2 | 	cmps	local02, local03 wc
1eab0     01 26 66 36 |  if_ae	neg	local01, #1
1eab4     A7 26 62 FC | 	wrlong	local01, fp
1eab8     58 01 90 FD | 	jmp	#LR__2433
1eabc                 | LR__2428
1eabc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1eabc     08 4E 05 F1 | 	add	fp, #8
1eac0     A7 26 02 FB | 	rdlong	local01, fp
1eac4     08 4E 85 F1 | 	sub	fp, #8
1eac8     1D 26 0E F2 | 	cmp	local01, #29 wz
1eacc     14 4E 05 A1 |  if_e	add	fp, #20
1ead0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ead4     14 4E 85 A1 |  if_e	sub	fp, #20
1ead8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1eadc     24 00 90 5D |  if_ne	jmp	#LR__2429
1eae0     00 26 06 F6 | 	mov	local01, #0
1eae4     A7 28 02 FB | 	rdlong	local02, fp
1eae8     0C 4E 05 F1 | 	add	fp, #12
1eaec     A7 2A 02 FB | 	rdlong	local03, fp
1eaf0     0C 4E 85 F1 | 	sub	fp, #12
1eaf4     15 29 12 F2 | 	cmp	local02, local03 wc
1eaf8     01 26 66 36 |  if_ae	neg	local01, #1
1eafc     A7 26 62 FC | 	wrlong	local01, fp
1eb00     10 01 90 FD | 	jmp	#LR__2433
1eb04                 | LR__2429
1eb04                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1eb04     08 4E 05 F1 | 	add	fp, #8
1eb08     A7 26 02 FB | 	rdlong	local01, fp
1eb0c     08 4E 85 F1 | 	sub	fp, #8
1eb10     2B 26 0E F2 | 	cmp	local01, #43 wz
1eb14     14 4E 05 A1 |  if_e	add	fp, #20
1eb18     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eb1c     14 4E 85 A1 |  if_e	sub	fp, #20
1eb20     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1eb24     30 00 90 5D |  if_ne	jmp	#LR__2430
1eb28     00 26 06 F6 | 	mov	local01, #0
1eb2c     A7 12 02 FB | 	rdlong	arg01, fp
1eb30     08 ED BE FD | 	call	#_convertstring
1eb34     FD 12 02 F6 | 	mov	arg01, result1
1eb38     0C 4E 05 F1 | 	add	fp, #12
1eb3c     A7 14 02 FB | 	rdlong	arg02, fp
1eb40     0C 4E 85 F1 | 	sub	fp, #12
1eb44     50 84 B0 FD | 	call	#__system___string_cmp
1eb48     00 FA 55 F2 | 	cmps	result1, #0 wc
1eb4c     00 26 26 36 |  if_ae	not	local01, #0
1eb50     A7 26 62 FC | 	wrlong	local01, fp
1eb54     BC 00 90 FD | 	jmp	#LR__2433
1eb58                 | LR__2430
1eb58                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1eb58     08 4E 05 F1 | 	add	fp, #8
1eb5c     A7 26 02 FB | 	rdlong	local01, fp
1eb60     08 4E 85 F1 | 	sub	fp, #8
1eb64     1F 26 0E F2 | 	cmp	local01, #31 wz
1eb68     14 4E 05 A1 |  if_e	add	fp, #20
1eb6c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eb70     14 4E 85 A1 |  if_e	sub	fp, #20
1eb74     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1eb78     34 00 90 5D |  if_ne	jmp	#LR__2431
1eb7c     00 26 06 F6 | 	mov	local01, #0
1eb80     A7 28 02 FB | 	rdlong	local02, fp
1eb84     0C 4E 05 F1 | 	add	fp, #12
1eb88     A7 12 02 FB | 	rdlong	arg01, fp
1eb8c     0C 4E 85 F1 | 	sub	fp, #12
1eb90     A8 EC BE FD | 	call	#_convertstring
1eb94     FD 14 02 F6 | 	mov	arg02, result1
1eb98     14 13 02 F6 | 	mov	arg01, local02
1eb9c     F8 83 B0 FD | 	call	#__system___string_cmp
1eba0     00 FA 55 F2 | 	cmps	result1, #0 wc
1eba4     00 26 26 36 |  if_ae	not	local01, #0
1eba8     A7 26 62 FC | 	wrlong	local01, fp
1ebac     64 00 90 FD | 	jmp	#LR__2433
1ebb0                 | LR__2431
1ebb0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1ebb0     08 4E 05 F1 | 	add	fp, #8
1ebb4     A7 26 02 FB | 	rdlong	local01, fp
1ebb8     08 4E 85 F1 | 	sub	fp, #8
1ebbc     2B 26 0E F2 | 	cmp	local01, #43 wz
1ebc0     14 4E 05 A1 |  if_e	add	fp, #20
1ebc4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ebc8     14 4E 85 A1 |  if_e	sub	fp, #20
1ebcc     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ebd0     3C 00 90 5D |  if_ne	jmp	#LR__2432
1ebd4     00 26 06 F6 | 	mov	local01, #0
1ebd8     A7 12 02 FB | 	rdlong	arg01, fp
1ebdc     5C EC BE FD | 	call	#_convertstring
1ebe0     FD 28 02 F6 | 	mov	local02, result1
1ebe4     0C 4E 05 F1 | 	add	fp, #12
1ebe8     A7 12 02 FB | 	rdlong	arg01, fp
1ebec     0C 4E 85 F1 | 	sub	fp, #12
1ebf0     48 EC BE FD | 	call	#_convertstring
1ebf4     FD 14 02 F6 | 	mov	arg02, result1
1ebf8     14 13 02 F6 | 	mov	arg01, local02
1ebfc     98 83 B0 FD | 	call	#__system___string_cmp
1ec00     00 FA 55 F2 | 	cmps	result1, #0 wc
1ec04     00 26 26 36 |  if_ae	not	local01, #0
1ec08     A7 26 62 FC | 	wrlong	local01, fp
1ec0c     04 00 90 FD | 	jmp	#LR__2433
1ec10                 | LR__2432
1ec10     A7 00 68 FC | 	wrlong	#0, fp
1ec14                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1ec14                 | LR__2433
1ec14     08 4E 05 F1 | 	add	fp, #8
1ec18     A7 38 68 FC | 	wrlong	#28, fp
1ec1c     08 4E 85 F1 | 	sub	fp, #8
1ec20                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1ec20     A7 26 0A FB | 	rdlong	local01, fp wz
1ec24     A7 02 68 5C |  if_ne	wrlong	#1, fp
1ec28     A7 12 02 F6 | 	mov	arg01, fp
1ec2c     2C EB BE FD | 	call	#_push
1ec30     A7 F0 03 F6 | 	mov	ptra, fp
1ec34     B2 00 A0 FD | 	call	#popregs_
1ec38                 | _do_ge_ret
1ec38     2D 00 64 FD | 	ret
1ec3c                 | 
1ec3c                 | ' 
1ec3c                 | ' '--------------------------------- greater than (>)
1ec3c                 | ' 
1ec3c                 | ' sub do_gt
1ec3c                 | _do_gt
1ec3c     05 4A 05 F6 | 	mov	COUNT_, #5
1ec40     A8 00 A0 FD | 	call	#pushregs_
1ec44     18 F0 07 F1 | 	add	ptra, #24
1ec48     78 EA BE FD | 	call	#_pop
1ec4c     FD 26 02 F6 | 	mov	local01, result1
1ec50     FE 28 02 F6 | 	mov	local02, result2
1ec54     FF 2A 02 F6 | 	mov	local03, result3
1ec58     0C 4E 05 F1 | 	add	fp, #12
1ec5c     A7 26 62 FC | 	wrlong	local01, fp
1ec60     04 4E 05 F1 | 	add	fp, #4
1ec64     A7 28 62 FC | 	wrlong	local02, fp
1ec68     04 4E 05 F1 | 	add	fp, #4
1ec6c     A7 2A 62 FC | 	wrlong	local03, fp
1ec70     14 4E 85 F1 | 	sub	fp, #20
1ec74     4C EA BE FD | 	call	#_pop
1ec78     FF 2A 02 F6 | 	mov	local03, result3
1ec7c     A7 FA 61 FC | 	wrlong	result1, fp
1ec80     04 4E 05 F1 | 	add	fp, #4
1ec84     A7 FC 61 FC | 	wrlong	result2, fp
1ec88     04 4E 05 F1 | 	add	fp, #4
1ec8c     A7 2A 62 FC | 	wrlong	local03, fp
1ec90                 | ' 
1ec90                 | ' t2=pop()
1ec90                 | ' t1=pop()
1ec90                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1ec90     08 4E 85 F1 | 	sub	fp, #8
1ec94     1F 2A 0E F2 | 	cmp	local03, #31 wz
1ec98     14 4E 05 A1 |  if_e	add	fp, #20
1ec9c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1eca0     14 4E 85 A1 |  if_e	sub	fp, #20
1eca4     16 2B 02 A6 |  if_e	mov	local03, local04
1eca8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ecac     28 00 90 5D |  if_ne	jmp	#LR__2440
1ecb0     00 26 06 F6 | 	mov	local01, #0
1ecb4     A7 12 02 FB | 	rdlong	arg01, fp
1ecb8     0C 4E 05 F1 | 	add	fp, #12
1ecbc     A7 14 02 FB | 	rdlong	arg02, fp
1ecc0     0C 4E 85 F1 | 	sub	fp, #12
1ecc4     D0 82 B0 FD | 	call	#__system___string_cmp
1ecc8     01 FA 55 F2 | 	cmps	result1, #1 wc
1eccc     00 26 26 36 |  if_ae	not	local01, #0
1ecd0     A7 26 62 FC | 	wrlong	local01, fp
1ecd4     20 04 90 FD | 	jmp	#LR__2453
1ecd8                 | LR__2440
1ecd8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1ecd8     08 4E 05 F1 | 	add	fp, #8
1ecdc     A7 26 02 FB | 	rdlong	local01, fp
1ece0     08 4E 85 F1 | 	sub	fp, #8
1ece4     1E 26 0E F2 | 	cmp	local01, #30 wz
1ece8     14 4E 05 A1 |  if_e	add	fp, #20
1ecec     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ecf0     14 4E 85 A1 |  if_e	sub	fp, #20
1ecf4     16 2B 02 A6 |  if_e	mov	local03, local04
1ecf8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ecfc     2C 00 90 5D |  if_ne	jmp	#LR__2441
1ed00     00 26 06 F6 | 	mov	local01, #0
1ed04     A7 12 02 FB | 	rdlong	arg01, fp
1ed08     0C 4E 05 F1 | 	add	fp, #12
1ed0c     A7 14 02 FB | 	rdlong	arg02, fp
1ed10     0C 4E 85 F1 | 	sub	fp, #12
1ed14     01 16 66 F6 | 	neg	arg03, #1
1ed18     00 B5 B0 FD | 	call	#__system___float_cmp
1ed1c     01 FA 55 F2 | 	cmps	result1, #1 wc
1ed20     00 26 26 36 |  if_ae	not	local01, #0
1ed24     A7 26 62 FC | 	wrlong	local01, fp
1ed28     CC 03 90 FD | 	jmp	#LR__2453
1ed2c                 | LR__2441
1ed2c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1ed2c     08 4E 05 F1 | 	add	fp, #8
1ed30     A7 26 02 FB | 	rdlong	local01, fp
1ed34     08 4E 85 F1 | 	sub	fp, #8
1ed38     1E 26 0E F2 | 	cmp	local01, #30 wz
1ed3c     14 4E 05 A1 |  if_e	add	fp, #20
1ed40     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed44     14 4E 85 A1 |  if_e	sub	fp, #20
1ed48     16 2B 02 A6 |  if_e	mov	local03, local04
1ed4c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ed50     48 00 90 5D |  if_ne	jmp	#LR__2442
1ed54     00 26 06 F6 | 	mov	local01, #0
1ed58     A7 28 02 FB | 	rdlong	local02, fp
1ed5c     0C 4E 05 F1 | 	add	fp, #12
1ed60     A7 12 02 FB | 	rdlong	arg01, fp
1ed64     0C 4E 85 F1 | 	sub	fp, #12
1ed68     09 13 52 F6 | 	abs	arg01, arg01 wc
1ed6c     1F 2E C6 C9 |  if_b	decod	local05, #31
1ed70     00 2E 06 36 |  if_ae	mov	local05, #0
1ed74     6C AC B0 FD | 	call	#__system___float_fromuns
1ed78     17 FB 61 F5 | 	xor	result1, local05
1ed7c     FD 14 02 F6 | 	mov	arg02, result1
1ed80     14 13 02 F6 | 	mov	arg01, local02
1ed84     01 16 66 F6 | 	neg	arg03, #1
1ed88     90 B4 B0 FD | 	call	#__system___float_cmp
1ed8c     01 FA 55 F2 | 	cmps	result1, #1 wc
1ed90     00 26 26 36 |  if_ae	not	local01, #0
1ed94     A7 26 62 FC | 	wrlong	local01, fp
1ed98     5C 03 90 FD | 	jmp	#LR__2453
1ed9c                 | LR__2442
1ed9c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1ed9c     08 4E 05 F1 | 	add	fp, #8
1eda0     A7 26 02 FB | 	rdlong	local01, fp
1eda4     08 4E 85 F1 | 	sub	fp, #8
1eda8     1E 26 0E F2 | 	cmp	local01, #30 wz
1edac     14 4E 05 A1 |  if_e	add	fp, #20
1edb0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1edb4     14 4E 85 A1 |  if_e	sub	fp, #20
1edb8     16 2B 02 A6 |  if_e	mov	local03, local04
1edbc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1edc0     38 00 90 5D |  if_ne	jmp	#LR__2443
1edc4     00 26 06 F6 | 	mov	local01, #0
1edc8     A7 28 02 FB | 	rdlong	local02, fp
1edcc     0C 4E 05 F1 | 	add	fp, #12
1edd0     A7 12 02 FB | 	rdlong	arg01, fp
1edd4     0C 4E 85 F1 | 	sub	fp, #12
1edd8     08 AC B0 FD | 	call	#__system___float_fromuns
1eddc     FD 14 02 F6 | 	mov	arg02, result1
1ede0     14 13 02 F6 | 	mov	arg01, local02
1ede4     01 16 66 F6 | 	neg	arg03, #1
1ede8     30 B4 B0 FD | 	call	#__system___float_cmp
1edec     01 FA 55 F2 | 	cmps	result1, #1 wc
1edf0     00 26 26 36 |  if_ae	not	local01, #0
1edf4     A7 26 62 FC | 	wrlong	local01, fp
1edf8     FC 02 90 FD | 	jmp	#LR__2453
1edfc                 | LR__2443
1edfc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1edfc     08 4E 05 F1 | 	add	fp, #8
1ee00     A7 26 02 FB | 	rdlong	local01, fp
1ee04     08 4E 85 F1 | 	sub	fp, #8
1ee08     1C 26 0E F2 | 	cmp	local01, #28 wz
1ee0c     14 4E 05 A1 |  if_e	add	fp, #20
1ee10     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ee14     14 4E 85 A1 |  if_e	sub	fp, #20
1ee18     16 2B 02 A6 |  if_e	mov	local03, local04
1ee1c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ee20     44 00 90 5D |  if_ne	jmp	#LR__2444
1ee24     00 26 06 F6 | 	mov	local01, #0
1ee28     A7 12 02 FB | 	rdlong	arg01, fp
1ee2c     09 13 52 F6 | 	abs	arg01, arg01 wc
1ee30     1F 2E C6 C9 |  if_b	decod	local05, #31
1ee34     00 2E 06 36 |  if_ae	mov	local05, #0
1ee38     A8 AB B0 FD | 	call	#__system___float_fromuns
1ee3c     17 FB 61 F5 | 	xor	result1, local05
1ee40     FD 12 02 F6 | 	mov	arg01, result1
1ee44     0C 4E 05 F1 | 	add	fp, #12
1ee48     A7 14 02 FB | 	rdlong	arg02, fp
1ee4c     0C 4E 85 F1 | 	sub	fp, #12
1ee50     01 16 66 F6 | 	neg	arg03, #1
1ee54     C4 B3 B0 FD | 	call	#__system___float_cmp
1ee58     01 FA 55 F2 | 	cmps	result1, #1 wc
1ee5c     00 26 26 36 |  if_ae	not	local01, #0
1ee60     A7 26 62 FC | 	wrlong	local01, fp
1ee64     90 02 90 FD | 	jmp	#LR__2453
1ee68                 | LR__2444
1ee68                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1ee68     08 4E 05 F1 | 	add	fp, #8
1ee6c     A7 26 02 FB | 	rdlong	local01, fp
1ee70     08 4E 85 F1 | 	sub	fp, #8
1ee74     1C 26 0E F2 | 	cmp	local01, #28 wz
1ee78     14 4E 05 A1 |  if_e	add	fp, #20
1ee7c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ee80     14 4E 85 A1 |  if_e	sub	fp, #20
1ee84     16 2B 02 A6 |  if_e	mov	local03, local04
1ee88     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ee8c     24 00 90 5D |  if_ne	jmp	#LR__2445
1ee90     00 26 06 F6 | 	mov	local01, #0
1ee94     A7 28 02 FB | 	rdlong	local02, fp
1ee98     0C 4E 05 F1 | 	add	fp, #12
1ee9c     A7 2A 02 FB | 	rdlong	local03, fp
1eea0     0C 4E 85 F1 | 	sub	fp, #12
1eea4     15 29 5A F2 | 	cmps	local02, local03 wcz
1eea8     01 26 66 16 |  if_a	neg	local01, #1
1eeac     A7 26 62 FC | 	wrlong	local01, fp
1eeb0     44 02 90 FD | 	jmp	#LR__2453
1eeb4                 | LR__2445
1eeb4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1eeb4     08 4E 05 F1 | 	add	fp, #8
1eeb8     A7 26 02 FB | 	rdlong	local01, fp
1eebc     08 4E 85 F1 | 	sub	fp, #8
1eec0     1C 26 0E F2 | 	cmp	local01, #28 wz
1eec4     14 4E 05 A1 |  if_e	add	fp, #20
1eec8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1eecc     14 4E 85 A1 |  if_e	sub	fp, #20
1eed0     16 2B 02 A6 |  if_e	mov	local03, local04
1eed4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1eed8     24 00 90 5D |  if_ne	jmp	#LR__2446
1eedc     00 26 06 F6 | 	mov	local01, #0
1eee0     A7 28 02 FB | 	rdlong	local02, fp
1eee4     0C 4E 05 F1 | 	add	fp, #12
1eee8     A7 2A 02 FB | 	rdlong	local03, fp
1eeec     0C 4E 85 F1 | 	sub	fp, #12
1eef0     15 29 5A F2 | 	cmps	local02, local03 wcz
1eef4     01 26 66 16 |  if_a	neg	local01, #1
1eef8     A7 26 62 FC | 	wrlong	local01, fp
1eefc     F8 01 90 FD | 	jmp	#LR__2453
1ef00                 | LR__2446
1ef00                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1ef00     08 4E 05 F1 | 	add	fp, #8
1ef04     A7 26 02 FB | 	rdlong	local01, fp
1ef08     08 4E 85 F1 | 	sub	fp, #8
1ef0c     1D 26 0E F2 | 	cmp	local01, #29 wz
1ef10     14 4E 05 A1 |  if_e	add	fp, #20
1ef14     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ef18     14 4E 85 A1 |  if_e	sub	fp, #20
1ef1c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1ef20     34 00 90 5D |  if_ne	jmp	#LR__2447
1ef24     00 26 06 F6 | 	mov	local01, #0
1ef28     A7 12 02 FB | 	rdlong	arg01, fp
1ef2c     B4 AA B0 FD | 	call	#__system___float_fromuns
1ef30     FD 12 02 F6 | 	mov	arg01, result1
1ef34     0C 4E 05 F1 | 	add	fp, #12
1ef38     A7 14 02 FB | 	rdlong	arg02, fp
1ef3c     0C 4E 85 F1 | 	sub	fp, #12
1ef40     01 16 66 F6 | 	neg	arg03, #1
1ef44     D4 B2 B0 FD | 	call	#__system___float_cmp
1ef48     01 FA 55 F2 | 	cmps	result1, #1 wc
1ef4c     00 26 26 36 |  if_ae	not	local01, #0
1ef50     A7 26 62 FC | 	wrlong	local01, fp
1ef54     A0 01 90 FD | 	jmp	#LR__2453
1ef58                 | LR__2447
1ef58                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1ef58     08 4E 05 F1 | 	add	fp, #8
1ef5c     A7 26 02 FB | 	rdlong	local01, fp
1ef60     08 4E 85 F1 | 	sub	fp, #8
1ef64     1D 26 0E F2 | 	cmp	local01, #29 wz
1ef68     14 4E 05 A1 |  if_e	add	fp, #20
1ef6c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ef70     14 4E 85 A1 |  if_e	sub	fp, #20
1ef74     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ef78     24 00 90 5D |  if_ne	jmp	#LR__2448
1ef7c     00 26 06 F6 | 	mov	local01, #0
1ef80     A7 28 02 FB | 	rdlong	local02, fp
1ef84     0C 4E 05 F1 | 	add	fp, #12
1ef88     A7 2A 02 FB | 	rdlong	local03, fp
1ef8c     0C 4E 85 F1 | 	sub	fp, #12
1ef90     15 29 5A F2 | 	cmps	local02, local03 wcz
1ef94     01 26 66 16 |  if_a	neg	local01, #1
1ef98     A7 26 62 FC | 	wrlong	local01, fp
1ef9c     58 01 90 FD | 	jmp	#LR__2453
1efa0                 | LR__2448
1efa0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1efa0     08 4E 05 F1 | 	add	fp, #8
1efa4     A7 26 02 FB | 	rdlong	local01, fp
1efa8     08 4E 85 F1 | 	sub	fp, #8
1efac     1D 26 0E F2 | 	cmp	local01, #29 wz
1efb0     14 4E 05 A1 |  if_e	add	fp, #20
1efb4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1efb8     14 4E 85 A1 |  if_e	sub	fp, #20
1efbc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1efc0     24 00 90 5D |  if_ne	jmp	#LR__2449
1efc4     00 26 06 F6 | 	mov	local01, #0
1efc8     A7 28 02 FB | 	rdlong	local02, fp
1efcc     0C 4E 05 F1 | 	add	fp, #12
1efd0     A7 2A 02 FB | 	rdlong	local03, fp
1efd4     0C 4E 85 F1 | 	sub	fp, #12
1efd8     15 29 1A F2 | 	cmp	local02, local03 wcz
1efdc     01 26 66 16 |  if_a	neg	local01, #1
1efe0     A7 26 62 FC | 	wrlong	local01, fp
1efe4     10 01 90 FD | 	jmp	#LR__2453
1efe8                 | LR__2449
1efe8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1efe8     08 4E 05 F1 | 	add	fp, #8
1efec     A7 26 02 FB | 	rdlong	local01, fp
1eff0     08 4E 85 F1 | 	sub	fp, #8
1eff4     2B 26 0E F2 | 	cmp	local01, #43 wz
1eff8     14 4E 05 A1 |  if_e	add	fp, #20
1effc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f000     14 4E 85 A1 |  if_e	sub	fp, #20
1f004     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f008     30 00 90 5D |  if_ne	jmp	#LR__2450
1f00c     00 26 06 F6 | 	mov	local01, #0
1f010     A7 12 02 FB | 	rdlong	arg01, fp
1f014     24 E8 BE FD | 	call	#_convertstring
1f018     FD 12 02 F6 | 	mov	arg01, result1
1f01c     0C 4E 05 F1 | 	add	fp, #12
1f020     A7 14 02 FB | 	rdlong	arg02, fp
1f024     0C 4E 85 F1 | 	sub	fp, #12
1f028     6C 7F B0 FD | 	call	#__system___string_cmp
1f02c     01 FA 55 F2 | 	cmps	result1, #1 wc
1f030     00 26 26 36 |  if_ae	not	local01, #0
1f034     A7 26 62 FC | 	wrlong	local01, fp
1f038     BC 00 90 FD | 	jmp	#LR__2453
1f03c                 | LR__2450
1f03c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1f03c     08 4E 05 F1 | 	add	fp, #8
1f040     A7 26 02 FB | 	rdlong	local01, fp
1f044     08 4E 85 F1 | 	sub	fp, #8
1f048     1F 26 0E F2 | 	cmp	local01, #31 wz
1f04c     14 4E 05 A1 |  if_e	add	fp, #20
1f050     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f054     14 4E 85 A1 |  if_e	sub	fp, #20
1f058     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f05c     34 00 90 5D |  if_ne	jmp	#LR__2451
1f060     00 26 06 F6 | 	mov	local01, #0
1f064     A7 28 02 FB | 	rdlong	local02, fp
1f068     0C 4E 05 F1 | 	add	fp, #12
1f06c     A7 12 02 FB | 	rdlong	arg01, fp
1f070     0C 4E 85 F1 | 	sub	fp, #12
1f074     C4 E7 BE FD | 	call	#_convertstring
1f078     FD 14 02 F6 | 	mov	arg02, result1
1f07c     14 13 02 F6 | 	mov	arg01, local02
1f080     14 7F B0 FD | 	call	#__system___string_cmp
1f084     01 FA 55 F2 | 	cmps	result1, #1 wc
1f088     00 26 26 36 |  if_ae	not	local01, #0
1f08c     A7 26 62 FC | 	wrlong	local01, fp
1f090     64 00 90 FD | 	jmp	#LR__2453
1f094                 | LR__2451
1f094                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1f094     08 4E 05 F1 | 	add	fp, #8
1f098     A7 26 02 FB | 	rdlong	local01, fp
1f09c     08 4E 85 F1 | 	sub	fp, #8
1f0a0     2B 26 0E F2 | 	cmp	local01, #43 wz
1f0a4     14 4E 05 A1 |  if_e	add	fp, #20
1f0a8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f0ac     14 4E 85 A1 |  if_e	sub	fp, #20
1f0b0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f0b4     3C 00 90 5D |  if_ne	jmp	#LR__2452
1f0b8     00 26 06 F6 | 	mov	local01, #0
1f0bc     A7 12 02 FB | 	rdlong	arg01, fp
1f0c0     78 E7 BE FD | 	call	#_convertstring
1f0c4     FD 28 02 F6 | 	mov	local02, result1
1f0c8     0C 4E 05 F1 | 	add	fp, #12
1f0cc     A7 12 02 FB | 	rdlong	arg01, fp
1f0d0     0C 4E 85 F1 | 	sub	fp, #12
1f0d4     64 E7 BE FD | 	call	#_convertstring
1f0d8     FD 14 02 F6 | 	mov	arg02, result1
1f0dc     14 13 02 F6 | 	mov	arg01, local02
1f0e0     B4 7E B0 FD | 	call	#__system___string_cmp
1f0e4     01 FA 55 F2 | 	cmps	result1, #1 wc
1f0e8     00 26 26 36 |  if_ae	not	local01, #0
1f0ec     A7 26 62 FC | 	wrlong	local01, fp
1f0f0     04 00 90 FD | 	jmp	#LR__2453
1f0f4                 | LR__2452
1f0f4     A7 00 68 FC | 	wrlong	#0, fp
1f0f8                 | LR__2453
1f0f8     08 4E 05 F1 | 	add	fp, #8
1f0fc     A7 38 68 FC | 	wrlong	#28, fp
1f100     08 4E 85 F1 | 	sub	fp, #8
1f104                 | ' t1.result.uresult=0
1f104                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f104     A7 26 0A FB | 	rdlong	local01, fp wz
1f108     A7 02 68 5C |  if_ne	wrlong	#1, fp
1f10c     A7 12 02 F6 | 	mov	arg01, fp
1f110     48 E6 BE FD | 	call	#_push
1f114     A7 F0 03 F6 | 	mov	ptra, fp
1f118     B2 00 A0 FD | 	call	#popregs_
1f11c                 | _do_gt_ret
1f11c     2D 00 64 FD | 	ret
1f120                 | 
1f120                 | ' 
1f120                 | ' '--------------------------------- less or equal (<=)
1f120                 | ' 
1f120                 | ' sub do_le
1f120                 | _do_le
1f120     05 4A 05 F6 | 	mov	COUNT_, #5
1f124     A8 00 A0 FD | 	call	#pushregs_
1f128     18 F0 07 F1 | 	add	ptra, #24
1f12c     94 E5 BE FD | 	call	#_pop
1f130     FD 26 02 F6 | 	mov	local01, result1
1f134     FE 28 02 F6 | 	mov	local02, result2
1f138     FF 2A 02 F6 | 	mov	local03, result3
1f13c     0C 4E 05 F1 | 	add	fp, #12
1f140     A7 26 62 FC | 	wrlong	local01, fp
1f144     04 4E 05 F1 | 	add	fp, #4
1f148     A7 28 62 FC | 	wrlong	local02, fp
1f14c     04 4E 05 F1 | 	add	fp, #4
1f150     A7 2A 62 FC | 	wrlong	local03, fp
1f154     14 4E 85 F1 | 	sub	fp, #20
1f158     68 E5 BE FD | 	call	#_pop
1f15c     FF 2A 02 F6 | 	mov	local03, result3
1f160     A7 FA 61 FC | 	wrlong	result1, fp
1f164     04 4E 05 F1 | 	add	fp, #4
1f168     A7 FC 61 FC | 	wrlong	result2, fp
1f16c     04 4E 05 F1 | 	add	fp, #4
1f170     A7 2A 62 FC | 	wrlong	local03, fp
1f174                 | ' 
1f174                 | ' t2=pop()
1f174                 | ' t1=pop()
1f174                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1f174     08 4E 85 F1 | 	sub	fp, #8
1f178     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f17c     14 4E 05 A1 |  if_e	add	fp, #20
1f180     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f184     14 4E 85 A1 |  if_e	sub	fp, #20
1f188     16 2B 02 A6 |  if_e	mov	local03, local04
1f18c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f190     28 00 90 5D |  if_ne	jmp	#LR__2460
1f194     00 26 06 F6 | 	mov	local01, #0
1f198     A7 12 02 FB | 	rdlong	arg01, fp
1f19c     0C 4E 05 F1 | 	add	fp, #12
1f1a0     A7 14 02 FB | 	rdlong	arg02, fp
1f1a4     0C 4E 85 F1 | 	sub	fp, #12
1f1a8     EC 7D B0 FD | 	call	#__system___string_cmp
1f1ac     01 FA 55 F2 | 	cmps	result1, #1 wc
1f1b0     00 26 26 C6 |  if_b	not	local01, #0
1f1b4     A7 26 62 FC | 	wrlong	local01, fp
1f1b8     20 04 90 FD | 	jmp	#LR__2473
1f1bc                 | LR__2460
1f1bc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1f1bc     08 4E 05 F1 | 	add	fp, #8
1f1c0     A7 26 02 FB | 	rdlong	local01, fp
1f1c4     08 4E 85 F1 | 	sub	fp, #8
1f1c8     1E 26 0E F2 | 	cmp	local01, #30 wz
1f1cc     14 4E 05 A1 |  if_e	add	fp, #20
1f1d0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f1d4     14 4E 85 A1 |  if_e	sub	fp, #20
1f1d8     16 2B 02 A6 |  if_e	mov	local03, local04
1f1dc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f1e0     2C 00 90 5D |  if_ne	jmp	#LR__2461
1f1e4     00 26 06 F6 | 	mov	local01, #0
1f1e8     A7 12 02 FB | 	rdlong	arg01, fp
1f1ec     0C 4E 05 F1 | 	add	fp, #12
1f1f0     A7 14 02 FB | 	rdlong	arg02, fp
1f1f4     0C 4E 85 F1 | 	sub	fp, #12
1f1f8     01 16 06 F6 | 	mov	arg03, #1
1f1fc     1C B0 B0 FD | 	call	#__system___float_cmp
1f200     01 FA 55 F2 | 	cmps	result1, #1 wc
1f204     00 26 26 C6 |  if_b	not	local01, #0
1f208     A7 26 62 FC | 	wrlong	local01, fp
1f20c     CC 03 90 FD | 	jmp	#LR__2473
1f210                 | LR__2461
1f210                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1f210     08 4E 05 F1 | 	add	fp, #8
1f214     A7 26 02 FB | 	rdlong	local01, fp
1f218     08 4E 85 F1 | 	sub	fp, #8
1f21c     1E 26 0E F2 | 	cmp	local01, #30 wz
1f220     14 4E 05 A1 |  if_e	add	fp, #20
1f224     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f228     14 4E 85 A1 |  if_e	sub	fp, #20
1f22c     16 2B 02 A6 |  if_e	mov	local03, local04
1f230     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f234     48 00 90 5D |  if_ne	jmp	#LR__2462
1f238     00 26 06 F6 | 	mov	local01, #0
1f23c     A7 28 02 FB | 	rdlong	local02, fp
1f240     0C 4E 05 F1 | 	add	fp, #12
1f244     A7 12 02 FB | 	rdlong	arg01, fp
1f248     0C 4E 85 F1 | 	sub	fp, #12
1f24c     09 13 52 F6 | 	abs	arg01, arg01 wc
1f250     1F 2E C6 C9 |  if_b	decod	local05, #31
1f254     00 2E 06 36 |  if_ae	mov	local05, #0
1f258     88 A7 B0 FD | 	call	#__system___float_fromuns
1f25c     17 FB 61 F5 | 	xor	result1, local05
1f260     FD 14 02 F6 | 	mov	arg02, result1
1f264     14 13 02 F6 | 	mov	arg01, local02
1f268     01 16 06 F6 | 	mov	arg03, #1
1f26c     AC AF B0 FD | 	call	#__system___float_cmp
1f270     01 FA 55 F2 | 	cmps	result1, #1 wc
1f274     00 26 26 C6 |  if_b	not	local01, #0
1f278     A7 26 62 FC | 	wrlong	local01, fp
1f27c     5C 03 90 FD | 	jmp	#LR__2473
1f280                 | LR__2462
1f280                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1f280     08 4E 05 F1 | 	add	fp, #8
1f284     A7 26 02 FB | 	rdlong	local01, fp
1f288     08 4E 85 F1 | 	sub	fp, #8
1f28c     1E 26 0E F2 | 	cmp	local01, #30 wz
1f290     14 4E 05 A1 |  if_e	add	fp, #20
1f294     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f298     14 4E 85 A1 |  if_e	sub	fp, #20
1f29c     16 2B 02 A6 |  if_e	mov	local03, local04
1f2a0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f2a4     38 00 90 5D |  if_ne	jmp	#LR__2463
1f2a8     00 26 06 F6 | 	mov	local01, #0
1f2ac     A7 28 02 FB | 	rdlong	local02, fp
1f2b0     0C 4E 05 F1 | 	add	fp, #12
1f2b4     A7 12 02 FB | 	rdlong	arg01, fp
1f2b8     0C 4E 85 F1 | 	sub	fp, #12
1f2bc     24 A7 B0 FD | 	call	#__system___float_fromuns
1f2c0     FD 14 02 F6 | 	mov	arg02, result1
1f2c4     14 13 02 F6 | 	mov	arg01, local02
1f2c8     01 16 06 F6 | 	mov	arg03, #1
1f2cc     4C AF B0 FD | 	call	#__system___float_cmp
1f2d0     01 FA 55 F2 | 	cmps	result1, #1 wc
1f2d4     00 26 26 C6 |  if_b	not	local01, #0
1f2d8     A7 26 62 FC | 	wrlong	local01, fp
1f2dc     FC 02 90 FD | 	jmp	#LR__2473
1f2e0                 | LR__2463
1f2e0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1f2e0     08 4E 05 F1 | 	add	fp, #8
1f2e4     A7 26 02 FB | 	rdlong	local01, fp
1f2e8     08 4E 85 F1 | 	sub	fp, #8
1f2ec     1C 26 0E F2 | 	cmp	local01, #28 wz
1f2f0     14 4E 05 A1 |  if_e	add	fp, #20
1f2f4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f2f8     14 4E 85 A1 |  if_e	sub	fp, #20
1f2fc     16 2B 02 A6 |  if_e	mov	local03, local04
1f300     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f304     44 00 90 5D |  if_ne	jmp	#LR__2464
1f308     00 26 06 F6 | 	mov	local01, #0
1f30c     A7 12 02 FB | 	rdlong	arg01, fp
1f310     09 13 52 F6 | 	abs	arg01, arg01 wc
1f314     1F 2E C6 C9 |  if_b	decod	local05, #31
1f318     00 2E 06 36 |  if_ae	mov	local05, #0
1f31c     C4 A6 B0 FD | 	call	#__system___float_fromuns
1f320     17 FB 61 F5 | 	xor	result1, local05
1f324     FD 12 02 F6 | 	mov	arg01, result1
1f328     0C 4E 05 F1 | 	add	fp, #12
1f32c     A7 14 02 FB | 	rdlong	arg02, fp
1f330     0C 4E 85 F1 | 	sub	fp, #12
1f334     01 16 06 F6 | 	mov	arg03, #1
1f338     E0 AE B0 FD | 	call	#__system___float_cmp
1f33c     01 FA 55 F2 | 	cmps	result1, #1 wc
1f340     00 26 26 C6 |  if_b	not	local01, #0
1f344     A7 26 62 FC | 	wrlong	local01, fp
1f348     90 02 90 FD | 	jmp	#LR__2473
1f34c                 | LR__2464
1f34c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1f34c     08 4E 05 F1 | 	add	fp, #8
1f350     A7 26 02 FB | 	rdlong	local01, fp
1f354     08 4E 85 F1 | 	sub	fp, #8
1f358     1C 26 0E F2 | 	cmp	local01, #28 wz
1f35c     14 4E 05 A1 |  if_e	add	fp, #20
1f360     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f364     14 4E 85 A1 |  if_e	sub	fp, #20
1f368     16 2B 02 A6 |  if_e	mov	local03, local04
1f36c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f370     24 00 90 5D |  if_ne	jmp	#LR__2465
1f374     00 26 06 F6 | 	mov	local01, #0
1f378     A7 28 02 FB | 	rdlong	local02, fp
1f37c     0C 4E 05 F1 | 	add	fp, #12
1f380     A7 2A 02 FB | 	rdlong	local03, fp
1f384     0C 4E 85 F1 | 	sub	fp, #12
1f388     15 29 5A F2 | 	cmps	local02, local03 wcz
1f38c     01 26 66 E6 |  if_be	neg	local01, #1
1f390     A7 26 62 FC | 	wrlong	local01, fp
1f394     44 02 90 FD | 	jmp	#LR__2473
1f398                 | LR__2465
1f398                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1f398     08 4E 05 F1 | 	add	fp, #8
1f39c     A7 26 02 FB | 	rdlong	local01, fp
1f3a0     08 4E 85 F1 | 	sub	fp, #8
1f3a4     1C 26 0E F2 | 	cmp	local01, #28 wz
1f3a8     14 4E 05 A1 |  if_e	add	fp, #20
1f3ac     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f3b0     14 4E 85 A1 |  if_e	sub	fp, #20
1f3b4     16 2B 02 A6 |  if_e	mov	local03, local04
1f3b8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f3bc     24 00 90 5D |  if_ne	jmp	#LR__2466
1f3c0     00 26 06 F6 | 	mov	local01, #0
1f3c4     A7 28 02 FB | 	rdlong	local02, fp
1f3c8     0C 4E 05 F1 | 	add	fp, #12
1f3cc     A7 2A 02 FB | 	rdlong	local03, fp
1f3d0     0C 4E 85 F1 | 	sub	fp, #12
1f3d4     15 29 5A F2 | 	cmps	local02, local03 wcz
1f3d8     01 26 66 E6 |  if_be	neg	local01, #1
1f3dc     A7 26 62 FC | 	wrlong	local01, fp
1f3e0     F8 01 90 FD | 	jmp	#LR__2473
1f3e4                 | LR__2466
1f3e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1f3e4     08 4E 05 F1 | 	add	fp, #8
1f3e8     A7 26 02 FB | 	rdlong	local01, fp
1f3ec     08 4E 85 F1 | 	sub	fp, #8
1f3f0     1D 26 0E F2 | 	cmp	local01, #29 wz
1f3f4     14 4E 05 A1 |  if_e	add	fp, #20
1f3f8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f3fc     14 4E 85 A1 |  if_e	sub	fp, #20
1f400     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1f404     34 00 90 5D |  if_ne	jmp	#LR__2467
1f408     00 26 06 F6 | 	mov	local01, #0
1f40c     A7 12 02 FB | 	rdlong	arg01, fp
1f410     D0 A5 B0 FD | 	call	#__system___float_fromuns
1f414     FD 12 02 F6 | 	mov	arg01, result1
1f418     0C 4E 05 F1 | 	add	fp, #12
1f41c     A7 14 02 FB | 	rdlong	arg02, fp
1f420     0C 4E 85 F1 | 	sub	fp, #12
1f424     01 16 06 F6 | 	mov	arg03, #1
1f428     F0 AD B0 FD | 	call	#__system___float_cmp
1f42c     01 FA 55 F2 | 	cmps	result1, #1 wc
1f430     00 26 26 C6 |  if_b	not	local01, #0
1f434     A7 26 62 FC | 	wrlong	local01, fp
1f438     A0 01 90 FD | 	jmp	#LR__2473
1f43c                 | LR__2467
1f43c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1f43c     08 4E 05 F1 | 	add	fp, #8
1f440     A7 26 02 FB | 	rdlong	local01, fp
1f444     08 4E 85 F1 | 	sub	fp, #8
1f448     1D 26 0E F2 | 	cmp	local01, #29 wz
1f44c     14 4E 05 A1 |  if_e	add	fp, #20
1f450     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f454     14 4E 85 A1 |  if_e	sub	fp, #20
1f458     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f45c     24 00 90 5D |  if_ne	jmp	#LR__2468
1f460     00 26 06 F6 | 	mov	local01, #0
1f464     A7 28 02 FB | 	rdlong	local02, fp
1f468     0C 4E 05 F1 | 	add	fp, #12
1f46c     A7 2A 02 FB | 	rdlong	local03, fp
1f470     0C 4E 85 F1 | 	sub	fp, #12
1f474     15 29 5A F2 | 	cmps	local02, local03 wcz
1f478     01 26 66 E6 |  if_be	neg	local01, #1
1f47c     A7 26 62 FC | 	wrlong	local01, fp
1f480     58 01 90 FD | 	jmp	#LR__2473
1f484                 | LR__2468
1f484                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1f484     08 4E 05 F1 | 	add	fp, #8
1f488     A7 26 02 FB | 	rdlong	local01, fp
1f48c     08 4E 85 F1 | 	sub	fp, #8
1f490     1D 26 0E F2 | 	cmp	local01, #29 wz
1f494     14 4E 05 A1 |  if_e	add	fp, #20
1f498     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f49c     14 4E 85 A1 |  if_e	sub	fp, #20
1f4a0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f4a4     24 00 90 5D |  if_ne	jmp	#LR__2469
1f4a8     00 26 06 F6 | 	mov	local01, #0
1f4ac     A7 28 02 FB | 	rdlong	local02, fp
1f4b0     0C 4E 05 F1 | 	add	fp, #12
1f4b4     A7 2A 02 FB | 	rdlong	local03, fp
1f4b8     0C 4E 85 F1 | 	sub	fp, #12
1f4bc     15 29 1A F2 | 	cmp	local02, local03 wcz
1f4c0     01 26 66 E6 |  if_be	neg	local01, #1
1f4c4     A7 26 62 FC | 	wrlong	local01, fp
1f4c8     10 01 90 FD | 	jmp	#LR__2473
1f4cc                 | LR__2469
1f4cc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1f4cc     08 4E 05 F1 | 	add	fp, #8
1f4d0     A7 26 02 FB | 	rdlong	local01, fp
1f4d4     08 4E 85 F1 | 	sub	fp, #8
1f4d8     2B 26 0E F2 | 	cmp	local01, #43 wz
1f4dc     14 4E 05 A1 |  if_e	add	fp, #20
1f4e0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f4e4     14 4E 85 A1 |  if_e	sub	fp, #20
1f4e8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f4ec     30 00 90 5D |  if_ne	jmp	#LR__2470
1f4f0     00 26 06 F6 | 	mov	local01, #0
1f4f4     A7 12 02 FB | 	rdlong	arg01, fp
1f4f8     40 E3 BE FD | 	call	#_convertstring
1f4fc     FD 12 02 F6 | 	mov	arg01, result1
1f500     0C 4E 05 F1 | 	add	fp, #12
1f504     A7 14 02 FB | 	rdlong	arg02, fp
1f508     0C 4E 85 F1 | 	sub	fp, #12
1f50c     88 7A B0 FD | 	call	#__system___string_cmp
1f510     01 FA 55 F2 | 	cmps	result1, #1 wc
1f514     00 26 26 C6 |  if_b	not	local01, #0
1f518     A7 26 62 FC | 	wrlong	local01, fp
1f51c     BC 00 90 FD | 	jmp	#LR__2473
1f520                 | LR__2470
1f520                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1f520     08 4E 05 F1 | 	add	fp, #8
1f524     A7 26 02 FB | 	rdlong	local01, fp
1f528     08 4E 85 F1 | 	sub	fp, #8
1f52c     1F 26 0E F2 | 	cmp	local01, #31 wz
1f530     14 4E 05 A1 |  if_e	add	fp, #20
1f534     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f538     14 4E 85 A1 |  if_e	sub	fp, #20
1f53c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f540     34 00 90 5D |  if_ne	jmp	#LR__2471
1f544     00 26 06 F6 | 	mov	local01, #0
1f548     A7 28 02 FB | 	rdlong	local02, fp
1f54c     0C 4E 05 F1 | 	add	fp, #12
1f550     A7 12 02 FB | 	rdlong	arg01, fp
1f554     0C 4E 85 F1 | 	sub	fp, #12
1f558     E0 E2 BE FD | 	call	#_convertstring
1f55c     FD 14 02 F6 | 	mov	arg02, result1
1f560     14 13 02 F6 | 	mov	arg01, local02
1f564     30 7A B0 FD | 	call	#__system___string_cmp
1f568     01 FA 55 F2 | 	cmps	result1, #1 wc
1f56c     00 26 26 C6 |  if_b	not	local01, #0
1f570     A7 26 62 FC | 	wrlong	local01, fp
1f574     64 00 90 FD | 	jmp	#LR__2473
1f578                 | LR__2471
1f578                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1f578     08 4E 05 F1 | 	add	fp, #8
1f57c     A7 26 02 FB | 	rdlong	local01, fp
1f580     08 4E 85 F1 | 	sub	fp, #8
1f584     2B 26 0E F2 | 	cmp	local01, #43 wz
1f588     14 4E 05 A1 |  if_e	add	fp, #20
1f58c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f590     14 4E 85 A1 |  if_e	sub	fp, #20
1f594     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f598     3C 00 90 5D |  if_ne	jmp	#LR__2472
1f59c     00 26 06 F6 | 	mov	local01, #0
1f5a0     A7 12 02 FB | 	rdlong	arg01, fp
1f5a4     94 E2 BE FD | 	call	#_convertstring
1f5a8     FD 28 02 F6 | 	mov	local02, result1
1f5ac     0C 4E 05 F1 | 	add	fp, #12
1f5b0     A7 12 02 FB | 	rdlong	arg01, fp
1f5b4     0C 4E 85 F1 | 	sub	fp, #12
1f5b8     80 E2 BE FD | 	call	#_convertstring
1f5bc     FD 14 02 F6 | 	mov	arg02, result1
1f5c0     14 13 02 F6 | 	mov	arg01, local02
1f5c4     D0 79 B0 FD | 	call	#__system___string_cmp
1f5c8     01 FA 55 F2 | 	cmps	result1, #1 wc
1f5cc     00 26 26 C6 |  if_b	not	local01, #0
1f5d0     A7 26 62 FC | 	wrlong	local01, fp
1f5d4     04 00 90 FD | 	jmp	#LR__2473
1f5d8                 | LR__2472
1f5d8     A7 00 68 FC | 	wrlong	#0, fp
1f5dc                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f5dc                 | LR__2473
1f5dc     08 4E 05 F1 | 	add	fp, #8
1f5e0     A7 38 68 FC | 	wrlong	#28, fp
1f5e4     08 4E 85 F1 | 	sub	fp, #8
1f5e8     A7 12 02 F6 | 	mov	arg01, fp
1f5ec     6C E1 BE FD | 	call	#_push
1f5f0     A7 F0 03 F6 | 	mov	ptra, fp
1f5f4     B2 00 A0 FD | 	call	#popregs_
1f5f8                 | _do_le_ret
1f5f8     2D 00 64 FD | 	ret
1f5fc                 | 
1f5fc                 | ' 
1f5fc                 | ' '--------------------------------- less than (<)
1f5fc                 | ' 
1f5fc                 | ' sub do_lt
1f5fc                 | _do_lt
1f5fc     05 4A 05 F6 | 	mov	COUNT_, #5
1f600     A8 00 A0 FD | 	call	#pushregs_
1f604     18 F0 07 F1 | 	add	ptra, #24
1f608     B8 E0 BE FD | 	call	#_pop
1f60c     FD 26 02 F6 | 	mov	local01, result1
1f610     FE 28 02 F6 | 	mov	local02, result2
1f614     FF 2A 02 F6 | 	mov	local03, result3
1f618     0C 4E 05 F1 | 	add	fp, #12
1f61c     A7 26 62 FC | 	wrlong	local01, fp
1f620     04 4E 05 F1 | 	add	fp, #4
1f624     A7 28 62 FC | 	wrlong	local02, fp
1f628     04 4E 05 F1 | 	add	fp, #4
1f62c     A7 2A 62 FC | 	wrlong	local03, fp
1f630     14 4E 85 F1 | 	sub	fp, #20
1f634     8C E0 BE FD | 	call	#_pop
1f638     FF 2A 02 F6 | 	mov	local03, result3
1f63c     A7 FA 61 FC | 	wrlong	result1, fp
1f640     04 4E 05 F1 | 	add	fp, #4
1f644     A7 FC 61 FC | 	wrlong	result2, fp
1f648     04 4E 05 F1 | 	add	fp, #4
1f64c     A7 2A 62 FC | 	wrlong	local03, fp
1f650                 | ' 
1f650                 | ' t2=pop()
1f650                 | ' t1=pop()
1f650                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1f650     08 4E 85 F1 | 	sub	fp, #8
1f654     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f658     14 4E 05 A1 |  if_e	add	fp, #20
1f65c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f660     14 4E 85 A1 |  if_e	sub	fp, #20
1f664     16 2B 02 A6 |  if_e	mov	local03, local04
1f668     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f66c     28 00 90 5D |  if_ne	jmp	#LR__2480
1f670     00 26 06 F6 | 	mov	local01, #0
1f674     A7 12 02 FB | 	rdlong	arg01, fp
1f678     0C 4E 05 F1 | 	add	fp, #12
1f67c     A7 14 02 FB | 	rdlong	arg02, fp
1f680     0C 4E 85 F1 | 	sub	fp, #12
1f684     10 79 B0 FD | 	call	#__system___string_cmp
1f688     00 FA 55 F2 | 	cmps	result1, #0 wc
1f68c     00 26 26 C6 |  if_b	not	local01, #0
1f690     A7 26 62 FC | 	wrlong	local01, fp
1f694     10 04 90 FD | 	jmp	#LR__2493
1f698                 | LR__2480
1f698                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1f698     08 4E 05 F1 | 	add	fp, #8
1f69c     A7 26 02 FB | 	rdlong	local01, fp
1f6a0     08 4E 85 F1 | 	sub	fp, #8
1f6a4     1E 26 0E F2 | 	cmp	local01, #30 wz
1f6a8     14 4E 05 A1 |  if_e	add	fp, #20
1f6ac     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f6b0     14 4E 85 A1 |  if_e	sub	fp, #20
1f6b4     16 2B 02 A6 |  if_e	mov	local03, local04
1f6b8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f6bc     2C 00 90 5D |  if_ne	jmp	#LR__2481
1f6c0     00 26 06 F6 | 	mov	local01, #0
1f6c4     A7 12 02 FB | 	rdlong	arg01, fp
1f6c8     0C 4E 05 F1 | 	add	fp, #12
1f6cc     A7 14 02 FB | 	rdlong	arg02, fp
1f6d0     0C 4E 85 F1 | 	sub	fp, #12
1f6d4     01 16 06 F6 | 	mov	arg03, #1
1f6d8     40 AB B0 FD | 	call	#__system___float_cmp
1f6dc     00 FA 55 F2 | 	cmps	result1, #0 wc
1f6e0     00 26 26 C6 |  if_b	not	local01, #0
1f6e4     A7 26 62 FC | 	wrlong	local01, fp
1f6e8     BC 03 90 FD | 	jmp	#LR__2493
1f6ec                 | LR__2481
1f6ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1f6ec     08 4E 05 F1 | 	add	fp, #8
1f6f0     A7 26 02 FB | 	rdlong	local01, fp
1f6f4     08 4E 85 F1 | 	sub	fp, #8
1f6f8     1E 26 0E F2 | 	cmp	local01, #30 wz
1f6fc     14 4E 05 A1 |  if_e	add	fp, #20
1f700     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f704     14 4E 85 A1 |  if_e	sub	fp, #20
1f708     16 2B 02 A6 |  if_e	mov	local03, local04
1f70c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f710     48 00 90 5D |  if_ne	jmp	#LR__2482
1f714     00 26 06 F6 | 	mov	local01, #0
1f718     A7 28 02 FB | 	rdlong	local02, fp
1f71c     0C 4E 05 F1 | 	add	fp, #12
1f720     A7 12 02 FB | 	rdlong	arg01, fp
1f724     0C 4E 85 F1 | 	sub	fp, #12
1f728     09 13 52 F6 | 	abs	arg01, arg01 wc
1f72c     1F 2E C6 C9 |  if_b	decod	local05, #31
1f730     00 2E 06 36 |  if_ae	mov	local05, #0
1f734     AC A2 B0 FD | 	call	#__system___float_fromuns
1f738     17 FB 61 F5 | 	xor	result1, local05
1f73c     FD 14 02 F6 | 	mov	arg02, result1
1f740     14 13 02 F6 | 	mov	arg01, local02
1f744     01 16 06 F6 | 	mov	arg03, #1
1f748     D0 AA B0 FD | 	call	#__system___float_cmp
1f74c     00 FA 55 F2 | 	cmps	result1, #0 wc
1f750     00 26 26 C6 |  if_b	not	local01, #0
1f754     A7 26 62 FC | 	wrlong	local01, fp
1f758     4C 03 90 FD | 	jmp	#LR__2493
1f75c                 | LR__2482
1f75c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1f75c     08 4E 05 F1 | 	add	fp, #8
1f760     A7 26 02 FB | 	rdlong	local01, fp
1f764     08 4E 85 F1 | 	sub	fp, #8
1f768     1E 26 0E F2 | 	cmp	local01, #30 wz
1f76c     14 4E 05 A1 |  if_e	add	fp, #20
1f770     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f774     14 4E 85 A1 |  if_e	sub	fp, #20
1f778     16 2B 02 A6 |  if_e	mov	local03, local04
1f77c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f780     38 00 90 5D |  if_ne	jmp	#LR__2483
1f784     00 26 06 F6 | 	mov	local01, #0
1f788     A7 28 02 FB | 	rdlong	local02, fp
1f78c     0C 4E 05 F1 | 	add	fp, #12
1f790     A7 12 02 FB | 	rdlong	arg01, fp
1f794     0C 4E 85 F1 | 	sub	fp, #12
1f798     48 A2 B0 FD | 	call	#__system___float_fromuns
1f79c     FD 14 02 F6 | 	mov	arg02, result1
1f7a0     14 13 02 F6 | 	mov	arg01, local02
1f7a4     01 16 06 F6 | 	mov	arg03, #1
1f7a8     70 AA B0 FD | 	call	#__system___float_cmp
1f7ac     00 FA 55 F2 | 	cmps	result1, #0 wc
1f7b0     00 26 26 C6 |  if_b	not	local01, #0
1f7b4     A7 26 62 FC | 	wrlong	local01, fp
1f7b8     EC 02 90 FD | 	jmp	#LR__2493
1f7bc                 | LR__2483
1f7bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1f7bc     08 4E 05 F1 | 	add	fp, #8
1f7c0     A7 26 02 FB | 	rdlong	local01, fp
1f7c4     08 4E 85 F1 | 	sub	fp, #8
1f7c8     1C 26 0E F2 | 	cmp	local01, #28 wz
1f7cc     14 4E 05 A1 |  if_e	add	fp, #20
1f7d0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f7d4     14 4E 85 A1 |  if_e	sub	fp, #20
1f7d8     16 2B 02 A6 |  if_e	mov	local03, local04
1f7dc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f7e0     44 00 90 5D |  if_ne	jmp	#LR__2484
1f7e4     00 26 06 F6 | 	mov	local01, #0
1f7e8     A7 12 02 FB | 	rdlong	arg01, fp
1f7ec     09 13 52 F6 | 	abs	arg01, arg01 wc
1f7f0     1F 2E C6 C9 |  if_b	decod	local05, #31
1f7f4     00 2E 06 36 |  if_ae	mov	local05, #0
1f7f8     E8 A1 B0 FD | 	call	#__system___float_fromuns
1f7fc     17 FB 61 F5 | 	xor	result1, local05
1f800     FD 12 02 F6 | 	mov	arg01, result1
1f804     0C 4E 05 F1 | 	add	fp, #12
1f808     A7 14 02 FB | 	rdlong	arg02, fp
1f80c     0C 4E 85 F1 | 	sub	fp, #12
1f810     01 16 06 F6 | 	mov	arg03, #1
1f814     04 AA B0 FD | 	call	#__system___float_cmp
1f818     00 FA 55 F2 | 	cmps	result1, #0 wc
1f81c     00 26 26 C6 |  if_b	not	local01, #0
1f820     A7 26 62 FC | 	wrlong	local01, fp
1f824     80 02 90 FD | 	jmp	#LR__2493
1f828                 | LR__2484
1f828                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1f828     08 4E 05 F1 | 	add	fp, #8
1f82c     A7 26 02 FB | 	rdlong	local01, fp
1f830     08 4E 85 F1 | 	sub	fp, #8
1f834     1C 26 0E F2 | 	cmp	local01, #28 wz
1f838     14 4E 05 A1 |  if_e	add	fp, #20
1f83c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f840     14 4E 85 A1 |  if_e	sub	fp, #20
1f844     16 2B 02 A6 |  if_e	mov	local03, local04
1f848     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f84c     20 00 90 5D |  if_ne	jmp	#LR__2485
1f850     A7 28 02 FB | 	rdlong	local02, fp
1f854     0C 4E 05 F1 | 	add	fp, #12
1f858     A7 2A 02 FB | 	rdlong	local03, fp
1f85c     0C 4E 85 F1 | 	sub	fp, #12
1f860     15 29 52 F2 | 	cmps	local02, local03 wc
1f864     13 27 A2 F1 | 	subx	local01, local01
1f868     A7 26 62 FC | 	wrlong	local01, fp
1f86c     38 02 90 FD | 	jmp	#LR__2493
1f870                 | LR__2485
1f870                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1f870     08 4E 05 F1 | 	add	fp, #8
1f874     A7 26 02 FB | 	rdlong	local01, fp
1f878     08 4E 85 F1 | 	sub	fp, #8
1f87c     1C 26 0E F2 | 	cmp	local01, #28 wz
1f880     14 4E 05 A1 |  if_e	add	fp, #20
1f884     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f888     14 4E 85 A1 |  if_e	sub	fp, #20
1f88c     16 2B 02 A6 |  if_e	mov	local03, local04
1f890     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f894     20 00 90 5D |  if_ne	jmp	#LR__2486
1f898     A7 28 02 FB | 	rdlong	local02, fp
1f89c     0C 4E 05 F1 | 	add	fp, #12
1f8a0     A7 2A 02 FB | 	rdlong	local03, fp
1f8a4     0C 4E 85 F1 | 	sub	fp, #12
1f8a8     15 29 52 F2 | 	cmps	local02, local03 wc
1f8ac     13 27 A2 F1 | 	subx	local01, local01
1f8b0     A7 26 62 FC | 	wrlong	local01, fp
1f8b4     F0 01 90 FD | 	jmp	#LR__2493
1f8b8                 | LR__2486
1f8b8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1f8b8     08 4E 05 F1 | 	add	fp, #8
1f8bc     A7 26 02 FB | 	rdlong	local01, fp
1f8c0     08 4E 85 F1 | 	sub	fp, #8
1f8c4     1D 26 0E F2 | 	cmp	local01, #29 wz
1f8c8     14 4E 05 A1 |  if_e	add	fp, #20
1f8cc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f8d0     14 4E 85 A1 |  if_e	sub	fp, #20
1f8d4     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1f8d8     34 00 90 5D |  if_ne	jmp	#LR__2487
1f8dc     00 26 06 F6 | 	mov	local01, #0
1f8e0     A7 12 02 FB | 	rdlong	arg01, fp
1f8e4     FC A0 B0 FD | 	call	#__system___float_fromuns
1f8e8     FD 12 02 F6 | 	mov	arg01, result1
1f8ec     0C 4E 05 F1 | 	add	fp, #12
1f8f0     A7 14 02 FB | 	rdlong	arg02, fp
1f8f4     0C 4E 85 F1 | 	sub	fp, #12
1f8f8     01 16 06 F6 | 	mov	arg03, #1
1f8fc     1C A9 B0 FD | 	call	#__system___float_cmp
1f900     00 FA 55 F2 | 	cmps	result1, #0 wc
1f904     00 26 26 C6 |  if_b	not	local01, #0
1f908     A7 26 62 FC | 	wrlong	local01, fp
1f90c     98 01 90 FD | 	jmp	#LR__2493
1f910                 | LR__2487
1f910                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1f910     08 4E 05 F1 | 	add	fp, #8
1f914     A7 26 02 FB | 	rdlong	local01, fp
1f918     08 4E 85 F1 | 	sub	fp, #8
1f91c     1D 26 0E F2 | 	cmp	local01, #29 wz
1f920     14 4E 05 A1 |  if_e	add	fp, #20
1f924     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f928     14 4E 85 A1 |  if_e	sub	fp, #20
1f92c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f930     20 00 90 5D |  if_ne	jmp	#LR__2488
1f934     A7 28 02 FB | 	rdlong	local02, fp
1f938     0C 4E 05 F1 | 	add	fp, #12
1f93c     A7 2A 02 FB | 	rdlong	local03, fp
1f940     0C 4E 85 F1 | 	sub	fp, #12
1f944     15 29 52 F2 | 	cmps	local02, local03 wc
1f948     13 27 A2 F1 | 	subx	local01, local01
1f94c     A7 26 62 FC | 	wrlong	local01, fp
1f950     54 01 90 FD | 	jmp	#LR__2493
1f954                 | LR__2488
1f954                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1f954     08 4E 05 F1 | 	add	fp, #8
1f958     A7 26 02 FB | 	rdlong	local01, fp
1f95c     08 4E 85 F1 | 	sub	fp, #8
1f960     1D 26 0E F2 | 	cmp	local01, #29 wz
1f964     14 4E 05 A1 |  if_e	add	fp, #20
1f968     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f96c     14 4E 85 A1 |  if_e	sub	fp, #20
1f970     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f974     20 00 90 5D |  if_ne	jmp	#LR__2489
1f978     A7 28 02 FB | 	rdlong	local02, fp
1f97c     0C 4E 05 F1 | 	add	fp, #12
1f980     A7 2A 02 FB | 	rdlong	local03, fp
1f984     0C 4E 85 F1 | 	sub	fp, #12
1f988     15 29 12 F2 | 	cmp	local02, local03 wc
1f98c     13 27 A2 F1 | 	subx	local01, local01
1f990     A7 26 62 FC | 	wrlong	local01, fp
1f994     10 01 90 FD | 	jmp	#LR__2493
1f998                 | LR__2489
1f998                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1f998     08 4E 05 F1 | 	add	fp, #8
1f99c     A7 26 02 FB | 	rdlong	local01, fp
1f9a0     08 4E 85 F1 | 	sub	fp, #8
1f9a4     2B 26 0E F2 | 	cmp	local01, #43 wz
1f9a8     14 4E 05 A1 |  if_e	add	fp, #20
1f9ac     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f9b0     14 4E 85 A1 |  if_e	sub	fp, #20
1f9b4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f9b8     30 00 90 5D |  if_ne	jmp	#LR__2490
1f9bc     00 26 06 F6 | 	mov	local01, #0
1f9c0     A7 12 02 FB | 	rdlong	arg01, fp
1f9c4     74 DE BE FD | 	call	#_convertstring
1f9c8     FD 12 02 F6 | 	mov	arg01, result1
1f9cc     0C 4E 05 F1 | 	add	fp, #12
1f9d0     A7 14 02 FB | 	rdlong	arg02, fp
1f9d4     0C 4E 85 F1 | 	sub	fp, #12
1f9d8     BC 75 B0 FD | 	call	#__system___string_cmp
1f9dc     00 FA 55 F2 | 	cmps	result1, #0 wc
1f9e0     00 26 26 C6 |  if_b	not	local01, #0
1f9e4     A7 26 62 FC | 	wrlong	local01, fp
1f9e8     BC 00 90 FD | 	jmp	#LR__2493
1f9ec                 | LR__2490
1f9ec                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1f9ec     08 4E 05 F1 | 	add	fp, #8
1f9f0     A7 26 02 FB | 	rdlong	local01, fp
1f9f4     08 4E 85 F1 | 	sub	fp, #8
1f9f8     1F 26 0E F2 | 	cmp	local01, #31 wz
1f9fc     14 4E 05 A1 |  if_e	add	fp, #20
1fa00     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fa04     14 4E 85 A1 |  if_e	sub	fp, #20
1fa08     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1fa0c     34 00 90 5D |  if_ne	jmp	#LR__2491
1fa10     00 26 06 F6 | 	mov	local01, #0
1fa14     A7 28 02 FB | 	rdlong	local02, fp
1fa18     0C 4E 05 F1 | 	add	fp, #12
1fa1c     A7 12 02 FB | 	rdlong	arg01, fp
1fa20     0C 4E 85 F1 | 	sub	fp, #12
1fa24     14 DE BE FD | 	call	#_convertstring
1fa28     FD 14 02 F6 | 	mov	arg02, result1
1fa2c     14 13 02 F6 | 	mov	arg01, local02
1fa30     64 75 B0 FD | 	call	#__system___string_cmp
1fa34     00 FA 55 F2 | 	cmps	result1, #0 wc
1fa38     00 26 26 C6 |  if_b	not	local01, #0
1fa3c     A7 26 62 FC | 	wrlong	local01, fp
1fa40     64 00 90 FD | 	jmp	#LR__2493
1fa44                 | LR__2491
1fa44                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1fa44     08 4E 05 F1 | 	add	fp, #8
1fa48     A7 26 02 FB | 	rdlong	local01, fp
1fa4c     08 4E 85 F1 | 	sub	fp, #8
1fa50     2B 26 0E F2 | 	cmp	local01, #43 wz
1fa54     14 4E 05 A1 |  if_e	add	fp, #20
1fa58     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fa5c     14 4E 85 A1 |  if_e	sub	fp, #20
1fa60     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1fa64     3C 00 90 5D |  if_ne	jmp	#LR__2492
1fa68     00 26 06 F6 | 	mov	local01, #0
1fa6c     A7 12 02 FB | 	rdlong	arg01, fp
1fa70     C8 DD BE FD | 	call	#_convertstring
1fa74     FD 28 02 F6 | 	mov	local02, result1
1fa78     0C 4E 05 F1 | 	add	fp, #12
1fa7c     A7 12 02 FB | 	rdlong	arg01, fp
1fa80     0C 4E 85 F1 | 	sub	fp, #12
1fa84     B4 DD BE FD | 	call	#_convertstring
1fa88     FD 14 02 F6 | 	mov	arg02, result1
1fa8c     14 13 02 F6 | 	mov	arg01, local02
1fa90     04 75 B0 FD | 	call	#__system___string_cmp
1fa94     00 FA 55 F2 | 	cmps	result1, #0 wc
1fa98     00 26 26 C6 |  if_b	not	local01, #0
1fa9c     A7 26 62 FC | 	wrlong	local01, fp
1faa0     04 00 90 FD | 	jmp	#LR__2493
1faa4                 | LR__2492
1faa4     A7 00 68 FC | 	wrlong	#0, fp
1faa8                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1faa8                 | LR__2493
1faa8     08 4E 05 F1 | 	add	fp, #8
1faac     A7 38 68 FC | 	wrlong	#28, fp
1fab0     08 4E 85 F1 | 	sub	fp, #8
1fab4     A7 12 02 F6 | 	mov	arg01, fp
1fab8     A0 DC BE FD | 	call	#_push
1fabc     A7 F0 03 F6 | 	mov	ptra, fp
1fac0     B2 00 A0 FD | 	call	#popregs_
1fac4                 | _do_lt_ret
1fac4     2D 00 64 FD | 	ret
1fac8                 | 
1fac8                 | ' 
1fac8                 | ' '--------------------------------- minus (-)
1fac8                 | ' 
1fac8                 | ' sub do_minus
1fac8                 | _do_minus
1fac8     05 4A 05 F6 | 	mov	COUNT_, #5
1facc     A8 00 A0 FD | 	call	#pushregs_
1fad0     18 F0 07 F1 | 	add	ptra, #24
1fad4     EC DB BE FD | 	call	#_pop
1fad8     FD 26 02 F6 | 	mov	local01, result1
1fadc     FE 28 02 F6 | 	mov	local02, result2
1fae0     FF 2A 02 F6 | 	mov	local03, result3
1fae4     0C 4E 05 F1 | 	add	fp, #12
1fae8     A7 26 62 FC | 	wrlong	local01, fp
1faec     04 4E 05 F1 | 	add	fp, #4
1faf0     A7 28 62 FC | 	wrlong	local02, fp
1faf4     04 4E 05 F1 | 	add	fp, #4
1faf8     A7 2A 62 FC | 	wrlong	local03, fp
1fafc     14 4E 85 F1 | 	sub	fp, #20
1fb00     C0 DB BE FD | 	call	#_pop
1fb04     FF 2A 02 F6 | 	mov	local03, result3
1fb08     A7 FA 61 FC | 	wrlong	result1, fp
1fb0c     04 4E 05 F1 | 	add	fp, #4
1fb10     A7 FC 61 FC | 	wrlong	result2, fp
1fb14     04 4E 05 F1 | 	add	fp, #4
1fb18     A7 2A 62 FC | 	wrlong	local03, fp
1fb1c                 | ' 
1fb1c                 | ' t2=pop()
1fb1c                 | ' t1=pop()
1fb1c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1fb1c     08 4E 85 F1 | 	sub	fp, #8
1fb20     1D 2A 0E F2 | 	cmp	local03, #29 wz
1fb24     14 4E 05 A1 |  if_e	add	fp, #20
1fb28     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fb2c     14 4E 85 A1 |  if_e	sub	fp, #20
1fb30     16 2B 02 A6 |  if_e	mov	local03, local04
1fb34     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fb38     5C 00 90 5D |  if_ne	jmp	#LR__2501
1fb3c                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1fb3c     0C 4E 05 F1 | 	add	fp, #12
1fb40     A7 26 02 FB | 	rdlong	local01, fp
1fb44     0C 4E 85 F1 | 	sub	fp, #12
1fb48     A7 2A 02 FB | 	rdlong	local03, fp
1fb4c     15 27 12 F2 | 	cmp	local01, local03 wc
1fb50     1C 00 90 3D |  if_ae	jmp	#LR__2500
1fb54     A7 26 02 FB | 	rdlong	local01, fp
1fb58     0C 4E 05 F1 | 	add	fp, #12
1fb5c     A7 28 02 FB | 	rdlong	local02, fp
1fb60     0C 4E 85 F1 | 	sub	fp, #12
1fb64     14 27 82 F1 | 	sub	local01, local02
1fb68     A7 26 62 FC | 	wrlong	local01, fp
1fb6c     F4 02 90 FD | 	jmp	#LR__2510
1fb70                 | LR__2500
1fb70     A7 26 02 FB | 	rdlong	local01, fp
1fb74     0C 4E 05 F1 | 	add	fp, #12
1fb78     A7 28 02 FB | 	rdlong	local02, fp
1fb7c     0C 4E 85 F1 | 	sub	fp, #12
1fb80     14 27 82 F1 | 	sub	local01, local02
1fb84     A7 26 62 FC | 	wrlong	local01, fp
1fb88     08 4E 05 F1 | 	add	fp, #8
1fb8c     A7 38 68 FC | 	wrlong	#28, fp
1fb90     08 4E 85 F1 | 	sub	fp, #8
1fb94     CC 02 90 FD | 	jmp	#LR__2510
1fb98                 | LR__2501
1fb98                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1fb98     08 4E 05 F1 | 	add	fp, #8
1fb9c     A7 26 02 FB | 	rdlong	local01, fp
1fba0     08 4E 85 F1 | 	sub	fp, #8
1fba4     1D 26 0E F2 | 	cmp	local01, #29 wz
1fba8     14 4E 05 A1 |  if_e	add	fp, #20
1fbac     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fbb0     14 4E 85 A1 |  if_e	sub	fp, #20
1fbb4     16 2B 02 A6 |  if_e	mov	local03, local04
1fbb8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fbbc     28 00 90 5D |  if_ne	jmp	#LR__2502
1fbc0     A7 26 02 FB | 	rdlong	local01, fp
1fbc4     0C 4E 05 F1 | 	add	fp, #12
1fbc8     A7 28 02 FB | 	rdlong	local02, fp
1fbcc     0C 4E 85 F1 | 	sub	fp, #12
1fbd0     14 27 82 F1 | 	sub	local01, local02
1fbd4     A7 26 62 FC | 	wrlong	local01, fp
1fbd8     08 4E 05 F1 | 	add	fp, #8
1fbdc     A7 38 68 FC | 	wrlong	#28, fp
1fbe0     08 4E 85 F1 | 	sub	fp, #8
1fbe4     7C 02 90 FD | 	jmp	#LR__2510
1fbe8                 | LR__2502
1fbe8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1fbe8     08 4E 05 F1 | 	add	fp, #8
1fbec     A7 26 02 FB | 	rdlong	local01, fp
1fbf0     08 4E 85 F1 | 	sub	fp, #8
1fbf4     1D 26 0E F2 | 	cmp	local01, #29 wz
1fbf8     14 4E 05 A1 |  if_e	add	fp, #20
1fbfc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fc00     14 4E 85 A1 |  if_e	sub	fp, #20
1fc04     16 2B 02 A6 |  if_e	mov	local03, local04
1fc08     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fc0c     34 00 90 5D |  if_ne	jmp	#LR__2503
1fc10     A7 12 02 FB | 	rdlong	arg01, fp
1fc14     CC 9D B0 FD | 	call	#__system___float_fromuns
1fc18     FD 12 02 F6 | 	mov	arg01, result1
1fc1c     0C 4E 05 F1 | 	add	fp, #12
1fc20     A7 14 02 FB | 	rdlong	arg02, fp
1fc24     0C 4E 85 F1 | 	sub	fp, #12
1fc28     1F 14 E6 F4 | 	bitnot	arg02, #31
1fc2c     E8 9D B0 FD | 	call	#__system___float_add
1fc30     A7 FA 61 FC | 	wrlong	result1, fp
1fc34     08 4E 05 F1 | 	add	fp, #8
1fc38     A7 3C 68 FC | 	wrlong	#30, fp
1fc3c     08 4E 85 F1 | 	sub	fp, #8
1fc40     20 02 90 FD | 	jmp	#LR__2510
1fc44                 | LR__2503
1fc44                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1fc44     08 4E 05 F1 | 	add	fp, #8
1fc48     A7 26 02 FB | 	rdlong	local01, fp
1fc4c     08 4E 85 F1 | 	sub	fp, #8
1fc50     1C 26 0E F2 | 	cmp	local01, #28 wz
1fc54     14 4E 05 A1 |  if_e	add	fp, #20
1fc58     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fc5c     14 4E 85 A1 |  if_e	sub	fp, #20
1fc60     16 2B 02 A6 |  if_e	mov	local03, local04
1fc64     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fc68     1C 00 90 5D |  if_ne	jmp	#LR__2504
1fc6c     A7 26 02 FB | 	rdlong	local01, fp
1fc70     0C 4E 05 F1 | 	add	fp, #12
1fc74     A7 28 02 FB | 	rdlong	local02, fp
1fc78     0C 4E 85 F1 | 	sub	fp, #12
1fc7c     14 27 82 F1 | 	sub	local01, local02
1fc80     A7 26 62 FC | 	wrlong	local01, fp
1fc84     DC 01 90 FD | 	jmp	#LR__2510
1fc88                 | LR__2504
1fc88                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1fc88     08 4E 05 F1 | 	add	fp, #8
1fc8c     A7 26 02 FB | 	rdlong	local01, fp
1fc90     08 4E 85 F1 | 	sub	fp, #8
1fc94     1C 26 0E F2 | 	cmp	local01, #28 wz
1fc98     14 4E 05 A1 |  if_e	add	fp, #20
1fc9c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fca0     14 4E 85 A1 |  if_e	sub	fp, #20
1fca4     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1fca8     1C 00 90 5D |  if_ne	jmp	#LR__2505
1fcac     A7 26 02 FB | 	rdlong	local01, fp
1fcb0     0C 4E 05 F1 | 	add	fp, #12
1fcb4     A7 28 02 FB | 	rdlong	local02, fp
1fcb8     0C 4E 85 F1 | 	sub	fp, #12
1fcbc     14 27 82 F1 | 	sub	local01, local02
1fcc0     A7 26 62 FC | 	wrlong	local01, fp
1fcc4     9C 01 90 FD | 	jmp	#LR__2510
1fcc8                 | LR__2505
1fcc8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1fcc8     08 4E 05 F1 | 	add	fp, #8
1fccc     A7 26 02 FB | 	rdlong	local01, fp
1fcd0     08 4E 85 F1 | 	sub	fp, #8
1fcd4     1C 26 0E F2 | 	cmp	local01, #28 wz
1fcd8     14 4E 05 A1 |  if_e	add	fp, #20
1fcdc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fce0     14 4E 85 A1 |  if_e	sub	fp, #20
1fce4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fce8     44 00 90 5D |  if_ne	jmp	#LR__2506
1fcec     A7 12 02 FB | 	rdlong	arg01, fp
1fcf0     09 13 52 F6 | 	abs	arg01, arg01 wc
1fcf4     1F 2E C6 C9 |  if_b	decod	local05, #31
1fcf8     00 2E 06 36 |  if_ae	mov	local05, #0
1fcfc     E4 9C B0 FD | 	call	#__system___float_fromuns
1fd00     17 FB 61 F5 | 	xor	result1, local05
1fd04     FD 12 02 F6 | 	mov	arg01, result1
1fd08     0C 4E 05 F1 | 	add	fp, #12
1fd0c     A7 14 02 FB | 	rdlong	arg02, fp
1fd10     0C 4E 85 F1 | 	sub	fp, #12
1fd14     1F 14 E6 F4 | 	bitnot	arg02, #31
1fd18     FC 9C B0 FD | 	call	#__system___float_add
1fd1c     A7 FA 61 FC | 	wrlong	result1, fp
1fd20     08 4E 05 F1 | 	add	fp, #8
1fd24     A7 3C 68 FC | 	wrlong	#30, fp
1fd28     08 4E 85 F1 | 	sub	fp, #8
1fd2c     34 01 90 FD | 	jmp	#LR__2510
1fd30                 | LR__2506
1fd30                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1fd30     08 4E 05 F1 | 	add	fp, #8
1fd34     A7 26 02 FB | 	rdlong	local01, fp
1fd38     08 4E 85 F1 | 	sub	fp, #8
1fd3c     1E 26 0E F2 | 	cmp	local01, #30 wz
1fd40     14 4E 05 A1 |  if_e	add	fp, #20
1fd44     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fd48     14 4E 85 A1 |  if_e	sub	fp, #20
1fd4c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fd50     2C 00 90 5D |  if_ne	jmp	#LR__2507
1fd54     A7 26 02 FB | 	rdlong	local01, fp
1fd58     0C 4E 05 F1 | 	add	fp, #12
1fd5c     A7 12 02 FB | 	rdlong	arg01, fp
1fd60     0C 4E 85 F1 | 	sub	fp, #12
1fd64     7C 9C B0 FD | 	call	#__system___float_fromuns
1fd68     FD 14 02 F6 | 	mov	arg02, result1
1fd6c     13 13 02 F6 | 	mov	arg01, local01
1fd70     1F 14 E6 F4 | 	bitnot	arg02, #31
1fd74     A0 9C B0 FD | 	call	#__system___float_add
1fd78     A7 FA 61 FC | 	wrlong	result1, fp
1fd7c     E4 00 90 FD | 	jmp	#LR__2510
1fd80                 | LR__2507
1fd80                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1fd80     08 4E 05 F1 | 	add	fp, #8
1fd84     A7 26 02 FB | 	rdlong	local01, fp
1fd88     08 4E 85 F1 | 	sub	fp, #8
1fd8c     1E 26 0E F2 | 	cmp	local01, #30 wz
1fd90     14 4E 05 A1 |  if_e	add	fp, #20
1fd94     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fd98     14 4E 85 A1 |  if_e	sub	fp, #20
1fd9c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fda0     3C 00 90 5D |  if_ne	jmp	#LR__2508
1fda4     A7 26 02 FB | 	rdlong	local01, fp
1fda8     0C 4E 05 F1 | 	add	fp, #12
1fdac     A7 12 02 FB | 	rdlong	arg01, fp
1fdb0     0C 4E 85 F1 | 	sub	fp, #12
1fdb4     09 13 52 F6 | 	abs	arg01, arg01 wc
1fdb8     1F 2E C6 C9 |  if_b	decod	local05, #31
1fdbc     00 2E 06 36 |  if_ae	mov	local05, #0
1fdc0     20 9C B0 FD | 	call	#__system___float_fromuns
1fdc4     17 FB 61 F5 | 	xor	result1, local05
1fdc8     FD 14 02 F6 | 	mov	arg02, result1
1fdcc     13 13 02 F6 | 	mov	arg01, local01
1fdd0     1F 14 E6 F4 | 	bitnot	arg02, #31
1fdd4     40 9C B0 FD | 	call	#__system___float_add
1fdd8     A7 FA 61 FC | 	wrlong	result1, fp
1fddc     84 00 90 FD | 	jmp	#LR__2510
1fde0                 | LR__2508
1fde0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1fde0     08 4E 05 F1 | 	add	fp, #8
1fde4     A7 26 02 FB | 	rdlong	local01, fp
1fde8     08 4E 85 F1 | 	sub	fp, #8
1fdec     1E 26 0E F2 | 	cmp	local01, #30 wz
1fdf0     14 4E 05 A1 |  if_e	add	fp, #20
1fdf4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fdf8     14 4E 85 A1 |  if_e	sub	fp, #20
1fdfc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fe00     20 00 90 5D |  if_ne	jmp	#LR__2509
1fe04     A7 12 02 FB | 	rdlong	arg01, fp
1fe08     0C 4E 05 F1 | 	add	fp, #12
1fe0c     A7 14 02 FB | 	rdlong	arg02, fp
1fe10     0C 4E 85 F1 | 	sub	fp, #12
1fe14     1F 14 E6 F4 | 	bitnot	arg02, #31
1fe18     FC 9B B0 FD | 	call	#__system___float_add
1fe1c     A7 FA 61 FC | 	wrlong	result1, fp
1fe20     40 00 90 FD | 	jmp	#LR__2510
1fe24                 | LR__2509
1fe24                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1fe24     08 4E 05 F1 | 	add	fp, #8
1fe28     A7 26 02 FB | 	rdlong	local01, fp
1fe2c     08 4E 85 F1 | 	sub	fp, #8
1fe30     1F 26 0E F2 | 	cmp	local01, #31 wz
1fe34     14 4E 05 51 |  if_ne	add	fp, #20
1fe38     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1fe3c     14 4E 85 51 |  if_ne	sub	fp, #20
1fe40     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1fe44     A7 06 68 AC |  if_e	wrlong	#3, fp
1fe48     08 4E 05 A1 |  if_e	add	fp, #8
1fe4c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1fe50     08 4E 85 A1 |  if_e	sub	fp, #8
1fe54     A7 0A 68 5C |  if_ne	wrlong	#5, fp
1fe58     08 4E 05 51 |  if_ne	add	fp, #8
1fe5c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1fe60     08 4E 85 51 |  if_ne	sub	fp, #8
1fe64                 | LR__2510
1fe64     A7 12 02 F6 | 	mov	arg01, fp
1fe68     F0 D8 BE FD | 	call	#_push
1fe6c     A7 F0 03 F6 | 	mov	ptra, fp
1fe70     B2 00 A0 FD | 	call	#popregs_
1fe74                 | _do_minus_ret
1fe74     2D 00 64 FD | 	ret
1fe78                 | 
1fe78                 | ' 
1fe78                 | ' '--------------------------------- negative (-), one argument negative
1fe78                 | ' 
1fe78                 | ' sub do_negative
1fe78                 | _do_negative
1fe78     02 4A 05 F6 | 	mov	COUNT_, #2
1fe7c     A8 00 A0 FD | 	call	#pushregs_
1fe80     0C F0 07 F1 | 	add	ptra, #12
1fe84     3C D8 BE FD | 	call	#_pop
1fe88     FF 26 02 F6 | 	mov	local01, result3
1fe8c     A7 FA 61 FC | 	wrlong	result1, fp
1fe90     04 4E 05 F1 | 	add	fp, #4
1fe94     A7 FC 61 FC | 	wrlong	result2, fp
1fe98     04 4E 05 F1 | 	add	fp, #4
1fe9c     A7 26 62 FC | 	wrlong	local01, fp
1fea0                 | ' 
1fea0                 | ' t1=pop()
1fea0                 | ' if t1.result_type=result_int then 
1fea0     08 4E 85 F1 | 	sub	fp, #8
1fea4     1C 26 0E F2 | 	cmp	local01, #28 wz
1fea8     A7 28 02 AB |  if_e	rdlong	local02, fp
1feac     14 27 62 A6 |  if_e	neg	local01, local02
1feb0     A7 26 62 AC |  if_e	wrlong	local01, fp
1feb4     5C 00 90 AD |  if_e	jmp	#LR__2522
1feb8     08 4E 05 F1 | 	add	fp, #8
1febc     A7 26 02 FB | 	rdlong	local01, fp
1fec0     08 4E 85 F1 | 	sub	fp, #8
1fec4     1D 26 0E F2 | 	cmp	local01, #29 wz
1fec8     1C 00 90 5D |  if_ne	jmp	#LR__2520
1fecc     A7 28 02 FB | 	rdlong	local02, fp
1fed0     14 27 62 F6 | 	neg	local01, local02
1fed4     A7 26 62 FC | 	wrlong	local01, fp
1fed8     08 4E 05 F1 | 	add	fp, #8
1fedc     A7 38 68 FC | 	wrlong	#28, fp
1fee0     08 4E 85 F1 | 	sub	fp, #8
1fee4     2C 00 90 FD | 	jmp	#LR__2521
1fee8                 | LR__2520
1fee8     08 4E 05 F1 | 	add	fp, #8
1feec     A7 26 02 FB | 	rdlong	local01, fp
1fef0     08 4E 85 F1 | 	sub	fp, #8
1fef4     1E 26 0E F2 | 	cmp	local01, #30 wz
1fef8     A7 FA 01 AB |  if_e	rdlong	result1, fp
1fefc     1F FA E5 A4 |  if_e	bitnot	result1, #31
1ff00     A7 FA 61 AC |  if_e	wrlong	result1, fp
1ff04     08 4E 05 51 |  if_ne	add	fp, #8
1ff08     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1ff0c     08 4E 85 51 |  if_ne	sub	fp, #8
1ff10     A7 50 68 5C |  if_ne	wrlong	#40, fp
1ff14                 | LR__2521
1ff14                 | LR__2522
1ff14     A7 12 02 F6 | 	mov	arg01, fp
1ff18     40 D8 BE FD | 	call	#_push
1ff1c     A7 F0 03 F6 | 	mov	ptra, fp
1ff20     B2 00 A0 FD | 	call	#popregs_
1ff24                 | _do_negative_ret
1ff24     2D 00 64 FD | 	ret
1ff28                 | 
1ff28                 | ' 
1ff28                 | ' '--------------------------------- MOD (modulo)
1ff28                 | ' 
1ff28                 | ' sub do_mod 
1ff28                 | _do_mod
1ff28     01 4A 05 F6 | 	mov	COUNT_, #1
1ff2c     A8 00 A0 FD | 	call	#pushregs_
1ff30     18 F0 07 F1 | 	add	ptra, #24
1ff34     8C D7 BE FD | 	call	#_pop
1ff38     FD 92 02 F6 | 	mov	muldivb_, result1
1ff3c     FE 90 02 F6 | 	mov	muldiva_, result2
1ff40     FF 26 02 F6 | 	mov	local01, result3
1ff44     0C 4E 05 F1 | 	add	fp, #12
1ff48     A7 92 62 FC | 	wrlong	muldivb_, fp
1ff4c     04 4E 05 F1 | 	add	fp, #4
1ff50     A7 90 62 FC | 	wrlong	muldiva_, fp
1ff54     04 4E 05 F1 | 	add	fp, #4
1ff58     A7 26 62 FC | 	wrlong	local01, fp
1ff5c     14 4E 85 F1 | 	sub	fp, #20
1ff60     60 D7 BE FD | 	call	#_pop
1ff64     A7 FA 61 FC | 	wrlong	result1, fp
1ff68     04 4E 05 F1 | 	add	fp, #4
1ff6c     A7 FC 61 FC | 	wrlong	result2, fp
1ff70     04 4E 05 F1 | 	add	fp, #4
1ff74     A7 FE 61 FC | 	wrlong	result3, fp
1ff78                 | ' 
1ff78                 | ' t2=pop()
1ff78                 | ' t1=pop()
1ff78                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1ff78     08 4E 85 F1 | 	sub	fp, #8
1ff7c     1F FE 0D F2 | 	cmp	result3, #31 wz
1ff80     14 4E 05 51 |  if_ne	add	fp, #20
1ff84     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1ff88     14 4E 85 51 |  if_ne	sub	fp, #20
1ff8c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1ff90     A7 14 68 AC |  if_e	wrlong	#10, fp
1ff94     08 4E 05 A1 |  if_e	add	fp, #8
1ff98     A7 FE 69 AC |  if_e	wrlong	#255, fp
1ff9c     08 4E 85 A1 |  if_e	sub	fp, #8
1ffa0     90 01 90 AD |  if_e	jmp	#LR__2536
1ffa4                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1ffa4     08 4E 05 F1 | 	add	fp, #8
1ffa8     A7 92 02 FB | 	rdlong	muldivb_, fp
1ffac     08 4E 85 F1 | 	sub	fp, #8
1ffb0     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1ffb4     1C 00 90 5D |  if_ne	jmp	#LR__2530
1ffb8     08 4E 05 F1 | 	add	fp, #8
1ffbc     A7 38 68 FC | 	wrlong	#28, fp
1ffc0     08 4E 85 F1 | 	sub	fp, #8
1ffc4     A7 12 02 FB | 	rdlong	arg01, fp
1ffc8     00 14 06 F6 | 	mov	arg02, #0
1ffcc     E0 A2 B0 FD | 	call	#__system___float_tointeger
1ffd0     A7 FA 61 FC | 	wrlong	result1, fp
1ffd4                 | LR__2530
1ffd4                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1ffd4     14 4E 05 F1 | 	add	fp, #20
1ffd8     A7 92 02 FB | 	rdlong	muldivb_, fp
1ffdc     14 4E 85 F1 | 	sub	fp, #20
1ffe0     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1ffe4     28 00 90 5D |  if_ne	jmp	#LR__2531
1ffe8     14 4E 05 F1 | 	add	fp, #20
1ffec     A7 38 68 FC | 	wrlong	#28, fp
1fff0     08 4E 85 F1 | 	sub	fp, #8
1fff4     A7 12 02 FB | 	rdlong	arg01, fp
1fff8     0C 4E 85 F1 | 	sub	fp, #12
1fffc     00 14 06 F6 | 	mov	arg02, #0
20000     AC A2 B0 FD | 	call	#__system___float_tointeger
20004     0C 4E 05 F1 | 	add	fp, #12
20008     A7 FA 61 FC | 	wrlong	result1, fp
2000c     0C 4E 85 F1 | 	sub	fp, #12
20010                 | LR__2531
20010                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
20010     08 4E 05 F1 | 	add	fp, #8
20014     A7 92 02 FB | 	rdlong	muldivb_, fp
20018     08 4E 85 F1 | 	sub	fp, #8
2001c     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
20020     14 4E 05 A1 |  if_e	add	fp, #20
20024     A7 26 02 AB |  if_e	rdlong	local01, fp
20028     14 4E 85 A1 |  if_e	sub	fp, #20
2002c     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
20030     20 00 90 5D |  if_ne	jmp	#LR__2532
20034     0C 4E 05 F1 | 	add	fp, #12
20038     A7 26 02 FB | 	rdlong	local01, fp
2003c     0C 4E 85 F1 | 	sub	fp, #12
20040     A7 92 02 FB | 	rdlong	muldivb_, fp
20044     13 93 12 FD | 	qdiv	muldivb_, local01
20048     19 26 62 FD | 	getqy	local01
2004c     A7 26 62 FC | 	wrlong	local01, fp
20050     E0 00 90 FD | 	jmp	#LR__2536
20054                 | LR__2532
20054                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
20054     08 4E 05 F1 | 	add	fp, #8
20058     A7 92 02 FB | 	rdlong	muldivb_, fp
2005c     08 4E 85 F1 | 	sub	fp, #8
20060     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
20064     14 4E 05 A1 |  if_e	add	fp, #20
20068     A7 26 02 AB |  if_e	rdlong	local01, fp
2006c     14 4E 85 A1 |  if_e	sub	fp, #20
20070     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
20074     2C 00 90 5D |  if_ne	jmp	#LR__2533
20078     0C 4E 05 F1 | 	add	fp, #12
2007c     A7 26 02 FB | 	rdlong	local01, fp
20080     0C 4E 85 F1 | 	sub	fp, #12
20084     A7 92 02 FB | 	rdlong	muldivb_, fp
20088     13 93 12 FD | 	qdiv	muldivb_, local01
2008c     19 26 62 FD | 	getqy	local01
20090     A7 26 62 FC | 	wrlong	local01, fp
20094     08 4E 05 F1 | 	add	fp, #8
20098     A7 38 68 FC | 	wrlong	#28, fp
2009c     08 4E 85 F1 | 	sub	fp, #8
200a0     90 00 90 FD | 	jmp	#LR__2536
200a4                 | LR__2533
200a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
200a4     08 4E 05 F1 | 	add	fp, #8
200a8     A7 92 02 FB | 	rdlong	muldivb_, fp
200ac     08 4E 85 F1 | 	sub	fp, #8
200b0     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
200b4     14 4E 05 A1 |  if_e	add	fp, #20
200b8     A7 26 02 AB |  if_e	rdlong	local01, fp
200bc     14 4E 85 A1 |  if_e	sub	fp, #20
200c0     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
200c4     1C 00 90 5D |  if_ne	jmp	#LR__2534
200c8     A7 90 02 FB | 	rdlong	muldiva_, fp
200cc     0C 4E 05 F1 | 	add	fp, #12
200d0     A7 92 02 FB | 	rdlong	muldivb_, fp
200d4     0C 4E 85 F1 | 	sub	fp, #12
200d8     BA 00 A0 FD | 	call	#divide_
200dc     A7 90 62 FC | 	wrlong	muldiva_, fp
200e0     50 00 90 FD | 	jmp	#LR__2536
200e4                 | LR__2534
200e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
200e4     08 4E 05 F1 | 	add	fp, #8
200e8     A7 92 02 FB | 	rdlong	muldivb_, fp
200ec     08 4E 85 F1 | 	sub	fp, #8
200f0     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
200f4     14 4E 05 A1 |  if_e	add	fp, #20
200f8     A7 26 02 AB |  if_e	rdlong	local01, fp
200fc     14 4E 85 A1 |  if_e	sub	fp, #20
20100     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
20104     1C 00 90 5D |  if_ne	jmp	#LR__2535
20108     A7 90 02 FB | 	rdlong	muldiva_, fp
2010c     0C 4E 05 F1 | 	add	fp, #12
20110     A7 92 02 FB | 	rdlong	muldivb_, fp
20114     0C 4E 85 F1 | 	sub	fp, #12
20118     BA 00 A0 FD | 	call	#divide_
2011c     A7 90 62 FC | 	wrlong	muldiva_, fp
20120     10 00 90 FD | 	jmp	#LR__2536
20124                 | LR__2535
20124     A7 16 68 FC | 	wrlong	#11, fp
20128     08 4E 05 F1 | 	add	fp, #8
2012c     A7 FE 69 FC | 	wrlong	#255, fp
20130     08 4E 85 F1 | 	sub	fp, #8
20134                 | LR__2536
20134     A7 12 02 F6 | 	mov	arg01, fp
20138     20 D6 BE FD | 	call	#_push
2013c     A7 F0 03 F6 | 	mov	ptra, fp
20140     B2 00 A0 FD | 	call	#popregs_
20144                 | _do_mod_ret
20144     2D 00 64 FD | 	ret
20148                 | 
20148                 | ' 
20148                 | ' '--------------------------------- mul (*)
20148                 | ' 
20148                 | ' sub do_mul
20148                 | _do_mul
20148     05 4A 05 F6 | 	mov	COUNT_, #5
2014c     A8 00 A0 FD | 	call	#pushregs_
20150     18 F0 07 F1 | 	add	ptra, #24
20154     6C D5 BE FD | 	call	#_pop
20158     FD 26 02 F6 | 	mov	local01, result1
2015c     FE 28 02 F6 | 	mov	local02, result2
20160     FF 2A 02 F6 | 	mov	local03, result3
20164     0C 4E 05 F1 | 	add	fp, #12
20168     A7 26 62 FC | 	wrlong	local01, fp
2016c     04 4E 05 F1 | 	add	fp, #4
20170     A7 28 62 FC | 	wrlong	local02, fp
20174     04 4E 05 F1 | 	add	fp, #4
20178     A7 2A 62 FC | 	wrlong	local03, fp
2017c     14 4E 85 F1 | 	sub	fp, #20
20180     40 D5 BE FD | 	call	#_pop
20184     FF 2A 02 F6 | 	mov	local03, result3
20188     A7 FA 61 FC | 	wrlong	result1, fp
2018c     04 4E 05 F1 | 	add	fp, #4
20190     A7 FC 61 FC | 	wrlong	result2, fp
20194     04 4E 05 F1 | 	add	fp, #4
20198     A7 2A 62 FC | 	wrlong	local03, fp
2019c                 | ' 
2019c                 | ' t2=pop()
2019c                 | ' t1=pop()
2019c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
2019c     08 4E 85 F1 | 	sub	fp, #8
201a0     1D 2A 0E F2 | 	cmp	local03, #29 wz
201a4     14 4E 05 A1 |  if_e	add	fp, #20
201a8     A7 2C 02 AB |  if_e	rdlong	local04, fp
201ac     14 4E 85 A1 |  if_e	sub	fp, #20
201b0     16 2B 02 A6 |  if_e	mov	local03, local04
201b4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
201b8     20 00 90 5D |  if_ne	jmp	#LR__2540
201bc     A7 28 02 FB | 	rdlong	local02, fp
201c0     0C 4E 05 F1 | 	add	fp, #12
201c4     A7 2A 02 FB | 	rdlong	local03, fp
201c8     15 29 02 FD | 	qmul	local02, local03
201cc     0C 4E 85 F1 | 	sub	fp, #12
201d0     18 26 62 FD | 	getqx	local01
201d4     A7 26 62 FC | 	wrlong	local01, fp
201d8     C4 02 90 FD | 	jmp	#LR__2549
201dc                 | LR__2540
201dc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
201dc     08 4E 05 F1 | 	add	fp, #8
201e0     A7 26 02 FB | 	rdlong	local01, fp
201e4     08 4E 85 F1 | 	sub	fp, #8
201e8     1D 26 0E F2 | 	cmp	local01, #29 wz
201ec     14 4E 05 A1 |  if_e	add	fp, #20
201f0     A7 2C 02 AB |  if_e	rdlong	local04, fp
201f4     14 4E 85 A1 |  if_e	sub	fp, #20
201f8     16 2B 02 A6 |  if_e	mov	local03, local04
201fc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20200     2C 00 90 5D |  if_ne	jmp	#LR__2541
20204     A7 28 02 FB | 	rdlong	local02, fp
20208     0C 4E 05 F1 | 	add	fp, #12
2020c     A7 2A 02 FB | 	rdlong	local03, fp
20210     15 29 02 FD | 	qmul	local02, local03
20214     0C 4E 85 F1 | 	sub	fp, #12
20218     18 26 62 FD | 	getqx	local01
2021c     A7 26 62 FC | 	wrlong	local01, fp
20220     08 4E 05 F1 | 	add	fp, #8
20224     A7 38 68 FC | 	wrlong	#28, fp
20228     08 4E 85 F1 | 	sub	fp, #8
2022c     70 02 90 FD | 	jmp	#LR__2549
20230                 | LR__2541
20230                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
20230     08 4E 05 F1 | 	add	fp, #8
20234     A7 26 02 FB | 	rdlong	local01, fp
20238     08 4E 85 F1 | 	sub	fp, #8
2023c     1D 26 0E F2 | 	cmp	local01, #29 wz
20240     14 4E 05 A1 |  if_e	add	fp, #20
20244     A7 2C 02 AB |  if_e	rdlong	local04, fp
20248     14 4E 85 A1 |  if_e	sub	fp, #20
2024c     16 2B 02 A6 |  if_e	mov	local03, local04
20250     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20254     30 00 90 5D |  if_ne	jmp	#LR__2542
20258     A7 12 02 FB | 	rdlong	arg01, fp
2025c     84 97 B0 FD | 	call	#__system___float_fromuns
20260     FD 12 02 F6 | 	mov	arg01, result1
20264     0C 4E 05 F1 | 	add	fp, #12
20268     A7 14 02 FB | 	rdlong	arg02, fp
2026c     0C 4E 85 F1 | 	sub	fp, #12
20270     74 9B B0 FD | 	call	#__system___float_mul
20274     A7 FA 61 FC | 	wrlong	result1, fp
20278     08 4E 05 F1 | 	add	fp, #8
2027c     A7 3C 68 FC | 	wrlong	#30, fp
20280     08 4E 85 F1 | 	sub	fp, #8
20284     18 02 90 FD | 	jmp	#LR__2549
20288                 | LR__2542
20288                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
20288     08 4E 05 F1 | 	add	fp, #8
2028c     A7 26 02 FB | 	rdlong	local01, fp
20290     08 4E 85 F1 | 	sub	fp, #8
20294     1C 26 0E F2 | 	cmp	local01, #28 wz
20298     14 4E 05 A1 |  if_e	add	fp, #20
2029c     A7 2C 02 AB |  if_e	rdlong	local04, fp
202a0     14 4E 85 A1 |  if_e	sub	fp, #20
202a4     16 2B 02 A6 |  if_e	mov	local03, local04
202a8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
202ac     20 00 90 5D |  if_ne	jmp	#LR__2543
202b0     A7 28 02 FB | 	rdlong	local02, fp
202b4     0C 4E 05 F1 | 	add	fp, #12
202b8     A7 2A 02 FB | 	rdlong	local03, fp
202bc     15 29 02 FD | 	qmul	local02, local03
202c0     0C 4E 85 F1 | 	sub	fp, #12
202c4     18 26 62 FD | 	getqx	local01
202c8     A7 26 62 FC | 	wrlong	local01, fp
202cc     D0 01 90 FD | 	jmp	#LR__2549
202d0                 | LR__2543
202d0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
202d0     08 4E 05 F1 | 	add	fp, #8
202d4     A7 26 02 FB | 	rdlong	local01, fp
202d8     08 4E 85 F1 | 	sub	fp, #8
202dc     1C 26 0E F2 | 	cmp	local01, #28 wz
202e0     14 4E 05 A1 |  if_e	add	fp, #20
202e4     A7 2C 02 AB |  if_e	rdlong	local04, fp
202e8     14 4E 85 A1 |  if_e	sub	fp, #20
202ec     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
202f0     20 00 90 5D |  if_ne	jmp	#LR__2544
202f4     A7 28 02 FB | 	rdlong	local02, fp
202f8     0C 4E 05 F1 | 	add	fp, #12
202fc     A7 2A 02 FB | 	rdlong	local03, fp
20300     15 29 02 FD | 	qmul	local02, local03
20304     0C 4E 85 F1 | 	sub	fp, #12
20308     18 26 62 FD | 	getqx	local01
2030c     A7 26 62 FC | 	wrlong	local01, fp
20310     8C 01 90 FD | 	jmp	#LR__2549
20314                 | LR__2544
20314                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
20314     08 4E 05 F1 | 	add	fp, #8
20318     A7 26 02 FB | 	rdlong	local01, fp
2031c     08 4E 85 F1 | 	sub	fp, #8
20320     1C 26 0E F2 | 	cmp	local01, #28 wz
20324     14 4E 05 A1 |  if_e	add	fp, #20
20328     A7 2A 02 AB |  if_e	rdlong	local03, fp
2032c     14 4E 85 A1 |  if_e	sub	fp, #20
20330     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20334     40 00 90 5D |  if_ne	jmp	#LR__2545
20338     A7 12 02 FB | 	rdlong	arg01, fp
2033c     09 13 52 F6 | 	abs	arg01, arg01 wc
20340     1F 2E C6 C9 |  if_b	decod	local05, #31
20344     00 2E 06 36 |  if_ae	mov	local05, #0
20348     98 96 B0 FD | 	call	#__system___float_fromuns
2034c     17 FB 61 F5 | 	xor	result1, local05
20350     FD 12 02 F6 | 	mov	arg01, result1
20354     0C 4E 05 F1 | 	add	fp, #12
20358     A7 14 02 FB | 	rdlong	arg02, fp
2035c     0C 4E 85 F1 | 	sub	fp, #12
20360     84 9A B0 FD | 	call	#__system___float_mul
20364     A7 FA 61 FC | 	wrlong	result1, fp
20368     08 4E 05 F1 | 	add	fp, #8
2036c     A7 3C 68 FC | 	wrlong	#30, fp
20370     08 4E 85 F1 | 	sub	fp, #8
20374     28 01 90 FD | 	jmp	#LR__2549
20378                 | LR__2545
20378                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
20378     08 4E 05 F1 | 	add	fp, #8
2037c     A7 26 02 FB | 	rdlong	local01, fp
20380     08 4E 85 F1 | 	sub	fp, #8
20384     1E 26 0E F2 | 	cmp	local01, #30 wz
20388     14 4E 05 A1 |  if_e	add	fp, #20
2038c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20390     14 4E 85 A1 |  if_e	sub	fp, #20
20394     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20398     28 00 90 5D |  if_ne	jmp	#LR__2546
2039c     A7 26 02 FB | 	rdlong	local01, fp
203a0     0C 4E 05 F1 | 	add	fp, #12
203a4     A7 12 02 FB | 	rdlong	arg01, fp
203a8     0C 4E 85 F1 | 	sub	fp, #12
203ac     34 96 B0 FD | 	call	#__system___float_fromuns
203b0     FD 14 02 F6 | 	mov	arg02, result1
203b4     13 13 02 F6 | 	mov	arg01, local01
203b8     2C 9A B0 FD | 	call	#__system___float_mul
203bc     A7 FA 61 FC | 	wrlong	result1, fp
203c0     DC 00 90 FD | 	jmp	#LR__2549
203c4                 | LR__2546
203c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
203c4     08 4E 05 F1 | 	add	fp, #8
203c8     A7 26 02 FB | 	rdlong	local01, fp
203cc     08 4E 85 F1 | 	sub	fp, #8
203d0     1E 26 0E F2 | 	cmp	local01, #30 wz
203d4     14 4E 05 A1 |  if_e	add	fp, #20
203d8     A7 2A 02 AB |  if_e	rdlong	local03, fp
203dc     14 4E 85 A1 |  if_e	sub	fp, #20
203e0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
203e4     38 00 90 5D |  if_ne	jmp	#LR__2547
203e8     A7 26 02 FB | 	rdlong	local01, fp
203ec     0C 4E 05 F1 | 	add	fp, #12
203f0     A7 12 02 FB | 	rdlong	arg01, fp
203f4     0C 4E 85 F1 | 	sub	fp, #12
203f8     09 13 52 F6 | 	abs	arg01, arg01 wc
203fc     1F 2E C6 C9 |  if_b	decod	local05, #31
20400     00 2E 06 36 |  if_ae	mov	local05, #0
20404     DC 95 B0 FD | 	call	#__system___float_fromuns
20408     17 FB 61 F5 | 	xor	result1, local05
2040c     FD 14 02 F6 | 	mov	arg02, result1
20410     13 13 02 F6 | 	mov	arg01, local01
20414     D0 99 B0 FD | 	call	#__system___float_mul
20418     A7 FA 61 FC | 	wrlong	result1, fp
2041c     80 00 90 FD | 	jmp	#LR__2549
20420                 | LR__2547
20420                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
20420     08 4E 05 F1 | 	add	fp, #8
20424     A7 26 02 FB | 	rdlong	local01, fp
20428     08 4E 85 F1 | 	sub	fp, #8
2042c     1E 26 0E F2 | 	cmp	local01, #30 wz
20430     14 4E 05 A1 |  if_e	add	fp, #20
20434     A7 2A 02 AB |  if_e	rdlong	local03, fp
20438     14 4E 85 A1 |  if_e	sub	fp, #20
2043c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20440     1C 00 90 5D |  if_ne	jmp	#LR__2548
20444     A7 12 02 FB | 	rdlong	arg01, fp
20448     0C 4E 05 F1 | 	add	fp, #12
2044c     A7 14 02 FB | 	rdlong	arg02, fp
20450     0C 4E 85 F1 | 	sub	fp, #12
20454     90 99 B0 FD | 	call	#__system___float_mul
20458     A7 FA 61 FC | 	wrlong	result1, fp
2045c     40 00 90 FD | 	jmp	#LR__2549
20460                 | LR__2548
20460                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
20460     08 4E 05 F1 | 	add	fp, #8
20464     A7 26 02 FB | 	rdlong	local01, fp
20468     08 4E 85 F1 | 	sub	fp, #8
2046c     1F 26 0E F2 | 	cmp	local01, #31 wz
20470     14 4E 05 51 |  if_ne	add	fp, #20
20474     A7 2A 02 5B |  if_ne	rdlong	local03, fp
20478     14 4E 85 51 |  if_ne	sub	fp, #20
2047c     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
20480     A7 10 68 AC |  if_e	wrlong	#8, fp
20484     08 4E 05 A1 |  if_e	add	fp, #8
20488     A7 FE 69 AC |  if_e	wrlong	#255, fp
2048c     08 4E 85 A1 |  if_e	sub	fp, #8
20490     A7 12 68 5C |  if_ne	wrlong	#9, fp
20494     08 4E 05 51 |  if_ne	add	fp, #8
20498     A7 FE 69 5C |  if_ne	wrlong	#255, fp
2049c     08 4E 85 51 |  if_ne	sub	fp, #8
204a0                 | LR__2549
204a0     A7 12 02 F6 | 	mov	arg01, fp
204a4     B4 D2 BE FD | 	call	#_push
204a8     A7 F0 03 F6 | 	mov	ptra, fp
204ac     B2 00 A0 FD | 	call	#popregs_
204b0                 | _do_mul_ret
204b0     2D 00 64 FD | 	ret
204b4                 | 
204b4                 | ' 
204b4                 | ' '--------------------------------- not equal (<>)
204b4                 | ' 
204b4                 | ' sub do_ne
204b4                 | _do_ne
204b4     05 4A 05 F6 | 	mov	COUNT_, #5
204b8     A8 00 A0 FD | 	call	#pushregs_
204bc     18 F0 07 F1 | 	add	ptra, #24
204c0     00 D2 BE FD | 	call	#_pop
204c4     FD 26 02 F6 | 	mov	local01, result1
204c8     FE 28 02 F6 | 	mov	local02, result2
204cc     FF 2A 02 F6 | 	mov	local03, result3
204d0     0C 4E 05 F1 | 	add	fp, #12
204d4     A7 26 62 FC | 	wrlong	local01, fp
204d8     04 4E 05 F1 | 	add	fp, #4
204dc     A7 28 62 FC | 	wrlong	local02, fp
204e0     04 4E 05 F1 | 	add	fp, #4
204e4     A7 2A 62 FC | 	wrlong	local03, fp
204e8     14 4E 85 F1 | 	sub	fp, #20
204ec     D4 D1 BE FD | 	call	#_pop
204f0     FF 2A 02 F6 | 	mov	local03, result3
204f4     A7 FA 61 FC | 	wrlong	result1, fp
204f8     04 4E 05 F1 | 	add	fp, #4
204fc     A7 FC 61 FC | 	wrlong	result2, fp
20500     04 4E 05 F1 | 	add	fp, #4
20504     A7 2A 62 FC | 	wrlong	local03, fp
20508                 | ' 
20508                 | ' t2=pop()
20508                 | ' t1=pop()
20508                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
20508     08 4E 85 F1 | 	sub	fp, #8
2050c     1F 2A 0E F2 | 	cmp	local03, #31 wz
20510     14 4E 05 A1 |  if_e	add	fp, #20
20514     A7 2C 02 AB |  if_e	rdlong	local04, fp
20518     14 4E 85 A1 |  if_e	sub	fp, #20
2051c     16 2B 02 A6 |  if_e	mov	local03, local04
20520     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20524     28 00 90 5D |  if_ne	jmp	#LR__2550
20528     00 26 06 F6 | 	mov	local01, #0
2052c     A7 12 02 FB | 	rdlong	arg01, fp
20530     0C 4E 05 F1 | 	add	fp, #12
20534     A7 14 02 FB | 	rdlong	arg02, fp
20538     0C 4E 85 F1 | 	sub	fp, #12
2053c     58 6A B0 FD | 	call	#__system___string_cmp
20540     00 FA 0D F2 | 	cmp	result1, #0 wz
20544     00 26 26 56 |  if_ne	not	local01, #0
20548     A7 26 62 FC | 	wrlong	local01, fp
2054c     20 04 90 FD | 	jmp	#LR__2563
20550                 | LR__2550
20550                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
20550     08 4E 05 F1 | 	add	fp, #8
20554     A7 26 02 FB | 	rdlong	local01, fp
20558     08 4E 85 F1 | 	sub	fp, #8
2055c     1E 26 0E F2 | 	cmp	local01, #30 wz
20560     14 4E 05 A1 |  if_e	add	fp, #20
20564     A7 2C 02 AB |  if_e	rdlong	local04, fp
20568     14 4E 85 A1 |  if_e	sub	fp, #20
2056c     16 2B 02 A6 |  if_e	mov	local03, local04
20570     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20574     2C 00 90 5D |  if_ne	jmp	#LR__2551
20578     00 26 06 F6 | 	mov	local01, #0
2057c     A7 12 02 FB | 	rdlong	arg01, fp
20580     0C 4E 05 F1 | 	add	fp, #12
20584     A7 14 02 FB | 	rdlong	arg02, fp
20588     0C 4E 85 F1 | 	sub	fp, #12
2058c     01 16 06 F6 | 	mov	arg03, #1
20590     88 9C B0 FD | 	call	#__system___float_cmp
20594     00 FA 0D F2 | 	cmp	result1, #0 wz
20598     00 26 26 56 |  if_ne	not	local01, #0
2059c     A7 26 62 FC | 	wrlong	local01, fp
205a0     CC 03 90 FD | 	jmp	#LR__2563
205a4                 | LR__2551
205a4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
205a4     08 4E 05 F1 | 	add	fp, #8
205a8     A7 26 02 FB | 	rdlong	local01, fp
205ac     08 4E 85 F1 | 	sub	fp, #8
205b0     1E 26 0E F2 | 	cmp	local01, #30 wz
205b4     14 4E 05 A1 |  if_e	add	fp, #20
205b8     A7 2C 02 AB |  if_e	rdlong	local04, fp
205bc     14 4E 85 A1 |  if_e	sub	fp, #20
205c0     16 2B 02 A6 |  if_e	mov	local03, local04
205c4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
205c8     48 00 90 5D |  if_ne	jmp	#LR__2552
205cc     00 26 06 F6 | 	mov	local01, #0
205d0     A7 28 02 FB | 	rdlong	local02, fp
205d4     0C 4E 05 F1 | 	add	fp, #12
205d8     A7 12 02 FB | 	rdlong	arg01, fp
205dc     0C 4E 85 F1 | 	sub	fp, #12
205e0     09 13 52 F6 | 	abs	arg01, arg01 wc
205e4     1F 2E C6 C9 |  if_b	decod	local05, #31
205e8     00 2E 06 36 |  if_ae	mov	local05, #0
205ec     F4 93 B0 FD | 	call	#__system___float_fromuns
205f0     17 FB 61 F5 | 	xor	result1, local05
205f4     FD 14 02 F6 | 	mov	arg02, result1
205f8     14 13 02 F6 | 	mov	arg01, local02
205fc     01 16 06 F6 | 	mov	arg03, #1
20600     18 9C B0 FD | 	call	#__system___float_cmp
20604     00 FA 0D F2 | 	cmp	result1, #0 wz
20608     00 26 26 56 |  if_ne	not	local01, #0
2060c     A7 26 62 FC | 	wrlong	local01, fp
20610     5C 03 90 FD | 	jmp	#LR__2563
20614                 | LR__2552
20614                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
20614     08 4E 05 F1 | 	add	fp, #8
20618     A7 26 02 FB | 	rdlong	local01, fp
2061c     08 4E 85 F1 | 	sub	fp, #8
20620     1E 26 0E F2 | 	cmp	local01, #30 wz
20624     14 4E 05 A1 |  if_e	add	fp, #20
20628     A7 2C 02 AB |  if_e	rdlong	local04, fp
2062c     14 4E 85 A1 |  if_e	sub	fp, #20
20630     16 2B 02 A6 |  if_e	mov	local03, local04
20634     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20638     38 00 90 5D |  if_ne	jmp	#LR__2553
2063c     00 26 06 F6 | 	mov	local01, #0
20640     A7 28 02 FB | 	rdlong	local02, fp
20644     0C 4E 05 F1 | 	add	fp, #12
20648     A7 12 02 FB | 	rdlong	arg01, fp
2064c     0C 4E 85 F1 | 	sub	fp, #12
20650     90 93 B0 FD | 	call	#__system___float_fromuns
20654     FD 14 02 F6 | 	mov	arg02, result1
20658     14 13 02 F6 | 	mov	arg01, local02
2065c     01 16 06 F6 | 	mov	arg03, #1
20660     B8 9B B0 FD | 	call	#__system___float_cmp
20664     00 FA 0D F2 | 	cmp	result1, #0 wz
20668     00 26 26 56 |  if_ne	not	local01, #0
2066c     A7 26 62 FC | 	wrlong	local01, fp
20670     FC 02 90 FD | 	jmp	#LR__2563
20674                 | LR__2553
20674                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
20674     08 4E 05 F1 | 	add	fp, #8
20678     A7 26 02 FB | 	rdlong	local01, fp
2067c     08 4E 85 F1 | 	sub	fp, #8
20680     1C 26 0E F2 | 	cmp	local01, #28 wz
20684     14 4E 05 A1 |  if_e	add	fp, #20
20688     A7 2C 02 AB |  if_e	rdlong	local04, fp
2068c     14 4E 85 A1 |  if_e	sub	fp, #20
20690     16 2B 02 A6 |  if_e	mov	local03, local04
20694     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20698     44 00 90 5D |  if_ne	jmp	#LR__2554
2069c     00 26 06 F6 | 	mov	local01, #0
206a0     A7 12 02 FB | 	rdlong	arg01, fp
206a4     09 13 52 F6 | 	abs	arg01, arg01 wc
206a8     1F 2E C6 C9 |  if_b	decod	local05, #31
206ac     00 2E 06 36 |  if_ae	mov	local05, #0
206b0     30 93 B0 FD | 	call	#__system___float_fromuns
206b4     17 FB 61 F5 | 	xor	result1, local05
206b8     FD 12 02 F6 | 	mov	arg01, result1
206bc     0C 4E 05 F1 | 	add	fp, #12
206c0     A7 14 02 FB | 	rdlong	arg02, fp
206c4     0C 4E 85 F1 | 	sub	fp, #12
206c8     01 16 06 F6 | 	mov	arg03, #1
206cc     4C 9B B0 FD | 	call	#__system___float_cmp
206d0     00 FA 0D F2 | 	cmp	result1, #0 wz
206d4     00 26 26 56 |  if_ne	not	local01, #0
206d8     A7 26 62 FC | 	wrlong	local01, fp
206dc     90 02 90 FD | 	jmp	#LR__2563
206e0                 | LR__2554
206e0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
206e0     08 4E 05 F1 | 	add	fp, #8
206e4     A7 26 02 FB | 	rdlong	local01, fp
206e8     08 4E 85 F1 | 	sub	fp, #8
206ec     1C 26 0E F2 | 	cmp	local01, #28 wz
206f0     14 4E 05 A1 |  if_e	add	fp, #20
206f4     A7 2C 02 AB |  if_e	rdlong	local04, fp
206f8     14 4E 85 A1 |  if_e	sub	fp, #20
206fc     16 2B 02 A6 |  if_e	mov	local03, local04
20700     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20704     24 00 90 5D |  if_ne	jmp	#LR__2555
20708     00 26 06 F6 | 	mov	local01, #0
2070c     A7 28 02 FB | 	rdlong	local02, fp
20710     0C 4E 05 F1 | 	add	fp, #12
20714     A7 2A 02 FB | 	rdlong	local03, fp
20718     0C 4E 85 F1 | 	sub	fp, #12
2071c     15 29 0A F2 | 	cmp	local02, local03 wz
20720     01 26 66 56 |  if_ne	neg	local01, #1
20724     A7 26 62 FC | 	wrlong	local01, fp
20728     44 02 90 FD | 	jmp	#LR__2563
2072c                 | LR__2555
2072c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
2072c     08 4E 05 F1 | 	add	fp, #8
20730     A7 26 02 FB | 	rdlong	local01, fp
20734     08 4E 85 F1 | 	sub	fp, #8
20738     1C 26 0E F2 | 	cmp	local01, #28 wz
2073c     14 4E 05 A1 |  if_e	add	fp, #20
20740     A7 2C 02 AB |  if_e	rdlong	local04, fp
20744     14 4E 85 A1 |  if_e	sub	fp, #20
20748     16 2B 02 A6 |  if_e	mov	local03, local04
2074c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20750     24 00 90 5D |  if_ne	jmp	#LR__2556
20754     00 26 06 F6 | 	mov	local01, #0
20758     A7 28 02 FB | 	rdlong	local02, fp
2075c     0C 4E 05 F1 | 	add	fp, #12
20760     A7 2A 02 FB | 	rdlong	local03, fp
20764     0C 4E 85 F1 | 	sub	fp, #12
20768     15 29 0A F2 | 	cmp	local02, local03 wz
2076c     01 26 66 56 |  if_ne	neg	local01, #1
20770     A7 26 62 FC | 	wrlong	local01, fp
20774     F8 01 90 FD | 	jmp	#LR__2563
20778                 | LR__2556
20778                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
20778     08 4E 05 F1 | 	add	fp, #8
2077c     A7 26 02 FB | 	rdlong	local01, fp
20780     08 4E 85 F1 | 	sub	fp, #8
20784     1D 26 0E F2 | 	cmp	local01, #29 wz
20788     14 4E 05 A1 |  if_e	add	fp, #20
2078c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20790     14 4E 85 A1 |  if_e	sub	fp, #20
20794     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
20798     34 00 90 5D |  if_ne	jmp	#LR__2557
2079c     00 26 06 F6 | 	mov	local01, #0
207a0     A7 12 02 FB | 	rdlong	arg01, fp
207a4     3C 92 B0 FD | 	call	#__system___float_fromuns
207a8     FD 12 02 F6 | 	mov	arg01, result1
207ac     0C 4E 05 F1 | 	add	fp, #12
207b0     A7 14 02 FB | 	rdlong	arg02, fp
207b4     0C 4E 85 F1 | 	sub	fp, #12
207b8     01 16 06 F6 | 	mov	arg03, #1
207bc     5C 9A B0 FD | 	call	#__system___float_cmp
207c0     00 FA 0D F2 | 	cmp	result1, #0 wz
207c4     00 26 26 56 |  if_ne	not	local01, #0
207c8     A7 26 62 FC | 	wrlong	local01, fp
207cc     A0 01 90 FD | 	jmp	#LR__2563
207d0                 | LR__2557
207d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
207d0     08 4E 05 F1 | 	add	fp, #8
207d4     A7 26 02 FB | 	rdlong	local01, fp
207d8     08 4E 85 F1 | 	sub	fp, #8
207dc     1D 26 0E F2 | 	cmp	local01, #29 wz
207e0     14 4E 05 A1 |  if_e	add	fp, #20
207e4     A7 2A 02 AB |  if_e	rdlong	local03, fp
207e8     14 4E 85 A1 |  if_e	sub	fp, #20
207ec     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
207f0     24 00 90 5D |  if_ne	jmp	#LR__2558
207f4     00 26 06 F6 | 	mov	local01, #0
207f8     A7 28 02 FB | 	rdlong	local02, fp
207fc     0C 4E 05 F1 | 	add	fp, #12
20800     A7 2A 02 FB | 	rdlong	local03, fp
20804     0C 4E 85 F1 | 	sub	fp, #12
20808     15 29 0A F2 | 	cmp	local02, local03 wz
2080c     01 26 66 56 |  if_ne	neg	local01, #1
20810     A7 26 62 FC | 	wrlong	local01, fp
20814     58 01 90 FD | 	jmp	#LR__2563
20818                 | LR__2558
20818                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
20818     08 4E 05 F1 | 	add	fp, #8
2081c     A7 26 02 FB | 	rdlong	local01, fp
20820     08 4E 85 F1 | 	sub	fp, #8
20824     1D 26 0E F2 | 	cmp	local01, #29 wz
20828     14 4E 05 A1 |  if_e	add	fp, #20
2082c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20830     14 4E 85 A1 |  if_e	sub	fp, #20
20834     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20838     24 00 90 5D |  if_ne	jmp	#LR__2559
2083c     00 26 06 F6 | 	mov	local01, #0
20840     A7 28 02 FB | 	rdlong	local02, fp
20844     0C 4E 05 F1 | 	add	fp, #12
20848     A7 2A 02 FB | 	rdlong	local03, fp
2084c     0C 4E 85 F1 | 	sub	fp, #12
20850     15 29 0A F2 | 	cmp	local02, local03 wz
20854     01 26 66 56 |  if_ne	neg	local01, #1
20858     A7 26 62 FC | 	wrlong	local01, fp
2085c     10 01 90 FD | 	jmp	#LR__2563
20860                 | LR__2559
20860                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
20860     08 4E 05 F1 | 	add	fp, #8
20864     A7 26 02 FB | 	rdlong	local01, fp
20868     08 4E 85 F1 | 	sub	fp, #8
2086c     2B 26 0E F2 | 	cmp	local01, #43 wz
20870     14 4E 05 A1 |  if_e	add	fp, #20
20874     A7 2A 02 AB |  if_e	rdlong	local03, fp
20878     14 4E 85 A1 |  if_e	sub	fp, #20
2087c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20880     30 00 90 5D |  if_ne	jmp	#LR__2560
20884     00 26 06 F6 | 	mov	local01, #0
20888     A7 12 02 FB | 	rdlong	arg01, fp
2088c     AC CF BE FD | 	call	#_convertstring
20890     FD 12 02 F6 | 	mov	arg01, result1
20894     0C 4E 05 F1 | 	add	fp, #12
20898     A7 14 02 FB | 	rdlong	arg02, fp
2089c     0C 4E 85 F1 | 	sub	fp, #12
208a0     F4 66 B0 FD | 	call	#__system___string_cmp
208a4     00 FA 0D F2 | 	cmp	result1, #0 wz
208a8     00 26 26 56 |  if_ne	not	local01, #0
208ac     A7 26 62 FC | 	wrlong	local01, fp
208b0     BC 00 90 FD | 	jmp	#LR__2563
208b4                 | LR__2560
208b4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
208b4     08 4E 05 F1 | 	add	fp, #8
208b8     A7 26 02 FB | 	rdlong	local01, fp
208bc     08 4E 85 F1 | 	sub	fp, #8
208c0     1F 26 0E F2 | 	cmp	local01, #31 wz
208c4     14 4E 05 A1 |  if_e	add	fp, #20
208c8     A7 2A 02 AB |  if_e	rdlong	local03, fp
208cc     14 4E 85 A1 |  if_e	sub	fp, #20
208d0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
208d4     34 00 90 5D |  if_ne	jmp	#LR__2561
208d8     00 26 06 F6 | 	mov	local01, #0
208dc     A7 28 02 FB | 	rdlong	local02, fp
208e0     0C 4E 05 F1 | 	add	fp, #12
208e4     A7 12 02 FB | 	rdlong	arg01, fp
208e8     0C 4E 85 F1 | 	sub	fp, #12
208ec     4C CF BE FD | 	call	#_convertstring
208f0     FD 14 02 F6 | 	mov	arg02, result1
208f4     14 13 02 F6 | 	mov	arg01, local02
208f8     9C 66 B0 FD | 	call	#__system___string_cmp
208fc     00 FA 0D F2 | 	cmp	result1, #0 wz
20900     00 26 26 56 |  if_ne	not	local01, #0
20904     A7 26 62 FC | 	wrlong	local01, fp
20908     64 00 90 FD | 	jmp	#LR__2563
2090c                 | LR__2561
2090c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
2090c     08 4E 05 F1 | 	add	fp, #8
20910     A7 26 02 FB | 	rdlong	local01, fp
20914     08 4E 85 F1 | 	sub	fp, #8
20918     2B 26 0E F2 | 	cmp	local01, #43 wz
2091c     14 4E 05 A1 |  if_e	add	fp, #20
20920     A7 2A 02 AB |  if_e	rdlong	local03, fp
20924     14 4E 85 A1 |  if_e	sub	fp, #20
20928     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
2092c     3C 00 90 5D |  if_ne	jmp	#LR__2562
20930     00 26 06 F6 | 	mov	local01, #0
20934     A7 12 02 FB | 	rdlong	arg01, fp
20938     00 CF BE FD | 	call	#_convertstring
2093c     FD 28 02 F6 | 	mov	local02, result1
20940     0C 4E 05 F1 | 	add	fp, #12
20944     A7 12 02 FB | 	rdlong	arg01, fp
20948     0C 4E 85 F1 | 	sub	fp, #12
2094c     EC CE BE FD | 	call	#_convertstring
20950     FD 14 02 F6 | 	mov	arg02, result1
20954     14 13 02 F6 | 	mov	arg01, local02
20958     3C 66 B0 FD | 	call	#__system___string_cmp
2095c     00 FA 0D F2 | 	cmp	result1, #0 wz
20960     00 26 26 56 |  if_ne	not	local01, #0
20964     A7 26 62 FC | 	wrlong	local01, fp
20968     04 00 90 FD | 	jmp	#LR__2563
2096c                 | LR__2562
2096c     A7 00 68 FC | 	wrlong	#0, fp
20970                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
20970                 | LR__2563
20970     08 4E 05 F1 | 	add	fp, #8
20974     A7 38 68 FC | 	wrlong	#28, fp
20978     08 4E 85 F1 | 	sub	fp, #8
2097c     A7 12 02 F6 | 	mov	arg01, fp
20980     D8 CD BE FD | 	call	#_push
20984     A7 F0 03 F6 | 	mov	ptra, fp
20988     B2 00 A0 FD | 	call	#popregs_
2098c                 | _do_ne_ret
2098c     2D 00 64 FD | 	ret
20990                 | 
20990                 | ' 
20990                 | ' '--------------------------------- OR
20990                 | ' 
20990                 | ' sub do_or 
20990                 | _do_or
20990     03 4A 05 F6 | 	mov	COUNT_, #3
20994     A8 00 A0 FD | 	call	#pushregs_
20998     18 F0 07 F1 | 	add	ptra, #24
2099c     24 CD BE FD | 	call	#_pop
209a0     FD 12 02 F6 | 	mov	arg01, result1
209a4     FE 26 02 F6 | 	mov	local01, result2
209a8     FF 28 02 F6 | 	mov	local02, result3
209ac     0C 4E 05 F1 | 	add	fp, #12
209b0     A7 12 62 FC | 	wrlong	arg01, fp
209b4     04 4E 05 F1 | 	add	fp, #4
209b8     A7 26 62 FC | 	wrlong	local01, fp
209bc     04 4E 05 F1 | 	add	fp, #4
209c0     A7 28 62 FC | 	wrlong	local02, fp
209c4     14 4E 85 F1 | 	sub	fp, #20
209c8     F8 CC BE FD | 	call	#_pop
209cc     FF 2A 02 F6 | 	mov	local03, result3
209d0     A7 FA 61 FC | 	wrlong	result1, fp
209d4     04 4E 05 F1 | 	add	fp, #4
209d8     A7 FC 61 FC | 	wrlong	result2, fp
209dc     04 4E 05 F1 | 	add	fp, #4
209e0     A7 2A 62 FC | 	wrlong	local03, fp
209e4                 | ' 
209e4                 | ' t2=pop()
209e4                 | ' t1=pop()
209e4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
209e4     08 4E 85 F1 | 	sub	fp, #8
209e8     1C 2A 0E F2 | 	cmp	local03, #28 wz
209ec     A7 2A 02 AB |  if_e	rdlong	local03, fp
209f0     A7 2A 62 AC |  if_e	wrlong	local03, fp
209f4     08 4E 05 A1 |  if_e	add	fp, #8
209f8     A7 3A 68 AC |  if_e	wrlong	#29, fp
209fc     08 4E 85 A1 |  if_e	sub	fp, #8
20a00                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
20a00     14 4E 05 F1 | 	add	fp, #20
20a04     A7 2A 02 FB | 	rdlong	local03, fp
20a08     14 4E 85 F1 | 	sub	fp, #20
20a0c     1C 2A 0E F2 | 	cmp	local03, #28 wz
20a10     18 00 90 5D |  if_ne	jmp	#LR__2570
20a14     0C 4E 05 F1 | 	add	fp, #12
20a18     A7 2A 02 FB | 	rdlong	local03, fp
20a1c     A7 2A 62 FC | 	wrlong	local03, fp
20a20     08 4E 05 F1 | 	add	fp, #8
20a24     A7 3A 68 FC | 	wrlong	#29, fp
20a28     14 4E 85 F1 | 	sub	fp, #20
20a2c                 | LR__2570
20a2c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
20a2c     08 4E 05 F1 | 	add	fp, #8
20a30     A7 2A 02 FB | 	rdlong	local03, fp
20a34     08 4E 85 F1 | 	sub	fp, #8
20a38     1F 2A 0E F2 | 	cmp	local03, #31 wz
20a3c     14 4E 05 51 |  if_ne	add	fp, #20
20a40     A7 28 02 5B |  if_ne	rdlong	local02, fp
20a44     14 4E 85 51 |  if_ne	sub	fp, #20
20a48     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
20a4c     08 4E 05 51 |  if_ne	add	fp, #8
20a50     A7 2A 02 5B |  if_ne	rdlong	local03, fp
20a54     08 4E 85 51 |  if_ne	sub	fp, #8
20a58     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
20a5c     14 4E 05 51 |  if_ne	add	fp, #20
20a60     14 4E 85 51 |  if_ne	sub	fp, #20
20a64     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
20a68     A7 0C 68 AC |  if_e	wrlong	#6, fp
20a6c     08 4E 05 A1 |  if_e	add	fp, #8
20a70     A7 FE 69 AC |  if_e	wrlong	#255, fp
20a74     08 4E 85 A1 |  if_e	sub	fp, #8
20a78     18 00 90 AD |  if_e	jmp	#LR__2571
20a7c     A7 2A 02 FB | 	rdlong	local03, fp
20a80     0C 4E 05 F1 | 	add	fp, #12
20a84     A7 26 02 FB | 	rdlong	local01, fp
20a88     0C 4E 85 F1 | 	sub	fp, #12
20a8c     13 2B 42 F5 | 	or	local03, local01
20a90     A7 2A 62 FC | 	wrlong	local03, fp
20a94                 | LR__2571
20a94     A7 12 02 F6 | 	mov	arg01, fp
20a98     C0 CC BE FD | 	call	#_push
20a9c     A7 F0 03 F6 | 	mov	ptra, fp
20aa0     B2 00 A0 FD | 	call	#popregs_
20aa4                 | _do_or_ret
20aa4     2D 00 64 FD | 	ret
20aa8                 | 
20aa8                 | ' 
20aa8                 | ' '--------------------------------- plus (+)
20aa8                 | ' 
20aa8                 | ' sub do_plus 
20aa8                 | _do_plus
20aa8     05 4A 05 F6 | 	mov	COUNT_, #5
20aac     A8 00 A0 FD | 	call	#pushregs_
20ab0     18 F0 07 F1 | 	add	ptra, #24
20ab4     0C CC BE FD | 	call	#_pop
20ab8     FD 26 02 F6 | 	mov	local01, result1
20abc     FE 28 02 F6 | 	mov	local02, result2
20ac0     FF 2A 02 F6 | 	mov	local03, result3
20ac4     0C 4E 05 F1 | 	add	fp, #12
20ac8     A7 26 62 FC | 	wrlong	local01, fp
20acc     04 4E 05 F1 | 	add	fp, #4
20ad0     A7 28 62 FC | 	wrlong	local02, fp
20ad4     04 4E 05 F1 | 	add	fp, #4
20ad8     A7 2A 62 FC | 	wrlong	local03, fp
20adc     14 4E 85 F1 | 	sub	fp, #20
20ae0     E0 CB BE FD | 	call	#_pop
20ae4     FF 2A 02 F6 | 	mov	local03, result3
20ae8     A7 FA 61 FC | 	wrlong	result1, fp
20aec     04 4E 05 F1 | 	add	fp, #4
20af0     A7 FC 61 FC | 	wrlong	result2, fp
20af4     04 4E 05 F1 | 	add	fp, #4
20af8     A7 2A 62 FC | 	wrlong	local03, fp
20afc                 | ' 
20afc                 | ' t2=pop()
20afc                 | ' t1=pop()
20afc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
20afc     08 4E 85 F1 | 	sub	fp, #8
20b00     1D 2A 0E F2 | 	cmp	local03, #29 wz
20b04     14 4E 05 A1 |  if_e	add	fp, #20
20b08     A7 2C 02 AB |  if_e	rdlong	local04, fp
20b0c     14 4E 85 A1 |  if_e	sub	fp, #20
20b10     16 2B 02 A6 |  if_e	mov	local03, local04
20b14     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20b18     1C 00 90 5D |  if_ne	jmp	#LR__2580
20b1c     A7 26 02 FB | 	rdlong	local01, fp
20b20     0C 4E 05 F1 | 	add	fp, #12
20b24     A7 28 02 FB | 	rdlong	local02, fp
20b28     0C 4E 85 F1 | 	sub	fp, #12
20b2c     14 27 02 F1 | 	add	local01, local02
20b30     A7 26 62 FC | 	wrlong	local01, fp
20b34     48 04 90 FD | 	jmp	#LR__2595
20b38                 | LR__2580
20b38                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
20b38     08 4E 05 F1 | 	add	fp, #8
20b3c     A7 26 02 FB | 	rdlong	local01, fp
20b40     08 4E 85 F1 | 	sub	fp, #8
20b44     1D 26 0E F2 | 	cmp	local01, #29 wz
20b48     14 4E 05 A1 |  if_e	add	fp, #20
20b4c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20b50     14 4E 85 A1 |  if_e	sub	fp, #20
20b54     16 2B 02 A6 |  if_e	mov	local03, local04
20b58     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20b5c     28 00 90 5D |  if_ne	jmp	#LR__2581
20b60     A7 26 02 FB | 	rdlong	local01, fp
20b64     0C 4E 05 F1 | 	add	fp, #12
20b68     A7 28 02 FB | 	rdlong	local02, fp
20b6c     0C 4E 85 F1 | 	sub	fp, #12
20b70     14 27 02 F1 | 	add	local01, local02
20b74     A7 26 62 FC | 	wrlong	local01, fp
20b78     08 4E 05 F1 | 	add	fp, #8
20b7c     A7 38 68 FC | 	wrlong	#28, fp
20b80     08 4E 85 F1 | 	sub	fp, #8
20b84     F8 03 90 FD | 	jmp	#LR__2595
20b88                 | LR__2581
20b88                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
20b88     08 4E 05 F1 | 	add	fp, #8
20b8c     A7 26 02 FB | 	rdlong	local01, fp
20b90     08 4E 85 F1 | 	sub	fp, #8
20b94     1D 26 0E F2 | 	cmp	local01, #29 wz
20b98     14 4E 05 A1 |  if_e	add	fp, #20
20b9c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20ba0     14 4E 85 A1 |  if_e	sub	fp, #20
20ba4     16 2B 02 A6 |  if_e	mov	local03, local04
20ba8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20bac     30 00 90 5D |  if_ne	jmp	#LR__2582
20bb0     A7 12 02 FB | 	rdlong	arg01, fp
20bb4     2C 8E B0 FD | 	call	#__system___float_fromuns
20bb8     FD 12 02 F6 | 	mov	arg01, result1
20bbc     0C 4E 05 F1 | 	add	fp, #12
20bc0     A7 14 02 FB | 	rdlong	arg02, fp
20bc4     0C 4E 85 F1 | 	sub	fp, #12
20bc8     4C 8E B0 FD | 	call	#__system___float_add
20bcc     A7 FA 61 FC | 	wrlong	result1, fp
20bd0     08 4E 05 F1 | 	add	fp, #8
20bd4     A7 3C 68 FC | 	wrlong	#30, fp
20bd8     08 4E 85 F1 | 	sub	fp, #8
20bdc     A0 03 90 FD | 	jmp	#LR__2595
20be0                 | LR__2582
20be0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
20be0     08 4E 05 F1 | 	add	fp, #8
20be4     A7 26 02 FB | 	rdlong	local01, fp
20be8     08 4E 85 F1 | 	sub	fp, #8
20bec     1C 26 0E F2 | 	cmp	local01, #28 wz
20bf0     14 4E 05 A1 |  if_e	add	fp, #20
20bf4     A7 2C 02 AB |  if_e	rdlong	local04, fp
20bf8     14 4E 85 A1 |  if_e	sub	fp, #20
20bfc     16 2B 02 A6 |  if_e	mov	local03, local04
20c00     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20c04     1C 00 90 5D |  if_ne	jmp	#LR__2583
20c08     A7 26 02 FB | 	rdlong	local01, fp
20c0c     0C 4E 05 F1 | 	add	fp, #12
20c10     A7 28 02 FB | 	rdlong	local02, fp
20c14     0C 4E 85 F1 | 	sub	fp, #12
20c18     14 27 02 F1 | 	add	local01, local02
20c1c     A7 26 62 FC | 	wrlong	local01, fp
20c20     5C 03 90 FD | 	jmp	#LR__2595
20c24                 | LR__2583
20c24                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
20c24     08 4E 05 F1 | 	add	fp, #8
20c28     A7 26 02 FB | 	rdlong	local01, fp
20c2c     08 4E 85 F1 | 	sub	fp, #8
20c30     1C 26 0E F2 | 	cmp	local01, #28 wz
20c34     14 4E 05 A1 |  if_e	add	fp, #20
20c38     A7 2C 02 AB |  if_e	rdlong	local04, fp
20c3c     14 4E 85 A1 |  if_e	sub	fp, #20
20c40     16 2B 02 A6 |  if_e	mov	local03, local04
20c44     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20c48     1C 00 90 5D |  if_ne	jmp	#LR__2584
20c4c     A7 26 02 FB | 	rdlong	local01, fp
20c50     0C 4E 05 F1 | 	add	fp, #12
20c54     A7 28 02 FB | 	rdlong	local02, fp
20c58     0C 4E 85 F1 | 	sub	fp, #12
20c5c     14 27 02 F1 | 	add	local01, local02
20c60     A7 26 62 FC | 	wrlong	local01, fp
20c64     18 03 90 FD | 	jmp	#LR__2595
20c68                 | LR__2584
20c68                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
20c68     08 4E 05 F1 | 	add	fp, #8
20c6c     A7 26 02 FB | 	rdlong	local01, fp
20c70     08 4E 85 F1 | 	sub	fp, #8
20c74     1C 26 0E F2 | 	cmp	local01, #28 wz
20c78     14 4E 05 A1 |  if_e	add	fp, #20
20c7c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20c80     14 4E 85 A1 |  if_e	sub	fp, #20
20c84     16 2B 02 A6 |  if_e	mov	local03, local04
20c88     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20c8c     40 00 90 5D |  if_ne	jmp	#LR__2585
20c90     A7 12 02 FB | 	rdlong	arg01, fp
20c94     09 13 52 F6 | 	abs	arg01, arg01 wc
20c98     1F 2E C6 C9 |  if_b	decod	local05, #31
20c9c     00 2E 06 36 |  if_ae	mov	local05, #0
20ca0     40 8D B0 FD | 	call	#__system___float_fromuns
20ca4     17 FB 61 F5 | 	xor	result1, local05
20ca8     FD 12 02 F6 | 	mov	arg01, result1
20cac     0C 4E 05 F1 | 	add	fp, #12
20cb0     A7 14 02 FB | 	rdlong	arg02, fp
20cb4     0C 4E 85 F1 | 	sub	fp, #12
20cb8     5C 8D B0 FD | 	call	#__system___float_add
20cbc     A7 FA 61 FC | 	wrlong	result1, fp
20cc0     08 4E 05 F1 | 	add	fp, #8
20cc4     A7 3C 68 FC | 	wrlong	#30, fp
20cc8     08 4E 85 F1 | 	sub	fp, #8
20ccc     B0 02 90 FD | 	jmp	#LR__2595
20cd0                 | LR__2585
20cd0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
20cd0     08 4E 05 F1 | 	add	fp, #8
20cd4     A7 26 02 FB | 	rdlong	local01, fp
20cd8     08 4E 85 F1 | 	sub	fp, #8
20cdc     1E 26 0E F2 | 	cmp	local01, #30 wz
20ce0     14 4E 05 A1 |  if_e	add	fp, #20
20ce4     A7 2C 02 AB |  if_e	rdlong	local04, fp
20ce8     14 4E 85 A1 |  if_e	sub	fp, #20
20cec     16 2B 02 A6 |  if_e	mov	local03, local04
20cf0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20cf4     28 00 90 5D |  if_ne	jmp	#LR__2586
20cf8     A7 26 02 FB | 	rdlong	local01, fp
20cfc     0C 4E 05 F1 | 	add	fp, #12
20d00     A7 12 02 FB | 	rdlong	arg01, fp
20d04     0C 4E 85 F1 | 	sub	fp, #12
20d08     D8 8C B0 FD | 	call	#__system___float_fromuns
20d0c     FD 14 02 F6 | 	mov	arg02, result1
20d10     13 13 02 F6 | 	mov	arg01, local01
20d14     00 8D B0 FD | 	call	#__system___float_add
20d18     A7 FA 61 FC | 	wrlong	result1, fp
20d1c     60 02 90 FD | 	jmp	#LR__2595
20d20                 | LR__2586
20d20                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
20d20     08 4E 05 F1 | 	add	fp, #8
20d24     A7 26 02 FB | 	rdlong	local01, fp
20d28     08 4E 85 F1 | 	sub	fp, #8
20d2c     1E 26 0E F2 | 	cmp	local01, #30 wz
20d30     14 4E 05 A1 |  if_e	add	fp, #20
20d34     A7 2C 02 AB |  if_e	rdlong	local04, fp
20d38     14 4E 85 A1 |  if_e	sub	fp, #20
20d3c     16 2B 02 A6 |  if_e	mov	local03, local04
20d40     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20d44     38 00 90 5D |  if_ne	jmp	#LR__2587
20d48     A7 26 02 FB | 	rdlong	local01, fp
20d4c     0C 4E 05 F1 | 	add	fp, #12
20d50     A7 12 02 FB | 	rdlong	arg01, fp
20d54     0C 4E 85 F1 | 	sub	fp, #12
20d58     09 13 52 F6 | 	abs	arg01, arg01 wc
20d5c     1F 2E C6 C9 |  if_b	decod	local05, #31
20d60     00 2E 06 36 |  if_ae	mov	local05, #0
20d64     7C 8C B0 FD | 	call	#__system___float_fromuns
20d68     17 FB 61 F5 | 	xor	result1, local05
20d6c     FD 14 02 F6 | 	mov	arg02, result1
20d70     13 13 02 F6 | 	mov	arg01, local01
20d74     A0 8C B0 FD | 	call	#__system___float_add
20d78     A7 FA 61 FC | 	wrlong	result1, fp
20d7c     00 02 90 FD | 	jmp	#LR__2595
20d80                 | LR__2587
20d80                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
20d80     08 4E 05 F1 | 	add	fp, #8
20d84     A7 26 02 FB | 	rdlong	local01, fp
20d88     08 4E 85 F1 | 	sub	fp, #8
20d8c     1E 26 0E F2 | 	cmp	local01, #30 wz
20d90     14 4E 05 A1 |  if_e	add	fp, #20
20d94     A7 2C 02 AB |  if_e	rdlong	local04, fp
20d98     14 4E 85 A1 |  if_e	sub	fp, #20
20d9c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
20da0     1C 00 90 5D |  if_ne	jmp	#LR__2588
20da4     A7 12 02 FB | 	rdlong	arg01, fp
20da8     0C 4E 05 F1 | 	add	fp, #12
20dac     A7 14 02 FB | 	rdlong	arg02, fp
20db0     0C 4E 85 F1 | 	sub	fp, #12
20db4     60 8C B0 FD | 	call	#__system___float_add
20db8     A7 FA 61 FC | 	wrlong	result1, fp
20dbc     C0 01 90 FD | 	jmp	#LR__2595
20dc0                 | LR__2588
20dc0                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
20dc0     08 4E 05 F1 | 	add	fp, #8
20dc4     A7 26 02 FB | 	rdlong	local01, fp
20dc8     08 4E 85 F1 | 	sub	fp, #8
20dcc     1F 26 0E F2 | 	cmp	local01, #31 wz
20dd0     24 00 90 5D |  if_ne	jmp	#LR__2589
20dd4     14 4E 05 F1 | 	add	fp, #20
20dd8     A7 2A 02 FB | 	rdlong	local03, fp
20ddc     14 4E 85 F1 | 	sub	fp, #20
20de0     1F 2A 0E F2 | 	cmp	local03, #31 wz
20de4     A7 04 68 5C |  if_ne	wrlong	#2, fp
20de8     08 4E 05 51 |  if_ne	add	fp, #8
20dec     A7 FE 69 5C |  if_ne	wrlong	#255, fp
20df0     08 4E 85 51 |  if_ne	sub	fp, #8
20df4     88 01 90 5D |  if_ne	jmp	#LR__2595
20df8                 | LR__2589
20df8                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
20df8     14 4E 05 F1 | 	add	fp, #20
20dfc     A7 26 02 FB | 	rdlong	local01, fp
20e00     14 4E 85 F1 | 	sub	fp, #20
20e04     1F 26 0E F2 | 	cmp	local01, #31 wz
20e08     24 00 90 5D |  if_ne	jmp	#LR__2590
20e0c     08 4E 05 F1 | 	add	fp, #8
20e10     A7 2A 02 FB | 	rdlong	local03, fp
20e14     08 4E 85 F1 | 	sub	fp, #8
20e18     1F 2A 0E F2 | 	cmp	local03, #31 wz
20e1c     A7 04 68 5C |  if_ne	wrlong	#2, fp
20e20     08 4E 05 51 |  if_ne	add	fp, #8
20e24     A7 FE 69 5C |  if_ne	wrlong	#255, fp
20e28     08 4E 85 51 |  if_ne	sub	fp, #8
20e2c     50 01 90 5D |  if_ne	jmp	#LR__2595
20e30                 | LR__2590
20e30                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
20e30     08 4E 05 F1 | 	add	fp, #8
20e34     A7 26 02 FB | 	rdlong	local01, fp
20e38     08 4E 85 F1 | 	sub	fp, #8
20e3c     1F 26 0E F2 | 	cmp	local01, #31 wz
20e40     14 4E 05 A1 |  if_e	add	fp, #20
20e44     A7 2A 02 AB |  if_e	rdlong	local03, fp
20e48     14 4E 85 A1 |  if_e	sub	fp, #20
20e4c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20e50     1C 00 90 5D |  if_ne	jmp	#LR__2591
20e54     A7 12 02 FB | 	rdlong	arg01, fp
20e58     0C 4E 05 F1 | 	add	fp, #12
20e5c     A7 14 02 FB | 	rdlong	arg02, fp
20e60     0C 4E 85 F1 | 	sub	fp, #12
20e64     64 61 B0 FD | 	call	#__system___string_concat
20e68     A7 FA 61 FC | 	wrlong	result1, fp
20e6c     10 01 90 FD | 	jmp	#LR__2595
20e70                 | LR__2591
20e70                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
20e70     08 4E 05 F1 | 	add	fp, #8
20e74     A7 26 02 FB | 	rdlong	local01, fp
20e78     08 4E 85 F1 | 	sub	fp, #8
20e7c     2B 26 0E F2 | 	cmp	local01, #43 wz
20e80     14 4E 05 A1 |  if_e	add	fp, #20
20e84     A7 2A 02 AB |  if_e	rdlong	local03, fp
20e88     14 4E 85 A1 |  if_e	sub	fp, #20
20e8c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20e90     30 00 90 5D |  if_ne	jmp	#LR__2592
20e94     A7 12 02 FB | 	rdlong	arg01, fp
20e98     A0 C9 BE FD | 	call	#_convertstring
20e9c     FD 12 02 F6 | 	mov	arg01, result1
20ea0     0C 4E 05 F1 | 	add	fp, #12
20ea4     A7 14 02 FB | 	rdlong	arg02, fp
20ea8     0C 4E 85 F1 | 	sub	fp, #12
20eac     1C 61 B0 FD | 	call	#__system___string_concat
20eb0     A7 FA 61 FC | 	wrlong	result1, fp
20eb4     08 4E 05 F1 | 	add	fp, #8
20eb8     A7 3E 68 FC | 	wrlong	#31, fp
20ebc     08 4E 85 F1 | 	sub	fp, #8
20ec0     BC 00 90 FD | 	jmp	#LR__2595
20ec4                 | LR__2592
20ec4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
20ec4     08 4E 05 F1 | 	add	fp, #8
20ec8     A7 26 02 FB | 	rdlong	local01, fp
20ecc     08 4E 85 F1 | 	sub	fp, #8
20ed0     1F 26 0E F2 | 	cmp	local01, #31 wz
20ed4     14 4E 05 A1 |  if_e	add	fp, #20
20ed8     A7 2A 02 AB |  if_e	rdlong	local03, fp
20edc     14 4E 85 A1 |  if_e	sub	fp, #20
20ee0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20ee4     28 00 90 5D |  if_ne	jmp	#LR__2593
20ee8     A7 26 02 FB | 	rdlong	local01, fp
20eec     0C 4E 05 F1 | 	add	fp, #12
20ef0     A7 12 02 FB | 	rdlong	arg01, fp
20ef4     0C 4E 85 F1 | 	sub	fp, #12
20ef8     40 C9 BE FD | 	call	#_convertstring
20efc     FD 14 02 F6 | 	mov	arg02, result1
20f00     13 13 02 F6 | 	mov	arg01, local01
20f04     C4 60 B0 FD | 	call	#__system___string_concat
20f08     A7 FA 61 FC | 	wrlong	result1, fp
20f0c     70 00 90 FD | 	jmp	#LR__2595
20f10                 | LR__2593
20f10                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
20f10     08 4E 05 F1 | 	add	fp, #8
20f14     A7 26 02 FB | 	rdlong	local01, fp
20f18     08 4E 85 F1 | 	sub	fp, #8
20f1c     2B 26 0E F2 | 	cmp	local01, #43 wz
20f20     14 4E 05 A1 |  if_e	add	fp, #20
20f24     A7 2A 02 AB |  if_e	rdlong	local03, fp
20f28     14 4E 85 A1 |  if_e	sub	fp, #20
20f2c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20f30     3C 00 90 5D |  if_ne	jmp	#LR__2594
20f34     A7 12 02 FB | 	rdlong	arg01, fp
20f38     00 C9 BE FD | 	call	#_convertstring
20f3c     FD 26 02 F6 | 	mov	local01, result1
20f40     0C 4E 05 F1 | 	add	fp, #12
20f44     A7 12 02 FB | 	rdlong	arg01, fp
20f48     0C 4E 85 F1 | 	sub	fp, #12
20f4c     EC C8 BE FD | 	call	#_convertstring
20f50     FD 14 02 F6 | 	mov	arg02, result1
20f54     13 13 02 F6 | 	mov	arg01, local01
20f58     70 60 B0 FD | 	call	#__system___string_concat
20f5c     A7 FA 61 FC | 	wrlong	result1, fp
20f60     08 4E 05 F1 | 	add	fp, #8
20f64     A7 3E 68 FC | 	wrlong	#31, fp
20f68     08 4E 85 F1 | 	sub	fp, #8
20f6c     10 00 90 FD | 	jmp	#LR__2595
20f70                 | LR__2594
20f70     A7 08 68 FC | 	wrlong	#4, fp
20f74     08 4E 05 F1 | 	add	fp, #8
20f78     A7 FE 69 FC | 	wrlong	#255, fp
20f7c     08 4E 85 F1 | 	sub	fp, #8
20f80                 | LR__2595
20f80     A7 12 02 F6 | 	mov	arg01, fp
20f84     D4 C7 BE FD | 	call	#_push
20f88     A7 F0 03 F6 | 	mov	ptra, fp
20f8c     B2 00 A0 FD | 	call	#popregs_
20f90                 | _do_plus_ret
20f90     2D 00 64 FD | 	ret
20f94                 | 
20f94                 | ' 
20f94                 | ' '--------------------------------- power (^)
20f94                 | ' 
20f94                 | ' sub do_power 
20f94                 | _do_power
20f94     02 4A 05 F6 | 	mov	COUNT_, #2
20f98     A8 00 A0 FD | 	call	#pushregs_
20f9c     18 F0 07 F1 | 	add	ptra, #24
20fa0     20 C7 BE FD | 	call	#_pop
20fa4     FD 14 02 F6 | 	mov	arg02, result1
20fa8     FE 12 02 F6 | 	mov	arg01, result2
20fac     FF 26 02 F6 | 	mov	local01, result3
20fb0     0C 4E 05 F1 | 	add	fp, #12
20fb4     A7 14 62 FC | 	wrlong	arg02, fp
20fb8     04 4E 05 F1 | 	add	fp, #4
20fbc     A7 12 62 FC | 	wrlong	arg01, fp
20fc0     04 4E 05 F1 | 	add	fp, #4
20fc4     A7 26 62 FC | 	wrlong	local01, fp
20fc8     14 4E 85 F1 | 	sub	fp, #20
20fcc     F4 C6 BE FD | 	call	#_pop
20fd0     A7 FA 61 FC | 	wrlong	result1, fp
20fd4     04 4E 05 F1 | 	add	fp, #4
20fd8     A7 FC 61 FC | 	wrlong	result2, fp
20fdc     04 4E 05 F1 | 	add	fp, #4
20fe0     A7 FE 61 FC | 	wrlong	result3, fp
20fe4                 | ' 
20fe4                 | ' t2=pop()
20fe4                 | ' t1=pop()
20fe4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
20fe4     08 4E 85 F1 | 	sub	fp, #8
20fe8     1F FE 0D F2 | 	cmp	result3, #31 wz
20fec     14 4E 05 51 |  if_ne	add	fp, #20
20ff0     A7 26 02 5B |  if_ne	rdlong	local01, fp
20ff4     14 4E 85 51 |  if_ne	sub	fp, #20
20ff8     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
20ffc     A7 18 68 AC |  if_e	wrlong	#12, fp
21000     08 4E 05 A1 |  if_e	add	fp, #8
21004     A7 FE 69 AC |  if_e	wrlong	#255, fp
21008     08 4E 85 A1 |  if_e	sub	fp, #8
2100c     38 01 90 AD |  if_e	jmp	#LR__2605
21010                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
21010     08 4E 05 F1 | 	add	fp, #8
21014     A7 14 02 FB | 	rdlong	arg02, fp
21018     08 4E 85 F1 | 	sub	fp, #8
2101c     1C 14 0E F2 | 	cmp	arg02, #28 wz
21020     28 00 90 5D |  if_ne	jmp	#LR__2600
21024     08 4E 05 F1 | 	add	fp, #8
21028     A7 3C 68 FC | 	wrlong	#30, fp
2102c     08 4E 85 F1 | 	sub	fp, #8
21030     A7 12 02 FB | 	rdlong	arg01, fp
21034     09 13 52 F6 | 	abs	arg01, arg01 wc
21038     1F 28 C6 C9 |  if_b	decod	local02, #31
2103c     00 28 06 36 |  if_ae	mov	local02, #0
21040     A0 89 B0 FD | 	call	#__system___float_fromuns
21044     14 FB 61 F5 | 	xor	result1, local02
21048     A7 FA 61 FC | 	wrlong	result1, fp
2104c                 | LR__2600
2104c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
2104c     08 4E 05 F1 | 	add	fp, #8
21050     A7 14 02 FB | 	rdlong	arg02, fp
21054     08 4E 85 F1 | 	sub	fp, #8
21058     1D 14 0E F2 | 	cmp	arg02, #29 wz
2105c     18 00 90 5D |  if_ne	jmp	#LR__2601
21060     08 4E 05 F1 | 	add	fp, #8
21064     A7 3C 68 FC | 	wrlong	#30, fp
21068     08 4E 85 F1 | 	sub	fp, #8
2106c     A7 12 02 FB | 	rdlong	arg01, fp
21070     70 89 B0 FD | 	call	#__system___float_fromuns
21074     A7 FA 61 FC | 	wrlong	result1, fp
21078                 | LR__2601
21078                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
21078     14 4E 05 F1 | 	add	fp, #20
2107c     A7 14 02 FB | 	rdlong	arg02, fp
21080     14 4E 85 F1 | 	sub	fp, #20
21084     1C 14 0E F2 | 	cmp	arg02, #28 wz
21088     34 00 90 5D |  if_ne	jmp	#LR__2602
2108c     14 4E 05 F1 | 	add	fp, #20
21090     A7 3C 68 FC | 	wrlong	#30, fp
21094     08 4E 85 F1 | 	sub	fp, #8
21098     A7 12 02 FB | 	rdlong	arg01, fp
2109c     0C 4E 85 F1 | 	sub	fp, #12
210a0     09 13 52 F6 | 	abs	arg01, arg01 wc
210a4     1F 28 C6 C9 |  if_b	decod	local02, #31
210a8     00 28 06 36 |  if_ae	mov	local02, #0
210ac     34 89 B0 FD | 	call	#__system___float_fromuns
210b0     14 FB 61 F5 | 	xor	result1, local02
210b4     0C 4E 05 F1 | 	add	fp, #12
210b8     A7 FA 61 FC | 	wrlong	result1, fp
210bc     0C 4E 85 F1 | 	sub	fp, #12
210c0                 | LR__2602
210c0                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
210c0     14 4E 05 F1 | 	add	fp, #20
210c4     A7 14 02 FB | 	rdlong	arg02, fp
210c8     14 4E 85 F1 | 	sub	fp, #20
210cc     1D 14 0E F2 | 	cmp	arg02, #29 wz
210d0     24 00 90 5D |  if_ne	jmp	#LR__2603
210d4     14 4E 05 F1 | 	add	fp, #20
210d8     A7 3C 68 FC | 	wrlong	#30, fp
210dc     08 4E 85 F1 | 	sub	fp, #8
210e0     A7 12 02 FB | 	rdlong	arg01, fp
210e4     0C 4E 85 F1 | 	sub	fp, #12
210e8     F8 88 B0 FD | 	call	#__system___float_fromuns
210ec     0C 4E 05 F1 | 	add	fp, #12
210f0     A7 FA 61 FC | 	wrlong	result1, fp
210f4     0C 4E 85 F1 | 	sub	fp, #12
210f8                 | LR__2603
210f8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
210f8     08 4E 05 F1 | 	add	fp, #8
210fc     A7 14 02 FB | 	rdlong	arg02, fp
21100     08 4E 85 F1 | 	sub	fp, #8
21104     1E 14 0E F2 | 	cmp	arg02, #30 wz
21108     14 4E 05 A1 |  if_e	add	fp, #20
2110c     A7 26 02 AB |  if_e	rdlong	local01, fp
21110     14 4E 85 A1 |  if_e	sub	fp, #20
21114     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
21118     1C 00 90 5D |  if_ne	jmp	#LR__2604
2111c     A7 12 02 FB | 	rdlong	arg01, fp
21120     0C 4E 05 F1 | 	add	fp, #12
21124     A7 14 02 FB | 	rdlong	arg02, fp
21128     0C 4E 85 F1 | 	sub	fp, #12
2112c     C0 9B B0 FD | 	call	#__system____builtin_powf
21130     A7 FA 61 FC | 	wrlong	result1, fp
21134     10 00 90 FD | 	jmp	#LR__2605
21138                 | LR__2604
21138     A7 1A 68 FC | 	wrlong	#13, fp
2113c     08 4E 05 F1 | 	add	fp, #8
21140     A7 FE 69 FC | 	wrlong	#255, fp
21144     08 4E 85 F1 | 	sub	fp, #8
21148                 | LR__2605
21148     A7 12 02 F6 | 	mov	arg01, fp
2114c     0C C6 BE FD | 	call	#_push
21150     A7 F0 03 F6 | 	mov	ptra, fp
21154     B2 00 A0 FD | 	call	#popregs_
21158                 | _do_power_ret
21158     2D 00 64 FD | 	ret
2115c                 | 
2115c                 | ' 
2115c                 | ' '--------------------------------- SHL
2115c                 | ' 
2115c                 | ' sub do_shl 
2115c                 | _do_shl
2115c     03 4A 05 F6 | 	mov	COUNT_, #3
21160     A8 00 A0 FD | 	call	#pushregs_
21164     18 F0 07 F1 | 	add	ptra, #24
21168     58 C5 BE FD | 	call	#_pop
2116c     FD 12 02 F6 | 	mov	arg01, result1
21170     FE 26 02 F6 | 	mov	local01, result2
21174     FF 28 02 F6 | 	mov	local02, result3
21178     0C 4E 05 F1 | 	add	fp, #12
2117c     A7 12 62 FC | 	wrlong	arg01, fp
21180     04 4E 05 F1 | 	add	fp, #4
21184     A7 26 62 FC | 	wrlong	local01, fp
21188     04 4E 05 F1 | 	add	fp, #4
2118c     A7 28 62 FC | 	wrlong	local02, fp
21190     14 4E 85 F1 | 	sub	fp, #20
21194     2C C5 BE FD | 	call	#_pop
21198     FF 2A 02 F6 | 	mov	local03, result3
2119c     A7 FA 61 FC | 	wrlong	result1, fp
211a0     04 4E 05 F1 | 	add	fp, #4
211a4     A7 FC 61 FC | 	wrlong	result2, fp
211a8     04 4E 05 F1 | 	add	fp, #4
211ac     A7 2A 62 FC | 	wrlong	local03, fp
211b0                 | ' 
211b0                 | ' t2=pop()
211b0                 | ' t1=pop()
211b0                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
211b0     08 4E 85 F1 | 	sub	fp, #8
211b4     1C 2A 0E F2 | 	cmp	local03, #28 wz
211b8     A7 2A 02 AB |  if_e	rdlong	local03, fp
211bc     A7 2A 62 AC |  if_e	wrlong	local03, fp
211c0     08 4E 05 A1 |  if_e	add	fp, #8
211c4     A7 3A 68 AC |  if_e	wrlong	#29, fp
211c8     08 4E 85 A1 |  if_e	sub	fp, #8
211cc                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
211cc     14 4E 05 F1 | 	add	fp, #20
211d0     A7 2A 02 FB | 	rdlong	local03, fp
211d4     14 4E 85 F1 | 	sub	fp, #20
211d8     1C 2A 0E F2 | 	cmp	local03, #28 wz
211dc     18 00 90 5D |  if_ne	jmp	#LR__2610
211e0     0C 4E 05 F1 | 	add	fp, #12
211e4     A7 2A 02 FB | 	rdlong	local03, fp
211e8     A7 2A 62 FC | 	wrlong	local03, fp
211ec     08 4E 05 F1 | 	add	fp, #8
211f0     A7 3A 68 FC | 	wrlong	#29, fp
211f4     14 4E 85 F1 | 	sub	fp, #20
211f8                 | LR__2610
211f8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
211f8     08 4E 05 F1 | 	add	fp, #8
211fc     A7 2A 02 FB | 	rdlong	local03, fp
21200     08 4E 85 F1 | 	sub	fp, #8
21204     1F 2A 0E F2 | 	cmp	local03, #31 wz
21208     14 4E 05 51 |  if_ne	add	fp, #20
2120c     A7 28 02 5B |  if_ne	rdlong	local02, fp
21210     14 4E 85 51 |  if_ne	sub	fp, #20
21214     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
21218     08 4E 05 51 |  if_ne	add	fp, #8
2121c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
21220     08 4E 85 51 |  if_ne	sub	fp, #8
21224     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
21228     14 4E 05 51 |  if_ne	add	fp, #20
2122c     14 4E 85 51 |  if_ne	sub	fp, #20
21230     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
21234     A7 0C 68 AC |  if_e	wrlong	#6, fp
21238     08 4E 05 A1 |  if_e	add	fp, #8
2123c     A7 FE 69 AC |  if_e	wrlong	#255, fp
21240     08 4E 85 A1 |  if_e	sub	fp, #8
21244     18 00 90 AD |  if_e	jmp	#LR__2611
21248     A7 2A 02 FB | 	rdlong	local03, fp
2124c     0C 4E 05 F1 | 	add	fp, #12
21250     A7 26 02 FB | 	rdlong	local01, fp
21254     0C 4E 85 F1 | 	sub	fp, #12
21258     13 2B 62 F0 | 	shl	local03, local01
2125c     A7 2A 62 FC | 	wrlong	local03, fp
21260                 | LR__2611
21260     A7 12 02 F6 | 	mov	arg01, fp
21264     F4 C4 BE FD | 	call	#_push
21268     A7 F0 03 F6 | 	mov	ptra, fp
2126c     B2 00 A0 FD | 	call	#popregs_
21270                 | _do_shl_ret
21270     2D 00 64 FD | 	ret
21274                 | 
21274                 | ' 
21274                 | ' '--------------------------------- SHR
21274                 | ' 
21274                 | ' sub do_shr 
21274                 | _do_shr
21274     03 4A 05 F6 | 	mov	COUNT_, #3
21278     A8 00 A0 FD | 	call	#pushregs_
2127c     18 F0 07 F1 | 	add	ptra, #24
21280     40 C4 BE FD | 	call	#_pop
21284     FD 12 02 F6 | 	mov	arg01, result1
21288     FE 26 02 F6 | 	mov	local01, result2
2128c     FF 28 02 F6 | 	mov	local02, result3
21290     0C 4E 05 F1 | 	add	fp, #12
21294     A7 12 62 FC | 	wrlong	arg01, fp
21298     04 4E 05 F1 | 	add	fp, #4
2129c     A7 26 62 FC | 	wrlong	local01, fp
212a0     04 4E 05 F1 | 	add	fp, #4
212a4     A7 28 62 FC | 	wrlong	local02, fp
212a8     14 4E 85 F1 | 	sub	fp, #20
212ac     14 C4 BE FD | 	call	#_pop
212b0     FF 2A 02 F6 | 	mov	local03, result3
212b4     A7 FA 61 FC | 	wrlong	result1, fp
212b8     04 4E 05 F1 | 	add	fp, #4
212bc     A7 FC 61 FC | 	wrlong	result2, fp
212c0     04 4E 05 F1 | 	add	fp, #4
212c4     A7 2A 62 FC | 	wrlong	local03, fp
212c8                 | ' 
212c8                 | ' t2=pop()
212c8                 | ' t1=pop()
212c8                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
212c8     08 4E 85 F1 | 	sub	fp, #8
212cc     1C 2A 0E F2 | 	cmp	local03, #28 wz
212d0     A7 2A 02 AB |  if_e	rdlong	local03, fp
212d4     A7 2A 62 AC |  if_e	wrlong	local03, fp
212d8     08 4E 05 A1 |  if_e	add	fp, #8
212dc     A7 3A 68 AC |  if_e	wrlong	#29, fp
212e0     08 4E 85 A1 |  if_e	sub	fp, #8
212e4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
212e4     14 4E 05 F1 | 	add	fp, #20
212e8     A7 2A 02 FB | 	rdlong	local03, fp
212ec     14 4E 85 F1 | 	sub	fp, #20
212f0     1C 2A 0E F2 | 	cmp	local03, #28 wz
212f4     18 00 90 5D |  if_ne	jmp	#LR__2620
212f8     0C 4E 05 F1 | 	add	fp, #12
212fc     A7 2A 02 FB | 	rdlong	local03, fp
21300     A7 2A 62 FC | 	wrlong	local03, fp
21304     08 4E 05 F1 | 	add	fp, #8
21308     A7 3A 68 FC | 	wrlong	#29, fp
2130c     14 4E 85 F1 | 	sub	fp, #20
21310                 | LR__2620
21310                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
21310     08 4E 05 F1 | 	add	fp, #8
21314     A7 2A 02 FB | 	rdlong	local03, fp
21318     08 4E 85 F1 | 	sub	fp, #8
2131c     1F 2A 0E F2 | 	cmp	local03, #31 wz
21320     14 4E 05 51 |  if_ne	add	fp, #20
21324     A7 28 02 5B |  if_ne	rdlong	local02, fp
21328     14 4E 85 51 |  if_ne	sub	fp, #20
2132c     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
21330     08 4E 05 51 |  if_ne	add	fp, #8
21334     A7 2A 02 5B |  if_ne	rdlong	local03, fp
21338     08 4E 85 51 |  if_ne	sub	fp, #8
2133c     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
21340     14 4E 05 51 |  if_ne	add	fp, #20
21344     14 4E 85 51 |  if_ne	sub	fp, #20
21348     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
2134c     A7 0C 68 AC |  if_e	wrlong	#6, fp
21350     08 4E 05 A1 |  if_e	add	fp, #8
21354     A7 FE 69 AC |  if_e	wrlong	#255, fp
21358     08 4E 85 A1 |  if_e	sub	fp, #8
2135c     18 00 90 AD |  if_e	jmp	#LR__2621
21360     A7 2A 02 FB | 	rdlong	local03, fp
21364     0C 4E 05 F1 | 	add	fp, #12
21368     A7 26 02 FB | 	rdlong	local01, fp
2136c     0C 4E 85 F1 | 	sub	fp, #12
21370     13 2B 42 F0 | 	shr	local03, local01
21374     A7 2A 62 FC | 	wrlong	local03, fp
21378                 | LR__2621
21378     A7 12 02 F6 | 	mov	arg01, fp
2137c     DC C3 BE FD | 	call	#_push
21380     A7 F0 03 F6 | 	mov	ptra, fp
21384     B2 00 A0 FD | 	call	#popregs_
21388                 | _do_shr_ret
21388     2D 00 64 FD | 	ret
2138c                 | 
2138c                 | ' 
2138c                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
2138c                 | ' 
2138c                 | ' ''----------------------------------------------------------------------------------------------------
2138c                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
2138c                 | ' ''----------------------------------------------------------------------------------------------------
2138c                 | ' 
2138c                 | ' ''--------------------------- Command function pointers
2138c                 | ' 
2138c                 | ' sub init_commands
2138c                 | _init_commands
2138c                 | ' 
2138c                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
2138c     00 00 06 F6 | 	mov	_var01, #0
21390     97 16 48 FB | 	callpa	#(@LR__2631-@LR__2630)>>2,fcache_load_ptr_
21394                 | LR__2630
21394     00 FB 01 F6 | 	mov	result1, _var01
21398     02 FA 65 F0 | 	shl	result1, #2
2139c     43 00 00 FF 
213a0     60 E4 05 F1 | 	add	objptr, ##34400
213a4     F2 FA 01 F1 | 	add	result1, objptr
213a8     43 00 00 FF 
213ac     60 E4 85 F1 | 	sub	objptr, ##34400
213b0     FD E4 61 FC | 	wrlong	objptr, result1
213b4     01 00 06 F1 | 	add	_var01, #1
213b8     00 01 56 F2 | 	cmps	_var01, #256 wc
213bc     D4 FF 9F CD |  if_b	jmp	#LR__2630
213c0                 | LR__2631
213c0     F2 FA 01 F6 | 	mov	result1, objptr
213c4     14 FA 25 F4 | 	bith	result1, #20
213c8     43 00 00 FF 
213cc     64 E4 05 F1 | 	add	objptr, ##34404
213d0     F2 FA 61 FC | 	wrlong	result1, objptr
213d4     43 00 00 FF 
213d8     64 E4 85 F1 | 	sub	objptr, ##34404
213dc     F2 FA 01 F6 | 	mov	result1, objptr
213e0     15 FA 25 F4 | 	bith	result1, #21
213e4     43 00 00 FF 
213e8     68 E4 05 F1 | 	add	objptr, ##34408
213ec     F2 FA 61 FC | 	wrlong	result1, objptr
213f0     43 00 00 FF 
213f4     68 E4 85 F1 | 	sub	objptr, ##34408
213f8     F2 FA 01 F6 | 	mov	result1, objptr
213fc     34 FA 25 F4 | 	bith	result1, #52
21400     43 00 00 FF 
21404     6C E4 05 F1 | 	add	objptr, ##34412
21408     F2 FA 61 FC | 	wrlong	result1, objptr
2140c     43 00 00 FF 
21410     6C E4 85 F1 | 	sub	objptr, ##34412
21414     F2 FA 01 F6 | 	mov	result1, objptr
21418     16 FA 25 F4 | 	bith	result1, #22
2141c     43 00 00 FF 
21420     74 E4 05 F1 | 	add	objptr, ##34420
21424     F2 FA 61 FC | 	wrlong	result1, objptr
21428     43 00 00 FF 
2142c     74 E4 85 F1 | 	sub	objptr, ##34420
21430     F2 FA 01 F6 | 	mov	result1, objptr
21434     00 28 00 FF 
21438     00 FA 45 F5 | 	or	result1, ##5242880
2143c     43 00 00 FF 
21440     78 E4 05 F1 | 	add	objptr, ##34424
21444     F2 FA 61 FC | 	wrlong	result1, objptr
21448     43 00 00 FF 
2144c     78 E4 85 F1 | 	sub	objptr, ##34424
21450     F2 FA 01 F6 | 	mov	result1, objptr
21454     35 FA 25 F4 | 	bith	result1, #53
21458     43 00 00 FF 
2145c     7C E4 05 F1 | 	add	objptr, ##34428
21460     F2 FA 61 FC | 	wrlong	result1, objptr
21464     43 00 00 FF 
21468     7C E4 85 F1 | 	sub	objptr, ##34428
2146c     F2 FA 01 F6 | 	mov	result1, objptr
21470     54 FA 25 F4 | 	bith	result1, #84
21474     43 00 00 FF 
21478     80 E4 05 F1 | 	add	objptr, ##34432
2147c     F2 FA 61 FC | 	wrlong	result1, objptr
21480     43 00 00 FF 
21484     80 E4 85 F1 | 	sub	objptr, ##34432
21488     F2 FA 01 F6 | 	mov	result1, objptr
2148c     17 FA 25 F4 | 	bith	result1, #23
21490     43 00 00 FF 
21494     84 E4 05 F1 | 	add	objptr, ##34436
21498     F2 FA 61 FC | 	wrlong	result1, objptr
2149c     43 00 00 FF 
214a0     84 E4 85 F1 | 	sub	objptr, ##34436
214a4     F2 FA 01 F6 | 	mov	result1, objptr
214a8     00 48 00 FF 
214ac     00 FA 45 F5 | 	or	result1, ##9437184
214b0     43 00 00 FF 
214b4     88 E4 05 F1 | 	add	objptr, ##34440
214b8     F2 FA 61 FC | 	wrlong	result1, objptr
214bc     43 00 00 FF 
214c0     88 E4 85 F1 | 	sub	objptr, ##34440
214c4     F2 FA 01 F6 | 	mov	result1, objptr
214c8     00 50 00 FF 
214cc     00 FA 45 F5 | 	or	result1, ##10485760
214d0     43 00 00 FF 
214d4     8C E4 05 F1 | 	add	objptr, ##34444
214d8     F2 FA 61 FC | 	wrlong	result1, objptr
214dc     43 00 00 FF 
214e0     8C E4 85 F1 | 	sub	objptr, ##34444
214e4     F2 FA 01 F6 | 	mov	result1, objptr
214e8     00 58 00 FF 
214ec     00 FA 45 F5 | 	or	result1, ##11534336
214f0     43 00 00 FF 
214f4     90 E4 05 F1 | 	add	objptr, ##34448
214f8     F2 FA 61 FC | 	wrlong	result1, objptr
214fc     43 00 00 FF 
21500     90 E4 85 F1 | 	sub	objptr, ##34448
21504     F2 FA 01 F6 | 	mov	result1, objptr
21508     36 FA 25 F4 | 	bith	result1, #54
2150c     43 00 00 FF 
21510     A4 E4 05 F1 | 	add	objptr, ##34468
21514     F2 FA 61 FC | 	wrlong	result1, objptr
21518     43 00 00 FF 
2151c     A4 E4 85 F1 | 	sub	objptr, ##34468
21520     F2 FA 01 F6 | 	mov	result1, objptr
21524     00 68 00 FF 
21528     00 FA 45 F5 | 	or	result1, ##13631488
2152c     43 00 00 FF 
21530     D4 E4 05 F1 | 	add	objptr, ##34516
21534     F2 FA 61 FC | 	wrlong	result1, objptr
21538     43 00 00 FF 
2153c     D4 E4 85 F1 | 	sub	objptr, ##34516
21540     F2 FA 01 F6 | 	mov	result1, objptr
21544     00 68 00 FF 
21548     00 FA 45 F5 | 	or	result1, ##13631488
2154c     43 00 00 FF 
21550     D0 E4 05 F1 | 	add	objptr, ##34512
21554     F2 FA 61 FC | 	wrlong	result1, objptr
21558     43 00 00 FF 
2155c     D0 E4 85 F1 | 	sub	objptr, ##34512
21560     F2 FA 01 F6 | 	mov	result1, objptr
21564     00 68 00 FF 
21568     00 FA 45 F5 | 	or	result1, ##13631488
2156c     43 00 00 FF 
21570     D8 E4 05 F1 | 	add	objptr, ##34520
21574     F2 FA 61 FC | 	wrlong	result1, objptr
21578     43 00 00 FF 
2157c     D8 E4 85 F1 | 	sub	objptr, ##34520
21580     F2 FA 01 F6 | 	mov	result1, objptr
21584     00 68 00 FF 
21588     00 FA 45 F5 | 	or	result1, ##13631488
2158c     43 00 00 FF 
21590     DC E4 05 F1 | 	add	objptr, ##34524
21594     F2 FA 61 FC | 	wrlong	result1, objptr
21598     43 00 00 FF 
2159c     DC E4 85 F1 | 	sub	objptr, ##34524
215a0     F2 FA 01 F6 | 	mov	result1, objptr
215a4     00 68 00 FF 
215a8     00 FA 45 F5 | 	or	result1, ##13631488
215ac     43 00 00 FF 
215b0     0C E5 05 F1 | 	add	objptr, ##34572
215b4     F2 FA 61 FC | 	wrlong	result1, objptr
215b8     43 00 00 FF 
215bc     0C E5 85 F1 | 	sub	objptr, ##34572
215c0     F2 FA 01 F6 | 	mov	result1, objptr
215c4     55 FA 25 F4 | 	bith	result1, #85
215c8     43 00 00 FF 
215cc     BC E4 05 F1 | 	add	objptr, ##34492
215d0     F2 FA 61 FC | 	wrlong	result1, objptr
215d4     43 00 00 FF 
215d8     BC E4 85 F1 | 	sub	objptr, ##34492
215dc     F2 FA 01 F6 | 	mov	result1, objptr
215e0     00 68 00 FF 
215e4     00 FA 45 F5 | 	or	result1, ##13631488
215e8     43 00 00 FF 
215ec     10 E5 05 F1 | 	add	objptr, ##34576
215f0     F2 FA 61 FC | 	wrlong	result1, objptr
215f4     43 00 00 FF 
215f8     10 E5 85 F1 | 	sub	objptr, ##34576
215fc     F2 FA 01 F6 | 	mov	result1, objptr
21600     00 68 00 FF 
21604     00 FA 45 F5 | 	or	result1, ##13631488
21608     43 00 00 FF 
2160c     E0 E4 05 F1 | 	add	objptr, ##34528
21610     F2 FA 61 FC | 	wrlong	result1, objptr
21614     43 00 00 FF 
21618     E0 E4 85 F1 | 	sub	objptr, ##34528
2161c     F2 FA 01 F6 | 	mov	result1, objptr
21620     00 68 00 FF 
21624     00 FA 45 F5 | 	or	result1, ##13631488
21628     43 00 00 FF 
2162c     E4 E4 05 F1 | 	add	objptr, ##34532
21630     F2 FA 61 FC | 	wrlong	result1, objptr
21634     43 00 00 FF 
21638     E4 E4 85 F1 | 	sub	objptr, ##34532
2163c     F2 FA 01 F6 | 	mov	result1, objptr
21640     00 68 00 FF 
21644     00 FA 45 F5 | 	or	result1, ##13631488
21648     43 00 00 FF 
2164c     E8 E4 05 F1 | 	add	objptr, ##34536
21650     F2 FA 61 FC | 	wrlong	result1, objptr
21654     43 00 00 FF 
21658     E8 E4 85 F1 | 	sub	objptr, ##34536
2165c     F2 FA 01 F6 | 	mov	result1, objptr
21660     74 FA 25 F4 | 	bith	result1, #116
21664     43 00 00 FF 
21668     60 E5 05 F1 | 	add	objptr, ##34656
2166c     F2 FA 61 FC | 	wrlong	result1, objptr
21670     43 00 00 FF 
21674     60 E5 85 F1 | 	sub	objptr, ##34656
21678     F2 FA 01 F6 | 	mov	result1, objptr
2167c     18 FA 25 F4 | 	bith	result1, #24
21680     43 00 00 FF 
21684     64 E5 05 F1 | 	add	objptr, ##34660
21688     F2 FA 61 FC | 	wrlong	result1, objptr
2168c     43 00 00 FF 
21690     64 E5 85 F1 | 	sub	objptr, ##34660
21694     F2 FA 01 F6 | 	mov	result1, objptr
21698     00 88 00 FF 
2169c     00 FA 45 F5 | 	or	result1, ##17825792
216a0     43 00 00 FF 
216a4     68 E5 05 F1 | 	add	objptr, ##34664
216a8     F2 FA 61 FC | 	wrlong	result1, objptr
216ac     43 00 00 FF 
216b0     68 E5 85 F1 | 	sub	objptr, ##34664
216b4     F2 FA 01 F6 | 	mov	result1, objptr
216b8     00 90 00 FF 
216bc     00 FA 45 F5 | 	or	result1, ##18874368
216c0     43 00 00 FF 
216c4     6C E5 05 F1 | 	add	objptr, ##34668
216c8     F2 FA 61 FC | 	wrlong	result1, objptr
216cc     43 00 00 FF 
216d0     6C E5 85 F1 | 	sub	objptr, ##34668
216d4     F2 FA 01 F6 | 	mov	result1, objptr
216d8     00 98 00 FF 
216dc     00 FA 45 F5 | 	or	result1, ##19922944
216e0     43 00 00 FF 
216e4     70 E5 05 F1 | 	add	objptr, ##34672
216e8     F2 FA 61 FC | 	wrlong	result1, objptr
216ec     43 00 00 FF 
216f0     70 E5 85 F1 | 	sub	objptr, ##34672
216f4     F2 FA 01 F6 | 	mov	result1, objptr
216f8     00 A0 00 FF 
216fc     00 FA 45 F5 | 	or	result1, ##20971520
21700     43 00 00 FF 
21704     74 E5 05 F1 | 	add	objptr, ##34676
21708     F2 FA 61 FC | 	wrlong	result1, objptr
2170c     43 00 00 FF 
21710     74 E5 85 F1 | 	sub	objptr, ##34676
21714     F2 FA 01 F6 | 	mov	result1, objptr
21718     00 A8 00 FF 
2171c     00 FA 45 F5 | 	or	result1, ##22020096
21720     43 00 00 FF 
21724     78 E5 05 F1 | 	add	objptr, ##34680
21728     F2 FA 61 FC | 	wrlong	result1, objptr
2172c     43 00 00 FF 
21730     78 E5 85 F1 | 	sub	objptr, ##34680
21734     F2 FA 01 F6 | 	mov	result1, objptr
21738     00 B0 00 FF 
2173c     00 FA 45 F5 | 	or	result1, ##23068672
21740     43 00 00 FF 
21744     7C E5 05 F1 | 	add	objptr, ##34684
21748     F2 FA 61 FC | 	wrlong	result1, objptr
2174c     43 00 00 FF 
21750     7C E5 85 F1 | 	sub	objptr, ##34684
21754     F2 FA 01 F6 | 	mov	result1, objptr
21758     00 B8 00 FF 
2175c     00 FA 45 F5 | 	or	result1, ##24117248
21760     43 00 00 FF 
21764     80 E5 05 F1 | 	add	objptr, ##34688
21768     F2 FA 61 FC | 	wrlong	result1, objptr
2176c     43 00 00 FF 
21770     80 E5 85 F1 | 	sub	objptr, ##34688
21774     F2 FA 01 F6 | 	mov	result1, objptr
21778     37 FA 25 F4 | 	bith	result1, #55
2177c     43 00 00 FF 
21780     84 E5 05 F1 | 	add	objptr, ##34692
21784     F2 FA 61 FC | 	wrlong	result1, objptr
21788     43 00 00 FF 
2178c     84 E5 85 F1 | 	sub	objptr, ##34692
21790     F2 FA 01 F6 | 	mov	result1, objptr
21794     00 C8 00 FF 
21798     00 FA 45 F5 | 	or	result1, ##26214400
2179c     43 00 00 FF 
217a0     88 E5 05 F1 | 	add	objptr, ##34696
217a4     F2 FA 61 FC | 	wrlong	result1, objptr
217a8     43 00 00 FF 
217ac     88 E5 85 F1 | 	sub	objptr, ##34696
217b0     F2 FA 01 F6 | 	mov	result1, objptr
217b4     00 D0 00 FF 
217b8     00 FA 45 F5 | 	or	result1, ##27262976
217bc     43 00 00 FF 
217c0     8C E5 05 F1 | 	add	objptr, ##34700
217c4     F2 FA 61 FC | 	wrlong	result1, objptr
217c8     43 00 00 FF 
217cc     8C E5 85 F1 | 	sub	objptr, ##34700
217d0     F2 FA 01 F6 | 	mov	result1, objptr
217d4     00 D8 00 FF 
217d8     00 FA 45 F5 | 	or	result1, ##28311552
217dc     43 00 00 FF 
217e0     90 E5 05 F1 | 	add	objptr, ##34704
217e4     F2 FA 61 FC | 	wrlong	result1, objptr
217e8     43 00 00 FF 
217ec     90 E5 85 F1 | 	sub	objptr, ##34704
217f0     F2 FA 01 F6 | 	mov	result1, objptr
217f4     56 FA 25 F4 | 	bith	result1, #86
217f8     43 00 00 FF 
217fc     94 E5 05 F1 | 	add	objptr, ##34708
21800     F2 FA 61 FC | 	wrlong	result1, objptr
21804     43 00 00 FF 
21808     94 E5 85 F1 | 	sub	objptr, ##34708
2180c     F2 FA 01 F6 | 	mov	result1, objptr
21810     00 E8 00 FF 
21814     00 FA 45 F5 | 	or	result1, ##30408704
21818     45 00 00 FF 
2181c     5C E4 05 F1 | 	add	objptr, ##35420
21820     F2 FA 61 FC | 	wrlong	result1, objptr
21824     45 00 00 FF 
21828     5C E4 85 F1 | 	sub	objptr, ##35420
2182c     F2 FA 01 F6 | 	mov	result1, objptr
21830     75 FA 25 F4 | 	bith	result1, #117
21834     43 00 00 FF 
21838     98 E5 05 F1 | 	add	objptr, ##34712
2183c     F2 FA 61 FC | 	wrlong	result1, objptr
21840     43 00 00 FF 
21844     98 E5 85 F1 | 	sub	objptr, ##34712
21848     F2 FA 01 F6 | 	mov	result1, objptr
2184c     94 FA 25 F4 | 	bith	result1, #148
21850     43 00 00 FF 
21854     AC E5 05 F1 | 	add	objptr, ##34732
21858     F2 FA 61 FC | 	wrlong	result1, objptr
2185c     43 00 00 FF 
21860     AC E5 85 F1 | 	sub	objptr, ##34732
21864     F2 FA 01 F6 | 	mov	result1, objptr
21868     19 FA 25 F4 | 	bith	result1, #25
2186c     43 00 00 FF 
21870     9C E5 05 F1 | 	add	objptr, ##34716
21874     F2 FA 61 FC | 	wrlong	result1, objptr
21878     43 00 00 FF 
2187c     9C E5 85 F1 | 	sub	objptr, ##34716
21880     F2 FA 01 F6 | 	mov	result1, objptr
21884     00 08 01 FF 
21888     00 FA 45 F5 | 	or	result1, ##34603008
2188c     43 00 00 FF 
21890     B8 E4 05 F1 | 	add	objptr, ##34488
21894     F2 FA 61 FC | 	wrlong	result1, objptr
21898     43 00 00 FF 
2189c     B8 E4 85 F1 | 	sub	objptr, ##34488
218a0     F2 FA 01 F6 | 	mov	result1, objptr
218a4     00 10 01 FF 
218a8     00 FA 45 F5 | 	or	result1, ##35651584
218ac     43 00 00 FF 
218b0     A4 E5 05 F1 | 	add	objptr, ##34724
218b4     F2 FA 61 FC | 	wrlong	result1, objptr
218b8     43 00 00 FF 
218bc     A4 E5 85 F1 | 	sub	objptr, ##34724
218c0     F2 FA 01 F6 | 	mov	result1, objptr
218c4     00 18 01 FF 
218c8     00 FA 45 F5 | 	or	result1, ##36700160
218cc     43 00 00 FF 
218d0     A8 E5 05 F1 | 	add	objptr, ##34728
218d4     F2 FA 61 FC | 	wrlong	result1, objptr
218d8     43 00 00 FF 
218dc     A8 E5 85 F1 | 	sub	objptr, ##34728
218e0     F2 FA 01 F6 | 	mov	result1, objptr
218e4     00 20 01 FF 
218e8     00 FA 45 F5 | 	or	result1, ##37748736
218ec     43 00 00 FF 
218f0     B4 E5 05 F1 | 	add	objptr, ##34740
218f4     F2 FA 61 FC | 	wrlong	result1, objptr
218f8     43 00 00 FF 
218fc     B4 E5 85 F1 | 	sub	objptr, ##34740
21900     F2 FA 01 F6 | 	mov	result1, objptr
21904     00 28 01 FF 
21908     00 FA 45 F5 | 	or	result1, ##38797312
2190c     43 00 00 FF 
21910     B8 E5 05 F1 | 	add	objptr, ##34744
21914     F2 FA 61 FC | 	wrlong	result1, objptr
21918     43 00 00 FF 
2191c     B8 E5 85 F1 | 	sub	objptr, ##34744
21920     F2 FA 01 F6 | 	mov	result1, objptr
21924     00 30 01 FF 
21928     00 FA 45 F5 | 	or	result1, ##39845888
2192c     43 00 00 FF 
21930     BC E5 05 F1 | 	add	objptr, ##34748
21934     F2 FA 61 FC | 	wrlong	result1, objptr
21938     43 00 00 FF 
2193c     BC E5 85 F1 | 	sub	objptr, ##34748
21940     F2 FA 01 F6 | 	mov	result1, objptr
21944     00 38 01 FF 
21948     00 FA 45 F5 | 	or	result1, ##40894464
2194c     43 00 00 FF 
21950     C0 E5 05 F1 | 	add	objptr, ##34752
21954     F2 FA 61 FC | 	wrlong	result1, objptr
21958     43 00 00 FF 
2195c     C0 E5 85 F1 | 	sub	objptr, ##34752
21960     F2 FA 01 F6 | 	mov	result1, objptr
21964     00 40 01 FF 
21968     00 FA 45 F5 | 	or	result1, ##41943040
2196c     43 00 00 FF 
21970     C8 E5 05 F1 | 	add	objptr, ##34760
21974     F2 FA 61 FC | 	wrlong	result1, objptr
21978     43 00 00 FF 
2197c     C8 E5 85 F1 | 	sub	objptr, ##34760
21980     F2 FA 01 F6 | 	mov	result1, objptr
21984     00 08 01 FF 
21988     00 FA 45 F5 | 	or	result1, ##34603008
2198c     43 00 00 FF 
21990     CC E5 05 F1 | 	add	objptr, ##34764
21994     F2 FA 61 FC | 	wrlong	result1, objptr
21998     43 00 00 FF 
2199c     CC E5 85 F1 | 	sub	objptr, ##34764
219a0     F2 FA 01 F6 | 	mov	result1, objptr
219a4     00 48 01 FF 
219a8     00 FA 45 F5 | 	or	result1, ##42991616
219ac     43 00 00 FF 
219b0     CC E4 05 F1 | 	add	objptr, ##34508
219b4     F2 FA 61 FC | 	wrlong	result1, objptr
219b8     43 00 00 FF 
219bc     CC E4 85 F1 | 	sub	objptr, ##34508
219c0     F2 FA 01 F6 | 	mov	result1, objptr
219c4     00 50 01 FF 
219c8     00 FA 45 F5 | 	or	result1, ##44040192
219cc     43 00 00 FF 
219d0     FC E4 05 F1 | 	add	objptr, ##34556
219d4     F2 FA 61 FC | 	wrlong	result1, objptr
219d8     43 00 00 FF 
219dc     FC E4 85 F1 | 	sub	objptr, ##34556
219e0     F2 FA 01 F6 | 	mov	result1, objptr
219e4     00 58 01 FF 
219e8     00 FA 45 F5 | 	or	result1, ##45088768
219ec     43 00 00 FF 
219f0     F8 E4 05 F1 | 	add	objptr, ##34552
219f4     F2 FA 61 FC | 	wrlong	result1, objptr
219f8     43 00 00 FF 
219fc     F8 E4 85 F1 | 	sub	objptr, ##34552
21a00     F2 FA 01 F6 | 	mov	result1, objptr
21a04     00 60 01 FF 
21a08     00 FA 45 F5 | 	or	result1, ##46137344
21a0c     43 00 00 FF 
21a10     9C E4 05 F1 | 	add	objptr, ##34460
21a14     F2 FA 61 FC | 	wrlong	result1, objptr
21a18     43 00 00 FF 
21a1c     9C E4 85 F1 | 	sub	objptr, ##34460
21a20     F2 FA 01 F6 | 	mov	result1, objptr
21a24     00 68 01 FF 
21a28     00 FA 45 F5 | 	or	result1, ##47185920
21a2c     43 00 00 FF 
21a30     A0 E4 05 F1 | 	add	objptr, ##34464
21a34     F2 FA 61 FC | 	wrlong	result1, objptr
21a38     43 00 00 FF 
21a3c     A0 E4 85 F1 | 	sub	objptr, ##34464
21a40     F2 FA 01 F6 | 	mov	result1, objptr
21a44     00 70 01 FF 
21a48     00 FA 45 F5 | 	or	result1, ##48234496
21a4c     43 00 00 FF 
21a50     08 E5 05 F1 | 	add	objptr, ##34568
21a54     F2 FA 61 FC | 	wrlong	result1, objptr
21a58     43 00 00 FF 
21a5c     08 E5 85 F1 | 	sub	objptr, ##34568
21a60     F2 FA 01 F6 | 	mov	result1, objptr
21a64     00 78 01 FF 
21a68     00 FA 45 F5 | 	or	result1, ##49283072
21a6c     43 00 00 FF 
21a70     B0 E5 05 F1 | 	add	objptr, ##34736
21a74     F2 FA 61 FC | 	wrlong	result1, objptr
21a78     43 00 00 FF 
21a7c     B0 E5 85 F1 | 	sub	objptr, ##34736
21a80     F2 FA 01 F6 | 	mov	result1, objptr
21a84     38 FA 25 F4 | 	bith	result1, #56
21a88     43 00 00 FF 
21a8c     C4 E5 05 F1 | 	add	objptr, ##34756
21a90     F2 FA 61 FC | 	wrlong	result1, objptr
21a94     43 00 00 FF 
21a98     C4 E5 85 F1 | 	sub	objptr, ##34756
21a9c     F2 FA 01 F6 | 	mov	result1, objptr
21aa0     00 88 01 FF 
21aa4     00 FA 45 F5 | 	or	result1, ##51380224
21aa8     43 00 00 FF 
21aac     D0 E5 05 F1 | 	add	objptr, ##34768
21ab0     F2 FA 61 FC | 	wrlong	result1, objptr
21ab4     43 00 00 FF 
21ab8     D0 E5 85 F1 | 	sub	objptr, ##34768
21abc     F2 FA 01 F6 | 	mov	result1, objptr
21ac0     00 90 01 FF 
21ac4     00 FA 45 F5 | 	or	result1, ##52428800
21ac8     43 00 00 FF 
21acc     D4 E5 05 F1 | 	add	objptr, ##34772
21ad0     F2 FA 61 FC | 	wrlong	result1, objptr
21ad4     43 00 00 FF 
21ad8     D4 E5 85 F1 | 	sub	objptr, ##34772
21adc     F2 FA 01 F6 | 	mov	result1, objptr
21ae0     00 98 01 FF 
21ae4     00 FA 45 F5 | 	or	result1, ##53477376
21ae8     43 00 00 FF 
21aec     D8 E5 05 F1 | 	add	objptr, ##34776
21af0     F2 FA 61 FC | 	wrlong	result1, objptr
21af4     43 00 00 FF 
21af8     D8 E5 85 F1 | 	sub	objptr, ##34776
21afc     F2 FA 01 F6 | 	mov	result1, objptr
21b00     00 A0 01 FF 
21b04     00 FA 45 F5 | 	or	result1, ##54525952
21b08     43 00 00 FF 
21b0c     DC E5 05 F1 | 	add	objptr, ##34780
21b10     F2 FA 61 FC | 	wrlong	result1, objptr
21b14     43 00 00 FF 
21b18     DC E5 85 F1 | 	sub	objptr, ##34780
21b1c     F2 FA 01 F6 | 	mov	result1, objptr
21b20     00 A8 01 FF 
21b24     00 FA 45 F5 | 	or	result1, ##55574528
21b28     43 00 00 FF 
21b2c     E0 E5 05 F1 | 	add	objptr, ##34784
21b30     F2 FA 61 FC | 	wrlong	result1, objptr
21b34     43 00 00 FF 
21b38     E0 E5 85 F1 | 	sub	objptr, ##34784
21b3c     F2 FA 01 F6 | 	mov	result1, objptr
21b40     00 B0 01 FF 
21b44     00 FA 45 F5 | 	or	result1, ##56623104
21b48     43 00 00 FF 
21b4c     E4 E5 05 F1 | 	add	objptr, ##34788
21b50     F2 FA 61 FC | 	wrlong	result1, objptr
21b54     43 00 00 FF 
21b58     E4 E5 85 F1 | 	sub	objptr, ##34788
21b5c     F2 FA 01 F6 | 	mov	result1, objptr
21b60     94 FA 25 F4 | 	bith	result1, #148
21b64     43 00 00 FF 
21b68     AC E5 05 F1 | 	add	objptr, ##34732
21b6c     F2 FA 61 FC | 	wrlong	result1, objptr
21b70     43 00 00 FF 
21b74     AC E5 85 F1 | 	sub	objptr, ##34732
21b78     F2 FA 01 F6 | 	mov	result1, objptr
21b7c     00 B8 01 FF 
21b80     00 FA 45 F5 | 	or	result1, ##57671680
21b84     43 00 00 FF 
21b88     EC E5 05 F1 | 	add	objptr, ##34796
21b8c     F2 FA 61 FC | 	wrlong	result1, objptr
21b90     43 00 00 FF 
21b94     EC E5 85 F1 | 	sub	objptr, ##34796
21b98     F2 FA 01 F6 | 	mov	result1, objptr
21b9c     57 FA 25 F4 | 	bith	result1, #87
21ba0     43 00 00 FF 
21ba4     E8 E5 05 F1 | 	add	objptr, ##34792
21ba8     F2 FA 61 FC | 	wrlong	result1, objptr
21bac     43 00 00 FF 
21bb0     E8 E5 85 F1 | 	sub	objptr, ##34792
21bb4     F2 FA 01 F6 | 	mov	result1, objptr
21bb8     00 C8 01 FF 
21bbc     00 FA 45 F5 | 	or	result1, ##59768832
21bc0     44 00 00 FF 
21bc4     00 E4 05 F1 | 	add	objptr, ##34816
21bc8     F2 FA 61 FC | 	wrlong	result1, objptr
21bcc     44 00 00 FF 
21bd0     00 E4 85 F1 | 	sub	objptr, ##34816
21bd4     F2 FA 01 F6 | 	mov	result1, objptr
21bd8     00 D0 01 FF 
21bdc     00 FA 45 F5 | 	or	result1, ##60817408
21be0     44 00 00 FF 
21be4     04 E4 05 F1 | 	add	objptr, ##34820
21be8     F2 FA 61 FC | 	wrlong	result1, objptr
21bec     44 00 00 FF 
21bf0     04 E4 85 F1 | 	sub	objptr, ##34820
21bf4     F2 FA 01 F6 | 	mov	result1, objptr
21bf8     00 D8 01 FF 
21bfc     00 FA 45 F5 | 	or	result1, ##61865984
21c00     43 00 00 FF 
21c04     F0 E5 05 F1 | 	add	objptr, ##34800
21c08     F2 FA 61 FC | 	wrlong	result1, objptr
21c0c     43 00 00 FF 
21c10     F0 E5 85 F1 | 	sub	objptr, ##34800
21c14     F2 FA 01 F6 | 	mov	result1, objptr
21c18     76 FA 25 F4 | 	bith	result1, #118
21c1c     43 00 00 FF 
21c20     F4 E5 05 F1 | 	add	objptr, ##34804
21c24     F2 FA 61 FC | 	wrlong	result1, objptr
21c28     43 00 00 FF 
21c2c     F4 E5 85 F1 | 	sub	objptr, ##34804
21c30     F2 FA 01 F6 | 	mov	result1, objptr
21c34     00 E8 01 FF 
21c38     00 FA 45 F5 | 	or	result1, ##63963136
21c3c     43 00 00 FF 
21c40     F8 E5 05 F1 | 	add	objptr, ##34808
21c44     F2 FA 61 FC | 	wrlong	result1, objptr
21c48     43 00 00 FF 
21c4c     F8 E5 85 F1 | 	sub	objptr, ##34808
21c50     F2 FA 01 F6 | 	mov	result1, objptr
21c54     95 FA 25 F4 | 	bith	result1, #149
21c58     43 00 00 FF 
21c5c     FC E5 05 F1 | 	add	objptr, ##34812
21c60     F2 FA 61 FC | 	wrlong	result1, objptr
21c64     43 00 00 FF 
21c68     FC E5 85 F1 | 	sub	objptr, ##34812
21c6c     F2 FA 01 F6 | 	mov	result1, objptr
21c70     B4 FA 25 F4 | 	bith	result1, #180
21c74     44 00 00 FF 
21c78     0C E4 05 F1 | 	add	objptr, ##34828
21c7c     F2 FA 61 FC | 	wrlong	result1, objptr
21c80     44 00 00 FF 
21c84     0C E4 85 F1 | 	sub	objptr, ##34828
21c88     F2 FA 01 F6 | 	mov	result1, objptr
21c8c     1A FA 25 F4 | 	bith	result1, #26
21c90     44 00 00 FF 
21c94     08 E4 05 F1 | 	add	objptr, ##34824
21c98     F2 FA 61 FC | 	wrlong	result1, objptr
21c9c     44 00 00 FF 
21ca0     08 E4 85 F1 | 	sub	objptr, ##34824
21ca4     F2 FA 01 F6 | 	mov	result1, objptr
21ca8     00 08 02 FF 
21cac     00 FA 45 F5 | 	or	result1, ##68157440
21cb0     44 00 00 FF 
21cb4     18 E4 05 F1 | 	add	objptr, ##34840
21cb8     F2 FA 61 FC | 	wrlong	result1, objptr
21cbc     44 00 00 FF 
21cc0     18 E4 85 F1 | 	sub	objptr, ##34840
21cc4     F2 FA 01 F6 | 	mov	result1, objptr
21cc8     00 10 02 FF 
21ccc     00 FA 45 F5 | 	or	result1, ##69206016
21cd0     44 00 00 FF 
21cd4     14 E4 05 F1 | 	add	objptr, ##34836
21cd8     F2 FA 61 FC | 	wrlong	result1, objptr
21cdc     44 00 00 FF 
21ce0     14 E4 85 F1 | 	sub	objptr, ##34836
21ce4     F2 FA 01 F6 | 	mov	result1, objptr
21ce8     00 18 02 FF 
21cec     00 FA 45 F5 | 	or	result1, ##70254592
21cf0     44 00 00 FF 
21cf4     10 E4 05 F1 | 	add	objptr, ##34832
21cf8     F2 FA 61 FC | 	wrlong	result1, objptr
21cfc     44 00 00 FF 
21d00     10 E4 85 F1 | 	sub	objptr, ##34832
21d04     F2 FA 01 F6 | 	mov	result1, objptr
21d08     00 20 02 FF 
21d0c     00 FA 45 F5 | 	or	result1, ##71303168
21d10     44 00 00 FF 
21d14     1C E4 05 F1 | 	add	objptr, ##34844
21d18     F2 FA 61 FC | 	wrlong	result1, objptr
21d1c     44 00 00 FF 
21d20     1C E4 85 F1 | 	sub	objptr, ##34844
21d24     F2 FA 01 F6 | 	mov	result1, objptr
21d28     00 28 02 FF 
21d2c     00 FA 45 F5 | 	or	result1, ##72351744
21d30     44 00 00 FF 
21d34     20 E4 05 F1 | 	add	objptr, ##34848
21d38     F2 FA 61 FC | 	wrlong	result1, objptr
21d3c     44 00 00 FF 
21d40     20 E4 85 F1 | 	sub	objptr, ##34848
21d44     F2 FA 01 F6 | 	mov	result1, objptr
21d48     00 30 02 FF 
21d4c     00 FA 45 F5 | 	or	result1, ##73400320
21d50     43 00 00 FF 
21d54     B4 E4 05 F1 | 	add	objptr, ##34484
21d58     F2 FA 61 FC | 	wrlong	result1, objptr
21d5c     43 00 00 FF 
21d60     B4 E4 85 F1 | 	sub	objptr, ##34484
21d64     F2 FA 01 F6 | 	mov	result1, objptr
21d68     00 38 02 FF 
21d6c     00 FA 45 F5 | 	or	result1, ##74448896
21d70     44 00 00 FF 
21d74     38 E4 05 F1 | 	add	objptr, ##34872
21d78     F2 FA 61 FC | 	wrlong	result1, objptr
21d7c     44 00 00 FF 
21d80     38 E4 85 F1 | 	sub	objptr, ##34872
21d84     F2 FA 01 F6 | 	mov	result1, objptr
21d88     00 40 02 FF 
21d8c     00 FA 45 F5 | 	or	result1, ##75497472
21d90     44 00 00 FF 
21d94     48 E4 05 F1 | 	add	objptr, ##34888
21d98     F2 FA 61 FC | 	wrlong	result1, objptr
21d9c     44 00 00 FF 
21da0     48 E4 85 F1 | 	sub	objptr, ##34888
21da4     F2 FA 01 F6 | 	mov	result1, objptr
21da8     00 48 02 FF 
21dac     00 FA 45 F5 | 	or	result1, ##76546048
21db0     44 00 00 FF 
21db4     4C E4 05 F1 | 	add	objptr, ##34892
21db8     F2 FA 61 FC | 	wrlong	result1, objptr
21dbc     44 00 00 FF 
21dc0     4C E4 85 F1 | 	sub	objptr, ##34892
21dc4     F2 FA 01 F6 | 	mov	result1, objptr
21dc8     00 50 02 FF 
21dcc     00 FA 45 F5 | 	or	result1, ##77594624
21dd0     44 00 00 FF 
21dd4     44 E4 05 F1 | 	add	objptr, ##34884
21dd8     F2 FA 61 FC | 	wrlong	result1, objptr
21ddc     44 00 00 FF 
21de0     44 E4 85 F1 | 	sub	objptr, ##34884
21de4     F2 FA 01 F6 | 	mov	result1, objptr
21de8     00 58 02 FF 
21dec     00 FA 45 F5 | 	or	result1, ##78643200
21df0     44 00 00 FF 
21df4     3C E4 05 F1 | 	add	objptr, ##34876
21df8     F2 FA 61 FC | 	wrlong	result1, objptr
21dfc     44 00 00 FF 
21e00     3C E4 85 F1 | 	sub	objptr, ##34876
21e04     F2 FA 01 F6 | 	mov	result1, objptr
21e08     00 60 02 FF 
21e0c     00 FA 45 F5 | 	or	result1, ##79691776
21e10     44 00 00 FF 
21e14     40 E4 05 F1 | 	add	objptr, ##34880
21e18     F2 FA 61 FC | 	wrlong	result1, objptr
21e1c     44 00 00 FF 
21e20     40 E4 85 F1 | 	sub	objptr, ##34880
21e24     F2 FA 01 F6 | 	mov	result1, objptr
21e28     00 68 02 FF 
21e2c     00 FA 45 F5 | 	or	result1, ##80740352
21e30     44 00 00 FF 
21e34     50 E4 05 F1 | 	add	objptr, ##34896
21e38     F2 FA 61 FC | 	wrlong	result1, objptr
21e3c     44 00 00 FF 
21e40     50 E4 85 F1 | 	sub	objptr, ##34896
21e44     F2 FA 01 F6 | 	mov	result1, objptr
21e48     00 70 02 FF 
21e4c     00 FA 45 F5 | 	or	result1, ##81788928
21e50     44 00 00 FF 
21e54     54 E4 05 F1 | 	add	objptr, ##34900
21e58     F2 FA 61 FC | 	wrlong	result1, objptr
21e5c     44 00 00 FF 
21e60     54 E4 85 F1 | 	sub	objptr, ##34900
21e64     F2 FA 01 F6 | 	mov	result1, objptr
21e68     00 78 02 FF 
21e6c     00 FA 45 F5 | 	or	result1, ##82837504
21e70     44 00 00 FF 
21e74     58 E4 05 F1 | 	add	objptr, ##34904
21e78     F2 FA 61 FC | 	wrlong	result1, objptr
21e7c     44 00 00 FF 
21e80     58 E4 85 F1 | 	sub	objptr, ##34904
21e84     F2 FA 01 F6 | 	mov	result1, objptr
21e88     00 80 02 FF 
21e8c     00 FA 45 F5 | 	or	result1, ##83886080
21e90     44 00 00 FF 
21e94     5C E4 05 F1 | 	add	objptr, ##34908
21e98     F2 FA 61 FC | 	wrlong	result1, objptr
21e9c     44 00 00 FF 
21ea0     5C E4 85 F1 | 	sub	objptr, ##34908
21ea4     F2 FA 01 F6 | 	mov	result1, objptr
21ea8     00 88 02 FF 
21eac     00 FA 45 F5 | 	or	result1, ##84934656
21eb0     44 00 00 FF 
21eb4     60 E4 05 F1 | 	add	objptr, ##34912
21eb8     F2 FA 61 FC | 	wrlong	result1, objptr
21ebc     44 00 00 FF 
21ec0     60 E4 85 F1 | 	sub	objptr, ##34912
21ec4     F2 FA 01 F6 | 	mov	result1, objptr
21ec8     00 90 02 FF 
21ecc     00 FA 45 F5 | 	or	result1, ##85983232
21ed0     44 00 00 FF 
21ed4     64 E4 05 F1 | 	add	objptr, ##34916
21ed8     F2 FA 61 FC | 	wrlong	result1, objptr
21edc     44 00 00 FF 
21ee0     64 E4 85 F1 | 	sub	objptr, ##34916
21ee4     F2 FA 01 F6 | 	mov	result1, objptr
21ee8     00 98 02 FF 
21eec     00 FA 45 F5 | 	or	result1, ##87031808
21ef0     44 00 00 FF 
21ef4     68 E4 05 F1 | 	add	objptr, ##34920
21ef8     F2 FA 61 FC | 	wrlong	result1, objptr
21efc     44 00 00 FF 
21f00     68 E4 85 F1 | 	sub	objptr, ##34920
21f04     F2 FA 01 F6 | 	mov	result1, objptr
21f08     00 A0 02 FF 
21f0c     00 FA 45 F5 | 	or	result1, ##88080384
21f10     44 00 00 FF 
21f14     6C E4 05 F1 | 	add	objptr, ##34924
21f18     F2 FA 61 FC | 	wrlong	result1, objptr
21f1c     44 00 00 FF 
21f20     6C E4 85 F1 | 	sub	objptr, ##34924
21f24     F2 FA 01 F6 | 	mov	result1, objptr
21f28     00 A8 02 FF 
21f2c     00 FA 45 F5 | 	or	result1, ##89128960
21f30     44 00 00 FF 
21f34     78 E4 05 F1 | 	add	objptr, ##34936
21f38     F2 FA 61 FC | 	wrlong	result1, objptr
21f3c     44 00 00 FF 
21f40     78 E4 85 F1 | 	sub	objptr, ##34936
21f44     F2 FA 01 F6 | 	mov	result1, objptr
21f48     00 B0 02 FF 
21f4c     00 FA 45 F5 | 	or	result1, ##90177536
21f50     44 00 00 FF 
21f54     70 E4 05 F1 | 	add	objptr, ##34928
21f58     F2 FA 61 FC | 	wrlong	result1, objptr
21f5c     44 00 00 FF 
21f60     70 E4 85 F1 | 	sub	objptr, ##34928
21f64     F2 FA 01 F6 | 	mov	result1, objptr
21f68     00 B8 02 FF 
21f6c     00 FA 45 F5 | 	or	result1, ##91226112
21f70     44 00 00 FF 
21f74     74 E4 05 F1 | 	add	objptr, ##34932
21f78     F2 FA 61 FC | 	wrlong	result1, objptr
21f7c     44 00 00 FF 
21f80     74 E4 85 F1 | 	sub	objptr, ##34932
21f84     F2 FA 01 F6 | 	mov	result1, objptr
21f88     00 C0 02 FF 
21f8c     00 FA 45 F5 | 	or	result1, ##92274688
21f90     44 00 00 FF 
21f94     7C E4 05 F1 | 	add	objptr, ##34940
21f98     F2 FA 61 FC | 	wrlong	result1, objptr
21f9c     44 00 00 FF 
21fa0     7C E4 85 F1 | 	sub	objptr, ##34940
21fa4     F2 FA 01 F6 | 	mov	result1, objptr
21fa8     00 C8 02 FF 
21fac     00 FA 45 F5 | 	or	result1, ##93323264
21fb0     44 00 00 FF 
21fb4     24 E4 05 F1 | 	add	objptr, ##34852
21fb8     F2 FA 61 FC | 	wrlong	result1, objptr
21fbc     44 00 00 FF 
21fc0     24 E4 85 F1 | 	sub	objptr, ##34852
21fc4     F2 FA 01 F6 | 	mov	result1, objptr
21fc8     00 D0 02 FF 
21fcc     00 FA 45 F5 | 	or	result1, ##94371840
21fd0     44 00 00 FF 
21fd4     2C E4 05 F1 | 	add	objptr, ##34860
21fd8     F2 FA 61 FC | 	wrlong	result1, objptr
21fdc     44 00 00 FF 
21fe0     2C E4 85 F1 | 	sub	objptr, ##34860
21fe4     F2 FA 01 F6 | 	mov	result1, objptr
21fe8     00 D8 02 FF 
21fec     00 FA 45 F5 | 	or	result1, ##95420416
21ff0     44 00 00 FF 
21ff4     30 E4 05 F1 | 	add	objptr, ##34864
21ff8     F2 FA 61 FC | 	wrlong	result1, objptr
21ffc     44 00 00 FF 
22000     30 E4 85 F1 | 	sub	objptr, ##34864
22004     F2 FA 01 F6 | 	mov	result1, objptr
22008     00 E0 02 FF 
2200c     00 FA 45 F5 | 	or	result1, ##96468992
22010     44 00 00 FF 
22014     80 E4 05 F1 | 	add	objptr, ##34944
22018     F2 FA 61 FC | 	wrlong	result1, objptr
2201c     44 00 00 FF 
22020     80 E4 85 F1 | 	sub	objptr, ##34944
22024     F2 FA 01 F6 | 	mov	result1, objptr
22028     00 E8 02 FF 
2202c     00 FA 45 F5 | 	or	result1, ##97517568
22030     44 00 00 FF 
22034     84 E4 05 F1 | 	add	objptr, ##34948
22038     F2 FA 61 FC | 	wrlong	result1, objptr
2203c     44 00 00 FF 
22040     84 E4 85 F1 | 	sub	objptr, ##34948
22044     F2 FA 01 F6 | 	mov	result1, objptr
22048     00 F0 02 FF 
2204c     00 FA 45 F5 | 	or	result1, ##98566144
22050     44 00 00 FF 
22054     88 E4 05 F1 | 	add	objptr, ##34952
22058     F2 FA 61 FC | 	wrlong	result1, objptr
2205c     44 00 00 FF 
22060     88 E4 85 F1 | 	sub	objptr, ##34952
22064     F2 FA 01 F6 | 	mov	result1, objptr
22068     00 F8 02 FF 
2206c     00 FA 45 F5 | 	or	result1, ##99614720
22070     44 00 00 FF 
22074     34 E4 05 F1 | 	add	objptr, ##34868
22078     F2 FA 61 FC | 	wrlong	result1, objptr
2207c     44 00 00 FF 
22080     34 E4 85 F1 | 	sub	objptr, ##34868
22084     F2 FA 01 F6 | 	mov	result1, objptr
22088     39 FA 25 F4 | 	bith	result1, #57
2208c     44 00 00 FF 
22090     98 E4 05 F1 | 	add	objptr, ##34968
22094     F2 FA 61 FC | 	wrlong	result1, objptr
22098     44 00 00 FF 
2209c     98 E4 85 F1 | 	sub	objptr, ##34968
220a0     F2 FA 01 F6 | 	mov	result1, objptr
220a4     00 08 03 FF 
220a8     00 FA 45 F5 | 	or	result1, ##101711872
220ac     44 00 00 FF 
220b0     A0 E4 05 F1 | 	add	objptr, ##34976
220b4     F2 FA 61 FC | 	wrlong	result1, objptr
220b8     44 00 00 FF 
220bc     A0 E4 85 F1 | 	sub	objptr, ##34976
220c0     F2 FA 01 F6 | 	mov	result1, objptr
220c4     00 10 03 FF 
220c8     00 FA 45 F5 | 	or	result1, ##102760448
220cc     44 00 00 FF 
220d0     94 E4 05 F1 | 	add	objptr, ##34964
220d4     F2 FA 61 FC | 	wrlong	result1, objptr
220d8     44 00 00 FF 
220dc     94 E4 85 F1 | 	sub	objptr, ##34964
220e0     F2 FA 01 F6 | 	mov	result1, objptr
220e4     00 18 03 FF 
220e8     00 FA 45 F5 | 	or	result1, ##103809024
220ec     44 00 00 FF 
220f0     90 E4 05 F1 | 	add	objptr, ##34960
220f4     F2 FA 61 FC | 	wrlong	result1, objptr
220f8     44 00 00 FF 
220fc     90 E4 85 F1 | 	sub	objptr, ##34960
22100     F2 FA 01 F6 | 	mov	result1, objptr
22104     00 20 03 FF 
22108     00 FA 45 F5 | 	or	result1, ##104857600
2210c     44 00 00 FF 
22110     8C E4 05 F1 | 	add	objptr, ##34956
22114     F2 FA 61 FC | 	wrlong	result1, objptr
22118     44 00 00 FF 
2211c     8C E4 85 F1 | 	sub	objptr, ##34956
22120     F2 FA 01 F6 | 	mov	result1, objptr
22124     00 28 03 FF 
22128     00 FA 45 F5 | 	or	result1, ##105906176
2212c     44 00 00 FF 
22130     9C E4 05 F1 | 	add	objptr, ##34972
22134     F2 FA 61 FC | 	wrlong	result1, objptr
22138     44 00 00 FF 
2213c     9C E4 85 F1 | 	sub	objptr, ##34972
22140     F2 FA 01 F6 | 	mov	result1, objptr
22144     00 30 03 FF 
22148     00 FA 45 F5 | 	or	result1, ##106954752
2214c     44 00 00 FF 
22150     A4 E4 05 F1 | 	add	objptr, ##34980
22154     F2 FA 61 FC | 	wrlong	result1, objptr
22158     44 00 00 FF 
2215c     A4 E4 85 F1 | 	sub	objptr, ##34980
22160     F2 FA 01 F6 | 	mov	result1, objptr
22164     00 38 03 FF 
22168     00 FA 45 F5 | 	or	result1, ##108003328
2216c     44 00 00 FF 
22170     A8 E4 05 F1 | 	add	objptr, ##34984
22174     F2 FA 61 FC | 	wrlong	result1, objptr
22178     44 00 00 FF 
2217c     A8 E4 85 F1 | 	sub	objptr, ##34984
22180     F2 FA 01 F6 | 	mov	result1, objptr
22184     00 40 03 FF 
22188     00 FA 45 F5 | 	or	result1, ##109051904
2218c     44 00 00 FF 
22190     AC E4 05 F1 | 	add	objptr, ##34988
22194     F2 FA 61 FC | 	wrlong	result1, objptr
22198     44 00 00 FF 
2219c     AC E4 85 F1 | 	sub	objptr, ##34988
221a0     F2 FA 01 F6 | 	mov	result1, objptr
221a4     00 48 03 FF 
221a8     00 FA 45 F5 | 	or	result1, ##110100480
221ac     44 00 00 FF 
221b0     B4 E4 05 F1 | 	add	objptr, ##34996
221b4     F2 FA 61 FC | 	wrlong	result1, objptr
221b8     44 00 00 FF 
221bc     B4 E4 85 F1 | 	sub	objptr, ##34996
221c0     F2 FA 01 F6 | 	mov	result1, objptr
221c4     00 50 03 FF 
221c8     00 FA 45 F5 | 	or	result1, ##111149056
221cc     44 00 00 FF 
221d0     B8 E4 05 F1 | 	add	objptr, ##35000
221d4     F2 FA 61 FC | 	wrlong	result1, objptr
221d8     44 00 00 FF 
221dc     B8 E4 85 F1 | 	sub	objptr, ##35000
221e0     F2 FA 01 F6 | 	mov	result1, objptr
221e4     00 58 03 FF 
221e8     00 FA 45 F5 | 	or	result1, ##112197632
221ec     44 00 00 FF 
221f0     BC E4 05 F1 | 	add	objptr, ##35004
221f4     F2 FA 61 FC | 	wrlong	result1, objptr
221f8     44 00 00 FF 
221fc     BC E4 85 F1 | 	sub	objptr, ##35004
22200     F2 FA 01 F6 | 	mov	result1, objptr
22204     00 60 03 FF 
22208     00 FA 45 F5 | 	or	result1, ##113246208
2220c     44 00 00 FF 
22210     C0 E4 05 F1 | 	add	objptr, ##35008
22214     F2 FA 61 FC | 	wrlong	result1, objptr
22218     44 00 00 FF 
2221c     C0 E4 85 F1 | 	sub	objptr, ##35008
22220     F2 FA 01 F6 | 	mov	result1, objptr
22224     00 68 03 FF 
22228     00 FA 45 F5 | 	or	result1, ##114294784
2222c     44 00 00 FF 
22230     C4 E4 05 F1 | 	add	objptr, ##35012
22234     F2 FA 61 FC | 	wrlong	result1, objptr
22238     44 00 00 FF 
2223c     C4 E4 85 F1 | 	sub	objptr, ##35012
22240     F2 FA 01 F6 | 	mov	result1, objptr
22244     00 70 03 FF 
22248     00 FA 45 F5 | 	or	result1, ##115343360
2224c     44 00 00 FF 
22250     C8 E4 05 F1 | 	add	objptr, ##35016
22254     F2 FA 61 FC | 	wrlong	result1, objptr
22258     44 00 00 FF 
2225c     C8 E4 85 F1 | 	sub	objptr, ##35016
22260     F2 FA 01 F6 | 	mov	result1, objptr
22264     00 08 01 FF 
22268     00 FA 45 F5 | 	or	result1, ##34603008
2226c     44 00 00 FF 
22270     CC E4 05 F1 | 	add	objptr, ##35020
22274     F2 FA 61 FC | 	wrlong	result1, objptr
22278     44 00 00 FF 
2227c     CC E4 85 F1 | 	sub	objptr, ##35020
22280     F2 FA 01 F6 | 	mov	result1, objptr
22284     00 78 03 FF 
22288     00 FA 45 F5 | 	or	result1, ##116391936
2228c     44 00 00 FF 
22290     D0 E4 05 F1 | 	add	objptr, ##35024
22294     F2 FA 61 FC | 	wrlong	result1, objptr
22298     44 00 00 FF 
2229c     D0 E4 85 F1 | 	sub	objptr, ##35024
222a0     F2 FA 01 F6 | 	mov	result1, objptr
222a4     58 FA 25 F4 | 	bith	result1, #88
222a8     44 00 00 FF 
222ac     B0 E4 05 F1 | 	add	objptr, ##34992
222b0     F2 FA 61 FC | 	wrlong	result1, objptr
222b4     44 00 00 FF 
222b8     B0 E4 85 F1 | 	sub	objptr, ##34992
222bc     F2 FA 01 F6 | 	mov	result1, objptr
222c0     00 88 03 FF 
222c4     00 FA 45 F5 | 	or	result1, ##118489088
222c8     43 00 00 FF 
222cc     A8 E4 05 F1 | 	add	objptr, ##34472
222d0     F2 FA 61 FC | 	wrlong	result1, objptr
222d4     43 00 00 FF 
222d8     A8 E4 85 F1 | 	sub	objptr, ##34472
222dc     F2 FA 01 F6 | 	mov	result1, objptr
222e0     00 90 03 FF 
222e4     00 FA 45 F5 | 	or	result1, ##119537664
222e8     44 00 00 FF 
222ec     D4 E4 05 F1 | 	add	objptr, ##35028
222f0     F2 FA 61 FC | 	wrlong	result1, objptr
222f4     44 00 00 FF 
222f8     D4 E4 85 F1 | 	sub	objptr, ##35028
222fc     F2 FA 01 F6 | 	mov	result1, objptr
22300     00 98 03 FF 
22304     00 FA 45 F5 | 	or	result1, ##120586240
22308     44 00 00 FF 
2230c     D8 E4 05 F1 | 	add	objptr, ##35032
22310     F2 FA 61 FC | 	wrlong	result1, objptr
22314     44 00 00 FF 
22318     D8 E4 85 F1 | 	sub	objptr, ##35032
2231c     F2 FA 01 F6 | 	mov	result1, objptr
22320     00 A0 03 FF 
22324     00 FA 45 F5 | 	or	result1, ##121634816
22328     44 00 00 FF 
2232c     EC E4 05 F1 | 	add	objptr, ##35052
22330     F2 FA 61 FC | 	wrlong	result1, objptr
22334     44 00 00 FF 
22338     EC E4 85 F1 | 	sub	objptr, ##35052
2233c     F2 FA 01 F6 | 	mov	result1, objptr
22340     00 A8 03 FF 
22344     00 FA 45 F5 | 	or	result1, ##122683392
22348     44 00 00 FF 
2234c     E8 E4 05 F1 | 	add	objptr, ##35048
22350     F2 FA 61 FC | 	wrlong	result1, objptr
22354     44 00 00 FF 
22358     E8 E4 85 F1 | 	sub	objptr, ##35048
2235c     F2 FA 01 F6 | 	mov	result1, objptr
22360     00 B0 03 FF 
22364     00 FA 45 F5 | 	or	result1, ##123731968
22368     44 00 00 FF 
2236c     E0 E4 05 F1 | 	add	objptr, ##35040
22370     F2 FA 61 FC | 	wrlong	result1, objptr
22374     44 00 00 FF 
22378     E0 E4 85 F1 | 	sub	objptr, ##35040
2237c     F2 FA 01 F6 | 	mov	result1, objptr
22380     00 B8 03 FF 
22384     00 FA 45 F5 | 	or	result1, ##124780544
22388     44 00 00 FF 
2238c     DC E4 05 F1 | 	add	objptr, ##35036
22390     F2 FA 61 FC | 	wrlong	result1, objptr
22394     44 00 00 FF 
22398     DC E4 85 F1 | 	sub	objptr, ##35036
2239c     F2 FA 01 F6 | 	mov	result1, objptr
223a0     77 FA 25 F4 | 	bith	result1, #119
223a4     44 00 00 FF 
223a8     FC E4 05 F1 | 	add	objptr, ##35068
223ac     F2 FA 61 FC | 	wrlong	result1, objptr
223b0     44 00 00 FF 
223b4     FC E4 85 F1 | 	sub	objptr, ##35068
223b8     F2 FA 01 F6 | 	mov	result1, objptr
223bc     00 C8 03 FF 
223c0     00 FA 45 F5 | 	or	result1, ##126877696
223c4     44 00 00 FF 
223c8     F0 E4 05 F1 | 	add	objptr, ##35056
223cc     F2 FA 61 FC | 	wrlong	result1, objptr
223d0     44 00 00 FF 
223d4     F0 E4 85 F1 | 	sub	objptr, ##35056
223d8     F2 FA 01 F6 | 	mov	result1, objptr
223dc     00 D0 03 FF 
223e0     00 FA 45 F5 | 	or	result1, ##127926272
223e4     44 00 00 FF 
223e8     F4 E4 05 F1 | 	add	objptr, ##35060
223ec     F2 FA 61 FC | 	wrlong	result1, objptr
223f0     44 00 00 FF 
223f4     F4 E4 85 F1 | 	sub	objptr, ##35060
223f8     F2 FA 01 F6 | 	mov	result1, objptr
223fc     00 D8 03 FF 
22400     00 FA 45 F5 | 	or	result1, ##128974848
22404     44 00 00 FF 
22408     F8 E4 05 F1 | 	add	objptr, ##35064
2240c     F2 FA 61 FC | 	wrlong	result1, objptr
22410     44 00 00 FF 
22414     F8 E4 85 F1 | 	sub	objptr, ##35064
22418     F2 FA 01 F6 | 	mov	result1, objptr
2241c     96 FA 25 F4 | 	bith	result1, #150
22420     44 00 00 FF 
22424     00 E5 05 F1 | 	add	objptr, ##35072
22428     F2 FA 61 FC | 	wrlong	result1, objptr
2242c     44 00 00 FF 
22430     00 E5 85 F1 | 	sub	objptr, ##35072
22434     F2 FA 01 F6 | 	mov	result1, objptr
22438     00 E8 03 FF 
2243c     00 FA 45 F5 | 	or	result1, ##131072000
22440     44 00 00 FF 
22444     04 E5 05 F1 | 	add	objptr, ##35076
22448     F2 FA 61 FC | 	wrlong	result1, objptr
2244c     44 00 00 FF 
22450     04 E5 85 F1 | 	sub	objptr, ##35076
22454     F2 FA 01 F6 | 	mov	result1, objptr
22458     B5 FA 25 F4 | 	bith	result1, #181
2245c     44 00 00 FF 
22460     08 E5 05 F1 | 	add	objptr, ##35080
22464     F2 FA 61 FC | 	wrlong	result1, objptr
22468     44 00 00 FF 
2246c     08 E5 85 F1 | 	sub	objptr, ##35080
22470     F2 FA 01 F6 | 	mov	result1, objptr
22474     D4 FA 25 F4 | 	bith	result1, #212
22478     44 00 00 FF 
2247c     0C E5 05 F1 | 	add	objptr, ##35084
22480     F2 FA 61 FC | 	wrlong	result1, objptr
22484     44 00 00 FF 
22488     0C E5 85 F1 | 	sub	objptr, ##35084
2248c     F2 FA 01 F6 | 	mov	result1, objptr
22490     1B FA 25 F4 | 	bith	result1, #27
22494     44 00 00 FF 
22498     10 E5 05 F1 | 	add	objptr, ##35088
2249c     F2 FA 61 FC | 	wrlong	result1, objptr
224a0     44 00 00 FF 
224a4     10 E5 85 F1 | 	sub	objptr, ##35088
224a8     F2 FA 01 F6 | 	mov	result1, objptr
224ac     00 08 04 FF 
224b0     00 FA 45 F5 | 	or	result1, ##135266304
224b4     44 00 00 FF 
224b8     14 E5 05 F1 | 	add	objptr, ##35092
224bc     F2 FA 61 FC | 	wrlong	result1, objptr
224c0     44 00 00 FF 
224c4     14 E5 85 F1 | 	sub	objptr, ##35092
224c8     F2 FA 01 F6 | 	mov	result1, objptr
224cc     00 10 04 FF 
224d0     00 FA 45 F5 | 	or	result1, ##136314880
224d4     44 00 00 FF 
224d8     1C E5 05 F1 | 	add	objptr, ##35100
224dc     F2 FA 61 FC | 	wrlong	result1, objptr
224e0     44 00 00 FF 
224e4     1C E5 85 F1 | 	sub	objptr, ##35100
224e8     F2 FA 01 F6 | 	mov	result1, objptr
224ec     00 18 04 FF 
224f0     00 FA 45 F5 | 	or	result1, ##137363456
224f4     44 00 00 FF 
224f8     20 E5 05 F1 | 	add	objptr, ##35104
224fc     F2 FA 61 FC | 	wrlong	result1, objptr
22500     44 00 00 FF 
22504     20 E5 85 F1 | 	sub	objptr, ##35104
22508     F2 FA 01 F6 | 	mov	result1, objptr
2250c     00 20 04 FF 
22510     00 FA 45 F5 | 	or	result1, ##138412032
22514     44 00 00 FF 
22518     24 E5 05 F1 | 	add	objptr, ##35108
2251c     F2 FA 61 FC | 	wrlong	result1, objptr
22520     44 00 00 FF 
22524     24 E5 85 F1 | 	sub	objptr, ##35108
22528     F2 FA 01 F6 | 	mov	result1, objptr
2252c     00 28 04 FF 
22530     00 FA 45 F5 | 	or	result1, ##139460608
22534     44 00 00 FF 
22538     18 E5 05 F1 | 	add	objptr, ##35096
2253c     F2 FA 61 FC | 	wrlong	result1, objptr
22540     44 00 00 FF 
22544     18 E5 85 F1 | 	sub	objptr, ##35096
22548     F2 FA 01 F6 | 	mov	result1, objptr
2254c     00 30 04 FF 
22550     00 FA 45 F5 | 	or	result1, ##140509184
22554     44 00 00 FF 
22558     28 E5 05 F1 | 	add	objptr, ##35112
2255c     F2 FA 61 FC | 	wrlong	result1, objptr
22560     44 00 00 FF 
22564     28 E5 85 F1 | 	sub	objptr, ##35112
22568     F2 FA 01 F6 | 	mov	result1, objptr
2256c     00 38 04 FF 
22570     00 FA 45 F5 | 	or	result1, ##141557760
22574     44 00 00 FF 
22578     5C E5 05 F1 | 	add	objptr, ##35164
2257c     F2 FA 61 FC | 	wrlong	result1, objptr
22580     44 00 00 FF 
22584     5C E5 85 F1 | 	sub	objptr, ##35164
22588     F2 FA 01 F6 | 	mov	result1, objptr
2258c     00 40 04 FF 
22590     00 FA 45 F5 | 	or	result1, ##142606336
22594     44 00 00 FF 
22598     54 E5 05 F1 | 	add	objptr, ##35156
2259c     F2 FA 61 FC | 	wrlong	result1, objptr
225a0     44 00 00 FF 
225a4     54 E5 85 F1 | 	sub	objptr, ##35156
225a8     F2 FA 01 F6 | 	mov	result1, objptr
225ac     00 48 04 FF 
225b0     00 FA 45 F5 | 	or	result1, ##143654912
225b4     44 00 00 FF 
225b8     2C E5 05 F1 | 	add	objptr, ##35116
225bc     F2 FA 61 FC | 	wrlong	result1, objptr
225c0     44 00 00 FF 
225c4     2C E5 85 F1 | 	sub	objptr, ##35116
225c8     F2 FA 01 F6 | 	mov	result1, objptr
225cc     00 50 04 FF 
225d0     00 FA 45 F5 | 	or	result1, ##144703488
225d4     44 00 00 FF 
225d8     30 E5 05 F1 | 	add	objptr, ##35120
225dc     F2 FA 61 FC | 	wrlong	result1, objptr
225e0     44 00 00 FF 
225e4     30 E5 85 F1 | 	sub	objptr, ##35120
225e8     F2 FA 01 F6 | 	mov	result1, objptr
225ec     00 58 04 FF 
225f0     00 FA 45 F5 | 	or	result1, ##145752064
225f4     44 00 00 FF 
225f8     4C E5 05 F1 | 	add	objptr, ##35148
225fc     F2 FA 61 FC | 	wrlong	result1, objptr
22600     44 00 00 FF 
22604     4C E5 85 F1 | 	sub	objptr, ##35148
22608     F2 FA 01 F6 | 	mov	result1, objptr
2260c     00 60 04 FF 
22610     00 FA 45 F5 | 	or	result1, ##146800640
22614     44 00 00 FF 
22618     50 E5 05 F1 | 	add	objptr, ##35152
2261c     F2 FA 61 FC | 	wrlong	result1, objptr
22620     44 00 00 FF 
22624     50 E5 85 F1 | 	sub	objptr, ##35152
22628     F2 FA 01 F6 | 	mov	result1, objptr
2262c     00 68 04 FF 
22630     00 FA 45 F5 | 	or	result1, ##147849216
22634     44 00 00 FF 
22638     6C E5 05 F1 | 	add	objptr, ##35180
2263c     F2 FA 61 FC | 	wrlong	result1, objptr
22640     44 00 00 FF 
22644     6C E5 85 F1 | 	sub	objptr, ##35180
22648     F2 FA 01 F6 | 	mov	result1, objptr
2264c     00 70 04 FF 
22650     00 FA 45 F5 | 	or	result1, ##148897792
22654     44 00 00 FF 
22658     68 E5 05 F1 | 	add	objptr, ##35176
2265c     F2 FA 61 FC | 	wrlong	result1, objptr
22660     44 00 00 FF 
22664     68 E5 85 F1 | 	sub	objptr, ##35176
22668     F2 FA 01 F6 | 	mov	result1, objptr
2266c     00 78 04 FF 
22670     00 FA 45 F5 | 	or	result1, ##149946368
22674     44 00 00 FF 
22678     78 E5 05 F1 | 	add	objptr, ##35192
2267c     F2 FA 61 FC | 	wrlong	result1, objptr
22680     44 00 00 FF 
22684     78 E5 85 F1 | 	sub	objptr, ##35192
22688     F2 FA 01 F6 | 	mov	result1, objptr
2268c     00 80 04 FF 
22690     00 FA 45 F5 | 	or	result1, ##150994944
22694     44 00 00 FF 
22698     44 E5 05 F1 | 	add	objptr, ##35140
2269c     F2 FA 61 FC | 	wrlong	result1, objptr
226a0     44 00 00 FF 
226a4     44 E5 85 F1 | 	sub	objptr, ##35140
226a8     F2 FA 01 F6 | 	mov	result1, objptr
226ac     00 88 04 FF 
226b0     00 FA 45 F5 | 	or	result1, ##152043520
226b4     44 00 00 FF 
226b8     74 E5 05 F1 | 	add	objptr, ##35188
226bc     F2 FA 61 FC | 	wrlong	result1, objptr
226c0     44 00 00 FF 
226c4     74 E5 85 F1 | 	sub	objptr, ##35188
226c8     F2 FA 01 F6 | 	mov	result1, objptr
226cc     00 90 04 FF 
226d0     00 FA 45 F5 | 	or	result1, ##153092096
226d4     44 00 00 FF 
226d8     64 E5 05 F1 | 	add	objptr, ##35172
226dc     F2 FA 61 FC | 	wrlong	result1, objptr
226e0     44 00 00 FF 
226e4     64 E5 85 F1 | 	sub	objptr, ##35172
226e8     F2 FA 01 F6 | 	mov	result1, objptr
226ec     00 98 04 FF 
226f0     00 FA 45 F5 | 	or	result1, ##154140672
226f4     43 00 00 FF 
226f8     14 E5 05 F1 | 	add	objptr, ##34580
226fc     F2 FA 61 FC | 	wrlong	result1, objptr
22700     43 00 00 FF 
22704     14 E5 85 F1 | 	sub	objptr, ##34580
22708     F2 FA 01 F6 | 	mov	result1, objptr
2270c     00 A0 04 FF 
22710     00 FA 45 F5 | 	or	result1, ##155189248
22714     44 00 00 FF 
22718     34 E5 05 F1 | 	add	objptr, ##35124
2271c     F2 FA 61 FC | 	wrlong	result1, objptr
22720     44 00 00 FF 
22724     34 E5 85 F1 | 	sub	objptr, ##35124
22728     F2 FA 01 F6 | 	mov	result1, objptr
2272c     00 08 01 FF 
22730     00 FA 45 F5 | 	or	result1, ##34603008
22734     44 00 00 FF 
22738     3C E5 05 F1 | 	add	objptr, ##35132
2273c     F2 FA 61 FC | 	wrlong	result1, objptr
22740     44 00 00 FF 
22744     3C E5 85 F1 | 	sub	objptr, ##35132
22748     F2 FA 01 F6 | 	mov	result1, objptr
2274c     00 A8 04 FF 
22750     00 FA 45 F5 | 	or	result1, ##156237824
22754     44 00 00 FF 
22758     38 E5 05 F1 | 	add	objptr, ##35128
2275c     F2 FA 61 FC | 	wrlong	result1, objptr
22760     44 00 00 FF 
22764     38 E5 85 F1 | 	sub	objptr, ##35128
22768     F2 FA 01 F6 | 	mov	result1, objptr
2276c     00 B0 04 FF 
22770     00 FA 45 F5 | 	or	result1, ##157286400
22774     44 00 00 FF 
22778     7C E5 05 F1 | 	add	objptr, ##35196
2277c     F2 FA 61 FC | 	wrlong	result1, objptr
22780     44 00 00 FF 
22784     7C E5 85 F1 | 	sub	objptr, ##35196
22788     F2 FA 01 F6 | 	mov	result1, objptr
2278c     00 B8 04 FF 
22790     00 FA 45 F5 | 	or	result1, ##158334976
22794     44 00 00 FF 
22798     80 E5 05 F1 | 	add	objptr, ##35200
2279c     F2 FA 61 FC | 	wrlong	result1, objptr
227a0     44 00 00 FF 
227a4     80 E5 85 F1 | 	sub	objptr, ##35200
227a8     F2 FA 01 F6 | 	mov	result1, objptr
227ac     00 C0 04 FF 
227b0     00 FA 45 F5 | 	or	result1, ##159383552
227b4     44 00 00 FF 
227b8     84 E5 05 F1 | 	add	objptr, ##35204
227bc     F2 FA 61 FC | 	wrlong	result1, objptr
227c0     44 00 00 FF 
227c4     84 E5 85 F1 | 	sub	objptr, ##35204
227c8     F2 FA 01 F6 | 	mov	result1, objptr
227cc     00 C8 04 FF 
227d0     00 FA 45 F5 | 	or	result1, ##160432128
227d4     44 00 00 FF 
227d8     88 E5 05 F1 | 	add	objptr, ##35208
227dc     F2 FA 61 FC | 	wrlong	result1, objptr
227e0     44 00 00 FF 
227e4     88 E5 85 F1 | 	sub	objptr, ##35208
227e8     F2 FA 01 F6 | 	mov	result1, objptr
227ec     00 D0 04 FF 
227f0     00 FA 45 F5 | 	or	result1, ##161480704
227f4     44 00 00 FF 
227f8     90 E5 05 F1 | 	add	objptr, ##35216
227fc     F2 FA 61 FC | 	wrlong	result1, objptr
22800     44 00 00 FF 
22804     90 E5 85 F1 | 	sub	objptr, ##35216
22808     F2 FA 01 F6 | 	mov	result1, objptr
2280c     00 D8 04 FF 
22810     00 FA 45 F5 | 	or	result1, ##162529280
22814     44 00 00 FF 
22818     94 E5 05 F1 | 	add	objptr, ##35220
2281c     F2 FA 61 FC | 	wrlong	result1, objptr
22820     44 00 00 FF 
22824     94 E5 85 F1 | 	sub	objptr, ##35220
22828     F2 FA 01 F6 | 	mov	result1, objptr
2282c     00 E0 04 FF 
22830     00 FA 45 F5 | 	or	result1, ##163577856
22834     44 00 00 FF 
22838     98 E5 05 F1 | 	add	objptr, ##35224
2283c     F2 FA 61 FC | 	wrlong	result1, objptr
22840     44 00 00 FF 
22844     98 E5 85 F1 | 	sub	objptr, ##35224
22848     F2 FA 01 F6 | 	mov	result1, objptr
2284c     00 E8 04 FF 
22850     00 FA 45 F5 | 	or	result1, ##164626432
22854     44 00 00 FF 
22858     8C E5 05 F1 | 	add	objptr, ##35212
2285c     F2 FA 61 FC | 	wrlong	result1, objptr
22860     44 00 00 FF 
22864     8C E5 85 F1 | 	sub	objptr, ##35212
22868     F2 FA 01 F6 | 	mov	result1, objptr
2286c     00 F0 04 FF 
22870     00 FA 45 F5 | 	or	result1, ##165675008
22874     44 00 00 FF 
22878     70 E5 05 F1 | 	add	objptr, ##35184
2287c     F2 FA 61 FC | 	wrlong	result1, objptr
22880     44 00 00 FF 
22884     70 E5 85 F1 | 	sub	objptr, ##35184
22888     F2 FA 01 F6 | 	mov	result1, objptr
2288c     00 F8 04 FF 
22890     00 FA 45 F5 | 	or	result1, ##166723584
22894     44 00 00 FF 
22898     60 E5 05 F1 | 	add	objptr, ##35168
2289c     F2 FA 61 FC | 	wrlong	result1, objptr
228a0     44 00 00 FF 
228a4     60 E5 85 F1 | 	sub	objptr, ##35168
228a8     F2 FA 01 F6 | 	mov	result1, objptr
228ac     00 00 05 FF 
228b0     00 FA 45 F5 | 	or	result1, ##167772160
228b4     44 00 00 FF 
228b8     9C E5 05 F1 | 	add	objptr, ##35228
228bc     F2 FA 61 FC | 	wrlong	result1, objptr
228c0     44 00 00 FF 
228c4     9C E5 85 F1 | 	sub	objptr, ##35228
228c8     F2 FA 01 F6 | 	mov	result1, objptr
228cc     00 08 05 FF 
228d0     00 FA 45 F5 | 	or	result1, ##168820736
228d4     44 00 00 FF 
228d8     A0 E5 05 F1 | 	add	objptr, ##35232
228dc     F2 FA 61 FC | 	wrlong	result1, objptr
228e0     44 00 00 FF 
228e4     A0 E5 85 F1 | 	sub	objptr, ##35232
228e8     F2 FA 01 F6 | 	mov	result1, objptr
228ec     00 10 05 FF 
228f0     00 FA 45 F5 | 	or	result1, ##169869312
228f4     44 00 00 FF 
228f8     A4 E5 05 F1 | 	add	objptr, ##35236
228fc     F2 FA 61 FC | 	wrlong	result1, objptr
22900     44 00 00 FF 
22904     A4 E5 85 F1 | 	sub	objptr, ##35236
22908     F2 FA 01 F6 | 	mov	result1, objptr
2290c     00 18 05 FF 
22910     00 FA 45 F5 | 	or	result1, ##170917888
22914     44 00 00 FF 
22918     A8 E5 05 F1 | 	add	objptr, ##35240
2291c     F2 FA 61 FC | 	wrlong	result1, objptr
22920     44 00 00 FF 
22924     A8 E5 85 F1 | 	sub	objptr, ##35240
22928     F2 FA 01 F6 | 	mov	result1, objptr
2292c     00 20 05 FF 
22930     00 FA 45 F5 | 	or	result1, ##171966464
22934     44 00 00 FF 
22938     AC E5 05 F1 | 	add	objptr, ##35244
2293c     F2 FA 61 FC | 	wrlong	result1, objptr
22940     44 00 00 FF 
22944     AC E5 85 F1 | 	sub	objptr, ##35244
22948                 | _init_commands_ret
22948     2D 00 64 FD | 	ret
2294c                 | 
2294c                 | ' 
2294c                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
2294c                 | ' 
2294c                 | ' sub init_audio
2294c                 | _init_audio
2294c     06 4A 05 F6 | 	mov	COUNT_, #6
22950     A8 00 A0 FD | 	call	#pushregs_
22954     00 C0 1F FF 
22958     00 26 06 F6 | 	mov	local01, ##1065353216
2295c                 | ' 
2295c                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
2295c     00 28 06 F6 | 	mov	local02, #0
22960                 | LR__2640
22960     14 2B 02 F6 | 	mov	local03, local02
22964     01 2A 66 F0 | 	shl	local03, #1
22968     58 7F 23 FF 
2296c     00 2C 06 F6 | 	mov	local04, ##1191096320
22970     14 13 52 F6 | 	abs	arg01, local02 wc
22974     1F 2E C6 C9 |  if_b	decod	local05, #31
22978     00 2E 06 36 |  if_ae	mov	local05, #0
2297c     64 70 B0 FD | 	call	#__system___float_fromuns
22980     17 FB 61 F5 | 	xor	result1, local05
22984     FD 12 02 F6 | 	mov	arg01, result1
22988     87 24 20 FF 
2298c     DB 15 06 F6 | 	mov	arg02, ##1078530011
22990     54 74 B0 FD | 	call	#__system___float_mul
22994     FD 12 02 F6 | 	mov	arg01, result1
22998     00 00 22 FF 
2299c     00 14 06 F6 | 	mov	arg02, ##1140850688
229a0     48 76 B0 FD | 	call	#__system___float_div
229a4     FD 12 02 F6 | 	mov	arg01, result1
229a8     9C 7D B0 FD | 	call	#__system____builtin_sinf
229ac     FD 14 02 F6 | 	mov	arg02, result1
229b0     16 13 02 F6 | 	mov	arg01, local04
229b4     30 74 B0 FD | 	call	#__system___float_mul
229b8     FD 12 02 F6 | 	mov	arg01, result1
229bc     01 14 06 F6 | 	mov	arg02, #1
229c0     EC 78 B0 FD | 	call	#__system___float_tointeger
229c4     FD 14 02 F6 | 	mov	arg02, result1
229c8     15 13 02 F6 | 	mov	arg01, local03
229cc     6C 0D B0 FD | 	call	#_psdpoke
229d0     01 28 06 F1 | 	add	local02, #1
229d4     02 00 00 FF 
229d8     00 28 56 F2 | 	cmps	local02, ##1024 wc
229dc     80 FF 9F CD |  if_b	jmp	#LR__2640
229e0                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
229e0     00 28 06 F6 | 	mov	local02, #0
229e4                 | LR__2641
229e4     14 15 02 F6 | 	mov	arg02, local02
229e8     01 14 66 F0 | 	shl	arg02, #1
229ec     0B 12 C6 F9 | 	decod	arg01, #11
229f0     0A 13 02 F1 | 	add	arg01, arg02
229f4     14 2D 02 F6 | 	mov	local04, local02
229f8     07 2C 66 F0 | 	shl	local04, #7
229fc     14 2D 82 F1 | 	sub	local04, local02
22a00     C0 FF 7F FF 
22a04     00 15 06 F6 | 	mov	arg02, ##-32512
22a08     16 15 02 F1 | 	add	arg02, local04
22a0c     2C 0D B0 FD | 	call	#_psdpoke
22a10     09 2C C6 F9 | 	decod	local04, #9
22a14     14 2D 02 F1 | 	add	local04, local02
22a18     01 2C 66 F0 | 	shl	local04, #1
22a1c     0B 12 C6 F9 | 	decod	arg01, #11
22a20     16 13 02 F1 | 	add	arg01, local04
22a24     14 2F 02 F6 | 	mov	local05, local02
22a28     07 2E 66 F0 | 	shl	local05, #7
22a2c     14 2F 82 F1 | 	sub	local05, local02
22a30     3F 00 00 FF 
22a34     00 15 06 F6 | 	mov	arg02, ##32512
22a38     17 15 82 F1 | 	sub	arg02, local05
22a3c     FC 0C B0 FD | 	call	#_psdpoke
22a40     01 28 06 F1 | 	add	local02, #1
22a44     01 00 00 FF 
22a48     00 28 56 F2 | 	cmps	local02, ##512 wc
22a4c     94 FF 9F CD |  if_b	jmp	#LR__2641
22a50                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
22a50     00 28 06 F6 | 	mov	local02, #0
22a54                 | LR__2642
22a54     14 2F 02 F6 | 	mov	local05, local02
22a58     01 2E 66 F0 | 	shl	local05, #1
22a5c     0C 12 C6 F9 | 	decod	arg01, #12
22a60     17 13 02 F1 | 	add	arg01, local05
22a64     14 2F 02 F6 | 	mov	local05, local02
22a68     06 2E 66 F0 | 	shl	local05, #6
22a6c     14 2F 82 F1 | 	sub	local05, local02
22a70     C1 FF 7F FF 
22a74     00 14 06 F6 | 	mov	arg02, ##-32256
22a78     17 15 02 F1 | 	add	arg02, local05
22a7c     BC 0C B0 FD | 	call	#_psdpoke
22a80     01 28 06 F1 | 	add	local02, #1
22a84     02 00 00 FF 
22a88     00 28 56 F2 | 	cmps	local02, ##1024 wc
22a8c     C4 FF 9F CD |  if_b	jmp	#LR__2642
22a90                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
22a90     00 28 06 F6 | 	mov	local02, #0
22a94                 | LR__2643
22a94     14 2F 02 F6 | 	mov	local05, local02
22a98     01 2E 66 F0 | 	shl	local05, #1
22a9c     0C 00 00 FF 
22aa0     00 12 06 F6 | 	mov	arg01, ##6144
22aa4     17 13 02 F1 | 	add	arg01, local05
22aa8     C0 FF 7F FF 
22aac     A8 14 06 F6 | 	mov	arg02, ##-32600
22ab0     88 0C B0 FD | 	call	#_psdpoke
22ab4     01 28 06 F1 | 	add	local02, #1
22ab8     80 28 56 F2 | 	cmps	local02, #128 wc
22abc     D4 FF 9F CD |  if_b	jmp	#LR__2643
22ac0     80 28 06 F6 | 	mov	local02, #128
22ac4                 | LR__2644
22ac4     14 2F 02 F6 | 	mov	local05, local02
22ac8     01 2E 66 F0 | 	shl	local05, #1
22acc     0C 00 00 FF 
22ad0     00 12 06 F6 | 	mov	arg01, ##6144
22ad4     17 13 02 F1 | 	add	arg01, local05
22ad8     3F 00 00 FF 
22adc     58 15 06 F6 | 	mov	arg02, ##32600
22ae0     58 0C B0 FD | 	call	#_psdpoke
22ae4     01 28 06 F1 | 	add	local02, #1
22ae8     02 00 00 FF 
22aec     00 28 16 F2 | 	cmp	local02, ##1024 wc
22af0     D0 FF 9F CD |  if_b	jmp	#LR__2644
22af4                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
22af4     00 28 06 F6 | 	mov	local02, #0
22af8                 | LR__2645
22af8     14 2F 02 F6 | 	mov	local05, local02
22afc     01 2E 66 F0 | 	shl	local05, #1
22b00     0D 12 C6 F9 | 	decod	arg01, #13
22b04     17 13 02 F1 | 	add	arg01, local05
22b08     C0 FF 7F FF 
22b0c     A8 14 06 F6 | 	mov	arg02, ##-32600
22b10     28 0C B0 FD | 	call	#_psdpoke
22b14     01 28 06 F1 | 	add	local02, #1
22b18     01 00 00 FF 
22b1c     00 28 56 F2 | 	cmps	local02, ##512 wc
22b20     D4 FF 9F CD |  if_b	jmp	#LR__2645
22b24     09 28 C6 F9 | 	decod	local02, #9
22b28                 | LR__2646
22b28     14 2F 02 F6 | 	mov	local05, local02
22b2c     01 2E 66 F0 | 	shl	local05, #1
22b30     0D 12 C6 F9 | 	decod	arg01, #13
22b34     17 13 02 F1 | 	add	arg01, local05
22b38     3F 00 00 FF 
22b3c     58 15 06 F6 | 	mov	arg02, ##32600
22b40     F8 0B B0 FD | 	call	#_psdpoke
22b44     01 28 06 F1 | 	add	local02, #1
22b48     02 00 00 FF 
22b4c     00 28 16 F2 | 	cmp	local02, ##1024 wc
22b50     D4 FF 9F CD |  if_b	jmp	#LR__2646
22b54                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
22b54     00 28 06 F6 | 	mov	local02, #0
22b58                 | LR__2647
22b58     14 2F 02 F6 | 	mov	local05, local02
22b5c     01 2E 66 F0 | 	shl	local05, #1
22b60     14 00 00 FF 
22b64     00 12 06 F6 | 	mov	arg01, ##10240
22b68     17 13 02 F1 | 	add	arg01, local05
22b6c     C0 FF 7F FF 
22b70     A8 14 06 F6 | 	mov	arg02, ##-32600
22b74     C4 0B B0 FD | 	call	#_psdpoke
22b78     01 28 06 F1 | 	add	local02, #1
22b7c     00 29 56 F2 | 	cmps	local02, #256 wc
22b80     D4 FF 9F CD |  if_b	jmp	#LR__2647
22b84     00 29 06 F6 | 	mov	local02, #256
22b88                 | LR__2648
22b88     14 2F 02 F6 | 	mov	local05, local02
22b8c     01 2E 66 F0 | 	shl	local05, #1
22b90     14 00 00 FF 
22b94     00 12 06 F6 | 	mov	arg01, ##10240
22b98     17 13 02 F1 | 	add	arg01, local05
22b9c     3F 00 00 FF 
22ba0     58 15 06 F6 | 	mov	arg02, ##32600
22ba4     94 0B B0 FD | 	call	#_psdpoke
22ba8     01 28 06 F1 | 	add	local02, #1
22bac     02 00 00 FF 
22bb0     00 28 16 F2 | 	cmp	local02, ##1024 wc
22bb4     D0 FF 9F CD |  if_b	jmp	#LR__2648
22bb8                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
22bb8     18 00 00 FF 
22bbc     00 28 06 F6 | 	mov	local02, ##12288
22bc0                 | LR__2649
22bc0     14 13 02 F6 | 	mov	arg01, local02
22bc4     00 14 06 F6 | 	mov	arg02, #0
22bc8     28 0B B0 FD | 	call	#_pslpoke
22bcc     04 28 06 F1 | 	add	local02, #4
22bd0     77 00 00 FF 
22bd4     FD 29 56 F2 | 	cmps	local02, ##61437 wc
22bd8     E4 FF 9F CD |  if_b	jmp	#LR__2649
22bdc                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
22bdc     00 28 06 F6 | 	mov	local02, #0
22be0                 | LR__2650
22be0     14 2F 02 F6 | 	mov	local05, local02
22be4     01 2E 66 F0 | 	shl	local05, #1
22be8     78 00 00 FF 
22bec     00 2A 06 F6 | 	mov	local03, ##61440
22bf0     17 2B 02 F1 | 	add	local03, local05
22bf4     12 00 00 FF 
22bf8     BA EA 05 F1 | 	add	ptr__dat__, ##9402
22bfc     F5 12 02 F6 | 	mov	arg01, ptr__dat__
22c00     12 00 00 FF 
22c04     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
22c08     10 12 06 F1 | 	add	arg01, #16
22c0c     14 15 02 F6 | 	mov	arg02, local02
22c10     01 14 66 F0 | 	shl	arg02, #1
22c14     0A 13 02 F1 | 	add	arg01, arg02
22c18     09 15 E2 FA | 	rdword	arg02, arg01
22c1c     15 13 02 F6 | 	mov	arg01, local03
22c20     18 0B B0 FD | 	call	#_psdpoke
22c24     01 28 06 F1 | 	add	local02, #1
22c28     02 00 00 FF 
22c2c     00 28 56 F2 | 	cmps	local02, ##1024 wc
22c30     AC FF 9F CD |  if_b	jmp	#LR__2650
22c34                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
22c34     00 28 06 F6 | 	mov	local02, #0
22c38                 | LR__2651
22c38     14 2F 02 F6 | 	mov	local05, local02
22c3c     01 2E 66 F0 | 	shl	local05, #1
22c40     7C 00 00 FF 
22c44     00 2A 06 F6 | 	mov	local03, ##63488
22c48     17 2B 02 F1 | 	add	local03, local05
22c4c     0E 00 00 FF 
22c50     AA EA 05 F1 | 	add	ptr__dat__, ##7338
22c54     F5 12 02 F6 | 	mov	arg01, ptr__dat__
22c58     0E 00 00 FF 
22c5c     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
22c60     10 12 06 F1 | 	add	arg01, #16
22c64     14 15 02 F6 | 	mov	arg02, local02
22c68     01 14 66 F0 | 	shl	arg02, #1
22c6c     0A 13 02 F1 | 	add	arg01, arg02
22c70     09 15 E2 FA | 	rdword	arg02, arg01
22c74     15 13 02 F6 | 	mov	arg01, local03
22c78     C0 0A B0 FD | 	call	#_psdpoke
22c7c     01 28 06 F1 | 	add	local02, #1
22c80     02 00 00 FF 
22c84     00 28 56 F2 | 	cmps	local02, ##1024 wc
22c88     AC FF 9F CD |  if_b	jmp	#LR__2651
22c8c                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
22c8c     00 28 06 F6 | 	mov	local02, #0
22c90     0C 00 00 FF 
22c94     D8 E4 05 F1 | 	add	objptr, ##6360
22c98     97 18 48 FB | 	callpa	#(@LR__2653-@LR__2652)>>2,fcache_load_ptr_
22c9c                 | LR__2652
22c9c     14 2F 02 F6 | 	mov	local05, local02
22ca0     01 2E 66 F0 | 	shl	local05, #1
22ca4     F2 2E 02 F1 | 	add	local05, objptr
22ca8     14 2B 02 F6 | 	mov	local03, local02
22cac     08 2A 66 F0 | 	shl	local03, #8
22cb0     7F 00 00 FF 
22cb4     00 31 06 F6 | 	mov	local06, ##65280
22cb8     15 31 82 F1 | 	sub	local06, local03
22cbc     17 31 52 FC | 	wrword	local06, local05
22cc0     01 28 06 F1 | 	add	local02, #1
22cc4     00 29 56 F2 | 	cmps	local02, #256 wc
22cc8     D0 FF 9F CD |  if_b	jmp	#LR__2652
22ccc                 | LR__2653
22ccc     0C 00 00 FF 
22cd0     D8 E4 85 F1 | 	sub	objptr, ##6360
22cd4                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
22cd4     00 28 06 F6 | 	mov	local02, #0
22cd8                 | LR__2654
22cd8     14 2F 02 F6 | 	mov	local05, local02
22cdc     01 2E 66 F0 | 	shl	local05, #1
22ce0     0D 00 00 FF 
22ce4     D8 E4 05 F1 | 	add	objptr, ##6872
22ce8     F2 2E 02 F1 | 	add	local05, objptr
22cec     80 BF 23 FF 
22cf0     00 12 06 F6 | 	mov	arg01, ##1199505408
22cf4     13 15 02 F6 | 	mov	arg02, local01
22cf8     0D 00 00 FF 
22cfc     D8 E4 85 F1 | 	sub	objptr, ##6872
22d00     E4 70 B0 FD | 	call	#__system___float_mul
22d04     FD 12 02 F6 | 	mov	arg01, result1
22d08     01 14 06 F6 | 	mov	arg02, #1
22d0c     A0 75 B0 FD | 	call	#__system___float_tointeger
22d10     17 FB 51 FC | 	wrword	result1, local05
22d14     13 13 02 F6 | 	mov	arg01, local01
22d18     CC BC 1F FF 
22d1c     9A 15 06 F6 | 	mov	arg02, ##1064933786
22d20     C4 70 B0 FD | 	call	#__system___float_mul
22d24     FD 26 02 F6 | 	mov	local01, result1
22d28     01 28 06 F1 | 	add	local02, #1
22d2c     00 29 56 F2 | 	cmps	local02, #256 wc
22d30     A4 FF 9F CD |  if_b	jmp	#LR__2654
22d34     0E 00 00 FF 
22d38     D6 E4 05 F1 | 	add	objptr, ##7382
22d3c     F2 00 58 FC | 	wrword	#0, objptr
22d40                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
22d40     00 28 06 F6 | 	mov	local02, #0
22d44     02 E4 05 F1 | 	add	objptr, #2
22d48     97 10 48 FB | 	callpa	#(@LR__2656-@LR__2655)>>2,fcache_load_ptr_
22d4c                 | LR__2655
22d4c     14 2F 02 F6 | 	mov	local05, local02
22d50     01 2E 66 F0 | 	shl	local05, #1
22d54     F2 2E 02 F1 | 	add	local05, objptr
22d58     7F 00 80 FF 
22d5c     17 01 5A FC | 	wrword	##65280, local05
22d60     01 28 06 F1 | 	add	local02, #1
22d64     FF 28 56 F2 | 	cmps	local02, #255 wc
22d68     E0 FF 9F CD |  if_b	jmp	#LR__2655
22d6c                 | LR__2656
22d6c     FE E5 05 F1 | 	add	objptr, #510
22d70     F2 00 58 FC | 	wrword	#0, objptr
22d74                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
22d74     00 28 06 F6 | 	mov	local02, #0
22d78     02 E4 05 F1 | 	add	objptr, #2
22d7c     97 52 48 FB | 	callpa	#(@LR__2661-@LR__2657)>>2,fcache_load_ptr_
22d80                 | LR__2657
22d80     14 2F 02 F6 | 	mov	local05, local02
22d84     01 2E 66 F0 | 	shl	local05, #1
22d88     F2 2E 02 F1 | 	add	local05, objptr
22d8c     14 31 02 F6 | 	mov	local06, local02
22d90     0C 30 66 F0 | 	shl	local06, #12
22d94     17 31 52 FC | 	wrword	local06, local05
22d98     01 28 06 F1 | 	add	local02, #1
22d9c     10 28 56 F2 | 	cmps	local02, #16 wc
22da0     DC FF 9F CD |  if_b	jmp	#LR__2657
22da4                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
22da4     10 28 06 F6 | 	mov	local02, #16
22da8                 | LR__2658
22da8     14 2F 02 F6 | 	mov	local05, local02
22dac     01 2E 66 F0 | 	shl	local05, #1
22db0     F2 2E 02 F1 | 	add	local05, objptr
22db4     7F 00 80 FF 
22db8     17 01 5A FC | 	wrword	##65280, local05
22dbc     01 28 06 F1 | 	add	local02, #1
22dc0     F0 28 16 F2 | 	cmp	local02, #240 wc
22dc4     E0 FF 9F CD |  if_b	jmp	#LR__2658
22dc8                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
22dc8     F0 28 06 F6 | 	mov	local02, #240
22dcc                 | LR__2659
22dcc     14 2F 02 F6 | 	mov	local05, local02
22dd0     01 2E 66 F0 | 	shl	local05, #1
22dd4     F2 2E 02 F1 | 	add	local05, objptr
22dd8     FF 2A 06 F6 | 	mov	local03, #255
22ddc     14 2B 82 F1 | 	sub	local03, local02
22de0     0C 2A 66 F0 | 	shl	local03, #12
22de4     17 2B 52 FC | 	wrword	local03, local05
22de8     01 28 06 F1 | 	add	local02, #1
22dec     00 29 16 F2 | 	cmp	local02, #256 wc
22df0     D8 FF 9F CD |  if_b	jmp	#LR__2659
22df4                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
22df4     00 28 06 F6 | 	mov	local02, #0
22df8     01 00 00 FF 
22dfc     00 E4 05 F1 | 	add	objptr, ##512
22e00                 | LR__2660
22e00     14 2F 02 F6 | 	mov	local05, local02
22e04     01 2E 66 F0 | 	shl	local05, #1
22e08     F2 2E 02 F1 | 	add	local05, objptr
22e0c     14 31 02 F6 | 	mov	local06, local02
22e10     08 30 66 F0 | 	shl	local06, #8
22e14     17 31 52 FC | 	wrword	local06, local05
22e18     01 28 06 F1 | 	add	local02, #1
22e1c     00 29 56 F2 | 	cmps	local02, #256 wc
22e20     DC FF 9F CD |  if_b	jmp	#LR__2660
22e24                 | LR__2661
22e24     FE E5 05 F1 | 	add	objptr, #510
22e28     F2 00 58 FC | 	wrword	#0, objptr
22e2c                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
22e2c     00 28 06 F6 | 	mov	local02, #0
22e30     02 E4 05 F1 | 	add	objptr, #2
22e34     97 6A 48 FB | 	callpa	#(@LR__2666-@LR__2662)>>2,fcache_load_ptr_
22e38                 | LR__2662
22e38     14 2F 02 F6 | 	mov	local05, local02
22e3c     01 2E 66 F0 | 	shl	local05, #1
22e40     F2 2E 02 F1 | 	add	local05, objptr
22e44     14 31 02 F6 | 	mov	local06, local02
22e48     04 30 66 F0 | 	shl	local06, #4
22e4c     14 31 02 F1 | 	add	local06, local02
22e50     04 30 66 F0 | 	shl	local06, #4
22e54     17 31 52 FC | 	wrword	local06, local05
22e58     01 28 06 F1 | 	add	local02, #1
22e5c     F0 28 56 F2 | 	cmps	local02, #240 wc
22e60     D4 FF 9F CD |  if_b	jmp	#LR__2662
22e64     F0 28 06 F6 | 	mov	local02, #240
22e68                 | LR__2663
22e68     14 2F 02 F6 | 	mov	local05, local02
22e6c     01 2E 66 F0 | 	shl	local05, #1
22e70     F2 2E 02 F1 | 	add	local05, objptr
22e74     FF 2A 06 F6 | 	mov	local03, #255
22e78     14 2B 82 F1 | 	sub	local03, local02
22e7c     0C 2A 66 F0 | 	shl	local03, #12
22e80     17 2B 52 FC | 	wrword	local03, local05
22e84     01 28 06 F1 | 	add	local02, #1
22e88     00 29 16 F2 | 	cmp	local02, #256 wc
22e8c     D8 FF 9F CD |  if_b	jmp	#LR__2663
22e90                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
22e90     00 28 06 F6 | 	mov	local02, #0
22e94     01 00 00 FF 
22e98     00 E4 05 F1 | 	add	objptr, ##512
22e9c                 | LR__2664
22e9c     14 2F 02 F6 | 	mov	local05, local02
22ea0     01 2E 66 F0 | 	shl	local05, #1
22ea4     F2 2E 02 F1 | 	add	local05, objptr
22ea8     14 31 02 F6 | 	mov	local06, local02
22eac     09 30 66 F0 | 	shl	local06, #9
22eb0     17 31 52 FC | 	wrword	local06, local05
22eb4     FF 2E 06 F6 | 	mov	local05, #255
22eb8     14 2F 82 F1 | 	sub	local05, local02
22ebc     01 2E 66 F0 | 	shl	local05, #1
22ec0     F2 2E 02 F1 | 	add	local05, objptr
22ec4     14 31 02 F6 | 	mov	local06, local02
22ec8     09 30 66 F0 | 	shl	local06, #9
22ecc     17 31 52 FC | 	wrword	local06, local05
22ed0     01 28 06 F1 | 	add	local02, #1
22ed4     80 28 56 F2 | 	cmps	local02, #128 wc
22ed8     C0 FF 9F CD |  if_b	jmp	#LR__2664
22edc                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
22edc     00 28 06 F6 | 	mov	local02, #0
22ee0     01 00 00 FF 
22ee4     00 E4 05 F1 | 	add	objptr, ##512
22ee8                 | LR__2665
22ee8     14 2F 02 F6 | 	mov	local05, local02
22eec     01 2E 66 F0 | 	shl	local05, #1
22ef0     F2 2E 02 F1 | 	add	local05, objptr
22ef4     14 31 02 F6 | 	mov	local06, local02
22ef8     0D 30 66 F0 | 	shl	local06, #13
22efc     17 31 52 FC | 	wrword	local06, local05
22f00     01 28 06 F1 | 	add	local02, #1
22f04     08 28 56 F2 | 	cmps	local02, #8 wc
22f08     DC FF 9F CD |  if_b	jmp	#LR__2665
22f0c                 | LR__2666
22f0c                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
22f0c     08 28 06 F6 | 	mov	local02, #8
22f10     97 42 48 FB | 	callpa	#(@LR__2670-@LR__2667)>>2,fcache_load_ptr_
22f14                 | LR__2667
22f14     14 2F 02 F6 | 	mov	local05, local02
22f18     01 2E 66 F0 | 	shl	local05, #1
22f1c     F2 2E 02 F1 | 	add	local05, objptr
22f20     14 27 02 F6 | 	mov	local01, local02
22f24     08 26 86 F1 | 	sub	local01, #8
22f28     0B 26 66 F0 | 	shl	local01, #11
22f2c     7F 00 00 FF 
22f30     00 31 06 F6 | 	mov	local06, ##65280
22f34     13 31 82 F1 | 	sub	local06, local01
22f38     17 31 52 FC | 	wrword	local06, local05
22f3c     01 28 06 F1 | 	add	local02, #1
22f40     18 28 16 F2 | 	cmp	local02, #24 wc
22f44     CC FF 9F CD |  if_b	jmp	#LR__2667
22f48                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
22f48     18 28 06 F6 | 	mov	local02, #24
22f4c                 | LR__2668
22f4c     14 2F 02 F6 | 	mov	local05, local02
22f50     01 2E 66 F0 | 	shl	local05, #1
22f54     F2 2E 02 F1 | 	add	local05, objptr
22f58     40 00 80 FF 
22f5c     17 01 58 FC | 	wrword	##32768, local05
22f60     01 28 06 F1 | 	add	local02, #1
22f64     81 28 16 F2 | 	cmp	local02, #129 wc
22f68     E0 FF 9F CD |  if_b	jmp	#LR__2668
22f6c                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
22f6c     81 28 06 F6 | 	mov	local02, #129
22f70                 | LR__2669
22f70     14 2F 02 F6 | 	mov	local05, local02
22f74     01 2E 66 F0 | 	shl	local05, #1
22f78     F2 2E 02 F1 | 	add	local05, objptr
22f7c     FF 2A 06 F6 | 	mov	local03, #255
22f80     14 2B 82 F1 | 	sub	local03, local02
22f84     08 2A 66 F0 | 	shl	local03, #8
22f88     17 2B 52 FC | 	wrword	local03, local05
22f8c     01 28 06 F1 | 	add	local02, #1
22f90     00 29 16 F2 | 	cmp	local02, #256 wc
22f94     D8 FF 9F CD |  if_b	jmp	#LR__2669
22f98                 | LR__2670
22f98     3E 00 00 FF 
22f9c     EA E5 05 F1 | 	add	objptr, ##32234
22fa0     F2 00 59 FC | 	wrword	#128, objptr
22fa4     52 00 00 FF 
22fa8     C2 E4 85 F1 | 	sub	objptr, ##42178
22fac                 | ' for i=0 to 7
22fac     00 28 06 F6 | 	mov	local02, #0
22fb0     97 8E 48 FB | 	callpa	#(@LR__2672-@LR__2671)>>2,fcache_load_ptr_
22fb4                 | LR__2671
22fb4     14 2F 02 F6 | 	mov	local05, local02
22fb8     01 2E 66 F0 | 	shl	local05, #1
22fbc     14 2F 02 F1 | 	add	local05, local02
22fc0     03 2E 66 F0 | 	shl	local05, #3
22fc4     14 00 00 FF 
22fc8     38 E5 05 F1 | 	add	objptr, ##10552
22fcc     F2 2E 02 F1 | 	add	local05, objptr
22fd0     00 EE A1 FF 
22fd4     17 01 68 FC | 	wrlong	##1138491392, local05
22fd8     14 2F 02 F6 | 	mov	local05, local02
22fdc     01 2E 66 F0 | 	shl	local05, #1
22fe0     14 2F 02 F1 | 	add	local05, local02
22fe4     03 2E 66 F0 | 	shl	local05, #3
22fe8     F2 2E 02 F1 | 	add	local05, objptr
22fec     04 2E 06 F1 | 	add	local05, #4
22ff0     17 29 42 FC | 	wrbyte	local02, local05
22ff4     14 2F 02 F6 | 	mov	local05, local02
22ff8     01 2E 66 F0 | 	shl	local05, #1
22ffc     14 2F 02 F1 | 	add	local05, local02
23000     03 2E 66 F0 | 	shl	local05, #3
23004     F2 2E 02 F1 | 	add	local05, objptr
23008     05 2E 06 F1 | 	add	local05, #5
2300c     17 29 42 FC | 	wrbyte	local02, local05
23010     14 2F 02 F6 | 	mov	local05, local02
23014     01 2E 66 F0 | 	shl	local05, #1
23018     14 2F 02 F1 | 	add	local05, local02
2301c     03 2E 66 F0 | 	shl	local05, #3
23020     F2 2E 02 F1 | 	add	local05, objptr
23024     06 2E 06 F1 | 	add	local05, #6
23028     17 01 58 FC | 	wrword	#0, local05
2302c     14 2F 02 F6 | 	mov	local05, local02
23030     01 2E 66 F0 | 	shl	local05, #1
23034     14 2F 02 F1 | 	add	local05, local02
23038     03 2E 66 F0 | 	shl	local05, #3
2303c     F2 2E 02 F1 | 	add	local05, objptr
23040     08 2E 06 F1 | 	add	local05, #8
23044     00 C0 9F FF 
23048     17 01 68 FC | 	wrlong	##1065353216, local05
2304c     14 2F 02 F6 | 	mov	local05, local02
23050     01 2E 66 F0 | 	shl	local05, #1
23054     14 2F 02 F1 | 	add	local05, local02
23058     03 2E 66 F0 | 	shl	local05, #3
2305c     F2 2E 02 F1 | 	add	local05, objptr
23060     0C 2E 06 F1 | 	add	local05, #12
23064     00 40 A0 FF 
23068     17 01 68 FC | 	wrlong	##1082130432, local05
2306c     14 2F 02 F6 | 	mov	local05, local02
23070     01 2E 66 F0 | 	shl	local05, #1
23074     14 2F 02 F1 | 	add	local05, local02
23078     03 2E 66 F0 | 	shl	local05, #3
2307c     F2 2E 02 F1 | 	add	local05, objptr
23080     10 2E 06 F1 | 	add	local05, #16
23084     17 01 68 FC | 	wrlong	#0, local05
23088     14 2F 02 F6 | 	mov	local05, local02
2308c     01 2E 66 F0 | 	shl	local05, #1
23090     14 2F 02 F1 | 	add	local05, local02
23094     03 2E 66 F0 | 	shl	local05, #3
23098     F2 2E 02 F1 | 	add	local05, objptr
2309c     14 2E 06 F1 | 	add	local05, #20
230a0     17 FF 59 FC | 	wrword	#255, local05
230a4     14 2F 02 F6 | 	mov	local05, local02
230a8     01 2E 66 F0 | 	shl	local05, #1
230ac     3D 00 00 FF 
230b0     7C E5 05 F1 | 	add	objptr, ##31612
230b4     F2 2E 02 F1 | 	add	local05, objptr
230b8     17 FF 59 FC | 	wrword	#255, local05
230bc     01 28 06 F1 | 	add	local02, #1
230c0     08 28 56 F2 | 	cmps	local02, #8 wc
230c4     52 00 00 FF 
230c8     B4 E4 85 F1 | 	sub	objptr, ##42164
230cc     E4 FE 9F CD |  if_b	jmp	#LR__2671
230d0                 | LR__2672
230d0     00 6E 20 FF 
230d4     00 30 06 F6 | 	mov	local06, ##1088159744
230d8                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
230d8     03 2E 06 F6 | 	mov	local05, #3
230dc                 | LR__2673
230dc     18 13 02 F6 | 	mov	arg01, local06
230e0     CE C3 1F FF 
230e4     7D 14 06 F6 | 	mov	arg02, ##1065852029
230e8     FC 6C B0 FD | 	call	#__system___float_mul
230ec     FD 30 02 F6 | 	mov	local06, result1
230f0     FA 2F 6E FB | 	djnz	local05, #LR__2673
230f4     00 28 06 F6 | 	mov	local02, #0
230f8                 | LR__2674
230f8     14 2D 02 F6 | 	mov	local04, local02
230fc     02 2C 66 F0 | 	shl	local04, #2
23100     14 00 00 FF 
23104     D8 E4 05 F1 | 	add	objptr, ##10456
23108     F2 2C 02 F1 | 	add	local04, objptr
2310c     16 31 62 FC | 	wrlong	local06, local04
23110     18 13 02 F6 | 	mov	arg01, local06
23114     CE C3 1F FF 
23118     7D 14 06 F6 | 	mov	arg02, ##1065852029
2311c     14 00 00 FF 
23120     D8 E4 85 F1 | 	sub	objptr, ##10456
23124     C0 6C B0 FD | 	call	#__system___float_mul
23128     FD 30 02 F6 | 	mov	local06, result1
2312c     01 28 06 F1 | 	add	local02, #1
23130     0C 28 56 F2 | 	cmps	local02, #12 wc
23134     C0 FF 9F CD |  if_b	jmp	#LR__2674
23138     14 00 00 FF 
2313c     08 E5 05 F1 | 	add	objptr, ##10504
23140     F2 50 6B FC | 	wrlong	#424, objptr
23144     04 E4 05 F1 | 	add	objptr, #4
23148     F2 20 6B FC | 	wrlong	#400, objptr
2314c     04 E4 05 F1 | 	add	objptr, #4
23150     F2 F2 6A FC | 	wrlong	#377, objptr
23154     04 E4 05 F1 | 	add	objptr, #4
23158     F2 C8 6A FC | 	wrlong	#356, objptr
2315c     04 E4 05 F1 | 	add	objptr, #4
23160     F2 A0 6A FC | 	wrlong	#336, objptr
23164     04 E4 05 F1 | 	add	objptr, #4
23168     F2 7A 6A FC | 	wrlong	#317, objptr
2316c     04 E4 05 F1 | 	add	objptr, #4
23170     F2 58 6A FC | 	wrlong	#300, objptr
23174     04 E4 05 F1 | 	add	objptr, #4
23178     F2 36 6A FC | 	wrlong	#283, objptr
2317c     04 E4 05 F1 | 	add	objptr, #4
23180     F2 16 6A FC | 	wrlong	#267, objptr
23184     04 E4 05 F1 | 	add	objptr, #4
23188     F2 F8 69 FC | 	wrlong	#252, objptr
2318c     04 E4 05 F1 | 	add	objptr, #4
23190     F2 DC 69 FC | 	wrlong	#238, objptr
23194     04 E4 05 F1 | 	add	objptr, #4
23198     F2 C0 69 FC | 	wrlong	#224, objptr
2319c     3D 00 00 FF 
231a0     8E E5 05 F1 | 	add	objptr, ##31630
231a4     F2 00 59 FC | 	wrword	#128, objptr
231a8     02 E4 85 F1 | 	sub	objptr, #2
231ac     F2 00 59 FC | 	wrword	#128, objptr
231b0     52 00 00 FF 
231b4     C0 E4 85 F1 | 	sub	objptr, ##42176
231b8     A7 F0 03 F6 | 	mov	ptra, fp
231bc     B2 00 A0 FD | 	call	#popregs_
231c0                 | _init_audio_ret
231c0     2D 00 64 FD | 	ret
231c4                 | 
231c4                 | ' 
231c4                 | ' '------------------- Error messages
231c4                 | ' 
231c4                 | ' sub init_error_strings
231c4                 | _init_error_strings
231c4     BB 01 00 FF 
231c8     9C 00 06 F6 | 	mov	_var01, ##@LR__6020
231cc     45 00 00 FF 
231d0     7C E4 05 F1 | 	add	objptr, ##35452
231d4     F2 00 62 FC | 	wrlong	_var01, objptr
231d8     BB 01 00 FF 
231dc     9D 00 06 F6 | 	mov	_var01, ##@LR__6021
231e0     04 E4 05 F1 | 	add	objptr, #4
231e4     F2 00 62 FC | 	wrlong	_var01, objptr
231e8     BB 01 00 FF 
231ec     C1 00 06 F6 | 	mov	_var01, ##@LR__6022
231f0     04 E4 05 F1 | 	add	objptr, #4
231f4     F2 00 62 FC | 	wrlong	_var01, objptr
231f8     BB 01 00 FF 
231fc     E1 00 06 F6 | 	mov	_var01, ##@LR__6023
23200     04 E4 05 F1 | 	add	objptr, #4
23204     F2 00 62 FC | 	wrlong	_var01, objptr
23208     BB 01 00 FF 
2320c     FA 00 06 F6 | 	mov	_var01, ##@LR__6024
23210     04 E4 05 F1 | 	add	objptr, #4
23214     F2 00 62 FC | 	wrlong	_var01, objptr
23218     BB 01 00 FF 
2321c     15 01 06 F6 | 	mov	_var01, ##@LR__6025
23220     04 E4 05 F1 | 	add	objptr, #4
23224     F2 00 62 FC | 	wrlong	_var01, objptr
23228     BB 01 00 FF 
2322c     36 01 06 F6 | 	mov	_var01, ##@LR__6026
23230     04 E4 05 F1 | 	add	objptr, #4
23234     F2 00 62 FC | 	wrlong	_var01, objptr
23238     BB 01 00 FF 
2323c     63 01 06 F6 | 	mov	_var01, ##@LR__6027
23240     04 E4 05 F1 | 	add	objptr, #4
23244     F2 00 62 FC | 	wrlong	_var01, objptr
23248     BB 01 00 FF 
2324c     8D 01 06 F6 | 	mov	_var01, ##@LR__6028
23250     04 E4 05 F1 | 	add	objptr, #4
23254     F2 00 62 FC | 	wrlong	_var01, objptr
23258     BB 01 00 FF 
2325c     A5 01 06 F6 | 	mov	_var01, ##@LR__6029
23260     04 E4 05 F1 | 	add	objptr, #4
23264     F2 00 62 FC | 	wrlong	_var01, objptr
23268     BB 01 00 FF 
2326c     C5 01 06 F6 | 	mov	_var01, ##@LR__6030
23270     04 E4 05 F1 | 	add	objptr, #4
23274     F2 00 62 FC | 	wrlong	_var01, objptr
23278     BB 01 00 FF 
2327c     DB 01 06 F6 | 	mov	_var01, ##@LR__6031
23280     04 E4 05 F1 | 	add	objptr, #4
23284     F2 00 62 FC | 	wrlong	_var01, objptr
23288     BB 01 00 FF 
2328c     F8 01 06 F6 | 	mov	_var01, ##@LR__6032
23290     04 E4 05 F1 | 	add	objptr, #4
23294     F2 00 62 FC | 	wrlong	_var01, objptr
23298     BC 01 00 FF 
2329c     1B 00 06 F6 | 	mov	_var01, ##@LR__6033
232a0     04 E4 05 F1 | 	add	objptr, #4
232a4     F2 00 62 FC | 	wrlong	_var01, objptr
232a8     BC 01 00 FF 
232ac     41 00 06 F6 | 	mov	_var01, ##@LR__6034
232b0     04 E4 05 F1 | 	add	objptr, #4
232b4     F2 00 62 FC | 	wrlong	_var01, objptr
232b8     BC 01 00 FF 
232bc     5C 00 06 F6 | 	mov	_var01, ##@LR__6035
232c0     04 E4 05 F1 | 	add	objptr, #4
232c4     F2 00 62 FC | 	wrlong	_var01, objptr
232c8     BC 01 00 FF 
232cc     6C 00 06 F6 | 	mov	_var01, ##@LR__6036
232d0     04 E4 05 F1 | 	add	objptr, #4
232d4     F2 00 62 FC | 	wrlong	_var01, objptr
232d8     BC 01 00 FF 
232dc     7B 00 06 F6 | 	mov	_var01, ##@LR__6037
232e0     04 E4 05 F1 | 	add	objptr, #4
232e4     F2 00 62 FC | 	wrlong	_var01, objptr
232e8     BC 01 00 FF 
232ec     95 00 06 F6 | 	mov	_var01, ##@LR__6038
232f0     04 E4 05 F1 | 	add	objptr, #4
232f4     F2 00 62 FC | 	wrlong	_var01, objptr
232f8     BC 01 00 FF 
232fc     A6 00 06 F6 | 	mov	_var01, ##@LR__6039
23300     04 E4 05 F1 | 	add	objptr, #4
23304     F2 00 62 FC | 	wrlong	_var01, objptr
23308     BC 01 00 FF 
2330c     BD 00 06 F6 | 	mov	_var01, ##@LR__6040
23310     04 E4 05 F1 | 	add	objptr, #4
23314     F2 00 62 FC | 	wrlong	_var01, objptr
23318     BC 01 00 FF 
2331c     D0 00 06 F6 | 	mov	_var01, ##@LR__6041
23320     04 E4 05 F1 | 	add	objptr, #4
23324     F2 00 62 FC | 	wrlong	_var01, objptr
23328     BC 01 00 FF 
2332c     DF 00 06 F6 | 	mov	_var01, ##@LR__6042
23330     04 E4 05 F1 | 	add	objptr, #4
23334     F2 00 62 FC | 	wrlong	_var01, objptr
23338     BC 01 00 FF 
2333c     FB 00 06 F6 | 	mov	_var01, ##@LR__6043
23340     04 E4 05 F1 | 	add	objptr, #4
23344     F2 00 62 FC | 	wrlong	_var01, objptr
23348     BC 01 00 FF 
2334c     0B 01 06 F6 | 	mov	_var01, ##@LR__6044
23350     04 E4 05 F1 | 	add	objptr, #4
23354     F2 00 62 FC | 	wrlong	_var01, objptr
23358     BC 01 00 FF 
2335c     1B 01 06 F6 | 	mov	_var01, ##@LR__6045
23360     04 E4 05 F1 | 	add	objptr, #4
23364     F2 00 62 FC | 	wrlong	_var01, objptr
23368     BC 01 00 FF 
2336c     4E 01 06 F6 | 	mov	_var01, ##@LR__6046
23370     04 E4 05 F1 | 	add	objptr, #4
23374     F2 00 62 FC | 	wrlong	_var01, objptr
23378     BC 01 00 FF 
2337c     69 01 06 F6 | 	mov	_var01, ##@LR__6047
23380     04 E4 05 F1 | 	add	objptr, #4
23384     F2 00 62 FC | 	wrlong	_var01, objptr
23388     BC 01 00 FF 
2338c     7E 01 06 F6 | 	mov	_var01, ##@LR__6048
23390     04 E4 05 F1 | 	add	objptr, #4
23394     F2 00 62 FC | 	wrlong	_var01, objptr
23398     BC 01 00 FF 
2339c     8A 01 06 F6 | 	mov	_var01, ##@LR__6049
233a0     04 E4 05 F1 | 	add	objptr, #4
233a4     F2 00 62 FC | 	wrlong	_var01, objptr
233a8     BC 01 00 FF 
233ac     9B 01 06 F6 | 	mov	_var01, ##@LR__6050
233b0     04 E4 05 F1 | 	add	objptr, #4
233b4     F2 00 62 FC | 	wrlong	_var01, objptr
233b8     BC 01 00 FF 
233bc     AB 01 06 F6 | 	mov	_var01, ##@LR__6051
233c0     04 E4 05 F1 | 	add	objptr, #4
233c4     F2 00 62 FC | 	wrlong	_var01, objptr
233c8     BC 01 00 FF 
233cc     C6 01 06 F6 | 	mov	_var01, ##@LR__6052
233d0     04 E4 05 F1 | 	add	objptr, #4
233d4     F2 00 62 FC | 	wrlong	_var01, objptr
233d8     BC 01 00 FF 
233dc     D6 01 06 F6 | 	mov	_var01, ##@LR__6053
233e0     04 E4 05 F1 | 	add	objptr, #4
233e4     F2 00 62 FC | 	wrlong	_var01, objptr
233e8     BC 01 00 FF 
233ec     E4 01 06 F6 | 	mov	_var01, ##@LR__6054
233f0     04 E4 05 F1 | 	add	objptr, #4
233f4     F2 00 62 FC | 	wrlong	_var01, objptr
233f8     BC 01 00 FF 
233fc     FE 01 06 F6 | 	mov	_var01, ##@LR__6055
23400     04 E4 05 F1 | 	add	objptr, #4
23404     F2 00 62 FC | 	wrlong	_var01, objptr
23408     BD 01 00 FF 
2340c     31 00 06 F6 | 	mov	_var01, ##@LR__6056
23410     04 E4 05 F1 | 	add	objptr, #4
23414     F2 00 62 FC | 	wrlong	_var01, objptr
23418     BD 01 00 FF 
2341c     49 00 06 F6 | 	mov	_var01, ##@LR__6057
23420     04 E4 05 F1 | 	add	objptr, #4
23424     F2 00 62 FC | 	wrlong	_var01, objptr
23428     BD 01 00 FF 
2342c     64 00 06 F6 | 	mov	_var01, ##@LR__6058
23430     04 E4 05 F1 | 	add	objptr, #4
23434     F2 00 62 FC | 	wrlong	_var01, objptr
23438     BD 01 00 FF 
2343c     81 00 06 F6 | 	mov	_var01, ##@LR__6059
23440     04 E4 05 F1 | 	add	objptr, #4
23444     F2 00 62 FC | 	wrlong	_var01, objptr
23448     BD 01 00 FF 
2344c     9A 00 06 F6 | 	mov	_var01, ##@LR__6060
23450     04 E4 05 F1 | 	add	objptr, #4
23454     F2 00 62 FC | 	wrlong	_var01, objptr
23458     BD 01 00 FF 
2345c     B9 00 06 F6 | 	mov	_var01, ##@LR__6061
23460     04 E4 05 F1 | 	add	objptr, #4
23464     F2 00 62 FC | 	wrlong	_var01, objptr
23468     BD 01 00 FF 
2346c     C7 00 06 F6 | 	mov	_var01, ##@LR__6062
23470     04 E4 05 F1 | 	add	objptr, #4
23474     F2 00 62 FC | 	wrlong	_var01, objptr
23478     BD 01 00 FF 
2347c     F4 00 06 F6 | 	mov	_var01, ##@LR__6063
23480     04 E4 05 F1 | 	add	objptr, #4
23484     F2 00 62 FC | 	wrlong	_var01, objptr
23488     BD 01 00 FF 
2348c     01 01 06 F6 | 	mov	_var01, ##@LR__6064
23490     04 E4 05 F1 | 	add	objptr, #4
23494     F2 00 62 FC | 	wrlong	_var01, objptr
23498     BD 01 00 FF 
2349c     15 01 06 F6 | 	mov	_var01, ##@LR__6065
234a0     04 E4 05 F1 | 	add	objptr, #4
234a4     F2 00 62 FC | 	wrlong	_var01, objptr
234a8     BD 01 00 FF 
234ac     39 01 06 F6 | 	mov	_var01, ##@LR__6066
234b0     04 E4 05 F1 | 	add	objptr, #4
234b4     F2 00 62 FC | 	wrlong	_var01, objptr
234b8     BD 01 00 FF 
234bc     50 01 06 F6 | 	mov	_var01, ##@LR__6067
234c0     04 E4 05 F1 | 	add	objptr, #4
234c4     F2 00 62 FC | 	wrlong	_var01, objptr
234c8     BD 01 00 FF 
234cc     63 01 06 F6 | 	mov	_var01, ##@LR__6068
234d0     04 E4 05 F1 | 	add	objptr, #4
234d4     F2 00 62 FC | 	wrlong	_var01, objptr
234d8     BD 01 00 FF 
234dc     7A 01 06 F6 | 	mov	_var01, ##@LR__6069
234e0     04 E4 05 F1 | 	add	objptr, #4
234e4     F2 00 62 FC | 	wrlong	_var01, objptr
234e8     BD 01 00 FF 
234ec     93 01 06 F6 | 	mov	_var01, ##@LR__6070
234f0     04 E4 05 F1 | 	add	objptr, #4
234f4     F2 00 62 FC | 	wrlong	_var01, objptr
234f8     BD 01 00 FF 
234fc     B5 01 06 F6 | 	mov	_var01, ##@LR__6071
23500     04 E4 05 F1 | 	add	objptr, #4
23504     F2 00 62 FC | 	wrlong	_var01, objptr
23508     BD 01 00 FF 
2350c     C8 01 06 F6 | 	mov	_var01, ##@LR__6072
23510     04 E4 05 F1 | 	add	objptr, #4
23514     F2 00 62 FC | 	wrlong	_var01, objptr
23518     BD 01 00 FF 
2351c     D8 01 06 F6 | 	mov	_var01, ##@LR__6073
23520     04 E4 05 F1 | 	add	objptr, #4
23524     F2 00 62 FC | 	wrlong	_var01, objptr
23528     BD 01 00 FF 
2352c     F0 01 06 F6 | 	mov	_var01, ##@LR__6074
23530     04 E4 05 F1 | 	add	objptr, #4
23534     F2 00 62 FC | 	wrlong	_var01, objptr
23538     BE 01 00 FF 
2353c     07 00 06 F6 | 	mov	_var01, ##@LR__6075
23540     04 E4 05 F1 | 	add	objptr, #4
23544     F2 00 62 FC | 	wrlong	_var01, objptr
23548     45 00 00 FF 
2354c     58 E5 85 F1 | 	sub	objptr, ##35672
23550                 | _init_error_strings_ret
23550     2D 00 64 FD | 	ret
23554                 | 
23554                 | '         
23554                 | ' sub printerror(err as integer, linenum=0 as integer)
23554                 | _printerror
23554     02 4A 05 F6 | 	mov	COUNT_, #2
23558     A8 00 A0 FD | 	call	#pushregs_
2355c     09 27 02 F6 | 	mov	local01, arg01
23560     0A 29 02 F6 | 	mov	local02, arg02
23564     BE 01 00 FF 
23568     14 12 06 F6 | 	mov	arg01, ##@LR__6076
2356c     3C 21 B0 FD | 	call	#_hg010b_spin2_write
23570     13 13 02 F6 | 	mov	arg01, local01
23574     D8 26 B0 FD | 	call	#_hg010b_spin2_inttostr
23578     FD 12 02 F6 | 	mov	arg01, result1
2357c     2C 21 B0 FD | 	call	#_hg010b_spin2_write
23580     BE 01 00 FF 
23584     1B 12 06 F6 | 	mov	arg01, ##@LR__6077
23588     20 21 B0 FD | 	call	#_hg010b_spin2_write
2358c     02 26 66 F0 | 	shl	local01, #2
23590     45 00 00 FF 
23594     7C E4 05 F1 | 	add	objptr, ##35452
23598     F2 26 02 F1 | 	add	local01, objptr
2359c     13 13 02 FB | 	rdlong	arg01, local01
235a0     45 00 00 FF 
235a4     7C E4 85 F1 | 	sub	objptr, ##35452
235a8     00 21 B0 FD | 	call	#_hg010b_spin2_write
235ac                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
235ac                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
235ac     01 28 56 F2 | 	cmps	local02, #1 wc
235b0     24 00 90 CD |  if_b	jmp	#LR__2680
235b4     BE 01 00 FF 
235b8     1F 12 06 F6 | 	mov	arg01, ##@LR__6078
235bc     EC 20 B0 FD | 	call	#_hg010b_spin2_write
235c0     14 13 02 F6 | 	mov	arg01, local02
235c4     88 26 B0 FD | 	call	#_hg010b_spin2_inttostr
235c8     FD 12 02 F6 | 	mov	arg01, result1
235cc                 | ' 
235cc                 | ' write(text)
235cc     DC 20 B0 FD | 	call	#_hg010b_spin2_write
235d0                 | ' crlf
235d0     D8 25 B0 FD | 	call	#_hg010b_spin2_crlf
235d4     10 00 90 FD | 	jmp	#LR__2681
235d8                 | LR__2680
235d8     BE 01 00 FF 
235dc     29 12 06 F6 | 	mov	arg01, ##@LR__6079
235e0                 | ' 
235e0                 | ' write(text)
235e0     C8 20 B0 FD | 	call	#_hg010b_spin2_write
235e4                 | ' crlf
235e4     C4 25 B0 FD | 	call	#_hg010b_spin2_crlf
235e8                 | LR__2681
235e8     A7 F0 03 F6 | 	mov	ptra, fp
235ec     B2 00 A0 FD | 	call	#popregs_
235f0                 | _printerror_ret
235f0     2D 00 64 FD | 	ret
235f4                 | 
235f4                 | ' 
235f4                 | ' '' ------------------------------- Hardware start/stop/initialization 
235f4                 | ' 
235f4                 | ' sub startpsram
235f4                 | _startpsram
235f4     00 12 06 F6 | 	mov	arg01, #0
235f8     0A 14 C6 F9 | 	decod	arg02, #10
235fc     0B 16 06 F6 | 	mov	arg03, #11
23600     07 18 06 F6 | 	mov	arg04, #7
23604     0B 00 00 FF 
23608     CC E4 05 F1 | 	add	objptr, ##5836
2360c     AC 2A B0 FD | 	call	#_psram_spin2_startx
23610     2B 00 00 FF 
23614     3C E5 05 F1 | 	add	objptr, ##22332
23618     F2 FA 61 FC | 	wrlong	result1, objptr
2361c                 | '     return $7FF00 + cog*12
2361c     0C E4 05 F1 | 	add	objptr, #12
23620     FF 03 80 FF 
23624     F2 00 6A FC | 	wrlong	##524032, objptr
23628     37 00 00 FF 
2362c     14 E4 85 F1 | 	sub	objptr, ##28180
23630                 | _startpsram_ret
23630     2D 00 64 FD | 	ret
23634                 | 
23634                 | ' 
23634                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
23634                 | _startvideo
23634     01 4A 05 F6 | 	mov	COUNT_, #1
23638     A8 00 A0 FD | 	call	#pushregs_
2363c     37 00 00 FF 
23640     14 E4 05 F1 | 	add	objptr, ##28180
23644     F2 18 02 FB | 	rdlong	arg04, objptr
23648     37 00 00 FF 
2364c     14 E4 85 F1 | 	sub	objptr, ##28180
23650     0A 13 02 F6 | 	mov	arg01, arg02
23654     0C 15 02 F6 | 	mov	arg02, arg04
23658     18 08 B0 FD | 	call	#_hg010b_spin2_start
2365c     37 00 00 FF 
23660     00 E4 05 F1 | 	add	objptr, ##28160
23664     F2 FA 61 FC | 	wrlong	result1, objptr
23668                 | ' 
23668                 | ' videocog=v.start(pin,mbox)
23668                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
23668     00 26 06 F6 | 	mov	local01, #0
2366c     2B 00 00 FF 
23670     34 E5 85 F1 | 	sub	objptr, ##22324
23674                 | LR__2690
23674     13 13 02 F6 | 	mov	arg01, local01
23678     00 28 00 FF 
2367c     00 14 06 F6 | 	mov	arg02, ##5242880
23680     90 2E B0 FD | 	call	#_psram_spin2_setQos
23684     01 26 06 F1 | 	add	local01, #1
23688     08 26 56 F2 | 	cmps	local01, #8 wc
2368c     E4 FF 9F CD |  if_b	jmp	#LR__2690
23690     2B 00 00 FF 
23694     34 E5 05 F1 | 	add	objptr, ##22324
23698     F2 12 02 FB | 	rdlong	arg01, objptr
2369c     7A 00 02 FF 
236a0     00 14 06 F6 | 	mov	arg02, ##67171328
236a4     2B 00 00 FF 
236a8     34 E5 85 F1 | 	sub	objptr, ##22324
236ac     64 2E B0 FD | 	call	#_psram_spin2_setQos
236b0     0B 00 00 FF 
236b4     CC E4 85 F1 | 	sub	objptr, ##5836
236b8                 | ' psram.setQoS(videocog, $0400f400) 
236b8                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
236b8     F2 14 02 F6 | 	mov	arg02, objptr
236bc     00 28 05 FF 
236c0     00 14 46 F5 | 	or	arg02, ##173015040
236c4     00 16 06 F6 | 	mov	arg03, #0
236c8     00 18 06 F6 | 	mov	arg04, #0
236cc     00 12 06 F6 | 	mov	arg01, #0
236d0     44 43 B0 FD | 	call	#__system___basic_open
236d4                 | ' return videocog
236d4     37 00 00 FF 
236d8     00 E4 05 F1 | 	add	objptr, ##28160
236dc     F2 FA 01 FB | 	rdlong	result1, objptr
236e0     37 00 00 FF 
236e4     00 E4 85 F1 | 	sub	objptr, ##28160
236e8     A7 F0 03 F6 | 	mov	ptra, fp
236ec     B2 00 A0 FD | 	call	#popregs_
236f0                 | _startvideo_ret
236f0     2D 00 64 FD | 	ret
236f4                 | 
236f4                 | ' 
236f4                 | ' 
236f4                 | ' 
236f4                 | ' '' ------------------------------- Convenient psram peek/poke
236f4                 | ' 
236f4                 | ' sub pslpoke(addr as ulong,value as ulong)
236f4                 | _pslpoke
236f4     00 4A 05 F6 | 	mov	COUNT_, #0
236f8     A8 00 A0 FD | 	call	#pushregs_
236fc     08 F0 07 F1 | 	add	ptra, #8
23700     A7 12 62 FC | 	wrlong	arg01, fp
23704     04 4E 05 F1 | 	add	fp, #4
23708     A7 14 62 FC | 	wrlong	arg02, fp
2370c     A7 12 02 F6 | 	mov	arg01, fp
23710     04 4E 85 F1 | 	sub	fp, #4
23714     A7 14 02 FB | 	rdlong	arg02, fp
23718     04 16 06 F6 | 	mov	arg03, #4
2371c     0B 00 00 FF 
23720     CC E4 05 F1 | 	add	objptr, ##5836
23724     5C 2C B0 FD | 	call	#_psram_spin2_write
23728     0B 00 00 FF 
2372c     CC E4 85 F1 | 	sub	objptr, ##5836
23730     A7 F0 03 F6 | 	mov	ptra, fp
23734     B2 00 A0 FD | 	call	#popregs_
23738                 | _pslpoke_ret
23738     2D 00 64 FD | 	ret
2373c                 | 
2373c                 | ' 
2373c                 | ' sub psdpoke(addr as ulong,value as ulong)
2373c                 | _psdpoke
2373c     00 4A 05 F6 | 	mov	COUNT_, #0
23740     A8 00 A0 FD | 	call	#pushregs_
23744     08 F0 07 F1 | 	add	ptra, #8
23748     A7 12 62 FC | 	wrlong	arg01, fp
2374c     04 4E 05 F1 | 	add	fp, #4
23750     A7 14 62 FC | 	wrlong	arg02, fp
23754     A7 12 02 F6 | 	mov	arg01, fp
23758     04 4E 85 F1 | 	sub	fp, #4
2375c     A7 14 02 FB | 	rdlong	arg02, fp
23760     02 16 06 F6 | 	mov	arg03, #2
23764     0B 00 00 FF 
23768     CC E4 05 F1 | 	add	objptr, ##5836
2376c     14 2C B0 FD | 	call	#_psram_spin2_write
23770     0B 00 00 FF 
23774     CC E4 85 F1 | 	sub	objptr, ##5836
23778     A7 F0 03 F6 | 	mov	ptra, fp
2377c     B2 00 A0 FD | 	call	#popregs_
23780                 | _psdpoke_ret
23780     2D 00 64 FD | 	ret
23784                 | 
23784                 | ' 
23784                 | ' sub pspoke(addr as ulong,value as ulong)
23784                 | _pspoke
23784     00 4A 05 F6 | 	mov	COUNT_, #0
23788     A8 00 A0 FD | 	call	#pushregs_
2378c     08 F0 07 F1 | 	add	ptra, #8
23790     A7 12 62 FC | 	wrlong	arg01, fp
23794     04 4E 05 F1 | 	add	fp, #4
23798     A7 14 62 FC | 	wrlong	arg02, fp
2379c     A7 12 02 F6 | 	mov	arg01, fp
237a0     04 4E 85 F1 | 	sub	fp, #4
237a4     A7 14 02 FB | 	rdlong	arg02, fp
237a8     01 16 06 F6 | 	mov	arg03, #1
237ac     0B 00 00 FF 
237b0     CC E4 05 F1 | 	add	objptr, ##5836
237b4     CC 2B B0 FD | 	call	#_psram_spin2_write
237b8     0B 00 00 FF 
237bc     CC E4 85 F1 | 	sub	objptr, ##5836
237c0     A7 F0 03 F6 | 	mov	ptra, fp
237c4     B2 00 A0 FD | 	call	#popregs_
237c8                 | _pspoke_ret
237c8     2D 00 64 FD | 	ret
237cc                 | 
237cc                 | ' 
237cc                 | ' function pspeek(adr as ulong) as ubyte
237cc                 | _pspeek
237cc     00 4A 05 F6 | 	mov	COUNT_, #0
237d0     A8 00 A0 FD | 	call	#pushregs_
237d4     0C F0 07 F1 | 	add	ptra, #12
237d8     04 4E 05 F1 | 	add	fp, #4
237dc     A7 12 62 FC | 	wrlong	arg01, fp
237e0     04 4E 05 F1 | 	add	fp, #4
237e4     A7 12 02 F6 | 	mov	arg01, fp
237e8     04 4E 85 F1 | 	sub	fp, #4
237ec     A7 14 02 FB | 	rdlong	arg02, fp
237f0     04 4E 85 F1 | 	sub	fp, #4
237f4     01 16 06 F6 | 	mov	arg03, #1
237f8     0B 00 00 FF 
237fc     CC E4 05 F1 | 	add	objptr, ##5836
23800     E4 2A B0 FD | 	call	#_psram_spin2_read1
23804     0B 00 00 FF 
23808     CC E4 85 F1 | 	sub	objptr, ##5836
2380c                 | ' psram.read1(varptr(res),adr,1)
2380c                 | ' return res
2380c     08 4E 05 F1 | 	add	fp, #8
23810     A7 FA C1 FA | 	rdbyte	result1, fp
23814     08 4E 85 F1 | 	sub	fp, #8
23818     A7 F0 03 F6 | 	mov	ptra, fp
2381c     B2 00 A0 FD | 	call	#popregs_
23820                 | _pspeek_ret
23820     2D 00 64 FD | 	ret
23824                 | 
23824                 | ' 
23824                 | ' function pslpeek(adr as ulong) as ulong
23824                 | _pslpeek
23824     00 4A 05 F6 | 	mov	COUNT_, #0
23828     A8 00 A0 FD | 	call	#pushregs_
2382c     0C F0 07 F1 | 	add	ptra, #12
23830     04 4E 05 F1 | 	add	fp, #4
23834     A7 12 62 FC | 	wrlong	arg01, fp
23838     04 4E 05 F1 | 	add	fp, #4
2383c     A7 12 02 F6 | 	mov	arg01, fp
23840     04 4E 85 F1 | 	sub	fp, #4
23844     A7 14 02 FB | 	rdlong	arg02, fp
23848     04 4E 85 F1 | 	sub	fp, #4
2384c     04 16 06 F6 | 	mov	arg03, #4
23850     0B 00 00 FF 
23854     CC E4 05 F1 | 	add	objptr, ##5836
23858     8C 2A B0 FD | 	call	#_psram_spin2_read1
2385c     0B 00 00 FF 
23860     CC E4 85 F1 | 	sub	objptr, ##5836
23864                 | ' psram.read1(varptr(res),adr,4)
23864                 | ' return res
23864     08 4E 05 F1 | 	add	fp, #8
23868     A7 FA 01 FB | 	rdlong	result1, fp
2386c     08 4E 85 F1 | 	sub	fp, #8
23870     A7 F0 03 F6 | 	mov	ptra, fp
23874     B2 00 A0 FD | 	call	#popregs_
23878                 | _pslpeek_ret
23878     2D 00 64 FD | 	ret
2387c                 | 
2387c                 | ' 
2387c                 | ' function psdpeek(adr as ulong) as ulong
2387c                 | _psdpeek
2387c     00 4A 05 F6 | 	mov	COUNT_, #0
23880     A8 00 A0 FD | 	call	#pushregs_
23884     0C F0 07 F1 | 	add	ptra, #12
23888     04 4E 05 F1 | 	add	fp, #4
2388c     A7 12 62 FC | 	wrlong	arg01, fp
23890     04 4E 05 F1 | 	add	fp, #4
23894     A7 12 02 F6 | 	mov	arg01, fp
23898     04 4E 85 F1 | 	sub	fp, #4
2389c     A7 14 02 FB | 	rdlong	arg02, fp
238a0     04 4E 85 F1 | 	sub	fp, #4
238a4     02 16 06 F6 | 	mov	arg03, #2
238a8     0B 00 00 FF 
238ac     CC E4 05 F1 | 	add	objptr, ##5836
238b0     34 2A B0 FD | 	call	#_psram_spin2_read1
238b4     0B 00 00 FF 
238b8     CC E4 85 F1 | 	sub	objptr, ##5836
238bc                 | ' psram.read1(varptr(res),adr,2)
238bc                 | ' return res
238bc     08 4E 05 F1 | 	add	fp, #8
238c0     A7 FA E1 FA | 	rdword	result1, fp
238c4     08 4E 85 F1 | 	sub	fp, #8
238c8     A7 F0 03 F6 | 	mov	ptra, fp
238cc     B2 00 A0 FD | 	call	#popregs_
238d0                 | _psdpeek_ret
238d0     2D 00 64 FD | 	ret
238d4                 | 
238d4                 | ' 
238d4                 | ' '' ------------------------------- USB keyboard scan to char translator
238d4                 | ' 
238d4                 | ' function scantochar(key)
238d4                 | _scantochar
238d4                 | ' 
238d4                 | ' select case (key shr 8) and 255
238d4     09 01 02 F6 | 	mov	_var01, arg01
238d8     08 00 C6 F0 | 	sar	_var01, #8
238dc     FF 00 0E F5 | 	and	_var01, #255 wz
238e0     24 00 90 AD |  if_e	jmp	#LR__2700
238e4     02 00 0E F2 | 	cmp	_var01, #2 wz
238e8     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
238ec     30 00 90 AD |  if_e	jmp	#LR__2701
238f0     40 00 0E F2 | 	cmp	_var01, #64 wz
238f4     44 00 90 AD |  if_e	jmp	#LR__2702
238f8     42 00 0E F2 | 	cmp	_var01, #66 wz
238fc     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
23900     70 00 90 5D |  if_ne	jmp	#LR__2704
23904     50 00 90 FD | 	jmp	#LR__2703
23908                 | LR__2700
23908     09 FB 01 F6 | 	mov	result1, arg01
2390c     7F FA 05 F5 | 	and	result1, #127
23910     02 FA 65 F0 | 	shl	result1, #2
23914     F5 FA 01 F1 | 	add	result1, ptr__dat__
23918     FD FA C1 FA | 	rdbyte	result1, result1
2391c     54 00 90 FD | 	jmp	#_scantochar_ret
23920                 | LR__2701
23920     09 FB 01 F6 | 	mov	result1, arg01
23924     7F FA 05 F5 | 	and	result1, #127
23928     02 FA 65 F0 | 	shl	result1, #2
2392c     01 FA 05 F1 | 	add	result1, #1
23930     F5 FA 01 F1 | 	add	result1, ptr__dat__
23934     FD FA C1 FA | 	rdbyte	result1, result1
23938     38 00 90 FD | 	jmp	#_scantochar_ret
2393c                 | LR__2702
2393c     09 FB 01 F6 | 	mov	result1, arg01
23940     7F FA 05 F5 | 	and	result1, #127
23944     02 FA 65 F0 | 	shl	result1, #2
23948     02 FA 05 F1 | 	add	result1, #2
2394c     F5 FA 01 F1 | 	add	result1, ptr__dat__
23950     FD FA C1 FA | 	rdbyte	result1, result1
23954     1C 00 90 FD | 	jmp	#_scantochar_ret
23958                 | LR__2703
23958     09 FB 01 F6 | 	mov	result1, arg01
2395c     7F FA 05 F5 | 	and	result1, #127
23960     02 FA 65 F0 | 	shl	result1, #2
23964     03 FA 05 F1 | 	add	result1, #3
23968     F5 FA 01 F1 | 	add	result1, ptr__dat__
2396c     FD FA C1 FA | 	rdbyte	result1, result1
23970     00 00 90 FD | 	jmp	#_scantochar_ret
23974                 | LR__2704
23974                 | _scantochar_ret
23974     2D 00 64 FD | 	ret
23978                 | 
23978                 | _program
23978     01 4A 05 F6 | 	mov	COUNT_, #1
2397c     A8 00 A0 FD | 	call	#pushregs_
23980     70 FC BF FD | 	call	#_startpsram
23984     40 12 06 F6 | 	mov	arg01, #64
23988     00 14 06 F6 | 	mov	arg02, #0
2398c     00 16 06 F6 | 	mov	arg03, #0
23990     A0 FC BF FD | 	call	#_startvideo
23994     37 00 00 FF 
23998     14 E4 05 F1 | 	add	objptr, ##28180
2399c     F2 12 02 FB | 	rdlong	arg01, objptr
239a0     00 14 06 F6 | 	mov	arg02, #0
239a4     FB 03 00 FF 
239a8     00 17 06 F6 | 	mov	arg03, ##521984
239ac     2B 00 00 FF 
239b0     48 E5 85 F1 | 	sub	objptr, ##22344
239b4     54 2F B0 FD | 	call	#_audio096_spin2_start
239b8     FE 16 02 F6 | 	mov	arg03, result2
239bc     2B 00 00 FF 
239c0     30 E5 05 F1 | 	add	objptr, ##22320
239c4     F2 FA 61 FC | 	wrlong	result1, objptr
239c8     14 E4 05 F1 | 	add	objptr, #20
239cc     F2 16 62 FC | 	wrlong	arg03, objptr
239d0     37 00 00 FF 
239d4     10 E4 85 F1 | 	sub	objptr, ##28176
239d8     32 12 06 F6 | 	mov	arg01, #50
239dc     84 38 B0 FD | 	call	#__system___waitms
239e0     37 00 00 FF 
239e4     10 E4 05 F1 | 	add	objptr, ##28176
239e8     F2 12 02 FB | 	rdlong	arg01, objptr
239ec     37 00 00 FF 
239f0     10 E4 85 F1 | 	sub	objptr, ##28176
239f4     14 12 06 F1 | 	add	arg01, #20
239f8     20 00 80 FF 
239fc     09 01 58 FC | 	wrword	##16384, arg01
23a00     18 2C B0 FD | 	call	#_usbnew_spin2_start
23a04     37 00 00 FF 
23a08     04 E4 05 F1 | 	add	objptr, ##28164
23a0c     F2 FA 61 FC | 	wrlong	result1, objptr
23a10                 | '   mouse_limits[0] := xlim
23a10     0F 00 00 FF 
23a14     B8 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7864
23a18     01 00 80 FF 
23a1c     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
23a20                 | '   mouse_limits[1] := ylim
23a20     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
23a24     01 00 80 FF 
23a28     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
23a2c     36 00 00 FF 
23a30     F3 E4 85 F1 | 	sub	objptr, ##27891
23a34     F2 12 02 F6 | 	mov	arg01, objptr
23a38     11 E5 85 F1 | 	sub	objptr, #273
23a3c     C4 12 06 F1 | 	add	arg01, #196
23a40                 | '   mouse_outptr := ptr
23a40     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
23a44     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
23a48     0F 00 00 FF 
23a4c     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
23a50     16 00 00 FF 
23a54     CA EA 05 F1 | 	add	ptr__dat__, ##11466
23a58     F5 14 02 F6 | 	mov	arg02, ptr__dat__
23a5c     16 00 00 FF 
23a60     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
23a64     10 12 06 F6 | 	mov	arg01, #16
23a68     A0 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
23a6c     10 12 06 F6 | 	mov	arg01, #16
23a70     20 14 06 F6 | 	mov	arg02, #32
23a74     20 16 06 F6 | 	mov	arg03, #32
23a78     20 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
23a7c     09 12 C6 F9 | 	decod	arg01, #9
23a80     2C 15 06 F6 | 	mov	arg02, #300
23a84     EC 2C B0 FD | 	call	#_usbnew_spin2_mouse_move
23a88     F2 16 02 F6 | 	mov	arg03, objptr
23a8c     50 00 00 FF 
23a90     44 E5 05 F1 | 	add	objptr, ##41284
23a94     F2 14 02 F6 | 	mov	arg02, objptr
23a98     0A 17 62 FC | 	wrlong	arg03, arg02
23a9c     04 14 06 F1 | 	add	arg02, #4
23aa0     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
23aa4     EF 14 02 F6 | 	mov	arg02, entryptr__
23aa8     1E FA 05 F6 | 	mov	result1, #30
23aac     28 E4 61 FD | 	setq	objptr
23ab0     0A FB F1 FC | 	coginit	result1, arg02 wc
23ab4     01 FA 65 C6 |  if_b	neg	result1, #1
23ab8     04 E4 85 F1 | 	sub	objptr, #4
23abc     F2 FA 61 FC | 	wrlong	result1, objptr
23ac0     01 00 00 FF 
23ac4     54 E5 05 F1 | 	add	objptr, ##852
23ac8     F2 00 68 FC | 	wrlong	#0, objptr
23acc     1B 00 00 FF 
23ad0     60 E4 85 F1 | 	sub	objptr, ##13920
23ad4     F2 04 68 FC | 	wrlong	#2, objptr
23ad8     04 E4 05 F1 | 	add	objptr, #4
23adc     F2 26 69 FC | 	wrlong	#147, objptr
23ae0     04 E4 05 F1 | 	add	objptr, #4
23ae4     F2 34 69 FC | 	wrlong	#154, objptr
23ae8     04 E4 05 F1 | 	add	objptr, #4
23aec     F2 08 68 FC | 	wrlong	#4, objptr
23af0     04 E4 85 F1 | 	sub	objptr, #4
23af4     F2 16 02 FB | 	rdlong	arg03, objptr
23af8     14 E4 85 F1 | 	sub	objptr, #20
23afc     F2 16 62 FC | 	wrlong	arg03, objptr
23b00     04 E4 05 F1 | 	add	objptr, #4
23b04     F2 00 68 FC | 	wrlong	#0, objptr
23b08     04 E4 05 F1 | 	add	objptr, #4
23b0c     F2 00 68 FC | 	wrlong	#0, objptr
23b10     19 00 00 FF 
23b14     0C E5 05 F1 | 	add	objptr, ##13068
23b18     F2 02 68 FC | 	wrlong	#1, objptr
23b1c     01 00 00 FF 
23b20     60 E5 05 F1 | 	add	objptr, ##864
23b24     F2 00 68 FC | 	wrlong	#0, objptr
23b28     01 00 00 FF 
23b2c     00 EA 05 F1 | 	add	ptr__dat__, ##512
23b30     08 E4 05 F1 | 	add	objptr, #8
23b34     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
23b38     04 E4 85 F1 | 	sub	objptr, #4
23b3c     03 00 80 FF 
23b40     F2 3C 69 FC | 	wrlong	##1694, objptr
23b44     0D 00 00 FF 
23b48     3C E4 85 F1 | 	sub	objptr, ##6716
23b4c     F2 18 68 FC | 	wrlong	#12, objptr
23b50     45 00 00 FF 
23b54     64 E4 85 F1 | 	sub	objptr, ##35428
23b58     01 00 00 FF 
23b5c     00 EA 85 F1 | 	sub	ptr__dat__, ##512
23b60     28 D8 BF FD | 	call	#_init_commands
23b64     5C F6 BF FD | 	call	#_init_error_strings
23b68     E0 ED BF FD | 	call	#_init_audio
23b6c     00 25 BF FD | 	call	#_do_new
23b70     37 00 00 FF 
23b74     3C E4 05 F1 | 	add	objptr, ##28220
23b78     F2 12 02 FB | 	rdlong	arg01, objptr
23b7c     04 E4 85 F1 | 	sub	objptr, #4
23b80     F2 14 02 FB | 	rdlong	arg02, objptr
23b84     37 00 00 FF 
23b88     38 E4 85 F1 | 	sub	objptr, ##28216
23b8c     5C 17 B0 FD | 	call	#_hg010b_spin2_cls
23b90     37 00 00 FF 
23b94     40 E4 05 F1 | 	add	objptr, ##28224
23b98     F2 12 02 FB | 	rdlong	arg01, objptr
23b9c     37 00 00 FF 
23ba0     40 E4 85 F1 | 	sub	objptr, ##28224
23ba4     C4 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
23ba8                 | ' 
23ba8                 | ' leading_spaces:=amount
23ba8     01 00 00 FF 
23bac     B6 E4 05 F1 | 	add	objptr, ##694
23bb0     F2 04 68 FC | 	wrlong	#2, objptr
23bb4     01 00 00 FF 
23bb8     B6 E4 85 F1 | 	sub	objptr, ##694
23bbc     BE 01 00 FF 
23bc0     2A 26 06 F6 | 	mov	local01, ##@LR__6080
23bc4     3D 12 06 F6 | 	mov	arg01, #61
23bc8     3C 14 06 F6 | 	mov	arg02, #60
23bcc     3B 16 06 F6 | 	mov	arg03, #59
23bd0     3A 18 06 F6 | 	mov	arg04, #58
23bd4     1C 81 B0 FD | 	call	#__system___vfs_open_sdcardx
23bd8     FD 14 02 F6 | 	mov	arg02, result1
23bdc     13 13 02 F6 | 	mov	arg01, local01
23be0     58 37 B0 FD | 	call	#__system___mount
23be4     BE 01 00 FF 
23be8     2E 12 06 F6 | 	mov	arg01, ##@LR__6081
23bec     0C 3A B0 FD | 	call	#__system___chdir
23bf0     BE 01 00 FF 
23bf4     36 26 06 F6 | 	mov	local01, ##@LR__6082
23bf8     4A 00 00 FF 
23bfc     94 E4 05 F1 | 	add	objptr, ##38036
23c00     F2 26 62 FC | 	wrlong	local01, objptr
23c04     13 00 00 FF 
23c08     60 E4 85 F1 | 	sub	objptr, ##9824
23c0c     F2 12 02 FB | 	rdlong	arg01, objptr
23c10     37 00 00 FF 
23c14     34 E4 85 F1 | 	sub	objptr, ##28212
23c18     01 12 66 F0 | 	shl	arg01, #1
23c1c     01 14 06 F6 | 	mov	arg02, #1
23c20     88 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
23c24                 | ' init_commands
23c24                 | ' init_error_strings
23c24                 | ' init_audio
23c24                 | ' do_new
23c24                 | ' cls(ink, paper)
23c24                 | ' v.setfontfamily(font) 				' use ST Mono font
23c24                 | ' v.setleadingspaces(2)
23c24                 | ' mount "/sd", _vfs_open_sdcard()
23c24                 | ' chdir "/sd/bas"
23c24                 | ' currentdir$="/sd/bas"
23c24                 | ' position 2*editor_spaces,1 : print ver$
23c24     00 12 06 F6 | 	mov	arg01, #0
23c28     6C 90 B0 FD | 	call	#__system___getiolock_0613
23c2c     FD 12 02 F6 | 	mov	arg01, result1
23c30     3C 33 B0 FD | 	call	#__system___lockmem
23c34     18 00 00 FF 
23c38     40 EB 05 F1 | 	add	ptr__dat__, ##12608
23c3c     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
23c40     18 00 00 FF 
23c44     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
23c48     00 12 06 F6 | 	mov	arg01, #0
23c4c     00 16 06 F6 | 	mov	arg03, #0
23c50     10 40 B0 FD | 	call	#__system___basic_print_string
23c54     00 12 06 F6 | 	mov	arg01, #0
23c58     0A 14 06 F6 | 	mov	arg02, #10
23c5c     00 16 06 F6 | 	mov	arg03, #0
23c60     A8 3F B0 FD | 	call	#__system___basic_print_char
23c64     00 12 06 F6 | 	mov	arg01, #0
23c68     2C 90 B0 FD | 	call	#__system___getiolock_0613
23c6c     FD 00 68 FC | 	wrlong	#0, result1
23c70     52 00 00 FF 
23c74     98 E4 05 F1 | 	add	objptr, ##42136
23c78     F2 12 02 FB | 	rdlong	arg01, objptr
23c7c     0F 00 00 FF 
23c80     3C E4 85 F1 | 	sub	objptr, ##7740
23c84     F2 26 02 FB | 	rdlong	local01, objptr
23c88     43 00 00 FF 
23c8c     5C E4 85 F1 | 	sub	objptr, ##34396
23c90     13 13 82 F1 | 	sub	arg01, local01
23c94     00 14 06 F6 | 	mov	arg02, #0
23c98     0A 16 06 F6 | 	mov	arg03, #10
23c9c     A0 55 B0 FD | 	call	#__system__Number_S
23ca0     FD 12 02 F6 | 	mov	arg01, result1
23ca4     BE 01 00 FF 
23ca8     3E 14 06 F6 | 	mov	arg02, ##@LR__6083
23cac     1C 33 B0 FD | 	call	#__system___string_concat
23cb0     FD 26 02 F6 | 	mov	local01, result1
23cb4     50 00 00 FF 
23cb8     38 E5 05 F1 | 	add	objptr, ##41272
23cbc     F2 26 62 FC | 	wrlong	local01, objptr
23cc0     50 00 00 FF 
23cc4     38 E5 85 F1 | 	sub	objptr, ##41272
23cc8                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
23cc8     00 12 06 F6 | 	mov	arg01, #0
23ccc     C8 8F B0 FD | 	call	#__system___getiolock_0613
23cd0     FD 12 02 F6 | 	mov	arg01, result1
23cd4     98 32 B0 FD | 	call	#__system___lockmem
23cd8     50 00 00 FF 
23cdc     38 E5 05 F1 | 	add	objptr, ##41272
23ce0     F2 14 02 FB | 	rdlong	arg02, objptr
23ce4     50 00 00 FF 
23ce8     38 E5 85 F1 | 	sub	objptr, ##41272
23cec     00 12 06 F6 | 	mov	arg01, #0
23cf0     00 16 06 F6 | 	mov	arg03, #0
23cf4     6C 3F B0 FD | 	call	#__system___basic_print_string
23cf8     00 12 06 F6 | 	mov	arg01, #0
23cfc     0A 14 06 F6 | 	mov	arg02, #10
23d00     00 16 06 F6 | 	mov	arg03, #0
23d04     04 3F B0 FD | 	call	#__system___basic_print_char
23d08     00 12 06 F6 | 	mov	arg01, #0
23d0c     88 8F B0 FD | 	call	#__system___getiolock_0613
23d10     FD 00 68 FC | 	wrlong	#0, result1
23d14     37 00 00 FF 
23d18     34 E4 05 F1 | 	add	objptr, ##28212
23d1c     F2 12 02 FB | 	rdlong	arg01, objptr
23d20     37 00 00 FF 
23d24     34 E4 85 F1 | 	sub	objptr, ##28212
23d28     01 12 66 F0 | 	shl	arg01, #1
23d2c     04 14 06 F6 | 	mov	arg02, #4
23d30     78 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
23d34                 | ' position 2*editor_spaces,4 : print "Ready"
23d34     00 12 06 F6 | 	mov	arg01, #0
23d38     5C 8F B0 FD | 	call	#__system___getiolock_0613
23d3c     FD 12 02 F6 | 	mov	arg01, result1
23d40     2C 32 B0 FD | 	call	#__system___lockmem
23d44     BE 01 00 FF 
23d48     50 14 06 F6 | 	mov	arg02, ##@LR__6084
23d4c     00 12 06 F6 | 	mov	arg01, #0
23d50     00 16 06 F6 | 	mov	arg03, #0
23d54     0C 3F B0 FD | 	call	#__system___basic_print_string
23d58     00 12 06 F6 | 	mov	arg01, #0
23d5c     0A 14 06 F6 | 	mov	arg02, #10
23d60     00 16 06 F6 | 	mov	arg03, #0
23d64     A4 3E B0 FD | 	call	#__system___basic_print_char
23d68     00 12 06 F6 | 	mov	arg01, #0
23d6c     28 8F B0 FD | 	call	#__system___getiolock_0613
23d70     FD 00 68 FC | 	wrlong	#0, result1
23d74     00 14 06 F6 | 	mov	arg02, #0
23d78     01 14 D6 F7 | 	test	arg02, #1 wc
23d7c     5A 4C 64 FD | 	drvc	#38
23d80     01 14 D6 F7 | 	test	arg02, #1 wc
23d84     5A 4E 64 FD | 	drvc	#39
23d88     BE 01 00 FF 
23d8c     56 26 06 F6 | 	mov	local01, ##@LR__6085
23d90     52 00 00 FF 
23d94     C4 E4 05 F1 | 	add	objptr, ##42180
23d98     F2 26 62 FC | 	wrlong	local01, objptr
23d9c     04 E4 05 F1 | 	add	objptr, #4
23da0     FF FF FF FF 
23da4     F2 FE 6B FC | 	wrlong	##-1, objptr
23da8     0C E4 05 F1 | 	add	objptr, #12
23dac     F2 00 68 FC | 	wrlong	#0, objptr
23db0     52 00 00 FF 
23db4     D4 E4 85 F1 | 	sub	objptr, ##42196
23db8                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
23db8                 | ' loadname="noname.bas"
23db8                 | ' do_insert=-1
23db8                 | ' inload=0
23db8                 | ' 
23db8                 | ' open "/sd/bas/autorun.bas" for input as #9
23db8     BE 01 00 FF 
23dbc     61 14 06 F6 | 	mov	arg02, ##@LR__6086
23dc0     09 12 06 F6 | 	mov	arg01, #9
23dc4     00 16 06 F6 | 	mov	arg03, #0
23dc8     A8 3D B0 FD | 	call	#__system___basic_open_string
23dcc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23dd0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
23dd4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23dd8     52 00 00 FF 
23ddc     D8 E4 05 F1 | 	add	objptr, ##42200
23de0     F2 FA 61 FC | 	wrlong	result1, objptr
23de4     52 00 00 FF 
23de8     D8 E4 85 F1 | 	sub	objptr, ##42200
23dec                 | ' err=geterr()
23dec                 | ' close #9
23dec     09 12 06 F6 | 	mov	arg01, #9
23df0     D4 84 B0 FD | 	call	#__system__close
23df4                 | ' if err=0 then line$="run autorun.bas" : interpret
23df4     52 00 00 FF 
23df8     D8 E4 05 F1 | 	add	objptr, ##42200
23dfc     F2 26 0A FB | 	rdlong	local01, objptr wz
23e00     52 00 00 FF 
23e04     D8 E4 85 F1 | 	sub	objptr, ##42200
23e08     BE 01 00 AF 
23e0c     75 26 06 A6 |  if_e	mov	local01, ##@LR__6087
23e10     37 00 00 AF 
23e14     1C E4 05 A1 |  if_e	add	objptr, ##28188
23e18     F2 26 62 AC |  if_e	wrlong	local01, objptr
23e1c     37 00 00 AF 
23e20     1C E4 85 A1 |  if_e	sub	objptr, ##28188
23e24     00 DA BD AD |  if_e	call	#_interpret
23e28                 | ' 
23e28                 | ' 
23e28                 | ' '-------------------------------------------------------------------------------------------------------- 
23e28                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
23e28                 | ' '--------------------------------------------------------------------------------------------------------
23e28                 | ' 
23e28                 | ' do
23e28                 | LR__2710
23e28     D8 C9 BD FD | 	call	#_edit
23e2c     FD 26 02 F6 | 	mov	local01, result1
23e30     37 00 00 FF 
23e34     1C E4 05 F1 | 	add	objptr, ##28188
23e38     F2 26 62 FC | 	wrlong	local01, objptr
23e3c     37 00 00 FF 
23e40     1C E4 85 F1 | 	sub	objptr, ##28188
23e44     E0 D9 BD FD | 	call	#_interpret
23e48     BE 01 00 FF 
23e4c     85 26 06 F6 | 	mov	local01, ##@LR__6088
23e50     37 00 00 FF 
23e54     1C E4 05 F1 | 	add	objptr, ##28188
23e58     F2 26 62 FC | 	wrlong	local01, objptr
23e5c     37 00 00 FF 
23e60     1C E4 85 F1 | 	sub	objptr, ##28188
23e64     C0 FF 9F FD | 	jmp	#LR__2710
23e68     A7 F0 03 F6 | 	mov	ptra, fp
23e6c     B2 00 A0 FD | 	call	#popregs_
23e70                 | _program_ret
23e70     2D 00 64 FD | 	ret
23e74                 | 
23e74                 | ' '' this is not a main program.
23e74                 | ' 
23e74                 | ' '****************************************************************************************************************
23e74                 | ' '                                                                                                             	*
23e74                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
23e74                 | ' '                                                                                                            	*
23e74                 | ' ' base - HDMI base pin												*
23e74                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
23e74                 | ' '														*
23e74                 | ' '														*
23e74                 | ' '****************************************************************************************************************
23e74                 | ' 
23e74                 | ' pub start(base,mb):result |i
23e74                 | _hg010b_spin2_start
23e74                 | ' 
23e74                 | ' '--------------------------- initialize pointers and variables
23e74                 | ' 
23e74                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
23e74     34 E4 05 F1 | 	add	objptr, #52
23e78     F2 FA 01 F6 | 	mov	result1, objptr
23e7c     28 E4 85 F1 | 	sub	objptr, #40
23e80     F2 FA 61 FC | 	wrlong	result1, objptr
23e84                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
23e84                 | ' hdmibase:=base							' HDMI base pin, 8*n
23e84     18 E4 05 F1 | 	add	objptr, #24
23e88     F2 12 62 FC | 	wrlong	arg01, objptr
23e8c                 | ' mailbox_ptr:=mb		
23e8c     04 E4 05 F1 | 	add	objptr, #4
23e90     F2 14 62 FC | 	wrlong	arg02, objptr
23e94                 | ' mailbox0:=mb				' PSRAM mailbox pointer
23e94     C1 E5 05 F1 | 	add	objptr, #449
23e98     F2 14 62 FC | 	wrlong	arg02, objptr
23e9c                 | ' sprite_ptr:=@spr1ptr
23e9c     D8 E4 85 F1 | 	sub	objptr, #216
23ea0     F2 FA 01 F6 | 	mov	result1, objptr
23ea4     E5 E4 85 F1 | 	sub	objptr, #229
23ea8     F2 FA 61 FC | 	wrlong	result1, objptr
23eac                 | ' 
23eac                 | ' 		'
23eac                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
23eac     E5 E4 05 F1 | 	add	objptr, #229
23eb0     F2 FA 01 FB | 	rdlong	result1, objptr
23eb4     D0 FA 05 F1 | 	add	result1, #208
23eb8     FD 10 58 FC | 	wrword	#8, result1
23ebc                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
23ebc     F2 16 02 FB | 	rdlong	arg03, objptr
23ec0     D2 16 06 F1 | 	add	arg03, #210
23ec4     0B 21 58 FC | 	wrword	#16, arg03
23ec8                 | ' leading_spaces:=0				'
23ec8     A5 E5 05 F1 | 	add	objptr, #421
23ecc     F2 00 68 FC | 	wrlong	#0, objptr
23ed0                 | ' 
23ed0                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
23ed0     99 E4 85 F1 | 	sub	objptr, #153
23ed4     00 00 A0 FF 
23ed8     F2 0E 68 FC | 	wrlong	##1073741831, objptr
23edc                 | ' emptydl[1]:=0
23edc     04 E4 05 F1 | 	add	objptr, #4
23ee0     F2 00 68 FC | 	wrlong	#0, objptr
23ee4                 | ' 
23ee4                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
23ee4                 | ' 
23ee4                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
23ee4     28 E5 85 F1 | 	sub	objptr, #296
23ee8     F2 02 68 FC | 	wrlong	#1, objptr
23eec                 | ' if s_debug<>0
23eec                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
23eec     20 00 80 FF 
23ef0     F2 00 68 FC | 	wrlong	##16384, objptr
23ef4     F9 E4 85 F1 | 	sub	objptr, #249
23ef8                 | ' setmode()							' set the mode, see below
23ef8     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
23efc                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
23efc     49 E4 05 F1 | 	add	objptr, #73
23f00     F2 FA 01 F6 | 	mov	result1, objptr
23f04     35 E4 85 F1 | 	sub	objptr, #53
23f08     F2 FA 61 FC | 	wrlong	result1, objptr
23f0c                 | ' cursor_ptr:=@cursor_x						
23f0c     28 E4 05 F1 | 	add	objptr, #40
23f10     F2 16 02 F6 | 	mov	arg03, objptr
23f14     2C E4 85 F1 | 	sub	objptr, #44
23f18     F2 16 62 FC | 	wrlong	arg03, objptr
23f1c                 | ' fontnum:=0  							' start with a PC type font 
23f1c     55 E4 05 F1 | 	add	objptr, #85
23f20     F2 00 68 FC | 	wrlong	#0, objptr
23f24                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
23f24     1C E4 05 F1 | 	add	objptr, #28
23f28     F2 12 02 F6 | 	mov	arg01, objptr
23f2c     81 E4 85 F1 | 	sub	objptr, #129
23f30     1C 00 00 FF 
23f34     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14464
23f38     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
23f3c     1C 00 00 FF 
23f40     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14464
23f44     10 16 06 F6 | 	mov	arg03, #16
23f48     44 2F B0 FD | 	call	#__system____builtin_memmove
23f4c                 | ' leading_spaces:=0
23f4c     01 00 00 FF 
23f50     B6 E4 05 F1 | 	add	objptr, ##694
23f54     F2 00 68 FC | 	wrlong	#0, objptr
23f58     01 00 00 FF 
23f5c     B6 E4 85 F1 | 	sub	objptr, ##694
23f60                 | ' '---------------------------- initialize a cursor (MSDOS type)
23f60                 | ' 
23f60                 | ' initcursor(154)
23f60     9A 12 06 F6 | 	mov	arg01, #154
23f64     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
23f68                 | ' 
23f68                 | ' '---------------------------- start the cog
23f68                 | ' 
23f68                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
23f68     1C 00 00 FF 
23f6c     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14480
23f70     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
23f74     1C 00 00 FF 
23f78     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14480
23f7c     14 E4 05 F1 | 	add	objptr, #20
23f80     10 FA 05 F6 | 	mov	result1, #16
23f84     28 E4 61 FD | 	setq	objptr
23f88     0A FB F1 FC | 	coginit	result1, arg02 wc
23f8c     01 FA 65 C6 |  if_b	neg	result1, #1
23f90     1C E4 05 F1 | 	add	objptr, #28
23f94     F2 FA 61 FC | 	wrlong	result1, objptr
23f98     30 E4 85 F1 | 	sub	objptr, #48
23f9c                 | ' waitms(40)							' wait for stabilize
23f9c     28 12 06 F6 | 	mov	arg01, #40
23fa0     C0 32 B0 FD | 	call	#__system___waitms
23fa4                 | ' return cog							' return the driver's cog #
23fa4     30 E4 05 F1 | 	add	objptr, #48
23fa8     F2 FA 01 FB | 	rdlong	result1, objptr
23fac     30 E4 85 F1 | 	sub	objptr, #48
23fb0                 | _hg010b_spin2_start_ret
23fb0     2D 00 64 FD | 	ret
23fb4                 | 
23fb4                 | ' 
23fb4                 | ' 
23fb4                 | ' '**************************************************************************************************************** 
23fb4                 | ' '                                                                                                             	*
23fb4                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
23fb4                 | ' '  Mode number - see start() above or bits below								*
23fb4                 | ' '                                                                                                             	*
23fb4                 | ' '****************************************************************************************************************
23fb4                 | ' 
23fb4                 | ' '---------------------------- initialize a cursor (MSDOS type)
23fb4                 | ' pub initcursor(color) |i
23fb4                 | _hg010b_spin2_initcursor
23fb4     03 4A 05 F6 | 	mov	COUNT_, #3
23fb8     A8 00 A0 FD | 	call	#pushregs_
23fbc     09 27 02 F6 | 	mov	local01, arg01
23fc0                 | ' 
23fc0                 | ' cursor_x:=0							' place the cursor at 0:0
23fc0     3C E4 05 F1 | 	add	objptr, #60
23fc4     F2 00 58 FC | 	wrword	#0, objptr
23fc8                 | ' cursor_y:=0
23fc8     02 E4 05 F1 | 	add	objptr, #2
23fcc     F2 00 48 FC | 	wrbyte	#0, objptr
23fd0                 | ' repeat i from 0 to 111
23fd0     00 28 06 F6 | 	mov	local02, #0
23fd4     F8 E5 05 F1 | 	add	objptr, #504
23fd8     97 1A 48 FB | 	callpa	#(@LR__2722-@LR__2720)>>2,fcache_load_ptr_
23fdc                 | LR__2720
23fdc                 | '   cursor[i]:=0
23fdc     14 2B 02 F6 | 	mov	local03, local02
23fe0     F2 2A 02 F1 | 	add	local03, objptr
23fe4     15 01 48 FC | 	wrbyte	#0, local03
23fe8     01 28 06 F1 | 	add	local02, #1
23fec     70 28 56 F2 | 	cmps	local02, #112 wc
23ff0     E8 FF 9F CD |  if_b	jmp	#LR__2720
23ff4                 | ' repeat i from 112 to 127
23ff4     70 28 06 F6 | 	mov	local02, #112
23ff8                 | LR__2721
23ff8                 | '   cursor[i]:=color  
23ff8     14 2B 02 F6 | 	mov	local03, local02
23ffc     F2 2A 02 F1 | 	add	local03, objptr
24000     15 27 42 FC | 	wrbyte	local01, local03
24004     01 28 06 F1 | 	add	local02, #1
24008     80 28 16 F2 | 	cmp	local02, #128 wc
2400c     E8 FF 9F CD |  if_b	jmp	#LR__2721
24010                 | LR__2722
24010                 | ' 'repeat i from 0 to 127
24010                 | ' '  if ((i/8)//2)
24010                 | ' '    cursor[i]:=15
24010                 | ' '  else
24010                 | ' '    cursor[i]:=0
24010                 | ' '  if i>=120    
24010                 | ' '    cursor[i]:=40
24010                 | ' setspriteptr(17,@cursor)
24010     F2 14 02 F6 | 	mov	arg02, objptr
24014     01 00 00 FF 
24018     36 E4 85 F1 | 	sub	objptr, ##566
2401c     11 12 06 F6 | 	mov	arg01, #17
24020     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
24024                 | ' setspritesize(17,8,16)
24024     11 12 06 F6 | 	mov	arg01, #17
24028     08 14 06 F6 | 	mov	arg02, #8
2402c     10 16 06 F6 | 	mov	arg03, #16
24030     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
24034                 | ' setspritepos(17,0,0)
24034     11 12 06 F6 | 	mov	arg01, #17
24038     00 14 06 F6 | 	mov	arg02, #0
2403c     00 16 06 F6 | 	mov	arg03, #0
24040     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
24044                 | ' cursorshape:=14
24044     0B 00 00 FF 
24048     C6 E4 05 F1 | 	add	objptr, ##5830
2404c     F2 1C 68 FC | 	wrlong	#14, objptr
24050                 | ' cursorcolor:=color
24050     04 E4 85 F1 | 	sub	objptr, #4
24054     F2 26 62 FC | 	wrlong	local01, objptr
24058     0B 00 00 FF 
2405c     C2 E4 85 F1 | 	sub	objptr, ##5826
24060     A7 F0 03 F6 | 	mov	ptra, fp
24064     B2 00 A0 FD | 	call	#popregs_
24068                 | _hg010b_spin2_initcursor_ret
24068     2D 00 64 FD | 	ret
2406c                 | 
2406c                 | ' 
2406c                 | ' pub setcursorshape(shape) | i
2406c                 | _hg010b_spin2_setcursorshape
2406c                 | ' 
2406c                 | ' cursorshape:=shape
2406c     0B 00 00 FF 
24070     C6 E4 05 F1 | 	add	objptr, ##5830
24074     F2 12 62 FC | 	wrlong	arg01, objptr
24078                 | ' repeat i from 0 to (8*cursorshape)-1
24078     00 00 06 F6 | 	mov	_var01, #0
2407c     09 03 02 F6 | 	mov	_var02, arg01
24080     03 02 66 F0 | 	shl	_var02, #3
24084     01 02 86 F1 | 	sub	_var02, #1
24088     00 02 56 F2 | 	cmps	_var02, #0 wc
2408c     01 04 86 F6 | 	negc	_var03, #1
24090     02 07 02 F6 | 	mov	_var04, _var03
24094     02 03 02 F1 | 	add	_var02, _var03
24098     0A 00 00 FF 
2409c     90 E4 85 F1 | 	sub	objptr, ##5264
240a0     97 0C 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
240a4                 | LR__2730
240a4                 | '   cursor[i]:=0
240a4     00 05 02 F6 | 	mov	_var03, _var01
240a8     F2 04 02 F1 | 	add	_var03, objptr
240ac     02 01 48 FC | 	wrbyte	#0, _var03
240b0     03 01 02 F1 | 	add	_var01, _var04
240b4     01 01 0A F2 | 	cmp	_var01, _var02 wz
240b8     E8 FF 9F 5D |  if_ne	jmp	#LR__2730
240bc                 | LR__2731
240bc                 | ' repeat i from 8*cursorshape to 127
240bc     0A 00 00 FF 
240c0     90 E4 05 F1 | 	add	objptr, ##5264
240c4     F2 06 02 FB | 	rdlong	_var04, objptr
240c8     03 01 02 F6 | 	mov	_var01, _var04
240cc     03 00 66 F0 | 	shl	_var01, #3
240d0     0B 00 00 FF 
240d4     C6 E4 85 F1 | 	sub	objptr, ##5830
240d8     03 06 66 F0 | 	shl	_var04, #3
240dc     80 06 56 F2 | 	cmps	_var04, #128 wc
240e0     01 04 A6 F6 | 	negnc	_var03, #1
240e4     7F 02 06 F6 | 	mov	_var02, #127
240e8     02 03 02 F1 | 	add	_var02, _var03
240ec     97 1A 48 FB | 	callpa	#(@LR__2733-@LR__2732)>>2,fcache_load_ptr_
240f0                 | LR__2732
240f0                 | '   cursor[i]:=cursorcolor
240f0     00 07 02 F6 | 	mov	_var04, _var01
240f4     01 00 00 FF 
240f8     36 E4 05 F1 | 	add	objptr, ##566
240fc     F2 06 02 F1 | 	add	_var04, objptr
24100     0A 00 00 FF 
24104     8C E4 05 F1 | 	add	objptr, ##5260
24108     F2 12 02 FB | 	rdlong	arg01, objptr
2410c     0B 00 00 FF 
24110     C2 E4 85 F1 | 	sub	objptr, ##5826
24114     03 13 42 FC | 	wrbyte	arg01, _var04
24118     02 01 02 F1 | 	add	_var01, _var03
2411c     01 01 0A F2 | 	cmp	_var01, _var02 wz
24120     CC FF 9F 5D |  if_ne	jmp	#LR__2732
24124                 | LR__2733
24124                 | _hg010b_spin2_setcursorshape_ret
24124     2D 00 64 FD | 	ret
24128                 | 
24128                 | ' 
24128                 | ' pub setcursorcolor(color) | i
24128                 | _hg010b_spin2_setcursorcolor
24128                 | ' 
24128                 | ' cursorcolor:=color
24128     0B 00 00 FF 
2412c     C2 E4 05 F1 | 	add	objptr, ##5826
24130     F2 12 62 FC | 	wrlong	arg01, objptr
24134                 | ' repeat i from 0 to (8*cursorshape)-1
24134     00 12 06 F6 | 	mov	arg01, #0
24138     04 E4 05 F1 | 	add	objptr, #4
2413c     F2 00 02 FB | 	rdlong	_var01, objptr
24140     03 00 66 F0 | 	shl	_var01, #3
24144     01 00 86 F1 | 	sub	_var01, #1
24148     00 00 56 F2 | 	cmps	_var01, #0 wc
2414c     01 02 86 F6 | 	negc	_var02, #1
24150     01 05 02 F6 | 	mov	_var03, _var02
24154     01 01 02 F1 | 	add	_var01, _var02
24158     0A 00 00 FF 
2415c     90 E4 85 F1 | 	sub	objptr, ##5264
24160     97 0C 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
24164                 | LR__2740
24164                 | '   cursor[i]:=0
24164     09 03 02 F6 | 	mov	_var02, arg01
24168     F2 02 02 F1 | 	add	_var02, objptr
2416c     01 01 48 FC | 	wrbyte	#0, _var02
24170     02 13 02 F1 | 	add	arg01, _var03
24174     00 13 0A F2 | 	cmp	arg01, _var01 wz
24178     E8 FF 9F 5D |  if_ne	jmp	#LR__2740
2417c                 | LR__2741
2417c                 | ' repeat i from 8*cursorshape to 127
2417c     0A 00 00 FF 
24180     90 E4 05 F1 | 	add	objptr, ##5264
24184     F2 04 02 FB | 	rdlong	_var03, objptr
24188     02 13 02 F6 | 	mov	arg01, _var03
2418c     03 12 66 F0 | 	shl	arg01, #3
24190     0B 00 00 FF 
24194     C6 E4 85 F1 | 	sub	objptr, ##5830
24198     03 04 66 F0 | 	shl	_var03, #3
2419c     80 04 56 F2 | 	cmps	_var03, #128 wc
241a0     01 02 A6 F6 | 	negnc	_var02, #1
241a4     7F 00 06 F6 | 	mov	_var01, #127
241a8     01 01 02 F1 | 	add	_var01, _var02
241ac     97 1A 48 FB | 	callpa	#(@LR__2743-@LR__2742)>>2,fcache_load_ptr_
241b0                 | LR__2742
241b0                 | '   cursor[i]:=cursorcolor
241b0     09 05 02 F6 | 	mov	_var03, arg01
241b4     01 00 00 FF 
241b8     36 E4 05 F1 | 	add	objptr, ##566
241bc     F2 04 02 F1 | 	add	_var03, objptr
241c0     0A 00 00 FF 
241c4     8C E4 05 F1 | 	add	objptr, ##5260
241c8     F2 06 02 FB | 	rdlong	_var04, objptr
241cc     0B 00 00 FF 
241d0     C2 E4 85 F1 | 	sub	objptr, ##5826
241d4     02 07 42 FC | 	wrbyte	_var04, _var03
241d8     01 13 02 F1 | 	add	arg01, _var02
241dc     00 13 0A F2 | 	cmp	arg01, _var01 wz
241e0     CC FF 9F 5D |  if_ne	jmp	#LR__2742
241e4                 | LR__2743
241e4                 | _hg010b_spin2_setcursorcolor_ret
241e4     2D 00 64 FD | 	ret
241e8                 | 
241e8                 | '   
241e8                 | '   
241e8                 | '   
241e8                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
241e8                 | _hg010b_spin2_setmode
241e8     02 4A 05 F6 | 	mov	COUNT_, #2
241ec     A8 00 A0 FD | 	call	#pushregs_
241f0                 | ' 
241f0                 | ' 
241f0                 | ' dl_ptr:=@emptydl[0]
241f0     01 00 00 FF 
241f4     1D E4 05 F1 | 	add	objptr, ##541
241f8     F2 1A 02 F6 | 	mov	arg05, objptr
241fc     FD E5 85 F1 | 	sub	objptr, #509
24200     F2 1A 62 FC | 	wrlong	arg05, objptr
24204                 | ' 
24204                 | ' if cog>0 
24204     10 E4 05 F1 | 	add	objptr, #16
24208     F2 1A 02 FB | 	rdlong	arg05, objptr
2420c     30 E4 85 F1 | 	sub	objptr, #48
24210     01 1A 56 F2 | 	cmps	arg05, #1 wc
24214                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
24214     01 12 06 36 |  if_ae	mov	arg01, #1
24218     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
2421c                 | ' xres:=1024
2421c     01 00 00 FF 
24220     26 E4 05 F1 | 	add	objptr, ##550
24224     02 00 80 FF 
24228     F2 00 68 FC | 	wrlong	##1024, objptr
2422c                 | ' yres:=600
2422c     04 E4 05 F1 | 	add	objptr, #4
24230     01 00 80 FF 
24234     F2 B0 68 FC | 	wrlong	##600, objptr
24238                 | ' ppl:=(timings[3])
24238     1C 00 00 FF 
2423c     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14412
24240     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
24244     51 E5 85 F1 | 	sub	objptr, #337
24248     F2 1A 62 FC | 	wrlong	arg05, objptr
2424c                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
2424c     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
24250     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
24254     01 26 66 F0 | 	shl	local01, #1
24258     80 E4 85 F1 | 	sub	objptr, #128
2425c     F2 26 62 FC | 	wrlong	local01, objptr
24260                 | ' cpl1:=cpl '' todo remove
24260     04 E4 05 F1 | 	add	objptr, #4
24264     F2 26 62 FC | 	wrlong	local01, objptr
24268                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
24268     04 00 00 FF 
2426c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##2076
24270     41 E4 85 F1 | 	sub	objptr, #65
24274     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
24278                 | ' repeat i from 0 to 3
24278     00 28 06 F6 | 	mov	local02, #0
2427c     04 00 00 FF 
24280     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##2048
24284     08 E4 05 F1 | 	add	objptr, #8
24288     97 20 48 FB | 	callpa	#(@LR__2751-@LR__2750)>>2,fcache_load_ptr_
2428c                 | LR__2750
2428c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
2428c     14 27 02 F6 | 	mov	local01, local02
24290     02 26 66 F0 | 	shl	local01, #2
24294     F7 26 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
24298     F2 1A 02 FB | 	rdlong	arg05, objptr
2429c     11 1A 66 F0 | 	shl	arg05, #17
242a0     13 27 02 FB | 	rdlong	local01, local01
242a4     0D 27 02 F1 | 	add	local01, arg05
242a8     80 40 38 FF 
242ac     00 26 06 F1 | 	add	local01, ##1887502336
242b0     14 1B 02 F6 | 	mov	arg05, local02
242b4     02 1A 66 F0 | 	shl	arg05, #2
242b8     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
242bc     0D 27 62 FC | 	wrlong	local01, arg05
242c0     01 28 06 F1 | 	add	local02, #1
242c4     04 28 56 F2 | 	cmps	local02, #4 wc
242c8     C0 FF 9F CD |  if_b	jmp	#LR__2750
242cc                 | LR__2751
242cc     24 E4 85 F1 | 	sub	objptr, #36
242d0                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
242d0     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
242d4     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
242d8     14 26 66 FC | 	wrlong	local01, #20
242dc                 | ' hubset(timings[10])
242dc     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
242e0     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
242e4     1C 00 00 FF 
242e8     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14440
242ec     00 12 62 FD | 	hubset	arg01
242f0                 | ' waitms(1)                                                   	' wait for stabilization
242f0     01 12 06 F6 | 	mov	arg01, #1
242f4     6C 2F B0 FD | 	call	#__system___waitms
242f8     1C 00 00 FF 
242fc     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14444
24300     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
24304     61 E4 05 F1 | 	add	objptr, #97
24308     F2 28 62 FC | 	wrlong	local02, objptr
2430c     14 27 52 F6 | 	abs	local01, local02 wc
24310     04 26 46 F0 | 	shr	local01, #4
24314     13 27 82 F6 | 	negc	local01, local01
24318     9C E4 05 F1 | 	add	objptr, #156
2431c     F2 26 62 FC | 	wrlong	local01, objptr
24320     A4 E4 85 F1 | 	sub	objptr, #164
24324     F2 28 02 FB | 	rdlong	local02, objptr
24328     08 E4 05 F1 | 	add	objptr, #8
2432c     F2 26 02 FB | 	rdlong	local01, objptr
24330     13 29 02 FD | 	qmul	local02, local01
24334                 | ' lines:=timings[11]
24334                 | ' t_lines:=lines/16
24334                 | ' buflen:=cpl*lines						' framebuffer length in longs
24334     29 E4 85 F1 | 	sub	objptr, #41
24338     19 26 C6 F9 | 	decod	local01, #25
2433c     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
24340     18 28 62 FD | 	getqx	local02
24344     F2 28 62 FC | 	wrlong	local02, objptr
24348     38 E4 85 F1 | 	sub	objptr, #56
2434c     02 28 66 F0 | 	shl	local02, #2
24350     14 27 82 F1 | 	sub	local01, local02
24354     F2 26 62 FC | 	wrlong	local01, objptr
24358     FD E4 05 F1 | 	add	objptr, #253
2435c     F2 28 02 FB | 	rdlong	local02, objptr
24360     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
24364     0D 29 02 FD | 	qmul	local02, arg05
24368                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
24368                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
24368     F9 E4 85 F1 | 	sub	objptr, #249
2436c                 | ' mode_ptr:=@timings						' set pointers to timings
2436c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
24370                 | ' graphmode:=1024+512+192+48							' det global variable
24370                 | ' makedl(graphmode)							' make a DL for the mode
24370     03 00 00 FF 
24374     F0 12 06 F6 | 	mov	arg01, ##1776
24378     18 28 62 FD | 	getqx	local02
2437c     14 27 82 F1 | 	sub	local01, local02
24380     F2 26 62 FC | 	wrlong	local01, objptr
24384     14 E4 05 F1 | 	add	objptr, #20
24388     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
2438c     79 E4 05 F1 | 	add	objptr, #121
24390     03 00 80 FF 
24394     F2 E0 69 FC | 	wrlong	##1776, objptr
24398     91 E4 85 F1 | 	sub	objptr, #145
2439c     1C 00 00 FF 
243a0     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
243a4     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
243a8                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
243a8     F2 26 02 FB | 	rdlong	local01, objptr
243ac     DD E4 05 F1 | 	add	objptr, #221
243b0     F2 26 62 FC | 	wrlong	local01, objptr
243b4                 | ' s_font_ptr:=font_ptr
243b4     D5 E4 85 F1 | 	sub	objptr, #213
243b8     F2 26 02 FB | 	rdlong	local01, objptr
243bc     D9 E4 05 F1 | 	add	objptr, #217
243c0     F2 26 62 FC | 	wrlong	local01, objptr
243c4                 | ' s_lines:=lines
243c4     80 E4 85 F1 | 	sub	objptr, #128
243c8     F2 26 02 FB | 	rdlong	local01, objptr
243cc     84 E4 05 F1 | 	add	objptr, #132
243d0     F2 26 62 FC | 	wrlong	local01, objptr
243d4                 | ' s_buflen:=buflen
243d4     AD E4 85 F1 | 	sub	objptr, #173
243d8     F2 26 02 FB | 	rdlong	local01, objptr
243dc     B5 E4 05 F1 | 	add	objptr, #181
243e0     F2 26 62 FC | 	wrlong	local01, objptr
243e4                 | ' s_cpl:=cpl
243e4     94 E4 85 F1 | 	sub	objptr, #148
243e8     F2 26 02 FB | 	rdlong	local01, objptr
243ec     90 E4 05 F1 | 	add	objptr, #144
243f0     F2 26 62 FC | 	wrlong	local01, objptr
243f4                 | ' s_cpl1:=cpl
243f4     90 E4 85 F1 | 	sub	objptr, #144
243f8     F2 26 02 FB | 	rdlong	local01, objptr
243fc     98 E4 05 F1 | 	add	objptr, #152
24400     F2 26 62 FC | 	wrlong	local01, objptr
24404                 | ' st_lines:=t_lines
24404     0C E4 05 F1 | 	add	objptr, #12
24408     F2 26 02 FB | 	rdlong	local01, objptr
2440c     04 E4 05 F1 | 	add	objptr, #4
24410     F2 26 62 FC | 	wrlong	local01, objptr
24414                 | ' ppl:=ppl/xzoom  
24414     28 E4 85 F1 | 	sub	objptr, #40
24418     F2 90 02 FB | 	rdlong	muldiva_, objptr
2441c     2C E4 05 F1 | 	add	objptr, #44
24420     F2 92 02 FB | 	rdlong	muldivb_, objptr
24424     05 E5 85 F1 | 	sub	objptr, #261
24428     BA 00 A0 FD | 	call	#divide_
2442c     D9 E4 05 F1 | 	add	objptr, #217
24430     F2 92 62 FC | 	wrlong	muldivb_, objptr
24434                 | ' s_ppl:=ppl
24434     1C E4 05 F1 | 	add	objptr, #28
24438     F2 92 62 FC | 	wrlong	muldivb_, objptr
2443c     F5 E4 85 F1 | 	sub	objptr, #245
24440                 | ' waitms(20)							' wait 
24440     14 12 06 F6 | 	mov	arg01, #20
24444     1C 2E B0 FD | 	call	#__system___waitms
24448                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
24448     04 E4 05 F1 | 	add	objptr, #4
2444c     F2 12 02 FB | 	rdlong	arg01, objptr
24450     04 E4 85 F1 | 	sub	objptr, #4
24454     F2 16 02 FB | 	rdlong	arg03, objptr
24458     09 17 82 F1 | 	sub	arg03, arg01
2445c     20 14 06 F6 | 	mov	arg02, #32
24460     00 18 06 F6 | 	mov	arg04, #0
24464     01 1A 06 F6 | 	mov	arg05, #1
24468     0B 00 00 FF 
2446c     CC E4 05 F1 | 	add	objptr, ##5836
24470     AC 1F B0 FD | 	call	#_psram_spin2_fill
24474     0B 00 00 FF 
24478     CC E4 85 F1 | 	sub	objptr, ##5836
2447c     A7 F0 03 F6 | 	mov	ptra, fp
24480     B2 00 A0 FD | 	call	#popregs_
24484                 | _hg010b_spin2_setmode_ret
24484     2D 00 64 FD | 	ret
24488                 | 
24488                 | ' 
24488                 | ' '****************************************************************************************************************
24488                 | ' '                                                                                                             	*
24488                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
24488                 | ' '                                                                                                             	*
24488                 | ' '****************************************************************************************************************
24488                 | ' 
24488                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
24488                 | _hg010b_spin2_makedl
24488                 | ' 
24488                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
24488                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
24488                 | ' repeat i from 0 to 11                                                           ' clear DL
24488     00 00 06 F6 | 	mov	_var01, #0
2448c     ED E5 05 F1 | 	add	objptr, #493
24490     97 0E 48 FB | 	callpa	#(@LR__2761-@LR__2760)>>2,fcache_load_ptr_
24494                 | LR__2760
24494                 | '   displaylist[i]:=0 
24494     00 03 02 F6 | 	mov	_var02, _var01
24498     02 02 66 F0 | 	shl	_var02, #2
2449c     F2 02 02 F1 | 	add	_var02, objptr
244a0     01 01 68 FC | 	wrlong	#0, _var02
244a4     01 00 06 F1 | 	add	_var01, #1
244a8     0C 00 56 F2 | 	cmps	_var01, #12 wc
244ac     E4 FF 9F CD |  if_b	jmp	#LR__2760
244b0                 | LR__2761
244b0                 | '                         ' 
244b0                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
244b0     8C E5 85 F1 | 	sub	objptr, #396
244b4     F2 02 02 FB | 	rdlong	_var02, objptr
244b8     14 02 66 F0 | 	shl	_var02, #20
244bc     01 02 06 F1 | 	add	_var02, #1
244c0     04 E4 85 F1 | 	sub	objptr, #4
244c4     F2 00 02 FB | 	rdlong	_var01, objptr
244c8     02 00 66 F0 | 	shl	_var01, #2
244cc     04 00 66 F0 | 	shl	_var01, #4
244d0     00 03 02 F1 | 	add	_var02, _var01
244d4     90 E5 05 F1 | 	add	objptr, #400
244d8     F2 02 62 FC | 	wrlong	_var02, objptr
244dc     ED E5 85 F1 | 	sub	objptr, #493
244e0                 | ' displaylist[1]:=buf_ptr<<4+%10  
244e0     F2 02 02 FB | 	rdlong	_var02, objptr
244e4     04 02 66 F0 | 	shl	_var02, #4
244e8     02 02 06 F1 | 	add	_var02, #2
244ec     F1 E5 05 F1 | 	add	objptr, #497
244f0     F2 02 62 FC | 	wrlong	_var02, objptr
244f4                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
244f4     04 E4 85 F1 | 	sub	objptr, #4
244f8     F2 02 02 F6 | 	mov	_var02, objptr
244fc     CD E5 85 F1 | 	sub	objptr, #461
24500     F2 02 62 FC | 	wrlong	_var02, objptr
24504     20 E4 85 F1 | 	sub	objptr, #32
24508                 | _hg010b_spin2_makedl_ret
24508     2D 00 64 FD | 	ret
2450c                 | 
2450c                 | ' 
2450c                 | ' 
2450c                 | ' '****************************************************************************************************************
2450c                 | ' '                                                                        					*
2450c                 | ' '  Graphic primitives                                                    					*
2450c                 | ' '                                                                        					*
2450c                 | ' '****************************************************************************************************************
2450c                 | ' 
2450c                 | ' pub setspriteptr(num,ptr)
2450c                 | _hg010b_spin2_setspriteptr
2450c                 | ' long[@spr1ptr+12*num]:=ptr
2450c     11 E5 05 F1 | 	add	objptr, #273
24510     F2 00 02 F6 | 	mov	_var01, objptr
24514     09 03 02 F6 | 	mov	_var02, arg01
24518     01 02 66 F0 | 	shl	_var02, #1
2451c     09 03 02 F1 | 	add	_var02, arg01
24520     02 02 66 F0 | 	shl	_var02, #2
24524     01 01 02 F1 | 	add	_var01, _var02
24528     00 15 62 FC | 	wrlong	arg02, _var01
2452c     11 E5 85 F1 | 	sub	objptr, #273
24530                 | _hg010b_spin2_setspriteptr_ret
24530     2D 00 64 FD | 	ret
24534                 | 
24534                 | ' 
24534                 | ' pub setspritepos(num,x,y)
24534                 | _hg010b_spin2_setspritepos
24534                 | ' if y>601
24534     01 00 00 FF 
24538     5A 16 56 F2 | 	cmps	arg03, ##602 wc
2453c                 | '   y:=601
2453c     01 00 00 3F 
24540     59 16 06 36 |  if_ae	mov	arg03, ##601
24544                 | ' if x>1024
24544     02 00 00 FF 
24548     01 14 56 F2 | 	cmps	arg02, ##1025 wc
2454c                 | '   x:=1024
2454c     0A 14 C6 39 |  if_ae	decod	arg02, #10
24550                 | ' word[@spr1ptr+12*num+4]:=x
24550     11 E5 05 F1 | 	add	objptr, #273
24554     F2 00 02 F6 | 	mov	_var01, objptr
24558     09 03 02 F6 | 	mov	_var02, arg01
2455c     01 02 66 F0 | 	shl	_var02, #1
24560     09 03 02 F1 | 	add	_var02, arg01
24564     02 02 66 F0 | 	shl	_var02, #2
24568     01 01 02 F1 | 	add	_var01, _var02
2456c     04 00 06 F1 | 	add	_var01, #4
24570     00 15 52 FC | 	wrword	arg02, _var01
24574                 | ' word[@spr1ptr+12*num+6]:=y
24574     F2 00 02 F6 | 	mov	_var01, objptr
24578     09 03 02 F6 | 	mov	_var02, arg01
2457c     01 02 66 F0 | 	shl	_var02, #1
24580     09 03 02 F1 | 	add	_var02, arg01
24584     02 02 66 F0 | 	shl	_var02, #2
24588     01 01 02 F1 | 	add	_var01, _var02
2458c     06 00 06 F1 | 	add	_var01, #6
24590     00 17 52 FC | 	wrword	arg03, _var01
24594     11 E5 85 F1 | 	sub	objptr, #273
24598                 | _hg010b_spin2_setspritepos_ret
24598     2D 00 64 FD | 	ret
2459c                 | 
2459c                 | ' 
2459c                 | ' pub setspritesize(num,w,h)
2459c                 | _hg010b_spin2_setspritesize
2459c                 | ' word[@spr1ptr+12*num+8]:=w
2459c     11 E5 05 F1 | 	add	objptr, #273
245a0     F2 00 02 F6 | 	mov	_var01, objptr
245a4     09 03 02 F6 | 	mov	_var02, arg01
245a8     01 02 66 F0 | 	shl	_var02, #1
245ac     09 03 02 F1 | 	add	_var02, arg01
245b0     02 02 66 F0 | 	shl	_var02, #2
245b4     01 01 02 F1 | 	add	_var01, _var02
245b8     08 00 06 F1 | 	add	_var01, #8
245bc     00 15 52 FC | 	wrword	arg02, _var01
245c0                 | ' word[@spr1ptr+12*num+10]:=h
245c0     F2 00 02 F6 | 	mov	_var01, objptr
245c4     09 03 02 F6 | 	mov	_var02, arg01
245c8     01 02 66 F0 | 	shl	_var02, #1
245cc     09 03 02 F1 | 	add	_var02, arg01
245d0     02 02 66 F0 | 	shl	_var02, #2
245d4     01 01 02 F1 | 	add	_var01, _var02
245d8     0A 00 06 F1 | 	add	_var01, #10
245dc     00 17 52 FC | 	wrword	arg03, _var01
245e0     11 E5 85 F1 | 	sub	objptr, #273
245e4                 | _hg010b_spin2_setspritesize_ret
245e4     2D 00 64 FD | 	ret
245e8                 | 
245e8                 | ' 
245e8                 | ' 
245e8                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
245e8                 | ' 
245e8                 | ' 
245e8                 | ' pub putpixel(x,y,c)
245e8                 | _hg010b_spin2_putpixel
245e8     04 4A 05 F6 | 	mov	COUNT_, #4
245ec     A8 00 A0 FD | 	call	#pushregs_
245f0     09 27 02 F6 | 	mov	local01, arg01
245f4                 | ' 
245f4                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
245f4     00 28 06 F6 | 	mov	local02, #0
245f8     00 26 56 F2 | 	cmps	local01, #0 wc
245fc     01 28 66 36 |  if_ae	neg	local02, #1
24600     E9 E4 05 F1 | 	add	objptr, #233
24604     F2 1A 02 FB | 	rdlong	arg05, objptr
24608     02 1A 66 F0 | 	shl	arg05, #2
2460c     0D 27 52 F2 | 	cmps	local01, arg05 wc
24610     15 2B A2 F1 | 	subx	local03, local03
24614     15 29 02 F5 | 	and	local02, local03
24618     00 2A 06 F6 | 	mov	local03, #0
2461c     00 14 56 F2 | 	cmps	arg02, #0 wc
24620     01 2A 66 36 |  if_ae	neg	local03, #1
24624     15 29 02 F5 | 	and	local02, local03
24628     04 E4 85 F1 | 	sub	objptr, #4
2462c     F2 2A 02 FB | 	rdlong	local03, objptr
24630     E5 E4 85 F1 | 	sub	objptr, #229
24634     15 15 52 F2 | 	cmps	arg02, local03 wc
24638     16 2D A2 F1 | 	subx	local04, local04
2463c     16 29 CA F7 | 	test	local02, local04 wz
24640     48 00 90 AD |  if_e	jmp	#LR__2770
24644     DD E4 05 F1 | 	add	objptr, #221
24648     F2 12 02 FB | 	rdlong	arg01, objptr
2464c     14 E4 05 F1 | 	add	objptr, #20
24650     F2 2C 02 FB | 	rdlong	local04, objptr
24654     02 2C 66 F0 | 	shl	local04, #2
24658     0A 2D 02 FD | 	qmul	local04, arg02
2465c                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
2465c     0B 15 02 F6 | 	mov	arg02, arg03
24660     01 16 06 F6 | 	mov	arg03, #1
24664     00 18 06 F6 | 	mov	arg04, #0
24668     01 1A 06 F6 | 	mov	arg05, #1
2466c     0A 00 00 FF 
24670     DB E5 05 F1 | 	add	objptr, ##5595
24674     18 2C 62 FD | 	getqx	local04
24678     13 2D 02 F1 | 	add	local04, local01
2467c     16 13 02 F1 | 	add	arg01, local04
24680     9C 1D B0 FD | 	call	#_psram_spin2_fill
24684     0B 00 00 FF 
24688     CC E4 85 F1 | 	sub	objptr, ##5836
2468c                 | LR__2770
2468c     A7 F0 03 F6 | 	mov	ptra, fp
24690     B2 00 A0 FD | 	call	#popregs_
24694                 | _hg010b_spin2_putpixel_ret
24694     2D 00 64 FD | 	ret
24698                 | 
24698                 | ' 
24698                 | ' pub putpixel2(x,y,c)
24698                 | _hg010b_spin2_putpixel2
24698     02 4A 05 F6 | 	mov	COUNT_, #2
2469c     A8 00 A0 FD | 	call	#pushregs_
246a0     DD E4 05 F1 | 	add	objptr, #221
246a4     F2 26 02 FB | 	rdlong	local01, objptr
246a8     14 E4 05 F1 | 	add	objptr, #20
246ac     F2 1A 02 FB | 	rdlong	arg05, objptr
246b0     02 1A 66 F0 | 	shl	arg05, #2
246b4     0A 1B 02 FD | 	qmul	arg05, arg02
246b8                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
246b8     0B 15 02 F6 | 	mov	arg02, arg03
246bc     01 16 06 F6 | 	mov	arg03, #1
246c0     00 18 06 F6 | 	mov	arg04, #0
246c4     01 1A 06 F6 | 	mov	arg05, #1
246c8     0A 00 00 FF 
246cc     DB E5 05 F1 | 	add	objptr, ##5595
246d0     18 28 62 FD | 	getqx	local02
246d4     09 29 02 F1 | 	add	local02, arg01
246d8     14 27 02 F1 | 	add	local01, local02
246dc     13 13 02 F6 | 	mov	arg01, local01
246e0     3C 1D B0 FD | 	call	#_psram_spin2_fill
246e4     0B 00 00 FF 
246e8     CC E4 85 F1 | 	sub	objptr, ##5836
246ec     A7 F0 03 F6 | 	mov	ptra, fp
246f0     B2 00 A0 FD | 	call	#popregs_
246f4                 | _hg010b_spin2_putpixel2_ret
246f4     2D 00 64 FD | 	ret
246f8                 | 
246f8                 | ' 
246f8                 | ' pub getpixel2(x,y): c 
246f8                 | _hg010b_spin2_getpixel2
246f8     02 4A 05 F6 | 	mov	COUNT_, #2
246fc     A8 00 A0 FD | 	call	#pushregs_
24700     0C F0 07 F1 | 	add	ptra, #12
24704     04 4E 05 F1 | 	add	fp, #4
24708     A7 12 62 FC | 	wrlong	arg01, fp
2470c     04 4E 05 F1 | 	add	fp, #4
24710     A7 14 62 FC | 	wrlong	arg02, fp
24714     08 4E 85 F1 | 	sub	fp, #8
24718     A7 00 68 FC | 	wrlong	#0, fp
2471c     A7 12 02 F6 | 	mov	arg01, fp
24720     DD E4 05 F1 | 	add	objptr, #221
24724     F2 14 02 FB | 	rdlong	arg02, objptr
24728     14 E4 05 F1 | 	add	objptr, #20
2472c     F2 16 02 FB | 	rdlong	arg03, objptr
24730     02 16 66 F0 | 	shl	arg03, #2
24734     08 4E 05 F1 | 	add	fp, #8
24738     A7 FA 01 FB | 	rdlong	result1, fp
2473c     FD 16 02 FD | 	qmul	arg03, result1
24740                 | ' 
24740                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
24740     04 4E 85 F1 | 	sub	fp, #4
24744     A7 26 02 FB | 	rdlong	local01, fp
24748     04 4E 85 F1 | 	sub	fp, #4
2474c     01 16 06 F6 | 	mov	arg03, #1
24750     0A 00 00 FF 
24754     DB E5 05 F1 | 	add	objptr, ##5595
24758     18 28 62 FD | 	getqx	local02
2475c     13 29 02 F1 | 	add	local02, local01
24760     14 15 02 F1 | 	add	arg02, local02
24764     80 1B B0 FD | 	call	#_psram_spin2_read1
24768     0B 00 00 FF 
2476c     CC E4 85 F1 | 	sub	objptr, ##5836
24770                 | ' return c
24770     A7 FA 01 FB | 	rdlong	result1, fp
24774     A7 F0 03 F6 | 	mov	ptra, fp
24778     B2 00 A0 FD | 	call	#popregs_
2477c                 | _hg010b_spin2_getpixel2_ret
2477c     2D 00 64 FD | 	ret
24780                 | 
24780                 | '   
24780                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
24780                 | ' 
24780                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
24780                 | _hg010b_spin2_fastline
24780     02 4A 05 F6 | 	mov	COUNT_, #2
24784     A8 00 A0 FD | 	call	#pushregs_
24788     09 27 02 F6 | 	mov	local01, arg01
2478c     0A 29 02 F6 | 	mov	local02, arg02
24790                 | ' 
24790                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
24790     00 16 56 F2 | 	cmps	arg03, #0 wc
24794     F4 00 90 CD |  if_b	jmp	#LR__2780
24798     01 00 00 FF 
2479c     2A E4 05 F1 | 	add	objptr, ##554
247a0     F2 1A 02 FB | 	rdlong	arg05, objptr
247a4     01 00 00 FF 
247a8     2A E4 85 F1 | 	sub	objptr, ##554
247ac     0D 17 52 F2 | 	cmps	arg03, arg05 wc
247b0     D8 00 90 3D |  if_ae	jmp	#LR__2780
247b4     00 26 56 F2 | 	cmps	local01, #0 wc
247b8     00 28 56 C2 |  if_b	cmps	local02, #0 wc
247bc     CC 00 90 CD |  if_b	jmp	#LR__2780
247c0     01 00 00 FF 
247c4     26 E4 05 F1 | 	add	objptr, ##550
247c8     F2 1A 02 FB | 	rdlong	arg05, objptr
247cc     01 00 00 FF 
247d0     26 E4 85 F1 | 	sub	objptr, ##550
247d4     0D 27 5A F2 | 	cmps	local01, arg05 wcz
247d8     01 00 00 1F 
247dc     26 E4 05 11 |  if_a	add	objptr, ##550
247e0     F2 12 02 1B |  if_a	rdlong	arg01, objptr
247e4     01 00 00 1F 
247e8     26 E4 85 11 |  if_a	sub	objptr, ##550
247ec     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
247f0                 | '   return
247f0     98 00 90 1D |  if_a	jmp	#LR__2780
247f4     14 27 5A F2 | 	cmps	local01, local02 wcz
247f8     13 1B 02 16 |  if_a	mov	arg05, local01
247fc     14 27 02 16 |  if_a	mov	local01, local02
24800     0D 29 02 16 |  if_a	mov	local02, arg05
24804     00 26 56 F2 | 	cmps	local01, #0 wc
24808     00 26 06 C6 |  if_b	mov	local01, #0
2480c     01 00 00 FF 
24810     26 E4 05 F1 | 	add	objptr, ##550
24814     F2 1A 02 FB | 	rdlong	arg05, objptr
24818     01 00 00 FF 
2481c     26 E4 85 F1 | 	sub	objptr, ##550
24820     0D 29 52 F2 | 	cmps	local02, arg05 wc
24824     01 00 00 3F 
24828     26 E4 05 31 |  if_ae	add	objptr, ##550
2482c     F2 28 02 3B |  if_ae	rdlong	local02, objptr
24830     01 00 00 3F 
24834     26 E4 85 31 |  if_ae	sub	objptr, ##550
24838     DD E4 05 F1 | 	add	objptr, #221
2483c     F2 12 02 FB | 	rdlong	arg01, objptr
24840     14 E4 05 F1 | 	add	objptr, #20
24844     F2 1A 02 FB | 	rdlong	arg05, objptr
24848     02 1A 66 F0 | 	shl	arg05, #2
2484c     0B 1B 02 FD | 	qmul	arg05, arg03
24850                 | ' if x1>x2
24850                 | '   x1,x2:=x2,x1
24850                 | ' if x1<0 
24850                 | '   x1:=0
24850                 | ' if x2>=xres
24850                 | '   x2:=xres-1  
24850     01 28 86 31 |  if_ae	sub	local02, #1
24854                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
24854     01 16 06 F6 | 	mov	arg03, #1
24858     14 17 02 F1 | 	add	arg03, local02
2485c     13 17 82 F1 | 	sub	arg03, local01
24860     0C 15 02 F6 | 	mov	arg02, arg04
24864     00 18 06 F6 | 	mov	arg04, #0
24868     01 1A 06 F6 | 	mov	arg05, #1
2486c     0A 00 00 FF 
24870     DB E5 05 F1 | 	add	objptr, ##5595
24874     18 28 62 FD | 	getqx	local02
24878     13 29 02 F1 | 	add	local02, local01
2487c     14 13 02 F1 | 	add	arg01, local02
24880     9C 1B B0 FD | 	call	#_psram_spin2_fill
24884     0B 00 00 FF 
24888     CC E4 85 F1 | 	sub	objptr, ##5836
2488c                 | LR__2780
2488c     A7 F0 03 F6 | 	mov	ptra, fp
24890     B2 00 A0 FD | 	call	#popregs_
24894                 | _hg010b_spin2_fastline_ret
24894     2D 00 64 FD | 	ret
24898                 | 
24898                 | ' 
24898                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
24898                 | _hg010b_spin2_draw
24898     0E 4A 05 F6 | 	mov	COUNT_, #14
2489c     A8 00 A0 FD | 	call	#pushregs_
248a0     09 27 02 F6 | 	mov	local01, arg01
248a4     0A 29 02 F6 | 	mov	local02, arg02
248a8     0B 2B 02 F6 | 	mov	local03, arg03
248ac     0C 2D 02 F6 | 	mov	local04, arg04
248b0     0D 2F 02 F6 | 	mov	local05, arg05
248b4                 | ' 
248b4                 | ' if (y1==y2)
248b4     16 29 0A F2 | 	cmp	local02, local04 wz
248b8     18 00 90 5D |  if_ne	jmp	#LR__2790
248bc                 | '   fastline(x1,x2,y1,c)
248bc     13 13 02 F6 | 	mov	arg01, local01
248c0     15 15 02 F6 | 	mov	arg02, local03
248c4     14 17 02 F6 | 	mov	arg03, local02
248c8     17 19 02 F6 | 	mov	arg04, local05
248cc     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
248d0     F8 00 90 FD | 	jmp	#LR__2796
248d4                 | LR__2790
248d4                 | ' else  
248d4                 | '   x:=x1
248d4     13 31 02 F6 | 	mov	local06, local01
248d8                 | '   y:=y1
248d8     14 33 02 F6 | 	mov	local07, local02
248dc                 | ' 
248dc                 | '   if (x1<x2) 
248dc     15 27 52 F2 | 	cmps	local01, local03 wc
248e0                 | '     xi:=1
248e0     01 34 06 C6 |  if_b	mov	local08, #1
248e4                 | '     dx:=x2-x1
248e4     15 37 02 C6 |  if_b	mov	local09, local03
248e8     13 37 82 C1 |  if_b	sub	local09, local01
248ec                 | '   else
248ec                 | '     xi:=-1
248ec     01 34 66 36 |  if_ae	neg	local08, #1
248f0                 | '     dx:=x1-x2
248f0     15 27 82 31 |  if_ae	sub	local01, local03
248f4     13 37 02 36 |  if_ae	mov	local09, local01
248f8                 | '   
248f8                 | '   if (y1<y2) 
248f8     16 29 52 F2 | 	cmps	local02, local04 wc
248fc                 | '     yi:=1
248fc     01 38 06 C6 |  if_b	mov	local10, #1
24900                 | '     dy:=y2-y1
24900     16 3B 02 C6 |  if_b	mov	local11, local04
24904     14 3B 82 C1 |  if_b	sub	local11, local02
24908                 | '   else
24908                 | '     yi:=-1
24908     01 38 66 36 |  if_ae	neg	local10, #1
2490c                 | '     dy:=y1-y2
2490c     16 29 82 31 |  if_ae	sub	local02, local04
24910     14 3B 02 36 |  if_ae	mov	local11, local02
24914                 | ' 
24914                 | '   putpixel(x,y,c)
24914     17 17 02 F6 | 	mov	arg03, local05
24918     18 13 02 F6 | 	mov	arg01, local06
2491c     19 15 02 F6 | 	mov	arg02, local07
24920     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
24924                 | ' 
24924                 | '   if (dx>dy)
24924     1D 37 5A F2 | 	cmps	local09, local11 wcz
24928     50 00 90 ED |  if_be	jmp	#LR__2792
2492c                 | '     ai:=(dy-dx)*2
2492c     1D 3D 02 F6 | 	mov	local12, local11
24930     1B 3D 82 F1 | 	sub	local12, local09
24934     01 3C 66 F0 | 	shl	local12, #1
24938                 | '     bi:=dy*2
24938     01 3A 66 F0 | 	shl	local11, #1
2493c     1D 3F 02 F6 | 	mov	local13, local11
24940                 | '     d:= bi-dx
24940     1F 41 02 F6 | 	mov	local14, local13
24944     1B 41 82 F1 | 	sub	local14, local09
24948                 | '     repeat while (x<>x2) 
24948                 | LR__2791
24948     15 31 0A F2 | 	cmp	local06, local03 wz
2494c     7C 00 90 AD |  if_e	jmp	#LR__2795
24950                 | '       if (d>=0) 
24950     00 40 56 F2 | 	cmps	local14, #0 wc
24954                 | '         x+=xi
24954     1A 31 02 31 |  if_ae	add	local06, local08
24958                 | '         y+=yi
24958     1C 33 02 31 |  if_ae	add	local07, local10
2495c                 | '         d+=ai
2495c     1E 41 02 31 |  if_ae	add	local14, local12
24960                 | '       else
24960                 | '         d+=bi
24960     1F 41 02 C1 |  if_b	add	local14, local13
24964                 | '         x+=xi
24964     1A 31 02 C1 |  if_b	add	local06, local08
24968                 | '       putpixel(x,y,c)
24968     18 13 02 F6 | 	mov	arg01, local06
2496c     19 15 02 F6 | 	mov	arg02, local07
24970     17 17 02 F6 | 	mov	arg03, local05
24974     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
24978     CC FF 9F FD | 	jmp	#LR__2791
2497c                 | LR__2792
2497c                 | '   else
2497c                 | '     ai:=(dx-dy)*2
2497c     1B 3D 02 F6 | 	mov	local12, local09
24980     1D 3D 82 F1 | 	sub	local12, local11
24984     01 3C 66 F0 | 	shl	local12, #1
24988                 | '     bi:=dx*2
24988     01 36 66 F0 | 	shl	local09, #1
2498c     1B 3F 02 F6 | 	mov	local13, local09
24990                 | '     d:=bi-dy
24990     1F 41 02 F6 | 	mov	local14, local13
24994     1D 41 82 F1 | 	sub	local14, local11
24998                 | '     repeat while (y<>y2)
24998                 | LR__2793
24998     16 33 0A F2 | 	cmp	local07, local04 wz
2499c     2C 00 90 AD |  if_e	jmp	#LR__2794
249a0                 | '       if (d>=0)
249a0     00 40 56 F2 | 	cmps	local14, #0 wc
249a4                 | '         x+=xi
249a4     1A 31 02 31 |  if_ae	add	local06, local08
249a8                 | '         y+=yi
249a8     1C 33 02 31 |  if_ae	add	local07, local10
249ac                 | '         d+=ai
249ac     1E 41 02 31 |  if_ae	add	local14, local12
249b0                 | '       else
249b0                 | '         d+=bi
249b0     1F 41 02 C1 |  if_b	add	local14, local13
249b4                 | '         y+=yi
249b4     1C 33 02 C1 |  if_b	add	local07, local10
249b8                 | '       putpixel(x, y,c)
249b8     18 13 02 F6 | 	mov	arg01, local06
249bc     19 15 02 F6 | 	mov	arg02, local07
249c0     17 17 02 F6 | 	mov	arg03, local05
249c4     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
249c8     CC FF 9F FD | 	jmp	#LR__2793
249cc                 | LR__2794
249cc                 | LR__2795
249cc                 | LR__2796
249cc     A7 F0 03 F6 | 	mov	ptra, fp
249d0     B2 00 A0 FD | 	call	#popregs_
249d4                 | _hg010b_spin2_draw_ret
249d4     2D 00 64 FD | 	ret
249d8                 | 
249d8                 | '  
249d8                 | ' pub fillpush(val) 
249d8                 | _hg010b_spin2_fillpush
249d8                 | ' fillstack[fillptr]:=val
249d8     0B 00 00 FF 
249dc     BA E4 05 F1 | 	add	objptr, ##5818
249e0     F2 00 02 FB | 	rdlong	_var01, objptr
249e4     02 00 66 F0 | 	shl	_var01, #2
249e8     0A 00 00 FF 
249ec     00 E4 85 F1 | 	sub	objptr, ##5120
249f0     F2 00 02 F1 | 	add	_var01, objptr
249f4     00 13 62 FC | 	wrlong	arg01, _var01
249f8                 | ' fillptr+=1   
249f8     0A 00 00 FF 
249fc     00 E4 05 F1 | 	add	objptr, ##5120
24a00     F2 00 02 FB | 	rdlong	_var01, objptr
24a04     01 00 06 F1 | 	add	_var01, #1
24a08     F2 00 62 FC | 	wrlong	_var01, objptr
24a0c     0B 00 00 FF 
24a10     BA E4 85 F1 | 	sub	objptr, ##5818
24a14                 | _hg010b_spin2_fillpush_ret
24a14     2D 00 64 FD | 	ret
24a18                 | 
24a18                 | ' 
24a18                 | '     
24a18                 | ' pub fillpop() : val
24a18                 | _hg010b_spin2_fillpop
24a18                 | ' 
24a18                 | ' fillptr-=1
24a18     0B 00 00 FF 
24a1c     BA E4 05 F1 | 	add	objptr, ##5818
24a20     F2 FA 01 FB | 	rdlong	result1, objptr
24a24     01 FA 85 F1 | 	sub	result1, #1
24a28     F2 FA 61 FC | 	wrlong	result1, objptr
24a2c                 | ' if fillptr<0
24a2c     0B 00 00 FF 
24a30     BA E4 85 F1 | 	sub	objptr, ##5818
24a34     00 FA 55 F2 | 	cmps	result1, #0 wc
24a38                 | '   fillptr:=0
24a38     0B 00 00 CF 
24a3c     BA E4 05 C1 |  if_b	add	objptr, ##5818
24a40     F2 00 68 CC |  if_b	wrlong	#0, objptr
24a44     0B 00 00 CF 
24a48     BA E4 85 C1 |  if_b	sub	objptr, ##5818
24a4c                 | '   val:=-12345
24a4c     E7 FF 7F CF 
24a50     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
24a54     28 00 90 CD |  if_b	jmp	#LR__2800
24a58                 | ' else 
24a58                 | '   val:=fillstack[fillptr]
24a58     0B 00 00 FF 
24a5c     BA E4 05 F1 | 	add	objptr, ##5818
24a60     F2 00 02 FB | 	rdlong	_var01, objptr
24a64     02 00 66 F0 | 	shl	_var01, #2
24a68     0A 00 00 FF 
24a6c     00 E4 85 F1 | 	sub	objptr, ##5120
24a70     F2 00 02 F1 | 	add	_var01, objptr
24a74     00 01 02 FB | 	rdlong	_var01, _var01
24a78     01 00 00 FF 
24a7c     BA E4 85 F1 | 	sub	objptr, ##698
24a80                 | LR__2800
24a80                 | ' return val
24a80     00 FB 01 F6 | 	mov	result1, _var01
24a84                 | _hg010b_spin2_fillpop_ret
24a84     2D 00 64 FD | 	ret
24a88                 | 
24a88                 | ' 
24a88                 | '       
24a88                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
24a88                 | _hg010b_spin2_fill
24a88     0B 4A 05 F6 | 	mov	COUNT_, #11
24a8c     A8 00 A0 FD | 	call	#pushregs_
24a90                 | ' 
24a90                 | ' newcolor:=newcolor & 255
24a90     0B 27 E2 F8 | 	getbyte	local01, arg03, #0
24a94                 | ' oldcolor:=oldcolor & 255
24a94     0C 29 E2 F8 | 	getbyte	local02, arg04, #0
24a98                 | ' 
24a98                 | ' if (oldcolor == newcolor) 
24a98     13 29 0A F2 | 	cmp	local02, local01 wz
24a9c                 | '   return
24a9c     70 02 90 AD |  if_e	jmp	#LR__2819
24aa0                 | ' 
24aa0                 | ' fillptr:=0
24aa0     0B 00 00 FF 
24aa4     BA E4 05 F1 | 	add	objptr, ##5818
24aa8     F2 00 68 FC | 	wrlong	#0, objptr
24aac                 | ' fillmax:=0
24aac     04 E4 05 F1 | 	add	objptr, #4
24ab0     F2 00 68 FC | 	wrlong	#0, objptr
24ab4     0B 00 00 FF 
24ab8     BE E4 85 F1 | 	sub	objptr, ##5822
24abc                 | ' fillpush(x)
24abc     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
24ac0                 | ' fillpush(y)
24ac0     0A 13 02 F6 | 	mov	arg01, arg02
24ac4     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
24ac8                 | ' y:=fillpop()
24ac8     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
24acc     FD 2A 02 F6 | 	mov	local03, result1
24ad0                 | ' x:=fillpop()
24ad0     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
24ad4     FD 2C 02 F6 | 	mov	local04, result1
24ad8                 | ' 'pinhigh(38)
24ad8                 | ' repeat while (x>-1)       
24ad8                 | LR__2810
24ad8     00 2C 56 F2 | 	cmps	local04, #0 wc
24adc     30 02 90 CD |  if_b	jmp	#LR__2818
24ae0                 | '  ' pintoggle(39)
24ae0                 | '   x1 := x
24ae0     16 2F 02 F6 | 	mov	local05, local04
24ae4                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
24ae4                 | LR__2811
24ae4     00 30 06 F6 | 	mov	local06, #0
24ae8     00 32 06 F6 | 	mov	local07, #0
24aec     00 2E 56 F2 | 	cmps	local05, #0 wc
24af0     01 32 66 36 |  if_ae	neg	local07, #1
24af4     00 32 0E F2 | 	cmp	local07, #0 wz
24af8     00 30 26 56 |  if_ne	not	local06, #0
24afc     00 34 06 F6 | 	mov	local08, #0
24b00     00 36 06 F6 | 	mov	local09, #0
24b04     15 15 02 F6 | 	mov	arg02, local03
24b08     17 13 02 F6 | 	mov	arg01, local05
24b0c     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
24b10     14 FB 09 F2 | 	cmp	result1, local02 wz
24b14     00 36 26 A6 |  if_e	not	local09, #0
24b18     00 36 0E F2 | 	cmp	local09, #0 wz
24b1c     00 34 26 56 |  if_ne	not	local08, #0
24b20     1A 31 CA F7 | 	test	local06, local08 wz
24b24                 | '     x1--
24b24     01 2E 86 51 |  if_ne	sub	local05, #1
24b28     B8 FF 9F 5D |  if_ne	jmp	#LR__2811
24b2c                 | '   x1++
24b2c     01 2E 06 F1 | 	add	local05, #1
24b30                 | '   spanabove := 0
24b30     00 38 06 F6 | 	mov	local10, #0
24b34                 | '   spanbelow := 0
24b34     00 3A 06 F6 | 	mov	local11, #0
24b38                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
24b38                 | LR__2812
24b38     00 30 06 F6 | 	mov	local06, #0
24b3c     02 00 00 FF 
24b40     00 2E 56 F2 | 	cmps	local05, ##1024 wc
24b44     00 30 26 C6 |  if_b	not	local06, #0
24b48     00 34 06 F6 | 	mov	local08, #0
24b4c     00 36 06 F6 | 	mov	local09, #0
24b50     15 15 02 F6 | 	mov	arg02, local03
24b54     17 13 02 F6 | 	mov	arg01, local05
24b58     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
24b5c     14 FB 09 F2 | 	cmp	result1, local02 wz
24b60     00 36 26 A6 |  if_e	not	local09, #0
24b64     00 36 0E F2 | 	cmp	local09, #0 wz
24b68     00 34 26 56 |  if_ne	not	local08, #0
24b6c     1A 31 CA F7 | 	test	local06, local08 wz
24b70     88 01 90 AD |  if_e	jmp	#LR__2817
24b74                 | '     putpixel2 (x1,y, newcolor & 255)
24b74     13 17 E2 F8 | 	getbyte	arg03, local01, #0
24b78     17 13 02 F6 | 	mov	arg01, local05
24b7c     15 15 02 F6 | 	mov	arg02, local03
24b80     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
24b84                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
24b84     00 30 06 F6 | 	mov	local06, #0
24b88     00 32 06 F6 | 	mov	local07, #0
24b8c     00 38 0E F2 | 	cmp	local10, #0 wz
24b90     01 2A 56 A2 |  if_e	cmps	local03, #1 wc
24b94     01 32 66 26 |  if_nc_and_z	neg	local07, #1
24b98     00 32 0E F2 | 	cmp	local07, #0 wz
24b9c     00 30 26 56 |  if_ne	not	local06, #0
24ba0     00 34 06 F6 | 	mov	local08, #0
24ba4     00 36 06 F6 | 	mov	local09, #0
24ba8     15 15 02 F6 | 	mov	arg02, local03
24bac     01 14 86 F1 | 	sub	arg02, #1
24bb0     17 13 02 F6 | 	mov	arg01, local05
24bb4     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
24bb8     14 FB 09 F2 | 	cmp	result1, local02 wz
24bbc     00 36 26 A6 |  if_e	not	local09, #0
24bc0     00 36 0E F2 | 	cmp	local09, #0 wz
24bc4     00 34 26 56 |  if_ne	not	local08, #0
24bc8     1A 31 CA F7 | 	test	local06, local08 wz
24bcc     1C 00 90 AD |  if_e	jmp	#LR__2813
24bd0                 | '       fillpush(x1)
24bd0     17 13 02 F6 | 	mov	arg01, local05
24bd4     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
24bd8                 | '       fillpush(y-1)
24bd8     15 13 02 F6 | 	mov	arg01, local03
24bdc     01 12 86 F1 | 	sub	arg01, #1
24be0     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
24be4                 | '       spanabove := 1 
24be4     01 38 06 F6 | 	mov	local10, #1
24be8     4C 00 90 FD | 	jmp	#LR__2814
24bec                 | LR__2813
24bec                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
24bec     00 30 06 F6 | 	mov	local06, #0
24bf0     00 32 06 F6 | 	mov	local07, #0
24bf4     00 38 0E F2 | 	cmp	local10, #0 wz
24bf8     01 2A 56 52 |  if_ne	cmps	local03, #1 wc
24bfc     01 32 66 16 |  if_a	neg	local07, #1
24c00     00 32 0E F2 | 	cmp	local07, #0 wz
24c04     00 30 26 56 |  if_ne	not	local06, #0
24c08     00 34 06 F6 | 	mov	local08, #0
24c0c     00 36 06 F6 | 	mov	local09, #0
24c10     15 15 02 F6 | 	mov	arg02, local03
24c14     01 14 86 F1 | 	sub	arg02, #1
24c18     17 13 02 F6 | 	mov	arg01, local05
24c1c     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
24c20     14 FB 09 F2 | 	cmp	result1, local02 wz
24c24     00 36 26 56 |  if_ne	not	local09, #0
24c28     00 36 0E F2 | 	cmp	local09, #0 wz
24c2c     00 34 26 56 |  if_ne	not	local08, #0
24c30     1A 31 CA F7 | 	test	local06, local08 wz
24c34                 | '       spanabove := 0 
24c34     00 38 06 56 |  if_ne	mov	local10, #0
24c38                 | LR__2814
24c38                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
24c38     00 30 06 F6 | 	mov	local06, #0
24c3c     00 32 06 F6 | 	mov	local07, #0
24c40     00 3A 0E F2 | 	cmp	local11, #0 wz
24c44     01 00 00 AF 
24c48     3F 2A 56 A2 |  if_e	cmps	local03, ##575 wc
24c4c     01 32 66 86 |  if_c_and_z	neg	local07, #1
24c50     00 32 0E F2 | 	cmp	local07, #0 wz
24c54     00 30 26 56 |  if_ne	not	local06, #0
24c58     00 34 06 F6 | 	mov	local08, #0
24c5c     00 36 06 F6 | 	mov	local09, #0
24c60     15 15 02 F6 | 	mov	arg02, local03
24c64     01 14 06 F1 | 	add	arg02, #1
24c68     17 13 02 F6 | 	mov	arg01, local05
24c6c     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
24c70     14 FB 09 F2 | 	cmp	result1, local02 wz
24c74     00 36 26 A6 |  if_e	not	local09, #0
24c78     00 36 0E F2 | 	cmp	local09, #0 wz
24c7c     00 34 26 56 |  if_ne	not	local08, #0
24c80     1A 31 CA F7 | 	test	local06, local08 wz
24c84     1C 00 90 AD |  if_e	jmp	#LR__2815
24c88                 | '       fillpush(x1)
24c88     17 13 02 F6 | 	mov	arg01, local05
24c8c     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
24c90                 | '       fillpush(y + 1)
24c90     15 13 02 F6 | 	mov	arg01, local03
24c94     01 12 06 F1 | 	add	arg01, #1
24c98     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
24c9c                 | '       spanBelow := 1
24c9c     01 3A 06 F6 | 	mov	local11, #1
24ca0     50 00 90 FD | 	jmp	#LR__2816
24ca4                 | LR__2815
24ca4                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
24ca4     00 30 06 F6 | 	mov	local06, #0
24ca8     00 32 06 F6 | 	mov	local07, #0
24cac     00 3A 0E F2 | 	cmp	local11, #0 wz
24cb0     01 00 00 5F 
24cb4     3F 2A 56 52 |  if_ne	cmps	local03, ##575 wc
24cb8     01 32 66 46 |  if_c_and_nz	neg	local07, #1
24cbc     00 32 0E F2 | 	cmp	local07, #0 wz
24cc0     00 30 26 56 |  if_ne	not	local06, #0
24cc4     00 34 06 F6 | 	mov	local08, #0
24cc8     00 36 06 F6 | 	mov	local09, #0
24ccc     15 15 02 F6 | 	mov	arg02, local03
24cd0     01 14 06 F1 | 	add	arg02, #1
24cd4     17 13 02 F6 | 	mov	arg01, local05
24cd8     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
24cdc     14 FB 09 F2 | 	cmp	result1, local02 wz
24ce0     00 36 26 56 |  if_ne	not	local09, #0
24ce4     00 36 0E F2 | 	cmp	local09, #0 wz
24ce8     00 34 26 56 |  if_ne	not	local08, #0
24cec     1A 31 CA F7 | 	test	local06, local08 wz
24cf0                 | '       spanbelow := 0
24cf0     00 3A 06 56 |  if_ne	mov	local11, #0
24cf4                 | LR__2816
24cf4                 | '     x1++
24cf4     01 2E 06 F1 | 	add	local05, #1
24cf8     3C FE 9F FD | 	jmp	#LR__2812
24cfc                 | LR__2817
24cfc                 | '   y:=fillpop()
24cfc     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
24d00     FD 2A 02 F6 | 	mov	local03, result1
24d04                 | '   x:=fillpop()
24d04     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
24d08     FD 2C 02 F6 | 	mov	local04, result1
24d0c     C8 FD 9F FD | 	jmp	#LR__2810
24d10                 | LR__2818
24d10                 | LR__2819
24d10     A7 F0 03 F6 | 	mov	ptra, fp
24d14     B2 00 A0 FD | 	call	#popregs_
24d18                 | _hg010b_spin2_fill_ret
24d18     2D 00 64 FD | 	ret
24d1c                 | 
24d1c                 | ' 'pinlow(38)    
24d1c                 | ' 
24d1c                 | ' '-- A filled circle -----------------------------------------------------
24d1c                 | ' 
24d1c                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
24d1c                 | _hg010b_spin2_fcircle
24d1c     08 4A 05 F6 | 	mov	COUNT_, #8
24d20     A8 00 A0 FD | 	call	#pushregs_
24d24     0B 27 02 F6 | 	mov	local01, arg03
24d28     FF FF 7F FF 
24d2c     FE 27 06 FD | 	qmul	local01, ##-2
24d30     09 29 02 F6 | 	mov	local02, arg01
24d34     0A 2B 02 F6 | 	mov	local03, arg02
24d38     0C 2D 02 F6 | 	mov	local04, arg04
24d3c                 | ' 
24d3c                 | ' d:=5-4*r
24d3c     13 19 02 F6 | 	mov	arg04, local01
24d40     02 18 66 F0 | 	shl	arg04, #2
24d44     05 2E 06 F6 | 	mov	local05, #5
24d48     0C 2F 82 F1 | 	sub	local05, arg04
24d4c                 | ' x:=0
24d4c     00 30 06 F6 | 	mov	local06, #0
24d50                 | ' y:=r
24d50                 | ' da:=(-2*r+5)*4
24d50                 | ' db:=3*4
24d50     0C 32 06 F6 | 	mov	local07, #12
24d54                 | ' repeat while (x<=y) 
24d54     18 34 62 FD | 	getqx	local08
24d58     05 34 06 F1 | 	add	local08, #5
24d5c     02 34 66 F0 | 	shl	local08, #2
24d60                 | LR__2820
24d60     13 31 5A F2 | 	cmps	local06, local01 wcz
24d64     B4 00 90 1D |  if_a	jmp	#LR__2822
24d68                 | '   fastline(x0-x,x0+x,y0-y,c)
24d68     14 13 02 F6 | 	mov	arg01, local02
24d6c     18 13 82 F1 | 	sub	arg01, local06
24d70     14 15 02 F6 | 	mov	arg02, local02
24d74     18 15 02 F1 | 	add	arg02, local06
24d78     15 17 02 F6 | 	mov	arg03, local03
24d7c     13 17 82 F1 | 	sub	arg03, local01
24d80     16 19 02 F6 | 	mov	arg04, local04
24d84     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
24d88                 | '   fastline(x0-x,x0+x,y0+y,c)
24d88     14 13 02 F6 | 	mov	arg01, local02
24d8c     18 13 82 F1 | 	sub	arg01, local06
24d90     14 15 02 F6 | 	mov	arg02, local02
24d94     18 15 02 F1 | 	add	arg02, local06
24d98     15 17 02 F6 | 	mov	arg03, local03
24d9c     13 17 02 F1 | 	add	arg03, local01
24da0     16 19 02 F6 | 	mov	arg04, local04
24da4     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
24da8                 | '   fastline(x0-y,x0+y,y0-x,c)
24da8     14 13 02 F6 | 	mov	arg01, local02
24dac     13 13 82 F1 | 	sub	arg01, local01
24db0     14 15 02 F6 | 	mov	arg02, local02
24db4     13 15 02 F1 | 	add	arg02, local01
24db8     15 17 02 F6 | 	mov	arg03, local03
24dbc     18 17 82 F1 | 	sub	arg03, local06
24dc0     16 19 02 F6 | 	mov	arg04, local04
24dc4     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
24dc8                 | '   fastline(x0-y,x0+y,y0+x,c)
24dc8     14 13 02 F6 | 	mov	arg01, local02
24dcc     13 13 82 F1 | 	sub	arg01, local01
24dd0     14 15 02 F6 | 	mov	arg02, local02
24dd4     13 15 02 F1 | 	add	arg02, local01
24dd8     15 17 02 F6 | 	mov	arg03, local03
24ddc     18 17 02 F1 | 	add	arg03, local06
24de0     16 19 02 F6 | 	mov	arg04, local04
24de4     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
24de8                 | '   if d>0 
24de8     01 2E 56 F2 | 	cmps	local05, #1 wc
24dec     18 00 90 CD |  if_b	jmp	#LR__2821
24df0                 | '     d+=da
24df0     1A 2F 02 F1 | 	add	local05, local08
24df4                 | '     y-=1
24df4     01 26 86 F1 | 	sub	local01, #1
24df8                 | '     x+=1
24df8     01 30 06 F1 | 	add	local06, #1
24dfc                 | '     da+=4*4
24dfc     10 34 06 F1 | 	add	local08, #16
24e00                 | '     db+=2*4
24e00     08 32 06 F1 | 	add	local07, #8
24e04     58 FF 9F FD | 	jmp	#LR__2820
24e08                 | LR__2821
24e08                 | '   else
24e08                 | '     d+=db
24e08     19 2F 02 F1 | 	add	local05, local07
24e0c                 | '     x+=1
24e0c     01 30 06 F1 | 	add	local06, #1
24e10                 | '     da+=2*4
24e10     08 34 06 F1 | 	add	local08, #8
24e14                 | '     db+=2*4
24e14     08 32 06 F1 | 	add	local07, #8
24e18     44 FF 9F FD | 	jmp	#LR__2820
24e1c                 | LR__2822
24e1c     A7 F0 03 F6 | 	mov	ptra, fp
24e20     B2 00 A0 FD | 	call	#popregs_
24e24                 | _hg010b_spin2_fcircle_ret
24e24     2D 00 64 FD | 	ret
24e28                 | 
24e28                 | '  
24e28                 | ' '-- A circle ------------------------------------------------------------ 
24e28                 | '  
24e28                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
24e28                 | _hg010b_spin2_circle
24e28     08 4A 05 F6 | 	mov	COUNT_, #8
24e2c     A8 00 A0 FD | 	call	#pushregs_
24e30     0B 27 02 F6 | 	mov	local01, arg03
24e34     FF FF 7F FF 
24e38     FE 27 06 FD | 	qmul	local01, ##-2
24e3c     09 29 02 F6 | 	mov	local02, arg01
24e40     0A 2B 02 F6 | 	mov	local03, arg02
24e44     0C 2D 02 F6 | 	mov	local04, arg04
24e48                 | ' 
24e48                 | '  
24e48                 | ' d:=5-4*r
24e48     13 19 02 F6 | 	mov	arg04, local01
24e4c     02 18 66 F0 | 	shl	arg04, #2
24e50     05 2E 06 F6 | 	mov	local05, #5
24e54     0C 2F 82 F1 | 	sub	local05, arg04
24e58                 | ' x:=0
24e58     00 30 06 F6 | 	mov	local06, #0
24e5c                 | ' y:=r
24e5c                 | ' da:=(-2*r+5)*4
24e5c                 | ' db:=3*4
24e5c     0C 32 06 F6 | 	mov	local07, #12
24e60                 | ' repeat while (x<=y) 
24e60     18 34 62 FD | 	getqx	local08
24e64     05 34 06 F1 | 	add	local08, #5
24e68     02 34 66 F0 | 	shl	local08, #2
24e6c                 | LR__2830
24e6c     13 31 5A F2 | 	cmps	local06, local01 wcz
24e70     F4 00 90 1D |  if_a	jmp	#LR__2832
24e74                 | '   putpixel(x0-x,y0-y,c)
24e74     14 13 02 F6 | 	mov	arg01, local02
24e78     18 13 82 F1 | 	sub	arg01, local06
24e7c     15 15 02 F6 | 	mov	arg02, local03
24e80     13 15 82 F1 | 	sub	arg02, local01
24e84     16 17 02 F6 | 	mov	arg03, local04
24e88     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
24e8c                 | '   putpixel(x0-x,y0+y,c)
24e8c     14 13 02 F6 | 	mov	arg01, local02
24e90     18 13 82 F1 | 	sub	arg01, local06
24e94     15 15 02 F6 | 	mov	arg02, local03
24e98     13 15 02 F1 | 	add	arg02, local01
24e9c     16 17 02 F6 | 	mov	arg03, local04
24ea0     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
24ea4                 | '   putpixel(x0+x,y0-y,c)
24ea4     14 13 02 F6 | 	mov	arg01, local02
24ea8     18 13 02 F1 | 	add	arg01, local06
24eac     15 15 02 F6 | 	mov	arg02, local03
24eb0     13 15 82 F1 | 	sub	arg02, local01
24eb4     16 17 02 F6 | 	mov	arg03, local04
24eb8     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
24ebc                 | '   putpixel(x0+x,y0+y,c)
24ebc     14 13 02 F6 | 	mov	arg01, local02
24ec0     18 13 02 F1 | 	add	arg01, local06
24ec4     15 15 02 F6 | 	mov	arg02, local03
24ec8     13 15 02 F1 | 	add	arg02, local01
24ecc     16 17 02 F6 | 	mov	arg03, local04
24ed0     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
24ed4                 | '   putpixel(x0-y,y0-x,c)
24ed4     14 13 02 F6 | 	mov	arg01, local02
24ed8     13 13 82 F1 | 	sub	arg01, local01
24edc     15 15 02 F6 | 	mov	arg02, local03
24ee0     18 15 82 F1 | 	sub	arg02, local06
24ee4     16 17 02 F6 | 	mov	arg03, local04
24ee8     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
24eec                 | '   putpixel(x0-y,y0+x,c)
24eec     14 13 02 F6 | 	mov	arg01, local02
24ef0     13 13 82 F1 | 	sub	arg01, local01
24ef4     15 15 02 F6 | 	mov	arg02, local03
24ef8     18 15 02 F1 | 	add	arg02, local06
24efc     16 17 02 F6 | 	mov	arg03, local04
24f00     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
24f04                 | '   putpixel(x0+y,y0-x,c)
24f04     14 13 02 F6 | 	mov	arg01, local02
24f08     13 13 02 F1 | 	add	arg01, local01
24f0c     15 15 02 F6 | 	mov	arg02, local03
24f10     18 15 82 F1 | 	sub	arg02, local06
24f14     16 17 02 F6 | 	mov	arg03, local04
24f18     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
24f1c                 | '   putpixel(x0+y,y0+x,c)
24f1c     14 13 02 F6 | 	mov	arg01, local02
24f20     13 13 02 F1 | 	add	arg01, local01
24f24     15 15 02 F6 | 	mov	arg02, local03
24f28     18 15 02 F1 | 	add	arg02, local06
24f2c     16 17 02 F6 | 	mov	arg03, local04
24f30     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
24f34                 | '   if d>0 
24f34     01 2E 56 F2 | 	cmps	local05, #1 wc
24f38     18 00 90 CD |  if_b	jmp	#LR__2831
24f3c                 | '     d+=da
24f3c     1A 2F 02 F1 | 	add	local05, local08
24f40                 | '     y-=1
24f40     01 26 86 F1 | 	sub	local01, #1
24f44                 | '     x+=1
24f44     01 30 06 F1 | 	add	local06, #1
24f48                 | '     da+=4*4
24f48     10 34 06 F1 | 	add	local08, #16
24f4c                 | '     db+=2*4
24f4c     08 32 06 F1 | 	add	local07, #8
24f50     18 FF 9F FD | 	jmp	#LR__2830
24f54                 | LR__2831
24f54                 | '   else
24f54                 | '     d+=db
24f54     19 2F 02 F1 | 	add	local05, local07
24f58                 | '     x+=1
24f58     01 30 06 F1 | 	add	local06, #1
24f5c                 | '     da+=2*4
24f5c     08 34 06 F1 | 	add	local08, #8
24f60                 | '     db+=2*4
24f60     08 32 06 F1 | 	add	local07, #8
24f64     04 FF 9F FD | 	jmp	#LR__2830
24f68                 | LR__2832
24f68     A7 F0 03 F6 | 	mov	ptra, fp
24f6c     B2 00 A0 FD | 	call	#popregs_
24f70                 | _hg010b_spin2_circle_ret
24f70     2D 00 64 FD | 	ret
24f74                 | 
24f74                 | '     
24f74                 | ' '-- A frame (an empty rectangle) ---------------------------------------
24f74                 | ' 
24f74                 | ' pub frame(x1,y1,x2,y2,c)
24f74                 | _hg010b_spin2_frame
24f74     05 4A 05 F6 | 	mov	COUNT_, #5
24f78     A8 00 A0 FD | 	call	#pushregs_
24f7c     09 27 02 F6 | 	mov	local01, arg01
24f80     0A 29 02 F6 | 	mov	local02, arg02
24f84     0B 2B 02 F6 | 	mov	local03, arg03
24f88     0C 2D 02 F6 | 	mov	local04, arg04
24f8c     0D 2F 02 F6 | 	mov	local05, arg05
24f90                 | ' 
24f90                 | ' fastline(x1,x2,y1,c)
24f90     13 13 02 F6 | 	mov	arg01, local01
24f94     15 15 02 F6 | 	mov	arg02, local03
24f98     14 17 02 F6 | 	mov	arg03, local02
24f9c     17 19 02 F6 | 	mov	arg04, local05
24fa0     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
24fa4                 | ' fastline(x1,x2,y2,c)
24fa4     13 13 02 F6 | 	mov	arg01, local01
24fa8     15 15 02 F6 | 	mov	arg02, local03
24fac     16 17 02 F6 | 	mov	arg03, local04
24fb0     17 19 02 F6 | 	mov	arg04, local05
24fb4     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
24fb8                 | ' line(x1,y1,x1,y2,c)
24fb8     13 13 02 F6 | 	mov	arg01, local01
24fbc     14 15 02 F6 | 	mov	arg02, local02
24fc0     13 17 02 F6 | 	mov	arg03, local01
24fc4     16 19 02 F6 | 	mov	arg04, local04
24fc8     17 1B 02 F6 | 	mov	arg05, local05
24fcc                 | ' draw(x1,y1,x2,y2,c)
24fcc     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
24fd0                 | ' line(x2,y1,x2,y2,c)
24fd0     15 13 02 F6 | 	mov	arg01, local03
24fd4     14 15 02 F6 | 	mov	arg02, local02
24fd8     15 17 02 F6 | 	mov	arg03, local03
24fdc     16 19 02 F6 | 	mov	arg04, local04
24fe0     17 1B 02 F6 | 	mov	arg05, local05
24fe4                 | ' draw(x1,y1,x2,y2,c)
24fe4     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
24fe8     A7 F0 03 F6 | 	mov	ptra, fp
24fec     B2 00 A0 FD | 	call	#popregs_
24ff0                 | _hg010b_spin2_frame_ret
24ff0     2D 00 64 FD | 	ret
24ff4                 | 
24ff4                 | ' 
24ff4                 | ' '-- A box (a filled rectangle) ----------------------------------------
24ff4                 | ' 
24ff4                 | ' pub box(x1,y1,x2,y2,c) |yy
24ff4                 | _hg010b_spin2_box
24ff4     06 4A 05 F6 | 	mov	COUNT_, #6
24ff8     A8 00 A0 FD | 	call	#pushregs_
24ffc     09 27 02 F6 | 	mov	local01, arg01
25000     0A 29 02 F6 | 	mov	local02, arg02
25004     0B 2B 02 F6 | 	mov	local03, arg03
25008     0C 2D 02 F6 | 	mov	local04, arg04
2500c     0D 2F 02 F6 | 	mov	local05, arg05
25010                 | ' 
25010                 | ' repeat yy from y1 to y2
25010     14 2D 52 F2 | 	cmps	local04, local02 wc
25014     01 30 86 F6 | 	negc	local06, #1
25018     18 2D 02 F1 | 	add	local04, local06
2501c                 | LR__2840
2501c                 | '   fastline(x1,x2,yy,c)
2501c     13 13 02 F6 | 	mov	arg01, local01
25020     15 15 02 F6 | 	mov	arg02, local03
25024     17 19 02 F6 | 	mov	arg04, local05
25028     14 17 02 F6 | 	mov	arg03, local02
2502c     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
25030     18 29 02 F1 | 	add	local02, local06
25034     16 29 0A F2 | 	cmp	local02, local04 wz
25038     E0 FF 9F 5D |  if_ne	jmp	#LR__2840
2503c     A7 F0 03 F6 | 	mov	ptra, fp
25040     B2 00 A0 FD | 	call	#popregs_
25044                 | _hg010b_spin2_box_ret
25044     2D 00 64 FD | 	ret
25048                 | 
25048                 | '       
25048                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
25048                 | _hg010b_spin2_putcharxycgf
25048                 | ' 
25048                 | '  
25048                 | ' repeat yy from 0 to 15
25048     00 00 06 F6 | 	mov	_var01, #0
2504c     97 8C 48 FB | 	callpa	#(@LR__2852-@LR__2850)>>2,fcache_load_ptr_
25050                 | LR__2850
25050                 | ' 
25050                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
25050     95 E4 05 F1 | 	add	objptr, #149
25054     F2 02 02 FB | 	rdlong	_var02, objptr
25058     0A 02 66 F0 | 	shl	_var02, #10
2505c     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
25060     01 05 02 F1 | 	add	_var03, _var02
25064     0B 03 02 F6 | 	mov	_var02, arg03
25068     04 02 66 F0 | 	shl	_var02, #4
2506c     01 05 02 F1 | 	add	_var03, _var02
25070     00 05 02 F1 | 	add	_var03, _var01
25074     02 05 C2 FA | 	rdbyte	_var03, _var03
25078                 | '   asm
25078     00 04 0E F4 | 	testb	_var03, #0 wz
2507c     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
25080     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
25084     01 04 0E F4 | 	testb	_var03, #1 wz
25088     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
2508c     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
25090     02 04 0E F4 | 	testb	_var03, #2 wz
25094     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
25098     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
2509c     03 04 0E F4 | 	testb	_var03, #3 wz
250a0     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
250a4     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
250a8     04 04 0E F4 | 	testb	_var03, #4 wz
250ac     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
250b0     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
250b4     05 04 0E F4 | 	testb	_var03, #5 wz
250b8     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
250bc     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
250c0     06 04 0E F4 | 	testb	_var03, #6 wz
250c4     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
250c8     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
250cc     07 04 0E F4 | 	testb	_var03, #7 wz
250d0     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
250d4     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
250d8                 | '   
250d8                 | '   ccc[0]:=c1
250d8     99 E5 05 F1 | 	add	objptr, #409
250dc     F2 06 62 FC | 	wrlong	_var04, objptr
250e0                 | '   ccc[1]:=c2 
250e0     04 E4 05 F1 | 	add	objptr, #4
250e4     F2 08 62 FC | 	wrlong	_var05, objptr
250e8                 | '   long[mailbox0][2]:=8
250e8     49 E4 85 F1 | 	sub	objptr, #73
250ec     F2 04 02 FB | 	rdlong	_var03, objptr
250f0     08 04 06 F1 | 	add	_var03, #8
250f4     02 11 68 FC | 	wrlong	#8, _var03
250f8                 | '   long[mailbox0][1]:=@ccc
250f8     45 E4 05 F1 | 	add	objptr, #69
250fc     F2 04 02 F6 | 	mov	_var03, objptr
25100     45 E4 85 F1 | 	sub	objptr, #69
25104     F2 02 02 FB | 	rdlong	_var02, objptr
25108     04 02 06 F1 | 	add	_var02, #4
2510c     01 05 62 FC | 	wrlong	_var03, _var02
25110                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
25110     0C E5 85 F1 | 	sub	objptr, #268
25114     F2 04 02 FB | 	rdlong	_var03, objptr
25118     0A 03 02 F6 | 	mov	_var02, arg02
2511c     00 03 02 F1 | 	add	_var02, _var01
25120     0A 02 66 F0 | 	shl	_var02, #10
25124     09 0B 02 F6 | 	mov	_var06, arg01
25128     02 0A 66 F0 | 	shl	_var06, #2
2512c     05 03 02 F1 | 	add	_var02, _var06
25130     01 05 02 F1 | 	add	_var03, _var02
25134     00 00 78 FF 
25138     00 04 06 F1 | 	add	_var03, ##-268435456
2513c     0C E5 05 F1 | 	add	objptr, #268
25140     F2 0A 02 FB | 	rdlong	_var06, objptr
25144     05 05 62 FC | 	wrlong	_var03, _var06
25148                 | '   repeat
25148                 | LR__2851
25148     F2 04 02 FB | 	rdlong	_var03, objptr
2514c     02 03 02 FB | 	rdlong	_var02, _var03
25150     00 02 56 F2 | 	cmps	_var02, #0 wc
25154     F0 FF 9F CD |  if_b	jmp	#LR__2851
25158     E9 E5 85 F1 | 	sub	objptr, #489
2515c     01 00 06 F1 | 	add	_var01, #1
25160     10 00 56 F2 | 	cmps	_var01, #16 wc
25164     E8 FE 9F CD |  if_b	jmp	#LR__2850
25168                 | LR__2852
25168                 | _hg010b_spin2_putcharxycgf_ret
25168     2D 00 64 FD | 	ret
2516c                 | 
2516c                 | ' 
2516c                 | ' 
2516c                 | ' '**********************************************************************r***
2516c                 | ' '                                                                        *
2516c                 | ' ' Font related functions                                                 *
2516c                 | ' '                                                                        *
2516c                 | ' '*************************************************************************
2516c                 | ' 
2516c                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
2516c                 | ' 
2516c                 | ' pub setfontfamily(afontnum)
2516c                 | _hg010b_spin2_setfontfamily
2516c                 | ' 
2516c                 | ' font_family:=afontnum
2516c     95 E4 05 F1 | 	add	objptr, #149
25170     F2 12 62 FC | 	wrlong	arg01, objptr
25174     95 E4 85 F1 | 	sub	objptr, #149
25178                 | ' 'if afontnum==8
25178                 | ' '  font_ptr:=@amiga_font
25178                 | ' 
25178                 | ' if afontnum==4
25178     04 12 0E F2 | 	cmp	arg01, #4 wz
2517c                 | '   font_ptr:=@st_font
2517c     08 00 00 AF 
25180     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
25184     08 E4 05 A1 |  if_e	add	objptr, #8
25188     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
2518c     08 E4 85 A1 |  if_e	sub	objptr, #8
25190     08 00 00 AF 
25194     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
25198                 | ' if afontnum==0
25198     00 12 0E F2 | 	cmp	arg01, #0 wz
2519c                 | '   font_ptr:=@vga_font
2519c     08 E4 05 A1 |  if_e	add	objptr, #8
251a0     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
251a4     08 E4 85 A1 |  if_e	sub	objptr, #8
251a8                 | _hg010b_spin2_setfontfamily_ret
251a8     2D 00 64 FD | 	ret
251ac                 | 
251ac                 | ' 
251ac                 | ' '*************************************************************************
251ac                 | ' '                                                                        *
251ac                 | ' '  Cursor functions                                                      *
251ac                 | ' '                                                                        *
251ac                 | ' '*************************************************************************
251ac                 | ' 
251ac                 | ' 
251ac                 | ' pub setcursorpos(x,y)
251ac                 | _hg010b_spin2_setcursorpos
251ac                 | ' 
251ac                 | ' ''---------- Set the (x,y) position of cursor
251ac                 | ' 
251ac                 | ' cursor_x:=x
251ac     3C E4 05 F1 | 	add	objptr, #60
251b0     F2 12 52 FC | 	wrword	arg01, objptr
251b4                 | ' cursor_y:=y
251b4     02 E4 05 F1 | 	add	objptr, #2
251b8     F2 14 42 FC | 	wrbyte	arg02, objptr
251bc                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
251bc     02 E4 85 F1 | 	sub	objptr, #2
251c0     F2 14 E2 FA | 	rdword	arg02, objptr
251c4     02 14 66 F0 | 	shl	arg02, #2
251c8     02 E4 05 F1 | 	add	objptr, #2
251cc     F2 16 C2 FA | 	rdbyte	arg03, objptr
251d0     3E E4 85 F1 | 	sub	objptr, #62
251d4     04 16 66 F0 | 	shl	arg03, #4
251d8     04 16 06 F1 | 	add	arg03, #4
251dc     11 12 06 F6 | 	mov	arg01, #17
251e0     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
251e4                 | _hg010b_spin2_setcursorpos_ret
251e4     2D 00 64 FD | 	ret
251e8                 | 
251e8                 | ' 
251e8                 | ' pub setcursorx(x)
251e8                 | _hg010b_spin2_setcursorx
251e8                 | ' cursor_x:=x
251e8     3C E4 05 F1 | 	add	objptr, #60
251ec     F2 12 52 FC | 	wrword	arg01, objptr
251f0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
251f0     F2 14 E2 FA | 	rdword	arg02, objptr
251f4     02 14 66 F0 | 	shl	arg02, #2
251f8     02 E4 05 F1 | 	add	objptr, #2
251fc     F2 16 C2 FA | 	rdbyte	arg03, objptr
25200     3E E4 85 F1 | 	sub	objptr, #62
25204     04 16 66 F0 | 	shl	arg03, #4
25208     04 16 06 F1 | 	add	arg03, #4
2520c     11 12 06 F6 | 	mov	arg01, #17
25210     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
25214                 | _hg010b_spin2_setcursorx_ret
25214     2D 00 64 FD | 	ret
25218                 | 
25218                 | ' 
25218                 | ' pub setcursory(y) 
25218                 | _hg010b_spin2_setcursory
25218                 | ' cursor_y:=y
25218     3E E4 05 F1 | 	add	objptr, #62
2521c     F2 12 42 FC | 	wrbyte	arg01, objptr
25220                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
25220     02 E4 85 F1 | 	sub	objptr, #2
25224     F2 14 E2 FA | 	rdword	arg02, objptr
25228     02 14 66 F0 | 	shl	arg02, #2
2522c     02 E4 05 F1 | 	add	objptr, #2
25230     F2 16 C2 FA | 	rdbyte	arg03, objptr
25234     3E E4 85 F1 | 	sub	objptr, #62
25238     04 16 66 F0 | 	shl	arg03, #4
2523c     04 16 06 F1 | 	add	arg03, #4
25240     11 12 06 F6 | 	mov	arg01, #17
25244     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
25248                 | _hg010b_spin2_setcursory_ret
25248     2D 00 64 FD | 	ret
2524c                 | 
2524c                 | ' 
2524c                 | ' '*************************************************************************
2524c                 | ' '                                                                        *
2524c                 | ' '  VBlank functions                                                      *
2524c                 | ' '                                                                        *
2524c                 | ' '*************************************************************************
2524c                 | ' 
2524c                 | ' pub waitvbl(amount) | i
2524c                 | _hg010b_spin2_waitvbl
2524c     03 4A 05 F6 | 	mov	COUNT_, #3
25250     A8 00 A0 FD | 	call	#pushregs_
25254     09 27 02 F6 | 	mov	local01, arg01
25258                 | ' 
25258                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
25258                 | ' 
25258                 | ' repeat i from 1 to amount
25258     01 28 06 F6 | 	mov	local02, #1
2525c     01 26 56 F2 | 	cmps	local01, #1 wc
25260     01 2A 86 F6 | 	negc	local03, #1
25264     15 27 02 F1 | 	add	local01, local03
25268                 | LR__2860
25268                 | '   repeat until vblank==0
25268                 | LR__2861
25268     49 E4 05 F1 | 	add	objptr, #73
2526c     F2 12 0A FB | 	rdlong	arg01, objptr wz
25270     49 E4 85 F1 | 	sub	objptr, #73
25274     0C 00 90 AD |  if_e	jmp	#LR__2862
25278                 | '     waitus(100)
25278     64 12 06 F6 | 	mov	arg01, #100
2527c     50 20 B0 FD | 	call	#__system___waitus
25280     E4 FF 9F FD | 	jmp	#LR__2861
25284                 | LR__2862
25284                 | '   repeat until vblank==1
25284                 | LR__2863
25284     49 E4 05 F1 | 	add	objptr, #73
25288     F2 12 02 FB | 	rdlong	arg01, objptr
2528c     49 E4 85 F1 | 	sub	objptr, #73
25290     01 12 0E F2 | 	cmp	arg01, #1 wz
25294     0C 00 90 AD |  if_e	jmp	#LR__2864
25298                 | '     waitus(100)
25298     64 12 06 F6 | 	mov	arg01, #100
2529c     30 20 B0 FD | 	call	#__system___waitus
252a0     E0 FF 9F FD | 	jmp	#LR__2863
252a4                 | LR__2864
252a4     15 29 02 F1 | 	add	local02, local03
252a8     13 29 0A F2 | 	cmp	local02, local01 wz
252ac     B8 FF 9F 5D |  if_ne	jmp	#LR__2860
252b0     A7 F0 03 F6 | 	mov	ptra, fp
252b4     B2 00 A0 FD | 	call	#popregs_
252b8                 | _hg010b_spin2_waitvbl_ret
252b8     2D 00 64 FD | 	ret
252bc                 | 
252bc                 | ' 
252bc                 | ' ''---------- Set color #c in palette to r,g,b
252bc                 | ' 
252bc                 | ' pub setcolor(c,r,g,b)  |cc
252bc                 | _hg010b_spin2_setcolor
252bc                 | ' 
252bc                 | ' cc:=r<<24+g<<16+b<<8
252bc     18 14 66 F0 | 	shl	arg02, #24
252c0     10 16 66 F0 | 	shl	arg03, #16
252c4     0B 15 02 F1 | 	add	arg02, arg03
252c8     08 18 66 F0 | 	shl	arg04, #8
252cc     0C 15 02 F1 | 	add	arg02, arg04
252d0                 | ' long[palette_ptr+4*c]:=cc
252d0     1C E4 05 F1 | 	add	objptr, #28
252d4     F2 18 02 FB | 	rdlong	arg04, objptr
252d8     1C E4 85 F1 | 	sub	objptr, #28
252dc     02 12 66 F0 | 	shl	arg01, #2
252e0     09 19 02 F1 | 	add	arg04, arg01
252e4     0C 15 62 FC | 	wrlong	arg02, arg04
252e8                 | _hg010b_spin2_setcolor_ret
252e8     2D 00 64 FD | 	ret
252ec                 | 
252ec                 | ' 
252ec                 | ' 
252ec                 | ' pub cls(fc,bc)   :c,i
252ec                 | _hg010b_spin2_cls
252ec     02 4A 05 F6 | 	mov	COUNT_, #2
252f0     A8 00 A0 FD | 	call	#pushregs_
252f4     09 27 02 F6 | 	mov	local01, arg01
252f8     0A 29 02 F6 | 	mov	local02, arg02
252fc                 | ' 
252fc                 | ' c:=bc
252fc                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
252fc     DD E4 05 F1 | 	add	objptr, #221
25300     F2 12 02 FB | 	rdlong	arg01, objptr
25304     A5 E4 85 F1 | 	sub	objptr, #165
25308     F2 16 02 FB | 	rdlong	arg03, objptr
2530c     02 16 66 F0 | 	shl	arg03, #2
25310     14 15 02 F6 | 	mov	arg02, local02
25314     00 18 06 F6 | 	mov	arg04, #0
25318     01 1A 06 F6 | 	mov	arg05, #1
2531c     0B 00 00 FF 
25320     94 E4 05 F1 | 	add	objptr, ##5780
25324     F8 10 B0 FD | 	call	#_psram_spin2_fill
25328                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
25328     0B 00 00 FF 
2532c     C8 E4 85 F1 | 	sub	objptr, ##5832
25330     F2 12 02 FB | 	rdlong	arg01, objptr
25334     04 E4 85 F1 | 	sub	objptr, #4
25338     F2 16 02 FB | 	rdlong	arg03, objptr
2533c     09 17 82 F1 | 	sub	arg03, arg01
25340     20 14 06 F6 | 	mov	arg02, #32
25344     00 18 06 F6 | 	mov	arg04, #0
25348     01 1A 06 F6 | 	mov	arg05, #1
2534c     0B 00 00 FF 
25350     CC E4 05 F1 | 	add	objptr, ##5836
25354     C8 10 B0 FD | 	call	#_psram_spin2_fill
25358                 | ' setwritecolors(fc,bc)
25358                 | ' 
25358                 | ' write_color:=ff
25358     0B 00 00 FF 
2535c     8B E4 85 F1 | 	sub	objptr, ##5771
25360     F2 26 62 FC | 	wrlong	local01, objptr
25364                 | ' write_background:=bb
25364     04 E4 05 F1 | 	add	objptr, #4
25368     F2 28 62 FC | 	wrlong	local02, objptr
2536c                 | ' cursor_x:=0
2536c     09 E4 85 F1 | 	sub	objptr, #9
25370     F2 00 58 FC | 	wrword	#0, objptr
25374                 | ' cursor_y:=0
25374     02 E4 05 F1 | 	add	objptr, #2
25378     F2 00 48 FC | 	wrbyte	#0, objptr
2537c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
2537c     02 E4 85 F1 | 	sub	objptr, #2
25380     F2 14 E2 FA | 	rdword	arg02, objptr
25384     02 14 66 F0 | 	shl	arg02, #2
25388     02 E4 05 F1 | 	add	objptr, #2
2538c     F2 16 C2 FA | 	rdbyte	arg03, objptr
25390     3E E4 85 F1 | 	sub	objptr, #62
25394     04 16 66 F0 | 	shl	arg03, #4
25398     04 16 06 F1 | 	add	arg03, #4
2539c     11 12 06 F6 | 	mov	arg01, #17
253a0     90 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
253a4                 | ' setcursorcolor(fc)
253a4     13 13 02 F6 | 	mov	arg01, local01
253a8     7C ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
253ac     14 FB 01 F6 | 	mov	result1, local02
253b0     00 FC 05 F6 | 	mov	result2, #0
253b4     A7 F0 03 F6 | 	mov	ptra, fp
253b8     B2 00 A0 FD | 	call	#popregs_
253bc                 | _hg010b_spin2_cls_ret
253bc     2D 00 64 FD | 	ret
253c0                 | 
253c0                 | ' 
253c0                 | ' ''---------- Output a char at the cursor position, move the cursor 
253c0                 | ' 
253c0                 | ' pub putchar(achar) | c,x,y,l,newcpl
253c0                 | _hg010b_spin2_putchar
253c0     02 4A 05 F6 | 	mov	COUNT_, #2
253c4     A8 00 A0 FD | 	call	#pushregs_
253c8     09 27 02 F6 | 	mov	local01, arg01
253cc                 | ' 
253cc                 | ' if achar==10
253cc     0A 26 0E F2 | 	cmp	local01, #10 wz
253d0                 | '   crlf()
253d0     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
253d4                 | ' if achar==9
253d4     09 26 0E F2 | 	cmp	local01, #9 wz
253d8     18 00 90 5D |  if_ne	jmp	#LR__2870
253dc                 | '   cursor_x:=(cursor_x& %11110000)+16
253dc     3C E4 05 F1 | 	add	objptr, #60
253e0     F2 16 E2 FA | 	rdword	arg03, objptr
253e4     F0 16 06 F5 | 	and	arg03, #240
253e8     10 16 06 F1 | 	add	arg03, #16
253ec     F2 16 52 FC | 	wrword	arg03, objptr
253f0     3C E4 85 F1 | 	sub	objptr, #60
253f4                 | LR__2870
253f4                 | '   
253f4                 | ' if (achar<>9) && (achar<>10) 
253f4     09 26 0E F2 | 	cmp	local01, #9 wz
253f8     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
253fc     A8 00 90 AD |  if_e	jmp	#LR__2871
25400                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
25400     3C E4 05 F1 | 	add	objptr, #60
25404     F2 12 E2 FA | 	rdword	arg01, objptr
25408     02 E4 05 F1 | 	add	objptr, #2
2540c     F2 14 C2 FA | 	rdbyte	arg02, objptr
25410     04 14 66 F0 | 	shl	arg02, #4
25414     04 14 06 F1 | 	add	arg02, #4
25418     03 E4 05 F1 | 	add	objptr, #3
2541c     F2 18 02 FB | 	rdlong	arg04, objptr
25420     04 E4 05 F1 | 	add	objptr, #4
25424     F2 1A 02 FB | 	rdlong	arg05, objptr
25428     45 E4 85 F1 | 	sub	objptr, #69
2542c     13 17 02 F6 | 	mov	arg03, local01
25430     14 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
25434     04 E4 05 F1 | 	add	objptr, #4
25438     F2 12 02 FB | 	rdlong	arg01, objptr
2543c     1C 00 00 FF 
25440     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
25444     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
25448     3A E4 05 F1 | 	add	objptr, #58
2544c     F2 1A C2 FA | 	rdbyte	arg05, objptr
25450     0D 17 02 FD | 	qmul	arg03, arg05
25454                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
25454     1C 00 00 FF 
25458     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
2545c     02 E4 85 F1 | 	sub	objptr, #2
25460     F2 28 E2 FA | 	rdword	local02, objptr
25464     01 28 46 F0 | 	shr	local02, #1
25468     13 15 02 F6 | 	mov	arg02, local01
2546c     01 16 06 F6 | 	mov	arg03, #1
25470     00 18 06 F6 | 	mov	arg04, #0
25474     01 1A 06 F6 | 	mov	arg05, #1
25478     0B 00 00 FF 
2547c     90 E4 05 F1 | 	add	objptr, ##5776
25480     18 26 62 FD | 	getqx	local01
25484     14 27 02 F1 | 	add	local01, local02
25488     13 13 02 F1 | 	add	arg01, local01
2548c     90 0F B0 FD | 	call	#_psram_spin2_fill
25490                 | '   cursor_x+=2
25490     0B 00 00 FF 
25494     90 E4 85 F1 | 	sub	objptr, ##5776
25498     F2 28 E2 FA | 	rdword	local02, objptr
2549c     02 28 06 F1 | 	add	local02, #2
254a0     F2 28 52 FC | 	wrword	local02, objptr
254a4     3C E4 85 F1 | 	sub	objptr, #60
254a8                 | LR__2871
254a8                 | ' 
254a8                 | ' if cursor_x>=256
254a8     3C E4 05 F1 | 	add	objptr, #60
254ac     F2 28 E2 FA | 	rdword	local02, objptr
254b0     3C E4 85 F1 | 	sub	objptr, #60
254b4     00 29 56 F2 | 	cmps	local02, #256 wc
254b8     64 00 90 CD |  if_b	jmp	#LR__2873
254bc                 | '   cursor_x:=0
254bc     3C E4 05 F1 | 	add	objptr, #60
254c0     F2 00 58 FC | 	wrword	#0, objptr
254c4                 | '   cursor_y+=1
254c4     02 E4 05 F1 | 	add	objptr, #2
254c8     F2 28 C2 FA | 	rdbyte	local02, objptr
254cc     01 28 06 F1 | 	add	local02, #1
254d0     F2 28 42 FC | 	wrbyte	local02, objptr
254d4                 | '   if cursor_y>st_lines-1
254d4     C3 E4 05 F1 | 	add	objptr, #195
254d8     F2 28 02 FB | 	rdlong	local02, objptr
254dc     01 28 86 F1 | 	sub	local02, #1
254e0     C3 E4 85 F1 | 	sub	objptr, #195
254e4     F2 16 C2 FA | 	rdbyte	arg03, objptr
254e8     3E E4 85 F1 | 	sub	objptr, #62
254ec     14 17 5A F2 | 	cmps	arg03, local02 wcz
254f0     2C 00 90 ED |  if_be	jmp	#LR__2872
254f4                 | '     scrollup2()
254f4     00 12 06 F6 | 	mov	arg01, #0
254f8     01 00 00 FF 
254fc     58 14 06 F6 | 	mov	arg02, ##600
25500     10 16 06 F6 | 	mov	arg03, #16
25504     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
25508                 | '     cursor_y:=st_lines-1
25508     01 E5 05 F1 | 	add	objptr, #257
2550c     F2 28 02 FB | 	rdlong	local02, objptr
25510     01 28 86 F1 | 	sub	local02, #1
25514     C3 E4 85 F1 | 	sub	objptr, #195
25518     F2 28 42 FC | 	wrbyte	local02, objptr
2551c     3E E4 85 F1 | 	sub	objptr, #62
25520                 | LR__2872
25520                 | LR__2873
25520                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
25520     3C E4 05 F1 | 	add	objptr, #60
25524     F2 14 E2 FA | 	rdword	arg02, objptr
25528     02 14 66 F0 | 	shl	arg02, #2
2552c     02 E4 05 F1 | 	add	objptr, #2
25530     F2 16 C2 FA | 	rdbyte	arg03, objptr
25534     3E E4 85 F1 | 	sub	objptr, #62
25538     04 16 66 F0 | 	shl	arg03, #4
2553c     04 16 06 F1 | 	add	arg03, #4
25540     11 12 06 F6 | 	mov	arg01, #17
25544     EC EF BF FD | 	call	#_hg010b_spin2_setspritepos
25548     A7 F0 03 F6 | 	mov	ptra, fp
2554c     B2 00 A0 FD | 	call	#popregs_
25550                 | _hg010b_spin2_putchar_ret
25550     2D 00 64 FD | 	ret
25554                 | 
25554                 | '     
25554                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
25554                 | ' 
25554                 | ' pub putchar2(achar) | c,x,y,l,newcpl
25554                 | _hg010b_spin2_putchar2
25554     02 4A 05 F6 | 	mov	COUNT_, #2
25558     A8 00 A0 FD | 	call	#pushregs_
2555c     09 27 02 F6 | 	mov	local01, arg01
25560                 | ' 
25560                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
25560     3C E4 05 F1 | 	add	objptr, #60
25564     F2 12 E2 FA | 	rdword	arg01, objptr
25568     02 E4 05 F1 | 	add	objptr, #2
2556c     F2 14 C2 FA | 	rdbyte	arg02, objptr
25570     04 14 66 F0 | 	shl	arg02, #4
25574     04 14 06 F1 | 	add	arg02, #4
25578     03 E4 05 F1 | 	add	objptr, #3
2557c     F2 18 02 FB | 	rdlong	arg04, objptr
25580     04 E4 05 F1 | 	add	objptr, #4
25584     F2 1A 02 FB | 	rdlong	arg05, objptr
25588     45 E4 85 F1 | 	sub	objptr, #69
2558c     13 17 02 F6 | 	mov	arg03, local01
25590     B4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
25594     04 E4 05 F1 | 	add	objptr, #4
25598     F2 12 02 FB | 	rdlong	arg01, objptr
2559c     1C 00 00 FF 
255a0     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
255a4     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
255a8     3A E4 05 F1 | 	add	objptr, #58
255ac     F2 1A C2 FA | 	rdbyte	arg05, objptr
255b0     0D 17 02 FD | 	qmul	arg03, arg05
255b4                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
255b4     1C 00 00 FF 
255b8     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
255bc     02 E4 85 F1 | 	sub	objptr, #2
255c0     F2 28 E2 FA | 	rdword	local02, objptr
255c4     01 28 46 F0 | 	shr	local02, #1
255c8     13 15 02 F6 | 	mov	arg02, local01
255cc     01 16 06 F6 | 	mov	arg03, #1
255d0     00 18 06 F6 | 	mov	arg04, #0
255d4     01 1A 06 F6 | 	mov	arg05, #1
255d8     0B 00 00 FF 
255dc     90 E4 05 F1 | 	add	objptr, ##5776
255e0     18 26 62 FD | 	getqx	local01
255e4     14 27 02 F1 | 	add	local01, local02
255e8     13 13 02 F1 | 	add	arg01, local01
255ec     30 0E B0 FD | 	call	#_psram_spin2_fill
255f0                 | ' 
255f0                 | ' cursor_x+=2
255f0     0B 00 00 FF 
255f4     90 E4 85 F1 | 	sub	objptr, ##5776
255f8     F2 28 E2 FA | 	rdword	local02, objptr
255fc     02 28 06 F1 | 	add	local02, #2
25600     F2 28 52 FC | 	wrword	local02, objptr
25604                 | ' if cursor_x>=256
25604     F2 28 E2 FA | 	rdword	local02, objptr
25608     3C E4 85 F1 | 	sub	objptr, #60
2560c     00 29 56 F2 | 	cmps	local02, #256 wc
25610     64 00 90 CD |  if_b	jmp	#LR__2881
25614                 | '   cursor_x:=0
25614     3C E4 05 F1 | 	add	objptr, #60
25618     F2 00 58 FC | 	wrword	#0, objptr
2561c                 | '   cursor_y+=1
2561c     02 E4 05 F1 | 	add	objptr, #2
25620     F2 28 C2 FA | 	rdbyte	local02, objptr
25624     01 28 06 F1 | 	add	local02, #1
25628     F2 28 42 FC | 	wrbyte	local02, objptr
2562c                 | '   if cursor_y>st_lines-1
2562c     C3 E4 05 F1 | 	add	objptr, #195
25630     F2 28 02 FB | 	rdlong	local02, objptr
25634     01 28 86 F1 | 	sub	local02, #1
25638     C3 E4 85 F1 | 	sub	objptr, #195
2563c     F2 16 C2 FA | 	rdbyte	arg03, objptr
25640     3E E4 85 F1 | 	sub	objptr, #62
25644     14 17 5A F2 | 	cmps	arg03, local02 wcz
25648     2C 00 90 ED |  if_be	jmp	#LR__2880
2564c                 | '     scrollup2()
2564c     00 12 06 F6 | 	mov	arg01, #0
25650     01 00 00 FF 
25654     58 14 06 F6 | 	mov	arg02, ##600
25658     10 16 06 F6 | 	mov	arg03, #16
2565c     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
25660                 | '     cursor_y:=st_lines-1
25660     01 E5 05 F1 | 	add	objptr, #257
25664     F2 28 02 FB | 	rdlong	local02, objptr
25668     01 28 86 F1 | 	sub	local02, #1
2566c     C3 E4 85 F1 | 	sub	objptr, #195
25670     F2 28 42 FC | 	wrbyte	local02, objptr
25674     3E E4 85 F1 | 	sub	objptr, #62
25678                 | LR__2880
25678                 | LR__2881
25678                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
25678     3C E4 05 F1 | 	add	objptr, #60
2567c     F2 14 E2 FA | 	rdword	arg02, objptr
25680     02 14 66 F0 | 	shl	arg02, #2
25684     02 E4 05 F1 | 	add	objptr, #2
25688     F2 16 C2 FA | 	rdbyte	arg03, objptr
2568c     3E E4 85 F1 | 	sub	objptr, #62
25690     04 16 66 F0 | 	shl	arg03, #4
25694     04 16 06 F1 | 	add	arg03, #4
25698     11 12 06 F6 | 	mov	arg01, #17
2569c     94 EE BF FD | 	call	#_hg010b_spin2_setspritepos
256a0     A7 F0 03 F6 | 	mov	ptra, fp
256a4     B2 00 A0 FD | 	call	#popregs_
256a8                 | _hg010b_spin2_putchar2_ret
256a8     2D 00 64 FD | 	ret
256ac                 | 
256ac                 | ' ''--------- Output a string at the cursor position, move the cursor  
256ac                 | ' 
256ac                 | ' pub write(text) | iii,c,ncx,ncy
256ac                 | _hg010b_spin2_write
256ac     04 4A 05 F6 | 	mov	COUNT_, #4
256b0     A8 00 A0 FD | 	call	#pushregs_
256b4     09 27 02 F6 | 	mov	local01, arg01
256b8                 | ' 
256b8                 | ' repeat iii from 0 to strsize(text)-1
256b8     00 28 06 F6 | 	mov	local02, #0
256bc     13 13 02 F6 | 	mov	arg01, local01
256c0     09 2B 02 F6 | 	mov	local03, arg01
256c4     97 06 48 FB | 	callpa	#(@LR__2891-@LR__2890)>>2,fcache_load_ptr_
256c8                 | LR__2890
256c8     15 FB C9 FA | 	rdbyte	result1, local03 wz
256cc     01 2A 06 51 |  if_ne	add	local03, #1
256d0     F4 FF 9F 5D |  if_ne	jmp	#LR__2890
256d4                 | LR__2891
256d4     09 2B 82 F1 | 	sub	local03, arg01
256d8     01 2A 86 F1 | 	sub	local03, #1
256dc     00 2A 56 F2 | 	cmps	local03, #0 wc
256e0     01 2C 86 F6 | 	negc	local04, #1
256e4     16 2B 02 F1 | 	add	local03, local04
256e8                 | LR__2892
256e8                 | '   putchar2(byte[text+iii])
256e8     13 13 02 F6 | 	mov	arg01, local01
256ec     14 13 02 F1 | 	add	arg01, local02
256f0     09 13 C2 FA | 	rdbyte	arg01, arg01
256f4     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
256f8     16 29 02 F1 | 	add	local02, local04
256fc     15 29 0A F2 | 	cmp	local02, local03 wz
25700     E4 FF 9F 5D |  if_ne	jmp	#LR__2892
25704     A7 F0 03 F6 | 	mov	ptra, fp
25708     B2 00 A0 FD | 	call	#popregs_
2570c                 | _hg010b_spin2_write_ret
2570c     2D 00 64 FD | 	ret
25710                 | 
25710                 | '    
25710                 | ' ' a version for text scrolling in Basic shifted 4 lines down
25710                 | ' 
25710                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
25710                 | _hg010b_spin2_scrollup2
25710     03 4A 05 F6 | 	mov	COUNT_, #3
25714     A8 00 A0 FD | 	call	#pushregs_
25718                 | ' 	
25718                 | ' repeat i from 4 to 579 
25718     04 26 06 F6 | 	mov	local01, #4
2571c                 | LR__2900
2571c     F9 E4 05 F1 | 	add	objptr, #249
25720     F2 1A 02 FB | 	rdlong	arg05, objptr
25724     1C E4 85 F1 | 	sub	objptr, #28
25728     F2 14 02 FB | 	rdlong	arg02, objptr
2572c     13 19 02 F6 | 	mov	arg04, local01
25730     10 18 06 F1 | 	add	arg04, #16
25734     02 18 66 F0 | 	shl	arg04, #2
25738     14 E4 05 F1 | 	add	objptr, #20
2573c     F2 16 02 FB | 	rdlong	arg03, objptr
25740     0B 19 02 FD | 	qmul	arg04, arg03
25744                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
25744     F6 03 00 FF 
25748     00 12 06 F6 | 	mov	arg01, ##519168
2574c     0D 13 82 F1 | 	sub	arg01, arg05
25750     02 16 66 F0 | 	shl	arg03, #2
25754     0A 00 00 FF 
25758     DB E5 05 F1 | 	add	objptr, ##5595
2575c     18 1A 62 FD | 	getqx	arg05
25760     0D 15 02 F1 | 	add	arg02, arg05
25764     80 0B B0 FD | 	call	#_psram_spin2_read1
25768     0A 00 00 FF 
2576c     D3 E5 85 F1 | 	sub	objptr, ##5587
25770     F2 1A 02 FB | 	rdlong	arg05, objptr
25774     1C E4 85 F1 | 	sub	objptr, #28
25778     F2 14 02 FB | 	rdlong	arg02, objptr
2577c     13 19 02 F6 | 	mov	arg04, local01
25780     02 18 66 F0 | 	shl	arg04, #2
25784     14 E4 05 F1 | 	add	objptr, #20
25788     F2 16 02 FB | 	rdlong	arg03, objptr
2578c     0B 19 02 FD | 	qmul	arg04, arg03
25790                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
25790     F6 03 00 FF 
25794     00 12 06 F6 | 	mov	arg01, ##519168
25798     0D 13 82 F1 | 	sub	arg01, arg05
2579c     02 16 66 F0 | 	shl	arg03, #2
257a0     0A 00 00 FF 
257a4     DB E5 05 F1 | 	add	objptr, ##5595
257a8     18 1A 62 FD | 	getqx	arg05
257ac     0D 15 02 F1 | 	add	arg02, arg05
257b0     D0 0B B0 FD | 	call	#_psram_spin2_write
257b4     0B 00 00 FF 
257b8     CC E4 85 F1 | 	sub	objptr, ##5836
257bc     01 26 06 F1 | 	add	local01, #1
257c0     01 00 00 FF 
257c4     44 26 16 F2 | 	cmp	local01, ##580 wc
257c8     50 FF 9F CD |  if_b	jmp	#LR__2900
257cc                 | ' 
257cc                 | ' repeat i from 580 to 599
257cc     01 00 00 FF 
257d0     44 26 06 F6 | 	mov	local01, ##580
257d4                 | LR__2901
257d4                 | '    fastline(0,1023,i,write_background)   
257d4     45 E4 05 F1 | 	add	objptr, #69
257d8     F2 18 02 FB | 	rdlong	arg04, objptr
257dc     45 E4 85 F1 | 	sub	objptr, #69
257e0     00 12 06 F6 | 	mov	arg01, #0
257e4     09 14 CE F9 | 	bmask	arg02, #9
257e8     13 17 02 F6 | 	mov	arg03, local01
257ec     90 EF BF FD | 	call	#_hg010b_spin2_fastline
257f0     01 26 06 F1 | 	add	local01, #1
257f4     01 00 00 FF 
257f8     58 26 16 F2 | 	cmp	local01, ##600 wc
257fc     D4 FF 9F CD |  if_b	jmp	#LR__2901
25800                 | ' repeat i from 0 to 3
25800     00 26 06 F6 | 	mov	local01, #0
25804                 | LR__2902
25804                 | '    fastline(0,1023,i,write_background)      
25804     45 E4 05 F1 | 	add	objptr, #69
25808     F2 18 02 FB | 	rdlong	arg04, objptr
2580c     45 E4 85 F1 | 	sub	objptr, #69
25810     00 12 06 F6 | 	mov	arg01, #0
25814     09 14 CE F9 | 	bmask	arg02, #9
25818     13 17 02 F6 | 	mov	arg03, local01
2581c     60 EF BF FD | 	call	#_hg010b_spin2_fastline
25820     01 26 06 F1 | 	add	local01, #1
25824     04 26 56 F2 | 	cmps	local01, #4 wc
25828     D8 FF 9F CD |  if_b	jmp	#LR__2902
2582c                 | ' 
2582c                 | ' repeat i from 0 to 35
2582c     00 26 06 F6 | 	mov	local01, #0
25830                 | LR__2903
25830     13 1B 02 F6 | 	mov	arg05, local01
25834     01 1A 06 F1 | 	add	arg05, #1
25838     1C 00 00 FF 
2583c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
25840     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
25844     0B 1B 02 FD | 	qmul	arg05, arg03
25848                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
25848     F6 03 00 FF 
2584c     00 12 06 F6 | 	mov	arg01, ##519168
25850     F9 E4 05 F1 | 	add	objptr, #249
25854     F2 1A 02 FB | 	rdlong	arg05, objptr
25858     0D 13 82 F1 | 	sub	arg01, arg05
2585c     F5 E4 85 F1 | 	sub	objptr, #245
25860     F2 14 02 FB | 	rdlong	arg02, objptr
25864     1C 00 00 FF 
25868     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
2586c     0B 00 00 FF 
25870     C8 E4 05 F1 | 	add	objptr, ##5832
25874     18 1A 62 FD | 	getqx	arg05
25878     0D 15 02 F1 | 	add	arg02, arg05
2587c     68 0A B0 FD | 	call	#_psram_spin2_read1
25880     1C 00 00 FF 
25884     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
25888     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
2588c     0B 27 02 FD | 	qmul	local01, arg03
25890                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
25890     F6 03 00 FF 
25894     00 12 06 F6 | 	mov	arg01, ##519168
25898     0A 00 00 FF 
2589c     D3 E5 85 F1 | 	sub	objptr, ##5587
258a0     F2 1A 02 FB | 	rdlong	arg05, objptr
258a4     0D 13 82 F1 | 	sub	arg01, arg05
258a8     F5 E4 85 F1 | 	sub	objptr, #245
258ac     F2 14 02 FB | 	rdlong	arg02, objptr
258b0     1C 00 00 FF 
258b4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
258b8     0B 00 00 FF 
258bc     C8 E4 05 F1 | 	add	objptr, ##5832
258c0     18 1A 62 FD | 	getqx	arg05
258c4     0D 15 02 F1 | 	add	arg02, arg05
258c8     B8 0A B0 FD | 	call	#_psram_spin2_write
258cc     0B 00 00 FF 
258d0     CC E4 85 F1 | 	sub	objptr, ##5836
258d4     01 26 06 F1 | 	add	local01, #1
258d8     24 26 56 F2 | 	cmps	local01, #36 wc
258dc     50 FF 9F CD |  if_b	jmp	#LR__2903
258e0                 | ' repeat i from 0 to timings[7]-1
258e0     00 26 06 F6 | 	mov	local01, #0
258e4     1C 00 00 FF 
258e8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
258ec     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
258f0     1C 00 00 FF 
258f4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
258f8     01 28 86 F1 | 	sub	local02, #1
258fc     00 28 56 F2 | 	cmps	local02, #0 wc
25900     01 2A 86 F6 | 	negc	local03, #1
25904     15 29 02 F1 | 	add	local02, local03
25908                 | LR__2904
25908                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
25908     04 E4 05 F1 | 	add	objptr, #4
2590c     F2 12 02 FB | 	rdlong	arg01, objptr
25910     1C 00 00 FF 
25914     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
25918     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
2591c     1C 00 00 FF 
25920     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
25924     0D 19 02 F6 | 	mov	arg04, arg05
25928     03 18 66 F0 | 	shl	arg04, #3
2592c     0D 19 02 F1 | 	add	arg04, arg05
25930     02 18 66 F0 | 	shl	arg04, #2
25934     13 19 02 F1 | 	add	arg04, local01
25938     0C 13 02 F1 | 	add	arg01, arg04
2593c     20 14 06 F6 | 	mov	arg02, #32
25940     01 16 06 F6 | 	mov	arg03, #1
25944     00 18 06 F6 | 	mov	arg04, #0
25948     01 1A 06 F6 | 	mov	arg05, #1
2594c     0B 00 00 FF 
25950     C8 E4 05 F1 | 	add	objptr, ##5832
25954     C8 0A B0 FD | 	call	#_psram_spin2_fill
25958     0B 00 00 FF 
2595c     CC E4 85 F1 | 	sub	objptr, ##5836
25960     15 27 02 F1 | 	add	local01, local03
25964     14 27 0A F2 | 	cmp	local01, local02 wz
25968     9C FF 9F 5D |  if_ne	jmp	#LR__2904
2596c     A7 F0 03 F6 | 	mov	ptra, fp
25970     B2 00 A0 FD | 	call	#popregs_
25974                 | _hg010b_spin2_scrollup2_ret
25974     2D 00 64 FD | 	ret
25978                 | 
25978                 | '  
25978                 | ' ''----------- Scroll the screen one line down 
25978                 | ' 
25978                 | ' pub scrolldown(start=0) | i
25978                 | _hg010b_spin2_scrolldown
25978     05 4A 05 F6 | 	mov	COUNT_, #5
2597c     A8 00 A0 FD | 	call	#pushregs_
25980     09 27 02 F6 | 	mov	local01, arg01
25984                 | ' 
25984                 | ' repeat i from 579 to (start*16)+4
25984     01 00 00 FF 
25988     43 28 06 F6 | 	mov	local02, ##579
2598c     13 2B 02 F6 | 	mov	local03, local01
25990     04 2A 66 F0 | 	shl	local03, #4
25994     04 2A 06 F1 | 	add	local03, #4
25998     01 00 00 FF 
2599c     43 2A 56 F2 | 	cmps	local03, ##579 wc
259a0     01 2C 86 F6 | 	negc	local04, #1
259a4     16 2F 02 F6 | 	mov	local05, local04
259a8     16 2B 02 F1 | 	add	local03, local04
259ac                 | LR__2910
259ac     F9 E4 05 F1 | 	add	objptr, #249
259b0     F2 2C 02 FB | 	rdlong	local04, objptr
259b4     1C E4 85 F1 | 	sub	objptr, #28
259b8     F2 14 02 FB | 	rdlong	arg02, objptr
259bc     14 1B 02 F6 | 	mov	arg05, local02
259c0     02 1A 66 F0 | 	shl	arg05, #2
259c4     14 E4 05 F1 | 	add	objptr, #20
259c8     F2 16 02 FB | 	rdlong	arg03, objptr
259cc     0B 1B 02 FD | 	qmul	arg05, arg03
259d0                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
259d0     F6 03 00 FF 
259d4     00 12 06 F6 | 	mov	arg01, ##519168
259d8     16 13 82 F1 | 	sub	arg01, local04
259dc     02 16 66 F0 | 	shl	arg03, #2
259e0     0A 00 00 FF 
259e4     DB E5 05 F1 | 	add	objptr, ##5595
259e8     18 2C 62 FD | 	getqx	local04
259ec     16 15 02 F1 | 	add	arg02, local04
259f0     F4 08 B0 FD | 	call	#_psram_spin2_read1
259f4     0A 00 00 FF 
259f8     D3 E5 85 F1 | 	sub	objptr, ##5587
259fc     F2 2C 02 FB | 	rdlong	local04, objptr
25a00     1C E4 85 F1 | 	sub	objptr, #28
25a04     F2 14 02 FB | 	rdlong	arg02, objptr
25a08     14 1B 02 F6 | 	mov	arg05, local02
25a0c     10 1A 06 F1 | 	add	arg05, #16
25a10     02 1A 66 F0 | 	shl	arg05, #2
25a14     14 E4 05 F1 | 	add	objptr, #20
25a18     F2 16 02 FB | 	rdlong	arg03, objptr
25a1c     0B 1B 02 FD | 	qmul	arg05, arg03
25a20                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
25a20     F6 03 00 FF 
25a24     00 12 06 F6 | 	mov	arg01, ##519168
25a28     16 13 82 F1 | 	sub	arg01, local04
25a2c     02 16 66 F0 | 	shl	arg03, #2
25a30     0A 00 00 FF 
25a34     DB E5 05 F1 | 	add	objptr, ##5595
25a38     18 2C 62 FD | 	getqx	local04
25a3c     16 15 02 F1 | 	add	arg02, local04
25a40     40 09 B0 FD | 	call	#_psram_spin2_write
25a44     0B 00 00 FF 
25a48     CC E4 85 F1 | 	sub	objptr, ##5836
25a4c     17 29 02 F1 | 	add	local02, local05
25a50     15 29 0A F2 | 	cmp	local02, local03 wz
25a54     54 FF 9F 5D |  if_ne	jmp	#LR__2910
25a58                 | ' 
25a58                 | ' repeat i from (start*16)+4 to (start*16)+19
25a58     13 29 02 F6 | 	mov	local02, local01
25a5c     04 28 66 F0 | 	shl	local02, #4
25a60     04 28 06 F1 | 	add	local02, #4
25a64     13 2F 02 F6 | 	mov	local05, local01
25a68     04 2E 66 F0 | 	shl	local05, #4
25a6c     13 2E 06 F1 | 	add	local05, #19
25a70     13 2D 02 F6 | 	mov	local04, local01
25a74     04 2C 66 F0 | 	shl	local04, #4
25a78     04 2C 06 F1 | 	add	local04, #4
25a7c     16 2F 52 F2 | 	cmps	local05, local04 wc
25a80     01 2C 86 F6 | 	negc	local04, #1
25a84     16 2B 02 F6 | 	mov	local03, local04
25a88     16 2F 02 F1 | 	add	local05, local04
25a8c                 | LR__2911
25a8c                 | '    fastline(0,1023,i,write_background)    
25a8c     45 E4 05 F1 | 	add	objptr, #69
25a90     F2 18 02 FB | 	rdlong	arg04, objptr
25a94     45 E4 85 F1 | 	sub	objptr, #69
25a98     00 12 06 F6 | 	mov	arg01, #0
25a9c     09 14 CE F9 | 	bmask	arg02, #9
25aa0     14 17 02 F6 | 	mov	arg03, local02
25aa4     D8 EC BF FD | 	call	#_hg010b_spin2_fastline
25aa8     15 29 02 F1 | 	add	local02, local03
25aac     17 29 0A F2 | 	cmp	local02, local05 wz
25ab0     D8 FF 9F 5D |  if_ne	jmp	#LR__2911
25ab4                 | '    
25ab4                 | ' repeat i from 35 to start
25ab4     23 28 06 F6 | 	mov	local02, #35
25ab8     23 26 56 F2 | 	cmps	local01, #35 wc
25abc     01 2C 86 F6 | 	negc	local04, #1
25ac0     13 2F 02 F6 | 	mov	local05, local01
25ac4     16 2F 02 F1 | 	add	local05, local04
25ac8                 | LR__2912
25ac8                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
25ac8     F6 03 00 FF 
25acc     00 12 06 F6 | 	mov	arg01, ##519168
25ad0     F9 E4 05 F1 | 	add	objptr, #249
25ad4     F2 2A 02 FB | 	rdlong	local03, objptr
25ad8     15 13 82 F1 | 	sub	arg01, local03
25adc     F5 E4 85 F1 | 	sub	objptr, #245
25ae0     F2 14 02 FB | 	rdlong	arg02, objptr
25ae4     14 2B 02 F6 | 	mov	local03, local02
25ae8     07 2A 66 F0 | 	shl	local03, #7
25aec     15 15 02 F1 | 	add	arg02, local03
25af0     80 16 06 F6 | 	mov	arg03, #128
25af4     0B 00 00 FF 
25af8     C8 E4 05 F1 | 	add	objptr, ##5832
25afc     E8 07 B0 FD | 	call	#_psram_spin2_read1
25b00                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
25b00     F6 03 00 FF 
25b04     00 12 06 F6 | 	mov	arg01, ##519168
25b08     0A 00 00 FF 
25b0c     D3 E5 85 F1 | 	sub	objptr, ##5587
25b10     F2 2A 02 FB | 	rdlong	local03, objptr
25b14     15 13 82 F1 | 	sub	arg01, local03
25b18     F5 E4 85 F1 | 	sub	objptr, #245
25b1c     F2 14 02 FB | 	rdlong	arg02, objptr
25b20     14 2B 02 F6 | 	mov	local03, local02
25b24     01 2A 06 F1 | 	add	local03, #1
25b28     07 2A 66 F0 | 	shl	local03, #7
25b2c     15 15 02 F1 | 	add	arg02, local03
25b30     80 16 06 F6 | 	mov	arg03, #128
25b34     0B 00 00 FF 
25b38     C8 E4 05 F1 | 	add	objptr, ##5832
25b3c     44 08 B0 FD | 	call	#_psram_spin2_write
25b40     0B 00 00 FF 
25b44     CC E4 85 F1 | 	sub	objptr, ##5836
25b48     16 29 02 F1 | 	add	local02, local04
25b4c     17 29 0A F2 | 	cmp	local02, local05 wz
25b50     74 FF 9F 5D |  if_ne	jmp	#LR__2912
25b54                 | ' repeat i from 0 to 127
25b54     00 28 06 F6 | 	mov	local02, #0
25b58                 | LR__2913
25b58                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
25b58     04 E4 05 F1 | 	add	objptr, #4
25b5c     F2 12 02 FB | 	rdlong	arg01, objptr
25b60     13 2F 02 F6 | 	mov	local05, local01
25b64     07 2E 66 F0 | 	shl	local05, #7
25b68     17 13 02 F1 | 	add	arg01, local05
25b6c     14 13 02 F1 | 	add	arg01, local02
25b70     20 14 06 F6 | 	mov	arg02, #32
25b74     01 16 06 F6 | 	mov	arg03, #1
25b78     00 18 06 F6 | 	mov	arg04, #0
25b7c     01 1A 06 F6 | 	mov	arg05, #1
25b80     0B 00 00 FF 
25b84     C8 E4 05 F1 | 	add	objptr, ##5832
25b88     94 08 B0 FD | 	call	#_psram_spin2_fill
25b8c     0B 00 00 FF 
25b90     CC E4 85 F1 | 	sub	objptr, ##5836
25b94     01 28 06 F1 | 	add	local02, #1
25b98     80 28 56 F2 | 	cmps	local02, #128 wc
25b9c     B8 FF 9F CD |  if_b	jmp	#LR__2913
25ba0     A7 F0 03 F6 | 	mov	ptra, fp
25ba4     B2 00 A0 FD | 	call	#popregs_
25ba8                 | _hg010b_spin2_scrolldown_ret
25ba8     2D 00 64 FD | 	ret
25bac                 | 
25bac                 | ' 
25bac                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
25bac                 | ' 
25bac                 | ' pub crlf()
25bac                 | _hg010b_spin2_crlf
25bac                 | ' 
25bac                 | ' cursor_x:=leading_spaces*2
25bac     01 00 00 FF 
25bb0     B6 E4 05 F1 | 	add	objptr, ##694
25bb4     F2 16 02 FB | 	rdlong	arg03, objptr
25bb8     01 16 66 F0 | 	shl	arg03, #1
25bbc     01 00 00 FF 
25bc0     7A E4 85 F1 | 	sub	objptr, ##634
25bc4     F2 16 52 FC | 	wrword	arg03, objptr
25bc8                 | ' cursor_y+=1
25bc8     02 E4 05 F1 | 	add	objptr, #2
25bcc     F2 16 C2 FA | 	rdbyte	arg03, objptr
25bd0     01 16 06 F1 | 	add	arg03, #1
25bd4     F2 16 42 FC | 	wrbyte	arg03, objptr
25bd8                 | ' if cursor_y>st_lines-1
25bd8     C3 E4 05 F1 | 	add	objptr, #195
25bdc     F2 16 02 FB | 	rdlong	arg03, objptr
25be0     01 16 86 F1 | 	sub	arg03, #1
25be4     C3 E4 85 F1 | 	sub	objptr, #195
25be8     F2 14 C2 FA | 	rdbyte	arg02, objptr
25bec     3E E4 85 F1 | 	sub	objptr, #62
25bf0     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
25bf4     2C 00 90 ED |  if_be	jmp	#LR__2920
25bf8                 | '   scrollup2()
25bf8     00 12 06 F6 | 	mov	arg01, #0
25bfc     01 00 00 FF 
25c00     58 14 06 F6 | 	mov	arg02, ##600
25c04     10 16 06 F6 | 	mov	arg03, #16
25c08     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
25c0c                 | '   cursor_y:=st_lines-1
25c0c     01 E5 05 F1 | 	add	objptr, #257
25c10     F2 16 02 FB | 	rdlong	arg03, objptr
25c14     01 16 86 F1 | 	sub	arg03, #1
25c18     C3 E4 85 F1 | 	sub	objptr, #195
25c1c     F2 16 42 FC | 	wrbyte	arg03, objptr
25c20     3E E4 85 F1 | 	sub	objptr, #62
25c24                 | LR__2920
25c24                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
25c24     3C E4 05 F1 | 	add	objptr, #60
25c28     F2 14 E2 FA | 	rdword	arg02, objptr
25c2c     02 14 66 F0 | 	shl	arg02, #2
25c30     02 E4 05 F1 | 	add	objptr, #2
25c34     F2 16 C2 FA | 	rdbyte	arg03, objptr
25c38     3E E4 85 F1 | 	sub	objptr, #62
25c3c     04 16 66 F0 | 	shl	arg03, #4
25c40     04 16 06 F1 | 	add	arg03, #4
25c44     11 12 06 F6 | 	mov	arg01, #17
25c48     E8 E8 BF FD | 	call	#_hg010b_spin2_setspritepos
25c4c                 | _hg010b_spin2_crlf_ret
25c4c     2D 00 64 FD | 	ret
25c50                 | 
25c50                 | ' 
25c50                 | ' 
25c50                 | ' '*************************************************************************
25c50                 | ' '                                                                        *
25c50                 | ' '  Conversions                                                           *
25c50                 | ' '                                                                        *
25c50                 | ' '*************************************************************************
25c50                 | ' 
25c50                 | ' ''---------- Convert a integer to dec string, return a pointer
25c50                 | ' 
25c50                 | ' pub inttostr(i):result |q,pos,k,j
25c50                 | _hg010b_spin2_inttostr
25c50     03 4A 05 F6 | 	mov	COUNT_, #3
25c54     A8 00 A0 FD | 	call	#pushregs_
25c58     09 27 0A F6 | 	mov	local01, arg01 wz
25c5c                 | ' 
25c5c                 | ' j:=i
25c5c                 | ' pos:=10
25c5c     0A 28 06 F6 | 	mov	local02, #10
25c60                 | ' k:=0
25c60     00 2A 06 F6 | 	mov	local03, #0
25c64                 | ' 
25c64                 | ' if (j==0)
25c64     18 00 90 5D |  if_ne	jmp	#LR__2930
25c68                 | '   n_string[0]:=48
25c68     4D E4 05 F1 | 	add	objptr, #77
25c6c     F2 60 48 FC | 	wrbyte	#48, objptr
25c70                 | '   n_string[1]:=0
25c70     01 E4 05 F1 | 	add	objptr, #1
25c74     F2 00 48 FC | 	wrbyte	#0, objptr
25c78     4E E4 85 F1 | 	sub	objptr, #78
25c7c     C4 00 90 FD | 	jmp	#LR__2937
25c80                 | LR__2930
25c80                 | ' 
25c80                 | ' else
25c80                 | '   if (j<0)
25c80     13 27 52 F6 | 	abs	local01, local01 wc
25c84                 | '     j:=0-j
25c84                 | '     k:=45
25c84     2D 2A 06 C6 |  if_b	mov	local03, #45
25c88                 | ' 
25c88                 | '   n_string[11]:=0
25c88     58 E4 05 F1 | 	add	objptr, #88
25c8c     F2 00 48 FC | 	wrbyte	#0, objptr
25c90     58 E4 85 F1 | 	sub	objptr, #88
25c94     97 24 48 FB | 	callpa	#(@LR__2932-@LR__2931)>>2,fcache_load_ptr_
25c98                 | '   repeat while (pos>-1)
25c98                 | LR__2931
25c98     00 28 56 F2 | 	cmps	local02, #0 wc
25c9c     40 00 90 CD |  if_b	jmp	#LR__2933
25ca0     13 FB 51 F6 | 	abs	result1, local01 wc
25ca4     0A FA 15 FD | 	qdiv	result1, #10
25ca8                 | '     q:=j//10
25ca8     19 FA 61 FD | 	getqy	result1
25cac     FD FA 81 F6 | 	negc	result1, result1
25cb0     13 27 52 F6 | 	abs	local01, local01 wc
25cb4     0A 26 16 FD | 	qdiv	local01, #10
25cb8                 | '     q:=48+q
25cb8     30 FA 05 F1 | 	add	result1, #48
25cbc                 | '     n_string[pos]:=q
25cbc     14 27 02 F6 | 	mov	local01, local02
25cc0     4D E4 05 F1 | 	add	objptr, #77
25cc4     F2 26 02 F1 | 	add	local01, objptr
25cc8     13 FB 41 FC | 	wrbyte	result1, local01
25ccc                 | '     j:=j/10
25ccc     4D E4 85 F1 | 	sub	objptr, #77
25cd0                 | '     pos-=1
25cd0     01 28 86 F1 | 	sub	local02, #1
25cd4     18 26 62 FD | 	getqx	local01
25cd8     13 27 82 F6 | 	negc	local01, local01
25cdc     B8 FF 9F FD | 	jmp	#LR__2931
25ce0                 | LR__2932
25ce0                 | LR__2933
25ce0                 | '   repeat while n_string[0]==48
25ce0                 | LR__2934
25ce0     4D E4 05 F1 | 	add	objptr, #77
25ce4     F2 16 C2 FA | 	rdbyte	arg03, objptr
25ce8     4D E4 85 F1 | 	sub	objptr, #77
25cec     30 16 0E F2 | 	cmp	arg03, #48 wz
25cf0     20 00 90 5D |  if_ne	jmp	#LR__2935
25cf4                 | '     bytemove(@n_string,@n_string+1,12)
25cf4     4D E4 05 F1 | 	add	objptr, #77
25cf8     F2 12 02 F6 | 	mov	arg01, objptr
25cfc     F2 14 02 F6 | 	mov	arg02, objptr
25d00     4D E4 85 F1 | 	sub	objptr, #77
25d04     01 14 06 F1 | 	add	arg02, #1
25d08     0C 16 06 F6 | 	mov	arg03, #12
25d0c     80 11 B0 FD | 	call	#__system____builtin_memmove
25d10     CC FF 9F FD | 	jmp	#LR__2934
25d14                 | LR__2935
25d14                 | ' 
25d14                 | '   if k==45
25d14     2D 2A 0E F2 | 	cmp	local03, #45 wz
25d18     28 00 90 5D |  if_ne	jmp	#LR__2936
25d1c                 | '      bytemove(@n_string+1,@n_string,12)
25d1c     4D E4 05 F1 | 	add	objptr, #77
25d20     F2 12 02 F6 | 	mov	arg01, objptr
25d24     01 12 06 F1 | 	add	arg01, #1
25d28     F2 14 02 F6 | 	mov	arg02, objptr
25d2c     4D E4 85 F1 | 	sub	objptr, #77
25d30     0C 16 06 F6 | 	mov	arg03, #12
25d34     58 11 B0 FD | 	call	#__system____builtin_memmove
25d38                 | '      n_string[0]:=k
25d38     4D E4 05 F1 | 	add	objptr, #77
25d3c     F2 2A 42 FC | 	wrbyte	local03, objptr
25d40     4D E4 85 F1 | 	sub	objptr, #77
25d44                 | LR__2936
25d44                 | LR__2937
25d44                 | ' 
25d44                 | ' q:=@n_string
25d44     4D E4 05 F1 | 	add	objptr, #77
25d48     F2 FA 01 F6 | 	mov	result1, objptr
25d4c     4D E4 85 F1 | 	sub	objptr, #77
25d50                 | ' return q
25d50     A7 F0 03 F6 | 	mov	ptra, fp
25d54     B2 00 A0 FD | 	call	#popregs_
25d58                 | _hg010b_spin2_inttostr_ret
25d58     2D 00 64 FD | 	ret
25d5c                 | 
25d5c                 | ' 
25d5c                 | ' '**********************************************************************************
25d5c                 | ' '
25d5c                 | ' '        Blitting
25d5c                 | ' '
25d5c                 | ' '**********************************************************************************
25d5c                 | ' 
25d5c                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
25d5c                 | _hg010b_spin2_blit
25d5c     18 4A 05 F6 | 	mov	COUNT_, #24
25d60     A8 00 A0 FD | 	call	#pushregs_
25d64     09 27 02 F6 | 	mov	local01, arg01
25d68     0A 29 02 F6 | 	mov	local02, arg02
25d6c     0B 2B 02 F6 | 	mov	local03, arg03
25d70     0C 2D 02 F6 | 	mov	local04, arg04
25d74     0D 2F 02 F6 | 	mov	local05, arg05
25d78     0E 31 02 F6 | 	mov	local06, arg06
25d7c     0F 33 02 F6 | 	mov	local07, arg07
25d80     10 35 02 F6 | 	mov	local08, arg08
25d84     11 37 02 F6 | 	mov	local09, arg09
25d88     12 39 02 F6 | 	mov	local10, arg10
25d8c                 | ' 
25d8c                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
25d8c     00 04 00 FF 
25d90     00 26 56 F2 | 	cmps	local01, ##524288 wc
25d94     00 04 00 3F 
25d98     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
25d9c     7C 01 90 CD |  if_b	jmp	#LR__2944
25da0     16 29 5A F2 | 	cmps	local02, local04 wcz
25da4     14 3B 02 16 |  if_a	mov	local11, local02
25da8     16 29 02 16 |  if_a	mov	local02, local04
25dac     1D 2D 02 16 |  if_a	mov	local04, local11
25db0     17 2B 5A F2 | 	cmps	local03, local05 wcz
25db4     15 3B 02 16 |  if_a	mov	local11, local03
25db8     17 2B 02 16 |  if_a	mov	local03, local05
25dbc     18 2B 02 FD | 	qmul	local03, local06
25dc0                 | '   if x1a>x2a
25dc0                 | '     x1a,x2a:=x2a,x1a
25dc0                 | '   if y1a>y2a
25dc0                 | '     y1a,y2a:=y2a,y1a  
25dc0     1D 2F 02 16 |  if_a	mov	local05, local11
25dc4                 | ' 
25dc4                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
25dc4     19 3D 02 F6 | 	mov	local12, local07
25dc8     14 3D 02 F1 | 	add	local12, local02
25dcc     18 3A 62 FD | 	getqx	local11
25dd0     1C 37 02 FD | 	qmul	local09, local10
25dd4     1D 3D 02 F1 | 	add	local12, local11
25dd8     13 3F 02 F6 | 	mov	local13, local01
25ddc     1A 3F 02 F1 | 	add	local13, local08
25de0     18 3A 62 FD | 	getqx	local11
25de4     1D 3F 02 F1 | 	add	local13, local11
25de8     1F 3D 5A F2 | 	cmps	local12, local13 wcz
25dec     98 00 90 ED |  if_be	jmp	#LR__2941
25df0                 | '     repeat y from y1a to y2a
25df0     15 41 02 F6 | 	mov	local14, local03
25df4     15 2F 52 F2 | 	cmps	local05, local03 wc
25df8     01 42 86 F6 | 	negc	local15, #1
25dfc     17 45 02 F6 | 	mov	local16, local05
25e00     21 45 02 F1 | 	add	local16, local15
25e04     0B 00 00 FF 
25e08     CC E4 05 F1 | 	add	objptr, ##5836
25e0c                 | LR__2940
25e0c     18 41 02 FD | 	qmul	local14, local06
25e10                 | '   '    writeln(string("I am here"))
25e10                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
25e10     13 15 02 F6 | 	mov	arg02, local01
25e14     16 17 02 F6 | 	mov	arg03, local04
25e18     14 17 82 F1 | 	sub	arg03, local02
25e1c     01 16 06 F1 | 	add	arg03, #1
25e20     F6 03 00 FF 
25e24     00 12 06 F6 | 	mov	arg01, ##519168
25e28     18 3E 62 FD | 	getqx	local13
25e2c     1F 15 02 F1 | 	add	arg02, local13
25e30     14 15 02 F1 | 	add	arg02, local02
25e34     B0 04 B0 FD | 	call	#_psram_spin2_read1
25e38     1B 3F 02 F6 | 	mov	local13, local09
25e3c     15 3F 82 F1 | 	sub	local13, local03
25e40     20 3F 02 F1 | 	add	local13, local14
25e44     1C 3F 02 FD | 	qmul	local13, local10
25e48                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
25e48     19 15 02 F6 | 	mov	arg02, local07
25e4c     16 17 02 F6 | 	mov	arg03, local04
25e50     14 17 82 F1 | 	sub	arg03, local02
25e54     01 16 06 F1 | 	add	arg03, #1
25e58     F6 03 00 FF 
25e5c     00 12 06 F6 | 	mov	arg01, ##519168
25e60     18 3E 62 FD | 	getqx	local13
25e64     1F 15 02 F1 | 	add	arg02, local13
25e68     1A 15 02 F1 | 	add	arg02, local08
25e6c     14 05 B0 FD | 	call	#_psram_spin2_write
25e70     21 41 02 F1 | 	add	local14, local15
25e74     22 41 0A F2 | 	cmp	local14, local16 wz
25e78     90 FF 9F 5D |  if_ne	jmp	#LR__2940
25e7c     0B 00 00 FF 
25e80     CC E4 85 F1 | 	sub	objptr, ##5836
25e84     94 00 90 FD | 	jmp	#LR__2943
25e88                 | LR__2941
25e88                 | '   else
25e88                 | '     repeat y from y2a to y1a
25e88     17 41 02 F6 | 	mov	local14, local05
25e8c     17 2B 52 F2 | 	cmps	local03, local05 wc
25e90     01 46 86 F6 | 	negc	local17, #1
25e94     15 49 02 F6 | 	mov	local18, local03
25e98     23 49 02 F1 | 	add	local18, local17
25e9c     0B 00 00 FF 
25ea0     CC E4 05 F1 | 	add	objptr, ##5836
25ea4                 | LR__2942
25ea4     18 41 02 FD | 	qmul	local14, local06
25ea8                 | '  '     writeln(string("I am there"))
25ea8                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
25ea8     13 15 02 F6 | 	mov	arg02, local01
25eac     16 17 02 F6 | 	mov	arg03, local04
25eb0     14 17 82 F1 | 	sub	arg03, local02
25eb4     01 16 06 F1 | 	add	arg03, #1
25eb8     F6 03 00 FF 
25ebc     00 12 06 F6 | 	mov	arg01, ##519168
25ec0     18 44 62 FD | 	getqx	local16
25ec4     22 15 02 F1 | 	add	arg02, local16
25ec8     14 15 02 F1 | 	add	arg02, local02
25ecc     18 04 B0 FD | 	call	#_psram_spin2_read1
25ed0     1B 45 02 F6 | 	mov	local16, local09
25ed4     15 45 82 F1 | 	sub	local16, local03
25ed8     20 45 02 F1 | 	add	local16, local14
25edc     1C 45 02 FD | 	qmul	local16, local10
25ee0                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
25ee0     19 15 02 F6 | 	mov	arg02, local07
25ee4     16 17 02 F6 | 	mov	arg03, local04
25ee8     14 17 82 F1 | 	sub	arg03, local02
25eec     01 16 06 F1 | 	add	arg03, #1
25ef0     F6 03 00 FF 
25ef4     00 12 06 F6 | 	mov	arg01, ##519168
25ef8     18 44 62 FD | 	getqx	local16
25efc     22 15 02 F1 | 	add	arg02, local16
25f00     1A 15 02 F1 | 	add	arg02, local08
25f04     7C 04 B0 FD | 	call	#_psram_spin2_write
25f08     23 41 02 F1 | 	add	local14, local17
25f0c     24 41 0A F2 | 	cmp	local14, local18 wz
25f10     90 FF 9F 5D |  if_ne	jmp	#LR__2942
25f14     0B 00 00 FF 
25f18     CC E4 85 F1 | 	sub	objptr, ##5836
25f1c                 | LR__2943
25f1c                 | LR__2944
25f1c                 | '     
25f1c                 | ' if ((f>=$80000) && (t<$80000)) 
25f1c     00 04 00 FF 
25f20     00 26 56 F2 | 	cmps	local01, ##524288 wc
25f24     80 00 90 CD |  if_b	jmp	#LR__2946
25f28     00 04 00 FF 
25f2c     00 32 56 F2 | 	cmps	local07, ##524288 wc
25f30     74 00 90 3D |  if_ae	jmp	#LR__2946
25f34                 | '   repeat y from y1a to y2a
25f34     15 41 02 F6 | 	mov	local14, local03
25f38     15 2F 52 F2 | 	cmps	local05, local03 wc
25f3c     01 4A 86 F6 | 	negc	local19, #1
25f40     17 4D 02 F6 | 	mov	local20, local05
25f44     25 4D 02 F1 | 	add	local20, local19
25f48     0B 00 00 FF 
25f4c     CC E4 05 F1 | 	add	objptr, ##5836
25f50                 | LR__2945
25f50     1B 49 02 F6 | 	mov	local18, local09
25f54     15 49 82 F1 | 	sub	local18, local03
25f58     20 49 02 F1 | 	add	local18, local14
25f5c     1C 49 02 FD | 	qmul	local18, local10
25f60                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
25f60     19 13 02 F6 | 	mov	arg01, local07
25f64     18 48 62 FD | 	getqx	local18
25f68     18 41 02 FD | 	qmul	local14, local06
25f6c     24 13 02 F1 | 	add	arg01, local18
25f70     1A 13 02 F1 | 	add	arg01, local08
25f74     13 15 02 F6 | 	mov	arg02, local01
25f78     16 17 02 F6 | 	mov	arg03, local04
25f7c     14 17 82 F1 | 	sub	arg03, local02
25f80     01 16 06 F1 | 	add	arg03, #1
25f84     18 48 62 FD | 	getqx	local18
25f88     24 15 02 F1 | 	add	arg02, local18
25f8c     14 15 02 F1 | 	add	arg02, local02
25f90     54 03 B0 FD | 	call	#_psram_spin2_read1
25f94     25 41 02 F1 | 	add	local14, local19
25f98     26 41 0A F2 | 	cmp	local14, local20 wz
25f9c     B0 FF 9F 5D |  if_ne	jmp	#LR__2945
25fa0     0B 00 00 FF 
25fa4     CC E4 85 F1 | 	sub	objptr, ##5836
25fa8                 | LR__2946
25fa8                 | '     
25fa8                 | ' if ((f<$80000) && (t>=$80000)) 
25fa8     00 04 00 FF 
25fac     00 26 56 F2 | 	cmps	local01, ##524288 wc
25fb0     84 00 90 3D |  if_ae	jmp	#LR__2948
25fb4     00 04 00 FF 
25fb8     00 32 56 F2 | 	cmps	local07, ##524288 wc
25fbc     78 00 90 CD |  if_b	jmp	#LR__2948
25fc0                 | '   t:=t & $FFFFFFF
25fc0     7C 32 06 F4 | 	bitl	local07, #124
25fc4                 | '   repeat y from y1a to y2a
25fc4     15 41 02 F6 | 	mov	local14, local03
25fc8     15 2F 52 F2 | 	cmps	local05, local03 wc
25fcc     01 4E 86 F6 | 	negc	local21, #1
25fd0     17 51 02 F6 | 	mov	local22, local05
25fd4     27 51 02 F1 | 	add	local22, local21
25fd8     0B 00 00 FF 
25fdc     CC E4 05 F1 | 	add	objptr, ##5836
25fe0                 | LR__2947
25fe0     18 41 02 FD | 	qmul	local14, local06
25fe4                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
25fe4     13 13 02 F6 | 	mov	arg01, local01
25fe8     1B 4D 02 F6 | 	mov	local20, local09
25fec     15 4D 82 F1 | 	sub	local20, local03
25ff0     20 4D 02 F1 | 	add	local20, local14
25ff4     18 4A 62 FD | 	getqx	local19
25ff8     1C 4D 02 FD | 	qmul	local20, local10
25ffc     25 13 02 F1 | 	add	arg01, local19
26000     14 13 02 F1 | 	add	arg01, local02
26004     19 15 02 F6 | 	mov	arg02, local07
26008     16 17 02 F6 | 	mov	arg03, local04
2600c     14 17 82 F1 | 	sub	arg03, local02
26010     01 16 06 F1 | 	add	arg03, #1
26014     18 4C 62 FD | 	getqx	local20
26018     26 15 02 F1 | 	add	arg02, local20
2601c     1A 15 02 F1 | 	add	arg02, local08
26020     60 03 B0 FD | 	call	#_psram_spin2_write
26024     27 41 02 F1 | 	add	local14, local21
26028     28 41 0A F2 | 	cmp	local14, local22 wz
2602c     B0 FF 9F 5D |  if_ne	jmp	#LR__2947
26030     0B 00 00 FF 
26034     CC E4 85 F1 | 	sub	objptr, ##5836
26038                 | LR__2948
26038                 | '     
26038                 | ' if ((f<$80000) && (t<$80000)) 
26038     00 04 00 FF 
2603c     00 26 56 F2 | 	cmps	local01, ##524288 wc
26040     00 04 00 CF 
26044     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
26048     64 00 90 3D |  if_ae	jmp	#LR__2950
2604c                 | '   repeat y from y1a to y2a
2604c     15 41 02 F6 | 	mov	local14, local03
26050     15 2F 52 F2 | 	cmps	local05, local03 wc
26054     01 52 86 F6 | 	negc	local23, #1
26058     17 55 02 F6 | 	mov	local24, local05
2605c     29 55 02 F1 | 	add	local24, local23
26060                 | LR__2949
26060     18 41 02 FD | 	qmul	local14, local06
26064                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
26064     13 13 02 F6 | 	mov	arg01, local01
26068     1B 51 02 F6 | 	mov	local22, local09
2606c     15 51 82 F1 | 	sub	local22, local03
26070     20 51 02 F1 | 	add	local22, local14
26074     18 4E 62 FD | 	getqx	local21
26078     1C 51 02 FD | 	qmul	local22, local10
2607c     27 13 02 F1 | 	add	arg01, local21
26080     14 13 02 F1 | 	add	arg01, local02
26084     19 15 02 F6 | 	mov	arg02, local07
26088     16 17 02 F6 | 	mov	arg03, local04
2608c     14 17 82 F1 | 	sub	arg03, local02
26090     01 16 06 F1 | 	add	arg03, #1
26094     18 50 62 FD | 	getqx	local22
26098     28 15 02 F1 | 	add	arg02, local22
2609c     1A 15 02 F1 | 	add	arg02, local08
260a0     EC 0D B0 FD | 	call	#__system____builtin_memmove
260a4     29 41 02 F1 | 	add	local14, local23
260a8     2A 41 0A F2 | 	cmp	local14, local24 wz
260ac     B0 FF 9F 5D |  if_ne	jmp	#LR__2949
260b0                 | LR__2950
260b0     A7 F0 03 F6 | 	mov	ptra, fp
260b4     B2 00 A0 FD | 	call	#popregs_
260b8                 | _hg010b_spin2_blit_ret
260b8     2D 00 64 FD | 	ret
260bc                 | 
260bc                 | ' 
260bc                 | ' '..............................................................................
260bc                 | ' 
260bc                 | ' {{
260bc                 | ' }}
260bc                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
260bc                 | _psram_spin2_startx
260bc     04 4A 05 F6 | 	mov	COUNT_, #4
260c0     A8 00 A0 FD | 	call	#pushregs_
260c4     09 27 02 F6 | 	mov	local01, arg01
260c8     0B 29 02 F6 | 	mov	local02, arg03
260cc     0C 2B 02 F6 | 	mov	local03, arg04
260d0                 | '     stop() ' restart driver if required
260d0     54 01 B0 FD | 	call	#_psram_spin2_stop
260d4     00 26 0E F2 | 	cmp	local01, #0 wz
260d8     14 26 06 AB |  if_e	rdlong	local01, #20
260dc     13 15 52 F6 | 	abs	arg02, local01 wc
260e0     A1 07 00 FF 
260e4     40 14 16 FD | 	qdiv	arg02, ##1000000
260e8                 | ' 
260e8                 | '     ' use current frequency if none specified
260e8                 | ' 
260e8                 | '     if freq == 0 
260e8                 | '         freq := clkfreq 
260e8                 | ' 
260e8                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
260e8                 | ' 
260e8                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
260e8                 | '     if burst < 0
260e8                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
260e8     18 14 62 FD | 	getqx	arg02
260ec     0A 19 82 F6 | 	negc	arg04, arg02
260f0     03 18 66 F0 | 	shl	arg04, #3
260f4     84 18 86 F1 | 	sub	arg04, #132
260f8     04 18 46 F0 | 	shr	arg04, #4
260fc     04 18 66 F0 | 	shl	arg04, #4
26100     00 18 56 F2 | 	cmps	arg04, #0 wc
26104     0E FA 65 C6 |  if_b	neg	result1, #14
26108     10 01 90 CD |  if_b	jmp	#LR__2963
2610c                 | ' 
2610c                 | '     ' compute the input delay
2610c                 | ' 
2610c                 | '     if delay <= 0
2610c     01 28 56 F2 | 	cmps	local02, #1 wc
26110     10 00 90 3D |  if_ae	jmp	#LR__2960
26114                 | '         delay := lookupDelay(freq)
26114     13 13 02 F6 | 	mov	arg01, local01
26118     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
2611c     FD 28 02 F6 | 	mov	local02, result1
26120     04 00 90 FD | 	jmp	#LR__2961
26124                 | LR__2960
26124                 | '     else
26124                 | '         delay <#= $f ' limit to 15
26124     0F 28 66 F3 | 	fles	local02, #15
26128                 | LR__2961
26128                 | ' 
26128                 | '     ' create our lock
26128                 | ' 
26128                 | '     driverlock := LOCKNEW()  
26128     00 FA 05 F6 | 	mov	result1, #0
2612c     04 FA 61 FD | 	locknew	result1
26130     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
26134     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
26138                 | '     if driverlock == -1
26138     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
2613c     FF FF 7F FF 
26140     FF FB 0D F2 | 	cmp	result1, ##-1 wz
26144                 | '         return ERR_NO_LOCK
26144     1A FA 65 A6 |  if_e	neg	result1, #26
26148     D0 00 90 AD |  if_e	jmp	#LR__2963
2614c                 | ' 
2614c                 | '     ' patch in the proper data and HUB addresses to the startup structure
2614c                 | ' 
2614c                 | '     long[@startupData][0]:=clkfreq
2614c     14 26 06 FB | 	rdlong	local01, #20
26150     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
26154     FA 26 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
26158                 | ' '    long[@startupData][1]:=$1000_0000
26158                 | '     long[@startupData][5]:=@deviceData
26158     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
2615c     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
26160     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
26164     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
26168     14 14 06 F1 | 	add	arg02, #20
2616c     0A 27 62 FC | 	wrlong	local01, arg02
26170                 | '     long[@startupData][6]:=@qosData
26170     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
26174     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
26178     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
2617c     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
26180     18 14 06 F1 | 	add	arg02, #24
26184     0A 27 62 FC | 	wrlong	local01, arg02
26188                 | '     long[@startupData][7]:=$7FF00
26188     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
2618c     1C 26 06 F1 | 	add	local01, #28
26190     FF 03 80 FF 
26194     13 01 6A FC | 	wrlong	##524032, local01
26198                 | ' 
26198                 | '     ' setup some default bank and QoS parameter values
26198                 | ' 
26198                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
26198     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
2619c     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
261a0     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
261a4     10 18 66 F0 | 	shl	arg04, #16
261a8     0C 28 66 F0 | 	shl	local02, #12
261ac     14 19 42 F5 | 	or	arg04, local02
261b0     18 18 46 F5 | 	or	arg04, #24
261b4     0C 15 02 F6 | 	mov	arg02, arg04
261b8     02 16 06 F6 | 	mov	arg03, #2
261bc     A0 00 A0 FD | 	call	#\builtin_longfill_
261c0                 | '     longfill(@qosData, $FFFF0000, 8)
261c0     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
261c4     07 16 06 F6 | 	mov	arg03, #7
261c8     28 16 62 FD | 	setq	arg03
261cc     80 FF FF FF 
261d0     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
261d4                 | ' 
261d4                 | '     ' get the address of the PSRAM memory driver so we can start it
261d4                 | ' 
261d4                 | '     driverAddr:= driver.getDriverAddr()
261d4                 | '     return @driver_start
261d4     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
261d8     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
261dc     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
261e0                 | ' 
261e0                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
261e0                 | ' 
261e0                 | '     if desiredcog < 0
261e0     00 2A 56 F2 | 	cmps	local03, #0 wc
261e4                 | '         desiredcog := NEWCOG
261e4     10 2A 06 C6 |  if_b	mov	local03, #16
261e8                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
261e8     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
261ec     15 2D 02 F6 | 	mov	local04, local03
261f0     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
261f4     0A 2D F2 FC | 	coginit	local04, arg02 wc
261f8     01 2C 66 C6 |  if_b	neg	local04, #1
261fc     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
26200     FA 2C 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
26204                 | '     repeat until long[@startupData] == 0 
26204     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
26208                 | LR__2962
26208     FA 2C 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
2620c     F8 FF 9F 5D |  if_ne	jmp	#LR__2962
26210                 | ' 
26210                 | '     return drivercog
26210     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
26214     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
26218     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2621c                 | LR__2963
2621c     A7 F0 03 F6 | 	mov	ptra, fp
26220     B2 00 A0 FD | 	call	#popregs_
26224                 | _psram_spin2_startx_ret
26224     2D 00 64 FD | 	ret
26228                 | 
26228                 | ' 
26228                 | ' '..............................................................................
26228                 | ' 
26228                 | ' {{
26228                 | ' }}
26228                 | ' PUB stop() : i
26228                 | _psram_spin2_stop
26228     00 00 06 F6 | 	mov	_var01, #0
2622c                 | '     if drivercog <> -1
2622c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
26230     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
26234     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26238     FF FF 7F FF 
2623c     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
26240     70 00 90 AD |  if_e	jmp	#LR__2973
26244                 | '         cogstop(drivercog) ' a rather brutal stop
26244     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
26248     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
2624c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26250     03 12 62 FD | 	cogstop	arg01
26254     97 26 48 FB | 	callpa	#(@LR__2972-@LR__2970)>>2,fcache_load_ptr_
26258                 | '         repeat i from 0 to 7
26258                 | LR__2970
26258                 | '             if long[$7FF00][i*3] < 0
26258     00 FB 01 F6 | 	mov	result1, _var01
2625c     01 FA 65 F0 | 	shl	result1, #1
26260     00 FB 01 F1 | 	add	result1, _var01
26264     02 FA 65 F0 | 	shl	result1, #2
26268     FF 03 00 FF 
2626c     00 FB 05 F1 | 	add	result1, ##524032
26270     FD FA 01 FB | 	rdlong	result1, result1
26274     00 FA 55 F2 | 	cmps	result1, #0 wc
26278     1C 00 90 3D |  if_ae	jmp	#LR__2971
2627c                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
2627c     00 FB 01 F6 | 	mov	result1, _var01
26280     01 FA 65 F0 | 	shl	result1, #1
26284     00 FB 01 F1 | 	add	result1, _var01
26288     02 FA 65 F0 | 	shl	result1, #2
2628c     FF 03 00 FF 
26290     00 FB 05 F1 | 	add	result1, ##524032
26294     FD 20 68 FC | 	wrlong	#16, result1
26298                 | LR__2971
26298     01 00 06 F1 | 	add	_var01, #1
2629c     08 00 56 F2 | 	cmps	_var01, #8 wc
262a0     B4 FF 9F CD |  if_b	jmp	#LR__2970
262a4                 | LR__2972
262a4                 | '         drivercog := -1
262a4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
262a8     FF FF FF FF 
262ac     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
262b0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
262b4                 | LR__2973
262b4                 | '     if driverlock <> -1
262b4     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
262b8     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
262bc     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
262c0     FF FF 7F FF 
262c4     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
262c8                 | '         LOCKRET(driverlock)
262c8     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
262cc     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
262d0     05 12 62 5D |  if_ne	lockret	arg01
262d4                 | '         driverlock := -1
262d4     FF FF FF 5F 
262d8     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
262dc     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
262e0     00 FB 01 F6 | 	mov	result1, _var01
262e4                 | _psram_spin2_stop_ret
262e4     2D 00 64 FD | 	ret
262e8                 | 
262e8                 | ' 
262e8                 | ' '..............................................................................
262e8                 | ' 
262e8                 | ' {{
262e8                 | ' }}
262e8                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
262e8                 | _psram_spin2_read1
262e8                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
262e8                 | '     if drivercog == -1 ' driver must be running
262e8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
262ec     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
262f0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
262f4     FF FF 7F FF 
262f8     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
262fc                 | '         return ERR_INACTIVE
262fc     0F FA 65 A6 |  if_e	neg	result1, #15
26300     7C 00 90 AD |  if_e	jmp	#LR__2981
26304                 | '     if count == 0 ' don't even bother reading
26304     00 16 0E F2 | 	cmp	arg03, #0 wz
26308                 | '         return 0
26308     00 FA 05 A6 |  if_e	mov	result1, #0
2630c     70 00 90 AD |  if_e	jmp	#LR__2981
26310                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
26310     00 FA 05 F6 | 	mov	result1, #0
26314     01 FA 61 FD | 	cogid	result1
26318     FD 00 02 F6 | 	mov	_var01, result1
2631c     01 00 66 F0 | 	shl	_var01, #1
26320     FD 00 02 F1 | 	add	_var01, result1
26324     02 00 66 F0 | 	shl	_var01, #2
26328     FF 03 00 FF 
2632c     00 03 06 F6 | 	mov	_var02, ##524032
26330     00 03 02 F1 | 	add	_var02, _var01
26334                 | '     if long[mailbox] < 0
26334     01 01 02 FB | 	rdlong	_var01, _var02
26338     00 00 56 F2 | 	cmps	_var01, #0 wc
2633c                 | '         return ERR_MAILBOX_BUSY
2633c     1C FA 65 C6 |  if_b	neg	result1, #28
26340     3C 00 90 CD |  if_b	jmp	#LR__2981
26344                 | '     long[mailbox][2] := count
26344     08 02 06 F1 | 	add	_var02, #8
26348     01 17 62 FC | 	wrlong	arg03, _var02
2634c                 | '     long[mailbox][1] := dstHubAddr
2634c     04 02 86 F1 | 	sub	_var02, #4
26350     01 13 62 FC | 	wrlong	arg01, _var02
26354     04 02 86 F1 | 	sub	_var02, #4
26358                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
26358     0A 05 02 F6 | 	mov	_var03, arg02
2635c     D9 04 06 F4 | 	bitl	_var03, #217
26360     00 00 58 FF 
26364     00 00 06 F6 | 	mov	_var01, ##-1342177280
26368     02 01 02 F1 | 	add	_var01, _var03
2636c     01 01 62 FC | 	wrlong	_var01, _var02
26370                 | '     repeat
26370                 | LR__2980
26370                 | '         result := long[mailbox]    
26370     01 05 02 FB | 	rdlong	_var03, _var02
26374     00 04 56 F2 | 	cmps	_var03, #0 wc
26378     F4 FF 9F CD |  if_b	jmp	#LR__2980
2637c                 | '     while result < 0   
2637c                 | '     return -result                       'return success or error
2637c     02 FB 61 F6 | 	neg	result1, _var03
26380                 | LR__2981
26380                 | _psram_spin2_read1_ret
26380     2D 00 64 FD | 	ret
26384                 | 
26384                 | ' 
26384                 | ' '..............................................................................
26384                 | ' 
26384                 | ' {{
26384                 | ' }}
26384                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
26384                 | _psram_spin2_write
26384                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
26384                 | '     if drivercog == -1 ' driver must be running
26384     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
26388     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
2638c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26390     FF FF 7F FF 
26394     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
26398                 | '         return ERR_INACTIVE
26398     0F FA 65 A6 |  if_e	neg	result1, #15
2639c     7C 00 90 AD |  if_e	jmp	#LR__2991
263a0                 | '     if count == 0 ' don't even bother writing
263a0     00 16 0E F2 | 	cmp	arg03, #0 wz
263a4                 | '         return 0
263a4     00 FA 05 A6 |  if_e	mov	result1, #0
263a8     70 00 90 AD |  if_e	jmp	#LR__2991
263ac                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
263ac     00 FA 05 F6 | 	mov	result1, #0
263b0     01 FA 61 FD | 	cogid	result1
263b4     FD 00 02 F6 | 	mov	_var01, result1
263b8     01 00 66 F0 | 	shl	_var01, #1
263bc     FD 00 02 F1 | 	add	_var01, result1
263c0     02 00 66 F0 | 	shl	_var01, #2
263c4     FF 03 00 FF 
263c8     00 03 06 F6 | 	mov	_var02, ##524032
263cc     00 03 02 F1 | 	add	_var02, _var01
263d0                 | '     if long[mailbox] < 0
263d0     01 01 02 FB | 	rdlong	_var01, _var02
263d4     00 00 56 F2 | 	cmps	_var01, #0 wc
263d8                 | '         return ERR_MAILBOX_BUSY
263d8     1C FA 65 C6 |  if_b	neg	result1, #28
263dc     3C 00 90 CD |  if_b	jmp	#LR__2991
263e0                 | '     long[mailbox][2] := count
263e0     08 02 06 F1 | 	add	_var02, #8
263e4     01 17 62 FC | 	wrlong	arg03, _var02
263e8                 | '     long[mailbox][1] := srcHubAddr
263e8     04 02 86 F1 | 	sub	_var02, #4
263ec     01 13 62 FC | 	wrlong	arg01, _var02
263f0     04 02 86 F1 | 	sub	_var02, #4
263f4                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
263f4     0A 05 02 F6 | 	mov	_var03, arg02
263f8     D9 04 06 F4 | 	bitl	_var03, #217
263fc     00 00 78 FF 
26400     00 00 06 F6 | 	mov	_var01, ##-268435456
26404     02 01 02 F1 | 	add	_var01, _var03
26408     01 01 62 FC | 	wrlong	_var01, _var02
2640c                 | '     repeat
2640c                 | LR__2990
2640c                 | '         result := long[mailbox]    
2640c     01 05 02 FB | 	rdlong	_var03, _var02
26410     00 04 56 F2 | 	cmps	_var03, #0 wc
26414     F4 FF 9F CD |  if_b	jmp	#LR__2990
26418                 | '     while result < 0   
26418                 | '     return -result                       'return success or error
26418     02 FB 61 F6 | 	neg	result1, _var03
2641c                 | LR__2991
2641c                 | _psram_spin2_write_ret
2641c     2D 00 64 FD | 	ret
26420                 | 
26420                 | ' 
26420                 | ' ' generalized fill
26420                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
26420                 | _psram_spin2_fill
26420     09 01 02 F6 | 	mov	_var01, arg01
26424     0A 03 02 F6 | 	mov	_var02, arg02
26428     0B 05 02 F6 | 	mov	_var03, arg03
2642c     0D 07 02 F6 | 	mov	_var04, arg05
26430                 | '     case datasize 
26430     01 06 86 F1 | 	sub	_var04, #1
26434     04 06 26 F3 | 	fle	_var04, #4
26438     30 06 62 FD | 	jmprel	_var04
2643c                 | LR__3000
2643c     10 00 90 FD | 	jmp	#LR__3001
26440     18 00 90 FD | 	jmp	#LR__3002
26444     2C 00 90 FD | 	jmp	#LR__3004
26448     1C 00 90 FD | 	jmp	#LR__3003
2644c     24 00 90 FD | 	jmp	#LR__3004
26450                 | LR__3001
26450                 | '         1: req := driver.R_WRITEBYTE
26450     00 00 60 FF 
26454     00 08 06 F6 | 	mov	_var05, ##-1073741824
26458     20 00 90 FD | 	jmp	#LR__3005
2645c                 | LR__3002
2645c                 | '         2: req := driver.R_WRITEWORD
2645c     00 00 68 FF 
26460     00 08 06 F6 | 	mov	_var05, ##-805306368
26464     14 00 90 FD | 	jmp	#LR__3005
26468                 | LR__3003
26468                 | '         4: req := driver.R_WRITELONG
26468     00 00 70 FF 
2646c     00 08 06 F6 | 	mov	_var05, ##-536870912
26470     08 00 90 FD | 	jmp	#LR__3005
26474                 | LR__3004
26474                 | '         other : return ERR_INVALID
26474     06 FA 65 F6 | 	neg	result1, #6
26478     94 00 90 FD | 	jmp	#LR__3007
2647c                 | LR__3005
2647c                 | '     if count == 0   ' nothing to do
2647c     00 04 0E F2 | 	cmp	_var03, #0 wz
26480                 | '         return 0
26480     00 FA 05 A6 |  if_e	mov	result1, #0
26484     88 00 90 AD |  if_e	jmp	#LR__3007
26488                 | '     if drivercog == -1
26488     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
2648c     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
26490     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26494     FF FF 7F FF 
26498     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
2649c                 | '         return ERR_INACTIVE
2649c     0F FA 65 A6 |  if_e	neg	result1, #15
264a0     6C 00 90 AD |  if_e	jmp	#LR__3007
264a4                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
264a4     00 FA 05 F6 | 	mov	result1, #0
264a8     01 FA 61 FD | 	cogid	result1
264ac     FD 06 02 F6 | 	mov	_var04, result1
264b0     01 06 66 F0 | 	shl	_var04, #1
264b4     FD 06 02 F1 | 	add	_var04, result1
264b8     02 06 66 F0 | 	shl	_var04, #2
264bc     FF 03 00 FF 
264c0     00 0B 06 F6 | 	mov	_var06, ##524032
264c4     03 0B 02 F1 | 	add	_var06, _var04
264c8                 | '     if long[mailbox] < 0
264c8     05 07 02 FB | 	rdlong	_var04, _var06
264cc     00 06 56 F2 | 	cmps	_var04, #0 wc
264d0                 | '         return ERR_MAILBOX_BUSY
264d0     1C FA 65 C6 |  if_b	neg	result1, #28
264d4     38 00 90 CD |  if_b	jmp	#LR__3007
264d8                 | '     long[mailbox][2] := count
264d8     08 0A 06 F1 | 	add	_var06, #8
264dc     05 05 62 FC | 	wrlong	_var03, _var06
264e0                 | '     long[mailbox][1] := pattern
264e0     04 0A 86 F1 | 	sub	_var06, #4
264e4     05 03 62 FC | 	wrlong	_var02, _var06
264e8     04 0A 86 F1 | 	sub	_var06, #4
264ec                 | '     long[mailbox] := req + (addr & $1ffffff)
264ec     04 0D 02 F6 | 	mov	_var07, _var05
264f0     00 0F 02 F6 | 	mov	_var08, _var01
264f4     D9 0E 06 F4 | 	bitl	_var08, #217
264f8     07 0D 02 F1 | 	add	_var07, _var08
264fc     05 0D 62 FC | 	wrlong	_var07, _var06
26500                 | '     repeat
26500                 | LR__3006
26500                 | '         r := long[mailbox]
26500     05 0F 02 FB | 	rdlong	_var08, _var06
26504     00 0E 56 F2 | 	cmps	_var08, #0 wc
26508     F4 FF 9F CD |  if_b	jmp	#LR__3006
2650c                 | '     while r < 0
2650c                 | '     return -r                  ' return 0 for success or negated error code
2650c     07 FB 61 F6 | 	neg	result1, _var08
26510                 | LR__3007
26510                 | _psram_spin2_fill_ret
26510     2D 00 64 FD | 	ret
26514                 | 
26514                 | ' 
26514                 | ' '..............................................................................
26514                 | ' 
26514                 | ' {{
26514                 | ' }}
26514                 | ' PUB setQos(cog, qos) : result | mailbox
26514                 | _psram_spin2_setQos
26514     09 01 02 F6 | 	mov	_var01, arg01
26518                 | '     if drivercog == -1 ' driver must be running
26518     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
2651c     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
26520     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26524     FF FF 7F FF 
26528     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
2652c                 | '         return ERR_INACTIVE
2652c     0F FA 65 A6 |  if_e	neg	result1, #15
26530     9C 00 90 AD |  if_e	jmp	#LR__3014
26534                 | '     if cog < 0 or cog > 7 ' enforce cog id range
26534     00 00 56 F2 | 	cmps	_var01, #0 wc
26538     08 00 90 CD |  if_b	jmp	#LR__3010
2653c     08 00 56 F2 | 	cmps	_var01, #8 wc
26540     08 00 90 CD |  if_b	jmp	#LR__3011
26544                 | LR__3010
26544                 | '         return ERR_INVALID
26544     06 FA 65 F6 | 	neg	result1, #6
26548     84 00 90 FD | 	jmp	#LR__3014
2654c                 | LR__3011
2654c                 | '     long[@qosData][cog] := qos & !$1ff
2654c     FF 15 26 F5 | 	andn	arg02, #511
26550     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
26554     02 00 66 F0 | 	shl	_var01, #2
26558     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
2655c     00 15 62 FC | 	wrlong	arg02, _var01
26560                 | '     mailbox := $7FF00 + drivercog*12
26560     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
26564     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
26568     02 07 02 F6 | 	mov	_var04, _var03
2656c     01 06 66 F0 | 	shl	_var04, #1
26570     02 07 02 F1 | 	add	_var04, _var03
26574     02 06 66 F0 | 	shl	_var04, #2
26578     FF 03 00 FF 
2657c     00 09 06 F6 | 	mov	_var05, ##524032
26580     03 09 02 F1 | 	add	_var05, _var04
26584                 | '     repeat until LOCKTRY(driverlock)
26584     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
26588                 | LR__3012
26588     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
2658c     06 12 72 FD | 	locktry	arg01 wc
26590     F4 FF 9F 3D |  if_ae	jmp	#LR__3012
26594     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
26598                 | '     long[mailbox] := driver.R_CONFIG + cogid()
26598     00 06 06 F6 | 	mov	_var04, #0
2659c     01 06 62 FD | 	cogid	_var04
265a0     00 00 78 FF 
265a4     00 02 06 F6 | 	mov	_var02, ##-268435456
265a8     03 03 02 F1 | 	add	_var02, _var04
265ac     04 03 62 FC | 	wrlong	_var02, _var05
265b0                 | '     repeat while long[mailbox] < 0
265b0                 | LR__3013
265b0     04 03 02 FB | 	rdlong	_var02, _var05
265b4     00 02 56 F2 | 	cmps	_var02, #0 wc
265b8     F4 FF 9F CD |  if_b	jmp	#LR__3013
265bc                 | '     LOCKREL(driverlock)
265bc     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
265c0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
265c4     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
265c8     07 12 72 FD | 	lockrel	arg01 wc
265cc     00 FA 05 F6 | 	mov	result1, #0
265d0                 | LR__3014
265d0                 | _psram_spin2_setQos_ret
265d0     2D 00 64 FD | 	ret
265d4                 | 
265d4                 | ' 
265d4                 | ' '..............................................................................
265d4                 | ' 
265d4                 | ' {{
265d4                 | ' }}
265d4                 | ' PRI lookupDelay(freq) : delay | profile
265d4                 | _psram_spin2_lookupDelay
265d4                 | '     profile := @delayTable
265d4     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
265d8     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
265dc                 | '     delay := long[profile][0]
265dc     00 03 02 FB | 	rdlong	_var02, _var01
265e0                 | '     repeat while long[profile][1] 
265e0     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
265e4     97 16 48 FB | 	callpa	#(@LR__3021-@LR__3020)>>2,fcache_load_ptr_
265e8                 | LR__3020
265e8     04 00 06 F1 | 	add	_var01, #4
265ec     00 FB 09 FB | 	rdlong	result1, _var01 wz
265f0     04 00 86 F1 | 	sub	_var01, #4
265f4     1C 00 90 AD |  if_e	jmp	#LR__3022
265f8                 | '         if freq +< long[profile][1] 
265f8     04 00 06 F1 | 	add	_var01, #4
265fc     00 FB 01 FB | 	rdlong	result1, _var01
26600     04 00 86 F1 | 	sub	_var01, #4
26604     FD 12 12 F2 | 	cmp	arg01, result1 wc
26608                 | '             quit
26608                 | '         profile += 4
26608     04 00 06 31 |  if_ae	add	_var01, #4
2660c                 | '         delay++
2660c     01 02 06 31 |  if_ae	add	_var02, #1
26610     D4 FF 9F 3D |  if_ae	jmp	#LR__3020
26614                 | LR__3021
26614                 | LR__3022
26614     01 FB 01 F6 | 	mov	result1, _var02
26618                 | _psram_spin2_lookupDelay_ret
26618     2D 00 64 FD | 	ret
2661c                 | 
2661c                 | ' 
2661c                 | ' PUB start() : r
2661c                 | _usbnew_spin2_start
2661c     00 00 06 F6 | 	mov	_var01, #0
26620                 | '   ifnot driver_cog
26620     15 00 00 FF 
26624     47 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10823
26628     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
2662c     15 00 00 FF 
26630     47 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10823
26634     38 00 90 5D |  if_ne	jmp	#LR__3030
26638                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
26638     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
2663c     10 00 06 F6 | 	mov	_var01, #16
26640     00 16 06 F6 | 	mov	arg03, #0
26644     28 16 62 FD | 	setq	arg03
26648     0A 01 F2 FC | 	coginit	_var01, arg02 wc
2664c     01 00 66 C6 |  if_b	neg	_var01, #1
26650                 | '     if r >= 0
26650     00 00 56 F2 | 	cmps	_var01, #0 wc
26654                 | '       driver_cog := r+1
26654     00 03 02 36 |  if_ae	mov	_var02, _var01
26658     01 02 06 31 |  if_ae	add	_var02, #1
2665c     15 00 00 3F 
26660     47 F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10823
26664     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
26668     15 00 00 3F 
2666c     47 F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10823
26670                 | LR__3030
26670     00 FB 01 F6 | 	mov	result1, _var01
26674                 | _usbnew_spin2_start_ret
26674     2D 00 64 FD | 	ret
26678                 | 
26678                 | '     '' (Always enabled)
26678                 | ' 
26678                 | ' '' Get current pressed state of a keyboard key
26678                 | ' PUB keystate(key) : r | buf[2],tmp
26678                 | _usbnew_spin2_keystate
26678     00 04 06 F6 | 	mov	_var03, #0
2667c                 | '   if key >= $E0 && key < $E8
2667c     E0 12 56 F2 | 	cmps	arg01, #224 wc
26680     34 00 90 CD |  if_b	jmp	#LR__3040
26684     E8 12 56 F2 | 	cmps	arg01, #232 wc
26688     2C 00 90 3D |  if_ae	jmp	#LR__3040
2668c                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
2668c     00 FA 05 F6 | 	mov	result1, #0
26690     13 00 00 FF 
26694     C8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10184
26698     09 07 02 F6 | 	mov	_var04, arg01
2669c     E0 06 86 F1 | 	sub	_var04, #224
266a0     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
266a4     03 09 4A F0 | 	shr	_var05, _var04 wz
266a8     13 00 00 FF 
266ac     C8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10184
266b0     01 FA 65 56 |  if_ne	neg	result1, #1
266b4     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
266b8                 | LR__3040
266b8                 | '   else
266b8                 | '     '' Do this in inline ASM to ensure atomicity
266b8                 | '     tmp := @hkbd_report
266b8     13 00 00 FF 
266bc     C8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10184
266c0     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
266c4                 | '     org
266c4     13 00 00 FF 
266c8     C8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10184
266cc     97 1E 48 FB | 	callpa	#(@LR__3042-@LR__3041)>>2,fcache_load_ptr_
266d0                 | LR__3041
266d0 000             | 	org	0
266d0 000 28 02 64 FD | 	setq	#1
266d4 001 04 01 02 FB | 	rdlong	_var01, _var05
266d8 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
266dc 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
266e0 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
266e4 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
266e8 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
266ec 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
266f0 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
266f4 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
266f8 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
266fc 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
26700 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
26704 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
26708 00e 01 04 66 A6 |  if_e	neg	_var03, #1
2670c 00f             | LR__3042
2670c                 | 	orgh
2670c     02 FB 01 F6 | 	mov	result1, _var03
26710                 | _usbnew_spin2_keystate_ret
26710     2D 00 64 FD | 	ret
26714                 | 
26714                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
26714                 | ' 
26714                 | ' '' Return key event from buffer if there is one
26714                 | ' PUB get_key() : r | tail
26714                 | _usbnew_spin2_get_key
26714                 | '   tail := keyq_tail
26714     0F 00 00 FF 
26718     C5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7877
2671c     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
26720                 | '   if keyq_head == tail
26720     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
26724     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
26728     0F 00 00 FF 
2672c     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
26730     00 03 0A F2 | 	cmp	_var02, _var01 wz
26734                 | '     return 0 ' No event
26734     00 FA 05 A6 |  if_e	mov	result1, #0
26738     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
2673c                 | '   r := keyq_data[tail]
2673c     00 03 02 F6 | 	mov	_var02, _var01
26740     02 02 66 F0 | 	shl	_var02, #2
26744     0F 00 00 FF 
26748     C6 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7878
2674c     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
26750     01 FB 01 FB | 	rdlong	result1, _var02
26754                 | '   if ++tail == KEYQUEUE_SIZE
26754     01 00 06 F1 | 	add	_var01, #1
26758     80 00 0E F2 | 	cmp	_var01, #128 wz
2675c                 | '     tail := 0
2675c     00 00 06 A6 |  if_e	mov	_var01, #0
26760                 | '   keyq_tail := tail
26760     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
26764     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
26768     0F 00 00 FF 
2676c     C5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7877
26770                 | _usbnew_spin2_get_key_ret
26770     2D 00 64 FD | 	ret
26774                 | 
26774                 | ' 
26774                 | ' '' Emulate mouse movement
26774                 | ' PUB mouse_move(x,y)
26774                 | _usbnew_spin2_mouse_move
26774     02 4A 05 F6 | 	mov	COUNT_, #2
26778     A8 00 A0 FD | 	call	#pushregs_
2677c     09 27 02 F6 | 	mov	local01, arg01
26780     0A 29 02 F6 | 	mov	local02, arg02
26784                 | '   mouse_lock := 1
26784     14 00 00 FF 
26788     B1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10417
2678c     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
26790     14 00 00 FF 
26794     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
26798                 | '   waitus(2) ' hope driver is now done
26798     02 12 06 F6 | 	mov	arg01, #2
2679c     30 0B B0 FD | 	call	#__system___waitus
267a0                 | '   mouse_xacc := x
267a0     14 00 00 FF 
267a4     A1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10401
267a8     FB 26 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
267ac                 | '   mouse_yacc := y
267ac     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
267b0     FB 28 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
267b4                 | '   if mouse_outptr
267b4     04 00 00 FF 
267b8     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
267bc     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
267c0     0F 00 00 FF 
267c4     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
267c8     24 00 90 AD |  if_e	jmp	#LR__3050
267cc                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
267cc     10 28 66 F0 | 	shl	local02, #16
267d0     13 27 32 F9 | 	getword	local01, local01, #0
267d4     13 29 42 F5 | 	or	local02, local01
267d8     0F 00 00 FF 
267dc     C0 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7872
267e0     FB 26 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
267e4     0F 00 00 FF 
267e8     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
267ec     13 29 62 FC | 	wrlong	local02, local01
267f0                 | LR__3050
267f0                 | '   mouse_lock := 0
267f0     14 00 00 FF 
267f4     B1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10417
267f8     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
267fc     14 00 00 FF 
26800     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
26804     A7 F0 03 F6 | 	mov	ptra, fp
26808     B2 00 A0 FD | 	call	#popregs_
2680c                 | _usbnew_spin2_mouse_move_ret
2680c     2D 00 64 FD | 	ret
26810                 | 
26810                 | '     '' Set HAVE_HIDPAD to enable.
26810                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
26810                 | ' 
26810                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
26810                 | ' PUB hidpad_id(dev) : r
26810                 | _usbnew_spin2_hidpad_id
26810                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
26810     13 00 00 FF 
26814     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
26818     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
2681c     09 01 02 F6 | 	mov	_var01, arg01
26820     03 00 66 F0 | 	shl	_var01, #3
26824     09 01 82 F1 | 	sub	_var01, arg01
26828     02 00 66 F0 | 	shl	_var01, #2
2682c     00 FB 01 F1 | 	add	result1, _var01
26830     FD FA 01 FB | 	rdlong	result1, result1
26834     13 00 00 FF 
26838     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
2683c                 | _usbnew_spin2_hidpad_id_ret
2683c     2D 00 64 FD | 	ret
26840                 | 
26840                 | ' 
26840                 | ' '' Get all button states for a device
26840                 | ' PUB hidpad_buttons(dev) : r 
26840                 | _usbnew_spin2_hidpad_buttons
26840                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
26840     13 00 00 FF 
26844     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
26848     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
2684c     09 01 02 F6 | 	mov	_var01, arg01
26850     03 00 66 F0 | 	shl	_var01, #3
26854     09 01 82 F1 | 	sub	_var01, arg01
26858     02 00 66 F0 | 	shl	_var01, #2
2685c     00 FB 01 F1 | 	add	result1, _var01
26860     14 FA 05 F1 | 	add	result1, #20
26864     FD FA 01 FB | 	rdlong	result1, result1
26868     13 00 00 FF 
2686c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
26870                 | _usbnew_spin2_hidpad_buttons_ret
26870     2D 00 64 FD | 	ret
26874                 | 
26874                 | ' 
26874                 | ' '' Get state of an axis (normalized between -32768 and 32767)
26874                 | ' PUB hidpad_axis(dev,axnum) : r
26874                 | _usbnew_spin2_hidpad_axis
26874                 | '   if axnum +>= 6
26874     06 14 16 F2 | 	cmp	arg02, #6 wc
26878                 | '     return 0
26878     00 FA 05 36 |  if_ae	mov	result1, #0
2687c     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
26880                 | '   else 
26880                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
26880     13 00 00 FF 
26884     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
26888     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
2688c     09 01 02 F6 | 	mov	_var01, arg01
26890     03 00 66 F0 | 	shl	_var01, #3
26894     09 01 82 F1 | 	sub	_var01, arg01
26898     02 00 66 F0 | 	shl	_var01, #2
2689c     00 FB 01 F1 | 	add	result1, _var01
268a0     04 00 06 F6 | 	mov	_var01, #4
268a4     0A 01 02 F1 | 	add	_var01, arg02
268a8     01 00 66 F0 | 	shl	_var01, #1
268ac     FD 00 02 F1 | 	add	_var01, result1
268b0     00 FB E1 FA | 	rdword	result1, _var01
268b4     0F FA 65 F7 | 	signx	result1, #15
268b8     13 00 00 FF 
268bc     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
268c0                 | _usbnew_spin2_hidpad_axis_ret
268c0     2D 00 64 FD | 	ret
268c4                 | 
268c4                 | ' 
268c4                 | ' '' Get state of a hat
268c4                 | ' PUB hidpad_hat(dev,hatnum) : r
268c4                 | _usbnew_spin2_hidpad_hat
268c4                 | '   if hatnum +>= 4
268c4     04 14 16 F2 | 	cmp	arg02, #4 wc
268c8                 | '     return 0
268c8     00 FA 05 36 |  if_ae	mov	result1, #0
268cc     38 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_hat_ret
268d0                 | '   else 
268d0                 | '     return byte[@hidpad_report+dev*HIDPAD_REPORT_SIZE][6*4+hatnum]
268d0     13 00 00 FF 
268d4     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
268d8     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
268dc     09 01 02 F6 | 	mov	_var01, arg01
268e0     03 00 66 F0 | 	shl	_var01, #3
268e4     09 01 82 F1 | 	sub	_var01, arg01
268e8     02 00 66 F0 | 	shl	_var01, #2
268ec     00 FB 01 F1 | 	add	result1, _var01
268f0     18 00 06 F6 | 	mov	_var01, #24
268f4     0A 01 02 F1 | 	add	_var01, arg02
268f8     FD 00 02 F1 | 	add	_var01, result1
268fc     00 FB C1 FA | 	rdbyte	result1, _var01
26900     13 00 00 FF 
26904     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
26908                 | _usbnew_spin2_hidpad_hat_ret
26908     2D 00 64 FD | 	ret
2690c                 | 
2690c                 | ' 
2690c                 | ' 
2690c                 | ' '--------------------------------------------------------------
2690c                 | ' '---------- Init the variables, start the cog. ----------------
2690c                 | ' '--------------------------------------------------------------
2690c                 | ' 
2690c                 | ' pub start(mbox,scope,cache) :cog,base | iii
2690c                 | _audio096_spin2_start
2690c     04 4A 05 F6 | 	mov	COUNT_, #4
26910     A8 00 A0 FD | 	call	#pushregs_
26914     09 27 02 F6 | 	mov	local01, arg01
26918                 | ' 
26918                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
26918                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
26918                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
26918                 | ' 
26918                 | ' mailboxaddr:=mbox 
26918     F2 26 62 FC | 	wrlong	local01, objptr
2691c                 | ' scope_ptr:=scope
2691c     04 E4 05 F1 | 	add	objptr, #4
26920     F2 14 62 FC | 	wrlong	arg02, objptr
26924                 | ' cache_ptr:=cache
26924     04 E4 05 F1 | 	add	objptr, #4
26928     F2 16 62 FC | 	wrlong	arg03, objptr
2692c                 | ' base:=@channel1[0]
2692c     04 E4 05 F1 | 	add	objptr, #4
26930     F2 28 02 F6 | 	mov	local02, objptr
26934                 | ' long[$40]:=mbox
26934     40 26 66 FC | 	wrlong	local01, #64
26938                 | ' repeat iii from 0 to 7
26938     00 2A 06 F6 | 	mov	local03, #0
2693c     02 00 00 FF 
26940     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
26944     0C E4 85 F1 | 	sub	objptr, #12
26948     97 BC 48 FB | 	callpa	#(@LR__3061-@LR__3060)>>2,fcache_load_ptr_
2694c                 | LR__3060
2694c                 | '   long[base+64*iii]:=0
2694c     14 27 02 F6 | 	mov	local01, local02
26950     15 FD 01 F6 | 	mov	result2, local03
26954     06 FC 65 F0 | 	shl	result2, #6
26958     FE 26 02 F1 | 	add	local01, result2
2695c     13 01 68 FC | 	wrlong	#0, local01
26960                 | '   long[base+64*iii+4]:=0
26960     14 27 02 F6 | 	mov	local01, local02
26964     15 FD 01 F6 | 	mov	result2, local03
26968     06 FC 65 F0 | 	shl	result2, #6
2696c     FE 26 02 F1 | 	add	local01, result2
26970     04 26 06 F1 | 	add	local01, #4
26974     13 01 68 FC | 	wrlong	#0, local01
26978                 | '   long[base+64*iii+12]:=0
26978     14 2D 02 F6 | 	mov	local04, local02
2697c     15 27 02 F6 | 	mov	local01, local03
26980     06 26 66 F0 | 	shl	local01, #6
26984     13 2D 02 F1 | 	add	local04, local01
26988     0C 2C 06 F1 | 	add	local04, #12
2698c     16 01 68 FC | 	wrlong	#0, local04
26990                 | '   long[base+64*iii+16]:=2 
26990     14 2D 02 F6 | 	mov	local04, local02
26994     15 27 02 F6 | 	mov	local01, local03
26998     06 26 66 F0 | 	shl	local01, #6
2699c     13 2D 02 F1 | 	add	local04, local01
269a0     10 2C 06 F1 | 	add	local04, #16
269a4     16 05 68 FC | 	wrlong	#2, local04
269a8                 | '   word[base+64*iii+20]:=0
269a8     14 2D 02 F6 | 	mov	local04, local02
269ac     15 27 02 F6 | 	mov	local01, local03
269b0     06 26 66 F0 | 	shl	local01, #6
269b4     13 2D 02 F1 | 	add	local04, local01
269b8     14 2C 06 F1 | 	add	local04, #20
269bc     16 01 58 FC | 	wrword	#0, local04
269c0                 | '   word[base+64*iii+22]:=8192
269c0     14 2D 02 F6 | 	mov	local04, local02
269c4     15 27 02 F6 | 	mov	local01, local03
269c8     06 26 66 F0 | 	shl	local01, #6
269cc     13 2D 02 F1 | 	add	local04, local01
269d0     16 2C 06 F1 | 	add	local04, #22
269d4     10 00 80 FF 
269d8     16 01 58 FC | 	wrword	##8192, local04
269dc                 | '   word[base+64*iii+24]:=4000+2*iii
269dc     15 2D 02 F6 | 	mov	local04, local03
269e0     01 2C 66 F0 | 	shl	local04, #1
269e4     07 00 00 FF 
269e8     A0 27 06 F6 | 	mov	local01, ##4000
269ec     16 27 02 F1 | 	add	local01, local04
269f0     14 2D 02 F6 | 	mov	local04, local02
269f4     15 FD 01 F6 | 	mov	result2, local03
269f8     06 FC 65 F0 | 	shl	result2, #6
269fc     FE 2C 02 F1 | 	add	local04, result2
26a00     18 2C 06 F1 | 	add	local04, #24
26a04     16 27 52 FC | 	wrword	local01, local04
26a08                 | '   word[base+64*iii+26]:=2
26a08     14 2D 02 F6 | 	mov	local04, local02
26a0c     15 27 02 F6 | 	mov	local01, local03
26a10     06 26 66 F0 | 	shl	local01, #6
26a14     13 2D 02 F1 | 	add	local04, local01
26a18     1A 2C 06 F1 | 	add	local04, #26
26a1c     16 05 58 FC | 	wrword	#2, local04
26a20                 | '   long [base+64*iii+8]:=@null | $C0000000
26a20     F4 26 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
26a24     3E 26 26 F4 | 	bith	local01, #62
26a28     14 2D 02 F6 | 	mov	local04, local02
26a2c     15 17 02 F6 | 	mov	arg03, local03
26a30     06 16 66 F0 | 	shl	arg03, #6
26a34     0B 2D 02 F1 | 	add	local04, arg03
26a38     08 2C 06 F1 | 	add	local04, #8
26a3c     16 27 62 FC | 	wrlong	local01, local04
26a40                 | '   long[base+64*iii+32]:=0
26a40     14 2D 02 F6 | 	mov	local04, local02
26a44     15 27 02 F6 | 	mov	local01, local03
26a48     06 26 66 F0 | 	shl	local01, #6
26a4c     13 2D 02 F1 | 	add	local04, local01
26a50     20 2C 06 F1 | 	add	local04, #32
26a54     16 01 68 FC | 	wrlong	#0, local04
26a58                 | '   long[base+64*iii+36]:=0
26a58     14 2D 02 F6 | 	mov	local04, local02
26a5c     15 27 02 F6 | 	mov	local01, local03
26a60     06 26 66 F0 | 	shl	local01, #6
26a64     13 2D 02 F1 | 	add	local04, local01
26a68     24 2C 06 F1 | 	add	local04, #36
26a6c     16 01 68 FC | 	wrlong	#0, local04
26a70                 | '   long[base+64*iii+40]:=0
26a70     14 2D 02 F6 | 	mov	local04, local02
26a74     15 27 02 F6 | 	mov	local01, local03
26a78     06 26 66 F0 | 	shl	local01, #6
26a7c     13 2D 02 F1 | 	add	local04, local01
26a80     28 2C 06 F1 | 	add	local04, #40
26a84     16 01 68 FC | 	wrlong	#0, local04
26a88                 | '   long[base+64*iii+44]:=0
26a88     14 2D 02 F6 | 	mov	local04, local02
26a8c     15 27 02 F6 | 	mov	local01, local03
26a90     06 26 66 F0 | 	shl	local01, #6
26a94     13 2D 02 F1 | 	add	local04, local01
26a98     2C 2C 06 F1 | 	add	local04, #44
26a9c     16 01 68 FC | 	wrlong	#0, local04
26aa0                 | '   long[base+64*iii+28]:=0
26aa0     14 2D 02 F6 | 	mov	local04, local02
26aa4     15 27 02 F6 | 	mov	local01, local03
26aa8     06 26 66 F0 | 	shl	local01, #6
26aac     13 2D 02 F1 | 	add	local04, local01
26ab0     1C 2C 06 F1 | 	add	local04, #28
26ab4     16 01 68 FC | 	wrlong	#0, local04
26ab8     01 2A 06 F1 | 	add	local03, #1
26abc     08 2A 56 F2 | 	cmps	local03, #8 wc
26ac0     88 FE 9F CD |  if_b	jmp	#LR__3060
26ac4                 | LR__3061
26ac4     02 00 00 FF 
26ac8     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
26acc                 | '   
26acc                 | ' cog:=coginit(16,@audio,@mailboxaddr)
26acc     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
26ad0     F2 16 02 F6 | 	mov	arg03, objptr
26ad4     10 2C 06 F6 | 	mov	local04, #16
26ad8     28 16 62 FD | 	setq	arg03
26adc     0A 2D F2 FC | 	coginit	local04, arg02 wc
26ae0     01 2C 66 C6 |  if_b	neg	local04, #1
26ae4                 | ' waitms(100)
26ae4     64 12 06 F6 | 	mov	arg01, #100
26ae8     78 07 B0 FD | 	call	#__system___waitms
26aec                 | ' return cog,base
26aec     14 FD 01 F6 | 	mov	result2, local02
26af0     16 FB 01 F6 | 	mov	result1, local04
26af4     A7 F0 03 F6 | 	mov	ptra, fp
26af8     B2 00 A0 FD | 	call	#popregs_
26afc                 | _audio096_spin2_start_ret
26afc     2D 00 64 FD | 	ret
26b00                 | 
26b00                 | ' 
26b00                 | ' ' a simple play procedure to not poke everything. 
26b00                 | ' 
26b00                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
26b00                 | _audio096_spin2_play
26b00     0C E4 05 F1 | 	add	objptr, #12
26b04     F2 00 02 F6 | 	mov	_var01, objptr
26b08     06 12 66 F0 | 	shl	arg01, #6
26b0c     09 01 02 F1 | 	add	_var01, arg01
26b10     00 13 02 F6 | 	mov	arg01, _var01
26b14     0C 12 06 F1 | 	add	arg01, #12
26b18     09 1B 62 FC | 	wrlong	arg05, arg01
26b1c     00 1C 56 F2 | 	cmps	arg06, #0 wc
26b20     00 13 02 36 |  if_ae	mov	arg01, _var01
26b24     10 12 06 31 |  if_ae	add	arg01, #16
26b28     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
26b2c     02 1A 06 C1 |  if_b	add	arg05, #2
26b30     00 13 02 C6 |  if_b	mov	arg01, _var01
26b34     10 12 06 C1 |  if_b	add	arg01, #16
26b38     09 1B 62 CC |  if_b	wrlong	arg05, arg01
26b3c     0B 13 52 F6 | 	abs	arg01, arg03 wc
26b40     0F 1B 80 FF 
26b44     09 1F 1A FD | 	qdiv	##3546895, arg01
26b48                 | ' 
26b48                 | ' base2:=@channel1[0]+64*channel
26b48                 | ' 
26b48                 | ' 
26b48                 | ' long[base2+12]:= len
26b48                 | ' if loop >=0 
26b48                 | '   long[base2+16]:= loop
26b48     0C E4 85 F1 | 	sub	objptr, #12
26b4c                 | ' else
26b4c                 | '   long[base2+16]:= len+2
26b4c                 | ' word[base2+20]:=vol
26b4c     00 13 02 F6 | 	mov	arg01, _var01
26b50     14 12 06 F1 | 	add	arg01, #20
26b54     09 19 52 FC | 	wrword	arg04, arg01
26b58                 | ' word[base2+24]:= 3546895/splfreq 
26b58     00 19 02 F6 | 	mov	arg04, _var01
26b5c     18 18 06 F1 | 	add	arg04, #24
26b60                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
26b60                 | ' long[base2+28]:=$40000000    
26b60                 | ' long[base2+32]:=0    
26b60                 | ' long[base2+36]:=0    
26b60                 | ' long[base2+40]:=0    
26b60                 | ' long[base2+44]:=0    
26b60                 | ' long[base2+8]:=sample+$C0000000     
26b60     00 00 60 FF 
26b64     00 14 06 F1 | 	add	arg02, ##-1073741824
26b68     18 12 62 FD | 	getqx	arg01
26b6c     09 13 82 F6 | 	negc	arg01, arg01
26b70     0C 13 52 FC | 	wrword	arg01, arg04
26b74     00 13 02 F6 | 	mov	arg01, _var01
26b78     1A 12 06 F1 | 	add	arg01, #26
26b7c     09 01 5A FC | 	wrword	#256, arg01
26b80     00 13 02 F6 | 	mov	arg01, _var01
26b84     1C 12 06 F1 | 	add	arg01, #28
26b88     00 00 A0 FF 
26b8c     09 01 68 FC | 	wrlong	##1073741824, arg01
26b90     00 13 02 F6 | 	mov	arg01, _var01
26b94     20 12 06 F1 | 	add	arg01, #32
26b98     09 01 68 FC | 	wrlong	#0, arg01
26b9c     00 13 02 F6 | 	mov	arg01, _var01
26ba0     24 12 06 F1 | 	add	arg01, #36
26ba4     09 01 68 FC | 	wrlong	#0, arg01
26ba8     00 13 02 F6 | 	mov	arg01, _var01
26bac     28 12 06 F1 | 	add	arg01, #40
26bb0     09 01 68 FC | 	wrlong	#0, arg01
26bb4     00 13 02 F6 | 	mov	arg01, _var01
26bb8     2C 12 06 F1 | 	add	arg01, #44
26bbc     09 01 68 FC | 	wrlong	#0, arg01
26bc0     08 00 06 F1 | 	add	_var01, #8
26bc4     00 15 62 FC | 	wrlong	arg02, _var01
26bc8                 | _audio096_spin2_play_ret
26bc8     2D 00 64 FD | 	ret
26bcc                 | 
26bcc                 | ' 
26bcc                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
26bcc                 | _audio096_spin2_play8
26bcc                 | ' 
26bcc                 | ' base2:=@channel1[0]+64*channel
26bcc     0C E4 05 F1 | 	add	objptr, #12
26bd0     F2 00 02 F6 | 	mov	_var01, objptr
26bd4     06 12 66 F0 | 	shl	arg01, #6
26bd8     09 01 02 F1 | 	add	_var01, arg01
26bdc                 | ' long[base2]:=0
26bdc     00 01 68 FC | 	wrlong	#0, _var01
26be0                 | ' long[base2+8]:=sample+$40000000 
26be0     00 00 20 FF 
26be4     00 14 06 F1 | 	add	arg02, ##1073741824
26be8     00 13 02 F6 | 	mov	arg01, _var01
26bec     08 12 06 F1 | 	add	arg01, #8
26bf0     09 15 62 FC | 	wrlong	arg02, arg01
26bf4                 | ' if loop>=0
26bf4     00 1C 56 F2 | 	cmps	arg06, #0 wc
26bf8     0C E4 85 F1 | 	sub	objptr, #12
26bfc     1C 00 90 CD |  if_b	jmp	#LR__3070
26c00                 | '   long[base2+12]:=loop
26c00     00 15 02 F6 | 	mov	arg02, _var01
26c04     0C 14 06 F1 | 	add	arg02, #12
26c08     0A 1D 62 FC | 	wrlong	arg06, arg02
26c0c                 | '   long[base2+16]:= len
26c0c     00 1D 02 F6 | 	mov	arg06, _var01
26c10     10 1C 06 F1 | 	add	arg06, #16
26c14     0E 1B 62 FC | 	wrlong	arg05, arg06
26c18     1C 00 90 FD | 	jmp	#LR__3071
26c1c                 | LR__3070
26c1c                 | ' else
26c1c                 | '   long[base2+12]:= len
26c1c     00 1D 02 F6 | 	mov	arg06, _var01
26c20     0C 1C 06 F1 | 	add	arg06, #12
26c24     0E 1B 62 FC | 	wrlong	arg05, arg06
26c28                 | '   long[base2+16]:= len+1
26c28     01 1A 06 F1 | 	add	arg05, #1
26c2c     00 13 02 F6 | 	mov	arg01, _var01
26c30     10 12 06 F1 | 	add	arg01, #16
26c34     09 1B 62 FC | 	wrlong	arg05, arg01
26c38                 | LR__3071
26c38     0B 17 52 F6 | 	abs	arg03, arg03 wc
26c3c     0F 1B 80 FF 
26c40     0B 1F 1A FD | 	qdiv	##3546895, arg03
26c44                 | ' word[base2+20]:=vol
26c44     00 17 02 F6 | 	mov	arg03, _var01
26c48     14 16 06 F1 | 	add	arg03, #20
26c4c     0B 19 52 FC | 	wrword	arg04, arg03
26c50                 | ' word[base2+24]:= 3546895 /splfreq 
26c50     00 13 02 F6 | 	mov	arg01, _var01
26c54     18 12 06 F1 | 	add	arg01, #24
26c58                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
26c58     1A 00 06 F1 | 	add	_var01, #26
26c5c     18 18 62 FD | 	getqx	arg04
26c60     0C 19 82 F6 | 	negc	arg04, arg04
26c64     09 19 52 FC | 	wrword	arg04, arg01
26c68     00 01 5A FC | 	wrword	#256, _var01
26c6c                 | _audio096_spin2_play8_ret
26c6c     2D 00 64 FD | 	ret
26c70                 | 
26c70                 | ' 'long[base2+28]:=$40000000
26c70                 | ' 
26c70                 | '     
26c70                 | ' pub stop(channel) 'silence it
26c70                 | _audio096_spin2_stop
26c70                 | ' 
26c70                 | ' word[@channel1[0]+64*channel+20]:=0
26c70     0C E4 05 F1 | 	add	objptr, #12
26c74     F2 00 02 F6 | 	mov	_var01, objptr
26c78     09 03 02 F6 | 	mov	_var02, arg01
26c7c     06 02 66 F0 | 	shl	_var02, #6
26c80     01 01 02 F1 | 	add	_var01, _var02
26c84     14 00 06 F1 | 	add	_var01, #20
26c88     00 01 58 FC | 	wrword	#0, _var01
26c8c                 | ' word[@channel1[0]+64*channel+20]:=0
26c8c     F2 00 02 F6 | 	mov	_var01, objptr
26c90     06 12 66 F0 | 	shl	arg01, #6
26c94     09 01 02 F1 | 	add	_var01, arg01
26c98     14 00 06 F1 | 	add	_var01, #20
26c9c     00 01 58 FC | 	wrword	#0, _var01
26ca0     0C E4 85 F1 | 	sub	objptr, #12
26ca4                 | _audio096_spin2_stop_ret
26ca4     2D 00 64 FD | 	ret
26ca8                 | hubexit
26ca8     81 00 80 FD | 	jmp	#cogexit
26cac                 | 
26cac                 | __system___setbaud
26cac     14 90 06 FB | 	rdlong	muldiva_, #20
26cb0     09 93 02 F6 | 	mov	muldivb_, arg01
26cb4     BA 00 A0 FD | 	call	#divide_
26cb8     97 06 48 FB | 	callpa	#(@LR__3081-@LR__3080)>>2,fcache_load_ptr_
26cbc                 | LR__3080
26cbc     3E FA 9D FA | 	rdpin	result1, #62 wc
26cc0     FE FC A1 F1 | 	subx	result2, result2
26cc4     F4 FF 9F CD |  if_b	jmp	#LR__3080
26cc8                 | LR__3081
26cc8     40 7C 64 FD | 	dirl	#62
26ccc     40 7E 64 FD | 	dirl	#63
26cd0     F3 92 62 FC | 	wrlong	muldivb_, ptr___system__dat__
26cd4     10 92 66 F0 | 	shl	muldivb_, #16
26cd8     07 14 06 F6 | 	mov	arg02, #7
26cdc     49 15 02 F1 | 	add	arg02, muldivb_
26ce0     3E F8 0C FC | 	wrpin	#124, #62
26ce4     3E 14 16 FC | 	wxpin	arg02, #62
26ce8     3F 7C 0C FC | 	wrpin	#62, #63
26cec     14 14 06 F1 | 	add	arg02, #20
26cf0     3F 14 16 FC | 	wxpin	arg02, #63
26cf4     41 7C 64 FD | 	dirh	#62
26cf8     41 7E 64 FD | 	dirh	#63
26cfc                 | __system___setbaud_ret
26cfc     2D 00 64 FD | 	ret
26d00                 | 
26d00                 | __system___txraw
26d00     01 4A 05 F6 | 	mov	COUNT_, #1
26d04     A8 00 A0 FD | 	call	#pushregs_
26d08     09 27 02 F6 | 	mov	local01, arg01
26d0c     97 06 48 FB | 	callpa	#(@LR__3091-@LR__3090)>>2,fcache_load_ptr_
26d10                 | LR__3090
26d10     3E FA 9D FA | 	rdpin	result1, #62 wc
26d14     FE FC A1 F1 | 	subx	result2, result2
26d18     F4 FF 9F CD |  if_b	jmp	#LR__3090
26d1c                 | LR__3091
26d1c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
26d20     C2 01 00 AF 
26d24     00 12 06 A6 |  if_e	mov	arg01, ##230400
26d28     80 FF BF AD |  if_e	call	#__system___setbaud
26d2c     58 7C 64 FD | 	drvl	#62
26d30     3E 26 26 FC | 	wypin	local01, #62
26d34     01 FA 05 F6 | 	mov	result1, #1
26d38     A7 F0 03 F6 | 	mov	ptra, fp
26d3c     B2 00 A0 FD | 	call	#popregs_
26d40                 | __system___txraw_ret
26d40     2D 00 64 FD | 	ret
26d44                 | 
26d44                 | __system___rxraw
26d44     0D 4A 05 F6 | 	mov	COUNT_, #13
26d48     A8 00 A0 FD | 	call	#pushregs_
26d4c     09 27 02 F6 | 	mov	local01, arg01
26d50     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26d54     C2 01 00 AF 
26d58     00 12 06 A6 |  if_e	mov	arg01, ##230400
26d5c     4C FF BF AD |  if_e	call	#__system___setbaud
26d60     00 26 0E F2 | 	cmp	local01, #0 wz
26d64     20 00 90 AD |  if_e	jmp	#LR__3100
26d68     14 2A 06 FB | 	rdlong	local03, #20
26d6c     0A 2A 46 F0 | 	shr	local03, #10
26d70     15 27 02 FD | 	qmul	local01, local03
26d74     1A FA 61 FD | 	getct	result1
26d78     18 2C 62 FD | 	getqx	local04
26d7c     16 FB 01 F1 | 	add	result1, local04
26d80     FD 2E 02 F6 | 	mov	local05, result1
26d84     04 00 90 FD | 	jmp	#LR__3101
26d88                 | LR__3100
26d88     00 2E 06 F6 | 	mov	local05, #0
26d8c                 | LR__3101
26d8c     01 30 66 F6 | 	neg	local06, #1
26d90     3F 32 06 F6 | 	mov	local07, #63
26d94     00 34 06 F6 | 	mov	local08, #0
26d98     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26d9c     F3 36 02 FB | 	rdlong	local09, ptr___system__dat__
26da0     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
26da4                 | LR__3102
26da4     08 36 16 F4 | 	testb	local09, #8 wc
26da8     09 36 76 F4 | 	testbn	local09, #9 andc
26dac     0A 36 46 F0 | 	shr	local09, #10
26db0     01 34 06 C6 |  if_b	mov	local08, #1
26db4     40 7E 6C 3D |  if_ae	testp	#63 wz
26db8     01 34 06 26 |  if_nc_and_z	mov	local08, #1
26dbc     3F 36 8E 2A |  if_nc_and_z	rdpin	local09, #63
26dc0     04 36 46 20 |  if_nc_and_z	shr	local09, #4
26dc4                 | LR__3103
26dc4     00 28 06 F6 | 	mov	local02, #0
26dc8     00 34 0E F2 | 	cmp	local08, #0 wz
26dcc     01 28 66 56 |  if_ne	neg	local02, #1
26dd0     00 38 06 F6 | 	mov	local10, #0
26dd4     00 2A 06 F6 | 	mov	local03, #0
26dd8     00 26 0E F2 | 	cmp	local01, #0 wz
26ddc     01 2A 66 56 |  if_ne	neg	local03, #1
26de0     00 2C 06 F6 | 	mov	local04, #0
26de4     00 3A 06 F6 | 	mov	local11, #0
26de8     17 3D 02 F6 | 	mov	local12, local05
26dec     1A FA 61 FD | 	getct	result1
26df0     FD 3E 02 F6 | 	mov	local13, result1
26df4     1F 3D 82 F1 | 	sub	local12, local13
26df8     00 3C 56 F2 | 	cmps	local12, #0 wc
26dfc     00 3A 26 C6 |  if_b	not	local11, #0
26e00     00 3A 0E F2 | 	cmp	local11, #0 wz
26e04     00 2C 26 56 |  if_ne	not	local04, #0
26e08     16 2B CA F7 | 	test	local03, local04 wz
26e0c     00 38 26 56 |  if_ne	not	local10, #0
26e10     1C 29 4A F5 | 	or	local02, local10 wz
26e14     8C FF 9F AD |  if_e	jmp	#LR__3102
26e18     00 34 0E F2 | 	cmp	local08, #0 wz
26e1c     1B 31 02 56 |  if_ne	mov	local06, local09
26e20     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
26e24     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26e28     F3 36 62 FC | 	wrlong	local09, ptr___system__dat__
26e2c     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
26e30     18 FB 01 F6 | 	mov	result1, local06
26e34     A7 F0 03 F6 | 	mov	ptra, fp
26e38     B2 00 A0 FD | 	call	#popregs_
26e3c                 | __system___rxraw_ret
26e3c     2D 00 64 FD | 	ret
26e40                 | 
26e40                 | __system___getus
26e40     1A FC 71 FD | 	getct	result2 wc
26e44     1A 00 62 FD | 	getct	_var01
26e48     10 E6 05 F1 | 	add	ptr___system__dat__, #16
26e4c     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
26e50     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
26e54     20 00 90 5D |  if_ne	jmp	#LR__3110
26e58     14 02 06 FB | 	rdlong	_var02, #20
26e5c     A1 07 00 FF 
26e60     40 02 16 FD | 	qdiv	_var02, ##1000000
26e64     10 E6 05 F1 | 	add	ptr___system__dat__, #16
26e68     18 FA 61 FD | 	getqx	result1
26e6c     FD 02 02 F6 | 	mov	_var02, result1
26e70     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
26e74     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
26e78                 | LR__3110
26e78     01 FD 11 FD | 	qdiv	result2, _var02
26e7c     19 FC 61 FD | 	getqy	result2
26e80     28 FC 61 FD | 	setq	result2
26e84     01 01 12 FD | 	qdiv	_var01, _var02
26e88     18 FA 61 FD | 	getqx	result1
26e8c                 | __system___getus_ret
26e8c     2D 00 64 FD | 	ret
26e90                 | 
26e90                 | __system____builtin_memmove
26e90     09 01 02 F6 | 	mov	_var01, arg01
26e94     0A 13 52 F2 | 	cmps	arg01, arg02 wc
26e98     10 00 90 CD |  if_b	jmp	#LR__3120
26e9c     0A 03 02 F6 | 	mov	_var02, arg02
26ea0     0B 03 02 F1 | 	add	_var02, arg03
26ea4     01 13 52 F2 | 	cmps	arg01, _var02 wc
26ea8     48 00 90 CD |  if_b	jmp	#LR__3126
26eac                 | LR__3120
26eac     0B 05 02 F6 | 	mov	_var03, arg03
26eb0     02 04 4E F0 | 	shr	_var03, #2 wz
26eb4     18 00 90 AD |  if_e	jmp	#LR__3125
26eb8     97 0A 48 FB | 	callpa	#(@LR__3123-@LR__3121)>>2,fcache_load_ptr_
26ebc                 | LR__3121
26ebc     02 09 D8 FC | 	rep	@LR__3124, _var03
26ec0                 | LR__3122
26ec0     0A 05 02 FB | 	rdlong	_var03, arg02
26ec4     09 05 62 FC | 	wrlong	_var03, arg01
26ec8     04 12 06 F1 | 	add	arg01, #4
26ecc     04 14 06 F1 | 	add	arg02, #4
26ed0                 | LR__3123
26ed0                 | LR__3124
26ed0                 | LR__3125
26ed0     02 16 CE F7 | 	test	arg03, #2 wz
26ed4     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
26ed8     09 03 52 5C |  if_ne	wrword	_var02, arg01
26edc     02 12 06 51 |  if_ne	add	arg01, #2
26ee0     02 14 06 51 |  if_ne	add	arg02, #2
26ee4     01 16 CE F7 | 	test	arg03, #1 wz
26ee8     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
26eec     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
26ef0     28 00 90 FD | 	jmp	#LR__3132
26ef4                 | LR__3126
26ef4     0B 13 02 F1 | 	add	arg01, arg03
26ef8     0B 15 02 F1 | 	add	arg02, arg03
26efc     0B 07 0A F6 | 	mov	_var04, arg03 wz
26f00     18 00 90 AD |  if_e	jmp	#LR__3131
26f04     97 0A 48 FB | 	callpa	#(@LR__3129-@LR__3127)>>2,fcache_load_ptr_
26f08                 | LR__3127
26f08     03 09 D8 FC | 	rep	@LR__3130, _var04
26f0c                 | LR__3128
26f0c     01 12 86 F1 | 	sub	arg01, #1
26f10     01 14 86 F1 | 	sub	arg02, #1
26f14     0A 03 C2 FA | 	rdbyte	_var02, arg02
26f18     09 03 42 FC | 	wrbyte	_var02, arg01
26f1c                 | LR__3129
26f1c                 | LR__3130
26f1c                 | LR__3131
26f1c                 | LR__3132
26f1c     00 FB 01 F6 | 	mov	result1, _var01
26f20                 | __system____builtin_memmove_ret
26f20     2D 00 64 FD | 	ret
26f24                 | 
26f24                 | __system____builtin_strcpy
26f24     09 01 02 F6 | 	mov	_var01, arg01
26f28     97 0A 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
26f2c                 | LR__3140
26f2c     0A FB C9 FA | 	rdbyte	result1, arg02 wz
26f30     09 FB 41 FC | 	wrbyte	result1, arg01
26f34     01 14 06 F1 | 	add	arg02, #1
26f38     01 12 06 F1 | 	add	arg01, #1
26f3c     EC FF 9F 5D |  if_ne	jmp	#LR__3140
26f40                 | LR__3141
26f40     00 FB 01 F6 | 	mov	result1, _var01
26f44                 | __system____builtin_strcpy_ret
26f44     2D 00 64 FD | 	ret
26f48                 | 
26f48                 | __system____topofstack
26f48     00 4A 05 F6 | 	mov	COUNT_, #0
26f4c     A8 00 A0 FD | 	call	#pushregs_
26f50     08 F0 07 F1 | 	add	ptra, #8
26f54     04 4E 05 F1 | 	add	fp, #4
26f58     A7 12 62 FC | 	wrlong	arg01, fp
26f5c     A7 FA 01 F6 | 	mov	result1, fp
26f60     04 4E 85 F1 | 	sub	fp, #4
26f64     A7 F0 03 F6 | 	mov	ptra, fp
26f68     B2 00 A0 FD | 	call	#popregs_
26f6c                 | __system____topofstack_ret
26f6c     2D 00 64 FD | 	ret
26f70                 | 
26f70                 | __system___lockmem
26f70     00 FA 05 F6 | 	mov	result1, #0
26f74     01 FA 61 FD | 	cogid	result1
26f78     00 FB 05 F1 | 	add	result1, #256
26f7c                 | LR__3150
26f7c     09 01 0A FB | 	rdlong	_var01, arg01 wz
26f80     09 FB 61 AC |  if_e	wrlong	result1, arg01
26f84     09 01 02 AB |  if_e	rdlong	_var01, arg01
26f88     09 01 02 AB |  if_e	rdlong	_var01, arg01
26f8c     FD 00 0A F2 | 	cmp	_var01, result1 wz
26f90     E8 FF 9F 5D |  if_ne	jmp	#LR__3150
26f94                 | __system___lockmem_ret
26f94     2D 00 64 FD | 	ret
26f98                 | 
26f98                 | __system___string_cmp
26f98     97 14 48 FB | 	callpa	#(@LR__3161-@LR__3160)>>2,fcache_load_ptr_
26f9c                 | LR__3160
26f9c     09 01 C2 FA | 	rdbyte	_var01, arg01
26fa0     0A 03 C2 FA | 	rdbyte	_var02, arg02
26fa4     00 05 02 F6 | 	mov	_var03, _var01
26fa8     01 05 8A F1 | 	sub	_var03, _var02 wz
26fac     01 12 06 F1 | 	add	arg01, #1
26fb0     01 14 06 F1 | 	add	arg02, #1
26fb4     0C 00 90 5D |  if_ne	jmp	#LR__3162
26fb8     00 00 0E F2 | 	cmp	_var01, #0 wz
26fbc     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
26fc0     D8 FF 9F 5D |  if_ne	jmp	#LR__3160
26fc4                 | LR__3161
26fc4                 | LR__3162
26fc4     02 FB 01 F6 | 	mov	result1, _var03
26fc8                 | __system___string_cmp_ret
26fc8     2D 00 64 FD | 	ret
26fcc                 | 
26fcc                 | __system___string_concat
26fcc     05 4A 05 F6 | 	mov	COUNT_, #5
26fd0     A8 00 A0 FD | 	call	#pushregs_
26fd4     09 27 02 F6 | 	mov	local01, arg01
26fd8     0A 29 02 F6 | 	mov	local02, arg02
26fdc     13 13 02 F6 | 	mov	arg01, local01
26fe0     09 2B 02 F6 | 	mov	local03, arg01
26fe4     97 06 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
26fe8                 | LR__3170
26fe8     15 FB C9 FA | 	rdbyte	result1, local03 wz
26fec     01 2A 06 51 |  if_ne	add	local03, #1
26ff0     F4 FF 9F 5D |  if_ne	jmp	#LR__3170
26ff4                 | LR__3171
26ff4     09 2B 82 F1 | 	sub	local03, arg01
26ff8     15 2D 02 F6 | 	mov	local04, local03
26ffc     14 13 02 F6 | 	mov	arg01, local02
27000     09 2B 02 F6 | 	mov	local03, arg01
27004     97 06 48 FB | 	callpa	#(@LR__3173-@LR__3172)>>2,fcache_load_ptr_
27008                 | LR__3172
27008     15 FB C9 FA | 	rdbyte	result1, local03 wz
2700c     01 2A 06 51 |  if_ne	add	local03, #1
27010     F4 FF 9F 5D |  if_ne	jmp	#LR__3172
27014                 | LR__3173
27014     09 2B 82 F1 | 	sub	local03, arg01
27018     16 13 02 F6 | 	mov	arg01, local04
2701c     15 13 02 F1 | 	add	arg01, local03
27020     01 12 06 F1 | 	add	arg01, #1
27024     E8 40 B0 FD | 	call	#__system___gc_alloc_managed
27028     FD 2E 0A F6 | 	mov	local05, result1 wz
2702c     28 00 90 AD |  if_e	jmp	#LR__3174
27030     17 13 02 F6 | 	mov	arg01, local05
27034     13 15 02 F6 | 	mov	arg02, local01
27038     16 17 02 F6 | 	mov	arg03, local04
2703c     50 FE BF FD | 	call	#__system____builtin_memmove
27040     17 13 02 F6 | 	mov	arg01, local05
27044     16 13 02 F1 | 	add	arg01, local04
27048     01 2A 06 F1 | 	add	local03, #1
2704c     14 15 02 F6 | 	mov	arg02, local02
27050     15 17 02 F6 | 	mov	arg03, local03
27054     38 FE BF FD | 	call	#__system____builtin_memmove
27058                 | LR__3174
27058     17 FB 01 F6 | 	mov	result1, local05
2705c     A7 F0 03 F6 | 	mov	ptra, fp
27060     B2 00 A0 FD | 	call	#popregs_
27064                 | __system___string_concat_ret
27064     2D 00 64 FD | 	ret
27068                 | 
27068                 | __system___tx
27068     02 4A 05 F6 | 	mov	COUNT_, #2
2706c     A8 00 A0 FD | 	call	#pushregs_
27070     09 27 02 F6 | 	mov	local01, arg01
27074     0A 26 0E F2 | 	cmp	local01, #10 wz
27078     18 00 90 5D |  if_ne	jmp	#LR__3180
2707c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
27080     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
27084     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
27088     02 28 CE F7 | 	test	local02, #2 wz
2708c     0D 12 06 56 |  if_ne	mov	arg01, #13
27090     6C FC BF 5D |  if_ne	call	#__system___txraw
27094                 | LR__3180
27094     13 13 02 F6 | 	mov	arg01, local01
27098     64 FC BF FD | 	call	#__system___txraw
2709c     A7 F0 03 F6 | 	mov	ptra, fp
270a0     B2 00 A0 FD | 	call	#popregs_
270a4                 | __system___tx_ret
270a4     2D 00 64 FD | 	ret
270a8                 | 
270a8                 | __system___rx
270a8     01 4A 05 F6 | 	mov	COUNT_, #1
270ac     A8 00 A0 FD | 	call	#pushregs_
270b0                 | LR__3190
270b0     00 12 06 F6 | 	mov	arg01, #0
270b4     8C FC BF FD | 	call	#__system___rxraw
270b8     FD 26 02 F6 | 	mov	local01, result1
270bc     FF FF 7F FF 
270c0     FF 27 0E F2 | 	cmp	local01, ##-1 wz
270c4     E8 FF 9F AD |  if_e	jmp	#LR__3190
270c8     0D 26 0E F2 | 	cmp	local01, #13 wz
270cc     14 00 90 5D |  if_ne	jmp	#LR__3191
270d0     08 E6 05 F1 | 	add	ptr___system__dat__, #8
270d4     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
270d8     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
270dc     02 FA CD F7 | 	test	result1, #2 wz
270e0     0A 26 06 56 |  if_ne	mov	local01, #10
270e4                 | LR__3191
270e4     08 E6 05 F1 | 	add	ptr___system__dat__, #8
270e8     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
270ec     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
270f0     01 12 CE F7 | 	test	arg01, #1 wz
270f4     1C 00 90 AD |  if_e	jmp	#LR__3194
270f8     7F 26 0E F2 | 	cmp	local01, #127 wz
270fc     0C 00 90 5D |  if_ne	jmp	#LR__3192
27100     08 12 06 F6 | 	mov	arg01, #8
27104     60 FF BF FD | 	call	#__system___tx
27108     08 00 90 FD | 	jmp	#LR__3193
2710c                 | LR__3192
2710c     13 13 02 F6 | 	mov	arg01, local01
27110     54 FF BF FD | 	call	#__system___tx
27114                 | LR__3193
27114                 | LR__3194
27114     13 FB 01 F6 | 	mov	result1, local01
27118     A7 F0 03 F6 | 	mov	ptra, fp
2711c     B2 00 A0 FD | 	call	#popregs_
27120                 | __system___rx_ret
27120     2D 00 64 FD | 	ret
27124                 | 
27124                 | __system___pinwrite
27124     09 01 02 F6 | 	mov	_var01, arg01
27128     1F 00 06 F5 | 	and	_var01, #31
2712c     20 12 CE F7 | 	test	arg01, #32 wz
27130     06 12 46 F0 | 	shr	arg01, #6
27134     09 13 CA F9 | 	bmask	arg01, arg01
27138     00 13 62 F0 | 	shl	arg01, _var01
2713c     00 15 62 F0 | 	shl	arg02, _var01
27140     1C 00 90 AD |  if_e	jmp	#LR__3200
27144     09 F7 43 F5 | 	or	dirb, arg01
27148     FD 01 02 F6 | 	mov	_var01, outb
2714c     09 01 22 F5 | 	andn	_var01, arg01
27150     09 15 02 F5 | 	and	arg02, arg01
27154     0A 01 42 F5 | 	or	_var01, arg02
27158     00 FB 03 F6 | 	mov	outb, _var01
2715c     18 00 90 FD | 	jmp	#LR__3201
27160                 | LR__3200
27160     09 F5 43 F5 | 	or	dira, arg01
27164     FC 01 02 F6 | 	mov	_var01, outa
27168     09 01 22 F5 | 	andn	_var01, arg01
2716c     09 15 02 F5 | 	and	arg02, arg01
27170     0A 01 42 F5 | 	or	_var01, arg02
27174     00 F9 03 F6 | 	mov	outa, _var01
27178                 | LR__3201
27178                 | __system___pinwrite_ret
27178     2D 00 64 FD | 	ret
2717c                 | 
2717c                 | __system___basic_read_line
2717c     06 4A 05 F6 | 	mov	COUNT_, #6
27180     A8 00 A0 FD | 	call	#pushregs_
27184     09 27 02 F6 | 	mov	local01, arg01
27188     00 28 06 F6 | 	mov	local02, #0
2718c     18 2A 06 F6 | 	mov	local03, #24
27190     00 2C 06 F6 | 	mov	local04, #0
27194     18 12 06 F6 | 	mov	arg01, #24
27198     74 3F B0 FD | 	call	#__system___gc_alloc_managed
2719c     FD 2E 0A F6 | 	mov	local05, result1 wz
271a0     17 FB 01 A6 |  if_e	mov	result1, local05
271a4     B0 00 90 AD |  if_e	jmp	#LR__3213
271a8                 | LR__3210
271a8     13 13 02 F6 | 	mov	arg01, local01
271ac     78 0B B0 FD | 	call	#__system___basic_get_char
271b0     FD 30 02 F6 | 	mov	local06, result1
271b4     01 30 56 F2 | 	cmps	local06, #1 wc
271b8     8C 00 90 CD |  if_b	jmp	#LR__3212
271bc     0A 30 0E F2 | 	cmp	local06, #10 wz
271c0     10 00 90 5D |  if_ne	jmp	#LR__3211
271c4     00 2C 0E F2 | 	cmp	local04, #0 wz
271c8     01 28 56 52 |  if_ne	cmps	local02, #1 wc
271cc     01 28 86 11 |  if_a	sub	local02, #1
271d0     74 00 90 FD | 	jmp	#LR__3212
271d4                 | LR__3211
271d4     0D 30 0E F2 | 	cmp	local06, #13 wz
271d8     01 2C 06 A6 |  if_e	mov	local04, #1
271dc     00 2C 06 56 |  if_ne	mov	local04, #0
271e0     08 30 0E F2 | 	cmp	local06, #8 wz
271e4     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
271e8     01 28 56 A2 |  if_e	cmps	local02, #1 wc
271ec     01 28 86 21 |  if_nc_and_z	sub	local02, #1
271f0     B4 FF 9F AD |  if_e	jmp	#LR__3210
271f4     17 17 02 F6 | 	mov	arg03, local05
271f8     14 17 02 F1 | 	add	arg03, local02
271fc     0B 31 42 FC | 	wrbyte	local06, arg03
27200     01 28 06 F1 | 	add	local02, #1
27204     15 29 0A F2 | 	cmp	local02, local03 wz
27208     9C FF 9F 5D |  if_ne	jmp	#LR__3210
2720c     15 13 02 F6 | 	mov	arg01, local03
27210     20 12 06 F1 | 	add	arg01, #32
27214     F8 3E B0 FD | 	call	#__system___gc_alloc_managed
27218     FD 30 0A F6 | 	mov	local06, result1 wz
2721c     18 FB 01 A6 |  if_e	mov	result1, local06
27220     34 00 90 AD |  if_e	jmp	#LR__3213
27224     18 13 02 F6 | 	mov	arg01, local06
27228     17 15 02 F6 | 	mov	arg02, local05
2722c     15 17 02 F6 | 	mov	arg03, local03
27230     5C FC BF FD | 	call	#__system____builtin_memmove
27234     20 2A 06 F1 | 	add	local03, #32
27238     17 13 02 F6 | 	mov	arg01, local05
2723c     0C 40 B0 FD | 	call	#__system___gc_free
27240     18 2F 02 F6 | 	mov	local05, local06
27244     60 FF 9F FD | 	jmp	#LR__3210
27248                 | LR__3212
27248     17 31 02 F6 | 	mov	local06, local05
2724c     14 31 02 F1 | 	add	local06, local02
27250     18 01 48 FC | 	wrbyte	#0, local06
27254     17 FB 01 F6 | 	mov	result1, local05
27258                 | LR__3213
27258     A7 F0 03 F6 | 	mov	ptra, fp
2725c     B2 00 A0 FD | 	call	#popregs_
27260                 | __system___basic_read_line_ret
27260     2D 00 64 FD | 	ret
27264                 | 
27264                 | __system___waitms
27264     09 01 02 F6 | 	mov	_var01, arg01
27268     1A 02 62 FD | 	getct	_var02
2726c     14 04 06 FB | 	rdlong	_var03, #20
27270     97 14 48 FB | 	callpa	#(@LR__3221-@LR__3220)>>2,fcache_load_ptr_
27274                 | LR__3220
27274     01 00 00 FF 
27278     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
2727c     1C 00 90 CD |  if_b	jmp	#LR__3222
27280     02 03 02 F1 | 	add	_var02, _var03
27284     01 13 02 F6 | 	mov	arg01, _var02
27288     00 12 66 FA | 	addct1	arg01, #0
2728c     24 22 60 FD | 	waitct1
27290     01 00 00 FF 
27294     E8 01 86 F1 | 	sub	_var01, ##1000
27298     D8 FF 9F FD | 	jmp	#LR__3220
2729c                 | LR__3221
2729c                 | LR__3222
2729c     01 00 56 F2 | 	cmps	_var01, #1 wc
272a0     28 00 90 CD |  if_b	jmp	#LR__3223
272a4     02 01 02 FD | 	qmul	_var01, _var03
272a8     01 00 00 FF 
272ac     E8 17 06 F6 | 	mov	arg03, ##1000
272b0     19 FA 61 FD | 	getqy	result1
272b4     18 12 62 FD | 	getqx	arg01
272b8     28 FA 61 FD | 	setq	result1
272bc     0B 13 12 FD | 	qdiv	arg01, arg03
272c0     18 12 62 FD | 	getqx	arg01
272c4     01 13 62 FA | 	addct1	arg01, _var02
272c8     24 22 60 FD | 	waitct1
272cc                 | LR__3223
272cc                 | __system___waitms_ret
272cc     2D 00 64 FD | 	ret
272d0                 | 
272d0                 | __system___waitus
272d0     09 01 02 F6 | 	mov	_var01, arg01
272d4     1A 02 62 FD | 	getct	_var02
272d8     14 04 06 FB | 	rdlong	_var03, #20
272dc     97 14 48 FB | 	callpa	#(@LR__3231-@LR__3230)>>2,fcache_load_ptr_
272e0                 | LR__3230
272e0     A1 07 00 FF 
272e4     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
272e8     1C 00 90 CD |  if_b	jmp	#LR__3232
272ec     02 03 02 F1 | 	add	_var02, _var03
272f0     01 13 02 F6 | 	mov	arg01, _var02
272f4     00 12 66 FA | 	addct1	arg01, #0
272f8     24 22 60 FD | 	waitct1
272fc     A1 07 00 FF 
27300     40 00 86 F1 | 	sub	_var01, ##1000000
27304     D8 FF 9F FD | 	jmp	#LR__3230
27308                 | LR__3231
27308                 | LR__3232
27308     01 00 56 F2 | 	cmps	_var01, #1 wc
2730c     28 00 90 CD |  if_b	jmp	#LR__3233
27310     02 01 02 FD | 	qmul	_var01, _var03
27314     A1 07 00 FF 
27318     40 16 06 F6 | 	mov	arg03, ##1000000
2731c     19 FA 61 FD | 	getqy	result1
27320     18 12 62 FD | 	getqx	arg01
27324     28 FA 61 FD | 	setq	result1
27328     0B 13 12 FD | 	qdiv	arg01, arg03
2732c     18 FA 61 FD | 	getqx	result1
27330     FD 02 62 FA | 	addct1	_var02, result1
27334     24 22 60 FD | 	waitct1
27338                 | LR__3233
27338                 | __system___waitus_ret
27338     2D 00 64 FD | 	ret
2733c                 | 
2733c                 | __system___mount
2733c     0B 4A 05 F6 | 	mov	COUNT_, #11
27340     A8 00 A0 FD | 	call	#pushregs_
27344     09 27 02 F6 | 	mov	local01, arg01
27348     0A 29 0A F6 | 	mov	local02, arg02 wz
2734c     01 2A 66 F6 | 	neg	local03, #1
27350     01 FA 65 A6 |  if_e	neg	result1, #1
27354     98 02 90 AD |  if_e	jmp	#LR__3255
27358     13 FB C1 FA | 	rdbyte	result1, local01
2735c     2F FA 0D F2 | 	cmp	result1, #47 wz
27360     28 00 90 5D |  if_ne	jmp	#LR__3242
27364     13 13 02 F6 | 	mov	arg01, local01
27368     09 2D 02 F6 | 	mov	local04, arg01
2736c     97 06 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
27370                 | LR__3240
27370     16 FB C9 FA | 	rdbyte	result1, local04 wz
27374     01 2C 06 51 |  if_ne	add	local04, #1
27378     F4 FF 9F 5D |  if_ne	jmp	#LR__3240
2737c                 | LR__3241
2737c     09 2D 82 F1 | 	sub	local04, arg01
27380     16 FB 01 F6 | 	mov	result1, local04
27384     10 FA 55 F2 | 	cmps	result1, #16 wc
27388     14 00 90 CD |  if_b	jmp	#LR__3243
2738c                 | LR__3242
2738c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27390     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
27394     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27398     01 FA 65 F6 | 	neg	result1, #1
2739c     50 02 90 FD | 	jmp	#LR__3255
273a0                 | LR__3243
273a0     00 2E 06 F6 | 	mov	local05, #0
273a4                 | LR__3244
273a4     04 2E 56 F2 | 	cmps	local05, #4 wc
273a8     B0 00 90 3D |  if_ae	jmp	#LR__3249
273ac     17 13 02 F6 | 	mov	arg01, local05
273b0     02 12 66 F0 | 	shl	arg01, #2
273b4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
273b8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
273bc     09 FB 09 FB | 	rdlong	result1, arg01 wz
273c0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
273c4     00 2A 56 A2 |  if_e	cmps	local03, #0 wc
273c8     17 2B 02 86 |  if_c_and_z	mov	local03, local05
273cc     84 00 90 8D |  if_c_and_z	jmp	#LR__3248
273d0     17 13 02 F6 | 	mov	arg01, local05
273d4     02 12 66 F0 | 	shl	arg01, #2
273d8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
273dc     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
273e0     09 13 02 FB | 	rdlong	arg01, arg01
273e4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
273e8     09 2D 02 F6 | 	mov	local04, arg01
273ec     97 06 48 FB | 	callpa	#(@LR__3246-@LR__3245)>>2,fcache_load_ptr_
273f0                 | LR__3245
273f0     16 FB C9 FA | 	rdbyte	result1, local04 wz
273f4     01 2C 06 51 |  if_ne	add	local04, #1
273f8     F4 FF 9F 5D |  if_ne	jmp	#LR__3245
273fc                 | LR__3246
273fc     09 2D 82 F1 | 	sub	local04, arg01
27400     16 31 02 F6 | 	mov	local06, local04
27404     18 13 02 F6 | 	mov	arg01, local06
27408     13 13 02 F1 | 	add	arg01, local01
2740c     09 FB C1 FA | 	rdbyte	result1, arg01
27410     2F FA 0D F2 | 	cmp	result1, #47 wz
27414     18 33 02 56 |  if_ne	mov	local07, local06
27418     13 33 02 51 |  if_ne	add	local07, local01
2741c     19 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
27420     30 00 90 5D |  if_ne	jmp	#LR__3247
27424     17 17 02 F6 | 	mov	arg03, local05
27428     02 16 66 F0 | 	shl	arg03, #2
2742c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27430     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
27434     0B 15 02 FB | 	rdlong	arg02, arg03
27438     13 13 02 F6 | 	mov	arg01, local01
2743c     18 17 02 F6 | 	mov	arg03, local06
27440     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27444     48 51 B0 FD | 	call	#__system__strncmp
27448     00 FA 0D F2 | 	cmp	result1, #0 wz
2744c     17 2B 02 A6 |  if_e	mov	local03, local05
27450     08 00 90 AD |  if_e	jmp	#LR__3249
27454                 | LR__3247
27454                 | LR__3248
27454     01 2E 06 F1 | 	add	local05, #1
27458     48 FF 9F FD | 	jmp	#LR__3244
2745c                 | LR__3249
2745c     FF FF 7F FF 
27460     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
27464     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
27468     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
2746c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
27470     01 FA 65 A6 |  if_e	neg	result1, #1
27474     78 01 90 AD |  if_e	jmp	#LR__3255
27478     15 2F 02 F6 | 	mov	local05, local03
2747c     17 33 02 F6 | 	mov	local07, local05
27480     02 32 66 F0 | 	shl	local07, #2
27484     74 E6 05 F1 | 	add	ptr___system__dat__, #116
27488     F3 32 02 F1 | 	add	local07, ptr___system__dat__
2748c     19 31 0A FB | 	rdlong	local06, local07 wz
27490     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
27494     58 00 90 AD |  if_e	jmp	#LR__3250
27498     4C 30 06 F1 | 	add	local06, #76
2749c     18 33 0A FB | 	rdlong	local07, local06 wz
274a0     4C 30 86 F1 | 	sub	local06, #76
274a4     48 00 90 AD |  if_e	jmp	#LR__3250
274a8     4C 30 06 F1 | 	add	local06, #76
274ac     18 33 02 FB | 	rdlong	local07, local06
274b0     19 2B 02 F6 | 	mov	local03, local07
274b4     13 32 46 F7 | 	zerox	local07, #19
274b8     14 2A 46 F0 | 	shr	local03, #20
274bc     02 2A 66 F0 | 	shl	local03, #2
274c0     ED 2A 02 F1 | 	add	local03, __methods__
274c4     15 2B 02 FB | 	rdlong	local03, local03
274c8     17 31 02 F6 | 	mov	local06, local05
274cc     02 30 66 F0 | 	shl	local06, #2
274d0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
274d4     F3 30 02 F1 | 	add	local06, ptr___system__dat__
274d8     18 13 02 FB | 	rdlong	arg01, local06
274dc     F2 30 02 F6 | 	mov	local06, objptr
274e0     19 E5 01 F6 | 	mov	objptr, local07
274e4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
274e8     2D 2A 62 FD | 	call	local03
274ec     18 E5 01 F6 | 	mov	objptr, local06
274f0                 | LR__3250
274f0     17 35 02 F6 | 	mov	local08, local05
274f4     02 34 66 F0 | 	shl	local08, #2
274f8     74 E6 05 F1 | 	add	ptr___system__dat__, #116
274fc     F3 34 02 F1 | 	add	local08, ptr___system__dat__
27500     1A 29 62 FC | 	wrlong	local02, local08
27504     00 28 0E F2 | 	cmp	local02, #0 wz
27508     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2750c     18 00 90 5D |  if_ne	jmp	#LR__3251
27510     02 2E 66 F0 | 	shl	local05, #2
27514     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27518     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
2751c     17 01 68 FC | 	wrlong	#0, local05
27520     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27524     C4 00 90 FD | 	jmp	#LR__3254
27528                 | LR__3251
27528     17 37 02 F6 | 	mov	local09, local05
2752c     04 36 66 F0 | 	shl	local09, #4
27530     24 E6 05 F1 | 	add	ptr___system__dat__, #36
27534     F3 36 02 F1 | 	add	local09, ptr___system__dat__
27538     1B 13 02 F6 | 	mov	arg01, local09
2753c     13 15 02 F6 | 	mov	arg02, local01
27540     10 16 06 F6 | 	mov	arg03, #16
27544     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
27548     98 4F B0 FD | 	call	#__system__strncpy
2754c     48 28 06 F1 | 	add	local02, #72
27550     14 35 0A FB | 	rdlong	local08, local02 wz
27554     48 28 86 F1 | 	sub	local02, #72
27558     7C 00 90 AD |  if_e	jmp	#LR__3253
2755c     48 28 06 F1 | 	add	local02, #72
27560     14 35 02 FB | 	rdlong	local08, local02
27564     1A 39 02 F6 | 	mov	local10, local08
27568     13 34 46 F7 | 	zerox	local08, #19
2756c     14 38 46 F0 | 	shr	local10, #20
27570     02 38 66 F0 | 	shl	local10, #2
27574     ED 38 02 F1 | 	add	local10, __methods__
27578     1C 39 02 FB | 	rdlong	local10, local10
2757c     1B 13 02 F6 | 	mov	arg01, local09
27580     F2 3A 02 F6 | 	mov	local11, objptr
27584     1A E5 01 F6 | 	mov	objptr, local08
27588     2D 38 62 FD | 	call	local10
2758c     1D E5 01 F6 | 	mov	objptr, local11
27590     FD 12 0A F6 | 	mov	arg01, result1 wz
27594     40 00 90 AD |  if_e	jmp	#LR__3252
27598     17 35 02 F6 | 	mov	local08, local05
2759c     02 34 66 F0 | 	shl	local08, #2
275a0     74 E6 05 F1 | 	add	ptr___system__dat__, #116
275a4     F3 34 02 F1 | 	add	local08, ptr___system__dat__
275a8     1A 01 68 FC | 	wrlong	#0, local08
275ac     02 2E 66 F0 | 	shl	local05, #2
275b0     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
275b4     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
275b8     17 01 68 FC | 	wrlong	#0, local05
275bc     09 13 6A F6 | 	neg	arg01, arg01 wz
275c0     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
275c4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
275c8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
275cc     01 FA 65 56 |  if_ne	neg	result1, #1
275d0     00 FA 05 A6 |  if_e	mov	result1, #0
275d4     18 00 90 FD | 	jmp	#LR__3255
275d8                 | LR__3252
275d8                 | LR__3253
275d8     02 2E 66 F0 | 	shl	local05, #2
275dc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
275e0     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
275e4     17 37 62 FC | 	wrlong	local09, local05
275e8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
275ec                 | LR__3254
275ec     00 FA 05 F6 | 	mov	result1, #0
275f0                 | LR__3255
275f0     A7 F0 03 F6 | 	mov	ptra, fp
275f4     B2 00 A0 FD | 	call	#popregs_
275f8                 | __system___mount_ret
275f8     2D 00 64 FD | 	ret
275fc                 | 
275fc                 | __system___chdir
275fc     00 4A 05 F6 | 	mov	COUNT_, #0
27600     A8 00 A0 FD | 	call	#pushregs_
27604     40 F0 07 F1 | 	add	ptra, #64
27608     04 4E 05 F1 | 	add	fp, #4
2760c     A7 12 62 FC | 	wrlong	arg01, fp
27610     04 4E 05 F1 | 	add	fp, #4
27614     A7 14 02 F6 | 	mov	arg02, fp
27618     08 4E 85 F1 | 	sub	fp, #8
2761c     68 4B B0 FD | 	call	#__system__stat
27620     3C 4E 05 F1 | 	add	fp, #60
27624     A7 FA 61 FC | 	wrlong	result1, fp
27628     3C 4E 85 F1 | 	sub	fp, #60
2762c     00 FA 0D F2 | 	cmp	result1, #0 wz
27630     3C 4E 05 51 |  if_ne	add	fp, #60
27634     A7 FA 01 5B |  if_ne	rdlong	result1, fp
27638     3C 4E 85 51 |  if_ne	sub	fp, #60
2763c     BC 00 90 5D |  if_ne	jmp	#LR__3262
27640     10 4E 05 F1 | 	add	fp, #16
27644     A7 12 02 FB | 	rdlong	arg01, fp
27648     10 4E 85 F1 | 	sub	fp, #16
2764c     78 00 00 FF 
27650     00 12 06 F5 | 	and	arg01, ##61440
27654     08 00 00 FF 
27658     00 12 0E F2 | 	cmp	arg01, ##4096 wz
2765c     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
27660     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
27664     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
27668     01 FA 65 56 |  if_ne	neg	result1, #1
2766c     8C 00 90 5D |  if_ne	jmp	#LR__3262
27670     04 4E 05 F1 | 	add	fp, #4
27674     A7 16 02 FB | 	rdlong	arg03, fp
27678     04 4E 85 F1 | 	sub	fp, #4
2767c     0B 17 C2 FA | 	rdbyte	arg03, arg03
27680     2F 16 0E F2 | 	cmp	arg03, #47 wz
27684     24 00 90 5D |  if_ne	jmp	#LR__3260
27688     84 E6 05 F1 | 	add	ptr___system__dat__, #132
2768c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
27690     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
27694     04 4E 05 F1 | 	add	fp, #4
27698     A7 14 02 FB | 	rdlong	arg02, fp
2769c     04 4E 85 F1 | 	sub	fp, #4
276a0     00 17 06 F6 | 	mov	arg03, #256
276a4     3C 4E B0 FD | 	call	#__system__strncpy
276a8     4C 00 90 FD | 	jmp	#LR__3261
276ac                 | LR__3260
276ac     84 E7 05 F1 | 	add	ptr___system__dat__, #388
276b0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
276b4     38 4E 05 F1 | 	add	fp, #56
276b8     A7 12 62 FC | 	wrlong	arg01, fp
276bc     38 4E 85 F1 | 	sub	fp, #56
276c0     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
276c4     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
276c8     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
276cc     00 17 06 F6 | 	mov	arg03, #256
276d0     10 4E B0 FD | 	call	#__system__strncpy
276d4     38 4E 05 F1 | 	add	fp, #56
276d8     A7 12 02 FB | 	rdlong	arg01, fp
276dc     34 4E 85 F1 | 	sub	fp, #52
276e0     A7 14 02 FB | 	rdlong	arg02, fp
276e4     04 4E 85 F1 | 	sub	fp, #4
276e8     84 E6 05 F1 | 	add	ptr___system__dat__, #132
276ec     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
276f0     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
276f4     10 00 B0 FD | 	call	#__system____getvfsforfile
276f8                 | LR__3261
276f8     00 FA 05 F6 | 	mov	result1, #0
276fc                 | LR__3262
276fc     A7 F0 03 F6 | 	mov	ptra, fp
27700     B2 00 A0 FD | 	call	#popregs_
27704                 | __system___chdir_ret
27704     2D 00 64 FD | 	ret
27708                 | 
27708                 | __system____getvfsforfile
27708     0E 4A 05 F6 | 	mov	COUNT_, #14
2770c     A8 00 A0 FD | 	call	#pushregs_
27710     09 27 02 F6 | 	mov	local01, arg01
27714     0A 29 02 F6 | 	mov	local02, arg02
27718     0B 2B 02 F6 | 	mov	local03, arg03
2771c     97 10 48 FB | 	callpa	#(@LR__3271-@LR__3270)>>2,fcache_load_ptr_
27720                 | LR__3270
27720     14 FB C1 FA | 	rdbyte	result1, local02
27724     2F FA 0D F2 | 	cmp	result1, #47 wz
27728     01 28 06 A1 |  if_e	add	local02, #1
2772c     14 2D C2 AA |  if_e	rdbyte	local04, local02
27730     01 28 86 A1 |  if_e	sub	local02, #1
27734     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
27738     01 28 06 A1 |  if_e	add	local02, #1
2773c     E0 FF 9F AD |  if_e	jmp	#LR__3270
27740                 | LR__3271
27740     14 2D C2 FA | 	rdbyte	local04, local02
27744     2F 2C 0E F2 | 	cmp	local04, #47 wz
27748     14 00 90 5D |  if_ne	jmp	#LR__3272
2774c     13 13 02 F6 | 	mov	arg01, local01
27750     14 15 02 F6 | 	mov	arg02, local02
27754     00 17 06 F6 | 	mov	arg03, #256
27758     88 4D B0 FD | 	call	#__system__strncpy
2775c     7C 00 90 FD | 	jmp	#LR__3274
27760                 | LR__3272
27760     84 E6 05 F1 | 	add	ptr___system__dat__, #132
27764     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
27768     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
2776c     13 13 02 F6 | 	mov	arg01, local01
27770     00 17 06 F6 | 	mov	arg03, #256
27774     6C 4D B0 FD | 	call	#__system__strncpy
27778     14 2D CA FA | 	rdbyte	local04, local02 wz
2777c     5C 00 90 AD |  if_e	jmp	#LR__3273
27780     14 2D C2 FA | 	rdbyte	local04, local02
27784     2E 2C 0E F2 | 	cmp	local04, #46 wz
27788     01 28 06 A1 |  if_e	add	local02, #1
2778c     14 2F C2 AA |  if_e	rdbyte	local05, local02
27790     01 28 86 A1 |  if_e	sub	local02, #1
27794     17 31 02 A6 |  if_e	mov	local06, local05
27798     07 30 4E A7 |  if_e	zerox	local06, #7 wz
2779c     3C 00 90 AD |  if_e	jmp	#LR__3273
277a0     13 2F C2 FA | 	rdbyte	local05, local01
277a4     2F 2E 0E F2 | 	cmp	local05, #47 wz
277a8     01 26 06 A1 |  if_e	add	local01, #1
277ac     13 2D C2 AA |  if_e	rdbyte	local04, local01
277b0     01 26 86 A1 |  if_e	sub	local01, #1
277b4     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
277b8     B5 01 00 5F 
277bc     78 14 06 56 |  if_ne	mov	arg02, ##@LR__5400
277c0     13 13 02 56 |  if_ne	mov	arg01, local01
277c4     00 17 06 56 |  if_ne	mov	arg03, #256
277c8     64 4D B0 5D |  if_ne	call	#__system__strncat
277cc     13 13 02 F6 | 	mov	arg01, local01
277d0     14 15 02 F6 | 	mov	arg02, local02
277d4     00 17 06 F6 | 	mov	arg03, #256
277d8     54 4D B0 FD | 	call	#__system__strncat
277dc                 | LR__3273
277dc                 | LR__3274
277dc     13 13 02 F6 | 	mov	arg01, local01
277e0     0C 4F B0 FD | 	call	#__system___normalizeName
277e4     13 2D CA FA | 	rdbyte	local04, local01 wz
277e8     1C 00 90 AD |  if_e	jmp	#LR__3275
277ec     13 2D C2 FA | 	rdbyte	local04, local01
277f0     2F 2C 0E F2 | 	cmp	local04, #47 wz
277f4     01 26 06 A1 |  if_e	add	local01, #1
277f8     13 31 C2 AA |  if_e	rdbyte	local06, local01
277fc     01 26 86 A1 |  if_e	sub	local01, #1
27800     00 30 4E A2 |  if_e	cmps	local06, #0 wz
27804     18 00 90 5D |  if_ne	jmp	#LR__3276
27808                 | LR__3275
27808     01 00 00 FF 
2780c     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
27810     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
27814     01 00 00 FF 
27818     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
2781c     EC 01 90 FD | 	jmp	#LR__3290
27820                 | LR__3276
27820     00 32 06 F6 | 	mov	local07, #0
27824                 | LR__3277
27824     04 32 56 F2 | 	cmps	local07, #4 wc
27828     CC 01 90 3D |  if_ae	jmp	#LR__3289
2782c     19 31 02 F6 | 	mov	local06, local07
27830     02 30 66 F0 | 	shl	local06, #2
27834     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27838     F3 30 02 F1 | 	add	local06, ptr___system__dat__
2783c     18 31 0A FB | 	rdlong	local06, local06 wz
27840     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27844     A8 01 90 AD |  if_e	jmp	#LR__3288
27848     19 2D 02 F6 | 	mov	local04, local07
2784c     02 2C 66 F0 | 	shl	local04, #2
27850     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27854     F3 2C 02 F1 | 	add	local04, ptr___system__dat__
27858     16 13 02 FB | 	rdlong	arg01, local04
2785c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27860     09 35 02 F6 | 	mov	local08, arg01
27864     97 06 48 FB | 	callpa	#(@LR__3279-@LR__3278)>>2,fcache_load_ptr_
27868                 | LR__3278
27868     1A FB C9 FA | 	rdbyte	result1, local08 wz
2786c     01 34 06 51 |  if_ne	add	local08, #1
27870     F4 FF 9F 5D |  if_ne	jmp	#LR__3278
27874                 | LR__3279
27874     09 35 82 F1 | 	sub	local08, arg01
27878     1A 37 02 F6 | 	mov	local09, local08
2787c     1B 2D 02 F6 | 	mov	local04, local09
27880     13 2D 02 F1 | 	add	local04, local01
27884     16 31 C2 FA | 	rdbyte	local06, local04
27888     2F 30 0E F2 | 	cmp	local06, #47 wz
2788c     1B 39 02 56 |  if_ne	mov	local10, local09
27890     13 39 02 51 |  if_ne	add	local10, local01
27894     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
27898     54 01 90 5D |  if_ne	jmp	#LR__3287
2789c     19 17 02 F6 | 	mov	arg03, local07
278a0     02 16 66 F0 | 	shl	arg03, #2
278a4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
278a8     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
278ac     0B 15 02 FB | 	rdlong	arg02, arg03
278b0     1B 17 02 F6 | 	mov	arg03, local09
278b4     13 13 02 F6 | 	mov	arg01, local01
278b8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
278bc     D0 4C B0 FD | 	call	#__system__strncmp
278c0     00 FA 4D F2 | 	cmps	result1, #0 wz
278c4     28 01 90 5D |  if_ne	jmp	#LR__3287
278c8     19 3B 02 F6 | 	mov	local11, local07
278cc     02 3A 66 F0 | 	shl	local11, #2
278d0     74 E6 05 F1 | 	add	ptr___system__dat__, #116
278d4     F3 3A 02 F1 | 	add	local11, ptr___system__dat__
278d8     1D 3D 02 FB | 	rdlong	local12, local11
278dc     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
278e0     97 22 48 FB | 	callpa	#(@LR__3281-@LR__3280)>>2,fcache_load_ptr_
278e4                 | LR__3280
278e4     1B 31 02 F6 | 	mov	local06, local09
278e8     01 30 06 F1 | 	add	local06, #1
278ec     13 31 02 F1 | 	add	local06, local01
278f0     18 3B C2 FA | 	rdbyte	local11, local06
278f4     2E 3A 0E F2 | 	cmp	local11, #46 wz
278f8     2C 00 90 5D |  if_ne	jmp	#LR__3282
278fc     1B 3B 02 F6 | 	mov	local11, local09
27900     02 3A 06 F1 | 	add	local11, #2
27904     13 3B 02 F1 | 	add	local11, local01
27908     1D 39 C2 FA | 	rdbyte	local10, local11
2790c     2F 38 0E F2 | 	cmp	local10, #47 wz
27910     1B 3F 02 56 |  if_ne	mov	local13, local09
27914     02 3E 06 51 |  if_ne	add	local13, #2
27918     13 3F 02 51 |  if_ne	add	local13, local01
2791c     1F 41 CA 5A |  if_ne	rdbyte	local14, local13 wz
27920     01 36 06 A1 |  if_e	add	local09, #1
27924     BC FF 9F AD |  if_e	jmp	#LR__3280
27928                 | LR__3281
27928                 | LR__3282
27928     00 2A 0E F2 | 	cmp	local03, #0 wz
2792c     15 13 02 56 |  if_ne	mov	arg01, local03
27930     13 15 02 56 |  if_ne	mov	arg02, local01
27934     00 17 06 56 |  if_ne	mov	arg03, #256
27938     A8 4B B0 5D |  if_ne	call	#__system__strncpy
2793c     13 15 02 F6 | 	mov	arg02, local01
27940     1B 15 02 F1 | 	add	arg02, local09
27944     01 14 06 F1 | 	add	arg02, #1
27948     13 13 02 F6 | 	mov	arg01, local01
2794c     D4 F5 BF FD | 	call	#__system____builtin_strcpy
27950     13 13 02 F6 | 	mov	arg01, local01
27954     09 35 02 F6 | 	mov	local08, arg01
27958     97 06 48 FB | 	callpa	#(@LR__3284-@LR__3283)>>2,fcache_load_ptr_
2795c                 | LR__3283
2795c     1A FB C9 FA | 	rdbyte	result1, local08 wz
27960     01 34 06 51 |  if_ne	add	local08, #1
27964     F4 FF 9F 5D |  if_ne	jmp	#LR__3283
27968                 | LR__3284
27968     09 35 82 F1 | 	sub	local08, arg01
2796c     1A 37 02 F6 | 	mov	local09, local08
27970                 | LR__3285
27970     01 36 56 F2 | 	cmps	local09, #1 wc
27974     70 00 90 CD |  if_b	jmp	#LR__3286
27978     1B 2D 02 F6 | 	mov	local04, local09
2797c     13 2D 02 F1 | 	add	local04, local01
27980     16 3B C2 FA | 	rdbyte	local11, local04
27984     2F 3A 0E F2 | 	cmp	local11, #47 wz
27988     1B 3B 02 A6 |  if_e	mov	local11, local09
2798c     13 3B 02 A1 |  if_e	add	local11, local01
27990     1D 01 48 AC |  if_e	wrbyte	#0, local11
27994     01 36 86 A1 |  if_e	sub	local09, #1
27998     D4 FF 9F AD |  if_e	jmp	#LR__3285
2799c     1B 2D 02 F6 | 	mov	local04, local09
279a0     13 2D 02 F1 | 	add	local04, local01
279a4     16 3B C2 FA | 	rdbyte	local11, local04
279a8     2E 3A 0E F2 | 	cmp	local11, #46 wz
279ac     38 00 90 5D |  if_ne	jmp	#LR__3286
279b0     02 36 56 F2 | 	cmps	local09, #2 wc
279b4     30 00 90 CD |  if_b	jmp	#LR__3286
279b8     1B 41 02 F6 | 	mov	local14, local09
279bc     01 40 86 F1 | 	sub	local14, #1
279c0     13 41 02 F1 | 	add	local14, local01
279c4     20 2F C2 FA | 	rdbyte	local05, local14
279c8     2F 2E 0E F2 | 	cmp	local05, #47 wz
279cc     18 00 90 5D |  if_ne	jmp	#LR__3286
279d0     1B 2D 02 F6 | 	mov	local04, local09
279d4     01 2C 86 F1 | 	sub	local04, #1
279d8     13 2D 02 F1 | 	add	local04, local01
279dc     16 01 48 FC | 	wrbyte	#0, local04
279e0     02 36 86 F1 | 	sub	local09, #2
279e4     88 FF 9F FD | 	jmp	#LR__3285
279e8                 | LR__3286
279e8     1E FB 01 F6 | 	mov	result1, local12
279ec     1C 00 90 FD | 	jmp	#LR__3290
279f0                 | LR__3287
279f0                 | LR__3288
279f0     01 32 06 F1 | 	add	local07, #1
279f4     2C FE 9F FD | 	jmp	#LR__3277
279f8                 | LR__3289
279f8     02 00 00 FF 
279fc     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
27a00     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
27a04     02 00 00 FF 
27a08     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
27a0c                 | LR__3290
27a0c     A7 F0 03 F6 | 	mov	ptra, fp
27a10     B2 00 A0 FD | 	call	#popregs_
27a14                 | __system____getvfsforfile_ret
27a14     2D 00 64 FD | 	ret
27a18                 | 
27a18                 | __system___basic_open
27a18     05 4A 05 F6 | 	mov	COUNT_, #5
27a1c     A8 00 A0 FD | 	call	#pushregs_
27a20     0A 27 02 F6 | 	mov	local01, arg02
27a24     0B 29 02 F6 | 	mov	local02, arg03
27a28     0C 2B 02 F6 | 	mov	local03, arg04
27a2c     00 2C 06 F6 | 	mov	local04, #0
27a30     88 4A B0 FD | 	call	#__system____getftab
27a34     FD 2E 0A F6 | 	mov	local05, result1 wz
27a38     18 00 90 5D |  if_ne	jmp	#LR__3300
27a3c     EE 12 02 F6 | 	mov	arg01, abortchain
27a40     0C 14 06 F6 | 	mov	arg02, #12
27a44     01 16 06 F6 | 	mov	arg03, #1
27a48     DA 00 A0 FD | 	call	#__longjmp
27a4c     01 FA 65 F6 | 	neg	result1, #1
27a50     14 01 90 FD | 	jmp	#LR__3309
27a54                 | LR__3300
27a54     08 2E 06 F1 | 	add	local05, #8
27a58     17 FB 09 FB | 	rdlong	result1, local05 wz
27a5c     08 2E 86 F1 | 	sub	local05, #8
27a60     17 13 02 56 |  if_ne	mov	arg01, local05
27a64     A8 41 B0 5D |  if_ne	call	#__system___closeraw
27a68     00 26 0E F2 | 	cmp	local01, #0 wz
27a6c     00 28 0E A2 |  if_e	cmp	local02, #0 wz
27a70     00 2A 0E A2 |  if_e	cmp	local03, #0 wz
27a74     3C 00 90 AD |  if_e	jmp	#LR__3302
27a78     0C 12 06 F6 | 	mov	arg01, #12
27a7c     90 36 B0 FD | 	call	#__system___gc_alloc_managed
27a80     FD 2C 0A F6 | 	mov	local04, result1 wz
27a84     18 00 90 5D |  if_ne	jmp	#LR__3301
27a88     EE 12 02 F6 | 	mov	arg01, abortchain
27a8c     07 14 06 F6 | 	mov	arg02, #7
27a90     01 16 06 F6 | 	mov	arg03, #1
27a94     DA 00 A0 FD | 	call	#__longjmp
27a98     01 FA 65 F6 | 	neg	result1, #1
27a9c     C8 00 90 FD | 	jmp	#LR__3309
27aa0                 | LR__3301
27aa0     16 01 68 FC | 	wrlong	#0, local04
27aa4     04 2C 06 F1 | 	add	local04, #4
27aa8     16 01 68 FC | 	wrlong	#0, local04
27aac     04 2C 86 F1 | 	sub	local04, #4
27ab0     17 2D 62 FC | 	wrlong	local04, local05
27ab4                 | LR__3302
27ab4     00 26 0E F2 | 	cmp	local01, #0 wz
27ab8     20 00 90 AD |  if_e	jmp	#LR__3303
27abc     16 27 62 FC | 	wrlong	local01, local04
27ac0     16 FB 01 F6 | 	mov	result1, local04
27ac4     00 30 05 FF 
27ac8     00 FA 45 F5 | 	or	result1, ##174063616
27acc     1C 2E 06 F1 | 	add	local05, #28
27ad0     17 FB 61 FC | 	wrlong	result1, local05
27ad4     1C 2E 86 F1 | 	sub	local05, #28
27ad8     0C 00 90 FD | 	jmp	#LR__3304
27adc                 | LR__3303
27adc     1C 2E 06 F1 | 	add	local05, #28
27ae0     17 01 68 FC | 	wrlong	#0, local05
27ae4     1C 2E 86 F1 | 	sub	local05, #28
27ae8                 | LR__3304
27ae8     00 28 0E F2 | 	cmp	local02, #0 wz
27aec     28 00 90 AD |  if_e	jmp	#LR__3305
27af0     04 2C 06 F1 | 	add	local04, #4
27af4     16 29 62 FC | 	wrlong	local02, local04
27af8     04 2C 86 F1 | 	sub	local04, #4
27afc     16 FB 01 F6 | 	mov	result1, local04
27b00     00 38 05 FF 
27b04     00 FA 45 F5 | 	or	result1, ##175112192
27b08     20 2E 06 F1 | 	add	local05, #32
27b0c     17 FB 61 FC | 	wrlong	result1, local05
27b10     20 2E 86 F1 | 	sub	local05, #32
27b14     0C 00 90 FD | 	jmp	#LR__3306
27b18                 | LR__3305
27b18     20 2E 06 F1 | 	add	local05, #32
27b1c     17 01 68 FC | 	wrlong	#0, local05
27b20     20 2E 86 F1 | 	sub	local05, #32
27b24                 | LR__3306
27b24     00 2A 0E F2 | 	cmp	local03, #0 wz
27b28     24 00 90 AD |  if_e	jmp	#LR__3307
27b2c     08 2C 06 F1 | 	add	local04, #8
27b30     16 2B 62 FC | 	wrlong	local03, local04
27b34     08 2C 86 F1 | 	sub	local04, #8
27b38     00 40 05 FF 
27b3c     00 2C 46 F5 | 	or	local04, ##176160768
27b40     24 2E 06 F1 | 	add	local05, #36
27b44     17 2D 62 FC | 	wrlong	local04, local05
27b48     24 2E 86 F1 | 	sub	local05, #36
27b4c     0C 00 90 FD | 	jmp	#LR__3308
27b50                 | LR__3307
27b50     24 2E 06 F1 | 	add	local05, #36
27b54     17 01 68 FC | 	wrlong	#0, local05
27b58     24 2E 86 F1 | 	sub	local05, #36
27b5c                 | LR__3308
27b5c     08 2E 06 F1 | 	add	local05, #8
27b60     17 0F 68 FC | 	wrlong	#7, local05
27b64     00 FA 05 F6 | 	mov	result1, #0
27b68                 | LR__3309
27b68     A7 F0 03 F6 | 	mov	ptra, fp
27b6c     B2 00 A0 FD | 	call	#popregs_
27b70                 | __system___basic_open_ret
27b70     2D 00 64 FD | 	ret
27b74                 | 
27b74                 | __system___basic_open_string
27b74     04 4A 05 F6 | 	mov	COUNT_, #4
27b78     A8 00 A0 FD | 	call	#pushregs_
27b7c     0A 27 02 F6 | 	mov	local01, arg02
27b80     0B 29 02 F6 | 	mov	local02, arg03
27b84     34 49 B0 FD | 	call	#__system____getftab
27b88     FD 2A 0A F6 | 	mov	local03, result1 wz
27b8c     18 00 90 5D |  if_ne	jmp	#LR__3310
27b90     EE 12 02 F6 | 	mov	arg01, abortchain
27b94     0C 14 06 F6 | 	mov	arg02, #12
27b98     01 16 06 F6 | 	mov	arg03, #1
27b9c     DA 00 A0 FD | 	call	#__longjmp
27ba0     01 FA 65 F6 | 	neg	result1, #1
27ba4     58 00 90 FD | 	jmp	#LR__3312
27ba8                 | LR__3310
27ba8     08 2A 06 F1 | 	add	local03, #8
27bac     15 19 0A FB | 	rdlong	arg04, local03 wz
27bb0     08 2A 86 F1 | 	sub	local03, #8
27bb4     15 13 02 56 |  if_ne	mov	arg01, local03
27bb8     54 40 B0 5D |  if_ne	call	#__system___closeraw
27bbc     13 15 02 F6 | 	mov	arg02, local01
27bc0     14 17 02 F6 | 	mov	arg03, local02
27bc4     15 13 02 F6 | 	mov	arg01, local03
27bc8     B6 19 06 F6 | 	mov	arg04, #438
27bcc     3C 3D B0 FD | 	call	#__system___openraw
27bd0     FD 2C 02 F6 | 	mov	local04, result1
27bd4     00 2C 56 F2 | 	cmps	local04, #0 wc
27bd8     20 00 90 3D |  if_ae	jmp	#LR__3311
27bdc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27be0     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
27be4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27be8     EE 12 02 F6 | 	mov	arg01, abortchain
27bec     01 16 06 F6 | 	mov	arg03, #1
27bf0     DA 00 A0 FD | 	call	#__longjmp
27bf4     01 FA 65 F6 | 	neg	result1, #1
27bf8     04 00 90 FD | 	jmp	#LR__3312
27bfc                 | LR__3311
27bfc     16 FB 01 F6 | 	mov	result1, local04
27c00                 | LR__3312
27c00     A7 F0 03 F6 | 	mov	ptra, fp
27c04     B2 00 A0 FD | 	call	#popregs_
27c08                 | __system___basic_open_string_ret
27c08     2D 00 64 FD | 	ret
27c0c                 | 
27c0c                 | __system___basic_print_char
27c0c     03 4A 05 F6 | 	mov	COUNT_, #3
27c10     A8 00 A0 FD | 	call	#pushregs_
27c14     0A 27 02 F6 | 	mov	local01, arg02
27c18     F4 4F B0 FD | 	call	#__system___gettxfunc
27c1c     FD 28 0A F6 | 	mov	local02, result1 wz
27c20     00 FA 05 A6 |  if_e	mov	result1, #0
27c24     30 00 90 AD |  if_e	jmp	#LR__3320
27c28     14 2B 02 F6 | 	mov	local03, local02
27c2c     13 28 46 F7 | 	zerox	local02, #19
27c30     14 2A 46 F0 | 	shr	local03, #20
27c34     02 2A 66 F0 | 	shl	local03, #2
27c38     ED 2A 02 F1 | 	add	local03, __methods__
27c3c     15 2B 02 FB | 	rdlong	local03, local03
27c40     13 13 02 F6 | 	mov	arg01, local01
27c44     F2 26 02 F6 | 	mov	local01, objptr
27c48     14 E5 01 F6 | 	mov	objptr, local02
27c4c     2D 2A 62 FD | 	call	local03
27c50     13 E5 01 F6 | 	mov	objptr, local01
27c54     01 FA 05 F6 | 	mov	result1, #1
27c58                 | LR__3320
27c58     A7 F0 03 F6 | 	mov	ptra, fp
27c5c     B2 00 A0 FD | 	call	#popregs_
27c60                 | __system___basic_print_char_ret
27c60     2D 00 64 FD | 	ret
27c64                 | 
27c64                 | __system___basic_print_string
27c64     03 4A 05 F6 | 	mov	COUNT_, #3
27c68     A8 00 A0 FD | 	call	#pushregs_
27c6c     0A 27 02 F6 | 	mov	local01, arg02
27c70     0B 29 02 F6 | 	mov	local02, arg03
27c74     98 4F B0 FD | 	call	#__system___gettxfunc
27c78     FD 2A 0A F6 | 	mov	local03, result1 wz
27c7c     00 FA 05 A6 |  if_e	mov	result1, #0
27c80     18 00 90 AD |  if_e	jmp	#LR__3330
27c84     00 26 0E F2 | 	cmp	local01, #0 wz
27c88     00 FA 05 A6 |  if_e	mov	result1, #0
27c8c     15 13 02 56 |  if_ne	mov	arg01, local03
27c90     14 15 02 56 |  if_ne	mov	arg02, local02
27c94     13 17 02 56 |  if_ne	mov	arg03, local01
27c98     08 02 B0 5D |  if_ne	call	#__system___fmtstr
27c9c                 | LR__3330
27c9c     A7 F0 03 F6 | 	mov	ptra, fp
27ca0     B2 00 A0 FD | 	call	#popregs_
27ca4                 | __system___basic_print_string_ret
27ca4     2D 00 64 FD | 	ret
27ca8                 | 
27ca8                 | __system___basic_print_integer
27ca8     04 4A 05 F6 | 	mov	COUNT_, #4
27cac     A8 00 A0 FD | 	call	#pushregs_
27cb0     0A 27 02 F6 | 	mov	local01, arg02
27cb4     0B 29 02 F6 | 	mov	local02, arg03
27cb8     0C 2B 02 F6 | 	mov	local03, arg04
27cbc     50 4F B0 FD | 	call	#__system___gettxfunc
27cc0     FD 2C 0A F6 | 	mov	local04, result1 wz
27cc4     00 FA 05 A6 |  if_e	mov	result1, #0
27cc8     16 13 02 56 |  if_ne	mov	arg01, local04
27ccc     14 15 02 56 |  if_ne	mov	arg02, local02
27cd0     13 17 02 56 |  if_ne	mov	arg03, local01
27cd4     15 19 02 56 |  if_ne	mov	arg04, local03
27cd8     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
27cdc     A7 F0 03 F6 | 	mov	ptra, fp
27ce0     B2 00 A0 FD | 	call	#popregs_
27ce4                 | __system___basic_print_integer_ret
27ce4     2D 00 64 FD | 	ret
27ce8                 | 
27ce8                 | __system___basic_print_unsigned
27ce8     03 4A 05 F6 | 	mov	COUNT_, #3
27cec     A8 00 A0 FD | 	call	#pushregs_
27cf0     0A 27 02 F6 | 	mov	local01, arg02
27cf4     0B 29 02 F6 | 	mov	local02, arg03
27cf8     0C 2B 02 F6 | 	mov	local03, arg04
27cfc     10 4F B0 FD | 	call	#__system___gettxfunc
27d00     FD 12 0A F6 | 	mov	arg01, result1 wz
27d04     00 FA 05 A6 |  if_e	mov	result1, #0
27d08     3A 28 26 54 |  if_ne	bith	local02, #58
27d0c     14 15 02 56 |  if_ne	mov	arg02, local02
27d10     13 17 02 56 |  if_ne	mov	arg03, local01
27d14     15 19 02 56 |  if_ne	mov	arg04, local03
27d18     74 02 B0 5D |  if_ne	call	#__system___fmtnum
27d1c     A7 F0 03 F6 | 	mov	ptra, fp
27d20     B2 00 A0 FD | 	call	#popregs_
27d24                 | __system___basic_print_unsigned_ret
27d24     2D 00 64 FD | 	ret
27d28                 | 
27d28                 | __system___basic_get_char
27d28     03 4A 05 F6 | 	mov	COUNT_, #3
27d2c     A8 00 A0 FD | 	call	#pushregs_
27d30     20 4F B0 FD | 	call	#__system___getrxfunc
27d34     FD 26 0A F6 | 	mov	local01, result1 wz
27d38     01 FA 65 A6 |  if_e	neg	result1, #1
27d3c     28 00 90 AD |  if_e	jmp	#LR__3340
27d40     13 29 02 F6 | 	mov	local02, local01
27d44     13 26 46 F7 | 	zerox	local01, #19
27d48     14 28 46 F0 | 	shr	local02, #20
27d4c     02 28 66 F0 | 	shl	local02, #2
27d50     ED 28 02 F1 | 	add	local02, __methods__
27d54     14 29 02 FB | 	rdlong	local02, local02
27d58     F2 2A 02 F6 | 	mov	local03, objptr
27d5c     13 E5 01 F6 | 	mov	objptr, local01
27d60     2D 28 62 FD | 	call	local02
27d64     15 E5 01 F6 | 	mov	objptr, local03
27d68                 | LR__3340
27d68     A7 F0 03 F6 | 	mov	ptra, fp
27d6c     B2 00 A0 FD | 	call	#popregs_
27d70                 | __system___basic_get_char_ret
27d70     2D 00 64 FD | 	ret
27d74                 | 
27d74                 | __system___basic_put
27d74     04 4A 05 F6 | 	mov	COUNT_, #4
27d78     A8 00 A0 FD | 	call	#pushregs_
27d7c     0D 27 02 F6 | 	mov	local01, arg05
27d80     13 19 02 FD | 	qmul	arg04, local01
27d84     09 29 02 F6 | 	mov	local02, arg01
27d88     0B 2B 02 F6 | 	mov	local03, arg03
27d8c     00 14 0E F2 | 	cmp	arg02, #0 wz
27d90     01 14 86 51 |  if_ne	sub	arg02, #1
27d94     14 13 02 56 |  if_ne	mov	arg01, local02
27d98     00 16 06 56 |  if_ne	mov	arg03, #0
27d9c     18 2C 62 FD | 	getqx	local04
27da0     60 45 B0 5D |  if_ne	call	#__system__lseek
27da4     15 15 02 F6 | 	mov	arg02, local03
27da8     16 17 02 F6 | 	mov	arg03, local04
27dac     14 13 02 F6 | 	mov	arg01, local02
27db0     9C 44 B0 FD | 	call	#__system__write
27db4     FD 2C 02 F6 | 	mov	local04, result1
27db8     01 2C 56 F2 | 	cmps	local04, #1 wc
27dbc     10 00 90 CD |  if_b	jmp	#LR__3350
27dc0     16 91 02 F6 | 	mov	muldiva_, local04
27dc4     13 93 02 F6 | 	mov	muldivb_, local01
27dc8     BA 00 A0 FD | 	call	#divide_
27dcc     49 2D 02 F6 | 	mov	local04, muldivb_
27dd0                 | LR__3350
27dd0     16 FB 01 F6 | 	mov	result1, local04
27dd4     A7 F0 03 F6 | 	mov	ptra, fp
27dd8     B2 00 A0 FD | 	call	#popregs_
27ddc                 | __system___basic_put_ret
27ddc     2D 00 64 FD | 	ret
27de0                 | 
27de0                 | __system___basic_get
27de0     04 4A 05 F6 | 	mov	COUNT_, #4
27de4     A8 00 A0 FD | 	call	#pushregs_
27de8     0D 27 02 F6 | 	mov	local01, arg05
27dec     13 19 02 FD | 	qmul	arg04, local01
27df0     09 29 02 F6 | 	mov	local02, arg01
27df4     0B 2B 02 F6 | 	mov	local03, arg03
27df8     00 14 0E F2 | 	cmp	arg02, #0 wz
27dfc     01 14 86 51 |  if_ne	sub	arg02, #1
27e00     14 13 02 56 |  if_ne	mov	arg01, local02
27e04     00 16 06 56 |  if_ne	mov	arg03, #0
27e08     18 2C 62 FD | 	getqx	local04
27e0c     F4 44 B0 5D |  if_ne	call	#__system__lseek
27e10     15 15 02 F6 | 	mov	arg02, local03
27e14     16 17 02 F6 | 	mov	arg03, local04
27e18     14 13 02 F6 | 	mov	arg01, local02
27e1c     6C 44 B0 FD | 	call	#__system__read
27e20     FD 2C 02 F6 | 	mov	local04, result1
27e24     01 2C 56 F2 | 	cmps	local04, #1 wc
27e28     10 00 90 CD |  if_b	jmp	#LR__3360
27e2c     16 91 02 F6 | 	mov	muldiva_, local04
27e30     13 93 02 F6 | 	mov	muldivb_, local01
27e34     BA 00 A0 FD | 	call	#divide_
27e38     49 2D 02 F6 | 	mov	local04, muldivb_
27e3c                 | LR__3360
27e3c     16 FB 01 F6 | 	mov	result1, local04
27e40     A7 F0 03 F6 | 	mov	ptra, fp
27e44     B2 00 A0 FD | 	call	#popregs_
27e48                 | __system___basic_get_ret
27e48     2D 00 64 FD | 	ret
27e4c                 | 
27e4c                 | __system___fmtchar
27e4c     00 4A 05 F6 | 	mov	COUNT_, #0
27e50     A8 00 A0 FD | 	call	#pushregs_
27e54     10 F0 07 F1 | 	add	ptra, #16
27e58     04 4E 05 F1 | 	add	fp, #4
27e5c     A7 12 62 FC | 	wrlong	arg01, fp
27e60     04 4E 05 F1 | 	add	fp, #4
27e64     A7 14 62 FC | 	wrlong	arg02, fp
27e68     04 4E 05 F1 | 	add	fp, #4
27e6c     A7 16 62 FC | 	wrlong	arg03, fp
27e70     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
27e74     A7 16 62 FC | 	wrlong	arg03, fp
27e78     08 4E 85 F1 | 	sub	fp, #8
27e7c     A7 12 02 FB | 	rdlong	arg01, fp
27e80     04 4E 05 F1 | 	add	fp, #4
27e84     A7 14 02 FB | 	rdlong	arg02, fp
27e88     04 4E 05 F1 | 	add	fp, #4
27e8c     A7 16 02 F6 | 	mov	arg03, fp
27e90     0C 4E 85 F1 | 	sub	fp, #12
27e94     0C 00 B0 FD | 	call	#__system___fmtstr
27e98     A7 F0 03 F6 | 	mov	ptra, fp
27e9c     B2 00 A0 FD | 	call	#popregs_
27ea0                 | __system___fmtchar_ret
27ea0     2D 00 64 FD | 	ret
27ea4                 | 
27ea4                 | __system___fmtstr
27ea4     09 4A 05 F6 | 	mov	COUNT_, #9
27ea8     A8 00 A0 FD | 	call	#pushregs_
27eac     09 27 02 F6 | 	mov	local01, arg01
27eb0     0A 29 02 F6 | 	mov	local02, arg02
27eb4     0B 2B 02 F6 | 	mov	local03, arg03
27eb8     14 19 E2 F8 | 	getbyte	arg04, local02, #0
27ebc     15 13 02 F6 | 	mov	arg01, local03
27ec0     09 2D 02 F6 | 	mov	local04, arg01
27ec4     97 06 48 FB | 	callpa	#(@LR__3371-@LR__3370)>>2,fcache_load_ptr_
27ec8                 | LR__3370
27ec8     16 FB C9 FA | 	rdbyte	result1, local04 wz
27ecc     01 2C 06 51 |  if_ne	add	local04, #1
27ed0     F4 FF 9F 5D |  if_ne	jmp	#LR__3370
27ed4                 | LR__3371
27ed4     09 2D 82 F1 | 	sub	local04, arg01
27ed8     00 18 0E F2 | 	cmp	arg04, #0 wz
27edc     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
27ee0     14 15 02 F6 | 	mov	arg02, local02
27ee4     16 17 02 F6 | 	mov	arg03, local04
27ee8     13 13 02 F6 | 	mov	arg01, local01
27eec     02 18 06 F6 | 	mov	arg04, #2
27ef0     BC 49 B0 FD | 	call	#__system___fmtpad
27ef4     FD 2E 02 F6 | 	mov	local05, result1
27ef8     00 2E 56 F2 | 	cmps	local05, #0 wc
27efc     17 FB 01 C6 |  if_b	mov	result1, local05
27f00     80 00 90 CD |  if_b	jmp	#LR__3374
27f04     01 2C 56 F2 | 	cmps	local04, #1 wc
27f08     50 00 90 CD |  if_b	jmp	#LR__3373
27f0c     16 31 02 F6 | 	mov	local06, local04
27f10                 | LR__3372
27f10     13 33 02 F6 | 	mov	local07, local01
27f14     13 35 02 F6 | 	mov	local08, local01
27f18     13 32 46 F7 | 	zerox	local07, #19
27f1c     14 34 46 F0 | 	shr	local08, #20
27f20     02 34 66 F0 | 	shl	local08, #2
27f24     ED 34 02 F1 | 	add	local08, __methods__
27f28     1A 35 02 FB | 	rdlong	local08, local08
27f2c     15 13 C2 FA | 	rdbyte	arg01, local03
27f30     F2 36 02 F6 | 	mov	local09, objptr
27f34     19 E5 01 F6 | 	mov	objptr, local07
27f38     01 2A 06 F1 | 	add	local03, #1
27f3c     2D 34 62 FD | 	call	local08
27f40     1B E5 01 F6 | 	mov	objptr, local09
27f44     FD 36 02 F6 | 	mov	local09, result1
27f48     00 36 56 F2 | 	cmps	local09, #0 wc
27f4c     1B FB 01 C6 |  if_b	mov	result1, local09
27f50     30 00 90 CD |  if_b	jmp	#LR__3374
27f54     1B 2F 02 F1 | 	add	local05, local09
27f58     ED 31 6E FB | 	djnz	local06, #LR__3372
27f5c                 | LR__3373
27f5c     14 15 02 F6 | 	mov	arg02, local02
27f60     16 17 02 F6 | 	mov	arg03, local04
27f64     13 13 02 F6 | 	mov	arg01, local01
27f68     01 18 06 F6 | 	mov	arg04, #1
27f6c     40 49 B0 FD | 	call	#__system___fmtpad
27f70     FD 36 02 F6 | 	mov	local09, result1
27f74     00 36 56 F2 | 	cmps	local09, #0 wc
27f78     1B FB 01 C6 |  if_b	mov	result1, local09
27f7c     1B 2F 02 31 |  if_ae	add	local05, local09
27f80     17 FB 01 36 |  if_ae	mov	result1, local05
27f84                 | LR__3374
27f84     A7 F0 03 F6 | 	mov	ptra, fp
27f88     B2 00 A0 FD | 	call	#popregs_
27f8c                 | __system___fmtstr_ret
27f8c     2D 00 64 FD | 	ret
27f90                 | 
27f90                 | __system___fmtnum
27f90     0B 4A 05 F6 | 	mov	COUNT_, #11
27f94     A8 00 A0 FD | 	call	#pushregs_
27f98     09 27 02 F6 | 	mov	local01, arg01
27f9c     0A 29 02 F6 | 	mov	local02, arg02
27fa0     0B 2B 02 F6 | 	mov	local03, arg03
27fa4     0C 2D 02 F6 | 	mov	local04, arg04
27fa8     F8 2F 02 F6 | 	mov	local05, ptra
27fac     17 31 02 F6 | 	mov	local06, local05
27fb0     00 32 06 F6 | 	mov	local07, #0
27fb4     14 35 02 F6 | 	mov	local08, local02
27fb8     10 34 46 F0 | 	shr	local08, #16
27fbc     3F 34 06 F5 | 	and	local08, #63
27fc0     14 37 E2 F8 | 	getbyte	local09, local02, #0
27fc4     14 39 02 F6 | 	mov	local10, local02
27fc8     1A 38 46 F0 | 	shr	local10, #26
27fcc     03 38 06 F5 | 	and	local10, #3
27fd0     1C 3B 02 F6 | 	mov	local11, local10
27fd4     01 34 56 F2 | 	cmps	local08, #1 wc
27fd8     44 F0 07 F1 | 	add	ptra, #68
27fdc     01 34 86 31 |  if_ae	sub	local08, #1
27fe0     41 36 56 F2 | 	cmps	local09, #65 wc
27fe4     00 36 0E C2 |  if_b	cmp	local09, #0 wz
27fe8     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
27fec     03 3A 0E F2 | 	cmp	local11, #3 wz
27ff0     00 3A 06 A6 |  if_e	mov	local11, #0
27ff4     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
27ff8     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
27ffc     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
28000     00 3A 0E F2 | 	cmp	local11, #0 wz
28004     4C 00 90 AD |  if_e	jmp	#LR__3383
28008     01 32 06 F6 | 	mov	local07, #1
2800c     1B 35 0A F2 | 	cmp	local08, local09 wz
28010     18 00 90 5D |  if_ne	jmp	#LR__3381
28014     05 34 6E FB | 	djnz	local08, #LR__3380
28018     13 13 02 F6 | 	mov	arg01, local01
2801c     14 15 02 F6 | 	mov	arg02, local02
28020     23 16 06 F6 | 	mov	arg03, #35
28024     24 FE BF FD | 	call	#__system___fmtchar
28028     88 00 90 FD | 	jmp	#LR__3387
2802c                 | LR__3380
2802c                 | LR__3381
2802c     02 3A 0E F2 | 	cmp	local11, #2 wz
28030     18 39 02 A6 |  if_e	mov	local10, local06
28034     01 30 06 A1 |  if_e	add	local06, #1
28038     1C 41 48 AC |  if_e	wrbyte	#32, local10
2803c     14 00 90 AD |  if_e	jmp	#LR__3382
28040     04 3A 0E F2 | 	cmp	local11, #4 wz
28044     18 5B 48 AC |  if_e	wrbyte	#45, local06
28048     01 30 06 A1 |  if_e	add	local06, #1
2804c     18 57 48 5C |  if_ne	wrbyte	#43, local06
28050     01 30 06 51 |  if_ne	add	local06, #1
28054                 | LR__3382
28054                 | LR__3383
28054     18 13 02 F6 | 	mov	arg01, local06
28058     15 15 02 F6 | 	mov	arg02, local03
2805c     16 17 02 F6 | 	mov	arg03, local04
28060     1A 19 02 F6 | 	mov	arg04, local08
28064     00 1A 06 F6 | 	mov	arg05, #0
28068     1D 28 2E F4 | 	testbn	local02, #29 wz
2806c     01 1A 06 56 |  if_ne	mov	arg05, #1
28070     04 49 B0 FD | 	call	#__system___uitoa
28074     FD 32 02 F1 | 	add	local07, result1
28078     1B 33 5A F2 | 	cmps	local07, local09 wcz
2807c     24 00 90 ED |  if_be	jmp	#LR__3386
28080     97 0E 48 FB | 	callpa	#(@LR__3385-@LR__3384)>>2,fcache_load_ptr_
28084                 | LR__3384
28084     1B 39 02 F6 | 	mov	local10, local09
28088     01 38 56 F2 | 	cmps	local10, #1 wc
2808c     01 36 86 F1 | 	sub	local09, #1
28090     18 39 02 36 |  if_ae	mov	local10, local06
28094     01 30 06 31 |  if_ae	add	local06, #1
28098     1C 47 48 3C |  if_ae	wrbyte	#35, local10
2809c     E4 FF 9F 3D |  if_ae	jmp	#LR__3384
280a0                 | LR__3385
280a0     18 01 48 FC | 	wrbyte	#0, local06
280a4                 | LR__3386
280a4     13 13 02 F6 | 	mov	arg01, local01
280a8     14 15 02 F6 | 	mov	arg02, local02
280ac     17 17 02 F6 | 	mov	arg03, local05
280b0     F0 FD BF FD | 	call	#__system___fmtstr
280b4                 | LR__3387
280b4     A7 F0 03 F6 | 	mov	ptra, fp
280b8     B2 00 A0 FD | 	call	#popregs_
280bc                 | __system___fmtnum_ret
280bc     2D 00 64 FD | 	ret
280c0                 | 
280c0                 | __system___fmtfloat
280c0     10 4A 05 F6 | 	mov	COUNT_, #16
280c4     A8 00 A0 FD | 	call	#pushregs_
280c8     24 F1 07 F1 | 	add	ptra, #292
280cc     04 4E 05 F1 | 	add	fp, #4
280d0     A7 12 62 FC | 	wrlong	arg01, fp
280d4     04 4E 05 F1 | 	add	fp, #4
280d8     A7 14 62 FC | 	wrlong	arg02, fp
280dc     04 4E 05 F1 | 	add	fp, #4
280e0     A7 16 62 FC | 	wrlong	arg03, fp
280e4     04 4E 05 F1 | 	add	fp, #4
280e8     A7 18 62 FC | 	wrlong	arg04, fp
280ec     0C 4E 05 F1 | 	add	fp, #12
280f0     A7 14 68 FC | 	wrlong	#10, fp
280f4     08 4E 05 F1 | 	add	fp, #8
280f8     A7 00 68 FC | 	wrlong	#0, fp
280fc     08 4E 05 F1 | 	add	fp, #8
28100     A7 00 68 FC | 	wrlong	#0, fp
28104     08 4E 05 F1 | 	add	fp, #8
28108     A7 00 68 FC | 	wrlong	#0, fp
2810c     04 4E 05 F1 | 	add	fp, #4
28110     A7 04 68 FC | 	wrlong	#2, fp
28114     04 4E 05 F1 | 	add	fp, #4
28118     A7 00 68 FC | 	wrlong	#0, fp
2811c     04 4E 05 F1 | 	add	fp, #4
28120     A7 00 68 FC | 	wrlong	#0, fp
28124     04 4E 05 F1 | 	add	fp, #4
28128     A7 00 68 FC | 	wrlong	#0, fp
2812c     04 4E 05 F1 | 	add	fp, #4
28130     A7 00 68 FC | 	wrlong	#0, fp
28134     18 4E 05 F1 | 	add	fp, #24
28138     A7 00 68 FC | 	wrlong	#0, fp
2813c     68 4E 05 F1 | 	add	fp, #104
28140     A7 26 02 F6 | 	mov	local01, fp
28144     08 4E 85 F1 | 	sub	fp, #8
28148     A7 26 62 FC | 	wrlong	local01, fp
2814c     04 4E 05 F1 | 	add	fp, #4
28150     A7 26 62 FC | 	wrlong	local01, fp
28154     BC 4E 85 F1 | 	sub	fp, #188
28158     A7 26 02 FB | 	rdlong	local01, fp
2815c     10 26 46 F0 | 	shr	local01, #16
28160     3F 26 06 F5 | 	and	local01, #63
28164     B0 4E 05 F1 | 	add	fp, #176
28168     A7 26 62 FC | 	wrlong	local01, fp
2816c     B0 4E 85 F1 | 	sub	fp, #176
28170     A7 26 02 FB | 	rdlong	local01, fp
28174     1C 26 46 F0 | 	shr	local01, #28
28178     01 26 06 F5 | 	and	local01, #1
2817c     08 4F 05 F1 | 	add	fp, #264
28180     A7 26 62 FC | 	wrlong	local01, fp
28184     58 4E 85 F1 | 	sub	fp, #88
28188     A7 26 0A FB | 	rdlong	local01, fp wz
2818c     B8 4E 85 F1 | 	sub	fp, #184
28190     3C 00 90 5D |  if_ne	jmp	#LR__3391
28194     10 4E 05 F1 | 	add	fp, #16
28198     A7 26 02 FB | 	rdlong	local01, fp
2819c     10 4E 85 F1 | 	sub	fp, #16
281a0     61 26 0E F2 | 	cmp	local01, #97 wz
281a4     18 00 90 5D |  if_ne	jmp	#LR__3390
281a8     B8 4E 05 F1 | 	add	fp, #184
281ac     A7 1A 68 FC | 	wrlong	#13, fp
281b0     84 4E 85 F1 | 	sub	fp, #132
281b4     A7 02 68 FC | 	wrlong	#1, fp
281b8     34 4E 85 F1 | 	sub	fp, #52
281bc     24 00 90 FD | 	jmp	#LR__3392
281c0                 | LR__3390
281c0     B8 4E 05 F1 | 	add	fp, #184
281c4     A7 0C 68 FC | 	wrlong	#6, fp
281c8     B8 4E 85 F1 | 	sub	fp, #184
281cc     14 00 90 FD | 	jmp	#LR__3392
281d0                 | LR__3391
281d0     B8 4E 05 F1 | 	add	fp, #184
281d4     A7 26 02 FB | 	rdlong	local01, fp
281d8     01 26 86 F1 | 	sub	local01, #1
281dc     A7 26 62 FC | 	wrlong	local01, fp
281e0     B8 4E 85 F1 | 	sub	fp, #184
281e4                 | LR__3392
281e4     08 4E 05 F1 | 	add	fp, #8
281e8     A7 26 02 FB | 	rdlong	local01, fp
281ec     16 26 46 F0 | 	shr	local01, #22
281f0     03 26 06 F5 | 	and	local01, #3
281f4     04 4F 05 F1 | 	add	fp, #260
281f8     A7 26 62 FC | 	wrlong	local01, fp
281fc     04 4F 85 F1 | 	sub	fp, #260
28200     A7 26 02 FB | 	rdlong	local01, fp
28204     1D 26 46 F0 | 	shr	local01, #29
28208     01 26 06 F5 | 	and	local01, #1
2820c     B4 4E 05 F1 | 	add	fp, #180
28210     A7 26 62 FC | 	wrlong	local01, fp
28214     B4 4E 85 F1 | 	sub	fp, #180
28218     A7 26 02 FB | 	rdlong	local01, fp
2821c     13 27 EA F8 | 	getbyte	local01, local01, #1
28220     60 4E 05 F1 | 	add	fp, #96
28224     A7 26 62 FC | 	wrlong	local01, fp
28228     60 4E 85 F1 | 	sub	fp, #96
2822c     A7 26 02 FB | 	rdlong	local01, fp
28230     13 27 E2 F8 | 	getbyte	local01, local01, #0
28234     64 4E 05 F1 | 	add	fp, #100
28238     A7 26 62 FC | 	wrlong	local01, fp
2823c     00 26 06 F6 | 	mov	local01, #0
28240     5C 4E 85 F1 | 	sub	fp, #92
28244     A7 1A 02 FB | 	rdlong	arg05, fp
28248     65 1A 0E F2 | 	cmp	arg05, #101 wz
2824c     01 26 06 A6 |  if_e	mov	local01, #1
28250     14 4E 05 F1 | 	add	fp, #20
28254     A7 26 62 FC | 	wrlong	local01, fp
28258     98 4E 05 F1 | 	add	fp, #152
2825c     A7 28 0A FB | 	rdlong	local02, fp wz
28260     45 26 06 56 |  if_ne	mov	local01, #69
28264     65 26 06 A6 |  if_e	mov	local01, #101
28268     8C 4E 85 F1 | 	sub	fp, #140
2826c     A7 26 62 FC | 	wrlong	local01, fp
28270     20 4E 85 F1 | 	sub	fp, #32
28274     A7 26 02 FB | 	rdlong	local01, fp
28278     10 4E 85 F1 | 	sub	fp, #16
2827c     61 26 0E F2 | 	cmp	local01, #97 wz
28280     4C 00 90 5D |  if_ne	jmp	#LR__3393
28284     24 4E 05 F1 | 	add	fp, #36
28288     A7 02 68 FC | 	wrlong	#1, fp
2828c     98 4E 05 F1 | 	add	fp, #152
28290     A7 28 0A FB | 	rdlong	local02, fp wz
28294     50 26 06 56 |  if_ne	mov	local01, #80
28298     70 26 06 A6 |  if_e	mov	local01, #112
2829c     8C 4E 85 F1 | 	sub	fp, #140
282a0     A7 26 62 FC | 	wrlong	local01, fp
282a4     14 4E 85 F1 | 	sub	fp, #20
282a8     A7 04 68 FC | 	wrlong	#2, fp
282ac     1C 4E 05 F1 | 	add	fp, #28
282b0     A7 02 68 FC | 	wrlong	#1, fp
282b4     84 4E 05 F1 | 	add	fp, #132
282b8     A7 28 0A FB | 	rdlong	local02, fp wz
282bc     58 26 06 56 |  if_ne	mov	local01, #88
282c0     78 26 06 A6 |  if_e	mov	local01, #120
282c4     7C 4E 85 F1 | 	sub	fp, #124
282c8     A7 26 62 FC | 	wrlong	local01, fp
282cc     40 4E 85 F1 | 	sub	fp, #64
282d0                 | LR__3393
282d0     10 4E 05 F1 | 	add	fp, #16
282d4     A7 26 02 FB | 	rdlong	local01, fp
282d8     10 4E 85 F1 | 	sub	fp, #16
282dc     23 26 0E F2 | 	cmp	local01, #35 wz
282e0     3C 00 90 5D |  if_ne	jmp	#LR__3396
282e4     48 4E 05 F1 | 	add	fp, #72
282e8     A7 02 68 FC | 	wrlong	#1, fp
282ec     C8 4E 05 F1 | 	add	fp, #200
282f0     A7 26 0A FB | 	rdlong	local01, fp wz
282f4     10 4F 85 F1 | 	sub	fp, #272
282f8     18 00 90 AD |  if_e	jmp	#LR__3394
282fc     10 4E 05 F1 | 	add	fp, #16
28300     A7 CC 68 FC | 	wrlong	#102, fp
28304     00 4F 05 F1 | 	add	fp, #256
28308     A7 00 68 FC | 	wrlong	#0, fp
2830c     10 4F 85 F1 | 	sub	fp, #272
28310     0C 00 90 FD | 	jmp	#LR__3395
28314                 | LR__3394
28314     10 4F 05 F1 | 	add	fp, #272
28318     A7 02 68 FC | 	wrlong	#1, fp
2831c     10 4F 85 F1 | 	sub	fp, #272
28320                 | LR__3395
28320                 | LR__3396
28320     08 4E 05 F1 | 	add	fp, #8
28324     A7 26 02 FB | 	rdlong	local01, fp
28328     1A 26 46 F0 | 	shr	local01, #26
2832c     03 26 06 F5 | 	and	local01, #3
28330     5C 4E 05 F1 | 	add	fp, #92
28334     A7 26 62 FC | 	wrlong	local01, fp
28338     58 4E 85 F1 | 	sub	fp, #88
2833c     A7 FA 01 FB | 	rdlong	result1, fp
28340     0C 4E 85 F1 | 	sub	fp, #12
28344     1F FA 4D F0 | 	shr	result1, #31 wz
28348     20 00 90 AD |  if_e	jmp	#LR__3397
2834c     2C 4E 05 F1 | 	add	fp, #44
28350     A7 5A 68 FC | 	wrlong	#45, fp
28354     20 4E 85 F1 | 	sub	fp, #32
28358     A7 FA 01 FB | 	rdlong	result1, fp
2835c     1F FA E5 F4 | 	bitnot	result1, #31
28360     A7 FA 61 FC | 	wrlong	result1, fp
28364     0C 4E 85 F1 | 	sub	fp, #12
28368     3C 00 90 FD | 	jmp	#LR__3399
2836c                 | LR__3397
2836c     64 4E 05 F1 | 	add	fp, #100
28370     A7 26 02 FB | 	rdlong	local01, fp
28374     64 4E 85 F1 | 	sub	fp, #100
28378     01 26 0E F2 | 	cmp	local01, #1 wz
2837c     2C 4E 05 A1 |  if_e	add	fp, #44
28380     A7 56 68 AC |  if_e	wrlong	#43, fp
28384     2C 4E 85 A1 |  if_e	sub	fp, #44
28388     1C 00 90 AD |  if_e	jmp	#LR__3398
2838c     64 4E 05 F1 | 	add	fp, #100
28390     A7 26 02 FB | 	rdlong	local01, fp
28394     64 4E 85 F1 | 	sub	fp, #100
28398     02 26 0E F2 | 	cmp	local01, #2 wz
2839c     2C 4E 05 A1 |  if_e	add	fp, #44
283a0     A7 40 68 AC |  if_e	wrlong	#32, fp
283a4     2C 4E 85 A1 |  if_e	sub	fp, #44
283a8                 | LR__3398
283a8                 | LR__3399
283a8     08 4E 05 F1 | 	add	fp, #8
283ac     A7 26 02 FB | 	rdlong	local01, fp
283b0     18 26 46 F0 | 	shr	local01, #24
283b4     03 26 06 F5 | 	and	local01, #3
283b8     3C 4E 05 F1 | 	add	fp, #60
283bc     A7 26 62 FC | 	wrlong	local01, fp
283c0     00 26 06 F6 | 	mov	local01, #0
283c4     18 4E 85 F1 | 	sub	fp, #24
283c8     A7 2A 0A FB | 	rdlong	local03, fp wz
283cc     2C 4E 85 F1 | 	sub	fp, #44
283d0     18 00 90 5D |  if_ne	jmp	#LR__3400
283d4     1C 4E 05 F1 | 	add	fp, #28
283d8     A7 2C 02 FB | 	rdlong	local04, fp
283dc     1C 4E 85 F1 | 	sub	fp, #28
283e0     16 2F 02 F6 | 	mov	local05, local04
283e4     0A 2E 0E F2 | 	cmp	local05, #10 wz
283e8     04 00 90 AD |  if_e	jmp	#LR__3401
283ec                 | LR__3400
283ec     01 26 66 F5 | 	xor	local01, #1
283f0                 | LR__3401
283f0     3C 4E 05 F1 | 	add	fp, #60
283f4     A7 26 62 FC | 	wrlong	local01, fp
283f8     3C 4E 85 F1 | 	sub	fp, #60
283fc     00 26 0E F2 | 	cmp	local01, #0 wz
28400     0C 01 90 AD |  if_e	jmp	#LR__3403
28404     44 4E 05 F1 | 	add	fp, #68
28408     A7 2E 02 FB | 	rdlong	local05, fp
2840c     44 4E 85 F1 | 	sub	fp, #68
28410     17 2B 02 F6 | 	mov	local03, local05
28414     02 2A 0E F2 | 	cmp	local03, #2 wz
28418     F4 00 90 5D |  if_ne	jmp	#LR__3403
2841c     0C 4F 05 F1 | 	add	fp, #268
28420     A7 30 02 FB | 	rdlong	local06, fp
28424     0C 4F 85 F1 | 	sub	fp, #268
28428     18 2D 02 F6 | 	mov	local04, local06
2842c     02 2C 0E F2 | 	cmp	local04, #2 wz
28430     DC 00 90 AD |  if_e	jmp	#LR__3403
28434     C0 4E 05 F1 | 	add	fp, #192
28438     A7 12 02 FB | 	rdlong	arg01, fp
2843c     94 4E 85 F1 | 	sub	fp, #148
28440     A7 14 02 FB | 	rdlong	arg02, fp
28444     14 4E 05 F1 | 	add	fp, #20
28448     A7 16 02 FB | 	rdlong	arg03, fp
2844c     40 4E 85 F1 | 	sub	fp, #64
28450     8C 47 B0 FD | 	call	#__system__emitsign_0573
28454     14 4F 05 F1 | 	add	fp, #276
28458     A7 FA 61 FC | 	wrlong	result1, fp
2845c     14 4F 85 F1 | 	sub	fp, #276
28460     00 FA 55 F2 | 	cmps	result1, #0 wc
28464     14 4F 05 C1 |  if_b	add	fp, #276
28468     A7 FA 01 CB |  if_b	rdlong	result1, fp
2846c     14 4F 85 C1 |  if_b	sub	fp, #276
28470     6C 0B 90 CD |  if_b	jmp	#LR__3453
28474     C0 4E 05 F1 | 	add	fp, #192
28478     A7 26 02 FB | 	rdlong	local01, fp
2847c     54 4E 05 F1 | 	add	fp, #84
28480     A7 2E 02 FB | 	rdlong	local05, fp
28484     17 2B 02 F6 | 	mov	local03, local05
28488     17 27 02 F1 | 	add	local01, local05
2848c     54 4E 85 F1 | 	sub	fp, #84
28490     A7 26 62 FC | 	wrlong	local01, fp
28494     58 4E 85 F1 | 	sub	fp, #88
28498     A7 26 0A FB | 	rdlong	local01, fp wz
2849c     68 4E 85 F1 | 	sub	fp, #104
284a0     60 00 90 AD |  if_e	jmp	#LR__3402
284a4     68 4E 05 F1 | 	add	fp, #104
284a8     A7 26 02 FB | 	rdlong	local01, fp
284ac     AC 4E 05 F1 | 	add	fp, #172
284b0     A7 2A 02 FB | 	rdlong	local03, fp
284b4     15 27 82 F1 | 	sub	local01, local03
284b8     AC 4E 85 F1 | 	sub	fp, #172
284bc     A7 26 62 FC | 	wrlong	local01, fp
284c0     68 4E 85 F1 | 	sub	fp, #104
284c4     00 26 56 F2 | 	cmps	local01, #0 wc
284c8     68 4E 05 C1 |  if_b	add	fp, #104
284cc     A7 00 68 CC |  if_b	wrlong	#0, fp
284d0     68 4E 85 C1 |  if_b	sub	fp, #104
284d4     08 4E 05 F1 | 	add	fp, #8
284d8     A7 26 02 FB | 	rdlong	local01, fp
284dc     E8 26 06 F4 | 	bitl	local01, #232
284e0     A7 26 62 FC | 	wrlong	local01, fp
284e4     60 4E 05 F1 | 	add	fp, #96
284e8     A7 2E 02 FB | 	rdlong	local05, fp
284ec     17 2B 02 F6 | 	mov	local03, local05
284f0     08 2A 66 F0 | 	shl	local03, #8
284f4     15 27 42 F5 | 	or	local01, local03
284f8     60 4E 85 F1 | 	sub	fp, #96
284fc     A7 26 62 FC | 	wrlong	local01, fp
28500     08 4E 85 F1 | 	sub	fp, #8
28504                 | LR__3402
28504     3C 4E 05 F1 | 	add	fp, #60
28508     A7 00 68 FC | 	wrlong	#0, fp
2850c     3C 4E 85 F1 | 	sub	fp, #60
28510                 | LR__3403
28510     0C 4E 05 F1 | 	add	fp, #12
28514     A7 12 02 FB | 	rdlong	arg01, fp
28518     0C 4E 85 F1 | 	sub	fp, #12
2851c     EC 21 B0 FD | 	call	#__system____builtin_ilogb
28520     FF FF 3F FF 
28524     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
28528     50 00 90 5D |  if_ne	jmp	#LR__3405
2852c     2C 4E 05 F1 | 	add	fp, #44
28530     A7 26 0A FB | 	rdlong	local01, fp wz
28534     2C 4E 85 F1 | 	sub	fp, #44
28538     24 00 90 AD |  if_e	jmp	#LR__3404
2853c     C0 4E 05 F1 | 	add	fp, #192
28540     A7 28 02 FB | 	rdlong	local02, fp
28544     14 2B 02 F6 | 	mov	local03, local02
28548     01 2A 06 F1 | 	add	local03, #1
2854c     A7 2A 62 FC | 	wrlong	local03, fp
28550     94 4E 85 F1 | 	sub	fp, #148
28554     A7 2C 02 FB | 	rdlong	local04, fp
28558     2C 4E 85 F1 | 	sub	fp, #44
2855c     14 2D 42 FC | 	wrbyte	local04, local02
28560                 | LR__3404
28560     C0 4E 05 F1 | 	add	fp, #192
28564     A7 12 02 FB | 	rdlong	arg01, fp
28568     C0 4E 85 F1 | 	sub	fp, #192
2856c     B5 01 00 FF 
28570     7A 14 06 F6 | 	mov	arg02, ##@LR__5401
28574     AC E9 BF FD | 	call	#__system____builtin_strcpy
28578     A4 08 90 FD | 	jmp	#LR__3441
2857c                 | LR__3405
2857c     0C 4E 05 F1 | 	add	fp, #12
28580     A7 28 02 FB | 	rdlong	local02, fp
28584     0C 4E 85 F1 | 	sub	fp, #12
28588     14 13 02 F6 | 	mov	arg01, local02
2858c     7C 21 B0 FD | 	call	#__system____builtin_ilogb
28590     00 00 40 FF 
28594     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
28598     50 00 90 5D |  if_ne	jmp	#LR__3407
2859c     2C 4E 05 F1 | 	add	fp, #44
285a0     A7 26 0A FB | 	rdlong	local01, fp wz
285a4     2C 4E 85 F1 | 	sub	fp, #44
285a8     24 00 90 AD |  if_e	jmp	#LR__3406
285ac     C0 4E 05 F1 | 	add	fp, #192
285b0     A7 28 02 FB | 	rdlong	local02, fp
285b4     14 2B 02 F6 | 	mov	local03, local02
285b8     01 2A 06 F1 | 	add	local03, #1
285bc     A7 2A 62 FC | 	wrlong	local03, fp
285c0     94 4E 85 F1 | 	sub	fp, #148
285c4     A7 2C 02 FB | 	rdlong	local04, fp
285c8     2C 4E 85 F1 | 	sub	fp, #44
285cc     14 2D 42 FC | 	wrbyte	local04, local02
285d0                 | LR__3406
285d0     C0 4E 05 F1 | 	add	fp, #192
285d4     A7 12 02 FB | 	rdlong	arg01, fp
285d8     C0 4E 85 F1 | 	sub	fp, #192
285dc     B5 01 00 FF 
285e0     7E 14 06 F6 | 	mov	arg02, ##@LR__5402
285e4     3C E9 BF FD | 	call	#__system____builtin_strcpy
285e8     34 08 90 FD | 	jmp	#LR__3441
285ec                 | LR__3407
285ec     10 4E 05 F1 | 	add	fp, #16
285f0     A7 26 02 FB | 	rdlong	local01, fp
285f4     10 4E 85 F1 | 	sub	fp, #16
285f8     67 26 0E F2 | 	cmp	local01, #103 wz
285fc     10 4E 05 51 |  if_ne	add	fp, #16
28600     A7 2A 02 5B |  if_ne	rdlong	local03, fp
28604     10 4E 85 51 |  if_ne	sub	fp, #16
28608     23 2A 0E 52 |  if_ne	cmp	local03, #35 wz
2860c     94 01 90 5D |  if_ne	jmp	#LR__3412
28610     0C 4E 05 F1 | 	add	fp, #12
28614     A7 12 02 FB | 	rdlong	arg01, fp
28618     08 4E 05 F1 | 	add	fp, #8
2861c     A7 14 02 F6 | 	mov	arg02, fp
28620     0C 4E 05 F1 | 	add	fp, #12
28624     A7 16 02 F6 | 	mov	arg03, fp
28628     98 4E 05 F1 | 	add	fp, #152
2862c     A7 18 02 FB | 	rdlong	arg04, fp
28630     9C 4E 85 F1 | 	sub	fp, #156
28634     A7 1A 02 FB | 	rdlong	arg05, fp
28638     1C 4E 85 F1 | 	sub	fp, #28
2863c     AC 43 B0 FD | 	call	#__system__disassemble_0571
28640     10 4E 05 F1 | 	add	fp, #16
28644     A7 26 02 FB | 	rdlong	local01, fp
28648     10 4E 85 F1 | 	sub	fp, #16
2864c     23 26 0E F2 | 	cmp	local01, #35 wz
28650     A0 00 90 5D |  if_ne	jmp	#LR__3409
28654     20 4E 05 F1 | 	add	fp, #32
28658     A7 26 02 FB | 	rdlong	local01, fp
2865c     98 4E 05 F1 | 	add	fp, #152
28660     A7 2A 02 FB | 	rdlong	local03, fp
28664     B8 4E 85 F1 | 	sub	fp, #184
28668     15 27 5A F2 | 	cmps	local01, local03 wcz
2866c     24 4E 05 11 |  if_a	add	fp, #36
28670     A7 02 68 1C |  if_a	wrlong	#1, fp
28674     24 4E 85 11 |  if_a	sub	fp, #36
28678     A4 01 90 1D |  if_a	jmp	#LR__3415
2867c     20 4E 05 F1 | 	add	fp, #32
28680     A7 26 02 FB | 	rdlong	local01, fp
28684     20 4E 85 F1 | 	sub	fp, #32
28688     00 26 56 F2 | 	cmps	local01, #0 wc
2868c     2C 00 90 3D |  if_ae	jmp	#LR__3408
28690     B8 4E 05 F1 | 	add	fp, #184
28694     A7 26 02 FB | 	rdlong	local01, fp
28698     13 27 62 F6 | 	neg	local01, local01
2869c     98 4E 85 F1 | 	sub	fp, #152
286a0     A7 2A 02 FB | 	rdlong	local03, fp
286a4     20 4E 85 F1 | 	sub	fp, #32
286a8     13 2B 5A F2 | 	cmps	local03, local01 wcz
286ac     24 4E 05 E1 |  if_be	add	fp, #36
286b0     A7 02 68 EC |  if_be	wrlong	#1, fp
286b4     24 4E 85 E1 |  if_be	sub	fp, #36
286b8     64 01 90 FD | 	jmp	#LR__3415
286bc                 | LR__3408
286bc     20 4E 05 F1 | 	add	fp, #32
286c0     A7 26 02 FB | 	rdlong	local01, fp
286c4     20 4E 85 F1 | 	sub	fp, #32
286c8     01 26 56 F2 | 	cmps	local01, #1 wc
286cc     50 01 90 CD |  if_b	jmp	#LR__3415
286d0     B8 4E 05 F1 | 	add	fp, #184
286d4     A7 26 02 FB | 	rdlong	local01, fp
286d8     98 4E 85 F1 | 	sub	fp, #152
286dc     A7 2A 02 FB | 	rdlong	local03, fp
286e0     15 27 82 F1 | 	sub	local01, local03
286e4     98 4E 05 F1 | 	add	fp, #152
286e8     A7 26 62 FC | 	wrlong	local01, fp
286ec     B8 4E 85 F1 | 	sub	fp, #184
286f0     2C 01 90 FD | 	jmp	#LR__3415
286f4                 | LR__3409
286f4     00 26 06 F6 | 	mov	local01, #0
286f8     08 4E 05 F1 | 	add	fp, #8
286fc     A7 28 02 FB | 	rdlong	local02, fp
28700     1C 28 46 F0 | 	shr	local02, #28
28704     01 28 0E F5 | 	and	local02, #1 wz
28708     01 26 06 A6 |  if_e	mov	local01, #1
2870c     2C 4E 05 F1 | 	add	fp, #44
28710     A7 26 62 FC | 	wrlong	local01, fp
28714     14 4E 85 F1 | 	sub	fp, #20
28718     A7 26 02 FB | 	rdlong	local01, fp
2871c     98 4E 05 F1 | 	add	fp, #152
28720     A7 2A 02 FB | 	rdlong	local03, fp
28724     B8 4E 85 F1 | 	sub	fp, #184
28728     15 27 52 F2 | 	cmps	local01, local03 wc
2872c     18 00 90 3D |  if_ae	jmp	#LR__3410
28730     20 4E 05 F1 | 	add	fp, #32
28734     A7 2C 02 FB | 	rdlong	local04, fp
28738     20 4E 85 F1 | 	sub	fp, #32
2873c     FF FF 7F FF 
28740     FC 2D 56 F2 | 	cmps	local04, ##-4 wc
28744     10 00 90 3D |  if_ae	jmp	#LR__3411
28748                 | LR__3410
28748     24 4E 05 F1 | 	add	fp, #36
2874c     A7 02 68 FC | 	wrlong	#1, fp
28750     24 4E 85 F1 | 	sub	fp, #36
28754     C8 00 90 FD | 	jmp	#LR__3415
28758                 | LR__3411
28758     B8 4E 05 F1 | 	add	fp, #184
2875c     A7 2C 02 FB | 	rdlong	local04, fp
28760     98 4E 85 F1 | 	sub	fp, #152
28764     A7 2A 02 FB | 	rdlong	local03, fp
28768     15 2D 82 F1 | 	sub	local04, local03
2876c     98 4E 05 F1 | 	add	fp, #152
28770     A7 2C 62 FC | 	wrlong	local04, fp
28774     AC 4E 85 F1 | 	sub	fp, #172
28778     A7 12 02 FB | 	rdlong	arg01, fp
2877c     08 4E 05 F1 | 	add	fp, #8
28780     A7 14 02 F6 | 	mov	arg02, fp
28784     0C 4E 05 F1 | 	add	fp, #12
28788     A7 16 02 F6 | 	mov	arg03, fp
2878c     16 19 62 F6 | 	neg	arg04, local04
28790     04 4E 85 F1 | 	sub	fp, #4
28794     A7 1A 02 FB | 	rdlong	arg05, fp
28798     1C 4E 85 F1 | 	sub	fp, #28
2879c     4C 42 B0 FD | 	call	#__system__disassemble_0571
287a0     7C 00 90 FD | 	jmp	#LR__3415
287a4                 | LR__3412
287a4     24 4E 05 F1 | 	add	fp, #36
287a8     A7 26 0A FB | 	rdlong	local01, fp wz
287ac     24 4E 85 F1 | 	sub	fp, #36
287b0     34 00 90 AD |  if_e	jmp	#LR__3413
287b4     0C 4E 05 F1 | 	add	fp, #12
287b8     A7 12 02 FB | 	rdlong	arg01, fp
287bc     08 4E 05 F1 | 	add	fp, #8
287c0     A7 14 02 F6 | 	mov	arg02, fp
287c4     0C 4E 05 F1 | 	add	fp, #12
287c8     A7 16 02 F6 | 	mov	arg03, fp
287cc     98 4E 05 F1 | 	add	fp, #152
287d0     A7 18 02 FB | 	rdlong	arg04, fp
287d4     9C 4E 85 F1 | 	sub	fp, #156
287d8     A7 1A 02 FB | 	rdlong	arg05, fp
287dc     1C 4E 85 F1 | 	sub	fp, #28
287e0     08 42 B0 FD | 	call	#__system__disassemble_0571
287e4     38 00 90 FD | 	jmp	#LR__3414
287e8                 | LR__3413
287e8     0C 4E 05 F1 | 	add	fp, #12
287ec     A7 12 02 FB | 	rdlong	arg01, fp
287f0     08 4E 05 F1 | 	add	fp, #8
287f4     A7 14 02 F6 | 	mov	arg02, fp
287f8     0C 4E 05 F1 | 	add	fp, #12
287fc     A7 16 02 F6 | 	mov	arg03, fp
28800     98 4E 05 F1 | 	add	fp, #152
28804     A7 2C 02 FB | 	rdlong	local04, fp
28808     01 2C 06 F1 | 	add	local04, #1
2880c     16 19 62 F6 | 	neg	arg04, local04
28810     9C 4E 85 F1 | 	sub	fp, #156
28814     A7 1A 02 FB | 	rdlong	arg05, fp
28818     1C 4E 85 F1 | 	sub	fp, #28
2881c     CC 41 B0 FD | 	call	#__system__disassemble_0571
28820                 | LR__3414
28820                 | LR__3415
28820     1C 4E 05 F1 | 	add	fp, #28
28824     A7 26 02 FB | 	rdlong	local01, fp
28828     1C 4E 85 F1 | 	sub	fp, #28
2882c     02 26 0E F2 | 	cmp	local01, #2 wz
28830     4C 00 90 5D |  if_ne	jmp	#LR__3418
28834     1C 4E 05 F1 | 	add	fp, #28
28838     A7 20 68 FC | 	wrlong	#16, fp
2883c     1C 4E 85 F1 | 	sub	fp, #28
28840                 | LR__3416
28840     14 4E 05 F1 | 	add	fp, #20
28844     A7 26 0A FB | 	rdlong	local01, fp wz
28848     14 4E 85 F1 | 	sub	fp, #20
2884c     30 00 90 AD |  if_e	jmp	#LR__3417
28850     14 4E 05 F1 | 	add	fp, #20
28854     A7 2A 02 FB | 	rdlong	local03, fp
28858     14 4E 85 F1 | 	sub	fp, #20
2885c     00 80 00 FF 
28860     00 2A 16 F2 | 	cmp	local03, ##16777216 wc
28864     18 00 90 3D |  if_ae	jmp	#LR__3417
28868     14 4E 05 F1 | 	add	fp, #20
2886c     A7 26 02 FB | 	rdlong	local01, fp
28870     01 26 66 F0 | 	shl	local01, #1
28874     A7 26 62 FC | 	wrlong	local01, fp
28878     14 4E 85 F1 | 	sub	fp, #20
2887c     C0 FF 9F FD | 	jmp	#LR__3416
28880                 | LR__3417
28880                 | LR__3418
28880     70 4E 05 F1 | 	add	fp, #112
28884     A7 12 02 F6 | 	mov	arg01, fp
28888     5C 4E 85 F1 | 	sub	fp, #92
2888c     A7 14 02 FB | 	rdlong	arg02, fp
28890     08 4E 05 F1 | 	add	fp, #8
28894     A7 16 02 FB | 	rdlong	arg03, fp
28898     A0 4E 05 F1 | 	add	fp, #160
2889c     A7 1A 02 FB | 	rdlong	arg05, fp
288a0     BC 4E 85 F1 | 	sub	fp, #188
288a4     01 18 06 F6 | 	mov	arg04, #1
288a8     CC 40 B0 FD | 	call	#__system___uitoa
288ac     58 4E 05 F1 | 	add	fp, #88
288b0     A7 FA 61 FC | 	wrlong	result1, fp
288b4     38 4E 85 F1 | 	sub	fp, #56
288b8     A7 26 02 FB | 	rdlong	local01, fp
288bc     20 4E 85 F1 | 	sub	fp, #32
288c0     00 26 56 F2 | 	cmps	local01, #0 wc
288c4     50 00 90 3D |  if_ae	jmp	#LR__3419
288c8     60 4E 05 F1 | 	add	fp, #96
288cc     A7 5A 68 FC | 	wrlong	#45, fp
288d0     50 4E 05 F1 | 	add	fp, #80
288d4     A7 12 02 F6 | 	mov	arg01, fp
288d8     90 4E 85 F1 | 	sub	fp, #144
288dc     A7 2A 02 FB | 	rdlong	local03, fp
288e0     15 15 62 F6 | 	neg	arg02, local03
288e4     18 4E 05 F1 | 	add	fp, #24
288e8     A7 18 02 FB | 	rdlong	arg04, fp
288ec     84 4E 05 F1 | 	add	fp, #132
288f0     A7 30 02 FB | 	rdlong	local06, fp
288f4     BC 4E 85 F1 | 	sub	fp, #188
288f8     18 2D 02 F6 | 	mov	local04, local06
288fc     0A 16 06 F6 | 	mov	arg03, #10
28900     16 1B 02 F6 | 	mov	arg05, local04
28904     70 40 B0 FD | 	call	#__system___uitoa
28908     5C 4E 05 F1 | 	add	fp, #92
2890c     A7 FA 61 FC | 	wrlong	result1, fp
28910     5C 4E 85 F1 | 	sub	fp, #92
28914     48 00 90 FD | 	jmp	#LR__3420
28918                 | LR__3419
28918     60 4E 05 F1 | 	add	fp, #96
2891c     A7 56 68 FC | 	wrlong	#43, fp
28920     50 4E 05 F1 | 	add	fp, #80
28924     A7 12 02 F6 | 	mov	arg01, fp
28928     90 4E 85 F1 | 	sub	fp, #144
2892c     A7 14 02 FB | 	rdlong	arg02, fp
28930     18 4E 05 F1 | 	add	fp, #24
28934     A7 18 02 FB | 	rdlong	arg04, fp
28938     84 4E 05 F1 | 	add	fp, #132
2893c     A7 30 02 FB | 	rdlong	local06, fp
28940     BC 4E 85 F1 | 	sub	fp, #188
28944     18 2D 02 F6 | 	mov	local04, local06
28948     0A 16 06 F6 | 	mov	arg03, #10
2894c     16 1B 02 F6 | 	mov	arg05, local04
28950     24 40 B0 FD | 	call	#__system___uitoa
28954     5C 4E 05 F1 | 	add	fp, #92
28958     A7 FA 61 FC | 	wrlong	result1, fp
2895c     5C 4E 85 F1 | 	sub	fp, #92
28960                 | LR__3420
28960     24 4E 05 F1 | 	add	fp, #36
28964     A7 26 0A FB | 	rdlong	local01, fp wz
28968     24 4E 85 F1 | 	sub	fp, #36
2896c     2C 00 90 AD |  if_e	jmp	#LR__3421
28970     50 4E 05 F1 | 	add	fp, #80
28974     A7 00 68 FC | 	wrlong	#0, fp
28978     04 4E 85 F1 | 	sub	fp, #4
2897c     A7 00 68 FC | 	wrlong	#0, fp
28980     6C 4E 05 F1 | 	add	fp, #108
28984     A7 26 02 FB | 	rdlong	local01, fp
28988     01 26 06 F1 | 	add	local01, #1
2898c     64 4E 85 F1 | 	sub	fp, #100
28990     A7 26 62 FC | 	wrlong	local01, fp
28994     54 4E 85 F1 | 	sub	fp, #84
28998     88 00 90 FD | 	jmp	#LR__3424
2899c                 | LR__3421
2899c     20 4E 05 F1 | 	add	fp, #32
289a0     A7 26 02 FB | 	rdlong	local01, fp
289a4     20 4E 85 F1 | 	sub	fp, #32
289a8     00 26 56 F2 | 	cmps	local01, #0 wc
289ac     40 00 90 3D |  if_ae	jmp	#LR__3422
289b0     20 4E 05 F1 | 	add	fp, #32
289b4     A7 28 02 FB | 	rdlong	local02, fp
289b8     30 4E 05 F1 | 	add	fp, #48
289bc     A7 28 62 FC | 	wrlong	local02, fp
289c0     04 4E 85 F1 | 	sub	fp, #4
289c4     A7 28 62 FC | 	wrlong	local02, fp
289c8     2C 4E 85 F1 | 	sub	fp, #44
289cc     A7 26 02 FB | 	rdlong	local01, fp
289d0     98 4E 05 F1 | 	add	fp, #152
289d4     A7 2A 02 FB | 	rdlong	local03, fp
289d8     15 27 02 F1 | 	add	local01, local03
289dc     01 26 06 F1 | 	add	local01, #1
289e0     64 4E 85 F1 | 	sub	fp, #100
289e4     A7 26 62 FC | 	wrlong	local01, fp
289e8     54 4E 85 F1 | 	sub	fp, #84
289ec     34 00 90 FD | 	jmp	#LR__3423
289f0                 | LR__3422
289f0     4C 4E 05 F1 | 	add	fp, #76
289f4     A7 00 68 FC | 	wrlong	#0, fp
289f8     2C 4E 85 F1 | 	sub	fp, #44
289fc     A7 26 02 FB | 	rdlong	local01, fp
28a00     30 4E 05 F1 | 	add	fp, #48
28a04     A7 26 62 FC | 	wrlong	local01, fp
28a08     68 4E 05 F1 | 	add	fp, #104
28a0c     A7 2A 02 FB | 	rdlong	local03, fp
28a10     15 27 02 F1 | 	add	local01, local03
28a14     01 26 06 F1 | 	add	local01, #1
28a18     64 4E 85 F1 | 	sub	fp, #100
28a1c     A7 26 62 FC | 	wrlong	local01, fp
28a20     54 4E 85 F1 | 	sub	fp, #84
28a24                 | LR__3423
28a24                 | LR__3424
28a24     54 4E 05 F1 | 	add	fp, #84
28a28     A7 26 02 FB | 	rdlong	local01, fp
28a2c     08 4E 85 F1 | 	sub	fp, #8
28a30     A7 2A 02 FB | 	rdlong	local03, fp
28a34     15 27 82 F1 | 	sub	local01, local03
28a38     01 26 06 F1 | 	add	local01, #1
28a3c     24 4E 85 F1 | 	sub	fp, #36
28a40     A7 26 62 FC | 	wrlong	local01, fp
28a44     04 4E 05 F1 | 	add	fp, #4
28a48     A7 26 0A FB | 	rdlong	local01, fp wz
28a4c     2C 4E 85 F1 | 	sub	fp, #44
28a50     28 4E 05 51 |  if_ne	add	fp, #40
28a54     A7 2A 02 5B |  if_ne	rdlong	local03, fp
28a58     01 2A 06 51 |  if_ne	add	local03, #1
28a5c     A7 2A 62 5C |  if_ne	wrlong	local03, fp
28a60     28 4E 85 51 |  if_ne	sub	fp, #40
28a64     1C 4E 05 F1 | 	add	fp, #28
28a68     A7 26 02 FB | 	rdlong	local01, fp
28a6c     1C 4E 85 F1 | 	sub	fp, #28
28a70     10 26 0E F2 | 	cmp	local01, #16 wz
28a74     28 4E 05 A1 |  if_e	add	fp, #40
28a78     A7 26 02 AB |  if_e	rdlong	local01, fp
28a7c     02 26 06 A1 |  if_e	add	local01, #2
28a80     A7 26 62 AC |  if_e	wrlong	local01, fp
28a84     28 4E 85 A1 |  if_e	sub	fp, #40
28a88     24 4E 05 F1 | 	add	fp, #36
28a8c     A7 26 0A FB | 	rdlong	local01, fp wz
28a90     24 4E 85 F1 | 	sub	fp, #36
28a94     28 00 90 AD |  if_e	jmp	#LR__3425
28a98     28 4E 05 F1 | 	add	fp, #40
28a9c     A7 26 02 FB | 	rdlong	local01, fp
28aa0     02 2A 06 F6 | 	mov	local03, #2
28aa4     34 4E 05 F1 | 	add	fp, #52
28aa8     A7 2E 02 FB | 	rdlong	local05, fp
28aac     17 2B 02 F1 | 	add	local03, local05
28ab0     15 27 02 F1 | 	add	local01, local03
28ab4     34 4E 85 F1 | 	sub	fp, #52
28ab8     A7 26 62 FC | 	wrlong	local01, fp
28abc     28 4E 85 F1 | 	sub	fp, #40
28ac0                 | LR__3425
28ac0     28 4E 05 F1 | 	add	fp, #40
28ac4     A7 26 02 FB | 	rdlong	local01, fp
28ac8     28 4E 85 F1 | 	sub	fp, #40
28acc     41 26 56 F2 | 	cmps	local01, #65 wc
28ad0     01 FA 65 36 |  if_ae	neg	result1, #1
28ad4     08 05 90 3D |  if_ae	jmp	#LR__3453
28ad8     3C 4E 05 F1 | 	add	fp, #60
28adc     A7 26 0A FB | 	rdlong	local01, fp wz
28ae0     3C 4E 85 F1 | 	sub	fp, #60
28ae4     60 00 90 AD |  if_e	jmp	#LR__3426
28ae8     C0 4E 05 F1 | 	add	fp, #192
28aec     A7 12 02 FB | 	rdlong	arg01, fp
28af0     94 4E 85 F1 | 	sub	fp, #148
28af4     A7 14 02 FB | 	rdlong	arg02, fp
28af8     14 4E 05 F1 | 	add	fp, #20
28afc     A7 16 02 FB | 	rdlong	arg03, fp
28b00     40 4E 85 F1 | 	sub	fp, #64
28b04     D8 40 B0 FD | 	call	#__system__emitsign_0573
28b08     18 4F 05 F1 | 	add	fp, #280
28b0c     A7 FA 61 FC | 	wrlong	result1, fp
28b10     18 4F 85 F1 | 	sub	fp, #280
28b14     00 FA 55 F2 | 	cmps	result1, #0 wc
28b18     18 4F 05 C1 |  if_b	add	fp, #280
28b1c     A7 FA 01 CB |  if_b	rdlong	result1, fp
28b20     18 4F 85 C1 |  if_b	sub	fp, #280
28b24     B8 04 90 CD |  if_b	jmp	#LR__3453
28b28     C0 4E 05 F1 | 	add	fp, #192
28b2c     A7 26 02 FB | 	rdlong	local01, fp
28b30     58 4E 05 F1 | 	add	fp, #88
28b34     A7 2A 02 FB | 	rdlong	local03, fp
28b38     15 27 02 F1 | 	add	local01, local03
28b3c     58 4E 85 F1 | 	sub	fp, #88
28b40     A7 26 62 FC | 	wrlong	local01, fp
28b44     C0 4E 85 F1 | 	sub	fp, #192
28b48                 | LR__3426
28b48     4C 4E 05 F1 | 	add	fp, #76
28b4c     A7 26 02 FB | 	rdlong	local01, fp
28b50     34 4E 85 F1 | 	sub	fp, #52
28b54     A7 26 62 FC | 	wrlong	local01, fp
28b58     18 4E 85 F1 | 	sub	fp, #24
28b5c     97 9E 48 FB | 	callpa	#(@LR__3432-@LR__3427)>>2,fcache_load_ptr_
28b60                 | LR__3427
28b60     18 4E 05 F1 | 	add	fp, #24
28b64     A7 28 02 FB | 	rdlong	local02, fp
28b68     3C 4E 05 F1 | 	add	fp, #60
28b6c     A7 2E 02 FB | 	rdlong	local05, fp
28b70     54 4E 85 F1 | 	sub	fp, #84
28b74     17 29 52 F2 | 	cmps	local02, local05 wc
28b78     20 01 90 3D |  if_ae	jmp	#LR__3433
28b7c     18 4E 05 F1 | 	add	fp, #24
28b80     A7 30 02 FB | 	rdlong	local06, fp
28b84     18 4E 85 F1 | 	sub	fp, #24
28b88     00 30 56 F2 | 	cmps	local06, #0 wc
28b8c     58 00 90 CD |  if_b	jmp	#LR__3428
28b90     18 4E 05 F1 | 	add	fp, #24
28b94     A7 30 02 FB | 	rdlong	local06, fp
28b98     40 4E 05 F1 | 	add	fp, #64
28b9c     A7 32 02 FB | 	rdlong	local07, fp
28ba0     58 4E 85 F1 | 	sub	fp, #88
28ba4     19 31 52 F2 | 	cmps	local06, local07 wc
28ba8     3C 00 90 3D |  if_ae	jmp	#LR__3428
28bac     C0 4E 05 F1 | 	add	fp, #192
28bb0     A7 34 02 FB | 	rdlong	local08, fp
28bb4     1A 33 02 F6 | 	mov	local07, local08
28bb8     01 32 06 F1 | 	add	local07, #1
28bbc     A7 32 62 FC | 	wrlong	local07, fp
28bc0     A8 4E 85 F1 | 	sub	fp, #168
28bc4     A7 32 02 FB | 	rdlong	local07, fp
28bc8     19 37 02 F6 | 	mov	local09, local07
28bcc     58 4E 05 F1 | 	add	fp, #88
28bd0     A7 38 02 F6 | 	mov	local10, fp
28bd4     A7 36 02 F1 | 	add	local09, fp
28bd8     1B 3B C2 FA | 	rdbyte	local11, local09
28bdc     1A 3B 42 FC | 	wrbyte	local11, local08
28be0     70 4E 85 F1 | 	sub	fp, #112
28be4     20 00 90 FD | 	jmp	#LR__3429
28be8                 | LR__3428
28be8     C0 4E 05 F1 | 	add	fp, #192
28bec     A7 34 02 FB | 	rdlong	local08, fp
28bf0     1A 37 02 F6 | 	mov	local09, local08
28bf4     01 36 06 F1 | 	add	local09, #1
28bf8     A7 36 62 FC | 	wrlong	local09, fp
28bfc     C0 4E 85 F1 | 	sub	fp, #192
28c00     30 36 06 F6 | 	mov	local09, #48
28c04     1A 61 48 FC | 	wrbyte	#48, local08
28c08                 | LR__3429
28c08     18 4E 05 F1 | 	add	fp, #24
28c0c     A7 30 02 FB | 	rdlong	local06, fp
28c10     38 4E 05 F1 | 	add	fp, #56
28c14     A7 3C 02 FB | 	rdlong	local12, fp
28c18     50 4E 85 F1 | 	sub	fp, #80
28c1c     1E 31 0A F2 | 	cmp	local06, local12 wz
28c20     5C 00 90 5D |  if_ne	jmp	#LR__3431
28c24     10 4F 05 F1 | 	add	fp, #272
28c28     A7 32 02 FB | 	rdlong	local07, fp
28c2c     10 4F 85 F1 | 	sub	fp, #272
28c30     19 37 0A F6 | 	mov	local09, local07 wz
28c34     28 00 90 5D |  if_ne	jmp	#LR__3430
28c38     54 4E 05 F1 | 	add	fp, #84
28c3c     A7 3A 02 FB | 	rdlong	local11, fp
28c40     1D 39 02 F6 | 	mov	local10, local11
28c44     01 38 86 F1 | 	sub	local10, #1
28c48     3C 4E 85 F1 | 	sub	fp, #60
28c4c     A7 3E 02 FB | 	rdlong	local13, fp
28c50     18 4E 85 F1 | 	sub	fp, #24
28c54     1F 41 02 F6 | 	mov	local14, local13
28c58     1C 41 52 F2 | 	cmps	local14, local10 wc
28c5c     20 00 90 3D |  if_ae	jmp	#LR__3431
28c60                 | LR__3430
28c60     C0 4E 05 F1 | 	add	fp, #192
28c64     A7 34 02 FB | 	rdlong	local08, fp
28c68     1A 3D 02 F6 | 	mov	local12, local08
28c6c     01 3C 06 F1 | 	add	local12, #1
28c70     A7 3C 62 FC | 	wrlong	local12, fp
28c74     C0 4E 85 F1 | 	sub	fp, #192
28c78     2E 36 06 F6 | 	mov	local09, #46
28c7c     1A 5D 48 FC | 	wrbyte	#46, local08
28c80                 | LR__3431
28c80     18 4E 05 F1 | 	add	fp, #24
28c84     A7 42 02 FB | 	rdlong	local15, fp
28c88     21 3D 02 F6 | 	mov	local12, local15
28c8c     01 3C 06 F1 | 	add	local12, #1
28c90     A7 3C 62 FC | 	wrlong	local12, fp
28c94     18 4E 85 F1 | 	sub	fp, #24
28c98     C4 FE 9F FD | 	jmp	#LR__3427
28c9c                 | LR__3432
28c9c                 | LR__3433
28c9c     34 4E 05 F1 | 	add	fp, #52
28ca0     A7 26 0A FB | 	rdlong	local01, fp wz
28ca4     34 4E 85 F1 | 	sub	fp, #52
28ca8     A0 00 90 AD |  if_e	jmp	#LR__3437
28cac     C0 4E 05 F1 | 	add	fp, #192
28cb0     A7 26 02 FB | 	rdlong	local01, fp
28cb4     01 26 86 F1 | 	sub	local01, #1
28cb8     A7 26 62 FC | 	wrlong	local01, fp
28cbc     C0 4E 85 F1 | 	sub	fp, #192
28cc0     97 26 48 FB | 	callpa	#(@LR__3435-@LR__3434)>>2,fcache_load_ptr_
28cc4                 | LR__3434
28cc4     C0 4E 05 F1 | 	add	fp, #192
28cc8     A7 26 02 FB | 	rdlong	local01, fp
28ccc     04 4E 05 F1 | 	add	fp, #4
28cd0     A7 2A 02 FB | 	rdlong	local03, fp
28cd4     C4 4E 85 F1 | 	sub	fp, #196
28cd8     15 27 5A F2 | 	cmps	local01, local03 wcz
28cdc     30 00 90 ED |  if_be	jmp	#LR__3436
28ce0     C0 4E 05 F1 | 	add	fp, #192
28ce4     A7 30 02 FB | 	rdlong	local06, fp
28ce8     C0 4E 85 F1 | 	sub	fp, #192
28cec     18 2D C2 FA | 	rdbyte	local04, local06
28cf0     30 2C 0E F2 | 	cmp	local04, #48 wz
28cf4     18 00 90 5D |  if_ne	jmp	#LR__3436
28cf8     C0 4E 05 F1 | 	add	fp, #192
28cfc     A7 26 02 FB | 	rdlong	local01, fp
28d00     01 26 86 F1 | 	sub	local01, #1
28d04     A7 26 62 FC | 	wrlong	local01, fp
28d08     C0 4E 85 F1 | 	sub	fp, #192
28d0c     B4 FF 9F FD | 	jmp	#LR__3434
28d10                 | LR__3435
28d10                 | LR__3436
28d10     C0 4E 05 F1 | 	add	fp, #192
28d14     A7 28 02 FB | 	rdlong	local02, fp
28d18     C0 4E 85 F1 | 	sub	fp, #192
28d1c     14 27 C2 FA | 	rdbyte	local01, local02
28d20     2E 26 0E F2 | 	cmp	local01, #46 wz
28d24     C0 4E 05 A1 |  if_e	add	fp, #192
28d28     A7 26 02 AB |  if_e	rdlong	local01, fp
28d2c     01 26 86 A1 |  if_e	sub	local01, #1
28d30     A7 26 62 AC |  if_e	wrlong	local01, fp
28d34     C0 4E 85 A1 |  if_e	sub	fp, #192
28d38     C0 4E 05 F1 | 	add	fp, #192
28d3c     A7 2A 02 FB | 	rdlong	local03, fp
28d40     01 2A 06 F1 | 	add	local03, #1
28d44     A7 2A 62 FC | 	wrlong	local03, fp
28d48     C0 4E 85 F1 | 	sub	fp, #192
28d4c                 | LR__3437
28d4c     24 4E 05 F1 | 	add	fp, #36
28d50     A7 26 0A FB | 	rdlong	local01, fp wz
28d54     24 4E 85 F1 | 	sub	fp, #36
28d58     B4 00 90 AD |  if_e	jmp	#LR__3440
28d5c     C0 4E 05 F1 | 	add	fp, #192
28d60     A7 28 02 FB | 	rdlong	local02, fp
28d64     14 2B 02 F6 | 	mov	local03, local02
28d68     01 2A 06 F1 | 	add	local03, #1
28d6c     A7 2A 62 FC | 	wrlong	local03, fp
28d70     90 4E 85 F1 | 	sub	fp, #144
28d74     A7 2C 02 FB | 	rdlong	local04, fp
28d78     14 2D 42 FC | 	wrbyte	local04, local02
28d7c     90 4E 05 F1 | 	add	fp, #144
28d80     A7 28 02 FB | 	rdlong	local02, fp
28d84     14 2B 02 F6 | 	mov	local03, local02
28d88     01 2A 06 F1 | 	add	local03, #1
28d8c     A7 2A 62 FC | 	wrlong	local03, fp
28d90     60 4E 85 F1 | 	sub	fp, #96
28d94     A7 2C 02 FB | 	rdlong	local04, fp
28d98     14 2D 42 FC | 	wrbyte	local04, local02
28d9c     48 4E 85 F1 | 	sub	fp, #72
28da0     A7 00 68 FC | 	wrlong	#0, fp
28da4     18 4E 85 F1 | 	sub	fp, #24
28da8                 | LR__3438
28da8     18 4E 05 F1 | 	add	fp, #24
28dac     A7 28 02 FB | 	rdlong	local02, fp
28db0     44 4E 05 F1 | 	add	fp, #68
28db4     A7 2E 02 FB | 	rdlong	local05, fp
28db8     5C 4E 85 F1 | 	sub	fp, #92
28dbc     17 29 52 F2 | 	cmps	local02, local05 wc
28dc0     4C 00 90 3D |  if_ae	jmp	#LR__3439
28dc4     C0 4E 05 F1 | 	add	fp, #192
28dc8     A7 34 02 FB | 	rdlong	local08, fp
28dcc     1A 3D 02 F6 | 	mov	local12, local08
28dd0     01 3C 06 F1 | 	add	local12, #1
28dd4     A7 3C 62 FC | 	wrlong	local12, fp
28dd8     A8 4E 85 F1 | 	sub	fp, #168
28ddc     A7 32 02 FB | 	rdlong	local07, fp
28de0     19 37 02 F6 | 	mov	local09, local07
28de4     98 4E 05 F1 | 	add	fp, #152
28de8     A7 38 02 F6 | 	mov	local10, fp
28dec     A7 36 02 F1 | 	add	local09, fp
28df0     1B 3B C2 FA | 	rdbyte	local11, local09
28df4     1A 3B 42 FC | 	wrbyte	local11, local08
28df8     98 4E 85 F1 | 	sub	fp, #152
28dfc     A7 3C 02 FB | 	rdlong	local12, fp
28e00     01 3C 06 F1 | 	add	local12, #1
28e04     A7 3C 62 FC | 	wrlong	local12, fp
28e08     18 4E 85 F1 | 	sub	fp, #24
28e0c     98 FF 9F FD | 	jmp	#LR__3438
28e10                 | LR__3439
28e10                 | LR__3440
28e10     C0 4E 05 F1 | 	add	fp, #192
28e14     A7 26 02 FB | 	rdlong	local01, fp
28e18     C0 4E 85 F1 | 	sub	fp, #192
28e1c     13 01 48 FC | 	wrbyte	#0, local01
28e20                 | LR__3441
28e20     6C 4E 05 F1 | 	add	fp, #108
28e24     A7 26 0A FB | 	rdlong	local01, fp wz
28e28     6C 4E 85 F1 | 	sub	fp, #108
28e2c     90 01 90 AD |  if_e	jmp	#LR__3452
28e30     48 4E 05 F1 | 	add	fp, #72
28e34     A7 2A 0A FB | 	rdlong	local03, fp wz
28e38     48 4E 85 F1 | 	sub	fp, #72
28e3c     80 01 90 AD |  if_e	jmp	#LR__3452
28e40     C4 4E 05 F1 | 	add	fp, #196
28e44     A7 12 02 FB | 	rdlong	arg01, fp
28e48     C4 4E 85 F1 | 	sub	fp, #196
28e4c     09 45 02 F6 | 	mov	local16, arg01
28e50     97 06 48 FB | 	callpa	#(@LR__3443-@LR__3442)>>2,fcache_load_ptr_
28e54                 | LR__3442
28e54     22 FB C9 FA | 	rdbyte	result1, local16 wz
28e58     01 44 06 51 |  if_ne	add	local16, #1
28e5c     F4 FF 9F 5D |  if_ne	jmp	#LR__3442
28e60                 | LR__3443
28e60     09 45 82 F1 | 	sub	local16, arg01
28e64     22 2D 02 F6 | 	mov	local04, local16
28e68     6C 4E 05 F1 | 	add	fp, #108
28e6c     A7 30 02 FB | 	rdlong	local06, fp
28e70     6C 4E 85 F1 | 	sub	fp, #108
28e74     18 2D 5A F2 | 	cmps	local04, local06 wcz
28e78     44 01 90 ED |  if_be	jmp	#LR__3452
28e7c     C4 4E 05 F1 | 	add	fp, #196
28e80     A7 26 02 FB | 	rdlong	local01, fp
28e84     5C 4E 05 F1 | 	add	fp, #92
28e88     A7 26 62 FC | 	wrlong	local01, fp
28e8c     FC 4E 85 F1 | 	sub	fp, #252
28e90     A7 26 0A FB | 	rdlong	local01, fp wz
28e94     24 4E 85 F1 | 	sub	fp, #36
28e98     20 00 90 AD |  if_e	jmp	#LR__3444
28e9c     B8 4E 05 F1 | 	add	fp, #184
28ea0     A7 00 68 FC | 	wrlong	#0, fp
28ea4     4C 4E 85 F1 | 	sub	fp, #76
28ea8     A7 26 02 FB | 	rdlong	local01, fp
28eac     B0 4E 05 F1 | 	add	fp, #176
28eb0     A7 26 62 FC | 	wrlong	local01, fp
28eb4     1C 4F 85 F1 | 	sub	fp, #284
28eb8     24 00 90 FD | 	jmp	#LR__3445
28ebc                 | LR__3444
28ebc     6C 4E 05 F1 | 	add	fp, #108
28ec0     A7 26 02 FB | 	rdlong	local01, fp
28ec4     01 26 86 F1 | 	sub	local01, #1
28ec8     4C 4E 05 F1 | 	add	fp, #76
28ecc     A7 2A 02 FB | 	rdlong	local03, fp
28ed0     15 27 82 F1 | 	sub	local01, local03
28ed4     64 4E 05 F1 | 	add	fp, #100
28ed8     A7 26 62 FC | 	wrlong	local01, fp
28edc     1C 4F 85 F1 | 	sub	fp, #284
28ee0                 | LR__3445
28ee0     97 20 48 FB | 	callpa	#(@LR__3447-@LR__3446)>>2,fcache_load_ptr_
28ee4                 | LR__3446
28ee4     1C 4F 05 F1 | 	add	fp, #284
28ee8     A7 26 0A FB | 	rdlong	local01, fp wz
28eec     1C 4F 85 F1 | 	sub	fp, #284
28ef0     30 00 90 AD |  if_e	jmp	#LR__3448
28ef4     20 4F 05 F1 | 	add	fp, #288
28ef8     A7 28 02 FB | 	rdlong	local02, fp
28efc     14 2B 02 F6 | 	mov	local03, local02
28f00     01 2A 06 F1 | 	add	local03, #1
28f04     A7 2A 62 FC | 	wrlong	local03, fp
28f08     14 55 48 FC | 	wrbyte	#42, local02
28f0c     04 4E 85 F1 | 	sub	fp, #4
28f10     A7 26 02 FB | 	rdlong	local01, fp
28f14     01 26 86 F1 | 	sub	local01, #1
28f18     A7 26 62 FC | 	wrlong	local01, fp
28f1c     1C 4F 85 F1 | 	sub	fp, #284
28f20     C0 FF 9F FD | 	jmp	#LR__3446
28f24                 | LR__3447
28f24                 | LR__3448
28f24     B8 4E 05 F1 | 	add	fp, #184
28f28     A7 26 0A FB | 	rdlong	local01, fp wz
28f2c     B8 4E 85 F1 | 	sub	fp, #184
28f30     70 00 90 AD |  if_e	jmp	#LR__3451
28f34     20 4F 05 F1 | 	add	fp, #288
28f38     A7 28 02 FB | 	rdlong	local02, fp
28f3c     14 2B 02 F6 | 	mov	local03, local02
28f40     01 2A 06 F1 | 	add	local03, #1
28f44     A7 2A 62 FC | 	wrlong	local03, fp
28f48     14 5D 48 FC | 	wrbyte	#46, local02
28f4c     04 4E 85 F1 | 	sub	fp, #4
28f50     A7 00 68 FC | 	wrlong	#0, fp
28f54     1C 4F 85 F1 | 	sub	fp, #284
28f58                 | LR__3449
28f58     1C 4F 05 F1 | 	add	fp, #284
28f5c     A7 28 02 FB | 	rdlong	local02, fp
28f60     64 4E 85 F1 | 	sub	fp, #100
28f64     A7 2E 02 FB | 	rdlong	local05, fp
28f68     B8 4E 85 F1 | 	sub	fp, #184
28f6c     17 29 52 F2 | 	cmps	local02, local05 wc
28f70     30 00 90 3D |  if_ae	jmp	#LR__3450
28f74     20 4F 05 F1 | 	add	fp, #288
28f78     A7 34 02 FB | 	rdlong	local08, fp
28f7c     1A 3D 02 F6 | 	mov	local12, local08
28f80     01 3C 06 F1 | 	add	local12, #1
28f84     A7 3C 62 FC | 	wrlong	local12, fp
28f88     1A 55 48 FC | 	wrbyte	#42, local08
28f8c     04 4E 85 F1 | 	sub	fp, #4
28f90     A7 3C 02 FB | 	rdlong	local12, fp
28f94     01 3C 06 F1 | 	add	local12, #1
28f98     A7 3C 62 FC | 	wrlong	local12, fp
28f9c     1C 4F 85 F1 | 	sub	fp, #284
28fa0     B4 FF 9F FD | 	jmp	#LR__3449
28fa4                 | LR__3450
28fa4                 | LR__3451
28fa4     20 4F 05 F1 | 	add	fp, #288
28fa8     A7 28 02 FB | 	rdlong	local02, fp
28fac     14 2B 02 F6 | 	mov	local03, local02
28fb0     01 2A 06 F1 | 	add	local03, #1
28fb4     A7 2A 62 FC | 	wrlong	local03, fp
28fb8     20 4F 85 F1 | 	sub	fp, #288
28fbc     14 01 48 FC | 	wrbyte	#0, local02
28fc0                 | LR__3452
28fc0     04 4E 05 F1 | 	add	fp, #4
28fc4     A7 12 02 FB | 	rdlong	arg01, fp
28fc8     04 4E 05 F1 | 	add	fp, #4
28fcc     A7 14 02 FB | 	rdlong	arg02, fp
28fd0     BC 4E 05 F1 | 	add	fp, #188
28fd4     A7 16 02 FB | 	rdlong	arg03, fp
28fd8     C4 4E 85 F1 | 	sub	fp, #196
28fdc     C4 EE BF FD | 	call	#__system___fmtstr
28fe0                 | LR__3453
28fe0     A7 F0 03 F6 | 	mov	ptra, fp
28fe4     B2 00 A0 FD | 	call	#popregs_
28fe8                 | __system___fmtfloat_ret
28fe8     2D 00 64 FD | 	ret
28fec                 | 
28fec                 | __system__Left_S
28fec     04 4A 05 F6 | 	mov	COUNT_, #4
28ff0     A8 00 A0 FD | 	call	#pushregs_
28ff4     09 27 02 F6 | 	mov	local01, arg01
28ff8     0A 29 02 F6 | 	mov	local02, arg02
28ffc     01 28 56 F2 | 	cmps	local02, #1 wc
29000     B5 01 00 CF 
29004     82 FA 05 C6 |  if_b	mov	result1, ##@LR__5403
29008     5C 00 90 CD |  if_b	jmp	#LR__3463
2900c     13 13 02 F6 | 	mov	arg01, local01
29010     09 2B 02 F6 | 	mov	local03, arg01
29014     97 06 48 FB | 	callpa	#(@LR__3461-@LR__3460)>>2,fcache_load_ptr_
29018                 | LR__3460
29018     15 FB C9 FA | 	rdbyte	result1, local03 wz
2901c     01 2A 06 51 |  if_ne	add	local03, #1
29020     F4 FF 9F 5D |  if_ne	jmp	#LR__3460
29024                 | LR__3461
29024     09 2B 82 F1 | 	sub	local03, arg01
29028     15 FB 01 F6 | 	mov	result1, local03
2902c     14 FB 59 F2 | 	cmps	result1, local02 wcz
29030     13 FB 01 E6 |  if_be	mov	result1, local01
29034     30 00 90 ED |  if_be	jmp	#LR__3463
29038     14 13 02 F6 | 	mov	arg01, local02
2903c     02 12 06 F1 | 	add	arg01, #2
29040     CC 20 B0 FD | 	call	#__system___gc_alloc_managed
29044     FD 2C 0A F6 | 	mov	local04, result1 wz
29048     18 00 90 AD |  if_e	jmp	#LR__3462
2904c     16 13 02 F6 | 	mov	arg01, local04
29050     13 15 02 F6 | 	mov	arg02, local01
29054     14 17 02 F6 | 	mov	arg03, local02
29058     34 DE BF FD | 	call	#__system____builtin_memmove
2905c     16 29 02 F1 | 	add	local02, local04
29060     14 01 48 FC | 	wrbyte	#0, local02
29064                 | LR__3462
29064     16 FB 01 F6 | 	mov	result1, local04
29068                 | LR__3463
29068     A7 F0 03 F6 | 	mov	ptra, fp
2906c     B2 00 A0 FD | 	call	#popregs_
29070                 | __system__Left_S_ret
29070     2D 00 64 FD | 	ret
29074                 | 
29074                 | __system__Right_S
29074     05 4A 05 F6 | 	mov	COUNT_, #5
29078     A8 00 A0 FD | 	call	#pushregs_
2907c     09 27 02 F6 | 	mov	local01, arg01
29080     0A 29 02 F6 | 	mov	local02, arg02
29084     01 28 56 F2 | 	cmps	local02, #1 wc
29088     B5 01 00 CF 
2908c     83 FA 05 C6 |  if_b	mov	result1, ##@LR__5404
29090     64 00 90 CD |  if_b	jmp	#LR__3473
29094     13 13 02 F6 | 	mov	arg01, local01
29098     09 2B 02 F6 | 	mov	local03, arg01
2909c     97 06 48 FB | 	callpa	#(@LR__3471-@LR__3470)>>2,fcache_load_ptr_
290a0                 | LR__3470
290a0     15 FB C9 FA | 	rdbyte	result1, local03 wz
290a4     01 2A 06 51 |  if_ne	add	local03, #1
290a8     F4 FF 9F 5D |  if_ne	jmp	#LR__3470
290ac                 | LR__3471
290ac     09 2B 82 F1 | 	sub	local03, arg01
290b0     15 FB 01 F6 | 	mov	result1, local03
290b4     FD 2C 02 F6 | 	mov	local04, result1
290b8     14 2D 5A F2 | 	cmps	local04, local02 wcz
290bc     13 FB 01 E6 |  if_be	mov	result1, local01
290c0     34 00 90 ED |  if_be	jmp	#LR__3473
290c4     14 13 02 F6 | 	mov	arg01, local02
290c8     02 12 06 F1 | 	add	arg01, #2
290cc     40 20 B0 FD | 	call	#__system___gc_alloc_managed
290d0     FD 2E 0A F6 | 	mov	local05, result1 wz
290d4     1C 00 90 AD |  if_e	jmp	#LR__3472
290d8     14 2D 82 F1 | 	sub	local04, local02
290dc     13 2D 02 F1 | 	add	local04, local01
290e0     01 28 06 F1 | 	add	local02, #1
290e4     17 13 02 F6 | 	mov	arg01, local05
290e8     16 15 02 F6 | 	mov	arg02, local04
290ec     14 17 02 F6 | 	mov	arg03, local02
290f0     9C DD BF FD | 	call	#__system____builtin_memmove
290f4                 | LR__3472
290f4     17 FB 01 F6 | 	mov	result1, local05
290f8                 | LR__3473
290f8     A7 F0 03 F6 | 	mov	ptra, fp
290fc     B2 00 A0 FD | 	call	#popregs_
29100                 | __system__Right_S_ret
29100     2D 00 64 FD | 	ret
29104                 | 
29104                 | __system__Mid_S
29104     05 4A 05 F6 | 	mov	COUNT_, #5
29108     A8 00 A0 FD | 	call	#pushregs_
2910c     09 27 02 F6 | 	mov	local01, arg01
29110     0A 29 02 F6 | 	mov	local02, arg02
29114     01 16 56 F2 | 	cmps	arg03, #1 wc
29118     B5 01 00 CF 
2911c     84 FA 05 C6 |  if_b	mov	result1, ##@LR__5405
29120     80 00 90 CD |  if_b	jmp	#LR__3483
29124     01 28 86 F1 | 	sub	local02, #1
29128     00 28 56 F3 | 	fges	local02, #0 wc
2912c     13 13 02 F6 | 	mov	arg01, local01
29130     09 2B 02 F6 | 	mov	local03, arg01
29134     97 06 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
29138                 | LR__3480
29138     15 FB C9 FA | 	rdbyte	result1, local03 wz
2913c     01 2A 06 51 |  if_ne	add	local03, #1
29140     F4 FF 9F 5D |  if_ne	jmp	#LR__3480
29144                 | LR__3481
29144     09 2B 82 F1 | 	sub	local03, arg01
29148     15 FB 01 F6 | 	mov	result1, local03
2914c     FD 14 02 F6 | 	mov	arg02, result1
29150     14 15 52 F2 | 	cmps	arg02, local02 wc
29154     B5 01 00 CF 
29158     85 FA 05 C6 |  if_b	mov	result1, ##@LR__5406
2915c     44 00 90 CD |  if_b	jmp	#LR__3483
29160     0A 2D 02 F6 | 	mov	local04, arg02
29164     14 2D 82 F1 | 	sub	local04, local02
29168     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
2916c     0B 2D 02 16 |  if_a	mov	local04, arg03
29170     16 13 02 F6 | 	mov	arg01, local04
29174     02 12 06 F1 | 	add	arg01, #2
29178     94 1F B0 FD | 	call	#__system___gc_alloc_managed
2917c     FD 2E 0A F6 | 	mov	local05, result1 wz
29180     1C 00 90 AD |  if_e	jmp	#LR__3482
29184     13 29 02 F1 | 	add	local02, local01
29188     17 13 02 F6 | 	mov	arg01, local05
2918c     14 15 02 F6 | 	mov	arg02, local02
29190     16 17 02 F6 | 	mov	arg03, local04
29194     F8 DC BF FD | 	call	#__system____builtin_memmove
29198     17 2D 02 F1 | 	add	local04, local05
2919c     16 01 48 FC | 	wrbyte	#0, local04
291a0                 | LR__3482
291a0     17 FB 01 F6 | 	mov	result1, local05
291a4                 | LR__3483
291a4     A7 F0 03 F6 | 	mov	ptra, fp
291a8     B2 00 A0 FD | 	call	#popregs_
291ac                 | __system__Mid_S_ret
291ac     2D 00 64 FD | 	ret
291b0                 | 
291b0                 | __system__Chr_S
291b0     01 4A 05 F6 | 	mov	COUNT_, #1
291b4     A8 00 A0 FD | 	call	#pushregs_
291b8     09 27 02 F6 | 	mov	local01, arg01
291bc     03 12 06 F6 | 	mov	arg01, #3
291c0     4C 1F B0 FD | 	call	#__system___gc_alloc_managed
291c4     00 FA 4D F2 | 	cmps	result1, #0 wz
291c8     FD 26 42 5C |  if_ne	wrbyte	local01, result1
291cc     01 FA 05 51 |  if_ne	add	result1, #1
291d0     FD 00 48 5C |  if_ne	wrbyte	#0, result1
291d4     01 FA 85 51 |  if_ne	sub	result1, #1
291d8     A7 F0 03 F6 | 	mov	ptra, fp
291dc     B2 00 A0 FD | 	call	#popregs_
291e0                 | __system__Chr_S_ret
291e0     2D 00 64 FD | 	ret
291e4                 | 
291e4                 | __system__str_S
291e4     02 4A 05 F6 | 	mov	COUNT_, #2
291e8     A8 00 A0 FD | 	call	#pushregs_
291ec     09 27 02 F6 | 	mov	local01, arg01
291f0     10 12 06 F6 | 	mov	arg01, #16
291f4     18 1F B0 FD | 	call	#__system___gc_alloc_managed
291f8     FD 28 0A F6 | 	mov	local02, result1 wz
291fc     30 00 90 AD |  if_e	jmp	#LR__3490
29200     F8 13 02 F6 | 	mov	arg01, ptra
29204     08 F0 07 F1 | 	add	ptra, #8
29208     09 29 62 FC | 	wrlong	local02, arg01
2920c     04 12 06 F1 | 	add	arg01, #4
29210     09 01 68 FC | 	wrlong	#0, arg01
29214     04 12 86 F1 | 	sub	arg01, #4
29218     00 58 05 FF 
2921c     00 12 46 F5 | 	or	arg01, ##179306496
29220     00 14 06 F6 | 	mov	arg02, #0
29224     13 17 02 F6 | 	mov	arg03, local01
29228     67 18 06 F6 | 	mov	arg04, #103
2922c     90 EE BF FD | 	call	#__system___fmtfloat
29230                 | LR__3490
29230     14 FB 01 F6 | 	mov	result1, local02
29234     A7 F0 03 F6 | 	mov	ptra, fp
29238     B2 00 A0 FD | 	call	#popregs_
2923c                 | __system__str_S_ret
2923c     2D 00 64 FD | 	ret
29240                 | 
29240                 | __system__Number_S
29240     08 4A 05 F6 | 	mov	COUNT_, #8
29244     A8 00 A0 FD | 	call	#pushregs_
29248     09 27 02 F6 | 	mov	local01, arg01
2924c     0A 29 0A F6 | 	mov	local02, arg02 wz
29250     0B 2B 02 F6 | 	mov	local03, arg03
29254     3C 00 90 5D |  if_ne	jmp	#LR__3502
29258     01 28 06 F6 | 	mov	local02, #1
2925c     15 2D 02 F6 | 	mov	local04, local03
29260     01 2E 06 F6 | 	mov	local05, #1
29264     97 16 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
29268                 | LR__3500
29268     00 30 06 F6 | 	mov	local06, #0
2926c     13 2D 1A F2 | 	cmp	local04, local01 wcz
29270     01 30 66 E6 |  if_be	neg	local06, #1
29274     16 2F 12 F2 | 	cmp	local05, local04 wc
29278     19 33 A2 F1 | 	subx	local07, local07
2927c     19 31 CA F7 | 	test	local06, local07 wz
29280     15 2D 02 5D |  if_ne	qmul	local04, local03
29284     16 2F 02 56 |  if_ne	mov	local05, local04
29288     01 28 06 51 |  if_ne	add	local02, #1
2928c     18 2C 62 5D |  if_ne	getqx	local04
29290     D4 FF 9F 5D |  if_ne	jmp	#LR__3500
29294                 | LR__3501
29294                 | LR__3502
29294     20 28 36 F3 | 	fle	local02, #32 wc
29298     14 13 02 F6 | 	mov	arg01, local02
2929c     02 12 06 F1 | 	add	arg01, #2
292a0     6C 1E B0 FD | 	call	#__system___gc_alloc_managed
292a4     FD 30 02 F6 | 	mov	local06, result1
292a8     14 33 02 F6 | 	mov	local07, local02
292ac     18 33 02 F1 | 	add	local07, local06
292b0     19 01 48 FC | 	wrbyte	#0, local07
292b4     97 1A 48 FB | 	callpa	#(@LR__3504-@LR__3503)>>2,fcache_load_ptr_
292b8                 | LR__3503
292b8     01 28 16 F2 | 	cmp	local02, #1 wc
292bc     2C 00 90 CD |  if_b	jmp	#LR__3505
292c0     15 27 12 FD | 	qdiv	local01, local03
292c4     01 28 86 F1 | 	sub	local02, #1
292c8     14 33 02 F6 | 	mov	local07, local02
292cc     18 33 02 F1 | 	add	local07, local06
292d0     19 34 62 FD | 	getqy	local08
292d4     0A 34 16 F2 | 	cmp	local08, #10 wc
292d8     30 34 06 C1 |  if_b	add	local08, #48
292dc     37 34 06 31 |  if_ae	add	local08, #55
292e0     19 35 42 FC | 	wrbyte	local08, local07
292e4     18 26 62 FD | 	getqx	local01
292e8     CC FF 9F FD | 	jmp	#LR__3503
292ec                 | LR__3504
292ec                 | LR__3505
292ec     18 FB 01 F6 | 	mov	result1, local06
292f0     A7 F0 03 F6 | 	mov	ptra, fp
292f4     B2 00 A0 FD | 	call	#popregs_
292f8                 | __system__Number_S_ret
292f8     2D 00 64 FD | 	ret
292fc                 | 
292fc                 | __system__LCase_S
292fc     07 4A 05 F6 | 	mov	COUNT_, #7
29300     A8 00 A0 FD | 	call	#pushregs_
29304     09 27 02 F6 | 	mov	local01, arg01
29308     09 29 02 F6 | 	mov	local02, arg01
2930c     97 06 48 FB | 	callpa	#(@LR__3511-@LR__3510)>>2,fcache_load_ptr_
29310                 | LR__3510
29310     14 FB C9 FA | 	rdbyte	result1, local02 wz
29314     01 28 06 51 |  if_ne	add	local02, #1
29318     F4 FF 9F 5D |  if_ne	jmp	#LR__3510
2931c                 | LR__3511
2931c     09 29 82 F1 | 	sub	local02, arg01
29320     14 FB 01 F6 | 	mov	result1, local02
29324     FD 28 0A F6 | 	mov	local02, result1 wz
29328     B5 01 00 AF 
2932c     86 FA 05 A6 |  if_e	mov	result1, ##@LR__5407
29330     7C 00 90 AD |  if_e	jmp	#LR__3517
29334     14 13 02 F6 | 	mov	arg01, local02
29338     02 12 06 F1 | 	add	arg01, #2
2933c     D0 1D B0 FD | 	call	#__system___gc_alloc_managed
29340     FD 2A 0A F6 | 	mov	local03, result1 wz
29344     64 00 90 AD |  if_e	jmp	#LR__3516
29348     01 2C 66 F6 | 	neg	local04, #1
2934c     97 26 48 FB | 	callpa	#(@LR__3515-@LR__3512)>>2,fcache_load_ptr_
29350                 | LR__3512
29350     01 2C 06 F1 | 	add	local04, #1
29354     16 2F 02 F6 | 	mov	local05, local04
29358     13 2F 02 F1 | 	add	local05, local01
2935c     17 31 C2 FA | 	rdbyte	local06, local05
29360     41 30 56 F2 | 	cmps	local06, #65 wc
29364     18 00 90 CD |  if_b	jmp	#LR__3513
29368     5B 30 56 F2 | 	cmps	local06, #91 wc
2936c     16 33 02 C6 |  if_b	mov	local07, local04
29370     15 33 02 C1 |  if_b	add	local07, local03
29374     20 30 06 C1 |  if_b	add	local06, #32
29378     19 31 42 CC |  if_b	wrbyte	local06, local07
2937c     0C 00 90 CD |  if_b	jmp	#LR__3514
29380                 | LR__3513
29380     16 33 02 F6 | 	mov	local07, local04
29384     15 33 02 F1 | 	add	local07, local03
29388     19 31 42 FC | 	wrbyte	local06, local07
2938c                 | LR__3514
2938c     14 31 02 F6 | 	mov	local06, local02
29390     01 30 86 F1 | 	sub	local06, #1
29394     18 2D 0A F2 | 	cmp	local04, local06 wz
29398     B4 FF 9F 5D |  if_ne	jmp	#LR__3512
2939c                 | LR__3515
2939c     15 29 02 F1 | 	add	local02, local03
293a0     14 01 48 FC | 	wrbyte	#0, local02
293a4     15 FB 01 F6 | 	mov	result1, local03
293a8     04 00 90 FD | 	jmp	#LR__3517
293ac                 | LR__3516
293ac     15 FB 01 F6 | 	mov	result1, local03
293b0                 | LR__3517
293b0     A7 F0 03 F6 | 	mov	ptra, fp
293b4     B2 00 A0 FD | 	call	#popregs_
293b8                 | __system__LCase_S_ret
293b8     2D 00 64 FD | 	ret
293bc                 | 
293bc                 | __system__LTrim_S
293bc     05 4A 05 F6 | 	mov	COUNT_, #5
293c0     A8 00 A0 FD | 	call	#pushregs_
293c4     09 27 02 F6 | 	mov	local01, arg01
293c8     09 29 02 F6 | 	mov	local02, arg01
293cc     97 06 48 FB | 	callpa	#(@LR__3521-@LR__3520)>>2,fcache_load_ptr_
293d0                 | LR__3520
293d0     14 FB C9 FA | 	rdbyte	result1, local02 wz
293d4     01 28 06 51 |  if_ne	add	local02, #1
293d8     F4 FF 9F 5D |  if_ne	jmp	#LR__3520
293dc                 | LR__3521
293dc     09 29 82 F1 | 	sub	local02, arg01
293e0     14 FB 01 F6 | 	mov	result1, local02
293e4     FD 28 0A F6 | 	mov	local02, result1 wz
293e8     B5 01 00 AF 
293ec     87 FA 05 A6 |  if_e	mov	result1, ##@LR__5408
293f0     7C 00 90 AD |  if_e	jmp	#LR__3526
293f4     00 2A 06 F6 | 	mov	local03, #0
293f8     14 2D 02 F6 | 	mov	local04, local02
293fc                 | LR__3522
293fc     16 2B 52 F2 | 	cmps	local03, local04 wc
29400     68 00 90 3D |  if_ae	jmp	#LR__3525
29404     15 17 02 F6 | 	mov	arg03, local03
29408     13 17 02 F1 | 	add	arg03, local01
2940c     0B 17 C2 FA | 	rdbyte	arg03, arg03
29410     20 16 0E F2 | 	cmp	arg03, #32 wz
29414     4C 00 90 AD |  if_e	jmp	#LR__3524
29418     14 13 02 F6 | 	mov	arg01, local02
2941c     15 13 82 F1 | 	sub	arg01, local03
29420     02 12 06 F1 | 	add	arg01, #2
29424     E8 1C B0 FD | 	call	#__system___gc_alloc_managed
29428     FD 2E 0A F6 | 	mov	local05, result1 wz
2942c     2C 00 90 AD |  if_e	jmp	#LR__3523
29430     15 15 02 F6 | 	mov	arg02, local03
29434     13 15 02 F1 | 	add	arg02, local01
29438     14 17 02 F6 | 	mov	arg03, local02
2943c     15 17 82 F1 | 	sub	arg03, local03
29440     17 13 02 F6 | 	mov	arg01, local05
29444     48 DA BF FD | 	call	#__system____builtin_memmove
29448     15 29 82 F1 | 	sub	local02, local03
2944c     17 29 02 F1 | 	add	local02, local05
29450     14 01 48 FC | 	wrbyte	#0, local02
29454     17 FB 01 F6 | 	mov	result1, local05
29458     14 00 90 FD | 	jmp	#LR__3526
2945c                 | LR__3523
2945c     17 FB 01 F6 | 	mov	result1, local05
29460     0C 00 90 FD | 	jmp	#LR__3526
29464                 | LR__3524
29464     01 2A 06 F1 | 	add	local03, #1
29468     90 FF 9F FD | 	jmp	#LR__3522
2946c                 | LR__3525
2946c     13 FB 01 F6 | 	mov	result1, local01
29470                 | LR__3526
29470     A7 F0 03 F6 | 	mov	ptra, fp
29474     B2 00 A0 FD | 	call	#popregs_
29478                 | __system__LTrim_S_ret
29478     2D 00 64 FD | 	ret
2947c                 | 
2947c                 | __system__RTrim_S
2947c     04 4A 05 F6 | 	mov	COUNT_, #4
29480     A8 00 A0 FD | 	call	#pushregs_
29484     09 27 02 F6 | 	mov	local01, arg01
29488     09 29 02 F6 | 	mov	local02, arg01
2948c     97 06 48 FB | 	callpa	#(@LR__3531-@LR__3530)>>2,fcache_load_ptr_
29490                 | LR__3530
29490     14 FB C9 FA | 	rdbyte	result1, local02 wz
29494     01 28 06 51 |  if_ne	add	local02, #1
29498     F4 FF 9F 5D |  if_ne	jmp	#LR__3530
2949c                 | LR__3531
2949c     09 29 82 F1 | 	sub	local02, arg01
294a0     14 FB 01 F6 | 	mov	result1, local02
294a4     FD 28 0A F6 | 	mov	local02, result1 wz
294a8     B5 01 00 AF 
294ac     88 FA 05 A6 |  if_e	mov	result1, ##@LR__5409
294b0     74 00 90 AD |  if_e	jmp	#LR__3535
294b4     14 2B 02 F6 | 	mov	local03, local02
294b8     01 2A 86 F1 | 	sub	local03, #1
294bc                 | LR__3532
294bc     15 15 02 F6 | 	mov	arg02, local03
294c0     13 15 02 F1 | 	add	arg02, local01
294c4     0A 29 C2 FA | 	rdbyte	local02, arg02
294c8     20 28 0E F2 | 	cmp	local02, #32 wz
294cc     44 00 90 AD |  if_e	jmp	#LR__3534
294d0     15 13 02 F6 | 	mov	arg01, local03
294d4     02 12 06 F1 | 	add	arg01, #2
294d8     34 1C B0 FD | 	call	#__system___gc_alloc_managed
294dc     FD 2C 0A F6 | 	mov	local04, result1 wz
294e0     28 00 90 AD |  if_e	jmp	#LR__3533
294e4     15 17 02 F6 | 	mov	arg03, local03
294e8     01 16 06 F1 | 	add	arg03, #1
294ec     16 13 02 F6 | 	mov	arg01, local04
294f0     13 15 02 F6 | 	mov	arg02, local01
294f4     98 D9 BF FD | 	call	#__system____builtin_memmove
294f8     01 2A 06 F1 | 	add	local03, #1
294fc     16 2B 02 F1 | 	add	local03, local04
29500     15 01 48 FC | 	wrbyte	#0, local03
29504     16 FB 01 F6 | 	mov	result1, local04
29508     1C 00 90 FD | 	jmp	#LR__3535
2950c                 | LR__3533
2950c     16 FB 01 F6 | 	mov	result1, local04
29510     14 00 90 FD | 	jmp	#LR__3535
29514                 | LR__3534
29514     01 2A 86 F1 | 	sub	local03, #1
29518     00 2A 56 F2 | 	cmps	local03, #0 wc
2951c     9C FF 9F 3D |  if_ae	jmp	#LR__3532
29520     B5 01 00 FF 
29524     89 FA 05 F6 | 	mov	result1, ##@LR__5410
29528                 | LR__3535
29528     A7 F0 03 F6 | 	mov	ptra, fp
2952c     B2 00 A0 FD | 	call	#popregs_
29530                 | __system__RTrim_S_ret
29530     2D 00 64 FD | 	ret
29534                 | 
29534                 | __system__Instr
29534     07 4A 05 F6 | 	mov	COUNT_, #7
29538     A8 00 A0 FD | 	call	#pushregs_
2953c     09 27 02 F6 | 	mov	local01, arg01
29540     0A 29 02 F6 | 	mov	local02, arg02
29544     0B 2B 02 F6 | 	mov	local03, arg03
29548     15 13 02 F6 | 	mov	arg01, local03
2954c     09 2D 02 F6 | 	mov	local04, arg01
29550     97 06 48 FB | 	callpa	#(@LR__3541-@LR__3540)>>2,fcache_load_ptr_
29554                 | LR__3540
29554     16 FB C9 FA | 	rdbyte	result1, local04 wz
29558     01 2C 06 51 |  if_ne	add	local04, #1
2955c     F4 FF 9F 5D |  if_ne	jmp	#LR__3540
29560                 | LR__3541
29560     09 2D 82 F1 | 	sub	local04, arg01
29564     16 2F 02 F6 | 	mov	local05, local04
29568     14 13 02 F6 | 	mov	arg01, local02
2956c     09 2D 02 F6 | 	mov	local04, arg01
29570     97 06 48 FB | 	callpa	#(@LR__3543-@LR__3542)>>2,fcache_load_ptr_
29574                 | LR__3542
29574     16 FB C9 FA | 	rdbyte	result1, local04 wz
29578     01 2C 06 51 |  if_ne	add	local04, #1
2957c     F4 FF 9F 5D |  if_ne	jmp	#LR__3542
29580                 | LR__3543
29580     09 2D 82 F1 | 	sub	local04, arg01
29584     16 FB 01 F6 | 	mov	result1, local04
29588     FD 18 0A F6 | 	mov	arg04, result1 wz
2958c     00 FA 05 A6 |  if_e	mov	result1, #0
29590     98 00 90 AD |  if_e	jmp	#LR__3547
29594     00 2E 0E F2 | 	cmp	local05, #0 wz
29598     00 FA 05 A6 |  if_e	mov	result1, #0
2959c     8C 00 90 AD |  if_e	jmp	#LR__3547
295a0     0C 27 5A F2 | 	cmps	local01, arg04 wcz
295a4     00 FA 05 16 |  if_a	mov	result1, #0
295a8     80 00 90 1D |  if_a	jmp	#LR__3547
295ac     01 26 56 F2 | 	cmps	local01, #1 wc
295b0     01 26 06 C6 |  if_b	mov	local01, #1
295b4     15 31 C2 FA | 	rdbyte	local06, local03
295b8     01 2E 0E F2 | 	cmp	local05, #1 wz
295bc     18 00 90 5D |  if_ne	jmp	#LR__3544
295c0     14 13 02 F6 | 	mov	arg01, local02
295c4     18 15 02 F6 | 	mov	arg02, local06
295c8     13 17 02 F6 | 	mov	arg03, local01
295cc     00 18 06 F6 | 	mov	arg04, #0
295d0     14 37 B0 FD | 	call	#__system____ScanForChar
295d4     54 00 90 FD | 	jmp	#LR__3547
295d8                 | LR__3544
295d8     13 33 02 F6 | 	mov	local07, local01
295dc                 | LR__3545
295dc     14 13 02 F6 | 	mov	arg01, local02
295e0     18 15 02 F6 | 	mov	arg02, local06
295e4     19 17 02 F6 | 	mov	arg03, local07
295e8     00 18 06 F6 | 	mov	arg04, #0
295ec     F8 36 B0 FD | 	call	#__system____ScanForChar
295f0     FD 32 0A F6 | 	mov	local07, result1 wz
295f4     30 00 90 AD |  if_e	jmp	#LR__3546
295f8     17 17 02 F6 | 	mov	arg03, local05
295fc     14 13 02 F6 | 	mov	arg01, local02
29600     19 15 02 F6 | 	mov	arg02, local07
29604     FC FA BF FD | 	call	#__system__Mid_S
29608     FD 12 02 F6 | 	mov	arg01, result1
2960c     15 15 02 F6 | 	mov	arg02, local03
29610     84 D9 BF FD | 	call	#__system___string_cmp
29614     00 FA 0D F2 | 	cmp	result1, #0 wz
29618     19 FB 01 A6 |  if_e	mov	result1, local07
2961c     0C 00 90 AD |  if_e	jmp	#LR__3547
29620     17 33 02 F1 | 	add	local07, local05
29624     B4 FF 9F FD | 	jmp	#LR__3545
29628                 | LR__3546
29628     00 FA 05 F6 | 	mov	result1, #0
2962c                 | LR__3547
2962c     A7 F0 03 F6 | 	mov	ptra, fp
29630     B2 00 A0 FD | 	call	#popregs_
29634                 | __system__Instr_ret
29634     2D 00 64 FD | 	ret
29638                 | 
29638                 | __system__InstrRev
29638     07 4A 05 F6 | 	mov	COUNT_, #7
2963c     A8 00 A0 FD | 	call	#pushregs_
29640     09 27 02 F6 | 	mov	local01, arg01
29644     0A 29 02 F6 | 	mov	local02, arg02
29648     0B 2B 02 F6 | 	mov	local03, arg03
2964c     15 13 02 F6 | 	mov	arg01, local03
29650     09 2D 02 F6 | 	mov	local04, arg01
29654     97 06 48 FB | 	callpa	#(@LR__3551-@LR__3550)>>2,fcache_load_ptr_
29658                 | LR__3550
29658     16 FB C9 FA | 	rdbyte	result1, local04 wz
2965c     01 2C 06 51 |  if_ne	add	local04, #1
29660     F4 FF 9F 5D |  if_ne	jmp	#LR__3550
29664                 | LR__3551
29664     09 2D 82 F1 | 	sub	local04, arg01
29668     16 2F 02 F6 | 	mov	local05, local04
2966c     14 13 02 F6 | 	mov	arg01, local02
29670     09 2D 02 F6 | 	mov	local04, arg01
29674     97 06 48 FB | 	callpa	#(@LR__3553-@LR__3552)>>2,fcache_load_ptr_
29678                 | LR__3552
29678     16 FB C9 FA | 	rdbyte	result1, local04 wz
2967c     01 2C 06 51 |  if_ne	add	local04, #1
29680     F4 FF 9F 5D |  if_ne	jmp	#LR__3552
29684                 | LR__3553
29684     09 2D 82 F1 | 	sub	local04, arg01
29688     16 FB 01 F6 | 	mov	result1, local04
2968c     FD 18 0A F6 | 	mov	arg04, result1 wz
29690     00 FA 05 A6 |  if_e	mov	result1, #0
29694     98 00 90 AD |  if_e	jmp	#LR__3557
29698     00 2E 0E F2 | 	cmp	local05, #0 wz
2969c     00 FA 05 A6 |  if_e	mov	result1, #0
296a0     8C 00 90 AD |  if_e	jmp	#LR__3557
296a4     0C 27 5A F2 | 	cmps	local01, arg04 wcz
296a8     0C 27 02 16 |  if_a	mov	local01, arg04
296ac     01 26 56 F2 | 	cmps	local01, #1 wc
296b0     01 26 06 C6 |  if_b	mov	local01, #1
296b4     15 31 C2 FA | 	rdbyte	local06, local03
296b8     01 2E 0E F2 | 	cmp	local05, #1 wz
296bc     18 00 90 5D |  if_ne	jmp	#LR__3554
296c0     14 13 02 F6 | 	mov	arg01, local02
296c4     18 15 02 F6 | 	mov	arg02, local06
296c8     13 17 02 F6 | 	mov	arg03, local01
296cc     01 18 06 F6 | 	mov	arg04, #1
296d0     14 36 B0 FD | 	call	#__system____ScanForChar
296d4     58 00 90 FD | 	jmp	#LR__3557
296d8                 | LR__3554
296d8     17 33 02 F6 | 	mov	local07, local05
296dc     01 32 86 F1 | 	sub	local07, #1
296e0                 | LR__3555
296e0     14 13 02 F6 | 	mov	arg01, local02
296e4     18 15 02 F6 | 	mov	arg02, local06
296e8     19 17 02 F6 | 	mov	arg03, local07
296ec     01 18 06 F6 | 	mov	arg04, #1
296f0     F4 35 B0 FD | 	call	#__system____ScanForChar
296f4     FD 32 0A F6 | 	mov	local07, result1 wz
296f8     30 00 90 AD |  if_e	jmp	#LR__3556
296fc     17 17 02 F6 | 	mov	arg03, local05
29700     14 13 02 F6 | 	mov	arg01, local02
29704     19 15 02 F6 | 	mov	arg02, local07
29708     F8 F9 BF FD | 	call	#__system__Mid_S
2970c     FD 12 02 F6 | 	mov	arg01, result1
29710     15 15 02 F6 | 	mov	arg02, local03
29714     80 D8 BF FD | 	call	#__system___string_cmp
29718     00 FA 0D F2 | 	cmp	result1, #0 wz
2971c     19 FB 01 A6 |  if_e	mov	result1, local07
29720     0C 00 90 AD |  if_e	jmp	#LR__3557
29724     17 33 82 F1 | 	sub	local07, local05
29728     B4 FF 9F FD | 	jmp	#LR__3555
2972c                 | LR__3556
2972c     00 FA 05 F6 | 	mov	result1, #0
29730                 | LR__3557
29730     A7 F0 03 F6 | 	mov	ptra, fp
29734     B2 00 A0 FD | 	call	#popregs_
29738                 | __system__InstrRev_ret
29738     2D 00 64 FD | 	ret
2973c                 | 
2973c                 | __system___remove
2973c     06 4A 05 F6 | 	mov	COUNT_, #6
29740     A8 00 A0 FD | 	call	#pushregs_
29744     84 E7 05 F1 | 	add	ptr___system__dat__, #388
29748     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2974c     09 15 02 F6 | 	mov	arg02, arg01
29750     13 13 02 F6 | 	mov	arg01, local01
29754     00 16 06 F6 | 	mov	arg03, #0
29758     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2975c     A8 DF BF FD | 	call	#__system____getvfsforfile
29760     FD 28 0A F6 | 	mov	local02, result1 wz
29764     10 00 90 AD |  if_e	jmp	#LR__3560
29768     20 28 06 F1 | 	add	local02, #32
2976c     14 13 0A FB | 	rdlong	arg01, local02 wz
29770     20 28 86 F1 | 	sub	local02, #32
29774     14 00 90 5D |  if_ne	jmp	#LR__3561
29778                 | LR__3560
29778     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2977c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
29780     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29784     01 FA 65 F6 | 	neg	result1, #1
29788     A8 00 90 FD | 	jmp	#LR__3564
2978c                 | LR__3561
2978c     40 28 06 F1 | 	add	local02, #64
29790     14 2B 02 FB | 	rdlong	local03, local02
29794     15 2D 02 F6 | 	mov	local04, local03
29798     40 28 86 F1 | 	sub	local02, #64
2979c     13 2C 46 F7 | 	zerox	local04, #19
297a0     14 2A 46 F0 | 	shr	local03, #20
297a4     02 2A 66 F0 | 	shl	local03, #2
297a8     ED 2A 02 F1 | 	add	local03, __methods__
297ac     15 2B 02 FB | 	rdlong	local03, local03
297b0     13 13 02 F6 | 	mov	arg01, local01
297b4     F2 2E 02 F6 | 	mov	local05, objptr
297b8     16 E5 01 F6 | 	mov	objptr, local04
297bc     2D 2A 62 FD | 	call	local03
297c0     17 E5 01 F6 | 	mov	objptr, local05
297c4     FD 30 02 F6 | 	mov	local06, result1
297c8     FF FF 7F FF 
297cc     F2 31 0E F2 | 	cmp	local06, ##-14 wz
297d0     38 00 90 5D |  if_ne	jmp	#LR__3562
297d4     3C 28 06 F1 | 	add	local02, #60
297d8     14 31 02 FB | 	rdlong	local06, local02
297dc     18 2B 02 F6 | 	mov	local03, local06
297e0     13 30 46 F7 | 	zerox	local06, #19
297e4     14 2A 46 F0 | 	shr	local03, #20
297e8     02 2A 66 F0 | 	shl	local03, #2
297ec     ED 2A 02 F1 | 	add	local03, __methods__
297f0     15 2B 02 FB | 	rdlong	local03, local03
297f4     13 13 02 F6 | 	mov	arg01, local01
297f8     F2 2E 02 F6 | 	mov	local05, objptr
297fc     18 E5 01 F6 | 	mov	objptr, local06
29800     2D 2A 62 FD | 	call	local03
29804     17 E5 01 F6 | 	mov	objptr, local05
29808     FD 30 02 F6 | 	mov	local06, result1
2980c                 | LR__3562
2980c     00 30 0E F2 | 	cmp	local06, #0 wz
29810     1C 00 90 AD |  if_e	jmp	#LR__3563
29814     18 13 6A F6 | 	neg	arg01, local06 wz
29818     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2981c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
29820     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29824     01 FA 65 56 |  if_ne	neg	result1, #1
29828     00 FA 05 A6 |  if_e	mov	result1, #0
2982c     04 00 90 FD | 	jmp	#LR__3564
29830                 | LR__3563
29830     00 FA 05 F6 | 	mov	result1, #0
29834                 | LR__3564
29834     A7 F0 03 F6 | 	mov	ptra, fp
29838     B2 00 A0 FD | 	call	#popregs_
2983c                 | __system___remove_ret
2983c     2D 00 64 FD | 	ret
29840                 | 
29840                 | __system___mkdir
29840     05 4A 05 F6 | 	mov	COUNT_, #5
29844     A8 00 A0 FD | 	call	#pushregs_
29848     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2984c     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
29850     09 15 02 F6 | 	mov	arg02, arg01
29854     13 13 02 F6 | 	mov	arg01, local01
29858     00 16 06 F6 | 	mov	arg03, #0
2985c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
29860     A4 DE BF FD | 	call	#__system____getvfsforfile
29864     FD 28 0A F6 | 	mov	local02, result1 wz
29868     10 00 90 AD |  if_e	jmp	#LR__3570
2986c     20 28 06 F1 | 	add	local02, #32
29870     14 15 0A FB | 	rdlong	arg02, local02 wz
29874     20 28 86 F1 | 	sub	local02, #32
29878     14 00 90 5D |  if_ne	jmp	#LR__3571
2987c                 | LR__3570
2987c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29880     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
29884     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29888     01 FA 65 F6 | 	neg	result1, #1
2988c     60 00 90 FD | 	jmp	#LR__3573
29890                 | LR__3571
29890     38 28 06 F1 | 	add	local02, #56
29894     14 2B 02 FB | 	rdlong	local03, local02
29898     15 2D 02 F6 | 	mov	local04, local03
2989c     13 2A 46 F7 | 	zerox	local03, #19
298a0     14 2C 46 F0 | 	shr	local04, #20
298a4     02 2C 66 F0 | 	shl	local04, #2
298a8     ED 2C 02 F1 | 	add	local04, __methods__
298ac     16 2D 02 FB | 	rdlong	local04, local04
298b0     13 13 02 F6 | 	mov	arg01, local01
298b4     FF 15 06 F6 | 	mov	arg02, #511
298b8     F2 2E 02 F6 | 	mov	local05, objptr
298bc     15 E5 01 F6 | 	mov	objptr, local03
298c0     2D 2C 62 FD | 	call	local04
298c4     17 E5 01 F6 | 	mov	objptr, local05
298c8     FD 12 0A F6 | 	mov	arg01, result1 wz
298cc     1C 00 90 AD |  if_e	jmp	#LR__3572
298d0     09 13 6A F6 | 	neg	arg01, arg01 wz
298d4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
298d8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
298dc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
298e0     01 FA 65 56 |  if_ne	neg	result1, #1
298e4     00 FA 05 A6 |  if_e	mov	result1, #0
298e8     04 00 90 FD | 	jmp	#LR__3573
298ec                 | LR__3572
298ec     00 FA 05 F6 | 	mov	result1, #0
298f0                 | LR__3573
298f0     A7 F0 03 F6 | 	mov	ptra, fp
298f4     B2 00 A0 FD | 	call	#popregs_
298f8                 | __system___mkdir_ret
298f8     2D 00 64 FD | 	ret
298fc                 | 
298fc                 | __system___strerror
298fc     00 12 56 F2 | 	cmps	arg01, #0 wc
29900     08 00 90 CD |  if_b	jmp	#LR__3580
29904     1A 12 56 F2 | 	cmps	arg01, #26 wc
29908     04 00 90 CD |  if_b	jmp	#LR__3581
2990c                 | LR__3580
2990c     19 12 06 F6 | 	mov	arg01, #25
29910                 | LR__3581
29910     02 12 66 F0 | 	shl	arg01, #2
29914     01 00 00 FF 
29918     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
2991c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
29920     09 FB 01 FB | 	rdlong	result1, arg01
29924     01 00 00 FF 
29928     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
2992c                 | __system___strerror_ret
2992c     2D 00 64 FD | 	ret
29930                 | 
29930                 | __system___int64_shl
29930     20 16 CE F7 | 	test	arg03, #32 wz
29934     09 15 02 56 |  if_ne	mov	arg02, arg01
29938     00 12 06 56 |  if_ne	mov	arg01, #0
2993c     1F 16 CE F7 | 	test	arg03, #31 wz
29940     18 00 90 AD |  if_e	jmp	#LR__3590
29944     0B 15 62 F0 | 	shl	arg02, arg03
29948     09 FB 01 F6 | 	mov	result1, arg01
2994c     0B FD 61 F6 | 	neg	result2, arg03
29950     FE FA 41 F0 | 	shr	result1, result2
29954     FD 14 42 F5 | 	or	arg02, result1
29958     0B 13 62 F0 | 	shl	arg01, arg03
2995c                 | LR__3590
2995c     0A FD 01 F6 | 	mov	result2, arg02
29960     09 FB 01 F6 | 	mov	result1, arg01
29964                 | __system___int64_shl_ret
29964     2D 00 64 FD | 	ret
29968                 | 
29968                 | __system___usepins
29968     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2996c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
29970     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
29974     00 13 CA F7 | 	test	arg01, _var01 wz
29978     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
2997c     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
29980     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
29984     01 15 CA A7 |  if_e	test	arg02, _var02 wz
29988     00 FA 05 56 |  if_ne	mov	result1, #0
2998c     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
29990     14 E6 05 F1 | 	add	ptr___system__dat__, #20
29994     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
29998     09 03 42 F5 | 	or	_var02, arg01
2999c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
299a0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
299a4     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
299a8     0A 03 42 F5 | 	or	_var02, arg02
299ac     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
299b0     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
299b4     01 FA 65 F6 | 	neg	result1, #1
299b8                 | __system___usepins_ret
299b8     2D 00 64 FD | 	ret
299bc                 | 
299bc                 | __system___freepins
299bc     14 E6 05 F1 | 	add	ptr___system__dat__, #20
299c0     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
299c4     09 01 22 F5 | 	andn	_var01, arg01
299c8     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
299cc     04 E6 05 F1 | 	add	ptr___system__dat__, #4
299d0     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
299d4     0A 01 22 F5 | 	andn	_var01, arg02
299d8     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
299dc     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
299e0                 | __system___freepins_ret
299e0     2D 00 64 FD | 	ret
299e4                 | 
299e4                 | __system___float_fromuns
299e4     09 17 0A F6 | 	mov	arg03, arg01 wz
299e8     0B FB 01 A6 |  if_e	mov	result1, arg03
299ec     24 00 90 AD |  if_e	jmp	#LR__3600
299f0     0B 15 92 F7 | 	encod	arg02, arg03 wc
299f4     01 14 06 C1 |  if_b	add	arg02, #1
299f8     01 14 86 F1 | 	sub	arg02, #1
299fc     1F 12 06 F6 | 	mov	arg01, #31
29a00     0A 13 82 F1 | 	sub	arg01, arg02
29a04     09 17 62 F0 | 	shl	arg03, arg01
29a08     02 16 46 F0 | 	shr	arg03, #2
29a0c     00 12 06 F6 | 	mov	arg01, #0
29a10     4C 09 B0 FD | 	call	#__system___float_Pack
29a14                 | LR__3600
29a14                 | __system___float_fromuns_ret
29a14     2D 00 64 FD | 	ret
29a18                 | 
29a18                 | __system___float_add
29a18     0F 4A 05 F6 | 	mov	COUNT_, #15
29a1c     A8 00 A0 FD | 	call	#pushregs_
29a20     09 27 02 F6 | 	mov	local01, arg01
29a24     0A 29 02 F6 | 	mov	local02, arg02
29a28     00 2A 06 F6 | 	mov	local03, #0
29a2c     13 2D 02 F6 | 	mov	local04, local01
29a30     16 2F 02 F6 | 	mov	local05, local04
29a34     16 2E 46 F7 | 	zerox	local05, #22
29a38     16 31 02 F6 | 	mov	local06, local04
29a3c     01 30 66 F0 | 	shl	local06, #1
29a40     18 30 46 F0 | 	shr	local06, #24
29a44     1F 2C 46 F0 | 	shr	local04, #31
29a48     14 13 02 F6 | 	mov	arg01, local02
29a4c     09 FB 01 F6 | 	mov	result1, arg01
29a50     FD 32 02 F6 | 	mov	local07, result1
29a54     19 35 02 F6 | 	mov	local08, local07
29a58     16 34 46 F7 | 	zerox	local08, #22
29a5c     19 37 02 F6 | 	mov	local09, local07
29a60     01 36 66 F0 | 	shl	local09, #1
29a64     18 36 46 F0 | 	shr	local09, #24
29a68     1B 39 02 F6 | 	mov	local10, local09
29a6c     1F 32 46 F0 | 	shr	local07, #31
29a70     00 3A 06 F6 | 	mov	local11, #0
29a74     00 3C 06 F6 | 	mov	local12, #0
29a78     1C 31 12 F2 | 	cmp	local06, local10 wc
29a7c     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
29a80     2C 00 90 1D |  if_a	jmp	#LR__3610
29a84     1A 2F 12 32 |  if_ae	cmp	local05, local08 wc
29a88     24 00 90 3D |  if_ae	jmp	#LR__3610
29a8c     17 3F 02 F6 | 	mov	local13, local05
29a90     1A 2F 02 F6 | 	mov	local05, local08
29a94     1F 35 02 F6 | 	mov	local08, local13
29a98     18 3F 02 F6 | 	mov	local13, local06
29a9c     1C 31 02 F6 | 	mov	local06, local10
29aa0     1F 39 02 F6 | 	mov	local10, local13
29aa4     16 3F 02 F6 | 	mov	local13, local04
29aa8     19 2D 02 F6 | 	mov	local04, local07
29aac     1F 33 02 F6 | 	mov	local07, local13
29ab0                 | LR__3610
29ab0     FF 30 0E F2 | 	cmp	local06, #255 wz
29ab4     70 01 90 AD |  if_e	jmp	#LR__3625
29ab8     00 30 0E F2 | 	cmp	local06, #0 wz
29abc     AC 01 90 AD |  if_e	jmp	#LR__3627
29ac0     17 2E 26 F4 | 	bith	local05, #23
29ac4                 | LR__3611
29ac4     00 38 0E F2 | 	cmp	local10, #0 wz
29ac8     F0 01 90 AD |  if_e	jmp	#LR__3631
29acc     17 34 26 F4 | 	bith	local08, #23
29ad0                 | LR__3612
29ad0     7F 30 86 F1 | 	sub	local06, #127
29ad4     7F 38 86 F1 | 	sub	local10, #127
29ad8     18 41 02 F6 | 	mov	local14, local06
29adc     1C 41 82 F1 | 	sub	local14, local10
29ae0     97 14 48 FB | 	callpa	#(@LR__3614-@LR__3613)>>2,fcache_load_ptr_
29ae4                 | LR__3613
29ae4     20 40 56 F2 | 	cmps	local14, #32 wc
29ae8     20 00 90 CD |  if_b	jmp	#LR__3615
29aec     1A 37 02 F6 | 	mov	local09, local08
29af0     00 3A 0E F2 | 	cmp	local11, #0 wz
29af4     6F 3A 62 FD | 	wrnz	local11
29af8     1D 37 42 F5 | 	or	local09, local11
29afc     1B 3B 02 F6 | 	mov	local11, local09
29b00     00 34 06 F6 | 	mov	local08, #0
29b04     20 40 86 F1 | 	sub	local14, #32
29b08     D8 FF 9F FD | 	jmp	#LR__3613
29b0c                 | LR__3614
29b0c                 | LR__3615
29b0c     00 40 0E F2 | 	cmp	local14, #0 wz
29b10     38 00 90 AD |  if_e	jmp	#LR__3616
29b14     1A 3F 02 F6 | 	mov	local13, local08
29b18     20 38 06 F6 | 	mov	local10, #32
29b1c     20 39 82 F1 | 	sub	local10, local14
29b20     1C 3F 62 F0 | 	shl	local13, local10
29b24     1D 39 02 F6 | 	mov	local10, local11
29b28     20 36 06 F6 | 	mov	local09, #32
29b2c     20 37 82 F1 | 	sub	local09, local14
29b30     1B 39 6A F0 | 	shl	local10, local09 wz
29b34     20 3B 42 F0 | 	shr	local11, local14
29b38     20 35 42 F0 | 	shr	local08, local14
29b3c     1F 3B 42 F5 | 	or	local11, local13
29b40     00 42 06 F6 | 	mov	local15, #0
29b44     01 42 06 56 |  if_ne	mov	local15, #1
29b48     21 3B 42 F5 | 	or	local11, local15
29b4c                 | LR__3616
29b4c     16 43 02 F6 | 	mov	local15, local04
29b50     19 43 62 F5 | 	xor	local15, local07
29b54     01 42 CE F7 | 	test	local15, #1 wz
29b58     18 00 90 AD |  if_e	jmp	#LR__3617
29b5c     1A 35 22 F6 | 	not	local08, local08
29b60     1D 3B 22 F6 | 	not	local11, local11
29b64     01 3A 0E F1 | 	add	local11, #1 wz
29b68     00 42 06 F6 | 	mov	local15, #0
29b6c     01 42 06 A6 |  if_e	mov	local15, #1
29b70     21 35 02 F1 | 	add	local08, local15
29b74                 | LR__3617
29b74     1D 3D 12 F1 | 	add	local12, local11 wc
29b78     1A 2F 22 F1 | 	addx	local05, local08
29b7c     00 2E 56 F2 | 	cmps	local05, #0 wc
29b80     1C 00 90 3D |  if_ae	jmp	#LR__3618
29b84     01 2C 66 F5 | 	xor	local04, #1
29b88     17 2F 22 F6 | 	not	local05, local05
29b8c     1E 3D 22 F6 | 	not	local12, local12
29b90     01 3C 0E F1 | 	add	local12, #1 wz
29b94     00 42 06 F6 | 	mov	local15, #0
29b98     01 42 06 A6 |  if_e	mov	local15, #1
29b9c     21 2F 02 F1 | 	add	local05, local15
29ba0                 | LR__3618
29ba0     00 80 00 FF 
29ba4     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
29ba8     28 00 90 CD |  if_b	jmp	#LR__3619
29bac     01 30 06 F1 | 	add	local06, #1
29bb0     1E 41 02 F6 | 	mov	local14, local12
29bb4     01 40 06 F5 | 	and	local14, #1
29bb8     01 3C 46 F0 | 	shr	local12, #1
29bbc     17 43 02 F6 | 	mov	local15, local05
29bc0     1F 42 66 F0 | 	shl	local15, #31
29bc4     21 3D 42 F5 | 	or	local12, local15
29bc8     20 3D 42 F5 | 	or	local12, local14
29bcc     01 2E 46 F0 | 	shr	local05, #1
29bd0     3C 00 90 FD | 	jmp	#LR__3624
29bd4                 | LR__3619
29bd4     00 40 00 FF 
29bd8     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
29bdc     30 00 90 3D |  if_ae	jmp	#LR__3623
29be0     00 2E 0E F2 | 	cmp	local05, #0 wz
29be4     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
29be8     08 2C 46 A5 |  if_e	or	local04, #8
29bec     01 2C 26 A5 |  if_e	andn	local04, #1
29bf0     1C 00 90 AD |  if_e	jmp	#LR__3622
29bf4                 | LR__3620
29bf4     00 40 00 FF 
29bf8     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
29bfc     10 00 90 3D |  if_ae	jmp	#LR__3621
29c00     1E 3D 12 F1 | 	add	local12, local12 wc
29c04     17 2F 22 F1 | 	addx	local05, local05
29c08     01 30 86 F1 | 	sub	local06, #1
29c0c     E4 FF 9F FD | 	jmp	#LR__3620
29c10                 | LR__3621
29c10                 | LR__3622
29c10                 | LR__3623
29c10                 | LR__3624
29c10     17 13 02 F6 | 	mov	arg01, local05
29c14     1E 15 02 F6 | 	mov	arg02, local12
29c18     18 17 02 F6 | 	mov	arg03, local06
29c1c     16 19 02 F6 | 	mov	arg04, local04
29c20     08 35 B0 FD | 	call	#__system__pack_0685
29c24     DC 00 90 FD | 	jmp	#LR__3635
29c28                 | LR__3625
29c28     FF 38 0E F2 | 	cmp	local10, #255 wz
29c2c     10 00 90 5D |  if_ne	jmp	#LR__3626
29c30     16 33 0A F2 | 	cmp	local07, local04 wz
29c34     00 F8 3F 5F 
29c38     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
29c3c     C4 00 90 5D |  if_ne	jmp	#LR__3635
29c40                 | LR__3626
29c40     00 2E 0E F2 | 	cmp	local05, #0 wz
29c44     00 F8 3F 5F 
29c48     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
29c4c     B4 00 90 5D |  if_ne	jmp	#LR__3635
29c50     1E 15 02 F6 | 	mov	arg02, local12
29c54     18 17 02 F6 | 	mov	arg03, local06
29c58     16 19 02 F6 | 	mov	arg04, local04
29c5c     02 18 46 F5 | 	or	arg04, #2
29c60     17 13 02 F6 | 	mov	arg01, local05
29c64     C4 34 B0 FD | 	call	#__system__pack_0685
29c68     98 00 90 FD | 	jmp	#LR__3635
29c6c                 | LR__3627
29c6c     00 2E 0E F2 | 	cmp	local05, #0 wz
29c70     28 00 90 AD |  if_e	jmp	#LR__3630
29c74     01 2E 66 F0 | 	shl	local05, #1
29c78     97 0E 48 FB | 	callpa	#(@LR__3629-@LR__3628)>>2,fcache_load_ptr_
29c7c                 | LR__3628
29c7c     00 40 00 FF 
29c80     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
29c84     18 43 02 C6 |  if_b	mov	local15, local06
29c88     01 42 86 C1 |  if_b	sub	local15, #1
29c8c     21 31 02 C6 |  if_b	mov	local06, local15
29c90     01 2E 66 C0 |  if_b	shl	local05, #1
29c94     E4 FF 9F CD |  if_b	jmp	#LR__3628
29c98                 | LR__3629
29c98     28 FE 9F FD | 	jmp	#LR__3611
29c9c                 | LR__3630
29c9c     19 2D 02 F5 | 	and	local04, local07
29ca0     16 19 02 F6 | 	mov	arg04, local04
29ca4     08 18 46 F5 | 	or	arg04, #8
29ca8     00 12 06 F6 | 	mov	arg01, #0
29cac     00 14 06 F6 | 	mov	arg02, #0
29cb0     00 16 06 F6 | 	mov	arg03, #0
29cb4     74 34 B0 FD | 	call	#__system__pack_0685
29cb8     48 00 90 FD | 	jmp	#LR__3635
29cbc                 | LR__3631
29cbc     00 34 0E F2 | 	cmp	local08, #0 wz
29cc0     28 00 90 AD |  if_e	jmp	#LR__3634
29cc4     01 34 66 F0 | 	shl	local08, #1
29cc8     97 0E 48 FB | 	callpa	#(@LR__3633-@LR__3632)>>2,fcache_load_ptr_
29ccc                 | LR__3632
29ccc     00 40 00 FF 
29cd0     00 34 16 F2 | 	cmp	local08, ##8388608 wc
29cd4     1C 43 02 C6 |  if_b	mov	local15, local10
29cd8     01 42 86 C1 |  if_b	sub	local15, #1
29cdc     21 39 02 C6 |  if_b	mov	local10, local15
29ce0     01 34 66 C0 |  if_b	shl	local08, #1
29ce4     E4 FF 9F CD |  if_b	jmp	#LR__3632
29ce8                 | LR__3633
29ce8     E4 FD 9F FD | 	jmp	#LR__3612
29cec                 | LR__3634
29cec     7F 30 86 F1 | 	sub	local06, #127
29cf0     17 13 02 F6 | 	mov	arg01, local05
29cf4     1E 15 02 F6 | 	mov	arg02, local12
29cf8     18 17 02 F6 | 	mov	arg03, local06
29cfc     16 19 02 F6 | 	mov	arg04, local04
29d00     28 34 B0 FD | 	call	#__system__pack_0685
29d04                 | LR__3635
29d04     A7 F0 03 F6 | 	mov	ptra, fp
29d08     B2 00 A0 FD | 	call	#popregs_
29d0c                 | __system___float_add_ret
29d0c     2D 00 64 FD | 	ret
29d10                 | 
29d10                 | __system___float_sqrt
29d10     04 4A 05 F6 | 	mov	COUNT_, #4
29d14     A8 00 A0 FD | 	call	#pushregs_
29d18     09 27 02 F6 | 	mov	local01, arg01
29d1c     09 FB 01 F6 | 	mov	result1, arg01
29d20     FD 28 02 F6 | 	mov	local02, result1
29d24     14 2B 02 F6 | 	mov	local03, local02
29d28     16 2A 46 F7 | 	zerox	local03, #22
29d2c     14 2D 02 F6 | 	mov	local04, local02
29d30     01 2C 66 F0 | 	shl	local04, #1
29d34     18 2C 4E F0 | 	shr	local04, #24 wz
29d38     1F 28 46 F0 | 	shr	local02, #31
29d3c     70 00 90 AD |  if_e	jmp	#LR__3641
29d40     17 2A 26 F4 | 	bith	local03, #23
29d44                 | LR__3640
29d44     00 28 0E F2 | 	cmp	local02, #0 wz
29d48     00 F8 3F 5F 
29d4c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
29d50     88 00 90 5D |  if_ne	jmp	#LR__3644
29d54     FF 2C 0E F2 | 	cmp	local04, #255 wz
29d58     13 FB 01 A6 |  if_e	mov	result1, local01
29d5c     7C 00 90 AD |  if_e	jmp	#LR__3644
29d60     7F 2C 86 F1 | 	sub	local04, #127
29d64     01 2C CE F7 | 	test	local04, #1 wz
29d68     01 2A 66 50 |  if_ne	shl	local03, #1
29d6c     05 2A 66 F0 | 	shl	local03, #5
29d70     15 01 38 FD | 	qsqrt	#0, local03
29d74     01 2C 86 51 |  if_ne	sub	local04, #1
29d78     16 2D 52 F6 | 	abs	local04, local04 wc
29d7c     01 2C 46 F0 | 	shr	local04, #1
29d80     16 17 82 F6 | 	negc	arg03, local04
29d84     14 19 02 F6 | 	mov	arg04, local02
29d88     18 12 62 FD | 	getqx	arg01
29d8c     09 15 02 F6 | 	mov	arg02, arg01
29d90     19 14 66 F0 | 	shl	arg02, #25
29d94     07 12 46 F0 | 	shr	arg01, #7
29d98     00 80 00 FF 
29d9c     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
29da0     01 16 06 31 |  if_ae	add	arg03, #1
29da4     01 12 46 30 |  if_ae	shr	arg01, #1
29da8     80 33 B0 FD | 	call	#__system__pack_0685
29dac     2C 00 90 FD | 	jmp	#LR__3644
29db0                 | LR__3641
29db0     00 2A 0E F2 | 	cmp	local03, #0 wz
29db4     13 FB 01 A6 |  if_e	mov	result1, local01
29db8     20 00 90 AD |  if_e	jmp	#LR__3644
29dbc     01 2A 66 F0 | 	shl	local03, #1
29dc0     97 0A 48 FB | 	callpa	#(@LR__3643-@LR__3642)>>2,fcache_load_ptr_
29dc4                 | LR__3642
29dc4     00 40 00 FF 
29dc8     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
29dcc     01 2C 86 C1 |  if_b	sub	local04, #1
29dd0     01 2A 66 C0 |  if_b	shl	local03, #1
29dd4     EC FF 9F CD |  if_b	jmp	#LR__3642
29dd8                 | LR__3643
29dd8     68 FF 9F FD | 	jmp	#LR__3640
29ddc                 | LR__3644
29ddc     A7 F0 03 F6 | 	mov	ptra, fp
29de0     B2 00 A0 FD | 	call	#popregs_
29de4                 | __system___float_sqrt_ret
29de4     2D 00 64 FD | 	ret
29de8                 | 
29de8                 | __system___float_mul
29de8     0B 4A 05 F6 | 	mov	COUNT_, #11
29dec     A8 00 A0 FD | 	call	#pushregs_
29df0     09 27 02 F6 | 	mov	local01, arg01
29df4     0A 29 02 F6 | 	mov	local02, arg02
29df8     13 2B 02 F6 | 	mov	local03, local01
29dfc     15 2D 02 F6 | 	mov	local04, local03
29e00     16 2C 46 F7 | 	zerox	local04, #22
29e04     15 2F 02 F6 | 	mov	local05, local03
29e08     01 2E 66 F0 | 	shl	local05, #1
29e0c     18 2E 46 F0 | 	shr	local05, #24
29e10     1F 2A 46 F0 | 	shr	local03, #31
29e14     14 FB 01 F6 | 	mov	result1, local02
29e18     FD 30 02 F6 | 	mov	local06, result1
29e1c     18 33 02 F6 | 	mov	local07, local06
29e20     16 32 46 F7 | 	zerox	local07, #22
29e24     18 35 02 F6 | 	mov	local08, local06
29e28     01 34 66 F0 | 	shl	local08, #1
29e2c     18 34 46 F0 | 	shr	local08, #24
29e30     1F 30 46 F0 | 	shr	local06, #31
29e34     18 2B 62 F5 | 	xor	local03, local06
29e38     FF 2E 0E F2 | 	cmp	local05, #255 wz
29e3c     90 00 90 AD |  if_e	jmp	#LR__3653
29e40     FF 34 0E F2 | 	cmp	local08, #255 wz
29e44     D8 00 90 AD |  if_e	jmp	#LR__3655
29e48     00 2E 0E F2 | 	cmp	local05, #0 wz
29e4c     0C 01 90 AD |  if_e	jmp	#LR__3656
29e50     17 2C 26 F4 | 	bith	local04, #23
29e54                 | LR__3650
29e54     00 34 0E F2 | 	cmp	local08, #0 wz
29e58     44 01 90 AD |  if_e	jmp	#LR__3660
29e5c     17 32 26 F4 | 	bith	local07, #23
29e60                 | LR__3651
29e60     16 29 02 F6 | 	mov	local02, local04
29e64     04 28 66 F0 | 	shl	local02, #4
29e68     19 31 02 F6 | 	mov	local06, local07
29e6c     05 30 66 F0 | 	shl	local06, #5
29e70     18 29 02 FD | 	qmul	local02, local06
29e74     1A 2F 02 F1 | 	add	local05, local08
29e78     FE 2E 86 F1 | 	sub	local05, #254
29e7c     17 37 02 F6 | 	mov	local09, local05
29e80     04 2C 66 F0 | 	shl	local04, #4
29e84     05 32 66 F0 | 	shl	local07, #5
29e88     18 38 62 FD | 	getqx	local10
29e8c     19 2D 02 FD | 	qmul	local04, local07
29e90     19 3A 62 FD | 	getqy	local11
29e94     00 80 00 FF 
29e98     00 3A 16 F2 | 	cmp	local11, ##16777216 wc
29e9c     18 00 90 CD |  if_b	jmp	#LR__3652
29ea0     01 36 06 F1 | 	add	local09, #1
29ea4     01 38 46 F0 | 	shr	local10, #1
29ea8     1D 35 02 F6 | 	mov	local08, local11
29eac     1F 34 66 F0 | 	shl	local08, #31
29eb0     1A 39 42 F5 | 	or	local10, local08
29eb4     01 3A 46 F0 | 	shr	local11, #1
29eb8                 | LR__3652
29eb8     1D 13 02 F6 | 	mov	arg01, local11
29ebc     1C 15 02 F6 | 	mov	arg02, local10
29ec0     1B 17 02 F6 | 	mov	arg03, local09
29ec4     15 19 02 F6 | 	mov	arg04, local03
29ec8     60 32 B0 FD | 	call	#__system__pack_0685
29ecc     10 01 90 FD | 	jmp	#LR__3664
29ed0                 | LR__3653
29ed0     00 2C 0E F2 | 	cmp	local04, #0 wz
29ed4     13 FB 01 56 |  if_ne	mov	result1, local01
29ed8     04 01 90 5D |  if_ne	jmp	#LR__3664
29edc     FF 34 56 F2 | 	cmps	local08, #255 wc
29ee0     00 34 0E C2 |  if_b	cmp	local08, #0 wz
29ee4     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
29ee8     18 00 90 4D |  if_c_and_nz	jmp	#LR__3654
29eec     00 F8 3F CF 
29ef0     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
29ef4     E8 00 90 CD |  if_b	jmp	#LR__3664
29ef8     00 32 0E F2 | 	cmp	local07, #0 wz
29efc     14 FB 01 56 |  if_ne	mov	result1, local02
29f00     DC 00 90 5D |  if_ne	jmp	#LR__3664
29f04                 | LR__3654
29f04     02 2A 46 F5 | 	or	local03, #2
29f08     00 12 06 F6 | 	mov	arg01, #0
29f0c     00 14 06 F6 | 	mov	arg02, #0
29f10     17 17 02 F6 | 	mov	arg03, local05
29f14     15 19 02 F6 | 	mov	arg04, local03
29f18     10 32 B0 FD | 	call	#__system__pack_0685
29f1c     C0 00 90 FD | 	jmp	#LR__3664
29f20                 | LR__3655
29f20     00 2E 0E F2 | 	cmp	local05, #0 wz
29f24     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
29f28     00 F8 3F AF 
29f2c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
29f30     AC 00 90 AD |  if_e	jmp	#LR__3664
29f34     00 32 0E F2 | 	cmp	local07, #0 wz
29f38     14 FB 01 56 |  if_ne	mov	result1, local02
29f3c     A0 00 90 5D |  if_ne	jmp	#LR__3664
29f40     1A 17 02 F6 | 	mov	arg03, local08
29f44     15 19 02 F6 | 	mov	arg04, local03
29f48     02 18 46 F5 | 	or	arg04, #2
29f4c     00 12 06 F6 | 	mov	arg01, #0
29f50     00 14 06 F6 | 	mov	arg02, #0
29f54     D4 31 B0 FD | 	call	#__system__pack_0685
29f58     84 00 90 FD | 	jmp	#LR__3664
29f5c                 | LR__3656
29f5c     00 2C 0E F2 | 	cmp	local04, #0 wz
29f60     20 00 90 AD |  if_e	jmp	#LR__3659
29f64     01 2C 66 F0 | 	shl	local04, #1
29f68     97 0A 48 FB | 	callpa	#(@LR__3658-@LR__3657)>>2,fcache_load_ptr_
29f6c                 | LR__3657
29f6c     00 40 00 FF 
29f70     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
29f74     01 2E 86 C1 |  if_b	sub	local05, #1
29f78     01 2C 66 C0 |  if_b	shl	local04, #1
29f7c     EC FF 9F CD |  if_b	jmp	#LR__3657
29f80                 | LR__3658
29f80     D0 FE 9F FD | 	jmp	#LR__3650
29f84                 | LR__3659
29f84     08 2A 46 F5 | 	or	local03, #8
29f88     00 12 06 F6 | 	mov	arg01, #0
29f8c     00 14 06 F6 | 	mov	arg02, #0
29f90     00 16 06 F6 | 	mov	arg03, #0
29f94     15 19 02 F6 | 	mov	arg04, local03
29f98     90 31 B0 FD | 	call	#__system__pack_0685
29f9c     40 00 90 FD | 	jmp	#LR__3664
29fa0                 | LR__3660
29fa0     00 32 0E F2 | 	cmp	local07, #0 wz
29fa4     20 00 90 AD |  if_e	jmp	#LR__3663
29fa8     01 32 66 F0 | 	shl	local07, #1
29fac     97 0A 48 FB | 	callpa	#(@LR__3662-@LR__3661)>>2,fcache_load_ptr_
29fb0                 | LR__3661
29fb0     00 40 00 FF 
29fb4     00 32 16 F2 | 	cmp	local07, ##8388608 wc
29fb8     01 34 86 C1 |  if_b	sub	local08, #1
29fbc     01 32 66 C0 |  if_b	shl	local07, #1
29fc0     EC FF 9F CD |  if_b	jmp	#LR__3661
29fc4                 | LR__3662
29fc4     98 FE 9F FD | 	jmp	#LR__3651
29fc8                 | LR__3663
29fc8     08 2A 46 F5 | 	or	local03, #8
29fcc     00 12 06 F6 | 	mov	arg01, #0
29fd0     00 14 06 F6 | 	mov	arg02, #0
29fd4     00 16 06 F6 | 	mov	arg03, #0
29fd8     15 19 02 F6 | 	mov	arg04, local03
29fdc     4C 31 B0 FD | 	call	#__system__pack_0685
29fe0                 | LR__3664
29fe0     A7 F0 03 F6 | 	mov	ptra, fp
29fe4     B2 00 A0 FD | 	call	#popregs_
29fe8                 | __system___float_mul_ret
29fe8     2D 00 64 FD | 	ret
29fec                 | 
29fec                 | __system___float_div
29fec     0E 4A 05 F6 | 	mov	COUNT_, #14
29ff0     A8 00 A0 FD | 	call	#pushregs_
29ff4     09 2B 02 F6 | 	mov	local03, arg01
29ff8     0A 2D 02 F6 | 	mov	local04, arg02
29ffc     15 2F 02 F6 | 	mov	local05, local03
2a000     17 31 02 F6 | 	mov	local06, local05
2a004     16 30 46 F7 | 	zerox	local06, #22
2a008     17 33 02 F6 | 	mov	local07, local05
2a00c     01 32 66 F0 | 	shl	local07, #1
2a010     18 32 46 F0 | 	shr	local07, #24
2a014     1F 2E 46 F0 | 	shr	local05, #31
2a018     16 FB 01 F6 | 	mov	result1, local04
2a01c     FD 34 02 F6 | 	mov	local08, result1
2a020     1A 37 02 F6 | 	mov	local09, local08
2a024     16 36 46 F7 | 	zerox	local09, #22
2a028     1A 39 02 F6 | 	mov	local10, local08
2a02c     01 38 66 F0 | 	shl	local10, #1
2a030     18 38 46 F0 | 	shr	local10, #24
2a034     1F 34 46 F0 | 	shr	local08, #31
2a038     1A 2F 62 F5 | 	xor	local05, local08
2a03c     FF 32 0E F2 | 	cmp	local07, #255 wz
2a040     D4 00 90 AD |  if_e	jmp	#LR__3675
2a044     FF 38 0E F2 | 	cmp	local10, #255 wz
2a048     04 01 90 AD |  if_e	jmp	#LR__3676
2a04c     00 32 0E F2 | 	cmp	local07, #0 wz
2a050     24 01 90 AD |  if_e	jmp	#LR__3677
2a054     17 30 26 F4 | 	bith	local06, #23
2a058                 | LR__3670
2a058     00 38 0E F2 | 	cmp	local10, #0 wz
2a05c     70 01 90 AD |  if_e	jmp	#LR__3681
2a060     17 36 26 F4 | 	bith	local09, #23
2a064                 | LR__3671
2a064     1C 33 82 F1 | 	sub	local07, local10
2a068     19 3B 02 F6 | 	mov	local11, local07
2a06c     18 13 02 F6 | 	mov	arg01, local06
2a070     02 12 46 F0 | 	shr	arg01, #2
2a074     1E 30 66 F0 | 	shl	local06, #30
2a078     18 15 02 F6 | 	mov	arg02, local06
2a07c     1B 17 02 F6 | 	mov	arg03, local09
2a080     28 12 62 FD | 	setq	arg01
2a084     0B 15 12 FD | 	qdiv	arg02, arg03
2a088     00 3C 06 F6 | 	mov	local12, #0
2a08c     18 26 62 FD | 	getqx	local01
2a090     19 FC 61 FD | 	getqy	result2
2a094     FE 28 02 F6 | 	mov	local02, result2
2a098     13 3F 02 F6 | 	mov	local13, local01
2a09c     00 28 4E F2 | 	cmps	local02, #0 wz
2a0a0     1F 41 02 F6 | 	mov	local14, local13
2a0a4     19 40 66 F0 | 	shl	local14, #25
2a0a8     01 3C 06 56 |  if_ne	mov	local12, #1
2a0ac     1E 41 42 F5 | 	or	local14, local12
2a0b0     07 3E 46 F0 | 	shr	local13, #7
2a0b4     00 80 00 FF 
2a0b8     00 3E 16 F2 | 	cmp	local13, ##16777216 wc
2a0bc     1C 00 90 CD |  if_b	jmp	#LR__3672
2a0c0     01 3A 06 F1 | 	add	local11, #1
2a0c4     01 40 46 F0 | 	shr	local14, #1
2a0c8     1F 3D 02 F6 | 	mov	local12, local13
2a0cc     1F 3C 66 F0 | 	shl	local12, #31
2a0d0     1E 41 42 F5 | 	or	local14, local12
2a0d4     01 3E 46 F0 | 	shr	local13, #1
2a0d8     24 00 90 FD | 	jmp	#LR__3674
2a0dc                 | LR__3672
2a0dc     00 40 00 FF 
2a0e0     00 3E 16 F2 | 	cmp	local13, ##8388608 wc
2a0e4     18 00 90 3D |  if_ae	jmp	#LR__3673
2a0e8     01 3A 86 F1 | 	sub	local11, #1
2a0ec     01 3E 66 F0 | 	shl	local13, #1
2a0f0     20 3D 02 F6 | 	mov	local12, local14
2a0f4     1F 3C 46 F0 | 	shr	local12, #31
2a0f8     1E 3F 42 F5 | 	or	local13, local12
2a0fc     01 40 66 F0 | 	shl	local14, #1
2a100                 | LR__3673
2a100                 | LR__3674
2a100     1F 13 02 F6 | 	mov	arg01, local13
2a104     20 15 02 F6 | 	mov	arg02, local14
2a108     1D 17 02 F6 | 	mov	arg03, local11
2a10c     17 19 02 F6 | 	mov	arg04, local05
2a110     18 30 B0 FD | 	call	#__system__pack_0685
2a114     F8 00 90 FD | 	jmp	#LR__3685
2a118                 | LR__3675
2a118     00 30 0E F2 | 	cmp	local06, #0 wz
2a11c     15 FB 01 56 |  if_ne	mov	result1, local03
2a120     EC 00 90 5D |  if_ne	jmp	#LR__3685
2a124     FF 38 0E F2 | 	cmp	local10, #255 wz
2a128     00 F8 3F AF 
2a12c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2a130     DC 00 90 AD |  if_e	jmp	#LR__3685
2a134     02 2E 46 F5 | 	or	local05, #2
2a138     00 12 06 F6 | 	mov	arg01, #0
2a13c     00 14 06 F6 | 	mov	arg02, #0
2a140     19 17 02 F6 | 	mov	arg03, local07
2a144     17 19 02 F6 | 	mov	arg04, local05
2a148     E0 2F B0 FD | 	call	#__system__pack_0685
2a14c     C0 00 90 FD | 	jmp	#LR__3685
2a150                 | LR__3676
2a150     00 36 0E F2 | 	cmp	local09, #0 wz
2a154     16 FB 01 56 |  if_ne	mov	result1, local04
2a158     B4 00 90 5D |  if_ne	jmp	#LR__3685
2a15c     17 19 02 F6 | 	mov	arg04, local05
2a160     08 18 46 F5 | 	or	arg04, #8
2a164     00 12 06 F6 | 	mov	arg01, #0
2a168     00 14 06 F6 | 	mov	arg02, #0
2a16c     00 16 06 F6 | 	mov	arg03, #0
2a170     B8 2F B0 FD | 	call	#__system__pack_0685
2a174     98 00 90 FD | 	jmp	#LR__3685
2a178                 | LR__3677
2a178     00 30 0E F2 | 	cmp	local06, #0 wz
2a17c     20 00 90 AD |  if_e	jmp	#LR__3680
2a180     01 30 66 F0 | 	shl	local06, #1
2a184     97 0A 48 FB | 	callpa	#(@LR__3679-@LR__3678)>>2,fcache_load_ptr_
2a188                 | LR__3678
2a188     00 40 00 FF 
2a18c     00 30 16 F2 | 	cmp	local06, ##8388608 wc
2a190     01 32 86 C1 |  if_b	sub	local07, #1
2a194     01 30 66 C0 |  if_b	shl	local06, #1
2a198     EC FF 9F CD |  if_b	jmp	#LR__3678
2a19c                 | LR__3679
2a19c     B8 FE 9F FD | 	jmp	#LR__3670
2a1a0                 | LR__3680
2a1a0     00 38 0E F2 | 	cmp	local10, #0 wz
2a1a4     00 36 0E A2 |  if_e	cmp	local09, #0 wz
2a1a8     00 F8 3F AF 
2a1ac     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2a1b0     5C 00 90 AD |  if_e	jmp	#LR__3685
2a1b4     17 19 02 F6 | 	mov	arg04, local05
2a1b8     08 18 46 F5 | 	or	arg04, #8
2a1bc     00 12 06 F6 | 	mov	arg01, #0
2a1c0     00 14 06 F6 | 	mov	arg02, #0
2a1c4     00 16 06 F6 | 	mov	arg03, #0
2a1c8     60 2F B0 FD | 	call	#__system__pack_0685
2a1cc     40 00 90 FD | 	jmp	#LR__3685
2a1d0                 | LR__3681
2a1d0     00 36 0E F2 | 	cmp	local09, #0 wz
2a1d4     20 00 90 AD |  if_e	jmp	#LR__3684
2a1d8     01 36 66 F0 | 	shl	local09, #1
2a1dc     97 0A 48 FB | 	callpa	#(@LR__3683-@LR__3682)>>2,fcache_load_ptr_
2a1e0                 | LR__3682
2a1e0     00 40 00 FF 
2a1e4     00 36 16 F2 | 	cmp	local09, ##8388608 wc
2a1e8     01 38 86 C1 |  if_b	sub	local10, #1
2a1ec     01 36 66 C0 |  if_b	shl	local09, #1
2a1f0     EC FF 9F CD |  if_b	jmp	#LR__3682
2a1f4                 | LR__3683
2a1f4     6C FE 9F FD | 	jmp	#LR__3671
2a1f8                 | LR__3684
2a1f8     02 2E 46 F5 | 	or	local05, #2
2a1fc     00 12 06 F6 | 	mov	arg01, #0
2a200     00 14 06 F6 | 	mov	arg02, #0
2a204     00 16 06 F6 | 	mov	arg03, #0
2a208     17 19 02 F6 | 	mov	arg04, local05
2a20c     1C 2F B0 FD | 	call	#__system__pack_0685
2a210                 | LR__3685
2a210     A7 F0 03 F6 | 	mov	ptra, fp
2a214     B2 00 A0 FD | 	call	#popregs_
2a218                 | __system___float_div_ret
2a218     2D 00 64 FD | 	ret
2a21c                 | 
2a21c                 | __system___float_cmp
2a21c     00 C0 3F FF 
2a220     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
2a224     00 C0 3F CF 
2a228     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
2a22c     0B FB 01 36 |  if_ae	mov	result1, arg03
2a230     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2a234     00 C0 7F FF 
2a238     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
2a23c     00 C0 7F CF 
2a240     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
2a244     0B FB 01 36 |  if_ae	mov	result1, arg03
2a248     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2a24c     00 12 56 F2 | 	cmps	arg01, #0 wc
2a250     2C 00 90 3D |  if_ae	jmp	#LR__3690
2a254     00 14 56 F2 | 	cmps	arg02, #0 wc
2a258     0A FB 01 C6 |  if_b	mov	result1, arg02
2a25c     09 FB 81 C1 |  if_b	sub	result1, arg01
2a260     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
2a264     00 14 0E F2 | 	cmp	arg02, #0 wz
2a268     00 00 40 AF 
2a26c     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
2a270     00 FA 05 A6 |  if_e	mov	result1, #0
2a274     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2a278     01 FA 65 F6 | 	neg	result1, #1
2a27c     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
2a280                 | LR__3690
2a280     00 14 56 F2 | 	cmps	arg02, #0 wc
2a284     1C 00 90 3D |  if_ae	jmp	#LR__3691
2a288     00 12 0E F2 | 	cmp	arg01, #0 wz
2a28c     00 00 40 AF 
2a290     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
2a294     00 FA 05 A6 |  if_e	mov	result1, #0
2a298     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2a29c     01 FA 05 F6 | 	mov	result1, #1
2a2a0     08 00 90 FD | 	jmp	#__system___float_cmp_ret
2a2a4                 | LR__3691
2a2a4     0A 13 82 F1 | 	sub	arg01, arg02
2a2a8     09 FB 01 F6 | 	mov	result1, arg01
2a2ac                 | __system___float_cmp_ret
2a2ac     2D 00 64 FD | 	ret
2a2b0                 | 
2a2b0                 | __system___float_tointeger
2a2b0     02 4A 05 F6 | 	mov	COUNT_, #2
2a2b4     A8 00 A0 FD | 	call	#pushregs_
2a2b8     50 00 B0 FD | 	call	#__system___float_Unpack
2a2bc     FF FF 7F FF 
2a2c0     FF FD 55 F2 | 	cmps	result2, ##-1 wc
2a2c4     34 00 90 CD |  if_b	jmp	#LR__3700
2a2c8     1F FC 55 F2 | 	cmps	result2, #31 wc
2a2cc     2C 00 90 3D |  if_ae	jmp	#LR__3700
2a2d0     02 FE 65 F0 | 	shl	result3, #2
2a2d4     1E 26 06 F6 | 	mov	local01, #30
2a2d8     FE 26 82 F1 | 	sub	local01, result2
2a2dc     13 FF 41 F0 | 	shr	result3, local01
2a2e0     FF 28 02 F6 | 	mov	local02, result3
2a2e4     0A 29 02 F1 | 	add	local02, arg02
2a2e8     01 28 46 F0 | 	shr	local02, #1
2a2ec     00 FA 0D F2 | 	cmp	result1, #0 wz
2a2f0     14 29 62 56 |  if_ne	neg	local02, local02
2a2f4     14 FB 01 F6 | 	mov	result1, local02
2a2f8     04 00 90 FD | 	jmp	#LR__3701
2a2fc                 | LR__3700
2a2fc     00 FA 05 F6 | 	mov	result1, #0
2a300                 | LR__3701
2a300     A7 F0 03 F6 | 	mov	ptra, fp
2a304     B2 00 A0 FD | 	call	#popregs_
2a308                 | __system___float_tointeger_ret
2a308     2D 00 64 FD | 	ret
2a30c                 | 
2a30c                 | __system___float_Unpack
2a30c     09 01 02 F6 | 	mov	_var01, arg01
2a310     1F 00 46 F0 | 	shr	_var01, #31
2a314     09 03 02 F6 | 	mov	_var02, arg01
2a318     01 02 66 F0 | 	shl	_var02, #1
2a31c     18 02 4E F0 | 	shr	_var02, #24 wz
2a320     17 13 06 F4 | 	bitl	arg01, #279
2a324     06 12 66 50 |  if_ne	shl	arg01, #6
2a328     1D 12 26 54 |  if_ne	bith	arg01, #29
2a32c     1C 00 90 5D |  if_ne	jmp	#LR__3710
2a330     09 05 92 F7 | 	encod	_var03, arg01 wc
2a334     01 04 06 C1 |  if_b	add	_var03, #1
2a338     17 04 86 F1 | 	sub	_var03, #23
2a33c     02 03 02 F6 | 	mov	_var02, _var03
2a340     07 FC 05 F6 | 	mov	result2, #7
2a344     02 FD 81 F1 | 	sub	result2, _var03
2a348     FE 12 62 F0 | 	shl	arg01, result2
2a34c                 | LR__3710
2a34c     7F 02 86 F1 | 	sub	_var02, #127
2a350     09 FF 01 F6 | 	mov	result3, arg01
2a354     00 FB 01 F6 | 	mov	result1, _var01
2a358     01 FD 01 F6 | 	mov	result2, _var02
2a35c                 | __system___float_Unpack_ret
2a35c     2D 00 64 FD | 	ret
2a360                 | 
2a360                 | __system___float_Pack
2a360     00 00 06 F6 | 	mov	_var01, #0
2a364     00 16 0E F2 | 	cmp	arg03, #0 wz
2a368     8C 00 90 AD |  if_e	jmp	#LR__3721
2a36c     0B 03 92 F7 | 	encod	_var02, arg03 wc
2a370     01 02 06 C1 |  if_b	add	_var02, #1
2a374     21 00 06 F6 | 	mov	_var01, #33
2a378     01 01 82 F1 | 	sub	_var01, _var02
2a37c     00 17 62 F0 | 	shl	arg03, _var01
2a380     03 02 06 F6 | 	mov	_var02, #3
2a384     00 03 82 F1 | 	sub	_var02, _var01
2a388     01 15 02 F1 | 	add	arg02, _var02
2a38c     0A 05 02 F6 | 	mov	_var03, arg02
2a390     00 17 06 F1 | 	add	arg03, #256
2a394     0B 03 02 F6 | 	mov	_var02, arg03
2a398     FF 02 2E F5 | 	andn	_var02, #255 wz
2a39c     01 04 06 A1 |  if_e	add	_var03, #1
2a3a0     7F 04 06 F1 | 	add	_var03, #127
2a3a4     FF FF 7F FF 
2a3a8     E9 05 46 F3 | 	fges	_var03, ##-23
2a3ac     FF 04 66 F3 | 	fles	_var03, #255
2a3b0     01 04 56 F2 | 	cmps	_var03, #1 wc
2a3b4     1C 00 90 3D |  if_ae	jmp	#LR__3720
2a3b8     01 16 46 F0 | 	shr	arg03, #1
2a3bc     1F 02 C6 F9 | 	decod	_var02, #31
2a3c0     0B 03 02 F1 | 	add	_var02, arg03
2a3c4     02 05 62 F6 | 	neg	_var03, _var03
2a3c8     02 03 42 F0 | 	shr	_var02, _var03
2a3cc     01 17 02 F6 | 	mov	arg03, _var02
2a3d0     00 04 06 F6 | 	mov	_var03, #0
2a3d4                 | LR__3720
2a3d4     09 FB 01 F6 | 	mov	result1, arg01
2a3d8     1F FA 65 F0 | 	shl	result1, #31
2a3dc     02 03 02 F6 | 	mov	_var02, _var03
2a3e0     17 02 66 F0 | 	shl	_var02, #23
2a3e4     01 FB 41 F5 | 	or	result1, _var02
2a3e8     0B 07 02 F6 | 	mov	_var04, arg03
2a3ec     09 06 46 F0 | 	shr	_var04, #9
2a3f0     03 FB 41 F5 | 	or	result1, _var04
2a3f4     04 00 90 FD | 	jmp	#__system___float_Pack_ret
2a3f8                 | LR__3721
2a3f8     00 FB 01 F6 | 	mov	result1, _var01
2a3fc                 | __system___float_Pack_ret
2a3fc     2D 00 64 FD | 	ret
2a400                 | 
2a400                 | __system___basic_print_float
2a400     05 4A 05 F6 | 	mov	COUNT_, #5
2a404     A8 00 A0 FD | 	call	#pushregs_
2a408     09 27 02 F6 | 	mov	local01, arg01
2a40c     0A 29 02 F6 | 	mov	local02, arg02
2a410     0B 2B 0A F6 | 	mov	local03, arg03 wz
2a414     0C 2D 02 F6 | 	mov	local04, arg04
2a418     14 00 90 5D |  if_ne	jmp	#LR__3730
2a41c     23 2C 0E F2 | 	cmp	local04, #35 wz
2a420     80 02 10 AF 
2a424     00 2E 06 A6 |  if_e	mov	local05, ##537198592
2a428     1D 2E C6 59 |  if_ne	decod	local05, #29
2a42c     17 2B 02 F6 | 	mov	local03, local05
2a430                 | LR__3730
2a430     13 13 02 F6 | 	mov	arg01, local01
2a434     D8 27 B0 FD | 	call	#__system___gettxfunc
2a438     FD 2E 0A F6 | 	mov	local05, result1 wz
2a43c     00 FA 05 A6 |  if_e	mov	result1, #0
2a440     17 13 02 56 |  if_ne	mov	arg01, local05
2a444     15 15 02 56 |  if_ne	mov	arg02, local03
2a448     14 17 02 56 |  if_ne	mov	arg03, local02
2a44c     16 19 02 56 |  if_ne	mov	arg04, local04
2a450     6C DC BF 5D |  if_ne	call	#__system___fmtfloat
2a454     A7 F0 03 F6 | 	mov	ptra, fp
2a458     B2 00 A0 FD | 	call	#popregs_
2a45c                 | __system___basic_print_float_ret
2a45c     2D 00 64 FD | 	ret
2a460                 | 
2a460                 | __system____builtin_atoi
2a460     07 4A 05 F6 | 	mov	COUNT_, #7
2a464     A8 00 A0 FD | 	call	#pushregs_
2a468                 | __system____builtin_atoi_enter
2a468     09 27 02 F6 | 	mov	local01, arg01
2a46c     0A 29 02 F6 | 	mov	local02, arg02
2a470     00 2A 06 F6 | 	mov	local03, #0
2a474     00 2C 06 F6 | 	mov	local04, #0
2a478     00 2E 06 F6 | 	mov	local05, #0
2a47c     97 1C 48 FB | 	callpa	#(@LR__3742-@LR__3740)>>2,fcache_load_ptr_
2a480                 | LR__3740
2a480     13 31 C2 FA | 	rdbyte	local06, local01
2a484     20 30 0E F2 | 	cmp	local06, #32 wz
2a488     01 26 06 A1 |  if_e	add	local01, #1
2a48c     F0 FF 9F AD |  if_e	jmp	#LR__3740
2a490     13 33 C2 FA | 	rdbyte	local07, local01
2a494                 | LR__3741
2a494     2D 32 0E F2 | 	cmp	local07, #45 wz
2a498     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
2a49c     18 00 90 5D |  if_ne	jmp	#LR__3743
2a4a0     01 26 06 F1 | 	add	local01, #1
2a4a4     2D 32 0E F2 | 	cmp	local07, #45 wz
2a4a8     01 30 06 A6 |  if_e	mov	local06, #1
2a4ac     18 2F C2 A2 |  if_e	subr	local05, local06
2a4b0     13 33 C2 FA | 	rdbyte	local07, local01
2a4b4     DC FF 9F FD | 	jmp	#LR__3741
2a4b8                 | LR__3742
2a4b8                 | LR__3743
2a4b8     00 28 0E F2 | 	cmp	local02, #0 wz
2a4bc     1C 00 90 5D |  if_ne	jmp	#LR__3745
2a4c0     24 32 0E F2 | 	cmp	local07, #36 wz
2a4c4     10 28 06 A6 |  if_e	mov	local02, #16
2a4c8     01 26 06 A1 |  if_e	add	local01, #1
2a4cc     0C 00 90 AD |  if_e	jmp	#LR__3744
2a4d0     25 32 0E F2 | 	cmp	local07, #37 wz
2a4d4     02 28 06 A6 |  if_e	mov	local02, #2
2a4d8     01 26 06 A1 |  if_e	add	local01, #1
2a4dc                 | LR__3744
2a4dc                 | LR__3745
2a4dc     97 48 48 FB | 	callpa	#(@LR__3753-@LR__3746)>>2,fcache_load_ptr_
2a4e0                 | LR__3746
2a4e0                 | LR__3747
2a4e0     13 33 C2 FA | 	rdbyte	local07, local01
2a4e4     5F 32 0E F2 | 	cmp	local07, #95 wz
2a4e8     01 26 06 F1 | 	add	local01, #1
2a4ec     F0 FF 9F AD |  if_e	jmp	#LR__3747
2a4f0     30 32 0E F2 | 	cmp	local07, #48 wz
2a4f4     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
2a4f8     00 2C 06 A6 |  if_e	mov	local04, #0
2a4fc     60 00 90 AD |  if_e	jmp	#LR__3752
2a500     31 32 56 F2 | 	cmps	local07, #49 wc
2a504     18 00 90 CD |  if_b	jmp	#LR__3748
2a508     3A 32 56 F2 | 	cmps	local07, #58 wc
2a50c     19 2D 02 C6 |  if_b	mov	local04, local07
2a510     30 2C 86 C1 |  if_b	sub	local04, #48
2a514     00 28 0E C2 |  if_b	cmp	local02, #0 wz
2a518     0A 28 06 86 |  if_c_and_z	mov	local02, #10
2a51c     40 00 90 CD |  if_b	jmp	#LR__3751
2a520                 | LR__3748
2a520     0B 28 56 F2 | 	cmps	local02, #11 wc
2a524     61 32 56 32 |  if_ae	cmps	local07, #97 wc
2a528     14 00 90 CD |  if_b	jmp	#LR__3749
2a52c     67 32 56 F2 | 	cmps	local07, #103 wc
2a530     61 32 86 C1 |  if_b	sub	local07, #97
2a534     0A 2C 06 C6 |  if_b	mov	local04, #10
2a538     19 2D 02 C1 |  if_b	add	local04, local07
2a53c     20 00 90 CD |  if_b	jmp	#LR__3750
2a540                 | LR__3749
2a540     0B 28 56 F2 | 	cmps	local02, #11 wc
2a544     41 32 56 32 |  if_ae	cmps	local07, #65 wc
2a548     24 00 90 CD |  if_b	jmp	#LR__3754
2a54c     47 32 56 F2 | 	cmps	local07, #71 wc
2a550     41 32 86 C1 |  if_b	sub	local07, #65
2a554     0A 2C 06 C6 |  if_b	mov	local04, #10
2a558     19 2D 02 C1 |  if_b	add	local04, local07
2a55c     10 00 90 3D |  if_ae	jmp	#LR__3754
2a560                 | LR__3750
2a560                 | LR__3751
2a560                 | LR__3752
2a560     15 29 02 FD | 	qmul	local02, local03
2a564     18 2A 62 FD | 	getqx	local03
2a568     16 2B 02 F1 | 	add	local03, local04
2a56c     70 FF 9F FD | 	jmp	#LR__3746
2a570                 | LR__3753
2a570                 | LR__3754
2a570     00 28 0E F2 | 	cmp	local02, #0 wz
2a574     64 00 90 5D |  if_ne	jmp	#LR__3760
2a578     78 32 0E F2 | 	cmp	local07, #120 wz
2a57c     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
2a580     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
2a584     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
2a588     14 00 90 5D |  if_ne	jmp	#LR__3755
2a58c     13 13 02 F6 | 	mov	arg01, local01
2a590     10 14 06 F6 | 	mov	arg02, #16
2a594     C8 FE BF FD | 	call	#__system____builtin_atoi
2a598     FD 2A 02 F6 | 	mov	local03, result1
2a59c     3C 00 90 FD | 	jmp	#LR__3759
2a5a0                 | LR__3755
2a5a0     62 32 0E F2 | 	cmp	local07, #98 wz
2a5a4     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
2a5a8     14 00 90 5D |  if_ne	jmp	#LR__3756
2a5ac     13 13 02 F6 | 	mov	arg01, local01
2a5b0     02 14 06 F6 | 	mov	arg02, #2
2a5b4     A8 FE BF FD | 	call	#__system____builtin_atoi
2a5b8     FD 2A 02 F6 | 	mov	local03, result1
2a5bc     1C 00 90 FD | 	jmp	#LR__3758
2a5c0                 | LR__3756
2a5c0     6F 32 0E F2 | 	cmp	local07, #111 wz
2a5c4     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
2a5c8     10 00 90 5D |  if_ne	jmp	#LR__3757
2a5cc     13 13 02 F6 | 	mov	arg01, local01
2a5d0     08 14 06 F6 | 	mov	arg02, #8
2a5d4     88 FE BF FD | 	call	#__system____builtin_atoi
2a5d8     FD 2A 02 F6 | 	mov	local03, result1
2a5dc                 | LR__3757
2a5dc                 | LR__3758
2a5dc                 | LR__3759
2a5dc                 | LR__3760
2a5dc     00 2E 0E F2 | 	cmp	local05, #0 wz
2a5e0     15 2B 62 56 |  if_ne	neg	local03, local03
2a5e4     15 FB 01 F6 | 	mov	result1, local03
2a5e8     A7 F0 03 F6 | 	mov	ptra, fp
2a5ec     B2 00 A0 FD | 	call	#popregs_
2a5f0                 | __system____builtin_atoi_ret
2a5f0     2D 00 64 FD | 	ret
2a5f4                 | 
2a5f4                 | __system____builtin_atof
2a5f4     07 4A 05 F6 | 	mov	COUNT_, #7
2a5f8     A8 00 A0 FD | 	call	#pushregs_
2a5fc     09 27 02 F6 | 	mov	local01, arg01
2a600     00 28 06 F6 | 	mov	local02, #0
2a604     00 2A 06 F6 | 	mov	local03, #0
2a608     00 2C 06 F6 | 	mov	local04, #0
2a60c     00 2E 06 F6 | 	mov	local05, #0
2a610     97 08 48 FB | 	callpa	#(@LR__3771-@LR__3770)>>2,fcache_load_ptr_
2a614                 | LR__3770
2a614     13 17 C2 FA | 	rdbyte	arg03, local01
2a618     20 16 0E F2 | 	cmp	arg03, #32 wz
2a61c     01 26 06 A1 |  if_e	add	local01, #1
2a620     F0 FF 9F AD |  if_e	jmp	#LR__3770
2a624                 | LR__3771
2a624     13 31 C2 FA | 	rdbyte	local06, local01
2a628                 | LR__3772
2a628     2B 30 0E F2 | 	cmp	local06, #43 wz
2a62c     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
2a630     14 00 90 5D |  if_ne	jmp	#LR__3773
2a634     2D 30 0E F2 | 	cmp	local06, #45 wz
2a638     1F 2C E6 A4 |  if_e	bitnot	local04, #31
2a63c     01 26 06 F1 | 	add	local01, #1
2a640     13 31 C2 FA | 	rdbyte	local06, local01
2a644     E0 FF 9F FD | 	jmp	#LR__3772
2a648                 | LR__3773
2a648                 | LR__3774
2a648     97 08 48 FB | 	callpa	#(@LR__3776-@LR__3775)>>2,fcache_load_ptr_
2a64c                 | LR__3775
2a64c     13 31 C2 FA | 	rdbyte	local06, local01
2a650     5F 30 0E F2 | 	cmp	local06, #95 wz
2a654     01 26 06 F1 | 	add	local01, #1
2a658     F0 FF 9F AD |  if_e	jmp	#LR__3775
2a65c                 | LR__3776
2a65c     00 30 0E F2 | 	cmp	local06, #0 wz
2a660     5C 00 90 AD |  if_e	jmp	#LR__3778
2a664     30 30 56 F2 | 	cmps	local06, #48 wc
2a668     44 00 90 CD |  if_b	jmp	#LR__3777
2a66c     3A 30 56 F2 | 	cmps	local06, #58 wc
2a670     3C 00 90 3D |  if_ae	jmp	#LR__3777
2a674     14 13 02 F6 | 	mov	arg01, local02
2a678     00 90 20 FF 
2a67c     00 14 06 F6 | 	mov	arg02, ##1092616192
2a680     64 F7 BF FD | 	call	#__system___float_mul
2a684     FD 28 02 F6 | 	mov	local02, result1
2a688     30 30 86 F1 | 	sub	local06, #48
2a68c     18 13 02 F6 | 	mov	arg01, local06
2a690     50 F3 BF FD | 	call	#__system___float_fromuns
2a694     FD 14 02 F6 | 	mov	arg02, result1
2a698     14 13 02 F6 | 	mov	arg01, local02
2a69c     78 F3 BF FD | 	call	#__system___float_add
2a6a0     FD 28 02 F6 | 	mov	local02, result1
2a6a4     00 2E 0E F2 | 	cmp	local05, #0 wz
2a6a8     01 2A 86 51 |  if_ne	sub	local03, #1
2a6ac     98 FF 9F FD | 	jmp	#LR__3774
2a6b0                 | LR__3777
2a6b0     2E 30 0E F2 | 	cmp	local06, #46 wz
2a6b4     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
2a6b8     01 2E 06 A6 |  if_e	mov	local05, #1
2a6bc     88 FF 9F AD |  if_e	jmp	#LR__3774
2a6c0                 | LR__3778
2a6c0     45 30 0E F2 | 	cmp	local06, #69 wz
2a6c4     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
2a6c8     18 00 90 5D |  if_ne	jmp	#LR__3779
2a6cc     13 13 02 F6 | 	mov	arg01, local01
2a6d0     00 14 06 F6 | 	mov	arg02, #0
2a6d4     88 FD BF FD | 	call	#__system____builtin_atoi
2a6d8     15 FB 01 F1 | 	add	result1, local03
2a6dc     FD 32 02 F6 | 	mov	local07, result1
2a6e0     04 00 90 FD | 	jmp	#LR__3780
2a6e4                 | LR__3779
2a6e4     15 33 02 F6 | 	mov	local07, local03
2a6e8                 | LR__3780
2a6e8     19 17 02 F6 | 	mov	arg03, local07
2a6ec     14 13 02 F6 | 	mov	arg01, local02
2a6f0     00 90 20 FF 
2a6f4     00 14 06 F6 | 	mov	arg02, ##1092616192
2a6f8     F4 06 B0 FD | 	call	#__system___float_pow_n
2a6fc     16 FB 61 F5 | 	xor	result1, local04
2a700     A7 F0 03 F6 | 	mov	ptra, fp
2a704     B2 00 A0 FD | 	call	#popregs_
2a708                 | __system____builtin_atof_ret
2a708     2D 00 64 FD | 	ret
2a70c                 | 
2a70c                 | __system____builtin_ilogb
2a70c     FC FB BF FD | 	call	#__system___float_Unpack
2a710     00 FE 0D F2 | 	cmp	result3, #0 wz
2a714     00 00 40 AF 
2a718     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
2a71c     24 00 90 AD |  if_e	jmp	#LR__3791
2a720     80 FC 0D F2 | 	cmp	result2, #128 wz
2a724     18 00 90 5D |  if_ne	jmp	#LR__3790
2a728     00 00 10 FF 
2a72c     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
2a730     1E FA CD A9 |  if_e	bmask	result1, #30
2a734     0C 00 90 AD |  if_e	jmp	#LR__3791
2a738     1F FA C5 F9 | 	decod	result1, #31
2a73c     04 00 90 FD | 	jmp	#LR__3791
2a740                 | LR__3790
2a740     FE FA 01 F6 | 	mov	result1, result2
2a744                 | LR__3791
2a744                 | __system____builtin_ilogb_ret
2a744     2D 00 64 FD | 	ret
2a748                 | 
2a748                 | __system____builtin_sinf
2a748     03 4A 05 F6 | 	mov	COUNT_, #3
2a74c     A8 00 A0 FD | 	call	#pushregs_
2a750     09 27 02 F6 | 	mov	local01, arg01
2a754     87 64 20 FF 
2a758     DB 15 06 F6 | 	mov	arg02, ##1086918619
2a75c     8C F8 BF FD | 	call	#__system___float_div
2a760     FD 12 02 F6 | 	mov	arg01, result1
2a764     00 14 06 F6 | 	mov	arg02, #0
2a768     44 FB BF FD | 	call	#__system___float_tointeger
2a76c     FD 16 0A F6 | 	mov	arg03, result1 wz
2a770     44 00 90 AD |  if_e	jmp	#LR__3800
2a774     0B 13 52 F6 | 	abs	arg01, arg03 wc
2a778     1F 28 C6 C9 |  if_b	decod	local02, #31
2a77c     00 28 06 36 |  if_ae	mov	local02, #0
2a780     60 F2 BF FD | 	call	#__system___float_fromuns
2a784     14 FB 61 F5 | 	xor	result1, local02
2a788     FD 12 02 F6 | 	mov	arg01, result1
2a78c     1E 14 C6 F9 | 	decod	arg02, #30
2a790     54 F6 BF FD | 	call	#__system___float_mul
2a794     FD 12 02 F6 | 	mov	arg01, result1
2a798     87 24 20 FF 
2a79c     DB 15 06 F6 | 	mov	arg02, ##1078530011
2a7a0     44 F6 BF FD | 	call	#__system___float_mul
2a7a4     FD 14 02 F6 | 	mov	arg02, result1
2a7a8     13 13 02 F6 | 	mov	arg01, local01
2a7ac     1F 14 E6 F4 | 	bitnot	arg02, #31
2a7b0     64 F2 BF FD | 	call	#__system___float_add
2a7b4     FD 26 02 F6 | 	mov	local01, result1
2a7b8                 | LR__3800
2a7b8     13 13 02 F6 | 	mov	arg01, local01
2a7bc     66 E6 1E FF 
2a7c0     CD 14 06 F6 | 	mov	arg02, ##1036831949
2a7c4     01 16 06 F6 | 	mov	arg03, #1
2a7c8     50 FA BF FD | 	call	#__system___float_cmp
2a7cc     00 FA 55 F2 | 	cmps	result1, #0 wc
2a7d0     5C 00 90 3D |  if_ae	jmp	#LR__3801
2a7d4     13 13 02 F6 | 	mov	arg01, local01
2a7d8     66 E6 5E FF 
2a7dc     CD 14 06 F6 | 	mov	arg02, ##-1110651699
2a7e0     01 16 66 F6 | 	neg	arg03, #1
2a7e4     34 FA BF FD | 	call	#__system___float_cmp
2a7e8     01 FA 55 F2 | 	cmps	result1, #1 wc
2a7ec     40 00 90 CD |  if_b	jmp	#LR__3801
2a7f0     13 13 02 F6 | 	mov	arg01, local01
2a7f4     13 15 02 F6 | 	mov	arg02, local01
2a7f8     EC F5 BF FD | 	call	#__system___float_mul
2a7fc     FD 12 02 F6 | 	mov	arg01, result1
2a800     13 15 02 F6 | 	mov	arg02, local01
2a804     E0 F5 BF FD | 	call	#__system___float_mul
2a808     FD 12 02 F6 | 	mov	arg01, result1
2a80c     00 60 20 FF 
2a810     00 14 06 F6 | 	mov	arg02, ##1086324736
2a814     D4 F7 BF FD | 	call	#__system___float_div
2a818     FD 14 02 F6 | 	mov	arg02, result1
2a81c     13 13 02 F6 | 	mov	arg01, local01
2a820     1F 14 E6 F4 | 	bitnot	arg02, #31
2a824     F0 F1 BF FD | 	call	#__system___float_add
2a828     FD 2A 02 F6 | 	mov	local03, result1
2a82c     54 00 90 FD | 	jmp	#LR__3802
2a830                 | LR__3801
2a830     13 13 02 F6 | 	mov	arg01, local01
2a834     7C 91 26 FF 
2a838     83 15 06 F6 | 	mov	arg02, ##1294137731
2a83c     A8 F5 BF FD | 	call	#__system___float_mul
2a840     FD 12 02 F6 | 	mov	arg01, result1
2a844     00 14 06 F6 | 	mov	arg02, #0
2a848     64 FA BF FD | 	call	#__system___float_tointeger
2a84c     02 FA 65 F0 | 	shl	result1, #2
2a850     00 00 A0 FF 
2a854     FD 00 48 FD | 	qrotate	##1073741824, result1
2a858     19 12 62 FD | 	getqy	arg01
2a85c     09 13 52 F6 | 	abs	arg01, arg01 wc
2a860     1F 28 C6 C9 |  if_b	decod	local02, #31
2a864     00 28 06 36 |  if_ae	mov	local02, #0
2a868     78 F1 BF FD | 	call	#__system___float_fromuns
2a86c     14 FB 61 F5 | 	xor	result1, local02
2a870     FD 12 02 F6 | 	mov	arg01, result1
2a874     00 40 27 FF 
2a878     00 14 06 F6 | 	mov	arg02, ##1317011456
2a87c     6C F7 BF FD | 	call	#__system___float_div
2a880     FD 2A 02 F6 | 	mov	local03, result1
2a884                 | LR__3802
2a884     15 FB 01 F6 | 	mov	result1, local03
2a888     A7 F0 03 F6 | 	mov	ptra, fp
2a88c     B2 00 A0 FD | 	call	#popregs_
2a890                 | __system____builtin_sinf_ret
2a890     2D 00 64 FD | 	ret
2a894                 | 
2a894                 | __system____builtin_tanf
2a894     02 4A 05 F6 | 	mov	COUNT_, #2
2a898     A8 00 A0 FD | 	call	#pushregs_
2a89c     09 27 02 F6 | 	mov	local01, arg01
2a8a0     A4 FE BF FD | 	call	#__system____builtin_sinf
2a8a4     FD 28 02 F6 | 	mov	local02, result1
2a8a8     13 15 02 F6 | 	mov	arg02, local01
2a8ac     87 E4 1F FF 
2a8b0     DB 13 06 F6 | 	mov	arg01, ##1070141403
2a8b4     1F 14 E6 F4 | 	bitnot	arg02, #31
2a8b8     5C F1 BF FD | 	call	#__system___float_add
2a8bc     FD 12 02 F6 | 	mov	arg01, result1
2a8c0     84 FE BF FD | 	call	#__system____builtin_sinf
2a8c4     FD 14 02 F6 | 	mov	arg02, result1
2a8c8     14 13 02 F6 | 	mov	arg01, local02
2a8cc     1C F7 BF FD | 	call	#__system___float_div
2a8d0     A7 F0 03 F6 | 	mov	ptra, fp
2a8d4     B2 00 A0 FD | 	call	#popregs_
2a8d8                 | __system____builtin_tanf_ret
2a8d8     2D 00 64 FD | 	ret
2a8dc                 | 
2a8dc                 | __system____builtin_asinf
2a8dc     01 4A 05 F6 | 	mov	COUNT_, #1
2a8e0     A8 00 A0 FD | 	call	#pushregs_
2a8e4     09 27 02 F6 | 	mov	local01, arg01
2a8e8     13 15 02 F6 | 	mov	arg02, local01
2a8ec     13 13 02 F6 | 	mov	arg01, local01
2a8f0     F4 F4 BF FD | 	call	#__system___float_mul
2a8f4     FD 14 02 F6 | 	mov	arg02, result1
2a8f8     00 C0 1F FF 
2a8fc     00 12 06 F6 | 	mov	arg01, ##1065353216
2a900     1F 14 E6 F4 | 	bitnot	arg02, #31
2a904     10 F1 BF FD | 	call	#__system___float_add
2a908     FD 12 02 F6 | 	mov	arg01, result1
2a90c     00 F4 BF FD | 	call	#__system___float_sqrt
2a910     FD 14 02 F6 | 	mov	arg02, result1
2a914     13 13 02 F6 | 	mov	arg01, local01
2a918     58 00 B0 FD | 	call	#__system____builtin_atan2f
2a91c     A7 F0 03 F6 | 	mov	ptra, fp
2a920     B2 00 A0 FD | 	call	#popregs_
2a924                 | __system____builtin_asinf_ret
2a924     2D 00 64 FD | 	ret
2a928                 | 
2a928                 | __system____builtin_acosf
2a928     01 4A 05 F6 | 	mov	COUNT_, #1
2a92c     A8 00 A0 FD | 	call	#pushregs_
2a930     09 27 02 F6 | 	mov	local01, arg01
2a934     13 15 02 F6 | 	mov	arg02, local01
2a938     13 13 02 F6 | 	mov	arg01, local01
2a93c     A8 F4 BF FD | 	call	#__system___float_mul
2a940     FD 14 02 F6 | 	mov	arg02, result1
2a944     00 C0 1F FF 
2a948     00 12 06 F6 | 	mov	arg01, ##1065353216
2a94c     1F 14 E6 F4 | 	bitnot	arg02, #31
2a950     C4 F0 BF FD | 	call	#__system___float_add
2a954     FD 12 02 F6 | 	mov	arg01, result1
2a958     B4 F3 BF FD | 	call	#__system___float_sqrt
2a95c     FD 12 02 F6 | 	mov	arg01, result1
2a960     13 15 02 F6 | 	mov	arg02, local01
2a964     0C 00 B0 FD | 	call	#__system____builtin_atan2f
2a968     A7 F0 03 F6 | 	mov	ptra, fp
2a96c     B2 00 A0 FD | 	call	#popregs_
2a970                 | __system____builtin_acosf_ret
2a970     2D 00 64 FD | 	ret
2a974                 | 
2a974                 | __system____builtin_atan2f
2a974     04 4A 05 F6 | 	mov	COUNT_, #4
2a978     A8 00 A0 FD | 	call	#pushregs_
2a97c     09 27 02 F6 | 	mov	local01, arg01
2a980     0A 29 02 F6 | 	mov	local02, arg02
2a984     13 13 02 F6 | 	mov	arg01, local01
2a988     00 14 06 F6 | 	mov	arg02, #0
2a98c     01 16 06 F6 | 	mov	arg03, #1
2a990     88 F8 BF FD | 	call	#__system___float_cmp
2a994     00 FA 0D F2 | 	cmp	result1, #0 wz
2a998     28 00 90 5D |  if_ne	jmp	#LR__3810
2a99c     14 13 02 F6 | 	mov	arg01, local02
2a9a0     00 14 06 F6 | 	mov	arg02, #0
2a9a4     01 16 06 F6 | 	mov	arg03, #1
2a9a8     70 F8 BF FD | 	call	#__system___float_cmp
2a9ac     00 FA 55 F2 | 	cmps	result1, #0 wc
2a9b0     87 24 60 CF 
2a9b4     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
2a9b8     DC 00 90 CD |  if_b	jmp	#LR__3811
2a9bc     00 FA 05 F6 | 	mov	result1, #0
2a9c0     D4 00 90 FD | 	jmp	#LR__3811
2a9c4                 | LR__3810
2a9c4     14 13 02 F6 | 	mov	arg01, local02
2a9c8     14 15 02 F6 | 	mov	arg02, local02
2a9cc     18 F4 BF FD | 	call	#__system___float_mul
2a9d0     FD 2A 02 F6 | 	mov	local03, result1
2a9d4     13 13 02 F6 | 	mov	arg01, local01
2a9d8     13 15 02 F6 | 	mov	arg02, local01
2a9dc     08 F4 BF FD | 	call	#__system___float_mul
2a9e0     FD 14 02 F6 | 	mov	arg02, result1
2a9e4     15 13 02 F6 | 	mov	arg01, local03
2a9e8     2C F0 BF FD | 	call	#__system___float_add
2a9ec     FD 12 02 F6 | 	mov	arg01, result1
2a9f0     1C F3 BF FD | 	call	#__system___float_sqrt
2a9f4     FD 2A 02 F6 | 	mov	local03, result1
2a9f8     14 13 02 F6 | 	mov	arg01, local02
2a9fc     15 15 02 F6 | 	mov	arg02, local03
2aa00     E8 F5 BF FD | 	call	#__system___float_div
2aa04     FD 28 02 F6 | 	mov	local02, result1
2aa08     13 13 02 F6 | 	mov	arg01, local01
2aa0c     15 15 02 F6 | 	mov	arg02, local03
2aa10     D8 F5 BF FD | 	call	#__system___float_div
2aa14     FD 26 02 F6 | 	mov	local01, result1
2aa18     00 40 27 FF 
2aa1c     00 12 06 F6 | 	mov	arg01, ##1317011456
2aa20     14 15 02 F6 | 	mov	arg02, local02
2aa24     C0 F3 BF FD | 	call	#__system___float_mul
2aa28     FD 12 02 F6 | 	mov	arg01, result1
2aa2c     00 14 06 F6 | 	mov	arg02, #0
2aa30     7C F8 BF FD | 	call	#__system___float_tointeger
2aa34     FD 2A 02 F6 | 	mov	local03, result1
2aa38     00 40 27 FF 
2aa3c     00 12 06 F6 | 	mov	arg01, ##1317011456
2aa40     13 15 02 F6 | 	mov	arg02, local01
2aa44     A0 F3 BF FD | 	call	#__system___float_mul
2aa48     FD 12 02 F6 | 	mov	arg01, result1
2aa4c     00 14 06 F6 | 	mov	arg02, #0
2aa50     5C F8 BF FD | 	call	#__system___float_tointeger
2aa54     FD 2A 52 FD | 	qvector	local03, result1
2aa58     87 24 20 FF 
2aa5c     DB 2B 06 F6 | 	mov	local03, ##1078530011
2aa60     19 12 62 FD | 	getqy	arg01
2aa64     01 12 C6 F0 | 	sar	arg01, #1
2aa68     09 13 52 F6 | 	abs	arg01, arg01 wc
2aa6c     1F 2C C6 C9 |  if_b	decod	local04, #31
2aa70     00 2C 06 36 |  if_ae	mov	local04, #0
2aa74     6C EF BF FD | 	call	#__system___float_fromuns
2aa78     16 FB 61 F5 | 	xor	result1, local04
2aa7c     FD 12 02 F6 | 	mov	arg01, result1
2aa80     00 40 27 FF 
2aa84     00 14 06 F6 | 	mov	arg02, ##1317011456
2aa88     60 F5 BF FD | 	call	#__system___float_div
2aa8c     FD 14 02 F6 | 	mov	arg02, result1
2aa90     15 13 02 F6 | 	mov	arg01, local03
2aa94     50 F3 BF FD | 	call	#__system___float_mul
2aa98                 | LR__3811
2aa98     A7 F0 03 F6 | 	mov	ptra, fp
2aa9c     B2 00 A0 FD | 	call	#popregs_
2aaa0                 | __system____builtin_atan2f_ret
2aaa0     2D 00 64 FD | 	ret
2aaa4                 | 
2aaa4                 | __system____builtin_exp2f
2aaa4     04 4A 05 F6 | 	mov	COUNT_, #4
2aaa8     A8 00 A0 FD | 	call	#pushregs_
2aaac     09 27 02 F6 | 	mov	local01, arg01
2aab0     00 7F 21 FF 
2aab4     00 14 06 F6 | 	mov	arg02, ##1123942400
2aab8     01 16 66 F6 | 	neg	arg03, #1
2aabc     5C F7 BF FD | 	call	#__system___float_cmp
2aac0     00 FA 55 F2 | 	cmps	result1, #0 wc
2aac4     00 C0 3F 3F 
2aac8     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
2aacc     DC 00 90 3D |  if_ae	jmp	#LR__3821
2aad0     13 13 02 F6 | 	mov	arg01, local01
2aad4     00 7F 61 FF 
2aad8     00 14 06 F6 | 	mov	arg02, ##-1023541248
2aadc     01 16 06 F6 | 	mov	arg03, #1
2aae0     38 F7 BF FD | 	call	#__system___float_cmp
2aae4     00 FA 55 F2 | 	cmps	result1, #0 wc
2aae8     00 FA 05 C6 |  if_b	mov	result1, #0
2aaec     BC 00 90 CD |  if_b	jmp	#LR__3821
2aaf0     13 13 02 F6 | 	mov	arg01, local01
2aaf4     00 14 06 F6 | 	mov	arg02, #0
2aaf8     B4 F7 BF FD | 	call	#__system___float_tointeger
2aafc     FD 28 02 F6 | 	mov	local02, result1
2ab00     14 13 52 F6 | 	abs	arg01, local02 wc
2ab04     1F 2A C6 C9 |  if_b	decod	local03, #31
2ab08     00 2A 06 36 |  if_ae	mov	local03, #0
2ab0c     D4 EE BF FD | 	call	#__system___float_fromuns
2ab10     15 FB 61 F5 | 	xor	result1, local03
2ab14     FD 14 02 F6 | 	mov	arg02, result1
2ab18     13 13 02 F6 | 	mov	arg01, local01
2ab1c     1F 14 E6 F4 | 	bitnot	arg02, #31
2ab20     F4 EE BF FD | 	call	#__system___float_add
2ab24     FD 2C 02 F6 | 	mov	local04, result1
2ab28     16 13 02 F6 | 	mov	arg01, local04
2ab2c     00 14 06 F6 | 	mov	arg02, #0
2ab30     01 16 06 F6 | 	mov	arg03, #1
2ab34     E4 F6 BF FD | 	call	#__system___float_cmp
2ab38     00 FA 55 F2 | 	cmps	result1, #0 wc
2ab3c     18 00 90 3D |  if_ae	jmp	#LR__3820
2ab40     16 13 02 F6 | 	mov	arg01, local04
2ab44     00 C0 1F FF 
2ab48     00 14 06 F6 | 	mov	arg02, ##1065353216
2ab4c     C8 EE BF FD | 	call	#__system___float_add
2ab50     FD 2C 02 F6 | 	mov	local04, result1
2ab54     01 28 86 F1 | 	sub	local02, #1
2ab58                 | LR__3820
2ab58     7F 28 06 F1 | 	add	local02, #127
2ab5c     17 28 66 F0 | 	shl	local02, #23
2ab60     16 13 02 F6 | 	mov	arg01, local04
2ab64     00 80 26 FF 
2ab68     00 14 06 F6 | 	mov	arg02, ##1291845632
2ab6c     78 F2 BF FD | 	call	#__system___float_mul
2ab70     FD 12 02 F6 | 	mov	arg01, result1
2ab74     00 14 06 F6 | 	mov	arg02, #0
2ab78     34 F7 BF FD | 	call	#__system___float_tointeger
2ab7c     FD 2C 0A F6 | 	mov	local04, result1 wz
2ab80     14 FB 01 A6 |  if_e	mov	result1, local02
2ab84     24 00 90 AD |  if_e	jmp	#LR__3821
2ab88     3E 2C 26 F4 | 	bith	local04, #62
2ab8c     0F 2C 62 FD | 	qexp	local04
2ab90     14 13 02 F6 | 	mov	arg01, local02
2ab94     18 14 62 FD | 	getqx	arg02
2ab98     01 14 06 F1 | 	add	arg02, #1
2ab9c     01 14 46 F0 | 	shr	arg02, #1
2aba0     00 80 1F FF 
2aba4     00 14 06 F1 | 	add	arg02, ##1056964608
2aba8     3C F2 BF FD | 	call	#__system___float_mul
2abac                 | LR__3821
2abac     A7 F0 03 F6 | 	mov	ptra, fp
2abb0     B2 00 A0 FD | 	call	#popregs_
2abb4                 | __system____builtin_exp2f_ret
2abb4     2D 00 64 FD | 	ret
2abb8                 | 
2abb8                 | __system____builtin_log2f
2abb8     06 4A 05 F6 | 	mov	COUNT_, #6
2abbc     A8 00 A0 FD | 	call	#pushregs_
2abc0     09 27 02 F6 | 	mov	local01, arg01
2abc4     09 29 0A F6 | 	mov	local02, arg01 wz
2abc8     00 00 40 5F 
2abcc     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
2abd0     00 40 00 AF 
2abd4     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2abd8     08 01 90 AD |  if_e	jmp	#LR__3834
2abdc     00 28 56 F2 | 	cmps	local02, #0 wc
2abe0     00 E0 3F CF 
2abe4     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2abe8     F8 00 90 CD |  if_b	jmp	#LR__3834
2abec     13 13 02 F6 | 	mov	arg01, local01
2abf0     00 90 20 FF 
2abf4     00 14 06 F6 | 	mov	arg02, ##1092616192
2abf8     01 16 06 F6 | 	mov	arg03, #1
2abfc     1C F6 BF FD | 	call	#__system___float_cmp
2ac00     00 FA 0D F2 | 	cmp	result1, #0 wz
2ac04     4D 2A 20 AF 
2ac08     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
2ac0c     D4 00 90 AD |  if_e	jmp	#LR__3834
2ac10     13 13 02 F6 | 	mov	arg01, local01
2ac14     FC 16 20 FF 
2ac18     54 14 06 F6 | 	mov	arg02, ##1076754516
2ac1c     01 16 06 F6 | 	mov	arg03, #1
2ac20     F8 F5 BF FD | 	call	#__system___float_cmp
2ac24     00 FA 0D F2 | 	cmp	result1, #0 wz
2ac28     55 DC 1F AF 
2ac2c     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
2ac30     B0 00 90 AD |  if_e	jmp	#LR__3834
2ac34     14 2B 02 F6 | 	mov	local03, local02
2ac38     17 2A 46 F0 | 	shr	local03, #23
2ac3c     15 2B E2 F8 | 	getbyte	local03, local03, #0
2ac40     17 29 06 F4 | 	bitl	local02, #279
2ac44     14 2D 02 F6 | 	mov	local04, local02
2ac48     FF 2A 0E F2 | 	cmp	local03, #255 wz
2ac4c     1C 00 90 5D |  if_ne	jmp	#LR__3830
2ac50     00 2C 0E F2 | 	cmp	local04, #0 wz
2ac54     00 C0 3F 5F 
2ac58     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
2ac5c     00 E0 3F AF 
2ac60     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
2ac64     17 FB 01 F6 | 	mov	result1, local05
2ac68     78 00 90 FD | 	jmp	#LR__3834
2ac6c                 | LR__3830
2ac6c     00 2A 0E F2 | 	cmp	local03, #0 wz
2ac70     17 2C 26 54 |  if_ne	bith	local04, #23
2ac74     7F 2A 86 51 |  if_ne	sub	local03, #127
2ac78     28 00 90 5D |  if_ne	jmp	#LR__3833
2ac7c     00 2C 0E F2 | 	cmp	local04, #0 wz
2ac80     00 40 00 AF 
2ac84     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2ac88     58 00 90 AD |  if_e	jmp	#LR__3834
2ac8c     7E 2A 66 F6 | 	neg	local03, #126
2ac90     97 08 48 FB | 	callpa	#(@LR__3832-@LR__3831)>>2,fcache_load_ptr_
2ac94                 | LR__3831
2ac94     17 2C 2E F4 | 	testbn	local04, #23 wz
2ac98     01 2C 66 A0 |  if_e	shl	local04, #1
2ac9c     01 2A 06 A1 |  if_e	add	local03, #1
2aca0     F0 FF 9F AD |  if_e	jmp	#LR__3831
2aca4                 | LR__3832
2aca4                 | LR__3833
2aca4     0E 2C 62 FD | 	qlog	local04
2aca8     01 2A 86 F1 | 	sub	local03, #1
2acac     15 13 52 F6 | 	abs	arg01, local03 wc
2acb0     1F 30 C6 C9 |  if_b	decod	local06, #31
2acb4     00 30 06 36 |  if_ae	mov	local06, #0
2acb8     18 2E 62 FD | 	getqx	local05
2acbc     9B 2E 06 F4 | 	bitl	local05, #155
2acc0     08 2E 06 F1 | 	add	local05, #8
2acc4     04 2E 46 F0 | 	shr	local05, #4
2acc8     00 C0 1F FF 
2accc     00 2E 06 F1 | 	add	local05, ##1065353216
2acd0     10 ED BF FD | 	call	#__system___float_fromuns
2acd4     18 FB 61 F5 | 	xor	result1, local06
2acd8     FD 14 02 F6 | 	mov	arg02, result1
2acdc     17 13 02 F6 | 	mov	arg01, local05
2ace0     34 ED BF FD | 	call	#__system___float_add
2ace4                 | LR__3834
2ace4     A7 F0 03 F6 | 	mov	ptra, fp
2ace8     B2 00 A0 FD | 	call	#popregs_
2acec                 | __system____builtin_log2f_ret
2acec     2D 00 64 FD | 	ret
2acf0                 | 
2acf0                 | __system____builtin_powf
2acf0     04 4A 05 F6 | 	mov	COUNT_, #4
2acf4     A8 00 A0 FD | 	call	#pushregs_
2acf8     09 27 02 F6 | 	mov	local01, arg01
2acfc     0A 29 02 F6 | 	mov	local02, arg02
2ad00     14 13 02 F6 | 	mov	arg01, local02
2ad04     00 14 06 F6 | 	mov	arg02, #0
2ad08     A4 F5 BF FD | 	call	#__system___float_tointeger
2ad0c     FD 2A 02 F6 | 	mov	local03, result1
2ad10     15 13 52 F6 | 	abs	arg01, local03 wc
2ad14     1F 2C C6 C9 |  if_b	decod	local04, #31
2ad18     00 2C 06 36 |  if_ae	mov	local04, #0
2ad1c     C4 EC BF FD | 	call	#__system___float_fromuns
2ad20     16 FB 61 F5 | 	xor	result1, local04
2ad24     FD 12 02 F6 | 	mov	arg01, result1
2ad28     14 15 02 F6 | 	mov	arg02, local02
2ad2c     01 16 06 F6 | 	mov	arg03, #1
2ad30     E8 F4 BF FD | 	call	#__system___float_cmp
2ad34     00 FA 0D F2 | 	cmp	result1, #0 wz
2ad38     18 00 90 5D |  if_ne	jmp	#LR__3840
2ad3c     00 C0 1F FF 
2ad40     00 12 06 F6 | 	mov	arg01, ##1065353216
2ad44     13 15 02 F6 | 	mov	arg02, local01
2ad48     15 17 02 F6 | 	mov	arg03, local03
2ad4c     A0 00 B0 FD | 	call	#__system___float_pow_n
2ad50     58 00 90 FD | 	jmp	#LR__3841
2ad54                 | LR__3840
2ad54     13 13 02 F6 | 	mov	arg01, local01
2ad58     00 14 06 F6 | 	mov	arg02, #0
2ad5c     01 16 06 F6 | 	mov	arg03, #1
2ad60     B8 F4 BF FD | 	call	#__system___float_cmp
2ad64     00 FA 55 F2 | 	cmps	result1, #0 wc
2ad68     00 E0 3F CF 
2ad6c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2ad70     38 00 90 CD |  if_b	jmp	#LR__3841
2ad74     13 13 02 F6 | 	mov	arg01, local01
2ad78     00 14 06 F6 | 	mov	arg02, #0
2ad7c     01 16 06 F6 | 	mov	arg03, #1
2ad80     98 F4 BF FD | 	call	#__system___float_cmp
2ad84     00 FA 0D F2 | 	cmp	result1, #0 wz
2ad88     00 FA 05 A6 |  if_e	mov	result1, #0
2ad8c     1C 00 90 AD |  if_e	jmp	#LR__3841
2ad90     13 13 02 F6 | 	mov	arg01, local01
2ad94     20 FE BF FD | 	call	#__system____builtin_log2f
2ad98     FD 12 02 F6 | 	mov	arg01, result1
2ad9c     14 15 02 F6 | 	mov	arg02, local02
2ada0     44 F0 BF FD | 	call	#__system___float_mul
2ada4     FD 12 02 F6 | 	mov	arg01, result1
2ada8     F8 FC BF FD | 	call	#__system____builtin_exp2f
2adac                 | LR__3841
2adac     A7 F0 03 F6 | 	mov	ptra, fp
2adb0     B2 00 A0 FD | 	call	#popregs_
2adb4                 | __system____builtin_powf_ret
2adb4     2D 00 64 FD | 	ret
2adb8                 | 
2adb8                 | __system____builtin_logbase
2adb8     02 4A 05 F6 | 	mov	COUNT_, #2
2adbc     A8 00 A0 FD | 	call	#pushregs_
2adc0     09 27 02 F6 | 	mov	local01, arg01
2adc4     0A 13 02 F6 | 	mov	arg01, arg02
2adc8     EC FD BF FD | 	call	#__system____builtin_log2f
2adcc     FD 28 02 F6 | 	mov	local02, result1
2add0     13 13 02 F6 | 	mov	arg01, local01
2add4     E0 FD BF FD | 	call	#__system____builtin_log2f
2add8     FD 14 02 F6 | 	mov	arg02, result1
2addc     14 13 02 F6 | 	mov	arg01, local02
2ade0     08 F2 BF FD | 	call	#__system___float_div
2ade4     A7 F0 03 F6 | 	mov	ptra, fp
2ade8     B2 00 A0 FD | 	call	#popregs_
2adec                 | __system____builtin_logbase_ret
2adec     2D 00 64 FD | 	ret
2adf0                 | 
2adf0                 | __system___float_pow_n
2adf0     05 4A 05 F6 | 	mov	COUNT_, #5
2adf4     A8 00 A0 FD | 	call	#pushregs_
2adf8     09 27 02 F6 | 	mov	local01, arg01
2adfc     0A 29 02 F6 | 	mov	local02, arg02
2ae00     0B 2B 02 F6 | 	mov	local03, arg03
2ae04     00 2A 56 F2 | 	cmps	local03, #0 wc
2ae08     18 00 90 3D |  if_ae	jmp	#LR__3850
2ae0c     01 2C 06 F6 | 	mov	local04, #1
2ae10     15 2B 62 F6 | 	neg	local03, local03
2ae14     00 2A 56 F2 | 	cmps	local03, #0 wc
2ae18     00 FA 05 C6 |  if_b	mov	result1, #0
2ae1c     94 00 90 CD |  if_b	jmp	#LR__3858
2ae20     04 00 90 FD | 	jmp	#LR__3851
2ae24                 | LR__3850
2ae24     00 2C 06 F6 | 	mov	local04, #0
2ae28                 | LR__3851
2ae28     00 C0 1F FF 
2ae2c     00 2E 06 F6 | 	mov	local05, ##1065353216
2ae30                 | LR__3852
2ae30     01 2A 56 F2 | 	cmps	local03, #1 wc
2ae34     30 00 90 CD |  if_b	jmp	#LR__3854
2ae38     01 2A CE F7 | 	test	local03, #1 wz
2ae3c     10 00 90 AD |  if_e	jmp	#LR__3853
2ae40     17 13 02 F6 | 	mov	arg01, local05
2ae44     14 15 02 F6 | 	mov	arg02, local02
2ae48     9C EF BF FD | 	call	#__system___float_mul
2ae4c     FD 2E 02 F6 | 	mov	local05, result1
2ae50                 | LR__3853
2ae50     01 2A C6 F0 | 	sar	local03, #1
2ae54     14 13 02 F6 | 	mov	arg01, local02
2ae58     14 15 02 F6 | 	mov	arg02, local02
2ae5c     88 EF BF FD | 	call	#__system___float_mul
2ae60     FD 28 02 F6 | 	mov	local02, result1
2ae64     C8 FF 9F FD | 	jmp	#LR__3852
2ae68                 | LR__3854
2ae68     00 2C 0E F2 | 	cmp	local04, #0 wz
2ae6c     14 00 90 AD |  if_e	jmp	#LR__3855
2ae70     13 13 02 F6 | 	mov	arg01, local01
2ae74     17 15 02 F6 | 	mov	arg02, local05
2ae78     70 F1 BF FD | 	call	#__system___float_div
2ae7c     FD 2E 02 F6 | 	mov	local05, result1
2ae80     2C 00 90 FD | 	jmp	#LR__3857
2ae84                 | LR__3855
2ae84     13 13 02 F6 | 	mov	arg01, local01
2ae88     00 C0 1F FF 
2ae8c     00 14 06 F6 | 	mov	arg02, ##1065353216
2ae90     01 16 06 F6 | 	mov	arg03, #1
2ae94     84 F3 BF FD | 	call	#__system___float_cmp
2ae98     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae9c     10 00 90 AD |  if_e	jmp	#LR__3856
2aea0     13 13 02 F6 | 	mov	arg01, local01
2aea4     17 15 02 F6 | 	mov	arg02, local05
2aea8     3C EF BF FD | 	call	#__system___float_mul
2aeac     FD 2E 02 F6 | 	mov	local05, result1
2aeb0                 | LR__3856
2aeb0                 | LR__3857
2aeb0     17 FB 01 F6 | 	mov	result1, local05
2aeb4                 | LR__3858
2aeb4     A7 F0 03 F6 | 	mov	ptra, fp
2aeb8     B2 00 A0 FD | 	call	#popregs_
2aebc                 | __system___float_pow_n_ret
2aebc     2D 00 64 FD | 	ret
2aec0                 | 
2aec0                 | __system___gc_ptrs
2aec0     EC 00 02 F6 | 	mov	_var01, __heap_ptr
2aec4     00 03 02 F6 | 	mov	_var02, _var01
2aec8     BB 00 00 FF 
2aecc     F8 02 06 F1 | 	add	_var02, ##95992
2aed0     00 FD 09 FB | 	rdlong	result2, _var01 wz
2aed4     74 00 90 5D |  if_ne	jmp	#LR__3860
2aed8     01 FD 01 F6 | 	mov	result2, _var02
2aedc     00 FD 81 F1 | 	sub	result2, _var01
2aee0     00 03 58 FC | 	wrword	#1, _var01
2aee4     00 FB 01 F6 | 	mov	result1, _var01
2aee8     02 FA 05 F1 | 	add	result1, #2
2aeec     36 00 80 FF 
2aef0     FD 20 59 FC | 	wrword	##27792, result1
2aef4     00 FB 01 F6 | 	mov	result1, _var01
2aef8     04 FA 05 F1 | 	add	result1, #4
2aefc     FD 00 58 FC | 	wrword	#0, result1
2af00     00 FB 01 F6 | 	mov	result1, _var01
2af04     06 FA 05 F1 | 	add	result1, #6
2af08     FD 02 58 FC | 	wrword	#1, result1
2af0c     10 00 06 F1 | 	add	_var01, #16
2af10     FE FC 51 F6 | 	abs	result2, result2 wc
2af14     04 FC 45 F0 | 	shr	result2, #4
2af18     FE FC 81 F6 | 	negc	result2, result2
2af1c     00 FD 51 FC | 	wrword	result2, _var01
2af20     00 FD 01 F6 | 	mov	result2, _var01
2af24     02 FC 05 F1 | 	add	result2, #2
2af28     36 00 80 FF 
2af2c     FE 1E 59 FC | 	wrword	##27791, result2
2af30     00 FD 01 F6 | 	mov	result2, _var01
2af34     04 FC 05 F1 | 	add	result2, #4
2af38     FE 00 58 FC | 	wrword	#0, result2
2af3c     00 FD 01 F6 | 	mov	result2, _var01
2af40     06 FC 05 F1 | 	add	result2, #6
2af44     FE 00 58 FC | 	wrword	#0, result2
2af48     10 00 86 F1 | 	sub	_var01, #16
2af4c                 | LR__3860
2af4c     00 FB 01 F6 | 	mov	result1, _var01
2af50     01 FD 01 F6 | 	mov	result2, _var02
2af54                 | __system___gc_ptrs_ret
2af54     2D 00 64 FD | 	ret
2af58                 | 
2af58                 | __system___gc_tryalloc
2af58     0B 4A 05 F6 | 	mov	COUNT_, #11
2af5c     A8 00 A0 FD | 	call	#pushregs_
2af60     09 27 02 F6 | 	mov	local01, arg01
2af64     0A 29 02 F6 | 	mov	local02, arg02
2af68     54 FF BF FD | 	call	#__system___gc_ptrs
2af6c     FD 2A 02 F6 | 	mov	local03, result1
2af70     FE 2C 02 F6 | 	mov	local04, result2
2af74     15 2F 02 F6 | 	mov	local05, local03
2af78     00 30 06 F6 | 	mov	local06, #0
2af7c     97 1E 48 FB | 	callpa	#(@LR__3871-@LR__3870)>>2,fcache_load_ptr_
2af80                 | LR__3870
2af80     17 33 02 F6 | 	mov	local07, local05
2af84     06 2E 06 F1 | 	add	local05, #6
2af88     17 15 EA FA | 	rdword	arg02, local05 wz
2af8c     15 13 02 F6 | 	mov	arg01, local03
2af90     00 FA 05 A6 |  if_e	mov	result1, #0
2af94     04 14 66 50 |  if_ne	shl	arg02, #4
2af98     0A 13 02 51 |  if_ne	add	arg01, arg02
2af9c     09 FB 01 56 |  if_ne	mov	result1, arg01
2afa0     FD 2E 0A F6 | 	mov	local05, result1 wz
2afa4     17 31 E2 5A |  if_ne	rdword	local06, local05
2afa8     00 2E 0E F2 | 	cmp	local05, #0 wz
2afac     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
2afb0     08 00 90 1D |  if_a	jmp	#LR__3872
2afb4     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
2afb8     C4 FF 9F 1D |  if_a	jmp	#LR__3870
2afbc                 | LR__3871
2afbc                 | LR__3872
2afbc     00 2E 0E F2 | 	cmp	local05, #0 wz
2afc0     17 FB 01 A6 |  if_e	mov	result1, local05
2afc4     3C 01 90 AD |  if_e	jmp	#LR__3875
2afc8     17 FD 01 F6 | 	mov	result2, local05
2afcc     06 FC 05 F1 | 	add	result2, #6
2afd0     FE 34 E2 FA | 	rdword	local08, result2
2afd4     18 27 52 F2 | 	cmps	local01, local06 wc
2afd8     C0 00 90 3D |  if_ae	jmp	#LR__3874
2afdc     17 27 52 FC | 	wrword	local01, local05
2afe0     17 13 02 F6 | 	mov	arg01, local05
2afe4     13 35 02 F6 | 	mov	local08, local01
2afe8     04 34 66 F0 | 	shl	local08, #4
2afec     1A 13 02 F1 | 	add	arg01, local08
2aff0     13 31 82 F1 | 	sub	local06, local01
2aff4     09 31 52 FC | 	wrword	local06, arg01
2aff8     09 35 02 F6 | 	mov	local08, arg01
2affc     02 34 06 F1 | 	add	local08, #2
2b000     36 00 80 FF 
2b004     1A 1F 59 FC | 	wrword	##27791, local08
2b008     17 15 0A F6 | 	mov	arg02, local05 wz
2b00c     00 FA 05 A6 |  if_e	mov	result1, #0
2b010     15 15 82 51 |  if_ne	sub	arg02, local03
2b014     04 14 46 50 |  if_ne	shr	arg02, #4
2b018     0A FB 01 56 |  if_ne	mov	result1, arg02
2b01c     09 35 02 F6 | 	mov	local08, arg01
2b020     04 34 06 F1 | 	add	local08, #4
2b024     1A FB 51 FC | 	wrword	result1, local08
2b028     17 35 02 F6 | 	mov	local08, local05
2b02c     06 34 06 F1 | 	add	local08, #6
2b030     09 15 02 F6 | 	mov	arg02, arg01
2b034     1A 35 E2 FA | 	rdword	local08, local08
2b038     06 14 06 F1 | 	add	arg02, #6
2b03c     0A 35 52 FC | 	wrword	local08, arg02
2b040     09 37 02 F6 | 	mov	local09, arg01
2b044     1B 15 0A F6 | 	mov	arg02, local09 wz
2b048     00 FA 05 A6 |  if_e	mov	result1, #0
2b04c     15 15 82 51 |  if_ne	sub	arg02, local03
2b050     04 14 46 50 |  if_ne	shr	arg02, #4
2b054     0A FB 01 56 |  if_ne	mov	result1, arg02
2b058     FD 34 02 F6 | 	mov	local08, result1
2b05c     09 39 EA FA | 	rdword	local10, arg01 wz
2b060     00 FA 05 A6 |  if_e	mov	result1, #0
2b064     04 38 66 50 |  if_ne	shl	local10, #4
2b068     1C 13 02 51 |  if_ne	add	arg01, local10
2b06c     09 FB 01 56 |  if_ne	mov	result1, arg01
2b070     FD 3A 0A F6 | 	mov	local11, result1 wz
2b074     24 00 90 AD |  if_e	jmp	#LR__3873
2b078     16 3B 52 F2 | 	cmps	local11, local04 wc
2b07c     1C 00 90 3D |  if_ae	jmp	#LR__3873
2b080     1B 15 0A F6 | 	mov	arg02, local09 wz
2b084     00 FA 05 A6 |  if_e	mov	result1, #0
2b088     15 15 82 51 |  if_ne	sub	arg02, local03
2b08c     04 14 46 50 |  if_ne	shr	arg02, #4
2b090     0A FB 01 56 |  if_ne	mov	result1, arg02
2b094     04 3A 06 F1 | 	add	local11, #4
2b098     1D FB 51 FC | 	wrword	result1, local11
2b09c                 | LR__3873
2b09c                 | LR__3874
2b09c     06 32 06 F1 | 	add	local07, #6
2b0a0     19 35 52 FC | 	wrword	local08, local07
2b0a4     36 00 00 FF 
2b0a8     80 36 06 F6 | 	mov	local09, ##27776
2b0ac     14 37 42 F5 | 	or	local09, local02
2b0b0     00 FA 05 F6 | 	mov	result1, #0
2b0b4     01 FA 61 FD | 	cogid	result1
2b0b8     FD 36 42 F5 | 	or	local09, result1
2b0bc     17 3B 02 F6 | 	mov	local11, local05
2b0c0     02 3A 06 F1 | 	add	local11, #2
2b0c4     1D 37 52 FC | 	wrword	local09, local11
2b0c8     15 37 02 F6 | 	mov	local09, local03
2b0cc     08 36 06 F1 | 	add	local09, #8
2b0d0     17 3B 02 F6 | 	mov	local11, local05
2b0d4     1B 37 E2 FA | 	rdword	local09, local09
2b0d8     06 3A 06 F1 | 	add	local11, #6
2b0dc     1D 37 52 FC | 	wrword	local09, local11
2b0e0     17 15 0A F6 | 	mov	arg02, local05 wz
2b0e4     00 FA 05 A6 |  if_e	mov	result1, #0
2b0e8     15 15 82 51 |  if_ne	sub	arg02, local03
2b0ec     04 14 46 50 |  if_ne	shr	arg02, #4
2b0f0     0A FB 01 56 |  if_ne	mov	result1, arg02
2b0f4     08 2A 06 F1 | 	add	local03, #8
2b0f8     15 FB 51 FC | 	wrword	result1, local03
2b0fc     08 2E 06 F1 | 	add	local05, #8
2b100     17 FB 01 F6 | 	mov	result1, local05
2b104                 | LR__3875
2b104     A7 F0 03 F6 | 	mov	ptra, fp
2b108     B2 00 A0 FD | 	call	#popregs_
2b10c                 | __system___gc_tryalloc_ret
2b10c     2D 00 64 FD | 	ret
2b110                 | 
2b110                 | __system___gc_alloc_managed
2b110     01 4A 05 F6 | 	mov	COUNT_, #1
2b114     A8 00 A0 FD | 	call	#pushregs_
2b118     09 27 02 F6 | 	mov	local01, arg01
2b11c     00 14 06 F6 | 	mov	arg02, #0
2b120     1C 00 B0 FD | 	call	#__system___gc_doalloc
2b124     FD 14 0A F6 | 	mov	arg02, result1 wz
2b128     01 26 56 A2 |  if_e	cmps	local01, #1 wc
2b12c     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
2b130     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
2b134     A7 F0 03 F6 | 	mov	ptra, fp
2b138     B2 00 A0 FD | 	call	#popregs_
2b13c                 | __system___gc_alloc_managed_ret
2b13c     2D 00 64 FD | 	ret
2b140                 | 
2b140                 | __system___gc_doalloc
2b140     06 4A 05 F6 | 	mov	COUNT_, #6
2b144     A8 00 A0 FD | 	call	#pushregs_
2b148     09 27 0A F6 | 	mov	local01, arg01 wz
2b14c     0A 29 02 F6 | 	mov	local02, arg02
2b150     00 FA 05 A6 |  if_e	mov	result1, #0
2b154     8C 00 90 AD |  if_e	jmp	#LR__3887
2b158     17 26 06 F1 | 	add	local01, #23
2b15c     0F 26 26 F5 | 	andn	local01, #15
2b160     04 26 46 F0 | 	shr	local01, #4
2b164     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2b168     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2b16c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2b170     FC BD BF FD | 	call	#__system___lockmem
2b174     13 13 02 F6 | 	mov	arg01, local01
2b178     14 15 02 F6 | 	mov	arg02, local02
2b17c     D8 FD BF FD | 	call	#__system___gc_tryalloc
2b180     FD 2A 0A F6 | 	mov	local03, result1 wz
2b184     14 00 90 5D |  if_ne	jmp	#LR__3880
2b188     70 03 B0 FD | 	call	#__system___gc_docollect
2b18c     13 13 02 F6 | 	mov	arg01, local01
2b190     14 15 02 F6 | 	mov	arg02, local02
2b194     C0 FD BF FD | 	call	#__system___gc_tryalloc
2b198     FD 2A 02 F6 | 	mov	local03, result1
2b19c                 | LR__3880
2b19c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2b1a0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2b1a4     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2b1a8     09 01 68 FC | 	wrlong	#0, arg01
2b1ac     00 2A 0E F2 | 	cmp	local03, #0 wz
2b1b0     2C 00 90 AD |  if_e	jmp	#LR__3886
2b1b4     04 26 66 F0 | 	shl	local01, #4
2b1b8     08 26 86 F1 | 	sub	local01, #8
2b1bc     13 2D 52 F6 | 	abs	local04, local01 wc
2b1c0     02 2C 46 F0 | 	shr	local04, #2
2b1c4     16 2F 8A F6 | 	negc	local05, local04 wz
2b1c8     15 31 02 F6 | 	mov	local06, local03
2b1cc     10 00 90 AD |  if_e	jmp	#LR__3885
2b1d0     97 06 48 FB | 	callpa	#(@LR__3883-@LR__3881)>>2,fcache_load_ptr_
2b1d4                 | LR__3881
2b1d4     17 05 D8 FC | 	rep	@LR__3884, local05
2b1d8                 | LR__3882
2b1d8     18 01 68 FC | 	wrlong	#0, local06
2b1dc     04 30 06 F1 | 	add	local06, #4
2b1e0                 | LR__3883
2b1e0                 | LR__3884
2b1e0                 | LR__3885
2b1e0                 | LR__3886
2b1e0     15 FB 01 F6 | 	mov	result1, local03
2b1e4                 | LR__3887
2b1e4     A7 F0 03 F6 | 	mov	ptra, fp
2b1e8     B2 00 A0 FD | 	call	#popregs_
2b1ec                 | __system___gc_doalloc_ret
2b1ec     2D 00 64 FD | 	ret
2b1f0                 | 
2b1f0                 | __system___gc_isvalidptr
2b1f0     F8 16 06 F4 | 	bitl	arg03, #248
2b1f4     08 16 86 F1 | 	sub	arg03, #8
2b1f8     09 17 52 F2 | 	cmps	arg03, arg01 wc
2b1fc     08 00 90 CD |  if_b	jmp	#LR__3890
2b200     0A 17 52 F2 | 	cmps	arg03, arg02 wc
2b204     08 00 90 CD |  if_b	jmp	#LR__3891
2b208                 | LR__3890
2b208     00 FA 05 F6 | 	mov	result1, #0
2b20c     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
2b210                 | LR__3891
2b210     0B 01 02 F6 | 	mov	_var01, arg03
2b214     09 01 62 F5 | 	xor	_var01, arg01
2b218     0F 00 CE F7 | 	test	_var01, #15 wz
2b21c     00 FA 05 56 |  if_ne	mov	result1, #0
2b220     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
2b224     0B 01 02 F6 | 	mov	_var01, arg03
2b228     02 00 06 F1 | 	add	_var01, #2
2b22c     00 01 E2 FA | 	rdword	_var01, _var01
2b230     7F 00 00 FF 
2b234     C0 01 06 F5 | 	and	_var01, ##65472
2b238     36 00 00 FF 
2b23c     80 00 0E F2 | 	cmp	_var01, ##27776 wz
2b240     00 FA 05 56 |  if_ne	mov	result1, #0
2b244     0B FB 01 A6 |  if_e	mov	result1, arg03
2b248                 | __system___gc_isvalidptr_ret
2b248     2D 00 64 FD | 	ret
2b24c                 | 
2b24c                 | __system___gc_free
2b24c     09 17 02 F6 | 	mov	arg03, arg01
2b250     6C FC BF FD | 	call	#__system___gc_ptrs
2b254     FD 12 02 F6 | 	mov	arg01, result1
2b258     FE 14 02 F6 | 	mov	arg02, result2
2b25c     90 FF BF FD | 	call	#__system___gc_isvalidptr
2b260     FD 14 0A F6 | 	mov	arg02, result1 wz
2b264     28 00 90 AD |  if_e	jmp	#LR__3900
2b268     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2b26c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2b270     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2b274     F8 BC BF FD | 	call	#__system___lockmem
2b278     0A 13 02 F6 | 	mov	arg01, arg02
2b27c     14 00 B0 FD | 	call	#__system___gc_dofree
2b280     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2b284     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2b288     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2b28c     09 01 68 FC | 	wrlong	#0, arg01
2b290                 | LR__3900
2b290                 | __system___gc_free_ret
2b290     2D 00 64 FD | 	ret
2b294                 | 
2b294                 | __system___gc_dofree
2b294     06 4A 05 F6 | 	mov	COUNT_, #6
2b298     A8 00 A0 FD | 	call	#pushregs_
2b29c     09 27 02 F6 | 	mov	local01, arg01
2b2a0     1C FC BF FD | 	call	#__system___gc_ptrs
2b2a4     FD 28 02 F6 | 	mov	local02, result1
2b2a8     FE 2A 02 F6 | 	mov	local03, result2
2b2ac     13 15 02 F6 | 	mov	arg02, local01
2b2b0     02 14 06 F1 | 	add	arg02, #2
2b2b4     36 00 80 FF 
2b2b8     0A 1F 59 FC | 	wrword	##27791, arg02
2b2bc     13 2D 02 F6 | 	mov	local04, local01
2b2c0     13 13 02 F6 | 	mov	arg01, local01
2b2c4     09 2F EA FA | 	rdword	local05, arg01 wz
2b2c8     00 FA 05 A6 |  if_e	mov	result1, #0
2b2cc     04 2E 66 50 |  if_ne	shl	local05, #4
2b2d0     17 13 02 51 |  if_ne	add	arg01, local05
2b2d4     09 FB 01 56 |  if_ne	mov	result1, arg01
2b2d8     FD 30 02 F6 | 	mov	local06, result1
2b2dc     97 24 48 FB | 	callpa	#(@LR__3911-@LR__3910)>>2,fcache_load_ptr_
2b2e0                 | LR__3910
2b2e0     04 2C 06 F1 | 	add	local04, #4
2b2e4     16 15 EA FA | 	rdword	arg02, local04 wz
2b2e8     14 13 02 F6 | 	mov	arg01, local02
2b2ec     00 FA 05 A6 |  if_e	mov	result1, #0
2b2f0     04 14 66 50 |  if_ne	shl	arg02, #4
2b2f4     0A 13 02 51 |  if_ne	add	arg01, arg02
2b2f8     09 FB 01 56 |  if_ne	mov	result1, arg01
2b2fc     FD 2C 0A F6 | 	mov	local04, result1 wz
2b300     24 00 90 AD |  if_e	jmp	#LR__3912
2b304     16 13 02 F6 | 	mov	arg01, local04
2b308     00 FA 05 F6 | 	mov	result1, #0
2b30c     02 12 06 F1 | 	add	arg01, #2
2b310     09 13 E2 FA | 	rdword	arg01, arg01
2b314     36 00 00 FF 
2b318     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2b31c     01 FA 65 A6 |  if_e	neg	result1, #1
2b320     00 FA 0D F2 | 	cmp	result1, #0 wz
2b324     B8 FF 9F AD |  if_e	jmp	#LR__3910
2b328                 | LR__3911
2b328                 | LR__3912
2b328     00 2C 0E F2 | 	cmp	local04, #0 wz
2b32c     14 2D 02 A6 |  if_e	mov	local04, local02
2b330     16 15 02 F6 | 	mov	arg02, local04
2b334     06 14 06 F1 | 	add	arg02, #6
2b338     13 13 02 F6 | 	mov	arg01, local01
2b33c     0A 15 E2 FA | 	rdword	arg02, arg02
2b340     06 12 06 F1 | 	add	arg01, #6
2b344     09 15 52 FC | 	wrword	arg02, arg01
2b348     13 15 0A F6 | 	mov	arg02, local01 wz
2b34c     00 FA 05 A6 |  if_e	mov	result1, #0
2b350     14 15 82 51 |  if_ne	sub	arg02, local02
2b354     04 14 46 50 |  if_ne	shr	arg02, #4
2b358     0A FB 01 56 |  if_ne	mov	result1, arg02
2b35c     16 15 02 F6 | 	mov	arg02, local04
2b360     06 14 06 F1 | 	add	arg02, #6
2b364     0A FB 51 FC | 	wrword	result1, arg02
2b368     14 2D 0A F2 | 	cmp	local04, local02 wz
2b36c     A4 00 90 AD |  if_e	jmp	#LR__3915
2b370     16 13 02 F6 | 	mov	arg01, local04
2b374     09 2F EA FA | 	rdword	local05, arg01 wz
2b378     00 FA 05 A6 |  if_e	mov	result1, #0
2b37c     04 2E 66 50 |  if_ne	shl	local05, #4
2b380     17 13 02 51 |  if_ne	add	arg01, local05
2b384     09 FB 01 56 |  if_ne	mov	result1, arg01
2b388     13 FB 09 F2 | 	cmp	result1, local01 wz
2b38c     84 00 90 5D |  if_ne	jmp	#LR__3914
2b390     16 31 E2 FA | 	rdword	local06, local04
2b394     13 15 E2 FA | 	rdword	arg02, local01
2b398     0A 31 02 F1 | 	add	local06, arg02
2b39c     16 31 52 FC | 	wrword	local06, local04
2b3a0     13 31 02 F6 | 	mov	local06, local01
2b3a4     02 30 06 F1 | 	add	local06, #2
2b3a8     18 01 58 FC | 	wrword	#0, local06
2b3ac     13 13 02 F6 | 	mov	arg01, local01
2b3b0     09 2F EA FA | 	rdword	local05, arg01 wz
2b3b4     00 FA 05 A6 |  if_e	mov	result1, #0
2b3b8     04 2E 66 50 |  if_ne	shl	local05, #4
2b3bc     17 13 02 51 |  if_ne	add	arg01, local05
2b3c0     09 FB 01 56 |  if_ne	mov	result1, arg01
2b3c4     FD 30 02 F6 | 	mov	local06, result1
2b3c8     15 31 52 F2 | 	cmps	local06, local03 wc
2b3cc     20 00 90 3D |  if_ae	jmp	#LR__3913
2b3d0     16 15 0A F6 | 	mov	arg02, local04 wz
2b3d4     00 FA 05 A6 |  if_e	mov	result1, #0
2b3d8     14 15 82 51 |  if_ne	sub	arg02, local02
2b3dc     04 14 46 50 |  if_ne	shr	arg02, #4
2b3e0     0A FB 01 56 |  if_ne	mov	result1, arg02
2b3e4     18 15 02 F6 | 	mov	arg02, local06
2b3e8     04 14 06 F1 | 	add	arg02, #4
2b3ec     0A FB 51 FC | 	wrword	result1, arg02
2b3f0                 | LR__3913
2b3f0     13 15 02 F6 | 	mov	arg02, local01
2b3f4     06 14 06 F1 | 	add	arg02, #6
2b3f8     16 FD 01 F6 | 	mov	result2, local04
2b3fc     0A 15 E2 FA | 	rdword	arg02, arg02
2b400     06 FC 05 F1 | 	add	result2, #6
2b404     FE 14 52 FC | 	wrword	arg02, result2
2b408     06 26 06 F1 | 	add	local01, #6
2b40c     13 01 58 FC | 	wrword	#0, local01
2b410     16 27 02 F6 | 	mov	local01, local04
2b414                 | LR__3914
2b414                 | LR__3915
2b414     13 13 02 F6 | 	mov	arg01, local01
2b418     09 2F EA FA | 	rdword	local05, arg01 wz
2b41c     00 FA 05 A6 |  if_e	mov	result1, #0
2b420     04 2E 66 50 |  if_ne	shl	local05, #4
2b424     17 13 02 51 |  if_ne	add	arg01, local05
2b428     09 FB 01 56 |  if_ne	mov	result1, arg01
2b42c     FD 14 0A F6 | 	mov	arg02, result1 wz
2b430     B8 00 90 AD |  if_e	jmp	#LR__3917
2b434     15 15 52 F2 | 	cmps	arg02, local03 wc
2b438     B0 00 90 3D |  if_ae	jmp	#LR__3917
2b43c     0A 13 02 F6 | 	mov	arg01, arg02
2b440     00 FA 05 F6 | 	mov	result1, #0
2b444     02 12 06 F1 | 	add	arg01, #2
2b448     09 13 E2 FA | 	rdword	arg01, arg01
2b44c     36 00 00 FF 
2b450     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2b454     01 FA 65 A6 |  if_e	neg	result1, #1
2b458     00 FA 0D F2 | 	cmp	result1, #0 wz
2b45c     8C 00 90 AD |  if_e	jmp	#LR__3917
2b460     13 2D 02 F6 | 	mov	local04, local01
2b464     16 31 E2 FA | 	rdword	local06, local04
2b468     0A 13 02 F6 | 	mov	arg01, arg02
2b46c     09 27 E2 FA | 	rdword	local01, arg01
2b470     13 31 02 F1 | 	add	local06, local01
2b474     16 31 52 FC | 	wrword	local06, local04
2b478     09 31 02 F6 | 	mov	local06, arg01
2b47c     06 30 06 F1 | 	add	local06, #6
2b480     16 27 02 F6 | 	mov	local01, local04
2b484     18 31 E2 FA | 	rdword	local06, local06
2b488     06 26 06 F1 | 	add	local01, #6
2b48c     13 31 52 FC | 	wrword	local06, local01
2b490     09 31 02 F6 | 	mov	local06, arg01
2b494     02 30 06 F1 | 	add	local06, #2
2b498     18 55 59 FC | 	wrword	#170, local06
2b49c     09 31 02 F6 | 	mov	local06, arg01
2b4a0     06 30 06 F1 | 	add	local06, #6
2b4a4     18 01 58 FC | 	wrword	#0, local06
2b4a8     09 2F EA FA | 	rdword	local05, arg01 wz
2b4ac     00 FA 05 A6 |  if_e	mov	result1, #0
2b4b0     04 2E 66 50 |  if_ne	shl	local05, #4
2b4b4     17 13 02 51 |  if_ne	add	arg01, local05
2b4b8     09 FB 01 56 |  if_ne	mov	result1, arg01
2b4bc     FD 30 0A F6 | 	mov	local06, result1 wz
2b4c0     28 00 90 AD |  if_e	jmp	#LR__3916
2b4c4     15 31 52 F2 | 	cmps	local06, local03 wc
2b4c8     20 00 90 3D |  if_ae	jmp	#LR__3916
2b4cc     16 15 0A F6 | 	mov	arg02, local04 wz
2b4d0     00 FA 05 A6 |  if_e	mov	result1, #0
2b4d4     14 15 82 51 |  if_ne	sub	arg02, local02
2b4d8     04 14 46 50 |  if_ne	shr	arg02, #4
2b4dc     0A FB 01 56 |  if_ne	mov	result1, arg02
2b4e0     18 2D 02 F6 | 	mov	local04, local06
2b4e4     04 2C 06 F1 | 	add	local04, #4
2b4e8     16 FB 51 FC | 	wrword	result1, local04
2b4ec                 | LR__3916
2b4ec                 | LR__3917
2b4ec     18 FB 01 F6 | 	mov	result1, local06
2b4f0     A7 F0 03 F6 | 	mov	ptra, fp
2b4f4     B2 00 A0 FD | 	call	#popregs_
2b4f8                 | __system___gc_dofree_ret
2b4f8     2D 00 64 FD | 	ret
2b4fc                 | 
2b4fc                 | __system___gc_docollect
2b4fc     05 4A 05 F6 | 	mov	COUNT_, #5
2b500     A8 00 A0 FD | 	call	#pushregs_
2b504     B8 F9 BF FD | 	call	#__system___gc_ptrs
2b508     FE 26 02 F6 | 	mov	local01, result2
2b50c     FD 28 02 F6 | 	mov	local02, result1
2b510     14 13 02 F6 | 	mov	arg01, local02
2b514     09 2B EA FA | 	rdword	local03, arg01 wz
2b518     00 FA 05 A6 |  if_e	mov	result1, #0
2b51c     04 2A 66 50 |  if_ne	shl	local03, #4
2b520     15 13 02 51 |  if_ne	add	arg01, local03
2b524     09 FB 01 56 |  if_ne	mov	result1, arg01
2b528     FD 2C 0A F6 | 	mov	local04, result1 wz
2b52c     00 FA 05 F6 | 	mov	result1, #0
2b530     01 FA 61 FD | 	cogid	result1
2b534     FD 2E 02 F6 | 	mov	local05, result1
2b538     48 00 90 AD |  if_e	jmp	#LR__3922
2b53c     97 22 48 FB | 	callpa	#(@LR__3921-@LR__3920)>>2,fcache_load_ptr_
2b540                 | LR__3920
2b540     13 2D 52 F2 | 	cmps	local04, local01 wc
2b544     3C 00 90 3D |  if_ae	jmp	#LR__3922
2b548     16 15 02 F6 | 	mov	arg02, local04
2b54c     02 14 06 F1 | 	add	arg02, #2
2b550     0A 15 E2 FA | 	rdword	arg02, arg02
2b554     20 14 26 F5 | 	andn	arg02, #32
2b558     16 13 02 F6 | 	mov	arg01, local04
2b55c     02 12 06 F1 | 	add	arg01, #2
2b560     09 15 52 FC | 	wrword	arg02, arg01
2b564     16 13 02 F6 | 	mov	arg01, local04
2b568     09 2B EA FA | 	rdword	local03, arg01 wz
2b56c     00 FA 05 A6 |  if_e	mov	result1, #0
2b570     04 2A 66 50 |  if_ne	shl	local03, #4
2b574     15 13 02 51 |  if_ne	add	arg01, local03
2b578     09 FB 01 56 |  if_ne	mov	result1, arg01
2b57c     FD 2C 0A F6 | 	mov	local04, result1 wz
2b580     BC FF 9F 5D |  if_ne	jmp	#LR__3920
2b584                 | LR__3921
2b584                 | LR__3922
2b584     00 2A 06 F6 | 	mov	local03, #0
2b588     00 12 06 F6 | 	mov	arg01, #0
2b58c     B8 B9 BF FD | 	call	#__system____topofstack
2b590     FD 14 02 F6 | 	mov	arg02, result1
2b594     15 13 02 F6 | 	mov	arg01, local03
2b598     90 00 B0 FD | 	call	#__system___gc_markhub
2b59c     1C 01 B0 FD | 	call	#__system___gc_markcog
2b5a0     14 13 02 F6 | 	mov	arg01, local02
2b5a4     09 2B EA FA | 	rdword	local03, arg01 wz
2b5a8     00 FA 05 A6 |  if_e	mov	result1, #0
2b5ac     04 2A 66 50 |  if_ne	shl	local03, #4
2b5b0     15 13 02 51 |  if_ne	add	arg01, local03
2b5b4     09 FB 01 56 |  if_ne	mov	result1, arg01
2b5b8     FD 28 0A F6 | 	mov	local02, result1 wz
2b5bc     60 00 90 AD |  if_e	jmp	#LR__3926
2b5c0                 | LR__3923
2b5c0     14 2D 02 F6 | 	mov	local04, local02
2b5c4     16 13 02 F6 | 	mov	arg01, local04
2b5c8     09 2B EA FA | 	rdword	local03, arg01 wz
2b5cc     00 FA 05 A6 |  if_e	mov	result1, #0
2b5d0     04 2A 66 50 |  if_ne	shl	local03, #4
2b5d4     15 13 02 51 |  if_ne	add	arg01, local03
2b5d8     09 FB 01 56 |  if_ne	mov	result1, arg01
2b5dc     FD 28 02 F6 | 	mov	local02, result1
2b5e0     16 15 02 F6 | 	mov	arg02, local04
2b5e4     02 14 06 F1 | 	add	arg02, #2
2b5e8     0A 15 E2 FA | 	rdword	arg02, arg02
2b5ec     20 14 CE F7 | 	test	arg02, #32 wz
2b5f0     10 14 CE A7 |  if_e	test	arg02, #16 wz
2b5f4     1C 00 90 5D |  if_ne	jmp	#LR__3925
2b5f8     0A 15 42 F8 | 	getnib	arg02, arg02, #0
2b5fc     17 15 0A F2 | 	cmp	arg02, local05 wz
2b600     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
2b604     0C 00 90 5D |  if_ne	jmp	#LR__3924
2b608     16 13 02 F6 | 	mov	arg01, local04
2b60c     84 FC BF FD | 	call	#__system___gc_dofree
2b610     FD 28 02 F6 | 	mov	local02, result1
2b614                 | LR__3924
2b614                 | LR__3925
2b614     00 28 0E F2 | 	cmp	local02, #0 wz
2b618     13 29 52 52 |  if_ne	cmps	local02, local01 wc
2b61c     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3923
2b620                 | LR__3926
2b620     A7 F0 03 F6 | 	mov	ptra, fp
2b624     B2 00 A0 FD | 	call	#popregs_
2b628                 | __system___gc_docollect_ret
2b628     2D 00 64 FD | 	ret
2b62c                 | 
2b62c                 | __system___gc_markhub
2b62c     04 4A 05 F6 | 	mov	COUNT_, #4
2b630     A8 00 A0 FD | 	call	#pushregs_
2b634     09 27 02 F6 | 	mov	local01, arg01
2b638     0A 29 02 F6 | 	mov	local02, arg02
2b63c     80 F8 BF FD | 	call	#__system___gc_ptrs
2b640     FD 2A 02 F6 | 	mov	local03, result1
2b644     FE 2C 02 F6 | 	mov	local04, result2
2b648                 | LR__3930
2b648     14 27 52 F2 | 	cmps	local01, local02 wc
2b64c     60 00 90 3D |  if_ae	jmp	#LR__3931
2b650     13 17 02 FB | 	rdlong	arg03, local01
2b654     04 26 06 F1 | 	add	local01, #4
2b658     16 15 02 F6 | 	mov	arg02, local04
2b65c     15 13 02 F6 | 	mov	arg01, local03
2b660     8C FB BF FD | 	call	#__system___gc_isvalidptr
2b664     FD 16 0A F6 | 	mov	arg03, result1 wz
2b668     DC FF 9F AD |  if_e	jmp	#LR__3930
2b66c     0B 13 02 F6 | 	mov	arg01, arg03
2b670     00 FA 05 F6 | 	mov	result1, #0
2b674     02 12 06 F1 | 	add	arg01, #2
2b678     09 13 E2 FA | 	rdword	arg01, arg01
2b67c     36 00 00 FF 
2b680     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2b684     01 FA 65 A6 |  if_e	neg	result1, #1
2b688     00 FA 0D F2 | 	cmp	result1, #0 wz
2b68c     B8 FF 9F 5D |  if_ne	jmp	#LR__3930
2b690     0B FD 01 F6 | 	mov	result2, arg03
2b694     02 FC 05 F1 | 	add	result2, #2
2b698     FE FC E1 FA | 	rdword	result2, result2
2b69c     0F FC 25 F5 | 	andn	result2, #15
2b6a0     2E FC 45 F5 | 	or	result2, #46
2b6a4     02 16 06 F1 | 	add	arg03, #2
2b6a8     0B FD 51 FC | 	wrword	result2, arg03
2b6ac     98 FF 9F FD | 	jmp	#LR__3930
2b6b0                 | LR__3931
2b6b0     A7 F0 03 F6 | 	mov	ptra, fp
2b6b4     B2 00 A0 FD | 	call	#popregs_
2b6b8                 | __system___gc_markhub_ret
2b6b8     2D 00 64 FD | 	ret
2b6bc                 | 
2b6bc                 | __system___gc_markcog
2b6bc     04 4A 05 F6 | 	mov	COUNT_, #4
2b6c0     A8 00 A0 FD | 	call	#pushregs_
2b6c4     F8 F7 BF FD | 	call	#__system___gc_ptrs
2b6c8     FD 26 02 F6 | 	mov	local01, result1
2b6cc     FE 28 02 F6 | 	mov	local02, result2
2b6d0     EF 2B 06 F6 | 	mov	local03, #495
2b6d4                 | LR__3940
2b6d4                 | 	'.live	local03
2b6d4     00 2A 96 F9 | 	alts	local03, #0
2b6d8     15 2D 02 F6 | 	mov	local04, local03
2b6dc     13 13 02 F6 | 	mov	arg01, local01
2b6e0     14 15 02 F6 | 	mov	arg02, local02
2b6e4     16 17 02 F6 | 	mov	arg03, local04
2b6e8     04 FB BF FD | 	call	#__system___gc_isvalidptr
2b6ec     00 FA 0D F2 | 	cmp	result1, #0 wz
2b6f0     18 00 90 AD |  if_e	jmp	#LR__3941
2b6f4     FD 2C 02 F6 | 	mov	local04, result1
2b6f8     02 2C 06 F1 | 	add	local04, #2
2b6fc     16 2D E2 FA | 	rdword	local04, local04
2b700     20 2C 46 F5 | 	or	local04, #32
2b704     02 FA 05 F1 | 	add	result1, #2
2b708     FD 2C 52 FC | 	wrword	local04, result1
2b70c                 | LR__3941
2b70c     01 2A 86 F1 | 	sub	local03, #1
2b710     00 2A 56 F2 | 	cmps	local03, #0 wc
2b714     BC FF 9F 3D |  if_ae	jmp	#LR__3940
2b718     A7 F0 03 F6 | 	mov	ptra, fp
2b71c     B2 00 A0 FD | 	call	#popregs_
2b720                 | __system___gc_markcog_ret
2b720     2D 00 64 FD | 	ret
2b724                 | 
2b724                 | __system__opendir
2b724     06 4A 05 F6 | 	mov	COUNT_, #6
2b728     A8 00 A0 FD | 	call	#pushregs_
2b72c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2b730     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2b734     09 15 02 F6 | 	mov	arg02, arg01
2b738     13 13 02 F6 | 	mov	arg01, local01
2b73c     00 16 06 F6 | 	mov	arg03, #0
2b740     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2b744     C0 BF BF FD | 	call	#__system____getvfsforfile
2b748     FD 28 0A F6 | 	mov	local02, result1 wz
2b74c     10 00 90 AD |  if_e	jmp	#LR__3950
2b750     28 28 06 F1 | 	add	local02, #40
2b754     14 17 0A FB | 	rdlong	arg03, local02 wz
2b758     28 28 86 F1 | 	sub	local02, #40
2b75c     14 00 90 5D |  if_ne	jmp	#LR__3951
2b760                 | LR__3950
2b760     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b764     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2b768     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b76c     00 FA 05 F6 | 	mov	result1, #0
2b770     90 00 90 FD | 	jmp	#LR__3953
2b774                 | LR__3951
2b774     5C 12 06 F6 | 	mov	arg01, #92
2b778     10 14 06 F6 | 	mov	arg02, #16
2b77c     C0 F9 BF FD | 	call	#__system___gc_doalloc
2b780     FD 2A 0A F6 | 	mov	local03, result1 wz
2b784     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b788     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2b78c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b790     00 FA 05 A6 |  if_e	mov	result1, #0
2b794     6C 00 90 AD |  if_e	jmp	#LR__3953
2b798     28 28 06 F1 | 	add	local02, #40
2b79c     14 2D 02 FB | 	rdlong	local04, local02
2b7a0     16 2F 02 F6 | 	mov	local05, local04
2b7a4     28 28 86 F1 | 	sub	local02, #40
2b7a8     13 2E 46 F7 | 	zerox	local05, #19
2b7ac     14 2C 46 F0 | 	shr	local04, #20
2b7b0     02 2C 66 F0 | 	shl	local04, #2
2b7b4     ED 2C 02 F1 | 	add	local04, __methods__
2b7b8     16 2D 02 FB | 	rdlong	local04, local04
2b7bc     15 13 02 F6 | 	mov	arg01, local03
2b7c0     13 15 02 F6 | 	mov	arg02, local01
2b7c4     F2 30 02 F6 | 	mov	local06, objptr
2b7c8     17 E5 01 F6 | 	mov	objptr, local05
2b7cc     2D 2C 62 FD | 	call	local04
2b7d0     18 E5 01 F6 | 	mov	objptr, local06
2b7d4     FD 16 0A F6 | 	mov	arg03, result1 wz
2b7d8     20 00 90 AD |  if_e	jmp	#LR__3952
2b7dc     00 16 4E F2 | 	cmps	arg03, #0 wz
2b7e0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b7e4     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
2b7e8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b7ec     15 13 02 F6 | 	mov	arg01, local03
2b7f0     58 FA BF FD | 	call	#__system___gc_free
2b7f4     00 FA 05 F6 | 	mov	result1, #0
2b7f8     08 00 90 FD | 	jmp	#LR__3953
2b7fc                 | LR__3952
2b7fc     15 29 62 FC | 	wrlong	local02, local03
2b800     15 FB 01 F6 | 	mov	result1, local03
2b804                 | LR__3953
2b804     A7 F0 03 F6 | 	mov	ptra, fp
2b808     B2 00 A0 FD | 	call	#popregs_
2b80c                 | __system__opendir_ret
2b80c     2D 00 64 FD | 	ret
2b810                 | 
2b810                 | __system__closedir
2b810     04 4A 05 F6 | 	mov	COUNT_, #4
2b814     A8 00 A0 FD | 	call	#pushregs_
2b818     09 27 02 F6 | 	mov	local01, arg01
2b81c     13 13 02 FB | 	rdlong	arg01, local01
2b820     2C 12 06 F1 | 	add	arg01, #44
2b824     09 29 02 FB | 	rdlong	local02, arg01
2b828     14 2B 02 F6 | 	mov	local03, local02
2b82c     13 2A 46 F7 | 	zerox	local03, #19
2b830     14 28 46 F0 | 	shr	local02, #20
2b834     02 28 66 F0 | 	shl	local02, #2
2b838     ED 28 02 F1 | 	add	local02, __methods__
2b83c     14 29 02 FB | 	rdlong	local02, local02
2b840     13 13 02 F6 | 	mov	arg01, local01
2b844     F2 2C 02 F6 | 	mov	local04, objptr
2b848     15 E5 01 F6 | 	mov	objptr, local03
2b84c     2D 28 62 FD | 	call	local02
2b850     16 E5 01 F6 | 	mov	objptr, local04
2b854     FD 2C 02 F6 | 	mov	local04, result1
2b858     13 13 02 F6 | 	mov	arg01, local01
2b85c     EC F9 BF FD | 	call	#__system___gc_free
2b860     00 2C 4E F2 | 	cmps	local04, #0 wz
2b864     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b868     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
2b86c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b870     01 FA 65 56 |  if_ne	neg	result1, #1
2b874     00 FA 05 A6 |  if_e	mov	result1, #0
2b878     A7 F0 03 F6 | 	mov	ptra, fp
2b87c     B2 00 A0 FD | 	call	#popregs_
2b880                 | __system__closedir_ret
2b880     2D 00 64 FD | 	ret
2b884                 | 
2b884                 | __system__readdir
2b884     04 4A 05 F6 | 	mov	COUNT_, #4
2b888     A8 00 A0 FD | 	call	#pushregs_
2b88c     09 15 0A FB | 	rdlong	arg02, arg01 wz
2b890     08 12 06 F1 | 	add	arg01, #8
2b894     09 27 02 F6 | 	mov	local01, arg01
2b898     08 12 86 F1 | 	sub	arg01, #8
2b89c     00 FA 05 A6 |  if_e	mov	result1, #0
2b8a0     5C 00 90 AD |  if_e	jmp	#LR__3961
2b8a4     30 14 06 F1 | 	add	arg02, #48
2b8a8     0A 29 02 FB | 	rdlong	local02, arg02
2b8ac     14 2B 02 F6 | 	mov	local03, local02
2b8b0     13 2A 46 F7 | 	zerox	local03, #19
2b8b4     14 28 46 F0 | 	shr	local02, #20
2b8b8     02 28 66 F0 | 	shl	local02, #2
2b8bc     ED 28 02 F1 | 	add	local02, __methods__
2b8c0     14 29 02 FB | 	rdlong	local02, local02
2b8c4     13 15 02 F6 | 	mov	arg02, local01
2b8c8     F2 2C 02 F6 | 	mov	local04, objptr
2b8cc     15 E5 01 F6 | 	mov	objptr, local03
2b8d0     2D 28 62 FD | 	call	local02
2b8d4     16 E5 01 F6 | 	mov	objptr, local04
2b8d8     00 FA 4D F2 | 	cmps	result1, #0 wz
2b8dc     1C 00 90 AD |  if_e	jmp	#LR__3960
2b8e0     01 FA 55 F2 | 	cmps	result1, #1 wc
2b8e4     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
2b8e8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2b8ec     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
2b8f0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2b8f4     00 FA 05 F6 | 	mov	result1, #0
2b8f8     04 00 90 FD | 	jmp	#LR__3961
2b8fc                 | LR__3960
2b8fc     13 FB 01 F6 | 	mov	result1, local01
2b900                 | LR__3961
2b900     A7 F0 03 F6 | 	mov	ptra, fp
2b904     B2 00 A0 FD | 	call	#popregs_
2b908                 | __system__readdir_ret
2b908     2D 00 64 FD | 	ret
2b90c                 | 
2b90c                 | __system___openraw
2b90c     15 4A 05 F6 | 	mov	COUNT_, #21
2b910     A8 00 A0 FD | 	call	#pushregs_
2b914     09 27 02 F6 | 	mov	local01, arg01
2b918     0A 29 02 F6 | 	mov	local02, arg02
2b91c     0B 2B 02 F6 | 	mov	local03, arg03
2b920     0C 2D 02 F6 | 	mov	local04, arg04
2b924     04 2E 06 F6 | 	mov	local05, #4
2b928     13 31 02 F6 | 	mov	local06, local01
2b92c     00 32 06 F6 | 	mov	local07, #0
2b930     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2b934     F3 34 02 F6 | 	mov	local08, ptr___system__dat__
2b938     1A 13 02 F6 | 	mov	arg01, local08
2b93c     14 15 02 F6 | 	mov	arg02, local02
2b940     00 16 06 F6 | 	mov	arg03, #0
2b944     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2b948     BC BD BF FD | 	call	#__system____getvfsforfile
2b94c     FD 36 0A F6 | 	mov	local09, result1 wz
2b950     10 00 90 AD |  if_e	jmp	#LR__3970
2b954     20 36 06 F1 | 	add	local09, #32
2b958     1B FB 09 FB | 	rdlong	result1, local09 wz
2b95c     20 36 86 F1 | 	sub	local09, #32
2b960     14 00 90 5D |  if_ne	jmp	#LR__3971
2b964                 | LR__3970
2b964     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b968     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2b96c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b970     01 FA 65 F6 | 	neg	result1, #1
2b974     8C 02 90 FD | 	jmp	#LR__3984
2b978                 | LR__3971
2b978     18 13 02 F6 | 	mov	arg01, local06
2b97c     00 14 06 F6 | 	mov	arg02, #0
2b980     34 16 06 F6 | 	mov	arg03, #52
2b984     09 39 02 F6 | 	mov	local10, arg01
2b988     98 00 A0 FD | 	call	#\builtin_bytefill_
2b98c     20 36 06 F1 | 	add	local09, #32
2b990     1B 3B 02 FB | 	rdlong	local11, local09
2b994     1D 3D 02 F6 | 	mov	local12, local11
2b998     1D 3F 02 F6 | 	mov	local13, local11
2b99c     20 36 86 F1 | 	sub	local09, #32
2b9a0     1F 41 02 F6 | 	mov	local14, local13
2b9a4     13 3C 46 F7 | 	zerox	local12, #19
2b9a8     14 40 46 F0 | 	shr	local14, #20
2b9ac     02 40 66 F0 | 	shl	local14, #2
2b9b0     ED 40 02 F1 | 	add	local14, __methods__
2b9b4     20 41 02 FB | 	rdlong	local14, local14
2b9b8     18 43 02 F6 | 	mov	local15, local06
2b9bc     1A 45 02 F6 | 	mov	local16, local08
2b9c0     15 47 02 F6 | 	mov	local17, local03
2b9c4     21 13 02 F6 | 	mov	arg01, local15
2b9c8     22 15 02 F6 | 	mov	arg02, local16
2b9cc     23 17 02 F6 | 	mov	arg03, local17
2b9d0     F2 48 02 F6 | 	mov	local18, objptr
2b9d4     1E E5 01 F6 | 	mov	objptr, local12
2b9d8     2D 40 62 FD | 	call	local14
2b9dc     24 E5 01 F6 | 	mov	objptr, local18
2b9e0     FD 4A 0A F6 | 	mov	local19, result1 wz
2b9e4     04 2A CE 57 |  if_ne	test	local03, #4 wz
2b9e8     58 00 90 AD |  if_e	jmp	#LR__3972
2b9ec     24 36 06 F1 | 	add	local09, #36
2b9f0     1B 3B 02 FB | 	rdlong	local11, local09
2b9f4     1D 3D 02 F6 | 	mov	local12, local11
2b9f8     1D 3F 02 F6 | 	mov	local13, local11
2b9fc     24 36 86 F1 | 	sub	local09, #36
2ba00     1F 41 02 F6 | 	mov	local14, local13
2ba04     13 3C 46 F7 | 	zerox	local12, #19
2ba08     14 40 46 F0 | 	shr	local14, #20
2ba0c     02 40 66 F0 | 	shl	local14, #2
2ba10     ED 40 02 F1 | 	add	local14, __methods__
2ba14     20 41 02 FB | 	rdlong	local14, local14
2ba18     18 43 02 F6 | 	mov	local15, local06
2ba1c     1A 45 02 F6 | 	mov	local16, local08
2ba20     16 47 02 F6 | 	mov	local17, local04
2ba24     21 13 02 F6 | 	mov	arg01, local15
2ba28     22 15 02 F6 | 	mov	arg02, local16
2ba2c     23 17 02 F6 | 	mov	arg03, local17
2ba30     F2 48 02 F6 | 	mov	local18, objptr
2ba34     1E E5 01 F6 | 	mov	objptr, local12
2ba38     2D 40 62 FD | 	call	local14
2ba3c     24 E5 01 F6 | 	mov	objptr, local18
2ba40     FD 4A 02 F6 | 	mov	local19, result1
2ba44                 | LR__3972
2ba44     00 4A 0E F2 | 	cmp	local19, #0 wz
2ba48     8C 01 90 5D |  if_ne	jmp	#LR__3982
2ba4c     15 4D 02 F6 | 	mov	local20, local03
2ba50     03 4C 0E F5 | 	and	local20, #3 wz
2ba54     02 2E 46 55 |  if_ne	or	local05, #2
2ba58     01 4C 0E F2 | 	cmp	local20, #1 wz
2ba5c     01 2E 46 55 |  if_ne	or	local05, #1
2ba60     20 2A CE F7 | 	test	local03, #32 wz
2ba64     C0 2E 46 55 |  if_ne	or	local05, #192
2ba68     08 30 06 F1 | 	add	local06, #8
2ba6c     18 2F 62 FC | 	wrlong	local05, local06
2ba70     0C 30 06 F1 | 	add	local06, #12
2ba74     18 4F 0A FB | 	rdlong	local21, local06 wz
2ba78     14 30 86 F1 | 	sub	local06, #20
2ba7c     18 00 90 5D |  if_ne	jmp	#LR__3973
2ba80     04 36 06 F1 | 	add	local09, #4
2ba84     1B 4F 02 FB | 	rdlong	local21, local09
2ba88     04 36 86 F1 | 	sub	local09, #4
2ba8c     14 30 06 F1 | 	add	local06, #20
2ba90     18 4F 62 FC | 	wrlong	local21, local06
2ba94     14 30 86 F1 | 	sub	local06, #20
2ba98                 | LR__3973
2ba98     18 30 06 F1 | 	add	local06, #24
2ba9c     18 4F 0A FB | 	rdlong	local21, local06 wz
2baa0     18 30 86 F1 | 	sub	local06, #24
2baa4     18 00 90 5D |  if_ne	jmp	#LR__3974
2baa8     08 36 06 F1 | 	add	local09, #8
2baac     1B 4F 02 FB | 	rdlong	local21, local09
2bab0     08 36 86 F1 | 	sub	local09, #8
2bab4     18 30 06 F1 | 	add	local06, #24
2bab8     18 4F 62 FC | 	wrlong	local21, local06
2babc     18 30 86 F1 | 	sub	local06, #24
2bac0                 | LR__3974
2bac0     24 30 06 F1 | 	add	local06, #36
2bac4     18 4F 0A FB | 	rdlong	local21, local06 wz
2bac8     24 30 86 F1 | 	sub	local06, #36
2bacc     1B 4F 02 AB |  if_e	rdlong	local21, local09
2bad0     24 30 06 A1 |  if_e	add	local06, #36
2bad4     18 4F 62 AC |  if_e	wrlong	local21, local06
2bad8     24 30 86 A1 |  if_e	sub	local06, #36
2badc     28 30 06 F1 | 	add	local06, #40
2bae0     18 4F 0A FB | 	rdlong	local21, local06 wz
2bae4     28 30 86 F1 | 	sub	local06, #40
2bae8     18 00 90 5D |  if_ne	jmp	#LR__3975
2baec     10 36 06 F1 | 	add	local09, #16
2baf0     1B 4F 02 FB | 	rdlong	local21, local09
2baf4     10 36 86 F1 | 	sub	local09, #16
2baf8     28 30 06 F1 | 	add	local06, #40
2bafc     18 4F 62 FC | 	wrlong	local21, local06
2bb00     28 30 86 F1 | 	sub	local06, #40
2bb04                 | LR__3975
2bb04     30 30 06 F1 | 	add	local06, #48
2bb08     18 4F 0A FB | 	rdlong	local21, local06 wz
2bb0c     30 30 86 F1 | 	sub	local06, #48
2bb10     18 00 90 5D |  if_ne	jmp	#LR__3976
2bb14     0C 36 06 F1 | 	add	local09, #12
2bb18     1B 4F 02 FB | 	rdlong	local21, local09
2bb1c     0C 36 86 F1 | 	sub	local09, #12
2bb20     30 30 06 F1 | 	add	local06, #48
2bb24     18 4F 62 FC | 	wrlong	local21, local06
2bb28     30 30 86 F1 | 	sub	local06, #48
2bb2c                 | LR__3976
2bb2c     1C 30 06 F1 | 	add	local06, #28
2bb30     18 4F 0A FB | 	rdlong	local21, local06 wz
2bb34     1C 30 86 F1 | 	sub	local06, #28
2bb38     1C 00 90 5D |  if_ne	jmp	#LR__3977
2bb3c     01 32 06 F6 | 	mov	local07, #1
2bb40     F2 12 02 F6 | 	mov	arg01, objptr
2bb44     00 80 05 FF 
2bb48     00 12 46 F5 | 	or	arg01, ##184549376
2bb4c     1C 30 06 F1 | 	add	local06, #28
2bb50     18 13 62 FC | 	wrlong	arg01, local06
2bb54     1C 30 86 F1 | 	sub	local06, #28
2bb58                 | LR__3977
2bb58     20 30 06 F1 | 	add	local06, #32
2bb5c     18 4F 0A FB | 	rdlong	local21, local06 wz
2bb60     20 30 86 F1 | 	sub	local06, #32
2bb64     1C 00 90 5D |  if_ne	jmp	#LR__3978
2bb68     01 32 06 F6 | 	mov	local07, #1
2bb6c     F2 12 02 F6 | 	mov	arg01, objptr
2bb70     00 88 05 FF 
2bb74     00 12 46 F5 | 	or	arg01, ##185597952
2bb78     20 30 06 F1 | 	add	local06, #32
2bb7c     18 13 62 FC | 	wrlong	arg01, local06
2bb80     20 30 86 F1 | 	sub	local06, #32
2bb84                 | LR__3978
2bb84     2C 30 06 F1 | 	add	local06, #44
2bb88     18 4F 0A FB | 	rdlong	local21, local06 wz
2bb8c     2C 30 86 F1 | 	sub	local06, #44
2bb90     44 00 90 5D |  if_ne	jmp	#LR__3981
2bb94     14 36 06 F1 | 	add	local09, #20
2bb98     1B 4F 0A FB | 	rdlong	local21, local09 wz
2bb9c     14 36 86 F1 | 	sub	local09, #20
2bba0     18 00 90 AD |  if_e	jmp	#LR__3979
2bba4     14 36 06 F1 | 	add	local09, #20
2bba8     1B 4F 02 FB | 	rdlong	local21, local09
2bbac     2C 30 06 F1 | 	add	local06, #44
2bbb0     18 4F 62 FC | 	wrlong	local21, local06
2bbb4     2C 30 86 F1 | 	sub	local06, #44
2bbb8     1C 00 90 FD | 	jmp	#LR__3980
2bbbc                 | LR__3979
2bbbc     01 32 06 F6 | 	mov	local07, #1
2bbc0     F2 12 02 F6 | 	mov	arg01, objptr
2bbc4     00 90 05 FF 
2bbc8     00 12 46 F5 | 	or	arg01, ##186646528
2bbcc     2C 30 06 F1 | 	add	local06, #44
2bbd0     18 13 62 FC | 	wrlong	arg01, local06
2bbd4     2C 30 86 F1 | 	sub	local06, #44
2bbd8                 | LR__3980
2bbd8                 | LR__3981
2bbd8                 | LR__3982
2bbd8     00 32 0E F2 | 	cmp	local07, #0 wz
2bbdc     18 13 02 56 |  if_ne	mov	arg01, local06
2bbe0     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
2bbe4     00 4A 0E F2 | 	cmp	local19, #0 wz
2bbe8     00 12 06 A6 |  if_e	mov	arg01, #0
2bbec     10 00 90 5D |  if_ne	jmp	#LR__3983
2bbf0     00 12 4E F2 | 	cmps	arg01, #0 wz
2bbf4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2bbf8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2bbfc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bc00                 | LR__3983
2bc00     25 FB 01 F6 | 	mov	result1, local19
2bc04                 | LR__3984
2bc04     A7 F0 03 F6 | 	mov	ptra, fp
2bc08     B2 00 A0 FD | 	call	#popregs_
2bc0c                 | __system___openraw_ret
2bc0c     2D 00 64 FD | 	ret
2bc10                 | 
2bc10                 | __system___closeraw
2bc10     05 4A 05 F6 | 	mov	COUNT_, #5
2bc14     A8 00 A0 FD | 	call	#pushregs_
2bc18     09 27 02 F6 | 	mov	local01, arg01
2bc1c     00 28 06 F6 | 	mov	local02, #0
2bc20     08 26 06 F1 | 	add	local01, #8
2bc24     13 FB 09 FB | 	rdlong	result1, local01 wz
2bc28     08 26 86 F1 | 	sub	local01, #8
2bc2c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2bc30     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2bc34     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2bc38     01 FA 65 A6 |  if_e	neg	result1, #1
2bc3c     A8 00 90 AD |  if_e	jmp	#LR__3992
2bc40     2C 26 06 F1 | 	add	local01, #44
2bc44     13 FB 09 FB | 	rdlong	result1, local01 wz
2bc48     2C 26 86 F1 | 	sub	local01, #44
2bc4c     38 00 90 AD |  if_e	jmp	#LR__3990
2bc50     2C 26 06 F1 | 	add	local01, #44
2bc54     13 2B 02 FB | 	rdlong	local03, local01
2bc58     15 2D 02 F6 | 	mov	local04, local03
2bc5c     2C 26 86 F1 | 	sub	local01, #44
2bc60     13 2C 46 F7 | 	zerox	local04, #19
2bc64     14 2A 46 F0 | 	shr	local03, #20
2bc68     02 2A 66 F0 | 	shl	local03, #2
2bc6c     ED 2A 02 F1 | 	add	local03, __methods__
2bc70     15 2B 02 FB | 	rdlong	local03, local03
2bc74     13 13 02 F6 | 	mov	arg01, local01
2bc78     F2 2E 02 F6 | 	mov	local05, objptr
2bc7c     16 E5 01 F6 | 	mov	objptr, local04
2bc80     2D 2A 62 FD | 	call	local03
2bc84     17 E5 01 F6 | 	mov	objptr, local05
2bc88                 | LR__3990
2bc88     24 26 06 F1 | 	add	local01, #36
2bc8c     13 2F 0A FB | 	rdlong	local05, local01 wz
2bc90     24 26 86 F1 | 	sub	local01, #36
2bc94     3C 00 90 AD |  if_e	jmp	#LR__3991
2bc98     24 26 06 F1 | 	add	local01, #36
2bc9c     13 2B 02 FB | 	rdlong	local03, local01
2bca0     15 2D 02 F6 | 	mov	local04, local03
2bca4     24 26 86 F1 | 	sub	local01, #36
2bca8     13 2C 46 F7 | 	zerox	local04, #19
2bcac     14 2A 46 F0 | 	shr	local03, #20
2bcb0     02 2A 66 F0 | 	shl	local03, #2
2bcb4     ED 2A 02 F1 | 	add	local03, __methods__
2bcb8     15 2B 02 FB | 	rdlong	local03, local03
2bcbc     13 13 02 F6 | 	mov	arg01, local01
2bcc0     F2 2E 02 F6 | 	mov	local05, objptr
2bcc4     16 E5 01 F6 | 	mov	objptr, local04
2bcc8     2D 2A 62 FD | 	call	local03
2bccc     17 E5 01 F6 | 	mov	objptr, local05
2bcd0     FD 28 02 F6 | 	mov	local02, result1
2bcd4                 | LR__3991
2bcd4     13 13 02 F6 | 	mov	arg01, local01
2bcd8     00 14 06 F6 | 	mov	arg02, #0
2bcdc     34 16 06 F6 | 	mov	arg03, #52
2bce0     98 00 A0 FD | 	call	#\builtin_bytefill_
2bce4     14 FB 01 F6 | 	mov	result1, local02
2bce8                 | LR__3992
2bce8     A7 F0 03 F6 | 	mov	ptra, fp
2bcec     B2 00 A0 FD | 	call	#popregs_
2bcf0                 | __system___closeraw_ret
2bcf0     2D 00 64 FD | 	ret
2bcf4                 | 
2bcf4                 | __system___vfs_open_sdcardx
2bcf4     0B 4A 05 F6 | 	mov	COUNT_, #11
2bcf8     A8 00 A0 FD | 	call	#pushregs_
2bcfc     09 2B 02 F6 | 	mov	local03, arg01
2bd00     0A 2D 02 F6 | 	mov	local04, arg02
2bd04     0B 2F 02 F6 | 	mov	local05, arg03
2bd08     0C 31 02 F6 | 	mov	local06, arg04
2bd0c     01 00 00 FF 
2bd10     24 12 06 F6 | 	mov	arg01, ##548
2bd14     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
2bd18     FD 32 02 F6 | 	mov	local07, result1
2bd1c     01 00 00 FF 
2bd20     34 12 06 F6 | 	mov	arg01, ##564
2bd24     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
2bd28     FD 34 02 F6 | 	mov	local08, result1
2bd2c     15 19 02 F6 | 	mov	arg04, local03
2bd30     1F 18 C6 F0 | 	sar	arg04, #31
2bd34     15 17 02 F6 | 	mov	arg03, local03
2bd38     01 12 06 F6 | 	mov	arg01, #1
2bd3c     00 14 06 F6 | 	mov	arg02, #0
2bd40     EC DB BF FD | 	call	#__system___int64_shl
2bd44     FD 26 02 F6 | 	mov	local01, result1
2bd48     FE 36 02 F6 | 	mov	local09, result2
2bd4c     16 19 02 F6 | 	mov	arg04, local04
2bd50     1F 18 C6 F0 | 	sar	arg04, #31
2bd54     16 17 02 F6 | 	mov	arg03, local04
2bd58     01 12 06 F6 | 	mov	arg01, #1
2bd5c     00 14 06 F6 | 	mov	arg02, #0
2bd60     CC DB BF FD | 	call	#__system___int64_shl
2bd64     FD 26 42 F5 | 	or	local01, result1
2bd68     FE 36 42 F5 | 	or	local09, result2
2bd6c     17 19 02 F6 | 	mov	arg04, local05
2bd70     1F 18 C6 F0 | 	sar	arg04, #31
2bd74     17 17 02 F6 | 	mov	arg03, local05
2bd78     01 12 06 F6 | 	mov	arg01, #1
2bd7c     00 14 06 F6 | 	mov	arg02, #0
2bd80     AC DB BF FD | 	call	#__system___int64_shl
2bd84     FD 26 42 F5 | 	or	local01, result1
2bd88     FE 36 42 F5 | 	or	local09, result2
2bd8c     18 19 02 F6 | 	mov	arg04, local06
2bd90     1F 18 C6 F0 | 	sar	arg04, #31
2bd94     18 17 02 F6 | 	mov	arg03, local06
2bd98     01 12 06 F6 | 	mov	arg01, #1
2bd9c     00 14 06 F6 | 	mov	arg02, #0
2bda0     8C DB BF FD | 	call	#__system___int64_shl
2bda4     1B 15 02 F6 | 	mov	arg02, local09
2bda8     FD 26 42 F5 | 	or	local01, result1
2bdac     0A FD 41 F5 | 	or	result2, arg02
2bdb0     FE 28 02 F6 | 	mov	local02, result2
2bdb4     13 13 02 F6 | 	mov	arg01, local01
2bdb8     14 15 02 F6 | 	mov	arg02, local02
2bdbc     A8 DB BF FD | 	call	#__system___usepins
2bdc0     00 FA 0D F2 | 	cmp	result1, #0 wz
2bdc4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2bdc8     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
2bdcc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2bdd0     00 FA 05 A6 |  if_e	mov	result1, #0
2bdd4     B4 00 90 AD |  if_e	jmp	#LR__4002
2bdd8     13 39 02 F6 | 	mov	local10, local01
2bddc     14 37 02 F6 | 	mov	local09, local02
2bde0     01 00 00 FF 
2bde4     08 32 06 F1 | 	add	local07, ##520
2bde8     19 39 62 FC | 	wrlong	local10, local07
2bdec     04 32 06 F1 | 	add	local07, #4
2bdf0     19 37 62 FC | 	wrlong	local09, local07
2bdf4     01 00 00 FF 
2bdf8     0C 32 86 F1 | 	sub	local07, ##524
2bdfc     18 1B 02 F6 | 	mov	arg05, local06
2be00     00 12 06 F6 | 	mov	arg01, #0
2be04     15 15 02 F6 | 	mov	arg02, local03
2be08     16 17 02 F6 | 	mov	arg03, local04
2be0c     17 19 02 F6 | 	mov	arg04, local05
2be10     F2 38 02 F6 | 	mov	local10, objptr
2be14     19 E5 01 F6 | 	mov	objptr, local07
2be18     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
2be1c     1C E5 01 F6 | 	mov	objptr, local10
2be20     FD 3A 0A F6 | 	mov	local11, result1 wz
2be24     24 00 90 5D |  if_ne	jmp	#LR__4000
2be28     B5 01 00 FF 
2be2c     E2 14 06 F6 | 	mov	arg02, ##@LR__5417
2be30     1A 13 02 F6 | 	mov	arg01, local08
2be34     00 16 06 F6 | 	mov	arg03, #0
2be38     F2 3A 02 F6 | 	mov	local11, objptr
2be3c     19 E5 01 F6 | 	mov	objptr, local07
2be40     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
2be44     1D E5 01 F6 | 	mov	objptr, local11
2be48     FD 3A 02 F6 | 	mov	local11, result1
2be4c                 | LR__4000
2be4c     00 3A 0E F2 | 	cmp	local11, #0 wz
2be50     24 00 90 AD |  if_e	jmp	#LR__4001
2be54     13 13 02 F6 | 	mov	arg01, local01
2be58     14 15 02 F6 | 	mov	arg02, local02
2be5c     5C DB BF FD | 	call	#__system___freepins
2be60     1D 13 6A F6 | 	neg	arg01, local11 wz
2be64     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2be68     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2be6c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2be70     00 FA 05 F6 | 	mov	result1, #0
2be74     14 00 90 FD | 	jmp	#LR__4002
2be78                 | LR__4001
2be78     19 13 02 F6 | 	mov	arg01, local07
2be7c     F2 3A 02 F6 | 	mov	local11, objptr
2be80     19 E5 01 F6 | 	mov	objptr, local07
2be84     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
2be88     1D E5 01 F6 | 	mov	objptr, local11
2be8c                 | LR__4002
2be8c     A7 F0 03 F6 | 	mov	ptra, fp
2be90     B2 00 A0 FD | 	call	#popregs_
2be94                 | __system___vfs_open_sdcardx_ret
2be94     2D 00 64 FD | 	ret
2be98                 | 
2be98                 | __system____default_getc
2be98     03 4A 05 F6 | 	mov	COUNT_, #3
2be9c     A8 00 A0 FD | 	call	#pushregs_
2bea0     09 27 02 F6 | 	mov	local01, arg01
2bea4     13 29 02 FB | 	rdlong	local02, local01
2bea8     08 28 06 F1 | 	add	local02, #8
2beac     14 2B 02 FB | 	rdlong	local03, local02
2beb0     02 2A CE F7 | 	test	local03, #2 wz
2beb4     13 13 02 56 |  if_ne	mov	arg01, local01
2beb8     00 01 B0 5D |  if_ne	call	#__system____default_flush
2bebc     14 2B 02 FB | 	rdlong	local03, local02
2bec0     01 2A 46 F5 | 	or	local03, #1
2bec4     14 2B 62 FC | 	wrlong	local03, local02
2bec8     08 28 86 F1 | 	sub	local02, #8
2becc     14 2B 0A FB | 	rdlong	local03, local02 wz
2bed0     0C 00 90 5D |  if_ne	jmp	#LR__4010
2bed4     13 13 02 F6 | 	mov	arg01, local01
2bed8     68 18 B0 FD | 	call	#__system____default_filbuf
2bedc     FD 2A 02 F6 | 	mov	local03, result1
2bee0                 | LR__4010
2bee0     01 2A 56 F2 | 	cmps	local03, #1 wc
2bee4     01 FA 65 C6 |  if_b	neg	result1, #1
2bee8     1C 00 90 CD |  if_b	jmp	#LR__4011
2beec     01 2A 86 F1 | 	sub	local03, #1
2bef0     14 2B 62 FC | 	wrlong	local03, local02
2bef4     04 28 06 F1 | 	add	local02, #4
2bef8     14 2B 02 FB | 	rdlong	local03, local02
2befc     15 FB C1 FA | 	rdbyte	result1, local03
2bf00     01 2A 06 F1 | 	add	local03, #1
2bf04     14 2B 62 FC | 	wrlong	local03, local02
2bf08                 | LR__4011
2bf08     A7 F0 03 F6 | 	mov	ptra, fp
2bf0c     B2 00 A0 FD | 	call	#popregs_
2bf10                 | __system____default_getc_ret
2bf10     2D 00 64 FD | 	ret
2bf14                 | 
2bf14                 | __system____default_putc
2bf14     06 4A 05 F6 | 	mov	COUNT_, #6
2bf18     A8 00 A0 FD | 	call	#pushregs_
2bf1c     09 27 02 F6 | 	mov	local01, arg01
2bf20     0A 29 02 F6 | 	mov	local02, arg02
2bf24     14 2B 02 FB | 	rdlong	local03, local02
2bf28     08 2A 06 F1 | 	add	local03, #8
2bf2c     15 FB 01 FB | 	rdlong	result1, local03
2bf30     01 FA CD F7 | 	test	result1, #1 wz
2bf34     14 13 02 56 |  if_ne	mov	arg01, local02
2bf38     80 00 B0 5D |  if_ne	call	#__system____default_flush
2bf3c     15 2D 02 FB | 	rdlong	local04, local03
2bf40     02 2C 46 F5 | 	or	local04, #2
2bf44     15 2D 62 FC | 	wrlong	local04, local03
2bf48     08 2A 86 F1 | 	sub	local03, #8
2bf4c     15 2F 02 FB | 	rdlong	local05, local03
2bf50     10 2A 06 F1 | 	add	local03, #16
2bf54     15 15 02 FB | 	rdlong	arg02, local03
2bf58     10 2A 86 F1 | 	sub	local03, #16
2bf5c     17 FB 01 F6 | 	mov	result1, local05
2bf60     0A FB 01 F1 | 	add	result1, arg02
2bf64     FD 26 42 FC | 	wrbyte	local01, result1
2bf68     13 27 E2 F8 | 	getbyte	local01, local01, #0
2bf6c     01 2E 06 F1 | 	add	local05, #1
2bf70     15 2F 62 FC | 	wrlong	local05, local03
2bf74     06 28 06 F1 | 	add	local02, #6
2bf78     14 31 EA FA | 	rdword	local06, local02 wz
2bf7c     06 28 86 F1 | 	sub	local02, #6
2bf80     0C 2A 06 51 |  if_ne	add	local03, #12
2bf84     15 2D 02 5B |  if_ne	rdlong	local04, local03
2bf88     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
2bf8c     0C 00 90 AD |  if_e	jmp	#LR__4020
2bf90     0A 26 0E F2 | 	cmp	local01, #10 wz
2bf94     01 30 0E A2 |  if_e	cmp	local06, #1 wz
2bf98     10 00 90 5D |  if_ne	jmp	#LR__4021
2bf9c                 | LR__4020
2bf9c     14 13 02 F6 | 	mov	arg01, local02
2bfa0     18 00 B0 FD | 	call	#__system____default_flush
2bfa4     00 FA 0D F2 | 	cmp	result1, #0 wz
2bfa8     01 26 66 56 |  if_ne	neg	local01, #1
2bfac                 | LR__4021
2bfac     13 FB 01 F6 | 	mov	result1, local01
2bfb0     A7 F0 03 F6 | 	mov	ptra, fp
2bfb4     B2 00 A0 FD | 	call	#popregs_
2bfb8                 | __system____default_putc_ret
2bfb8     2D 00 64 FD | 	ret
2bfbc                 | 
2bfbc                 | __system____default_flush
2bfbc     06 4A 05 F6 | 	mov	COUNT_, #6
2bfc0     A8 00 A0 FD | 	call	#pushregs_
2bfc4     09 27 02 F6 | 	mov	local01, arg01
2bfc8     13 29 02 FB | 	rdlong	local02, local01
2bfcc     14 2B 02 FB | 	rdlong	local03, local02
2bfd0     08 28 06 F1 | 	add	local02, #8
2bfd4     14 FB 01 FB | 	rdlong	result1, local02
2bfd8     08 28 86 F1 | 	sub	local02, #8
2bfdc     02 FA CD F7 | 	test	result1, #2 wz
2bfe0     D0 00 90 AD |  if_e	jmp	#LR__4032
2bfe4     01 2A 56 F2 | 	cmps	local03, #1 wc
2bfe8     20 01 90 CD |  if_b	jmp	#LR__4034
2bfec     08 26 06 F1 | 	add	local01, #8
2bff0     13 FB 01 FB | 	rdlong	result1, local01
2bff4     08 26 86 F1 | 	sub	local01, #8
2bff8     40 FA CD F7 | 	test	result1, #64 wz
2bffc     68 00 90 AD |  if_e	jmp	#LR__4031
2c000     08 26 06 F1 | 	add	local01, #8
2c004     13 17 02 FB | 	rdlong	arg03, local01
2c008     08 26 86 F1 | 	sub	local01, #8
2c00c     80 16 CE F7 | 	test	arg03, #128 wz
2c010     54 00 90 AD |  if_e	jmp	#LR__4030
2c014     30 26 06 F1 | 	add	local01, #48
2c018     13 2D 02 FB | 	rdlong	local04, local01
2c01c     16 2F 02 F6 | 	mov	local05, local04
2c020     30 26 86 F1 | 	sub	local01, #48
2c024     13 2E 46 F7 | 	zerox	local05, #19
2c028     14 2C 46 F0 | 	shr	local04, #20
2c02c     02 2C 66 F0 | 	shl	local04, #2
2c030     ED 2C 02 F1 | 	add	local04, __methods__
2c034     16 2D 02 FB | 	rdlong	local04, local04
2c038     13 13 02 F6 | 	mov	arg01, local01
2c03c     00 14 06 F6 | 	mov	arg02, #0
2c040     02 16 06 F6 | 	mov	arg03, #2
2c044     F2 30 02 F6 | 	mov	local06, objptr
2c048     17 E5 01 F6 | 	mov	objptr, local05
2c04c     2D 2C 62 FD | 	call	local04
2c050     18 E5 01 F6 | 	mov	objptr, local06
2c054     08 26 06 F1 | 	add	local01, #8
2c058     13 31 02 FB | 	rdlong	local06, local01
2c05c     80 30 26 F5 | 	andn	local06, #128
2c060     13 31 62 FC | 	wrlong	local06, local01
2c064     08 26 86 F1 | 	sub	local01, #8
2c068                 | LR__4030
2c068                 | LR__4031
2c068     18 26 06 F1 | 	add	local01, #24
2c06c     13 2D 02 FB | 	rdlong	local04, local01
2c070     16 2F 02 F6 | 	mov	local05, local04
2c074     18 26 86 F1 | 	sub	local01, #24
2c078     13 2E 46 F7 | 	zerox	local05, #19
2c07c     14 2C 46 F0 | 	shr	local04, #20
2c080     02 2C 66 F0 | 	shl	local04, #2
2c084     ED 2C 02 F1 | 	add	local04, __methods__
2c088     16 2D 02 FB | 	rdlong	local04, local04
2c08c     10 28 06 F1 | 	add	local02, #16
2c090     14 15 02 FB | 	rdlong	arg02, local02
2c094     10 28 86 F1 | 	sub	local02, #16
2c098     13 13 02 F6 | 	mov	arg01, local01
2c09c     15 17 02 F6 | 	mov	arg03, local03
2c0a0     F2 30 02 F6 | 	mov	local06, objptr
2c0a4     17 E5 01 F6 | 	mov	objptr, local05
2c0a8     2D 2C 62 FD | 	call	local04
2c0ac     18 E5 01 F6 | 	mov	objptr, local06
2c0b0     58 00 90 FD | 	jmp	#LR__4034
2c0b4                 | LR__4032
2c0b4     08 28 06 F1 | 	add	local02, #8
2c0b8     14 31 02 FB | 	rdlong	local06, local02
2c0bc     08 28 86 F1 | 	sub	local02, #8
2c0c0     01 30 CE F7 | 	test	local06, #1 wz
2c0c4     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2c0c8     40 00 90 AD |  if_e	jmp	#LR__4033
2c0cc     30 26 06 F1 | 	add	local01, #48
2c0d0     13 2D 02 FB | 	rdlong	local04, local01
2c0d4     16 2F 02 F6 | 	mov	local05, local04
2c0d8     30 26 86 F1 | 	sub	local01, #48
2c0dc     13 2E 46 F7 | 	zerox	local05, #19
2c0e0     14 2C 46 F0 | 	shr	local04, #20
2c0e4     02 2C 66 F0 | 	shl	local04, #2
2c0e8     ED 2C 02 F1 | 	add	local04, __methods__
2c0ec     16 2D 02 FB | 	rdlong	local04, local04
2c0f0     13 13 02 F6 | 	mov	arg01, local01
2c0f4     15 15 62 F6 | 	neg	arg02, local03
2c0f8     01 16 06 F6 | 	mov	arg03, #1
2c0fc     F2 30 02 F6 | 	mov	local06, objptr
2c100     17 E5 01 F6 | 	mov	objptr, local05
2c104     2D 2C 62 FD | 	call	local04
2c108     18 E5 01 F6 | 	mov	objptr, local06
2c10c                 | LR__4033
2c10c                 | LR__4034
2c10c     14 01 68 FC | 	wrlong	#0, local02
2c110     04 28 06 F1 | 	add	local02, #4
2c114     14 01 68 FC | 	wrlong	#0, local02
2c118     04 28 06 F1 | 	add	local02, #4
2c11c     14 01 68 FC | 	wrlong	#0, local02
2c120     00 FA 05 F6 | 	mov	result1, #0
2c124     A7 F0 03 F6 | 	mov	ptra, fp
2c128     B2 00 A0 FD | 	call	#popregs_
2c12c                 | __system____default_flush_ret
2c12c     2D 00 64 FD | 	ret
2c130                 | 
2c130                 | __system____default_buffer_init
2c130     02 4A 05 F6 | 	mov	COUNT_, #2
2c134     A8 00 A0 FD | 	call	#pushregs_
2c138     09 27 02 F6 | 	mov	local01, arg01
2c13c     13 29 02 FB | 	rdlong	local02, local01
2c140     13 13 02 F6 | 	mov	arg01, local01
2c144     34 03 B0 FD | 	call	#__system___isatty
2c148     00 FA 0D F2 | 	cmp	result1, #0 wz
2c14c     06 26 06 51 |  if_ne	add	local01, #6
2c150     13 0B 58 5C |  if_ne	wrword	#5, local01
2c154     06 26 06 A1 |  if_e	add	local01, #6
2c158     13 0D 58 AC |  if_e	wrword	#6, local01
2c15c     14 28 06 F1 | 	add	local02, #20
2c160     14 27 02 F6 | 	mov	local01, local02
2c164     04 28 86 F1 | 	sub	local02, #4
2c168     14 27 62 FC | 	wrlong	local01, local02
2c16c     04 28 86 F1 | 	sub	local02, #4
2c170     02 00 80 FF 
2c174     14 01 68 FC | 	wrlong	##1024, local02
2c178     00 FA 05 F6 | 	mov	result1, #0
2c17c     A7 F0 03 F6 | 	mov	ptra, fp
2c180     B2 00 A0 FD | 	call	#popregs_
2c184                 | __system____default_buffer_init_ret
2c184     2D 00 64 FD | 	ret
2c188                 | 
2c188                 | __system__stat
2c188     04 4A 05 F6 | 	mov	COUNT_, #4
2c18c     A8 00 A0 FD | 	call	#pushregs_
2c190     0A 27 02 F6 | 	mov	local01, arg02
2c194     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2c198     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
2c19c     09 15 02 F6 | 	mov	arg02, arg01
2c1a0     14 13 02 F6 | 	mov	arg01, local02
2c1a4     00 16 06 F6 | 	mov	arg03, #0
2c1a8     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2c1ac     58 B5 BF FD | 	call	#__system____getvfsforfile
2c1b0     FD 2A 0A F6 | 	mov	local03, result1 wz
2c1b4     10 00 90 AD |  if_e	jmp	#LR__4040
2c1b8     34 2A 06 F1 | 	add	local03, #52
2c1bc     15 17 0A FB | 	rdlong	arg03, local03 wz
2c1c0     34 2A 86 F1 | 	sub	local03, #52
2c1c4     14 00 90 5D |  if_ne	jmp	#LR__4041
2c1c8                 | LR__4040
2c1c8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c1cc     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2c1d0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c1d4     01 FA 65 F6 | 	neg	result1, #1
2c1d8     68 00 90 FD | 	jmp	#LR__4042
2c1dc                 | LR__4041
2c1dc     13 13 02 F6 | 	mov	arg01, local01
2c1e0     00 14 06 F6 | 	mov	arg02, #0
2c1e4     30 16 06 F6 | 	mov	arg03, #48
2c1e8     09 2D 02 F6 | 	mov	local04, arg01
2c1ec     98 00 A0 FD | 	call	#\builtin_bytefill_
2c1f0     16 FB 01 F6 | 	mov	result1, local04
2c1f4     14 13 CA FA | 	rdbyte	arg01, local02 wz
2c1f8     08 26 06 A1 |  if_e	add	local01, #8
2c1fc     08 00 80 AF 
2c200     13 FF 6B AC |  if_e	wrlong	##4607, local01
2c204     00 FA 05 A6 |  if_e	mov	result1, #0
2c208     38 00 90 AD |  if_e	jmp	#LR__4042
2c20c     34 2A 06 F1 | 	add	local03, #52
2c210     15 2B 02 FB | 	rdlong	local03, local03
2c214     15 2D 02 F6 | 	mov	local04, local03
2c218     13 2A 46 F7 | 	zerox	local03, #19
2c21c     14 2C 46 F0 | 	shr	local04, #20
2c220     02 2C 66 F0 | 	shl	local04, #2
2c224     ED 2C 02 F1 | 	add	local04, __methods__
2c228     16 2D 02 FB | 	rdlong	local04, local04
2c22c     14 13 02 F6 | 	mov	arg01, local02
2c230     13 15 02 F6 | 	mov	arg02, local01
2c234     F2 28 02 F6 | 	mov	local02, objptr
2c238     15 E5 01 F6 | 	mov	objptr, local03
2c23c     2D 2C 62 FD | 	call	local04
2c240     14 E5 01 F6 | 	mov	objptr, local02
2c244                 | LR__4042
2c244     A7 F0 03 F6 | 	mov	ptra, fp
2c248     B2 00 A0 FD | 	call	#popregs_
2c24c                 | __system__stat_ret
2c24c     2D 00 64 FD | 	ret
2c250                 | 
2c250                 | __system__write
2c250     0A 12 16 F2 | 	cmp	arg01, #10 wc
2c254     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2c258     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2c25c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2c260     01 FA 65 36 |  if_ae	neg	result1, #1
2c264     20 00 90 3D |  if_ae	jmp	#LR__4050
2c268     34 12 06 FD | 	qmul	arg01, #52
2c26c     02 00 00 FF 
2c270     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2c274     18 12 62 FD | 	getqx	arg01
2c278     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2c27c     02 00 00 FF 
2c280     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2c284     0C 10 B0 FD | 	call	#__system___vfswrite
2c288                 | LR__4050
2c288                 | __system__write_ret
2c288     2D 00 64 FD | 	ret
2c28c                 | 
2c28c                 | __system__read
2c28c     0A 12 16 F2 | 	cmp	arg01, #10 wc
2c290     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2c294     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2c298     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2c29c     01 FA 65 36 |  if_ae	neg	result1, #1
2c2a0     20 00 90 3D |  if_ae	jmp	#LR__4060
2c2a4     34 12 06 FD | 	qmul	arg01, #52
2c2a8     02 00 00 FF 
2c2ac     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2c2b0     18 12 62 FD | 	getqx	arg01
2c2b4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2c2b8     02 00 00 FF 
2c2bc     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2c2c0     98 11 B0 FD | 	call	#__system___vfsread
2c2c4                 | LR__4060
2c2c4                 | __system__read_ret
2c2c4     2D 00 64 FD | 	ret
2c2c8                 | 
2c2c8                 | __system__close
2c2c8     0A 12 16 F2 | 	cmp	arg01, #10 wc
2c2cc     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2c2d0     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2c2d4     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2c2d8     01 FA 65 36 |  if_ae	neg	result1, #1
2c2dc     20 00 90 3D |  if_ae	jmp	#LR__4070
2c2e0     34 12 06 FD | 	qmul	arg01, #52
2c2e4     02 00 00 FF 
2c2e8     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2c2ec     18 12 62 FD | 	getqx	arg01
2c2f0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2c2f4     02 00 00 FF 
2c2f8     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2c2fc     10 F9 BF FD | 	call	#__system___closeraw
2c300                 | LR__4070
2c300                 | __system__close_ret
2c300     2D 00 64 FD | 	ret
2c304                 | 
2c304                 | __system__lseek
2c304     06 4A 05 F6 | 	mov	COUNT_, #6
2c308     A8 00 A0 FD | 	call	#pushregs_
2c30c     0A 12 16 F2 | 	cmp	arg01, #10 wc
2c310     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2c314     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2c318     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2c31c     01 FA 65 36 |  if_ae	neg	result1, #1
2c320     C4 00 90 3D |  if_ae	jmp	#LR__4081
2c324     34 12 06 FD | 	qmul	arg01, #52
2c328     02 00 00 FF 
2c32c     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2c330     18 26 62 FD | 	getqx	local01
2c334     F3 26 02 F1 | 	add	local01, ptr___system__dat__
2c338     30 26 06 F1 | 	add	local01, #48
2c33c     13 13 0A FB | 	rdlong	arg01, local01 wz
2c340     30 26 86 F1 | 	sub	local01, #48
2c344     02 00 00 FF 
2c348     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2c34c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c350     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
2c354     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c358     01 FA 65 A6 |  if_e	neg	result1, #1
2c35c     88 00 90 AD |  if_e	jmp	#LR__4081
2c360     08 26 06 F1 | 	add	local01, #8
2c364     13 29 02 FB | 	rdlong	local02, local01
2c368     08 26 86 F1 | 	sub	local01, #8
2c36c     40 28 CE F7 | 	test	local02, #64 wz
2c370     08 26 06 51 |  if_ne	add	local01, #8
2c374     13 29 02 5B |  if_ne	rdlong	local02, local01
2c378     80 28 46 55 |  if_ne	or	local02, #128
2c37c     13 29 62 5C |  if_ne	wrlong	local02, local01
2c380     08 26 86 51 |  if_ne	sub	local01, #8
2c384     30 26 06 F1 | 	add	local01, #48
2c388     13 2B 02 FB | 	rdlong	local03, local01
2c38c     15 2D 02 F6 | 	mov	local04, local03
2c390     30 26 86 F1 | 	sub	local01, #48
2c394     13 2C 46 F7 | 	zerox	local04, #19
2c398     14 2A 46 F0 | 	shr	local03, #20
2c39c     02 2A 66 F0 | 	shl	local03, #2
2c3a0     ED 2A 02 F1 | 	add	local03, __methods__
2c3a4     15 2B 02 FB | 	rdlong	local03, local03
2c3a8     13 13 02 F6 | 	mov	arg01, local01
2c3ac     F2 2E 02 F6 | 	mov	local05, objptr
2c3b0     16 E5 01 F6 | 	mov	objptr, local04
2c3b4     2D 2A 62 FD | 	call	local03
2c3b8     17 E5 01 F6 | 	mov	objptr, local05
2c3bc     FD 30 02 F6 | 	mov	local06, result1
2c3c0     00 30 56 F2 | 	cmps	local06, #0 wc
2c3c4     1C 00 90 3D |  if_ae	jmp	#LR__4080
2c3c8     18 13 6A F6 | 	neg	arg01, local06 wz
2c3cc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c3d0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2c3d4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c3d8     01 FA 65 56 |  if_ne	neg	result1, #1
2c3dc     00 FA 05 A6 |  if_e	mov	result1, #0
2c3e0     04 00 90 FD | 	jmp	#LR__4081
2c3e4                 | LR__4080
2c3e4     18 FB 01 F6 | 	mov	result1, local06
2c3e8                 | LR__4081
2c3e8     A7 F0 03 F6 | 	mov	ptra, fp
2c3ec     B2 00 A0 FD | 	call	#popregs_
2c3f0                 | __system__lseek_ret
2c3f0     2D 00 64 FD | 	ret
2c3f4                 | 
2c3f4                 | __system___ioctl
2c3f4     03 4A 05 F6 | 	mov	COUNT_, #3
2c3f8     A8 00 A0 FD | 	call	#pushregs_
2c3fc     00 12 4E F2 | 	cmps	arg01, #0 wz
2c400     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c404     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2c408     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c40c     01 FA 65 A6 |  if_e	neg	result1, #1
2c410     5C 00 90 AD |  if_e	jmp	#LR__4091
2c414     28 12 06 F1 | 	add	arg01, #40
2c418     09 27 02 FB | 	rdlong	local01, arg01
2c41c     13 29 02 F6 | 	mov	local02, local01
2c420     28 12 86 F1 | 	sub	arg01, #40
2c424     13 28 46 F7 | 	zerox	local02, #19
2c428     14 26 46 F0 | 	shr	local01, #20
2c42c     02 26 66 F0 | 	shl	local01, #2
2c430     ED 26 02 F1 | 	add	local01, __methods__
2c434     13 27 02 FB | 	rdlong	local01, local01
2c438     F2 2A 02 F6 | 	mov	local03, objptr
2c43c     14 E5 01 F6 | 	mov	objptr, local02
2c440     2D 26 62 FD | 	call	local01
2c444     15 E5 01 F6 | 	mov	objptr, local03
2c448     FD 12 0A F6 | 	mov	arg01, result1 wz
2c44c     1C 00 90 AD |  if_e	jmp	#LR__4090
2c450     00 12 4E F2 | 	cmps	arg01, #0 wz
2c454     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c458     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2c45c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c460     01 FA 65 56 |  if_ne	neg	result1, #1
2c464     00 FA 05 A6 |  if_e	mov	result1, #0
2c468     04 00 90 FD | 	jmp	#LR__4091
2c46c                 | LR__4090
2c46c     00 FA 05 F6 | 	mov	result1, #0
2c470                 | LR__4091
2c470     A7 F0 03 F6 | 	mov	ptra, fp
2c474     B2 00 A0 FD | 	call	#popregs_
2c478                 | __system___ioctl_ret
2c478     2D 00 64 FD | 	ret
2c47c                 | 
2c47c                 | __system___isatty
2c47c     00 4A 05 F6 | 	mov	COUNT_, #0
2c480     A8 00 A0 FD | 	call	#pushregs_
2c484     0C F0 07 F1 | 	add	ptra, #12
2c488     04 4E 05 F1 | 	add	fp, #4
2c48c     A7 12 62 FC | 	wrlong	arg01, fp
2c490     04 4E 05 F1 | 	add	fp, #4
2c494     A7 16 02 F6 | 	mov	arg03, fp
2c498     08 4E 85 F1 | 	sub	fp, #8
2c49c     00 15 06 F6 | 	mov	arg02, #256
2c4a0     50 FF BF FD | 	call	#__system___ioctl
2c4a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c4a8     01 FA 05 A6 |  if_e	mov	result1, #1
2c4ac     00 FA 05 56 |  if_ne	mov	result1, #0
2c4b0     A7 F0 03 F6 | 	mov	ptra, fp
2c4b4     B2 00 A0 FD | 	call	#popregs_
2c4b8                 | __system___isatty_ret
2c4b8     2D 00 64 FD | 	ret
2c4bc                 | 
2c4bc                 | __system____getftab
2c4bc     0A 12 16 F2 | 	cmp	arg01, #10 wc
2c4c0     34 12 06 CD |  if_b	qmul	arg01, #52
2c4c4     00 FA 05 36 |  if_ae	mov	result1, #0
2c4c8     02 00 00 CF 
2c4cc     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
2c4d0     18 FA 61 CD |  if_b	getqx	result1
2c4d4     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
2c4d8     02 00 00 CF 
2c4dc     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
2c4e0                 | __system____getftab_ret
2c4e0     2D 00 64 FD | 	ret
2c4e4                 | 
2c4e4                 | __system__strncpy
2c4e4     09 01 02 F6 | 	mov	_var01, arg01
2c4e8                 | LR__4100
2c4e8     01 16 86 F1 | 	sub	arg03, #1
2c4ec     00 16 56 F2 | 	cmps	arg03, #0 wc
2c4f0     18 00 90 CD |  if_b	jmp	#LR__4101
2c4f4     0A FB C1 FA | 	rdbyte	result1, arg02
2c4f8     00 FB 41 FC | 	wrbyte	result1, _var01
2c4fc     01 14 06 F1 | 	add	arg02, #1
2c500     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2c504     01 00 06 F1 | 	add	_var01, #1
2c508     DC FF 9F 5D |  if_ne	jmp	#LR__4100
2c50c                 | LR__4101
2c50c     97 0C 48 FB | 	callpa	#(@LR__4103-@LR__4102)>>2,fcache_load_ptr_
2c510                 | LR__4102
2c510     01 16 86 F1 | 	sub	arg03, #1
2c514     00 16 56 F2 | 	cmps	arg03, #0 wc
2c518     00 03 02 36 |  if_ae	mov	_var02, _var01
2c51c     01 00 06 31 |  if_ae	add	_var01, #1
2c520     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2c524     E8 FF 9F 3D |  if_ae	jmp	#LR__4102
2c528                 | LR__4103
2c528     09 FB 01 F6 | 	mov	result1, arg01
2c52c                 | __system__strncpy_ret
2c52c     2D 00 64 FD | 	ret
2c530                 | 
2c530                 | __system__strncat
2c530     00 14 4E F2 | 	cmps	arg02, #0 wz
2c534     50 00 90 AD |  if_e	jmp	#LR__4114
2c538     01 16 16 F2 | 	cmp	arg03, #1 wc
2c53c     48 00 90 CD |  if_b	jmp	#LR__4114
2c540     09 01 02 F6 | 	mov	_var01, arg01
2c544     97 1E 48 FB | 	callpa	#(@LR__4112-@LR__4110)>>2,fcache_load_ptr_
2c548                 | LR__4110
2c548     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2c54c     01 00 06 51 |  if_ne	add	_var01, #1
2c550     F4 FF 9F 5D |  if_ne	jmp	#LR__4110
2c554     0B 03 02 F6 | 	mov	_var02, arg03
2c558                 | LR__4111
2c558     0A 05 C2 FA | 	rdbyte	_var03, arg02
2c55c     02 07 02 F6 | 	mov	_var04, _var03
2c560     07 06 4E F7 | 	zerox	_var04, #7 wz
2c564     01 14 06 F1 | 	add	arg02, #1
2c568     18 00 90 AD |  if_e	jmp	#LR__4113
2c56c     01 02 86 F1 | 	sub	_var02, #1
2c570     00 02 56 F2 | 	cmps	_var02, #0 wc
2c574     00 07 02 36 |  if_ae	mov	_var04, _var01
2c578     01 00 06 31 |  if_ae	add	_var01, #1
2c57c     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
2c580     D4 FF 9F 3D |  if_ae	jmp	#LR__4111
2c584                 | LR__4112
2c584                 | LR__4113
2c584     00 01 48 FC | 	wrbyte	#0, _var01
2c588                 | LR__4114
2c588     09 FB 01 F6 | 	mov	result1, arg01
2c58c                 | __system__strncat_ret
2c58c     2D 00 64 FD | 	ret
2c590                 | 
2c590                 | __system__strncmp
2c590     09 01 0A F6 | 	mov	_var01, arg01 wz
2c594     14 00 90 5D |  if_ne	jmp	#LR__4120
2c598     00 14 0E F2 | 	cmp	arg02, #0 wz
2c59c     01 02 66 56 |  if_ne	neg	_var02, #1
2c5a0     00 02 06 A6 |  if_e	mov	_var02, #0
2c5a4     01 FB 01 F6 | 	mov	result1, _var02
2c5a8     74 00 90 FD | 	jmp	#__system__strncmp_ret
2c5ac                 | LR__4120
2c5ac     00 14 0E F2 | 	cmp	arg02, #0 wz
2c5b0     01 FA 05 A6 |  if_e	mov	result1, #1
2c5b4     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2c5b8     0B 05 02 F6 | 	mov	_var03, arg03
2c5bc     97 16 48 FB | 	callpa	#(@LR__4122-@LR__4121)>>2,fcache_load_ptr_
2c5c0                 | LR__4121
2c5c0     00 07 C2 FA | 	rdbyte	_var04, _var01
2c5c4     0A 09 02 F6 | 	mov	_var05, arg02
2c5c8     04 0B C2 FA | 	rdbyte	_var06, _var05
2c5cc     01 04 86 F1 | 	sub	_var03, #1
2c5d0     00 04 56 F2 | 	cmps	_var03, #0 wc
2c5d4     01 00 06 F1 | 	add	_var01, #1
2c5d8     01 14 06 F1 | 	add	arg02, #1
2c5dc     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2c5e0     08 00 90 2D |  if_nc_and_z	jmp	#LR__4123
2c5e4     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2c5e8     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4121
2c5ec                 | LR__4122
2c5ec                 | LR__4123
2c5ec     00 04 56 F2 | 	cmps	_var03, #0 wc
2c5f0     00 FA 05 C6 |  if_b	mov	result1, #0
2c5f4     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
2c5f8     05 07 0A F2 | 	cmp	_var04, _var06 wz
2c5fc     00 FA 05 A6 |  if_e	mov	result1, #0
2c600     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2c604     00 06 0E F2 | 	cmp	_var04, #0 wz
2c608     01 FA 65 A6 |  if_e	neg	result1, #1
2c60c     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2c610     00 0A 0E F2 | 	cmp	_var06, #0 wz
2c614     01 FA 05 A6 |  if_e	mov	result1, #1
2c618     03 FB 01 56 |  if_ne	mov	result1, _var04
2c61c     05 FB 81 51 |  if_ne	sub	result1, _var06
2c620                 | __system__strncmp_ret
2c620     2D 00 64 FD | 	ret
2c624                 | 
2c624                 | __system____root_opendir
2c624     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2c628     04 12 06 F1 | 	add	arg01, #4
2c62c     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
2c630     00 FA 05 F6 | 	mov	result1, #0
2c634     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2c638                 | __system____root_opendir_ret
2c638     2D 00 64 FD | 	ret
2c63c                 | 
2c63c                 | __system____root_readdir
2c63c     03 4A 05 F6 | 	mov	COUNT_, #3
2c640     A8 00 A0 FD | 	call	#pushregs_
2c644     09 27 02 F6 | 	mov	local01, arg01
2c648     0A 29 02 F6 | 	mov	local02, arg02
2c64c     04 26 06 F1 | 	add	local01, #4
2c650     13 2B 02 FB | 	rdlong	local03, local01
2c654     04 26 86 F1 | 	sub	local01, #4
2c658                 | LR__4130
2c658     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2c65c     F3 2A 0A F2 | 	cmp	local03, ptr___system__dat__ wz
2c660     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2c664     01 FA 65 A6 |  if_e	neg	result1, #1
2c668     48 00 90 AD |  if_e	jmp	#LR__4131
2c66c     15 17 0A FB | 	rdlong	arg03, local03 wz
2c670     04 2A 06 A1 |  if_e	add	local03, #4
2c674     E0 FF 9F AD |  if_e	jmp	#LR__4130
2c678     15 15 02 FB | 	rdlong	arg02, local03
2c67c     01 14 06 F1 | 	add	arg02, #1
2c680     14 13 02 F6 | 	mov	arg01, local02
2c684     40 16 06 F6 | 	mov	arg03, #64
2c688     58 FE BF FD | 	call	#__system__strncpy
2c68c     50 28 06 F1 | 	add	local02, #80
2c690     14 03 48 FC | 	wrbyte	#1, local02
2c694     08 28 86 F1 | 	sub	local02, #8
2c698     14 01 68 FC | 	wrlong	#0, local02
2c69c     04 28 06 F1 | 	add	local02, #4
2c6a0     14 01 68 FC | 	wrlong	#0, local02
2c6a4     04 2A 06 F1 | 	add	local03, #4
2c6a8     04 26 06 F1 | 	add	local01, #4
2c6ac     13 2B 62 FC | 	wrlong	local03, local01
2c6b0     00 FA 05 F6 | 	mov	result1, #0
2c6b4                 | LR__4131
2c6b4     A7 F0 03 F6 | 	mov	ptra, fp
2c6b8     B2 00 A0 FD | 	call	#popregs_
2c6bc                 | __system____root_readdir_ret
2c6bc     2D 00 64 FD | 	ret
2c6c0                 | 
2c6c0                 | __system____root_closedir
2c6c0     00 FA 05 F6 | 	mov	result1, #0
2c6c4                 | __system____root_closedir_ret
2c6c4     2D 00 64 FD | 	ret
2c6c8                 | 
2c6c8                 | __system____root_stat
2c6c8     0A 01 02 F6 | 	mov	_var01, arg02
2c6cc     00 13 02 F6 | 	mov	arg01, _var01
2c6d0     00 14 06 F6 | 	mov	arg02, #0
2c6d4     30 16 06 F6 | 	mov	arg03, #48
2c6d8     98 00 A0 FD | 	call	#\builtin_bytefill_
2c6dc     08 00 06 F1 | 	add	_var01, #8
2c6e0     08 00 80 FF 
2c6e4     00 FF 6B FC | 	wrlong	##4607, _var01
2c6e8     00 FA 05 F6 | 	mov	result1, #0
2c6ec                 | __system____root_stat_ret
2c6ec     2D 00 64 FD | 	ret
2c6f0                 | 
2c6f0                 | __system___normalizeName
2c6f0     00 00 06 F6 | 	mov	_var01, #0
2c6f4     09 03 02 F6 | 	mov	_var02, arg01
2c6f8     01 05 02 F6 | 	mov	_var03, _var02
2c6fc                 | LR__4140
2c6fc     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2c700     5C 01 90 AD |  if_e	jmp	#LR__4159
2c704     00 00 0E F2 | 	cmp	_var01, #0 wz
2c708     02 07 02 56 |  if_ne	mov	_var04, _var03
2c70c     01 04 06 51 |  if_ne	add	_var03, #1
2c710     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
2c714     00 00 06 56 |  if_ne	mov	_var01, #0
2c718     01 07 C2 FA | 	rdbyte	_var04, _var02
2c71c     2E 06 0E F2 | 	cmp	_var04, #46 wz
2c720     D8 00 90 5D |  if_ne	jmp	#LR__4152
2c724     01 02 06 F1 | 	add	_var02, #1
2c728     01 07 C2 FA | 	rdbyte	_var04, _var02
2c72c     01 02 86 F1 | 	sub	_var02, #1
2c730     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c734     18 00 90 AD |  if_e	jmp	#LR__4141
2c738     01 02 06 F1 | 	add	_var02, #1
2c73c     01 09 C2 FA | 	rdbyte	_var05, _var02
2c740     01 02 86 F1 | 	sub	_var02, #1
2c744     04 0B 02 F6 | 	mov	_var06, _var05
2c748     07 0A 4E F7 | 	zerox	_var06, #7 wz
2c74c     10 00 90 5D |  if_ne	jmp	#LR__4142
2c750                 | LR__4141
2c750     01 0D 02 F6 | 	mov	_var07, _var02
2c754     01 0C 06 F1 | 	add	_var07, #1
2c758     06 03 02 F6 | 	mov	_var02, _var07
2c75c     E0 00 90 FD | 	jmp	#LR__4156
2c760                 | LR__4142
2c760     01 02 06 F1 | 	add	_var02, #1
2c764     01 0D C2 FA | 	rdbyte	_var07, _var02
2c768     01 02 86 F1 | 	sub	_var02, #1
2c76c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2c770     2E 06 0E F2 | 	cmp	_var04, #46 wz
2c774     84 00 90 5D |  if_ne	jmp	#LR__4151
2c778     02 02 06 F1 | 	add	_var02, #2
2c77c     01 0D C2 FA | 	rdbyte	_var07, _var02
2c780     02 02 86 F1 | 	sub	_var02, #2
2c784     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2c788     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c78c     18 00 90 AD |  if_e	jmp	#LR__4143
2c790     02 02 06 F1 | 	add	_var02, #2
2c794     01 09 C2 FA | 	rdbyte	_var05, _var02
2c798     02 02 86 F1 | 	sub	_var02, #2
2c79c     04 0B 02 F6 | 	mov	_var06, _var05
2c7a0     07 0A 4E F7 | 	zerox	_var06, #7 wz
2c7a4     54 00 90 5D |  if_ne	jmp	#LR__4150
2c7a8                 | LR__4143
2c7a8     02 02 06 F1 | 	add	_var02, #2
2c7ac     09 05 5A F2 | 	cmps	_var03, arg01 wcz
2c7b0     40 00 90 ED |  if_be	jmp	#LR__4149
2c7b4     02 0F 02 F6 | 	mov	_var08, _var03
2c7b8     01 0E 86 F1 | 	sub	_var08, #1
2c7bc                 | LR__4144
2c7bc     07 07 C2 FA | 	rdbyte	_var04, _var08
2c7c0     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c7c4     0C 00 90 5D |  if_ne	jmp	#LR__4145
2c7c8     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2c7cc     01 0E 86 11 |  if_a	sub	_var08, #1
2c7d0     E8 FF 9F 1D |  if_a	jmp	#LR__4144
2c7d4                 | LR__4145
2c7d4     97 0C 48 FB | 	callpa	#(@LR__4147-@LR__4146)>>2,fcache_load_ptr_
2c7d8                 | LR__4146
2c7d8     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2c7dc     10 00 90 ED |  if_be	jmp	#LR__4148
2c7e0     07 07 C2 FA | 	rdbyte	_var04, _var08
2c7e4     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c7e8     01 0E 86 51 |  if_ne	sub	_var08, #1
2c7ec     E8 FF 9F 5D |  if_ne	jmp	#LR__4146
2c7f0                 | LR__4147
2c7f0                 | LR__4148
2c7f0     07 05 02 F6 | 	mov	_var03, _var08
2c7f4                 | LR__4149
2c7f4     01 00 06 F6 | 	mov	_var01, #1
2c7f8     44 00 90 FD | 	jmp	#LR__4156
2c7fc                 | LR__4150
2c7fc                 | LR__4151
2c7fc                 | LR__4152
2c7fc     97 18 48 FB | 	callpa	#(@LR__4154-@LR__4153)>>2,fcache_load_ptr_
2c800                 | LR__4153
2c800     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2c804     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
2c808     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
2c80c     20 00 90 AD |  if_e	jmp	#LR__4155
2c810     01 0B 02 F6 | 	mov	_var06, _var02
2c814     01 09 02 F6 | 	mov	_var05, _var02
2c818     01 08 06 F1 | 	add	_var05, #1
2c81c     05 11 C2 FA | 	rdbyte	_var09, _var06
2c820     04 03 02 F6 | 	mov	_var02, _var05
2c824     02 11 42 FC | 	wrbyte	_var09, _var03
2c828     01 04 06 F1 | 	add	_var03, #1
2c82c     D0 FF 9F FD | 	jmp	#LR__4153
2c830                 | LR__4154
2c830                 | LR__4155
2c830     01 07 C2 FA | 	rdbyte	_var04, _var02
2c834     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c838     C0 FE 9F 5D |  if_ne	jmp	#LR__4140
2c83c     01 00 06 F6 | 	mov	_var01, #1
2c840                 | LR__4156
2c840     97 0C 48 FB | 	callpa	#(@LR__4158-@LR__4157)>>2,fcache_load_ptr_
2c844                 | LR__4157
2c844     01 07 C2 FA | 	rdbyte	_var04, _var02
2c848     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c84c     01 0D 02 A6 |  if_e	mov	_var07, _var02
2c850     01 0C 06 A1 |  if_e	add	_var07, #1
2c854     06 03 02 A6 |  if_e	mov	_var02, _var07
2c858     E8 FF 9F AD |  if_e	jmp	#LR__4157
2c85c                 | LR__4158
2c85c     9C FE 9F FD | 	jmp	#LR__4140
2c860                 | LR__4159
2c860     02 01 48 FC | 	wrbyte	#0, _var03
2c864                 | __system___normalizeName_ret
2c864     2D 00 64 FD | 	ret
2c868                 | 
2c868                 | __system___strrev
2c868     09 01 CA FA | 	rdbyte	_var01, arg01 wz
2c86c     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
2c870     09 03 02 F6 | 	mov	_var02, arg01
2c874     97 1A 48 FB | 	callpa	#(@LR__4162-@LR__4160)>>2,fcache_load_ptr_
2c878                 | LR__4160
2c878     01 01 CA FA | 	rdbyte	_var01, _var02 wz
2c87c     01 02 06 51 |  if_ne	add	_var02, #1
2c880     F4 FF 9F 5D |  if_ne	jmp	#LR__4160
2c884     01 02 86 F1 | 	sub	_var02, #1
2c888                 | LR__4161
2c888     09 03 5A F2 | 	cmps	_var02, arg01 wcz
2c88c     1C 00 90 ED |  if_be	jmp	#LR__4163
2c890     09 01 C2 FA | 	rdbyte	_var01, arg01
2c894     01 05 C2 FA | 	rdbyte	_var03, _var02
2c898     09 05 42 FC | 	wrbyte	_var03, arg01
2c89c     01 01 42 FC | 	wrbyte	_var01, _var02
2c8a0     01 12 06 F1 | 	add	arg01, #1
2c8a4     01 02 86 F1 | 	sub	_var02, #1
2c8a8     DC FF 9F FD | 	jmp	#LR__4161
2c8ac                 | LR__4162
2c8ac                 | LR__4163
2c8ac                 | __system___strrev_ret
2c8ac     2D 00 64 FD | 	ret
2c8b0                 | 
2c8b0                 | __system___fmtpad
2c8b0     06 4A 05 F6 | 	mov	COUNT_, #6
2c8b4     A8 00 A0 FD | 	call	#pushregs_
2c8b8     09 27 02 F6 | 	mov	local01, arg01
2c8bc     0A 29 02 F6 | 	mov	local02, arg02
2c8c0     0B 2B 02 F6 | 	mov	local03, arg03
2c8c4     14 13 EA F8 | 	getbyte	arg01, local02, #1
2c8c8     16 28 46 F0 | 	shr	local02, #22
2c8cc     03 28 0E F5 | 	and	local02, #3 wz
2c8d0     00 2C 06 F6 | 	mov	local04, #0
2c8d4     01 28 06 A6 |  if_e	mov	local02, #1
2c8d8     0C 29 CA F7 | 	test	local02, arg04 wz
2c8dc     00 FA 05 A6 |  if_e	mov	result1, #0
2c8e0     88 00 90 AD |  if_e	jmp	#LR__4173
2c8e4     09 2B C2 F2 | 	subr	local03, arg01
2c8e8     01 2A 56 F2 | 	cmps	local03, #1 wc
2c8ec     00 FA 05 C6 |  if_b	mov	result1, #0
2c8f0     78 00 90 CD |  if_b	jmp	#LR__4173
2c8f4     03 28 0E F2 | 	cmp	local02, #3 wz
2c8f8     18 00 90 5D |  if_ne	jmp	#LR__4170
2c8fc     01 18 0E F2 | 	cmp	arg04, #1 wz
2c900     6E 28 62 FD | 	wrz	local02
2c904     14 2B 02 F1 | 	add	local03, local02
2c908     15 2B 52 F6 | 	abs	local03, local03 wc
2c90c     01 2A 46 F0 | 	shr	local03, #1
2c910     15 2B 82 F6 | 	negc	local03, local03
2c914                 | LR__4170
2c914     01 2A 56 F2 | 	cmps	local03, #1 wc
2c918     4C 00 90 CD |  if_b	jmp	#LR__4172
2c91c     15 2F 02 F6 | 	mov	local05, local03
2c920                 | LR__4171
2c920     13 29 02 F6 | 	mov	local02, local01
2c924     13 31 02 F6 | 	mov	local06, local01
2c928     13 28 46 F7 | 	zerox	local02, #19
2c92c     14 30 46 F0 | 	shr	local06, #20
2c930     02 30 66 F0 | 	shl	local06, #2
2c934     ED 30 02 F1 | 	add	local06, __methods__
2c938     18 31 02 FB | 	rdlong	local06, local06
2c93c     20 12 06 F6 | 	mov	arg01, #32
2c940     F2 2A 02 F6 | 	mov	local03, objptr
2c944     14 E5 01 F6 | 	mov	objptr, local02
2c948     2D 30 62 FD | 	call	local06
2c94c     15 E5 01 F6 | 	mov	objptr, local03
2c950     FD 30 02 F6 | 	mov	local06, result1
2c954     00 30 56 F2 | 	cmps	local06, #0 wc
2c958     18 FB 01 C6 |  if_b	mov	result1, local06
2c95c     0C 00 90 CD |  if_b	jmp	#LR__4173
2c960     18 2D 02 F1 | 	add	local04, local06
2c964     EE 2F 6E FB | 	djnz	local05, #LR__4171
2c968                 | LR__4172
2c968     16 FB 01 F6 | 	mov	result1, local04
2c96c                 | LR__4173
2c96c     A7 F0 03 F6 | 	mov	ptra, fp
2c970     B2 00 A0 FD | 	call	#popregs_
2c974                 | __system___fmtpad_ret
2c974     2D 00 64 FD | 	ret
2c978                 | 
2c978                 | __system___uitoa
2c978     04 4A 05 F6 | 	mov	COUNT_, #4
2c97c     A8 00 A0 FD | 	call	#pushregs_
2c980     09 27 02 F6 | 	mov	local01, arg01
2c984     00 1A 4E F2 | 	cmps	arg05, #0 wz
2c988     13 1B 02 F6 | 	mov	arg05, local01
2c98c     00 28 06 F6 | 	mov	local02, #0
2c990     37 2A 06 56 |  if_ne	mov	local03, #55
2c994     57 2A 06 A6 |  if_e	mov	local03, #87
2c998                 | LR__4180
2c998     0B 15 12 FD | 	qdiv	arg02, arg03
2c99c     19 2C 62 FD | 	getqy	local04
2c9a0     0B 15 12 FD | 	qdiv	arg02, arg03
2c9a4     0A 2C 16 F2 | 	cmp	local04, #10 wc
2c9a8     30 2C 06 C1 |  if_b	add	local04, #48
2c9ac     15 2D 02 31 |  if_ae	add	local04, local03
2c9b0     0D 2D 42 FC | 	wrbyte	local04, arg05
2c9b4     01 1A 06 F1 | 	add	arg05, #1
2c9b8     01 28 06 F1 | 	add	local02, #1
2c9bc     18 14 62 FD | 	getqx	arg02
2c9c0     00 14 0E F2 | 	cmp	arg02, #0 wz
2c9c4     D0 FF 9F 5D |  if_ne	jmp	#LR__4180
2c9c8     0C 29 12 F2 | 	cmp	local02, arg04 wc
2c9cc     C8 FF 9F CD |  if_b	jmp	#LR__4180
2c9d0     0D 01 48 FC | 	wrbyte	#0, arg05
2c9d4     13 13 02 F6 | 	mov	arg01, local01
2c9d8     8C FE BF FD | 	call	#__system___strrev
2c9dc     14 FB 01 F6 | 	mov	result1, local02
2c9e0     A7 F0 03 F6 | 	mov	ptra, fp
2c9e4     B2 00 A0 FD | 	call	#popregs_
2c9e8                 | __system___uitoa_ret
2c9e8     2D 00 64 FD | 	ret
2c9ec                 | 
2c9ec                 | __system__disassemble_0571
2c9ec     10 4A 05 F6 | 	mov	COUNT_, #16
2c9f0     A8 00 A0 FD | 	call	#pushregs_
2c9f4     09 27 02 F6 | 	mov	local01, arg01
2c9f8     0A 29 02 F6 | 	mov	local02, arg02
2c9fc     0B 2B 02 F6 | 	mov	local03, arg03
2ca00     0C 2D 02 F6 | 	mov	local04, arg04
2ca04     0D 2F 02 F6 | 	mov	local05, arg05
2ca08     17 13 52 F6 | 	abs	arg01, local05 wc
2ca0c     1F 30 C6 C9 |  if_b	decod	local06, #31
2ca10     00 30 06 36 |  if_ae	mov	local06, #0
2ca14     CC CF BF FD | 	call	#__system___float_fromuns
2ca18     18 FB 61 F5 | 	xor	result1, local06
2ca1c     FD 32 02 F6 | 	mov	local07, result1
2ca20     00 34 06 F6 | 	mov	local08, #0
2ca24     13 13 02 F6 | 	mov	arg01, local01
2ca28     00 14 06 F6 | 	mov	arg02, #0
2ca2c     01 16 06 F6 | 	mov	arg03, #1
2ca30     E8 D7 BF FD | 	call	#__system___float_cmp
2ca34     00 FA 0D F2 | 	cmp	result1, #0 wz
2ca38     00 36 06 A6 |  if_e	mov	local09, #0
2ca3c     14 01 68 AC |  if_e	wrlong	#0, local02
2ca40     15 37 62 AC |  if_e	wrlong	local09, local03
2ca44     8C 01 90 AD |  if_e	jmp	#LR__4202
2ca48     13 13 02 F6 | 	mov	arg01, local01
2ca4c     BC DC BF FD | 	call	#__system____builtin_ilogb
2ca50     FD 38 02 F6 | 	mov	local10, result1
2ca54     0A 2E 0E F2 | 	cmp	local05, #10 wz
2ca58     24 00 90 5D |  if_ne	jmp	#LR__4190
2ca5c     1C 37 02 F6 | 	mov	local09, local10
2ca60     01 36 66 F0 | 	shl	local09, #1
2ca64     1C 37 02 F1 | 	add	local09, local10
2ca68     1B 39 52 F6 | 	abs	local10, local09 wc
2ca6c     0A 38 16 FD | 	qdiv	local10, #10
2ca70     09 3A 06 F6 | 	mov	local11, #9
2ca74     18 38 62 FD | 	getqx	local10
2ca78     1C 39 82 F6 | 	negc	local10, local10
2ca7c     04 00 90 FD | 	jmp	#LR__4191
2ca80                 | LR__4190
2ca80     18 3A 06 F6 | 	mov	local11, #24
2ca84                 | LR__4191
2ca84                 | LR__4192
2ca84     08 34 56 F2 | 	cmps	local08, #8 wc
2ca88     01 34 06 F1 | 	add	local08, #1
2ca8c     60 00 90 3D |  if_ae	jmp	#LR__4193
2ca90     00 C0 1F FF 
2ca94     00 12 06 F6 | 	mov	arg01, ##1065353216
2ca98     19 15 02 F6 | 	mov	arg02, local07
2ca9c     1C 17 02 F6 | 	mov	arg03, local10
2caa0     4C E3 BF FD | 	call	#__system___float_pow_n
2caa4     FD 14 02 F6 | 	mov	arg02, result1
2caa8     13 13 02 F6 | 	mov	arg01, local01
2caac     3C D5 BF FD | 	call	#__system___float_div
2cab0     FD 3C 02 F6 | 	mov	local12, result1
2cab4     1E 13 02 F6 | 	mov	arg01, local12
2cab8     00 C0 1F FF 
2cabc     00 14 06 F6 | 	mov	arg02, ##1065353216
2cac0     01 16 06 F6 | 	mov	arg03, #1
2cac4     54 D7 BF FD | 	call	#__system___float_cmp
2cac8     00 FA 55 F2 | 	cmps	result1, #0 wc
2cacc     01 38 86 C1 |  if_b	sub	local10, #1
2cad0     B0 FF 9F CD |  if_b	jmp	#LR__4192
2cad4     19 15 02 F6 | 	mov	arg02, local07
2cad8     1E 13 02 F6 | 	mov	arg01, local12
2cadc     01 16 66 F6 | 	neg	arg03, #1
2cae0     38 D7 BF FD | 	call	#__system___float_cmp
2cae4     00 FA 55 F2 | 	cmps	result1, #0 wc
2cae8     01 38 06 31 |  if_ae	add	local10, #1
2caec     94 FF 9F 3D |  if_ae	jmp	#LR__4192
2caf0                 | LR__4193
2caf0     1E 13 02 F6 | 	mov	arg01, local12
2caf4     14 DC BF FD | 	call	#__system____builtin_ilogb
2caf8     FD 3E 02 F6 | 	mov	local13, result1
2cafc     1E 41 02 F6 | 	mov	local14, local12
2cb00     17 41 06 F4 | 	bitl	local14, #279
2cb04     17 40 26 F4 | 	bith	local14, #23
2cb08     1F 41 62 F0 | 	shl	local14, local13
2cb0c     02 2E 0E F2 | 	cmp	local05, #2 wz
2cb10     02 2C 66 A0 |  if_e	shl	local04, #2
2cb14     00 42 06 F6 | 	mov	local15, #0
2cb18     00 2C 56 F2 | 	cmps	local04, #0 wc
2cb1c     10 00 90 3D |  if_ae	jmp	#LR__4194
2cb20     1C 2D C2 F2 | 	subr	local04, local10
2cb24     00 2C 56 F2 | 	cmps	local04, #0 wc
2cb28     A0 00 90 CD |  if_b	jmp	#LR__4201
2cb2c     04 00 90 FD | 	jmp	#LR__4195
2cb30                 | LR__4194
2cb30     01 2C 06 F1 | 	add	local04, #1
2cb34                 | LR__4195
2cb34     1D 2D 7A F3 | 	fles	local04, local11 wcz
2cb38     01 44 06 F6 | 	mov	local16, #1
2cb3c     97 22 48 FB | 	callpa	#(@LR__4197-@LR__4196)>>2,fcache_load_ptr_
2cb40                 | LR__4196
2cb40     00 40 00 FF 
2cb44     00 42 16 F2 | 	cmp	local15, ##8388608 wc
2cb48     38 00 90 3D |  if_ae	jmp	#LR__4198
2cb4c     01 2C 56 F2 | 	cmps	local04, #1 wc
2cb50     01 2C 86 F1 | 	sub	local04, #1
2cb54     2C 00 90 CD |  if_b	jmp	#LR__4198
2cb58     17 43 02 FD | 	qmul	local15, local05
2cb5c     20 3F 02 F6 | 	mov	local13, local14
2cb60     17 3E 46 F0 | 	shr	local13, #23
2cb64     17 41 06 F4 | 	bitl	local14, #279
2cb68     18 42 62 FD | 	getqx	local15
2cb6c     17 45 02 FD | 	qmul	local16, local05
2cb70     18 44 62 FD | 	getqx	local16
2cb74     17 41 02 FD | 	qmul	local14, local05
2cb78     1F 43 02 F1 | 	add	local15, local13
2cb7c     18 40 62 FD | 	getqx	local14
2cb80     BC FF 9F FD | 	jmp	#LR__4196
2cb84                 | LR__4197
2cb84                 | LR__4198
2cb84     17 37 02 F6 | 	mov	local09, local05
2cb88     17 36 66 F0 | 	shl	local09, #23
2cb8c     1B 3F 52 F6 | 	abs	local13, local09 wc
2cb90     01 3E 46 F0 | 	shr	local13, #1
2cb94     1F 3F 82 F6 | 	negc	local13, local13
2cb98     1F 41 1A F2 | 	cmp	local14, local13 wcz
2cb9c     20 00 90 1D |  if_a	jmp	#LR__4199
2cba0     17 2E 66 F0 | 	shl	local05, #23
2cba4     17 3F 52 F6 | 	abs	local13, local05 wc
2cba8     01 3E 46 F0 | 	shr	local13, #1
2cbac     1F 3F 82 F6 | 	negc	local13, local13
2cbb0     1F 41 0A F2 | 	cmp	local14, local13 wz
2cbb4     14 00 90 5D |  if_ne	jmp	#LR__4200
2cbb8     01 42 CE F7 | 	test	local15, #1 wz
2cbbc     0C 00 90 AD |  if_e	jmp	#LR__4200
2cbc0                 | LR__4199
2cbc0     01 42 06 F1 | 	add	local15, #1
2cbc4     22 43 0A F2 | 	cmp	local15, local16 wz
2cbc8     01 38 06 A1 |  if_e	add	local10, #1
2cbcc                 | LR__4200
2cbcc                 | LR__4201
2cbcc     14 43 62 FC | 	wrlong	local15, local02
2cbd0     15 39 62 FC | 	wrlong	local10, local03
2cbd4                 | LR__4202
2cbd4     A7 F0 03 F6 | 	mov	ptra, fp
2cbd8     B2 00 A0 FD | 	call	#popregs_
2cbdc                 | __system__disassemble_0571_ret
2cbdc     2D 00 64 FD | 	ret
2cbe0                 | 
2cbe0                 | __system__emitsign_0573
2cbe0     00 FA 05 F6 | 	mov	result1, #0
2cbe4     00 14 0E F2 | 	cmp	arg02, #0 wz
2cbe8     09 01 02 56 |  if_ne	mov	_var01, arg01
2cbec     01 12 06 51 |  if_ne	add	arg01, #1
2cbf0     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2cbf4     01 FA 05 56 |  if_ne	mov	result1, #1
2cbf8     00 16 0E F2 | 	cmp	arg03, #0 wz
2cbfc     09 61 48 5C |  if_ne	wrbyte	#48, arg01
2cc00     01 12 06 51 |  if_ne	add	arg01, #1
2cc04     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
2cc08     02 FA 05 51 |  if_ne	add	result1, #2
2cc0c                 | __system__emitsign_0573_ret
2cc0c     2D 00 64 FD | 	ret
2cc10                 | 
2cc10                 | __system___gettxfunc
2cc10     01 4A 05 F6 | 	mov	COUNT_, #1
2cc14     A8 00 A0 FD | 	call	#pushregs_
2cc18     A0 F8 BF FD | 	call	#__system____getftab
2cc1c     FD 26 0A F6 | 	mov	local01, result1 wz
2cc20     10 00 90 AD |  if_e	jmp	#LR__4210
2cc24     08 26 06 F1 | 	add	local01, #8
2cc28     13 15 0A FB | 	rdlong	arg02, local01 wz
2cc2c     08 26 86 F1 | 	sub	local01, #8
2cc30     08 00 90 5D |  if_ne	jmp	#LR__4211
2cc34                 | LR__4210
2cc34     00 FA 05 F6 | 	mov	result1, #0
2cc38     0C 00 90 FD | 	jmp	#LR__4212
2cc3c                 | LR__4211
2cc3c     00 48 05 FF 
2cc40     00 26 46 F5 | 	or	local01, ##177209344
2cc44     13 FB 01 F6 | 	mov	result1, local01
2cc48                 | LR__4212
2cc48     A7 F0 03 F6 | 	mov	ptra, fp
2cc4c     B2 00 A0 FD | 	call	#popregs_
2cc50                 | __system___gettxfunc_ret
2cc50     2D 00 64 FD | 	ret
2cc54                 | 
2cc54                 | __system___getrxfunc
2cc54     01 4A 05 F6 | 	mov	COUNT_, #1
2cc58     A8 00 A0 FD | 	call	#pushregs_
2cc5c     5C F8 BF FD | 	call	#__system____getftab
2cc60     FD 26 0A F6 | 	mov	local01, result1 wz
2cc64     10 00 90 AD |  if_e	jmp	#LR__4220
2cc68     08 26 06 F1 | 	add	local01, #8
2cc6c     13 15 0A FB | 	rdlong	arg02, local01 wz
2cc70     08 26 86 F1 | 	sub	local01, #8
2cc74     08 00 90 5D |  if_ne	jmp	#LR__4221
2cc78                 | LR__4220
2cc78     00 FA 05 F6 | 	mov	result1, #0
2cc7c     0C 00 90 FD | 	jmp	#LR__4222
2cc80                 | LR__4221
2cc80     00 50 05 FF 
2cc84     00 26 46 F5 | 	or	local01, ##178257920
2cc88     13 FB 01 F6 | 	mov	result1, local01
2cc8c                 | LR__4222
2cc8c     A7 F0 03 F6 | 	mov	ptra, fp
2cc90     B2 00 A0 FD | 	call	#popregs_
2cc94                 | __system___getrxfunc_ret
2cc94     2D 00 64 FD | 	ret
2cc98                 | 
2cc98                 | __system___getiolock_0613
2cc98     01 4A 05 F6 | 	mov	COUNT_, #1
2cc9c     A8 00 A0 FD | 	call	#pushregs_
2cca0     18 F8 BF FD | 	call	#__system____getftab
2cca4     FD 26 0A F6 | 	mov	local01, result1 wz
2cca8     10 00 90 AD |  if_e	jmp	#LR__4230
2ccac     08 26 06 F1 | 	add	local01, #8
2ccb0     13 FB 09 FB | 	rdlong	result1, local01 wz
2ccb4     08 26 86 F1 | 	sub	local01, #8
2ccb8     18 00 90 5D |  if_ne	jmp	#LR__4231
2ccbc                 | LR__4230
2ccbc     01 00 00 FF 
2ccc0     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
2ccc4     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2ccc8     01 00 00 FF 
2cccc     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
2ccd0     08 00 90 FD | 	jmp	#LR__4232
2ccd4                 | LR__4231
2ccd4     0C 26 06 F1 | 	add	local01, #12
2ccd8     13 FB 01 F6 | 	mov	result1, local01
2ccdc                 | LR__4232
2ccdc     A7 F0 03 F6 | 	mov	ptra, fp
2cce0     B2 00 A0 FD | 	call	#popregs_
2cce4                 | __system___getiolock_0613_ret
2cce4     2D 00 64 FD | 	ret
2cce8                 | 
2cce8                 | __system____ScanForChar
2cce8     09 01 02 F6 | 	mov	_var01, arg01
2ccec     09 03 02 F6 | 	mov	_var02, arg01
2ccf0     97 06 48 FB | 	callpa	#(@LR__4241-@LR__4240)>>2,fcache_load_ptr_
2ccf4                 | LR__4240
2ccf4     01 FB C9 FA | 	rdbyte	result1, _var02 wz
2ccf8     01 02 06 51 |  if_ne	add	_var02, #1
2ccfc     F4 FF 9F 5D |  if_ne	jmp	#LR__4240
2cd00                 | LR__4241
2cd00     09 03 82 F1 | 	sub	_var02, arg01
2cd04     01 FB 01 F6 | 	mov	result1, _var02
2cd08     FD 12 0A F6 | 	mov	arg01, result1 wz
2cd0c     00 FA 05 A6 |  if_e	mov	result1, #0
2cd10     B8 00 90 AD |  if_e	jmp	#LR__4248
2cd14     0A 05 02 F6 | 	mov	_var03, arg02
2cd18     07 04 4E F7 | 	zerox	_var03, #7 wz
2cd1c     00 FA 05 A6 |  if_e	mov	result1, #0
2cd20     A8 00 90 AD |  if_e	jmp	#LR__4248
2cd24     01 16 16 F2 | 	cmp	arg03, #1 wc
2cd28     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
2cd2c     01 16 06 86 |  if_c_and_z	mov	arg03, #1
2cd30     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2cd34     94 00 90 4D |  if_c_and_nz	jmp	#LR__4248
2cd38     09 17 1A F2 | 	cmp	arg03, arg01 wcz
2cd3c     10 00 90 ED |  if_be	jmp	#LR__4242
2cd40     00 18 0E F2 | 	cmp	arg04, #0 wz
2cd44     00 FA 05 A6 |  if_e	mov	result1, #0
2cd48     80 00 90 AD |  if_e	jmp	#LR__4248
2cd4c     09 17 02 F6 | 	mov	arg03, arg01
2cd50                 | LR__4242
2cd50     01 16 86 F1 | 	sub	arg03, #1
2cd54     00 18 0E F2 | 	cmp	arg04, #0 wz
2cd58     38 00 90 5D |  if_ne	jmp	#LR__4244
2cd5c     0B 07 02 F6 | 	mov	_var04, arg03
2cd60     09 09 02 F6 | 	mov	_var05, arg01
2cd64                 | LR__4243
2cd64     04 07 12 F2 | 	cmp	_var04, _var05 wc
2cd68     5C 00 90 3D |  if_ae	jmp	#LR__4247
2cd6c     03 05 02 F6 | 	mov	_var03, _var04
2cd70     00 05 02 F1 | 	add	_var03, _var01
2cd74     02 05 C2 FA | 	rdbyte	_var03, _var03
2cd78     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
2cd7c     0C 05 0A F2 | 	cmp	_var03, arg04 wz
2cd80     01 06 06 A1 |  if_e	add	_var04, #1
2cd84     03 FB 01 A6 |  if_e	mov	result1, _var04
2cd88     40 00 90 AD |  if_e	jmp	#LR__4248
2cd8c     01 06 06 F1 | 	add	_var04, #1
2cd90     D0 FF 9F FD | 	jmp	#LR__4243
2cd94                 | LR__4244
2cd94     0B 07 02 F6 | 	mov	_var04, arg03
2cd98                 | LR__4245
2cd98     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
2cd9c     28 00 90 1D |  if_a	jmp	#LR__4246
2cda0     03 09 02 F6 | 	mov	_var05, _var04
2cda4     00 09 02 F1 | 	add	_var05, _var01
2cda8     04 05 C2 FA | 	rdbyte	_var03, _var05
2cdac     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
2cdb0     04 05 0A F2 | 	cmp	_var03, _var05 wz
2cdb4     01 06 06 A1 |  if_e	add	_var04, #1
2cdb8     03 FB 01 A6 |  if_e	mov	result1, _var04
2cdbc     0C 00 90 AD |  if_e	jmp	#LR__4248
2cdc0     01 06 86 F1 | 	sub	_var04, #1
2cdc4     D0 FF 9F FD | 	jmp	#LR__4245
2cdc8                 | LR__4246
2cdc8                 | LR__4247
2cdc8     00 FA 05 F6 | 	mov	result1, #0
2cdcc                 | LR__4248
2cdcc                 | __system____ScanForChar_ret
2cdcc     2D 00 64 FD | 	ret
2cdd0                 | 
2cdd0                 | __system___basic_dir
2cdd0     05 4A 05 F6 | 	mov	COUNT_, #5
2cdd4     A8 00 A0 FD | 	call	#pushregs_
2cdd8     4C F0 07 F1 | 	add	ptra, #76
2cddc     04 4E 05 F1 | 	add	fp, #4
2cde0     A7 12 62 FC | 	wrlong	arg01, fp
2cde4     04 4E 05 F1 | 	add	fp, #4
2cde8     A7 14 62 FC | 	wrlong	arg02, fp
2cdec     04 4E 85 F1 | 	sub	fp, #4
2cdf0     A7 14 0A FB | 	rdlong	arg02, fp wz
2cdf4     04 4E 85 F1 | 	sub	fp, #4
2cdf8     04 4E 05 51 |  if_ne	add	fp, #4
2cdfc     A7 26 02 5B |  if_ne	rdlong	local01, fp
2ce00     04 4E 85 51 |  if_ne	sub	fp, #4
2ce04     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
2ce08     70 00 90 AD |  if_e	jmp	#LR__4250
2ce0c     03 00 00 FF 
2ce10     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2ce14     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2ce18     03 00 00 FF 
2ce1c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2ce20     03 00 00 5F 
2ce24     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
2ce28     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2ce2c     03 00 00 5F 
2ce30     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
2ce34     D8 E9 BF 5D |  if_ne	call	#__system__closedir
2ce38     B5 01 00 FF 
2ce3c     E4 12 06 F6 | 	mov	arg01, ##@LR__5418
2ce40     E0 E8 BF FD | 	call	#__system__opendir
2ce44     03 00 00 FF 
2ce48     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2ce4c     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2ce50     08 4E 05 F1 | 	add	fp, #8
2ce54     A7 28 02 FB | 	rdlong	local02, fp
2ce58     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2ce5c     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2ce60     04 4E 85 F1 | 	sub	fp, #4
2ce64     A7 28 02 FB | 	rdlong	local02, fp
2ce68     04 4E 85 F1 | 	sub	fp, #4
2ce6c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2ce70     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2ce74     03 00 00 FF 
2ce78     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2ce7c                 | LR__4250
2ce7c     03 00 00 FF 
2ce80     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2ce84     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2ce88     03 00 00 FF 
2ce8c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2ce90     B5 01 00 AF 
2ce94     E6 FA 05 A6 |  if_e	mov	result1, ##@LR__5419
2ce98     84 02 90 AD |  if_e	jmp	#LR__4263
2ce9c                 | LR__4251
2ce9c     03 00 00 FF 
2cea0     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2cea4     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2cea8     03 00 00 FF 
2ceac     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2ceb0     D0 E9 BF FD | 	call	#__system__readdir
2ceb4     0C 4E 05 F1 | 	add	fp, #12
2ceb8     A7 FA 61 FC | 	wrlong	result1, fp
2cebc     0C 4E 85 F1 | 	sub	fp, #12
2cec0     00 FA 0D F2 | 	cmp	result1, #0 wz
2cec4     38 00 90 5D |  if_ne	jmp	#LR__4252
2cec8     03 00 00 FF 
2cecc     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2ced0     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2ced4     03 00 00 FF 
2ced8     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2cedc     30 E9 BF FD | 	call	#__system__closedir
2cee0     03 00 00 FF 
2cee4     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2cee8     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
2ceec     03 00 00 FF 
2cef0     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2cef4     B5 01 00 FF 
2cef8     E8 FA 05 F6 | 	mov	result1, ##@LR__5420
2cefc     20 02 90 FD | 	jmp	#LR__4263
2cf00                 | LR__4252
2cf00     0C 4E 05 F1 | 	add	fp, #12
2cf04     A7 12 02 FB | 	rdlong	arg01, fp
2cf08     0C 4E 85 F1 | 	sub	fp, #12
2cf0c     03 00 00 FF 
2cf10     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
2cf14     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2cf18     03 00 00 FF 
2cf1c     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2cf20     10 09 B0 FD | 	call	#__system___pat_match
2cf24     00 FA 0D F2 | 	cmp	result1, #0 wz
2cf28     70 FF 9F AD |  if_e	jmp	#LR__4251
2cf2c     03 00 00 FF 
2cf30     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2cf34     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2cf38     03 00 00 FF 
2cf3c     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2cf40     78 01 90 AD |  if_e	jmp	#LR__4259
2cf44     0C 4E 05 F1 | 	add	fp, #12
2cf48     A7 12 02 FB | 	rdlong	arg01, fp
2cf4c     04 4E 05 F1 | 	add	fp, #4
2cf50     A7 14 02 F6 | 	mov	arg02, fp
2cf54     10 4E 85 F1 | 	sub	fp, #16
2cf58     2C F2 BF FD | 	call	#__system__stat
2cf5c     40 4E 05 F1 | 	add	fp, #64
2cf60     A7 FA 61 FC | 	wrlong	result1, fp
2cf64     40 4E 85 F1 | 	sub	fp, #64
2cf68     00 FA 0D F2 | 	cmp	result1, #0 wz
2cf6c     B5 01 00 5F 
2cf70     EA FA 05 56 |  if_ne	mov	result1, ##@LR__5421
2cf74     A8 01 90 5D |  if_ne	jmp	#LR__4263
2cf78     18 4E 05 F1 | 	add	fp, #24
2cf7c     A7 28 02 FB | 	rdlong	local02, fp
2cf80     78 00 00 FF 
2cf84     00 28 06 F5 | 	and	local02, ##61440
2cf88     2C 4E 05 F1 | 	add	fp, #44
2cf8c     A7 28 62 FC | 	wrlong	local02, fp
2cf90     38 4E 85 F1 | 	sub	fp, #56
2cf94     A7 28 02 FB | 	rdlong	local02, fp
2cf98     0C 4E 85 F1 | 	sub	fp, #12
2cf9c     14 29 C2 FA | 	rdbyte	local02, local02
2cfa0     2E 28 0E F2 | 	cmp	local02, #46 wz
2cfa4     08 4E 05 A1 |  if_e	add	fp, #8
2cfa8     A7 04 68 AC |  if_e	wrlong	#2, fp
2cfac     08 4E C5 F3 | 	sumz	fp, #8
2cfb0     A7 00 68 5C |  if_ne	wrlong	#0, fp
2cfb4     08 4E 85 51 |  if_ne	sub	fp, #8
2cfb8     44 4E 05 F1 | 	add	fp, #68
2cfbc     A7 28 02 FB | 	rdlong	local02, fp
2cfc0     44 4E 85 F1 | 	sub	fp, #68
2cfc4     08 00 00 FF 
2cfc8     00 28 0E F2 | 	cmp	local02, ##4096 wz
2cfcc     18 00 90 5D |  if_ne	jmp	#LR__4253
2cfd0     08 4E 05 F1 | 	add	fp, #8
2cfd4     A7 28 02 FB | 	rdlong	local02, fp
2cfd8     10 28 46 F5 | 	or	local02, #16
2cfdc     A7 28 62 FC | 	wrlong	local02, fp
2cfe0     08 4E 85 F1 | 	sub	fp, #8
2cfe4     AC 00 90 FD | 	jmp	#LR__4258
2cfe8                 | LR__4253
2cfe8     44 4E 05 F1 | 	add	fp, #68
2cfec     A7 28 02 FB | 	rdlong	local02, fp
2cff0     44 4E 85 F1 | 	sub	fp, #68
2cff4     10 00 00 FF 
2cff8     00 28 0E F2 | 	cmp	local02, ##8192 wz
2cffc     44 4E 05 51 |  if_ne	add	fp, #68
2d000     A7 26 02 5B |  if_ne	rdlong	local01, fp
2d004     44 4E 85 51 |  if_ne	sub	fp, #68
2d008     18 00 00 5F 
2d00c     00 26 0E 52 |  if_ne	cmp	local01, ##12288 wz
2d010     44 4E 05 51 |  if_ne	add	fp, #68
2d014     13 2B 02 56 |  if_ne	mov	local03, local01
2d018     44 4E 85 51 |  if_ne	sub	fp, #68
2d01c     20 00 00 5F 
2d020     00 2A 0E 52 |  if_ne	cmp	local03, ##16384 wz
2d024     18 00 90 5D |  if_ne	jmp	#LR__4254
2d028     08 4E 05 F1 | 	add	fp, #8
2d02c     A7 28 02 FB | 	rdlong	local02, fp
2d030     04 28 46 F5 | 	or	local02, #4
2d034     A7 28 62 FC | 	wrlong	local02, fp
2d038     08 4E 85 F1 | 	sub	fp, #8
2d03c     54 00 90 FD | 	jmp	#LR__4257
2d040                 | LR__4254
2d040     18 4E 05 F1 | 	add	fp, #24
2d044     A7 28 02 FB | 	rdlong	local02, fp
2d048     18 4E 85 F1 | 	sub	fp, #24
2d04c     92 28 CE F7 | 	test	local02, #146 wz
2d050     18 00 90 5D |  if_ne	jmp	#LR__4255
2d054     08 4E 05 F1 | 	add	fp, #8
2d058     A7 28 02 FB | 	rdlong	local02, fp
2d05c     01 28 46 F5 | 	or	local02, #1
2d060     A7 28 62 FC | 	wrlong	local02, fp
2d064     08 4E 85 F1 | 	sub	fp, #8
2d068     28 00 90 FD | 	jmp	#LR__4256
2d06c                 | LR__4255
2d06c     44 4E 05 F1 | 	add	fp, #68
2d070     A7 2C 02 FB | 	rdlong	local04, fp
2d074     44 4E 85 F1 | 	sub	fp, #68
2d078     08 00 00 FF 
2d07c     00 2C 0E F2 | 	cmp	local04, ##4096 wz
2d080     08 4E 05 51 |  if_ne	add	fp, #8
2d084     A7 2C 02 5B |  if_ne	rdlong	local04, fp
2d088     20 2C 46 55 |  if_ne	or	local04, #32
2d08c     A7 2C 62 5C |  if_ne	wrlong	local04, fp
2d090     08 4E 85 51 |  if_ne	sub	fp, #8
2d094                 | LR__4256
2d094                 | LR__4257
2d094                 | LR__4258
2d094     08 4E 05 F1 | 	add	fp, #8
2d098     A7 2C 02 FB | 	rdlong	local04, fp
2d09c     08 4E 85 F1 | 	sub	fp, #8
2d0a0     03 00 00 FF 
2d0a4     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2d0a8     F3 26 02 FB | 	rdlong	local01, ptr___system__dat__
2d0ac     03 00 00 FF 
2d0b0     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2d0b4     13 2D CA F7 | 	test	local04, local01 wz
2d0b8     E0 FD 9F AD |  if_e	jmp	#LR__4251
2d0bc                 | LR__4259
2d0bc     0C 4E 05 F1 | 	add	fp, #12
2d0c0     A7 12 02 FB | 	rdlong	arg01, fp
2d0c4     0C 4E 85 F1 | 	sub	fp, #12
2d0c8     09 2F 02 F6 | 	mov	local05, arg01
2d0cc     97 06 48 FB | 	callpa	#(@LR__4261-@LR__4260)>>2,fcache_load_ptr_
2d0d0                 | LR__4260
2d0d0     17 FB C9 FA | 	rdbyte	result1, local05 wz
2d0d4     01 2E 06 51 |  if_ne	add	local05, #1
2d0d8     F4 FF 9F 5D |  if_ne	jmp	#LR__4260
2d0dc                 | LR__4261
2d0dc     17 13 C2 F2 | 	subr	arg01, local05
2d0e0     01 12 06 F1 | 	add	arg01, #1
2d0e4     28 E0 BF FD | 	call	#__system___gc_alloc_managed
2d0e8     48 4E 05 F1 | 	add	fp, #72
2d0ec     A7 FA 61 FC | 	wrlong	result1, fp
2d0f0     48 4E 85 F1 | 	sub	fp, #72
2d0f4     00 FA 0D F2 | 	cmp	result1, #0 wz
2d0f8     18 00 90 AD |  if_e	jmp	#LR__4262
2d0fc     48 4E 05 F1 | 	add	fp, #72
2d100     A7 12 02 FB | 	rdlong	arg01, fp
2d104     3C 4E 85 F1 | 	sub	fp, #60
2d108     A7 14 02 FB | 	rdlong	arg02, fp
2d10c     0C 4E 85 F1 | 	sub	fp, #12
2d110     10 9E BF FD | 	call	#__system____builtin_strcpy
2d114                 | LR__4262
2d114     48 4E 05 F1 | 	add	fp, #72
2d118     A7 FA 01 FB | 	rdlong	result1, fp
2d11c     48 4E 85 F1 | 	sub	fp, #72
2d120                 | LR__4263
2d120     A7 F0 03 F6 | 	mov	ptra, fp
2d124     B2 00 A0 FD | 	call	#popregs_
2d128                 | __system___basic_dir_ret
2d128     2D 00 64 FD | 	ret
2d12c                 | 
2d12c                 | __system__pack_0685
2d12c     09 01 02 F6 | 	mov	_var01, arg01
2d130     7F 16 06 F1 | 	add	arg03, #127
2d134     04 18 CE F7 | 	test	arg04, #4 wz
2d138     10 00 90 AD |  if_e	jmp	#LR__4270
2d13c     00 00 0E F2 | 	cmp	_var01, #0 wz
2d140     16 00 C6 A9 |  if_e	decod	_var01, #22
2d144     F7 00 26 F4 | 	bith	_var01, #247
2d148     B4 00 90 FD | 	jmp	#LR__4279
2d14c                 | LR__4270
2d14c     02 18 CE F7 | 	test	arg04, #2 wz
2d150     00 C0 3F 5F 
2d154     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2d158     00 14 06 56 |  if_ne	mov	arg02, #0
2d15c     A0 00 90 5D |  if_ne	jmp	#LR__4278
2d160     08 18 CE F7 | 	test	arg04, #8 wz
2d164     00 00 06 56 |  if_ne	mov	_var01, #0
2d168     94 00 90 5D |  if_ne	jmp	#LR__4277
2d16c     FF 16 56 F2 | 	cmps	arg03, #255 wc
2d170     00 C0 3F 3F 
2d174     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
2d178     00 14 06 36 |  if_ae	mov	arg02, #0
2d17c     80 00 90 3D |  if_ae	jmp	#LR__4276
2d180     01 16 56 F2 | 	cmps	arg03, #1 wc
2d184     6C 00 90 3D |  if_ae	jmp	#LR__4274
2d188     01 14 46 F0 | 	shr	arg02, #1
2d18c     00 03 02 F6 | 	mov	_var02, _var01
2d190     01 02 06 F5 | 	and	_var02, #1
2d194     1F 02 66 F0 | 	shl	_var02, #31
2d198     01 15 42 F5 | 	or	arg02, _var02
2d19c     01 00 46 F0 | 	shr	_var01, #1
2d1a0     97 1E 48 FB | 	callpa	#(@LR__4272-@LR__4271)>>2,fcache_load_ptr_
2d1a4                 | LR__4271
2d1a4     00 16 56 F2 | 	cmps	arg03, #0 wc
2d1a8     34 00 90 3D |  if_ae	jmp	#LR__4273
2d1ac     00 00 0E F2 | 	cmp	_var01, #0 wz
2d1b0     2C 00 90 AD |  if_e	jmp	#LR__4273
2d1b4     0A 13 02 F6 | 	mov	arg01, arg02
2d1b8     01 12 06 F5 | 	and	arg01, #1
2d1bc     01 16 06 F1 | 	add	arg03, #1
2d1c0     01 14 46 F0 | 	shr	arg02, #1
2d1c4     00 03 02 F6 | 	mov	_var02, _var01
2d1c8     01 02 06 F5 | 	and	_var02, #1
2d1cc     1F 02 66 F0 | 	shl	_var02, #31
2d1d0     01 15 42 F5 | 	or	arg02, _var02
2d1d4     09 15 42 F5 | 	or	arg02, arg01
2d1d8     01 00 46 F0 | 	shr	_var01, #1
2d1dc     C4 FF 9F FD | 	jmp	#LR__4271
2d1e0                 | LR__4272
2d1e0                 | LR__4273
2d1e0     00 16 56 F2 | 	cmps	arg03, #0 wc
2d1e4     18 00 90 3D |  if_ae	jmp	#LR__4275
2d1e8     00 14 0E F2 | 	cmp	arg02, #0 wz
2d1ec     6F 14 62 FD | 	wrnz	arg02
2d1f0     0C 00 90 FD | 	jmp	#LR__4275
2d1f4                 | LR__4274
2d1f4     17 01 06 F4 | 	bitl	_var01, #279
2d1f8     17 16 66 F0 | 	shl	arg03, #23
2d1fc     0B 01 42 F5 | 	or	_var01, arg03
2d200                 | LR__4275
2d200                 | LR__4276
2d200                 | LR__4277
2d200                 | LR__4278
2d200                 | LR__4279
2d200     01 00 CE F7 | 	test	_var01, #1 wz
2d204     01 14 46 55 |  if_ne	or	arg02, #1
2d208     0A 17 02 F6 | 	mov	arg03, arg02
2d20c     00 02 06 F6 | 	mov	_var02, #0
2d210     FF FF 3F FF 
2d214     FF 15 06 F1 | 	add	arg02, ##2147483647
2d218     0B 15 12 F2 | 	cmp	arg02, arg03 wc
2d21c     01 02 06 C6 |  if_b	mov	_var02, #1
2d220     01 01 02 F1 | 	add	_var01, _var02
2d224     01 18 CE F7 | 	test	arg04, #1 wz
2d228     1F 00 26 54 |  if_ne	bith	_var01, #31
2d22c     00 FB 01 F6 | 	mov	result1, _var01
2d230                 | __system__pack_0685_ret
2d230     2D 00 64 FD | 	ret
2d234                 | 
2d234                 | __system___rxtxioctl_0775
2d234     00 15 0E F2 | 	cmp	arg02, #256 wz
2d238     0C 00 90 AD |  if_e	jmp	#LR__4280
2d23c     01 15 0E F2 | 	cmp	arg02, #257 wz
2d240     1C 00 90 AD |  if_e	jmp	#LR__4281
2d244     30 00 90 FD | 	jmp	#LR__4282
2d248                 | LR__4280
2d248     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2d24c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2d250     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2d254     0B FB 61 FC | 	wrlong	result1, arg03
2d258     00 FA 05 F6 | 	mov	result1, #0
2d25c     28 00 90 FD | 	jmp	#LR__4283
2d260                 | LR__4281
2d260     0B 13 02 FB | 	rdlong	arg01, arg03
2d264     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2d268     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2d26c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2d270     00 FA 05 F6 | 	mov	result1, #0
2d274     10 00 90 FD | 	jmp	#LR__4283
2d278                 | LR__4282
2d278     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d27c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2d280     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d284     01 FA 65 F6 | 	neg	result1, #1
2d288                 | LR__4283
2d288                 | __system___rxtxioctl_0775_ret
2d288     2D 00 64 FD | 	ret
2d28c                 | 
2d28c                 | __system____dummy_flush_0776
2d28c     00 FA 05 F6 | 	mov	result1, #0
2d290                 | __system____dummy_flush_0776_ret
2d290     2D 00 64 FD | 	ret
2d294                 | 
2d294                 | __system___vfswrite
2d294     09 4A 05 F6 | 	mov	COUNT_, #9
2d298     A8 00 A0 FD | 	call	#pushregs_
2d29c     09 27 02 F6 | 	mov	local01, arg01
2d2a0     0A 29 02 F6 | 	mov	local02, arg02
2d2a4     0B 2B 02 F6 | 	mov	local03, arg03
2d2a8     14 2D 02 F6 | 	mov	local04, local02
2d2ac     08 26 06 F1 | 	add	local01, #8
2d2b0     13 13 02 FB | 	rdlong	arg01, local01
2d2b4     08 26 86 F1 | 	sub	local01, #8
2d2b8     02 12 CE F7 | 	test	arg01, #2 wz
2d2bc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d2c0     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2d2c4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d2c8     01 FA 65 A6 |  if_e	neg	result1, #1
2d2cc     80 01 90 AD |  if_e	jmp	#LR__4296
2d2d0     08 26 06 F1 | 	add	local01, #8
2d2d4     13 FB 01 FB | 	rdlong	result1, local01
2d2d8     08 26 86 F1 | 	sub	local01, #8
2d2dc     40 FA CD F7 | 	test	result1, #64 wz
2d2e0     68 00 90 AD |  if_e	jmp	#LR__4291
2d2e4     08 26 06 F1 | 	add	local01, #8
2d2e8     13 15 02 FB | 	rdlong	arg02, local01
2d2ec     08 26 86 F1 | 	sub	local01, #8
2d2f0     80 14 CE F7 | 	test	arg02, #128 wz
2d2f4     54 00 90 AD |  if_e	jmp	#LR__4290
2d2f8     30 26 06 F1 | 	add	local01, #48
2d2fc     13 2F 02 FB | 	rdlong	local05, local01
2d300     17 31 02 F6 | 	mov	local06, local05
2d304     30 26 86 F1 | 	sub	local01, #48
2d308     13 30 46 F7 | 	zerox	local06, #19
2d30c     14 2E 46 F0 | 	shr	local05, #20
2d310     02 2E 66 F0 | 	shl	local05, #2
2d314     ED 2E 02 F1 | 	add	local05, __methods__
2d318     17 2F 02 FB | 	rdlong	local05, local05
2d31c     13 13 02 F6 | 	mov	arg01, local01
2d320     00 14 06 F6 | 	mov	arg02, #0
2d324     02 16 06 F6 | 	mov	arg03, #2
2d328     F2 32 02 F6 | 	mov	local07, objptr
2d32c     18 E5 01 F6 | 	mov	objptr, local06
2d330     2D 2E 62 FD | 	call	local05
2d334     19 E5 01 F6 | 	mov	objptr, local07
2d338     08 26 06 F1 | 	add	local01, #8
2d33c     13 33 02 FB | 	rdlong	local07, local01
2d340     80 32 26 F5 | 	andn	local07, #128
2d344     13 33 62 FC | 	wrlong	local07, local01
2d348     08 26 86 F1 | 	sub	local01, #8
2d34c                 | LR__4290
2d34c                 | LR__4291
2d34c     18 26 06 F1 | 	add	local01, #24
2d350     13 33 0A FB | 	rdlong	local07, local01 wz
2d354     18 26 86 F1 | 	sub	local01, #24
2d358     80 00 90 AD |  if_e	jmp	#LR__4293
2d35c     18 26 06 F1 | 	add	local01, #24
2d360     13 2F 02 FB | 	rdlong	local05, local01
2d364     17 31 02 F6 | 	mov	local06, local05
2d368     18 26 86 F1 | 	sub	local01, #24
2d36c     13 30 46 F7 | 	zerox	local06, #19
2d370     14 2E 46 F0 | 	shr	local05, #20
2d374     02 2E 66 F0 | 	shl	local05, #2
2d378     ED 2E 02 F1 | 	add	local05, __methods__
2d37c     17 2F 02 FB | 	rdlong	local05, local05
2d380     14 15 02 F6 | 	mov	arg02, local02
2d384     15 17 02 F6 | 	mov	arg03, local03
2d388     13 13 02 F6 | 	mov	arg01, local01
2d38c     F2 32 02 F6 | 	mov	local07, objptr
2d390     18 E5 01 F6 | 	mov	objptr, local06
2d394     2D 2E 62 FD | 	call	local05
2d398     19 E5 01 F6 | 	mov	objptr, local07
2d39c     FD 34 02 F6 | 	mov	local08, result1
2d3a0     00 34 56 F2 | 	cmps	local08, #0 wc
2d3a4     2C 00 90 3D |  if_ae	jmp	#LR__4292
2d3a8     08 26 06 F1 | 	add	local01, #8
2d3ac     13 33 02 FB | 	rdlong	local07, local01
2d3b0     20 32 46 F5 | 	or	local07, #32
2d3b4     13 33 62 FC | 	wrlong	local07, local01
2d3b8     00 34 4E F2 | 	cmps	local08, #0 wz
2d3bc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d3c0     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
2d3c4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d3c8     01 FA 65 56 |  if_ne	neg	result1, #1
2d3cc     00 FA 05 A6 |  if_e	mov	result1, #0
2d3d0     7C 00 90 FD | 	jmp	#LR__4296
2d3d4                 | LR__4292
2d3d4     1A FB 01 F6 | 	mov	result1, local08
2d3d8     74 00 90 FD | 	jmp	#LR__4296
2d3dc                 | LR__4293
2d3dc     1C 26 06 F1 | 	add	local01, #28
2d3e0     13 37 0A FB | 	rdlong	local09, local01 wz
2d3e4     1C 26 86 F1 | 	sub	local01, #28
2d3e8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d3ec     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2d3f0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d3f4     01 FA 65 A6 |  if_e	neg	result1, #1
2d3f8     54 00 90 AD |  if_e	jmp	#LR__4296
2d3fc     00 34 06 F6 | 	mov	local08, #0
2d400                 | LR__4294
2d400     01 2A 16 F2 | 	cmp	local03, #1 wc
2d404     44 00 90 CD |  if_b	jmp	#LR__4295
2d408     1B 31 02 F6 | 	mov	local06, local09
2d40c     1B 2F 02 F6 | 	mov	local05, local09
2d410     13 30 46 F7 | 	zerox	local06, #19
2d414     14 2E 46 F0 | 	shr	local05, #20
2d418     02 2E 66 F0 | 	shl	local05, #2
2d41c     ED 2E 02 F1 | 	add	local05, __methods__
2d420     17 2F 02 FB | 	rdlong	local05, local05
2d424     16 13 C2 FA | 	rdbyte	arg01, local04
2d428     13 15 02 F6 | 	mov	arg02, local01
2d42c     F2 32 02 F6 | 	mov	local07, objptr
2d430     18 E5 01 F6 | 	mov	objptr, local06
2d434     01 2C 06 F1 | 	add	local04, #1
2d438     2D 2E 62 FD | 	call	local05
2d43c     19 E5 01 F6 | 	mov	objptr, local07
2d440     FD 34 02 F1 | 	add	local08, result1
2d444     01 2A 86 F1 | 	sub	local03, #1
2d448     B4 FF 9F FD | 	jmp	#LR__4294
2d44c                 | LR__4295
2d44c     1A FB 01 F6 | 	mov	result1, local08
2d450                 | LR__4296
2d450     A7 F0 03 F6 | 	mov	ptra, fp
2d454     B2 00 A0 FD | 	call	#popregs_
2d458                 | __system___vfswrite_ret
2d458     2D 00 64 FD | 	ret
2d45c                 | 
2d45c                 | __system___vfsread
2d45c     03 4A 05 F6 | 	mov	COUNT_, #3
2d460     A8 00 A0 FD | 	call	#pushregs_
2d464     28 F0 07 F1 | 	add	ptra, #40
2d468     04 4E 05 F1 | 	add	fp, #4
2d46c     A7 12 62 FC | 	wrlong	arg01, fp
2d470     04 4E 05 F1 | 	add	fp, #4
2d474     A7 14 62 FC | 	wrlong	arg02, fp
2d478     04 4E 05 F1 | 	add	fp, #4
2d47c     A7 16 62 FC | 	wrlong	arg03, fp
2d480     04 4E 85 F1 | 	sub	fp, #4
2d484     A7 FA 01 FB | 	rdlong	result1, fp
2d488     14 4E 05 F1 | 	add	fp, #20
2d48c     A7 FA 61 FC | 	wrlong	result1, fp
2d490     04 4E 05 F1 | 	add	fp, #4
2d494     A7 00 68 FC | 	wrlong	#0, fp
2d498     1C 4E 85 F1 | 	sub	fp, #28
2d49c     A7 12 02 FB | 	rdlong	arg01, fp
2d4a0     04 4E 85 F1 | 	sub	fp, #4
2d4a4     08 12 06 F1 | 	add	arg01, #8
2d4a8     09 FB 01 FB | 	rdlong	result1, arg01
2d4ac     01 FA CD F7 | 	test	result1, #1 wz
2d4b0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d4b4     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2d4b8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d4bc     01 FA 65 A6 |  if_e	neg	result1, #1
2d4c0     74 02 90 AD |  if_e	jmp	#LR__4306
2d4c4     04 4E 05 F1 | 	add	fp, #4
2d4c8     A7 12 02 FB | 	rdlong	arg01, fp
2d4cc     04 4E 85 F1 | 	sub	fp, #4
2d4d0     14 12 06 F1 | 	add	arg01, #20
2d4d4     09 FB 09 FB | 	rdlong	result1, arg01 wz
2d4d8     B8 00 90 AD |  if_e	jmp	#LR__4301
2d4dc     04 4E 05 F1 | 	add	fp, #4
2d4e0     A7 12 02 FB | 	rdlong	arg01, fp
2d4e4     09 17 02 F6 | 	mov	arg03, arg01
2d4e8     14 16 06 F1 | 	add	arg03, #20
2d4ec     0B 27 02 FB | 	rdlong	local01, arg03
2d4f0     13 29 02 F6 | 	mov	local02, local01
2d4f4     13 26 46 F7 | 	zerox	local01, #19
2d4f8     14 28 46 F0 | 	shr	local02, #20
2d4fc     02 28 66 F0 | 	shl	local02, #2
2d500     ED 28 02 F1 | 	add	local02, __methods__
2d504     14 29 02 FB | 	rdlong	local02, local02
2d508     04 4E 05 F1 | 	add	fp, #4
2d50c     A7 14 02 FB | 	rdlong	arg02, fp
2d510     04 4E 05 F1 | 	add	fp, #4
2d514     A7 16 02 FB | 	rdlong	arg03, fp
2d518     0C 4E 85 F1 | 	sub	fp, #12
2d51c     F2 2A 02 F6 | 	mov	local03, objptr
2d520     13 E5 01 F6 | 	mov	objptr, local01
2d524     2D 28 62 FD | 	call	local02
2d528     15 E5 01 F6 | 	mov	objptr, local03
2d52c     10 4E 05 F1 | 	add	fp, #16
2d530     A7 FA 61 FC | 	wrlong	result1, fp
2d534     10 4E 85 F1 | 	sub	fp, #16
2d538     00 FA 55 F2 | 	cmps	result1, #0 wc
2d53c     44 00 90 3D |  if_ae	jmp	#LR__4300
2d540     04 4E 05 F1 | 	add	fp, #4
2d544     A7 2A 02 FB | 	rdlong	local03, fp
2d548     15 27 02 F6 | 	mov	local01, local03
2d54c     08 2A 06 F1 | 	add	local03, #8
2d550     15 29 02 FB | 	rdlong	local02, local03
2d554     20 28 46 F5 | 	or	local02, #32
2d558     08 26 06 F1 | 	add	local01, #8
2d55c     13 29 62 FC | 	wrlong	local02, local01
2d560     0C 4E 05 F1 | 	add	fp, #12
2d564     A7 12 0A FB | 	rdlong	arg01, fp wz
2d568     10 4E 85 F1 | 	sub	fp, #16
2d56c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d570     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2d574     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d578     01 FA 65 56 |  if_ne	neg	result1, #1
2d57c     00 FA 05 A6 |  if_e	mov	result1, #0
2d580     B4 01 90 FD | 	jmp	#LR__4306
2d584                 | LR__4300
2d584     10 4E 05 F1 | 	add	fp, #16
2d588     A7 FA 01 FB | 	rdlong	result1, fp
2d58c     10 4E 85 F1 | 	sub	fp, #16
2d590     A4 01 90 FD | 	jmp	#LR__4306
2d594                 | LR__4301
2d594     04 4E 05 F1 | 	add	fp, #4
2d598     A7 12 02 FB | 	rdlong	arg01, fp
2d59c     20 12 06 F1 | 	add	arg01, #32
2d5a0     09 13 0A FB | 	rdlong	arg01, arg01 wz
2d5a4     14 4E 05 F1 | 	add	fp, #20
2d5a8     A7 12 62 FC | 	wrlong	arg01, fp
2d5ac     18 4E 85 F1 | 	sub	fp, #24
2d5b0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d5b4     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2d5b8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d5bc     01 FA 65 A6 |  if_e	neg	result1, #1
2d5c0     74 01 90 AD |  if_e	jmp	#LR__4306
2d5c4     04 4E 05 F1 | 	add	fp, #4
2d5c8     A7 2A 02 FB | 	rdlong	local03, fp
2d5cc     04 4E 85 F1 | 	sub	fp, #4
2d5d0     28 2A 06 F1 | 	add	local03, #40
2d5d4     15 29 0A FB | 	rdlong	local02, local03 wz
2d5d8     7C 00 90 AD |  if_e	jmp	#LR__4303
2d5dc     04 4E 05 F1 | 	add	fp, #4
2d5e0     A7 12 02 FB | 	rdlong	arg01, fp
2d5e4     09 2B 02 F6 | 	mov	local03, arg01
2d5e8     28 2A 06 F1 | 	add	local03, #40
2d5ec     15 27 02 FB | 	rdlong	local01, local03
2d5f0     13 29 02 F6 | 	mov	local02, local01
2d5f4     13 26 46 F7 | 	zerox	local01, #19
2d5f8     14 28 46 F0 | 	shr	local02, #20
2d5fc     02 28 66 F0 | 	shl	local02, #2
2d600     ED 28 02 F1 | 	add	local02, __methods__
2d604     14 29 02 FB | 	rdlong	local02, local02
2d608     20 4E 05 F1 | 	add	fp, #32
2d60c     A7 16 02 F6 | 	mov	arg03, fp
2d610     24 4E 85 F1 | 	sub	fp, #36
2d614     00 15 06 F6 | 	mov	arg02, #256
2d618     F2 2A 02 F6 | 	mov	local03, objptr
2d61c     13 E5 01 F6 | 	mov	objptr, local01
2d620     2D 28 62 FD | 	call	local02
2d624     15 E5 01 F6 | 	mov	objptr, local03
2d628     10 4E 05 F1 | 	add	fp, #16
2d62c     A7 FA 61 FC | 	wrlong	result1, fp
2d630     00 FA 4D F2 | 	cmps	result1, #0 wz
2d634     10 4E 85 F1 | 	sub	fp, #16
2d638     1C 00 90 5D |  if_ne	jmp	#LR__4302
2d63c     24 4E 05 F1 | 	add	fp, #36
2d640     A7 28 02 FB | 	rdlong	local02, fp
2d644     24 4E 85 F1 | 	sub	fp, #36
2d648     02 28 CE F7 | 	test	local02, #2 wz
2d64c     20 4E 05 51 |  if_ne	add	fp, #32
2d650     A7 02 68 5C |  if_ne	wrlong	#1, fp
2d654     20 4E 85 51 |  if_ne	sub	fp, #32
2d658                 | LR__4302
2d658                 | LR__4303
2d658     10 4E 05 F1 | 	add	fp, #16
2d65c     A7 00 68 FC | 	wrlong	#0, fp
2d660     10 4E 85 F1 | 	sub	fp, #16
2d664                 | LR__4304
2d664     0C 4E 05 F1 | 	add	fp, #12
2d668     A7 2A 02 FB | 	rdlong	local03, fp
2d66c     0C 4E 85 F1 | 	sub	fp, #12
2d670     01 2A 16 F2 | 	cmp	local03, #1 wc
2d674     B4 00 90 CD |  if_b	jmp	#LR__4305
2d678     18 4E 05 F1 | 	add	fp, #24
2d67c     A7 28 02 FB | 	rdlong	local02, fp
2d680     14 2B 02 F6 | 	mov	local03, local02
2d684     13 2A 46 F7 | 	zerox	local03, #19
2d688     14 28 46 F0 | 	shr	local02, #20
2d68c     02 28 66 F0 | 	shl	local02, #2
2d690     ED 28 02 F1 | 	add	local02, __methods__
2d694     14 29 02 FB | 	rdlong	local02, local02
2d698     14 4E 85 F1 | 	sub	fp, #20
2d69c     A7 12 02 FB | 	rdlong	arg01, fp
2d6a0     04 4E 85 F1 | 	sub	fp, #4
2d6a4     F2 26 02 F6 | 	mov	local01, objptr
2d6a8     15 E5 01 F6 | 	mov	objptr, local03
2d6ac     2D 28 62 FD | 	call	local02
2d6b0     13 E5 01 F6 | 	mov	objptr, local01
2d6b4     14 4E 05 F1 | 	add	fp, #20
2d6b8     A7 FA 61 FC | 	wrlong	result1, fp
2d6bc     14 4E 85 F1 | 	sub	fp, #20
2d6c0     00 FA 55 F2 | 	cmps	result1, #0 wc
2d6c4     64 00 90 CD |  if_b	jmp	#LR__4305
2d6c8     1C 4E 05 F1 | 	add	fp, #28
2d6cc     A7 2A 02 FB | 	rdlong	local03, fp
2d6d0     15 29 02 F6 | 	mov	local02, local03
2d6d4     01 28 06 F1 | 	add	local02, #1
2d6d8     A7 28 62 FC | 	wrlong	local02, fp
2d6dc     08 4E 85 F1 | 	sub	fp, #8
2d6e0     A7 28 02 FB | 	rdlong	local02, fp
2d6e4     15 29 42 FC | 	wrbyte	local02, local03
2d6e8     04 4E 85 F1 | 	sub	fp, #4
2d6ec     A7 2A 02 FB | 	rdlong	local03, fp
2d6f0     01 2A 06 F1 | 	add	local03, #1
2d6f4     A7 2A 62 FC | 	wrlong	local03, fp
2d6f8     04 4E 85 F1 | 	sub	fp, #4
2d6fc     A7 2A 02 FB | 	rdlong	local03, fp
2d700     01 2A 86 F1 | 	sub	local03, #1
2d704     A7 2A 62 FC | 	wrlong	local03, fp
2d708     14 4E 05 F1 | 	add	fp, #20
2d70c     A7 2A 0A FB | 	rdlong	local03, fp wz
2d710     20 4E 85 F1 | 	sub	fp, #32
2d714     4C FF 9F AD |  if_e	jmp	#LR__4304
2d718     14 4E 05 F1 | 	add	fp, #20
2d71c     A7 28 02 FB | 	rdlong	local02, fp
2d720     14 4E 85 F1 | 	sub	fp, #20
2d724     0A 28 0E F2 | 	cmp	local02, #10 wz
2d728     38 FF 9F 5D |  if_ne	jmp	#LR__4304
2d72c                 | LR__4305
2d72c     10 4E 05 F1 | 	add	fp, #16
2d730     A7 FA 01 FB | 	rdlong	result1, fp
2d734     10 4E 85 F1 | 	sub	fp, #16
2d738                 | LR__4306
2d738     A7 F0 03 F6 | 	mov	ptra, fp
2d73c     B2 00 A0 FD | 	call	#popregs_
2d740                 | __system___vfsread_ret
2d740     2D 00 64 FD | 	ret
2d744                 | 
2d744                 | __system____default_filbuf
2d744     04 4A 05 F6 | 	mov	COUNT_, #4
2d748     A8 00 A0 FD | 	call	#pushregs_
2d74c     09 27 02 F6 | 	mov	local01, arg01
2d750     13 29 02 FB | 	rdlong	local02, local01
2d754     0C 28 06 F1 | 	add	local02, #12
2d758     14 FB 09 FB | 	rdlong	result1, local02 wz
2d75c     0C 28 86 F1 | 	sub	local02, #12
2d760     20 00 90 5D |  if_ne	jmp	#LR__4310
2d764     14 28 06 F1 | 	add	local02, #20
2d768     14 FB 01 F6 | 	mov	result1, local02
2d76c     04 28 86 F1 | 	sub	local02, #4
2d770     14 FB 61 FC | 	wrlong	result1, local02
2d774     04 28 86 F1 | 	sub	local02, #4
2d778     02 00 80 FF 
2d77c     14 01 68 FC | 	wrlong	##1024, local02
2d780     0C 28 86 F1 | 	sub	local02, #12
2d784                 | LR__4310
2d784     14 26 06 F1 | 	add	local01, #20
2d788     13 2B 02 FB | 	rdlong	local03, local01
2d78c     15 2D 02 F6 | 	mov	local04, local03
2d790     14 26 86 F1 | 	sub	local01, #20
2d794     13 2C 46 F7 | 	zerox	local04, #19
2d798     14 2A 46 F0 | 	shr	local03, #20
2d79c     02 2A 66 F0 | 	shl	local03, #2
2d7a0     ED 2A 02 F1 | 	add	local03, __methods__
2d7a4     15 2B 02 FB | 	rdlong	local03, local03
2d7a8     10 28 06 F1 | 	add	local02, #16
2d7ac     14 15 02 FB | 	rdlong	arg02, local02
2d7b0     04 28 86 F1 | 	sub	local02, #4
2d7b4     14 17 02 FB | 	rdlong	arg03, local02
2d7b8     0C 28 86 F1 | 	sub	local02, #12
2d7bc     13 13 02 F6 | 	mov	arg01, local01
2d7c0     F2 26 02 F6 | 	mov	local01, objptr
2d7c4     16 E5 01 F6 | 	mov	objptr, local04
2d7c8     2D 2A 62 FD | 	call	local03
2d7cc     13 E5 01 F6 | 	mov	objptr, local01
2d7d0     FD 2C 02 F6 | 	mov	local04, result1
2d7d4     00 2C 56 F2 | 	cmps	local04, #0 wc
2d7d8     01 FA 65 C6 |  if_b	neg	result1, #1
2d7dc     28 00 90 CD |  if_b	jmp	#LR__4311
2d7e0     14 2D 62 FC | 	wrlong	local04, local02
2d7e4     10 28 06 F1 | 	add	local02, #16
2d7e8     14 2B 02 FB | 	rdlong	local03, local02
2d7ec     0C 28 86 F1 | 	sub	local02, #12
2d7f0     14 2B 62 FC | 	wrlong	local03, local02
2d7f4     04 28 06 F1 | 	add	local02, #4
2d7f8     14 2B 02 FB | 	rdlong	local03, local02
2d7fc     01 2A 46 F5 | 	or	local03, #1
2d800     14 2B 62 FC | 	wrlong	local03, local02
2d804     16 FB 01 F6 | 	mov	result1, local04
2d808                 | LR__4311
2d808     A7 F0 03 F6 | 	mov	ptra, fp
2d80c     B2 00 A0 FD | 	call	#popregs_
2d810                 | __system____default_filbuf_ret
2d810     2D 00 64 FD | 	ret
2d814                 | 
2d814                 | __system__getlower_1165
2d814     41 12 56 F2 | 	cmps	arg01, #65 wc
2d818     10 00 90 CD |  if_b	jmp	#LR__4320
2d81c     5B 12 56 F2 | 	cmps	arg01, #91 wc
2d820     09 FB 01 C6 |  if_b	mov	result1, arg01
2d824     20 FA 05 C1 |  if_b	add	result1, #32
2d828     04 00 90 CD |  if_b	jmp	#__system__getlower_1165_ret
2d82c                 | LR__4320
2d82c     09 FB 01 F6 | 	mov	result1, arg01
2d830                 | __system__getlower_1165_ret
2d830     2D 00 64 FD | 	ret
2d834                 | 
2d834                 | __system___pat_match
2d834     08 4A 05 F6 | 	mov	COUNT_, #8
2d838     A8 00 A0 FD | 	call	#pushregs_
2d83c     09 27 02 F6 | 	mov	local01, arg01
2d840                 | LR__4330
2d840     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
2d844     13 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
2d848     0A 29 C2 5A |  if_ne	rdbyte	local02, arg02
2d84c     2A 28 0E 52 |  if_ne	cmp	local02, #42 wz
2d850     2C 00 90 AD |  if_e	jmp	#LR__4331
2d854     0A 13 C2 FA | 	rdbyte	arg01, arg02
2d858     B8 FF BF FD | 	call	#__system__getlower_1165
2d85c     FD 2A 02 F6 | 	mov	local03, result1
2d860     13 13 C2 FA | 	rdbyte	arg01, local01
2d864     AC FF BF FD | 	call	#__system__getlower_1165
2d868     15 FB 09 F2 | 	cmp	result1, local03 wz
2d86c     00 FA 05 56 |  if_ne	mov	result1, #0
2d870     FC 00 90 5D |  if_ne	jmp	#LR__4339
2d874     01 26 06 F1 | 	add	local01, #1
2d878     01 14 06 F1 | 	add	arg02, #1
2d87c     C0 FF 9F FD | 	jmp	#LR__4330
2d880                 | LR__4331
2d880     0A 2B C2 FA | 	rdbyte	local03, arg02
2d884     2A 2A 0E F2 | 	cmp	local03, #42 wz
2d888     D4 00 90 5D |  if_ne	jmp	#LR__4338
2d88c     01 14 06 F1 | 	add	arg02, #1
2d890     0A 29 C2 FA | 	rdbyte	local02, arg02
2d894     01 14 86 F1 | 	sub	arg02, #1
2d898     2E 28 0E F2 | 	cmp	local02, #46 wz
2d89c     28 00 90 5D |  if_ne	jmp	#LR__4332
2d8a0     02 14 06 F1 | 	add	arg02, #2
2d8a4     0A 29 C2 FA | 	rdbyte	local02, arg02
2d8a8     02 14 86 F1 | 	sub	arg02, #2
2d8ac     2A 28 0E F2 | 	cmp	local02, #42 wz
2d8b0     03 14 06 A1 |  if_e	add	arg02, #3
2d8b4     0A 2D C2 AA |  if_e	rdbyte	local04, arg02
2d8b8     03 14 86 A1 |  if_e	sub	arg02, #3
2d8bc     16 2F 0A A6 |  if_e	mov	local05, local04 wz
2d8c0     01 FA 05 A6 |  if_e	mov	result1, #1
2d8c4     A8 00 90 AD |  if_e	jmp	#LR__4339
2d8c8                 | LR__4332
2d8c8     01 14 06 F1 | 	add	arg02, #1
2d8cc     00 30 06 F6 | 	mov	local06, #0
2d8d0     97 1E 48 FB | 	callpa	#(@LR__4335-@LR__4333)>>2,fcache_load_ptr_
2d8d4                 | LR__4333
2d8d4     18 33 02 F6 | 	mov	local07, local06
2d8d8     0A 33 02 F1 | 	add	local07, arg02
2d8dc     19 33 CA FA | 	rdbyte	local07, local07 wz
2d8e0     18 2F 02 56 |  if_ne	mov	local05, local06
2d8e4     01 2E 06 51 |  if_ne	add	local05, #1
2d8e8     17 31 02 56 |  if_ne	mov	local06, local05
2d8ec     E4 FF 9F 5D |  if_ne	jmp	#LR__4333
2d8f0     00 34 06 F6 | 	mov	local08, #0
2d8f4                 | LR__4334
2d8f4     1A 33 02 F6 | 	mov	local07, local08
2d8f8     13 33 02 F1 | 	add	local07, local01
2d8fc     19 33 CA FA | 	rdbyte	local07, local07 wz
2d900     1A 2F 02 56 |  if_ne	mov	local05, local08
2d904     01 2E 06 51 |  if_ne	add	local05, #1
2d908     17 35 02 56 |  if_ne	mov	local08, local05
2d90c     E4 FF 9F 5D |  if_ne	jmp	#LR__4334
2d910                 | LR__4335
2d910     18 35 52 F2 | 	cmps	local08, local06 wc
2d914     00 FA 05 C6 |  if_b	mov	result1, #0
2d918     54 00 90 CD |  if_b	jmp	#LR__4339
2d91c     1A 29 02 F6 | 	mov	local02, local08
2d920     18 29 82 F1 | 	sub	local02, local06
2d924     14 27 02 F1 | 	add	local01, local02
2d928                 | LR__4336
2d928     01 30 56 F2 | 	cmps	local06, #1 wc
2d92c     30 00 90 CD |  if_b	jmp	#LR__4337
2d930     13 13 C2 FA | 	rdbyte	arg01, local01
2d934     DC FE BF FD | 	call	#__system__getlower_1165
2d938     FD 34 02 F6 | 	mov	local08, result1
2d93c     0A 13 C2 FA | 	rdbyte	arg01, arg02
2d940     D0 FE BF FD | 	call	#__system__getlower_1165
2d944     FD 34 0A F2 | 	cmp	local08, result1 wz
2d948     00 FA 05 56 |  if_ne	mov	result1, #0
2d94c     20 00 90 5D |  if_ne	jmp	#LR__4339
2d950     01 26 06 F1 | 	add	local01, #1
2d954     01 14 06 F1 | 	add	arg02, #1
2d958     01 30 86 F1 | 	sub	local06, #1
2d95c     C8 FF 9F FD | 	jmp	#LR__4336
2d960                 | LR__4337
2d960                 | LR__4338
2d960     0A 35 CA FA | 	rdbyte	local08, arg02 wz
2d964     13 33 CA AA |  if_e	rdbyte	local07, local01 wz
2d968     01 FA 05 A6 |  if_e	mov	result1, #1
2d96c     00 FA 05 56 |  if_ne	mov	result1, #0
2d970                 | LR__4339
2d970     A7 F0 03 F6 | 	mov	ptra, fp
2d974     B2 00 A0 FD | 	call	#popregs_
2d978                 | __system___pat_match_ret
2d978     2D 00 64 FD | 	ret
2d97c                 | 
2d97c                 | _fatfs_cc_ff_uni2oem
2d97c     00 00 06 F6 | 	mov	_var01, #0
2d980     80 12 16 F2 | 	cmp	arg01, #128 wc
2d984     09 01 02 C6 |  if_b	mov	_var01, arg01
2d988     58 00 90 CD |  if_b	jmp	#LR__4344
2d98c     80 00 00 FF 
2d990     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2d994     4C 00 90 3D |  if_ae	jmp	#LR__4343
2d998     0A FB 31 F9 | 	getword	result1, arg02, #0
2d99c     01 00 00 FF 
2d9a0     52 FB 0D F2 | 	cmp	result1, ##850 wz
2d9a4     3C 00 90 5D |  if_ne	jmp	#LR__4343
2d9a8                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2d9a8     00 00 06 F6 | 	mov	_var01, #0
2d9ac     97 14 48 FB | 	callpa	#(@LR__4341-@LR__4340)>>2,fcache_load_ptr_
2d9b0                 | LR__4340
2d9b0     00 FB 31 F9 | 	getword	result1, _var01, #0
2d9b4     80 FA 15 F2 | 	cmp	result1, #128 wc
2d9b8     1C 00 90 3D |  if_ae	jmp	#LR__4342
2d9bc     00 FB 31 F9 | 	getword	result1, _var01, #0
2d9c0     01 FA 65 F0 | 	shl	result1, #1
2d9c4     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
2d9c8     FD FA E1 FA | 	rdword	result1, result1
2d9cc     FD 12 0A F2 | 	cmp	arg01, result1 wz
2d9d0     01 00 06 51 |  if_ne	add	_var01, #1
2d9d4     D8 FF 9F 5D |  if_ne	jmp	#LR__4340
2d9d8                 | LR__4341
2d9d8                 | LR__4342
2d9d8     00 01 32 F9 | 	getword	_var01, _var01, #0
2d9dc     80 00 06 F1 | 	add	_var01, #128
2d9e0     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2d9e4                 | LR__4343
2d9e4                 | LR__4344
2d9e4                 | ' 			c = (c + 0x80) & 0xFF;
2d9e4                 | ' 		}
2d9e4                 | ' 	}
2d9e4                 | ' 
2d9e4                 | ' 	return c;
2d9e4     00 FB 01 F6 | 	mov	result1, _var01
2d9e8                 | _fatfs_cc_ff_uni2oem_ret
2d9e8     2D 00 64 FD | 	ret
2d9ec                 | 
2d9ec                 | _fatfs_cc_ff_oem2uni
2d9ec     00 00 06 F6 | 	mov	_var01, #0
2d9f0     09 FB 31 F9 | 	getword	result1, arg01, #0
2d9f4     80 FA 15 F2 | 	cmp	result1, #128 wc
2d9f8     09 01 02 C6 |  if_b	mov	_var01, arg01
2d9fc     2C 00 90 CD |  if_b	jmp	#LR__4351
2da00     0A 15 32 F9 | 	getword	arg02, arg02, #0
2da04     01 00 00 FF 
2da08     52 15 0E F2 | 	cmp	arg02, ##850 wz
2da0c     1C 00 90 5D |  if_ne	jmp	#LR__4350
2da10     09 FB 31 F9 | 	getword	result1, arg01, #0
2da14     00 FB 15 F2 | 	cmp	result1, #256 wc
2da18     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
2da1c     80 12 86 C1 |  if_b	sub	arg01, #128
2da20     01 12 66 C0 |  if_b	shl	arg01, #1
2da24     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2da28     09 01 E2 CA |  if_b	rdword	_var01, arg01
2da2c                 | LR__4350
2da2c                 | LR__4351
2da2c                 | ' 		}
2da2c                 | ' 	}
2da2c                 | ' 
2da2c                 | ' 	return c;
2da2c     00 FB 01 F6 | 	mov	result1, _var01
2da30                 | _fatfs_cc_ff_oem2uni_ret
2da30     2D 00 64 FD | 	ret
2da34                 | 
2da34                 | _fatfs_cc_ff_wtoupper
2da34     09 01 02 F6 | 	mov	_var01, arg01
2da38     80 00 00 FF 
2da3c     00 00 16 F2 | 	cmp	_var01, ##65536 wc
2da40     60 01 90 3D |  if_ae	jmp	#LR__4373
2da44     00 03 02 F6 | 	mov	_var02, _var01
2da48     01 01 32 F9 | 	getword	_var01, _var02, #0
2da4c     08 00 00 FF 
2da50     00 00 16 F2 | 	cmp	_var01, ##4096 wc
2da54     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
2da58     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2da5c     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
2da60     01 00 00 3F 
2da64     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
2da68     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2da6c     01 00 00 3F 
2da70     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2da74     02 07 02 F6 | 	mov	_var04, _var03
2da78                 | ' 		uc = (WORD)uni;
2da78                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2da78                 | ' 		for (;;) {
2da78                 | LR__4360
2da78     03 09 E2 FA | 	rdword	_var05, _var04
2da7c     04 05 02 F6 | 	mov	_var03, _var05
2da80     0F 04 4E F7 | 	zerox	_var03, #15 wz
2da84     02 06 06 F1 | 	add	_var04, #2
2da88     14 01 90 AD |  if_e	jmp	#LR__4372
2da8c     01 05 32 F9 | 	getword	_var03, _var02, #0
2da90     04 01 32 F9 | 	getword	_var01, _var05, #0
2da94     00 05 12 F2 | 	cmp	_var03, _var01 wc
2da98     04 01 90 CD |  if_b	jmp	#LR__4372
2da9c     03 0B E2 FA | 	rdword	_var06, _var04
2daa0     05 0D 32 F9 | 	getword	_var07, _var06, #0
2daa4     08 0C 46 F0 | 	shr	_var07, #8
2daa8     05 0B 32 F9 | 	getword	_var06, _var06, #0
2daac     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
2dab0     01 05 32 F9 | 	getword	_var03, _var02, #0
2dab4     04 0F 32 F9 | 	getword	_var08, _var05, #0
2dab8     05 01 32 F9 | 	getword	_var01, _var06, #0
2dabc     00 0F 02 F1 | 	add	_var08, _var01
2dac0     07 05 52 F2 | 	cmps	_var03, _var08 wc
2dac4     02 06 06 F1 | 	add	_var04, #2
2dac8     C4 00 90 3D |  if_ae	jmp	#LR__4371
2dacc                 | ' 				switch (cmd) {
2dacc     06 11 32 F9 | 	getword	_var09, _var07, #0
2dad0     09 10 26 F3 | 	fle	_var09, #9
2dad4     30 10 62 FD | 	jmprel	_var09
2dad8                 | LR__4361
2dad8     24 00 90 FD | 	jmp	#LR__4362
2dadc     3C 00 90 FD | 	jmp	#LR__4363
2dae0     54 00 90 FD | 	jmp	#LR__4364
2dae4     5C 00 90 FD | 	jmp	#LR__4365
2dae8     64 00 90 FD | 	jmp	#LR__4366
2daec     6C 00 90 FD | 	jmp	#LR__4367
2daf0     74 00 90 FD | 	jmp	#LR__4368
2daf4     7C 00 90 FD | 	jmp	#LR__4369
2daf8     84 00 90 FD | 	jmp	#LR__4370
2dafc     A0 00 90 FD | 	jmp	#LR__4372
2db00                 | LR__4362
2db00     01 03 32 F9 | 	getword	_var02, _var02, #0
2db04     04 09 32 F9 | 	getword	_var05, _var05, #0
2db08     04 03 82 F1 | 	sub	_var02, _var05
2db0c     01 02 66 F0 | 	shl	_var02, #1
2db10     03 03 02 F1 | 	add	_var02, _var04
2db14     01 03 E2 FA | 	rdword	_var02, _var02
2db18     84 00 90 FD | 	jmp	#LR__4372
2db1c                 | LR__4363
2db1c     01 05 32 F9 | 	getword	_var03, _var02, #0
2db20     01 03 32 F9 | 	getword	_var02, _var02, #0
2db24     04 09 32 F9 | 	getword	_var05, _var05, #0
2db28     04 03 82 F1 | 	sub	_var02, _var05
2db2c     01 02 06 F5 | 	and	_var02, #1
2db30     02 03 C2 F2 | 	subr	_var02, _var03
2db34     68 00 90 FD | 	jmp	#LR__4372
2db38                 | LR__4364
2db38     01 03 32 F9 | 	getword	_var02, _var02, #0
2db3c     10 02 86 F1 | 	sub	_var02, #16
2db40     5C 00 90 FD | 	jmp	#LR__4372
2db44                 | LR__4365
2db44     01 03 32 F9 | 	getword	_var02, _var02, #0
2db48     20 02 86 F1 | 	sub	_var02, #32
2db4c     50 00 90 FD | 	jmp	#LR__4372
2db50                 | LR__4366
2db50     01 03 32 F9 | 	getword	_var02, _var02, #0
2db54     30 02 86 F1 | 	sub	_var02, #48
2db58     44 00 90 FD | 	jmp	#LR__4372
2db5c                 | LR__4367
2db5c     01 03 32 F9 | 	getword	_var02, _var02, #0
2db60     1A 02 86 F1 | 	sub	_var02, #26
2db64     38 00 90 FD | 	jmp	#LR__4372
2db68                 | LR__4368
2db68     01 03 32 F9 | 	getword	_var02, _var02, #0
2db6c     08 02 06 F1 | 	add	_var02, #8
2db70     2C 00 90 FD | 	jmp	#LR__4372
2db74                 | LR__4369
2db74     01 03 32 F9 | 	getword	_var02, _var02, #0
2db78     50 02 86 F1 | 	sub	_var02, #80
2db7c     20 00 90 FD | 	jmp	#LR__4372
2db80                 | LR__4370
2db80     01 03 32 F9 | 	getword	_var02, _var02, #0
2db84     0E 00 00 FF 
2db88     60 02 86 F1 | 	sub	_var02, ##7264
2db8c                 | ' 				}
2db8c                 | ' 				break;
2db8c     10 00 90 FD | 	jmp	#LR__4372
2db90                 | LR__4371
2db90     0F 0C 4E F7 | 	zerox	_var07, #15 wz
2db94     02 0A 06 AA |  if_e	mul	_var06, #2
2db98     05 07 02 A1 |  if_e	add	_var04, _var06
2db9c     D8 FE 9F FD | 	jmp	#LR__4360
2dba0                 | LR__4372
2dba0     01 01 32 F9 | 	getword	_var01, _var02, #0
2dba4                 | LR__4373
2dba4                 | ' 		}
2dba4                 | ' 		uni = uc;
2dba4                 | ' 	}
2dba4                 | ' 
2dba4                 | ' 	return uni;
2dba4     00 FB 01 F6 | 	mov	result1, _var01
2dba8                 | _fatfs_cc_ff_wtoupper_ret
2dba8     2D 00 64 FD | 	ret
2dbac                 | 
2dbac                 | _fatfs_cc_strncpy
2dbac     09 01 02 F6 | 	mov	_var01, arg01
2dbb0     97 12 48 FB | 	callpa	#(@LR__4381-@LR__4380)>>2,fcache_load_ptr_
2dbb4                 | ' 
2dbb4                 | ' 	dscan = dst;
2dbb4                 | ' 	sscan = src;
2dbb4                 | ' 	count = n;
2dbb4                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2dbb4                 | LR__4380
2dbb4     01 16 86 F1 | 	sub	arg03, #1
2dbb8     00 16 56 F2 | 	cmps	arg03, #0 wc
2dbbc     18 00 90 CD |  if_b	jmp	#LR__4382
2dbc0     0A FB C1 FA | 	rdbyte	result1, arg02
2dbc4     00 FB 41 FC | 	wrbyte	result1, _var01
2dbc8     01 14 06 F1 | 	add	arg02, #1
2dbcc     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2dbd0                 | ' 		continue;
2dbd0     01 00 06 F1 | 	add	_var01, #1
2dbd4     DC FF 9F 5D |  if_ne	jmp	#LR__4380
2dbd8                 | LR__4381
2dbd8                 | LR__4382
2dbd8     97 0C 48 FB | 	callpa	#(@LR__4384-@LR__4383)>>2,fcache_load_ptr_
2dbdc                 | ' 	while (--count >= 0)
2dbdc                 | LR__4383
2dbdc     01 16 86 F1 | 	sub	arg03, #1
2dbe0     00 16 56 F2 | 	cmps	arg03, #0 wc
2dbe4     00 03 02 36 |  if_ae	mov	_var02, _var01
2dbe8     01 00 06 31 |  if_ae	add	_var01, #1
2dbec     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2dbf0     E8 FF 9F 3D |  if_ae	jmp	#LR__4383
2dbf4                 | LR__4384
2dbf4                 | ' 		*dscan++ = '\0';
2dbf4                 | ' 	return(dst);
2dbf4     09 FB 01 F6 | 	mov	result1, arg01
2dbf8                 | _fatfs_cc_strncpy_ret
2dbf8     2D 00 64 FD | 	ret
2dbfc                 | 
2dbfc                 | _fatfs_cc_memcmp
2dbfc                 | ' 	for (n = size; n > 0; n--)
2dbfc     00 16 0E F2 | 	cmp	arg03, #0 wz
2dc00     28 00 90 AD |  if_e	jmp	#LR__4391
2dc04                 | LR__4390
2dc04     09 01 C2 FA | 	rdbyte	_var01, arg01
2dc08     0A 03 C2 FA | 	rdbyte	_var02, arg02
2dc0c     01 01 0A F2 | 	cmp	_var01, _var02 wz
2dc10     01 12 06 A1 |  if_e	add	arg01, #1
2dc14     01 14 06 A1 |  if_e	add	arg02, #1
2dc18                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2dc18     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2dc1c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2dc20     01 FB 81 51 |  if_ne	sub	result1, _var02
2dc24     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2dc28     F6 17 6E FB | 	djnz	arg03, #LR__4390
2dc2c                 | LR__4391
2dc2c                 | ' 
2dc2c                 | ' 	return(0);
2dc2c     00 FA 05 F6 | 	mov	result1, #0
2dc30                 | _fatfs_cc_memcmp_ret
2dc30     2D 00 64 FD | 	ret
2dc34                 | 
2dc34                 | _fatfs_cc_strncmp
2dc34     09 01 0A F6 | 	mov	_var01, arg01 wz
2dc38     14 00 90 5D |  if_ne	jmp	#LR__4400
2dc3c                 | ' 		return scan2 ? -1 : 0;
2dc3c     00 14 0E F2 | 	cmp	arg02, #0 wz
2dc40     01 02 66 56 |  if_ne	neg	_var02, #1
2dc44     00 02 06 A6 |  if_e	mov	_var02, #0
2dc48     01 FB 01 F6 | 	mov	result1, _var02
2dc4c     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2dc50                 | LR__4400
2dc50     00 14 0E F2 | 	cmp	arg02, #0 wz
2dc54     01 FA 05 A6 |  if_e	mov	result1, #1
2dc58     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2dc5c     0B 05 02 F6 | 	mov	_var03, arg03
2dc60     97 16 48 FB | 	callpa	#(@LR__4402-@LR__4401)>>2,fcache_load_ptr_
2dc64                 | ' 	count = n;
2dc64                 | ' 	do {
2dc64                 | LR__4401
2dc64     00 07 C2 FA | 	rdbyte	_var04, _var01
2dc68     0A 09 02 F6 | 	mov	_var05, arg02
2dc6c     04 0B C2 FA | 	rdbyte	_var06, _var05
2dc70     01 04 86 F1 | 	sub	_var03, #1
2dc74     00 04 56 F2 | 	cmps	_var03, #0 wc
2dc78     01 00 06 F1 | 	add	_var01, #1
2dc7c     01 14 06 F1 | 	add	arg02, #1
2dc80     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2dc84     08 00 90 2D |  if_nc_and_z	jmp	#LR__4403
2dc88     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2dc8c     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4401
2dc90                 | LR__4402
2dc90                 | LR__4403
2dc90     00 04 56 F2 | 	cmps	_var03, #0 wc
2dc94                 | ' 		return(0);
2dc94     00 FA 05 C6 |  if_b	mov	result1, #0
2dc98     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2dc9c     05 07 0A F2 | 	cmp	_var04, _var06 wz
2dca0                 | ' 		return(0);
2dca0     00 FA 05 A6 |  if_e	mov	result1, #0
2dca4     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2dca8     00 06 0E F2 | 	cmp	_var04, #0 wz
2dcac                 | ' 		return(-1);
2dcac     01 FA 65 A6 |  if_e	neg	result1, #1
2dcb0     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2dcb4     00 0A 0E F2 | 	cmp	_var06, #0 wz
2dcb8                 | ' 		return(1);
2dcb8     01 FA 05 A6 |  if_e	mov	result1, #1
2dcbc                 | ' 		return(c1 - c2);
2dcbc     03 FB 01 56 |  if_ne	mov	result1, _var04
2dcc0     05 FB 81 51 |  if_ne	sub	result1, _var06
2dcc4                 | _fatfs_cc_strncmp_ret
2dcc4     2D 00 64 FD | 	ret
2dcc8                 | 
2dcc8                 | _fatfs_cc_strchr
2dcc8                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
2dcc8                 | ' 	while ((c = *s++) != (char) charwanted)
2dcc8                 | LR__4410
2dcc8     09 01 02 F6 | 	mov	_var01, arg01
2dccc     00 03 C2 FA | 	rdbyte	_var02, _var01
2dcd0     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
2dcd4     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2dcd8     03 05 0A F2 | 	cmp	_var03, _var04 wz
2dcdc     01 12 06 F1 | 	add	arg01, #1
2dce0     14 00 90 AD |  if_e	jmp	#LR__4411
2dce4     01 05 02 F6 | 	mov	_var03, _var02
2dce8     07 04 4E F7 | 	zerox	_var03, #7 wz
2dcec     00 FA 05 A6 |  if_e	mov	result1, #0
2dcf0     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2dcf4     D0 FF 9F FD | 	jmp	#LR__4410
2dcf8                 | LR__4411
2dcf8                 | ' 	return((char *)--s);
2dcf8     01 12 86 F1 | 	sub	arg01, #1
2dcfc     09 FB 01 F6 | 	mov	result1, arg01
2dd00                 | _fatfs_cc_strchr_ret
2dd00     2D 00 64 FD | 	ret
2dd04                 | 
2dd04                 | _fatfs_cc_disk_initialize
2dd04     04 4A 05 F6 | 	mov	COUNT_, #4
2dd08     A8 00 A0 FD | 	call	#pushregs_
2dd0c     40 F0 07 F1 | 	add	ptra, #64
2dd10     04 4E 05 F1 | 	add	fp, #4
2dd14     A7 12 42 FC | 	wrbyte	arg01, fp
2dd18     01 00 00 FF 
2dd1c     14 E4 05 F1 | 	add	objptr, ##532
2dd20     F2 18 02 FB | 	rdlong	arg04, objptr
2dd24     2C 4E 05 F1 | 	add	fp, #44
2dd28     A7 18 62 FC | 	wrlong	arg04, fp
2dd2c     04 E4 85 F1 | 	sub	objptr, #4
2dd30     F2 18 02 FB | 	rdlong	arg04, objptr
2dd34     04 4E 05 F1 | 	add	fp, #4
2dd38     A7 18 62 FC | 	wrlong	arg04, fp
2dd3c     08 E4 05 F1 | 	add	objptr, #8
2dd40     F2 18 02 FB | 	rdlong	arg04, objptr
2dd44     04 4E 05 F1 | 	add	fp, #4
2dd48     A7 18 62 FC | 	wrlong	arg04, fp
2dd4c     04 E4 05 F1 | 	add	objptr, #4
2dd50     F2 18 02 FB | 	rdlong	arg04, objptr
2dd54     04 4E 05 F1 | 	add	fp, #4
2dd58     A7 18 62 FC | 	wrlong	arg04, fp
2dd5c     04 E4 05 F1 | 	add	objptr, #4
2dd60     F2 02 48 FC | 	wrbyte	#1, objptr
2dd64     01 00 00 FF 
2dd68     20 E4 85 F1 | 	sub	objptr, ##544
2dd6c     38 4E 85 F1 | 	sub	fp, #56
2dd70     A7 18 CA FA | 	rdbyte	arg04, fp wz
2dd74     04 4E 85 F1 | 	sub	fp, #4
2dd78                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2dd78                 | '             return RES_NOTRDY;
2dd78     03 FA 05 56 |  if_ne	mov	result1, #3
2dd7c     D8 05 90 5D |  if_ne	jmp	#LR__4438
2dd80     13 00 00 FF 
2dd84     10 13 06 F6 | 	mov	arg01, ##10000
2dd88     44 95 BF FD | 	call	#__system___waitus
2dd8c     30 4E 05 F1 | 	add	fp, #48
2dd90     A7 12 02 FB | 	rdlong	arg01, fp
2dd94     09 01 08 FC | 	wrpin	#0, arg01
2dd98     04 4E 05 F1 | 	add	fp, #4
2dd9c     A7 12 02 FB | 	rdlong	arg01, fp
2dda0     09 01 08 FC | 	wrpin	#0, arg01
2dda4     04 4E 05 F1 | 	add	fp, #4
2dda8     A7 12 02 FB | 	rdlong	arg01, fp
2ddac     09 01 08 FC | 	wrpin	#0, arg01
2ddb0     04 4E 05 F1 | 	add	fp, #4
2ddb4     A7 12 02 FB | 	rdlong	arg01, fp
2ddb8     09 00 80 FF 
2ddbc     09 01 08 FC | 	wrpin	##4608, arg01
2ddc0     0C 4E 85 F1 | 	sub	fp, #12
2ddc4     A7 12 02 FB | 	rdlong	arg01, fp
2ddc8     59 12 62 FD | 	drvh	arg01
2ddcc     04 4E 05 F1 | 	add	fp, #4
2ddd0     A7 12 02 FB | 	rdlong	arg01, fp
2ddd4     59 12 62 FD | 	drvh	arg01
2ddd8     04 4E 05 F1 | 	add	fp, #4
2dddc     A7 12 02 FB | 	rdlong	arg01, fp
2dde0     59 12 62 FD | 	drvh	arg01
2dde4     04 4E 05 F1 | 	add	fp, #4
2dde8     A7 12 02 FB | 	rdlong	arg01, fp
2ddec     59 12 62 FD | 	drvh	arg01
2ddf0     20 4E 85 F1 | 	sub	fp, #32
2ddf4     00 04 80 FF 
2ddf8     A7 20 68 FC | 	wrlong	##524304, fp
2ddfc     04 4E 05 F1 | 	add	fp, #4
2de00     20 03 80 FF 
2de04     A7 90 68 FC | 	wrlong	##409672, fp
2de08     14 4E 05 F1 | 	add	fp, #20
2de0c     A7 26 02 FB | 	rdlong	local01, fp
2de10     18 4E 85 F1 | 	sub	fp, #24
2de14     A7 16 02 FB | 	rdlong	arg03, fp
2de18     40 26 62 FD | 	dirl	local01
2de1c     A0 03 80 FF 
2de20     13 91 08 FC | 	wrpin	##475208, local01
2de24     13 17 12 FC | 	wxpin	arg03, local01
2de28     13 01 28 FC | 	wypin	#0, local01
2de2c     41 26 62 FD | 	dirh	local01
2de30     1C 4E 05 F1 | 	add	fp, #28
2de34     A7 28 02 FB | 	rdlong	local02, fp
2de38     14 27 82 F1 | 	sub	local01, local02
2de3c     07 26 06 F5 | 	and	local01, #7
2de40     18 26 66 F0 | 	shl	local01, #24
2de44     78 14 06 F6 | 	mov	arg02, #120
2de48     13 15 42 F5 | 	or	arg02, local01
2de4c     14 4E 85 F1 | 	sub	fp, #20
2de50     A7 14 62 FC | 	wrlong	arg02, fp
2de54     14 4E 05 F1 | 	add	fp, #20
2de58     A7 12 02 FB | 	rdlong	arg01, fp
2de5c     10 14 26 F4 | 	bith	arg02, #16
2de60     40 12 62 FD | 	dirl	arg01
2de64     09 15 02 FC | 	wrpin	arg02, arg01
2de68     09 3F 18 FC | 	wxpin	#31, arg01
2de6c     FF FF FF FF 
2de70     09 FF 2B FC | 	wypin	##-1, arg01
2de74     41 12 62 FD | 	dirh	arg01
2de78     04 4E 85 F1 | 	sub	fp, #4
2de7c     A7 14 02 FB | 	rdlong	arg02, fp
2de80     08 4E 05 F1 | 	add	fp, #8
2de84     A7 2A 02 FB | 	rdlong	local03, fp
2de88     15 15 82 F1 | 	sub	arg02, local03
2de8c     07 14 06 F5 | 	and	arg02, #7
2de90     18 14 66 F0 | 	shl	arg02, #24
2de94     14 4E 85 F1 | 	sub	fp, #20
2de98     A7 14 62 FC | 	wrlong	arg02, fp
2de9c     29 00 00 FF 
2dea0     7A 14 46 F5 | 	or	arg02, ##21114
2dea4     A7 14 62 FC | 	wrlong	arg02, fp
2dea8     14 4E 05 F1 | 	add	fp, #20
2deac     A7 12 02 FB | 	rdlong	arg01, fp
2deb0     40 12 62 FD | 	dirl	arg01
2deb4     09 15 02 FC | 	wrpin	arg02, arg01
2deb8     09 4F 18 FC | 	wxpin	#39, arg01
2debc     09 01 28 FC | 	wypin	#0, arg01
2dec0     41 12 62 FD | 	dirh	arg01
2dec4     28 4E 85 F1 | 	sub	fp, #40
2dec8     A7 12 02 F6 | 	mov	arg01, fp
2decc     14 4E 85 F1 | 	sub	fp, #20
2ded0     0A 14 06 F6 | 	mov	arg02, #10
2ded4     1C 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1199
2ded8     00 12 06 F6 | 	mov	arg01, #0
2dedc     00 14 06 F6 | 	mov	arg02, #0
2dee0     E8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1223
2dee4     24 80 B0 FD | 	call	#_fatfs_cc_deselect_1209
2dee8     64 12 06 F6 | 	mov	arg01, #100
2deec     E0 93 BF FD | 	call	#__system___waitus
2def0     14 4E 05 F1 | 	add	fp, #20
2def4     A7 12 02 F6 | 	mov	arg01, fp
2def8     14 4E 85 F1 | 	sub	fp, #20
2defc     0A 14 06 F6 | 	mov	arg02, #10
2df00     F0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1199
2df04     0C 4E 05 F1 | 	add	fp, #12
2df08     A7 00 48 FC | 	wrbyte	#0, fp
2df0c     0C 4E 85 F1 | 	sub	fp, #12
2df10     00 12 06 F6 | 	mov	arg01, #0
2df14     00 14 06 F6 | 	mov	arg02, #0
2df18     B0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1223
2df1c     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
2df20     01 18 0E F2 | 	cmp	arg04, #1 wz
2df24     B8 03 90 5D |  if_ne	jmp	#LR__4437
2df28     08 12 06 F6 | 	mov	arg01, #8
2df2c     AA 15 06 F6 | 	mov	arg02, #426
2df30     98 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1223
2df34     FD FA E1 F8 | 	getbyte	result1, result1, #0
2df38     01 FA 0D F2 | 	cmp	result1, #1 wz
2df3c     98 01 90 5D |  if_ne	jmp	#LR__4423
2df40     14 4E 05 F1 | 	add	fp, #20
2df44     A7 12 02 F6 | 	mov	arg01, fp
2df48     14 4E 85 F1 | 	sub	fp, #20
2df4c     04 14 06 F6 | 	mov	arg02, #4
2df50     A0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1199
2df54     16 4E 05 F1 | 	add	fp, #22
2df58     A7 2C C2 FA | 	rdbyte	local04, fp
2df5c     16 4E 85 F1 | 	sub	fp, #22
2df60     01 2C 0E F2 | 	cmp	local04, #1 wz
2df64     17 4E 05 A1 |  if_e	add	fp, #23
2df68     A7 2A C2 AA |  if_e	rdbyte	local03, fp
2df6c     17 4E 85 A1 |  if_e	sub	fp, #23
2df70     AA 2A 0E A2 |  if_e	cmp	local03, #170 wz
2df74     68 03 90 5D |  if_ne	jmp	#LR__4436
2df78                 | ' 				for (tmr = 1000; tmr; tmr--) {
2df78     18 4E 05 F1 | 	add	fp, #24
2df7c     01 00 80 FF 
2df80     A7 D0 6B FC | 	wrlong	##1000, fp
2df84     18 4E 85 F1 | 	sub	fp, #24
2df88                 | LR__4420
2df88     18 4E 05 F1 | 	add	fp, #24
2df8c     A7 26 0A FB | 	rdlong	local01, fp wz
2df90     18 4E 85 F1 | 	sub	fp, #24
2df94     3C 00 90 AD |  if_e	jmp	#LR__4421
2df98     A9 12 06 F6 | 	mov	arg01, #169
2df9c     1E 14 C6 F9 | 	decod	arg02, #30
2dfa0     28 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1223
2dfa4     FD 2C 02 F6 | 	mov	local04, result1
2dfa8     07 2C 4E F7 | 	zerox	local04, #7 wz
2dfac     24 00 90 AD |  if_e	jmp	#LR__4421
2dfb0     01 00 00 FF 
2dfb4     E8 13 06 F6 | 	mov	arg01, ##1000
2dfb8     14 93 BF FD | 	call	#__system___waitus
2dfbc     18 4E 05 F1 | 	add	fp, #24
2dfc0     A7 2C 02 FB | 	rdlong	local04, fp
2dfc4     01 2C 86 F1 | 	sub	local04, #1
2dfc8     A7 2C 62 FC | 	wrlong	local04, fp
2dfcc     18 4E 85 F1 | 	sub	fp, #24
2dfd0     B4 FF 9F FD | 	jmp	#LR__4420
2dfd4                 | LR__4421
2dfd4     18 4E 05 F1 | 	add	fp, #24
2dfd8     A7 2C 0A FB | 	rdlong	local04, fp wz
2dfdc     18 4E 85 F1 | 	sub	fp, #24
2dfe0     4C 00 90 AD |  if_e	jmp	#LR__4422
2dfe4     3A 12 06 F6 | 	mov	arg01, #58
2dfe8     00 14 06 F6 | 	mov	arg02, #0
2dfec     DC 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1223
2dff0     FD 2A 02 F6 | 	mov	local03, result1
2dff4     07 2A 4E F7 | 	zerox	local03, #7 wz
2dff8     34 00 90 5D |  if_ne	jmp	#LR__4422
2dffc     14 4E 05 F1 | 	add	fp, #20
2e000     A7 12 02 F6 | 	mov	arg01, fp
2e004     14 4E 85 F1 | 	sub	fp, #20
2e008     04 14 06 F6 | 	mov	arg02, #4
2e00c     E4 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1199
2e010     14 4E 05 F1 | 	add	fp, #20
2e014     A7 26 C2 FA | 	rdbyte	local01, fp
2e018     40 26 CE F7 | 	test	local01, #64 wz
2e01c     0C 2C 06 56 |  if_ne	mov	local04, #12
2e020     04 2C 06 A6 |  if_e	mov	local04, #4
2e024     08 4E 85 F1 | 	sub	fp, #8
2e028     A7 2C 42 FC | 	wrbyte	local04, fp
2e02c     0C 4E 85 F1 | 	sub	fp, #12
2e030                 | LR__4422
2e030     14 2C 06 FB | 	rdlong	local04, #20
2e034     18 4E 05 F1 | 	add	fp, #24
2e038     A7 2C 62 FC | 	wrlong	local04, fp
2e03c     0C 4E 05 F1 | 	add	fp, #12
2e040     A7 2C 02 FB | 	rdlong	local04, fp
2e044     1B 2C 26 F4 | 	bith	local04, #27
2e048     A7 2C 62 FC | 	wrlong	local04, fp
2e04c     0C 4E 85 F1 | 	sub	fp, #12
2e050     A7 2C 02 FB | 	rdlong	local04, fp
2e054     18 4E 85 F1 | 	sub	fp, #24
2e058     68 78 04 FF 
2e05c     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2e060     1C 4E 05 C1 |  if_b	add	fp, #28
2e064     00 01 80 CF 
2e068     A7 08 68 CC |  if_b	wrlong	##131076, fp
2e06c     1C 4E 85 C1 |  if_b	sub	fp, #28
2e070     6C 02 90 CD |  if_b	jmp	#LR__4436
2e074     18 4E 05 F1 | 	add	fp, #24
2e078     A7 2C 02 FB | 	rdlong	local04, fp
2e07c     18 4E 85 F1 | 	sub	fp, #24
2e080     E1 F5 05 FF 
2e084     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2e088     1C 4E 05 C1 |  if_b	add	fp, #28
2e08c     00 01 80 CF 
2e090     A7 0A 68 CC |  if_b	wrlong	##131077, fp
2e094     1C 4E 85 C1 |  if_b	sub	fp, #28
2e098     44 02 90 CD |  if_b	jmp	#LR__4436
2e09c     18 4E 05 F1 | 	add	fp, #24
2e0a0     A7 2C 02 FB | 	rdlong	local04, fp
2e0a4     18 4E 85 F1 | 	sub	fp, #24
2e0a8     3B 58 08 FF 
2e0ac     01 2C 16 F2 | 	cmp	local04, ##280000001 wc
2e0b0     1C 4E 05 C1 |  if_b	add	fp, #28
2e0b4     00 01 80 CF 
2e0b8     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2e0bc     1C 4E 85 C1 |  if_b	sub	fp, #28
2e0c0     1C 02 90 CD |  if_b	jmp	#LR__4436
2e0c4     1C 4E 05 F1 | 	add	fp, #28
2e0c8     80 01 80 FF 
2e0cc     A7 10 68 FC | 	wrlong	##196616, fp
2e0d0     1C 4E 85 F1 | 	sub	fp, #28
2e0d4     08 02 90 FD | 	jmp	#LR__4436
2e0d8                 | LR__4423
2e0d8     A9 12 06 F6 | 	mov	arg01, #169
2e0dc     00 14 06 F6 | 	mov	arg02, #0
2e0e0     E8 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1223
2e0e4     FD 2C E2 F8 | 	getbyte	local04, result1, #0
2e0e8     02 2C 16 F2 | 	cmp	local04, #2 wc
2e0ec     18 00 90 3D |  if_ae	jmp	#LR__4424
2e0f0     0C 4E 05 F1 | 	add	fp, #12
2e0f4     A7 04 48 FC | 	wrbyte	#2, fp
2e0f8     04 4E 05 F1 | 	add	fp, #4
2e0fc     A7 52 49 FC | 	wrbyte	#169, fp
2e100     10 4E 85 F1 | 	sub	fp, #16
2e104     14 00 90 FD | 	jmp	#LR__4425
2e108                 | LR__4424
2e108     0C 4E 05 F1 | 	add	fp, #12
2e10c     A7 02 48 FC | 	wrbyte	#1, fp
2e110     04 4E 05 F1 | 	add	fp, #4
2e114     A7 02 48 FC | 	wrbyte	#1, fp
2e118     10 4E 85 F1 | 	sub	fp, #16
2e11c                 | LR__4425
2e11c                 | ' 				ty =  0x01 ; cmd =  (1) ;
2e11c                 | ' 			}
2e11c                 | ' 			for (tmr = 1000; tmr; tmr--) {
2e11c     18 4E 05 F1 | 	add	fp, #24
2e120     01 00 80 FF 
2e124     A7 D0 6B FC | 	wrlong	##1000, fp
2e128     18 4E 85 F1 | 	sub	fp, #24
2e12c                 | LR__4426
2e12c     18 4E 05 F1 | 	add	fp, #24
2e130     A7 2A 0A FB | 	rdlong	local03, fp wz
2e134     18 4E 85 F1 | 	sub	fp, #24
2e138     44 00 90 AD |  if_e	jmp	#LR__4427
2e13c     10 4E 05 F1 | 	add	fp, #16
2e140     A7 12 C2 FA | 	rdbyte	arg01, fp
2e144     10 4E 85 F1 | 	sub	fp, #16
2e148     00 14 06 F6 | 	mov	arg02, #0
2e14c     7C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1223
2e150     FD 2C 02 F6 | 	mov	local04, result1
2e154     07 2C 4E F7 | 	zerox	local04, #7 wz
2e158     24 00 90 AD |  if_e	jmp	#LR__4427
2e15c     01 00 00 FF 
2e160     E8 13 06 F6 | 	mov	arg01, ##1000
2e164     68 91 BF FD | 	call	#__system___waitus
2e168     18 4E 05 F1 | 	add	fp, #24
2e16c     A7 2C 02 FB | 	rdlong	local04, fp
2e170     01 2C 86 F1 | 	sub	local04, #1
2e174     A7 2C 62 FC | 	wrlong	local04, fp
2e178     18 4E 85 F1 | 	sub	fp, #24
2e17c     AC FF 9F FD | 	jmp	#LR__4426
2e180                 | LR__4427
2e180     18 4E 05 F1 | 	add	fp, #24
2e184     A7 2C 0A FB | 	rdlong	local04, fp wz
2e188     18 4E 85 F1 | 	sub	fp, #24
2e18c     14 00 90 AD |  if_e	jmp	#LR__4428
2e190     10 12 06 F6 | 	mov	arg01, #16
2e194     09 14 C6 F9 | 	decod	arg02, #9
2e198     30 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1223
2e19c     07 FA 4D F7 | 	zerox	result1, #7 wz
2e1a0     0C 00 90 AD |  if_e	jmp	#LR__4429
2e1a4                 | LR__4428
2e1a4     0C 4E 05 F1 | 	add	fp, #12
2e1a8     A7 00 48 FC | 	wrbyte	#0, fp
2e1ac     0C 4E 85 F1 | 	sub	fp, #12
2e1b0                 | LR__4429
2e1b0     14 2C 06 FB | 	rdlong	local04, #20
2e1b4     18 4E 05 F1 | 	add	fp, #24
2e1b8     A7 2C 62 FC | 	wrlong	local04, fp
2e1bc     18 4E 85 F1 | 	sub	fp, #24
2e1c0     F0 FA 02 FF 
2e1c4     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2e1c8     18 00 90 3D |  if_ae	jmp	#LR__4430
2e1cc     24 4E 05 F1 | 	add	fp, #36
2e1d0     A7 2C 02 FB | 	rdlong	local04, fp
2e1d4     1B 2C 26 F4 | 	bith	local04, #27
2e1d8     A7 2C 62 FC | 	wrlong	local04, fp
2e1dc     24 4E 85 F1 | 	sub	fp, #36
2e1e0     2C 00 90 FD | 	jmp	#LR__4431
2e1e4                 | LR__4430
2e1e4     18 4E 05 F1 | 	add	fp, #24
2e1e8     A7 2C 02 FB | 	rdlong	local04, fp
2e1ec     18 4E 85 F1 | 	sub	fp, #24
2e1f0     E1 F5 05 FF 
2e1f4     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2e1f8     24 4E 05 C1 |  if_b	add	fp, #36
2e1fc     A7 2C 02 CB |  if_b	rdlong	local04, fp
2e200     80 00 04 CF 
2e204     00 2C 46 C5 |  if_b	or	local04, ##134283264
2e208     A7 2C 62 CC |  if_b	wrlong	local04, fp
2e20c     24 4E 85 C1 |  if_b	sub	fp, #36
2e210                 | LR__4431
2e210     18 4E 05 F1 | 	add	fp, #24
2e214     A7 2C 02 FB | 	rdlong	local04, fp
2e218     18 4E 85 F1 | 	sub	fp, #24
2e21c     F0 FA 02 FF 
2e220     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2e224     1C 4E 05 C1 |  if_b	add	fp, #28
2e228     00 01 80 CF 
2e22c     A7 08 68 CC |  if_b	wrlong	##131076, fp
2e230     1C 4E 85 C1 |  if_b	sub	fp, #28
2e234     A8 00 90 CD |  if_b	jmp	#LR__4435
2e238     18 4E 05 F1 | 	add	fp, #24
2e23c     A7 2C 02 FB | 	rdlong	local04, fp
2e240     18 4E 85 F1 | 	sub	fp, #24
2e244     68 78 04 FF 
2e248     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2e24c     1C 4E 05 C1 |  if_b	add	fp, #28
2e250     80 01 80 CF 
2e254     A7 0C 68 CC |  if_b	wrlong	##196614, fp
2e258     1C 4E 85 C1 |  if_b	sub	fp, #28
2e25c     80 00 90 CD |  if_b	jmp	#LR__4434
2e260     18 4E 05 F1 | 	add	fp, #24
2e264     A7 2C 02 FB | 	rdlong	local04, fp
2e268     18 4E 85 F1 | 	sub	fp, #24
2e26c     E1 F5 05 FF 
2e270     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2e274     1C 4E 05 C1 |  if_b	add	fp, #28
2e278     00 02 80 CF 
2e27c     A7 10 68 CC |  if_b	wrlong	##262152, fp
2e280     1C 4E 85 C1 |  if_b	sub	fp, #28
2e284     58 00 90 CD |  if_b	jmp	#LR__4433
2e288     18 4E 05 F1 | 	add	fp, #24
2e28c     A7 2C 02 FB | 	rdlong	local04, fp
2e290     18 4E 85 F1 | 	sub	fp, #24
2e294     59 73 07 FF 
2e298     81 2C 16 F2 | 	cmp	local04, ##250000001 wc
2e29c     1C 4E 05 C1 |  if_b	add	fp, #28
2e2a0     80 02 80 CF 
2e2a4     A7 14 68 CC |  if_b	wrlong	##327690, fp
2e2a8     1C 4E 85 C1 |  if_b	sub	fp, #28
2e2ac     30 00 90 CD |  if_b	jmp	#LR__4432
2e2b0     18 4E 05 F1 | 	add	fp, #24
2e2b4     A7 2C 02 FB | 	rdlong	local04, fp
2e2b8     18 4E 85 F1 | 	sub	fp, #24
2e2bc     D1 F0 08 FF 
2e2c0     01 2D 16 F2 | 	cmp	local04, ##300000001 wc
2e2c4     1C 4E 05 C1 |  if_b	add	fp, #28
2e2c8     00 03 80 CF 
2e2cc     A7 18 68 CC |  if_b	wrlong	##393228, fp
2e2d0     1C 4E 85 F3 | 	sumc	fp, #28
2e2d4     80 03 80 3F 
2e2d8     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
2e2dc     1C 4E 85 31 |  if_ae	sub	fp, #28
2e2e0                 | LR__4432
2e2e0                 | LR__4433
2e2e0                 | LR__4434
2e2e0                 | LR__4435
2e2e0                 | LR__4436
2e2e0                 | LR__4437
2e2e0     0C 4E 05 F1 | 	add	fp, #12
2e2e4     A7 2C C2 FA | 	rdbyte	local04, fp
2e2e8     01 00 00 FF 
2e2ec     21 E4 05 F1 | 	add	objptr, ##545
2e2f0     F2 2C 42 FC | 	wrbyte	local04, objptr
2e2f4     A7 26 CA FA | 	rdbyte	local01, fp wz
2e2f8     00 2C 06 56 |  if_ne	mov	local04, #0
2e2fc     01 2C 06 A6 |  if_e	mov	local04, #1
2e300     20 4E 05 F1 | 	add	fp, #32
2e304     A7 2C 42 FC | 	wrbyte	local04, fp
2e308     A7 2C C2 FA | 	rdbyte	local04, fp
2e30c     2C 4E 85 F1 | 	sub	fp, #44
2e310     01 E4 85 F1 | 	sub	objptr, #1
2e314     F2 2C 42 FC | 	wrbyte	local04, objptr
2e318     01 00 00 FF 
2e31c     20 E4 85 F1 | 	sub	objptr, ##544
2e320     E8 7B B0 FD | 	call	#_fatfs_cc_deselect_1209
2e324     34 4E 05 F1 | 	add	fp, #52
2e328     A7 12 02 FB | 	rdlong	arg01, fp
2e32c     18 4E 85 F1 | 	sub	fp, #24
2e330     A7 14 02 FB | 	rdlong	arg02, fp
2e334     09 15 12 FC | 	wxpin	arg02, arg01
2e338     1C 4E 05 F1 | 	add	fp, #28
2e33c     A7 12 02 FB | 	rdlong	arg01, fp
2e340     14 4E 85 F1 | 	sub	fp, #20
2e344     A7 14 02 FB | 	rdlong	arg02, fp
2e348     09 15 02 FC | 	wrpin	arg02, arg01
2e34c                 | ' 
2e34c                 | ' 		}
2e34c                 | ' 	}
2e34c                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2e34c                 | ' 	CardType = ty;
2e34c                 | ' 	s = ty ? 0 :  0x01 ;
2e34c                 | ' 	Stat = s;
2e34c                 | ' 
2e34c                 | ' 	deselect();
2e34c                 | ' 
2e34c                 | ' 
2e34c                 | ' 	_wxpin( PIN_CLK, ck_div );
2e34c                 | ' 	_wrpin( PIN_DI, spm_tx );
2e34c                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2e34c                 | ' 	return s;
2e34c     08 4E 05 F1 | 	add	fp, #8
2e350     A7 FA C1 FA | 	rdbyte	result1, fp
2e354     2C 4E 85 F1 | 	sub	fp, #44
2e358                 | LR__4438
2e358     A7 F0 03 F6 | 	mov	ptra, fp
2e35c     B2 00 A0 FD | 	call	#popregs_
2e360                 | _fatfs_cc_disk_initialize_ret
2e360     2D 00 64 FD | 	ret
2e364                 | 
2e364                 | _fatfs_cc_disk_read
2e364     05 4A 05 F6 | 	mov	COUNT_, #5
2e368     A8 00 A0 FD | 	call	#pushregs_
2e36c     0A 27 02 F6 | 	mov	local01, arg02
2e370     0B 29 02 F6 | 	mov	local02, arg03
2e374     0C 2B 02 F6 | 	mov	local03, arg04
2e378     00 12 0E F2 | 	cmp	arg01, #0 wz
2e37c     01 FA 05 56 |  if_ne	mov	result1, #1
2e380                 | ' 
2e380                 | ' 	return Stat;
2e380     01 00 00 AF 
2e384     20 E4 05 A1 |  if_e	add	objptr, ##544
2e388     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2e38c     01 00 00 AF 
2e390     20 E4 85 A1 |  if_e	sub	objptr, ##544
2e394     FD FA E1 F8 | 	getbyte	result1, result1, #0
2e398     01 FA CD F7 | 	test	result1, #1 wz
2e39c     03 FA 05 56 |  if_ne	mov	result1, #3
2e3a0     84 00 90 5D |  if_ne	jmp	#LR__4442
2e3a4     01 00 00 FF 
2e3a8     21 E4 05 F1 | 	add	objptr, ##545
2e3ac     F2 2C C2 FA | 	rdbyte	local04, objptr
2e3b0     01 00 00 FF 
2e3b4     21 E4 85 F1 | 	sub	objptr, ##545
2e3b8     08 2C CE F7 | 	test	local04, #8 wz
2e3bc     09 28 66 A0 |  if_e	shl	local02, #9
2e3c0     02 2A 16 F2 | 	cmp	local03, #2 wc
2e3c4     12 2C 06 36 |  if_ae	mov	local04, #18
2e3c8     11 2C 06 C6 |  if_b	mov	local04, #17
2e3cc     14 15 02 F6 | 	mov	arg02, local02
2e3d0     16 13 02 F6 | 	mov	arg01, local04
2e3d4     F4 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1223
2e3d8     FD 2E 02 F6 | 	mov	local05, result1
2e3dc     07 2E 4E F7 | 	zerox	local05, #7 wz
2e3e0     30 00 90 5D |  if_ne	jmp	#LR__4441
2e3e4                 | ' 		do {
2e3e4                 | LR__4440
2e3e4     13 13 02 F6 | 	mov	arg01, local01
2e3e8     09 14 C6 F9 | 	decod	arg02, #9
2e3ec     30 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1217
2e3f0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e3f4     01 00 00 5F 
2e3f8     00 26 06 51 |  if_ne	add	local01, ##512
2e3fc     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4440
2e400     16 2D E2 F8 | 	getbyte	local04, local04, #0
2e404     12 2C 0E F2 | 	cmp	local04, #18 wz
2e408     0C 12 06 A6 |  if_e	mov	arg01, #12
2e40c     00 14 06 A6 |  if_e	mov	arg02, #0
2e410     B8 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1223
2e414                 | LR__4441
2e414     F4 7A B0 FD | 	call	#_fatfs_cc_deselect_1209
2e418                 | ' 	}
2e418                 | ' 	deselect();
2e418                 | ' 
2e418                 | ' 	return count ? RES_ERROR : RES_OK;
2e418     00 2A 0E F2 | 	cmp	local03, #0 wz
2e41c     01 2E 06 56 |  if_ne	mov	local05, #1
2e420     00 2E 06 A6 |  if_e	mov	local05, #0
2e424     17 FB 01 F6 | 	mov	result1, local05
2e428                 | LR__4442
2e428     A7 F0 03 F6 | 	mov	ptra, fp
2e42c     B2 00 A0 FD | 	call	#popregs_
2e430                 | _fatfs_cc_disk_read_ret
2e430     2D 00 64 FD | 	ret
2e434                 | 
2e434                 | _fatfs_cc_disk_write
2e434     04 4A 05 F6 | 	mov	COUNT_, #4
2e438     A8 00 A0 FD | 	call	#pushregs_
2e43c     0A 27 02 F6 | 	mov	local01, arg02
2e440     0C 29 02 F6 | 	mov	local02, arg04
2e444     0B 2B 02 F6 | 	mov	local03, arg03
2e448     00 12 0E F2 | 	cmp	arg01, #0 wz
2e44c     01 FA 05 56 |  if_ne	mov	result1, #1
2e450                 | ' 
2e450                 | ' 	return Stat;
2e450     01 00 00 AF 
2e454     20 E4 05 A1 |  if_e	add	objptr, ##544
2e458     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2e45c     01 00 00 AF 
2e460     20 E4 85 A1 |  if_e	sub	objptr, ##544
2e464     FD FA E1 F8 | 	getbyte	result1, result1, #0
2e468     01 FA CD F7 | 	test	result1, #1 wz
2e46c     03 FA 05 56 |  if_ne	mov	result1, #3
2e470     D4 00 90 5D |  if_ne	jmp	#LR__4454
2e474     01 00 00 FF 
2e478     21 E4 05 F1 | 	add	objptr, ##545
2e47c     F2 16 C2 FA | 	rdbyte	arg03, objptr
2e480     01 00 00 FF 
2e484     21 E4 85 F1 | 	sub	objptr, ##545
2e488     08 16 CE F7 | 	test	arg03, #8 wz
2e48c     09 2A 66 A0 |  if_e	shl	local03, #9
2e490     01 28 0E F2 | 	cmp	local02, #1 wz
2e494     30 00 90 5D |  if_ne	jmp	#LR__4450
2e498     18 12 06 F6 | 	mov	arg01, #24
2e49c     15 15 02 F6 | 	mov	arg02, local03
2e4a0     28 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1223
2e4a4     FD 2C 02 F6 | 	mov	local04, result1
2e4a8     07 2C 4E F7 | 	zerox	local04, #7 wz
2e4ac     84 00 90 5D |  if_ne	jmp	#LR__4453
2e4b0     13 13 02 F6 | 	mov	arg01, local01
2e4b4     FE 14 06 F6 | 	mov	arg02, #254
2e4b8     44 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1219
2e4bc     00 FA 0D F2 | 	cmp	result1, #0 wz
2e4c0     00 28 06 56 |  if_ne	mov	local02, #0
2e4c4     6C 00 90 FD | 	jmp	#LR__4453
2e4c8                 | LR__4450
2e4c8     01 00 00 FF 
2e4cc     21 E4 05 F1 | 	add	objptr, ##545
2e4d0     F2 2C C2 FA | 	rdbyte	local04, objptr
2e4d4     01 00 00 FF 
2e4d8     21 E4 85 F1 | 	sub	objptr, ##545
2e4dc     06 2C CE F7 | 	test	local04, #6 wz
2e4e0     97 12 06 56 |  if_ne	mov	arg01, #151
2e4e4     14 15 02 56 |  if_ne	mov	arg02, local02
2e4e8     E0 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1223
2e4ec     15 15 02 F6 | 	mov	arg02, local03
2e4f0     19 12 06 F6 | 	mov	arg01, #25
2e4f4     D4 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1223
2e4f8     FD 2C 02 F6 | 	mov	local04, result1
2e4fc     07 2C 4E F7 | 	zerox	local04, #7 wz
2e500     30 00 90 5D |  if_ne	jmp	#LR__4452
2e504                 | ' 			do {
2e504                 | LR__4451
2e504     13 13 02 F6 | 	mov	arg01, local01
2e508     FC 14 06 F6 | 	mov	arg02, #252
2e50c     F0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1219
2e510     00 FA 0D F2 | 	cmp	result1, #0 wz
2e514     01 00 00 5F 
2e518     00 26 06 51 |  if_ne	add	local01, ##512
2e51c     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4451
2e520     00 12 06 F6 | 	mov	arg01, #0
2e524     FD 14 06 F6 | 	mov	arg02, #253
2e528     D4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1219
2e52c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e530     01 28 06 A6 |  if_e	mov	local02, #1
2e534                 | LR__4452
2e534                 | LR__4453
2e534     D4 79 B0 FD | 	call	#_fatfs_cc_deselect_1209
2e538                 | ' 				count = 1;
2e538                 | ' 		}
2e538                 | ' 	}
2e538                 | ' 	deselect();
2e538                 | ' 
2e538                 | ' 	return count ? RES_ERROR : RES_OK;
2e538     00 28 0E F2 | 	cmp	local02, #0 wz
2e53c     01 2C 06 56 |  if_ne	mov	local04, #1
2e540     00 2C 06 A6 |  if_e	mov	local04, #0
2e544     16 FB 01 F6 | 	mov	result1, local04
2e548                 | LR__4454
2e548     A7 F0 03 F6 | 	mov	ptra, fp
2e54c     B2 00 A0 FD | 	call	#popregs_
2e550                 | _fatfs_cc_disk_write_ret
2e550     2D 00 64 FD | 	ret
2e554                 | 
2e554                 | _fatfs_cc_disk_ioctl
2e554     01 4A 05 F6 | 	mov	COUNT_, #1
2e558     A8 00 A0 FD | 	call	#pushregs_
2e55c     30 F0 07 F1 | 	add	ptra, #48
2e560     04 4E 05 F1 | 	add	fp, #4
2e564     A7 12 42 FC | 	wrbyte	arg01, fp
2e568     04 4E 05 F1 | 	add	fp, #4
2e56c     A7 14 42 FC | 	wrbyte	arg02, fp
2e570     04 4E 05 F1 | 	add	fp, #4
2e574     A7 16 62 FC | 	wrlong	arg03, fp
2e578     08 4E 85 F1 | 	sub	fp, #8
2e57c     A7 12 CA FA | 	rdbyte	arg01, fp wz
2e580     04 4E 85 F1 | 	sub	fp, #4
2e584     01 FA 05 56 |  if_ne	mov	result1, #1
2e588                 | ' 
2e588                 | ' 	return Stat;
2e588     01 00 00 AF 
2e58c     20 E4 05 A1 |  if_e	add	objptr, ##544
2e590     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2e594     01 00 00 AF 
2e598     20 E4 85 A1 |  if_e	sub	objptr, ##544
2e59c     FD FA E1 F8 | 	getbyte	result1, result1, #0
2e5a0     01 FA CD F7 | 	test	result1, #1 wz
2e5a4     03 FA 05 56 |  if_ne	mov	result1, #3
2e5a8     E4 01 90 5D |  if_ne	jmp	#LR__4468
2e5ac     10 4E 05 F1 | 	add	fp, #16
2e5b0     A7 02 68 FC | 	wrlong	#1, fp
2e5b4                 | ' 
2e5b4                 | ' 	res = RES_ERROR;
2e5b4                 | ' 	switch (ctrl) {
2e5b4     08 4E 85 F1 | 	sub	fp, #8
2e5b8     A7 26 C2 FA | 	rdbyte	local01, fp
2e5bc     08 4E 85 F1 | 	sub	fp, #8
2e5c0     04 26 26 F3 | 	fle	local01, #4
2e5c4     30 26 62 FD | 	jmprel	local01
2e5c8                 | LR__4460
2e5c8     10 00 90 FD | 	jmp	#LR__4461
2e5cc     24 00 90 FD | 	jmp	#LR__4462
2e5d0     A0 01 90 FD | 	jmp	#LR__4466
2e5d4     80 01 90 FD | 	jmp	#LR__4465
2e5d8     98 01 90 FD | 	jmp	#LR__4466
2e5dc                 | LR__4461
2e5dc     B0 79 B0 FD | 	call	#_fatfs_cc_select_1213
2e5e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e5e4     10 4E 05 51 |  if_ne	add	fp, #16
2e5e8     A7 00 68 5C |  if_ne	wrlong	#0, fp
2e5ec     10 4E 85 51 |  if_ne	sub	fp, #16
2e5f0                 | ' 			break;
2e5f0     8C 01 90 FD | 	jmp	#LR__4467
2e5f4                 | LR__4462
2e5f4     09 12 06 F6 | 	mov	arg01, #9
2e5f8     00 14 06 F6 | 	mov	arg02, #0
2e5fc     CC 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1223
2e600     FD 26 02 F6 | 	mov	local01, result1
2e604     07 26 4E F7 | 	zerox	local01, #7 wz
2e608     74 01 90 5D |  if_ne	jmp	#LR__4467
2e60c     18 4E 05 F1 | 	add	fp, #24
2e610     A7 12 02 F6 | 	mov	arg01, fp
2e614     18 4E 85 F1 | 	sub	fp, #24
2e618     10 14 06 F6 | 	mov	arg02, #16
2e61c     00 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1217
2e620     00 FA 0D F2 | 	cmp	result1, #0 wz
2e624     58 01 90 AD |  if_e	jmp	#LR__4467
2e628     18 4E 05 F1 | 	add	fp, #24
2e62c     A7 26 C2 FA | 	rdbyte	local01, fp
2e630     18 4E 85 F1 | 	sub	fp, #24
2e634     06 26 46 F0 | 	shr	local01, #6
2e638     01 26 0E F2 | 	cmp	local01, #1 wz
2e63c     5C 00 90 5D |  if_ne	jmp	#LR__4463
2e640     21 4E 05 F1 | 	add	fp, #33
2e644     A7 26 C2 FA | 	rdbyte	local01, fp
2e648     01 4E 85 F1 | 	sub	fp, #1
2e64c     A7 FA C1 FA | 	rdbyte	result1, fp
2e650     FD FA 31 F9 | 	getword	result1, result1, #0
2e654     08 FA 65 F0 | 	shl	result1, #8
2e658     FD 26 02 F1 | 	add	local01, result1
2e65c     01 4E 85 F1 | 	sub	fp, #1
2e660     A7 FA C1 FA | 	rdbyte	result1, fp
2e664     3F FA 05 F5 | 	and	result1, #63
2e668     10 FA 65 F0 | 	shl	result1, #16
2e66c     FD 26 02 F1 | 	add	local01, result1
2e670     01 26 06 F1 | 	add	local01, #1
2e674     09 4E 05 F1 | 	add	fp, #9
2e678     A7 26 62 FC | 	wrlong	local01, fp
2e67c     1C 4E 85 F1 | 	sub	fp, #28
2e680     A7 26 02 FB | 	rdlong	local01, fp
2e684     1C 4E 05 F1 | 	add	fp, #28
2e688     A7 FA 01 FB | 	rdlong	result1, fp
2e68c     28 4E 85 F1 | 	sub	fp, #40
2e690     0A FA 65 F0 | 	shl	result1, #10
2e694     13 FB 61 FC | 	wrlong	result1, local01
2e698     AC 00 90 FD | 	jmp	#LR__4464
2e69c                 | LR__4463
2e69c     1D 4E 05 F1 | 	add	fp, #29
2e6a0     A7 26 C2 FA | 	rdbyte	local01, fp
2e6a4     13 27 42 F8 | 	getnib	local01, local01, #0
2e6a8     05 4E 05 F1 | 	add	fp, #5
2e6ac     A7 FA C1 FA | 	rdbyte	result1, fp
2e6b0     80 FA 05 F5 | 	and	result1, #128
2e6b4     07 FA C5 F0 | 	sar	result1, #7
2e6b8     FD 26 02 F1 | 	add	local01, result1
2e6bc     01 4E 85 F1 | 	sub	fp, #1
2e6c0     A7 FA C1 FA | 	rdbyte	result1, fp
2e6c4     03 FA 05 F5 | 	and	result1, #3
2e6c8     01 FA 65 F0 | 	shl	result1, #1
2e6cc     FD 26 02 F1 | 	add	local01, result1
2e6d0     02 26 06 F1 | 	add	local01, #2
2e6d4     0D 4E 85 F1 | 	sub	fp, #13
2e6d8     A7 26 42 FC | 	wrbyte	local01, fp
2e6dc     0C 4E 05 F1 | 	add	fp, #12
2e6e0     A7 26 C2 FA | 	rdbyte	local01, fp
2e6e4     06 26 46 F0 | 	shr	local01, #6
2e6e8     01 4E 85 F1 | 	sub	fp, #1
2e6ec     A7 FA C1 FA | 	rdbyte	result1, fp
2e6f0     FD FA 31 F9 | 	getword	result1, result1, #0
2e6f4     02 FA 65 F0 | 	shl	result1, #2
2e6f8     FD 26 02 F1 | 	add	local01, result1
2e6fc     01 4E 85 F1 | 	sub	fp, #1
2e700     A7 FA C1 FA | 	rdbyte	result1, fp
2e704     03 FA 05 F5 | 	and	result1, #3
2e708     FD FA 31 F9 | 	getword	result1, result1, #0
2e70c     0A FA 65 F0 | 	shl	result1, #10
2e710     FD 26 02 F1 | 	add	local01, result1
2e714     01 26 06 F1 | 	add	local01, #1
2e718     0A 4E 05 F1 | 	add	fp, #10
2e71c     A7 26 62 FC | 	wrlong	local01, fp
2e720     1C 4E 85 F1 | 	sub	fp, #28
2e724     A7 26 02 FB | 	rdlong	local01, fp
2e728     1C 4E 05 F1 | 	add	fp, #28
2e72c     A7 FA 01 FB | 	rdlong	result1, fp
2e730     14 4E 85 F1 | 	sub	fp, #20
2e734     A7 16 C2 FA | 	rdbyte	arg03, fp
2e738     14 4E 85 F1 | 	sub	fp, #20
2e73c     09 16 86 F1 | 	sub	arg03, #9
2e740     0B FB 61 F0 | 	shl	result1, arg03
2e744     13 FB 61 FC | 	wrlong	result1, local01
2e748                 | LR__4464
2e748     10 4E 05 F1 | 	add	fp, #16
2e74c     A7 00 68 FC | 	wrlong	#0, fp
2e750     10 4E 85 F1 | 	sub	fp, #16
2e754                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
2e754                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
2e754                 | ' 					*(LBA_t*)buff = cs << (n - 9);
2e754                 | ' 				}
2e754                 | ' 				res = RES_OK;
2e754                 | ' 			}
2e754                 | ' 			break;
2e754     28 00 90 FD | 	jmp	#LR__4467
2e758                 | LR__4465
2e758     0C 4E 05 F1 | 	add	fp, #12
2e75c     A7 26 02 FB | 	rdlong	local01, fp
2e760     13 01 69 FC | 	wrlong	#128, local01
2e764     04 4E 05 F1 | 	add	fp, #4
2e768     A7 00 68 FC | 	wrlong	#0, fp
2e76c     10 4E 85 F1 | 	sub	fp, #16
2e770                 | ' 			*(DWORD*)buff = 128;
2e770                 | ' 			res = RES_OK;
2e770                 | ' 			break;
2e770     0C 00 90 FD | 	jmp	#LR__4467
2e774                 | LR__4466
2e774     10 4E 05 F1 | 	add	fp, #16
2e778     A7 08 68 FC | 	wrlong	#4, fp
2e77c     10 4E 85 F1 | 	sub	fp, #16
2e780                 | LR__4467
2e780     88 77 B0 FD | 	call	#_fatfs_cc_deselect_1209
2e784                 | ' 			res = RES_PARERR;
2e784                 | ' 	}
2e784                 | ' 
2e784                 | ' 	deselect();
2e784                 | ' 
2e784                 | ' 	return res;
2e784     10 4E 05 F1 | 	add	fp, #16
2e788     A7 FA 01 FB | 	rdlong	result1, fp
2e78c     10 4E 85 F1 | 	sub	fp, #16
2e790                 | LR__4468
2e790     A7 F0 03 F6 | 	mov	ptra, fp
2e794     B2 00 A0 FD | 	call	#popregs_
2e798                 | _fatfs_cc_disk_ioctl_ret
2e798     2D 00 64 FD | 	ret
2e79c                 | 
2e79c                 | _fatfs_cc_disk_setpins
2e79c     00 12 0E F2 | 	cmp	arg01, #0 wz
2e7a0     01 FA 65 56 |  if_ne	neg	result1, #1
2e7a4     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
2e7a8     01 00 00 FF 
2e7ac     10 E4 05 F1 | 	add	objptr, ##528
2e7b0     F2 14 62 FC | 	wrlong	arg02, objptr
2e7b4     04 E4 05 F1 | 	add	objptr, #4
2e7b8     F2 16 62 FC | 	wrlong	arg03, objptr
2e7bc     04 E4 05 F1 | 	add	objptr, #4
2e7c0     F2 18 62 FC | 	wrlong	arg04, objptr
2e7c4     04 E4 05 F1 | 	add	objptr, #4
2e7c8     F2 1A 62 FC | 	wrlong	arg05, objptr
2e7cc     01 00 00 FF 
2e7d0     1C E4 85 F1 | 	sub	objptr, ##540
2e7d4     00 FA 05 F6 | 	mov	result1, #0
2e7d8                 | _fatfs_cc_disk_setpins_ret
2e7d8     2D 00 64 FD | 	ret
2e7dc                 | 
2e7dc                 | _fatfs_cc_tchar2uni
2e7dc     09 01 02 FB | 	rdlong	_var01, arg01
2e7e0     00 03 02 F6 | 	mov	_var02, _var01
2e7e4     01 00 06 F1 | 	add	_var01, #1
2e7e8     00 05 02 F6 | 	mov	_var03, _var01
2e7ec     01 07 C2 FA | 	rdbyte	_var04, _var02
2e7f0     80 06 CE F7 | 	test	_var04, #128 wz
2e7f4     E8 00 90 AD |  if_e	jmp	#LR__4477
2e7f8     03 09 02 F6 | 	mov	_var05, _var04
2e7fc     E0 08 06 F5 | 	and	_var05, #224
2e800     C0 08 0E F2 | 	cmp	_var05, #192 wz
2e804     1F 06 06 A5 |  if_e	and	_var04, #31
2e808     01 0A 06 A6 |  if_e	mov	_var06, #1
2e80c     34 00 90 AD |  if_e	jmp	#LR__4471
2e810     03 09 02 F6 | 	mov	_var05, _var04
2e814     F0 08 06 F5 | 	and	_var05, #240
2e818     E0 08 0E F2 | 	cmp	_var05, #224 wz
2e81c     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2e820     02 0A 06 A6 |  if_e	mov	_var06, #2
2e824     1C 00 90 AD |  if_e	jmp	#LR__4470
2e828     03 09 02 F6 | 	mov	_var05, _var04
2e82c     F8 08 06 F5 | 	and	_var05, #248
2e830     F0 08 0E F2 | 	cmp	_var05, #240 wz
2e834     07 06 06 A5 |  if_e	and	_var04, #7
2e838     03 0A 06 A6 |  if_e	mov	_var06, #3
2e83c                 | ' 			return 0xFFFFFFFF;
2e83c     01 FA 65 56 |  if_ne	neg	result1, #1
2e840     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2e844                 | LR__4470
2e844                 | LR__4471
2e844                 | ' 		}
2e844                 | ' 		do {
2e844                 | LR__4472
2e844     02 0D C2 FA | 	rdbyte	_var07, _var03
2e848     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
2e84c     C0 08 06 F5 | 	and	_var05, #192
2e850     80 08 0E F2 | 	cmp	_var05, #128 wz
2e854     01 04 06 F1 | 	add	_var03, #1
2e858     01 FA 65 56 |  if_ne	neg	result1, #1
2e85c     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2e860     06 06 66 F0 | 	shl	_var04, #6
2e864     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
2e868     3F 02 06 F5 | 	and	_var02, #63
2e86c     01 07 42 F5 | 	or	_var04, _var02
2e870     F4 0B 6E FB | 	djnz	_var06, #LR__4472
2e874     80 06 16 F2 | 	cmp	_var04, #128 wc
2e878     24 00 90 CD |  if_b	jmp	#LR__4474
2e87c     6C 00 00 FF 
2e880     00 06 16 F2 | 	cmp	_var04, ##55296 wc
2e884     0C 00 90 CD |  if_b	jmp	#LR__4473
2e888     70 00 00 FF 
2e88c     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2e890     0C 00 90 CD |  if_b	jmp	#LR__4474
2e894                 | LR__4473
2e894     80 08 00 FF 
2e898     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
2e89c     08 00 90 CD |  if_b	jmp	#LR__4475
2e8a0                 | LR__4474
2e8a0     01 FA 65 F6 | 	neg	result1, #1
2e8a4     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2e8a8                 | LR__4475
2e8a8     80 00 00 FF 
2e8ac     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2e8b0     2C 00 90 CD |  if_b	jmp	#LR__4476
2e8b4     03 03 02 F6 | 	mov	_var02, _var04
2e8b8     80 00 00 FF 
2e8bc     00 02 86 F1 | 	sub	_var02, ##65536
2e8c0     06 02 66 F0 | 	shl	_var02, #6
2e8c4     80 FF 01 FF 
2e8c8     00 02 06 F5 | 	and	_var02, ##67043328
2e8cc     6E 00 6C FF 
2e8d0     00 08 06 F6 | 	mov	_var05, ##-671032320
2e8d4     01 09 42 F5 | 	or	_var05, _var02
2e8d8     09 06 46 F7 | 	zerox	_var04, #9
2e8dc     04 07 42 F5 | 	or	_var04, _var05
2e8e0                 | LR__4476
2e8e0                 | LR__4477
2e8e0     09 05 62 FC | 	wrlong	_var03, arg01
2e8e4                 | ' 	}
2e8e4                 | ' #line 811 "ff.c"
2e8e4                 | ' 	*str = p;
2e8e4                 | ' 	return uc;
2e8e4     03 FB 01 F6 | 	mov	result1, _var04
2e8e8                 | _fatfs_cc_tchar2uni_ret
2e8e8     2D 00 64 FD | 	ret
2e8ec                 | 
2e8ec                 | _fatfs_cc_put_utf
2e8ec     80 12 16 F2 | 	cmp	arg01, #128 wc
2e8f0     18 00 90 3D |  if_ae	jmp	#LR__4480
2e8f4     01 16 16 F2 | 	cmp	arg03, #1 wc
2e8f8     00 FA 05 C6 |  if_b	mov	result1, #0
2e8fc     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2e900     0A 13 42 FC | 	wrbyte	arg01, arg02
2e904                 | ' 		*buf = (TCHAR)chr;
2e904                 | ' 		return 1;
2e904     01 FA 05 F6 | 	mov	result1, #1
2e908     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2e90c                 | LR__4480
2e90c     04 00 00 FF 
2e910     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2e914     40 00 90 3D |  if_ae	jmp	#LR__4481
2e918     02 16 16 F2 | 	cmp	arg03, #2 wc
2e91c     00 FA 05 C6 |  if_b	mov	result1, #0
2e920     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2e924     09 FB 01 F6 | 	mov	result1, arg01
2e928     06 FA 45 F0 | 	shr	result1, #6
2e92c     1F FA 05 F5 | 	and	result1, #31
2e930     C0 16 06 F6 | 	mov	arg03, #192
2e934     FD 16 42 F5 | 	or	arg03, result1
2e938     0A 17 42 FC | 	wrbyte	arg03, arg02
2e93c     01 14 06 F1 | 	add	arg02, #1
2e940     3F 12 06 F5 | 	and	arg01, #63
2e944     80 FA 05 F6 | 	mov	result1, #128
2e948     09 FB 41 F5 | 	or	result1, arg01
2e94c     0A FB 41 FC | 	wrbyte	result1, arg02
2e950                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2e950                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2e950                 | ' 		return 2;
2e950     02 FA 05 F6 | 	mov	result1, #2
2e954     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2e958                 | LR__4481
2e958     80 00 00 FF 
2e95c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2e960     70 00 90 3D |  if_ae	jmp	#LR__4484
2e964     03 16 16 F2 | 	cmp	arg03, #3 wc
2e968     18 00 90 CD |  if_b	jmp	#LR__4482
2e96c     6C 00 00 FF 
2e970     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2e974     14 00 90 CD |  if_b	jmp	#LR__4483
2e978     70 00 00 FF 
2e97c     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2e980     08 00 90 3D |  if_ae	jmp	#LR__4483
2e984                 | LR__4482
2e984     00 FA 05 F6 | 	mov	result1, #0
2e988     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2e98c                 | LR__4483
2e98c     09 FB 59 F8 | 	getnib	result1, arg01, #3
2e990     E0 16 06 F6 | 	mov	arg03, #224
2e994     FD 16 42 F5 | 	or	arg03, result1
2e998     0A 17 42 FC | 	wrbyte	arg03, arg02
2e99c     01 14 06 F1 | 	add	arg02, #1
2e9a0     09 FB 01 F6 | 	mov	result1, arg01
2e9a4     06 FA 45 F0 | 	shr	result1, #6
2e9a8     3F FA 05 F5 | 	and	result1, #63
2e9ac     80 16 06 F6 | 	mov	arg03, #128
2e9b0     FD 16 42 F5 | 	or	arg03, result1
2e9b4     0A 17 42 FC | 	wrbyte	arg03, arg02
2e9b8     01 14 06 F1 | 	add	arg02, #1
2e9bc     3F 12 06 F5 | 	and	arg01, #63
2e9c0     80 FA 05 F6 | 	mov	result1, #128
2e9c4     09 FB 41 F5 | 	or	result1, arg01
2e9c8     0A FB 41 FC | 	wrbyte	result1, arg02
2e9cc                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2e9cc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2e9cc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2e9cc                 | ' 		return 3;
2e9cc     03 FA 05 F6 | 	mov	result1, #3
2e9d0     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2e9d4                 | LR__4484
2e9d4     04 16 16 F2 | 	cmp	arg03, #4 wc
2e9d8     00 FA 05 C6 |  if_b	mov	result1, #0
2e9dc     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2e9e0     09 01 02 F6 | 	mov	_var01, arg01
2e9e4     E0 01 06 F4 | 	bitl	_var01, #480
2e9e8     00 00 6C FF 
2e9ec     00 00 86 F1 | 	sub	_var01, ##-671088640
2e9f0     06 00 46 F0 | 	shr	_var01, #6
2e9f4     09 13 32 F9 | 	getword	arg01, arg01, #0
2e9f8     6E 00 00 FF 
2e9fc     00 12 86 F1 | 	sub	arg01, ##56320
2ea00     00 08 00 FF 
2ea04     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2ea08     02 00 00 CF 
2ea0c     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2ea10     00 FA 05 36 |  if_ae	mov	result1, #0
2ea14     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2ea18     09 01 42 F5 | 	or	_var01, arg01
2ea1c     80 00 00 FF 
2ea20     00 00 06 F1 | 	add	_var01, ##65536
2ea24     00 FB 01 F6 | 	mov	result1, _var01
2ea28     12 FA 45 F0 | 	shr	result1, #18
2ea2c     07 FA 05 F5 | 	and	result1, #7
2ea30     F0 16 06 F6 | 	mov	arg03, #240
2ea34     FD 16 42 F5 | 	or	arg03, result1
2ea38     0A 17 42 FC | 	wrbyte	arg03, arg02
2ea3c     01 14 06 F1 | 	add	arg02, #1
2ea40     00 FB 01 F6 | 	mov	result1, _var01
2ea44     0C FA 45 F0 | 	shr	result1, #12
2ea48     3F FA 05 F5 | 	and	result1, #63
2ea4c     80 16 06 F6 | 	mov	arg03, #128
2ea50     FD 16 42 F5 | 	or	arg03, result1
2ea54     0A 17 42 FC | 	wrbyte	arg03, arg02
2ea58     01 14 06 F1 | 	add	arg02, #1
2ea5c     00 FB 01 F6 | 	mov	result1, _var01
2ea60     06 FA 45 F0 | 	shr	result1, #6
2ea64     3F FA 05 F5 | 	and	result1, #63
2ea68     80 16 06 F6 | 	mov	arg03, #128
2ea6c     FD 16 42 F5 | 	or	arg03, result1
2ea70     0A 17 42 FC | 	wrbyte	arg03, arg02
2ea74     01 14 06 F1 | 	add	arg02, #1
2ea78     3F 00 06 F5 | 	and	_var01, #63
2ea7c     80 FA 05 F6 | 	mov	result1, #128
2ea80     00 FB 41 F5 | 	or	result1, _var01
2ea84     0A FB 41 FC | 	wrbyte	result1, arg02
2ea88                 | ' 	chr = (hc | chr) + 0x10000;
2ea88                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2ea88                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2ea88                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2ea88                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2ea88                 | ' 	return 4;
2ea88     04 FA 05 F6 | 	mov	result1, #4
2ea8c                 | _fatfs_cc_put_utf_ret
2ea8c     2D 00 64 FD | 	ret
2ea90                 | 
2ea90                 | _fatfs_cc_sync_window
2ea90     02 4A 05 F6 | 	mov	COUNT_, #2
2ea94     A8 00 A0 FD | 	call	#pushregs_
2ea98     09 27 02 F6 | 	mov	local01, arg01
2ea9c     00 28 06 F6 | 	mov	local02, #0
2eaa0     03 26 06 F1 | 	add	local01, #3
2eaa4     13 FB C9 FA | 	rdbyte	result1, local01 wz
2eaa8     03 26 86 F1 | 	sub	local01, #3
2eaac     A4 00 90 AD |  if_e	jmp	#LR__4492
2eab0     01 26 06 F1 | 	add	local01, #1
2eab4     13 13 C2 FA | 	rdbyte	arg01, local01
2eab8     33 26 06 F1 | 	add	local01, #51
2eabc     13 15 02 F6 | 	mov	arg02, local01
2eac0     04 26 86 F1 | 	sub	local01, #4
2eac4     13 17 02 FB | 	rdlong	arg03, local01
2eac8     30 26 86 F1 | 	sub	local01, #48
2eacc     01 18 06 F6 | 	mov	arg04, #1
2ead0     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2ead4     00 FA 0D F2 | 	cmp	result1, #0 wz
2ead8     74 00 90 5D |  if_ne	jmp	#LR__4490
2eadc     03 26 06 F1 | 	add	local01, #3
2eae0     13 01 48 FC | 	wrbyte	#0, local01
2eae4     2D 26 06 F1 | 	add	local01, #45
2eae8     13 FB 01 FB | 	rdlong	result1, local01
2eaec     0C 26 86 F1 | 	sub	local01, #12
2eaf0     13 19 02 FB | 	rdlong	arg04, local01
2eaf4     0C FB 81 F1 | 	sub	result1, arg04
2eaf8     08 26 86 F1 | 	sub	local01, #8
2eafc     13 19 02 FB | 	rdlong	arg04, local01
2eb00     1C 26 86 F1 | 	sub	local01, #28
2eb04     0C FB 11 F2 | 	cmp	result1, arg04 wc
2eb08     48 00 90 3D |  if_ae	jmp	#LR__4491
2eb0c     02 26 06 F1 | 	add	local01, #2
2eb10     13 19 C2 FA | 	rdbyte	arg04, local01
2eb14     02 26 86 F1 | 	sub	local01, #2
2eb18     02 18 0E F2 | 	cmp	arg04, #2 wz
2eb1c     34 00 90 5D |  if_ne	jmp	#LR__4491
2eb20     01 26 06 F1 | 	add	local01, #1
2eb24     13 13 C2 FA | 	rdbyte	arg01, local01
2eb28     33 26 06 F1 | 	add	local01, #51
2eb2c     13 15 02 F6 | 	mov	arg02, local01
2eb30     04 26 86 F1 | 	sub	local01, #4
2eb34     13 17 02 FB | 	rdlong	arg03, local01
2eb38     14 26 86 F1 | 	sub	local01, #20
2eb3c     13 27 02 FB | 	rdlong	local01, local01
2eb40     13 17 02 F1 | 	add	arg03, local01
2eb44     01 18 06 F6 | 	mov	arg04, #1
2eb48     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2eb4c     04 00 90 FD | 	jmp	#LR__4491
2eb50                 | LR__4490
2eb50     01 28 06 F6 | 	mov	local02, #1
2eb54                 | LR__4491
2eb54                 | LR__4492
2eb54                 | ' 			res = FR_DISK_ERR;
2eb54                 | ' 		}
2eb54                 | ' 	}
2eb54                 | ' 	return res;
2eb54     14 FB 01 F6 | 	mov	result1, local02
2eb58     A7 F0 03 F6 | 	mov	ptra, fp
2eb5c     B2 00 A0 FD | 	call	#popregs_
2eb60                 | _fatfs_cc_sync_window_ret
2eb60     2D 00 64 FD | 	ret
2eb64                 | 
2eb64                 | _fatfs_cc_move_window
2eb64     03 4A 05 F6 | 	mov	COUNT_, #3
2eb68     A8 00 A0 FD | 	call	#pushregs_
2eb6c     09 27 02 F6 | 	mov	local01, arg01
2eb70     0A 29 02 F6 | 	mov	local02, arg02
2eb74     00 2A 06 F6 | 	mov	local03, #0
2eb78     30 26 06 F1 | 	add	local01, #48
2eb7c     13 19 02 FB | 	rdlong	arg04, local01
2eb80     30 26 86 F1 | 	sub	local01, #48
2eb84     0C 29 0A F2 | 	cmp	local02, arg04 wz
2eb88     40 00 90 AD |  if_e	jmp	#LR__4501
2eb8c     13 13 02 F6 | 	mov	arg01, local01
2eb90     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2eb94     FD 2A 0A F6 | 	mov	local03, result1 wz
2eb98     30 00 90 5D |  if_ne	jmp	#LR__4500
2eb9c     01 26 06 F1 | 	add	local01, #1
2eba0     13 13 C2 FA | 	rdbyte	arg01, local01
2eba4     33 26 06 F1 | 	add	local01, #51
2eba8     13 15 02 F6 | 	mov	arg02, local01
2ebac     14 17 02 F6 | 	mov	arg03, local02
2ebb0     01 18 06 F6 | 	mov	arg04, #1
2ebb4     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
2ebb8     00 FA 0D F2 | 	cmp	result1, #0 wz
2ebbc     01 28 66 56 |  if_ne	neg	local02, #1
2ebc0     01 2A 06 56 |  if_ne	mov	local03, #1
2ebc4     04 26 86 F1 | 	sub	local01, #4
2ebc8     13 29 62 FC | 	wrlong	local02, local01
2ebcc                 | LR__4500
2ebcc                 | LR__4501
2ebcc                 | ' 				sect = (LBA_t)0 - 1;
2ebcc                 | ' 				res = FR_DISK_ERR;
2ebcc                 | ' 			}
2ebcc                 | ' 			fs->winsect = sect;
2ebcc                 | ' 		}
2ebcc                 | ' 	}
2ebcc                 | ' 	return res;
2ebcc     15 FB 01 F6 | 	mov	result1, local03
2ebd0     A7 F0 03 F6 | 	mov	ptra, fp
2ebd4     B2 00 A0 FD | 	call	#popregs_
2ebd8                 | _fatfs_cc_move_window_ret
2ebd8     2D 00 64 FD | 	ret
2ebdc                 | 
2ebdc                 | _fatfs_cc_sync_fs
2ebdc     02 4A 05 F6 | 	mov	COUNT_, #2
2ebe0     A8 00 A0 FD | 	call	#pushregs_
2ebe4     09 27 02 F6 | 	mov	local01, arg01
2ebe8     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2ebec     FD 28 0A F6 | 	mov	local02, result1 wz
2ebf0     D8 00 90 5D |  if_ne	jmp	#LR__4511
2ebf4     13 19 C2 FA | 	rdbyte	arg04, local01
2ebf8     03 18 0E F2 | 	cmp	arg04, #3 wz
2ebfc     04 26 06 A1 |  if_e	add	local01, #4
2ec00     13 19 C2 AA |  if_e	rdbyte	arg04, local01
2ec04     04 26 86 A1 |  if_e	sub	local01, #4
2ec08     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2ec0c     A0 00 90 5D |  if_ne	jmp	#LR__4510
2ec10     34 26 06 F1 | 	add	local01, #52
2ec14     13 13 02 F6 | 	mov	arg01, local01
2ec18     00 14 06 F6 | 	mov	arg02, #0
2ec1c     09 16 C6 F9 | 	decod	arg03, #9
2ec20     98 00 A0 FD | 	call	#\builtin_bytefill_
2ec24     13 13 02 F6 | 	mov	arg01, local01
2ec28     FE 13 06 F1 | 	add	arg01, #510
2ec2c     55 00 80 FF 
2ec30     09 AB 58 FC | 	wrword	##43605, arg01
2ec34     A9 B0 A0 FF 
2ec38     13 A5 68 FC | 	wrlong	##1096897106, local01
2ec3c     13 13 02 F6 | 	mov	arg01, local01
2ec40     E4 13 06 F1 | 	add	arg01, #484
2ec44     B9 A0 B0 FF 
2ec48     09 E5 68 FC | 	wrlong	##1631679090, arg01
2ec4c     13 13 02 F6 | 	mov	arg01, local01
2ec50     E8 13 06 F1 | 	add	arg01, #488
2ec54     20 26 86 F1 | 	sub	local01, #32
2ec58     13 15 02 FB | 	rdlong	arg02, local01
2ec5c     09 15 62 FC | 	wrlong	arg02, arg01
2ec60     20 26 06 F1 | 	add	local01, #32
2ec64     13 13 02 F6 | 	mov	arg01, local01
2ec68     EC 13 06 F1 | 	add	arg01, #492
2ec6c     24 26 86 F1 | 	sub	local01, #36
2ec70     13 15 02 FB | 	rdlong	arg02, local01
2ec74     09 15 62 FC | 	wrlong	arg02, arg01
2ec78     10 26 06 F1 | 	add	local01, #16
2ec7c     13 17 02 FB | 	rdlong	arg03, local01
2ec80     01 16 06 F1 | 	add	arg03, #1
2ec84     10 26 06 F1 | 	add	local01, #16
2ec88     13 17 62 FC | 	wrlong	arg03, local01
2ec8c     2F 26 86 F1 | 	sub	local01, #47
2ec90     13 13 C2 FA | 	rdbyte	arg01, local01
2ec94     33 26 06 F1 | 	add	local01, #51
2ec98     13 15 02 F6 | 	mov	arg02, local01
2ec9c     01 18 06 F6 | 	mov	arg04, #1
2eca0     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
2eca4     30 26 86 F1 | 	sub	local01, #48
2eca8     13 01 48 FC | 	wrbyte	#0, local01
2ecac     04 26 86 F1 | 	sub	local01, #4
2ecb0                 | LR__4510
2ecb0     01 26 06 F1 | 	add	local01, #1
2ecb4     13 13 C2 FA | 	rdbyte	arg01, local01
2ecb8     00 14 06 F6 | 	mov	arg02, #0
2ecbc     00 16 06 F6 | 	mov	arg03, #0
2ecc0     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2ecc4     00 FA 0D F2 | 	cmp	result1, #0 wz
2ecc8     01 28 06 56 |  if_ne	mov	local02, #1
2eccc                 | LR__4511
2eccc                 | ' 	}
2eccc                 | ' 
2eccc                 | ' 	return res;
2eccc     14 FB 01 F6 | 	mov	result1, local02
2ecd0     A7 F0 03 F6 | 	mov	ptra, fp
2ecd4     B2 00 A0 FD | 	call	#popregs_
2ecd8                 | _fatfs_cc_sync_fs_ret
2ecd8     2D 00 64 FD | 	ret
2ecdc                 | 
2ecdc                 | _fatfs_cc_clst2sect
2ecdc     02 14 86 F1 | 	sub	arg02, #2
2ece0     18 12 06 F1 | 	add	arg01, #24
2ece4     09 01 02 FB | 	rdlong	_var01, arg01
2ece8     18 12 86 F1 | 	sub	arg01, #24
2ecec     02 00 86 F1 | 	sub	_var01, #2
2ecf0     00 15 12 F2 | 	cmp	arg02, _var01 wc
2ecf4     00 FA 05 36 |  if_ae	mov	result1, #0
2ecf8     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2ecfc     0A 12 06 F1 | 	add	arg01, #10
2ed00     09 01 E2 FA | 	rdword	_var01, arg01
2ed04     0A 01 02 FD | 	qmul	_var01, arg02
2ed08                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2ed08     22 12 06 F1 | 	add	arg01, #34
2ed0c     09 FB 01 FB | 	rdlong	result1, arg01
2ed10     18 00 62 FD | 	getqx	_var01
2ed14     00 FB 01 F1 | 	add	result1, _var01
2ed18                 | _fatfs_cc_clst2sect_ret
2ed18     2D 00 64 FD | 	ret
2ed1c                 | 
2ed1c                 | _fatfs_cc_get_fat
2ed1c     07 4A 05 F6 | 	mov	COUNT_, #7
2ed20     A8 00 A0 FD | 	call	#pushregs_
2ed24     0A 27 02 F6 | 	mov	local01, arg02
2ed28     09 29 02 FB | 	rdlong	local02, arg01
2ed2c     02 26 16 F2 | 	cmp	local01, #2 wc
2ed30     14 00 90 CD |  if_b	jmp	#LR__4520
2ed34     18 28 06 F1 | 	add	local02, #24
2ed38     14 2B 02 FB | 	rdlong	local03, local02
2ed3c     18 28 86 F1 | 	sub	local02, #24
2ed40     15 27 12 F2 | 	cmp	local01, local03 wc
2ed44     08 00 90 CD |  if_b	jmp	#LR__4521
2ed48                 | LR__4520
2ed48     01 2C 06 F6 | 	mov	local04, #1
2ed4c     60 01 90 FD | 	jmp	#LR__4528
2ed50                 | LR__4521
2ed50     01 2C 66 F6 | 	neg	local04, #1
2ed54                 | ' 		val = 0xFFFFFFFF;
2ed54                 | ' 
2ed54                 | ' 		switch (fs->fs_type) {
2ed54     14 2F C2 FA | 	rdbyte	local05, local02
2ed58     01 2E 86 F1 | 	sub	local05, #1
2ed5c     03 2E 26 F3 | 	fle	local05, #3
2ed60     30 2E 62 FD | 	jmprel	local05
2ed64                 | LR__4522
2ed64     0C 00 90 FD | 	jmp	#LR__4523
2ed68     B8 00 90 FD | 	jmp	#LR__4524
2ed6c     F8 00 90 FD | 	jmp	#LR__4525
2ed70     38 01 90 FD | 	jmp	#LR__4526
2ed74                 | LR__4523
2ed74     13 2F 02 F6 | 	mov	local05, local01
2ed78     13 13 02 F6 | 	mov	arg01, local01
2ed7c     01 12 46 F0 | 	shr	arg01, #1
2ed80     09 2F 02 F1 | 	add	local05, arg01
2ed84     14 13 02 F6 | 	mov	arg01, local02
2ed88     17 31 02 F6 | 	mov	local06, local05
2ed8c     09 30 46 F0 | 	shr	local06, #9
2ed90     24 28 06 F1 | 	add	local02, #36
2ed94     14 15 02 FB | 	rdlong	arg02, local02
2ed98     24 28 86 F1 | 	sub	local02, #36
2ed9c     18 15 02 F1 | 	add	arg02, local06
2eda0     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2eda4     00 FA 0D F2 | 	cmp	result1, #0 wz
2eda8     04 01 90 5D |  if_ne	jmp	#LR__4527
2edac     17 31 02 F6 | 	mov	local06, local05
2edb0     FF 31 06 F5 | 	and	local06, #511
2edb4     34 28 06 F1 | 	add	local02, #52
2edb8     14 31 02 F1 | 	add	local06, local02
2edbc     18 33 C2 FA | 	rdbyte	local07, local06
2edc0     34 28 86 F1 | 	sub	local02, #52
2edc4     14 13 02 F6 | 	mov	arg01, local02
2edc8     01 2E 06 F1 | 	add	local05, #1
2edcc     17 31 02 F6 | 	mov	local06, local05
2edd0     09 30 46 F0 | 	shr	local06, #9
2edd4     24 28 06 F1 | 	add	local02, #36
2edd8     14 15 02 FB | 	rdlong	arg02, local02
2eddc     24 28 86 F1 | 	sub	local02, #36
2ede0     18 15 02 F1 | 	add	arg02, local06
2ede4     7C FD BF FD | 	call	#_fatfs_cc_move_window
2ede8     00 FA 0D F2 | 	cmp	result1, #0 wz
2edec     C0 00 90 5D |  if_ne	jmp	#LR__4527
2edf0     FF 2F 06 F5 | 	and	local05, #511
2edf4     34 28 06 F1 | 	add	local02, #52
2edf8     14 2F 02 F1 | 	add	local05, local02
2edfc     17 31 C2 FA | 	rdbyte	local06, local05
2ee00     08 30 66 F0 | 	shl	local06, #8
2ee04     18 33 42 F5 | 	or	local07, local06
2ee08     01 26 CE F7 | 	test	local01, #1 wz
2ee0c     04 32 46 50 |  if_ne	shr	local07, #4
2ee10     19 2B 02 56 |  if_ne	mov	local03, local07
2ee14     0B 32 46 A7 |  if_e	zerox	local07, #11
2ee18     19 2B 02 A6 |  if_e	mov	local03, local07
2ee1c     15 2D 02 F6 | 	mov	local04, local03
2ee20                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2ee20                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2ee20                 | ' 			break;
2ee20     8C 00 90 FD | 	jmp	#LR__4527
2ee24                 | LR__4524
2ee24     14 13 02 F6 | 	mov	arg01, local02
2ee28     13 31 02 F6 | 	mov	local06, local01
2ee2c     08 30 46 F0 | 	shr	local06, #8
2ee30     24 28 06 F1 | 	add	local02, #36
2ee34     14 15 02 FB | 	rdlong	arg02, local02
2ee38     24 28 86 F1 | 	sub	local02, #36
2ee3c     18 15 02 F1 | 	add	arg02, local06
2ee40     20 FD BF FD | 	call	#_fatfs_cc_move_window
2ee44     00 FA 0D F2 | 	cmp	result1, #0 wz
2ee48     64 00 90 5D |  if_ne	jmp	#LR__4527
2ee4c     34 28 06 F1 | 	add	local02, #52
2ee50     01 26 66 F0 | 	shl	local01, #1
2ee54     FF 27 06 F5 | 	and	local01, #511
2ee58     13 29 02 F1 | 	add	local02, local01
2ee5c                 | ' {
2ee5c                 | ' 
2ee5c                 | ' 	return *((WORD*)ptr);
2ee5c     14 FB E1 FA | 	rdword	result1, local02
2ee60     FD 2C 32 F9 | 	getword	local04, result1, #0
2ee64                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2ee64                 | ' 			break;
2ee64     48 00 90 FD | 	jmp	#LR__4527
2ee68                 | LR__4525
2ee68     14 13 02 F6 | 	mov	arg01, local02
2ee6c     13 31 02 F6 | 	mov	local06, local01
2ee70     07 30 46 F0 | 	shr	local06, #7
2ee74     24 28 06 F1 | 	add	local02, #36
2ee78     14 15 02 FB | 	rdlong	arg02, local02
2ee7c     24 28 86 F1 | 	sub	local02, #36
2ee80     18 15 02 F1 | 	add	arg02, local06
2ee84     DC FC BF FD | 	call	#_fatfs_cc_move_window
2ee88     00 FA 0D F2 | 	cmp	result1, #0 wz
2ee8c     20 00 90 5D |  if_ne	jmp	#LR__4527
2ee90     34 28 06 F1 | 	add	local02, #52
2ee94     02 26 66 F0 | 	shl	local01, #2
2ee98     FF 27 06 F5 | 	and	local01, #511
2ee9c     13 29 02 F1 | 	add	local02, local01
2eea0                 | ' {
2eea0                 | ' 
2eea0                 | ' 	return *((DWORD*)ptr);
2eea0     14 2D 02 FB | 	rdlong	local04, local02
2eea4     7C 2C 06 F4 | 	bitl	local04, #124
2eea8                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2eea8                 | ' 			break;
2eea8     04 00 90 FD | 	jmp	#LR__4527
2eeac                 | LR__4526
2eeac     01 2C 06 F6 | 	mov	local04, #1
2eeb0                 | LR__4527
2eeb0                 | LR__4528
2eeb0                 | ' 			val = 1;
2eeb0                 | ' 		}
2eeb0                 | ' 	}
2eeb0                 | ' 
2eeb0                 | ' 	return val;
2eeb0     16 FB 01 F6 | 	mov	result1, local04
2eeb4     A7 F0 03 F6 | 	mov	ptra, fp
2eeb8     B2 00 A0 FD | 	call	#popregs_
2eebc                 | _fatfs_cc_get_fat_ret
2eebc     2D 00 64 FD | 	ret
2eec0                 | 
2eec0                 | _fatfs_cc_put_fat
2eec0     08 4A 05 F6 | 	mov	COUNT_, #8
2eec4     A8 00 A0 FD | 	call	#pushregs_
2eec8     09 27 02 F6 | 	mov	local01, arg01
2eecc     0A 29 02 F6 | 	mov	local02, arg02
2eed0     0B 2B 02 F6 | 	mov	local03, arg03
2eed4     02 2C 06 F6 | 	mov	local04, #2
2eed8     02 28 16 F2 | 	cmp	local02, #2 wc
2eedc     E0 01 90 CD |  if_b	jmp	#LR__4537
2eee0     18 26 06 F1 | 	add	local01, #24
2eee4     13 2F 02 FB | 	rdlong	local05, local01
2eee8     18 26 86 F1 | 	sub	local01, #24
2eeec     17 29 12 F2 | 	cmp	local02, local05 wc
2eef0     CC 01 90 3D |  if_ae	jmp	#LR__4537
2eef4                 | ' 		switch (fs->fs_type) {
2eef4     13 31 C2 FA | 	rdbyte	local06, local01
2eef8     01 30 86 F1 | 	sub	local06, #1
2eefc     03 30 26 F3 | 	fle	local06, #3
2ef00     30 30 62 FD | 	jmprel	local06
2ef04                 | LR__4530
2ef04     0C 00 90 FD | 	jmp	#LR__4531
2ef08     F8 00 90 FD | 	jmp	#LR__4534
2ef0c     40 01 90 FD | 	jmp	#LR__4535
2ef10     AC 01 90 FD | 	jmp	#LR__4536
2ef14                 | LR__4531
2ef14     14 33 02 F6 | 	mov	local07, local02
2ef18     14 2F 02 F6 | 	mov	local05, local02
2ef1c     01 2E 46 F0 | 	shr	local05, #1
2ef20     17 33 02 F1 | 	add	local07, local05
2ef24     13 13 02 F6 | 	mov	arg01, local01
2ef28     19 31 02 F6 | 	mov	local06, local07
2ef2c     09 30 46 F0 | 	shr	local06, #9
2ef30     24 26 06 F1 | 	add	local01, #36
2ef34     13 15 02 FB | 	rdlong	arg02, local01
2ef38     24 26 86 F1 | 	sub	local01, #36
2ef3c     18 15 02 F1 | 	add	arg02, local06
2ef40     20 FC BF FD | 	call	#_fatfs_cc_move_window
2ef44     FD 2C 0A F6 | 	mov	local04, result1 wz
2ef48     74 01 90 5D |  if_ne	jmp	#LR__4536
2ef4c     34 26 06 F1 | 	add	local01, #52
2ef50     13 35 02 F6 | 	mov	local08, local01
2ef54     19 2F 02 F6 | 	mov	local05, local07
2ef58     FF 2F 06 F5 | 	and	local05, #511
2ef5c     17 35 02 F1 | 	add	local08, local05
2ef60     01 28 CE F7 | 	test	local02, #1 wz
2ef64     34 26 86 F1 | 	sub	local01, #52
2ef68     01 32 06 F1 | 	add	local07, #1
2ef6c     18 00 90 AD |  if_e	jmp	#LR__4532
2ef70     1A 2F C2 FA | 	rdbyte	local05, local08
2ef74     17 2F 42 F8 | 	getnib	local05, local05, #0
2ef78     15 31 E2 F8 | 	getbyte	local06, local03, #0
2ef7c     04 30 66 F0 | 	shl	local06, #4
2ef80     18 2F 42 F5 | 	or	local05, local06
2ef84     04 00 90 FD | 	jmp	#LR__4533
2ef88                 | LR__4532
2ef88     15 2F 02 F6 | 	mov	local05, local03
2ef8c                 | LR__4533
2ef8c     1A 2F 42 FC | 	wrbyte	local05, local08
2ef90     03 26 06 F1 | 	add	local01, #3
2ef94     13 03 48 FC | 	wrbyte	#1, local01
2ef98     03 26 86 F1 | 	sub	local01, #3
2ef9c     13 13 02 F6 | 	mov	arg01, local01
2efa0     19 35 02 F6 | 	mov	local08, local07
2efa4     09 34 46 F0 | 	shr	local08, #9
2efa8     24 26 06 F1 | 	add	local01, #36
2efac     13 15 02 FB | 	rdlong	arg02, local01
2efb0     24 26 86 F1 | 	sub	local01, #36
2efb4     1A 15 02 F1 | 	add	arg02, local08
2efb8     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2efbc     FD 2C 0A F6 | 	mov	local04, result1 wz
2efc0     FC 00 90 5D |  if_ne	jmp	#LR__4536
2efc4     34 26 06 F1 | 	add	local01, #52
2efc8     13 35 02 F6 | 	mov	local08, local01
2efcc     FF 33 06 F5 | 	and	local07, #511
2efd0     19 35 02 F1 | 	add	local08, local07
2efd4     01 28 CE F7 | 	test	local02, #1 wz
2efd8     04 2A 46 50 |  if_ne	shr	local03, #4
2efdc     15 2F 02 56 |  if_ne	mov	local05, local03
2efe0     1A 2F C2 AA |  if_e	rdbyte	local05, local08
2efe4     F0 2E 06 A5 |  if_e	and	local05, #240
2efe8     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
2efec     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
2eff0     15 2F 42 A5 |  if_e	or	local05, local03
2eff4     1A 2F 42 FC | 	wrbyte	local05, local08
2eff8     31 26 86 F1 | 	sub	local01, #49
2effc     13 03 48 FC | 	wrbyte	#1, local01
2f000                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2f000                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2f000                 | ' 			fs->wflag = 1;
2f000                 | ' 			break;
2f000     BC 00 90 FD | 	jmp	#LR__4536
2f004                 | LR__4534
2f004     13 13 02 F6 | 	mov	arg01, local01
2f008     14 35 02 F6 | 	mov	local08, local02
2f00c     08 34 46 F0 | 	shr	local08, #8
2f010     24 26 06 F1 | 	add	local01, #36
2f014     13 15 02 FB | 	rdlong	arg02, local01
2f018     24 26 86 F1 | 	sub	local01, #36
2f01c     1A 15 02 F1 | 	add	arg02, local08
2f020     40 FB BF FD | 	call	#_fatfs_cc_move_window
2f024     FD 2C 0A F6 | 	mov	local04, result1 wz
2f028     94 00 90 5D |  if_ne	jmp	#LR__4536
2f02c     34 26 06 F1 | 	add	local01, #52
2f030     13 13 02 F6 | 	mov	arg01, local01
2f034     01 28 66 F0 | 	shl	local02, #1
2f038     FF 29 06 F5 | 	and	local02, #511
2f03c     14 13 02 F1 | 	add	arg01, local02
2f040     09 2B 52 FC | 	wrword	local03, arg01
2f044     31 26 86 F1 | 	sub	local01, #49
2f048     13 03 48 FC | 	wrbyte	#1, local01
2f04c                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2f04c                 | ' 			fs->wflag = 1;
2f04c                 | ' 			break;
2f04c     70 00 90 FD | 	jmp	#LR__4536
2f050                 | LR__4535
2f050     13 13 02 F6 | 	mov	arg01, local01
2f054     14 35 02 F6 | 	mov	local08, local02
2f058     07 34 46 F0 | 	shr	local08, #7
2f05c     24 26 06 F1 | 	add	local01, #36
2f060     13 15 02 FB | 	rdlong	arg02, local01
2f064     24 26 86 F1 | 	sub	local01, #36
2f068     1A 15 02 F1 | 	add	arg02, local08
2f06c     F4 FA BF FD | 	call	#_fatfs_cc_move_window
2f070     FD 2C 0A F6 | 	mov	local04, result1 wz
2f074     48 00 90 5D |  if_ne	jmp	#LR__4536
2f078     7C 2A 06 F4 | 	bitl	local03, #124
2f07c     34 26 06 F1 | 	add	local01, #52
2f080     14 35 02 F6 | 	mov	local08, local02
2f084     02 34 66 F0 | 	shl	local08, #2
2f088     FF 35 06 F5 | 	and	local08, #511
2f08c     13 13 02 F6 | 	mov	arg01, local01
2f090     1A 13 02 F1 | 	add	arg01, local08
2f094                 | ' {
2f094                 | ' 
2f094                 | ' 	return *((DWORD*)ptr);
2f094     09 35 02 FB | 	rdlong	local08, arg01
2f098     00 00 78 FF 
2f09c     00 34 06 F5 | 	and	local08, ##-268435456
2f0a0     1A 2B 42 F5 | 	or	local03, local08
2f0a4     13 13 02 F6 | 	mov	arg01, local01
2f0a8     02 28 66 F0 | 	shl	local02, #2
2f0ac     FF 29 06 F5 | 	and	local02, #511
2f0b0     14 13 02 F1 | 	add	arg01, local02
2f0b4     09 2B 62 FC | 	wrlong	local03, arg01
2f0b8     31 26 86 F1 | 	sub	local01, #49
2f0bc     13 03 48 FC | 	wrbyte	#1, local01
2f0c0                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2f0c0                 | ' 			}
2f0c0                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2f0c0                 | ' 			fs->wflag = 1;
2f0c0                 | ' 			break;
2f0c0                 | LR__4536
2f0c0                 | LR__4537
2f0c0                 | ' 		}
2f0c0                 | ' 	}
2f0c0                 | ' 	return res;
2f0c0     16 FB 01 F6 | 	mov	result1, local04
2f0c4     A7 F0 03 F6 | 	mov	ptra, fp
2f0c8     B2 00 A0 FD | 	call	#popregs_
2f0cc                 | _fatfs_cc_put_fat_ret
2f0cc     2D 00 64 FD | 	ret
2f0d0                 | 
2f0d0                 | _fatfs_cc_remove_chain
2f0d0     05 4A 05 F6 | 	mov	COUNT_, #5
2f0d4     A8 00 A0 FD | 	call	#pushregs_
2f0d8     09 27 02 F6 | 	mov	local01, arg01
2f0dc     0A 29 02 F6 | 	mov	local02, arg02
2f0e0     0B 2B 02 F6 | 	mov	local03, arg03
2f0e4     13 2D 02 FB | 	rdlong	local04, local01
2f0e8     02 28 16 F2 | 	cmp	local02, #2 wc
2f0ec     14 00 90 CD |  if_b	jmp	#LR__4540
2f0f0     18 2C 06 F1 | 	add	local04, #24
2f0f4     16 FB 01 FB | 	rdlong	result1, local04
2f0f8     18 2C 86 F1 | 	sub	local04, #24
2f0fc     FD 28 12 F2 | 	cmp	local02, result1 wc
2f100     08 00 90 CD |  if_b	jmp	#LR__4541
2f104                 | LR__4540
2f104     02 FA 05 F6 | 	mov	result1, #2
2f108     CC 00 90 FD | 	jmp	#LR__4546
2f10c                 | LR__4541
2f10c     00 2A 0E F2 | 	cmp	local03, #0 wz
2f110     18 00 90 AD |  if_e	jmp	#LR__4542
2f114     15 15 02 F6 | 	mov	arg02, local03
2f118     16 13 02 F6 | 	mov	arg01, local04
2f11c     01 16 66 F6 | 	neg	arg03, #1
2f120     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2f124     00 FA 0D F2 | 	cmp	result1, #0 wz
2f128     AC 00 90 5D |  if_ne	jmp	#LR__4546
2f12c                 | LR__4542
2f12c                 | ' 	}
2f12c                 | ' 
2f12c                 | ' 
2f12c                 | ' 	do {
2f12c                 | LR__4543
2f12c     14 15 02 F6 | 	mov	arg02, local02
2f130     13 13 02 F6 | 	mov	arg01, local01
2f134     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2f138     FD 2E 0A F6 | 	mov	local05, result1 wz
2f13c     94 00 90 AD |  if_e	jmp	#LR__4545
2f140     01 2E 0E F2 | 	cmp	local05, #1 wz
2f144     02 FA 05 A6 |  if_e	mov	result1, #2
2f148     8C 00 90 AD |  if_e	jmp	#LR__4546
2f14c     FF FF 7F FF 
2f150     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2f154     01 FA 05 A6 |  if_e	mov	result1, #1
2f158     7C 00 90 AD |  if_e	jmp	#LR__4546
2f15c     14 15 02 F6 | 	mov	arg02, local02
2f160     16 13 02 F6 | 	mov	arg01, local04
2f164     00 16 06 F6 | 	mov	arg03, #0
2f168     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2f16c     FD 2A 0A F6 | 	mov	local03, result1 wz
2f170     15 FB 01 56 |  if_ne	mov	result1, local03
2f174     60 00 90 5D |  if_ne	jmp	#LR__4546
2f178     18 2C 06 F1 | 	add	local04, #24
2f17c     16 2B 02 FB | 	rdlong	local03, local04
2f180     02 2A 86 F1 | 	sub	local03, #2
2f184     04 2C 86 F1 | 	sub	local04, #4
2f188     16 29 02 FB | 	rdlong	local02, local04
2f18c     14 2C 86 F1 | 	sub	local04, #20
2f190     15 29 12 F2 | 	cmp	local02, local03 wc
2f194     24 00 90 3D |  if_ae	jmp	#LR__4544
2f198     14 2C 06 F1 | 	add	local04, #20
2f19c     16 2B 02 FB | 	rdlong	local03, local04
2f1a0     01 2A 06 F1 | 	add	local03, #1
2f1a4     16 2B 62 FC | 	wrlong	local03, local04
2f1a8     10 2C 86 F1 | 	sub	local04, #16
2f1ac     16 2B C2 FA | 	rdbyte	local03, local04
2f1b0     01 2A 46 F5 | 	or	local03, #1
2f1b4     16 2B 42 FC | 	wrbyte	local03, local04
2f1b8     04 2C 86 F1 | 	sub	local04, #4
2f1bc                 | LR__4544
2f1bc     17 29 02 F6 | 	mov	local02, local05
2f1c0     18 2C 06 F1 | 	add	local04, #24
2f1c4     16 2F 02 FB | 	rdlong	local05, local04
2f1c8     18 2C 86 F1 | 	sub	local04, #24
2f1cc     17 29 12 F2 | 	cmp	local02, local05 wc
2f1d0     58 FF 9F CD |  if_b	jmp	#LR__4543
2f1d4                 | LR__4545
2f1d4                 | ' #line 1500 "ff.c"
2f1d4                 | ' 	return FR_OK;
2f1d4     00 FA 05 F6 | 	mov	result1, #0
2f1d8                 | LR__4546
2f1d8     A7 F0 03 F6 | 	mov	ptra, fp
2f1dc     B2 00 A0 FD | 	call	#popregs_
2f1e0                 | _fatfs_cc_remove_chain_ret
2f1e0     2D 00 64 FD | 	ret
2f1e4                 | 
2f1e4                 | _fatfs_cc_create_chain
2f1e4     09 4A 05 F6 | 	mov	COUNT_, #9
2f1e8     A8 00 A0 FD | 	call	#pushregs_
2f1ec     09 27 02 F6 | 	mov	local01, arg01
2f1f0     0A 29 0A F6 | 	mov	local02, arg02 wz
2f1f4     13 2B 02 FB | 	rdlong	local03, local01
2f1f8     28 00 90 5D |  if_ne	jmp	#LR__4550
2f1fc     10 2A 06 F1 | 	add	local03, #16
2f200     15 2D 0A FB | 	rdlong	local04, local03 wz
2f204     10 2A 86 F1 | 	sub	local03, #16
2f208     18 2A 06 51 |  if_ne	add	local03, #24
2f20c     15 2F 02 5B |  if_ne	rdlong	local05, local03
2f210     18 2A 86 51 |  if_ne	sub	local03, #24
2f214     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
2f218     50 00 90 4D |  if_c_and_nz	jmp	#LR__4551
2f21c     01 2C 06 F6 | 	mov	local04, #1
2f220     48 00 90 FD | 	jmp	#LR__4551
2f224                 | LR__4550
2f224     14 15 02 F6 | 	mov	arg02, local02
2f228     13 13 02 F6 | 	mov	arg01, local01
2f22c     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2f230     FD 2C 02 F6 | 	mov	local04, result1
2f234     02 2C 16 F2 | 	cmp	local04, #2 wc
2f238     01 FA 05 C6 |  if_b	mov	result1, #1
2f23c     BC 01 90 CD |  if_b	jmp	#LR__4561
2f240     FF FF 7F FF 
2f244     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2f248     16 FB 01 A6 |  if_e	mov	result1, local04
2f24c     AC 01 90 AD |  if_e	jmp	#LR__4561
2f250     18 2A 06 F1 | 	add	local03, #24
2f254     15 2F 02 FB | 	rdlong	local05, local03
2f258     18 2A 86 F1 | 	sub	local03, #24
2f25c     17 2D 12 F2 | 	cmp	local04, local05 wc
2f260     16 FB 01 C6 |  if_b	mov	result1, local04
2f264     94 01 90 CD |  if_b	jmp	#LR__4561
2f268     14 2D 02 F6 | 	mov	local04, local02
2f26c                 | LR__4551
2f26c     14 2A 06 F1 | 	add	local03, #20
2f270     15 2F 0A FB | 	rdlong	local05, local03 wz
2f274     14 2A 86 F1 | 	sub	local03, #20
2f278     00 FA 05 A6 |  if_e	mov	result1, #0
2f27c     7C 01 90 AD |  if_e	jmp	#LR__4561
2f280     00 30 06 F6 | 	mov	local06, #0
2f284     14 2D 0A F2 | 	cmp	local04, local02 wz
2f288     74 00 90 5D |  if_ne	jmp	#LR__4554
2f28c     16 31 02 F6 | 	mov	local06, local04
2f290     01 30 06 F1 | 	add	local06, #1
2f294     18 2A 06 F1 | 	add	local03, #24
2f298     15 2F 02 FB | 	rdlong	local05, local03
2f29c     18 2A 86 F1 | 	sub	local03, #24
2f2a0     17 31 12 F2 | 	cmp	local06, local05 wc
2f2a4     02 30 06 36 |  if_ae	mov	local06, #2
2f2a8     18 15 02 F6 | 	mov	arg02, local06
2f2ac     13 13 02 F6 | 	mov	arg01, local01
2f2b0     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2f2b4     FD 2E 02 F6 | 	mov	local05, result1
2f2b8     01 2E 0E F2 | 	cmp	local05, #1 wz
2f2bc     FF FF 7F 5F 
2f2c0     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
2f2c4     17 FB 01 A6 |  if_e	mov	result1, local05
2f2c8     30 01 90 AD |  if_e	jmp	#LR__4561
2f2cc     00 2E 0E F2 | 	cmp	local05, #0 wz
2f2d0     2C 00 90 AD |  if_e	jmp	#LR__4553
2f2d4     10 2A 06 F1 | 	add	local03, #16
2f2d8     15 33 02 FB | 	rdlong	local07, local03
2f2dc     10 2A 86 F1 | 	sub	local03, #16
2f2e0     02 32 16 F2 | 	cmp	local07, #2 wc
2f2e4     14 00 90 CD |  if_b	jmp	#LR__4552
2f2e8     18 2A 06 F1 | 	add	local03, #24
2f2ec     15 2F 02 FB | 	rdlong	local05, local03
2f2f0     18 2A 86 F1 | 	sub	local03, #24
2f2f4     17 33 12 F2 | 	cmp	local07, local05 wc
2f2f8     19 2D 02 C6 |  if_b	mov	local04, local07
2f2fc                 | LR__4552
2f2fc     00 30 06 F6 | 	mov	local06, #0
2f300                 | LR__4553
2f300                 | LR__4554
2f300     00 30 0E F2 | 	cmp	local06, #0 wz
2f304     60 00 90 5D |  if_ne	jmp	#LR__4557
2f308     16 31 02 F6 | 	mov	local06, local04
2f30c                 | ' 			ncl = scl;
2f30c                 | ' 			for (;;) {
2f30c                 | LR__4555
2f30c     01 30 06 F1 | 	add	local06, #1
2f310     18 2A 06 F1 | 	add	local03, #24
2f314     15 2F 02 FB | 	rdlong	local05, local03
2f318     18 2A 86 F1 | 	sub	local03, #24
2f31c     17 31 12 F2 | 	cmp	local06, local05 wc
2f320     02 30 06 36 |  if_ae	mov	local06, #2
2f324     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
2f328     00 FA 05 16 |  if_a	mov	result1, #0
2f32c     CC 00 90 1D |  if_a	jmp	#LR__4561
2f330     18 15 02 F6 | 	mov	arg02, local06
2f334     13 13 02 F6 | 	mov	arg01, local01
2f338     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2f33c     FD 32 0A F6 | 	mov	local07, result1 wz
2f340     24 00 90 AD |  if_e	jmp	#LR__4556
2f344     01 32 0E F2 | 	cmp	local07, #1 wz
2f348     FF FF 7F 5F 
2f34c     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
2f350     19 FB 01 A6 |  if_e	mov	result1, local07
2f354     A4 00 90 AD |  if_e	jmp	#LR__4561
2f358     16 31 0A F2 | 	cmp	local06, local04 wz
2f35c     00 FA 05 A6 |  if_e	mov	result1, #0
2f360     98 00 90 AD |  if_e	jmp	#LR__4561
2f364     A4 FF 9F FD | 	jmp	#LR__4555
2f368                 | LR__4556
2f368                 | LR__4557
2f368     15 13 02 F6 | 	mov	arg01, local03
2f36c     18 15 02 F6 | 	mov	arg02, local06
2f370     01 16 66 F6 | 	neg	arg03, #1
2f374     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2f378     FD 34 0A F6 | 	mov	local08, result1 wz
2f37c     1C 00 90 5D |  if_ne	jmp	#LR__4558
2f380     00 28 0E F2 | 	cmp	local02, #0 wz
2f384     14 00 90 AD |  if_e	jmp	#LR__4558
2f388     15 13 02 F6 | 	mov	arg01, local03
2f38c     14 15 02 F6 | 	mov	arg02, local02
2f390     18 17 02 F6 | 	mov	arg03, local06
2f394     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2f398     FD 34 02 F6 | 	mov	local08, result1
2f39c                 | LR__4558
2f39c     00 34 0E F2 | 	cmp	local08, #0 wz
2f3a0     4C 00 90 5D |  if_ne	jmp	#LR__4559
2f3a4     10 2A 06 F1 | 	add	local03, #16
2f3a8     15 31 62 FC | 	wrlong	local06, local03
2f3ac     08 2A 06 F1 | 	add	local03, #8
2f3b0     15 2F 02 FB | 	rdlong	local05, local03
2f3b4     02 2E 86 F1 | 	sub	local05, #2
2f3b8     04 2A 86 F1 | 	sub	local03, #4
2f3bc     15 37 02 FB | 	rdlong	local09, local03
2f3c0     14 2A 86 F1 | 	sub	local03, #20
2f3c4     17 37 1A F2 | 	cmp	local09, local05 wcz
2f3c8     14 2A 06 E1 |  if_be	add	local03, #20
2f3cc     15 37 02 EB |  if_be	rdlong	local09, local03
2f3d0     01 36 86 E1 |  if_be	sub	local09, #1
2f3d4     15 37 62 EC |  if_be	wrlong	local09, local03
2f3d8     14 2A 86 E1 |  if_be	sub	local03, #20
2f3dc     04 2A 06 F1 | 	add	local03, #4
2f3e0     15 2F C2 FA | 	rdbyte	local05, local03
2f3e4     01 2E 46 F5 | 	or	local05, #1
2f3e8     15 2F 42 FC | 	wrbyte	local05, local03
2f3ec     08 00 90 FD | 	jmp	#LR__4560
2f3f0                 | LR__4559
2f3f0     01 34 0E F2 | 	cmp	local08, #1 wz
2f3f4     01 30 C6 F6 | 	negz	local06, #1
2f3f8                 | LR__4560
2f3f8                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2f3f8                 | ' 	}
2f3f8                 | ' 
2f3f8                 | ' 	return ncl;
2f3f8     18 FB 01 F6 | 	mov	result1, local06
2f3fc                 | LR__4561
2f3fc     A7 F0 03 F6 | 	mov	ptra, fp
2f400     B2 00 A0 FD | 	call	#popregs_
2f404                 | _fatfs_cc_create_chain_ret
2f404     2D 00 64 FD | 	ret
2f408                 | 
2f408                 | _fatfs_cc_dir_clear
2f408     06 4A 05 F6 | 	mov	COUNT_, #6
2f40c     A8 00 A0 FD | 	call	#pushregs_
2f410     09 27 02 F6 | 	mov	local01, arg01
2f414     0A 29 02 F6 | 	mov	local02, arg02
2f418     13 13 02 F6 | 	mov	arg01, local01
2f41c     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2f420     00 FA 0D F2 | 	cmp	result1, #0 wz
2f424     01 FA 05 56 |  if_ne	mov	result1, #1
2f428     90 00 90 5D |  if_ne	jmp	#LR__4572
2f42c     13 13 02 F6 | 	mov	arg01, local01
2f430     14 15 02 F6 | 	mov	arg02, local02
2f434     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2f438     FD 2A 02 F6 | 	mov	local03, result1
2f43c     30 26 06 F1 | 	add	local01, #48
2f440     13 2B 62 FC | 	wrlong	local03, local01
2f444     04 26 06 F1 | 	add	local01, #4
2f448     13 13 02 F6 | 	mov	arg01, local01
2f44c     00 14 06 F6 | 	mov	arg02, #0
2f450     09 16 C6 F9 | 	decod	arg03, #9
2f454     98 00 A0 FD | 	call	#\builtin_bytefill_
2f458     13 2D 02 F6 | 	mov	local04, local01
2f45c                 | ' #line 1667 "ff.c"
2f45c                 | ' 	{
2f45c                 | ' 		ibuf = fs->win; szb = 1;
2f45c                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2f45c     00 2E 06 F6 | 	mov	local05, #0
2f460     34 26 86 F1 | 	sub	local01, #52
2f464                 | LR__4570
2f464     0A 26 06 F1 | 	add	local01, #10
2f468     13 31 E2 FA | 	rdword	local06, local01
2f46c     0A 26 86 F1 | 	sub	local01, #10
2f470     18 2F 12 F2 | 	cmp	local05, local06 wc
2f474     2C 00 90 3D |  if_ae	jmp	#LR__4571
2f478     01 26 06 F1 | 	add	local01, #1
2f47c     13 13 C2 FA | 	rdbyte	arg01, local01
2f480     01 26 86 F1 | 	sub	local01, #1
2f484     16 15 02 F6 | 	mov	arg02, local04
2f488     15 17 02 F6 | 	mov	arg03, local03
2f48c     17 17 02 F1 | 	add	arg03, local05
2f490     01 18 06 F6 | 	mov	arg04, #1
2f494     9C EF BF FD | 	call	#_fatfs_cc_disk_write
2f498     00 FA 0D F2 | 	cmp	result1, #0 wz
2f49c     01 2E 06 A1 |  if_e	add	local05, #1
2f4a0     C0 FF 9F AD |  if_e	jmp	#LR__4570
2f4a4                 | LR__4571
2f4a4                 | ' 	}
2f4a4                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2f4a4     0A 26 06 F1 | 	add	local01, #10
2f4a8     13 2D E2 FA | 	rdword	local04, local01
2f4ac     16 2F 0A F2 | 	cmp	local05, local04 wz
2f4b0     00 30 06 A6 |  if_e	mov	local06, #0
2f4b4     01 30 06 56 |  if_ne	mov	local06, #1
2f4b8     18 FB 01 F6 | 	mov	result1, local06
2f4bc                 | LR__4572
2f4bc     A7 F0 03 F6 | 	mov	ptra, fp
2f4c0     B2 00 A0 FD | 	call	#popregs_
2f4c4                 | _fatfs_cc_dir_clear_ret
2f4c4     2D 00 64 FD | 	ret
2f4c8                 | 
2f4c8                 | _fatfs_cc_dir_sdi
2f4c8     06 4A 05 F6 | 	mov	COUNT_, #6
2f4cc     A8 00 A0 FD | 	call	#pushregs_
2f4d0     09 27 02 F6 | 	mov	local01, arg01
2f4d4     0A 29 02 F6 | 	mov	local02, arg02
2f4d8     13 2B 02 FB | 	rdlong	local03, local01
2f4dc     00 10 00 FF 
2f4e0     00 28 16 F2 | 	cmp	local02, ##2097152 wc
2f4e4     1F 28 CE C7 |  if_b	test	local02, #31 wz
2f4e8                 | ' 		return FR_INT_ERR;
2f4e8     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
2f4ec     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4586
2f4f0     10 26 06 F1 | 	add	local01, #16
2f4f4     13 29 62 FC | 	wrlong	local02, local01
2f4f8     08 26 86 F1 | 	sub	local01, #8
2f4fc     13 2D 0A FB | 	rdlong	local04, local01 wz
2f500     08 26 86 F1 | 	sub	local01, #8
2f504     15 2F C2 AA |  if_e	rdbyte	local05, local03
2f508     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
2f50c     28 2A 06 21 |  if_nc_and_z	add	local03, #40
2f510     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
2f514     28 2A 86 21 |  if_nc_and_z	sub	local03, #40
2f518     00 2C 0E F2 | 	cmp	local04, #0 wz
2f51c     3C 00 90 5D |  if_ne	jmp	#LR__4580
2f520     14 2F 02 F6 | 	mov	local05, local02
2f524     05 2E 46 F0 | 	shr	local05, #5
2f528     08 2A 06 F1 | 	add	local03, #8
2f52c     15 15 E2 FA | 	rdword	arg02, local03
2f530     08 2A 86 F1 | 	sub	local03, #8
2f534     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2f538     02 FA 05 36 |  if_ae	mov	result1, #2
2f53c     E4 00 90 3D |  if_ae	jmp	#LR__4586
2f540     28 2A 06 F1 | 	add	local03, #40
2f544     15 2F 02 FB | 	rdlong	local05, local03
2f548     28 2A 86 F1 | 	sub	local03, #40
2f54c     18 26 06 F1 | 	add	local01, #24
2f550     13 2F 62 FC | 	wrlong	local05, local01
2f554     18 26 86 F1 | 	sub	local01, #24
2f558     7C 00 90 FD | 	jmp	#LR__4585
2f55c                 | LR__4580
2f55c     0A 2A 06 F1 | 	add	local03, #10
2f560     15 31 E2 FA | 	rdword	local06, local03
2f564     0A 2A 86 F1 | 	sub	local03, #10
2f568     09 30 66 F0 | 	shl	local06, #9
2f56c                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2f56c                 | ' 		while (ofs >= csz) {
2f56c                 | LR__4581
2f56c     18 29 12 F2 | 	cmp	local02, local06 wc
2f570     4C 00 90 CD |  if_b	jmp	#LR__4584
2f574     13 13 02 F6 | 	mov	arg01, local01
2f578     16 15 02 F6 | 	mov	arg02, local04
2f57c     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2f580     FD 2C 02 F6 | 	mov	local04, result1
2f584     FF FF 7F FF 
2f588     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2f58c     01 FA 05 A6 |  if_e	mov	result1, #1
2f590     90 00 90 AD |  if_e	jmp	#LR__4586
2f594     02 2C 16 F2 | 	cmp	local04, #2 wc
2f598     14 00 90 CD |  if_b	jmp	#LR__4582
2f59c     18 2A 06 F1 | 	add	local03, #24
2f5a0     15 2F 02 FB | 	rdlong	local05, local03
2f5a4     18 2A 86 F1 | 	sub	local03, #24
2f5a8     17 2D 12 F2 | 	cmp	local04, local05 wc
2f5ac     08 00 90 CD |  if_b	jmp	#LR__4583
2f5b0                 | LR__4582
2f5b0     02 FA 05 F6 | 	mov	result1, #2
2f5b4     6C 00 90 FD | 	jmp	#LR__4586
2f5b8                 | LR__4583
2f5b8     18 29 82 F1 | 	sub	local02, local06
2f5bc     AC FF 9F FD | 	jmp	#LR__4581
2f5c0                 | LR__4584
2f5c0     15 13 02 F6 | 	mov	arg01, local03
2f5c4     16 15 02 F6 | 	mov	arg02, local04
2f5c8     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2f5cc     18 26 06 F1 | 	add	local01, #24
2f5d0     13 FB 61 FC | 	wrlong	result1, local01
2f5d4     18 26 86 F1 | 	sub	local01, #24
2f5d8                 | LR__4585
2f5d8     14 26 06 F1 | 	add	local01, #20
2f5dc     13 2D 62 FC | 	wrlong	local04, local01
2f5e0     04 26 06 F1 | 	add	local01, #4
2f5e4     13 2F 0A FB | 	rdlong	local05, local01 wz
2f5e8     18 26 86 F1 | 	sub	local01, #24
2f5ec     02 FA 05 A6 |  if_e	mov	result1, #2
2f5f0     30 00 90 AD |  if_e	jmp	#LR__4586
2f5f4     14 31 02 F6 | 	mov	local06, local02
2f5f8     09 30 46 F0 | 	shr	local06, #9
2f5fc     18 26 06 F1 | 	add	local01, #24
2f600     13 2F 02 FB | 	rdlong	local05, local01
2f604     18 2F 02 F1 | 	add	local05, local06
2f608     13 2F 62 FC | 	wrlong	local05, local01
2f60c     34 2A 06 F1 | 	add	local03, #52
2f610     FF 29 06 F5 | 	and	local02, #511
2f614     14 2B 02 F1 | 	add	local03, local02
2f618     04 26 06 F1 | 	add	local01, #4
2f61c     13 2B 62 FC | 	wrlong	local03, local01
2f620                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2f620                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2f620                 | ' 
2f620                 | ' 	return FR_OK;
2f620     00 FA 05 F6 | 	mov	result1, #0
2f624                 | LR__4586
2f624     A7 F0 03 F6 | 	mov	ptra, fp
2f628     B2 00 A0 FD | 	call	#popregs_
2f62c                 | _fatfs_cc_dir_sdi_ret
2f62c     2D 00 64 FD | 	ret
2f630                 | 
2f630                 | _fatfs_cc_dir_next
2f630     05 4A 05 F6 | 	mov	COUNT_, #5
2f634     A8 00 A0 FD | 	call	#pushregs_
2f638     09 27 02 F6 | 	mov	local01, arg01
2f63c     0A 29 02 F6 | 	mov	local02, arg02
2f640     13 2B 02 FB | 	rdlong	local03, local01
2f644     10 26 06 F1 | 	add	local01, #16
2f648     13 2D 02 FB | 	rdlong	local04, local01
2f64c     10 26 86 F1 | 	sub	local01, #16
2f650     20 2C 06 F1 | 	add	local04, #32
2f654     00 10 00 FF 
2f658     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
2f65c     18 26 06 31 |  if_ae	add	local01, #24
2f660     13 01 68 3C |  if_ae	wrlong	#0, local01
2f664     18 26 86 31 |  if_ae	sub	local01, #24
2f668     18 26 06 F1 | 	add	local01, #24
2f66c     13 15 0A FB | 	rdlong	arg02, local01 wz
2f670     18 26 86 F1 | 	sub	local01, #24
2f674     04 FA 05 A6 |  if_e	mov	result1, #4
2f678     64 01 90 AD |  if_e	jmp	#LR__4595
2f67c     FF 2D CE F7 | 	test	local04, #511 wz
2f680     3C 01 90 5D |  if_ne	jmp	#LR__4594
2f684     18 26 06 F1 | 	add	local01, #24
2f688     13 15 02 FB | 	rdlong	arg02, local01
2f68c     01 14 06 F1 | 	add	arg02, #1
2f690     13 15 62 FC | 	wrlong	arg02, local01
2f694     04 26 86 F1 | 	sub	local01, #4
2f698     13 15 0A FB | 	rdlong	arg02, local01 wz
2f69c     14 26 86 F1 | 	sub	local01, #20
2f6a0     2C 00 90 5D |  if_ne	jmp	#LR__4590
2f6a4     16 15 02 F6 | 	mov	arg02, local04
2f6a8     05 14 46 F0 | 	shr	arg02, #5
2f6ac     08 2A 06 F1 | 	add	local03, #8
2f6b0     15 29 E2 FA | 	rdword	local02, local03
2f6b4     08 2A 86 F1 | 	sub	local03, #8
2f6b8     14 15 12 F2 | 	cmp	arg02, local02 wc
2f6bc     18 26 06 31 |  if_ae	add	local01, #24
2f6c0     13 01 68 3C |  if_ae	wrlong	#0, local01
2f6c4                 | ' 				dp->sect = 0; return FR_NO_FILE;
2f6c4     04 FA 05 36 |  if_ae	mov	result1, #4
2f6c8     14 01 90 3D |  if_ae	jmp	#LR__4595
2f6cc     F0 00 90 FD | 	jmp	#LR__4593
2f6d0                 | LR__4590
2f6d0     16 13 02 F6 | 	mov	arg01, local04
2f6d4     09 12 46 F0 | 	shr	arg01, #9
2f6d8     0A 2A 06 F1 | 	add	local03, #10
2f6dc     15 15 E2 FA | 	rdword	arg02, local03
2f6e0     0A 2A 86 F1 | 	sub	local03, #10
2f6e4     01 14 86 F1 | 	sub	arg02, #1
2f6e8     0A 13 CA F7 | 	test	arg01, arg02 wz
2f6ec     D0 00 90 5D |  if_ne	jmp	#LR__4592
2f6f0     13 13 02 F6 | 	mov	arg01, local01
2f6f4     14 26 06 F1 | 	add	local01, #20
2f6f8     13 15 02 FB | 	rdlong	arg02, local01
2f6fc     14 26 86 F1 | 	sub	local01, #20
2f700     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2f704     FD 2E 02 F6 | 	mov	local05, result1
2f708     02 2E 16 F2 | 	cmp	local05, #2 wc
2f70c     02 FA 05 C6 |  if_b	mov	result1, #2
2f710     CC 00 90 CD |  if_b	jmp	#LR__4595
2f714     FF FF 7F FF 
2f718     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2f71c     01 FA 05 A6 |  if_e	mov	result1, #1
2f720     BC 00 90 AD |  if_e	jmp	#LR__4595
2f724     18 2A 06 F1 | 	add	local03, #24
2f728     15 15 02 FB | 	rdlong	arg02, local03
2f72c     18 2A 86 F1 | 	sub	local03, #24
2f730     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2f734     68 00 90 CD |  if_b	jmp	#LR__4591
2f738     00 28 0E F2 | 	cmp	local02, #0 wz
2f73c     18 26 06 A1 |  if_e	add	local01, #24
2f740     13 01 68 AC |  if_e	wrlong	#0, local01
2f744                 | ' 						dp->sect = 0; return FR_NO_FILE;
2f744     04 FA 05 A6 |  if_e	mov	result1, #4
2f748     94 00 90 AD |  if_e	jmp	#LR__4595
2f74c     13 13 02 F6 | 	mov	arg01, local01
2f750     14 26 06 F1 | 	add	local01, #20
2f754     13 15 02 FB | 	rdlong	arg02, local01
2f758     14 26 86 F1 | 	sub	local01, #20
2f75c     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2f760     FD 2E 0A F6 | 	mov	local05, result1 wz
2f764     07 FA 05 A6 |  if_e	mov	result1, #7
2f768     74 00 90 AD |  if_e	jmp	#LR__4595
2f76c     01 2E 0E F2 | 	cmp	local05, #1 wz
2f770     02 FA 05 A6 |  if_e	mov	result1, #2
2f774     68 00 90 AD |  if_e	jmp	#LR__4595
2f778     FF FF 7F FF 
2f77c     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2f780     01 FA 05 A6 |  if_e	mov	result1, #1
2f784     58 00 90 AD |  if_e	jmp	#LR__4595
2f788     17 15 02 F6 | 	mov	arg02, local05
2f78c     15 13 02 F6 | 	mov	arg01, local03
2f790     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2f794     00 FA 0D F2 | 	cmp	result1, #0 wz
2f798     01 FA 05 56 |  if_ne	mov	result1, #1
2f79c     40 00 90 5D |  if_ne	jmp	#LR__4595
2f7a0                 | LR__4591
2f7a0     14 26 06 F1 | 	add	local01, #20
2f7a4     13 2F 62 FC | 	wrlong	local05, local01
2f7a8     15 13 02 F6 | 	mov	arg01, local03
2f7ac     17 15 02 F6 | 	mov	arg02, local05
2f7b0     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2f7b4     04 26 06 F1 | 	add	local01, #4
2f7b8     13 FB 61 FC | 	wrlong	result1, local01
2f7bc     18 26 86 F1 | 	sub	local01, #24
2f7c0                 | LR__4592
2f7c0                 | LR__4593
2f7c0                 | LR__4594
2f7c0     10 26 06 F1 | 	add	local01, #16
2f7c4     13 2D 62 FC | 	wrlong	local04, local01
2f7c8     34 2A 06 F1 | 	add	local03, #52
2f7cc     FF 2D 06 F5 | 	and	local04, #511
2f7d0     16 2B 02 F1 | 	add	local03, local04
2f7d4     0C 26 06 F1 | 	add	local01, #12
2f7d8     13 2B 62 FC | 	wrlong	local03, local01
2f7dc                 | ' #line 1771 "ff.c"
2f7dc                 | ' 				}
2f7dc                 | ' 				dp->clust = clst;
2f7dc                 | ' 				dp->sect = clst2sect(fs, clst);
2f7dc                 | ' 			}
2f7dc                 | ' 		}
2f7dc                 | ' 	}
2f7dc                 | ' 	dp->dptr = ofs;
2f7dc                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2f7dc                 | ' 
2f7dc                 | ' 	return FR_OK;
2f7dc     00 FA 05 F6 | 	mov	result1, #0
2f7e0                 | LR__4595
2f7e0     A7 F0 03 F6 | 	mov	ptra, fp
2f7e4     B2 00 A0 FD | 	call	#popregs_
2f7e8                 | _fatfs_cc_dir_next_ret
2f7e8     2D 00 64 FD | 	ret
2f7ec                 | 
2f7ec                 | _fatfs_cc_dir_alloc
2f7ec     08 4A 05 F6 | 	mov	COUNT_, #8
2f7f0     A8 00 A0 FD | 	call	#pushregs_
2f7f4     09 27 02 F6 | 	mov	local01, arg01
2f7f8     0A 29 02 F6 | 	mov	local02, arg02
2f7fc     13 2B 02 FB | 	rdlong	local03, local01
2f800     13 13 02 F6 | 	mov	arg01, local01
2f804     00 14 06 F6 | 	mov	arg02, #0
2f808     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2f80c     FD 2C 0A F6 | 	mov	local04, result1 wz
2f810     70 00 90 5D |  if_ne	jmp	#LR__4604
2f814     00 2E 06 F6 | 	mov	local05, #0
2f818                 | ' 		n = 0;
2f818                 | ' 		do {
2f818                 | LR__4600
2f818     18 26 06 F1 | 	add	local01, #24
2f81c     13 15 02 FB | 	rdlong	arg02, local01
2f820     18 26 86 F1 | 	sub	local01, #24
2f824     15 13 02 F6 | 	mov	arg01, local03
2f828     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2f82c     FD 2C 0A F6 | 	mov	local04, result1 wz
2f830     50 00 90 5D |  if_ne	jmp	#LR__4603
2f834     1C 26 06 F1 | 	add	local01, #28
2f838     13 31 02 FB | 	rdlong	local06, local01
2f83c     1C 26 86 F1 | 	sub	local01, #28
2f840     18 31 C2 FA | 	rdbyte	local06, local06
2f844     E5 30 0E F2 | 	cmp	local06, #229 wz
2f848     1C 26 06 51 |  if_ne	add	local01, #28
2f84c     13 33 02 5B |  if_ne	rdlong	local07, local01
2f850     1C 26 86 51 |  if_ne	sub	local01, #28
2f854     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
2f858     10 00 90 5D |  if_ne	jmp	#LR__4601
2f85c     01 2E 06 F1 | 	add	local05, #1
2f860     14 2F 0A F2 | 	cmp	local05, local02 wz
2f864     1C 00 90 AD |  if_e	jmp	#LR__4603
2f868     04 00 90 FD | 	jmp	#LR__4602
2f86c                 | LR__4601
2f86c     00 2E 06 F6 | 	mov	local05, #0
2f870                 | LR__4602
2f870     13 13 02 F6 | 	mov	arg01, local01
2f874     01 14 06 F6 | 	mov	arg02, #1
2f878     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2f87c     FD 2C 0A F6 | 	mov	local04, result1 wz
2f880     94 FF 9F AD |  if_e	jmp	#LR__4600
2f884                 | LR__4603
2f884                 | LR__4604
2f884     04 2C 0E F2 | 	cmp	local04, #4 wz
2f888     07 2C 06 A6 |  if_e	mov	local04, #7
2f88c                 | ' 	return res;
2f88c     16 FB 01 F6 | 	mov	result1, local04
2f890     A7 F0 03 F6 | 	mov	ptra, fp
2f894     B2 00 A0 FD | 	call	#popregs_
2f898                 | _fatfs_cc_dir_alloc_ret
2f898     2D 00 64 FD | 	ret
2f89c                 | 
2f89c                 | _fatfs_cc_ld_clust
2f89c     09 01 02 F6 | 	mov	_var01, arg01
2f8a0     0A 13 02 F6 | 	mov	arg01, arg02
2f8a4     1A 12 06 F1 | 	add	arg01, #26
2f8a8                 | ' {
2f8a8                 | ' 
2f8a8                 | ' 	return *((WORD*)ptr);
2f8a8     09 FB E1 FA | 	rdword	result1, arg01
2f8ac     FD 12 32 F9 | 	getword	arg01, result1, #0
2f8b0     00 01 C2 FA | 	rdbyte	_var01, _var01
2f8b4     03 00 0E F2 | 	cmp	_var01, #3 wz
2f8b8     14 14 06 A1 |  if_e	add	arg02, #20
2f8bc                 | ' {
2f8bc                 | ' 
2f8bc                 | ' 	return *((WORD*)ptr);
2f8bc     0A FB E1 AA |  if_e	rdword	result1, arg02
2f8c0     10 FA 65 A0 |  if_e	shl	result1, #16
2f8c4     FD 12 42 A5 |  if_e	or	arg01, result1
2f8c8                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2f8c8                 | ' 	}
2f8c8                 | ' 
2f8c8                 | ' 	return cl;
2f8c8     09 FB 01 F6 | 	mov	result1, arg01
2f8cc                 | _fatfs_cc_ld_clust_ret
2f8cc     2D 00 64 FD | 	ret
2f8d0                 | 
2f8d0                 | _fatfs_cc_st_clust
2f8d0     09 01 02 F6 | 	mov	_var01, arg01
2f8d4     0A 13 02 F6 | 	mov	arg01, arg02
2f8d8     1A 12 06 F1 | 	add	arg01, #26
2f8dc     09 17 52 FC | 	wrword	arg03, arg01
2f8e0     00 01 C2 FA | 	rdbyte	_var01, _var01
2f8e4     03 00 0E F2 | 	cmp	_var01, #3 wz
2f8e8     14 14 06 A1 |  if_e	add	arg02, #20
2f8ec     10 16 46 A0 |  if_e	shr	arg03, #16
2f8f0     0A 17 52 AC |  if_e	wrword	arg03, arg02
2f8f4                 | _fatfs_cc_st_clust_ret
2f8f4     2D 00 64 FD | 	ret
2f8f8                 | 
2f8f8                 | _fatfs_cc_cmp_lfn
2f8f8     07 4A 05 F6 | 	mov	COUNT_, #7
2f8fc     A8 00 A0 FD | 	call	#pushregs_
2f900     09 27 02 F6 | 	mov	local01, arg01
2f904     0A 13 02 F6 | 	mov	arg01, arg02
2f908     1A 12 06 F1 | 	add	arg01, #26
2f90c                 | ' {
2f90c                 | ' 
2f90c                 | ' 	return *((WORD*)ptr);
2f90c     09 FB E9 FA | 	rdword	result1, arg01 wz
2f910     00 FA 05 56 |  if_ne	mov	result1, #0
2f914     E0 00 90 5D |  if_ne	jmp	#LR__4616
2f918     0A 29 C2 FA | 	rdbyte	local02, arg02
2f91c     3F 28 06 F5 | 	and	local02, #63
2f920     01 28 86 F1 | 	sub	local02, #1
2f924     0D 28 06 FD | 	qmul	local02, #13
2f928                 | ' 
2f928                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2f928                 | ' 
2f928                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2f928     01 2A 06 F6 | 	mov	local03, #1
2f92c     00 2C 06 F6 | 	mov	local04, #0
2f930     18 2E 62 FD | 	getqx	local05
2f934                 | LR__4610
2f934     0D 2C 16 F2 | 	cmp	local04, #13 wc
2f938     9C 00 90 3D |  if_ae	jmp	#LR__4615
2f93c     0A 13 02 F6 | 	mov	arg01, arg02
2f940     16 29 02 F6 | 	mov	local02, local04
2f944     01 00 00 FF 
2f948     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2f94c     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2f950     14 29 C2 FA | 	rdbyte	local02, local02
2f954     01 28 06 FA | 	mul	local02, #1
2f958     14 13 02 F1 | 	add	arg01, local02
2f95c     01 00 00 FF 
2f960     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2f964                 | ' {
2f964                 | ' 
2f964                 | ' 	return *((WORD*)ptr);
2f964     09 FB E1 FA | 	rdword	result1, arg01
2f968     FD 30 02 F6 | 	mov	local06, result1
2f96c     15 29 02 F6 | 	mov	local02, local03
2f970     0F 28 4E F7 | 	zerox	local02, #15 wz
2f974     44 00 90 AD |  if_e	jmp	#LR__4613
2f978     00 2F 16 F2 | 	cmp	local05, #256 wc
2f97c     2C 00 90 3D |  if_ae	jmp	#LR__4611
2f980     18 13 32 F9 | 	getword	arg01, local06, #0
2f984     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2f988     FD 28 02 F6 | 	mov	local02, result1
2f98c     17 2B 02 F6 | 	mov	local03, local05
2f990     01 2A 66 F0 | 	shl	local03, #1
2f994     13 2B 02 F1 | 	add	local03, local01
2f998     15 13 E2 FA | 	rdword	arg01, local03
2f99c     01 2E 06 F1 | 	add	local05, #1
2f9a0     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2f9a4     FD 28 0A F2 | 	cmp	local02, result1 wz
2f9a8     08 00 90 AD |  if_e	jmp	#LR__4612
2f9ac                 | LR__4611
2f9ac                 | ' 				return 0;
2f9ac     00 FA 05 F6 | 	mov	result1, #0
2f9b0     44 00 90 FD | 	jmp	#LR__4616
2f9b4                 | LR__4612
2f9b4     18 2B 02 F6 | 	mov	local03, local06
2f9b8     14 00 90 FD | 	jmp	#LR__4614
2f9bc                 | LR__4613
2f9bc     18 31 32 F9 | 	getword	local06, local06, #0
2f9c0     7F 00 00 FF 
2f9c4     FF 31 0E F2 | 	cmp	local06, ##65535 wz
2f9c8     00 FA 05 56 |  if_ne	mov	result1, #0
2f9cc     28 00 90 5D |  if_ne	jmp	#LR__4616
2f9d0                 | LR__4614
2f9d0     01 2C 06 F1 | 	add	local04, #1
2f9d4     5C FF 9F FD | 	jmp	#LR__4610
2f9d8                 | LR__4615
2f9d8     0A 29 C2 FA | 	rdbyte	local02, arg02
2f9dc     40 28 CE F7 | 	test	local02, #64 wz
2f9e0     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2f9e4     01 2E 66 50 |  if_ne	shl	local05, #1
2f9e8     13 2F 02 51 |  if_ne	add	local05, local01
2f9ec     17 33 EA 5A |  if_ne	rdword	local07, local05 wz
2f9f0     00 FA 05 56 |  if_ne	mov	result1, #0
2f9f4                 | ' 
2f9f4                 | ' 	return 1;
2f9f4     01 FA 05 A6 |  if_e	mov	result1, #1
2f9f8                 | LR__4616
2f9f8     A7 F0 03 F6 | 	mov	ptra, fp
2f9fc     B2 00 A0 FD | 	call	#popregs_
2fa00                 | _fatfs_cc_cmp_lfn_ret
2fa00     2D 00 64 FD | 	ret
2fa04                 | 
2fa04                 | _fatfs_cc_pick_lfn
2fa04     09 01 02 F6 | 	mov	_var01, arg01
2fa08     0A 13 02 F6 | 	mov	arg01, arg02
2fa0c     1A 12 06 F1 | 	add	arg01, #26
2fa10                 | ' {
2fa10                 | ' 
2fa10                 | ' 	return *((WORD*)ptr);
2fa10     09 FB E9 FA | 	rdword	result1, arg01 wz
2fa14     00 FA 05 56 |  if_ne	mov	result1, #0
2fa18     D4 00 90 5D |  if_ne	jmp	#LR__4625
2fa1c     0A 03 C2 FA | 	rdbyte	_var02, arg02
2fa20     40 02 26 F5 | 	andn	_var02, #64
2fa24     01 02 86 F1 | 	sub	_var02, #1
2fa28     0D 02 06 FD | 	qmul	_var02, #13
2fa2c                 | ' 
2fa2c                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2fa2c                 | ' 
2fa2c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2fa2c     01 04 06 F6 | 	mov	_var03, #1
2fa30     00 06 06 F6 | 	mov	_var04, #0
2fa34     18 08 62 FD | 	getqx	_var05
2fa38                 | LR__4620
2fa38     0D 06 16 F2 | 	cmp	_var04, #13 wc
2fa3c     80 00 90 3D |  if_ae	jmp	#LR__4623
2fa40     0A 13 02 F6 | 	mov	arg01, arg02
2fa44     03 03 02 F6 | 	mov	_var02, _var04
2fa48     01 00 00 FF 
2fa4c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2fa50     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2fa54     01 03 C2 FA | 	rdbyte	_var02, _var02
2fa58     01 02 06 FA | 	mul	_var02, #1
2fa5c     01 13 02 F1 | 	add	arg01, _var02
2fa60     01 00 00 FF 
2fa64     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2fa68                 | ' {
2fa68                 | ' 
2fa68                 | ' 	return *((WORD*)ptr);
2fa68     09 FB E1 FA | 	rdword	result1, arg01
2fa6c     FD 0A 02 F6 | 	mov	_var06, result1
2fa70     02 03 02 F6 | 	mov	_var02, _var03
2fa74     0F 02 4E F7 | 	zerox	_var02, #15 wz
2fa78     28 00 90 AD |  if_e	jmp	#LR__4621
2fa7c     00 09 16 F2 | 	cmp	_var05, #256 wc
2fa80     00 FA 05 36 |  if_ae	mov	result1, #0
2fa84     68 00 90 3D |  if_ae	jmp	#LR__4625
2fa88     04 03 02 F6 | 	mov	_var02, _var05
2fa8c     01 02 66 F0 | 	shl	_var02, #1
2fa90     00 03 02 F1 | 	add	_var02, _var01
2fa94     05 05 02 F6 | 	mov	_var03, _var06
2fa98     01 05 52 FC | 	wrword	_var03, _var02
2fa9c     01 08 06 F1 | 	add	_var05, #1
2faa0     14 00 90 FD | 	jmp	#LR__4622
2faa4                 | LR__4621
2faa4     05 0B 32 F9 | 	getword	_var06, _var06, #0
2faa8     7F 00 00 FF 
2faac     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2fab0     00 FA 05 56 |  if_ne	mov	result1, #0
2fab4     38 00 90 5D |  if_ne	jmp	#LR__4625
2fab8                 | LR__4622
2fab8     01 06 06 F1 | 	add	_var04, #1
2fabc     78 FF 9F FD | 	jmp	#LR__4620
2fac0                 | LR__4623
2fac0     0A 03 C2 FA | 	rdbyte	_var02, arg02
2fac4     40 02 CE F7 | 	test	_var02, #64 wz
2fac8     02 0D 02 56 |  if_ne	mov	_var07, _var03
2facc     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
2fad0     18 00 90 AD |  if_e	jmp	#LR__4624
2fad4     00 09 16 F2 | 	cmp	_var05, #256 wc
2fad8     00 FA 05 36 |  if_ae	mov	result1, #0
2fadc     10 00 90 3D |  if_ae	jmp	#LR__4625
2fae0     01 08 66 F0 | 	shl	_var05, #1
2fae4     00 09 02 F1 | 	add	_var05, _var01
2fae8     04 01 58 FC | 	wrword	#0, _var05
2faec                 | LR__4624
2faec                 | ' 		lfnbuf[i] = 0;
2faec                 | ' 	}
2faec                 | ' 
2faec                 | ' 	return 1;
2faec     01 FA 05 F6 | 	mov	result1, #1
2faf0                 | LR__4625
2faf0                 | _fatfs_cc_pick_lfn_ret
2faf0     2D 00 64 FD | 	ret
2faf4                 | 
2faf4                 | _fatfs_cc_put_lfn
2faf4     0D 14 06 F1 | 	add	arg02, #13
2faf8     0A 19 42 FC | 	wrbyte	arg04, arg02
2fafc     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2fb00     01 18 86 F1 | 	sub	arg04, #1
2fb04     0D 18 06 FD | 	qmul	arg04, #13
2fb08     09 01 02 F6 | 	mov	_var01, arg01
2fb0c     02 14 86 F1 | 	sub	arg02, #2
2fb10     0A 1F 48 FC | 	wrbyte	#15, arg02
2fb14     01 14 06 F1 | 	add	arg02, #1
2fb18     0A 01 48 FC | 	wrbyte	#0, arg02
2fb1c     0C 14 86 F1 | 	sub	arg02, #12
2fb20     0A 13 02 F6 | 	mov	arg01, arg02
2fb24     1A 12 06 F1 | 	add	arg01, #26
2fb28     09 01 58 FC | 	wrword	#0, arg01
2fb2c     00 02 06 F6 | 	mov	_var02, #0
2fb30     00 04 06 F6 | 	mov	_var03, #0
2fb34                 | ' 	BYTE* dir,
2fb34                 | ' 	BYTE ord,
2fb34                 | ' 	BYTE sum
2fb34                 | ' )
2fb34                 | ' {
2fb34                 | ' 	UINT i, s;
2fb34                 | ' 	WCHAR wc;
2fb34                 | ' 
2fb34                 | ' 
2fb34                 | ' 	dir[ 13 ] = sum;
2fb34                 | ' 	dir[ 11 ] =  0x0F ;
2fb34                 | ' 	dir[ 12 ] = 0;
2fb34                 | ' 	st_word(dir +  26 , 0);
2fb34                 | ' 
2fb34                 | ' 	i = (ord - 1) * 13;
2fb34                 | ' 	s = wc = 0;
2fb34                 | ' 	do {
2fb34     01 00 00 FF 
2fb38     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2fb3c     18 06 62 FD | 	getqx	_var04
2fb40     97 2A 48 FB | 	callpa	#(@LR__4631-@LR__4630)>>2,fcache_load_ptr_
2fb44                 | LR__4630
2fb44     01 19 32 F9 | 	getword	arg04, _var02, #0
2fb48     7F 00 00 FF 
2fb4c     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2fb50     03 13 02 56 |  if_ne	mov	arg01, _var04
2fb54     01 06 06 51 |  if_ne	add	_var04, #1
2fb58     01 12 66 50 |  if_ne	shl	arg01, #1
2fb5c     00 13 02 51 |  if_ne	add	arg01, _var01
2fb60     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2fb64     0A 13 02 F6 | 	mov	arg01, arg02
2fb68     02 19 02 F6 | 	mov	arg04, _var03
2fb6c     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2fb70     0C 19 C2 FA | 	rdbyte	arg04, arg04
2fb74     01 18 06 FA | 	mul	arg04, #1
2fb78     0C 13 02 F1 | 	add	arg01, arg04
2fb7c     09 03 52 FC | 	wrword	_var02, arg01
2fb80     01 19 02 F6 | 	mov	arg04, _var02
2fb84     0F 18 4E F7 | 	zerox	arg04, #15 wz
2fb88     0F 02 CE A9 |  if_e	bmask	_var02, #15
2fb8c     01 04 06 F1 | 	add	_var03, #1
2fb90     0D 04 16 F2 | 	cmp	_var03, #13 wc
2fb94     AC FF 9F CD |  if_b	jmp	#LR__4630
2fb98                 | LR__4631
2fb98     01 00 00 FF 
2fb9c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2fba0     01 03 32 F9 | 	getword	_var02, _var02, #0
2fba4     7F 00 00 FF 
2fba8     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2fbac     01 06 66 50 |  if_ne	shl	_var04, #1
2fbb0     00 07 02 51 |  if_ne	add	_var04, _var01
2fbb4     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2fbb8     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2fbbc     40 16 46 A5 |  if_e	or	arg03, #64
2fbc0     0A 17 42 FC | 	wrbyte	arg03, arg02
2fbc4                 | _fatfs_cc_put_lfn_ret
2fbc4     2D 00 64 FD | 	ret
2fbc8                 | 
2fbc8                 | _fatfs_cc_gen_numname
2fbc8     08 4A 05 F6 | 	mov	COUNT_, #8
2fbcc     A8 00 A0 FD | 	call	#pushregs_
2fbd0     2C F0 07 F1 | 	add	ptra, #44
2fbd4     09 27 02 F6 | 	mov	local01, arg01
2fbd8     0A 29 02 F6 | 	mov	local02, arg02
2fbdc     0B 2B 02 F6 | 	mov	local03, arg03
2fbe0     0C 2D 02 F6 | 	mov	local04, arg04
2fbe4     13 13 02 F6 | 	mov	arg01, local01
2fbe8     14 15 02 F6 | 	mov	arg02, local02
2fbec     0B 16 06 F6 | 	mov	arg03, #11
2fbf0     9C 72 BF FD | 	call	#__system____builtin_memmove
2fbf4     06 2C 16 F2 | 	cmp	local04, #6 wc
2fbf8     48 00 90 CD |  if_b	jmp	#LR__4645
2fbfc     16 2F 02 F6 | 	mov	local05, local04
2fc00     97 1E 48 FB | 	callpa	#(@LR__4643-@LR__4640)>>2,fcache_load_ptr_
2fc04                 | ' 		sreg = seq;
2fc04                 | ' 		while (*lfn) {
2fc04                 | LR__4640
2fc04     15 31 EA FA | 	rdword	local06, local03 wz
2fc08     34 00 90 AD |  if_e	jmp	#LR__4644
2fc0c     15 33 E2 FA | 	rdword	local07, local03
2fc10                 | ' 			wc = *lfn++;
2fc10                 | ' 			for (i = 0; i < 16; i++) {
2fc10     02 2A 06 F1 | 	add	local03, #2
2fc14     10 12 DC FC | 	rep	@LR__4642, #16
2fc18                 | LR__4641
2fc18     01 2E 66 F0 | 	shl	local05, #1
2fc1c     19 31 32 F9 | 	getword	local06, local07, #0
2fc20     01 30 06 F5 | 	and	local06, #1
2fc24     18 2F 02 F1 | 	add	local05, local06
2fc28     19 33 32 F9 | 	getword	local07, local07, #0
2fc2c     01 32 46 F0 | 	shr	local07, #1
2fc30     10 2E 2E F4 | 	testbn	local05, #16 wz
2fc34     88 00 00 5F 
2fc38     21 2E 66 55 |  if_ne	xor	local05, ##69665
2fc3c                 | LR__4642
2fc3c     C4 FF 9F FD | 	jmp	#LR__4640
2fc40                 | LR__4643
2fc40                 | LR__4644
2fc40     17 2D 02 F6 | 	mov	local04, local05
2fc44                 | LR__4645
2fc44     07 32 06 F6 | 	mov	local07, #7
2fc48                 | ' 			}
2fc48                 | ' 		}
2fc48                 | ' 		seq = (UINT)sreg;
2fc48                 | ' 	}
2fc48                 | ' 
2fc48                 | ' 
2fc48                 | ' 	i = 7;
2fc48                 | ' 	do {
2fc48     10 4E 05 F1 | 	add	fp, #16
2fc4c     97 1A 48 FB | 	callpa	#(@LR__4647-@LR__4646)>>2,fcache_load_ptr_
2fc50                 | LR__4646
2fc50     16 2F 42 F8 | 	getnib	local05, local04, #0
2fc54     30 2E 06 F1 | 	add	local05, #48
2fc58     04 2C 46 F0 | 	shr	local04, #4
2fc5c     17 31 E2 F8 | 	getbyte	local06, local05, #0
2fc60     3A 30 16 F2 | 	cmp	local06, #58 wc
2fc64     17 2F E2 38 |  if_ae	getbyte	local05, local05, #0
2fc68     07 2E 06 31 |  if_ae	add	local05, #7
2fc6c     19 31 02 F6 | 	mov	local06, local07
2fc70     01 32 8E F1 | 	sub	local07, #1 wz
2fc74     A7 30 02 F1 | 	add	local06, fp
2fc78     18 2F 42 FC | 	wrbyte	local05, local06
2fc7c     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
2fc80     CC FF 9F 5D |  if_ne	jmp	#LR__4646
2fc84                 | LR__4647
2fc84     19 31 02 F6 | 	mov	local06, local07
2fc88     A7 30 02 F1 | 	add	local06, fp
2fc8c     18 FD 48 FC | 	wrbyte	#126, local06
2fc90                 | ' 	ns[i] = '~';
2fc90                 | ' 
2fc90                 | ' 
2fc90                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2fc90     00 2E 06 F6 | 	mov	local05, #0
2fc94     10 4E 85 F1 | 	sub	fp, #16
2fc98     97 2A 48 FB | 	callpa	#(@LR__4650-@LR__4648)>>2,fcache_load_ptr_
2fc9c                 | LR__4648
2fc9c     19 2F 12 F2 | 	cmp	local05, local07 wc
2fca0     4C 00 90 3D |  if_ae	jmp	#LR__4651
2fca4     17 31 02 F6 | 	mov	local06, local05
2fca8     13 31 02 F1 | 	add	local06, local01
2fcac     18 31 C2 FA | 	rdbyte	local06, local06
2fcb0     20 30 0E F2 | 	cmp	local06, #32 wz
2fcb4     38 00 90 AD |  if_e	jmp	#LR__4651
2fcb8     17 13 02 F6 | 	mov	arg01, local05
2fcbc     13 13 02 F1 | 	add	arg01, local01
2fcc0     09 13 CA FA | 	rdbyte	arg01, arg01 wz
2fcc4     00 FA 05 56 |  if_ne	mov	result1, #0
2fcc8                 | ' 
2fcc8                 | ' 	return 0;
2fcc8     00 FA 05 A6 |  if_e	mov	result1, #0
2fccc     00 FA 0D F2 | 	cmp	result1, #0 wz
2fcd0     14 00 90 AD |  if_e	jmp	#LR__4649
2fcd4     19 31 02 F6 | 	mov	local06, local07
2fcd8     01 30 86 F1 | 	sub	local06, #1
2fcdc     18 2F 0A F2 | 	cmp	local05, local06 wz
2fce0     0C 00 90 AD |  if_e	jmp	#LR__4651
2fce4     01 2E 06 F1 | 	add	local05, #1
2fce8                 | LR__4649
2fce8     01 2E 06 F1 | 	add	local05, #1
2fcec     AC FF 9F FD | 	jmp	#LR__4648
2fcf0                 | LR__4650
2fcf0                 | LR__4651
2fcf0     97 20 48 FB | 	callpa	#(@LR__4655-@LR__4652)>>2,fcache_load_ptr_
2fcf4                 | ' 			j++;
2fcf4                 | ' 		}
2fcf4                 | ' 	}
2fcf4                 | ' 	do {
2fcf4                 | LR__4652
2fcf4     17 31 02 F6 | 	mov	local06, local05
2fcf8     13 31 02 F1 | 	add	local06, local01
2fcfc     08 32 16 F2 | 	cmp	local07, #8 wc
2fd00     01 2E 06 F1 | 	add	local05, #1
2fd04     1C 00 90 3D |  if_ae	jmp	#LR__4653
2fd08     19 2D 02 F6 | 	mov	local04, local07
2fd0c     10 4E 05 F1 | 	add	fp, #16
2fd10     A7 2C 02 F1 | 	add	local04, fp
2fd14     16 35 C2 FA | 	rdbyte	local08, local04
2fd18     01 32 06 F1 | 	add	local07, #1
2fd1c     10 4E 85 F1 | 	sub	fp, #16
2fd20     04 00 90 FD | 	jmp	#LR__4654
2fd24                 | LR__4653
2fd24     20 34 06 F6 | 	mov	local08, #32
2fd28                 | LR__4654
2fd28     18 35 42 FC | 	wrbyte	local08, local06
2fd2c     08 2E 16 F2 | 	cmp	local05, #8 wc
2fd30     C0 FF 9F CD |  if_b	jmp	#LR__4652
2fd34                 | LR__4655
2fd34     A7 F0 03 F6 | 	mov	ptra, fp
2fd38     B2 00 A0 FD | 	call	#popregs_
2fd3c                 | _fatfs_cc_gen_numname_ret
2fd3c     2D 00 64 FD | 	ret
2fd40                 | 
2fd40                 | _fatfs_cc_sum_sfn
2fd40     00 00 06 F6 | 	mov	_var01, #0
2fd44                 | ' )
2fd44                 | ' {
2fd44                 | ' 	BYTE sum = 0;
2fd44                 | ' 	UINT n = 11;
2fd44                 | ' 
2fd44                 | ' 	do {
2fd44     97 12 48 FB | 	callpa	#(@LR__4662-@LR__4660)>>2,fcache_load_ptr_
2fd48                 | LR__4660
2fd48     0B 10 DC FC | 	rep	@LR__4663, #11
2fd4c                 | LR__4661
2fd4c     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2fd50     01 FA 45 F0 | 	shr	result1, #1
2fd54     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2fd58     07 00 66 F0 | 	shl	_var01, #7
2fd5c     00 FB 01 F1 | 	add	result1, _var01
2fd60     09 01 C2 FA | 	rdbyte	_var01, arg01
2fd64     FD 00 02 F1 | 	add	_var01, result1
2fd68     01 12 06 F1 | 	add	arg01, #1
2fd6c                 | LR__4662
2fd6c                 | LR__4663
2fd6c                 | ' 	return sum;
2fd6c     00 FB 01 F6 | 	mov	result1, _var01
2fd70                 | _fatfs_cc_sum_sfn_ret
2fd70     2D 00 64 FD | 	ret
2fd74                 | 
2fd74                 | _fatfs_cc_dir_read
2fd74     0C 4A 05 F6 | 	mov	COUNT_, #12
2fd78     A8 00 A0 FD | 	call	#pushregs_
2fd7c     09 27 02 F6 | 	mov	local01, arg01
2fd80     0A 29 02 F6 | 	mov	local02, arg02
2fd84     04 2A 06 F6 | 	mov	local03, #4
2fd88     13 2D 02 FB | 	rdlong	local04, local01
2fd8c     FF 2E 06 F6 | 	mov	local05, #255
2fd90     FF 30 06 F6 | 	mov	local06, #255
2fd94                 | ' )
2fd94                 | ' {
2fd94                 | ' 	FRESULT res = FR_NO_FILE;
2fd94                 | ' 	FATFS *fs = dp->obj.fs;
2fd94                 | ' 	BYTE attr, b;
2fd94                 | ' 
2fd94                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2fd94                 | ' 
2fd94                 | ' 
2fd94                 | ' 	while (dp->sect) {
2fd94                 | LR__4670
2fd94     18 26 06 F1 | 	add	local01, #24
2fd98     13 FB 09 FB | 	rdlong	result1, local01 wz
2fd9c     18 26 86 F1 | 	sub	local01, #24
2fda0     AC 01 90 AD |  if_e	jmp	#LR__4680
2fda4     18 26 06 F1 | 	add	local01, #24
2fda8     13 15 02 FB | 	rdlong	arg02, local01
2fdac     18 26 86 F1 | 	sub	local01, #24
2fdb0     16 13 02 F6 | 	mov	arg01, local04
2fdb4     AC ED BF FD | 	call	#_fatfs_cc_move_window
2fdb8     FD 2A 0A F6 | 	mov	local03, result1 wz
2fdbc     90 01 90 5D |  if_ne	jmp	#LR__4680
2fdc0     1C 26 06 F1 | 	add	local01, #28
2fdc4     13 FB 01 FB | 	rdlong	result1, local01
2fdc8     1C 26 86 F1 | 	sub	local01, #28
2fdcc     FD 32 C2 FA | 	rdbyte	local07, result1
2fdd0     19 FB 01 F6 | 	mov	result1, local07
2fdd4     07 FA 4D F7 | 	zerox	result1, #7 wz
2fdd8     04 2A 06 A6 |  if_e	mov	local03, #4
2fddc                 | ' 			res = FR_NO_FILE; break;
2fddc     70 01 90 AD |  if_e	jmp	#LR__4680
2fde0     1C 26 06 F1 | 	add	local01, #28
2fde4     13 35 02 FB | 	rdlong	local08, local01
2fde8     0B 34 06 F1 | 	add	local08, #11
2fdec     1A 37 C2 FA | 	rdbyte	local09, local08
2fdf0     3F 36 06 F5 | 	and	local09, #63
2fdf4     16 26 86 F1 | 	sub	local01, #22
2fdf8     13 37 42 FC | 	wrbyte	local09, local01
2fdfc     06 26 86 F1 | 	sub	local01, #6
2fe00     19 FB E1 F8 | 	getbyte	result1, local07, #0
2fe04     E5 FA 0D F2 | 	cmp	result1, #229 wz
2fe08     19 35 02 56 |  if_ne	mov	local08, local07
2fe0c     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
2fe10     2E 34 0E 52 |  if_ne	cmp	local08, #46 wz
2fe14     1C 00 90 AD |  if_e	jmp	#LR__4671
2fe18     00 38 06 F6 | 	mov	local10, #0
2fe1c     1B 35 E2 F8 | 	getbyte	local08, local09, #0
2fe20     20 34 26 F5 | 	andn	local08, #32
2fe24     08 34 0E F2 | 	cmp	local08, #8 wz
2fe28     01 38 06 A6 |  if_e	mov	local10, #1
2fe2c     14 39 0A F2 | 	cmp	local10, local02 wz
2fe30     08 00 90 AD |  if_e	jmp	#LR__4672
2fe34                 | LR__4671
2fe34     FF 2E 06 F6 | 	mov	local05, #255
2fe38     00 01 90 FD | 	jmp	#LR__4679
2fe3c                 | LR__4672
2fe3c     1B 37 E2 F8 | 	getbyte	local09, local09, #0
2fe40     0F 36 0E F2 | 	cmp	local09, #15 wz
2fe44     B4 00 90 5D |  if_ne	jmp	#LR__4676
2fe48     19 3B E2 F8 | 	getbyte	local11, local07, #0
2fe4c     40 3A CE F7 | 	test	local11, #64 wz
2fe50     30 00 90 AD |  if_e	jmp	#LR__4673
2fe54     1C 26 06 F1 | 	add	local01, #28
2fe58     13 3B 02 FB | 	rdlong	local11, local01
2fe5c     0D 3A 06 F1 | 	add	local11, #13
2fe60     1D 31 C2 FA | 	rdbyte	local06, local11
2fe64     19 33 E2 F8 | 	getbyte	local07, local07, #0
2fe68     BF 32 06 F5 | 	and	local07, #191
2fe6c     19 2F 02 F6 | 	mov	local05, local07
2fe70     0C 26 86 F1 | 	sub	local01, #12
2fe74     13 3B 02 FB | 	rdlong	local11, local01
2fe78     1C 26 06 F1 | 	add	local01, #28
2fe7c     13 3B 62 FC | 	wrlong	local11, local01
2fe80     2C 26 86 F1 | 	sub	local01, #44
2fe84                 | LR__4673
2fe84     19 35 E2 F8 | 	getbyte	local08, local07, #0
2fe88     17 39 E2 F8 | 	getbyte	local10, local05, #0
2fe8c     1C 35 0A F2 | 	cmp	local08, local10 wz
2fe90     5C 00 90 5D |  if_ne	jmp	#LR__4674
2fe94     18 39 E2 F8 | 	getbyte	local10, local06, #0
2fe98     1C 26 06 F1 | 	add	local01, #28
2fe9c     13 37 02 FB | 	rdlong	local09, local01
2fea0     1C 26 86 F1 | 	sub	local01, #28
2fea4     0D 36 06 F1 | 	add	local09, #13
2fea8     1B 35 C2 FA | 	rdbyte	local08, local09
2feac     1A 37 E2 F8 | 	getbyte	local09, local08, #0
2feb0     1B 39 0A F2 | 	cmp	local10, local09 wz
2feb4     38 00 90 5D |  if_ne	jmp	#LR__4674
2feb8     0C 2C 06 F1 | 	add	local04, #12
2febc     16 13 02 FB | 	rdlong	arg01, local04
2fec0     0C 2C 86 F1 | 	sub	local04, #12
2fec4     1C 26 06 F1 | 	add	local01, #28
2fec8     13 3D 02 FB | 	rdlong	local12, local01
2fecc     1C 26 86 F1 | 	sub	local01, #28
2fed0     1E 15 02 F6 | 	mov	arg02, local12
2fed4     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2fed8     00 FA 4D F2 | 	cmps	result1, #0 wz
2fedc     17 3D 02 56 |  if_ne	mov	local12, local05
2fee0     1E 3D E2 58 |  if_ne	getbyte	local12, local12, #0
2fee4     01 3C 86 51 |  if_ne	sub	local12, #1
2fee8     1E 3B 02 56 |  if_ne	mov	local11, local12
2feec     04 00 90 5D |  if_ne	jmp	#LR__4675
2fef0                 | LR__4674
2fef0     FF 3A 06 F6 | 	mov	local11, #255
2fef4                 | LR__4675
2fef4     1D 2F 02 F6 | 	mov	local05, local11
2fef8     40 00 90 FD | 	jmp	#LR__4678
2fefc                 | LR__4676
2fefc     17 3B 02 F6 | 	mov	local11, local05
2ff00     07 3A 4E F7 | 	zerox	local11, #7 wz
2ff04     20 00 90 5D |  if_ne	jmp	#LR__4677
2ff08     18 31 E2 F8 | 	getbyte	local06, local06, #0
2ff0c     1C 26 06 F1 | 	add	local01, #28
2ff10     13 13 02 FB | 	rdlong	arg01, local01
2ff14     1C 26 86 F1 | 	sub	local01, #28
2ff18     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2ff1c     FD FA E1 F8 | 	getbyte	result1, result1, #0
2ff20     FD 30 0A F2 | 	cmp	local06, result1 wz
2ff24     28 00 90 AD |  if_e	jmp	#LR__4680
2ff28                 | LR__4677
2ff28     2C 26 06 F1 | 	add	local01, #44
2ff2c     FF FF FF FF 
2ff30     13 FF 6B FC | 	wrlong	##-1, local01
2ff34     2C 26 86 F1 | 	sub	local01, #44
2ff38                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2ff38                 | ' 					}
2ff38                 | ' 					break;
2ff38     14 00 90 FD | 	jmp	#LR__4680
2ff3c                 | LR__4678
2ff3c                 | LR__4679
2ff3c     13 13 02 F6 | 	mov	arg01, local01
2ff40     00 14 06 F6 | 	mov	arg02, #0
2ff44     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2ff48     FD 2A 0A F6 | 	mov	local03, result1 wz
2ff4c     44 FE 9F AD |  if_e	jmp	#LR__4670
2ff50                 | LR__4680
2ff50     00 2A 0E F2 | 	cmp	local03, #0 wz
2ff54     18 26 06 51 |  if_ne	add	local01, #24
2ff58     13 01 68 5C |  if_ne	wrlong	#0, local01
2ff5c                 | ' 	return res;
2ff5c     15 FB 01 F6 | 	mov	result1, local03
2ff60     A7 F0 03 F6 | 	mov	ptra, fp
2ff64     B2 00 A0 FD | 	call	#popregs_
2ff68                 | _fatfs_cc_dir_read_ret
2ff68     2D 00 64 FD | 	ret
2ff6c                 | 
2ff6c                 | _fatfs_cc_dir_find
2ff6c     0B 4A 05 F6 | 	mov	COUNT_, #11
2ff70     A8 00 A0 FD | 	call	#pushregs_
2ff74     09 27 02 F6 | 	mov	local01, arg01
2ff78     13 29 02 FB | 	rdlong	local02, local01
2ff7c     13 13 02 F6 | 	mov	arg01, local01
2ff80     00 14 06 F6 | 	mov	arg02, #0
2ff84     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2ff88     00 FA 0D F2 | 	cmp	result1, #0 wz
2ff8c     18 02 90 5D |  if_ne	jmp	#LR__4702
2ff90     FF 2A 06 F6 | 	mov	local03, #255
2ff94     FF 2C 06 F6 | 	mov	local04, #255
2ff98     2C 26 06 F1 | 	add	local01, #44
2ff9c     FF FF FF FF 
2ffa0     13 FF 6B FC | 	wrlong	##-1, local01
2ffa4     2C 26 86 F1 | 	sub	local01, #44
2ffa8                 | ' #line 2404 "ff.c"
2ffa8                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2ffa8                 | ' 
2ffa8                 | ' 	do {
2ffa8                 | LR__4690
2ffa8     18 26 06 F1 | 	add	local01, #24
2ffac     13 15 02 FB | 	rdlong	arg02, local01
2ffb0     18 26 86 F1 | 	sub	local01, #24
2ffb4     14 13 02 F6 | 	mov	arg01, local02
2ffb8     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2ffbc     FD 2E 0A F6 | 	mov	local05, result1 wz
2ffc0     E0 01 90 5D |  if_ne	jmp	#LR__4701
2ffc4     1C 26 06 F1 | 	add	local01, #28
2ffc8     13 17 02 FB | 	rdlong	arg03, local01
2ffcc     1C 26 86 F1 | 	sub	local01, #28
2ffd0     0B 31 C2 FA | 	rdbyte	local06, arg03
2ffd4     18 17 02 F6 | 	mov	arg03, local06
2ffd8     07 16 4E F7 | 	zerox	arg03, #7 wz
2ffdc     04 2E 06 A6 |  if_e	mov	local05, #4
2ffe0     C0 01 90 AD |  if_e	jmp	#LR__4701
2ffe4     1C 26 06 F1 | 	add	local01, #28
2ffe8     13 33 02 FB | 	rdlong	local07, local01
2ffec     19 17 02 F6 | 	mov	arg03, local07
2fff0     0B 16 06 F1 | 	add	arg03, #11
2fff4     0B 35 C2 FA | 	rdbyte	local08, arg03
2fff8     3F 34 06 F5 | 	and	local08, #63
2fffc     16 26 86 F1 | 	sub	local01, #22
30000     13 35 42 FC | 	wrbyte	local08, local01
30004     06 26 86 F1 | 	sub	local01, #6
30008     18 17 E2 F8 | 	getbyte	arg03, local06, #0
3000c     E5 16 0E F2 | 	cmp	arg03, #229 wz
30010     18 00 90 AD |  if_e	jmp	#LR__4691
30014     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
30018     08 16 CE F7 | 	test	arg03, #8 wz
3001c     1A 33 02 56 |  if_ne	mov	local07, local08
30020     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
30024     0F 32 0E 52 |  if_ne	cmp	local07, #15 wz
30028     18 00 90 AD |  if_e	jmp	#LR__4692
3002c                 | LR__4691
3002c     FF 2C 06 F6 | 	mov	local04, #255
30030     2C 26 06 F1 | 	add	local01, #44
30034     FF FF FF FF 
30038     13 FF 6B FC | 	wrlong	##-1, local01
3003c     2C 26 86 F1 | 	sub	local01, #44
30040     4C 01 90 FD | 	jmp	#LR__4700
30044                 | LR__4692
30044     1A 35 E2 F8 | 	getbyte	local08, local08, #0
30048     0F 34 0E F2 | 	cmp	local08, #15 wz
3004c     C8 00 90 5D |  if_ne	jmp	#LR__4696
30050     2B 26 06 F1 | 	add	local01, #43
30054     13 35 C2 FA | 	rdbyte	local08, local01
30058     2B 26 86 F1 | 	sub	local01, #43
3005c     40 34 CE F7 | 	test	local08, #64 wz
30060     2C 01 90 5D |  if_ne	jmp	#LR__4699
30064     18 37 E2 F8 | 	getbyte	local09, local06, #0
30068     40 36 CE F7 | 	test	local09, #64 wz
3006c     30 00 90 AD |  if_e	jmp	#LR__4693
30070     1C 26 06 F1 | 	add	local01, #28
30074     13 37 02 FB | 	rdlong	local09, local01
30078     0D 36 06 F1 | 	add	local09, #13
3007c     1B 2B C2 FA | 	rdbyte	local03, local09
30080     18 31 E2 F8 | 	getbyte	local06, local06, #0
30084     BF 30 06 F5 | 	and	local06, #191
30088     18 2D 02 F6 | 	mov	local04, local06
3008c     0C 26 86 F1 | 	sub	local01, #12
30090     13 37 02 FB | 	rdlong	local09, local01
30094     1C 26 06 F1 | 	add	local01, #28
30098     13 37 62 FC | 	wrlong	local09, local01
3009c     2C 26 86 F1 | 	sub	local01, #44
300a0                 | LR__4693
300a0     18 39 E2 F8 | 	getbyte	local10, local06, #0
300a4     16 33 E2 F8 | 	getbyte	local07, local04, #0
300a8     19 39 0A F2 | 	cmp	local10, local07 wz
300ac     5C 00 90 5D |  if_ne	jmp	#LR__4694
300b0     15 35 E2 F8 | 	getbyte	local08, local03, #0
300b4     1C 26 06 F1 | 	add	local01, #28
300b8     13 33 02 FB | 	rdlong	local07, local01
300bc     1C 26 86 F1 | 	sub	local01, #28
300c0     0D 32 06 F1 | 	add	local07, #13
300c4     19 31 C2 FA | 	rdbyte	local06, local07
300c8     18 33 E2 F8 | 	getbyte	local07, local06, #0
300cc     19 35 0A F2 | 	cmp	local08, local07 wz
300d0     38 00 90 5D |  if_ne	jmp	#LR__4694
300d4     0C 28 06 F1 | 	add	local02, #12
300d8     14 13 02 FB | 	rdlong	arg01, local02
300dc     0C 28 86 F1 | 	sub	local02, #12
300e0     1C 26 06 F1 | 	add	local01, #28
300e4     13 3B 02 FB | 	rdlong	local11, local01
300e8     1C 26 86 F1 | 	sub	local01, #28
300ec     1D 15 02 F6 | 	mov	arg02, local11
300f0     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
300f4     00 FA 4D F2 | 	cmps	result1, #0 wz
300f8     16 3B 02 56 |  if_ne	mov	local11, local04
300fc     1D 3B E2 58 |  if_ne	getbyte	local11, local11, #0
30100     01 3A 86 51 |  if_ne	sub	local11, #1
30104     1D 37 02 56 |  if_ne	mov	local09, local11
30108     04 00 90 5D |  if_ne	jmp	#LR__4695
3010c                 | LR__4694
3010c     FF 36 06 F6 | 	mov	local09, #255
30110                 | LR__4695
30110     1B 2D 02 F6 | 	mov	local04, local09
30114     78 00 90 FD | 	jmp	#LR__4699
30118                 | LR__4696
30118     16 37 02 F6 | 	mov	local09, local04
3011c     07 36 4E F7 | 	zerox	local09, #7 wz
30120     20 00 90 5D |  if_ne	jmp	#LR__4697
30124     15 39 E2 F8 | 	getbyte	local10, local03, #0
30128     1C 26 06 F1 | 	add	local01, #28
3012c     13 13 02 FB | 	rdlong	arg01, local01
30130     1C 26 86 F1 | 	sub	local01, #28
30134     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
30138     FD FA E1 F8 | 	getbyte	result1, result1, #0
3013c     FD 38 0A F2 | 	cmp	local10, result1 wz
30140     60 00 90 AD |  if_e	jmp	#LR__4701
30144                 | LR__4697
30144     2B 26 06 F1 | 	add	local01, #43
30148     13 37 C2 FA | 	rdbyte	local09, local01
3014c     2B 26 86 F1 | 	sub	local01, #43
30150     01 36 CE F7 | 	test	local09, #1 wz
30154     24 00 90 5D |  if_ne	jmp	#LR__4698
30158     1C 26 06 F1 | 	add	local01, #28
3015c     13 13 02 FB | 	rdlong	arg01, local01
30160     04 26 06 F1 | 	add	local01, #4
30164     13 15 02 F6 | 	mov	arg02, local01
30168     20 26 86 F1 | 	sub	local01, #32
3016c     0B 16 06 F6 | 	mov	arg03, #11
30170     88 DA BF FD | 	call	#_fatfs_cc_memcmp
30174     00 FA 0D F2 | 	cmp	result1, #0 wz
30178     28 00 90 AD |  if_e	jmp	#LR__4701
3017c                 | LR__4698
3017c     FF 2C 06 F6 | 	mov	local04, #255
30180     2C 26 06 F1 | 	add	local01, #44
30184     FF FF FF FF 
30188     13 FF 6B FC | 	wrlong	##-1, local01
3018c     2C 26 86 F1 | 	sub	local01, #44
30190                 | LR__4699
30190                 | LR__4700
30190     13 13 02 F6 | 	mov	arg01, local01
30194     00 14 06 F6 | 	mov	arg02, #0
30198     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
3019c     FD 2E 0A F6 | 	mov	local05, result1 wz
301a0     04 FE 9F AD |  if_e	jmp	#LR__4690
301a4                 | LR__4701
301a4                 | ' 
301a4                 | ' 	return res;
301a4     17 FB 01 F6 | 	mov	result1, local05
301a8                 | LR__4702
301a8     A7 F0 03 F6 | 	mov	ptra, fp
301ac     B2 00 A0 FD | 	call	#popregs_
301b0                 | _fatfs_cc_dir_find_ret
301b0     2D 00 64 FD | 	ret
301b4                 | 
301b4                 | _fatfs_cc_dir_register
301b4     0A 4A 05 F6 | 	mov	COUNT_, #10
301b8     A8 00 A0 FD | 	call	#pushregs_
301bc     2C F0 07 F1 | 	add	ptra, #44
301c0     04 4E 05 F1 | 	add	fp, #4
301c4     A7 12 62 FC | 	wrlong	arg01, fp
301c8     09 27 02 FB | 	rdlong	local01, arg01
301cc     08 4E 05 F1 | 	add	fp, #8
301d0     A7 26 62 FC | 	wrlong	local01, fp
301d4     08 4E 85 F1 | 	sub	fp, #8
301d8     A7 28 02 FB | 	rdlong	local02, fp
301dc     04 4E 85 F1 | 	sub	fp, #4
301e0     2B 28 06 F1 | 	add	local02, #43
301e4     14 29 C2 FA | 	rdbyte	local02, local02
301e8     A0 28 CE F7 | 	test	local02, #160 wz
301ec     06 FA 05 56 |  if_ne	mov	result1, #6
301f0     F8 03 90 5D |  if_ne	jmp	#LR__4725
301f4                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
301f4     14 4E 05 F1 | 	add	fp, #20
301f8     A7 00 68 FC | 	wrlong	#0, fp
301fc     14 4E 85 F1 | 	sub	fp, #20
30200     97 28 48 FB | 	callpa	#(@LR__4711-@LR__4710)>>2,fcache_load_ptr_
30204                 | LR__4710
30204     0C 4E 05 F1 | 	add	fp, #12
30208     A7 28 02 FB | 	rdlong	local02, fp
3020c     0C 28 06 F1 | 	add	local02, #12
30210     14 2B 02 FB | 	rdlong	local03, local02
30214     08 4E 05 F1 | 	add	fp, #8
30218     A7 2C 02 FB | 	rdlong	local04, fp
3021c     14 4E 85 F1 | 	sub	fp, #20
30220     01 2C 66 F0 | 	shl	local04, #1
30224     15 2D 02 F1 | 	add	local04, local03
30228     16 29 EA FA | 	rdword	local02, local04 wz
3022c     24 00 90 AD |  if_e	jmp	#LR__4712
30230     14 4E 05 F1 | 	add	fp, #20
30234     A7 2E 02 FB | 	rdlong	local05, fp
30238     17 31 02 F6 | 	mov	local06, local05
3023c     17 33 02 F6 | 	mov	local07, local05
30240     19 35 02 F6 | 	mov	local08, local07
30244     01 34 06 F1 | 	add	local08, #1
30248     A7 34 62 FC | 	wrlong	local08, fp
3024c     14 4E 85 F1 | 	sub	fp, #20
30250     B0 FF 9F FD | 	jmp	#LR__4710
30254                 | LR__4711
30254                 | LR__4712
30254     1C 4E 05 F1 | 	add	fp, #28
30258     A7 12 02 F6 | 	mov	arg01, fp
3025c     18 4E 85 F1 | 	sub	fp, #24
30260     A7 14 02 FB | 	rdlong	arg02, fp
30264     04 4E 85 F1 | 	sub	fp, #4
30268     20 14 06 F1 | 	add	arg02, #32
3026c     0C 16 06 F6 | 	mov	arg03, #12
30270     1C 6C BF FD | 	call	#__system____builtin_memmove
30274     27 4E 05 F1 | 	add	fp, #39
30278     A7 36 C2 FA | 	rdbyte	local09, fp
3027c     27 4E 85 F1 | 	sub	fp, #39
30280     01 36 CE F7 | 	test	local09, #1 wz
30284     F4 00 90 AD |  if_e	jmp	#LR__4715
30288     04 4E 05 F1 | 	add	fp, #4
3028c     A7 38 02 FB | 	rdlong	local10, fp
30290     2B 38 06 F1 | 	add	local10, #43
30294     1C 81 48 FC | 	wrbyte	#64, local10
30298                 | ' 		dp->fn[ 11 ] =  0x40 ;
30298                 | ' 		for (n = 1; n < 100; n++) {
30298     0C 4E 05 F1 | 	add	fp, #12
3029c     A7 02 68 FC | 	wrlong	#1, fp
302a0     10 4E 85 F1 | 	sub	fp, #16
302a4                 | LR__4713
302a4     10 4E 05 F1 | 	add	fp, #16
302a8     A7 28 02 FB | 	rdlong	local02, fp
302ac     10 4E 85 F1 | 	sub	fp, #16
302b0     64 28 16 F2 | 	cmp	local02, #100 wc
302b4     70 00 90 3D |  if_ae	jmp	#LR__4714
302b8     04 4E 05 F1 | 	add	fp, #4
302bc     A7 12 02 FB | 	rdlong	arg01, fp
302c0     20 12 06 F1 | 	add	arg01, #32
302c4     18 4E 05 F1 | 	add	fp, #24
302c8     A7 14 02 F6 | 	mov	arg02, fp
302cc     10 4E 85 F1 | 	sub	fp, #16
302d0     A7 38 02 FB | 	rdlong	local10, fp
302d4     0C 38 06 F1 | 	add	local10, #12
302d8     1C 17 02 FB | 	rdlong	arg03, local10
302dc     04 4E 05 F1 | 	add	fp, #4
302e0     A7 18 02 FB | 	rdlong	arg04, fp
302e4     10 4E 85 F1 | 	sub	fp, #16
302e8     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
302ec     04 4E 05 F1 | 	add	fp, #4
302f0     A7 12 02 FB | 	rdlong	arg01, fp
302f4     04 4E 85 F1 | 	sub	fp, #4
302f8     70 FC BF FD | 	call	#_fatfs_cc_dir_find
302fc     08 4E 05 F1 | 	add	fp, #8
30300     A7 FA 61 FC | 	wrlong	result1, fp
30304     00 FA 4D F2 | 	cmps	result1, #0 wz
30308     08 4E 85 F1 | 	sub	fp, #8
3030c     18 00 90 5D |  if_ne	jmp	#LR__4714
30310     10 4E 05 F1 | 	add	fp, #16
30314     A7 38 02 FB | 	rdlong	local10, fp
30318     01 38 06 F1 | 	add	local10, #1
3031c     A7 38 62 FC | 	wrlong	local10, fp
30320     10 4E 85 F1 | 	sub	fp, #16
30324     7C FF 9F FD | 	jmp	#LR__4713
30328                 | LR__4714
30328     10 4E 05 F1 | 	add	fp, #16
3032c     A7 38 02 FB | 	rdlong	local10, fp
30330     10 4E 85 F1 | 	sub	fp, #16
30334     64 38 0E F2 | 	cmp	local10, #100 wz
30338     07 FA 05 A6 |  if_e	mov	result1, #7
3033c     AC 02 90 AD |  if_e	jmp	#LR__4725
30340     08 4E 05 F1 | 	add	fp, #8
30344     A7 38 02 FB | 	rdlong	local10, fp
30348     08 4E 85 F1 | 	sub	fp, #8
3034c     04 38 0E F2 | 	cmp	local10, #4 wz
30350     08 4E 05 51 |  if_ne	add	fp, #8
30354     A7 FA 01 5B |  if_ne	rdlong	result1, fp
30358     08 4E 85 51 |  if_ne	sub	fp, #8
3035c     8C 02 90 5D |  if_ne	jmp	#LR__4725
30360     04 4E 05 F1 | 	add	fp, #4
30364     A7 38 02 FB | 	rdlong	local10, fp
30368     23 4E 05 F1 | 	add	fp, #35
3036c     A7 26 C2 FA | 	rdbyte	local01, fp
30370     27 4E 85 F1 | 	sub	fp, #39
30374     2B 38 06 F1 | 	add	local10, #43
30378     1C 27 42 FC | 	wrbyte	local01, local10
3037c                 | LR__4715
3037c     27 4E 05 F1 | 	add	fp, #39
30380     A7 28 C2 FA | 	rdbyte	local02, fp
30384     27 4E 85 F1 | 	sub	fp, #39
30388     02 28 CE F7 | 	test	local02, #2 wz
3038c     20 00 90 AD |  if_e	jmp	#LR__4716
30390     14 4E 05 F1 | 	add	fp, #20
30394     A7 38 02 FB | 	rdlong	local10, fp
30398     0C 38 06 F1 | 	add	local10, #12
3039c     0D 38 16 FD | 	qdiv	local10, #13
303a0     14 4E 85 F1 | 	sub	fp, #20
303a4     18 38 62 FD | 	getqx	local10
303a8     01 38 06 F1 | 	add	local10, #1
303ac     04 00 90 FD | 	jmp	#LR__4717
303b0                 | LR__4716
303b0     01 38 06 F6 | 	mov	local10, #1
303b4                 | LR__4717
303b4     18 4E 05 F1 | 	add	fp, #24
303b8     A7 38 62 FC | 	wrlong	local10, fp
303bc     14 4E 85 F1 | 	sub	fp, #20
303c0     A7 12 02 FB | 	rdlong	arg01, fp
303c4     1C 15 02 F6 | 	mov	arg02, local10
303c8     04 4E 85 F1 | 	sub	fp, #4
303cc     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
303d0     08 4E 05 F1 | 	add	fp, #8
303d4     A7 FA 61 FC | 	wrlong	result1, fp
303d8     08 4E 85 F1 | 	sub	fp, #8
303dc     00 FA 0D F2 | 	cmp	result1, #0 wz
303e0     38 01 90 5D |  if_ne	jmp	#LR__4722
303e4     18 4E 05 F1 | 	add	fp, #24
303e8     A7 38 02 FB | 	rdlong	local10, fp
303ec     01 38 8E F1 | 	sub	local10, #1 wz
303f0     A7 38 62 FC | 	wrlong	local10, fp
303f4     18 4E 85 F1 | 	sub	fp, #24
303f8     20 01 90 AD |  if_e	jmp	#LR__4722
303fc     04 4E 05 F1 | 	add	fp, #4
30400     A7 38 02 FB | 	rdlong	local10, fp
30404     1C 13 02 F6 | 	mov	arg01, local10
30408     14 4E 05 F1 | 	add	fp, #20
3040c     A7 18 02 FB | 	rdlong	arg04, fp
30410     18 4E 85 F1 | 	sub	fp, #24
30414     05 18 66 F0 | 	shl	arg04, #5
30418     10 38 06 F1 | 	add	local10, #16
3041c     1C 15 02 FB | 	rdlong	arg02, local10
30420     0C 15 82 F1 | 	sub	arg02, arg04
30424     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
30428     08 4E 05 F1 | 	add	fp, #8
3042c     A7 FA 61 FC | 	wrlong	result1, fp
30430     08 4E 85 F1 | 	sub	fp, #8
30434     00 FA 0D F2 | 	cmp	result1, #0 wz
30438     E0 00 90 5D |  if_ne	jmp	#LR__4721
3043c     04 4E 05 F1 | 	add	fp, #4
30440     A7 12 02 FB | 	rdlong	arg01, fp
30444     04 4E 85 F1 | 	sub	fp, #4
30448     20 12 06 F1 | 	add	arg01, #32
3044c     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
30450     FD 38 02 F6 | 	mov	local10, result1
30454     28 4E 05 F1 | 	add	fp, #40
30458     A7 38 42 FC | 	wrbyte	local10, fp
3045c     28 4E 85 F1 | 	sub	fp, #40
30460                 | ' 			sum = sum_sfn(dp->fn);
30460                 | ' 			do {
30460                 | LR__4718
30460     0C 4E 05 F1 | 	add	fp, #12
30464     A7 12 02 FB | 	rdlong	arg01, fp
30468     08 4E 85 F1 | 	sub	fp, #8
3046c     A7 26 02 FB | 	rdlong	local01, fp
30470     04 4E 85 F1 | 	sub	fp, #4
30474     18 26 06 F1 | 	add	local01, #24
30478     13 15 02 FB | 	rdlong	arg02, local01
3047c     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
30480     08 4E 05 F1 | 	add	fp, #8
30484     A7 FA 61 FC | 	wrlong	result1, fp
30488     00 FA 4D F2 | 	cmps	result1, #0 wz
3048c     08 4E 85 F1 | 	sub	fp, #8
30490     88 00 90 5D |  if_ne	jmp	#LR__4720
30494     0C 4E 05 F1 | 	add	fp, #12
30498     A7 28 02 FB | 	rdlong	local02, fp
3049c     0C 28 06 F1 | 	add	local02, #12
304a0     14 13 02 FB | 	rdlong	arg01, local02
304a4     08 4E 85 F1 | 	sub	fp, #8
304a8     A7 26 02 FB | 	rdlong	local01, fp
304ac     1C 26 06 F1 | 	add	local01, #28
304b0     13 15 02 FB | 	rdlong	arg02, local01
304b4     14 4E 05 F1 | 	add	fp, #20
304b8     A7 16 02 FB | 	rdlong	arg03, fp
304bc     10 4E 05 F1 | 	add	fp, #16
304c0     A7 18 C2 FA | 	rdbyte	arg04, fp
304c4     28 4E 85 F1 | 	sub	fp, #40
304c8     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
304cc     0C 4E 05 F1 | 	add	fp, #12
304d0     A7 38 02 FB | 	rdlong	local10, fp
304d4     03 38 06 F1 | 	add	local10, #3
304d8     1C 03 48 FC | 	wrbyte	#1, local10
304dc     08 4E 85 F1 | 	sub	fp, #8
304e0     A7 12 02 FB | 	rdlong	arg01, fp
304e4     04 4E 85 F1 | 	sub	fp, #4
304e8     00 14 06 F6 | 	mov	arg02, #0
304ec     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
304f0     08 4E 05 F1 | 	add	fp, #8
304f4     A7 FA 61 FC | 	wrlong	result1, fp
304f8     00 FA 4D F2 | 	cmps	result1, #0 wz
304fc     08 4E 85 F1 | 	sub	fp, #8
30500     18 00 90 5D |  if_ne	jmp	#LR__4719
30504     18 4E 05 F1 | 	add	fp, #24
30508     A7 38 02 FB | 	rdlong	local10, fp
3050c     01 38 8E F1 | 	sub	local10, #1 wz
30510     A7 38 62 FC | 	wrlong	local10, fp
30514     18 4E 85 F1 | 	sub	fp, #24
30518     44 FF 9F 5D |  if_ne	jmp	#LR__4718
3051c                 | LR__4719
3051c                 | LR__4720
3051c                 | LR__4721
3051c                 | LR__4722
3051c     08 4E 05 F1 | 	add	fp, #8
30520     A7 38 0A FB | 	rdlong	local10, fp wz
30524     08 4E 85 F1 | 	sub	fp, #8
30528     B4 00 90 5D |  if_ne	jmp	#LR__4724
3052c     0C 4E 05 F1 | 	add	fp, #12
30530     A7 12 02 FB | 	rdlong	arg01, fp
30534     08 4E 85 F1 | 	sub	fp, #8
30538     A7 26 02 FB | 	rdlong	local01, fp
3053c     04 4E 85 F1 | 	sub	fp, #4
30540     18 26 06 F1 | 	add	local01, #24
30544     13 15 02 FB | 	rdlong	arg02, local01
30548     18 E6 BF FD | 	call	#_fatfs_cc_move_window
3054c     08 4E 05 F1 | 	add	fp, #8
30550     A7 FA 61 FC | 	wrlong	result1, fp
30554     08 4E 85 F1 | 	sub	fp, #8
30558     00 FA 0D F2 | 	cmp	result1, #0 wz
3055c     80 00 90 5D |  if_ne	jmp	#LR__4723
30560     04 4E 05 F1 | 	add	fp, #4
30564     A7 28 02 FB | 	rdlong	local02, fp
30568     04 4E 85 F1 | 	sub	fp, #4
3056c     1C 28 06 F1 | 	add	local02, #28
30570     14 13 02 FB | 	rdlong	arg01, local02
30574     00 14 06 F6 | 	mov	arg02, #0
30578     20 16 06 F6 | 	mov	arg03, #32
3057c     98 00 A0 FD | 	call	#\builtin_bytefill_
30580     04 4E 05 F1 | 	add	fp, #4
30584     A7 14 02 FB | 	rdlong	arg02, fp
30588     0A 27 02 F6 | 	mov	local01, arg02
3058c     1C 26 06 F1 | 	add	local01, #28
30590     13 13 02 FB | 	rdlong	arg01, local01
30594     04 4E 85 F1 | 	sub	fp, #4
30598     20 14 06 F1 | 	add	arg02, #32
3059c     0B 16 06 F6 | 	mov	arg03, #11
305a0     EC 68 BF FD | 	call	#__system____builtin_memmove
305a4     04 4E 05 F1 | 	add	fp, #4
305a8     A7 36 02 FB | 	rdlong	local09, fp
305ac     1B 39 02 F6 | 	mov	local10, local09
305b0     1C 38 06 F1 | 	add	local10, #28
305b4     1C 27 02 FB | 	rdlong	local01, local10
305b8     2B 36 06 F1 | 	add	local09, #43
305bc     1B 39 C2 FA | 	rdbyte	local10, local09
305c0     18 38 06 F5 | 	and	local10, #24
305c4     0C 26 06 F1 | 	add	local01, #12
305c8     13 39 42 FC | 	wrbyte	local10, local01
305cc     08 4E 05 F1 | 	add	fp, #8
305d0     A7 38 02 FB | 	rdlong	local10, fp
305d4     0C 4E 85 F1 | 	sub	fp, #12
305d8     03 38 06 F1 | 	add	local10, #3
305dc     1C 03 48 FC | 	wrbyte	#1, local10
305e0                 | LR__4723
305e0                 | LR__4724
305e0                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
305e0                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
305e0                 | ' 
305e0                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
305e0                 | ' 
305e0                 | ' 			fs->wflag = 1;
305e0                 | ' 		}
305e0                 | ' 	}
305e0                 | ' 
305e0                 | ' 	return res;
305e0     08 4E 05 F1 | 	add	fp, #8
305e4     A7 FA 01 FB | 	rdlong	result1, fp
305e8     08 4E 85 F1 | 	sub	fp, #8
305ec                 | LR__4725
305ec     A7 F0 03 F6 | 	mov	ptra, fp
305f0     B2 00 A0 FD | 	call	#popregs_
305f4                 | _fatfs_cc_dir_register_ret
305f4     2D 00 64 FD | 	ret
305f8                 | 
305f8                 | _fatfs_cc_dir_remove
305f8     05 4A 05 F6 | 	mov	COUNT_, #5
305fc     A8 00 A0 FD | 	call	#pushregs_
30600     09 27 02 F6 | 	mov	local01, arg01
30604     13 29 02 FB | 	rdlong	local02, local01
30608     10 26 06 F1 | 	add	local01, #16
3060c     13 2B 02 FB | 	rdlong	local03, local01
30610     1C 26 06 F1 | 	add	local01, #28
30614     13 15 02 FB | 	rdlong	arg02, local01
30618     2C 26 86 F1 | 	sub	local01, #44
3061c     FF FF 7F FF 
30620     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
30624     00 2C 06 A6 |  if_e	mov	local04, #0
30628     18 00 90 AD |  if_e	jmp	#LR__4730
3062c     13 13 02 F6 | 	mov	arg01, local01
30630     2C 26 06 F1 | 	add	local01, #44
30634     13 15 02 FB | 	rdlong	arg02, local01
30638     2C 26 86 F1 | 	sub	local01, #44
3063c     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
30640     FD 2C 02 F6 | 	mov	local04, result1
30644                 | LR__4730
30644     16 2F 0A F6 | 	mov	local05, local04 wz
30648     64 00 90 5D |  if_ne	jmp	#LR__4733
3064c                 | ' 		do {
3064c                 | LR__4731
3064c     18 26 06 F1 | 	add	local01, #24
30650     13 15 02 FB | 	rdlong	arg02, local01
30654     18 26 86 F1 | 	sub	local01, #24
30658     14 13 02 F6 | 	mov	arg01, local02
3065c     04 E5 BF FD | 	call	#_fatfs_cc_move_window
30660     FD 2E 0A F6 | 	mov	local05, result1 wz
30664     40 00 90 5D |  if_ne	jmp	#LR__4732
30668     1C 26 06 F1 | 	add	local01, #28
3066c     13 2D 02 FB | 	rdlong	local04, local01
30670     16 CB 49 FC | 	wrbyte	#229, local04
30674     03 28 06 F1 | 	add	local02, #3
30678     14 03 48 FC | 	wrbyte	#1, local02
3067c     03 28 86 F1 | 	sub	local02, #3
30680     0C 26 86 F1 | 	sub	local01, #12
30684     13 2D 02 FB | 	rdlong	local04, local01
30688     10 26 86 F1 | 	sub	local01, #16
3068c     15 2D 12 F2 | 	cmp	local04, local03 wc
30690     14 00 90 3D |  if_ae	jmp	#LR__4732
30694     13 13 02 F6 | 	mov	arg01, local01
30698     00 14 06 F6 | 	mov	arg02, #0
3069c     90 EF BF FD | 	call	#_fatfs_cc_dir_next
306a0     FD 2E 0A F6 | 	mov	local05, result1 wz
306a4     A4 FF 9F AD |  if_e	jmp	#LR__4731
306a8                 | LR__4732
306a8     04 2E 0E F2 | 	cmp	local05, #4 wz
306ac     02 2E 06 A6 |  if_e	mov	local05, #2
306b0                 | LR__4733
306b0                 | ' 	}
306b0                 | ' #line 2590 "ff.c"
306b0                 | ' 	return res;
306b0     17 FB 01 F6 | 	mov	result1, local05
306b4     A7 F0 03 F6 | 	mov	ptra, fp
306b8     B2 00 A0 FD | 	call	#popregs_
306bc                 | _fatfs_cc_dir_remove_ret
306bc     2D 00 64 FD | 	ret
306c0                 | 
306c0                 | _fatfs_cc_get_fileinfo
306c0     0F 4A 05 F6 | 	mov	COUNT_, #15
306c4     A8 00 A0 FD | 	call	#pushregs_
306c8     09 27 02 F6 | 	mov	local01, arg01
306cc     0A 29 02 F6 | 	mov	local02, arg02
306d0     13 2B 02 FB | 	rdlong	local03, local01
306d4     1C 28 06 F1 | 	add	local02, #28
306d8     14 01 48 FC | 	wrbyte	#0, local02
306dc     1C 28 86 F1 | 	sub	local02, #28
306e0     18 26 06 F1 | 	add	local01, #24
306e4     13 2D 0A FB | 	rdlong	local04, local01 wz
306e8     18 26 86 F1 | 	sub	local01, #24
306ec     90 03 90 AD |  if_e	jmp	#LR__4754
306f0     2C 26 06 F1 | 	add	local01, #44
306f4     13 2D 02 FB | 	rdlong	local04, local01
306f8     2C 26 86 F1 | 	sub	local01, #44
306fc     FF FF 7F FF 
30700     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
30704     D8 00 90 AD |  if_e	jmp	#LR__4743
30708     00 2E 06 F6 | 	mov	local05, #0
3070c     00 30 06 F6 | 	mov	local06, #0
30710     00 32 06 F6 | 	mov	local07, #0
30714                 | ' 			si = di = 0;
30714                 | ' 			hs = 0;
30714                 | ' 			while (fs->lfnbuf[si] != 0) {
30714                 | LR__4740
30714     0C 2A 06 F1 | 	add	local03, #12
30718     15 2D 02 FB | 	rdlong	local04, local03
3071c     0C 2A 86 F1 | 	sub	local03, #12
30720     18 35 02 F6 | 	mov	local08, local06
30724     01 34 66 F0 | 	shl	local08, #1
30728     16 35 02 F1 | 	add	local08, local04
3072c     1A 2D EA FA | 	rdword	local04, local08 wz
30730     90 00 90 AD |  if_e	jmp	#LR__4742
30734     0C 2A 06 F1 | 	add	local03, #12
30738     15 37 02 FB | 	rdlong	local09, local03
3073c     0C 2A 86 F1 | 	sub	local03, #12
30740     18 39 02 F6 | 	mov	local10, local06
30744     01 38 66 F0 | 	shl	local10, #1
30748     1B 39 02 F1 | 	add	local10, local09
3074c     1C 3B E2 FA | 	rdword	local11, local10
30750     19 2D 02 F6 | 	mov	local04, local07
30754     0F 2C 4E F7 | 	zerox	local04, #15 wz
30758     01 30 06 F1 | 	add	local06, #1
3075c     24 00 90 5D |  if_ne	jmp	#LR__4741
30760     1D 3D 32 F9 | 	getword	local12, local11, #0
30764     6C 00 00 FF 
30768     00 3C 16 F2 | 	cmp	local12, ##55296 wc
3076c     14 00 90 CD |  if_b	jmp	#LR__4741
30770     1D 3F 32 F9 | 	getword	local13, local11, #0
30774     70 00 00 FF 
30778     00 3E 16 F2 | 	cmp	local13, ##57344 wc
3077c     1D 33 02 C6 |  if_b	mov	local07, local11
30780                 | ' 					hs = wc; continue;
30780     90 FF 9F CD |  if_b	jmp	#LR__4740
30784                 | LR__4741
30784     19 13 32 F9 | 	getword	arg01, local07, #0
30788     10 12 66 F0 | 	shl	arg01, #16
3078c     1D 3B 32 F9 | 	getword	local11, local11, #0
30790     1D 13 42 F5 | 	or	arg01, local11
30794     17 15 02 F6 | 	mov	arg02, local05
30798     1C 28 06 F1 | 	add	local02, #28
3079c     14 15 02 F1 | 	add	arg02, local02
307a0     FF 16 06 F6 | 	mov	arg03, #255
307a4     17 17 82 F1 | 	sub	arg03, local05
307a8     1C 28 86 F1 | 	sub	local02, #28
307ac     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
307b0     FD 40 0A F6 | 	mov	local14, result1 wz
307b4     00 2E 06 A6 |  if_e	mov	local05, #0
307b8     20 2F 02 51 |  if_ne	add	local05, local14
307bc     00 32 06 56 |  if_ne	mov	local07, #0
307c0     50 FF 9F 5D |  if_ne	jmp	#LR__4740
307c4                 | LR__4742
307c4     19 2D 02 F6 | 	mov	local04, local07
307c8     0F 2C 4E F7 | 	zerox	local04, #15 wz
307cc     00 2E 06 56 |  if_ne	mov	local05, #0
307d0     1C 28 06 F1 | 	add	local02, #28
307d4     14 2F 02 F1 | 	add	local05, local02
307d8     17 01 48 FC | 	wrbyte	#0, local05
307dc     1C 28 86 F1 | 	sub	local02, #28
307e0                 | LR__4743
307e0     00 2E 06 F6 | 	mov	local05, #0
307e4     00 30 06 F6 | 	mov	local06, #0
307e8                 | ' 			fno->fname[di] = 0;
307e8                 | ' 		}
307e8                 | ' 	}
307e8                 | ' 
307e8                 | ' 	si = di = 0;
307e8                 | ' 	while (si < 11) {
307e8                 | LR__4744
307e8     0B 30 16 F2 | 	cmp	local06, #11 wc
307ec     20 01 90 3D |  if_ae	jmp	#LR__4747
307f0     1C 26 06 F1 | 	add	local01, #28
307f4     13 37 02 FB | 	rdlong	local09, local01
307f8     1C 26 86 F1 | 	sub	local01, #28
307fc     18 39 02 F6 | 	mov	local10, local06
30800     1B 39 02 F1 | 	add	local10, local09
30804     1C 3B C2 FA | 	rdbyte	local11, local10
30808     1D 2D 32 F9 | 	getword	local04, local11, #0
3080c     20 2C 0E F2 | 	cmp	local04, #32 wz
30810     01 30 06 F1 | 	add	local06, #1
30814     D0 FF 9F AD |  if_e	jmp	#LR__4744
30818     1D 2D 32 F9 | 	getword	local04, local11, #0
3081c     05 2C 0E F2 | 	cmp	local04, #5 wz
30820     E5 3A 06 A6 |  if_e	mov	local11, #229
30824     09 30 0E F2 | 	cmp	local06, #9 wz
30828     20 00 90 5D |  if_ne	jmp	#LR__4745
3082c     0C 2E 16 F2 | 	cmp	local05, #12 wc
30830     18 00 90 3D |  if_ae	jmp	#LR__4745
30834     17 3F 02 F6 | 	mov	local13, local05
30838     0C 28 06 F1 | 	add	local02, #12
3083c     14 3F 02 F1 | 	add	local13, local02
30840     1F 5D 48 FC | 	wrbyte	#46, local13
30844     01 2E 06 F1 | 	add	local05, #1
30848     0C 28 86 F1 | 	sub	local02, #12
3084c                 | LR__4745
3084c     1D 13 32 F9 | 	getword	arg01, local11, #0
30850     07 12 4E F7 | 	zerox	arg01, #7 wz
30854     00 FA 05 56 |  if_ne	mov	result1, #0
30858                 | ' 
30858                 | ' 	return 0;
30858     00 FA 05 A6 |  if_e	mov	result1, #0
3085c     00 FA 0D F2 | 	cmp	result1, #0 wz
30860     08 30 0E 52 |  if_ne	cmp	local06, #8 wz
30864     0B 30 0E 52 |  if_ne	cmp	local06, #11 wz
30868     50 00 90 AD |  if_e	jmp	#LR__4746
3086c     1C 26 06 F1 | 	add	local01, #28
30870     13 39 02 FB | 	rdlong	local10, local01
30874     1C 26 86 F1 | 	sub	local01, #28
30878     18 35 02 F6 | 	mov	local08, local06
3087c     1C 35 02 F1 | 	add	local08, local10
30880     1A 13 CA FA | 	rdbyte	arg01, local08 wz
30884     00 FA 05 56 |  if_ne	mov	result1, #0
30888                 | ' 
30888                 | ' 	return 0;
30888     00 FA 05 A6 |  if_e	mov	result1, #0
3088c     00 FA 0D F2 | 	cmp	result1, #0 wz
30890     28 00 90 AD |  if_e	jmp	#LR__4746
30894     1D 3B 32 F9 | 	getword	local11, local11, #0
30898     08 3A 66 F0 | 	shl	local11, #8
3089c     1C 26 06 F1 | 	add	local01, #28
308a0     13 41 02 FB | 	rdlong	local14, local01
308a4     1C 26 86 F1 | 	sub	local01, #28
308a8     18 37 02 F6 | 	mov	local09, local06
308ac     20 37 02 F1 | 	add	local09, local14
308b0     1B 3D C2 FA | 	rdbyte	local12, local09
308b4     1E 3B 42 F5 | 	or	local11, local12
308b8     01 30 06 F1 | 	add	local06, #1
308bc                 | LR__4746
308bc     1D 13 02 F6 | 	mov	arg01, local11
308c0     01 00 00 FF 
308c4     52 15 06 F6 | 	mov	arg02, ##850
308c8     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
308cc     FD 3A 02 F6 | 	mov	local11, result1
308d0     1D 2D 02 F6 | 	mov	local04, local11
308d4     0F 2C 4E F7 | 	zerox	local04, #15 wz
308d8     00 2E 06 A6 |  if_e	mov	local05, #0
308dc     30 00 90 AD |  if_e	jmp	#LR__4747
308e0     1D 13 32 F9 | 	getword	arg01, local11, #0
308e4     17 15 02 F6 | 	mov	arg02, local05
308e8     0C 28 06 F1 | 	add	local02, #12
308ec     14 15 02 F1 | 	add	arg02, local02
308f0     0C 16 06 F6 | 	mov	arg03, #12
308f4     17 17 82 F1 | 	sub	arg03, local05
308f8     0C 28 86 F1 | 	sub	local02, #12
308fc     EC DF BF FD | 	call	#_fatfs_cc_put_utf
30900     FD 40 0A F6 | 	mov	local14, result1 wz
30904     00 2E 06 A6 |  if_e	mov	local05, #0
30908     20 2F 02 51 |  if_ne	add	local05, local14
3090c     D8 FE 9F 5D |  if_ne	jmp	#LR__4744
30910                 | LR__4747
30910     17 2D 02 F6 | 	mov	local04, local05
30914     0C 28 06 F1 | 	add	local02, #12
30918     14 2D 02 F1 | 	add	local04, local02
3091c     16 01 48 FC | 	wrbyte	#0, local04
30920     10 28 06 F1 | 	add	local02, #16
30924     14 2D CA FA | 	rdbyte	local04, local02 wz
30928     1C 28 86 F1 | 	sub	local02, #28
3092c     F8 00 90 5D |  if_ne	jmp	#LR__4753
30930     00 2E 0E F2 | 	cmp	local05, #0 wz
30934     1C 00 90 5D |  if_ne	jmp	#LR__4748
30938     17 3F 02 F6 | 	mov	local13, local05
3093c     1C 28 06 F1 | 	add	local02, #28
30940     14 3F 02 F1 | 	add	local13, local02
30944     1F 7F 48 FC | 	wrbyte	#63, local13
30948     01 2E 06 F1 | 	add	local05, #1
3094c     1C 28 86 F1 | 	sub	local02, #28
30950     A4 00 90 FD | 	jmp	#LR__4752
30954                 | LR__4748
30954                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
30954     00 2E 06 F6 | 	mov	local05, #0
30958     00 30 06 F6 | 	mov	local06, #0
3095c     08 42 06 F6 | 	mov	local15, #8
30960                 | LR__4749
30960     18 2D 02 F6 | 	mov	local04, local06
30964     0C 28 06 F1 | 	add	local02, #12
30968     14 2D 02 F1 | 	add	local04, local02
3096c     16 3F CA FA | 	rdbyte	local13, local04 wz
30970     0C 28 86 F1 | 	sub	local02, #12
30974     80 00 90 AD |  if_e	jmp	#LR__4751
30978     18 35 02 F6 | 	mov	local08, local06
3097c     0C 28 06 F1 | 	add	local02, #12
30980     14 35 02 F1 | 	add	local08, local02
30984     1A 3B C2 FA | 	rdbyte	local11, local08
30988     1D 41 32 F9 | 	getword	local14, local11, #0
3098c     2E 40 0E F2 | 	cmp	local14, #46 wz
30990     0C 28 86 F1 | 	sub	local02, #12
30994     10 42 06 A6 |  if_e	mov	local15, #16
30998     1D 41 32 F9 | 	getword	local14, local11, #0
3099c     41 40 16 F2 | 	cmp	local14, #65 wc
309a0     30 00 90 CD |  if_b	jmp	#LR__4750
309a4     1D 35 32 F9 | 	getword	local08, local11, #0
309a8     5B 34 16 F2 | 	cmp	local08, #91 wc
309ac     24 00 90 3D |  if_ae	jmp	#LR__4750
309b0     1C 26 06 F1 | 	add	local01, #28
309b4     13 37 02 FB | 	rdlong	local09, local01
309b8     1C 26 86 F1 | 	sub	local01, #28
309bc     0C 36 06 F1 | 	add	local09, #12
309c0     1B 39 C2 FA | 	rdbyte	local10, local09
309c4     21 41 E2 F8 | 	getbyte	local14, local15, #0
309c8     20 39 CA F7 | 	test	local10, local14 wz
309cc     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
309d0     20 3A 06 51 |  if_ne	add	local11, #32
309d4                 | LR__4750
309d4     17 41 02 F6 | 	mov	local14, local05
309d8     1C 28 06 F1 | 	add	local02, #28
309dc     14 41 02 F1 | 	add	local14, local02
309e0     1D 3B 32 F9 | 	getword	local11, local11, #0
309e4     20 3B 42 FC | 	wrbyte	local11, local14
309e8     01 30 06 F1 | 	add	local06, #1
309ec     01 2E 06 F1 | 	add	local05, #1
309f0     1C 28 86 F1 | 	sub	local02, #28
309f4     68 FF 9F FD | 	jmp	#LR__4749
309f8                 | LR__4751
309f8                 | LR__4752
309f8     1C 28 06 F1 | 	add	local02, #28
309fc     14 2F 02 F1 | 	add	local05, local02
30a00     17 01 48 FC | 	wrbyte	#0, local05
30a04     1C 26 06 F1 | 	add	local01, #28
30a08     13 2D 02 FB | 	rdlong	local04, local01
30a0c     1C 26 86 F1 | 	sub	local01, #28
30a10     0C 2C 06 F1 | 	add	local04, #12
30a14     16 3F CA FA | 	rdbyte	local13, local04 wz
30a18     1C 28 86 F1 | 	sub	local02, #28
30a1c     0C 28 06 A1 |  if_e	add	local02, #12
30a20     14 01 48 AC |  if_e	wrbyte	#0, local02
30a24     0C 28 86 A1 |  if_e	sub	local02, #12
30a28                 | LR__4753
30a28     1C 26 06 F1 | 	add	local01, #28
30a2c     13 3D 02 FB | 	rdlong	local12, local01
30a30     0B 3C 06 F1 | 	add	local12, #11
30a34     1E 2D C2 FA | 	rdbyte	local04, local12
30a38     3F 2C 06 F5 | 	and	local04, #63
30a3c     08 28 06 F1 | 	add	local02, #8
30a40     14 2D 42 FC | 	wrbyte	local04, local02
30a44     08 28 86 F1 | 	sub	local02, #8
30a48     13 13 02 FB | 	rdlong	arg01, local01
30a4c     1C 12 06 F1 | 	add	arg01, #28
30a50                 | ' {
30a50                 | ' 
30a50                 | ' 	return *((DWORD*)ptr);
30a50     09 FB 01 FB | 	rdlong	result1, arg01
30a54     14 FB 61 FC | 	wrlong	result1, local02
30a58     13 13 02 FB | 	rdlong	arg01, local01
30a5c     16 12 06 F1 | 	add	arg01, #22
30a60                 | ' {
30a60                 | ' 
30a60                 | ' 	return *((WORD*)ptr);
30a60     09 FB E1 FA | 	rdword	result1, arg01
30a64     06 28 06 F1 | 	add	local02, #6
30a68     14 FB 51 FC | 	wrword	result1, local02
30a6c     13 13 02 FB | 	rdlong	arg01, local01
30a70     18 12 06 F1 | 	add	arg01, #24
30a74                 | ' {
30a74                 | ' 
30a74                 | ' 	return *((WORD*)ptr);
30a74     09 FB E1 FA | 	rdword	result1, arg01
30a78     02 28 86 F1 | 	sub	local02, #2
30a7c     14 FB 51 FC | 	wrword	result1, local02
30a80                 | LR__4754
30a80     A7 F0 03 F6 | 	mov	ptra, fp
30a84     B2 00 A0 FD | 	call	#popregs_
30a88                 | _fatfs_cc_get_fileinfo_ret
30a88     2D 00 64 FD | 	ret
30a8c                 | 
30a8c                 | _fatfs_cc_create_name
30a8c     0D 4A 05 F6 | 	mov	COUNT_, #13
30a90     A8 00 A0 FD | 	call	#pushregs_
30a94     34 F0 07 F1 | 	add	ptra, #52
30a98     04 4E 05 F1 | 	add	fp, #4
30a9c     A7 12 62 FC | 	wrlong	arg01, fp
30aa0     04 4E 05 F1 | 	add	fp, #4
30aa4     A7 14 62 FC | 	wrlong	arg02, fp
30aa8     0A FB 01 FB | 	rdlong	result1, arg02
30aac     28 4E 05 F1 | 	add	fp, #40
30ab0     A7 FA 61 FC | 	wrlong	result1, fp
30ab4     2C 4E 85 F1 | 	sub	fp, #44
30ab8     A7 FA 01 FB | 	rdlong	result1, fp
30abc     FD 26 02 FB | 	rdlong	local01, result1
30ac0     0C 26 06 F1 | 	add	local01, #12
30ac4     13 29 02 FB | 	rdlong	local02, local01
30ac8     14 4E 05 F1 | 	add	fp, #20
30acc     A7 28 62 FC | 	wrlong	local02, fp
30ad0     14 4E 05 F1 | 	add	fp, #20
30ad4     A7 00 68 FC | 	wrlong	#0, fp
30ad8     2C 4E 85 F1 | 	sub	fp, #44
30adc                 | ' 
30adc                 | ' 
30adc                 | ' 
30adc                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
30adc                 | ' 	for (;;) {
30adc                 | LR__4760
30adc     30 4E 05 F1 | 	add	fp, #48
30ae0     A7 12 02 F6 | 	mov	arg01, fp
30ae4     30 4E 85 F1 | 	sub	fp, #48
30ae8     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
30aec     1C 4E 05 F1 | 	add	fp, #28
30af0     A7 FA 61 FC | 	wrlong	result1, fp
30af4     1C 4E 85 F1 | 	sub	fp, #28
30af8     FF FF 7F FF 
30afc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
30b00     06 FA 05 A6 |  if_e	mov	result1, #6
30b04     74 08 90 AD |  if_e	jmp	#LR__4800
30b08     1C 4E 05 F1 | 	add	fp, #28
30b0c     A7 26 02 FB | 	rdlong	local01, fp
30b10     1C 4E 85 F1 | 	sub	fp, #28
30b14     80 00 00 FF 
30b18     00 26 16 F2 | 	cmp	local01, ##65536 wc
30b1c     3C 00 90 CD |  if_b	jmp	#LR__4761
30b20     18 4E 05 F1 | 	add	fp, #24
30b24     A7 2A 02 FB | 	rdlong	local03, fp
30b28     14 4E 05 F1 | 	add	fp, #20
30b2c     A7 26 02 FB | 	rdlong	local01, fp
30b30     13 2D 02 F6 | 	mov	local04, local01
30b34     01 2C 06 F1 | 	add	local04, #1
30b38     A7 2C 62 FC | 	wrlong	local04, fp
30b3c     01 26 66 F0 | 	shl	local01, #1
30b40     15 27 02 F1 | 	add	local01, local03
30b44     10 4E 85 F1 | 	sub	fp, #16
30b48     A7 2E 02 FB | 	rdlong	local05, fp
30b4c     1C 4E 85 F1 | 	sub	fp, #28
30b50     17 31 02 F6 | 	mov	local06, local05
30b54     10 30 46 F0 | 	shr	local06, #16
30b58     13 31 52 FC | 	wrword	local06, local01
30b5c                 | LR__4761
30b5c     1C 4E 05 F1 | 	add	fp, #28
30b60     A7 26 02 FB | 	rdlong	local01, fp
30b64     08 4E 85 F1 | 	sub	fp, #8
30b68     A7 26 52 FC | 	wrword	local01, fp
30b6c     A7 26 E2 FA | 	rdword	local01, fp
30b70     14 4E 85 F1 | 	sub	fp, #20
30b74     20 26 16 F2 | 	cmp	local01, #32 wc
30b78     B0 00 90 CD |  if_b	jmp	#LR__4763
30b7c     14 4E 05 F1 | 	add	fp, #20
30b80     A7 26 E2 FA | 	rdword	local01, fp
30b84     14 4E 85 F1 | 	sub	fp, #20
30b88     2F 26 0E F2 | 	cmp	local01, #47 wz
30b8c     14 4E 05 51 |  if_ne	add	fp, #20
30b90     A7 2C E2 5A |  if_ne	rdword	local04, fp
30b94     14 4E 85 51 |  if_ne	sub	fp, #20
30b98     5C 2C 0E 52 |  if_ne	cmp	local04, #92 wz
30b9c     8C 00 90 AD |  if_e	jmp	#LR__4763
30ba0     14 4E 05 F1 | 	add	fp, #20
30ba4     A7 12 E2 FA | 	rdword	arg01, fp
30ba8     14 4E 85 F1 | 	sub	fp, #20
30bac     80 12 16 F2 | 	cmp	arg01, #128 wc
30bb0     24 00 90 3D |  if_ae	jmp	#LR__4762
30bb4     B5 01 00 FF 
30bb8     EC 12 06 F6 | 	mov	arg01, ##@LR__5422
30bbc     14 4E 05 F1 | 	add	fp, #20
30bc0     A7 14 E2 FA | 	rdword	arg02, fp
30bc4     14 4E 85 F1 | 	sub	fp, #20
30bc8     FC D0 BF FD | 	call	#_fatfs_cc_strchr
30bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
30bd0     06 FA 05 56 |  if_ne	mov	result1, #6
30bd4     A4 07 90 5D |  if_ne	jmp	#LR__4800
30bd8                 | LR__4762
30bd8     2C 4E 05 F1 | 	add	fp, #44
30bdc     A7 30 02 FB | 	rdlong	local06, fp
30be0     2C 4E 85 F1 | 	sub	fp, #44
30be4     FF 30 16 F2 | 	cmp	local06, #255 wc
30be8     06 FA 05 36 |  if_ae	mov	result1, #6
30bec     8C 07 90 3D |  if_ae	jmp	#LR__4800
30bf0     18 4E 05 F1 | 	add	fp, #24
30bf4     A7 2A 02 FB | 	rdlong	local03, fp
30bf8     14 4E 05 F1 | 	add	fp, #20
30bfc     A7 28 02 FB | 	rdlong	local02, fp
30c00     14 2D 02 F6 | 	mov	local04, local02
30c04     01 2C 06 F1 | 	add	local04, #1
30c08     A7 2C 62 FC | 	wrlong	local04, fp
30c0c     14 27 02 F6 | 	mov	local01, local02
30c10     01 26 66 F0 | 	shl	local01, #1
30c14     15 27 02 F1 | 	add	local01, local03
30c18     18 4E 85 F1 | 	sub	fp, #24
30c1c     A7 30 E2 FA | 	rdword	local06, fp
30c20     14 4E 85 F1 | 	sub	fp, #20
30c24     13 31 52 FC | 	wrword	local06, local01
30c28     B0 FE 9F FD | 	jmp	#LR__4760
30c2c                 | LR__4763
30c2c     14 4E 05 F1 | 	add	fp, #20
30c30     A7 32 E2 FA | 	rdword	local07, fp
30c34     14 4E 85 F1 | 	sub	fp, #20
30c38     20 32 16 F2 | 	cmp	local07, #32 wc
30c3c     10 4E 05 C1 |  if_b	add	fp, #16
30c40     A7 08 48 CC |  if_b	wrbyte	#4, fp
30c44     10 4E 85 C1 |  if_b	sub	fp, #16
30c48     74 00 90 CD |  if_b	jmp	#LR__4768
30c4c     97 24 48 FB | 	callpa	#(@LR__4766-@LR__4764)>>2,fcache_load_ptr_
30c50                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
30c50                 | LR__4764
30c50     30 4E 05 F1 | 	add	fp, #48
30c54     A7 2C 02 FB | 	rdlong	local04, fp
30c58     30 4E 85 F1 | 	sub	fp, #48
30c5c     16 33 C2 FA | 	rdbyte	local07, local04
30c60     2F 32 0E F2 | 	cmp	local07, #47 wz
30c64     18 00 90 AD |  if_e	jmp	#LR__4765
30c68     30 4E 05 F1 | 	add	fp, #48
30c6c     A7 2C 02 FB | 	rdlong	local04, fp
30c70     30 4E 85 F1 | 	sub	fp, #48
30c74     16 29 C2 FA | 	rdbyte	local02, local04
30c78     5C 28 0E F2 | 	cmp	local02, #92 wz
30c7c     18 00 90 5D |  if_ne	jmp	#LR__4767
30c80                 | LR__4765
30c80     30 4E 05 F1 | 	add	fp, #48
30c84     A7 26 02 FB | 	rdlong	local01, fp
30c88     01 26 06 F1 | 	add	local01, #1
30c8c     A7 26 62 FC | 	wrlong	local01, fp
30c90     30 4E 85 F1 | 	sub	fp, #48
30c94     B8 FF 9F FD | 	jmp	#LR__4764
30c98                 | LR__4766
30c98                 | LR__4767
30c98     10 4E 05 F1 | 	add	fp, #16
30c9c     A7 00 48 FC | 	wrbyte	#0, fp
30ca0     20 4E 05 F1 | 	add	fp, #32
30ca4     A7 30 02 FB | 	rdlong	local06, fp
30ca8     30 4E 85 F1 | 	sub	fp, #48
30cac     18 33 C2 FA | 	rdbyte	local07, local06
30cb0     20 32 16 F2 | 	cmp	local07, #32 wc
30cb4     10 4E 05 C1 |  if_b	add	fp, #16
30cb8     A7 08 48 CC |  if_b	wrbyte	#4, fp
30cbc     10 4E 85 C1 |  if_b	sub	fp, #16
30cc0                 | LR__4768
30cc0     08 4E 05 F1 | 	add	fp, #8
30cc4     A7 32 02 FB | 	rdlong	local07, fp
30cc8     28 4E 05 F1 | 	add	fp, #40
30ccc     A7 26 02 FB | 	rdlong	local01, fp
30cd0     30 4E 85 F1 | 	sub	fp, #48
30cd4     19 27 62 FC | 	wrlong	local01, local07
30cd8     97 38 48 FB | 	callpa	#(@LR__4770-@LR__4769)>>2,fcache_load_ptr_
30cdc                 | ' 	}
30cdc                 | ' 	*path = p;
30cdc                 | ' #line 2862 "ff.c"
30cdc                 | ' 	while (di) {
30cdc                 | LR__4769
30cdc     2C 4E 05 F1 | 	add	fp, #44
30ce0     A7 32 0A FB | 	rdlong	local07, fp wz
30ce4     2C 4E 85 F1 | 	sub	fp, #44
30ce8     60 00 90 AD |  if_e	jmp	#LR__4771
30cec     18 4E 05 F1 | 	add	fp, #24
30cf0     A7 30 02 FB | 	rdlong	local06, fp
30cf4     14 4E 05 F1 | 	add	fp, #20
30cf8     A7 2C 02 FB | 	rdlong	local04, fp
30cfc     01 2C 86 F1 | 	sub	local04, #1
30d00     01 2C 66 F0 | 	shl	local04, #1
30d04     18 2D 02 F1 | 	add	local04, local06
30d08     16 31 E2 FA | 	rdword	local06, local04
30d0c     18 4E 85 F1 | 	sub	fp, #24
30d10     A7 30 52 FC | 	wrword	local06, fp
30d14     A7 32 E2 FA | 	rdword	local07, fp
30d18     14 4E 85 F1 | 	sub	fp, #20
30d1c     20 32 0E F2 | 	cmp	local07, #32 wz
30d20     14 4E 05 51 |  if_ne	add	fp, #20
30d24     A7 26 E2 5A |  if_ne	rdword	local01, fp
30d28     14 4E 85 51 |  if_ne	sub	fp, #20
30d2c     2E 26 0E 52 |  if_ne	cmp	local01, #46 wz
30d30     18 00 90 5D |  if_ne	jmp	#LR__4771
30d34     2C 4E 05 F1 | 	add	fp, #44
30d38     A7 26 02 FB | 	rdlong	local01, fp
30d3c     01 26 86 F1 | 	sub	local01, #1
30d40     A7 26 62 FC | 	wrlong	local01, fp
30d44     2C 4E 85 F1 | 	sub	fp, #44
30d48     90 FF 9F FD | 	jmp	#LR__4769
30d4c                 | LR__4770
30d4c                 | LR__4771
30d4c     18 4E 05 F1 | 	add	fp, #24
30d50     A7 34 02 FB | 	rdlong	local08, fp
30d54     14 4E 05 F1 | 	add	fp, #20
30d58     A7 2C 02 FB | 	rdlong	local04, fp
30d5c     01 2C 66 F0 | 	shl	local04, #1
30d60     1A 2D 02 F1 | 	add	local04, local08
30d64     16 01 58 FC | 	wrword	#0, local04
30d68     A7 32 0A FB | 	rdlong	local07, fp wz
30d6c     2C 4E 85 F1 | 	sub	fp, #44
30d70     06 FA 05 A6 |  if_e	mov	result1, #6
30d74     04 06 90 AD |  if_e	jmp	#LR__4800
30d78                 | ' 
30d78                 | ' 
30d78                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
30d78     28 4E 05 F1 | 	add	fp, #40
30d7c     A7 00 68 FC | 	wrlong	#0, fp
30d80     28 4E 85 F1 | 	sub	fp, #40
30d84     97 22 48 FB | 	callpa	#(@LR__4773-@LR__4772)>>2,fcache_load_ptr_
30d88                 | LR__4772
30d88     18 4E 05 F1 | 	add	fp, #24
30d8c     A7 36 02 FB | 	rdlong	local09, fp
30d90     10 4E 05 F1 | 	add	fp, #16
30d94     A7 38 02 FB | 	rdlong	local10, fp
30d98     28 4E 85 F1 | 	sub	fp, #40
30d9c     01 38 66 F0 | 	shl	local10, #1
30da0     1B 39 02 F1 | 	add	local10, local09
30da4     1C 3B E2 FA | 	rdword	local11, local10
30da8     20 3A 0E F2 | 	cmp	local11, #32 wz
30dac     1C 00 90 5D |  if_ne	jmp	#LR__4774
30db0     28 4E 05 F1 | 	add	fp, #40
30db4     A7 3C 02 FB | 	rdlong	local12, fp
30db8     1E 2F 02 F6 | 	mov	local05, local12
30dbc     01 2E 06 F1 | 	add	local05, #1
30dc0     A7 2E 62 FC | 	wrlong	local05, fp
30dc4     28 4E 85 F1 | 	sub	fp, #40
30dc8     BC FF 9F FD | 	jmp	#LR__4772
30dcc                 | LR__4773
30dcc                 | LR__4774
30dcc     28 4E 05 F1 | 	add	fp, #40
30dd0     A7 32 02 FB | 	rdlong	local07, fp
30dd4     28 4E 85 F1 | 	sub	fp, #40
30dd8     01 32 16 F2 | 	cmp	local07, #1 wc
30ddc     28 00 90 3D |  if_ae	jmp	#LR__4775
30de0     18 4E 05 F1 | 	add	fp, #24
30de4     A7 2A 02 FB | 	rdlong	local03, fp
30de8     10 4E 05 F1 | 	add	fp, #16
30dec     A7 36 02 FB | 	rdlong	local09, fp
30df0     28 4E 85 F1 | 	sub	fp, #40
30df4     01 36 66 F0 | 	shl	local09, #1
30df8     15 37 02 F1 | 	add	local09, local03
30dfc     1B 27 E2 FA | 	rdword	local01, local09
30e00     2E 26 0E F2 | 	cmp	local01, #46 wz
30e04     14 00 90 5D |  if_ne	jmp	#LR__4776
30e08                 | LR__4775
30e08     10 4E 05 F1 | 	add	fp, #16
30e0c     A7 32 C2 FA | 	rdbyte	local07, fp
30e10     03 32 46 F5 | 	or	local07, #3
30e14     A7 32 42 FC | 	wrbyte	local07, fp
30e18     10 4E 85 F1 | 	sub	fp, #16
30e1c                 | LR__4776
30e1c     97 2C 48 FB | 	callpa	#(@LR__4778-@LR__4777)>>2,fcache_load_ptr_
30e20                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
30e20                 | LR__4777
30e20     2C 4E 05 F1 | 	add	fp, #44
30e24     A7 32 02 FB | 	rdlong	local07, fp
30e28     2C 4E 85 F1 | 	sub	fp, #44
30e2c     01 32 16 F2 | 	cmp	local07, #1 wc
30e30     44 00 90 CD |  if_b	jmp	#LR__4779
30e34     18 4E 05 F1 | 	add	fp, #24
30e38     A7 30 02 FB | 	rdlong	local06, fp
30e3c     14 4E 05 F1 | 	add	fp, #20
30e40     A7 2A 02 FB | 	rdlong	local03, fp
30e44     2C 4E 85 F1 | 	sub	fp, #44
30e48     01 2A 86 F1 | 	sub	local03, #1
30e4c     01 2A 66 F0 | 	shl	local03, #1
30e50     18 2B 02 F1 | 	add	local03, local06
30e54     15 27 E2 FA | 	rdword	local01, local03
30e58     2E 26 0E F2 | 	cmp	local01, #46 wz
30e5c     18 00 90 AD |  if_e	jmp	#LR__4779
30e60     2C 4E 05 F1 | 	add	fp, #44
30e64     A7 26 02 FB | 	rdlong	local01, fp
30e68     01 26 86 F1 | 	sub	local01, #1
30e6c     A7 26 62 FC | 	wrlong	local01, fp
30e70     2C 4E 85 F1 | 	sub	fp, #44
30e74     A8 FF 9F FD | 	jmp	#LR__4777
30e78                 | LR__4778
30e78                 | LR__4779
30e78     04 4E 05 F1 | 	add	fp, #4
30e7c     A7 12 02 FB | 	rdlong	arg01, fp
30e80     04 4E 85 F1 | 	sub	fp, #4
30e84     20 12 06 F1 | 	add	arg01, #32
30e88     20 14 06 F6 | 	mov	arg02, #32
30e8c     0B 16 06 F6 | 	mov	arg03, #11
30e90     09 3F 02 F6 | 	mov	local13, arg01
30e94     98 00 A0 FD | 	call	#\builtin_bytefill_
30e98     1F FB 01 F6 | 	mov	result1, local13
30e9c     0C 4E 05 F1 | 	add	fp, #12
30ea0     A7 00 48 FC | 	wrbyte	#0, fp
30ea4     A7 32 C2 FA | 	rdbyte	local07, fp
30ea8     14 4E 05 F1 | 	add	fp, #20
30eac     A7 32 62 FC | 	wrlong	local07, fp
30eb0     04 4E 05 F1 | 	add	fp, #4
30eb4     A7 10 68 FC | 	wrlong	#8, fp
30eb8     24 4E 85 F1 | 	sub	fp, #36
30ebc                 | ' 
30ebc                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
30ebc                 | ' 	i = b = 0; ni = 8;
30ebc                 | ' 	for (;;) {
30ebc                 | LR__4780
30ebc     18 4E 05 F1 | 	add	fp, #24
30ec0     A7 2A 02 FB | 	rdlong	local03, fp
30ec4     10 4E 05 F1 | 	add	fp, #16
30ec8     A7 36 02 FB | 	rdlong	local09, fp
30ecc     1B 2D 02 F6 | 	mov	local04, local09
30ed0     01 2C 06 F1 | 	add	local04, #1
30ed4     A7 2C 62 FC | 	wrlong	local04, fp
30ed8     01 36 66 F0 | 	shl	local09, #1
30edc     15 37 02 F1 | 	add	local09, local03
30ee0     1B 31 E2 FA | 	rdword	local06, local09
30ee4     14 4E 85 F1 | 	sub	fp, #20
30ee8     A7 30 52 FC | 	wrword	local06, fp
30eec     A7 32 EA FA | 	rdword	local07, fp wz
30ef0     14 4E 85 F1 | 	sub	fp, #20
30ef4     74 03 90 AD |  if_e	jmp	#LR__4796
30ef8     14 4E 05 F1 | 	add	fp, #20
30efc     A7 32 E2 FA | 	rdword	local07, fp
30f00     14 4E 85 F1 | 	sub	fp, #20
30f04     20 32 0E F2 | 	cmp	local07, #32 wz
30f08     30 00 90 AD |  if_e	jmp	#LR__4781
30f0c     14 4E 05 F1 | 	add	fp, #20
30f10     A7 26 E2 FA | 	rdword	local01, fp
30f14     14 4E 85 F1 | 	sub	fp, #20
30f18     2E 26 0E F2 | 	cmp	local01, #46 wz
30f1c     34 00 90 5D |  if_ne	jmp	#LR__4782
30f20     28 4E 05 F1 | 	add	fp, #40
30f24     A7 2C 02 FB | 	rdlong	local04, fp
30f28     04 4E 05 F1 | 	add	fp, #4
30f2c     A7 38 02 FB | 	rdlong	local10, fp
30f30     2C 4E 85 F1 | 	sub	fp, #44
30f34     1C 2D 0A F2 | 	cmp	local04, local10 wz
30f38     18 00 90 AD |  if_e	jmp	#LR__4782
30f3c                 | LR__4781
30f3c     10 4E 05 F1 | 	add	fp, #16
30f40     A7 32 C2 FA | 	rdbyte	local07, fp
30f44     03 32 46 F5 | 	or	local07, #3
30f48     A7 32 42 FC | 	wrbyte	local07, fp
30f4c     10 4E 85 F1 | 	sub	fp, #16
30f50                 | ' 			cf |=  0x01  |  0x02 ;
30f50                 | ' 			continue;
30f50     68 FF 9F FD | 	jmp	#LR__4780
30f54                 | LR__4782
30f54     20 4E 05 F1 | 	add	fp, #32
30f58     A7 32 02 FB | 	rdlong	local07, fp
30f5c     04 4E 05 F1 | 	add	fp, #4
30f60     A7 26 02 FB | 	rdlong	local01, fp
30f64     24 4E 85 F1 | 	sub	fp, #36
30f68     13 33 12 F2 | 	cmp	local07, local01 wc
30f6c     1C 00 90 3D |  if_ae	jmp	#LR__4783
30f70     28 4E 05 F1 | 	add	fp, #40
30f74     A7 34 02 FB | 	rdlong	local08, fp
30f78     04 4E 05 F1 | 	add	fp, #4
30f7c     A7 38 02 FB | 	rdlong	local10, fp
30f80     2C 4E 85 F1 | 	sub	fp, #44
30f84     1C 35 0A F2 | 	cmp	local08, local10 wz
30f88     B0 00 90 5D |  if_ne	jmp	#LR__4785
30f8c                 | LR__4783
30f8c     24 4E 05 F1 | 	add	fp, #36
30f90     A7 32 02 FB | 	rdlong	local07, fp
30f94     24 4E 85 F1 | 	sub	fp, #36
30f98     0B 32 0E F2 | 	cmp	local07, #11 wz
30f9c     18 00 90 5D |  if_ne	jmp	#LR__4784
30fa0     10 4E 05 F1 | 	add	fp, #16
30fa4     A7 32 C2 FA | 	rdbyte	local07, fp
30fa8     03 32 46 F5 | 	or	local07, #3
30fac     A7 32 42 FC | 	wrbyte	local07, fp
30fb0     10 4E 85 F1 | 	sub	fp, #16
30fb4                 | ' 				cf |=  0x01  |  0x02 ;
30fb4                 | ' 				break;
30fb4     B4 02 90 FD | 	jmp	#LR__4796
30fb8                 | LR__4784
30fb8     28 4E 05 F1 | 	add	fp, #40
30fbc     A7 32 02 FB | 	rdlong	local07, fp
30fc0     04 4E 05 F1 | 	add	fp, #4
30fc4     A7 26 02 FB | 	rdlong	local01, fp
30fc8     2C 4E 85 F1 | 	sub	fp, #44
30fcc     13 33 0A F2 | 	cmp	local07, local01 wz
30fd0     10 4E 05 51 |  if_ne	add	fp, #16
30fd4     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
30fd8     03 32 46 55 |  if_ne	or	local07, #3
30fdc     A7 32 42 5C |  if_ne	wrbyte	local07, fp
30fe0     10 4E 85 51 |  if_ne	sub	fp, #16
30fe4     28 4E 05 F1 | 	add	fp, #40
30fe8     A7 32 02 FB | 	rdlong	local07, fp
30fec     04 4E 05 F1 | 	add	fp, #4
30ff0     A7 28 02 FB | 	rdlong	local02, fp
30ff4     2C 4E 85 F1 | 	sub	fp, #44
30ff8     14 33 1A F2 | 	cmp	local07, local02 wcz
30ffc     6C 02 90 1D |  if_a	jmp	#LR__4796
31000     2C 4E 05 F1 | 	add	fp, #44
31004     A7 32 02 FB | 	rdlong	local07, fp
31008     04 4E 85 F1 | 	sub	fp, #4
3100c     A7 32 62 FC | 	wrlong	local07, fp
31010     08 4E 85 F1 | 	sub	fp, #8
31014     A7 10 68 FC | 	wrlong	#8, fp
31018     04 4E 05 F1 | 	add	fp, #4
3101c     A7 16 68 FC | 	wrlong	#11, fp
31020     18 4E 85 F1 | 	sub	fp, #24
31024     A7 3A C2 FA | 	rdbyte	local11, fp
31028     1D 33 E2 F8 | 	getbyte	local07, local11, #0
3102c     02 32 66 F0 | 	shl	local07, #2
31030     A7 32 42 FC | 	wrbyte	local07, fp
31034     0C 4E 85 F1 | 	sub	fp, #12
31038                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
31038                 | ' 			continue;
31038     80 FE 9F FD | 	jmp	#LR__4780
3103c                 | LR__4785
3103c     14 4E 05 F1 | 	add	fp, #20
31040     A7 32 E2 FA | 	rdword	local07, fp
31044     14 4E 85 F1 | 	sub	fp, #20
31048     80 32 16 F2 | 	cmp	local07, #128 wc
3104c     6C 00 90 CD |  if_b	jmp	#LR__4787
31050     10 4E 05 F1 | 	add	fp, #16
31054     A7 32 C2 FA | 	rdbyte	local07, fp
31058     02 32 46 F5 | 	or	local07, #2
3105c     A7 32 42 FC | 	wrbyte	local07, fp
31060     04 4E 05 F1 | 	add	fp, #4
31064     A7 12 E2 FA | 	rdword	arg01, fp
31068     14 4E 85 F1 | 	sub	fp, #20
3106c     01 00 00 FF 
31070     52 15 06 F6 | 	mov	arg02, ##850
31074     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
31078     14 4E 05 F1 | 	add	fp, #20
3107c     A7 FA 51 FC | 	wrword	result1, fp
31080     A7 32 E2 FA | 	rdword	local07, fp
31084     14 4E 85 F1 | 	sub	fp, #20
31088     80 32 CE F7 | 	test	local07, #128 wz
3108c     2C 00 90 AD |  if_e	jmp	#LR__4786
31090     14 4E 05 F1 | 	add	fp, #20
31094     A7 28 E2 FA | 	rdword	local02, fp
31098     7F 28 06 F5 | 	and	local02, #127
3109c     01 00 00 FF 
310a0     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
310a4     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
310a8     14 33 C2 FA | 	rdbyte	local07, local02
310ac     A7 32 52 FC | 	wrword	local07, fp
310b0     14 4E 85 F1 | 	sub	fp, #20
310b4     01 00 00 FF 
310b8     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
310bc                 | LR__4786
310bc                 | LR__4787
310bc     14 4E 05 F1 | 	add	fp, #20
310c0     A7 32 E2 FA | 	rdword	local07, fp
310c4     14 4E 85 F1 | 	sub	fp, #20
310c8     00 33 16 F2 | 	cmp	local07, #256 wc
310cc     88 00 90 CD |  if_b	jmp	#LR__4789
310d0     24 4E 05 F1 | 	add	fp, #36
310d4     A7 32 02 FB | 	rdlong	local07, fp
310d8     01 32 86 F1 | 	sub	local07, #1
310dc     04 4E 85 F1 | 	sub	fp, #4
310e0     A7 28 02 FB | 	rdlong	local02, fp
310e4     20 4E 85 F1 | 	sub	fp, #32
310e8     19 29 12 F2 | 	cmp	local02, local07 wc
310ec     2C 00 90 CD |  if_b	jmp	#LR__4788
310f0     10 4E 05 F1 | 	add	fp, #16
310f4     A7 3A C2 FA | 	rdbyte	local11, fp
310f8     1D 33 E2 F8 | 	getbyte	local07, local11, #0
310fc     03 32 46 F5 | 	or	local07, #3
31100     A7 32 42 FC | 	wrbyte	local07, fp
31104     14 4E 05 F1 | 	add	fp, #20
31108     A7 32 02 FB | 	rdlong	local07, fp
3110c     04 4E 85 F1 | 	sub	fp, #4
31110     A7 32 62 FC | 	wrlong	local07, fp
31114     20 4E 85 F1 | 	sub	fp, #32
31118                 | ' 				cf |=  0x01  |  0x02 ;
31118                 | ' 				i = ni; continue;
31118     A0 FD 9F FD | 	jmp	#LR__4780
3111c                 | LR__4788
3111c     04 4E 05 F1 | 	add	fp, #4
31120     A7 36 02 FB | 	rdlong	local09, fp
31124     1C 4E 05 F1 | 	add	fp, #28
31128     A7 38 02 FB | 	rdlong	local10, fp
3112c     1C 2D 02 F6 | 	mov	local04, local10
31130     01 2C 06 F1 | 	add	local04, #1
31134     A7 2C 62 FC | 	wrlong	local04, fp
31138     20 36 06 F1 | 	add	local09, #32
3113c     1B 39 02 F1 | 	add	local10, local09
31140     0C 4E 85 F1 | 	sub	fp, #12
31144     A7 2A E2 FA | 	rdword	local03, fp
31148     14 4E 85 F1 | 	sub	fp, #20
3114c     08 2A 46 F0 | 	shr	local03, #8
31150     1C 2B 42 FC | 	wrbyte	local03, local10
31154     D4 00 90 FD | 	jmp	#LR__4795
31158                 | LR__4789
31158     14 4E 05 F1 | 	add	fp, #20
3115c     A7 32 EA FA | 	rdword	local07, fp wz
31160     14 4E 85 F1 | 	sub	fp, #20
31164     20 00 90 AD |  if_e	jmp	#LR__4790
31168     B5 01 00 FF 
3116c     F5 12 06 F6 | 	mov	arg01, ##@LR__5423
31170     14 4E 05 F1 | 	add	fp, #20
31174     A7 14 E2 FA | 	rdword	arg02, fp
31178     14 4E 85 F1 | 	sub	fp, #20
3117c     48 CB BF FD | 	call	#_fatfs_cc_strchr
31180     00 FA 0D F2 | 	cmp	result1, #0 wz
31184     20 00 90 AD |  if_e	jmp	#LR__4791
31188                 | LR__4790
31188     14 4E 05 F1 | 	add	fp, #20
3118c     A7 BE 58 FC | 	wrword	#95, fp
31190     04 4E 85 F1 | 	sub	fp, #4
31194     A7 32 C2 FA | 	rdbyte	local07, fp
31198     03 32 46 F5 | 	or	local07, #3
3119c     A7 32 42 FC | 	wrbyte	local07, fp
311a0     10 4E 85 F1 | 	sub	fp, #16
311a4     84 00 90 FD | 	jmp	#LR__4794
311a8                 | LR__4791
311a8     14 4E 05 F1 | 	add	fp, #20
311ac     A7 32 E2 FA | 	rdword	local07, fp
311b0     14 4E 85 F1 | 	sub	fp, #20
311b4     41 32 16 F2 | 	cmp	local07, #65 wc
311b8     24 00 90 CD |  if_b	jmp	#LR__4792
311bc     14 4E 05 F1 | 	add	fp, #20
311c0     A7 26 E2 FA | 	rdword	local01, fp
311c4     14 4E 85 F1 | 	sub	fp, #20
311c8     5B 26 16 F2 | 	cmp	local01, #91 wc
311cc     0C 4E 05 C1 |  if_b	add	fp, #12
311d0     A7 32 C2 CA |  if_b	rdbyte	local07, fp
311d4     02 32 46 C5 |  if_b	or	local07, #2
311d8     A7 32 42 CC |  if_b	wrbyte	local07, fp
311dc     0C 4E 85 C1 |  if_b	sub	fp, #12
311e0                 | LR__4792
311e0     14 4E 05 F1 | 	add	fp, #20
311e4     A7 32 E2 FA | 	rdword	local07, fp
311e8     14 4E 85 F1 | 	sub	fp, #20
311ec     61 32 16 F2 | 	cmp	local07, #97 wc
311f0     38 00 90 CD |  if_b	jmp	#LR__4793
311f4     14 4E 05 F1 | 	add	fp, #20
311f8     A7 26 E2 FA | 	rdword	local01, fp
311fc     14 4E 85 F1 | 	sub	fp, #20
31200     7B 26 16 F2 | 	cmp	local01, #123 wc
31204     24 00 90 3D |  if_ae	jmp	#LR__4793
31208     0C 4E 05 F1 | 	add	fp, #12
3120c     A7 32 C2 FA | 	rdbyte	local07, fp
31210     01 32 46 F5 | 	or	local07, #1
31214     A7 32 42 FC | 	wrbyte	local07, fp
31218     08 4E 05 F1 | 	add	fp, #8
3121c     A7 32 E2 FA | 	rdword	local07, fp
31220     20 32 86 F1 | 	sub	local07, #32
31224     A7 32 52 FC | 	wrword	local07, fp
31228     14 4E 85 F1 | 	sub	fp, #20
3122c                 | LR__4793
3122c                 | LR__4794
3122c                 | LR__4795
3122c     04 4E 05 F1 | 	add	fp, #4
31230     A7 3A 02 FB | 	rdlong	local11, fp
31234     1D 37 02 F6 | 	mov	local09, local11
31238     1C 4E 05 F1 | 	add	fp, #28
3123c     A7 28 02 FB | 	rdlong	local02, fp
31240     14 2D 02 F6 | 	mov	local04, local02
31244     01 2C 06 F1 | 	add	local04, #1
31248     A7 2C 62 FC | 	wrlong	local04, fp
3124c     14 39 02 F6 | 	mov	local10, local02
31250     20 36 06 F1 | 	add	local09, #32
31254     1B 39 02 F1 | 	add	local10, local09
31258     0C 4E 85 F1 | 	sub	fp, #12
3125c     A7 2A E2 FA | 	rdword	local03, fp
31260     14 4E 85 F1 | 	sub	fp, #20
31264     1C 2B 42 FC | 	wrbyte	local03, local10
31268     50 FC 9F FD | 	jmp	#LR__4780
3126c                 | LR__4796
3126c     04 4E 05 F1 | 	add	fp, #4
31270     A7 3A 02 FB | 	rdlong	local11, fp
31274     04 4E 85 F1 | 	sub	fp, #4
31278     20 3A 06 F1 | 	add	local11, #32
3127c     1D 33 C2 FA | 	rdbyte	local07, local11
31280     E5 32 0E F2 | 	cmp	local07, #229 wz
31284     04 4E 05 A1 |  if_e	add	fp, #4
31288     A7 32 02 AB |  if_e	rdlong	local07, fp
3128c     04 4E 85 A1 |  if_e	sub	fp, #4
31290     20 32 06 A1 |  if_e	add	local07, #32
31294     19 0B 48 AC |  if_e	wrbyte	#5, local07
31298     24 4E 05 F1 | 	add	fp, #36
3129c     A7 32 02 FB | 	rdlong	local07, fp
312a0     24 4E 85 F1 | 	sub	fp, #36
312a4     08 32 0E F2 | 	cmp	local07, #8 wz
312a8     0C 4E 05 A1 |  if_e	add	fp, #12
312ac     A7 32 C2 AA |  if_e	rdbyte	local07, fp
312b0     02 32 66 A0 |  if_e	shl	local07, #2
312b4     A7 32 42 AC |  if_e	wrbyte	local07, fp
312b8     0C 4E 85 A1 |  if_e	sub	fp, #12
312bc     0C 4E 05 F1 | 	add	fp, #12
312c0     A7 32 C2 FA | 	rdbyte	local07, fp
312c4     0C 4E 85 F1 | 	sub	fp, #12
312c8     0C 32 06 F5 | 	and	local07, #12
312cc     0C 32 0E F2 | 	cmp	local07, #12 wz
312d0     18 00 90 AD |  if_e	jmp	#LR__4797
312d4     0C 4E 05 F1 | 	add	fp, #12
312d8     A7 26 C2 FA | 	rdbyte	local01, fp
312dc     0C 4E 85 F1 | 	sub	fp, #12
312e0     03 26 06 F5 | 	and	local01, #3
312e4     03 26 0E F2 | 	cmp	local01, #3 wz
312e8     14 00 90 5D |  if_ne	jmp	#LR__4798
312ec                 | LR__4797
312ec     10 4E 05 F1 | 	add	fp, #16
312f0     A7 32 C2 FA | 	rdbyte	local07, fp
312f4     02 32 46 F5 | 	or	local07, #2
312f8     A7 32 42 FC | 	wrbyte	local07, fp
312fc     10 4E 85 F1 | 	sub	fp, #16
31300                 | LR__4798
31300     10 4E 05 F1 | 	add	fp, #16
31304     A7 32 C2 FA | 	rdbyte	local07, fp
31308     10 4E 85 F1 | 	sub	fp, #16
3130c     02 32 CE F7 | 	test	local07, #2 wz
31310     48 00 90 5D |  if_ne	jmp	#LR__4799
31314     0C 4E 05 F1 | 	add	fp, #12
31318     A7 32 C2 FA | 	rdbyte	local07, fp
3131c     0C 4E 85 F1 | 	sub	fp, #12
31320     01 32 CE F7 | 	test	local07, #1 wz
31324     10 4E 05 51 |  if_ne	add	fp, #16
31328     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
3132c     10 32 46 55 |  if_ne	or	local07, #16
31330     A7 32 42 5C |  if_ne	wrbyte	local07, fp
31334     10 4E 85 51 |  if_ne	sub	fp, #16
31338     0C 4E 05 F1 | 	add	fp, #12
3133c     A7 32 C2 FA | 	rdbyte	local07, fp
31340     0C 4E 85 F1 | 	sub	fp, #12
31344     04 32 CE F7 | 	test	local07, #4 wz
31348     10 4E 05 51 |  if_ne	add	fp, #16
3134c     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
31350     08 32 46 55 |  if_ne	or	local07, #8
31354     A7 32 42 5C |  if_ne	wrbyte	local07, fp
31358     10 4E 85 51 |  if_ne	sub	fp, #16
3135c                 | LR__4799
3135c     04 4E 05 F1 | 	add	fp, #4
31360     A7 32 02 FB | 	rdlong	local07, fp
31364     0C 4E 05 F1 | 	add	fp, #12
31368     A7 26 C2 FA | 	rdbyte	local01, fp
3136c     10 4E 85 F1 | 	sub	fp, #16
31370     2B 32 06 F1 | 	add	local07, #43
31374     19 27 42 FC | 	wrbyte	local01, local07
31378                 | ' 	}
31378                 | ' 
31378                 | ' 	dp->fn[ 11 ] = cf;
31378                 | ' 
31378                 | ' 	return FR_OK;
31378     00 FA 05 F6 | 	mov	result1, #0
3137c                 | LR__4800
3137c     A7 F0 03 F6 | 	mov	ptra, fp
31380     B2 00 A0 FD | 	call	#popregs_
31384                 | _fatfs_cc_create_name_ret
31384     2D 00 64 FD | 	ret
31388                 | 
31388                 | _fatfs_cc_follow_path
31388     02 4A 05 F6 | 	mov	COUNT_, #2
3138c     A8 00 A0 FD | 	call	#pushregs_
31390     18 F0 07 F1 | 	add	ptra, #24
31394     04 4E 05 F1 | 	add	fp, #4
31398     A7 12 62 FC | 	wrlong	arg01, fp
3139c     04 4E 05 F1 | 	add	fp, #4
313a0     A7 14 62 FC | 	wrlong	arg02, fp
313a4     04 4E 85 F1 | 	sub	fp, #4
313a8     A7 FA 01 FB | 	rdlong	result1, fp
313ac     FD 26 02 FB | 	rdlong	local01, result1
313b0     10 4E 05 F1 | 	add	fp, #16
313b4     A7 26 62 FC | 	wrlong	local01, fp
313b8     14 4E 85 F1 | 	sub	fp, #20
313bc     97 24 48 FB | 	callpa	#(@LR__4812-@LR__4810)>>2,fcache_load_ptr_
313c0                 | ' )
313c0                 | ' {
313c0                 | ' 	FRESULT res;
313c0                 | ' 	BYTE ns;
313c0                 | ' 	FATFS *fs = dp->obj.fs;
313c0                 | ' #line 3034 "ff.c"
313c0                 | ' 	{
313c0                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
313c0                 | LR__4810
313c0     08 4E 05 F1 | 	add	fp, #8
313c4     A7 26 02 FB | 	rdlong	local01, fp
313c8     08 4E 85 F1 | 	sub	fp, #8
313cc     13 27 C2 FA | 	rdbyte	local01, local01
313d0     2F 26 0E F2 | 	cmp	local01, #47 wz
313d4     18 00 90 AD |  if_e	jmp	#LR__4811
313d8     08 4E 05 F1 | 	add	fp, #8
313dc     A7 26 02 FB | 	rdlong	local01, fp
313e0     08 4E 85 F1 | 	sub	fp, #8
313e4     13 27 C2 FA | 	rdbyte	local01, local01
313e8     5C 26 0E F2 | 	cmp	local01, #92 wz
313ec     18 00 90 5D |  if_ne	jmp	#LR__4813
313f0                 | LR__4811
313f0     08 4E 05 F1 | 	add	fp, #8
313f4     A7 26 02 FB | 	rdlong	local01, fp
313f8     01 26 06 F1 | 	add	local01, #1
313fc     A7 26 62 FC | 	wrlong	local01, fp
31400     08 4E 85 F1 | 	sub	fp, #8
31404     B8 FF 9F FD | 	jmp	#LR__4810
31408                 | LR__4812
31408                 | LR__4813
31408     04 4E 05 F1 | 	add	fp, #4
3140c     A7 26 02 FB | 	rdlong	local01, fp
31410     08 26 06 F1 | 	add	local01, #8
31414     13 01 68 FC | 	wrlong	#0, local01
31418     04 4E 05 F1 | 	add	fp, #4
3141c     A7 26 02 FB | 	rdlong	local01, fp
31420     08 4E 85 F1 | 	sub	fp, #8
31424     13 27 C2 FA | 	rdbyte	local01, local01
31428     20 26 16 F2 | 	cmp	local01, #32 wc
3142c     30 00 90 3D |  if_ae	jmp	#LR__4814
31430     04 4E 05 F1 | 	add	fp, #4
31434     A7 26 02 FB | 	rdlong	local01, fp
31438     2B 26 06 F1 | 	add	local01, #43
3143c     13 01 49 FC | 	wrbyte	#128, local01
31440     A7 12 02 FB | 	rdlong	arg01, fp
31444     04 4E 85 F1 | 	sub	fp, #4
31448     00 14 06 F6 | 	mov	arg02, #0
3144c     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
31450     0C 4E 05 F1 | 	add	fp, #12
31454     A7 FA 61 FC | 	wrlong	result1, fp
31458     0C 4E 85 F1 | 	sub	fp, #12
3145c     1C 01 90 FD | 	jmp	#LR__4818
31460                 | LR__4814
31460                 | ' 		for (;;) {
31460                 | LR__4815
31460     04 4E 05 F1 | 	add	fp, #4
31464     A7 12 02 FB | 	rdlong	arg01, fp
31468     04 4E 05 F1 | 	add	fp, #4
3146c     A7 14 02 F6 | 	mov	arg02, fp
31470     08 4E 85 F1 | 	sub	fp, #8
31474     14 F6 BF FD | 	call	#_fatfs_cc_create_name
31478     0C 4E 05 F1 | 	add	fp, #12
3147c     A7 FA 61 FC | 	wrlong	result1, fp
31480     00 FA 4D F2 | 	cmps	result1, #0 wz
31484     0C 4E 85 F1 | 	sub	fp, #12
31488     F0 00 90 5D |  if_ne	jmp	#LR__4817
3148c     04 4E 05 F1 | 	add	fp, #4
31490     A7 12 02 FB | 	rdlong	arg01, fp
31494     04 4E 85 F1 | 	sub	fp, #4
31498     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
3149c     0C 4E 05 F1 | 	add	fp, #12
314a0     A7 FA 61 FC | 	wrlong	result1, fp
314a4     08 4E 85 F1 | 	sub	fp, #8
314a8     A7 26 02 FB | 	rdlong	local01, fp
314ac     2B 26 06 F1 | 	add	local01, #43
314b0     13 27 C2 FA | 	rdbyte	local01, local01
314b4     0C 4E 05 F1 | 	add	fp, #12
314b8     A7 26 42 FC | 	wrbyte	local01, fp
314bc     04 4E 85 F1 | 	sub	fp, #4
314c0     A7 26 0A FB | 	rdlong	local01, fp wz
314c4     0C 4E 85 F1 | 	sub	fp, #12
314c8     34 00 90 AD |  if_e	jmp	#LR__4816
314cc     0C 4E 05 F1 | 	add	fp, #12
314d0     A7 26 02 FB | 	rdlong	local01, fp
314d4     0C 4E 85 F1 | 	sub	fp, #12
314d8     04 26 0E F2 | 	cmp	local01, #4 wz
314dc     9C 00 90 5D |  if_ne	jmp	#LR__4817
314e0     10 4E 05 F1 | 	add	fp, #16
314e4     A7 26 C2 FA | 	rdbyte	local01, fp
314e8     10 4E 85 F1 | 	sub	fp, #16
314ec     04 26 CE F7 | 	test	local01, #4 wz
314f0     0C 4E 05 A1 |  if_e	add	fp, #12
314f4     A7 0A 68 AC |  if_e	wrlong	#5, fp
314f8     0C 4E 85 A1 |  if_e	sub	fp, #12
314fc                 | ' 					}
314fc                 | ' 				}
314fc                 | ' 				break;
314fc     7C 00 90 FD | 	jmp	#LR__4817
31500                 | LR__4816
31500     10 4E 05 F1 | 	add	fp, #16
31504     A7 26 C2 FA | 	rdbyte	local01, fp
31508     10 4E 85 F1 | 	sub	fp, #16
3150c     04 26 CE F7 | 	test	local01, #4 wz
31510     68 00 90 5D |  if_ne	jmp	#LR__4817
31514     04 4E 05 F1 | 	add	fp, #4
31518     A7 26 02 FB | 	rdlong	local01, fp
3151c     04 4E 85 F1 | 	sub	fp, #4
31520     06 26 06 F1 | 	add	local01, #6
31524     13 27 C2 FA | 	rdbyte	local01, local01
31528     10 26 CE F7 | 	test	local01, #16 wz
3152c     0C 4E 05 A1 |  if_e	add	fp, #12
31530     A7 0A 68 AC |  if_e	wrlong	#5, fp
31534     0C 4E 85 A1 |  if_e	sub	fp, #12
31538                 | ' 				res = FR_NO_PATH; break;
31538     40 00 90 AD |  if_e	jmp	#LR__4817
3153c     04 4E 05 F1 | 	add	fp, #4
31540     A7 28 02 FB | 	rdlong	local02, fp
31544     14 27 02 F6 | 	mov	local01, local02
31548     10 4E 05 F1 | 	add	fp, #16
3154c     A7 14 02 FB | 	rdlong	arg02, fp
31550     0A 13 02 F6 | 	mov	arg01, arg02
31554     34 14 06 F1 | 	add	arg02, #52
31558     14 4E 85 F1 | 	sub	fp, #20
3155c     10 28 06 F1 | 	add	local02, #16
31560     14 29 02 FB | 	rdlong	local02, local02
31564     FF 29 06 F5 | 	and	local02, #511
31568     14 15 02 F1 | 	add	arg02, local02
3156c     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
31570     08 26 06 F1 | 	add	local01, #8
31574     13 FB 61 FC | 	wrlong	result1, local01
31578     E4 FE 9F FD | 	jmp	#LR__4815
3157c                 | LR__4817
3157c                 | LR__4818
3157c                 | ' 			}
3157c                 | ' #line 3090 "ff.c"
3157c                 | ' 			{
3157c                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
3157c                 | ' 			}
3157c                 | ' 		}
3157c                 | ' 	}
3157c                 | ' 
3157c                 | ' 	return res;
3157c     0C 4E 05 F1 | 	add	fp, #12
31580     A7 FA 01 FB | 	rdlong	result1, fp
31584     0C 4E 85 F1 | 	sub	fp, #12
31588     A7 F0 03 F6 | 	mov	ptra, fp
3158c     B2 00 A0 FD | 	call	#popregs_
31590                 | _fatfs_cc_follow_path_ret
31590     2D 00 64 FD | 	ret
31594                 | 
31594                 | _fatfs_cc_get_ldnumber
31594     01 00 66 F6 | 	neg	_var01, #1
31598     09 03 0A FB | 	rdlong	_var02, arg01 wz
3159c     01 05 02 F6 | 	mov	_var03, _var02
315a0     01 FA 65 A6 |  if_e	neg	result1, #1
315a4     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
315a8     97 10 48 FB | 	callpa	#(@LR__4821-@LR__4820)>>2,fcache_load_ptr_
315ac                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
315ac                 | LR__4820
315ac     02 07 C2 FA | 	rdbyte	_var04, _var03
315b0     03 FB E1 F8 | 	getbyte	result1, _var04, #0
315b4     20 FA 15 F2 | 	cmp	result1, #32 wc
315b8     01 04 06 F1 | 	add	_var03, #1
315bc     03 09 02 36 |  if_ae	mov	_var05, _var04
315c0     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
315c4     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
315c8     E0 FF 9F 1D |  if_a	jmp	#LR__4820
315cc                 | LR__4821
315cc     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
315d0     3A 06 0E F2 | 	cmp	_var04, #58 wz
315d4     40 00 90 5D |  if_ne	jmp	#LR__4823
315d8     01 0A 06 F6 | 	mov	_var06, #1
315dc     01 09 C2 FA | 	rdbyte	_var05, _var02
315e0     30 08 16 F2 | 	cmp	_var05, #48 wc
315e4     1C 00 90 CD |  if_b	jmp	#LR__4822
315e8     01 09 C2 FA | 	rdbyte	_var05, _var02
315ec     3A 08 16 F2 | 	cmp	_var05, #58 wc
315f0     01 0D 02 C6 |  if_b	mov	_var07, _var02
315f4     02 0C 06 C1 |  if_b	add	_var07, #2
315f8     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
315fc     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
31600     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
31604                 | LR__4822
31604     01 0A 56 F2 | 	cmps	_var06, #1 wc
31608     05 01 02 C6 |  if_b	mov	_var01, _var06
3160c     09 05 62 CC |  if_b	wrlong	_var03, arg01
31610                 | ' 			vol = i;
31610                 | ' 			*path = tt;
31610                 | ' 		}
31610                 | ' 		return vol;
31610     00 FB 01 F6 | 	mov	result1, _var01
31614     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
31618                 | LR__4823
31618                 | ' 	}
31618                 | ' #line 3170 "ff.c"
31618                 | ' 	vol = 0;
31618                 | ' 
31618                 | ' 	return vol;
31618     00 FA 05 F6 | 	mov	result1, #0
3161c                 | _fatfs_cc_get_ldnumber_ret
3161c     2D 00 64 FD | 	ret
31620                 | 
31620                 | _fatfs_cc_check_fs
31620     04 4A 05 F6 | 	mov	COUNT_, #4
31624     A8 00 A0 FD | 	call	#pushregs_
31628     09 27 02 F6 | 	mov	local01, arg01
3162c     03 26 06 F1 | 	add	local01, #3
31630     13 01 48 FC | 	wrbyte	#0, local01
31634     2D 26 06 F1 | 	add	local01, #45
31638     FF FF FF FF 
3163c     13 FF 6B FC | 	wrlong	##-1, local01
31640     30 26 86 F1 | 	sub	local01, #48
31644     13 13 02 F6 | 	mov	arg01, local01
31648     18 D5 BF FD | 	call	#_fatfs_cc_move_window
3164c     00 FA 0D F2 | 	cmp	result1, #0 wz
31650     04 FA 05 56 |  if_ne	mov	result1, #4
31654     94 01 90 5D |  if_ne	jmp	#LR__4834
31658     34 26 06 F1 | 	add	local01, #52
3165c     13 13 02 F6 | 	mov	arg01, local01
31660     FE 13 06 F1 | 	add	arg01, #510
31664                 | ' {
31664                 | ' 
31664                 | ' 	return *((WORD*)ptr);
31664     09 29 E2 FA | 	rdword	local02, arg01
31668     13 2B C2 FA | 	rdbyte	local03, local01
3166c     34 26 86 F1 | 	sub	local01, #52
31670     15 2D E2 F8 | 	getbyte	local04, local03, #0
31674     EB 2C 0E F2 | 	cmp	local04, #235 wz
31678     15 17 02 56 |  if_ne	mov	arg03, local03
3167c     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
31680     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
31684     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
31688     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
3168c     44 01 90 5D |  if_ne	jmp	#LR__4833
31690     14 2D 32 F9 | 	getword	local04, local02, #0
31694     55 00 00 FF 
31698     55 2C 0E F2 | 	cmp	local04, ##43605 wz
3169c     2C 00 90 5D |  if_ne	jmp	#LR__4830
316a0     34 26 06 F1 | 	add	local01, #52
316a4     13 13 02 F6 | 	mov	arg01, local01
316a8     34 26 86 F1 | 	sub	local01, #52
316ac     52 12 06 F1 | 	add	arg01, #82
316b0     B5 01 00 FF 
316b4     FC 14 06 F6 | 	mov	arg02, ##@LR__5424
316b8     08 16 06 F6 | 	mov	arg03, #8
316bc     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
316c0     00 FA 0D F2 | 	cmp	result1, #0 wz
316c4                 | ' 			return 0;
316c4     00 FA 05 A6 |  if_e	mov	result1, #0
316c8     20 01 90 AD |  if_e	jmp	#LR__4834
316cc                 | LR__4830
316cc     34 26 06 F1 | 	add	local01, #52
316d0     13 13 02 F6 | 	mov	arg01, local01
316d4     0B 12 06 F1 | 	add	arg01, #11
316d8                 | ' {
316d8                 | ' 
316d8                 | ' 	return *((WORD*)ptr);
316d8     09 FB E1 FA | 	rdword	result1, arg01
316dc     0D 26 06 F1 | 	add	local01, #13
316e0     13 2B C2 FA | 	rdbyte	local03, local01
316e4     41 26 86 F1 | 	sub	local01, #65
316e8     FD 2C 32 F9 | 	getword	local04, result1, #0
316ec     FD 14 32 F9 | 	getword	arg02, result1, #0
316f0     01 14 86 F1 | 	sub	arg02, #1
316f4     0A 2D CA F7 | 	test	local04, arg02 wz
316f8     D8 00 90 5D |  if_ne	jmp	#LR__4832
316fc     FD 14 32 F9 | 	getword	arg02, result1, #0
31700     01 00 00 FF 
31704     00 14 16 F2 | 	cmp	arg02, ##512 wc
31708     C8 00 90 CD |  if_b	jmp	#LR__4832
3170c     FD 14 32 F9 | 	getword	arg02, result1, #0
31710     01 00 00 FF 
31714     01 14 16 F2 | 	cmp	arg02, ##513 wc
31718     B8 00 90 3D |  if_ae	jmp	#LR__4832
3171c     15 13 02 F6 | 	mov	arg01, local03
31720     07 12 4E F7 | 	zerox	arg01, #7 wz
31724     AC 00 90 AD |  if_e	jmp	#LR__4832
31728     15 13 E2 F8 | 	getbyte	arg01, local03, #0
3172c     15 2B E2 F8 | 	getbyte	local03, local03, #0
31730     01 2A 86 F1 | 	sub	local03, #1
31734     15 13 CA F7 | 	test	arg01, local03 wz
31738     98 00 90 5D |  if_ne	jmp	#LR__4832
3173c     34 26 06 F1 | 	add	local01, #52
31740     13 13 02 F6 | 	mov	arg01, local01
31744     34 26 86 F1 | 	sub	local01, #52
31748     0E 12 06 F1 | 	add	arg01, #14
3174c                 | ' {
3174c                 | ' 
3174c                 | ' 	return *((WORD*)ptr);
3174c     09 FB E9 FA | 	rdword	result1, arg01 wz
31750     80 00 90 AD |  if_e	jmp	#LR__4832
31754     44 26 06 F1 | 	add	local01, #68
31758     13 13 C2 FA | 	rdbyte	arg01, local01
3175c     44 26 86 F1 | 	sub	local01, #68
31760     01 12 86 F1 | 	sub	arg01, #1
31764     02 12 16 F2 | 	cmp	arg01, #2 wc
31768     68 00 90 3D |  if_ae	jmp	#LR__4832
3176c     34 26 06 F1 | 	add	local01, #52
31770     13 13 02 F6 | 	mov	arg01, local01
31774     34 26 86 F1 | 	sub	local01, #52
31778     11 12 06 F1 | 	add	arg01, #17
3177c                 | ' {
3177c                 | ' 
3177c                 | ' 	return *((WORD*)ptr);
3177c     09 FB E9 FA | 	rdword	result1, arg01 wz
31780     50 00 90 AD |  if_e	jmp	#LR__4832
31784     34 26 06 F1 | 	add	local01, #52
31788     13 13 02 F6 | 	mov	arg01, local01
3178c     34 26 86 F1 | 	sub	local01, #52
31790     13 12 06 F1 | 	add	arg01, #19
31794                 | ' {
31794                 | ' 
31794                 | ' 	return *((WORD*)ptr);
31794     09 FB E1 FA | 	rdword	result1, arg01
31798     FD 2A 32 F9 | 	getword	local03, result1, #0
3179c     80 2A 16 F2 | 	cmp	local03, #128 wc
317a0     20 00 90 3D |  if_ae	jmp	#LR__4831
317a4     34 26 06 F1 | 	add	local01, #52
317a8     13 13 02 F6 | 	mov	arg01, local01
317ac     34 26 86 F1 | 	sub	local01, #52
317b0     20 12 06 F1 | 	add	arg01, #32
317b4                 | ' {
317b4                 | ' 
317b4                 | ' 	return *((DWORD*)ptr);
317b4     09 FB 01 FB | 	rdlong	result1, arg01
317b8     80 00 00 FF 
317bc     00 FA 15 F2 | 	cmp	result1, ##65536 wc
317c0     10 00 90 CD |  if_b	jmp	#LR__4832
317c4                 | LR__4831
317c4     4A 26 06 F1 | 	add	local01, #74
317c8                 | ' {
317c8                 | ' 
317c8                 | ' 	return *((WORD*)ptr);
317c8     13 FB E9 FA | 	rdword	result1, local01 wz
317cc                 | ' 			&& b != 0 && (b & (b - 1)) == 0
317cc                 | ' 			&& ld_word(fs->win +  14 ) != 0
317cc                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
317cc                 | ' 			&& ld_word(fs->win +  17 ) != 0
317cc                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
317cc                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
317cc                 | ' 				return 0;
317cc     00 FA 05 56 |  if_ne	mov	result1, #0
317d0     18 00 90 5D |  if_ne	jmp	#LR__4834
317d4                 | LR__4832
317d4                 | LR__4833
317d4                 | ' 		}
317d4                 | ' 	}
317d4                 | ' 	return sign == 0xAA55 ? 2 : 3;
317d4     14 2B 32 F9 | 	getword	local03, local02, #0
317d8     55 00 00 FF 
317dc     55 2A 0E F2 | 	cmp	local03, ##43605 wz
317e0     02 2C 06 A6 |  if_e	mov	local04, #2
317e4     03 2C 06 56 |  if_ne	mov	local04, #3
317e8     16 FB 01 F6 | 	mov	result1, local04
317ec                 | LR__4834
317ec     A7 F0 03 F6 | 	mov	ptra, fp
317f0     B2 00 A0 FD | 	call	#popregs_
317f4                 | _fatfs_cc_check_fs_ret
317f4     2D 00 64 FD | 	ret
317f8                 | 
317f8                 | _fatfs_cc_find_volume
317f8     05 4A 05 F6 | 	mov	COUNT_, #5
317fc     A8 00 A0 FD | 	call	#pushregs_
31800     24 F0 07 F1 | 	add	ptra, #36
31804     09 27 02 F6 | 	mov	local01, arg01
31808     0A 29 02 F6 | 	mov	local02, arg02
3180c     13 13 02 F6 | 	mov	arg01, local01
31810     00 14 06 F6 | 	mov	arg02, #0
31814     08 FE BF FD | 	call	#_fatfs_cc_check_fs
31818     02 FA 0D F2 | 	cmp	result1, #2 wz
3181c     0C 00 90 AD |  if_e	jmp	#LR__4840
31820     03 FA 15 F2 | 	cmp	result1, #3 wc
31824     00 28 0E C2 |  if_b	cmp	local02, #0 wz
31828     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4848
3182c                 | LR__4840
3182c                 | ' 	for (i = 0; i < 4; i++) {
3182c     00 2A 06 F6 | 	mov	local03, #0
31830     97 26 48 FB | 	callpa	#(@LR__4842-@LR__4841)>>2,fcache_load_ptr_
31834                 | LR__4841
31834     04 2A 16 F2 | 	cmp	local03, #4 wc
31838     44 00 90 3D |  if_ae	jmp	#LR__4843
3183c     15 2D 02 F6 | 	mov	local04, local03
31840     02 2C 66 F0 | 	shl	local04, #2
31844     14 4E 05 F1 | 	add	fp, #20
31848     A7 2C 02 F1 | 	add	local04, fp
3184c     34 26 06 F1 | 	add	local01, #52
31850     13 13 02 F6 | 	mov	arg01, local01
31854     34 26 86 F1 | 	sub	local01, #52
31858     BE 13 06 F1 | 	add	arg01, #446
3185c     15 15 02 F6 | 	mov	arg02, local03
31860     04 14 66 F0 | 	shl	arg02, #4
31864     0A 13 02 F1 | 	add	arg01, arg02
31868     08 12 06 F1 | 	add	arg01, #8
3186c                 | ' {
3186c                 | ' 
3186c                 | ' 	return *((DWORD*)ptr);
3186c     09 FB 01 FB | 	rdlong	result1, arg01
31870     14 4E 85 F1 | 	sub	fp, #20
31874     16 FB 61 FC | 	wrlong	result1, local04
31878     01 2A 06 F1 | 	add	local03, #1
3187c     B4 FF 9F FD | 	jmp	#LR__4841
31880                 | LR__4842
31880                 | LR__4843
31880     00 28 0E F2 | 	cmp	local02, #0 wz
31884     14 2D 02 56 |  if_ne	mov	local04, local02
31888     01 2C 86 51 |  if_ne	sub	local04, #1
3188c     00 2C 06 A6 |  if_e	mov	local04, #0
31890     16 2B 02 F6 | 	mov	local03, local04
31894                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
31894                 | ' 	}
31894                 | ' 	i = part ? part - 1 : 0;
31894                 | ' 	do {
31894                 | LR__4844
31894     15 2D 02 F6 | 	mov	local04, local03
31898     02 2C 66 F0 | 	shl	local04, #2
3189c     14 4E 05 F1 | 	add	fp, #20
318a0     A7 2C 02 F1 | 	add	local04, fp
318a4     16 2D 0A FB | 	rdlong	local04, local04 wz
318a8     14 4E 85 F1 | 	sub	fp, #20
318ac     28 00 90 AD |  if_e	jmp	#LR__4845
318b0     15 2D 02 F6 | 	mov	local04, local03
318b4     02 2C 66 F0 | 	shl	local04, #2
318b8     14 4E 05 F1 | 	add	fp, #20
318bc     A7 2C 02 F1 | 	add	local04, fp
318c0     16 15 02 FB | 	rdlong	arg02, local04
318c4     13 13 02 F6 | 	mov	arg01, local01
318c8     14 4E 85 F1 | 	sub	fp, #20
318cc     50 FD BF FD | 	call	#_fatfs_cc_check_fs
318d0     FD 2C 02 F6 | 	mov	local04, result1
318d4     04 00 90 FD | 	jmp	#LR__4846
318d8                 | LR__4845
318d8     03 2C 06 F6 | 	mov	local04, #3
318dc                 | LR__4846
318dc     16 2F 02 F6 | 	mov	local05, local04
318e0     00 28 0E F2 | 	cmp	local02, #0 wz
318e4     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
318e8     0C 00 90 8D |  if_c_and_z	jmp	#LR__4847
318ec     01 2A 06 A1 |  if_e	add	local03, #1
318f0     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
318f4     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4844
318f8                 | LR__4847
318f8                 | ' 	return fmt;
318f8     17 FB 01 F6 | 	mov	result1, local05
318fc                 | LR__4848
318fc     A7 F0 03 F6 | 	mov	ptra, fp
31900     B2 00 A0 FD | 	call	#popregs_
31904                 | _fatfs_cc_find_volume_ret
31904     2D 00 64 FD | 	ret
31908                 | 
31908                 | _fatfs_cc_mount_volume
31908     0B 4A 05 F6 | 	mov	COUNT_, #11
3190c     A8 00 A0 FD | 	call	#pushregs_
31910     0A 27 02 F6 | 	mov	local01, arg02
31914     0B 29 02 F6 | 	mov	local02, arg03
31918     13 01 68 FC | 	wrlong	#0, local01
3191c     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
31920     FD 2A 02 F6 | 	mov	local03, result1
31924     00 2A 56 F2 | 	cmps	local03, #0 wc
31928     0B FA 05 C6 |  if_b	mov	result1, #11
3192c     3C 05 90 CD |  if_b	jmp	#LR__4860
31930     15 17 02 F6 | 	mov	arg03, local03
31934     02 16 66 F0 | 	shl	arg03, #2
31938     F2 16 02 F1 | 	add	arg03, objptr
3193c     0B 2D 0A FB | 	rdlong	local04, arg03 wz
31940     0C FA 05 A6 |  if_e	mov	result1, #12
31944     24 05 90 AD |  if_e	jmp	#LR__4860
31948     13 2D 62 FC | 	wrlong	local04, local01
3194c     14 29 E2 F8 | 	getbyte	local02, local02, #0
31950     FE 28 06 F5 | 	and	local02, #254
31954     16 17 CA FA | 	rdbyte	arg03, local04 wz
31958     4C 00 90 AD |  if_e	jmp	#LR__4851
3195c     01 2C 06 F1 | 	add	local04, #1
31960     16 13 CA FA | 	rdbyte	arg01, local04 wz
31964     01 2C 86 F1 | 	sub	local04, #1
31968     01 FA 05 56 |  if_ne	mov	result1, #1
3196c                 | ' 
3196c                 | ' 	return Stat;
3196c     01 00 00 AF 
31970     20 E4 05 A1 |  if_e	add	objptr, ##544
31974     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
31978     01 00 00 AF 
3197c     20 E4 85 A1 |  if_e	sub	objptr, ##544
31980     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
31984     01 16 CE F7 | 	test	arg03, #1 wz
31988     1C 00 90 5D |  if_ne	jmp	#LR__4850
3198c     00 28 0E F2 | 	cmp	local02, #0 wz
31990     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
31994     04 FA CD 57 |  if_ne	test	result1, #4 wz
31998                 | ' 				return FR_WRITE_PROTECTED;
31998     0A FA 05 56 |  if_ne	mov	result1, #10
3199c     CC 04 90 5D |  if_ne	jmp	#LR__4860
319a0                 | ' 			}
319a0                 | ' 			return FR_OK;
319a0     00 FA 05 F6 | 	mov	result1, #0
319a4     C4 04 90 FD | 	jmp	#LR__4860
319a8                 | LR__4850
319a8                 | LR__4851
319a8     16 01 48 FC | 	wrbyte	#0, local04
319ac     01 2C 06 F1 | 	add	local04, #1
319b0     16 2B 42 FC | 	wrbyte	local03, local04
319b4     16 13 C2 FA | 	rdbyte	arg01, local04
319b8     01 2C 86 F1 | 	sub	local04, #1
319bc     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
319c0     FD 16 02 F6 | 	mov	arg03, result1
319c4     0B 2F E2 F8 | 	getbyte	local05, arg03, #0
319c8     01 2E CE F7 | 	test	local05, #1 wz
319cc                 | ' 		return FR_NOT_READY;
319cc     03 FA 05 56 |  if_ne	mov	result1, #3
319d0     98 04 90 5D |  if_ne	jmp	#LR__4860
319d4     00 28 0E F2 | 	cmp	local02, #0 wz
319d8     0B 2F 02 56 |  if_ne	mov	local05, arg03
319dc     17 2F E2 58 |  if_ne	getbyte	local05, local05, #0
319e0     04 2E CE 57 |  if_ne	test	local05, #4 wz
319e4                 | ' 		return FR_WRITE_PROTECTED;
319e4     0A FA 05 56 |  if_ne	mov	result1, #10
319e8     80 04 90 5D |  if_ne	jmp	#LR__4860
319ec     16 13 02 F6 | 	mov	arg01, local04
319f0     00 14 06 F6 | 	mov	arg02, #0
319f4     00 FE BF FD | 	call	#_fatfs_cc_find_volume
319f8     FD 12 02 F6 | 	mov	arg01, result1
319fc     04 12 0E F2 | 	cmp	arg01, #4 wz
31a00     01 FA 05 A6 |  if_e	mov	result1, #1
31a04     64 04 90 AD |  if_e	jmp	#LR__4860
31a08     02 12 16 F2 | 	cmp	arg01, #2 wc
31a0c     0D FA 05 36 |  if_ae	mov	result1, #13
31a10     58 04 90 3D |  if_ae	jmp	#LR__4860
31a14     30 2C 06 F1 | 	add	local04, #48
31a18     16 31 02 FB | 	rdlong	local06, local04
31a1c     04 2C 06 F1 | 	add	local04, #4
31a20     16 13 02 F6 | 	mov	arg01, local04
31a24     34 2C 86 F1 | 	sub	local04, #52
31a28     0B 12 06 F1 | 	add	arg01, #11
31a2c                 | ' {
31a2c                 | ' 
31a2c                 | ' 	return *((WORD*)ptr);
31a2c     09 FB E1 FA | 	rdword	result1, arg01
31a30     01 00 00 FF 
31a34     00 FA 0D F2 | 	cmp	result1, ##512 wz
31a38     0D FA 05 56 |  if_ne	mov	result1, #13
31a3c     2C 04 90 5D |  if_ne	jmp	#LR__4860
31a40     34 2C 06 F1 | 	add	local04, #52
31a44     16 13 02 F6 | 	mov	arg01, local04
31a48     34 2C 86 F1 | 	sub	local04, #52
31a4c     16 12 06 F1 | 	add	arg01, #22
31a50                 | ' {
31a50                 | ' 
31a50                 | ' 	return *((WORD*)ptr);
31a50     09 FB E1 FA | 	rdword	result1, arg01
31a54     FD 32 0A F6 | 	mov	local07, result1 wz
31a58     18 00 90 5D |  if_ne	jmp	#LR__4852
31a5c     34 2C 06 F1 | 	add	local04, #52
31a60     16 13 02 F6 | 	mov	arg01, local04
31a64     34 2C 86 F1 | 	sub	local04, #52
31a68     24 12 06 F1 | 	add	arg01, #36
31a6c                 | ' {
31a6c                 | ' 
31a6c                 | ' 	return *((DWORD*)ptr);
31a6c     09 FB 01 FB | 	rdlong	result1, arg01
31a70     FD 32 02 F6 | 	mov	local07, result1
31a74                 | LR__4852
31a74     1C 2C 06 F1 | 	add	local04, #28
31a78     16 33 62 FC | 	wrlong	local07, local04
31a7c     28 2C 06 F1 | 	add	local04, #40
31a80     16 2F C2 FA | 	rdbyte	local05, local04
31a84     42 2C 86 F1 | 	sub	local04, #66
31a88     16 2F 42 FC | 	wrbyte	local05, local04
31a8c     16 2F C2 FA | 	rdbyte	local05, local04
31a90     02 2C 86 F1 | 	sub	local04, #2
31a94     01 2E 0E F2 | 	cmp	local05, #1 wz
31a98     02 2C 06 51 |  if_ne	add	local04, #2
31a9c     16 2F C2 5A |  if_ne	rdbyte	local05, local04
31aa0     02 2C 86 51 |  if_ne	sub	local04, #2
31aa4     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
31aa8     0D FA 05 56 |  if_ne	mov	result1, #13
31aac     BC 03 90 5D |  if_ne	jmp	#LR__4860
31ab0     02 2C 06 F1 | 	add	local04, #2
31ab4     16 2F C2 FA | 	rdbyte	local05, local04
31ab8     17 33 02 FD | 	qmul	local07, local05
31abc     3F 2C 06 F1 | 	add	local04, #63
31ac0     16 2F C2 FA | 	rdbyte	local05, local04
31ac4     37 2C 86 F1 | 	sub	local04, #55
31ac8     16 2F 52 FC | 	wrword	local05, local04
31acc     16 2F EA FA | 	rdword	local05, local04 wz
31ad0     0A 2C 86 F1 | 	sub	local04, #10
31ad4     18 32 62 FD | 	getqx	local07
31ad8     20 00 90 AD |  if_e	jmp	#LR__4853
31adc     0A 2C 06 F1 | 	add	local04, #10
31ae0     16 2F E2 FA | 	rdword	local05, local04
31ae4     17 2B 32 F9 | 	getword	local03, local05, #0
31ae8     0A 2C 86 F1 | 	sub	local04, #10
31aec     17 2F 32 F9 | 	getword	local05, local05, #0
31af0     01 2E 86 F1 | 	sub	local05, #1
31af4     17 2B CA F7 | 	test	local03, local05 wz
31af8     08 00 90 AD |  if_e	jmp	#LR__4854
31afc                 | LR__4853
31afc     0D FA 05 F6 | 	mov	result1, #13
31b00     68 03 90 FD | 	jmp	#LR__4860
31b04                 | LR__4854
31b04     34 2C 06 F1 | 	add	local04, #52
31b08     16 13 02 F6 | 	mov	arg01, local04
31b0c     11 12 06 F1 | 	add	arg01, #17
31b10                 | ' {
31b10                 | ' 
31b10                 | ' 	return *((WORD*)ptr);
31b10     09 FB E1 FA | 	rdword	result1, arg01
31b14     2C 2C 86 F1 | 	sub	local04, #44
31b18     16 FB 51 FC | 	wrword	result1, local04
31b1c     16 2F E2 FA | 	rdword	local05, local04
31b20     08 2C 86 F1 | 	sub	local04, #8
31b24     17 13 52 F6 | 	abs	arg01, local05 wc
31b28     09 13 42 F8 | 	getnib	arg01, arg01, #0
31b2c     09 13 8A F6 | 	negc	arg01, arg01 wz
31b30     0D FA 05 56 |  if_ne	mov	result1, #13
31b34     34 03 90 5D |  if_ne	jmp	#LR__4860
31b38     34 2C 06 F1 | 	add	local04, #52
31b3c     16 13 02 F6 | 	mov	arg01, local04
31b40     34 2C 86 F1 | 	sub	local04, #52
31b44     13 12 06 F1 | 	add	arg01, #19
31b48                 | ' {
31b48                 | ' 
31b48                 | ' 	return *((WORD*)ptr);
31b48     09 FB E1 FA | 	rdword	result1, arg01
31b4c     FD 34 0A F6 | 	mov	local08, result1 wz
31b50     34 2C 06 A1 |  if_e	add	local04, #52
31b54     16 13 02 A6 |  if_e	mov	arg01, local04
31b58     34 2C 86 A1 |  if_e	sub	local04, #52
31b5c     20 12 06 A1 |  if_e	add	arg01, #32
31b60                 | ' {
31b60                 | ' 
31b60                 | ' 	return *((DWORD*)ptr);
31b60     09 35 02 AB |  if_e	rdlong	local08, arg01
31b64     34 2C 06 F1 | 	add	local04, #52
31b68     16 13 02 F6 | 	mov	arg01, local04
31b6c     34 2C 86 F1 | 	sub	local04, #52
31b70     0E 12 06 F1 | 	add	arg01, #14
31b74                 | ' {
31b74                 | ' 
31b74                 | ' 	return *((WORD*)ptr);
31b74     09 FB E1 FA | 	rdword	result1, arg01
31b78     FD 12 02 F6 | 	mov	arg01, result1
31b7c     09 2F 02 F6 | 	mov	local05, arg01
31b80     0F 2E 4E F7 | 	zerox	local05, #15 wz
31b84     0D FA 05 A6 |  if_e	mov	result1, #13
31b88     E0 02 90 AD |  if_e	jmp	#LR__4860
31b8c     09 37 32 F9 | 	getword	local09, arg01, #0
31b90     19 37 02 F1 | 	add	local09, local07
31b94     08 2C 06 F1 | 	add	local04, #8
31b98     16 2F E2 FA | 	rdword	local05, local04
31b9c     08 2C 86 F1 | 	sub	local04, #8
31ba0     17 2F 52 F6 | 	abs	local05, local05 wc
31ba4     04 2E 46 F0 | 	shr	local05, #4
31ba8     17 37 82 F3 | 	sumc	local09, local05
31bac     1B 35 12 F2 | 	cmp	local08, local09 wc
31bb0     0D FA 05 C6 |  if_b	mov	result1, #13
31bb4     B4 02 90 CD |  if_b	jmp	#LR__4860
31bb8     1B 35 82 F1 | 	sub	local08, local09
31bbc     0A 2C 06 F1 | 	add	local04, #10
31bc0     16 2F E2 FA | 	rdword	local05, local04
31bc4     17 35 12 FD | 	qdiv	local08, local05
31bc8     0A 2C 86 F1 | 	sub	local04, #10
31bcc     18 2E 62 FD | 	getqx	local05
31bd0     00 2E 0E F2 | 	cmp	local05, #0 wz
31bd4     0D FA 05 A6 |  if_e	mov	result1, #13
31bd8     90 02 90 AD |  if_e	jmp	#LR__4860
31bdc     00 38 06 F6 | 	mov	local10, #0
31be0     FF FF 07 FF 
31be4     F6 2F 16 F2 | 	cmp	local05, ##268435446 wc
31be8     03 38 06 C6 |  if_b	mov	local10, #3
31bec     7F 00 00 FF 
31bf0     F6 2F 16 F2 | 	cmp	local05, ##65526 wc
31bf4     02 38 06 C6 |  if_b	mov	local10, #2
31bf8     07 00 00 FF 
31bfc     F6 2F 16 F2 | 	cmp	local05, ##4086 wc
31c00     01 38 06 C6 |  if_b	mov	local10, #1
31c04     00 38 0E F2 | 	cmp	local10, #0 wz
31c08     0D FA 05 A6 |  if_e	mov	result1, #13
31c0c     5C 02 90 AD |  if_e	jmp	#LR__4860
31c10     02 2E 06 F1 | 	add	local05, #2
31c14     18 2C 06 F1 | 	add	local04, #24
31c18     16 2F 62 FC | 	wrlong	local05, local04
31c1c     08 2C 06 F1 | 	add	local04, #8
31c20     16 31 62 FC | 	wrlong	local06, local04
31c24     18 2F 02 F6 | 	mov	local05, local06
31c28     09 13 32 F9 | 	getword	arg01, arg01, #0
31c2c     09 2F 02 F1 | 	add	local05, arg01
31c30     04 2C 06 F1 | 	add	local04, #4
31c34     16 2F 62 FC | 	wrlong	local05, local04
31c38     18 2F 02 F6 | 	mov	local05, local06
31c3c     1B 2F 02 F1 | 	add	local05, local09
31c40     08 2C 06 F1 | 	add	local04, #8
31c44     16 2F 62 FC | 	wrlong	local05, local04
31c48     2C 2C 86 F1 | 	sub	local04, #44
31c4c     03 38 0E F2 | 	cmp	local10, #3 wz
31c50     5C 00 90 5D |  if_ne	jmp	#LR__4855
31c54     34 2C 06 F1 | 	add	local04, #52
31c58     16 13 02 F6 | 	mov	arg01, local04
31c5c     34 2C 86 F1 | 	sub	local04, #52
31c60     2A 12 06 F1 | 	add	arg01, #42
31c64                 | ' {
31c64                 | ' 
31c64                 | ' 	return *((WORD*)ptr);
31c64     09 FB E9 FA | 	rdword	result1, arg01 wz
31c68     0D FA 05 56 |  if_ne	mov	result1, #13
31c6c     FC 01 90 5D |  if_ne	jmp	#LR__4860
31c70     08 2C 06 F1 | 	add	local04, #8
31c74     16 2F EA FA | 	rdword	local05, local04 wz
31c78     08 2C 86 F1 | 	sub	local04, #8
31c7c     0D FA 05 56 |  if_ne	mov	result1, #13
31c80     E8 01 90 5D |  if_ne	jmp	#LR__4860
31c84     34 2C 06 F1 | 	add	local04, #52
31c88     16 13 02 F6 | 	mov	arg01, local04
31c8c     2C 12 06 F1 | 	add	arg01, #44
31c90                 | ' {
31c90                 | ' 
31c90                 | ' 	return *((DWORD*)ptr);
31c90     09 FB 01 FB | 	rdlong	result1, arg01
31c94     0C 2C 86 F1 | 	sub	local04, #12
31c98     16 FB 61 FC | 	wrlong	result1, local04
31c9c     10 2C 86 F1 | 	sub	local04, #16
31ca0     16 3B 02 FB | 	rdlong	local11, local04
31ca4     18 2C 86 F1 | 	sub	local04, #24
31ca8     02 3A 66 F0 | 	shl	local11, #2
31cac     6C 00 90 FD | 	jmp	#LR__4857
31cb0                 | LR__4855
31cb0     08 2C 06 F1 | 	add	local04, #8
31cb4     16 2F EA FA | 	rdword	local05, local04 wz
31cb8     08 2C 86 F1 | 	sub	local04, #8
31cbc     0D FA 05 A6 |  if_e	mov	result1, #13
31cc0     A8 01 90 AD |  if_e	jmp	#LR__4860
31cc4     24 2C 06 F1 | 	add	local04, #36
31cc8     16 2F 02 FB | 	rdlong	local05, local04
31ccc     19 2F 02 F1 | 	add	local05, local07
31cd0     04 2C 06 F1 | 	add	local04, #4
31cd4     16 2F 62 FC | 	wrlong	local05, local04
31cd8     28 2C 86 F1 | 	sub	local04, #40
31cdc     02 38 0E F2 | 	cmp	local10, #2 wz
31ce0     18 2C 06 A1 |  if_e	add	local04, #24
31ce4     16 2F 02 AB |  if_e	rdlong	local05, local04
31ce8     18 2C 86 A1 |  if_e	sub	local04, #24
31cec     01 2E 66 A0 |  if_e	shl	local05, #1
31cf0     24 00 90 AD |  if_e	jmp	#LR__4856
31cf4     18 2C 06 F1 | 	add	local04, #24
31cf8     16 3B 02 FB | 	rdlong	local11, local04
31cfc     1D 2F 02 F6 | 	mov	local05, local11
31d00     01 2E 66 F0 | 	shl	local05, #1
31d04     1D 2F 02 F1 | 	add	local05, local11
31d08     01 2E 46 F0 | 	shr	local05, #1
31d0c     18 2C 86 F1 | 	sub	local04, #24
31d10     01 3A 06 F5 | 	and	local11, #1
31d14     1D 2F 02 F1 | 	add	local05, local11
31d18                 | LR__4856
31d18     17 3B 02 F6 | 	mov	local11, local05
31d1c                 | LR__4857
31d1c     FF 3B 06 F1 | 	add	local11, #511
31d20     09 3A 46 F0 | 	shr	local11, #9
31d24     1C 2C 06 F1 | 	add	local04, #28
31d28     16 17 02 FB | 	rdlong	arg03, local04
31d2c     1C 2C 86 F1 | 	sub	local04, #28
31d30     1D 17 12 F2 | 	cmp	arg03, local11 wc
31d34     0D FA 05 C6 |  if_b	mov	result1, #13
31d38     30 01 90 CD |  if_b	jmp	#LR__4860
31d3c     14 2C 06 F1 | 	add	local04, #20
31d40     FF FF FF FF 
31d44     16 FF 6B FC | 	wrlong	##-1, local04
31d48     04 2C 86 F1 | 	sub	local04, #4
31d4c     FF FF FF FF 
31d50     16 FF 6B FC | 	wrlong	##-1, local04
31d54     0C 2C 86 F1 | 	sub	local04, #12
31d58     16 01 49 FC | 	wrbyte	#128, local04
31d5c     04 2C 86 F1 | 	sub	local04, #4
31d60     03 38 0E F2 | 	cmp	local10, #3 wz
31d64     D0 00 90 5D |  if_ne	jmp	#LR__4859
31d68     34 2C 06 F1 | 	add	local04, #52
31d6c     16 13 02 F6 | 	mov	arg01, local04
31d70     34 2C 86 F1 | 	sub	local04, #52
31d74     30 12 06 F1 | 	add	arg01, #48
31d78                 | ' {
31d78                 | ' 
31d78                 | ' 	return *((WORD*)ptr);
31d78     09 FB E1 FA | 	rdword	result1, arg01
31d7c     FD 2E 32 F9 | 	getword	local05, result1, #0
31d80     01 2E 0E F2 | 	cmp	local05, #1 wz
31d84     B0 00 90 5D |  if_ne	jmp	#LR__4859
31d88     01 30 06 F1 | 	add	local06, #1
31d8c     16 13 02 F6 | 	mov	arg01, local04
31d90     18 15 02 F6 | 	mov	arg02, local06
31d94     CC CD BF FD | 	call	#_fatfs_cc_move_window
31d98     00 FA 0D F2 | 	cmp	result1, #0 wz
31d9c     98 00 90 5D |  if_ne	jmp	#LR__4859
31da0     04 2C 06 F1 | 	add	local04, #4
31da4     16 01 48 FC | 	wrbyte	#0, local04
31da8     30 2C 06 F1 | 	add	local04, #48
31dac     16 13 02 F6 | 	mov	arg01, local04
31db0     34 2C 86 F1 | 	sub	local04, #52
31db4     FE 13 06 F1 | 	add	arg01, #510
31db8                 | ' {
31db8                 | ' 
31db8                 | ' 	return *((WORD*)ptr);
31db8     09 FB E1 FA | 	rdword	result1, arg01
31dbc     FD 2E 32 F9 | 	getword	local05, result1, #0
31dc0     55 00 00 FF 
31dc4     55 2E 0E F2 | 	cmp	local05, ##43605 wz
31dc8     34 2C 06 A1 |  if_e	add	local04, #52
31dcc     16 13 02 A6 |  if_e	mov	arg01, local04
31dd0     34 2C 86 A1 |  if_e	sub	local04, #52
31dd4                 | ' {
31dd4                 | ' 
31dd4                 | ' 	return *((DWORD*)ptr);
31dd4     09 FB 01 AB |  if_e	rdlong	result1, arg01
31dd8     A9 B0 20 AF 
31ddc     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
31de0     54 00 90 5D |  if_ne	jmp	#LR__4858
31de4     34 2C 06 F1 | 	add	local04, #52
31de8     16 13 02 F6 | 	mov	arg01, local04
31dec     34 2C 86 F1 | 	sub	local04, #52
31df0     E4 13 06 F1 | 	add	arg01, #484
31df4                 | ' {
31df4                 | ' 
31df4                 | ' 	return *((DWORD*)ptr);
31df4     09 FB 01 FB | 	rdlong	result1, arg01
31df8     B9 A0 30 FF 
31dfc     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
31e00     34 00 90 5D |  if_ne	jmp	#LR__4858
31e04     34 2C 06 F1 | 	add	local04, #52
31e08     16 13 02 F6 | 	mov	arg01, local04
31e0c     E8 13 06 F1 | 	add	arg01, #488
31e10                 | ' {
31e10                 | ' 
31e10                 | ' 	return *((DWORD*)ptr);
31e10     09 FB 01 FB | 	rdlong	result1, arg01
31e14     20 2C 86 F1 | 	sub	local04, #32
31e18     16 FB 61 FC | 	wrlong	result1, local04
31e1c     20 2C 06 F1 | 	add	local04, #32
31e20     16 13 02 F6 | 	mov	arg01, local04
31e24     EC 13 06 F1 | 	add	arg01, #492
31e28                 | ' {
31e28                 | ' 
31e28                 | ' 	return *((DWORD*)ptr);
31e28     09 FB 01 FB | 	rdlong	result1, arg01
31e2c     24 2C 86 F1 | 	sub	local04, #36
31e30     16 FB 61 FC | 	wrlong	result1, local04
31e34     10 2C 86 F1 | 	sub	local04, #16
31e38                 | LR__4858
31e38                 | LR__4859
31e38     16 39 42 FC | 	wrbyte	local10, local04
31e3c     04 E4 05 F1 | 	add	objptr, #4
31e40     F2 2E E2 FA | 	rdword	local05, objptr
31e44     01 2E 06 F1 | 	add	local05, #1
31e48     F2 2E 52 FC | 	wrword	local05, objptr
31e4c     F2 3A E2 FA | 	rdword	local11, objptr
31e50     06 2C 06 F1 | 	add	local04, #6
31e54     16 3B 52 FC | 	wrword	local11, local04
31e58     04 E4 05 F1 | 	add	objptr, #4
31e5c     06 2C 06 F1 | 	add	local04, #6
31e60     16 E5 61 FC | 	wrlong	objptr, local04
31e64                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
31e64                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
31e64                 | ' 			{
31e64                 | ' 
31e64                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
31e64                 | ' 
31e64                 | ' 
31e64                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
31e64                 | ' 
31e64                 | ' 			}
31e64                 | ' 		}
31e64                 | ' 
31e64                 | ' 
31e64                 | ' 	}
31e64                 | ' 
31e64                 | ' 	fs->fs_type = (BYTE)fmt;
31e64                 | ' 	fs->id = ++Fsid;
31e64                 | ' 
31e64                 | ' 	fs->lfnbuf = LfnBuf;
31e64                 | ' #line 3567 "ff.c"
31e64                 | ' 	return FR_OK;
31e64     00 FA 05 F6 | 	mov	result1, #0
31e68     08 E4 85 F1 | 	sub	objptr, #8
31e6c                 | LR__4860
31e6c     A7 F0 03 F6 | 	mov	ptra, fp
31e70     B2 00 A0 FD | 	call	#popregs_
31e74                 | _fatfs_cc_mount_volume_ret
31e74     2D 00 64 FD | 	ret
31e78                 | 
31e78                 | _fatfs_cc_validate
31e78     09 01 0A F6 | 	mov	_var01, arg01 wz
31e7c     09 02 06 F6 | 	mov	_var02, #9
31e80     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
31e84     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
31e88     50 00 90 AD |  if_e	jmp	#LR__4870
31e8c     04 00 06 F1 | 	add	_var01, #4
31e90     00 07 E2 FA | 	rdword	_var04, _var01
31e94     04 00 86 F1 | 	sub	_var01, #4
31e98     00 13 02 FB | 	rdlong	arg01, _var01
31e9c     06 12 06 F1 | 	add	arg01, #6
31ea0     09 FB E1 FA | 	rdword	result1, arg01
31ea4     FD 06 0A F2 | 	cmp	_var04, result1 wz
31ea8     30 00 90 5D |  if_ne	jmp	#LR__4870
31eac     00 07 02 FB | 	rdlong	_var04, _var01
31eb0     01 06 06 F1 | 	add	_var04, #1
31eb4     03 13 CA FA | 	rdbyte	arg01, _var04 wz
31eb8     01 FA 05 56 |  if_ne	mov	result1, #1
31ebc                 | ' 
31ebc                 | ' 	return Stat;
31ebc     01 00 00 AF 
31ec0     20 E4 05 A1 |  if_e	add	objptr, ##544
31ec4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
31ec8     01 00 00 AF 
31ecc     20 E4 85 A1 |  if_e	sub	objptr, ##544
31ed0     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
31ed4     01 04 CE F7 | 	test	_var03, #1 wz
31ed8     00 02 06 A6 |  if_e	mov	_var02, #0
31edc                 | LR__4870
31edc     00 02 0E F2 | 	cmp	_var02, #0 wz
31ee0     00 05 02 AB |  if_e	rdlong	_var03, _var01
31ee4     00 04 06 56 |  if_ne	mov	_var03, #0
31ee8     0A 05 62 FC | 	wrlong	_var03, arg02
31eec                 | ' 			res = FR_OK;
31eec                 | ' 		}
31eec                 | ' 
31eec                 | ' 	}
31eec                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
31eec                 | ' 	return res;
31eec     01 FB 01 F6 | 	mov	result1, _var02
31ef0                 | _fatfs_cc_validate_ret
31ef0     2D 00 64 FD | 	ret
31ef4                 | 
31ef4                 | _fatfs_cc_f_mount
31ef4     01 4A 05 F6 | 	mov	COUNT_, #1
31ef8     A8 00 A0 FD | 	call	#pushregs_
31efc     20 F0 07 F1 | 	add	ptra, #32
31f00     04 4E 05 F1 | 	add	fp, #4
31f04     A7 12 62 FC | 	wrlong	arg01, fp
31f08     04 4E 05 F1 | 	add	fp, #4
31f0c     A7 14 62 FC | 	wrlong	arg02, fp
31f10     04 4E 05 F1 | 	add	fp, #4
31f14     A7 16 42 FC | 	wrbyte	arg03, fp
31f18     04 4E 85 F1 | 	sub	fp, #4
31f1c     A7 16 02 FB | 	rdlong	arg03, fp
31f20     14 4E 05 F1 | 	add	fp, #20
31f24     A7 16 62 FC | 	wrlong	arg03, fp
31f28     A7 12 02 F6 | 	mov	arg01, fp
31f2c     1C 4E 85 F1 | 	sub	fp, #28
31f30     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
31f34     14 4E 05 F1 | 	add	fp, #20
31f38     A7 FA 61 FC | 	wrlong	result1, fp
31f3c     14 4E 85 F1 | 	sub	fp, #20
31f40     00 FA 55 F2 | 	cmps	result1, #0 wc
31f44     0B FA 05 C6 |  if_b	mov	result1, #11
31f48     C0 00 90 CD |  if_b	jmp	#LR__4881
31f4c     14 4E 05 F1 | 	add	fp, #20
31f50     A7 16 02 FB | 	rdlong	arg03, fp
31f54     02 16 66 F0 | 	shl	arg03, #2
31f58     F2 16 02 F1 | 	add	arg03, objptr
31f5c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
31f60     04 4E 85 F1 | 	sub	fp, #4
31f64     A7 16 62 FC | 	wrlong	arg03, fp
31f68     10 4E 85 F1 | 	sub	fp, #16
31f6c     28 00 90 AD |  if_e	jmp	#LR__4880
31f70     10 4E 05 F1 | 	add	fp, #16
31f74     A7 16 02 FB | 	rdlong	arg03, fp
31f78     10 4E 85 F1 | 	sub	fp, #16
31f7c     01 16 06 F1 | 	add	arg03, #1
31f80     0B 13 C2 FA | 	rdbyte	arg01, arg03
31f84     30 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
31f88     10 4E 05 F1 | 	add	fp, #16
31f8c     A7 16 02 FB | 	rdlong	arg03, fp
31f90     10 4E 85 F1 | 	sub	fp, #16
31f94     0B 01 48 FC | 	wrbyte	#0, arg03
31f98                 | LR__4880
31f98     04 4E 05 F1 | 	add	fp, #4
31f9c     A7 26 0A FB | 	rdlong	local01, fp wz
31fa0     04 4E 85 F1 | 	sub	fp, #4
31fa4     04 4E 05 51 |  if_ne	add	fp, #4
31fa8     A7 26 02 5B |  if_ne	rdlong	local01, fp
31fac     04 4E 85 51 |  if_ne	sub	fp, #4
31fb0     13 01 48 5C |  if_ne	wrbyte	#0, local01
31fb4     14 4E 05 F1 | 	add	fp, #20
31fb8     A7 26 02 FB | 	rdlong	local01, fp
31fbc     02 26 66 F0 | 	shl	local01, #2
31fc0     F2 26 02 F1 | 	add	local01, objptr
31fc4     10 4E 85 F1 | 	sub	fp, #16
31fc8     A7 16 02 FB | 	rdlong	arg03, fp
31fcc     13 17 62 FC | 	wrlong	arg03, local01
31fd0     08 4E 05 F1 | 	add	fp, #8
31fd4     A7 26 CA FA | 	rdbyte	local01, fp wz
31fd8     0C 4E 85 F1 | 	sub	fp, #12
31fdc     00 FA 05 A6 |  if_e	mov	result1, #0
31fe0     28 00 90 AD |  if_e	jmp	#LR__4881
31fe4     08 4E 05 F1 | 	add	fp, #8
31fe8     A7 12 02 F6 | 	mov	arg01, fp
31fec     04 4E 85 F1 | 	sub	fp, #4
31ff0     A7 14 02 F6 | 	mov	arg02, fp
31ff4     04 4E 85 F1 | 	sub	fp, #4
31ff8     00 16 06 F6 | 	mov	arg03, #0
31ffc     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
32000     18 4E 05 F1 | 	add	fp, #24
32004     A7 FA 61 FC | 	wrlong	result1, fp
32008                 | ' 
32008                 | ' 	res = mount_volume(&path, &fs, 0);
32008                 | ' 	return res ;
32008     18 4E 85 F1 | 	sub	fp, #24
3200c                 | LR__4881
3200c     A7 F0 03 F6 | 	mov	ptra, fp
32010     B2 00 A0 FD | 	call	#popregs_
32014                 | _fatfs_cc_f_mount_ret
32014     2D 00 64 FD | 	ret
32018                 | 
32018                 | _fatfs_cc_f_open
32018     02 4A 05 F6 | 	mov	COUNT_, #2
3201c     A8 00 A0 FD | 	call	#pushregs_
32020     60 F0 07 F1 | 	add	ptra, #96
32024     04 4E 05 F1 | 	add	fp, #4
32028     A7 12 62 FC | 	wrlong	arg01, fp
3202c     04 4E 05 F1 | 	add	fp, #4
32030     A7 14 62 FC | 	wrlong	arg02, fp
32034     04 4E 05 F1 | 	add	fp, #4
32038     A7 16 42 FC | 	wrbyte	arg03, fp
3203c     08 4E 85 F1 | 	sub	fp, #8
32040     A7 18 0A FB | 	rdlong	arg04, fp wz
32044     04 4E 85 F1 | 	sub	fp, #4
32048     09 FA 05 A6 |  if_e	mov	result1, #9
3204c     98 06 90 AD |  if_e	jmp	#LR__4907
32050     0C 4E 05 F1 | 	add	fp, #12
32054     A7 18 C2 FA | 	rdbyte	arg04, fp
32058     3F 18 06 F5 | 	and	arg04, #63
3205c     A7 18 42 FC | 	wrbyte	arg04, fp
32060     04 4E 85 F1 | 	sub	fp, #4
32064     A7 12 02 F6 | 	mov	arg01, fp
32068     3C 4E 05 F1 | 	add	fp, #60
3206c     A7 14 02 F6 | 	mov	arg02, fp
32070     38 4E 85 F1 | 	sub	fp, #56
32074     A7 16 C2 FA | 	rdbyte	arg03, fp
32078     0C 4E 85 F1 | 	sub	fp, #12
3207c     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
32080     10 4E 05 F1 | 	add	fp, #16
32084     A7 FA 61 FC | 	wrlong	result1, fp
32088     10 4E 85 F1 | 	sub	fp, #16
3208c     00 FA 0D F2 | 	cmp	result1, #0 wz
32090     2C 06 90 5D |  if_ne	jmp	#LR__4906
32094     44 4E 05 F1 | 	add	fp, #68
32098     A7 18 02 FB | 	rdlong	arg04, fp
3209c     30 4E 85 F1 | 	sub	fp, #48
320a0     A7 18 62 FC | 	wrlong	arg04, fp
320a4     A7 12 02 F6 | 	mov	arg01, fp
320a8     0C 4E 85 F1 | 	sub	fp, #12
320ac     A7 26 02 FB | 	rdlong	local01, fp
320b0     08 4E 85 F1 | 	sub	fp, #8
320b4     13 15 02 F6 | 	mov	arg02, local01
320b8     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
320bc     10 4E 05 F1 | 	add	fp, #16
320c0     A7 FA 61 FC | 	wrlong	result1, fp
320c4     10 4E 85 F1 | 	sub	fp, #16
320c8     00 FA 0D F2 | 	cmp	result1, #0 wz
320cc     1C 00 90 5D |  if_ne	jmp	#LR__4890
320d0     3F 4E 05 F1 | 	add	fp, #63
320d4     A7 18 C2 FA | 	rdbyte	arg04, fp
320d8     3F 4E 85 F1 | 	sub	fp, #63
320dc     80 18 CE F7 | 	test	arg04, #128 wz
320e0     10 4E 05 51 |  if_ne	add	fp, #16
320e4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
320e8     10 4E 85 51 |  if_ne	sub	fp, #16
320ec                 | LR__4890
320ec     0C 4E 05 F1 | 	add	fp, #12
320f0     A7 18 C2 FA | 	rdbyte	arg04, fp
320f4     0C 4E 85 F1 | 	sub	fp, #12
320f8     1C 18 CE F7 | 	test	arg04, #28 wz
320fc     F0 01 90 AD |  if_e	jmp	#LR__4895
32100     10 4E 05 F1 | 	add	fp, #16
32104     A7 26 0A FB | 	rdlong	local01, fp wz
32108     10 4E 85 F1 | 	sub	fp, #16
3210c     48 00 90 AD |  if_e	jmp	#LR__4892
32110     10 4E 05 F1 | 	add	fp, #16
32114     A7 18 02 FB | 	rdlong	arg04, fp
32118     10 4E 85 F1 | 	sub	fp, #16
3211c     04 18 0E F2 | 	cmp	arg04, #4 wz
32120     1C 00 90 5D |  if_ne	jmp	#LR__4891
32124     14 4E 05 F1 | 	add	fp, #20
32128     A7 12 02 F6 | 	mov	arg01, fp
3212c     14 4E 85 F1 | 	sub	fp, #20
32130     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
32134     10 4E 05 F1 | 	add	fp, #16
32138     A7 FA 61 FC | 	wrlong	result1, fp
3213c     10 4E 85 F1 | 	sub	fp, #16
32140                 | LR__4891
32140     0C 4E 05 F1 | 	add	fp, #12
32144     A7 26 C2 FA | 	rdbyte	local01, fp
32148     08 26 46 F5 | 	or	local01, #8
3214c     A7 26 42 FC | 	wrbyte	local01, fp
32150     0C 4E 85 F1 | 	sub	fp, #12
32154     3C 00 90 FD | 	jmp	#LR__4894
32158                 | LR__4892
32158     1A 4E 05 F1 | 	add	fp, #26
3215c     A7 26 C2 FA | 	rdbyte	local01, fp
32160     1A 4E 85 F1 | 	sub	fp, #26
32164     11 26 CE F7 | 	test	local01, #17 wz
32168     10 4E 05 51 |  if_ne	add	fp, #16
3216c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
32170     10 4E 85 51 |  if_ne	sub	fp, #16
32174     1C 00 90 5D |  if_ne	jmp	#LR__4893
32178     0C 4E 05 F1 | 	add	fp, #12
3217c     A7 26 C2 FA | 	rdbyte	local01, fp
32180     0C 4E 85 F1 | 	sub	fp, #12
32184     04 26 CE F7 | 	test	local01, #4 wz
32188     10 4E 05 51 |  if_ne	add	fp, #16
3218c     A7 10 68 5C |  if_ne	wrlong	#8, fp
32190     10 4E 85 51 |  if_ne	sub	fp, #16
32194                 | LR__4893
32194                 | LR__4894
32194     10 4E 05 F1 | 	add	fp, #16
32198     A7 26 0A FB | 	rdlong	local01, fp wz
3219c     10 4E 85 F1 | 	sub	fp, #16
321a0     A8 01 90 5D |  if_ne	jmp	#LR__4898
321a4     0C 4E 05 F1 | 	add	fp, #12
321a8     A7 26 C2 FA | 	rdbyte	local01, fp
321ac     0C 4E 85 F1 | 	sub	fp, #12
321b0     08 26 CE F7 | 	test	local01, #8 wz
321b4     94 01 90 AD |  if_e	jmp	#LR__4898
321b8     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
321bc     54 4E 05 F1 | 	add	fp, #84
321c0     A7 FA 61 FC | 	wrlong	result1, fp
321c4     24 4E 85 F1 | 	sub	fp, #36
321c8     A7 12 02 FB | 	rdlong	arg01, fp
321cc     0E 12 06 F1 | 	add	arg01, #14
321d0     09 FB 61 FC | 	wrlong	result1, arg01
321d4     A7 12 02 FB | 	rdlong	arg01, fp
321d8     16 12 06 F1 | 	add	arg01, #22
321dc     24 4E 05 F1 | 	add	fp, #36
321e0     A7 14 02 FB | 	rdlong	arg02, fp
321e4     09 15 62 FC | 	wrlong	arg02, arg01
321e8     10 4E 85 F1 | 	sub	fp, #16
321ec     A7 12 02 FB | 	rdlong	arg01, fp
321f0     14 4E 85 F1 | 	sub	fp, #20
321f4     A7 14 02 FB | 	rdlong	arg02, fp
321f8     30 4E 85 F1 | 	sub	fp, #48
321fc     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
32200     48 4E 05 F1 | 	add	fp, #72
32204     A7 FA 61 FC | 	wrlong	result1, fp
32208     18 4E 85 F1 | 	sub	fp, #24
3220c     A7 26 02 FB | 	rdlong	local01, fp
32210     0B 26 06 F1 | 	add	local01, #11
32214     13 41 48 FC | 	wrbyte	#32, local01
32218     14 4E 05 F1 | 	add	fp, #20
3221c     A7 12 02 FB | 	rdlong	arg01, fp
32220     14 4E 85 F1 | 	sub	fp, #20
32224     A7 14 02 FB | 	rdlong	arg02, fp
32228     30 4E 85 F1 | 	sub	fp, #48
3222c     00 16 06 F6 | 	mov	arg03, #0
32230     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
32234     30 4E 05 F1 | 	add	fp, #48
32238     A7 12 02 FB | 	rdlong	arg01, fp
3223c     1C 12 06 F1 | 	add	arg01, #28
32240     09 01 68 FC | 	wrlong	#0, arg01
32244     14 4E 05 F1 | 	add	fp, #20
32248     A7 26 02 FB | 	rdlong	local01, fp
3224c     03 26 06 F1 | 	add	local01, #3
32250     13 03 48 FC | 	wrbyte	#1, local01
32254     04 4E 05 F1 | 	add	fp, #4
32258     A7 26 0A FB | 	rdlong	local01, fp wz
3225c     48 4E 85 F1 | 	sub	fp, #72
32260     E8 00 90 AD |  if_e	jmp	#LR__4898
32264     44 4E 05 F1 | 	add	fp, #68
32268     A7 26 02 FB | 	rdlong	local01, fp
3226c     30 26 06 F1 | 	add	local01, #48
32270     13 27 02 FB | 	rdlong	local01, local01
32274     14 4E 05 F1 | 	add	fp, #20
32278     A7 26 62 FC | 	wrlong	local01, fp
3227c     44 4E 85 F1 | 	sub	fp, #68
32280     A7 12 02 F6 | 	mov	arg01, fp
32284     34 4E 05 F1 | 	add	fp, #52
32288     A7 14 02 FB | 	rdlong	arg02, fp
3228c     48 4E 85 F1 | 	sub	fp, #72
32290     00 16 06 F6 | 	mov	arg03, #0
32294     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
32298     10 4E 05 F1 | 	add	fp, #16
3229c     A7 FA 61 FC | 	wrlong	result1, fp
322a0     10 4E 85 F1 | 	sub	fp, #16
322a4     00 FA 0D F2 | 	cmp	result1, #0 wz
322a8     A0 00 90 5D |  if_ne	jmp	#LR__4898
322ac     44 4E 05 F1 | 	add	fp, #68
322b0     A7 12 02 FB | 	rdlong	arg01, fp
322b4     14 4E 05 F1 | 	add	fp, #20
322b8     A7 14 02 FB | 	rdlong	arg02, fp
322bc     58 4E 85 F1 | 	sub	fp, #88
322c0     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
322c4     10 4E 05 F1 | 	add	fp, #16
322c8     A7 FA 61 FC | 	wrlong	result1, fp
322cc     34 4E 05 F1 | 	add	fp, #52
322d0     A7 18 02 FB | 	rdlong	arg04, fp
322d4     04 4E 05 F1 | 	add	fp, #4
322d8     A7 26 02 FB | 	rdlong	local01, fp
322dc     48 4E 85 F1 | 	sub	fp, #72
322e0     01 26 86 F1 | 	sub	local01, #1
322e4     10 18 06 F1 | 	add	arg04, #16
322e8     0C 27 62 FC | 	wrlong	local01, arg04
322ec     5C 00 90 FD | 	jmp	#LR__4898
322f0                 | LR__4895
322f0     10 4E 05 F1 | 	add	fp, #16
322f4     A7 18 0A FB | 	rdlong	arg04, fp wz
322f8     10 4E 85 F1 | 	sub	fp, #16
322fc     4C 00 90 5D |  if_ne	jmp	#LR__4897
32300     1A 4E 05 F1 | 	add	fp, #26
32304     A7 18 C2 FA | 	rdbyte	arg04, fp
32308     1A 4E 85 F1 | 	sub	fp, #26
3230c     10 18 CE F7 | 	test	arg04, #16 wz
32310     10 4E 05 51 |  if_ne	add	fp, #16
32314     A7 08 68 5C |  if_ne	wrlong	#4, fp
32318     10 4E 85 51 |  if_ne	sub	fp, #16
3231c     2C 00 90 5D |  if_ne	jmp	#LR__4896
32320     0C 4E 05 F1 | 	add	fp, #12
32324     A7 18 C2 FA | 	rdbyte	arg04, fp
32328     0C 4E 85 F1 | 	sub	fp, #12
3232c     02 18 CE F7 | 	test	arg04, #2 wz
32330     1A 4E 05 51 |  if_ne	add	fp, #26
32334     A7 26 C2 5A |  if_ne	rdbyte	local01, fp
32338     1A 4E 85 51 |  if_ne	sub	fp, #26
3233c     01 26 CE 57 |  if_ne	test	local01, #1 wz
32340     10 4E 05 51 |  if_ne	add	fp, #16
32344     A7 0E 68 5C |  if_ne	wrlong	#7, fp
32348     10 4E 85 51 |  if_ne	sub	fp, #16
3234c                 | LR__4896
3234c                 | LR__4897
3234c                 | LR__4898
3234c     10 4E 05 F1 | 	add	fp, #16
32350     A7 26 0A FB | 	rdlong	local01, fp wz
32354     10 4E 85 F1 | 	sub	fp, #16
32358     60 00 90 5D |  if_ne	jmp	#LR__4899
3235c     0C 4E 05 F1 | 	add	fp, #12
32360     A7 28 C2 FA | 	rdbyte	local02, fp
32364     0C 4E 85 F1 | 	sub	fp, #12
32368     08 28 CE F7 | 	test	local02, #8 wz
3236c     0C 4E 05 51 |  if_ne	add	fp, #12
32370     A7 28 C2 5A |  if_ne	rdbyte	local02, fp
32374     40 28 46 55 |  if_ne	or	local02, #64
32378     A7 28 42 5C |  if_ne	wrbyte	local02, fp
3237c     0C 4E 85 51 |  if_ne	sub	fp, #12
32380     04 4E 05 F1 | 	add	fp, #4
32384     A7 28 02 FB | 	rdlong	local02, fp
32388     40 4E 05 F1 | 	add	fp, #64
3238c     A7 26 02 FB | 	rdlong	local01, fp
32390     30 26 06 F1 | 	add	local01, #48
32394     13 27 02 FB | 	rdlong	local01, local01
32398     20 28 06 F1 | 	add	local02, #32
3239c     14 27 62 FC | 	wrlong	local01, local02
323a0     40 4E 85 F1 | 	sub	fp, #64
323a4     A7 28 02 FB | 	rdlong	local02, fp
323a8     2C 4E 05 F1 | 	add	fp, #44
323ac     A7 26 02 FB | 	rdlong	local01, fp
323b0     30 4E 85 F1 | 	sub	fp, #48
323b4     24 28 06 F1 | 	add	local02, #36
323b8     14 27 62 FC | 	wrlong	local01, local02
323bc                 | LR__4899
323bc     10 4E 05 F1 | 	add	fp, #16
323c0     A7 28 0A FB | 	rdlong	local02, fp wz
323c4     10 4E 85 F1 | 	sub	fp, #16
323c8     F4 02 90 5D |  if_ne	jmp	#LR__4905
323cc     04 4E 05 F1 | 	add	fp, #4
323d0     A7 28 02 FB | 	rdlong	local02, fp
323d4     40 4E 05 F1 | 	add	fp, #64
323d8     A7 12 02 FB | 	rdlong	arg01, fp
323dc     14 4E 85 F1 | 	sub	fp, #20
323e0     A7 14 02 FB | 	rdlong	arg02, fp
323e4     30 4E 85 F1 | 	sub	fp, #48
323e8     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
323ec     08 28 06 F1 | 	add	local02, #8
323f0     14 FB 61 FC | 	wrlong	result1, local02
323f4     04 4E 05 F1 | 	add	fp, #4
323f8     A7 28 02 FB | 	rdlong	local02, fp
323fc     2C 4E 05 F1 | 	add	fp, #44
32400     A7 12 02 FB | 	rdlong	arg01, fp
32404     1C 12 06 F1 | 	add	arg01, #28
32408                 | ' {
32408                 | ' 
32408                 | ' 	return *((DWORD*)ptr);
32408     09 FB 01 FB | 	rdlong	result1, arg01
3240c     0C 28 06 F1 | 	add	local02, #12
32410     14 FB 61 FC | 	wrlong	result1, local02
32414     2C 4E 85 F1 | 	sub	fp, #44
32418     A7 28 02 FB | 	rdlong	local02, fp
3241c     40 4E 05 F1 | 	add	fp, #64
32420     A7 26 02 FB | 	rdlong	local01, fp
32424     14 27 62 FC | 	wrlong	local01, local02
32428     40 4E 85 F1 | 	sub	fp, #64
3242c     A7 28 02 FB | 	rdlong	local02, fp
32430     40 4E 05 F1 | 	add	fp, #64
32434     A7 26 02 FB | 	rdlong	local01, fp
32438     06 26 06 F1 | 	add	local01, #6
3243c     13 27 E2 FA | 	rdword	local01, local01
32440     04 28 06 F1 | 	add	local02, #4
32444     14 27 52 FC | 	wrword	local01, local02
32448     40 4E 85 F1 | 	sub	fp, #64
3244c     A7 28 02 FB | 	rdlong	local02, fp
32450     08 4E 05 F1 | 	add	fp, #8
32454     A7 26 C2 FA | 	rdbyte	local01, fp
32458     10 28 06 F1 | 	add	local02, #16
3245c     14 27 42 FC | 	wrbyte	local01, local02
32460     08 4E 85 F1 | 	sub	fp, #8
32464     A7 28 02 FB | 	rdlong	local02, fp
32468     11 28 06 F1 | 	add	local02, #17
3246c     14 01 48 FC | 	wrbyte	#0, local02
32470     A7 28 02 FB | 	rdlong	local02, fp
32474     1C 28 06 F1 | 	add	local02, #28
32478     14 01 68 FC | 	wrlong	#0, local02
3247c     A7 28 02 FB | 	rdlong	local02, fp
32480     14 28 06 F1 | 	add	local02, #20
32484     14 01 68 FC | 	wrlong	#0, local02
32488     A7 12 02 FB | 	rdlong	arg01, fp
3248c     04 4E 85 F1 | 	sub	fp, #4
32490     28 12 06 F1 | 	add	arg01, #40
32494     00 14 06 F6 | 	mov	arg02, #0
32498     09 16 C6 F9 | 	decod	arg03, #9
3249c     98 00 A0 FD | 	call	#\builtin_bytefill_
324a0     0C 4E 05 F1 | 	add	fp, #12
324a4     A7 28 C2 FA | 	rdbyte	local02, fp
324a8     0C 4E 85 F1 | 	sub	fp, #12
324ac     20 28 CE F7 | 	test	local02, #32 wz
324b0     0C 02 90 AD |  if_e	jmp	#LR__4904
324b4     04 4E 05 F1 | 	add	fp, #4
324b8     A7 26 02 FB | 	rdlong	local01, fp
324bc     04 4E 85 F1 | 	sub	fp, #4
324c0     0C 26 06 F1 | 	add	local01, #12
324c4     13 29 02 FB | 	rdlong	local02, local01
324c8     01 28 16 F2 | 	cmp	local02, #1 wc
324cc     F0 01 90 CD |  if_b	jmp	#LR__4904
324d0     04 4E 05 F1 | 	add	fp, #4
324d4     A7 26 02 FB | 	rdlong	local01, fp
324d8     13 29 02 F6 | 	mov	local02, local01
324dc     0C 26 06 F1 | 	add	local01, #12
324e0     13 27 02 FB | 	rdlong	local01, local01
324e4     14 28 06 F1 | 	add	local02, #20
324e8     14 27 62 FC | 	wrlong	local01, local02
324ec     40 4E 05 F1 | 	add	fp, #64
324f0     A7 28 02 FB | 	rdlong	local02, fp
324f4     0A 28 06 F1 | 	add	local02, #10
324f8     14 29 E2 FA | 	rdword	local02, local02
324fc     09 28 66 F0 | 	shl	local02, #9
32500     08 4E 05 F1 | 	add	fp, #8
32504     A7 28 62 FC | 	wrlong	local02, fp
32508     48 4E 85 F1 | 	sub	fp, #72
3250c     A7 28 02 FB | 	rdlong	local02, fp
32510     08 28 06 F1 | 	add	local02, #8
32514     14 27 02 FB | 	rdlong	local01, local02
32518     4C 4E 05 F1 | 	add	fp, #76
3251c     A7 26 62 FC | 	wrlong	local01, fp
32520                 | ' 				fp->fptr = fp->obj.objsize;
32520                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
32520                 | ' 				clst = fp->obj.sclust;
32520                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
32520     4C 4E 85 F1 | 	sub	fp, #76
32524     A7 28 02 FB | 	rdlong	local02, fp
32528     0C 28 06 F1 | 	add	local02, #12
3252c     14 27 02 FB | 	rdlong	local01, local02
32530     58 4E 05 F1 | 	add	fp, #88
32534     A7 26 62 FC | 	wrlong	local01, fp
32538     5C 4E 85 F1 | 	sub	fp, #92
3253c                 | LR__4900
3253c     10 4E 05 F1 | 	add	fp, #16
32540     A7 28 0A FB | 	rdlong	local02, fp wz
32544     10 4E 85 F1 | 	sub	fp, #16
32548     94 00 90 5D |  if_ne	jmp	#LR__4901
3254c     5C 4E 05 F1 | 	add	fp, #92
32550     A7 28 02 FB | 	rdlong	local02, fp
32554     10 4E 85 F1 | 	sub	fp, #16
32558     A7 26 02 FB | 	rdlong	local01, fp
3255c     4C 4E 85 F1 | 	sub	fp, #76
32560     13 29 1A F2 | 	cmp	local02, local01 wcz
32564     78 00 90 ED |  if_be	jmp	#LR__4901
32568     04 4E 05 F1 | 	add	fp, #4
3256c     A7 12 02 FB | 	rdlong	arg01, fp
32570     4C 4E 05 F1 | 	add	fp, #76
32574     A7 14 02 FB | 	rdlong	arg02, fp
32578     50 4E 85 F1 | 	sub	fp, #80
3257c     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
32580     50 4E 05 F1 | 	add	fp, #80
32584     A7 FA 61 FC | 	wrlong	result1, fp
32588     50 4E 85 F1 | 	sub	fp, #80
3258c     02 FA 15 F2 | 	cmp	result1, #2 wc
32590     10 4E 05 C1 |  if_b	add	fp, #16
32594     A7 04 68 CC |  if_b	wrlong	#2, fp
32598     10 4E 85 C1 |  if_b	sub	fp, #16
3259c     50 4E 05 F1 | 	add	fp, #80
325a0     A7 28 02 FB | 	rdlong	local02, fp
325a4     50 4E 85 F1 | 	sub	fp, #80
325a8     FF FF 7F FF 
325ac     FF 29 0E F2 | 	cmp	local02, ##-1 wz
325b0     10 4E 05 A1 |  if_e	add	fp, #16
325b4     A7 02 68 AC |  if_e	wrlong	#1, fp
325b8     10 4E 85 A1 |  if_e	sub	fp, #16
325bc     5C 4E 05 F1 | 	add	fp, #92
325c0     A7 28 02 FB | 	rdlong	local02, fp
325c4     10 4E 85 F1 | 	sub	fp, #16
325c8     A7 26 02 FB | 	rdlong	local01, fp
325cc     13 29 82 F1 | 	sub	local02, local01
325d0     10 4E 05 F1 | 	add	fp, #16
325d4     A7 28 62 FC | 	wrlong	local02, fp
325d8     5C 4E 85 F1 | 	sub	fp, #92
325dc     5C FF 9F FD | 	jmp	#LR__4900
325e0                 | LR__4901
325e0     04 4E 05 F1 | 	add	fp, #4
325e4     A7 28 02 FB | 	rdlong	local02, fp
325e8     4C 4E 05 F1 | 	add	fp, #76
325ec     A7 26 02 FB | 	rdlong	local01, fp
325f0     18 28 06 F1 | 	add	local02, #24
325f4     14 27 62 FC | 	wrlong	local01, local02
325f8     40 4E 85 F1 | 	sub	fp, #64
325fc     A7 28 0A FB | 	rdlong	local02, fp wz
32600     10 4E 85 F1 | 	sub	fp, #16
32604     B8 00 90 5D |  if_ne	jmp	#LR__4903
32608     5C 4E 05 F1 | 	add	fp, #92
3260c     A7 26 02 FB | 	rdlong	local01, fp
32610     5C 4E 85 F1 | 	sub	fp, #92
32614     FF 27 CE F7 | 	test	local01, #511 wz
32618     A4 00 90 AD |  if_e	jmp	#LR__4903
3261c     44 4E 05 F1 | 	add	fp, #68
32620     A7 12 02 FB | 	rdlong	arg01, fp
32624     0C 4E 05 F1 | 	add	fp, #12
32628     A7 14 02 FB | 	rdlong	arg02, fp
3262c     50 4E 85 F1 | 	sub	fp, #80
32630     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
32634     58 4E 05 F1 | 	add	fp, #88
32638     A7 FA 61 FC | 	wrlong	result1, fp
3263c     00 FA 4D F2 | 	cmps	result1, #0 wz
32640     58 4E 85 F1 | 	sub	fp, #88
32644     10 4E 05 A1 |  if_e	add	fp, #16
32648     A7 04 68 AC |  if_e	wrlong	#2, fp
3264c     10 4E 85 A1 |  if_e	sub	fp, #16
32650     6C 00 90 AD |  if_e	jmp	#LR__4902
32654     04 4E 05 F1 | 	add	fp, #4
32658     A7 28 02 FB | 	rdlong	local02, fp
3265c     54 4E 05 F1 | 	add	fp, #84
32660     A7 26 02 FB | 	rdlong	local01, fp
32664     04 4E 05 F1 | 	add	fp, #4
32668     A7 18 02 FB | 	rdlong	arg04, fp
3266c     09 18 46 F0 | 	shr	arg04, #9
32670     0C 27 02 F1 | 	add	local01, arg04
32674     1C 28 06 F1 | 	add	local02, #28
32678     14 27 62 FC | 	wrlong	local01, local02
3267c     18 4E 85 F1 | 	sub	fp, #24
32680     A7 28 02 FB | 	rdlong	local02, fp
32684     01 28 06 F1 | 	add	local02, #1
32688     14 13 C2 FA | 	rdbyte	arg01, local02
3268c     40 4E 85 F1 | 	sub	fp, #64
32690     A7 28 02 FB | 	rdlong	local02, fp
32694     14 15 02 F6 | 	mov	arg02, local02
32698     28 14 06 F1 | 	add	arg02, #40
3269c     04 4E 85 F1 | 	sub	fp, #4
326a0     1C 28 06 F1 | 	add	local02, #28
326a4     14 17 02 FB | 	rdlong	arg03, local02
326a8     01 18 06 F6 | 	mov	arg04, #1
326ac     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
326b0     00 FA 0D F2 | 	cmp	result1, #0 wz
326b4     10 4E 05 51 |  if_ne	add	fp, #16
326b8     A7 02 68 5C |  if_ne	wrlong	#1, fp
326bc     10 4E 85 51 |  if_ne	sub	fp, #16
326c0                 | LR__4902
326c0                 | LR__4903
326c0                 | LR__4904
326c0                 | LR__4905
326c0                 | LR__4906
326c0     10 4E 05 F1 | 	add	fp, #16
326c4     A7 28 0A FB | 	rdlong	local02, fp wz
326c8     10 4E 85 F1 | 	sub	fp, #16
326cc     04 4E 05 51 |  if_ne	add	fp, #4
326d0     A7 28 02 5B |  if_ne	rdlong	local02, fp
326d4     04 4E 85 51 |  if_ne	sub	fp, #4
326d8     14 01 68 5C |  if_ne	wrlong	#0, local02
326dc                 | ' 
326dc                 | ' 	return res ;
326dc     10 4E 05 F1 | 	add	fp, #16
326e0     A7 FA 01 FB | 	rdlong	result1, fp
326e4     10 4E 85 F1 | 	sub	fp, #16
326e8                 | LR__4907
326e8     A7 F0 03 F6 | 	mov	ptra, fp
326ec     B2 00 A0 FD | 	call	#popregs_
326f0                 | _fatfs_cc_f_open_ret
326f0     2D 00 64 FD | 	ret
326f4                 | 
326f4                 | _fatfs_cc_f_read
326f4     0E 4A 05 F6 | 	mov	COUNT_, #14
326f8     A8 00 A0 FD | 	call	#pushregs_
326fc     38 F0 07 F1 | 	add	ptra, #56
32700     04 4E 05 F1 | 	add	fp, #4
32704     A7 12 62 FC | 	wrlong	arg01, fp
32708     04 4E 05 F1 | 	add	fp, #4
3270c     A7 14 62 FC | 	wrlong	arg02, fp
32710     04 4E 05 F1 | 	add	fp, #4
32714     A7 16 62 FC | 	wrlong	arg03, fp
32718     04 4E 05 F1 | 	add	fp, #4
3271c     A7 18 62 FC | 	wrlong	arg04, fp
32720     08 4E 85 F1 | 	sub	fp, #8
32724     A7 FA 01 FB | 	rdlong	result1, fp
32728     2C 4E 05 F1 | 	add	fp, #44
3272c     A7 FA 61 FC | 	wrlong	result1, fp
32730     24 4E 85 F1 | 	sub	fp, #36
32734     A7 FA 01 FB | 	rdlong	result1, fp
32738     FD 00 68 FC | 	wrlong	#0, result1
3273c     0C 4E 85 F1 | 	sub	fp, #12
32740     A7 12 02 FB | 	rdlong	arg01, fp
32744     14 4E 05 F1 | 	add	fp, #20
32748     A7 14 02 F6 | 	mov	arg02, fp
3274c     18 4E 85 F1 | 	sub	fp, #24
32750     24 F7 BF FD | 	call	#_fatfs_cc_validate
32754     14 4E 05 F1 | 	add	fp, #20
32758     A7 FA 61 FC | 	wrlong	result1, fp
3275c     00 FA 4D F2 | 	cmps	result1, #0 wz
32760     14 4E 85 F1 | 	sub	fp, #20
32764     20 00 90 5D |  if_ne	jmp	#LR__4910
32768     04 4E 05 F1 | 	add	fp, #4
3276c     A7 14 02 FB | 	rdlong	arg02, fp
32770     11 14 06 F1 | 	add	arg02, #17
32774     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
32778     10 4E 05 F1 | 	add	fp, #16
3277c     A7 14 62 FC | 	wrlong	arg02, fp
32780     14 4E 85 F1 | 	sub	fp, #20
32784     10 00 90 AD |  if_e	jmp	#LR__4911
32788                 | LR__4910
32788     14 4E 05 F1 | 	add	fp, #20
3278c     A7 FA 01 FB | 	rdlong	result1, fp
32790     14 4E 85 F1 | 	sub	fp, #20
32794     EC 05 90 FD | 	jmp	#LR__4930
32798                 | LR__4911
32798     04 4E 05 F1 | 	add	fp, #4
3279c     A7 18 02 FB | 	rdlong	arg04, fp
327a0     04 4E 85 F1 | 	sub	fp, #4
327a4     10 18 06 F1 | 	add	arg04, #16
327a8     0C 19 C2 FA | 	rdbyte	arg04, arg04
327ac     01 18 CE F7 | 	test	arg04, #1 wz
327b0     07 FA 05 A6 |  if_e	mov	result1, #7
327b4     CC 05 90 AD |  if_e	jmp	#LR__4930
327b8     04 4E 05 F1 | 	add	fp, #4
327bc     A7 26 02 FB | 	rdlong	local01, fp
327c0     13 29 02 F6 | 	mov	local02, local01
327c4     0C 28 06 F1 | 	add	local02, #12
327c8     14 2B 02 FB | 	rdlong	local03, local02
327cc     14 26 06 F1 | 	add	local01, #20
327d0     13 27 02 FB | 	rdlong	local01, local01
327d4     13 2B 82 F1 | 	sub	local03, local01
327d8     20 4E 05 F1 | 	add	fp, #32
327dc     A7 2A 62 FC | 	wrlong	local03, fp
327e0     18 4E 85 F1 | 	sub	fp, #24
327e4     A7 2C 02 FB | 	rdlong	local04, fp
327e8     0C 4E 85 F1 | 	sub	fp, #12
327ec     15 2D 1A F2 | 	cmp	local04, local03 wcz
327f0     24 4E 05 11 |  if_a	add	fp, #36
327f4     A7 2C 02 1B |  if_a	rdlong	local04, fp
327f8     18 4E 85 11 |  if_a	sub	fp, #24
327fc     A7 2C 62 1C |  if_a	wrlong	local04, fp
32800     0C 4E 85 11 |  if_a	sub	fp, #12
32804                 | ' 
32804                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
32804                 | LR__4912
32804     0C 4E 05 F1 | 	add	fp, #12
32808     A7 28 02 FB | 	rdlong	local02, fp
3280c     0C 4E 85 F1 | 	sub	fp, #12
32810     14 2D 02 F6 | 	mov	local04, local02
32814     01 2C 16 F2 | 	cmp	local04, #1 wc
32818     64 05 90 CD |  if_b	jmp	#LR__4929
3281c     04 4E 05 F1 | 	add	fp, #4
32820     A7 2A 02 FB | 	rdlong	local03, fp
32824     04 4E 85 F1 | 	sub	fp, #4
32828     14 2A 06 F1 | 	add	local03, #20
3282c     15 2B 02 FB | 	rdlong	local03, local03
32830     FF 2B CE F7 | 	test	local03, #511 wz
32834     3C 04 90 5D |  if_ne	jmp	#LR__4927
32838     04 4E 05 F1 | 	add	fp, #4
3283c     A7 26 02 FB | 	rdlong	local01, fp
32840     14 26 06 F1 | 	add	local01, #20
32844     13 2B 02 FB | 	rdlong	local03, local01
32848     09 2A 46 F0 | 	shr	local03, #9
3284c     14 4E 05 F1 | 	add	fp, #20
32850     A7 2E 02 FB | 	rdlong	local05, fp
32854     17 31 02 F6 | 	mov	local06, local05
32858     0A 30 06 F1 | 	add	local06, #10
3285c     18 33 E2 FA | 	rdword	local07, local06
32860     0A 30 86 F1 | 	sub	local06, #10
32864     19 35 32 F9 | 	getword	local08, local07, #0
32868     01 34 86 F1 | 	sub	local08, #1
3286c     1A 2B 0A F5 | 	and	local03, local08 wz
32870     18 4E 05 F1 | 	add	fp, #24
32874     A7 2A 62 FC | 	wrlong	local03, fp
32878     30 4E 85 F1 | 	sub	fp, #48
3287c     E0 00 90 5D |  if_ne	jmp	#LR__4917
32880     04 4E 05 F1 | 	add	fp, #4
32884     A7 2A 02 FB | 	rdlong	local03, fp
32888     04 4E 85 F1 | 	sub	fp, #4
3288c     14 2A 06 F1 | 	add	local03, #20
32890     15 2B 0A FB | 	rdlong	local03, local03 wz
32894     20 00 90 5D |  if_ne	jmp	#LR__4913
32898     04 4E 05 F1 | 	add	fp, #4
3289c     A7 2A 02 FB | 	rdlong	local03, fp
328a0     08 2A 06 F1 | 	add	local03, #8
328a4     15 2B 02 FB | 	rdlong	local03, local03
328a8     18 4E 05 F1 | 	add	fp, #24
328ac     A7 2A 62 FC | 	wrlong	local03, fp
328b0     1C 4E 85 F1 | 	sub	fp, #28
328b4     28 00 90 FD | 	jmp	#LR__4914
328b8                 | LR__4913
328b8     04 4E 05 F1 | 	add	fp, #4
328bc     A7 34 02 FB | 	rdlong	local08, fp
328c0     1A 13 02 F6 | 	mov	arg01, local08
328c4     04 4E 85 F1 | 	sub	fp, #4
328c8     18 34 06 F1 | 	add	local08, #24
328cc     1A 15 02 FB | 	rdlong	arg02, local08
328d0     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
328d4     1C 4E 05 F1 | 	add	fp, #28
328d8     A7 FA 61 FC | 	wrlong	result1, fp
328dc     1C 4E 85 F1 | 	sub	fp, #28
328e0                 | LR__4914
328e0     1C 4E 05 F1 | 	add	fp, #28
328e4     A7 2A 02 FB | 	rdlong	local03, fp
328e8     1C 4E 85 F1 | 	sub	fp, #28
328ec     02 2A 16 F2 | 	cmp	local03, #2 wc
328f0     1C 00 90 3D |  if_ae	jmp	#LR__4915
328f4     04 4E 05 F1 | 	add	fp, #4
328f8     A7 2A 02 FB | 	rdlong	local03, fp
328fc     04 4E 85 F1 | 	sub	fp, #4
32900     11 2A 06 F1 | 	add	local03, #17
32904     15 05 48 FC | 	wrbyte	#2, local03
32908     02 FA 05 F6 | 	mov	result1, #2
3290c     74 04 90 FD | 	jmp	#LR__4930
32910                 | LR__4915
32910     1C 4E 05 F1 | 	add	fp, #28
32914     A7 2A 02 FB | 	rdlong	local03, fp
32918     1C 4E 85 F1 | 	sub	fp, #28
3291c     FF FF 7F FF 
32920     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
32924     1C 00 90 5D |  if_ne	jmp	#LR__4916
32928     04 4E 05 F1 | 	add	fp, #4
3292c     A7 2A 02 FB | 	rdlong	local03, fp
32930     04 4E 85 F1 | 	sub	fp, #4
32934     11 2A 06 F1 | 	add	local03, #17
32938     15 03 48 FC | 	wrbyte	#1, local03
3293c     01 FA 05 F6 | 	mov	result1, #1
32940     40 04 90 FD | 	jmp	#LR__4930
32944                 | LR__4916
32944     04 4E 05 F1 | 	add	fp, #4
32948     A7 2A 02 FB | 	rdlong	local03, fp
3294c     18 4E 05 F1 | 	add	fp, #24
32950     A7 34 02 FB | 	rdlong	local08, fp
32954     1C 4E 85 F1 | 	sub	fp, #28
32958     18 2A 06 F1 | 	add	local03, #24
3295c     15 35 62 FC | 	wrlong	local08, local03
32960                 | LR__4917
32960     18 4E 05 F1 | 	add	fp, #24
32964     A7 12 02 FB | 	rdlong	arg01, fp
32968     14 4E 85 F1 | 	sub	fp, #20
3296c     A7 2A 02 FB | 	rdlong	local03, fp
32970     04 4E 85 F1 | 	sub	fp, #4
32974     18 2A 06 F1 | 	add	local03, #24
32978     15 15 02 FB | 	rdlong	arg02, local03
3297c     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
32980     20 4E 05 F1 | 	add	fp, #32
32984     A7 FA 61 FC | 	wrlong	result1, fp
32988     20 4E 85 F1 | 	sub	fp, #32
3298c     00 FA 0D F2 | 	cmp	result1, #0 wz
32990     1C 00 90 5D |  if_ne	jmp	#LR__4918
32994     04 4E 05 F1 | 	add	fp, #4
32998     A7 2A 02 FB | 	rdlong	local03, fp
3299c     04 4E 85 F1 | 	sub	fp, #4
329a0     11 2A 06 F1 | 	add	local03, #17
329a4     15 05 48 FC | 	wrbyte	#2, local03
329a8     02 FA 05 F6 | 	mov	result1, #2
329ac     D4 03 90 FD | 	jmp	#LR__4930
329b0                 | LR__4918
329b0     20 4E 05 F1 | 	add	fp, #32
329b4     A7 2A 02 FB | 	rdlong	local03, fp
329b8     10 4E 05 F1 | 	add	fp, #16
329bc     A7 34 02 FB | 	rdlong	local08, fp
329c0     1A 2B 02 F1 | 	add	local03, local08
329c4     10 4E 85 F1 | 	sub	fp, #16
329c8     A7 2A 62 FC | 	wrlong	local03, fp
329cc     14 4E 85 F1 | 	sub	fp, #20
329d0     A7 2A 02 FB | 	rdlong	local03, fp
329d4     09 2A 46 F0 | 	shr	local03, #9
329d8     20 4E 05 F1 | 	add	fp, #32
329dc     A7 2A 62 FC | 	wrlong	local03, fp
329e0     2C 4E 85 F1 | 	sub	fp, #44
329e4     01 2A 16 F2 | 	cmp	local03, #1 wc
329e8     5C 01 90 CD |  if_b	jmp	#LR__4922
329ec     30 4E 05 F1 | 	add	fp, #48
329f0     A7 2A 02 FB | 	rdlong	local03, fp
329f4     04 4E 85 F1 | 	sub	fp, #4
329f8     A7 34 02 FB | 	rdlong	local08, fp
329fc     1A 2B 02 F1 | 	add	local03, local08
32a00     14 4E 85 F1 | 	sub	fp, #20
32a04     A7 34 02 FB | 	rdlong	local08, fp
32a08     18 4E 85 F1 | 	sub	fp, #24
32a0c     0A 34 06 F1 | 	add	local08, #10
32a10     1A 35 E2 FA | 	rdword	local08, local08
32a14     1A 2B 1A F2 | 	cmp	local03, local08 wcz
32a18     28 00 90 ED |  if_be	jmp	#LR__4919
32a1c     18 4E 05 F1 | 	add	fp, #24
32a20     A7 26 02 FB | 	rdlong	local01, fp
32a24     0A 26 06 F1 | 	add	local01, #10
32a28     13 2B E2 FA | 	rdword	local03, local01
32a2c     18 4E 05 F1 | 	add	fp, #24
32a30     A7 34 02 FB | 	rdlong	local08, fp
32a34     1A 2B 82 F1 | 	sub	local03, local08
32a38     04 4E 85 F1 | 	sub	fp, #4
32a3c     A7 2A 62 FC | 	wrlong	local03, fp
32a40     2C 4E 85 F1 | 	sub	fp, #44
32a44                 | LR__4919
32a44     18 4E 05 F1 | 	add	fp, #24
32a48     A7 26 02 FB | 	rdlong	local01, fp
32a4c     01 26 06 F1 | 	add	local01, #1
32a50     13 13 C2 FA | 	rdbyte	arg01, local01
32a54     1C 4E 05 F1 | 	add	fp, #28
32a58     A7 14 02 FB | 	rdlong	arg02, fp
32a5c     14 4E 85 F1 | 	sub	fp, #20
32a60     A7 16 02 FB | 	rdlong	arg03, fp
32a64     0C 4E 05 F1 | 	add	fp, #12
32a68     A7 18 02 FB | 	rdlong	arg04, fp
32a6c     2C 4E 85 F1 | 	sub	fp, #44
32a70     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
32a74     00 FA 0D F2 | 	cmp	result1, #0 wz
32a78     1C 00 90 AD |  if_e	jmp	#LR__4920
32a7c     04 4E 05 F1 | 	add	fp, #4
32a80     A7 2A 02 FB | 	rdlong	local03, fp
32a84     04 4E 85 F1 | 	sub	fp, #4
32a88     11 2A 06 F1 | 	add	local03, #17
32a8c     15 03 48 FC | 	wrbyte	#1, local03
32a90     01 FA 05 F6 | 	mov	result1, #1
32a94     EC 02 90 FD | 	jmp	#LR__4930
32a98                 | LR__4920
32a98     04 4E 05 F1 | 	add	fp, #4
32a9c     A7 26 02 FB | 	rdlong	local01, fp
32aa0     04 4E 85 F1 | 	sub	fp, #4
32aa4     10 26 06 F1 | 	add	local01, #16
32aa8     13 2B C2 FA | 	rdbyte	local03, local01
32aac     80 2A CE F7 | 	test	local03, #128 wz
32ab0     78 00 90 AD |  if_e	jmp	#LR__4921
32ab4     04 4E 05 F1 | 	add	fp, #4
32ab8     A7 34 02 FB | 	rdlong	local08, fp
32abc     1C 34 06 F1 | 	add	local08, #28
32ac0     1A 35 02 FB | 	rdlong	local08, local08
32ac4     1C 4E 05 F1 | 	add	fp, #28
32ac8     A7 36 02 FB | 	rdlong	local09, fp
32acc     1B 35 82 F1 | 	sub	local08, local09
32ad0     0C 4E 05 F1 | 	add	fp, #12
32ad4     A7 38 02 FB | 	rdlong	local10, fp
32ad8     2C 4E 85 F1 | 	sub	fp, #44
32adc     1C 3B 02 F6 | 	mov	local11, local10
32ae0     1D 35 12 F2 | 	cmp	local08, local11 wc
32ae4     44 00 90 3D |  if_ae	jmp	#LR__4921
32ae8     34 4E 05 F1 | 	add	fp, #52
32aec     A7 12 02 FB | 	rdlong	arg01, fp
32af0     30 4E 85 F1 | 	sub	fp, #48
32af4     A7 14 02 FB | 	rdlong	arg02, fp
32af8     0A 3B 02 F6 | 	mov	local11, arg02
32afc     1C 3A 06 F1 | 	add	local11, #28
32b00     1D 37 02 FB | 	rdlong	local09, local11
32b04     1C 4E 05 F1 | 	add	fp, #28
32b08     A7 2E 02 FB | 	rdlong	local05, fp
32b0c     17 37 82 F1 | 	sub	local09, local05
32b10     09 36 66 F0 | 	shl	local09, #9
32b14     1B 3B 02 F6 | 	mov	local11, local09
32b18     1B 13 02 F1 | 	add	arg01, local09
32b1c     20 4E 85 F1 | 	sub	fp, #32
32b20     28 14 06 F1 | 	add	arg02, #40
32b24     09 16 C6 F9 | 	decod	arg03, #9
32b28     64 43 BF FD | 	call	#__system____builtin_memmove
32b2c                 | LR__4921
32b2c     2C 4E 05 F1 | 	add	fp, #44
32b30     A7 2A 02 FB | 	rdlong	local03, fp
32b34     09 2A 66 F0 | 	shl	local03, #9
32b38     04 4E 85 F1 | 	sub	fp, #4
32b3c     A7 2A 62 FC | 	wrlong	local03, fp
32b40     28 4E 85 F1 | 	sub	fp, #40
32b44                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
32b44                 | ' 				}
32b44                 | ' 
32b44                 | ' 
32b44                 | ' 				rcnt =  ((UINT) 512 )  * cc;
32b44                 | ' 				continue;
32b44     B4 01 90 FD | 	jmp	#LR__4928
32b48                 | LR__4922
32b48     04 4E 05 F1 | 	add	fp, #4
32b4c     A7 2A 02 FB | 	rdlong	local03, fp
32b50     1C 2A 06 F1 | 	add	local03, #28
32b54     15 2B 02 FB | 	rdlong	local03, local03
32b58     1C 4E 05 F1 | 	add	fp, #28
32b5c     A7 26 02 FB | 	rdlong	local01, fp
32b60     20 4E 85 F1 | 	sub	fp, #32
32b64     13 2B 0A F2 | 	cmp	local03, local01 wz
32b68     EC 00 90 AD |  if_e	jmp	#LR__4926
32b6c     04 4E 05 F1 | 	add	fp, #4
32b70     A7 26 02 FB | 	rdlong	local01, fp
32b74     04 4E 85 F1 | 	sub	fp, #4
32b78     10 26 06 F1 | 	add	local01, #16
32b7c     13 2B C2 FA | 	rdbyte	local03, local01
32b80     80 2A CE F7 | 	test	local03, #128 wz
32b84     7C 00 90 AD |  if_e	jmp	#LR__4924
32b88     18 4E 05 F1 | 	add	fp, #24
32b8c     A7 26 02 FB | 	rdlong	local01, fp
32b90     01 26 06 F1 | 	add	local01, #1
32b94     13 13 C2 FA | 	rdbyte	arg01, local01
32b98     14 4E 85 F1 | 	sub	fp, #20
32b9c     A7 2A 02 FB | 	rdlong	local03, fp
32ba0     15 15 02 F6 | 	mov	arg02, local03
32ba4     28 14 06 F1 | 	add	arg02, #40
32ba8     04 4E 85 F1 | 	sub	fp, #4
32bac     1C 2A 06 F1 | 	add	local03, #28
32bb0     15 17 02 FB | 	rdlong	arg03, local03
32bb4     01 18 06 F6 | 	mov	arg04, #1
32bb8     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
32bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
32bc0     1C 00 90 AD |  if_e	jmp	#LR__4923
32bc4     04 4E 05 F1 | 	add	fp, #4
32bc8     A7 2A 02 FB | 	rdlong	local03, fp
32bcc     04 4E 85 F1 | 	sub	fp, #4
32bd0     11 2A 06 F1 | 	add	local03, #17
32bd4     15 03 48 FC | 	wrbyte	#1, local03
32bd8     01 FA 05 F6 | 	mov	result1, #1
32bdc     A4 01 90 FD | 	jmp	#LR__4930
32be0                 | LR__4923
32be0     04 4E 05 F1 | 	add	fp, #4
32be4     A7 3A 02 FB | 	rdlong	local11, fp
32be8     1D 2B 02 F6 | 	mov	local03, local11
32bec     04 4E 85 F1 | 	sub	fp, #4
32bf0     10 3A 06 F1 | 	add	local11, #16
32bf4     1D 3B C2 FA | 	rdbyte	local11, local11
32bf8     7F 3A 06 F5 | 	and	local11, #127
32bfc     10 2A 06 F1 | 	add	local03, #16
32c00     15 3B 42 FC | 	wrbyte	local11, local03
32c04                 | LR__4924
32c04     18 4E 05 F1 | 	add	fp, #24
32c08     A7 26 02 FB | 	rdlong	local01, fp
32c0c     01 26 06 F1 | 	add	local01, #1
32c10     13 13 C2 FA | 	rdbyte	arg01, local01
32c14     14 4E 85 F1 | 	sub	fp, #20
32c18     A7 14 02 FB | 	rdlong	arg02, fp
32c1c     28 14 06 F1 | 	add	arg02, #40
32c20     1C 4E 05 F1 | 	add	fp, #28
32c24     A7 16 02 FB | 	rdlong	arg03, fp
32c28     20 4E 85 F1 | 	sub	fp, #32
32c2c     01 18 06 F6 | 	mov	arg04, #1
32c30     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
32c34     00 FA 0D F2 | 	cmp	result1, #0 wz
32c38     1C 00 90 AD |  if_e	jmp	#LR__4925
32c3c     04 4E 05 F1 | 	add	fp, #4
32c40     A7 2A 02 FB | 	rdlong	local03, fp
32c44     04 4E 85 F1 | 	sub	fp, #4
32c48     11 2A 06 F1 | 	add	local03, #17
32c4c     15 03 48 FC | 	wrbyte	#1, local03
32c50     01 FA 05 F6 | 	mov	result1, #1
32c54     2C 01 90 FD | 	jmp	#LR__4930
32c58                 | LR__4925
32c58                 | LR__4926
32c58     04 4E 05 F1 | 	add	fp, #4
32c5c     A7 2A 02 FB | 	rdlong	local03, fp
32c60     1C 4E 05 F1 | 	add	fp, #28
32c64     A7 3A 02 FB | 	rdlong	local11, fp
32c68     20 4E 85 F1 | 	sub	fp, #32
32c6c     1C 2A 06 F1 | 	add	local03, #28
32c70     15 3B 62 FC | 	wrlong	local11, local03
32c74                 | LR__4927
32c74     04 4E 05 F1 | 	add	fp, #4
32c78     A7 26 02 FB | 	rdlong	local01, fp
32c7c     14 26 06 F1 | 	add	local01, #20
32c80     13 3B 02 FB | 	rdlong	local11, local01
32c84     FF 3B 06 F5 | 	and	local11, #511
32c88     09 2A C6 F9 | 	decod	local03, #9
32c8c     1D 2B 82 F1 | 	sub	local03, local11
32c90     24 4E 05 F1 | 	add	fp, #36
32c94     A7 2A 62 FC | 	wrlong	local03, fp
32c98     1C 4E 85 F1 | 	sub	fp, #28
32c9c     A7 3A 02 FB | 	rdlong	local11, fp
32ca0     0C 4E 85 F1 | 	sub	fp, #12
32ca4     1D 2B 1A F2 | 	cmp	local03, local11 wcz
32ca8     0C 4E 05 11 |  if_a	add	fp, #12
32cac     A7 2A 02 1B |  if_a	rdlong	local03, fp
32cb0     1C 4E 05 11 |  if_a	add	fp, #28
32cb4     A7 2A 62 1C |  if_a	wrlong	local03, fp
32cb8     28 4E 85 11 |  if_a	sub	fp, #40
32cbc     34 4E 05 F1 | 	add	fp, #52
32cc0     A7 12 02 FB | 	rdlong	arg01, fp
32cc4     30 4E 85 F1 | 	sub	fp, #48
32cc8     A7 30 02 FB | 	rdlong	local06, fp
32ccc     18 15 02 F6 | 	mov	arg02, local06
32cd0     28 14 06 F1 | 	add	arg02, #40
32cd4     14 30 06 F1 | 	add	local06, #20
32cd8     18 3B 02 FB | 	rdlong	local11, local06
32cdc     1D 37 02 F6 | 	mov	local09, local11
32ce0     1B 39 02 F6 | 	mov	local10, local09
32ce4     FF 39 06 F5 | 	and	local10, #511
32ce8     1C 15 02 F1 | 	add	arg02, local10
32cec     24 4E 05 F1 | 	add	fp, #36
32cf0     A7 16 02 FB | 	rdlong	arg03, fp
32cf4     28 4E 85 F1 | 	sub	fp, #40
32cf8     94 41 BF FD | 	call	#__system____builtin_memmove
32cfc                 | LR__4928
32cfc     0C 4E 05 F1 | 	add	fp, #12
32d00     A7 2A 02 FB | 	rdlong	local03, fp
32d04     1C 4E 05 F1 | 	add	fp, #28
32d08     A7 34 02 FB | 	rdlong	local08, fp
32d0c     1A 2B 82 F1 | 	sub	local03, local08
32d10     1C 4E 85 F1 | 	sub	fp, #28
32d14     A7 2A 62 FC | 	wrlong	local03, fp
32d18     04 4E 05 F1 | 	add	fp, #4
32d1c     A7 26 02 FB | 	rdlong	local01, fp
32d20     13 33 02 FB | 	rdlong	local07, local01
32d24     18 4E 05 F1 | 	add	fp, #24
32d28     A7 34 02 FB | 	rdlong	local08, fp
32d2c     1A 33 02 F1 | 	add	local07, local08
32d30     13 33 62 FC | 	wrlong	local07, local01
32d34     0C 4E 05 F1 | 	add	fp, #12
32d38     A7 2A 02 FB | 	rdlong	local03, fp
32d3c     0C 4E 85 F1 | 	sub	fp, #12
32d40     A7 3C 02 FB | 	rdlong	local12, fp
32d44     1E 2B 02 F1 | 	add	local03, local12
32d48     0C 4E 05 F1 | 	add	fp, #12
32d4c     A7 2A 62 FC | 	wrlong	local03, fp
32d50     30 4E 85 F1 | 	sub	fp, #48
32d54     A7 3E 02 FB | 	rdlong	local13, fp
32d58     1F 2B 02 F6 | 	mov	local03, local13
32d5c     14 3E 06 F1 | 	add	local13, #20
32d60     1F 41 02 FB | 	rdlong	local14, local13
32d64     24 4E 05 F1 | 	add	fp, #36
32d68     A7 30 02 FB | 	rdlong	local06, fp
32d6c     28 4E 85 F1 | 	sub	fp, #40
32d70     18 41 02 F1 | 	add	local14, local06
32d74     14 2A 06 F1 | 	add	local03, #20
32d78     15 41 62 FC | 	wrlong	local14, local03
32d7c     84 FA 9F FD | 	jmp	#LR__4912
32d80                 | LR__4929
32d80                 | ' 
32d80                 | ' 
32d80                 | ' 
32d80                 | ' 
32d80                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
32d80                 | ' 
32d80                 | ' 	}
32d80                 | ' 
32d80                 | ' 	return FR_OK ;
32d80     00 FA 05 F6 | 	mov	result1, #0
32d84                 | LR__4930
32d84     A7 F0 03 F6 | 	mov	ptra, fp
32d88     B2 00 A0 FD | 	call	#popregs_
32d8c                 | _fatfs_cc_f_read_ret
32d8c     2D 00 64 FD | 	ret
32d90                 | 
32d90                 | _fatfs_cc_f_write
32d90     15 4A 05 F6 | 	mov	COUNT_, #21
32d94     A8 00 A0 FD | 	call	#pushregs_
32d98     34 F0 07 F1 | 	add	ptra, #52
32d9c     04 4E 05 F1 | 	add	fp, #4
32da0     A7 12 62 FC | 	wrlong	arg01, fp
32da4     04 4E 05 F1 | 	add	fp, #4
32da8     A7 14 62 FC | 	wrlong	arg02, fp
32dac     04 4E 05 F1 | 	add	fp, #4
32db0     A7 16 62 FC | 	wrlong	arg03, fp
32db4     04 4E 05 F1 | 	add	fp, #4
32db8     A7 18 62 FC | 	wrlong	arg04, fp
32dbc     08 4E 85 F1 | 	sub	fp, #8
32dc0     A7 FA 01 FB | 	rdlong	result1, fp
32dc4     28 4E 05 F1 | 	add	fp, #40
32dc8     A7 FA 61 FC | 	wrlong	result1, fp
32dcc     20 4E 85 F1 | 	sub	fp, #32
32dd0     A7 FA 01 FB | 	rdlong	result1, fp
32dd4     FD 00 68 FC | 	wrlong	#0, result1
32dd8     0C 4E 85 F1 | 	sub	fp, #12
32ddc     A7 12 02 FB | 	rdlong	arg01, fp
32de0     14 4E 05 F1 | 	add	fp, #20
32de4     A7 14 02 F6 | 	mov	arg02, fp
32de8     18 4E 85 F1 | 	sub	fp, #24
32dec     88 F0 BF FD | 	call	#_fatfs_cc_validate
32df0     14 4E 05 F1 | 	add	fp, #20
32df4     A7 FA 61 FC | 	wrlong	result1, fp
32df8     00 FA 4D F2 | 	cmps	result1, #0 wz
32dfc     14 4E 85 F1 | 	sub	fp, #20
32e00     20 00 90 5D |  if_ne	jmp	#LR__4940
32e04     04 4E 05 F1 | 	add	fp, #4
32e08     A7 14 02 FB | 	rdlong	arg02, fp
32e0c     11 14 06 F1 | 	add	arg02, #17
32e10     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
32e14     10 4E 05 F1 | 	add	fp, #16
32e18     A7 14 62 FC | 	wrlong	arg02, fp
32e1c     14 4E 85 F1 | 	sub	fp, #20
32e20     10 00 90 AD |  if_e	jmp	#LR__4941
32e24                 | LR__4940
32e24     14 4E 05 F1 | 	add	fp, #20
32e28     A7 FA 01 FB | 	rdlong	result1, fp
32e2c     14 4E 85 F1 | 	sub	fp, #20
32e30     44 07 90 FD | 	jmp	#LR__4963
32e34                 | LR__4941
32e34     04 4E 05 F1 | 	add	fp, #4
32e38     A7 14 02 FB | 	rdlong	arg02, fp
32e3c     04 4E 85 F1 | 	sub	fp, #4
32e40     10 14 06 F1 | 	add	arg02, #16
32e44     0A 15 C2 FA | 	rdbyte	arg02, arg02
32e48     02 14 CE F7 | 	test	arg02, #2 wz
32e4c     07 FA 05 A6 |  if_e	mov	result1, #7
32e50     24 07 90 AD |  if_e	jmp	#LR__4963
32e54     04 4E 05 F1 | 	add	fp, #4
32e58     A7 14 02 FB | 	rdlong	arg02, fp
32e5c     0A 13 02 F6 | 	mov	arg01, arg02
32e60     14 12 06 F1 | 	add	arg01, #20
32e64     09 13 02 FB | 	rdlong	arg01, arg01
32e68     08 4E 05 F1 | 	add	fp, #8
32e6c     A7 FA 01 FB | 	rdlong	result1, fp
32e70     FD 12 02 F1 | 	add	arg01, result1
32e74     0C 4E 85 F1 | 	sub	fp, #12
32e78     14 14 06 F1 | 	add	arg02, #20
32e7c     0A FB 01 FB | 	rdlong	result1, arg02
32e80     FD 12 12 F2 | 	cmp	arg01, result1 wc
32e84     24 00 90 3D |  if_ae	jmp	#LR__4942
32e88     04 4E 05 F1 | 	add	fp, #4
32e8c     A7 14 02 FB | 	rdlong	arg02, fp
32e90     01 FA 65 F6 | 	neg	result1, #1
32e94     14 14 06 F1 | 	add	arg02, #20
32e98     0A 15 02 FB | 	rdlong	arg02, arg02
32e9c     0A FB 81 F1 | 	sub	result1, arg02
32ea0     08 4E 05 F1 | 	add	fp, #8
32ea4     A7 FA 61 FC | 	wrlong	result1, fp
32ea8     0C 4E 85 F1 | 	sub	fp, #12
32eac                 | LR__4942
32eac                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
32eac                 | ' 	}
32eac                 | ' 
32eac                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
32eac                 | LR__4943
32eac     0C 4E 05 F1 | 	add	fp, #12
32eb0     A7 FA 01 FB | 	rdlong	result1, fp
32eb4     0C 4E 85 F1 | 	sub	fp, #12
32eb8     01 FA 15 F2 | 	cmp	result1, #1 wc
32ebc     90 06 90 CD |  if_b	jmp	#LR__4962
32ec0     04 4E 05 F1 | 	add	fp, #4
32ec4     A7 FA 01 FB | 	rdlong	result1, fp
32ec8     04 4E 85 F1 | 	sub	fp, #4
32ecc     14 FA 05 F1 | 	add	result1, #20
32ed0     FD FA 01 FB | 	rdlong	result1, result1
32ed4     FF FB CD F7 | 	test	result1, #511 wz
32ed8     D8 04 90 5D |  if_ne	jmp	#LR__4958
32edc     04 4E 05 F1 | 	add	fp, #4
32ee0     A7 FA 01 FB | 	rdlong	result1, fp
32ee4     14 FA 05 F1 | 	add	result1, #20
32ee8     FD FA 01 FB | 	rdlong	result1, result1
32eec     09 FA 45 F0 | 	shr	result1, #9
32ef0     14 4E 05 F1 | 	add	fp, #20
32ef4     A7 14 02 FB | 	rdlong	arg02, fp
32ef8     0A 14 06 F1 | 	add	arg02, #10
32efc     0A 19 E2 FA | 	rdword	arg04, arg02
32f00     0C 15 32 F9 | 	getword	arg02, arg04, #0
32f04     01 14 86 F1 | 	sub	arg02, #1
32f08     0A FB 09 F5 | 	and	result1, arg02 wz
32f0c     14 4E 05 F1 | 	add	fp, #20
32f10     A7 FA 61 FC | 	wrlong	result1, fp
32f14     2C 4E 85 F1 | 	sub	fp, #44
32f18     44 01 90 5D |  if_ne	jmp	#LR__4949
32f1c     04 4E 05 F1 | 	add	fp, #4
32f20     A7 FA 01 FB | 	rdlong	result1, fp
32f24     04 4E 85 F1 | 	sub	fp, #4
32f28     14 FA 05 F1 | 	add	result1, #20
32f2c     FD 14 0A FB | 	rdlong	arg02, result1 wz
32f30     44 00 90 5D |  if_ne	jmp	#LR__4944
32f34     04 4E 05 F1 | 	add	fp, #4
32f38     A7 14 02 FB | 	rdlong	arg02, fp
32f3c     08 14 06 F1 | 	add	arg02, #8
32f40     0A 15 0A FB | 	rdlong	arg02, arg02 wz
32f44     18 4E 05 F1 | 	add	fp, #24
32f48     A7 14 62 FC | 	wrlong	arg02, fp
32f4c     1C 4E 85 F1 | 	sub	fp, #28
32f50     4C 00 90 5D |  if_ne	jmp	#LR__4945
32f54     04 4E 05 F1 | 	add	fp, #4
32f58     A7 12 02 FB | 	rdlong	arg01, fp
32f5c     04 4E 85 F1 | 	sub	fp, #4
32f60     00 14 06 F6 | 	mov	arg02, #0
32f64     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
32f68     1C 4E 05 F1 | 	add	fp, #28
32f6c     A7 FA 61 FC | 	wrlong	result1, fp
32f70     1C 4E 85 F1 | 	sub	fp, #28
32f74     28 00 90 FD | 	jmp	#LR__4945
32f78                 | LR__4944
32f78     04 4E 05 F1 | 	add	fp, #4
32f7c     A7 18 02 FB | 	rdlong	arg04, fp
32f80     0C 13 02 F6 | 	mov	arg01, arg04
32f84     04 4E 85 F1 | 	sub	fp, #4
32f88     18 18 06 F1 | 	add	arg04, #24
32f8c     0C 15 02 FB | 	rdlong	arg02, arg04
32f90     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
32f94     1C 4E 05 F1 | 	add	fp, #28
32f98     A7 FA 61 FC | 	wrlong	result1, fp
32f9c     1C 4E 85 F1 | 	sub	fp, #28
32fa0                 | LR__4945
32fa0     1C 4E 05 F1 | 	add	fp, #28
32fa4     A7 FA 09 FB | 	rdlong	result1, fp wz
32fa8     1C 4E 85 F1 | 	sub	fp, #28
32fac     A0 05 90 AD |  if_e	jmp	#LR__4962
32fb0     1C 4E 05 F1 | 	add	fp, #28
32fb4     A7 FA 01 FB | 	rdlong	result1, fp
32fb8     1C 4E 85 F1 | 	sub	fp, #28
32fbc     01 FA 0D F2 | 	cmp	result1, #1 wz
32fc0     1C 00 90 5D |  if_ne	jmp	#LR__4946
32fc4     04 4E 05 F1 | 	add	fp, #4
32fc8     A7 FA 01 FB | 	rdlong	result1, fp
32fcc     04 4E 85 F1 | 	sub	fp, #4
32fd0     11 FA 05 F1 | 	add	result1, #17
32fd4     FD 04 48 FC | 	wrbyte	#2, result1
32fd8     02 FA 05 F6 | 	mov	result1, #2
32fdc     98 05 90 FD | 	jmp	#LR__4963
32fe0                 | LR__4946
32fe0     1C 4E 05 F1 | 	add	fp, #28
32fe4     A7 FA 01 FB | 	rdlong	result1, fp
32fe8     1C 4E 85 F1 | 	sub	fp, #28
32fec     FF FF 7F FF 
32ff0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
32ff4     1C 00 90 5D |  if_ne	jmp	#LR__4947
32ff8     04 4E 05 F1 | 	add	fp, #4
32ffc     A7 FA 01 FB | 	rdlong	result1, fp
33000     04 4E 85 F1 | 	sub	fp, #4
33004     11 FA 05 F1 | 	add	result1, #17
33008     FD 02 48 FC | 	wrbyte	#1, result1
3300c     01 FA 05 F6 | 	mov	result1, #1
33010     64 05 90 FD | 	jmp	#LR__4963
33014                 | LR__4947
33014     04 4E 05 F1 | 	add	fp, #4
33018     A7 FA 01 FB | 	rdlong	result1, fp
3301c     18 4E 05 F1 | 	add	fp, #24
33020     A7 18 02 FB | 	rdlong	arg04, fp
33024     18 FA 05 F1 | 	add	result1, #24
33028     FD 18 62 FC | 	wrlong	arg04, result1
3302c     18 4E 85 F1 | 	sub	fp, #24
33030     A7 FA 01 FB | 	rdlong	result1, fp
33034     04 4E 85 F1 | 	sub	fp, #4
33038     08 FA 05 F1 | 	add	result1, #8
3303c     FD FA 09 FB | 	rdlong	result1, result1 wz
33040     1C 00 90 5D |  if_ne	jmp	#LR__4948
33044     04 4E 05 F1 | 	add	fp, #4
33048     A7 18 02 FB | 	rdlong	arg04, fp
3304c     18 4E 05 F1 | 	add	fp, #24
33050     A7 FA 01 FB | 	rdlong	result1, fp
33054     1C 4E 85 F1 | 	sub	fp, #28
33058     08 18 06 F1 | 	add	arg04, #8
3305c     0C FB 61 FC | 	wrlong	result1, arg04
33060                 | LR__4948
33060                 | LR__4949
33060     04 4E 05 F1 | 	add	fp, #4
33064     A7 18 02 FB | 	rdlong	arg04, fp
33068     04 4E 85 F1 | 	sub	fp, #4
3306c     10 18 06 F1 | 	add	arg04, #16
33070     0C 19 C2 FA | 	rdbyte	arg04, arg04
33074     80 18 CE F7 | 	test	arg04, #128 wz
33078     7C 00 90 AD |  if_e	jmp	#LR__4951
3307c     18 4E 05 F1 | 	add	fp, #24
33080     A7 18 02 FB | 	rdlong	arg04, fp
33084     01 18 06 F1 | 	add	arg04, #1
33088     0C 13 C2 FA | 	rdbyte	arg01, arg04
3308c     14 4E 85 F1 | 	sub	fp, #20
33090     A7 18 02 FB | 	rdlong	arg04, fp
33094     0C 15 02 F6 | 	mov	arg02, arg04
33098     28 14 06 F1 | 	add	arg02, #40
3309c     04 4E 85 F1 | 	sub	fp, #4
330a0     1C 18 06 F1 | 	add	arg04, #28
330a4     0C 17 02 FB | 	rdlong	arg03, arg04
330a8     01 18 06 F6 | 	mov	arg04, #1
330ac     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
330b0     00 FA 0D F2 | 	cmp	result1, #0 wz
330b4     1C 00 90 AD |  if_e	jmp	#LR__4950
330b8     04 4E 05 F1 | 	add	fp, #4
330bc     A7 FA 01 FB | 	rdlong	result1, fp
330c0     04 4E 85 F1 | 	sub	fp, #4
330c4     11 FA 05 F1 | 	add	result1, #17
330c8     FD 02 48 FC | 	wrbyte	#1, result1
330cc     01 FA 05 F6 | 	mov	result1, #1
330d0     A4 04 90 FD | 	jmp	#LR__4963
330d4                 | LR__4950
330d4     04 4E 05 F1 | 	add	fp, #4
330d8     A7 18 02 FB | 	rdlong	arg04, fp
330dc     0C FB 01 F6 | 	mov	result1, arg04
330e0     04 4E 85 F1 | 	sub	fp, #4
330e4     10 18 06 F1 | 	add	arg04, #16
330e8     0C 19 C2 FA | 	rdbyte	arg04, arg04
330ec     7F 18 06 F5 | 	and	arg04, #127
330f0     10 FA 05 F1 | 	add	result1, #16
330f4     FD 18 42 FC | 	wrbyte	arg04, result1
330f8                 | LR__4951
330f8     18 4E 05 F1 | 	add	fp, #24
330fc     A7 12 02 FB | 	rdlong	arg01, fp
33100     14 4E 85 F1 | 	sub	fp, #20
33104     A7 14 02 FB | 	rdlong	arg02, fp
33108     04 4E 85 F1 | 	sub	fp, #4
3310c     18 14 06 F1 | 	add	arg02, #24
33110     0A 15 02 FB | 	rdlong	arg02, arg02
33114     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
33118     20 4E 05 F1 | 	add	fp, #32
3311c     A7 FA 61 FC | 	wrlong	result1, fp
33120     20 4E 85 F1 | 	sub	fp, #32
33124     00 FA 0D F2 | 	cmp	result1, #0 wz
33128     1C 00 90 5D |  if_ne	jmp	#LR__4952
3312c     04 4E 05 F1 | 	add	fp, #4
33130     A7 FA 01 FB | 	rdlong	result1, fp
33134     04 4E 85 F1 | 	sub	fp, #4
33138     11 FA 05 F1 | 	add	result1, #17
3313c     FD 04 48 FC | 	wrbyte	#2, result1
33140     02 FA 05 F6 | 	mov	result1, #2
33144     30 04 90 FD | 	jmp	#LR__4963
33148                 | LR__4952
33148     20 4E 05 F1 | 	add	fp, #32
3314c     A7 FA 01 FB | 	rdlong	result1, fp
33150     0C 4E 05 F1 | 	add	fp, #12
33154     A7 26 02 FB | 	rdlong	local01, fp
33158     13 FB 01 F1 | 	add	result1, local01
3315c     0C 4E 85 F1 | 	sub	fp, #12
33160     A7 FA 61 FC | 	wrlong	result1, fp
33164     14 4E 85 F1 | 	sub	fp, #20
33168     A7 FA 01 FB | 	rdlong	result1, fp
3316c     09 FA 45 F0 | 	shr	result1, #9
33170     1C 4E 05 F1 | 	add	fp, #28
33174     A7 FA 61 FC | 	wrlong	result1, fp
33178     28 4E 85 F1 | 	sub	fp, #40
3317c     01 FA 15 F2 | 	cmp	result1, #1 wc
33180     60 01 90 CD |  if_b	jmp	#LR__4956
33184     2C 4E 05 F1 | 	add	fp, #44
33188     A7 FA 01 FB | 	rdlong	result1, fp
3318c     04 4E 85 F1 | 	sub	fp, #4
33190     A7 18 02 FB | 	rdlong	arg04, fp
33194     0C FB 01 F1 | 	add	result1, arg04
33198     10 4E 85 F1 | 	sub	fp, #16
3319c     A7 18 02 FB | 	rdlong	arg04, fp
331a0     18 4E 85 F1 | 	sub	fp, #24
331a4     0A 18 06 F1 | 	add	arg04, #10
331a8     0C 19 E2 FA | 	rdword	arg04, arg04
331ac     0C FB 19 F2 | 	cmp	result1, arg04 wcz
331b0     28 00 90 ED |  if_be	jmp	#LR__4953
331b4     18 4E 05 F1 | 	add	fp, #24
331b8     A7 FA 01 FB | 	rdlong	result1, fp
331bc     0A FA 05 F1 | 	add	result1, #10
331c0     FD FA E1 FA | 	rdword	result1, result1
331c4     14 4E 05 F1 | 	add	fp, #20
331c8     A7 18 02 FB | 	rdlong	arg04, fp
331cc     0C FB 81 F1 | 	sub	result1, arg04
331d0     04 4E 85 F1 | 	sub	fp, #4
331d4     A7 FA 61 FC | 	wrlong	result1, fp
331d8     28 4E 85 F1 | 	sub	fp, #40
331dc                 | LR__4953
331dc     18 4E 05 F1 | 	add	fp, #24
331e0     A7 18 02 FB | 	rdlong	arg04, fp
331e4     01 18 06 F1 | 	add	arg04, #1
331e8     0C 13 C2 FA | 	rdbyte	arg01, arg04
331ec     18 4E 05 F1 | 	add	fp, #24
331f0     A7 14 02 FB | 	rdlong	arg02, fp
331f4     10 4E 85 F1 | 	sub	fp, #16
331f8     A7 16 02 FB | 	rdlong	arg03, fp
331fc     08 4E 05 F1 | 	add	fp, #8
33200     A7 18 02 FB | 	rdlong	arg04, fp
33204     28 4E 85 F1 | 	sub	fp, #40
33208     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
3320c     00 FA 0D F2 | 	cmp	result1, #0 wz
33210     1C 00 90 AD |  if_e	jmp	#LR__4954
33214     04 4E 05 F1 | 	add	fp, #4
33218     A7 26 02 FB | 	rdlong	local01, fp
3321c     04 4E 85 F1 | 	sub	fp, #4
33220     11 26 06 F1 | 	add	local01, #17
33224     13 03 48 FC | 	wrbyte	#1, local01
33228     01 FA 05 F6 | 	mov	result1, #1
3322c     48 03 90 FD | 	jmp	#LR__4963
33230                 | LR__4954
33230     04 4E 05 F1 | 	add	fp, #4
33234     A7 FA 01 FB | 	rdlong	result1, fp
33238     1C FA 05 F1 | 	add	result1, #28
3323c     FD FA 01 FB | 	rdlong	result1, result1
33240     1C 4E 05 F1 | 	add	fp, #28
33244     A7 28 02 FB | 	rdlong	local02, fp
33248     14 FB 81 F1 | 	sub	result1, local02
3324c     08 4E 05 F1 | 	add	fp, #8
33250     A7 18 02 FB | 	rdlong	arg04, fp
33254     28 4E 85 F1 | 	sub	fp, #40
33258     0C FB 11 F2 | 	cmp	result1, arg04 wc
3325c     68 00 90 3D |  if_ae	jmp	#LR__4955
33260     04 4E 05 F1 | 	add	fp, #4
33264     A7 12 02 FB | 	rdlong	arg01, fp
33268     28 12 06 F1 | 	add	arg01, #40
3326c     2C 4E 05 F1 | 	add	fp, #44
33270     A7 14 02 FB | 	rdlong	arg02, fp
33274     2C 4E 85 F1 | 	sub	fp, #44
33278     A7 FA 01 FB | 	rdlong	result1, fp
3327c     1C FA 05 F1 | 	add	result1, #28
33280     FD 2A 02 FB | 	rdlong	local03, result1
33284     1C 4E 05 F1 | 	add	fp, #28
33288     A7 18 02 FB | 	rdlong	arg04, fp
3328c     20 4E 85 F1 | 	sub	fp, #32
33290     0C 2B 82 F1 | 	sub	local03, arg04
33294     09 2A 66 F0 | 	shl	local03, #9
33298     15 15 02 F1 | 	add	arg02, local03
3329c     09 16 C6 F9 | 	decod	arg03, #9
332a0     EC 3B BF FD | 	call	#__system____builtin_memmove
332a4     04 4E 05 F1 | 	add	fp, #4
332a8     A7 18 02 FB | 	rdlong	arg04, fp
332ac     0C FB 01 F6 | 	mov	result1, arg04
332b0     04 4E 85 F1 | 	sub	fp, #4
332b4     10 18 06 F1 | 	add	arg04, #16
332b8     0C 19 C2 FA | 	rdbyte	arg04, arg04
332bc     7F 18 06 F5 | 	and	arg04, #127
332c0     10 FA 05 F1 | 	add	result1, #16
332c4     FD 18 42 FC | 	wrbyte	arg04, result1
332c8                 | LR__4955
332c8     28 4E 05 F1 | 	add	fp, #40
332cc     A7 FA 01 FB | 	rdlong	result1, fp
332d0     09 FA 65 F0 | 	shl	result1, #9
332d4     04 4E 85 F1 | 	sub	fp, #4
332d8     A7 FA 61 FC | 	wrlong	result1, fp
332dc     24 4E 85 F1 | 	sub	fp, #36
332e0                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
332e0                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
332e0                 | ' 				}
332e0                 | ' 
332e0                 | ' 
332e0                 | ' 				wcnt =  ((UINT) 512 )  * cc;
332e0                 | ' 				continue;
332e0     74 01 90 FD | 	jmp	#LR__4959
332e4                 | LR__4956
332e4     04 4E 05 F1 | 	add	fp, #4
332e8     A7 28 02 FB | 	rdlong	local02, fp
332ec     1C 28 06 F1 | 	add	local02, #28
332f0     14 FB 01 FB | 	rdlong	result1, local02
332f4     1C 4E 05 F1 | 	add	fp, #28
332f8     A7 28 02 FB | 	rdlong	local02, fp
332fc     20 4E 85 F1 | 	sub	fp, #32
33300     14 FB 09 F2 | 	cmp	result1, local02 wz
33304     90 00 90 AD |  if_e	jmp	#LR__4957
33308     04 4E 05 F1 | 	add	fp, #4
3330c     A7 FA 01 FB | 	rdlong	result1, fp
33310     FD 2A 02 F6 | 	mov	local03, result1
33314     04 4E 85 F1 | 	sub	fp, #4
33318     14 2A 06 F1 | 	add	local03, #20
3331c     15 2B 02 FB | 	rdlong	local03, local03
33320     0C FA 05 F1 | 	add	result1, #12
33324     FD 2C 02 FB | 	rdlong	local04, result1
33328     16 2F 02 F6 | 	mov	local05, local04
3332c     17 2B 12 F2 | 	cmp	local03, local05 wc
33330     64 00 90 3D |  if_ae	jmp	#LR__4957
33334     18 4E 05 F1 | 	add	fp, #24
33338     A7 18 02 FB | 	rdlong	arg04, fp
3333c     01 18 06 F1 | 	add	arg04, #1
33340     0C 13 C2 FA | 	rdbyte	arg01, arg04
33344     14 4E 85 F1 | 	sub	fp, #20
33348     A7 30 02 FB | 	rdlong	local06, fp
3334c     28 30 06 F1 | 	add	local06, #40
33350     18 33 02 F6 | 	mov	local07, local06
33354     1C 4E 05 F1 | 	add	fp, #28
33358     A7 34 02 FB | 	rdlong	local08, fp
3335c     20 4E 85 F1 | 	sub	fp, #32
33360     01 36 06 F6 | 	mov	local09, #1
33364     19 15 02 F6 | 	mov	arg02, local07
33368     1A 17 02 F6 | 	mov	arg03, local08
3336c     01 18 06 F6 | 	mov	arg04, #1
33370     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
33374     FD 38 0A F6 | 	mov	local10, result1 wz
33378     1C 00 90 AD |  if_e	jmp	#LR__4957
3337c     04 4E 05 F1 | 	add	fp, #4
33380     A7 38 02 FB | 	rdlong	local10, fp
33384     04 4E 85 F1 | 	sub	fp, #4
33388     11 38 06 F1 | 	add	local10, #17
3338c     1C 03 48 FC | 	wrbyte	#1, local10
33390                 | ' 				fp->fptr < fp->obj.objsize &&
33390                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
33390                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
33390     01 FA 05 F6 | 	mov	result1, #1
33394     E0 01 90 FD | 	jmp	#LR__4963
33398                 | LR__4957
33398     04 4E 05 F1 | 	add	fp, #4
3339c     A7 18 02 FB | 	rdlong	arg04, fp
333a0     1C 4E 05 F1 | 	add	fp, #28
333a4     A7 FA 01 FB | 	rdlong	result1, fp
333a8     20 4E 85 F1 | 	sub	fp, #32
333ac     1C 18 06 F1 | 	add	arg04, #28
333b0     0C FB 61 FC | 	wrlong	result1, arg04
333b4                 | LR__4958
333b4     04 4E 05 F1 | 	add	fp, #4
333b8     A7 FA 01 FB | 	rdlong	result1, fp
333bc     14 FA 05 F1 | 	add	result1, #20
333c0     FD FA 01 FB | 	rdlong	result1, result1
333c4     FF FB 05 F5 | 	and	result1, #511
333c8     09 3A C6 F9 | 	decod	local11, #9
333cc     FD 3A 82 F1 | 	sub	local11, result1
333d0     20 4E 05 F1 | 	add	fp, #32
333d4     A7 3A 62 FC | 	wrlong	local11, fp
333d8     18 4E 85 F1 | 	sub	fp, #24
333dc     A7 FA 01 FB | 	rdlong	result1, fp
333e0     0C 4E 85 F1 | 	sub	fp, #12
333e4     FD 3A 1A F2 | 	cmp	local11, result1 wcz
333e8     0C 4E 05 11 |  if_a	add	fp, #12
333ec     A7 3A 02 1B |  if_a	rdlong	local11, fp
333f0     18 4E 05 11 |  if_a	add	fp, #24
333f4     A7 3A 62 1C |  if_a	wrlong	local11, fp
333f8     24 4E 85 11 |  if_a	sub	fp, #36
333fc     04 4E 05 F1 | 	add	fp, #4
33400     A7 3A 02 FB | 	rdlong	local11, fp
33404     1D 13 02 F6 | 	mov	arg01, local11
33408     28 12 06 F1 | 	add	arg01, #40
3340c     14 3A 06 F1 | 	add	local11, #20
33410     1D 3B 02 FB | 	rdlong	local11, local11
33414     FF 3B 06 F5 | 	and	local11, #511
33418     1D 13 02 F1 | 	add	arg01, local11
3341c     2C 4E 05 F1 | 	add	fp, #44
33420     A7 14 02 FB | 	rdlong	arg02, fp
33424     0C 4E 85 F1 | 	sub	fp, #12
33428     A7 16 02 FB | 	rdlong	arg03, fp
3342c     24 4E 85 F1 | 	sub	fp, #36
33430     5C 3A BF FD | 	call	#__system____builtin_memmove
33434     04 4E 05 F1 | 	add	fp, #4
33438     A7 FA 01 FB | 	rdlong	result1, fp
3343c     FD 3A 02 F6 | 	mov	local11, result1
33440     04 4E 85 F1 | 	sub	fp, #4
33444     10 FA 05 F1 | 	add	result1, #16
33448     FD FA C1 FA | 	rdbyte	result1, result1
3344c     80 FA 45 F5 | 	or	result1, #128
33450     10 3A 06 F1 | 	add	local11, #16
33454     1D FB 41 FC | 	wrbyte	result1, local11
33458                 | LR__4959
33458     0C 4E 05 F1 | 	add	fp, #12
3345c     A7 3A 02 FB | 	rdlong	local11, fp
33460     18 4E 05 F1 | 	add	fp, #24
33464     A7 FA 01 FB | 	rdlong	result1, fp
33468     FD 3A 82 F1 | 	sub	local11, result1
3346c     18 4E 85 F1 | 	sub	fp, #24
33470     A7 3A 62 FC | 	wrlong	local11, fp
33474     04 4E 05 F1 | 	add	fp, #4
33478     A7 3C 02 FB | 	rdlong	local12, fp
3347c     1E 3B 02 FB | 	rdlong	local11, local12
33480     14 4E 05 F1 | 	add	fp, #20
33484     A7 3E 02 FB | 	rdlong	local13, fp
33488     1F 3B 02 F1 | 	add	local11, local13
3348c     1E 3B 62 FC | 	wrlong	local11, local12
33490     0C 4E 05 F1 | 	add	fp, #12
33494     A7 3A 02 FB | 	rdlong	local11, fp
33498     0C 4E 85 F1 | 	sub	fp, #12
3349c     A7 40 02 FB | 	rdlong	local14, fp
334a0     20 3B 02 F1 | 	add	local11, local14
334a4     0C 4E 05 F1 | 	add	fp, #12
334a8     A7 3A 62 FC | 	wrlong	local11, fp
334ac     2C 4E 85 F1 | 	sub	fp, #44
334b0     A7 42 02 FB | 	rdlong	local15, fp
334b4     21 3B 02 F6 | 	mov	local11, local15
334b8     14 42 06 F1 | 	add	local15, #20
334bc     21 43 02 FB | 	rdlong	local15, local15
334c0     20 4E 05 F1 | 	add	fp, #32
334c4     A7 44 02 FB | 	rdlong	local16, fp
334c8     22 43 02 F1 | 	add	local15, local16
334cc     14 3A 06 F1 | 	add	local11, #20
334d0     1D 43 62 FC | 	wrlong	local15, local11
334d4     20 4E 85 F1 | 	sub	fp, #32
334d8     A7 46 02 FB | 	rdlong	local17, fp
334dc     23 3B 02 F6 | 	mov	local11, local17
334e0     23 49 02 F6 | 	mov	local18, local17
334e4     04 4E 85 F1 | 	sub	fp, #4
334e8     14 46 06 F1 | 	add	local17, #20
334ec     23 4B 02 FB | 	rdlong	local19, local17
334f0     0C 48 06 F1 | 	add	local18, #12
334f4     24 4D 02 FB | 	rdlong	local20, local18
334f8     26 4B 1A F2 | 	cmp	local19, local20 wcz
334fc     24 00 90 ED |  if_be	jmp	#LR__4960
33500     04 4E 05 F1 | 	add	fp, #4
33504     A7 2E 02 FB | 	rdlong	local05, fp
33508     04 4E 85 F1 | 	sub	fp, #4
3350c     17 2B 02 F6 | 	mov	local03, local05
33510     14 2A 06 F1 | 	add	local03, #20
33514     15 2D 02 FB | 	rdlong	local04, local03
33518     14 2A 86 F1 | 	sub	local03, #20
3351c     16 4F 02 F6 | 	mov	local21, local04
33520     20 00 90 FD | 	jmp	#LR__4961
33524                 | LR__4960
33524     04 4E 05 F1 | 	add	fp, #4
33528     A7 32 02 FB | 	rdlong	local07, fp
3352c     04 4E 85 F1 | 	sub	fp, #4
33530     19 39 02 F6 | 	mov	local10, local07
33534     0C 38 06 F1 | 	add	local10, #12
33538     1C 35 02 FB | 	rdlong	local08, local10
3353c     0C 38 86 F1 | 	sub	local10, #12
33540     1A 4F 02 F6 | 	mov	local21, local08
33544                 | LR__4961
33544     0C 3A 06 F1 | 	add	local11, #12
33548     1D 4F 62 FC | 	wrlong	local21, local11
3354c     5C F9 9F FD | 	jmp	#LR__4943
33550                 | LR__4962
33550     04 4E 05 F1 | 	add	fp, #4
33554     A7 3C 02 FB | 	rdlong	local12, fp
33558     1E 27 02 F6 | 	mov	local01, local12
3355c     04 4E 85 F1 | 	sub	fp, #4
33560     10 3C 06 F1 | 	add	local12, #16
33564     1E 3B C2 FA | 	rdbyte	local11, local12
33568     40 3A 46 F5 | 	or	local11, #64
3356c     10 26 06 F1 | 	add	local01, #16
33570     13 3B 42 FC | 	wrbyte	local11, local01
33574                 | ' 
33574                 | ' 
33574                 | ' 
33574                 | ' 
33574                 | ' 
33574                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
33574                 | ' 		fp->flag |=  0x80 ;
33574                 | ' 
33574                 | ' 	}
33574                 | ' 
33574                 | ' 	fp->flag |=  0x40 ;
33574                 | ' 
33574                 | ' 	return FR_OK ;
33574     00 FA 05 F6 | 	mov	result1, #0
33578                 | LR__4963
33578     A7 F0 03 F6 | 	mov	ptra, fp
3357c     B2 00 A0 FD | 	call	#popregs_
33580                 | _fatfs_cc_f_write_ret
33580     2D 00 64 FD | 	ret
33584                 | 
33584                 | _fatfs_cc_f_sync
33584     00 4A 05 F6 | 	mov	COUNT_, #0
33588     A8 00 A0 FD | 	call	#pushregs_
3358c     18 F0 07 F1 | 	add	ptra, #24
33590     04 4E 05 F1 | 	add	fp, #4
33594     A7 12 62 FC | 	wrlong	arg01, fp
33598     08 4E 05 F1 | 	add	fp, #8
3359c     A7 14 02 F6 | 	mov	arg02, fp
335a0     0C 4E 85 F1 | 	sub	fp, #12
335a4     D0 E8 BF FD | 	call	#_fatfs_cc_validate
335a8     08 4E 05 F1 | 	add	fp, #8
335ac     A7 FA 61 FC | 	wrlong	result1, fp
335b0     08 4E 85 F1 | 	sub	fp, #8
335b4     00 FA 0D F2 | 	cmp	result1, #0 wz
335b8     C0 01 90 5D |  if_ne	jmp	#LR__4973
335bc     04 4E 05 F1 | 	add	fp, #4
335c0     A7 18 02 FB | 	rdlong	arg04, fp
335c4     04 4E 85 F1 | 	sub	fp, #4
335c8     10 18 06 F1 | 	add	arg04, #16
335cc     0C 19 C2 FA | 	rdbyte	arg04, arg04
335d0     40 18 CE F7 | 	test	arg04, #64 wz
335d4     A4 01 90 AD |  if_e	jmp	#LR__4972
335d8     04 4E 05 F1 | 	add	fp, #4
335dc     A7 18 02 FB | 	rdlong	arg04, fp
335e0     04 4E 85 F1 | 	sub	fp, #4
335e4     10 18 06 F1 | 	add	arg04, #16
335e8     0C 19 C2 FA | 	rdbyte	arg04, arg04
335ec     80 18 CE F7 | 	test	arg04, #128 wz
335f0     64 00 90 AD |  if_e	jmp	#LR__4970
335f4     0C 4E 05 F1 | 	add	fp, #12
335f8     A7 18 02 FB | 	rdlong	arg04, fp
335fc     01 18 06 F1 | 	add	arg04, #1
33600     0C 13 C2 FA | 	rdbyte	arg01, arg04
33604     08 4E 85 F1 | 	sub	fp, #8
33608     A7 18 02 FB | 	rdlong	arg04, fp
3360c     0C 15 02 F6 | 	mov	arg02, arg04
33610     28 14 06 F1 | 	add	arg02, #40
33614     04 4E 85 F1 | 	sub	fp, #4
33618     1C 18 06 F1 | 	add	arg04, #28
3361c     0C 17 02 FB | 	rdlong	arg03, arg04
33620     01 18 06 F6 | 	mov	arg04, #1
33624     0C AE BF FD | 	call	#_fatfs_cc_disk_write
33628     00 FA 0D F2 | 	cmp	result1, #0 wz
3362c     01 FA 05 56 |  if_ne	mov	result1, #1
33630     54 01 90 5D |  if_ne	jmp	#LR__4974
33634     04 4E 05 F1 | 	add	fp, #4
33638     A7 18 02 FB | 	rdlong	arg04, fp
3363c     0C 17 02 F6 | 	mov	arg03, arg04
33640     04 4E 85 F1 | 	sub	fp, #4
33644     10 18 06 F1 | 	add	arg04, #16
33648     0C 19 C2 FA | 	rdbyte	arg04, arg04
3364c     7F 18 06 F5 | 	and	arg04, #127
33650     10 16 06 F1 | 	add	arg03, #16
33654     0B 19 42 FC | 	wrbyte	arg04, arg03
33658                 | LR__4970
33658     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
3365c     10 4E 05 F1 | 	add	fp, #16
33660     A7 FA 61 FC | 	wrlong	result1, fp
33664     04 4E 85 F1 | 	sub	fp, #4
33668     A7 12 02 FB | 	rdlong	arg01, fp
3366c     08 4E 85 F1 | 	sub	fp, #8
33670     A7 18 02 FB | 	rdlong	arg04, fp
33674     04 4E 85 F1 | 	sub	fp, #4
33678     20 18 06 F1 | 	add	arg04, #32
3367c     0C 15 02 FB | 	rdlong	arg02, arg04
33680     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
33684     08 4E 05 F1 | 	add	fp, #8
33688     A7 FA 61 FC | 	wrlong	result1, fp
3368c     08 4E 85 F1 | 	sub	fp, #8
33690     00 FA 0D F2 | 	cmp	result1, #0 wz
33694     E4 00 90 5D |  if_ne	jmp	#LR__4971
33698     04 4E 05 F1 | 	add	fp, #4
3369c     A7 18 02 FB | 	rdlong	arg04, fp
336a0     24 18 06 F1 | 	add	arg04, #36
336a4     0C 19 02 FB | 	rdlong	arg04, arg04
336a8     10 4E 05 F1 | 	add	fp, #16
336ac     A7 18 62 FC | 	wrlong	arg04, fp
336b0     0C 17 02 F6 | 	mov	arg03, arg04
336b4     0B 16 06 F1 | 	add	arg03, #11
336b8     0B 17 C2 FA | 	rdbyte	arg03, arg03
336bc     20 16 46 F5 | 	or	arg03, #32
336c0     0B 18 06 F1 | 	add	arg04, #11
336c4     0C 17 42 FC | 	wrbyte	arg03, arg04
336c8     10 4E 85 F1 | 	sub	fp, #16
336cc     A7 18 02 FB | 	rdlong	arg04, fp
336d0     0C 13 02 FB | 	rdlong	arg01, arg04
336d4     10 4E 05 F1 | 	add	fp, #16
336d8     A7 14 02 FB | 	rdlong	arg02, fp
336dc     14 4E 85 F1 | 	sub	fp, #20
336e0     08 18 06 F1 | 	add	arg04, #8
336e4     0C 17 02 FB | 	rdlong	arg03, arg04
336e8     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
336ec     14 4E 05 F1 | 	add	fp, #20
336f0     A7 12 02 FB | 	rdlong	arg01, fp
336f4     1C 12 06 F1 | 	add	arg01, #28
336f8     10 4E 85 F1 | 	sub	fp, #16
336fc     A7 18 02 FB | 	rdlong	arg04, fp
33700     0C 18 06 F1 | 	add	arg04, #12
33704     0C 15 02 FB | 	rdlong	arg02, arg04
33708     09 15 62 FC | 	wrlong	arg02, arg01
3370c     10 4E 05 F1 | 	add	fp, #16
33710     A7 12 02 FB | 	rdlong	arg01, fp
33714     16 12 06 F1 | 	add	arg01, #22
33718     04 4E 85 F1 | 	sub	fp, #4
3371c     A7 14 02 FB | 	rdlong	arg02, fp
33720     09 15 62 FC | 	wrlong	arg02, arg01
33724     04 4E 05 F1 | 	add	fp, #4
33728     A7 12 02 FB | 	rdlong	arg01, fp
3372c     12 12 06 F1 | 	add	arg01, #18
33730     09 01 58 FC | 	wrword	#0, arg01
33734     08 4E 85 F1 | 	sub	fp, #8
33738     A7 18 02 FB | 	rdlong	arg04, fp
3373c     03 18 06 F1 | 	add	arg04, #3
33740     0C 03 48 FC | 	wrbyte	#1, arg04
33744     A7 12 02 FB | 	rdlong	arg01, fp
33748     0C 4E 85 F1 | 	sub	fp, #12
3374c     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
33750     08 4E 05 F1 | 	add	fp, #8
33754     A7 FA 61 FC | 	wrlong	result1, fp
33758     04 4E 85 F1 | 	sub	fp, #4
3375c     A7 18 02 FB | 	rdlong	arg04, fp
33760     0C 17 02 F6 | 	mov	arg03, arg04
33764     04 4E 85 F1 | 	sub	fp, #4
33768     10 18 06 F1 | 	add	arg04, #16
3376c     0C 19 C2 FA | 	rdbyte	arg04, arg04
33770     BF 18 06 F5 | 	and	arg04, #191
33774     10 16 06 F1 | 	add	arg03, #16
33778     0B 19 42 FC | 	wrbyte	arg04, arg03
3377c                 | LR__4971
3377c                 | LR__4972
3377c                 | LR__4973
3377c                 | ' 					dir = fp->dir_ptr;
3377c                 | ' 					dir[ 11 ] |=  0x20 ;
3377c                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
3377c                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
3377c                 | ' 					st_dword(dir +  22 , tm);
3377c                 | ' 					st_word(dir +  18 , 0);
3377c                 | ' 					fs->wflag = 1;
3377c                 | ' 					res = sync_fs(fs);
3377c                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
3377c                 | ' 				}
3377c                 | ' 			}
3377c                 | ' 		}
3377c                 | ' 	}
3377c                 | ' 
3377c                 | ' 	return res ;
3377c     08 4E 05 F1 | 	add	fp, #8
33780     A7 FA 01 FB | 	rdlong	result1, fp
33784     08 4E 85 F1 | 	sub	fp, #8
33788                 | LR__4974
33788     A7 F0 03 F6 | 	mov	ptra, fp
3378c     B2 00 A0 FD | 	call	#popregs_
33790                 | _fatfs_cc_f_sync_ret
33790     2D 00 64 FD | 	ret
33794                 | 
33794                 | _fatfs_cc_f_close
33794     01 4A 05 F6 | 	mov	COUNT_, #1
33798     A8 00 A0 FD | 	call	#pushregs_
3379c     10 F0 07 F1 | 	add	ptra, #16
337a0     04 4E 05 F1 | 	add	fp, #4
337a4     A7 12 62 FC | 	wrlong	arg01, fp
337a8     04 4E 85 F1 | 	sub	fp, #4
337ac     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
337b0     08 4E 05 F1 | 	add	fp, #8
337b4     A7 FA 61 FC | 	wrlong	result1, fp
337b8     08 4E 85 F1 | 	sub	fp, #8
337bc     00 FA 0D F2 | 	cmp	result1, #0 wz
337c0     38 00 90 5D |  if_ne	jmp	#LR__4980
337c4     04 4E 05 F1 | 	add	fp, #4
337c8     A7 12 02 FB | 	rdlong	arg01, fp
337cc     08 4E 05 F1 | 	add	fp, #8
337d0     A7 14 02 F6 | 	mov	arg02, fp
337d4     0C 4E 85 F1 | 	sub	fp, #12
337d8     9C E6 BF FD | 	call	#_fatfs_cc_validate
337dc     08 4E 05 F1 | 	add	fp, #8
337e0     A7 FA 61 FC | 	wrlong	result1, fp
337e4     08 4E 85 F1 | 	sub	fp, #8
337e8     00 FA 0D F2 | 	cmp	result1, #0 wz
337ec     04 4E 05 A1 |  if_e	add	fp, #4
337f0     A7 26 02 AB |  if_e	rdlong	local01, fp
337f4     04 4E 85 A1 |  if_e	sub	fp, #4
337f8     13 01 68 AC |  if_e	wrlong	#0, local01
337fc                 | LR__4980
337fc                 | ' 
337fc                 | ' 
337fc                 | ' 
337fc                 | ' 
337fc                 | ' 			fp->obj.fs = 0;
337fc                 | ' #line 4192 "ff.c"
337fc                 | ' 		}
337fc                 | ' 	}
337fc                 | ' 	return res;
337fc     08 4E 05 F1 | 	add	fp, #8
33800     A7 FA 01 FB | 	rdlong	result1, fp
33804     08 4E 85 F1 | 	sub	fp, #8
33808     A7 F0 03 F6 | 	mov	ptra, fp
3380c     B2 00 A0 FD | 	call	#popregs_
33810                 | _fatfs_cc_f_close_ret
33810     2D 00 64 FD | 	ret
33814                 | 
33814                 | _fatfs_cc_f_lseek
33814     00 4A 05 F6 | 	mov	COUNT_, #0
33818     A8 00 A0 FD | 	call	#pushregs_
3381c     24 F0 07 F1 | 	add	ptra, #36
33820     04 4E 05 F1 | 	add	fp, #4
33824     A7 12 62 FC | 	wrlong	arg01, fp
33828     04 4E 05 F1 | 	add	fp, #4
3382c     A7 14 62 FC | 	wrlong	arg02, fp
33830     04 4E 85 F1 | 	sub	fp, #4
33834     A7 12 02 FB | 	rdlong	arg01, fp
33838     0C 4E 05 F1 | 	add	fp, #12
3383c     A7 14 02 F6 | 	mov	arg02, fp
33840     10 4E 85 F1 | 	sub	fp, #16
33844     30 E6 BF FD | 	call	#_fatfs_cc_validate
33848     0C 4E 05 F1 | 	add	fp, #12
3384c     A7 FA 61 FC | 	wrlong	result1, fp
33850     0C 4E 85 F1 | 	sub	fp, #12
33854     00 FA 0D F2 | 	cmp	result1, #0 wz
33858     1C 00 90 5D |  if_ne	jmp	#LR__4990
3385c     04 4E 05 F1 | 	add	fp, #4
33860     A7 18 02 FB | 	rdlong	arg04, fp
33864     11 18 06 F1 | 	add	arg04, #17
33868     0C 19 C2 FA | 	rdbyte	arg04, arg04
3386c     08 4E 05 F1 | 	add	fp, #8
33870     A7 18 62 FC | 	wrlong	arg04, fp
33874     0C 4E 85 F1 | 	sub	fp, #12
33878                 | LR__4990
33878     0C 4E 05 F1 | 	add	fp, #12
3387c     A7 18 0A FB | 	rdlong	arg04, fp wz
33880     0C 4E 85 F1 | 	sub	fp, #12
33884     0C 4E 05 51 |  if_ne	add	fp, #12
33888     A7 FA 01 5B |  if_ne	rdlong	result1, fp
3388c     0C 4E 85 51 |  if_ne	sub	fp, #12
33890     40 06 90 5D |  if_ne	jmp	#LR__5013
33894     04 4E 05 F1 | 	add	fp, #4
33898     A7 18 02 FB | 	rdlong	arg04, fp
3389c     04 4E 05 F1 | 	add	fp, #4
338a0     A7 16 02 FB | 	rdlong	arg03, fp
338a4     08 4E 85 F1 | 	sub	fp, #8
338a8     0C 18 06 F1 | 	add	arg04, #12
338ac     0C 19 02 FB | 	rdlong	arg04, arg04
338b0     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
338b4     3C 00 90 ED |  if_be	jmp	#LR__4991
338b8     04 4E 05 F1 | 	add	fp, #4
338bc     A7 16 02 FB | 	rdlong	arg03, fp
338c0     04 4E 85 F1 | 	sub	fp, #4
338c4     10 16 06 F1 | 	add	arg03, #16
338c8     0B 17 C2 FA | 	rdbyte	arg03, arg03
338cc     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
338d0     02 16 CE F7 | 	test	arg03, #2 wz
338d4     1C 00 90 5D |  if_ne	jmp	#LR__4991
338d8     04 4E 05 F1 | 	add	fp, #4
338dc     A7 16 02 FB | 	rdlong	arg03, fp
338e0     0C 16 06 F1 | 	add	arg03, #12
338e4     0B 17 02 FB | 	rdlong	arg03, arg03
338e8     04 4E 05 F1 | 	add	fp, #4
338ec     A7 16 62 FC | 	wrlong	arg03, fp
338f0     08 4E 85 F1 | 	sub	fp, #8
338f4                 | LR__4991
338f4     04 4E 05 F1 | 	add	fp, #4
338f8     A7 16 02 FB | 	rdlong	arg03, fp
338fc     14 16 06 F1 | 	add	arg03, #20
33900     0B 17 02 FB | 	rdlong	arg03, arg03
33904     1C 4E 05 F1 | 	add	fp, #28
33908     A7 16 62 FC | 	wrlong	arg03, fp
3390c     1C 4E 85 F1 | 	sub	fp, #28
33910     A7 16 02 FB | 	rdlong	arg03, fp
33914     18 4E 05 F1 | 	add	fp, #24
33918     A7 00 68 FC | 	wrlong	#0, fp
3391c     14 16 06 F1 | 	add	arg03, #20
33920     0B 01 68 FC | 	wrlong	#0, arg03
33924     14 4E 85 F1 | 	sub	fp, #20
33928     A7 16 02 FB | 	rdlong	arg03, fp
3392c     08 4E 85 F1 | 	sub	fp, #8
33930     01 16 16 F2 | 	cmp	arg03, #1 wc
33934     E4 03 90 CD |  if_b	jmp	#LR__5007
33938     10 4E 05 F1 | 	add	fp, #16
3393c     A7 16 02 FB | 	rdlong	arg03, fp
33940     0A 16 06 F1 | 	add	arg03, #10
33944     0B 19 E2 FA | 	rdword	arg04, arg03
33948     09 18 66 F0 | 	shl	arg04, #9
3394c     08 4E 05 F1 | 	add	fp, #8
33950     A7 18 62 FC | 	wrlong	arg04, fp
33954     08 4E 05 F1 | 	add	fp, #8
33958     A7 18 02 FB | 	rdlong	arg04, fp
3395c     20 4E 85 F1 | 	sub	fp, #32
33960     01 18 16 F2 | 	cmp	arg04, #1 wc
33964     AC 00 90 CD |  if_b	jmp	#LR__4992
33968     08 4E 05 F1 | 	add	fp, #8
3396c     A7 18 02 FB | 	rdlong	arg04, fp
33970     01 18 86 F1 | 	sub	arg04, #1
33974     10 4E 05 F1 | 	add	fp, #16
33978     A7 16 02 FB | 	rdlong	arg03, fp
3397c     0B 19 12 FD | 	qdiv	arg04, arg03
33980     08 4E 05 F1 | 	add	fp, #8
33984     A7 FA 01 FB | 	rdlong	result1, fp
33988     01 FA 85 F1 | 	sub	result1, #1
3398c     18 18 62 FD | 	getqx	arg04
33990     0B FB 11 FD | 	qdiv	result1, arg03
33994     20 4E 85 F1 | 	sub	fp, #32
33998     18 16 62 FD | 	getqx	arg03
3399c     0B 19 12 F2 | 	cmp	arg04, arg03 wc
339a0     70 00 90 CD |  if_b	jmp	#LR__4992
339a4     04 4E 05 F1 | 	add	fp, #4
339a8     A7 16 02 FB | 	rdlong	arg03, fp
339ac     1C 4E 05 F1 | 	add	fp, #28
339b0     A7 FA 01 FB | 	rdlong	result1, fp
339b4     01 FA 85 F1 | 	sub	result1, #1
339b8     08 4E 85 F1 | 	sub	fp, #8
339bc     A7 18 02 FB | 	rdlong	arg04, fp
339c0     01 18 86 F1 | 	sub	arg04, #1
339c4     0C FB 21 F5 | 	andn	result1, arg04
339c8     14 16 06 F1 | 	add	arg03, #20
339cc     0B FB 61 FC | 	wrlong	result1, arg03
339d0     10 4E 85 F1 | 	sub	fp, #16
339d4     A7 16 02 FB | 	rdlong	arg03, fp
339d8     04 4E 85 F1 | 	sub	fp, #4
339dc     A7 18 02 FB | 	rdlong	arg04, fp
339e0     14 18 06 F1 | 	add	arg04, #20
339e4     0C 19 02 FB | 	rdlong	arg04, arg04
339e8     0C 17 82 F1 | 	sub	arg03, arg04
339ec     04 4E 05 F1 | 	add	fp, #4
339f0     A7 16 62 FC | 	wrlong	arg03, fp
339f4     04 4E 85 F1 | 	sub	fp, #4
339f8     A7 16 02 FB | 	rdlong	arg03, fp
339fc     18 16 06 F1 | 	add	arg03, #24
33a00     0B 17 02 FB | 	rdlong	arg03, arg03
33a04     10 4E 05 F1 | 	add	fp, #16
33a08     A7 16 62 FC | 	wrlong	arg03, fp
33a0c     14 4E 85 F1 | 	sub	fp, #20
33a10     D0 00 90 FD | 	jmp	#LR__4996
33a14                 | LR__4992
33a14     04 4E 05 F1 | 	add	fp, #4
33a18     A7 16 02 FB | 	rdlong	arg03, fp
33a1c     08 16 06 F1 | 	add	arg03, #8
33a20     0B 17 0A FB | 	rdlong	arg03, arg03 wz
33a24     10 4E 05 F1 | 	add	fp, #16
33a28     A7 16 62 FC | 	wrlong	arg03, fp
33a2c     14 4E 85 F1 | 	sub	fp, #20
33a30     94 00 90 5D |  if_ne	jmp	#LR__4995
33a34     04 4E 05 F1 | 	add	fp, #4
33a38     A7 12 02 FB | 	rdlong	arg01, fp
33a3c     04 4E 85 F1 | 	sub	fp, #4
33a40     00 14 06 F6 | 	mov	arg02, #0
33a44     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
33a48     14 4E 05 F1 | 	add	fp, #20
33a4c     A7 FA 61 FC | 	wrlong	result1, fp
33a50     14 4E 85 F1 | 	sub	fp, #20
33a54     01 FA 0D F2 | 	cmp	result1, #1 wz
33a58     1C 00 90 5D |  if_ne	jmp	#LR__4993
33a5c     04 4E 05 F1 | 	add	fp, #4
33a60     A7 16 02 FB | 	rdlong	arg03, fp
33a64     04 4E 85 F1 | 	sub	fp, #4
33a68     11 16 06 F1 | 	add	arg03, #17
33a6c     0B 05 48 FC | 	wrbyte	#2, arg03
33a70     02 FA 05 F6 | 	mov	result1, #2
33a74     5C 04 90 FD | 	jmp	#LR__5013
33a78                 | LR__4993
33a78     14 4E 05 F1 | 	add	fp, #20
33a7c     A7 FA 01 FB | 	rdlong	result1, fp
33a80     14 4E 85 F1 | 	sub	fp, #20
33a84     FF FF 7F FF 
33a88     FF FB 0D F2 | 	cmp	result1, ##-1 wz
33a8c     1C 00 90 5D |  if_ne	jmp	#LR__4994
33a90     04 4E 05 F1 | 	add	fp, #4
33a94     A7 16 02 FB | 	rdlong	arg03, fp
33a98     04 4E 85 F1 | 	sub	fp, #4
33a9c     11 16 06 F1 | 	add	arg03, #17
33aa0     0B 03 48 FC | 	wrbyte	#1, arg03
33aa4     01 FA 05 F6 | 	mov	result1, #1
33aa8     28 04 90 FD | 	jmp	#LR__5013
33aac                 | LR__4994
33aac     04 4E 05 F1 | 	add	fp, #4
33ab0     A7 16 02 FB | 	rdlong	arg03, fp
33ab4     10 4E 05 F1 | 	add	fp, #16
33ab8     A7 18 02 FB | 	rdlong	arg04, fp
33abc     14 4E 85 F1 | 	sub	fp, #20
33ac0     08 16 06 F1 | 	add	arg03, #8
33ac4     0B 19 62 FC | 	wrlong	arg04, arg03
33ac8                 | LR__4995
33ac8     04 4E 05 F1 | 	add	fp, #4
33acc     A7 16 02 FB | 	rdlong	arg03, fp
33ad0     10 4E 05 F1 | 	add	fp, #16
33ad4     A7 18 02 FB | 	rdlong	arg04, fp
33ad8     14 4E 85 F1 | 	sub	fp, #20
33adc     18 16 06 F1 | 	add	arg03, #24
33ae0     0B 19 62 FC | 	wrlong	arg04, arg03
33ae4                 | LR__4996
33ae4     14 4E 05 F1 | 	add	fp, #20
33ae8     A7 16 0A FB | 	rdlong	arg03, fp wz
33aec     14 4E 85 F1 | 	sub	fp, #20
33af0     28 02 90 AD |  if_e	jmp	#LR__5006
33af4                 | ' 				while (ofs > bcs) {
33af4                 | LR__4997
33af4     08 4E 05 F1 | 	add	fp, #8
33af8     A7 18 02 FB | 	rdlong	arg04, fp
33afc     10 4E 05 F1 | 	add	fp, #16
33b00     A7 16 02 FB | 	rdlong	arg03, fp
33b04     18 4E 85 F1 | 	sub	fp, #24
33b08     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
33b0c     68 01 90 ED |  if_be	jmp	#LR__5003
33b10     08 4E 05 F1 | 	add	fp, #8
33b14     A7 18 02 FB | 	rdlong	arg04, fp
33b18     10 4E 05 F1 | 	add	fp, #16
33b1c     A7 16 02 FB | 	rdlong	arg03, fp
33b20     0B 19 82 F1 | 	sub	arg04, arg03
33b24     10 4E 85 F1 | 	sub	fp, #16
33b28     A7 18 62 FC | 	wrlong	arg04, fp
33b2c     04 4E 85 F1 | 	sub	fp, #4
33b30     A7 18 02 FB | 	rdlong	arg04, fp
33b34     0C FB 01 F6 | 	mov	result1, arg04
33b38     14 18 06 F1 | 	add	arg04, #20
33b3c     0C 19 02 FB | 	rdlong	arg04, arg04
33b40     14 4E 05 F1 | 	add	fp, #20
33b44     A7 16 02 FB | 	rdlong	arg03, fp
33b48     0B 19 02 F1 | 	add	arg04, arg03
33b4c     14 FA 05 F1 | 	add	result1, #20
33b50     FD 18 62 FC | 	wrlong	arg04, result1
33b54     14 4E 85 F1 | 	sub	fp, #20
33b58     A7 16 02 FB | 	rdlong	arg03, fp
33b5c     04 4E 85 F1 | 	sub	fp, #4
33b60     10 16 06 F1 | 	add	arg03, #16
33b64     0B 17 C2 FA | 	rdbyte	arg03, arg03
33b68     02 16 CE F7 | 	test	arg03, #2 wz
33b6c     3C 00 90 AD |  if_e	jmp	#LR__4998
33b70     04 4E 05 F1 | 	add	fp, #4
33b74     A7 12 02 FB | 	rdlong	arg01, fp
33b78     10 4E 05 F1 | 	add	fp, #16
33b7c     A7 14 02 FB | 	rdlong	arg02, fp
33b80     14 4E 85 F1 | 	sub	fp, #20
33b84     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
33b88     14 4E 05 F1 | 	add	fp, #20
33b8c     A7 FA 61 FC | 	wrlong	result1, fp
33b90     00 FA 4D F2 | 	cmps	result1, #0 wz
33b94     14 4E 85 F1 | 	sub	fp, #20
33b98     08 4E 05 A1 |  if_e	add	fp, #8
33b9c     A7 00 68 AC |  if_e	wrlong	#0, fp
33ba0     08 4E 85 A1 |  if_e	sub	fp, #8
33ba4                 | ' 							ofs = 0; break;
33ba4     D0 00 90 AD |  if_e	jmp	#LR__5003
33ba8     24 00 90 FD | 	jmp	#LR__4999
33bac                 | LR__4998
33bac     04 4E 05 F1 | 	add	fp, #4
33bb0     A7 12 02 FB | 	rdlong	arg01, fp
33bb4     10 4E 05 F1 | 	add	fp, #16
33bb8     A7 14 02 FB | 	rdlong	arg02, fp
33bbc     14 4E 85 F1 | 	sub	fp, #20
33bc0     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
33bc4     14 4E 05 F1 | 	add	fp, #20
33bc8     A7 FA 61 FC | 	wrlong	result1, fp
33bcc     14 4E 85 F1 | 	sub	fp, #20
33bd0                 | LR__4999
33bd0     14 4E 05 F1 | 	add	fp, #20
33bd4     A7 16 02 FB | 	rdlong	arg03, fp
33bd8     14 4E 85 F1 | 	sub	fp, #20
33bdc     FF FF 7F FF 
33be0     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
33be4     1C 00 90 5D |  if_ne	jmp	#LR__5000
33be8     04 4E 05 F1 | 	add	fp, #4
33bec     A7 16 02 FB | 	rdlong	arg03, fp
33bf0     04 4E 85 F1 | 	sub	fp, #4
33bf4     11 16 06 F1 | 	add	arg03, #17
33bf8     0B 03 48 FC | 	wrbyte	#1, arg03
33bfc     01 FA 05 F6 | 	mov	result1, #1
33c00     D0 02 90 FD | 	jmp	#LR__5013
33c04                 | LR__5000
33c04     14 4E 05 F1 | 	add	fp, #20
33c08     A7 16 02 FB | 	rdlong	arg03, fp
33c0c     14 4E 85 F1 | 	sub	fp, #20
33c10     02 16 16 F2 | 	cmp	arg03, #2 wc
33c14     24 00 90 CD |  if_b	jmp	#LR__5001
33c18     10 4E 05 F1 | 	add	fp, #16
33c1c     A7 18 02 FB | 	rdlong	arg04, fp
33c20     04 4E 05 F1 | 	add	fp, #4
33c24     A7 16 02 FB | 	rdlong	arg03, fp
33c28     14 4E 85 F1 | 	sub	fp, #20
33c2c     18 18 06 F1 | 	add	arg04, #24
33c30     0C 19 02 FB | 	rdlong	arg04, arg04
33c34     0C 17 12 F2 | 	cmp	arg03, arg04 wc
33c38     1C 00 90 CD |  if_b	jmp	#LR__5002
33c3c                 | LR__5001
33c3c     04 4E 05 F1 | 	add	fp, #4
33c40     A7 16 02 FB | 	rdlong	arg03, fp
33c44     04 4E 85 F1 | 	sub	fp, #4
33c48     11 16 06 F1 | 	add	arg03, #17
33c4c     0B 05 48 FC | 	wrbyte	#2, arg03
33c50     02 FA 05 F6 | 	mov	result1, #2
33c54     7C 02 90 FD | 	jmp	#LR__5013
33c58                 | LR__5002
33c58     04 4E 05 F1 | 	add	fp, #4
33c5c     A7 18 02 FB | 	rdlong	arg04, fp
33c60     10 4E 05 F1 | 	add	fp, #16
33c64     A7 16 02 FB | 	rdlong	arg03, fp
33c68     14 4E 85 F1 | 	sub	fp, #20
33c6c     18 18 06 F1 | 	add	arg04, #24
33c70     0C 17 62 FC | 	wrlong	arg03, arg04
33c74     7C FE 9F FD | 	jmp	#LR__4997
33c78                 | LR__5003
33c78     04 4E 05 F1 | 	add	fp, #4
33c7c     A7 16 02 FB | 	rdlong	arg03, fp
33c80     0B 13 02 F6 | 	mov	arg01, arg03
33c84     14 16 06 F1 | 	add	arg03, #20
33c88     0B 15 02 FB | 	rdlong	arg02, arg03
33c8c     04 4E 05 F1 | 	add	fp, #4
33c90     A7 16 02 FB | 	rdlong	arg03, fp
33c94     0B 15 02 F1 | 	add	arg02, arg03
33c98     14 12 06 F1 | 	add	arg01, #20
33c9c     09 15 62 FC | 	wrlong	arg02, arg01
33ca0     A7 16 02 FB | 	rdlong	arg03, fp
33ca4     08 4E 85 F1 | 	sub	fp, #8
33ca8     FF 17 CE F7 | 	test	arg03, #511 wz
33cac     6C 00 90 AD |  if_e	jmp	#LR__5005
33cb0     10 4E 05 F1 | 	add	fp, #16
33cb4     A7 12 02 FB | 	rdlong	arg01, fp
33cb8     04 4E 05 F1 | 	add	fp, #4
33cbc     A7 14 02 FB | 	rdlong	arg02, fp
33cc0     14 4E 85 F1 | 	sub	fp, #20
33cc4     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
33cc8     1C 4E 05 F1 | 	add	fp, #28
33ccc     A7 FA 61 FC | 	wrlong	result1, fp
33cd0     1C 4E 85 F1 | 	sub	fp, #28
33cd4     00 FA 0D F2 | 	cmp	result1, #0 wz
33cd8     1C 00 90 5D |  if_ne	jmp	#LR__5004
33cdc     04 4E 05 F1 | 	add	fp, #4
33ce0     A7 16 02 FB | 	rdlong	arg03, fp
33ce4     04 4E 85 F1 | 	sub	fp, #4
33ce8     11 16 06 F1 | 	add	arg03, #17
33cec     0B 05 48 FC | 	wrbyte	#2, arg03
33cf0     02 FA 05 F6 | 	mov	result1, #2
33cf4     DC 01 90 FD | 	jmp	#LR__5013
33cf8                 | LR__5004
33cf8     1C 4E 05 F1 | 	add	fp, #28
33cfc     A7 18 02 FB | 	rdlong	arg04, fp
33d00     14 4E 85 F1 | 	sub	fp, #20
33d04     A7 16 02 FB | 	rdlong	arg03, fp
33d08     09 16 46 F0 | 	shr	arg03, #9
33d0c     0B 19 02 F1 | 	add	arg04, arg03
33d10     14 4E 05 F1 | 	add	fp, #20
33d14     A7 18 62 FC | 	wrlong	arg04, fp
33d18     1C 4E 85 F1 | 	sub	fp, #28
33d1c                 | LR__5005
33d1c                 | LR__5006
33d1c                 | LR__5007
33d1c     04 4E 05 F1 | 	add	fp, #4
33d20     A7 18 02 FB | 	rdlong	arg04, fp
33d24     0C 17 02 F6 | 	mov	arg03, arg04
33d28     04 4E 85 F1 | 	sub	fp, #4
33d2c     14 16 06 F1 | 	add	arg03, #20
33d30     0B 17 02 FB | 	rdlong	arg03, arg03
33d34     0C 18 06 F1 | 	add	arg04, #12
33d38     0C 19 02 FB | 	rdlong	arg04, arg04
33d3c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
33d40     3C 00 90 ED |  if_be	jmp	#LR__5008
33d44     04 4E 05 F1 | 	add	fp, #4
33d48     A7 18 02 FB | 	rdlong	arg04, fp
33d4c     0C 17 02 F6 | 	mov	arg03, arg04
33d50     14 18 06 F1 | 	add	arg04, #20
33d54     0C 19 02 FB | 	rdlong	arg04, arg04
33d58     0C 16 06 F1 | 	add	arg03, #12
33d5c     0B 19 62 FC | 	wrlong	arg04, arg03
33d60     A7 18 02 FB | 	rdlong	arg04, fp
33d64     0C 17 02 F6 | 	mov	arg03, arg04
33d68     04 4E 85 F1 | 	sub	fp, #4
33d6c     10 18 06 F1 | 	add	arg04, #16
33d70     0C 19 C2 FA | 	rdbyte	arg04, arg04
33d74     40 18 46 F5 | 	or	arg04, #64
33d78     10 16 06 F1 | 	add	arg03, #16
33d7c     0B 19 42 FC | 	wrbyte	arg04, arg03
33d80                 | LR__5008
33d80     04 4E 05 F1 | 	add	fp, #4
33d84     A7 16 02 FB | 	rdlong	arg03, fp
33d88     04 4E 85 F1 | 	sub	fp, #4
33d8c     14 16 06 F1 | 	add	arg03, #20
33d90     0B 17 02 FB | 	rdlong	arg03, arg03
33d94     FF 17 CE F7 | 	test	arg03, #511 wz
33d98     2C 01 90 AD |  if_e	jmp	#LR__5012
33d9c     04 4E 05 F1 | 	add	fp, #4
33da0     A7 18 02 FB | 	rdlong	arg04, fp
33da4     18 4E 05 F1 | 	add	fp, #24
33da8     A7 16 02 FB | 	rdlong	arg03, fp
33dac     1C 4E 85 F1 | 	sub	fp, #28
33db0     1C 18 06 F1 | 	add	arg04, #28
33db4     0C 19 02 FB | 	rdlong	arg04, arg04
33db8     0C 17 0A F2 | 	cmp	arg03, arg04 wz
33dbc     08 01 90 AD |  if_e	jmp	#LR__5012
33dc0     04 4E 05 F1 | 	add	fp, #4
33dc4     A7 16 02 FB | 	rdlong	arg03, fp
33dc8     04 4E 85 F1 | 	sub	fp, #4
33dcc     10 16 06 F1 | 	add	arg03, #16
33dd0     0B 17 C2 FA | 	rdbyte	arg03, arg03
33dd4     80 16 CE F7 | 	test	arg03, #128 wz
33dd8     7C 00 90 AD |  if_e	jmp	#LR__5010
33ddc     10 4E 05 F1 | 	add	fp, #16
33de0     A7 16 02 FB | 	rdlong	arg03, fp
33de4     01 16 06 F1 | 	add	arg03, #1
33de8     0B 13 C2 FA | 	rdbyte	arg01, arg03
33dec     0C 4E 85 F1 | 	sub	fp, #12
33df0     A7 16 02 FB | 	rdlong	arg03, fp
33df4     0B 15 02 F6 | 	mov	arg02, arg03
33df8     28 14 06 F1 | 	add	arg02, #40
33dfc     04 4E 85 F1 | 	sub	fp, #4
33e00     1C 16 06 F1 | 	add	arg03, #28
33e04     0B 17 02 FB | 	rdlong	arg03, arg03
33e08     01 18 06 F6 | 	mov	arg04, #1
33e0c     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
33e10     00 FA 0D F2 | 	cmp	result1, #0 wz
33e14     1C 00 90 AD |  if_e	jmp	#LR__5009
33e18     04 4E 05 F1 | 	add	fp, #4
33e1c     A7 16 02 FB | 	rdlong	arg03, fp
33e20     04 4E 85 F1 | 	sub	fp, #4
33e24     11 16 06 F1 | 	add	arg03, #17
33e28     0B 03 48 FC | 	wrbyte	#1, arg03
33e2c     01 FA 05 F6 | 	mov	result1, #1
33e30     A0 00 90 FD | 	jmp	#LR__5013
33e34                 | LR__5009
33e34     04 4E 05 F1 | 	add	fp, #4
33e38     A7 18 02 FB | 	rdlong	arg04, fp
33e3c     0C 17 02 F6 | 	mov	arg03, arg04
33e40     04 4E 85 F1 | 	sub	fp, #4
33e44     10 18 06 F1 | 	add	arg04, #16
33e48     0C 19 C2 FA | 	rdbyte	arg04, arg04
33e4c     7F 18 06 F5 | 	and	arg04, #127
33e50     10 16 06 F1 | 	add	arg03, #16
33e54     0B 19 42 FC | 	wrbyte	arg04, arg03
33e58                 | LR__5010
33e58     10 4E 05 F1 | 	add	fp, #16
33e5c     A7 16 02 FB | 	rdlong	arg03, fp
33e60     01 16 06 F1 | 	add	arg03, #1
33e64     0B 13 C2 FA | 	rdbyte	arg01, arg03
33e68     0C 4E 85 F1 | 	sub	fp, #12
33e6c     A7 14 02 FB | 	rdlong	arg02, fp
33e70     28 14 06 F1 | 	add	arg02, #40
33e74     18 4E 05 F1 | 	add	fp, #24
33e78     A7 16 02 FB | 	rdlong	arg03, fp
33e7c     1C 4E 85 F1 | 	sub	fp, #28
33e80     01 18 06 F6 | 	mov	arg04, #1
33e84     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
33e88     00 FA 0D F2 | 	cmp	result1, #0 wz
33e8c     1C 00 90 AD |  if_e	jmp	#LR__5011
33e90     04 4E 05 F1 | 	add	fp, #4
33e94     A7 16 02 FB | 	rdlong	arg03, fp
33e98     04 4E 85 F1 | 	sub	fp, #4
33e9c     11 16 06 F1 | 	add	arg03, #17
33ea0     0B 03 48 FC | 	wrbyte	#1, arg03
33ea4     01 FA 05 F6 | 	mov	result1, #1
33ea8     28 00 90 FD | 	jmp	#LR__5013
33eac                 | LR__5011
33eac     04 4E 05 F1 | 	add	fp, #4
33eb0     A7 18 02 FB | 	rdlong	arg04, fp
33eb4     18 4E 05 F1 | 	add	fp, #24
33eb8     A7 16 02 FB | 	rdlong	arg03, fp
33ebc     1C 4E 85 F1 | 	sub	fp, #28
33ec0     1C 18 06 F1 | 	add	arg04, #28
33ec4     0C 17 62 FC | 	wrlong	arg03, arg04
33ec8                 | LR__5012
33ec8                 | ' 
33ec8                 | ' 			fp->sect = nsect;
33ec8                 | ' 		}
33ec8                 | ' 	}
33ec8                 | ' 
33ec8                 | ' 	return res ;
33ec8     0C 4E 05 F1 | 	add	fp, #12
33ecc     A7 FA 01 FB | 	rdlong	result1, fp
33ed0     0C 4E 85 F1 | 	sub	fp, #12
33ed4                 | LR__5013
33ed4     A7 F0 03 F6 | 	mov	ptra, fp
33ed8     B2 00 A0 FD | 	call	#popregs_
33edc                 | _fatfs_cc_f_lseek_ret
33edc     2D 00 64 FD | 	ret
33ee0                 | 
33ee0                 | _fatfs_cc_f_opendir
33ee0     01 4A 05 F6 | 	mov	COUNT_, #1
33ee4     A8 00 A0 FD | 	call	#pushregs_
33ee8     14 F0 07 F1 | 	add	ptra, #20
33eec     04 4E 05 F1 | 	add	fp, #4
33ef0     A7 12 62 FC | 	wrlong	arg01, fp
33ef4     04 4E 05 F1 | 	add	fp, #4
33ef8     A7 14 62 FC | 	wrlong	arg02, fp
33efc     04 4E 85 F1 | 	sub	fp, #4
33f00     A7 16 0A FB | 	rdlong	arg03, fp wz
33f04     04 4E 85 F1 | 	sub	fp, #4
33f08     09 FA 05 A6 |  if_e	mov	result1, #9
33f0c     78 01 90 AD |  if_e	jmp	#LR__5026
33f10     08 4E 05 F1 | 	add	fp, #8
33f14     A7 12 02 F6 | 	mov	arg01, fp
33f18     08 4E 05 F1 | 	add	fp, #8
33f1c     A7 14 02 F6 | 	mov	arg02, fp
33f20     10 4E 85 F1 | 	sub	fp, #16
33f24     00 16 06 F6 | 	mov	arg03, #0
33f28     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
33f2c     0C 4E 05 F1 | 	add	fp, #12
33f30     A7 FA 61 FC | 	wrlong	result1, fp
33f34     0C 4E 85 F1 | 	sub	fp, #12
33f38     00 FA 0D F2 | 	cmp	result1, #0 wz
33f3c     20 01 90 5D |  if_ne	jmp	#LR__5025
33f40     04 4E 05 F1 | 	add	fp, #4
33f44     A7 16 02 FB | 	rdlong	arg03, fp
33f48     0C 4E 05 F1 | 	add	fp, #12
33f4c     A7 FA 01 FB | 	rdlong	result1, fp
33f50     0B FB 61 FC | 	wrlong	result1, arg03
33f54     0C 4E 85 F1 | 	sub	fp, #12
33f58     A7 12 02 FB | 	rdlong	arg01, fp
33f5c     04 4E 05 F1 | 	add	fp, #4
33f60     A7 14 02 FB | 	rdlong	arg02, fp
33f64     08 4E 85 F1 | 	sub	fp, #8
33f68     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
33f6c     0C 4E 05 F1 | 	add	fp, #12
33f70     A7 FA 61 FC | 	wrlong	result1, fp
33f74     0C 4E 85 F1 | 	sub	fp, #12
33f78     00 FA 0D F2 | 	cmp	result1, #0 wz
33f7c     C4 00 90 5D |  if_ne	jmp	#LR__5024
33f80     04 4E 05 F1 | 	add	fp, #4
33f84     A7 16 02 FB | 	rdlong	arg03, fp
33f88     04 4E 85 F1 | 	sub	fp, #4
33f8c     2B 16 06 F1 | 	add	arg03, #43
33f90     0B 17 C2 FA | 	rdbyte	arg03, arg03
33f94     80 16 CE F7 | 	test	arg03, #128 wz
33f98     58 00 90 5D |  if_ne	jmp	#LR__5022
33f9c     04 4E 05 F1 | 	add	fp, #4
33fa0     A7 16 02 FB | 	rdlong	arg03, fp
33fa4     04 4E 85 F1 | 	sub	fp, #4
33fa8     06 16 06 F1 | 	add	arg03, #6
33fac     0B 17 C2 FA | 	rdbyte	arg03, arg03
33fb0     10 16 CE F7 | 	test	arg03, #16 wz
33fb4     30 00 90 AD |  if_e	jmp	#LR__5020
33fb8     04 4E 05 F1 | 	add	fp, #4
33fbc     A7 16 02 FB | 	rdlong	arg03, fp
33fc0     0B 27 02 F6 | 	mov	local01, arg03
33fc4     0C 4E 05 F1 | 	add	fp, #12
33fc8     A7 12 02 FB | 	rdlong	arg01, fp
33fcc     10 4E 85 F1 | 	sub	fp, #16
33fd0     1C 16 06 F1 | 	add	arg03, #28
33fd4     0B 15 02 FB | 	rdlong	arg02, arg03
33fd8     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
33fdc     08 26 06 F1 | 	add	local01, #8
33fe0     13 FB 61 FC | 	wrlong	result1, local01
33fe4     0C 00 90 FD | 	jmp	#LR__5021
33fe8                 | LR__5020
33fe8     0C 4E 05 F1 | 	add	fp, #12
33fec     A7 0A 68 FC | 	wrlong	#5, fp
33ff0     0C 4E 85 F1 | 	sub	fp, #12
33ff4                 | LR__5021
33ff4                 | LR__5022
33ff4     0C 4E 05 F1 | 	add	fp, #12
33ff8     A7 26 0A FB | 	rdlong	local01, fp wz
33ffc     0C 4E 85 F1 | 	sub	fp, #12
34000     40 00 90 5D |  if_ne	jmp	#LR__5023
34004     04 4E 05 F1 | 	add	fp, #4
34008     A7 26 02 FB | 	rdlong	local01, fp
3400c     0C 4E 05 F1 | 	add	fp, #12
34010     A7 16 02 FB | 	rdlong	arg03, fp
34014     06 16 06 F1 | 	add	arg03, #6
34018     0B 17 E2 FA | 	rdword	arg03, arg03
3401c     04 26 06 F1 | 	add	local01, #4
34020     13 17 52 FC | 	wrword	arg03, local01
34024     0C 4E 85 F1 | 	sub	fp, #12
34028     A7 12 02 FB | 	rdlong	arg01, fp
3402c     04 4E 85 F1 | 	sub	fp, #4
34030     00 14 06 F6 | 	mov	arg02, #0
34034     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
34038     0C 4E 05 F1 | 	add	fp, #12
3403c     A7 FA 61 FC | 	wrlong	result1, fp
34040     0C 4E 85 F1 | 	sub	fp, #12
34044                 | LR__5023
34044                 | LR__5024
34044     0C 4E 05 F1 | 	add	fp, #12
34048     A7 26 02 FB | 	rdlong	local01, fp
3404c     0C 4E 85 F1 | 	sub	fp, #12
34050     04 26 0E F2 | 	cmp	local01, #4 wz
34054     0C 4E 05 A1 |  if_e	add	fp, #12
34058     A7 0A 68 AC |  if_e	wrlong	#5, fp
3405c     0C 4E 85 A1 |  if_e	sub	fp, #12
34060                 | LR__5025
34060     0C 4E 05 F1 | 	add	fp, #12
34064     A7 26 0A FB | 	rdlong	local01, fp wz
34068     0C 4E 85 F1 | 	sub	fp, #12
3406c     04 4E 05 51 |  if_ne	add	fp, #4
34070     A7 26 02 5B |  if_ne	rdlong	local01, fp
34074     04 4E 85 51 |  if_ne	sub	fp, #4
34078     13 01 68 5C |  if_ne	wrlong	#0, local01
3407c                 | ' 
3407c                 | ' 	return res ;
3407c     0C 4E 05 F1 | 	add	fp, #12
34080     A7 FA 01 FB | 	rdlong	result1, fp
34084     0C 4E 85 F1 | 	sub	fp, #12
34088                 | LR__5026
34088     A7 F0 03 F6 | 	mov	ptra, fp
3408c     B2 00 A0 FD | 	call	#popregs_
34090                 | _fatfs_cc_f_opendir_ret
34090     2D 00 64 FD | 	ret
34094                 | 
34094                 | _fatfs_cc_f_closedir
34094     00 4A 05 F6 | 	mov	COUNT_, #0
34098     A8 00 A0 FD | 	call	#pushregs_
3409c     10 F0 07 F1 | 	add	ptra, #16
340a0     04 4E 05 F1 | 	add	fp, #4
340a4     A7 12 62 FC | 	wrlong	arg01, fp
340a8     08 4E 05 F1 | 	add	fp, #8
340ac     A7 14 02 F6 | 	mov	arg02, fp
340b0     0C 4E 85 F1 | 	sub	fp, #12
340b4     C0 DD BF FD | 	call	#_fatfs_cc_validate
340b8     08 4E 05 F1 | 	add	fp, #8
340bc     A7 FA 61 FC | 	wrlong	result1, fp
340c0     08 4E 85 F1 | 	sub	fp, #8
340c4     00 FA 0D F2 | 	cmp	result1, #0 wz
340c8     04 4E 05 A1 |  if_e	add	fp, #4
340cc     A7 FA 01 AB |  if_e	rdlong	result1, fp
340d0     04 4E 85 A1 |  if_e	sub	fp, #4
340d4     FD 00 68 AC |  if_e	wrlong	#0, result1
340d8                 | ' 
340d8                 | ' 
340d8                 | ' 
340d8                 | ' 
340d8                 | ' 		dp->obj.fs = 0;
340d8                 | ' #line 4633 "ff.c"
340d8                 | ' 	}
340d8                 | ' 	return res;
340d8     08 4E 05 F1 | 	add	fp, #8
340dc     A7 FA 01 FB | 	rdlong	result1, fp
340e0     08 4E 85 F1 | 	sub	fp, #8
340e4     A7 F0 03 F6 | 	mov	ptra, fp
340e8     B2 00 A0 FD | 	call	#popregs_
340ec                 | _fatfs_cc_f_closedir_ret
340ec     2D 00 64 FD | 	ret
340f0                 | 
340f0                 | _fatfs_cc_f_readdir
340f0     00 4A 05 F6 | 	mov	COUNT_, #0
340f4     A8 00 A0 FD | 	call	#pushregs_
340f8     14 F0 07 F1 | 	add	ptra, #20
340fc     04 4E 05 F1 | 	add	fp, #4
34100     A7 12 62 FC | 	wrlong	arg01, fp
34104     04 4E 05 F1 | 	add	fp, #4
34108     A7 14 62 FC | 	wrlong	arg02, fp
3410c     04 4E 85 F1 | 	sub	fp, #4
34110     A7 12 02 FB | 	rdlong	arg01, fp
34114     0C 4E 05 F1 | 	add	fp, #12
34118     A7 14 02 F6 | 	mov	arg02, fp
3411c     10 4E 85 F1 | 	sub	fp, #16
34120     54 DD BF FD | 	call	#_fatfs_cc_validate
34124     0C 4E 05 F1 | 	add	fp, #12
34128     A7 FA 61 FC | 	wrlong	result1, fp
3412c     0C 4E 85 F1 | 	sub	fp, #12
34130     00 FA 0D F2 | 	cmp	result1, #0 wz
34134     BC 00 90 5D |  if_ne	jmp	#LR__5033
34138     08 4E 05 F1 | 	add	fp, #8
3413c     A7 FA 09 FB | 	rdlong	result1, fp wz
34140     08 4E 85 F1 | 	sub	fp, #8
34144     24 00 90 5D |  if_ne	jmp	#LR__5030
34148     04 4E 05 F1 | 	add	fp, #4
3414c     A7 12 02 FB | 	rdlong	arg01, fp
34150     04 4E 85 F1 | 	sub	fp, #4
34154     00 14 06 F6 | 	mov	arg02, #0
34158     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
3415c     0C 4E 05 F1 | 	add	fp, #12
34160     A7 FA 61 FC | 	wrlong	result1, fp
34164     0C 4E 85 F1 | 	sub	fp, #12
34168     88 00 90 FD | 	jmp	#LR__5032
3416c                 | LR__5030
3416c     04 4E 05 F1 | 	add	fp, #4
34170     A7 12 02 FB | 	rdlong	arg01, fp
34174     04 4E 85 F1 | 	sub	fp, #4
34178     00 14 06 F6 | 	mov	arg02, #0
3417c     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
34180     0C 4E 05 F1 | 	add	fp, #12
34184     A7 FA 61 FC | 	wrlong	result1, fp
34188     0C 4E 85 F1 | 	sub	fp, #12
3418c     04 FA 0D F2 | 	cmp	result1, #4 wz
34190     0C 4E 05 A1 |  if_e	add	fp, #12
34194     A7 00 68 AC |  if_e	wrlong	#0, fp
34198     0C 4E 85 A1 |  if_e	sub	fp, #12
3419c     0C 4E 05 F1 | 	add	fp, #12
341a0     A7 FA 09 FB | 	rdlong	result1, fp wz
341a4     0C 4E 85 F1 | 	sub	fp, #12
341a8     48 00 90 5D |  if_ne	jmp	#LR__5031
341ac     04 4E 05 F1 | 	add	fp, #4
341b0     A7 12 02 FB | 	rdlong	arg01, fp
341b4     04 4E 05 F1 | 	add	fp, #4
341b8     A7 14 02 FB | 	rdlong	arg02, fp
341bc     08 4E 85 F1 | 	sub	fp, #8
341c0     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
341c4     04 4E 05 F1 | 	add	fp, #4
341c8     A7 12 02 FB | 	rdlong	arg01, fp
341cc     04 4E 85 F1 | 	sub	fp, #4
341d0     00 14 06 F6 | 	mov	arg02, #0
341d4     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
341d8     0C 4E 05 F1 | 	add	fp, #12
341dc     A7 FA 61 FC | 	wrlong	result1, fp
341e0     0C 4E 85 F1 | 	sub	fp, #12
341e4     04 FA 0D F2 | 	cmp	result1, #4 wz
341e8     0C 4E 05 A1 |  if_e	add	fp, #12
341ec     A7 00 68 AC |  if_e	wrlong	#0, fp
341f0     0C 4E 85 A1 |  if_e	sub	fp, #12
341f4                 | LR__5031
341f4                 | LR__5032
341f4                 | LR__5033
341f4                 | ' 			}
341f4                 | ' 			;
341f4                 | ' 		}
341f4                 | ' 	}
341f4                 | ' 	return res ;
341f4     0C 4E 05 F1 | 	add	fp, #12
341f8     A7 FA 01 FB | 	rdlong	result1, fp
341fc     0C 4E 85 F1 | 	sub	fp, #12
34200     A7 F0 03 F6 | 	mov	ptra, fp
34204     B2 00 A0 FD | 	call	#popregs_
34208                 | _fatfs_cc_f_readdir_ret
34208     2D 00 64 FD | 	ret
3420c                 | 
3420c                 | _fatfs_cc_f_stat
3420c     00 4A 05 F6 | 	mov	COUNT_, #0
34210     A8 00 A0 FD | 	call	#pushregs_
34214     40 F0 07 F1 | 	add	ptra, #64
34218     04 4E 05 F1 | 	add	fp, #4
3421c     A7 12 62 FC | 	wrlong	arg01, fp
34220     04 4E 05 F1 | 	add	fp, #4
34224     A7 14 62 FC | 	wrlong	arg02, fp
34228     04 4E 85 F1 | 	sub	fp, #4
3422c     A7 12 02 F6 | 	mov	arg01, fp
34230     0C 4E 05 F1 | 	add	fp, #12
34234     A7 14 02 F6 | 	mov	arg02, fp
34238     10 4E 85 F1 | 	sub	fp, #16
3423c     00 16 06 F6 | 	mov	arg03, #0
34240     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
34244     0C 4E 05 F1 | 	add	fp, #12
34248     A7 FA 61 FC | 	wrlong	result1, fp
3424c     0C 4E 85 F1 | 	sub	fp, #12
34250     00 FA 0D F2 | 	cmp	result1, #0 wz
34254     74 00 90 5D |  if_ne	jmp	#LR__5043
34258     10 4E 05 F1 | 	add	fp, #16
3425c     A7 12 02 F6 | 	mov	arg01, fp
34260     0C 4E 85 F1 | 	sub	fp, #12
34264     A7 14 02 FB | 	rdlong	arg02, fp
34268     04 4E 85 F1 | 	sub	fp, #4
3426c     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
34270     0C 4E 05 F1 | 	add	fp, #12
34274     A7 FA 61 FC | 	wrlong	result1, fp
34278     0C 4E 85 F1 | 	sub	fp, #12
3427c     00 FA 0D F2 | 	cmp	result1, #0 wz
34280     48 00 90 5D |  if_ne	jmp	#LR__5042
34284     3B 4E 05 F1 | 	add	fp, #59
34288     A7 FA C1 FA | 	rdbyte	result1, fp
3428c     3B 4E 85 F1 | 	sub	fp, #59
34290     80 FA CD F7 | 	test	result1, #128 wz
34294     0C 4E 05 51 |  if_ne	add	fp, #12
34298     A7 0C 68 5C |  if_ne	wrlong	#6, fp
3429c     0C 4E 85 51 |  if_ne	sub	fp, #12
342a0     28 00 90 5D |  if_ne	jmp	#LR__5041
342a4     08 4E 05 F1 | 	add	fp, #8
342a8     A7 FA 09 FB | 	rdlong	result1, fp wz
342ac     08 4E 85 F1 | 	sub	fp, #8
342b0     18 00 90 AD |  if_e	jmp	#LR__5040
342b4     10 4E 05 F1 | 	add	fp, #16
342b8     A7 12 02 F6 | 	mov	arg01, fp
342bc     08 4E 85 F1 | 	sub	fp, #8
342c0     A7 14 02 FB | 	rdlong	arg02, fp
342c4     08 4E 85 F1 | 	sub	fp, #8
342c8     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
342cc                 | LR__5040
342cc                 | LR__5041
342cc                 | LR__5042
342cc                 | LR__5043
342cc                 | ' 			}
342cc                 | ' 		}
342cc                 | ' 		;
342cc                 | ' 	}
342cc                 | ' 
342cc                 | ' 	return res ;
342cc     0C 4E 05 F1 | 	add	fp, #12
342d0     A7 FA 01 FB | 	rdlong	result1, fp
342d4     0C 4E 85 F1 | 	sub	fp, #12
342d8     A7 F0 03 F6 | 	mov	ptra, fp
342dc     B2 00 A0 FD | 	call	#popregs_
342e0                 | _fatfs_cc_f_stat_ret
342e0     2D 00 64 FD | 	ret
342e4                 | 
342e4                 | _fatfs_cc_f_unlink
342e4     00 4A 05 F6 | 	mov	COUNT_, #0
342e8     A8 00 A0 FD | 	call	#pushregs_
342ec     74 F0 07 F1 | 	add	ptra, #116
342f0     04 4E 05 F1 | 	add	fp, #4
342f4     A7 12 62 FC | 	wrlong	arg01, fp
342f8     68 4E 05 F1 | 	add	fp, #104
342fc     A7 00 68 FC | 	wrlong	#0, fp
34300     68 4E 85 F1 | 	sub	fp, #104
34304     A7 12 02 F6 | 	mov	arg01, fp
34308     6C 4E 05 F1 | 	add	fp, #108
3430c     A7 14 02 F6 | 	mov	arg02, fp
34310     70 4E 85 F1 | 	sub	fp, #112
34314     02 16 06 F6 | 	mov	arg03, #2
34318     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
3431c     08 4E 05 F1 | 	add	fp, #8
34320     A7 FA 61 FC | 	wrlong	result1, fp
34324     08 4E 85 F1 | 	sub	fp, #8
34328     00 FA 0D F2 | 	cmp	result1, #0 wz
3432c     E4 01 90 5D |  if_ne	jmp	#LR__5058
34330     70 4E 05 F1 | 	add	fp, #112
34334     A7 16 02 FB | 	rdlong	arg03, fp
34338     64 4E 85 F1 | 	sub	fp, #100
3433c     A7 16 62 FC | 	wrlong	arg03, fp
34340     A7 12 02 F6 | 	mov	arg01, fp
34344     08 4E 85 F1 | 	sub	fp, #8
34348     A7 14 02 FB | 	rdlong	arg02, fp
3434c     04 4E 85 F1 | 	sub	fp, #4
34350     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
34354     08 4E 05 F1 | 	add	fp, #8
34358     A7 FA 61 FC | 	wrlong	result1, fp
3435c     00 FA 4D F2 | 	cmps	result1, #0 wz
34360     08 4E 85 F1 | 	sub	fp, #8
34364     AC 01 90 5D |  if_ne	jmp	#LR__5057
34368     37 4E 05 F1 | 	add	fp, #55
3436c     A7 FA C1 FA | 	rdbyte	result1, fp
34370     37 4E 85 F1 | 	sub	fp, #55
34374     80 FA CD F7 | 	test	result1, #128 wz
34378     08 4E 05 51 |  if_ne	add	fp, #8
3437c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
34380     08 4E 85 51 |  if_ne	sub	fp, #8
34384     1C 00 90 5D |  if_ne	jmp	#LR__5050
34388     12 4E 05 F1 | 	add	fp, #18
3438c     A7 FA C1 FA | 	rdbyte	result1, fp
34390     12 4E 85 F1 | 	sub	fp, #18
34394     01 FA CD F7 | 	test	result1, #1 wz
34398     08 4E 05 51 |  if_ne	add	fp, #8
3439c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
343a0     08 4E 85 51 |  if_ne	sub	fp, #8
343a4                 | LR__5050
343a4     08 4E 05 F1 | 	add	fp, #8
343a8     A7 FA 09 FB | 	rdlong	result1, fp wz
343ac     08 4E 85 F1 | 	sub	fp, #8
343b0     C8 00 90 5D |  if_ne	jmp	#LR__5053
343b4     70 4E 05 F1 | 	add	fp, #112
343b8     A7 12 02 FB | 	rdlong	arg01, fp
343bc     48 4E 85 F1 | 	sub	fp, #72
343c0     A7 14 02 FB | 	rdlong	arg02, fp
343c4     28 4E 85 F1 | 	sub	fp, #40
343c8     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
343cc     6C 4E 05 F1 | 	add	fp, #108
343d0     A7 FA 61 FC | 	wrlong	result1, fp
343d4     5A 4E 85 F1 | 	sub	fp, #90
343d8     A7 FA C1 FA | 	rdbyte	result1, fp
343dc     12 4E 85 F1 | 	sub	fp, #18
343e0     10 FA CD F7 | 	test	result1, #16 wz
343e4     94 00 90 AD |  if_e	jmp	#LR__5052
343e8     70 4E 05 F1 | 	add	fp, #112
343ec     A7 FA 01 FB | 	rdlong	result1, fp
343f0     34 4E 85 F1 | 	sub	fp, #52
343f4     A7 FA 61 FC | 	wrlong	result1, fp
343f8     30 4E 05 F1 | 	add	fp, #48
343fc     A7 16 02 FB | 	rdlong	arg03, fp
34400     28 4E 85 F1 | 	sub	fp, #40
34404     A7 16 62 FC | 	wrlong	arg03, fp
34408     08 4E 85 F1 | 	sub	fp, #8
3440c     A7 12 02 F6 | 	mov	arg01, fp
34410     3C 4E 85 F1 | 	sub	fp, #60
34414     00 14 06 F6 | 	mov	arg02, #0
34418     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
3441c     08 4E 05 F1 | 	add	fp, #8
34420     A7 FA 61 FC | 	wrlong	result1, fp
34424     08 4E 85 F1 | 	sub	fp, #8
34428     00 FA 0D F2 | 	cmp	result1, #0 wz
3442c     4C 00 90 5D |  if_ne	jmp	#LR__5051
34430     3C 4E 05 F1 | 	add	fp, #60
34434     A7 12 02 F6 | 	mov	arg01, fp
34438     3C 4E 85 F1 | 	sub	fp, #60
3443c     00 14 06 F6 | 	mov	arg02, #0
34440     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
34444     08 4E 05 F1 | 	add	fp, #8
34448     A7 FA 61 FC | 	wrlong	result1, fp
3444c     00 FA 4D F2 | 	cmps	result1, #0 wz
34450     08 4E 85 F1 | 	sub	fp, #8
34454     08 4E 05 A1 |  if_e	add	fp, #8
34458     A7 0E 68 AC |  if_e	wrlong	#7, fp
3445c     08 4E 85 A1 |  if_e	sub	fp, #8
34460     08 4E 05 F1 | 	add	fp, #8
34464     A7 FA 01 FB | 	rdlong	result1, fp
34468     08 4E 85 F1 | 	sub	fp, #8
3446c     04 FA 0D F2 | 	cmp	result1, #4 wz
34470     08 4E 05 A1 |  if_e	add	fp, #8
34474     A7 00 68 AC |  if_e	wrlong	#0, fp
34478     08 4E 85 A1 |  if_e	sub	fp, #8
3447c                 | LR__5051
3447c                 | LR__5052
3447c                 | LR__5053
3447c     08 4E 05 F1 | 	add	fp, #8
34480     A7 FA 09 FB | 	rdlong	result1, fp wz
34484     08 4E 85 F1 | 	sub	fp, #8
34488     88 00 90 5D |  if_ne	jmp	#LR__5056
3448c     0C 4E 05 F1 | 	add	fp, #12
34490     A7 12 02 F6 | 	mov	arg01, fp
34494     0C 4E 85 F1 | 	sub	fp, #12
34498     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
3449c     08 4E 05 F1 | 	add	fp, #8
344a0     A7 FA 61 FC | 	wrlong	result1, fp
344a4     08 4E 85 F1 | 	sub	fp, #8
344a8     00 FA 0D F2 | 	cmp	result1, #0 wz
344ac     38 00 90 5D |  if_ne	jmp	#LR__5054
344b0     6C 4E 05 F1 | 	add	fp, #108
344b4     A7 FA 09 FB | 	rdlong	result1, fp wz
344b8     6C 4E 85 F1 | 	sub	fp, #108
344bc     28 00 90 AD |  if_e	jmp	#LR__5054
344c0     0C 4E 05 F1 | 	add	fp, #12
344c4     A7 12 02 F6 | 	mov	arg01, fp
344c8     60 4E 05 F1 | 	add	fp, #96
344cc     A7 14 02 FB | 	rdlong	arg02, fp
344d0     6C 4E 85 F1 | 	sub	fp, #108
344d4     00 16 06 F6 | 	mov	arg03, #0
344d8     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
344dc     08 4E 05 F1 | 	add	fp, #8
344e0     A7 FA 61 FC | 	wrlong	result1, fp
344e4     08 4E 85 F1 | 	sub	fp, #8
344e8                 | LR__5054
344e8     08 4E 05 F1 | 	add	fp, #8
344ec     A7 FA 09 FB | 	rdlong	result1, fp wz
344f0     08 4E 85 F1 | 	sub	fp, #8
344f4     1C 00 90 5D |  if_ne	jmp	#LR__5055
344f8     70 4E 05 F1 | 	add	fp, #112
344fc     A7 12 02 FB | 	rdlong	arg01, fp
34500     70 4E 85 F1 | 	sub	fp, #112
34504     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
34508     08 4E 05 F1 | 	add	fp, #8
3450c     A7 FA 61 FC | 	wrlong	result1, fp
34510     08 4E 85 F1 | 	sub	fp, #8
34514                 | LR__5055
34514                 | LR__5056
34514                 | LR__5057
34514                 | LR__5058
34514                 | ' 			}
34514                 | ' 		}
34514                 | ' 		;
34514                 | ' 	}
34514                 | ' 
34514                 | ' 	return res ;
34514     08 4E 05 F1 | 	add	fp, #8
34518     A7 FA 01 FB | 	rdlong	result1, fp
3451c     08 4E 85 F1 | 	sub	fp, #8
34520     A7 F0 03 F6 | 	mov	ptra, fp
34524     B2 00 A0 FD | 	call	#popregs_
34528                 | _fatfs_cc_f_unlink_ret
34528     2D 00 64 FD | 	ret
3452c                 | 
3452c                 | _fatfs_cc_f_mkdir
3452c     00 4A 05 F6 | 	mov	COUNT_, #0
34530     A8 00 A0 FD | 	call	#pushregs_
34534     5C F0 07 F1 | 	add	ptra, #92
34538     04 4E 05 F1 | 	add	fp, #4
3453c     A7 12 62 FC | 	wrlong	arg01, fp
34540     A7 12 02 F6 | 	mov	arg01, fp
34544     48 4E 05 F1 | 	add	fp, #72
34548     A7 14 02 F6 | 	mov	arg02, fp
3454c     4C 4E 85 F1 | 	sub	fp, #76
34550     02 16 06 F6 | 	mov	arg03, #2
34554     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
34558     08 4E 05 F1 | 	add	fp, #8
3455c     A7 FA 61 FC | 	wrlong	result1, fp
34560     08 4E 85 F1 | 	sub	fp, #8
34564     00 FA 0D F2 | 	cmp	result1, #0 wz
34568     C4 02 90 5D |  if_ne	jmp	#LR__5065
3456c     4C 4E 05 F1 | 	add	fp, #76
34570     A7 16 02 FB | 	rdlong	arg03, fp
34574     40 4E 85 F1 | 	sub	fp, #64
34578     A7 16 62 FC | 	wrlong	arg03, fp
3457c     A7 12 02 F6 | 	mov	arg01, fp
34580     08 4E 85 F1 | 	sub	fp, #8
34584     A7 14 02 FB | 	rdlong	arg02, fp
34588     04 4E 85 F1 | 	sub	fp, #4
3458c     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
34590     08 4E 05 F1 | 	add	fp, #8
34594     A7 FA 61 FC | 	wrlong	result1, fp
34598     00 FA 4D F2 | 	cmps	result1, #0 wz
3459c     08 4E 85 F1 | 	sub	fp, #8
345a0     08 4E 05 A1 |  if_e	add	fp, #8
345a4     A7 10 68 AC |  if_e	wrlong	#8, fp
345a8     08 4E 85 A1 |  if_e	sub	fp, #8
345ac     08 4E 05 F1 | 	add	fp, #8
345b0     A7 FA 01 FB | 	rdlong	result1, fp
345b4     08 4E 85 F1 | 	sub	fp, #8
345b8     04 FA 0D F2 | 	cmp	result1, #4 wz
345bc     70 02 90 5D |  if_ne	jmp	#LR__5064
345c0     4C 4E 05 F1 | 	add	fp, #76
345c4     A7 16 02 FB | 	rdlong	arg03, fp
345c8     10 4E 85 F1 | 	sub	fp, #16
345cc     A7 16 62 FC | 	wrlong	arg03, fp
345d0     A7 12 02 F6 | 	mov	arg01, fp
345d4     3C 4E 85 F1 | 	sub	fp, #60
345d8     00 14 06 F6 | 	mov	arg02, #0
345dc     04 AC BF FD | 	call	#_fatfs_cc_create_chain
345e0     50 4E 05 F1 | 	add	fp, #80
345e4     A7 FA 61 FC | 	wrlong	result1, fp
345e8     48 4E 85 F1 | 	sub	fp, #72
345ec     A7 00 68 FC | 	wrlong	#0, fp
345f0     48 4E 05 F1 | 	add	fp, #72
345f4     A7 FA 09 FB | 	rdlong	result1, fp wz
345f8     50 4E 85 F1 | 	sub	fp, #80
345fc     08 4E 05 A1 |  if_e	add	fp, #8
34600     A7 0E 68 AC |  if_e	wrlong	#7, fp
34604     08 4E 85 A1 |  if_e	sub	fp, #8
34608     50 4E 05 F1 | 	add	fp, #80
3460c     A7 FA 01 FB | 	rdlong	result1, fp
34610     50 4E 85 F1 | 	sub	fp, #80
34614     01 FA 0D F2 | 	cmp	result1, #1 wz
34618     08 4E 05 A1 |  if_e	add	fp, #8
3461c     A7 04 68 AC |  if_e	wrlong	#2, fp
34620     08 4E 85 A1 |  if_e	sub	fp, #8
34624     50 4E 05 F1 | 	add	fp, #80
34628     A7 16 02 FB | 	rdlong	arg03, fp
3462c     50 4E 85 F1 | 	sub	fp, #80
34630     FF FF 7F FF 
34634     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
34638     08 4E 05 A1 |  if_e	add	fp, #8
3463c     A7 02 68 AC |  if_e	wrlong	#1, fp
34640     08 4E 85 A1 |  if_e	sub	fp, #8
34644     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
34648     58 4E 05 F1 | 	add	fp, #88
3464c     A7 FA 61 FC | 	wrlong	result1, fp
34650     50 4E 85 F1 | 	sub	fp, #80
34654     A7 FA 09 FB | 	rdlong	result1, fp wz
34658     08 4E 85 F1 | 	sub	fp, #8
3465c     1C 01 90 5D |  if_ne	jmp	#LR__5061
34660     4C 4E 05 F1 | 	add	fp, #76
34664     A7 12 02 FB | 	rdlong	arg01, fp
34668     04 4E 05 F1 | 	add	fp, #4
3466c     A7 14 02 FB | 	rdlong	arg02, fp
34670     50 4E 85 F1 | 	sub	fp, #80
34674     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
34678     08 4E 05 F1 | 	add	fp, #8
3467c     A7 FA 61 FC | 	wrlong	result1, fp
34680     00 FA 4D F2 | 	cmps	result1, #0 wz
34684     08 4E 85 F1 | 	sub	fp, #8
34688     F0 00 90 5D |  if_ne	jmp	#LR__5060
3468c     4C 4E 05 F1 | 	add	fp, #76
34690     A7 12 02 FB | 	rdlong	arg01, fp
34694     4C 4E 85 F1 | 	sub	fp, #76
34698     34 12 06 F1 | 	add	arg01, #52
3469c     20 14 06 F6 | 	mov	arg02, #32
346a0     0B 16 06 F6 | 	mov	arg03, #11
346a4     98 00 A0 FD | 	call	#\builtin_bytefill_
346a8     4C 4E 05 F1 | 	add	fp, #76
346ac     A7 FA 01 FB | 	rdlong	result1, fp
346b0     34 FA 05 F1 | 	add	result1, #52
346b4     FD 5C 48 FC | 	wrbyte	#46, result1
346b8     A7 16 02 FB | 	rdlong	arg03, fp
346bc     3F 16 06 F1 | 	add	arg03, #63
346c0     0B 21 48 FC | 	wrbyte	#16, arg03
346c4     A7 12 02 FB | 	rdlong	arg01, fp
346c8     4A 12 06 F1 | 	add	arg01, #74
346cc     0C 4E 05 F1 | 	add	fp, #12
346d0     A7 14 02 FB | 	rdlong	arg02, fp
346d4     09 15 62 FC | 	wrlong	arg02, arg01
346d8     0C 4E 85 F1 | 	sub	fp, #12
346dc     A7 14 02 FB | 	rdlong	arg02, fp
346e0     0A 13 02 F6 | 	mov	arg01, arg02
346e4     34 14 06 F1 | 	add	arg02, #52
346e8     04 4E 05 F1 | 	add	fp, #4
346ec     A7 16 02 FB | 	rdlong	arg03, fp
346f0     50 4E 85 F1 | 	sub	fp, #80
346f4     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
346f8     4C 4E 05 F1 | 	add	fp, #76
346fc     A7 14 02 FB | 	rdlong	arg02, fp
34700     0A 13 02 F6 | 	mov	arg01, arg02
34704     54 12 06 F1 | 	add	arg01, #84
34708     4C 4E 85 F1 | 	sub	fp, #76
3470c     34 14 06 F1 | 	add	arg02, #52
34710     20 16 06 F6 | 	mov	arg03, #32
34714     78 27 BF FD | 	call	#__system____builtin_memmove
34718     4C 4E 05 F1 | 	add	fp, #76
3471c     A7 16 02 FB | 	rdlong	arg03, fp
34720     55 16 06 F1 | 	add	arg03, #85
34724     0B 5D 48 FC | 	wrbyte	#46, arg03
34728     38 4E 85 F1 | 	sub	fp, #56
3472c     A7 16 02 FB | 	rdlong	arg03, fp
34730     40 4E 05 F1 | 	add	fp, #64
34734     A7 16 62 FC | 	wrlong	arg03, fp
34738     08 4E 85 F1 | 	sub	fp, #8
3473c     A7 14 02 FB | 	rdlong	arg02, fp
34740     0A 13 02 F6 | 	mov	arg01, arg02
34744     54 14 06 F1 | 	add	arg02, #84
34748     4C 4E 85 F1 | 	sub	fp, #76
3474c     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
34750     4C 4E 05 F1 | 	add	fp, #76
34754     A7 16 02 FB | 	rdlong	arg03, fp
34758     03 16 06 F1 | 	add	arg03, #3
3475c     0B 03 48 FC | 	wrbyte	#1, arg03
34760     40 4E 85 F1 | 	sub	fp, #64
34764     A7 12 02 F6 | 	mov	arg01, fp
34768     0C 4E 85 F1 | 	sub	fp, #12
3476c     44 BA BF FD | 	call	#_fatfs_cc_dir_register
34770     08 4E 05 F1 | 	add	fp, #8
34774     A7 FA 61 FC | 	wrlong	result1, fp
34778     08 4E 85 F1 | 	sub	fp, #8
3477c                 | LR__5060
3477c                 | LR__5061
3477c     08 4E 05 F1 | 	add	fp, #8
34780     A7 FA 09 FB | 	rdlong	result1, fp wz
34784     08 4E 85 F1 | 	sub	fp, #8
34788     88 00 90 5D |  if_ne	jmp	#LR__5062
3478c     28 4E 05 F1 | 	add	fp, #40
34790     A7 12 02 FB | 	rdlong	arg01, fp
34794     16 12 06 F1 | 	add	arg01, #22
34798     30 4E 05 F1 | 	add	fp, #48
3479c     A7 14 02 FB | 	rdlong	arg02, fp
347a0     09 15 62 FC | 	wrlong	arg02, arg01
347a4     0C 4E 85 F1 | 	sub	fp, #12
347a8     A7 12 02 FB | 	rdlong	arg01, fp
347ac     24 4E 85 F1 | 	sub	fp, #36
347b0     A7 14 02 FB | 	rdlong	arg02, fp
347b4     28 4E 05 F1 | 	add	fp, #40
347b8     A7 16 02 FB | 	rdlong	arg03, fp
347bc     50 4E 85 F1 | 	sub	fp, #80
347c0     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
347c4     28 4E 05 F1 | 	add	fp, #40
347c8     A7 FA 01 FB | 	rdlong	result1, fp
347cc     0B FA 05 F1 | 	add	result1, #11
347d0     FD 20 48 FC | 	wrbyte	#16, result1
347d4     24 4E 05 F1 | 	add	fp, #36
347d8     A7 FA 01 FB | 	rdlong	result1, fp
347dc     03 FA 05 F1 | 	add	result1, #3
347e0     FD 02 48 FC | 	wrbyte	#1, result1
347e4     44 4E 85 F1 | 	sub	fp, #68
347e8     A7 FA 09 FB | 	rdlong	result1, fp wz
347ec     08 4E 85 F1 | 	sub	fp, #8
347f0     3C 00 90 5D |  if_ne	jmp	#LR__5063
347f4     4C 4E 05 F1 | 	add	fp, #76
347f8     A7 12 02 FB | 	rdlong	arg01, fp
347fc     4C 4E 85 F1 | 	sub	fp, #76
34800     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
34804     08 4E 05 F1 | 	add	fp, #8
34808     A7 FA 61 FC | 	wrlong	result1, fp
3480c     08 4E 85 F1 | 	sub	fp, #8
34810     1C 00 90 FD | 	jmp	#LR__5063
34814                 | LR__5062
34814     3C 4E 05 F1 | 	add	fp, #60
34818     A7 12 02 F6 | 	mov	arg01, fp
3481c     14 4E 05 F1 | 	add	fp, #20
34820     A7 14 02 FB | 	rdlong	arg02, fp
34824     50 4E 85 F1 | 	sub	fp, #80
34828     00 16 06 F6 | 	mov	arg03, #0
3482c     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
34830                 | LR__5063
34830                 | LR__5064
34830                 | LR__5065
34830                 | ' 				remove_chain(&sobj, dcl, 0);
34830                 | ' 			}
34830                 | ' 		}
34830                 | ' 		;
34830                 | ' 	}
34830                 | ' 
34830                 | ' 	return res ;
34830     08 4E 05 F1 | 	add	fp, #8
34834     A7 FA 01 FB | 	rdlong	result1, fp
34838     08 4E 85 F1 | 	sub	fp, #8
3483c     A7 F0 03 F6 | 	mov	ptra, fp
34840     B2 00 A0 FD | 	call	#popregs_
34844                 | _fatfs_cc_f_mkdir_ret
34844     2D 00 64 FD | 	ret
34848                 | 
34848                 | _fatfs_cc_f_rename
34848     01 4A 05 F6 | 	mov	COUNT_, #1
3484c     A8 00 A0 FD | 	call	#pushregs_
34850     9C F0 07 F1 | 	add	ptra, #156
34854     04 4E 05 F1 | 	add	fp, #4
34858     A7 12 62 FC | 	wrlong	arg01, fp
3485c     04 4E 05 F1 | 	add	fp, #4
34860     A7 14 62 FC | 	wrlong	arg02, fp
34864     A7 12 02 F6 | 	mov	arg01, fp
34868     08 4E 85 F1 | 	sub	fp, #8
3486c     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
34870     04 4E 05 F1 | 	add	fp, #4
34874     A7 12 02 F6 | 	mov	arg01, fp
34878     6C 4E 05 F1 | 	add	fp, #108
3487c     A7 14 02 F6 | 	mov	arg02, fp
34880     70 4E 85 F1 | 	sub	fp, #112
34884     02 16 06 F6 | 	mov	arg03, #2
34888     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
3488c     0C 4E 05 F1 | 	add	fp, #12
34890     A7 FA 61 FC | 	wrlong	result1, fp
34894     0C 4E 85 F1 | 	sub	fp, #12
34898     00 FA 0D F2 | 	cmp	result1, #0 wz
3489c     44 03 90 5D |  if_ne	jmp	#LR__5083
348a0     70 4E 05 F1 | 	add	fp, #112
348a4     A7 16 02 FB | 	rdlong	arg03, fp
348a8     60 4E 85 F1 | 	sub	fp, #96
348ac     A7 16 62 FC | 	wrlong	arg03, fp
348b0     A7 12 02 F6 | 	mov	arg01, fp
348b4     0C 4E 85 F1 | 	sub	fp, #12
348b8     A7 14 02 FB | 	rdlong	arg02, fp
348bc     04 4E 85 F1 | 	sub	fp, #4
348c0     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
348c4     0C 4E 05 F1 | 	add	fp, #12
348c8     A7 FA 61 FC | 	wrlong	result1, fp
348cc     00 FA 4D F2 | 	cmps	result1, #0 wz
348d0     0C 4E 85 F1 | 	sub	fp, #12
348d4     1C 00 90 5D |  if_ne	jmp	#LR__5070
348d8     3B 4E 05 F1 | 	add	fp, #59
348dc     A7 FA C1 FA | 	rdbyte	result1, fp
348e0     3B 4E 85 F1 | 	sub	fp, #59
348e4     A0 FA CD F7 | 	test	result1, #160 wz
348e8     0C 4E 05 51 |  if_ne	add	fp, #12
348ec     A7 0C 68 5C |  if_ne	wrlong	#6, fp
348f0     0C 4E 85 51 |  if_ne	sub	fp, #12
348f4                 | LR__5070
348f4     0C 4E 05 F1 | 	add	fp, #12
348f8     A7 26 0A FB | 	rdlong	local01, fp wz
348fc     0C 4E 85 F1 | 	sub	fp, #12
34900     E0 02 90 5D |  if_ne	jmp	#LR__5082
34904     74 4E 05 F1 | 	add	fp, #116
34908     A7 12 02 F6 | 	mov	arg01, fp
3490c     48 4E 85 F1 | 	sub	fp, #72
34910     A7 14 02 FB | 	rdlong	arg02, fp
34914     2C 4E 85 F1 | 	sub	fp, #44
34918     20 16 06 F6 | 	mov	arg03, #32
3491c     70 25 BF FD | 	call	#__system____builtin_memmove
34920     40 4E 05 F1 | 	add	fp, #64
34924     A7 12 02 F6 | 	mov	arg01, fp
34928     30 4E 85 F1 | 	sub	fp, #48
3492c     A7 14 02 F6 | 	mov	arg02, fp
34930     10 4E 85 F1 | 	sub	fp, #16
34934     30 16 06 F6 | 	mov	arg03, #48
34938     54 25 BF FD | 	call	#__system____builtin_memmove
3493c     40 4E 05 F1 | 	add	fp, #64
34940     A7 12 02 F6 | 	mov	arg01, fp
34944     38 4E 85 F1 | 	sub	fp, #56
34948     A7 14 02 FB | 	rdlong	arg02, fp
3494c     08 4E 85 F1 | 	sub	fp, #8
34950     34 CA BF FD | 	call	#_fatfs_cc_follow_path
34954     0C 4E 05 F1 | 	add	fp, #12
34958     A7 FA 61 FC | 	wrlong	result1, fp
3495c     0C 4E 85 F1 | 	sub	fp, #12
34960     00 FA 0D F2 | 	cmp	result1, #0 wz
34964     4C 00 90 5D |  if_ne	jmp	#LR__5073
34968     48 4E 05 F1 | 	add	fp, #72
3496c     A7 FA 01 FB | 	rdlong	result1, fp
34970     30 4E 85 F1 | 	sub	fp, #48
34974     A7 16 02 FB | 	rdlong	arg03, fp
34978     18 4E 85 F1 | 	sub	fp, #24
3497c     0B FB 09 F2 | 	cmp	result1, arg03 wz
34980     20 00 90 5D |  if_ne	jmp	#LR__5071
34984     50 4E 05 F1 | 	add	fp, #80
34988     A7 FA 01 FB | 	rdlong	result1, fp
3498c     30 4E 85 F1 | 	sub	fp, #48
34990     A7 16 02 FB | 	rdlong	arg03, fp
34994     20 4E 85 F1 | 	sub	fp, #32
34998     0B FB 09 F2 | 	cmp	result1, arg03 wz
3499c     04 26 06 A6 |  if_e	mov	local01, #4
349a0     04 00 90 AD |  if_e	jmp	#LR__5072
349a4                 | LR__5071
349a4     08 26 06 F6 | 	mov	local01, #8
349a8                 | LR__5072
349a8     0C 4E 05 F1 | 	add	fp, #12
349ac     A7 26 62 FC | 	wrlong	local01, fp
349b0     0C 4E 85 F1 | 	sub	fp, #12
349b4                 | LR__5073
349b4     0C 4E 05 F1 | 	add	fp, #12
349b8     A7 26 02 FB | 	rdlong	local01, fp
349bc     0C 4E 85 F1 | 	sub	fp, #12
349c0     04 26 0E F2 | 	cmp	local01, #4 wz
349c4     CC 01 90 5D |  if_ne	jmp	#LR__5079
349c8     40 4E 05 F1 | 	add	fp, #64
349cc     A7 12 02 F6 | 	mov	arg01, fp
349d0     40 4E 85 F1 | 	sub	fp, #64
349d4     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
349d8     0C 4E 05 F1 | 	add	fp, #12
349dc     A7 FA 61 FC | 	wrlong	result1, fp
349e0     0C 4E 85 F1 | 	sub	fp, #12
349e4     00 FA 0D F2 | 	cmp	result1, #0 wz
349e8     A8 01 90 5D |  if_ne	jmp	#LR__5078
349ec     5C 4E 05 F1 | 	add	fp, #92
349f0     A7 12 02 FB | 	rdlong	arg01, fp
349f4     38 4E 05 F1 | 	add	fp, #56
349f8     A7 12 62 FC | 	wrlong	arg01, fp
349fc     0D 12 06 F1 | 	add	arg01, #13
34a00     20 4E 85 F1 | 	sub	fp, #32
34a04     A7 14 02 F6 | 	mov	arg02, fp
34a08     74 4E 85 F1 | 	sub	fp, #116
34a0c     0D 14 06 F1 | 	add	arg02, #13
34a10     13 16 06 F6 | 	mov	arg03, #19
34a14     78 24 BF FD | 	call	#__system____builtin_memmove
34a18     94 4E 05 F1 | 	add	fp, #148
34a1c     A7 26 02 FB | 	rdlong	local01, fp
34a20     15 4E 85 F1 | 	sub	fp, #21
34a24     A7 FA C1 FA | 	rdbyte	result1, fp
34a28     0B 26 06 F1 | 	add	local01, #11
34a2c     13 FB 41 FC | 	wrbyte	result1, local01
34a30     15 4E 05 F1 | 	add	fp, #21
34a34     A7 26 02 FB | 	rdlong	local01, fp
34a38     94 4E 85 F1 | 	sub	fp, #148
34a3c     0B 26 06 F1 | 	add	local01, #11
34a40     13 27 C2 FA | 	rdbyte	local01, local01
34a44     10 26 CE F7 | 	test	local01, #16 wz
34a48     24 00 90 5D |  if_ne	jmp	#LR__5074
34a4c     94 4E 05 F1 | 	add	fp, #148
34a50     A7 FA 01 FB | 	rdlong	result1, fp
34a54     FD 26 02 F6 | 	mov	local01, result1
34a58     94 4E 85 F1 | 	sub	fp, #148
34a5c     0B FA 05 F1 | 	add	result1, #11
34a60     FD FA C1 FA | 	rdbyte	result1, result1
34a64     20 FA 45 F5 | 	or	result1, #32
34a68     0B 26 06 F1 | 	add	local01, #11
34a6c     13 FB 41 FC | 	wrbyte	result1, local01
34a70                 | LR__5074
34a70     70 4E 05 F1 | 	add	fp, #112
34a74     A7 26 02 FB | 	rdlong	local01, fp
34a78     03 26 06 F1 | 	add	local01, #3
34a7c     13 03 48 FC | 	wrbyte	#1, local01
34a80     24 4E 05 F1 | 	add	fp, #36
34a84     A7 26 02 FB | 	rdlong	local01, fp
34a88     94 4E 85 F1 | 	sub	fp, #148
34a8c     0B 26 06 F1 | 	add	local01, #11
34a90     13 27 C2 FA | 	rdbyte	local01, local01
34a94     10 26 CE F7 | 	test	local01, #16 wz
34a98     F8 00 90 AD |  if_e	jmp	#LR__5077
34a9c     18 4E 05 F1 | 	add	fp, #24
34aa0     A7 16 02 FB | 	rdlong	arg03, fp
34aa4     30 4E 05 F1 | 	add	fp, #48
34aa8     A7 26 02 FB | 	rdlong	local01, fp
34aac     48 4E 85 F1 | 	sub	fp, #72
34ab0     13 17 0A F2 | 	cmp	arg03, local01 wz
34ab4     DC 00 90 AD |  if_e	jmp	#LR__5077
34ab8     70 4E 05 F1 | 	add	fp, #112
34abc     A7 12 02 FB | 	rdlong	arg01, fp
34ac0     09 27 02 F6 | 	mov	local01, arg01
34ac4     24 4E 05 F1 | 	add	fp, #36
34ac8     A7 14 02 FB | 	rdlong	arg02, fp
34acc     94 4E 85 F1 | 	sub	fp, #148
34ad0     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
34ad4     FD 14 02 F6 | 	mov	arg02, result1
34ad8     13 13 02 F6 | 	mov	arg01, local01
34adc     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
34ae0     98 4E 05 F1 | 	add	fp, #152
34ae4     A7 FA 61 FC | 	wrlong	result1, fp
34ae8     00 FA 4D F2 | 	cmps	result1, #0 wz
34aec     98 4E 85 F1 | 	sub	fp, #152
34af0     0C 4E 05 A1 |  if_e	add	fp, #12
34af4     A7 04 68 AC |  if_e	wrlong	#2, fp
34af8     0C 4E 85 A1 |  if_e	sub	fp, #12
34afc     94 00 90 AD |  if_e	jmp	#LR__5076
34b00     70 4E 05 F1 | 	add	fp, #112
34b04     A7 12 02 FB | 	rdlong	arg01, fp
34b08     28 4E 05 F1 | 	add	fp, #40
34b0c     A7 14 02 FB | 	rdlong	arg02, fp
34b10     98 4E 85 F1 | 	sub	fp, #152
34b14     4C A0 BF FD | 	call	#_fatfs_cc_move_window
34b18     0C 4E 05 F1 | 	add	fp, #12
34b1c     A7 FA 61 FC | 	wrlong	result1, fp
34b20     64 4E 05 F1 | 	add	fp, #100
34b24     A7 26 02 FB | 	rdlong	local01, fp
34b28     54 26 06 F1 | 	add	local01, #84
34b2c     24 4E 05 F1 | 	add	fp, #36
34b30     A7 26 62 FC | 	wrlong	local01, fp
34b34     88 4E 85 F1 | 	sub	fp, #136
34b38     A7 26 0A FB | 	rdlong	local01, fp wz
34b3c     0C 4E 85 F1 | 	sub	fp, #12
34b40     50 00 90 5D |  if_ne	jmp	#LR__5075
34b44     94 4E 05 F1 | 	add	fp, #148
34b48     A7 26 02 FB | 	rdlong	local01, fp
34b4c     94 4E 85 F1 | 	sub	fp, #148
34b50     01 26 06 F1 | 	add	local01, #1
34b54     13 27 C2 FA | 	rdbyte	local01, local01
34b58     2E 26 0E F2 | 	cmp	local01, #46 wz
34b5c     34 00 90 5D |  if_ne	jmp	#LR__5075
34b60     70 4E 05 F1 | 	add	fp, #112
34b64     A7 12 02 FB | 	rdlong	arg01, fp
34b68     24 4E 05 F1 | 	add	fp, #36
34b6c     A7 14 02 FB | 	rdlong	arg02, fp
34b70     4C 4E 85 F1 | 	sub	fp, #76
34b74     A7 16 02 FB | 	rdlong	arg03, fp
34b78     48 4E 85 F1 | 	sub	fp, #72
34b7c     50 AD BF FD | 	call	#_fatfs_cc_st_clust
34b80     70 4E 05 F1 | 	add	fp, #112
34b84     A7 26 02 FB | 	rdlong	local01, fp
34b88     70 4E 85 F1 | 	sub	fp, #112
34b8c     03 26 06 F1 | 	add	local01, #3
34b90     13 03 48 FC | 	wrbyte	#1, local01
34b94                 | LR__5075
34b94                 | LR__5076
34b94                 | LR__5077
34b94                 | LR__5078
34b94                 | LR__5079
34b94     0C 4E 05 F1 | 	add	fp, #12
34b98     A7 26 0A FB | 	rdlong	local01, fp wz
34b9c     0C 4E 85 F1 | 	sub	fp, #12
34ba0     40 00 90 5D |  if_ne	jmp	#LR__5081
34ba4     10 4E 05 F1 | 	add	fp, #16
34ba8     A7 12 02 F6 | 	mov	arg01, fp
34bac     10 4E 85 F1 | 	sub	fp, #16
34bb0     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
34bb4     0C 4E 05 F1 | 	add	fp, #12
34bb8     A7 FA 61 FC | 	wrlong	result1, fp
34bbc     0C 4E 85 F1 | 	sub	fp, #12
34bc0     00 FA 0D F2 | 	cmp	result1, #0 wz
34bc4     1C 00 90 5D |  if_ne	jmp	#LR__5080
34bc8     70 4E 05 F1 | 	add	fp, #112
34bcc     A7 12 02 FB | 	rdlong	arg01, fp
34bd0     70 4E 85 F1 | 	sub	fp, #112
34bd4     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
34bd8     0C 4E 05 F1 | 	add	fp, #12
34bdc     A7 FA 61 FC | 	wrlong	result1, fp
34be0     0C 4E 85 F1 | 	sub	fp, #12
34be4                 | LR__5080
34be4                 | LR__5081
34be4                 | LR__5082
34be4                 | LR__5083
34be4                 | ' 					res = sync_fs(fs);
34be4                 | ' 				}
34be4                 | ' 			}
34be4                 | ' 
34be4                 | ' 		}
34be4                 | ' 		;
34be4                 | ' 	}
34be4                 | ' 
34be4                 | ' 	return res ;
34be4     0C 4E 05 F1 | 	add	fp, #12
34be8     A7 FA 01 FB | 	rdlong	result1, fp
34bec     0C 4E 85 F1 | 	sub	fp, #12
34bf0     A7 F0 03 F6 | 	mov	ptra, fp
34bf4     B2 00 A0 FD | 	call	#popregs_
34bf8                 | _fatfs_cc_f_rename_ret
34bf8     2D 00 64 FD | 	ret
34bfc                 | 
34bfc                 | _fatfs_cc_time
34bfc     00 4A 05 F6 | 	mov	COUNT_, #0
34c00     A8 00 A0 FD | 	call	#pushregs_
34c04     14 F0 07 F1 | 	add	ptra, #20
34c08     04 4E 05 F1 | 	add	fp, #4
34c0c     A7 12 62 FC | 	wrlong	arg01, fp
34c10     04 4E 05 F1 | 	add	fp, #4
34c14     A7 12 02 F6 | 	mov	arg01, fp
34c18     08 4E 85 F1 | 	sub	fp, #8
34c1c     00 14 06 F6 | 	mov	arg02, #0
34c20     0C 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
34c24     08 4E 05 F1 | 	add	fp, #8
34c28     A7 FA 01 FB | 	rdlong	result1, fp
34c2c     08 4E 05 F1 | 	add	fp, #8
34c30     A7 FA 61 FC | 	wrlong	result1, fp
34c34     0C 4E 85 F1 | 	sub	fp, #12
34c38     A7 FA 09 FB | 	rdlong	result1, fp wz
34c3c     04 4E 85 F1 | 	sub	fp, #4
34c40     18 00 90 AD |  if_e	jmp	#LR__5090
34c44     04 4E 05 F1 | 	add	fp, #4
34c48     A7 FA 01 FB | 	rdlong	result1, fp
34c4c     0C 4E 05 F1 | 	add	fp, #12
34c50     A7 14 02 FB | 	rdlong	arg02, fp
34c54     10 4E 85 F1 | 	sub	fp, #16
34c58     FD 14 62 FC | 	wrlong	arg02, result1
34c5c                 | LR__5090
34c5c                 | '         *tp = now;
34c5c                 | '     return now;
34c5c     10 4E 05 F1 | 	add	fp, #16
34c60     A7 FA 01 FB | 	rdlong	result1, fp
34c64     10 4E 85 F1 | 	sub	fp, #16
34c68     A7 F0 03 F6 | 	mov	ptra, fp
34c6c     B2 00 A0 FD | 	call	#popregs_
34c70                 | _fatfs_cc_time_ret
34c70     2D 00 64 FD | 	ret
34c74                 | 
34c74                 | _fatfs_cc_mktime
34c74     06 4A 05 F6 | 	mov	COUNT_, #6
34c78     A8 00 A0 FD | 	call	#pushregs_
34c7c     09 27 02 F6 | 	mov	local01, arg01
34c80     14 26 06 F1 | 	add	local01, #20
34c84     13 13 02 FB | 	rdlong	arg01, local01
34c88     14 26 86 F1 | 	sub	local01, #20
34c8c     46 12 56 F2 | 	cmps	arg01, #70 wc
34c90                 | '                 return (time_t) -1;
34c90     01 FA 65 C6 |  if_b	neg	result1, #1
34c94     7C 01 90 CD |  if_b	jmp	#LR__5104
34c98     03 00 00 FF 
34c9c     6C 29 06 F6 | 	mov	local02, ##1900
34ca0     14 26 06 F1 | 	add	local01, #20
34ca4     13 FB 01 FB | 	rdlong	result1, local01
34ca8     FD 28 02 F1 | 	add	local02, result1
34cac     08 26 86 F1 | 	sub	local01, #8
34cb0     13 2B 02 FB | 	rdlong	local03, local01
34cb4     01 2A 86 F1 | 	sub	local03, #1
34cb8     04 26 06 F1 | 	add	local01, #4
34cbc     13 13 02 FB | 	rdlong	arg01, local01
34cc0     10 26 86 F1 | 	sub	local01, #16
34cc4     02 12 66 F0 | 	shl	arg01, #2
34cc8     02 00 00 FF 
34ccc     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
34cd0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
34cd4     09 FB 01 FB | 	rdlong	result1, arg01
34cd8     FD 2A 02 F1 | 	add	local03, result1
34cdc     14 13 02 F6 | 	mov	arg01, local02
34ce0     02 00 00 FF 
34ce4     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
34ce8     EC 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
34cec     00 FA 0D F2 | 	cmp	result1, #0 wz
34cf0     1C 00 90 AD |  if_e	jmp	#LR__5100
34cf4     00 2C 06 F6 | 	mov	local04, #0
34cf8     10 26 06 F1 | 	add	local01, #16
34cfc     13 FB 01 FB | 	rdlong	result1, local01
34d00     10 26 86 F1 | 	sub	local01, #16
34d04     02 FA 55 F2 | 	cmps	result1, #2 wc
34d08     01 2C 06 36 |  if_ae	mov	local04, #1
34d0c     04 00 90 FD | 	jmp	#LR__5101
34d10                 | LR__5100
34d10     00 2C 06 F6 | 	mov	local04, #0
34d14                 | LR__5101
34d14     04 26 06 F1 | 	add	local01, #4
34d18     13 FB 01 FB | 	rdlong	result1, local01
34d1c     04 26 86 F1 | 	sub	local01, #4
34d20     13 2F 02 FB | 	rdlong	local05, local01
34d24     08 26 06 F1 | 	add	local01, #8
34d28     13 13 02 FB | 	rdlong	arg01, local01
34d2c     07 00 00 FF 
34d30     10 12 06 FD | 	qmul	arg01, ##3600
34d34     16 2B 02 F1 | 	add	local03, local04
34d38     FD 2C 02 F6 | 	mov	local04, result1
34d3c     04 2C 66 F0 | 	shl	local04, #4
34d40     FD 2C 82 F1 | 	sub	local04, result1
34d44     02 2C 66 F0 | 	shl	local04, #2
34d48     16 2F 02 F1 | 	add	local05, local04
34d4c     08 26 86 F1 | 	sub	local01, #8
34d50     18 2C 62 FD | 	getqx	local04
34d54     A8 00 00 FF 
34d58     80 2B 06 FD | 	qmul	local03, ##86400
34d5c     16 2F 02 F1 | 	add	local05, local04
34d60     14 2B 02 F6 | 	mov	local03, local02
34d64     03 00 00 FF 
34d68     B2 2B 86 F1 | 	sub	local03, ##1970
34d6c     18 2C 62 FD | 	getqx	local04
34d70     99 F0 00 FF 
34d74     80 2B 06 FD | 	qmul	local03, ##31536000
34d78     16 2F 02 F1 | 	add	local05, local04
34d7c     14 2B 02 F6 | 	mov	local03, local02
34d80     03 00 00 FF 
34d84     B1 2B 86 F1 | 	sub	local03, ##1969
34d88     15 31 52 F6 | 	abs	local06, local03 wc
34d8c     02 30 46 F0 | 	shr	local06, #2
34d90     18 31 82 F6 | 	negc	local06, local06
34d94     03 00 00 FF 
34d98     D1 29 56 F2 | 	cmps	local02, ##2001 wc
34d9c     18 2C 62 FD | 	getqx	local04
34da0     16 2F 02 F1 | 	add	local05, local04
34da4     18 00 90 CD |  if_b	jmp	#LR__5102
34da8     03 00 00 FF 
34dac     D0 29 86 F1 | 	sub	local02, ##2000
34db0     14 2D 52 F6 | 	abs	local04, local02 wc
34db4     64 2C 16 FD | 	qdiv	local04, #100
34db8     18 2C 62 FD | 	getqx	local04
34dbc     16 31 A2 F3 | 	sumnc	local06, local04
34dc0                 | LR__5102
34dc0     A8 00 00 FF 
34dc4     80 31 06 FD | 	qmul	local06, ##86400
34dc8     18 30 62 FD | 	getqx	local06
34dcc     18 2F 02 F1 | 	add	local05, local06
34dd0     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
34dd4     02 00 00 FF 
34dd8     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
34ddc     F6 30 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
34de0     18 2F 02 F1 | 	add	local05, local06
34de4     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
34de8     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
34dec     02 00 00 FF 
34df0     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
34df4     01 2A 0E F2 | 	cmp	local03, #1 wz
34df8     14 00 90 5D |  if_ne	jmp	#LR__5103
34dfc     13 13 02 F6 | 	mov	arg01, local01
34e00     D8 19 B0 FD | 	call	#_fatfs_cc___indst
34e04     00 FA 0D F2 | 	cmp	result1, #0 wz
34e08     07 00 00 5F 
34e0c     10 2E 86 51 |  if_ne	sub	local05, ##3600
34e10                 | LR__5103
34e10                 | '                 s -=  (3600L) ;
34e10                 | ' 
34e10                 | '         return s;
34e10     17 FB 01 F6 | 	mov	result1, local05
34e14                 | LR__5104
34e14     A7 F0 03 F6 | 	mov	ptra, fp
34e18     B2 00 A0 FD | 	call	#popregs_
34e1c                 | _fatfs_cc_mktime_ret
34e1c     2D 00 64 FD | 	ret
34e20                 | 
34e20                 | _fatfs_cc__gmtime_r
34e20     03 4A 05 F6 | 	mov	COUNT_, #3
34e24     A8 00 A0 FD | 	call	#pushregs_
34e28     09 27 02 FB | 	rdlong	local01, arg01
34e2c     A8 00 00 FF 
34e30     80 27 16 FD | 	qdiv	local01, ##86400
34e34     18 FA 61 FD | 	getqx	result1
34e38     04 FA 05 F1 | 	add	result1, #4
34e3c     07 FA 15 FD | 	qdiv	result1, #7
34e40     18 14 06 F1 | 	add	arg02, #24
34e44     D1 7F 27 FF 
34e48     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
34e4c     D1 7F 27 3F 
34e50     00 26 86 31 |  if_ae	sub	local01, ##1325376000
34e54     03 00 00 3F 
34e58     DC 29 06 36 |  if_ae	mov	local02, ##2012
34e5c     03 00 00 CF 
34e60     B2 29 06 C6 |  if_b	mov	local02, ##1970
34e64                 | ' 	  year = 1970;
34e64                 | ' 	}
34e64                 | ' 
34e64                 | ' 	for(;;) {
34e64     19 FA 61 FD | 	getqy	result1
34e68     0A FB 61 FC | 	wrlong	result1, arg02
34e6c     18 14 86 F1 | 	sub	arg02, #24
34e70                 | LR__5110
34e70     14 13 02 F6 | 	mov	arg01, local02
34e74     60 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
34e78     00 FA 0D F2 | 	cmp	result1, #0 wz
34e7c     42 F1 00 5F 
34e80     00 2B 06 56 |  if_ne	mov	local03, ##31622400
34e84     99 F0 00 AF 
34e88     80 2B 06 A6 |  if_e	mov	local03, ##31536000
34e8c     15 27 12 F2 | 	cmp	local01, local03 wc
34e90                 | ' 	    break;
34e90     01 28 06 31 |  if_ae	add	local02, #1
34e94     15 27 82 31 |  if_ae	sub	local01, local03
34e98     D4 FF 9F 3D |  if_ae	jmp	#LR__5110
34e9c     A8 00 00 FF 
34ea0     80 27 16 FD | 	qdiv	local01, ##86400
34ea4     14 2B 02 F6 | 	mov	local03, local02
34ea8     03 00 00 FF 
34eac     6C 2B 86 F1 | 	sub	local03, ##1900
34eb0     14 14 06 F1 | 	add	arg02, #20
34eb4     0A 2B 62 FC | 	wrlong	local03, arg02
34eb8     08 14 06 F1 | 	add	arg02, #8
34ebc     14 13 02 F6 | 	mov	arg01, local02
34ec0     18 28 62 FD | 	getqx	local02
34ec4     0A 29 62 FC | 	wrlong	local02, arg02
34ec8     1C 14 86 F1 | 	sub	arg02, #28
34ecc     08 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
34ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
34ed4     1D 2A 06 56 |  if_ne	mov	local03, #29
34ed8     1C 2A 06 A6 |  if_e	mov	local03, #28
34edc     02 00 00 FF 
34ee0     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
34ee4     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
34ee8     02 00 00 FF 
34eec     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
34ef0                 | ' 
34ef0                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
34ef0                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
34ef0     00 12 06 F6 | 	mov	arg01, #0
34ef4     97 2A 48 FB | 	callpa	#(@LR__5112-@LR__5111)>>2,fcache_load_ptr_
34ef8                 | LR__5111
34ef8     09 2B 02 F6 | 	mov	local03, arg01
34efc     02 2A 66 F0 | 	shl	local03, #2
34f00     02 00 00 FF 
34f04     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
34f08     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
34f0c     15 2B 02 FB | 	rdlong	local03, local03
34f10     15 29 52 F2 | 	cmps	local02, local03 wc
34f14     02 00 00 FF 
34f18     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
34f1c     2C 00 90 CD |  if_b	jmp	#LR__5113
34f20     09 2B 02 F6 | 	mov	local03, arg01
34f24     02 2A 66 F0 | 	shl	local03, #2
34f28     02 00 00 FF 
34f2c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
34f30     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
34f34     15 2B 02 FB | 	rdlong	local03, local03
34f38     15 29 82 F1 | 	sub	local02, local03
34f3c     01 12 06 F1 | 	add	arg01, #1
34f40     02 00 00 FF 
34f44     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
34f48     AC FF 9F FD | 	jmp	#LR__5111
34f4c                 | LR__5112
34f4c                 | LR__5113
34f4c     A8 00 00 FF 
34f50     80 27 16 FD | 	qdiv	local01, ##86400
34f54     10 14 06 F1 | 	add	arg02, #16
34f58     0A 13 62 FC | 	wrlong	arg01, arg02
34f5c     01 28 06 F1 | 	add	local02, #1
34f60     04 14 86 F1 | 	sub	arg02, #4
34f64     0A 29 62 FC | 	wrlong	local02, arg02
34f68     19 26 62 FD | 	getqy	local01
34f6c     07 00 00 FF 
34f70     10 26 16 FD | 	qdiv	local01, ##3600
34f74     18 2A 62 FD | 	getqx	local03
34f78     07 00 00 FF 
34f7c     10 26 16 FD | 	qdiv	local01, ##3600
34f80     04 14 86 F1 | 	sub	arg02, #4
34f84     0A 2B 62 FC | 	wrlong	local03, arg02
34f88     19 26 62 FD | 	getqy	local01
34f8c     3C 26 16 FD | 	qdiv	local01, #60
34f90     18 2A 62 FD | 	getqx	local03
34f94     3C 26 16 FD | 	qdiv	local01, #60
34f98     04 14 86 F1 | 	sub	arg02, #4
34f9c     0A 2B 62 FC | 	wrlong	local03, arg02
34fa0     04 14 86 F1 | 	sub	arg02, #4
34fa4                 | '         stm->tm_isdst = 0;
34fa4                 | ' 
34fa4                 | ' ;
34fa4                 | '         return stm;
34fa4     0A FB 01 F6 | 	mov	result1, arg02
34fa8     19 2A 62 FD | 	getqy	local03
34fac     0A 2B 62 FC | 	wrlong	local03, arg02
34fb0     20 14 06 F1 | 	add	arg02, #32
34fb4     0A 01 68 FC | 	wrlong	#0, arg02
34fb8     A7 F0 03 F6 | 	mov	ptra, fp
34fbc     B2 00 A0 FD | 	call	#popregs_
34fc0                 | _fatfs_cc__gmtime_r_ret
34fc0     2D 00 64 FD | 	ret
34fc4                 | 
34fc4                 | _fatfs_cc__tzset
34fc4     B5 01 00 FF 
34fc8     05 13 06 F6 | 	mov	arg01, ##@LR__5425
34fcc     34 00 B0 FD | 	call	#_fatfs_cc_getenv
34fd0     FD 12 02 F6 | 	mov	arg01, result1
34fd4     02 00 00 FF 
34fd8     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
34fdc     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
34fe0     02 00 00 FF 
34fe4     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
34fe8     3C 15 B0 FD | 	call	#_fatfs_cc___tzoffset
34fec     02 00 00 FF 
34ff0     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
34ff4     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
34ff8     02 00 00 FF 
34ffc     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
35000                 | _fatfs_cc__tzset_ret
35000     2D 00 64 FD | 	ret
35004                 | 
35004                 | _fatfs_cc_getenv
35004     06 4A 05 F6 | 	mov	COUNT_, #6
35008     A8 00 A0 FD | 	call	#pushregs_
3500c     09 27 02 F6 | 	mov	local01, arg01
35010     09 29 02 F6 | 	mov	local02, arg01
35014     97 06 48 FB | 	callpa	#(@LR__5121-@LR__5120)>>2,fcache_load_ptr_
35018                 | LR__5120
35018     14 FB C9 FA | 	rdbyte	result1, local02 wz
3501c     01 28 06 51 |  if_ne	add	local02, #1
35020     F4 FF 9F 5D |  if_ne	jmp	#LR__5120
35024                 | LR__5121
35024     09 29 82 F1 | 	sub	local02, arg01
35028     14 FB 01 F6 | 	mov	result1, local02
3502c     02 00 00 FF 
35030     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
35034     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
35038     02 00 00 FF 
3503c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
35040                 | '             return 0;
35040     00 FA 05 A6 |  if_e	mov	result1, #0
35044     5C 00 90 AD |  if_e	jmp	#LR__5124
35048                 | ' 
35048                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
35048     02 00 00 FF 
3504c     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
35050     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
35054     02 00 00 FF 
35058     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
3505c                 | LR__5122
3505c     15 2D 0A FB | 	rdlong	local04, local03 wz
35060     3C 00 90 AD |  if_e	jmp	#LR__5123
35064     16 13 02 F6 | 	mov	arg01, local04
35068     13 15 02 F6 | 	mov	arg02, local01
3506c     14 17 02 F6 | 	mov	arg03, local02
35070     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
35074     00 FA 0D F2 | 	cmp	result1, #0 wz
35078     14 2F 02 A6 |  if_e	mov	local05, local02
3507c     16 2F 02 A1 |  if_e	add	local05, local04
35080     17 31 C2 AA |  if_e	rdbyte	local06, local05
35084     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
35088                 | ' 			return name+len+1;
35088     14 2D 02 A1 |  if_e	add	local04, local02
3508c     01 2C 06 A1 |  if_e	add	local04, #1
35090     16 FB 01 A6 |  if_e	mov	result1, local04
35094     0C 00 90 AD |  if_e	jmp	#LR__5124
35098     04 2A 06 F1 | 	add	local03, #4
3509c     BC FF 9F FD | 	jmp	#LR__5122
350a0                 | LR__5123
350a0                 | ' 	}
350a0                 | ' 	return 0;
350a0     00 FA 05 F6 | 	mov	result1, #0
350a4                 | LR__5124
350a4     A7 F0 03 F6 | 	mov	ptra, fp
350a8     B2 00 A0 FD | 	call	#popregs_
350ac                 | _fatfs_cc_getenv_ret
350ac     2D 00 64 FD | 	ret
350b0                 | 
350b0                 | _fatfs_cc__get_fattime
350b0     00 4A 05 F6 | 	mov	COUNT_, #0
350b4     A8 00 A0 FD | 	call	#pushregs_
350b8     34 F0 07 F1 | 	add	ptra, #52
350bc     00 12 06 F6 | 	mov	arg01, #0
350c0     38 FB BF FD | 	call	#_fatfs_cc_time
350c4     04 4E 05 F1 | 	add	fp, #4
350c8     A7 FA 61 FC | 	wrlong	result1, fp
350cc     A7 12 02 F6 | 	mov	arg01, fp
350d0     0C 4E 05 F1 | 	add	fp, #12
350d4     A7 14 02 F6 | 	mov	arg02, fp
350d8     10 4E 85 F1 | 	sub	fp, #16
350dc     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
350e0     24 4E 05 F1 | 	add	fp, #36
350e4     A7 14 02 FB | 	rdlong	arg02, fp
350e8     50 14 86 F1 | 	sub	arg02, #80
350ec     09 14 66 F0 | 	shl	arg02, #9
350f0     04 4E 85 F1 | 	sub	fp, #4
350f4     A7 FA 01 FB | 	rdlong	result1, fp
350f8     01 FA 05 F1 | 	add	result1, #1
350fc     05 FA 65 F0 | 	shl	result1, #5
35100     FD 14 42 F5 | 	or	arg02, result1
35104     04 4E 85 F1 | 	sub	fp, #4
35108     A7 FA 01 FB | 	rdlong	result1, fp
3510c     FD 14 42 F5 | 	or	arg02, result1
35110     14 4E 85 F1 | 	sub	fp, #20
35114     A7 14 62 FC | 	wrlong	arg02, fp
35118     10 4E 05 F1 | 	add	fp, #16
3511c     A7 14 02 FB | 	rdlong	arg02, fp
35120     0B 14 66 F0 | 	shl	arg02, #11
35124     04 4E 85 F1 | 	sub	fp, #4
35128     A7 FA 01 FB | 	rdlong	result1, fp
3512c     05 FA 65 F0 | 	shl	result1, #5
35130     FD 14 42 F5 | 	or	arg02, result1
35134     04 4E 85 F1 | 	sub	fp, #4
35138     A7 FA 01 FB | 	rdlong	result1, fp
3513c     FD 14 42 F5 | 	or	arg02, result1
35140     04 4E 85 F1 | 	sub	fp, #4
35144     A7 14 62 FC | 	wrlong	arg02, fp
35148                 | ' 
35148                 | '     now = time(0);
35148                 | '     _gmtime_r (&now, &date);
35148                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
35148                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
35148                 | '     return (ffdate << 16) | fftime;
35148     04 4E 85 F1 | 	sub	fp, #4
3514c     A7 FA 01 FB | 	rdlong	result1, fp
35150     10 FA 65 F0 | 	shl	result1, #16
35154     08 4E 85 F1 | 	sub	fp, #8
35158     0A FB 41 F5 | 	or	result1, arg02
3515c     A7 F0 03 F6 | 	mov	ptra, fp
35160     B2 00 A0 FD | 	call	#popregs_
35164                 | _fatfs_cc__get_fattime_ret
35164     2D 00 64 FD | 	ret
35168                 | 
35168                 | _fatfs_cc_unixtime_1039
35168     00 4A 05 F6 | 	mov	COUNT_, #0
3516c     A8 00 A0 FD | 	call	#pushregs_
35170     34 F0 07 F1 | 	add	ptra, #52
35174     04 4E 05 F1 | 	add	fp, #4
35178     A7 12 62 FC | 	wrlong	arg01, fp
3517c     04 4E 05 F1 | 	add	fp, #4
35180     A7 14 62 FC | 	wrlong	arg02, fp
35184     04 4E 85 F1 | 	sub	fp, #4
35188     A7 14 02 FB | 	rdlong	arg02, fp
3518c     09 14 46 F0 | 	shr	arg02, #9
35190     7F 14 06 F5 | 	and	arg02, #127
35194     50 FA 05 F6 | 	mov	result1, #80
35198     0A FB 01 F1 | 	add	result1, arg02
3519c     20 4E 05 F1 | 	add	fp, #32
351a0     A7 FA 61 FC | 	wrlong	result1, fp
351a4     20 4E 85 F1 | 	sub	fp, #32
351a8     A7 FA 01 FB | 	rdlong	result1, fp
351ac     05 FA 45 F0 | 	shr	result1, #5
351b0     FD FA 41 F8 | 	getnib	result1, result1, #0
351b4     01 FA 85 F1 | 	sub	result1, #1
351b8     1C 4E 05 F1 | 	add	fp, #28
351bc     A7 FA 61 FC | 	wrlong	result1, fp
351c0     1C 4E 85 F1 | 	sub	fp, #28
351c4     A7 FA 01 FB | 	rdlong	result1, fp
351c8     1F FA 05 F5 | 	and	result1, #31
351cc     18 4E 05 F1 | 	add	fp, #24
351d0     A7 FA 61 FC | 	wrlong	result1, fp
351d4     14 4E 85 F1 | 	sub	fp, #20
351d8     A7 FA 01 FB | 	rdlong	result1, fp
351dc     0B FA 45 F0 | 	shr	result1, #11
351e0     1F FA 05 F5 | 	and	result1, #31
351e4     10 4E 05 F1 | 	add	fp, #16
351e8     A7 FA 61 FC | 	wrlong	result1, fp
351ec     10 4E 85 F1 | 	sub	fp, #16
351f0     A7 FA 01 FB | 	rdlong	result1, fp
351f4     05 FA 45 F0 | 	shr	result1, #5
351f8     3F FA 05 F5 | 	and	result1, #63
351fc     0C 4E 05 F1 | 	add	fp, #12
35200     A7 FA 61 FC | 	wrlong	result1, fp
35204     0C 4E 85 F1 | 	sub	fp, #12
35208     A7 14 02 FB | 	rdlong	arg02, fp
3520c     1F 14 06 F5 | 	and	arg02, #31
35210     01 14 66 F0 | 	shl	arg02, #1
35214     08 4E 05 F1 | 	add	fp, #8
35218     A7 14 62 FC | 	wrlong	arg02, fp
3521c     A7 12 02 F6 | 	mov	arg01, fp
35220     10 4E 85 F1 | 	sub	fp, #16
35224     4C FA BF FD | 	call	#_fatfs_cc_mktime
35228     0C 4E 05 F1 | 	add	fp, #12
3522c     A7 FA 61 FC | 	wrlong	result1, fp
35230                 | ' 
35230                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
35230                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
35230                 | '     date.tm_mday = (dosdate & 0x1f);
35230                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
35230                 | '     date.tm_min = (dostime >> 5) & 0x3f;
35230                 | '     date.tm_sec = (dostime & 0x1f) << 1;
35230                 | ' 
35230                 | '     t = mktime(&date);
35230                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35230                 | '     return t;
35230     0C 4E 85 F1 | 	sub	fp, #12
35234     A7 F0 03 F6 | 	mov	ptra, fp
35238     B2 00 A0 FD | 	call	#popregs_
3523c                 | _fatfs_cc_unixtime_1039_ret
3523c     2D 00 64 FD | 	ret
35240                 | 
35240                 | _fatfs_cc__set_dos_error_1041
35240     09 01 02 F6 | 	mov	_var01, arg01
35244                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35244                 | '     switch (derr) {
35244     14 00 26 F3 | 	fle	_var01, #20
35248     30 00 62 FD | 	jmprel	_var01
3524c                 | LR__5130
3524c     50 00 90 FD | 	jmp	#LR__5131
35250     84 00 90 FD | 	jmp	#LR__5145
35254     80 00 90 FD | 	jmp	#LR__5146
35258     7C 00 90 FD | 	jmp	#LR__5147
3525c     48 00 90 FD | 	jmp	#LR__5132
35260     44 00 90 FD | 	jmp	#LR__5133
35264     40 00 90 FD | 	jmp	#LR__5134
35268     44 00 90 FD | 	jmp	#LR__5135
3526c     48 00 90 FD | 	jmp	#LR__5137
35270     54 00 90 FD | 	jmp	#LR__5140
35274     38 00 90 FD | 	jmp	#LR__5136
35278     4C 00 90 FD | 	jmp	#LR__5141
3527c     48 00 90 FD | 	jmp	#LR__5142
35280     44 00 90 FD | 	jmp	#LR__5143
35284     50 00 90 FD | 	jmp	#LR__5148
35288     4C 00 90 FD | 	jmp	#LR__5148
3528c     48 00 90 FD | 	jmp	#LR__5148
35290     2C 00 90 FD | 	jmp	#LR__5138
35294     38 00 90 FD | 	jmp	#LR__5144
35298     2C 00 90 FD | 	jmp	#LR__5139
3529c     38 00 90 FD | 	jmp	#LR__5148
352a0                 | LR__5131
352a0     00 02 06 F6 | 	mov	_var02, #0
352a4                 | '         r = 0;
352a4                 | '         break;
352a4     34 00 90 FD | 	jmp	#LR__5149
352a8                 | LR__5132
352a8                 | LR__5133
352a8                 | LR__5134
352a8     04 02 06 F6 | 	mov	_var02, #4
352ac                 | '         r =  4 ;
352ac                 | '         break;
352ac     2C 00 90 FD | 	jmp	#LR__5149
352b0                 | LR__5135
352b0                 | LR__5136
352b0     06 02 06 F6 | 	mov	_var02, #6
352b4                 | '         r =  6 ;
352b4                 | '         break;
352b4     24 00 90 FD | 	jmp	#LR__5149
352b8                 | LR__5137
352b8     09 02 06 F6 | 	mov	_var02, #9
352bc                 | '         r =  9 ;
352bc                 | '         break;
352bc     1C 00 90 FD | 	jmp	#LR__5149
352c0                 | LR__5138
352c0     07 02 06 F6 | 	mov	_var02, #7
352c4                 | '         r =  7 ;
352c4                 | '         break;
352c4     14 00 90 FD | 	jmp	#LR__5149
352c8                 | LR__5139
352c8                 | LR__5140
352c8                 | LR__5141
352c8                 | LR__5142
352c8                 | LR__5143
352c8     0A 02 06 F6 | 	mov	_var02, #10
352cc                 | '         r =  10 ;
352cc                 | '         break;
352cc     0C 00 90 FD | 	jmp	#LR__5149
352d0                 | LR__5144
352d0     0B 02 06 F6 | 	mov	_var02, #11
352d4                 | '         r =  11 ;
352d4                 | '         break;
352d4     04 00 90 FD | 	jmp	#LR__5149
352d8                 | LR__5145
352d8                 | LR__5146
352d8                 | LR__5147
352d8                 | LR__5148
352d8     0C 02 06 F6 | 	mov	_var02, #12
352dc                 | '         r =  12 ;
352dc                 | '         break;
352dc                 | LR__5149
352dc                 | '     }
352dc                 | '     return _seterror(r);
352dc     00 02 4E F2 | 	cmps	_var02, #0 wz
352e0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
352e4     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
352e8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
352ec     01 FA 65 56 |  if_ne	neg	result1, #1
352f0     00 FA 05 A6 |  if_e	mov	result1, #0
352f4                 | _fatfs_cc__set_dos_error_1041_ret
352f4     2D 00 64 FD | 	ret
352f8                 | 
352f8                 | _fatfs_cc_v_creat
352f8     04 4A 05 F6 | 	mov	COUNT_, #4
352fc     A8 00 A0 FD | 	call	#pushregs_
35300     09 27 02 F6 | 	mov	local01, arg01
35304     0A 29 02 F6 | 	mov	local02, arg02
35308     03 00 00 FF 
3530c     3C 12 06 F6 | 	mov	arg01, ##1596
35310                 | '     return _gc_alloc(size);
35310     10 14 06 F6 | 	mov	arg02, #16
35314     28 5E BF FD | 	call	#__system___gc_doalloc
35318     FD 2A 0A F6 | 	mov	local03, result1 wz
3531c                 | '       return _seterror( 7 );
3531c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35320     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
35324     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35328     01 FA 65 A6 |  if_e	neg	result1, #1
3532c     58 00 90 AD |  if_e	jmp	#LR__5151
35330     15 13 02 F6 | 	mov	arg01, local03
35334     00 14 06 F6 | 	mov	arg02, #0
35338     03 00 00 FF 
3533c     3C 16 06 F6 | 	mov	arg03, ##1596
35340     98 00 A0 FD | 	call	#\builtin_bytefill_
35344     02 00 00 FF 
35348     14 2A 06 F1 | 	add	local03, ##1044
3534c     15 13 02 F6 | 	mov	arg01, local03
35350     02 00 00 FF 
35354     14 2A 86 F1 | 	sub	local03, ##1044
35358     14 15 02 F6 | 	mov	arg02, local02
3535c     07 16 06 F6 | 	mov	arg03, #7
35360     B4 CC BF FD | 	call	#_fatfs_cc_f_open
35364     FD 2C 0A F6 | 	mov	local04, result1 wz
35368     14 00 90 AD |  if_e	jmp	#LR__5150
3536c     15 13 02 F6 | 	mov	arg01, local03
35370                 | '     return _gc_free(ptr);
35370     D8 5E BF FD | 	call	#__system___gc_free
35374                 | '     free(f);
35374                 | '     return _set_dos_error(r);
35374     16 13 02 F6 | 	mov	arg01, local04
35378     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1041
3537c     08 00 90 FD | 	jmp	#LR__5151
35380                 | LR__5150
35380     13 2B 62 FC | 	wrlong	local03, local01
35384                 | '   }
35384                 | '   fil->vfsdata = f;
35384                 | '   return 0;
35384     00 FA 05 F6 | 	mov	result1, #0
35388                 | LR__5151
35388     A7 F0 03 F6 | 	mov	ptra, fp
3538c     B2 00 A0 FD | 	call	#popregs_
35390                 | _fatfs_cc_v_creat_ret
35390     2D 00 64 FD | 	ret
35394                 | 
35394                 | _fatfs_cc_v_close
35394     02 4A 05 F6 | 	mov	COUNT_, #2
35398     A8 00 A0 FD | 	call	#pushregs_
3539c     09 27 02 FB | 	rdlong	local01, arg01
353a0     02 00 00 FF 
353a4     14 26 06 F1 | 	add	local01, ##1044
353a8     13 13 02 F6 | 	mov	arg01, local01
353ac     02 00 00 FF 
353b0     14 26 86 F1 | 	sub	local01, ##1044
353b4     DC E3 BF FD | 	call	#_fatfs_cc_f_close
353b8     FD 28 02 F6 | 	mov	local02, result1
353bc     13 13 02 F6 | 	mov	arg01, local01
353c0                 | '     return _gc_free(ptr);
353c0     88 5E BF FD | 	call	#__system___gc_free
353c4                 | '     FAT_FIL *f = fil->vfsdata;
353c4                 | '     r=f_close(&f->fil);
353c4                 | '     free(f);
353c4                 | '     return _set_dos_error(r);
353c4     14 13 02 F6 | 	mov	arg01, local02
353c8     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1041
353cc     A7 F0 03 F6 | 	mov	ptra, fp
353d0     B2 00 A0 FD | 	call	#popregs_
353d4                 | _fatfs_cc_v_close_ret
353d4     2D 00 64 FD | 	ret
353d8                 | 
353d8                 | _fatfs_cc_v_opendir
353d8     04 4A 05 F6 | 	mov	COUNT_, #4
353dc     A8 00 A0 FD | 	call	#pushregs_
353e0     09 27 02 F6 | 	mov	local01, arg01
353e4     0A 29 02 F6 | 	mov	local02, arg02
353e8     30 12 06 F6 | 	mov	arg01, #48
353ec                 | '     return _gc_alloc(size);
353ec     10 14 06 F6 | 	mov	arg02, #16
353f0     4C 5D BF FD | 	call	#__system___gc_doalloc
353f4     FD 2A 0A F6 | 	mov	local03, result1 wz
353f8                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
353f8                 | '       return _seterror( 7 );
353f8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
353fc     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
35400     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35404     01 FA 65 A6 |  if_e	neg	result1, #1
35408     34 00 90 AD |  if_e	jmp	#LR__5161
3540c     14 15 02 F6 | 	mov	arg02, local02
35410     15 13 02 F6 | 	mov	arg01, local03
35414     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
35418     FD 2C 0A F6 | 	mov	local04, result1 wz
3541c     14 00 90 AD |  if_e	jmp	#LR__5160
35420     15 13 02 F6 | 	mov	arg01, local03
35424                 | '     return _gc_free(ptr);
35424     24 5E BF FD | 	call	#__system___gc_free
35428                 | '         free(f);
35428                 | '         return _set_dos_error(r);
35428     16 13 02 F6 | 	mov	arg01, local04
3542c     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1041
35430     0C 00 90 FD | 	jmp	#LR__5161
35434                 | LR__5160
35434     04 26 06 F1 | 	add	local01, #4
35438     13 2B 62 FC | 	wrlong	local03, local01
3543c                 | '     }
3543c                 | '     dir->vfsdata = f;
3543c                 | '     return 0;
3543c     00 FA 05 F6 | 	mov	result1, #0
35440                 | LR__5161
35440     A7 F0 03 F6 | 	mov	ptra, fp
35444     B2 00 A0 FD | 	call	#popregs_
35448                 | _fatfs_cc_v_opendir_ret
35448     2D 00 64 FD | 	ret
3544c                 | 
3544c                 | _fatfs_cc_v_closedir
3544c     02 4A 05 F6 | 	mov	COUNT_, #2
35450     A8 00 A0 FD | 	call	#pushregs_
35454     04 12 06 F1 | 	add	arg01, #4
35458     09 27 02 FB | 	rdlong	local01, arg01
3545c     13 13 02 F6 | 	mov	arg01, local01
35460     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
35464     FD 28 02 F6 | 	mov	local02, result1
35468     13 13 02 F6 | 	mov	arg01, local01
3546c                 | '     return _gc_free(ptr);
3546c     DC 5D BF FD | 	call	#__system___gc_free
35470     00 28 0E F2 | 	cmp	local02, #0 wz
35474     14 13 02 56 |  if_ne	mov	arg01, local02
35478     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1041
3547c                 | '     return r;
3547c     14 FB 01 F6 | 	mov	result1, local02
35480     A7 F0 03 F6 | 	mov	ptra, fp
35484     B2 00 A0 FD | 	call	#popregs_
35488                 | _fatfs_cc_v_closedir_ret
35488     2D 00 64 FD | 	ret
3548c                 | 
3548c                 | _fatfs_cc_v_readdir
3548c     01 4A 05 F6 | 	mov	COUNT_, #1
35490     A8 00 A0 FD | 	call	#pushregs_
35494     2C F1 07 F1 | 	add	ptra, #300
35498     04 4E 05 F1 | 	add	fp, #4
3549c     A7 12 62 FC | 	wrlong	arg01, fp
354a0     04 4E 05 F1 | 	add	fp, #4
354a4     A7 14 62 FC | 	wrlong	arg02, fp
354a8     04 4E 85 F1 | 	sub	fp, #4
354ac     A7 16 02 FB | 	rdlong	arg03, fp
354b0     04 16 06 F1 | 	add	arg03, #4
354b4     0B 13 02 FB | 	rdlong	arg01, arg03
354b8     08 4E 05 F1 | 	add	fp, #8
354bc     A7 14 02 F6 | 	mov	arg02, fp
354c0     0C 4E 85 F1 | 	sub	fp, #12
354c4     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
354c8     28 4F 05 F1 | 	add	fp, #296
354cc     A7 FA 61 FC | 	wrlong	result1, fp
354d0     28 4F 85 F1 | 	sub	fp, #296
354d4     00 FA 0D F2 | 	cmp	result1, #0 wz
354d8     14 00 90 AD |  if_e	jmp	#LR__5170
354dc                 | '         return _set_dos_error(r);
354dc     28 4F 05 F1 | 	add	fp, #296
354e0     A7 12 02 FB | 	rdlong	arg01, fp
354e4     28 4F 85 F1 | 	sub	fp, #296
354e8     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1041
354ec     C4 00 90 FD | 	jmp	#LR__5173
354f0                 | LR__5170
354f0     28 4E 05 F1 | 	add	fp, #40
354f4     A7 16 CA FA | 	rdbyte	arg03, fp wz
354f8     28 4E 85 F1 | 	sub	fp, #40
354fc                 | '         return -1;
354fc     01 FA 65 A6 |  if_e	neg	result1, #1
35500     B0 00 90 AD |  if_e	jmp	#LR__5173
35504     08 4E 05 F1 | 	add	fp, #8
35508     A7 12 02 FB | 	rdlong	arg01, fp
3550c     20 4E 05 F1 | 	add	fp, #32
35510     A7 14 02 F6 | 	mov	arg02, fp
35514     28 4E 85 F1 | 	sub	fp, #40
35518     3F 16 06 F6 | 	mov	arg03, #63
3551c     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
35520     08 4E 05 F1 | 	add	fp, #8
35524     A7 16 02 FB | 	rdlong	arg03, fp
35528     3F 16 06 F1 | 	add	arg03, #63
3552c     0B 01 48 FC | 	wrbyte	#0, arg03
35530     0C 4E 05 F1 | 	add	fp, #12
35534     A7 16 C2 FA | 	rdbyte	arg03, fp
35538     14 4E 85 F1 | 	sub	fp, #20
3553c     10 16 CE F7 | 	test	arg03, #16 wz
35540     18 00 90 AD |  if_e	jmp	#LR__5171
35544     08 4E 05 F1 | 	add	fp, #8
35548     A7 16 02 FB | 	rdlong	arg03, fp
3554c     08 4E 85 F1 | 	sub	fp, #8
35550     50 16 06 F1 | 	add	arg03, #80
35554     0B 03 48 FC | 	wrbyte	#1, arg03
35558     14 00 90 FD | 	jmp	#LR__5172
3555c                 | LR__5171
3555c     08 4E 05 F1 | 	add	fp, #8
35560     A7 16 02 FB | 	rdlong	arg03, fp
35564     08 4E 85 F1 | 	sub	fp, #8
35568     50 16 06 F1 | 	add	arg03, #80
3556c     0B 01 48 FC | 	wrbyte	#0, arg03
35570                 | LR__5172
35570     08 4E 05 F1 | 	add	fp, #8
35574     A7 16 02 FB | 	rdlong	arg03, fp
35578     04 4E 05 F1 | 	add	fp, #4
3557c     A7 14 02 FB | 	rdlong	arg02, fp
35580     48 16 06 F1 | 	add	arg03, #72
35584     0B 15 62 FC | 	wrlong	arg02, arg03
35588     04 4E 85 F1 | 	sub	fp, #4
3558c     A7 26 02 FB | 	rdlong	local01, fp
35590     08 4E 05 F1 | 	add	fp, #8
35594     A7 12 E2 FA | 	rdword	arg01, fp
35598     02 4E 05 F1 | 	add	fp, #2
3559c     A7 14 E2 FA | 	rdword	arg02, fp
355a0     12 4E 85 F1 | 	sub	fp, #18
355a4     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_1039
355a8     4C 26 06 F1 | 	add	local01, #76
355ac     13 FB 61 FC | 	wrlong	result1, local01
355b0                 | '         ent->d_type =  (0) ;
355b0                 | '     }
355b0                 | '     ent->d_size = finfo.fsize;
355b0                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
355b0                 | '     return 0;
355b0     00 FA 05 F6 | 	mov	result1, #0
355b4                 | LR__5173
355b4     A7 F0 03 F6 | 	mov	ptra, fp
355b8     B2 00 A0 FD | 	call	#popregs_
355bc                 | _fatfs_cc_v_readdir_ret
355bc     2D 00 64 FD | 	ret
355c0                 | 
355c0                 | _fatfs_cc_v_stat
355c0     03 4A 05 F6 | 	mov	COUNT_, #3
355c4     A8 00 A0 FD | 	call	#pushregs_
355c8     30 F1 07 F1 | 	add	ptra, #304
355cc     04 4E 05 F1 | 	add	fp, #4
355d0     A7 12 62 FC | 	wrlong	arg01, fp
355d4     04 4E 05 F1 | 	add	fp, #4
355d8     A7 14 62 FC | 	wrlong	arg02, fp
355dc     08 4E 85 F1 | 	sub	fp, #8
355e0     0A 13 02 F6 | 	mov	arg01, arg02
355e4     00 14 06 F6 | 	mov	arg02, #0
355e8     30 16 06 F6 | 	mov	arg03, #48
355ec     98 00 A0 FD | 	call	#\builtin_bytefill_
355f0     04 4E 05 F1 | 	add	fp, #4
355f4     A7 FA 01 FB | 	rdlong	result1, fp
355f8     04 4E 85 F1 | 	sub	fp, #4
355fc     FD FA C9 FA | 	rdbyte	result1, result1 wz
35600     2C 00 90 AD |  if_e	jmp	#LR__5180
35604     04 4E 05 F1 | 	add	fp, #4
35608     A7 FA 01 FB | 	rdlong	result1, fp
3560c     04 4E 85 F1 | 	sub	fp, #4
35610     FD FA C1 FA | 	rdbyte	result1, result1
35614     2E FA 0D F2 | 	cmp	result1, #46 wz
35618     04 4E 05 A1 |  if_e	add	fp, #4
3561c     A7 26 02 AB |  if_e	rdlong	local01, fp
35620     04 4E 85 A1 |  if_e	sub	fp, #4
35624     01 26 06 A1 |  if_e	add	local01, #1
35628     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
3562c     18 00 90 5D |  if_ne	jmp	#LR__5181
35630                 | LR__5180
35630     18 4E 05 F1 | 	add	fp, #24
35634     A7 20 48 FC | 	wrbyte	#16, fp
35638     0C 4E 85 F1 | 	sub	fp, #12
3563c     A7 00 68 FC | 	wrlong	#0, fp
35640     0C 4E 85 F1 | 	sub	fp, #12
35644     24 00 90 FD | 	jmp	#LR__5182
35648                 | LR__5181
35648     04 4E 05 F1 | 	add	fp, #4
3564c     A7 12 02 FB | 	rdlong	arg01, fp
35650     0C 4E 05 F1 | 	add	fp, #12
35654     A7 14 02 F6 | 	mov	arg02, fp
35658     10 4E 85 F1 | 	sub	fp, #16
3565c     AC EB BF FD | 	call	#_fatfs_cc_f_stat
35660     0C 4E 05 F1 | 	add	fp, #12
35664     A7 FA 61 FC | 	wrlong	result1, fp
35668     0C 4E 85 F1 | 	sub	fp, #12
3566c                 | LR__5182
3566c     0C 4E 05 F1 | 	add	fp, #12
35670     A7 28 0A FB | 	rdlong	local02, fp wz
35674     0C 4E 85 F1 | 	sub	fp, #12
35678     14 00 90 AD |  if_e	jmp	#LR__5183
3567c                 | '         return _set_dos_error(r);
3567c     0C 4E 05 F1 | 	add	fp, #12
35680     A7 12 02 FB | 	rdlong	arg01, fp
35684     0C 4E 85 F1 | 	sub	fp, #12
35688     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1041
3568c     14 01 90 FD | 	jmp	#LR__5184
35690                 | LR__5183
35690     2C 4F 05 F1 | 	add	fp, #300
35694     A7 48 6A FC | 	wrlong	#292, fp
35698     14 4F 85 F1 | 	sub	fp, #276
3569c     A7 2A C2 FA | 	rdbyte	local03, fp
356a0     18 4E 85 F1 | 	sub	fp, #24
356a4     01 2A CE F7 | 	test	local03, #1 wz
356a8     2C 4F 05 A1 |  if_e	add	fp, #300
356ac     A7 2A 02 AB |  if_e	rdlong	local03, fp
356b0     92 2A 46 A5 |  if_e	or	local03, #146
356b4     A7 2A 62 AC |  if_e	wrlong	local03, fp
356b8     2C 4F 85 A1 |  if_e	sub	fp, #300
356bc     18 4E 05 F1 | 	add	fp, #24
356c0     A7 2A C2 FA | 	rdbyte	local03, fp
356c4     18 4E 85 F1 | 	sub	fp, #24
356c8     10 2A CE F7 | 	test	local03, #16 wz
356cc     2C 4F 05 51 |  if_ne	add	fp, #300
356d0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
356d4     08 00 00 5F 
356d8     49 2A 46 55 |  if_ne	or	local03, ##4169
356dc     A7 2A 62 5C |  if_ne	wrlong	local03, fp
356e0     2C 4F 85 51 |  if_ne	sub	fp, #300
356e4     08 4E 05 F1 | 	add	fp, #8
356e8     A7 2A 02 FB | 	rdlong	local03, fp
356ec     24 4F 05 F1 | 	add	fp, #292
356f0     A7 28 02 FB | 	rdlong	local02, fp
356f4     08 2A 06 F1 | 	add	local03, #8
356f8     15 29 62 FC | 	wrlong	local02, local03
356fc     24 4F 85 F1 | 	sub	fp, #292
35700     A7 2A 02 FB | 	rdlong	local03, fp
35704     0C 2A 06 F1 | 	add	local03, #12
35708     15 03 68 FC | 	wrlong	#1, local03
3570c     A7 2A 02 FB | 	rdlong	local03, fp
35710     08 4E 05 F1 | 	add	fp, #8
35714     A7 28 02 FB | 	rdlong	local02, fp
35718     18 2A 06 F1 | 	add	local03, #24
3571c     15 29 62 FC | 	wrlong	local02, local03
35720     08 4E 85 F1 | 	sub	fp, #8
35724     A7 2A 02 FB | 	rdlong	local03, fp
35728     1C 2A 06 F1 | 	add	local03, #28
3572c     01 00 80 FF 
35730     15 01 68 FC | 	wrlong	##512, local03
35734     A7 28 02 FB | 	rdlong	local02, fp
35738     14 2B 02 F6 | 	mov	local03, local02
3573c     18 28 06 F1 | 	add	local02, #24
35740     14 29 02 FB | 	rdlong	local02, local02
35744     FF 29 06 F1 | 	add	local02, #511
35748     14 29 52 F6 | 	abs	local02, local02 wc
3574c     09 28 46 F0 | 	shr	local02, #9
35750     14 29 82 F6 | 	negc	local02, local02
35754     20 2A 06 F1 | 	add	local03, #32
35758     15 29 62 FC | 	wrlong	local02, local03
3575c     A7 28 02 FB | 	rdlong	local02, fp
35760     14 2B 02 F6 | 	mov	local03, local02
35764     14 27 02 F6 | 	mov	local01, local02
35768     0C 4E 05 F1 | 	add	fp, #12
3576c     A7 12 E2 FA | 	rdword	arg01, fp
35770     02 4E 05 F1 | 	add	fp, #2
35774     A7 14 E2 FA | 	rdword	arg02, fp
35778     16 4E 85 F1 | 	sub	fp, #22
3577c     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_1039
35780     2C 26 06 F1 | 	add	local01, #44
35784     13 FB 61 FC | 	wrlong	result1, local01
35788     28 28 06 F1 | 	add	local02, #40
3578c     14 FB 61 FC | 	wrlong	result1, local02
35790     24 2A 06 F1 | 	add	local03, #36
35794     15 FB 61 FC | 	wrlong	result1, local03
35798                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
35798                 | '     }
35798                 | '     buf->st_mode = mode;
35798                 | '     buf->st_nlink = 1;
35798                 | '     buf->st_size = finfo.fsize;
35798                 | '     buf->st_blksize = 512;
35798                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
35798                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
35798                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35798                 | '     return r;
35798     0C 4E 05 F1 | 	add	fp, #12
3579c     A7 FA 01 FB | 	rdlong	result1, fp
357a0     0C 4E 85 F1 | 	sub	fp, #12
357a4                 | LR__5184
357a4     A7 F0 03 F6 | 	mov	ptra, fp
357a8     B2 00 A0 FD | 	call	#popregs_
357ac                 | _fatfs_cc_v_stat_ret
357ac     2D 00 64 FD | 	ret
357b0                 | 
357b0                 | _fatfs_cc_v_read
357b0     00 4A 05 F6 | 	mov	COUNT_, #0
357b4     A8 00 A0 FD | 	call	#pushregs_
357b8     1C F0 07 F1 | 	add	ptra, #28
357bc     04 4E 05 F1 | 	add	fp, #4
357c0     A7 12 62 FC | 	wrlong	arg01, fp
357c4     04 4E 05 F1 | 	add	fp, #4
357c8     A7 14 62 FC | 	wrlong	arg02, fp
357cc     04 4E 05 F1 | 	add	fp, #4
357d0     A7 16 62 FC | 	wrlong	arg03, fp
357d4     08 4E 85 F1 | 	sub	fp, #8
357d8     A7 12 02 FB | 	rdlong	arg01, fp
357dc     09 13 0A FB | 	rdlong	arg01, arg01 wz
357e0     0C 4E 05 F1 | 	add	fp, #12
357e4     A7 12 62 FC | 	wrlong	arg01, fp
357e8     10 4E 85 F1 | 	sub	fp, #16
357ec                 | '         return _seterror( 5 );
357ec     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
357f0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
357f4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
357f8     01 FA 65 A6 |  if_e	neg	result1, #1
357fc     B8 00 90 AD |  if_e	jmp	#LR__5192
35800     10 4E 05 F1 | 	add	fp, #16
35804     A7 12 02 FB | 	rdlong	arg01, fp
35808     02 00 00 FF 
3580c     14 12 06 F1 | 	add	arg01, ##1044
35810     08 4E 85 F1 | 	sub	fp, #8
35814     A7 14 02 FB | 	rdlong	arg02, fp
35818     04 4E 05 F1 | 	add	fp, #4
3581c     A7 16 02 FB | 	rdlong	arg03, fp
35820     0C 4E 05 F1 | 	add	fp, #12
35824     A7 18 02 F6 | 	mov	arg04, fp
35828     18 4E 85 F1 | 	sub	fp, #24
3582c     C4 CE BF FD | 	call	#_fatfs_cc_f_read
35830     14 4E 05 F1 | 	add	fp, #20
35834     A7 FA 61 FC | 	wrlong	result1, fp
35838     14 4E 85 F1 | 	sub	fp, #20
3583c     00 FA 0D F2 | 	cmp	result1, #0 wz
35840     34 00 90 AD |  if_e	jmp	#LR__5190
35844     04 4E 05 F1 | 	add	fp, #4
35848     A7 18 02 FB | 	rdlong	arg04, fp
3584c     0C 17 02 F6 | 	mov	arg03, arg04
35850     08 18 06 F1 | 	add	arg04, #8
35854     0C 19 02 FB | 	rdlong	arg04, arg04
35858     20 18 46 F5 | 	or	arg04, #32
3585c     08 16 06 F1 | 	add	arg03, #8
35860     0B 19 62 FC | 	wrlong	arg04, arg03
35864                 | '         fil->state |=  (0x20) ;
35864                 | '         return _set_dos_error(r);
35864     10 4E 05 F1 | 	add	fp, #16
35868     A7 12 02 FB | 	rdlong	arg01, fp
3586c     14 4E 85 F1 | 	sub	fp, #20
35870     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1041
35874     40 00 90 FD | 	jmp	#LR__5192
35878                 | LR__5190
35878     18 4E 05 F1 | 	add	fp, #24
3587c     A7 FA 09 FB | 	rdlong	result1, fp wz
35880     18 4E 85 F1 | 	sub	fp, #24
35884     24 00 90 5D |  if_ne	jmp	#LR__5191
35888     04 4E 05 F1 | 	add	fp, #4
3588c     A7 FA 01 FB | 	rdlong	result1, fp
35890     FD 18 02 F6 | 	mov	arg04, result1
35894     04 4E 85 F1 | 	sub	fp, #4
35898     08 FA 05 F1 | 	add	result1, #8
3589c     FD FA 01 FB | 	rdlong	result1, result1
358a0     10 FA 45 F5 | 	or	result1, #16
358a4     08 18 06 F1 | 	add	arg04, #8
358a8     0C FB 61 FC | 	wrlong	result1, arg04
358ac                 | LR__5191
358ac                 | '         fil->state |=  (0x10) ;
358ac                 | '     }
358ac                 | '     return x;
358ac     18 4E 05 F1 | 	add	fp, #24
358b0     A7 FA 01 FB | 	rdlong	result1, fp
358b4     18 4E 85 F1 | 	sub	fp, #24
358b8                 | LR__5192
358b8     A7 F0 03 F6 | 	mov	ptra, fp
358bc     B2 00 A0 FD | 	call	#popregs_
358c0                 | _fatfs_cc_v_read_ret
358c0     2D 00 64 FD | 	ret
358c4                 | 
358c4                 | _fatfs_cc_v_write
358c4     00 4A 05 F6 | 	mov	COUNT_, #0
358c8     A8 00 A0 FD | 	call	#pushregs_
358cc     1C F0 07 F1 | 	add	ptra, #28
358d0     04 4E 05 F1 | 	add	fp, #4
358d4     A7 12 62 FC | 	wrlong	arg01, fp
358d8     04 4E 05 F1 | 	add	fp, #4
358dc     A7 14 62 FC | 	wrlong	arg02, fp
358e0     04 4E 05 F1 | 	add	fp, #4
358e4     A7 16 62 FC | 	wrlong	arg03, fp
358e8     08 4E 85 F1 | 	sub	fp, #8
358ec     A7 12 02 FB | 	rdlong	arg01, fp
358f0     09 13 0A FB | 	rdlong	arg01, arg01 wz
358f4     0C 4E 05 F1 | 	add	fp, #12
358f8     A7 12 62 FC | 	wrlong	arg01, fp
358fc     10 4E 85 F1 | 	sub	fp, #16
35900                 | '         return _seterror( 5 );
35900     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35904     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
35908     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
3590c     01 FA 65 A6 |  if_e	neg	result1, #1
35910     84 00 90 AD |  if_e	jmp	#LR__5201
35914     10 4E 05 F1 | 	add	fp, #16
35918     A7 12 02 FB | 	rdlong	arg01, fp
3591c     02 00 00 FF 
35920     14 12 06 F1 | 	add	arg01, ##1044
35924     08 4E 85 F1 | 	sub	fp, #8
35928     A7 14 02 FB | 	rdlong	arg02, fp
3592c     04 4E 05 F1 | 	add	fp, #4
35930     A7 16 02 FB | 	rdlong	arg03, fp
35934     0C 4E 05 F1 | 	add	fp, #12
35938     A7 18 02 F6 | 	mov	arg04, fp
3593c     18 4E 85 F1 | 	sub	fp, #24
35940     4C D4 BF FD | 	call	#_fatfs_cc_f_write
35944     14 4E 05 F1 | 	add	fp, #20
35948     A7 FA 61 FC | 	wrlong	result1, fp
3594c     14 4E 85 F1 | 	sub	fp, #20
35950     00 FA 0D F2 | 	cmp	result1, #0 wz
35954     34 00 90 AD |  if_e	jmp	#LR__5200
35958     04 4E 05 F1 | 	add	fp, #4
3595c     A7 18 02 FB | 	rdlong	arg04, fp
35960     0C 17 02 F6 | 	mov	arg03, arg04
35964     08 18 06 F1 | 	add	arg04, #8
35968     0C 19 02 FB | 	rdlong	arg04, arg04
3596c     20 18 46 F5 | 	or	arg04, #32
35970     08 16 06 F1 | 	add	arg03, #8
35974     0B 19 62 FC | 	wrlong	arg04, arg03
35978                 | '         fil->state |=  (0x20) ;
35978                 | '         return _set_dos_error(r);
35978     10 4E 05 F1 | 	add	fp, #16
3597c     A7 12 02 FB | 	rdlong	arg01, fp
35980     14 4E 85 F1 | 	sub	fp, #20
35984     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1041
35988     0C 00 90 FD | 	jmp	#LR__5201
3598c                 | LR__5200
3598c                 | '     }
3598c                 | '     return x;
3598c     18 4E 05 F1 | 	add	fp, #24
35990     A7 FA 01 FB | 	rdlong	result1, fp
35994     18 4E 85 F1 | 	sub	fp, #24
35998                 | LR__5201
35998     A7 F0 03 F6 | 	mov	ptra, fp
3599c     B2 00 A0 FD | 	call	#popregs_
359a0                 | _fatfs_cc_v_write_ret
359a0     2D 00 64 FD | 	ret
359a4                 | 
359a4                 | _fatfs_cc_v_lseek
359a4     04 4A 05 F6 | 	mov	COUNT_, #4
359a8     A8 00 A0 FD | 	call	#pushregs_
359ac     0A 27 02 F6 | 	mov	local01, arg02
359b0     0B 29 02 F6 | 	mov	local02, arg03
359b4     09 2B 02 FB | 	rdlong	local03, arg01
359b8     02 00 00 FF 
359bc     14 2A 0E F1 | 	add	local03, ##1044 wz
359c0                 | '         return _seterror( 5 );
359c0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
359c4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
359c8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
359cc     01 FA 65 A6 |  if_e	neg	result1, #1
359d0     4C 00 90 AD |  if_e	jmp	#LR__5212
359d4     00 28 0E F2 | 	cmp	local02, #0 wz
359d8     24 00 90 AD |  if_e	jmp	#LR__5210
359dc     01 28 0E F2 | 	cmp	local02, #1 wz
359e0     14 2A 06 A1 |  if_e	add	local03, #20
359e4     15 2D 02 AB |  if_e	rdlong	local04, local03
359e8     14 2A 86 A1 |  if_e	sub	local03, #20
359ec     16 27 02 A1 |  if_e	add	local01, local04
359f0     0C 2A 06 51 |  if_ne	add	local03, #12
359f4     15 2D 02 5B |  if_ne	rdlong	local04, local03
359f8     0C 2A 86 51 |  if_ne	sub	local03, #12
359fc     16 27 02 51 |  if_ne	add	local01, local04
35a00                 | LR__5210
35a00     13 15 02 F6 | 	mov	arg02, local01
35a04     15 13 02 F6 | 	mov	arg01, local03
35a08     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
35a0c     FD 12 0A F6 | 	mov	arg01, result1 wz
35a10     08 00 90 AD |  if_e	jmp	#LR__5211
35a14                 | '         return _set_dos_error(result);
35a14     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1041
35a18     04 00 90 FD | 	jmp	#LR__5212
35a1c                 | LR__5211
35a1c                 | '     }
35a1c                 | '     return offset;
35a1c     13 FB 01 F6 | 	mov	result1, local01
35a20                 | LR__5212
35a20     A7 F0 03 F6 | 	mov	ptra, fp
35a24     B2 00 A0 FD | 	call	#popregs_
35a28                 | _fatfs_cc_v_lseek_ret
35a28     2D 00 64 FD | 	ret
35a2c                 | 
35a2c                 | _fatfs_cc_v_ioctl
35a2c                 | ' {
35a2c                 | '     return _seterror( 10 );
35a2c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
35a30     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
35a34     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
35a38     01 FA 65 F6 | 	neg	result1, #1
35a3c                 | _fatfs_cc_v_ioctl_ret
35a3c     2D 00 64 FD | 	ret
35a40                 | 
35a40                 | _fatfs_cc_v_mkdir
35a40     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
35a44     FD 12 02 F6 | 	mov	arg01, result1
35a48                 | ' 
35a48                 | '     r = f_mkdir(name);
35a48                 | '     return _set_dos_error(r);
35a48     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1041
35a4c                 | _fatfs_cc_v_mkdir_ret
35a4c     2D 00 64 FD | 	ret
35a50                 | 
35a50                 | _fatfs_cc_v_remove
35a50     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
35a54     FD 12 02 F6 | 	mov	arg01, result1
35a58                 | ' 
35a58                 | '     r = f_unlink(name);
35a58                 | '     return _set_dos_error(r);
35a58     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1041
35a5c                 | _fatfs_cc_v_remove_ret
35a5c     2D 00 64 FD | 	ret
35a60                 | 
35a60                 | _fatfs_cc_v_rmdir
35a60     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
35a64     FD 12 02 F6 | 	mov	arg01, result1
35a68                 | ' 
35a68                 | '     r = f_unlink(name);
35a68                 | '     return _set_dos_error(r);
35a68     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1041
35a6c                 | _fatfs_cc_v_rmdir_ret
35a6c     2D 00 64 FD | 	ret
35a70                 | 
35a70                 | _fatfs_cc_v_rename
35a70     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
35a74     FD 12 02 F6 | 	mov	arg01, result1
35a78                 | '     return _set_dos_error(r);
35a78     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1041
35a7c                 | _fatfs_cc_v_rename_ret
35a7c     2D 00 64 FD | 	ret
35a80                 | 
35a80                 | _fatfs_cc_v_open
35a80     07 4A 05 F6 | 	mov	COUNT_, #7
35a84     A8 00 A0 FD | 	call	#pushregs_
35a88     09 27 02 F6 | 	mov	local01, arg01
35a8c     0A 29 02 F6 | 	mov	local02, arg02
35a90     0B 2B 02 F6 | 	mov	local03, arg03
35a94     03 00 00 FF 
35a98     3C 12 06 F6 | 	mov	arg01, ##1596
35a9c                 | '     return _gc_alloc(size);
35a9c     10 14 06 F6 | 	mov	arg02, #16
35aa0     9C 56 BF FD | 	call	#__system___gc_doalloc
35aa4     FD 2C 0A F6 | 	mov	local04, result1 wz
35aa8                 | '       return _seterror( 7 );
35aa8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35aac     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
35ab0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35ab4     01 FA 65 A6 |  if_e	neg	result1, #1
35ab8     98 00 90 AD |  if_e	jmp	#LR__5226
35abc     16 13 02 F6 | 	mov	arg01, local04
35ac0     00 14 06 F6 | 	mov	arg02, #0
35ac4     03 00 00 FF 
35ac8     3C 16 06 F6 | 	mov	arg03, ##1596
35acc     98 00 A0 FD | 	call	#\builtin_bytefill_
35ad0                 | '   switch (flags & 3) {
35ad0     15 2F 02 F6 | 	mov	local05, local03
35ad4     03 2E 0E F5 | 	and	local05, #3 wz
35ad8     0C 00 90 AD |  if_e	jmp	#LR__5220
35adc     01 2E 0E F2 | 	cmp	local05, #1 wz
35ae0     0C 00 90 AD |  if_e	jmp	#LR__5221
35ae4     10 00 90 FD | 	jmp	#LR__5222
35ae8                 | LR__5220
35ae8     01 30 06 F6 | 	mov	local06, #1
35aec                 | '       fs_flags =  0x01 ;
35aec                 | '       break;
35aec     0C 00 90 FD | 	jmp	#LR__5223
35af0                 | LR__5221
35af0     02 30 06 F6 | 	mov	local06, #2
35af4                 | '       fs_flags =  0x02 ;
35af4                 | '       break;
35af4     04 00 90 FD | 	jmp	#LR__5223
35af8                 | LR__5222
35af8     03 30 06 F6 | 	mov	local06, #3
35afc                 | '       fs_flags =  0x01  |  0x02 ;
35afc                 | '       break;
35afc                 | LR__5223
35afc     08 2A CE F7 | 	test	local03, #8 wz
35b00     18 30 46 55 |  if_ne	or	local06, #24
35b04     08 00 90 5D |  if_ne	jmp	#LR__5224
35b08     20 2A CE F7 | 	test	local03, #32 wz
35b0c     30 30 46 55 |  if_ne	or	local06, #48
35b10                 | LR__5224
35b10     02 00 00 FF 
35b14     14 2C 06 F1 | 	add	local04, ##1044
35b18     16 13 02 F6 | 	mov	arg01, local04
35b1c     02 00 00 FF 
35b20     14 2C 86 F1 | 	sub	local04, ##1044
35b24     14 15 02 F6 | 	mov	arg02, local02
35b28     18 17 02 F6 | 	mov	arg03, local06
35b2c     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
35b30     FD 32 0A F6 | 	mov	local07, result1 wz
35b34     14 00 90 AD |  if_e	jmp	#LR__5225
35b38     16 13 02 F6 | 	mov	arg01, local04
35b3c                 | '     return _gc_free(ptr);
35b3c     0C 57 BF FD | 	call	#__system___gc_free
35b40                 | '     free(f);
35b40                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35b40                 | '     return _set_dos_error(r);
35b40     19 13 02 F6 | 	mov	arg01, local07
35b44     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1041
35b48     08 00 90 FD | 	jmp	#LR__5226
35b4c                 | LR__5225
35b4c     13 2D 62 FC | 	wrlong	local04, local01
35b50                 | '   }
35b50                 | '   fil->vfsdata = f;
35b50                 | '   return 0;
35b50     00 FA 05 F6 | 	mov	result1, #0
35b54                 | LR__5226
35b54     A7 F0 03 F6 | 	mov	ptra, fp
35b58     B2 00 A0 FD | 	call	#popregs_
35b5c                 | _fatfs_cc_v_open_ret
35b5c     2D 00 64 FD | 	ret
35b60                 | 
35b60                 | _fatfs_cc_v_flush
35b60     09 13 02 FB | 	rdlong	arg01, arg01
35b64     02 00 00 FF 
35b68     14 12 0E F1 | 	add	arg01, ##1044 wz
35b6c                 | '         return _seterror( 5 );
35b6c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35b70     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
35b74     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35b78     01 FA 65 A6 |  if_e	neg	result1, #1
35b7c     0C 00 90 AD |  if_e	jmp	#LR__5230
35b80     00 DA BF FD | 	call	#_fatfs_cc_f_sync
35b84     FD 12 02 F6 | 	mov	arg01, result1
35b88                 | '     }
35b88                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35b88                 | '     result = f_sync(f);
35b88                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35b88                 | '     return _set_dos_error(result);
35b88     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1041
35b8c                 | LR__5230
35b8c                 | _fatfs_cc_v_flush_ret
35b8c     2D 00 64 FD | 	ret
35b90                 | 
35b90                 | _fatfs_cc_v_init
35b90                 | ' {
35b90                 | '     return 0;
35b90     00 FA 05 F6 | 	mov	result1, #0
35b94                 | _fatfs_cc_v_init_ret
35b94     2D 00 64 FD | 	ret
35b98                 | 
35b98                 | _fatfs_cc_v_deinit
35b98     B5 01 00 FF 
35b9c     08 15 06 F6 | 	mov	arg02, ##@LR__5426
35ba0     00 12 06 F6 | 	mov	arg01, #0
35ba4     00 16 06 F6 | 	mov	arg03, #0
35ba8     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
35bac     01 00 00 FF 
35bb0     08 E4 05 F1 | 	add	objptr, ##520
35bb4     F2 12 02 FB | 	rdlong	arg01, objptr
35bb8     04 E4 05 F1 | 	add	objptr, #4
35bbc     F2 14 02 FB | 	rdlong	arg02, objptr
35bc0     01 00 00 FF 
35bc4     0C E4 85 F1 | 	sub	objptr, ##524
35bc8     F0 3D BF FD | 	call	#__system___freepins
35bcc                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35bcc                 | '     _freepins(f_pinmask);
35bcc                 | '     return 0;
35bcc     00 FA 05 F6 | 	mov	result1, #0
35bd0                 | _fatfs_cc_v_deinit_ret
35bd0     2D 00 64 FD | 	ret
35bd4                 | 
35bd4                 | _fatfs_cc_get_vfs
35bd4     01 4A 05 F6 | 	mov	COUNT_, #1
35bd8     A8 00 A0 FD | 	call	#pushregs_
35bdc     09 27 02 F6 | 	mov	local01, arg01
35be0     50 12 06 F6 | 	mov	arg01, #80
35be4     28 55 BF FD | 	call	#__system___gc_alloc_managed
35be8     FD 12 02 F6 | 	mov	arg01, result1
35bec     F2 FA 01 F6 | 	mov	result1, objptr
35bf0     00 98 05 FF 
35bf4     00 FA 45 F5 | 	or	result1, ##187695104
35bf8     09 FB 61 FC | 	wrlong	result1, arg01
35bfc     F2 FA 01 F6 | 	mov	result1, objptr
35c00     00 A0 05 FF 
35c04     00 FA 45 F5 | 	or	result1, ##188743680
35c08     04 12 06 F1 | 	add	arg01, #4
35c0c     09 FB 61 FC | 	wrlong	result1, arg01
35c10     F2 FA 01 F6 | 	mov	result1, objptr
35c14     00 A8 05 FF 
35c18     00 FA 45 F5 | 	or	result1, ##189792256
35c1c     04 12 06 F1 | 	add	arg01, #4
35c20     09 FB 61 FC | 	wrlong	result1, arg01
35c24     F2 FA 01 F6 | 	mov	result1, objptr
35c28     00 B0 05 FF 
35c2c     00 FA 45 F5 | 	or	result1, ##190840832
35c30     04 12 06 F1 | 	add	arg01, #4
35c34     09 FB 61 FC | 	wrlong	result1, arg01
35c38     F2 FA 01 F6 | 	mov	result1, objptr
35c3c     00 B8 05 FF 
35c40     00 FA 45 F5 | 	or	result1, ##191889408
35c44     04 12 06 F1 | 	add	arg01, #4
35c48     09 FB 61 FC | 	wrlong	result1, arg01
35c4c     04 12 06 F1 | 	add	arg01, #4
35c50     09 01 68 FC | 	wrlong	#0, arg01
35c54     04 12 06 F1 | 	add	arg01, #4
35c58     09 27 62 FC | 	wrlong	local01, arg01
35c5c     04 12 06 F1 | 	add	arg01, #4
35c60     09 01 68 FC | 	wrlong	#0, arg01
35c64     F2 FA 01 F6 | 	mov	result1, objptr
35c68     00 C0 05 FF 
35c6c     00 FA 45 F5 | 	or	result1, ##192937984
35c70     04 12 06 F1 | 	add	arg01, #4
35c74     09 FB 61 FC | 	wrlong	result1, arg01
35c78     F2 FA 01 F6 | 	mov	result1, objptr
35c7c     00 C8 05 FF 
35c80     00 FA 45 F5 | 	or	result1, ##193986560
35c84     04 12 06 F1 | 	add	arg01, #4
35c88     09 FB 61 FC | 	wrlong	result1, arg01
35c8c     F2 FA 01 F6 | 	mov	result1, objptr
35c90     00 D0 05 FF 
35c94     00 FA 45 F5 | 	or	result1, ##195035136
35c98     04 12 06 F1 | 	add	arg01, #4
35c9c     09 FB 61 FC | 	wrlong	result1, arg01
35ca0     F2 FA 01 F6 | 	mov	result1, objptr
35ca4     00 D8 05 FF 
35ca8     00 FA 45 F5 | 	or	result1, ##196083712
35cac     04 12 06 F1 | 	add	arg01, #4
35cb0     09 FB 61 FC | 	wrlong	result1, arg01
35cb4     F2 FA 01 F6 | 	mov	result1, objptr
35cb8     00 E0 05 FF 
35cbc     00 FA 45 F5 | 	or	result1, ##197132288
35cc0     04 12 06 F1 | 	add	arg01, #4
35cc4     09 FB 61 FC | 	wrlong	result1, arg01
35cc8     F2 FA 01 F6 | 	mov	result1, objptr
35ccc     00 E8 05 FF 
35cd0     00 FA 45 F5 | 	or	result1, ##198180864
35cd4     04 12 06 F1 | 	add	arg01, #4
35cd8     09 FB 61 FC | 	wrlong	result1, arg01
35cdc     F2 FA 01 F6 | 	mov	result1, objptr
35ce0     00 F0 05 FF 
35ce4     00 FA 45 F5 | 	or	result1, ##199229440
35ce8     04 12 06 F1 | 	add	arg01, #4
35cec     09 FB 61 FC | 	wrlong	result1, arg01
35cf0     F2 FA 01 F6 | 	mov	result1, objptr
35cf4     00 F8 05 FF 
35cf8     00 FA 45 F5 | 	or	result1, ##200278016
35cfc     04 12 06 F1 | 	add	arg01, #4
35d00     09 FB 61 FC | 	wrlong	result1, arg01
35d04     F2 FA 01 F6 | 	mov	result1, objptr
35d08     3A FA 25 F4 | 	bith	result1, #58
35d0c     04 12 06 F1 | 	add	arg01, #4
35d10     09 FB 61 FC | 	wrlong	result1, arg01
35d14     F2 FA 01 F6 | 	mov	result1, objptr
35d18     00 08 06 FF 
35d1c     00 FA 45 F5 | 	or	result1, ##202375168
35d20     04 12 06 F1 | 	add	arg01, #4
35d24     09 FB 61 FC | 	wrlong	result1, arg01
35d28     F2 FA 01 F6 | 	mov	result1, objptr
35d2c     00 10 06 FF 
35d30     00 FA 45 F5 | 	or	result1, ##203423744
35d34     04 12 06 F1 | 	add	arg01, #4
35d38     09 FB 61 FC | 	wrlong	result1, arg01
35d3c     F2 FA 01 F6 | 	mov	result1, objptr
35d40     00 18 06 FF 
35d44     00 FA 45 F5 | 	or	result1, ##204472320
35d48     04 12 06 F1 | 	add	arg01, #4
35d4c     09 FB 61 FC | 	wrlong	result1, arg01
35d50     4C 12 86 F1 | 	sub	arg01, #76
35d54                 | ' 
35d54                 | '     v->close = &v_close;
35d54                 | '     v->read = &v_read;
35d54                 | '     v->write = &v_write;
35d54                 | '     v->lseek = &v_lseek;
35d54                 | '     v->ioctl = &v_ioctl;
35d54                 | '     v->flush = 0;
35d54                 | '     v->vfs_data = ptr;
35d54                 | '     v->reserved = 0;
35d54                 | ' 
35d54                 | '     v->open = &v_open;
35d54                 | '     v->creat = &v_creat;
35d54                 | '     v->opendir = &v_opendir;
35d54                 | '     v->closedir = &v_closedir;
35d54                 | '     v->readdir = &v_readdir;
35d54                 | '     v->stat = &v_stat;
35d54                 | ' 
35d54                 | '     v->mkdir = &v_mkdir;
35d54                 | '     v->rmdir = &v_rmdir;
35d54                 | ' 
35d54                 | '     v->remove = &v_remove;
35d54                 | '     v->rename = &v_rename;
35d54                 | ' 
35d54                 | '     v->init = &v_init;
35d54                 | '     v->deinit = &v_deinit;
35d54                 | ' 
35d54                 | '     return v;
35d54     09 FB 01 F6 | 	mov	result1, arg01
35d58     A7 F0 03 F6 | 	mov	ptra, fp
35d5c     B2 00 A0 FD | 	call	#popregs_
35d60                 | _fatfs_cc_get_vfs_ret
35d60     2D 00 64 FD | 	ret
35d64                 | 
35d64                 | _fatfs_cc_xmit_mmc_1192
35d64     01 00 00 FF 
35d68     10 E4 05 F1 | 	add	objptr, ##528
35d6c     F2 00 02 FB | 	rdlong	_var01, objptr
35d70     08 E4 05 F1 | 	add	objptr, #8
35d74     F2 02 02 FB | 	rdlong	_var02, objptr
35d78     01 00 00 FF 
35d7c     18 E4 85 F1 | 	sub	objptr, ##536
35d80     40 02 62 FD | 	dirl	_var02
35d84     28 02 64 FD | 	setq	#1
35d88     09 05 02 FB | 	rdlong	_var03, arg01
35d8c     69 04 62 FD | 	rev	_var03
35d90     1B 04 FE F9 | 	movbyts	_var03, #27
35d94     01 05 22 FC | 	wypin	_var03, _var02
35d98     0A 05 02 F6 | 	mov	_var03, arg02
35d9c     02 14 4E F0 | 	shr	arg02, #2 wz
35da0     03 04 66 F0 | 	shl	_var03, #3
35da4     00 05 22 FC | 	wypin	_var03, _var01
35da8     41 02 62 FD | 	dirh	_var02
35dac     08 12 06 F1 | 	add	arg01, #8
35db0     69 06 62 FD | 	rev	_var04
35db4     1B 06 FE F9 | 	movbyts	_var04, #27
35db8                 | LR__5240
35db8     01 07 22 5C |  if_ne	wypin	_var04, _var02
35dbc     09 07 02 5B |  if_ne	rdlong	_var04, arg01
35dc0     04 12 06 51 |  if_ne	add	arg01, #4
35dc4     69 06 62 5D |  if_ne	rev	_var04
35dc8     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
35dcc                 | LR__5241
35dcc     40 02 72 5D |  if_ne	testp	_var02 wc
35dd0     F8 FF 9F 1D |  if_a	jmp	#LR__5241
35dd4     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__5240
35dd8                 | LR__5242
35dd8     40 00 72 FD | 	testp	_var01 wc
35ddc     F8 FF 9F 3D |  if_ae	jmp	#LR__5242
35de0     40 02 62 FD | 	dirl	_var02
35de4     FF FF FF FF 
35de8     01 FF 2B FC | 	wypin	##-1, _var02
35dec     41 02 62 FD | 	dirh	_var02
35df0                 | _fatfs_cc_xmit_mmc_1192_ret
35df0     2D 00 64 FD | 	ret
35df4                 | 
35df4                 | _fatfs_cc_rcvr_mmc_1199
35df4     01 00 00 FF 
35df8     10 E4 05 F1 | 	add	objptr, ##528
35dfc     F2 00 02 FB | 	rdlong	_var01, objptr
35e00     0C E4 05 F1 | 	add	objptr, #12
35e04     F2 02 02 FB | 	rdlong	_var02, objptr
35e08     01 00 00 FF 
35e0c     1C E4 85 F1 | 	sub	objptr, ##540
35e10     01 03 08 FC | 	akpin	_var02
35e14     0A 05 0A F6 | 	mov	_var03, arg02 wz
35e18     02 04 4E F0 | 	shr	_var03, #2 wz
35e1c     30 00 90 AD |  if_e	jmp	#LR__5252
35e20     02 07 02 F6 | 	mov	_var04, _var03
35e24     05 06 66 F0 | 	shl	_var04, #5
35e28     00 07 22 FC | 	wypin	_var04, _var01
35e2c     01 7F 18 FC | 	wxpin	#63, _var02
35e30                 | LR__5250
35e30                 | LR__5251
35e30     40 02 72 FD | 	testp	_var02 wc
35e34     F8 FF 9F 3D |  if_ae	jmp	#LR__5251
35e38     01 07 8A FA | 	rdpin	_var04, _var02
35e3c     69 06 62 FD | 	rev	_var04
35e40     1B 06 FE F9 | 	movbyts	_var04, #27
35e44     09 07 62 FC | 	wrlong	_var04, arg01
35e48     04 12 06 F1 | 	add	arg01, #4
35e4c     F8 05 6E FB | 	djnz	_var03, #LR__5250
35e50                 | LR__5252
35e50     03 14 0E F5 | 	and	arg02, #3 wz
35e54     24 00 90 AD |  if_e	jmp	#LR__5255
35e58     01 4F 18 FC | 	wxpin	#39, _var02
35e5c                 | LR__5253
35e5c     00 11 28 FC | 	wypin	#8, _var01
35e60                 | LR__5254
35e60     40 02 72 FD | 	testp	_var02 wc
35e64     F8 FF 9F 3D |  if_ae	jmp	#LR__5254
35e68     01 07 8A FA | 	rdpin	_var04, _var02
35e6c     69 06 62 FD | 	rev	_var04
35e70     09 07 42 FC | 	wrbyte	_var04, arg01
35e74     01 12 06 F1 | 	add	arg01, #1
35e78     F8 15 6E FB | 	djnz	arg02, #LR__5253
35e7c                 | LR__5255
35e7c                 | _fatfs_cc_rcvr_mmc_1199_ret
35e7c     2D 00 64 FD | 	ret
35e80                 | 
35e80                 | _fatfs_cc_wait_ready_1203
35e80     01 4A 05 F6 | 	mov	COUNT_, #1
35e84     A8 00 A0 FD | 	call	#pushregs_
35e88     10 F0 07 F1 | 	add	ptra, #16
35e8c     1A FA 61 FD | 	getct	result1
35e90     08 4E 05 F1 | 	add	fp, #8
35e94     A7 FA 61 FC | 	wrlong	result1, fp
35e98     14 26 06 FB | 	rdlong	local01, #20
35e9c     01 26 46 F0 | 	shr	local01, #1
35ea0     04 4E 05 F1 | 	add	fp, #4
35ea4     A7 26 62 FC | 	wrlong	local01, fp
35ea8     0C 4E 85 F1 | 	sub	fp, #12
35eac                 | ' {
35eac                 | ' 	BYTE d;
35eac                 | ' 	UINT tmr, tmout;
35eac                 | ' 
35eac                 | ' 	tmr = _cnt();
35eac                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
35eac                 | ' 	for(;;) {
35eac                 | LR__5260
35eac     04 4E 05 F1 | 	add	fp, #4
35eb0     A7 12 02 F6 | 	mov	arg01, fp
35eb4     04 4E 85 F1 | 	sub	fp, #4
35eb8     01 14 06 F6 | 	mov	arg02, #1
35ebc     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1199
35ec0     04 4E 05 F1 | 	add	fp, #4
35ec4     A7 26 C2 FA | 	rdbyte	local01, fp
35ec8     04 4E 85 F1 | 	sub	fp, #4
35ecc     FF 26 0E F2 | 	cmp	local01, #255 wz
35ed0     01 FA 05 A6 |  if_e	mov	result1, #1
35ed4     28 00 90 AD |  if_e	jmp	#LR__5261
35ed8     1A FA 61 FD | 	getct	result1
35edc     08 4E 05 F1 | 	add	fp, #8
35ee0     A7 26 02 FB | 	rdlong	local01, fp
35ee4     13 FB 81 F1 | 	sub	result1, local01
35ee8     04 4E 05 F1 | 	add	fp, #4
35eec     A7 26 02 FB | 	rdlong	local01, fp
35ef0     0C 4E 85 F1 | 	sub	fp, #12
35ef4     13 FB 11 F2 | 	cmp	result1, local01 wc
35ef8     00 FA 05 36 |  if_ae	mov	result1, #0
35efc     AC FF 9F CD |  if_b	jmp	#LR__5260
35f00                 | LR__5261
35f00     A7 F0 03 F6 | 	mov	ptra, fp
35f04     B2 00 A0 FD | 	call	#popregs_
35f08                 | _fatfs_cc_wait_ready_1203_ret
35f08     2D 00 64 FD | 	ret
35f0c                 | 
35f0c                 | _fatfs_cc_deselect_1209
35f0c     00 4A 05 F6 | 	mov	COUNT_, #0
35f10     A8 00 A0 FD | 	call	#pushregs_
35f14     14 F0 07 F1 | 	add	ptra, #20
35f18     01 00 00 FF 
35f1c     14 E4 05 F1 | 	add	objptr, ##532
35f20     F2 14 02 FB | 	rdlong	arg02, objptr
35f24     04 4E 05 F1 | 	add	fp, #4
35f28     A7 14 62 FC | 	wrlong	arg02, fp
35f2c     04 E4 85 F1 | 	sub	objptr, #4
35f30     F2 14 02 FB | 	rdlong	arg02, objptr
35f34     04 4E 05 F1 | 	add	fp, #4
35f38     A7 14 62 FC | 	wrlong	arg02, fp
35f3c     08 E4 05 F1 | 	add	objptr, #8
35f40     F2 14 02 FB | 	rdlong	arg02, objptr
35f44     04 4E 05 F1 | 	add	fp, #4
35f48     A7 14 62 FC | 	wrlong	arg02, fp
35f4c     04 E4 05 F1 | 	add	objptr, #4
35f50     F2 14 02 FB | 	rdlong	arg02, objptr
35f54     01 00 00 FF 
35f58     1C E4 85 F1 | 	sub	objptr, ##540
35f5c     04 4E 05 F1 | 	add	fp, #4
35f60     A7 14 62 FC | 	wrlong	arg02, fp
35f64     0C 4E 85 F1 | 	sub	fp, #12
35f68     A7 12 02 FB | 	rdlong	arg01, fp
35f6c     04 4E 85 F1 | 	sub	fp, #4
35f70     59 12 62 FD | 	drvh	arg01
35f74     1F 20 64 FD | 	waitx	#16
35f78     A7 12 02 F6 | 	mov	arg01, fp
35f7c     01 14 06 F6 | 	mov	arg02, #1
35f80     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1199
35f84     A7 F0 03 F6 | 	mov	ptra, fp
35f88     B2 00 A0 FD | 	call	#popregs_
35f8c                 | _fatfs_cc_deselect_1209_ret
35f8c     2D 00 64 FD | 	ret
35f90                 | 
35f90                 | _fatfs_cc_select_1213
35f90     00 4A 05 F6 | 	mov	COUNT_, #0
35f94     A8 00 A0 FD | 	call	#pushregs_
35f98     10 F0 07 F1 | 	add	ptra, #16
35f9c     01 00 00 FF 
35fa0     14 E4 05 F1 | 	add	objptr, ##532
35fa4     F2 14 02 FB | 	rdlong	arg02, objptr
35fa8     08 4E 05 F1 | 	add	fp, #8
35fac     A7 14 62 FC | 	wrlong	arg02, fp
35fb0     08 E4 05 F1 | 	add	objptr, #8
35fb4     F2 12 02 FB | 	rdlong	arg01, objptr
35fb8     01 00 00 FF 
35fbc     1C E4 85 F1 | 	sub	objptr, ##540
35fc0     04 4E 05 F1 | 	add	fp, #4
35fc4     A7 12 62 FC | 	wrlong	arg01, fp
35fc8     50 12 62 FD | 	fltl	arg01
35fcc     04 4E 85 F1 | 	sub	fp, #4
35fd0     A7 12 02 FB | 	rdlong	arg01, fp
35fd4     58 12 62 FD | 	drvl	arg01
35fd8     1F 20 64 FD | 	waitx	#16
35fdc     04 4E 05 F1 | 	add	fp, #4
35fe0     A7 12 02 FB | 	rdlong	arg01, fp
35fe4     41 12 62 FD | 	dirh	arg01
35fe8     08 4E 85 F1 | 	sub	fp, #8
35fec     A7 12 02 F6 | 	mov	arg01, fp
35ff0     04 4E 85 F1 | 	sub	fp, #4
35ff4     01 14 06 F6 | 	mov	arg02, #1
35ff8     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1199
35ffc     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1203
36000     00 FA 0D F2 | 	cmp	result1, #0 wz
36004     01 FA 05 56 |  if_ne	mov	result1, #1
36008     08 00 90 5D |  if_ne	jmp	#LR__5270
3600c     FC FE BF FD | 	call	#_fatfs_cc_deselect_1209
36010                 | ' 
36010                 | ' 	deselect();
36010                 | ' 	return 0;
36010     00 FA 05 F6 | 	mov	result1, #0
36014                 | LR__5270
36014     A7 F0 03 F6 | 	mov	ptra, fp
36018     B2 00 A0 FD | 	call	#popregs_
3601c                 | _fatfs_cc_select_1213_ret
3601c     2D 00 64 FD | 	ret
36020                 | 
36020                 | _fatfs_cc_rcvr_datablock_1217
36020     01 4A 05 F6 | 	mov	COUNT_, #1
36024     A8 00 A0 FD | 	call	#pushregs_
36028     18 F0 07 F1 | 	add	ptra, #24
3602c     04 4E 05 F1 | 	add	fp, #4
36030     A7 12 62 FC | 	wrlong	arg01, fp
36034     04 4E 05 F1 | 	add	fp, #4
36038     A7 14 62 FC | 	wrlong	arg02, fp
3603c     1A FA 61 FD | 	getct	result1
36040     08 4E 05 F1 | 	add	fp, #8
36044     A7 FA 61 FC | 	wrlong	result1, fp
36048     14 26 06 FB | 	rdlong	local01, #20
3604c     03 26 46 F0 | 	shr	local01, #3
36050     04 4E 05 F1 | 	add	fp, #4
36054     A7 26 62 FC | 	wrlong	local01, fp
36058     14 4E 85 F1 | 	sub	fp, #20
3605c                 | ' 	BYTE *buff,
3605c                 | ' 	UINT btr
3605c                 | ' )
3605c                 | ' {
3605c                 | ' 	BYTE d[2];
3605c                 | ' 	UINT tmr, tmout;
3605c                 | ' 
3605c                 | ' 	tmr = _cnt();
3605c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
3605c                 | ' 	for(;;) {
3605c                 | LR__5280
3605c     0C 4E 05 F1 | 	add	fp, #12
36060     A7 12 02 F6 | 	mov	arg01, fp
36064     0C 4E 85 F1 | 	sub	fp, #12
36068     01 14 06 F6 | 	mov	arg02, #1
3606c     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1199
36070     0C 4E 05 F1 | 	add	fp, #12
36074     A7 26 C2 FA | 	rdbyte	local01, fp
36078     0C 4E 85 F1 | 	sub	fp, #12
3607c     FF 26 0E F2 | 	cmp	local01, #255 wz
36080     28 00 90 5D |  if_ne	jmp	#LR__5281
36084     1A FA 61 FD | 	getct	result1
36088     FD 26 02 F6 | 	mov	local01, result1
3608c     10 4E 05 F1 | 	add	fp, #16
36090     A7 14 02 FB | 	rdlong	arg02, fp
36094     0A 27 82 F1 | 	sub	local01, arg02
36098     04 4E 05 F1 | 	add	fp, #4
3609c     A7 14 02 FB | 	rdlong	arg02, fp
360a0     14 4E 85 F1 | 	sub	fp, #20
360a4     0A 27 12 F2 | 	cmp	local01, arg02 wc
360a8     B0 FF 9F CD |  if_b	jmp	#LR__5280
360ac                 | LR__5281
360ac     0C 4E 05 F1 | 	add	fp, #12
360b0     A7 26 C2 FA | 	rdbyte	local01, fp
360b4     0C 4E 85 F1 | 	sub	fp, #12
360b8     FE 26 0E F2 | 	cmp	local01, #254 wz
360bc     00 FA 05 56 |  if_ne	mov	result1, #0
360c0     30 00 90 5D |  if_ne	jmp	#LR__5282
360c4     04 4E 05 F1 | 	add	fp, #4
360c8     A7 12 02 FB | 	rdlong	arg01, fp
360cc     04 4E 05 F1 | 	add	fp, #4
360d0     A7 14 02 FB | 	rdlong	arg02, fp
360d4     08 4E 85 F1 | 	sub	fp, #8
360d8     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1199
360dc     0C 4E 05 F1 | 	add	fp, #12
360e0     A7 12 02 F6 | 	mov	arg01, fp
360e4     0C 4E 85 F1 | 	sub	fp, #12
360e8     02 14 06 F6 | 	mov	arg02, #2
360ec     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1199
360f0                 | ' 
360f0                 | ' 	rcvr_mmc(buff, btr);
360f0                 | ' 	rcvr_mmc(d, 2);
360f0                 | ' 
360f0                 | ' 	return 1;
360f0     01 FA 05 F6 | 	mov	result1, #1
360f4                 | LR__5282
360f4     A7 F0 03 F6 | 	mov	ptra, fp
360f8     B2 00 A0 FD | 	call	#popregs_
360fc                 | _fatfs_cc_rcvr_datablock_1217_ret
360fc     2D 00 64 FD | 	ret
36100                 | 
36100                 | _fatfs_cc_xmit_datablock_1219
36100     00 4A 05 F6 | 	mov	COUNT_, #0
36104     A8 00 A0 FD | 	call	#pushregs_
36108     10 F0 07 F1 | 	add	ptra, #16
3610c     04 4E 05 F1 | 	add	fp, #4
36110     A7 12 62 FC | 	wrlong	arg01, fp
36114     04 4E 05 F1 | 	add	fp, #4
36118     A7 14 42 FC | 	wrbyte	arg02, fp
3611c     08 4E 85 F1 | 	sub	fp, #8
36120     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1203
36124     00 FA 0D F2 | 	cmp	result1, #0 wz
36128     00 FA 05 A6 |  if_e	mov	result1, #0
3612c     90 00 90 AD |  if_e	jmp	#LR__5291
36130     08 4E 05 F1 | 	add	fp, #8
36134     A7 14 C2 FA | 	rdbyte	arg02, fp
36138     04 4E 05 F1 | 	add	fp, #4
3613c     A7 14 42 FC | 	wrbyte	arg02, fp
36140     A7 12 02 F6 | 	mov	arg01, fp
36144     0C 4E 85 F1 | 	sub	fp, #12
36148     01 14 06 F6 | 	mov	arg02, #1
3614c     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1192
36150     08 4E 05 F1 | 	add	fp, #8
36154     A7 14 C2 FA | 	rdbyte	arg02, fp
36158     08 4E 85 F1 | 	sub	fp, #8
3615c     FD 14 0E F2 | 	cmp	arg02, #253 wz
36160     58 00 90 AD |  if_e	jmp	#LR__5290
36164     04 4E 05 F1 | 	add	fp, #4
36168     A7 12 02 FB | 	rdlong	arg01, fp
3616c     04 4E 85 F1 | 	sub	fp, #4
36170     09 14 C6 F9 | 	decod	arg02, #9
36174     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1192
36178     0C 4E 05 F1 | 	add	fp, #12
3617c     A7 12 02 F6 | 	mov	arg01, fp
36180     0C 4E 85 F1 | 	sub	fp, #12
36184     02 14 06 F6 | 	mov	arg02, #2
36188     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1199
3618c     0C 4E 05 F1 | 	add	fp, #12
36190     A7 12 02 F6 | 	mov	arg01, fp
36194     0C 4E 85 F1 | 	sub	fp, #12
36198     01 14 06 F6 | 	mov	arg02, #1
3619c     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1199
361a0     0C 4E 05 F1 | 	add	fp, #12
361a4     A7 14 C2 FA | 	rdbyte	arg02, fp
361a8     0C 4E 85 F1 | 	sub	fp, #12
361ac     1F 14 06 F5 | 	and	arg02, #31
361b0     05 14 0E F2 | 	cmp	arg02, #5 wz
361b4                 | ' 			return 0;
361b4     00 FA 05 56 |  if_ne	mov	result1, #0
361b8     04 00 90 5D |  if_ne	jmp	#LR__5291
361bc                 | LR__5290
361bc                 | ' 	}
361bc                 | ' 
361bc                 | ' 	return 1;
361bc     01 FA 05 F6 | 	mov	result1, #1
361c0                 | LR__5291
361c0     A7 F0 03 F6 | 	mov	ptra, fp
361c4     B2 00 A0 FD | 	call	#popregs_
361c8                 | _fatfs_cc_xmit_datablock_1219_ret
361c8     2D 00 64 FD | 	ret
361cc                 | 
361cc                 | _fatfs_cc_send_cmd_1223
361cc     01 4A 05 F6 | 	mov	COUNT_, #1
361d0     A8 00 A0 FD | 	call	#pushregs_
361d4     1C F0 07 F1 | 	add	ptra, #28
361d8                 | _fatfs_cc_send_cmd_1223_enter
361d8     04 4E 05 F1 | 	add	fp, #4
361dc     A7 12 42 FC | 	wrbyte	arg01, fp
361e0     04 4E 05 F1 | 	add	fp, #4
361e4     A7 14 62 FC | 	wrlong	arg02, fp
361e8     04 4E 85 F1 | 	sub	fp, #4
361ec     A7 FA C1 FA | 	rdbyte	result1, fp
361f0     04 4E 85 F1 | 	sub	fp, #4
361f4     80 FA CD F7 | 	test	result1, #128 wz
361f8     44 00 90 AD |  if_e	jmp	#LR__5300
361fc     04 4E 05 F1 | 	add	fp, #4
36200     A7 14 C2 FA | 	rdbyte	arg02, fp
36204     7F 14 06 F5 | 	and	arg02, #127
36208     A7 14 42 FC | 	wrbyte	arg02, fp
3620c     04 4E 85 F1 | 	sub	fp, #4
36210     37 12 06 F6 | 	mov	arg01, #55
36214     00 14 06 F6 | 	mov	arg02, #0
36218     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1223
3621c     0C 4E 05 F1 | 	add	fp, #12
36220     A7 FA 41 FC | 	wrbyte	result1, fp
36224     A7 14 C2 FA | 	rdbyte	arg02, fp
36228     0C 4E 85 F1 | 	sub	fp, #12
3622c     02 14 16 F2 | 	cmp	arg02, #2 wc
36230     0C 4E 05 31 |  if_ae	add	fp, #12
36234     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
36238     0C 4E 85 31 |  if_ae	sub	fp, #12
3623c     6C 01 90 3D |  if_ae	jmp	#LR__5304
36240                 | LR__5300
36240     04 4E 05 F1 | 	add	fp, #4
36244     A7 14 C2 FA | 	rdbyte	arg02, fp
36248     04 4E 85 F1 | 	sub	fp, #4
3624c     0C 14 0E F2 | 	cmp	arg02, #12 wz
36250     14 00 90 AD |  if_e	jmp	#LR__5301
36254     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1209
36258     34 FD BF FD | 	call	#_fatfs_cc_select_1213
3625c     00 FA 0D F2 | 	cmp	result1, #0 wz
36260     FF FA 05 A6 |  if_e	mov	result1, #255
36264     44 01 90 AD |  if_e	jmp	#LR__5304
36268                 | LR__5301
36268     04 4E 05 F1 | 	add	fp, #4
3626c     A7 14 C2 FA | 	rdbyte	arg02, fp
36270     40 FA 05 F6 | 	mov	result1, #64
36274     0A FB 41 F5 | 	or	result1, arg02
36278     10 4E 05 F1 | 	add	fp, #16
3627c     A7 FA 41 FC | 	wrbyte	result1, fp
36280     0C 4E 85 F1 | 	sub	fp, #12
36284     A7 FA 01 FB | 	rdlong	result1, fp
36288     18 FA 45 F0 | 	shr	result1, #24
3628c     0D 4E 05 F1 | 	add	fp, #13
36290     A7 FA 41 FC | 	wrbyte	result1, fp
36294     0D 4E 85 F1 | 	sub	fp, #13
36298     A7 FA 01 FB | 	rdlong	result1, fp
3629c     10 FA 45 F0 | 	shr	result1, #16
362a0     0E 4E 05 F1 | 	add	fp, #14
362a4     A7 FA 41 FC | 	wrbyte	result1, fp
362a8     0E 4E 85 F1 | 	sub	fp, #14
362ac     A7 FA 01 FB | 	rdlong	result1, fp
362b0     08 FA 45 F0 | 	shr	result1, #8
362b4     0F 4E 05 F1 | 	add	fp, #15
362b8     A7 FA 41 FC | 	wrbyte	result1, fp
362bc     0F 4E 85 F1 | 	sub	fp, #15
362c0     A7 FA 01 FB | 	rdlong	result1, fp
362c4     10 4E 05 F1 | 	add	fp, #16
362c8     A7 FA 41 FC | 	wrbyte	result1, fp
362cc     0C 4E 85 F1 | 	sub	fp, #12
362d0     A7 02 48 FC | 	wrbyte	#1, fp
362d4     08 4E 85 F1 | 	sub	fp, #8
362d8     A7 FA C9 FA | 	rdbyte	result1, fp wz
362dc     04 4E 85 F1 | 	sub	fp, #4
362e0     0C 4E 05 A1 |  if_e	add	fp, #12
362e4     A7 2A 49 AC |  if_e	wrbyte	#149, fp
362e8     0C 4E 85 A1 |  if_e	sub	fp, #12
362ec     04 4E 05 F1 | 	add	fp, #4
362f0     A7 FA C1 FA | 	rdbyte	result1, fp
362f4     04 4E 85 F1 | 	sub	fp, #4
362f8     08 FA 0D F2 | 	cmp	result1, #8 wz
362fc     0C 4E 05 A1 |  if_e	add	fp, #12
36300     A7 0E 49 AC |  if_e	wrbyte	#135, fp
36304     0C 4E 85 A1 |  if_e	sub	fp, #12
36308     0C 4E 05 F1 | 	add	fp, #12
3630c     A7 14 C2 FA | 	rdbyte	arg02, fp
36310     0D 4E 05 F1 | 	add	fp, #13
36314     A7 14 42 FC | 	wrbyte	arg02, fp
36318     05 4E 85 F1 | 	sub	fp, #5
3631c     A7 12 02 F6 | 	mov	arg01, fp
36320     14 4E 85 F1 | 	sub	fp, #20
36324     06 14 06 F6 | 	mov	arg02, #6
36328     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1192
3632c     04 4E 05 F1 | 	add	fp, #4
36330     A7 26 C2 FA | 	rdbyte	local01, fp
36334     04 4E 85 F1 | 	sub	fp, #4
36338     0C 26 0E F2 | 	cmp	local01, #12 wz
3633c     10 4E 05 A1 |  if_e	add	fp, #16
36340     A7 12 02 A6 |  if_e	mov	arg01, fp
36344     10 4E 85 A1 |  if_e	sub	fp, #16
36348     01 14 06 A6 |  if_e	mov	arg02, #1
3634c     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1199
36350     0C 4E 05 F1 | 	add	fp, #12
36354     A7 14 48 FC | 	wrbyte	#10, fp
36358     0C 4E 85 F1 | 	sub	fp, #12
3635c                 | ' 	n = 10;
3635c                 | ' 	do
3635c                 | LR__5302
3635c     10 4E 05 F1 | 	add	fp, #16
36360     A7 12 02 F6 | 	mov	arg01, fp
36364     10 4E 85 F1 | 	sub	fp, #16
36368     01 14 06 F6 | 	mov	arg02, #1
3636c     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1199
36370     10 4E 05 F1 | 	add	fp, #16
36374     A7 26 C2 FA | 	rdbyte	local01, fp
36378     10 4E 85 F1 | 	sub	fp, #16
3637c     80 26 CE F7 | 	test	local01, #128 wz
36380     1C 00 90 AD |  if_e	jmp	#LR__5303
36384     0C 4E 05 F1 | 	add	fp, #12
36388     A7 26 C2 FA | 	rdbyte	local01, fp
3638c     01 26 86 F1 | 	sub	local01, #1
36390     A7 26 42 FC | 	wrbyte	local01, fp
36394     A7 26 CA FA | 	rdbyte	local01, fp wz
36398     0C 4E 85 F1 | 	sub	fp, #12
3639c     BC FF 9F 5D |  if_ne	jmp	#LR__5302
363a0                 | LR__5303
363a0                 | ' 
363a0                 | ' 	return d;
363a0     10 4E 05 F1 | 	add	fp, #16
363a4     A7 FA C1 FA | 	rdbyte	result1, fp
363a8     10 4E 85 F1 | 	sub	fp, #16
363ac                 | LR__5304
363ac     A7 F0 03 F6 | 	mov	ptra, fp
363b0     B2 00 A0 FD | 	call	#popregs_
363b4                 | _fatfs_cc_send_cmd_1223_ret
363b4     2D 00 64 FD | 	ret
363b8                 | 
363b8                 | _fatfs_cc_disk_deinitialize
363b8     03 4A 05 F6 | 	mov	COUNT_, #3
363bc     A8 00 A0 FD | 	call	#pushregs_
363c0     00 12 4E F2 | 	cmps	arg01, #0 wz
363c4     01 00 00 FF 
363c8     14 E4 05 F1 | 	add	objptr, ##532
363cc     F2 12 02 FB | 	rdlong	arg01, objptr
363d0     04 E4 85 F1 | 	sub	objptr, #4
363d4     F2 26 02 FB | 	rdlong	local01, objptr
363d8     08 E4 05 F1 | 	add	objptr, #8
363dc     F2 28 02 FB | 	rdlong	local02, objptr
363e0     04 E4 05 F1 | 	add	objptr, #4
363e4     F2 2A 02 FB | 	rdlong	local03, objptr
363e8     01 00 00 FF 
363ec     1C E4 85 F1 | 	sub	objptr, ##540
363f0                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
363f0                 | '         return RES_NOTRDY;
363f0     03 FA 05 56 |  if_ne	mov	result1, #3
363f4     2C 00 90 5D |  if_ne	jmp	#LR__5310
363f8     50 12 62 FD | 	fltl	arg01
363fc     09 01 08 FC | 	wrpin	#0, arg01
36400     50 26 62 FD | 	fltl	local01
36404     13 01 08 FC | 	wrpin	#0, local01
36408     50 28 62 FD | 	fltl	local02
3640c     14 01 08 FC | 	wrpin	#0, local02
36410     50 2A 62 FD | 	fltl	local03
36414     15 01 08 FC | 	wrpin	#0, local03
36418     0A 12 06 F6 | 	mov	arg01, #10
3641c     44 0E BF FD | 	call	#__system___waitms
36420                 | '     }
36420                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
36420                 | '     _pinclear(PIN_SS);
36420                 | '     _pinclear(PIN_CLK);
36420                 | '     _pinclear(PIN_DI);
36420                 | '     _pinclear(PIN_DO);
36420                 | ' 
36420                 | '     _waitms(10);
36420                 | ' 
36420                 | '     return 0;
36420     00 FA 05 F6 | 	mov	result1, #0
36424                 | LR__5310
36424     A7 F0 03 F6 | 	mov	ptra, fp
36428     B2 00 A0 FD | 	call	#popregs_
3642c                 | _fatfs_cc_disk_deinitialize_ret
3642c     2D 00 64 FD | 	ret
36430                 | 
36430                 | _fatfs_cc_gettimeofday
36430     04 4A 05 F6 | 	mov	COUNT_, #4
36434     A8 00 A0 FD | 	call	#pushregs_
36438     09 27 02 F6 | 	mov	local01, arg01
3643c     00 0A BF FD | 	call	#__system___getus
36440     FD 12 02 F6 | 	mov	arg01, result1
36444     02 00 00 FF 
36448     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
3644c     F6 28 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
36450     09 FB 01 F6 | 	mov	result1, arg01
36454     14 FB 81 F1 | 	sub	result1, local02
36458     A1 07 00 FF 
3645c     40 FA 15 FD | 	qdiv	result1, ##1000000
36460     02 00 00 FF 
36464     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
36468     18 28 62 FD | 	getqx	local02
3646c     A1 07 00 FF 
36470     40 FA 15 FD | 	qdiv	result1, ##1000000
36474     00 28 0E F2 | 	cmp	local02, #0 wz
36478     19 2A 62 FD | 	getqy	local03
3647c     28 00 90 AD |  if_e	jmp	#LR__5320
36480     02 00 00 FF 
36484     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
36488     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
3648c     14 2D 02 F1 | 	add	local04, local02
36490     F6 2C 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
36494     15 13 82 F1 | 	sub	arg01, local03
36498     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
3649c     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
364a0     02 00 00 FF 
364a4     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
364a8                 | LR__5320
364a8     02 00 00 FF 
364ac     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
364b0     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
364b4     02 00 00 FF 
364b8     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
364bc     13 2D 62 FC | 	wrlong	local04, local01
364c0     04 26 06 F1 | 	add	local01, #4
364c4     13 2B 62 FC | 	wrlong	local03, local01
364c8                 | '         lastsec += secs;
364c8                 | '         lastus = now - leftover;
364c8                 | '     }
364c8                 | '     tv->tv_sec = lastsec;
364c8                 | '     tv->tv_usec = leftover;
364c8                 | '     return 0;
364c8     00 FA 05 F6 | 	mov	result1, #0
364cc     A7 F0 03 F6 | 	mov	ptra, fp
364d0     B2 00 A0 FD | 	call	#popregs_
364d4                 | _fatfs_cc_gettimeofday_ret
364d4     2D 00 64 FD | 	ret
364d8                 | 
364d8                 | _fatfs_cc__is_leap_year
364d8     09 FB 51 F6 | 	abs	result1, arg01 wc
364dc     03 FA 05 F5 | 	and	result1, #3
364e0     FD FA 89 F6 | 	negc	result1, result1 wz
364e4     38 00 90 5D |  if_ne	jmp	#LR__5331
364e8     09 FB 51 F6 | 	abs	result1, arg01 wc
364ec     64 FA 15 FD | 	qdiv	result1, #100
364f0     19 FA 61 FD | 	getqy	result1
364f4     FD FA 89 F6 | 	negc	result1, result1 wz
364f8     1C 00 90 5D |  if_ne	jmp	#LR__5330
364fc     09 FB 51 F6 | 	abs	result1, arg01 wc
36500     90 FB 15 FD | 	qdiv	result1, #400
36504                 | '       return (0 == y % 400);
36504     00 FA 05 F6 | 	mov	result1, #0
36508     19 00 62 FD | 	getqy	_var01
3650c     00 01 8A F6 | 	negc	_var01, _var01 wz
36510     01 FA 05 A6 |  if_e	mov	result1, #1
36514     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
36518                 | LR__5330
36518                 | '     return 1;
36518     01 FA 05 F6 | 	mov	result1, #1
3651c     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
36520                 | LR__5331
36520                 | '   }
36520                 | '   return 0;
36520     00 FA 05 F6 | 	mov	result1, #0
36524                 | _fatfs_cc__is_leap_year_ret
36524     2D 00 64 FD | 	ret
36528                 | 
36528                 | _fatfs_cc___tzoffset
36528     09 01 0A F6 | 	mov	_var01, arg01 wz
3652c     FF FF FF FF 
36530     0A FF 6B FC | 	wrlong	##-1, arg02
36534     01 02 06 F6 | 	mov	_var02, #1
36538     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
3653c                 | '                 return 0;
3653c     00 FA 05 A6 |  if_e	mov	result1, #0
36540     94 02 90 AD |  if_e	jmp	#LR__5357
36544     0A 01 68 FC | 	wrlong	#0, arg02
36548     02 00 00 FF 
3654c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
36550     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
36554                 | ' 
36554                 | '        *hasdst = 0;
36554                 | ' 
36554                 | ' 	n = stdname;
36554                 | '         while (*s && isalpha(*s)) {
36554     02 00 00 FF 
36558     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
3655c     97 28 48 FB | 	callpa	#(@LR__5341-@LR__5340)>>2,fcache_load_ptr_
36560                 | LR__5340
36560     00 05 CA FA | 	rdbyte	_var03, _var01 wz
36564     48 00 90 AD |  if_e	jmp	#LR__5342
36568     00 13 C2 FA | 	rdbyte	arg01, _var01
3656c                 | ' {
3656c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
3656c     80 12 36 F3 | 	fle	arg01, #128 wc
36570                 | '     return __ctype[c];
36570     02 00 00 FF 
36574     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
36578     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
3657c     09 FB C1 FA | 	rdbyte	result1, arg01
36580     02 00 00 FF 
36584     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
36588     0C FA CD F7 | 	test	result1, #12 wz
3658c     20 00 90 AD |  if_e	jmp	#LR__5342
36590     00 09 02 F6 | 	mov	_var05, _var01
36594     00 0B 02 F6 | 	mov	_var06, _var01
36598     01 0A 06 F1 | 	add	_var06, #1
3659c     04 0D C2 FA | 	rdbyte	_var07, _var05
365a0     05 01 02 F6 | 	mov	_var01, _var06
365a4     03 0D 42 FC | 	wrbyte	_var07, _var04
365a8     01 06 06 F1 | 	add	_var04, #1
365ac     B0 FF 9F FD | 	jmp	#LR__5340
365b0                 | LR__5341
365b0                 | LR__5342
365b0     03 01 48 FC | 	wrbyte	#0, _var04
365b4     00 0E 06 F6 | 	mov	_var08, #0
365b8     00 05 C2 FA | 	rdbyte	_var03, _var01
365bc     2D 04 0E F2 | 	cmp	_var03, #45 wz
365c0     01 02 66 A6 |  if_e	neg	_var02, #1
365c4     01 00 06 A1 |  if_e	add	_var01, #1
365c8     97 28 48 FB | 	callpa	#(@LR__5344-@LR__5343)>>2,fcache_load_ptr_
365cc                 | '                 sgn = -1;
365cc                 | '                 s++;
365cc                 | '         }
365cc                 | '         while (isdigit(*s)) {
365cc                 | LR__5343
365cc     00 13 C2 FA | 	rdbyte	arg01, _var01
365d0                 | ' {
365d0                 | '   return  (__ctype_get(c) & 0x02 ) ;
365d0     80 12 36 F3 | 	fle	arg01, #128 wc
365d4                 | '     return __ctype[c];
365d4     02 00 00 FF 
365d8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
365dc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
365e0     09 FB C1 FA | 	rdbyte	result1, arg01
365e4     02 00 00 FF 
365e8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
365ec     02 FA CD F7 | 	test	result1, #2 wz
365f0     28 00 90 AD |  if_e	jmp	#LR__5345
365f4     07 05 02 F6 | 	mov	_var03, _var08
365f8     02 04 66 F0 | 	shl	_var03, #2
365fc     07 05 02 F1 | 	add	_var03, _var08
36600     01 04 66 F0 | 	shl	_var03, #1
36604     00 09 C2 FA | 	rdbyte	_var05, _var01
36608     30 08 86 F1 | 	sub	_var05, #48
3660c     04 05 02 F1 | 	add	_var03, _var05
36610     02 0F 02 F6 | 	mov	_var08, _var03
36614     01 00 06 F1 | 	add	_var01, #1
36618     B0 FF 9F FD | 	jmp	#LR__5343
3661c                 | LR__5344
3661c                 | LR__5345
3661c     07 00 00 FF 
36620     10 0E 06 FD | 	qmul	_var08, ##3600
36624     00 05 C2 FA | 	rdbyte	_var03, _var01
36628     3A 04 0E F2 | 	cmp	_var03, #58 wz
3662c     18 10 62 FD | 	getqx	_var09
36630     70 00 90 5D |  if_ne	jmp	#LR__5349
36634     00 0E 06 F6 | 	mov	_var08, #0
36638     01 00 06 F1 | 	add	_var01, #1
3663c     97 28 48 FB | 	callpa	#(@LR__5347-@LR__5346)>>2,fcache_load_ptr_
36640                 | '                 x = 0;
36640                 | '                 s++;
36640                 | '                 while (isdigit(*s)) {
36640                 | LR__5346
36640     00 13 C2 FA | 	rdbyte	arg01, _var01
36644                 | ' {
36644                 | '   return  (__ctype_get(c) & 0x02 ) ;
36644     80 12 36 F3 | 	fle	arg01, #128 wc
36648                 | '     return __ctype[c];
36648     02 00 00 FF 
3664c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
36650     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
36654     09 FB C1 FA | 	rdbyte	result1, arg01
36658     02 00 00 FF 
3665c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
36660     02 FA CD F7 | 	test	result1, #2 wz
36664     28 00 90 AD |  if_e	jmp	#LR__5348
36668     07 05 02 F6 | 	mov	_var03, _var08
3666c     02 04 66 F0 | 	shl	_var03, #2
36670     07 05 02 F1 | 	add	_var03, _var08
36674     01 04 66 F0 | 	shl	_var03, #1
36678     00 09 C2 FA | 	rdbyte	_var05, _var01
3667c     30 08 86 F1 | 	sub	_var05, #48
36680     04 05 02 F1 | 	add	_var03, _var05
36684     02 0F 02 F6 | 	mov	_var08, _var03
36688     01 00 06 F1 | 	add	_var01, #1
3668c     B0 FF 9F FD | 	jmp	#LR__5346
36690                 | LR__5347
36690                 | LR__5348
36690     07 0D 02 F6 | 	mov	_var07, _var08
36694     04 0C 66 F0 | 	shl	_var07, #4
36698     07 0D 82 F1 | 	sub	_var07, _var08
3669c     02 0C 66 F0 | 	shl	_var07, #2
366a0     06 11 02 F1 | 	add	_var09, _var07
366a4                 | LR__5349
366a4     02 00 00 FF 
366a8     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
366ac     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
366b0     00 13 C2 FA | 	rdbyte	arg01, _var01
366b4                 | ' {
366b4                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
366b4     80 12 36 F3 | 	fle	arg01, #128 wc
366b8                 | '     return __ctype[c];
366b8     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
366bc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
366c0     09 FB C1 FA | 	rdbyte	result1, arg01
366c4     02 00 00 FF 
366c8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
366cc     0C FA CD F7 | 	test	result1, #12 wz
366d0     50 00 90 AD |  if_e	jmp	#LR__5352
366d4     0A 03 68 FC | 	wrlong	#1, arg02
366d8                 | '                 *hasdst = 1;
366d8                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
366d8                 | LR__5350
366d8     00 05 CA FA | 	rdbyte	_var03, _var01 wz
366dc     44 00 90 AD |  if_e	jmp	#LR__5351
366e0     00 13 C2 FA | 	rdbyte	arg01, _var01
366e4                 | ' {
366e4                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
366e4     80 12 36 F3 | 	fle	arg01, #128 wc
366e8                 | '     return __ctype[c];
366e8     02 00 00 FF 
366ec     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
366f0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
366f4     09 FB C1 FA | 	rdbyte	result1, arg01
366f8     02 00 00 FF 
366fc     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
36700     0C FA CD F7 | 	test	result1, #12 wz
36704     1C 00 90 AD |  if_e	jmp	#LR__5351
36708     00 0B 02 F6 | 	mov	_var06, _var01
3670c     01 0A 06 F1 | 	add	_var06, #1
36710     00 0D C2 FA | 	rdbyte	_var07, _var01
36714     05 01 02 F6 | 	mov	_var01, _var06
36718     03 0D 42 FC | 	wrbyte	_var07, _var04
3671c     01 06 06 F1 | 	add	_var04, #1
36720     B4 FF 9F FD | 	jmp	#LR__5350
36724                 | LR__5351
36724                 | LR__5352
36724     03 01 48 FC | 	wrbyte	#0, _var04
36728     02 00 00 FF 
3672c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
36730     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
36734     02 00 00 FF 
36738     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
3673c     20 00 90 AD |  if_e	jmp	#LR__5353
36740     02 00 00 FF 
36744     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
36748     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3674c     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
36750     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
36754     02 00 00 FF 
36758     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
3675c     1C 00 90 FD | 	jmp	#LR__5354
36760                 | LR__5353
36760     02 00 00 FF 
36764     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
36768     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3676c     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
36770     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
36774     02 00 00 FF 
36778     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
3677c                 | LR__5354
3677c     02 00 00 FF 
36780     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
36784     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
36788     02 00 00 FF 
3678c     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
36790     20 00 90 AD |  if_e	jmp	#LR__5355
36794     02 00 00 FF 
36798     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
3679c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
367a0     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
367a4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
367a8     02 00 00 FF 
367ac     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
367b0     1C 00 90 FD | 	jmp	#LR__5356
367b4                 | LR__5355
367b4     02 00 00 FF 
367b8     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
367bc     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
367c0     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
367c4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
367c8     02 00 00 FF 
367cc     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
367d0                 | LR__5356
367d0     08 03 02 FD | 	qmul	_var02, _var09
367d4                 | ' 		_tzname[1] = stdname;
367d4                 | ' 
367d4                 | '         return sgn * off;
367d4     18 FA 61 FD | 	getqx	result1
367d8                 | LR__5357
367d8                 | _fatfs_cc___tzoffset_ret
367d8     2D 00 64 FD | 	ret
367dc                 | 
367dc                 | _fatfs_cc___indst
367dc     10 12 06 F1 | 	add	arg01, #16
367e0     09 01 02 FB | 	rdlong	_var01, arg01
367e4     10 12 86 F1 | 	sub	arg01, #16
367e8     02 00 0E F2 | 	cmp	_var01, #2 wz
367ec     30 00 90 5D |  if_ne	jmp	#LR__5360
367f0     07 00 06 F6 | 	mov	_var01, #7
367f4     18 12 06 F1 | 	add	arg01, #24
367f8     09 03 02 FB | 	rdlong	_var02, arg01
367fc     01 01 02 F1 | 	add	_var01, _var02
36800     0C 12 86 F1 | 	sub	arg01, #12
36804     09 05 02 FB | 	rdlong	_var03, arg01
36808     02 01 82 F1 | 	sub	_var01, _var03
3680c     00 00 56 F2 | 	cmps	_var01, #0 wc
36810                 | '                         return 1;
36810     01 FA 05 C6 |  if_b	mov	result1, #1
36814     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
36818                 | '                 return 0;
36818     00 FA 05 F6 | 	mov	result1, #0
3681c     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
36820                 | LR__5360
36820     10 12 06 F1 | 	add	arg01, #16
36824     09 01 02 FB | 	rdlong	_var01, arg01
36828     10 12 86 F1 | 	sub	arg01, #16
3682c     0A 00 0E F2 | 	cmp	_var01, #10 wz
36830     28 00 90 5D |  if_ne	jmp	#LR__5361
36834     18 12 06 F1 | 	add	arg01, #24
36838     09 01 02 FB | 	rdlong	_var01, arg01
3683c     0C 12 86 F1 | 	sub	arg01, #12
36840     09 07 02 FB | 	rdlong	_var04, arg01
36844     03 01 82 F1 | 	sub	_var01, _var04
36848     00 00 56 F2 | 	cmps	_var01, #0 wc
3684c                 | '                         return 0;
3684c     00 FA 05 C6 |  if_b	mov	result1, #0
36850     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
36854                 | '                 return 1;
36854     01 FA 05 F6 | 	mov	result1, #1
36858     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
3685c                 | LR__5361
3685c                 | '         }
3685c                 | ' 
3685c                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
3685c     00 00 06 F6 | 	mov	_var01, #0
36860     10 12 06 F1 | 	add	arg01, #16
36864     09 03 02 FB | 	rdlong	_var02, arg01
36868     10 12 86 F1 | 	sub	arg01, #16
3686c     03 02 56 F2 | 	cmps	_var02, #3 wc
36870     10 00 90 CD |  if_b	jmp	#LR__5362
36874     10 12 06 F1 | 	add	arg01, #16
36878     09 05 02 FB | 	rdlong	_var03, arg01
3687c     0A 04 56 F2 | 	cmps	_var03, #10 wc
36880     01 00 06 C6 |  if_b	mov	_var01, #1
36884                 | LR__5362
36884     00 FB 01 F6 | 	mov	result1, _var01
36888                 | _fatfs_cc___indst_ret
36888     2D 00 64 FD | 	ret
3688c                 | 
3688c                 | ' 	
3688c                 | ' 	FUNCTION pfunc(c as integer) as integer
3688c                 | ___strs_cl_pfunc
3688c                 | ' 		if (i < 16) then
3688c     04 E4 05 F1 | 	add	objptr, #4
36890     F2 FA 01 FB | 	rdlong	result1, objptr
36894     04 E4 85 F1 | 	sub	objptr, #4
36898     10 FA 55 F2 | 	cmps	result1, #16 wc
3689c     2C 00 90 3D |  if_ae	jmp	#LR__5370
368a0     F2 FA 01 FB | 	rdlong	result1, objptr
368a4     04 E4 05 F1 | 	add	objptr, #4
368a8     F2 00 02 FB | 	rdlong	_var01, objptr
368ac     FD 00 02 F1 | 	add	_var01, result1
368b0     00 13 42 FC | 	wrbyte	arg01, _var01
368b4     F2 FA 01 FB | 	rdlong	result1, objptr
368b8     01 FA 05 F1 | 	add	result1, #1
368bc     F2 FA 61 FC | 	wrlong	result1, objptr
368c0     04 E4 85 F1 | 	sub	objptr, #4
368c4                 | ' 			p(i) = c
368c4                 | ' 			i = i+1
368c4                 | ' 			return 1
368c4     01 FA 05 F6 | 	mov	result1, #1
368c8     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
368cc                 | LR__5370
368cc                 | ' 			return -1
368cc     01 FA 65 F6 | 	neg	result1, #1
368d0                 | ___strs_cl_pfunc_ret
368d0     2D 00 64 FD | 	ret
368d4                 | 
368d4                 | __struct__s_vfs_file_t_putchar
368d4     04 4A 05 F6 | 	mov	COUNT_, #4
368d8     A8 00 A0 FD | 	call	#pushregs_
368dc     1C E4 05 F1 | 	add	objptr, #28
368e0     F2 26 0A FB | 	rdlong	local01, objptr wz
368e4     1C E4 85 F1 | 	sub	objptr, #28
368e8     00 FA 05 A6 |  if_e	mov	result1, #0
368ec     48 00 90 AD |  if_e	jmp	#LR__5380
368f0     1C E4 05 F1 | 	add	objptr, #28
368f4     F2 28 02 FB | 	rdlong	local02, objptr
368f8     14 2B 02 F6 | 	mov	local03, local02
368fc     1C E4 85 F1 | 	sub	objptr, #28
36900     13 2A 46 F7 | 	zerox	local03, #19
36904     14 28 46 F0 | 	shr	local02, #20
36908     02 28 66 F0 | 	shl	local02, #2
3690c     ED 28 02 F1 | 	add	local02, __methods__
36910     14 29 02 FB | 	rdlong	local02, local02
36914     F2 14 02 F6 | 	mov	arg02, objptr
36918     F2 2C 02 F6 | 	mov	local04, objptr
3691c     15 E5 01 F6 | 	mov	objptr, local03
36920     2D 28 62 FD | 	call	local02
36924     16 E5 01 F6 | 	mov	objptr, local04
36928                 | '     return (i < 0) ? 0 : 1;
36928     00 FA 55 F2 | 	cmps	result1, #0 wc
3692c     00 26 06 C6 |  if_b	mov	local01, #0
36930     01 26 06 36 |  if_ae	mov	local01, #1
36934     13 FB 01 F6 | 	mov	result1, local01
36938                 | LR__5380
36938     A7 F0 03 F6 | 	mov	ptra, fp
3693c     B2 00 A0 FD | 	call	#popregs_
36940                 | __struct__s_vfs_file_t_putchar_ret
36940     2D 00 64 FD | 	ret
36944                 | 
36944                 | __struct__s_vfs_file_t_getchar
36944     03 4A 05 F6 | 	mov	COUNT_, #3
36948     A8 00 A0 FD | 	call	#pushregs_
3694c     20 E4 05 F1 | 	add	objptr, #32
36950     F2 12 0A FB | 	rdlong	arg01, objptr wz
36954     20 E4 85 F1 | 	sub	objptr, #32
36958     01 FA 65 A6 |  if_e	neg	result1, #1
3695c     38 00 90 AD |  if_e	jmp	#LR__5390
36960                 | '     return getcf(__this);
36960     20 E4 05 F1 | 	add	objptr, #32
36964     F2 26 02 FB | 	rdlong	local01, objptr
36968     13 29 02 F6 | 	mov	local02, local01
3696c     20 E4 85 F1 | 	sub	objptr, #32
36970     13 28 46 F7 | 	zerox	local02, #19
36974     14 26 46 F0 | 	shr	local01, #20
36978     02 26 66 F0 | 	shl	local01, #2
3697c     ED 26 02 F1 | 	add	local01, __methods__
36980     13 27 02 FB | 	rdlong	local01, local01
36984     F2 12 02 F6 | 	mov	arg01, objptr
36988     F2 2A 02 F6 | 	mov	local03, objptr
3698c     14 E5 01 F6 | 	mov	objptr, local02
36990     2D 26 62 FD | 	call	local01
36994     15 E5 01 F6 | 	mov	objptr, local03
36998                 | LR__5390
36998     A7 F0 03 F6 | 	mov	ptra, fp
3699c     B2 00 A0 FD | 	call	#popregs_
369a0                 | __struct__s_vfs_file_t_getchar_ret
369a0     2D 00 64 FD | 	ret
369a4                 | 
369a4                 | __struct___bas_wrap_sender_tx
369a4     03 4A 05 F6 | 	mov	COUNT_, #3
369a8     A8 00 A0 FD | 	call	#pushregs_
369ac     F2 26 02 FB | 	rdlong	local01, objptr
369b0     13 29 02 F6 | 	mov	local02, local01
369b4     13 26 46 F7 | 	zerox	local01, #19
369b8     14 28 46 F0 | 	shr	local02, #20
369bc     02 28 66 F0 | 	shl	local02, #2
369c0     ED 28 02 F1 | 	add	local02, __methods__
369c4     14 29 02 FB | 	rdlong	local02, local02
369c8     F2 2A 02 F6 | 	mov	local03, objptr
369cc     13 E5 01 F6 | 	mov	objptr, local01
369d0     2D 28 62 FD | 	call	local02
369d4     15 E5 01 F6 | 	mov	objptr, local03
369d8     01 FA 05 F6 | 	mov	result1, #1
369dc     A7 F0 03 F6 | 	mov	ptra, fp
369e0     B2 00 A0 FD | 	call	#popregs_
369e4                 | __struct___bas_wrap_sender_tx_ret
369e4     2D 00 64 FD | 	ret
369e8                 | 
369e8                 | __struct___bas_wrap_sender_rx
369e8     03 4A 05 F6 | 	mov	COUNT_, #3
369ec     A8 00 A0 FD | 	call	#pushregs_
369f0     04 E4 05 F1 | 	add	objptr, #4
369f4     F2 26 02 FB | 	rdlong	local01, objptr
369f8     13 29 02 F6 | 	mov	local02, local01
369fc     04 E4 85 F1 | 	sub	objptr, #4
36a00     13 28 46 F7 | 	zerox	local02, #19
36a04     14 26 46 F0 | 	shr	local01, #20
36a08     02 26 66 F0 | 	shl	local01, #2
36a0c     ED 26 02 F1 | 	add	local01, __methods__
36a10     13 27 02 FB | 	rdlong	local01, local01
36a14     F2 2A 02 F6 | 	mov	local03, objptr
36a18     14 E5 01 F6 | 	mov	objptr, local02
36a1c     2D 26 62 FD | 	call	local01
36a20     15 E5 01 F6 | 	mov	objptr, local03
36a24     A7 F0 03 F6 | 	mov	ptra, fp
36a28     B2 00 A0 FD | 	call	#popregs_
36a2c                 | __struct___bas_wrap_sender_rx_ret
36a2c     2D 00 64 FD | 	ret
36a30                 | 
36a30                 | __struct___bas_wrap_sender_close
36a30     03 4A 05 F6 | 	mov	COUNT_, #3
36a34     A8 00 A0 FD | 	call	#pushregs_
36a38     08 E4 05 F1 | 	add	objptr, #8
36a3c     F2 26 02 FB | 	rdlong	local01, objptr
36a40     13 29 02 F6 | 	mov	local02, local01
36a44     08 E4 85 F1 | 	sub	objptr, #8
36a48     13 28 46 F7 | 	zerox	local02, #19
36a4c     14 26 46 F0 | 	shr	local01, #20
36a50     02 26 66 F0 | 	shl	local01, #2
36a54     ED 26 02 F1 | 	add	local01, __methods__
36a58     13 27 02 FB | 	rdlong	local01, local01
36a5c     F2 2A 02 F6 | 	mov	local03, objptr
36a60     14 E5 01 F6 | 	mov	objptr, local02
36a64     2D 26 62 FD | 	call	local01
36a68     15 E5 01 F6 | 	mov	objptr, local03
36a6c     A7 F0 03 F6 | 	mov	ptra, fp
36a70     B2 00 A0 FD | 	call	#popregs_
36a74                 | __struct___bas_wrap_sender_close_ret
36a74     2D 00 64 FD | 	ret
36a78                 | 
36a78                 | LR__5400
36a78     2F          | 	byte	"/"
36a79     00          | 	byte	0
36a7a                 | LR__5401
36a7a     69 6E 66    | 	byte	"inf"
36a7d     00          | 	byte	0
36a7e                 | LR__5402
36a7e     6E 61 6E    | 	byte	"nan"
36a81     00          | 	byte	0
36a82                 | LR__5403
36a82                 | 	byte	
36a82     00          | 	byte	0
36a83                 | LR__5404
36a83                 | 	byte	
36a83     00          | 	byte	0
36a84                 | LR__5405
36a84                 | 	byte	
36a84     00          | 	byte	0
36a85                 | LR__5406
36a85                 | 	byte	
36a85     00          | 	byte	0
36a86                 | LR__5407
36a86                 | 	byte	
36a86     00          | 	byte	0
36a87                 | LR__5408
36a87                 | 	byte	
36a87     00          | 	byte	0
36a88                 | LR__5409
36a88                 | 	byte	
36a88     00          | 	byte	0
36a89                 | LR__5410
36a89                 | 	byte	
36a89     00          | 	byte	0
36a8a                 | LR__5411
36a8a     00          | 	byte	0
36a8b     00          | 	byte	0
36a8c                 | LR__5412
36a8c     00          | 	byte	0
36a8d     00          | 	byte	0
36a8e                 | LR__5413
36a8e     00          | 	byte	0
36a8f     00          | 	byte	0
36a90                 | LR__5414
36a90     20 21 21 21 
36a94     20 63 6F 72 
36a98     72 75 70 74 
36a9c     65 64 20 68 
36aa0     65 61 70 3F 
36aa4     3F 3F 20 21 
36aa8     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
36aab     00          | 	byte	0
36aac                 | LR__5415
36aac     20 21 21 21 
36ab0     20 6F 75 74 
36ab4     20 6F 66 20 
36ab8     68 65 61 70 
36abc     20 6D 65 6D 
36ac0     6F 72 79 20 
36ac4     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
36ac8     00          | 	byte	0
36ac9                 | LR__5416
36ac9     20 21 21 21 
36acd     20 63 6F 72 
36ad1     72 75 70 74 
36ad5     65 64 20 68 
36ad9     65 61 70 20 
36add     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
36ae1     00          | 	byte	0
36ae2                 | LR__5417
36ae2     00          | 	byte	0
36ae3     00          | 	byte	0
36ae4                 | LR__5418
36ae4     2E          | 	byte	"."
36ae5     00          | 	byte	0
36ae6                 | LR__5419
36ae6     00          | 	byte	0
36ae7     00          | 	byte	0
36ae8                 | LR__5420
36ae8     00          | 	byte	0
36ae9     00          | 	byte	0
36aea                 | LR__5421
36aea     00          | 	byte	0
36aeb     00          | 	byte	0
36aec                 | LR__5422
36aec     2A 3A 3C 3E 
36af0     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
36af4     00          | 	byte	0
36af5                 | LR__5423
36af5     2B 2C 3B 3D 
36af9     5B 5D       | 	byte	"+,;=[]"
36afb     00          | 	byte	0
36afc                 | LR__5424
36afc     46 41 54 33 
36b00     32 20 20 20 | 	byte	"FAT32   "
36b04     00          | 	byte	0
36b05                 | LR__5425
36b05     54 5A       | 	byte	"TZ"
36b07     00          | 	byte	0
36b08                 | LR__5426
36b08     00          | 	byte	0
36b09     00          | 	byte	0
36b0a                 | LR__5427
36b0a                 | 	byte	
36b0a     00          | 	byte	0
36b0b                 | LR__5428
36b0b                 | 	byte	
36b0b     00          | 	byte	0
36b0c                 | LR__5429
36b0c                 | 	byte	
36b0c     00          | 	byte	0
36b0d                 | LR__5430
36b0d                 | 	byte	
36b0d     00          | 	byte	0
36b0e                 | LR__5431
36b0e     22          | 	byte	34
36b0f     00          | 	byte	0
36b10                 | LR__5432
36b10     22          | 	byte	34
36b11     00          | 	byte	0
36b12                 | LR__5433
36b12     3A          | 	byte	":"
36b13     00          | 	byte	0
36b14                 | LR__5434
36b14                 | 	byte	
36b14     00          | 	byte	0
36b15                 | LR__5435
36b15                 | 	byte	
36b15     00          | 	byte	0
36b16                 | LR__5436
36b16                 | 	byte	
36b16     00          | 	byte	0
36b17                 | LR__5437
36b17                 | 	byte	
36b17     00          | 	byte	0
36b18                 | LR__5438
36b18                 | 	byte	
36b18     00          | 	byte	0
36b19                 | LR__5439
36b19                 | 	byte	
36b19     00          | 	byte	0
36b1a                 | LR__5440
36b1a                 | 	byte	
36b1a     00          | 	byte	0
36b1b                 | LR__5441
36b1b     30          | 	byte	"0"
36b1c     00          | 	byte	0
36b1d                 | LR__5442
36b1d     22          | 	byte	34
36b1e     00          | 	byte	0
36b1f                 | LR__5443
36b1f     22          | 	byte	34
36b20     00          | 	byte	0
36b21                 | LR__5444
36b21     22          | 	byte	34
36b22     00          | 	byte	0
36b23                 | LR__5445
36b23     22          | 	byte	34
36b24     00          | 	byte	0
36b25                 | LR__5446
36b25     22          | 	byte	34
36b26     00          | 	byte	0
36b27                 | LR__5447
36b27     3E          | 	byte	">"
36b28     00          | 	byte	0
36b29                 | LR__5448
36b29     3C          | 	byte	"<"
36b2a     00          | 	byte	0
36b2b                 | LR__5449
36b2b     2B          | 	byte	"+"
36b2c     00          | 	byte	0
36b2d                 | LR__5450
36b2d     2D          | 	byte	"-"
36b2e     00          | 	byte	0
36b2f                 | LR__5451
36b2f     2A          | 	byte	"*"
36b30     00          | 	byte	0
36b31                 | LR__5452
36b31     2F          | 	byte	"/"
36b32     00          | 	byte	0
36b33                 | LR__5453
36b33     5E          | 	byte	"^"
36b34     00          | 	byte	0
36b35                 | LR__5454
36b35     3D          | 	byte	"="
36b36     00          | 	byte	0
36b37                 | LR__5455
36b37     2B          | 	byte	"+"
36b38     00          | 	byte	0
36b39                 | LR__5456
36b39     2B          | 	byte	"+"
36b3a     00          | 	byte	0
36b3b                 | LR__5457
36b3b     2D          | 	byte	"-"
36b3c     00          | 	byte	0
36b3d                 | LR__5458
36b3d     2D          | 	byte	"-"
36b3e     00          | 	byte	0
36b3f                 | LR__5459
36b3f     3C          | 	byte	"<"
36b40     00          | 	byte	0
36b41                 | LR__5460
36b41     3E          | 	byte	">"
36b42     00          | 	byte	0
36b43                 | LR__5461
36b43     22          | 	byte	34
36b44     00          | 	byte	0
36b45                 | LR__5462
36b45     22          | 	byte	34
36b46     00          | 	byte	0
36b47                 | LR__5463
36b47     65 6C 73 65 | 	byte	"else"
36b4b     00          | 	byte	0
36b4c                 | LR__5464
36b4c     74 68 65 6E | 	byte	"then"
36b50     00          | 	byte	0
36b51                 | LR__5465
36b51     3F          | 	byte	"?"
36b52     00          | 	byte	0
36b53                 | LR__5466
36b53     3F          | 	byte	"?"
36b54     00          | 	byte	0
36b55                 | LR__5467
36b55     2E          | 	byte	"."
36b56     00          | 	byte	0
36b57                 | LR__5468
36b57     6D 6F 75 73 
36b5b     65          | 	byte	"mouse"
36b5c     00          | 	byte	0
36b5d                 | LR__5469
36b5d     63 75 72 73 
36b61     6F 72       | 	byte	"cursor"
36b63     00          | 	byte	0
36b64                 | LR__5470
36b64     63 6C 69 63 
36b68     6B          | 	byte	"click"
36b69     00          | 	byte	0
36b6a                 | LR__5471
36b6a     6F 6E       | 	byte	"on"
36b6c     00          | 	byte	0
36b6d                 | LR__5472
36b6d     31          | 	byte	"1"
36b6e     00          | 	byte	0
36b6f                 | LR__5473
36b6f     6F 66 66    | 	byte	"off"
36b72     00          | 	byte	0
36b73                 | LR__5474
36b73     30          | 	byte	"0"
36b74     00          | 	byte	0
36b75                 | LR__5475
36b75     6D 6F 64 65 | 	byte	"mode"
36b79     00          | 	byte	0
36b7a                 | LR__5476
36b7a     6D 2E       | 	byte	"m."
36b7c     00          | 	byte	0
36b7d                 | LR__5477
36b7d     61 74 61 72 
36b81     69          | 	byte	"atari"
36b82     00          | 	byte	0
36b83                 | LR__5478
36b83     30          | 	byte	"0"
36b84     00          | 	byte	0
36b85                 | LR__5479
36b85     70 63 5F 61 
36b89     6D 62 65 72 | 	byte	"pc_amber"
36b8d     00          | 	byte	0
36b8e                 | LR__5480
36b8e     31          | 	byte	"1"
36b8f     00          | 	byte	0
36b90                 | LR__5481
36b90     70 63 5F 67 
36b94     72 65 65 6E | 	byte	"pc_green"
36b98     00          | 	byte	0
36b99                 | LR__5482
36b99     32          | 	byte	"2"
36b9a     00          | 	byte	0
36b9b                 | LR__5483
36b9b     70 63 5F 77 
36b9f     68 69 74 65 | 	byte	"pc_white"
36ba3     00          | 	byte	0
36ba4                 | LR__5484
36ba4     33          | 	byte	"3"
36ba5     00          | 	byte	0
36ba6                 | LR__5485
36ba6     73 74       | 	byte	"st"
36ba8     00          | 	byte	0
36ba9                 | LR__5486
36ba9     34          | 	byte	"4"
36baa     00          | 	byte	0
36bab                 | LR__5487
36bab     61 6D 69 67 
36baf     61          | 	byte	"amiga"
36bb0     00          | 	byte	0
36bb1                 | LR__5488
36bb1     35          | 	byte	"5"
36bb2     00          | 	byte	0
36bb3                 | LR__5489
36bb3                 | 	byte	
36bb3     00          | 	byte	0
36bb4                 | LR__5490
36bb4     6C 6F 61 64 | 	byte	"load"
36bb8     00          | 	byte	0
36bb9                 | LR__5491
36bb9     73 61 76 65 | 	byte	"save"
36bbd     00          | 	byte	0
36bbe                 | LR__5492
36bbe     62 72 75 6E | 	byte	"brun"
36bc2     00          | 	byte	0
36bc3                 | LR__5493
36bc3     72 75 6E    | 	byte	"run"
36bc6     00          | 	byte	0
36bc7                 | LR__5494
36bc7     6C 6F 2E    | 	byte	"lo."
36bca     00          | 	byte	0
36bcb                 | LR__5495
36bcb     73 2E       | 	byte	"s."
36bcd     00          | 	byte	0
36bce                 | LR__5496
36bce     62 72 2E    | 	byte	"br."
36bd1     00          | 	byte	0
36bd2                 | LR__5497
36bd2     65 6E 74 65 
36bd6     72          | 	byte	"enter"
36bd7     00          | 	byte	0
36bd8                 | LR__5498
36bd8     65 2E       | 	byte	"e."
36bda     00          | 	byte	0
36bdb                 | LR__5499
36bdb     24          | 	byte	"$"
36bdc     00          | 	byte	0
36bdd                 | LR__5500
36bdd     64 65 6C 65 
36be1     74 65       | 	byte	"delete"
36be3     00          | 	byte	0
36be4                 | LR__5501
36be4     6D 6B 64 69 
36be8     72          | 	byte	"mkdir"
36be9     00          | 	byte	0
36bea                 | LR__5502
36bea     24          | 	byte	"$"
36beb     00          | 	byte	0
36bec                 | LR__5503
36bec     63 6F 70 79 | 	byte	"copy"
36bf0     00          | 	byte	0
36bf1                 | LR__5504
36bf1     24          | 	byte	"$"
36bf2     00          | 	byte	0
36bf3                 | LR__5505
36bf3     63 6F 70 79 | 	byte	"copy"
36bf7     00          | 	byte	0
36bf8                 | LR__5506
36bf8     24          | 	byte	"$"
36bf9     00          | 	byte	0
36bfa                 | LR__5507
36bfa     63 64       | 	byte	"cd"
36bfc     00          | 	byte	0
36bfd                 | LR__5508
36bfd     63 64 2E    | 	byte	"cd."
36c00     00          | 	byte	0
36c01                 | LR__5509
36c01     2E          | 	byte	"."
36c02     00          | 	byte	0
36c03                 | LR__5510
36c03     2E 2E       | 	byte	".."
36c05     00          | 	byte	0
36c06                 | LR__5511
36c06     63 64       | 	byte	"cd"
36c08     00          | 	byte	0
36c09                 | LR__5512
36c09     2F          | 	byte	"/"
36c0a     00          | 	byte	0
36c0b                 | LR__5513
36c0b                 | 	byte	
36c0b     00          | 	byte	0
36c0c                 | LR__5514
36c0c                 | 	byte	
36c0c     00          | 	byte	0
36c0d                 | LR__5515
36c0d                 | 	byte	
36c0d     00          | 	byte	0
36c0e                 | LR__5516
36c0e                 | 	byte	
36c0e     00          | 	byte	0
36c0f                 | LR__5517
36c0f                 | 	byte	
36c0f     00          | 	byte	0
36c10                 | LR__5518
36c10     52 65 61 64 
36c14     79          | 	byte	"Ready"
36c15     00          | 	byte	0
36c16                 | LR__5519
36c16     2B          | 	byte	"+"
36c17     00          | 	byte	0
36c18                 | LR__5520
36c18     2D          | 	byte	"-"
36c19     00          | 	byte	0
36c1a                 | LR__5521
36c1a     6F 72       | 	byte	"or"
36c1c     00          | 	byte	0
36c1d                 | LR__5522
36c1d     78 6F 72    | 	byte	"xor"
36c20     00          | 	byte	0
36c21                 | LR__5523
36c21     2A          | 	byte	"*"
36c22     00          | 	byte	0
36c23                 | LR__5524
36c23     2F          | 	byte	"/"
36c24     00          | 	byte	0
36c25                 | LR__5525
36c25     61 6E 64    | 	byte	"and"
36c28     00          | 	byte	0
36c29                 | LR__5526
36c29     64 69 76    | 	byte	"div"
36c2c     00          | 	byte	0
36c2d                 | LR__5527
36c2d     6D 6F 64    | 	byte	"mod"
36c30     00          | 	byte	0
36c31                 | LR__5528
36c31     73 68 6C    | 	byte	"shl"
36c34     00          | 	byte	0
36c35                 | LR__5529
36c35     73 68 72    | 	byte	"shr"
36c38     00          | 	byte	0
36c39                 | LR__5530
36c39     5E          | 	byte	"^"
36c3a     00          | 	byte	0
36c3b                 | LR__5531
36c3b     6E 6F 74    | 	byte	"not"
36c3e     00          | 	byte	0
36c3f                 | LR__5532
36c3f     40          | 	byte	"@"
36c40     00          | 	byte	0
36c41                 | LR__5533
36c41     3D          | 	byte	"="
36c42     00          | 	byte	0
36c43                 | LR__5534
36c43     3E 3D       | 	byte	">="
36c45     00          | 	byte	0
36c46                 | LR__5535
36c46     3C 3D       | 	byte	"<="
36c48     00          | 	byte	0
36c49                 | LR__5536
36c49     3C          | 	byte	"<"
36c4a     00          | 	byte	0
36c4b                 | LR__5537
36c4b     3E          | 	byte	">"
36c4c     00          | 	byte	0
36c4d                 | LR__5538
36c4d     3C 3E       | 	byte	"<>"
36c4f     00          | 	byte	0
36c50                 | LR__5539
36c50     2B 2B       | 	byte	"++"
36c52     00          | 	byte	0
36c53                 | LR__5540
36c53     2D 2D       | 	byte	"--"
36c55     00          | 	byte	0
36c56                 | LR__5541
36c56     23          | 	byte	"#"
36c57     00          | 	byte	0
36c58                 | LR__5542
36c58     30          | 	byte	"0"
36c59     00          | 	byte	0
36c5a                 | LR__5543
36c5a     39          | 	byte	"9"
36c5b     00          | 	byte	0
36c5c                 | LR__5544
36c5c     23 72 65 61 
36c60     64          | 	byte	"#read"
36c61     00          | 	byte	0
36c62                 | LR__5545
36c62     23 77 72 69 
36c66     74 65       | 	byte	"#write"
36c68     00          | 	byte	0
36c69                 | LR__5546
36c69     23 61 70 70 
36c6d     65 6E 64    | 	byte	"#append"
36c70     00          | 	byte	0
36c71                 | LR__5547
36c71     23          | 	byte	"#"
36c72     00          | 	byte	0
36c73                 | LR__5548
36c73     23          | 	byte	"#"
36c74     00          | 	byte	0
36c75                 | LR__5549
36c75     2D          | 	byte	"-"
36c76     00          | 	byte	0
36c77                 | LR__5550
36c77     30          | 	byte	"0"
36c78     00          | 	byte	0
36c79                 | LR__5551
36c79     63          | 	byte	"c"
36c7a     00          | 	byte	0
36c7b                 | LR__5552
36c7b     63 23       | 	byte	"c#"
36c7d     00          | 	byte	0
36c7e                 | LR__5553
36c7e     64          | 	byte	"d"
36c7f     00          | 	byte	0
36c80                 | LR__5554
36c80     64 23       | 	byte	"d#"
36c82     00          | 	byte	0
36c83                 | LR__5555
36c83     65          | 	byte	"e"
36c84     00          | 	byte	0
36c85                 | LR__5556
36c85     66          | 	byte	"f"
36c86     00          | 	byte	0
36c87                 | LR__5557
36c87     66 23       | 	byte	"f#"
36c89     00          | 	byte	0
36c8a                 | LR__5558
36c8a     67          | 	byte	"g"
36c8b     00          | 	byte	0
36c8c                 | LR__5559
36c8c     67 23       | 	byte	"g#"
36c8e     00          | 	byte	0
36c8f                 | LR__5560
36c8f     61          | 	byte	"a"
36c90     00          | 	byte	0
36c91                 | LR__5561
36c91     61 23       | 	byte	"a#"
36c93     00          | 	byte	0
36c94                 | LR__5562
36c94     68          | 	byte	"h"
36c95     00          | 	byte	0
36c96                 | LR__5563
36c96     62          | 	byte	"b"
36c97     00          | 	byte	0
36c98                 | LR__5564
36c98     2B          | 	byte	"+"
36c99     00          | 	byte	0
36c9a                 | LR__5565
36c9a     2D          | 	byte	"-"
36c9b     00          | 	byte	0
36c9c                 | LR__5566
36c9c     3D          | 	byte	"="
36c9d     00          | 	byte	0
36c9e                 | LR__5567
36c9e     2C          | 	byte	","
36c9f     00          | 	byte	0
36ca0                 | LR__5568
36ca0     2A          | 	byte	"*"
36ca1     00          | 	byte	0
36ca2                 | LR__5569
36ca2     2F          | 	byte	"/"
36ca3     00          | 	byte	0
36ca4                 | LR__5570
36ca4     3B          | 	byte	";"
36ca5     00          | 	byte	0
36ca6                 | LR__5571
36ca6     22          | 	byte	34
36ca7     00          | 	byte	0
36ca8                 | LR__5572
36ca8     5E          | 	byte	"^"
36ca9     00          | 	byte	0
36caa                 | LR__5573
36caa     29          | 	byte	")"
36cab     00          | 	byte	0
36cac                 | LR__5574
36cac     28          | 	byte	"("
36cad     00          | 	byte	0
36cae                 | LR__5575
36cae     3A          | 	byte	":"
36caf     00          | 	byte	0
36cb0                 | LR__5576
36cb0     20          | 	byte	" "
36cb1     00          | 	byte	0
36cb2                 | LR__5577
36cb2     3E          | 	byte	">"
36cb3     00          | 	byte	0
36cb4                 | LR__5578
36cb4     3C          | 	byte	"<"
36cb5     00          | 	byte	0
36cb6                 | LR__5579
36cb6     3D          | 	byte	"="
36cb7     00          | 	byte	0
36cb8                 | LR__5580
36cb8     62 65 65 70 | 	byte	"beep"
36cbc     00          | 	byte	0
36cbd                 | LR__5581
36cbd     62 2E       | 	byte	"b."
36cbf     00          | 	byte	0
36cc0                 | LR__5582
36cc0     62 6C 69 74 | 	byte	"blit"
36cc4     00          | 	byte	0
36cc5                 | LR__5583
36cc5     62 6F 78    | 	byte	"box"
36cc8     00          | 	byte	0
36cc9                 | LR__5584
36cc9     62 72 75 6E | 	byte	"brun"
36ccd     00          | 	byte	0
36cce                 | LR__5585
36cce     62 72 2E    | 	byte	"br."
36cd1     00          | 	byte	0
36cd2                 | LR__5586
36cd2     63 64       | 	byte	"cd"
36cd4     00          | 	byte	0
36cd5                 | LR__5587
36cd5     63 68 61 6E 
36cd9     67 65 66 72 
36cdd     65 71       | 	byte	"changefreq"
36cdf     00          | 	byte	0
36ce0                 | LR__5588
36ce0     63 66 2E    | 	byte	"cf."
36ce3     00          | 	byte	0
36ce4                 | LR__5589
36ce4     63 68 61 6E 
36ce8     67 65 70 61 
36cec     6E          | 	byte	"changepan"
36ced     00          | 	byte	0
36cee                 | LR__5590
36cee     63 70 2E    | 	byte	"cp."
36cf1     00          | 	byte	0
36cf2                 | LR__5591
36cf2     63 68 61 6E 
36cf6     67 65 76 6F 
36cfa     6C          | 	byte	"changevol"
36cfb     00          | 	byte	0
36cfc                 | LR__5592
36cfc     63 76 2E    | 	byte	"cv."
36cff     00          | 	byte	0
36d00                 | LR__5593
36d00     63 68 61 6E 
36d04     67 65 77 61 
36d08     76 65       | 	byte	"changewave"
36d0a     00          | 	byte	0
36d0b                 | LR__5594
36d0b     63 77 2E    | 	byte	"cw."
36d0e     00          | 	byte	0
36d0f                 | LR__5595
36d0f     63 69 72 63 
36d13     6C 65       | 	byte	"circle"
36d15     00          | 	byte	0
36d16                 | LR__5596
36d16     63 69 2E    | 	byte	"ci."
36d19     00          | 	byte	0
36d1a                 | LR__5597
36d1a     63 6C 69 63 
36d1e     6B          | 	byte	"click"
36d1f     00          | 	byte	0
36d20                 | LR__5598
36d20     63 6C 6F 73 
36d24     65          | 	byte	"close"
36d25     00          | 	byte	0
36d26                 | LR__5599
36d26     63 6C 73    | 	byte	"cls"
36d29     00          | 	byte	0
36d2a                 | LR__5600
36d2a     63 6F 67 73 
36d2e     74 6F 70    | 	byte	"cogstop"
36d31     00          | 	byte	0
36d32                 | LR__5601
36d32     63 6F 6C 6F 
36d36     72          | 	byte	"color"
36d37     00          | 	byte	0
36d38                 | LR__5602
36d38     63 2E       | 	byte	"c."
36d3a     00          | 	byte	0
36d3b                 | LR__5603
36d3b     63 6F 70 79 | 	byte	"copy"
36d3f     00          | 	byte	0
36d40                 | LR__5604
36d40     63 75 72 73 
36d44     6F 72       | 	byte	"cursor"
36d46     00          | 	byte	0
36d47                 | LR__5605
36d47     64 61 74 61 | 	byte	"data"
36d4b     00          | 	byte	0
36d4c                 | LR__5606
36d4c     64 65 66 73 
36d50     6E 64       | 	byte	"defsnd"
36d52     00          | 	byte	0
36d53                 | LR__5607
36d53     64 65 66 65 
36d57     6E 76       | 	byte	"defenv"
36d59     00          | 	byte	0
36d5a                 | LR__5608
36d5a     64 65 66 73 
36d5e     70 72 69 74 
36d62     65          | 	byte	"defsprite"
36d63     00          | 	byte	0
36d64                 | LR__5609
36d64     64 73 2E    | 	byte	"ds."
36d67     00          | 	byte	0
36d68                 | LR__5610
36d68     64 65 67    | 	byte	"deg"
36d6b     00          | 	byte	0
36d6c                 | LR__5611
36d6c     64 65 6C 65 
36d70     74 65       | 	byte	"delete"
36d72     00          | 	byte	0
36d73                 | LR__5612
36d73     64 69 6D    | 	byte	"dim"
36d76     00          | 	byte	0
36d77                 | LR__5613
36d77     64 69 72    | 	byte	"dir"
36d7a     00          | 	byte	0
36d7b                 | LR__5614
36d7b     64 70 6F 6B 
36d7f     65          | 	byte	"dpoke"
36d80     00          | 	byte	0
36d81                 | LR__5615
36d81     64 72 61 77 | 	byte	"draw"
36d85     00          | 	byte	0
36d86                 | LR__5616
36d86     64 72 61 77 
36d8a     74 6F       | 	byte	"drawto"
36d8c     00          | 	byte	0
36d8d                 | LR__5617
36d8d     64 72 2E    | 	byte	"dr."
36d90     00          | 	byte	0
36d91                 | LR__5618
36d91     65 6C 73 65 | 	byte	"else"
36d95     00          | 	byte	0
36d96                 | LR__5619
36d96     65 6E 64    | 	byte	"end"
36d99     00          | 	byte	0
36d9a                 | LR__5620
36d9a     65 6E 74 65 
36d9e     72          | 	byte	"enter"
36d9f     00          | 	byte	0
36da0                 | LR__5621
36da0     65 2E       | 	byte	"e."
36da2     00          | 	byte	0
36da3                 | LR__5622
36da3     66 63 69 72 
36da7     63 6C 65    | 	byte	"fcircle"
36daa     00          | 	byte	0
36dab                 | LR__5623
36dab     66 63 2E    | 	byte	"fc."
36dae     00          | 	byte	0
36daf                 | LR__5624
36daf     66 69 6C 6C | 	byte	"fill"
36db3     00          | 	byte	0
36db4                 | LR__5625
36db4     66 69 2E    | 	byte	"fi."
36db7     00          | 	byte	0
36db8                 | LR__5626
36db8     66 6F 6E 74 | 	byte	"font"
36dbc     00          | 	byte	0
36dbd                 | LR__5627
36dbd     66 6F 72    | 	byte	"for"
36dc0     00          | 	byte	0
36dc1                 | LR__5628
36dc1     66 2E       | 	byte	"f."
36dc3     00          | 	byte	0
36dc4                 | LR__5629
36dc4     66 72 61 6D 
36dc8     65          | 	byte	"frame"
36dc9     00          | 	byte	0
36dca                 | LR__5630
36dca     66 72 2E    | 	byte	"fr."
36dcd     00          | 	byte	0
36dce                 | LR__5631
36dce     67 65 74    | 	byte	"get"
36dd1     00          | 	byte	0
36dd2                 | LR__5632
36dd2     67 6F 73 75 
36dd6     62          | 	byte	"gosub"
36dd7     00          | 	byte	0
36dd8                 | LR__5633
36dd8     67 6F 74 6F | 	byte	"goto"
36ddc     00          | 	byte	0
36ddd                 | LR__5634
36ddd     67 2E       | 	byte	"g."
36ddf     00          | 	byte	0
36de0                 | LR__5635
36de0     69 66       | 	byte	"if"
36de2     00          | 	byte	0
36de3                 | LR__5636
36de3     69 6E 6B    | 	byte	"ink"
36de6     00          | 	byte	0
36de7                 | LR__5637
36de7     69 2E       | 	byte	"i."
36de9     00          | 	byte	0
36dea                 | LR__5638
36dea     69 6E 70 75 
36dee     74          | 	byte	"input"
36def     00          | 	byte	0
36df0                 | LR__5639
36df0     6C 69 73 74 | 	byte	"list"
36df4     00          | 	byte	0
36df5                 | LR__5640
36df5     6C 2E       | 	byte	"l."
36df7     00          | 	byte	0
36df8                 | LR__5641
36df8     6C 6F 61 64 | 	byte	"load"
36dfc     00          | 	byte	0
36dfd                 | LR__5642
36dfd     6C 6F 2E    | 	byte	"lo."
36e00     00          | 	byte	0
36e01                 | LR__5643
36e01     6C 70 6F 6B 
36e05     65          | 	byte	"lpoke"
36e06     00          | 	byte	0
36e07                 | LR__5644
36e07     6D 6B 64 69 
36e0b     72          | 	byte	"mkdir"
36e0c     00          | 	byte	0
36e0d                 | LR__5645
36e0d     6D 6F 64 65 | 	byte	"mode"
36e11     00          | 	byte	0
36e12                 | LR__5646
36e12     6D 2E       | 	byte	"m."
36e14     00          | 	byte	0
36e15                 | LR__5647
36e15     6D 6F 75 73 
36e19     65          | 	byte	"mouse"
36e1a     00          | 	byte	0
36e1b                 | LR__5648
36e1b     6E 65 77    | 	byte	"new"
36e1e     00          | 	byte	0
36e1f                 | LR__5649
36e1f     6E 65 78 74 | 	byte	"next"
36e23     00          | 	byte	0
36e24                 | LR__5650
36e24     6E 2E       | 	byte	"n."
36e26     00          | 	byte	0
36e27                 | LR__5651
36e27     6F 6E       | 	byte	"on"
36e29     00          | 	byte	0
36e2a                 | LR__5652
36e2a     6F 70 65 6E | 	byte	"open"
36e2e     00          | 	byte	0
36e2f                 | LR__5653
36e2f     70 61 70 65 
36e33     72          | 	byte	"paper"
36e34     00          | 	byte	0
36e35                 | LR__5654
36e35     70 61 2E    | 	byte	"pa."
36e38     00          | 	byte	0
36e39                 | LR__5655
36e39     70 69 6E 66 
36e3d     6C 6F 61 74 | 	byte	"pinfloat"
36e41     00          | 	byte	0
36e42                 | LR__5656
36e42     70 69 6E 68 
36e46     69          | 	byte	"pinhi"
36e47     00          | 	byte	0
36e48                 | LR__5657
36e48     70 69 6E 6C 
36e4c     6F          | 	byte	"pinlo"
36e4d     00          | 	byte	0
36e4e                 | LR__5658
36e4e     70 69 6E 73 
36e52     74 61 72 74 | 	byte	"pinstart"
36e56     00          | 	byte	0
36e57                 | LR__5659
36e57     70 69 6E 74 
36e5b     6F 67 67 6C 
36e5f     65          | 	byte	"pintoggle"
36e60     00          | 	byte	0
36e61                 | LR__5660
36e61     70 69 6E 77 
36e65     72 69 74 65 | 	byte	"pinwrite"
36e69     00          | 	byte	0
36e6a                 | LR__5661
36e6a     70 6C 61 79 | 	byte	"play"
36e6e     00          | 	byte	0
36e6f                 | LR__5662
36e6f     70 2E       | 	byte	"p."
36e71     00          | 	byte	0
36e72                 | LR__5663
36e72     70 6C 6F 74 | 	byte	"plot"
36e76     00          | 	byte	0
36e77                 | LR__5664
36e77     70 6C 2E    | 	byte	"pl."
36e7a     00          | 	byte	0
36e7b                 | LR__5665
36e7b     70 6F 6B 65 | 	byte	"poke"
36e7f     00          | 	byte	0
36e80                 | LR__5666
36e80     70 6F 70    | 	byte	"pop"
36e83     00          | 	byte	0
36e84                 | LR__5667
36e84     70 6F 73 69 
36e88     74 69 6F 6E | 	byte	"position"
36e8c     00          | 	byte	0
36e8d                 | LR__5668
36e8d     70 6F 73 2E | 	byte	"pos."
36e91     00          | 	byte	0
36e92                 | LR__5669
36e92     70 72 69 6E 
36e96     74          | 	byte	"print"
36e97     00          | 	byte	0
36e98                 | LR__5670
36e98     3F          | 	byte	"?"
36e99     00          | 	byte	0
36e9a                 | LR__5671
36e9a     70 75 74    | 	byte	"put"
36e9d     00          | 	byte	0
36e9e                 | LR__5672
36e9e     72 61 64    | 	byte	"rad"
36ea1     00          | 	byte	0
36ea2                 | LR__5673
36ea2     72 65 61 64 | 	byte	"read"
36ea6     00          | 	byte	0
36ea7                 | LR__5674
36ea7     72 65 6C 65 
36eab     61 73 65    | 	byte	"release"
36eae     00          | 	byte	0
36eaf                 | LR__5675
36eaf     72 65 6D    | 	byte	"rem"
36eb2     00          | 	byte	0
36eb3                 | LR__5676
36eb3     27          | 	byte	"'"
36eb4     00          | 	byte	0
36eb5                 | LR__5677
36eb5     72 65 73 74 
36eb9     6F 72 65    | 	byte	"restore"
36ebc     00          | 	byte	0
36ebd                 | LR__5678
36ebd     72 65 74 75 
36ec1     72 6E       | 	byte	"return"
36ec3     00          | 	byte	0
36ec4                 | LR__5679
36ec4     72 75 6E    | 	byte	"run"
36ec7     00          | 	byte	0
36ec8                 | LR__5680
36ec8     73 61 76 65 | 	byte	"save"
36ecc     00          | 	byte	0
36ecd                 | LR__5681
36ecd     73 2E       | 	byte	"s."
36ecf     00          | 	byte	0
36ed0                 | LR__5682
36ed0     73 65 74 63 
36ed4     6F 6C 6F 72 | 	byte	"setcolor"
36ed8     00          | 	byte	0
36ed9                 | LR__5683
36ed9     73 63 2E    | 	byte	"sc."
36edc     00          | 	byte	0
36edd                 | LR__5684
36edd     73 65 74 64 
36ee1     65 6C 61 79 | 	byte	"setdelay"
36ee5     00          | 	byte	0
36ee6                 | LR__5685
36ee6     73 64 2E    | 	byte	"sd."
36ee9     00          | 	byte	0
36eea                 | LR__5686
36eea     73 65 74 65 
36eee     6E 76       | 	byte	"setenv"
36ef0     00          | 	byte	0
36ef1                 | LR__5687
36ef1     73 65 2E    | 	byte	"se."
36ef4     00          | 	byte	0
36ef5                 | LR__5688
36ef5     73 65 74 6C 
36ef9     65 6E       | 	byte	"setlen"
36efb     00          | 	byte	0
36efc                 | LR__5689
36efc     73 6C 2E    | 	byte	"sl."
36eff     00          | 	byte	0
36f00                 | LR__5690
36f00     73 65 74 70 
36f04     61 6E       | 	byte	"setpan"
36f06     00          | 	byte	0
36f07                 | LR__5691
36f07     73 70 2E    | 	byte	"sp."
36f0a     00          | 	byte	0
36f0b                 | LR__5692
36f0b     73 65 74 73 
36f0f     75 73 74 61 
36f13     69 6E       | 	byte	"setsustain"
36f15     00          | 	byte	0
36f16                 | LR__5693
36f16     73 73 2E    | 	byte	"ss."
36f19     00          | 	byte	0
36f1a                 | LR__5694
36f1a     73 65 74 76 
36f1e     6F 6C       | 	byte	"setvol"
36f20     00          | 	byte	0
36f21                 | LR__5695
36f21     73 76 2E    | 	byte	"sv."
36f24     00          | 	byte	0
36f25                 | LR__5696
36f25     73 65 74 77 
36f29     61 76 65    | 	byte	"setwave"
36f2c     00          | 	byte	0
36f2d                 | LR__5697
36f2d     73 77 2E    | 	byte	"sw."
36f30     00          | 	byte	0
36f31                 | LR__5698
36f31     73 65 74 77 
36f35     61 76       | 	byte	"setwav"
36f37     00          | 	byte	0
36f38                 | LR__5699
36f38     73 68 75 74 
36f3c     75 70       | 	byte	"shutup"
36f3e     00          | 	byte	0
36f3f                 | LR__5700
36f3f     73 68 2E    | 	byte	"sh."
36f42     00          | 	byte	0
36f43                 | LR__5701
36f43     73 6F 75 6E 
36f47     64          | 	byte	"sound"
36f48     00          | 	byte	0
36f49                 | LR__5702
36f49     73 6F 2E    | 	byte	"so."
36f4c     00          | 	byte	0
36f4d                 | LR__5703
36f4d     73 70 72 69 
36f51     74 65       | 	byte	"sprite"
36f53     00          | 	byte	0
36f54                 | LR__5704
36f54     73 70 72 2E | 	byte	"spr."
36f58     00          | 	byte	0
36f59                 | LR__5705
36f59     74 68 65 6E | 	byte	"then"
36f5d     00          | 	byte	0
36f5e                 | LR__5706
36f5e     77 61 69 74 
36f62     6D 73       | 	byte	"waitms"
36f64     00          | 	byte	0
36f65                 | LR__5707
36f65     77 2E       | 	byte	"w."
36f67     00          | 	byte	0
36f68                 | LR__5708
36f68     77 61 69 74 
36f6c     63 6C 6F 63 
36f70     6B          | 	byte	"waitclock"
36f71     00          | 	byte	0
36f72                 | LR__5709
36f72     77 63 2E    | 	byte	"wc."
36f75     00          | 	byte	0
36f76                 | LR__5710
36f76     77 61 69 74 
36f7a     76 62 6C    | 	byte	"waitvbl"
36f7d     00          | 	byte	0
36f7e                 | LR__5711
36f7e     77 76 2E    | 	byte	"wv."
36f81     00          | 	byte	0
36f82                 | LR__5712
36f82     77 72 70 69 
36f86     6E          | 	byte	"wrpin"
36f87     00          | 	byte	0
36f88                 | LR__5713
36f88     77 78 70 69 
36f8c     6E          | 	byte	"wxpin"
36f8d     00          | 	byte	0
36f8e                 | LR__5714
36f8e     77 79 70 69 
36f92     6E          | 	byte	"wypin"
36f93     00          | 	byte	0
36f94                 | LR__5715
36f94     61 62 73    | 	byte	"abs"
36f97     00          | 	byte	0
36f98                 | LR__5716
36f98     61 63 6F 73 | 	byte	"acos"
36f9c     00          | 	byte	0
36f9d                 | LR__5717
36f9d     61 64 72    | 	byte	"adr"
36fa0     00          | 	byte	0
36fa1                 | LR__5718
36fa1     61 64 64 72 | 	byte	"addr"
36fa5     00          | 	byte	0
36fa6                 | LR__5719
36fa6     61 73 63    | 	byte	"asc"
36fa9     00          | 	byte	0
36faa                 | LR__5720
36faa     61 73 69 6E | 	byte	"asin"
36fae     00          | 	byte	0
36faf                 | LR__5721
36faf     61 74 6E    | 	byte	"atn"
36fb2     00          | 	byte	0
36fb3                 | LR__5722
36fb3     62 69 6E 24 | 	byte	"bin$"
36fb7     00          | 	byte	0
36fb8                 | LR__5723
36fb8     63 68 72 24 | 	byte	"chr$"
36fbc     00          | 	byte	0
36fbd                 | LR__5724
36fbd     63 6F 67 69 
36fc1     6E 69 74    | 	byte	"coginit"
36fc4     00          | 	byte	0
36fc5                 | LR__5725
36fc5     63 6F 73    | 	byte	"cos"
36fc8     00          | 	byte	0
36fc9                 | LR__5726
36fc9     64 70 65 65 
36fcd     6B          | 	byte	"dpeek"
36fce     00          | 	byte	0
36fcf                 | LR__5727
36fcf     66 72 61 6D 
36fd3     65 62 75 66 | 	byte	"framebuf"
36fd7     00          | 	byte	0
36fd8                 | LR__5728
36fd8     66 62 2E    | 	byte	"fb."
36fdb     00          | 	byte	0
36fdc                 | LR__5729
36fdc     66 72 65    | 	byte	"fre"
36fdf     00          | 	byte	0
36fe0                 | LR__5730
36fe0     67 63 2E    | 	byte	"gc."
36fe3     00          | 	byte	0
36fe4                 | LR__5731
36fe4     67 65 74 63 
36fe8     6F 6C 6F 72 | 	byte	"getcolor"
36fec     00          | 	byte	0
36fed                 | LR__5732
36fed     67 65 74 70 
36ff1     69 78 65 6C | 	byte	"getpixel"
36ff5     00          | 	byte	0
36ff6                 | LR__5733
36ff6     67 65 2E    | 	byte	"ge."
36ff9     00          | 	byte	0
36ffa                 | LR__5734
36ffa     67 65 74 65 
36ffe     6E 76 73 75 
37002     73 74 61 69 
37006     6E          | 	byte	"getenvsustain"
37007     00          | 	byte	0
37008                 | LR__5735
37008     67 65 74 6E 
3700c     6F 74 65 76 
37010     61 6C 75 65 | 	byte	"getnotevalue"
37014     00          | 	byte	0
37015                 | LR__5736
37015     67 65 74 74 
37019     69 6D 65    | 	byte	"gettime"
3701c     00          | 	byte	0
3701d                 | LR__5737
3701d     67 74 2E    | 	byte	"gt."
37020     00          | 	byte	0
37021                 | LR__5738
37021     68 65 78 24 | 	byte	"hex$"
37025     00          | 	byte	0
37026                 | LR__5739
37026     69 6E 6B 65 
3702a     79 24       | 	byte	"inkey$"
3702c     00          | 	byte	0
3702d                 | LR__5740
3702d     69 6E 74    | 	byte	"int"
37030     00          | 	byte	0
37031                 | LR__5741
37031     6C 65 66 74 
37035     24          | 	byte	"left$"
37036     00          | 	byte	0
37037                 | LR__5742
37037     6C 65 6E    | 	byte	"len"
3703a     00          | 	byte	0
3703b                 | LR__5743
3703b     6C 6F 67    | 	byte	"log"
3703e     00          | 	byte	0
3703f                 | LR__5744
3703f     6C 70 65 65 
37043     6B          | 	byte	"lpeek"
37044     00          | 	byte	0
37045                 | LR__5745
37045     6D 65 6D 74 
37049     6F 70       | 	byte	"memtop"
3704b     00          | 	byte	0
3704c                 | LR__5746
3704c     6D 65 6D 6C 
37050     6F          | 	byte	"memlo"
37051     00          | 	byte	0
37052                 | LR__5747
37052     6D 69 64 24 | 	byte	"mid$"
37056     00          | 	byte	0
37057                 | LR__5748
37057     6D 6F 75 73 
3705b     65 6B       | 	byte	"mousek"
3705d     00          | 	byte	0
3705e                 | LR__5749
3705e     6D 6F 75 73 
37062     65 77       | 	byte	"mousew"
37064     00          | 	byte	0
37065                 | LR__5750
37065     6D 6F 75 73 
37069     65 78       | 	byte	"mousex"
3706b     00          | 	byte	0
3706c                 | LR__5751
3706c     6D 6F 75 73 
37070     65 79       | 	byte	"mousey"
37072     00          | 	byte	0
37073                 | LR__5752
37073     70 61 64 78 | 	byte	"padx"
37077     00          | 	byte	0
37078                 | LR__5753
37078     70 61 64 79 | 	byte	"pady"
3707c     00          | 	byte	0
3707d                 | LR__5754
3707d     70 61 64 7A | 	byte	"padz"
37081     00          | 	byte	0
37082                 | LR__5755
37082     70 61 64 72 
37086     78          | 	byte	"padrx"
37087     00          | 	byte	0
37088                 | LR__5756
37088     70 61 64 72 
3708c     79          | 	byte	"padry"
3708d     00          | 	byte	0
3708e                 | LR__5757
3708e     70 61 64 72 
37092     7A          | 	byte	"padrz"
37093     00          | 	byte	0
37094                 | LR__5758
37094     70 61 64 68 | 	byte	"padh"
37098     00          | 	byte	0
37099                 | LR__5759
37099     70 65 65 6B | 	byte	"peek"
3709d     00          | 	byte	0
3709e                 | LR__5760
3709e     70 69 6E 72 
370a2     65 61 64    | 	byte	"pinread"
370a5     00          | 	byte	0
370a6                 | LR__5761
370a6     72 64 70 69 
370aa     6E          | 	byte	"rdpin"
370ab     00          | 	byte	0
370ac                 | LR__5762
370ac     72 69 67 68 
370b0     74 24       | 	byte	"right$"
370b2     00          | 	byte	0
370b3                 | LR__5763
370b3     72 71 70 69 
370b7     6E          | 	byte	"rqpin"
370b8     00          | 	byte	0
370b9                 | LR__5764
370b9     72 6F 75 6E 
370bd     64          | 	byte	"round"
370be     00          | 	byte	0
370bf                 | LR__5765
370bf     72 6E 64    | 	byte	"rnd"
370c2     00          | 	byte	0
370c3                 | LR__5766
370c3     73 69 6E    | 	byte	"sin"
370c6     00          | 	byte	0
370c7                 | LR__5767
370c7     73 71 72    | 	byte	"sqr"
370ca     00          | 	byte	0
370cb                 | LR__5768
370cb     73 74 69 63 
370cf     6B          | 	byte	"stick"
370d0     00          | 	byte	0
370d1                 | LR__5769
370d1     73 74 72 69 
370d5     67          | 	byte	"strig"
370d6     00          | 	byte	0
370d7                 | LR__5770
370d7     73 74 72 24 | 	byte	"str$"
370db     00          | 	byte	0
370dc                 | LR__5771
370dc     74 61 6E    | 	byte	"tan"
370df     00          | 	byte	0
370e0                 | LR__5772
370e0     76 61 6C    | 	byte	"val"
370e3     00          | 	byte	0
370e4                 | LR__5773
370e4     76 61 72 70 
370e8     74 72       | 	byte	"varptr"
370ea     00          | 	byte	0
370eb                 | LR__5774
370eb     61          | 	byte	"a"
370ec     00          | 	byte	0
370ed                 | LR__5775
370ed     7A          | 	byte	"z"
370ee     00          | 	byte	0
370ef                 | LR__5776
370ef     5F          | 	byte	"_"
370f0     00          | 	byte	0
370f1                 | LR__5777
370f1     61          | 	byte	"a"
370f2     00          | 	byte	0
370f3                 | LR__5778
370f3     7A          | 	byte	"z"
370f4     00          | 	byte	0
370f5                 | LR__5779
370f5     30          | 	byte	"0"
370f6     00          | 	byte	0
370f7                 | LR__5780
370f7     39          | 	byte	"9"
370f8     00          | 	byte	0
370f9                 | LR__5781
370f9     5F          | 	byte	"_"
370fa     00          | 	byte	0
370fb                 | LR__5782
370fb     2E          | 	byte	"."
370fc     00          | 	byte	0
370fd                 | LR__5783
370fd     61          | 	byte	"a"
370fe     00          | 	byte	0
370ff                 | LR__5784
370ff     7A          | 	byte	"z"
37100     00          | 	byte	0
37101                 | LR__5785
37101     30          | 	byte	"0"
37102     00          | 	byte	0
37103                 | LR__5786
37103     39          | 	byte	"9"
37104     00          | 	byte	0
37105                 | LR__5787
37105     5F          | 	byte	"_"
37106     00          | 	byte	0
37107                 | LR__5788
37107     24          | 	byte	"$"
37108     00          | 	byte	0
37109                 | LR__5789
37109     25          | 	byte	"%"
3710a     00          | 	byte	0
3710b                 | LR__5790
3710b     21          | 	byte	"!"
3710c     00          | 	byte	0
3710d                 | LR__5791
3710d     30          | 	byte	"0"
3710e     00          | 	byte	0
3710f                 | LR__5792
3710f     39          | 	byte	"9"
37110     00          | 	byte	0
37111                 | LR__5793
37111     2E          | 	byte	"."
37112     00          | 	byte	0
37113                 | LR__5794
37113     24          | 	byte	"$"
37114     00          | 	byte	0
37115                 | LR__5795
37115     25          | 	byte	"%"
37116     00          | 	byte	0
37117                 | LR__5796
37117     2D          | 	byte	"-"
37118     00          | 	byte	0
37119                 | LR__5797
37119     2E          | 	byte	"."
3711a     00          | 	byte	0
3711b                 | LR__5798
3711b     24          | 	byte	"$"
3711c     00          | 	byte	0
3711d                 | LR__5799
3711d     25          | 	byte	"%"
3711e     00          | 	byte	0
3711f                 | LR__5800
3711f     30          | 	byte	"0"
37120     00          | 	byte	0
37121                 | LR__5801
37121     39          | 	byte	"9"
37122     00          | 	byte	0
37123                 | LR__5802
37123     5F          | 	byte	"_"
37124     00          | 	byte	0
37125                 | LR__5803
37125     2E          | 	byte	"."
37126     00          | 	byte	0
37127                 | LR__5804
37127     45          | 	byte	"E"
37128     00          | 	byte	0
37129                 | LR__5805
37129     65          | 	byte	"e"
3712a     00          | 	byte	0
3712b                 | LR__5806
3712b     2D          | 	byte	"-"
3712c     00          | 	byte	0
3712d                 | LR__5807
3712d     61          | 	byte	"a"
3712e     00          | 	byte	0
3712f                 | LR__5808
3712f     66          | 	byte	"f"
37130     00          | 	byte	0
37131                 | LR__5809
37131     30          | 	byte	"0"
37132     00          | 	byte	0
37133                 | LR__5810
37133     31          | 	byte	"1"
37134     00          | 	byte	0
37135                 | LR__5811
37135     5F          | 	byte	"_"
37136     00          | 	byte	0
37137                 | LR__5812
37137     2D          | 	byte	"-"
37138     00          | 	byte	0
37139                 | LR__5813
37139     65          | 	byte	"e"
3713a     00          | 	byte	0
3713b                 | LR__5814
3713b     2E          | 	byte	"."
3713c     00          | 	byte	0
3713d                 | LR__5815
3713d     45          | 	byte	"E"
3713e     00          | 	byte	0
3713f                 | LR__5816
3713f     65          | 	byte	"e"
37140     00          | 	byte	0
37141                 | LR__5817
37141     30          | 	byte	"0"
37142     00          | 	byte	0
37143                 | LR__5818
37143     39          | 	byte	"9"
37144     00          | 	byte	0
37145                 | LR__5819
37145     24          | 	byte	"$"
37146     00          | 	byte	0
37147                 | LR__5820
37147     25          | 	byte	"%"
37148     00          | 	byte	0
37149                 | LR__5821
37149     2D          | 	byte	"-"
3714a     00          | 	byte	0
3714b                 | LR__5822
3714b     24          | 	byte	"$"
3714c     00          | 	byte	0
3714d                 | LR__5823
3714d     25          | 	byte	"%"
3714e     00          | 	byte	0
3714f                 | LR__5824
3714f     30          | 	byte	"0"
37150     00          | 	byte	0
37151                 | LR__5825
37151     39          | 	byte	"9"
37152     00          | 	byte	0
37153                 | LR__5826
37153     5F          | 	byte	"_"
37154     00          | 	byte	0
37155                 | LR__5827
37155     30          | 	byte	"0"
37156     00          | 	byte	0
37157                 | LR__5828
37157     39          | 	byte	"9"
37158     00          | 	byte	0
37159                 | LR__5829
37159     61          | 	byte	"a"
3715a     00          | 	byte	0
3715b                 | LR__5830
3715b     66          | 	byte	"f"
3715c     00          | 	byte	0
3715d                 | LR__5831
3715d     5F          | 	byte	"_"
3715e     00          | 	byte	0
3715f                 | LR__5832
3715f     30          | 	byte	"0"
37160     00          | 	byte	0
37161                 | LR__5833
37161     31          | 	byte	"1"
37162     00          | 	byte	0
37163                 | LR__5834
37163     5F          | 	byte	"_"
37164     00          | 	byte	0
37165                 | LR__5835
37165     30          | 	byte	"0"
37166     00          | 	byte	0
37167                 | LR__5836
37167     39          | 	byte	"9"
37168     00          | 	byte	0
37169                 | LR__5837
37169     5F          | 	byte	"_"
3716a     00          | 	byte	0
3716b                 | LR__5838
3716b     22          | 	byte	34
3716c     00          | 	byte	0
3716d                 | LR__5839
3716d     22          | 	byte	34
3716e     00          | 	byte	0
3716f                 | LR__5840
3716f     44 69 6D 3A 
37173     20 61 74 20 
37177     6C 69 6E 65 
3717b     20          | 	byte	"Dim: at line "
3717c     00          | 	byte	0
3717d                 | LR__5841
3717d     3A 20 77 61 
37181     72 6E 69 6E 
37185     67 3A 20 74 
37189     68 65 20 76 
3718d     61 72 69 61 
37191     62 6C 65 20 
37195     65 78 69 73 
37199     74 65 64 2E | 	byte	": warning: the variable existed."
3719d     00          | 	byte	0
3719e                 | LR__5842
3719e     28          | 	byte	"("
3719f     00          | 	byte	0
371a0                 | LR__5843
371a0     61 73       | 	byte	"as"
371a2     00          | 	byte	0
371a3                 | LR__5844
371a3     61 73       | 	byte	"as"
371a5     00          | 	byte	0
371a6                 | LR__5845
371a6     2C          | 	byte	","
371a7     00          | 	byte	0
371a8                 | LR__5846
371a8     29          | 	byte	")"
371a9     00          | 	byte	0
371aa                 | LR__5847
371aa     29          | 	byte	")"
371ab     00          | 	byte	0
371ac                 | LR__5848
371ac     61 73       | 	byte	"as"
371ae     00          | 	byte	0
371af                 | LR__5849
371af     62 79 74 65 | 	byte	"byte"
371b3     00          | 	byte	0
371b4                 | LR__5850
371b4     75 62 79 74 
371b8     65          | 	byte	"ubyte"
371b9     00          | 	byte	0
371ba                 | LR__5851
371ba     73 68 6F 72 
371be     74          | 	byte	"short"
371bf     00          | 	byte	0
371c0                 | LR__5852
371c0     75 73 68 6F 
371c4     72 74       | 	byte	"ushort"
371c6     00          | 	byte	0
371c7                 | LR__5853
371c7     6C 6F 6E 67 | 	byte	"long"
371cb     00          | 	byte	0
371cc                 | LR__5854
371cc     69 6E 74 65 
371d0     67 65 72    | 	byte	"integer"
371d3     00          | 	byte	0
371d4                 | LR__5855
371d4     75 6C 6F 6E 
371d8     67          | 	byte	"ulong"
371d9     00          | 	byte	0
371da                 | LR__5856
371da     69 6E 74 36 
371de     34          | 	byte	"int64"
371df     00          | 	byte	0
371e0                 | LR__5857
371e0     75 69 6E 74 
371e4     36 34       | 	byte	"uint64"
371e6     00          | 	byte	0
371e7                 | LR__5858
371e7     73 69 6E 67 
371eb     6C 65       | 	byte	"single"
371ed     00          | 	byte	0
371ee                 | LR__5859
371ee     64 6F 75 62 
371f2     6C 65       | 	byte	"double"
371f4     00          | 	byte	0
371f5                 | LR__5860
371f5     73 74 72 69 
371f9     6E 67       | 	byte	"string"
371fb     00          | 	byte	0
371fc                 | LR__5861
371fc     74 6F       | 	byte	"to"
371fe     00          | 	byte	0
371ff                 | LR__5862
371ff     73 74 65 70 | 	byte	"step"
37203     00          | 	byte	0
37204                 | LR__5863
37204     73 2E       | 	byte	"s."
37206     00          | 	byte	0
37207                 | LR__5864
37207     73 2E       | 	byte	"s."
37209     00          | 	byte	0
3720a                 | LR__5865
3720a     67 6F 74 6F | 	byte	"goto"
3720e     00          | 	byte	0
3720f                 | LR__5866
3720f     67 6F 73 75 
37213     62          | 	byte	"gosub"
37214     00          | 	byte	0
37215                 | LR__5867
37215     24          | 	byte	"$"
37216     00          | 	byte	0
37217                 | LR__5868
37217     26 68       | 	byte	"&h"
37219     00          | 	byte	0
3721a                 | LR__5869
3721a     25          | 	byte	"%"
3721b     00          | 	byte	0
3721c                 | LR__5870
3721c     26 62       | 	byte	"&b"
3721e     00          | 	byte	0
3721f                 | LR__5871
3721f                 | 	byte	
3721f     00          | 	byte	0
37220                 | LR__5872
37220     61 63 6F 73 
37224     3A 20       | 	byte	"acos: "
37226     00          | 	byte	0
37227                 | LR__5873
37227     61 73 63 3A 
3722b     20          | 	byte	"asc: "
3722c     00          | 	byte	0
3722d                 | LR__5874
3722d     61 73 63 3A 
37231     20          | 	byte	"asc: "
37232     00          | 	byte	0
37233                 | LR__5875
37233     61 73 69 6E 
37237     3A 20       | 	byte	"asin: "
37239     00          | 	byte	0
3723a                 | LR__5876
3723a     61 74 6E 3A 
3723e     20          | 	byte	"atn: "
3723f     00          | 	byte	0
37240                 | LR__5877
37240     62 6C 69 74 
37244     3A 20       | 	byte	"blit: "
37246     00          | 	byte	0
37247                 | LR__5878
37247     62 69 6E 24 
3724b     3A 20       | 	byte	"bin$: "
3724d     00          | 	byte	0
3724e                 | LR__5879
3724e     2F          | 	byte	"/"
3724f     00          | 	byte	0
37250                 | LR__5880
37250     2F 73 64 2F 
37254     62 69 6E 2F | 	byte	"/sd/bin/"
37258     00          | 	byte	0
37259                 | LR__5881
37259     53 79 73 74 
3725d     65 6D 20 65 
37261     72 72 6F 72 
37265     20          | 	byte	"System error "
37266     00          | 	byte	0
37267                 | LR__5882
37267     3A 20       | 	byte	": "
37269     00          | 	byte	0
3726a                 | LR__5883
3726a     2A          | 	byte	"*"
3726b     00          | 	byte	0
3726c                 | LR__5884
3726c     2E 2E       | 	byte	".."
3726e     00          | 	byte	0
3726f                 | LR__5885
3726f     2F          | 	byte	"/"
37270     00          | 	byte	0
37271                 | LR__5886
37271     2F          | 	byte	"/"
37272     00          | 	byte	0
37273                 | LR__5887
37273     53 79 73 74 
37277     65 6D 20 65 
3727b     72 72 6F 72 
3727f     20          | 	byte	"System error "
37280     00          | 	byte	0
37281                 | LR__5888
37281     3A 20       | 	byte	": "
37283     00          | 	byte	0
37284                 | LR__5889
37284     43 75 72 72 
37288     65 6E 74 20 
3728c     64 69 72 65 
37290     63 74 6F 72 
37294     79 3A 20    | 	byte	"Current directory: "
37297     00          | 	byte	0
37298                 | LR__5890
37298     2F          | 	byte	"/"
37299     00          | 	byte	0
3729a                 | LR__5891
3729a     53 79 73 74 
3729e     65 6D 20 65 
372a2     72 72 6F 72 
372a6     20          | 	byte	"System error "
372a7     00          | 	byte	0
372a8                 | LR__5892
372a8     3A 20       | 	byte	": "
372aa     00          | 	byte	0
372ab                 | LR__5893
372ab     43 75 72 72 
372af     65 6E 74 20 
372b3     64 69 72 65 
372b7     63 74 6F 72 
372bb     79 3A 20    | 	byte	"Current directory: "
372be     00          | 	byte	0
372bf                 | LR__5894
372bf     2F          | 	byte	"/"
372c0     00          | 	byte	0
372c1                 | LR__5895
372c1     2F          | 	byte	"/"
372c2     00          | 	byte	0
372c3                 | LR__5896
372c3     2F          | 	byte	"/"
372c4     00          | 	byte	0
372c5                 | LR__5897
372c5     53 79 73 74 
372c9     65 6D 20 65 
372cd     72 72 6F 72 
372d1     20          | 	byte	"System error "
372d2     00          | 	byte	0
372d3                 | LR__5898
372d3     3A 20       | 	byte	": "
372d5     00          | 	byte	0
372d6                 | LR__5899
372d6     43 75 72 72 
372da     65 6E 74 20 
372de     64 69 72 65 
372e2     63 74 6F 72 
372e6     79 3A 20    | 	byte	"Current directory: "
372e9     00          | 	byte	0
372ea                 | LR__5900
372ea     63 68 72 24 
372ee     3A 20       | 	byte	"chr$: "
372f0     00          | 	byte	0
372f1                 | LR__5901
372f1     63 68 61 6E 
372f5     6E 65 6C 23 
372f9     20 65 78 70 
372fd     65 63 74 65 
37301     64          | 	byte	"channel# expected"
37302     00          | 	byte	0
37303                 | LR__5902
37303     63 6F 67 69 
37307     6E 69 74 3A 
3730b     20          | 	byte	"coginit: "
3730c     00          | 	byte	0
3730d                 | LR__5903
3730d     53 79 73 74 
37311     65 6D 20 65 
37315     72 72 6F 72 
37319     20 2D 20    | 	byte	"System error - "
3731c     00          | 	byte	0
3731d                 | LR__5904
3731d     20 69 6E 20 
37321     6C 69 6E 65 
37325     20          | 	byte	" in line "
37326     00          | 	byte	0
37327                 | LR__5905
37327     3A 20       | 	byte	": "
37329     00          | 	byte	0
3732a                 | LR__5906
3732a     2C 20 66 69 
3732e     6C 65 20 6E 
37332     61 6D 65 3A 
37336     20          | 	byte	", file name: "
37337     00          | 	byte	0
37338                 | LR__5907
37338     53 79 73 74 
3733c     65 6D 20 65 
37340     72 72 6F 72 
37344     20 2D 20    | 	byte	"System error - "
37347     00          | 	byte	0
37348                 | LR__5908
37348     20 69 6E 20 
3734c     6C 69 6E 65 
37350     20          | 	byte	" in line "
37351     00          | 	byte	0
37352                 | LR__5909
37352     3A 20       | 	byte	": "
37354     00          | 	byte	0
37355                 | LR__5910
37355     2C 20 66 69 
37359     6C 65 20 6E 
3735d     61 6D 65 3A 
37361     20          | 	byte	", file name: "
37362     00          | 	byte	0
37363                 | LR__5911
37363     63 6F 73 3A 
37367     20          | 	byte	"cos: "
37368     00          | 	byte	0
37369                 | LR__5912
37369                 | 	byte	
37369     00          | 	byte	0
3736a                 | LR__5913
3736a                 | 	byte	
3736a     00          | 	byte	0
3736b                 | LR__5914
3736b     2F 73 64 2F 
3736f     6D 65 64 69 
37373     61 2F 68 2F | 	byte	"/sd/media/h/"
37377     00          | 	byte	0
37378                 | LR__5915
37378     53 79 73 74 
3737c     65 6D 20 65 
37380     72 72 6F 72 
37384     20          | 	byte	"System error "
37385     00          | 	byte	0
37386                 | LR__5916
37386     3A 20       | 	byte	": "
37388     00          | 	byte	0
37389                 | LR__5917
37389                 | 	byte	
37389     00          | 	byte	0
3738a                 | LR__5918
3738a                 | 	byte	
3738a     00          | 	byte	0
3738b                 | LR__5919
3738b     2F 73 64 2F 
3738f     6D 65 64 69 
37393     61 2F 73 2F | 	byte	"/sd/media/s/"
37397     00          | 	byte	0
37398                 | LR__5920
37398     53 79 73 74 
3739c     65 6D 20 65 
373a0     72 72 6F 72 
373a4     20          | 	byte	"System error "
373a5     00          | 	byte	0
373a6                 | LR__5921
373a6     3A 20       | 	byte	": "
373a8     00          | 	byte	0
373a9                 | LR__5922
373a9     2F          | 	byte	"/"
373aa     00          | 	byte	0
373ab                 | LR__5923
373ab     2F          | 	byte	"/"
373ac     00          | 	byte	0
373ad                 | LR__5924
373ad     2F          | 	byte	"/"
373ae     00          | 	byte	0
373af                 | LR__5925
373af     43 61 6E 6E 
373b3     6F 74 20 64 
373b7     65 6C 65 74 
373bb     65 20 66 69 
373bf     6C 65 20 6F 
373c3     72 20 66 69 
373c7     6C 65 20 64 
373cb     6F 65 73 6E 
373cf     27 74 20 65 
373d3     78 69 73 74 
373d7     3A 20 73 79 
373db     73 74 65 6D 
373df     20 65 72 72 
373e3     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
373e6     00          | 	byte	0
373e7                 | LR__5926
373e7     43 75 72 72 
373eb     65 6E 74 20 
373ef     64 69 72 65 
373f3     63 74 6F 72 
373f7     79 3A 20    | 	byte	"Current directory: "
373fa     00          | 	byte	0
373fb                 | LR__5927
373fb                 | 	byte	
373fb     00          | 	byte	0
373fc                 | LR__5928
373fc     2A          | 	byte	"*"
373fd     00          | 	byte	0
373fe                 | LR__5929
373fe                 | 	byte	
373fe     00          | 	byte	0
373ff                 | LR__5930
373ff     5B 64 69 72 
37403     5D 20       | 	byte	"[dir] "
37405     00          | 	byte	0
37406                 | LR__5931
37406     4D 6F 72 65 
3740a     20 74 68 61 
3740e     6E 20 31 32 
37412     38 20 65 6E 
37416     74 72 69 65 
3741a     73 20 66 6F 
3741e     75 6E 64 3A 
37422     20 63 6C 65 
37426     61 6E 20 79 
3742a     6F 75 72 20 
3742e     64 69 72 65 
37432     63 74 6F 72 
37436     79          | 	byte	"More than 128 entries found: clean your directory"
37437     00          | 	byte	0
37438                 | LR__5932
37438     2A          | 	byte	"*"
37439     00          | 	byte	0
3743a                 | LR__5933
3743a                 | 	byte	
3743a     00          | 	byte	0
3743b                 | LR__5934
3743b     4D 6F 72 65 
3743f     20 74 68 61 
37443     6E 20 31 32 
37447     38 20 65 6E 
3744b     74 72 69 65 
3744f     73 20 66 6F 
37453     75 6E 64 3A 
37457     20 63 6C 65 
3745b     61 6E 20 79 
3745f     6F 75 72 20 
37463     64 69 72 65 
37467     63 74 6F 72 
3746b     79          | 	byte	"More than 128 entries found: clean your directory"
3746c     00          | 	byte	0
3746d                 | LR__5935
3746d     45 72 72 6F 
37471     72 20       | 	byte	"Error "
37473     00          | 	byte	0
37474                 | LR__5936
37474     3A 20       | 	byte	": "
37476     00          | 	byte	0
37477                 | LR__5937
37477     67 65 74 63 
3747b     6F 6C 6F 72 
3747f     20          | 	byte	"getcolor "
37480     00          | 	byte	0
37481                 | LR__5938
37481     67 65 74 65 
37485     6E 76 73 75 
37489     73 74 61 69 
3748d     6E 3A 20    | 	byte	"getenvsustain: "
37490     00          | 	byte	0
37491                 | LR__5939
37491     67 65 74 70 
37495     69 78 65 6C 
37499     3A 20       | 	byte	"getpixel: "
3749b     00          | 	byte	0
3749c                 | LR__5940
3749c     68 65 78 24 
374a0     3A 20       | 	byte	"hex$: "
374a2     00          | 	byte	0
374a3                 | LR__5941
374a3                 | 	byte	
374a3     00          | 	byte	0
374a4                 | LR__5942
374a4     49 6E 20 69 
374a8     6E 70 75 74 
374ac     3A 20       | 	byte	"In input: "
374ae     00          | 	byte	0
374af                 | LR__5943
374af     2C          | 	byte	","
374b0     00          | 	byte	0
374b1                 | LR__5944
374b1                 | 	byte	
374b1     00          | 	byte	0
374b2                 | LR__5945
374b2                 | 	byte	
374b2     00          | 	byte	0
374b3                 | LR__5946
374b3     6C 65 66 74 
374b7     24 3A 20    | 	byte	"left$: "
374ba     00          | 	byte	0
374bb                 | LR__5947
374bb     6C 65 66 74 
374bf     24 3A 20    | 	byte	"left$: "
374c2     00          | 	byte	0
374c3                 | LR__5948
374c3     6C 65 6E 3A 
374c7     20          | 	byte	"len: "
374c8     00          | 	byte	0
374c9                 | LR__5949
374c9     6C 65 6E 3A 
374cd     20          | 	byte	"len: "
374ce     00          | 	byte	0
374cf                 | LR__5950
374cf                 | 	byte	
374cf     00          | 	byte	0
374d0                 | LR__5951
374d0     2F          | 	byte	"/"
374d1     00          | 	byte	0
374d2                 | LR__5952
374d2     2F          | 	byte	"/"
374d3     00          | 	byte	0
374d4                 | LR__5953
374d4     2E 62 61 73 | 	byte	".bas"
374d8     00          | 	byte	0
374d9                 | LR__5954
374d9     53 79 73 74 
374dd     65 6D 20 65 
374e1     72 72 6F 72 
374e5     20          | 	byte	"System error "
374e6     00          | 	byte	0
374e7                 | LR__5955
374e7     3A 20       | 	byte	": "
374e9     00          | 	byte	0
374ea                 | LR__5956
374ea     2E 62 61 73 | 	byte	".bas"
374ee     00          | 	byte	0
374ef                 | LR__5957
374ef     2F          | 	byte	"/"
374f0     00          | 	byte	0
374f1                 | LR__5958
374f1                 | 	byte	
374f1     00          | 	byte	0
374f2                 | LR__5959
374f2     4C 6F 61 64 
374f6     65 64 20    | 	byte	"Loaded "
374f9     00          | 	byte	0
374fa                 | LR__5960
374fa     2F          | 	byte	"/"
374fb     00          | 	byte	0
374fc                 | LR__5961
374fc     6C 6F 67 3A 
37500     20          | 	byte	"log: "
37501     00          | 	byte	0
37502                 | LR__5962
37502     6D 69 64 24 
37506     3A 20       | 	byte	"mid$: "
37508     00          | 	byte	0
37509                 | LR__5963
37509     6D 69 64 24 
3750d     3A 20       | 	byte	"mid$: "
3750f     00          | 	byte	0
37510                 | LR__5964
37510     43 61 6E 6E 
37514     6F 74 20 63 
37518     72 65 61 74 
3751c     65 20 61 20 
37520     64 69 72 65 
37524     63 74 6F 72 
37528     79 3A 20 73 
3752c     79 73 74 65 
37530     6D 20 65 72 
37534     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
37538     00          | 	byte	0
37539                 | LR__5965
37539     20 42 41 53 
3753d     49 43 20 62 
37541     79 74 65 73 
37545     20 66 72 65 
37549     65          | 	byte	" BASIC bytes free"
3754a     00          | 	byte	0
3754b                 | LR__5966
3754b                 | 	byte	
3754b     00          | 	byte	0
3754c                 | LR__5967
3754c                 | 	byte	
3754c     00          | 	byte	0
3754d                 | LR__5968
3754d                 | 	byte	
3754d     00          | 	byte	0
3754e                 | LR__5969
3754e     6E 6F 6E 61 
37552     6D 65 2E 62 
37556     61 73       | 	byte	"noname.bas"
37558     00          | 	byte	0
37559                 | LR__5970
37559     66 69 6C 65 
3755d     6E 61 6D 65 
37561     20 65 78 70 
37565     65 63 74 65 
37569     64          | 	byte	"filename expected"
3756a     00          | 	byte	0
3756b                 | LR__5971
3756b     72 65 61 64 | 	byte	"read"
3756f     00          | 	byte	0
37570                 | LR__5972
37570     77 72 69 74 
37574     65          | 	byte	"write"
37575     00          | 	byte	0
37576                 | LR__5973
37576     61 70 70 65 
3757a     6E 64       | 	byte	"append"
3757c     00          | 	byte	0
3757d                 | LR__5974
3757d     63 68 61 6E 
37581     6E 65 6C 23 
37585     20 65 78 70 
37589     65 63 74 65 
3758d     64          | 	byte	"channel# expected"
3758e     00          | 	byte	0
3758f                 | LR__5975
3758f     4F 70 65 6E 
37593     3A 20 69 6E 
37597     76 61 6C 69 
3759b     64 20 6D 6F 
3759f     64 65       | 	byte	"Open: invalid mode"
375a1     00          | 	byte	0
375a2                 | LR__5976
375a2     70 61 64 68 
375a6     3A 20       | 	byte	"padh: "
375a8     00          | 	byte	0
375a9                 | LR__5977
375a9     70 61 64 72 
375ad     78 3A 20    | 	byte	"padrx: "
375b0     00          | 	byte	0
375b1                 | LR__5978
375b1     70 61 64 72 
375b5     79 3A 20    | 	byte	"padry: "
375b8     00          | 	byte	0
375b9                 | LR__5979
375b9     70 61 64 72 
375bd     7A 3A 20    | 	byte	"padrz: "
375c0     00          | 	byte	0
375c1                 | LR__5980
375c1     70 61 64 78 
375c5     3A 20       | 	byte	"padx: "
375c7     00          | 	byte	0
375c8                 | LR__5981
375c8     70 61 64 79 
375cc     3A 20       | 	byte	"pady: "
375ce     00          | 	byte	0
375cf                 | LR__5982
375cf     70 61 64 7A 
375d3     3A 20       | 	byte	"padz: "
375d5     00          | 	byte	0
375d6                 | LR__5983
375d6     50 72 69 6E 
375da     74 20 74 6F 
375de     20 63 68 61 
375e2     6E 6E 65 6C 
375e6     20 28 6E 6F 
375ea     74 20 79 65 
375ee     74 20 69 6D 
375f2     70 6C 65 6D 
375f6     65 6E 74 65 
375fa     64 29       | 	byte	"Print to channel (not yet implemented)"
375fc     00          | 	byte	0
375fd                 | LR__5984
375fd                 | 	byte	
375fd     00          | 	byte	0
375fe                 | LR__5985
375fe     64 61 74 61 | 	byte	"data"
37602     00          | 	byte	0
37603                 | LR__5986
37603                 | 	byte	
37603     00          | 	byte	0
37604                 | LR__5987
37604     49 6E 20 72 
37608     65 61 64 3A 
3760c     20          | 	byte	"In read: "
3760d     00          | 	byte	0
3760e                 | LR__5988
3760e                 | 	byte	
3760e     00          | 	byte	0
3760f                 | LR__5989
3760f                 | 	byte	
3760f     00          | 	byte	0
37610                 | LR__5990
37610     27          | 	byte	"'"
37611     00          | 	byte	0
37612                 | LR__5991
37612     2C          | 	byte	","
37613     00          | 	byte	0
37614                 | LR__5992
37614                 | 	byte	
37614     00          | 	byte	0
37615                 | LR__5993
37615                 | 	byte	
37615     00          | 	byte	0
37616                 | LR__5994
37616                 | 	byte	
37616     00          | 	byte	0
37617                 | LR__5995
37617                 | 	byte	
37617     00          | 	byte	0
37618                 | LR__5996
37618                 | 	byte	
37618     00          | 	byte	0
37619                 | LR__5997
37619     72 69 67 68 
3761d     74 24 3A 20 | 	byte	"right$: "
37621     00          | 	byte	0
37622                 | LR__5998
37622     72 69 67 68 
37626     74 24 3A 20 | 	byte	"right$: "
3762a     00          | 	byte	0
3762b                 | LR__5999
3762b     72 6E 64 3A 
3762f     20          | 	byte	"rnd: "
37630     00          | 	byte	0
37631                 | LR__6000
37631     72 6E 64 3A 
37635     20          | 	byte	"rnd: "
37636     00          | 	byte	0
37637                 | LR__6001
37637                 | 	byte	
37637     00          | 	byte	0
37638                 | LR__6002
37638     53 74 6F 70 
3763c     70 65 64 20 
37640     61 74 20 6C 
37644     69 6E 65 20 | 	byte	"Stopped at line "
37648     00          | 	byte	0
37649                 | LR__6003
37649                 | 	byte	
37649     00          | 	byte	0
3764a                 | LR__6004
3764a     2F          | 	byte	"/"
3764b     00          | 	byte	0
3764c                 | LR__6005
3764c                 | 	byte	
3764c     00          | 	byte	0
3764d                 | LR__6006
3764d     53 61 76 65 
37651     64 20 61 73 
37655     20          | 	byte	"Saved as "
37656     00          | 	byte	0
37657                 | LR__6007
37657     2F          | 	byte	"/"
37658     00          | 	byte	0
37659                 | LR__6008
37659     73 65 74 63 
3765d     6F 6C 6F 72 
37661     3A 20       | 	byte	"setcolor: "
37663     00          | 	byte	0
37664                 | LR__6009
37664     73 69 6E 3A 
37668     20          | 	byte	"sin: "
37669     00          | 	byte	0
3766a                 | LR__6010
3766a     73 71 72 3A 
3766e     20          | 	byte	"sqr: "
3766f     00          | 	byte	0
37670                 | LR__6011
37670     73 74 69 63 
37674     6B 3A 20    | 	byte	"stick: "
37677     00          | 	byte	0
37678                 | LR__6012
37678     73 74 72 69 
3767c     67 3A 20    | 	byte	"strig: "
3767f     00          | 	byte	0
37680                 | LR__6013
37680     74 61 6E 3A 
37684     20          | 	byte	"tan: "
37685     00          | 	byte	0
37686                 | LR__6014
37686     76 61 6C 3A 
3768a     20          | 	byte	"val: "
3768b     00          | 	byte	0
3768c                 | LR__6015
3768c     76 61 6C 3A 
37690     20          | 	byte	"val: "
37691     00          | 	byte	0
37692                 | LR__6016
37692     24          | 	byte	"$"
37693     00          | 	byte	0
37694                 | LR__6017
37694     26 68       | 	byte	"&h"
37696     00          | 	byte	0
37697                 | LR__6018
37697     25          | 	byte	"%"
37698     00          | 	byte	0
37699                 | LR__6019
37699     26 62       | 	byte	"&b"
3769b     00          | 	byte	0
3769c                 | LR__6020
3769c                 | 	byte	
3769c     00          | 	byte	0
3769d                 | LR__6021
3769d     45 78 70 65 
376a1     63 74 65 64 
376a5     20 6E 75 6D 
376a9     62 65 72 2C 
376ad     20 67 6F 74 
376b1     20 73 6F 6D 
376b5     65 74 68 69 
376b9     6E 67 20 65 
376bd     6C 73 65    | 	byte	"Expected number, got something else"
376c0     00          | 	byte	0
376c1                 | LR__6022
376c1     43 61 6E 6E 
376c5     6F 74 20 61 
376c9     64 64 20 61 
376cd     20 6E 75 6D 
376d1     62 65 72 20 
376d5     74 6F 20 61 
376d9     20 73 74 72 
376dd     69 6E 67    | 	byte	"Cannot add a number to a string"
376e0     00          | 	byte	0
376e1                 | LR__6023
376e1     43 61 6E 6E 
376e5     6F 74 20 73 
376e9     75 62 73 74 
376ed     72 61 63 74 
376f1     20 73 74 72 
376f5     69 6E 67 73 | 	byte	"Cannot substract strings"
376f9     00          | 	byte	0
376fa                 | LR__6024
376fa     55 6E 6B 6E 
376fe     6F 77 6E 20 
37702     65 72 72 6F 
37706     72 20 77 68 
3770a     69 6C 65 20 
3770e     61 64 64 69 
37712     6E 67       | 	byte	"Unknown error while adding"
37714     00          | 	byte	0
37715                 | LR__6025
37715     55 6E 6B 6E 
37719     6F 77 6E 20 
3771d     65 72 72 6F 
37721     72 20 77 68 
37725     69 6C 65 20 
37729     73 75 62 73 
3772d     74 72 61 63 
37731     74 69 6E 67 | 	byte	"Unknown error while substracting"
37735     00          | 	byte	0
37736                 | LR__6026
37736     43 61 6E 6E 
3773a     6F 74 20 64 
3773e     6F 20 6C 6F 
37742     67 69 63 20 
37746     6F 70 65 72 
3774a     61 74 69 6F 
3774e     6E 20 6F 6E 
37752     20 73 74 72 
37756     69 6E 67 20 
3775a     6F 72 20 66 
3775e     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
37762     00          | 	byte	0
37763                 | LR__6027
37763     55 6E 6B 6E 
37767     6F 77 6E 20 
3776b     65 72 72 6F 
3776f     72 20 77 68 
37773     69 6C 65 20 
37777     64 6F 69 6E 
3777b     67 20 6C 6F 
3777f     67 69 63 20 
37783     6F 70 65 72 
37787     61 74 69 6F 
3778b     6E          | 	byte	"Unknown error while doing logic operation"
3778c     00          | 	byte	0
3778d                 | LR__6028
3778d     43 61 6E 6E 
37791     6F 74 20 6D 
37795     75 6C 74 69 
37799     70 6C 79 20 
3779d     73 74 72 69 
377a1     6E 67 73    | 	byte	"Cannot multiply strings"
377a4     00          | 	byte	0
377a5                 | LR__6029
377a5     55 6E 6B 6E 
377a9     6F 77 6E 20 
377ad     65 72 72 6F 
377b1     72 20 77 68 
377b5     69 6C 65 20 
377b9     6D 75 6C 74 
377bd     69 70 6C 79 
377c1     69 6E 67    | 	byte	"Unknown error while multiplying"
377c4     00          | 	byte	0
377c5                 | LR__6030
377c5     43 61 6E 6E 
377c9     6F 74 20 64 
377cd     69 76 69 64 
377d1     65 20 73 74 
377d5     72 69 6E 67 
377d9     73          | 	byte	"Cannot divide strings"
377da     00          | 	byte	0
377db                 | LR__6031
377db     55 6E 6B 6E 
377df     6F 77 6E 20 
377e3     65 72 72 6F 
377e7     72 20 77 68 
377eb     69 6C 65 20 
377ef     64 69 76 69 
377f3     64 69 6E 67 | 	byte	"Unknown error while dividing"
377f7     00          | 	byte	0
377f8                 | LR__6032
377f8     43 61 6E 6E 
377fc     6F 74 20 63 
37800     6F 6D 70 75 
37804     74 65 20 61 
37808     20 70 6F 77 
3780c     65 72 20 6F 
37810     66 20 61 20 
37814     73 74 72 69 
37818     6E 67       | 	byte	"Cannot compute a power of a string"
3781a     00          | 	byte	0
3781b                 | LR__6033
3781b     55 6E 6B 6E 
3781f     6F 77 6E 20 
37823     65 72 72 6F 
37827     72 20 77 68 
3782b     69 6C 65 20 
3782f     63 6F 6D 70 
37833     75 74 69 6E 
37837     67 20 61 20 
3783b     70 6F 77 65 
3783f     72          | 	byte	"Unknown error while computing a power"
37840     00          | 	byte	0
37841                 | LR__6034
37841     52 69 67 68 
37845     74 20 70 61 
37849     72 65 6E 74 
3784d     68 65 73 69 
37851     73 20 65 78 
37855     70 65 63 74 
37859     65 64       | 	byte	"Right parenthesis expected"
3785b     00          | 	byte	0
3785c                 | LR__6035
3785c     45 78 70 65 
37860     63 74 65 64 
37864     20 73 74 72 
37868     69 6E 67    | 	byte	"Expected string"
3786b     00          | 	byte	0
3786c                 | LR__6036
3786c     45 78 70 65 
37870     63 74 65 64 
37874     20 66 6C 6F 
37878     61 74       | 	byte	"Expected float"
3787a     00          | 	byte	0
3787b                 | LR__6037
3787b     45 78 70 65 
3787f     63 74 65 64 
37883     20 75 6E 73 
37887     69 67 6E 65 
3788b     64 20 69 6E 
3788f     74 65 67 65 
37893     72          | 	byte	"Expected unsigned integer"
37894     00          | 	byte	0
37895                 | LR__6038
37895     45 78 70 65 
37899     63 74 65 64 
3789d     20 69 6E 74 
378a1     65 67 65 72 | 	byte	"Expected integer"
378a5     00          | 	byte	0
378a6                 | LR__6039
378a6     4E 6F 20 6D 
378aa     6F 72 65 20 
378ae     76 61 72 69 
378b2     61 62 6C 65 
378b6     20 73 6C 6F 
378ba     74 73       | 	byte	"No more variable slots"
378bc     00          | 	byte	0
378bd                 | LR__6040
378bd     56 61 72 69 
378c1     61 62 6C 65 
378c5     20 6E 6F 74 
378c9     20 66 6F 75 
378cd     6E 64       | 	byte	"Variable not found"
378cf     00          | 	byte	0
378d0                 | LR__6041
378d0     43 6F 6D 6D 
378d4     61 20 65 78 
378d8     70 65 63 74 
378dc     65 64       | 	byte	"Comma expected"
378de     00          | 	byte	0
378df                 | LR__6042
378df     43 6F 6D 6D 
378e3     61 20 6F 72 
378e7     20 73 65 6D 
378eb     69 63 6F 6C 
378ef     6F 6E 20 65 
378f3     78 70 65 63 
378f7     74 65 64    | 	byte	"Comma or semicolon expected"
378fa     00          | 	byte	0
378fb                 | LR__6043
378fb     55 6E 6B 6E 
378ff     6F 77 6E 20 
37903     63 6F 6D 6D 
37907     61 6E 64    | 	byte	"Unknown command"
3790a     00          | 	byte	0
3790b                 | LR__6044
3790b     53 74 61 63 
3790f     6B 20 75 6E 
37913     64 65 72 66 
37917     6C 6F 77    | 	byte	"Stack underflow"
3791a     00          | 	byte	0
3791b                 | LR__6045
3791b     43 61 6E 6E 
3791f     6F 74 20 65 
37923     78 65 63 75 
37927     74 65 20 67 
3792b     6F 74 6F 20 
3792f     6F 72 20 67 
37933     6F 73 75 62 
37937     20 69 6E 20 
3793b     74 68 65 20 
3793f     69 6D 6D 65 
37943     64 69 61 74 
37947     65 20 6D 6F 
3794b     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
3794d     00          | 	byte	0
3794e                 | LR__6046
3794e     43 61 6E 6E 
37952     6F 74 20 6C 
37956     6F 61 64 20 
3795a     66 72 6F 6D 
3795e     20 74 68 69 
37962     73 20 66 69 
37966     6C 65       | 	byte	"Cannot load from this file"
37968     00          | 	byte	0
37969                 | LR__6047
37969     54 68 65 20 
3796d     70 72 6F 67 
37971     72 61 6D 20 
37975     69 73 20 65 
37979     6D 70 74 79 | 	byte	"The program is empty"
3797d     00          | 	byte	0
3797e                 | LR__6048
3797e     49 66 20 61 
37982     66 74 65 72 
37986     20 69 66    | 	byte	"If after if"
37989     00          | 	byte	0
3798a                 | LR__6049
3798a     45 6D 70 74 
3798e     79 20 65 78 
37992     70 72 65 73 
37996     73 69 6F 6E | 	byte	"Empty expression"
3799a     00          | 	byte	0
3799b                 | LR__6050
3799b     53 74 72 69 
3799f     6E 67 20 65 
379a3     78 70 65 63 
379a7     74 65 64    | 	byte	"String expected"
379aa     00          | 	byte	0
379ab                 | LR__6051
379ab     49 6E 74 65 
379af     72 70 72 65 
379b3     74 65 72 20 
379b7     69 6E 74 65 
379bb     72 6E 61 6C 
379bf     20 65 72 72 
379c3     6F 72       | 	byte	"Interpreter internal error"
379c5     00          | 	byte	0
379c6                 | LR__6052
379c6     45 78 70 65 
379ca     63 74 65 64 
379ce     20 61 73 73 
379d2     69 67 6E    | 	byte	"Expected assign"
379d5     00          | 	byte	0
379d6                 | LR__6053
379d6     45 78 70 65 
379da     63 74 65 64 
379de     20 27 74 6F 
379e2     27          | 	byte	"Expected 'to'"
379e3     00          | 	byte	0
379e4                 | LR__6054
379e4     45 78 70 65 
379e8     63 74 65 64 
379ec     20 69 6E 74 
379f0     65 67 65 72 
379f4     20 76 61 72 
379f8     69 61 62 6C 
379fc     65          | 	byte	"Expected integer variable"
379fd     00          | 	byte	0
379fe                 | LR__6055
379fe     55 6E 69 6E 
37a02     69 74 69 61 
37a06     6C 69 7A 65 
37a0a     64 20 76 61 
37a0e     72 69 61 62 
37a12     6C 65 20 69 
37a16     6E 20 27 6E 
37a1a     65 78 74 27 
37a1e     2C 20 75 73 
37a22     65 20 27 66 
37a26     6F 72 27 20 
37a2a     62 65 66 6F 
37a2e     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
37a30     00          | 	byte	0
37a31                 | LR__6056
37a31     4E 6F 20 6D 
37a35     6F 72 65 20 
37a39     73 6C 6F 74 
37a3d     73 20 66 6F 
37a41     72 20 27 66 
37a45     6F 72 27    | 	byte	"No more slots for 'for'"
37a48     00          | 	byte	0
37a49                 | LR__6057
37a49     27 4E 65 78 
37a4d     74 27 20 64 
37a51     6F 65 73 6E 
37a55     27 74 20 6D 
37a59     61 74 63 68 
37a5d     20 27 66 6F 
37a61     72 27       | 	byte	"'Next' doesn't match 'for'"
37a63     00          | 	byte	0
37a64                 | LR__6058
37a64     27 47 6F 74 
37a68     6F 27 20 74 
37a6c     61 72 67 65 
37a70     74 20 6C 69 
37a74     6E 65 20 6E 
37a78     6F 74 20 66 
37a7c     6F 75 6E 64 | 	byte	"'Goto' target line not found"
37a80     00          | 	byte	0
37a81                 | LR__6059
37a81     42 61 64 20 
37a85     6E 75 6D 62 
37a89     65 72 20 6F 
37a8d     66 20 70 61 
37a91     72 61 6D 65 
37a95     74 65 72 73 | 	byte	"Bad number of parameters"
37a99     00          | 	byte	0
37a9a                 | LR__6060
37a9a     46 75 6E 63 
37a9e     74 69 6F 6E 
37aa2     20 75 6E 64 
37aa6     65 66 69 6E 
37aaa     65 64 20 66 
37aae     6F 72 20 73 
37ab2     74 72 69 6E 
37ab6     67 73       | 	byte	"Function undefined for strings"
37ab8     00          | 	byte	0
37ab9                 | LR__6061
37ab9     42 61 64 20 
37abd     70 61 72 61 
37ac1     6D 65 74 65 
37ac5     72          | 	byte	"Bad parameter"
37ac6     00          | 	byte	0
37ac7                 | LR__6062
37ac7     43 61 6E 6E 
37acb     6F 74 20 64 
37acf     65 63 6C 61 
37ad3     72 65 20 61 
37ad7     6E 20 61 72 
37adb     72 61 79 3A 
37adf     20 74 68 65 
37ae3     20 76 61 72 
37ae7     69 61 62 6C 
37aeb     65 20 65 78 
37aef     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
37af3     00          | 	byte	0
37af4                 | LR__6063
37af4     45 78 70 65 
37af8     63 74 65 64 
37afc     20 27 28 27 | 	byte	"Expected '('"
37b00     00          | 	byte	0
37b01                 | LR__6064
37b01     45 78 70 65 
37b05     63 74 65 64 
37b09     20 27 29 27 
37b0d     20 6F 72 20 
37b11     27 2C 27    | 	byte	"Expected ')' or ','"
37b14     00          | 	byte	0
37b15                 | LR__6065
37b15     4E 6F 20 6D 
37b19     6F 72 65 20 
37b1d     74 68 61 6E 
37b21     20 33 20 64 
37b25     69 6D 65 6E 
37b29     73 69 6F 6E 
37b2d     73 20 73 75 
37b31     70 70 6F 72 
37b35     74 65 64    | 	byte	"No more than 3 dimensions supported"
37b38     00          | 	byte	0
37b39                 | LR__6066
37b39     56 61 72 69 
37b3d     61 62 6C 65 
37b41     20 6E 61 6D 
37b45     65 20 65 78 
37b49     70 65 63 74 
37b4d     65 64       | 	byte	"Variable name expected"
37b4f     00          | 	byte	0
37b50                 | LR__6067
37b50     54 79 70 65 
37b54     20 6E 61 6D 
37b58     65 20 65 78 
37b5c     70 65 63 74 
37b60     65 64       | 	byte	"Type name expected"
37b62     00          | 	byte	0
37b63                 | LR__6068
37b63     54 79 70 65 
37b67     20 6E 6F 74 
37b6b     20 73 75 70 
37b6f     70 6F 72 74 
37b73     65 64 20 79 
37b77     65 74       | 	byte	"Type not supported yet"
37b79     00          | 	byte	0
37b7a                 | LR__6069
37b7a     41 72 72 61 
37b7e     79 20 69 6E 
37b82     64 65 78 20 
37b86     6F 75 74 20 
37b8a     6F 66 20 72 
37b8e     61 6E 67 65 | 	byte	"Array index out of range"
37b92     00          | 	byte	0
37b93                 | LR__6070
37b93     42 61 64 20 
37b97     74 79 70 65 
37b9b     20 77 68 69 
37b9f     6C 65 20 61 
37ba3     73 73 69 67 
37ba7     6E 69 6E 67 
37bab     20 74 6F 20 
37baf     61 72 72 61 
37bb3     79          | 	byte	"Bad type while assigning to array"
37bb4     00          | 	byte	0
37bb5                 | LR__6071
37bb5     54 6F 6F 20 
37bb9     6D 61 6E 79 
37bbd     20 76 61 72 
37bc1     69 61 62 6C 
37bc5     65 73       | 	byte	"Too many variables"
37bc7     00          | 	byte	0
37bc8                 | LR__6072
37bc8     27 54 68 65 
37bcc     6E 27 20 65 
37bd0     78 70 65 63 
37bd4     74 65 64    | 	byte	"'Then' expected"
37bd7     00          | 	byte	0
37bd8                 | LR__6073
37bd8     44 69 72 65 
37bdc     63 74 6F 72 
37be0     79 20 64 6F 
37be4     65 73 6E 27 
37be8     74 20 65 78 
37bec     69 73 74    | 	byte	"Directory doesn't exist"
37bef     00          | 	byte	0
37bf0                 | LR__6074
37bf0     55 6E 65 78 
37bf4     70 65 63 74 
37bf8     65 64 20 65 
37bfc     6E 64 20 6F 
37c00     66 20 6C 69 
37c04     6E 65       | 	byte	"Unexpected end of line"
37c06     00          | 	byte	0
37c07                 | LR__6075
37c07     4E 6F 20 6D 
37c0b     6F 72 65 20 
37c0f     64 61 74 61 | 	byte	"No more data"
37c13     00          | 	byte	0
37c14                 | LR__6076
37c14     45 72 72 6F 
37c18     72 20       | 	byte	"Error "
37c1a     00          | 	byte	0
37c1b                 | LR__6077
37c1b     20 2D 20    | 	byte	" - "
37c1e     00          | 	byte	0
37c1f                 | LR__6078
37c1f     20 69 6E 20 
37c23     6C 69 6E 65 
37c27     20          | 	byte	" in line "
37c28     00          | 	byte	0
37c29                 | LR__6079
37c29                 | 	byte	
37c29     00          | 	byte	0
37c2a                 | LR__6080
37c2a     2F 73 64    | 	byte	"/sd"
37c2d     00          | 	byte	0
37c2e                 | LR__6081
37c2e     2F 73 64 2F 
37c32     62 61 73    | 	byte	"/sd/bas"
37c35     00          | 	byte	0
37c36                 | LR__6082
37c36     2F 73 64 2F 
37c3a     62 61 73    | 	byte	"/sd/bas"
37c3d     00          | 	byte	0
37c3e                 | LR__6083
37c3e     20 42 41 53 
37c42     49 43 20 62 
37c46     79 74 65 73 
37c4a     20 66 72 65 
37c4e     65          | 	byte	" BASIC bytes free"
37c4f     00          | 	byte	0
37c50                 | LR__6084
37c50     52 65 61 64 
37c54     79          | 	byte	"Ready"
37c55     00          | 	byte	0
37c56                 | LR__6085
37c56     6E 6F 6E 61 
37c5a     6D 65 2E 62 
37c5e     61 73       | 	byte	"noname.bas"
37c60     00          | 	byte	0
37c61                 | LR__6086
37c61     2F 73 64 2F 
37c65     62 61 73 2F 
37c69     61 75 74 6F 
37c6d     72 75 6E 2E 
37c71     62 61 73    | 	byte	"/sd/bas/autorun.bas"
37c74     00          | 	byte	0
37c75                 | LR__6087
37c75     72 75 6E 20 
37c79     61 75 74 6F 
37c7d     72 75 6E 2E 
37c81     62 61 73    | 	byte	"run autorun.bas"
37c84     00          | 	byte	0
37c85                 | LR__6088
37c85                 | 	byte	
37c85     00          | 	byte	0
37c86     00 00       | 	alignl
37c88                 | _dat_
37c88     00 00 00 00 
37c8c     00 00 00 00 
37c90     00 00 00 00 
37c94     00 00 00 00 | 	byte	$00[16]
37c98     61 41 17 0E 
37c9c     62 42 00 00 
37ca0     63 43 19 10 
37ca4     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
37ca8     65 45 18 0F 
37cac     66 46 00 00 
37cb0     67 47 00 00 
37cb4     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
37cb8     69 49 00 00 
37cbc     6A 4A 00 00 
37cc0     6B 4B 00 00 
37cc4     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
37cc8     6D 4D 00 00 
37ccc     6E 4E 1A 11 
37cd0     6F 4F 1E 15 
37cd4     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
37cd8     71 51 00 00 
37cdc     72 52 00 00 
37ce0     73 53 1B 12 
37ce4     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
37ce8     75 55 00 00 
37cec     76 56 00 00 
37cf0     77 57 00 00 
37cf4     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
37cf8     79 59 00 00 
37cfc     7A 5A 1D 14 
37d00     31 21 04 00 
37d04     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
37d08     33 23 06 00 
37d0c     34 24 07 00 
37d10     35 25 08 00 
37d14     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
37d18     37 26 0A 00 
37d1c     38 2A 0B 00 
37d20     39 28 0C 00 
37d24     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
37d28     8D 8D 00 00 
37d2c     9B 9B 00 00 
37d30     88 88 00 00 
37d34     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
37d38     20 20 00 00 
37d3c     2D 5F 00 00 
37d40     3D 2B 00 00 
37d44     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
37d48     5D 7D 00 00 
37d4c     5C 7C 00 00 
37d50     23 7E 00 00 
37d54     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
37d58     27 22 00 00 
37d5c     60 7E 03 00 
37d60     2C 3C 00 00 
37d64     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
37d68     2F 3F 00 00 
37d6c     B9 B9 00 00 
37d70     BA 00 00 00 
37d74     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
37d78     BC 00 00 00 
37d7c     BD 00 00 00 
37d80     BE 00 00 00 
37d84     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
37d88     C0 00 00 00 
37d8c     C1 00 00 00 
37d90     C2 00 00 00 
37d94     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
37d98     C4 00 00 00 
37d9c     C5 00 00 00 
37da0     C6 00 00 00 
37da4     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
37da8     C8 00 00 00 
37dac     C9 00 00 00 
37db0     CA 00 00 00 
37db4     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
37db8     7F 7F 00 00 
37dbc     CC 00 00 00 
37dc0     CD 00 00 00 
37dc4     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
37dc8     CF 00 00 00 
37dcc     D0 00 00 00 
37dd0     D1 00 00 00 
37dd4     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
37dd8     2F 2F 00 00 
37ddc     2A 2A 00 00 
37de0     2D 2D 00 00 
37de4     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
37de8     8D 8D 00 00 
37dec     31 31 00 00 
37df0     32 32 00 00 
37df4     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
37df8     34 34 00 00 
37dfc     35 35 00 00 
37e00     36 36 00 00 
37e04     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
37e08     38 38 00 00 
37e0c     39 39 00 00 
37e10     30 30 00 00 
37e14     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
37e18     5C 7C 00 00 
37e1c     00 00 00 00 
37e20     00 00 00 00 
37e24     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
37e28     00 00 00 00 
      ...             
37e80     00 00 00 00 
37e84     00 00 00 00 | 	byte	$00[96]
37e88     2B 00 A6 F2 
37e8c     24 A7 09 80 
37e90     5B 88 4D 89 
37e94     80 88 A5 88 | atari_spl file "atari.spl"
37e98     6D 88 B8 88 
37e9c     80 88 CB 88 
37ea0     92 88 A5 88 
37ea4     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
37ea8     A5 88 CA 88 
37eac     A6 88 DD 88 
37eb0     B8 88 AB 89 
37eb4     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
37eb8     C8 AD C6 F1 
37ebc     91 06 B6 FF 
37ec0     13 00 4A 00 
37ec4     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
37ec8     5D 00 5E 00 
37ecc     5D 00 5E 00 
37ed0     5E 00 5D 00 
37ed4     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
37ed8     38 00 83 00 
37edc     25 00 83 00 
37ee0     C3 FE D1 04 
37ee4     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
37ee8     48 88 38 85 
37eec     41 8A CB 88 
37ef0     28 89 B8 88 
37ef4     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
37ef8     15 89 03 89 
37efc     02 89 15 89 
37f00     16 89 15 89 
37f04     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
37f08     15 89 3A 89 
37f0c     72 89 E3 89 
37f10     52 83 AD 97 
37f14     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
37f18     0C 02 B6 FF 
37f1c     E1 00 A8 00 
37f20     F3 00 A8 00 
37f24     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
37f28     CE 00 CD 00 
37f2c     CD 00 BA 00 
37f30     E1 00 BB 00 
37f34     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
37f38     DF 00 C9 FF 
37f3c     E6 01 B6 06 
37f40     EE DD 8D 98 
37f44     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
37f48     97 89 73 89 
37f4c     3B 89 60 89 
37f50     60 89 60 89 
37f54     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
37f58     73 89 72 89 
37f5c     85 89 73 89 
37f60     AA 89 60 89 
37f64     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
37f68     E8 8A 18 86 
37f6c     92 88 A5 C2 
37f70     E0 00 C3 05 
37f74     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
37f78     F2 00 64 01 
37f7c     06 01 3E 01 
37f80     2B 01 2B 01 
37f84     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
37f88     2B 01 2A 01 
37f8c     2B 01 2B 01 
37f90     2B 01 18 01 
37f94     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
37f98     39 07 61 F3 
37f9c     C0 AF 37 85 
37fa0     0F 88 8B 8A 
37fa4     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
37fa8     AB 89 D0 89 
37fac     AB 89 D0 89 
37fb0     D0 89 CF 89 
37fb4     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
37fb8     D0 89 F5 89 
37fbc     BD 89 08 8A 
37fc0     CF 89 E8 8A 
37fc4     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
37fc8     53 B3 0D F8 
37fcc     F4 07 38 00 
37fd0     63 01 63 01 
37fd4     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
37fd8     88 01 88 01 
37fdc     76 01 88 01 
37fe0     88 01 89 01 
37fe4     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
37fe8     75 01 AE 01 
37fec     76 01 88 01 
37ff0     4A 00 46 06 
37ff4     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
37ff8     08 8A 9A 86 
37ffc     33 8B 08 8A 
38000     2D 8A F5 89 
38004     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
38008     2D 8A 2D 8A 
3800c     2E 8A 1B 8A 
38010     40 8A 2D 8A 
38014     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
38018     2E 8A 79 8A 
3801c     66 8A C8 8B 
38020     72 82 2B 97 
38024     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
38028     1D 02 05 01 
3802c     F8 01 C0 01 
38030     0B 02 C0 01 
38034     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
38038     F9 01 D3 01 
3803c     F8 01 D3 01 
38040     F8 01 D2 01 
38044     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
38048     E6 01 2B 01 
3804c     8E 02 5F 07 
38050     F7 E2 ED 9C 
38054     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
38058     E8 8A 78 8A 
3805c     78 8A 65 8A 
38060     8B 8A 78 8A 
38064     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
38068     8B 8A 9D 8A 
3806c     9D 8A 8B 8A 
38070     C2 8A 78 8A 
38074     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
38078     70 8C 18 86 
3807c     8B 8A 23 C9 
38080     CB 03 C4 05 
38084     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
38088     0B 02 7B 02 
3808c     1E 02 55 02 
38090     30 02 43 02 
38094     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
38098     43 02 44 02 
3809c     43 02 30 02 
380a0     68 02 31 02 
380a4     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
380a8     07 08 3F F7 
380ac     73 B2 13 85 
380b0     15 89 ED 8B 
380b4     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
380b8     B0 8A FB 8A 
380bc     D5 8A FA 8A 
380c0     E8 8A FB 8A 
380c4     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
380c8     E8 8A 21 8B 
380cc     E7 8A 33 8B 
380d0     E8 8A 26 8C 
380d4     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
380d8     8D B0 27 F6 
380dc     9C 08 AD 01 
380e0     7B 02 8D 02 
380e4     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
380e8     A1 02 A0 02 
380ec     A1 02 A0 02 
380f0     A0 02 A0 02 
380f4     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
380f8     7B 02 D8 02 
380fc     7B 02 C6 02 
38100     3E 01 C3 05 
38104     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
38108     00 8C 2A 86 
3810c     E0 8C FA 8A 
38110     6A 8B FB 8A 
38114     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
38118     45 8B 45 8B 
3811c     45 8B 6B 8B 
38120     46 8B 59 8B 
38124     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
38128     6B 8B 6B 8B 
3812c     6B 8B 6B 8B 
38130     7D 8B 7D 8B 
38134     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
38138     90 8B 91 8B 
3813c     90 8B 90 8B 
38140     A3 8B A3 8B 
38144     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
38148     B5 8B B6 8B 
3814c     B5 8B B5 8B 
38150     B6 8B C8 8B 
38154     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
38158     C8 8B DA 8B 
3815c     DB 8B DB 8B 
38160     DB 8B DC 8B 
38164     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
38168     EE 8B EE 8B 
3816c     00 8C 01 8C 
38170     00 8C 01 8C 
38174     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
38178     12 8C 13 8C 
3817c     13 8C 26 8C 
38180     26 8C 26 8C 
38184     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
38188     38 8C 38 8C 
3818c     38 8C 38 8C 
38190     4B 8C 4B 8C 
38194     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
38198     5E 8C 5E 8C 
3819c     5E 8C 5E 8C 
381a0     70 8C 70 8C 
381a4     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
381a8     70 8C 83 8C 
381ac     83 8C 83 8C 
381b0     83 8C 96 8C 
381b4     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
381b8     95 8C A9 8C 
381bc     A9 8C A8 8C 
381c0     A8 8C A8 8C 
381c4     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
381c8     BB 8C BB 8C 
381cc     BB 8C CE 8C 
381d0     CE 8C CE 8C 
381d4     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
381d8     E0 8C E1 8C 
381dc     E1 8C E0 8C 
381e0     F4 8C F2 8C 
381e4     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
381e8     05 8D 05 8D 
381ec     06 8D 06 8D 
381f0     19 8D 19 8D 
381f4     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
381f8     18 8D 2B 8D 
381fc     2B 8D 2B 8D 
38200     2A 8D 3E 8D 
38204     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
38208     3E 8D 51 8D 
3820c     50 8D 50 8D 
38210     50 8D 51 8D 
38214     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
38218     63 8D 64 8D 
3821c     76 8D 75 8D 
38220     75 8D 76 8D 
38224     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
38228     88 8D 88 8D 
3822c     89 8D 9B 8D 
38230     9A 8D 9B 8D 
38234     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
38238     AD 8D AE 8D 
3823c     AD 8D AE 8D 
38240     C1 8D C1 8D 
38244     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
38248     D3 8D D3 8D 
3824c     D3 8D D3 8D 
38250     D3 8D E6 8D 
38254     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
38258     E6 8D E6 8D 
3825c     F9 8D F9 8D 
38260     F9 8D F8 8D 
38264     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
38268     0B 8E 0B 8E 
3826c     1D 8E 1D 8E 
38270     1E 8E 1E 8E 
38274     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
38278     31 8E 31 8E 
3827c     31 8E 42 8E 
38280     43 8E 43 8E 
38284     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
38288     56 8E 56 8E 
3828c     55 8E 56 8E 
38290     68 8E 69 8E 
38294     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
38298     69 8E 7B 8E 
3829c     7C 8E 7B 8E 
382a0     7B 8E 8D 8E 
382a4     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
382a8     8D 8E A1 8E 
382ac     A0 8E A1 8E 
382b0     A1 8E A0 8E 
382b4     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
382b8     B3 8E B3 8E 
382bc     C6 8E C5 8E 
382c0     C6 8E C6 8E 
382c4     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
382c8     D8 8E D9 8E 
382cc     D8 8E EC 8E 
382d0     EB 8E EC 8E 
382d4     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
382d8     FE 8E FE 8E 
382dc     FE 8E FE 8E 
382e0     10 8F 10 8F 
382e4     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
382e8     11 8F 23 8F 
382ec     24 8F 23 8F 
382f0     24 8F 37 8F 
382f4     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
382f8     36 8F 36 8F 
382fc     48 8F 49 8F 
38300     49 8F 49 8F 
38304     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
38308     5B 8F 5C 8F 
3830c     5B 8F 6E 8F 
38310     6E 8F 6E 8F 
38314     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
38318     81 8F 81 8F 
3831c     81 8F 81 8F 
38320     93 8F 93 8F 
38324     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
38328     93 8F A6 8F 
3832c     A6 8F A6 8F 
38330     A6 8F B9 8F 
38334     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
38338     B9 8F B9 8F 
3833c     CC 8F CB 8F 
38340     CB 8F CC 8F 
38344     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
38348     DF 8F DE 8F 
3834c     DE 8F F1 8F 
38350     F1 8F F1 8F 
38354     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
38358     03 90 04 90 
3835c     04 90 04 90 
38360     16 90 17 90 
38364     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
38368     29 90 28 90 
3836c     29 90 28 90 
38370     29 90 3C 90 
38374     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
38378     3C 90 4F 90 
3837c     4E 90 4E 90 
38380     4E 90 4E 90 
38384     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
38388     61 90 61 90 
3838c     73 90 74 90 
38390     74 90 74 90 
38394     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
38398     87 90 86 90 
3839c     87 90 86 90 
383a0     99 90 99 90 
383a4     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
383a8     AB 90 AB 90 
383ac     AC 90 AB 90 
383b0     AB 90 BF 90 
383b4     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
383b8     BE 90 D1 90 
383bc     D0 90 D1 90 
383c0     D1 90 D1 90 
383c4     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
383c8     E3 90 E4 90 
383cc     F6 90 F6 90 
383d0     F6 90 F6 90 
383d4     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
383d8     09 91 0A 91 
383dc     0A 91 1C 91 
383e0     1C 91 1C 91 
383e4     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
383e8     2F 91 2E 91 
383ec     2F 91 2F 91 
383f0     2E 91 41 91 
383f4     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
383f8     41 91 53 91 
383fc     54 91 54 91 
38400     53 91 54 91 
38404     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
38408     67 91 67 91 
3840c     79 91 7A 91 
38410     79 91 78 91 
38414     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
38418     8C 91 8B 91 
3841c     8C 91 8C 91 
38420     9E 91 9E 91 
38424     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
38428     B1 91 B1 91 
3842c     B2 91 B1 91 
38430     B1 91 C4 91 
38434     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
38438     C4 91 D6 91 
3843c     D7 91 D7 91 
38440     D7 91 D6 91 
38444     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
38448     EA 91 EA 91 
3844c     EA 91 FC 91 
38450     FC 91 FB 91 
38454     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
38458     0E 92 0F 92 
3845c     0F 92 0E 92 
38460     21 92 21 92 
38464     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
38468     21 92 34 92 
3846c     33 92 34 92 
38470     34 92 47 92 
38474     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
38478     46 92 47 92 
3847c     59 92 59 92 
38480     59 92 59 92 
38484     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
38488     6C 92 6C 92 
3848c     6B 92 7E 92 
38490     7E 92 7E 92 
38494     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
38498     92 92 91 92 
3849c     91 92 90 92 
384a0     91 92 A4 92 
384a4     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
384a8     A3 92 B6 92 
384ac     B6 92 B7 92 
384b0     B7 92 B6 92 
384b4     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
384b8     CA 92 C9 92 
384bc     CA 92 DC 92 
384c0     DC 92 DC 92 
384c4     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
384c8     EF 92 EF 92 
384cc     EF 92 EF 92 
384d0     01 93 01 93 
384d4     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
384d8     15 93 14 93 
384dc     14 93 14 93 
384e0     14 93 27 93 
384e4     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
384e8     27 93 39 93 
384ec     3A 93 39 93 
384f0     39 93 39 93 
384f4     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
384f8     4B 93 4C 93 
384fc     5F 93 5F 93 
38500     5F 93 5E 93 
38504     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
38508     5F 93 84 93 
3850c     4C 93 96 93 
38510     5F 93 AE 94 
38514     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
38518     7B C1 00 00 
3851c     00 00 00 00 
38520     00 00 00 00 
38524     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38528     00 00 00 00 | 	byte	$00, $00, $00, $00
3852c     7A D7 00 80 
38530     87 8A 48 8F 
38534     EC 8C 76 8D 
38538     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
3853c     3C 8D 82 8D 
38540     42 8D 88 8D 
38544     8C 8D 8E 8D 
38548     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
3854c     97 8D DE 8D 
38550     E1 8D F1 8E 
38554     D8 8C A3 83 
38558     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
3855c     65 71 C9 65 
38560     FC 64 C4 65 
38564     C1 65 BF 65 
38568     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
3856c     B6 65 B4 65 
38570     B2 65 AE 65 
38574     AC 65 ED 65 
38578     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
3857c     5E 65 25 66 
38580     FA 62 23 6B 
38584     B5 6C 61 0A 
38588     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
3858c     5D 90 BE 8D 
38590     47 8E C3 8D 
38594     09 8E C9 8D 
38598     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
3859c     15 8E 19 8E 
385a0     1B 8E 62 8E 
385a4     64 8E 68 8E 
385a8     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
385ac     B5 8E 4C 90 
385b0     FA 84 3C 9D 
385b4     98 13 79 6D 
385b8     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
385bc     D9 66 50 66 
385c0     D4 66 4B 66 
385c4     8C 66 46 66 
385c8     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
385cc     81 66 3A 66 
385d0     7C 66 36 66 
385d4     76 66 30 66 
385d8     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
385dc     6B 66 88 72 
385e0     BF 37 E7 B7 
385e4     75 83 8B 8E 
385e8     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
385ec     94 8E 96 8E 
385f0     DD 8E 9C 8E 
385f4     E2 8E A2 8E 
385f8     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
385fc     EE 8E AE 8E 
38600     38 8F B5 8E 
38604     3F 8F FD 8E 
38608     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
3860c     A5 87 1E E3 
38610     6D 5D FA 71 
38614     41 64 25 67 
38618     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
3861c     D9 66 1A 67 
38620     18 67 15 67 
38624     12 67 0F 67 
38628     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
3862c     07 67 C0 66 
38630     01 67 BC 66 
38634     B8 66 DE 64 
38638     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
3863c     43 E5 1F 8B 
38640     14 8A F1 90 
38644     1C 8F 63 8F 
38648     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
3864c     29 8F 6E 8F 
38650     72 8F 75 8F 
38654     34 8F BE 8F 
38658     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
3865c     84 8F 87 8F 
38660     CC 8F 56 90 
38664     67 91 49 80 
38668     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
3866c     46 77 A6 66 
38670     E8 66 B0 67 
38674     AD 67 ED 67 
38678     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
3867c     A2 67 E3 67 
38680     9D 67 9A 67 
38684     98 67 94 67 
38688     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
3868c     49 67 CD 67 
38690     28 65 5F 6E 
38694     82 67 3A 01 
38698     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
3869c     C2 91 A9 8F 
386a0     EF 8F AE 8F 
386a4     F4 8F B5 8F 
386a8     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
386ac     01 90 03 90 
386b0     07 90 09 90 
386b4     0C 90 53 90 
386b8     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
386bc     18 90 44 93 
386c0     85 84 D6 9D 
386c4     87 1F 2F 75 
386c8     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
386cc     C4 68 F6 67 
386d0     BE 68 F1 67 
386d4     76 68 2E 68 
386d8     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
386dc     27 68 24 68 
386e0     64 68 1E 68 
386e4     5F 68 19 68 
386e8     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
386ec     DC 68 56 72 
386f0     7E 36 C2 B8 
386f4     D7 84 73 90 
386f8     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
386fc     7B 90 7F 90 
38700     82 90 84 90 
38704     CB 90 8B 90 
38708     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
3870c     D7 90 96 90 
38710     20 91 59 90 
38714     25 91 A2 90 
38718     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
3871c     D0 89 40 EE 
38720     12 64 C4 71 
38724     29 66 0C 69 
38728     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
3872c     C0 68 02 69 
38730     FE 68 FB 68 
38734     F9 68 F6 68 
38738     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
3873c     EE 68 A8 68 
38740     2C 69 5F 68 
38744     E2 68 81 66 
38748     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
3874c     1E EB A6 8A 
38750     73 8B 5E 93 
38754     7B 90 48 91 
38758     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
3875c     0D 91 11 91 
38760     14 91 16 91 
38764     5C 91 1C 91 
38768     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
3876c     68 91 AF 91 
38770     2A 91 B5 91 
38774     75 91 1A 94 
38778     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
3877c     70 0E CB 6C 
38780     5D 6E C4 67 
38784     99 69 54 69 
38788     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
3878c     D2 69 49 69 
38790     89 69 86 69 
38794     40 69 C4 69 
38798     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
3879c     35 69 76 69 
387a0     58 67 EB 6D 
387a4     E9 6D 89 0F 
387a8     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
387ac     33 94 94 91 
387b0     D9 91 56 91 
387b4     E0 91 9F 91 
387b8     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
387bc     EC 91 EE 91 
387c0     F1 91 F4 91 
387c4     F7 91 3D 92 
387c8     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
387cc     46 92 21 94 
387d0     11 89 A4 9D 
387d4     FD 0E 8F 6C 
387d8     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
387dc     28 6A E1 69 
387e0     65 6A 1F 6A 
387e4     5F 6A 1A 6A 
387e8     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
387ec     54 6A 0F 6A 
387f0     4F 6A 09 6A 
387f4     06 6A 03 6A 
387f8     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
387fc     23 68 69 77 
38800     3A 4D 38 CA 
38804     38 86 4E 91 
38808     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
3880c     64 92 24 92 
38810     6A 92 2A 92 
38814     70 92 30 92 
38818     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
3881c     7B 92 7E 92 
38820     C5 92 84 92 
38824     CB 92 8A 92 
38828     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
3882c     4D 8D F9 E2 
38830     97 59 FE 74 
38834     DB 68 6D 6A 
38838     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
3883c     A8 6A A5 6A 
38840     A3 6A 9F 6A 
38844     9D 6A 9B 6A 
38848     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
3884c     D6 6A 8F 6A 
38850     CF 6A 46 6A 
38854     CA 6A E1 67 
38858     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
3885c     D3 F7 15 92 
38860     90 8C BF 94 
38864     A6 92 EB 92 
38868     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
3886c     B1 92 F7 92 
38870     FA 92 FD 92 
38874     00 93 02 93 
38878     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
3887c     4F 93 52 93 
38880     54 93 22 94 
38884     5A 93 8F 88 
38888     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
3888c     1C 77 07 6C 
38890     E8 69 7A 6B 
38894     34 6B 75 6B 
38898     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
3889c     29 6B 26 6B 
388a0     24 6B 21 6B 
388a4     1D 6B 5E 6B 
388a8     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
388ac     12 6B 52 6B 
388b0     34 69 34 6E 
388b4     BA 73 A4 24 
388b8     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
388bc     7A 94 B3 93 
388c0     72 93 31 93 
388c4     78 93 7A 93 
388c8     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
388cc     83 93 86 93 
388d0     89 93 D0 93 
388d4     D2 93 D5 93 
388d8     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
388dc     DD 93 40 96 
388e0     30 8B 99 9C 
388e4     52 10 94 71 
388e8     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
388ec     46 6C 79 6B 
388f0     40 6C B7 6B 
388f4     F7 6B B1 6B 
388f8     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
388fc     EC 6B A5 6B 
38900     A2 6B 9F 6B 
38904     9D 6B 9A 6B 
38908     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
3890c     C8 6A E4 76 
38910     20 4B F9 CE 
38914     2E 8A 1A 92 
38918     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
3891c     FB 93 BA 93 
38920     01 94 03 94 
38924     4A 94 09 94 
38928     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
3892c     55 94 14 94 
38930     9E 94 1A 94 
38934     61 94 20 94 
38938     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
3893c     3E 87 E5 CD 
38940     5F 50 6C 78 
38944     B5 6A 04 6C 
38948     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
3894c     83 6C 7F 6C 
38950     7C 6C 36 6C 
38954     76 6C 74 6C 
38958     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
3895c     6B 6C 25 6C 
38960     66 6C 1F 6C 
38964     1D 6C 41 6A 
38968     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
3896c     BA FA FC 94 
38970     5B 8D 97 96 
38974     3B 94 C5 94 
38978     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
3897c     89 94 8C 94 
38980     8F 94 92 94 
38984     94 94 DB 94 
38988     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
3898c     E4 94 E7 94 
38990     2D 95 74 95 
38994     C8 96 15 89 
38998     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
3899c     CB 75 31 6F 
389a0     7E 6B 10 6D 
389a4     C9 6C 0A 6D 
389a8     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
389ac     BD 6C FF 6C 
389b0     FB 6C F9 6C 
389b4     B2 6C F3 6C 
389b8     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
389bc     A7 6C E8 6C 
389c0     0D 6B 85 6F 
389c4     C7 74 10 28 
389c8     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
389cc     96 96 47 95 
389d0     06 95 0A 95 
389d4     0C 95 0F 95 
389d8     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
389dc     17 95 5E 95 
389e0     61 95 63 95 
389e4     22 95 AC 95 
389e8     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
389ec     72 95 17 98 
389f0     59 8E 01 96 
389f4     CF FC 5A 68 
389f8     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
389fc     96 6D 50 6D 
38a00     D5 6D 4A 6D 
38a04     8C 6D 89 6D 
38a08     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
38a0c     80 6D 3A 6D 
38a10     7A 6D 77 6D 
38a14     75 6D 71 6D 
38a18     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
38a1c     18 6C BC 78 
38a20     9A 4F 7E CF 
38a24     1F 89 F1 93 
38a28     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
38a2c     D2 95 4E 95 
38a30     D7 95 53 95 
38a34     DD 95 E0 95 
38a38     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
38a3c     A5 95 EB 95 
38a40     EE 95 F0 95 
38a44     37 96 B3 95 
38a48     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
38a4c     1A 98 D5 8D 
38a50     C5 9F CD 0F 
38a54     0F 71 F3 73 
38a58     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
38a5c     D9 6D 5E 6E 
38a60     D3 6D 58 6E 
38a64     12 6E 0F 6E 
38a68     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
38a6c     49 6E BF 6D 
38a70     87 6E 76 6D 
38a74     81 6E 11 6B 
38a78     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
38a7c     3F 09 44 95 
38a80     E5 8D 3F 99 
38a84     D4 95 A2 96 
38a88     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
38a8c     23 96 69 96 
38a90     6B 96 6E 96 
38a94     71 96 74 96 
38a98     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
38a9c     BF 96 3C 96 
38aa0     C6 96 C8 96 
38aa4     A3 98 51 8D 
38aa8     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
38aac     CF 75 29 73 
38ab0     90 6C EC 6E 
38ab4     62 6E E7 6E 
38ab8     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
38abc     9A 6E 98 6E 
38ac0     95 6E 91 6E 
38ac4     8E 6E CF 6E 
38ac8     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
38acc     40 6E C3 6E 
38ad0     E8 6C 45 6F 
38ad4     A5 7B C9 35 
38ad8     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
38adc     2D 98 23 97 
38ae0     E1 96 A0 96 
38ae4     A4 96 EA 96 
38ae8     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
38aec     AF 96 F4 96 
38af0     F8 96 3E 97 
38af4     FD 96 43 97 
38af8     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
38afc     08 97 6B 99 
38b00     D6 92 88 91 
38b04     D8 EE 84 66 
38b08     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
38b0c     2E 6F E7 6E 
38b10     6C 6F 24 6F 
38b14     21 6F 1F 6F 
38b18     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
38b1c     17 6F 13 6F 
38b20     54 6F 0E 6F 
38b24     0B 6F 4B 6F 
38b28     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
38b2c     27 6D 1C 7B 
38b30     19 59 9F DB 
38b34     66 8E BC 94 
38b38     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
38b3c     67 97 26 97 
38b40     6D 97 2B 97 
38b44     72 97 32 97 
38b48     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
38b4c     C1 97 7F 97 
38b50     C6 97 85 97 
38b54     CB 97 CE 97 
38b58     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
38b5c     EC 8A C4 C6 
38b60     68 4C F4 7D 
38b64     63 6E E8 6E 
38b68     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
38b6c     ED 6F A7 6F 
38b70     E7 6F A0 6F 
38b74     E1 6F 9B 6F 
38b78     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
38b7c     D5 6F 8F 6F 
38b80     CE 6F 45 6F 
38b84     86 6F 68 6D 
38b88     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
38b8c     C0 13 AD A2 
38b90     A7 8E 79 99 
38b94     E6 97 E8 97 
38b98     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
38b9c     F1 97 F3 97 
38ba0     F6 97 F9 97 
38ba4     FB 97 FE 97 
38ba8     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
38bac     4A 98 0A 98 
38bb0     93 98 0F 98 
38bb4     7F 9B BF 8C 
38bb8     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
38bbc     91 7B 62 73 
38bc0     1A 6E B9 70 
38bc4     EB 6F B3 70 
38bc8     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
38bcc     25 70 20 70 
38bd0     1E 70 1B 70 
38bd4     18 70 15 70 
38bd8     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
38bdc     0D 70 09 70 
38be0     07 70 03 70 
38be4     01 70 FD 6F 
38be8     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
38bec     F6 6F F2 6F 
38bf0     EF 6F EC 6F 
38bf4     2C 70 E6 6F 
38bf8     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
38bfc     DD 6F 97 6F 
38c00     D7 6F 84 6E 
38c04     8F 6F 3F 7D 
38c08     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
38c0a     FF FF FF FF 
38c0e     FF FF       | atarist_spl file "atarist.spl" '512
38c10     00 00 00 00 
38c14     00 00 00 00 
38c18     00 00       | 	byte	$00[10]
38c1a     17 7F F2 7F 
38c1e     B2 7F 72 7F 
38c22     33 7F F4 7E 
38c26     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
38c2a     36 7E F5 7D 
38c2e     E9 51 F2 0D 
38c32     8E 00 F3 FD 
38c36     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
38c3a     57 FD 58 FD 
38c3e     5B FD 5C FD 
38c42     5C FD 60 7D 
38c46     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
38c4a     D6 7C 98 7C 
38c4e     59 7C 1A 7C 
38c52     DC 7B 9E 7B 
38c56     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
38c5a     F3 05 00 FD 
38c5e     41 FB EA FA 
38c62     D9 FA DB FA 
38c66     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
38c6a     E4 FA 9B 36 
38c6e     F8 7A C0 7A 
38c72     84 7A 45 7A 
38c76     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
38c7a     8E 79 51 79 
38c7e     15 79 D7 78 
38c82     3C 1F EB FF 
38c86     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
38c8a     6D F8 65 F8 
38c8e     68 F8 6D F8 
38c92     70 F8 74 F8 
38c96     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
38c9a     AB 60 79 60 
38c9e     4B 60 1A 60 
38ca2     E9 5F B9 5F 
38ca6     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
38caa     FB 59 B2 0B 
38cae     92 FA 3A F7 
38cb2     96 F6 79 F6 
38cb6     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
38cba     82 F6 86 F6 
38cbe     8C F6 DB 5D 
38cc2     F1 5E C1 5E 
38cc6     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
38cca     34 5E 04 5E 
38cce     D6 5D A6 5D 
38cd2     78 5D D4 3E 
38cd6     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
38cda     27 F5 BA F4 
38cde     AB F4 AD F4 
38ce2     B2 F4 B8 F4 
38ce6     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
38cea     26 5D 2B 5D 
38cee     FC 5C CD 5C 
38cf2     9F 5C 70 5C 
38cf6     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
38cfa     E5 5B B8 5B 
38cfe     DB 24 A7 FC 
38d02     D1 F4 4D F3 
38d06     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
38d0a     04 F3 0B F3 
38d0e     11 F3 16 F3 
38d12     DE 18 98 5B 
38d16     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
38d1a     4E 4A 29 48 
38d1e     A0 47 6A 47 
38d22     43 47 20 47 
38d26     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
38d2a     E2 F6 98 F2 
38d2e     C5 F1 A3 F1 
38d32     A3 F1 A8 F1 
38d36     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
38d3a     BF F1 00 3D 
38d3e     EF 46 CD 46 
38d42     AA 46 86 46 
38d46     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
38d4a     1C 46 F9 45 
38d4e     D7 45 EE 43 
38d52     DE 02 E8 F3 
38d56     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
38d5a     61 F0 65 F0 
38d5e     6D F0 74 F0 
38d62     7C F0 84 F0 
38d66     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
38d6a     8E 45 6D 45 
38d6e     49 45 27 45 
38d72     05 45 E1 44 
38d76     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
38d7a     F1 2F A9 FB 
38d7e     8B F1 9B EF 
38d82     40 EF 36 EF 
38d86     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
38d8a     4D EF 56 EF 
38d8e     5E EF 7B 44 
38d92     8C 44 69 44 
38d96     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
38d9a     03 44 E1 43 
38d9e     C0 43 F5 37 
38da2     69 33 0F 11 
38da6     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
38daa     66 EE 37 EE 
38dae     38 EE 40 EE 
38db2     48 EE 51 EE 
38db6     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
38dba     7D 32 6A 32 
38dbe     51 32 37 32 
38dc2     1F 32 05 32 
38dc6     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
38dca     B9 31 A1 31 
38dce     F1 04 F4 F1 
38dd2     50 EE A0 ED 
38dd6     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
38dda     93 ED 9A ED 
38dde     A4 ED AD ED 
38de2     F4 27 C1 31 
38de6     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
38dea     78 31 5F 31 
38dee     46 31 2E 31 
38df2     15 31 FC 30 
38df6     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
38dfa     C4 EF 4A ED 
38dfe     DC EC CB EC 
38e02     D2 EC DA EC 
38e06     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
38e0a     F9 EC 64 2F 
38e0e     0A 31 F1 30 
38e12     D9 30 C0 30 
38e16     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
38e1a     78 30 5F 30 
38e1e     46 30 38 23 
38e22     A6 F6 19 EE 
38e26     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
38e2a     20 EC 28 EC 
38e2e     32 EC 3C EC 
38e32     47 EC 51 EC 
38e36     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
38e3a     A3 22 93 22 
38e3e     7F 22 6E 22 
38e42     5D 22 4C 22 
38e46     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
38e4a     77 09 76 F1 
38e4e     CC EC F0 EB 
38e52     CD EB CE EB 
38e56     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
38e5a     ED EB F5 EB 
38e5e     3E F6 6B 22 
38e62     5F 22 4E 22 
38e66     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
38e6a     1B 22 0B 22 
38e6e     FA 21 E9 21 
38e72     D8 21 4D FF 
38e76     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
38e7a     92 EB 7B EB 
38e7e     82 EB 8C EB 
38e82     97 EB A1 EB 
38e86     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
38e8a     15 22 04 22 
38e8e     F3 21 E3 21 
38e92     D2 21 C0 21 
38e96     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
38e9a     8E 21 7D 21 
38e9e     9A F8 A4 ED 
38ea2     8E EB 2F EB 
38ea6     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
38eaa     37 EB 42 EB 
38eae     4C EB 57 EB 
38eb2     B2 17 22 19 
38eb6     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
38eba     FD 18 EF 18 
38ebe     E3 18 D6 18 
38ec2     CA 18 BD 18 
38ec6     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
38eca     60 EC 35 EB 
38ece     01 EB 01 EB 
38ed2     0C EB 16 EB 
38ed6     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
38eda     34 EB D0 18 
38ede     00 19 F4 18 
38ee2     E8 18 DA 18 
38ee6     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
38eea     B6 18 A9 18 
38eee     9D 18 91 05 
38ef2     F0 EF CA EB 
38ef6     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
38efa     E8 EA F2 EA 
38efe     FE EA 07 EB 
38f02     12 EB C2 EF 
38f06     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
38f0a     D9 18 CD 18 
38f0e     C0 18 B3 18 
38f12     A7 18 9B 18 
38f16     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
38f1a     B8 FC 30 EE 
38f1e     61 EB DC EA 
38f22     CD EA D2 EA 
38f26     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
38f2a     F3 EA FE EA 
38f2e     D2 09 D1 18 
38f32     C3 18 17 18 
38f36     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
38f3a     66 11 52 11 
38f3e     49 11 41 11 
38f42     38 11 E0 F4 
38f46     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
38f4a     C9 EA C5 EA 
38f4e     CF EA DB EA 
38f52     E6 EA EF EA 
38f56     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
38f5a     89 11 80 11 
38f5e     78 11 6E 11 
38f62     67 11 5D 11 
38f66     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
38f6a     43 11 32 0D 
38f6e     9C F1 07 EC 
38f72     F8 EA CD EA 
38f76     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
38f7a     E4 EA ED EA 
38f7e     F8 EA 02 EB 
38f82     55 11 91 11 
38f86     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
38f8a     75 11 6E 11 
38f8e     64 11 5E 11 
38f92     54 11 4A 11 
38f96     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
38f9a     A8 EB F1 EA 
38f9e     D9 EA DC EA 
38fa2     E8 EA F1 EA 
38fa6     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
38faa     A6 EB 9E 11 
38fae     A0 11 96 11 
38fb2     8D 11 85 11 
38fb6     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
38fba     6A 11 CA 0D 
38fbe     36 0B 57 F8 
38fc2     6C ED 57 EB 
38fc6     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
38fca     F4 EA FF EA 
38fce     09 EB 15 EB 
38fd2     1E EB 1A FD 
38fd6     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
38fda     ED 0A E8 0A 
38fde     E2 0A DC 0A 
38fe2     D6 0A D1 0A 
38fe6     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
38fea     F8 F3 BC EC 
38fee     57 EB 1E EB 
38ff2     18 EB 24 EB 
38ff6     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
38ffa     42 EB 4D EB 
38ffe     08 09 20 0B 
39002     1A 0B 14 0B 
39006     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
3900a     04 0B FE 0A 
3900e     F9 0A F2 0A 
39012     84 08 3A F1 
39016     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
3901a     42 EB 42 EB 
3901e     4E EB 57 EB 
39022     62 EB 6B EB 
39026     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
3902a     48 0B 43 0B 
3902e     3C 0B 36 0B 
39032     31 0B 2C 0B 
39036     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
3903a     1B 0B 5C 00 
3903e     6A EF 1B EC 
39042     81 EB 6A EB 
39046     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
3904a     85 EB 8E EB 
3904e     99 EB A3 EB 
39052     DD 05 E5 05 
39056     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
3905a     DB 05 D8 05 
3905e     D5 05 D1 05 
39062     D0 05 CB 05 
39066     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
3906a     0C EC BB EB 
3906e     B3 EB BB EB 
39072     C5 EB D0 EB 
39076     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
3907a     E4 F7 2C 06 
3907e     28 06 24 06 
39082     22 06 1F 06 
39086     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
3908a     16 06 14 06 
3908e     0F 06 D0 F3 
39092     65 ED 2D EC 
39096     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
3909a     01 EC 0A EC 
3909e     14 EC 1E EC 
390a2     29 EC FB 03 
390a6     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
390aa     63 06 60 06 
390ae     5E 06 59 06 
390b2     58 06 54 06 
390b6     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
390ba     69 F1 21 ED 
390be     55 EC 33 EC 
390c2     36 EC 40 EC 
390c6     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
390ca     5C EC 68 EC 
390ce     92 02 D9 02 
390d2     D7 02 D7 02 
390d6     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
390da     D1 02 D1 02 
390de     CE 02 CD 02 
390e2     5D FC 80 EF 
390e6     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
390ea     83 EC 8A EC 
390ee     93 EC 9C EC 
390f2     A5 EC B1 EC 
390f6     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
390fa     2B 03 2A 03 
390fe     29 03 26 03 
39102     25 03 24 03 
39106     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
3910a     1F 03 70 F7 
3910e     D0 EE 27 ED 
39112     DB EC D4 EC 
39116     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
3911a     F0 EC FA EC 
3911e     02 ED F9 F4 
39122     7B 03 7C 03 
39126     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
3912a     75 03 73 03 
3912e     72 03 70 03 
39132     6D 03 6C 03 
39136     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
3913a     54 ED 22 ED 
3913e     22 ED 2C ED 
39142     35 ED 3F ED 
39146     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
3914a     14 01 C3 03 
3914e     C1 03 C0 03 
39152     5F 01 A5 00 
39156     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
3915a     7B 00 7C 00 
3915e     20 00 85 F1 
39162     2A EE 89 ED 
39166     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
3916a     80 ED 87 ED 
3916e     90 ED 9A ED 
39172     A3 ED 73 00 
39176     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
3917a     D0 00 D0 00 
3917e     D0 00 D0 00 
39182     D0 00 CF 00 
39186     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
3918a     80 F0 3D EE 
3918e     D5 ED C7 ED 
39192     CD ED D6 ED 
39196     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
3919a     F2 ED FA ED 
3919e     1D 01 29 01 
391a2     27 01 27 01 
391a6     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
391aa     25 01 26 01 
391ae     26 01 23 01 
391b2     D0 F7 EC EF 
391b6     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
391ba     1C EE 24 EE 
391be     2D EE 37 EE 
391c2     40 EE 47 EE 
391c6     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
391ca     7D 01 7B 01 
391ce     7A 01 7A 01 
391d2     79 01 78 01 
391d6     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
391da     84 FE DE F3 
391de     6C EF 93 EE 
391e2     72 EE 72 EE 
391e6     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
391ea     8B EE 95 EE 
391ee     9E EE 15 FC 
391f2     67 FE 67 FE 
391f6     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
391fa     6B FE 6B FE 
391fe     6D FE 6D FE 
39202     6D FE 6F FE 
39206     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
3920a     DF EE CC EE 
3920e     CF EE D9 EE 
39212     E1 EE EA EE 
39216     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
3921a     5A FE C4 FE 
3921e     C3 FE C5 FE 
39222     C6 FE C6 FE 
39226     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
3922a     C8 FE C7 FE 
3922e     DA FB 85 F1 
39232     8D EF 31 EF 
39236     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
3923a     34 EF 3E EF 
3923e     46 EF 4F EF 
39242     57 EF 0D FF 
39246     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
3924a     1F FF 1F FF 
3924e     21 FF 21 FF 
39252     21 FF 21 FF 
39256     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
3925a     15 F1 BE EF 
3925e     84 EF 7E EF 
39262     88 EF 8F EF 
39266     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
3926a     A9 EF 06 F2 
3926e     A6 FC AB FC 
39272     AD FC AE FC 
39276     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
3927a     B2 FC B4 FC 
3927e     B6 FC B7 FC 
39282     8B F4 BD F0 
39286     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
3928a     E4 EF EE EF 
3928e     F6 EF FD EF 
39292     04 F0 0E F0 
39296     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
3929a     0B FD 0D FD 
3929e     0F FD 11 FD 
392a2     11 FD 13 FD 
392a6     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
392aa     17 FD 64 F3 
392ae     CD F0 52 F0 
392b2     41 F0 45 F0 
392b6     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
392ba     5B F0 64 F0 
392be     6D F0 FB FC 
392c2     65 FD 68 FD 
392c6     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
392ca     6C FD 6D FD 
392ce     6F FD 70 FD 
392d2     72 FD B3 FB 
392d6     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
392da     A4 F0 99 F0 
392de     A0 F0 A8 F0 
392e2     AE F0 B9 F0 
392e6     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
392ea     CB FB DD FB 
392ee     DE FB E0 FB 
392f2     E3 FB E3 FB 
392f6     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
392fa     E9 FB EC FB 
392fe     62 F7 27 F2 
39302     2A F1 FF F0 
39306     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
3930a     0C F1 13 F1 
3930e     1B F1 23 F1 
39312     33 F2 3C FC 
39316     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
3931a     42 FC 45 FC 
3931e     47 FC 48 FC 
39322     4A FC 4C FC 
39326     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
3932a     20 F2 77 F1 
3932e     5C F1 5F F1 
39332     64 F1 6C F1 
39336     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
3933a     83 F1 DC F8 
3933e     9A FC 9A FC 
39342     9B FC 9E FC 
39346     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
3934a     A3 FC A4 FC 
3934e     A6 FC A9 FC 
39352     90 F4 33 F2 
39356     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
3935a     BA F1 BF F1 
3935e     C7 F1 CE F1 
39362     D6 F1 DC F1 
39366     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
3936a     F3 FC F5 FC 
3936e     FE FB 79 FB 
39372     62 FB 5F FB 
39376     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
3937a     6F FA AF F3 
3937e     53 F2 12 F2 
39382     0F F2 15 F2 
39386     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
3938a     2A F2 32 F2 
3938e     38 F2 9A FB 
39392     AF FB B1 FB 
39396     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
3939a     B7 FB B8 FB 
3939e     BA FB BC FB 
393a2     C1 FB 3B F8 
393a6     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
393aa     6E F2 6C F2 
393ae     74 F2 7A F2 
393b2     81 F2 87 F2 
393b6     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
393ba     06 FC 09 FC 
393be     0C FC 0E FC 
393c2     0F FC 12 FC 
393c6     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
393ca     17 FC 1A FC 
393ce     B2 F6 7B F3 
393d2     DD F2 C5 F2 
393d6     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
393da     D4 F2 DB F2 
393de     E0 F2 E8 F2 
393e2     28 F8 60 FC 
393e6     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
393ea     64 FC 66 FC 
393ee     68 FC 6A FC 
393f2     6D FC 52 FC 
393f6     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
393fa     78 F3 24 F3 
393fe     1A F3 1E F3 
39402     24 F3 2A F3 
39406     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
3940a     3D F3 80 FA 
3940e     0C FB 0F FB 
39412     10 FB 14 FB 
39416     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
3941a     1B FB 1D FB 
3941e     1F FB 92 FA 
39422     DE F4 AE F3 
39426     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
3942a     79 F3 7E F3 
3942e     84 F3 8C F3 
39432     92 F3 97 F3 
39436     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
3943a     67 FB 69 FB 
3943e     6B FB 6F FB 
39442     71 FB 72 FB 
39446     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
3944a     E3 F8 BA F4 
3944e     EE F3 CC F3 
39452     CA F3 CF F3 
39456     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
3945a     E2 F3 E8 F3 
3945e     ED F3 B7 FB 
39462     BC FB BE FB 
39466     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
3946a     C4 FB C6 FB 
3946e     C8 FB C9 FB 
39472     CC FB 8F F7 
39476     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
3947a     1E F4 1E F4 
3947e     24 F4 2A F4 
39482     30 F4 38 F4 
39486     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
3948a     AD FA B1 FA 
3948e     B4 FA B6 FA 
39492     BA FA BB FA 
39496     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
3949a     C2 FA C6 FA 
3949e     55 F6 C6 F4 
394a2     7D F4 72 F4 
394a6     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
394aa     83 F4 89 F4 
394ae     8F F4 94 F4 
394b2     66 FA 03 FB 
394b6     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
394ba     0A FB 0E FB 
394be     10 FB 11 FB 
394c2     16 FB 18 FB 
394c6     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
394ca     F9 F4 CA F4 
394ce     C5 F4 CB F4 
394d2     D1 F4 D7 F4 
394d6     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
394da     E8 F4 3F FB 
394de     56 FB 58 FB 
394e2     5A FB 5E FB 
394e6     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
394ea     64 FB 64 FB 
394ee     69 FB 99 F9 
394f2     E9 F5 33 F5 
394f6     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
394fa     1D F5 22 F5 
394fe     27 F5 2E F5 
39502     32 F5 37 F5 
39506     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
3950a     BC FA BC FA 
3950e     C1 FA C2 FA 
39512     C4 FA C8 FA 
39516     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
3951a     F9 F7 DB F5 
3951e     78 F5 69 F5 
39522     6A F5 70 F5 
39526     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
3952a     7F F5 85 F5 
3952e     6E F7 06 FB 
39532     0A FB 0B FB 
39536     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
3953a     14 FB 15 FB 
3953e     18 FB 1B FB 
39542     1D FB 70 F7 
39546     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
3954a     B6 F5 BB F5 
3954e     C0 F5 C6 F5 
39552     CA F5 CF F5 
39556     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
3955a     54 FB 56 FB 
3955e     5A FB 5B FB 
39562     5E FB 5F FB 
39566     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
3956a     67 FB 52 FB 
3956e     29 F7 33 F6 
39572     06 F6 02 F6 
39576     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
3957a     10 F6 16 F6 
3957e     1A F6 1F F6 
39582     81 FB 9F FB 
39586     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
3958a     51 FB F2 FA 
3958e     E3 FA E3 FA 
39592     E5 FA E9 FA 
39596     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
3959a     64 F6 4D F6 
3959e     4D F6 53 F6 
395a2     57 F6 5C F6 
395a6     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
395aa     6A F6 19 FB 
395ae     1E FB 22 FB 
395b2     23 FB 24 FB 
395b6     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
395ba     2C FB 2E FB 
395be     32 FB F0 F8 
395c2     01 F7 A5 F6 
395c6     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
395ca     9F F6 A3 F6 
395ce     A6 F6 AC F6 
395d2     B0 F6 EB F7 
395d6     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
395da     68 FB 6C FB 
395de     6E FB 71 FB 
395e2     72 FB 74 FB 
395e6     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
395ea     71 F8 21 F7 
395ee     E5 F6 DD F6 
395f2     E1 F6 E6 F6 
395f6     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
395fa     F5 F6 F7 F6 
395fe     F7 FA AB FB 
39602     AD FB AF FB 
39606     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
3960a     B6 FB B9 FB 
3960e     BB FB BC FB 
39612     21 FB 07 F8 
39616     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
3961a     22 F7 26 F7 
3961e     2B F7 2E F7 
39622     34 F7 38 F7 
39626     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
3962a     13 FB 16 FB 
3962e     17 FB 1B FB 
39632     1E FB 20 FB 
39636     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
3963a     26 FB 77 FA 
3963e     F3 F7 7C F7 
39642     67 F7 6A F7 
39646     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
3964a     74 F7 7A F7 
3964e     7E F7 82 F7 
39652     53 FB 5A FB 
39656     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
3965a     5F FB 63 FB 
3965e     65 FB 67 FB 
39662     69 FB 6A FB 
39666     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
3966a     B5 F7 A9 F7 
3966e     AD F7 B0 F7 
39672     B5 F7 B8 F7 
39676     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
3967a     6E F8 99 FB 
3967e     9C FB 9D FB 
39682     9F FB A4 FB 
39686     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
3968a     A9 FB AB FB 
3968e     AD FB 46 F9 
39692     26 F8 F0 F7 
39696     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
3969a     F4 F7 F8 F7 
3969e     FB F7 FF F7 
396a2     03 F8 65 FA 
396a6     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
396aa     2B FB 2F FB 
396ae     30 FB 32 FB 
396b2     34 FB 38 FB 
396b6     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
396ba     E9 F8 4A F8 
396be     2E F8 2C F8 
396c2     2F F8 36 F8 
396c6     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
396ca     41 F8 44 F8 
396ce     4A FB 67 FB 
396d2     68 FB 6B FB 
396d6     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
396da     73 FB 74 FB 
396de     78 FB 7A FB 
396e2     14 FB E7 F8 
396e6     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
396ea     6D F8 70 F8 
396ee     73 F8 78 F8 
396f2     7C F8 80 F8 
396f6     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
396fa     A6 FB A7 FB 
396fe     A9 FB AC FB 
39702     AF FB B1 FB 
39706     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
3970a     B7 FB 73 FA 
3970e     F8 F8 B4 F8 
39712     A9 F8 AB F8 
39716     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
3971a     B4 F8 B8 F8 
3971e     BB F8 FA F8 
39722     64 FB 65 FB 
39726     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
3972a     6D FB 6F FB 
3972e     70 FB 74 FB 
39732     77 FB 77 FB 
39736     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
3973a     E9 F8 E4 F8 
3973e     E8 F8 EB F8 
39742     EE F8 F2 F8 
39746     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
3974a     B5 FA 9F FB 
3974e     A1 FB A4 FB 
39752     A5 FB A9 FB 
39756     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
3975a     AE FB B1 FB 
3975e     B2 FB C7 F9 
39762     39 F9 22 F9 
39766     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
3976a     26 F9 2A F9 
3976e     2E F9 32 F9 
39772     33 F9 BA FB 
39776     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
3977a     DE FB E1 FB 
3977e     E2 FB E4 FB 
39782     E5 FB E7 FB 
39786     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
3978a     C5 F9 67 F9 
3978e     57 F9 56 F9 
39792     5B F9 5F F9 
39796     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
3979a     68 F9 6C F9 
3979e     0B FC 11 FC 
397a2     14 FC 15 FC 
397a6     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
397aa     B5 FB B5 FB 
397ae     B6 FB B8 FB 
397b2     E9 FA C8 F9 
397b6     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
397ba     90 F9 94 F9 
397be     95 F9 99 F9 
397c2     9D F9 9F F9 
397c6     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
397ca     DE FB DF FB 
397ce     E2 FB E4 FB 
397d2     E6 FB E8 FB 
397d6     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
397da     EF FB AC FA 
397de     E9 F9 C7 F9 
397e2     C3 F9 C8 F9 
397e6     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
397ea     D0 F9 D4 F9 
397ee     D6 F9 0E FB 
397f2     11 FC 13 FC 
397f6     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
397fa     19 FC 1B FC 
397fe     1D FC 1E FC 
39802     21 FC 22 FC 
39806     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
3980a     F7 F9 F7 F9 
3980e     FB F9 FE F9 
39812     00 FA 03 FA 
39816     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
3981a     1B FC 45 FC 
3981e     46 FC 48 FC 
39822     4A FC 4B FC 
39826     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
3982a     52 FC 54 FC 
3982e     F3 FB 82 FA 
39832     35 FA 28 FA 
39836     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
3983a     31 FA 32 FA 
3983e     37 FA 37 FA 
39842     3C FA 00 FC 
39846     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
3984a     09 FC 0B FC 
3984e     0F FC 12 FC 
39852     12 FC 15 FC 
39856     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
3985a     8D FA 60 FA 
3985e     5B FA 5C FA 
39862     60 FA 61 FA 
39866     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
3986a     6C FA 6D FA 
3986e     37 FC 3A FC 
39872     3B FC 3D FC 
39876     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
3987a     43 FC 44 FC 
3987e     45 FC 47 FC 
39882     51 FB AB FA 
39886     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
3988a     8E FA 91 FA 
3988e     93 FA 95 FA 
39892     98 FA 9B FA 
39896     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
3989a     68 FC 6A FC 
3989e     6C FC 6E FC 
398a2     70 FC 72 FC 
398a6     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
398aa     76 FC 3B FB 
398ae     D0 FA BB FA 
398b2     B9 FA BD FA 
398b6     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
398ba     C4 FA C6 FA 
398be     CA FA 13 FC 
398c2     3A FC 3A FC 
398c6     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
398ca     41 FC 43 FC 
398ce     44 FC 47 FC 
398d2     48 FC 3C FC 
398d6     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
398da     E6 FA E8 FA 
398de     EB FA EE FA 
398e2     F0 FA F2 FA 
398e6     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
398ea     61 FC 66 FC 
398ee     68 FC 6B FC 
398f2     6C FC 6E FC 
398f6     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
398fa     73 FC 75 FC 
398fe     13 FC 3F FB 
39902     17 FB 12 FB 
39906     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
3990a     1A FB 1D FB 
3990e     1F FB 20 FB 
39912     23 FB 92 FC 
39916     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
3991a     96 FC 97 FC 
3991e     9A FC 9C FC 
39922     9E FC 9F FC 
39926     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
3992a     5A FB 41 FB 
3992e     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
39932     73 32 00 04 
39936     00 00 10 00 
3993a     00 00 00 00 
3993e     00 00 00 00 | atari2 file "atari2.s2"
39942     43 87 43 87 
39946     43 87 44 87 
3994a     43 87 44 87 
3994e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
39952     43 87 43 87 
39956     43 87 44 87 
3995a     43 87 43 87 
3995e     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
39962     44 87 43 87 
39966     44 87 43 87 
3996a     43 87 43 87 
3996e     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
39972     43 87 43 87 
39976     44 87 43 87 
3997a     44 87 44 87 
3997e     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
39982     43 87 43 87 
39986     44 87 43 87 
3998a     43 87 42 87 
3998e     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
39992     43 87 43 87 
39996     43 87 43 87 
3999a     44 87 43 87 
3999e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
399a2     44 87 44 87 
399a6     43 87 44 87 
399aa     43 87 44 87 
399ae     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
399b2     44 87 43 87 
399b6     44 87 44 87 
399ba     43 87 43 87 
399be     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
399c2     43 87 44 87 
399c6     44 87 43 87 
399ca     43 87 44 87 
399ce     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
399d2     43 87 43 87 
399d6     43 87 43 87 
399da     43 87 43 87 
399de     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
399e2     42 87 43 87 
399e6     44 87 42 87 
399ea     43 87 43 87 
399ee     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
399f2     43 87 44 87 
399f6     44 87 43 87 
399fa     43 87 43 87 
399fe     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
39a02     43 87 5C 87 
39a06     EE 86 AC 87 
39a0a     4C 7C A3 78 
39a0e     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
39a12     BC 78 BB 78 
39a16     BD 78 BC 78 
39a1a     BB 78 BD 78 
39a1e     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
39a22     BB 78 BB 78 
39a26     BC 78 BC 78 
39a2a     BC 78 BB 78 
39a2e     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39a32     BC 78 BC 78 
39a36     BC 78 BC 78 
39a3a     BC 78 BC 78 
39a3e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39a42     BB 78 BC 78 
39a46     A0 78 4C 7C 
39a4a     11 7A 29 89 
39a4e     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
39a52     44 87 43 87 
39a56     44 87 43 87 
39a5a     43 87 42 87 
39a5e     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
39a62     43 87 43 87 
39a66     44 87 ED 85 
39a6a     71 85 52 79 
39a6e     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
39a72     BC 78 BC 78 
39a76     BC 78 BC 78 
39a7a     BC 78 BC 78 
39a7e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
39a82     BC 78 BC 78 
39a86     BC 78 A0 78 
39a8a     CF 7A B9 81 
39a8e     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
39a92     44 87 43 87 
39a96     43 87 44 87 
39a9a     43 87 44 87 
39a9e     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
39aa2     43 87 43 87 
39aa6     43 87 43 87 
39aaa     44 87 43 87 
39aae     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
39ab2     43 87 43 87 
39ab6     44 87 43 87 
39aba     44 87 43 87 
39abe     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
39ac2     44 87 43 87 
39ac6     43 87 43 87 
39aca     5A 87 39 81 
39ace     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
39ad2     A5 78 BC 78 
39ad6     BB 78 BC 78 
39ada     BB 78 BC 78 
39ade     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
39ae2     BC 78 BC 78 
39ae6     BC 78 BC 78 
39aea     BC 78 8F 79 
39aee     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
39af2     09 85 47 87 
39af6     43 87 43 87 
39afa     42 87 42 87 
39afe     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
39b02     43 87 43 87 
39b06     43 87 43 87 
39b0a     43 87 44 87 
39b0e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
39b12     43 87 43 87 
39b16     44 87 43 87 
39b1a     42 87 43 87 
39b1e     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
39b22     44 87 43 87 
39b26     43 87 43 87 
39b2a     44 87 44 87 
39b2e     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
39b32     94 78 55 7A 
39b36     B9 78 BC 78 
39b3a     BC 78 BC 78 
39b3e     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39b42     BC 78 BB 78 
39b46     BC 78 BC 78 
39b4a     BC 78 BC 78 
39b4e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
39b52     BB 78 BC 78 
39b56     BC 78 BC 78 
39b5a     BB 78 BC 78 
39b5e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
39b62     BC 78 BC 78 
39b66     BD 78 BC 78 
39b6a     BC 78 BB 78 
39b6e     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
39b72     94 78 B3 84 
39b76     36 84 4A 87 
39b7a     43 87 43 87 
39b7e     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
39b82     43 87 44 87 
39b86     43 87 43 87 
39b8a     43 87 43 87 
39b8e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
39b92     43 87 44 87 
39b96     43 87 44 87 
39b9a     43 87 43 87 
39b9e     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
39ba2     43 87 43 87 
39ba6     43 87 45 87 
39baa     43 87 43 87 
39bae     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
39bb2     43 87 44 87 
39bb6     44 87 44 87 
39bba     43 87 43 87 
39bbe     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
39bc2     43 87 42 87 
39bc6     43 87 43 87 
39bca     44 87 43 87 
39bce     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
39bd2     54 87 3C 82 
39bd6     36 83 52 79 
39bda     C6 78 BC 78 
39bde     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
39be2     BB 78 BB 78 
39be6     BC 78 BC 78 
39bea     BC 78 BC 78 
39bee     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
39bf2     BD 78 ED 78 
39bf6     1B 79 F4 83 
39bfa     4D 83 4E 87 
39bfe     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
39c02     44 87 43 87 
39c06     42 87 44 87 
39c0a     43 87 42 87 
39c0e     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
39c12     43 87 54 87 
39c16     26 82 B3 84 
39c1a     D6 77 BB 78 
39c1e     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
39c22     BC 78 BB 78 
39c26     BB 78 BB 78 
39c2a     BB 78 BB 78 
39c2e     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
39c32     BC 78 BC 78 
39c36     26 79 18 75 
39c3a     36 83 1F 84 
39c3e     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
39c42     43 87 43 87 
39c46     43 87 43 87 
39c4a     43 87 44 87 
39c4e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
39c52     43 87 44 87 
39c56     44 87 43 87 
39c5a     43 87 43 87 
39c5e     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
39c62     43 87 43 87 
39c66     43 87 43 87 
39c6a     44 87 44 87 
39c6e     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
39c72     44 87 43 87 
39c76     43 87 43 87 
39c7a     43 87 44 87 
39c7e     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
39c82     44 87 44 87 
39c86     44 87 43 87 
39c8a     44 87 43 87 
39c8e     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
39c92     43 87 43 87 
39c96     43 87 44 87 
39c9a     44 87 43 87 
39c9e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
39ca2     43 87 43 87 
39ca6     43 87 43 87 
39caa     43 87 44 87 
39cae     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
39cb2     43 87 44 87 
39cb6     43 87 44 87 
39cba     19 87 7D 86 
39cbe     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
39cc2     B1 78 BC 78 
39cc6     BC 78 BC 78 
39cca     BC 78 BC 78 
39cce     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39cd2     BC 78 BC 78 
39cd6     BD 78 BC 78 
39cda     B7 78 3B 7B 
39cde     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
39ce2     96 86 44 87 
39ce6     43 87 43 87 
39cea     43 87 43 87 
39cee     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
39cf2     44 87 44 87 
39cf6     43 87 44 87 
39cfa     43 87 44 87 
39cfe     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
39d02     43 87 44 87 
39d06     43 87 44 87 
39d0a     43 87 44 87 
39d0e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
39d12     43 87 44 87 
39d16     43 87 43 87 
39d1a     44 87 43 87 
39d1e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
39d22     44 87 44 87 
39d26     43 87 43 87 
39d2a     43 87 44 87 
39d2e     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
39d32     43 87 43 87 
39d36     43 87 43 87 
39d3a     44 87 44 87 
39d3e     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
39d42     36 83 CF 7A 
39d46     AB 78 BB 78 
39d4a     BC 78 BC 78 
39d4e     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
39d52     BB 78 BC 78 
39d56     BC 78 BC 78 
39d5a     BC 78 BC 78 
39d5e     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39d62     BC 78 BC 78 
39d66     BC 78 BB 78 
39d6a     BC 78 BC 78 
39d6e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39d72     BB 78 BC 78 
39d76     BB 78 BC 78 
39d7a     BC 78 BD 78 
39d7e     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
39d82     BC 78 BC 78 
39d86     BC 78 BC 78 
39d8a     BC 78 BD 78 
39d8e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
39d92     BC 78 BB 78 
39d96     BC 78 BB 78 
39d9a     BB 78 BC 78 
39d9e     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
39da2     BC 78 BC 78 
39da6     BC 78 BC 78 
39daa     BC 78 BB 78 
39dae     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
39db2     BC 78 BC 78 
39db6     BC 78 BD 78 
39dba     BB 78 BC 78 
39dbe     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
39dc2     BC 78 BC 78 
39dc6     BC 78 BB 78 
39dca     BC 78 BB 78 
39dce     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
39dd2     BB 78 BC 78 
39dd6     BC 78 BC 78 
39dda     BC 78 BB 78 
39dde     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39de2     BC 78 BC 78 
39de6     BC 78 BB 78 
39dea     BC 78 BB 78 
39dee     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39df2     BC 78 BC 78 
39df6     BC 78 BC 78 
39dfa     BB 78 BC 78 
39dfe     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
39e02     BC 78 9F 78 
39e06     52 79 B3 84 
39e0a     2F 86 60 87 
39e0e     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
39e12     44 87 43 87 
39e16     43 87 43 87 
39e1a     43 87 43 87 
39e1e     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
39e22     43 87 43 87 
39e26     43 87 44 87 
39e2a     43 87 43 87 
39e2e     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
39e32     43 87 43 87 
39e36     43 87 43 87 
39e3a     43 87 44 87 
39e3e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
39e42     44 87 44 87 
39e46     5E 87 BC 80 
39e4a     FB 80 94 78 
39e4e     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
39e52     BD 78 BC 78 
39e56     BB 78 BC 78 
39e5a     BB 78 BB 78 
39e5e     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
39e62     BC 78 BB 78 
39e66     BB 78 6B 79 
39e6a     D6 77 AC 87 
39e6e     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
39e72     43 87 44 87 
39e76     43 87 43 87 
39e7a     44 87 43 87 
39e7e     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
39e82     43 87 44 87 
39e86     43 87 5C 87 
39e8a     E7 80 00 80 
39e8e     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
39e92     BC 78 BD 78 
39e96     BC 78 BC 78 
39e9a     BC 78 BB 78 
39e9e     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39ea2     BC 78 BC 78 
39ea6     BB 78 BC 78 
39eaa     BB 78 BC 78 
39eae     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
39eb2     BB 78 BC 78 
39eb6     BC 78 BC 78 
39eba     BC 78 BC 78 
39ebe     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
39ec2     BC 78 BC 78 
39ec6     BC 78 BC 78 
39eca     A0 78 8D 7B 
39ece     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
39ed2     60 87 43 87 
39ed6     44 87 44 87 
39eda     43 87 43 87 
39ede     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
39ee2     44 87 43 87 
39ee6     43 87 43 87 
39eea     44 87 73 86 
39eee     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
39ef2     51 7B B6 78 
39ef6     BC 78 BD 78 
39efa     BC 78 BC 78 
39efe     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
39f02     BB 78 BC 78 
39f06     BD 78 BB 78 
39f0a     BC 78 BB 78 
39f0e     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
39f12     BC 78 BC 78 
39f16     BC 78 BC 78 
39f1a     BB 78 BC 78 
39f1e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
39f22     BC 78 BB 78 
39f26     BB 78 BC 78 
39f2a     BC 78 BB 78 
39f2e     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
39f32     22 8C AF 84 
39f36     48 87 43 87 
39f3a     44 87 43 87 
39f3e     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
39f42     43 87 42 87 
39f46     43 87 43 87 
39f4a     44 87 43 87 
39f4e     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
39f52     43 87 43 87 
39f56     44 87 44 87 
39f5a     43 87 43 87 
39f5e     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
39f62     43 87 43 87 
39f66     43 87 43 87 
39f6a     44 87 43 87 
39f6e     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
39f72     9F 8B D6 77 
39f76     16 7C B3 78 
39f7a     BC 78 BB 78 
39f7e     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
39f82     BB 78 BC 78 
39f86     BB 78 BC 78 
39f8a     BC 78 BC 78 
39f8e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
39f92     BC 78 BB 78 
39f96     BB 78 BC 78 
39f9a     BB 78 BC 78 
39f9e     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
39fa2     BB 78 BB 78 
39fa6     BC 78 BC 78 
39faa     BC 78 BB 78 
39fae     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
39fb2     BC 78 BC 78 
39fb6     BC 78 BD 78 
39fba     BB 78 BC 78 
39fbe     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
39fc2     BC 78 BC 78 
39fc6     BC 78 BB 78 
39fca     BC 78 BC 78 
39fce     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
39fd2     A8 78 54 7E 
39fd6     F4 83 17 82 
39fda     50 87 43 87 
39fde     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
39fe2     44 87 43 87 
39fe6     44 87 43 87 
39fea     43 87 44 87 
39fee     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
39ff2     43 87 28 87 
39ff6     20 85 CF 7A 
39ffa     70 7D AD 78 
39ffe     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
3a002     BB 78 BC 78 
3a006     BC 78 BC 78 
3a00a     BB 78 BB 78 
3a00e     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
3a012     BB 78 B2 78 
3a016     9A 7C CF 7A 
3a01a     4A 87 0D 87 
3a01e     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
3a022     43 87 44 87 
3a026     43 87 44 87 
3a02a     43 87 43 87 
3a02e     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
3a032     44 87 43 87 
3a036     28 87 51 85 
3a03a     11 7A 1E 7D 
3a03e     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
3a042     BC 78 BB 78 
3a046     BC 78 BC 78 
3a04a     BC 78 BC 78 
3a04e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3a052     BB 78 BC 78 
3a056     BB 78 BC 78 
3a05a     BC 78 BC 78 
3a05e     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3a062     BB 78 BC 78 
3a066     BC 78 BC 78 
3a06a     BD 78 BB 78 
3a06e     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
3a072     BC 78 BB 78 
3a076     BC 78 BC 78 
3a07a     BC 78 BB 78 
3a07e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a082     BC 78 BC 78 
3a086     BC 78 BC 78 
3a08a     BB 78 BC 78 
3a08e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3a092     BC 78 BD 78 
3a096     BC 78 BC 78 
3a09a     BC 78 BB 78 
3a09e     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a0a2     BC 78 BB 78 
3a0a6     BB 78 BC 78 
3a0aa     BC 78 BB 78 
3a0ae     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a0b2     BB 78 BB 78 
3a0b6     BB 78 BC 78 
3a0ba     B6 78 48 7D 
3a0be     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
3a0c2     56 87 43 87 
3a0c6     42 87 44 87 
3a0ca     44 87 43 87 
3a0ce     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
3a0d2     43 87 44 87 
3a0d6     43 87 44 87 
3a0da     4C 87 7E 83 
3a0de     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
3a0e2     F7 78 BC 78 
3a0e6     BC 78 BB 78 
3a0ea     BB 78 BC 78 
3a0ee     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3a0f2     BC 78 BB 78 
3a0f6     BC 78 BC 78 
3a0fa     BB 78 BC 78 
3a0fe     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
3a102     BB 78 BC 78 
3a106     BC 78 BC 78 
3a10a     BC 78 BB 78 
3a10e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a112     BC 78 BC 78 
3a116     BC 78 BC 78 
3a11a     BC 78 BB 78 
3a11e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a122     BC 78 BB 78 
3a126     BB 78 BC 78 
3a12a     BC 78 BB 78 
3a12e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a132     BC 78 BC 78 
3a136     BB 78 BC 78 
3a13a     BC 78 BC 78 
3a13e     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
3a142     73 32 00 04 
3a146     00 00 10 00 
3a14a     00 00 00 00 
3a14e     00 00 00 00 | atari12 file "atari12.s2"
3a152     00 6D 00 6D 
3a156     00 6D 00 6D 
3a15a     00 6D 00 6D 
3a15e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a162     00 6D 00 6D 
3a166     00 6D 00 6D 
3a16a     00 6D 00 6D 
3a16e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a172     00 6D 00 6D 
3a176     00 6D 00 6D 
3a17a     00 6D 00 6D 
3a17e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a182     00 6D 00 6D 
3a186     00 6D 00 6D 
3a18a     00 6D 00 6D 
3a18e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a192     00 6D 00 6D 
3a196     00 6D 00 6D 
3a19a     00 6D 00 6D 
3a19e     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
3a1a2     00 6C 00 6C 
3a1a6     00 6C 00 6C 
3a1aa     00 6C 00 6C 
3a1ae     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a1b2     00 6C 00 6C 
3a1b6     00 6C 00 6C 
3a1ba     00 6C 00 6C 
3a1be     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a1c2     00 6C 00 6C 
3a1c6     00 6C 00 6C 
3a1ca     00 6C 00 6C 
3a1ce     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a1d2     00 6C 00 6C 
3a1d6     00 6C 00 6C 
3a1da     00 6C 00 6C 
3a1de     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a1e2     00 6C 00 6C 
3a1e6     00 6C 00 6C 
3a1ea     00 6C 00 6C 
3a1ee     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a1f2     00 6C 00 6C 
3a1f6     00 6C 00 6C 
3a1fa     00 6C 00 6C 
3a1fe     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a202     00 6C 00 6C 
3a206     00 6C 00 6C 
3a20a     00 6C 00 6C 
3a20e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a212     00 6C 00 6C 
3a216     00 6C 00 6C 
3a21a     00 6C 00 6C 
3a21e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a222     00 6C 00 6C 
3a226     00 6C 00 6C 
3a22a     00 6C 00 6C 
3a22e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a232     00 6C 00 6C 
3a236     00 6C 00 6C 
3a23a     00 6C 00 6C 
3a23e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a242     00 6C 00 6C 
3a246     00 6C 00 6C 
3a24a     00 6C 00 6C 
3a24e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a252     00 6C 00 6B 
3a256     00 6B 00 6B 
3a25a     00 6B 00 6B 
3a25e     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a262     00 6B 00 6B 
3a266     00 6B 00 6B 
3a26a     00 6B 00 6B 
3a26e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a272     00 6B 00 6B 
3a276     00 6B 00 6B 
3a27a     00 6B 00 6B 
3a27e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a282     00 6B 00 6B 
3a286     00 6B 00 6B 
3a28a     00 6B 00 6B 
3a28e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a292     00 6B 00 6B 
3a296     00 6B 00 6B 
3a29a     00 6B 00 6B 
3a29e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a2a2     00 6B 00 6B 
3a2a6     00 6B 00 6B 
3a2aa     00 6B 00 6B 
3a2ae     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a2b2     00 6B 00 6B 
3a2b6     00 6B 00 6B 
3a2ba     00 6B 00 6B 
3a2be     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a2c2     00 6B 00 6B 
3a2c6     00 6B 00 6B 
3a2ca     00 6B 00 6B 
3a2ce     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a2d2     00 6B 00 6B 
3a2d6     00 6B 00 6B 
3a2da     00 6B 00 6B 
3a2de     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a2e2     00 6B 00 6B 
3a2e6     00 6B 00 6B 
3a2ea     00 6A 00 9D 
3a2ee     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
3a2f2     00 9E 00 9E 
3a2f6     00 9E 00 9E 
3a2fa     00 9E 00 9E 
3a2fe     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a302     00 9E 00 9E 
3a306     00 9E 00 9E 
3a30a     00 9E 00 9E 
3a30e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a312     00 9E 00 9E 
3a316     00 9E 00 9E 
3a31a     00 9E 00 9E 
3a31e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a322     00 9E 00 9E 
3a326     00 9E 00 9E 
3a32a     00 9E 00 9E 
3a32e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a332     00 9E 00 9E 
3a336     00 9E 00 9E 
3a33a     00 9E 00 9E 
3a33e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a342     00 9E 00 9E 
3a346     00 9E 00 9E 
3a34a     00 9E 00 9E 
3a34e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a352     00 9E 00 9E 
3a356     00 9E 00 9E 
3a35a     00 9E 00 9E 
3a35e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a362     00 9E 00 9E 
3a366     00 9E 00 9E 
3a36a     00 9E 00 9E 
3a36e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a372     00 9E 00 9E 
3a376     00 9E 00 9E 
3a37a     00 9E 00 9E 
3a37e     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
3a382     00 9F 00 9F 
3a386     00 9F 00 9F 
3a38a     00 9F 00 9F 
3a38e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a392     00 9F 00 9F 
3a396     00 9F 00 9F 
3a39a     00 9F 00 9F 
3a39e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a3a2     00 9F 00 9F 
3a3a6     00 9F 00 9F 
3a3aa     00 9F 00 9F 
3a3ae     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a3b2     00 9F 00 9F 
3a3b6     00 9F 00 9F 
3a3ba     00 9F 00 9F 
3a3be     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a3c2     00 9F 00 9F 
3a3c6     00 9F 00 9F 
3a3ca     00 9F 00 9F 
3a3ce     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a3d2     00 9F 00 9F 
3a3d6     00 9F 00 9F 
3a3da     00 9F 00 9F 
3a3de     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a3e2     00 9F 00 9F 
3a3e6     00 9F 00 9F 
3a3ea     00 9F 00 9F 
3a3ee     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a3f2     00 9F 00 9F 
3a3f6     00 9F 00 9F 
3a3fa     00 9F 00 9F 
3a3fe     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a402     00 9F 00 9F 
3a406     00 9F 00 9F 
3a40a     00 9F 00 9F 
3a40e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a412     00 9F 00 9F 
3a416     00 9F 00 9F 
3a41a     00 9F 00 9F 
3a41e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a422     00 9F 00 9F 
3a426     00 9F 00 9F 
3a42a     00 9F 00 9F 
3a42e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a432     00 9F 00 9F 
3a436     00 9F 00 9F 
3a43a     00 9F 00 9F 
3a43e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a442     00 9F 00 9F 
3a446     00 9F 00 A0 
3a44a     00 A0 00 A0 
3a44e     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a452     00 A0 00 A0 
3a456     00 A0 00 A0 
3a45a     00 A0 00 A0 
3a45e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a462     00 A0 00 A0 
3a466     00 A0 00 A0 
3a46a     00 A0 00 A0 
3a46e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a472     00 A0 00 A0 
3a476     00 A0 00 A0 
3a47a     00 A0 00 A0 
3a47e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a482     00 A0 00 A0 
3a486     00 A0 00 A0 
3a48a     00 A0 00 A0 
3a48e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a492     00 A0 00 A0 
3a496     00 A0 00 A0 
3a49a     00 A0 00 A0 
3a49e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a4a2     00 A0 00 A0 
3a4a6     00 A0 00 A0 
3a4aa     00 A0 00 A0 
3a4ae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a4b2     00 A0 00 A0 
3a4b6     00 A0 00 A0 
3a4ba     00 A0 00 A0 
3a4be     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a4c2     00 A0 00 A0 
3a4c6     00 A0 00 A0 
3a4ca     00 A0 00 A0 
3a4ce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a4d2     00 A0 00 A0 
3a4d6     00 A0 00 A0 
3a4da     00 A0 00 A0 
3a4de     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a4e2     00 A0 00 A0 
3a4e6     00 A0 00 A0 
3a4ea     00 A0 00 A0 
3a4ee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a4f2     00 A0 00 A0 
3a4f6     00 A0 00 A0 
3a4fa     00 A0 00 A0 
3a4fe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a502     00 A0 00 A0 
3a506     00 A0 00 A0 
3a50a     00 A0 00 A0 
3a50e     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
3a512     00 6D 00 6D 
3a516     00 6D 00 6D 
3a51a     00 6D 00 6D 
3a51e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a522     00 6D 00 6D 
3a526     00 6D 00 6D 
3a52a     00 6D 00 6D 
3a52e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a532     00 6D 00 6D 
3a536     00 6D 00 6D 
3a53a     00 6D 00 6D 
3a53e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a542     00 6D 00 6D 
3a546     00 6D 00 6D 
3a54a     00 6D 00 6D 
3a54e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a552     00 6D 00 6D 
3a556     00 6D 00 6D 
3a55a     00 6D 00 6D 
3a55e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a562     00 6D 00 6D 
3a566     00 6D 00 6D 
3a56a     00 6D 00 6D 
3a56e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a572     00 6D 00 6D 
3a576     00 6D 00 6D 
3a57a     00 6D 00 6D 
3a57e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a582     00 6D 00 6D 
3a586     00 6D 00 6D 
3a58a     00 6D 00 6D 
3a58e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a592     00 6D 00 6D 
3a596     00 A0 00 A0 
3a59a     00 A0 00 A0 
3a59e     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a5a2     00 A0 00 A0 
3a5a6     00 A0 00 A0 
3a5aa     00 A0 00 A0 
3a5ae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a5b2     00 A0 00 A0 
3a5b6     00 A0 00 A0 
3a5ba     00 A0 00 A0 
3a5be     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a5c2     00 A0 00 A0 
3a5c6     00 A0 00 A0 
3a5ca     00 A0 00 A0 
3a5ce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a5d2     00 A0 00 A0 
3a5d6     00 A0 00 A0 
3a5da     00 A0 00 A0 
3a5de     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a5e2     00 A0 00 A0 
3a5e6     00 A0 00 A0 
3a5ea     00 A0 00 A0 
3a5ee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a5f2     00 A0 00 A0 
3a5f6     00 A0 00 A0 
3a5fa     00 A0 00 A0 
3a5fe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a602     00 A0 00 A0 
3a606     00 A0 00 A0 
3a60a     00 A0 00 A0 
3a60e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a612     00 A0 00 A0 
3a616     00 A0 00 A0 
3a61a     00 A0 00 A0 
3a61e     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
3a622     00 6D 00 6D 
3a626     00 6D 00 6D 
3a62a     00 6D 00 6D 
3a62e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a632     00 6D 00 6D 
3a636     00 6D 00 6D 
3a63a     00 6D 00 6D 
3a63e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a642     00 6D 00 6D 
3a646     00 6D 00 6D 
3a64a     00 6D 00 6D 
3a64e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a652     00 6D 00 6D 
3a656     00 6D 00 6D 
3a65a     00 6D 00 6D 
3a65e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a662     00 6D 00 6D 
3a666     00 6D 00 6D 
3a66a     00 6D 00 6D 
3a66e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a672     00 6D 00 6D 
3a676     00 6D 00 6D 
3a67a     00 6D 00 6D 
3a67e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a682     00 6D 00 6D 
3a686     00 6D 00 6D 
3a68a     00 6D 00 6D 
3a68e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a692     00 6D 00 6D 
3a696     00 6D 00 6D 
3a69a     00 6D 00 6D 
3a69e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a6a2     00 6D 00 6D 
3a6a6     00 6C 00 A0 
3a6aa     00 9F 00 A0 
3a6ae     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
3a6b2     00 A0 00 A0 
3a6b6     00 A0 00 A0 
3a6ba     00 A0 00 A0 
3a6be     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a6c2     00 A0 00 A0 
3a6c6     00 A0 00 A0 
3a6ca     00 A0 00 A0 
3a6ce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a6d2     00 A0 00 A0 
3a6d6     00 A0 00 A0 
3a6da     00 A0 00 A0 
3a6de     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a6e2     00 A0 00 A0 
3a6e6     00 A0 00 A0 
3a6ea     00 A0 00 A0 
3a6ee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a6f2     00 A0 00 A0 
3a6f6     00 A0 00 A0 
3a6fa     00 A0 00 A0 
3a6fe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a702     00 A0 00 A0 
3a706     00 A0 00 A0 
3a70a     00 A0 00 A0 
3a70e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a712     00 A0 00 A0 
3a716     00 A0 00 A0 
3a71a     00 A0 00 A0 
3a71e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a722     00 A0 00 A0 
3a726     00 A0 00 A0 
3a72a     00 A0 00 A0 
3a72e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a732     00 A0 00 A0 
3a736     00 A0 00 A0 
3a73a     00 A0 00 A0 
3a73e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a742     00 A0 00 A0 
3a746     00 A0 00 A0 
3a74a     00 A0 00 A0 
3a74e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a752     00 A0 00 A0 
3a756     00 A0 00 A0 
3a75a     00 A0 00 A0 
3a75e     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
3a762     00 A1 00 A1 
3a766     00 A1 00 A1 
3a76a     00 A1 00 A1 
3a76e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a772     00 A1 00 A1 
3a776     00 A1 00 A1 
3a77a     00 A1 00 A1 
3a77e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a782     00 A1 00 A1 
3a786     00 A1 00 A1 
3a78a     00 A1 00 A1 
3a78e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a792     00 A1 00 A1 
3a796     00 A1 00 A1 
3a79a     00 A1 00 A1 
3a79e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a7a2     00 A1 00 A1 
3a7a6     00 A1 00 A1 
3a7aa     00 A1 00 A1 
3a7ae     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a7b2     00 A1 00 A1 
3a7b6     00 A1 00 A1 
3a7ba     00 6E 00 6E 
3a7be     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a7c2     00 6E 00 6E 
3a7c6     00 6E 00 6E 
3a7ca     00 6E 00 6E 
3a7ce     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a7d2     00 6E 00 6E 
3a7d6     00 6E 00 6E 
3a7da     00 6E 00 6E 
3a7de     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a7e2     00 6E 00 6E 
3a7e6     00 6E 00 6E 
3a7ea     00 6E 00 6E 
3a7ee     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a7f2     00 6E 00 6D 
3a7f6     00 6D 00 6D 
3a7fa     00 6D 00 6D 
3a7fe     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a802     00 6D 00 6D 
3a806     00 6D 00 6D 
3a80a     00 6D 00 6D 
3a80e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a812     00 6D 00 6D 
3a816     00 6D 00 6D 
3a81a     00 6D 00 6D 
3a81e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a822     00 6D 00 6D 
3a826     00 6D 00 6D 
3a82a     00 6D 00 6D 
3a82e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a832     00 6D 00 6D 
3a836     00 6D 00 6D 
3a83a     00 6D 00 6D 
3a83e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a842     00 6D 00 6D 
3a846     00 6D 00 6D 
3a84a     00 6D 00 6D 
3a84e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a852     00 6D 00 6D 
3a856     00 6D 00 6D 
3a85a     00 6D 00 6D 
3a85e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a862     00 6D 00 6D 
3a866     00 6D 00 6D 
3a86a     00 6D 00 6D 
3a86e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a872     00 6D 00 6D 
3a876     00 6D 00 6D 
3a87a     00 6D 00 6D 
3a87e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a882     00 6D 00 6D 
3a886     00 6D 00 6D 
3a88a     00 6D 00 6D 
3a88e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a892     00 6D 00 6D 
3a896     00 6D 00 6D 
3a89a     00 6D 00 6D 
3a89e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a8a2     00 6D 00 6D 
3a8a6     00 6C 00 6C 
3a8aa     00 6C 00 6C 
3a8ae     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a8b2     00 6C 00 6C 
3a8b6     00 6C 00 6C 
3a8ba     00 6C 00 6C 
3a8be     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a8c2     00 6C 00 6C 
3a8c6     00 6C 00 6C 
3a8ca     00 9D 00 9F 
3a8ce     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
3a8d2     00 9F 00 9F 
3a8d6     00 9F 00 9F 
3a8da     00 A0 00 A0 
3a8de     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a8e2     00 A0 00 A0 
3a8e6     00 A0 00 A0 
3a8ea     00 A0 00 A0 
3a8ee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a8f2     00 A0 00 A0 
3a8f6     00 A0 00 A0 
3a8fa     00 A0 00 A0 
3a8fe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a902     00 A0 00 A0 
3a906     00 A0 00 A0 
3a90a     00 A0 00 A0 
3a90e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a912     00 A0 00 A0 
3a916     00 A0 00 A0 
3a91a     00 A0 00 A0 
3a91e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a922     00 A0 00 A0 
3a926     00 A0 00 A0 
3a92a     00 A0 00 A0 
3a92e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a932     00 A0 00 A0 
3a936     00 A0 00 A0 
3a93a     00 A0 00 A0 
3a93e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a942     00 A0 00 A0 
3a946     00 A0 00 A0 
3a94a     00 A0 00 A0 
3a94e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a952     01 00 00 00 
3a956     00 00 00 00 
3a95a     00 00 00 00 
3a95e     00 00 00 00 | mouse  file "mouse2.def"
3a962     00 00 00 00 
3a966     00 00 00 00 
3a96a     00 00 00 00 
3a96e     00 00 00 00 | 	byte	$00[16]
3a972     01 01 00 00 
3a976     00 00 00 00 
3a97a     00 00 00 00 
3a97e     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a982     00 00 00 00 
3a986     00 00 00 00 
3a98a     00 00 00 00 
3a98e     00 00 00 00 | 	byte	$00[16]
3a992     01 0D 01 00 
3a996     00 00 00 00 
3a99a     00 00 00 00 
3a99e     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a9a2     00 00 00 00 
3a9a6     00 00 00 00 
3a9aa     00 00 00 00 
3a9ae     00 00 00 00 | 	byte	$00[16]
3a9b2     01 0D 0D 01 
3a9b6     00 00 00 00 
3a9ba     00 00 00 00 
3a9be     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a9c2     00 00 00 00 
3a9c6     00 00 00 00 
3a9ca     00 00 00 00 
3a9ce     00 00 00 00 | 	byte	$00[16]
3a9d2     01 0D 0D 0D 
3a9d6     01 00 00 00 
3a9da     00 00 00 00 
3a9de     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a9e2     00 00 00 00 
3a9e6     00 00 00 00 
3a9ea     00 00 00 00 
3a9ee     00 00 00 00 | 	byte	$00[16]
3a9f2     01 0D 0D 0D 
3a9f6     0D 01 00 00 
3a9fa     00 00 00 00 
3a9fe     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aa02     00 00 00 00 
3aa06     00 00 00 00 
3aa0a     00 00 00 00 
3aa0e     00 00 00 00 | 	byte	$00[16]
3aa12     01 0D 0D 0D 
3aa16     0D 0D 01 00 
3aa1a     00 00 00 00 
3aa1e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aa22     00 00 00 00 
3aa26     00 00 00 00 
3aa2a     00 00 00 00 
3aa2e     00 00 00 00 | 	byte	$00[16]
3aa32     01 0D 0D 0D 
3aa36     0D 0D 0D 01 
3aa3a     00 00 00 00 
3aa3e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
3aa42     00 00 00 00 
3aa46     00 00 00 00 
3aa4a     00 00 00 00 
3aa4e     00 00 00 00 | 	byte	$00[16]
3aa52     01 0D 0D 0D 
3aa56     0D 0D 0D 0C 
3aa5a     01 00 00 00 
3aa5e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
3aa62     00 00 00 00 
3aa66     00 00 00 00 
3aa6a     00 00 00 00 
3aa6e     00 00 00 00 | 	byte	$00[16]
3aa72     01 0D 0D 0D 
3aa76     0D 0D 0D 0D 
3aa7a     0C 01 00 00 
3aa7e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
3aa82     00 00 00 00 
3aa86     00 00 00 00 
3aa8a     00 00 00 00 
3aa8e     00 00 00 00 | 	byte	$00[16]
3aa92     01 0D 0D 0D 
3aa96     0D 0D 0D 0D 
3aa9a     0D 0C 01 00 
3aa9e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
3aaa2     00 00 00 00 
3aaa6     00 00 00 00 
3aaaa     00 00 00 00 
3aaae     00 00 00 00 | 	byte	$00[16]
3aab2     01 0D 0D 0D 
3aab6     0D 0D 0D 0D 
3aaba     0D 0D 0B 01 
3aabe     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
3aac2     00 00 00 00 
3aac6     00 00 00 00 
3aaca     00 00 00 00 
3aace     00 00 00 00 | 	byte	$00[16]
3aad2     01 0D 0D 0D 
3aad6     0C 0D 0D 03 
3aada     01 01 01 01 
3aade     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
3aae2     00 00 00 00 
3aae6     00 00 00 00 
3aaea     00 00 00 00 
3aaee     00 00 00 00 | 	byte	$00[16]
3aaf2     01 0D 0D 0C 
3aaf6     01 09 0D 03 
3aafa     00 00 00 00 
3aafe     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
3ab02     00 00 00 00 
3ab06     00 00 00 00 
3ab0a     00 00 00 00 
3ab0e     00 00 00 00 | 	byte	$00[16]
3ab12     01 0D 0C 01 
3ab16     00 01 0D 0B 
3ab1a     01 00 00 00 
3ab1e     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
3ab22     00 00 00 00 
3ab26     00 00 00 00 
3ab2a     00 00 00 00 
3ab2e     00 00 00 00 | 	byte	$00[16]
3ab32     01 0C 01 00 
3ab36     00 01 0A 0D 
3ab3a     01 00 00 00 
3ab3e     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
3ab42     00 00 00 00 
3ab46     00 00 00 00 
3ab4a     00 00 00 00 
3ab4e     00 00 00 00 | 	byte	$00[16]
3ab52     01 01 00 00 
3ab56     00 00 01 0D 
3ab5a     0B 01 00 00 
3ab5e     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
3ab62     00 00 00 00 
3ab66     00 00 00 00 
3ab6a     00 00 00 00 
3ab6e     00 00 00 00 
3ab72     00 00 00 00 
3ab76     00 00       | 	byte	$00[22]
3ab78     01 0B 0D 01 
3ab7c     00 00 00 00 
3ab80     00 00 00 00 
3ab84     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ab88     00 00 00 00 
3ab8c     00 00 00 00 
3ab90     00 00 00 00 
3ab94     00 00 00 00 
3ab98     00          | 	byte	$00[17]
3ab99     01 01 00 00 
3ab9d     00 00 00 00 
3aba1     00 00 00 00 
3aba5     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aba9     00 00 00 00 
      ...             
3ad4d     00 00 00 00 
3ad51     00          | 	byte	$00[425]
3ad52                 | 
3ad52     00 00       |              	org
3ad54 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
3ad58 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
3ad5c 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
3ad60 003             | 
3ad60 003 00 30 04 F6 |                 mov     psramaddr,#0
3ad64 004             | 
3ad64 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
3ad68 005 20 00 00 FF 
3ad6c 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
3ad70 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
3ad74 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
3ad78 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
3ad7c 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
3ad80 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
3ad84 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
3ad88 00d             | 
3ad88 00d 20 00 00 FF 
3ad8c 00e 00 30 04 F1 |                 add 	psramaddr,##16384
3ad90 00f E0 03 00 FF 
3ad94 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
3ad98 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
3ad9c 012             | 
3ad9c 012             |                 
3ad9c 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
3ada0 013             |     
3ada0 013 01 2C 60 FD |                 cogid 	t11				' get id
3ada4 014 00 00 EC FC |                 coginit #0,#0				' start the new program
3ada8 015 03 2C 60 FD |                 cogstop t11				' stop the loader
3adac 016             | 
3adac 016 00 00 00 00 | t11 		long 	0
3adb0 017 00 FF 07 00 | mailbox 	long 	$7FF00
3adb4 018 00 00 00 00 | psramaddr 	long 	0
3adb8 019 00 00 00 00 | pslockval	long 	0
3adbc 01a 00 00 00 00 | cmd             long    0
3adc0 01b 00 00 00 00 | buf1            long    0
3adc4 01c 00 40 00 00 | buf2            long    16384
3adc8 01d CC AD 03 00 | 	long	@@@_dat_ + 12612
3adcc 01e 50 32 20 52 
3add0 01f 65 74 72 6F 
3add4 020 6D 61 63 68 
3add8 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
3addc 022 42 41 53 49 
3ade0 023 43 20 76 65 
3ade4 024 72 73 69 6F 
3ade8 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
3adec 026 34 39 20 62 
3adf0 027 65 74 61 20 
3adf4 028 31 00 00 00 | 	byte	$34, $39, $20, $62, $65, $74, $61, $20, $31, $00, $00, $00
3adf8 029             | 	alignl
3adf8 029             | _hg010b_spin2_dat_
3adf8 029             | 
3adf8 029 00 00 00 00 
3adfc 02a 00 00 00 00 
3ae00 02b 00 00 00 00 
3ae04 02c 00 00 00 00 
3ae08 02d 00 00 00    | vga_font       file "vgafont.def"
3ae0b 02d 7E 81 A5 81 
3ae0f 02e 81 BD 99 81 
3ae13 02f 81 7E 00 00 
3ae17 030 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
3ae1b 031 7E FF DB FF 
3ae1f 032 FF C3 E7 FF 
3ae23 033 FF 7E 00 00 
3ae27 034 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
3ae2b 035 00 36 7F 7F 
3ae2f 036 7F 7F 3E 1C 
3ae33 037 08 00 00 00 
3ae37 038 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
3ae3b 039 00 08 1C 3E 
3ae3f 03a 7F 3E 1C 08 
3ae43 03b 00 00 00 00 
3ae47 03c 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
3ae4b 03d 18 3C 3C E7 
3ae4f 03e E7 E7 18 18 
3ae53 03f 3C 00 00 00 
3ae57 040 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3ae5b 041 18 3C 7E FF 
3ae5f 042 FF 7E 18 18 
3ae63 043 3C 00 00 00 
3ae67 044 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3ae6b 045 00 00 00 18 
3ae6f 046 3C 3C 18 00 
3ae73 047 00 00 00 00 
3ae77 048 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
3ae7b 049 FF FF FF E7 
3ae7f 04a C3 C3 E7 FF 
3ae83 04b FF FF FF FF 
3ae87 04c FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3ae8b 04d 00 00 3C 66 
3ae8f 04e 42 42 66 3C 
3ae93 04f 00 00 00 00 
3ae97 050 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
3ae9b 051 FF FF C3 99 
3ae9f 052 BD BD 99 C3 
3aea3 053 FF FF FF FF 
3aea7 054 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3aeab 055 78 70 58 4C 
3aeaf 056 1E 33 33 33 
3aeb3 057 33 1E 00 00 
3aeb7 058 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
3aebb 059 3C 66 66 66 
3aebf 05a 66 3C 18 7E 
3aec3 05b 18 18 00 00 
3aec7 05c 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
3aecb 05d FC CC FC 0C 
3aecf 05e 0C 0C 0C 0E 
3aed3 05f 0F 07 00 00 
3aed7 060 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
3aedb 061 FE C6 FE C6 
3aedf 062 C6 C6 C6 E6 
3aee3 063 E7 67 03 00 
3aee7 064 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
3aeeb 065 18 18 DB 3C 
3aeef 066 E7 3C DB 18 
3aef3 067 18 00 00 00 
3aef7 068 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
3aefb 069 03 07 0F 1F 
3aeff 06a 7F 1F 0F 07 
3af03 06b 03 01 00 00 
3af07 06c 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
3af0b 06d 60 70 78 7C 
3af0f 06e 7F 7C 78 70 
3af13 06f 60 40 00 00 
3af17 070 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
3af1b 071 18 3C 7E 18 
3af1f 072 18 18 7E 3C 
3af23 073 18 00 00 00 
3af27 074 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
3af2b 075 66 66 66 66 
3af2f 076 66 66 66    | 	byte	$66[7]
3af32 077 00 66 66 00 
3af36 078 00 00 00 00 
3af3a 079 00 FE DB DB 
3af3e 07a DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
3af42 07b D8 D8 D8 00 
3af46 07c 00 00 00 3E 
3af4a 07d 63 06 1C 36 
3af4e 07e 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
3af52 07f 30 63 3E 00 
3af56 080 00 00 00 00 
3af5a 081 00 00 00 00 
3af5e 082 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3af62 083 7F 7F 7F 00 
3af66 084 00 00 00 00 
3af6a 085 00 18 3C 7E 
3af6e 086 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
3af72 087 3C 18 7E 00 
3af76 088 00 00 00 00 
3af7a 089 00 18 3C 7E 
3af7e 08a 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
3af82 08b 18 18 18 00 
3af86 08c 00 00 00 00 
3af8a 08d 00 18 18 18 
3af8e 08e 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3af92 08f 7E 3C 18 00 
3af96 090 00 00 00 00 
3af9a 091 00 00 00 18 
3af9e 092 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
3afa2 093 00 00 00 00 
3afa6 094 00 00 00 00 
3afaa 095 00 00 00    | 	byte	$00[11]
3afad 096 0C 06 7F 06 
3afb1 097 0C 00 00 00 
3afb5 098 00 00 00 00 
3afb9 099 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3afbd 09a 00 03 03 03 
3afc1 09b 7F 00 00 00 
3afc5 09c 00 00 00 00 
3afc9 09d 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3afcd 09e 14 36 7F 36 
3afd1 09f 14 00 00 00 
3afd5 0a0 00 00 00 00 
3afd9 0a1 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
3afdd 0a2 1C 1C 3E 3E 
3afe1 0a3 7F 7F 00 00 
3afe5 0a4 00 00 00 00 
3afe9 0a5 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3afed 0a6 7F 3E 3E 1C 
3aff1 0a7 1C 08 00 00 
3aff5 0a8 00 00 00 00 
3aff9 0a9 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3affd 0aa 00 00 00 00 
3b001 0ab 00 00 00 00 
3b005 0ac 00 00 00 00 
3b009 0ad 00 00       | 	byte	$00[14]
3b00b 0ad 18 3C 3C 3C 
3b00f 0ae 18 18 18 00 
3b013 0af 18 18 00 00 
3b017 0b0 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
3b01b 0b1 66 24 00 00 
3b01f 0b2 00 00 00 00 
3b023 0b3 00 00 00 00 
3b027 0b4 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b02b 0b5 00 36 36 7F 
3b02f 0b6 36 36 36 7F 
3b033 0b7 36 36 00 00 
3b037 0b8 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
3b03b 0b9 3E 63 43 03 
3b03f 0ba 3E 60 60 61 
3b043 0bb 63 3E 18 18 
3b047 0bc 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
3b04b 0bd 00 00 43 63 
3b04f 0be 30 18 0C 06 
3b053 0bf 63 61 00 00 
3b057 0c0 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
3b05b 0c1 1C 36 36 1C 
3b05f 0c2 6E 3B 33 33 
3b063 0c3 33 6E 00 00 
3b067 0c4 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
3b06b 0c5 0C 0C 0C 06 
3b06f 0c6 00 00 00 00 
3b073 0c7 00 00 00 00 
3b077 0c8 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b07b 0c9 30 18 0C 0C 
3b07f 0ca 0C 0C 0C 0C 
3b083 0cb 18 30 00 00 
3b087 0cc 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
3b08b 0cd 0C 18 30 30 
3b08f 0ce 30 30 30 30 
3b093 0cf 18 0C 00 00 
3b097 0d0 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
3b09b 0d1 00 00 00 66 
3b09f 0d2 3C FF 3C 66 
3b0a3 0d3 00 00 00 00 
3b0a7 0d4 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
3b0ab 0d5 00 00 00 18 
3b0af 0d6 18 7E 18 18 
3b0b3 0d7 00 00 00 00 
3b0b7 0d8 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3b0bb 0d9 00 00 00 00 
3b0bf 0da 00 00 00 00 | 	byte	$00[8]
3b0c3 0db 18 18 18 0C 
3b0c7 0dc 00 00 00 00 
3b0cb 0dd 00 00 00 00 
3b0cf 0de 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
3b0d3 0df 00 00 00 00 
3b0d7 0e0 00 00 00 00 
3b0db 0e1 00 00 00 00 
3b0df 0e2 00 00 00 00 | 	byte	$00[16]
3b0e3 0e3 18 18 00 00 
3b0e7 0e4 00 00 00 00 
3b0eb 0e5 00 00 40 60 
3b0ef 0e6 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3b0f3 0e7 03 01 00 00 
3b0f7 0e8 00 00 00 00 
3b0fb 0e9 1C 36 63 63 
3b0ff 0ea 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3b103 0eb 36 1C 00 00 
3b107 0ec 00 00 00 00 
3b10b 0ed 18 1C 1E 18 
3b10f 0ee 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3b113 0ef 18 7E 00 00 
3b117 0f0 00 00 00 00 
3b11b 0f1 3E 63 60 30 
3b11f 0f2 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3b123 0f3 63 7F 00 00 
3b127 0f4 00 00 00 00 
3b12b 0f5 3E 63 60 60 
3b12f 0f6 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
3b133 0f7 63 3E 00 00 
3b137 0f8 00 00 00 00 
3b13b 0f9 30 38 3C 36 
3b13f 0fa 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
3b143 0fb 30 78 00 00 
3b147 0fc 00 00 00 00 
3b14b 0fd 7F 03 03 03 
3b14f 0fe 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
3b153 0ff 63 3E 00 00 
3b157 100 00 00 00 00 
3b15b 101 1C 06 03 03 
3b15f 102 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
3b163 103 63 3E 00 00 
3b167 104 00 00 00 00 
3b16b 105 7F 63 60 60 
3b16f 106 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
3b173 107 0C 0C 00 00 
3b177 108 00 00 00 00 
3b17b 109 3E 63 63 63 
3b17f 10a 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
3b183 10b 63 3E 00 00 
3b187 10c 00 00 00 00 
3b18b 10d 3E 63 63 63 
3b18f 10e 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
3b193 10f 30 1E 00 00 
3b197 110 00 00 00 00 
3b19b 111 00 00 00 18 
3b19f 112 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3b1a3 113 18 18 00 00 
3b1a7 114 00 00 00 00 
3b1ab 115 00 00 00 18 
3b1af 116 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3b1b3 117 18 18 0C 00 
3b1b7 118 00 00 00 00 
3b1bb 119 00 60 30 18 
3b1bf 11a 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
3b1c3 11b 30 60 00 00 
3b1c7 11c 00 00 00 00 
3b1cb 11d 00 00 00 7E 
3b1cf 11e 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
3b1d3 11f 00 00 00 00 
3b1d7 120 00 00 00 00 
3b1db 121 00          | 	byte	$00[9]
3b1dc 122 06 0C 18 30 
3b1e0 123 60 30 18 0C 
3b1e4 124 06 00 00 00 
3b1e8 125 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
3b1ec 126 63 63 30 18 
3b1f0 127 18 18 00 18 
3b1f4 128 18 00 00 00 
3b1f8 129 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
3b1fc 12a 3E 63 63 7B 
3b200 12b 7B 7B 3B 03 
3b204 12c 3E 00 00 00 
3b208 12d 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
3b20c 12e 1C 36 63 63 
3b210 12f 7F 63 63 63 
3b214 130 63 00 00 00 
3b218 131 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
3b21c 132 66 66 66 3E 
3b220 133 66 66 66 66 
3b224 134 3F 00 00 00 
3b228 135 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
3b22c 136 66 43 03 03 
3b230 137 03 03 43 66 
3b234 138 3C 00 00 00 
3b238 139 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
3b23c 13a 36 66 66 66 
3b240 13b 66 66 66 36 
3b244 13c 1F 00 00 00 
3b248 13d 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
3b24c 13e 66 46 16 1E 
3b250 13f 16 06 46 66 
3b254 140 7F 00 00 00 
3b258 141 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
3b25c 142 66 46 16 1E 
3b260 143 16 06 06 06 
3b264 144 0F 00 00 00 
3b268 145 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
3b26c 146 66 43 03 03 
3b270 147 7B 63 63 66 
3b274 148 5C 00 00 00 
3b278 149 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
3b27c 14a 63 63 63 7F 
3b280 14b 63 63 63 63 
3b284 14c 63 00 00 00 
3b288 14d 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
3b28c 14e 18 18 18 18 
3b290 14f 18 18 18 18 | 	byte	$18[8]
3b294 150 3C 00 00 00 
3b298 151 00 00 00 78 
3b29c 152 30 30 30 30 
3b2a0 153 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
3b2a4 154 1E 00 00 00 
3b2a8 155 00 00 00 67 
3b2ac 156 66 66 36 1E 
3b2b0 157 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
3b2b4 158 67 00 00 00 
3b2b8 159 00 00 00 0F 
3b2bc 15a 06 06 06 06 
3b2c0 15b 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3b2c4 15c 7F 00 00 00 
3b2c8 15d 00 00 00 63 
3b2cc 15e 77 7F 7F 6B 
3b2d0 15f 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
3b2d4 160 63 00 00 00 
3b2d8 161 00 00 00 63 
3b2dc 162 67 6F 7F 7B 
3b2e0 163 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
3b2e4 164 63 00 00 00 
3b2e8 165 00 00 00 3E 
3b2ec 166 63 63 63 63 
3b2f0 167 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3b2f4 168 3E 00 00 00 
3b2f8 169 00 00 00 3F 
3b2fc 16a 66 66 66 3E 
3b300 16b 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
3b304 16c 0F 00 00 00 
3b308 16d 00 00 00 3E 
3b30c 16e 63 63 63 63 
3b310 16f 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
3b314 170 3E 30 70 00 
3b318 171 00 00 00 3F 
3b31c 172 66 66 66 3E 
3b320 173 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
3b324 174 67 00 00 00 
3b328 175 00 00 00 3E 
3b32c 176 63 63 06 1C 
3b330 177 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3b334 178 3E 00 00 00 
3b338 179 00 00 00 7E 
3b33c 17a 7E 5A 18 18 
3b340 17b 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3b344 17c 3C 00 00 00 
3b348 17d 00 00 00 63 
3b34c 17e 63 63 63 63 
3b350 17f 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3b354 180 3E 00 00 00 
3b358 181 00 00 00 63 
3b35c 182 63 63 63 63 
3b360 183 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
3b364 184 08 00 00 00 
3b368 185 00 00 00 63 
3b36c 186 63 63 63 6B 
3b370 187 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
3b374 188 36 00 00 00 
3b378 189 00 00 00 63 
3b37c 18a 63 36 3E 1C 
3b380 18b 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
3b384 18c 63 00 00 00 
3b388 18d 00 00 00 66 
3b38c 18e 66 66 66 3C 
3b390 18f 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
3b394 190 3C 00 00 00 
3b398 191 00 00 00 7F 
3b39c 192 63 61 30 18 
3b3a0 193 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3b3a4 194 7F 00 00 00 
3b3a8 195 00 00 00 3C 
3b3ac 196 0C 0C 0C 0C 
3b3b0 197 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3b3b4 198 3C 00 00 00 
3b3b8 199 00 00 00 00 
3b3bc 19a 01 03 07 0E 
3b3c0 19b 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
3b3c4 19c 40 00 00 00 
3b3c8 19d 00 00 00 3C 
3b3cc 19e 30 30 30 30 
3b3d0 19f 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
3b3d4 1a0 3C 00 00 00 
3b3d8 1a1 1C 36 00 00 
3b3dc 1a2 00 00 00 00 
3b3e0 1a3 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b3e4 1a4 00 00 00 00 
3b3e8 1a5 00 00 00 00 
3b3ec 1a6 00 00 00 00 
3b3f0 1a7 00 00 00 00 
3b3f4 1a8 00          | 	byte	$00[17]
3b3f5 1a8 FF 00 00 0C 
3b3f9 1a9 18 00 00 00 
3b3fd 1aa 00 00 00 00 
3b401 1ab 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b405 1ac 00 00 00 00 
3b409 1ad 00 00 00 00 
3b40d 1ae 00          | 	byte	$00[9]
3b40e 1ae 1E 30 3E 33 
3b412 1af 33 33 6E 00 
3b416 1b0 00 00 00 00 
3b41a 1b1 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3b41e 1b2 1E 36 66 66 
3b422 1b3 66 66 3E 00 
3b426 1b4 00 00 00 00 
3b42a 1b5 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b42e 1b6 3E 63 03 03 
3b432 1b7 03 63 3E 00 
3b436 1b8 00 00 00 00 
3b43a 1b9 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3b43e 1ba 3C 36 33 33 
3b442 1bb 33 33 6E 00 
3b446 1bc 00 00 00 00 
3b44a 1bd 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b44e 1be 3E 63 7F 03 
3b452 1bf 03 63 3E 00 
3b456 1c0 00 00 00 00 
3b45a 1c1 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3b45e 1c2 0C 1E 0C 0C 
3b462 1c3 0C 0C 1E 00 
3b466 1c4 00 00 00 00 
3b46a 1c5 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b46e 1c6 6E 33 33 33 
3b472 1c7 33 33 3E 30 
3b476 1c8 33 1E 00 00 
3b47a 1c9 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3b47e 1ca 36 6E 66 66 
3b482 1cb 66 66 67 00 
3b486 1cc 00 00 00 00 
3b48a 1cd 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3b48e 1ce 1C 18 18 18 
3b492 1cf 18 18 3C 00 
3b496 1d0 00 00 00 00 
3b49a 1d1 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
3b49e 1d2 70 60 60 60 
3b4a2 1d3 60 60 60 66 
3b4a6 1d4 66 3C 00 00 
3b4aa 1d5 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
3b4ae 1d6 66 36 1E 1E 
3b4b2 1d7 36 66 67 00 
3b4b6 1d8 00 00 00 00 
3b4ba 1d9 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
3b4be 1da 18 18 18 18 
3b4c2 1db 18 18       | 	byte	$18[6]
3b4c4 1dc 3C 00 00 00 
3b4c8 1dd 00 00 00 00 
3b4cc 1de 00 00 37 7F 
3b4d0 1df 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
3b4d4 1e0 63 00 00 00 
3b4d8 1e1 00 00 00 00 
3b4dc 1e2 00 00 3B 66 
3b4e0 1e3 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3b4e4 1e4 66 00 00 00 
3b4e8 1e5 00 00 00 00 
3b4ec 1e6 00 00 3E 63 
3b4f0 1e7 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
3b4f4 1e8 3E 00 00 00 
3b4f8 1e9 00 00 00 00 
3b4fc 1ea 00 00 3B 66 
3b500 1eb 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3b504 1ec 3E 06 06 0F 
3b508 1ed 00 00 00 00 
3b50c 1ee 00 00 6E 33 
3b510 1ef 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
3b514 1f0 3E 30 30 78 
3b518 1f1 00 00 00 00 
3b51c 1f2 00 00 3B 6E 
3b520 1f3 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
3b524 1f4 0F 00 00 00 
3b528 1f5 00 00 00 00 
3b52c 1f6 00 00 3E 63 
3b530 1f7 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
3b534 1f8 3E 00 00 00 
3b538 1f9 00 00 00 08 
3b53c 1fa 0C 0C 3F 0C 
3b540 1fb 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3b544 1fc 38 00 00 00 
3b548 1fd 00 00 00 00 
3b54c 1fe 00 00 33 33 
3b550 1ff 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
3b554 200 6E 00 00 00 
3b558 201 00 00 00 00 
3b55c 202 00 00 63 63 
3b560 203 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
3b564 204 1C 00 00 00 
3b568 205 00 00 00 00 
3b56c 206 00 00 63 63 
3b570 207 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
3b574 208 36 00 00 00 
3b578 209 00 00 00 00 
3b57c 20a 00 00 63 36 
3b580 20b 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
3b584 20c 63 00 00 00 
3b588 20d 00 00 00 00 
3b58c 20e 00 00 63 63 
3b590 20f 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
3b594 210 7E 60 30 1F 
3b598 211 00 00 00 00 
3b59c 212 00 00 7F 33 
3b5a0 213 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
3b5a4 214 7F 00 00 00 
3b5a8 215 00 00 00 70 
3b5ac 216 18 18 18 0E 
3b5b0 217 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
3b5b4 218 70 00 00 00 
3b5b8 219 00 00 00 18 
3b5bc 21a 18 18 18 18 
3b5c0 21b 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b5c4 21c 18 00 00 00 
3b5c8 21d 00 00 00 0E 
3b5cc 21e 18 18 18 70 
3b5d0 21f 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
3b5d4 220 0E 00 00 00 
3b5d8 221 6E 3B 00 00 
3b5dc 222 00 00 00 00 
3b5e0 223 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b5e4 224 00 00 00 00 
3b5e8 225 00 00 00 00 
3b5ec 226 00 00       | 	byte	$00[10]
3b5ee 226 08 1C 36 63 
3b5f2 227 63 63 7F 00 
3b5f6 228 00 00 00 00 
3b5fa 229 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
3b5fe 22a 03 03 03 03 
3b602 22b 43 66 3C 18 
3b606 22c 30 1E 00 00 
3b60a 22d 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
3b60e 22e 33 33 33 33 
3b612 22f 33 33       | 	byte	$33[6]
3b614 230 6E 00 00 00 
3b618 231 00 00 60 30 
3b61c 232 18 00 3E 63 
3b620 233 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
3b624 234 3E 00 00 00 
3b628 235 00 00 08 1C 
3b62c 236 36 00 1E 30 
3b630 237 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
3b634 238 6E 00 00 00 
3b638 239 00 00 00 00 
3b63c 23a 33 00 1E 30 
3b640 23b 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
3b644 23c 6E 00 00 00 
3b648 23d 00 00 1C 36 
3b64c 23e 1C 00 33 33 
3b650 23f 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
3b654 240 6E 00 00 00 
3b658 241 00 00 60 30 
3b65c 242 18 00 3E 63 
3b660 243 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
3b664 244 3E 00 00 00 
3b668 245 00 00 00 00 
3b66c 246 00 00 3E 63 
3b670 247 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
3b674 248 3E 18 30 1E 
3b678 249 00 00 00 1C 
3b67c 24a 58 78 38 18 
3b680 24b 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
3b684 24c 3C 00 00 00 
3b688 24d 00 00 00 00 
3b68c 24e 63 00 3E 63 
3b690 24f 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
3b694 250 3E 00 00 00 
3b698 251 66 33 00 3E 
3b69c 252 63 63 63 63 
3b6a0 253 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3b6a4 254 3E 00 00 00 
3b6a8 255 00 00 CC 66 
3b6ac 256 33 00 3E 63 
3b6b0 257 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
3b6b4 258 3E 00 00 00 
3b6b8 259 00 00 18 3C 
3b6bc 25a 66 00 1C 18 
3b6c0 25b 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
3b6c4 25c 3C 00 00 00 
3b6c8 25d 30 18 00 7F 
3b6cc 25e 63 61 30 18 
3b6d0 25f 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3b6d4 260 7F 00 00 00 
3b6d8 261 00 63 00 08 
3b6dc 262 1C 36 63 63 
3b6e0 263 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
3b6e4 264 63 00 00 00 
3b6e8 265 30 18 00 3C 
3b6ec 266 66 43 03 03 
3b6f0 267 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
3b6f4 268 3C 00 00 00 
3b6f8 269 30 18 00 7F 
3b6fc 26a 66 46 16 1E 
3b700 26b 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
3b704 26c 7F 00 00 00 
3b708 26d 0C 06 00 0F 
3b70c 26e 06 06 06 06 
3b710 26f 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3b714 270 7F 00 00 00 
3b718 271 30 18 00 1C 
3b71c 272 18 18 18 18 
3b720 273 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
3b724 274 3C 00 00 00 
3b728 275 00 00 08 1C 
3b72c 276 36 00 3E 63 
3b730 277 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
3b734 278 3E 00 00 00 
3b738 279 00 00 00 00 
3b73c 27a 63 00 3E 63 
3b740 27b 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
3b744 27c 3E 00 00 00 
3b748 27d 00 00 00 6F 
3b74c 27e 46 26 06 06 
3b750 27f 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
3b754 280 7F 00 00 00 
3b758 281 00 00 00 6E 
3b75c 282 4C 2C 0C 0C 
3b760 283 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
3b764 284 1E 00 00 00 
3b768 285 30 18 00 3E 
3b76c 286 63 63 06 1C 
3b770 287 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3b774 288 3E 00 00 00 
3b778 289 00 00 60 30 
3b77c 28a 18 00 3E 63 
3b780 28b 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
3b784 28c 3E 00 00 00 
3b788 28d 00 63 00 3E 
3b78c 28e 63 63 63 63 
3b790 28f 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3b794 290 3E 00 00 00 
3b798 291 00 63 00 63 
3b79c 292 63 63 63 63 
3b7a0 293 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3b7a4 294 3E 00 00 00 
3b7a8 295 6C 38 00 7E 
3b7ac 296 7E 5A 18 18 
3b7b0 297 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3b7b4 298 3C 00 00 00 
3b7b8 299 00 00 60 48 
3b7bc 29a 2C 0C 3F 0C 
3b7c0 29b 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3b7c4 29c 38 00 00 00 
3b7c8 29d 00 00 00 0F 
3b7cc 29e 26 36 1E 0E 
3b7d0 29f 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
3b7d4 2a0 7F 00 00 00 
3b7d8 2a1 00 00 00 00 
3b7dc 2a2 00 63 36 1C 
3b7e0 2a3 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
3b7e4 2a4 00 00 00 00 
3b7e8 2a5 00 00       | 	byte	$00[6]
3b7ea 2a5 36 1C 08 00 
3b7ee 2a6 3E 63 03 03 
3b7f2 2a7 03 63 3E 00 
3b7f6 2a8 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
3b7fa 2a9 30 18 0C 00 
3b7fe 2aa 1E 30 3E 33 
3b802 2ab 33 33 6E 00 
3b806 2ac 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3b80a 2ad 60 30 18 00 
3b80e 2ae 1C 18 18 18 
3b812 2af 18 18 3C 00 
3b816 2b0 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3b81a 2b1 60 30 18 00 
3b81e 2b2 3E 63 63 63 
3b822 2b3 63 63 3E 00 
3b826 2b4 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3b82a 2b5 30 18 0C 00 
3b82e 2b6 33 33 33 33 
3b832 2b7 33 33 6E 00 
3b836 2b8 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3b83a 2b9 00 08 1C 36 
3b83e 2ba 63 63 7F 63 
3b842 2bb 63 63 63 18 
3b846 2bc 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3b84a 2bd 00 00 00 00 
3b84e 2be 1E 30 3E 33 
3b852 2bf 33 33 6E 18 
3b856 2c0 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3b85a 2c1 00 7F 63 61 
3b85e 2c2 30 18 0C 06 
3b862 2c3 43 63 7F 00 
3b866 2c4 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3b86a 2c5 36 1C 08 00 
3b86e 2c6 7F 33 18 0C 
3b872 2c7 06 63 7F 00 
3b876 2c8 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3b87a 2c9 00 7F 66 46 
3b87e 2ca 16 1E 16 06 
3b882 2cb 46 66 7F 18 
3b886 2cc 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3b88a 2cd 00 00 00 00 
3b88e 2ce 3E 63 7F 03 
3b892 2cf 03 63 3E 18 
3b896 2d0 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
3b89a 2d1 00 3C 66 03 
3b89e 2d2 1F 03 0F 03 
3b8a2 2d3 03 66 3C 00 
3b8a6 2d4 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
3b8aa 2d5 60 30 18 00 
3b8ae 2d6 7F 33 18 0C 
3b8b2 2d7 06 63 7F 00 
3b8b6 2d8 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
3b8ba 2d9 00 3C 66 43 
3b8be 2da 03 03 03 03 
3b8c2 2db 43 66 3C 00 
3b8c6 2dc 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
3b8ca 2dd 00 00 00 00 
3b8ce 2de 3E 63 06 1C 
3b8d2 2df 30 63 3E 18 
3b8d6 2e0 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
3b8da 2e1 00 00 00 00 
3b8de 2e2 00 00       | 	byte	$00[6]
3b8e0 2e3 6C 36 1B 36 
3b8e4 2e4 6C 00 00 00 
3b8e8 2e5 00 00 00 00 
3b8ec 2e6 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b8f0 2e7 1B 36 6C 36 
3b8f4 2e8 1B 00 00 00 
3b8f8 2e9 88 22 88 22 
3b8fc 2ea 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
3b900 2eb 88 22 88 22 
3b904 2ec 88 22 88 22 
3b908 2ed AA 55 AA 55 
3b90c 2ee AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
3b910 2ef AA 55 AA 55 
3b914 2f0 AA 55 AA 55 
3b918 2f1 BB EE BB EE 
3b91c 2f2 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
3b920 2f3 BB EE BB EE 
3b924 2f4 BB EE BB EE 
3b928 2f5 18 18 18 18 
3b92c 2f6 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
3b930 2f7 18 18 18 18 
3b934 2f8 18 18 18 18 
3b938 2f9 18 18 18 18 
3b93c 2fa 18 18 18    | 	byte	$18[15]
3b93f 2fa 1F 18 18 18 
3b943 2fb 18 18 18 18 
3b947 2fc 18 30 18 00 
3b94b 2fd 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3b94f 2fe 63 7F 63 63 
3b953 2ff 63 63 00 00 
3b957 300 00 1C 36 00 
3b95b 301 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3b95f 302 63 7F 63 63 
3b963 303 63 63 00 00 
3b967 304 00 36 1C 00 
3b96b 305 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3b96f 306 1E 16 06 46 
3b973 307 66 7F 00 00 
3b977 308 00 00 00 00 
3b97b 309 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
3b97f 30a 1C 30 60 63 
3b983 30b 63 3E 18 30 
3b987 30c 1E 6C 6C 6C 
3b98b 30d 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
3b98f 30e 6F 6C 6C 6C 
3b993 30f 6C 6C 6C 6C 
3b997 310 6C 6C 6C 6C 
3b99b 311 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b99f 312 6C 6C 6C 6C 
3b9a3 313 6C 6C 6C 6C 
3b9a7 314 6C          | 	byte	$6c[9]
3b9a8 315 00 00 00 00 
3b9ac 316 00          | 	byte	$00[5]
3b9ad 316 7F 60 6F 6C 
3b9b1 317 6C 6C 6C 6C 
3b9b5 318 6C 6C 6C 6C 
3b9b9 319 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b9bd 31a 6F 60 7F 00 
3b9c1 31b 00 00 00 00 
3b9c5 31c 00 00 00 18 
3b9c9 31d 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
3b9cd 31e 61 30 18 0C 
3b9d1 31f 06 43 63 7F 
3b9d5 320 00 00 00 00 
3b9d9 321 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
3b9dd 322 00 7F 33 18 
3b9e1 323 0C 06 63 7F 
3b9e5 324 00 00 00 00 
3b9e9 325 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
3b9ed 326 00 00 1F 18 
3b9f1 327 18 18 18 18 
3b9f5 328 18 18 18 18 
3b9f9 329 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b9fd 32a 18 18 F8 00 
3ba01 32b 00 00 00 00 
3ba05 32c 00 00 00 18 
3ba09 32d 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3ba0d 32e 18 18 FF 00 
3ba11 32f 00 00 00 00 
3ba15 330 00 00 00 00 
3ba19 331 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ba1d 332 00 00 FF 18 
3ba21 333 18 18 18 18 
3ba25 334 18 18 18 18 
3ba29 335 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3ba2d 336 18 18 F8 18 
3ba31 337 18 18 18 18 
3ba35 338 18 18 18 00 
3ba39 339 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3ba3d 33a 00 00 FF 00 
3ba41 33b 00 00 00 00 
3ba45 33c 00 00 00 18 
3ba49 33d 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3ba4d 33e 18 18 FF 18 
3ba51 33f 18 18 18 18 
3ba55 340 18 18 18 63 
3ba59 341 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
3ba5d 342 36 63 63 7F 
3ba61 343 63 63 63 63 
3ba65 344 00 00 00 00 
3ba69 345 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
3ba6d 346 00 1E 30 3E 
3ba71 347 33 33 33 6E 
3ba75 348 00 00 00 6C 
3ba79 349 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3ba7d 34a EC 0C FC 00 
3ba81 34b 00 00 00 00 
3ba85 34c 00 00 00 00 
3ba89 34d 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ba8d 34e FC 0C EC 6C 
3ba91 34f 6C 6C 6C 6C 
3ba95 350 6C 6C 6C 6C 
3ba99 351 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3ba9d 352 EF 00 FF 00 
3baa1 353 00 00 00 00 
3baa5 354 00 00 00 00 
3baa9 355 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3baad 356 FF 00 EF 6C 
3bab1 357 6C 6C 6C 6C 
3bab5 358 6C 6C 6C 6C 
3bab9 359 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3babd 35a EC 0C EC 6C 
3bac1 35b 6C 6C 6C 6C 
3bac5 35c 6C 6C 6C 00 
3bac9 35d 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3bacd 35e FF 00 FF 00 
3bad1 35f 00 00 00 00 
3bad5 360 00 00 00 6C 
3bad9 361 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3badd 362 EF 00 EF 6C 
3bae1 363 6C 6C 6C 6C 
3bae5 364 6C 6C 6C 00 
3bae9 365 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3baed 366 63 3E 63 63 
3baf1 367 63 63 3E 63 
3baf5 368 00 00 00 00 
3baf9 369 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
3bafd 36a 30 3C 36 33 
3bb01 36b 33 33 33 6E 
3bb05 36c 00 00 00 00 
3bb09 36d 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
3bb0d 36e 66 66 6F 66 
3bb11 36f 66 66 36 1F 
3bb15 370 00 00 00 36 
3bb19 371 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
3bb1d 372 66 66 66 66 
3bb21 373 66 66       | 	byte	$66[6]
3bb23 373 36 1F 00 00 
3bb27 374 00 00 63 00 
3bb2b 375 7F 66 46 16 
3bb2f 376 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
3bb33 377 66 7F 00 00 
3bb37 378 00 6C 38 00 
3bb3b 379 38 30 30 3C 
3bb3f 37a 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
3bb43 37b 33 6E 00 00 
3bb47 37c 00 36 1C 00 
3bb4b 37d 63 67 6F 7F 
3bb4f 37e 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
3bb53 37f 63 63 00 00 
3bb57 380 00 30 18 00 
3bb5b 381 3C 18 18 18 
3bb5f 382 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3bb63 383 18 3C 00 00 
3bb67 384 00 3C 66 00 
3bb6b 385 3C 18 18 18 
3bb6f 386 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3bb73 387 18 3C 00 00 
3bb77 388 00 00 00 36 
3bb7b 389 1C 08 00 3E 
3bb7f 38a 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
3bb83 38b 63 3E 00 00 
3bb87 38c 00 18 18 18 
3bb8b 38d 18 18 18 18 
3bb8f 38e 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
3bb93 38f 00 00 00 00 
3bb97 390 00 00 00 00 
3bb9b 391 00 00 00 00 | 	byte	$00[12]
3bb9f 392 F8 18 18 18 
3bba3 393 18 18 18 18 
3bba7 394 18 FF FF FF 
3bbab 395 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3bbaf 396 FF FF FF FF 
3bbb3 397 FF FF FF FF 
3bbb7 398 FF          | 	byte	$ff[9]
3bbb8 399 00 00 00 00 
3bbbc 39a 00 00 00    | 	byte	$00[7]
3bbbf 39a FF FF FF FF 
3bbc3 39b FF FF FF FF 
3bbc7 39c FF          | 	byte	$ff[9]
3bbc8 39d 00 00 00 7E 
3bbcc 39e 7E 5A 18 18 
3bbd0 39f 18 18 18 18 
3bbd4 3a0 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
3bbd8 3a1 1C 36 1C 63 
3bbdc 3a2 63 63 63 63 
3bbe0 3a3 63 63 63 63 
3bbe4 3a4 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3bbe8 3a5 FF FF FF FF 
3bbec 3a6 FF FF FF    | 	byte	$ff[7]
3bbef 3a6 00 00 00 00 
3bbf3 3a7 00 00 00 00 
3bbf7 3a8 00          | 	byte	$00[9]
3bbf8 3a9 30 18 00 3E 
3bbfc 3aa 63 63 63 63 
3bc00 3ab 63 63 63 63 
3bc04 3ac 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3bc08 3ad 00 00 00 1E 
3bc0c 3ae 33 33 33 1B 
3bc10 3af 33 63 63 63 
3bc14 3b0 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
3bc18 3b1 1C 36 00 3E 
3bc1c 3b2 63 63 63 63 
3bc20 3b3 63 63 63 63 
3bc24 3b4 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3bc28 3b5 30 18 00 63 
3bc2c 3b6 67 6F 7F 7B 
3bc30 3b7 73 63 63 63 
3bc34 3b8 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
3bc38 3b9 00 00 60 30 
3bc3c 3ba 18 00 3B 66 
3bc40 3bb 66 66 66 66 
3bc44 3bc 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3bc48 3bd 00 00 36 1C 
3bc4c 3be 08 00 3B 66 
3bc50 3bf 66 66 66 66 
3bc54 3c0 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3bc58 3c1 36 1C 00 3E 
3bc5c 3c2 63 63 06 1C 
3bc60 3c3 30 60 63 63 
3bc64 3c4 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
3bc68 3c5 00 00 36 1C 
3bc6c 3c6 08 00 3E 63 
3bc70 3c7 06 1C 30 63 
3bc74 3c8 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
3bc78 3c9 30 18 00 3F 
3bc7c 3ca 66 66 66 3E 
3bc80 3cb 36 66 66 66 
3bc84 3cc 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
3bc88 3cd 30 18 00 63 
3bc8c 3ce 63 63 63 63 
3bc90 3cf 63 63 63 63 
3bc94 3d0 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3bc98 3d1 00 00 60 30 
3bc9c 3d2 18 00 3B 6E 
3bca0 3d3 66 06 06 06 
3bca4 3d4 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
3bca8 3d5 66 33 00 63 
3bcac 3d6 63 63 63 63 
3bcb0 3d7 63 63 63 63 
3bcb4 3d8 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3bcb8 3d9 00 00 60 30 
3bcbc 3da 18 00 63 63 
3bcc0 3db 63 63 63 63 
3bcc4 3dc 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
3bcc8 3dd 30 18 00 66 
3bccc 3de 66 66 66 3C 
3bcd0 3df 18 18 18 18 
3bcd4 3e0 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
3bcd8 3e1 00 00 00 08 
3bcdc 3e2 0C 0C 3F 0C 
3bce0 3e3 0C 0C 0C 6C 
3bce4 3e4 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
3bce8 3e5 30 18 00 00 
3bcec 3e6 00 00 00 00 
3bcf0 3e7 00 00 00 00 
3bcf4 3e8 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bcf8 3e9 00 00 00 00 
3bcfc 3ea 00 00 00 00 | 	byte	$00[8]
3bd00 3eb 7F 00 00 00 
3bd04 3ec 00 00 00 00 
3bd08 3ed 66 33 00 00 
3bd0c 3ee 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
3bd10 3ef 00 00 00 00 
3bd14 3f0 00 00 00 00 
3bd18 3f1 00 00 00 00 
3bd1c 3f2 00 00 00 00 
3bd20 3f3 00 00 00 00 
3bd24 3f4 00          | 	byte	$00[21]
3bd25 3f4 0C 06 3C 36 
3bd29 3f5 1C 00 00 00 
3bd2d 3f6 00 00 00 00 
3bd31 3f7 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bd35 3f8 00 00 00 63 
3bd39 3f9 3E 00 00 00 
3bd3d 3fa 00 00 00 00 
3bd41 3fb 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bd45 3fc 00 00 00 00 
3bd49 3fd 3E 63 06 1C 
3bd4d 3fe 36 63 63 36 
3bd51 3ff 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
3bd55 400 00 00 00 00 
3bd59 401 00 00 00 00 | 	byte	$00[8]
3bd5d 402 18 00 7E 00 
3bd61 403 18 00 00 00 
3bd65 404 00 00 00 00 
3bd69 405 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bd6d 406 00 00 00 00 
3bd71 407 00 00 00 00 | 	byte	$00[8]
3bd75 408 18 30 1E 00 
3bd79 409 00 00 1C 36 
3bd7d 40a 36 1C 00 00 
3bd81 40b 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
3bd85 40c 00 00 00 00 
3bd89 40d 63 00 00 00 
3bd8d 40e 00 00 00 00 
3bd91 40f 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bd95 410 00 00 00 18 
3bd99 411 18 00 00 00 
3bd9d 412 00 00 00 00 
3bda1 413 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bda5 414 00 00 00 00 
3bda9 415 00          | 	byte	$00[5]
3bdaa 415 CC 66 33 00 
3bdae 416 33 33 33 33 
3bdb2 417 33 33 6E 00 
3bdb6 418 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3bdba 419 00 3F 66 66 
3bdbe 41a 66 3E 36 66 
3bdc2 41b 66 66 6F 00 
3bdc6 41c 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
3bdca 41d 36 1C 08 00 
3bdce 41e 3B 6E 66 06 
3bdd2 41f 06 06 0F 00 
3bdd6 420 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
3bdda 421 00 00 00 7E 
3bdde 422 7E 7E 7E 7E 
3bde2 423 7E 7E 00 00 
3bde6 424 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
3bdea 425 00 00 00 00 
3bdee 426 00 00 00 00 
3bdf2 427 00 00 00 00 
3bdf6 428 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bdf8 429 00 00 00 00 
      ...             
3be28 435 00 00 00 00 
3be2c 436 00 00 00    | st_font        file "st4font.def"
3be2f 436 FF FF 00 00 
3be33 437 00 00 00 00 
3be37 438 00 18 18 18 
3be3b 439 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3be3f 43a 18 18 18 18 
3be43 43b 18 18 18 18 
3be47 43c 18          | 	byte	$18[9]
3be48 43d 00 00 00 00 
3be4c 43e 00 00 00    | 	byte	$00[7]
3be4f 43e FF FF 18 18 
3be53 43f 18 18 18 18 
3be57 440 18 18 18 18 
3be5b 441 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3be5f 442 FF FF 00 00 
3be63 443 00 00 00 00 
3be67 444 00 18 18 18 
3be6b 445 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3be6f 446 1F 1F 18 18 
3be73 447 18 18 18 18 
3be77 448 18 18 18 18 
3be7b 449 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3be7f 44a F8 F8 18 18 
3be83 44b 18 18 18 18 
3be87 44c 18 00 00 00 
3be8b 44d 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3be8f 44e 1F 1F 18 18 
3be93 44f 18 18 18 18 
3be97 450 18 00 00 00 
3be9b 451 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3be9f 452 F8 F8 18 18 
3bea3 453 18 18 18 18 
3bea7 454 18 18 18 18 
3beab 455 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3beaf 456 1F 1F 00 00 
3beb3 457 00 00 00 00 
3beb7 458 00 18 18 18 
3bebb 459 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3bebf 45a F8 F8 00 00 
3bec3 45b 00 00 00 00 
3bec7 45c 00 18 18 18 
3becb 45d 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3becf 45e FF FF 18 18 
3bed3 45f 18 18 18 18 
3bed7 460 18 00 00 18 
3bedb 461 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
3bedf 462 66 7E 7E 66 
3bee3 463 66 66 66 30 
3bee7 464 18 00 00 7E 
3beeb 465 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3beef 466 3E 06 06 06 
3bef3 467 06 7E 7E 18 
3bef7 468 0C 30 18 3C 
3befb 469 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3beff 46a 06 06 06 66 
3bf03 46b 66 7E 3C 00 
3bf07 46c 00 30 18 66 
3bf0b 46d 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3bf0f 46e 7E 7E 76 76 
3bf13 46f 66 66 66 00 
3bf17 470 00 30 18 7C 
3bf1b 471 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3bf1f 472 1C 38 70 60 
3bf23 473 60 7E 3E 00 
3bf27 474 00 30 18 7E 
3bf2b 475 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3bf2f 476 18 0C 0C 06 
3bf33 477 06 7E 7E 00 
3bf37 478 00 18 18 00 
3bf3b 479 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3bf3f 47a 18 18 0C 0C 
3bf43 47b 06 7E 7E 00 
3bf47 47c 00 30 18 3C 
3bf4b 47d 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3bf4f 47e 66 66 66 66 
3bf53 47f 66          | 	byte	$66[5]
3bf54 480 7E 3C 00 00 
3bf58 481 00 00 06 06 
3bf5c 482 06 06 16 1E 
3bf60 483 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
3bf64 484 7E 7E 00 00 
3bf68 485 00 00 00 00 
3bf6c 486 00 3C 7C 60 
3bf70 487 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
3bf74 488 7E 7C 30 18 
3bf78 489 00 00 00 00 
3bf7c 48a 00 3C 7E 66 
3bf80 48b 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
3bf84 48c 7E 7C 18 0C 
3bf88 48d 00 00 30 18 
3bf8c 48e 00 3C 3E 06 
3bf90 48f 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
3bf94 490 7E 7C 00 00 
3bf98 491 00 00 30 18 
3bf9c 492 00 3E 7E 66 
3bfa0 493 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
3bfa4 494 66 66 00 00 
3bfa8 495 00 00 30 18 
3bfac 496 00 7C 7E 06 
3bfb0 497 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
3bfb4 498 7E 3E 00 00 
3bfb8 499 00 00 30 18 
3bfbc 49a 00 7E 7E 30 
3bfc0 49b 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3bfc4 49c 7E 7E 00 00 
3bfc8 49d 00 00 18 18 
3bfcc 49e 00 7E 7E 30 
3bfd0 49f 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3bfd4 4a0 7E 7E 00 00 
3bfd8 4a1 00 00 30 18 
3bfdc 4a2 00 3C 7E 66 
3bfe0 4a3 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
3bfe4 4a4 7E 3C 00 00 
3bfe8 4a5 00 00 1C 1C 
3bfec 4a6 18 18 38 3C 
3bff0 4a7 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
3bff4 4a8 3C 3C 00 00 
3bff8 4a9 00 00 00 00 
3bffc 4aa 00 00 00 00 
3c000 4ab 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c004 4ac 00 00 00 00 
3c008 4ad 00 00       | 	byte	$00[6]
3c00a 4ad 18 18 18 18 
3c00e 4ae 18 18 18 18 | 	byte	$18[8]
3c012 4af 00 00 18 18 
3c016 4b0 00 00 00 00 
3c01a 4b1 66 66 66 66 
3c01e 4b2 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3c022 4b3 00 00 00 00 
3c026 4b4 00 00 00 00 
3c02a 4b5 00          | 	byte	$00[9]
3c02b 4b5 66 66 FF FF 
3c02f 4b6 66 66 FF FF 
3c033 4b7 66 66 00 00 
3c037 4b8 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
3c03b 4b9 7C 7E 06 06 
3c03f 4ba 3E 7C 60 60 
3c043 4bb 7E 3E 18 18 
3c047 4bc 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
3c04b 4bd 66 30 30 18 
3c04f 4be 18 0C 0C 66 
3c053 4bf 66 00 00 00 
3c057 4c0 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
3c05b 4c1 66 66 3C 1C 
3c05f 4c2 1C FC FE 66 
3c063 4c3 66 FE FC 00 
3c067 4c4 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
3c06b 4c5 18 18 18 18 
3c06f 4c6 00 00 00 00 
3c073 4c7 00 00 00 00 
3c077 4c8 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
3c07b 4c9 18 1C 0C 0C 
3c07f 4ca 0C 0C 0C 0C 
3c083 4cb 1C 18 30 00 
3c087 4cc 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
3c08b 4cd 18 38 30 30 
3c08f 4ce 30 30 30 30 
3c093 4cf 38 18 0C 00 
3c097 4d0 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
3c09b 4d1 66 66 3C 3C 
3c09f 4d2 FF FF 3C 3C 
3c0a3 4d3 66 66 00 00 
3c0a7 4d4 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
3c0ab 4d5 00 18 18 18 
3c0af 4d6 7E 7E 18 18 
3c0b3 4d7 18 00 00 00 
3c0b7 4d8 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3c0bb 4d9 00 00 00 00 
3c0bf 4da 00 00       | 	byte	$00[6]
3c0c1 4db 18 18 18 18 
3c0c5 4dc 18          | 	byte	$18[5]
3c0c6 4dc 0C 04 00 00 
3c0ca 4dd 00 00 00 00 
3c0ce 4de 7E 7E 00 00 
3c0d2 4df 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3c0d6 4e0 00 00 00 00 
3c0da 4e1 00 00 00 00 
3c0de 4e2 00 00 00 00 
3c0e2 4e3 00          | 	byte	$00[13]
3c0e3 4e3 18 18 18 00 
3c0e7 4e4 00 00 00 60 
3c0eb 4e5 60 60 30 30 
3c0ef 4e6 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3c0f3 4e7 06 06 06 00 
3c0f7 4e8 00 00 00 3C 
3c0fb 4e9 7E 66 66 66 
3c0ff 4ea 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3c103 4eb 66 7E 3C 00 
3c107 4ec 00 00 00 18 
3c10b 4ed 18 1C 1C 18 
3c10f 4ee 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3c113 4ef 18 7E 7E 00 
3c117 4f0 00 00 00 3C 
3c11b 4f1 7E 66 66 30 
3c11f 4f2 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3c123 4f3 0C 7E 7E 00 
3c127 4f4 00 00 00 7E 
3c12b 4f5 7E 30 30 18 
3c12f 4f6 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3c133 4f7 66 7E 3C 00 
3c137 4f8 00 00 00 30 
3c13b 4f9 30 38 38 3C 
3c13f 4fa 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
3c143 4fb 7E 30 30 00 
3c147 4fc 00 00 00 7E 
3c14b 4fd 7E 06 06 3E 
3c14f 4fe 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
3c153 4ff 66 7E 3C 00 
3c157 500 00 00 00 38 
3c15b 501 3C 0E 06 06 
3c15f 502 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
3c163 503 66 7E 3C 00 
3c167 504 00 00 00 7E 
3c16b 505 7E 60 60 30 
3c16f 506 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3c173 507 0C 0C 0C 00 
3c177 508 00 00 00 3C 
3c17b 509 7E 66 66 3C 
3c17f 50a 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
3c183 50b 66 7E 3C 00 
3c187 50c 00 00 00 3C 
3c18b 50d 7E 66 66 7E 
3c18f 50e 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
3c193 50f 70 3C 1C 00 
3c197 510 00 00 00 00 
3c19b 511 00 00 18 18 
3c19f 512 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
3c1a3 513 18 18 18 00 
3c1a7 514 00 00 00 00 
3c1ab 515 00 00 18 18 
3c1af 516 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
3c1b3 517 18 18 18 0C 
3c1b7 518 04 00 00 00 
3c1bb 519 70 38 1C 0E 
3c1bf 51a 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3c1c3 51b 70 00 00 00 
3c1c7 51c 00 00 00 00 
3c1cb 51d 00 00 7E 7E 
3c1cf 51e 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3c1d3 51f 00 00 00 00 
3c1d7 520 00 00 00 00 | 	byte	$00[8]
3c1db 521 0E 1C 38 70 
3c1df 522 E0 70 38 1C 
3c1e3 523 0E 00 00 00 
3c1e7 524 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
3c1eb 525 7E 66 66 30 
3c1ef 526 30 18 18 18 
3c1f3 527 00 18 18 00 
3c1f7 528 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3c1fb 529 7E 66 66 66 
3c1ff 52a 66 36 06 66 
3c203 52b 66 7E 3C 00 
3c207 52c 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3c20b 52d 3C 7E 66 66 
3c20f 52e 66 7E 7E 66 
3c213 52f 66 66 66 00 
3c217 530 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3c21b 531 7E 66 66 7E 
3c21f 532 3E 66 66 66 
3c223 533 66 7E 3E 00 
3c227 534 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3c22b 535 7E 66 66 06 
3c22f 536 06 06 06 66 
3c233 537 66 7E 3C 00 
3c237 538 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3c23b 539 7E 66 66 66 
3c23f 53a 66 66 66 66 
3c243 53b 66 7E 3E 00 
3c247 53c 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3c24b 53d 7E 06 06 3E 
3c24f 53e 3E 06 06 06 
3c253 53f 06 7E 7E 00 
3c257 540 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3c25b 541 7E 06 06 3E 
3c25f 542 3E 06 06 06 
3c263 543 06 06 06 00 
3c267 544 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3c26b 545 7E 06 06 76 
3c26f 546 76 66 66 66 
3c273 547 66 7E 3C 00 
3c277 548 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3c27b 549 66 66 66 7E 
3c27f 54a 7E 66 66 66 
3c283 54b 66 66 66 00 
3c287 54c 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3c28b 54d 7E 18 18 18 
3c28f 54e 18 18 18 18 
3c293 54f 18 7E 7E 00 
3c297 550 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
3c29b 551 60 60 60 60 
3c29f 552 60 60 60    | 	byte	$60[7]
3c2a2 553 66 66 7E 3C 
3c2a6 554 00 00 00 00 
3c2aa 555 66 66 36 36 
3c2ae 556 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3c2b2 557 66 66 C6 C6 
3c2b6 558 00 00 00 00 
3c2ba 559 06 06 06 06 
3c2be 55a 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3c2c2 55b 06 06 7E 7E 
3c2c6 55c 00 00 00 00 
3c2ca 55d C6 C6 EE EE 
3c2ce 55e FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3c2d2 55f C6 C6 C6 C6 
3c2d6 560 00 00 00 00 
3c2da 561 66 66 66 6E 
3c2de 562 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3c2e2 563 76 66 66 66 
3c2e6 564 00 00 00 00 
3c2ea 565 3C 7E 66 66 
3c2ee 566 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3c2f2 567 66 66 7E 3C 
3c2f6 568 00 00 00 00 
3c2fa 569 3E 7E 66 66 
3c2fe 56a 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3c302 56b 06 06 06 06 
3c306 56c 00 00 00 00 
3c30a 56d 3C 7E 66 66 
3c30e 56e 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3c312 56f 66 56 3E 6C 
3c316 570 00 00 00 00 
3c31a 571 3E 7E 66 66 
3c31e 572 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3c322 573 66 66 C6 C6 
3c326 574 00 00 00 00 
3c32a 575 7C 7E 06 06 
3c32e 576 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3c332 577 60 60 7E 3E 
3c336 578 00 00 00 00 
3c33a 579 7E 7E 18 18 
3c33e 57a 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3c342 57b 18 18 18 18 
3c346 57c 00 00 00 00 
3c34a 57d 66 66 66 66 
3c34e 57e 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3c352 57f 66 66 7E 3C 
3c356 580 00 00 00 00 
3c35a 581 66 66 66 66 
3c35e 582 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3c362 583 3C 3C 18 18 
3c366 584 00 00 00 00 
3c36a 585 C6 C6 C6 C6 
3c36e 586 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3c372 587 FE EE C6 82 
3c376 588 00 00 00 00 
3c37a 589 66 66 66 3C 
3c37e 58a 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3c382 58b 3C 66 66 66 
3c386 58c 00 00 00 00 
3c38a 58d 66 66 66 66 
3c38e 58e 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3c392 58f 18 18 18 18 
3c396 590 00 00 00 00 
3c39a 591 7E 7E 30 30 
3c39e 592 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3c3a2 593 06 06 7E 7E 
3c3a6 594 00 00 00 00 
3c3aa 595 3C 3C 0C 0C 
3c3ae 596 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3c3b2 597 0C 0C 3C 3C 
3c3b6 598 00 00 00 00 
3c3ba 599 06 06 0C 0C 
3c3be 59a 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3c3c2 59b 60 60 C0 C0 
3c3c6 59c 00 00 00 00 
3c3ca 59d 3C 3C 30 30 
3c3ce 59e 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3c3d2 59f 30 30 3C 3C 
3c3d6 5a0 00 00 00 00 
3c3da 5a1 18 18 3C 3C 
3c3de 5a2 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3c3e2 5a3 00 00 00 00 
3c3e6 5a4 00 00 00 00 
3c3ea 5a5 00 00 00 00 
3c3ee 5a6 00 00 00 00 
3c3f2 5a7 00 00       | 	byte	$00[18]
3c3f4 5a8 FE FE 00 00 
3c3f8 5a9 00 00 0C 0C 
3c3fc 5aa 18 18 00 00 
3c400 5ab 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3c404 5ac 00 00 00 00 
3c408 5ad 00 00 00 00 
3c40c 5ae 00          | 	byte	$00[9]
3c40d 5ae 3C 7C 60 7C 
3c411 5af 7E 66 66 7E 
3c415 5b0 7C 00 00 00 
3c419 5b1 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3c41d 5b2 3E 7E 66 66 
3c421 5b3 66 66 66 7E 
3c425 5b4 3E 00 00 00 
3c429 5b5 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3c42d 5b6 3C 3E 06 06 
3c431 5b7 06 06 06 7E 
3c435 5b8 7C 00 00 00 
3c439 5b9 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3c43d 5ba 7C 7E 66 66 
3c441 5bb 66 66 66 7E 
3c445 5bc 7C 00 00 00 
3c449 5bd 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3c44d 5be 3C 7E 66 66 
3c451 5bf 7E 06 06 7E 
3c455 5c0 7C 00 00 00 
3c459 5c1 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3c45d 5c2 18 7E 7E 18 
3c461 5c3 18 18 18 18 
3c465 5c4 18 00 00 00 
3c469 5c5 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3c46d 5c6 7C 7E 66 66 
3c471 5c7 66 66 7E 7C 
3c475 5c8 60 7E 3E 00 
3c479 5c9 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
3c47d 5ca 3E 7E 66 66 
3c481 5cb 66 66 66 66 
3c485 5cc 66 00 00 00 
3c489 5cd 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
3c48d 5ce 1C 1C 18 18 
3c491 5cf 18 18 18 3C 
3c495 5d0 3C 00 00 00 
3c499 5d1 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
3c49d 5d2 30 30 30 30 
3c4a1 5d3 30 30 30 30 
3c4a5 5d4 30          | 	byte	$30[9]
3c4a6 5d4 3E 1E 00 00 
3c4aa 5d5 06 06 06 36 
3c4ae 5d6 36 1E 1E 1E 
3c4b2 5d7 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3c4b6 5d8 00 00 00 00 
3c4ba 5d9 1C 1C 18 18 
3c4be 5da 18 18 18 18 
3c4c2 5db 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3c4c6 5dc 00 00 00 00 
3c4ca 5dd 00 00 00    | 	byte	$00[7]
3c4cd 5de 6C FE FE D6 
3c4d1 5df D6 C6 C6 C6 
3c4d5 5e0 C6 00 00 00 
3c4d9 5e1 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
3c4dd 5e2 3E 7E 66 66 
3c4e1 5e3 66 66 66 66 
3c4e5 5e4 66 00 00 00 
3c4e9 5e5 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3c4ed 5e6 3C 7E 66 66 
3c4f1 5e7 66 66 66 7E 
3c4f5 5e8 3C 00 00 00 
3c4f9 5e9 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
3c4fd 5ea 3E 7E 66 66 
3c501 5eb 66 66 66 7E 
3c505 5ec 3E 06 06 00 
3c509 5ed 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
3c50d 5ee 7C 7E 66 66 
3c511 5ef 66 66 66 7E 
3c515 5f0 7C 60 60 00 
3c519 5f1 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3c51d 5f2 3E 7E 66 06 
3c521 5f3 06 06 06 06 
3c525 5f4 06 00 00 00 
3c529 5f5 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3c52d 5f6 7C 7E 06 0E 
3c531 5f7 3C 70 60 7E 
3c535 5f8 3E 00 00 00 
3c539 5f9 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3c53d 5fa 7E 7E 18 18 
3c541 5fb 18 18 18 78 
3c545 5fc 70 00 00 00 
3c549 5fd 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3c54d 5fe 66 66 66 66 
3c551 5ff 66 66 66    | 	byte	$66[7]
3c554 600 7E 7C 00 00 
3c558 601 00 00 00 00 
3c55c 602 00 66 66 66 
3c560 603 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
3c564 604 18 18 00 00 
3c568 605 00 00 00 00 
3c56c 606 00 C6 C6 D6 
3c570 607 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
3c574 608 C6 82 00 00 
3c578 609 00 00 00 00 
3c57c 60a 00 66 66 3C 
3c580 60b 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
3c584 60c 66 66 00 00 
3c588 60d 00 00 00 00 
3c58c 60e 00 66 66 66 
3c590 60f 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
3c594 610 7C 60 7E 3E 
3c598 611 00 00 00 00 
3c59c 612 00 7E 7E 30 
3c5a0 613 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3c5a4 614 7E 7E 00 00 
3c5a8 615 00 00 30 18 
3c5ac 616 18 18 18 0C 
3c5b0 617 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
3c5b4 618 18 30 00 00 
3c5b8 619 00 00 18 18 
3c5bc 61a 18 18 18 18 
3c5c0 61b 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3c5c4 61c 18 18 00 00 
3c5c8 61d 00 00 0C 18 
3c5cc 61e 18 18 18 30 
3c5d0 61f 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
3c5d4 620 18 0C 00 00 
3c5d8 621 00 00 6C 7E 
3c5dc 622 36 00 00 00 
3c5e0 623 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
3c5e4 624 00 00 00 00 
3c5e8 625 00 00 00 00 
3c5ec 626 00          | 	byte	$00[9]
3c5ed 626 18 18 18 18 
3c5f1 627 18 18 00 00 
3c5f5 628 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3c5f8 629 00 6C FE FE 
3c5fc 62a 7C 38 10 00 
3c600 62b 18 18 18 F8 
3c604 62c F8 18 18 18 | a8_font        file "atari8.fnt"
3c608 62d C0 C0 C0 C0 
3c60c 62e C0 C0 C0 C0 | 	byte	$c0[8]
3c610 62f 18 18 18 1F 
3c614 630 1F 00 00 00 
3c618 631 18 18 18 1F 
3c61c 632 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3c620 633 00 00 00 1F 
3c624 634 1F 18 18 18 
3c628 635 C0 E0 70 38 
3c62c 636 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3c630 637 03 07 0E 1C 
3c634 638 38 70 E0 C0 
3c638 639 80 C0 E0 F0 
3c63c 63a F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3c640 63b 00 00 00 00 
3c644 63c F0 F0 F0 F0 
3c648 63d 01 03 07 0F 
3c64c 63e 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3c650 63f F0 F0 F0 F0 
3c654 640 00 00 00 00 
3c658 641 0F 0F 0F 0F 
3c65c 642 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3c660 643 FF FF 00 00 
3c664 644 00 00 00 00 
3c668 645 00 00 00 00 
3c66c 646 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3c670 647 00 00 00 00 
3c674 648 0F 0F 0F 0F 
3c678 649 00 38 38 EE 
3c67c 64a EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3c680 64b 00 00 00 F8 
3c684 64c F8 18 18 18 
3c688 64d 00 00 00 FF 
3c68c 64e FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3c690 64f 18 18 18 FF 
3c694 650 FF 18 18 18 
3c698 651 00 00 3C 7E 
3c69c 652 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3c6a0 653 00 00 00 00 
3c6a4 654 FF FF FF FF 
3c6a8 655 03 03 03 03 
3c6ac 656 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3c6b0 657 00 00 00 FF 
3c6b4 658 FF 18 18 18 
3c6b8 659 18 18 18 FF 
3c6bc 65a FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3c6c0 65b 0F 0F 0F 0F 
3c6c4 65c 0F 0F 0F 0F | 	byte	$0f[8]
3c6c8 65d 18 18 18 F8 
3c6cc 65e F8 00 00 00 
3c6d0 65f 1E 06 1E 06 
3c6d4 660 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3c6d8 661 00 18 3C 7E 
3c6dc 662 18 18 18 00 
3c6e0 663 00 18 18 18 
3c6e4 664 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3c6e8 665 00 18 0C 7E 
3c6ec 666 0C 18 00 00 
3c6f0 667 00 18 30 7E 
3c6f4 668 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3c6f8 669 00 00 00 00 
3c6fc 66a 00 00 00 00 
3c700 66b 00          | 	byte	$00[9]
3c701 66b 18 18 18 18 
3c705 66c 00 18 00 00 
3c709 66d 66 66 66 00 
3c70d 66e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3c711 66f 66 FF 66 66 
3c715 670 FF 66 00 18 
3c719 671 7C 06 3C 60 
3c71d 672 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3c721 673 66 36 18 0C 
3c725 674 66 62 00 38 
3c729 675 6C 38 1C F6 
3c72d 676 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3c731 677 18 18 18 00 
3c735 678 00 00 00 00 
3c739 679 70 38 18 18 
3c73d 67a 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3c741 67b 0E 1C 18 18 
3c745 67c 1C 0E 00 00 
3c749 67d 66 3C FF 3C 
3c74d 67e 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3c751 67f 18 18 7E 18 
3c755 680 18 00 00 00 
3c759 681 00 00 00 00 
3c75d 682 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3c761 683 00 00 7E 00 
3c765 684 00 00 00 00 
3c769 685 00 00 00 00 
3c76d 686 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3c771 687 60 30 18 0C 
3c775 688 06 02 00 00 
3c779 689 3C 66 76 6E 
3c77d 68a 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3c781 68b 18 1C 18 18 
3c785 68c 18 7E 00 00 
3c789 68d 3C 66 30 18 
3c78d 68e 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3c791 68f 7E 30 18 30 
3c795 690 66 3C 00 00 
3c799 691 30 38 3C 36 
3c79d 692 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3c7a1 693 7E 06 3E 60 
3c7a5 694 66 3C 00 00 
3c7a9 695 3C 06 3E 66 
3c7ad 696 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3c7b1 697 7E 60 30 18 
3c7b5 698 0C 0C 00 00 
3c7b9 699 3C 66 3C 66 
3c7bd 69a 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3c7c1 69b 3C 66 7C 60 
3c7c5 69c 30 1C 00 00 
3c7c9 69d 00 18 18 00 
3c7cd 69e 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3c7d1 69f 00 18 18 00 
3c7d5 6a0 18 18 0C 60 
3c7d9 6a1 30 18 0C 18 
3c7dd 6a2 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3c7e1 6a3 00 7E 00 00 
3c7e5 6a4 7E 00 00 06 
3c7e9 6a5 0C 18 30 18 
3c7ed 6a6 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3c7f1 6a7 3C 66 30 18 
3c7f5 6a8 00 18 00 00 
3c7f9 6a9 3C 66 76 76 
3c7fd 6aa 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3c801 6ab 18 3C 66 66 
3c805 6ac 7E 66 00 00 
3c809 6ad 3E 66 3E 66 
3c80d 6ae 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3c811 6af 3C 66 06 06 
3c815 6b0 66 3C 00 00 
3c819 6b1 1E 36 66 66 
3c81d 6b2 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3c821 6b3 7E 06 3E 06 
3c825 6b4 06 7E 00 00 
3c829 6b5 7E 06 3E 06 
3c82d 6b6 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3c831 6b7 7C 06 06 76 
3c835 6b8 66 7C 00 00 
3c839 6b9 66 66 7E 66 
3c83d 6ba 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3c841 6bb 7E 18 18 18 
3c845 6bc 18 7E 00 00 
3c849 6bd 60 60 60 60 
3c84d 6be 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3c851 6bf 66 36 1E 1E 
3c855 6c0 36 66 00 00 
3c859 6c1 06 06 06 06 
3c85d 6c2 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3c861 6c3 C6 EE FE D6 
3c865 6c4 C6 C6 00 00 
3c869 6c5 66 6E 7E 7E 
3c86d 6c6 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3c871 6c7 3C 66 66 66 
3c875 6c8 66 3C 00 00 
3c879 6c9 3E 66 66 3E 
3c87d 6ca 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3c881 6cb 3C 66 66 66 
3c885 6cc 36 6C 00 00 
3c889 6cd 3E 66 66 3E 
3c88d 6ce 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3c891 6cf 3C 06 3C 60 
3c895 6d0 60 3C 00 00 
3c899 6d1 7E 18 18 18 
3c89d 6d2 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3c8a1 6d3 66 66 66 66 
3c8a5 6d4 66          | 	byte	$66[5]
3c8a6 6d4 7E 00 00 66 
3c8aa 6d5 66 66 66 3C 
3c8ae 6d6 18 00 00 C6 
3c8b2 6d7 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3c8b6 6d8 C6 00 00 66 
3c8ba 6d9 66 3C 3C 66 
3c8be 6da 66 00 00 66 
3c8c2 6db 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3c8c6 6dc 18 00 00 7E 
3c8ca 6dd 30 18 0C 06 
3c8ce 6de 7E 00 00 78 
3c8d2 6df 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3c8d6 6e0 78 00 00 02 
3c8da 6e1 06 0C 18 30 
3c8de 6e2 60 00 00 1E 
3c8e2 6e3 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3c8e6 6e4 1E 00 00 10 
3c8ea 6e5 38 6C C6 00 
3c8ee 6e6 00 00 00 00 
3c8f2 6e7 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c8f6 6e8 FF 00 00 18 
3c8fa 6e9 3C 7E 7E 3C 
3c8fe 6ea 18 00 00 00 
3c902 6eb 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3c906 6ec 7C 00 00 06 
3c90a 6ed 06 3E 66 66 
3c90e 6ee 3E 00 00 00 
3c912 6ef 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3c916 6f0 3C 00 00 60 
3c91a 6f1 60 7C 66 66 
3c91e 6f2 7C 00 00 00 
3c922 6f3 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3c926 6f4 3C 00 00 70 
3c92a 6f5 18 7C 18 18 
3c92e 6f6 18 00 00 00 
3c932 6f7 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3c936 6f8 60 3E 00 06 
3c93a 6f9 06 3E 66 66 
3c93e 6fa 66 00 00 18 
3c942 6fb 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3c946 6fc 3C 00 00 60 
3c94a 6fd 00 60 60 60 
3c94e 6fe 60 3C 00 06 
3c952 6ff 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3c956 700 66 00 00 1C 
3c95a 701 18 18 18 18 
3c95e 702 3C 00 00 00 
3c962 703 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3c966 704 C6 00 00 00 
3c96a 705 3E 66 66 66 
3c96e 706 66 00 00 00 
3c972 707 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3c976 708 3C 00 00 00 
3c97a 709 3E 66 66 3E 
3c97e 70a 06 06 00 00 
3c982 70b 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3c986 70c 60 60 00 00 
3c98a 70d 3E 66 06 06 
3c98e 70e 06 00 00 00 
3c992 70f 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3c996 710 3E 00 00 18 
3c99a 711 7E 18 18 18 
3c99e 712 70 00 00 00 
3c9a2 713 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3c9a6 714 7C 00 00 00 
3c9aa 715 66 66 66 3C 
3c9ae 716 18 00 00 00 
3c9b2 717 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3c9b6 718 6C 00 00 00 
3c9ba 719 66 3C 18 3C 
3c9be 71a 66 00 00 00 
3c9c2 71b 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3c9c6 71c 30 1E 00 00 
3c9ca 71d 7E 30 18 0C 
3c9ce 71e 7E 00 00 18 
3c9d2 71f 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3c9d6 720 3C 00 18 18 
3c9da 721 18 18 18 18 
3c9de 722 18 18 00 7E 
3c9e2 723 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3c9e6 724 60 00 10 18 
3c9ea 725 1C 1E 1C 18 
3c9ee 726 10 00 08 18 
3c9f2 727 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3c9f6 728 08 00       | 	byte	$08, $00
3c9f8 729 00 6C FE FE 
3c9fc 72a 7C 38 10 00 
3ca00 72b 18 18 18 F8 
3ca04 72c F8 18 18 18 | a8_font2        file "atari8.fnt"
3ca08 72d C0 C0 C0 C0 
3ca0c 72e C0 C0 C0 C0 | 	byte	$c0[8]
3ca10 72f 18 18 18 1F 
3ca14 730 1F 00 00 00 
3ca18 731 18 18 18 1F 
3ca1c 732 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3ca20 733 00 00 00 1F 
3ca24 734 1F 18 18 18 
3ca28 735 C0 E0 70 38 
3ca2c 736 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3ca30 737 03 07 0E 1C 
3ca34 738 38 70 E0 C0 
3ca38 739 80 C0 E0 F0 
3ca3c 73a F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3ca40 73b 00 00 00 00 
3ca44 73c F0 F0 F0 F0 
3ca48 73d 01 03 07 0F 
3ca4c 73e 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3ca50 73f F0 F0 F0 F0 
3ca54 740 00 00 00 00 
3ca58 741 0F 0F 0F 0F 
3ca5c 742 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3ca60 743 FF FF 00 00 
3ca64 744 00 00 00 00 
3ca68 745 00 00 00 00 
3ca6c 746 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3ca70 747 00 00 00 00 
3ca74 748 0F 0F 0F 0F 
3ca78 749 00 38 38 EE 
3ca7c 74a EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3ca80 74b 00 00 00 F8 
3ca84 74c F8 18 18 18 
3ca88 74d 00 00 00 FF 
3ca8c 74e FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3ca90 74f 18 18 18 FF 
3ca94 750 FF 18 18 18 
3ca98 751 00 00 3C 7E 
3ca9c 752 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3caa0 753 00 00 00 00 
3caa4 754 FF FF FF FF 
3caa8 755 03 03 03 03 
3caac 756 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3cab0 757 00 00 00 FF 
3cab4 758 FF 18 18 18 
3cab8 759 18 18 18 FF 
3cabc 75a FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3cac0 75b 0F 0F 0F 0F 
3cac4 75c 0F 0F 0F 0F | 	byte	$0f[8]
3cac8 75d 18 18 18 F8 
3cacc 75e F8 00 00 00 
3cad0 75f 1E 06 1E 06 
3cad4 760 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3cad8 761 00 18 3C 7E 
3cadc 762 18 18 18 00 
3cae0 763 00 18 18 18 
3cae4 764 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3cae8 765 00 18 0C 7E 
3caec 766 0C 18 00 00 
3caf0 767 00 18 30 7E 
3caf4 768 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3caf8 769 00 00 00 00 
3cafc 76a 00 00 00 00 
3cb00 76b 00          | 	byte	$00[9]
3cb01 76b 18 18 18 18 
3cb05 76c 00 18 00 00 
3cb09 76d 66 66 66 00 
3cb0d 76e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3cb11 76f 66 FF 66 66 
3cb15 770 FF 66 00 18 
3cb19 771 7C 06 3C 60 
3cb1d 772 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3cb21 773 66 36 18 0C 
3cb25 774 66 62 00 38 
3cb29 775 6C 38 1C F6 
3cb2d 776 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3cb31 777 18 18 18 00 
3cb35 778 00 00 00 00 
3cb39 779 70 38 18 18 
3cb3d 77a 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3cb41 77b 0E 1C 18 18 
3cb45 77c 1C 0E 00 00 
3cb49 77d 66 3C FF 3C 
3cb4d 77e 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3cb51 77f 18 18 7E 18 
3cb55 780 18 00 00 00 
3cb59 781 00 00 00 00 
3cb5d 782 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3cb61 783 00 00 7E 00 
3cb65 784 00 00 00 00 
3cb69 785 00 00 00 00 
3cb6d 786 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3cb71 787 60 30 18 0C 
3cb75 788 06 02 00 00 
3cb79 789 3C 66 76 6E 
3cb7d 78a 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3cb81 78b 18 1C 18 18 
3cb85 78c 18 7E 00 00 
3cb89 78d 3C 66 30 18 
3cb8d 78e 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3cb91 78f 7E 30 18 30 
3cb95 790 66 3C 00 00 
3cb99 791 30 38 3C 36 
3cb9d 792 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3cba1 793 7E 06 3E 60 
3cba5 794 66 3C 00 00 
3cba9 795 3C 06 3E 66 
3cbad 796 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3cbb1 797 7E 60 30 18 
3cbb5 798 0C 0C 00 00 
3cbb9 799 3C 66 3C 66 
3cbbd 79a 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3cbc1 79b 3C 66 7C 60 
3cbc5 79c 30 1C 00 00 
3cbc9 79d 00 18 18 00 
3cbcd 79e 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3cbd1 79f 00 18 18 00 
3cbd5 7a0 18 18 0C 60 
3cbd9 7a1 30 18 0C 18 
3cbdd 7a2 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3cbe1 7a3 00 7E 00 00 
3cbe5 7a4 7E 00 00 06 
3cbe9 7a5 0C 18 30 18 
3cbed 7a6 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3cbf1 7a7 3C 66 30 18 
3cbf5 7a8 00 18 00 00 
3cbf9 7a9 3C 66 76 76 
3cbfd 7aa 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3cc01 7ab 18 3C 66 66 
3cc05 7ac 7E 66 00 00 
3cc09 7ad 3E 66 3E 66 
3cc0d 7ae 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3cc11 7af 3C 66 06 06 
3cc15 7b0 66 3C 00 00 
3cc19 7b1 1E 36 66 66 
3cc1d 7b2 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3cc21 7b3 7E 06 3E 06 
3cc25 7b4 06 7E 00 00 
3cc29 7b5 7E 06 3E 06 
3cc2d 7b6 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3cc31 7b7 7C 06 06 76 
3cc35 7b8 66 7C 00 00 
3cc39 7b9 66 66 7E 66 
3cc3d 7ba 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3cc41 7bb 7E 18 18 18 
3cc45 7bc 18 7E 00 00 
3cc49 7bd 60 60 60 60 
3cc4d 7be 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3cc51 7bf 66 36 1E 1E 
3cc55 7c0 36 66 00 00 
3cc59 7c1 06 06 06 06 
3cc5d 7c2 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3cc61 7c3 C6 EE FE D6 
3cc65 7c4 C6 C6 00 00 
3cc69 7c5 66 6E 7E 7E 
3cc6d 7c6 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3cc71 7c7 3C 66 66 66 
3cc75 7c8 66 3C 00 00 
3cc79 7c9 3E 66 66 3E 
3cc7d 7ca 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3cc81 7cb 3C 66 66 66 
3cc85 7cc 36 6C 00 00 
3cc89 7cd 3E 66 66 3E 
3cc8d 7ce 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3cc91 7cf 3C 06 3C 60 
3cc95 7d0 60 3C 00 00 
3cc99 7d1 7E 18 18 18 
3cc9d 7d2 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3cca1 7d3 66 66 66 66 
3cca5 7d4 66          | 	byte	$66[5]
3cca6 7d4 7E 00 00 66 
3ccaa 7d5 66 66 66 3C 
3ccae 7d6 18 00 00 C6 
3ccb2 7d7 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3ccb6 7d8 C6 00 00 66 
3ccba 7d9 66 3C 3C 66 
3ccbe 7da 66 00 00 66 
3ccc2 7db 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3ccc6 7dc 18 00 00 7E 
3ccca 7dd 30 18 0C 06 
3ccce 7de 7E 00 00 78 
3ccd2 7df 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3ccd6 7e0 78 00 00 02 
3ccda 7e1 06 0C 18 30 
3ccde 7e2 60 00 00 1E 
3cce2 7e3 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3cce6 7e4 1E 00 00 10 
3ccea 7e5 38 6C C6 00 
3ccee 7e6 00 00 00 00 
3ccf2 7e7 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ccf6 7e8 FF 00 00 18 
3ccfa 7e9 3C 7E 7E 3C 
3ccfe 7ea 18 00 00 00 
3cd02 7eb 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3cd06 7ec 7C 00 00 06 
3cd0a 7ed 06 3E 66 66 
3cd0e 7ee 3E 00 00 00 
3cd12 7ef 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3cd16 7f0 3C 00 00 60 
3cd1a 7f1 60 7C 66 66 
3cd1e 7f2 7C 00 00 00 
3cd22 7f3 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3cd26 7f4 3C 00 00 70 
3cd2a 7f5 18 7C 18 18 
3cd2e 7f6 18 00 00 00 
3cd32 7f7 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3cd36 7f8 60 3E 00 06 
3cd3a 7f9 06 3E 66 66 
3cd3e 7fa 66 00 00 18 
3cd42 7fb 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3cd46 7fc 3C 00 00 60 
3cd4a 7fd 00 60 60 60 
3cd4e 7fe 60 3C 00 06 
3cd52 7ff 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3cd56 800 66 00 00 1C 
3cd5a 801 18 18 18 18 
3cd5e 802 3C 00 00 00 
3cd62 803 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3cd66 804 C6 00 00 00 
3cd6a 805 3E 66 66 66 
3cd6e 806 66 00 00 00 
3cd72 807 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3cd76 808 3C 00 00 00 
3cd7a 809 3E 66 66 3E 
3cd7e 80a 06 06 00 00 
3cd82 80b 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3cd86 80c 60 60 00 00 
3cd8a 80d 3E 66 06 06 
3cd8e 80e 06 00 00 00 
3cd92 80f 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3cd96 810 3E 00 00 18 
3cd9a 811 7E 18 18 18 
3cd9e 812 70 00 00 00 
3cda2 813 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3cda6 814 7C 00 00 00 
3cdaa 815 66 66 66 3C 
3cdae 816 18 00 00 00 
3cdb2 817 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3cdb6 818 6C 00 00 00 
3cdba 819 66 3C 18 3C 
3cdbe 81a 66 00 00 00 
3cdc2 81b 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3cdc6 81c 30 1E 00 00 
3cdca 81d 7E 30 18 0C 
3cdce 81e 7E 00 00 18 
3cdd2 81f 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3cdd6 820 3C 00 18 18 
3cdda 821 18 18 18 18 
3cdde 822 18 18 00 7E 
3cde2 823 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3cde6 824 60 00 10 18 
3cdea 825 1C 1E 1C 18 
3cdee 826 10 00 08 18 
3cdf2 827 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3cdf6 828 08 00       | 	byte	$08, $00
3cdf8 829 00 00 00 00 
      ...             
3d004 8ac 00 00 00 00 
3d008 8ad 00 00       | amiga_font     file "amigafont.def"
3d00a 8ad 18 18 18 18 
3d00e 8ae 18 18       | 	byte	$18[6]
3d010 8af 00 18 18 00 
3d014 8b0 00 00 00 00 
3d018 8b1 00 00 66 66 
3d01c 8b2 66 00 00 00 | 	byte	$00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $00, $00, $00
3d020 8b3 00 00 00 00 
3d024 8b4 00 00 00 00 
3d028 8b5 00 00       | 	byte	$00[10]
3d02a 8b5 36 36 7F 36 
3d02e 8b6 36 36 7F 36 
3d032 8b7 36 00 00 00 
3d036 8b8 00 00 00 00 | 	byte	$36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $00, $00, $00
3d03a 8b9 18 7C 06 06 
3d03e 8ba 3C 60 60 3E 
3d042 8bb 18 00 00 00 
3d046 8bc 00 00 00 00 | 	byte	$18, $7c, $06, $06, $3c, $60, $60, $3e, $18, $00, $00, $00, $00, $00, $00, $00
3d04a 8bd 00 00 C6 69 
3d04e 8be 36 18 6C 96 
3d052 8bf 63 00 00 00 
3d056 8c0 00 00 00 00 | 	byte	$00, $00, $c6, $69, $36, $18, $6c, $96, $63, $00, $00, $00, $00, $00, $00, $00
3d05a 8c1 1C 36 36 1E 
3d05e 8c2 6E 3B 33 73 
3d062 8c3 DE 00 00 00 
3d066 8c4 00 00 00 00 | 	byte	$1c, $36, $36, $1e, $6e, $3b, $33, $73, $de, $00, $00, $00, $00, $00, $00, $00
3d06a 8c5 18 18 0C 00 
3d06e 8c6 00 00 00 00 
3d072 8c7 00 00 00 00 
3d076 8c8 00 00 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d07a 8c9 30 18 0C 0C 
3d07e 8ca 0C 0C 0C 18 
3d082 8cb 30 00 00 00 
3d086 8cc 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00, $00
3d08a 8cd 0C 18 30 30 
3d08e 8ce 30 30 30 18 
3d092 8cf 0C 00 00 00 
3d096 8d0 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00, $00
3d09a 8d1 00 66 66 3C 
3d09e 8d2 FF 3C 66 66 
3d0a2 8d3 00 00 00 00 
3d0a6 8d4 00 00 00 00 | 	byte	$00, $66, $66, $3c, $ff, $3c, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00
3d0aa 8d5 00 18 18 18 
3d0ae 8d6 7E 18 18 18 
3d0b2 8d7 00 00 00 00 
3d0b6 8d8 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3d0ba 8d9 00 00 00 00 
3d0be 8da 00 00 00    | 	byte	$00[7]
3d0c1 8db 18 18 0C 00 
3d0c5 8dc 00 00 00 00 
3d0c9 8dd 00 00 00 00 
3d0cd 8de 00 7E 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00
3d0d1 8df 00 00 00 00 
3d0d5 8e0 00 00 00 00 
3d0d9 8e1 00 00 00 00 
3d0dd 8e2 00 00 00 00 | 	byte	$00[16]
3d0e1 8e3 18 18 00 00 
3d0e5 8e4 00 00 00 00 
3d0e9 8e5 00 00 C0 60 
3d0ed 8e6 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $60, $30, $18, $0c, $06
3d0f1 8e7 03 00 00 00 
3d0f5 8e8 00 00 00 00 
3d0f9 8e9 00 3C 66 66 
3d0fd 8ea 76 7E 6E 66 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $76, $7e, $6e, $66
3d101 8eb 66 3C 00 00 
3d105 8ec 00 00 00 00 
3d109 8ed 00 18 1C 1E 
3d10d 8ee 18 18 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18
3d111 8ef 18 18 00 00 
3d115 8f0 00 00 00 00 
3d119 8f1 00 3C 66 60 
3d11d 8f2 60 30 18 0C | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $30, $18, $0c
3d121 8f3 06 7E 00 00 
3d125 8f4 00 00 00 00 
3d129 8f5 00 3C 66 60 
3d12d 8f6 60 38 60 60 | 	byte	$06, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $38, $60, $60
3d131 8f7 66 3C 00 00 
3d135 8f8 00 00 00 00 
3d139 8f9 00 30 38 3C 
3d13d 8fa 36 33 7F 30 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30
3d141 8fb 30 30 00 00 
3d145 8fc 00 00 00 00 
3d149 8fd 00 7E 06 06 
3d14d 8fe 3E 60 60 60 | 	byte	$30, $30, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06, $3e, $60, $60, $60
3d151 8ff 66 3C 00 00 
3d155 900 00 00 00 00 
3d159 901 00 38 0C 06 
3d15d 902 06 3E 66 66 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $06, $06, $3e, $66, $66
3d161 903 66 3C 00 00 
3d165 904 00 00 00 00 
3d169 905 00 7E 60 60 
3d16d 906 60 30 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $7e, $60, $60, $60, $30, $18, $18
3d171 907 18 18 00 00 
3d175 908 00 00 00 00 
3d179 909 00 3C 66 66 
3d17d 90a 66 3C 66 66 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $3c, $66, $66
3d181 90b 66 3C 00 00 
3d185 90c 00 00 00 00 
3d189 90d 00 3C 66 66 
3d18d 90e 66 7C 60 60 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $7c, $60, $60
3d191 90f 30 1C 00 00 
3d195 910 00 00 00 00 
3d199 911 00 00 00 18 
3d19d 912 18 00 00 18 | 	byte	$30, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $18
3d1a1 913 18 00 00 00 
3d1a5 914 00 00 00 00 
3d1a9 915 00 00 00 18 
3d1ad 916 18 00 00 00 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3d1b1 917 18 18 0C 00 
3d1b5 918 00 00 00 00 
3d1b9 919 00 00 00 60 
3d1bd 91a 18 06 18 60 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $60, $18, $06, $18, $60
3d1c1 91b 00 00 00 00 
3d1c5 91c 00 00 00 00 
3d1c9 91d 00 00 00 00 | 	byte	$00[12]
3d1cd 91e 7E 00 7E 00 
3d1d1 91f 00 00 00 00 
3d1d5 920 00 00 00 00 
3d1d9 921 00 00 00 06 | 	byte	$7e, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06
3d1dd 922 18 60 18 06 
3d1e1 923 00 00 00 00 
3d1e5 924 00 00 00 00 
3d1e9 925 00 3C 66 60 | 	byte	$18, $60, $18, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60
3d1ed 926 60 30 18 00 
3d1f1 927 18 18 00 00 
3d1f5 928 00 00 00 00 
3d1f9 929 00 3E 63 63 | 	byte	$60, $30, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
3d1fd 92a 7B 6B 7B 03 
3d201 92b 03 1E 00 00 
3d205 92c 00 00 00 00 
3d209 92d 00 3E 63 63 | 	byte	$7b, $6b, $7b, $03, $03, $1e, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
3d20d 92e 63 7F 63 63 
3d211 92f 63 63 00 00 
3d215 930 00 00 00 00 
3d219 931 00 3E 66 66 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66
3d21d 932 66 3E 66 66 
3d221 933 66 3E 00 00 
3d225 934 00 00 00 00 
3d229 935 00 78 0C 06 | 	byte	$66, $3e, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $78, $0c, $06
3d22d 936 06 06 06 06 
3d231 937 0C 78 00 00 
3d235 938 00 00 00 00 
3d239 939 00 1F 33 63 | 	byte	$06, $06, $06, $06, $0c, $78, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $63
3d23d 93a 63 63 63 63 
3d241 93b 33 1F 00 00 
3d245 93c 00 00 00 00 
3d249 93d 00 7E 06 06 | 	byte	$63, $63, $63, $63, $33, $1f, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
3d24d 93e 06 1E 06 06 
3d251 93f 06 7E 00 00 
3d255 940 00 00 00 00 
3d259 941 00 7E 06 06 | 	byte	$06, $1e, $06, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
3d25d 942 06 1E 06 06 
3d261 943 06 06 00 00 
3d265 944 00 00 00 00 
3d269 945 00 3C 66 06 | 	byte	$06, $1e, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06
3d26d 946 06 76 66 66 
3d271 947 66 7C 00 00 
3d275 948 00 00 00 00 
3d279 949 00 63 63 63 | 	byte	$06, $76, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63
3d27d 94a 63 7F 63 63 
3d281 94b 63 63 00 00 
3d285 94c 00 00 00 00 
3d289 94d 00 3C 18 18 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3c, $18, $18
3d28d 94e 18 18 18 18 
3d291 94f 18          | 	byte	$18[5]
3d292 94f 3C 00 00 00 
3d296 950 00 00 00 00 
3d29a 951 60 60 60 60 
3d29e 952 60 60 60 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60, $60, $60, $60, $60, $63
3d2a2 953 3E 00 00 00 
3d2a6 954 00 00 00 00 
3d2aa 955 C3 63 33 1B 
3d2ae 956 0F 1B 33 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $c3, $63, $33, $1b, $0f, $1b, $33, $63
3d2b2 957 C3 00 00 00 
3d2b6 958 00 00 00 00 
3d2ba 959 03 03 03 03 
3d2be 95a 03 03 03 03 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $03, $03, $03, $03, $03, $03, $03, $03
3d2c2 95b 7F 00 00 00 
3d2c6 95c 00 00 00 00 
3d2ca 95d 63 77 7F 6B 
3d2ce 95e 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $6b, $63, $63, $63, $63
3d2d2 95f 63 00 00 00 
3d2d6 960 00 00 00 00 
3d2da 961 63 67 6F 7B 
3d2de 962 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7b, $73, $63, $63, $63
3d2e2 963 63 00 00 00 
3d2e6 964 00 00 00 00 
3d2ea 965 3E 63 63 63 
3d2ee 966 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63
3d2f2 967 3E 00 00 00 
3d2f6 968 00 00 00 00 
3d2fa 969 3E 66 66 66 
3d2fe 96a 3E 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e, $06, $06, $06
3d302 96b 06 00 00 00 
3d306 96c 00 00 00 00 
3d30a 96d 3E 63 63 63 
3d30e 96e 63 63 63 7B | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $7b
3d312 96f FE 00 00 00 
3d316 970 00 00 00 00 
3d31a 971 1F 33 33 33 
3d31e 972 1F 1B 33 63 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $33, $33, $1f, $1b, $33, $63
3d322 973 63 00 00 00 
3d326 974 00 00 00 00 
3d32a 975 3C 66 06 0C 
3d32e 976 18 30 60 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06, $0c, $18, $30, $60, $66
3d332 977 3C 00 00 00 
3d336 978 00 00 00 00 
3d33a 979 7E 18 18 18 
3d33e 97a 18 18 18 18 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $7e, $18, $18, $18, $18, $18, $18, $18
3d342 97b 18 00 00 00 
3d346 97c 00 00 00 00 
3d34a 97d 63 63 63 63 
3d34e 97e 63 63 63 63 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63
3d352 97f 3E 00 00 00 
3d356 980 00 00 00 00 
3d35a 981 63 63 63 63 
3d35e 982 63 36 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36, $36, $1c
3d362 983 08 00 00 00 
3d366 984 00 00 00 00 
3d36a 985 C3 C3 C3 C3 
3d36e 986 C3 DB FF E7 | 	byte	$08, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $c3, $c3, $c3, $db, $ff, $e7
3d372 987 C3 00 00 00 
3d376 988 00 00 00 00 
3d37a 989 C3 C3 66 3C 
3d37e 98a 18 3C 66 C3 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $3c, $66, $c3
3d382 98b C3 00 00 00 
3d386 98c 00 00 00 00 
3d38a 98d C3 C3 66 3C 
3d38e 98e 18 18 18 18 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $18, $18, $18
3d392 98f 18 00 00 00 
3d396 990 00 00 00 00 
3d39a 991 7F 60 60 30 
3d39e 992 18 0C 06 03 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $7f, $60, $60, $30, $18, $0c, $06, $03
3d3a2 993 7F 00 00 00 
3d3a6 994 00 00 00 00 
3d3aa 995 3C 0C 0C 0C 
3d3ae 996 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3d3b2 997 3C 00 00 00 
3d3b6 998 00 00 00 00 
3d3ba 999 00 03 06 0C 
3d3be 99a 18 30 60 C0 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $03, $06, $0c, $18, $30, $60, $c0
3d3c2 99b 00 00 00 00 
3d3c6 99c 00 00 00 00 | 	byte	$00[8]
3d3ca 99d 3C 30 30 30 
3d3ce 99e 30 30 30 30 
3d3d2 99f 3C 00 00 00 
3d3d6 9a0 00 00 00 00 | 	byte	$3c, $30, $30, $30, $30, $30, $30, $30, $3c, $00, $00, $00, $00, $00, $00, $00
3d3da 9a1 08 1C 36 63 
3d3de 9a2 00 00 00 00 
3d3e2 9a3 00 00 00 00 
3d3e6 9a4 00 00 00 00 | 	byte	$08, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d3ea 9a5 00 00 00 00 
3d3ee 9a6 00 00 00 00 
3d3f2 9a7 00          | 	byte	$00[9]
3d3f3 9a7 7F 00 00 00 
3d3f7 9a8 00 00 00 18 
3d3fb 9a9 18 30 00 00 
3d3ff 9aa 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $18, $18, $30, $00, $00, $00, $00, $00, $00
3d403 9ab 00 00 00 00 
3d407 9ac 00 00 00 00 
3d40b 9ad 00 00       | 	byte	$00[10]
3d40d 9ae 3C 60 7C 66 
3d411 9af 66 7C 00 00 
3d415 9b0 00 00 00 00 
3d419 9b1 00 06 06 06 | 	byte	$3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $06, $06, $06
3d41d 9b2 3E 66 66 66 
3d421 9b3 66 3E 00 00 
3d425 9b4 00 00 00 00 
3d429 9b5 00 00 00 00 | 	byte	$3e, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d42d 9b6 3C 06 06 06 
3d431 9b7 06 3C 00 00 
3d435 9b8 00 00 00 00 
3d439 9b9 00 60 60 60 | 	byte	$3c, $06, $06, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60
3d43d 9ba 7C 66 66 66 
3d441 9bb 66 7C 00 00 
3d445 9bc 00 00 00 00 
3d449 9bd 00 00 00 00 | 	byte	$7c, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d44d 9be 3C 66 7E 06 
3d451 9bf 06 3C 00 00 
3d455 9c0 00 00 00 00 
3d459 9c1 00 38 0C 0C | 	byte	$3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $0c
3d45d 9c2 3E 0C 0C 0C 
3d461 9c3 0C 0C 00 00 
3d465 9c4 00 00 00 00 
3d469 9c5 00 00 00 00 | 	byte	$3e, $0c, $0c, $0c, $0c, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d46d 9c6 7C 66 66 66 
3d471 9c7 7C 60 60 3C 
3d475 9c8 00 00 00 00 
3d479 9c9 00 06 06 06 | 	byte	$7c, $66, $66, $66, $7c, $60, $60, $3c, $00, $00, $00, $00, $00, $06, $06, $06
3d47d 9ca 3E 66 66 66 
3d481 9cb 66 66 00 00 
3d485 9cc 00 00 00 00 
3d489 9cd 00 00 18 00 | 	byte	$3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00
3d48d 9ce 18 18 18 18 
3d491 9cf 18          | 	byte	$18[5]
3d492 9cf 30 00 00 00 
3d496 9d0 00 00 00 00 
3d49a 9d1 00 30 00 30 
3d49e 9d2 30 30 30 30 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $30, $00, $30, $30, $30, $30, $30
3d4a2 9d3 30 30 1E 00 
3d4a6 9d4 00 00 00 00 
3d4aa 9d5 03 03 03 33 
3d4ae 9d6 1B 0F 1B 33 | 	byte	$30, $30, $1e, $00, $00, $00, $00, $00, $03, $03, $03, $33, $1b, $0f, $1b, $33
3d4b2 9d7 63 00 00 00 
3d4b6 9d8 00 00 00 00 
3d4ba 9d9 18 18 18 18 
3d4be 9da 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
3d4c2 9db 30 00 00 00 
3d4c6 9dc 00 00 00 00 
3d4ca 9dd 00 00 00 37 
3d4ce 9de 7F 6B 63 63 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $63, $63
3d4d2 9df 63 00 00 00 
3d4d6 9e0 00 00 00 00 
3d4da 9e1 00 00 00 3E 
3d4de 9e2 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $66
3d4e2 9e3 66 00 00 00 
3d4e6 9e4 00 00 00 00 
3d4ea 9e5 00 00 00 3C 
3d4ee 9e6 66 66 66 66 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $66
3d4f2 9e7 3C 00 00 00 
3d4f6 9e8 00 00 00 00 
3d4fa 9e9 00 00 00 3E 
3d4fe 9ea 66 66 66 3E | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e
3d502 9eb 06 06 06 00 
3d506 9ec 00 00 00 00 
3d50a 9ed 00 00 00 7C 
3d50e 9ee 66 66 66 7C | 	byte	$06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7c, $66, $66, $66, $7c
3d512 9ef 60 60 60 00 
3d516 9f0 00 00 00 00 
3d51a 9f1 00 00 00 3E 
3d51e 9f2 66 06 06 06 | 	byte	$60, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $06, $06, $06
3d522 9f3 06 00 00 00 
3d526 9f4 00 00 00 00 
3d52a 9f5 00 00 00 3C 
3d52e 9f6 06 0C 30 60 | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $06, $0c, $30, $60
3d532 9f7 3E 00 00 00 
3d536 9f8 00 00 00 00 
3d53a 9f9 00 0C 0C 3E 
3d53e 9fa 0C 0C 0C 0C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $0c, $3e, $0c, $0c, $0c, $0c
3d542 9fb 38 00 00 00 
3d546 9fc 00 00 00 00 
3d54a 9fd 00 00 00 66 
3d54e 9fe 66 66 66 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66
3d552 9ff 7C 00 00 00 
3d556 a00 00 00 00 00 
3d55a a01 00 00 00 66 
3d55e a02 66 66 66 3C | 	byte	$7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
3d562 a03 18 00 00 00 
3d566 a04 00 00 00 00 
3d56a a05 00 00 00 63 
3d56e a06 63 63 6B 3E | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $6b, $3e
3d572 a07 36 00 00 00 
3d576 a08 00 00 00 00 
3d57a a09 00 00 00 63 
3d57e a0a 36 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36
3d582 a0b 63 00 00 00 
3d586 a0c 00 00 00 00 
3d58a a0d 00 00 00 66 
3d58e a0e 66 66 66 3C | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
3d592 a0f 18 0C 06 00 
3d596 a10 00 00 00 00 
3d59a a11 00 00 00 7E 
3d59e a12 30 18 0C 06 | 	byte	$18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $30, $18, $0c, $06
3d5a2 a13 7E 00 00 00 
3d5a6 a14 00 00 00 00 
3d5aa a15 70 18 18 18 
3d5ae a16 0E 18 18 18 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18
3d5b2 a17 70 00 00 00 
3d5b6 a18 00 00 00 00 
3d5ba a19 18 18 18 18 
3d5be a1a 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
3d5c2 a1b 18 00 00 00 
3d5c6 a1c 00 00 00 00 
3d5ca a1d 0E 18 18 18 
3d5ce a1e 70 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18
3d5d2 a1f 0E 00 00 00 
3d5d6 a20 00 00 00 00 
3d5da a21 46 5D 31 00 
3d5de a22 00 00 00 00 | 	byte	$0e, $00, $00, $00, $00, $00, $00, $00, $46, $5d, $31, $00, $00, $00, $00, $00
3d5e2 a23 00 00 00 00 
3d5e6 a24 00 00 00 00 | 	byte	$00[8]
3d5ea a25 C0 F0 3C 0F 
3d5ee a26 C3 F0 3C 0F 
3d5f2 a27 03 00 00 00 
3d5f6 a28 00 00 00 00 | 	byte	$c0, $f0, $3c, $0f, $c3, $f0, $3c, $0f, $03, $00, $00, $00, $00, $00, $00, $00
3d5fa a29 18 18 00 18 
3d5fe a2a 18 18 18 18 
3d602 a2b 18 00 00 00 
3d606 a2c 00 00 00 00 | 	byte	$18, $18, $00, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3d60a a2d 18 18 7E 1B 
3d60e a2e 1B 7E 18 18 
3d612 a2f 00 00 00 00 
3d616 a30 00 00 00 00 | 	byte	$18, $18, $7e, $1b, $1b, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3d61a a31 78 CC 0C 0C 
3d61e a32 1E 0C 0C 06 
3d622 a33 7F 00 00 00 
3d626 a34 00 00 00 00 | 	byte	$78, $cc, $0c, $0c, $1e, $0c, $0c, $06, $7f, $00, $00, $00, $00, $00, $00, $00
3d62a a35 66 3C 66 66 
3d62e a36 3C 66 00 00 
3d632 a37 00 00 00 00 
3d636 a38 00 00 00 00 | 	byte	$66, $3c, $66, $66, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d63a a39 C3 C3 66 3C 
3d63e a3a 18 7E 18 18 
3d642 a3b 18 00 00 00 
3d646 a3c 00 00 00 00 | 	byte	$c3, $c3, $66, $3c, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3d64a a3d 18 18 18 18 
3d64e a3e 00 18 18 18 
3d652 a3f 18 00 00 00 
3d656 a40 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3d65a a41 3C 06 06 3C 
3d65e a42 66 66 66 3C 
3d662 a43 60 60 3C 00 
3d666 a44 00 00 00 00 | 	byte	$3c, $06, $06, $3c, $66, $66, $66, $3c, $60, $60, $3c, $00, $00, $00, $00, $00
3d66a a45 66 66 00 00 
3d66e a46 00 00 00 00 
3d672 a47 00 00 00 00 
3d676 a48 00 00 00 00 | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d67a a49 7E 81 B9 85 
3d67e a4a 85 B9 81 7E 
3d682 a4b 00 00 00 00 
3d686 a4c 00 00 00 00 | 	byte	$7e, $81, $b9, $85, $85, $b9, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
3d68a a4d 3C 33 33 7E 
3d68e a4e 00 7F 00 00 
3d692 a4f 00 00 00 00 
3d696 a50 00 00 00 00 | 	byte	$3c, $33, $33, $7e, $00, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d69a a51 00 00 CC 66 
3d69e a52 33 66 CC 00 
3d6a2 a53 00 00 00 00 
3d6a6 a54 00 00 00 00 | 	byte	$00, $00, $cc, $66, $33, $66, $cc, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d6aa a55 7E 60 60 00 
3d6ae a56 00 00 00 00 
3d6b2 a57 00 00 00 00 
3d6b6 a58 00 00 00 00 | 	byte	$7e, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d6ba a59 7E 81 9D A5 
3d6be a5a 9D A5 81 7E 
3d6c2 a5b 00 00 00 00 
3d6c6 a5c 00 00 00 00 | 	byte	$7e, $81, $9d, $a5, $9d, $a5, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
3d6ca a5d 7E 00 00 00 
3d6ce a5e 00 00 00 00 
3d6d2 a5f 00 00 00 00 
3d6d6 a60 00 00 00 00 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d6da a61 3C 66 66 3C 
3d6de a62 00 00 00 00 
3d6e2 a63 00 00 00 00 
3d6e6 a64 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d6ea a65 18 18 18 7E 
3d6ee a66 18 18 18 00 
3d6f2 a67 7E 00 00 00 
3d6f6 a68 00 00 00 00 | 	byte	$18, $18, $18, $7e, $18, $18, $18, $00, $7e, $00, $00, $00, $00, $00, $00, $00
3d6fa a69 1E 30 30 18 
3d6fe a6a 0C 06 3E 00 
3d702 a6b 00 00 00 00 
3d706 a6c 00 00 00 00 | 	byte	$1e, $30, $30, $18, $0c, $06, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d70a a6d 1E 30 30 1C 
3d70e a6e 30 30 1E 00 
3d712 a6f 00 00 00 00 
3d716 a70 00 00 00 00 | 	byte	$1e, $30, $30, $1c, $30, $30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d71a a71 30 18 0C 06 
3d71e a72 00 00 00 00 
3d722 a73 00 00 00 00 
3d726 a74 00 00 00 00 | 	byte	$30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d72a a75 00 00 00 66 
3d72e a76 66 66 66 66 
3d732 a77 FE 06 06 00 
3d736 a78 00 00 00 00 | 	byte	$00, $00, $00, $66, $66, $66, $66, $66, $fe, $06, $06, $00, $00, $00, $00, $00
3d73a a79 7C 5E 5E 5E 
3d73e a7a 5C 50 50 50 
3d742 a7b 50 50 00 00 
3d746 a7c 00 00 00 00 | 	byte	$7c, $5e, $5e, $5e, $5c, $50, $50, $50, $50, $50, $00, $00, $00, $00, $00, $00
3d74a a7d 00 00 00 18 
3d74e a7e 18 00 00 00 
3d752 a7f 00 00 00 00 
3d756 a80 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d75a a81 00 00 00 00 
3d75e a82 00 00 00 00 
3d762 a83 00          | 	byte	$00[9]
3d763 a83 30 18 00 00 
3d767 a84 00 00 00 18 
3d76b a85 1C 18 18 18 
3d76f a86 18 18 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $18, $1c, $18, $18, $18, $18, $18, $00, $00
3d773 a87 00 00 00 00 
3d777 a88 00 00 00    | 	byte	$00[7]
3d77a a89 3C 66 66 3C 
3d77e a8a 00 7E 00 00 
3d782 a8b 00 00 00 00 
3d786 a8c 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d78a a8d 00 00 33 66 
3d78e a8e CC 66 33 00 
3d792 a8f 00 00 00 00 
3d796 a90 00 00 00 00 | 	byte	$00, $00, $33, $66, $cc, $66, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d79a a91 02 63 32 1A 
3d79e a92 4E 66 F3 40 
3d7a2 a93 40 00 00 00 
3d7a6 a94 00 00 00 00 | 	byte	$02, $63, $32, $1a, $4e, $66, $f3, $40, $40, $00, $00, $00, $00, $00, $00, $00
3d7aa a95 04 C6 64 34 
3d7ae a96 7C 8C 46 23 
3d7b2 a97 F0 00 00 00 
3d7b6 a98 00 00 00 00 | 	byte	$04, $c6, $64, $34, $7c, $8c, $46, $23, $f0, $00, $00, $00, $00, $00, $00, $00
3d7ba a99 03 C4 66 34 
3d7be a9a 5B 6C F6 43 
3d7c2 a9b 40 00 00 00 
3d7c6 a9c 00 00 00 00 | 	byte	$03, $c4, $66, $34, $5b, $6c, $f6, $43, $40, $00, $00, $00, $00, $00, $00, $00
3d7ca a9d 18 18 00 18 
3d7ce a9e 0C 06 06 66 
3d7d2 a9f 3C 00 00 00 
3d7d6 aa0 00 00 00 00 | 	byte	$18, $18, $00, $18, $0c, $06, $06, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3d7da aa1 06 0C 3E 63 
3d7de aa2 63 7F 63 63 
3d7e2 aa3 63 00 00 00 
3d7e6 aa4 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3d7ea aa5 30 18 3E 63 
3d7ee aa6 63 7F 63 63 
3d7f2 aa7 63 00 00 00 
3d7f6 aa8 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3d7fa aa9 0C 33 3E 63 
3d7fe aaa 63 63 7F 63 
3d802 aab 63 00 00 00 
3d806 aac 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
3d80a aad 4E 39 3E 63 
3d80e aae 63 7F 63 63 
3d812 aaf 63 00 00 00 
3d816 ab0 00 00 00 00 | 	byte	$4e, $39, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3d81a ab1 63 00 3E 63 
3d81e ab2 63 7F 63 63 
3d822 ab3 63 00 00 00 
3d826 ab4 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3d82a ab5 1C 22 1C 36 
3d82e ab6 63 63 7F 63 
3d832 ab7 63 00 00 00 
3d836 ab8 00 00 00 00 | 	byte	$1c, $22, $1c, $36, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
3d83a ab9 F8 3C 3C 36 
3d83e aba F6 3F 33 33 
3d842 abb F3 00 00 00 
3d846 abc 00 00 00 00 | 	byte	$f8, $3c, $3c, $36, $f6, $3f, $33, $33, $f3, $00, $00, $00, $00, $00, $00, $00
3d84a abd 78 0C 06 06 
3d84e abe 06 06 06 0C 
3d852 abf 78 30 18 00 
3d856 ac0 00 00 00 00 | 	byte	$78, $0c, $06, $06, $06, $06, $06, $0c, $78, $30, $18, $00, $00, $00, $00, $00
3d85a ac1 0C 18 7E 06 
3d85e ac2 06 3E 06 06 
3d862 ac3 7E 00 00 00 
3d866 ac4 00 00 00 00 | 	byte	$0c, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3d86a ac5 30 18 7E 06 
3d86e ac6 06 3E 06 06 
3d872 ac7 7E 00 00 00 
3d876 ac8 00 00 00 00 | 	byte	$30, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3d87a ac9 18 66 7E 06 
3d87e aca 06 3E 06 06 
3d882 acb 7E 00 00 00 
3d886 acc 00 00 00 00 | 	byte	$18, $66, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3d88a acd 66 00 7E 06 
3d88e ace 06 3E 06 06 
3d892 acf 7E 00 00 00 
3d896 ad0 00 00 00 00 | 	byte	$66, $00, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3d89a ad1 0C 18 3C 18 
3d89e ad2 18 18 18 18 
3d8a2 ad3 3C 00 00 00 
3d8a6 ad4 00 00 00 00 | 	byte	$0c, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3d8aa ad5 30 18 3C 18 
3d8ae ad6 18 18 18 18 
3d8b2 ad7 3C 00 00 00 
3d8b6 ad8 00 00 00 00 | 	byte	$30, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3d8ba ad9 18 66 3C 18 
3d8be ada 18 18 18 18 
3d8c2 adb 3C 00 00 00 
3d8c6 adc 00 00 00 00 | 	byte	$18, $66, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3d8ca add 66 00 3C 18 
3d8ce ade 18 18 18 18 
3d8d2 adf 3C 00 00 00 
3d8d6 ae0 00 00 00 00 | 	byte	$66, $00, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3d8da ae1 1E 36 66 66 
3d8de ae2 6F 66 66 36 
3d8e2 ae3 1E 00 00 00 
3d8e6 ae4 00 00 00 00 | 	byte	$1e, $36, $66, $66, $6f, $66, $66, $36, $1e, $00, $00, $00, $00, $00, $00, $00
3d8ea ae5 8E 73 67 6F 
3d8ee ae6 7B 73 63 63 
3d8f2 ae7 63 00 00 00 
3d8f6 ae8 00 00 00 00 | 	byte	$8e, $73, $67, $6f, $7b, $73, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3d8fa ae9 06 0C 3E 63 
3d8fe aea 63 63 63 63 
3d902 aeb 3E 00 00 00 
3d906 aec 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3d90a aed 30 18 3E 63 
3d90e aee 63 63 63 63 
3d912 aef 3E 00 00 00 
3d916 af0 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3d91a af1 0C 33 3E 63 
3d91e af2 63 63 63 63 
3d922 af3 3E 00 00 00 
3d926 af4 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3d92a af5 8E 71 3E 63 
3d92e af6 63 63 63 63 
3d932 af7 3E 00 00 00 
3d936 af8 00 00 00 00 | 	byte	$8e, $71, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3d93a af9 63 00 3E 63 
3d93e afa 63 63 63 63 
3d942 afb 3E 00 00 00 
3d946 afc 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3d94a afd 00 00 63 36 
3d94e afe 1C 1C 36 63 
3d952 aff 00 00 00 00 
3d956 b00 00 00 00 00 | 	byte	$00, $00, $63, $36, $1c, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00
3d95a b01 BE 63 73 7B 
3d95e b02 6B 6F 67 63 
3d962 b03 3F 00 00 00 
3d966 b04 00 00 00 00 | 	byte	$be, $63, $73, $7b, $6b, $6f, $67, $63, $3f, $00, $00, $00, $00, $00, $00, $00
3d96a b05 0C 18 63 63 
3d96e b06 63 63 63 63 
3d972 b07 3E 00 00 00 
3d976 b08 00 00 00 00 | 	byte	$0c, $18, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3d97a b09 18 0C 63 63 
3d97e b0a 63 63 63 63 
3d982 b0b 3E 00 00 00 
3d986 b0c 00 00 00 00 | 	byte	$18, $0c, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3d98a b0d 08 36 63 63 
3d98e b0e 63 63 63 63 
3d992 b0f 3E 00 00 00 
3d996 b10 00 00 00 00 | 	byte	$08, $36, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3d99a b11 63 00 63 63 
3d99e b12 63 63 63 63 
3d9a2 b13 3E 00 00 00 
3d9a6 b14 00 00 00 00 | 	byte	$63, $00, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3d9aa b15 30 18 C3 66 
3d9ae b16 3C 18 18 18 
3d9b2 b17 18 00 00 00 
3d9b6 b18 00 00 00 00 | 	byte	$30, $18, $c3, $66, $3c, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3d9ba b19 03 03 3F 63 
3d9be b1a 63 3F 03 03 
3d9c2 b1b 03 00 00 00 
3d9c6 b1c 00 00 00 00 | 	byte	$03, $03, $3f, $63, $63, $3f, $03, $03, $03, $00, $00, $00, $00, $00, $00, $00
3d9ca b1d 3C 66 66 66 
3d9ce b1e 36 66 66 66 
3d9d2 b1f 36 06 06 00 
3d9d6 b20 00 00 00 00 | 	byte	$3c, $66, $66, $66, $36, $66, $66, $66, $36, $06, $06, $00, $00, $00, $00, $00
3d9da b21 06 0C 00 3C 
3d9de b22 60 7C 66 66 
3d9e2 b23 7C 00 00 00 
3d9e6 b24 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3d9ea b25 60 30 00 3C 
3d9ee b26 60 7C 66 66 
3d9f2 b27 7C 00 00 00 
3d9f6 b28 00 00 00 00 | 	byte	$60, $30, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3d9fa b29 18 66 00 3C 
3d9fe b2a 60 7C 66 66 
3da02 b2b 7C 00 00 00 
3da06 b2c 00 00 00 00 | 	byte	$18, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3da0a b2d 8E 71 00 3C 
3da0e b2e 60 7C 66 66 
3da12 b2f 7C 00 00 00 
3da16 b30 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3da1a b31 00 66 00 3C 
3da1e b32 60 7C 66 66 
3da22 b33 7C 00 00 00 
3da26 b34 00 00 00 00 | 	byte	$00, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3da2a b35 18 24 18 3C 
3da2e b36 60 7C 66 66 
3da32 b37 7C 00 00 00 
3da36 b38 00 00 00 00 | 	byte	$18, $24, $18, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3da3a b39 00 00 00 7E 
3da3e b3a D8 FE 1B 1B 
3da42 b3b EE 00 00 00 
3da46 b3c 00 00 00 00 | 	byte	$00, $00, $00, $7e, $d8, $fe, $1b, $1b, $ee, $00, $00, $00, $00, $00, $00, $00
3da4a b3d 00 00 00 3C 
3da4e b3e 06 06 06 06 
3da52 b3f 3C 18 0C 00 
3da56 b40 00 00 00 00 | 	byte	$00, $00, $00, $3c, $06, $06, $06, $06, $3c, $18, $0c, $00, $00, $00, $00, $00
3da5a b41 06 0C 00 3C 
3da5e b42 66 7E 06 06 
3da62 b43 3C 00 00 00 
3da66 b44 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3da6a b45 60 30 00 3C 
3da6e b46 66 7E 06 06 
3da72 b47 3C 00 00 00 
3da76 b48 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3da7a b49 18 66 00 3C 
3da7e b4a 66 7E 06 06 
3da82 b4b 3C 00 00 00 
3da86 b4c 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3da8a b4d 00 66 00 3C 
3da8e b4e 66 7E 06 06 
3da92 b4f 3C 00 00 00 
3da96 b50 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3da9a b51 0C 18 00 18 
3da9e b52 18 18 18 18 
3daa2 b53 30 00 00 00 
3daa6 b54 00 00 00 00 | 	byte	$0c, $18, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3daaa b55 18 0C 00 0C 
3daae b56 0C 0C 0C 0C 
3dab2 b57 18 00 00 00 
3dab6 b58 00 00 00 00 | 	byte	$18, $0c, $00, $0c, $0c, $0c, $0c, $0c, $18, $00, $00, $00, $00, $00, $00, $00
3daba b59 18 66 00 18 
3dabe b5a 18 18 18 18 
3dac2 b5b 30 00 00 00 
3dac6 b5c 00 00 00 00 | 	byte	$18, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3daca b5d 00 66 00 18 
3dace b5e 18 18 18 18 
3dad2 b5f 30 00 00 00 
3dad6 b60 00 00 00 00 | 	byte	$00, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3dada b61 03 06 3F 18 
3dade b62 3C 66 66 66 
3dae2 b63 3C 00 00 00 
3dae6 b64 00 00 00 00 | 	byte	$03, $06, $3f, $18, $3c, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3daea b65 8E 71 00 3E 
3daee b66 66 66 66 66 
3daf2 b67 66 00 00 00 
3daf6 b68 00 00 00 00 | 	byte	$8e, $71, $00, $3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3dafa b69 06 0C 00 3C 
3dafe b6a 66 66 66 66 
3db02 b6b 3C 00 00 00 
3db06 b6c 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3db0a b6d 60 30 00 3C 
3db0e b6e 66 66 66 66 
3db12 b6f 3C 00 00 00 
3db16 b70 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3db1a b71 18 66 00 3C 
3db1e b72 66 66 66 66 
3db22 b73 3C 00 00 00 
3db26 b74 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3db2a b75 8E 71 00 3C 
3db2e b76 66 66 66 66 
3db32 b77 3C 00 00 00 
3db36 b78 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3db3a b79 00 66 00 3C 
3db3e b7a 66 66 66 66 
3db42 b7b 3C 00 00 00 
3db46 b7c 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3db4a b7d 00 18 18 00 
3db4e b7e 7E 00 18 18 
3db52 b7f 00 00 00 00 
3db56 b80 00 00 00 00 | 	byte	$00, $18, $18, $00, $7e, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3db5a b81 00 00 00 7E 
3db5e b82 73 7B 6F 67 
3db62 b83 3F 00 00 00 
3db66 b84 00 00 00 00 | 	byte	$00, $00, $00, $7e, $73, $7b, $6f, $67, $3f, $00, $00, $00, $00, $00, $00, $00
3db6a b85 0C 18 00 66 
3db6e b86 66 66 66 66 
3db72 b87 7C 00 00 00 
3db76 b88 00 00 00 00 | 	byte	$0c, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3db7a b89 30 18 00 66 
3db7e b8a 66 66 66 66 
3db82 b8b 7C 00 00 00 
3db86 b8c 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3db8a b8d 18 66 00 66 
3db8e b8e 66 66 66 66 
3db92 b8f 7C 00 00 00 
3db96 b90 00 00 00 00 | 	byte	$18, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3db9a b91 00 66 00 66 
3db9e b92 66 66 66 66 
3dba2 b93 7C 00 00 00 
3dba6 b94 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3dbaa b95 30 18 00 66 
3dbae b96 66 66 66 3C 
3dbb2 b97 18 0C 06 00 
3dbb6 b98 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
3dbba b99 06 06 06 3E 
3dbbe b9a 66 66 66 3E 
3dbc2 b9b 06 06 06 00 
3dbc6 b9c 00 00 00 00 | 	byte	$06, $06, $06, $3e, $66, $66, $66, $3e, $06, $06, $06, $00, $00, $00, $00, $00
3dbca b9d 00 66 00 66 
3dbce b9e 66 66 66 3C 
3dbd2 b9f 18 0C 06 00 
3dbd6 ba0 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
3dbda ba1 00 7E 66 66 
3dbde ba2 66 66 66 66 
3dbe2 ba3 66 7E 00 00 
3dbe6 ba4 00 00 00 00 | 	byte	$00, $7e, $66, $66, $66, $66, $66, $66, $66, $7e, $00, $00, $00, $00, $00, $00
3dbea ba5 00 00 00 00 
      ...             
3ddf2 c27 00 00 00 00 
3ddf6 c28 00 00       | 	byte	$00[526]
3ddf8 c29 00 00 00 00 
3ddfc c2a 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
3ddfd c2a 80 00 00 00 
3de01 c2b 00 80 00 00 
3de05 c2c 80 80 00 00 
3de09 c2d 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
3de0d c2e 80 00 80 00 
3de11 c2f 00 40 80 00 
3de15 c30 AA AA AA 00 
3de19 c31 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
3de1d c32 FF 00 00 00 
3de21 c33 00 FF 00 00 
3de25 c34 FF FF 00 00 
3de29 c35 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
3de2d c36 FF 00 FF 00 
3de31 c37 00 FF FF 00 
3de35 c38 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3de38 c39 00 00 00 00 
3de3c c3a 00          | ataripalette   file "ataripalettep2.def"
3de3d c3a 11 11 11 00 
3de41 c3b 22 22 22 00 
3de45 c3c 33 33 33 00 
3de49 c3d 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3de4d c3e 55 55 55 00 
3de51 c3f 66 66 66 00 
3de55 c40 77 77 77 00 
3de59 c41 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3de5d c42 99 99 99 00 
3de61 c43 AA AA AA 00 
3de65 c44 BB BB BB 00 
3de69 c45 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3de6d c46 DD DD DD 00 
3de71 c47 EE EE EE 00 
3de75 c48 FF FF FF 00 
3de79 c49 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3de7d c4a 00 14 40 00 
3de81 c4b 00 1E 60 00 
3de85 c4c 00 28 80 00 
3de89 c4d 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3de8d c4e 00 3C BF 00 
3de91 c4f 00 46 DF 00 
3de95 c50 00 50 FF 00 
3de99 c51 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3de9d c52 39 77 FF 00 
3dea1 c53 55 8A FF 00 
3dea5 c54 71 9E FF 00 
3dea9 c55 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3dead c56 AA C5 FF 00 
3deb1 c57 C6 D8 FF 00 
3deb5 c58 E3 EC FF 00 
3deb9 c59 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3debd c5a 00 00 40 00 
3dec1 c5b 00 00 60 00 
3dec5 c5c 00 00 80 00 
3dec9 c5d 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3decd c5e 00 00 BF 00 
3ded1 c5f 00 00 DF 00 
3ded5 c60 00 00 FF 00 
3ded9 c61 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3dedd c62 39 39 FF 00 
3dee1 c63 55 55 FF 00 
3dee5 c64 71 71 FF 00 
3dee9 c65 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3deed c66 AA AA FF 00 
3def1 c67 C6 C6 FF 00 
3def5 c68 E3 E3 FF 00 
3def9 c69 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3defd c6a 20 00 40 00 
3df01 c6b 30 00 60 00 
3df05 c6c 40 00 80 00 
3df09 c6d 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3df0d c6e 60 00 BF 00 
3df11 c6f 70 00 DF 00 
3df15 c70 80 00 FF 00 
3df19 c71 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3df1d c72 9C 39 FF 00 
3df21 c73 AA 55 FF 00 
3df25 c74 B8 71 FF 00 
3df29 c75 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3df2d c76 D5 AA FF 00 
3df31 c77 E3 C6 FF 00 
3df35 c78 F1 E3 FF 00 
3df39 c79 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3df3d c7a 40 00 40 00 
3df41 c7b 60 00 60 00 
3df45 c7c 80 00 80 00 
3df49 c7d 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3df4d c7e BF 00 BF 00 
3df51 c7f DF 00 DF 00 
3df55 c80 FF 00 FF 00 
3df59 c81 FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3df5d c82 FF 39 FF 00 
3df61 c83 FF 55 FF 00 
3df65 c84 FF 71 FF 00 
3df69 c85 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3df6d c86 FF AA FF 00 
3df71 c87 FF C6 FF 00 
3df75 c88 FF E3 FF 00 
3df79 c89 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3df7d c8a 40 00 20 00 
3df81 c8b 60 00 30 00 
3df85 c8c 80 00 40 00 
3df89 c8d 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3df8d c8e BF 00 60 00 
3df91 c8f DF 00 70 00 
3df95 c90 FF 00 80 00 
3df99 c91 FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3df9d c92 FF 39 9C 00 
3dfa1 c93 FF 55 AA 00 
3dfa5 c94 FF 71 B8 00 
3dfa9 c95 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3dfad c96 FF AA D5 00 
3dfb1 c97 FF C6 E3 00 
3dfb5 c98 FF E3 F1 00 
3dfb9 c99 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3dfbd c9a 40 00 00 00 
3dfc1 c9b 60 00 00 00 
3dfc5 c9c 80 00 00 00 
3dfc9 c9d 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3dfcd c9e BF 00 00 00 
3dfd1 c9f DF 00 00 00 
3dfd5 ca0 FF 00 00 00 
3dfd9 ca1 FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3dfdd ca2 FF 39 39 00 
3dfe1 ca3 FF 55 55 00 
3dfe5 ca4 FF 71 71 00 
3dfe9 ca5 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3dfed ca6 FF AA AA 00 
3dff1 ca7 FF C6 C6 00 
3dff5 ca8 FF E3 E3 00 
3dff9 ca9 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3dffd caa 40 10 00 00 
3e001 cab 60 18 00 00 
3e005 cac 80 20 00 00 
3e009 cad 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3e00d cae BF 30 00 00 
3e011 caf DF 38 00 00 
3e015 cb0 FF 40 00 00 
3e019 cb1 FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3e01d cb2 FF 6A 39 00 
3e021 cb3 FF 80 55 00 
3e025 cb4 FF 95 71 00 
3e029 cb5 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3e02d cb6 FF BF AA 00 
3e031 cb7 FF D5 C6 00 
3e035 cb8 FF EA E3 00 
3e039 cb9 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3e03d cba 40 20 00 00 
3e041 cbb 60 30 00 00 
3e045 cbc 80 40 00 00 
3e049 cbd 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3e04d cbe BF 60 00 00 
3e051 cbf DF 70 00 00 
3e055 cc0 FF 80 00 00 
3e059 cc1 FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3e05d cc2 FF 9C 39 00 
3e061 cc3 FF AA 55 00 
3e065 cc4 FF B8 71 00 
3e069 cc5 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3e06d cc6 FF D5 AA 00 
3e071 cc7 FF E3 C6 00 
3e075 cc8 FF F1 E3 00 
3e079 cc9 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3e07d cca 40 30 00 00 
3e081 ccb 60 48 00 00 
3e085 ccc 80 60 00 00 
3e089 ccd 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3e08d cce BF 90 00 00 
3e091 ccf DF A8 00 00 
3e095 cd0 FF C0 00 00 
3e099 cd1 FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3e09d cd2 FF CE 39 00 
3e0a1 cd3 FF D5 55 00 
3e0a5 cd4 FF DC 71 00 
3e0a9 cd5 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3e0ad cd6 FF EA AA 00 
3e0b1 cd7 FF F1 C6 00 
3e0b5 cd8 FF F8 E3 00 
3e0b9 cd9 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3e0bd cda 30 40 00 00 
3e0c1 cdb 48 60 00 00 
3e0c5 cdc 60 80 00 00 
3e0c9 cdd 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3e0cd cde 90 BF 00 00 
3e0d1 cdf A8 DF 00 00 
3e0d5 ce0 C0 FF 00 00 
3e0d9 ce1 C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3e0dd ce2 CE FF 39 00 
3e0e1 ce3 D5 FF 55 00 
3e0e5 ce4 DC FF 71 00 
3e0e9 ce5 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3e0ed ce6 EA FF AA 00 
3e0f1 ce7 F1 FF C6 00 
3e0f5 ce8 F8 FF E3 00 
3e0f9 ce9 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3e0fd cea 00 40 00 00 
3e101 ceb 00 60 00 00 
3e105 cec 00 80 00 00 
3e109 ced 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3e10d cee 00 BF 00 00 
3e111 cef 00 DF 00 00 
3e115 cf0 00 FF 00 00 
3e119 cf1 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3e11d cf2 39 FF 39 00 
3e121 cf3 55 FF 55 00 
3e125 cf4 71 FF 71 00 
3e129 cf5 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3e12d cf6 AA FF AA 00 
3e131 cf7 C6 FF C6 00 
3e135 cf8 E3 FF E3 00 
3e139 cf9 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3e13d cfa 00 40 14 00 
3e141 cfb 00 60 1E 00 
3e145 cfc 00 80 28 00 
3e149 cfd 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3e14d cfe 00 BF 3C 00 
3e151 cff 00 DF 46 00 
3e155 d00 00 FF 50 00 
3e159 d01 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3e15d d02 39 FF 77 00 
3e161 d03 55 FF 8A 00 
3e165 d04 71 FF 9E 00 
3e169 d05 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3e16d d06 AA FF C5 00 
3e171 d07 C6 FF D8 00 
3e175 d08 E3 FF EC 00 
3e179 d09 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3e17d d0a 00 40 28 00 
3e181 d0b 00 60 3C 00 
3e185 d0c 00 80 50 00 
3e189 d0d 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3e18d d0e 00 BF 78 00 
3e191 d0f 00 DF 8C 00 
3e195 d10 00 FF A0 00 
3e199 d11 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3e19d d12 39 FF B5 00 
3e1a1 d13 55 FF C0 00 
3e1a5 d14 71 FF CA 00 
3e1a9 d15 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3e1ad d16 AA FF DF 00 
3e1b1 d17 C6 FF EA 00 
3e1b5 d18 E3 FF F4 00 
3e1b9 d19 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3e1bd d1a 00 40 40 00 
3e1c1 d1b 00 60 60 00 
3e1c5 d1c 00 80 80 00 
3e1c9 d1d 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3e1cd d1e 00 BF BF 00 
3e1d1 d1f 00 DF DF 00 
3e1d5 d20 00 FF FF 00 
3e1d9 d21 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3e1dd d22 39 FF FF 00 
3e1e1 d23 55 FF FF 00 
3e1e5 d24 71 FF FF 00 
3e1e9 d25 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3e1ed d26 AA FF FF 00 
3e1f1 d27 C6 FF FF 00 
3e1f5 d28 E3 FF FF 00 
3e1f9 d29 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3e1fd d2a 00 28 40 00 
3e201 d2b 00 3C 60 00 
3e205 d2c 00 50 80 00 
3e209 d2d 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3e20d d2e 00 78 BF 00 
3e211 d2f 00 8C DF 00 
3e215 d30 00 A0 FF 00 
3e219 d31 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3e21d d32 39 B5 FF 00 
3e221 d33 55 C0 FF 00 
3e225 d34 71 CA FF 00 
3e229 d35 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3e22d d36 AA DF FF 00 
3e231 d37 C6 EA FF 00 
3e235 d38 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3e238 d39 00 00 00 00 
3e23c d3a 00          | ataripalette2  file "ataripalettep2.def"
3e23d d3a 11 11 11 00 
3e241 d3b 22 22 22 00 
3e245 d3c 33 33 33 00 
3e249 d3d 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3e24d d3e 55 55 55 00 
3e251 d3f 66 66 66 00 
3e255 d40 77 77 77 00 
3e259 d41 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3e25d d42 99 99 99 00 
3e261 d43 AA AA AA 00 
3e265 d44 BB BB BB 00 
3e269 d45 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3e26d d46 DD DD DD 00 
3e271 d47 EE EE EE 00 
3e275 d48 FF FF FF 00 
3e279 d49 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3e27d d4a 00 14 40 00 
3e281 d4b 00 1E 60 00 
3e285 d4c 00 28 80 00 
3e289 d4d 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3e28d d4e 00 3C BF 00 
3e291 d4f 00 46 DF 00 
3e295 d50 00 50 FF 00 
3e299 d51 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3e29d d52 39 77 FF 00 
3e2a1 d53 55 8A FF 00 
3e2a5 d54 71 9E FF 00 
3e2a9 d55 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3e2ad d56 AA C5 FF 00 
3e2b1 d57 C6 D8 FF 00 
3e2b5 d58 E3 EC FF 00 
3e2b9 d59 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3e2bd d5a 00 00 40 00 
3e2c1 d5b 00 00 60 00 
3e2c5 d5c 00 00 80 00 
3e2c9 d5d 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3e2cd d5e 00 00 BF 00 
3e2d1 d5f 00 00 DF 00 
3e2d5 d60 00 00 FF 00 
3e2d9 d61 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3e2dd d62 39 39 FF 00 
3e2e1 d63 55 55 FF 00 
3e2e5 d64 71 71 FF 00 
3e2e9 d65 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3e2ed d66 AA AA FF 00 
3e2f1 d67 C6 C6 FF 00 
3e2f5 d68 E3 E3 FF 00 
3e2f9 d69 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3e2fd d6a 20 00 40 00 
3e301 d6b 30 00 60 00 
3e305 d6c 40 00 80 00 
3e309 d6d 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3e30d d6e 60 00 BF 00 
3e311 d6f 70 00 DF 00 
3e315 d70 80 00 FF 00 
3e319 d71 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3e31d d72 9C 39 FF 00 
3e321 d73 AA 55 FF 00 
3e325 d74 B8 71 FF 00 
3e329 d75 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3e32d d76 D5 AA FF 00 
3e331 d77 E3 C6 FF 00 
3e335 d78 F1 E3 FF 00 
3e339 d79 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3e33d d7a 40 00 40 00 
3e341 d7b 60 00 60 00 
3e345 d7c 80 00 80 00 
3e349 d7d 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3e34d d7e BF 00 BF 00 
3e351 d7f DF 00 DF 00 
3e355 d80 FF 00 FF 00 
3e359 d81 FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3e35d d82 FF 39 FF 00 
3e361 d83 FF 55 FF 00 
3e365 d84 FF 71 FF 00 
3e369 d85 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3e36d d86 FF AA FF 00 
3e371 d87 FF C6 FF 00 
3e375 d88 FF E3 FF 00 
3e379 d89 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3e37d d8a 40 00 20 00 
3e381 d8b 60 00 30 00 
3e385 d8c 80 00 40 00 
3e389 d8d 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3e38d d8e BF 00 60 00 
3e391 d8f DF 00 70 00 
3e395 d90 FF 00 80 00 
3e399 d91 FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3e39d d92 FF 39 9C 00 
3e3a1 d93 FF 55 AA 00 
3e3a5 d94 FF 71 B8 00 
3e3a9 d95 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3e3ad d96 FF AA D5 00 
3e3b1 d97 FF C6 E3 00 
3e3b5 d98 FF E3 F1 00 
3e3b9 d99 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3e3bd d9a 40 00 00 00 
3e3c1 d9b 60 00 00 00 
3e3c5 d9c 80 00 00 00 
3e3c9 d9d 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3e3cd d9e BF 00 00 00 
3e3d1 d9f DF 00 00 00 
3e3d5 da0 FF 00 00 00 
3e3d9 da1 FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3e3dd da2 FF 39 39 00 
3e3e1 da3 FF 55 55 00 
3e3e5 da4 FF 71 71 00 
3e3e9 da5 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3e3ed da6 FF AA AA 00 
3e3f1 da7 FF C6 C6 00 
3e3f5 da8 FF E3 E3 00 
3e3f9 da9 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3e3fd daa 40 10 00 00 
3e401 dab 60 18 00 00 
3e405 dac 80 20 00 00 
3e409 dad 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3e40d dae BF 30 00 00 
3e411 daf DF 38 00 00 
3e415 db0 FF 40 00 00 
3e419 db1 FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3e41d db2 FF 6A 39 00 
3e421 db3 FF 80 55 00 
3e425 db4 FF 95 71 00 
3e429 db5 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3e42d db6 FF BF AA 00 
3e431 db7 FF D5 C6 00 
3e435 db8 FF EA E3 00 
3e439 db9 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3e43d dba 40 20 00 00 
3e441 dbb 60 30 00 00 
3e445 dbc 80 40 00 00 
3e449 dbd 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3e44d dbe BF 60 00 00 
3e451 dbf DF 70 00 00 
3e455 dc0 FF 80 00 00 
3e459 dc1 FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3e45d dc2 FF 9C 39 00 
3e461 dc3 FF AA 55 00 
3e465 dc4 FF B8 71 00 
3e469 dc5 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3e46d dc6 FF D5 AA 00 
3e471 dc7 FF E3 C6 00 
3e475 dc8 FF F1 E3 00 
3e479 dc9 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3e47d dca 40 30 00 00 
3e481 dcb 60 48 00 00 
3e485 dcc 80 60 00 00 
3e489 dcd 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3e48d dce BF 90 00 00 
3e491 dcf DF A8 00 00 
3e495 dd0 FF C0 00 00 
3e499 dd1 FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3e49d dd2 FF CE 39 00 
3e4a1 dd3 FF D5 55 00 
3e4a5 dd4 FF DC 71 00 
3e4a9 dd5 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3e4ad dd6 FF EA AA 00 
3e4b1 dd7 FF F1 C6 00 
3e4b5 dd8 FF F8 E3 00 
3e4b9 dd9 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3e4bd dda 30 40 00 00 
3e4c1 ddb 48 60 00 00 
3e4c5 ddc 60 80 00 00 
3e4c9 ddd 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3e4cd dde 90 BF 00 00 
3e4d1 ddf A8 DF 00 00 
3e4d5 de0 C0 FF 00 00 
3e4d9 de1 C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3e4dd de2 CE FF 39 00 
3e4e1 de3 D5 FF 55 00 
3e4e5 de4 DC FF 71 00 
3e4e9 de5 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3e4ed de6 EA FF AA 00 
3e4f1 de7 F1 FF C6 00 
3e4f5 de8 F8 FF E3 00 
3e4f9 de9 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3e4fd dea 00 40 00 00 
3e501 deb 00 60 00 00 
3e505 dec 00 80 00 00 
3e509 ded 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3e50d dee 00 BF 00 00 
3e511 def 00 DF 00 00 
3e515 df0 00 FF 00 00 
3e519 df1 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3e51d df2 39 FF 39 00 
3e521 df3 55 FF 55 00 
3e525 df4 71 FF 71 00 
3e529 df5 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3e52d df6 AA FF AA 00 
3e531 df7 C6 FF C6 00 
3e535 df8 E3 FF E3 00 
3e539 df9 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3e53d dfa 00 40 14 00 
3e541 dfb 00 60 1E 00 
3e545 dfc 00 80 28 00 
3e549 dfd 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3e54d dfe 00 BF 3C 00 
3e551 dff 00 DF 46 00 
3e555 e00 00 FF 50 00 
3e559 e01 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3e55d e02 39 FF 77 00 
3e561 e03 55 FF 8A 00 
3e565 e04 71 FF 9E 00 
3e569 e05 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3e56d e06 AA FF C5 00 
3e571 e07 C6 FF D8 00 
3e575 e08 E3 FF EC 00 
3e579 e09 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3e57d e0a 00 40 28 00 
3e581 e0b 00 60 3C 00 
3e585 e0c 00 80 50 00 
3e589 e0d 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3e58d e0e 00 BF 78 00 
3e591 e0f 00 DF 8C 00 
3e595 e10 00 FF A0 00 
3e599 e11 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3e59d e12 39 FF B5 00 
3e5a1 e13 55 FF C0 00 
3e5a5 e14 71 FF CA 00 
3e5a9 e15 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3e5ad e16 AA FF DF 00 
3e5b1 e17 C6 FF EA 00 
3e5b5 e18 E3 FF F4 00 
3e5b9 e19 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3e5bd e1a 00 40 40 00 
3e5c1 e1b 00 60 60 00 
3e5c5 e1c 00 80 80 00 
3e5c9 e1d 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3e5cd e1e 00 BF BF 00 
3e5d1 e1f 00 DF DF 00 
3e5d5 e20 00 FF FF 00 
3e5d9 e21 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3e5dd e22 39 FF FF 00 
3e5e1 e23 55 FF FF 00 
3e5e5 e24 71 FF FF 00 
3e5e9 e25 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3e5ed e26 AA FF FF 00 
3e5f1 e27 C6 FF FF 00 
3e5f5 e28 E3 FF FF 00 
3e5f9 e29 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3e5fd e2a 00 28 40 00 
3e601 e2b 00 3C 60 00 
3e605 e2c 00 50 80 00 
3e609 e2d 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3e60d e2e 00 78 BF 00 
3e611 e2f 00 8C DF 00 
3e615 e30 00 A0 FF 00 
3e619 e31 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3e61d e32 39 B5 FF 00 
3e621 e33 55 C0 FF 00 
3e625 e34 71 CA FF 00 
3e629 e35 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3e62d e36 AA DF FF 00 
3e631 e37 C6 EA FF 00 
3e635 e38 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3e638 e39             | 
3e638 e39             | '**********************************************************************************
3e638 e39             | '
3e638 e39             | '        Timings and colors definitions
3e638 e39             | '
3e638 e39             | '**********************************************************************************
3e638 e39             | 
3e638 e39             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3e638 e39 08 00 00 00 
3e63c e3a 3C 00 00 00 
3e640 e3b 08 00 00 00 
3e644 e3c 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3e648 e3d 07 00 00 00 
3e64c e3e 04 00 00 00 
3e650 e3f 01 00 00 00 
3e654 e40 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3e658 e41 58 02 00 00 
3e65c e42 20 9E 4B 14 
3e660 e43 FB A8 9E 01 
3e664 e44 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3e668 e45 00 00 00 00 
3e66c e46 C0 00 00 00 
3e670 e47 00 00 00 00 
3e674 e48 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e678 e49             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3e678 e49 00 75 C7 97 
3e67c e4a 27 47 F6 0A 
3e680 e4b 05 79 CB 9B 
3e684 e4c 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3e688 e4d             | 
3e688 e4d             | ''--------  Initialization  ----------------------------------------------------------------
3e688 e4d             | 
3e688 e4d 28 0C 64 FD | hdmi            setq    #6
3e68c e4e 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3e690 e4f 28 10 64 FD |                 setq    #8
3e694 e50 D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3e698 e51             | 
3e698 e51 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3e69c e52 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3e6a0 e53 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3e6a4 e54 D6 C6 01 F1 |                 add     t1,hbase
3e6a8 e55 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3e6ac e56 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3e6b0 e57 7B 0B 80 5F 
3e6b4 e58 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3e6b8 e59 66 66 86 FF 
3e6bc e5a 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3e6c0 e5b             | '
3e6c0 e5b D6 C6 01 F6 |                 mov 	t1,hbase			   '
3e6c4 e5c 11 C6 65 F0 |                 shl 	t1,#17                             '
3e6c8 e5d E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3e6cc e5e 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3e6d0 e5f             | 
3e6d0 e5f 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3e6d4 e60 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3e6d8 e61 E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3e6dc e62             | 
3e6dc e62             | ''--------  frame rendering main loop  ---------------------------------------------------
3e6dc e62             | 
3e6dc e62 28 06 64 FD | p101            setq 	#3
3e6e0 e63 00 A5 05 FB | 		rdlong  vblankptr,ptra
3e6e4 e64 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3e6e8 e65 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3e6ec e66 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3e6f0 e67 00 A0 05 F6 |                 mov     dlinum, #0
3e6f4 e68 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3e6f8 e69 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3e6fc e6a             | 
3e6fc e6a             | 
3e6fc e6a 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3e700 e6b 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3e704 e6c ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3e708 e6d             |                 
3e708 e6d             | 
3e708 e6d             | 
3e708 e6d             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3e708 e6d             |   
3e708 e6d 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3e70c e6e 29 FE 65 3D |          if_nc  setq2   #255
3e710 e6f D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3e714 e70             | 
3e714 e70             | '' -----   up porch (before the picture)
3e714 e70             | 
3e714 e70 C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3e718 e71 C1 C4 01 F6 |                 mov     hsync1,sync_001	
3e71c e72 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3e720 e73 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3e724 e74             |  
3e724 e74             |    
3e724 e74             |  
3e724 e74 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3e728 e75 E2 8C B1 FC |                 xzero   m_sn,hsync1
3e72c e76 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3e730 e77 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3e734 e78 E1 90 C1 FC |                 xcont   m_vi,hsync0
3e738 e79 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3e73c e7a             | 
3e73c e7a E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3e740 e7b E2 8C B1 FC |                 xzero   m_sn,hsync1
3e744 e7c 48 00 B0 FD | 		call    #dli
3e748 e7d E1 8E C1 FC |                 xcont   m_bv,hsync0     
3e74c e7e E1 90 C1 FC |                 xcont   m_vi,hsync0
3e750 e7f 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3e754 e80             |                 	
3e754 e80             |                 
3e754 e80             | 
3e754 e80             |  
3e754 e80             | '' ------- the main screen drawing starts here
3e754 e80             | 
3e754 e80 E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3e758 e81 E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3e75c e82 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3e760 e83 E1 8E C1 FC |                 xcont   m_bv,hsync0
3e764 e84 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3e768 e85 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3e76c e86 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3e770 e87             |               
3e770 e87             | 
3e770 e87 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3e774 e88 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3e778 e89             | 
3e778 e89             | ' ---------------- All visible lines displayed now, start vblank  
3e778 e89             | 
3e778 e89 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3e77c e8a 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3e780 e8b C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3e784 e8c C3 C4 01 F6 |                 mov     hsync1,sync_223
3e788 e8d 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3e78c e8e 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3e790 e8f             | 
3e790 e8f             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3e790 e8f             | 
3e790 e8f             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3e790 e8f             | 
3e790 e8f 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3e794 e90             | 
3e794 e90 DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3e798 e91 04 B8 05 A1 |     if_z        add     dlptr2,#4
3e79c e92 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3e7a0 e93             | 
3e7a0 e93 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3e7a4 e94 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3e7a8 e95 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3e7ac e96 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3e7b0 e97 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3e7b4 e98             | 
3e7b4 e98 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3e7b8 e99 DD C6 41 F8 |                 getnib  t1,dl,#0
3e7bc e9a 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3e7c0 e9b 70 00 90 AD |     if_z        jmp     #preload
3e7c4 e9c 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3e7c8 e9d 94 00 90 AD |     if_z        jmp     #preload2
3e7cc e9e 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3e7d0 e9f 0C 00 90 AD |     if_z        jmp     #p390
3e7d4 ea0 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3e7d8 ea1 28 00 90 AD |     if_z        jmp     #p391  
3e7dc ea2             | 
3e7dc ea2 2D 00 64 FD | p308            ret
3e7e0 ea3             |    
3e7e0 ea3 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3e7e4 ea4 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3e7e8 ea5 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3e7ec ea6 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3e7f0 ea7 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3e7f4 ea8 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3e7f8 ea9 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3e7fc eaa 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3e800 eab 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3e804 eac             |  
3e804 eac             | '' --------  Reload palette. To do 
3e804 eac             | 
3e804 eac E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3e808 ead 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3e80c eae 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3e810 eaf 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3e814 eb0 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3e818 eb1 E0 00 00 FB |         	rdlong  $000, framebuf2         	
3e81c eb2 70 FF 9F FD |         	jmp     #dli                
3e820 eb3             |       
3e820 eb3             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3e820 eb3             | 
3e820 eb3             | 
3e820 eb3             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3e820 eb3             | 
3e820 eb3 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3e824 eb4 E2 8C B1 FC |                 xzero   m_sn,hsync1
3e828 eb5 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3e82c eb6 E1 90 C1 FC |                 xcont   m_vi,hsync0
3e830 eb7 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3e834 eb8             |         
3e834 eb8             | '' -------------- Preload a line from PSRAM        
3e834 eb8             |         
3e834 eb8 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3e838 eb9 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3e83c eba DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3e840 ebb DE B4 01 F6 |                 mov     buf1,buf1c
3e844 ebc 03 A0 05 F7 |                 incmod  dlinum,#3
3e848 ebd             | 
3e848 ebd 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3e84c ebe 32 B7 01 F6 |                 mov     buf2,a1024
3e850 ebf E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3e854 ec0 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3e858 ec1 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3e85c ec2 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3e860 ec3             |  
3e860 ec3             |  
3e860 ec3             | preload2      '  incmod  dlinum,#3
3e860 ec3 04 C0 45 F0 |                 shr 	framebuf2,#4
3e864 ec4 ED B2 01 F6 |                 mov 	cmd,affffffff
3e868 ec5 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3e86c ec6 28 02 64 FD |                 setq	#1
3e870 ec7 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3e874 ec8             |                 
3e874 ec8             | 
3e874 ec8             | '' -------------- Draw sprites
3e874 ec8             | 
3e874 ec8 CF 5C 02 F6 | sprite          mov t8,frames
3e878 ec9 10 5C 0E F5 | 		and t8,#16 wz
3e87c eca 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
3e880 ecb 10 48 06 A6 | 	if_z    mov spritenum, #16	
3e884 ecc             | 		
3e884 ecc             | 
3e884 ecc 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3e888 ecd 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3e88c ece EF 56 96 F9 |                 alts    t5,#sprite1xy
3e890 ecf 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3e894 ed0 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3e898 ed1 EF 56 96 F9 |                 alts    t5,#sprite1xy
3e89c ed2 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3e8a0 ed3 0F 4C 66 F7 |                 signx	sprite_x,#15
3e8a4 ed4 F0 56 96 F9 |                 alts    t5,#sprite1wh
3e8a8 ed5 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3e8ac ed6 01 52 86 F1 |                 sub     sprite_h,#1
3e8b0 ed7 F0 56 96 F9 |                 alts    t5,#sprite1wh
3e8b4 ed8 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3e8b8 ed9             | 
3e8b8 ed9             | 
3e8b8 ed9 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3e8bc eda BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3e8c0 edb 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3e8c4 edc B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3e8c8 edd 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3e8cc ede AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3e8d0 edf 00 5E 06 F6 |                 mov 	t9,#0
3e8d4 ee0 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3e8d8 ee1 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3e8dc ee2 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3e8e0 ee3             |      
3e8e0 ee3 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3e8e4 ee4 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3e8e8 ee5 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3e8ec ee6 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3e8f0 ee7 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3e8f4 ee8             |                 
3e8f4 ee8 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3e8f8 ee9 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3e8fc eea DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3e900 eeb             |   		
3e900 eeb 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3e904 eec 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3e908 eed             | 
3e908 eed 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3e90c eee 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3e910 eef 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3e914 ef0             |  
3e914 ef0 EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3e918 ef1 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3e91c ef2 10 00 90 CD |      if_c 	jmp     #p899		
3e920 ef3             | 	
3e920 ef3             | 	
3e920 ef3 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3e924 ef4 28 CD 01 F1 | 		add	t4,sprite_w
3e928 ef5 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3e92c ef6             | 
3e92c ef6 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3e930 ef7             | 
3e930 ef7 28 59 02 F6 | p899		mov 	t6,sprite_w
3e934 ef8 01 58 86 F1 | 	 	sub     t6,#1
3e938 ef9 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3e93c efa             | 
3e93c efa 28 58 62 FD |                 setq   	t6
3e940 efb E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3e944 efc 28 5D 02 F6 |                 mov t8,sprite_w
3e948 efd 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3e94c efe 24 00 90 AD |         if_z    jmp #p898
3e950 eff             |          
3e950 eff             |         
3e950 eff 70 5F 06 F6 |                 mov  t9,#368
3e954 f00 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3e958 f01             | 
3e958 f01 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3e95c f02 08 5C 06 FA |                 mul t8,#8				' bits to shr
3e960 f03 FF FF 7F FF 
3e964 f04 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3e968 f05 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3e96c f06 00 5E 8E F9 |                 altd t9,#0				' and mask 
3e970 f07 2D 01 00 F5 |                 and 0-0, t7
3e974 f08             |                
3e974 f08             | 
3e974 f08 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3e978 f09 E5 E0 7A FA |                 wmlong 368,t3				
3e97c f0a             |                 
3e97c f0a C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3e980 f0b 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3e984 f0c 2D 00 64 FD |                 ret
3e988 f0d             | 	
3e988 f0d             | 	
3e988 f0d             |                
3e988 f0d             |  
3e988 f0d             | '' -------------- Graphics line ------------------------------------------------------------
3e988 f0d             |  
3e988 f0d             | 
3e988 f0d             | '' consts and vars
3e988 f0d             | 
3e988 f0d 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3e98c f0e AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3e990 f0f 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3e994 f10 AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3e998 f11             | 
3e998 f11 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3e99c f12             | 
3e99c f12             | '------ these longs will be set by setmode function
3e99c f12             | 
3e99c f12 00 00 00 00 | m_bs            long    0        'blanks before sync
3e9a0 f13 00 00 00 00 | m_sn            long    0        'sync
3e9a4 f14 00 00 00 00 | m_bv            long    0        'blanks before visible
3e9a8 f15 00 00 00 00 | m_vi            long    0        'visible pixels #
3e9ac f16             | 'm_border        long    0        'left/right borders
3e9ac f16 00 00 00 00 | i_upporch       long    0        'up porch lines
3e9b0 f17 00 00 00 00 | i_vsync         long    0        'vsync lines
3e9b4 f18 00 00 00 00 | i_downporch     long    0        'down porch lines
3e9b8 f19 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3e9bc f1a 00 00 00 00 | i_totalvis      long    0
3e9c0 f1b             | 
3e9c0 f1b             | '-------------------------------------
3e9c0 f1b             |  
3e9c0 f1b 00 00 00 00 | linenum         long    0
3e9c4 f1c 00 00 00 00 | frames          long    0
3e9c8 f1d 00 00 00 00 | dlinum long 0
3e9cc f1e 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3e9d0 f1f             | 
3e9d0 f1f 00 00 00 00 | vblankptr       long    0
3e9d4 f20 00 00 00 00 | modeptr         long    0
3e9d8 f21 00 00 00 00 | paletteptr      long    0
3e9dc f22 00 00 00 00 | dlptr           long    0
3e9e0 f23 01 00 00 00 | hbase           long    1
3e9e4 f24 00 00 00 00 | mailbox         long    0
3e9e8 f25 00 00 00 00 | spriteptr          long 0
3e9ec f26             | 
3e9ec f26 00 00 00 00 | cmd             long    0
3e9f0 f27 00 B0 07 00 | buf1            long    $80000-16384-4096
3e9f4 f28 00 04 00 00 | buf2            long    1024
3e9f8 f29 01 00 00 00 | dlptr2          long    1
3e9fc f2a 01 00 00 00 | dl              long    1
3ea00 f2b             | 
3ea00 f2b 00 00 00 00 | buf1c long 0
3ea04 f2c 00 B0 07 00 | buf1d            long    $80000-16384-4096
3ea08 f2d 01 00 00 00 | framebuf2       long    1
3ea0c f2e 01 00 00 00 | hsync0          long    1
3ea10 f2f 01 00 00 00 | hsync1          long    1
3ea14 f30             | 
3ea14 f30 01 00 00 00 | t1              long    1
3ea18 f31 00 00 00 00 | t2 long 0
3ea1c f32 00 00 00 00 | t3 long 0
3ea20 f33 00 00 00 00 | t4 long 0
3ea24 f34             | 
3ea24 f34 00 00 00 00 | rcnt            long    0  'dl repeat count
3ea28 f35 00 00 00 00 | rcnt2           long    0
3ea2c f36 00 00 00 00 | rcnt2a          long    0
3ea30 f37 00 00 00 00 | roffset         long    0
3ea34 f38 00 00 00 00 | rdl             long    0  'dl repeat line
3ea38 f39 00 00 00 00 | dlc             long    0  'dl command
3ea3c f3a             | 
3ea3c f3a FF FF FF FF | affffffff       long    $ffffffff
3ea40 f3b 00 00 00 00 | sprite1pointer long 0
3ea44 f3c 00 00 00 00 | sprite1xy      long 0
3ea48 f3d 00 00 00 00 | sprite1wh      long 0
3ea4c f3e 00 00 00 00 | sprite2pointer long 0
3ea50 f3f 00 00 00 00 | sprite2xy      long 0
3ea54 f40 00 00 00 00 | sprite2wh      long 0
3ea58 f41 00 00 00 00 | sprite3pointer long 0
3ea5c f42 00 00 00 00 | sprite3xy      long 0
3ea60 f43 00 00 00 00 | sprite3wh      long 0
3ea64 f44 00 00 00 00 | sprite4pointer long 0
3ea68 f45 00 00 00 00 | sprite4xy      long 0
3ea6c f46 00 00 00 00 | sprite4wh      long 0
3ea70 f47 00 00 00 00 | sprite5pointer long 0
3ea74 f48 00 00 00 00 | sprite5xy      long 0
3ea78 f49 00 00 00 00 | sprite5wh      long 0
3ea7c f4a 00 00 00 00 | sprite6pointer long 0
3ea80 f4b 00 00 00 00 | sprite6xy      long 0
3ea84 f4c 00 00 00 00 | sprite6wh      long 0
3ea88 f4d 00 00 00 00 | sprite7pointer long 0
3ea8c f4e 00 00 00 00 | sprite7xy      long 0
3ea90 f4f 00 00 00 00 | sprite7wh      long 0
3ea94 f50 00 00 00 00 | sprite8pointer long 0
3ea98 f51 00 00 00 00 | sprite8xy      long 0
3ea9c f52 00 00 00 00 | sprite8wh      long 0
3eaa0 f53 00 00 00 00 | sprite9pointer long 0
3eaa4 f54 00 00 00 00 | sprite9xy      long 0
3eaa8 f55 00 00 00 00 | sprite9wh      long 0
3eaac f56 00 00 00 00 | sprite10pointer long 0
3eab0 f57 00 00 00 00 | sprite10xy      long 0
3eab4 f58 00 00 00 00 | sprite10wh      long 0
3eab8 f59 00 00 00 00 | sprite11pointer long 0
3eabc f5a 00 00 00 00 | sprite11xy      long 0
3eac0 f5b 00 00 00 00 | sprite11wh      long 0
3eac4 f5c 00 00 00 00 | sprite12pointer long 0
3eac8 f5d 00 00 00 00 | sprite12xy      long 0
3eacc f5e 00 00 00 00 | sprite12wh      long 0
3ead0 f5f 00 00 00 00 | sprite13pointer long 0
3ead4 f60 00 00 00 00 | sprite13xy      long 0
3ead8 f61 00 00 00 00 | sprite13wh      long 0
3eadc f62 00 00 00 00 | sprite14pointer long 0
3eae0 f63 00 00 00 00 | sprite14xy      long 0
3eae4 f64 00 00 00 00 | sprite14wh      long 0
3eae8 f65 00 00 00 00 | sprite15pointer long 0
3eaec f66 00 00 00 00 | sprite15xy      long 0
3eaf0 f67 00 00 00 00 | sprite15wh      long 0
3eaf4 f68 00 00 00 00 | sprite16pointer long 0
3eaf8 f69 00 00 00 00 | sprite16xy      long 0
3eafc f6a 00 00 00 00 | sprite16wh      long 0
3eb00 f6b 00 00 00 00 | sprite17pointer long 0
3eb04 f6c 00 00 00 00 | sprite17xy      long 0
3eb08 f6d 00 00 00 00 | sprite17wh      long 0
3eb0c f6e 00 00 00 00 | sprite18pointer long 0
3eb10 f6f 00 00 00 00 | sprite18xy      long 0
3eb14 f70 00 00 00 00 | sprite18wh      long 0
3eb18 f71 00 00 00 00 | spritenum long 0
3eb1c f72             | 
3eb1c f72 00 00 00 00 | spriteline long 0
3eb20 f73 84 03 00 00 | sprite_x long 900
3eb24 f74 00 00 00 00 | sprite_y long 0
3eb28 f75 10 00 00 00 | sprite_w long 16
3eb2c f76 40 00 00 00 | sprite_h long 64
3eb30 f77 00 00 00 00 | l2 long 0
3eb34 f78 00 00 00 00 | t5 long 0
3eb38 f79 00 00 00 00 | t6 long 0
3eb3c f7a 00 00 00 00 | t7 long 0
3eb40 f7b 00 00 00 00 | t8 long 0
3eb44 f7c 00 00 00 00 | t9 long 0
3eb48 f7d 00 00 00 00 | preloadaddr long 0
3eb4c f7e 00 00 00 00 | preloadlineaddr long 0
3eb50 f7f 00 04 00 00 | a1024 long 1024
3eb54 f80             | 
3eb54 f80 E0 03 00 00 | aa long 992
3eb58 f81 FF 03 00 00 | a1023 long 1023
3eb5c f82 00 10 00 00 | a4096 long 4096
3eb60 f83             |  fit 368
3eb60 f83             | _psram_spin2_dat_
3eb60 f83 00 00 00 00 
      ...             
3ec58 fc1 00 00 00 00 
3ec5c fc2 00 00 00 00 |     listdata long 0[8*8]
3ec60 fc3             |             orgh
3ec60                 | 
3ec60                 | ' driver state
3ec60     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3ec64     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3ec68                 | 
3ec68                 | ' delay profile
3ec68     07 00 00 00 
3ec6c     00 CF 7B 05 
3ec70     80 D1 F0 08 
3ec74     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3ec78     80 C4 60 0F 
3ec7c     80 39 7A 12 
3ec80     40 2D D9 13 
3ec84     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3ec88                 | 
3ec88                 | ' data to be passed to driver when starting it
3ec88                 | startupData
3ec88     00 00 00 00 |     long    0           ' current frequency
3ec8c     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3ec90     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3ec94     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3ec98     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3ec9c     A8 EC 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3eca0     28 ED 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3eca4     48 ED 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3eca8                 | 
3eca8                 | ' data for memory
3eca8                 | deviceData
3eca8                 |     ' 16 bank parameters follow (16MB per bank)
3eca8     00 00 00 00 
      ...             
3ece0     00 00 00 00 
3ece4     00 00 00 00 |     long    0[16]                               ' banks 0-15
3ece8                 |     ' 16 banks of pin parameters follow
3ece8     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3ecec     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3ecf0     FF FF FF FF 
      ...             
3ed20     FF FF FF FF 
3ed24     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3ed28                 | 
3ed28                 | ' data for COG polling
3ed28                 | qosData 
3ed28     00 00 FF FF 
3ed2c     00 00 FF FF 
3ed30     00 00 FF FF 
3ed34     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3ed38     00 00 FF FF 
3ed3c     00 00 FF FF 
3ed40     00 00 FF FF 
3ed44     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3ed48                 |     
3ed48                 | ' mailbox storage
3ed48                 | 
3ed48                 | mailboxes
3ed48     00 00 00 00 
      ...             
3eda0     00 00 00 00 
3eda4     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3eda8                 | 	alignl
3eda8                 | _psram16drv_spin2_dat_
3eda8                 |                             orgh
3eda8     00 00 00 00 
      ...             
3edc0     00 00 00 00 
3edc4     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3edc8                 | 
3edc8                 | driver_start
3edc8                 |                             org
3edc8 000             | '..................................................................................................
3edc8 000             | ' Memory layout for COG RAM once operational:
3edc8 000             | '
3edc8 000             | '  COG RAM address      Usage
3edc8 000             | '  ---------------      ----
3edc8 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3edc8 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3edc8 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3edc8 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3edc8 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3edc8 000             | '  ~$198-$1F3           State and register variables
3edc8 000             | '
3edc8 000             | ' Also during driver COG startup:
3edc8 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3edc8 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3edc8 000             | '..................................................................................................
3edc8 000             |                             
3edc8 000             | ' Mailbox storage after vector initialization
3edc8 000             | 
3edc8 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3edcc 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3edd0 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3edd4 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3edd8 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3eddc 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3ede0 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3ede4 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3ede8 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3edec 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3edf0 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3edf4 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3edf8 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3edfc 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3ee00 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3ee04 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3ee08 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3ee0c 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3ee10 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3ee14 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3ee18 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3ee1c 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3ee20 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3ee24 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3ee28 018             | 
3ee28 018             | ' Mailbox parameter addresses per COG once patched
3ee28 018             |                             
3ee28 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3ee2c 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3ee30 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3ee34 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3ee38 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3ee3c 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3ee40 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3ee44 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3ee48 020             | 
3ee48 020             | '..................................................................................................
3ee48 020             | ' Per COG request and state setup and service branching
3ee48 020             |         
3ee48 020             | cog0                 
3ee48 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3ee4c 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3ee50 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3ee54 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3ee58 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3ee5c 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3ee60 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3ee64 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3ee68 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3ee6c 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3ee70 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3ee74 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3ee78 02c             | cog1                        
3ee78 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3ee7c 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3ee80 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3ee84 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3ee88 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3ee8c 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3ee90 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3ee94 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3ee98 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3ee9c 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3eea0 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3eea4 037 33 CA 63 FD |                             execf   request-0               'jump to service
3eea8 038             | cog2                         
3eea8 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3eeac 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3eeb0 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3eeb4 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3eeb8 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3eebc 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3eec0 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3eec4 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3eec8 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3eecc 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3eed0 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3eed4 043 33 CA 63 FD |                             execf   request-0               'jump to service
3eed8 044             | cog3                        
3eed8 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3eedc 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3eee0 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3eee4 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3eee8 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3eeec 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3eef0 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3eef4 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3eef8 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3eefc 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3ef00 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3ef04 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3ef08 050             | cog4                        
3ef08 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3ef0c 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3ef10 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3ef14 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3ef18 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3ef1c 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3ef20 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3ef24 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3ef28 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3ef2c 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3ef30 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3ef34 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3ef38 05c             | cog5                        
3ef38 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3ef3c 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3ef40 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3ef44 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3ef48 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3ef4c 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3ef50 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3ef54 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3ef58 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3ef5c 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3ef60 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3ef64 067 33 CA 63 FD |                             execf   request-0               'jump to service
3ef68 068             | cog6                        
3ef68 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3ef6c 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3ef70 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3ef74 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3ef78 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3ef7c 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3ef80 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3ef84 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3ef88 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3ef8c 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3ef90 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3ef94 073 33 CA 63 FD |                             execf   request-0               'jump to service
3ef98 074             | cog7                        
3ef98 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3ef9c 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3efa0 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3efa4 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3efa8 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3efac 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3efb0 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3efb4 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3efb8 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3efbc 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3efc0 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3efc4 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3efc8 080             |                             fit     128
3efc8 080             | 
3efc8 080             |                             fit     128
3efc8 080             | pad                         long    0[128-$]                'align init code to $80
3efc8 080             | 
3efc8 080             | '..................................................................................................
3efc8 080             | 
3efc8 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3efc8 080             | 
3efc8 080             | init                        
3efc8 080             |                             ' get driver scratch long address in hub
3efc8 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3efcc 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3efd0 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3efd4 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3efd8 084             |                     
3efd8 084             |                             ' read in the additional LUT RAM code
3efd8 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3efdc 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3efe0 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3efe4 087             | 
3efe4 087             |                             ' read the startup parameters
3efe4 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3efe8 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3efec 089             | 
3efec 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3efec 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3eff0 08a             | 
3eff0 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3eff4 08b 01 00 00 5F 
3eff8 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3effc 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3f000 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3f004 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3f008 090             | 
3f008 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3f008 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3f00c 091 01 00 00 FF 
3f010 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3f014 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3f018 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3f01c 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3f020 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3f024 097 08 DE 47 F5 |                             or      a, #8
3f028 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3f02c 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3f030 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3f034 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3f038 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3f03c 09d 01 DE 07 F1 |                             add     a, #1
3f040 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3f044 09f             |  
3f044 09f             |                             ' setup device control pin states
3f044 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3f048 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3f04c 0a1 01 00 00 FF 
3f050 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3f054 0a3             | 
3f054 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3f058 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3f05c 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3f060 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3f064 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3f068 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3f06c 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3f070 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3f074 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3f078 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3f07c 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3f080 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3f084 0af             | pinloop
3f084 0af             |                             ' generate minimum CE high time before access
3f084 0af A1 07 00 FF 
3f088 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3f08c 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3f090 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3f094 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3f098 0b4 1F DE 63 FD |                             waitx   a                       'delay
3f09c 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3f0a0 0b6             | 
3f0a0 0b6             |                             ' setup the COG mailboxes and addresses 
3f0a0 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3f0a4 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3f0a8 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3f0ac 0b9             | 
3f0ac 0b9 28 2E 64 FD |                             setq    #24-1
3f0b0 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3f0b4 0bb             | 
3f0b4 0bb             |                             ' setup the polling loop for active COGs 
3f0b4 0bb 01 C2 63 FD |                             cogid   id
3f0b8 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3f0bc 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3f0c0 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3f0c4 0bf 0A F0 07 F6 |                             mov     ptra, #10
3f0c8 0c0 E1 F1 03 FA |                             mul     ptra, id
3f0cc 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3f0d0 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3f0d4 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3f0d8 0c4 03 C2 07 FA |                             mul     id, #3
3f0dc 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3f0e0 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3f0e4 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3f0e8 0c8 D8 01 B0 FD |                             call    #reloadcogs
3f0ec 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3f0f0 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3f0f4 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3f0f4 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3f0f8 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3f0fc 0cd 08 04 DC FC |                             rep     #2, #8
3f100 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3f104 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3f108 0d0             | 
3f108 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3f108 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3f108 0d0 01 C2 63 FD |                             cogid   id
3f10c 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3f110 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3f114 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3f118 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3f11c 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3f120 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3f124 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3f128 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3f12c 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3f130 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3f134 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3f138 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3f13c 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3f140 0de A5 E5 03 F1 |                             add     d, const512
3f144 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3f148 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3f14c 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3f150 0e2             |                             
3f150 0e2             |                             ' setup register values for control vector loop setup after we return
3f150 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3f154 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3f158 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3f15c 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3f160 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3f164 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3f168 0e8 D0 C3 8F F9 |                             altd    id, #id0
3f16c 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3f170 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3f174 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3f178 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3f17c 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3f180 0ee             |  
3f180 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3f184 0ef 07 CA 07 F5 |                             and     request, #7
3f188 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3f18c 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3f190 0f2             |                             fit     $100                    'ensure all init code fits this space
3f190 0f2             | 
3f190 0f2             |                             fit     $100                    'ensure all init code fits this space
3f190 0f2             | 
3f190 0f2 00 00 00 00 
      ...             
3f1c0 0fe 00 00 00 00 
3f1c4 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3f1c8 100             | 
3f1c8 100             | '..................................................................................................
3f1c8 100             | ' Error result handling and COG notification of request completion
3f1c8 100             | 
3f1c8 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3f1cc 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3f1d0 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3f1d4 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3f1d8 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3f1dc 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3f1e0 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3f1e4 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3f1e8 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3f1ec 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3f1f0 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3f1f4 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3f1f8 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3f1fc 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3f200 10e             | ' Poller re-starts here after a COG is serviced
3f200 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3f204 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3f208 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3f20c 111             | ' Main dynamic polling loop repeats until a request arrives
3f20c 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3f210 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3f214 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3f218 114             | 
3f218 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3f21c 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3f220 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3f224 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3f228 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3f22c 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3f230 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3f234 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3f238 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3f23c 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3f240 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3f244 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3f248 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3f24c 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3f250 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3f254 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3f258 124             | 
3f258 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3f25c 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3f260 126             |  
3f260 126             | '..................................................................................................
3f260 126             | ' List handler                               
3f260 126             | 
3f260 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3f264 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3f268 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3f26c 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3f270 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3f274 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3f278 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3f27c 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3f280 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3f284 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3f288 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3f28c 131 33 00 60 FD |                             execf   0-0                     'process the request 
3f290 132             | 
3f290 132             | '..................................................................................................
3f290 132             | ' Restoring per COG state and resuming where we left off
3f290 132             | 
3f290 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3f294 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3f298 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3f29c 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3f2a0 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3f2a4 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3f2a8 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3f2ac 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3f2b0 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3f2b4 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3f2b8 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3f2bc 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3f2c0 13e             |                    
3f2c0 13e             | '..................................................................................................
3f2c0 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3f2c0 13e             | 
3f2c0 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3f2c4 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3f2c8 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3f2cc 141 D0 DF B7 F9 |                             setd    a, #id0
3f2d0 142 D8 DF BF F9 |                             sets    a, #addr1
3f2d4 143 FE FF FF FF 
3f2d8 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3f2dc 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3f2e0 146 3F DE A7 F9 |                             alti    a, #%111_111 
3f2e4 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3f2e8 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3f2ec 149 01 E2 63 FD |                             cogid   c
3f2f0 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3f2f4 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3f2f8 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3f2fc 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3f300 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3f304 14f 00 E0 03 F6 |                             mov     b, 0-0
3f308 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3f30c 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3f310 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3f314 153 0C 00 90 AD |             if_z            jmp     #excluded               
3f318 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3f31c 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3f320 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3f324 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3f328 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3f32c 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3f330 15a             | 
3f330 15a             | 'determine priority cogs and build instructions for the polling sequence
3f330 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3f334 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3f338 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3f33c 15d             | 
3f33c 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3f340 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3f344 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3f348 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3f34c 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3f350 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3f354 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3f358 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3f35c 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3f360 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3f364 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3f368 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3f36c 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3f370 16a             | endprioloop
3f370 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3f374 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3f378 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3f37c 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3f380 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3f384 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3f388 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3f38c 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3f390 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3f394 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3f398 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3f39c 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3f3a0 176             | 
3f3a0 176             | ' populate the round robin COG polling instructions
3f3a0 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3f3a4 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3f3a8 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3f3ac 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3f3b0 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3f3b4 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3f3b8 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3f3bc 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3f3c0 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3f3c4 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3f3c8 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3f3cc 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3f3d0 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3f3d4 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3f3d8 184             | '..................................................................................................
3f3d8 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3f3d8 184             | 
3f3d8 184             | set_latency                                                 '            (a) set latency
3f3d8 184             | get_latency                                                 '            (b) get latency
3f3d8 184             | set_burst                                                   '            (c) set burst size of bank
3f3d8 184             | get_burst                                                   '            (d) get burst size of bank
3f3d8 184             |                                                             '            (e) dump state
3f3d8 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3f3dc 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3f3e0 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3f3e4 187             |                                                             ' | | | | e  account for following AUGS
3f3e4 187 04 00 00 FF 
3f3e8 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3f3ec 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3f3f0 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3f3f4 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3f3f8 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3f3fc 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3f400 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3f404 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3f408 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3f40c 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3f410 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3f414 193             | 
3f414 193             | '..................................................................................................
3f414 193             | ' Misc EXECF code
3f414 193             | 
3f414 193 33 72 63 FD | start_read_exec             execf   newburstr
3f418 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3f41c 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3f420 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3f424 197             | 
3f424 197             | '..................................................................................................
3f424 197             | ' Variables
3f424 197             | 
3f424 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3f428 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3f42c 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3f430 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3f434 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3f438 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3f43c 19d             | 
3f43c 19d 00 00 00 80 | xfreq1          long    $80000000
3f440 19e 00 00 00 40 | xfreq2          long    $40000000
3f444 19f 03 00 00 00 | delay           long    3
3f448 1a0             | 
3f448 1a0             | lutcodeaddr                 
3f448 1a0             | startupparams
3f448 1a0             | excludedcogs                                    'careful: shared register use!
3f448 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3f44c 1a1 00 00 00 00 | flags           long    0
3f450 1a2             | mask                                            'careful: shared register use!
3f450 1a2 00 00 00 00 | resetmaskA      long    0
3f454 1a3             | limit                                           'careful: shared register use!
3f454 1a3 00 00 00 00 | resetmaskB      long    0
3f458 1a4 00 00 00 00 | datapins        long    0
3f45c 1a5             | const512                                        'careful: shared register use!
3f45c 1a5 00 00 00 00 | devicelist      long    0
3f460 1a6 00 00 00 00 | coglist         long    0
3f464 1a7 00 00 00 00 | mbox            long    0 
3f468 1a8             | 
3f468 1a8             | clkpin                                          'shared with code patched during init
3f468 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3f46c 1a9             | cspin                                           'shared with code patched during init
3f46c 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3f470 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3f474 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3f478 1ac 01 00 00 00 | clkdelay        long    1
3f47c 1ad 00 00 00 00 | regdatabus      long    0
3f480 1ae             | 
3f480 1ae 10 00 00 00 | deviceaddr      long    $10
3f484 1af             | rrcounter
3f484 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3f488 1b0             | 
3f488 1b0             | ' jump addresses for the per COG handlers
3f488 1b0 20 00 00 00 | cog0_handler    long    cog0
3f48c 1b1 2C 00 00 00 | cog1_handler    long    cog1
3f490 1b2 38 00 00 00 | cog2_handler    long    cog2
3f494 1b3 44 00 00 00 | cog3_handler    long    cog3
3f498 1b4 50 00 00 00 | cog4_handler    long    cog4
3f49c 1b5 5C 00 00 00 | cog5_handler    long    cog5
3f4a0 1b6 68 00 00 00 | cog6_handler    long    cog6
3f4a4 1b7 74 00 00 00 | cog7_handler    long    cog7
3f4a8 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3f4ac 1b9             | 
3f4ac 1b9             | ' EXECF sequences
3f4ac 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3f4b0 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3f4b4 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3f4b8 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3f4bc 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3f4c0 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3f4c4 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3f4c8 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3f4c8 1c0             | 
3f4c8 1c0             | 
3f4c8 1c0             | ' SKIPF sequences
3f4c8 1c0             | skiptable
3f4c8 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3f4cc 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3f4d0 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3f4d4 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3f4d8 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3f4dc 1c5 00 00 00 00 | pattern2        long    0
3f4e0 1c6 00 00 00 00 | pattern3        long    0
3f4e4 1c7 77 02 00 00 | singlelong      long    %1001110111  
3f4e8 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3f4ec 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3f4f0 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3f4f4 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3f4f8 1cc             | 
3f4f8 1cc             | ' LUT RAM address values
3f4f8 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3f4fc 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3f500 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3f504 1cf F6 02 00 00 | noread          long    noread_lut
3f508 1d0             | 
3f508 1d0 00 00 00 00 | id0             long    0
3f50c 1d1 01 00 00 00 | id1             long    1
3f510 1d2 02 00 00 00 | id2             long    2
3f514 1d3 03 00 00 00 | id3             long    3
3f518 1d4 04 00 00 00 | id4             long    4
3f51c 1d5 05 00 00 00 | id5             long    5
3f520 1d6 06 00 00 00 | id6             long    6
3f524 1d7 07 00 00 00 | id7             long    7
3f528 1d8             | 
3f528 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3f528 1d8             | 'and COG updates and need to follow immediately after id0-id7
3f528 1d8 00 00 00 00 | addr1           long    0
3f52c 1d9 00 00 00 00 | hubdata         long    0
3f530 1da 00 00 00 00 | count           long    0
3f534 1db 00 00 00 00 | addr2           long    0
3f538 1dc 00 00 00 00 | total           long    0
3f53c 1dd 00 00 00 00 | offset1         long    0
3f540 1de 00 00 00 00 | offset2         long    0
3f544 1df 00 00 00 00 | link            long    0
3f548 1e0             | 
3f548 1e0             | burstwrite                                      'note shared register use during init
3f548 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3f54c 1e1 00 00 00 00 | id              long    0
3f550 1e2             | 
3f550 1e2 00 00 00 00 | header          long    0
3f554 1e3 00 00 00 00 | trailer         long    0
3f558 1e4 00 00 00 00 | cmdaddr         long    0
3f55c 1e5 00 00 00 00 | request         long    0
3f560 1e6 00 00 00 00 | rrlimit         long    0
3f564 1e7 00 00 00 00 | pinconfig       long    0
3f568 1e8 00 00 00 00 | clks            long    0
3f56c 1e9 00 00 00 00 | resume          long    0
3f570 1ea 00 00 00 00 | orighubsize     long    0
3f574 1eb 00 00 00 00 | wrclks          long    0
3f578 1ec             | 
3f578 1ec 00 00 00 00 | pattern         long    0
3f57c 1ed 00 00 00 00 | hubscratch      long    0
3f580 1ee 00 10 00 00 | val4k           long    4096
3f584 1ef             | 
3f584 1ef             | ' temporary general purpose regs
3f584 1ef 00 00 00 00 | a               long    0
3f588 1f0 00 00 00 00 | b               long    0
3f58c 1f1 00 00 00 00 | c               long    0
3f590 1f2 00 00 00 00 | d               long    0
3f594 1f3             |                 fit     502
3f594 1f3             | 
3f594 1f3             |                 fit     502
3f594 1f3             | 
3f594 1f3             | '..................................................................................................
3f594 1f3             | 
3f594 1f3             |             orgh
3f594                 | 
3f594                 | lut_code
3f594                 | 'HW init code up to 80 longs
3f594                 | 
3f594                 | '..................................................................................................
3f594                 | ' Memory layout for LUT RAM once operational:
3f594                 | '
3f594                 | '  LUT RAM address      Usage
3f594                 | '  ---------------      ----
3f594                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3f594                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3f594                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3f594                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3f594                 | '
3f594                 | ' Also during driver COG startup:
3f594                 | ' $230-$24F is used for HW init setup
3f594                 | ' $250-$26F is used as temporary vector storage 
3f594                 | '..................................................................................................
3f594                 | 
3f594                 |                 org $230    
3f594 230             | 
3f594 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3f594 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3f598 231 24 16 60 FD |                             pollxfi
3f59c 232 FF AA 2A FF 
3f5a0 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3f5a4 234 28 00 B0 FD |                             call    #sendqspi
3f5a8 235 07 F8 07 FF 
3f5ac 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3f5b0 237 28 00 B0 FD |                             call    #sendspi
3f5b4 238 F8 07 78 FF 
3f5b8 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3f5bc 23a 1C 00 B0 FD |                             call    #sendspi
3f5c0 23b 7F 78 78 FF 
3f5c4 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3f5c8 23d 10 00 B0 FD |                             call    #sendspi 
3f5cc 23e 2D 00 64 FD |                             ret
3f5d0 23f             | 
3f5d0 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3f5d4 240 32 0C 64 FD |                             skipf   #%110
3f5d8 241 9C EF 03 F6 |                             mov     pb, xsendimm
3f5dc 242             | 
3f5dc 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3f5e0 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3f5e4 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3f5e8 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3f5ec 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3f5f0 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3f5f4 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3f5f8 249 50 48 63 FD |                             fltl    datapins                'float data bus
3f5fc 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3f600 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3f604 24c             | 
3f604 24c 00 00 00 00 
3f608 24d 00 00 00 00 
3f60c 24e 00 00 00 00 
3f610 24f 00 00 00 00 |                 long    0[$270-32-$]
3f614 250             |                 fit     $270-32  ' keep room for 32 vector longs
3f614 250             |     
3f614 250             |                 fit     $270-32  ' keep room for 32 vector longs
3f614 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3f614 250             | rw_vect ' PSRAM jump vectors
3f614 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3f618 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3f61c 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3f620 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3f624 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3f628 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3f62c 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3f630 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3f634 258             | ro_vect ' R/O PSRAM jump vectors
3f634 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3f638 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3f63c 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3f640 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3f644 25c 00 01 00 00 |                 long    unsupported
3f648 25d 00 01 00 00 |                 long    unsupported
3f64c 25e 00 01 00 00 |                 long    unsupported
3f650 25f 00 01 00 00 |                 long    unsupported
3f654 260             | ctrl_vect ' Control jump vectors
3f654 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3f658 261 00 01 00 00 |                 long    unsupported
3f65c 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3f660 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3f664 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3f668 265 00 01 00 00 |                 long    unsupported
3f66c 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3f670 267 3E 01 00 00 |                 long    reconfig 
3f674 268             | no_vect ' Invalid bank jump vectors
3f674 268 01 01 00 00 |                 long    invalidbank
3f678 269 01 01 00 00 |                 long    invalidbank
3f67c 26a 01 01 00 00 |                 long    invalidbank
3f680 26b 01 01 00 00 |                 long    invalidbank
3f684 26c 01 01 00 00 |                 long    invalidbank
3f688 26d 01 01 00 00 |                 long    invalidbank
3f68c 26e 01 01 00 00 |                 long    invalidbank
3f690 26f 01 01 00 00 |                 long    invalidbank
3f694 270             |                 fit     $270
3f694 270             | 
3f694 270             |                 fit     $270
3f694 270             | '..................................................................................................
3f694 270             | ' PSRAM READS
3f694 270             |                                                             ' a b c d e f
3f694 270             |                                                             ' B W L B R L  (a) byte read
3f694 270             |                                                             ' Y O O U E O  (b) word read
3f694 270             |                                                             ' T R N R S C  (c) long read
3f694 270             |                                                             ' E D G S U K  (d) new burst read
3f694 270             |                                                             '       T M E  (e) resumed sub-burst
3f694 270             |                                                             '         E D  (f) locked sub-burst
3f694 270             | 
3f694 270             | 
3f694 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3f698 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3f69c 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3f6a0 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3f6a4 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3f6a8 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3f6ac 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3f6b0 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3f6b4 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3f6b8 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3f6bc 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3f6c0 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3f6c4 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3f6c8 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3f6cc 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3f6d0 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3f6d4 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3f6d8 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3f6dc 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3f6e0 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3f6e4 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3f6e8 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3f6ec 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3f6f0 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3f6f4 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3f6f8 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3f6fc 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3f700 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3f704 28c             | 
3f704 28c             |                             ' fall through to read bursts
3f704 28c             |                         
3f704 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3f704 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3f708 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3f70c 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3f710 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3f714 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3f718 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3f71c 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3f720 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3f724 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3f728 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3f72c 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3f730 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3f734 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3f738 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3f73c 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3f740 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3f744 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3f748 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3f74c 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3f750 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3f754 2a0 E8 D1 03 F1 |                             add     clks, clks
3f758 2a1             | readcommon
3f758 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3f75c 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3f760 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3f764 2a4             | 
3f764 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3f768 2a5 69 C8 63 FD |                             rev     cmdaddr
3f76c 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3f770 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3f774 2a8             | 
3f774 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3f778 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3f77c 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3f77c 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3f780 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3f784 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3f788 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3f78c 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3f78c 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3f790 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3f794 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3f798 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3f79c 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3f7a0 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3f7a4 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3f7a4 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3f7a8 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3f7ac 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3f7b0 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3f7b4 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3f7b8 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3f7bc 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3f7c0 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3f7c4 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3f7c8 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3f7cc 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3f7d0 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3f7d4 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3f7d8 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3f7dc 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3f7dc 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3f7e0 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3f7e4 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3f7e8 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3f7ec 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3f7f0 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3f7f4 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3f7f8 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3f7fc 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3f800 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3f804 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3f808 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3f80c 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3f810 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3f814 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3f818 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3f81c 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3f820 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3f824 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3f828 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3f82c 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3f830 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3f834 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3f838 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3f83c 2da 10 03 90 FD |                             jmp     #writecommon
3f840 2db             | 
3f840 2db             | '..................................................................................................
3f840 2db             | ' Burst continuation testing
3f840 2db             | 
3f840 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3f844 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3f848 2dd             | continue_read_lut          
3f848 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3f84c 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3f850 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3f854 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3f858 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3f85c 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3f860 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3f864 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3f868 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3f86c 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3f870 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3f874 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3f878 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3f87c 2ea             | 
3f87c 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3f880 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3f884 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3f888 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3f88c 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3f890 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3f894 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3f898 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3f89c 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3f8a0 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3f8a4 2f4 2A 1C 66 0D |             _ret_           push    #poller
3f8a8 2f5             | 
3f8a8 2f5             | 
3f8a8 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3f8ac 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3f8ac 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3f8b0 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3f8b4 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3f8b8 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3f8bc 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3f8c0 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3f8c4 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3f8c8 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3f8cc 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3f8d0 2ff             | '..................................................................................................
3f8d0 2ff             | ' Completion of requests
3f8d0 2ff             | 
3f8d0 2ff             | complete_rw_lut             
3f8d0 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3f8d4 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3f8d8 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3f8dc 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3f8e0 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3f8e4 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3f8e8 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3f8ec 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3f8f0 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3f8f4 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3f8f8 309 32 62 64 AD |             if_z            skipf   #%110001
3f8fc 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3f900 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3f904 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3f908 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3f90c 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3f910 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3f914 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3f918 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3f91c 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3f920 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3f924 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3f928 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3f92c 316             |                                                             ' skipcase (a) gfx copy to/from hub
3f92c 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3f92c 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3f92c 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3f930 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3f934 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3f938 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3f93c 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3f940 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3f944 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3f948 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3f94c 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3f950 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3f954 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3f958 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3f95c 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3f960 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3f964 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3f968 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3f96c 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3f970 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3f974 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3f978 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3f97c 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3f980 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3f984 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3f988 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3f98c 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3f990 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3f994 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3f998 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3f99c 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3f9a0 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3f9a4 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3f9a8 335 DF B7 03 A6 |             if_z            mov     addr2, link
3f9ac 336 34 FF 9F AD |             if_z            jmp     #checknext
3f9b0 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3f9b4 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3f9b8 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3f9bc 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3f9c0 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3f9c4 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3f9c8 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3f9cc 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3f9d0 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3f9d4 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3f9d8 341             | 
3f9d8 341             | '..................................................................................................
3f9d8 341             | ' PSRAM WRITES
3f9d8 341             |                                                             '  a b c d e f g h
3f9d8 341             | 
3f9d8 341             |                                                             '  B W L F B R L L (a) byte write(s)
3f9d8 341             |                                                             '  Y O O I U E O O (b) word write(s)
3f9d8 341             |                                                             '  T R N L R S C C (c) long write(s)
3f9d8 341             |                                                             '  E D G L S U K K (d) resumed fill
3f9d8 341             |                                                             '          T M E E (e) new burst write
3f9d8 341             |                                                             '            E D D (f) resumed burst
3f9d8 341             |                                                             '              F B (g) locked fill
3f9d8 341             |                                                             '              I U (h) locked burst write
3f9d8 341             |                                                             '              L R 
3f9d8 341             |                                                             '              L S 
3f9d8 341             |                                                             '                T 
3f9d8 341             | 
3f9d8 341             | w_single                   
3f9d8 341             | w_fill_cont           
3f9d8 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3f9dc 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3f9e0 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3f9e4 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3f9e8 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3f9ec 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3f9f0 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3f9f4 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3f9f8 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3f9fc 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3fa00 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3fa04 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3fa08 34d             |                ' disable call to r_resume_burst for single longs when z=0
3fa08 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3fa0c 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3fa10 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3fa14 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3fa18 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3fa1c 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3fa20 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3fa24 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3fa28 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3fa2c 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3fa30 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3fa34 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3fa38 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3fa3c 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3fa40 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3fa44 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3fa48 35d             |         
3fa48 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3fa48 35d             |             '
3fa48 35d             |             '  At least one of these 3 optional components will be sent
3fa48 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3fa48 35d             |             '     body - N x full longs of data
3fa48 35d             |             '     trailer - last partial long of data
3fa48 35d             |             '
3fa48 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3fa48 35d             |             '
3fa48 35d             |             'Case    Type                           Sends
3fa48 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3fa48 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3fa48 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3fa48 35d             |             ' 4)     Multiple long fill             body only
3fa48 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3fa48 35d             | 
3fa48 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3fa48 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3fa4c 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3fa50 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3fa54 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3fa58 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3fa5c 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3fa60 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3fa64 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3fa68 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3fa6c 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3fa70 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3fa74 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3fa78 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3fa7c 36a             |                             
3fa7c 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3fa80 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3fa84 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3fa88 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3fa8c 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3fa90 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3fa94 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3fa98 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3fa9c 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3faa0 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3faa4 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3faa8 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3faac 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3fab0 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3fab4 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3fab8 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3fabc 37a             | 
3fabc 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3fac0 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3fac4 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3fac8 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3facc 37e             |                  
3facc 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3fad0 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3fad4 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3fad8 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3fadc 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3fae0 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3fae4 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3fae8 385             | 
3fae8 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3faec 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3faf0 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3faf4 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3faf8 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3fafc 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3fb00 38b             | 
3fb00 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3fb00 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3fb04 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3fb08 38d 2A B0 63 FD |                             push    addr1                   'save address
3fb0c 38e             | 
3fb0c 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3fb0c 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3fb10 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3fb14 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3fb18 391             |             
3fb18 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3fb1c 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3fb20 393 2B B0 63 FD |                             pop     addr1                   'restore address
3fb24 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3fb28 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3fb2c 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3fb30 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3fb34 398             | 
3fb34 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3fb38 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3fb3c 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3fb40 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3fb44 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3fb48 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3fb4c 39e             | 
3fb4c 39e             |                             'trailer is done
3fb4c 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3fb50 39f             | 
3fb50 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3fb54 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3fb58 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3fb5c 3a2             | 
3fb5c 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3fb60 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3fb64 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3fb68 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3fb6c 3a6             |                             
3fb6c 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3fb70 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3fb74 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3fb78 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3fb7c 3aa             |                                                          
3fb7c 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3fb80 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3fb84 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3fb88 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3fb8c 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3fb90 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3fb94 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3fb98 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3fb9c 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3fba0 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3fba4 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3fba8 3b5             |  
3fba8 3b5 59 52 63 FD |                             drvh    cspin
3fbac 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3fbb0 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3fbb4 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3fbb8 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3fbbc 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3fbc0 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3fbc4 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3fbc8 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3fbcc 3be EA E5 03 F6 |                             mov     d, orighubsize
3fbd0 3bf EF E5 63 F0 |                             shl     d, a
3fbd4 3c0 F2 E3 83 F1 |                             sub     c, d
3fbd8 3c1 DD E3 03 F1 |                             add     c, offset1
3fbdc 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3fbe0 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3fbe4 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3fbe8 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3fbec 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3fbf0 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3fbf4 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3fbf8 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3fbfc 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3fc00 3cb BB D3 03 F6 |                             mov     resume, restorefill
3fc04 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3fc08 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3fc0c 3ce 6C FC BF CD |             if_c            call    #yield
3fc10 3cf 2D 00 64 FD |                             ret
3fc14 3d0             |                            
3fc14 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3fc14 3d0             |                       '     rczl    pa                      'rotate left into address offset
3fc14 3d0             |                       '     rczl    c wcz                   'restore count and flags
3fc14 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3fc18 3d1 02 EC 67 F0 |                             shl     pa, #2
3fc1c 3d2 28 06 64 AD |             if_z            setq    #3
3fc20 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3fc24 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3fc28 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3fc2c 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3fc30 3d7             | 
3fc30 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3fc34 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3fc38 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3fc3c 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3fc40 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3fc44 3dc             |                 fit 1024-32
3fc44 3dc             |         
3fc44 3dc             | 
3fc44 3dc             | '..................................................................................................
3fc44 3dc             | 
3fc44 3dc             |                 fit 1024-32
3fc44 3dc 00 00 00 00 
3fc48 3dd 00 00 00 00 
3fc4c 3de 00 00 00 00 
3fc50 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3fc54 3e0             |                 org 1024-32
3fc54 000             | 
3fc54 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3fc54 000 00 00 00 00 |                 long $0000
3fc58 001 11 11 00 00 |                 long $1111
3fc5c 002 22 22 00 00 |                 long $2222
3fc60 003 33 33 00 00 |                 long $3333
3fc64 004 44 44 00 00 |                 long $4444
3fc68 005 55 55 00 00 |                 long $5555
3fc6c 006 66 66 00 00 |                 long $6666
3fc70 007 77 77 00 00 |                 long $7777
3fc74 008 88 88 00 00 |                 long $8888
3fc78 009 99 99 00 00 |                 long $9999
3fc7c 00a AA AA 00 00 |                 long $aaaa
3fc80 00b BB BB 00 00 |                 long $bbbb
3fc84 00c CC CC 00 00 |                 long $cccc
3fc88 00d DD DD 00 00 |                 long $dddd
3fc8c 00e EE EE 00 00 |                 long $eeee
3fc90 00f FF FF 00 00 |                 long $ffff
3fc94 010             | 
3fc94 010             | 'masks
3fc94 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3fc98 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3fc9c 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3fca0 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3fca4 014             | 
3fca4 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3fca8 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3fcac 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3fcb0 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3fcb4 018             | 
3fcb4 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3fcb8 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3fcbc 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3fcc0 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3fcc4 01c             | 
3fcc4 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3fcc8 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3fccc 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3fcd0 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3fcd4 020             |         fit 1024
3fcd4 020             | 
3fcd4 020             |         fit 1024
3fcd4 020             | 
3fcd4 020             | '--------------------------------------------------------------------------------------------------
3fcd4 020             |         orgh
3fcd4                 | 
3fcd4                 | gfxexpansion
3fcd4                 |                             'simple line drawing graphics expansion of memory driver
3fcd4                 |                             'jmp     #donerepeats                'just return for now
3fcd4                 | 
3fcd4     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3fcd8     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3fcdc     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3fce0     DD E1 03 F6 |                             mov     b, offset1              'get error term
3fce4     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3fce8     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3fcec     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3fcf0     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3fcf4     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3fcf8     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3fcfc     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3fd00     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3fd04     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3fd08     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3fd0c     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3fd10     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3fd14     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3fd18     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3fd1c     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3fd20     DC E5 33 F9 |                             getword d, total, #0            'get line width
3fd24     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3fd28     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3fd2c     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3fd30     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3fd34     C3 03 80 FD |                             jmp     #readmask               'continue filling
3fd38                 | 	alignl
3fd38                 | _usbnew_spin2_dat_
3fd38                 |                 org     $000
3fd38 000             | 
3fd38 000             | usb_host_start
3fd38 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3fd3c 001             | 
3fd3c 001 03 00 00 FF 
3fd40 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3fd44 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3fd48 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3fd4c 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3fd50 006 29 70 63 FD |                 setq2   htmp
3fd54 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3fd58 008             | 
3fd58 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3fd5c 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3fd60 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3fd64 00b             | 
3fd64 00b             | '------------------------------------------------------------------------------
3fd64 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3fd64 00b             | ' special because the receiving function must not respond with either STALL or
3fd64 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3fd64 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3fd64 00b             | ' corrupt packet, it must ignore the transaction
3fd64 00b             | '------------------------------------------------------------------------------
3fd64 00b             | ' On entry:
3fd64 00b             | '   PTRA - start address of the SETUP data struct.
3fd64 00b             | ' On exit:
3fd64 00b             | '   retval - PID_ACK on success, otherwise error code.
3fd64 00b             | '------------------------------------------------------------------------------
3fd64 00b             | txn_setup
3fd64 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3fd68 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3fd6c 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3fd70 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3fd74 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3fd78 010             | .setup
3fd78 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3fd7c 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3fd80 012 2D 00 64 AD |         if_z    ret
3fd84 013 7C 0B B0 FD |                 call    #retry_wait
3fd88 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3fd8c 015 2D 00 64 AD |         if_z    ret
3fd90 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3fd94 017 E0 FF 9F FD |                 jmp     #.setup
3fd98 018             | 
3fd98 018             | '------------------------------------------------------------------------------
3fd98 018             | ' IN/INTERRUPT transaction.
3fd98 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3fd98 018             | '------------------------------------------------------------------------------
3fd98 018             | ' On entry:
3fd98 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3fd98 018             | '     CRC(b19..23).
3fd98 018             | ' On exit:
3fd98 018             | '------------------------------------------------------------------------------
3fd98 018             | txn_in
3fd98 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3fd9c 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3fda0 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3fda4 01b             | 
3fda4 01b             |                 ' Fall through to urx_packet
3fda4 01b             | 
3fda4 01b             | '------------------------------------------------------------------------------
3fda4 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3fda4 01b             | ' received are handshakes and IN DATAx.
3fda4 01b             | '------------------------------------------------------------------------------
3fda4 01b             | ' On entry:
3fda4 01b             | ' On exit:
3fda4 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3fda4 01b             | '     returned.
3fda4 01b             | '------------------------------------------------------------------------------
3fda4 01b             | urx_packet
3fda4 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3fda8 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3fdac 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3fdb0 01e 1A 92 63 FD |                 getct   hct2
3fdb4 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3fdb8 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3fdbc 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3fdc0 022             | .wait_sop
3fdc0 022 22 A7 8A FA |                 rdpin   urx, dm
3fdc4 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3fdc8 024 08 00 90 CD |         if_c    jmp     #.get_pid
3fdcc 025 FC 25 CC FB |                 jnct2   #.wait_sop
3fdd0 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3fdd4 027             | .get_pid
3fdd4 027 28 02 B0 FD |                 call    #urx_next
3fdd8 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3fddc 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3fde0 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3fde4 02b             | .chk_pid
3fde4 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3fde8 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3fdec 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3fdf0 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3fdf4 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3fdf8 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3fdfc 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3fe00 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3fe04 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3fe08 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3fe0c 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3fe10 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3fe14 037             | .ack_resend
3fe14 037 22 A7 82 FA |                 rqpin   urx, dm
3fe18 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3fe1c 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3fe20 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3fe24 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3fe28 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3fe2c 03d             | .chk_eop
3fe2c 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3fe30 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3fe34 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3fe38 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3fe3c 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3fe40 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3fe44 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3fe48 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3fe4c 045 2D 00 64 FD |                 ret
3fe50 046             | .idle
3fe50 046 22 A7 82 FA |                 rqpin   urx, dm
3fe54 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3fe58 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3fe5c 049 2D 00 64 FD |                 ret
3fe60 04a             | 
3fe60 04a             | '------------------------------------------------------------------------------
3fe60 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3fe60 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3fe60 04a             | ' if one is required.
3fe60 04a             | '------------------------------------------------------------------------------
3fe60 04a             | ' On entry:
3fe60 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3fe60 04a             | ' On exit:
3fe60 04a             | '------------------------------------------------------------------------------
3fe60 04a             | utx_token
3fe60 04a 22 A7 82 FA |                 rqpin   urx, dm
3fe64 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3fe68 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3fe6c 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3fe70 04e 34 0D B0 CD |         if_c    call    #utx_pre
3fe74 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3fe78 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3fe7c 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3fe80 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3fe84 053             | .next_byte
3fe84 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3fe88 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3fe8c 055             | .wait
3fe8c 055 40 46 72 FD |                 testp   dp                      wc
3fe90 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3fe94 057 23 03 08 FC |                 akpin   dp
3fe98 058 22 A5 22 FC |                 wypin   utx, dm
3fe9c 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3fea0 05a             | 
3fea0 05a             | '------------------------------------------------------------------------------
3fea0 05a             | ' SETUP/OUT/INTERRUPT transaction.
3fea0 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3fea0 05a             | '------------------------------------------------------------------------------
3fea0 05a             | ' On entry:
3fea0 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3fea0 05a             | '     CRC(b19..23).
3fea0 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3fea0 05a             | '   pkt_data - count of DATAx payload bytes to send.
3fea0 05a             | ' On exit:
3fea0 05a             | '------------------------------------------------------------------------------
3fea0 05a             | txn_out
3fea0 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3fea4 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3fea8 05c 00 00 C0 FF 
3feac 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3feb0 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3feb4 05f             | 
3feb4 05f             |                 ' Fall through to utx_data
3feb4 05f             | 
3feb4 05f             | '------------------------------------------------------------------------------
3feb4 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3feb4 05f             | ' calculated while the data byte is being shifted out. Since data stage
3feb4 05f             | ' success/fail is not determined until the status stage of the transaction,
3feb4 05f             | ' this routine is only concerned about the current DATAx packet.
3feb4 05f             | '------------------------------------------------------------------------------
3feb4 05f             | ' On entry:
3feb4 05f             | '   PTRA - hub start address of the data to read.
3feb4 05f             | '   pkt_cnt - data payload size.
3feb4 05f             | ' On exit:
3feb4 05f             | '------------------------------------------------------------------------------
3feb4 05f             | utx_data
3feb4 05f 22 A7 82 FA |                 rqpin   urx, dm
3feb8 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3febc 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3fec0 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3fec4 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3fec8 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3fecc 065 D8 0C B0 CD |         if_c    call    #utx_pre
3fed0 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3fed4 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3fed8 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3fedc 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3fee0 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3fee4 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3fee8 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3feec 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3fef0 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3fef4 06f             | .read_byte
3fef4 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3fef8 070 F0 00 B0 FD |                 call    #utx_byte
3fefc 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
3ff00 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3ff04 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3ff08 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3ff0c 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
3ff10 076             | .send_crc
3ff10 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
3ff14 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3ff18 078 D0 00 B0 FD |                 call    #utx_byte
3ff1c 079 5D A5 EA F8 |                 getbyte utx, crc, #1
3ff20 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
3ff24 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3ff28 07c             | 
3ff28 07c             | '------------------------------------------------------------------------------
3ff28 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3ff28 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3ff28 07c             | ' expects that the packet includes at least the CRC word.
3ff28 07c             | '
3ff28 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3ff28 07c             | ' was requested, which makes it difficult to determine where the data stops
3ff28 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3ff28 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3ff28 07c             | ' USB-16 expected residual value of 0xB001.
3ff28 07c             | '
3ff28 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3ff28 07c             | ' so the caller can verify IN success before writing the data to its final
3ff28 07c             | ' destination.
3ff28 07c             | '------------------------------------------------------------------------------
3ff28 07c             | ' On entry:
3ff28 07c             | '   pkt_data - max byte count expected to be in the packet.
3ff28 07c             | '   newb_flg - signals new byte ready when toggled.
3ff28 07c             | ' On exit:
3ff28 07c             | '   pkt_cnt - actual number of bytes read.
3ff28 07c             | '------------------------------------------------------------------------------
3ff28 07c             | urx_data
3ff28 07c F7 75 03 F6 |                 mov     htmp2, pb
3ff2c 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3ff30 07e 00 00 C0 FF 
3ff34 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3ff38 080 BA EF 03 F6 |                 mov     pb, htmp2
3ff3c 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3ff40 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
3ff44 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
3ff48 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3ff4c 085             | .wait_byte
3ff4c 085             | ' In-line rx for max speed
3ff4c 085 22 A7 82 FA |                 rqpin   urx, dm
3ff50 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3ff54 087 53 A5 02 F5 |                 and     utx, urx
3ff58 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3ff5c 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3ff60 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
3ff64 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3ff68 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3ff6c 08d DC FF 9F FD |                 jmp     #.wait_byte
3ff70 08e             | .get_byte
3ff70 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3ff74 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3ff78 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3ff7c 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3ff80 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3ff84 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3ff88 094             | .end_crc
3ff88 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3ff8c 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3ff90 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3ff94 097 2D 00 64 1D |         if_a    ret
3ff98 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3ff98 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3ff98 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3ff98 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3ff98 098 22 A7 82 FA |                 rqpin   urx, dm
3ff9c 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3ffa0 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3ffa4 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3ffa4 09b             | .chk_crc
3ffa4 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3ffa8 09c 58 00 00 FF 
3ffac 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3ffb0 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3ffb4 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3ffb8 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
3ffbc 0a1 34 09 B0 FD |                 call    #poll_waitx
3ffc0 0a2             | 
3ffc0 0a2             |                 ' Fall through to utx_handshake
3ffc0 0a2             | 
3ffc0 0a2             | '------------------------------------------------------------------------------
3ffc0 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3ffc0 0a2             | ' the appropriate IP delay has been inserted.
3ffc0 0a2             | '------------------------------------------------------------------------------
3ffc0 0a2             | ' On entry:
3ffc0 0a2             | '   retval - handshake PID to send.
3ffc0 0a2             | ' On exit:
3ffc0 0a2             | '   retval unchanged.
3ffc0 0a2             | '------------------------------------------------------------------------------
3ffc0 0a2             | utx_handshake
3ffc0 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3ffc4 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3ffc8 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3ffcc 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
3ffd0 0a6 5F A5 02 F6 |                 mov     utx, retval
3ffd4 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3ffd8 0a8             | .idle
3ffd8 0a8 22 A7 82 FA |                 rqpin   urx, dm
3ffdc 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3ffe0 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3ffe4 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3ffe8 0ac 08 09 90 FD |                 jmp     #poll_waitx
3ffec 0ad             | 
3ffec 0ad             | '------------------------------------------------------------------------------
3ffec 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
3ffec 0ad             | '------------------------------------------------------------------------------
3ffec 0ad             | ' On entry:
3ffec 0ad             | '   utx - byte to transmit.
3ffec 0ad             | ' On exit:
3ffec 0ad             | '------------------------------------------------------------------------------
3ffec 0ad             | utx_byte
3ffec 0ad 40 46 72 FD |                 testp   dp                      wc
3fff0 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3fff4 0af 23 03 08 FC |                 akpin   dp
3fff8 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
3fffc 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
40000 0b2             | 
40000 0b2             | '------------------------------------------------------------------------------
40000 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
40000 0b2             | '------------------------------------------------------------------------------
40000 0b2             | ' On entry:
40000 0b2             | ' On exit:
40000 0b2             | '   retval - the byte read.
40000 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
40000 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
40000 0b2             | '     received.
40000 0b2             | '------------------------------------------------------------------------------
40000 0b2             | urx_next
40000 0b2 22 A7 8A FA |                 rdpin   urx, dm
40004 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
40008 0b4 53 A5 02 F5 |                 and     utx, urx
4000c 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
40010 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
40014 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
40018 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
4001c 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
40020 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
40024 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
40028 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
4002c 0bd 2D 00 64 FD |                 ret
40030 0be             | 
40030 0be             | '------------------------------------------------------------------------------
40030 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
40030 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
40030 0be             | ' length, and the PID is not included in the CRC calculation:
40030 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
40030 0be             | '  CRC5  ENDP ADDRESS PID
40030 0be             | ' %00000_1111_1111111_xxxxxxxx
40030 0be             | '------------------------------------------------------------------------------
40030 0be             | ' On entry:
40030 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
40030 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
40030 0be             | ' On exit:
40030 0be             | '   ep_addr_pid - CRC value appended to the packet.
40030 0be             | '------------------------------------------------------------------------------
40030 0be             | calc_crc5
40030 0be FF 03 00 FF 
40034 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
40038 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
4003c 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
40040 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
40044 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
40048 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
4004c 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
40050 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
40054 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
40058 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
4005c 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
40060 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
40064 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
40068 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
4006c 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
40070 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
40074 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
40078 0d0             | 
40078 0d0             | '------------------------------------------------------------------------------
40078 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
40078 0d0             | '------------------------------------------------------------------------------
40078 0d0             | isr1_fsframe
40078 0d0 1A 92 62 FD |                 getct   iframe_ct_base
4007c 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
40080 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
40084 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
40088 0d4             | .wait
40088 0d4 40 46 72 FD |                 testp   dp                      wc
4008c 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
40090 0d6 23 03 08 FC |                 akpin   dp
40094 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
40098 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
4009c 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
400a0 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
400a4 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
400a8 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
400ac 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
400b0 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
400b4 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
400b8 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
400bc 0e1 2C FF BF FD |                 call    #utx_byte
400c0 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
400c4 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
400c8 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
400cc 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
400d0 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
400d4 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
400d8 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
400dc 0e9 5B A5 42 F5 |                 or      utx, icrc
400e0 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
400e4 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
400e8 0ec 20 00 90 FD |                 jmp     #isr1_wait
400ec 0ed             | isr1_lsframe
400ec 0ed 1A 92 62 FD |                 getct   iframe_ct_base
400f0 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
400f4 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
400f8 0f0             | .wait
400f8 0f0 40 46 72 FD |                 testp   dp                      wc
400fc 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
40100 0f2 23 03 08 FC |                 akpin   dp
40104 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
40108 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
4010c 0f5             | isr1_wait
4010c 0f5 22 A5 82 FA |                 rqpin   utx, dm
40110 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
40114 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
40118 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
4011c 0f9 03 00 00 FF 
40120 0fa FF B3 06 F5 |                 and     frame, ##$7ff
40124 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
40128 0fc F5 FF 3B FB |                 reti1
4012c 0fd             | 
4012c 0fd             | '------------------------------------------------------------------------------
4012c 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
4012c 0fd             | ' transaction will complete before the next frame is triggered.
4012c 0fd             | '------------------------------------------------------------------------------
4012c 0fd             | ' On entry:
4012c 0fd             | ' On exit:
4012c 0fd             | '------------------------------------------------------------------------------
4012c 0fd             | wait_txn_ok
4012c 0fd 1A 74 63 FD |                 getct   htmp2
40130 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
40134 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
40138 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
4013c 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
40140 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
40144 103 2D 00 64 FD |                 ret
40148 104             | 
40148 104             | '------------------------------------------------------------------------------
40148 104             | ' A device connection was detected, or a bus reset was requested by the USB
40148 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
40148 104             | ' and perform a reset sequence prior to device enumeration.
40148 104             | '------------------------------------------------------------------------------
40148 104             | dev_reset
40148 104 22 A7 82 FA |                 rqpin   urx, dm
4014c 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
40150 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
40154 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
40158 108             | reset
40158 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
4015c 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
40160 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
40164 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
40168 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
4016c 10d 1A 92 62 FD |                 getct   iframe_ct_base
40170 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
40174 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
40178 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
4017c 111 24 70 07 F1 |                 add     htmp, #36
40180 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
40184 113             | .framewait
40184 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
40188 114 F8 FF 9F CD |         if_b    jmp     #.framewait
4018c 115 2D 00 64 FD |                 ret
40190 116             | 
40190 116             | '------------------------------------------------------------------------------
40190 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
40190 116             | '------------------------------------------------------------------------------
40190 116             | ' On entry:
40190 116             | '   PTRA - source address.
40190 116             | '   PB - destination address.
40190 116             | '   hr0 - length of copy, in bytes.
40190 116             | ' On exit:
40190 116             | '------------------------------------------------------------------------------
40190 116             | hmemcpy
40190 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
40194 117 F7 71 43 FC |                 wrbyte  htmp, pb
40198 118 01 EE 07 F1 |                 add     pb, #1
4019c 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
401a0 11a             | 
401a0 11a             | '------------------------------------------------------------------------------
401a0 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
401a0 11a             | ' loop until the errant device is disconnected.
401a0 11a             | '------------------------------------------------------------------------------
401a0 11a             | ' On entry:
401a0 11a             | ' On exit:
401a0 11a             | '------------------------------------------------------------------------------
401a0 11a             | host_error
401a0 11a             |           if ERROR_LED >= 0
401a0 11a             |           end
401a0 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
401a4 11b             | 
401a4 11b             | '------------------------------------------------------------------------------
401a4 11b             | ' Get HID descriptor buffer for current port
401a4 11b             | '------------------------------------------------------------------------------
401a4 11b             | ' On entry:
401a4 11b             | ' On exit:
401a4 11b             | '   PB - HID descriptor buffer pointer
401a4 11b             | '------------------------------------------------------------------------------
401a4 11b             | get_hid_descr_buffer
401a4 11b 2D EF 03 F6 |                 mov     pb, hdev_port
401a8 11c 01 EE E7 F2 |                 cmpsub  pb, #1
401ac 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
401b0 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
401b4 11f             | 
401b4 11f             | 
401b4 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
401b8 120             | 
401b8 120             | ' USB commands and error codes
401b8 120 00 00 00 00 | cmd_data        long    0
401bc 121 00 00 00 00 | usb_err_code    long    ERR_NONE
401c0 122             | 
401c0 122             | ' Parameters block assigned at cog startup
401c0 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
401c4 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
401c8 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
401cc 125             | if ACTIVITY_LED >= 0
401cc 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
401cc 125             | end
401cc 125             | if ERROR_LED >= 0
401cc 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
401cc 125             | end
401cc 125 00 00 00 00 | hid_descr_p     long    0
401d0 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
401d0 126             | 'hkbd_report_p   long    0
401d0 126 00 00 00 00 | hub_descr_p     long    0
401d4 127 00 00 00 00 | urx_buff_p      long    0
401d8 128 00 00 00 00 | dev_desc_buff_p long    0
401dc 129 00 00 00 00 | con_desc_buff_p long    0
401e0 12a 00 00 00 00 | cache_start_p   long    0
401e4 12b 00 00 00 00 | cache_end_p     long    0
401e8 12c             | if EMUPAD_MAX_PLAYER > 0
401e8 12c             | emupad_out_ptr  long    0
401e8 12c             | end
401e8 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
401ec 12d             | 
401ec 12d             | hdev_init_start
401ec 12d             | hdev_port       res     1
401ec 12d             | hdev_port       res     1
401ec 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
401ec 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
401ec 12d             | kbm_next_datax  res     1
401ec 12d             | kbm_next_datax  res     1
401ec 12d             | hub_intf_num    res     1
401ec 12d             | hub_intf_num    res     1
401ec 12d             | hub_next_datax  res     1
401ec 12d             | hub_next_datax  res     1
401ec 12d             | hub_status_chg  res     1
401ec 12d             | hub_status_chg  res     1
401ec 12d             | hub_port_status res     1
401ec 12d             | hub_port_status res     1
401ec 12d             | if HAVE_MOUSE
401ec 12d             | ms_intf_num     res     1
401ec 12d             | ms_intf_num     res     1
401ec 12d             | ms_in_max_pkt   res     1
401ec 12d             | ms_in_max_pkt   res     1
401ec 12d             | end
401ec 12d             | kb_intf_num     res     1
401ec 12d             | kb_intf_num     res     1
401ec 12d             | kb_interval     res     1
401ec 12d             | kb_interval     res     1
401ec 12d             | kb_in_max_pkt   res     1
401ec 12d             | kb_in_max_pkt   res     1
401ec 12d             | kb_max_index    res     1
401ec 12d             | kb_max_index    res     1
401ec 12d             | kb_led_states   res     1
401ec 12d             | kb_led_states   res     1
401ec 12d             | gp_intf_num     res     1
401ec 12d             | gp_intf_num     res     1
401ec 12d             | gp_interval     res     1
401ec 12d             | gp_interval     res     1
401ec 12d             | gp_max_index    res     1
401ec 12d             | gp_max_index    res     1
401ec 12d             | gp_descr_len    res     1+MAX_DEVICES
401ec 12d             | gp_descr_len    res     1+MAX_DEVICES
401ec 12d             | hdev_init_end
401ec 12d             | 
401ec 12d             | ' Initialized at cog startup:
401ec 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
401ec 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
401ec 12d             | iframe_ct_new   res     1
401ec 12d             | iframe_ct_new   res     1
401ec 12d             | iframe_ct_base  res     1
401ec 12d             | iframe_ct_base  res     1
401ec 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
401ec 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
401ec 12d             | 
401ec 12d             | ' This register block is reset to zero when a USB device connects
401ec 12d             | hreg_init_start
401ec 12d             | hstatus         res     1         ' Host status flags
401ec 12d             | hstatus         res     1         ' Host status flags
401ec 12d             | hctwait         res     1         ' Poll-based wait clocks
401ec 12d             | hctwait         res     1         ' Poll-based wait clocks
401ec 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
401ec 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
401ec 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
401ec 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
401ec 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
401ec 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
401ec 12d             | xfer_retry      res     1         ' Control transfer retry count
401ec 12d             | xfer_retry      res     1         ' Control transfer retry count
401ec 12d             | retry           res     1         ' Transaction retry count
401ec 12d             | retry           res     1         ' Transaction retry count
401ec 12d             | utx             res     1         ' Byte to transmit on USB
401ec 12d             | utx             res     1         ' Byte to transmit on USB
401ec 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
401ec 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
401ec 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
401ec 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
401ec 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
401ec 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
401ec 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
401ec 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
401ec 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
401ec 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
401ec 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
401ec 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
401ec 12d             | frame           res     1         ' USB 1ms frame counter value
401ec 12d             | frame           res     1         ' USB 1ms frame counter value
401ec 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
401ec 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
401ec 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
401ec 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
401ec 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
401ec 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
401ec 12d             | crc             res     1         ' Used for CRC16 calculation
401ec 12d             | crc             res     1         ' Used for CRC16 calculation
401ec 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
401ec 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
401ec 12d             | retval          res     1         ' Global success/fail return parameter
401ec 12d             | retval          res     1         ' Global success/fail return parameter
401ec 12d             | context_retval  res     1         ' Operation contextual return parameter
401ec 12d             | context_retval  res     1         ' Operation contextual return parameter
401ec 12d             | ' Device stuff
401ec 12d             | hdev_id         res     1+MAX_DEVICES
401ec 12d             | hdev_id         res     1+MAX_DEVICES
401ec 12d             | hdev_bcd        res     1
401ec 12d             | hdev_bcd        res     1
401ec 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
401ec 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
401ec 12d             | ' Keyboard/mouse stuff
401ec 12d             | hctrl_ep_addr   res     1
401ec 12d             | hctrl_ep_addr   res     1
401ec 12d             | hctrl_max_pkt   res     1
401ec 12d             | hctrl_max_pkt   res     1
401ec 12d             | hconfig_base    res     1
401ec 12d             | hconfig_base    res     1
401ec 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
401ec 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
401ec 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
401ec 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
401ec 12d             | hdev_class      res     1
401ec 12d             | hdev_class      res     1
401ec 12d             | hdev_subclass   res     1
401ec 12d             | hdev_subclass   res     1
401ec 12d             | hdev_protocol   res     1
401ec 12d             | hdev_protocol   res     1
401ec 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
401ec 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
401ec 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
401ec 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
401ec 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
401ec 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
401ec 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
401ec 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
401ec 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
401ec 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
401ec 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
401ec 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
401ec 12d             | if HAVE_MOUSE
401ec 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
401ec 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
401ec 12d             | end
401ec 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
401ec 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
401ec 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
401ec 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
401ec 12d             | hdev_ep_addr    res     1+MAX_DEVICES
401ec 12d             | hdev_ep_addr    res     1+MAX_DEVICES
401ec 12d             | hdev_out_addr   res     1
401ec 12d             | hdev_out_addr   res     1
401ec 12d             | 
401ec 12d             | if EMUPAD_MAX_PLAYER > 0
401ec 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
401ec 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
401ec 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
401ec 12d             | end
401ec 12d             | 
401ec 12d             | hreg_init_end
401ec 12d             | 
401ec 12d             | hidr_start
401ec 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
401ec 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
401ec 12d             | hidr_flags      res     1
401ec 12d             | hidr_flags      res     1
401ec 12d             | hidr_axis       res     3
401ec 12d             | hidr_axis       res     3
401ec 12d             | hidr_buttons    res     1
401ec 12d             | hidr_buttons    res     1
401ec 12d             | hidr_hats       res     1
401ec 12d             | hidr_hats       res     1
401ec 12d             | '' Above are actually useful values, 6 longs
401ec 12d             | hidr_id         res     1
401ec 12d             | hidr_id         res     1
401ec 12d             | hidr_state      res     1
401ec 12d             | hidr_state      res     1
401ec 12d             | hidr_size       res     1
401ec 12d             | hidr_size       res     1
401ec 12d             | hidr_count      res     1
401ec 12d             | hidr_count      res     1
401ec 12d             | hidr_offset     res     1
401ec 12d             | hidr_offset     res     1
401ec 12d             | hidr_usage_idx  res     1
401ec 12d             | hidr_usage_idx  res     1
401ec 12d             | hidr_lminmax    res     1
401ec 12d             | hidr_lminmax    res     1
401ec 12d             | hidr_pminmax    res     1
401ec 12d             | hidr_pminmax    res     1
401ec 12d             | hidr_type       res     1
401ec 12d             | hidr_type       res     1
401ec 12d             | hidr_end
401ec 12d             | 
401ec 12d             | ' Variables dependent on the system freqency
401ec 12d             | _var_64_lower_  res     1
401ec 12d             | _var_64_lower_  res     1
401ec 12d             | _var_64_upper_  res     1
401ec 12d             | _var_64_upper_  res     1
401ec 12d             | _12Mbps_        res     1
401ec 12d             | _12Mbps_        res     1
401ec 12d             | _1_5Mbps_       res     1
401ec 12d             | _1_5Mbps_       res     1
401ec 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
401ec 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
401ec 12d             | _1us_           res     1         ' 1us
401ec 12d             | _1us_           res     1         ' 1us
401ec 12d             | _10us_          res     1         ' 10us
401ec 12d             | _10us_          res     1         ' 10us
401ec 12d             | _33us_          res     1         ' 33us
401ec 12d             | _33us_          res     1         ' 33us
401ec 12d             | _txn_err_       res     1         ' 250us
401ec 12d             | _txn_err_       res     1         ' 250us
401ec 12d             | _500us_         res     1         ' 500us
401ec 12d             | _500us_         res     1         ' 500us
401ec 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
401ec 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
401ec 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
401ec 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
401ec 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
401ec 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
401ec 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
401ec 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
401ec 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
401ec 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
401ec 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
401ec 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
401ec 12d             | _preamble_wait_ res     1
401ec 12d             | _preamble_wait_ res     1
401ec 12d             | _1ms_           res     1         ' 1ms
401ec 12d             | _1ms_           res     1         ' 1ms
401ec 12d             | _2ms_           res     1         ' 2ms
401ec 12d             | _2ms_           res     1         ' 2ms
401ec 12d             | _suspend_wait_  res     1         ' 3ms
401ec 12d             | _suspend_wait_  res     1         ' 3ms
401ec 12d             | _4ms_           res     1         ' 4ms
401ec 12d             | _4ms_           res     1         ' 4ms
401ec 12d             | _xfer_wait_     res     1         ' 5ms
401ec 12d             | _xfer_wait_     res     1         ' 5ms
401ec 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
401ec 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
401ec 12d             | _reset_hold_    res     1         ' 15ms
401ec 12d             | _reset_hold_    res     1         ' 15ms
401ec 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
401ec 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
401ec 12d             | _21ms_          res     1         ' 21ms
401ec 12d             | _21ms_          res     1         ' 21ms
401ec 12d             | _100ms_         res     1         ' 100ms
401ec 12d             | _100ms_         res     1         ' 100ms
401ec 12d             | _500ms_         res     1         ' 500ms
401ec 12d             | _500ms_         res     1         ' 500ms
401ec 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
401ec 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
401ec 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
401ec 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
401ec 12d             | '------------------------------------------------------------------------------
401ec 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
401ec 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
401ec 12d             | _usb_d_ls_nco_  res     1
401ec 12d             | _usb_d_ls_nco_  res     1
401ec 12d             | _usb_h_fs_nco_  res     1
401ec 12d             | _usb_h_fs_nco_  res     1
401ec 12d             | _usb_d_fs_nco_  res     1
401ec 12d             | _usb_d_fs_nco_  res     1
401ec 12d             | '------------------------------------------------------------------------------
401ec 12d             | ' Scratch registers
401ec 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
401ec 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
401ec 12d             | htmp1           res     1
401ec 12d             | htmp1           res     1
401ec 12d             | htmp2           res     1
401ec 12d             | htmp2           res     1
401ec 12d             | htmp3           res     1
401ec 12d             | htmp3           res     1
401ec 12d             | hrep            res     1         ' Repeat count
401ec 12d             | hrep            res     1         ' Repeat count
401ec 12d             | hsave0          res     1         ' Subroutine parameter saves
401ec 12d             | hsave0          res     1         ' Subroutine parameter saves
401ec 12d             | hsave1          res     1
401ec 12d             | hsave1          res     1
401ec 12d             | hsave2          res     1
401ec 12d             | hsave2          res     1
401ec 12d             | isrtmp1         res     1
401ec 12d             | isrtmp1         res     1
401ec 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
401ec 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
401ec 12d             | hr0             res     1         ' Multi-purpose registers
401ec 12d             | hr0             res     1         ' Multi-purpose registers
401ec 12d             | hr1             res     1
401ec 12d             | hr1             res     1
401ec 12d             | hr2             res     1
401ec 12d             | hr2             res     1
401ec 12d             | hr3             res     1
401ec 12d             | hr3             res     1
401ec 12d             | hpar1           res     1         ' Routine entry/exit parameters
401ec 12d             | hpar1           res     1         ' Routine entry/exit parameters
401ec 12d             | hpar2           res     1
401ec 12d             | hpar2           res     1
401ec 12d             | hpar3           res     1
401ec 12d             | hpar3           res     1
401ec 12d             | hct2            res     1         ' Function response bus turn-around timer
401ec 12d             | hct2            res     1         ' Function response bus turn-around timer
401ec 12d             | hct3            res     1         ' Keyboard/mouse poll timer
401ec 12d             | hct3            res     1         ' Keyboard/mouse poll timer
401ec 12d             | mod_cnt         res     1         ' Used in idle loops
401ec 12d             | mod_cnt         res     1         ' Used in idle loops
401ec 12d             |                 fit     $1F0
401ec 12d             |                 org     $200
401ec 200             | hlut_start
401ec 200             | 
401ec 200             | '------------------------------------------------------------------------------
401ec 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
401ec 200             | ' settings to startup defaults.
401ec 200             | '------------------------------------------------------------------------------
401ec 200             | ' On entry:
401ec 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
401ec 200             | '------------------------------------------------------------------------------
401ec 200             | set_speed_full
401ec 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
401f0 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
401f4 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
401f8 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
401fc 204             | '                ret                             wcz     ' Restore caller flags on exit
401fc 204             | 
401fc 204             | '------------------------------------------------------------------------------
401fc 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
401fc 204             | ' is a downstream hub connected (not yet implemented), the baud generator
401fc 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
401fc 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
401fc 204             | ' putting the smart pins into reset.
401fc 204             | '------------------------------------------------------------------------------
401fc 204             | ' On entry:
401fc 204             | ' On exit: CZ flags restored to caller states
401fc 204             | '------------------------------------------------------------------------------
401fc 204             | set_speed_low
401fc 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
40200 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
40204 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
40208 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
4020c 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
40210 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
40214 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
40218 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
4021c 20c             | 
4021c 20c             | '------------------------------------------------------------------------------
4021c 20c             | ' Perform configuration stuff required when a device intitially connects.
4021c 20c             | '------------------------------------------------------------------------------
4021c 20c             | ' On entry:
4021c 20c             | ' On exit:
4021c 20c             | '------------------------------------------------------------------------------
4021c 20c             | on_connect
4021c 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
40220 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
40224 20e             | .retry
40224 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
40228 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
4022c 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
40230 211 00 08 00 FF 
40234 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
40238 213 18 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
4023c 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
40240 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
40244 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
40248 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
4024c 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40250 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
40254 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
40258 21b 4C 03 B0 FD |                 call    #poll_waitx
4025c 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
40260 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
40264 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
40268 21f B8 FF 9F FD |                 jmp     #.retry
4026c 220             | .get_dev_desc
4026c 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
40270 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
40274 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
40278 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
4027c 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
40280 225 88 FB BF FD |                 call    #reset
40284 226 30 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
40288 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
4028c 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
40290 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
40294 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40298 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
4029c 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
402a0 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
402a4 22e 04 00 00 FF 
402a8 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
402ac 230 34 FA BF FD |                 call    #calc_crc5
402b0 231 18 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
402b4 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
402b8 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
402bc 234 F7 AD C2 FA |                 rdbyte  total_data, pb
402c0 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
402c4 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
402c8 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
402cc 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
402d0 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
402d4 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
402d8 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
402dc 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
402e0 23d C4 02 B0 FD |                 call    #poll_waitx
402e4 23e 20 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
402e8 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
402ec 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
402f0 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
402f4 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
402f8 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
402fc 244 2D 00 64 5D |         if_nz   ret
40300 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
40304 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
40308 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
4030c 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
40310 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
40314 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
40318 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
4031c 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
40320 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
40324 24e 2C FB 9F CD |         if_b    jmp     #host_error
40328 24f 10 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
4032c 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
40330 251 2D EC 63 FD |                 call    pa
40334 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
40338 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
4033c 254 2C EC 63 FD |                 jmp     pa
40340 255             | 
40340 255             | '------------------------------------------------------------------------------
40340 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
40340 255             | ' Status reporting is always in the function-to-host direction.
40340 255             | '------------------------------------------------------------------------------
40340 255             | ' On entry:
40340 255             | '   PTRA - start address of the SETUP data in hub.
40340 255             | '   PB - start address of the buffer/struct to be written to during the IN data
40340 255             | '     stage.
40340 255             | '   ep_addr_pid - device address, endpoint and CRC5.
40340 255             | ' On exit:
40340 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
40340 255             | '     contains the count of data stage bytes actually received, which must
40340 255             | '     always be <= the count requested.
40340 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
40340 255             | '     more specific USB operation error code.
40340 255             | '------------------------------------------------------------------------------
40340 255             | control_read
40340 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
40344 256 F8 8F 03 F6 |                 mov     hpar2, ptra
40348 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
4034c 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
40350 259             | .xfer_start
40350 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
40354 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
40358 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
4035c 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
40360 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
40364 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
40368 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
4036c 260 61 00 00 FF 
40370 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
40374 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
40378 263             | .data
40378 263 56 B1 02 F6 |                 mov     pkt_data, total_data
4037c 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
40380 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
40384 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
40388 267             | .nak_retry
40388 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
4038c 268             | .in_retry
4038c 268 BC F6 BF FD |                 call    #txn_in
40390 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
40394 26a 28 00 90 AD |         if_z    jmp     #.commit
40398 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
4039c 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
403a0 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
403a4 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
403a8 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
403ac 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
403b0 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
403b4 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
403b8 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
403bc 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
403c0 275             | .commit
403c0 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
403c4 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
403c8 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
403cc 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
403d0 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
403d4 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
403d8 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
403dc 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
403e0 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
403e4 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
403e8 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
403ec 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
403f0 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
403f4 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
403f8 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
403fc 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
40400 285             | .pre_status
40400 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
40404 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
40408 287 00 B0 06 F6 |                 mov     pkt_data, #0
4040c 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
40410 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
40414 28a 61 00 00 FF 
40418 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
4041c 28c             | .out_retry
4041c 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
40420 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40424 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
40428 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
4042c 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
40430 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
40434 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
40438 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
4043c 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
40440 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
40444 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
40448 297             | ' I've encountered transfer STALL, even though the data looks correct, and
40448 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
40448 297             | ' ControlRead() transfer gets things unstuck most of the time...
40448 297             | .xfer_retry
40448 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
4044c 298 58 01 B0 FD |                 call    #poll_waitx
40450 299 8C F9 BF FD |                 call    #wait_txn_ok
40454 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
40458 29b C7 F1 03 F6 |                 mov     ptra, hpar2
4045c 29c C8 EF 03 F6 |                 mov     pb, hpar3
40460 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
40464 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
40468 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
4046c 2a0             | 
4046c 2a0             | '------------------------------------------------------------------------------
4046c 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
4046c 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
4046c 2a0             | ' the SETUP data struct is filled with the required values.
4046c 2a0             | '------------------------------------------------------------------------------
4046c 2a0             | ' On entry:
4046c 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
4046c 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
4046c 2a0             | '     stage.
4046c 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
4046c 2a0             | ' On exit:
4046c 2a0             | '   retval - used to convey the success/failure of each stage.
4046c 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
4046c 2a0             | '     more specific USB operation error code.
4046c 2a0             | '------------------------------------------------------------------------------
4046c 2a0             | control_write
4046c 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
40470 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
40474 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
40478 2a3             | 
40478 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
4047c 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
40480 2a5 F7 91 03 F6 |                 mov     hpar3, pb
40484 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
40488 2a7             | .xfer_start
40488 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
4048c 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
40490 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
40494 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40498 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
4049c 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
404a0 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
404a4 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
404a8 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
404ac 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
404b0 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
404b4 2b2             | .data
404b4 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
404b8 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
404bc 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
404c0 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
404c4 2b6             | .out_retry
404c4 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
404c8 2b7 88 F6 BF FD |                 call    #txn_out
404cc 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
404d0 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
404d4 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
404d8 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
404dc 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
404e0 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
404e4 2be             | .commit
404e4 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
404e8 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
404ec 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
404f0 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
404f4 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
404f8 2c3             | pre_status_in
404f8 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
404fc 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
40500 2c5             | .status_retry
40500 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
40504 2c6 44 F5 BF FD |                 call    #txn_in
40508 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
4050c 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
40510 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
40514 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
40518 2cb 2D 00 64 AD |         if_z    ret
4051c 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
40520 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
40524 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
40528 2cf             | '               ret                                     ' Caller must handle transfer retirement
40528 2cf             | 
40528 2cf             | '------------------------------------------------------------------------------
40528 2cf             | ' Execute an IN interrupt transaction.
40528 2cf             | '------------------------------------------------------------------------------
40528 2cf             | ' On entry:
40528 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
40528 2cf             | '   hpar2 - Address of the IN data buffer
40528 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
40528 2cf             | ' On exit:
40528 2cf             | '   retval - the result of the operation.
40528 2cf             | '   hpar3 - the count of IN data bytes actually received.
40528 2cf             | '------------------------------------------------------------------------------
40528 2cf             | do_int_in
40528 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
4052c 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
40530 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
40534 2d2             | 
40534 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
40538 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
4053c 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
40540 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
40544 2d6             | .retry
40544 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
40548 2d7 00 F5 BF FD |                 call    #txn_in
4054c 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
40550 2d9 1C 00 90 AD |         if_z    jmp     #.commit
40554 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
40558 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
4055c 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
40560 2dd 54 00 B0 FD |                 call    #retry_wait
40564 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
40568 2df 18 00 90 AD |         if_z    jmp     #.post_ret
4056c 2e0 D4 FF 9F FD |                 jmp     #.retry
40570 2e1             | .commit
40570 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
40574 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
40578 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
4057c 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
40580 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
40584 2e6             | .post_ret
40584 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
40588 2e7             | 
40588 2e7             | 
40588 2e7             | '------------------------------------------------------------------------------
40588 2e7             | ' Resets the downstream hub port to FS
40588 2e7             | '------------------------------------------------------------------------------
40588 2e7             | dwnstream_reset
40588 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
4058c 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
40590 2e9             | 
40590 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
40594 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
40598 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
4059c 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
405a0 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
405a4 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
405a8 2ef             | 
405a8 2ef             | '------------------------------------------------------------------------------
405a8 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
405a8 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
405a8 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
405a8 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
405a8 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
405a8 2ef             | '------------------------------------------------------------------------------
405a8 2ef             | ' On entry:
405a8 2ef             | '   hctwait - wait interval in sysclocks.
405a8 2ef             | ' On exit:
405a8 2ef             | '------------------------------------------------------------------------------
405a8 2ef             | poll_waitx
405a8 2ef 1A 92 63 FD |                 getct   hct2
405ac 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
405b0 2f1             | .wait
405b0 2f1 FF 25 CC FB |                 jnct2   #.wait
405b4 2f2 2D 00 64 FD |                 ret
405b8 2f3             | 
405b8 2f3             | '------------------------------------------------------------------------------
405b8 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
405b8 2f3             | '------------------------------------------------------------------------------
405b8 2f3             | ' On entry:
405b8 2f3             | '   retval - transaction response PID or error code.
405b8 2f3             | ' On exit:
405b8 2f3             | '------------------------------------------------------------------------------
405b8 2f3             | retry_wait
405b8 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
405bc 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
405c0 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
405c4 2f6 14 00 90 AD |         if_z    jmp     #.nak
405c8 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
405cc 2f8 D8 FF BF FD |                 call    #poll_waitx
405d0 2f9             | .dec
405d0 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
405d4 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
405d8 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
405dc 2fc             | .nak
405dc 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
405e0 2fd C4 FF BF FD |                 call    #poll_waitx
405e4 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
405e8 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
405ec 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
405f0 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
405f4 302 2D 00 64 FD |                 ret
405f8 303             | 
405f8 303             | host_reset
405f8 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
405fc 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
40600 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
40600 305 BD 01 05 FF 
40604 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
40608 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
4060c 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
40610 309             | ' Check to see if the system clock has been changed.
40610 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
40614 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
40618 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
4061c 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
40620 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
40624 30e 40 46 62 FD |                 dirl    dp
40628 30f             | 
40628 30f 28 02 64 FD |                 setq    #1
4062c 310 80 00 80 FF 
40630 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
40634 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
40638 313             | .enable
40638 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
4063c 314 41 46 62 FD |                 dirh    dp
40640 315 1F 36 63 FD |                 waitx   _1us_
40644 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
40648 317             | 
40648 317             |                 ' Handle Port protection enable and startup delay
40648 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
4064c 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
40650 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
40654 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
40658 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
4065c 31c             | 
4065c 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
40660 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
40664 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
40668 31f 00 00 04 F6 |                 mov     0-0, #0
4066c 320             | .regloop
4066c 320             | 
4066c 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
4066c 320             | 
4066c 320             | discon_entry
4066c 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
40670 321             | 
40670 321             |               
40670 321             |         if HAVE_HIDPAD
40670 321 D4 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
40674 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
40678 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
4067c 324 F7 01 68 FC |                 wrlong  #0,pb
40680 325             |         end
40680 325             |         if EMUPAD_MAX_PLAYER > 0
40680 325             |         end
40680 325             | 
40680 325             |                 ' Fall through to disconnected loop
40680 325             | 
40680 325             | '-----------------------------------------------------------------------------------------------------------------
40680 325             | ' Device connect handling (Section 7.1.7.3).
40680 325             | '-----------------------------------------------------------------------------------------------------------------
40680 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
40680 325             | ' device to connect (Section 7.1.7.3).
40680 325             | '-----------------------------------------------------------------------------------------------------------------
40680 325             | disconnected
40680 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
40684 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
40688 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
4068c 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
40690 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
40694 32a             |         if ACTIVITY_LED >= 0
40694 32a             |         end
40694 32a 22 A7 82 FA |                 rqpin   urx, dm
40698 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
4069c 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
406a0 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
406a4 32e             | .se1_test
406a4 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
406a8 32f FC FE BF FD |                 call    #poll_waitx
406ac 330 22 A7 82 FA |                 rqpin   urx, dm
406b0 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
406b4 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
406b8 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
406bc 334             | .se1            'SE1 is a fatal error condition
406bc 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
406c0 335 E4 FE BF FD |                 call    #poll_waitx
406c4 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
406c8 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
406cc 338             | .connect_test                                           ' Test lines until stable J/K state seen
406cc 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
406d0 339 22 A7 82 FA |                 rqpin   urx, dm
406d4 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
406d8 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
406dc 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
406e0 33d             | connected
406e0 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
406e4 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
406e8 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
406ec 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
406f0 341             | .set_pulse
406f0 341 1A 64 63 FD |                 getct   _pulse_time_
406f4 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
406f8 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
406f8 343             | ' of 1ms and make a correction, if necessary.
406f8 343             | '                mov     htmp, _1ms_
406f8 343             | '                subs    htmp, iframe_delta
406f8 343             | '                adds    _frame1ms_clks_, htmp
406f8 343             | '                debug(udec(_frame1ms_clks_))
406f8 343             | 
406f8 343             |                 ' Fall through to idle/processing loop
406f8 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
406fc 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
40700 345             | 
40700 345             | hidle
40700 345 22 A7 82 FA |                 rqpin   urx, dm
40704 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
40708 347 98 00 90 CD |         if_c    jmp     #.se0_test
4070c 348 24 06 70 FD |                 pollct3                         wc
40710 349 68 00 90 3D |         if_nc   jmp     #.nopoll
40714 34a 1A 94 63 FD |                 getct   hct3
40718 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
4071c 34c             | 
4071c 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
40720 34d 00 70 E3 F8 |                 getbyte htmp
40724 34e             | 
40724 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
40728 34f 84 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
4072c 350 40 00 90 AD |         if_z    jmp     #.poll
40730 351             | 
40730 351             |         if _HAVE_GAMEPAD
40730 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
40734 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
40738 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
4073c 354 0C 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
40740 355 2C 00 90 AD |         if_z    jmp     #.poll
40744 356             |         end
40744 356             | 
40744 356             |         if HAVE_MOUSE
40744 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
40748 357 30 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
4074c 358 20 00 90 AD |         if_z    jmp     #.poll
40750 359             |         end
40750 359             | 
40750 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
40754 35a 98 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
40758 35b 14 00 90 AD |         if_z    jmp     #.poll
4075c 35c             | 
4075c 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
40760 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
40764 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
40768 35f 98 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
4076c 360             |         if HAVE_MOUSE
4076c 360 30 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
40770 361             |         else
40770 361             |         end
40770 361             | 
40770 361             | .poll
40770 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
40774 362 2D EC 63 FD |                 call    pa
40778 363             | .skip_poll
40778 363             | 
40778 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
4077c 364             | 
4077c 364             | .nopoll
4077c 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
40780 365 44 00 90 AD |         if_z    jmp     #hsuspend
40784 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
40788 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
4078c 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
40790 369 1A 84 63 FD |                 getct   hr0
40794 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
40798 36b             |         if ACTIVITY_LED >= 0
40798 36b             |         end
40798 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
4079c 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
407a0 36d 5C FF 9F FD |                 jmp     #hidle
407a4 36e             | ' Check for extended SE0 state on the bus
407a4 36e             | .se0_test
407a4 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
407a8 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
407ac 370 22 A7 82 FA |                 rqpin   urx, dm
407b0 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
407b4 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
407b8 373 24 F6 BF FD |                 call    #wait_txn_ok
407bc 374 00 00 80 FF 
407c0 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
407c4 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
407c4 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
407c8 377             | 
407c8 377             | hsuspend
407c8 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
407cc 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
407d0 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
407d4 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
407d8 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
407dc 37c 00 96 07 F6 |                 mov     mod_cnt, #0
407e0 37d             | 
407e0 37d             |                 ' Fall through to resume wait loop
407e0 37d             | 
407e0 37d             | hwait_resume
407e0 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
407e4 37e 02 86 47 F0 |                 shr     hr1, #2
407e8 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
407ec 380             |         if ACTIVITY_LED >= 0
407ec 380             |         end
407ec 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
407f0 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
407f4 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
407f8 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
407fc 384 18 00 90 AD |         if_z    jmp     #.resume
40800 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
40804 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
40808 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
4080c 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
40810 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
40814 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
40818 38b             | .resume
40818 38b 22 05 28 FC |                 wypin   #OUT_K, dm
4081c 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
40820 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
40824 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
40828 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
4082c 390 1F 70 63 FD |                 waitx   htmp
40830 391 22 07 28 FC |                 wypin   #OUT_J, dm
40834 392 01 70 47 F0 |                 shr     htmp, #1
40838 393 1F 70 63 FD |                 waitx   htmp
4083c 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
40840 395 1A 92 62 FD |                 getct   iframe_ct_base
40844 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
40848 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
4084c 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
40850 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
40854 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
40858 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
4085c 39c             | 
4085c 39c             | '------------------------------------------------------------------------------
4085c 39c             | ' Send preamble to enable low-speed HUB ports
4085c 39c             | '------------------------------------------------------------------------------
4085c 39c             | ' On entry:
4085c 39c             | ' On exit:
4085c 39c             | '   USB baud rate set to low-speed
4085c 39c             | '------------------------------------------------------------------------------
4085c 39c             | utx_pre
4085c 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
40860 39d 40 46 62 FD |                 dirl    dp
40864 39e 28 02 64 FD |                 setq    #1
40868 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
4086c 3a0 58 44 62 FD |                 drvl    dm
40870 3a1 59 46 62 FD |                 drvh    dp
40874 3a2             | 
40874 3a2 1E 00 00 FF 
40878 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
4087c 3a4             | 
4087c 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
40880 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
40884 3a6 28 02 64 3D |         if_nc   setq    #1
40888 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
4088c 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
40890 3a9             | .l1
40890 3a9             | 
40890 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
40894 3aa 40 46 62 FD |                 dirl    dp
40898 3ab 28 02 64 FD |                 setq    #1
4089c 3ac 80 00 80 FF 
408a0 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
408a4 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
408a8 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
408ac 3b0 41 46 62 FD |                 dirh    dp
408b0 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
408b4 3b2             | 
408b4 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
408b8 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
408bc 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
408c0 3b5             | 
408c0 3b5             | hlut_end
408c0 3b5             |                 fit     $400
408c0 3b5             |                 orgh
408c0                 | if OVERLAP_MEMORY
408c0                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
408c0                 | end
408c0                 | '------------------------------------------------------------------------------
408c0                 | ' Routines called from cog space.
408c0                 | '------------------------------------------------------------------------------
408c0                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
408c0                 | '------------------------------------------------------------------------------
408c0                 | 
408c0                 | '------------------------------------------------------------------------------
408c0                 | ' USB host cog initialization.
408c0                 | '------------------------------------------------------------------------------
408c0                 | usb_host_init
408c0                 |                 ' Initialize buffer pointers
408c0                 |         if OVERLAP_MEMORY
408c0                 |         else
408c0     3C 15 B0 FE |                 loc     pb, #hid_descr
408c4                 |         end
408c4     F7 4B 02 F6 |                 mov     hid_descr_p, pb
408c8                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
408c8                 |                 {
408c8                 |                 }
408c8                 |         
408c8                 |                 {
408c8                 |                 }
408c8                 |                 'loc     pb,#hkbd_report
408c8                 |                 'mov     hkbd_report_p,pb
408c8                 | 
408c8     04 1D B0 FE |                 loc     pb, #hub_descr
408cc     F7 4D 02 F6 |                 mov     hub_descr_p, pb
408d0     19 1D B0 FE |                 loc     pb, #urx_buff
408d4     F7 4F 02 F6 |                 mov     urx_buff_p, pb
408d8     91 1D B0 FE |                 loc     pb, #dev_desc_buff
408dc     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
408e0     9B 1D B0 FE |                 loc     pb, #con_desc_buff
408e4     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
408e8     14 15 B0 FE |                 loc     pb, #usb_cache_start
408ec     F7 55 02 F6 |                 mov     cache_start_p, pb
408f0     E5 1C B0 FE |                 loc     pb, #usb_cache_end
408f4     F7 57 02 F6 |                 mov     cache_end_p, pb
408f8                 | 
408f8                 |         if ERROR_LED >= 0
408f8                 |         end
408f8                 | 
408f8                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
408f8                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
408f8                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
408f8                 | ' Configure and enable the Serial Host USB port.
408f8     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
408fc                 | 
408fc                 | '------------------------------------------------------------------------------
408fc                 | ' Timing calculations happen before any interrupt(s) are enabled.
408fc                 | '------------------------------------------------------------------------------
408fc                 | ' On entry:
408fc                 | '   htmp - current CLKFREQ value.
408fc                 | '------------------------------------------------------------------------------
408fc                 | hinit_usb_timings
408fc                 | '                getct   htmp2
408fc     B8 59 02 F6 |                 mov     save_sysclk, htmp
40900     8D 5B 80 FF 
40904     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
40908     18 30 63 FD |                 getqx   _12Mbps_
4090c     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
40910     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
40914     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
40918     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
4091c     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
40920     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
40924     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
40928     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
4092c     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
40930     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
40934     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
40938     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
4093c     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
40940     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
40944     80 00 00 FF 
40948     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
4094c     18 2C 63 FD |                 getqx   _var_64_lower_
40950     19 2E 63 FD |                 getqy   _var_64_upper_
40954     28 2C 63 FD |                 setq    _var_64_lower_
40958     65 CD 1D FF 
4095c     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
40960     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
40964     01 00 00 FF 
40968     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
4096c     18 2C 63 FD |                 getqx   _var_64_lower_
40970     19 2E 63 FD |                 getqy   _var_64_upper_
40974     28 2C 63 FD |                 setq    _var_64_lower_
40978     A1 07 00 FF 
4097c     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
40980     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
40984     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
40988     09 36 57 F0 |                 shr     _1us_, #9               wc
4098c     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
40990     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
40994     18 38 63 FD |                 getqx   _10us_
40998     09 38 57 F0 |                 shr     _10us_, #9              wc
4099c     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
409a0     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
409a4     18 3A 63 FD |                 getqx   _33us_
409a8     09 3A 57 F0 |                 shr     _33us_, #9              wc
409ac     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
409b0     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
409b4     18 3C 63 FD |                 getqx   _txn_err_
409b8     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
409bc     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
409c0     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
409c4     18 3E 63 FD |                 getqx   _500us_
409c8     09 3E 57 F0 |                 shr     _500us_, #9             wc
409cc     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
409d0     01 00 00 FF 
409d4     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
409d8     18 40 63 FD |                 getqx   _txn_ok_ls_
409dc     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
409e0     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
409e4     01 00 00 FF 
409e8     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
409ec     18 42 63 FD |                 getqx   _txn_ok_fs_
409f0     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
409f4     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
409f8     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
409fc     05 00 00 FF 
40a00     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
40a04     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
40a08     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
40a0c     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
40a10     1C 00 00 FF 
40a14     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
40a18     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
40a1c     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
40a20     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
40a24     00 00 00 FF 
40a28     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
40a2c     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
40a30     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
40a34     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
40a38     04 00 00 FF 
40a3c     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
40a40     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
40a44     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
40a48     8D 5B 00 FF 
40a4c     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
40a50     18 4C 63 FD |                 getqx   _preamble_wait_
40a54     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
40a58     01 00 00 FF 
40a5c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
40a60     18 2C 63 FD |                 getqx   _var_64_lower_
40a64     19 2E 63 FD |                 getqy   _var_64_upper_
40a68     28 2C 63 FD |                 setq    _var_64_lower_
40a6c     01 00 00 FF 
40a70     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
40a74     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
40a78     09 4E 57 F0 |                 shr     _1ms_, #9               wc
40a7c     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
40a80     FF FF 7F FF 
40a84     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
40a88     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
40a8c     A7 51 03 F6 |                 mov     _2ms_, _1ms_
40a90     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
40a94     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
40a98     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
40a9c     A7 55 03 F6 |                 mov     _4ms_, _1ms_
40aa0     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
40aa4     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
40aa8     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
40aac     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
40ab0     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
40ab4     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
40ab8     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
40abc     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
40ac0     A7 59 03 F6 |                 mov     _8ms_, _1ms_
40ac4     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
40ac8     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
40acc     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
40ad0     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
40ad4     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
40ad8     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
40adc     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
40ae0     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
40ae4     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
40ae8     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
40aec     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
40af0                 | '        _ret_   mov     _1sec_, save_sysclk
40af0                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
40af0                 | '                ret
40af0                 | {
40af0                 | }
40af0                 | 
40af0                 | '------------------------------------------------------------------------------
40af0                 | ' Parse a configuration descriptor chain to see if the device is a recognized
40af0                 | ' one. If it is, start the task progression that will configure the device for
40af0                 | ' use.
40af0                 | '------------------------------------------------------------------------------
40af0                 | ' On entry:
40af0                 | '   hconfig_base - start address of the cached config descriptor chain.
40af0                 | ' On exit:
40af0                 | '------------------------------------------------------------------------------
40af0                 | hparse_con_desc
40af0     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
40af4     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
40af8     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
40afc     4E 70 FF F9 |                 movbyts htmp,#%%1032
40b00     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
40b04                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
40b04                 | 
40b04     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
40b08     6E ED 03 F1 |                 add     pa, hconfig_base
40b0c     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
40b10                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
40b10                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
40b10                 | ' that defines a keyboard and/or mouse.
40b10     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
40b14                 | .next_intf
40b14     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
40b18     B8 01 90 3D |         if_ae   jmp     #hset_config
40b1c     6E F3 03 F6 |                 mov     ptrb, hconfig_base
40b20     75 F3 03 F1 |                 add     ptrb, hnext_desc
40b24     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
40b28     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
40b2c     0C 00 90 AD |         if_z    jmp     #.intf
40b30     80 71 C7 FA |                 rdbyte  htmp, ptrb
40b34     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
40b38     D8 FF 9F FD |                 jmp     #.next_intf
40b3c                 | .intf
40b3c     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
40b40     00 90 07 F6 |                 mov     hpar3, #0
40b44     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
40b48     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
40b4c     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
40b50     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
40b54                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
40b54                 | 
40b54                 | .endp
40b54     80 71 C7 FA |                 rdbyte  htmp, ptrb
40b58     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
40b5c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
40b60     78 00 90 3D |         if_ae   jmp     #.get_device
40b64     6E F3 03 F6 |                 mov     ptrb, hconfig_base
40b68     75 F3 03 F1 |                 add     ptrb, hnext_desc
40b6c     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
40b70     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
40b74     64 00 90 AD |         if_z    jmp     #.get_device
40b78     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
40b7c     04 00 90 AD |         if_z    jmp     #.get_ep
40b80     D0 FF 9F FD |                 jmp     #.endp
40b84                 | .get_ep
40b84     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
40b88     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
40b8c     0F 86 67 F0 |                 shl     hr1, #8 + 7
40b90     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
40b94     3F 00 00 FF 
40b98     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
40b9c     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
40ba0     00 8E 0F F2 |                 cmp     hpar2, #0               wz
40ba4     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
40ba8     00 90 0F F2 |                 cmp     hpar3, #0               wz
40bac     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
40bb0     A0 FF 9F FD |                 jmp     #.endp
40bb4                 | .in_ep
40bb4     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
40bb8     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
40bbc                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
40bbc     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
40bc0     C2 89 DB F8 |                 setbyte hr2, hr0, #3
40bc4     8C FF 9F FD |                 jmp     #.endp
40bc8                 | .out_ep
40bc8     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
40bcc     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
40bd0                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
40bd0     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
40bd4     C2 8B DB F8 |                 setbyte hr3, hr0, #3
40bd8     78 FF 9F FD |                 jmp     #.endp
40bdc                 | 
40bdc                 | .get_device
40bdc     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
40be0     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
40be4     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
40be8     64 00 90 AD |         if_z    jmp     #.gamepad
40bec     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
40bf0     A8 00 90 AD |         if_z    jmp     #.hub
40bf4     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
40bf8     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
40bfc                 |  '               cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
40bfc     00 E6 0E F2 |            cmp     hdev_protocol, #INTF_PROTO_NONE     wz
40c00     4C 00 90 AD |         if_z    jmp     #.gamepad
40c04     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
40c08     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
40c0c                 | .keyboard
40c0c     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
40c10                 |         if HAVE_MOUSE
40c10     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
40c14                 |         else
40c14                 |         end
40c14     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
40c18     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
40c1c     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
40c20     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
40c24     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
40c28     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
40c2c                 |                 'debug(udec(kb_intf_num))
40c2c                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
40c2c     E4 FE 9F FD |                 jmp     #.next_intf
40c30                 | if HAVE_MOUSE
40c30                 | .mouse
40c30     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
40c34     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
40c38     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
40c3c     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
40c40     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
40c44                 |                 'getbyte ms_interval, hr2, #3
40c44     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
40c48     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
40c4c                 |                 'debug(udec(kb_intf_num))
40c4c                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
40c4c     C4 FE 9F FD |                 jmp     #.next_intf
40c50                 | end
40c50                 | .gamepad
40c50     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
40c54     C7 71 63 F5 |                 xor     htmp, hpar2
40c58     3F 00 00 FF 
40c5c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
40c60     B0 FE 9F AD |         if_z    jmp     #.next_intf
40c64                 |         if HAVE_MOUSE
40c64     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
40c68     C7 71 63 F5 |                 xor     htmp, hpar2
40c6c     3F 00 00 FF 
40c70     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
40c74     9C FE 9F AD |         if_z    jmp     #.next_intf
40c78                 |         end
40c78     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
40c7c     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
40c80     90 FE 9F 5D |         if_nz   jmp     #.next_intf
40c84                 | 
40c84     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
40c88     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
40c8c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
40c90     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
40c94     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
40c98                 |                 'debug(udec(gp_intf_num))
40c98                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
40c98     78 FE 9F FD |                 jmp     #.next_intf
40c9c                 | .hub
40c9c     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
40ca0     70 FE 9F 5D |         if_nz   jmp     #.next_intf
40ca4     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
40ca8     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
40cac     64 FE 9F 5D |         if_nz   jmp     #.next_intf
40cb0     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
40cb4     5C FE 9F 5D |         if_nz   jmp     #.next_intf
40cb8     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
40cbc     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
40cc0     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
40cc4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
40cc8     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
40ccc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
40cd0                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
40cd0     40 FE 9F FD |                 jmp     #.next_intf
40cd4                 | 
40cd4                 | '------------------------------------------------------------------------------
40cd4                 | ' If a newly-connected device is recognized, do whatever is needed to configure
40cd4                 | ' it according to its function, or functions. In the case of this boot protocol
40cd4                 | ' keyboard/mouse class driver:
40cd4                 | ' - SetConfiguration(config_num)
40cd4                 | ' - SetProtocol(boot)
40cd4                 | ' - SetIdle(indefinite)
40cd4                 | ' - Enter the device interrupt IN polling task stage.
40cd4                 | '------------------------------------------------------------------------------
40cd4                 | ' On entry:
40cd4                 | ' On exit:
40cd4                 | '------------------------------------------------------------------------------
40cd4                 | hset_config
40cd4                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
40cd4                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
40cd4     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
40cd8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
40cdc     00 00 0C F2 |                 cmp     0-0, #0                 wz
40ce0     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
40ce4                 |         if HAVE_MOUSE
40ce4     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
40ce8                 |         end
40ce8     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
40cec     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
40cf0                 | .set_config
40cf0     6C 0E D0 FE |                 loc     ptra, #set_config
40cf4     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
40cf8     6E ED 03 F1 |                 add     pa, hconfig_base
40cfc     F6 8D C3 FA |                 rdbyte  hpar1, pa
40d00     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
40d04     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
40d08     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
40d0c     A0 02 A0 FD |                 call    #control_write
40d10     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40d14     2D 00 64 5D |         if_nz   ret
40d18                 | .kbd_config
40d18     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
40d1c     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
40d20                 | 
40d20     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
40d24     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
40d28     3F 00 00 FF 
40d2c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
40d30     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
40d34                 | 
40d34     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
40d38     34 0E D0 FE |                 loc     ptra, #set_protocol
40d3c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
40d40     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
40d44     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
40d48     A0 02 A0 FD |                 call    #control_write
40d4c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40d50     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
40d54     E4 02 90 5D |         if_nz   jmp     #.notify_client
40d58     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
40d5c     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
40d60     30 03 B0 FD |                 call    #hset_idle
40d64                 |                 'cmp     retval, #PID_ACK        wz
40d64                 |         'if_nz   mov     hkbd_ep_addr, #0
40d64                 |         'if_nz   jmp     #.notify_client
40d64     A8 99 02 F6 |                 mov     hctwait, _2ms_
40d68     EF 02 A0 FD |                 call    #poll_waitx
40d6c     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
40d70     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
40d74     90 17 90 FE |                 loc     pa, #hkbd_led_rep
40d78     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
40d7c     2C 03 B0 FD |                 call    #hset_kbdled_report
40d80     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40d84     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
40d88     B0 02 90 5D |         if_nz   jmp     #.notify_client
40d8c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
40d90     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
40d94     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
40d98     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
40d9c     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
40da0     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
40da4     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
40da8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
40dac     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
40db0     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
40db4     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
40db8                 |         if !!HAVE_MOUSE
40db8                 |         end
40db8                 | 
40db8                 | .mouse_config
40db8                 | if HAVE_MOUSE
40db8     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
40dbc     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
40dc0     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
40dc4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
40dc8     3F 00 00 FF 
40dcc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
40dd0     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
40dd4                 | 
40dd4                 |                 debug("mouse passed addr check")
40dd4                 | 
40dd4     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
40dd8     00 00 80 FF 
40ddc     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
40de0     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
40de4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
40de8     55 02 A0 FD |                 call    #control_read
40dec     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40df0     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
40df4     44 02 90 5D |         if_nz   jmp     #.notify_client
40df8     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
40dfc     56 01 00 F6 |                 mov     0-0, total_data
40e00     1B 01 A0 FD |                 call    #get_hid_descr_buffer
40e04                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
40e04                 | 
40e04     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
40e08     64 0D D0 FE |                 loc     ptra, #set_protocol
40e0c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
40e10     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
40e14     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
40e18     A0 02 A0 FD |                 call    #control_write
40e1c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40e20     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
40e24     14 02 90 5D |         if_nz   jmp     #.notify_client
40e28                 |                 debug("mouse passed SetProtocol")
40e28     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
40e2c     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
40e30     60 02 B0 FD |                 call    #hset_idle
40e34                 |                 'cmp     retval, #PID_ACK        wz
40e34                 |         'if_nz   mov     hmouse_ep_addr, #0
40e34                 |         'if_nz   jmp     #.notify_client
40e34                 |                 debug("mouse passed SetIdle")
40e34     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
40e38     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
40e3c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
40e40     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
40e44     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
40e48     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
40e4c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
40e50     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
40e54     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
40e58     3F 00 00 FF 
40e5c     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
40e60     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
40e64     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
40e68     D0 01 90 FD |                 jmp     #.notify_client
40e6c                 | end
40e6c                 | .gamepad_config
40e6c                 | if _HAVE_GAMEPAD
40e6c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
40e70     00 00 0C F2 |                 cmp     0-0, #0                 wz
40e74     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
40e78     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
40e7c     00 70 03 F6 |                 mov     htmp, 0-0
40e80     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
40e84     3F 00 00 FF 
40e88     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
40e8c     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
40e90                 | 
40e90     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
40e94     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
40e98     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
40e9c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
40ea0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
40ea4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
40ea8     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
40eac     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
40eb0     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
40eb4     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
40eb8     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
40ebc     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
40ec0     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
40ec4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
40ec8                 | 
40ec8                 |                 if EMUPAD_MAX_PLAYER > 0
40ec8                 |                 
40ec8                 | .rule_loop           
40ec8                 |                 end
40ec8                 | 
40ec8     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
40ecc     5C 00 90 AD |         if_e    jmp     #.xinput
40ed0     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
40ed4     00 70 03 F6 |                 mov     htmp,0-0
40ed8     01 A6 02 FF 
40edc     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
40ee0     7C 00 90 AD |         if_e    jmp     #.ps3
40ee4                 | 
40ee4     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
40ee8     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
40eec     00 00 80 5F 
40ef0     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
40ef4     03 00 80 AF 
40ef8     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
40efc     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
40f00     1B 01 A0 FD |                 call    #get_hid_descr_buffer
40f04     55 02 A0 FD |                 call    #control_read
40f08     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40f0c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
40f10     00 00 04 56 |         if_nz   mov     0-0, #0
40f14     24 01 90 5D |         if_nz   jmp     #.notify_client
40f18     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
40f1c     56 01 00 F6 |                 mov     0-0, total_data
40f20     1B 01 A0 FD |                 call    #get_hid_descr_buffer
40f24                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
40f24                 | 
40f24     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
40f28     10 01 90 FD |                 jmp     #.notify_client
40f2c                 | .xinput
40f2c     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
40f30     2D EF 03 F6 |                 mov     pb,hdev_port
40f34     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
40f38     03 EE 27 F3 |                 fle     pb,#3
40f3c     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
40f40     02 EF 47 FC |                 wrbyte  pb, ptra[2]
40f44                 | 
40f44     03 B0 06 F6 |                 mov     pkt_data, #3
40f48     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
40f4c     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
40f50     5A 00 A0 FD |                 call    #txn_out
40f54     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
40f58                 | 
40f58     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
40f5c     DC 00 90 FD |                 jmp     #.notify_client
40f60                 | .ps3
40f60     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
40f64     2D EF 03 F6 |                 mov     pb,hdev_port
40f68     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
40f6c     04 EE 27 F3 |                 fle     pb,#4
40f70     F7 EF C3 F9 |                 decod   pb
40f74     09 EF 47 FC |                 wrbyte  pb, ptra[9]
40f78                 | 
40f78     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
40f7c     00 0C D0 FE |                 loc     ptra, #set_report
40f80     01 00 80 FF 
40f84     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
40f88     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
40f8c     03 61 5C FC |                 wrword  #48, ptra[wLength]
40f90     20 0C B0 FE |                 loc     pb, #ps3_command_buff
40f94     A0 02 A0 FD |                 call    #control_write
40f98                 | 
40f98     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
40f9c     E0 0B D0 FE |                 loc     ptra, #set_report
40fa0     01 00 80 FF 
40fa4     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
40fa8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
40fac     03 09 5C FC |                 wrword  #4, ptra[wLength]
40fb0     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
40fb4     A0 02 A0 FD |                 call    #control_write
40fb8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
40fbc     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
40fc0     00 00 04 56 |         if_nz   mov     0-0, #0
40fc4     74 00 90 5D |         if_nz   jmp     #.notify_client
40fc8                 | 
40fc8     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
40fcc     6C 00 90 FD |                 jmp     #.notify_client
40fd0                 | end
40fd0                 | 
40fd0                 | .hub_config
40fd0     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
40fd4     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
40fd8     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
40fdc     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
40fe0     3F 00 00 FF 
40fe4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
40fe8     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
40fec                 | 
40fec     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
40ff0     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
40ff4     26 EF 03 F6 |                 mov     pb, hub_descr_p
40ff8     55 02 A0 FD |                 call    #control_read
40ffc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41000     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
41004     34 00 90 5D |         if_nz   jmp     #.notify_client
41008                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
41008                 | 
41008     26 F1 03 F6 |                 mov     ptra, hub_descr_p
4100c     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
41010     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
41014                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
41014                 | .pwr_loop
41014     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
41018     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
4101c     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
41020     A0 02 A0 FD |                 call    #control_write
41024     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
41028                 | 
41028     B1 99 02 F6 |                 mov     hctwait, _500ms_
4102c     B0 99 02 F1 |                 add     hctwait, _100ms_
41030     EF 02 A0 FD |                 call    #poll_waitx
41034                 | 
41034     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
41038     00 00 90 FD |                 jmp     #.notify_client
4103c                 | 
4103c                 | .notify_client
4103c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
41040     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
41044                 |                 debug(uhex_long(hdev_type,hdev_type+1))
41044                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
41044     2D 00 64 FD |                 ret
41048                 | 
41048                 | '------------------------------------------------------------------------------
41048                 | ' Initialize the keyboard/mouse data area to start-up values.
41048                 | '------------------------------------------------------------------------------
41048                 | ' On entry:
41048                 | ' On exit:
41048                 | '------------------------------------------------------------------------------
41048                 | init_kbdm_data
41048     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
4104c     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
41050                 | 
41050     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
41054     2B ED 03 F6 |                 mov     pa, cache_end_p
41058                 | .loop
41058     61 01 4C FC |                 wrbyte  #0, ptra++
4105c     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
41060     F4 FF 9F CD |         if_b    jmp     #.loop
41064                 |         
41064                 |         if EMUPAD_MAX_PLAYER > 0
41064                 |         end
41064                 | 
41064                 | 
41064     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
41068                 | .regloop
41068     00 EC 8F F9 |                 altd    pa
4106c     00 00 04 F6 |                 mov     0-0, #0
41070     01 EC 07 F1 |                 add     pa, #1
41074     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
41078     EC FF 9F 5D |         if_nz   jmp     #.regloop
4107c                 | 
4107c     E1 E1 61 FF 
41080     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
41084     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
41088     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
4108c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
41090                 | 
41090     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
41094                 | 
41094                 | '------------------------------------------------------------------------------
41094                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
41094                 | ' function.
41094                 | '------------------------------------------------------------------------------
41094                 | ' On entry:
41094                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
41094                 | '   hpar2 - index number of the target interface.
41094                 | ' On exit:
41094                 | '------------------------------------------------------------------------------
41094                 | hset_idle
41094     A8 99 02 F6 |                 mov     hctwait, _2ms_
41098     EF 02 A0 FD |                 call    #poll_waitx
4109c     D8 0A D0 FE |                 loc     ptra, #set_idle
410a0     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
410a4     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
410a8     A0 02 80 FD |                 jmp     #control_write
410ac                 | 
410ac                 | '------------------------------------------------------------------------------
410ac                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
410ac                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
410ac                 | '------------------------------------------------------------------------------
410ac                 | ' On entry:
410ac                 | '   ep_addr_pid - device address and enpoint for the request.
410ac                 | ' On exit:
410ac                 | '   retval - transaction result.
410ac                 | '------------------------------------------------------------------------------
410ac                 | hset_kbdled_report
410ac     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
410b0     CC 0A D0 FE |                 loc     ptra, #set_report
410b4     01 00 80 FF 
410b8     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
410bc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
410c0     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
410c4     27 EF 03 F6 |                 mov     pb, urx_buff_p
410c8     F7 77 42 FC |                 wrbyte  kb_led_states, pb
410cc     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
410d0                 | 
410d0                 | '------------------------------------------------------------------------------
410d0                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
410d0                 | '------------------------------------------------------------------------------
410d0                 | ' On entry:
410d0                 | ' On exit:
410d0                 | '------------------------------------------------------------------------------
410d0                 | hget_kbd_in_report
410d0     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
410d4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
410d8     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
410dc     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
410e0     CF 02 A0 FD |                 call    #do_int_in
410e4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
410e8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
410ec                 | 
410ec     00 90 0F F2 |                 cmp     hpar3, #0               wz
410f0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
410f4                 | 
410f4     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
410f8     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
410fc     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
41100     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
41104                 | 
41104     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
41108     18 00 B0 FD |                 call    #hkbd_compare
4110c                 |         if EMUPAD_MAX_PLAYER > 0
4110c                 |         end
4110c                 | 
4110c                 | .led_check
4110c     3B 71 03 F6 |                 mov     htmp, kb_led_states
41110     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
41114     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
41118     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
4111c     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
41120     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
41124                 | 
41124                 | '------------------------------------------------------------------------------
41124                 | ' Compare current and previous keyboard data buffers for keypress changes.
41124                 | '------------------------------------------------------------------------------
41124                 | hkbd_compare
41124     27 F1 03 F6 |                 mov     ptra, urx_buff_p
41128     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
4112c     61 73 07 FB |                 rdlong  htmp1, ptra++
41130     E1 75 07 FB |                 rdlong  htmp2, ptrb++
41134     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
41138     61 73 07 FB |                 rdlong  htmp1, ptra++
4113c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
41140     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
41144     2D 00 64 AD |         if_z    ret
41148                 | 
41148     B4 13 D0 FE |                 loc     ptra, #hkbd_report
4114c                 | 
4114c                 |                 ' Handle modifiers
4114c     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
41150     00 87 C7 FA |                 rdbyte  hr1, ptra
41154     C7 87 43 F9 |                 rolword hr1,hpar2,#0
41158     63 86 63 FD |                 mergew  hr1
4115c     08 EC 07 F6 |                 mov     pa,#8
41160                 | .modloop
41160     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
41164     E8 8C 07 F6 |                 mov     hpar1,#$E8
41168     F6 8D 83 F1 |                 sub     hpar1,pa
4116c     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
41170     FB ED 6F FB |                 djnz    pa,#.modloop
41174                 | 
41174     6F E0 75 FD | .release        modc    _set    wc
41178                 |                 'alts    hdev_port, #hid_report_p
41178                 |                 'mov     ptra, hid_report_p
41178     02 F0 07 F1 |                 add     ptra, #2
4117c     06 EC 07 F6 |                 mov     pa, #6
41180     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
41184     20 00 90 AD |         if_z    jmp     #.rl3
41188     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
4118c     02 F2 07 F1 |                 add     ptrb, #2
41190     06 EE 07 F6 |                 mov     pb, #6
41194     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
41198     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
4119c     08 00 90 AD |         if_z    jmp     #.rl3
411a0     FC EF 6F FB |                 djnz    pb, #.rl2
411a4     68 00 B0 FD |                 call    #hkbd_translate
411a8     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
411ac                 | 
411ac     00 90 07 F6 |                 mov     hpar3, #0
411b0     1F 90 27 F4 |                 bith    hpar3, #31
411b4                 | 
411b4     6F 00 74 FD | .press          modc    _clr    wc
411b8     27 F1 03 F6 |                 mov     ptra, urx_buff_p
411bc     02 F0 07 F1 |                 add     ptra, #2
411c0     06 EC 07 F6 |                 mov     pa, #6
411c4     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
411c8     20 00 90 AD |         if_z    jmp     #.pl3
411cc     30 13 F0 FE |                 loc     ptrb, #hkbd_report
411d0     02 F2 07 F1 |                 add     ptrb, #2
411d4     06 EE 07 F6 |                 mov     pb, #6
411d8     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
411dc     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
411e0     08 00 90 AD |         if_z    jmp     #.pl3
411e4     FC EF 6F FB |                 djnz    pb, #.pl2
411e8     24 00 B0 FD |                 call    #hkbd_translate
411ec     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
411f0                 | 
411f0     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
411f4     08 13 F0 FE |                 loc     ptrb, #hkbd_report
411f8     28 02 64 FD |                 setq #1
411fc     61 73 07 FB |                 rdlong  htmp1, ptra++
41200     28 02 64 FD |                 setq #1
41204     E1 73 67 FC |                 wrlong  htmp1, ptrb++
41208     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
4120c                 | 
4120c     2D 00 64 FD |                 ret
41210                 | 
41210                 | '------------------------------------------------------------------------------
41210                 | ' Translate keyboard scancode to ASCII
41210                 | '------------------------------------------------------------------------------
41210                 | ' On entry:
41210                 | '   hpar1 - scancode
41210                 | '   hpar2 - key modifiers state
41210                 | '       c - pressed (0) or released (1) flag
41210                 | ' On exit:
41210                 | '   hpar1 - bit     31 = 0 pressed, 1 released
41210                 | '               30..17 = unused
41210                 | '                   18 = scroll-lock state 
41210                 | '                   17 = caps-lock state
41210                 | '                   16 = num-lock state 
41210                 | '                15..8 = key modifiers state
41210                 | '                 7..0 = scancode
41210                 | '------------------------------------------------------------------------------
41210                 | hkbd_translate
41210     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
41214     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
41218     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
4121c     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
41220     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
41224     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
41228                 | 
41228                 |         if EMUPAD_MAX_PLAYER > 0
41228                 | 
41228                 |         if EMUPAD_BT0_BIT >= 0
41228                 |         end
41228                 |         if EMUPAD_BT1_BIT >= 0
41228                 |         end
41228                 |         if EMUPAD_BT2_BIT >= 0
41228                 |         end
41228                 |         if EMUPAD_BT3_BIT >= 0
41228                 |         end
41228                 |         if EMUPAD_BT4_BIT >= 0
41228                 |         end
41228                 |         if EMUPAD_BT5_BIT >= 0
41228                 |         end
41228                 |         if EMUPAD_BT6_BIT >= 0
41228                 |         end
41228                 |         if EMUPAD_BT7_BIT >= 0
41228                 |         end
41228                 |         if EMUPAD_BT8_BIT >= 0
41228                 |         end
41228                 |         if EMUPAD_BT9_BIT >= 0
41228                 |         end
41228                 | 
41228                 |         end
41228     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
4122c     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
41230     1F 8C 47 F4 |                 bitc    hpar1, #31
41234                 |         if KEYQUEUE_SIZE > 0
41234     C4 09 B0 FE |                 loc pb,#keyq_head
41238     F7 71 E3 FA |                 rdword htmp,pb
4123c     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
41240     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
41244     B8 75 03 F6 |                 mov htmp2,htmp
41248     04 74 07 FA |                 mul htmp2,#4
4124c     F7 75 03 F1 |                 add htmp2,pb
41250     02 74 07 F1 |                 add htmp2,#2
41254     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
41258     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
4125c     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
41260     F7 71 43 5C |         if_nz   wrbyte htmp,pb
41264                 |         end
41264     2D 00 7C FD |                 ret wcz
41268                 | 
41268                 | if HAVE_MOUSE
41268                 | '------------------------------------------------------------------------------
41268                 | ' Execute an IN interrupt transaction to poll for mouse activity.
41268                 | '------------------------------------------------------------------------------
41268                 | ' On entry:
41268                 | ' On exit:
41268                 | '------------------------------------------------------------------------------
41268                 | hget_mouse_in_report
41268     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
4126c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
41270     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
41274     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
41278     CF 02 A0 FD |                 call    #do_int_in
4127c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41280     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
41284                 | 
41284     00 90 0F F2 |                 cmp     hpar3, #0               wz
41288     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
4128c                 | 
4128c     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
41290     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
41294     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
41298     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
4129c                 | 
4129c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
412a0     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
412a4     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
412a8     01 90 87 31 |         if_ae   sub     hpar3, #1
412ac                 | 
412ac     40 09 90 FE |                 loc     pa, #mouse_limits
412b0     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
412b4                 | 
412b4                 |                 ' load xacc,yacc,zacc
412b4     28 04 64 FD |                 setq    #3-1
412b8     80 87 07 FB |                 rdlong  hr1,ptrb
412bc                 |                 ' load limits and outptr
412bc     28 04 64 FD |                 setq    #3-1
412c0     F6 73 03 FB |                 rdlong  htmp1,pa
412c4                 | 
412c4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
412c8     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
412cc     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
412d0     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
412d4     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
412d8     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
412dc     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
412e0     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
412e4                 |               
412e4                 | 
412e4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
412e8     07 70 67 F7 |                 signx   htmp, #7
412ec     B8 87 03 F1 |                 add     hr1,htmp
412f0     00 72 0F F2 |                 cmp     htmp1,#0 wz
412f4     B9 87 63 53 |         if_ne   fles    hr1,htmp1
412f8     00 86 47 53 |         if_ne   fges    hr1,#0
412fc                 | 
412fc     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
41300     07 70 67 F7 |                 signx   htmp, #7
41304     B8 89 03 F1 |                 add     hr2,htmp
41308     00 74 0F F2 |                 cmp     htmp2,#0 wz
4130c     BA 89 63 53 |         if_ne   fles    hr2,htmp2
41310     00 88 47 53 |         if_ne   fges    hr2,#0
41314                 |                 
41314                 | 
41314     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
41318     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
4131c     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
41320     B8 8B 03 A1 |         if_z    add     hr3,htmp
41324                 | 
41324     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
41328     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
4132c                 | 
4132c                 |                 ' write back accumulators
4132c     28 04 64 FD |                 setq    #3-1
41330     80 87 67 FC |                 wrlong  hr1,ptrb
41334                 |                 ' if outptr set, write X/Y words
41334     00 76 0F F2 |                 cmp htmp3,#0                    wz
41338     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
4133c     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
41340     2D 00 64 FD |                 ret
41344                 | end
41344                 | 
41344                 | '------------------------------------------------------------------------------
41344                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
41344                 | '------------------------------------------------------------------------------
41344                 | ' On entry:
41344                 | ' On exit:
41344                 | '------------------------------------------------------------------------------
41344                 | if _HAVE_GAMEPAD
41344                 | hget_gp_in_report
41344     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
41348     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
4134c                 | 
4134c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
41350     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
41354     00 90 E3 F8 |                 getbyte hpar3
41358     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
4135c     CF 02 A0 FD |                 call    #do_int_in
41360     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41364     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
41368                 | 
41368     00 90 0F F2 |                 cmp     hpar3, #0               wz
4136c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
41370                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
41370                 | 
41370     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
41374     00 70 E3 F8 |                 getbyte htmp                            ' |
41378     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
4137c     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
41380     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
41384     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
41388     B8 01 C0 F8 |                 setbyte htmp                            ' |
4138c                 | 
4138c                 | ' Note: the following code compares the current and previous reports
4138c                 | ' and process the data if there are changes to ease the debug output.
4138c                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
4138c                 | ' gpPreReport buffer.
4138c                 | 
4138c                 |                 ' ----- start of block to remove
4138c                 |                 {
4138c                 |                 }
4138c                 |                 ' ----- end of block to remove
4138c     F4 04 90 FE |                 loc pa,#hpad_translate
41390     2A EC 63 FD |                 push pa
41394                 | 
41394                 |                 ' FALL THROUGH !!!!
41394                 | 
41394                 | '------------------------------------------------------------------------------
41394                 | ' Decode controller report
41394                 | '------------------------------------------------------------------------------
41394                 | hid_decode
41394                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
41394     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
41398     00 04 00 FF 
4139c     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
413a0                 | 
413a0     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
413a4                 | 
413a4     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
413a8     00 2A E3 F8 |                 getbyte hidr_type
413ac     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
413b0     34 02 90 AD |         if_z    jmp     #hpad_xinput
413b4     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
413b8     1C 03 90 AD |         if_z    jmp     #hpad_ps3
413bc     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
413c0     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
413c4     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
413c8                 |                 
413c8                 | 
413c8                 | '------------------------------------------------------------------------------
413c8                 | ' Handle HID controller (or mouse now
413c8                 | ' On entry:
413c8                 | '   ptrb - controller report
413c8                 | '------------------------------------------------------------------------------
413c8                 | hpad_hid
413c8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
413cc     F7 F1 03 F6 |                 mov     ptra, pb
413d0     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
413d4     00 EC 03 F6 |                 mov     pa, 0-0
413d8                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
413d8     19 2A 3B FF 
413dc     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
413e0                 | 
413e0                 | .next
413e0     00 EC 5F F2 |                 cmps    pa, #0      wcz
413e4     2D 00 7C ED |         if_be   ret     wcz
413e8                 | 
413e8     61 8D C7 FA |                 rdbyte  hpar1, ptra++
413ec     01 EC 87 F1 |                 sub     pa, #1
413f0     00 8E 07 F6 |                 mov     hpar2, #0
413f4                 | 
413f4     C6 71 03 F6 |                 mov     htmp, hpar1
413f8     03 70 07 F5 |                 and     htmp, #$03
413fc     01 70 0F F2 |                 cmp     htmp, #1    wz
41400     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
41404     07 8E 67 A7 |         if_z    signx   hpar2,#7
41408     01 EC 87 A1 |         if_z    sub     pa, #1
4140c     02 70 0F F2 |                 cmp     htmp, #2    wz
41410     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
41414     0F 8E 67 A7 |         if_z    signx   hpar2,#15
41418     02 EC 87 A1 |         if_z    sub     pa, #2
4141c     03 70 0F F2 |                 cmp     htmp, #3    wz
41420     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
41424     04 EC 87 A1 |         if_z    sub     pa, #4
41428                 | 
41428     FC 8C 07 F5 |                 and     hpar1, #$FC
4142c                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
4142c                 | 
4142c     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
41430     0C 01 90 AD |         if_z    jmp     #.report_id
41434     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
41438     24 01 90 AD |         if_z    jmp     #.usage_page
4143c     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
41440     2C 01 90 AD |         if_z    jmp     #.usage
41444     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
41448     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
4144c     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
41450     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
41454     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
41458     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
4145c     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
41460     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
41464     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
41468     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
4146c     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
41470     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
41474     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
41478     64 FF 9F 5D |         if_nz   jmp     #.next
4147c                 | 
4147c     D8 1D A7 FB |                 tjf     hidr_state,#.next
41480                 | 
41480     03 8E 07 F5 |                 and     hpar2, #$03
41484     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
41488     18 00 90 5D |         if_nz   jmp     #.skip
4148c                 | 
4148c     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
41490     20 00 90 AD |         if_z    jmp     #.axes
41494     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
41498     5C 00 90 AD |         if_z    jmp     #.hats
4149c     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
414a0     70 00 90 AD |         if_z    jmp     #.buttons
414a4                 | .skip
414a4     8F 71 03 F6 |                 mov     htmp, hidr_size
414a8     90 71 03 FA |                 mul     htmp, hidr_count
414ac     B8 23 03 F1 |                 add     hidr_offset, htmp
414b0     2C FF 9F FD |                 jmp     #.next
414b4                 | .axes
414b4                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
414b4     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
414b8     90 87 03 F6 |                 mov     hr1, hidr_count
414bc                 | .l1
414bc     91 8D 03 F6 |                 mov     hpar1, hidr_offset
414c0     8F 8F 03 F6 |                 mov     hpar2, hidr_size
414c4     04 03 B0 FD |                 call    #hpad_getbits
414c8     64 03 B0 FD |                 call    #hpad_normalize
414cc     06 84 1F F2 |                 cmp     hr0, #6         wcz
414d0     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
414d4     00 88 43 C8 |         if_b    getnib  hr2
414d8     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
414dc     5F 01 20 C9 |         if_b    setword retval
414e0     01 84 07 C1 |         if_b    add     hr0, #1
414e4     8F 23 03 F1 |                 add     hidr_offset, hidr_size
414e8     F4 87 6F FB |                 djnz    hr1, #.l1
414ec                 | 
414ec     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
414f0     01 1C 07 F6 |                 mov     hidr_state, #1
414f4     E8 FE 9F FD |                 jmp     #.next
414f8                 | .hats
414f8                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
414f8     91 8D 03 F6 |                 mov     hpar1, hidr_offset
414fc     8F 8F 03 F6 |                 mov     hpar2, hidr_size
41500     C8 02 B0 FD |                 call    #hpad_getbits
41504     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
41508     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
4150c     01 1C 07 F6 |                 mov     hidr_state, #1
41510     90 FF 9F FD |                 jmp     #.skip
41514                 | .buttons
41514                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
41514     91 8D 03 F6 |                 mov     hpar1, hidr_offset
41518     8F 8F 03 F6 |                 mov     hpar2, hidr_size
4151c     90 8F 03 FA |                 mul     hpar2, hidr_count
41520     A8 02 B0 FD |                 call    #hpad_getbits
41524     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
41528     B8 BF 62 F0 |                 shl     retval, htmp
4152c     5F 17 43 F5 |                 or      hidr_buttons, retval
41530     90 71 03 F1 |                 add     htmp, hidr_count
41534     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
41538     01 1C 07 F6 |                 mov     hidr_state, #1
4153c     64 FF 9F FD |                 jmp     #.skip
41540                 | .report_id
41540     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
41544     2D 00 7C 5D |         if_nz   ret     wcz
41548     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
4154c     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
41550     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
41554     01 1C 67 56 |         if_nz   neg     hidr_state,#1
41558     01 F2 87 51 |         if_nz   sub     ptrb,#1
4155c     80 FE 9F FD |                 jmp     #.next
41560                 | .usage_page
41560     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
41564     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
41568     04 1C 07 A6 |         if_z    mov     hidr_state, #4
4156c     70 FE 9F FD |                 jmp     #.next
41570                 | .usage
41570     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
41574     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
41578     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
4157c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
41580     5C FE 9F AD |         if_z    jmp     #.next
41584     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
41588     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
4158c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
41590     4C FE 9F AD |         if_z    jmp     #.next
41594     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
41598     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
4159c     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
415a0     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
415a4     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
415a8     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
415ac     10 00 90 AD |         if_z    jmp     #.usage_axis
415b0     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
415b4     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
415b8     03 1C 07 A6 |         if_z    mov     hidr_state, #3
415bc     20 FE 9F FD |                 jmp     #.next
415c0                 | .usage_axis
415c0     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
415c4     18 FE 9F CD |         if_b    jmp     #.next
415c8     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
415cc     C7 01 00 F8 |                 setnib  hpar2
415d0                 | 
415d0     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
415d4     C7 8F C3 F9 |                 decod   hpar2
415d8     C7 0F 43 F5 |                 or      hidr_flags, hpar2
415dc                 | 
415dc     01 24 07 F1 |                 add     hidr_usage_idx, #1
415e0     02 1C 07 F6 |                 mov     hidr_state, #2
415e4     F8 FD 9F FD |                 jmp     #.next
415e8                 | 
415e8                 | '------------------------------------------------------------------------------
415e8                 | ' Handle XInput controller
415e8                 | ' On entry:
415e8                 | '   ptrb - controller report
415e8                 | '------------------------------------------------------------------------------
415e8                 | '   Default implementation translates the report to a pseudo-defacto hid
415e8                 | '   standard and jumps to hpad_translate for actions.
415e8                 | '   Implementors may take specific actions for this kind of controller.
415e8                 | '------------------------------------------------------------------------------
415e8                 | hpad_xinput
415e8     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
415ec     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
415f0     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
415f4     14 70 0F F2 |                 cmp     htmp, #$14      wz
415f8     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
415fc                 | 
415fc                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
415fc                 | 
415fc     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
41600     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
41604                 | 
41604     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
41608     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
4160c     5F BF 22 F6 |                 not     retval
41610     5F 11 2B F9 |                 setword hidr_axis, retval, #1
41614     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
41618     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
4161c     5F BF 22 F6 |                 not     retval
41620     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
41624                 | 
41624     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
41628     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
4162c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
41630     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
41634     F8 01 B0 FD |                 call    #hpad_normalize
41638     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
4163c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
41640     C0 BE 1E F2 |                 cmp     retval, #192    wcz
41644     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
41648     E4 01 B0 FD |                 call    #hpad_normalize
4164c     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
41650                 | 
41650     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
41654     81 BF E6 FA |                 rdword  retval, ptrb[1]
41658     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
4165c     00 16 47 F4 |                 bitc    hidr_buttons, #0
41660     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
41664     01 16 47 F4 |                 bitc    hidr_buttons, #1
41668     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
4166c     02 16 47 F4 |                 bitc    hidr_buttons, #2
41670     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
41674     03 16 47 F4 |                 bitc    hidr_buttons, #3
41678     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
4167c     04 16 47 F4 |                 bitc    hidr_buttons, #4
41680     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
41684     05 16 47 F4 |                 bitc    hidr_buttons, #5
41688     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
4168c     08 16 47 F4 |                 bitc    hidr_buttons, #8
41690     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
41694     09 16 47 F4 |                 bitc    hidr_buttons, #9
41698     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
4169c     0A 16 47 F4 |                 bitc    hidr_buttons, #10
416a0     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
416a4     0B 16 47 F4 |                 bitc    hidr_buttons, #11
416a8     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
416ac     0C 16 47 F4 |                 bitc    hidr_buttons, #12
416b0                 | 
416b0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
416b4     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
416b8     7A BB 7A FF 
416bc     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
416c0     F9 FF 7F FF 
416c4     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
416c8     B9 71 5F F9 |                 altgn   htmp, #htmp1
416cc     00 70 43 F8 |                 getnib  htmp
416d0     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
416d4                 | 
416d4     AC 01 90 FD |                 jmp     #hpad_translate
416d8                 | 
416d8                 | '------------------------------------------------------------------------------
416d8                 | ' Handle PS3 controller
416d8                 | ' On entry:
416d8                 | '   ptrb - controller report
416d8                 | '------------------------------------------------------------------------------
416d8                 | '   Default implementation translates the report to a pseudo-defacto hid
416d8                 | '   standard and jumps to hpad_translate for actions.
416d8                 | '   Implementors may take specific actions for this kind of controller.
416d8                 | '------------------------------------------------------------------------------
416d8                 | hpad_ps3
416d8     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
416dc     01 70 0F F2 |                 cmp     htmp, #$01      wz
416e0     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
416e4                 | 
416e4                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
416e4                 | 
416e4     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
416e8     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
416ec     40 01 B0 FD |                 call    #hpad_normalize
416f0     5F 11 23 F9 |                 setword hidr_axis, retval, #0
416f4     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
416f8     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
416fc     30 01 B0 FD |                 call    #hpad_normalize
41700     5F 11 2B F9 |                 setword hidr_axis, retval, #1
41704     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
41708     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
4170c     20 01 B0 FD |                 call    #hpad_normalize
41710     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
41714     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
41718     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
4171c     10 01 B0 FD |                 call    #hpad_normalize
41720     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
41724     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
41728     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
4172c                 | 
4172c     08 8C 07 F6 |                 mov     hpar1, #8
41730     13 8E 07 F6 |                 mov     hpar2, #19
41734     94 00 B0 FD |                 call    #hpad_getbits
41738                 | 
41738     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
4173c     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
41740     00 16 47 F4 |                 bitc    hidr_buttons, #0
41744     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
41748     01 16 47 F4 |                 bitc    hidr_buttons, #1
4174c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
41750     02 16 47 F4 |                 bitc    hidr_buttons, #2
41754     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
41758     03 16 47 F4 |                 bitc    hidr_buttons, #3
4175c     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
41760     04 16 47 F4 |                 bitc    hidr_buttons, #4
41764     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
41768     05 16 47 F4 |                 bitc    hidr_buttons, #5
4176c     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
41770     06 16 47 F4 |                 bitc    hidr_buttons, #6
41774     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
41778     07 16 47 F4 |                 bitc    hidr_buttons, #7
4177c     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
41780     08 16 47 F4 |                 bitc    hidr_buttons, #8
41784     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
41788     09 16 47 F4 |                 bitc    hidr_buttons, #9
4178c     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
41790     0A 16 47 F4 |                 bitc    hidr_buttons, #10
41794     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
41798     0B 16 47 F4 |                 bitc    hidr_buttons, #11
4179c     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
417a0     0C 16 47 F4 |                 bitc    hidr_buttons, #12
417a4                 | 
417a4     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
417a8     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
417ac     09 FA 79 FF 
417b0     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
417b4     FF FA 7F FF 
417b8     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
417bc     B9 71 5F F9 |                 altgn   htmp, #htmp1
417c0     00 70 43 F8 |                 getnib  htmp
417c4     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
417c8                 | 
417c8     B8 00 90 FD |                 jmp     #hpad_translate
417cc                 | 
417cc                 | '------------------------------------------------------------------------------
417cc                 | ' Read bits from report data buffer
417cc                 | '------------------------------------------------------------------------------
417cc                 | ' On entry:
417cc                 | '   PTRB - report buffer
417cc                 | '   hpar1 - start bit
417cc                 | '   hpar2 - number of bits
417cc                 | ' On exit:
417cc                 | '   retval - bits
417cc                 | '------------------------------------------------------------------------------
417cc                 | hpad_getbits
417cc     C6 71 03 F6 |                 mov     htmp, hpar1
417d0     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
417d4     F9 71 03 F1 |                 add     htmp, ptrb
417d8     B8 BF 02 FB |                 rdlong  retval, htmp
417dc                 | 
417dc     C6 73 03 F6 |                 mov     htmp1, hpar1
417e0     07 72 07 F5 |                 and     htmp1, #$07     ' shift
417e4     B9 BF 42 F0 |                 shr     retval, htmp1
417e8                 | 
417e8     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
417ec     10 00 90 1D |         if_a    jmp     #.l1
417f0                 | 
417f0     C7 8F C3 F9 |                 decod   hpar2
417f4     01 8E 87 F1 |                 sub     hpar2, #1
417f8     C7 BF 02 F5 |                 and     retval, hpar2
417fc     2D 00 64 FD |                 ret
41800                 | .l1
41800     FF 7F 00 FF 
41804     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
41808     03 70 07 F1 |                 add     htmp, #3
4180c     B8 75 03 FB |                 rdlong  htmp2, htmp
41810     18 8E 87 F1 |                 sub     hpar2, #24
41814     C7 8F C3 F9 |                 decod   hpar2
41818     01 8E 87 F1 |                 sub     hpar2, #1
4181c     B9 75 43 F0 |                 shr     htmp2, htmp1
41820     C7 75 03 F5 |                 and     htmp2, hpar2
41824     18 74 67 F0 |                 shl     htmp2, #24
41828     BA BF 42 F5 |                 or      retval, htmp2
4182c     2D 00 64 FD |                 ret
41830                 | 
41830                 | '------------------------------------------------------------------------------
41830                 | ' Normalize value to signed word (-32768 / 32767)
41830                 | '------------------------------------------------------------------------------
41830                 | ' On entry:
41830                 | '   retval - value to normalize
41830                 | '   hidr_lminmax - min (word 1) max (word 0) value range
41830                 | '   - or -
41830                 | '   hidr_pminmax - min (word 1) max (word 0) value range
41830                 | '   hidr_size - value bits length
41830                 | ' On exit:
41830                 | '   retval - normalized value
41830                 | '------------------------------------------------------------------------------
41830                 | hpad_normalize
41830     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
41834     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
41838     2D 00 64 AD |         if_z    ret
4183c     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
41840     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
41844     0F 72 77 F7 |                 signx   htmp1, #15      wc
41848     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
4184c     00 BE 66 C7 |         if_c    signx   retval, #0-0
41850     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
41854     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
41858     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
4185c     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
41860     B8 71 53 F6 |                 abs     htmp            wc
41864     1F BE 0E F4 |                 testb   retval, #31     wz
41868     5F BF 42 F6 |                 abs     retval
4186c     B8 BF 12 FD |                 qdiv    retval, htmp
41870     18 BE 62 FD |                 getqx   retval
41874     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
41878     C0 FF 7F FF 
4187c     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
41880     2D 00 64 FD |                 ret
41884                 | 
41884                 | '------------------------------------------------------------------------------
41884                 | ' Perform controller actions
41884                 | ' On entry:
41884                 | '    hidr_id        report id
41884                 | '    hidr_axis      axis value (signed word, 2 axes per long)
41884                 | '                      X = hidr_axis+0, #0
41884                 | '                      Y = hidr_axis+0, #1
41884                 | '                      Z = hidr_axis+1, #0
41884                 | '                     RX = hidr_axis+1, #1
41884                 | '                     RY = hidr_axis+2, #0
41884                 | '                     RZ = hidr_axis+2, #1
41884                 | '    hidr_buttons   buttons state (bits 0 to 31)
41884                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
41884                 | '
41884                 | '                     -------3 -------2 -------1 -------0 byte
41884                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
41884                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
41884                 | '                                zyx||| |||||||| ++++++++ n. buttons
41884                 | '                                |||||| ||||++++--------- n. axes
41884                 | '                                |||||| ++++------------- n. hats
41884                 | '                                ++++++------------------ valid axes
41884                 | '------------------------------------------------------------------------------
41884                 | hpad_translate
41884                 | 
41884                 | 
41884                 |         if HAVE_HIDPAD
41884     84 0C F0 FE |                 loc     ptrb,#hidpad_report
41888     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
4188c     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
41890     01 70 E7 F2 |                 cmpsub  htmp,#1
41894     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
41898     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
4189c     2D 00 7C 3D |         if_ae   ret     wcz
418a0     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
418a4     B8 F3 03 F1 |                 add     ptrb,htmp
418a8     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
418ac     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
418b0     28 0C 64 FD |                 setq    #7-1
418b4     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
418b8                 |         end
418b8                 | 
418b8                 | 
418b8                 |         if EMUPAD_MAX_PLAYER > 0
418b8                 | .emupad_no_hat
418b8                 |         if EMUPAD_BT0_BIT >= 0
418b8                 |         end
418b8                 |         if EMUPAD_BT1_BIT >= 0
418b8                 |         end
418b8                 |         if EMUPAD_BT2_BIT >= 0
418b8                 |         end
418b8                 |         if EMUPAD_BT3_BIT >= 0
418b8                 |         end
418b8                 |         if EMUPAD_BT4_BIT >= 0
418b8                 |         end
418b8                 |         if EMUPAD_BT5_BIT >= 0
418b8                 |         end
418b8                 |         if EMUPAD_BT6_BIT >= 0
418b8                 |         end
418b8                 |         if EMUPAD_BT7_BIT >= 0
418b8                 |         end
418b8                 |         if EMUPAD_BT8_BIT >= 0
418b8                 |         end
418b8                 |         if EMUPAD_BT9_BIT >= 0
418b8                 |         end
418b8                 | .emupad_slot_over
418b8                 |         end
418b8                 | 
418b8                 |         if 0
418b8                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
418b8                 | 
418b8                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
418b8                 | 
418b8                 |         end
418b8     2D 00 64 FD |                 ret
418bc                 | end
418bc                 | 
418bc                 | if EMUPAD_MAX_PLAYER > 0
418bc                 | '------------------------------------------------------------------------------
418bc                 | ' Clear EmuPad state
418bc                 | '------------------------------------------------------------------------------
418bc                 | emupad_reset
418bc                 | 
418bc                 | '------------------------------------------------------------------------------
418bc                 | ' Get EmuPad Player number for current device (into retval)
418bc                 | ' Z flag is also set if current device is valid
418bc                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
418bc                 | '------------------------------------------------------------------------------
418bc                 | emupad_getnum
418bc                 | .loop
418bc                 | '------------------------------------------------------------------------------
418bc                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
418bc                 | '------------------------------------------------------------------------------
418bc                 | emupad_discon
418bc                 | .loop         
418bc                 |         
418bc                 |         ' FALL THROUGH!!!
418bc                 | 
418bc                 | '------------------------------------------------------------------------------
418bc                 | ' Update EmuPad reports (all of them...)
418bc                 | '------------------------------------------------------------------------------
418bc                 | emupad_write_reports
418bc                 | .devloop
418bc                 | 
418bc                 | end
418bc                 | 
418bc                 | 
418bc                 | '------------------------------------------------------------------------------
418bc                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
418bc                 | '------------------------------------------------------------------------------
418bc                 | ' On entry:
418bc                 | ' On exit:
418bc                 | '------------------------------------------------------------------------------
418bc                 | hget_hub_status
418bc     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
418c0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
418c4     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
418c8     01 90 2F F9 |                 setword hpar3, #1, #1
418cc     CF 02 A0 FD |                 call    #do_int_in
418d0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
418d4     0C 00 90 AD |         if_z    jmp     #.data
418d8     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
418dc     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
418e0     2D 00 64 FD |                 ret
418e4                 | .data
418e4     00 90 0F F2 |                 cmp     hpar3, #0               wz
418e8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
418ec                 | 
418ec     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
418f0     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
418f4     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
418f8     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
418fc                 |                 debug(ubin_long(hub_status_chg))
418fc                 | 
418fc     01 5A 06 F6 |                 mov     hdev_port, #1
41900                 | .loop
41900     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
41904     0C 00 B0 AD |         if_x1   call    #hub_port_handler
41908     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
4190c     F0 FF 9F 3D |         if_nc   jmp     #.loop
41910     2D 00 64 FD |                 ret
41914                 | 
41914                 | hub_port_handler
41914     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
41918     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
4191c     27 EF 03 F6 |                 mov     pb, urx_buff_p
41920     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41924     55 02 A0 FD |                 call    #control_read
41928     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
4192c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
4192c                 | 
4192c     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
41930     50 01 90 5D |         if_x0   jmp     #.other
41934     68 02 D0 FE |                 loc     ptra, #clr_port_feat
41938     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
4193c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41940     A0 02 A0 FD |                 call    #control_write
41944     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
41948     7C 01 90 5D |         if_x0   jmp     #.disconnect
4194c     B0 99 02 F6 |                 mov     hctwait, _100ms_
41950     EF 02 A0 FD |                 call    #poll_waitx
41954                 | 
41954     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
41958     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
4195c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41960     A0 02 A0 FD |                 call    #control_write
41964                 | 
41964     02 76 07 F6 |                 mov     htmp3, #2
41968                 | .wait_reset
41968     AC 99 02 F6 |                 mov     hctwait, _8ms_
4196c     EF 02 A0 FD |                 call    #poll_waitx
41970     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
41974     27 EF 03 F6 |                 mov     pb, urx_buff_p
41978     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
4197c     55 02 A0 FD |                 call    #control_read
41980     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
41984     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
41988     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
4198c                 | 
4198c     10 02 D0 FE |                 loc     ptra, #clr_port_feat
41990     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
41994     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41998     A0 02 A0 FD |                 call    #control_write
4199c                 | 
4199c     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
419a0                 | .wait_recover
419a0     A7 99 02 F6 |                 mov     hctwait, _1ms_
419a4     EF 02 A0 FD |                 call    #poll_waitx
419a8     FD 71 6F FB |                 djnz    htmp,#.wait_recover
419ac                 | 
419ac     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
419b0     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
419b4     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
419b8                 | 
419b8     00 08 00 FF 
419bc     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
419c0     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
419c4     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
419c8     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
419cc     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
419d0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
419d4     48 01 90 5D |         if_nz   jmp     #.done
419d8                 | .get_dev_desc
419d8     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
419dc     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
419e0     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
419e4     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
419e8     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
419ec     01 71 57 FC |                 wrword  htmp, ptra[wValue]
419f0     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
419f4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
419f8     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
419fc     AC 99 02 F6 |                 mov     hctwait, _8ms_
41a00     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
41a04     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
41a08     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
41a0c     BE 00 A0 FD |                 call    #calc_crc5
41a10     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
41a14     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
41a18     F7 AD C2 FA |                 rdbyte  total_data, pb
41a1c     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
41a20     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
41a24     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41a28     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
41a2c     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
41a30     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
41a34                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
41a34     9F 99 02 F6 |                 mov     hctwait, _500us_
41a38     EF 02 A0 FD |                 call    #poll_waitx
41a3c     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
41a40     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
41a44     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
41a48     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
41a4c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41a50     CC 00 90 5D |         if_nz   jmp     #.done
41a54     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
41a58     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
41a5c     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
41a60     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
41a64     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
41a68     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
41a6c     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
41a70     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
41a74     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
41a78     A4 00 90 CD |         if_b    jmp     #.done
41a7c     70 F0 BF FD |                 call    #hparse_con_desc
41a80     9C 00 90 FD |                 jmp     #.done
41a84                 | 
41a84                 | .other
41a84     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
41a88     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
41a8c     28 00 90 AD |         if_x1   jmp     #.reset_feature
41a90     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
41a94     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
41a98     1C 00 90 AD |         if_x1   jmp     #.reset_feature
41a9c     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
41aa0     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
41aa4     10 00 90 AD |         if_x1   jmp     #.reset_feature
41aa8     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
41aac     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
41ab0     04 00 90 AD |         if_x1   jmp     #.reset_feature
41ab4     68 00 90 FD |                 jmp     #.done
41ab8                 | .reset_feature
41ab8     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
41abc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41ac0     A0 02 A0 FD |                 call    #control_write
41ac4     58 00 90 FD |                 jmp     #.done
41ac8                 | .disconnect
41ac8                 | 
41ac8     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
41acc     00 70 E3 F8 |                 getbyte htmp
41ad0     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
41ad4     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
41ad8     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
41adc     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
41ae0     00 76 06 A6 |         if_z    mov     kb_led_states, #0
41ae4     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
41ae8                 |         if EMUPAD_MAX_PLAYER > 0
41ae8                 |         end
41ae8                 |         if HAVE_MOUSE
41ae8     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
41aec     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
41af0     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
41af4                 |         end
41af4                 |         if HAVE_HIDPAD
41af4     14 0A F0 FE |                 loc ptrb,#hidpad_report
41af8     2D 71 03 F6 |                 mov htmp,hdev_port
41afc     01 70 E7 F2 |                 cmpsub htmp,#1
41b00     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
41b04     B8 F3 03 F1 |                 add ptrb,htmp
41b08     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
41b0c     80 01 6C FC |                 wrlong #0,ptrb
41b10                 |         end
41b10                 | 
41b10     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
41b14     00 00 C4 F8 |                 setbyte #0
41b18     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
41b1c     00 00 04 F6 |                 mov     0-0, #0
41b20                 | 
41b20                 | .done
41b20     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
41b24     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
41b28     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
41b2c     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
41b30     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
41b34     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
41b38                 | 
41b38     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
41b3c     27 EF 03 F6 |                 mov     pb, urx_buff_p
41b40     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41b44     55 02 A0 FD |                 call    #control_read
41b48     00 69 06 FB |                 rdlong  hub_port_status, ptra
41b4c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
41b4c     2D 00 64 FD |                 ret
41b50                 | 
41b50                 | '------------------------------------------------------------------------------
41b50                 | ' Partially populated SETUP packets
41b50                 | '------------------------------------------------------------------------------
41b50     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
41b51     06          |                 byte    REQ_GET_DESC
41b52     00 01       |                 word    TYPE_DEVICE << 8
41b54     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
41b56     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
41b58     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
41b59     06          |                 byte    REQ_GET_DESC
41b5a     00 02       |                 word    TYPE_CONFIG << 8
41b5c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
41b5e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
41b60     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
41b61     09          |                 byte    REQ_SET_CONFIG
41b62     00 00       |                 word    0       ' Configuration value
41b64     00 00       |                 word    0       ' Zero
41b66     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
41b68     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
41b69     05          |                 byte    REQ_SET_ADDR
41b6a     00 00       |                 word    0       ' Zero
41b6c     00 00       |                 word    0       ' Zero
41b6e     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
41b70                 | '------------------------------------------------------------------------------
41b70                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
41b70                 | ' wValue field dictates which protocol should be used.
41b70                 | '
41b70                 | ' When initialized, all devices default to report protocol. However the host
41b70                 | ' should not make any assumptions about the device state and should set the
41b70                 | ' desired protocol whenever initializing a device.
41b70                 | '------------------------------------------------------------------------------
41b70     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
41b71     0B          |                 byte    HID_SET_PROTO
41b72     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
41b74                 |                                                 ' (HID 1.11 Section 7.2.6).
41b74     00 00       |                 word    0               ' Interface index number.
41b76     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
41b78                 | '------------------------------------------------------------------------------
41b78     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
41b79     0A          |                 byte    HID_SET_IDLE
41b7a     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
41b7c                 |                                         ' reporting until a change is detected in the report data
41b7c                 | 
41b7c                 |                                         ' (HID 1.11 Section 7.2.4).
41b7c     00 00       |                 word    0       ' Interface index number.
41b7e     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
41b80     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
41b81     09          |                 byte    HID_SET_REPORT
41b82     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
41b84                 |                                         ' (HID 1.11 Section 7.2.2).
41b84     00 00       |                 word    0       ' Interface index number.
41b86     00 00       |                 word    0       ' Size of the report, in bytes.
41b88     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
41b89     06          |                 byte    REQ_GET_DESC
41b8a     00 22       |                 word    TYPE_REPORT << 8
41b8c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
41b8e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
41b90                 | '------------------------------------------------------------------------------
41b90     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
41b91     06          |                 byte    REQ_GET_DESC
41b92     00 29       |                 word    TYPE_HUB << 8
41b94     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
41b96     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
41b98     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
41b99     03          |                 byte    REQ_SET_FEATURE
41b9a     00 00       |                 word    0       ' port power
41b9c     01 00       |                 word    1       ' Port index number (1+)
41b9e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
41ba0     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
41ba1     01          |                 byte    REQ_CLEAR_FEATURE
41ba2     00 00       |                 word    0       ' port power
41ba4     01 00       |                 word    1       ' Port index number (1+)
41ba6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
41ba8     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
41ba9     00          |                 byte    REQ_GET_STATUS
41baa     00 00       |                 word    0
41bac     01 00       |                 word    1       ' Port index number (1+)
41bae     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
41bb0                 | '------------------------------------------------------------------------------
41bb0                 | if _HAVE_GAMEPAD
41bb0     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
41bb4                 | ps3_command_buff
41bb4     00 00 00 00 
41bb8     00          |                 byte    $00, $00, $00, $00, $00
41bb9     00 00 00 00 
41bbd     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
41bbe     FF 27 10 00 
41bc2     32          |                 byte    $FF, $27, $10, $00, $32
41bc3     FF 27 10 00 
41bc7     32          |                 byte    $FF, $27, $10, $00, $32
41bc8     FF 27 10 00 
41bcc     32          |                 byte    $FF, $27, $10, $00, $32
41bcd     FF 27 10 00 
41bd1     32          |                 byte    $FF, $27, $10, $00, $32
41bd2     00 00 00 00 
41bd6     00          |                 byte    $00, $00, $00, $00, $00
41bd7     00 00 00 00 
41bdb     00          |                 byte    $00, $00, $00, $00, $00
41bdc     00 00 00 00 
41be0     00          |                 byte    $00, $00, $00, $00, $00
41be1     00 00 00    |                 byte    $00, $00, $00
41be4                 | '------------------------------------------------------------------------------
41be4     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
41be7                 |                                         ' 0x01 All blinking
41be7                 |                                         ' 0x02 1 flashes, then on
41be7                 |                                         ' 0x03 2 flashes, then on
41be7                 |                                         ' 0x04 3 flashes, then on
41be7                 |                                         ' 0x05 4 flashes, then on
41be7                 |                                         ' 0x06 1 on
41be7                 |                                         ' 0x07 2 on
41be7                 |                                         ' 0x08 3 on
41be7                 |                                         ' 0x09 4 on
41be7                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
41be7                 |                                         ' 0x0B Blinking*
41be7                 |                                         ' 0x0C Slow blinking*
41be7                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
41be7     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
41bea     00          |                 byte    $00             ' Left rumble
41beb     00          |                 byte    $00             ' Right rumble
41bec     00 00 00    |                 byte    $00, $00, $00
41bef     00          | end
41bf0                 | alignl
41bf0                 | 
41bf0                 | if HAVE_MOUSE
41bf0     00 00 00 00 
41bf4     00 00 00 00 | mouse_limits long 0[2]
41bf8     00 00 00 00 | mouse_outptr long 0
41bfc                 | end
41bfc                 | 
41bfc                 | if KEYQUEUE_SIZE > 0
41bfc     00          | keyq_head byte 0
41bfd     00          | keyq_tail byte 0
41bfe     00 00 00 00 
      ...             
41dfa     00 00 00 00 
41dfe     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
41e00                 | alignl
41e00                 | end
41e00                 | 
41e00                 | if EMUPAD_MAX_PLAYER > 0
41e00                 | emupad_rule_buffer
41e00                 | if EMUPAD_BUILTIN_RULES
41e00                 | file "padmap_builtin.dat"
41e00                 | end
41e00                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
41e00                 | '' Default rule directly follows!
41e00                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
41e00                 | end
41e00                 | 
41e00                 | '------------------------------------------------------------------------------
41e00                 | ' The USB data cache area gets zero-filled at every device disconnect
41e00                 | '------------------------------------------------------------------------------
41e00                 | usb_cache_start
41e00                 | 
41e00                 | ' HID descriptor and report buffers
41e00                 | if !!OVERLAP_MEMORY
41e00     00 00 00 00 
      ...             
424f8     00 00 00 00 
424fc     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
42500                 | end
42500     00 00 00 00 
42504     00 00 00 00 | hkbd_report     byte    0[8]
42508     00 00 00 00 | hkbd_led_rep    byte    0
4250c                 | alignl
4250c                 | 
4250c                 | if HAVE_HIDPAD
4250c     00 00 00 00 
      ...             
425c8     00 00 00 00 
425cc     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
425d0                 | end
425d0                 | 
425d0                 | ' HUB descriptor
425d0     00          | hub_descr       byte    0   ' bDescLength
425d1     00          |                 byte    0   ' bDescriptorType
425d2     00          |                 byte    0   ' bNbrPorts
425d3     00 00       |                 word    0   ' wHubCharacteristics
425d5     00          |                 byte    0   ' bPwrOn2PwrGood
425d6     00          |                 byte    0   ' bHubContrCurrent
425d7     00          |                 byte    0   ' DeviceRemoveable
425d8     00          |                 byte    0   ' PortPwrCtrlMask
425d9                 | 
425d9                 | usb_cache_end
425d9                 | 
425d9                 | if HAVE_MOUSE
425d9     00 00 00 00 | mouse_xacc      long 0
425dd     00 00 00 00 | mouse_yacc      long 0
425e1     00 00 00 00 | mouse_zacc      long 0
425e5     00          | mouse_bstate    byte 0
425e6     00          | mouse_lpending  byte 0
425e7     00          | mouse_rpending  byte 0
425e8     00          | mouse_mpending  byte 0
425e9     00          | mouse_lock      byte 0
425ea     00 00 00    |                 byte 0[3] ' padding
425ed                 | end
425ed                 | 
425ed     00 00 00 00 
      ...             
42665     00 00 00 00 
42669     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
4266d     00 00 00 00 
42671     00 00 00 00 
42675     00 00 00 00 
42679     00 00 00 00 
4267d     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
4267f     00 00 00 00 
      ...             
42777     00 00 00 00 
4277b     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
4277f                 | 
4277f     00          | driver_cog      byte    0                       ' Current driver cog + 1
42780                 | 	alignl
42780                 | _audio096_spin2_dat_
42780                 | 
42780                 | audio       org     0
42780                 | 
42780     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
42784     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
42788     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
4278c                 |  
4278c     01 EC 63 FD |             cogid   pa                   ' compute cogid
42790     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
42794     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
42798     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
4279c                 | 
4279c     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
427a0     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
427a4     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
427a8     0F 24 06 FC |             wrpin   dac2,#right
427ac     0F 00 1E FC |             wxpin   #256,#right    
427b0     41 9C 64 FD |             dirh    #left addpins 1
427b4     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
427b8     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
427bc     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
427c0                 |             
427c0                 | '---------------------------------------------------------------------------------        
427c0                 | '----------------- The main loop -------------------------------------------------
427c0                 | '---------------------------------------------------------------------------------
427c0                 | 
427c0     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
427c4     10 00 90 CD |       if_c  jmp     #loop1
427c8                 |   
427c8     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
427cc     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
427d0     D5 00 80 F1 |             sub     0-0,a40000000
427d4     FD 01 6E FB |             djnz    cn,#p402
427d8                 |     
427d8     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
427dc     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
427e0     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
427e4     01 00 06 C6 |     if_c    mov     cn,#1
427e8     DA 02 3A F3 |             fle     ct,time3 wcz
427ec     02 00 06 C6 |     if_c    mov     cn,#2     
427f0     DB 02 3A F3 |             fle     ct,time4 wcz
427f4     03 00 06 C6 |     if_c    mov     cn,#3
427f8     DC 02 3A F3 |             fle     ct,time5 wcz
427fc     04 00 06 C6 |     if_c    mov     cn,#4
42800     DD 02 3A F3 |             fle     ct,time6 wcz
42804     05 00 06 C6 |     if_c    mov     cn,#5
42808     DE 02 3A F3 |             fle     ct,time7 wcz
4280c     06 00 06 C6 |     if_c    mov     cn,#6
42810     DF 02 3A F3 |             fle     ct,time8 wcz
42814     07 00 06 C6 |     if_c    mov     cn,#7
42818                 | 
42818                 | 
42818                 | '----------------------------------------------------------------------------------
42818                 | '------------- Compute channel samples --------------------------------------------
42818                 | '----------------------------------------------------------------------------------
42818                 | 
42818                 | 
42818     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
4281c     06 C0 65 F0 |             shl     channeladd,#6
42820     E0 F0 03 F1 |             add     ptra,channeladd
42824                 | 
42824     28 16 64 FD |             setq    #11                        	' read parameters
42828     00 D7 05 FB |             rdlong  pointer0,ptra
4282c                 |     	    
4282c     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
42830     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
42834     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
42838     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
4283c     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
42840     00 C4 0D F2 |             cmp     qq,#0 wz                         
42844     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
42848     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
4284c                 |             
4284c     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
42850     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
42854     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
42858                 | 
42858     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
4285c     EC 08 3A F9 |             getword oldrs,sample0,#1
42860     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
42864     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
42868     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
4286c     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
42870                 | 
42870     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
42874     00 04 02 F6 |             mov     dt0,0-0    
42878     D7 04 82 F1 |             sub     dt0,time0
4287c                 |             
4287c     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
42880     FB 00 00 F1 |             add     0-0,afreq0  	
42884                 |             
42884                 | '---- envelopes
42884                 |             
42884     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
42888     20 00 00 AF 
4288c     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
42890     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
42894                 | 
42894     FB 48 02 F6 |             mov     envs1,afreq0
42898     F5 48 02 FA |             mul     envs1,envspd0
4289c     24 E7 01 F1 |             add     envph0,envs1 
428a0                 | 
428a0     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
428a4     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
428a8     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
428ac     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
428b0     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
428b4     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
428b8     00 46 06 36 |     if_ge   mov     envlo,#0
428bc     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
428c0     16 E6 65 30 |     if_ge   shl     envph0,#22
428c4                 | 
428c4     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
428c8     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
428cc     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
428d0     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
428d4     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
428d8     24 49 32 F9 |             getword envs1,envs1,#0		' current value
428dc     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
428e0     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
428e4     23 49 02 FA |             mul     envs1,envlo
428e8     25 49 02 F1 |             add     envs1,envs2
428ec     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
428f0                 |             
428f0     1B DA 0D F4 | p410        testb   sstart0, #27 wz
428f4     1B C6 61 AD |     if_z    getrnd  spl
428f8     58 00 90 AD |     if_z    jmp     #p406
428fc                 |  
428fc     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
42900     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
42904     08 D6 45 F0 |             shr     pointer0,#8
42908                 |          
42908     1F DA 0D F4 |             testb   sstart0,#31 wz            
4290c     01 D6 65 A0 |     if_z    shl     pointer0,#1        
42910     1C DA 0D F4 |             testb   sstart0,#28 wz            
42914     01 D6 65 A0 |     if_z    shl     pointer0,#1        
42918                 |         
42918     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
4291c     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
42920     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
42924                 |             
42924     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
42928     ED C4 01 F1 |             add     qq,sstart0            
4292c                 | 
4292c     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
42930     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
42934     1C 01 B0 1D |     if_gt   call    #cache_read
42938                 |          
42938     1F DA 0D F4 |             testb   sstart0,#31 wz 
4293c     08 C6 65 50 |     if_nz   shl     spl,#8
42940     08 D6 65 50 |     if_nz   shl     pointer0,#8
42944     07 D6 65 A0 |     if_z    shl     pointer0,#7
42948     1C DA 0D F4 |             testb   sstart0,#28 wz            
4294c     01 D6 45 A0 |     if_z    shr     pointer0,#1    
42950     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
42954                 | 
42954                 | 
42954     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
42958     00 C6 01 F6 |             mov     spl,0-0
4295c     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
42960     00 C6 01 F6 |             mov     spl,0-0
42964                 | 
42964     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
42968     00 0A 02 F6 |             mov     ls0,0-0
4296c     20 00 00 FF 
42970     00 C4 05 F6 |             mov     qq,##16384
42974     FE C4 81 F1 |             sub     qq,apan0
42978     E2 C6 31 FA |             scas    spl,qq
4297c     00 0C 02 F6 |             mov     rs0, 0-0
42980                 | 
42980     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
42984     06 11 02 F1 |             add     rs,rs0
42988     03 0F 82 F1 |             sub     ls,oldls
4298c     05 0F 02 F1 |             add     ls,ls0
42990                 |    
42990     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
42994     05 D9 21 F9 |             setword sample0,ls0,#0
42998                 |             
42998     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
4299c     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
429a0     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
429a4                 |   '  if_z    mov     sample0,#0
429a4     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
429a8     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
429ac     04 00 00 AF 
429b0     00 B0 05 A1 |     if_z    add     time1,##2048
429b4     D8 B2 01 A6 |     if_z    mov     time2,time1
429b8     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
429bc                 | 
429bc     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
429c0     00 D7 65 FC |             wrlong  pointer0,ptra
429c4     08 E7 65 FC |             wrlong  envph0,ptra[8]
429c8     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
429cc                 |                       
429cc     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
429d0     FF C3 25 A7 |     if_z    decmod  front, #511          
429d4                 |          
429d4     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
429d8     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
429dc     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
429e0     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
429e4                 | 	    
429e4                 | 		    
429e4     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
429e8     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
429ec     04 15 02 F6 |             mov     newsample, oldrs       
429f0                 | 
429f0     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
429f4     02 AF 01 F1 |             add     time0,dt0    
429f8                 |                                      
429f8     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
429fc     D8 FD 9F AD |     if_z    jmp     #loop1
42a00     02 C5 01 F6 |             mov     qq,dt0
42a04                 | 
42a04                 |     
42a04                 |             
42a04     01 4E 36 F0 | p301        rol     dropper,#1 wc
42a08     40 00 90 3D |     if_nc   jmp     #p399
42a0c     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
42a10     00 C2 9D F2 |             cmpr    front, #0-0 wcz
42a14     F4 FF 9F AD |     if_e    jmp     #p398   
42a18                 | 		
42a18     00 1A 0E F2 | 	    cmp     scbase,#0 wz
42a1c     20 00 90 AD |     if_z    jmp     #p302	   
42a20                 |   
42a20     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
42a24     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
42a28     02 1E 66 C0 |     if_c    shl     scptr2,#2
42a2c     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
42a30     60 1E 66 FC |             wrlong  scptr2,#$60
42a34     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
42a38     01 00 00 CF 
42a3c     7F 1C 06 C7 |     if_c    incmod  scptr,##639
42a40                 | 			    
42a40     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
42a44     00 00 00 FF 
42a48     FF C3 05 F7 |             incmod  front, ##511
42a4c     ED C5 6D FB | p399        djnz    qq,#p301
42a50                 |             
42a50     6C FD 9F FD |             jmp     #loop            'loop
42a54                 | 
42a54                 | '----------------------------------------------------------------------------------
42a54                 | '------------- This is the end of the main loop -----------------------------------
42a54                 | '----------------------------------------------------------------------------------
42a54                 | 
42a54                 | '----------------------------------------------------------------------------------
42a54                 | '------------- PSRAM cache ----------- --------------------------------------------
42a54                 | '----------------------------------------------------------------------------------
42a54                 | 
42a54                 | ' There are 8 cache pointers for 8 channels
42a54                 | ' if 24 higher bits of address=cache, then get a word from the cache
42a54                 | ' else load the cache from PSRAM, update the pointer, then read a sample
42a54                 | 
42a54                 | 
42a54     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
42a58                 |             
42a58     E2 40 02 F6 | 	    mov     addrhi,qq		
42a5c     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
42a60     14 01 96 F9 | 	    alts    cn,#cache1            
42a64     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
42a68     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
42a6c                 | 	
42a6c     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
42a70     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
42a74     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
42a78     08 38 66 F0 | 	    shl     cmd,#8
42a7c     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
42a80     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
42a84     08 3A 66 F0 |             shl     hubaddr,#8                  '
42a88     13 3B 02 F1 |             add     hubaddr,hubptr 
42a8c     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
42a90     28 04 64 FD |             setq    #2                          ' write 3 longs
42a94     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
42a98     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
42a9c     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
42aa0                 |             
42aa0                 | 	
42aa0     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
42aa4     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
42aa8     13 C5 01 F1 | 	    add     qq,hubptr
42aac     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
42ab0     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
42ab4                 |           
42ab4                 | 
42ab4                 | '--------------------------------------------------------------------------
42ab4                 | '------ Interrupt service -------------------------------------------------
42ab4                 | '------ Output the sample, get the next one if exists ---------------------
42ab4                 | '--------------------------------------------------------------------------
42ab4                 | 
42ab4     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
42ab8     0F D0 25 FC |             wypin   rsample,#right       '4
42abc     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
42ac0     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
42ac4     FF F3 07 57 |     if_ne   incmod  ptrb,#511
42ac8     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
42acc     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
42ad0                 |     
42ad0     F5 FF 3B FB |             reti1                        '17/19 
42ad4                 |           
42ad4                 | '---------------------------------------------------------------------------
42ad4                 | '-------- End of interrupt -------------------------------------------------
42ad4                 | '---------------------------------------------------------------------------    
42ad4                 | 
42ad4                 | 
42ad4                 | '---------------------------------------------------------------------------
42ad4                 | '------- Variables ---------------------------------------------------------
42ad4                 | '---------------------------------------------------------------------------
42ad4                 | 
42ad4                 | ' constants
42ad4                 | 
42ad4     00 00 00 40 | a40000000   long $40000000
42ad8     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
42adc                 | 
42adc                 | ' Time variables
42adc                 | 
42adc     00 00 00 00 | time0       long 0    ' Global sample computing time
42ae0     01 00 00 00 | time1       long 1    ' Local channels time
42ae4     02 00 00 00 | time2       long 2
42ae8     03 00 00 00 | time3       long 3
42aec     04 00 00 00 | time4       long 4
42af0     05 00 00 00 | time5       long 5
42af4     06 00 00 00 | time6       long 6
42af8     07 00 00 00 | time7       long 7
42afc     08 00 00 00 | time8       long 8
42b00                 | 
42b00     00 00 00 00 | channeladd long 0
42b04                 | 
42b04     00 00 00 00 | front       long 0
42b08                 | 
42b08                 | ' temporary variables 
42b08     00 00 00 00 | qq          long 0
42b0c     00 00 00 00 | spl         long 0
42b10     00 00 00 00 | zero        long 0
42b14     00 00 00 00 | mailbox     long 0
42b18     00 00 00 00 | mailbox2 long 0
42b1c                 | 
42b1c                 | ' Interrupt ISR variables
42b1c                 | 
42b1c     00 00 00 00 | lsample     long 0
42b20     00 00 00 00 | rsample     long 0
42b24     00 00 00 00 | lsnext      long 0
42b28     00 00 00 00 | rsnext      long 0 
42b2c                 | 
42b2c                 | ' channel parameter block
42b2c                 | 
42b2c     00 00 00 00 | pointer0    long 0     
42b30     00 00 00 00 | sample0     long 0
42b34     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
42b38     00 00 00 00 | lstart0     long 0
42b3c     00 00 00 00 | lend0       long 0
42b40     00 00 00 00 | volpan0     long 0
42b44     00 00 00 00 | freqskip0   long 0
42b48     00 00 00 00 | command0    long 0
42b4c     00 00 00 00 | envph0	    long 0
42b50     00 00 00 00 | envptr0	    long 0
42b54     00 00 00 00 | envspd0	    long 0
42b58     00 00 00 00 | envlen0	    long 0
42b5c     00 00 00 00 | res5	    long 0
42b60     00 00 00 00 | res6	    long 0
42b64     00 00 00 00 | res7	    long 0
42b68     00 00 00 00 | res8	    long 0
42b6c                 | 
42b6c     00 00 00 00 | afreq0      long 0
42b70     00 00 00 00 | askip0      long 0
42b74     00 00 00 00 | avol0       long 0
42b78     00 00 00 00 | apan0       long 0
42b7c                 | 
42b7c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
42b80     00 00 00 00 | cn          long 0
42b84     00 00 00 00 | ct          long 0
42b88     00 00 00 00 | dt0         long 0
42b8c                 | 
42b8c                 | ' Samples
42b8c     00 00 00 00 | oldls       long 0
42b90     00 00 00 00 | oldrs       long 0
42b94                 | 
42b94     00 00 00 00 | ls0         long 0
42b98     00 00 00 00 | rs0         long 0
42b9c                 | 
42b9c     00 00 00 00 | ls          long 0    
42ba0     00 00 00 00 | rs          long 0
42ba4                 | 
42ba4     00 00 00 00 | oldsample   long 0
42ba8     00 00 00 00 | newsample   long 0
42bac                 | 
42bac     00 00 00 00 | nrsample    long 0
42bb0     00 00 00 00 | nlsample    long 0
42bb4                 | 
42bb4     00 00 00 00 | scbase long 0
42bb8     00 00 00 00 | scptr long 0
42bbc     00 00 00 00 | scptr2 long 0
42bc0     00 00 00 00 | scope long 0
42bc4                 | 
42bc4     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
42bc8     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
42bcc                 | 
42bcc     00 18 07 00 | hubptr      long $71800
42bd0     00 00 00 00 | cache1      long 0
42bd4     00 00 00 00 | cache2      long 0
42bd8     00 00 00 00 | cache3      long 0
42bdc     00 00 00 00 | cache4      long 0
42be0     00 00 00 00 | cache5      long 0
42be4     00 00 00 00 | cache6      long 0
42be8     00 00 00 00 | cache7      long 0
42bec     00 00 00 00 | cache8      long 0
42bf0                 | 
42bf0                 | 
42bf0     00 00 00 00 | cmd         long 0
42bf4     00 00 00 00 | hubaddr     long 0
42bf8     00 01 00 00 | count       long 256
42bfc     00 00 00 00 | addrlo long 0
42c00     00 00 00 00 | addrhi long 0
42c04     00 00 00 00 | pointer00 long 0
42c08     00 00 00 00 | envhi long 0
42c0c     00 00 00 00 | envlo long 0
42c10     00 00 00 00 | envs1 long 0
42c14     00 00 00 00 | envs2 long 0
42c18     00 00 00 00 | noise0 long 0
42c1c     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
42c20     00 00 00 00 
42c24     00 00 00 00 | null  			long 	0,0           ' for channel reset
42c28                 | 	alignl
42c28                 | __system__dat_
42c28     00 00 00 00 
42c2c     00 00 00 00 | 	byte	$00[8]
42c30     03 00 00 00 
42c34     00 00 00 00 
42c38     00 00 00 00 
42c3c     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
42c40     00 00 00 00 
      ...             
42ecc     00 00 00 00 
42ed0     00 00 00 00 | 	byte	$00[660]
42ed4     00 00 C0 0A | 	long	(172 {__system____root_opendir})<<20
42ed8     00 00 D0 0A | 	long	(173 {__system____root_closedir})<<20
42edc     00 00 E0 0A | 	long	(174 {__system____root_readdir})<<20
42ee0     00 00 F0 0A | 	long	(175 {__system____root_stat})<<20
42ee4     00 00 00 00 
42ee8     00 00 00 00 
42eec     00 00 00 00 
42ef0     00 00 00 00 
42ef4     00 00 00 00 
42ef8     00 00 00 00 
42efc     00 00 00 00 | 	byte	$00[28]
42f00     68 2F 04 00 | 	long	@@@__system__dat_ + 832
42f04     6B 2F 04 00 | 	long	@@@__system__dat_ + 835
42f08     8C 2F 04 00 | 	long	@@@__system__dat_ + 868
42f0c     A5 2F 04 00 | 	long	@@@__system__dat_ + 893
42f10     C0 2F 04 00 | 	long	@@@__system__dat_ + 920
42f14     DA 2F 04 00 | 	long	@@@__system__dat_ + 946
42f18     EA 2F 04 00 | 	long	@@@__system__dat_ + 962
42f1c     FC 2F 04 00 | 	long	@@@__system__dat_ + 980
42f20     0E 30 04 00 | 	long	@@@__system__dat_ + 998
42f24     20 30 04 00 | 	long	@@@__system__dat_ + 1016
42f28     2C 30 04 00 | 	long	@@@__system__dat_ + 1028
42f2c     3D 30 04 00 | 	long	@@@__system__dat_ + 1045
42f30     51 30 04 00 | 	long	@@@__system__dat_ + 1065
42f34     5B 30 04 00 | 	long	@@@__system__dat_ + 1075
42f38     6B 30 04 00 | 	long	@@@__system__dat_ + 1091
42f3c     7A 30 04 00 | 	long	@@@__system__dat_ + 1106
42f40     90 30 04 00 | 	long	@@@__system__dat_ + 1128
42f44     A9 30 04 00 | 	long	@@@__system__dat_ + 1153
42f48     BD 30 04 00 | 	long	@@@__system__dat_ + 1173
42f4c     CB 30 04 00 | 	long	@@@__system__dat_ + 1187
42f50     DF 30 04 00 | 	long	@@@__system__dat_ + 1207
42f54     EB 30 04 00 | 	long	@@@__system__dat_ + 1219
42f58     FD 30 04 00 | 	long	@@@__system__dat_ + 1237
42f5c     15 31 04 00 | 	long	@@@__system__dat_ + 1261
42f60     27 31 04 00 | 	long	@@@__system__dat_ + 1279
42f64     3A 31 04 00 | 	long	@@@__system__dat_ + 1298
42f68     4F 4B 00 4E 
42f6c     75 6D 65 72 
42f70     69 63 61 6C 
42f74     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
42f78     75 6D 65 6E 
42f7c     74 20 6F 75 
42f80     74 20 6F 66 
42f84     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
42f88     61 69 6E 00 
42f8c     52 65 73 75 
42f90     6C 74 20 6E 
42f94     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
42f98     65 70 72 65 
42f9c     73 65 6E 74 
42fa0     61 62 6C 65 
42fa4     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
42fa8     65 67 61 6C 
42fac     20 6D 75 6C 
42fb0     74 69 62 79 
42fb4     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
42fb8     65 71 75 65 
42fbc     6E 63 65 00 
42fc0     4E 6F 20 73 
42fc4     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
42fc8     66 69 6C 65 
42fcc     20 6F 72 20 
42fd0     64 69 72 65 
42fd4     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
42fd8     79 00 42 61 
42fdc     64 20 66 69 
42fe0     6C 65 20 6E 
42fe4     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
42fe8     72 00 50 65 
42fec     72 6D 69 73 
42ff0     73 69 6F 6E 
42ff4     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
42ff8     69 65 64 00 
42ffc     4E 6F 74 20 
43000     65 6E 6F 75 
43004     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
43008     65 6D 6F 72 
4300c     79 00 54 65 
43010     6D 70 6F 72 
43014     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
43018     66 61 69 6C 
4301c     75 72 65 00 
43020     46 69 6C 65 
43024     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
43028     73 74 73 00 
4302c     49 6E 76 61 
43030     6C 69 64 20 
43034     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
43038     6D 65 6E 74 
4303c     00 54 6F 6F 
43040     20 6D 61 6E 
43044     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
43048     65 6E 20 66 
4304c     69 6C 65 73 
43050     00 49 2F 4F 
43054     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
43058     6F 72 00 4E 
4305c     6F 74 20 61 
43060     20 64 69 72 
43064     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
43068     72 79 00 49 
4306c     73 20 61 20 
43070     64 69 72 65 
43074     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
43078     79 00 52 65 
4307c     61 64 20 6F 
43080     6E 6C 79 20 
43084     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
43088     20 73 79 73 
4308c     74 65 6D 00 
43090     46 75 6E 63 
43094     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
43098     20 6E 6F 74 
4309c     20 69 6D 70 
430a0     6C 65 6D 65 
430a4     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
430a8     00 44 69 72 
430ac     65 63 74 6F 
430b0     72 79 20 6E 
430b4     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
430b8     6D 70 74 79 
430bc     00 4E 61 6D 
430c0     65 20 74 6F 
430c4     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
430c8     6E 67 00 44 
430cc     65 76 69 63 
430d0     65 20 6E 6F 
430d4     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
430d8     65 6B 61 62 
430dc     6C 65 00 42 
430e0     61 64 20 61 
430e4     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
430e8     73 73 00 42 
430ec     72 6F 6B 65 
430f0     6E 20 63 6F 
430f4     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
430f8     74 69 6F 6E 
430fc     00 44 65 76 
43100     69 63 65 20 
43104     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
43108     65 73 6F 75 
4310c     72 63 65 20 
43110     62 75 73 79 
43114     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
43118     73 73 20 64 
4311c     65 76 69 63 
43120     65 20 6C 69 
43124     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
43128     6F 20 73 70 
4312c     61 63 65 20 
43130     6F 6E 20 64 
43134     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
43138     65 00 55 6E 
4313c     6B 6E 6F 77 
43140     6E 20 65 72 
43144     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
43148     00 00 00 00 
4314c     00 00 00 00 
43150     00 00 00 00 | 	byte	$00[12]
43154     05 00 00 00 
43158     00 00 00 00 
4315c     00 00 00 00 
43160     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
43164     00 00 00 00 | 	byte	$00, $00, $00, $00
43168     00 00 40 0C | 	long	(196 {__system___tx})<<20
4316c     00 00 50 0C | 	long	(197 {__system___rx})<<20
43170     00 00 00 00 | 	byte	$00, $00, $00, $00
43174     00 00 60 0C | 	long	(198 {__system___rxtxioctl_0775})<<20
43178     00 00 70 0C | 	long	(199 {__system____dummy_flush_0776})<<20
4317c     00 00 00 00 
43180     00 00 00 00 | 	byte	$00[8]
43184     01 00 00 00 
43188     06 00 00 00 
4318c     00 00 00 00 
43190     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
43194     00 00 00 00 
43198     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
4319c     00 00 40 0C | 	long	(196 {__system___tx})<<20
431a0     00 00 50 0C | 	long	(197 {__system___rx})<<20
431a4     00 00 00 00 | 	byte	$00, $00, $00, $00
431a8     00 00 60 0C | 	long	(198 {__system___rxtxioctl_0775})<<20
431ac     00 00 70 0C | 	long	(199 {__system____dummy_flush_0776})<<20
431b0     00 00 00 00 
431b4     00 00 00 00 | 	byte	$00[8]
431b8     01 00 00 00 
431bc     06 00 00 00 
431c0     00 00 00 00 
431c4     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
431c8     00 00 00 00 
431cc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
431d0     00 00 40 0C | 	long	(196 {__system___tx})<<20
431d4     00 00 50 0C | 	long	(197 {__system___rx})<<20
431d8     00 00 00 00 | 	byte	$00, $00, $00, $00
431dc     00 00 60 0C | 	long	(198 {__system___rxtxioctl_0775})<<20
431e0     00 00 70 0C | 	long	(199 {__system____dummy_flush_0776})<<20
431e4     00 00 00 00 
      ...             
43354     00 00 00 00 
43358     00 00 00 00 | 	byte	$00[376]
4335c     60 33 04 00 | 	long	@@@__system__dat_ + 1848
43360     00 00 00 00 
43364     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
43368                 | 	alignl
43368                 | _fatfs_cc_dat_
43368     C7 00 FC 00 
4336c     E9 00 E2 00 
43370     E4 00 E0 00 
43374     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
43378     EA 00 EB 00 
4337c     E8 00 EF 00 
43380     EE 00 EC 00 
43384     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
43388     C9 00 E6 00 
4338c     C6 00 F4 00 
43390     F6 00 F2 00 
43394     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
43398     FF 00 D6 00 
4339c     DC 00 F8 00 
433a0     A3 00 D8 00 
433a4     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
433a8     E1 00 ED 00 
433ac     F3 00 FA 00 
433b0     F1 00 D1 00 
433b4     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
433b8     BF 00 AE 00 
433bc     AC 00 BD 00 
433c0     BC 00 A1 00 
433c4     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
433c8     91 25 92 25 
433cc     93 25 02 25 
433d0     24 25 C1 00 
433d4     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
433d8     A9 00 63 25 
433dc     51 25 57 25 
433e0     5D 25 A2 00 
433e4     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
433e8     14 25 34 25 
433ec     2C 25 1C 25 
433f0     00 25 3C 25 
433f4     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
433f8     5A 25 54 25 
433fc     69 25 66 25 
43400     60 25 50 25 
43404     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
43408     F0 00 D0 00 
4340c     CA 00 CB 00 
43410     C8 00 31 01 
43414     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
43418     CF 00 18 25 
4341c     0C 25 88 25 
43420     84 25 A6 00 
43424     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
43428     D3 00 DF 00 
4342c     D4 00 D2 00 
43430     F5 00 D5 00 
43434     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
43438     DE 00 DA 00 
4343c     DB 00 D9 00 
43440     FD 00 DD 00 
43444     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
43448     AD 00 B1 00 
4344c     17 20 BE 00 
43450     B6 00 A7 00 
43454     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
43458     B0 00 A8 00 
4345c     B7 00 B9 00 
43460     B3 00 B2 00 
43464     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
43468     61 00 1A 03 
4346c     E0 00 17 03 
43470     F8 00 07 03 
43474     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
43478     78 01 00 01 
4347c     30 01 32 01 
43480     06 01 39 01 
43484     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
43488     2E 01 79 01 
4348c     06 01 80 01 
43490     4D 00 43 02 
43494     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
43498     82 01 84 01 
4349c     84 01 86 01 
434a0     87 01 87 01 
434a4     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
434a8     8B 01 8B 01 
434ac     8D 01 8E 01 
434b0     8F 01 90 01 
434b4     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
434b8     93 01 94 01 
434bc     F6 01 96 01 
434c0     97 01 98 01 
434c4     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
434c8     9B 01 9C 01 
434cc     9D 01 20 02 
434d0     9F 01 A0 01 
434d4     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
434d8     A2 01 A4 01 
434dc     A4 01 A6 01 
434e0     A7 01 A7 01 
434e4     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
434e8     AB 01 AC 01 
434ec     AC 01 AE 01 
434f0     AF 01 AF 01 
434f4     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
434f8     B3 01 B3 01 
434fc     B5 01 B5 01 
43500     B7 01 B8 01 
43504     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
43508     BB 01 BC 01 
4350c     BC 01 BE 01 
43510     F7 01 C0 01 
43514     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
43518     C3 01 C4 01 
4351c     C5 01 C4 01 
43520     C7 01 C8 01 
43524     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
43528     CB 01 CA 01 
4352c     CD 01 10 01 
43530     DD 01 01 00 
43534     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
43538     12 01 F3 01 
4353c     03 00 F1 01 
43540     F4 01 F4 01 
43544     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
43548     22 02 12 01 
4354c     3A 02 09 00 
43550     65 2C 3B 02 
43554     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
43558     66 2C 3F 02 
4355c     40 02 41 02 
43560     41 02 46 02 
43564     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
43568     40 00 81 01 
4356c     86 01 55 02 
43570     89 01 8A 01 
43574     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
43578     5A 02 90 01 
4357c     5C 02 5D 02 
43580     5E 02 5F 02 
43584     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
43588     62 02 94 01 
4358c     64 02 65 02 
43590     66 02 67 02 
43594     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
43598     6A 02 62 2C 
4359c     6C 02 6D 02 
435a0     6E 02 9C 01 
435a4     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
435a8     9D 01 73 02 
435ac     74 02 9F 01 
435b0     76 02 77 02 
435b4     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
435b8     7A 02 7B 02 
435bc     7C 02 64 2C 
435c0     7E 02 7F 02 
435c4     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
435c8     82 02 A9 01 
435cc     84 02 85 02 
435d0     86 02 87 02 
435d4     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
435d8     B1 01 B2 01 
435dc     45 02 8D 02 
435e0     8E 02 8F 02 
435e4     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
435e8     B7 01 7B 03 
435ec     03 00 FD 03 
435f0     FE 03 FF 03 
435f4     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
435f8     86 03 88 03 
435fc     89 03 8A 03 
43600     B1 03 11 03 
43604     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
43608     A3 03 A3 03 
4360c     C4 03 08 03 
43610     CC 03 03 00 
43614     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
43618     8F 03 D8 03 
4361c     18 01 F2 03 
43620     0A 00 F9 03 
43624     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
43628     F5 03 F6 03 
4362c     F7 03 F7 03 
43630     F9 03 FA 03 
43634     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
43638     20 03 50 04 
4363c     10 07 60 04 
43640     22 01 8A 04 
43644     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
43648     0E 01 CF 04 
4364c     01 00 C0 04 
43650     D0 04 44 01 
43654     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
43658     00 00 7D 1D 
4365c     01 00 63 2C 
43660     00 1E 96 01 
43664     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
43668     00 1F 08 06 
4366c     10 1F 06 06 
43670     20 1F 08 06 
43674     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
43678     40 1F 06 06 
4367c     51 1F 07 00 
43680     59 1F 52 1F 
43684     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
43688     5D 1F 56 1F 
4368c     5F 1F 60 1F 
43690     08 06 70 1F 
43694     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
43698     BB 1F C8 1F 
4369c     C9 1F CA 1F 
436a0     CB 1F DA 1F 
436a4     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
436a8     F9 1F EA 1F 
436ac     EB 1F FA 1F 
436b0     FB 1F 80 1F 
436b4     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
436b8     08 06 A0 1F 
436bc     08 06 B0 1F 
436c0     04 00 B8 1F 
436c4     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
436c8     BC 1F CC 1F 
436cc     01 00 C3 1F 
436d0     D0 1F 02 06 
436d4     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
436d8     E5 1F 01 00 
436dc     EC 1F F3 1F 
436e0     01 00 FC 1F 
436e4     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
436e8     32 21 70 21 
436ec     10 02 84 21 
436f0     01 00 83 21 
436f4     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
436f8     30 2C 2F 04 
436fc     60 2C 02 01 
43700     67 2C 06 01 
43704     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
43708     80 2C 64 01 
4370c     00 2D 26 08 
43710     41 FF 1A 03 
43714     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
43718     05 07 09 0E 
4371c     10 12 14 16 
43720     18 1C 1E 43 
43724     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
43728     41 41 43 45 
4372c     45 45 49 49 
43730     49 41 41 45 
43734     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
43738     4F 55 55 59 
4373c     4F 55 4F 9C 
43740     4F 9E 9F 41 
43744     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
43748     A5 A6 A7 A8 
4374c     A9 AA AB AC 
43750     AD AE AF B0 
43754     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
43758     41 41 41 B8 
4375c     B9 BA BB BC 
43760     BD BE BF C0 
43764     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
43768     C5 41 41 C8 
4376c     C9 CA CB CC 
43770     CD CE CF D1 
43774     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
43778     49 49 49 49 
4377c     D9 DA DB DC 
43780     DD 49 DF 4F 
43784     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
43788     4F E6 E8 E8 
4378c     55 55 55 59 
43790     59 EE EF F0 
43794     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
43798     F5 F6 F7 F8 
4379c     F9 FA FB FC 
437a0     FD FE FF 00 
437a4     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
437a8     00 00 00 00 | 	byte	$00, $00, $00, $00
437ac     00 00 30 0B | 	long	(179 {_fatfs_cc_v_close})<<20
437b0     00 00 40 0B | 	long	(180 {_fatfs_cc_v_read})<<20
437b4     00 00 50 0B | 	long	(181 {_fatfs_cc_v_write})<<20
437b8     00 00 60 0B | 	long	(182 {_fatfs_cc_v_lseek})<<20
437bc     00 00 70 0B | 	long	(183 {_fatfs_cc_v_ioctl})<<20
437c0     00 00 80 0C | 	long	(200 {_fatfs_cc_v_flush})<<20
437c4     00 00 00 00 
437c8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
437cc     00 00 80 0B | 	long	(184 {_fatfs_cc_v_open})<<20
437d0     00 00 90 0B | 	long	(185 {_fatfs_cc_v_creat})<<20
437d4     00 00 A0 0B | 	long	(186 {_fatfs_cc_v_opendir})<<20
437d8     00 00 B0 0B | 	long	(187 {_fatfs_cc_v_closedir})<<20
437dc     00 00 C0 0B | 	long	(188 {_fatfs_cc_v_readdir})<<20
437e0     00 00 D0 0B | 	long	(189 {_fatfs_cc_v_stat})<<20
437e4     00 00 E0 0B | 	long	(190 {_fatfs_cc_v_mkdir})<<20
437e8     00 00 F0 0B | 	long	(191 {_fatfs_cc_v_rmdir})<<20
437ec     00 00 00 0C | 	long	(192 {_fatfs_cc_v_remove})<<20
437f0     00 00 10 0C | 	long	(193 {_fatfs_cc_v_rename})<<20
437f4     00 00 20 0C | 	long	(194 {_fatfs_cc_v_init})<<20
437f8     00 00 30 0C | 	long	(195 {_fatfs_cc_v_deinit})<<20
437fc     FF FF FF FF 
43800     1F 00 00 00 
43804     1C 00 00 00 
43808     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
4380c     1E 00 00 00 
43810     1F 00 00 00 
43814     1E 00 00 00 
43818     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
4381c     1F 00 00 00 
43820     1E 00 00 00 
43824     1F 00 00 00 
43828     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
4382c     1F 00 00 00 
43830     00 00 00 00 
43834     1F 00 00 00 
43838     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
4383c     5A 00 00 00 
43840     78 00 00 00 
43844     97 00 00 00 
43848     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
4384c     D4 00 00 00 
43850     F3 00 00 00 
43854     11 01 00 00 
43858     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
4385c     4E 01 00 00 
43860     6D 01 00 00 
43864     FF FF FF FF 
43868     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
4386c     00 00 00 00 
      ...             
43884     00 00 00 00 
43888     00 00 00 00 | 	byte	$00[32]
4388c     AA 38 04 00 | 	long	@@@_fatfs_cc_dat_ + 1346
43890     AE 38 04 00 | 	long	@@@_fatfs_cc_dat_ + 1350
43894     00 00 00 00 
43898     00 00 00 00 
4389c     00 00 00 00 
438a0     00 00 00 00 
438a4     00 00       | 	byte	$00[18]
438a6     3F 3F 3F 00 
438aa     55 43 54 00 
438ae     55 43 54 00 
438b2     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
438b6     00 00 00 00 
438ba     00 00 00    | 	byte	$00[7]
438bd     CA 9A 3B 00 
438c1     00 00 00 01 
438c5     01 01 01 01 
438c9     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
438cd     91 11 11 11 
438d1     11 01 01 01 
438d5     01 01 01 01 
438d9     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
438dd     01 01 01 01 
438e1     01 01 01    | 	byte	$01[7]
438e4     90 20 20 20 
438e8     20 20 20 20 
438ec     20 20 20 20 
438f0     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
438f4     42 42 42 42 
438f8     42 42 42 42 
438fc     42 42       | 	byte	$42[10]
438fe     20 20 20 20 
43902     20 20 20    | 	byte	$20[7]
43905     44 44 44 44 
43909     44 44       | 	byte	$44[6]
4390b     04 04 04 04 
4390f     04 04 04 04 
43913     04 04 04 04 
43917     04 04 04 04 
4391b     04 04 04 04 | 	byte	$04[20]
4391f     20 20 20 20 
43923     20 20       | 	byte	$20[6]
43925     48 48 48 48 
43929     48 48       | 	byte	$48[6]
4392b     08 08 08 08 
4392f     08 08 08 08 
43933     08 08 08 08 
43937     08 08 08 08 
4393b     08 08 08 08 | 	byte	$08[20]
4393f     20 20 20 20 
43943     01 00 00 00 
43947     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
43948                 | __methodtable__
43948     A4 66 01 00 | 	long	@_do_no_command
4394c     A8 0A 02 00 | 	long	@_do_plus
43950     C8 FA 01 00 | 	long	@_do_minus
43954     90 09 02 00 | 	long	@_do_or
43958     48 01 02 00 | 	long	@_do_mul
4395c     8C E5 01 00 | 	long	@_do_fdiv
43960     78 DD 01 00 | 	long	@_do_and
43964     90 DE 01 00 | 	long	@_do_div
43968     28 FF 01 00 | 	long	@_do_mod
4396c     5C 11 02 00 | 	long	@_do_shl
43970     74 12 02 00 | 	long	@_do_shr
43974     94 0F 02 00 | 	long	@_do_power
43978     30 D3 01 00 | 	long	@_do_getvar
4397c     E0 93 01 00 | 	long	@_do_push
43980     28 CD 01 00 | 	long	@_do_assign
43984     C8 F6 00 00 | 	long	@_do_cls
43988     70 60 01 00 | 	long	@_do_new
4398c     24 8C 01 00 | 	long	@_do_plot
43990     1C 1F 01 00 | 	long	@_do_draw
43994     8C 8E 01 00 | 	long	@_do_print
43998     A8 F4 00 00 | 	long	@_do_circle
4399c     50 21 01 00 | 	long	@_do_fcircle
439a0     9C E3 00 00 | 	long	@_do_box
439a4     34 26 01 00 | 	long	@_do_frame
439a8     84 F9 00 00 | 	long	@_do_color
439ac     C4 23 01 00 | 	long	@_do_for
439b0     DC 62 01 00 | 	long	@_do_next
439b4     84 4D 01 00 | 	long	@_do_list
439b8     FC AF 01 00 | 	long	@_do_run
439bc     78 20 01 00 | 	long	@_do_error
439c0     8C 33 01 00 | 	long	@_do_fast_goto
439c4     7C 34 01 00 | 	long	@_do_find_goto
439c8     90 36 01 00 | 	long	@_do_slow_goto
439cc     C4 66 01 00 | 	long	@_do_nothing
439d0     18 B4 01 00 | 	long	@_do_save
439d4     20 50 01 00 | 	long	@_do_load
439d8     60 7F 01 00 | 	long	@_do_pinwrite
439dc     68 CA 01 00 | 	long	@_do_waitms
439e0     9C CB 01 00 | 	long	@_do_waitvbl
439e4     84 39 01 00 | 	long	@_do_if
439e8     10 20 01 00 | 	long	@_do_else
439ec     B0 E0 01 00 | 	long	@_do_eq
439f0     54 E7 01 00 | 	long	@_do_ge
439f4     20 F1 01 00 | 	long	@_do_le
439f8     3C EC 01 00 | 	long	@_do_gt
439fc     FC F5 01 00 | 	long	@_do_lt
43a00     B4 04 02 00 | 	long	@_do_ne
43a04     64 AD 01 00 | 	long	@_do_rnd
43a08     84 E5 00 00 | 	long	@_do_brun
43a0c     20 DF 00 00 | 	long	@_do_beep
43a10     AC 17 01 00 | 	long	@_do_dir
43a14     94 7B 01 00 | 	long	@_do_paper
43a18     40 3D 01 00 | 	long	@_do_ink
43a1c     48 23 01 00 | 	long	@_do_font
43a20     E4 5A 01 00 | 	long	@_do_mode
43a24     2C 5F 01 00 | 	long	@_do_mouse
43a28     0C 32 01 00 | 	long	@_do_gettime
43a2c     B8 FE 00 00 | 	long	@_do_cursor
43a30     20 F6 00 00 | 	long	@_do_click
43a34     E8 5F 01 00 | 	long	@_do_mousex
43a38     2C 60 01 00 | 	long	@_do_mousey
43a3c     60 5F 01 00 | 	long	@_do_mousek
43a40     A4 5F 01 00 | 	long	@_do_mousew
43a44     D0 BF 01 00 | 	long	@_do_sin
43a48     08 C3 01 00 | 	long	@_do_stick
43a4c     98 C4 01 00 | 	long	@_do_strig
43a50     28 C1 01 00 | 	long	@_do_sprite
43a54     D4 12 01 00 | 	long	@_do_defsprite
43a58     B8 30 01 00 | 	long	@_do_getpixel
43a5c     44 CA 01 00 | 	long	@_do_waitclock
43a60     78 FE 01 00 | 	long	@_do_negative
43a64     64 9A 01 00 | 	long	@_do_rdpin
43a68     88 AF 01 00 | 	long	@_do_rqpin
43a6c     8C 7D 01 00 | 	long	@_do_pinread
43a70     A8 CB 01 00 | 	long	@_do_wrpin
43a74     28 CC 01 00 | 	long	@_do_wxpin
43a78     A8 CC 01 00 | 	long	@_do_wypin
43a7c     CC 7C 01 00 | 	long	@_do_pinfloat
43a80     4C 7D 01 00 | 	long	@_do_pinlo
43a84     0C 7D 01 00 | 	long	@_do_pinhi
43a88     10 7E 01 00 | 	long	@_do_pinstart
43a8c     20 7F 01 00 | 	long	@_do_pintoggle
43a90     04 8E 01 00 | 	long	@_do_position
43a94     94 FD 00 00 | 	long	@_do_cos
43a98     28 C6 01 00 | 	long	@_do_tan
43a9c     08 DE 00 00 | 	long	@_do_atn
43aa0     F8 DC 00 00 | 	long	@_do_asin
43aa4     88 DA 00 00 | 	long	@_do_acos
43aa8     14 C2 01 00 | 	long	@_do_sqr
43aac     34 22 01 00 | 	long	@_do_fill
43ab0     E8 09 01 00 | 	long	@_do_defsnd
43ab4     EC FE 00 00 | 	long	@_do_defenv
43ab8     3C 9A 01 00 | 	long	@_do_rad
43abc     48 16 01 00 | 	long	@_do_deg
43ac0     C0 3D 01 00 | 	long	@_do_int
43ac4     E8 7F 01 00 | 	long	@_do_play
43ac8     28 BA 01 00 | 	long	@_do_setdelay
43acc     D0 BA 01 00 | 	long	@_do_setenv
43ad0     78 BB 01 00 | 	long	@_do_setlen
43ad4     20 BC 01 00 | 	long	@_do_setpan
43ad8     70 BD 01 00 | 	long	@_do_setvol
43adc     18 BE 01 00 | 	long	@_do_setwave
43ae0     C8 BC 01 00 | 	long	@_do_setsustain
43ae4     5C AA 01 00 | 	long	@_do_release
43ae8     A4 2E 01 00 | 	long	@_do_getenvsustain
43aec     F4 8C 01 00 | 	long	@_do_poke
43af0     44 1E 01 00 | 	long	@_do_dpoke
43af4     F8 56 01 00 | 	long	@_do_lpoke
43af8     1C 7C 01 00 | 	long	@_do_peek
43afc     98 1D 01 00 | 	long	@_do_dpeek
43b00     4C 56 01 00 | 	long	@_do_lpeek
43b04     90 27 01 00 | 	long	@_do_fre
43b08     B4 2F 01 00 | 	long	@_do_getnotevalue
43b0c     E8 D8 01 00 | 	long	@_do_getaddr
43b10     68 3A 01 00 | 	long	@_do_inkey
43b14     08 DA 00 00 | 	long	@_do_abs
43b18     20 38 01 00 | 	long	@_do_hex
43b1c     38 E2 00 00 | 	long	@_do_bin
43b20     38 C7 01 00 | 	long	@_do_val
43b24     A8 F3 00 00 | 	long	@_do_chr
43b28     98 DB 00 00 | 	long	@_do_asc
43b2c     84 4A 01 00 | 	long	@_do_left
43b30     D8 AB 01 00 | 	long	@_do_right
43b34     58 58 01 00 | 	long	@_do_mid
43b38     10 4C 01 00 | 	long	@_do_len
43b3c     74 32 01 00 | 	long	@_do_gosub
43b40     2C AB 01 00 | 	long	@_do_return
43b44     34 20 01 00 | 	long	@_do_end
43b48     CC 8D 01 00 | 	long	@_do_pop
43b4c     D0 54 01 00 | 	long	@_do_log
43b50     9C F1 00 00 | 	long	@_do_changevol
43b54     7C F2 00 00 | 	long	@_do_changewav
43b58     8C F0 00 00 | 	long	@_do_changepan
43b5c     70 ED 00 00 | 	long	@_do_changefreq
43b60     C0 BE 01 00 | 	long	@_do_shutup
43b64     34 AF 01 00 | 	long	@_do_round
43b68     68 20 01 00 | 	long	@_do_enter
43b6c     EC 67 01 00 | 	long	@_do_open
43b70     4C F6 00 00 | 	long	@_do_close
43b74     F4 27 01 00 | 	long	@_do_get
43b78     FC 94 01 00 | 	long	@_do_put
43b7c     BC E7 00 00 | 	long	@_do_cd
43b80     70 16 01 00 | 	long	@_do_delete
43b84     24 5A 01 00 | 	long	@_do_mkdir
43b88     34 E0 00 00 | 	long	@_do_blit
43b8c     5C 27 01 00 | 	long	@_do_framebuf
43b90     C8 66 01 00 | 	long	@_do_on
43b94     E0 C0 01 00 | 	long	@_do_skip
43b98     7C 3E 01 00 | 	long	@_do_input
43b9c     C8 9C 01 00 | 	long	@_do_read
43ba0     F4 AA 01 00 | 	long	@_do_restore
43ba4     14 74 01 00 | 	long	@_do_padx
43ba8     94 76 01 00 | 	long	@_do_pady
43bac     14 79 01 00 | 	long	@_do_padz
43bb0     94 6C 01 00 | 	long	@_do_padrx
43bb4     14 6F 01 00 | 	long	@_do_padry
43bb8     94 71 01 00 | 	long	@_do_padrz
43bbc     04 6B 01 00 | 	long	@_do_padh
43bc0     BC F9 00 00 | 	long	@_do_copy
43bc4     08 F7 00 00 | 	long	@_do_coginit
43bc8     44 F9 00 00 | 	long	@_do_cogstop
43bcc     D0 57 01 00 | 	long	@_do_memlo
43bd0     14 58 01 00 | 	long	@_do_memtop
43bd4     BC B7 01 00 | 	long	@_do_setcolor
43bd8     98 2D 01 00 | 	long	@_do_getcolor
43bdc     C0 53 02 00 | 	long	@_hg010b_spin2_putchar
43be0     A4 69 03 00 | 	long	@__struct___bas_wrap_sender_tx
43be4     E8 69 03 00 | 	long	@__struct___bas_wrap_sender_rx
43be8     30 6A 03 00 | 	long	@__struct___bas_wrap_sender_close
43bec     D4 68 03 00 | 	long	@__struct__s_vfs_file_t_putchar
43bf0     44 69 03 00 | 	long	@__struct__s_vfs_file_t_getchar
43bf4     8C 68 03 00 | 	long	@___strs_cl_pfunc
43bf8     24 C6 02 00 | 	long	@__system____root_opendir
43bfc     C0 C6 02 00 | 	long	@__system____root_closedir
43c00     3C C6 02 00 | 	long	@__system____root_readdir
43c04     C8 C6 02 00 | 	long	@__system____root_stat
43c08     14 BF 02 00 | 	long	@__system____default_putc
43c0c     98 BE 02 00 | 	long	@__system____default_getc
43c10     BC BF 02 00 | 	long	@__system____default_flush
43c14     94 53 03 00 | 	long	@_fatfs_cc_v_close
43c18     B0 57 03 00 | 	long	@_fatfs_cc_v_read
43c1c     C4 58 03 00 | 	long	@_fatfs_cc_v_write
43c20     A4 59 03 00 | 	long	@_fatfs_cc_v_lseek
43c24     2C 5A 03 00 | 	long	@_fatfs_cc_v_ioctl
43c28     80 5A 03 00 | 	long	@_fatfs_cc_v_open
43c2c     F8 52 03 00 | 	long	@_fatfs_cc_v_creat
43c30     D8 53 03 00 | 	long	@_fatfs_cc_v_opendir
43c34     4C 54 03 00 | 	long	@_fatfs_cc_v_closedir
43c38     8C 54 03 00 | 	long	@_fatfs_cc_v_readdir
43c3c     C0 55 03 00 | 	long	@_fatfs_cc_v_stat
43c40     40 5A 03 00 | 	long	@_fatfs_cc_v_mkdir
43c44     60 5A 03 00 | 	long	@_fatfs_cc_v_rmdir
43c48     50 5A 03 00 | 	long	@_fatfs_cc_v_remove
43c4c     70 5A 03 00 | 	long	@_fatfs_cc_v_rename
43c50     90 5B 03 00 | 	long	@_fatfs_cc_v_init
43c54     98 5B 03 00 | 	long	@_fatfs_cc_v_deinit
43c58     68 70 02 00 | 	long	@__system___tx
43c5c     A8 70 02 00 | 	long	@__system___rx
43c60     34 D2 02 00 | 	long	@__system___rxtxioctl_0775
43c64     8C D2 02 00 | 	long	@__system____dummy_flush_0776
43c68     60 5B 03 00 | 	long	@_fatfs_cc_v_flush
43c6c                 | __heap_base
43c6c     00 00 00 00 
      ...             
5b36c     00 00 00 00 
5b370     00 00 00 00 | 	long	0[24002]
5b374                 | objmem
5b374     00 00 00 00 
      ...             
6588c     00 00 00 00 
65890     00 00 00 00 | 	long	0[10568]
65894                 | stackspace
65894     00 00 00 00 | 	long	0[1]
65898 100             | 	org	COG_BSS_START
65898 100             | _var01
65898 100             | 	res	1
65898 101             | _var02
65898 101             | 	res	1
65898 102             | _var03
65898 102             | 	res	1
65898 103             | _var04
65898 103             | 	res	1
65898 104             | _var05
65898 104             | 	res	1
65898 105             | _var06
65898 105             | 	res	1
65898 106             | _var07
65898 106             | 	res	1
65898 107             | _var08
65898 107             | 	res	1
65898 108             | _var09
65898 108             | 	res	1
65898 109             | arg01
65898 109             | 	res	1
65898 10a             | arg02
65898 10a             | 	res	1
65898 10b             | arg03
65898 10b             | 	res	1
65898 10c             | arg04
65898 10c             | 	res	1
65898 10d             | arg05
65898 10d             | 	res	1
65898 10e             | arg06
65898 10e             | 	res	1
65898 10f             | arg07
65898 10f             | 	res	1
65898 110             | arg08
65898 110             | 	res	1
65898 111             | arg09
65898 111             | 	res	1
65898 112             | arg10
65898 112             | 	res	1
65898 113             | local01
65898 113             | 	res	1
65898 114             | local02
65898 114             | 	res	1
65898 115             | local03
65898 115             | 	res	1
65898 116             | local04
65898 116             | 	res	1
65898 117             | local05
65898 117             | 	res	1
65898 118             | local06
65898 118             | 	res	1
65898 119             | local07
65898 119             | 	res	1
65898 11a             | local08
65898 11a             | 	res	1
65898 11b             | local09
65898 11b             | 	res	1
65898 11c             | local10
65898 11c             | 	res	1
65898 11d             | local11
65898 11d             | 	res	1
65898 11e             | local12
65898 11e             | 	res	1
65898 11f             | local13
65898 11f             | 	res	1
65898 120             | local14
65898 120             | 	res	1
65898 121             | local15
65898 121             | 	res	1
65898 122             | local16
65898 122             | 	res	1
65898 123             | local17
65898 123             | 	res	1
65898 124             | local18
65898 124             | 	res	1
65898 125             | local19
65898 125             | 	res	1
65898 126             | local20
65898 126             | 	res	1
65898 127             | local21
65898 127             | 	res	1
65898 128             | local22
65898 128             | 	res	1
65898 129             | local23
65898 129             | 	res	1
65898 12a             | local24
65898 12a             | 	res	1
65898 12b             | local25
65898 12b             | 	res	1
65898 12c             | local26
65898 12c             | 	res	1
65898 12d             | local27
65898 12d             | 	res	1
65898 12e             | local28
65898 12e             | 	res	1
65898 12f             | local29
65898 12f             | 	res	1
65898 130             | local30
65898 130             | 	res	1
65898 131             | local31
65898 131             | 	res	1
65898 132             | local32
65898 132             | 	res	1
65898 133             | local33
65898 133             | 	res	1
65898 134             | local34
65898 134             | 	res	1
65898 135             | local35
65898 135             | 	res	1
65898 136             | local36
65898 136             | 	res	1
65898 137             | local37
65898 137             | 	res	1
65898 138             | local38
65898 138             | 	res	1
65898 139             | local39
65898 139             | 	res	1
65898 13a             | local40
65898 13a             | 	res	1
65898 13b             | local41
65898 13b             | 	res	1
65898 13c             | local42
65898 13c             | 	res	1
65898 13d             | local43
65898 13d             | 	res	1
65898 13e             | local44
65898 13e             | 	res	1
65898 13f             | local45
65898 13f             | 	res	1
65898 140             | local46
65898 140             | 	res	1
65898 141             | local47
65898 141             | 	res	1
65898 142             | local48
65898 142             | 	res	1
65898 143             | local49
65898 143             | 	res	1
65898 144             | local50
65898 144             | 	res	1
65898 145             | local51
65898 145             | 	res	1
65898 146             | local52
65898 146             | 	res	1
65898 147             | local53
65898 147             | 	res	1
65898 148             | muldiva_
65898 148             | 	res	1
65898 149             | muldivb_
65898 149             | 	res	1
65898 14a             | 	fit	480
65898 14a             | 
